
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 ef 69 00 00       	call   c0006a0f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 b5 c6 01 00       	call   c001c6da <_init>
c0000025:	c3                   	ret    
c0000026:	bb 86 d1 01 c0       	mov    ebx,0xc001d186
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 94 d1 01 c0    	cmp    ebx,0xc001d194
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 fd 01 c0       	mov    eax,0xc001fd98
c0000049:	3d 98 fd 01 c0       	cmp    eax,0xc001fd98
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 fd 01 c0       	push   0xc001fd98
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 fd 01 c0       	mov    eax,0xc001fd98
c0000075:	2d 98 fd 01 c0       	sub    eax,0xc001fd98
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 fd 01 c0       	push   0xc001fd98
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 20 ff 01 c0 00 	cmp    BYTE PTR ds:0xc001ff20,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 9c d1 01 c0       	mov    ebx,0xc001d19c
c00000bb:	81 eb 98 d1 01 c0    	sub    ebx,0xc001d198
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 98 d1 01 c0       	mov    esi,0xc001d198
c00000ca:	a1 24 ff 01 c0       	mov    eax,ds:0xc001ff24
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 24 ff 01 c0       	mov    ds:0xc001ff24,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 24 ff 01 c0       	mov    eax,ds:0xc001ff24
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 fd 01 c0       	push   0xc001fd98
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 20 ff 01 c0 01 	mov    BYTE PTR ds:0xc001ff20,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 28 ff 01 c0       	push   0xc001ff28
c000012c:	68 98 fd 01 c0       	push   0xc001fd98
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 10 1e 01 00       	call   c00120e0 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 00 92 00 00       	call   c00094e8 <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 ee 1d 01 00       	call   c00120e0 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 af 22 01 00       	call   c00125c0 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 f2 28 01 00       	call   c0012c0c <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 70 03 02 c0 	lgdtd  ds:0xc0020370
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 54 55 00 00       	jmp    c00058f6 <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax

c00003a4 <memcmp>:
c00003a4:	56                   	push   esi
c00003a5:	53                   	push   ebx
c00003a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003b2:	85 f6                	test   esi,esi
c00003b4:	74 1d                	je     c00003d3 <memcmp+0x2f>
c00003b6:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b8:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003bb:	38 cb                	cmp    bl,cl
c00003bd:	75 19                	jne    c00003d8 <memcmp+0x34>
c00003bf:	01 c6                	add    esi,eax
c00003c1:	eb 0a                	jmp    c00003cd <memcmp+0x29>
c00003c3:	90                   	nop
c00003c4:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c6:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003c9:	38 d9                	cmp    cl,bl
c00003cb:	75 0b                	jne    c00003d8 <memcmp+0x34>
c00003cd:	40                   	inc    eax
c00003ce:	42                   	inc    edx
c00003cf:	39 f0                	cmp    eax,esi
c00003d1:	75 f1                	jne    c00003c4 <memcmp+0x20>
c00003d3:	31 c0                	xor    eax,eax
c00003d5:	5b                   	pop    ebx
c00003d6:	5e                   	pop    esi
c00003d7:	c3                   	ret    
c00003d8:	0f b6 c1             	movzx  eax,cl
c00003db:	29 d8                	sub    eax,ebx
c00003dd:	5b                   	pop    ebx
c00003de:	5e                   	pop    esi
c00003df:	c3                   	ret    

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 80 00 00 00    	jae    c0000478 <memmove+0x98>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	74 74                	je     c0000470 <memmove+0x90>
c00003fc:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003ff:	8d 75 04             	lea    esi,[ebp+0x4]
c0000402:	39 cd                	cmp    ebp,ecx
c0000404:	0f 93 c1             	setae  cl
c0000407:	39 f3                	cmp    ebx,esi
c0000409:	0f 93 c0             	setae  al
c000040c:	89 c6                	mov    esi,eax
c000040e:	09 ce                	or     esi,ecx
c0000410:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000413:	89 f0                	mov    eax,esi
c0000415:	83 f9 0c             	cmp    ecx,0xc
c0000418:	0f 97 c1             	seta   cl
c000041b:	84 c8                	test   al,cl
c000041d:	74 75                	je     c0000494 <memmove+0xb4>
c000041f:	89 e9                	mov    ecx,ebp
c0000421:	09 d9                	or     ecx,ebx
c0000423:	83 e1 03             	and    ecx,0x3
c0000426:	75 6c                	jne    c0000494 <memmove+0xb4>
c0000428:	89 d7                	mov    edi,edx
c000042a:	89 d9                	mov    ecx,ebx
c000042c:	83 e7 fc             	and    edi,0xfffffffc
c000042f:	89 ee                	mov    esi,ebp
c0000431:	01 df                	add    edi,ebx
c0000433:	90                   	nop
c0000434:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000436:	83 c6 04             	add    esi,0x4
c0000439:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000043c:	83 c1 04             	add    ecx,0x4
c000043f:	39 f9                	cmp    ecx,edi
c0000441:	75 f1                	jne    c0000434 <memmove+0x54>
c0000443:	89 d1                	mov    ecx,edx
c0000445:	89 d7                	mov    edi,edx
c0000447:	83 e1 fc             	and    ecx,0xfffffffc
c000044a:	29 cf                	sub    edi,ecx
c000044c:	01 cb                	add    ebx,ecx
c000044e:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000452:	39 ca                	cmp    edx,ecx
c0000454:	74 1a                	je     c0000470 <memmove+0x90>
c0000456:	8a 03                	mov    al,BYTE PTR [ebx]
c0000458:	83 ff 01             	cmp    edi,0x1
c000045b:	88 06                	mov    BYTE PTR [esi],al
c000045d:	74 11                	je     c0000470 <memmove+0x90>
c000045f:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000462:	83 ff 02             	cmp    edi,0x2
c0000465:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000468:	74 06                	je     c0000470 <memmove+0x90>
c000046a:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c000046d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000470:	5b                   	pop    ebx
c0000471:	89 e8                	mov    eax,ebp
c0000473:	5e                   	pop    esi
c0000474:	5f                   	pop    edi
c0000475:	5d                   	pop    ebp
c0000476:	c3                   	ret    
c0000477:	90                   	nop
c0000478:	76 f6                	jbe    c0000470 <memmove+0x90>
c000047a:	85 d2                	test   edx,edx
c000047c:	74 f2                	je     c0000470 <memmove+0x90>
c000047e:	4b                   	dec    ebx
c000047f:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000482:	66 90                	xchg   ax,ax
c0000484:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000487:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000048a:	4a                   	dec    edx
c000048b:	75 f7                	jne    c0000484 <memmove+0xa4>
c000048d:	5b                   	pop    ebx
c000048e:	89 e8                	mov    eax,ebp
c0000490:	5e                   	pop    esi
c0000491:	5f                   	pop    edi
c0000492:	5d                   	pop    ebp
c0000493:	c3                   	ret    
c0000494:	01 ea                	add    edx,ebp
c0000496:	89 e9                	mov    ecx,ebp
c0000498:	8a 03                	mov    al,BYTE PTR [ebx]
c000049a:	41                   	inc    ecx
c000049b:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000049e:	43                   	inc    ebx
c000049f:	39 d1                	cmp    ecx,edx
c00004a1:	75 f5                	jne    c0000498 <memmove+0xb8>
c00004a3:	eb cb                	jmp    c0000470 <memmove+0x90>
c00004a5:	8d 76 00             	lea    esi,[esi+0x0]

c00004a8 <memset>:
c00004a8:	57                   	push   edi
c00004a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00004ad:	85 c9                	test   ecx,ecx
c00004af:	74 0b                	je     c00004bc <memset+0x14>
c00004b1:	fc                   	cld    
c00004b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00004b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00004ba:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00004bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00004c0:	5f                   	pop    edi
c00004c1:	c3                   	ret    
c00004c2:	66 90                	xchg   ax,ax

c00004c4 <strlen>:
c00004c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00004c8:	31 c0                	xor    eax,eax
c00004ca:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00004cd:	74 09                	je     c00004d8 <strlen+0x14>
c00004cf:	90                   	nop
c00004d0:	40                   	inc    eax
c00004d1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00004d5:	75 f9                	jne    c00004d0 <strlen+0xc>
c00004d7:	c3                   	ret    
c00004d8:	c3                   	ret    
c00004d9:	8d 76 00             	lea    esi,[esi+0x0]

c00004dc <strpbrk>:
c00004dc:	57                   	push   edi
c00004dd:	56                   	push   esi
c00004de:	53                   	push   ebx
c00004df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004e3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00004e7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00004e9:	84 db                	test   bl,bl
c00004eb:	74 21                	je     c000050e <strpbrk+0x32>
c00004ed:	8a 07                	mov    al,BYTE PTR [edi]
c00004ef:	84 c0                	test   al,al
c00004f1:	74 14                	je     c0000507 <strpbrk+0x2b>
c00004f3:	38 d8                	cmp    al,bl
c00004f5:	74 19                	je     c0000510 <strpbrk+0x34>
c00004f7:	89 fa                	mov    edx,edi
c00004f9:	eb 05                	jmp    c0000500 <strpbrk+0x24>
c00004fb:	90                   	nop
c00004fc:	38 d9                	cmp    cl,bl
c00004fe:	74 10                	je     c0000510 <strpbrk+0x34>
c0000500:	42                   	inc    edx
c0000501:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000503:	84 c9                	test   cl,cl
c0000505:	75 f5                	jne    c00004fc <strpbrk+0x20>
c0000507:	46                   	inc    esi
c0000508:	8a 1e                	mov    bl,BYTE PTR [esi]
c000050a:	84 db                	test   bl,bl
c000050c:	75 e1                	jne    c00004ef <strpbrk+0x13>
c000050e:	31 f6                	xor    esi,esi
c0000510:	89 f0                	mov    eax,esi
c0000512:	5b                   	pop    ebx
c0000513:	5e                   	pop    esi
c0000514:	5f                   	pop    edi
c0000515:	c3                   	ret    
c0000516:	66 90                	xchg   ax,ax

c0000518 <strtok>:
c0000518:	56                   	push   esi
c0000519:	53                   	push   ebx
c000051a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000051e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000522:	85 db                	test   ebx,ebx
c0000524:	75 07                	jne    c000052d <strtok+0x15>
c0000526:	eb 2c                	jmp    c0000554 <strtok+0x3c>
c0000528:	43                   	inc    ebx
c0000529:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000052d:	56                   	push   esi
c000052e:	53                   	push   ebx
c000052f:	e8 a8 ff ff ff       	call   c00004dc <strpbrk>
c0000534:	5a                   	pop    edx
c0000535:	a3 40 ff 01 c0       	mov    ds:0xc001ff40,eax
c000053a:	59                   	pop    ecx
c000053b:	39 d8                	cmp    eax,ebx
c000053d:	74 e9                	je     c0000528 <strtok+0x10>
c000053f:	85 c0                	test   eax,eax
c0000541:	74 1b                	je     c000055e <strtok+0x46>
c0000543:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000546:	8d 50 01             	lea    edx,[eax+0x1]
c0000549:	89 d8                	mov    eax,ebx
c000054b:	89 15 40 ff 01 c0    	mov    DWORD PTR ds:0xc001ff40,edx
c0000551:	5b                   	pop    ebx
c0000552:	5e                   	pop    esi
c0000553:	c3                   	ret    
c0000554:	8b 1d 40 ff 01 c0    	mov    ebx,DWORD PTR ds:0xc001ff40
c000055a:	85 db                	test   ebx,ebx
c000055c:	75 cf                	jne    c000052d <strtok+0x15>
c000055e:	31 c0                	xor    eax,eax
c0000560:	5b                   	pop    ebx
c0000561:	5e                   	pop    esi
c0000562:	c3                   	ret    
c0000563:	90                   	nop

c0000564 <strcpy>:
c0000564:	53                   	push   ebx
c0000565:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000569:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000056d:	89 c3                	mov    ebx,eax
c000056f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000571:	84 d2                	test   dl,dl
c0000573:	74 0d                	je     c0000582 <strcpy+0x1e>
c0000575:	8d 76 00             	lea    esi,[esi+0x0]
c0000578:	88 13                	mov    BYTE PTR [ebx],dl
c000057a:	41                   	inc    ecx
c000057b:	43                   	inc    ebx
c000057c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000057e:	84 d2                	test   dl,dl
c0000580:	75 f6                	jne    c0000578 <strcpy+0x14>
c0000582:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000585:	5b                   	pop    ebx
c0000586:	c3                   	ret    
c0000587:	90                   	nop

c0000588 <strncpy>:
c0000588:	55                   	push   ebp
c0000589:	57                   	push   edi
c000058a:	56                   	push   esi
c000058b:	53                   	push   ebx
c000058c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000590:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000594:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000598:	85 c0                	test   eax,eax
c000059a:	74 39                	je     c00005d5 <strncpy+0x4d>
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	8d 48 ff             	lea    ecx,[eax-0x1]
c00005a1:	8d 55 01             	lea    edx,[ebp+0x1]
c00005a4:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00005a7:	84 db                	test   bl,bl
c00005a9:	74 31                	je     c00005dc <strncpy+0x54>
c00005ab:	85 c9                	test   ecx,ecx
c00005ad:	74 26                	je     c00005d5 <strncpy+0x4d>
c00005af:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c00005b2:	8d 48 fe             	lea    ecx,[eax-0x2]
c00005b5:	8d 55 02             	lea    edx,[ebp+0x2]
c00005b8:	8d 46 02             	lea    eax,[esi+0x2]
c00005bb:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c00005be:	84 db                	test   bl,bl
c00005c0:	75 0f                	jne    c00005d1 <strncpy+0x49>
c00005c2:	eb 18                	jmp    c00005dc <strncpy+0x54>
c00005c4:	40                   	inc    eax
c00005c5:	42                   	inc    edx
c00005c6:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00005c9:	49                   	dec    ecx
c00005ca:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00005cd:	84 db                	test   bl,bl
c00005cf:	74 0b                	je     c00005dc <strncpy+0x54>
c00005d1:	85 c9                	test   ecx,ecx
c00005d3:	75 ef                	jne    c00005c4 <strncpy+0x3c>
c00005d5:	5b                   	pop    ebx
c00005d6:	89 e8                	mov    eax,ebp
c00005d8:	5e                   	pop    esi
c00005d9:	5f                   	pop    edi
c00005da:	5d                   	pop    ebp
c00005db:	c3                   	ret    
c00005dc:	85 c9                	test   ecx,ecx
c00005de:	74 f5                	je     c00005d5 <strncpy+0x4d>
c00005e0:	fc                   	cld    
c00005e1:	31 c0                	xor    eax,eax
c00005e3:	89 d7                	mov    edi,edx
c00005e5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00005e7:	89 e8                	mov    eax,ebp
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	5f                   	pop    edi
c00005ec:	5d                   	pop    ebp
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strcmp>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00005f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00005fa:	8a 16                	mov    dl,BYTE PTR [esi]
c00005fc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00005ff:	38 d1                	cmp    cl,dl
c0000601:	75 1d                	jne    c0000620 <strcmp+0x30>
c0000603:	84 c9                	test   cl,cl
c0000605:	74 21                	je     c0000628 <strcmp+0x38>
c0000607:	b8 01 00 00 00       	mov    eax,0x1
c000060c:	eb 07                	jmp    c0000615 <strcmp+0x25>
c000060e:	66 90                	xchg   ax,ax
c0000610:	40                   	inc    eax
c0000611:	84 d2                	test   dl,dl
c0000613:	74 13                	je     c0000628 <strcmp+0x38>
c0000615:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000618:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c000061c:	38 ca                	cmp    dl,cl
c000061e:	74 f0                	je     c0000610 <strcmp+0x20>
c0000620:	0f b6 c2             	movzx  eax,dl
c0000623:	5b                   	pop    ebx
c0000624:	29 c8                	sub    eax,ecx
c0000626:	5e                   	pop    esi
c0000627:	c3                   	ret    
c0000628:	31 c0                	xor    eax,eax
c000062a:	5b                   	pop    ebx
c000062b:	5e                   	pop    esi
c000062c:	c3                   	ret    
c000062d:	8d 76 00             	lea    esi,[esi+0x0]

c0000630 <strchr>:
c0000630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000634:	8a 10                	mov    dl,BYTE PTR [eax]
c0000636:	84 d2                	test   dl,dl
c0000638:	74 15                	je     c000064f <strchr+0x1f>
c000063a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000063e:	38 ca                	cmp    dl,cl
c0000640:	75 06                	jne    c0000648 <strchr+0x18>
c0000642:	eb 0e                	jmp    c0000652 <strchr+0x22>
c0000644:	38 ca                	cmp    dl,cl
c0000646:	74 09                	je     c0000651 <strchr+0x21>
c0000648:	40                   	inc    eax
c0000649:	8a 10                	mov    dl,BYTE PTR [eax]
c000064b:	84 d2                	test   dl,dl
c000064d:	75 f5                	jne    c0000644 <strchr+0x14>
c000064f:	31 c0                	xor    eax,eax
c0000651:	c3                   	ret    
c0000652:	c3                   	ret    
c0000653:	90                   	nop

c0000654 <strncmp>:
c0000654:	57                   	push   edi
c0000655:	56                   	push   esi
c0000656:	53                   	push   ebx
c0000657:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000065b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000065f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000663:	85 ff                	test   edi,edi
c0000665:	74 28                	je     c000068f <strncmp+0x3b>
c0000667:	8a 16                	mov    dl,BYTE PTR [esi]
c0000669:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000066c:	38 d1                	cmp    cl,dl
c000066e:	75 28                	jne    c0000698 <strncmp+0x44>
c0000670:	8d 46 01             	lea    eax,[esi+0x1]
c0000673:	84 c9                	test   cl,cl
c0000675:	74 18                	je     c000068f <strncmp+0x3b>
c0000677:	01 fe                	add    esi,edi
c0000679:	eb 0f                	jmp    c000068a <strncmp+0x36>
c000067b:	90                   	nop
c000067c:	8a 10                	mov    dl,BYTE PTR [eax]
c000067e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000681:	38 ca                	cmp    dl,cl
c0000683:	75 13                	jne    c0000698 <strncmp+0x44>
c0000685:	40                   	inc    eax
c0000686:	84 d2                	test   dl,dl
c0000688:	74 05                	je     c000068f <strncmp+0x3b>
c000068a:	43                   	inc    ebx
c000068b:	39 c6                	cmp    esi,eax
c000068d:	75 ed                	jne    c000067c <strncmp+0x28>
c000068f:	5b                   	pop    ebx
c0000690:	31 c0                	xor    eax,eax
c0000692:	5e                   	pop    esi
c0000693:	5f                   	pop    edi
c0000694:	c3                   	ret    
c0000695:	8d 76 00             	lea    esi,[esi+0x0]
c0000698:	5b                   	pop    ebx
c0000699:	0f b6 c2             	movzx  eax,dl
c000069c:	5e                   	pop    esi
c000069d:	29 c8                	sub    eax,ecx
c000069f:	5f                   	pop    edi
c00006a0:	c3                   	ret    
c00006a1:	8d 76 00             	lea    esi,[esi+0x0]

c00006a4 <strcat>:
c00006a4:	56                   	push   esi
c00006a5:	53                   	push   ebx
c00006a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006aa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006ae:	89 c3                	mov    ebx,eax
c00006b0:	eb 04                	jmp    c00006b6 <strcat+0x12>
c00006b2:	66 90                	xchg   ax,ax
c00006b4:	89 d3                	mov    ebx,edx
c00006b6:	8d 53 01             	lea    edx,[ebx+0x1]
c00006b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00006bd:	75 f5                	jne    c00006b4 <strcat+0x10>
c00006bf:	31 d2                	xor    edx,edx
c00006c1:	8d 76 00             	lea    esi,[esi+0x0]
c00006c4:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00006c7:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00006ca:	42                   	inc    edx
c00006cb:	84 c9                	test   cl,cl
c00006cd:	75 f5                	jne    c00006c4 <strcat+0x20>
c00006cf:	5b                   	pop    ebx
c00006d0:	5e                   	pop    esi
c00006d1:	c3                   	ret    
c00006d2:	66 90                	xchg   ax,ax

c00006d4 <strncat>:
c00006d4:	56                   	push   esi
c00006d5:	53                   	push   ebx
c00006d6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006e2:	85 f6                	test   esi,esi
c00006e4:	74 1e                	je     c0000704 <strncat+0x30>
c00006e6:	89 c2                	mov    edx,eax
c00006e8:	42                   	inc    edx
c00006e9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00006ed:	75 f9                	jne    c00006e8 <strncat+0x14>
c00006ef:	01 ce                	add    esi,ecx
c00006f1:	eb 06                	jmp    c00006f9 <strncat+0x25>
c00006f3:	90                   	nop
c00006f4:	39 f1                	cmp    ecx,esi
c00006f6:	74 10                	je     c0000708 <strncat+0x34>
c00006f8:	42                   	inc    edx
c00006f9:	41                   	inc    ecx
c00006fa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006fd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000700:	84 db                	test   bl,bl
c0000702:	75 f0                	jne    c00006f4 <strncat+0x20>
c0000704:	5b                   	pop    ebx
c0000705:	5e                   	pop    esi
c0000706:	c3                   	ret    
c0000707:	90                   	nop
c0000708:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000070b:	5b                   	pop    ebx
c000070c:	5e                   	pop    esi
c000070d:	c3                   	ret    
c000070e:	66 90                	xchg   ax,ax

c0000710 <strstr>:
c0000710:	57                   	push   edi
c0000711:	56                   	push   esi
c0000712:	53                   	push   ebx
c0000713:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000717:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000071b:	57                   	push   edi
c000071c:	e8 a3 fd ff ff       	call   c00004c4 <strlen>
c0000721:	59                   	pop    ecx
c0000722:	85 c0                	test   eax,eax
c0000724:	74 2a                	je     c0000750 <strstr+0x40>
c0000726:	89 c6                	mov    esi,eax
c0000728:	eb 12                	jmp    c000073c <strstr+0x2c>
c000072a:	66 90                	xchg   ax,ax
c000072c:	56                   	push   esi
c000072d:	57                   	push   edi
c000072e:	53                   	push   ebx
c000072f:	e8 70 fc ff ff       	call   c00003a4 <memcmp>
c0000734:	83 c4 0c             	add    esp,0xc
c0000737:	85 c0                	test   eax,eax
c0000739:	74 15                	je     c0000750 <strstr+0x40>
c000073b:	43                   	inc    ebx
c000073c:	53                   	push   ebx
c000073d:	e8 82 fd ff ff       	call   c00004c4 <strlen>
c0000742:	5a                   	pop    edx
c0000743:	39 f0                	cmp    eax,esi
c0000745:	73 e5                	jae    c000072c <strstr+0x1c>
c0000747:	5b                   	pop    ebx
c0000748:	31 c0                	xor    eax,eax
c000074a:	5e                   	pop    esi
c000074b:	5f                   	pop    edi
c000074c:	c3                   	ret    
c000074d:	8d 76 00             	lea    esi,[esi+0x0]
c0000750:	89 d8                	mov    eax,ebx
c0000752:	5b                   	pop    ebx
c0000753:	5e                   	pop    esi
c0000754:	5f                   	pop    edi
c0000755:	c3                   	ret    
c0000756:	66 90                	xchg   ax,ax

c0000758 <toupper>:
c0000758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000075c:	0f b6 d0             	movzx  edx,al
c000075f:	f6 82 a0 d1 01 c0 02 	test   BYTE PTR [edx-0x3ffe2e60],0x2
c0000766:	74 03                	je     c000076b <toupper+0x13>
c0000768:	83 e8 20             	sub    eax,0x20
c000076b:	c3                   	ret    

c000076c <tolower>:
c000076c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000770:	0f b6 d0             	movzx  edx,al
c0000773:	f6 82 a0 d1 01 c0 01 	test   BYTE PTR [edx-0x3ffe2e60],0x1
c000077a:	74 03                	je     c000077f <tolower+0x13>
c000077c:	83 c0 20             	add    eax,0x20
c000077f:	c3                   	ret    

c0000780 <simple_strtoul>:
c0000780:	55                   	push   ebp
c0000781:	57                   	push   edi
c0000782:	56                   	push   esi
c0000783:	53                   	push   ebx
c0000784:	83 ec 08             	sub    esp,0x8
c0000787:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000078b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000078f:	90                   	nop
c0000790:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000793:	f6 82 a0 d1 01 c0 08 	test   BYTE PTR [edx-0x3ffe2e60],0x8
c000079a:	75 05                	jne    c00007a1 <simple_strtoul+0x21>
c000079c:	80 fa 09             	cmp    dl,0x9
c000079f:	75 03                	jne    c00007a4 <simple_strtoul+0x24>
c00007a1:	41                   	inc    ecx
c00007a2:	eb ec                	jmp    c0000790 <simple_strtoul+0x10>
c00007a4:	80 fa 2d             	cmp    dl,0x2d
c00007a7:	0f 84 1b 01 00 00    	je     c00008c8 <simple_strtoul+0x148>
c00007ad:	80 fa 2b             	cmp    dl,0x2b
c00007b0:	0f 84 c2 00 00 00    	je     c0000878 <simple_strtoul+0xf8>
c00007b6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00007be:	85 f6                	test   esi,esi
c00007c0:	0f 85 c3 00 00 00    	jne    c0000889 <simple_strtoul+0x109>
c00007c6:	8a 11                	mov    dl,BYTE PTR [ecx]
c00007c8:	80 fa 30             	cmp    dl,0x30
c00007cb:	0f 84 47 01 00 00    	je     c0000918 <simple_strtoul+0x198>
c00007d1:	be 0a 00 00 00       	mov    esi,0xa
c00007d6:	84 d2                	test   dl,dl
c00007d8:	0f 84 6f 01 00 00    	je     c000094d <simple_strtoul+0x1cd>
c00007de:	31 ed                	xor    ebp,ebp
c00007e0:	31 ff                	xor    edi,edi
c00007e2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00007e9:	eb 2b                	jmp    c0000816 <simple_strtoul+0x96>
c00007eb:	90                   	nop
c00007ec:	83 eb 30             	sub    ebx,0x30
c00007ef:	39 f3                	cmp    ebx,esi
c00007f1:	73 4d                	jae    c0000840 <simple_strtoul+0xc0>
c00007f3:	31 d2                	xor    edx,edx
c00007f5:	89 d8                	mov    eax,ebx
c00007f7:	f7 d0                	not    eax
c00007f9:	f7 f6                	div    esi
c00007fb:	39 f8                	cmp    eax,edi
c00007fd:	0f 82 b1 00 00 00    	jb     c00008b4 <simple_strtoul+0x134>
c0000803:	0f af fe             	imul   edi,esi
c0000806:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000080d:	01 df                	add    edi,ebx
c000080f:	41                   	inc    ecx
c0000810:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 2a                	je     c0000840 <simple_strtoul+0xc0>
c0000816:	0f b6 da             	movzx  ebx,dl
c0000819:	f6 83 a0 d1 01 c0 04 	test   BYTE PTR [ebx-0x3ffe2e60],0x4
c0000820:	75 ca                	jne    c00007ec <simple_strtoul+0x6c>
c0000822:	0f be d2             	movsx  edx,dl
c0000825:	52                   	push   edx
c0000826:	e8 2d ff ff ff       	call   c0000758 <toupper>
c000082b:	5b                   	pop    ebx
c000082c:	0f b6 d0             	movzx  edx,al
c000082f:	f6 82 a0 d1 01 c0 01 	test   BYTE PTR [edx-0x3ffe2e60],0x1
c0000836:	74 08                	je     c0000840 <simple_strtoul+0xc0>
c0000838:	8d 58 c9             	lea    ebx,[eax-0x37]
c000083b:	39 f3                	cmp    ebx,esi
c000083d:	72 b4                	jb     c00007f3 <simple_strtoul+0x73>
c000083f:	90                   	nop
c0000840:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000844:	85 c0                	test   eax,eax
c0000846:	74 14                	je     c000085c <simple_strtoul+0xdc>
c0000848:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000084b:	09 f8                	or     eax,edi
c000084d:	75 71                	jne    c00008c0 <simple_strtoul+0x140>
c000084f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000853:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000857:	31 ff                	xor    edi,edi
c0000859:	89 30                	mov    DWORD PTR [eax],esi
c000085b:	90                   	nop
c000085c:	4d                   	dec    ebp
c000085d:	75 05                	jne    c0000864 <simple_strtoul+0xe4>
c000085f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000864:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000869:	75 02                	jne    c000086d <simple_strtoul+0xed>
c000086b:	f7 df                	neg    edi
c000086d:	83 c4 08             	add    esp,0x8
c0000870:	89 f8                	mov    eax,edi
c0000872:	5b                   	pop    ebx
c0000873:	5e                   	pop    esi
c0000874:	5f                   	pop    edi
c0000875:	5d                   	pop    ebp
c0000876:	c3                   	ret    
c0000877:	90                   	nop
c0000878:	41                   	inc    ecx
c0000879:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000881:	85 f6                	test   esi,esi
c0000883:	0f 84 3d ff ff ff    	je     c00007c6 <simple_strtoul+0x46>
c0000889:	8d 46 fe             	lea    eax,[esi-0x2]
c000088c:	83 f8 22             	cmp    eax,0x22
c000088f:	77 6a                	ja     c00008fb <simple_strtoul+0x17b>
c0000891:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000893:	83 fe 08             	cmp    esi,0x8
c0000896:	0f 84 a2 00 00 00    	je     c000093e <simple_strtoul+0x1be>
c000089c:	83 fe 10             	cmp    esi,0x10
c000089f:	0f 85 31 ff ff ff    	jne    c00007d6 <simple_strtoul+0x56>
c00008a5:	80 fa 30             	cmp    dl,0x30
c00008a8:	74 2c                	je     c00008d6 <simple_strtoul+0x156>
c00008aa:	be 10 00 00 00       	mov    esi,0x10
c00008af:	e9 22 ff ff ff       	jmp    c00007d6 <simple_strtoul+0x56>
c00008b4:	bd 01 00 00 00       	mov    ebp,0x1
c00008b9:	31 ff                	xor    edi,edi
c00008bb:	e9 4f ff ff ff       	jmp    c000080f <simple_strtoul+0x8f>
c00008c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00008c4:	89 08                	mov    DWORD PTR [eax],ecx
c00008c6:	eb 94                	jmp    c000085c <simple_strtoul+0xdc>
c00008c8:	41                   	inc    ecx
c00008c9:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008d1:	e9 e8 fe ff ff       	jmp    c00007be <simple_strtoul+0x3e>
c00008d6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008da:	88 04 24             	mov    BYTE PTR [esp],al
c00008dd:	50                   	push   eax
c00008de:	e8 89 fe ff ff       	call   c000076c <tolower>
c00008e3:	5e                   	pop    esi
c00008e4:	83 f8 78             	cmp    eax,0x78
c00008e7:	0f 84 84 00 00 00    	je     c0000971 <simple_strtoul+0x1f1>
c00008ed:	41                   	inc    ecx
c00008ee:	be 10 00 00 00       	mov    esi,0x10
c00008f3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c00008f6:	e9 db fe ff ff       	jmp    c00007d6 <simple_strtoul+0x56>
c00008fb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00008ff:	85 ff                	test   edi,edi
c0000901:	74 5c                	je     c000095f <simple_strtoul+0x1df>
c0000903:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000907:	85 c9                	test   ecx,ecx
c0000909:	75 4e                	jne    c0000959 <simple_strtoul+0x1d9>
c000090b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000911:	31 ff                	xor    edi,edi
c0000913:	e9 4c ff ff ff       	jmp    c0000864 <simple_strtoul+0xe4>
c0000918:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000091c:	88 04 24             	mov    BYTE PTR [esp],al
c000091f:	50                   	push   eax
c0000920:	e8 47 fe ff ff       	call   c000076c <tolower>
c0000925:	5d                   	pop    ebp
c0000926:	83 f8 78             	cmp    eax,0x78
c0000929:	74 3b                	je     c0000966 <simple_strtoul+0x1e6>
c000092b:	41                   	inc    ecx
c000092c:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000092f:	80 fa 30             	cmp    dl,0x30
c0000932:	74 13                	je     c0000947 <simple_strtoul+0x1c7>
c0000934:	be 08 00 00 00       	mov    esi,0x8
c0000939:	e9 98 fe ff ff       	jmp    c00007d6 <simple_strtoul+0x56>
c000093e:	80 fa 30             	cmp    dl,0x30
c0000941:	0f 85 8f fe ff ff    	jne    c00007d6 <simple_strtoul+0x56>
c0000947:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c000094a:	41                   	inc    ecx
c000094b:	eb e7                	jmp    c0000934 <simple_strtoul+0x1b4>
c000094d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000951:	85 d2                	test   edx,edx
c0000953:	74 0a                	je     c000095f <simple_strtoul+0x1df>
c0000955:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000959:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000095d:	89 30                	mov    DWORD PTR [eax],esi
c000095f:	31 ff                	xor    edi,edi
c0000961:	e9 fe fe ff ff       	jmp    c0000864 <simple_strtoul+0xe4>
c0000966:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000969:	83 c1 02             	add    ecx,0x2
c000096c:	e9 34 ff ff ff       	jmp    c00008a5 <simple_strtoul+0x125>
c0000971:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000974:	be 10 00 00 00       	mov    esi,0x10
c0000979:	83 c1 02             	add    ecx,0x2
c000097c:	e9 55 fe ff ff       	jmp    c00007d6 <simple_strtoul+0x56>

c0000981 <largebin_index>:
c0000981:	89 c2                	mov    edx,eax
c0000983:	c1 ea 08             	shr    edx,0x8
c0000986:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000098c:	77 10                	ja     c000099e <largebin_index+0x1d>
c000098e:	0f bd d2             	bsr    edx,edx
c0000991:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000994:	d3 e8                	shr    eax,cl
c0000996:	83 e0 03             	and    eax,0x3
c0000999:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c000099d:	c3                   	ret    
c000099e:	b8 5f 00 00 00       	mov    eax,0x5f
c00009a3:	c3                   	ret    

c00009a4 <malloc_init_state>:
c00009a4:	53                   	push   ebx
c00009a5:	8d 50 34             	lea    edx,[eax+0x34]
c00009a8:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009ae:	89 d1                	mov    ecx,edx
c00009b0:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009b3:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009b6:	83 c2 08             	add    edx,0x8
c00009b9:	39 da                	cmp    edx,ebx
c00009bb:	75 f3                	jne    c00009b0 <malloc_init_state+0xc>
c00009bd:	8b 10                	mov    edx,DWORD PTR [eax]
c00009bf:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009c9:	83 e2 03             	and    edx,0x3
c00009cc:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009d6:	83 ca 48             	or     edx,0x48
c00009d9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009e3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009ed:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009f4:	89 10                	mov    DWORD PTR [eax],edx
c00009f6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c00009f9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a03:	5b                   	pop    ebx
c0000a04:	c3                   	ret    

c0000a05 <malloc_consolidate>:
c0000a05:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a07:	85 d2                	test   edx,edx
c0000a09:	0f 84 d8 00 00 00    	je     c0000ae7 <malloc_consolidate+0xe2>
c0000a0f:	55                   	push   ebp
c0000a10:	83 e2 fd             	and    edx,0xfffffffd
c0000a13:	57                   	push   edi
c0000a14:	89 c5                	mov    ebp,eax
c0000a16:	56                   	push   esi
c0000a17:	8d 78 34             	lea    edi,[eax+0x34]
c0000a1a:	53                   	push   ebx
c0000a1b:	83 ec 10             	sub    esp,0x10
c0000a1e:	89 10                	mov    DWORD PTR [eax],edx
c0000a20:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a24:	c1 ea 03             	shr    edx,0x3
c0000a27:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a2b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a2f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a32:	85 d2                	test   edx,edx
c0000a34:	0f 84 98 00 00 00    	je     c0000ad2 <malloc_consolidate+0xcd>
c0000a3a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a41:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a44:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a47:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a4b:	89 f9                	mov    ecx,edi
c0000a4d:	83 e1 fe             	and    ecx,0xfffffffe
c0000a50:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a53:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a56:	83 e3 fc             	and    ebx,0xfffffffc
c0000a59:	83 e7 01             	and    edi,0x1
c0000a5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a5f:	75 14                	jne    c0000a75 <malloc_consolidate+0x70>
c0000a61:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a63:	29 fa                	sub    edx,edi
c0000a65:	01 f9                	add    ecx,edi
c0000a67:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a6a:	89 fb                	mov    ebx,edi
c0000a6c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a6f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a72:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a75:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a78:	74 40                	je     c0000aba <malloc_consolidate+0xb5>
c0000a7a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a7d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a80:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a84:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a87:	83 e7 01             	and    edi,0x1
c0000a8a:	75 0e                	jne    c0000a9a <malloc_consolidate+0x95>
c0000a8c:	01 d9                	add    ecx,ebx
c0000a8e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a91:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000a97:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000a9a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000a9d:	89 ce                	mov    esi,ecx
c0000a9f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000aa2:	83 ce 01             	or     esi,0x1
c0000aa5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000aa8:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000aab:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000aae:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000ab2:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ab5:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ab8:	eb 0c                	jmp    c0000ac6 <malloc_consolidate+0xc1>
c0000aba:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000abd:	83 c9 01             	or     ecx,0x1
c0000ac0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ac3:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ac6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000aca:	85 d2                	test   edx,edx
c0000acc:	0f 85 6f ff ff ff    	jne    c0000a41 <malloc_consolidate+0x3c>
c0000ad2:	83 c5 04             	add    ebp,0x4
c0000ad5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ad9:	0f 85 50 ff ff ff    	jne    c0000a2f <malloc_consolidate+0x2a>
c0000adf:	83 c4 10             	add    esp,0x10
c0000ae2:	5b                   	pop    ebx
c0000ae3:	5e                   	pop    esi
c0000ae4:	5f                   	pop    edi
c0000ae5:	5d                   	pop    ebp
c0000ae6:	c3                   	ret    
c0000ae7:	e9 b8 fe ff ff       	jmp    c00009a4 <malloc_init_state>

c0000aec <dlfree>:
c0000aec:	57                   	push   edi
c0000aed:	56                   	push   esi
c0000aee:	53                   	push   ebx
c0000aef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000af3:	85 db                	test   ebx,ebx
c0000af5:	0f 84 e2 00 00 00    	je     c0000bdd <dlfree+0xf1>
c0000afb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000afe:	8b 0d 60 ff 01 c0    	mov    ecx,DWORD PTR ds:0xc001ff60
c0000b04:	89 f0                	mov    eax,esi
c0000b06:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b09:	83 e0 fc             	and    eax,0xfffffffc
c0000b0c:	39 c1                	cmp    ecx,eax
c0000b0e:	72 24                	jb     c0000b34 <dlfree+0x48>
c0000b10:	83 c9 03             	or     ecx,0x3
c0000b13:	c1 e8 03             	shr    eax,0x3
c0000b16:	89 0d 60 ff 01 c0    	mov    DWORD PTR ds:0xc001ff60,ecx
c0000b1c:	83 e8 02             	sub    eax,0x2
c0000b1f:	8b 0c 85 64 ff 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe009c]
c0000b26:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b28:	89 14 85 64 ff 01 c0 	mov    DWORD PTR [eax*4-0x3ffe009c],edx
c0000b2f:	e9 a9 00 00 00       	jmp    c0000bdd <dlfree+0xf1>
c0000b34:	83 e6 02             	and    esi,0x2
c0000b37:	0f 85 a0 00 00 00    	jne    c0000bdd <dlfree+0xf1>
c0000b3d:	83 c9 01             	or     ecx,0x1
c0000b40:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b43:	89 0d 60 ff 01 c0    	mov    DWORD PTR ds:0xc001ff60,ecx
c0000b49:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b4c:	83 e1 fc             	and    ecx,0xfffffffc
c0000b4f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b53:	75 13                	jne    c0000b68 <dlfree+0x7c>
c0000b55:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b58:	29 da                	sub    edx,ebx
c0000b5a:	01 d8                	add    eax,ebx
c0000b5c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b5f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b62:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b65:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b68:	39 35 8c ff 01 c0    	cmp    DWORD PTR ds:0xc001ff8c,esi
c0000b6e:	74 40                	je     c0000bb0 <dlfree+0xc4>
c0000b70:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b74:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b77:	80 e3 01             	and    bl,0x1
c0000b7a:	75 0e                	jne    c0000b8a <dlfree+0x9e>
c0000b7c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b7f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b82:	01 c8                	add    eax,ecx
c0000b84:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b87:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b8a:	8b 0d 9c ff 01 c0    	mov    ecx,DWORD PTR ds:0xc001ff9c
c0000b90:	c7 42 0c 94 ff 01 c0 	mov    DWORD PTR [edx+0xc],0xc001ff94
c0000b97:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000b9a:	89 15 9c ff 01 c0    	mov    DWORD PTR ds:0xc001ff9c,edx
c0000ba0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ba3:	89 c1                	mov    ecx,eax
c0000ba5:	83 c9 01             	or     ecx,0x1
c0000ba8:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bab:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bae:	eb 10                	jmp    c0000bc0 <dlfree+0xd4>
c0000bb0:	01 c8                	add    eax,ecx
c0000bb2:	89 c1                	mov    ecx,eax
c0000bb4:	83 c9 01             	or     ecx,0x1
c0000bb7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bba:	89 15 8c ff 01 c0    	mov    DWORD PTR ds:0xc001ff8c,edx
c0000bc0:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bc5:	76 16                	jbe    c0000bdd <dlfree+0xf1>
c0000bc7:	f6 05 60 ff 01 c0 02 	test   BYTE PTR ds:0xc001ff60,0x2
c0000bce:	74 0d                	je     c0000bdd <dlfree+0xf1>
c0000bd0:	5b                   	pop    ebx
c0000bd1:	b8 60 ff 01 c0       	mov    eax,0xc001ff60
c0000bd6:	5e                   	pop    esi
c0000bd7:	5f                   	pop    edi
c0000bd8:	e9 28 fe ff ff       	jmp    c0000a05 <malloc_consolidate>
c0000bdd:	5b                   	pop    ebx
c0000bde:	5e                   	pop    esi
c0000bdf:	5f                   	pop    edi
c0000be0:	c3                   	ret    

c0000be1 <sYSMALLOc>:
c0000be1:	55                   	push   ebp
c0000be2:	57                   	push   edi
c0000be3:	56                   	push   esi
c0000be4:	53                   	push   ebx
c0000be5:	89 d3                	mov    ebx,edx
c0000be7:	83 ec 2c             	sub    esp,0x2c
c0000bea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000bee:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000bf4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000bf7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000bfa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000bfe:	74 1f                	je     c0000c1f <sYSMALLOc+0x3e>
c0000c00:	89 d8                	mov    eax,ebx
c0000c02:	e8 fe fd ff ff       	call   c0000a05 <malloc_consolidate>
c0000c07:	83 ec 0c             	sub    esp,0xc
c0000c0a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c0e:	83 e8 07             	sub    eax,0x7
c0000c11:	50                   	push   eax
c0000c12:	e8 30 02 00 00       	call   c0000e47 <dlmalloc>
c0000c17:	83 c4 10             	add    esp,0x10
c0000c1a:	e9 20 02 00 00       	jmp    c0000e3f <sYSMALLOc+0x25e>
c0000c1f:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c22:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c28:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c2b:	83 e0 fc             	and    eax,0xfffffffc
c0000c2e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000c32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c36:	83 c0 10             	add    eax,0x10
c0000c39:	01 c1                	add    ecx,eax
c0000c3b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000c3f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c46:	74 04                	je     c0000c4c <sYSMALLOc+0x6b>
c0000c48:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000c4c:	f7 da                	neg    edx
c0000c4e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000c52:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000c56:	21 d1                	and    ecx,edx
c0000c58:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000c5c:	7f 07                	jg     c0000c65 <sYSMALLOc+0x84>
c0000c5e:	31 c0                	xor    eax,eax
c0000c60:	e9 da 01 00 00       	jmp    c0000e3f <sYSMALLOc+0x25e>
c0000c65:	83 ec 0c             	sub    esp,0xc
c0000c68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c6c:	e8 af 5b 00 00       	call   c0006820 <sbrk>
c0000c71:	83 c4 10             	add    esp,0x10
c0000c74:	89 c6                	mov    esi,eax
c0000c76:	83 f8 ff             	cmp    eax,0xffffffff
c0000c79:	74 e3                	je     c0000c5e <sYSMALLOc+0x7d>
c0000c7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c7f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000c83:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000c86:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000c8c:	39 f1                	cmp    ecx,esi
c0000c8e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000c94:	75 13                	jne    c0000ca9 <sYSMALLOc+0xc8>
c0000c96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c9a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000c9e:	83 c8 01             	or     eax,0x1
c0000ca1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ca4:	e9 3e 01 00 00       	jmp    c0000de7 <sYSMALLOc+0x206>
c0000ca9:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000caf:	88 d0                	mov    al,dl
c0000cb1:	83 e0 01             	and    eax,0x1
c0000cb4:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000cb9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000cbd:	0f 95 c0             	setne  al
c0000cc0:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000cc4:	39 f1                	cmp    ecx,esi
c0000cc6:	76 12                	jbe    c0000cda <sYSMALLOc+0xf9>
c0000cc8:	84 c0                	test   al,al
c0000cca:	74 0e                	je     c0000cda <sYSMALLOc+0xf9>
c0000ccc:	83 e2 fe             	and    edx,0xfffffffe
c0000ccf:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000cd5:	e9 83 00 00 00       	jmp    c0000d5d <sYSMALLOc+0x17c>
c0000cda:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000cdf:	74 7c                	je     c0000d5d <sYSMALLOc+0x17c>
c0000ce1:	84 c0                	test   al,al
c0000ce3:	74 0c                	je     c0000cf1 <sYSMALLOc+0x110>
c0000ce5:	89 f0                	mov    eax,esi
c0000ce7:	29 c8                	sub    eax,ecx
c0000ce9:	01 e8                	add    eax,ebp
c0000ceb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000cf1:	89 f2                	mov    edx,esi
c0000cf3:	83 e2 07             	and    edx,0x7
c0000cf6:	74 0c                	je     c0000d04 <sYSMALLOc+0x123>
c0000cf8:	b8 08 00 00 00       	mov    eax,0x8
c0000cfd:	29 d0                	sub    eax,edx
c0000cff:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d02:	eb 04                	jmp    c0000d08 <sYSMALLOc+0x127>
c0000d04:	89 f5                	mov    ebp,esi
c0000d06:	31 c0                	xor    eax,eax
c0000d08:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d0c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d14:	01 c1                	add    ecx,eax
c0000d16:	83 ec 0c             	sub    esp,0xc
c0000d19:	01 f1                	add    ecx,esi
c0000d1b:	01 ca                	add    edx,ecx
c0000d1d:	29 c8                	sub    eax,ecx
c0000d1f:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d23:	01 c2                	add    edx,eax
c0000d25:	52                   	push   edx
c0000d26:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d2a:	e8 f1 5a 00 00       	call   c0006820 <sbrk>
c0000d2f:	83 c4 10             	add    esp,0x10
c0000d32:	83 f8 ff             	cmp    eax,0xffffffff
c0000d35:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d39:	75 0f                	jne    c0000d4a <sYSMALLOc+0x169>
c0000d3b:	83 ec 0c             	sub    esp,0xc
c0000d3e:	6a 00                	push   0x0
c0000d40:	e8 db 5a 00 00       	call   c0006820 <sbrk>
c0000d45:	83 c4 10             	add    esp,0x10
c0000d48:	eb 30                	jmp    c0000d7a <sYSMALLOc+0x199>
c0000d4a:	39 c6                	cmp    esi,eax
c0000d4c:	76 33                	jbe    c0000d81 <sYSMALLOc+0x1a0>
c0000d4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d52:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000d59:	01 f0                	add    eax,esi
c0000d5b:	eb 1d                	jmp    c0000d7a <sYSMALLOc+0x199>
c0000d5d:	83 ec 0c             	sub    esp,0xc
c0000d60:	89 f5                	mov    ebp,esi
c0000d62:	6a 00                	push   0x0
c0000d64:	e8 b7 5a 00 00       	call   c0006820 <sbrk>
c0000d69:	89 c2                	mov    edx,eax
c0000d6b:	29 f2                	sub    edx,esi
c0000d6d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000d71:	83 c4 10             	add    esp,0x10
c0000d74:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d7a:	31 d2                	xor    edx,edx
c0000d7c:	83 f8 ff             	cmp    eax,0xffffffff
c0000d7f:	74 66                	je     c0000de7 <sYSMALLOc+0x206>
c0000d81:	29 e8                	sub    eax,ebp
c0000d83:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000d86:	01 d0                	add    eax,edx
c0000d88:	83 c8 01             	or     eax,0x1
c0000d8b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000d8e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d94:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d99:	74 4c                	je     c0000de7 <sYSMALLOc+0x206>
c0000d9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d9f:	83 e8 0c             	sub    eax,0xc
c0000da2:	83 e0 f8             	and    eax,0xfffffff8
c0000da5:	89 c2                	mov    edx,eax
c0000da7:	83 ca 01             	or     edx,0x1
c0000daa:	83 f8 0f             	cmp    eax,0xf
c0000dad:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000db0:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000db8:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000dc0:	76 25                	jbe    c0000de7 <sYSMALLOc+0x206>
c0000dc2:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dc8:	83 ec 0c             	sub    esp,0xc
c0000dcb:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000dd5:	83 c7 08             	add    edi,0x8
c0000dd8:	57                   	push   edi
c0000dd9:	e8 0e fd ff ff       	call   c0000aec <dlfree>
c0000dde:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000ded:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df3:	73 06                	jae    c0000dfb <sYSMALLOc+0x21a>
c0000df5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000dfb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e01:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e07:	73 06                	jae    c0000e0f <sYSMALLOc+0x22e>
c0000e09:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e0f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e12:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e15:	83 e2 fc             	and    edx,0xfffffffc
c0000e18:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e1c:	0f 82 3c fe ff ff    	jb     c0000c5e <sYSMALLOc+0x7d>
c0000e22:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e26:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e29:	29 fa                	sub    edx,edi
c0000e2b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2e:	83 ca 01             	or     edx,0x1
c0000e31:	89 fb                	mov    ebx,edi
c0000e33:	83 c0 08             	add    eax,0x8
c0000e36:	83 cb 01             	or     ebx,0x1
c0000e39:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e3c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e3f:	83 c4 2c             	add    esp,0x2c
c0000e42:	5b                   	pop    ebx
c0000e43:	5e                   	pop    esi
c0000e44:	5f                   	pop    edi
c0000e45:	5d                   	pop    ebp
c0000e46:	c3                   	ret    

c0000e47 <dlmalloc>:
c0000e47:	55                   	push   ebp
c0000e48:	57                   	push   edi
c0000e49:	56                   	push   esi
c0000e4a:	53                   	push   ebx
c0000e4b:	83 ec 1c             	sub    esp,0x1c
c0000e4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e52:	83 f8 df             	cmp    eax,0xffffffdf
c0000e55:	0f 87 70 03 00 00    	ja     c00011cb <dlmalloc+0x384>
c0000e5b:	83 c0 0b             	add    eax,0xb
c0000e5e:	be 10 00 00 00       	mov    esi,0x10
c0000e63:	83 f8 0f             	cmp    eax,0xf
c0000e66:	76 05                	jbe    c0000e6d <dlmalloc+0x26>
c0000e68:	83 e0 f8             	and    eax,0xfffffff8
c0000e6b:	89 c6                	mov    esi,eax
c0000e6d:	8b 3d 60 ff 01 c0    	mov    edi,DWORD PTR ds:0xc001ff60
c0000e73:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e79:	75 17                	jne    c0000e92 <dlmalloc+0x4b>
c0000e7b:	85 ff                	test   edi,edi
c0000e7d:	0f 85 05 03 00 00    	jne    c0001188 <dlmalloc+0x341>
c0000e83:	b8 60 ff 01 c0       	mov    eax,0xc001ff60
c0000e88:	e8 78 fb ff ff       	call   c0000a05 <malloc_consolidate>
c0000e8d:	e9 f6 02 00 00       	jmp    c0001188 <dlmalloc+0x341>
c0000e92:	39 f7                	cmp    edi,esi
c0000e94:	72 1f                	jb     c0000eb5 <dlmalloc+0x6e>
c0000e96:	89 f2                	mov    edx,esi
c0000e98:	c1 ea 03             	shr    edx,0x3
c0000e9b:	83 ea 02             	sub    edx,0x2
c0000e9e:	8b 04 95 64 ff 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe009c]
c0000ea5:	85 c0                	test   eax,eax
c0000ea7:	74 0c                	je     c0000eb5 <dlmalloc+0x6e>
c0000ea9:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000eac:	89 0c 95 64 ff 01 c0 	mov    DWORD PTR [edx*4-0x3ffe009c],ecx
c0000eb3:	eb 30                	jmp    c0000ee5 <dlmalloc+0x9e>
c0000eb5:	89 f0                	mov    eax,esi
c0000eb7:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000ebd:	77 2e                	ja     c0000eed <dlmalloc+0xa6>
c0000ebf:	c1 e8 03             	shr    eax,0x3
c0000ec2:	8d 14 c5 94 ff 01 c0 	lea    edx,[eax*8-0x3ffe006c]
c0000ec9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ecd:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000ed0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000ed3:	39 c3                	cmp    ebx,eax
c0000ed5:	74 2e                	je     c0000f05 <dlmalloc+0xbe>
c0000ed7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000eda:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000edf:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ee2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000ee5:	83 c0 08             	add    eax,0x8
c0000ee8:	e9 e0 02 00 00       	jmp    c00011cd <dlmalloc+0x386>
c0000eed:	e8 8f fa ff ff       	call   c0000981 <largebin_index>
c0000ef2:	83 e7 02             	and    edi,0x2
c0000ef5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef9:	74 0a                	je     c0000f05 <dlmalloc+0xbe>
c0000efb:	b8 60 ff 01 c0       	mov    eax,0xc001ff60
c0000f00:	e8 00 fb ff ff       	call   c0000a05 <malloc_consolidate>
c0000f05:	8d 46 10             	lea    eax,[esi+0x10]
c0000f08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f0c:	8b 1d a0 ff 01 c0    	mov    ebx,DWORD PTR ds:0xc001ffa0
c0000f12:	81 fb 94 ff 01 c0    	cmp    ebx,0xc001ff94
c0000f18:	0f 84 13 01 00 00    	je     c0001031 <dlmalloc+0x1ea>
c0000f1e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f21:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f24:	83 e7 fc             	and    edi,0xfffffffc
c0000f27:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2d:	77 4c                	ja     c0000f7b <dlmalloc+0x134>
c0000f2f:	3d 94 ff 01 c0       	cmp    eax,0xc001ff94
c0000f34:	75 45                	jne    c0000f7b <dlmalloc+0x134>
c0000f36:	39 1d 90 ff 01 c0    	cmp    DWORD PTR ds:0xc001ff90,ebx
c0000f3c:	75 3d                	jne    c0000f7b <dlmalloc+0x134>
c0000f3e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f42:	73 37                	jae    c0000f7b <dlmalloc+0x134>
c0000f44:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f47:	89 fa                	mov    edx,edi
c0000f49:	a3 9c ff 01 c0       	mov    ds:0xc001ff9c,eax
c0000f4e:	a3 a0 ff 01 c0       	mov    ds:0xc001ffa0,eax
c0000f53:	a3 90 ff 01 c0       	mov    ds:0xc001ff90,eax
c0000f58:	29 f2                	sub    edx,esi
c0000f5a:	c7 40 08 94 ff 01 c0 	mov    DWORD PTR [eax+0x8],0xc001ff94
c0000f61:	c7 40 0c 94 ff 01 c0 	mov    DWORD PTR [eax+0xc],0xc001ff94
c0000f68:	83 ce 01             	or     esi,0x1
c0000f6b:	89 d1                	mov    ecx,edx
c0000f6d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f70:	83 c9 01             	or     ecx,0x1
c0000f73:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f76:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f79:	eb 15                	jmp    c0000f90 <dlmalloc+0x149>
c0000f7b:	a3 a0 ff 01 c0       	mov    ds:0xc001ffa0,eax
c0000f80:	39 fe                	cmp    esi,edi
c0000f82:	c7 40 08 94 ff 01 c0 	mov    DWORD PTR [eax+0x8],0xc001ff94
c0000f89:	75 0d                	jne    c0000f98 <dlmalloc+0x151>
c0000f8b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f90:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f93:	e9 35 02 00 00       	jmp    c00011cd <dlmalloc+0x386>
c0000f98:	89 f8                	mov    eax,edi
c0000f9a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000fa0:	77 19                	ja     c0000fbb <dlmalloc+0x174>
c0000fa2:	c1 e8 03             	shr    eax,0x3
c0000fa5:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fa8:	83 c2 0d             	add    edx,0xd
c0000fab:	8d 2c 95 58 ff 01 c0 	lea    ebp,[edx*4-0x3ffe00a8]
c0000fb2:	8b 14 95 60 ff 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe00a0]
c0000fb9:	eb 46                	jmp    c0001001 <dlmalloc+0x1ba>
c0000fbb:	e8 c1 f9 ff ff       	call   c0000981 <largebin_index>
c0000fc0:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fc3:	83 c2 0d             	add    edx,0xd
c0000fc6:	8d 0c 95 60 ff 01 c0 	lea    ecx,[edx*4-0x3ffe00a0]
c0000fcd:	8b 14 95 60 ff 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe00a0]
c0000fd4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fd7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fdb:	89 d5                	mov    ebp,edx
c0000fdd:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000fe1:	74 1e                	je     c0001001 <dlmalloc+0x1ba>
c0000fe3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000fe6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000fe9:	77 12                	ja     c0000ffd <dlmalloc+0x1b6>
c0000feb:	83 cf 01             	or     edi,0x1
c0000fee:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000ff1:	76 05                	jbe    c0000ff8 <dlmalloc+0x1b1>
c0000ff3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000ff6:	eb f6                	jmp    c0000fee <dlmalloc+0x1a7>
c0000ff8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000ffb:	eb 04                	jmp    c0001001 <dlmalloc+0x1ba>
c0000ffd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001001:	89 c7                	mov    edi,eax
c0001003:	88 c1                	mov    cl,al
c0001005:	c1 ff 05             	sar    edi,0x5
c0001008:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000100c:	bf 01 00 00 00       	mov    edi,0x1
c0001011:	d3 e7                	shl    edi,cl
c0001013:	89 f8                	mov    eax,edi
c0001015:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001019:	09 04 bd 94 02 02 c0 	or     DWORD PTR [edi*4-0x3ffdfd6c],eax
c0001020:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001023:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001026:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001029:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000102c:	e9 db fe ff ff       	jmp    c0000f0c <dlmalloc+0xc5>
c0001031:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001037:	76 78                	jbe    c00010b1 <dlmalloc+0x26a>
c0001039:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000103d:	8d 04 c5 94 ff 01 c0 	lea    eax,[eax*8-0x3ffe006c]
c0001044:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001047:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000104a:	39 ca                	cmp    edx,ecx
c000104c:	74 63                	je     c00010b1 <dlmalloc+0x26a>
c000104e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001051:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001054:	83 e3 fc             	and    ebx,0xfffffffc
c0001057:	39 de                	cmp    esi,ebx
c0001059:	77 52                	ja     c00010ad <dlmalloc+0x266>
c000105b:	89 df                	mov    edi,ebx
c000105d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001060:	29 f7                	sub    edi,esi
c0001062:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001065:	01 d3                	add    ebx,edx
c0001067:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000106a:	83 ff 0f             	cmp    edi,0xf
c000106d:	8d 42 08             	lea    eax,[edx+0x8]
c0001070:	77 09                	ja     c000107b <dlmalloc+0x234>
c0001072:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001076:	e9 52 01 00 00       	jmp    c00011cd <dlmalloc+0x386>
c000107b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000107e:	83 ce 01             	or     esi,0x1
c0001081:	89 0d 9c ff 01 c0    	mov    DWORD PTR ds:0xc001ff9c,ecx
c0001087:	89 0d a0 ff 01 c0    	mov    DWORD PTR ds:0xc001ffa0,ecx
c000108d:	c7 41 08 94 ff 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001ff94
c0001094:	c7 41 0c 94 ff 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001ff94
c000109b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000109e:	89 fa                	mov    edx,edi
c00010a0:	83 ca 01             	or     edx,0x1
c00010a3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a6:	89 3b                	mov    DWORD PTR [ebx],edi
c00010a8:	e9 20 01 00 00       	jmp    c00011cd <dlmalloc+0x386>
c00010ad:	89 c2                	mov    edx,eax
c00010af:	eb 99                	jmp    c000104a <dlmalloc+0x203>
c00010b1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010b5:	b8 01 00 00 00       	mov    eax,0x1
c00010ba:	41                   	inc    ecx
c00010bb:	89 cb                	mov    ebx,ecx
c00010bd:	8d 14 cd 8c ff 01 c0 	lea    edx,[ecx*8-0x3ffe0074]
c00010c4:	c1 eb 05             	shr    ebx,0x5
c00010c7:	d3 e0                	shl    eax,cl
c00010c9:	8b 3c 9d 94 02 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdfd6c]
c00010d0:	39 f8                	cmp    eax,edi
c00010d2:	77 04                	ja     c00010d8 <dlmalloc+0x291>
c00010d4:	85 c0                	test   eax,eax
c00010d6:	75 26                	jne    c00010fe <dlmalloc+0x2b7>
c00010d8:	43                   	inc    ebx
c00010d9:	83 fb 02             	cmp    ebx,0x2
c00010dc:	0f 87 a6 00 00 00    	ja     c0001188 <dlmalloc+0x341>
c00010e2:	8b 3c 9d 94 02 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdfd6c]
c00010e9:	85 ff                	test   edi,edi
c00010eb:	74 eb                	je     c00010d8 <dlmalloc+0x291>
c00010ed:	89 d8                	mov    eax,ebx
c00010ef:	c1 e0 06             	shl    eax,0x6
c00010f2:	8d 14 85 8c ff 01 c0 	lea    edx,[eax*4-0x3ffe0074]
c00010f9:	b8 01 00 00 00       	mov    eax,0x1
c00010fe:	85 f8                	test   eax,edi
c0001100:	75 07                	jne    c0001109 <dlmalloc+0x2c2>
c0001102:	83 c2 08             	add    edx,0x8
c0001105:	01 c0                	add    eax,eax
c0001107:	eb f5                	jmp    c00010fe <dlmalloc+0x2b7>
c0001109:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000110c:	39 ca                	cmp    edx,ecx
c000110e:	75 14                	jne    c0001124 <dlmalloc+0x2dd>
c0001110:	89 c1                	mov    ecx,eax
c0001112:	83 c2 08             	add    edx,0x8
c0001115:	f7 d1                	not    ecx
c0001117:	01 c0                	add    eax,eax
c0001119:	21 cf                	and    edi,ecx
c000111b:	89 3c 9d 94 02 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdfd6c],edi
c0001122:	eb ac                	jmp    c00010d0 <dlmalloc+0x289>
c0001124:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001127:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000112a:	83 e0 fc             	and    eax,0xfffffffc
c000112d:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001130:	89 c3                	mov    ebx,eax
c0001132:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001135:	29 f3                	sub    ebx,esi
c0001137:	8d 14 01             	lea    edx,[ecx+eax*1]
c000113a:	83 fb 0f             	cmp    ebx,0xf
c000113d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001140:	77 09                	ja     c000114b <dlmalloc+0x304>
c0001142:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001146:	e9 82 00 00 00       	jmp    c00011cd <dlmalloc+0x386>
c000114b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000114e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001154:	89 3d 9c ff 01 c0    	mov    DWORD PTR ds:0xc001ff9c,edi
c000115a:	89 3d a0 ff 01 c0    	mov    DWORD PTR ds:0xc001ffa0,edi
c0001160:	c7 47 08 94 ff 01 c0 	mov    DWORD PTR [edi+0x8],0xc001ff94
c0001167:	c7 47 0c 94 ff 01 c0 	mov    DWORD PTR [edi+0xc],0xc001ff94
c000116e:	77 06                	ja     c0001176 <dlmalloc+0x32f>
c0001170:	89 3d 90 ff 01 c0    	mov    DWORD PTR ds:0xc001ff90,edi
c0001176:	83 ce 01             	or     esi,0x1
c0001179:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000117c:	89 d9                	mov    ecx,ebx
c000117e:	83 c9 01             	or     ecx,0x1
c0001181:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001184:	89 1a                	mov    DWORD PTR [edx],ebx
c0001186:	eb 45                	jmp    c00011cd <dlmalloc+0x386>
c0001188:	a1 8c ff 01 c0       	mov    eax,ds:0xc001ff8c
c000118d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001190:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001193:	83 e2 fc             	and    edx,0xfffffffc
c0001196:	39 d1                	cmp    ecx,edx
c0001198:	77 1e                	ja     c00011b8 <dlmalloc+0x371>
c000119a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000119d:	89 f3                	mov    ebx,esi
c000119f:	89 0d 8c ff 01 c0    	mov    DWORD PTR ds:0xc001ff8c,ecx
c00011a5:	83 cb 01             	or     ebx,0x1
c00011a8:	29 f2                	sub    edx,esi
c00011aa:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011ad:	83 ca 01             	or     edx,0x1
c00011b0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011b3:	e9 2d fd ff ff       	jmp    c0000ee5 <dlmalloc+0x9e>
c00011b8:	83 c4 1c             	add    esp,0x1c
c00011bb:	89 f0                	mov    eax,esi
c00011bd:	5b                   	pop    ebx
c00011be:	ba 60 ff 01 c0       	mov    edx,0xc001ff60
c00011c3:	5e                   	pop    esi
c00011c4:	5f                   	pop    edi
c00011c5:	5d                   	pop    ebp
c00011c6:	e9 16 fa ff ff       	jmp    c0000be1 <sYSMALLOc>
c00011cb:	31 c0                	xor    eax,eax
c00011cd:	83 c4 1c             	add    esp,0x1c
c00011d0:	5b                   	pop    ebx
c00011d1:	5e                   	pop    esi
c00011d2:	5f                   	pop    edi
c00011d3:	5d                   	pop    ebp
c00011d4:	c3                   	ret    

c00011d5 <iALLOc>:
c00011d5:	55                   	push   ebp
c00011d6:	89 c5                	mov    ebp,eax
c00011d8:	57                   	push   edi
c00011d9:	56                   	push   esi
c00011da:	53                   	push   ebx
c00011db:	83 ec 2c             	sub    esp,0x2c
c00011de:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011e2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011ea:	83 3d 60 ff 01 c0 00 	cmp    DWORD PTR ds:0xc001ff60,0x0
c00011f1:	75 12                	jne    c0001205 <iALLOc+0x30>
c00011f3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00011f7:	b8 60 ff 01 c0       	mov    eax,0xc001ff60
c00011fc:	e8 04 f8 ff ff       	call   c0000a05 <malloc_consolidate>
c0001201:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001205:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000120a:	74 12                	je     c000121e <iALLOc+0x49>
c000120c:	85 ed                	test   ebp,ebp
c000120e:	0f 84 64 01 00 00    	je     c0001378 <iALLOc+0x1a3>
c0001214:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000121c:	eb 33                	jmp    c0001251 <iALLOc+0x7c>
c000121e:	85 ed                	test   ebp,ebp
c0001220:	75 14                	jne    c0001236 <iALLOc+0x61>
c0001222:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000122a:	83 c4 2c             	add    esp,0x2c
c000122d:	5b                   	pop    ebx
c000122e:	5e                   	pop    esi
c000122f:	5f                   	pop    edi
c0001230:	5d                   	pop    ebp
c0001231:	e9 11 fc ff ff       	jmp    c0000e47 <dlmalloc>
c0001236:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000123d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001245:	83 f8 0f             	cmp    eax,0xf
c0001248:	76 07                	jbe    c0001251 <iALLOc+0x7c>
c000124a:	83 e0 f8             	and    eax,0xfffffff8
c000124d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001251:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001256:	75 09                	jne    c0001261 <iALLOc+0x8c>
c0001258:	89 d0                	mov    eax,edx
c000125a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000125d:	31 f6                	xor    esi,esi
c000125f:	eb 3b                	jmp    c000129c <iALLOc+0xc7>
c0001261:	8b 02                	mov    eax,DWORD PTR [edx]
c0001263:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000126b:	83 c0 0b             	add    eax,0xb
c000126e:	83 f8 0f             	cmp    eax,0xf
c0001271:	76 07                	jbe    c000127a <iALLOc+0xa5>
c0001273:	83 e0 f8             	and    eax,0xfffffff8
c0001276:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000127a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000127e:	0f af f5             	imul   esi,ebp
c0001281:	eb 25                	jmp    c00012a8 <iALLOc+0xd3>
c0001283:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001285:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001288:	bb 10 00 00 00       	mov    ebx,0x10
c000128d:	83 f9 0f             	cmp    ecx,0xf
c0001290:	76 05                	jbe    c0001297 <iALLOc+0xc2>
c0001292:	83 e1 f8             	and    ecx,0xfffffff8
c0001295:	89 cb                	mov    ebx,ecx
c0001297:	01 de                	add    esi,ebx
c0001299:	83 c0 04             	add    eax,0x4
c000129c:	39 c7                	cmp    edi,eax
c000129e:	75 e3                	jne    c0001283 <iALLOc+0xae>
c00012a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012ac:	8b 1d b4 02 02 c0    	mov    ebx,DWORD PTR ds:0xc00202b4
c00012b2:	83 ec 0c             	sub    esp,0xc
c00012b5:	c7 05 b4 02 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00202b4,0x0
c00012bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012c3:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012c7:	50                   	push   eax
c00012c8:	e8 7a fb ff ff       	call   c0000e47 <dlmalloc>
c00012cd:	83 c4 10             	add    esp,0x10
c00012d0:	89 1d b4 02 02 c0    	mov    DWORD PTR ds:0xc00202b4,ebx
c00012d6:	85 c0                	test   eax,eax
c00012d8:	0f 84 92 00 00 00    	je     c0001370 <iALLOc+0x19b>
c00012de:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012e1:	8d 78 f8             	lea    edi,[eax-0x8]
c00012e4:	83 e3 fc             	and    ebx,0xfffffffc
c00012e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012eb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012f0:	74 1e                	je     c0001310 <iALLOc+0x13b>
c00012f2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00012f6:	89 d9                	mov    ecx,ebx
c00012f8:	52                   	push   edx
c00012f9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00012fd:	83 e9 04             	sub    ecx,0x4
c0001300:	51                   	push   ecx
c0001301:	6a 00                	push   0x0
c0001303:	50                   	push   eax
c0001304:	e8 9f f1 ff ff       	call   c00004a8 <memset>
c0001309:	83 c4 10             	add    esp,0x10
c000130c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001310:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001315:	75 14                	jne    c000132b <iALLOc+0x156>
c0001317:	8d 04 37             	lea    eax,[edi+esi*1]
c000131a:	29 f3                	sub    ebx,esi
c000131c:	8d 48 08             	lea    ecx,[eax+0x8]
c000131f:	83 cb 01             	or     ebx,0x1
c0001322:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001326:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001329:	89 f3                	mov    ebx,esi
c000132b:	31 c0                	xor    eax,eax
c000132d:	4d                   	dec    ebp
c000132e:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001331:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001335:	39 c5                	cmp    ebp,eax
c0001337:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000133a:	74 2c                	je     c0001368 <iALLOc+0x193>
c000133c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001340:	85 c9                	test   ecx,ecx
c0001342:	75 15                	jne    c0001359 <iALLOc+0x184>
c0001344:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001347:	8d 71 0b             	lea    esi,[ecx+0xb]
c000134a:	b9 10 00 00 00       	mov    ecx,0x10
c000134f:	83 fe 0f             	cmp    esi,0xf
c0001352:	76 05                	jbe    c0001359 <iALLOc+0x184>
c0001354:	83 e6 f8             	and    esi,0xfffffff8
c0001357:	89 f1                	mov    ecx,esi
c0001359:	89 ce                	mov    esi,ecx
c000135b:	29 cb                	sub    ebx,ecx
c000135d:	83 ce 01             	or     esi,0x1
c0001360:	40                   	inc    eax
c0001361:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001364:	01 cf                	add    edi,ecx
c0001366:	eb c6                	jmp    c000132e <iALLOc+0x159>
c0001368:	83 cb 01             	or     ebx,0x1
c000136b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000136e:	eb 08                	jmp    c0001378 <iALLOc+0x1a3>
c0001370:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001378:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000137c:	83 c4 2c             	add    esp,0x2c
c000137f:	5b                   	pop    ebx
c0001380:	5e                   	pop    esi
c0001381:	5f                   	pop    edi
c0001382:	5d                   	pop    ebp
c0001383:	c3                   	ret    

c0001384 <dlrealloc>:
c0001384:	55                   	push   ebp
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 1c             	sub    esp,0x1c
c000138b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000138f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001393:	85 db                	test   ebx,ebx
c0001395:	75 10                	jne    c00013a7 <dlrealloc+0x23>
c0001397:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000139b:	83 c4 1c             	add    esp,0x1c
c000139e:	5b                   	pop    ebx
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 a0 fa ff ff       	jmp    c0000e47 <dlmalloc>
c00013a7:	83 f8 df             	cmp    eax,0xffffffdf
c00013aa:	76 07                	jbe    c00013b3 <dlrealloc+0x2f>
c00013ac:	31 db                	xor    ebx,ebx
c00013ae:	e9 6a 01 00 00       	jmp    c000151d <dlrealloc+0x199>
c00013b3:	83 c0 0b             	add    eax,0xb
c00013b6:	bd 10 00 00 00       	mov    ebp,0x10
c00013bb:	83 f8 0f             	cmp    eax,0xf
c00013be:	76 05                	jbe    c00013c5 <dlrealloc+0x41>
c00013c0:	83 e0 f8             	and    eax,0xfffffff8
c00013c3:	89 c5                	mov    ebp,eax
c00013c5:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013c8:	8d 7b f8             	lea    edi,[ebx-0x8]
c00013cb:	89 c6                	mov    esi,eax
c00013cd:	83 e6 fc             	and    esi,0xfffffffc
c00013d0:	a8 02                	test   al,0x2
c00013d2:	75 d8                	jne    c00013ac <dlrealloc+0x28>
c00013d4:	39 f5                	cmp    ebp,esi
c00013d6:	0f 86 04 01 00 00    	jbe    c00014e0 <dlrealloc+0x15c>
c00013dc:	8d 14 37             	lea    edx,[edi+esi*1]
c00013df:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013e2:	39 15 8c ff 01 c0    	cmp    DWORD PTR ds:0xc001ff8c,edx
c00013e8:	75 33                	jne    c000141d <dlrealloc+0x99>
c00013ea:	83 e1 fc             	and    ecx,0xfffffffc
c00013ed:	01 f1                	add    ecx,esi
c00013ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f3:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00013f6:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013fa:	77 49                	ja     c0001445 <dlrealloc+0xc1>
c00013fc:	01 ef                	add    edi,ebp
c00013fe:	83 e0 01             	and    eax,0x1
c0001401:	09 e8                	or     eax,ebp
c0001403:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001406:	89 3d 8c ff 01 c0    	mov    DWORD PTR ds:0xc001ff8c,edi
c000140c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001410:	29 e8                	sub    eax,ebp
c0001412:	83 c8 01             	or     eax,0x1
c0001415:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001418:	e9 00 01 00 00       	jmp    c000151d <dlrealloc+0x199>
c000141d:	89 c8                	mov    eax,ecx
c000141f:	83 e0 fe             	and    eax,0xfffffffe
c0001422:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001427:	75 1c                	jne    c0001445 <dlrealloc+0xc1>
c0001429:	83 e1 fc             	and    ecx,0xfffffffc
c000142c:	01 f1                	add    ecx,esi
c000142e:	39 cd                	cmp    ebp,ecx
c0001430:	77 13                	ja     c0001445 <dlrealloc+0xc1>
c0001432:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001435:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001438:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000143b:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000143e:	89 ce                	mov    esi,ecx
c0001440:	e9 9b 00 00 00       	jmp    c00014e0 <dlrealloc+0x15c>
c0001445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001449:	8d 45 f9             	lea    eax,[ebp-0x7]
c000144c:	83 ec 0c             	sub    esp,0xc
c000144f:	50                   	push   eax
c0001450:	e8 f2 f9 ff ff       	call   c0000e47 <dlmalloc>
c0001455:	83 c4 10             	add    esp,0x10
c0001458:	85 c0                	test   eax,eax
c000145a:	0f 84 4c ff ff ff    	je     c00013ac <dlrealloc+0x28>
c0001460:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001463:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001467:	39 ca                	cmp    edx,ecx
c0001469:	75 0a                	jne    c0001475 <dlrealloc+0xf1>
c000146b:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000146e:	83 e0 fc             	and    eax,0xfffffffc
c0001471:	01 c6                	add    esi,eax
c0001473:	eb 6b                	jmp    c00014e0 <dlrealloc+0x15c>
c0001475:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001478:	83 f9 27             	cmp    ecx,0x27
c000147b:	76 08                	jbe    c0001485 <dlrealloc+0x101>
c000147d:	89 de                	mov    esi,ebx
c000147f:	89 c7                	mov    edi,eax
c0001481:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001483:	eb 43                	jmp    c00014c8 <dlrealloc+0x144>
c0001485:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001487:	83 f9 13             	cmp    ecx,0x13
c000148a:	89 10                	mov    DWORD PTR [eax],edx
c000148c:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000148f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001492:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001495:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001498:	76 2e                	jbe    c00014c8 <dlrealloc+0x144>
c000149a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000149d:	83 f9 1b             	cmp    ecx,0x1b
c00014a0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00014a3:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00014a6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00014a9:	76 1d                	jbe    c00014c8 <dlrealloc+0x144>
c00014ab:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00014ae:	83 f9 23             	cmp    ecx,0x23
c00014b1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00014b4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00014b7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00014ba:	76 0c                	jbe    c00014c8 <dlrealloc+0x144>
c00014bc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00014bf:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00014c2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00014c5:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00014c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014cc:	83 ec 0c             	sub    esp,0xc
c00014cf:	53                   	push   ebx
c00014d0:	e8 17 f6 ff ff       	call   c0000aec <dlfree>
c00014d5:	83 c4 10             	add    esp,0x10
c00014d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014dc:	89 c3                	mov    ebx,eax
c00014de:	eb 3d                	jmp    c000151d <dlrealloc+0x199>
c00014e0:	89 f2                	mov    edx,esi
c00014e2:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014e5:	29 ea                	sub    edx,ebp
c00014e7:	83 e1 01             	and    ecx,0x1
c00014ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00014ed:	83 fa 0f             	cmp    edx,0xf
c00014f0:	77 0b                	ja     c00014fd <dlrealloc+0x179>
c00014f2:	09 ce                	or     esi,ecx
c00014f4:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00014f7:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00014fb:	eb 20                	jmp    c000151d <dlrealloc+0x199>
c00014fd:	01 ef                	add    edi,ebp
c00014ff:	83 ec 0c             	sub    esp,0xc
c0001502:	09 cd                	or     ebp,ecx
c0001504:	83 ca 01             	or     edx,0x1
c0001507:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000150a:	83 c7 08             	add    edi,0x8
c000150d:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001510:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001514:	57                   	push   edi
c0001515:	e8 d2 f5 ff ff       	call   c0000aec <dlfree>
c000151a:	83 c4 10             	add    esp,0x10
c000151d:	83 c4 1c             	add    esp,0x1c
c0001520:	89 d8                	mov    eax,ebx
c0001522:	5b                   	pop    ebx
c0001523:	5e                   	pop    esi
c0001524:	5f                   	pop    edi
c0001525:	5d                   	pop    ebp
c0001526:	c3                   	ret    

c0001527 <dlmemalign>:
c0001527:	55                   	push   ebp
c0001528:	57                   	push   edi
c0001529:	56                   	push   esi
c000152a:	53                   	push   ebx
c000152b:	83 ec 0c             	sub    esp,0xc
c000152e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001532:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001536:	83 fa 08             	cmp    edx,0x8
c0001539:	77 10                	ja     c000154b <dlmemalign+0x24>
c000153b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000153f:	83 c4 0c             	add    esp,0xc
c0001542:	5b                   	pop    ebx
c0001543:	5e                   	pop    esi
c0001544:	5f                   	pop    edi
c0001545:	5d                   	pop    ebp
c0001546:	e9 fc f8 ff ff       	jmp    c0000e47 <dlmalloc>
c000154b:	bf 10 00 00 00       	mov    edi,0x10
c0001550:	83 fa 0f             	cmp    edx,0xf
c0001553:	76 13                	jbe    c0001568 <dlmemalign+0x41>
c0001555:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001558:	85 d1                	test   ecx,edx
c000155a:	75 04                	jne    c0001560 <dlmemalign+0x39>
c000155c:	89 d7                	mov    edi,edx
c000155e:	eb 08                	jmp    c0001568 <dlmemalign+0x41>
c0001560:	39 d7                	cmp    edi,edx
c0001562:	73 04                	jae    c0001568 <dlmemalign+0x41>
c0001564:	01 ff                	add    edi,edi
c0001566:	eb f8                	jmp    c0001560 <dlmemalign+0x39>
c0001568:	83 f8 df             	cmp    eax,0xffffffdf
c000156b:	76 07                	jbe    c0001574 <dlmemalign+0x4d>
c000156d:	31 c0                	xor    eax,eax
c000156f:	e9 ce 00 00 00       	jmp    c0001642 <dlmemalign+0x11b>
c0001574:	83 c0 0b             	add    eax,0xb
c0001577:	bd 10 00 00 00       	mov    ebp,0x10
c000157c:	83 f8 0f             	cmp    eax,0xf
c000157f:	76 05                	jbe    c0001586 <dlmemalign+0x5f>
c0001581:	83 e0 f8             	and    eax,0xfffffff8
c0001584:	89 c5                	mov    ebp,eax
c0001586:	83 ec 0c             	sub    esp,0xc
c0001589:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000158d:	50                   	push   eax
c000158e:	e8 b4 f8 ff ff       	call   c0000e47 <dlmalloc>
c0001593:	83 c4 10             	add    esp,0x10
c0001596:	89 c1                	mov    ecx,eax
c0001598:	85 c0                	test   eax,eax
c000159a:	74 d1                	je     c000156d <dlmemalign+0x46>
c000159c:	31 d2                	xor    edx,edx
c000159e:	8d 70 f8             	lea    esi,[eax-0x8]
c00015a1:	f7 f7                	div    edi
c00015a3:	85 d2                	test   edx,edx
c00015a5:	74 62                	je     c0001609 <dlmemalign+0xe2>
c00015a7:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015ab:	89 f8                	mov    eax,edi
c00015ad:	f7 d8                	neg    eax
c00015af:	21 c3                	and    ebx,eax
c00015b1:	83 eb 08             	sub    ebx,0x8
c00015b4:	89 d8                	mov    eax,ebx
c00015b6:	29 f0                	sub    eax,esi
c00015b8:	83 f8 0f             	cmp    eax,0xf
c00015bb:	77 02                	ja     c00015bf <dlmemalign+0x98>
c00015bd:	01 fb                	add    ebx,edi
c00015bf:	89 d8                	mov    eax,ebx
c00015c1:	29 f0                	sub    eax,esi
c00015c3:	89 c6                	mov    esi,eax
c00015c5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015c8:	89 c2                	mov    edx,eax
c00015ca:	83 e2 fc             	and    edx,0xfffffffc
c00015cd:	29 f2                	sub    edx,esi
c00015cf:	a8 02                	test   al,0x2
c00015d1:	74 10                	je     c00015e3 <dlmemalign+0xbc>
c00015d3:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015d6:	83 ca 02             	or     edx,0x2
c00015d9:	8d 43 08             	lea    eax,[ebx+0x8]
c00015dc:	89 33                	mov    DWORD PTR [ebx],esi
c00015de:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015e1:	eb 5f                	jmp    c0001642 <dlmemalign+0x11b>
c00015e3:	83 ec 0c             	sub    esp,0xc
c00015e6:	89 d0                	mov    eax,edx
c00015e8:	83 c8 01             	or     eax,0x1
c00015eb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00015ee:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00015f3:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015f6:	83 e0 01             	and    eax,0x1
c00015f9:	09 f0                	or     eax,esi
c00015fb:	89 de                	mov    esi,ebx
c00015fd:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001600:	51                   	push   ecx
c0001601:	e8 e6 f4 ff ff       	call   c0000aec <dlfree>
c0001606:	83 c4 10             	add    esp,0x10
c0001609:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000160c:	a8 02                	test   al,0x2
c000160e:	75 2f                	jne    c000163f <dlmemalign+0x118>
c0001610:	83 e0 fc             	and    eax,0xfffffffc
c0001613:	8d 55 10             	lea    edx,[ebp+0x10]
c0001616:	39 c2                	cmp    edx,eax
c0001618:	73 25                	jae    c000163f <dlmemalign+0x118>
c000161a:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000161d:	83 ec 0c             	sub    esp,0xc
c0001620:	29 e8                	sub    eax,ebp
c0001622:	83 c2 08             	add    edx,0x8
c0001625:	83 c8 01             	or     eax,0x1
c0001628:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000162b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000162e:	83 e0 01             	and    eax,0x1
c0001631:	09 c5                	or     ebp,eax
c0001633:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001636:	52                   	push   edx
c0001637:	e8 b0 f4 ff ff       	call   c0000aec <dlfree>
c000163c:	83 c4 10             	add    esp,0x10
c000163f:	8d 46 08             	lea    eax,[esi+0x8]
c0001642:	83 c4 0c             	add    esp,0xc
c0001645:	5b                   	pop    ebx
c0001646:	5e                   	pop    esi
c0001647:	5f                   	pop    edi
c0001648:	5d                   	pop    ebp
c0001649:	c3                   	ret    

c000164a <dlcalloc>:
c000164a:	53                   	push   ebx
c000164b:	83 ec 14             	sub    esp,0x14
c000164e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001652:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001657:	50                   	push   eax
c0001658:	e8 ea f7 ff ff       	call   c0000e47 <dlmalloc>
c000165d:	83 c4 10             	add    esp,0x10
c0001660:	89 c3                	mov    ebx,eax
c0001662:	85 c0                	test   eax,eax
c0001664:	74 77                	je     c00016dd <dlcalloc+0x93>
c0001666:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001669:	89 d0                	mov    eax,edx
c000166b:	83 e0 fc             	and    eax,0xfffffffc
c000166e:	80 e2 02             	and    dl,0x2
c0001671:	75 5a                	jne    c00016cd <dlcalloc+0x83>
c0001673:	83 e8 04             	sub    eax,0x4
c0001676:	83 f8 27             	cmp    eax,0x27
c0001679:	76 03                	jbe    c000167e <dlcalloc+0x34>
c000167b:	51                   	push   ecx
c000167c:	eb 53                	jmp    c00016d1 <dlcalloc+0x87>
c000167e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001684:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000168b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001692:	83 f8 13             	cmp    eax,0x13
c0001695:	76 46                	jbe    c00016dd <dlcalloc+0x93>
c0001697:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000169e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016a5:	83 f8 1b             	cmp    eax,0x1b
c00016a8:	76 33                	jbe    c00016dd <dlcalloc+0x93>
c00016aa:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016b1:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016b8:	83 f8 23             	cmp    eax,0x23
c00016bb:	76 20                	jbe    c00016dd <dlcalloc+0x93>
c00016bd:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016c4:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016cb:	eb 10                	jmp    c00016dd <dlcalloc+0x93>
c00016cd:	83 e8 08             	sub    eax,0x8
c00016d0:	52                   	push   edx
c00016d1:	50                   	push   eax
c00016d2:	6a 00                	push   0x0
c00016d4:	53                   	push   ebx
c00016d5:	e8 ce ed ff ff       	call   c00004a8 <memset>
c00016da:	83 c4 10             	add    esp,0x10
c00016dd:	89 d8                	mov    eax,ebx
c00016df:	83 c4 08             	add    esp,0x8
c00016e2:	5b                   	pop    ebx
c00016e3:	c3                   	ret    

c00016e4 <dlcfree>:
c00016e4:	e9 03 f4 ff ff       	jmp    c0000aec <dlfree>

c00016e9 <dlindependent_calloc>:
c00016e9:	83 ec 28             	sub    esp,0x28
c00016ec:	b9 03 00 00 00       	mov    ecx,0x3
c00016f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00016f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00016f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00016fd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001701:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001705:	e8 cb fa ff ff       	call   c00011d5 <iALLOc>
c000170a:	83 c4 2c             	add    esp,0x2c
c000170d:	c3                   	ret    

c000170e <dlindependent_comalloc>:
c000170e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001716:	31 c9                	xor    ecx,ecx
c0001718:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000171c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001720:	e9 b0 fa ff ff       	jmp    c00011d5 <iALLOc>

c0001725 <dlvalloc>:
c0001725:	83 ec 0c             	sub    esp,0xc
c0001728:	83 3d 60 ff 01 c0 00 	cmp    DWORD PTR ds:0xc001ff60,0x0
c000172f:	75 0a                	jne    c000173b <dlvalloc+0x16>
c0001731:	b8 60 ff 01 c0       	mov    eax,0xc001ff60
c0001736:	e8 ca f2 ff ff       	call   c0000a05 <malloc_consolidate>
c000173b:	50                   	push   eax
c000173c:	50                   	push   eax
c000173d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001741:	ff 35 bc 02 02 c0    	push   DWORD PTR ds:0xc00202bc
c0001747:	e8 db fd ff ff       	call   c0001527 <dlmemalign>
c000174c:	83 c4 1c             	add    esp,0x1c
c000174f:	c3                   	ret    

c0001750 <dlpvalloc>:
c0001750:	83 ec 0c             	sub    esp,0xc
c0001753:	83 3d 60 ff 01 c0 00 	cmp    DWORD PTR ds:0xc001ff60,0x0
c000175a:	75 0a                	jne    c0001766 <dlpvalloc+0x16>
c000175c:	b8 60 ff 01 c0       	mov    eax,0xc001ff60
c0001761:	e8 9f f2 ff ff       	call   c0000a05 <malloc_consolidate>
c0001766:	a1 bc 02 02 c0       	mov    eax,ds:0xc00202bc
c000176b:	89 c1                	mov    ecx,eax
c000176d:	52                   	push   edx
c000176e:	f7 d9                	neg    ecx
c0001770:	52                   	push   edx
c0001771:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001775:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001779:	21 ca                	and    edx,ecx
c000177b:	52                   	push   edx
c000177c:	50                   	push   eax
c000177d:	e8 a5 fd ff ff       	call   c0001527 <dlmemalign>
c0001782:	83 c4 1c             	add    esp,0x1c
c0001785:	c3                   	ret    

c0001786 <dlmalloc_trim>:
c0001786:	b8 60 ff 01 c0       	mov    eax,0xc001ff60
c000178b:	e8 75 f2 ff ff       	call   c0000a05 <malloc_consolidate>
c0001790:	31 c0                	xor    eax,eax
c0001792:	c3                   	ret    

c0001793 <dlmalloc_usable_size>:
c0001793:	53                   	push   ebx
c0001794:	31 c0                	xor    eax,eax
c0001796:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000179a:	85 c9                	test   ecx,ecx
c000179c:	74 24                	je     c00017c2 <dlmalloc_usable_size+0x2f>
c000179e:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017a1:	f6 c2 02             	test   dl,0x2
c00017a4:	74 08                	je     c00017ae <dlmalloc_usable_size+0x1b>
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	8d 42 f8             	lea    eax,[edx-0x8]
c00017ac:	eb 14                	jmp    c00017c2 <dlmalloc_usable_size+0x2f>
c00017ae:	89 d3                	mov    ebx,edx
c00017b0:	31 c0                	xor    eax,eax
c00017b2:	83 e3 fe             	and    ebx,0xfffffffe
c00017b5:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017ba:	74 06                	je     c00017c2 <dlmalloc_usable_size+0x2f>
c00017bc:	83 e2 fc             	and    edx,0xfffffffc
c00017bf:	8d 42 fc             	lea    eax,[edx-0x4]
c00017c2:	5b                   	pop    ebx
c00017c3:	c3                   	ret    

c00017c4 <dlmallinfo>:
c00017c4:	55                   	push   ebp
c00017c5:	57                   	push   edi
c00017c6:	56                   	push   esi
c00017c7:	53                   	push   ebx
c00017c8:	83 ec 08             	sub    esp,0x8
c00017cb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017cf:	83 3d 8c ff 01 c0 00 	cmp    DWORD PTR ds:0xc001ff8c,0x0
c00017d6:	75 0a                	jne    c00017e2 <dlmallinfo+0x1e>
c00017d8:	b8 60 ff 01 c0       	mov    eax,0xc001ff60
c00017dd:	e8 23 f2 ff ff       	call   c0000a05 <malloc_consolidate>
c00017e2:	a1 8c ff 01 c0       	mov    eax,ds:0xc001ff8c
c00017e7:	31 ed                	xor    ebp,ebp
c00017e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00017ec:	31 c9                	xor    ecx,ecx
c00017ee:	83 e0 fc             	and    eax,0xfffffffc
c00017f1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00017f5:	31 c0                	xor    eax,eax
c00017f7:	8b 14 85 64 ff 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe009c]
c00017fe:	85 d2                	test   edx,edx
c0001800:	74 0e                	je     c0001810 <dlmallinfo+0x4c>
c0001802:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001805:	45                   	inc    ebp
c0001806:	83 e6 fc             	and    esi,0xfffffffc
c0001809:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000180c:	01 f1                	add    ecx,esi
c000180e:	eb ee                	jmp    c00017fe <dlmallinfo+0x3a>
c0001810:	40                   	inc    eax
c0001811:	83 f8 0a             	cmp    eax,0xa
c0001814:	75 e1                	jne    c00017f7 <dlmallinfo+0x33>
c0001816:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000181a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001821:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001824:	b8 94 ff 01 c0       	mov    eax,0xc001ff94
c0001829:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c000182c:	39 f0                	cmp    eax,esi
c000182e:	74 10                	je     c0001840 <dlmallinfo+0x7c>
c0001830:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001833:	ff 04 24             	inc    DWORD PTR [esp]
c0001836:	83 e7 fc             	and    edi,0xfffffffc
c0001839:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000183c:	01 fa                	add    edx,edi
c000183e:	eb ec                	jmp    c000182c <dlmallinfo+0x68>
c0001840:	83 c0 08             	add    eax,0x8
c0001843:	3d 8c 02 02 c0       	cmp    eax,0xc002028c
c0001848:	75 df                	jne    c0001829 <dlmallinfo+0x65>
c000184a:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000184d:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001850:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001853:	a1 c8 02 02 c0       	mov    eax,ds:0xc00202c8
c0001858:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000185b:	89 03                	mov    DWORD PTR [ebx],eax
c000185d:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001860:	8b 35 b0 02 02 c0    	mov    esi,DWORD PTR ds:0xc00202b0
c0001866:	29 d0                	sub    eax,edx
c0001868:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000186b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000186e:	8b 35 c4 02 02 c0    	mov    esi,DWORD PTR ds:0xc00202c4
c0001874:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001878:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000187b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000187e:	8b 35 d4 02 02 c0    	mov    esi,DWORD PTR ds:0xc00202d4
c0001884:	89 d8                	mov    eax,ebx
c0001886:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001889:	83 c4 08             	add    esp,0x8
c000188c:	5b                   	pop    ebx
c000188d:	5e                   	pop    esi
c000188e:	5f                   	pop    edi
c000188f:	5d                   	pop    ebp
c0001890:	c2 04 00             	ret    0x4

c0001893 <dlmalloc_stats>:
c0001893:	83 ec 30             	sub    esp,0x30
c0001896:	8d 44 24 08          	lea    eax,[esp+0x8]
c000189a:	50                   	push   eax
c000189b:	e8 24 ff ff ff       	call   c00017c4 <dlmallinfo>
c00018a0:	83 c4 30             	add    esp,0x30
c00018a3:	c3                   	ret    

c00018a4 <dlmallopt>:
c00018a4:	56                   	push   esi
c00018a5:	b8 60 ff 01 c0       	mov    eax,0xc001ff60
c00018aa:	53                   	push   ebx
c00018ab:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018b3:	e8 4d f1 ff ff       	call   c0000a05 <malloc_consolidate>
c00018b8:	8d 46 04             	lea    eax,[esi+0x4]
c00018bb:	83 f8 05             	cmp    eax,0x5
c00018be:	77 67                	ja     c0001927 <dlmallopt+0x83>
c00018c0:	ff 24 85 a4 d2 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2d5c]
c00018c7:	83 fb 50             	cmp    ebx,0x50
c00018ca:	77 5b                	ja     c0001927 <dlmallopt+0x83>
c00018cc:	ba 08 00 00 00       	mov    edx,0x8
c00018d1:	85 db                	test   ebx,ebx
c00018d3:	74 12                	je     c00018e7 <dlmallopt+0x43>
c00018d5:	83 c3 0b             	add    ebx,0xb
c00018d8:	ba 10 00 00 00       	mov    edx,0x10
c00018dd:	83 fb 0f             	cmp    ebx,0xf
c00018e0:	76 05                	jbe    c00018e7 <dlmallopt+0x43>
c00018e2:	89 da                	mov    edx,ebx
c00018e4:	83 e2 f8             	and    edx,0xfffffff8
c00018e7:	a1 60 ff 01 c0       	mov    eax,ds:0xc001ff60
c00018ec:	83 e0 03             	and    eax,0x3
c00018ef:	09 d0                	or     eax,edx
c00018f1:	a3 60 ff 01 c0       	mov    ds:0xc001ff60,eax
c00018f6:	eb 31                	jmp    c0001929 <dlmallopt+0x85>
c00018f8:	89 1d a4 02 02 c0    	mov    DWORD PTR ds:0xc00202a4,ebx
c00018fe:	eb 06                	jmp    c0001906 <dlmallopt+0x62>
c0001900:	89 1d a8 02 02 c0    	mov    DWORD PTR ds:0xc00202a8,ebx
c0001906:	be 01 00 00 00       	mov    esi,0x1
c000190b:	eb 1c                	jmp    c0001929 <dlmallopt+0x85>
c000190d:	89 1d ac 02 02 c0    	mov    DWORD PTR ds:0xc00202ac,ebx
c0001913:	eb f1                	jmp    c0001906 <dlmallopt+0x62>
c0001915:	31 f6                	xor    esi,esi
c0001917:	85 db                	test   ebx,ebx
c0001919:	75 0e                	jne    c0001929 <dlmallopt+0x85>
c000191b:	c7 05 b4 02 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00202b4,0x0
c0001925:	eb df                	jmp    c0001906 <dlmallopt+0x62>
c0001927:	31 f6                	xor    esi,esi
c0001929:	89 f0                	mov    eax,esi
c000192b:	5b                   	pop    ebx
c000192c:	5e                   	pop    esi
c000192d:	c3                   	ret    

c000192e <disk_status>:
c000192e:	31 c0                	xor    eax,eax
c0001930:	c3                   	ret    

c0001931 <disk_initialize>:
c0001931:	31 c0                	xor    eax,eax
c0001933:	c3                   	ret    

c0001934 <disk_read>:
c0001934:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001939:	0f b6 04 85 00 3a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc600]
c0001941:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001945:	e9 86 54 01 00       	jmp    c0016dd0 <fatWrapperReadDisk>

c000194a <disk_write>:
c000194a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000194f:	0f b6 04 85 00 3a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc600]
c0001957:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000195b:	e9 b0 54 01 00       	jmp    c0016e10 <fatWrapperWriteDisk>

c0001960 <disk_ioctl>:
c0001960:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001965:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001969:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000196e:	0f b6 04 85 00 3a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc600]
c0001976:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000197a:	e9 d1 54 01 00       	jmp    c0016e50 <fatWrapperIoctl>

c000197f <ld_word>:
c000197f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001983:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001986:	c1 e2 08             	shl    edx,0x8
c0001989:	09 d0                	or     eax,edx
c000198b:	c3                   	ret    

c000198c <ld_dword>:
c000198c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001990:	89 d1                	mov    ecx,edx
c0001992:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001996:	c1 e1 08             	shl    ecx,0x8
c0001999:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000199c:	09 ca                	or     edx,ecx
c000199e:	c1 e2 08             	shl    edx,0x8
c00019a1:	09 d0                	or     eax,edx
c00019a3:	c3                   	ret    

c00019a4 <st_word>:
c00019a4:	66 89 10             	mov    WORD PTR [eax],dx
c00019a7:	c3                   	ret    

c00019a8 <st_dword>:
c00019a8:	89 10                	mov    DWORD PTR [eax],edx
c00019aa:	c3                   	ret    

c00019ab <mem_cpy>:
c00019ab:	85 c9                	test   ecx,ecx
c00019ad:	74 10                	je     c00019bf <mem_cpy+0x14>
c00019af:	57                   	push   edi
c00019b0:	01 c1                	add    ecx,eax
c00019b2:	56                   	push   esi
c00019b3:	89 c7                	mov    edi,eax
c00019b5:	89 d6                	mov    esi,edx
c00019b7:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00019b8:	39 f9                	cmp    ecx,edi
c00019ba:	75 fb                	jne    c00019b7 <mem_cpy+0xc>
c00019bc:	5e                   	pop    esi
c00019bd:	5f                   	pop    edi
c00019be:	c3                   	ret    
c00019bf:	c3                   	ret    

c00019c0 <mem_set>:
c00019c0:	01 c1                	add    ecx,eax
c00019c2:	40                   	inc    eax
c00019c3:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c00019c6:	39 c8                	cmp    eax,ecx
c00019c8:	75 f8                	jne    c00019c2 <mem_set+0x2>
c00019ca:	c3                   	ret    

c00019cb <mem_cmp>:
c00019cb:	57                   	push   edi
c00019cc:	56                   	push   esi
c00019cd:	89 c6                	mov    esi,eax
c00019cf:	53                   	push   ebx
c00019d0:	46                   	inc    esi
c00019d1:	42                   	inc    edx
c00019d2:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c00019d6:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c00019da:	29 fb                	sub    ebx,edi
c00019dc:	89 cf                	mov    edi,ecx
c00019de:	29 f7                	sub    edi,esi
c00019e0:	01 c7                	add    edi,eax
c00019e2:	74 04                	je     c00019e8 <mem_cmp+0x1d>
c00019e4:	85 db                	test   ebx,ebx
c00019e6:	74 e8                	je     c00019d0 <mem_cmp+0x5>
c00019e8:	89 d8                	mov    eax,ebx
c00019ea:	5b                   	pop    ebx
c00019eb:	5e                   	pop    esi
c00019ec:	5f                   	pop    edi
c00019ed:	c3                   	ret    

c00019ee <chk_chr>:
c00019ee:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00019f1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00019f4:	74 07                	je     c00019fd <chk_chr+0xf>
c00019f6:	39 d1                	cmp    ecx,edx
c00019f8:	74 03                	je     c00019fd <chk_chr+0xf>
c00019fa:	40                   	inc    eax
c00019fb:	eb f1                	jmp    c00019ee <chk_chr>
c00019fd:	89 c8                	mov    eax,ecx
c00019ff:	c3                   	ret    

c0001a00 <dbc_1st>:
c0001a00:	31 c0                	xor    eax,eax
c0001a02:	c3                   	ret    

c0001a03 <dbc_2nd>:
c0001a03:	31 c0                	xor    eax,eax
c0001a05:	c3                   	ret    

c0001a06 <clst2sect>:
c0001a06:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001a09:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001a0c:	83 ea 02             	sub    edx,0x2
c0001a0f:	39 ca                	cmp    edx,ecx
c0001a11:	76 0d                	jbe    c0001a20 <clst2sect+0x1a>
c0001a13:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001a17:	0f af d1             	imul   edx,ecx
c0001a1a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001a1d:	89 d0                	mov    eax,edx
c0001a1f:	c3                   	ret    
c0001a20:	31 c0                	xor    eax,eax
c0001a22:	c3                   	ret    

c0001a23 <clmt_clust>:
c0001a23:	56                   	push   esi
c0001a24:	c1 ea 09             	shr    edx,0x9
c0001a27:	53                   	push   ebx
c0001a28:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0001a2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001a2d:	8d 5e 04             	lea    ebx,[esi+0x4]
c0001a30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001a34:	89 d0                	mov    eax,edx
c0001a36:	31 d2                	xor    edx,edx
c0001a38:	f7 f6                	div    esi
c0001a3a:	89 c1                	mov    ecx,eax
c0001a3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001a3e:	85 c0                	test   eax,eax
c0001a40:	74 10                	je     c0001a52 <clmt_clust+0x2f>
c0001a42:	39 c1                	cmp    ecx,eax
c0001a44:	72 07                	jb     c0001a4d <clmt_clust+0x2a>
c0001a46:	29 c1                	sub    ecx,eax
c0001a48:	83 c3 08             	add    ebx,0x8
c0001a4b:	eb ef                	jmp    c0001a3c <clmt_clust+0x19>
c0001a4d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001a50:	01 c8                	add    eax,ecx
c0001a52:	5b                   	pop    ebx
c0001a53:	5e                   	pop    esi
c0001a54:	c3                   	ret    

c0001a55 <pick_lfn>:
c0001a55:	55                   	push   ebp
c0001a56:	57                   	push   edi
c0001a57:	56                   	push   esi
c0001a58:	89 d6                	mov    esi,edx
c0001a5a:	53                   	push   ebx
c0001a5b:	89 c3                	mov    ebx,eax
c0001a5d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001a60:	e8 1a ff ff ff       	call   c000197f <ld_word>
c0001a65:	66 85 c0             	test   ax,ax
c0001a68:	74 04                	je     c0001a6e <pick_lfn+0x19>
c0001a6a:	31 c0                	xor    eax,eax
c0001a6c:	eb 5c                	jmp    c0001aca <pick_lfn+0x75>
c0001a6e:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001a71:	bd 01 00 00 00       	mov    ebp,0x1
c0001a76:	83 e1 bf             	and    ecx,0xffffffbf
c0001a79:	31 ff                	xor    edi,edi
c0001a7b:	49                   	dec    ecx
c0001a7c:	6b c9 0d             	imul   ecx,ecx,0xd
c0001a7f:	0f b6 87 00 d4 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2c00]
c0001a86:	01 f0                	add    eax,esi
c0001a88:	e8 f2 fe ff ff       	call   c000197f <ld_word>
c0001a8d:	66 85 ed             	test   bp,bp
c0001a90:	74 11                	je     c0001aa3 <pick_lfn+0x4e>
c0001a92:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001a98:	77 d0                	ja     c0001a6a <pick_lfn+0x15>
c0001a9a:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001a9e:	89 c5                	mov    ebp,eax
c0001aa0:	41                   	inc    ecx
c0001aa1:	eb 04                	jmp    c0001aa7 <pick_lfn+0x52>
c0001aa3:	66 40                	inc    ax
c0001aa5:	75 c3                	jne    c0001a6a <pick_lfn+0x15>
c0001aa7:	47                   	inc    edi
c0001aa8:	83 ff 0d             	cmp    edi,0xd
c0001aab:	75 d2                	jne    c0001a7f <pick_lfn+0x2a>
c0001aad:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ab0:	74 13                	je     c0001ac5 <pick_lfn+0x70>
c0001ab2:	66 85 ed             	test   bp,bp
c0001ab5:	74 0e                	je     c0001ac5 <pick_lfn+0x70>
c0001ab7:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001abd:	77 ab                	ja     c0001a6a <pick_lfn+0x15>
c0001abf:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ac5:	b8 01 00 00 00       	mov    eax,0x1
c0001aca:	5b                   	pop    ebx
c0001acb:	5e                   	pop    esi
c0001acc:	5f                   	pop    edi
c0001acd:	5d                   	pop    ebp
c0001ace:	c3                   	ret    

c0001acf <put_lfn>:
c0001acf:	55                   	push   ebp
c0001ad0:	31 ed                	xor    ebp,ebp
c0001ad2:	57                   	push   edi
c0001ad3:	89 d7                	mov    edi,edx
c0001ad5:	56                   	push   esi
c0001ad6:	31 f6                	xor    esi,esi
c0001ad8:	53                   	push   ebx
c0001ad9:	83 ec 08             	sub    esp,0x8
c0001adc:	89 04 24             	mov    DWORD PTR [esp],eax
c0001adf:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ae3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ae7:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001aed:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001af0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001af3:	31 d2                	xor    edx,edx
c0001af5:	e8 aa fe ff ff       	call   c00019a4 <st_word>
c0001afa:	0f b6 d9             	movzx  ebx,cl
c0001afd:	4b                   	dec    ebx
c0001afe:	6b db 0d             	imul   ebx,ebx,0xd
c0001b01:	66 83 fe ff          	cmp    si,0xffff
c0001b05:	74 08                	je     c0001b0f <put_lfn+0x40>
c0001b07:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001b0a:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001b0e:	43                   	inc    ebx
c0001b0f:	0f b6 85 00 d4 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2c00]
c0001b16:	0f b7 d6             	movzx  edx,si
c0001b19:	01 f8                	add    eax,edi
c0001b1b:	e8 84 fe ff ff       	call   c00019a4 <st_word>
c0001b20:	66 85 f6             	test   si,si
c0001b23:	75 03                	jne    c0001b28 <put_lfn+0x59>
c0001b25:	83 ce ff             	or     esi,0xffffffff
c0001b28:	45                   	inc    ebp
c0001b29:	83 fd 0d             	cmp    ebp,0xd
c0001b2c:	75 d3                	jne    c0001b01 <put_lfn+0x32>
c0001b2e:	66 46                	inc    si
c0001b30:	74 0a                	je     c0001b3c <put_lfn+0x6d>
c0001b32:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001b35:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001b3a:	75 09                	jne    c0001b45 <put_lfn+0x76>
c0001b3c:	88 c8                	mov    al,cl
c0001b3e:	83 c8 40             	or     eax,0x40
c0001b41:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001b45:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001b49:	88 07                	mov    BYTE PTR [edi],al
c0001b4b:	83 c4 08             	add    esp,0x8
c0001b4e:	5b                   	pop    ebx
c0001b4f:	5e                   	pop    esi
c0001b50:	5f                   	pop    edi
c0001b51:	5d                   	pop    ebp
c0001b52:	c3                   	ret    

c0001b53 <gen_numname>:
c0001b53:	57                   	push   edi
c0001b54:	89 cf                	mov    edi,ecx
c0001b56:	56                   	push   esi
c0001b57:	b9 0b 00 00 00       	mov    ecx,0xb
c0001b5c:	53                   	push   ebx
c0001b5d:	89 c6                	mov    esi,eax
c0001b5f:	83 ec 10             	sub    esp,0x10
c0001b62:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001b66:	e8 40 fe ff ff       	call   c00019ab <mem_cpy>
c0001b6b:	83 fb 05             	cmp    ebx,0x5
c0001b6e:	76 2d                	jbe    c0001b9d <gen_numname+0x4a>
c0001b70:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001b73:	66 85 c0             	test   ax,ax
c0001b76:	74 25                	je     c0001b9d <gen_numname+0x4a>
c0001b78:	83 c7 02             	add    edi,0x2
c0001b7b:	ba 10 00 00 00       	mov    edx,0x10
c0001b80:	01 db                	add    ebx,ebx
c0001b82:	89 c1                	mov    ecx,eax
c0001b84:	66 d1 e8             	shr    ax,1
c0001b87:	83 e1 01             	and    ecx,0x1
c0001b8a:	01 cb                	add    ebx,ecx
c0001b8c:	0f ba e3 10          	bt     ebx,0x10
c0001b90:	73 06                	jae    c0001b98 <gen_numname+0x45>
c0001b92:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001b98:	4a                   	dec    edx
c0001b99:	75 e5                	jne    c0001b80 <gen_numname+0x2d>
c0001b9b:	eb d3                	jmp    c0001b70 <gen_numname+0x1d>
c0001b9d:	b8 07 00 00 00       	mov    eax,0x7
c0001ba2:	88 d9                	mov    cl,bl
c0001ba4:	83 e1 0f             	and    ecx,0xf
c0001ba7:	8d 51 30             	lea    edx,[ecx+0x30]
c0001baa:	80 fa 39             	cmp    dl,0x39
c0001bad:	76 03                	jbe    c0001bb2 <gen_numname+0x5f>
c0001baf:	8d 51 37             	lea    edx,[ecx+0x37]
c0001bb2:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001bb5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001bb9:	89 da                	mov    edx,ebx
c0001bbb:	c1 ea 04             	shr    edx,0x4
c0001bbe:	83 fb 0f             	cmp    ebx,0xf
c0001bc1:	76 06                	jbe    c0001bc9 <gen_numname+0x76>
c0001bc3:	89 c8                	mov    eax,ecx
c0001bc5:	89 d3                	mov    ebx,edx
c0001bc7:	eb d9                	jmp    c0001ba2 <gen_numname+0x4f>
c0001bc9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001bce:	31 d2                	xor    edx,edx
c0001bd0:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001bd3:	8d 04 16             	lea    eax,[esi+edx*1]
c0001bd6:	39 ca                	cmp    edx,ecx
c0001bd8:	73 18                	jae    c0001bf2 <gen_numname+0x9f>
c0001bda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bdd:	3c 20                	cmp    al,0x20
c0001bdf:	74 11                	je     c0001bf2 <gen_numname+0x9f>
c0001be1:	e8 1a fe ff ff       	call   c0001a00 <dbc_1st>
c0001be6:	85 c0                	test   eax,eax
c0001be8:	74 05                	je     c0001bef <gen_numname+0x9c>
c0001bea:	39 d3                	cmp    ebx,edx
c0001bec:	74 04                	je     c0001bf2 <gen_numname+0x9f>
c0001bee:	42                   	inc    edx
c0001bef:	42                   	inc    edx
c0001bf0:	eb e1                	jmp    c0001bd3 <gen_numname+0x80>
c0001bf2:	b0 20                	mov    al,0x20
c0001bf4:	83 f9 07             	cmp    ecx,0x7
c0001bf7:	77 05                	ja     c0001bfe <gen_numname+0xab>
c0001bf9:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001bfd:	41                   	inc    ecx
c0001bfe:	42                   	inc    edx
c0001bff:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001c03:	83 fa 07             	cmp    edx,0x7
c0001c06:	76 ea                	jbe    c0001bf2 <gen_numname+0x9f>
c0001c08:	83 c4 10             	add    esp,0x10
c0001c0b:	5b                   	pop    ebx
c0001c0c:	5e                   	pop    esi
c0001c0d:	5f                   	pop    edi
c0001c0e:	c3                   	ret    

c0001c0f <sum_sfn>:
c0001c0f:	31 c9                	xor    ecx,ecx
c0001c11:	31 d2                	xor    edx,edx
c0001c13:	d0 ca                	ror    dl,1
c0001c15:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001c18:	41                   	inc    ecx
c0001c19:	83 f9 0b             	cmp    ecx,0xb
c0001c1c:	75 f5                	jne    c0001c13 <sum_sfn+0x4>
c0001c1e:	88 d0                	mov    al,dl
c0001c20:	c3                   	ret    

c0001c21 <get_ldnumber>:
c0001c21:	8b 10                	mov    edx,DWORD PTR [eax]
c0001c23:	85 d2                	test   edx,edx
c0001c25:	74 14                	je     c0001c3b <get_ldnumber+0x1a>
c0001c27:	56                   	push   esi
c0001c28:	53                   	push   ebx
c0001c29:	89 d3                	mov    ebx,edx
c0001c2b:	43                   	inc    ebx
c0001c2c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001c2f:	80 f9 1f             	cmp    cl,0x1f
c0001c32:	76 0d                	jbe    c0001c41 <get_ldnumber+0x20>
c0001c34:	80 f9 3a             	cmp    cl,0x3a
c0001c37:	75 f2                	jne    c0001c2b <get_ldnumber+0xa>
c0001c39:	eb 0a                	jmp    c0001c45 <get_ldnumber+0x24>
c0001c3b:	83 c9 ff             	or     ecx,0xffffffff
c0001c3e:	89 c8                	mov    eax,ecx
c0001c40:	c3                   	ret    
c0001c41:	31 c9                	xor    ecx,ecx
c0001c43:	eb 24                	jmp    c0001c69 <get_ldnumber+0x48>
c0001c45:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001c48:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001c4b:	80 f9 09             	cmp    cl,0x9
c0001c4e:	77 16                	ja     c0001c66 <get_ldnumber+0x45>
c0001c50:	83 c2 02             	add    edx,0x2
c0001c53:	83 c9 ff             	or     ecx,0xffffffff
c0001c56:	39 d3                	cmp    ebx,edx
c0001c58:	75 0f                	jne    c0001c69 <get_ldnumber+0x48>
c0001c5a:	89 f2                	mov    edx,esi
c0001c5c:	89 18                	mov    DWORD PTR [eax],ebx
c0001c5e:	0f be ca             	movsx  ecx,dl
c0001c61:	83 e9 30             	sub    ecx,0x30
c0001c64:	eb 03                	jmp    c0001c69 <get_ldnumber+0x48>
c0001c66:	83 c9 ff             	or     ecx,0xffffffff
c0001c69:	89 c8                	mov    eax,ecx
c0001c6b:	5b                   	pop    ebx
c0001c6c:	5e                   	pop    esi
c0001c6d:	c3                   	ret    

c0001c6e <validate>:
c0001c6e:	56                   	push   esi
c0001c6f:	53                   	push   ebx
c0001c70:	89 d6                	mov    esi,edx
c0001c72:	51                   	push   ecx
c0001c73:	85 c0                	test   eax,eax
c0001c75:	75 09                	jne    c0001c80 <validate+0x12>
c0001c77:	b8 09 00 00 00       	mov    eax,0x9
c0001c7c:	31 c9                	xor    ecx,ecx
c0001c7e:	eb 2f                	jmp    c0001caf <validate+0x41>
c0001c80:	89 c3                	mov    ebx,eax
c0001c82:	8b 00                	mov    eax,DWORD PTR [eax]
c0001c84:	85 c0                	test   eax,eax
c0001c86:	74 ef                	je     c0001c77 <validate+0x9>
c0001c88:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c8b:	74 ea                	je     c0001c77 <validate+0x9>
c0001c8d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0001c91:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0001c95:	75 e0                	jne    c0001c77 <validate+0x9>
c0001c97:	83 ec 0c             	sub    esp,0xc
c0001c9a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0001c9e:	50                   	push   eax
c0001c9f:	e8 8a fc ff ff       	call   c000192e <disk_status>
c0001ca4:	83 c4 10             	add    esp,0x10
c0001ca7:	a8 01                	test   al,0x1
c0001ca9:	75 cc                	jne    c0001c77 <validate+0x9>
c0001cab:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0001cad:	31 c0                	xor    eax,eax
c0001caf:	89 0e                	mov    DWORD PTR [esi],ecx
c0001cb1:	5a                   	pop    edx
c0001cb2:	5b                   	pop    ebx
c0001cb3:	5e                   	pop    esi
c0001cb4:	c3                   	ret    

c0001cb5 <sync_window>:
c0001cb5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0001cb9:	74 58                	je     c0001d13 <sync_window+0x5e>
c0001cbb:	56                   	push   esi
c0001cbc:	53                   	push   ebx
c0001cbd:	8d 70 34             	lea    esi,[eax+0x34]
c0001cc0:	51                   	push   ecx
c0001cc1:	89 c3                	mov    ebx,eax
c0001cc3:	6a 01                	push   0x1
c0001cc5:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0001cc8:	56                   	push   esi
c0001cc9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0001ccd:	50                   	push   eax
c0001cce:	e8 77 fc ff ff       	call   c000194a <disk_write>
c0001cd3:	83 c4 10             	add    esp,0x10
c0001cd6:	ba 01 00 00 00       	mov    edx,0x1
c0001cdb:	85 c0                	test   eax,eax
c0001cdd:	75 2e                	jne    c0001d0d <sync_window+0x58>
c0001cdf:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0001ce2:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001ce5:	89 c1                	mov    ecx,eax
c0001ce7:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0001ceb:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0001cee:	39 d1                	cmp    ecx,edx
c0001cf0:	73 19                	jae    c0001d0b <sync_window+0x56>
c0001cf2:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0001cf6:	75 13                	jne    c0001d0b <sync_window+0x56>
c0001cf8:	6a 01                	push   0x1
c0001cfa:	01 d0                	add    eax,edx
c0001cfc:	50                   	push   eax
c0001cfd:	56                   	push   esi
c0001cfe:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0001d02:	50                   	push   eax
c0001d03:	e8 42 fc ff ff       	call   c000194a <disk_write>
c0001d08:	83 c4 10             	add    esp,0x10
c0001d0b:	31 d2                	xor    edx,edx
c0001d0d:	89 d0                	mov    eax,edx
c0001d0f:	5a                   	pop    edx
c0001d10:	5b                   	pop    ebx
c0001d11:	5e                   	pop    esi
c0001d12:	c3                   	ret    
c0001d13:	31 d2                	xor    edx,edx
c0001d15:	89 d0                	mov    eax,edx
c0001d17:	c3                   	ret    

c0001d18 <move_window>:
c0001d18:	57                   	push   edi
c0001d19:	56                   	push   esi
c0001d1a:	31 f6                	xor    esi,esi
c0001d1c:	53                   	push   ebx
c0001d1d:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0001d20:	74 32                	je     c0001d54 <move_window+0x3c>
c0001d22:	89 c3                	mov    ebx,eax
c0001d24:	89 d7                	mov    edi,edx
c0001d26:	e8 8a ff ff ff       	call   c0001cb5 <sync_window>
c0001d2b:	89 c6                	mov    esi,eax
c0001d2d:	85 c0                	test   eax,eax
c0001d2f:	75 23                	jne    c0001d54 <move_window+0x3c>
c0001d31:	6a 01                	push   0x1
c0001d33:	8d 43 34             	lea    eax,[ebx+0x34]
c0001d36:	57                   	push   edi
c0001d37:	50                   	push   eax
c0001d38:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0001d3c:	50                   	push   eax
c0001d3d:	e8 f2 fb ff ff       	call   c0001934 <disk_read>
c0001d42:	83 c4 10             	add    esp,0x10
c0001d45:	85 c0                	test   eax,eax
c0001d47:	74 08                	je     c0001d51 <move_window+0x39>
c0001d49:	be 01 00 00 00       	mov    esi,0x1
c0001d4e:	83 cf ff             	or     edi,0xffffffff
c0001d51:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0001d54:	89 f0                	mov    eax,esi
c0001d56:	5b                   	pop    ebx
c0001d57:	5e                   	pop    esi
c0001d58:	5f                   	pop    edi
c0001d59:	c3                   	ret    

c0001d5a <check_fs>:
c0001d5a:	53                   	push   ebx
c0001d5b:	89 c3                	mov    ebx,eax
c0001d5d:	83 ec 08             	sub    esp,0x8
c0001d60:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0001d64:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0001d6b:	e8 a8 ff ff ff       	call   c0001d18 <move_window>
c0001d70:	ba 04 00 00 00       	mov    edx,0x4
c0001d75:	85 c0                	test   eax,eax
c0001d77:	75 68                	jne    c0001de1 <check_fs+0x87>
c0001d79:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0001d7f:	e8 fb fb ff ff       	call   c000197f <ld_word>
c0001d84:	ba 03 00 00 00       	mov    edx,0x3
c0001d89:	66 3d 55 aa          	cmp    ax,0xaa55
c0001d8d:	75 52                	jne    c0001de1 <check_fs+0x87>
c0001d8f:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c0001d92:	8d 50 18             	lea    edx,[eax+0x18]
c0001d95:	80 fa 01             	cmp    dl,0x1
c0001d98:	76 09                	jbe    c0001da3 <check_fs+0x49>
c0001d9a:	ba 02 00 00 00       	mov    edx,0x2
c0001d9f:	3c eb                	cmp    al,0xeb
c0001da1:	75 3e                	jne    c0001de1 <check_fs+0x87>
c0001da3:	ba d8 f3 01 c0       	mov    edx,0xc001f3d8
c0001da8:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0001dab:	b9 03 00 00 00       	mov    ecx,0x3
c0001db0:	e8 16 fc ff ff       	call   c00019cb <mem_cmp>
c0001db5:	31 d2                	xor    edx,edx
c0001db7:	85 c0                	test   eax,eax
c0001db9:	74 26                	je     c0001de1 <check_fs+0x87>
c0001dbb:	ba bc d2 01 c0       	mov    edx,0xc001d2bc
c0001dc0:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0001dc6:	b9 05 00 00 00       	mov    ecx,0x5
c0001dcb:	e8 fb fb ff ff       	call   c00019cb <mem_cmp>
c0001dd0:	31 d2                	xor    edx,edx
c0001dd2:	85 c0                	test   eax,eax
c0001dd4:	74 0b                	je     c0001de1 <check_fs+0x87>
c0001dd6:	31 d2                	xor    edx,edx
c0001dd8:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0001ddc:	0f 95 c2             	setne  dl
c0001ddf:	01 d2                	add    edx,edx
c0001de1:	89 d0                	mov    eax,edx
c0001de3:	83 c4 08             	add    esp,0x8
c0001de6:	5b                   	pop    ebx
c0001de7:	c3                   	ret    

c0001de8 <find_volume>:
c0001de8:	55                   	push   ebp
c0001de9:	57                   	push   edi
c0001dea:	56                   	push   esi
c0001deb:	89 c6                	mov    esi,eax
c0001ded:	53                   	push   ebx
c0001dee:	89 d3                	mov    ebx,edx
c0001df0:	83 ec 2c             	sub    esp,0x2c
c0001df3:	31 d2                	xor    edx,edx
c0001df5:	e8 60 ff ff ff       	call   c0001d5a <check_fs>
c0001dfa:	83 f8 02             	cmp    eax,0x2
c0001dfd:	74 06                	je     c0001e05 <find_volume+0x1d>
c0001dff:	77 62                	ja     c0001e63 <find_volume+0x7b>
c0001e01:	85 db                	test   ebx,ebx
c0001e03:	74 5e                	je     c0001e63 <find_volume+0x7b>
c0001e05:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0001e09:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0001e0f:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0001e15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001e19:	89 cf                	mov    edi,ecx
c0001e1b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001e1f:	89 e8                	mov    eax,ebp
c0001e21:	83 c5 10             	add    ebp,0x10
c0001e24:	e8 63 fb ff ff       	call   c000198c <ld_dword>
c0001e29:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001e2d:	89 01                	mov    DWORD PTR [ecx],eax
c0001e2f:	83 c1 04             	add    ecx,0x4
c0001e32:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0001e36:	75 e3                	jne    c0001e1b <find_volume+0x33>
c0001e38:	31 ed                	xor    ebp,ebp
c0001e3a:	85 db                	test   ebx,ebx
c0001e3c:	74 03                	je     c0001e41 <find_volume+0x59>
c0001e3e:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0001e41:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0001e44:	b8 03 00 00 00       	mov    eax,0x3
c0001e49:	85 d2                	test   edx,edx
c0001e4b:	74 0c                	je     c0001e59 <find_volume+0x71>
c0001e4d:	89 f0                	mov    eax,esi
c0001e4f:	e8 06 ff ff ff       	call   c0001d5a <check_fs>
c0001e54:	83 f8 01             	cmp    eax,0x1
c0001e57:	76 0a                	jbe    c0001e63 <find_volume+0x7b>
c0001e59:	85 db                	test   ebx,ebx
c0001e5b:	75 06                	jne    c0001e63 <find_volume+0x7b>
c0001e5d:	45                   	inc    ebp
c0001e5e:	83 fd 03             	cmp    ebp,0x3
c0001e61:	76 de                	jbe    c0001e41 <find_volume+0x59>
c0001e63:	83 c4 2c             	add    esp,0x2c
c0001e66:	5b                   	pop    ebx
c0001e67:	5e                   	pop    esi
c0001e68:	5f                   	pop    edi
c0001e69:	5d                   	pop    ebp
c0001e6a:	c3                   	ret    

c0001e6b <mount_volume>:
c0001e6b:	55                   	push   ebp
c0001e6c:	89 d5                	mov    ebp,edx
c0001e6e:	57                   	push   edi
c0001e6f:	89 cf                	mov    edi,ecx
c0001e71:	56                   	push   esi
c0001e72:	53                   	push   ebx
c0001e73:	bb 0b 00 00 00       	mov    ebx,0xb
c0001e78:	83 ec 2c             	sub    esp,0x2c
c0001e7b:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0001e81:	e8 9b fd ff ff       	call   c0001c21 <get_ldnumber>
c0001e86:	85 c0                	test   eax,eax
c0001e88:	0f 88 d5 02 00 00    	js     c0002163 <mount_volume+0x2f8>
c0001e8e:	8b 34 85 00 03 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdfd00]
c0001e95:	89 c2                	mov    edx,eax
c0001e97:	bb 0c 00 00 00       	mov    ebx,0xc
c0001e9c:	85 f6                	test   esi,esi
c0001e9e:	0f 84 bf 02 00 00    	je     c0002163 <mount_volume+0x2f8>
c0001ea4:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c0001ea7:	83 e7 fe             	and    edi,0xfffffffe
c0001eaa:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0001ead:	74 3a                	je     c0001ee9 <mount_volume+0x7e>
c0001eaf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001eb3:	83 ec 0c             	sub    esp,0xc
c0001eb6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0001eba:	50                   	push   eax
c0001ebb:	e8 6e fa ff ff       	call   c000192e <disk_status>
c0001ec0:	83 c4 10             	add    esp,0x10
c0001ec3:	a8 01                	test   al,0x1
c0001ec5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001ec9:	75 1e                	jne    c0001ee9 <mount_volume+0x7e>
c0001ecb:	31 db                	xor    ebx,ebx
c0001ecd:	89 f9                	mov    ecx,edi
c0001ecf:	84 c9                	test   cl,cl
c0001ed1:	0f 84 8c 02 00 00    	je     c0002163 <mount_volume+0x2f8>
c0001ed7:	a8 04                	test   al,0x4
c0001ed9:	0f 84 84 02 00 00    	je     c0002163 <mount_volume+0x2f8>
c0001edf:	bb 0a 00 00 00       	mov    ebx,0xa
c0001ee4:	e9 7a 02 00 00       	jmp    c0002163 <mount_volume+0x2f8>
c0001ee9:	83 ec 0c             	sub    esp,0xc
c0001eec:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0001eef:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0001ef2:	0f b6 c2             	movzx  eax,dl
c0001ef5:	bb 03 00 00 00       	mov    ebx,0x3
c0001efa:	50                   	push   eax
c0001efb:	e8 31 fa ff ff       	call   c0001931 <disk_initialize>
c0001f00:	83 c4 10             	add    esp,0x10
c0001f03:	a8 01                	test   al,0x1
c0001f05:	0f 85 58 02 00 00    	jne    c0002163 <mount_volume+0x2f8>
c0001f0b:	89 f9                	mov    ecx,edi
c0001f0d:	84 c9                	test   cl,cl
c0001f0f:	74 04                	je     c0001f15 <mount_volume+0xaa>
c0001f11:	a8 04                	test   al,0x4
c0001f13:	75 ca                	jne    c0001edf <mount_volume+0x74>
c0001f15:	31 d2                	xor    edx,edx
c0001f17:	89 f0                	mov    eax,esi
c0001f19:	bb 01 00 00 00       	mov    ebx,0x1
c0001f1e:	e8 c5 fe ff ff       	call   c0001de8 <find_volume>
c0001f23:	83 f8 04             	cmp    eax,0x4
c0001f26:	0f 84 37 02 00 00    	je     c0002163 <mount_volume+0x2f8>
c0001f2c:	83 f8 01             	cmp    eax,0x1
c0001f2f:	76 0a                	jbe    c0001f3b <mount_volume+0xd0>
c0001f31:	bb 0d 00 00 00       	mov    ebx,0xd
c0001f36:	e9 28 02 00 00       	jmp    c0002163 <mount_volume+0x2f8>
c0001f3b:	8d 46 3f             	lea    eax,[esi+0x3f]
c0001f3e:	e8 3c fa ff ff       	call   c000197f <ld_word>
c0001f43:	66 3d 00 02          	cmp    ax,0x200
c0001f47:	75 e8                	jne    c0001f31 <mount_volume+0xc6>
c0001f49:	8d 46 4a             	lea    eax,[esi+0x4a]
c0001f4c:	e8 2e fa ff ff       	call   c000197f <ld_word>
c0001f51:	0f b7 c0             	movzx  eax,ax
c0001f54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001f58:	85 c0                	test   eax,eax
c0001f5a:	75 0c                	jne    c0001f68 <mount_volume+0xfd>
c0001f5c:	8d 46 58             	lea    eax,[esi+0x58]
c0001f5f:	e8 28 fa ff ff       	call   c000198c <ld_dword>
c0001f64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001f68:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0001f6b:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c0001f6e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001f72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001f76:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0001f79:	89 e8                	mov    eax,ebp
c0001f7b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0001f7e:	8d 45 ff             	lea    eax,[ebp-0x1]
c0001f81:	3c 01                	cmp    al,0x1
c0001f83:	77 ac                	ja     c0001f31 <mount_volume+0xc6>
c0001f85:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c0001f89:	89 c3                	mov    ebx,eax
c0001f8b:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c0001f8f:	66 85 c0             	test   ax,ax
c0001f92:	74 9d                	je     c0001f31 <mount_volume+0xc6>
c0001f94:	8d 40 ff             	lea    eax,[eax-0x1]
c0001f97:	85 d8                	test   eax,ebx
c0001f99:	75 96                	jne    c0001f31 <mount_volume+0xc6>
c0001f9b:	8d 46 45             	lea    eax,[esi+0x45]
c0001f9e:	e8 dc f9 ff ff       	call   c000197f <ld_word>
c0001fa3:	89 c7                	mov    edi,eax
c0001fa5:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0001fa9:	a8 0f                	test   al,0xf
c0001fab:	75 84                	jne    c0001f31 <mount_volume+0xc6>
c0001fad:	8d 46 47             	lea    eax,[esi+0x47]
c0001fb0:	e8 ca f9 ff ff       	call   c000197f <ld_word>
c0001fb5:	0f b7 d0             	movzx  edx,ax
c0001fb8:	85 d2                	test   edx,edx
c0001fba:	75 0a                	jne    c0001fc6 <mount_volume+0x15b>
c0001fbc:	8d 46 54             	lea    eax,[esi+0x54]
c0001fbf:	e8 c8 f9 ff ff       	call   c000198c <ld_dword>
c0001fc4:	89 c2                	mov    edx,eax
c0001fc6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001fca:	8d 46 42             	lea    eax,[esi+0x42]
c0001fcd:	e8 ad f9 ff ff       	call   c000197f <ld_word>
c0001fd2:	66 85 c0             	test   ax,ax
c0001fd5:	0f 84 56 ff ff ff    	je     c0001f31 <mount_volume+0xc6>
c0001fdb:	89 e9                	mov    ecx,ebp
c0001fdd:	0f b7 c0             	movzx  eax,ax
c0001fe0:	0f b6 e9             	movzx  ebp,cl
c0001fe3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001fe7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001feb:	89 f8                	mov    eax,edi
c0001fed:	0f af cd             	imul   ecx,ebp
c0001ff0:	66 c1 e8 04          	shr    ax,0x4
c0001ff4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001ff8:	0f b7 c0             	movzx  eax,ax
c0001ffb:	01 c8                	add    eax,ecx
c0001ffd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002001:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002005:	39 c2                	cmp    edx,eax
c0002007:	0f 82 24 ff ff ff    	jb     c0001f31 <mount_volume+0xc6>
c000200d:	29 c2                	sub    edx,eax
c000200f:	89 d5                	mov    ebp,edx
c0002011:	89 d0                	mov    eax,edx
c0002013:	31 d2                	xor    edx,edx
c0002015:	f7 f3                	div    ebx
c0002017:	39 dd                	cmp    ebp,ebx
c0002019:	0f 82 12 ff ff ff    	jb     c0001f31 <mount_volume+0xc6>
c000201f:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002024:	0f 87 07 ff ff ff    	ja     c0001f31 <mount_volume+0xc6>
c000202a:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000202f:	0f 86 1f 01 00 00    	jbe    c0002154 <mount_volume+0x2e9>
c0002035:	bb 03 00 00 00       	mov    ebx,0x3
c000203a:	8d 68 02             	lea    ebp,[eax+0x2]
c000203d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002045:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002049:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000204c:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000204f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002053:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002056:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c000205a:	83 fb 03             	cmp    ebx,0x3
c000205d:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002060:	75 21                	jne    c0002083 <mount_volume+0x218>
c0002062:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002065:	e8 15 f9 ff ff       	call   c000197f <ld_word>
c000206a:	66 09 c7             	or     di,ax
c000206d:	0f 85 be fe ff ff    	jne    c0001f31 <mount_volume+0xc6>
c0002073:	8d 46 60             	lea    eax,[esi+0x60]
c0002076:	c1 e5 02             	shl    ebp,0x2
c0002079:	e8 0e f9 ff ff       	call   c000198c <ld_dword>
c000207e:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002081:	eb 22                	jmp    c00020a5 <mount_volume+0x23a>
c0002083:	66 85 ff             	test   di,di
c0002086:	0f 84 a5 fe ff ff    	je     c0001f31 <mount_volume+0xc6>
c000208c:	01 c8                	add    eax,ecx
c000208e:	83 fb 02             	cmp    ebx,0x2
c0002091:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002094:	75 04                	jne    c000209a <mount_volume+0x22f>
c0002096:	01 ed                	add    ebp,ebp
c0002098:	eb 0b                	jmp    c00020a5 <mount_volume+0x23a>
c000209a:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000209e:	83 e5 01             	and    ebp,0x1
c00020a1:	d1 e8                	shr    eax,1
c00020a3:	01 c5                	add    ebp,eax
c00020a5:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00020ab:	c1 ed 09             	shr    ebp,0x9
c00020ae:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00020b2:	0f 87 79 fe ff ff    	ja     c0001f31 <mount_volume+0xc6>
c00020b8:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00020bf:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00020c6:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00020ca:	83 fb 03             	cmp    ebx,0x3
c00020cd:	75 6e                	jne    c000213d <mount_volume+0x2d2>
c00020cf:	8d 46 64             	lea    eax,[esi+0x64]
c00020d2:	e8 a8 f8 ff ff       	call   c000197f <ld_word>
c00020d7:	66 48                	dec    ax
c00020d9:	75 62                	jne    c000213d <mount_volume+0x2d2>
c00020db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00020df:	89 f0                	mov    eax,esi
c00020e1:	42                   	inc    edx
c00020e2:	e8 31 fc ff ff       	call   c0001d18 <move_window>
c00020e7:	85 c0                	test   eax,eax
c00020e9:	75 52                	jne    c000213d <mount_volume+0x2d2>
c00020eb:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00020ef:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00020f5:	e8 85 f8 ff ff       	call   c000197f <ld_word>
c00020fa:	66 3d 55 aa          	cmp    ax,0xaa55
c00020fe:	75 3d                	jne    c000213d <mount_volume+0x2d2>
c0002100:	8d 46 34             	lea    eax,[esi+0x34]
c0002103:	e8 84 f8 ff ff       	call   c000198c <ld_dword>
c0002108:	3d 52 52 61 41       	cmp    eax,0x41615252
c000210d:	75 2e                	jne    c000213d <mount_volume+0x2d2>
c000210f:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002115:	e8 72 f8 ff ff       	call   c000198c <ld_dword>
c000211a:	3d 72 72 41 61       	cmp    eax,0x61417272
c000211f:	75 1c                	jne    c000213d <mount_volume+0x2d2>
c0002121:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002127:	e8 60 f8 ff ff       	call   c000198c <ld_dword>
c000212c:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000212f:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002135:	e8 52 f8 ff ff       	call   c000198c <ld_dword>
c000213a:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000213d:	66 a1 e0 02 02 c0    	mov    ax,ds:0xc00202e0
c0002143:	88 1e                	mov    BYTE PTR [esi],bl
c0002145:	40                   	inc    eax
c0002146:	31 db                	xor    ebx,ebx
c0002148:	66 a3 e0 02 02 c0    	mov    ds:0xc00202e0,ax
c000214e:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002152:	eb 0f                	jmp    c0002163 <mount_volume+0x2f8>
c0002154:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002159:	19 db                	sbb    ebx,ebx
c000215b:	83 c3 02             	add    ebx,0x2
c000215e:	e9 d7 fe ff ff       	jmp    c000203a <mount_volume+0x1cf>
c0002163:	83 c4 2c             	add    esp,0x2c
c0002166:	89 d8                	mov    eax,ebx
c0002168:	5b                   	pop    ebx
c0002169:	5e                   	pop    esi
c000216a:	5f                   	pop    edi
c000216b:	5d                   	pop    ebp
c000216c:	c3                   	ret    

c000216d <put_fat>:
c000216d:	55                   	push   ebp
c000216e:	bd 02 00 00 00       	mov    ebp,0x2
c0002173:	57                   	push   edi
c0002174:	56                   	push   esi
c0002175:	53                   	push   ebx
c0002176:	83 ec 1c             	sub    esp,0x1c
c0002179:	83 fa 01             	cmp    edx,0x1
c000217c:	0f 86 31 01 00 00    	jbe    c00022b3 <put_fat+0x146>
c0002182:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002185:	0f 86 28 01 00 00    	jbe    c00022b3 <put_fat+0x146>
c000218b:	89 c6                	mov    esi,eax
c000218d:	89 cf                	mov    edi,ecx
c000218f:	8a 00                	mov    al,BYTE PTR [eax]
c0002191:	89 d3                	mov    ebx,edx
c0002193:	3c 02                	cmp    al,0x2
c0002195:	0f 84 ac 00 00 00    	je     c0002247 <put_fat+0xda>
c000219b:	3c 03                	cmp    al,0x3
c000219d:	0f 84 d1 00 00 00    	je     c0002274 <put_fat+0x107>
c00021a3:	fe c8                	dec    al
c00021a5:	0f 85 08 01 00 00    	jne    c00022b3 <put_fat+0x146>
c00021ab:	89 d1                	mov    ecx,edx
c00021ad:	89 f0                	mov    eax,esi
c00021af:	d1 e9                	shr    ecx,1
c00021b1:	01 d1                	add    ecx,edx
c00021b3:	89 ca                	mov    edx,ecx
c00021b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00021b9:	c1 ea 09             	shr    edx,0x9
c00021bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00021bf:	e8 54 fb ff ff       	call   c0001d18 <move_window>
c00021c4:	89 c5                	mov    ebp,eax
c00021c6:	85 c0                	test   eax,eax
c00021c8:	0f 85 e5 00 00 00    	jne    c00022b3 <put_fat+0x146>
c00021ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021d2:	8d 46 34             	lea    eax,[esi+0x34]
c00021d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00021d9:	8d 41 01             	lea    eax,[ecx+0x1]
c00021dc:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00021e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00021e6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00021ea:	89 f8                	mov    eax,edi
c00021ec:	83 e3 01             	and    ebx,0x1
c00021ef:	74 0c                	je     c00021fd <put_fat+0x90>
c00021f1:	8a 11                	mov    dl,BYTE PTR [ecx]
c00021f3:	89 f8                	mov    eax,edi
c00021f5:	83 e2 0f             	and    edx,0xf
c00021f8:	c1 e0 04             	shl    eax,0x4
c00021fb:	09 d0                	or     eax,edx
c00021fd:	88 01                	mov    BYTE PTR [ecx],al
c00021ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002203:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002207:	c1 ea 09             	shr    edx,0x9
c000220a:	89 f0                	mov    eax,esi
c000220c:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000220f:	e8 04 fb ff ff       	call   c0001d18 <move_window>
c0002214:	89 c5                	mov    ebp,eax
c0002216:	85 c0                	test   eax,eax
c0002218:	0f 85 95 00 00 00    	jne    c00022b3 <put_fat+0x146>
c000221e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002222:	25 ff 01 00 00       	and    eax,0x1ff
c0002227:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000222b:	85 db                	test   ebx,ebx
c000222d:	74 07                	je     c0002236 <put_fat+0xc9>
c000222f:	c1 ef 04             	shr    edi,0x4
c0002232:	89 f9                	mov    ecx,edi
c0002234:	eb 0d                	jmp    c0002243 <put_fat+0xd6>
c0002236:	8a 08                	mov    cl,BYTE PTR [eax]
c0002238:	c1 ef 08             	shr    edi,0x8
c000223b:	83 e1 f0             	and    ecx,0xfffffff0
c000223e:	83 e7 0f             	and    edi,0xf
c0002241:	09 f9                	or     ecx,edi
c0002243:	88 08                	mov    BYTE PTR [eax],cl
c0002245:	eb 27                	jmp    c000226e <put_fat+0x101>
c0002247:	c1 ea 08             	shr    edx,0x8
c000224a:	89 f0                	mov    eax,esi
c000224c:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000224f:	e8 c4 fa ff ff       	call   c0001d18 <move_window>
c0002254:	89 c5                	mov    ebp,eax
c0002256:	85 c0                	test   eax,eax
c0002258:	75 59                	jne    c00022b3 <put_fat+0x146>
c000225a:	01 db                	add    ebx,ebx
c000225c:	0f b7 d7             	movzx  edx,di
c000225f:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002265:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002269:	e8 36 f7 ff ff       	call   c00019a4 <st_word>
c000226e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002272:	eb 3f                	jmp    c00022b3 <put_fat+0x146>
c0002274:	c1 ea 07             	shr    edx,0x7
c0002277:	89 f0                	mov    eax,esi
c0002279:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000227c:	e8 97 fa ff ff       	call   c0001d18 <move_window>
c0002281:	89 c5                	mov    ebp,eax
c0002283:	85 c0                	test   eax,eax
c0002285:	75 2c                	jne    c00022b3 <put_fat+0x146>
c0002287:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c000228d:	c1 e3 02             	shl    ebx,0x2
c0002290:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002296:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c000229a:	89 d8                	mov    eax,ebx
c000229c:	e8 eb f6 ff ff       	call   c000198c <ld_dword>
c00022a1:	25 00 00 00 f0       	and    eax,0xf0000000
c00022a6:	09 f8                	or     eax,edi
c00022a8:	89 c2                	mov    edx,eax
c00022aa:	89 d8                	mov    eax,ebx
c00022ac:	e8 f7 f6 ff ff       	call   c00019a8 <st_dword>
c00022b1:	eb bb                	jmp    c000226e <put_fat+0x101>
c00022b3:	83 c4 1c             	add    esp,0x1c
c00022b6:	89 e8                	mov    eax,ebp
c00022b8:	5b                   	pop    ebx
c00022b9:	5e                   	pop    esi
c00022ba:	5f                   	pop    edi
c00022bb:	5d                   	pop    ebp
c00022bc:	c3                   	ret    

c00022bd <dir_clear>:
c00022bd:	55                   	push   ebp
c00022be:	57                   	push   edi
c00022bf:	56                   	push   esi
c00022c0:	53                   	push   ebx
c00022c1:	89 c3                	mov    ebx,eax
c00022c3:	83 ec 1c             	sub    esp,0x1c
c00022c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00022ca:	e8 e6 f9 ff ff       	call   c0001cb5 <sync_window>
c00022cf:	85 c0                	test   eax,eax
c00022d1:	75 54                	jne    c0002327 <dir_clear+0x6a>
c00022d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00022d7:	89 d8                	mov    eax,ebx
c00022d9:	8d 7b 34             	lea    edi,[ebx+0x34]
c00022dc:	e8 25 f7 ff ff       	call   c0001a06 <clst2sect>
c00022e1:	31 f6                	xor    esi,esi
c00022e3:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00022e6:	89 c5                	mov    ebp,eax
c00022e8:	b9 00 02 00 00       	mov    ecx,0x200
c00022ed:	31 d2                	xor    edx,edx
c00022ef:	89 f8                	mov    eax,edi
c00022f1:	e8 ca f6 ff ff       	call   c00019c0 <mem_set>
c00022f6:	0f b7 43 0a          	movzx  eax,WORD PTR [ebx+0xa]
c00022fa:	39 f0                	cmp    eax,esi
c00022fc:	77 0e                	ja     c000230c <dir_clear+0x4f>
c00022fe:	0f b7 43 0a          	movzx  eax,WORD PTR [ebx+0xa]
c0002302:	39 f0                	cmp    eax,esi
c0002304:	0f 95 c0             	setne  al
c0002307:	0f b6 c0             	movzx  eax,al
c000230a:	eb 20                	jmp    c000232c <dir_clear+0x6f>
c000230c:	6a 01                	push   0x1
c000230e:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0002311:	50                   	push   eax
c0002312:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002316:	57                   	push   edi
c0002317:	50                   	push   eax
c0002318:	e8 2d f6 ff ff       	call   c000194a <disk_write>
c000231d:	83 c4 10             	add    esp,0x10
c0002320:	85 c0                	test   eax,eax
c0002322:	75 da                	jne    c00022fe <dir_clear+0x41>
c0002324:	46                   	inc    esi
c0002325:	eb cf                	jmp    c00022f6 <dir_clear+0x39>
c0002327:	b8 01 00 00 00       	mov    eax,0x1
c000232c:	83 c4 1c             	add    esp,0x1c
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <put_utf>:
c0002334:	57                   	push   edi
c0002335:	89 cf                	mov    edi,ecx
c0002337:	56                   	push   esi
c0002338:	89 d6                	mov    esi,edx
c000233a:	53                   	push   ebx
c000233b:	52                   	push   edx
c000233c:	52                   	push   edx
c000233d:	68 b5 01 00 00       	push   0x1b5
c0002342:	50                   	push   eax
c0002343:	e8 a8 32 00 00       	call   c00055f0 <ff_uni2oem>
c0002348:	83 c4 10             	add    esp,0x10
c000234b:	89 c3                	mov    ebx,eax
c000234d:	66 3d ff 00          	cmp    ax,0xff
c0002351:	76 10                	jbe    c0002363 <put_utf+0x2f>
c0002353:	31 c0                	xor    eax,eax
c0002355:	83 ff 01             	cmp    edi,0x1
c0002358:	76 1a                	jbe    c0002374 <put_utf+0x40>
c000235a:	86 fb                	xchg   bl,bh
c000235c:	b0 02                	mov    al,0x2
c000235e:	66 89 1e             	mov    WORD PTR [esi],bx
c0002361:	eb 11                	jmp    c0002374 <put_utf+0x40>
c0002363:	66 85 c0             	test   ax,ax
c0002366:	74 0a                	je     c0002372 <put_utf+0x3e>
c0002368:	85 ff                	test   edi,edi
c000236a:	74 06                	je     c0002372 <put_utf+0x3e>
c000236c:	88 06                	mov    BYTE PTR [esi],al
c000236e:	b0 01                	mov    al,0x1
c0002370:	eb 02                	jmp    c0002374 <put_utf+0x40>
c0002372:	31 c0                	xor    eax,eax
c0002374:	5b                   	pop    ebx
c0002375:	5e                   	pop    esi
c0002376:	5f                   	pop    edi
c0002377:	c3                   	ret    

c0002378 <get_fileinfo>:
c0002378:	55                   	push   ebp
c0002379:	57                   	push   edi
c000237a:	56                   	push   esi
c000237b:	53                   	push   ebx
c000237c:	83 ec 1c             	sub    esp,0x1c
c000237f:	8b 30                	mov    esi,DWORD PTR [eax]
c0002381:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002385:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002389:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c000238d:	0f 84 42 01 00 00    	je     c00024d5 <get_fileinfo+0x15d>
c0002393:	89 d3                	mov    ebx,edx
c0002395:	89 c6                	mov    esi,eax
c0002397:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000239b:	74 6a                	je     c0002407 <get_fileinfo+0x8f>
c000239d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00023a5:	31 ed                	xor    ebp,ebp
c00023a7:	31 ff                	xor    edi,edi
c00023a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00023ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00023b1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00023b4:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00023b8:	66 85 d2             	test   dx,dx
c00023bb:	74 3e                	je     c00023fb <get_fileinfo+0x83>
c00023bd:	66 85 ed             	test   bp,bp
c00023c0:	75 0c                	jne    c00023ce <get_fileinfo+0x56>
c00023c2:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c00023c8:	66 3d ff 07          	cmp    ax,0x7ff
c00023cc:	76 22                	jbe    c00023f0 <get_fileinfo+0x78>
c00023ce:	b9 ff 00 00 00       	mov    ecx,0xff
c00023d3:	89 e8                	mov    eax,ebp
c00023d5:	29 f9                	sub    ecx,edi
c00023d7:	c1 e0 10             	shl    eax,0x10
c00023da:	09 d0                	or     eax,edx
c00023dc:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c00023e0:	e8 4f ff ff ff       	call   c0002334 <put_utf>
c00023e5:	84 c0                	test   al,al
c00023e7:	74 10                	je     c00023f9 <get_fileinfo+0x81>
c00023e9:	0f b6 c0             	movzx  eax,al
c00023ec:	31 d2                	xor    edx,edx
c00023ee:	01 c7                	add    edi,eax
c00023f0:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c00023f5:	89 d5                	mov    ebp,edx
c00023f7:	eb b0                	jmp    c00023a9 <get_fileinfo+0x31>
c00023f9:	31 ff                	xor    edi,edi
c00023fb:	66 85 ed             	test   bp,bp
c00023fe:	74 02                	je     c0002402 <get_fileinfo+0x8a>
c0002400:	31 ff                	xor    edi,edi
c0002402:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002407:	31 c0                	xor    eax,eax
c0002409:	31 d2                	xor    edx,edx
c000240b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000240e:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c0002411:	0f b6 14 17          	movzx  edx,BYTE PTR [edi+edx*1]
c0002415:	66 83 fa 20          	cmp    dx,0x20
c0002419:	74 20                	je     c000243b <get_fileinfo+0xc3>
c000241b:	66 83 fa 05          	cmp    dx,0x5
c000241f:	75 05                	jne    c0002426 <get_fileinfo+0xae>
c0002421:	ba e5 00 00 00       	mov    edx,0xe5
c0002426:	83 f8 0b             	cmp    eax,0xb
c0002429:	77 0b                	ja     c0002436 <get_fileinfo+0xbe>
c000242b:	83 f9 09             	cmp    ecx,0x9
c000242e:	75 06                	jne    c0002436 <get_fileinfo+0xbe>
c0002430:	c6 44 03 09 2e       	mov    BYTE PTR [ebx+eax*1+0x9],0x2e
c0002435:	40                   	inc    eax
c0002436:	88 54 03 09          	mov    BYTE PTR [ebx+eax*1+0x9],dl
c000243a:	40                   	inc    eax
c000243b:	89 ca                	mov    edx,ecx
c000243d:	83 f9 0b             	cmp    ecx,0xb
c0002440:	75 c9                	jne    c000240b <get_fileinfo+0x93>
c0002442:	c6 44 03 09 00       	mov    BYTE PTR [ebx+eax*1+0x9],0x0
c0002447:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000244b:	75 54                	jne    c00024a1 <get_fileinfo+0x129>
c000244d:	85 c0                	test   eax,eax
c000244f:	75 0b                	jne    c000245c <get_fileinfo+0xe4>
c0002451:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0002455:	ba 01 00 00 00       	mov    edx,0x1
c000245a:	eb 33                	jmp    c000248f <get_fileinfo+0x117>
c000245c:	b1 08                	mov    cl,0x8
c000245e:	31 d2                	xor    edx,edx
c0002460:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0002466:	84 c0                	test   al,al
c0002468:	74 25                	je     c000248f <get_fileinfo+0x117>
c000246a:	66 83 f8 2e          	cmp    ax,0x2e
c000246e:	74 16                	je     c0002486 <get_fileinfo+0x10e>
c0002470:	8d 78 bf             	lea    edi,[eax-0x41]
c0002473:	66 83 ff 19          	cmp    di,0x19
c0002477:	77 0f                	ja     c0002488 <get_fileinfo+0x110>
c0002479:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000247c:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c000247f:	74 07                	je     c0002488 <get_fileinfo+0x110>
c0002481:	83 c0 20             	add    eax,0x20
c0002484:	eb 02                	jmp    c0002488 <get_fileinfo+0x110>
c0002486:	b1 10                	mov    cl,0x10
c0002488:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000248c:	42                   	inc    edx
c000248d:	eb d1                	jmp    c0002460 <get_fileinfo+0xe8>
c000248f:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0002494:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002497:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000249b:	75 04                	jne    c00024a1 <get_fileinfo+0x129>
c000249d:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00024a1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00024a4:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00024a7:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00024aa:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00024ad:	83 c0 1c             	add    eax,0x1c
c00024b0:	e8 d7 f4 ff ff       	call   c000198c <ld_dword>
c00024b5:	89 03                	mov    DWORD PTR [ebx],eax
c00024b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00024ba:	83 c0 16             	add    eax,0x16
c00024bd:	e8 bd f4 ff ff       	call   c000197f <ld_word>
c00024c2:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00024c6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00024c9:	83 c0 18             	add    eax,0x18
c00024cc:	e8 ae f4 ff ff       	call   c000197f <ld_word>
c00024d1:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00024d5:	83 c4 1c             	add    esp,0x1c
c00024d8:	5b                   	pop    ebx
c00024d9:	5e                   	pop    esi
c00024da:	5f                   	pop    edi
c00024db:	5d                   	pop    ebp
c00024dc:	c3                   	ret    

c00024dd <tchar2uni>:
c00024dd:	56                   	push   esi
c00024de:	53                   	push   ebx
c00024df:	53                   	push   ebx
c00024e0:	89 c3                	mov    ebx,eax
c00024e2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00024e4:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00024e7:	0f b6 01             	movzx  eax,BYTE PTR [ecx]
c00024ea:	e8 11 f5 ff ff       	call   c0001a00 <dbc_1st>
c00024ef:	8d 71 01             	lea    esi,[ecx+0x1]
c00024f2:	85 c0                	test   eax,eax
c00024f4:	74 1c                	je     c0002512 <tchar2uni+0x35>
c00024f6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00024fa:	8d 71 02             	lea    esi,[ecx+0x2]
c00024fd:	89 c1                	mov    ecx,eax
c00024ff:	e8 ff f4 ff ff       	call   c0001a03 <dbc_2nd>
c0002504:	85 c0                	test   eax,eax
c0002506:	75 05                	jne    c000250d <tchar2uni+0x30>
c0002508:	83 c8 ff             	or     eax,0xffffffff
c000250b:	eb 29                	jmp    c0002536 <tchar2uni+0x59>
c000250d:	c1 e2 08             	shl    edx,0x8
c0002510:	01 ca                	add    edx,ecx
c0002512:	66 85 d2             	test   dx,dx
c0002515:	74 1a                	je     c0002531 <tchar2uni+0x54>
c0002517:	0f b7 d2             	movzx  edx,dx
c000251a:	51                   	push   ecx
c000251b:	51                   	push   ecx
c000251c:	68 b5 01 00 00       	push   0x1b5
c0002521:	52                   	push   edx
c0002522:	e8 61 31 00 00       	call   c0005688 <ff_oem2uni>
c0002527:	83 c4 10             	add    esp,0x10
c000252a:	89 c2                	mov    edx,eax
c000252c:	66 85 c0             	test   ax,ax
c000252f:	74 d7                	je     c0002508 <tchar2uni+0x2b>
c0002531:	0f b7 c2             	movzx  eax,dx
c0002534:	89 33                	mov    DWORD PTR [ebx],esi
c0002536:	5a                   	pop    edx
c0002537:	5b                   	pop    ebx
c0002538:	5e                   	pop    esi
c0002539:	c3                   	ret    

c000253a <create_name>:
c000253a:	55                   	push   ebp
c000253b:	89 d5                	mov    ebp,edx
c000253d:	57                   	push   edi
c000253e:	89 c7                	mov    edi,eax
c0002540:	56                   	push   esi
c0002541:	31 f6                	xor    esi,esi
c0002543:	53                   	push   ebx
c0002544:	83 ec 3c             	sub    esp,0x3c
c0002547:	8b 02                	mov    eax,DWORD PTR [edx]
c0002549:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000254d:	8b 07                	mov    eax,DWORD PTR [edi]
c000254f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002552:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002556:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000255a:	e8 7e ff ff ff       	call   c00024dd <tchar2uni>
c000255f:	89 c3                	mov    ebx,eax
c0002561:	83 f8 ff             	cmp    eax,0xffffffff
c0002564:	75 0a                	jne    c0002570 <create_name+0x36>
c0002566:	b8 06 00 00 00       	mov    eax,0x6
c000256b:	e9 9e 02 00 00       	jmp    c000280e <create_name+0x2d4>
c0002570:	3d ff ff 00 00       	cmp    eax,0xffff
c0002575:	76 0c                	jbe    c0002583 <create_name+0x49>
c0002577:	c1 e8 10             	shr    eax,0x10
c000257a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000257e:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002582:	46                   	inc    esi
c0002583:	66 83 fb 1f          	cmp    bx,0x1f
c0002587:	76 4f                	jbe    c00025d8 <create_name+0x9e>
c0002589:	66 83 fb 5c          	cmp    bx,0x5c
c000258d:	74 35                	je     c00025c4 <create_name+0x8a>
c000258f:	66 83 fb 2f          	cmp    bx,0x2f
c0002593:	74 2f                	je     c00025c4 <create_name+0x8a>
c0002595:	66 83 fb 7f          	cmp    bx,0x7f
c0002599:	77 11                	ja     c00025ac <create_name+0x72>
c000259b:	0f b7 d3             	movzx  edx,bx
c000259e:	b8 c2 d2 01 c0       	mov    eax,0xc001d2c2
c00025a3:	e8 46 f4 ff ff       	call   c00019ee <chk_chr>
c00025a8:	85 c0                	test   eax,eax
c00025aa:	75 ba                	jne    c0002566 <create_name+0x2c>
c00025ac:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00025b2:	77 b2                	ja     c0002566 <create_name+0x2c>
c00025b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025b8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c00025bc:	46                   	inc    esi
c00025bd:	eb 97                	jmp    c0002556 <create_name+0x1c>
c00025bf:	40                   	inc    eax
c00025c0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00025c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00025c8:	8a 10                	mov    dl,BYTE PTR [eax]
c00025ca:	80 fa 2f             	cmp    dl,0x2f
c00025cd:	74 f0                	je     c00025bf <create_name+0x85>
c00025cf:	80 fa 5c             	cmp    dl,0x5c
c00025d2:	74 eb                	je     c00025bf <create_name+0x85>
c00025d4:	31 db                	xor    ebx,ebx
c00025d6:	eb 02                	jmp    c00025da <create_name+0xa0>
c00025d8:	b3 04                	mov    bl,0x4
c00025da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00025de:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00025e1:	85 f6                	test   esi,esi
c00025e3:	74 18                	je     c00025fd <create_name+0xc3>
c00025e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025e9:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c00025ee:	66 83 f8 20          	cmp    ax,0x20
c00025f2:	74 06                	je     c00025fa <create_name+0xc0>
c00025f4:	66 83 f8 2e          	cmp    ax,0x2e
c00025f8:	75 03                	jne    c00025fd <create_name+0xc3>
c00025fa:	4e                   	dec    esi
c00025fb:	eb e4                	jmp    c00025e1 <create_name+0xa7>
c00025fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002601:	31 ed                	xor    ebp,ebp
c0002603:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002609:	85 f6                	test   esi,esi
c000260b:	0f 84 55 ff ff ff    	je     c0002566 <create_name+0x2c>
c0002611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002615:	8d 55 01             	lea    edx,[ebp+0x1]
c0002618:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c000261c:	66 83 f8 20          	cmp    ax,0x20
c0002620:	75 04                	jne    c0002626 <create_name+0xec>
c0002622:	89 d5                	mov    ebp,edx
c0002624:	eb eb                	jmp    c0002611 <create_name+0xd7>
c0002626:	85 ed                	test   ebp,ebp
c0002628:	75 06                	jne    c0002630 <create_name+0xf6>
c000262a:	66 83 f8 2e          	cmp    ax,0x2e
c000262e:	75 08                	jne    c0002638 <create_name+0xfe>
c0002630:	83 cb 03             	or     ebx,0x3
c0002633:	eb 03                	jmp    c0002638 <create_name+0xfe>
c0002635:	4e                   	dec    esi
c0002636:	74 0c                	je     c0002644 <create_name+0x10a>
c0002638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000263c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002642:	75 f1                	jne    c0002635 <create_name+0xfb>
c0002644:	b9 0b 00 00 00       	mov    ecx,0xb
c0002649:	8d 47 20             	lea    eax,[edi+0x20]
c000264c:	ba 20 00 00 00       	mov    edx,0x20
c0002651:	e8 6a f3 ff ff       	call   c00019c0 <mem_set>
c0002656:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000265e:	31 c9                	xor    ecx,ecx
c0002660:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002665:	8d 45 01             	lea    eax,[ebp+0x1]
c0002668:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000266c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002670:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002674:	66 85 ed             	test   bp,bp
c0002677:	0f 84 30 01 00 00    	je     c00027ad <create_name+0x273>
c000267d:	66 83 fd 20          	cmp    bp,0x20
c0002681:	74 10                	je     c0002693 <create_name+0x159>
c0002683:	66 83 fd 2e          	cmp    bp,0x2e
c0002687:	75 13                	jne    c000269c <create_name+0x162>
c0002689:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c000268d:	0f 84 6b 01 00 00    	je     c00027fe <create_name+0x2c4>
c0002693:	83 cb 03             	or     ebx,0x3
c0002696:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000269a:	eb c9                	jmp    c0002665 <create_name+0x12b>
c000269c:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c00026a0:	73 0b                	jae    c00026ad <create_name+0x173>
c00026a2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c00026a6:	75 47                	jne    c00026ef <create_name+0x1b5>
c00026a8:	e9 51 01 00 00       	jmp    c00027fe <create_name+0x2c4>
c00026ad:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c00026b2:	75 10                	jne    c00026c4 <create_name+0x18a>
c00026b4:	83 cb 03             	or     ebx,0x3
c00026b7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c00026bf:	e9 e9 00 00 00       	jmp    c00027ad <create_name+0x273>
c00026c4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c00026c8:	74 0d                	je     c00026d7 <create_name+0x19d>
c00026ca:	83 cb 03             	or     ebx,0x3
c00026cd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c00026d1:	0f 87 d6 00 00 00    	ja     c00027ad <create_name+0x273>
c00026d7:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c00026dc:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00026e0:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c00026e8:	b9 08 00 00 00       	mov    ecx,0x8
c00026ed:	eb a7                	jmp    c0002696 <create_name+0x15c>
c00026ef:	66 83 fd 7f          	cmp    bp,0x7f
c00026f3:	76 68                	jbe    c000275d <create_name+0x223>
c00026f5:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00026f9:	88 da                	mov    dl,bl
c00026fb:	83 ca 02             	or     edx,0x2
c00026fe:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002702:	50                   	push   eax
c0002703:	50                   	push   eax
c0002704:	68 b5 01 00 00       	push   0x1b5
c0002709:	55                   	push   ebp
c000270a:	e8 e1 2e 00 00       	call   c00055f0 <ff_uni2oem>
c000270f:	83 c4 10             	add    esp,0x10
c0002712:	89 c5                	mov    ebp,eax
c0002714:	a8 80                	test   al,0x80
c0002716:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c000271a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000271e:	74 0c                	je     c000272c <create_name+0x1f2>
c0002720:	83 e5 7f             	and    ebp,0x7f
c0002723:	0f b6 ad 80 d3 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe2c80]
c000272a:	eb 2a                	jmp    c0002756 <create_name+0x21c>
c000272c:	66 3d ff 00          	cmp    ax,0xff
c0002730:	76 24                	jbe    c0002756 <create_name+0x21c>
c0002732:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002736:	48                   	dec    eax
c0002737:	39 c8                	cmp    eax,ecx
c0002739:	77 0c                	ja     c0002747 <create_name+0x20d>
c000273b:	83 cb 03             	or     ebx,0x3
c000273e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002742:	e9 4f ff ff ff       	jmp    c0002696 <create_name+0x15c>
c0002747:	89 e8                	mov    eax,ebp
c0002749:	88 d3                	mov    bl,dl
c000274b:	66 c1 e8 08          	shr    ax,0x8
c000274f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002753:	41                   	inc    ecx
c0002754:	eb 4b                	jmp    c00027a1 <create_name+0x267>
c0002756:	88 d3                	mov    bl,dl
c0002758:	66 85 ed             	test   bp,bp
c000275b:	74 19                	je     c0002776 <create_name+0x23c>
c000275d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002761:	0f b7 d5             	movzx  edx,bp
c0002764:	b8 cb d2 01 c0       	mov    eax,0xc001d2cb
c0002769:	e8 80 f2 ff ff       	call   c00019ee <chk_chr>
c000276e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002772:	85 c0                	test   eax,eax
c0002774:	74 0a                	je     c0002780 <create_name+0x246>
c0002776:	83 cb 03             	or     ebx,0x3
c0002779:	bd 5f 00 00 00       	mov    ebp,0x5f
c000277e:	eb 21                	jmp    c00027a1 <create_name+0x267>
c0002780:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002783:	66 83 f8 19          	cmp    ax,0x19
c0002787:	77 07                	ja     c0002790 <create_name+0x256>
c0002789:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c000278e:	eb 11                	jmp    c00027a1 <create_name+0x267>
c0002790:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002793:	66 83 f8 19          	cmp    ax,0x19
c0002797:	77 08                	ja     c00027a1 <create_name+0x267>
c0002799:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c000279e:	83 ed 20             	sub    ebp,0x20
c00027a1:	89 e8                	mov    eax,ebp
c00027a3:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c00027a7:	41                   	inc    ecx
c00027a8:	e9 e9 fe ff ff       	jmp    c0002696 <create_name+0x15c>
c00027ad:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c00027b1:	75 04                	jne    c00027b7 <create_name+0x27d>
c00027b3:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c00027b7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c00027bc:	75 05                	jne    c00027c3 <create_name+0x289>
c00027be:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c00027c3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00027c7:	83 e0 0c             	and    eax,0xc
c00027ca:	3c 0c                	cmp    al,0xc
c00027cc:	74 0b                	je     c00027d9 <create_name+0x29f>
c00027ce:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00027d2:	83 e0 03             	and    eax,0x3
c00027d5:	3c 03                	cmp    al,0x3
c00027d7:	75 05                	jne    c00027de <create_name+0x2a4>
c00027d9:	83 cb 02             	or     ebx,0x2
c00027dc:	eb 19                	jmp    c00027f7 <create_name+0x2bd>
c00027de:	f6 c3 02             	test   bl,0x2
c00027e1:	75 14                	jne    c00027f7 <create_name+0x2bd>
c00027e3:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00027e8:	74 03                	je     c00027ed <create_name+0x2b3>
c00027ea:	83 cb 10             	or     ebx,0x10
c00027ed:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c00027f2:	74 03                	je     c00027f7 <create_name+0x2bd>
c00027f4:	83 cb 08             	or     ebx,0x8
c00027f7:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c00027fa:	31 c0                	xor    eax,eax
c00027fc:	eb 10                	jmp    c000280e <create_name+0x2d4>
c00027fe:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002803:	0f 85 ce fe ff ff    	jne    c00026d7 <create_name+0x19d>
c0002809:	e9 a6 fe ff ff       	jmp    c00026b4 <create_name+0x17a>
c000280e:	83 c4 3c             	add    esp,0x3c
c0002811:	5b                   	pop    ebx
c0002812:	5e                   	pop    esi
c0002813:	5f                   	pop    edi
c0002814:	5d                   	pop    ebp
c0002815:	c3                   	ret    

c0002816 <cmp_lfn>:
c0002816:	55                   	push   ebp
c0002817:	57                   	push   edi
c0002818:	89 d7                	mov    edi,edx
c000281a:	56                   	push   esi
c000281b:	53                   	push   ebx
c000281c:	83 ec 1c             	sub    esp,0x1c
c000281f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002823:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002826:	e8 54 f1 ff ff       	call   c000197f <ld_word>
c000282b:	66 85 c0             	test   ax,ax
c000282e:	74 07                	je     c0002837 <cmp_lfn+0x21>
c0002830:	31 c0                	xor    eax,eax
c0002832:	e9 9a 00 00 00       	jmp    c00028d1 <cmp_lfn+0xbb>
c0002837:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002839:	bd 01 00 00 00       	mov    ebp,0x1
c000283e:	83 e3 3f             	and    ebx,0x3f
c0002841:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002849:	4b                   	dec    ebx
c000284a:	6b db 0d             	imul   ebx,ebx,0xd
c000284d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002851:	0f b6 80 00 d4 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2c00]
c0002858:	01 f8                	add    eax,edi
c000285a:	e8 20 f1 ff ff       	call   c000197f <ld_word>
c000285f:	66 85 ed             	test   bp,bp
c0002862:	89 c6                	mov    esi,eax
c0002864:	74 3c                	je     c00028a2 <cmp_lfn+0x8c>
c0002866:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000286c:	77 c2                	ja     c0002830 <cmp_lfn+0x1a>
c000286e:	83 ec 0c             	sub    esp,0xc
c0002871:	0f b7 c0             	movzx  eax,ax
c0002874:	50                   	push   eax
c0002875:	e8 82 2e 00 00       	call   c00056fc <ff_wtoupper>
c000287a:	89 c5                	mov    ebp,eax
c000287c:	8d 43 01             	lea    eax,[ebx+0x1]
c000287f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002883:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002887:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000288b:	89 04 24             	mov    DWORD PTR [esp],eax
c000288e:	e8 69 2e 00 00       	call   c00056fc <ff_wtoupper>
c0002893:	83 c4 10             	add    esp,0x10
c0002896:	39 c5                	cmp    ebp,eax
c0002898:	75 96                	jne    c0002830 <cmp_lfn+0x1a>
c000289a:	89 f5                	mov    ebp,esi
c000289c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00028a0:	eb 04                	jmp    c00028a6 <cmp_lfn+0x90>
c00028a2:	66 46                	inc    si
c00028a4:	75 8a                	jne    c0002830 <cmp_lfn+0x1a>
c00028a6:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00028aa:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00028af:	75 9c                	jne    c000284d <cmp_lfn+0x37>
c00028b1:	f6 07 40             	test   BYTE PTR [edi],0x40
c00028b4:	74 16                	je     c00028cc <cmp_lfn+0xb6>
c00028b6:	66 85 ed             	test   bp,bp
c00028b9:	74 11                	je     c00028cc <cmp_lfn+0xb6>
c00028bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028bf:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00028c4:	0f 94 c0             	sete   al
c00028c7:	0f b6 c0             	movzx  eax,al
c00028ca:	eb 05                	jmp    c00028d1 <cmp_lfn+0xbb>
c00028cc:	b8 01 00 00 00       	mov    eax,0x1
c00028d1:	83 c4 1c             	add    esp,0x1c
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <sync_fs>:
c00028d9:	56                   	push   esi
c00028da:	53                   	push   ebx
c00028db:	53                   	push   ebx
c00028dc:	89 c3                	mov    ebx,eax
c00028de:	e8 d2 f3 ff ff       	call   c0001cb5 <sync_window>
c00028e3:	85 c0                	test   eax,eax
c00028e5:	0f 85 9a 00 00 00    	jne    c0002985 <sync_fs+0xac>
c00028eb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00028ee:	75 7b                	jne    c000296b <sync_fs+0x92>
c00028f0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00028f4:	75 75                	jne    c000296b <sync_fs+0x92>
c00028f6:	b9 00 02 00 00       	mov    ecx,0x200
c00028fb:	8d 73 34             	lea    esi,[ebx+0x34]
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 f0                	mov    eax,esi
c0002902:	e8 b9 f0 ff ff       	call   c00019c0 <mem_set>
c0002907:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000290d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002912:	e8 8d f0 ff ff       	call   c00019a4 <st_word>
c0002917:	ba 52 52 61 41       	mov    edx,0x41615252
c000291c:	89 f0                	mov    eax,esi
c000291e:	e8 85 f0 ff ff       	call   c00019a8 <st_dword>
c0002923:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002929:	ba 72 72 41 61       	mov    edx,0x61417272
c000292e:	e8 75 f0 ff ff       	call   c00019a8 <st_dword>
c0002933:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002936:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c000293c:	e8 67 f0 ff ff       	call   c00019a8 <st_dword>
c0002941:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002944:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c000294a:	e8 59 f0 ff ff       	call   c00019a8 <st_dword>
c000294f:	6a 01                	push   0x1
c0002951:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002954:	40                   	inc    eax
c0002955:	50                   	push   eax
c0002956:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002959:	56                   	push   esi
c000295a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000295e:	50                   	push   eax
c000295f:	e8 e6 ef ff ff       	call   c000194a <disk_write>
c0002964:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002968:	83 c4 10             	add    esp,0x10
c000296b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000296f:	51                   	push   ecx
c0002970:	6a 00                	push   0x0
c0002972:	6a 00                	push   0x0
c0002974:	50                   	push   eax
c0002975:	e8 e6 ef ff ff       	call   c0001960 <disk_ioctl>
c000297a:	83 c4 10             	add    esp,0x10
c000297d:	85 c0                	test   eax,eax
c000297f:	0f 95 c0             	setne  al
c0002982:	0f b6 c0             	movzx  eax,al
c0002985:	5a                   	pop    edx
c0002986:	5b                   	pop    ebx
c0002987:	5e                   	pop    esi
c0002988:	c3                   	ret    

c0002989 <create_partition>:
c0002989:	55                   	push   ebp
c000298a:	0f b6 c0             	movzx  eax,al
c000298d:	57                   	push   edi
c000298e:	56                   	push   esi
c000298f:	53                   	push   ebx
c0002990:	83 ec 40             	sub    esp,0x40
c0002993:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002997:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000299b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000299f:	8d 44 24 30          	lea    eax,[esp+0x30]
c00029a3:	50                   	push   eax
c00029a4:	6a 01                	push   0x1
c00029a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00029aa:	e8 b1 ef ff ff       	call   c0001960 <disk_ioctl>
c00029af:	83 c4 10             	add    esp,0x10
c00029b2:	85 c0                	test   eax,eax
c00029b4:	0f 85 6a 01 00 00    	jne    c0002b24 <create_partition+0x19b>
c00029ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00029be:	b9 05 00 00 00       	mov    ecx,0x5
c00029c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00029c7:	be 08 00 00 00       	mov    esi,0x8
c00029cc:	89 f0                	mov    eax,esi
c00029ce:	31 d2                	xor    edx,edx
c00029d0:	0f b6 d8             	movzx  ebx,al
c00029d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00029d7:	f7 f3                	div    ebx
c00029d9:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00029de:	76 0a                	jbe    c00029ea <create_partition+0x61>
c00029e0:	d1 e6                	shl    esi,1
c00029e2:	49                   	dec    ecx
c00029e3:	75 e7                	jne    c00029cc <create_partition+0x43>
c00029e5:	be ff ff ff ff       	mov    esi,0xffffffff
c00029ea:	b9 00 02 00 00       	mov    ecx,0x200
c00029ef:	31 d2                	xor    edx,edx
c00029f1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00029f5:	e8 c6 ef ff ff       	call   c00019c0 <mem_set>
c00029fa:	b9 64 00 00 00       	mov    ecx,0x64
c00029ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a03:	31 d2                	xor    edx,edx
c0002a05:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a0d:	f7 f1                	div    ecx
c0002a0f:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002a14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002a18:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002a1c:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002a22:	89 f0                	mov    eax,esi
c0002a24:	0f b6 c0             	movzx  eax,al
c0002a27:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002a2b:	85 c9                	test   ecx,ecx
c0002a2d:	75 34                	jne    c0002a63 <create_partition+0xda>
c0002a2f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002a33:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002a38:	05 fe 01 00 00       	add    eax,0x1fe
c0002a3d:	e8 62 ef ff ff       	call   c00019a4 <st_word>
c0002a42:	6a 01                	push   0x1
c0002a44:	6a 00                	push   0x0
c0002a46:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002a4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002a4e:	e8 f7 ee ff ff       	call   c000194a <disk_write>
c0002a53:	83 c4 10             	add    esp,0x10
c0002a56:	85 c0                	test   eax,eax
c0002a58:	0f 95 c0             	setne  al
c0002a5b:	0f b6 c0             	movzx  eax,al
c0002a5e:	e9 c6 00 00 00       	jmp    c0002b29 <create_partition+0x1a0>
c0002a63:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002a67:	76 c6                	jbe    c0002a2f <create_partition+0xa6>
c0002a69:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002a6d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002a71:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002a74:	83 fe 64             	cmp    esi,0x64
c0002a77:	77 0d                	ja     c0002a86 <create_partition+0xfd>
c0002a79:	74 07                	je     c0002a82 <create_partition+0xf9>
c0002a7b:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002a80:	eb 04                	jmp    c0002a86 <create_partition+0xfd>
c0002a82:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002a86:	31 c0                	xor    eax,eax
c0002a88:	89 f2                	mov    edx,esi
c0002a8a:	01 ca                	add    edx,ecx
c0002a8c:	0f 92 c0             	setb   al
c0002a8f:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002a93:	77 04                	ja     c0002a99 <create_partition+0x110>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	74 08                	je     c0002aa1 <create_partition+0x118>
c0002a99:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002a9d:	29 ce                	sub    esi,ecx
c0002a9f:	eb 04                	jmp    c0002aa5 <create_partition+0x11c>
c0002aa1:	85 f6                	test   esi,esi
c0002aa3:	74 8a                	je     c0002a2f <create_partition+0xa6>
c0002aa5:	89 ca                	mov    edx,ecx
c0002aa7:	89 d8                	mov    eax,ebx
c0002aa9:	bf 3f 00 00 00       	mov    edi,0x3f
c0002aae:	e8 f5 ee ff ff       	call   c00019a8 <st_dword>
c0002ab3:	8d 43 04             	lea    eax,[ebx+0x4]
c0002ab6:	89 f2                	mov    edx,esi
c0002ab8:	83 c3 10             	add    ebx,0x10
c0002abb:	e8 e8 ee ff ff       	call   c00019a8 <st_dword>
c0002ac0:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002ac4:	31 d2                	xor    edx,edx
c0002ac6:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002ac9:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002acd:	89 c8                	mov    eax,ecx
c0002acf:	01 f1                	add    ecx,esi
c0002ad1:	f7 f7                	div    edi
c0002ad3:	89 d5                	mov    ebp,edx
c0002ad5:	31 d2                	xor    edx,edx
c0002ad7:	45                   	inc    ebp
c0002ad8:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002adc:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002adf:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002ae2:	89 c2                	mov    edx,eax
c0002ae4:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002ae7:	c1 ea 02             	shr    edx,0x2
c0002aea:	83 e2 c0             	and    edx,0xffffffc0
c0002aed:	09 ea                	or     edx,ebp
c0002aef:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002af2:	31 d2                	xor    edx,edx
c0002af4:	f7 f7                	div    edi
c0002af6:	89 d6                	mov    esi,edx
c0002af8:	31 d2                	xor    edx,edx
c0002afa:	46                   	inc    esi
c0002afb:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002aff:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002b02:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002b05:	89 c7                	mov    edi,eax
c0002b07:	c1 ef 02             	shr    edi,0x2
c0002b0a:	83 e7 c0             	and    edi,0xffffffc0
c0002b0d:	09 fe                	or     esi,edi
c0002b0f:	89 f2                	mov    edx,esi
c0002b11:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002b14:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002b19:	0f 85 0c ff ff ff    	jne    c0002a2b <create_partition+0xa2>
c0002b1f:	e9 0b ff ff ff       	jmp    c0002a2f <create_partition+0xa6>
c0002b24:	b8 01 00 00 00       	mov    eax,0x1
c0002b29:	83 c4 3c             	add    esp,0x3c
c0002b2c:	5b                   	pop    ebx
c0002b2d:	5e                   	pop    esi
c0002b2e:	5f                   	pop    edi
c0002b2f:	5d                   	pop    ebp
c0002b30:	c3                   	ret    

c0002b31 <ld_clust.isra.0>:
c0002b31:	56                   	push   esi
c0002b32:	89 c6                	mov    esi,eax
c0002b34:	53                   	push   ebx
c0002b35:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002b38:	89 d3                	mov    ebx,edx
c0002b3a:	e8 40 ee ff ff       	call   c000197f <ld_word>
c0002b3f:	0f b7 c8             	movzx  ecx,ax
c0002b42:	89 f0                	mov    eax,esi
c0002b44:	3c 03                	cmp    al,0x3
c0002b46:	75 0d                	jne    c0002b55 <ld_clust.isra.0+0x24>
c0002b48:	8d 43 14             	lea    eax,[ebx+0x14]
c0002b4b:	e8 2f ee ff ff       	call   c000197f <ld_word>
c0002b50:	c1 e0 10             	shl    eax,0x10
c0002b53:	09 c1                	or     ecx,eax
c0002b55:	89 c8                	mov    eax,ecx
c0002b57:	5b                   	pop    ebx
c0002b58:	5e                   	pop    esi
c0002b59:	c3                   	ret    

c0002b5a <st_clust.isra.1>:
c0002b5a:	56                   	push   esi
c0002b5b:	89 c6                	mov    esi,eax
c0002b5d:	53                   	push   ebx
c0002b5e:	89 d3                	mov    ebx,edx
c0002b60:	0f b7 d1             	movzx  edx,cx
c0002b63:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0002b66:	e8 39 ee ff ff       	call   c00019a4 <st_word>
c0002b6b:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0002b6e:	75 0f                	jne    c0002b7f <st_clust.isra.1+0x25>
c0002b70:	c1 e9 10             	shr    ecx,0x10
c0002b73:	8d 43 14             	lea    eax,[ebx+0x14]
c0002b76:	89 ca                	mov    edx,ecx
c0002b78:	5b                   	pop    ebx
c0002b79:	5e                   	pop    esi
c0002b7a:	e9 25 ee ff ff       	jmp    c00019a4 <st_word>
c0002b7f:	5b                   	pop    ebx
c0002b80:	5e                   	pop    esi
c0002b81:	c3                   	ret    

c0002b82 <get_fat.isra.2>:
c0002b82:	b9 01 00 00 00       	mov    ecx,0x1
c0002b87:	83 fa 01             	cmp    edx,0x1
c0002b8a:	0f 86 f1 00 00 00    	jbe    c0002c81 <get_fat.isra.2+0xff>
c0002b90:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0002b93:	0f 83 e8 00 00 00    	jae    c0002c81 <get_fat.isra.2+0xff>
c0002b99:	55                   	push   ebp
c0002b9a:	57                   	push   edi
c0002b9b:	89 c7                	mov    edi,eax
c0002b9d:	56                   	push   esi
c0002b9e:	89 d6                	mov    esi,edx
c0002ba0:	53                   	push   ebx
c0002ba1:	83 ec 0c             	sub    esp,0xc
c0002ba4:	8a 00                	mov    al,BYTE PTR [eax]
c0002ba6:	3c 02                	cmp    al,0x2
c0002ba8:	74 78                	je     c0002c22 <get_fat.isra.2+0xa0>
c0002baa:	3c 03                	cmp    al,0x3
c0002bac:	0f 84 97 00 00 00    	je     c0002c49 <get_fat.isra.2+0xc7>
c0002bb2:	fe c8                	dec    al
c0002bb4:	0f 85 bd 00 00 00    	jne    c0002c77 <get_fat.isra.2+0xf5>
c0002bba:	89 d3                	mov    ebx,edx
c0002bbc:	89 f8                	mov    eax,edi
c0002bbe:	d1 eb                	shr    ebx,1
c0002bc0:	01 d3                	add    ebx,edx
c0002bc2:	89 da                	mov    edx,ebx
c0002bc4:	c1 ea 09             	shr    edx,0x9
c0002bc7:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002bca:	e8 49 f1 ff ff       	call   c0001d18 <move_window>
c0002bcf:	85 c0                	test   eax,eax
c0002bd1:	74 08                	je     c0002bdb <get_fat.isra.2+0x59>
c0002bd3:	83 c9 ff             	or     ecx,0xffffffff
c0002bd6:	e9 9c 00 00 00       	jmp    c0002c77 <get_fat.isra.2+0xf5>
c0002bdb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002bde:	89 f8                	mov    eax,edi
c0002be0:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002be6:	89 ea                	mov    edx,ebp
c0002be8:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0002bec:	c1 ea 09             	shr    edx,0x9
c0002bef:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002bf2:	e8 21 f1 ff ff       	call   c0001d18 <move_window>
c0002bf7:	85 c0                	test   eax,eax
c0002bf9:	75 d8                	jne    c0002bd3 <get_fat.isra.2+0x51>
c0002bfb:	0f b6 c3             	movzx  eax,bl
c0002bfe:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c04:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0002c09:	c1 e3 08             	shl    ebx,0x8
c0002c0c:	09 c3                	or     ebx,eax
c0002c0e:	89 d9                	mov    ecx,ebx
c0002c10:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002c16:	83 e6 01             	and    esi,0x1
c0002c19:	74 5c                	je     c0002c77 <get_fat.isra.2+0xf5>
c0002c1b:	89 d9                	mov    ecx,ebx
c0002c1d:	c1 e9 04             	shr    ecx,0x4
c0002c20:	eb 55                	jmp    c0002c77 <get_fat.isra.2+0xf5>
c0002c22:	c1 ea 08             	shr    edx,0x8
c0002c25:	89 f8                	mov    eax,edi
c0002c27:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002c2a:	e8 e9 f0 ff ff       	call   c0001d18 <move_window>
c0002c2f:	85 c0                	test   eax,eax
c0002c31:	75 a0                	jne    c0002bd3 <get_fat.isra.2+0x51>
c0002c33:	01 f6                	add    esi,esi
c0002c35:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002c3b:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0002c3f:	e8 3b ed ff ff       	call   c000197f <ld_word>
c0002c44:	0f b7 c8             	movzx  ecx,ax
c0002c47:	eb 2e                	jmp    c0002c77 <get_fat.isra.2+0xf5>
c0002c49:	c1 ea 07             	shr    edx,0x7
c0002c4c:	89 f8                	mov    eax,edi
c0002c4e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002c51:	e8 c2 f0 ff ff       	call   c0001d18 <move_window>
c0002c56:	85 c0                	test   eax,eax
c0002c58:	0f 85 75 ff ff ff    	jne    c0002bd3 <get_fat.isra.2+0x51>
c0002c5e:	c1 e6 02             	shl    esi,0x2
c0002c61:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002c67:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0002c6b:	e8 1c ed ff ff       	call   c000198c <ld_dword>
c0002c70:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002c75:	89 c1                	mov    ecx,eax
c0002c77:	83 c4 0c             	add    esp,0xc
c0002c7a:	89 c8                	mov    eax,ecx
c0002c7c:	5b                   	pop    ebx
c0002c7d:	5e                   	pop    esi
c0002c7e:	5f                   	pop    edi
c0002c7f:	5d                   	pop    ebp
c0002c80:	c3                   	ret    
c0002c81:	89 c8                	mov    eax,ecx
c0002c83:	c3                   	ret    

c0002c84 <dir_sdi>:
c0002c84:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0002c8a:	0f 87 b6 00 00 00    	ja     c0002d46 <dir_sdi+0xc2>
c0002c90:	55                   	push   ebp
c0002c91:	57                   	push   edi
c0002c92:	56                   	push   esi
c0002c93:	53                   	push   ebx
c0002c94:	89 d3                	mov    ebx,edx
c0002c96:	83 ec 1c             	sub    esp,0x1c
c0002c99:	f6 c2 1f             	test   dl,0x1f
c0002c9c:	74 0a                	je     c0002ca8 <dir_sdi+0x24>
c0002c9e:	b8 02 00 00 00       	mov    eax,0x2
c0002ca3:	e9 96 00 00 00       	jmp    c0002d3e <dir_sdi+0xba>
c0002ca8:	89 c6                	mov    esi,eax
c0002caa:	8b 38                	mov    edi,DWORD PTR [eax]
c0002cac:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0002caf:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0002cb2:	85 c9                	test   ecx,ecx
c0002cb4:	75 23                	jne    c0002cd9 <dir_sdi+0x55>
c0002cb6:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002cb9:	76 07                	jbe    c0002cc2 <dir_sdi+0x3e>
c0002cbb:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0002cbe:	85 c0                	test   eax,eax
c0002cc0:	75 15                	jne    c0002cd7 <dir_sdi+0x53>
c0002cc2:	89 da                	mov    edx,ebx
c0002cc4:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002cc8:	c1 ea 05             	shr    edx,0x5
c0002ccb:	39 c2                	cmp    edx,eax
c0002ccd:	73 cf                	jae    c0002c9e <dir_sdi+0x1a>
c0002ccf:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0002cd2:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0002cd5:	eb 3d                	jmp    c0002d14 <dir_sdi+0x90>
c0002cd7:	89 c1                	mov    ecx,eax
c0002cd9:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002cdd:	c1 e5 09             	shl    ebp,0x9
c0002ce0:	89 ca                	mov    edx,ecx
c0002ce2:	39 eb                	cmp    ebx,ebp
c0002ce4:	72 1c                	jb     c0002d02 <dir_sdi+0x7e>
c0002ce6:	8b 06                	mov    eax,DWORD PTR [esi]
c0002ce8:	e8 95 fe ff ff       	call   c0002b82 <get_fat.isra.2>
c0002ced:	89 c1                	mov    ecx,eax
c0002cef:	83 f8 ff             	cmp    eax,0xffffffff
c0002cf2:	74 45                	je     c0002d39 <dir_sdi+0xb5>
c0002cf4:	83 f8 01             	cmp    eax,0x1
c0002cf7:	76 a5                	jbe    c0002c9e <dir_sdi+0x1a>
c0002cf9:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0002cfc:	76 a0                	jbe    c0002c9e <dir_sdi+0x1a>
c0002cfe:	29 eb                	sub    ebx,ebp
c0002d00:	eb de                	jmp    c0002ce0 <dir_sdi+0x5c>
c0002d02:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d06:	89 f8                	mov    eax,edi
c0002d08:	e8 f9 ec ff ff       	call   c0001a06 <clst2sect>
c0002d0d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d11:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0002d14:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0002d17:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0002d1a:	85 d2                	test   edx,edx
c0002d1c:	74 80                	je     c0002c9e <dir_sdi+0x1a>
c0002d1e:	89 d8                	mov    eax,ebx
c0002d20:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002d26:	c1 e8 09             	shr    eax,0x9
c0002d29:	01 d0                	add    eax,edx
c0002d2b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0002d2e:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c0002d32:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002d35:	31 c0                	xor    eax,eax
c0002d37:	eb 05                	jmp    c0002d3e <dir_sdi+0xba>
c0002d39:	b8 01 00 00 00       	mov    eax,0x1
c0002d3e:	83 c4 1c             	add    esp,0x1c
c0002d41:	5b                   	pop    ebx
c0002d42:	5e                   	pop    esi
c0002d43:	5f                   	pop    edi
c0002d44:	5d                   	pop    ebp
c0002d45:	c3                   	ret    
c0002d46:	b8 02 00 00 00       	mov    eax,0x2
c0002d4b:	c3                   	ret    

c0002d4c <create_chain>:
c0002d4c:	55                   	push   ebp
c0002d4d:	89 c5                	mov    ebp,eax
c0002d4f:	57                   	push   edi
c0002d50:	89 d7                	mov    edi,edx
c0002d52:	56                   	push   esi
c0002d53:	53                   	push   ebx
c0002d54:	83 ec 1c             	sub    esp,0x1c
c0002d57:	85 d2                	test   edx,edx
c0002d59:	8b 30                	mov    esi,DWORD PTR [eax]
c0002d5b:	75 0e                	jne    c0002d6b <create_chain+0x1f>
c0002d5d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0002d60:	85 c9                	test   ecx,ecx
c0002d62:	74 34                	je     c0002d98 <create_chain+0x4c>
c0002d64:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0002d67:	77 34                	ja     c0002d9d <create_chain+0x51>
c0002d69:	eb 2d                	jmp    c0002d98 <create_chain+0x4c>
c0002d6b:	89 f0                	mov    eax,esi
c0002d6d:	e8 10 fe ff ff       	call   c0002b82 <get_fat.isra.2>
c0002d72:	89 c3                	mov    ebx,eax
c0002d74:	83 f8 01             	cmp    eax,0x1
c0002d77:	77 0a                	ja     c0002d83 <create_chain+0x37>
c0002d79:	bb 01 00 00 00       	mov    ebx,0x1
c0002d7e:	e9 f9 00 00 00       	jmp    c0002e7c <create_chain+0x130>
c0002d83:	83 f8 ff             	cmp    eax,0xffffffff
c0002d86:	0f 84 ed 00 00 00    	je     c0002e79 <create_chain+0x12d>
c0002d8c:	89 f9                	mov    ecx,edi
c0002d8e:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0002d91:	76 0a                	jbe    c0002d9d <create_chain+0x51>
c0002d93:	e9 e4 00 00 00       	jmp    c0002e7c <create_chain+0x130>
c0002d98:	b9 01 00 00 00       	mov    ecx,0x1
c0002d9d:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0002da1:	75 07                	jne    c0002daa <create_chain+0x5e>
c0002da3:	31 db                	xor    ebx,ebx
c0002da5:	e9 d2 00 00 00       	jmp    c0002e7c <create_chain+0x130>
c0002daa:	39 f9                	cmp    ecx,edi
c0002dac:	75 46                	jne    c0002df4 <create_chain+0xa8>
c0002dae:	8d 59 01             	lea    ebx,[ecx+0x1]
c0002db1:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0002db4:	77 05                	ja     c0002dbb <create_chain+0x6f>
c0002db6:	bb 02 00 00 00       	mov    ebx,0x2
c0002dbb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002dbf:	89 da                	mov    edx,ebx
c0002dc1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002dc4:	e8 b9 fd ff ff       	call   c0002b82 <get_fat.isra.2>
c0002dc9:	83 f8 01             	cmp    eax,0x1
c0002dcc:	74 ab                	je     c0002d79 <create_chain+0x2d>
c0002dce:	83 f8 ff             	cmp    eax,0xffffffff
c0002dd1:	0f 84 a2 00 00 00    	je     c0002e79 <create_chain+0x12d>
c0002dd7:	85 c0                	test   eax,eax
c0002dd9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002ddd:	74 11                	je     c0002df0 <create_chain+0xa4>
c0002ddf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0002de2:	83 f8 01             	cmp    eax,0x1
c0002de5:	76 0d                	jbe    c0002df4 <create_chain+0xa8>
c0002de7:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0002dea:	73 08                	jae    c0002df4 <create_chain+0xa8>
c0002dec:	89 c1                	mov    ecx,eax
c0002dee:	eb 04                	jmp    c0002df4 <create_chain+0xa8>
c0002df0:	85 db                	test   ebx,ebx
c0002df2:	75 3d                	jne    c0002e31 <create_chain+0xe5>
c0002df4:	89 cb                	mov    ebx,ecx
c0002df6:	43                   	inc    ebx
c0002df7:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0002dfa:	77 0a                	ja     c0002e06 <create_chain+0xba>
c0002dfc:	83 f9 01             	cmp    ecx,0x1
c0002dff:	76 a2                	jbe    c0002da3 <create_chain+0x57>
c0002e01:	bb 02 00 00 00       	mov    ebx,0x2
c0002e06:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002e0a:	89 da                	mov    edx,ebx
c0002e0c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002e0f:	e8 6e fd ff ff       	call   c0002b82 <get_fat.isra.2>
c0002e14:	85 c0                	test   eax,eax
c0002e16:	74 19                	je     c0002e31 <create_chain+0xe5>
c0002e18:	83 f8 01             	cmp    eax,0x1
c0002e1b:	0f 84 58 ff ff ff    	je     c0002d79 <create_chain+0x2d>
c0002e21:	40                   	inc    eax
c0002e22:	74 55                	je     c0002e79 <create_chain+0x12d>
c0002e24:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002e28:	39 cb                	cmp    ebx,ecx
c0002e2a:	75 ca                	jne    c0002df6 <create_chain+0xaa>
c0002e2c:	e9 72 ff ff ff       	jmp    c0002da3 <create_chain+0x57>
c0002e31:	83 c9 ff             	or     ecx,0xffffffff
c0002e34:	89 da                	mov    edx,ebx
c0002e36:	89 f0                	mov    eax,esi
c0002e38:	e8 30 f3 ff ff       	call   c000216d <put_fat>
c0002e3d:	85 c0                	test   eax,eax
c0002e3f:	75 31                	jne    c0002e72 <create_chain+0x126>
c0002e41:	85 ff                	test   edi,edi
c0002e43:	75 16                	jne    c0002e5b <create_chain+0x10f>
c0002e45:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0002e48:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0002e4b:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c0002e4e:	8d 57 fe             	lea    edx,[edi-0x2]
c0002e51:	39 d0                	cmp    eax,edx
c0002e53:	77 17                	ja     c0002e6c <create_chain+0x120>
c0002e55:	48                   	dec    eax
c0002e56:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002e59:	eb 11                	jmp    c0002e6c <create_chain+0x120>
c0002e5b:	89 d9                	mov    ecx,ebx
c0002e5d:	89 fa                	mov    edx,edi
c0002e5f:	89 f0                	mov    eax,esi
c0002e61:	e8 07 f3 ff ff       	call   c000216d <put_fat>
c0002e66:	85 c0                	test   eax,eax
c0002e68:	74 db                	je     c0002e45 <create_chain+0xf9>
c0002e6a:	eb 06                	jmp    c0002e72 <create_chain+0x126>
c0002e6c:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0002e70:	eb 0a                	jmp    c0002e7c <create_chain+0x130>
c0002e72:	48                   	dec    eax
c0002e73:	0f 85 00 ff ff ff    	jne    c0002d79 <create_chain+0x2d>
c0002e79:	83 cb ff             	or     ebx,0xffffffff
c0002e7c:	83 c4 1c             	add    esp,0x1c
c0002e7f:	89 d8                	mov    eax,ebx
c0002e81:	5b                   	pop    ebx
c0002e82:	5e                   	pop    esi
c0002e83:	5f                   	pop    edi
c0002e84:	5d                   	pop    ebp
c0002e85:	c3                   	ret    

c0002e86 <remove_chain>:
c0002e86:	55                   	push   ebp
c0002e87:	57                   	push   edi
c0002e88:	56                   	push   esi
c0002e89:	89 d6                	mov    esi,edx
c0002e8b:	53                   	push   ebx
c0002e8c:	83 ec 0c             	sub    esp,0xc
c0002e8f:	83 fa 01             	cmp    edx,0x1
c0002e92:	8b 18                	mov    ebx,DWORD PTR [eax]
c0002e94:	76 65                	jbe    c0002efb <remove_chain+0x75>
c0002e96:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0002e99:	76 60                	jbe    c0002efb <remove_chain+0x75>
c0002e9b:	89 c5                	mov    ebp,eax
c0002e9d:	89 ca                	mov    edx,ecx
c0002e9f:	85 c9                	test   ecx,ecx
c0002ea1:	74 0e                	je     c0002eb1 <remove_chain+0x2b>
c0002ea3:	83 c9 ff             	or     ecx,0xffffffff
c0002ea6:	89 d8                	mov    eax,ebx
c0002ea8:	e8 c0 f2 ff ff       	call   c000216d <put_fat>
c0002ead:	85 c0                	test   eax,eax
c0002eaf:	75 56                	jne    c0002f07 <remove_chain+0x81>
c0002eb1:	89 f2                	mov    edx,esi
c0002eb3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002eb6:	e8 c7 fc ff ff       	call   c0002b82 <get_fat.isra.2>
c0002ebb:	89 c7                	mov    edi,eax
c0002ebd:	85 c0                	test   eax,eax
c0002ebf:	75 04                	jne    c0002ec5 <remove_chain+0x3f>
c0002ec1:	31 c0                	xor    eax,eax
c0002ec3:	eb 42                	jmp    c0002f07 <remove_chain+0x81>
c0002ec5:	83 f8 01             	cmp    eax,0x1
c0002ec8:	74 31                	je     c0002efb <remove_chain+0x75>
c0002eca:	83 f8 ff             	cmp    eax,0xffffffff
c0002ecd:	74 33                	je     c0002f02 <remove_chain+0x7c>
c0002ecf:	31 c9                	xor    ecx,ecx
c0002ed1:	89 f2                	mov    edx,esi
c0002ed3:	89 d8                	mov    eax,ebx
c0002ed5:	e8 93 f2 ff ff       	call   c000216d <put_fat>
c0002eda:	85 c0                	test   eax,eax
c0002edc:	75 29                	jne    c0002f07 <remove_chain+0x81>
c0002ede:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0002ee1:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0002ee4:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002ee7:	39 c8                	cmp    eax,ecx
c0002ee9:	73 08                	jae    c0002ef3 <remove_chain+0x6d>
c0002eeb:	40                   	inc    eax
c0002eec:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0002ef0:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0002ef3:	89 fe                	mov    esi,edi
c0002ef5:	39 fa                	cmp    edx,edi
c0002ef7:	77 b8                	ja     c0002eb1 <remove_chain+0x2b>
c0002ef9:	eb c6                	jmp    c0002ec1 <remove_chain+0x3b>
c0002efb:	b8 02 00 00 00       	mov    eax,0x2
c0002f00:	eb 05                	jmp    c0002f07 <remove_chain+0x81>
c0002f02:	b8 01 00 00 00       	mov    eax,0x1
c0002f07:	83 c4 0c             	add    esp,0xc
c0002f0a:	5b                   	pop    ebx
c0002f0b:	5e                   	pop    esi
c0002f0c:	5f                   	pop    edi
c0002f0d:	5d                   	pop    ebp
c0002f0e:	c3                   	ret    

c0002f0f <dir_next>:
c0002f0f:	55                   	push   ebp
c0002f10:	57                   	push   edi
c0002f11:	56                   	push   esi
c0002f12:	53                   	push   ebx
c0002f13:	83 ec 1c             	sub    esp,0x1c
c0002f16:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0002f19:	8b 28                	mov    ebp,DWORD PTR [eax]
c0002f1b:	83 c7 20             	add    edi,0x20
c0002f1e:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c0002f24:	76 07                	jbe    c0002f2d <dir_next+0x1e>
c0002f26:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0002f2d:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0002f30:	b9 04 00 00 00       	mov    ecx,0x4
c0002f35:	85 f6                	test   esi,esi
c0002f37:	0f 84 cd 00 00 00    	je     c000300a <dir_next+0xfb>
c0002f3d:	89 c3                	mov    ebx,eax
c0002f3f:	89 d1                	mov    ecx,edx
c0002f41:	89 f8                	mov    eax,edi
c0002f43:	25 ff 01 00 00       	and    eax,0x1ff
c0002f48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f4c:	0f 85 a8 00 00 00    	jne    c0002ffa <dir_next+0xeb>
c0002f52:	46                   	inc    esi
c0002f53:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002f56:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0002f59:	85 d2                	test   edx,edx
c0002f5b:	75 22                	jne    c0002f7f <dir_next+0x70>
c0002f5d:	89 fa                	mov    edx,edi
c0002f5f:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0002f63:	c1 ea 05             	shr    edx,0x5
c0002f66:	39 c2                	cmp    edx,eax
c0002f68:	0f 82 8c 00 00 00    	jb     c0002ffa <dir_next+0xeb>
c0002f6e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0002f75:	b9 04 00 00 00       	mov    ecx,0x4
c0002f7a:	e9 8b 00 00 00       	jmp    c000300a <dir_next+0xfb>
c0002f7f:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002f83:	89 fe                	mov    esi,edi
c0002f85:	48                   	dec    eax
c0002f86:	c1 ee 09             	shr    esi,0x9
c0002f89:	85 f0                	test   eax,esi
c0002f8b:	75 6d                	jne    c0002ffa <dir_next+0xeb>
c0002f8d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002f91:	89 e8                	mov    eax,ebp
c0002f93:	e8 ea fb ff ff       	call   c0002b82 <get_fat.isra.2>
c0002f98:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f9c:	89 c6                	mov    esi,eax
c0002f9e:	83 f8 01             	cmp    eax,0x1
c0002fa1:	77 07                	ja     c0002faa <dir_next+0x9b>
c0002fa3:	b9 02 00 00 00       	mov    ecx,0x2
c0002fa8:	eb 60                	jmp    c000300a <dir_next+0xfb>
c0002faa:	83 f8 ff             	cmp    eax,0xffffffff
c0002fad:	75 07                	jne    c0002fb6 <dir_next+0xa7>
c0002faf:	b9 01 00 00 00       	mov    ecx,0x1
c0002fb4:	eb 54                	jmp    c000300a <dir_next+0xfb>
c0002fb6:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0002fb9:	77 30                	ja     c0002feb <dir_next+0xdc>
c0002fbb:	85 c9                	test   ecx,ecx
c0002fbd:	74 af                	je     c0002f6e <dir_next+0x5f>
c0002fbf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fc2:	89 d8                	mov    eax,ebx
c0002fc4:	e8 83 fd ff ff       	call   c0002d4c <create_chain>
c0002fc9:	b9 07 00 00 00       	mov    ecx,0x7
c0002fce:	89 c6                	mov    esi,eax
c0002fd0:	85 c0                	test   eax,eax
c0002fd2:	74 36                	je     c000300a <dir_next+0xfb>
c0002fd4:	83 f8 01             	cmp    eax,0x1
c0002fd7:	74 ca                	je     c0002fa3 <dir_next+0x94>
c0002fd9:	83 f8 ff             	cmp    eax,0xffffffff
c0002fdc:	74 d1                	je     c0002faf <dir_next+0xa0>
c0002fde:	89 c2                	mov    edx,eax
c0002fe0:	89 e8                	mov    eax,ebp
c0002fe2:	e8 d6 f2 ff ff       	call   c00022bd <dir_clear>
c0002fe7:	85 c0                	test   eax,eax
c0002fe9:	75 c4                	jne    c0002faf <dir_next+0xa0>
c0002feb:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0002fee:	89 f2                	mov    edx,esi
c0002ff0:	89 e8                	mov    eax,ebp
c0002ff2:	e8 0f ea ff ff       	call   c0001a06 <clst2sect>
c0002ff7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0002ffa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ffe:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003001:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003005:	31 c9                	xor    ecx,ecx
c0003007:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000300a:	83 c4 1c             	add    esp,0x1c
c000300d:	89 c8                	mov    eax,ecx
c000300f:	5b                   	pop    ebx
c0003010:	5e                   	pop    esi
c0003011:	5f                   	pop    edi
c0003012:	5d                   	pop    ebp
c0003013:	c3                   	ret    

c0003014 <dir_alloc>:
c0003014:	55                   	push   ebp
c0003015:	89 c5                	mov    ebp,eax
c0003017:	57                   	push   edi
c0003018:	89 d7                	mov    edi,edx
c000301a:	56                   	push   esi
c000301b:	31 d2                	xor    edx,edx
c000301d:	53                   	push   ebx
c000301e:	83 ec 0c             	sub    esp,0xc
c0003021:	8b 30                	mov    esi,DWORD PTR [eax]
c0003023:	e8 5c fc ff ff       	call   c0002c84 <dir_sdi>
c0003028:	85 c0                	test   eax,eax
c000302a:	75 37                	jne    c0003063 <dir_alloc+0x4f>
c000302c:	31 db                	xor    ebx,ebx
c000302e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003031:	89 f0                	mov    eax,esi
c0003033:	e8 e0 ec ff ff       	call   c0001d18 <move_window>
c0003038:	85 c0                	test   eax,eax
c000303a:	75 27                	jne    c0003063 <dir_alloc+0x4f>
c000303c:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c000303f:	8a 12                	mov    dl,BYTE PTR [edx]
c0003041:	84 d2                	test   dl,dl
c0003043:	74 05                	je     c000304a <dir_alloc+0x36>
c0003045:	80 fa e5             	cmp    dl,0xe5
c0003048:	75 07                	jne    c0003051 <dir_alloc+0x3d>
c000304a:	43                   	inc    ebx
c000304b:	39 fb                	cmp    ebx,edi
c000304d:	75 04                	jne    c0003053 <dir_alloc+0x3f>
c000304f:	eb 1c                	jmp    c000306d <dir_alloc+0x59>
c0003051:	31 db                	xor    ebx,ebx
c0003053:	ba 01 00 00 00       	mov    edx,0x1
c0003058:	89 e8                	mov    eax,ebp
c000305a:	e8 b0 fe ff ff       	call   c0002f0f <dir_next>
c000305f:	85 c0                	test   eax,eax
c0003061:	74 cb                	je     c000302e <dir_alloc+0x1a>
c0003063:	83 f8 04             	cmp    eax,0x4
c0003066:	75 05                	jne    c000306d <dir_alloc+0x59>
c0003068:	b8 07 00 00 00       	mov    eax,0x7
c000306d:	83 c4 0c             	add    esp,0xc
c0003070:	5b                   	pop    ebx
c0003071:	5e                   	pop    esi
c0003072:	5f                   	pop    edi
c0003073:	5d                   	pop    ebp
c0003074:	c3                   	ret    

c0003075 <dir_read>:
c0003075:	55                   	push   ebp
c0003076:	57                   	push   edi
c0003077:	bf ff ff ff ff       	mov    edi,0xffffffff
c000307c:	56                   	push   esi
c000307d:	be 04 00 00 00       	mov    esi,0x4
c0003082:	53                   	push   ebx
c0003083:	89 c3                	mov    ebx,eax
c0003085:	83 ec 1c             	sub    esp,0x1c
c0003088:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000308c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000308e:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003093:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003096:	85 d2                	test   edx,edx
c0003098:	0f 84 d8 00 00 00    	je     c0003176 <dir_read+0x101>
c000309e:	89 e8                	mov    eax,ebp
c00030a0:	e8 73 ec ff ff       	call   c0001d18 <move_window>
c00030a5:	89 c6                	mov    esi,eax
c00030a7:	85 c0                	test   eax,eax
c00030a9:	0f 85 d2 00 00 00    	jne    c0003181 <dir_read+0x10c>
c00030af:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00030b2:	8a 0a                	mov    cl,BYTE PTR [edx]
c00030b4:	84 c9                	test   cl,cl
c00030b6:	0f 84 c0 00 00 00    	je     c000317c <dir_read+0x107>
c00030bc:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c00030bf:	83 e0 3f             	and    eax,0x3f
c00030c2:	80 f9 2e             	cmp    cl,0x2e
c00030c5:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00030c9:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00030cc:	0f 84 8a 00 00 00    	je     c000315c <dir_read+0xe7>
c00030d2:	80 f9 e5             	cmp    cl,0xe5
c00030d5:	0f 84 81 00 00 00    	je     c000315c <dir_read+0xe7>
c00030db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030df:	83 e0 1f             	and    eax,0x1f
c00030e2:	83 f8 08             	cmp    eax,0x8
c00030e5:	0f 94 c0             	sete   al
c00030e8:	0f b6 c0             	movzx  eax,al
c00030eb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00030ef:	75 6b                	jne    c000315c <dir_read+0xe7>
c00030f1:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00030f6:	75 44                	jne    c000313c <dir_read+0xc7>
c00030f8:	f6 c1 40             	test   cl,0x40
c00030fb:	74 12                	je     c000310f <dir_read+0x9a>
c00030fd:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003100:	83 e1 bf             	and    ecx,0xffffffbf
c0003103:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003107:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000310a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000310d:	eb 06                	jmp    c0003115 <dir_read+0xa0>
c000310f:	89 f8                	mov    eax,edi
c0003111:	38 c8                	cmp    al,cl
c0003113:	75 47                	jne    c000315c <dir_read+0xe7>
c0003115:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003119:	bf ff ff ff ff       	mov    edi,0xffffffff
c000311e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003121:	75 3e                	jne    c0003161 <dir_read+0xec>
c0003123:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003127:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000312a:	e8 26 e9 ff ff       	call   c0001a55 <pick_lfn>
c000312f:	85 c0                	test   eax,eax
c0003131:	74 2e                	je     c0003161 <dir_read+0xec>
c0003133:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003137:	8d 79 ff             	lea    edi,[ecx-0x1]
c000313a:	eb 25                	jmp    c0003161 <dir_read+0xec>
c000313c:	89 f8                	mov    eax,edi
c000313e:	84 c0                	test   al,al
c0003140:	75 11                	jne    c0003153 <dir_read+0xde>
c0003142:	89 d0                	mov    eax,edx
c0003144:	e8 c6 ea ff ff       	call   c0001c0f <sum_sfn>
c0003149:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c000314d:	75 04                	jne    c0003153 <dir_read+0xde>
c000314f:	31 f6                	xor    esi,esi
c0003151:	eb 35                	jmp    c0003188 <dir_read+0x113>
c0003153:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000315a:	eb 2c                	jmp    c0003188 <dir_read+0x113>
c000315c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003161:	31 d2                	xor    edx,edx
c0003163:	89 d8                	mov    eax,ebx
c0003165:	e8 a5 fd ff ff       	call   c0002f0f <dir_next>
c000316a:	89 c6                	mov    esi,eax
c000316c:	85 c0                	test   eax,eax
c000316e:	0f 84 1f ff ff ff    	je     c0003093 <dir_read+0x1e>
c0003174:	eb 0b                	jmp    c0003181 <dir_read+0x10c>
c0003176:	85 f6                	test   esi,esi
c0003178:	74 d5                	je     c000314f <dir_read+0xda>
c000317a:	eb 05                	jmp    c0003181 <dir_read+0x10c>
c000317c:	be 04 00 00 00       	mov    esi,0x4
c0003181:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003188:	83 c4 1c             	add    esp,0x1c
c000318b:	89 f0                	mov    eax,esi
c000318d:	5b                   	pop    ebx
c000318e:	5e                   	pop    esi
c000318f:	5f                   	pop    edi
c0003190:	5d                   	pop    ebp
c0003191:	c3                   	ret    

c0003192 <dir_remove>:
c0003192:	57                   	push   edi
c0003193:	56                   	push   esi
c0003194:	53                   	push   ebx
c0003195:	89 c3                	mov    ebx,eax
c0003197:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000319a:	8b 30                	mov    esi,DWORD PTR [eax]
c000319c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000319f:	83 fa ff             	cmp    edx,0xffffffff
c00031a2:	74 09                	je     c00031ad <dir_remove+0x1b>
c00031a4:	e8 db fa ff ff       	call   c0002c84 <dir_sdi>
c00031a9:	85 c0                	test   eax,eax
c00031ab:	75 34                	jne    c00031e1 <dir_remove+0x4f>
c00031ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00031b0:	89 f0                	mov    eax,esi
c00031b2:	e8 61 eb ff ff       	call   c0001d18 <move_window>
c00031b7:	85 c0                	test   eax,eax
c00031b9:	75 1c                	jne    c00031d7 <dir_remove+0x45>
c00031bb:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00031be:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00031c1:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00031c5:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00031c8:	73 17                	jae    c00031e1 <dir_remove+0x4f>
c00031ca:	31 d2                	xor    edx,edx
c00031cc:	89 d8                	mov    eax,ebx
c00031ce:	e8 3c fd ff ff       	call   c0002f0f <dir_next>
c00031d3:	85 c0                	test   eax,eax
c00031d5:	74 d6                	je     c00031ad <dir_remove+0x1b>
c00031d7:	83 f8 04             	cmp    eax,0x4
c00031da:	75 05                	jne    c00031e1 <dir_remove+0x4f>
c00031dc:	b8 02 00 00 00       	mov    eax,0x2
c00031e1:	5b                   	pop    ebx
c00031e2:	5e                   	pop    esi
c00031e3:	5f                   	pop    edi
c00031e4:	c3                   	ret    

c00031e5 <dir_find>:
c00031e5:	55                   	push   ebp
c00031e6:	31 d2                	xor    edx,edx
c00031e8:	57                   	push   edi
c00031e9:	56                   	push   esi
c00031ea:	53                   	push   ebx
c00031eb:	89 c3                	mov    ebx,eax
c00031ed:	83 ec 1c             	sub    esp,0x1c
c00031f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00031f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031f6:	89 d8                	mov    eax,ebx
c00031f8:	e8 87 fa ff ff       	call   c0002c84 <dir_sdi>
c00031fd:	89 c6                	mov    esi,eax
c00031ff:	85 c0                	test   eax,eax
c0003201:	0f 85 02 01 00 00    	jne    c0003309 <dir_find+0x124>
c0003207:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000320e:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c0003213:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003218:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000321b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000321f:	e8 f4 ea ff ff       	call   c0001d18 <move_window>
c0003224:	89 c6                	mov    esi,eax
c0003226:	85 c0                	test   eax,eax
c0003228:	0f 85 db 00 00 00    	jne    c0003309 <dir_find+0x124>
c000322e:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003231:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003234:	84 c9                	test   cl,cl
c0003236:	0f 84 c8 00 00 00    	je     c0003304 <dir_find+0x11f>
c000323c:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000323f:	88 d0                	mov    al,dl
c0003241:	83 e0 3f             	and    eax,0x3f
c0003244:	80 f9 e5             	cmp    cl,0xe5
c0003247:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000324a:	0f 84 93 00 00 00    	je     c00032e3 <dir_find+0xfe>
c0003250:	80 e2 08             	and    dl,0x8
c0003253:	74 0a                	je     c000325f <dir_find+0x7a>
c0003255:	3c 0f                	cmp    al,0xf
c0003257:	0f 85 86 00 00 00    	jne    c00032e3 <dir_find+0xfe>
c000325d:	eb 04                	jmp    c0003263 <dir_find+0x7e>
c000325f:	3c 0f                	cmp    al,0xf
c0003261:	75 54                	jne    c00032b7 <dir_find+0xd2>
c0003263:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003267:	0f 85 82 00 00 00    	jne    c00032ef <dir_find+0x10a>
c000326d:	f6 c1 40             	test   cl,0x40
c0003270:	74 12                	je     c0003284 <dir_find+0x9f>
c0003272:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003275:	83 e1 bf             	and    ecx,0xffffffbf
c0003278:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000327c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000327f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003282:	eb 06                	jmp    c000328a <dir_find+0xa5>
c0003284:	89 f8                	mov    eax,edi
c0003286:	38 c8                	cmp    al,cl
c0003288:	75 60                	jne    c00032ea <dir_find+0x105>
c000328a:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000328e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003293:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003296:	75 57                	jne    c00032ef <dir_find+0x10a>
c0003298:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000329c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00032a0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00032a3:	89 ea                	mov    edx,ebp
c00032a5:	e8 6c f5 ff ff       	call   c0002816 <cmp_lfn>
c00032aa:	85 c0                	test   eax,eax
c00032ac:	74 41                	je     c00032ef <dir_find+0x10a>
c00032ae:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00032b2:	8d 79 ff             	lea    edi,[ecx-0x1]
c00032b5:	eb 38                	jmp    c00032ef <dir_find+0x10a>
c00032b7:	89 f8                	mov    eax,edi
c00032b9:	84 c0                	test   al,al
c00032bb:	75 0d                	jne    c00032ca <dir_find+0xe5>
c00032bd:	89 e8                	mov    eax,ebp
c00032bf:	e8 4b e9 ff ff       	call   c0001c0f <sum_sfn>
c00032c4:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c00032c8:	74 3f                	je     c0003309 <dir_find+0x124>
c00032ca:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00032ce:	75 13                	jne    c00032e3 <dir_find+0xfe>
c00032d0:	8d 53 20             	lea    edx,[ebx+0x20]
c00032d3:	b9 0b 00 00 00       	mov    ecx,0xb
c00032d8:	89 e8                	mov    eax,ebp
c00032da:	e8 ec e6 ff ff       	call   c00019cb <mem_cmp>
c00032df:	85 c0                	test   eax,eax
c00032e1:	74 26                	je     c0003309 <dir_find+0x124>
c00032e3:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00032ea:	bf ff ff ff ff       	mov    edi,0xffffffff
c00032ef:	31 d2                	xor    edx,edx
c00032f1:	89 d8                	mov    eax,ebx
c00032f3:	e8 17 fc ff ff       	call   c0002f0f <dir_next>
c00032f8:	89 c6                	mov    esi,eax
c00032fa:	85 c0                	test   eax,eax
c00032fc:	0f 84 16 ff ff ff    	je     c0003218 <dir_find+0x33>
c0003302:	eb 05                	jmp    c0003309 <dir_find+0x124>
c0003304:	be 04 00 00 00       	mov    esi,0x4
c0003309:	83 c4 1c             	add    esp,0x1c
c000330c:	89 f0                	mov    eax,esi
c000330e:	5b                   	pop    ebx
c000330f:	5e                   	pop    esi
c0003310:	5f                   	pop    edi
c0003311:	5d                   	pop    ebp
c0003312:	c3                   	ret    

c0003313 <follow_path>:
c0003313:	56                   	push   esi
c0003314:	53                   	push   ebx
c0003315:	89 c3                	mov    ebx,eax
c0003317:	83 ec 14             	sub    esp,0x14
c000331a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000331e:	8b 30                	mov    esi,DWORD PTR [eax]
c0003320:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003324:	8a 10                	mov    dl,BYTE PTR [eax]
c0003326:	80 fa 5c             	cmp    dl,0x5c
c0003329:	75 07                	jne    c0003332 <follow_path+0x1f>
c000332b:	40                   	inc    eax
c000332c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003330:	eb ee                	jmp    c0003320 <follow_path+0xd>
c0003332:	80 fa 2f             	cmp    dl,0x2f
c0003335:	74 f4                	je     c000332b <follow_path+0x18>
c0003337:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000333e:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003341:	77 3e                	ja     c0003381 <follow_path+0x6e>
c0003343:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003347:	31 d2                	xor    edx,edx
c0003349:	89 d8                	mov    eax,ebx
c000334b:	e8 34 f9 ff ff       	call   c0002c84 <dir_sdi>
c0003350:	eb 4f                	jmp    c00033a1 <follow_path+0x8e>
c0003352:	89 d8                	mov    eax,ebx
c0003354:	e8 8c fe ff ff       	call   c00031e5 <dir_find>
c0003359:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c000335c:	85 c0                	test   eax,eax
c000335e:	75 32                	jne    c0003392 <follow_path+0x7f>
c0003360:	80 e2 04             	and    dl,0x4
c0003363:	75 3c                	jne    c00033a1 <follow_path+0x8e>
c0003365:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003369:	74 31                	je     c000339c <follow_path+0x89>
c000336b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000336e:	25 ff 01 00 00       	and    eax,0x1ff
c0003373:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003377:	8a 06                	mov    al,BYTE PTR [esi]
c0003379:	e8 b3 f7 ff ff       	call   c0002b31 <ld_clust.isra.0>
c000337e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003381:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003385:	89 d8                	mov    eax,ebx
c0003387:	e8 ae f1 ff ff       	call   c000253a <create_name>
c000338c:	85 c0                	test   eax,eax
c000338e:	74 c2                	je     c0003352 <follow_path+0x3f>
c0003390:	eb 0f                	jmp    c00033a1 <follow_path+0x8e>
c0003392:	83 f8 04             	cmp    eax,0x4
c0003395:	75 0a                	jne    c00033a1 <follow_path+0x8e>
c0003397:	80 e2 04             	and    dl,0x4
c000339a:	75 05                	jne    c00033a1 <follow_path+0x8e>
c000339c:	b8 05 00 00 00       	mov    eax,0x5
c00033a1:	83 c4 14             	add    esp,0x14
c00033a4:	5b                   	pop    ebx
c00033a5:	5e                   	pop    esi
c00033a6:	c3                   	ret    

c00033a7 <dir_register>:
c00033a7:	55                   	push   ebp
c00033a8:	57                   	push   edi
c00033a9:	56                   	push   esi
c00033aa:	be 06 00 00 00       	mov    esi,0x6
c00033af:	53                   	push   ebx
c00033b0:	83 ec 2c             	sub    esp,0x2c
c00033b3:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c00033b7:	0f 85 66 01 00 00    	jne    c0003523 <dir_register+0x17c>
c00033bd:	8b 38                	mov    edi,DWORD PTR [eax]
c00033bf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00033c7:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c00033ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033ce:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c00033d3:	74 06                	je     c00033db <dir_register+0x34>
c00033d5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00033d9:	eb ef                	jmp    c00033ca <dir_register+0x23>
c00033db:	89 c3                	mov    ebx,eax
c00033dd:	b9 0c 00 00 00       	mov    ecx,0xc
c00033e2:	8d 40 20             	lea    eax,[eax+0x20]
c00033e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033e9:	89 c2                	mov    edx,eax
c00033eb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00033ef:	e8 b7 e5 ff ff       	call   c00019ab <mem_cpy>
c00033f4:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00033f9:	74 48                	je     c0003443 <dir_register+0x9c>
c00033fb:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c00033ff:	bd 01 00 00 00       	mov    ebp,0x1
c0003404:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003407:	55                   	push   ebp
c0003408:	8d 54 24 18          	lea    edx,[esp+0x18]
c000340c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003410:	e8 3e e7 ff ff       	call   c0001b53 <gen_numname>
c0003415:	58                   	pop    eax
c0003416:	89 d8                	mov    eax,ebx
c0003418:	e8 c8 fd ff ff       	call   c00031e5 <dir_find>
c000341d:	89 c6                	mov    esi,eax
c000341f:	85 c0                	test   eax,eax
c0003421:	75 10                	jne    c0003433 <dir_register+0x8c>
c0003423:	45                   	inc    ebp
c0003424:	83 fd 64             	cmp    ebp,0x64
c0003427:	75 db                	jne    c0003404 <dir_register+0x5d>
c0003429:	be 07 00 00 00       	mov    esi,0x7
c000342e:	e9 f0 00 00 00       	jmp    c0003523 <dir_register+0x17c>
c0003433:	83 f8 04             	cmp    eax,0x4
c0003436:	0f 85 e7 00 00 00    	jne    c0003523 <dir_register+0x17c>
c000343c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003440:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003443:	bd 01 00 00 00       	mov    ebp,0x1
c0003448:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000344d:	74 13                	je     c0003462 <dir_register+0xbb>
c000344f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003453:	b9 0d 00 00 00       	mov    ecx,0xd
c0003458:	83 c0 0c             	add    eax,0xc
c000345b:	31 d2                	xor    edx,edx
c000345d:	f7 f1                	div    ecx
c000345f:	8d 68 01             	lea    ebp,[eax+0x1]
c0003462:	89 ea                	mov    edx,ebp
c0003464:	89 d8                	mov    eax,ebx
c0003466:	e8 a9 fb ff ff       	call   c0003014 <dir_alloc>
c000346b:	89 c6                	mov    esi,eax
c000346d:	85 c0                	test   eax,eax
c000346f:	0f 85 ae 00 00 00    	jne    c0003523 <dir_register+0x17c>
c0003475:	4d                   	dec    ebp
c0003476:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000347a:	74 67                	je     c00034e3 <dir_register+0x13c>
c000347c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000347f:	89 e8                	mov    eax,ebp
c0003481:	c1 e0 05             	shl    eax,0x5
c0003484:	29 c2                	sub    edx,eax
c0003486:	89 d8                	mov    eax,ebx
c0003488:	e8 f7 f7 ff ff       	call   c0002c84 <dir_sdi>
c000348d:	89 c6                	mov    esi,eax
c000348f:	85 c0                	test   eax,eax
c0003491:	0f 85 8c 00 00 00    	jne    c0003523 <dir_register+0x17c>
c0003497:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000349b:	e8 6f e7 ff ff       	call   c0001c0f <sum_sfn>
c00034a0:	0f b6 e8             	movzx  ebp,al
c00034a3:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00034a6:	89 f8                	mov    eax,edi
c00034a8:	e8 6b e8 ff ff       	call   c0001d18 <move_window>
c00034ad:	89 c6                	mov    esi,eax
c00034af:	85 c0                	test   eax,eax
c00034b1:	75 70                	jne    c0003523 <dir_register+0x17c>
c00034b3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00034b8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00034bb:	83 ec 0c             	sub    esp,0xc
c00034be:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00034c1:	55                   	push   ebp
c00034c2:	e8 08 e6 ff ff       	call   c0001acf <put_lfn>
c00034c7:	31 d2                	xor    edx,edx
c00034c9:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c00034cd:	89 d8                	mov    eax,ebx
c00034cf:	e8 3b fa ff ff       	call   c0002f0f <dir_next>
c00034d4:	83 c4 10             	add    esp,0x10
c00034d7:	89 c6                	mov    esi,eax
c00034d9:	85 c0                	test   eax,eax
c00034db:	75 46                	jne    c0003523 <dir_register+0x17c>
c00034dd:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00034e1:	75 c0                	jne    c00034a3 <dir_register+0xfc>
c00034e3:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00034e6:	89 f8                	mov    eax,edi
c00034e8:	e8 2b e8 ff ff       	call   c0001d18 <move_window>
c00034ed:	89 c6                	mov    esi,eax
c00034ef:	85 c0                	test   eax,eax
c00034f1:	75 30                	jne    c0003523 <dir_register+0x17c>
c00034f3:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00034f6:	b9 20 00 00 00       	mov    ecx,0x20
c00034fb:	31 d2                	xor    edx,edx
c00034fd:	e8 be e4 ff ff       	call   c00019c0 <mem_set>
c0003502:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003505:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003509:	b9 0b 00 00 00       	mov    ecx,0xb
c000350e:	e8 98 e4 ff ff       	call   c00019ab <mem_cpy>
c0003513:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003516:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003519:	83 e0 18             	and    eax,0x18
c000351c:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000351f:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003523:	83 c4 2c             	add    esp,0x2c
c0003526:	89 f0                	mov    eax,esi
c0003528:	5b                   	pop    ebx
c0003529:	5e                   	pop    esi
c000352a:	5f                   	pop    edi
c000352b:	5d                   	pop    ebp
c000352c:	c3                   	ret    

c000352d <f_mount>:
c000352d:	53                   	push   ebx
c000352e:	83 ec 18             	sub    esp,0x18
c0003531:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003535:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003539:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000353d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003541:	e8 db e6 ff ff       	call   c0001c21 <get_ldnumber>
c0003546:	89 c2                	mov    edx,eax
c0003548:	b8 0b 00 00 00       	mov    eax,0xb
c000354d:	85 d2                	test   edx,edx
c000354f:	78 39                	js     c000358a <f_mount+0x5d>
c0003551:	8b 04 95 00 03 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfd00]
c0003558:	85 c0                	test   eax,eax
c000355a:	74 03                	je     c000355f <f_mount+0x32>
c000355c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000355f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003563:	85 c0                	test   eax,eax
c0003565:	74 03                	je     c000356a <f_mount+0x3d>
c0003567:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000356a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000356e:	89 04 95 00 03 02 c0 	mov    DWORD PTR [edx*4-0x3ffdfd00],eax
c0003575:	31 c0                	xor    eax,eax
c0003577:	84 db                	test   bl,bl
c0003579:	74 0f                	je     c000358a <f_mount+0x5d>
c000357b:	31 c9                	xor    ecx,ecx
c000357d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003581:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003585:	e8 e1 e8 ff ff       	call   c0001e6b <mount_volume>
c000358a:	83 c4 18             	add    esp,0x18
c000358d:	5b                   	pop    ebx
c000358e:	c3                   	ret    

c000358f <f_open>:
c000358f:	55                   	push   ebp
c0003590:	57                   	push   edi
c0003591:	bf 09 00 00 00       	mov    edi,0x9
c0003596:	56                   	push   esi
c0003597:	53                   	push   ebx
c0003598:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000359e:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00035a5:	8b ac 24 78 02 00 00 	mov    ebp,DWORD PTR [esp+0x278]
c00035ac:	85 db                	test   ebx,ebx
c00035ae:	0f 84 87 02 00 00    	je     c000383b <f_open+0x2ac>
c00035b4:	89 ee                	mov    esi,ebp
c00035b6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00035ba:	83 e6 3f             	and    esi,0x3f
c00035bd:	89 f0                	mov    eax,esi
c00035bf:	0f b6 c8             	movzx  ecx,al
c00035c2:	8d 84 24 74 02 00 00 	lea    eax,[esp+0x274]
c00035c9:	e8 9d e8 ff ff       	call   c0001e6b <mount_volume>
c00035ce:	89 c7                	mov    edi,eax
c00035d0:	85 c0                	test   eax,eax
c00035d2:	0f 85 5b 02 00 00    	jne    c0003833 <f_open+0x2a4>
c00035d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00035dc:	8d 54 24 50          	lea    edx,[esp+0x50]
c00035e0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00035e4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00035e7:	8b 94 24 74 02 00 00 	mov    edx,DWORD PTR [esp+0x274]
c00035ee:	8d 44 24 20          	lea    eax,[esp+0x20]
c00035f2:	e8 1c fd ff ff       	call   c0003313 <follow_path>
c00035f7:	85 c0                	test   eax,eax
c00035f9:	75 0c                	jne    c0003607 <f_open+0x78>
c00035fb:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003600:	79 05                	jns    c0003607 <f_open+0x78>
c0003602:	b8 06 00 00 00       	mov    eax,0x6
c0003607:	f7 c5 1c 00 00 00    	test   ebp,0x1c
c000360d:	0f 84 d9 00 00 00    	je     c00036ec <f_open+0x15d>
c0003613:	85 c0                	test   eax,eax
c0003615:	74 1e                	je     c0003635 <f_open+0xa6>
c0003617:	83 f8 04             	cmp    eax,0x4
c000361a:	0f 85 13 02 00 00    	jne    c0003833 <f_open+0x2a4>
c0003620:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003624:	83 ce 08             	or     esi,0x8
c0003627:	e8 7b fd ff ff       	call   c00033a7 <dir_register>
c000362c:	85 c0                	test   eax,eax
c000362e:	74 25                	je     c0003655 <f_open+0xc6>
c0003630:	e9 fe 01 00 00       	jmp    c0003833 <f_open+0x2a4>
c0003635:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c000363a:	0f 85 ee 01 00 00    	jne    c000382e <f_open+0x29f>
c0003640:	f7 c5 04 00 00 00    	test   ebp,0x4
c0003646:	0f 85 d4 01 00 00    	jne    c0003820 <f_open+0x291>
c000364c:	83 e5 08             	and    ebp,0x8
c000364f:	0f 84 b8 00 00 00    	je     c000370d <f_open+0x17e>
c0003655:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003659:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000365d:	89 ca                	mov    edx,ecx
c000365f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003663:	8a 00                	mov    al,BYTE PTR [eax]
c0003665:	e8 c7 f4 ff ff       	call   c0002b31 <ld_clust.isra.0>
c000366a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000366e:	89 c5                	mov    ebp,eax
c0003670:	ba 00 00 21 50       	mov    edx,0x50210000
c0003675:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003678:	e8 2b e3 ff ff       	call   c00019a8 <st_dword>
c000367d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003681:	31 c9                	xor    ecx,ecx
c0003683:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003687:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000368b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000368f:	e8 c6 f4 ff ff       	call   c0002b5a <st_clust.isra.1>
c0003694:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003698:	31 d2                	xor    edx,edx
c000369a:	83 c0 1c             	add    eax,0x1c
c000369d:	e8 06 e3 ff ff       	call   c00019a8 <st_dword>
c00036a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00036a6:	85 ed                	test   ebp,ebp
c00036a8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00036ac:	74 5f                	je     c000370d <f_open+0x17e>
c00036ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00036b2:	31 c9                	xor    ecx,ecx
c00036b4:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00036b7:	89 ea                	mov    edx,ebp
c00036b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00036bd:	8d 44 24 20          	lea    eax,[esp+0x20]
c00036c1:	e8 c0 f7 ff ff       	call   c0002e86 <remove_chain>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	0f 85 65 01 00 00    	jne    c0003833 <f_open+0x2a4>
c00036ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00036d2:	4d                   	dec    ebp
c00036d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00036d7:	e8 3c e6 ff ff       	call   c0001d18 <move_window>
c00036dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00036e0:	85 c0                	test   eax,eax
c00036e2:	89 6a 10             	mov    DWORD PTR [edx+0x10],ebp
c00036e5:	74 26                	je     c000370d <f_open+0x17e>
c00036e7:	e9 47 01 00 00       	jmp    c0003833 <f_open+0x2a4>
c00036ec:	85 c0                	test   eax,eax
c00036ee:	0f 85 3f 01 00 00    	jne    c0003833 <f_open+0x2a4>
c00036f4:	8a 44 24 26          	mov    al,BYTE PTR [esp+0x26]
c00036f8:	a8 10                	test   al,0x10
c00036fa:	0f 85 27 01 00 00    	jne    c0003827 <f_open+0x298>
c0003700:	83 e5 02             	and    ebp,0x2
c0003703:	74 08                	je     c000370d <f_open+0x17e>
c0003705:	a8 01                	test   al,0x1
c0003707:	0f 85 21 01 00 00    	jne    c000382e <f_open+0x29f>
c000370d:	f7 c6 08 00 00 00    	test   esi,0x8
c0003713:	74 03                	je     c0003718 <f_open+0x189>
c0003715:	83 ce 40             	or     esi,0x40
c0003718:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000371c:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003720:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003723:	89 ea                	mov    edx,ebp
c0003725:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003729:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000372c:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000372f:	8a 01                	mov    al,BYTE PTR [ecx]
c0003731:	e8 fb f3 ff ff       	call   c0002b31 <ld_clust.isra.0>
c0003736:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003739:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000373c:	e8 4b e2 ff ff       	call   c000198c <ld_dword>
c0003741:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003745:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003748:	89 0b                	mov    DWORD PTR [ebx],ecx
c000374a:	c7 43 28 00 00 00 00 	mov    DWORD PTR [ebx+0x28],0x0
c0003751:	31 d2                	xor    edx,edx
c0003753:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003757:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000375b:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000375f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003766:	89 f0                	mov    eax,esi
c0003768:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000376f:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003772:	b9 00 02 00 00       	mov    ecx,0x200
c0003777:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000377a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000377e:	e8 3d e2 ff ff       	call   c00019c0 <mem_set>
c0003783:	83 e6 20             	and    esi,0x20
c0003786:	0f 84 af 00 00 00    	je     c000383b <f_open+0x2ac>
c000378c:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000378f:	85 ed                	test   ebp,ebp
c0003791:	0f 84 a4 00 00 00    	je     c000383b <f_open+0x2ac>
c0003797:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c000379a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000379e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00037a1:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c00037a5:	c1 e6 09             	shl    esi,0x9
c00037a8:	39 ee                	cmp    esi,ebp
c00037aa:	73 1c                	jae    c00037c8 <f_open+0x239>
c00037ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00037ae:	29 f5                	sub    ebp,esi
c00037b0:	e8 cd f3 ff ff       	call   c0002b82 <get_fat.isra.2>
c00037b5:	89 c2                	mov    edx,eax
c00037b7:	83 f8 01             	cmp    eax,0x1
c00037ba:	76 10                	jbe    c00037cc <f_open+0x23d>
c00037bc:	83 f8 ff             	cmp    eax,0xffffffff
c00037bf:	75 e7                	jne    c00037a8 <f_open+0x219>
c00037c1:	b8 01 00 00 00       	mov    eax,0x1
c00037c6:	eb 09                	jmp    c00037d1 <f_open+0x242>
c00037c8:	31 c0                	xor    eax,eax
c00037ca:	eb 05                	jmp    c00037d1 <f_open+0x242>
c00037cc:	b8 02 00 00 00       	mov    eax,0x2
c00037d1:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00037d4:	85 c0                	test   eax,eax
c00037d6:	75 5b                	jne    c0003833 <f_open+0x2a4>
c00037d8:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c00037de:	74 5b                	je     c000383b <f_open+0x2ac>
c00037e0:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00037e4:	89 f0                	mov    eax,esi
c00037e6:	e8 1b e2 ff ff       	call   c0001a06 <clst2sect>
c00037eb:	89 c2                	mov    edx,eax
c00037ed:	b8 02 00 00 00       	mov    eax,0x2
c00037f2:	85 d2                	test   edx,edx
c00037f4:	74 3d                	je     c0003833 <f_open+0x2a4>
c00037f6:	89 e9                	mov    ecx,ebp
c00037f8:	c1 e9 09             	shr    ecx,0x9
c00037fb:	8d 04 11             	lea    eax,[ecx+edx*1]
c00037fe:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003801:	6a 01                	push   0x1
c0003803:	50                   	push   eax
c0003804:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003808:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000380c:	50                   	push   eax
c000380d:	e8 22 e1 ff ff       	call   c0001934 <disk_read>
c0003812:	83 c4 10             	add    esp,0x10
c0003815:	85 c0                	test   eax,eax
c0003817:	74 22                	je     c000383b <f_open+0x2ac>
c0003819:	b8 01 00 00 00       	mov    eax,0x1
c000381e:	eb 13                	jmp    c0003833 <f_open+0x2a4>
c0003820:	b8 08 00 00 00       	mov    eax,0x8
c0003825:	eb 0c                	jmp    c0003833 <f_open+0x2a4>
c0003827:	b8 04 00 00 00       	mov    eax,0x4
c000382c:	eb 05                	jmp    c0003833 <f_open+0x2a4>
c000382e:	b8 07 00 00 00       	mov    eax,0x7
c0003833:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003839:	89 c7                	mov    edi,eax
c000383b:	81 c4 5c 02 00 00    	add    esp,0x25c
c0003841:	89 f8                	mov    eax,edi
c0003843:	5b                   	pop    ebx
c0003844:	5e                   	pop    esi
c0003845:	5f                   	pop    edi
c0003846:	5d                   	pop    ebp
c0003847:	c3                   	ret    

c0003848 <f_read>:
c0003848:	55                   	push   ebp
c0003849:	57                   	push   edi
c000384a:	56                   	push   esi
c000384b:	53                   	push   ebx
c000384c:	83 ec 2c             	sub    esp,0x2c
c000384f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003853:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003857:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000385d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003861:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003865:	89 d8                	mov    eax,ebx
c0003867:	e8 02 e4 ff ff       	call   c0001c6e <validate>
c000386c:	89 c5                	mov    ebp,eax
c000386e:	85 c0                	test   eax,eax
c0003870:	0f 85 d6 01 00 00    	jne    c0003a4c <f_read+0x204>
c0003876:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000387a:	85 ed                	test   ebp,ebp
c000387c:	0f 85 ca 01 00 00    	jne    c0003a4c <f_read+0x204>
c0003882:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003886:	0f 84 bb 01 00 00    	je     c0003a47 <f_read+0x1ff>
c000388c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000388f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003892:	89 c7                	mov    edi,eax
c0003894:	39 f0                	cmp    eax,esi
c0003896:	0f 86 ad 00 00 00    	jbe    c0003949 <f_read+0x101>
c000389c:	89 f7                	mov    edi,esi
c000389e:	e9 a6 00 00 00       	jmp    c0003949 <f_read+0x101>
c00038a3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00038a6:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c00038ac:	0f 85 6a 01 00 00    	jne    c0003a1c <f_read+0x1d4>
c00038b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00038b6:	89 d1                	mov    ecx,edx
c00038b8:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00038bc:	c1 e9 09             	shr    ecx,0x9
c00038bf:	48                   	dec    eax
c00038c0:	21 c8                	and    eax,ecx
c00038c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00038c6:	0f 84 8a 00 00 00    	je     c0003956 <f_read+0x10e>
c00038cc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00038d0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038d3:	89 c8                	mov    eax,ecx
c00038d5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00038d9:	e8 28 e1 ff ff       	call   c0001a06 <clst2sect>
c00038de:	85 c0                	test   eax,eax
c00038e0:	0f 84 97 00 00 00    	je     c000397d <f_read+0x135>
c00038e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00038ea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00038ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00038f2:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c00038f8:	0f 86 cc 00 00 00    	jbe    c00039ca <f_read+0x182>
c00038fe:	89 fe                	mov    esi,edi
c0003900:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003904:	c1 ee 09             	shr    esi,0x9
c0003907:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000390b:	01 f2                	add    edx,esi
c000390d:	39 c2                	cmp    edx,eax
c000390f:	76 06                	jbe    c0003917 <f_read+0xcf>
c0003911:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003915:	89 c6                	mov    esi,eax
c0003917:	56                   	push   esi
c0003918:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000391c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003920:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003924:	50                   	push   eax
c0003925:	e8 0a e0 ff ff       	call   c0001934 <disk_read>
c000392a:	83 c4 10             	add    esp,0x10
c000392d:	85 c0                	test   eax,eax
c000392f:	75 5f                	jne    c0003990 <f_read+0x148>
c0003931:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003935:	78 6f                	js     c00039a6 <f_read+0x15e>
c0003937:	c1 e6 09             	shl    esi,0x9
c000393a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000393e:	29 f7                	sub    edi,esi
c0003940:	01 30                	add    DWORD PTR [eax],esi
c0003942:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003946:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003949:	85 ff                	test   edi,edi
c000394b:	0f 85 52 ff ff ff    	jne    c00038a3 <f_read+0x5b>
c0003951:	e9 f6 00 00 00       	jmp    c0003a4c <f_read+0x204>
c0003956:	85 d2                	test   edx,edx
c0003958:	75 05                	jne    c000395f <f_read+0x117>
c000395a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000395d:	eb 19                	jmp    c0003978 <f_read+0x130>
c000395f:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0003963:	74 09                	je     c000396e <f_read+0x126>
c0003965:	89 d8                	mov    eax,ebx
c0003967:	e8 b7 e0 ff ff       	call   c0001a23 <clmt_clust>
c000396c:	eb 0a                	jmp    c0003978 <f_read+0x130>
c000396e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003971:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003973:	e8 0a f2 ff ff       	call   c0002b82 <get_fat.isra.2>
c0003978:	83 f8 01             	cmp    eax,0x1
c000397b:	77 0e                	ja     c000398b <f_read+0x143>
c000397d:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003981:	bd 02 00 00 00       	mov    ebp,0x2
c0003986:	e9 c1 00 00 00       	jmp    c0003a4c <f_read+0x204>
c000398b:	83 f8 ff             	cmp    eax,0xffffffff
c000398e:	75 0e                	jne    c000399e <f_read+0x156>
c0003990:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003994:	bd 01 00 00 00       	mov    ebp,0x1
c0003999:	e9 ae 00 00 00       	jmp    c0003a4c <f_read+0x204>
c000399e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00039a1:	e9 26 ff ff ff       	jmp    c00038cc <f_read+0x84>
c00039a6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00039a9:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00039ad:	39 f0                	cmp    eax,esi
c00039af:	73 86                	jae    c0003937 <f_read+0xef>
c00039b1:	c1 e0 09             	shl    eax,0x9
c00039b4:	8d 53 2c             	lea    edx,[ebx+0x2c]
c00039b7:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00039bb:	b9 00 02 00 00       	mov    ecx,0x200
c00039c0:	e8 e6 df ff ff       	call   c00019ab <mem_cpy>
c00039c5:	e9 6d ff ff ff       	jmp    c0003937 <f_read+0xef>
c00039ca:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00039cd:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c00039d1:	74 42                	je     c0003a15 <f_read+0x1cd>
c00039d3:	8d 73 2c             	lea    esi,[ebx+0x2c]
c00039d6:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c00039da:	79 19                	jns    c00039f5 <f_read+0x1ad>
c00039dc:	6a 01                	push   0x1
c00039de:	50                   	push   eax
c00039df:	56                   	push   esi
c00039e0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00039e4:	50                   	push   eax
c00039e5:	e8 60 df ff ff       	call   c000194a <disk_write>
c00039ea:	83 c4 10             	add    esp,0x10
c00039ed:	85 c0                	test   eax,eax
c00039ef:	75 9f                	jne    c0003990 <f_read+0x148>
c00039f1:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00039f5:	6a 01                	push   0x1
c00039f7:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00039fb:	56                   	push   esi
c00039fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003a00:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003a04:	50                   	push   eax
c0003a05:	e8 2a df ff ff       	call   c0001934 <disk_read>
c0003a0a:	83 c4 10             	add    esp,0x10
c0003a0d:	85 c0                	test   eax,eax
c0003a0f:	0f 85 7b ff ff ff    	jne    c0003990 <f_read+0x148>
c0003a15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003a19:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003a1c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003a1f:	ba 00 02 00 00       	mov    edx,0x200
c0003a24:	25 ff 01 00 00       	and    eax,0x1ff
c0003a29:	89 fe                	mov    esi,edi
c0003a2b:	29 c2                	sub    edx,eax
c0003a2d:	39 d7                	cmp    edi,edx
c0003a2f:	76 02                	jbe    c0003a33 <f_read+0x1eb>
c0003a31:	89 d6                	mov    esi,edx
c0003a33:	8d 54 03 2c          	lea    edx,[ebx+eax*1+0x2c]
c0003a37:	89 f1                	mov    ecx,esi
c0003a39:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003a3d:	e8 69 df ff ff       	call   c00019ab <mem_cpy>
c0003a42:	e9 f3 fe ff ff       	jmp    c000393a <f_read+0xf2>
c0003a47:	bd 07 00 00 00       	mov    ebp,0x7
c0003a4c:	83 c4 2c             	add    esp,0x2c
c0003a4f:	89 e8                	mov    eax,ebp
c0003a51:	5b                   	pop    ebx
c0003a52:	5e                   	pop    esi
c0003a53:	5f                   	pop    edi
c0003a54:	5d                   	pop    ebp
c0003a55:	c3                   	ret    

c0003a56 <f_write>:
c0003a56:	55                   	push   ebp
c0003a57:	57                   	push   edi
c0003a58:	56                   	push   esi
c0003a59:	53                   	push   ebx
c0003a5a:	83 ec 2c             	sub    esp,0x2c
c0003a5d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003a61:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003a65:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003a6b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003a6f:	89 d8                	mov    eax,ebx
c0003a71:	e8 f8 e1 ff ff       	call   c0001c6e <validate>
c0003a76:	89 c5                	mov    ebp,eax
c0003a78:	85 c0                	test   eax,eax
c0003a7a:	0f 85 0f 02 00 00    	jne    c0003c8f <f_write+0x239>
c0003a80:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003a84:	85 ed                	test   ebp,ebp
c0003a86:	0f 85 03 02 00 00    	jne    c0003c8f <f_write+0x239>
c0003a8c:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0003a90:	0f 84 f4 01 00 00    	je     c0003c8a <f_write+0x234>
c0003a96:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003a99:	89 c7                	mov    edi,eax
c0003a9b:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0003a9f:	0f 83 ea 00 00 00    	jae    c0003b8f <f_write+0x139>
c0003aa5:	f7 d0                	not    eax
c0003aa7:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0003aab:	e9 df 00 00 00       	jmp    c0003b8f <f_write+0x139>
c0003ab0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003ab3:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003ab9:	0f 85 9a 01 00 00    	jne    c0003c59 <f_write+0x203>
c0003abf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ac3:	89 d1                	mov    ecx,edx
c0003ac5:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003ac9:	c1 e9 09             	shr    ecx,0x9
c0003acc:	48                   	dec    eax
c0003acd:	21 c8                	and    eax,ecx
c0003acf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ad3:	0f 84 c3 00 00 00    	je     c0003b9c <f_write+0x146>
c0003ad9:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003add:	0f 88 27 01 00 00    	js     c0003c0a <f_write+0x1b4>
c0003ae3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ae7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003aea:	89 c8                	mov    eax,ecx
c0003aec:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003af0:	e8 11 df ff ff       	call   c0001a06 <clst2sect>
c0003af5:	85 c0                	test   eax,eax
c0003af7:	0f 84 d7 00 00 00    	je     c0003bd4 <f_write+0x17e>
c0003afd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0003b01:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003b05:	01 c7                	add    edi,eax
c0003b07:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0003b0f:	0f 86 1c 01 00 00    	jbe    c0003c31 <f_write+0x1db>
c0003b15:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003b19:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003b1d:	c1 ee 09             	shr    esi,0x9
c0003b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003b24:	01 f2                	add    edx,esi
c0003b26:	39 c2                	cmp    edx,eax
c0003b28:	76 06                	jbe    c0003b30 <f_write+0xda>
c0003b2a:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003b2e:	89 c6                	mov    esi,eax
c0003b30:	56                   	push   esi
c0003b31:	57                   	push   edi
c0003b32:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003b36:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003b3a:	50                   	push   eax
c0003b3b:	e8 0a de ff ff       	call   c000194a <disk_write>
c0003b40:	83 c4 10             	add    esp,0x10
c0003b43:	85 c0                	test   eax,eax
c0003b45:	0f 85 9c 00 00 00    	jne    c0003be7 <f_write+0x191>
c0003b4b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b4e:	29 fa                	sub    edx,edi
c0003b50:	39 f2                	cmp    edx,esi
c0003b52:	73 18                	jae    c0003b6c <f_write+0x116>
c0003b54:	c1 e2 09             	shl    edx,0x9
c0003b57:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0003b5a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0003b5e:	b9 00 02 00 00       	mov    ecx,0x200
c0003b63:	e8 43 de ff ff       	call   c00019ab <mem_cpy>
c0003b68:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003b6c:	c1 e6 09             	shl    esi,0x9
c0003b6f:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0003b73:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003b77:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003b7b:	01 30                	add    DWORD PTR [eax],esi
c0003b7d:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0003b80:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003b83:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003b86:	39 f0                	cmp    eax,esi
c0003b88:	73 02                	jae    c0003b8c <f_write+0x136>
c0003b8a:	89 f0                	mov    eax,esi
c0003b8c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003b8f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0003b94:	0f 85 16 ff ff ff    	jne    c0003ab0 <f_write+0x5a>
c0003b9a:	eb 2a                	jmp    c0003bc6 <f_write+0x170>
c0003b9c:	85 d2                	test   edx,edx
c0003b9e:	75 09                	jne    c0003ba9 <f_write+0x153>
c0003ba0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003ba3:	85 c0                	test   eax,eax
c0003ba5:	75 28                	jne    c0003bcf <f_write+0x179>
c0003ba7:	eb 12                	jmp    c0003bbb <f_write+0x165>
c0003ba9:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0003bad:	74 09                	je     c0003bb8 <f_write+0x162>
c0003baf:	89 d8                	mov    eax,ebx
c0003bb1:	e8 6d de ff ff       	call   c0001a23 <clmt_clust>
c0003bb6:	eb 0a                	jmp    c0003bc2 <f_write+0x16c>
c0003bb8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bbb:	89 d8                	mov    eax,ebx
c0003bbd:	e8 8a f1 ff ff       	call   c0002d4c <create_chain>
c0003bc2:	85 c0                	test   eax,eax
c0003bc4:	75 09                	jne    c0003bcf <f_write+0x179>
c0003bc6:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0003bca:	e9 c0 00 00 00       	jmp    c0003c8f <f_write+0x239>
c0003bcf:	83 f8 01             	cmp    eax,0x1
c0003bd2:	75 0e                	jne    c0003be2 <f_write+0x18c>
c0003bd4:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003bd8:	bd 02 00 00 00       	mov    ebp,0x2
c0003bdd:	e9 ad 00 00 00       	jmp    c0003c8f <f_write+0x239>
c0003be2:	83 f8 ff             	cmp    eax,0xffffffff
c0003be5:	75 0e                	jne    c0003bf5 <f_write+0x19f>
c0003be7:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003beb:	bd 01 00 00 00       	mov    ebp,0x1
c0003bf0:	e9 9a 00 00 00       	jmp    c0003c8f <f_write+0x239>
c0003bf5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003bf8:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003bfc:	0f 85 d7 fe ff ff    	jne    c0003ad9 <f_write+0x83>
c0003c02:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c05:	e9 cf fe ff ff       	jmp    c0003ad9 <f_write+0x83>
c0003c0a:	6a 01                	push   0x1
c0003c0c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0003c0f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0003c12:	50                   	push   eax
c0003c13:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003c17:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003c1b:	50                   	push   eax
c0003c1c:	e8 29 dd ff ff       	call   c000194a <disk_write>
c0003c21:	83 c4 10             	add    esp,0x10
c0003c24:	85 c0                	test   eax,eax
c0003c26:	75 bf                	jne    c0003be7 <f_write+0x191>
c0003c28:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003c2c:	e9 b2 fe ff ff       	jmp    c0003ae3 <f_write+0x8d>
c0003c31:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c0003c34:	74 20                	je     c0003c56 <f_write+0x200>
c0003c36:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003c39:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0003c3c:	76 18                	jbe    c0003c56 <f_write+0x200>
c0003c3e:	6a 01                	push   0x1
c0003c40:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0003c43:	57                   	push   edi
c0003c44:	50                   	push   eax
c0003c45:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003c49:	50                   	push   eax
c0003c4a:	e8 e5 dc ff ff       	call   c0001934 <disk_read>
c0003c4f:	83 c4 10             	add    esp,0x10
c0003c52:	85 c0                	test   eax,eax
c0003c54:	75 91                	jne    c0003be7 <f_write+0x191>
c0003c56:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0003c59:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003c5c:	ba 00 02 00 00       	mov    edx,0x200
c0003c61:	25 ff 01 00 00       	and    eax,0x1ff
c0003c66:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003c6a:	29 c2                	sub    edx,eax
c0003c6c:	39 d6                	cmp    esi,edx
c0003c6e:	76 02                	jbe    c0003c72 <f_write+0x21c>
c0003c70:	89 d6                	mov    esi,edx
c0003c72:	8d 44 03 2c          	lea    eax,[ebx+eax*1+0x2c]
c0003c76:	89 f1                	mov    ecx,esi
c0003c78:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0003c7c:	e8 2a dd ff ff       	call   c00019ab <mem_cpy>
c0003c81:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0003c85:	e9 e5 fe ff ff       	jmp    c0003b6f <f_write+0x119>
c0003c8a:	bd 07 00 00 00       	mov    ebp,0x7
c0003c8f:	83 c4 2c             	add    esp,0x2c
c0003c92:	89 e8                	mov    eax,ebp
c0003c94:	5b                   	pop    ebx
c0003c95:	5e                   	pop    esi
c0003c96:	5f                   	pop    edi
c0003c97:	5d                   	pop    ebp
c0003c98:	c3                   	ret    

c0003c99 <f_sync>:
c0003c99:	56                   	push   esi
c0003c9a:	53                   	push   ebx
c0003c9b:	83 ec 14             	sub    esp,0x14
c0003c9e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0003ca2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003ca6:	89 d8                	mov    eax,ebx
c0003ca8:	e8 c1 df ff ff       	call   c0001c6e <validate>
c0003cad:	85 c0                	test   eax,eax
c0003caf:	0f 85 93 00 00 00    	jne    c0003d48 <f_sync+0xaf>
c0003cb5:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0003cb8:	f6 c2 40             	test   dl,0x40
c0003cbb:	0f 84 87 00 00 00    	je     c0003d48 <f_sync+0xaf>
c0003cc1:	84 d2                	test   dl,dl
c0003cc3:	79 29                	jns    c0003cee <f_sync+0x55>
c0003cc5:	6a 01                	push   0x1
c0003cc7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0003cca:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0003ccd:	50                   	push   eax
c0003cce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003cd2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003cd6:	50                   	push   eax
c0003cd7:	e8 6e dc ff ff       	call   c000194a <disk_write>
c0003cdc:	83 c4 10             	add    esp,0x10
c0003cdf:	89 c2                	mov    edx,eax
c0003ce1:	b8 01 00 00 00       	mov    eax,0x1
c0003ce6:	85 d2                	test   edx,edx
c0003ce8:	75 5e                	jne    c0003d48 <f_sync+0xaf>
c0003cea:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003cee:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0003cf1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cf5:	e8 1e e0 ff ff       	call   c0001d18 <move_window>
c0003cfa:	85 c0                	test   eax,eax
c0003cfc:	75 4a                	jne    c0003d48 <f_sync+0xaf>
c0003cfe:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0003d01:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0003d05:	89 f2                	mov    edx,esi
c0003d07:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0003d0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d0c:	e8 49 ee ff ff       	call   c0002b5a <st_clust.isra.1>
c0003d11:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0003d14:	8d 46 1c             	lea    eax,[esi+0x1c]
c0003d17:	e8 8c dc ff ff       	call   c00019a8 <st_dword>
c0003d1c:	8d 46 16             	lea    eax,[esi+0x16]
c0003d1f:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d24:	e8 7f dc ff ff       	call   c00019a8 <st_dword>
c0003d29:	8d 46 12             	lea    eax,[esi+0x12]
c0003d2c:	31 d2                	xor    edx,edx
c0003d2e:	e8 71 dc ff ff       	call   c00019a4 <st_word>
c0003d33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d3f:	e8 95 eb ff ff       	call   c00028d9 <sync_fs>
c0003d44:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c0003d48:	83 c4 14             	add    esp,0x14
c0003d4b:	5b                   	pop    ebx
c0003d4c:	5e                   	pop    esi
c0003d4d:	c3                   	ret    

c0003d4e <f_close>:
c0003d4e:	53                   	push   ebx
c0003d4f:	83 ec 24             	sub    esp,0x24
c0003d52:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0003d56:	53                   	push   ebx
c0003d57:	e8 3d ff ff ff       	call   c0003c99 <f_sync>
c0003d5c:	83 c4 10             	add    esp,0x10
c0003d5f:	85 c0                	test   eax,eax
c0003d61:	75 15                	jne    c0003d78 <f_close+0x2a>
c0003d63:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003d67:	89 d8                	mov    eax,ebx
c0003d69:	e8 00 df ff ff       	call   c0001c6e <validate>
c0003d6e:	85 c0                	test   eax,eax
c0003d70:	75 06                	jne    c0003d78 <f_close+0x2a>
c0003d72:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003d78:	83 c4 18             	add    esp,0x18
c0003d7b:	5b                   	pop    ebx
c0003d7c:	c3                   	ret    

c0003d7d <f_lseek>:
c0003d7d:	55                   	push   ebp
c0003d7e:	57                   	push   edi
c0003d7f:	56                   	push   esi
c0003d80:	53                   	push   ebx
c0003d81:	83 ec 2c             	sub    esp,0x2c
c0003d84:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003d88:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0003d8c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003d90:	89 d8                	mov    eax,ebx
c0003d92:	e8 d7 de ff ff       	call   c0001c6e <validate>
c0003d97:	89 04 24             	mov    DWORD PTR [esp],eax
c0003d9a:	85 c0                	test   eax,eax
c0003d9c:	0f 85 ba 02 00 00    	jne    c000405c <f_lseek+0x2df>
c0003da2:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003da6:	89 04 24             	mov    DWORD PTR [esp],eax
c0003da9:	85 c0                	test   eax,eax
c0003dab:	0f 85 ab 02 00 00    	jne    c000405c <f_lseek+0x2df>
c0003db1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003db4:	85 c0                	test   eax,eax
c0003db6:	0f 84 36 01 00 00    	je     c0003ef2 <f_lseek+0x175>
c0003dbc:	83 fe ff             	cmp    esi,0xffffffff
c0003dbf:	0f 85 a3 00 00 00    	jne    c0003e68 <f_lseek+0xeb>
c0003dc5:	8d 78 04             	lea    edi,[eax+0x4]
c0003dc8:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0003dcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0003dcd:	be 02 00 00 00       	mov    esi,0x2
c0003dd2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003dd6:	85 c9                	test   ecx,ecx
c0003dd8:	74 74                	je     c0003e4e <f_lseek+0xd1>
c0003dda:	89 cd                	mov    ebp,ecx
c0003ddc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003de4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003de8:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003dec:	89 ea                	mov    edx,ebp
c0003dee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003df0:	e8 8d ed ff ff       	call   c0002b82 <get_fat.isra.2>
c0003df5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003df9:	83 f8 01             	cmp    eax,0x1
c0003dfc:	77 10                	ja     c0003e0e <f_lseek+0x91>
c0003dfe:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003e02:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0003e09:	e9 4e 02 00 00       	jmp    c000405c <f_lseek+0x2df>
c0003e0e:	83 f8 ff             	cmp    eax,0xffffffff
c0003e11:	75 10                	jne    c0003e23 <f_lseek+0xa6>
c0003e13:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003e17:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0003e1e:	e9 39 02 00 00       	jmp    c000405c <f_lseek+0x2df>
c0003e23:	8d 55 01             	lea    edx,[ebp+0x1]
c0003e26:	89 c5                	mov    ebp,eax
c0003e28:	39 c2                	cmp    edx,eax
c0003e2a:	74 b8                	je     c0003de4 <f_lseek+0x67>
c0003e2c:	83 c6 02             	add    esi,0x2
c0003e2f:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0003e33:	72 0c                	jb     c0003e41 <f_lseek+0xc4>
c0003e35:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0003e39:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0003e3c:	89 17                	mov    DWORD PTR [edi],edx
c0003e3e:	83 c7 08             	add    edi,0x8
c0003e41:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e45:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0003e48:	76 04                	jbe    c0003e4e <f_lseek+0xd1>
c0003e4a:	89 c1                	mov    ecx,eax
c0003e4c:	eb 8c                	jmp    c0003dda <f_lseek+0x5d>
c0003e4e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003e51:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0003e55:	89 30                	mov    DWORD PTR [eax],esi
c0003e57:	0f 87 f8 01 00 00    	ja     c0004055 <f_lseek+0x2d8>
c0003e5d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0003e63:	e9 f4 01 00 00       	jmp    c000405c <f_lseek+0x2df>
c0003e68:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6b:	39 f5                	cmp    ebp,esi
c0003e6d:	76 02                	jbe    c0003e71 <f_lseek+0xf4>
c0003e6f:	89 f5                	mov    ebp,esi
c0003e71:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e74:	85 ed                	test   ebp,ebp
c0003e76:	0f 84 e0 01 00 00    	je     c000405c <f_lseek+0x2df>
c0003e7c:	8d 75 ff             	lea    esi,[ebp-0x1]
c0003e7f:	89 d8                	mov    eax,ebx
c0003e81:	89 f2                	mov    edx,esi
c0003e83:	e8 9b db ff ff       	call   c0001a23 <clmt_clust>
c0003e88:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0003e8c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003e8f:	89 c2                	mov    edx,eax
c0003e91:	89 f8                	mov    eax,edi
c0003e93:	e8 6e db ff ff       	call   c0001a06 <clst2sect>
c0003e98:	85 c0                	test   eax,eax
c0003e9a:	0f 84 5e ff ff ff    	je     c0003dfe <f_lseek+0x81>
c0003ea0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003ea6:	0f 84 b0 01 00 00    	je     c000405c <f_lseek+0x2df>
c0003eac:	c1 ee 09             	shr    esi,0x9
c0003eaf:	0f b7 57 0a          	movzx  edx,WORD PTR [edi+0xa]
c0003eb3:	4a                   	dec    edx
c0003eb4:	21 d6                	and    esi,edx
c0003eb6:	01 c6                	add    esi,eax
c0003eb8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003ebb:	39 f0                	cmp    eax,esi
c0003ebd:	0f 84 99 01 00 00    	je     c000405c <f_lseek+0x2df>
c0003ec3:	8d 6b 2c             	lea    ebp,[ebx+0x2c]
c0003ec6:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003eca:	79 1d                	jns    c0003ee9 <f_lseek+0x16c>
c0003ecc:	6a 01                	push   0x1
c0003ece:	50                   	push   eax
c0003ecf:	55                   	push   ebp
c0003ed0:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003ed4:	50                   	push   eax
c0003ed5:	e8 70 da ff ff       	call   c000194a <disk_write>
c0003eda:	83 c4 10             	add    esp,0x10
c0003edd:	85 c0                	test   eax,eax
c0003edf:	0f 85 2e ff ff ff    	jne    c0003e13 <f_lseek+0x96>
c0003ee5:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003ee9:	6a 01                	push   0x1
c0003eeb:	56                   	push   esi
c0003eec:	55                   	push   ebp
c0003eed:	e9 45 01 00 00       	jmp    c0004037 <f_lseek+0x2ba>
c0003ef2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003ef5:	39 f0                	cmp    eax,esi
c0003ef7:	73 08                	jae    c0003f01 <f_lseek+0x184>
c0003ef9:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0003efd:	75 02                	jne    c0003f01 <f_lseek+0x184>
c0003eff:	89 c6                	mov    esi,eax
c0003f01:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0003f04:	85 f6                	test   esi,esi
c0003f06:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003f0d:	75 07                	jne    c0003f16 <f_lseek+0x199>
c0003f0f:	31 f6                	xor    esi,esi
c0003f11:	e9 d6 00 00 00       	jmp    c0003fec <f_lseek+0x26f>
c0003f16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f1a:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c0003f1e:	c1 e7 09             	shl    edi,0x9
c0003f21:	85 c9                	test   ecx,ecx
c0003f23:	74 24                	je     c0003f49 <f_lseek+0x1cc>
c0003f25:	49                   	dec    ecx
c0003f26:	31 d2                	xor    edx,edx
c0003f28:	8d 46 ff             	lea    eax,[esi-0x1]
c0003f2b:	f7 f7                	div    edi
c0003f2d:	31 d2                	xor    edx,edx
c0003f2f:	89 c5                	mov    ebp,eax
c0003f31:	89 c8                	mov    eax,ecx
c0003f33:	f7 f7                	div    edi
c0003f35:	39 c5                	cmp    ebp,eax
c0003f37:	72 10                	jb     c0003f49 <f_lseek+0x1cc>
c0003f39:	89 f8                	mov    eax,edi
c0003f3b:	f7 d8                	neg    eax
c0003f3d:	21 c1                	and    ecx,eax
c0003f3f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003f42:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0003f45:	29 ce                	sub    esi,ecx
c0003f47:	eb 28                	jmp    c0003f71 <f_lseek+0x1f4>
c0003f49:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003f4c:	85 c0                	test   eax,eax
c0003f4e:	75 1e                	jne    c0003f6e <f_lseek+0x1f1>
c0003f50:	31 d2                	xor    edx,edx
c0003f52:	89 d8                	mov    eax,ebx
c0003f54:	e8 f3 ed ff ff       	call   c0002d4c <create_chain>
c0003f59:	83 f8 01             	cmp    eax,0x1
c0003f5c:	0f 84 9c fe ff ff    	je     c0003dfe <f_lseek+0x81>
c0003f62:	83 f8 ff             	cmp    eax,0xffffffff
c0003f65:	0f 84 a8 fe ff ff    	je     c0003e13 <f_lseek+0x96>
c0003f6b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003f6e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f71:	85 c0                	test   eax,eax
c0003f73:	74 9a                	je     c0003f0f <f_lseek+0x192>
c0003f75:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003f78:	39 fe                	cmp    esi,edi
c0003f7a:	76 49                	jbe    c0003fc5 <f_lseek+0x248>
c0003f7c:	01 fa                	add    edx,edi
c0003f7e:	29 fe                	sub    esi,edi
c0003f80:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0003f83:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0003f87:	89 c2                	mov    edx,eax
c0003f89:	74 0d                	je     c0003f98 <f_lseek+0x21b>
c0003f8b:	89 d8                	mov    eax,ebx
c0003f8d:	e8 ba ed ff ff       	call   c0002d4c <create_chain>
c0003f92:	85 c0                	test   eax,eax
c0003f94:	75 09                	jne    c0003f9f <f_lseek+0x222>
c0003f96:	eb 2b                	jmp    c0003fc3 <f_lseek+0x246>
c0003f98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f9a:	e8 e3 eb ff ff       	call   c0002b82 <get_fat.isra.2>
c0003f9f:	83 f8 ff             	cmp    eax,0xffffffff
c0003fa2:	0f 84 6b fe ff ff    	je     c0003e13 <f_lseek+0x96>
c0003fa8:	83 f8 01             	cmp    eax,0x1
c0003fab:	0f 86 4d fe ff ff    	jbe    c0003dfe <f_lseek+0x81>
c0003fb1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fb5:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0003fb8:	0f 86 40 fe ff ff    	jbe    c0003dfe <f_lseek+0x81>
c0003fbe:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003fc1:	eb b2                	jmp    c0003f75 <f_lseek+0x1f8>
c0003fc3:	31 f6                	xor    esi,esi
c0003fc5:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003fc8:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003fce:	0f 84 3b ff ff ff    	je     c0003f0f <f_lseek+0x192>
c0003fd4:	89 c2                	mov    edx,eax
c0003fd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fda:	e8 27 da ff ff       	call   c0001a06 <clst2sect>
c0003fdf:	85 c0                	test   eax,eax
c0003fe1:	0f 84 17 fe ff ff    	je     c0003dfe <f_lseek+0x81>
c0003fe7:	c1 ee 09             	shr    esi,0x9
c0003fea:	01 c6                	add    esi,eax
c0003fec:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fef:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0003ff2:	76 07                	jbe    c0003ffb <f_lseek+0x27e>
c0003ff4:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003ff7:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0003ffb:	a9 ff 01 00 00       	test   eax,0x1ff
c0004000:	74 5a                	je     c000405c <f_lseek+0x2df>
c0004002:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004005:	39 f0                	cmp    eax,esi
c0004007:	74 53                	je     c000405c <f_lseek+0x2df>
c0004009:	8d 7b 2c             	lea    edi,[ebx+0x2c]
c000400c:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004010:	79 21                	jns    c0004033 <f_lseek+0x2b6>
c0004012:	6a 01                	push   0x1
c0004014:	50                   	push   eax
c0004015:	57                   	push   edi
c0004016:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000401a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000401e:	50                   	push   eax
c000401f:	e8 26 d9 ff ff       	call   c000194a <disk_write>
c0004024:	83 c4 10             	add    esp,0x10
c0004027:	85 c0                	test   eax,eax
c0004029:	0f 85 e4 fd ff ff    	jne    c0003e13 <f_lseek+0x96>
c000402f:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004033:	6a 01                	push   0x1
c0004035:	56                   	push   esi
c0004036:	57                   	push   edi
c0004037:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000403b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000403f:	50                   	push   eax
c0004040:	e8 ef d8 ff ff       	call   c0001934 <disk_read>
c0004045:	83 c4 10             	add    esp,0x10
c0004048:	85 c0                	test   eax,eax
c000404a:	0f 85 c3 fd ff ff    	jne    c0003e13 <f_lseek+0x96>
c0004050:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004053:	eb 07                	jmp    c000405c <f_lseek+0x2df>
c0004055:	c7 04 24 11 00 00 00 	mov    DWORD PTR [esp],0x11
c000405c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000405f:	83 c4 2c             	add    esp,0x2c
c0004062:	5b                   	pop    ebx
c0004063:	5e                   	pop    esi
c0004064:	5f                   	pop    edi
c0004065:	5d                   	pop    ebp
c0004066:	c3                   	ret    

c0004067 <f_opendir>:
c0004067:	53                   	push   ebx
c0004068:	b8 09 00 00 00       	mov    eax,0x9
c000406d:	81 ec 18 02 00 00    	sub    esp,0x218
c0004073:	8b 9c 24 20 02 00 00 	mov    ebx,DWORD PTR [esp+0x220]
c000407a:	85 db                	test   ebx,ebx
c000407c:	0f 84 86 00 00 00    	je     c0004108 <f_opendir+0xa1>
c0004082:	31 c9                	xor    ecx,ecx
c0004084:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004088:	8d 84 24 24 02 00 00 	lea    eax,[esp+0x224]
c000408f:	e8 d7 dd ff ff       	call   c0001e6b <mount_volume>
c0004094:	85 c0                	test   eax,eax
c0004096:	75 61                	jne    c00040f9 <f_opendir+0x92>
c0004098:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000409c:	8d 54 24 10          	lea    edx,[esp+0x10]
c00040a0:	89 03                	mov    DWORD PTR [ebx],eax
c00040a2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00040a5:	8b 94 24 24 02 00 00 	mov    edx,DWORD PTR [esp+0x224]
c00040ac:	89 d8                	mov    eax,ebx
c00040ae:	e8 60 f2 ff ff       	call   c0003313 <follow_path>
c00040b3:	85 c0                	test   eax,eax
c00040b5:	75 4a                	jne    c0004101 <f_opendir+0x9a>
c00040b7:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c00040bb:	78 1e                	js     c00040db <f_opendir+0x74>
c00040bd:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00040c1:	75 07                	jne    c00040ca <f_opendir+0x63>
c00040c3:	b8 05 00 00 00       	mov    eax,0x5
c00040c8:	eb 2f                	jmp    c00040f9 <f_opendir+0x92>
c00040ca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040d1:	8a 00                	mov    al,BYTE PTR [eax]
c00040d3:	e8 59 ea ff ff       	call   c0002b31 <ld_clust.isra.0>
c00040d8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00040db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040df:	31 d2                	xor    edx,edx
c00040e1:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00040e5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00040e9:	89 d8                	mov    eax,ebx
c00040eb:	e8 94 eb ff ff       	call   c0002c84 <dir_sdi>
c00040f0:	83 f8 04             	cmp    eax,0x4
c00040f3:	74 ce                	je     c00040c3 <f_opendir+0x5c>
c00040f5:	85 c0                	test   eax,eax
c00040f7:	74 0f                	je     c0004108 <f_opendir+0xa1>
c00040f9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040ff:	eb 07                	jmp    c0004108 <f_opendir+0xa1>
c0004101:	83 f8 04             	cmp    eax,0x4
c0004104:	74 bd                	je     c00040c3 <f_opendir+0x5c>
c0004106:	eb f1                	jmp    c00040f9 <f_opendir+0x92>
c0004108:	81 c4 18 02 00 00    	add    esp,0x218
c000410e:	5b                   	pop    ebx
c000410f:	c3                   	ret    

c0004110 <f_closedir>:
c0004110:	53                   	push   ebx
c0004111:	83 ec 18             	sub    esp,0x18
c0004114:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004118:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000411c:	89 d8                	mov    eax,ebx
c000411e:	e8 4b db ff ff       	call   c0001c6e <validate>
c0004123:	85 c0                	test   eax,eax
c0004125:	75 06                	jne    c000412d <f_closedir+0x1d>
c0004127:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000412d:	83 c4 18             	add    esp,0x18
c0004130:	5b                   	pop    ebx
c0004131:	c3                   	ret    

c0004132 <f_readdir>:
c0004132:	56                   	push   esi
c0004133:	53                   	push   ebx
c0004134:	81 ec 14 02 00 00    	sub    esp,0x214
c000413a:	8b 9c 24 20 02 00 00 	mov    ebx,DWORD PTR [esp+0x220]
c0004141:	8b b4 24 24 02 00 00 	mov    esi,DWORD PTR [esp+0x224]
c0004148:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000414c:	89 d8                	mov    eax,ebx
c000414e:	e8 1b db ff ff       	call   c0001c6e <validate>
c0004153:	85 c0                	test   eax,eax
c0004155:	75 43                	jne    c000419a <f_readdir+0x68>
c0004157:	85 f6                	test   esi,esi
c0004159:	75 0b                	jne    c0004166 <f_readdir+0x34>
c000415b:	31 d2                	xor    edx,edx
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 20 eb ff ff       	call   c0002c84 <dir_sdi>
c0004164:	eb 34                	jmp    c000419a <f_readdir+0x68>
c0004166:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000416a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000416e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0004171:	31 d2                	xor    edx,edx
c0004173:	89 d8                	mov    eax,ebx
c0004175:	e8 fb ee ff ff       	call   c0003075 <dir_read>
c000417a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000417f:	75 19                	jne    c000419a <f_readdir+0x68>
c0004181:	89 f2                	mov    edx,esi
c0004183:	89 d8                	mov    eax,ebx
c0004185:	e8 ee e1 ff ff       	call   c0002378 <get_fileinfo>
c000418a:	31 d2                	xor    edx,edx
c000418c:	89 d8                	mov    eax,ebx
c000418e:	e8 7c ed ff ff       	call   c0002f0f <dir_next>
c0004193:	83 f8 04             	cmp    eax,0x4
c0004196:	75 02                	jne    c000419a <f_readdir+0x68>
c0004198:	31 c0                	xor    eax,eax
c000419a:	81 c4 14 02 00 00    	add    esp,0x214
c00041a0:	5b                   	pop    ebx
c00041a1:	5e                   	pop    esi
c00041a2:	c3                   	ret    

c00041a3 <f_stat>:
c00041a3:	56                   	push   esi
c00041a4:	31 c9                	xor    ecx,ecx
c00041a6:	53                   	push   ebx
c00041a7:	81 ec 34 02 00 00    	sub    esp,0x234
c00041ad:	8b b4 24 44 02 00 00 	mov    esi,DWORD PTR [esp+0x244]
c00041b4:	89 e2                	mov    edx,esp
c00041b6:	8d 84 24 40 02 00 00 	lea    eax,[esp+0x240]
c00041bd:	e8 a9 dc ff ff       	call   c0001e6b <mount_volume>
c00041c2:	89 c3                	mov    ebx,eax
c00041c4:	85 c0                	test   eax,eax
c00041c6:	75 39                	jne    c0004201 <f_stat+0x5e>
c00041c8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041cb:	8d 54 24 30          	lea    edx,[esp+0x30]
c00041cf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00041d2:	8b 94 24 40 02 00 00 	mov    edx,DWORD PTR [esp+0x240]
c00041d9:	89 e0                	mov    eax,esp
c00041db:	e8 33 f1 ff ff       	call   c0003313 <follow_path>
c00041e0:	89 c3                	mov    ebx,eax
c00041e2:	85 c0                	test   eax,eax
c00041e4:	75 1b                	jne    c0004201 <f_stat+0x5e>
c00041e6:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c00041eb:	78 0f                	js     c00041fc <f_stat+0x59>
c00041ed:	85 f6                	test   esi,esi
c00041ef:	74 10                	je     c0004201 <f_stat+0x5e>
c00041f1:	89 f2                	mov    edx,esi
c00041f3:	89 e0                	mov    eax,esp
c00041f5:	e8 7e e1 ff ff       	call   c0002378 <get_fileinfo>
c00041fa:	eb 05                	jmp    c0004201 <f_stat+0x5e>
c00041fc:	bb 06 00 00 00       	mov    ebx,0x6
c0004201:	89 d8                	mov    eax,ebx
c0004203:	81 c4 34 02 00 00    	add    esp,0x234
c0004209:	5b                   	pop    ebx
c000420a:	5e                   	pop    esi
c000420b:	c3                   	ret    

c000420c <f_getfree>:
c000420c:	55                   	push   ebp
c000420d:	31 c9                	xor    ecx,ecx
c000420f:	57                   	push   edi
c0004210:	56                   	push   esi
c0004211:	53                   	push   ebx
c0004212:	83 ec 2c             	sub    esp,0x2c
c0004215:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004219:	8d 44 24 40          	lea    eax,[esp+0x40]
c000421d:	e8 49 dc ff ff       	call   c0001e6b <mount_volume>
c0004222:	89 c7                	mov    edi,eax
c0004224:	85 c0                	test   eax,eax
c0004226:	0f 85 d8 00 00 00    	jne    c0004304 <f_getfree+0xf8>
c000422c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004230:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004234:	89 30                	mov    DWORD PTR [eax],esi
c0004236:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004239:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c000423c:	8d 55 fe             	lea    edx,[ebp-0x2]
c000423f:	39 d0                	cmp    eax,edx
c0004241:	77 0b                	ja     c000424e <f_getfree+0x42>
c0004243:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004247:	89 01                	mov    DWORD PTR [ecx],eax
c0004249:	e9 b6 00 00 00       	jmp    c0004304 <f_getfree+0xf8>
c000424e:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004251:	75 29                	jne    c000427c <f_getfree+0x70>
c0004253:	bd 02 00 00 00       	mov    ebp,0x2
c0004258:	31 db                	xor    ebx,ebx
c000425a:	89 ea                	mov    edx,ebp
c000425c:	89 f0                	mov    eax,esi
c000425e:	e8 1f e9 ff ff       	call   c0002b82 <get_fat.isra.2>
c0004263:	83 f8 ff             	cmp    eax,0xffffffff
c0004266:	74 7b                	je     c00042e3 <f_getfree+0xd7>
c0004268:	83 f8 01             	cmp    eax,0x1
c000426b:	74 7d                	je     c00042ea <f_getfree+0xde>
c000426d:	83 d3 00             	adc    ebx,0x0
c0004270:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004274:	45                   	inc    ebp
c0004275:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004278:	77 e0                	ja     c000425a <f_getfree+0x4e>
c000427a:	eb 77                	jmp    c00042f3 <f_getfree+0xe7>
c000427c:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000427f:	31 db                	xor    ebx,ebx
c0004281:	31 f6                	xor    esi,esi
c0004283:	85 f6                	test   esi,esi
c0004285:	75 18                	jne    c000429f <f_getfree+0x93>
c0004287:	8d 42 01             	lea    eax,[edx+0x1]
c000428a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000428e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004292:	e8 81 da ff ff       	call   c0001d18 <move_window>
c0004297:	85 c0                	test   eax,eax
c0004299:	75 56                	jne    c00042f1 <f_getfree+0xe5>
c000429b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000429f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00042a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00042a7:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00042ab:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00042ae:	75 11                	jne    c00042c1 <f_getfree+0xb5>
c00042b0:	e8 ca d6 ff ff       	call   c000197f <ld_word>
c00042b5:	66 83 f8 01          	cmp    ax,0x1
c00042b9:	83 d3 00             	adc    ebx,0x0
c00042bc:	83 c6 02             	add    esi,0x2
c00042bf:	eb 13                	jmp    c00042d4 <f_getfree+0xc8>
c00042c1:	e8 c6 d6 ff ff       	call   c000198c <ld_dword>
c00042c6:	25 ff ff ff 0f       	and    eax,0xfffffff
c00042cb:	83 f8 01             	cmp    eax,0x1
c00042ce:	83 d3 00             	adc    ebx,0x0
c00042d1:	83 c6 04             	add    esi,0x4
c00042d4:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00042da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00042de:	4d                   	dec    ebp
c00042df:	75 a2                	jne    c0004283 <f_getfree+0x77>
c00042e1:	eb 10                	jmp    c00042f3 <f_getfree+0xe7>
c00042e3:	bf 01 00 00 00       	mov    edi,0x1
c00042e8:	eb 09                	jmp    c00042f3 <f_getfree+0xe7>
c00042ea:	bf 02 00 00 00       	mov    edi,0x2
c00042ef:	eb 02                	jmp    c00042f3 <f_getfree+0xe7>
c00042f1:	89 c7                	mov    edi,eax
c00042f3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042f7:	89 18                	mov    DWORD PTR [eax],ebx
c00042f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00042fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004300:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0004304:	83 c4 2c             	add    esp,0x2c
c0004307:	89 f8                	mov    eax,edi
c0004309:	5b                   	pop    ebx
c000430a:	5e                   	pop    esi
c000430b:	5f                   	pop    edi
c000430c:	5d                   	pop    ebp
c000430d:	c3                   	ret    

c000430e <f_truncate>:
c000430e:	56                   	push   esi
c000430f:	53                   	push   ebx
c0004310:	83 ec 14             	sub    esp,0x14
c0004313:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004317:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000431b:	89 d8                	mov    eax,ebx
c000431d:	e8 4c d9 ff ff       	call   c0001c6e <validate>
c0004322:	89 c6                	mov    esi,eax
c0004324:	85 c0                	test   eax,eax
c0004326:	0f 85 be 00 00 00    	jne    c00043ea <f_truncate+0xdc>
c000432c:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004330:	85 f6                	test   esi,esi
c0004332:	0f 85 b2 00 00 00    	jne    c00043ea <f_truncate+0xdc>
c0004338:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433c:	0f 84 a3 00 00 00    	je     c00043e5 <f_truncate+0xd7>
c0004342:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004345:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004348:	0f 83 9c 00 00 00    	jae    c00043ea <f_truncate+0xdc>
c000434e:	85 c0                	test   eax,eax
c0004350:	75 15                	jne    c0004367 <f_truncate+0x59>
c0004352:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004355:	31 c9                	xor    ecx,ecx
c0004357:	89 d8                	mov    eax,ebx
c0004359:	e8 28 eb ff ff       	call   c0002e86 <remove_chain>
c000435e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004365:	eb 35                	jmp    c000439c <f_truncate+0x8e>
c0004367:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000436a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000436c:	e8 11 e8 ff ff       	call   c0002b82 <get_fat.isra.2>
c0004371:	89 c2                	mov    edx,eax
c0004373:	b8 01 00 00 00       	mov    eax,0x1
c0004378:	83 fa ff             	cmp    edx,0xffffffff
c000437b:	74 1f                	je     c000439c <f_truncate+0x8e>
c000437d:	b8 02 00 00 00       	mov    eax,0x2
c0004382:	83 fa 01             	cmp    edx,0x1
c0004385:	74 15                	je     c000439c <f_truncate+0x8e>
c0004387:	31 c0                	xor    eax,eax
c0004389:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000438d:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004390:	76 0a                	jbe    c000439c <f_truncate+0x8e>
c0004392:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004395:	89 d8                	mov    eax,ebx
c0004397:	e8 ea ea ff ff       	call   c0002e86 <remove_chain>
c000439c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000439f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043a2:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043a5:	83 ca 40             	or     edx,0x40
c00043a8:	85 c0                	test   eax,eax
c00043aa:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00043ad:	75 2f                	jne    c00043de <f_truncate+0xd0>
c00043af:	84 d2                	test   dl,dl
c00043b1:	79 37                	jns    c00043ea <f_truncate+0xdc>
c00043b3:	6a 01                	push   0x1
c00043b5:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00043b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bb:	50                   	push   eax
c00043bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c4:	50                   	push   eax
c00043c5:	e8 80 d5 ff ff       	call   c000194a <disk_write>
c00043ca:	83 c4 10             	add    esp,0x10
c00043cd:	85 c0                	test   eax,eax
c00043cf:	75 08                	jne    c00043d9 <f_truncate+0xcb>
c00043d1:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00043d5:	31 f6                	xor    esi,esi
c00043d7:	eb 11                	jmp    c00043ea <f_truncate+0xdc>
c00043d9:	b8 01 00 00 00       	mov    eax,0x1
c00043de:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00043e1:	89 c6                	mov    esi,eax
c00043e3:	eb 05                	jmp    c00043ea <f_truncate+0xdc>
c00043e5:	be 07 00 00 00       	mov    esi,0x7
c00043ea:	89 f0                	mov    eax,esi
c00043ec:	83 c4 14             	add    esp,0x14
c00043ef:	5b                   	pop    ebx
c00043f0:	5e                   	pop    esi
c00043f1:	c3                   	ret    

c00043f2 <f_unlink>:
c00043f2:	57                   	push   edi
c00043f3:	b9 02 00 00 00       	mov    ecx,0x2
c00043f8:	56                   	push   esi
c00043f9:	53                   	push   ebx
c00043fa:	81 ec 70 02 00 00    	sub    esp,0x270
c0004400:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004404:	8d 84 24 80 02 00 00 	lea    eax,[esp+0x280]
c000440b:	e8 5b da ff ff       	call   c0001e6b <mount_volume>
c0004410:	85 c0                	test   eax,eax
c0004412:	0f 85 bd 00 00 00    	jne    c00044d5 <f_unlink+0xe3>
c0004418:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000441c:	8d 54 24 70          	lea    edx,[esp+0x70]
c0004420:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004424:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0004427:	8b 94 24 80 02 00 00 	mov    edx,DWORD PTR [esp+0x280]
c000442e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004432:	e8 dc ee ff ff       	call   c0003313 <follow_path>
c0004437:	85 c0                	test   eax,eax
c0004439:	0f 85 96 00 00 00    	jne    c00044d5 <f_unlink+0xe3>
c000443f:	b8 06 00 00 00       	mov    eax,0x6
c0004444:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0004449:	0f 88 86 00 00 00    	js     c00044d5 <f_unlink+0xe3>
c000444f:	0f b6 7c 24 16       	movzx  edi,BYTE PTR [esp+0x16]
c0004454:	f7 c7 01 00 00 00    	test   edi,0x1
c000445a:	74 07                	je     c0004463 <f_unlink+0x71>
c000445c:	b8 07 00 00 00       	mov    eax,0x7
c0004461:	eb 72                	jmp    c00044d5 <f_unlink+0xe3>
c0004463:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0004467:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000446b:	8a 06                	mov    al,BYTE PTR [esi]
c000446d:	e8 bf e6 ff ff       	call   c0002b31 <ld_clust.isra.0>
c0004472:	83 e7 10             	and    edi,0x10
c0004475:	89 c3                	mov    ebx,eax
c0004477:	75 0f                	jne    c0004488 <f_unlink+0x96>
c0004479:	8d 44 24 10          	lea    eax,[esp+0x10]
c000447d:	e8 10 ed ff ff       	call   c0003192 <dir_remove>
c0004482:	85 c0                	test   eax,eax
c0004484:	74 2f                	je     c00044b5 <f_unlink+0xc3>
c0004486:	eb 4d                	jmp    c00044d5 <f_unlink+0xe3>
c0004488:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000448c:	31 d2                	xor    edx,edx
c000448e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0004492:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004496:	e8 e9 e7 ff ff       	call   c0002c84 <dir_sdi>
c000449b:	85 c0                	test   eax,eax
c000449d:	75 36                	jne    c00044d5 <f_unlink+0xe3>
c000449f:	31 d2                	xor    edx,edx
c00044a1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00044a5:	e8 cb eb ff ff       	call   c0003075 <dir_read>
c00044aa:	85 c0                	test   eax,eax
c00044ac:	74 ae                	je     c000445c <f_unlink+0x6a>
c00044ae:	83 f8 04             	cmp    eax,0x4
c00044b1:	75 22                	jne    c00044d5 <f_unlink+0xe3>
c00044b3:	eb c4                	jmp    c0004479 <f_unlink+0x87>
c00044b5:	85 db                	test   ebx,ebx
c00044b7:	75 0b                	jne    c00044c4 <f_unlink+0xd2>
c00044b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00044bd:	e8 17 e4 ff ff       	call   c00028d9 <sync_fs>
c00044c2:	eb 11                	jmp    c00044d5 <f_unlink+0xe3>
c00044c4:	31 c9                	xor    ecx,ecx
c00044c6:	89 da                	mov    edx,ebx
c00044c8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00044cc:	e8 b5 e9 ff ff       	call   c0002e86 <remove_chain>
c00044d1:	85 c0                	test   eax,eax
c00044d3:	74 e4                	je     c00044b9 <f_unlink+0xc7>
c00044d5:	81 c4 70 02 00 00    	add    esp,0x270
c00044db:	5b                   	pop    ebx
c00044dc:	5e                   	pop    esi
c00044dd:	5f                   	pop    edi
c00044de:	c3                   	ret    

c00044df <f_mkdir>:
c00044df:	56                   	push   esi
c00044e0:	b9 02 00 00 00       	mov    ecx,0x2
c00044e5:	53                   	push   ebx
c00044e6:	81 ec 54 02 00 00    	sub    esp,0x254
c00044ec:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00044f0:	8d 84 24 60 02 00 00 	lea    eax,[esp+0x260]
c00044f7:	e8 6f d9 ff ff       	call   c0001e6b <mount_volume>
c00044fc:	89 c3                	mov    ebx,eax
c00044fe:	85 c0                	test   eax,eax
c0004500:	0f 85 4a 01 00 00    	jne    c0004650 <f_mkdir+0x171>
c0004506:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000450a:	8d 54 24 50          	lea    edx,[esp+0x50]
c000450e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004512:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0004515:	8b 94 24 60 02 00 00 	mov    edx,DWORD PTR [esp+0x260]
c000451c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004520:	e8 ee ed ff ff       	call   c0003313 <follow_path>
c0004525:	89 c3                	mov    ebx,eax
c0004527:	85 c0                	test   eax,eax
c0004529:	74 45                	je     c0004570 <f_mkdir+0x91>
c000452b:	83 f8 04             	cmp    eax,0x4
c000452e:	0f 85 1c 01 00 00    	jne    c0004650 <f_mkdir+0x171>
c0004534:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004538:	31 d2                	xor    edx,edx
c000453a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000453e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004542:	e8 05 e8 ff ff       	call   c0002d4c <create_chain>
c0004547:	89 c6                	mov    esi,eax
c0004549:	85 c0                	test   eax,eax
c000454b:	74 0c                	je     c0004559 <f_mkdir+0x7a>
c000454d:	bb 02 00 00 00       	mov    ebx,0x2
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	74 07                	je     c000455e <f_mkdir+0x7f>
c0004557:	eb 21                	jmp    c000457a <f_mkdir+0x9b>
c0004559:	bb 07 00 00 00       	mov    ebx,0x7
c000455e:	31 c9                	xor    ecx,ecx
c0004560:	89 f2                	mov    edx,esi
c0004562:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004566:	e8 1b e9 ff ff       	call   c0002e86 <remove_chain>
c000456b:	e9 e0 00 00 00       	jmp    c0004650 <f_mkdir+0x171>
c0004570:	bb 08 00 00 00       	mov    ebx,0x8
c0004575:	e9 d6 00 00 00       	jmp    c0004650 <f_mkdir+0x171>
c000457a:	bb 01 00 00 00       	mov    ebx,0x1
c000457f:	83 f8 ff             	cmp    eax,0xffffffff
c0004582:	74 da                	je     c000455e <f_mkdir+0x7f>
c0004584:	89 f2                	mov    edx,esi
c0004586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000458a:	e8 2e dd ff ff       	call   c00022bd <dir_clear>
c000458f:	89 c3                	mov    ebx,eax
c0004591:	85 c0                	test   eax,eax
c0004593:	75 c9                	jne    c000455e <f_mkdir+0x7f>
c0004595:	b9 0b 00 00 00       	mov    ecx,0xb
c000459a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000459e:	ba 20 00 00 00       	mov    edx,0x20
c00045a3:	83 c0 34             	add    eax,0x34
c00045a6:	e8 15 d4 ff ff       	call   c00019c0 <mem_set>
c00045ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045af:	ba 00 00 21 50       	mov    edx,0x50210000
c00045b4:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c00045b8:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c00045bc:	83 c0 4a             	add    eax,0x4a
c00045bf:	e8 e4 d3 ff ff       	call   c00019a8 <st_dword>
c00045c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045c8:	89 f1                	mov    ecx,esi
c00045ca:	8d 50 34             	lea    edx,[eax+0x34]
c00045cd:	e8 88 e5 ff ff       	call   c0002b5a <st_clust.isra.1>
c00045d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045d6:	b9 20 00 00 00       	mov    ecx,0x20
c00045db:	8d 50 34             	lea    edx,[eax+0x34]
c00045de:	83 c0 54             	add    eax,0x54
c00045e1:	e8 c5 d3 ff ff       	call   c00019ab <mem_cpy>
c00045e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045ea:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00045ee:	8d 50 54             	lea    edx,[eax+0x54]
c00045f1:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c00045f5:	e8 60 e5 ff ff       	call   c0002b5a <st_clust.isra.1>
c00045fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045fe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004602:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004606:	e8 9c ed ff ff       	call   c00033a7 <dir_register>
c000460b:	89 c3                	mov    ebx,eax
c000460d:	85 c0                	test   eax,eax
c000460f:	0f 85 49 ff ff ff    	jne    c000455e <f_mkdir+0x7f>
c0004615:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004619:	ba 00 00 21 50       	mov    edx,0x50210000
c000461e:	83 c0 16             	add    eax,0x16
c0004621:	e8 82 d3 ff ff       	call   c00019a8 <st_dword>
c0004626:	89 f1                	mov    ecx,esi
c0004628:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000462c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004630:	e8 25 e5 ff ff       	call   c0002b5a <st_clust.isra.1>
c0004635:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004639:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000463d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004641:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004645:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004649:	e8 8b e2 ff ff       	call   c00028d9 <sync_fs>
c000464e:	89 c3                	mov    ebx,eax
c0004650:	89 d8                	mov    eax,ebx
c0004652:	81 c4 54 02 00 00    	add    esp,0x254
c0004658:	5b                   	pop    ebx
c0004659:	5e                   	pop    esi
c000465a:	c3                   	ret    

c000465b <f_rename>:
c000465b:	56                   	push   esi
c000465c:	53                   	push   ebx
c000465d:	81 ec 94 02 00 00    	sub    esp,0x294
c0004663:	8d 84 24 a4 02 00 00 	lea    eax,[esp+0x2a4]
c000466a:	e8 b2 d5 ff ff       	call   c0001c21 <get_ldnumber>
c000466f:	b9 02 00 00 00       	mov    ecx,0x2
c0004674:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004678:	8d 84 24 a0 02 00 00 	lea    eax,[esp+0x2a0]
c000467f:	e8 e7 d7 ff ff       	call   c0001e6b <mount_volume>
c0004684:	85 c0                	test   eax,eax
c0004686:	0f 85 44 01 00 00    	jne    c00047d0 <f_rename+0x175>
c000468c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004690:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0004697:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000469b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000469e:	8b 94 24 a0 02 00 00 	mov    edx,DWORD PTR [esp+0x2a0]
c00046a5:	8d 44 24 30          	lea    eax,[esp+0x30]
c00046a9:	e8 65 ec ff ff       	call   c0003313 <follow_path>
c00046ae:	85 c0                	test   eax,eax
c00046b0:	0f 85 1a 01 00 00    	jne    c00047d0 <f_rename+0x175>
c00046b6:	b8 06 00 00 00       	mov    eax,0x6
c00046bb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00046c0:	0f 85 0a 01 00 00    	jne    c00047d0 <f_rename+0x175>
c00046c6:	b9 20 00 00 00       	mov    ecx,0x20
c00046cb:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00046cf:	8d 44 24 10          	lea    eax,[esp+0x10]
c00046d3:	e8 d3 d2 ff ff       	call   c00019ab <mem_cpy>
c00046d8:	b9 30 00 00 00       	mov    ecx,0x30
c00046dd:	8d 54 24 30          	lea    edx,[esp+0x30]
c00046e1:	8d 44 24 60          	lea    eax,[esp+0x60]
c00046e5:	e8 c1 d2 ff ff       	call   c00019ab <mem_cpy>
c00046ea:	8b 94 24 a4 02 00 00 	mov    edx,DWORD PTR [esp+0x2a4]
c00046f1:	8d 44 24 60          	lea    eax,[esp+0x60]
c00046f5:	e8 19 ec ff ff       	call   c0003313 <follow_path>
c00046fa:	85 c0                	test   eax,eax
c00046fc:	75 1d                	jne    c000471b <f_rename+0xc0>
c00046fe:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0004702:	b8 08 00 00 00       	mov    eax,0x8
c0004707:	39 74 24 68          	cmp    DWORD PTR [esp+0x68],esi
c000470b:	0f 85 bf 00 00 00    	jne    c00047d0 <f_rename+0x175>
c0004711:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0004715:	39 4c 24 70          	cmp    DWORD PTR [esp+0x70],ecx
c0004719:	eb 03                	jmp    c000471e <f_rename+0xc3>
c000471b:	83 f8 04             	cmp    eax,0x4
c000471e:	0f 85 ac 00 00 00    	jne    c00047d0 <f_rename+0x175>
c0004724:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004728:	e8 7a ec ff ff       	call   c00033a7 <dir_register>
c000472d:	85 c0                	test   eax,eax
c000472f:	0f 85 9b 00 00 00    	jne    c00047d0 <f_rename+0x175>
c0004735:	8b 5c 24 7c          	mov    ebx,DWORD PTR [esp+0x7c]
c0004739:	b9 13 00 00 00       	mov    ecx,0x13
c000473e:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004741:	8d 54 24 1d          	lea    edx,[esp+0x1d]
c0004745:	e8 61 d2 ff ff       	call   c00019ab <mem_cpy>
c000474a:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c000474e:	a8 10                	test   al,0x10
c0004750:	75 03                	jne    c0004755 <f_rename+0xfa>
c0004752:	83 c8 20             	or     eax,0x20
c0004755:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004758:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000475c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004760:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004764:	74 54                	je     c00047ba <f_rename+0x15f>
c0004766:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000476a:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c000476e:	74 4a                	je     c00047ba <f_rename+0x15f>
c0004770:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0004774:	89 da                	mov    edx,ebx
c0004776:	8a 06                	mov    al,BYTE PTR [esi]
c0004778:	e8 b4 e3 ff ff       	call   c0002b31 <ld_clust.isra.0>
c000477d:	89 c2                	mov    edx,eax
c000477f:	89 f0                	mov    eax,esi
c0004781:	e8 80 d2 ff ff       	call   c0001a06 <clst2sect>
c0004786:	89 c2                	mov    edx,eax
c0004788:	b8 02 00 00 00       	mov    eax,0x2
c000478d:	85 d2                	test   edx,edx
c000478f:	74 3f                	je     c00047d0 <f_rename+0x175>
c0004791:	89 f0                	mov    eax,esi
c0004793:	e8 80 d5 ff ff       	call   c0001d18 <move_window>
c0004798:	85 c0                	test   eax,eax
c000479a:	75 34                	jne    c00047d0 <f_rename+0x175>
c000479c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a0:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c00047a4:	75 14                	jne    c00047ba <f_rename+0x15f>
c00047a6:	8d 50 54             	lea    edx,[eax+0x54]
c00047a9:	8b 4c 24 68          	mov    ecx,DWORD PTR [esp+0x68]
c00047ad:	e8 a8 e3 ff ff       	call   c0002b5a <st_clust.isra.1>
c00047b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047b6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00047ba:	8d 44 24 30          	lea    eax,[esp+0x30]
c00047be:	e8 cf e9 ff ff       	call   c0003192 <dir_remove>
c00047c3:	85 c0                	test   eax,eax
c00047c5:	75 09                	jne    c00047d0 <f_rename+0x175>
c00047c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047cb:	e8 09 e1 ff ff       	call   c00028d9 <sync_fs>
c00047d0:	81 c4 94 02 00 00    	add    esp,0x294
c00047d6:	5b                   	pop    ebx
c00047d7:	5e                   	pop    esi
c00047d8:	c3                   	ret    

c00047d9 <f_chmod>:
c00047d9:	56                   	push   esi
c00047da:	b9 02 00 00 00       	mov    ecx,0x2
c00047df:	53                   	push   ebx
c00047e0:	81 ec 44 02 00 00    	sub    esp,0x244
c00047e6:	8b 9c 24 54 02 00 00 	mov    ebx,DWORD PTR [esp+0x254]
c00047ed:	8b b4 24 58 02 00 00 	mov    esi,DWORD PTR [esp+0x258]
c00047f4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047f8:	8d 84 24 50 02 00 00 	lea    eax,[esp+0x250]
c00047ff:	e8 67 d6 ff ff       	call   c0001e6b <mount_volume>
c0004804:	85 c0                	test   eax,eax
c0004806:	75 52                	jne    c000485a <f_chmod+0x81>
c0004808:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000480c:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004810:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004814:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0004817:	8b 94 24 50 02 00 00 	mov    edx,DWORD PTR [esp+0x250]
c000481e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004822:	e8 ec ea ff ff       	call   c0003313 <follow_path>
c0004827:	85 c0                	test   eax,eax
c0004829:	75 2f                	jne    c000485a <f_chmod+0x81>
c000482b:	b8 06 00 00 00       	mov    eax,0x6
c0004830:	f6 44 24 3b a0       	test   BYTE PTR [esp+0x3b],0xa0
c0004835:	75 23                	jne    c000485a <f_chmod+0x81>
c0004837:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000483b:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c000483e:	21 f3                	and    ebx,esi
c0004840:	83 e3 27             	and    ebx,0x27
c0004843:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004846:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004849:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000484d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004851:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004855:	e8 7f e0 ff ff       	call   c00028d9 <sync_fs>
c000485a:	81 c4 44 02 00 00    	add    esp,0x244
c0004860:	5b                   	pop    ebx
c0004861:	5e                   	pop    esi
c0004862:	c3                   	ret    

c0004863 <f_utime>:
c0004863:	53                   	push   ebx
c0004864:	b9 02 00 00 00       	mov    ecx,0x2
c0004869:	81 ec 48 02 00 00    	sub    esp,0x248
c000486f:	8b 9c 24 54 02 00 00 	mov    ebx,DWORD PTR [esp+0x254]
c0004876:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000487a:	8d 84 24 50 02 00 00 	lea    eax,[esp+0x250]
c0004881:	e8 e5 d5 ff ff       	call   c0001e6b <mount_volume>
c0004886:	85 c0                	test   eax,eax
c0004888:	75 59                	jne    c00048e3 <f_utime+0x80>
c000488a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000488e:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004892:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004896:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0004899:	8b 94 24 50 02 00 00 	mov    edx,DWORD PTR [esp+0x250]
c00048a0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00048a4:	e8 6a ea ff ff       	call   c0003313 <follow_path>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	75 36                	jne    c00048e3 <f_utime+0x80>
c00048ad:	b8 06 00 00 00       	mov    eax,0x6
c00048b2:	f6 44 24 3b a0       	test   BYTE PTR [esp+0x3b],0xa0
c00048b7:	75 2a                	jne    c00048e3 <f_utime+0x80>
c00048b9:	0f b7 43 06          	movzx  eax,WORD PTR [ebx+0x6]
c00048bd:	0f b7 53 04          	movzx  edx,WORD PTR [ebx+0x4]
c00048c1:	c1 e2 10             	shl    edx,0x10
c00048c4:	09 c2                	or     edx,eax
c00048c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00048ca:	83 c0 16             	add    eax,0x16
c00048cd:	e8 d6 d0 ff ff       	call   c00019a8 <st_dword>
c00048d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048d6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00048da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048de:	e8 f6 df ff ff       	call   c00028d9 <sync_fs>
c00048e3:	81 c4 48 02 00 00    	add    esp,0x248
c00048e9:	5b                   	pop    ebx
c00048ea:	c3                   	ret    

c00048eb <f_getlabel>:
c00048eb:	57                   	push   edi
c00048ec:	31 c9                	xor    ecx,ecx
c00048ee:	56                   	push   esi
c00048ef:	53                   	push   ebx
c00048f0:	83 ec 40             	sub    esp,0x40
c00048f3:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00048f7:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00048fb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048ff:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004903:	e8 63 d5 ff ff       	call   c0001e6b <mount_volume>
c0004908:	89 c3                	mov    ebx,eax
c000490a:	85 c0                	test   eax,eax
c000490c:	0f 85 a5 00 00 00    	jne    c00049b7 <f_getlabel+0xcc>
c0004912:	85 ff                	test   edi,edi
c0004914:	74 5d                	je     c0004973 <f_getlabel+0x88>
c0004916:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000491a:	31 d2                	xor    edx,edx
c000491c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004920:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0004928:	8d 44 24 10          	lea    eax,[esp+0x10]
c000492c:	e8 53 e3 ff ff       	call   c0002c84 <dir_sdi>
c0004931:	85 c0                	test   eax,eax
c0004933:	75 36                	jne    c000496b <f_getlabel+0x80>
c0004935:	ba 01 00 00 00       	mov    edx,0x1
c000493a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000493e:	e8 32 e7 ff ff       	call   c0003075 <dir_read>
c0004943:	85 c0                	test   eax,eax
c0004945:	75 24                	jne    c000496b <f_getlabel+0x80>
c0004947:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000494b:	40                   	inc    eax
c000494c:	8a 4c 02 ff          	mov    cl,BYTE PTR [edx+eax*1-0x1]
c0004950:	83 f8 0b             	cmp    eax,0xb
c0004953:	88 4c 07 ff          	mov    BYTE PTR [edi+eax*1-0x1],cl
c0004957:	75 f2                	jne    c000494b <f_getlabel+0x60>
c0004959:	8d 47 0b             	lea    eax,[edi+0xb]
c000495c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000495f:	39 c7                	cmp    edi,eax
c0004961:	74 10                	je     c0004973 <f_getlabel+0x88>
c0004963:	48                   	dec    eax
c0004964:	80 38 20             	cmp    BYTE PTR [eax],0x20
c0004967:	74 f3                	je     c000495c <f_getlabel+0x71>
c0004969:	eb 08                	jmp    c0004973 <f_getlabel+0x88>
c000496b:	83 f8 04             	cmp    eax,0x4
c000496e:	75 45                	jne    c00049b5 <f_getlabel+0xca>
c0004970:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0004973:	85 f6                	test   esi,esi
c0004975:	74 40                	je     c00049b7 <f_getlabel+0xcc>
c0004977:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000497b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000497e:	e8 95 d3 ff ff       	call   c0001d18 <move_window>
c0004983:	89 c3                	mov    ebx,eax
c0004985:	85 c0                	test   eax,eax
c0004987:	75 2e                	jne    c00049b7 <f_getlabel+0xcc>
c0004989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000498d:	b8 43 00 00 00       	mov    eax,0x43
c0004992:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004994:	80 f9 03             	cmp    cl,0x3
c0004997:	74 0f                	je     c00049a8 <f_getlabel+0xbd>
c0004999:	31 c0                	xor    eax,eax
c000499b:	80 f9 04             	cmp    cl,0x4
c000499e:	0f 94 c0             	sete   al
c00049a1:	48                   	dec    eax
c00049a2:	83 e0 c3             	and    eax,0xffffffc3
c00049a5:	83 c0 64             	add    eax,0x64
c00049a8:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00049ac:	e8 db cf ff ff       	call   c000198c <ld_dword>
c00049b1:	89 06                	mov    DWORD PTR [esi],eax
c00049b3:	eb 02                	jmp    c00049b7 <f_getlabel+0xcc>
c00049b5:	89 c3                	mov    ebx,eax
c00049b7:	83 c4 40             	add    esp,0x40
c00049ba:	89 d8                	mov    eax,ebx
c00049bc:	5b                   	pop    ebx
c00049bd:	5e                   	pop    esi
c00049be:	5f                   	pop    edi
c00049bf:	c3                   	ret    

c00049c0 <f_setlabel>:
c00049c0:	56                   	push   esi
c00049c1:	b9 02 00 00 00       	mov    ecx,0x2
c00049c6:	53                   	push   ebx
c00049c7:	83 ec 54             	sub    esp,0x54
c00049ca:	8d 54 24 04          	lea    edx,[esp+0x4]
c00049ce:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049d2:	e8 94 d4 ff ff       	call   c0001e6b <mount_volume>
c00049d7:	89 c6                	mov    esi,eax
c00049d9:	85 c0                	test   eax,eax
c00049db:	0f 85 67 01 00 00    	jne    c0004b48 <f_setlabel+0x188>
c00049e1:	b9 0b 00 00 00       	mov    ecx,0xb
c00049e6:	ba 20 00 00 00       	mov    edx,0x20
c00049eb:	8d 44 24 0a          	lea    eax,[esp+0xa]
c00049ef:	31 db                	xor    ebx,ebx
c00049f1:	e8 ca cf ff ff       	call   c00019c0 <mem_set>
c00049f6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00049fa:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00049fd:	76 5b                	jbe    c0004a5a <f_setlabel+0x9a>
c00049ff:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004a03:	e8 d5 da ff ff       	call   c00024dd <tchar2uni>
c0004a08:	3d ff ff 00 00       	cmp    eax,0xffff
c0004a0d:	76 0a                	jbe    c0004a19 <f_setlabel+0x59>
c0004a0f:	be 06 00 00 00       	mov    esi,0x6
c0004a14:	e9 2f 01 00 00       	jmp    c0004b48 <f_setlabel+0x188>
c0004a19:	83 ec 0c             	sub    esp,0xc
c0004a1c:	50                   	push   eax
c0004a1d:	e8 da 0c 00 00       	call   c00056fc <ff_wtoupper>
c0004a22:	5a                   	pop    edx
c0004a23:	59                   	pop    ecx
c0004a24:	68 b5 01 00 00       	push   0x1b5
c0004a29:	50                   	push   eax
c0004a2a:	e8 c1 0b 00 00       	call   c00055f0 <ff_uni2oem>
c0004a2f:	83 c4 10             	add    esp,0x10
c0004a32:	89 c6                	mov    esi,eax
c0004a34:	66 85 c0             	test   ax,ax
c0004a37:	74 d6                	je     c0004a0f <f_setlabel+0x4f>
c0004a39:	0f b7 d0             	movzx  edx,ax
c0004a3c:	b8 50 d3 01 c0       	mov    eax,0xc001d350
c0004a41:	e8 a8 cf ff ff       	call   c00019ee <chk_chr>
c0004a46:	85 c0                	test   eax,eax
c0004a48:	75 c5                	jne    c0004a0f <f_setlabel+0x4f>
c0004a4a:	66 81 fe ff 00       	cmp    si,0xff
c0004a4f:	0f 87 c9 00 00 00    	ja     c0004b1e <f_setlabel+0x15e>
c0004a55:	e9 e4 00 00 00       	jmp    c0004b3e <f_setlabel+0x17e>
c0004a5a:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0004a5f:	74 ae                	je     c0004a0f <f_setlabel+0x4f>
c0004a61:	85 db                	test   ebx,ebx
c0004a63:	74 0e                	je     c0004a73 <f_setlabel+0xb3>
c0004a65:	8d 43 ff             	lea    eax,[ebx-0x1]
c0004a68:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0004a6d:	75 04                	jne    c0004a73 <f_setlabel+0xb3>
c0004a6f:	89 c3                	mov    ebx,eax
c0004a71:	eb ee                	jmp    c0004a61 <f_setlabel+0xa1>
c0004a73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004a77:	31 d2                	xor    edx,edx
c0004a79:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004a7d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004a85:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a89:	e8 f6 e1 ff ff       	call   c0002c84 <dir_sdi>
c0004a8e:	89 c6                	mov    esi,eax
c0004a90:	85 c0                	test   eax,eax
c0004a92:	0f 85 b0 00 00 00    	jne    c0004b48 <f_setlabel+0x188>
c0004a98:	ba 01 00 00 00       	mov    edx,0x1
c0004a9d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa1:	e8 cf e5 ff ff       	call   c0003075 <dir_read>
c0004aa6:	85 c0                	test   eax,eax
c0004aa8:	75 18                	jne    c0004ac2 <f_setlabel+0x102>
c0004aaa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004aae:	85 db                	test   ebx,ebx
c0004ab0:	74 0b                	je     c0004abd <f_setlabel+0xfd>
c0004ab2:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ab7:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0004abb:	eb 47                	jmp    c0004b04 <f_setlabel+0x144>
c0004abd:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0004ac0:	eb 47                	jmp    c0004b09 <f_setlabel+0x149>
c0004ac2:	83 f8 04             	cmp    eax,0x4
c0004ac5:	75 53                	jne    c0004b1a <f_setlabel+0x15a>
c0004ac7:	85 db                	test   ebx,ebx
c0004ac9:	74 7d                	je     c0004b48 <f_setlabel+0x188>
c0004acb:	ba 01 00 00 00       	mov    edx,0x1
c0004ad0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ad4:	e8 3b e5 ff ff       	call   c0003014 <dir_alloc>
c0004ad9:	89 c6                	mov    esi,eax
c0004adb:	85 c0                	test   eax,eax
c0004add:	75 69                	jne    c0004b48 <f_setlabel+0x188>
c0004adf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ae4:	31 d2                	xor    edx,edx
c0004ae6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004aea:	e8 d1 ce ff ff       	call   c00019c0 <mem_set>
c0004aef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004af3:	b9 0b 00 00 00       	mov    ecx,0xb
c0004af8:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0004afc:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0004b00:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b04:	e8 a2 ce ff ff       	call   c00019ab <mem_cpy>
c0004b09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004b0d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004b15:	e8 bf dd ff ff       	call   c00028d9 <sync_fs>
c0004b1a:	89 c6                	mov    esi,eax
c0004b1c:	eb 2a                	jmp    c0004b48 <f_setlabel+0x188>
c0004b1e:	83 fb 09             	cmp    ebx,0x9
c0004b21:	0f 87 e8 fe ff ff    	ja     c0004a0f <f_setlabel+0x4f>
c0004b27:	89 f0                	mov    eax,esi
c0004b29:	66 c1 e8 08          	shr    ax,0x8
c0004b2d:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0004b31:	43                   	inc    ebx
c0004b32:	89 f0                	mov    eax,esi
c0004b34:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0004b38:	43                   	inc    ebx
c0004b39:	e9 b8 fe ff ff       	jmp    c00049f6 <f_setlabel+0x36>
c0004b3e:	83 fb 0a             	cmp    ebx,0xa
c0004b41:	76 ef                	jbe    c0004b32 <f_setlabel+0x172>
c0004b43:	e9 c7 fe ff ff       	jmp    c0004a0f <f_setlabel+0x4f>
c0004b48:	89 f0                	mov    eax,esi
c0004b4a:	83 c4 54             	add    esp,0x54
c0004b4d:	5b                   	pop    ebx
c0004b4e:	5e                   	pop    esi
c0004b4f:	c3                   	ret    

c0004b50 <f_expand>:
c0004b50:	55                   	push   ebp
c0004b51:	57                   	push   edi
c0004b52:	56                   	push   esi
c0004b53:	53                   	push   ebx
c0004b54:	83 ec 2c             	sub    esp,0x2c
c0004b57:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004b5b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004b5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004b63:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b67:	89 d8                	mov    eax,ebx
c0004b69:	e8 00 d1 ff ff       	call   c0001c6e <validate>
c0004b6e:	89 c6                	mov    esi,eax
c0004b70:	85 c0                	test   eax,eax
c0004b72:	0f 85 2e 01 00 00    	jne    c0004ca6 <f_expand+0x156>
c0004b78:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b7c:	85 f6                	test   esi,esi
c0004b7e:	0f 85 22 01 00 00    	jne    c0004ca6 <f_expand+0x156>
c0004b84:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0004b89:	75 0a                	jne    c0004b95 <f_expand+0x45>
c0004b8b:	be 07 00 00 00       	mov    esi,0x7
c0004b90:	e9 11 01 00 00       	jmp    c0004ca6 <f_expand+0x156>
c0004b95:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0004b99:	75 f0                	jne    c0004b8b <f_expand+0x3b>
c0004b9b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b9f:	74 ea                	je     c0004b8b <f_expand+0x3b>
c0004ba1:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004ba5:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0004ba9:	c1 e1 09             	shl    ecx,0x9
c0004bac:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004baf:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0004bb3:	0f 95 c0             	setne  al
c0004bb6:	31 d2                	xor    edx,edx
c0004bb8:	0f b6 c0             	movzx  eax,al
c0004bbb:	89 c7                	mov    edi,eax
c0004bbd:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004bc1:	f7 f1                	div    ecx
c0004bc3:	01 f8                	add    eax,edi
c0004bc5:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0004bc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004bcc:	83 ff 01             	cmp    edi,0x1
c0004bcf:	76 05                	jbe    c0004bd6 <f_expand+0x86>
c0004bd1:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0004bd4:	77 05                	ja     c0004bdb <f_expand+0x8b>
c0004bd6:	bf 02 00 00 00       	mov    edi,0x2
c0004bdb:	89 3c 24             	mov    DWORD PTR [esp],edi
c0004bde:	89 fd                	mov    ebp,edi
c0004be0:	31 c9                	xor    ecx,ecx
c0004be2:	89 ea                	mov    edx,ebp
c0004be4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004be8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004bea:	45                   	inc    ebp
c0004beb:	e8 92 df ff ff       	call   c0002b82 <get_fat.isra.2>
c0004bf0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004bf4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf8:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0004bfb:	77 05                	ja     c0004c02 <f_expand+0xb2>
c0004bfd:	bd 02 00 00 00       	mov    ebp,0x2
c0004c02:	83 f8 01             	cmp    eax,0x1
c0004c05:	74 20                	je     c0004c27 <f_expand+0xd7>
c0004c07:	83 f8 ff             	cmp    eax,0xffffffff
c0004c0a:	74 22                	je     c0004c2e <f_expand+0xde>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	75 09                	jne    c0004c19 <f_expand+0xc9>
c0004c10:	41                   	inc    ecx
c0004c11:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0004c15:	75 07                	jne    c0004c1e <f_expand+0xce>
c0004c17:	eb 1c                	jmp    c0004c35 <f_expand+0xe5>
c0004c19:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0004c1c:	31 c9                	xor    ecx,ecx
c0004c1e:	39 fd                	cmp    ebp,edi
c0004c20:	75 c0                	jne    c0004be2 <f_expand+0x92>
c0004c22:	e9 64 ff ff ff       	jmp    c0004b8b <f_expand+0x3b>
c0004c27:	be 02 00 00 00       	mov    esi,0x2
c0004c2c:	eb 78                	jmp    c0004ca6 <f_expand+0x156>
c0004c2e:	be 01 00 00 00       	mov    esi,0x1
c0004c33:	eb 71                	jmp    c0004ca6 <f_expand+0x156>
c0004c35:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0004c3a:	74 2b                	je     c0004c67 <f_expand+0x117>
c0004c3c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004c3f:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0004c43:	85 ed                	test   ebp,ebp
c0004c45:	74 24                	je     c0004c6b <f_expand+0x11b>
c0004c47:	83 c9 ff             	or     ecx,0xffffffff
c0004c4a:	83 fd 01             	cmp    ebp,0x1
c0004c4d:	74 03                	je     c0004c52 <f_expand+0x102>
c0004c4f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0004c52:	89 fa                	mov    edx,edi
c0004c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c58:	e8 10 d5 ff ff       	call   c000216d <put_fat>
c0004c5d:	85 c0                	test   eax,eax
c0004c5f:	75 43                	jne    c0004ca4 <f_expand+0x154>
c0004c61:	89 f8                	mov    eax,edi
c0004c63:	4d                   	dec    ebp
c0004c64:	47                   	inc    edi
c0004c65:	eb dc                	jmp    c0004c43 <f_expand+0xf3>
c0004c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004c6a:	48                   	dec    eax
c0004c6b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004c6f:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0004c74:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0004c77:	74 2d                	je     c0004ca6 <f_expand+0x156>
c0004c79:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004c7d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004c80:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c83:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004c87:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c8a:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0004c8d:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0004c90:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0004c93:	39 c8                	cmp    eax,ecx
c0004c95:	77 0f                	ja     c0004ca6 <f_expand+0x156>
c0004c97:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0004c9b:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0004c9f:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004ca2:	eb 02                	jmp    c0004ca6 <f_expand+0x156>
c0004ca4:	89 c6                	mov    esi,eax
c0004ca6:	83 c4 2c             	add    esp,0x2c
c0004ca9:	89 f0                	mov    eax,esi
c0004cab:	5b                   	pop    ebx
c0004cac:	5e                   	pop    esi
c0004cad:	5f                   	pop    edi
c0004cae:	5d                   	pop    ebp
c0004caf:	c3                   	ret    

c0004cb0 <f_forward>:
c0004cb0:	55                   	push   ebp
c0004cb1:	57                   	push   edi
c0004cb2:	56                   	push   esi
c0004cb3:	53                   	push   ebx
c0004cb4:	83 ec 2c             	sub    esp,0x2c
c0004cb7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004cbb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004cbf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004cc5:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004cc9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ccd:	89 d8                	mov    eax,ebx
c0004ccf:	e8 9a cf ff ff       	call   c0001c6e <validate>
c0004cd4:	89 c5                	mov    ebp,eax
c0004cd6:	85 c0                	test   eax,eax
c0004cd8:	0f 85 56 01 00 00    	jne    c0004e34 <f_forward+0x184>
c0004cde:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004ce2:	85 ed                	test   ebp,ebp
c0004ce4:	0f 85 4a 01 00 00    	jne    c0004e34 <f_forward+0x184>
c0004cea:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004cee:	0f 84 3b 01 00 00    	je     c0004e2f <f_forward+0x17f>
c0004cf4:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0004cf7:	2b 7b 14             	sub    edi,DWORD PTR [ebx+0x14]
c0004cfa:	39 f7                	cmp    edi,esi
c0004cfc:	0f 86 a0 00 00 00    	jbe    c0004da2 <f_forward+0xf2>
c0004d02:	89 f7                	mov    edi,esi
c0004d04:	e9 99 00 00 00       	jmp    c0004da2 <f_forward+0xf2>
c0004d09:	50                   	push   eax
c0004d0a:	50                   	push   eax
c0004d0b:	6a 00                	push   0x0
c0004d0d:	6a 00                	push   0x0
c0004d0f:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0004d13:	83 c4 10             	add    esp,0x10
c0004d16:	85 c0                	test   eax,eax
c0004d18:	0f 84 16 01 00 00    	je     c0004e34 <f_forward+0x184>
c0004d1e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004d29:	89 d0                	mov    eax,edx
c0004d2b:	4e                   	dec    esi
c0004d2c:	c1 e8 09             	shr    eax,0x9
c0004d2f:	21 c6                	and    esi,eax
c0004d31:	89 d0                	mov    eax,edx
c0004d33:	25 ff 01 00 00       	and    eax,0x1ff
c0004d38:	09 f0                	or     eax,esi
c0004d3a:	74 73                	je     c0004daf <f_forward+0xff>
c0004d3c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004d40:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004d43:	89 c8                	mov    eax,ecx
c0004d45:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004d49:	e8 b8 cc ff ff       	call   c0001a06 <clst2sect>
c0004d4e:	85 c0                	test   eax,eax
c0004d50:	74 75                	je     c0004dc7 <f_forward+0x117>
c0004d52:	01 f0                	add    eax,esi
c0004d54:	8d 73 2c             	lea    esi,[ebx+0x2c]
c0004d57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004d5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004d5e:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0004d62:	0f 85 82 00 00 00    	jne    c0004dea <f_forward+0x13a>
c0004d68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004d6c:	ba 00 02 00 00       	mov    edx,0x200
c0004d71:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004d74:	89 f9                	mov    ecx,edi
c0004d76:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004d79:	25 ff 01 00 00       	and    eax,0x1ff
c0004d7e:	29 c2                	sub    edx,eax
c0004d80:	39 d7                	cmp    edi,edx
c0004d82:	76 02                	jbe    c0004d86 <f_forward+0xd6>
c0004d84:	89 d1                	mov    ecx,edx
c0004d86:	01 f0                	add    eax,esi
c0004d88:	52                   	push   edx
c0004d89:	52                   	push   edx
c0004d8a:	51                   	push   ecx
c0004d8b:	50                   	push   eax
c0004d8c:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0004d90:	83 c4 10             	add    esp,0x10
c0004d93:	85 c0                	test   eax,eax
c0004d95:	74 30                	je     c0004dc7 <f_forward+0x117>
c0004d97:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0004d9a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004d9e:	29 c7                	sub    edi,eax
c0004da0:	01 01                	add    DWORD PTR [ecx],eax
c0004da2:	85 ff                	test   edi,edi
c0004da4:	0f 85 5f ff ff ff    	jne    c0004d09 <f_forward+0x59>
c0004daa:	e9 85 00 00 00       	jmp    c0004e34 <f_forward+0x184>
c0004daf:	85 d2                	test   edx,edx
c0004db1:	75 05                	jne    c0004db8 <f_forward+0x108>
c0004db3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004db6:	eb 0a                	jmp    c0004dc2 <f_forward+0x112>
c0004db8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004dbb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004dbd:	e8 c0 dd ff ff       	call   c0002b82 <get_fat.isra.2>
c0004dc2:	83 f8 01             	cmp    eax,0x1
c0004dc5:	77 0b                	ja     c0004dd2 <f_forward+0x122>
c0004dc7:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004dcb:	bd 02 00 00 00       	mov    ebp,0x2
c0004dd0:	eb 62                	jmp    c0004e34 <f_forward+0x184>
c0004dd2:	83 f8 ff             	cmp    eax,0xffffffff
c0004dd5:	75 0b                	jne    c0004de2 <f_forward+0x132>
c0004dd7:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004ddb:	bd 01 00 00 00       	mov    ebp,0x1
c0004de0:	eb 52                	jmp    c0004e34 <f_forward+0x184>
c0004de2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004de5:	e9 52 ff ff ff       	jmp    c0004d3c <f_forward+0x8c>
c0004dea:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004dee:	79 1d                	jns    c0004e0d <f_forward+0x15d>
c0004df0:	6a 01                	push   0x1
c0004df2:	50                   	push   eax
c0004df3:	56                   	push   esi
c0004df4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0004df8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004dfc:	50                   	push   eax
c0004dfd:	e8 48 cb ff ff       	call   c000194a <disk_write>
c0004e02:	83 c4 10             	add    esp,0x10
c0004e05:	85 c0                	test   eax,eax
c0004e07:	75 ce                	jne    c0004dd7 <f_forward+0x127>
c0004e09:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004e0d:	6a 01                	push   0x1
c0004e0f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0004e13:	56                   	push   esi
c0004e14:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004e18:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004e1c:	50                   	push   eax
c0004e1d:	e8 12 cb ff ff       	call   c0001934 <disk_read>
c0004e22:	83 c4 10             	add    esp,0x10
c0004e25:	85 c0                	test   eax,eax
c0004e27:	0f 84 3b ff ff ff    	je     c0004d68 <f_forward+0xb8>
c0004e2d:	eb a8                	jmp    c0004dd7 <f_forward+0x127>
c0004e2f:	bd 07 00 00 00       	mov    ebp,0x7
c0004e34:	83 c4 2c             	add    esp,0x2c
c0004e37:	89 e8                	mov    eax,ebp
c0004e39:	5b                   	pop    ebx
c0004e3a:	5e                   	pop    esi
c0004e3b:	5f                   	pop    edi
c0004e3c:	5d                   	pop    ebp
c0004e3d:	c3                   	ret    

c0004e3e <f_mkfs>:
c0004e3e:	55                   	push   ebp
c0004e3f:	57                   	push   edi
c0004e40:	56                   	push   esi
c0004e41:	53                   	push   ebx
c0004e42:	83 ec 4c             	sub    esp,0x4c
c0004e45:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e49:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e4d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e51:	e8 cb cd ff ff       	call   c0001c21 <get_ldnumber>
c0004e56:	ba 0b 00 00 00       	mov    edx,0xb
c0004e5b:	85 c0                	test   eax,eax
c0004e5d:	0f 88 81 07 00 00    	js     c00055e4 <f_mkfs+0x7a6>
c0004e63:	8b 14 85 00 03 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdfd00]
c0004e6a:	85 d2                	test   edx,edx
c0004e6c:	74 03                	je     c0004e71 <f_mkfs+0x33>
c0004e6e:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0004e71:	85 ff                	test   edi,edi
c0004e73:	75 05                	jne    c0004e7a <f_mkfs+0x3c>
c0004e75:	bf 40 d3 01 c0       	mov    edi,0xc001d340
c0004e7a:	83 ec 0c             	sub    esp,0xc
c0004e7d:	0f b6 e8             	movzx  ebp,al
c0004e80:	55                   	push   ebp
c0004e81:	e8 ab ca ff ff       	call   c0001931 <disk_initialize>
c0004e86:	83 c4 10             	add    esp,0x10
c0004e89:	ba 03 00 00 00       	mov    edx,0x3
c0004e8e:	a8 01                	test   al,0x1
c0004e90:	0f 85 4e 07 00 00    	jne    c00055e4 <f_mkfs+0x7a6>
c0004e96:	ba 0a 00 00 00       	mov    edx,0xa
c0004e9b:	a8 04                	test   al,0x4
c0004e9d:	0f 85 41 07 00 00    	jne    c00055e4 <f_mkfs+0x7a6>
c0004ea3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0004ea6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004eaa:	85 c0                	test   eax,eax
c0004eac:	75 1d                	jne    c0004ecb <f_mkfs+0x8d>
c0004eae:	51                   	push   ecx
c0004eaf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004eb3:	50                   	push   eax
c0004eb4:	6a 03                	push   0x3
c0004eb6:	55                   	push   ebp
c0004eb7:	e8 a4 ca ff ff       	call   c0001960 <disk_ioctl>
c0004ebc:	83 c4 10             	add    esp,0x10
c0004ebf:	85 c0                	test   eax,eax
c0004ec1:	74 08                	je     c0004ecb <f_mkfs+0x8d>
c0004ec3:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0004ecb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0004ecf:	8d 42 ff             	lea    eax,[edx-0x1]
c0004ed2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0004ed7:	77 04                	ja     c0004edd <f_mkfs+0x9f>
c0004ed9:	85 c2                	test   edx,eax
c0004edb:	74 08                	je     c0004ee5 <f_mkfs+0xa7>
c0004edd:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0004ee5:	8a 47 01             	mov    al,BYTE PTR [edi+0x1]
c0004ee8:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0004eec:	48                   	dec    eax
c0004eed:	3c 01                	cmp    al,0x1
c0004eef:	76 05                	jbe    c0004ef6 <f_mkfs+0xb8>
c0004ef1:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0004ef6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0004ef9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004efd:	48                   	dec    eax
c0004efe:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0004f03:	77 07                	ja     c0004f0c <f_mkfs+0xce>
c0004f05:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c0004f0a:	74 08                	je     c0004f14 <f_mkfs+0xd6>
c0004f0c:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0004f14:	8b 77 0c             	mov    esi,DWORD PTR [edi+0xc]
c0004f17:	81 fe 00 00 00 01    	cmp    esi,0x1000000
c0004f1d:	77 07                	ja     c0004f26 <f_mkfs+0xe8>
c0004f1f:	8d 46 ff             	lea    eax,[esi-0x1]
c0004f22:	85 f0                	test   eax,esi
c0004f24:	74 02                	je     c0004f28 <f_mkfs+0xea>
c0004f26:	31 f6                	xor    esi,esi
c0004f28:	85 db                	test   ebx,ebx
c0004f2a:	0f 84 9d 06 00 00    	je     c00055cd <f_mkfs+0x78f>
c0004f30:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0004f38:	0f 86 8f 06 00 00    	jbe    c00055cd <f_mkfs+0x78f>
c0004f3e:	8a 07                	mov    al,BYTE PTR [edi]
c0004f40:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0004f48:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0004f4c:	52                   	push   edx
c0004f4d:	8d 44 24 38          	lea    eax,[esp+0x38]
c0004f51:	50                   	push   eax
c0004f52:	6a 01                	push   0x1
c0004f54:	55                   	push   ebp
c0004f55:	e8 06 ca ff ff       	call   c0001960 <disk_ioctl>
c0004f5a:	83 c4 10             	add    esp,0x10
c0004f5d:	ba 01 00 00 00       	mov    edx,0x1
c0004f62:	85 c0                	test   eax,eax
c0004f64:	0f 85 7a 06 00 00    	jne    c00055e4 <f_mkfs+0x7a6>
c0004f6a:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0004f6e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0004f76:	24 08                	and    al,0x8
c0004f78:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0004f7c:	75 18                	jne    c0004f96 <f_mkfs+0x158>
c0004f7e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0004f82:	83 f8 3f             	cmp    eax,0x3f
c0004f85:	76 0f                	jbe    c0004f96 <f_mkfs+0x158>
c0004f87:	83 e8 3f             	sub    eax,0x3f
c0004f8a:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c0004f92:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0004f96:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0004f9a:	ba 0e 00 00 00       	mov    edx,0xe
c0004f9f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004fa3:	83 f8 7f             	cmp    eax,0x7f
c0004fa6:	0f 86 38 06 00 00    	jbe    c00055e4 <f_mkfs+0x7a6>
c0004fac:	b9 80 00 00 00       	mov    ecx,0x80
c0004fb1:	81 fe ff 01 01 00    	cmp    esi,0x101ff
c0004fb7:	77 05                	ja     c0004fbe <f_mkfs+0x180>
c0004fb9:	89 f1                	mov    ecx,esi
c0004fbb:	c1 e9 09             	shr    ecx,0x9
c0004fbe:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0004fc2:	8a 54 24 2c          	mov    dl,BYTE PTR [esp+0x2c]
c0004fc6:	83 e0 01             	and    eax,0x1
c0004fc9:	80 e2 02             	and    dl,0x2
c0004fcc:	88 54 24 2e          	mov    BYTE PTR [esp+0x2e],dl
c0004fd0:	74 0d                	je     c0004fdf <f_mkfs+0x1a1>
c0004fd2:	84 c0                	test   al,al
c0004fd4:	0f 84 69 01 00 00    	je     c0005143 <f_mkfs+0x305>
c0004fda:	e9 ac 01 00 00       	jmp    c000518b <f_mkfs+0x34d>
c0004fdf:	ba 13 00 00 00       	mov    edx,0x13
c0004fe4:	84 c0                	test   al,al
c0004fe6:	0f 85 9f 01 00 00    	jne    c000518b <f_mkfs+0x34d>
c0004fec:	e9 f3 05 00 00       	jmp    c00055e4 <f_mkfs+0x7a6>
c0004ff1:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c0004ff6:	0f 85 3d 02 00 00    	jne    c0005239 <f_mkfs+0x3fb>
c0004ffc:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005001:	0f 86 5d 01 00 00    	jbe    c0005164 <f_mkfs+0x326>
c0005007:	85 c9                	test   ecx,ecx
c0005009:	0f 85 c5 05 00 00    	jne    c00055d4 <f_mkfs+0x796>
c000500f:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005012:	83 f9 40             	cmp    ecx,0x40
c0005015:	0f 86 70 01 00 00    	jbe    c000518b <f_mkfs+0x34d>
c000501b:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005020:	0f 84 8f 01 00 00    	je     c00051b5 <f_mkfs+0x377>
c0005026:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000502a:	ba 30 d3 01 c0       	mov    edx,0xc001d330
c000502f:	c1 ee 11             	shr    esi,0x11
c0005032:	b9 01 00 00 00       	mov    ecx,0x1
c0005037:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000503a:	66 85 c0             	test   ax,ax
c000503d:	0f 85 0f 01 00 00    	jne    c0005152 <f_mkfs+0x314>
c0005043:	31 f6                	xor    esi,esi
c0005045:	31 d2                	xor    edx,edx
c0005047:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000504b:	f7 f1                	div    ecx
c000504d:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005054:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005059:	c1 ea 09             	shr    edx,0x9
c000505c:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005061:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0005065:	ba 0e 00 00 00       	mov    edx,0xe
c000506a:	0f 87 74 05 00 00    	ja     c00055e4 <f_mkfs+0x7a6>
c0005070:	89 cf                	mov    edi,ecx
c0005072:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000507a:	89 f1                	mov    ecx,esi
c000507c:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c0005084:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c0005089:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000508e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005092:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005096:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c000509a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000509e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00050a2:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c00050a7:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00050ab:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00050af:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00050b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00050b7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00050bb:	8d 74 30 ff          	lea    esi,[eax+esi*1-0x1]
c00050bf:	f7 d8                	neg    eax
c00050c1:	21 c6                	and    esi,eax
c00050c3:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c00050c7:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00050cc:	0f 85 41 01 00 00    	jne    c0005213 <f_mkfs+0x3d5>
c00050d2:	01 74 24 1c          	add    DWORD PTR [esp+0x1c],esi
c00050d6:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c00050da:	89 f8                	mov    eax,edi
c00050dc:	ba 0e 00 00 00       	mov    edx,0xe
c00050e1:	c1 e0 04             	shl    eax,0x4
c00050e4:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00050e8:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00050ec:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00050f0:	0f 82 ee 04 00 00    	jb     c00055e4 <f_mkfs+0x7a6>
c00050f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00050fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00050fe:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005102:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c0005107:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c000510b:	29 d0                	sub    eax,edx
c000510d:	31 d2                	xor    edx,edx
c000510f:	f7 f7                	div    edi
c0005111:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005116:	89 c6                	mov    esi,eax
c0005118:	0f 85 d3 fe ff ff    	jne    c0004ff1 <f_mkfs+0x1b3>
c000511e:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005123:	0f 87 25 01 00 00    	ja     c000524e <f_mkfs+0x410>
c0005129:	ba 0e 00 00 00       	mov    edx,0xe
c000512e:	85 c9                	test   ecx,ecx
c0005130:	0f 85 ae 04 00 00    	jne    c00055e4 <f_mkfs+0x7a6>
c0005136:	83 ff 01             	cmp    edi,0x1
c0005139:	0f 86 a5 04 00 00    	jbe    c00055e4 <f_mkfs+0x7a6>
c000513f:	d1 ef                	shr    edi,1
c0005141:	89 f9                	mov    ecx,edi
c0005143:	89 ce                	mov    esi,ecx
c0005145:	85 c9                	test   ecx,ecx
c0005147:	0f 85 f8 fe ff ff    	jne    c0005045 <f_mkfs+0x207>
c000514d:	e9 d4 fe ff ff       	jmp    c0005026 <f_mkfs+0x1e8>
c0005152:	83 c2 02             	add    edx,0x2
c0005155:	39 f0                	cmp    eax,esi
c0005157:	0f 87 e6 fe ff ff    	ja     c0005043 <f_mkfs+0x205>
c000515d:	01 c9                	add    ecx,ecx
c000515f:	e9 d3 fe ff ff       	jmp    c0005037 <f_mkfs+0x1f9>
c0005164:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005169:	0f 87 df 00 00 00    	ja     c000524e <f_mkfs+0x410>
c000516f:	ba 0e 00 00 00       	mov    edx,0xe
c0005174:	85 c9                	test   ecx,ecx
c0005176:	0f 85 68 04 00 00    	jne    c00055e4 <f_mkfs+0x7a6>
c000517c:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000517f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005185:	0f 87 59 04 00 00    	ja     c00055e4 <f_mkfs+0x7a6>
c000518b:	89 cf                	mov    edi,ecx
c000518d:	85 c9                	test   ecx,ecx
c000518f:	75 32                	jne    c00051c3 <f_mkfs+0x385>
c0005191:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0005195:	ba 20 d3 01 c0       	mov    edx,0xc001d320
c000519a:	c1 ee 0c             	shr    esi,0xc
c000519d:	bf 01 00 00 00       	mov    edi,0x1
c00051a2:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00051a5:	66 85 c0             	test   ax,ax
c00051a8:	74 19                	je     c00051c3 <f_mkfs+0x385>
c00051aa:	83 c2 02             	add    edx,0x2
c00051ad:	39 f0                	cmp    eax,esi
c00051af:	77 12                	ja     c00051c3 <f_mkfs+0x385>
c00051b1:	01 ff                	add    edi,edi
c00051b3:	eb ed                	jmp    c00051a2 <f_mkfs+0x364>
c00051b5:	89 cf                	mov    edi,ecx
c00051b7:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00051bd:	0f 87 1c 04 00 00    	ja     c00055df <f_mkfs+0x7a1>
c00051c3:	31 d2                	xor    edx,edx
c00051c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00051c9:	f7 f7                	div    edi
c00051cb:	3d f5 0f 00 00       	cmp    eax,0xff5
c00051d0:	76 0c                	jbe    c00051de <f_mkfs+0x3a0>
c00051d2:	83 c0 02             	add    eax,0x2
c00051d5:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00051da:	01 c0                	add    eax,eax
c00051dc:	eb 0e                	jmp    c00051ec <f_mkfs+0x3ae>
c00051de:	8d 04 40             	lea    eax,[eax+eax*2]
c00051e1:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00051e6:	40                   	inc    eax
c00051e7:	d1 e8                	shr    eax,1
c00051e9:	83 c0 03             	add    eax,0x3
c00051ec:	05 ff 01 00 00       	add    eax,0x1ff
c00051f1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00051f9:	c1 e8 09             	shr    eax,0x9
c00051fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005200:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005204:	c1 e0 05             	shl    eax,0x5
c0005207:	c1 e8 09             	shr    eax,0x9
c000520a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000520e:	e9 76 fe ff ff       	jmp    c0005089 <f_mkfs+0x24b>
c0005213:	31 d2                	xor    edx,edx
c0005215:	89 f0                	mov    eax,esi
c0005217:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c000521b:	85 d2                	test   edx,edx
c000521d:	74 09                	je     c0005228 <f_mkfs+0x3ea>
c000521f:	4e                   	dec    esi
c0005220:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005224:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0005228:	89 f0                	mov    eax,esi
c000522a:	31 d2                	xor    edx,edx
c000522c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005230:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005234:	e9 a1 fe ff ff       	jmp    c00050da <f_mkfs+0x29c>
c0005239:	ba 0e 00 00 00       	mov    edx,0xe
c000523e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005243:	0f 87 9b 03 00 00    	ja     c00055e4 <f_mkfs+0x7a6>
c0005249:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000524e:	31 d2                	xor    edx,edx
c0005250:	b9 00 02 00 00       	mov    ecx,0x200
c0005255:	89 d8                	mov    eax,ebx
c0005257:	e8 64 c7 ff ff       	call   c00019c0 <mem_set>
c000525c:	b9 0b 00 00 00       	mov    ecx,0xb
c0005261:	ba d2 d2 01 c0       	mov    edx,0xc001d2d2
c0005266:	89 d8                	mov    eax,ebx
c0005268:	e8 3e c7 ff ff       	call   c00019ab <mem_cpy>
c000526d:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005270:	ba 00 02 00 00       	mov    edx,0x200
c0005275:	e8 2a c7 ff ff       	call   c00019a4 <st_word>
c000527a:	89 f8                	mov    eax,edi
c000527c:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0005281:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005284:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005287:	e8 18 c7 ff ff       	call   c00019a4 <st_word>
c000528c:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c0005290:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005295:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005298:	75 08                	jne    c00052a2 <f_mkfs+0x464>
c000529a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00052a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a6:	8d 43 11             	lea    eax,[ebx+0x11]
c00052a9:	e8 f6 c6 ff ff       	call   c00019a4 <st_word>
c00052ae:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00052b2:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00052b8:	77 0a                	ja     c00052c4 <f_mkfs+0x486>
c00052ba:	8d 43 13             	lea    eax,[ebx+0x13]
c00052bd:	e8 e2 c6 ff ff       	call   c00019a4 <st_word>
c00052c2:	eb 08                	jmp    c00052cc <f_mkfs+0x48e>
c00052c4:	8d 43 20             	lea    eax,[ebx+0x20]
c00052c7:	e8 dc c6 ff ff       	call   c00019a8 <st_dword>
c00052cc:	8d 43 18             	lea    eax,[ebx+0x18]
c00052cf:	ba 3f 00 00 00       	mov    edx,0x3f
c00052d4:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00052d8:	e8 c7 c6 ff ff       	call   c00019a4 <st_word>
c00052dd:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00052e0:	ba ff 00 00 00       	mov    edx,0xff
c00052e5:	e8 ba c6 ff ff       	call   c00019a4 <st_word>
c00052ea:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00052ed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00052f1:	e8 b2 c6 ff ff       	call   c00019a8 <st_dword>
c00052f6:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00052fb:	75 57                	jne    c0005354 <f_mkfs+0x516>
c00052fd:	8d 43 43             	lea    eax,[ebx+0x43]
c0005300:	ba 00 00 21 50       	mov    edx,0x50210000
c0005305:	e8 9e c6 ff ff       	call   c00019a8 <st_dword>
c000530a:	8d 43 24             	lea    eax,[ebx+0x24]
c000530d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005311:	e8 92 c6 ff ff       	call   c00019a8 <st_dword>
c0005316:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005319:	ba 02 00 00 00       	mov    edx,0x2
c000531e:	e8 85 c6 ff ff       	call   c00019a8 <st_dword>
c0005323:	8d 43 30             	lea    eax,[ebx+0x30]
c0005326:	ba 01 00 00 00       	mov    edx,0x1
c000532b:	e8 74 c6 ff ff       	call   c00019a4 <st_word>
c0005330:	8d 43 32             	lea    eax,[ebx+0x32]
c0005333:	ba 06 00 00 00       	mov    edx,0x6
c0005338:	e8 67 c6 ff ff       	call   c00019a4 <st_word>
c000533d:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005341:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005345:	8d 43 47             	lea    eax,[ebx+0x47]
c0005348:	b9 13 00 00 00       	mov    ecx,0x13
c000534d:	ba de d2 01 c0       	mov    edx,0xc001d2de
c0005352:	eb 2f                	jmp    c0005383 <f_mkfs+0x545>
c0005354:	8d 43 27             	lea    eax,[ebx+0x27]
c0005357:	ba 00 00 21 50       	mov    edx,0x50210000
c000535c:	e8 47 c6 ff ff       	call   c00019a8 <st_dword>
c0005361:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005366:	8d 43 16             	lea    eax,[ebx+0x16]
c0005369:	e8 36 c6 ff ff       	call   c00019a4 <st_word>
c000536e:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005372:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005376:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005379:	b9 13 00 00 00       	mov    ecx,0x13
c000537e:	ba f2 d2 01 c0       	mov    edx,0xc001d2f2
c0005383:	e8 23 c6 ff ff       	call   c00019ab <mem_cpy>
c0005388:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000538e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005397:	e8 08 c6 ff ff       	call   c00019a4 <st_word>
c000539c:	6a 01                	push   0x1
c000539e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053a2:	53                   	push   ebx
c00053a3:	55                   	push   ebp
c00053a4:	e8 a1 c5 ff ff       	call   c000194a <disk_write>
c00053a9:	83 c4 10             	add    esp,0x10
c00053ac:	85 c0                	test   eax,eax
c00053ae:	74 0a                	je     c00053ba <f_mkfs+0x57c>
c00053b0:	ba 01 00 00 00       	mov    edx,0x1
c00053b5:	e9 2a 02 00 00       	jmp    c00055e4 <f_mkfs+0x7a6>
c00053ba:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00053bf:	0f 85 8f 00 00 00    	jne    c0005454 <f_mkfs+0x616>
c00053c5:	6a 01                	push   0x1
c00053c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00053cb:	83 c0 06             	add    eax,0x6
c00053ce:	50                   	push   eax
c00053cf:	53                   	push   ebx
c00053d0:	55                   	push   ebp
c00053d1:	e8 74 c5 ff ff       	call   c000194a <disk_write>
c00053d6:	b9 00 02 00 00       	mov    ecx,0x200
c00053db:	31 d2                	xor    edx,edx
c00053dd:	89 d8                	mov    eax,ebx
c00053df:	e8 dc c5 ff ff       	call   c00019c0 <mem_set>
c00053e4:	ba 52 52 61 41       	mov    edx,0x41615252
c00053e9:	89 d8                	mov    eax,ebx
c00053eb:	e8 b8 c5 ff ff       	call   c00019a8 <st_dword>
c00053f0:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00053f6:	ba 72 72 41 61       	mov    edx,0x61417272
c00053fb:	e8 a8 c5 ff ff       	call   c00019a8 <st_dword>
c0005400:	8d 56 ff             	lea    edx,[esi-0x1]
c0005403:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005409:	e8 9a c5 ff ff       	call   c00019a8 <st_dword>
c000540e:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005414:	ba 02 00 00 00       	mov    edx,0x2
c0005419:	e8 8a c5 ff ff       	call   c00019a8 <st_dword>
c000541e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005423:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005429:	e8 76 c5 ff ff       	call   c00019a4 <st_word>
c000542e:	6a 01                	push   0x1
c0005430:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005434:	83 c0 07             	add    eax,0x7
c0005437:	50                   	push   eax
c0005438:	53                   	push   ebx
c0005439:	55                   	push   ebp
c000543a:	e8 0b c5 ff ff       	call   c000194a <disk_write>
c000543f:	83 c4 20             	add    esp,0x20
c0005442:	6a 01                	push   0x1
c0005444:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005448:	40                   	inc    eax
c0005449:	50                   	push   eax
c000544a:	53                   	push   ebx
c000544b:	55                   	push   ebp
c000544c:	e8 f9 c4 ff ff       	call   c000194a <disk_write>
c0005451:	83 c4 10             	add    esp,0x10
c0005454:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005458:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000545c:	c1 e8 09             	shr    eax,0x9
c000545f:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005465:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005469:	31 d2                	xor    edx,edx
c000546b:	89 d8                	mov    eax,ebx
c000546d:	e8 4e c5 ff ff       	call   c00019c0 <mem_set>
c0005472:	31 c0                	xor    eax,eax
c0005474:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000547c:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c0005481:	0f 94 c0             	sete   al
c0005484:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005488:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c000548c:	81 64 24 0c 00 00 00 ff 	and    DWORD PTR [esp+0xc],0xff000000
c0005494:	81 44 24 0c f8 ff ff 00 	add    DWORD PTR [esp+0xc],0xfffff8
c000549c:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00054a1:	75 21                	jne    c00054c4 <f_mkfs+0x686>
c00054a3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00054a8:	89 d8                	mov    eax,ebx
c00054aa:	e8 f9 c4 ff ff       	call   c00019a8 <st_dword>
c00054af:	8d 43 04             	lea    eax,[ebx+0x4]
c00054b2:	83 ca ff             	or     edx,0xffffffff
c00054b5:	e8 ee c4 ff ff       	call   c00019a8 <st_dword>
c00054ba:	8d 43 08             	lea    eax,[ebx+0x8]
c00054bd:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00054c2:	eb 06                	jmp    c00054ca <f_mkfs+0x68c>
c00054c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054c8:	89 d8                	mov    eax,ebx
c00054ca:	e8 d9 c4 ff ff       	call   c00019a8 <st_dword>
c00054cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054d7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00054db:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054df:	39 ce                	cmp    esi,ecx
c00054e1:	76 02                	jbe    c00054e5 <f_mkfs+0x6a7>
c00054e3:	89 ce                	mov    esi,ecx
c00054e5:	56                   	push   esi
c00054e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00054ea:	53                   	push   ebx
c00054eb:	55                   	push   ebp
c00054ec:	e8 59 c4 ff ff       	call   c000194a <disk_write>
c00054f1:	83 c4 10             	add    esp,0x10
c00054f4:	85 c0                	test   eax,eax
c00054f6:	0f 85 b4 fe ff ff    	jne    c00053b0 <f_mkfs+0x572>
c00054fc:	31 d2                	xor    edx,edx
c00054fe:	b9 00 02 00 00       	mov    ecx,0x200
c0005503:	89 d8                	mov    eax,ebx
c0005505:	e8 b6 c4 ff ff       	call   c00019c0 <mem_set>
c000550a:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000550e:	29 74 24 14          	sub    DWORD PTR [esp+0x14],esi
c0005512:	75 c3                	jne    c00054d7 <f_mkfs+0x699>
c0005514:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005518:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005520:	40                   	inc    eax
c0005521:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005525:	0f 87 71 ff ff ff    	ja     c000549c <f_mkfs+0x65e>
c000552b:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005530:	74 04                	je     c0005536 <f_mkfs+0x6f8>
c0005532:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005536:	89 fe                	mov    esi,edi
c0005538:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000553c:	76 04                	jbe    c0005542 <f_mkfs+0x704>
c000553e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005542:	56                   	push   esi
c0005543:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005547:	53                   	push   ebx
c0005548:	55                   	push   ebp
c0005549:	e8 fc c3 ff ff       	call   c000194a <disk_write>
c000554e:	83 c4 10             	add    esp,0x10
c0005551:	85 c0                	test   eax,eax
c0005553:	0f 85 57 fe ff ff    	jne    c00053b0 <f_mkfs+0x572>
c0005559:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000555d:	29 f7                	sub    edi,esi
c000555f:	75 d5                	jne    c0005536 <f_mkfs+0x6f8>
c0005561:	b1 0c                	mov    cl,0xc
c0005563:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005568:	74 18                	je     c0005582 <f_mkfs+0x744>
c000556a:	b1 06                	mov    cl,0x6
c000556c:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c0005574:	77 0c                	ja     c0005582 <f_mkfs+0x744>
c0005576:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000557b:	0f 94 c1             	sete   cl
c000557e:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0005582:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c0005587:	74 17                	je     c00055a0 <f_mkfs+0x762>
c0005589:	50                   	push   eax
c000558a:	6a 00                	push   0x0
c000558c:	6a 00                	push   0x0
c000558e:	55                   	push   ebp
c000558f:	e8 cc c3 ff ff       	call   c0001960 <disk_ioctl>
c0005594:	31 d2                	xor    edx,edx
c0005596:	83 c4 10             	add    esp,0x10
c0005599:	85 c0                	test   eax,eax
c000559b:	0f 95 c2             	setne  dl
c000559e:	eb 44                	jmp    c00055e4 <f_mkfs+0x7a6>
c00055a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00055a4:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00055ac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00055b0:	0f b6 c9             	movzx  ecx,cl
c00055b3:	83 ec 0c             	sub    esp,0xc
c00055b6:	89 e8                	mov    eax,ebp
c00055b8:	53                   	push   ebx
c00055b9:	8d 54 24 48          	lea    edx,[esp+0x48]
c00055bd:	e8 c7 d3 ff ff       	call   c0002989 <create_partition>
c00055c2:	83 c4 10             	add    esp,0x10
c00055c5:	89 c2                	mov    edx,eax
c00055c7:	85 c0                	test   eax,eax
c00055c9:	74 be                	je     c0005589 <f_mkfs+0x74b>
c00055cb:	eb 17                	jmp    c00055e4 <f_mkfs+0x7a6>
c00055cd:	ba 11 00 00 00       	mov    edx,0x11
c00055d2:	eb 10                	jmp    c00055e4 <f_mkfs+0x7a6>
c00055d4:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c00055d9:	0f 85 64 fb ff ff    	jne    c0005143 <f_mkfs+0x305>
c00055df:	ba 0e 00 00 00       	mov    edx,0xe
c00055e4:	83 c4 4c             	add    esp,0x4c
c00055e7:	89 d0                	mov    eax,edx
c00055e9:	5b                   	pop    ebx
c00055ea:	5e                   	pop    esi
c00055eb:	5f                   	pop    edi
c00055ec:	5d                   	pop    ebp
c00055ed:	c3                   	ret    
c00055ee:	66 90                	xchg   ax,ax

c00055f0 <ff_uni2oem>:
c00055f0:	83 ec 14             	sub    esp,0x14
c00055f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055f7:	66 89 04 24          	mov    WORD PTR [esp],ax
c00055fb:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005602:	c7 44 24 0c 20 d7 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d720
c000560a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000560f:	77 0b                	ja     c000561c <ff_uni2oem+0x2c>
c0005611:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005615:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000561a:	eb 60                	jmp    c000567c <ff_uni2oem+0x8c>
c000561c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005624:	77 56                	ja     c000567c <ff_uni2oem+0x8c>
c0005626:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000562c:	75 4e                	jne    c000567c <ff_uni2oem+0x8c>
c000562e:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005635:	eb 0d                	jmp    c0005644 <ff_uni2oem+0x54>
c0005637:	90                   	nop
c0005638:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000563d:	40                   	inc    eax
c000563e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005643:	90                   	nop
c0005644:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000564a:	77 1c                	ja     c0005668 <ff_uni2oem+0x78>
c000564c:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005651:	01 c0                	add    eax,eax
c0005653:	89 c2                	mov    edx,eax
c0005655:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005659:	01 d0                	add    eax,edx
c000565b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000565e:	0f b7 c0             	movzx  eax,ax
c0005661:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005665:	75 d1                	jne    c0005638 <ff_uni2oem+0x48>
c0005667:	90                   	nop
c0005668:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000566d:	83 e8 80             	sub    eax,0xffffff80
c0005670:	25 ff 00 00 00       	and    eax,0xff
c0005675:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000567a:	66 90                	xchg   ax,ax
c000567c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005681:	83 c4 14             	add    esp,0x14
c0005684:	c3                   	ret    
c0005685:	8d 76 00             	lea    esi,[esi+0x0]

c0005688 <ff_oem2uni>:
c0005688:	83 ec 18             	sub    esp,0x18
c000568b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000568f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005693:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005698:	66 89 04 24          	mov    WORD PTR [esp],ax
c000569c:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00056a3:	c7 44 24 10 20 d7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d720
c00056ab:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00056b1:	77 0d                	ja     c00056c0 <ff_oem2uni+0x38>
c00056b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00056b7:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00056bc:	eb 32                	jmp    c00056f0 <ff_oem2uni+0x68>
c00056be:	66 90                	xchg   ax,ax
c00056c0:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00056c6:	75 28                	jne    c00056f0 <ff_oem2uni+0x68>
c00056c8:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00056cf:	77 1f                	ja     c00056f0 <ff_oem2uni+0x68>
c00056d1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00056d6:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00056db:	01 c0                	add    eax,eax
c00056dd:	89 c2                	mov    edx,eax
c00056df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056e3:	01 d0                	add    eax,edx
c00056e5:	66 8b 00             	mov    ax,WORD PTR [eax]
c00056e8:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00056ed:	8d 76 00             	lea    esi,[esi+0x0]
c00056f0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00056f5:	83 c4 18             	add    esp,0x18
c00056f8:	c3                   	ret    
c00056f9:	8d 76 00             	lea    esi,[esi+0x0]

c00056fc <ff_wtoupper>:
c00056fc:	83 ec 10             	sub    esp,0x10
c00056ff:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005707:	0f 87 4f 01 00 00    	ja     c000585c <ff_wtoupper+0x160>
c000570d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005711:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005716:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000571d:	77 09                	ja     c0005728 <ff_wtoupper+0x2c>
c000571f:	b8 20 d5 01 c0       	mov    eax,0xc001d520
c0005724:	eb 0a                	jmp    c0005730 <ff_wtoupper+0x34>
c0005726:	66 90                	xchg   ax,ax
c0005728:	b8 60 d4 01 c0       	mov    eax,0xc001d460
c000572d:	8d 76 00             	lea    esi,[esi+0x0]
c0005730:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005734:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005738:	8d 50 02             	lea    edx,[eax+0x2]
c000573b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000573f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005742:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005747:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c000574d:	0f 84 fd 00 00 00    	je     c0005850 <ff_wtoupper+0x154>
c0005753:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005758:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c000575d:	0f 82 ed 00 00 00    	jb     c0005850 <ff_wtoupper+0x154>
c0005763:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005767:	8d 50 02             	lea    edx,[eax+0x2]
c000576a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000576e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005771:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005776:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000577b:	66 c1 e8 08          	shr    ax,0x8
c000577f:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005784:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000578b:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005790:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005795:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000579a:	01 ca                	add    edx,ecx
c000579c:	39 d0                	cmp    eax,edx
c000579e:	0f 8d 8c 00 00 00    	jge    c0005830 <ff_wtoupper+0x134>
c00057a4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00057a9:	83 f8 08             	cmp    eax,0x8
c00057ac:	0f 87 9a 00 00 00    	ja     c000584c <ff_wtoupper+0x150>
c00057b2:	8b 04 85 20 d4 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2be0]
c00057b9:	ff e0                	jmp    eax
c00057bb:	90                   	nop
c00057bc:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00057c1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00057c6:	29 c2                	sub    edx,eax
c00057c8:	89 d0                	mov    eax,edx
c00057ca:	01 c0                	add    eax,eax
c00057cc:	89 c2                	mov    edx,eax
c00057ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057d2:	01 d0                	add    eax,edx
c00057d4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00057d7:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00057dc:	eb 4e                	jmp    c000582c <ff_wtoupper+0x130>
c00057de:	66 90                	xchg   ax,ax
c00057e0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00057e5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00057e9:	83 e0 01             	and    eax,0x1
c00057ec:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00057f1:	eb 39                	jmp    c000582c <ff_wtoupper+0x130>
c00057f3:	90                   	nop
c00057f4:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00057fa:	eb 30                	jmp    c000582c <ff_wtoupper+0x130>
c00057fc:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005802:	eb 28                	jmp    c000582c <ff_wtoupper+0x130>
c0005804:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000580a:	eb 20                	jmp    c000582c <ff_wtoupper+0x130>
c000580c:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005812:	eb 18                	jmp    c000582c <ff_wtoupper+0x130>
c0005814:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000581a:	eb 10                	jmp    c000582c <ff_wtoupper+0x130>
c000581c:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005822:	eb 08                	jmp    c000582c <ff_wtoupper+0x130>
c0005824:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000582b:	90                   	nop
c000582c:	eb 1e                	jmp    c000584c <ff_wtoupper+0x150>
c000582e:	66 90                	xchg   ax,ax
c0005830:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005836:	0f 85 f8 fe ff ff    	jne    c0005734 <ff_wtoupper+0x38>
c000583c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005841:	01 c0                	add    eax,eax
c0005843:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005847:	e9 e8 fe ff ff       	jmp    c0005734 <ff_wtoupper+0x38>
c000584c:	90                   	nop
c000584d:	8d 76 00             	lea    esi,[esi+0x0]
c0005850:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005855:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005859:	8d 76 00             	lea    esi,[esi+0x0]
c000585c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005860:	83 c4 10             	add    esp,0x10
c0005863:	c3                   	ret    

c0005864 <CPU::current()>:
c0005864:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c0005869:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000586f:	c3                   	ret    

c0005870 <operator new(unsigned long)>:
c0005870:	e9 d4 10 00 00       	jmp    c0006949 <malloc>

c0005875 <operator delete(void*)>:
c0005875:	e9 ef 10 00 00       	jmp    c0006969 <rfree>

c000587a <disableIRQs()>:
c000587a:	fa                   	cli    
c000587b:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0005881:	c3                   	ret    

c0005882 <enableIRQs()>:
c0005882:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0005887:	48                   	dec    eax
c0005888:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c000588d:	75 01                	jne    c0005890 <enableIRQs()+0xe>
c000588f:	fb                   	sti    
c0005890:	c3                   	ret    

c0005891 <lockScheduler()>:
c0005891:	fa                   	cli    
c0005892:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0005898:	c3                   	ret    

c0005899 <unlockScheduler()>:
c0005899:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000589e:	48                   	dec    eax
c000589f:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c00058a4:	75 01                	jne    c00058a7 <unlockScheduler()+0xe>
c00058a6:	fb                   	sti    
c00058a7:	c3                   	ret    

c00058a8 <lockStuff()>:
c00058a8:	fa                   	cli    
c00058a9:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c00058af:	ff 05 44 38 02 c0    	inc    DWORD PTR ds:0xc0023844
c00058b5:	c3                   	ret    

c00058b6 <unlockStuff()>:
c00058b6:	83 ec 0c             	sub    esp,0xc
c00058b9:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c00058be:	48                   	dec    eax
c00058bf:	a3 44 38 02 c0       	mov    ds:0xc0023844,eax
c00058c4:	75 18                	jne    c00058de <unlockStuff()+0x28>
c00058c6:	83 3d 40 38 02 c0 00 	cmp    DWORD PTR ds:0xc0023840,0x0
c00058cd:	74 0f                	je     c00058de <unlockStuff()+0x28>
c00058cf:	c7 05 40 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x0
c00058d9:	e8 4e cf 00 00       	call   c001282c <schedule()>
c00058de:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00058e3:	48                   	dec    eax
c00058e4:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c00058e9:	75 01                	jne    c00058ec <unlockStuff()+0x36>
c00058eb:	fb                   	sti    
c00058ec:	83 c4 0c             	add    esp,0xc
c00058ef:	c3                   	ret    

c00058f0 <Virt::getAKernelVAS()>:
c00058f0:	a1 54 04 02 c0       	mov    eax,ds:0xc0020454
c00058f5:	c3                   	ret    

c00058f6 <__not_memcpy>:
c00058f6:	57                   	push   edi
c00058f7:	56                   	push   esi
c00058f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00058fc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005900:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005904:	89 c7                	mov    edi,eax
c0005906:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0005908:	5e                   	pop    esi
c0005909:	5f                   	pop    edi
c000590a:	c3                   	ret    
c000590b:	90                   	nop

c000590c <Krnl::resolveCompatibilitySymbol(char*)>:
c000590c:	83 ec 0c             	sub    esp,0xc
c000590f:	83 ec 08             	sub    esp,0x8
c0005912:	68 20 d8 01 c0       	push   0xc001d820
c0005917:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000591b:	e8 d0 ac ff ff       	call   c00005f0 <strcmp>
c0005920:	83 c4 10             	add    esp,0x10
c0005923:	85 c0                	test   eax,eax
c0005925:	0f 94 c0             	sete   al
c0005928:	84 c0                	test   al,al
c000592a:	74 0c                	je     c0005938 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c000592c:	b8 68 03 02 c0       	mov    eax,0xc0020368
c0005931:	e9 ea 00 00 00       	jmp    c0005a20 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005936:	66 90                	xchg   ax,ax
c0005938:	83 ec 08             	sub    esp,0x8
c000593b:	68 29 d8 01 c0       	push   0xc001d829
c0005940:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005944:	e8 a7 ac ff ff       	call   c00005f0 <strcmp>
c0005949:	83 c4 10             	add    esp,0x10
c000594c:	85 c0                	test   eax,eax
c000594e:	0f 94 c0             	sete   al
c0005951:	84 c0                	test   al,al
c0005953:	74 0b                	je     c0005960 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0005955:	b8 c0 c4 01 c0       	mov    eax,0xc001c4c0
c000595a:	e9 c1 00 00 00       	jmp    c0005a20 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000595f:	90                   	nop
c0005960:	83 ec 08             	sub    esp,0x8
c0005963:	68 33 d8 01 c0       	push   0xc001d833
c0005968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000596c:	e8 7f ac ff ff       	call   c00005f0 <strcmp>
c0005971:	83 c4 10             	add    esp,0x10
c0005974:	85 c0                	test   eax,eax
c0005976:	0f 94 c0             	sete   al
c0005979:	84 c0                	test   al,al
c000597b:	74 0b                	je     c0005988 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c000597d:	b8 f4 c1 01 c0       	mov    eax,0xc001c1f4
c0005982:	e9 99 00 00 00       	jmp    c0005a20 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005987:	90                   	nop
c0005988:	83 ec 08             	sub    esp,0x8
c000598b:	68 3c d8 01 c0       	push   0xc001d83c
c0005990:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005994:	e8 57 ac ff ff       	call   c00005f0 <strcmp>
c0005999:	83 c4 10             	add    esp,0x10
c000599c:	85 c0                	test   eax,eax
c000599e:	0f 94 c0             	sete   al
c00059a1:	84 c0                	test   al,al
c00059a3:	74 07                	je     c00059ac <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00059a5:	b8 c0 c5 01 c0       	mov    eax,0xc001c5c0
c00059aa:	eb 74                	jmp    c0005a20 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00059ac:	83 ec 08             	sub    esp,0x8
c00059af:	68 46 d8 01 c0       	push   0xc001d846
c00059b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00059b8:	e8 33 ac ff ff       	call   c00005f0 <strcmp>
c00059bd:	83 c4 10             	add    esp,0x10
c00059c0:	85 c0                	test   eax,eax
c00059c2:	0f 94 c0             	sete   al
c00059c5:	84 c0                	test   al,al
c00059c7:	74 07                	je     c00059d0 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00059c9:	b8 40 c3 01 c0       	mov    eax,0xc001c340
c00059ce:	eb 50                	jmp    c0005a20 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00059d0:	83 ec 08             	sub    esp,0x8
c00059d3:	68 4f d8 01 c0       	push   0xc001d84f
c00059d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00059dc:	e8 0f ac ff ff       	call   c00005f0 <strcmp>
c00059e1:	83 c4 10             	add    esp,0x10
c00059e4:	85 c0                	test   eax,eax
c00059e6:	0f 94 c0             	sete   al
c00059e9:	84 c0                	test   al,al
c00059eb:	74 07                	je     c00059f4 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00059ed:	b8 6c 03 02 c0       	mov    eax,0xc002036c
c00059f2:	eb 2c                	jmp    c0005a20 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00059f4:	83 ec 08             	sub    esp,0x8
c00059f7:	68 5c d8 01 c0       	push   0xc001d85c
c00059fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a00:	e8 eb ab ff ff       	call   c00005f0 <strcmp>
c0005a05:	83 c4 10             	add    esp,0x10
c0005a08:	85 c0                	test   eax,eax
c0005a0a:	0f 94 c0             	sete   al
c0005a0d:	84 c0                	test   al,al
c0005a0f:	74 07                	je     c0005a18 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0005a11:	b8 6d 03 02 c0       	mov    eax,0xc002036d
c0005a16:	eb 08                	jmp    c0005a20 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005a18:	b8 00 00 00 00       	mov    eax,0x0
c0005a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0005a20:	83 c4 0c             	add    esp,0xc
c0005a23:	c3                   	ret    

c0005a24 <Computer::close(int, int, void*)>:
c0005a24:	57                   	push   edi
c0005a25:	56                   	push   esi
c0005a26:	53                   	push   ebx
c0005a27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0005a2b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0005a2f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0005a33:	83 ec 0c             	sub    esp,0xc
c0005a36:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0005a3c:	e8 d3 51 00 00       	call   c000ac14 <Device::closeAll()>
c0005a41:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0005a47:	83 c4 10             	add    esp,0x10
c0005a4a:	8b 10                	mov    edx,DWORD PTR [eax]
c0005a4c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0005a50:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0005a58:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0005a5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a60:	5b                   	pop    ebx
c0005a61:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0005a64:	5e                   	pop    esi
c0005a65:	5f                   	pop    edi
c0005a66:	ff e0                	jmp    eax

c0005a68 <Krnl::firstTask()>:
c0005a68:	53                   	push   ebx
c0005a69:	83 ec 14             	sub    esp,0x14
c0005a6c:	fb                   	sti    
c0005a6d:	68 69 d8 01 c0       	push   0xc001d869
c0005a72:	e8 2c 0f 00 00       	call   c00069a3 <Krnl::setBootMessage(char const*)>
c0005a77:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0005a7e:	e8 c6 0e 00 00       	call   c0006949 <malloc>
c0005a83:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005a8a:	89 c3                	mov    ebx,eax
c0005a8c:	ff 35 70 38 02 c0    	push   DWORD PTR ds:0xc0023870
c0005a92:	68 82 d8 01 c0       	push   0xc001d882
c0005a97:	6a 01                	push   0x1
c0005a99:	50                   	push   eax
c0005a9a:	e8 69 c9 00 00       	call   c0012408 <Process::Process(bool, char const*, Process*, char**)>
c0005a9f:	83 c4 20             	add    esp,0x20
c0005aa2:	68 ff 00 00 00       	push   0xff
c0005aa7:	6a 00                	push   0x0
c0005aa9:	68 a1 63 00 c0       	push   0xc00063a1
c0005aae:	53                   	push   ebx
c0005aaf:	e8 5c cb 00 00       	call   c0012610 <Process::createThread(void (*)(void*), void*, int)>
c0005ab4:	6a 7a                	push   0x7a
c0005ab6:	6a 00                	push   0x0
c0005ab8:	68 54 30 01 c0       	push   0xc0013054
c0005abd:	ff 35 70 38 02 c0    	push   DWORD PTR ds:0xc0023870
c0005ac3:	e8 48 cb 00 00       	call   c0012610 <Process::createThread(void (*)(void*), void*, int)>
c0005ac8:	83 c4 14             	add    esp,0x14
c0005acb:	a3 28 38 02 c0       	mov    ds:0xc0023828,eax
c0005ad0:	68 80 d9 01 c0       	push   0xc001d980
c0005ad5:	c6 05 6d 03 02 c0 01 	mov    BYTE PTR ds:0xc002036d,0x1
c0005adc:	e8 c2 0e 00 00       	call   c00069a3 <Krnl::setBootMessage(char const*)>
c0005ae1:	e8 49 d9 00 00       	call   c001342f <Vm::initialise8086()>
c0005ae6:	e8 7f 3f 00 00       	call   c0009a6a <Fs::initVFS()>
c0005aeb:	c7 04 24 8f d8 01 c0 	mov    DWORD PTR [esp],0xc001d88f
c0005af2:	e8 ac 0e 00 00       	call   c00069a3 <Krnl::setBootMessage(char const*)>
c0005af7:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c0005afc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0005b02:	8b 10                	mov    edx,DWORD PTR [eax]
c0005b04:	6a 00                	push   0x0
c0005b06:	6a 00                	push   0x0
c0005b08:	6a 00                	push   0x0
c0005b0a:	50                   	push   eax
c0005b0b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0005b0e:	83 c4 14             	add    esp,0x14
c0005b11:	68 80 d9 01 c0       	push   0xc001d980
c0005b16:	e8 88 0e 00 00       	call   c00069a3 <Krnl::setBootMessage(char const*)>
c0005b1b:	e8 86 b1 00 00       	call   c0010ca6 <Sys::loadSyscalls()>
c0005b20:	e8 7b 97 00 00       	call   c000f2a0 <Krnl::loadSystemEnv()>
c0005b25:	e8 b9 9b 00 00       	call   c000f6e3 <Krnl::setupPowerManager()>
c0005b2a:	83 c4 0c             	add    esp,0xc
c0005b2d:	6a 3a                	push   0x3a
c0005b2f:	68 a9 d8 01 c0       	push   0xc001d8a9
c0005b34:	68 b2 d8 01 c0       	push   0xc001d8b2
c0005b39:	e8 cf a0 00 00       	call   c000fc0d <Reg::readIntWithDefault(char*, char*, int)>
c0005b3e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b41:	e8 26 4a 00 00       	call   c000a56c <User::loadClockSettings(int)>
c0005b46:	c7 04 24 a4 d9 01 c0 	mov    DWORD PTR [esp],0xc001d9a4
c0005b4d:	e8 51 0e 00 00       	call   c00069a3 <Krnl::setBootMessage(char const*)>
c0005b52:	58                   	pop    eax
c0005b53:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c0005b58:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0005b5e:	e8 af 50 00 00       	call   c000ac12 <Device::loadDriversForAll()>
c0005b63:	c7 04 24 ba d8 01 c0 	mov    DWORD PTR [esp],0xc001d8ba
c0005b6a:	e8 34 0e 00 00       	call   c00069a3 <Krnl::setBootMessage(char const*)>
c0005b6f:	e8 b2 92 00 00       	call   c000ee26 <Krnl::startCPUs()>
c0005b74:	c7 04 24 d4 d8 01 c0 	mov    DWORD PTR [esp],0xc001d8d4
c0005b7b:	e8 23 0e 00 00       	call   c00069a3 <Krnl::setBootMessage(char const*)>
c0005b80:	5a                   	pop    edx
c0005b81:	8b 1d 68 03 02 c0    	mov    ebx,DWORD PTR ds:0xc0020368
c0005b87:	59                   	pop    ecx
c0005b88:	6a 01                	push   0x1
c0005b8a:	68 e5 d8 01 c0       	push   0xc001d8e5
c0005b8f:	e8 ba c2 00 00       	call   c0011e4e <Thr::loadDLL(char const*, bool)>
c0005b94:	5a                   	pop    edx
c0005b95:	59                   	pop    ecx
c0005b96:	53                   	push   ebx
c0005b97:	50                   	push   eax
c0005b98:	e8 e2 c4 00 00       	call   c001207f <Thr::executeDLL(unsigned long, void*)>
c0005b9d:	83 c4 10             	add    esp,0x10
c0005ba0:	83 ec 0c             	sub    esp,0xc
c0005ba3:	6a 02                	push   0x2
c0005ba5:	e8 7a ce 00 00       	call   c0012a24 <blockTask(TaskState)>
c0005baa:	83 c4 10             	add    esp,0x10
c0005bad:	eb f1                	jmp    c0005ba0 <Krnl::firstTask()+0x138>
c0005baf:	90                   	nop

c0005bb0 <Computer::Computer()>:
c0005bb0:	83 ec 0c             	sub    esp,0xc
c0005bb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005bb7:	83 ec 08             	sub    esp,0x8
c0005bba:	68 01 d9 01 c0       	push   0xc001d901
c0005bbf:	50                   	push   eax
c0005bc0:	e8 c9 50 00 00       	call   c000ac8e <Device::Device(char const*)>
c0005bc5:	83 c4 10             	add    esp,0x10
c0005bc8:	ba f0 d9 01 c0       	mov    edx,0xc001d9f0
c0005bcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005bd1:	89 10                	mov    DWORD PTR [eax],edx
c0005bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005bd7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0005be1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005be5:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0005bef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005bf3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0005bf9:	83 ca 04             	or     edx,0x4
c0005bfc:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0005c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005c06:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005c0c:	0f b6 d0             	movzx  edx,al
c0005c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005c13:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0005c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005c1e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005c24:	0f b6 d0             	movzx  edx,al
c0005c27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005c2b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0005c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005c34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005c3a:	8d 50 01             	lea    edx,[eax+0x1]
c0005c3d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c41:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0005c47:	0f b6 d0             	movzx  edx,al
c0005c4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005c4e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0005c52:	83 e1 3f             	and    ecx,0x3f
c0005c55:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0005c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005c5d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005c63:	0f b6 d0             	movzx  edx,al
c0005c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005c6a:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0005c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005c75:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005c7b:	0f b6 d0             	movzx  edx,al
c0005c7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005c82:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0005c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005c8b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005c91:	8d 50 01             	lea    edx,[eax+0x1]
c0005c94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c98:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0005c9e:	0f b6 d0             	movzx  edx,al
c0005ca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ca5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0005ca9:	83 e1 3f             	and    ecx,0x3f
c0005cac:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0005cb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cb4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005cba:	0f b6 d0             	movzx  edx,al
c0005cbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cc1:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0005cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ccc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005cd2:	0f b6 d0             	movzx  edx,al
c0005cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cd9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0005cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ce2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005ce8:	8d 50 01             	lea    edx,[eax+0x1]
c0005ceb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cef:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0005cf5:	0f b6 d0             	movzx  edx,al
c0005cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cfc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0005d00:	83 e1 3f             	and    ecx,0x3f
c0005d03:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0005d07:	90                   	nop
c0005d08:	83 c4 0c             	add    esp,0xc
c0005d0b:	c3                   	ret    

c0005d0c <Computer::setBootMessage(char const*)>:
c0005d0c:	c3                   	ret    
c0005d0d:	90                   	nop

c0005d0e <Computer::detectFeatures()>:
c0005d0e:	55                   	push   ebp
c0005d0f:	57                   	push   edi
c0005d10:	56                   	push   esi
c0005d11:	53                   	push   ebx
c0005d12:	83 ec 1c             	sub    esp,0x1c
c0005d15:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d19:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0005d23:	e8 f1 a4 ff ff       	call   c0000219 <detectCPUID>
c0005d28:	85 c0                	test   eax,eax
c0005d2a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0005d30:	0f 95 c2             	setne  dl
c0005d33:	83 e0 fd             	and    eax,0xfffffffd
c0005d36:	d1 e2                	shl    edx,1
c0005d38:	09 d0                	or     eax,edx
c0005d3a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0005d40:	a8 02                	test   al,0x2
c0005d42:	75 46                	jne    c0005d8a <Computer::detectFeatures()+0x7c>
c0005d44:	f6 05 81 03 02 c0 04 	test   BYTE PTR ds:0xc0020381,0x4
c0005d4b:	74 07                	je     c0005d54 <Computer::detectFeatures()+0x46>
c0005d4d:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0005d54:	e8 2d 64 01 00       	call   c001c186 <x87Detect>
c0005d59:	83 e0 01             	and    eax,0x1
c0005d5c:	c1 e0 04             	shl    eax,0x4
c0005d5f:	88 c2                	mov    dl,al
c0005d61:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0005d67:	83 e0 ef             	and    eax,0xffffffef
c0005d6a:	09 d0                	or     eax,edx
c0005d6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0005d72:	a8 10                	test   al,0x10
c0005d74:	0f 85 2a 01 00 00    	jne    c0005ea4 <Computer::detectFeatures()+0x196>
c0005d7a:	84 c0                	test   al,al
c0005d7c:	0f 88 45 01 00 00    	js     c0005ec7 <Computer::detectFeatures()+0x1b9>
c0005d82:	83 c4 1c             	add    esp,0x1c
c0005d85:	5b                   	pop    ebx
c0005d86:	5e                   	pop    esi
c0005d87:	5f                   	pop    edi
c0005d88:	5d                   	pop    ebp
c0005d89:	c3                   	ret    
c0005d8a:	83 ec 0c             	sub    esp,0xc
c0005d8d:	6a 20                	push   0x20
c0005d8f:	e8 1c 84 00 00       	call   c000e1b0 <CPU::cpuidCheckEDX(unsigned int)>
c0005d94:	83 e0 01             	and    eax,0x1
c0005d97:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0005d9e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0005da4:	83 e0 f7             	and    eax,0xfffffff7
c0005da7:	09 d0                	or     eax,edx
c0005da9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0005daf:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0005db6:	e8 f5 83 00 00       	call   c000e1b0 <CPU::cpuidCheckEDX(unsigned int)>
c0005dbb:	83 e0 01             	and    eax,0x1
c0005dbe:	88 c2                	mov    dl,al
c0005dc0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0005dc6:	83 e0 fe             	and    eax,0xfffffffe
c0005dc9:	09 d0                	or     eax,edx
c0005dcb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0005dd1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0005dd8:	e8 d3 83 00 00       	call   c000e1b0 <CPU::cpuidCheckEDX(unsigned int)>
c0005ddd:	c1 e0 07             	shl    eax,0x7
c0005de0:	88 c2                	mov    dl,al
c0005de2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0005de8:	83 e0 7f             	and    eax,0x7f
c0005deb:	09 d0                	or     eax,edx
c0005ded:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0005df3:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0005dfa:	e8 b1 83 00 00       	call   c000e1b0 <CPU::cpuidCheckEDX(unsigned int)>
c0005dff:	83 c4 10             	add    esp,0x10
c0005e02:	83 e0 01             	and    eax,0x1
c0005e05:	c1 e0 05             	shl    eax,0x5
c0005e08:	88 c2                	mov    dl,al
c0005e0a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0005e10:	83 e0 df             	and    eax,0xffffffdf
c0005e13:	09 d0                	or     eax,edx
c0005e15:	f7 05 80 03 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0020380,0x401
c0005e1f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0005e25:	0f 84 c2 00 00 00    	je     c0005eed <Computer::detectFeatures()+0x1df>
c0005e2b:	83 e0 fe             	and    eax,0xfffffffe
c0005e2e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0005e34:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0005e3a:	88 c2                	mov    dl,al
c0005e3c:	83 e2 09             	and    edx,0x9
c0005e3f:	fe ca                	dec    dl
c0005e41:	75 09                	jne    c0005e4c <Computer::detectFeatures()+0x13e>
c0005e43:	83 e0 fe             	and    eax,0xfffffffe
c0005e46:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0005e4c:	83 ec 0c             	sub    esp,0xc
c0005e4f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0005e53:	50                   	push   eax
c0005e54:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0005e58:	55                   	push   ebp
c0005e59:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0005e5d:	57                   	push   edi
c0005e5e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0005e62:	56                   	push   esi
c0005e63:	68 00 00 00 80       	push   0x80000000
c0005e68:	e8 bf 82 00 00       	call   c000e12c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0005e6d:	83 c4 20             	add    esp,0x20
c0005e70:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0005e77:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0005e7b:	0f 86 c3 fe ff ff    	jbe    c0005d44 <Computer::detectFeatures()+0x36>
c0005e81:	83 ec 0c             	sub    esp,0xc
c0005e84:	50                   	push   eax
c0005e85:	55                   	push   ebp
c0005e86:	57                   	push   edi
c0005e87:	56                   	push   esi
c0005e88:	68 01 00 00 80       	push   0x80000001
c0005e8d:	e8 9a 82 00 00       	call   c000e12c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0005e92:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	e9 a0 fe ff ff       	jmp    c0005d44 <Computer::detectFeatures()+0x36>
c0005ea4:	e8 97 62 01 00       	call   c001c140 <absolutelyNoChanceInHell>
c0005ea9:	88 c2                	mov    dl,al
c0005eab:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0005eb1:	c1 e2 07             	shl    edx,0x7
c0005eb4:	83 e0 7f             	and    eax,0x7f
c0005eb7:	09 d0                	or     eax,edx
c0005eb9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0005ebf:	84 c0                	test   al,al
c0005ec1:	0f 89 bb fe ff ff    	jns    c0005d82 <Computer::detectFeatures()+0x74>
c0005ec7:	e8 f4 5f 01 00       	call   c001bec0 <avxDetect>
c0005ecc:	83 e0 01             	and    eax,0x1
c0005ecf:	c1 e0 05             	shl    eax,0x5
c0005ed2:	88 c2                	mov    dl,al
c0005ed4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0005eda:	83 e0 df             	and    eax,0xffffffdf
c0005edd:	09 d0                	or     eax,edx
c0005edf:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0005ee5:	83 c4 1c             	add    esp,0x1c
c0005ee8:	5b                   	pop    ebx
c0005ee9:	5e                   	pop    esi
c0005eea:	5f                   	pop    edi
c0005eeb:	5d                   	pop    ebp
c0005eec:	c3                   	ret    
c0005eed:	83 ec 0c             	sub    esp,0xc
c0005ef0:	68 00 02 00 00       	push   0x200
c0005ef5:	e8 b6 82 00 00       	call   c000e1b0 <CPU::cpuidCheckEDX(unsigned int)>
c0005efa:	83 c4 10             	add    esp,0x10
c0005efd:	83 e0 01             	and    eax,0x1
c0005f00:	88 c2                	mov    dl,al
c0005f02:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0005f08:	83 e0 fe             	and    eax,0xfffffffe
c0005f0b:	09 d0                	or     eax,edx
c0005f0d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0005f13:	e9 1c ff ff ff       	jmp    c0005e34 <Computer::detectFeatures()+0x126>

c0005f18 <Computer::displayFeatures()>:
c0005f18:	c3                   	ret    
c0005f19:	90                   	nop

c0005f1a <Computer::rdmsr(unsigned int)>:
c0005f1a:	83 ec 0c             	sub    esp,0xc
c0005f1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f21:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0005f28:	74 0a                	je     c0005f34 <Computer::rdmsr(unsigned int)+0x1a>
c0005f2a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005f2e:	0f 32                	rdmsr  
c0005f30:	83 c4 0c             	add    esp,0xc
c0005f33:	c3                   	ret    
c0005f34:	83 ec 0c             	sub    esp,0xc
c0005f37:	68 0a d9 01 c0       	push   0xc001d90a
c0005f3c:	e8 68 94 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c0005f41:	83 c4 10             	add    esp,0x10
c0005f44:	eb e4                	jmp    c0005f2a <Computer::rdmsr(unsigned int)+0x10>

c0005f46 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0005f46:	57                   	push   edi
c0005f47:	56                   	push   esi
c0005f48:	52                   	push   edx
c0005f49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f4d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005f51:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0005f55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0005f5c:	74 0e                	je     c0005f6c <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0005f5e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005f62:	89 f0                	mov    eax,esi
c0005f64:	89 fa                	mov    edx,edi
c0005f66:	0f 30                	wrmsr  
c0005f68:	58                   	pop    eax
c0005f69:	5e                   	pop    esi
c0005f6a:	5f                   	pop    edi
c0005f6b:	c3                   	ret    
c0005f6c:	83 ec 0c             	sub    esp,0xc
c0005f6f:	68 10 d9 01 c0       	push   0xc001d910
c0005f74:	e8 30 94 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c0005f79:	83 c4 10             	add    esp,0x10
c0005f7c:	eb e0                	jmp    c0005f5e <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0005f7e <Computer::shutdown()>:
c0005f7e:	83 ec 0c             	sub    esp,0xc
c0005f81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f85:	8b 10                	mov    edx,DWORD PTR [eax]
c0005f87:	6a 00                	push   0x0
c0005f89:	6a 00                	push   0x0
c0005f8b:	6a 00                	push   0x0
c0005f8d:	50                   	push   eax
c0005f8e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0005f91:	83 c4 1c             	add    esp,0x1c
c0005f94:	c3                   	ret    
c0005f95:	90                   	nop

c0005f96 <Computer::restart()>:
c0005f96:	83 ec 0c             	sub    esp,0xc
c0005f99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f9d:	8b 10                	mov    edx,DWORD PTR [eax]
c0005f9f:	6a 00                	push   0x0
c0005fa1:	6a 00                	push   0x0
c0005fa3:	6a 01                	push   0x1
c0005fa5:	50                   	push   eax
c0005fa6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0005fa9:	83 c4 1c             	add    esp,0x1c
c0005fac:	c3                   	ret    
c0005fad:	90                   	nop

c0005fae <Computer::sleep()>:
c0005fae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005fb2:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0005fb8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005fbc:	e9 67 7c 00 00       	jmp    c000dc28 <ACPI::sleep()>
c0005fc1:	90                   	nop

c0005fc2 <Computer::nmiEnabled()>:
c0005fc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005fc6:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0005fcc:	c3                   	ret    
c0005fcd:	90                   	nop

c0005fce <Computer::readCMOS(unsigned char)>:
c0005fce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005fd2:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0005fd9:	19 c0                	sbb    eax,eax
c0005fdb:	83 e0 80             	and    eax,0xffffff80
c0005fde:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005fe2:	e6 70                	out    0x70,al
c0005fe4:	e4 71                	in     al,0x71
c0005fe6:	c3                   	ret    
c0005fe7:	90                   	nop

c0005fe8 <Computer::enableNMI(bool)>:
c0005fe8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005fec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ff0:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0005ff6:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0005ffe:	eb ce                	jmp    c0005fce <Computer::readCMOS(unsigned char)>

c0006000 <Computer::open(int, int, void*)>:
c0006000:	56                   	push   esi
c0006001:	53                   	push   ebx
c0006002:	83 ec 10             	sub    esp,0x10
c0006005:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006009:	f6 05 80 03 02 c0 04 	test   BYTE PTR ds:0xc0020380,0x4
c0006010:	68 16 d9 01 c0       	push   0xc001d916
c0006015:	0f 94 05 a0 fc 01 c0 	sete   BYTE PTR ds:0xc001fca0
c000601c:	e8 82 09 00 00       	call   c00069a3 <Krnl::setBootMessage(char const*)>
c0006021:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006028:	e8 1c 09 00 00       	call   c0006949 <malloc>
c000602d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006030:	89 c6                	mov    esi,eax
c0006032:	e8 95 77 00 00       	call   c000d7cc <ACPI::ACPI()>
c0006037:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000603d:	58                   	pop    eax
c000603e:	5a                   	pop    edx
c000603f:	56                   	push   esi
c0006040:	53                   	push   ebx
c0006041:	e8 b0 4a 00 00       	call   c000aaf6 <Device::addChild(Device*)>
c0006046:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006049:	e8 c0 fc ff ff       	call   c0005d0e <Computer::detectFeatures()>
c000604e:	59                   	pop    ecx
c000604f:	5e                   	pop    esi
c0006050:	6a 01                	push   0x1
c0006052:	53                   	push   ebx
c0006053:	e8 90 ff ff ff       	call   c0005fe8 <Computer::enableNMI(bool)>
c0006058:	c7 04 24 ba d8 01 c0 	mov    DWORD PTR [esp],0xc001d8ba
c000605f:	e8 3f 09 00 00       	call   c00069a3 <Krnl::setBootMessage(char const*)>
c0006064:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c000606b:	e8 d9 08 00 00       	call   c0006949 <malloc>
c0006070:	89 04 24             	mov    DWORD PTR [esp],eax
c0006073:	89 c6                	mov    esi,eax
c0006075:	e8 ee 81 00 00       	call   c000e268 <CPU::CPU()>
c000607a:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006080:	58                   	pop    eax
c0006081:	5a                   	pop    edx
c0006082:	56                   	push   esi
c0006083:	53                   	push   ebx
c0006084:	e8 6d 4a 00 00       	call   c000aaf6 <Device::addChild(Device*)>
c0006089:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000608f:	8b 10                	mov    edx,DWORD PTR [eax]
c0006091:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0006095:	6a 00                	push   0x0
c0006097:	6a 00                	push   0x0
c0006099:	50                   	push   eax
c000609a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000609d:	83 c4 14             	add    esp,0x14
c00060a0:	68 c4 d9 01 c0       	push   0xc001d9c4
c00060a5:	e8 f9 08 00 00       	call   c00069a3 <Krnl::setBootMessage(char const*)>
c00060aa:	e8 08 f4 00 00       	call   c00154b7 <Hal::initialiseCoprocessor()>
c00060af:	c7 04 24 2e d9 01 c0 	mov    DWORD PTR [esp],0xc001d92e
c00060b6:	e8 e8 08 00 00       	call   c00069a3 <Krnl::setBootMessage(char const*)>
c00060bb:	c7 04 24 68 5a 00 c0 	mov    DWORD PTR [esp],0xc0005a68
c00060c2:	e8 5d c6 00 00       	call   c0012724 <setupMultitasking(void (*)())>
c00060c7:	83 c4 14             	add    esp,0x14
c00060ca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00060cf:	5b                   	pop    ebx
c00060d0:	5e                   	pop    esi
c00060d1:	c3                   	ret    

c00060d2 <Computer::disableNMI()>:
c00060d2:	6a 00                	push   0x0
c00060d4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00060d8:	e8 0b ff ff ff       	call   c0005fe8 <Computer::enableNMI(bool)>
c00060dd:	58                   	pop    eax
c00060de:	5a                   	pop    edx
c00060df:	c3                   	ret    

c00060e0 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00060e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060e4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00060eb:	19 c0                	sbb    eax,eax
c00060ed:	83 e0 80             	and    eax,0xffffff80
c00060f0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00060f4:	e6 70                	out    0x70,al
c00060f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060fa:	e6 71                	out    0x71,al
c00060fc:	c3                   	ret    
c00060fd:	90                   	nop

c00060fe <Computer::handleNMI()>:
c00060fe:	56                   	push   esi
c00060ff:	53                   	push   ebx
c0006100:	83 ec 10             	sub    esp,0x10
c0006103:	e4 92                	in     al,0x92
c0006105:	89 c6                	mov    esi,eax
c0006107:	e4 61                	in     al,0x61
c0006109:	68 49 d9 01 c0       	push   0xc001d949
c000610e:	88 c3                	mov    bl,al
c0006110:	e8 be 35 00 00       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0006115:	83 c4 10             	add    esp,0x10
c0006118:	83 e6 10             	and    esi,0x10
c000611b:	75 0d                	jne    c000612a <Computer::handleNMI()+0x2c>
c000611d:	f6 c3 40             	test   bl,0x40
c0006120:	75 1d                	jne    c000613f <Computer::handleNMI()+0x41>
c0006122:	84 db                	test   bl,bl
c0006124:	78 2d                	js     c0006153 <Computer::handleNMI()+0x55>
c0006126:	58                   	pop    eax
c0006127:	5b                   	pop    ebx
c0006128:	5e                   	pop    esi
c0006129:	c3                   	ret    
c000612a:	83 ec 0c             	sub    esp,0xc
c000612d:	68 5a d9 01 c0       	push   0xc001d95a
c0006132:	e8 72 92 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c0006137:	83 c4 10             	add    esp,0x10
c000613a:	f6 c3 40             	test   bl,0x40
c000613d:	74 e3                	je     c0006122 <Computer::handleNMI()+0x24>
c000613f:	83 ec 0c             	sub    esp,0xc
c0006142:	68 67 d9 01 c0       	push   0xc001d967
c0006147:	e8 5d 92 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	84 db                	test   bl,bl
c0006151:	79 d3                	jns    c0006126 <Computer::handleNMI()+0x28>
c0006153:	c7 44 24 10 71 d9 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d971
c000615b:	5a                   	pop    edx
c000615c:	5b                   	pop    ebx
c000615d:	5e                   	pop    esi
c000615e:	e9 46 92 00 00       	jmp    c000f3a9 <Krnl::panic(char const*)>
c0006163:	90                   	nop

c0006164 <Computer::setDiskActivityLight(int, bool)>:
c0006164:	56                   	push   esi
c0006165:	53                   	push   ebx
c0006166:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000616a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000616f:	77 1b                	ja     c000618c <Computer::setDiskActivityLight(int, bool)+0x28>
c0006171:	e4 92                	in     al,0x92
c0006173:	bb 40 00 00 00       	mov    ebx,0x40
c0006178:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000617c:	89 da                	mov    edx,ebx
c000617e:	d3 e2                	shl    edx,cl
c0006180:	89 f1                	mov    ecx,esi
c0006182:	f7 d2                	not    edx
c0006184:	d3 e3                	shl    ebx,cl
c0006186:	21 d0                	and    eax,edx
c0006188:	09 d8                	or     eax,ebx
c000618a:	e6 92                	out    0x92,al
c000618c:	5b                   	pop    ebx
c000618d:	5e                   	pop    esi
c000618e:	c3                   	ret    
c000618f:	90                   	nop

c0006190 <GDTEntry::setBase(unsigned int)>:
c0006190:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006194:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006198:	89 c1                	mov    ecx,eax
c000619a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000619e:	c1 e9 10             	shr    ecx,0x10
c00061a1:	c1 e8 18             	shr    eax,0x18
c00061a4:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00061a7:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00061aa:	c3                   	ret    
c00061ab:	90                   	nop

c00061ac <GDTEntry::setLimit(unsigned int)>:
c00061ac:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00061b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00061b4:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00061b7:	66 89 01             	mov    WORD PTR [ecx],ax
c00061ba:	83 e2 f0             	and    edx,0xfffffff0
c00061bd:	c1 e8 10             	shr    eax,0x10
c00061c0:	83 e0 0f             	and    eax,0xf
c00061c3:	09 d0                	or     eax,edx
c00061c5:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00061c8:	c3                   	ret    
c00061c9:	90                   	nop

c00061ca <GDT::GDT()>:
c00061ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061ce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00061d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00061de:	90                   	nop
c00061df:	c3                   	ret    

c00061e0 <GDT::addEntry(GDTEntry)>:
c00061e0:	53                   	push   ebx
c00061e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00061e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00061e9:	8b 02                	mov    eax,DWORD PTR [edx]
c00061eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00061ef:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00061f3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00061f7:	8d 48 01             	lea    ecx,[eax+0x1]
c00061fa:	c1 e0 03             	shl    eax,0x3
c00061fd:	89 0a                	mov    DWORD PTR [edx],ecx
c00061ff:	5b                   	pop    ebx
c0006200:	c3                   	ret    
c0006201:	90                   	nop

c0006202 <GDT::getNumberOfEntries()>:
c0006202:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006206:	8b 00                	mov    eax,DWORD PTR [eax]
c0006208:	c3                   	ret    
c0006209:	90                   	nop

c000620a <GDT::flush()>:
c000620a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000620e:	8b 10                	mov    edx,DWORD PTR [eax]
c0006210:	83 c0 04             	add    eax,0x4
c0006213:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000621a:	a3 72 03 02 c0       	mov    ds:0xc0020372,eax
c000621f:	66 89 15 70 03 02 c0 	mov    WORD PTR ds:0xc0020370,dx
c0006226:	e9 52 a1 ff ff       	jmp    c000037d <loadGDT>
c000622b:	90                   	nop

c000622c <GDT::setup()>:
c000622c:	57                   	push   edi
c000622d:	56                   	push   esi
c000622e:	53                   	push   ebx
c000622f:	83 ec 40             	sub    esp,0x40
c0006232:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0006236:	6a 00                	push   0x0
c0006238:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000623c:	56                   	push   esi
c000623d:	e8 4e ff ff ff       	call   c0006190 <GDTEntry::setBase(unsigned int)>
c0006242:	6a 00                	push   0x0
c0006244:	56                   	push   esi
c0006245:	e8 62 ff ff ff       	call   c00061ac <GDTEntry::setLimit(unsigned int)>
c000624a:	81 64 24 3c ff 00 0f ff 	and    DWORD PTR [esp+0x3c],0xff0f00ff
c0006252:	6a 00                	push   0x0
c0006254:	8d 74 24 44          	lea    esi,[esp+0x44]
c0006258:	56                   	push   esi
c0006259:	e8 32 ff ff ff       	call   c0006190 <GDTEntry::setBase(unsigned int)>
c000625e:	68 ff ff ff 00       	push   0xffffff
c0006263:	56                   	push   esi
c0006264:	e8 43 ff ff ff       	call   c00061ac <GDTEntry::setLimit(unsigned int)>
c0006269:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000626d:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0006272:	0d 00 9a c0 00       	or     eax,0xc09a00
c0006277:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000627b:	83 c4 20             	add    esp,0x20
c000627e:	6a 00                	push   0x0
c0006280:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0006284:	56                   	push   esi
c0006285:	e8 06 ff ff ff       	call   c0006190 <GDTEntry::setBase(unsigned int)>
c000628a:	68 ff ff ff 00       	push   0xffffff
c000628f:	56                   	push   esi
c0006290:	e8 17 ff ff ff       	call   c00061ac <GDTEntry::setLimit(unsigned int)>
c0006295:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0006299:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000629d:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00062a1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00062a5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00062a9:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00062ae:	0d 00 92 c0 00       	or     eax,0xc09200
c00062b3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00062b7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00062bb:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00062bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00062c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00062c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062cb:	89 fa                	mov    edx,edi
c00062cd:	80 cc 60             	or     ah,0x60
c00062d0:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c00062d6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00062da:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00062de:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00062e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00062e6:	80 cc 60             	or     ah,0x60
c00062e9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00062ed:	89 f8                	mov    eax,edi
c00062ef:	25 ff ff 00 ff       	and    eax,0xff00ffff
c00062f4:	09 d0                	or     eax,edx
c00062f6:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00062fa:	89 c7                	mov    edi,eax
c00062fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006300:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0006304:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006308:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000630c:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0006312:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006316:	25 ff ff 00 ff       	and    eax,0xff00ffff
c000631b:	09 d0                	or     eax,edx
c000631d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0006321:	83 c4 0c             	add    esp,0xc
c0006324:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0006328:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000632c:	53                   	push   ebx
c000632d:	e8 ae fe ff ff       	call   c00061e0 <GDT::addEntry(GDTEntry)>
c0006332:	83 c4 0c             	add    esp,0xc
c0006335:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0006339:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000633d:	53                   	push   ebx
c000633e:	e8 9d fe ff ff       	call   c00061e0 <GDT::addEntry(GDTEntry)>
c0006343:	83 c4 0c             	add    esp,0xc
c0006346:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000634a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000634e:	53                   	push   ebx
c000634f:	e8 8c fe ff ff       	call   c00061e0 <GDT::addEntry(GDTEntry)>
c0006354:	83 c4 0c             	add    esp,0xc
c0006357:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000635b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000635f:	53                   	push   ebx
c0006360:	e8 7b fe ff ff       	call   c00061e0 <GDT::addEntry(GDTEntry)>
c0006365:	83 c4 0c             	add    esp,0xc
c0006368:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000636c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006370:	53                   	push   ebx
c0006371:	e8 6a fe ff ff       	call   c00061e0 <GDT::addEntry(GDTEntry)>
c0006376:	83 c4 0c             	add    esp,0xc
c0006379:	57                   	push   edi
c000637a:	56                   	push   esi
c000637b:	53                   	push   ebx
c000637c:	e8 5f fe ff ff       	call   c00061e0 <GDT::addEntry(GDTEntry)>
c0006381:	83 c4 0c             	add    esp,0xc
c0006384:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0006388:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000638c:	53                   	push   ebx
c000638d:	e8 4e fe ff ff       	call   c00061e0 <GDT::addEntry(GDTEntry)>
c0006392:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006395:	e8 70 fe ff ff       	call   c000620a <GDT::flush()>
c000639a:	83 c4 50             	add    esp,0x50
c000639d:	5b                   	pop    ebx
c000639e:	5e                   	pop    esi
c000639f:	5f                   	pop    edi
c00063a0:	c3                   	ret    

c00063a1 <idleFunction(void*)>:
c00063a1:	83 ec 0c             	sub    esp,0xc
c00063a4:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00063a9:	48                   	dec    eax
c00063aa:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c00063af:	75 01                	jne    c00063b2 <idleFunction(void*)+0x11>
c00063b1:	fb                   	sti    
c00063b2:	f4                   	hlt    
c00063b3:	e8 8a 63 01 00       	call   c001c742 <idleCommon()>
c00063b8:	eb f8                	jmp    c00063b2 <idleFunction(void*)+0x11>
c00063ba:	66 90                	xchg   ax,ax

c00063bc <IDTEntry::IDTEntry(bool)>:
c00063bc:	83 ec 04             	sub    esp,0x4
c00063bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063c3:	88 04 24             	mov    BYTE PTR [esp],al
c00063c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063ca:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00063d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063d4:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00063d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063dc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00063df:	83 e2 f0             	and    edx,0xfffffff0
c00063e2:	83 ca 0e             	or     edx,0xe
c00063e5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00063e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063ec:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00063ef:	83 e2 ef             	and    edx,0xffffffef
c00063f2:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00063f5:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00063f9:	74 05                	je     c0006400 <IDTEntry::IDTEntry(bool)+0x44>
c00063fb:	b2 03                	mov    dl,0x3
c00063fd:	eb 05                	jmp    c0006404 <IDTEntry::IDTEntry(bool)+0x48>
c00063ff:	90                   	nop
c0006400:	b2 00                	mov    dl,0x0
c0006402:	66 90                	xchg   ax,ax
c0006404:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006408:	83 e2 03             	and    edx,0x3
c000640b:	88 d1                	mov    cl,dl
c000640d:	c1 e1 05             	shl    ecx,0x5
c0006410:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0006413:	83 e2 9f             	and    edx,0xffffff9f
c0006416:	09 ca                	or     edx,ecx
c0006418:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000641b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000641f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0006422:	83 ca 80             	or     edx,0xffffff80
c0006425:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0006428:	90                   	nop
c0006429:	83 c4 04             	add    esp,0x4
c000642c:	c3                   	ret    
c000642d:	90                   	nop

c000642e <IDTEntry::setOffset(unsigned int)>:
c000642e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006436:	66 89 02             	mov    WORD PTR [edx],ax
c0006439:	c1 e8 10             	shr    eax,0x10
c000643c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0006440:	c3                   	ret    
c0006441:	90                   	nop
c0006442:	66 90                	xchg   ax,ax

c0006444 <IDT::IDT()>:
c0006444:	90                   	nop
c0006445:	c3                   	ret    

c0006446 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0006446:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000644a:	83 c0 30             	add    eax,0x30
c000644d:	c3                   	ret    

c000644e <IDT::addEntry(IDTEntry, int)>:
c000644e:	53                   	push   ebx
c000644f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006453:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006457:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000645b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000645f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0006462:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0006466:	5b                   	pop    ebx
c0006467:	c3                   	ret    

c0006468 <IDT::addEntry(int, void (*)(), bool)>:
c0006468:	53                   	push   ebx
c0006469:	83 ec 10             	sub    esp,0x10
c000646c:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0006471:	50                   	push   eax
c0006472:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0006476:	53                   	push   ebx
c0006477:	e8 40 ff ff ff       	call   c00063bc <IDTEntry::IDTEntry(bool)>
c000647c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0006480:	53                   	push   ebx
c0006481:	e8 a8 ff ff ff       	call   c000642e <IDTEntry::setOffset(unsigned int)>
c0006486:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000648a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000648e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006492:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0006496:	e8 b3 ff ff ff       	call   c000644e <IDT::addEntry(IDTEntry, int)>
c000649b:	83 c4 30             	add    esp,0x30
c000649e:	5b                   	pop    ebx
c000649f:	c3                   	ret    

c00064a0 <IDT::flush()>:
c00064a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00064a4:	66 c7 05 78 03 02 c0 ff 07 	mov    WORD PTR ds:0xc0020378,0x7ff
c00064ad:	a3 7a 03 02 c0       	mov    ds:0xc002037a,eax
c00064b2:	0f 01 1d 78 03 02 c0 	lidtd  ds:0xc0020378
c00064b9:	c3                   	ret    

c00064ba <IDT::setup()>:
c00064ba:	57                   	push   edi
c00064bb:	56                   	push   esi
c00064bc:	53                   	push   ebx
c00064bd:	83 ec 10             	sub    esp,0x10
c00064c0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064c4:	6a 00                	push   0x0
c00064c6:	68 50 bf 01 c0       	push   0xc001bf50
c00064cb:	6a 00                	push   0x0
c00064cd:	53                   	push   ebx
c00064ce:	e8 95 ff ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c00064d3:	6a 00                	push   0x0
c00064d5:	68 60 bf 01 c0       	push   0xc001bf60
c00064da:	6a 01                	push   0x1
c00064dc:	53                   	push   ebx
c00064dd:	e8 86 ff ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c00064e2:	83 c4 20             	add    esp,0x20
c00064e5:	6a 00                	push   0x0
c00064e7:	68 6a bf 01 c0       	push   0xc001bf6a
c00064ec:	6a 02                	push   0x2
c00064ee:	53                   	push   ebx
c00064ef:	e8 74 ff ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c00064f4:	6a 00                	push   0x0
c00064f6:	68 74 bf 01 c0       	push   0xc001bf74
c00064fb:	6a 03                	push   0x3
c00064fd:	53                   	push   ebx
c00064fe:	e8 65 ff ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c0006503:	83 c4 20             	add    esp,0x20
c0006506:	6a 00                	push   0x0
c0006508:	68 7e bf 01 c0       	push   0xc001bf7e
c000650d:	6a 04                	push   0x4
c000650f:	53                   	push   ebx
c0006510:	e8 53 ff ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c0006515:	6a 00                	push   0x0
c0006517:	68 88 bf 01 c0       	push   0xc001bf88
c000651c:	6a 05                	push   0x5
c000651e:	53                   	push   ebx
c000651f:	e8 44 ff ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c0006524:	83 c4 20             	add    esp,0x20
c0006527:	6a 00                	push   0x0
c0006529:	68 92 bf 01 c0       	push   0xc001bf92
c000652e:	6a 06                	push   0x6
c0006530:	53                   	push   ebx
c0006531:	e8 32 ff ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c0006536:	6a 00                	push   0x0
c0006538:	68 9c bf 01 c0       	push   0xc001bf9c
c000653d:	6a 07                	push   0x7
c000653f:	53                   	push   ebx
c0006540:	e8 23 ff ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c0006545:	83 c4 20             	add    esp,0x20
c0006548:	6a 00                	push   0x0
c000654a:	68 a6 bf 01 c0       	push   0xc001bfa6
c000654f:	6a 08                	push   0x8
c0006551:	53                   	push   ebx
c0006552:	e8 11 ff ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c0006557:	6a 00                	push   0x0
c0006559:	68 ae bf 01 c0       	push   0xc001bfae
c000655e:	6a 09                	push   0x9
c0006560:	53                   	push   ebx
c0006561:	e8 02 ff ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c0006566:	83 c4 20             	add    esp,0x20
c0006569:	6a 00                	push   0x0
c000656b:	68 b8 bf 01 c0       	push   0xc001bfb8
c0006570:	6a 0a                	push   0xa
c0006572:	53                   	push   ebx
c0006573:	e8 f0 fe ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c0006578:	6a 00                	push   0x0
c000657a:	68 c0 bf 01 c0       	push   0xc001bfc0
c000657f:	6a 0b                	push   0xb
c0006581:	53                   	push   ebx
c0006582:	e8 e1 fe ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c0006587:	83 c4 20             	add    esp,0x20
c000658a:	6a 00                	push   0x0
c000658c:	68 c8 bf 01 c0       	push   0xc001bfc8
c0006591:	6a 0c                	push   0xc
c0006593:	53                   	push   ebx
c0006594:	e8 cf fe ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c0006599:	6a 00                	push   0x0
c000659b:	68 d0 bf 01 c0       	push   0xc001bfd0
c00065a0:	6a 0d                	push   0xd
c00065a2:	53                   	push   ebx
c00065a3:	e8 c0 fe ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c00065a8:	83 c4 20             	add    esp,0x20
c00065ab:	6a 00                	push   0x0
c00065ad:	68 d8 bf 01 c0       	push   0xc001bfd8
c00065b2:	6a 0e                	push   0xe
c00065b4:	53                   	push   ebx
c00065b5:	e8 ae fe ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c00065ba:	6a 00                	push   0x0
c00065bc:	68 e0 bf 01 c0       	push   0xc001bfe0
c00065c1:	6a 0f                	push   0xf
c00065c3:	53                   	push   ebx
c00065c4:	e8 9f fe ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c00065c9:	83 c4 20             	add    esp,0x20
c00065cc:	6a 00                	push   0x0
c00065ce:	68 ea bf 01 c0       	push   0xc001bfea
c00065d3:	6a 10                	push   0x10
c00065d5:	53                   	push   ebx
c00065d6:	e8 8d fe ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c00065db:	6a 00                	push   0x0
c00065dd:	68 f4 bf 01 c0       	push   0xc001bff4
c00065e2:	6a 11                	push   0x11
c00065e4:	53                   	push   ebx
c00065e5:	e8 7e fe ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c00065ea:	83 c4 20             	add    esp,0x20
c00065ed:	6a 00                	push   0x0
c00065ef:	68 fe bf 01 c0       	push   0xc001bffe
c00065f4:	6a 12                	push   0x12
c00065f6:	53                   	push   ebx
c00065f7:	e8 6c fe ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c00065fc:	6a 01                	push   0x1
c00065fe:	68 98 c0 01 c0       	push   0xc001c098
c0006603:	6a 60                	push   0x60
c0006605:	53                   	push   ebx
c0006606:	e8 5d fe ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c000660b:	83 c4 20             	add    esp,0x20
c000660e:	6a 00                	push   0x0
c0006610:	68 9f c0 01 c0       	push   0xc001c09f
c0006615:	6a 20                	push   0x20
c0006617:	53                   	push   ebx
c0006618:	e8 4b fe ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c000661d:	6a 00                	push   0x0
c000661f:	68 8a c0 01 c0       	push   0xc001c08a
c0006624:	6a 21                	push   0x21
c0006626:	53                   	push   ebx
c0006627:	e8 3c fe ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c000662c:	83 c4 20             	add    esp,0x20
c000662f:	6a 00                	push   0x0
c0006631:	68 91 c0 01 c0       	push   0xc001c091
c0006636:	6a 22                	push   0x22
c0006638:	53                   	push   ebx
c0006639:	e8 2a fe ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c000663e:	6a 00                	push   0x0
c0006640:	68 08 c0 01 c0       	push   0xc001c008
c0006645:	6a 23                	push   0x23
c0006647:	53                   	push   ebx
c0006648:	e8 1b fe ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c000664d:	83 c4 20             	add    esp,0x20
c0006650:	6a 00                	push   0x0
c0006652:	68 12 c0 01 c0       	push   0xc001c012
c0006657:	6a 24                	push   0x24
c0006659:	53                   	push   ebx
c000665a:	e8 09 fe ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c000665f:	6a 00                	push   0x0
c0006661:	68 1c c0 01 c0       	push   0xc001c01c
c0006666:	6a 25                	push   0x25
c0006668:	53                   	push   ebx
c0006669:	e8 fa fd ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c000666e:	83 c4 20             	add    esp,0x20
c0006671:	6a 00                	push   0x0
c0006673:	68 26 c0 01 c0       	push   0xc001c026
c0006678:	6a 26                	push   0x26
c000667a:	53                   	push   ebx
c000667b:	e8 e8 fd ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c0006680:	6a 00                	push   0x0
c0006682:	68 30 c0 01 c0       	push   0xc001c030
c0006687:	6a 27                	push   0x27
c0006689:	53                   	push   ebx
c000668a:	e8 d9 fd ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c000668f:	83 c4 20             	add    esp,0x20
c0006692:	6a 00                	push   0x0
c0006694:	68 3a c0 01 c0       	push   0xc001c03a
c0006699:	6a 28                	push   0x28
c000669b:	53                   	push   ebx
c000669c:	e8 c7 fd ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c00066a1:	6a 00                	push   0x0
c00066a3:	68 44 c0 01 c0       	push   0xc001c044
c00066a8:	6a 29                	push   0x29
c00066aa:	53                   	push   ebx
c00066ab:	e8 b8 fd ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c00066b0:	83 c4 20             	add    esp,0x20
c00066b3:	6a 00                	push   0x0
c00066b5:	68 4e c0 01 c0       	push   0xc001c04e
c00066ba:	6a 2a                	push   0x2a
c00066bc:	53                   	push   ebx
c00066bd:	e8 a6 fd ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c00066c2:	6a 00                	push   0x0
c00066c4:	68 58 c0 01 c0       	push   0xc001c058
c00066c9:	6a 2b                	push   0x2b
c00066cb:	53                   	push   ebx
c00066cc:	e8 97 fd ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c00066d1:	83 c4 20             	add    esp,0x20
c00066d4:	6a 00                	push   0x0
c00066d6:	68 62 c0 01 c0       	push   0xc001c062
c00066db:	6a 2c                	push   0x2c
c00066dd:	53                   	push   ebx
c00066de:	e8 85 fd ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c00066e3:	6a 00                	push   0x0
c00066e5:	68 6c c0 01 c0       	push   0xc001c06c
c00066ea:	6a 2d                	push   0x2d
c00066ec:	53                   	push   ebx
c00066ed:	e8 76 fd ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c00066f2:	83 c4 20             	add    esp,0x20
c00066f5:	6a 00                	push   0x0
c00066f7:	68 76 c0 01 c0       	push   0xc001c076
c00066fc:	6a 2e                	push   0x2e
c00066fe:	53                   	push   ebx
c00066ff:	e8 64 fd ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c0006704:	6a 00                	push   0x0
c0006706:	68 80 c0 01 c0       	push   0xc001c080
c000670b:	6a 2f                	push   0x2f
c000670d:	53                   	push   ebx
c000670e:	e8 55 fd ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c0006713:	83 c4 20             	add    esp,0x20
c0006716:	6a 00                	push   0x0
c0006718:	68 d6 c0 01 c0       	push   0xc001c0d6
c000671d:	6a 30                	push   0x30
c000671f:	53                   	push   ebx
c0006720:	e8 43 fd ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c0006725:	6a 00                	push   0x0
c0006727:	68 e0 c0 01 c0       	push   0xc001c0e0
c000672c:	6a 31                	push   0x31
c000672e:	53                   	push   ebx
c000672f:	e8 34 fd ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c0006734:	83 c4 20             	add    esp,0x20
c0006737:	6a 00                	push   0x0
c0006739:	68 ea c0 01 c0       	push   0xc001c0ea
c000673e:	6a 32                	push   0x32
c0006740:	53                   	push   ebx
c0006741:	e8 22 fd ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c0006746:	6a 00                	push   0x0
c0006748:	68 f4 c0 01 c0       	push   0xc001c0f4
c000674d:	6a 33                	push   0x33
c000674f:	53                   	push   ebx
c0006750:	e8 13 fd ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c0006755:	83 c4 20             	add    esp,0x20
c0006758:	6a 00                	push   0x0
c000675a:	68 fe c0 01 c0       	push   0xc001c0fe
c000675f:	6a 34                	push   0x34
c0006761:	53                   	push   ebx
c0006762:	e8 01 fd ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c0006767:	6a 00                	push   0x0
c0006769:	68 08 c1 01 c0       	push   0xc001c108
c000676e:	6a 35                	push   0x35
c0006770:	53                   	push   ebx
c0006771:	e8 f2 fc ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c0006776:	83 c4 20             	add    esp,0x20
c0006779:	6a 00                	push   0x0
c000677b:	68 12 c1 01 c0       	push   0xc001c112
c0006780:	6a 36                	push   0x36
c0006782:	53                   	push   ebx
c0006783:	e8 e0 fc ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c0006788:	6a 00                	push   0x0
c000678a:	68 1c c1 01 c0       	push   0xc001c11c
c000678f:	6a 37                	push   0x37
c0006791:	53                   	push   ebx
c0006792:	e8 d1 fc ff ff       	call   c0006468 <IDT::addEntry(int, void (*)(), bool)>
c0006797:	83 c4 1c             	add    esp,0x1c
c000679a:	6a 03                	push   0x3
c000679c:	6a 02                	push   0x2
c000679e:	ff 35 54 04 02 c0    	push   DWORD PTR ds:0xc0020454
c00067a4:	e8 1f 24 00 00       	call   c0008bc8 <VAS::allocatePages(int, int)>
c00067a9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00067b0:	89 c6                	mov    esi,eax
c00067b2:	e8 92 01 00 00       	call   c0006949 <malloc>
c00067b7:	81 c6 00 20 00 00    	add    esi,0x2000
c00067bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00067c0:	89 c7                	mov    edi,eax
c00067c2:	e8 ed 15 00 00       	call   c0007db4 <TSS::TSS()>
c00067c7:	83 c4 0c             	add    esp,0xc
c00067ca:	68 a6 bf 01 c0       	push   0xc001bfa6
c00067cf:	56                   	push   esi
c00067d0:	57                   	push   edi
c00067d1:	e8 22 16 00 00       	call   c0007df8 <TSS::setup(unsigned long, unsigned long)>
c00067d6:	89 c6                	mov    esi,eax
c00067d8:	58                   	pop    eax
c00067d9:	5a                   	pop    edx
c00067da:	6a 00                	push   0x0
c00067dc:	8d 44 24 14          	lea    eax,[esp+0x14]
c00067e0:	50                   	push   eax
c00067e1:	e8 d6 fb ff ff       	call   c00063bc <IDTEntry::IDTEntry(bool)>
c00067e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00067ea:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00067ef:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00067f6:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00067fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006800:	80 ce 05             	or     dh,0x5
c0006803:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0006806:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000680a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000680e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0006811:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006814:	e8 87 fc ff ff       	call   c00064a0 <IDT::flush()>
c0006819:	83 c4 20             	add    esp,0x20
c000681c:	5b                   	pop    ebx
c000681d:	5e                   	pop    esi
c000681e:	5f                   	pop    edi
c000681f:	c3                   	ret    

c0006820 <sbrk>:
c0006820:	55                   	push   ebp
c0006821:	57                   	push   edi
c0006822:	56                   	push   esi
c0006823:	53                   	push   ebx
c0006824:	83 ec 1c             	sub    esp,0x1c
c0006827:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000682b:	85 c0                	test   eax,eax
c000682d:	74 5f                	je     c000688e <sbrk+0x6e>
c000682f:	78 64                	js     c0006895 <sbrk+0x75>
c0006831:	8b 15 2c fb 01 c0    	mov    edx,DWORD PTR ds:0xc001fb2c
c0006837:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000683b:	05 ff 0f 00 00       	add    eax,0xfff
c0006840:	89 c5                	mov    ebp,eax
c0006842:	78 69                	js     c00068ad <sbrk+0x8d>
c0006844:	c1 fd 0c             	sar    ebp,0xc
c0006847:	bb 00 00 00 00       	mov    ebx,0x0
c000684c:	8b 35 54 04 02 c0    	mov    esi,DWORD PTR ds:0xc0020454
c0006852:	8b 3d 2c fb 01 c0    	mov    edi,DWORD PTR ds:0xc001fb2c
c0006858:	e8 b3 04 00 00       	call   c0006d10 <Phys::allocatePage()>
c000685d:	68 01 04 00 00       	push   0x401
c0006862:	57                   	push   edi
c0006863:	50                   	push   eax
c0006864:	56                   	push   esi
c0006865:	e8 5a 22 00 00       	call   c0008ac4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000686a:	81 05 2c fb 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001fb2c,0x1000
c0006874:	43                   	inc    ebx
c0006875:	83 c4 10             	add    esp,0x10
c0006878:	39 dd                	cmp    ebp,ebx
c000687a:	75 d0                	jne    c000684c <sbrk+0x2c>
c000687c:	0f 20 d8             	mov    eax,cr3
c000687f:	0f 22 d8             	mov    cr3,eax
c0006882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006886:	83 c4 1c             	add    esp,0x1c
c0006889:	5b                   	pop    ebx
c000688a:	5e                   	pop    esi
c000688b:	5f                   	pop    edi
c000688c:	5d                   	pop    ebp
c000688d:	c3                   	ret    
c000688e:	a1 2c fb 01 c0       	mov    eax,ds:0xc001fb2c
c0006893:	eb f1                	jmp    c0006886 <sbrk+0x66>
c0006895:	83 ec 08             	sub    esp,0x8
c0006898:	50                   	push   eax
c0006899:	68 14 da 01 c0       	push   0xc001da14
c000689e:	e8 30 2e 00 00       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c00068a3:	83 c4 10             	add    esp,0x10
c00068a6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068ab:	eb d9                	jmp    c0006886 <sbrk+0x66>
c00068ad:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c00068b3:	eb 8f                	jmp    c0006844 <sbrk+0x24>

c00068b5 <mmap>:
c00068b5:	83 ec 18             	sub    esp,0x18
c00068b8:	68 44 da 01 c0       	push   0xc001da44
c00068bd:	e8 e7 8a 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c00068c2:	b8 00 00 00 00       	mov    eax,0x0
c00068c7:	83 c4 1c             	add    esp,0x1c
c00068ca:	c3                   	ret    

c00068cb <munmap>:
c00068cb:	83 ec 18             	sub    esp,0x18
c00068ce:	68 49 da 01 c0       	push   0xc001da49
c00068d3:	e8 d1 8a 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c00068d8:	b8 00 00 00 00       	mov    eax,0x0
c00068dd:	83 c4 1c             	add    esp,0x1c
c00068e0:	c3                   	ret    

c00068e1 <liballoc_lock()>:
c00068e1:	fa                   	cli    
c00068e2:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c00068e8:	b8 00 00 00 00       	mov    eax,0x0
c00068ed:	c3                   	ret    

c00068ee <liballoc_unlock()>:
c00068ee:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00068f3:	48                   	dec    eax
c00068f4:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c00068f9:	75 01                	jne    c00068fc <liballoc_unlock()+0xe>
c00068fb:	fb                   	sti    
c00068fc:	b8 00 00 00 00       	mov    eax,0x0
c0006901:	c3                   	ret    

c0006902 <liballoc_alloc(int)>:
c0006902:	83 ec 10             	sub    esp,0x10
c0006905:	6a 01                	push   0x1
c0006907:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000690b:	ff 35 54 04 02 c0    	push   DWORD PTR ds:0xc0020454
c0006911:	e8 b2 22 00 00       	call   c0008bc8 <VAS::allocatePages(int, int)>
c0006916:	83 c4 1c             	add    esp,0x1c
c0006919:	c3                   	ret    

c000691a <liballoc_free(void*, int)>:
c000691a:	83 ec 14             	sub    esp,0x14
c000691d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006921:	ff 35 54 04 02 c0    	push   DWORD PTR ds:0xc0020454
c0006927:	e8 5c 1f 00 00       	call   c0008888 <VAS::freeAllocatedPages(unsigned long)>
c000692c:	b8 00 00 00 00       	mov    eax,0x0
c0006931:	83 c4 1c             	add    esp,0x1c
c0006934:	c3                   	ret    

c0006935 <realloc>:
c0006935:	83 ec 14             	sub    esp,0x14
c0006938:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000693c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006940:	e8 3f aa ff ff       	call   c0001384 <dlrealloc>
c0006945:	83 c4 1c             	add    esp,0x1c
c0006948:	c3                   	ret    

c0006949 <malloc>:
c0006949:	83 ec 18             	sub    esp,0x18
c000694c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006950:	e8 f2 a4 ff ff       	call   c0000e47 <dlmalloc>
c0006955:	83 c4 1c             	add    esp,0x1c
c0006958:	c3                   	ret    

c0006959 <free>:
c0006959:	83 ec 18             	sub    esp,0x18
c000695c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006960:	e8 87 a1 ff ff       	call   c0000aec <dlfree>
c0006965:	83 c4 1c             	add    esp,0x1c
c0006968:	c3                   	ret    

c0006969 <rfree>:
c0006969:	83 ec 18             	sub    esp,0x18
c000696c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006970:	e8 77 a1 ff ff       	call   c0000aec <dlfree>
c0006975:	83 c4 1c             	add    esp,0x1c
c0006978:	c3                   	ret    

c0006979 <calloc>:
c0006979:	56                   	push   esi
c000697a:	53                   	push   ebx
c000697b:	83 ec 10             	sub    esp,0x10
c000697e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006982:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0006987:	53                   	push   ebx
c0006988:	e8 bc ff ff ff       	call   c0006949 <malloc>
c000698d:	89 c6                	mov    esi,eax
c000698f:	83 c4 0c             	add    esp,0xc
c0006992:	53                   	push   ebx
c0006993:	6a 00                	push   0x0
c0006995:	50                   	push   eax
c0006996:	e8 0d 9b ff ff       	call   c00004a8 <memset>
c000699b:	89 f0                	mov    eax,esi
c000699d:	83 c4 14             	add    esp,0x14
c00069a0:	5b                   	pop    ebx
c00069a1:	5e                   	pop    esi
c00069a2:	c3                   	ret    

c00069a3 <Krnl::setBootMessage(char const*)>:
c00069a3:	57                   	push   edi
c00069a4:	56                   	push   esi
c00069a5:	53                   	push   ebx
c00069a6:	81 ec a4 00 00 00    	sub    esp,0xa4
c00069ac:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c00069b3:	68 9e 00 00 00       	push   0x9e
c00069b8:	6a 00                	push   0x0
c00069ba:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00069be:	56                   	push   esi
c00069bf:	e8 e4 9a ff ff       	call   c00004a8 <memset>
c00069c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00069c7:	e8 f8 9a ff ff       	call   c00004c4 <strlen>
c00069cc:	ba 50 00 00 00       	mov    edx,0x50
c00069d1:	83 c4 10             	add    esp,0x10
c00069d4:	29 c2                	sub    edx,eax
c00069d6:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c00069da:	d1 ea                	shr    edx,1
c00069dc:	84 c0                	test   al,al
c00069de:	74 19                	je     c00069f9 <Krnl::setBootMessage(char const*)+0x56>
c00069e0:	01 d2                	add    edx,edx
c00069e2:	43                   	inc    ebx
c00069e3:	01 f2                	add    edx,esi
c00069e5:	80 cc 0f             	or     ah,0xf
c00069e8:	83 c2 02             	add    edx,0x2
c00069eb:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c00069ef:	43                   	inc    ebx
c00069f0:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c00069f5:	84 c0                	test   al,al
c00069f7:	75 ec                	jne    c00069e5 <Krnl::setBootMessage(char const*)+0x42>
c00069f9:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c00069fe:	b9 9e 00 00 00       	mov    ecx,0x9e
c0006a03:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006a05:	81 c4 a0 00 00 00    	add    esp,0xa0
c0006a0b:	5b                   	pop    ebx
c0006a0c:	5e                   	pop    esi
c0006a0d:	5f                   	pop    edi
c0006a0e:	c3                   	ret    

c0006a0f <kernel_main>:
c0006a0f:	55                   	push   ebp
c0006a10:	57                   	push   edi
c0006a11:	bf f9 03 00 00       	mov    edi,0x3f9
c0006a16:	56                   	push   esi
c0006a17:	89 fa                	mov    edx,edi
c0006a19:	53                   	push   ebx
c0006a1a:	31 f6                	xor    esi,esi
c0006a1c:	83 ec 38             	sub    esp,0x38
c0006a1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0006a24:	a3 80 03 02 c0       	mov    ds:0xc0020380,eax
c0006a29:	89 f0                	mov    eax,esi
c0006a2b:	ee                   	out    dx,al
c0006a2c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0006a31:	b0 80                	mov    al,0x80
c0006a33:	89 da                	mov    edx,ebx
c0006a35:	ee                   	out    dx,al
c0006a36:	b1 03                	mov    cl,0x3
c0006a38:	ba f8 03 00 00       	mov    edx,0x3f8
c0006a3d:	88 c8                	mov    al,cl
c0006a3f:	ee                   	out    dx,al
c0006a40:	89 f0                	mov    eax,esi
c0006a42:	89 fa                	mov    edx,edi
c0006a44:	ee                   	out    dx,al
c0006a45:	88 c8                	mov    al,cl
c0006a47:	89 da                	mov    edx,ebx
c0006a49:	ee                   	out    dx,al
c0006a4a:	b0 c7                	mov    al,0xc7
c0006a4c:	ba fa 03 00 00       	mov    edx,0x3fa
c0006a51:	ee                   	out    dx,al
c0006a52:	b0 0b                	mov    al,0xb
c0006a54:	ba fc 03 00 00       	mov    edx,0x3fc
c0006a59:	ee                   	out    dx,al
c0006a5a:	68 50 da 01 c0       	push   0xc001da50
c0006a5f:	e8 6f 2c 00 00       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0006a64:	0f be 05 40 fb 01 c0 	movsx  eax,BYTE PTR ds:0xc001fb40
c0006a6b:	83 c4 10             	add    esp,0x10
c0006a6e:	84 c0                	test   al,al
c0006a70:	74 5c                	je     c0006ace <kernel_main+0xbf>
c0006a72:	31 db                	xor    ebx,ebx
c0006a74:	bd 0a 00 00 00       	mov    ebp,0xa
c0006a79:	bf 05 00 00 00       	mov    edi,0x5
c0006a7e:	31 f6                	xor    esi,esi
c0006a80:	eb 14                	jmp    c0006a96 <kernel_main+0x87>
c0006a82:	47                   	inc    edi
c0006a83:	bd 0a 00 00 00       	mov    ebp,0xa
c0006a88:	31 f6                	xor    esi,esi
c0006a8a:	43                   	inc    ebx
c0006a8b:	0f be 83 40 fb 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe04c0]
c0006a92:	84 c0                	test   al,al
c0006a94:	74 38                	je     c0006ace <kernel_main+0xbf>
c0006a96:	80 be 76 fb 01 c0 db 	cmp    BYTE PTR [esi-0x3ffe048a],0xdb
c0006a9d:	0f 84 97 00 00 00    	je     c0006b3a <kernel_main+0x12b>
c0006aa3:	3c 0d                	cmp    al,0xd
c0006aa5:	74 e3                	je     c0006a8a <kernel_main+0x7b>
c0006aa7:	3c 0a                	cmp    al,0xa
c0006aa9:	74 d7                	je     c0006a82 <kernel_main+0x73>
c0006aab:	83 ec 0c             	sub    esp,0xc
c0006aae:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0006ab2:	57                   	push   edi
c0006ab3:	43                   	inc    ebx
c0006ab4:	52                   	push   edx
c0006ab5:	46                   	inc    esi
c0006ab6:	6a 00                	push   0x0
c0006ab8:	6a 0e                	push   0xe
c0006aba:	50                   	push   eax
c0006abb:	e8 14 f7 00 00       	call   c00161d4 <Hal::consoleWriteCharacter(char, int, int, int, int)>
c0006ac0:	83 c4 20             	add    esp,0x20
c0006ac3:	0f be 83 40 fb 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe04c0]
c0006aca:	84 c0                	test   al,al
c0006acc:	75 c8                	jne    c0006a96 <kernel_main+0x87>
c0006ace:	83 ec 0c             	sub    esp,0xc
c0006ad1:	a1 24 05 00 00       	mov    eax,ds:0x524
c0006ad6:	05 ff 0f 00 00       	add    eax,0xfff
c0006adb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0006ae0:	50                   	push   eax
c0006ae1:	e8 7b 03 00 00       	call   c0006e61 <Phys::physicalMemorySetup(unsigned int)>
c0006ae6:	e8 45 1b 00 00       	call   c0008630 <Virt::virtualMemorySetup()>
c0006aeb:	58                   	pop    eax
c0006aec:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0006af0:	53                   	push   ebx
c0006af1:	e8 fa 26 00 00       	call   c00091f0 <VAS::VAS()>
c0006af6:	89 1d 54 04 02 c0    	mov    DWORD PTR ds:0xc0020454,ebx
c0006afc:	e8 1f 95 ff ff       	call   c0000020 <callGlobalConstructors>
c0006b01:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c0006b08:	e8 3c fe ff ff       	call   c0006949 <malloc>
c0006b0d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006b10:	89 c6                	mov    esi,eax
c0006b12:	e8 99 f0 ff ff       	call   c0005bb0 <Computer::Computer()>
c0006b17:	6a 00                	push   0x0
c0006b19:	89 35 68 03 02 c0    	mov    DWORD PTR ds:0xc0020368,esi
c0006b1f:	6a 00                	push   0x0
c0006b21:	6a 00                	push   0x0
c0006b23:	56                   	push   esi
c0006b24:	e8 d7 f4 ff ff       	call   c0006000 <Computer::open(int, int, void*)>
c0006b29:	83 c4 14             	add    esp,0x14
c0006b2c:	53                   	push   ebx
c0006b2d:	e8 2e 1e 00 00       	call   c0008960 <VAS::~VAS()>
c0006b32:	83 c4 3c             	add    esp,0x3c
c0006b35:	5b                   	pop    ebx
c0006b36:	5e                   	pop    esi
c0006b37:	5f                   	pop    edi
c0006b38:	5d                   	pop    ebp
c0006b39:	c3                   	ret    
c0006b3a:	0f b6 96 75 fb 01 c0 	movzx  edx,BYTE PTR [esi-0x3ffe048b]
c0006b41:	83 e2 fe             	and    edx,0xfffffffe
c0006b44:	81 fa ba 00 00 00    	cmp    edx,0xba
c0006b4a:	0f 85 53 ff ff ff    	jne    c0006aa3 <kernel_main+0x94>
c0006b50:	45                   	inc    ebp
c0006b51:	e9 4d ff ff ff       	jmp    c0006aa3 <kernel_main+0x94>

c0006b56 <Phys::allocateDMA(unsigned long)>:
c0006b56:	55                   	push   ebp
c0006b57:	31 ed                	xor    ebp,ebp
c0006b59:	57                   	push   edi
c0006b5a:	56                   	push   esi
c0006b5b:	53                   	push   ebx
c0006b5c:	31 db                	xor    ebx,ebx
c0006b5e:	83 ec 1c             	sub    esp,0x1c
c0006b61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0006b65:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0006b6d:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	c1 ef 0c             	shr    edi,0xc
c0006b78:	eb 19                	jmp    c0006b93 <Phys::allocateDMA(unsigned long)+0x3d>
c0006b7a:	85 c0                	test   eax,eax
c0006b7c:	75 06                	jne    c0006b84 <Phys::allocateDMA(unsigned long)+0x2e>
c0006b7e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0006b82:	89 dd                	mov    ebp,ebx
c0006b84:	8d 70 01             	lea    esi,[eax+0x1]
c0006b87:	39 f7                	cmp    edi,esi
c0006b89:	74 33                	je     c0006bbe <Phys::allocateDMA(unsigned long)+0x68>
c0006b8b:	89 f0                	mov    eax,esi
c0006b8d:	43                   	inc    ebx
c0006b8e:	83 fb 0f             	cmp    ebx,0xf
c0006b91:	7f 11                	jg     c0006ba4 <Phys::allocateDMA(unsigned long)+0x4e>
c0006b93:	80 bb 9c 03 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdfc64],0x0
c0006b9a:	74 de                	je     c0006b7a <Phys::allocateDMA(unsigned long)+0x24>
c0006b9c:	31 c0                	xor    eax,eax
c0006b9e:	43                   	inc    ebx
c0006b9f:	83 fb 0f             	cmp    ebx,0xf
c0006ba2:	7e ef                	jle    c0006b93 <Phys::allocateDMA(unsigned long)+0x3d>
c0006ba4:	83 ec 0c             	sub    esp,0xc
c0006ba7:	68 68 da 01 c0       	push   0xc001da68
c0006bac:	e8 f8 87 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c0006bb1:	83 c4 10             	add    esp,0x10
c0006bb4:	31 c0                	xor    eax,eax
c0006bb6:	83 c4 1c             	add    esp,0x1c
c0006bb9:	5b                   	pop    ebx
c0006bba:	5e                   	pop    esi
c0006bbb:	5f                   	pop    edi
c0006bbc:	5d                   	pop    ebp
c0006bbd:	c3                   	ret    
c0006bbe:	89 e9                	mov    ecx,ebp
c0006bc0:	c1 f9 04             	sar    ecx,0x4
c0006bc3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006bc7:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0006bcb:	89 ca                	mov    edx,ecx
c0006bcd:	4a                   	dec    edx
c0006bce:	79 03                	jns    c0006bd3 <Phys::allocateDMA(unsigned long)+0x7d>
c0006bd0:	8d 51 0e             	lea    edx,[ecx+0xe]
c0006bd3:	c1 fa 04             	sar    edx,0x4
c0006bd6:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0006bda:	74 08                	je     c0006be4 <Phys::allocateDMA(unsigned long)+0x8e>
c0006bdc:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006be0:	31 c0                	xor    eax,eax
c0006be2:	eb ba                	jmp    c0006b9e <Phys::allocateDMA(unsigned long)+0x48>
c0006be4:	85 f6                	test   esi,esi
c0006be6:	74 15                	je     c0006bfd <Phys::allocateDMA(unsigned long)+0xa7>
c0006be8:	8d 95 9c 03 02 c0    	lea    edx,[ebp-0x3ffdfc64]
c0006bee:	8d 84 05 9d 03 02 c0 	lea    eax,[ebp+eax*1-0x3ffdfc63]
c0006bf5:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0006bf8:	42                   	inc    edx
c0006bf9:	39 d0                	cmp    eax,edx
c0006bfb:	75 f8                	jne    c0006bf5 <Phys::allocateDMA(unsigned long)+0x9f>
c0006bfd:	01 3d 94 03 02 c0    	add    DWORD PTR ds:0xc0020394,edi
c0006c03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c07:	85 c0                	test   eax,eax
c0006c09:	74 17                	je     c0006c22 <Phys::allocateDMA(unsigned long)+0xcc>
c0006c0b:	83 ec 0c             	sub    esp,0xc
c0006c0e:	68 68 da 01 c0       	push   0xc001da68
c0006c13:	e8 91 87 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c0006c18:	83 c4 10             	add    esp,0x10
c0006c1b:	89 f0                	mov    eax,esi
c0006c1d:	e9 6b ff ff ff       	jmp    c0006b8d <Phys::allocateDMA(unsigned long)+0x37>
c0006c22:	c1 e5 0c             	shl    ebp,0xc
c0006c25:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0006c2b:	eb 89                	jmp    c0006bb6 <Phys::allocateDMA(unsigned long)+0x60>

c0006c2d <Phys::freeDMA(unsigned long, unsigned long)>:
c0006c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c31:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0006c37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006c3b:	c1 ea 0c             	shr    edx,0xc
c0006c3e:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0006c43:	29 15 94 03 02 c0    	sub    DWORD PTR ds:0xc0020394,edx
c0006c49:	c1 e8 0c             	shr    eax,0xc
c0006c4c:	85 d2                	test   edx,edx
c0006c4e:	74 0f                	je     c0006c5f <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0006c50:	05 9c 03 02 c0       	add    eax,0xc002039c
c0006c55:	01 c2                	add    edx,eax
c0006c57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c5a:	40                   	inc    eax
c0006c5b:	39 d0                	cmp    eax,edx
c0006c5d:	75 f8                	jne    c0006c57 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0006c5f:	c3                   	ret    

c0006c60 <Phys::setPageState(unsigned long, bool)>:
c0006c60:	56                   	push   esi
c0006c61:	ba 01 00 00 00       	mov    edx,0x1
c0006c66:	53                   	push   ebx
c0006c67:	8b 35 84 fc 01 c0    	mov    esi,DWORD PTR ds:0xc001fc84
c0006c6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c71:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006c75:	89 c8                	mov    eax,ecx
c0006c77:	83 e1 07             	and    ecx,0x7
c0006c7a:	c1 e8 03             	shr    eax,0x3
c0006c7d:	d3 e3                	shl    ebx,cl
c0006c7f:	01 c6                	add    esi,eax
c0006c81:	d3 e2                	shl    edx,cl
c0006c83:	f7 d2                	not    edx
c0006c85:	20 16                	and    BYTE PTR [esi],dl
c0006c87:	03 05 84 fc 01 c0    	add    eax,DWORD PTR ds:0xc001fc84
c0006c8d:	08 18                	or     BYTE PTR [eax],bl
c0006c8f:	5b                   	pop    ebx
c0006c90:	5e                   	pop    esi
c0006c91:	c3                   	ret    

c0006c92 <Phys::getPageState(unsigned long)>:
c0006c92:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006c96:	8b 15 84 fc 01 c0    	mov    edx,DWORD PTR ds:0xc001fc84
c0006c9c:	89 c8                	mov    eax,ecx
c0006c9e:	83 e1 07             	and    ecx,0x7
c0006ca1:	c1 e8 03             	shr    eax,0x3
c0006ca4:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0006ca8:	d3 f8                	sar    eax,cl
c0006caa:	83 e0 01             	and    eax,0x1
c0006cad:	c3                   	ret    

c0006cae <Phys::freePage(unsigned long)>:
c0006cae:	53                   	push   ebx
c0006caf:	83 ec 08             	sub    esp,0x8
c0006cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb6:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0006cbc:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0006cc2:	76 3a                	jbe    c0006cfe <Phys::freePage(unsigned long)+0x50>
c0006cc4:	c1 e8 0c             	shr    eax,0xc
c0006cc7:	50                   	push   eax
c0006cc8:	89 c3                	mov    ebx,eax
c0006cca:	e8 c3 ff ff ff       	call   c0006c92 <Phys::getPageState(unsigned long)>
c0006ccf:	5a                   	pop    edx
c0006cd0:	84 c0                	test   al,al
c0006cd2:	74 19                	je     c0006ced <Phys::freePage(unsigned long)+0x3f>
c0006cd4:	83 ec 08             	sub    esp,0x8
c0006cd7:	ff 0d 94 03 02 c0    	dec    DWORD PTR ds:0xc0020394
c0006cdd:	6a 00                	push   0x0
c0006cdf:	53                   	push   ebx
c0006ce0:	e8 7b ff ff ff       	call   c0006c60 <Phys::setPageState(unsigned long, bool)>
c0006ce5:	83 c4 10             	add    esp,0x10
c0006ce8:	83 c4 08             	add    esp,0x8
c0006ceb:	5b                   	pop    ebx
c0006cec:	c3                   	ret    
c0006ced:	c7 44 24 10 0d db 01 c0 	mov    DWORD PTR [esp+0x10],0xc001db0d
c0006cf5:	83 c4 08             	add    esp,0x8
c0006cf8:	5b                   	pop    ebx
c0006cf9:	e9 ab 86 00 00       	jmp    c000f3a9 <Krnl::panic(char const*)>
c0006cfe:	68 00 10 00 00       	push   0x1000
c0006d03:	50                   	push   eax
c0006d04:	e8 24 ff ff ff       	call   c0006c2d <Phys::freeDMA(unsigned long, unsigned long)>
c0006d09:	59                   	pop    ecx
c0006d0a:	5b                   	pop    ebx
c0006d0b:	83 c4 08             	add    esp,0x8
c0006d0e:	5b                   	pop    ebx
c0006d0f:	c3                   	ret    

c0006d10 <Phys::allocatePage()>:
c0006d10:	56                   	push   esi
c0006d11:	53                   	push   ebx
c0006d12:	83 ec 14             	sub    esp,0x14
c0006d15:	8b 35 88 03 02 c0    	mov    esi,DWORD PTR ds:0xc0020388
c0006d1b:	89 f3                	mov    ebx,esi
c0006d1d:	eb 0a                	jmp    c0006d29 <Phys::allocatePage()+0x19>
c0006d1f:	89 1d 88 03 02 c0    	mov    DWORD PTR ds:0xc0020388,ebx
c0006d25:	39 de                	cmp    esi,ebx
c0006d27:	74 24                	je     c0006d4d <Phys::allocatePage()+0x3d>
c0006d29:	53                   	push   ebx
c0006d2a:	e8 63 ff ff ff       	call   c0006c92 <Phys::getPageState(unsigned long)>
c0006d2f:	5a                   	pop    edx
c0006d30:	84 c0                	test   al,al
c0006d32:	74 5e                	je     c0006d92 <Phys::allocatePage()+0x82>
c0006d34:	43                   	inc    ebx
c0006d35:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0006d3b:	75 e2                	jne    c0006d1f <Phys::allocatePage()+0xf>
c0006d3d:	31 db                	xor    ebx,ebx
c0006d3f:	c7 05 88 03 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020388,0x0
c0006d49:	39 de                	cmp    esi,ebx
c0006d4b:	75 dc                	jne    c0006d29 <Phys::allocatePage()+0x19>
c0006d4d:	83 ec 0c             	sub    esp,0xc
c0006d50:	80 35 ac 03 02 c0 01 	xor    BYTE PTR ds:0xc00203ac,0x1
c0006d57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0006d5c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0006d5f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0006d65:	e8 a0 26 00 00       	call   c000940a <VAS::scanForEviction()>
c0006d6a:	83 c4 10             	add    esp,0x10
c0006d6d:	85 c0                	test   eax,eax
c0006d6f:	75 3f                	jne    c0006db0 <Phys::allocatePage()+0xa0>
c0006d71:	83 ec 0c             	sub    esp,0xc
c0006d74:	68 90 da 01 c0       	push   0xc001da90
c0006d79:	e8 2b 86 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c0006d7e:	83 c4 10             	add    esp,0x10
c0006d81:	8b 1d 88 03 02 c0    	mov    ebx,DWORD PTR ds:0xc0020388
c0006d87:	53                   	push   ebx
c0006d88:	e8 05 ff ff ff       	call   c0006c92 <Phys::getPageState(unsigned long)>
c0006d8d:	5a                   	pop    edx
c0006d8e:	84 c0                	test   al,al
c0006d90:	75 a2                	jne    c0006d34 <Phys::allocatePage()+0x24>
c0006d92:	6a 01                	push   0x1
c0006d94:	53                   	push   ebx
c0006d95:	e8 c6 fe ff ff       	call   c0006c60 <Phys::setPageState(unsigned long, bool)>
c0006d9a:	a1 88 03 02 c0       	mov    eax,ds:0xc0020388
c0006d9f:	5a                   	pop    edx
c0006da0:	ff 05 94 03 02 c0    	inc    DWORD PTR ds:0xc0020394
c0006da6:	c1 e0 0c             	shl    eax,0xc
c0006da9:	59                   	pop    ecx
c0006daa:	83 c4 14             	add    esp,0x14
c0006dad:	5b                   	pop    ebx
c0006dae:	5e                   	pop    esi
c0006daf:	c3                   	ret    
c0006db0:	83 ec 08             	sub    esp,0x8
c0006db3:	89 c2                	mov    edx,eax
c0006db5:	6a 01                	push   0x1
c0006db7:	c1 ea 0c             	shr    edx,0xc
c0006dba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006dbe:	52                   	push   edx
c0006dbf:	e8 9c fe ff ff       	call   c0006c60 <Phys::setPageState(unsigned long, bool)>
c0006dc4:	83 c4 10             	add    esp,0x10
c0006dc7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dcb:	eb dd                	jmp    c0006daa <Phys::allocatePage()+0x9a>

c0006dcd <Phys::allocateContiguousPages(int)>:
c0006dcd:	57                   	push   edi
c0006dce:	56                   	push   esi
c0006dcf:	53                   	push   ebx
c0006dd0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0006dd4:	fa                   	cli    
c0006dd5:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0006ddb:	31 db                	xor    ebx,ebx
c0006ddd:	85 db                	test   ebx,ebx
c0006ddf:	75 11                	jne    c0006df2 <Phys::allocateContiguousPages(int)+0x25>
c0006de1:	e8 2a ff ff ff       	call   c0006d10 <Phys::allocatePage()>
c0006de6:	83 fe 01             	cmp    esi,0x1
c0006de9:	89 c7                	mov    edi,eax
c0006deb:	74 21                	je     c0006e0e <Phys::allocateContiguousPages(int)+0x41>
c0006ded:	bb 01 00 00 00       	mov    ebx,0x1
c0006df2:	e8 19 ff ff ff       	call   c0006d10 <Phys::allocatePage()>
c0006df7:	89 da                	mov    edx,ebx
c0006df9:	c1 e2 0c             	shl    edx,0xc
c0006dfc:	01 fa                	add    edx,edi
c0006dfe:	39 c2                	cmp    edx,eax
c0006e00:	74 20                	je     c0006e22 <Phys::allocateContiguousPages(int)+0x55>
c0006e02:	bb 01 00 00 00       	mov    ebx,0x1
c0006e07:	89 c7                	mov    edi,eax
c0006e09:	83 fe 01             	cmp    esi,0x1
c0006e0c:	75 e4                	jne    c0006df2 <Phys::allocateContiguousPages(int)+0x25>
c0006e0e:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0006e13:	48                   	dec    eax
c0006e14:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0006e19:	75 01                	jne    c0006e1c <Phys::allocateContiguousPages(int)+0x4f>
c0006e1b:	fb                   	sti    
c0006e1c:	89 f8                	mov    eax,edi
c0006e1e:	5b                   	pop    ebx
c0006e1f:	5e                   	pop    esi
c0006e20:	5f                   	pop    edi
c0006e21:	c3                   	ret    
c0006e22:	43                   	inc    ebx
c0006e23:	39 f3                	cmp    ebx,esi
c0006e25:	75 b6                	jne    c0006ddd <Phys::allocateContiguousPages(int)+0x10>
c0006e27:	eb e5                	jmp    c0006e0e <Phys::allocateContiguousPages(int)+0x41>

c0006e29 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0006e29:	56                   	push   esi
c0006e2a:	53                   	push   ebx
c0006e2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006e2f:	39 1d 8c 03 02 c0    	cmp    DWORD PTR ds:0xc002038c,ebx
c0006e35:	73 06                	jae    c0006e3d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0006e37:	89 1d 8c 03 02 c0    	mov    DWORD PTR ds:0xc002038c,ebx
c0006e3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e41:	c1 eb 0c             	shr    ebx,0xc
c0006e44:	c1 e8 0c             	shr    eax,0xc
c0006e47:	39 d8                	cmp    eax,ebx
c0006e49:	73 13                	jae    c0006e5e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0006e4b:	6a 00                	push   0x0
c0006e4d:	8d 70 01             	lea    esi,[eax+0x1]
c0006e50:	50                   	push   eax
c0006e51:	e8 0a fe ff ff       	call   c0006c60 <Phys::setPageState(unsigned long, bool)>
c0006e56:	5a                   	pop    edx
c0006e57:	89 f0                	mov    eax,esi
c0006e59:	59                   	pop    ecx
c0006e5a:	39 f3                	cmp    ebx,esi
c0006e5c:	75 ed                	jne    c0006e4b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0006e5e:	5b                   	pop    ebx
c0006e5f:	5e                   	pop    esi
c0006e60:	c3                   	ret    

c0006e61 <Phys::physicalMemorySetup(unsigned int)>:
c0006e61:	55                   	push   ebp
c0006e62:	57                   	push   edi
c0006e63:	56                   	push   esi
c0006e64:	53                   	push   ebx
c0006e65:	31 db                	xor    ebx,ebx
c0006e67:	83 ec 40             	sub    esp,0x40
c0006e6a:	6a 10                	push   0x10
c0006e6c:	6a 00                	push   0x0
c0006e6e:	68 9c 03 02 c0       	push   0xc002039c
c0006e73:	e8 30 96 ff ff       	call   c00004a8 <memset>
c0006e78:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006e7c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0006e81:	05 00 10 00 00       	add    eax,0x1000
c0006e86:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006e8a:	5a                   	pop    edx
c0006e8b:	59                   	pop    ecx
c0006e8c:	50                   	push   eax
c0006e8d:	68 23 db 01 c0       	push   0xc001db23
c0006e92:	e8 3c 28 00 00       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0006e97:	83 c4 10             	add    esp,0x10
c0006e9a:	83 ec 08             	sub    esp,0x8
c0006e9d:	6a 01                	push   0x1
c0006e9f:	53                   	push   ebx
c0006ea0:	43                   	inc    ebx
c0006ea1:	e8 ba fd ff ff       	call   c0006c60 <Phys::setPageState(unsigned long, bool)>
c0006ea6:	83 c4 10             	add    esp,0x10
c0006ea9:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0006eaf:	75 e9                	jne    c0006e9a <Phys::physicalMemorySetup(unsigned int)+0x39>
c0006eb1:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0006eb8:	66 85 c0             	test   ax,ax
c0006ebb:	0f 84 8e 01 00 00    	je     c000704f <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c0006ec1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006ec5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0006ecd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006ed1:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0006ed6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006eda:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006ee2:	eb 15                	jmp    c0006ef9 <Phys::physicalMemorySetup(unsigned int)+0x98>
c0006ee4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006ee8:	83 c3 18             	add    ebx,0x18
c0006eeb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006eef:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0006ef3:	0f 84 66 01 00 00    	je     c000705f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c0006ef9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0006efc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006eff:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006f02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006f06:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006f0a:	8b 33                	mov    esi,DWORD PTR [ebx]
c0006f0c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0006f0f:	01 f0                	add    eax,esi
c0006f11:	55                   	push   ebp
c0006f12:	11 fa                	adc    edx,edi
c0006f14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006f18:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0006f1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0006f20:	56                   	push   esi
c0006f21:	68 c0 da 01 c0       	push   0xc001dac0
c0006f26:	e8 a8 27 00 00       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0006f2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f2f:	83 c4 10             	add    esp,0x10
c0006f32:	09 f8                	or     eax,edi
c0006f34:	0f 85 25 01 00 00    	jne    c000705f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c0006f3a:	4d                   	dec    ebp
c0006f3b:	75 a7                	jne    c0006ee4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0006f3d:	ba 00 00 08 00       	mov    edx,0x80000
c0006f42:	89 c1                	mov    ecx,eax
c0006f44:	39 f2                	cmp    edx,esi
c0006f46:	19 f9                	sbb    ecx,edi
c0006f48:	0f 82 a7 00 00 00    	jb     c0006ff5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c0006f4e:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0006f52:	89 c1                	mov    ecx,eax
c0006f54:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0006f58:	0f 83 97 00 00 00    	jae    c0006ff5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c0006f5e:	ba 00 00 0a 00       	mov    edx,0xa0000
c0006f63:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0006f67:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0006f6b:	39 fa                	cmp    edx,edi
c0006f6d:	19 e8                	sbb    eax,ebp
c0006f6f:	0f 82 9a 01 00 00    	jb     c000710f <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0006f75:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0006f79:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0006f7d:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0006f83:	ba ff 1f 00 00       	mov    edx,0x1fff
c0006f88:	83 d5 ff             	adc    ebp,0xffffffff
c0006f8b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0006f8f:	31 c0                	xor    eax,eax
c0006f91:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0006f95:	39 fa                	cmp    edx,edi
c0006f97:	89 c1                	mov    ecx,eax
c0006f99:	19 e9                	sbb    ecx,ebp
c0006f9b:	0f 83 43 ff ff ff    	jae    c0006ee4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0006fa1:	be 00 00 08 00       	mov    esi,0x80000
c0006fa6:	51                   	push   ecx
c0006fa7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0006fab:	57                   	push   edi
c0006fac:	56                   	push   esi
c0006fad:	68 e4 da 01 c0       	push   0xc001dae4
c0006fb2:	e8 1c 27 00 00       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0006fb7:	5d                   	pop    ebp
c0006fb8:	58                   	pop    eax
c0006fb9:	57                   	push   edi
c0006fba:	56                   	push   esi
c0006fbb:	e8 69 fe ff ff       	call   c0006e29 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0006fc0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0006fc4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006fc8:	83 c4 0c             	add    esp,0xc
c0006fcb:	0f ac d0 0c          	shrd   eax,edx,0xc
c0006fcf:	03 05 98 03 02 c0    	add    eax,DWORD PTR ds:0xc0020398
c0006fd5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0006fdc:	a3 98 03 02 c0       	mov    ds:0xc0020398,eax
c0006fe1:	52                   	push   edx
c0006fe2:	50                   	push   eax
c0006fe3:	68 49 db 01 c0       	push   0xc001db49
c0006fe8:	e8 e6 26 00 00       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0006fed:	83 c4 10             	add    esp,0x10
c0006ff0:	e9 ef fe ff ff       	jmp    c0006ee4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0006ff5:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0006ff9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ffd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007001:	39 ea                	cmp    edx,ebp
c0007003:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007007:	0f 82 d7 fe ff ff    	jb     c0006ee4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000700d:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007012:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007016:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000701a:	0f 83 c4 fe ff ff    	jae    c0006ee4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0007020:	39 ee                	cmp    esi,ebp
c0007022:	89 f8                	mov    eax,edi
c0007024:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007028:	0f 83 78 ff ff ff    	jae    c0006fa6 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000702e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007032:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007036:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000703a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000703e:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007042:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007046:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000704a:	e9 57 ff ff ff       	jmp    c0006fa6 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000704f:	83 ec 0c             	sub    esp,0xc
c0007052:	68 3b db 01 c0       	push   0xc001db3b
c0007057:	e8 4d 83 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c000705c:	83 c4 10             	add    esp,0x10
c000705f:	83 ec 08             	sub    esp,0x8
c0007062:	bb 60 00 00 00       	mov    ebx,0x60
c0007067:	6a 00                	push   0x0
c0007069:	6a 06                	push   0x6
c000706b:	e8 f0 fb ff ff       	call   c0006c60 <Phys::setPageState(unsigned long, bool)>
c0007070:	58                   	pop    eax
c0007071:	5a                   	pop    edx
c0007072:	6a 00                	push   0x0
c0007074:	6a 07                	push   0x7
c0007076:	e8 e5 fb ff ff       	call   c0006c60 <Phys::setPageState(unsigned long, bool)>
c000707b:	83 05 98 03 02 c0 02 	add    DWORD PTR ds:0xc0020398,0x2
c0007082:	83 c4 10             	add    esp,0x10
c0007085:	83 ec 08             	sub    esp,0x8
c0007088:	6a 00                	push   0x0
c000708a:	53                   	push   ebx
c000708b:	43                   	inc    ebx
c000708c:	e8 cf fb ff ff       	call   c0006c60 <Phys::setPageState(unsigned long, bool)>
c0007091:	83 c4 10             	add    esp,0x10
c0007094:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000709a:	75 e9                	jne    c0007085 <Phys::physicalMemorySetup(unsigned int)+0x224>
c000709c:	a1 98 03 02 c0       	mov    eax,ds:0xc0020398
c00070a1:	bb 40 01 00 00       	mov    ebx,0x140
c00070a6:	83 c0 20             	add    eax,0x20
c00070a9:	a3 98 03 02 c0       	mov    ds:0xc0020398,eax
c00070ae:	eb 22                	jmp    c00070d2 <Phys::physicalMemorySetup(unsigned int)+0x271>
c00070b0:	83 ec 08             	sub    esp,0x8
c00070b3:	6a 00                	push   0x0
c00070b5:	53                   	push   ebx
c00070b6:	43                   	inc    ebx
c00070b7:	e8 a4 fb ff ff       	call   c0006c60 <Phys::setPageState(unsigned long, bool)>
c00070bc:	a1 98 03 02 c0       	mov    eax,ds:0xc0020398
c00070c1:	83 c4 10             	add    esp,0x10
c00070c4:	40                   	inc    eax
c00070c5:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00070cb:	a3 98 03 02 c0       	mov    ds:0xc0020398,eax
c00070d0:	74 07                	je     c00070d9 <Phys::physicalMemorySetup(unsigned int)+0x278>
c00070d2:	3d ff 03 00 00       	cmp    eax,0x3ff
c00070d7:	7e d7                	jle    c00070b0 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00070d9:	bb d0 01 00 00       	mov    ebx,0x1d0
c00070de:	3d ff 07 00 00       	cmp    eax,0x7ff
c00070e3:	7f 22                	jg     c0007107 <Phys::physicalMemorySetup(unsigned int)+0x2a6>
c00070e5:	83 ec 08             	sub    esp,0x8
c00070e8:	6a 00                	push   0x0
c00070ea:	53                   	push   ebx
c00070eb:	43                   	inc    ebx
c00070ec:	e8 6f fb ff ff       	call   c0006c60 <Phys::setPageState(unsigned long, bool)>
c00070f1:	a1 98 03 02 c0       	mov    eax,ds:0xc0020398
c00070f6:	83 c4 10             	add    esp,0x10
c00070f9:	40                   	inc    eax
c00070fa:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007100:	a3 98 03 02 c0       	mov    ds:0xc0020398,eax
c0007105:	75 d7                	jne    c00070de <Phys::physicalMemorySetup(unsigned int)+0x27d>
c0007107:	83 c4 3c             	add    esp,0x3c
c000710a:	5b                   	pop    ebx
c000710b:	5e                   	pop    esi
c000710c:	5f                   	pop    edi
c000710d:	5d                   	pop    ebp
c000710e:	c3                   	ret    
c000710f:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007117:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000711f:	e9 51 fe ff ff       	jmp    c0006f75 <Phys::physicalMemorySetup(unsigned int)+0x114>

c0007124 <Pipe::isAtty()>:
c0007124:	31 c0                	xor    eax,eax
c0007126:	c3                   	ret    
c0007127:	90                   	nop

c0007128 <Pipe::~Pipe()>:
c0007128:	83 ec 0c             	sub    esp,0xc
c000712b:	ba a8 db 01 c0       	mov    edx,0xc001dba8
c0007130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007134:	89 10                	mov    DWORD PTR [eax],edx
c0007136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000713a:	83 ec 0c             	sub    esp,0xc
c000713d:	50                   	push   eax
c000713e:	e8 cd 10 00 00       	call   c0008210 <UnixFile::~UnixFile()>
c0007143:	83 c4 10             	add    esp,0x10
c0007146:	90                   	nop
c0007147:	83 c4 0c             	add    esp,0xc
c000714a:	c3                   	ret    
c000714b:	90                   	nop

c000714c <Pipe::~Pipe()>:
c000714c:	83 ec 0c             	sub    esp,0xc
c000714f:	83 ec 0c             	sub    esp,0xc
c0007152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007156:	e8 cd ff ff ff       	call   c0007128 <Pipe::~Pipe()>
c000715b:	83 c4 10             	add    esp,0x10
c000715e:	83 ec 08             	sub    esp,0x8
c0007161:	6a 20                	push   0x20
c0007163:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007167:	e8 86 24 00 00       	call   c00095f2 <operator delete(void*, unsigned long)>
c000716c:	83 c4 10             	add    esp,0x10
c000716f:	83 c4 0c             	add    esp,0xc
c0007172:	c3                   	ret    
c0007173:	90                   	nop

c0007174 <Pipe::write(unsigned long long, void*, int*)>:
c0007174:	55                   	push   ebp
c0007175:	57                   	push   edi
c0007176:	56                   	push   esi
c0007177:	53                   	push   ebx
c0007178:	83 ec 1c             	sub    esp,0x1c
c000717b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000717f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007183:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007186:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000718a:	89 04 24             	mov    DWORD PTR [esp],eax
c000718d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007191:	89 d8                	mov    eax,ebx
c0007193:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007196:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000719a:	89 d6                	mov    esi,edx
c000719c:	89 d7                	mov    edi,edx
c000719e:	c1 ff 1f             	sar    edi,0x1f
c00071a1:	03 34 24             	add    esi,DWORD PTR [esp]
c00071a4:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00071a8:	c1 f8 1f             	sar    eax,0x1f
c00071ab:	39 f3                	cmp    ebx,esi
c00071ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00071b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00071b5:	19 f8                	sbb    eax,edi
c00071b7:	b8 01 00 00 00       	mov    eax,0x1
c00071bc:	72 6e                	jb     c000722c <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00071be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00071c1:	01 d0                	add    eax,edx
c00071c3:	99                   	cdq    
c00071c4:	f7 fb                	idiv   ebx
c00071c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071ca:	29 d3                	sub    ebx,edx
c00071cc:	89 d7                	mov    edi,edx
c00071ce:	89 de                	mov    esi,ebx
c00071d0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00071d3:	c1 fb 1f             	sar    ebx,0x1f
c00071d6:	39 f2                	cmp    edx,esi
c00071d8:	19 d8                	sbb    eax,ebx
c00071da:	b8 00 00 00 00       	mov    eax,0x0
c00071df:	72 04                	jb     c00071e5 <Pipe::write(unsigned long long, void*, int*)+0x71>
c00071e1:	89 d0                	mov    eax,edx
c00071e3:	29 f0                	sub    eax,esi
c00071e5:	89 d3                	mov    ebx,edx
c00071e7:	29 c3                	sub    ebx,eax
c00071e9:	74 0b                	je     c00071f6 <Pipe::write(unsigned long long, void*, int*)+0x82>
c00071eb:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00071ee:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00071f2:	89 d9                	mov    ecx,ebx
c00071f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00071f6:	85 c0                	test   eax,eax
c00071f8:	74 0d                	je     c0007207 <Pipe::write(unsigned long long, void*, int*)+0x93>
c00071fa:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00071fe:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007201:	89 de                	mov    esi,ebx
c0007203:	89 c1                	mov    ecx,eax
c0007205:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007207:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000720a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000720f:	75 10                	jne    c0007221 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007211:	83 ec 0c             	sub    esp,0xc
c0007214:	68 65 db 01 c0       	push   0xc001db65
c0007219:	e8 8b 81 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c000721e:	83 c4 10             	add    esp,0x10
c0007221:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007225:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007228:	89 08                	mov    DWORD PTR [eax],ecx
c000722a:	31 c0                	xor    eax,eax
c000722c:	83 c4 1c             	add    esp,0x1c
c000722f:	5b                   	pop    ebx
c0007230:	5e                   	pop    esi
c0007231:	5f                   	pop    edi
c0007232:	5d                   	pop    ebp
c0007233:	c3                   	ret    

c0007234 <Pipe::read(unsigned long long, void*, int*)>:
c0007234:	55                   	push   ebp
c0007235:	57                   	push   edi
c0007236:	56                   	push   esi
c0007237:	53                   	push   ebx
c0007238:	83 ec 1c             	sub    esp,0x1c
c000723b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000723f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007243:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007247:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000724a:	89 c8                	mov    eax,ecx
c000724c:	99                   	cdq    
c000724d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007251:	74 24                	je     c0007277 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007253:	39 f9                	cmp    ecx,edi
c0007255:	89 d1                	mov    ecx,edx
c0007257:	19 f1                	sbb    ecx,esi
c0007259:	73 1c                	jae    c0007277 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000725b:	fa                   	cli    
c000725c:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0007262:	e8 c5 b5 00 00       	call   c001282c <schedule()>
c0007267:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000726c:	48                   	dec    eax
c000726d:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0007272:	75 d3                	jne    c0007247 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0007274:	fb                   	sti    
c0007275:	eb d0                	jmp    c0007247 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0007277:	39 f8                	cmp    eax,edi
c0007279:	89 d1                	mov    ecx,edx
c000727b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000727e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007282:	19 f1                	sbb    ecx,esi
c0007284:	73 07                	jae    c000728d <Pipe::read(unsigned long long, void*, int*)+0x59>
c0007286:	89 04 24             	mov    DWORD PTR [esp],eax
c0007289:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000728d:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0007290:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0007293:	29 f7                	sub    edi,esi
c0007295:	89 f8                	mov    eax,edi
c0007297:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000729b:	99                   	cdq    
c000729c:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000729f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072a3:	19 d0                	sbb    eax,edx
c00072a5:	73 07                	jae    c00072ae <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00072a7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00072aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00072ae:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00072b1:	89 ea                	mov    edx,ebp
c00072b3:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00072b7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00072bc:	74 0d                	je     c00072cb <Pipe::read(unsigned long long, void*, int*)+0x97>
c00072be:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00072c1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00072c5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00072cb:	85 d2                	test   edx,edx
c00072cd:	74 11                	je     c00072e0 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00072cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072d3:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00072d6:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00072da:	89 d1                	mov    ecx,edx
c00072dc:	89 c7                	mov    edi,eax
c00072de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00072e0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00072e3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00072e6:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00072e9:	99                   	cdq    
c00072ea:	89 f7                	mov    edi,esi
c00072ec:	03 04 24             	add    eax,DWORD PTR [esp]
c00072ef:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00072f3:	c1 ff 1f             	sar    edi,0x1f
c00072f6:	57                   	push   edi
c00072f7:	56                   	push   esi
c00072f8:	52                   	push   edx
c00072f9:	50                   	push   eax
c00072fa:	e8 c1 52 01 00       	call   c001c5c0 <__umoddi3>
c00072ff:	83 c4 10             	add    esp,0x10
c0007302:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0007305:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000730a:	75 10                	jne    c000731c <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000730c:	83 ec 0c             	sub    esp,0xc
c000730f:	68 82 db 01 c0       	push   0xc001db82
c0007314:	e8 90 80 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c0007319:	83 c4 10             	add    esp,0x10
c000731c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007320:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007323:	89 10                	mov    DWORD PTR [eax],edx
c0007325:	83 c4 1c             	add    esp,0x1c
c0007328:	31 c0                	xor    eax,eax
c000732a:	5b                   	pop    ebx
c000732b:	5e                   	pop    esi
c000732c:	5f                   	pop    edi
c000732d:	5d                   	pop    ebp
c000732e:	c3                   	ret    
c000732f:	90                   	nop

c0007330 <Pipe::Pipe(int)>:
c0007330:	83 ec 0c             	sub    esp,0xc
c0007333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007337:	83 ec 08             	sub    esp,0x8
c000733a:	6a 00                	push   0x0
c000733c:	50                   	push   eax
c000733d:	e8 ec 0c 00 00       	call   c000802e <UnixFile::UnixFile(int)>
c0007342:	83 c4 10             	add    esp,0x10
c0007345:	ba a8 db 01 c0       	mov    edx,0xc001dba8
c000734a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000734e:	89 10                	mov    DWORD PTR [eax],edx
c0007350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007354:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007358:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000735b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000735f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0007366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000736a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0007371:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007375:	83 ec 0c             	sub    esp,0xc
c0007378:	50                   	push   eax
c0007379:	e8 cb f5 ff ff       	call   c0006949 <malloc>
c000737e:	83 c4 10             	add    esp,0x10
c0007381:	89 c2                	mov    edx,eax
c0007383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007387:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000738a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000738e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0007392:	90                   	nop
c0007393:	83 c4 0c             	add    esp,0xc
c0007396:	c3                   	ret    
c0007397:	90                   	nop

c0007398 <VgaText::isAtty()>:
c0007398:	b0 01                	mov    al,0x1
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <VgaText::~VgaText()>:
c000739c:	83 ec 0c             	sub    esp,0xc
c000739f:	ba 30 dc 01 c0       	mov    edx,0xc001dc30
c00073a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00073a8:	89 10                	mov    DWORD PTR [eax],edx
c00073aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00073ae:	83 ec 0c             	sub    esp,0xc
c00073b1:	50                   	push   eax
c00073b2:	e8 59 0e 00 00       	call   c0008210 <UnixFile::~UnixFile()>
c00073b7:	83 c4 10             	add    esp,0x10
c00073ba:	90                   	nop
c00073bb:	83 c4 0c             	add    esp,0xc
c00073be:	c3                   	ret    
c00073bf:	90                   	nop

c00073c0 <VgaText::~VgaText()>:
c00073c0:	83 ec 0c             	sub    esp,0xc
c00073c3:	83 ec 0c             	sub    esp,0xc
c00073c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00073ca:	e8 cd ff ff ff       	call   c000739c <VgaText::~VgaText()>
c00073cf:	83 c4 10             	add    esp,0x10
c00073d2:	83 ec 08             	sub    esp,0x8
c00073d5:	68 34 01 00 00       	push   0x134
c00073da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00073de:	e8 0f 22 00 00       	call   c00095f2 <operator delete(void*, unsigned long)>
c00073e3:	83 c4 10             	add    esp,0x10
c00073e6:	83 c4 0c             	add    esp,0xc
c00073e9:	c3                   	ret    

c00073ea <VgaText::read(unsigned long long, void*, int*)>:
c00073ea:	83 ec 10             	sub    esp,0x10
c00073ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00073f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00073f9:	e8 eb 44 00 00       	call   c000b8e9 <readKeyboard(VgaText*, char*, unsigned long)>
c00073fe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007402:	89 02                	mov    DWORD PTR [edx],eax
c0007404:	31 c0                	xor    eax,eax
c0007406:	83 c4 1c             	add    esp,0x1c
c0007409:	c3                   	ret    

c000740a <setTerminalScrollLock(bool)>:
c000740a:	c3                   	ret    

c000740b <doTerminalCycle()>:
c000740b:	c3                   	ret    

c000740c <addToTerminalCycle(VgaText*)>:
c000740c:	c3                   	ret    

c000740d <scrollTerminalScrollLock(int)>:
c000740d:	c3                   	ret    

c000740e <VgaText::updateTitle()>:
c000740e:	c3                   	ret    
c000740f:	90                   	nop

c0007410 <VgaText::load()>:
c0007410:	c3                   	ret    
c0007411:	90                   	nop

c0007412 <VgaText::updateCursor()>:
c0007412:	83 ec 14             	sub    esp,0x14
c0007415:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007419:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000741c:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000741f:	e8 14 ee 00 00       	call   c0016238 <Hal::consoleCursorUpdate(int, int)>
c0007424:	83 c4 1c             	add    esp,0x1c
c0007427:	c3                   	ret    

c0007428 <VgaText::doANSI_SGR(int)>:
c0007428:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000742c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007430:	85 d2                	test   edx,edx
c0007432:	75 0b                	jne    c000743f <VgaText::doANSI_SGR(int)+0x17>
c0007434:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0007437:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000743a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000743d:	eb 59                	jmp    c0007498 <VgaText::doANSI_SGR(int)+0x70>
c000743f:	83 fa 07             	cmp    edx,0x7
c0007442:	75 0b                	jne    c000744f <VgaText::doANSI_SGR(int)+0x27>
c0007444:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0007447:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000744a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000744d:	eb 49                	jmp    c0007498 <VgaText::doANSI_SGR(int)+0x70>
c000744f:	83 fa 1b             	cmp    edx,0x1b
c0007452:	74 e0                	je     c0007434 <VgaText::doANSI_SGR(int)+0xc>
c0007454:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0007457:	83 f9 07             	cmp    ecx,0x7
c000745a:	77 09                	ja     c0007465 <VgaText::doANSI_SGR(int)+0x3d>
c000745c:	8b 14 8d c0 fc 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0340]
c0007463:	eb 20                	jmp    c0007485 <VgaText::doANSI_SGR(int)+0x5d>
c0007465:	8d 4a d8             	lea    ecx,[edx-0x28]
c0007468:	83 f9 07             	cmp    ecx,0x7
c000746b:	77 09                	ja     c0007476 <VgaText::doANSI_SGR(int)+0x4e>
c000746d:	8b 14 8d c0 fc 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0340]
c0007474:	eb 22                	jmp    c0007498 <VgaText::doANSI_SGR(int)+0x70>
c0007476:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0007479:	83 f9 07             	cmp    ecx,0x7
c000747c:	77 0b                	ja     c0007489 <VgaText::doANSI_SGR(int)+0x61>
c000747e:	8b 14 95 78 fb 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0488]
c0007485:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0007488:	c3                   	ret    
c0007489:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000748c:	83 f9 07             	cmp    ecx,0x7
c000748f:	77 0a                	ja     c000749b <VgaText::doANSI_SGR(int)+0x73>
c0007491:	8b 14 95 50 fb 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe04b0]
c0007498:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000749b:	c3                   	ret    

c000749c <VgaText::setDefaultBgColour(VgaColour)>:
c000749c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00074a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00074a4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00074a7:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00074aa:	c3                   	ret    
c00074ab:	90                   	nop

c00074ac <VgaText::setDefaultFgColour(VgaColour)>:
c00074ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00074b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00074b4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00074b7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00074ba:	c3                   	ret    
c00074bb:	90                   	nop

c00074bc <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00074bc:	53                   	push   ebx
c00074bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00074c1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00074c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c9:	51                   	push   ecx
c00074ca:	e8 cd ff ff ff       	call   c000749c <VgaText::setDefaultBgColour(VgaColour)>
c00074cf:	58                   	pop    eax
c00074d0:	5a                   	pop    edx
c00074d1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00074d5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00074d9:	5b                   	pop    ebx
c00074da:	eb d0                	jmp    c00074ac <VgaText::setDefaultFgColour(VgaColour)>

c00074dc <VgaText::setTitleTextColour(VgaColour)>:
c00074dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00074e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00074e4:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00074e7:	c3                   	ret    

c00074e8 <VgaText::setTitleColour(VgaColour)>:
c00074e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00074ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00074f0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00074f3:	c3                   	ret    

c00074f4 <VgaText::setTitle(char*)>:
c00074f4:	c3                   	ret    
c00074f5:	90                   	nop

c00074f6 <VgaText::combineColours(unsigned char, unsigned char)>:
c00074f6:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00074fa:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00074ff:	83 e0 0f             	and    eax,0xf
c0007502:	c1 e2 04             	shl    edx,0x4
c0007505:	09 d0                	or     eax,edx
c0007507:	c3                   	ret    

c0007508 <VgaText::scrollScreen()>:
c0007508:	55                   	push   ebp
c0007509:	b9 01 00 00 00       	mov    ecx,0x1
c000750e:	57                   	push   edi
c000750f:	56                   	push   esi
c0007510:	53                   	push   ebx
c0007511:	83 ec 0c             	sub    esp,0xc
c0007514:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007518:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000751e:	31 ff                	xor    edi,edi
c0007520:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007523:	83 f9 18             	cmp    ecx,0x18
c0007526:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0007529:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0007530:	75 27                	jne    c0007559 <VgaText::scrollScreen()+0x51>
c0007532:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0007535:	01 f5                	add    ebp,esi
c0007537:	f7 c7 01 00 00 00    	test   edi,0x1
c000753d:	74 16                	je     c0007555 <VgaText::scrollScreen()+0x4d>
c000753f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0007543:	50                   	push   eax
c0007544:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0007548:	50                   	push   eax
c0007549:	e8 a8 ff ff ff       	call   c00074f6 <VgaText::combineColours(unsigned char, unsigned char)>
c000754e:	5a                   	pop    edx
c000754f:	5a                   	pop    edx
c0007550:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0007553:	eb 04                	jmp    c0007559 <VgaText::scrollScreen()+0x51>
c0007555:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0007559:	47                   	inc    edi
c000755a:	46                   	inc    esi
c000755b:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0007561:	75 bd                	jne    c0007520 <VgaText::scrollScreen()+0x18>
c0007563:	41                   	inc    ecx
c0007564:	83 f9 19             	cmp    ecx,0x19
c0007567:	75 af                	jne    c0007518 <VgaText::scrollScreen()+0x10>
c0007569:	39 1d b4 03 02 c0    	cmp    DWORD PTR ds:0xc00203b4,ebx
c000756f:	75 1f                	jne    c0007590 <VgaText::scrollScreen()+0x88>
c0007571:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0007575:	74 05                	je     c000757c <VgaText::scrollScreen()+0x74>
c0007577:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000757a:	eb 14                	jmp    c0007590 <VgaText::scrollScreen()+0x88>
c000757c:	50                   	push   eax
c000757d:	50                   	push   eax
c000757e:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0007582:	50                   	push   eax
c0007583:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0007587:	50                   	push   eax
c0007588:	e8 3f eb 00 00       	call   c00160cc <Hal::consoleScroll(int, int)>
c000758d:	83 c4 10             	add    esp,0x10
c0007590:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0007594:	83 c4 0c             	add    esp,0xc
c0007597:	5b                   	pop    ebx
c0007598:	5e                   	pop    esi
c0007599:	5f                   	pop    edi
c000759a:	5d                   	pop    ebp
c000759b:	e9 72 fe ff ff       	jmp    c0007412 <VgaText::updateCursor()>

c00075a0 <VgaText::combineCharAndColour(char, unsigned char)>:
c00075a0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00075a5:	c1 e0 08             	shl    eax,0x8
c00075a8:	89 c2                	mov    edx,eax
c00075aa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00075af:	09 d0                	or     eax,edx
c00075b1:	c3                   	ret    

c00075b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00075b2:	55                   	push   ebp
c00075b3:	57                   	push   edi
c00075b4:	56                   	push   esi
c00075b5:	53                   	push   ebx
c00075b6:	83 ec 1c             	sub    esp,0x1c
c00075b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00075bd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00075c1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00075c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00075c9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00075cd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00075d1:	0f b6 c3             	movzx  eax,bl
c00075d4:	50                   	push   eax
c00075d5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00075da:	50                   	push   eax
c00075db:	e8 16 ff ff ff       	call   c00074f6 <VgaText::combineColours(unsigned char, unsigned char)>
c00075e0:	5a                   	pop    edx
c00075e1:	0f b6 c0             	movzx  eax,al
c00075e4:	59                   	pop    ecx
c00075e5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00075ea:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00075ee:	50                   	push   eax
c00075ef:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00075f3:	e8 a8 ff ff ff       	call   c00075a0 <VgaText::combineCharAndColour(char, unsigned char)>
c00075f8:	5a                   	pop    edx
c00075f9:	66 6b d7 50          	imul   dx,di,0x50
c00075fd:	59                   	pop    ecx
c00075fe:	01 f2                	add    edx,esi
c0007600:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0007603:	0f b7 d2             	movzx  edx,dx
c0007606:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000760a:	39 2d b4 03 02 c0    	cmp    DWORD PTR ds:0xc00203b4,ebp
c0007610:	75 28                	jne    c000763a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c0007612:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007616:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000761a:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000761e:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0007622:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007626:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000762a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000762e:	83 c4 1c             	add    esp,0x1c
c0007631:	5b                   	pop    ebx
c0007632:	5e                   	pop    esi
c0007633:	5f                   	pop    edi
c0007634:	5d                   	pop    ebp
c0007635:	e9 9a eb 00 00       	jmp    c00161d4 <Hal::consoleWriteCharacter(char, int, int, int, int)>
c000763a:	83 c4 1c             	add    esp,0x1c
c000763d:	5b                   	pop    ebx
c000763e:	5e                   	pop    esi
c000763f:	5f                   	pop    edi
c0007640:	5d                   	pop    ebp
c0007641:	c3                   	ret    

c0007642 <VgaText::getCursorX()>:
c0007642:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007646:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0007649:	c3                   	ret    

c000764a <VgaText::getCursorY()>:
c000764a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000764e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0007651:	c3                   	ret    

c0007652 <VgaText::setCursor(int, int)>:
c0007652:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007656:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000765a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000765d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007661:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007664:	e9 a9 fd ff ff       	jmp    c0007412 <VgaText::updateCursor()>

c0007669 <setActiveTerminal(VgaText*)>:
c0007669:	53                   	push   ebx
c000766a:	83 ec 08             	sub    esp,0x8
c000766d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007671:	85 db                	test   ebx,ebx
c0007673:	75 11                	jne    c0007686 <setActiveTerminal(VgaText*)+0x1d>
c0007675:	c7 44 24 10 bc db 01 c0 	mov    DWORD PTR [esp+0x10],0xc001dbbc
c000767d:	83 c4 08             	add    esp,0x8
c0007680:	5b                   	pop    ebx
c0007681:	e9 23 7d 00 00       	jmp    c000f3a9 <Krnl::panic(char const*)>
c0007686:	a1 b4 03 02 c0       	mov    eax,ds:0xc00203b4
c000768b:	85 c0                	test   eax,eax
c000768d:	74 0c                	je     c000769b <setActiveTerminal(VgaText*)+0x32>
c000768f:	83 ec 0c             	sub    esp,0xc
c0007692:	50                   	push   eax
c0007693:	e8 7a fd ff ff       	call   c0007412 <VgaText::updateCursor()>
c0007698:	83 c4 10             	add    esp,0x10
c000769b:	89 1d b4 03 02 c0    	mov    DWORD PTR ds:0xc00203b4,ebx
c00076a1:	50                   	push   eax
c00076a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00076a5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00076a8:	53                   	push   ebx
c00076a9:	e8 a4 ff ff ff       	call   c0007652 <VgaText::setCursor(int, int)>
c00076ae:	83 c4 18             	add    esp,0x18
c00076b1:	5b                   	pop    ebx
c00076b2:	c3                   	ret    
c00076b3:	90                   	nop

c00076b4 <VgaText::clearScreen()>:
c00076b4:	57                   	push   edi
c00076b5:	56                   	push   esi
c00076b6:	31 f6                	xor    esi,esi
c00076b8:	53                   	push   ebx
c00076b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00076bd:	52                   	push   edx
c00076be:	6a 00                	push   0x0
c00076c0:	6a 00                	push   0x0
c00076c2:	53                   	push   ebx
c00076c3:	e8 8a ff ff ff       	call   c0007652 <VgaText::setCursor(int, int)>
c00076c8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00076cf:	83 c4 10             	add    esp,0x10
c00076d2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00076d5:	7e 20                	jle    c00076f7 <VgaText::clearScreen()+0x43>
c00076d7:	31 ff                	xor    edi,edi
c00076d9:	50                   	push   eax
c00076da:	50                   	push   eax
c00076db:	56                   	push   esi
c00076dc:	57                   	push   edi
c00076dd:	47                   	inc    edi
c00076de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00076e1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00076e4:	6a 20                	push   0x20
c00076e6:	53                   	push   ebx
c00076e7:	e8 c6 fe ff ff       	call   c00075b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00076ec:	83 c4 20             	add    esp,0x20
c00076ef:	83 ff 50             	cmp    edi,0x50
c00076f2:	75 e5                	jne    c00076d9 <VgaText::clearScreen()+0x25>
c00076f4:	46                   	inc    esi
c00076f5:	eb db                	jmp    c00076d2 <VgaText::clearScreen()+0x1e>
c00076f7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00076fe:	5b                   	pop    ebx
c00076ff:	5e                   	pop    esi
c0007700:	5f                   	pop    edi
c0007701:	c3                   	ret    

c0007702 <VgaText::setCursorX(int)>:
c0007702:	83 ec 10             	sub    esp,0x10
c0007705:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007709:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000770c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007710:	50                   	push   eax
c0007711:	e8 3c ff ff ff       	call   c0007652 <VgaText::setCursor(int, int)>
c0007716:	83 c4 1c             	add    esp,0x1c
c0007719:	c3                   	ret    

c000771a <VgaText::setCursorY(int)>:
c000771a:	83 ec 10             	sub    esp,0x10
c000771d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007721:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007725:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0007728:	50                   	push   eax
c0007729:	e8 24 ff ff ff       	call   c0007652 <VgaText::setCursor(int, int)>
c000772e:	83 c4 1c             	add    esp,0x1c
c0007731:	c3                   	ret    

c0007732 <VgaText::incrementCursor(bool)>:
c0007732:	56                   	push   esi
c0007733:	53                   	push   ebx
c0007734:	51                   	push   ecx
c0007735:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007739:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000773d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0007740:	40                   	inc    eax
c0007741:	83 f8 50             	cmp    eax,0x50
c0007744:	74 05                	je     c000774b <VgaText::incrementCursor(bool)+0x19>
c0007746:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0007749:	eb 24                	jmp    c000776f <VgaText::incrementCursor(bool)+0x3d>
c000774b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000774e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007755:	8d 50 01             	lea    edx,[eax+0x1]
c0007758:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000775b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000775e:	75 0f                	jne    c000776f <VgaText::incrementCursor(bool)+0x3d>
c0007760:	83 ec 0c             	sub    esp,0xc
c0007763:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0007766:	53                   	push   ebx
c0007767:	e8 9c fd ff ff       	call   c0007508 <VgaText::scrollScreen()>
c000776c:	83 c4 10             	add    esp,0x10
c000776f:	89 f0                	mov    eax,esi
c0007771:	84 c0                	test   al,al
c0007773:	74 0c                	je     c0007781 <VgaText::incrementCursor(bool)+0x4f>
c0007775:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007779:	5a                   	pop    edx
c000777a:	5b                   	pop    ebx
c000777b:	5e                   	pop    esi
c000777c:	e9 91 fc ff ff       	jmp    c0007412 <VgaText::updateCursor()>
c0007781:	58                   	pop    eax
c0007782:	5b                   	pop    ebx
c0007783:	5e                   	pop    esi
c0007784:	c3                   	ret    
c0007785:	90                   	nop

c0007786 <VgaText::decrementCursor(bool)>:
c0007786:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000778a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000778e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0007791:	85 c0                	test   eax,eax
c0007793:	74 04                	je     c0007799 <VgaText::decrementCursor(bool)+0x13>
c0007795:	48                   	dec    eax
c0007796:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0007799:	84 c9                	test   cl,cl
c000779b:	74 09                	je     c00077a6 <VgaText::decrementCursor(bool)+0x20>
c000779d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00077a1:	e9 6c fc ff ff       	jmp    c0007412 <VgaText::updateCursor()>
c00077a6:	c3                   	ret    
c00077a7:	90                   	nop

c00077a8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00077a8:	53                   	push   ebx
c00077a9:	83 ec 08             	sub    esp,0x8
c00077ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00077b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00077b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00077b8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00077bc:	3c 07                	cmp    al,0x7
c00077be:	75 21                	jne    c00077e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c00077c0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00077c8:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00077d0:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00077d8:	83 c4 08             	add    esp,0x8
c00077db:	5b                   	pop    ebx
c00077dc:	e9 32 2d 00 00       	jmp    c000a513 <Krnl::beep(int, int, bool)>
c00077e1:	3c 0d                	cmp    al,0xd
c00077e3:	75 09                	jne    c00077ee <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c00077e5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00077ec:	eb 2c                	jmp    c000781a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00077ee:	3c 0a                	cmp    al,0xa
c00077f0:	75 31                	jne    c0007823 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00077f2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00077f5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00077fc:	8d 50 01             	lea    edx,[eax+0x1]
c00077ff:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0007802:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0007805:	75 0f                	jne    c0007816 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0007807:	83 ec 0c             	sub    esp,0xc
c000780a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000780d:	53                   	push   ebx
c000780e:	e8 f5 fc ff ff       	call   c0007508 <VgaText::scrollScreen()>
c0007813:	83 c4 10             	add    esp,0x10
c0007816:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000781a:	83 c4 08             	add    esp,0x8
c000781d:	5b                   	pop    ebx
c000781e:	e9 ef fb ff ff       	jmp    c0007412 <VgaText::updateCursor()>
c0007823:	3c 08                	cmp    al,0x8
c0007825:	75 25                	jne    c000784c <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0007827:	50                   	push   eax
c0007828:	50                   	push   eax
c0007829:	6a 01                	push   0x1
c000782b:	53                   	push   ebx
c000782c:	e8 55 ff ff ff       	call   c0007786 <VgaText::decrementCursor(bool)>
c0007831:	5a                   	pop    edx
c0007832:	59                   	pop    ecx
c0007833:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007836:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007839:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000783c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000783f:	6a 20                	push   0x20
c0007841:	53                   	push   ebx
c0007842:	e8 6b fd ff ff       	call   c00075b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007847:	83 c4 28             	add    esp,0x28
c000784a:	5b                   	pop    ebx
c000784b:	c3                   	ret    
c000784c:	83 ec 08             	sub    esp,0x8
c000784f:	0f be c0             	movsx  eax,al
c0007852:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007855:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007858:	51                   	push   ecx
c0007859:	52                   	push   edx
c000785a:	50                   	push   eax
c000785b:	53                   	push   ebx
c000785c:	e8 51 fd ff ff       	call   c00075b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007861:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0007865:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000786d:	83 c4 28             	add    esp,0x28
c0007870:	5b                   	pop    ebx
c0007871:	e9 bc fe ff ff       	jmp    c0007732 <VgaText::incrementCursor(bool)>

c0007876 <VgaText::putchar(char)>:
c0007876:	56                   	push   esi
c0007877:	53                   	push   ebx
c0007878:	83 ec 14             	sub    esp,0x14
c000787b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000787f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007883:	3c 5b                	cmp    al,0x5b
c0007885:	75 18                	jne    c000789f <VgaText::putchar(char)+0x29>
c0007887:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000788b:	74 1f                	je     c00078ac <VgaText::putchar(char)+0x36>
c000788d:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0007893:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000789a:	e9 bd 00 00 00       	jmp    c000795c <VgaText::putchar(char)+0xe6>
c000789f:	3c 1b                	cmp    al,0x1b
c00078a1:	75 09                	jne    c00078ac <VgaText::putchar(char)+0x36>
c00078a3:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00078a7:	e9 b0 00 00 00       	jmp    c000795c <VgaText::putchar(char)+0xe6>
c00078ac:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00078af:	84 c9                	test   cl,cl
c00078b1:	0f 84 92 00 00 00    	je     c0007949 <VgaText::putchar(char)+0xd3>
c00078b7:	8d 50 c0             	lea    edx,[eax-0x40]
c00078ba:	80 fa 3e             	cmp    dl,0x3e
c00078bd:	77 76                	ja     c0007935 <VgaText::putchar(char)+0xbf>
c00078bf:	3c 6d                	cmp    al,0x6d
c00078c1:	75 47                	jne    c000790a <VgaText::putchar(char)+0x94>
c00078c3:	31 f6                	xor    esi,esi
c00078c5:	31 d2                	xor    edx,edx
c00078c7:	31 c0                	xor    eax,eax
c00078c9:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00078cc:	7e 2d                	jle    c00078fb <VgaText::putchar(char)+0x85>
c00078ce:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00078d3:	80 fa 3b             	cmp    dl,0x3b
c00078d6:	75 17                	jne    c00078ef <VgaText::putchar(char)+0x79>
c00078d8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00078dc:	50                   	push   eax
c00078dd:	53                   	push   ebx
c00078de:	e8 45 fb ff ff       	call   c0007428 <VgaText::doANSI_SGR(int)>
c00078e3:	59                   	pop    ecx
c00078e4:	31 d2                	xor    edx,edx
c00078e6:	58                   	pop    eax
c00078e7:	31 c0                	xor    eax,eax
c00078e9:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00078ed:	eb 09                	jmp    c00078f8 <VgaText::putchar(char)+0x82>
c00078ef:	6b c0 0a             	imul   eax,eax,0xa
c00078f2:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00078f6:	88 ca                	mov    dl,cl
c00078f8:	46                   	inc    esi
c00078f9:	eb ce                	jmp    c00078c9 <VgaText::putchar(char)+0x53>
c00078fb:	84 d2                	test   dl,dl
c00078fd:	74 2e                	je     c000792d <VgaText::putchar(char)+0xb7>
c00078ff:	50                   	push   eax
c0007900:	53                   	push   ebx
c0007901:	e8 22 fb ff ff       	call   c0007428 <VgaText::doANSI_SGR(int)>
c0007906:	58                   	pop    eax
c0007907:	5a                   	pop    edx
c0007908:	eb 23                	jmp    c000792d <VgaText::putchar(char)+0xb7>
c000790a:	3c 4a                	cmp    al,0x4a
c000790c:	75 1f                	jne    c000792d <VgaText::putchar(char)+0xb7>
c000790e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0007912:	75 19                	jne    c000792d <VgaText::putchar(char)+0xb7>
c0007914:	83 ec 0c             	sub    esp,0xc
c0007917:	53                   	push   ebx
c0007918:	e8 97 fd ff ff       	call   c00076b4 <VgaText::clearScreen()>
c000791d:	83 c4 0c             	add    esp,0xc
c0007920:	6a 00                	push   0x0
c0007922:	6a 00                	push   0x0
c0007924:	53                   	push   ebx
c0007925:	e8 28 fd ff ff       	call   c0007652 <VgaText::setCursor(int, int)>
c000792a:	83 c4 10             	add    esp,0x10
c000792d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0007933:	eb 27                	jmp    c000795c <VgaText::putchar(char)+0xe6>
c0007935:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0007938:	83 fa 0e             	cmp    edx,0xe
c000793b:	7f 1f                	jg     c000795c <VgaText::putchar(char)+0xe6>
c000793d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0007940:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0007943:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0007947:	eb 13                	jmp    c000795c <VgaText::putchar(char)+0xe6>
c0007949:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000794c:	0f be c0             	movsx  eax,al
c000794f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007952:	50                   	push   eax
c0007953:	53                   	push   ebx
c0007954:	e8 4f fe ff ff       	call   c00077a8 <VgaText::putchar(char, VgaColour, VgaColour)>
c0007959:	83 c4 10             	add    esp,0x10
c000795c:	83 c4 14             	add    esp,0x14
c000795f:	5b                   	pop    ebx
c0007960:	5e                   	pop    esi
c0007961:	c3                   	ret    

c0007962 <VgaText::putx(unsigned int)>:
c0007962:	57                   	push   edi
c0007963:	b9 11 00 00 00       	mov    ecx,0x11
c0007968:	56                   	push   esi
c0007969:	be ca db 01 c0       	mov    esi,0xc001dbca
c000796e:	53                   	push   ebx
c000796f:	83 ec 20             	sub    esp,0x20
c0007972:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0007976:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000797a:	fc                   	cld    
c000797b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000797d:	be 08 00 00 00       	mov    esi,0x8
c0007982:	50                   	push   eax
c0007983:	50                   	push   eax
c0007984:	89 d8                	mov    eax,ebx
c0007986:	c1 e3 04             	shl    ebx,0x4
c0007989:	c1 e8 1c             	shr    eax,0x1c
c000798c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0007991:	50                   	push   eax
c0007992:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007996:	e8 db fe ff ff       	call   c0007876 <VgaText::putchar(char)>
c000799b:	83 c4 10             	add    esp,0x10
c000799e:	4e                   	dec    esi
c000799f:	75 e1                	jne    c0007982 <VgaText::putx(unsigned int)+0x20>
c00079a1:	83 c4 20             	add    esp,0x20
c00079a4:	5b                   	pop    ebx
c00079a5:	5e                   	pop    esi
c00079a6:	5f                   	pop    edi
c00079a7:	c3                   	ret    

c00079a8 <VgaText::puts(char const*)>:
c00079a8:	53                   	push   ebx
c00079a9:	83 ec 08             	sub    esp,0x8
c00079ac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00079b0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00079b3:	84 c0                	test   al,al
c00079b5:	74 12                	je     c00079c9 <VgaText::puts(char const*)+0x21>
c00079b7:	43                   	inc    ebx
c00079b8:	51                   	push   ecx
c00079b9:	51                   	push   ecx
c00079ba:	50                   	push   eax
c00079bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00079bf:	e8 b2 fe ff ff       	call   c0007876 <VgaText::putchar(char)>
c00079c4:	83 c4 10             	add    esp,0x10
c00079c7:	eb e7                	jmp    c00079b0 <VgaText::puts(char const*)+0x8>
c00079c9:	83 c4 08             	add    esp,0x8
c00079cc:	5b                   	pop    ebx
c00079cd:	c3                   	ret    

c00079ce <VgaText::write(unsigned long long, void*, int*)>:
c00079ce:	55                   	push   ebp
c00079cf:	57                   	push   edi
c00079d0:	56                   	push   esi
c00079d1:	53                   	push   ebx
c00079d2:	83 ec 0c             	sub    esp,0xc
c00079d5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00079d9:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00079dd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00079e1:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00079e8:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00079eb:	39 eb                	cmp    ebx,ebp
c00079ed:	74 13                	je     c0007a02 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00079ef:	43                   	inc    ebx
c00079f0:	50                   	push   eax
c00079f1:	50                   	push   eax
c00079f2:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00079f6:	50                   	push   eax
c00079f7:	56                   	push   esi
c00079f8:	e8 79 fe ff ff       	call   c0007876 <VgaText::putchar(char)>
c00079fd:	83 c4 10             	add    esp,0x10
c0007a00:	eb e9                	jmp    c00079eb <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0007a02:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0007a09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007a0d:	89 38                	mov    DWORD PTR [eax],edi
c0007a0f:	83 c4 0c             	add    esp,0xc
c0007a12:	31 c0                	xor    eax,eax
c0007a14:	5b                   	pop    ebx
c0007a15:	5e                   	pop    esi
c0007a16:	5f                   	pop    edi
c0007a17:	5d                   	pop    ebp
c0007a18:	c3                   	ret    
c0007a19:	90                   	nop

c0007a1a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0007a1a:	55                   	push   ebp
c0007a1b:	57                   	push   edi
c0007a1c:	56                   	push   esi
c0007a1d:	53                   	push   ebx
c0007a1e:	83 ec 0c             	sub    esp,0xc
c0007a21:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007a25:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0007a2a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0007a31:	50                   	push   eax
c0007a32:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0007a37:	50                   	push   eax
c0007a38:	e8 b9 fa ff ff       	call   c00074f6 <VgaText::combineColours(unsigned char, unsigned char)>
c0007a3d:	5a                   	pop    edx
c0007a3e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007a43:	59                   	pop    ecx
c0007a44:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007a47:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0007a4b:	0f b7 f6             	movzx  esi,si
c0007a4e:	0f b6 e8             	movzx  ebp,al
c0007a51:	01 f6                	add    esi,esi
c0007a53:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007a56:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0007a59:	84 c0                	test   al,al
c0007a5b:	0f 84 ef 00 00 00    	je     c0007b50 <VgaText::puts(char const*, VgaColour, VgaColour)+0x136>
c0007a61:	3c 0d                	cmp    al,0xd
c0007a63:	75 0c                	jne    c0007a71 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0007a65:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007a6c:	e9 d9 00 00 00       	jmp    c0007b4a <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c0007a71:	3c 0a                	cmp    al,0xa
c0007a73:	75 45                	jne    c0007aba <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0007a75:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0007a78:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007a7f:	8d 48 01             	lea    ecx,[eax+0x1]
c0007a82:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0007a85:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0007a88:	75 0f                	jne    c0007a99 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7f>
c0007a8a:	83 ec 0c             	sub    esp,0xc
c0007a8d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0007a90:	53                   	push   ebx
c0007a91:	e8 72 fa ff ff       	call   c0007508 <VgaText::scrollScreen()>
c0007a96:	83 c4 10             	add    esp,0x10
c0007a99:	83 ec 0c             	sub    esp,0xc
c0007a9c:	53                   	push   ebx
c0007a9d:	e8 70 f9 ff ff       	call   c0007412 <VgaText::updateCursor()>
c0007aa2:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007aa7:	83 c4 10             	add    esp,0x10
c0007aaa:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007aad:	0f b7 f6             	movzx  esi,si
c0007ab0:	01 f6                	add    esi,esi
c0007ab2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007ab5:	e9 90 00 00 00       	jmp    c0007b4a <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c0007aba:	3c 08                	cmp    al,0x8
c0007abc:	75 35                	jne    c0007af3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0007abe:	51                   	push   ecx
c0007abf:	51                   	push   ecx
c0007ac0:	6a 01                	push   0x1
c0007ac2:	53                   	push   ebx
c0007ac3:	e8 be fc ff ff       	call   c0007786 <VgaText::decrementCursor(bool)>
c0007ac8:	5e                   	pop    esi
c0007ac9:	58                   	pop    eax
c0007aca:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007acd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007ad0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007ad3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007ad6:	6a 20                	push   0x20
c0007ad8:	53                   	push   ebx
c0007ad9:	e8 d4 fa ff ff       	call   c00075b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007ade:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007ae3:	83 c4 20             	add    esp,0x20
c0007ae6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007ae9:	0f b7 f6             	movzx  esi,si
c0007aec:	01 f6                	add    esi,esi
c0007aee:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007af1:	eb 57                	jmp    c0007b4a <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c0007af3:	52                   	push   edx
c0007af4:	52                   	push   edx
c0007af5:	55                   	push   ebp
c0007af6:	50                   	push   eax
c0007af7:	e8 a4 fa ff ff       	call   c00075a0 <VgaText::combineCharAndColour(char, unsigned char)>
c0007afc:	83 c4 10             	add    esp,0x10
c0007aff:	66 89 06             	mov    WORD PTR [esi],ax
c0007b02:	39 1d b4 03 02 c0    	cmp    DWORD PTR ds:0xc00203b4,ebx
c0007b08:	75 1d                	jne    c0007b27 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0007b0a:	83 ec 0c             	sub    esp,0xc
c0007b0d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007b10:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007b13:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0007b17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0007b1b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0007b1e:	50                   	push   eax
c0007b1f:	e8 b0 e6 00 00       	call   c00161d4 <Hal::consoleWriteCharacter(char, int, int, int, int)>
c0007b24:	83 c4 20             	add    esp,0x20
c0007b27:	83 c6 02             	add    esi,0x2
c0007b2a:	50                   	push   eax
c0007b2b:	50                   	push   eax
c0007b2c:	6a 00                	push   0x0
c0007b2e:	53                   	push   ebx
c0007b2f:	e8 fe fb ff ff       	call   c0007732 <VgaText::incrementCursor(bool)>
c0007b34:	83 c4 10             	add    esp,0x10
c0007b37:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0007b3b:	75 0d                	jne    c0007b4a <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c0007b3d:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007b42:	0f b7 f6             	movzx  esi,si
c0007b45:	01 f6                	add    esi,esi
c0007b47:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007b4a:	47                   	inc    edi
c0007b4b:	e9 06 ff ff ff       	jmp    c0007a56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3c>
c0007b50:	83 ec 0c             	sub    esp,0xc
c0007b53:	53                   	push   ebx
c0007b54:	e8 b9 f8 ff ff       	call   c0007412 <VgaText::updateCursor()>
c0007b59:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0007b60:	83 c4 1c             	add    esp,0x1c
c0007b63:	5b                   	pop    ebx
c0007b64:	5e                   	pop    esi
c0007b65:	5f                   	pop    edi
c0007b66:	5d                   	pop    ebp
c0007b67:	c3                   	ret    

c0007b68 <VgaText::VgaText(char const*)>:
c0007b68:	56                   	push   esi
c0007b69:	53                   	push   ebx
c0007b6a:	83 ec 04             	sub    esp,0x4
c0007b6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007b71:	83 ec 08             	sub    esp,0x8
c0007b74:	6a 00                	push   0x0
c0007b76:	50                   	push   eax
c0007b77:	e8 b2 04 00 00       	call   c000802e <UnixFile::UnixFile(int)>
c0007b7c:	83 c4 10             	add    esp,0x10
c0007b7f:	ba 30 dc 01 c0       	mov    edx,0xc001dc30
c0007b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007b88:	89 10                	mov    DWORD PTR [eax],edx
c0007b8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007b8e:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0007b95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007b99:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0007ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ba4:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0007ba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007bac:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0007bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007bb4:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0007bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007bbf:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0007bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007bca:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0007bd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007bd5:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0007bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007be0:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0007be7:	83 ec 0c             	sub    esp,0xc
c0007bea:	6a 01                	push   0x1
c0007bec:	e8 80 08 00 00       	call   c0008471 <Virt::allocateKernelVirtualPages(int)>
c0007bf1:	83 c4 10             	add    esp,0x10
c0007bf4:	89 c2                	mov    edx,eax
c0007bf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007bfa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0007bfd:	8b 1d 54 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020454
c0007c03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007c07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007c0a:	89 c6                	mov    esi,eax
c0007c0c:	e8 ff f0 ff ff       	call   c0006d10 <Phys::allocatePage()>
c0007c11:	68 05 0c 00 00       	push   0xc05
c0007c16:	56                   	push   esi
c0007c17:	50                   	push   eax
c0007c18:	53                   	push   ebx
c0007c19:	e8 a6 0e 00 00       	call   c0008ac4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0007c1e:	83 c4 10             	add    esp,0x10
c0007c21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007c25:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007c28:	83 ec 04             	sub    esp,0x4
c0007c2b:	68 a0 0f 00 00       	push   0xfa0
c0007c30:	6a 00                	push   0x0
c0007c32:	50                   	push   eax
c0007c33:	e8 70 88 ff ff       	call   c00004a8 <memset>
c0007c38:	83 c4 10             	add    esp,0x10
c0007c3b:	83 ec 04             	sub    esp,0x4
c0007c3e:	6a 00                	push   0x0
c0007c40:	6a 07                	push   0x7
c0007c42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c46:	e8 71 f8 ff ff       	call   c00074bc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0007c4b:	83 c4 10             	add    esp,0x10
c0007c4e:	83 ec 04             	sub    esp,0x4
c0007c51:	6a 00                	push   0x0
c0007c53:	6a 00                	push   0x0
c0007c55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c59:	e8 f4 f9 ff ff       	call   c0007652 <VgaText::setCursor(int, int)>
c0007c5e:	83 c4 10             	add    esp,0x10
c0007c61:	83 ec 0c             	sub    esp,0xc
c0007c64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c68:	e8 47 fa ff ff       	call   c00076b4 <VgaText::clearScreen()>
c0007c6d:	83 c4 10             	add    esp,0x10
c0007c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007c74:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0007c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007c7c:	05 82 00 00 00       	add    eax,0x82
c0007c81:	83 ec 04             	sub    esp,0x4
c0007c84:	6a 30                	push   0x30
c0007c86:	6a 00                	push   0x0
c0007c88:	50                   	push   eax
c0007c89:	e8 1a 88 ff ff       	call   c00004a8 <memset>
c0007c8e:	83 c4 10             	add    esp,0x10
c0007c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007c95:	05 b2 00 00 00       	add    eax,0xb2
c0007c9a:	83 ec 04             	sub    esp,0x4
c0007c9d:	68 80 00 00 00       	push   0x80
c0007ca2:	6a 00                	push   0x0
c0007ca4:	50                   	push   eax
c0007ca5:	e8 fe 87 ff ff       	call   c00004a8 <memset>
c0007caa:	83 c4 10             	add    esp,0x10
c0007cad:	90                   	nop
c0007cae:	83 c4 04             	add    esp,0x4
c0007cb1:	5b                   	pop    ebx
c0007cb2:	5e                   	pop    esi
c0007cb3:	c3                   	ret    

c0007cb4 <VgaText::receiveKey(unsigned char)>:
c0007cb4:	57                   	push   edi
c0007cb5:	56                   	push   esi
c0007cb6:	53                   	push   ebx
c0007cb7:	83 ec 10             	sub    esp,0x10
c0007cba:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0007cbe:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0007cc2:	84 db                	test   bl,bl
c0007cc4:	0f 84 ba 00 00 00    	je     c0007d84 <VgaText::receiveKey(unsigned char)+0xd0>
c0007cca:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c0007cd0:	80 fb 08             	cmp    bl,0x8
c0007cd3:	75 2c                	jne    c0007d01 <VgaText::receiveKey(unsigned char)+0x4d>
c0007cd5:	83 ec 0c             	sub    esp,0xc
c0007cd8:	57                   	push   edi
c0007cd9:	e8 e6 87 ff ff       	call   c00004c4 <strlen>
c0007cde:	83 c4 10             	add    esp,0x10
c0007ce1:	85 c0                	test   eax,eax
c0007ce3:	74 41                	je     c0007d26 <VgaText::receiveKey(unsigned char)+0x72>
c0007ce5:	50                   	push   eax
c0007ce6:	50                   	push   eax
c0007ce7:	6a 08                	push   0x8
c0007ce9:	56                   	push   esi
c0007cea:	e8 87 fb ff ff       	call   c0007876 <VgaText::putchar(char)>
c0007cef:	89 3c 24             	mov    DWORD PTR [esp],edi
c0007cf2:	e8 cd 87 ff ff       	call   c00004c4 <strlen>
c0007cf7:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0007cff:	eb 22                	jmp    c0007d23 <VgaText::receiveKey(unsigned char)+0x6f>
c0007d01:	0f be c3             	movsx  eax,bl
c0007d04:	52                   	push   edx
c0007d05:	52                   	push   edx
c0007d06:	50                   	push   eax
c0007d07:	56                   	push   esi
c0007d08:	e8 69 fb ff ff       	call   c0007876 <VgaText::putchar(char)>
c0007d0d:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0007d11:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0007d16:	59                   	pop    ecx
c0007d17:	58                   	pop    eax
c0007d18:	8d 44 24 16          	lea    eax,[esp+0x16]
c0007d1c:	50                   	push   eax
c0007d1d:	57                   	push   edi
c0007d1e:	e8 81 89 ff ff       	call   c00006a4 <strcat>
c0007d23:	83 c4 10             	add    esp,0x10
c0007d26:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0007d2d:	75 05                	jne    c0007d34 <VgaText::receiveKey(unsigned char)+0x80>
c0007d2f:	80 fb 0a             	cmp    bl,0xa
c0007d32:	75 50                	jne    c0007d84 <VgaText::receiveKey(unsigned char)+0xd0>
c0007d34:	83 ec 0c             	sub    esp,0xc
c0007d37:	81 c6 b2 00 00 00    	add    esi,0xb2
c0007d3d:	56                   	push   esi
c0007d3e:	e8 81 87 ff ff       	call   c00004c4 <strlen>
c0007d43:	89 3c 24             	mov    DWORD PTR [esp],edi
c0007d46:	89 c3                	mov    ebx,eax
c0007d48:	e8 77 87 ff ff       	call   c00004c4 <strlen>
c0007d4d:	83 c4 10             	add    esp,0x10
c0007d50:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c0007d54:	3d 80 00 00 00       	cmp    eax,0x80
c0007d59:	76 10                	jbe    c0007d6b <VgaText::receiveKey(unsigned char)+0xb7>
c0007d5b:	83 ec 0c             	sub    esp,0xc
c0007d5e:	68 db db 01 c0       	push   0xc001dbdb
c0007d63:	e8 41 76 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c0007d68:	83 c4 10             	add    esp,0x10
c0007d6b:	50                   	push   eax
c0007d6c:	50                   	push   eax
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	e8 30 89 ff ff       	call   c00006a4 <strcat>
c0007d74:	83 c4 0c             	add    esp,0xc
c0007d77:	6a 30                	push   0x30
c0007d79:	6a 00                	push   0x0
c0007d7b:	57                   	push   edi
c0007d7c:	e8 27 87 ff ff       	call   c00004a8 <memset>
c0007d81:	83 c4 10             	add    esp,0x10
c0007d84:	83 c4 10             	add    esp,0x10
c0007d87:	5b                   	pop    ebx
c0007d88:	5e                   	pop    esi
c0007d89:	5f                   	pop    edi
c0007d8a:	c3                   	ret    
c0007d8b:	90                   	nop

c0007d8c <VgaText::doUpdate()>:
c0007d8c:	c3                   	ret    

c0007d8d <newTerminal(char*)>:
c0007d8d:	83 ec 28             	sub    esp,0x28
c0007d90:	68 34 01 00 00       	push   0x134
c0007d95:	e8 af eb ff ff       	call   c0006949 <malloc>
c0007d9a:	5a                   	pop    edx
c0007d9b:	59                   	pop    ecx
c0007d9c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007da0:	50                   	push   eax
c0007da1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007da5:	e8 be fd ff ff       	call   c0007b68 <VgaText::VgaText(char const*)>
c0007daa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007dae:	83 c4 2c             	add    esp,0x2c
c0007db1:	c3                   	ret    
c0007db2:	66 90                	xchg   ax,ax

c0007db4 <TSS::TSS()>:
c0007db4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007db8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0007dbf:	90                   	nop
c0007dc0:	c3                   	ret    
c0007dc1:	90                   	nop
c0007dc2:	66 90                	xchg   ax,ax

c0007dc4 <TSS::setESP(unsigned long)>:
c0007dc4:	55                   	push   ebp
c0007dc5:	89 e5                	mov    ebp,esp
c0007dc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007dca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007dcd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0007dd0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007dd3:	90                   	nop
c0007dd4:	5d                   	pop    ebp
c0007dd5:	c3                   	ret    
c0007dd6:	66 90                	xchg   ax,ax

c0007dd8 <TSS::flush()>:
c0007dd8:	55                   	push   ebp
c0007dd9:	89 e5                	mov    ebp,esp
c0007ddb:	83 ec 10             	sub    esp,0x10
c0007dde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007de1:	8b 00                	mov    eax,DWORD PTR [eax]
c0007de3:	83 c8 03             	or     eax,0x3
c0007de6:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0007dea:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0007dee:	66 89 d0             	mov    ax,dx
c0007df1:	0f 00 d8             	ltr    ax
c0007df4:	90                   	nop
c0007df5:	c9                   	leave  
c0007df6:	c3                   	ret    
c0007df7:	90                   	nop

c0007df8 <TSS::setup(unsigned long, unsigned long)>:
c0007df8:	55                   	push   ebp
c0007df9:	89 e5                	mov    ebp,esp
c0007dfb:	83 ec 18             	sub    esp,0x18
c0007dfe:	83 ec 0c             	sub    esp,0xc
c0007e01:	6a 68                	push   0x68
c0007e03:	e8 41 eb ff ff       	call   c0006949 <malloc>
c0007e08:	83 c4 10             	add    esp,0x10
c0007e0b:	89 c2                	mov    edx,eax
c0007e0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007e10:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007e13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007e16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007e19:	83 ec 04             	sub    esp,0x4
c0007e1c:	6a 68                	push   0x68
c0007e1e:	6a 00                	push   0x0
c0007e20:	50                   	push   eax
c0007e21:	e8 82 86 ff ff       	call   c00004a8 <memset>
c0007e26:	83 c4 10             	add    esp,0x10
c0007e29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007e2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007e2f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0007e35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007e38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007e3b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0007e41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007e44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007e47:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0007e4a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007e4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007e50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007e53:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0007e59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007e5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007e5f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0007e65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007e68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007e6b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0007e71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007e74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007e77:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0007e7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007e80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007e83:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0007e89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007e8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007e8f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0007e95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007e98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007e9b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0007e9e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0007ea1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007ea4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007ea7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0007eaa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0007ead:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007eb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007eb3:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0007eba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007ebd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007ec0:	0f 20 da             	mov    edx,cr3
c0007ec3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0007ec6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0007ec9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0007ecc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007ecf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007ed2:	83 ec 08             	sub    esp,0x8
c0007ed5:	50                   	push   eax
c0007ed6:	8d 45 ec             	lea    eax,[ebp-0x14]
c0007ed9:	50                   	push   eax
c0007eda:	e8 b1 e2 ff ff       	call   c0006190 <GDTEntry::setBase(unsigned int)>
c0007edf:	83 c4 10             	add    esp,0x10
c0007ee2:	83 ec 08             	sub    esp,0x8
c0007ee5:	6a 68                	push   0x68
c0007ee7:	8d 45 ec             	lea    eax,[ebp-0x14]
c0007eea:	50                   	push   eax
c0007eeb:	e8 bc e2 ff ff       	call   c00061ac <GDTEntry::setLimit(unsigned int)>
c0007ef0:	83 c4 10             	add    esp,0x10
c0007ef3:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0007ef7:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0007efa:	83 e0 0f             	and    eax,0xf
c0007efd:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0007f00:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0007f03:	83 c8 40             	or     eax,0x40
c0007f06:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0007f09:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c0007f0e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0007f14:	05 78 01 00 00       	add    eax,0x178
c0007f19:	83 ec 04             	sub    esp,0x4
c0007f1c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0007f1f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0007f22:	50                   	push   eax
c0007f23:	e8 b8 e2 ff ff       	call   c00061e0 <GDT::addEntry(GDTEntry)>
c0007f28:	83 c4 10             	add    esp,0x10
c0007f2b:	89 c2                	mov    edx,eax
c0007f2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007f30:	89 10                	mov    DWORD PTR [eax],edx
c0007f32:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c0007f37:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0007f3d:	05 78 01 00 00       	add    eax,0x178
c0007f42:	83 ec 0c             	sub    esp,0xc
c0007f45:	50                   	push   eax
c0007f46:	e8 bf e2 ff ff       	call   c000620a <GDT::flush()>
c0007f4b:	83 c4 10             	add    esp,0x10
c0007f4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007f51:	8b 00                	mov    eax,DWORD PTR [eax]
c0007f53:	c9                   	leave  
c0007f54:	c3                   	ret    
c0007f55:	90                   	nop

c0007f56 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0007f56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f5a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007f5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007f61:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0007f66:	75 08                	jne    c0007f70 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0007f68:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0007f6e:	eb 38                	jmp    c0007fa8 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0007f70:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0007f75:	75 17                	jne    c0007f8e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0007f77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007f7c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007f7f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0007f85:	8b 10                	mov    edx,DWORD PTR [eax]
c0007f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007f8b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0007f8e:	89 c1                	mov    ecx,eax
c0007f90:	83 e1 fd             	and    ecx,0xfffffffd
c0007f93:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0007f99:	74 cd                	je     c0007f68 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0007f9b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0007fa0:	83 e0 ef             	and    eax,0xffffffef
c0007fa3:	83 f8 08             	cmp    eax,0x8
c0007fa6:	76 c0                	jbe    c0007f68 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0007fa8:	31 c0                	xor    eax,eax
c0007faa:	c3                   	ret    
c0007fab:	90                   	nop

c0007fac <ReservedFilename::isAtty()>:
c0007fac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fb0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0007fb3:	31 c0                	xor    eax,eax
c0007fb5:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0007fbb:	74 09                	je     c0007fc6 <ReservedFilename::isAtty()+0x1a>
c0007fbd:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0007fc3:	0f 94 c0             	sete   al
c0007fc6:	c3                   	ret    
c0007fc7:	90                   	nop

c0007fc8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0007fc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fcc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007fd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007fd3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007fd7:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0007fdc:	75 08                	jne    c0007fe6 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0007fde:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0007fe4:	eb 3d                	jmp    c0008023 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0007fe6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0007feb:	75 17                	jne    c0008004 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0007fed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007ff2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ff5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0007ffb:	8b 10                	mov    edx,DWORD PTR [eax]
c0007ffd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008001:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008004:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008009:	75 04                	jne    c000800f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000800b:	89 0a                	mov    DWORD PTR [edx],ecx
c000800d:	eb 14                	jmp    c0008023 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000800f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008014:	74 c8                	je     c0007fde <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008016:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000801b:	83 e0 ef             	and    eax,0xffffffef
c000801e:	83 f8 08             	cmp    eax,0x8
c0008021:	76 bb                	jbe    c0007fde <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008023:	31 c0                	xor    eax,eax
c0008025:	c3                   	ret    

c0008026 <UnixFile::getFileDescriptor()>:
c0008026:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000802a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000802d:	c3                   	ret    

c000802e <UnixFile::UnixFile(int)>:
c000802e:	53                   	push   ebx
c000802f:	83 ec 28             	sub    esp,0x28
c0008032:	ba f8 dc 01 c0       	mov    edx,0xc001dcf8
c0008037:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000803b:	89 10                	mov    DWORD PTR [eax],edx
c000803d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008045:	0f 8f 8c 01 00 00    	jg     c00081d7 <UnixFile::UnixFile(int)+0x1a9>
c000804b:	a1 00 fd 01 c0       	mov    eax,ds:0xc001fd00
c0008050:	8d 50 01             	lea    edx,[eax+0x1]
c0008053:	89 15 00 fd 01 c0    	mov    DWORD PTR ds:0xc001fd00,edx
c0008059:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000805d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008060:	83 ec 08             	sub    esp,0x8
c0008063:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008067:	68 38 04 02 c0       	push   0xc0020438
c000806c:	e8 37 47 01 00       	call   c001c7a8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008071:	83 c4 10             	add    esp,0x10
c0008074:	a0 34 04 02 c0       	mov    al,ds:0xc0020434
c0008079:	83 f0 01             	xor    eax,0x1
c000807c:	84 c0                	test   al,al
c000807e:	0f 84 54 01 00 00    	je     c00081d8 <UnixFile::UnixFile(int)+0x1aa>
c0008084:	c6 05 34 04 02 c0 01 	mov    BYTE PTR ds:0xc0020434,0x1
c000808b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008093:	83 ec 0c             	sub    esp,0xc
c0008096:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000809a:	e8 aa e8 ff ff       	call   c0006949 <malloc>
c000809f:	83 c4 10             	add    esp,0x10
c00080a2:	89 c3                	mov    ebx,eax
c00080a4:	83 ec 08             	sub    esp,0x8
c00080a7:	68 03 ff ff 0f       	push   0xfffff03
c00080ac:	53                   	push   ebx
c00080ad:	e8 2c 01 00 00       	call   c00081de <ReservedFilename::ReservedFilename(int)>
c00080b2:	83 c4 10             	add    esp,0x10
c00080b5:	89 1d 2c 04 02 c0    	mov    DWORD PTR ds:0xc002042c,ebx
c00080bb:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00080c3:	83 ec 0c             	sub    esp,0xc
c00080c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00080ca:	e8 7a e8 ff ff       	call   c0006949 <malloc>
c00080cf:	83 c4 10             	add    esp,0x10
c00080d2:	89 c3                	mov    ebx,eax
c00080d4:	83 ec 08             	sub    esp,0x8
c00080d7:	68 01 ff ff 0f       	push   0xfffff01
c00080dc:	53                   	push   ebx
c00080dd:	e8 fc 00 00 00       	call   c00081de <ReservedFilename::ReservedFilename(int)>
c00080e2:	83 c4 10             	add    esp,0x10
c00080e5:	89 1d 30 04 02 c0    	mov    DWORD PTR ds:0xc0020430,ebx
c00080eb:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00080f3:	83 ec 0c             	sub    esp,0xc
c00080f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00080fa:	e8 4a e8 ff ff       	call   c0006949 <malloc>
c00080ff:	83 c4 10             	add    esp,0x10
c0008102:	89 c3                	mov    ebx,eax
c0008104:	83 ec 08             	sub    esp,0x8
c0008107:	68 00 ff ff 0f       	push   0xfffff00
c000810c:	53                   	push   ebx
c000810d:	e8 cc 00 00 00       	call   c00081de <ReservedFilename::ReservedFilename(int)>
c0008112:	83 c4 10             	add    esp,0x10
c0008115:	89 1d 24 04 02 c0    	mov    DWORD PTR ds:0xc0020424,ebx
c000811b:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008123:	83 ec 0c             	sub    esp,0xc
c0008126:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000812a:	e8 1a e8 ff ff       	call   c0006949 <malloc>
c000812f:	83 c4 10             	add    esp,0x10
c0008132:	89 c3                	mov    ebx,eax
c0008134:	83 ec 08             	sub    esp,0x8
c0008137:	68 02 ff ff 0f       	push   0xfffff02
c000813c:	53                   	push   ebx
c000813d:	e8 9c 00 00 00       	call   c00081de <ReservedFilename::ReservedFilename(int)>
c0008142:	83 c4 10             	add    esp,0x10
c0008145:	89 1d 28 04 02 c0    	mov    DWORD PTR ds:0xc0020428,ebx
c000814b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008153:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008158:	7f 7e                	jg     c00081d8 <UnixFile::UnixFile(int)+0x1aa>
c000815a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008162:	83 ec 0c             	sub    esp,0xc
c0008165:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008169:	e8 db e7 ff ff       	call   c0006949 <malloc>
c000816e:	83 c4 10             	add    esp,0x10
c0008171:	89 c3                	mov    ebx,eax
c0008173:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008177:	05 10 ff ff 0f       	add    eax,0xfffff10
c000817c:	83 ec 08             	sub    esp,0x8
c000817f:	50                   	push   eax
c0008180:	53                   	push   ebx
c0008181:	e8 58 00 00 00       	call   c00081de <ReservedFilename::ReservedFilename(int)>
c0008186:	83 c4 10             	add    esp,0x10
c0008189:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000818d:	89 1c 85 00 04 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfc00],ebx
c0008194:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000819c:	83 ec 0c             	sub    esp,0xc
c000819f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00081a3:	e8 a1 e7 ff ff       	call   c0006949 <malloc>
c00081a8:	83 c4 10             	add    esp,0x10
c00081ab:	89 c3                	mov    ebx,eax
c00081ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081b1:	05 20 ff ff 0f       	add    eax,0xfffff20
c00081b6:	83 ec 08             	sub    esp,0x8
c00081b9:	50                   	push   eax
c00081ba:	53                   	push   ebx
c00081bb:	e8 1e 00 00 00       	call   c00081de <ReservedFilename::ReservedFilename(int)>
c00081c0:	83 c4 10             	add    esp,0x10
c00081c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081c7:	89 1c 85 c0 03 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfc40],ebx
c00081ce:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00081d2:	e9 7c ff ff ff       	jmp    c0008153 <UnixFile::UnixFile(int)+0x125>
c00081d7:	90                   	nop
c00081d8:	83 c4 28             	add    esp,0x28
c00081db:	5b                   	pop    ebx
c00081dc:	c3                   	ret    
c00081dd:	90                   	nop

c00081de <ReservedFilename::ReservedFilename(int)>:
c00081de:	83 ec 0c             	sub    esp,0xc
c00081e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081e5:	83 ec 08             	sub    esp,0x8
c00081e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081ec:	50                   	push   eax
c00081ed:	e8 3c fe ff ff       	call   c000802e <UnixFile::UnixFile(int)>
c00081f2:	83 c4 10             	add    esp,0x10
c00081f5:	ba 14 dd 01 c0       	mov    edx,0xc001dd14
c00081fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081fe:	89 10                	mov    DWORD PTR [eax],edx
c0008200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008204:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008208:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000820b:	90                   	nop
c000820c:	83 c4 0c             	add    esp,0xc
c000820f:	c3                   	ret    

c0008210 <UnixFile::~UnixFile()>:
c0008210:	83 ec 1c             	sub    esp,0x1c
c0008213:	ba f8 dc 01 c0       	mov    edx,0xc001dcf8
c0008218:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000821c:	89 10                	mov    DWORD PTR [eax],edx
c000821e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008222:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008225:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000822a:	7f 73                	jg     c000829f <UnixFile::~UnixFile()+0x8f>
c000822c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008234:	83 ec 0c             	sub    esp,0xc
c0008237:	68 38 04 02 c0       	push   0xc0020438
c000823c:	e8 3b 46 01 00       	call   c001c87c <LinkedList<UnixFile>::getFirstElement()>
c0008241:	83 c4 10             	add    esp,0x10
c0008244:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008248:	83 ec 0c             	sub    esp,0xc
c000824b:	68 38 04 02 c0       	push   0xc0020438
c0008250:	e8 2f 46 01 00       	call   c001c884 <LinkedList<UnixFile>::removeFirst()>
c0008255:	83 c4 10             	add    esp,0x10
c0008258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000825c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0008260:	74 40                	je     c00082a2 <UnixFile::~UnixFile()+0x92>
c0008262:	83 ec 08             	sub    esp,0x8
c0008265:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008269:	68 38 04 02 c0       	push   0xc0020438
c000826e:	e8 35 45 01 00       	call   c001c7a8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008273:	83 c4 10             	add    esp,0x10
c0008276:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000827a:	8d 50 01             	lea    edx,[eax+0x1]
c000827d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008281:	3d 88 13 00 00       	cmp    eax,0x1388
c0008286:	0f 94 c0             	sete   al
c0008289:	84 c0                	test   al,al
c000828b:	74 a7                	je     c0008234 <UnixFile::~UnixFile()+0x24>
c000828d:	83 ec 0c             	sub    esp,0xc
c0008290:	68 d0 dc 01 c0       	push   0xc001dcd0
c0008295:	e8 0f 71 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c000829a:	83 c4 10             	add    esp,0x10
c000829d:	eb 95                	jmp    c0008234 <UnixFile::~UnixFile()+0x24>
c000829f:	90                   	nop
c00082a0:	eb 01                	jmp    c00082a3 <UnixFile::~UnixFile()+0x93>
c00082a2:	90                   	nop
c00082a3:	90                   	nop
c00082a4:	83 c4 1c             	add    esp,0x1c
c00082a7:	c3                   	ret    

c00082a8 <UnixFile::~UnixFile()>:
c00082a8:	83 ec 0c             	sub    esp,0xc
c00082ab:	83 ec 0c             	sub    esp,0xc
c00082ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082b2:	e8 59 ff ff ff       	call   c0008210 <UnixFile::~UnixFile()>
c00082b7:	83 c4 10             	add    esp,0x10
c00082ba:	83 ec 08             	sub    esp,0x8
c00082bd:	6a 0c                	push   0xc
c00082bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082c3:	e8 2a 13 00 00       	call   c00095f2 <operator delete(void*, unsigned long)>
c00082c8:	83 c4 10             	add    esp,0x10
c00082cb:	83 c4 0c             	add    esp,0xc
c00082ce:	c3                   	ret    
c00082cf:	90                   	nop

c00082d0 <ReservedFilename::~ReservedFilename()>:
c00082d0:	83 ec 0c             	sub    esp,0xc
c00082d3:	ba 14 dd 01 c0       	mov    edx,0xc001dd14
c00082d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00082dc:	89 10                	mov    DWORD PTR [eax],edx
c00082de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00082e2:	83 ec 0c             	sub    esp,0xc
c00082e5:	50                   	push   eax
c00082e6:	e8 25 ff ff ff       	call   c0008210 <UnixFile::~UnixFile()>
c00082eb:	83 c4 10             	add    esp,0x10
c00082ee:	90                   	nop
c00082ef:	83 c4 0c             	add    esp,0xc
c00082f2:	c3                   	ret    
c00082f3:	90                   	nop

c00082f4 <ReservedFilename::~ReservedFilename()>:
c00082f4:	83 ec 0c             	sub    esp,0xc
c00082f7:	83 ec 0c             	sub    esp,0xc
c00082fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082fe:	e8 cd ff ff ff       	call   c00082d0 <ReservedFilename::~ReservedFilename()>
c0008303:	83 c4 10             	add    esp,0x10
c0008306:	83 ec 08             	sub    esp,0x8
c0008309:	6a 0c                	push   0xc
c000830b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000830f:	e8 de 12 00 00       	call   c00095f2 <operator delete(void*, unsigned long)>
c0008314:	83 c4 10             	add    esp,0x10
c0008317:	83 c4 0c             	add    esp,0xc
c000831a:	c3                   	ret    

c000831b <getFromFileDescriptor(int)>:
c000831b:	53                   	push   ebx
c000831c:	83 ec 08             	sub    esp,0x8
c000831f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008323:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0008329:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000832f:	7f 2c                	jg     c000835d <getFromFileDescriptor(int)+0x42>
c0008331:	83 ec 0c             	sub    esp,0xc
c0008334:	68 38 04 02 c0       	push   0xc0020438
c0008339:	e8 3e 45 01 00       	call   c001c87c <LinkedList<UnixFile>::getFirstElement()>
c000833e:	83 c4 10             	add    esp,0x10
c0008341:	85 c0                	test   eax,eax
c0008343:	75 04                	jne    c0008349 <getFromFileDescriptor(int)+0x2e>
c0008345:	31 c0                	xor    eax,eax
c0008347:	eb 6e                	jmp    c00083b7 <getFromFileDescriptor(int)+0x9c>
c0008349:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000834c:	74 69                	je     c00083b7 <getFromFileDescriptor(int)+0x9c>
c000834e:	52                   	push   edx
c000834f:	52                   	push   edx
c0008350:	50                   	push   eax
c0008351:	68 38 04 02 c0       	push   0xc0020438
c0008356:	e8 cb 45 01 00       	call   c001c926 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000835b:	eb e1                	jmp    c000833e <getFromFileDescriptor(int)+0x23>
c000835d:	a1 2c 04 02 c0       	mov    eax,ds:0xc002042c
c0008362:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0008368:	74 4d                	je     c00083b7 <getFromFileDescriptor(int)+0x9c>
c000836a:	a1 30 04 02 c0       	mov    eax,ds:0xc0020430
c000836f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0008375:	74 40                	je     c00083b7 <getFromFileDescriptor(int)+0x9c>
c0008377:	a1 28 04 02 c0       	mov    eax,ds:0xc0020428
c000837c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0008382:	74 33                	je     c00083b7 <getFromFileDescriptor(int)+0x9c>
c0008384:	a1 24 04 02 c0       	mov    eax,ds:0xc0020424
c0008389:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000838f:	74 26                	je     c00083b7 <getFromFileDescriptor(int)+0x9c>
c0008391:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0008397:	83 f8 08             	cmp    eax,0x8
c000839a:	77 09                	ja     c00083a5 <getFromFileDescriptor(int)+0x8a>
c000839c:	8b 04 85 00 04 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfc00]
c00083a3:	eb 12                	jmp    c00083b7 <getFromFileDescriptor(int)+0x9c>
c00083a5:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00083ab:	83 fb 08             	cmp    ebx,0x8
c00083ae:	77 95                	ja     c0008345 <getFromFileDescriptor(int)+0x2a>
c00083b0:	8b 04 9d c0 03 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdfc40]
c00083b7:	83 c4 08             	add    esp,0x8
c00083ba:	5b                   	pop    ebx
c00083bb:	c3                   	ret    

c00083bc <__static_initialization_and_destruction_0(int, int)>:
c00083bc:	83 ec 0c             	sub    esp,0xc
c00083bf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00083c4:	75 34                	jne    c00083fa <__static_initialization_and_destruction_0(int, int)+0x3e>
c00083c6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00083ce:	75 2a                	jne    c00083fa <__static_initialization_and_destruction_0(int, int)+0x3e>
c00083d0:	83 ec 0c             	sub    esp,0xc
c00083d3:	68 38 04 02 c0       	push   0xc0020438
c00083d8:	e8 89 43 01 00       	call   c001c766 <LinkedList<UnixFile>::LinkedList()>
c00083dd:	83 c4 10             	add    esp,0x10
c00083e0:	83 ec 04             	sub    esp,0x4
c00083e3:	68 28 fb 01 c0       	push   0xc001fb28
c00083e8:	68 38 04 02 c0       	push   0xc0020438
c00083ed:	68 64 c7 01 c0       	push   0xc001c764
c00083f2:	e8 ab 11 00 00       	call   c00095a2 <__cxa_atexit>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	90                   	nop
c00083fb:	83 c4 0c             	add    esp,0xc
c00083fe:	c3                   	ret    

c00083ff <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00083ff:	83 ec 0c             	sub    esp,0xc
c0008402:	83 ec 08             	sub    esp,0x8
c0008405:	68 ff ff 00 00       	push   0xffff
c000840a:	6a 01                	push   0x1
c000840c:	e8 ab ff ff ff       	call   c00083bc <__static_initialization_and_destruction_0(int, int)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	83 c4 0c             	add    esp,0xc
c0008417:	c3                   	ret    

c0008418 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0008418:	53                   	push   ebx
c0008419:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000841d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008421:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0008427:	89 c8                	mov    eax,ecx
c0008429:	d1 e8                	shr    eax,1
c000842b:	03 05 08 fd 01 c0    	add    eax,DWORD PTR ds:0xc001fd08
c0008431:	83 e1 01             	and    ecx,0x1
c0008434:	8a 10                	mov    dl,BYTE PTR [eax]
c0008436:	75 09                	jne    c0008441 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0008438:	83 e2 f0             	and    edx,0xfffffff0
c000843b:	09 da                	or     edx,ebx
c000843d:	88 10                	mov    BYTE PTR [eax],dl
c000843f:	5b                   	pop    ebx
c0008440:	c3                   	ret    
c0008441:	c1 e3 04             	shl    ebx,0x4
c0008444:	83 e2 0f             	and    edx,0xf
c0008447:	09 da                	or     edx,ebx
c0008449:	88 10                	mov    BYTE PTR [eax],dl
c000844b:	5b                   	pop    ebx
c000844c:	c3                   	ret    

c000844d <Virt::getPageState(unsigned long)>:
c000844d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008451:	8b 0d 08 fd 01 c0    	mov    ecx,DWORD PTR ds:0xc001fd08
c0008457:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000845d:	89 d0                	mov    eax,edx
c000845f:	d1 e8                	shr    eax,1
c0008461:	83 e2 01             	and    edx,0x1
c0008464:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0008467:	75 04                	jne    c000846d <Virt::getPageState(unsigned long)+0x20>
c0008469:	83 e0 0f             	and    eax,0xf
c000846c:	c3                   	ret    
c000846d:	c0 e8 04             	shr    al,0x4
c0008470:	c3                   	ret    

c0008471 <Virt::allocateKernelVirtualPages(int)>:
c0008471:	55                   	push   ebp
c0008472:	31 ed                	xor    ebp,ebp
c0008474:	57                   	push   edi
c0008475:	56                   	push   esi
c0008476:	53                   	push   ebx
c0008477:	31 db                	xor    ebx,ebx
c0008479:	83 ec 1c             	sub    esp,0x1c
c000847c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008480:	8b 3d 04 fd 01 c0    	mov    edi,DWORD PTR ds:0xc001fd04
c0008486:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000848b:	57                   	push   edi
c000848c:	e8 bc ff ff ff       	call   c000844d <Virt::getPageState(unsigned long)>
c0008491:	5a                   	pop    edx
c0008492:	84 c0                	test   al,al
c0008494:	75 3a                	jne    c00084d0 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0008496:	85 db                	test   ebx,ebx
c0008498:	75 02                	jne    c000849c <Virt::allocateKernelVirtualPages(int)+0x2b>
c000849a:	89 fd                	mov    ebp,edi
c000849c:	43                   	inc    ebx
c000849d:	39 f3                	cmp    ebx,esi
c000849f:	74 5a                	je     c00084fb <Virt::allocateKernelVirtualPages(int)+0x8a>
c00084a1:	47                   	inc    edi
c00084a2:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00084a8:	76 31                	jbe    c00084db <Virt::allocateKernelVirtualPages(int)+0x6a>
c00084aa:	c7 05 04 fd 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001fd04,0xc8000
c00084b4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00084b9:	75 28                	jne    c00084e3 <Virt::allocateKernelVirtualPages(int)+0x72>
c00084bb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00084c0:	bf 00 80 0c 00       	mov    edi,0xc8000
c00084c5:	57                   	push   edi
c00084c6:	e8 82 ff ff ff       	call   c000844d <Virt::getPageState(unsigned long)>
c00084cb:	5a                   	pop    edx
c00084cc:	84 c0                	test   al,al
c00084ce:	74 c6                	je     c0008496 <Virt::allocateKernelVirtualPages(int)+0x25>
c00084d0:	31 db                	xor    ebx,ebx
c00084d2:	47                   	inc    edi
c00084d3:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00084d9:	77 cf                	ja     c00084aa <Virt::allocateKernelVirtualPages(int)+0x39>
c00084db:	89 3d 04 fd 01 c0    	mov    DWORD PTR ds:0xc001fd04,edi
c00084e1:	eb a8                	jmp    c000848b <Virt::allocateKernelVirtualPages(int)+0x1a>
c00084e3:	83 ec 0c             	sub    esp,0xc
c00084e6:	68 28 dd 01 c0       	push   0xc001dd28
c00084eb:	e8 b9 6e 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c00084f0:	8b 3d 04 fd 01 c0    	mov    edi,DWORD PTR ds:0xc001fd04
c00084f6:	83 c4 10             	add    esp,0x10
c00084f9:	eb 90                	jmp    c000848b <Virt::allocateKernelVirtualPages(int)+0x1a>
c00084fb:	89 2d 04 fd 01 c0    	mov    DWORD PTR ds:0xc001fd04,ebp
c0008501:	4b                   	dec    ebx
c0008502:	74 5f                	je     c0008563 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0008504:	85 f6                	test   esi,esi
c0008506:	74 3d                	je     c0008545 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0008508:	89 e8                	mov    eax,ebp
c000850a:	31 db                	xor    ebx,ebx
c000850c:	8d 7e ff             	lea    edi,[esi-0x1]
c000850f:	eb 14                	jmp    c0008525 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0008511:	6a 01                	push   0x1
c0008513:	43                   	inc    ebx
c0008514:	50                   	push   eax
c0008515:	e8 fe fe ff ff       	call   c0008418 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000851a:	58                   	pop    eax
c000851b:	39 f3                	cmp    ebx,esi
c000851d:	5a                   	pop    edx
c000851e:	74 25                	je     c0008545 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0008520:	a1 04 fd 01 c0       	mov    eax,ds:0xc001fd04
c0008525:	8d 50 01             	lea    edx,[eax+0x1]
c0008528:	85 db                	test   ebx,ebx
c000852a:	89 15 04 fd 01 c0    	mov    DWORD PTR ds:0xc001fd04,edx
c0008530:	74 20                	je     c0008552 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0008532:	39 df                	cmp    edi,ebx
c0008534:	75 db                	jne    c0008511 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0008536:	6a 03                	push   0x3
c0008538:	43                   	inc    ebx
c0008539:	50                   	push   eax
c000853a:	e8 d9 fe ff ff       	call   c0008418 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000853f:	59                   	pop    ecx
c0008540:	39 f3                	cmp    ebx,esi
c0008542:	58                   	pop    eax
c0008543:	75 db                	jne    c0008520 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0008545:	83 c4 1c             	add    esp,0x1c
c0008548:	89 e8                	mov    eax,ebp
c000854a:	5b                   	pop    ebx
c000854b:	c1 e0 0c             	shl    eax,0xc
c000854e:	5e                   	pop    esi
c000854f:	5f                   	pop    edi
c0008550:	5d                   	pop    ebp
c0008551:	c3                   	ret    
c0008552:	6a 02                	push   0x2
c0008554:	bb 01 00 00 00       	mov    ebx,0x1
c0008559:	50                   	push   eax
c000855a:	e8 b9 fe ff ff       	call   c0008418 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000855f:	58                   	pop    eax
c0008560:	5a                   	pop    edx
c0008561:	eb bd                	jmp    c0008520 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0008563:	6a 04                	push   0x4
c0008565:	8d 45 01             	lea    eax,[ebp+0x1]
c0008568:	55                   	push   ebp
c0008569:	a3 04 fd 01 c0       	mov    ds:0xc001fd04,eax
c000856e:	e8 a5 fe ff ff       	call   c0008418 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008573:	59                   	pop    ecx
c0008574:	89 e8                	mov    eax,ebp
c0008576:	5b                   	pop    ebx
c0008577:	c1 e0 0c             	shl    eax,0xc
c000857a:	83 c4 1c             	add    esp,0x1c
c000857d:	5b                   	pop    ebx
c000857e:	5e                   	pop    esi
c000857f:	5f                   	pop    edi
c0008580:	5d                   	pop    ebp
c0008581:	c3                   	ret    

c0008582 <Virt::freeSwapfilePage(unsigned long)>:
c0008582:	53                   	push   ebx
c0008583:	8b 15 50 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020450
c0008589:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000858d:	b8 01 00 00 00       	mov    eax,0x1
c0008592:	89 cb                	mov    ebx,ecx
c0008594:	d3 e0                	shl    eax,cl
c0008596:	c1 eb 05             	shr    ebx,0x5
c0008599:	f7 d0                	not    eax
c000859b:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000859e:	5b                   	pop    ebx
c000859f:	c3                   	ret    

c00085a0 <Virt::swapIDToSector(unsigned long)>:
c00085a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a4:	0f af 05 0c fd 01 c0 	imul   eax,DWORD PTR ds:0xc001fd0c
c00085ab:	03 05 14 fd 01 c0    	add    eax,DWORD PTR ds:0xc001fd14
c00085b1:	c3                   	ret    

c00085b2 <Virt::allocateSwapfilePage()>:
c00085b2:	55                   	push   ebp
c00085b3:	31 d2                	xor    edx,edx
c00085b5:	57                   	push   edi
c00085b6:	56                   	push   esi
c00085b7:	53                   	push   ebx
c00085b8:	83 ec 0c             	sub    esp,0xc
c00085bb:	8b 0d 0c fd 01 c0    	mov    ecx,DWORD PTR ds:0xc001fd0c
c00085c1:	a1 10 fd 01 c0       	mov    eax,ds:0xc001fd10
c00085c6:	f7 f1                	div    ecx
c00085c8:	39 0d 10 fd 01 c0    	cmp    DWORD PTR ds:0xc001fd10,ecx
c00085ce:	72 2d                	jb     c00085fd <Virt::allocateSwapfilePage()+0x4b>
c00085d0:	8b 35 50 04 02 c0    	mov    esi,DWORD PTR ds:0xc0020450
c00085d6:	8b 16                	mov    edx,DWORD PTR [esi]
c00085d8:	f6 c2 01             	test   dl,0x1
c00085db:	74 3c                	je     c0008619 <Virt::allocateSwapfilePage()+0x67>
c00085dd:	31 c9                	xor    ecx,ecx
c00085df:	bf 01 00 00 00       	mov    edi,0x1
c00085e4:	eb 12                	jmp    c00085f8 <Virt::allocateSwapfilePage()+0x46>
c00085e6:	89 fd                	mov    ebp,edi
c00085e8:	89 ca                	mov    edx,ecx
c00085ea:	d3 e5                	shl    ebp,cl
c00085ec:	c1 ea 05             	shr    edx,0x5
c00085ef:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00085f2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00085f4:	85 ea                	test   edx,ebp
c00085f6:	74 2a                	je     c0008622 <Virt::allocateSwapfilePage()+0x70>
c00085f8:	41                   	inc    ecx
c00085f9:	39 c8                	cmp    eax,ecx
c00085fb:	77 e9                	ja     c00085e6 <Virt::allocateSwapfilePage()+0x34>
c00085fd:	83 ec 0c             	sub    esp,0xc
c0008600:	68 8f de 01 c0       	push   0xc001de8f
c0008605:	e8 9f 6d 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c000860a:	83 c4 10             	add    esp,0x10
c000860d:	31 c9                	xor    ecx,ecx
c000860f:	83 c4 0c             	add    esp,0xc
c0008612:	89 c8                	mov    eax,ecx
c0008614:	5b                   	pop    ebx
c0008615:	5e                   	pop    esi
c0008616:	5f                   	pop    edi
c0008617:	5d                   	pop    ebp
c0008618:	c3                   	ret    
c0008619:	89 f3                	mov    ebx,esi
c000861b:	bd 01 00 00 00       	mov    ebp,0x1
c0008620:	31 c9                	xor    ecx,ecx
c0008622:	09 ea                	or     edx,ebp
c0008624:	89 c8                	mov    eax,ecx
c0008626:	89 13                	mov    DWORD PTR [ebx],edx
c0008628:	83 c4 0c             	add    esp,0xc
c000862b:	5b                   	pop    ebx
c000862c:	5e                   	pop    esi
c000862d:	5f                   	pop    edi
c000862e:	5d                   	pop    ebp
c000862f:	c3                   	ret    

c0008630 <Virt::virtualMemorySetup()>:
c0008630:	53                   	push   ebx
c0008631:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0008636:	6a 0f                	push   0xf
c0008638:	53                   	push   ebx
c0008639:	43                   	inc    ebx
c000863a:	e8 d9 fd ff ff       	call   c0008418 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000863f:	58                   	pop    eax
c0008640:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0008646:	5a                   	pop    edx
c0008647:	75 ed                	jne    c0008636 <Virt::virtualMemorySetup()+0x6>
c0008649:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000864e:	6a 00                	push   0x0
c0008650:	53                   	push   ebx
c0008651:	43                   	inc    ebx
c0008652:	e8 c1 fd ff ff       	call   c0008418 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008657:	59                   	pop    ecx
c0008658:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000865e:	58                   	pop    eax
c000865f:	75 ed                	jne    c000864e <Virt::virtualMemorySetup()+0x1e>
c0008661:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0008666:	6a 0f                	push   0xf
c0008668:	53                   	push   ebx
c0008669:	43                   	inc    ebx
c000866a:	e8 a9 fd ff ff       	call   c0008418 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000866f:	58                   	pop    eax
c0008670:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0008676:	5a                   	pop    edx
c0008677:	75 ed                	jne    c0008666 <Virt::virtualMemorySetup()+0x36>
c0008679:	5b                   	pop    ebx
c000867a:	c3                   	ret    

c000867b <Virt::setupPageSwapping(int)>:
c000867b:	53                   	push   ebx
c000867c:	83 ec 0c             	sub    esp,0xc
c000867f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008683:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0008688:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000868e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008690:	53                   	push   ebx
c0008691:	c1 e3 0b             	shl    ebx,0xb
c0008694:	68 a6 de 01 c0       	push   0xc001dea6
c0008699:	50                   	push   eax
c000869a:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000869d:	89 1d 10 fd 01 c0    	mov    DWORD PTR ds:0xc001fd10,ebx
c00086a3:	c6 05 18 fd 01 c0 43 	mov    BYTE PTR ds:0xc001fd18,0x43
c00086aa:	c1 eb 08             	shr    ebx,0x8
c00086ad:	a3 14 fd 01 c0       	mov    ds:0xc001fd14,eax
c00086b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00086b5:	c7 05 0c fd 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001fd0c,0x8
c00086bf:	e8 85 e2 ff ff       	call   c0006949 <malloc>
c00086c4:	83 c4 0c             	add    esp,0xc
c00086c7:	89 c1                	mov    ecx,eax
c00086c9:	a3 50 04 02 c0       	mov    ds:0xc0020450,eax
c00086ce:	31 d2                	xor    edx,edx
c00086d0:	a1 10 fd 01 c0       	mov    eax,ds:0xc001fd10
c00086d5:	f7 35 0c fd 01 c0    	div    DWORD PTR ds:0xc001fd0c
c00086db:	c1 e8 05             	shr    eax,0x5
c00086de:	50                   	push   eax
c00086df:	6a 00                	push   0x0
c00086e1:	51                   	push   ecx
c00086e2:	e8 c1 7d ff ff       	call   c00004a8 <memset>
c00086e7:	83 c4 18             	add    esp,0x18
c00086ea:	5b                   	pop    ebx
c00086eb:	c3                   	ret    

c00086ec <VAS::VAS(VAS*)>:
c00086ec:	83 ec 0c             	sub    esp,0xc
c00086ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00086fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086fe:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0008705:	83 ec 0c             	sub    esp,0xc
c0008708:	68 48 dd 01 c0       	push   0xc001dd48
c000870d:	e8 97 6c 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c0008712:	83 c4 10             	add    esp,0x10
c0008715:	90                   	nop
c0008716:	83 c4 0c             	add    esp,0xc
c0008719:	c3                   	ret    

c000871a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000871a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000871e:	89 c2                	mov    edx,eax
c0008720:	c1 e8 0a             	shr    eax,0xa
c0008723:	c1 ea 16             	shr    edx,0x16
c0008726:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000872b:	19 c9                	sbb    ecx,ecx
c000872d:	c1 e2 0c             	shl    edx,0xc
c0008730:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0008736:	25 fc 0f 00 00       	and    eax,0xffc
c000873b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0008742:	01 d0                	add    eax,edx
c0008744:	c3                   	ret    
c0008745:	90                   	nop

c0008746 <VAS::getPageTableEntry(unsigned long)>:
c0008746:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000874a:	89 ca                	mov    edx,ecx
c000874c:	c1 e9 0a             	shr    ecx,0xa
c000874f:	c1 ea 16             	shr    edx,0x16
c0008752:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0008758:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000875e:	c1 e0 0c             	shl    eax,0xc
c0008761:	8d 04 08             	lea    eax,[eax+ecx*1]
c0008764:	c3                   	ret    

c0008765 <Virt::freeKernelVirtualPages(unsigned long)>:
c0008765:	57                   	push   edi
c0008766:	56                   	push   esi
c0008767:	be 01 00 00 00       	mov    esi,0x1
c000876c:	53                   	push   ebx
c000876d:	83 ec 10             	sub    esp,0x10
c0008770:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008774:	c1 eb 0c             	shr    ebx,0xc
c0008777:	eb 3f                	jmp    c00087b8 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0008779:	83 ec 08             	sub    esp,0x8
c000877c:	57                   	push   edi
c000877d:	ff 35 54 04 02 c0    	push   DWORD PTR ds:0xc0020454
c0008783:	e8 be ff ff ff       	call   c0008746 <VAS::getPageTableEntry(unsigned long)>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	8b 00                	mov    eax,DWORD PTR [eax]
c000878d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0008791:	f6 c4 04             	test   ah,0x4
c0008794:	75 5f                	jne    c00087f5 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0008796:	80 fa 04             	cmp    dl,0x4
c0008799:	74 78                	je     c0008813 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000879b:	80 fa 02             	cmp    dl,0x2
c000879e:	0f 84 88 00 00 00    	je     c000882c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00087a4:	80 fa 03             	cmp    dl,0x3
c00087a7:	0f 84 ad 00 00 00    	je     c000885a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00087ad:	fe ca                	dec    dl
c00087af:	0f 84 92 00 00 00    	je     c0008847 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00087b5:	43                   	inc    ebx
c00087b6:	31 f6                	xor    esi,esi
c00087b8:	53                   	push   ebx
c00087b9:	89 df                	mov    edi,ebx
c00087bb:	e8 8d fc ff ff       	call   c000844d <Virt::getPageState(unsigned long)>
c00087c0:	c1 e7 0c             	shl    edi,0xc
c00087c3:	59                   	pop    ecx
c00087c4:	84 c0                	test   al,al
c00087c6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00087ca:	75 ad                	jne    c0008779 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00087cc:	83 ec 0c             	sub    esp,0xc
c00087cf:	68 bd de 01 c0       	push   0xc001debd
c00087d4:	e8 d0 6b 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c00087d9:	58                   	pop    eax
c00087da:	5a                   	pop    edx
c00087db:	57                   	push   edi
c00087dc:	ff 35 54 04 02 c0    	push   DWORD PTR ds:0xc0020454
c00087e2:	e8 5f ff ff ff       	call   c0008746 <VAS::getPageTableEntry(unsigned long)>
c00087e7:	83 c4 10             	add    esp,0x10
c00087ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00087ec:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00087f0:	f6 c4 04             	test   ah,0x4
c00087f3:	74 c0                	je     c00087b5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00087f5:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00087f9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00087fe:	83 ec 0c             	sub    esp,0xc
c0008801:	50                   	push   eax
c0008802:	e8 a7 e4 ff ff       	call   c0006cae <Phys::freePage(unsigned long)>
c0008807:	83 c4 10             	add    esp,0x10
c000880a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000880e:	80 fa 04             	cmp    dl,0x4
c0008811:	75 88                	jne    c000879b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0008813:	89 f0                	mov    eax,esi
c0008815:	84 c0                	test   al,al
c0008817:	75 47                	jne    c0008860 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0008819:	c7 44 24 20 6c dd 01 c0 	mov    DWORD PTR [esp+0x20],0xc001dd6c
c0008821:	83 c4 10             	add    esp,0x10
c0008824:	5b                   	pop    ebx
c0008825:	5e                   	pop    esi
c0008826:	5f                   	pop    edi
c0008827:	e9 7d 6b 00 00       	jmp    c000f3a9 <Krnl::panic(char const*)>
c000882c:	89 f0                	mov    eax,esi
c000882e:	84 c0                	test   al,al
c0008830:	75 15                	jne    c0008847 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0008832:	83 ec 0c             	sub    esp,0xc
c0008835:	68 d9 de 01 c0       	push   0xc001ded9
c000883a:	e8 6a 6b 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c000883f:	83 c4 10             	add    esp,0x10
c0008842:	e9 6e ff ff ff       	jmp    c00087b5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008847:	83 ec 08             	sub    esp,0x8
c000884a:	6a 00                	push   0x0
c000884c:	53                   	push   ebx
c000884d:	e8 c6 fb ff ff       	call   c0008418 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008852:	83 c4 10             	add    esp,0x10
c0008855:	e9 5b ff ff ff       	jmp    c00087b5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000885a:	89 f0                	mov    eax,esi
c000885c:	84 c0                	test   al,al
c000885e:	75 15                	jne    c0008875 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0008860:	83 ec 08             	sub    esp,0x8
c0008863:	6a 00                	push   0x0
c0008865:	53                   	push   ebx
c0008866:	e8 ad fb ff ff       	call   c0008418 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000886b:	83 c4 10             	add    esp,0x10
c000886e:	83 c4 10             	add    esp,0x10
c0008871:	5b                   	pop    ebx
c0008872:	5e                   	pop    esi
c0008873:	5f                   	pop    edi
c0008874:	c3                   	ret    
c0008875:	c7 44 24 20 f5 de 01 c0 	mov    DWORD PTR [esp+0x20],0xc001def5
c000887d:	83 c4 10             	add    esp,0x10
c0008880:	5b                   	pop    ebx
c0008881:	5e                   	pop    esi
c0008882:	5f                   	pop    edi
c0008883:	e9 21 6b 00 00       	jmp    c000f3a9 <Krnl::panic(char const*)>

c0008888 <VAS::freeAllocatedPages(unsigned long)>:
c0008888:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000888c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008890:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0008894:	74 09                	je     c000889f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0008896:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000889a:	e9 c6 fe ff ff       	jmp    c0008765 <Virt::freeKernelVirtualPages(unsigned long)>
c000889f:	c7 44 24 04 90 dd 01 c0 	mov    DWORD PTR [esp+0x4],0xc001dd90
c00088a7:	e9 27 0e 00 00       	jmp    c00096d3 <Dbg::kprintf(char const*, ...)>

c00088ac <VAS::virtualToPhysical(unsigned long)>:
c00088ac:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00088b0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00088b4:	e8 8d fe ff ff       	call   c0008746 <VAS::getPageTableEntry(unsigned long)>
c00088b9:	5a                   	pop    edx
c00088ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00088bc:	59                   	pop    ecx
c00088bd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00088c2:	c3                   	ret    
c00088c3:	90                   	nop

c00088c4 <VAS::reflagRange(unsigned long, int, int, int)>:
c00088c4:	55                   	push   ebp
c00088c5:	57                   	push   edi
c00088c6:	56                   	push   esi
c00088c7:	53                   	push   ebx
c00088c8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00088cc:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00088d0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00088d4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00088d8:	85 db                	test   ebx,ebx
c00088da:	7e 22                	jle    c00088fe <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00088dc:	c1 e3 0c             	shl    ebx,0xc
c00088df:	01 f3                	add    ebx,esi
c00088e1:	56                   	push   esi
c00088e2:	81 c6 00 10 00 00    	add    esi,0x1000
c00088e8:	55                   	push   ebp
c00088e9:	e8 58 fe ff ff       	call   c0008746 <VAS::getPageTableEntry(unsigned long)>
c00088ee:	5a                   	pop    edx
c00088ef:	59                   	pop    ecx
c00088f0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00088f2:	21 f9                	and    ecx,edi
c00088f4:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00088f8:	39 f3                	cmp    ebx,esi
c00088fa:	89 08                	mov    DWORD PTR [eax],ecx
c00088fc:	75 e3                	jne    c00088e1 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00088fe:	5b                   	pop    ebx
c00088ff:	5e                   	pop    esi
c0008900:	5f                   	pop    edi
c0008901:	5d                   	pop    ebp
c0008902:	c3                   	ret    
c0008903:	90                   	nop

c0008904 <VAS::setToWriteCombining(unsigned long, int)>:
c0008904:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c0008909:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000890f:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0008916:	75 01                	jne    c0008919 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0008918:	c3                   	ret    
c0008919:	68 80 00 00 00       	push   0x80
c000891e:	6a ff                	push   0xffffffff
c0008920:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008924:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008928:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000892c:	e8 93 ff ff ff       	call   c00088c4 <VAS::reflagRange(unsigned long, int, int, int)>
c0008931:	83 c4 14             	add    esp,0x14
c0008934:	c3                   	ret    
c0008935:	90                   	nop

c0008936 <VAS::mapOtherVASIn(bool, VAS*)>:
c0008936:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000893b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000893f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0008942:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008946:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0008949:	19 c0                	sbb    eax,eax
c000894b:	83 ca 03             	or     edx,0x3
c000894e:	83 e0 fc             	and    eax,0xfffffffc
c0008951:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0008958:	0f 20 d8             	mov    eax,cr3
c000895b:	0f 22 d8             	mov    cr3,eax
c000895e:	c3                   	ret    
c000895f:	90                   	nop

c0008960 <VAS::~VAS()>:
c0008960:	83 ec 2c             	sub    esp,0x2c
c0008963:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000896b:	fa                   	cli    
c000896c:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0008971:	40                   	inc    eax
c0008972:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0008977:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000897c:	8b 00                	mov    eax,DWORD PTR [eax]
c000897e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008981:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0008987:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000898b:	6a 01                	push   0x1
c000898d:	50                   	push   eax
c000898e:	e8 a3 ff ff ff       	call   c0008936 <VAS::mapOtherVASIn(bool, VAS*)>
c0008993:	83 c4 0c             	add    esp,0xc
c0008996:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000899e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00089a6:	0f 8f d4 00 00 00    	jg     c0008a80 <VAS::~VAS()+0x120>
c00089ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089b0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089b3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089b7:	c1 e2 02             	shl    edx,0x2
c00089ba:	01 d0                	add    eax,edx
c00089bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00089be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089c6:	83 e0 01             	and    eax,0x1
c00089c9:	0f 84 a8 00 00 00    	je     c0008a77 <VAS::~VAS()+0x117>
c00089cf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00089d7:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00089df:	7f 72                	jg     c0008a53 <VAS::~VAS()+0xf3>
c00089e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00089e5:	c1 e0 0a             	shl    eax,0xa
c00089e8:	89 c2                	mov    edx,eax
c00089ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00089ee:	01 d0                	add    eax,edx
c00089f0:	c1 e0 0c             	shl    eax,0xc
c00089f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089f7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00089fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00089fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008a01:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0008a07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a0b:	6a 01                	push   0x1
c0008a0d:	50                   	push   eax
c0008a0e:	e8 07 fd ff ff       	call   c000871a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0008a13:	83 c4 0c             	add    esp,0xc
c0008a16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008a1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0008a20:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008a24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008a28:	25 01 04 00 00       	and    eax,0x401
c0008a2d:	3d 01 04 00 00       	cmp    eax,0x401
c0008a32:	75 19                	jne    c0008a4d <VAS::~VAS()+0xed>
c0008a34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008a38:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008a3d:	83 ec 0c             	sub    esp,0xc
c0008a40:	50                   	push   eax
c0008a41:	e8 68 e2 ff ff       	call   c0006cae <Phys::freePage(unsigned long)>
c0008a46:	83 c4 10             	add    esp,0x10
c0008a49:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008a4d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0008a51:	eb 84                	jmp    c00089d7 <VAS::~VAS()+0x77>
c0008a53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a57:	25 00 04 00 00       	and    eax,0x400
c0008a5c:	74 19                	je     c0008a77 <VAS::~VAS()+0x117>
c0008a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a62:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008a67:	83 ec 0c             	sub    esp,0xc
c0008a6a:	50                   	push   eax
c0008a6b:	e8 3e e2 ff ff       	call   c0006cae <Phys::freePage(unsigned long)>
c0008a70:	83 c4 10             	add    esp,0x10
c0008a73:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008a77:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0008a7b:	e9 1e ff ff ff       	jmp    c000899e <VAS::~VAS()+0x3e>
c0008a80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a84:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008a87:	83 ec 0c             	sub    esp,0xc
c0008a8a:	50                   	push   eax
c0008a8b:	e8 d5 fc ff ff       	call   c0008765 <Virt::freeKernelVirtualPages(unsigned long)>
c0008a90:	83 c4 10             	add    esp,0x10
c0008a93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a97:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008a9a:	83 ec 0c             	sub    esp,0xc
c0008a9d:	50                   	push   eax
c0008a9e:	e8 0b e2 ff ff       	call   c0006cae <Phys::freePage(unsigned long)>
c0008aa3:	83 c4 10             	add    esp,0x10
c0008aa6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008aaa:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0008aaf:	48                   	dec    eax
c0008ab0:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0008ab5:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0008aba:	85 c0                	test   eax,eax
c0008abc:	75 01                	jne    c0008abf <VAS::~VAS()+0x15f>
c0008abe:	fb                   	sti    
c0008abf:	90                   	nop
c0008ac0:	83 c4 2c             	add    esp,0x2c
c0008ac3:	c3                   	ret    

c0008ac4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0008ac4:	55                   	push   ebp
c0008ac5:	57                   	push   edi
c0008ac6:	56                   	push   esi
c0008ac7:	53                   	push   ebx
c0008ac8:	83 ec 1c             	sub    esp,0x1c
c0008acb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0008acf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0008ad3:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0008ad9:	77 0b                	ja     c0008ae6 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0008adb:	0f 20 d8             	mov    eax,cr3
c0008ade:	0f 20 d8             	mov    eax,cr3
c0008ae1:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0008ae4:	75 47                	jne    c0008b2d <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0008ae6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008aea:	09 d8                	or     eax,ebx
c0008aec:	a9 ff 0f 00 00       	test   eax,0xfff
c0008af1:	75 57                	jne    c0008b4a <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0008af3:	89 de                	mov    esi,ebx
c0008af5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0008af8:	c1 ee 16             	shr    esi,0x16
c0008afb:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0008b02:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0008b06:	74 54                	je     c0008b5c <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0008b08:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008b0c:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0008b12:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0008b16:	c1 e6 0c             	shl    esi,0xc
c0008b19:	c1 eb 0a             	shr    ebx,0xa
c0008b1c:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0008b22:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0008b25:	83 c4 1c             	add    esp,0x1c
c0008b28:	5b                   	pop    ebx
c0008b29:	5e                   	pop    esi
c0008b2a:	5f                   	pop    edi
c0008b2b:	5d                   	pop    ebp
c0008b2c:	c3                   	ret    
c0008b2d:	83 ec 0c             	sub    esp,0xc
c0008b30:	68 b4 dd 01 c0       	push   0xc001ddb4
c0008b35:	e8 99 0b 00 00       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0008b3a:	83 c4 10             	add    esp,0x10
c0008b3d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008b41:	09 d8                	or     eax,ebx
c0008b43:	a9 ff 0f 00 00       	test   eax,0xfff
c0008b48:	74 a9                	je     c0008af3 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0008b4a:	83 ec 0c             	sub    esp,0xc
c0008b4d:	68 1c de 01 c0       	push   0xc001de1c
c0008b52:	e8 52 68 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c0008b57:	83 c4 10             	add    esp,0x10
c0008b5a:	eb 97                	jmp    c0008af3 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0008b5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008b60:	e8 ab e1 ff ff       	call   c0006d10 <Phys::allocatePage()>
c0008b65:	83 ec 0c             	sub    esp,0xc
c0008b68:	89 c5                	mov    ebp,eax
c0008b6a:	8b 0d 54 04 02 c0    	mov    ecx,DWORD PTR ds:0xc0020454
c0008b70:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0008b74:	6a 01                	push   0x1
c0008b76:	e8 f6 f8 ff ff       	call   c0008471 <Virt::allocateKernelVirtualPages(int)>
c0008b7b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0008b82:	6a 01                	push   0x1
c0008b84:	50                   	push   eax
c0008b85:	55                   	push   ebp
c0008b86:	81 cd 07 04 00 00    	or     ebp,0x407
c0008b8c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008b90:	51                   	push   ecx
c0008b91:	e8 26 02 00 00       	call   c0008dbc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0008b96:	83 c4 1c             	add    esp,0x1c
c0008b99:	68 00 10 00 00       	push   0x1000
c0008b9e:	6a 00                	push   0x0
c0008ba0:	50                   	push   eax
c0008ba1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ba5:	e8 fe 78 ff ff       	call   c00004a8 <memset>
c0008baa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0008bae:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0008bb1:	e8 af fb ff ff       	call   c0008765 <Virt::freeKernelVirtualPages(unsigned long)>
c0008bb6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008bba:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0008bbd:	83 c4 10             	add    esp,0x10
c0008bc0:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0008bc3:	e9 40 ff ff ff       	jmp    c0008b08 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0008bc8 <VAS::allocatePages(int, int)>:
c0008bc8:	55                   	push   ebp
c0008bc9:	57                   	push   edi
c0008bca:	56                   	push   esi
c0008bcb:	53                   	push   ebx
c0008bcc:	83 ec 1c             	sub    esp,0x1c
c0008bcf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0008bd3:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c0008bd8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008bde:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0008be4:	83 e0 01             	and    eax,0x1
c0008be7:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0008beb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0008bef:	0f 85 cc 00 00 00    	jne    c0008cc1 <VAS::allocatePages(int, int)+0xf9>
c0008bf5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0008bf8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008bfc:	85 c0                	test   eax,eax
c0008bfe:	0f 84 a1 00 00 00    	je     c0008ca5 <VAS::allocatePages(int, int)+0xdd>
c0008c04:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0008c08:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008c0c:	c1 e6 0c             	shl    esi,0xc
c0008c0f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0008c13:	85 c0                	test   eax,eax
c0008c15:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0008c18:	7e 33                	jle    c0008c4d <VAS::allocatePages(int, int)+0x85>
c0008c1a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0008c1e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008c22:	81 cd 00 04 00 00    	or     ebp,0x400
c0008c28:	e8 e3 e0 ff ff       	call   c0006d10 <Phys::allocatePage()>
c0008c2d:	55                   	push   ebp
c0008c2e:	53                   	push   ebx
c0008c2f:	50                   	push   eax
c0008c30:	57                   	push   edi
c0008c31:	e8 8e fe ff ff       	call   c0008ac4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008c36:	83 c4 10             	add    esp,0x10
c0008c39:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008c3e:	74 03                	je     c0008c43 <VAS::allocatePages(int, int)+0x7b>
c0008c40:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008c43:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008c49:	39 de                	cmp    esi,ebx
c0008c4b:	75 db                	jne    c0008c28 <VAS::allocatePages(int, int)+0x60>
c0008c4d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008c52:	75 12                	jne    c0008c66 <VAS::allocatePages(int, int)+0x9e>
c0008c54:	0f 20 d8             	mov    eax,cr3
c0008c57:	0f 22 d8             	mov    cr3,eax
c0008c5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c5e:	83 c4 1c             	add    esp,0x1c
c0008c61:	5b                   	pop    ebx
c0008c62:	5e                   	pop    esi
c0008c63:	5f                   	pop    edi
c0008c64:	5d                   	pop    ebp
c0008c65:	c3                   	ret    
c0008c66:	c1 ee 0a             	shr    esi,0xa
c0008c69:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008c6d:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0008c73:	c1 eb 0a             	shr    ebx,0xa
c0008c76:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0008c7c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0008c82:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0008c88:	39 c3                	cmp    ebx,eax
c0008c8a:	77 ce                	ja     c0008c5a <VAS::allocatePages(int, int)+0x92>
c0008c8c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008c8f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008c95:	39 d8                	cmp    eax,ebx
c0008c97:	73 f3                	jae    c0008c8c <VAS::allocatePages(int, int)+0xc4>
c0008c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c9d:	83 c4 1c             	add    esp,0x1c
c0008ca0:	5b                   	pop    ebx
c0008ca1:	5e                   	pop    esi
c0008ca2:	5f                   	pop    edi
c0008ca3:	5d                   	pop    ebp
c0008ca4:	c3                   	ret    
c0008ca5:	83 ec 0c             	sub    esp,0xc
c0008ca8:	68 40 de 01 c0       	push   0xc001de40
c0008cad:	e8 f7 66 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c0008cb2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0008cb5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008cb9:	83 c4 10             	add    esp,0x10
c0008cbc:	e9 43 ff ff ff       	jmp    c0008c04 <VAS::allocatePages(int, int)+0x3c>
c0008cc1:	83 ec 0c             	sub    esp,0xc
c0008cc4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008cc8:	e8 a4 f7 ff ff       	call   c0008471 <Virt::allocateKernelVirtualPages(int)>
c0008ccd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008cd1:	83 c4 10             	add    esp,0x10
c0008cd4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0008cd9:	0f 87 9b 00 00 00    	ja     c0008d7a <VAS::allocatePages(int, int)+0x1b2>
c0008cdf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0008ce3:	85 d2                	test   edx,edx
c0008ce5:	7e 3c                	jle    c0008d23 <VAS::allocatePages(int, int)+0x15b>
c0008ce7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008ceb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0008cef:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008cf3:	c1 e5 0c             	shl    ebp,0xc
c0008cf6:	81 ce 00 04 00 00    	or     esi,0x400
c0008cfc:	01 dd                	add    ebp,ebx
c0008cfe:	e8 0d e0 ff ff       	call   c0006d10 <Phys::allocatePage()>
c0008d03:	56                   	push   esi
c0008d04:	53                   	push   ebx
c0008d05:	50                   	push   eax
c0008d06:	57                   	push   edi
c0008d07:	e8 b8 fd ff ff       	call   c0008ac4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d0c:	83 c4 10             	add    esp,0x10
c0008d0f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008d14:	74 03                	je     c0008d19 <VAS::allocatePages(int, int)+0x151>
c0008d16:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008d19:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008d1f:	39 dd                	cmp    ebp,ebx
c0008d21:	75 db                	jne    c0008cfe <VAS::allocatePages(int, int)+0x136>
c0008d23:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008d28:	0f 84 26 ff ff ff    	je     c0008c54 <VAS::allocatePages(int, int)+0x8c>
c0008d2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008d32:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008d36:	89 d3                	mov    ebx,edx
c0008d38:	c1 e0 0c             	shl    eax,0xc
c0008d3b:	c1 eb 0a             	shr    ebx,0xa
c0008d3e:	01 d0                	add    eax,edx
c0008d40:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0008d46:	c1 e8 0a             	shr    eax,0xa
c0008d49:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0008d4f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008d54:	2d 00 00 40 00       	sub    eax,0x400000
c0008d59:	39 c3                	cmp    ebx,eax
c0008d5b:	0f 87 f9 fe ff ff    	ja     c0008c5a <VAS::allocatePages(int, int)+0x92>
c0008d61:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008d64:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008d6a:	39 d8                	cmp    eax,ebx
c0008d6c:	73 f3                	jae    c0008d61 <VAS::allocatePages(int, int)+0x199>
c0008d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d72:	83 c4 1c             	add    esp,0x1c
c0008d75:	5b                   	pop    ebx
c0008d76:	5e                   	pop    esi
c0008d77:	5f                   	pop    edi
c0008d78:	5d                   	pop    ebp
c0008d79:	c3                   	ret    
c0008d7a:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c0008d7f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d85:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0008d8c:	0f 84 4d ff ff ff    	je     c0008cdf <VAS::allocatePages(int, int)+0x117>
c0008d92:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0008d9a:	e9 40 ff ff ff       	jmp    c0008cdf <VAS::allocatePages(int, int)+0x117>
c0008d9f:	90                   	nop

c0008da0 <VAS::setCPUSpecific(unsigned long)>:
c0008da0:	83 ec 0c             	sub    esp,0xc
c0008da3:	6a 05                	push   0x5
c0008da5:	68 00 00 40 c2       	push   0xc2400000
c0008daa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008dae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008db2:	e8 0d fd ff ff       	call   c0008ac4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008db7:	83 c4 1c             	add    esp,0x1c
c0008dba:	c3                   	ret    
c0008dbb:	90                   	nop

c0008dbc <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0008dbc:	55                   	push   ebp
c0008dbd:	57                   	push   edi
c0008dbe:	56                   	push   esi
c0008dbf:	53                   	push   ebx
c0008dc0:	83 ec 1c             	sub    esp,0x1c
c0008dc3:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c0008dc8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0008dcc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008dd2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008dd6:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0008ddc:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0008de0:	83 e0 01             	and    eax,0x1
c0008de3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0008de7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008deb:	85 c0                	test   eax,eax
c0008ded:	7e 39                	jle    c0008e28 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0008def:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008df3:	89 f3                	mov    ebx,esi
c0008df5:	c1 e0 0c             	shl    eax,0xc
c0008df8:	01 f0                	add    eax,esi
c0008dfa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008dfe:	55                   	push   ebp
c0008dff:	53                   	push   ebx
c0008e00:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008e04:	29 f0                	sub    eax,esi
c0008e06:	01 d8                	add    eax,ebx
c0008e08:	50                   	push   eax
c0008e09:	57                   	push   edi
c0008e0a:	e8 b5 fc ff ff       	call   c0008ac4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008e0f:	83 c4 10             	add    esp,0x10
c0008e12:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008e17:	74 03                	je     c0008e1c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0008e19:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008e1c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008e22:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0008e26:	75 d6                	jne    c0008dfe <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0008e28:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008e2d:	75 10                	jne    c0008e3f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0008e2f:	0f 20 d8             	mov    eax,cr3
c0008e32:	0f 22 d8             	mov    cr3,eax
c0008e35:	83 c4 1c             	add    esp,0x1c
c0008e38:	89 f0                	mov    eax,esi
c0008e3a:	5b                   	pop    ebx
c0008e3b:	5e                   	pop    esi
c0008e3c:	5f                   	pop    edi
c0008e3d:	5d                   	pop    ebp
c0008e3e:	c3                   	ret    
c0008e3f:	89 f3                	mov    ebx,esi
c0008e41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008e45:	c1 eb 0a             	shr    ebx,0xa
c0008e48:	c1 e0 0c             	shl    eax,0xc
c0008e4b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0008e51:	01 f0                	add    eax,esi
c0008e53:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0008e59:	c1 e8 0a             	shr    eax,0xa
c0008e5c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008e61:	2d 00 00 40 00       	sub    eax,0x400000
c0008e66:	39 c3                	cmp    ebx,eax
c0008e68:	77 cb                	ja     c0008e35 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0008e6a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008e6d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008e73:	39 d8                	cmp    eax,ebx
c0008e75:	73 f3                	jae    c0008e6a <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0008e77:	83 c4 1c             	add    esp,0x1c
c0008e7a:	89 f0                	mov    eax,esi
c0008e7c:	5b                   	pop    ebx
c0008e7d:	5e                   	pop    esi
c0008e7e:	5f                   	pop    edi
c0008e7f:	5d                   	pop    ebp
c0008e80:	c3                   	ret    
c0008e81:	90                   	nop

c0008e82 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0008e82:	55                   	push   ebp
c0008e83:	57                   	push   edi
c0008e84:	56                   	push   esi
c0008e85:	53                   	push   ebx
c0008e86:	83 ec 1c             	sub    esp,0x1c
c0008e89:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008e8d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0008e91:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0008e95:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0008e99:	a9 ff 0f 00 00       	test   eax,0xfff
c0008e9e:	75 4a                	jne    c0008eea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0008ea0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008ea4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0008ea7:	c1 eb 16             	shr    ebx,0x16
c0008eaa:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0008eb1:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0008eb5:	74 4d                	je     c0008f04 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0008eb7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008ebb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0008ebf:	c1 e8 0a             	shr    eax,0xa
c0008ec2:	80 fa 01             	cmp    dl,0x1
c0008ec5:	19 d2                	sbb    edx,edx
c0008ec7:	c1 e3 0c             	shl    ebx,0xc
c0008eca:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0008ece:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0008ed4:	25 fc 0f 00 00       	and    eax,0xffc
c0008ed9:	01 d8                	add    eax,ebx
c0008edb:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0008ee2:	83 c4 1c             	add    esp,0x1c
c0008ee5:	5b                   	pop    ebx
c0008ee6:	5e                   	pop    esi
c0008ee7:	5f                   	pop    edi
c0008ee8:	5d                   	pop    ebp
c0008ee9:	c3                   	ret    
c0008eea:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008eee:	83 ec 0c             	sub    esp,0xc
c0008ef1:	68 6c de 01 c0       	push   0xc001de6c
c0008ef6:	e8 ae 64 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c0008efb:	83 c4 10             	add    esp,0x10
c0008efe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008f02:	eb 9c                	jmp    c0008ea0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0008f04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f08:	e8 03 de ff ff       	call   c0006d10 <Phys::allocatePage()>
c0008f0d:	83 ec 0c             	sub    esp,0xc
c0008f10:	89 c5                	mov    ebp,eax
c0008f12:	8b 0d 54 04 02 c0    	mov    ecx,DWORD PTR ds:0xc0020454
c0008f18:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0008f1c:	6a 01                	push   0x1
c0008f1e:	e8 4e f5 ff ff       	call   c0008471 <Virt::allocateKernelVirtualPages(int)>
c0008f23:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0008f2a:	6a 01                	push   0x1
c0008f2c:	50                   	push   eax
c0008f2d:	55                   	push   ebp
c0008f2e:	81 cd 07 04 00 00    	or     ebp,0x407
c0008f34:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008f38:	51                   	push   ecx
c0008f39:	e8 7e fe ff ff       	call   c0008dbc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0008f3e:	83 c4 1c             	add    esp,0x1c
c0008f41:	68 00 10 00 00       	push   0x1000
c0008f46:	6a 00                	push   0x0
c0008f48:	50                   	push   eax
c0008f49:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f4d:	e8 56 75 ff ff       	call   c00004a8 <memset>
c0008f52:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0008f56:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0008f59:	e8 07 f8 ff ff       	call   c0008765 <Virt::freeKernelVirtualPages(unsigned long)>
c0008f5e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0008f61:	83 c4 10             	add    esp,0x10
c0008f64:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0008f67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008f6b:	e9 47 ff ff ff       	jmp    c0008eb7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0008f70 <VAS::VAS(bool)>:
c0008f70:	53                   	push   ebx
c0008f71:	83 ec 28             	sub    esp,0x28
c0008f74:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008f78:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008f7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008f80:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008f8b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0008f92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008f96:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0008f9a:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0008f9d:	e8 6e dd ff ff       	call   c0006d10 <Phys::allocatePage()>
c0008fa2:	89 c2                	mov    edx,eax
c0008fa4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008fa8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0008fab:	8b 1d 54 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020454
c0008fb1:	83 ec 0c             	sub    esp,0xc
c0008fb4:	6a 01                	push   0x1
c0008fb6:	e8 b6 f4 ff ff       	call   c0008471 <Virt::allocateKernelVirtualPages(int)>
c0008fbb:	83 c4 10             	add    esp,0x10
c0008fbe:	89 c2                	mov    edx,eax
c0008fc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008fc4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008fc7:	83 ec 0c             	sub    esp,0xc
c0008fca:	6a 03                	push   0x3
c0008fcc:	6a 01                	push   0x1
c0008fce:	52                   	push   edx
c0008fcf:	50                   	push   eax
c0008fd0:	53                   	push   ebx
c0008fd1:	e8 e6 fd ff ff       	call   c0008dbc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0008fd6:	83 c4 20             	add    esp,0x20
c0008fd9:	89 c2                	mov    edx,eax
c0008fdb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008fdf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008fe2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008fea:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0008ff2:	7f 1c                	jg     c0009010 <VAS::VAS(bool)+0xa0>
c0008ff4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008ff8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008ffb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008fff:	c1 e2 02             	shl    edx,0x2
c0009002:	01 d0                	add    eax,edx
c0009004:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000900a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000900e:	eb da                	jmp    c0008fea <VAS::VAS(bool)+0x7a>
c0009010:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009018:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009020:	7f 7a                	jg     c000909c <VAS::VAS(bool)+0x12c>
c0009022:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009026:	2d 00 02 00 00       	sub    eax,0x200
c000902b:	c1 e0 0c             	shl    eax,0xc
c000902e:	83 c8 03             	or     eax,0x3
c0009031:	89 c2                	mov    edx,eax
c0009033:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c0009038:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000903e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009044:	83 e0 10             	and    eax,0x10
c0009047:	84 c0                	test   al,al
c0009049:	74 07                	je     c0009052 <VAS::VAS(bool)+0xe2>
c000904b:	b8 00 01 00 00       	mov    eax,0x100
c0009050:	eb 05                	jmp    c0009057 <VAS::VAS(bool)+0xe7>
c0009052:	b8 00 00 00 00       	mov    eax,0x0
c0009057:	09 d0                	or     eax,edx
c0009059:	89 c1                	mov    ecx,eax
c000905b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000905f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009062:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009066:	c1 e2 02             	shl    edx,0x2
c0009069:	01 d0                	add    eax,edx
c000906b:	89 ca                	mov    edx,ecx
c000906d:	89 10                	mov    DWORD PTR [eax],edx
c000906f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009073:	2d 40 03 00 00       	sub    eax,0x340
c0009078:	83 f8 7f             	cmp    eax,0x7f
c000907b:	77 16                	ja     c0009093 <VAS::VAS(bool)+0x123>
c000907d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009081:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009084:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009088:	c1 e2 02             	shl    edx,0x2
c000908b:	01 d0                	add    eax,edx
c000908d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009093:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009097:	e9 7c ff ff ff       	jmp    c0009018 <VAS::VAS(bool)+0xa8>
c000909c:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c00090a1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a7:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c00090ad:	83 e0 10             	and    eax,0x10
c00090b0:	84 c0                	test   al,al
c00090b2:	74 07                	je     c00090bb <VAS::VAS(bool)+0x14b>
c00090b4:	b8 03 41 00 00       	mov    eax,0x4103
c00090b9:	eb 05                	jmp    c00090c0 <VAS::VAS(bool)+0x150>
c00090bb:	b8 03 40 00 00       	mov    eax,0x4003
c00090c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00090c4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00090c7:	81 c2 20 0c 00 00    	add    edx,0xc20
c00090cd:	89 02                	mov    DWORD PTR [edx],eax
c00090cf:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c00090d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090da:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00090e0:	83 ec 08             	sub    esp,0x8
c00090e3:	50                   	push   eax
c00090e4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00090e8:	e8 b3 fc ff ff       	call   c0008da0 <VAS::setCPUSpecific(unsigned long)>
c00090ed:	83 c4 10             	add    esp,0x10
c00090f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00090f4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00090f7:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c00090fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009102:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009108:	83 e0 10             	and    eax,0x10
c000910b:	84 c0                	test   al,al
c000910d:	74 07                	je     c0009116 <VAS::VAS(bool)+0x1a6>
c000910f:	b8 00 01 00 00       	mov    eax,0x100
c0009114:	eb 05                	jmp    c000911b <VAS::VAS(bool)+0x1ab>
c0009116:	b8 00 00 00 00       	mov    eax,0x0
c000911b:	09 c2                	or     edx,eax
c000911d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009121:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009124:	05 fc 0f 00 00       	add    eax,0xffc
c0009129:	83 ca 03             	or     edx,0x3
c000912c:	89 10                	mov    DWORD PTR [eax],edx
c000912e:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c0009133:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009139:	83 ec 0c             	sub    esp,0xc
c000913c:	50                   	push   eax
c000913d:	e8 48 1c 00 00       	call   c000ad8a <Device::getName()>
c0009142:	83 c4 10             	add    esp,0x10
c0009145:	83 ec 08             	sub    esp,0x8
c0009148:	68 0f df 01 c0       	push   0xc001df0f
c000914d:	50                   	push   eax
c000914e:	e8 9d 74 ff ff       	call   c00005f0 <strcmp>
c0009153:	83 c4 10             	add    esp,0x10
c0009156:	85 c0                	test   eax,eax
c0009158:	0f 94 c0             	sete   al
c000915b:	84 c0                	test   al,al
c000915d:	0f 84 87 00 00 00    	je     c00091ea <VAS::VAS(bool)+0x27a>
c0009163:	fa                   	cli    
c0009164:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0009169:	40                   	inc    eax
c000916a:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c000916f:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c0009174:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000917a:	05 7c 09 00 00       	add    eax,0x97c
c000917f:	83 ec 0c             	sub    esp,0xc
c0009182:	50                   	push   eax
c0009183:	e8 be d2 ff ff       	call   c0006446 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0009188:	83 c4 10             	add    esp,0x10
c000918b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009190:	89 c3                	mov    ebx,eax
c0009192:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c0009197:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000919d:	05 7c 09 00 00       	add    eax,0x97c
c00091a2:	83 ec 0c             	sub    esp,0xc
c00091a5:	50                   	push   eax
c00091a6:	e8 9b d2 ff ff       	call   c0006446 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00091ab:	83 c4 10             	add    esp,0x10
c00091ae:	83 ec 08             	sub    esp,0x8
c00091b1:	50                   	push   eax
c00091b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00091b6:	e8 8b f5 ff ff       	call   c0008746 <VAS::getPageTableEntry(unsigned long)>
c00091bb:	83 c4 10             	add    esp,0x10
c00091be:	8b 00                	mov    eax,DWORD PTR [eax]
c00091c0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00091c5:	6a 11                	push   0x11
c00091c7:	53                   	push   ebx
c00091c8:	50                   	push   eax
c00091c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00091cd:	e8 f2 f8 ff ff       	call   c0008ac4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00091d2:	83 c4 10             	add    esp,0x10
c00091d5:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00091da:	48                   	dec    eax
c00091db:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c00091e0:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00091e5:	85 c0                	test   eax,eax
c00091e7:	75 01                	jne    c00091ea <VAS::VAS(bool)+0x27a>
c00091e9:	fb                   	sti    
c00091ea:	90                   	nop
c00091eb:	83 c4 28             	add    esp,0x28
c00091ee:	5b                   	pop    ebx
c00091ef:	c3                   	ret    

c00091f0 <VAS::VAS()>:
c00091f0:	53                   	push   ebx
c00091f1:	83 ec 18             	sub    esp,0x18
c00091f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091f8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00091ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009203:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000920a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000920e:	a3 54 04 02 c0       	mov    ds:0xc0020454,eax
c0009213:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009217:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000921b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000921f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009222:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009226:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000922d:	c7 44 24 0c 14 00 00 00 	mov    DWORD PTR [esp+0xc],0x14
c0009235:	83 ec 0c             	sub    esp,0xc
c0009238:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000923c:	e8 08 d7 ff ff       	call   c0006949 <malloc>
c0009241:	83 c4 10             	add    esp,0x10
c0009244:	89 c3                	mov    ebx,eax
c0009246:	83 ec 08             	sub    esp,0x8
c0009249:	6a 01                	push   0x1
c000924b:	53                   	push   ebx
c000924c:	e8 1f fd ff ff       	call   c0008f70 <VAS::VAS(bool)>
c0009251:	83 c4 10             	add    esp,0x10
c0009254:	89 1d 4c 04 02 c0    	mov    DWORD PTR ds:0xc002044c,ebx
c000925a:	90                   	nop
c000925b:	83 c4 18             	add    esp,0x18
c000925e:	5b                   	pop    ebx
c000925f:	c3                   	ret    

c0009260 <VAS::evict(unsigned long)>:
c0009260:	55                   	push   ebp
c0009261:	57                   	push   edi
c0009262:	56                   	push   esi
c0009263:	53                   	push   ebx
c0009264:	83 ec 1c             	sub    esp,0x1c
c0009267:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000926b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000926f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009273:	e8 3a f3 ff ff       	call   c00085b2 <Virt::allocateSwapfilePage()>
c0009278:	89 c7                	mov    edi,eax
c000927a:	a1 0c fd 01 c0       	mov    eax,ds:0xc001fd0c
c000927f:	85 c0                	test   eax,eax
c0009281:	7e 3d                	jle    c00092c0 <VAS::evict(unsigned long)+0x60>
c0009283:	89 ee                	mov    esi,ebp
c0009285:	31 db                	xor    ebx,ebx
c0009287:	83 ec 0c             	sub    esp,0xc
c000928a:	57                   	push   edi
c000928b:	e8 10 f3 ff ff       	call   c00085a0 <Virt::swapIDToSector(unsigned long)>
c0009290:	89 34 24             	mov    DWORD PTR [esp],esi
c0009293:	01 d8                	add    eax,ebx
c0009295:	6a 01                	push   0x1
c0009297:	31 d2                	xor    edx,edx
c0009299:	43                   	inc    ebx
c000929a:	52                   	push   edx
c000929b:	81 c6 00 02 00 00    	add    esi,0x200
c00092a1:	50                   	push   eax
c00092a2:	0f be 05 18 fd 01 c0 	movsx  eax,BYTE PTR ds:0xc001fd18
c00092a9:	ff 34 85 dc 27 02 c0 	push   DWORD PTR [eax*4-0x3ffdd824]
c00092b0:	e8 2d 2b 00 00       	call   c000bde2 <LogicalDisk::write(unsigned long long, int, void*)>
c00092b5:	83 c4 20             	add    esp,0x20
c00092b8:	39 1d 0c fd 01 c0    	cmp    DWORD PTR ds:0xc001fd0c,ebx
c00092be:	7f c7                	jg     c0009287 <VAS::evict(unsigned long)+0x27>
c00092c0:	83 ec 08             	sub    esp,0x8
c00092c3:	c1 e7 0b             	shl    edi,0xb
c00092c6:	55                   	push   ebp
c00092c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00092cb:	e8 76 f4 ff ff       	call   c0008746 <VAS::getPageTableEntry(unsigned long)>
c00092d0:	8b 10                	mov    edx,DWORD PTR [eax]
c00092d2:	89 d1                	mov    ecx,edx
c00092d4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00092da:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00092e0:	09 cf                	or     edi,ecx
c00092e2:	89 38                	mov    DWORD PTR [eax],edi
c00092e4:	89 14 24             	mov    DWORD PTR [esp],edx
c00092e7:	ff 05 48 04 02 c0    	inc    DWORD PTR ds:0xc0020448
c00092ed:	e8 bc d9 ff ff       	call   c0006cae <Phys::freePage(unsigned long)>
c00092f2:	0f 20 d8             	mov    eax,cr3
c00092f5:	0f 22 d8             	mov    cr3,eax
c00092f8:	a1 44 04 02 c0       	mov    eax,ds:0xc0020444
c00092fd:	c7 44 24 40 1d df 01 c0 	mov    DWORD PTR [esp+0x40],0xc001df1d
c0009305:	8d 50 01             	lea    edx,[eax+0x1]
c0009308:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000930c:	89 15 44 04 02 c0    	mov    DWORD PTR ds:0xc0020444,edx
c0009312:	83 c4 2c             	add    esp,0x2c
c0009315:	5b                   	pop    ebx
c0009316:	5e                   	pop    esi
c0009317:	5f                   	pop    edi
c0009318:	5d                   	pop    ebp
c0009319:	e9 b5 03 00 00       	jmp    c00096d3 <Dbg::kprintf(char const*, ...)>

c000931e <VAS::tryLoadBackOffDisk(unsigned long)>:
c000931e:	55                   	push   ebp
c000931f:	57                   	push   edi
c0009320:	56                   	push   esi
c0009321:	53                   	push   ebx
c0009322:	83 ec 14             	sub    esp,0x14
c0009325:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009329:	53                   	push   ebx
c000932a:	68 2e df 01 c0       	push   0xc001df2e
c000932f:	e8 9f 03 00 00       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0009334:	83 c4 10             	add    esp,0x10
c0009337:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000933d:	74 20                	je     c000935f <VAS::tryLoadBackOffDisk(unsigned long)+0x41>
c000933f:	83 ec 08             	sub    esp,0x8
c0009342:	53                   	push   ebx
c0009343:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009347:	e8 fa f3 ff ff       	call   c0008746 <VAS::getPageTableEntry(unsigned long)>
c000934c:	83 c4 10             	add    esp,0x10
c000934f:	89 c6                	mov    esi,eax
c0009351:	85 c0                	test   eax,eax
c0009353:	74 0a                	je     c000935f <VAS::tryLoadBackOffDisk(unsigned long)+0x41>
c0009355:	8b 28                	mov    ebp,DWORD PTR [eax]
c0009357:	f7 c5 01 00 00 00    	test   ebp,0x1
c000935d:	74 0a                	je     c0009369 <VAS::tryLoadBackOffDisk(unsigned long)+0x4b>
c000935f:	31 c0                	xor    eax,eax
c0009361:	83 c4 0c             	add    esp,0xc
c0009364:	5b                   	pop    ebx
c0009365:	5e                   	pop    esi
c0009366:	5f                   	pop    edi
c0009367:	5d                   	pop    ebp
c0009368:	c3                   	ret    
c0009369:	e8 a2 d9 ff ff       	call   c0006d10 <Phys::allocatePage()>
c000936e:	c1 ed 0b             	shr    ebp,0xb
c0009371:	8b 16                	mov    edx,DWORD PTR [esi]
c0009373:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0009379:	09 c2                	or     edx,eax
c000937b:	81 ca 01 08 00 00    	or     edx,0x801
c0009381:	89 16                	mov    DWORD PTR [esi],edx
c0009383:	8b 0d 0c fd 01 c0    	mov    ecx,DWORD PTR ds:0xc001fd0c
c0009389:	85 c9                	test   ecx,ecx
c000938b:	7e 3d                	jle    c00093ca <VAS::tryLoadBackOffDisk(unsigned long)+0xac>
c000938d:	89 df                	mov    edi,ebx
c000938f:	31 f6                	xor    esi,esi
c0009391:	83 ec 0c             	sub    esp,0xc
c0009394:	55                   	push   ebp
c0009395:	e8 06 f2 ff ff       	call   c00085a0 <Virt::swapIDToSector(unsigned long)>
c000939a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000939d:	01 f0                	add    eax,esi
c000939f:	6a 01                	push   0x1
c00093a1:	31 d2                	xor    edx,edx
c00093a3:	46                   	inc    esi
c00093a4:	52                   	push   edx
c00093a5:	81 c7 00 02 00 00    	add    edi,0x200
c00093ab:	50                   	push   eax
c00093ac:	0f be 05 18 fd 01 c0 	movsx  eax,BYTE PTR ds:0xc001fd18
c00093b3:	ff 34 85 dc 27 02 c0 	push   DWORD PTR [eax*4-0x3ffdd824]
c00093ba:	e8 b7 29 00 00       	call   c000bd76 <LogicalDisk::read(unsigned long long, int, void*)>
c00093bf:	83 c4 20             	add    esp,0x20
c00093c2:	39 35 0c fd 01 c0    	cmp    DWORD PTR ds:0xc001fd0c,esi
c00093c8:	7f c7                	jg     c0009391 <VAS::tryLoadBackOffDisk(unsigned long)+0x73>
c00093ca:	a1 48 04 02 c0       	mov    eax,ds:0xc0020448
c00093cf:	48                   	dec    eax
c00093d0:	52                   	push   edx
c00093d1:	a3 48 04 02 c0       	mov    ds:0xc0020448,eax
c00093d6:	50                   	push   eax
c00093d7:	53                   	push   ebx
c00093d8:	68 41 df 01 c0       	push   0xc001df41
c00093dd:	e8 f1 02 00 00       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c00093e2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093e5:	e8 98 f1 ff ff       	call   c0008582 <Virt::freeSwapfilePage(unsigned long)>
c00093ea:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	48                   	dec    eax
c00093f3:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c00093f8:	85 c0                	test   eax,eax
c00093fa:	75 01                	jne    c00093fd <VAS::tryLoadBackOffDisk(unsigned long)+0xdf>
c00093fc:	fb                   	sti    
c00093fd:	0f 20 d8             	mov    eax,cr3
c0009400:	0f 22 d8             	mov    cr3,eax
c0009403:	b0 01                	mov    al,0x1
c0009405:	e9 57 ff ff ff       	jmp    c0009361 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>

c000940a <VAS::scanForEviction()>:
c000940a:	57                   	push   edi
c000940b:	31 ff                	xor    edi,edi
c000940d:	56                   	push   esi
c000940e:	53                   	push   ebx
c000940f:	83 ec 10             	sub    esp,0x10
c0009412:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009416:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0009419:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000941f:	75 0e                	jne    c000942f <VAS::scanForEviction()+0x25>
c0009421:	89 da                	mov    edx,ebx
c0009423:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009426:	c1 ea 16             	shr    edx,0x16
c0009429:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000942d:	74 4e                	je     c000947d <VAS::scanForEviction()+0x73>
c000942f:	53                   	push   ebx
c0009430:	56                   	push   esi
c0009431:	e8 10 f3 ff ff       	call   c0008746 <VAS::getPageTableEntry(unsigned long)>
c0009436:	5a                   	pop    edx
c0009437:	8b 10                	mov    edx,DWORD PTR [eax]
c0009439:	59                   	pop    ecx
c000943a:	89 d1                	mov    ecx,edx
c000943c:	81 e1 01 08 00 00    	and    ecx,0x801
c0009442:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0009448:	74 3e                	je     c0009488 <VAS::scanForEviction()+0x7e>
c000944a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009450:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0009456:	76 2b                	jbe    c0009483 <VAS::scanForEviction()+0x79>
c0009458:	47                   	inc    edi
c0009459:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0009460:	83 ff 03             	cmp    edi,0x3
c0009463:	74 32                	je     c0009497 <VAS::scanForEviction()+0x8d>
c0009465:	31 db                	xor    ebx,ebx
c0009467:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000946d:	75 c0                	jne    c000942f <VAS::scanForEviction()+0x25>
c000946f:	89 da                	mov    edx,ebx
c0009471:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009474:	c1 ea 16             	shr    edx,0x16
c0009477:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000947b:	75 b2                	jne    c000942f <VAS::scanForEviction()+0x25>
c000947d:	81 c3 00 00 40 00    	add    ebx,0x400000
c0009483:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0009486:	eb 91                	jmp    c0009419 <VAS::scanForEviction()+0xf>
c0009488:	f6 c2 20             	test   dl,0x20
c000948b:	74 13                	je     c00094a0 <VAS::scanForEviction()+0x96>
c000948d:	83 e2 df             	and    edx,0xffffffdf
c0009490:	89 10                	mov    DWORD PTR [eax],edx
c0009492:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0009495:	eb b3                	jmp    c000944a <VAS::scanForEviction()+0x40>
c0009497:	83 c4 10             	add    esp,0x10
c000949a:	31 c0                	xor    eax,eax
c000949c:	5b                   	pop    ebx
c000949d:	5e                   	pop    esi
c000949e:	5f                   	pop    edi
c000949f:	c3                   	ret    
c00094a0:	83 ec 08             	sub    esp,0x8
c00094a3:	89 d0                	mov    eax,edx
c00094a5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00094aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00094ae:	53                   	push   ebx
c00094af:	68 56 df 01 c0       	push   0xc001df56
c00094b4:	e8 1a 02 00 00       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c00094b9:	58                   	pop    eax
c00094ba:	5a                   	pop    edx
c00094bb:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00094be:	56                   	push   esi
c00094bf:	e8 9c fd ff ff       	call   c0009260 <VAS::evict(unsigned long)>
c00094c4:	59                   	pop    ecx
c00094c5:	5b                   	pop    ebx
c00094c6:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00094c9:	68 6a df 01 c0       	push   0xc001df6a
c00094ce:	e8 00 02 00 00       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c00094d3:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c00094da:	83 c4 10             	add    esp,0x10
c00094dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00094e1:	83 c4 10             	add    esp,0x10
c00094e4:	5b                   	pop    ebx
c00094e5:	5e                   	pop    esi
c00094e6:	5f                   	pop    edi
c00094e7:	c3                   	ret    

c00094e8 <mapVASFirstTime>:
c00094e8:	55                   	push   ebp
c00094e9:	57                   	push   edi
c00094ea:	56                   	push   esi
c00094eb:	53                   	push   ebx
c00094ec:	83 ec 0c             	sub    esp,0xc
c00094ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00094f4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00094f7:	4a                   	dec    edx
c00094f8:	0f 84 8c 00 00 00    	je     c000958a <mapVASFirstTime+0xa2>
c00094fe:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0009501:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0009504:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0009509:	c1 e5 15             	shl    ebp,0x15
c000950c:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0009511:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c0009517:	29 eb                	sub    ebx,ebp
c0009519:	29 ef                	sub    edi,ebp
c000951b:	e8 f0 d7 ff ff       	call   c0006d10 <Phys::allocatePage()>
c0009520:	83 ec 0c             	sub    esp,0xc
c0009523:	68 03 04 00 00       	push   0x403
c0009528:	6a 01                	push   0x1
c000952a:	53                   	push   ebx
c000952b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0009531:	50                   	push   eax
c0009532:	56                   	push   esi
c0009533:	e8 84 f8 ff ff       	call   c0008dbc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009538:	83 c4 20             	add    esp,0x20
c000953b:	39 fb                	cmp    ebx,edi
c000953d:	75 dc                	jne    c000951b <mapVASFirstTime+0x33>
c000953f:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0009544:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0009549:	29 eb                	sub    ebx,ebp
c000954b:	29 ef                	sub    edi,ebp
c000954d:	e8 be d7 ff ff       	call   c0006d10 <Phys::allocatePage()>
c0009552:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c0009556:	19 d2                	sbb    edx,edx
c0009558:	83 ec 0c             	sub    esp,0xc
c000955b:	83 e2 04             	and    edx,0x4
c000955e:	81 c2 03 04 00 00    	add    edx,0x403
c0009564:	52                   	push   edx
c0009565:	6a 01                	push   0x1
c0009567:	53                   	push   ebx
c0009568:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000956e:	50                   	push   eax
c000956f:	56                   	push   esi
c0009570:	e8 47 f8 ff ff       	call   c0008dbc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009575:	83 c4 20             	add    esp,0x20
c0009578:	39 df                	cmp    edi,ebx
c000957a:	75 d1                	jne    c000954d <mapVASFirstTime+0x65>
c000957c:	0f 20 d8             	mov    eax,cr3
c000957f:	0f 22 d8             	mov    cr3,eax
c0009582:	83 c4 0c             	add    esp,0xc
c0009585:	5b                   	pop    ebx
c0009586:	5e                   	pop    esi
c0009587:	5f                   	pop    edi
c0009588:	5d                   	pop    ebp
c0009589:	c3                   	ret    
c000958a:	83 ec 0c             	sub    esp,0xc
c000958d:	68 7d df 01 c0       	push   0xc001df7d
c0009592:	e8 3c 01 00 00       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0009597:	83 c4 10             	add    esp,0x10
c000959a:	83 c4 0c             	add    esp,0xc
c000959d:	5b                   	pop    ebx
c000959e:	5e                   	pop    esi
c000959f:	5f                   	pop    edi
c00095a0:	5d                   	pop    ebp
c00095a1:	c3                   	ret    

c00095a2 <__cxa_atexit>:
c00095a2:	31 c0                	xor    eax,eax
c00095a4:	c3                   	ret    

c00095a5 <__cxa_finalize>:
c00095a5:	c3                   	ret    

c00095a6 <__stack_chk_fail>:
c00095a6:	55                   	push   ebp
c00095a7:	89 e5                	mov    ebp,esp
c00095a9:	83 ec 10             	sub    esp,0x10
c00095ac:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00095af:	68 96 df 01 c0       	push   0xc001df96
c00095b4:	e8 1a 01 00 00       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c00095b9:	58                   	pop    eax
c00095ba:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00095bd:	5a                   	pop    edx
c00095be:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00095c1:	68 96 df 01 c0       	push   0xc001df96
c00095c6:	e8 08 01 00 00       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c00095cb:	c7 04 24 9e df 01 c0 	mov    DWORD PTR [esp],0xc001df9e
c00095d2:	e8 d2 5d 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c00095d7:	83 c4 10             	add    esp,0x10
c00095da:	c9                   	leave  
c00095db:	c3                   	ret    

c00095dc <__cxa_pure_virtual>:
c00095dc:	83 ec 18             	sub    esp,0x18
c00095df:	68 b6 df 01 c0       	push   0xc001dfb6
c00095e4:	e8 c0 5d 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c00095e9:	83 c4 1c             	add    esp,0x1c
c00095ec:	c3                   	ret    

c00095ed <operator new[](unsigned long)>:
c00095ed:	e9 57 d3 ff ff       	jmp    c0006949 <malloc>

c00095f2 <operator delete(void*, unsigned long)>:
c00095f2:	e9 72 d3 ff ff       	jmp    c0006969 <rfree>

c00095f7 <operator delete[](void*)>:
c00095f7:	e9 6d d3 ff ff       	jmp    c0006969 <rfree>

c00095fc <operator delete[](void*, unsigned long)>:
c00095fc:	e9 68 d3 ff ff       	jmp    c0006969 <rfree>

c0009601 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0009601:	55                   	push   ebp
c0009602:	b9 11 00 00 00       	mov    ecx,0x11
c0009607:	57                   	push   edi
c0009608:	56                   	push   esi
c0009609:	be ca db 01 c0       	mov    esi,0xc001dbca
c000960e:	53                   	push   ebx
c000960f:	83 ec 20             	sub    esp,0x20
c0009612:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009616:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000961a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000961e:	fc                   	cld    
c000961f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009621:	89 ee                	mov    esi,ebp
c0009623:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0009627:	eb 02                	jmp    c000962b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c0009629:	89 c6                	mov    esi,eax
c000962b:	31 d2                	xor    edx,edx
c000962d:	41                   	inc    ecx
c000962e:	89 f0                	mov    eax,esi
c0009630:	f7 f3                	div    ebx
c0009632:	39 de                	cmp    esi,ebx
c0009634:	73 f3                	jae    c0009629 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c0009636:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0009639:	eb 02                	jmp    c000963d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000963b:	89 c5                	mov    ebp,eax
c000963d:	31 d2                	xor    edx,edx
c000963f:	49                   	dec    ecx
c0009640:	89 e8                	mov    eax,ebp
c0009642:	f7 f3                	div    ebx
c0009644:	39 dd                	cmp    ebp,ebx
c0009646:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000964a:	88 11                	mov    BYTE PTR [ecx],dl
c000964c:	73 ed                	jae    c000963b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000964e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009652:	83 c4 20             	add    esp,0x20
c0009655:	5b                   	pop    ebx
c0009656:	5e                   	pop    esi
c0009657:	5f                   	pop    edi
c0009658:	5d                   	pop    ebp
c0009659:	c3                   	ret    

c000965a <Dbg::logc(char)>:
c000965a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000965e:	f6 05 80 03 02 c0 10 	test   BYTE PTR ds:0xc0020380,0x10
c0009665:	75 12                	jne    c0009679 <Dbg::logc(char)+0x1f>
c0009667:	ba fd 03 00 00       	mov    edx,0x3fd
c000966c:	ec                   	in     al,dx
c000966d:	a8 20                	test   al,0x20
c000966f:	74 fb                	je     c000966c <Dbg::logc(char)+0x12>
c0009671:	ba f8 03 00 00       	mov    edx,0x3f8
c0009676:	88 c8                	mov    al,cl
c0009678:	ee                   	out    dx,al
c0009679:	c3                   	ret    

c000967a <Dbg::logs(char*)>:
c000967a:	53                   	push   ebx
c000967b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000967f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0009682:	84 c0                	test   al,al
c0009684:	74 0f                	je     c0009695 <Dbg::logs(char*)+0x1b>
c0009686:	50                   	push   eax
c0009687:	43                   	inc    ebx
c0009688:	e8 cd ff ff ff       	call   c000965a <Dbg::logc(char)>
c000968d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0009690:	5a                   	pop    edx
c0009691:	84 c0                	test   al,al
c0009693:	75 f1                	jne    c0009686 <Dbg::logs(char*)+0xc>
c0009695:	5b                   	pop    ebx
c0009696:	c3                   	ret    

c0009697 <Dbg::logWriteInt(unsigned int)>:
c0009697:	83 ec 10             	sub    esp,0x10
c000969a:	6a 0a                	push   0xa
c000969c:	8d 44 24 08          	lea    eax,[esp+0x8]
c00096a0:	50                   	push   eax
c00096a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00096a5:	e8 57 ff ff ff       	call   c0009601 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00096aa:	50                   	push   eax
c00096ab:	e8 ca ff ff ff       	call   c000967a <Dbg::logs(char*)>
c00096b0:	83 c4 20             	add    esp,0x20
c00096b3:	c3                   	ret    

c00096b4 <Dbg::logWriteIntBase(unsigned int, int)>:
c00096b4:	83 ec 10             	sub    esp,0x10
c00096b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00096bb:	8d 44 24 08          	lea    eax,[esp+0x8]
c00096bf:	50                   	push   eax
c00096c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00096c4:	e8 38 ff ff ff       	call   c0009601 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00096c9:	50                   	push   eax
c00096ca:	e8 ab ff ff ff       	call   c000967a <Dbg::logs(char*)>
c00096cf:	83 c4 20             	add    esp,0x20
c00096d2:	c3                   	ret    

c00096d3 <Dbg::kprintf(char const*, ...)>:
c00096d3:	55                   	push   ebp
c00096d4:	57                   	push   edi
c00096d5:	56                   	push   esi
c00096d6:	53                   	push   ebx
c00096d7:	83 ec 0c             	sub    esp,0xc
c00096da:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00096de:	f6 05 80 03 02 c0 10 	test   BYTE PTR ds:0xc0020380,0x10
c00096e5:	74 08                	je     c00096ef <Dbg::kprintf(char const*, ...)+0x1c>
c00096e7:	83 c4 0c             	add    esp,0xc
c00096ea:	5b                   	pop    ebx
c00096eb:	5e                   	pop    esi
c00096ec:	5f                   	pop    edi
c00096ed:	5d                   	pop    ebp
c00096ee:	c3                   	ret    
c00096ef:	8d 44 24 24          	lea    eax,[esp+0x24]
c00096f3:	31 db                	xor    ebx,ebx
c00096f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00096f9:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00096fc:	84 c0                	test   al,al
c00096fe:	74 e7                	je     c00096e7 <Dbg::kprintf(char const*, ...)+0x14>
c0009700:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0009703:	3c 25                	cmp    al,0x25
c0009705:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0009708:	75 44                	jne    c000974e <Dbg::kprintf(char const*, ...)+0x7b>
c000970a:	83 c3 02             	add    ebx,0x2
c000970d:	8a 07                	mov    al,BYTE PTR [edi]
c000970f:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0009712:	83 e8 25             	sub    eax,0x25
c0009715:	3c 53                	cmp    al,0x53
c0009717:	0f 87 c9 00 00 00    	ja     c00097e6 <Dbg::kprintf(char const*, ...)+0x113>
c000971d:	0f b6 c0             	movzx  eax,al
c0009720:	ff 24 85 cc df 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2034]
c0009727:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000972b:	89 c8                	mov    eax,ecx
c000972d:	83 c1 04             	add    ecx,0x4
c0009730:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0009734:	ff 30                	push   DWORD PTR [eax]
c0009736:	e8 5c ff ff ff       	call   c0009697 <Dbg::logWriteInt(unsigned int)>
c000973b:	5f                   	pop    edi
c000973c:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0009740:	84 c0                	test   al,al
c0009742:	74 a3                	je     c00096e7 <Dbg::kprintf(char const*, ...)+0x14>
c0009744:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0009747:	3c 25                	cmp    al,0x25
c0009749:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000974c:	74 bc                	je     c000970a <Dbg::kprintf(char const*, ...)+0x37>
c000974e:	50                   	push   eax
c000974f:	89 eb                	mov    ebx,ebp
c0009751:	e8 04 ff ff ff       	call   c000965a <Dbg::logc(char)>
c0009756:	89 fd                	mov    ebp,edi
c0009758:	58                   	pop    eax
c0009759:	eb e1                	jmp    c000973c <Dbg::kprintf(char const*, ...)+0x69>
c000975b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000975f:	89 c8                	mov    eax,ecx
c0009761:	83 c1 04             	add    ecx,0x4
c0009764:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0009768:	ff 30                	push   DWORD PTR [eax]
c000976a:	e8 0b ff ff ff       	call   c000967a <Dbg::logs(char*)>
c000976f:	58                   	pop    eax
c0009770:	eb ca                	jmp    c000973c <Dbg::kprintf(char const*, ...)+0x69>
c0009772:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009776:	89 d0                	mov    eax,edx
c0009778:	83 c2 04             	add    edx,0x4
c000977b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000977f:	ff 30                	push   DWORD PTR [eax]
c0009781:	e8 11 ff ff ff       	call   c0009697 <Dbg::logWriteInt(unsigned int)>
c0009786:	58                   	pop    eax
c0009787:	eb b3                	jmp    c000973c <Dbg::kprintf(char const*, ...)+0x69>
c0009789:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000978d:	89 d0                	mov    eax,edx
c000978f:	83 c2 04             	add    edx,0x4
c0009792:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0009795:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009799:	50                   	push   eax
c000979a:	e8 bb fe ff ff       	call   c000965a <Dbg::logc(char)>
c000979f:	58                   	pop    eax
c00097a0:	eb 9a                	jmp    c000973c <Dbg::kprintf(char const*, ...)+0x69>
c00097a2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00097a6:	89 c8                	mov    eax,ecx
c00097a8:	83 c1 04             	add    ecx,0x4
c00097ab:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00097af:	6a 10                	push   0x10
c00097b1:	ff 30                	push   DWORD PTR [eax]
c00097b3:	e8 fc fe ff ff       	call   c00096b4 <Dbg::logWriteIntBase(unsigned int, int)>
c00097b8:	59                   	pop    ecx
c00097b9:	5f                   	pop    edi
c00097ba:	eb 80                	jmp    c000973c <Dbg::kprintf(char const*, ...)+0x69>
c00097bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097c0:	89 d0                	mov    eax,edx
c00097c2:	83 c2 08             	add    edx,0x8
c00097c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00097c9:	6a 10                	push   0x10
c00097cb:	ff 30                	push   DWORD PTR [eax]
c00097cd:	e8 e2 fe ff ff       	call   c00096b4 <Dbg::logWriteIntBase(unsigned int, int)>
c00097d2:	58                   	pop    eax
c00097d3:	5a                   	pop    edx
c00097d4:	e9 63 ff ff ff       	jmp    c000973c <Dbg::kprintf(char const*, ...)+0x69>
c00097d9:	6a 25                	push   0x25
c00097db:	e8 7a fe ff ff       	call   c000965a <Dbg::logc(char)>
c00097e0:	58                   	pop    eax
c00097e1:	e9 56 ff ff ff       	jmp    c000973c <Dbg::kprintf(char const*, ...)+0x69>
c00097e6:	6a 25                	push   0x25
c00097e8:	e8 6d fe ff ff       	call   c000965a <Dbg::logc(char)>
c00097ed:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00097f0:	50                   	push   eax
c00097f1:	e8 64 fe ff ff       	call   c000965a <Dbg::logc(char)>
c00097f6:	5a                   	pop    edx
c00097f7:	59                   	pop    ecx
c00097f8:	e9 3f ff ff ff       	jmp    c000973c <Dbg::kprintf(char const*, ...)+0x69>
c00097fd:	90                   	nop

c00097fe <File::read(unsigned long long, void*, int*)>:
c00097fe:	53                   	push   ebx
c00097ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009803:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009807:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000980e:	3c 19                	cmp    al,0x19
c0009810:	77 35                	ja     c0009847 <File::read(unsigned long long, void*, int*)+0x49>
c0009812:	8b 04 85 e0 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd720]
c0009819:	85 c0                	test   eax,eax
c000981b:	74 2a                	je     c0009847 <File::read(unsigned long long, void*, int*)+0x49>
c000981d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009823:	85 c0                	test   eax,eax
c0009825:	74 20                	je     c0009847 <File::read(unsigned long long, void*, int*)+0x49>
c0009827:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000982b:	74 21                	je     c000984e <File::read(unsigned long long, void*, int*)+0x50>
c000982d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000982f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009833:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0009839:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000983d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009841:	5b                   	pop    ebx
c0009842:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0009845:	ff e0                	jmp    eax
c0009847:	b8 0b 00 00 00       	mov    eax,0xb
c000984c:	eb 05                	jmp    c0009853 <File::read(unsigned long long, void*, int*)+0x55>
c000984e:	b8 05 00 00 00       	mov    eax,0x5
c0009853:	5b                   	pop    ebx
c0009854:	c3                   	ret    
c0009855:	90                   	nop

c0009856 <File::write(unsigned long long, void*, int*)>:
c0009856:	53                   	push   ebx
c0009857:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000985b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000985f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0009866:	3c 19                	cmp    al,0x19
c0009868:	77 35                	ja     c000989f <File::write(unsigned long long, void*, int*)+0x49>
c000986a:	8b 04 85 e0 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd720]
c0009871:	85 c0                	test   eax,eax
c0009873:	74 2a                	je     c000989f <File::write(unsigned long long, void*, int*)+0x49>
c0009875:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000987b:	85 c0                	test   eax,eax
c000987d:	74 20                	je     c000989f <File::write(unsigned long long, void*, int*)+0x49>
c000987f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009883:	74 21                	je     c00098a6 <File::write(unsigned long long, void*, int*)+0x50>
c0009885:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009887:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000988b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0009891:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009895:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009899:	5b                   	pop    ebx
c000989a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000989d:	ff e0                	jmp    eax
c000989f:	b8 0b 00 00 00       	mov    eax,0xb
c00098a4:	eb 05                	jmp    c00098ab <File::write(unsigned long long, void*, int*)+0x55>
c00098a6:	b8 05 00 00 00       	mov    eax,0x5
c00098ab:	5b                   	pop    ebx
c00098ac:	c3                   	ret    
c00098ad:	90                   	nop

c00098ae <Directory::read(unsigned long long, void*, int*)>:
c00098ae:	53                   	push   ebx
c00098af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00098b3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00098b7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00098be:	3c 19                	cmp    al,0x19
c00098c0:	77 35                	ja     c00098f7 <Directory::read(unsigned long long, void*, int*)+0x49>
c00098c2:	8b 04 85 e0 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd720]
c00098c9:	85 c0                	test   eax,eax
c00098cb:	74 2a                	je     c00098f7 <Directory::read(unsigned long long, void*, int*)+0x49>
c00098cd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00098d3:	85 c0                	test   eax,eax
c00098d5:	74 20                	je     c00098f7 <Directory::read(unsigned long long, void*, int*)+0x49>
c00098d7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00098db:	74 21                	je     c00098fe <Directory::read(unsigned long long, void*, int*)+0x50>
c00098dd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00098df:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00098e3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00098e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098f1:	5b                   	pop    ebx
c00098f2:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00098f5:	ff e0                	jmp    eax
c00098f7:	b8 0b 00 00 00       	mov    eax,0xb
c00098fc:	eb 05                	jmp    c0009903 <Directory::read(unsigned long long, void*, int*)+0x55>
c00098fe:	b8 05 00 00 00       	mov    eax,0x5
c0009903:	5b                   	pop    ebx
c0009904:	c3                   	ret    
c0009905:	90                   	nop

c0009906 <Directory::write(unsigned long long, void*, int*)>:
c0009906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000990a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0009911:	b8 0b 00 00 00       	mov    eax,0xb
c0009916:	80 fa 19             	cmp    dl,0x19
c0009919:	77 18                	ja     c0009933 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000991b:	8b 14 95 e0 28 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd720]
c0009922:	85 d2                	test   edx,edx
c0009924:	74 0d                	je     c0009933 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0009926:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000992d:	19 c0                	sbb    eax,eax
c000992f:	83 e0 0a             	and    eax,0xa
c0009932:	40                   	inc    eax
c0009933:	c3                   	ret    

c0009934 <File::isAtty()>:
c0009934:	31 c0                	xor    eax,eax
c0009936:	c3                   	ret    
c0009937:	90                   	nop

c0009938 <Directory::isAtty()>:
c0009938:	31 c0                	xor    eax,eax
c000993a:	c3                   	ret    
c000993b:	90                   	nop

c000993c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000993c:	b8 0a 00 00 00       	mov    eax,0xa
c0009941:	c3                   	ret    

c0009942 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0009942:	b8 0a 00 00 00       	mov    eax,0xa
c0009947:	c3                   	ret    

c0009948 <Filesystem::allocateSwapfile(char const*, int)>:
c0009948:	31 c0                	xor    eax,eax
c000994a:	31 d2                	xor    edx,edx
c000994c:	c3                   	ret    
c000994d:	90                   	nop

c000994e <File::~File()>:
c000994e:	83 ec 0c             	sub    esp,0xc
c0009951:	ba 8c e1 01 c0       	mov    edx,0xc001e18c
c0009956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000995a:	89 10                	mov    DWORD PTR [eax],edx
c000995c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009960:	83 ec 0c             	sub    esp,0xc
c0009963:	50                   	push   eax
c0009964:	e8 a7 e8 ff ff       	call   c0008210 <UnixFile::~UnixFile()>
c0009969:	83 c4 10             	add    esp,0x10
c000996c:	90                   	nop
c000996d:	83 c4 0c             	add    esp,0xc
c0009970:	c3                   	ret    
c0009971:	90                   	nop

c0009972 <File::~File()>:
c0009972:	83 ec 0c             	sub    esp,0xc
c0009975:	83 ec 0c             	sub    esp,0xc
c0009978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000997c:	e8 cd ff ff ff       	call   c000994e <File::~File()>
c0009981:	83 c4 10             	add    esp,0x10
c0009984:	83 ec 08             	sub    esp,0x8
c0009987:	68 14 01 00 00       	push   0x114
c000998c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009990:	e8 5d fc ff ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	83 c4 0c             	add    esp,0xc
c000999b:	c3                   	ret    

c000999c <Directory::~Directory()>:
c000999c:	83 ec 0c             	sub    esp,0xc
c000999f:	ba a8 e1 01 c0       	mov    edx,0xc001e1a8
c00099a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099a8:	89 10                	mov    DWORD PTR [eax],edx
c00099aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099ae:	83 ec 0c             	sub    esp,0xc
c00099b1:	50                   	push   eax
c00099b2:	e8 59 e8 ff ff       	call   c0008210 <UnixFile::~UnixFile()>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	90                   	nop
c00099bb:	83 c4 0c             	add    esp,0xc
c00099be:	c3                   	ret    
c00099bf:	90                   	nop

c00099c0 <Directory::~Directory()>:
c00099c0:	83 ec 0c             	sub    esp,0xc
c00099c3:	83 ec 0c             	sub    esp,0xc
c00099c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ca:	e8 cd ff ff ff       	call   c000999c <Directory::~Directory()>
c00099cf:	83 c4 10             	add    esp,0x10
c00099d2:	83 ec 08             	sub    esp,0x8
c00099d5:	68 14 01 00 00       	push   0x114
c00099da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099de:	e8 0f fc ff ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c00099e3:	83 c4 10             	add    esp,0x10
c00099e6:	83 c4 0c             	add    esp,0xc
c00099e9:	c3                   	ret    

c00099ea <Filesystem::Filesystem()>:
c00099ea:	ba 24 e1 01 c0       	mov    edx,0xc001e124
c00099ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00099f3:	89 10                	mov    DWORD PTR [eax],edx
c00099f5:	8b 15 58 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020458
c00099fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00099ff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009a02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a06:	a3 58 04 02 c0       	mov    ds:0xc0020458,eax
c0009a0b:	90                   	nop
c0009a0c:	c3                   	ret    
c0009a0d:	90                   	nop

c0009a0e <Filesystem::~Filesystem()>:
c0009a0e:	ba 24 e1 01 c0       	mov    edx,0xc001e124
c0009a13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a17:	89 10                	mov    DWORD PTR [eax],edx
c0009a19:	90                   	nop
c0009a1a:	c3                   	ret    
c0009a1b:	90                   	nop

c0009a1c <Filesystem::~Filesystem()>:
c0009a1c:	83 ec 0c             	sub    esp,0xc
c0009a1f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009a23:	e8 e6 ff ff ff       	call   c0009a0e <Filesystem::~Filesystem()>
c0009a28:	83 c4 04             	add    esp,0x4
c0009a2b:	83 ec 08             	sub    esp,0x8
c0009a2e:	6a 08                	push   0x8
c0009a30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a34:	e8 b9 fb ff ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c0009a39:	83 c4 10             	add    esp,0x10
c0009a3c:	83 c4 0c             	add    esp,0xc
c0009a3f:	c3                   	ret    

c0009a40 <Fs::getcwd(Process*, char*, int)>:
c0009a40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a44:	31 c0                	xor    eax,eax
c0009a46:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0009a49:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0009a4d:	7d 15                	jge    c0009a64 <Fs::getcwd(Process*, char*, int)+0x24>
c0009a4f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009a53:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0009a5a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0009a5d:	84 c9                	test   cl,cl
c0009a5f:	74 06                	je     c0009a67 <Fs::getcwd(Process*, char*, int)+0x27>
c0009a61:	40                   	inc    eax
c0009a62:	eb e2                	jmp    c0009a46 <Fs::getcwd(Process*, char*, int)+0x6>
c0009a64:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0009a67:	31 c0                	xor    eax,eax
c0009a69:	c3                   	ret    

c0009a6a <Fs::initVFS()>:
c0009a6a:	83 ec 18             	sub    esp,0x18
c0009a6d:	6a 08                	push   0x8
c0009a6f:	e8 d5 ce ff ff       	call   c0006949 <malloc>
c0009a74:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a77:	e8 e0 d4 00 00       	call   c0016f5c <FAT::FAT()>
c0009a7c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009a83:	e8 c1 ce ff ff       	call   c0006949 <malloc>
c0009a88:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a8b:	e8 60 e7 00 00       	call   c00181f0 <ISO9660::ISO9660()>
c0009a90:	83 c4 1c             	add    esp,0x1c
c0009a93:	c3                   	ret    

c0009a94 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0009a94:	55                   	push   ebp
c0009a95:	57                   	push   edi
c0009a96:	56                   	push   esi
c0009a97:	53                   	push   ebx
c0009a98:	81 ec 10 04 00 00    	sub    esp,0x410
c0009a9e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0009aa5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0009aac:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0009ab3:	68 00 04 00 00       	push   0x400
c0009ab8:	6a 00                	push   0x0
c0009aba:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0009abe:	56                   	push   esi
c0009abf:	e8 e4 69 ff ff       	call   c00004a8 <memset>
c0009ac4:	83 c4 10             	add    esp,0x10
c0009ac7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0009acb:	75 0b                	jne    c0009ad8 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0009acd:	50                   	push   eax
c0009ace:	50                   	push   eax
c0009acf:	57                   	push   edi
c0009ad0:	56                   	push   esi
c0009ad1:	e8 8e 6a ff ff       	call   c0000564 <strcpy>
c0009ad6:	eb 41                	jmp    c0009b19 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0009ad8:	8a 07                	mov    al,BYTE PTR [edi]
c0009ada:	3c 5c                	cmp    al,0x5c
c0009adc:	74 04                	je     c0009ae2 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0009ade:	3c 2f                	cmp    al,0x2f
c0009ae0:	75 18                	jne    c0009afa <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0009ae2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0009ae5:	3c 60                	cmp    al,0x60
c0009ae7:	7e 03                	jle    c0009aec <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0009ae9:	83 e8 20             	sub    eax,0x20
c0009aec:	88 04 24             	mov    BYTE PTR [esp],al
c0009aef:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0009af6:	50                   	push   eax
c0009af7:	50                   	push   eax
c0009af8:	eb 18                	jmp    c0009b12 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0009afa:	50                   	push   eax
c0009afb:	50                   	push   eax
c0009afc:	55                   	push   ebp
c0009afd:	56                   	push   esi
c0009afe:	e8 61 6a ff ff       	call   c0000564 <strcpy>
c0009b03:	5a                   	pop    edx
c0009b04:	59                   	pop    ecx
c0009b05:	68 43 ef 01 c0       	push   0xc001ef43
c0009b0a:	56                   	push   esi
c0009b0b:	e8 94 6b ff ff       	call   c00006a4 <strcat>
c0009b10:	5d                   	pop    ebp
c0009b11:	58                   	pop    eax
c0009b12:	57                   	push   edi
c0009b13:	56                   	push   esi
c0009b14:	e8 8b 6b ff ff       	call   c00006a4 <strcat>
c0009b19:	83 c4 10             	add    esp,0x10
c0009b1c:	8a 04 24             	mov    al,BYTE PTR [esp]
c0009b1f:	3c 60                	cmp    al,0x60
c0009b21:	7e 03                	jle    c0009b26 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0009b23:	83 e8 20             	sub    eax,0x20
c0009b26:	88 04 24             	mov    BYTE PTR [esp],al
c0009b29:	88 03                	mov    BYTE PTR [ebx],al
c0009b2b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0009b32:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0009b38:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0009b3c:	bf 03 00 00 00       	mov    edi,0x3
c0009b41:	b8 03 00 00 00       	mov    eax,0x3
c0009b46:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0009b49:	84 d2                	test   dl,dl
c0009b4b:	0f 84 91 00 00 00    	je     c0009be2 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0009b51:	8d 4f 01             	lea    ecx,[edi+0x1]
c0009b54:	80 fa 5c             	cmp    dl,0x5c
c0009b57:	74 05                	je     c0009b5e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0009b59:	80 fa 2f             	cmp    dl,0x2f
c0009b5c:	75 12                	jne    c0009b70 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0009b5e:	89 c5                	mov    ebp,eax
c0009b60:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0009b65:	74 09                	je     c0009b70 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0009b67:	40                   	inc    eax
c0009b68:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0009b6c:	89 cf                	mov    edi,ecx
c0009b6e:	eb d6                	jmp    c0009b46 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0009b70:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0009b75:	75 5b                	jne    c0009bd2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0009b77:	80 fa 2e             	cmp    dl,0x2e
c0009b7a:	75 56                	jne    c0009bd2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0009b7c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0009b80:	74 19                	je     c0009b9b <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0009b82:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0009b87:	74 53                	je     c0009bdc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0009b89:	89 f9                	mov    ecx,edi
c0009b8b:	41                   	inc    ecx
c0009b8c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0009b8f:	80 fa 2f             	cmp    dl,0x2f
c0009b92:	74 f7                	je     c0009b8b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0009b94:	80 fa 5c             	cmp    dl,0x5c
c0009b97:	74 f2                	je     c0009b8b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0009b99:	eb d1                	jmp    c0009b6c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009b9b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0009ba0:	74 3a                	je     c0009bdc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0009ba2:	83 f8 03             	cmp    eax,0x3
c0009ba5:	74 c5                	je     c0009b6c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009ba7:	41                   	inc    ecx
c0009ba8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0009bab:	80 fa 2f             	cmp    dl,0x2f
c0009bae:	74 f7                	je     c0009ba7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0009bb0:	80 fa 5c             	cmp    dl,0x5c
c0009bb3:	74 f2                	je     c0009ba7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0009bb5:	48                   	dec    eax
c0009bb6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0009bba:	75 06                	jne    c0009bc2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0009bbc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009bc0:	eb f3                	jmp    c0009bb5 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0009bc2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0009bc6:	74 07                	je     c0009bcf <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0009bc8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009bcc:	48                   	dec    eax
c0009bcd:	eb f3                	jmp    c0009bc2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0009bcf:	40                   	inc    eax
c0009bd0:	eb 9a                	jmp    c0009b6c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009bd2:	80 fa 2f             	cmp    dl,0x2f
c0009bd5:	74 95                	je     c0009b6c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009bd7:	80 fa 5c             	cmp    dl,0x5c
c0009bda:	74 90                	je     c0009b6c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009bdc:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0009bdf:	40                   	inc    eax
c0009be0:	eb 8a                	jmp    c0009b6c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009be2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009be6:	83 ec 0c             	sub    esp,0xc
c0009be9:	53                   	push   ebx
c0009bea:	e8 d5 68 ff ff       	call   c00004c4 <strlen>
c0009bef:	83 c4 10             	add    esp,0x10
c0009bf2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0009bf7:	75 26                	jne    c0009c1f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0009bf9:	83 ec 0c             	sub    esp,0xc
c0009bfc:	53                   	push   ebx
c0009bfd:	e8 c2 68 ff ff       	call   c00004c4 <strlen>
c0009c02:	83 c4 10             	add    esp,0x10
c0009c05:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0009c0a:	74 26                	je     c0009c32 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0009c0c:	83 ec 0c             	sub    esp,0xc
c0009c0f:	53                   	push   ebx
c0009c10:	e8 af 68 ff ff       	call   c00004c4 <strlen>
c0009c15:	83 c4 10             	add    esp,0x10
c0009c18:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0009c1d:	eb c7                	jmp    c0009be6 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0009c1f:	83 ec 0c             	sub    esp,0xc
c0009c22:	53                   	push   ebx
c0009c23:	e8 9c 68 ff ff       	call   c00004c4 <strlen>
c0009c28:	83 c4 10             	add    esp,0x10
c0009c2b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0009c30:	74 c7                	je     c0009bf9 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0009c32:	81 c4 0c 04 00 00    	add    esp,0x40c
c0009c38:	5b                   	pop    ebx
c0009c39:	5e                   	pop    esi
c0009c3a:	5f                   	pop    edi
c0009c3b:	5d                   	pop    ebp
c0009c3c:	c3                   	ret    
c0009c3d:	90                   	nop

c0009c3e <File::File(char const*, Process*)>:
c0009c3e:	83 ec 0c             	sub    esp,0xc
c0009c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c45:	83 ec 08             	sub    esp,0x8
c0009c48:	6a 00                	push   0x0
c0009c4a:	50                   	push   eax
c0009c4b:	e8 de e3 ff ff       	call   c000802e <UnixFile::UnixFile(int)>
c0009c50:	83 c4 10             	add    esp,0x10
c0009c53:	ba 8c e1 01 c0       	mov    edx,0xc001e18c
c0009c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c5c:	89 10                	mov    DWORD PTR [eax],edx
c0009c5e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c62:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0009c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c6c:	83 c0 0d             	add    eax,0xd
c0009c6f:	83 ec 04             	sub    esp,0x4
c0009c72:	52                   	push   edx
c0009c73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c77:	50                   	push   eax
c0009c78:	e8 17 fe ff ff       	call   c0009a94 <Fs::standardiseFiles(char*, char const*, char const*)>
c0009c7d:	83 c4 10             	add    esp,0x10
c0009c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c84:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0009c87:	8d 50 bf             	lea    edx,[eax-0x41]
c0009c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0009c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c98:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0009c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ca0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009ca6:	0f b6 c0             	movzx  eax,al
c0009ca9:	8b 04 85 e0 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd720]
c0009cb0:	85 c0                	test   eax,eax
c0009cb2:	74 3e                	je     c0009cf2 <File::File(char const*, Process*)+0xb4>
c0009cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009cbe:	0f b6 c0             	movzx  eax,al
c0009cc1:	8b 04 85 e0 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd720]
c0009cc8:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009cce:	85 c0                	test   eax,eax
c0009cd0:	75 20                	jne    c0009cf2 <File::File(char const*, Process*)+0xb4>
c0009cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cd6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009cdc:	0f b6 c0             	movzx  eax,al
c0009cdf:	8b 04 85 e0 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd720]
c0009ce6:	83 ec 0c             	sub    esp,0xc
c0009ce9:	50                   	push   eax
c0009cea:	e8 c5 1f 00 00       	call   c000bcb4 <LogicalDisk::mount()>
c0009cef:	83 c4 10             	add    esp,0x10
c0009cf2:	90                   	nop
c0009cf3:	83 c4 0c             	add    esp,0xc
c0009cf6:	c3                   	ret    
c0009cf7:	90                   	nop

c0009cf8 <File::open(FileOpenMode)>:
c0009cf8:	53                   	push   ebx
c0009cf9:	b8 0b 00 00 00       	mov    eax,0xb
c0009cfe:	83 ec 08             	sub    esp,0x8
c0009d01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009d05:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0009d0c:	80 fa 19             	cmp    dl,0x19
c0009d0f:	77 40                	ja     c0009d51 <File::open(FileOpenMode)+0x59>
c0009d11:	8b 14 95 e0 28 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd720]
c0009d18:	85 d2                	test   edx,edx
c0009d1a:	74 35                	je     c0009d51 <File::open(FileOpenMode)+0x59>
c0009d1c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0009d22:	85 d2                	test   edx,edx
c0009d24:	74 2b                	je     c0009d51 <File::open(FileOpenMode)+0x59>
c0009d26:	b8 06 00 00 00       	mov    eax,0x6
c0009d2b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0009d2f:	75 20                	jne    c0009d51 <File::open(FileOpenMode)+0x59>
c0009d31:	8b 02                	mov    eax,DWORD PTR [edx]
c0009d33:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0009d39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d3d:	51                   	push   ecx
c0009d3e:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0009d41:	51                   	push   ecx
c0009d42:	52                   	push   edx
c0009d43:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009d46:	83 c4 10             	add    esp,0x10
c0009d49:	85 c0                	test   eax,eax
c0009d4b:	75 04                	jne    c0009d51 <File::open(FileOpenMode)+0x59>
c0009d4d:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0009d51:	83 c4 08             	add    esp,0x8
c0009d54:	5b                   	pop    ebx
c0009d55:	c3                   	ret    

c0009d56 <File::close()>:
c0009d56:	53                   	push   ebx
c0009d57:	b8 0b 00 00 00       	mov    eax,0xb
c0009d5c:	83 ec 08             	sub    esp,0x8
c0009d5f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009d63:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0009d6a:	80 fa 19             	cmp    dl,0x19
c0009d6d:	77 41                	ja     c0009db0 <File::close()+0x5a>
c0009d6f:	8b 1c 95 e0 28 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd720]
c0009d76:	85 db                	test   ebx,ebx
c0009d78:	74 36                	je     c0009db0 <File::close()+0x5a>
c0009d7a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0009d81:	74 2d                	je     c0009db0 <File::close()+0x5a>
c0009d83:	b8 05 00 00 00       	mov    eax,0x5
c0009d88:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0009d8c:	74 22                	je     c0009db0 <File::close()+0x5a>
c0009d8e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0009d92:	8b 04 95 e0 28 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd720]
c0009d99:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009d9f:	53                   	push   ebx
c0009da0:	53                   	push   ebx
c0009da1:	8b 10                	mov    edx,DWORD PTR [eax]
c0009da3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0009da9:	50                   	push   eax
c0009daa:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0009dad:	83 c4 10             	add    esp,0x10
c0009db0:	83 c4 08             	add    esp,0x8
c0009db3:	5b                   	pop    ebx
c0009db4:	c3                   	ret    
c0009db5:	90                   	nop

c0009db6 <File::seek(unsigned long long)>:
c0009db6:	56                   	push   esi
c0009db7:	53                   	push   ebx
c0009db8:	b8 0b 00 00 00       	mov    eax,0xb
c0009dbd:	51                   	push   ecx
c0009dbe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009dc2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009dc6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0009dcd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009dd1:	80 fa 19             	cmp    dl,0x19
c0009dd4:	77 31                	ja     c0009e07 <File::seek(unsigned long long)+0x51>
c0009dd6:	8b 14 95 e0 28 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd720]
c0009ddd:	85 d2                	test   edx,edx
c0009ddf:	74 26                	je     c0009e07 <File::seek(unsigned long long)+0x51>
c0009de1:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0009de7:	85 d2                	test   edx,edx
c0009de9:	74 1c                	je     c0009e07 <File::seek(unsigned long long)+0x51>
c0009deb:	b8 05 00 00 00       	mov    eax,0x5
c0009df0:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0009df4:	74 11                	je     c0009e07 <File::seek(unsigned long long)+0x51>
c0009df6:	8b 02                	mov    eax,DWORD PTR [edx]
c0009df8:	53                   	push   ebx
c0009df9:	51                   	push   ecx
c0009dfa:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0009e00:	52                   	push   edx
c0009e01:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0009e04:	83 c4 10             	add    esp,0x10
c0009e07:	5a                   	pop    edx
c0009e08:	5b                   	pop    ebx
c0009e09:	5e                   	pop    esi
c0009e0a:	c3                   	ret    
c0009e0b:	90                   	nop

c0009e0c <File::tell(unsigned long long*)>:
c0009e0c:	83 ec 0c             	sub    esp,0xc
c0009e0f:	b8 0b 00 00 00       	mov    eax,0xb
c0009e14:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009e18:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0009e1f:	80 fa 19             	cmp    dl,0x19
c0009e22:	77 34                	ja     c0009e58 <File::tell(unsigned long long*)+0x4c>
c0009e24:	8b 14 95 e0 28 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd720]
c0009e2b:	85 d2                	test   edx,edx
c0009e2d:	74 29                	je     c0009e58 <File::tell(unsigned long long*)+0x4c>
c0009e2f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0009e35:	85 d2                	test   edx,edx
c0009e37:	74 1f                	je     c0009e58 <File::tell(unsigned long long*)+0x4c>
c0009e39:	b8 05 00 00 00       	mov    eax,0x5
c0009e3e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0009e42:	74 14                	je     c0009e58 <File::tell(unsigned long long*)+0x4c>
c0009e44:	50                   	push   eax
c0009e45:	8b 02                	mov    eax,DWORD PTR [edx]
c0009e47:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009e4b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0009e51:	52                   	push   edx
c0009e52:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0009e55:	83 c4 10             	add    esp,0x10
c0009e58:	83 c4 0c             	add    esp,0xc
c0009e5b:	c3                   	ret    

c0009e5c <File::rewind()>:
c0009e5c:	83 ec 10             	sub    esp,0x10
c0009e5f:	6a 00                	push   0x0
c0009e61:	6a 00                	push   0x0
c0009e63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e67:	e8 4a ff ff ff       	call   c0009db6 <File::seek(unsigned long long)>
c0009e6c:	83 c4 1c             	add    esp,0x1c
c0009e6f:	c3                   	ret    

c0009e70 <File::unlink()>:
c0009e70:	83 ec 0c             	sub    esp,0xc
c0009e73:	b8 0b 00 00 00       	mov    eax,0xb
c0009e78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009e7c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0009e83:	80 f9 19             	cmp    cl,0x19
c0009e86:	77 2f                	ja     c0009eb7 <File::unlink()+0x47>
c0009e88:	8b 0c 8d e0 28 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd720]
c0009e8f:	85 c9                	test   ecx,ecx
c0009e91:	74 24                	je     c0009eb7 <File::unlink()+0x47>
c0009e93:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0009e99:	85 c9                	test   ecx,ecx
c0009e9b:	74 1a                	je     c0009eb7 <File::unlink()+0x47>
c0009e9d:	b8 06 00 00 00       	mov    eax,0x6
c0009ea2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009ea6:	75 0f                	jne    c0009eb7 <File::unlink()+0x47>
c0009ea8:	83 c2 0d             	add    edx,0xd
c0009eab:	50                   	push   eax
c0009eac:	50                   	push   eax
c0009ead:	8b 01                	mov    eax,DWORD PTR [ecx]
c0009eaf:	52                   	push   edx
c0009eb0:	51                   	push   ecx
c0009eb1:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0009eb4:	83 c4 10             	add    esp,0x10
c0009eb7:	83 c4 0c             	add    esp,0xc
c0009eba:	c3                   	ret    
c0009ebb:	90                   	nop

c0009ebc <File::rename(char const*)>:
c0009ebc:	83 ec 0c             	sub    esp,0xc
c0009ebf:	b8 0b 00 00 00       	mov    eax,0xb
c0009ec4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009ec8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0009ecf:	80 f9 19             	cmp    cl,0x19
c0009ed2:	77 32                	ja     c0009f06 <File::rename(char const*)+0x4a>
c0009ed4:	8b 0c 8d e0 28 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd720]
c0009edb:	85 c9                	test   ecx,ecx
c0009edd:	74 27                	je     c0009f06 <File::rename(char const*)+0x4a>
c0009edf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0009ee5:	85 c9                	test   ecx,ecx
c0009ee7:	74 1d                	je     c0009f06 <File::rename(char const*)+0x4a>
c0009ee9:	b8 06 00 00 00       	mov    eax,0x6
c0009eee:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009ef2:	75 12                	jne    c0009f06 <File::rename(char const*)+0x4a>
c0009ef4:	83 c2 0d             	add    edx,0xd
c0009ef7:	50                   	push   eax
c0009ef8:	8b 01                	mov    eax,DWORD PTR [ecx]
c0009efa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009efe:	52                   	push   edx
c0009eff:	51                   	push   ecx
c0009f00:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0009f03:	83 c4 10             	add    esp,0x10
c0009f06:	83 c4 0c             	add    esp,0xc
c0009f09:	c3                   	ret    

c0009f0a <File::chfatattr(unsigned char, unsigned char)>:
c0009f0a:	57                   	push   edi
c0009f0b:	b8 0b 00 00 00       	mov    eax,0xb
c0009f10:	56                   	push   esi
c0009f11:	53                   	push   ebx
c0009f12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009f16:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009f1a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0009f21:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009f25:	80 f9 19             	cmp    cl,0x19
c0009f28:	77 37                	ja     c0009f61 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0009f2a:	8b 0c 8d e0 28 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd720]
c0009f31:	85 c9                	test   ecx,ecx
c0009f33:	74 2c                	je     c0009f61 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0009f35:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0009f3b:	85 c9                	test   ecx,ecx
c0009f3d:	74 22                	je     c0009f61 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0009f3f:	b8 06 00 00 00       	mov    eax,0x6
c0009f44:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009f48:	75 17                	jne    c0009f61 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0009f4a:	8b 39                	mov    edi,DWORD PTR [ecx]
c0009f4c:	89 f0                	mov    eax,esi
c0009f4e:	83 c2 0d             	add    edx,0xd
c0009f51:	0f b6 f0             	movzx  esi,al
c0009f54:	0f b6 db             	movzx  ebx,bl
c0009f57:	56                   	push   esi
c0009f58:	53                   	push   ebx
c0009f59:	52                   	push   edx
c0009f5a:	51                   	push   ecx
c0009f5b:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0009f5e:	83 c4 10             	add    esp,0x10
c0009f61:	5b                   	pop    ebx
c0009f62:	5e                   	pop    esi
c0009f63:	5f                   	pop    edi
c0009f64:	c3                   	ret    
c0009f65:	90                   	nop

c0009f66 <File::exists()>:
c0009f66:	83 ec 0c             	sub    esp,0xc
c0009f69:	31 c0                	xor    eax,eax
c0009f6b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009f6f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0009f76:	80 f9 19             	cmp    cl,0x19
c0009f79:	77 24                	ja     c0009f9f <File::exists()+0x39>
c0009f7b:	8b 0c 8d e0 28 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd720]
c0009f82:	85 c9                	test   ecx,ecx
c0009f84:	74 19                	je     c0009f9f <File::exists()+0x39>
c0009f86:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0009f8c:	85 c9                	test   ecx,ecx
c0009f8e:	74 0f                	je     c0009f9f <File::exists()+0x39>
c0009f90:	83 c2 0d             	add    edx,0xd
c0009f93:	50                   	push   eax
c0009f94:	50                   	push   eax
c0009f95:	8b 01                	mov    eax,DWORD PTR [ecx]
c0009f97:	52                   	push   edx
c0009f98:	51                   	push   ecx
c0009f99:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0009f9c:	83 c4 10             	add    esp,0x10
c0009f9f:	83 c4 0c             	add    esp,0xc
c0009fa2:	c3                   	ret    
c0009fa3:	90                   	nop

c0009fa4 <File::stat(unsigned long long*, bool*)>:
c0009fa4:	56                   	push   esi
c0009fa5:	53                   	push   ebx
c0009fa6:	50                   	push   eax
c0009fa7:	b8 0b 00 00 00       	mov    eax,0xb
c0009fac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009fb0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009fb4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0009fbb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009fbf:	80 f9 19             	cmp    cl,0x19
c0009fc2:	77 3d                	ja     c000a001 <File::stat(unsigned long long*, bool*)+0x5d>
c0009fc4:	8b 0c 8d e0 28 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd720]
c0009fcb:	85 c9                	test   ecx,ecx
c0009fcd:	74 32                	je     c000a001 <File::stat(unsigned long long*, bool*)+0x5d>
c0009fcf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0009fd5:	85 c9                	test   ecx,ecx
c0009fd7:	74 28                	je     c000a001 <File::stat(unsigned long long*, bool*)+0x5d>
c0009fd9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0009fdb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009fdf:	74 13                	je     c0009ff4 <File::stat(unsigned long long*, bool*)+0x50>
c0009fe1:	83 ec 04             	sub    esp,0x4
c0009fe4:	56                   	push   esi
c0009fe5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0009feb:	51                   	push   ecx
c0009fec:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0009fef:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0009ff2:	eb 0a                	jmp    c0009ffe <File::stat(unsigned long long*, bool*)+0x5a>
c0009ff4:	53                   	push   ebx
c0009ff5:	83 c2 0d             	add    edx,0xd
c0009ff8:	56                   	push   esi
c0009ff9:	52                   	push   edx
c0009ffa:	51                   	push   ecx
c0009ffb:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0009ffe:	83 c4 10             	add    esp,0x10
c000a001:	5a                   	pop    edx
c000a002:	5b                   	pop    ebx
c000a003:	5e                   	pop    esi
c000a004:	c3                   	ret    

c000a005 <Fs::setcwd(Process*, char*)>:
c000a005:	55                   	push   ebp
c000a006:	57                   	push   edi
c000a007:	56                   	push   esi
c000a008:	53                   	push   ebx
c000a009:	81 ec 20 02 00 00    	sub    esp,0x220
c000a00f:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000a016:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000a01c:	57                   	push   edi
c000a01d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000a024:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000a028:	56                   	push   esi
c000a029:	e8 66 fa ff ff       	call   c0009a94 <Fs::standardiseFiles(char*, char const*, char const*)>
c000a02e:	89 34 24             	mov    DWORD PTR [esp],esi
c000a031:	e8 8e 64 ff ff       	call   c00004c4 <strlen>
c000a036:	83 c4 10             	add    esp,0x10
c000a039:	83 f8 02             	cmp    eax,0x2
c000a03c:	77 15                	ja     c000a053 <Fs::setcwd(Process*, char*)+0x4e>
c000a03e:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000a043:	83 eb 41             	sub    ebx,0x41
c000a046:	8b 04 9d e0 28 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd720]
c000a04d:	85 c0                	test   eax,eax
c000a04f:	75 1c                	jne    c000a06d <Fs::setcwd(Process*, char*)+0x68>
c000a051:	eb 2f                	jmp    c000a082 <Fs::setcwd(Process*, char*)+0x7d>
c000a053:	83 ec 0c             	sub    esp,0xc
c000a056:	56                   	push   esi
c000a057:	e8 68 64 ff ff       	call   c00004c4 <strlen>
c000a05c:	83 c4 10             	add    esp,0x10
c000a05f:	83 f8 03             	cmp    eax,0x3
c000a062:	75 57                	jne    c000a0bb <Fs::setcwd(Process*, char*)+0xb6>
c000a064:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000a069:	75 50                	jne    c000a0bb <Fs::setcwd(Process*, char*)+0xb6>
c000a06b:	eb d1                	jmp    c000a03e <Fs::setcwd(Process*, char*)+0x39>
c000a06d:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000a074:	75 0c                	jne    c000a082 <Fs::setcwd(Process*, char*)+0x7d>
c000a076:	83 ec 0c             	sub    esp,0xc
c000a079:	50                   	push   eax
c000a07a:	e8 35 1c 00 00       	call   c000bcb4 <LogicalDisk::mount()>
c000a07f:	83 c4 10             	add    esp,0x10
c000a082:	b8 03 00 00 00       	mov    eax,0x3
c000a087:	83 fb 19             	cmp    ebx,0x19
c000a08a:	0f 87 c6 00 00 00    	ja     c000a156 <Fs::setcwd(Process*, char*)+0x151>
c000a090:	8b 14 9d e0 28 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdd720]
c000a097:	b8 05 00 00 00       	mov    eax,0x5
c000a09c:	85 d2                	test   edx,edx
c000a09e:	0f 84 b2 00 00 00    	je     c000a156 <Fs::setcwd(Process*, char*)+0x151>
c000a0a4:	b8 06 00 00 00       	mov    eax,0x6
c000a0a9:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000a0b0:	0f 85 92 00 00 00    	jne    c000a148 <Fs::setcwd(Process*, char*)+0x143>
c000a0b6:	e9 9b 00 00 00       	jmp    c000a156 <Fs::setcwd(Process*, char*)+0x151>
c000a0bb:	83 ec 0c             	sub    esp,0xc
c000a0be:	68 14 01 00 00       	push   0x114
c000a0c3:	e8 81 c8 ff ff       	call   c0006949 <malloc>
c000a0c8:	83 c4 0c             	add    esp,0xc
c000a0cb:	89 c3                	mov    ebx,eax
c000a0cd:	55                   	push   ebp
c000a0ce:	56                   	push   esi
c000a0cf:	50                   	push   eax
c000a0d0:	e8 69 fb ff ff       	call   c0009c3e <File::File(char const*, Process*)>
c000a0d5:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a0da:	83 c4 0c             	add    esp,0xc
c000a0dd:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000a0e1:	50                   	push   eax
c000a0e2:	8d 44 24 10          	lea    eax,[esp+0x10]
c000a0e6:	50                   	push   eax
c000a0e7:	53                   	push   ebx
c000a0e8:	e8 b7 fe ff ff       	call   c0009fa4 <File::stat(unsigned long long*, bool*)>
c000a0ed:	83 c4 10             	add    esp,0x10
c000a0f0:	83 f8 02             	cmp    eax,0x2
c000a0f3:	74 04                	je     c000a0f9 <Fs::setcwd(Process*, char*)+0xf4>
c000a0f5:	85 c0                	test   eax,eax
c000a0f7:	74 1c                	je     c000a115 <Fs::setcwd(Process*, char*)+0x110>
c000a0f9:	b8 01 00 00 00       	mov    eax,0x1
c000a0fe:	85 db                	test   ebx,ebx
c000a100:	74 54                	je     c000a156 <Fs::setcwd(Process*, char*)+0x151>
c000a102:	83 ec 0c             	sub    esp,0xc
c000a105:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a107:	53                   	push   ebx
c000a108:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a10b:	83 c4 10             	add    esp,0x10
c000a10e:	b8 01 00 00 00       	mov    eax,0x1
c000a113:	eb 41                	jmp    c000a156 <Fs::setcwd(Process*, char*)+0x151>
c000a115:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000a11a:	75 1c                	jne    c000a138 <Fs::setcwd(Process*, char*)+0x133>
c000a11c:	b8 02 00 00 00       	mov    eax,0x2
c000a121:	85 db                	test   ebx,ebx
c000a123:	74 31                	je     c000a156 <Fs::setcwd(Process*, char*)+0x151>
c000a125:	83 ec 0c             	sub    esp,0xc
c000a128:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a12a:	53                   	push   ebx
c000a12b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a12e:	83 c4 10             	add    esp,0x10
c000a131:	b8 02 00 00 00       	mov    eax,0x2
c000a136:	eb 1e                	jmp    c000a156 <Fs::setcwd(Process*, char*)+0x151>
c000a138:	85 db                	test   ebx,ebx
c000a13a:	74 0c                	je     c000a148 <Fs::setcwd(Process*, char*)+0x143>
c000a13c:	83 ec 0c             	sub    esp,0xc
c000a13f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a141:	53                   	push   ebx
c000a142:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a145:	83 c4 10             	add    esp,0x10
c000a148:	50                   	push   eax
c000a149:	50                   	push   eax
c000a14a:	56                   	push   esi
c000a14b:	57                   	push   edi
c000a14c:	e8 13 64 ff ff       	call   c0000564 <strcpy>
c000a151:	83 c4 10             	add    esp,0x10
c000a154:	31 c0                	xor    eax,eax
c000a156:	81 c4 1c 02 00 00    	add    esp,0x21c
c000a15c:	5b                   	pop    ebx
c000a15d:	5e                   	pop    esi
c000a15e:	5f                   	pop    edi
c000a15f:	5d                   	pop    ebp
c000a160:	c3                   	ret    
c000a161:	90                   	nop

c000a162 <Directory::Directory(char const*, Process*)>:
c000a162:	83 ec 0c             	sub    esp,0xc
c000a165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a169:	83 ec 08             	sub    esp,0x8
c000a16c:	6a 00                	push   0x0
c000a16e:	50                   	push   eax
c000a16f:	e8 ba de ff ff       	call   c000802e <UnixFile::UnixFile(int)>
c000a174:	83 c4 10             	add    esp,0x10
c000a177:	ba a8 e1 01 c0       	mov    edx,0xc001e1a8
c000a17c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a180:	89 10                	mov    DWORD PTR [eax],edx
c000a182:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a186:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000a18c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a190:	83 c0 0d             	add    eax,0xd
c000a193:	83 ec 04             	sub    esp,0x4
c000a196:	52                   	push   edx
c000a197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a19b:	50                   	push   eax
c000a19c:	e8 f3 f8 ff ff       	call   c0009a94 <Fs::standardiseFiles(char*, char const*, char const*)>
c000a1a1:	83 c4 10             	add    esp,0x10
c000a1a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1a8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000a1ab:	8d 50 bf             	lea    edx,[eax-0x41]
c000a1ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1b2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000a1b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1bc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000a1c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1c4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a1ca:	0f b6 c0             	movzx  eax,al
c000a1cd:	8b 04 85 e0 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd720]
c000a1d4:	85 c0                	test   eax,eax
c000a1d6:	74 3e                	je     c000a216 <Directory::Directory(char const*, Process*)+0xb4>
c000a1d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1dc:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a1e2:	0f b6 c0             	movzx  eax,al
c000a1e5:	8b 04 85 e0 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd720]
c000a1ec:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a1f2:	85 c0                	test   eax,eax
c000a1f4:	75 20                	jne    c000a216 <Directory::Directory(char const*, Process*)+0xb4>
c000a1f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1fa:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a200:	0f b6 c0             	movzx  eax,al
c000a203:	8b 04 85 e0 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd720]
c000a20a:	83 ec 0c             	sub    esp,0xc
c000a20d:	50                   	push   eax
c000a20e:	e8 a1 1a 00 00       	call   c000bcb4 <LogicalDisk::mount()>
c000a213:	83 c4 10             	add    esp,0x10
c000a216:	90                   	nop
c000a217:	83 c4 0c             	add    esp,0xc
c000a21a:	c3                   	ret    
c000a21b:	90                   	nop

c000a21c <Directory::open()>:
c000a21c:	53                   	push   ebx
c000a21d:	b8 0b 00 00 00       	mov    eax,0xb
c000a222:	83 ec 08             	sub    esp,0x8
c000a225:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a229:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000a230:	80 fa 19             	cmp    dl,0x19
c000a233:	77 3d                	ja     c000a272 <Directory::open()+0x56>
c000a235:	8b 14 95 e0 28 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd720]
c000a23c:	85 d2                	test   edx,edx
c000a23e:	74 32                	je     c000a272 <Directory::open()+0x56>
c000a240:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a246:	85 d2                	test   edx,edx
c000a248:	74 28                	je     c000a272 <Directory::open()+0x56>
c000a24a:	b8 06 00 00 00       	mov    eax,0x6
c000a24f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000a253:	75 1d                	jne    c000a272 <Directory::open()+0x56>
c000a255:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000a25b:	50                   	push   eax
c000a25c:	8b 02                	mov    eax,DWORD PTR [edx]
c000a25e:	51                   	push   ecx
c000a25f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000a262:	51                   	push   ecx
c000a263:	52                   	push   edx
c000a264:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000a267:	83 c4 10             	add    esp,0x10
c000a26a:	85 c0                	test   eax,eax
c000a26c:	75 04                	jne    c000a272 <Directory::open()+0x56>
c000a26e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000a272:	83 c4 08             	add    esp,0x8
c000a275:	5b                   	pop    ebx
c000a276:	c3                   	ret    
c000a277:	90                   	nop

c000a278 <Directory::close()>:
c000a278:	53                   	push   ebx
c000a279:	b8 0b 00 00 00       	mov    eax,0xb
c000a27e:	83 ec 08             	sub    esp,0x8
c000a281:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a285:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a28c:	80 fa 19             	cmp    dl,0x19
c000a28f:	77 41                	ja     c000a2d2 <Directory::close()+0x5a>
c000a291:	8b 1c 95 e0 28 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd720]
c000a298:	85 db                	test   ebx,ebx
c000a29a:	74 36                	je     c000a2d2 <Directory::close()+0x5a>
c000a29c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000a2a3:	74 2d                	je     c000a2d2 <Directory::close()+0x5a>
c000a2a5:	b8 05 00 00 00       	mov    eax,0x5
c000a2aa:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000a2ae:	74 22                	je     c000a2d2 <Directory::close()+0x5a>
c000a2b0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000a2b4:	8b 04 95 e0 28 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd720]
c000a2bb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a2c1:	53                   	push   ebx
c000a2c2:	53                   	push   ebx
c000a2c3:	8b 10                	mov    edx,DWORD PTR [eax]
c000a2c5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000a2cb:	50                   	push   eax
c000a2cc:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000a2cf:	83 c4 10             	add    esp,0x10
c000a2d2:	83 c4 08             	add    esp,0x8
c000a2d5:	5b                   	pop    ebx
c000a2d6:	c3                   	ret    
c000a2d7:	90                   	nop

c000a2d8 <Directory::unlink()>:
c000a2d8:	83 ec 0c             	sub    esp,0xc
c000a2db:	b8 0b 00 00 00       	mov    eax,0xb
c000a2e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a2e4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a2eb:	80 f9 19             	cmp    cl,0x19
c000a2ee:	77 2f                	ja     c000a31f <Directory::unlink()+0x47>
c000a2f0:	8b 0c 8d e0 28 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd720]
c000a2f7:	85 c9                	test   ecx,ecx
c000a2f9:	74 24                	je     c000a31f <Directory::unlink()+0x47>
c000a2fb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a301:	85 c9                	test   ecx,ecx
c000a303:	74 1a                	je     c000a31f <Directory::unlink()+0x47>
c000a305:	b8 06 00 00 00       	mov    eax,0x6
c000a30a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a30e:	75 0f                	jne    c000a31f <Directory::unlink()+0x47>
c000a310:	83 c2 0d             	add    edx,0xd
c000a313:	50                   	push   eax
c000a314:	50                   	push   eax
c000a315:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a317:	52                   	push   edx
c000a318:	51                   	push   ecx
c000a319:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000a31c:	83 c4 10             	add    esp,0x10
c000a31f:	83 c4 0c             	add    esp,0xc
c000a322:	c3                   	ret    
c000a323:	90                   	nop

c000a324 <Directory::rename(char const*)>:
c000a324:	83 ec 0c             	sub    esp,0xc
c000a327:	b8 0b 00 00 00       	mov    eax,0xb
c000a32c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a330:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a337:	80 f9 19             	cmp    cl,0x19
c000a33a:	77 32                	ja     c000a36e <Directory::rename(char const*)+0x4a>
c000a33c:	8b 0c 8d e0 28 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd720]
c000a343:	85 c9                	test   ecx,ecx
c000a345:	74 27                	je     c000a36e <Directory::rename(char const*)+0x4a>
c000a347:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a34d:	85 c9                	test   ecx,ecx
c000a34f:	74 1d                	je     c000a36e <Directory::rename(char const*)+0x4a>
c000a351:	b8 06 00 00 00       	mov    eax,0x6
c000a356:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a35a:	75 12                	jne    c000a36e <Directory::rename(char const*)+0x4a>
c000a35c:	83 c2 0d             	add    edx,0xd
c000a35f:	50                   	push   eax
c000a360:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a362:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a366:	52                   	push   edx
c000a367:	51                   	push   ecx
c000a368:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000a36b:	83 c4 10             	add    esp,0x10
c000a36e:	83 c4 0c             	add    esp,0xc
c000a371:	c3                   	ret    

c000a372 <Directory::exists()>:
c000a372:	83 ec 0c             	sub    esp,0xc
c000a375:	31 c0                	xor    eax,eax
c000a377:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a37b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a382:	80 f9 19             	cmp    cl,0x19
c000a385:	77 24                	ja     c000a3ab <Directory::exists()+0x39>
c000a387:	8b 0c 8d e0 28 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd720]
c000a38e:	85 c9                	test   ecx,ecx
c000a390:	74 19                	je     c000a3ab <Directory::exists()+0x39>
c000a392:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a398:	85 c9                	test   ecx,ecx
c000a39a:	74 0f                	je     c000a3ab <Directory::exists()+0x39>
c000a39c:	83 c2 0d             	add    edx,0xd
c000a39f:	50                   	push   eax
c000a3a0:	50                   	push   eax
c000a3a1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a3a3:	52                   	push   edx
c000a3a4:	51                   	push   ecx
c000a3a5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000a3a8:	83 c4 10             	add    esp,0x10
c000a3ab:	83 c4 0c             	add    esp,0xc
c000a3ae:	c3                   	ret    
c000a3af:	90                   	nop

c000a3b0 <Directory::read(dirent*)>:
c000a3b0:	83 ec 1c             	sub    esp,0x1c
c000a3b3:	b8 0b 00 00 00       	mov    eax,0xb
c000a3b8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a3bc:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a3c3:	80 fa 19             	cmp    dl,0x19
c000a3c6:	77 30                	ja     c000a3f8 <Directory::read(dirent*)+0x48>
c000a3c8:	8b 14 95 e0 28 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd720]
c000a3cf:	85 d2                	test   edx,edx
c000a3d1:	74 25                	je     c000a3f8 <Directory::read(dirent*)+0x48>
c000a3d3:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000a3da:	74 1c                	je     c000a3f8 <Directory::read(dirent*)+0x48>
c000a3dc:	83 ec 0c             	sub    esp,0xc
c000a3df:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a3e1:	8d 54 24 18          	lea    edx,[esp+0x18]
c000a3e5:	52                   	push   edx
c000a3e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a3ea:	6a 00                	push   0x0
c000a3ec:	68 10 01 00 00       	push   0x110
c000a3f1:	51                   	push   ecx
c000a3f2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000a3f5:	83 c4 20             	add    esp,0x20
c000a3f8:	83 c4 1c             	add    esp,0x1c
c000a3fb:	c3                   	ret    

c000a3fc <Directory::create()>:
c000a3fc:	83 ec 0c             	sub    esp,0xc
c000a3ff:	b8 0b 00 00 00       	mov    eax,0xb
c000a404:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a408:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a40f:	80 f9 19             	cmp    cl,0x19
c000a412:	77 2f                	ja     c000a443 <Directory::create()+0x47>
c000a414:	8b 0c 8d e0 28 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd720]
c000a41b:	85 c9                	test   ecx,ecx
c000a41d:	74 24                	je     c000a443 <Directory::create()+0x47>
c000a41f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a425:	85 c9                	test   ecx,ecx
c000a427:	74 1a                	je     c000a443 <Directory::create()+0x47>
c000a429:	b8 06 00 00 00       	mov    eax,0x6
c000a42e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a432:	75 0f                	jne    c000a443 <Directory::create()+0x47>
c000a434:	83 c2 0d             	add    edx,0xd
c000a437:	50                   	push   eax
c000a438:	50                   	push   eax
c000a439:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a43b:	52                   	push   edx
c000a43c:	51                   	push   ecx
c000a43d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000a440:	83 c4 10             	add    esp,0x10
c000a443:	83 c4 0c             	add    esp,0xc
c000a446:	c3                   	ret    
c000a447:	90                   	nop

c000a448 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000a448:	b8 0a 00 00 00       	mov    eax,0xa
c000a44d:	c3                   	ret    
c000a44e:	66 90                	xchg   ax,ax

c000a450 <Bus::Bus(char const*)>:
c000a450:	83 ec 0c             	sub    esp,0xc
c000a453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a457:	83 ec 08             	sub    esp,0x8
c000a45a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a45e:	50                   	push   eax
c000a45f:	e8 2a 08 00 00       	call   c000ac8e <Device::Device(char const*)>
c000a464:	83 c4 10             	add    esp,0x10
c000a467:	ba c4 e1 01 c0       	mov    edx,0xc001e1c4
c000a46c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a470:	89 10                	mov    DWORD PTR [eax],edx
c000a472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a476:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000a480:	90                   	nop
c000a481:	83 c4 0c             	add    esp,0xc
c000a484:	c3                   	ret    
c000a485:	90                   	nop
c000a486:	66 90                	xchg   ax,ax

c000a488 <Bus::~Bus()>:
c000a488:	83 ec 0c             	sub    esp,0xc
c000a48b:	ba c4 e1 01 c0       	mov    edx,0xc001e1c4
c000a490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a494:	89 10                	mov    DWORD PTR [eax],edx
c000a496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a49a:	83 ec 0c             	sub    esp,0xc
c000a49d:	50                   	push   eax
c000a49e:	e8 55 05 00 00       	call   c000a9f8 <Device::~Device()>
c000a4a3:	83 c4 10             	add    esp,0x10
c000a4a6:	90                   	nop
c000a4a7:	83 c4 0c             	add    esp,0xc
c000a4aa:	c3                   	ret    
c000a4ab:	90                   	nop

c000a4ac <Bus::~Bus()>:
c000a4ac:	83 ec 0c             	sub    esp,0xc
c000a4af:	83 ec 0c             	sub    esp,0xc
c000a4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4b6:	e8 cd ff ff ff       	call   c000a488 <Bus::~Bus()>
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	83 ec 08             	sub    esp,0x8
c000a4c1:	68 58 01 00 00       	push   0x158
c000a4c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4ca:	e8 23 f1 ff ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c000a4cf:	83 c4 10             	add    esp,0x10
c000a4d2:	83 c4 0c             	add    esp,0xc
c000a4d5:	c3                   	ret    

c000a4d6 <beepThread(void*)>:
c000a4d6:	83 ec 0c             	sub    esp,0xc
c000a4d9:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000a4de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a4e2:	48                   	dec    eax
c000a4e3:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c000a4e8:	75 01                	jne    c000a4eb <beepThread(void*)+0x15>
c000a4ea:	fb                   	sti    
c000a4eb:	83 ec 0c             	sub    esp,0xc
c000a4ee:	6b c2 0a             	imul   eax,edx,0xa
c000a4f1:	50                   	push   eax
c000a4f2:	e8 2d 86 00 00       	call   c0012b24 <milliTenthSleep(unsigned int)>
c000a4f7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000a4fe:	e8 30 b2 00 00       	call   c0015733 <Hal::makeBeep(int)>
c000a503:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000a50b:	83 c4 1c             	add    esp,0x1c
c000a50e:	e9 11 85 00 00       	jmp    c0012a24 <blockTask(TaskState)>

c000a513 <Krnl::beep(int, int, bool)>:
c000a513:	56                   	push   esi
c000a514:	53                   	push   ebx
c000a515:	83 ec 10             	sub    esp,0x10
c000a518:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a51c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a524:	e8 0a b2 00 00       	call   c0015733 <Hal::makeBeep(int)>
c000a529:	83 c4 10             	add    esp,0x10
c000a52c:	89 f0                	mov    eax,esi
c000a52e:	84 c0                	test   al,al
c000a530:	74 1e                	je     c000a550 <Krnl::beep(int, int, bool)+0x3d>
c000a532:	83 ec 0c             	sub    esp,0xc
c000a535:	6b db 0a             	imul   ebx,ebx,0xa
c000a538:	53                   	push   ebx
c000a539:	e8 e6 85 00 00       	call   c0012b24 <milliTenthSleep(unsigned int)>
c000a53e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000a546:	83 c4 14             	add    esp,0x14
c000a549:	5b                   	pop    ebx
c000a54a:	5e                   	pop    esi
c000a54b:	e9 e3 b1 00 00       	jmp    c0015733 <Hal::makeBeep(int)>
c000a550:	68 e6 00 00 00       	push   0xe6
c000a555:	53                   	push   ebx
c000a556:	68 d6 a4 00 c0       	push   0xc000a4d6
c000a55b:	ff 35 70 38 02 c0    	push   DWORD PTR ds:0xc0023870
c000a561:	e8 aa 80 00 00       	call   c0012610 <Process::createThread(void (*)(void*), void*, int)>
c000a566:	83 c4 14             	add    esp,0x14
c000a569:	5b                   	pop    ebx
c000a56a:	5e                   	pop    esi
c000a56b:	c3                   	ret    

c000a56c <User::loadClockSettings(int)>:
c000a56c:	53                   	push   ebx
c000a56d:	83 ec 14             	sub    esp,0x14
c000a570:	68 14 01 00 00       	push   0x114
c000a575:	e8 cf c3 ff ff       	call   c0006949 <malloc>
c000a57a:	83 c4 0c             	add    esp,0xc
c000a57d:	89 c3                	mov    ebx,eax
c000a57f:	ff 35 70 38 02 c0    	push   DWORD PTR ds:0xc0023870
c000a585:	68 e8 e1 01 c0       	push   0xc001e1e8
c000a58a:	50                   	push   eax
c000a58b:	e8 ae f6 ff ff       	call   c0009c3e <File::File(char const*, Process*)>
c000a590:	58                   	pop    eax
c000a591:	5a                   	pop    edx
c000a592:	6a 01                	push   0x1
c000a594:	53                   	push   ebx
c000a595:	e8 5e f7 ff ff       	call   c0009cf8 <File::open(FileOpenMode)>
c000a59a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a59d:	e8 b4 f7 ff ff       	call   c0009d56 <File::close()>
c000a5a2:	83 c4 10             	add    esp,0x10
c000a5a5:	85 db                	test   ebx,ebx
c000a5a7:	74 0f                	je     c000a5b8 <User::loadClockSettings(int)+0x4c>
c000a5a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a5ab:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a5af:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000a5b2:	83 c4 08             	add    esp,0x8
c000a5b5:	5b                   	pop    ebx
c000a5b6:	ff e0                	jmp    eax
c000a5b8:	83 c4 08             	add    esp,0x8
c000a5bb:	5b                   	pop    ebx
c000a5bc:	c3                   	ret    
c000a5bd:	90                   	nop

c000a5be <Clock::Clock(char const*)>:
c000a5be:	83 ec 0c             	sub    esp,0xc
c000a5c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a5c5:	83 ec 08             	sub    esp,0x8
c000a5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a5cc:	50                   	push   eax
c000a5cd:	e8 bc 06 00 00       	call   c000ac8e <Device::Device(char const*)>
c000a5d2:	83 c4 10             	add    esp,0x10
c000a5d5:	ba 10 e2 01 c0       	mov    edx,0xc001e210
c000a5da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a5de:	89 10                	mov    DWORD PTR [eax],edx
c000a5e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a5e4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000a5ee:	90                   	nop
c000a5ef:	83 c4 0c             	add    esp,0xc
c000a5f2:	c3                   	ret    
c000a5f3:	90                   	nop

c000a5f4 <Clock::~Clock()>:
c000a5f4:	83 ec 0c             	sub    esp,0xc
c000a5f7:	ba 10 e2 01 c0       	mov    edx,0xc001e210
c000a5fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a600:	89 10                	mov    DWORD PTR [eax],edx
c000a602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a606:	83 ec 0c             	sub    esp,0xc
c000a609:	50                   	push   eax
c000a60a:	e8 e9 03 00 00       	call   c000a9f8 <Device::~Device()>
c000a60f:	83 c4 10             	add    esp,0x10
c000a612:	90                   	nop
c000a613:	83 c4 0c             	add    esp,0xc
c000a616:	c3                   	ret    
c000a617:	90                   	nop

c000a618 <Clock::~Clock()>:
c000a618:	83 ec 0c             	sub    esp,0xc
c000a61b:	83 ec 0c             	sub    esp,0xc
c000a61e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a622:	e8 cd ff ff ff       	call   c000a5f4 <Clock::~Clock()>
c000a627:	83 c4 10             	add    esp,0x10
c000a62a:	83 ec 08             	sub    esp,0x8
c000a62d:	68 58 01 00 00       	push   0x158
c000a632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a636:	e8 b7 ef ff ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c000a63b:	83 c4 10             	add    esp,0x10
c000a63e:	83 c4 0c             	add    esp,0xc
c000a641:	c3                   	ret    

c000a642 <Clock::timeInSecondsLocal()>:
c000a642:	53                   	push   ebx
c000a643:	83 ec 14             	sub    esp,0x14
c000a646:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a64a:	8b 10                	mov    edx,DWORD PTR [eax]
c000a64c:	50                   	push   eax
c000a64d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000a650:	0f b6 0d 5c 04 02 c0 	movzx  ecx,BYTE PTR ds:0xc002045c
c000a657:	03 0d 60 04 02 c0    	add    ecx,DWORD PTR ds:0xc0020460
c000a65d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000a663:	89 cb                	mov    ebx,ecx
c000a665:	c1 fb 1f             	sar    ebx,0x1f
c000a668:	01 c8                	add    eax,ecx
c000a66a:	11 da                	adc    edx,ebx
c000a66c:	83 c4 10             	add    esp,0x10
c000a66f:	31 c9                	xor    ecx,ecx
c000a671:	80 3d 5d 04 02 c0 00 	cmp    BYTE PTR ds:0xc002045d,0x0
c000a678:	74 05                	je     c000a67f <Clock::timeInSecondsLocal()+0x3d>
c000a67a:	b9 08 07 00 00       	mov    ecx,0x708
c000a67f:	31 db                	xor    ebx,ebx
c000a681:	01 c8                	add    eax,ecx
c000a683:	11 da                	adc    edx,ebx
c000a685:	83 c4 08             	add    esp,0x8
c000a688:	5b                   	pop    ebx
c000a689:	c3                   	ret    

c000a68a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000a68a:	57                   	push   edi
c000a68b:	56                   	push   esi
c000a68c:	53                   	push   ebx
c000a68d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a691:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a695:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a697:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000a69b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000a69e:	0f b6 05 5c 04 02 c0 	movzx  eax,BYTE PTR ds:0xc002045c
c000a6a5:	03 05 60 04 02 c0    	add    eax,DWORD PTR ds:0xc0020460
c000a6ab:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000a6b1:	99                   	cdq    
c000a6b2:	29 c6                	sub    esi,eax
c000a6b4:	19 d7                	sbb    edi,edx
c000a6b6:	89 f0                	mov    eax,esi
c000a6b8:	89 fa                	mov    edx,edi
c000a6ba:	31 f6                	xor    esi,esi
c000a6bc:	80 3d 5d 04 02 c0 00 	cmp    BYTE PTR ds:0xc002045d,0x0
c000a6c3:	74 05                	je     c000a6ca <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000a6c5:	be 08 07 00 00       	mov    esi,0x708
c000a6ca:	31 ff                	xor    edi,edi
c000a6cc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000a6d0:	29 f0                	sub    eax,esi
c000a6d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a6d6:	19 fa                	sbb    edx,edi
c000a6d8:	89 d8                	mov    eax,ebx
c000a6da:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a6de:	5b                   	pop    ebx
c000a6df:	5e                   	pop    esi
c000a6e0:	5f                   	pop    edi
c000a6e1:	ff e0                	jmp    eax

c000a6e3 <datetimeToSeconds(datetime_t)>:
c000a6e3:	55                   	push   ebp
c000a6e4:	57                   	push   edi
c000a6e5:	56                   	push   esi
c000a6e6:	53                   	push   ebx
c000a6e7:	83 ec 14             	sub    esp,0x14
c000a6ea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a6ee:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000a6f2:	89 d3                	mov    ebx,edx
c000a6f4:	0f b6 c6             	movzx  eax,dh
c000a6f7:	c1 eb 10             	shr    ebx,0x10
c000a6fa:	48                   	dec    eax
c000a6fb:	66 81 eb 6c 07       	sub    bx,0x76c
c000a700:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000a704:	0f b6 f5             	movzx  esi,ch
c000a707:	89 cf                	mov    edi,ecx
c000a709:	6b f6 3c             	imul   esi,esi,0x3c
c000a70c:	c1 ef 10             	shr    edi,0x10
c000a70f:	0f b6 c9             	movzx  ecx,cl
c000a712:	89 f8                	mov    eax,edi
c000a714:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000a71a:	0f b6 f8             	movzx  edi,al
c000a71d:	0f b6 d2             	movzx  edx,dl
c000a720:	01 fe                	add    esi,edi
c000a722:	01 f1                	add    ecx,esi
c000a724:	0f b7 f3             	movzx  esi,bx
c000a727:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a72b:	c1 f9 1f             	sar    ecx,0x1f
c000a72e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000a733:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a737:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000a73c:	8b 0c 8d 60 e2 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe1da0]
c000a743:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000a747:	76 29                	jbe    c000a772 <datetimeToSeconds(datetime_t)+0x8f>
c000a749:	f6 c3 03             	test   bl,0x3
c000a74c:	75 24                	jne    c000a772 <datetimeToSeconds(datetime_t)+0x8f>
c000a74e:	31 d2                	xor    edx,edx
c000a750:	bf 64 00 00 00       	mov    edi,0x64
c000a755:	89 d8                	mov    eax,ebx
c000a757:	66 f7 f7             	div    di
c000a75a:	66 85 d2             	test   dx,dx
c000a75d:	75 12                	jne    c000a771 <datetimeToSeconds(datetime_t)+0x8e>
c000a75f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000a765:	bf 90 01 00 00       	mov    edi,0x190
c000a76a:	99                   	cdq    
c000a76b:	f7 ff                	idiv   edi
c000a76d:	85 d2                	test   edx,edx
c000a76f:	75 01                	jne    c000a772 <datetimeToSeconds(datetime_t)+0x8f>
c000a771:	41                   	inc    ecx
c000a772:	66 83 fb 46          	cmp    bx,0x46
c000a776:	76 45                	jbe    c000a7bd <datetimeToSeconds(datetime_t)+0xda>
c000a778:	bb 46 00 00 00       	mov    ebx,0x46
c000a77d:	bf 64 00 00 00       	mov    edi,0x64
c000a782:	bd 90 01 00 00       	mov    ebp,0x190
c000a787:	b8 6d 01 00 00       	mov    eax,0x16d
c000a78c:	f6 c3 03             	test   bl,0x3
c000a78f:	75 23                	jne    c000a7b4 <datetimeToSeconds(datetime_t)+0xd1>
c000a791:	89 d8                	mov    eax,ebx
c000a793:	99                   	cdq    
c000a794:	f7 ff                	idiv   edi
c000a796:	b8 6e 01 00 00       	mov    eax,0x16e
c000a79b:	85 d2                	test   edx,edx
c000a79d:	75 15                	jne    c000a7b4 <datetimeToSeconds(datetime_t)+0xd1>
c000a79f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000a7a5:	99                   	cdq    
c000a7a6:	f7 fd                	idiv   ebp
c000a7a8:	83 fa 01             	cmp    edx,0x1
c000a7ab:	19 c0                	sbb    eax,eax
c000a7ad:	f7 d0                	not    eax
c000a7af:	05 6e 01 00 00       	add    eax,0x16e
c000a7b4:	01 c1                	add    ecx,eax
c000a7b6:	43                   	inc    ebx
c000a7b7:	39 f3                	cmp    ebx,esi
c000a7b9:	7c cc                	jl     c000a787 <datetimeToSeconds(datetime_t)+0xa4>
c000a7bb:	eb 35                	jmp    c000a7f2 <datetimeToSeconds(datetime_t)+0x10f>
c000a7bd:	74 33                	je     c000a7f2 <datetimeToSeconds(datetime_t)+0x10f>
c000a7bf:	b8 45 00 00 00       	mov    eax,0x45
c000a7c4:	89 c2                	mov    edx,eax
c000a7c6:	83 e2 03             	and    edx,0x3
c000a7c9:	39 f0                	cmp    eax,esi
c000a7cb:	7e 0f                	jle    c000a7dc <datetimeToSeconds(datetime_t)+0xf9>
c000a7cd:	83 fa 01             	cmp    edx,0x1
c000a7d0:	19 d2                	sbb    edx,edx
c000a7d2:	48                   	dec    eax
c000a7d3:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000a7da:	eb e8                	jmp    c000a7c4 <datetimeToSeconds(datetime_t)+0xe1>
c000a7dc:	b8 6d 01 00 00       	mov    eax,0x16d
c000a7e1:	85 d2                	test   edx,edx
c000a7e3:	75 0b                	jne    c000a7f0 <datetimeToSeconds(datetime_t)+0x10d>
c000a7e5:	66 83 fb 01          	cmp    bx,0x1
c000a7e9:	19 c0                	sbb    eax,eax
c000a7eb:	05 6e 01 00 00       	add    eax,0x16e
c000a7f0:	29 c1                	sub    ecx,eax
c000a7f2:	b8 80 51 01 00       	mov    eax,0x15180
c000a7f7:	f7 e9                	imul   ecx
c000a7f9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000a7fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000a801:	83 c4 14             	add    esp,0x14
c000a804:	5b                   	pop    ebx
c000a805:	5e                   	pop    esi
c000a806:	5f                   	pop    edi
c000a807:	5d                   	pop    ebp
c000a808:	c3                   	ret    
c000a809:	90                   	nop

c000a80a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000a80a:	57                   	push   edi
c000a80b:	56                   	push   esi
c000a80c:	53                   	push   ebx
c000a80d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a811:	8b 06                	mov    eax,DWORD PTR [esi]
c000a813:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000a816:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a81a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a81e:	e8 c0 fe ff ff       	call   c000a6e3 <datetimeToSeconds(datetime_t)>
c000a823:	59                   	pop    ecx
c000a824:	0f b6 0d 5c 04 02 c0 	movzx  ecx,BYTE PTR ds:0xc002045c
c000a82b:	5b                   	pop    ebx
c000a82c:	03 0d 60 04 02 c0    	add    ecx,DWORD PTR ds:0xc0020460
c000a832:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000a838:	89 cb                	mov    ebx,ecx
c000a83a:	c1 fb 1f             	sar    ebx,0x1f
c000a83d:	29 c8                	sub    eax,ecx
c000a83f:	19 da                	sbb    edx,ebx
c000a841:	31 c9                	xor    ecx,ecx
c000a843:	80 3d 5d 04 02 c0 00 	cmp    BYTE PTR ds:0xc002045d,0x0
c000a84a:	74 05                	je     c000a851 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000a84c:	b9 08 07 00 00       	mov    ecx,0x708
c000a851:	31 db                	xor    ebx,ebx
c000a853:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000a857:	29 c8                	sub    eax,ecx
c000a859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a85d:	19 da                	sbb    edx,ebx
c000a85f:	89 f8                	mov    eax,edi
c000a861:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a865:	5b                   	pop    ebx
c000a866:	5e                   	pop    esi
c000a867:	5f                   	pop    edi
c000a868:	ff e0                	jmp    eax

c000a86a <secondsToDatetime(unsigned long long)>:
c000a86a:	55                   	push   ebp
c000a86b:	57                   	push   edi
c000a86c:	56                   	push   esi
c000a86d:	53                   	push   ebx
c000a86e:	83 ec 1c             	sub    esp,0x1c
c000a871:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000a875:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a879:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a87d:	6a 00                	push   0x0
c000a87f:	68 80 51 01 00       	push   0x15180
c000a884:	55                   	push   ebp
c000a885:	57                   	push   edi
c000a886:	e8 35 1c 01 00       	call   c001c4c0 <__udivdi3>
c000a88b:	83 c4 10             	add    esp,0x10
c000a88e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000a894:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a898:	6a 00                	push   0x0
c000a89a:	68 80 51 01 00       	push   0x15180
c000a89f:	55                   	push   ebp
c000a8a0:	57                   	push   edi
c000a8a1:	bf 10 0e 00 00       	mov    edi,0xe10
c000a8a6:	e8 15 1d 01 00       	call   c001c5c0 <__umoddi3>
c000a8ab:	83 c4 10             	add    esp,0x10
c000a8ae:	99                   	cdq    
c000a8af:	f7 ff                	idiv   edi
c000a8b1:	bf 3c 00 00 00       	mov    edi,0x3c
c000a8b6:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000a8b9:	89 d0                	mov    eax,edx
c000a8bb:	99                   	cdq    
c000a8bc:	f7 ff                	idiv   edi
c000a8be:	85 db                	test   ebx,ebx
c000a8c0:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000a8c3:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000a8c6:	79 11                	jns    c000a8d9 <secondsToDatetime(unsigned long long)+0x6f>
c000a8c8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a8cc:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000a8d2:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000a8d7:	eb 07                	jmp    c000a8e0 <secondsToDatetime(unsigned long long)+0x76>
c000a8d9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000a8de:	89 d8                	mov    eax,ebx
c000a8e0:	bf b4 05 00 00       	mov    edi,0x5b4
c000a8e5:	99                   	cdq    
c000a8e6:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000a8eb:	f7 f9                	idiv   ecx
c000a8ed:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000a8f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a8f6:	31 d2                	xor    edx,edx
c000a8f8:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000a900:	01 c3                	add    ebx,eax
c000a902:	89 d8                	mov    eax,ebx
c000a904:	f7 f1                	div    ecx
c000a906:	31 d2                	xor    edx,edx
c000a908:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000a90b:	89 d8                	mov    eax,ebx
c000a90d:	f7 f7                	div    edi
c000a90f:	31 d2                	xor    edx,edx
c000a911:	29 c1                	sub    ecx,eax
c000a913:	89 d8                	mov    eax,ebx
c000a915:	f7 f5                	div    ebp
c000a917:	bd 6d 01 00 00       	mov    ebp,0x16d
c000a91c:	29 c1                	sub    ecx,eax
c000a91e:	31 d2                	xor    edx,edx
c000a920:	89 c8                	mov    eax,ecx
c000a922:	f7 f5                	div    ebp
c000a924:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000a929:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a92d:	31 d2                	xor    edx,edx
c000a92f:	89 c8                	mov    eax,ecx
c000a931:	f7 f5                	div    ebp
c000a933:	31 d2                	xor    edx,edx
c000a935:	01 c3                	add    ebx,eax
c000a937:	89 c8                	mov    eax,ecx
c000a939:	f7 f7                	div    edi
c000a93b:	bf 99 00 00 00       	mov    edi,0x99
c000a940:	29 c3                	sub    ebx,eax
c000a942:	31 d2                	xor    edx,edx
c000a944:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000a94c:	29 c3                	sub    ebx,eax
c000a94e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000a951:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000a954:	bb 05 00 00 00       	mov    ebx,0x5
c000a959:	83 c1 02             	add    ecx,0x2
c000a95c:	89 c8                	mov    eax,ecx
c000a95e:	f7 f7                	div    edi
c000a960:	31 d2                	xor    edx,edx
c000a962:	89 c7                	mov    edi,eax
c000a964:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000a96a:	83 c0 02             	add    eax,0x2
c000a96d:	f7 f3                	div    ebx
c000a96f:	89 eb                	mov    ebx,ebp
c000a971:	29 c3                	sub    ebx,eax
c000a973:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000a979:	88 1e                	mov    BYTE PTR [esi],bl
c000a97b:	19 c0                	sbb    eax,eax
c000a97d:	31 d2                	xor    edx,edx
c000a97f:	83 e0 0c             	and    eax,0xc
c000a982:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000a986:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000a98e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000a992:	83 f9 01             	cmp    ecx,0x1
c000a995:	0f 96 c2             	setbe  dl
c000a998:	41                   	inc    ecx
c000a999:	01 d0                	add    eax,edx
c000a99b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000a99e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000a9a2:	83 c4 1c             	add    esp,0x1c
c000a9a5:	89 f0                	mov    eax,esi
c000a9a7:	5b                   	pop    ebx
c000a9a8:	5e                   	pop    esi
c000a9a9:	5f                   	pop    edi
c000a9aa:	5d                   	pop    ebp
c000a9ab:	c2 04 00             	ret    0x4

c000a9ae <Clock::timeInDatetimeLocal()>:
c000a9ae:	53                   	push   ebx
c000a9af:	83 ec 14             	sub    esp,0x14
c000a9b2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a9b6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a9ba:	e8 83 fc ff ff       	call   c000a642 <Clock::timeInSecondsLocal()>
c000a9bf:	83 c4 0c             	add    esp,0xc
c000a9c2:	52                   	push   edx
c000a9c3:	50                   	push   eax
c000a9c4:	53                   	push   ebx
c000a9c5:	e8 a0 fe ff ff       	call   c000a86a <secondsToDatetime(unsigned long long)>
c000a9ca:	89 d8                	mov    eax,ebx
c000a9cc:	83 c4 14             	add    esp,0x14
c000a9cf:	5b                   	pop    ebx
c000a9d0:	c2 04 00             	ret    0x4
c000a9d3:	90                   	nop

c000a9d4 <Device::hibernate()>:
c000a9d4:	c3                   	ret    
c000a9d5:	90                   	nop

c000a9d6 <Device::wake()>:
c000a9d6:	c3                   	ret    
c000a9d7:	90                   	nop

c000a9d8 <Device::detect()>:
c000a9d8:	c3                   	ret    
c000a9d9:	90                   	nop

c000a9da <Device::disableLegacy()>:
c000a9da:	c3                   	ret    
c000a9db:	90                   	nop

c000a9dc <Device::powerSaving(PowerSavingLevel)>:
c000a9dc:	c3                   	ret    
c000a9dd:	90                   	nop

c000a9de <DriverlessDevice::close(int, int, void*)>:
c000a9de:	31 c0                	xor    eax,eax
c000a9e0:	c3                   	ret    
c000a9e1:	90                   	nop

c000a9e2 <DriverlessDevice::detect()>:
c000a9e2:	c3                   	ret    
c000a9e3:	90                   	nop

c000a9e4 <DriverlessDevice::open(int, int, void*)>:
c000a9e4:	83 ec 18             	sub    esp,0x18
c000a9e7:	68 90 e2 01 c0       	push   0xc001e290
c000a9ec:	e8 b8 49 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c000a9f1:	83 c8 ff             	or     eax,0xffffffff
c000a9f4:	83 c4 1c             	add    esp,0x1c
c000a9f7:	c3                   	ret    

c000a9f8 <Device::~Device()>:
c000a9f8:	ba f0 e2 01 c0       	mov    edx,0xc001e2f0
c000a9fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa01:	89 10                	mov    DWORD PTR [eax],edx
c000aa03:	90                   	nop
c000aa04:	c3                   	ret    
c000aa05:	90                   	nop

c000aa06 <Device::~Device()>:
c000aa06:	83 ec 0c             	sub    esp,0xc
c000aa09:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000aa0d:	e8 e6 ff ff ff       	call   c000a9f8 <Device::~Device()>
c000aa12:	83 c4 04             	add    esp,0x4
c000aa15:	83 ec 08             	sub    esp,0x8
c000aa18:	68 58 01 00 00       	push   0x158
c000aa1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa21:	e8 cc eb ff ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c000aa26:	83 c4 10             	add    esp,0x10
c000aa29:	83 c4 0c             	add    esp,0xc
c000aa2c:	c3                   	ret    
c000aa2d:	90                   	nop

c000aa2e <Device::findAndLoadDriver()>:
c000aa2e:	c7 44 24 04 ae e2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e2ae
c000aa36:	e9 98 ec ff ff       	jmp    c00096d3 <Dbg::kprintf(char const*, ...)>
c000aa3b:	90                   	nop

c000aa3c <Device::preOpenPCI(PCIDeviceInfo)>:
c000aa3c:	57                   	push   edi
c000aa3d:	b9 09 00 00 00       	mov    ecx,0x9
c000aa42:	56                   	push   esi
c000aa43:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000aa47:	8d 74 24 10          	lea    esi,[esp+0x10]
c000aa4b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000aa55:	81 c7 18 01 00 00    	add    edi,0x118
c000aa5b:	fc                   	cld    
c000aa5c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000aa5e:	5e                   	pop    esi
c000aa5f:	5f                   	pop    edi
c000aa60:	c3                   	ret    
c000aa61:	90                   	nop

c000aa62 <Device::preOpenACPI(void*, char*, char*)>:
c000aa62:	57                   	push   edi
c000aa63:	b9 1e 00 00 00       	mov    ecx,0x1e
c000aa68:	56                   	push   esi
c000aa69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aa71:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000aa7b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000aa81:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000aa87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000aa8b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aa8d:	b9 0e 00 00 00       	mov    ecx,0xe
c000aa92:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000aa98:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000aa9c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aa9e:	5e                   	pop    esi
c000aa9f:	5f                   	pop    edi
c000aaa0:	c3                   	ret    
c000aaa1:	90                   	nop

c000aaa2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000aaa2:	53                   	push   ebx
c000aaa3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aaa7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aaab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aaaf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aab3:	0f b6 c0             	movzx  eax,al
c000aab6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000aaba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aabe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000aac2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000aac6:	5b                   	pop    ebx
c000aac7:	e9 a4 05 00 00       	jmp    c000b070 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000aacc <Device::getParent()>:
c000aacc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aad0:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000aad6:	c3                   	ret    
c000aad7:	90                   	nop

c000aad8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000aad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000aadc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aae0:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000aae5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000aae9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000aaed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aaf1:	e9 d9 06 00 00       	jmp    c000b1cf <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000aaf6 <Device::addChild(Device*)>:
c000aaf6:	53                   	push   ebx
c000aaf7:	83 ec 08             	sub    esp,0x8
c000aafa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aafe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ab02:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ab08:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ab0e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ab10:	85 d2                	test   edx,edx
c000ab12:	74 04                	je     c000ab18 <Device::addChild(Device*)+0x22>
c000ab14:	89 d3                	mov    ebx,edx
c000ab16:	eb f6                	jmp    c000ab0e <Device::addChild(Device*)+0x18>
c000ab18:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab1b:	83 ec 0c             	sub    esp,0xc
c000ab1e:	6a 08                	push   0x8
c000ab20:	e8 24 be ff ff       	call   c0006949 <malloc>
c000ab25:	89 03                	mov    DWORD PTR [ebx],eax
c000ab27:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ab2d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ab34:	83 c4 18             	add    esp,0x18
c000ab37:	5b                   	pop    ebx
c000ab38:	c3                   	ret    
c000ab39:	90                   	nop

c000ab3a <Device::removeAllChildren()>:
c000ab3a:	56                   	push   esi
c000ab3b:	53                   	push   ebx
c000ab3c:	52                   	push   edx
c000ab3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ab41:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ab47:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ab4a:	74 17                	je     c000ab63 <Device::removeAllChildren()+0x29>
c000ab4c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab4f:	85 c0                	test   eax,eax
c000ab51:	74 0c                	je     c000ab5f <Device::removeAllChildren()+0x25>
c000ab53:	83 ec 0c             	sub    esp,0xc
c000ab56:	8b 10                	mov    edx,DWORD PTR [eax]
c000ab58:	50                   	push   eax
c000ab59:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ab5c:	83 c4 10             	add    esp,0x10
c000ab5f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ab61:	eb e4                	jmp    c000ab47 <Device::removeAllChildren()+0xd>
c000ab63:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ab69:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ab6f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ab75:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ab7c:	58                   	pop    eax
c000ab7d:	5b                   	pop    ebx
c000ab7e:	5e                   	pop    esi
c000ab7f:	c3                   	ret    

c000ab80 <Device::hibernateAll()>:
c000ab80:	53                   	push   ebx
c000ab81:	83 ec 14             	sub    esp,0x14
c000ab84:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ab88:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ab8a:	53                   	push   ebx
c000ab8b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ab8e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ab94:	83 c4 10             	add    esp,0x10
c000ab97:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ab9a:	74 0f                	je     c000abab <Device::hibernateAll()+0x2b>
c000ab9c:	83 ec 0c             	sub    esp,0xc
c000ab9f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000aba2:	e8 d9 ff ff ff       	call   c000ab80 <Device::hibernateAll()>
c000aba7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000aba9:	eb e9                	jmp    c000ab94 <Device::hibernateAll()+0x14>
c000abab:	83 c4 08             	add    esp,0x8
c000abae:	5b                   	pop    ebx
c000abaf:	c3                   	ret    

c000abb0 <Device::wakeAll()>:
c000abb0:	53                   	push   ebx
c000abb1:	83 ec 14             	sub    esp,0x14
c000abb4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000abb8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000abba:	53                   	push   ebx
c000abbb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000abbe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000abc4:	83 c4 10             	add    esp,0x10
c000abc7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000abca:	74 0f                	je     c000abdb <Device::wakeAll()+0x2b>
c000abcc:	83 ec 0c             	sub    esp,0xc
c000abcf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000abd2:	e8 d9 ff ff ff       	call   c000abb0 <Device::wakeAll()>
c000abd7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000abd9:	eb e9                	jmp    c000abc4 <Device::wakeAll()+0x14>
c000abdb:	83 c4 08             	add    esp,0x8
c000abde:	5b                   	pop    ebx
c000abdf:	c3                   	ret    

c000abe0 <Device::detectAll()>:
c000abe0:	53                   	push   ebx
c000abe1:	83 ec 14             	sub    esp,0x14
c000abe4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000abe8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000abea:	53                   	push   ebx
c000abeb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000abee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000abfa:	74 0f                	je     c000ac0b <Device::detectAll()+0x2b>
c000abfc:	83 ec 0c             	sub    esp,0xc
c000abff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ac02:	e8 d9 ff ff ff       	call   c000abe0 <Device::detectAll()>
c000ac07:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ac09:	eb e9                	jmp    c000abf4 <Device::detectAll()+0x14>
c000ac0b:	83 c4 08             	add    esp,0x8
c000ac0e:	5b                   	pop    ebx
c000ac0f:	c3                   	ret    

c000ac10 <Device::disableLegacyAll()>:
c000ac10:	c3                   	ret    
c000ac11:	90                   	nop

c000ac12 <Device::loadDriversForAll()>:
c000ac12:	c3                   	ret    
c000ac13:	90                   	nop

c000ac14 <Device::closeAll()>:
c000ac14:	53                   	push   ebx
c000ac15:	83 ec 08             	sub    esp,0x8
c000ac18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ac1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ac1e:	6a 00                	push   0x0
c000ac20:	6a 00                	push   0x0
c000ac22:	6a 00                	push   0x0
c000ac24:	53                   	push   ebx
c000ac25:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ac28:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ac34:	74 0f                	je     c000ac45 <Device::closeAll()+0x31>
c000ac36:	83 ec 0c             	sub    esp,0xc
c000ac39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ac3c:	e8 d3 ff ff ff       	call   c000ac14 <Device::closeAll()>
c000ac41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ac43:	eb e9                	jmp    c000ac2e <Device::closeAll()+0x1a>
c000ac45:	83 c4 08             	add    esp,0x8
c000ac48:	5b                   	pop    ebx
c000ac49:	c3                   	ret    

c000ac4a <Device::powerSavingAll(PowerSavingLevel)>:
c000ac4a:	56                   	push   esi
c000ac4b:	53                   	push   ebx
c000ac4c:	83 ec 0c             	sub    esp,0xc
c000ac4f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ac53:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ac57:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ac59:	56                   	push   esi
c000ac5a:	53                   	push   ebx
c000ac5b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000ac5e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ac6a:	74 0f                	je     c000ac7b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000ac6c:	52                   	push   edx
c000ac6d:	52                   	push   edx
c000ac6e:	56                   	push   esi
c000ac6f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ac72:	e8 d3 ff ff ff       	call   c000ac4a <Device::powerSavingAll(PowerSavingLevel)>
c000ac77:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ac79:	eb e9                	jmp    c000ac64 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000ac7b:	58                   	pop    eax
c000ac7c:	5b                   	pop    ebx
c000ac7d:	5e                   	pop    esi
c000ac7e:	c3                   	ret    
c000ac7f:	90                   	nop

c000ac80 <Device::setName(char const*)>:
c000ac80:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000ac88:	e9 d7 58 ff ff       	jmp    c0000564 <strcpy>
c000ac8d:	90                   	nop

c000ac8e <Device::Device(char const*)>:
c000ac8e:	83 ec 1c             	sub    esp,0x1c
c000ac91:	ba f0 e2 01 c0       	mov    edx,0xc001e2f0
c000ac96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ac9a:	89 10                	mov    DWORD PTR [eax],edx
c000ac9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aca0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000acaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000acae:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000acb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000acbc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000acc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000acca:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000acd4:	83 ec 08             	sub    esp,0x8
c000acd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000acdb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000acdf:	e8 9c ff ff ff       	call   c000ac80 <Device::setName(char const*)>
c000ace4:	83 c4 10             	add    esp,0x10
c000ace7:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000acef:	83 ec 0c             	sub    esp,0xc
c000acf2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf6:	e8 4e bc ff ff       	call   c0006949 <malloc>
c000acfb:	83 c4 10             	add    esp,0x10
c000acfe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ad04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ad0b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ad0f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000ad15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad19:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000ad1f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ad25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad29:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000ad2f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ad36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad3a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000ad41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad45:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000ad4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad50:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000ad5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad5e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000ad68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad6c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000ad76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad7a:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000ad84:	90                   	nop
c000ad85:	83 c4 1c             	add    esp,0x1c
c000ad88:	c3                   	ret    
c000ad89:	90                   	nop

c000ad8a <Device::getName()>:
c000ad8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad8e:	05 d0 00 00 00       	add    eax,0xd0
c000ad93:	c3                   	ret    

c000ad94 <DriverlessDevice::DriverlessDevice(char const*)>:
c000ad94:	83 ec 0c             	sub    esp,0xc
c000ad97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad9b:	83 ec 08             	sub    esp,0x8
c000ad9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ada2:	50                   	push   eax
c000ada3:	e8 e6 fe ff ff       	call   c000ac8e <Device::Device(char const*)>
c000ada8:	83 c4 10             	add    esp,0x10
c000adab:	ba 1c e3 01 c0       	mov    edx,0xc001e31c
c000adb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adb4:	89 10                	mov    DWORD PTR [eax],edx
c000adb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adba:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000adc4:	90                   	nop
c000adc5:	83 c4 0c             	add    esp,0xc
c000adc8:	c3                   	ret    
c000adc9:	90                   	nop

c000adca <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000adca:	57                   	push   edi
c000adcb:	56                   	push   esi
c000adcc:	53                   	push   ebx
c000adcd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000add1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000add5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000add9:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000addf:	75 0c                	jne    c000aded <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000ade1:	52                   	push   edx
c000ade2:	52                   	push   edx
c000ade3:	53                   	push   ebx
c000ade4:	56                   	push   esi
c000ade5:	e8 88 1b 01 00       	call   c001c972 <LinkedList<Device>::addElement(Device*)>
c000adea:	83 c4 10             	add    esp,0x10
c000aded:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000adf3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000adf6:	74 12                	je     c000ae0a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000adf8:	50                   	push   eax
c000adf9:	57                   	push   edi
c000adfa:	56                   	push   esi
c000adfb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000adfe:	e8 c7 ff ff ff       	call   c000adca <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ae03:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ae05:	83 c4 10             	add    esp,0x10
c000ae08:	eb e9                	jmp    c000adf3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000ae0a:	5b                   	pop    ebx
c000ae0b:	5e                   	pop    esi
c000ae0c:	5f                   	pop    edi
c000ae0d:	c3                   	ret    

c000ae0e <getDevicesOfType(DeviceType)>:
c000ae0e:	53                   	push   ebx
c000ae0f:	83 ec 14             	sub    esp,0x14
c000ae12:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ae16:	53                   	push   ebx
c000ae17:	e8 32 1c 01 00       	call   c001ca4e <LinkedList<Device>::LinkedList()>
c000ae1c:	83 c4 0c             	add    esp,0xc
c000ae1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ae23:	53                   	push   ebx
c000ae24:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c000ae2a:	e8 9b ff ff ff       	call   c000adca <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ae2f:	89 d8                	mov    eax,ebx
c000ae31:	83 c4 18             	add    esp,0x18
c000ae34:	5b                   	pop    ebx
c000ae35:	c2 04 00             	ret    0x4

c000ae38 <HardDiskController::HardDiskController(char const*)>:
c000ae38:	83 ec 0c             	sub    esp,0xc
c000ae3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae3f:	83 ec 08             	sub    esp,0x8
c000ae42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae46:	50                   	push   eax
c000ae47:	e8 42 fe ff ff       	call   c000ac8e <Device::Device(char const*)>
c000ae4c:	83 c4 10             	add    esp,0x10
c000ae4f:	ba 48 e3 01 c0       	mov    edx,0xc001e348
c000ae54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae58:	89 10                	mov    DWORD PTR [eax],edx
c000ae5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000ae68:	90                   	nop
c000ae69:	83 c4 0c             	add    esp,0xc
c000ae6c:	c3                   	ret    
c000ae6d:	90                   	nop
c000ae6e:	66 90                	xchg   ax,ax

c000ae70 <HardDiskController::~HardDiskController()>:
c000ae70:	83 ec 0c             	sub    esp,0xc
c000ae73:	ba 48 e3 01 c0       	mov    edx,0xc001e348
c000ae78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7c:	89 10                	mov    DWORD PTR [eax],edx
c000ae7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae82:	83 ec 0c             	sub    esp,0xc
c000ae85:	50                   	push   eax
c000ae86:	e8 6d fb ff ff       	call   c000a9f8 <Device::~Device()>
c000ae8b:	83 c4 10             	add    esp,0x10
c000ae8e:	90                   	nop
c000ae8f:	83 c4 0c             	add    esp,0xc
c000ae92:	c3                   	ret    
c000ae93:	90                   	nop

c000ae94 <HardDiskController::~HardDiskController()>:
c000ae94:	83 ec 0c             	sub    esp,0xc
c000ae97:	83 ec 0c             	sub    esp,0xc
c000ae9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae9e:	e8 cd ff ff ff       	call   c000ae70 <HardDiskController::~HardDiskController()>
c000aea3:	83 c4 10             	add    esp,0x10
c000aea6:	83 ec 08             	sub    esp,0x8
c000aea9:	68 58 01 00 00       	push   0x158
c000aeae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeb2:	e8 3b e7 ff ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	83 c4 0c             	add    esp,0xc
c000aebd:	c3                   	ret    

c000aebe <PhysicalDisk::eject()>:
c000aebe:	83 c8 ff             	or     eax,0xffffffff
c000aec1:	c3                   	ret    

c000aec2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000aec2:	83 ec 0c             	sub    esp,0xc
c000aec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec9:	83 ec 08             	sub    esp,0x8
c000aecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aed0:	50                   	push   eax
c000aed1:	e8 b8 fd ff ff       	call   c000ac8e <Device::Device(char const*)>
c000aed6:	83 c4 10             	add    esp,0x10
c000aed9:	ba 74 e3 01 c0       	mov    edx,0xc001e374
c000aede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee2:	89 10                	mov    DWORD PTR [eax],edx
c000aee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000aeef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aef3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000aefa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aefe:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000af08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af0c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af10:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000af16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af1a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000af24:	90                   	nop
c000af25:	83 c4 0c             	add    esp,0xc
c000af28:	c3                   	ret    
c000af29:	90                   	nop

c000af2a <PhysicalDisk::startCache()>:
c000af2a:	56                   	push   esi
c000af2b:	53                   	push   ebx
c000af2c:	83 ec 10             	sub    esp,0x10
c000af2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000af33:	6a 44                	push   0x44
c000af35:	e8 0f ba ff ff       	call   c0006949 <malloc>
c000af3a:	89 c6                	mov    esi,eax
c000af3c:	58                   	pop    eax
c000af3d:	5a                   	pop    edx
c000af3e:	53                   	push   ebx
c000af3f:	56                   	push   esi
c000af40:	e8 87 15 00 00       	call   c000c4cc <VCache::VCache(PhysicalDisk*)>
c000af45:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000af4b:	83 c4 14             	add    esp,0x14
c000af4e:	5b                   	pop    ebx
c000af4f:	5e                   	pop    esi
c000af50:	c3                   	ret    
c000af51:	90                   	nop

c000af52 <PhysicalDisk::~PhysicalDisk()>:
c000af52:	83 ec 0c             	sub    esp,0xc
c000af55:	ba 74 e3 01 c0       	mov    edx,0xc001e374
c000af5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af5e:	89 10                	mov    DWORD PTR [eax],edx
c000af60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af64:	83 ec 0c             	sub    esp,0xc
c000af67:	50                   	push   eax
c000af68:	e8 8b fa ff ff       	call   c000a9f8 <Device::~Device()>
c000af6d:	83 c4 10             	add    esp,0x10
c000af70:	90                   	nop
c000af71:	83 c4 0c             	add    esp,0xc
c000af74:	c3                   	ret    
c000af75:	90                   	nop

c000af76 <PhysicalDisk::~PhysicalDisk()>:
c000af76:	83 ec 0c             	sub    esp,0xc
c000af79:	83 ec 0c             	sub    esp,0xc
c000af7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af80:	e8 cd ff ff ff       	call   c000af52 <PhysicalDisk::~PhysicalDisk()>
c000af85:	83 c4 10             	add    esp,0x10
c000af88:	83 ec 08             	sub    esp,0x8
c000af8b:	68 6c 01 00 00       	push   0x16c
c000af90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af94:	e8 59 e6 ff ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c000af99:	83 c4 10             	add    esp,0x10
c000af9c:	83 c4 0c             	add    esp,0xc
c000af9f:	c3                   	ret    

c000afa0 <int_handler>:
c000afa0:	55                   	push   ebp
c000afa1:	57                   	push   edi
c000afa2:	56                   	push   esi
c000afa3:	53                   	push   ebx
c000afa4:	83 ec 0c             	sub    esp,0xc
c000afa7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000afab:	80 3d 04 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022e04,0x0
c000afb2:	74 0b                	je     c000afbf <int_handler+0x1f>
c000afb4:	fa                   	cli    
c000afb5:	f4                   	hlt    
c000afb6:	80 3d 04 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022e04,0x0
c000afbd:	75 f5                	jne    c000afb4 <int_handler+0x14>
c000afbf:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000afc2:	8d 46 e0             	lea    eax,[esi-0x20]
c000afc5:	83 f8 17             	cmp    eax,0x17
c000afc8:	76 3e                	jbe    c000b008 <int_handler+0x68>
c000afca:	c1 e6 04             	shl    esi,0x4
c000afcd:	31 db                	xor    ebx,ebx
c000afcf:	8d ae 80 14 02 c0    	lea    ebp,[esi-0x3ffdeb80]
c000afd5:	81 c6 80 04 02 c0    	add    esi,0xc0020480
c000afdb:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000afdf:	85 c0                	test   eax,eax
c000afe1:	74 13                	je     c000aff6 <int_handler+0x56>
c000afe3:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000afe6:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000afea:	74 2a                	je     c000b016 <int_handler+0x76>
c000afec:	83 ec 08             	sub    esp,0x8
c000afef:	52                   	push   edx
c000aff0:	57                   	push   edi
c000aff1:	ff d0                	call   eax
c000aff3:	83 c4 10             	add    esp,0x10
c000aff6:	43                   	inc    ebx
c000aff7:	83 fb 04             	cmp    ebx,0x4
c000affa:	75 df                	jne    c000afdb <int_handler+0x3b>
c000affc:	83 c4 0c             	add    esp,0xc
c000afff:	31 c0                	xor    eax,eax
c000b001:	5b                   	pop    ebx
c000b002:	31 d2                	xor    edx,edx
c000b004:	5e                   	pop    esi
c000b005:	5f                   	pop    edi
c000b006:	5d                   	pop    ebp
c000b007:	c3                   	ret    
c000b008:	83 ec 0c             	sub    esp,0xc
c000b00b:	50                   	push   eax
c000b00c:	e8 5f a7 00 00       	call   c0015770 <Hal::endOfInterrupt(int)>
c000b011:	83 c4 10             	add    esp,0x10
c000b014:	eb b4                	jmp    c000afca <int_handler+0x2a>
c000b016:	83 ec 08             	sub    esp,0x8
c000b019:	52                   	push   edx
c000b01a:	57                   	push   edi
c000b01b:	ff d0                	call   eax
c000b01d:	83 c4 10             	add    esp,0x10
c000b020:	83 c4 0c             	add    esp,0xc
c000b023:	5b                   	pop    ebx
c000b024:	5e                   	pop    esi
c000b025:	5f                   	pop    edi
c000b026:	5d                   	pop    ebp
c000b027:	c3                   	ret    

c000b028 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000b028:	56                   	push   esi
c000b029:	31 c0                	xor    eax,eax
c000b02b:	53                   	push   ebx
c000b02c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b030:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b034:	89 ca                	mov    edx,ecx
c000b036:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b03a:	c1 e2 04             	shl    edx,0x4
c000b03d:	83 bc 82 80 14 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdeb80],0x0
c000b045:	74 15                	je     c000b05c <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000b047:	40                   	inc    eax
c000b048:	83 f8 04             	cmp    eax,0x4
c000b04b:	75 f0                	jne    c000b03d <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000b04d:	c7 44 24 0c a4 e3 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e3a4
c000b055:	5b                   	pop    ebx
c000b056:	5e                   	pop    esi
c000b057:	e9 4d 43 00 00       	jmp    c000f3a9 <Krnl::panic(char const*)>
c000b05c:	8d 04 88             	lea    eax,[eax+ecx*4]
c000b05f:	89 1c 85 80 14 02 c0 	mov    DWORD PTR [eax*4-0x3ffdeb80],ebx
c000b066:	89 34 85 80 04 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfb80],esi
c000b06d:	5b                   	pop    ebx
c000b06e:	5e                   	pop    esi
c000b06f:	c3                   	ret    

c000b070 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b070:	57                   	push   edi
c000b071:	8b 15 68 03 02 c0    	mov    edx,DWORD PTR ds:0xc0020368
c000b077:	56                   	push   esi
c000b078:	53                   	push   ebx
c000b079:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b07d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b081:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000b088:	74 55                	je     c000b0df <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6f>
c000b08a:	89 c7                	mov    edi,eax
c000b08c:	84 c0                	test   al,al
c000b08e:	74 1e                	je     c000b0ae <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c000b090:	83 fe 0f             	cmp    esi,0xf
c000b093:	0f 8f cc 00 00 00    	jg     c000b165 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf5>
c000b099:	0f b6 b6 20 fd 01 c0 	movzx  esi,BYTE PTR [esi-0x3ffe02e0]
c000b0a0:	66 8b bc 36 20 2c 02 c0 	mov    di,WORD PTR [esi+esi*1-0x3ffdd3e0]
c000b0a8:	66 d1 ef             	shr    di,1
c000b0ab:	83 e7 01             	and    edi,0x1
c000b0ae:	83 ec 08             	sub    esp,0x8
c000b0b1:	31 db                	xor    ebx,ebx
c000b0b3:	ff 35 a0 42 02 c0    	push   DWORD PTR ds:0xc00242a0
c000b0b9:	68 b1 e3 01 c0       	push   0xc001e3b1
c000b0be:	e8 10 e6 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c000b0c3:	83 c4 10             	add    esp,0x10
c000b0c6:	a1 a0 42 02 c0       	mov    eax,ds:0xc00242a0
c000b0cb:	85 c0                	test   eax,eax
c000b0cd:	7f 51                	jg     c000b120 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb0>
c000b0cf:	83 ec 0c             	sub    esp,0xc
c000b0d2:	68 c8 e3 01 c0       	push   0xc001e3c8
c000b0d7:	e8 cd 42 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c000b0dc:	83 c4 10             	add    esp,0x10
c000b0df:	8d 4e 20             	lea    ecx,[esi+0x20]
c000b0e2:	31 d2                	xor    edx,edx
c000b0e4:	89 c8                	mov    eax,ecx
c000b0e6:	c1 e0 04             	shl    eax,0x4
c000b0e9:	8b 9c 90 80 14 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdeb80]
c000b0f0:	85 db                	test   ebx,ebx
c000b0f2:	0f 84 84 00 00 00    	je     c000b17c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10c>
c000b0f8:	42                   	inc    edx
c000b0f9:	83 fa 04             	cmp    edx,0x4
c000b0fc:	75 eb                	jne    c000b0e9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c000b0fe:	83 ec 0c             	sub    esp,0xc
c000b101:	68 1c e4 01 c0       	push   0xc001e41c
c000b106:	e8 9e 42 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b113:	5b                   	pop    ebx
c000b114:	5e                   	pop    esi
c000b115:	5f                   	pop    edi
c000b116:	c3                   	ret    
c000b117:	43                   	inc    ebx
c000b118:	39 1d a0 42 02 c0    	cmp    DWORD PTR ds:0xc00242a0,ebx
c000b11e:	7e af                	jle    c000b0cf <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c000b120:	83 ec 08             	sub    esp,0x8
c000b123:	56                   	push   esi
c000b124:	ff 34 9d c0 42 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbd40]
c000b12b:	e8 8c 08 01 00       	call   c001b9bc <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	84 c0                	test   al,al
c000b135:	74 e0                	je     c000b117 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa7>
c000b137:	50                   	push   eax
c000b138:	89 f8                	mov    eax,edi
c000b13a:	0f b6 f8             	movzx  edi,al
c000b13d:	8d 46 20             	lea    eax,[esi+0x20]
c000b140:	57                   	push   edi
c000b141:	0f b6 c0             	movzx  eax,al
c000b144:	6a 00                	push   0x0
c000b146:	50                   	push   eax
c000b147:	89 f0                	mov    eax,esi
c000b149:	6a 00                	push   0x0
c000b14b:	0f b6 c0             	movzx  eax,al
c000b14e:	6a 00                	push   0x0
c000b150:	50                   	push   eax
c000b151:	ff 34 9d c0 42 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbd40]
c000b158:	e8 c9 09 01 00       	call   c001bb26 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000b15d:	83 c4 20             	add    esp,0x20
c000b160:	e9 7a ff ff ff       	jmp    c000b0df <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6f>
c000b165:	83 ec 0c             	sub    esp,0xc
c000b168:	31 ff                	xor    edi,edi
c000b16a:	68 e4 e3 01 c0       	push   0xc001e3e4
c000b16f:	e8 35 42 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c000b174:	83 c4 10             	add    esp,0x10
c000b177:	e9 32 ff ff ff       	jmp    c000b0ae <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c000b17c:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b17f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b183:	89 14 85 80 14 02 c0 	mov    DWORD PTR [eax*4-0x3ffdeb80],edx
c000b18a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b18e:	5b                   	pop    ebx
c000b18f:	89 14 85 80 04 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfb80],edx
c000b196:	89 f0                	mov    eax,esi
c000b198:	5e                   	pop    esi
c000b199:	5f                   	pop    edi
c000b19a:	c3                   	ret    

c000b19b <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000b19b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b19f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b1a3:	c1 e0 04             	shl    eax,0x4
c000b1a6:	8d 50 10             	lea    edx,[eax+0x10]
c000b1a9:	39 88 80 14 02 c0    	cmp    DWORD PTR [eax-0x3ffdeb80],ecx
c000b1af:	74 08                	je     c000b1b9 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000b1b1:	83 c0 04             	add    eax,0x4
c000b1b4:	39 d0                	cmp    eax,edx
c000b1b6:	75 f1                	jne    c000b1a9 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000b1b8:	c3                   	ret    
c000b1b9:	c7 80 80 14 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeb80],0x0
c000b1c3:	c7 80 80 04 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfb80],0x0
c000b1cd:	eb e2                	jmp    c000b1b1 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000b1cf <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b1cf:	53                   	push   ebx
c000b1d0:	83 ec 08             	sub    esp,0x8
c000b1d3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b1d7:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000b1dc:	74 0e                	je     c000b1ec <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000b1de:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c000b1e3:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c000b1ea:	75 37                	jne    c000b223 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000b1ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f0:	83 c0 20             	add    eax,0x20
c000b1f3:	c1 e0 04             	shl    eax,0x4
c000b1f6:	8d 50 10             	lea    edx,[eax+0x10]
c000b1f9:	39 98 80 14 02 c0    	cmp    DWORD PTR [eax-0x3ffdeb80],ebx
c000b1ff:	74 0c                	je     c000b20d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000b201:	83 c0 04             	add    eax,0x4
c000b204:	39 d0                	cmp    eax,edx
c000b206:	75 f1                	jne    c000b1f9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000b208:	83 c4 08             	add    esp,0x8
c000b20b:	5b                   	pop    ebx
c000b20c:	c3                   	ret    
c000b20d:	c7 80 80 14 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeb80],0x0
c000b217:	c7 80 80 04 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfb80],0x0
c000b221:	eb de                	jmp    c000b201 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000b223:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000b228:	7f 11                	jg     c000b23b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000b22a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b22e:	0f b6 80 20 fd 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe02e0]
c000b235:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b239:	eb b1                	jmp    c000b1ec <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000b23b:	83 ec 0c             	sub    esp,0xc
c000b23e:	68 d5 e3 01 c0       	push   0xc001e3d5
c000b243:	e8 61 41 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c000b248:	83 c4 10             	add    esp,0x10
c000b24b:	eb 9f                	jmp    c000b1ec <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000b24d <setupINTS()>:
c000b24d:	31 c0                	xor    eax,eax
c000b24f:	c7 80 80 14 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeb80],0x0
c000b259:	c7 80 80 04 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfb80],0x0
c000b263:	c7 80 84 14 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeb7c],0x0
c000b26d:	c7 80 84 04 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfb7c],0x0
c000b277:	c7 80 88 14 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeb78],0x0
c000b281:	c7 80 88 04 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfb78],0x0
c000b28b:	c7 80 8c 14 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeb74],0x0
c000b295:	c7 80 8c 04 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfb74],0x0
c000b29f:	83 c0 10             	add    eax,0x10
c000b2a2:	3d 00 10 00 00       	cmp    eax,0x1000
c000b2a7:	75 a6                	jne    c000b24f <setupINTS()+0x2>
c000b2a9:	c3                   	ret    

c000b2aa <convertLegacyIRQNumber(int)>:
c000b2aa:	83 ec 0c             	sub    esp,0xc
c000b2ad:	8b 15 68 03 02 c0    	mov    edx,DWORD PTR ds:0xc0020368
c000b2b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2b7:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000b2be:	74 0c                	je     c000b2cc <convertLegacyIRQNumber(int)+0x22>
c000b2c0:	83 f8 0f             	cmp    eax,0xf
c000b2c3:	7f 0b                	jg     c000b2d0 <convertLegacyIRQNumber(int)+0x26>
c000b2c5:	0f b6 80 20 fd 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe02e0]
c000b2cc:	83 c4 0c             	add    esp,0xc
c000b2cf:	c3                   	ret    
c000b2d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b2d4:	83 ec 0c             	sub    esp,0xc
c000b2d7:	68 e4 e3 01 c0       	push   0xc001e3e4
c000b2dc:	e8 c8 40 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c000b2e1:	83 c4 10             	add    esp,0x10
c000b2e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2e8:	83 c4 0c             	add    esp,0xc
c000b2eb:	c3                   	ret    

c000b2ec <startGUI(void*)>:
c000b2ec:	55                   	push   ebp
c000b2ed:	89 e5                	mov    ebp,esp
c000b2ef:	53                   	push   ebx
c000b2f0:	83 ec 04             	sub    esp,0x4
c000b2f3:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000b2f8:	48                   	dec    eax
c000b2f9:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c000b2fe:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000b303:	85 c0                	test   eax,eax
c000b305:	75 01                	jne    c000b308 <startGUI(void*)+0x1c>
c000b307:	fb                   	sti    
c000b308:	8b 1d 68 03 02 c0    	mov    ebx,DWORD PTR ds:0xc0020368
c000b30e:	83 ec 08             	sub    esp,0x8
c000b311:	6a 01                	push   0x1
c000b313:	68 41 e4 01 c0       	push   0xc001e441
c000b318:	e8 31 6b 00 00       	call   c0011e4e <Thr::loadDLL(char const*, bool)>
c000b31d:	83 c4 10             	add    esp,0x10
c000b320:	83 ec 08             	sub    esp,0x8
c000b323:	53                   	push   ebx
c000b324:	50                   	push   eax
c000b325:	e8 55 6d 00 00       	call   c001207f <Thr::executeDLL(unsigned long, void*)>
c000b32a:	83 c4 10             	add    esp,0x10
c000b32d:	8b 1d 68 03 02 c0    	mov    ebx,DWORD PTR ds:0xc0020368
c000b333:	83 ec 08             	sub    esp,0x8
c000b336:	6a 01                	push   0x1
c000b338:	68 5b e4 01 c0       	push   0xc001e45b
c000b33d:	e8 0c 6b 00 00       	call   c0011e4e <Thr::loadDLL(char const*, bool)>
c000b342:	83 c4 10             	add    esp,0x10
c000b345:	83 ec 08             	sub    esp,0x8
c000b348:	53                   	push   ebx
c000b349:	50                   	push   eax
c000b34a:	e8 30 6d 00 00       	call   c001207f <Thr::executeDLL(unsigned long, void*)>
c000b34f:	83 c4 10             	add    esp,0x10
c000b352:	90                   	nop
c000b353:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000b356:	c9                   	leave  
c000b357:	c3                   	ret    

c000b358 <startGUIVESA(void*)>:
c000b358:	55                   	push   ebp
c000b359:	89 e5                	mov    ebp,esp
c000b35b:	53                   	push   ebx
c000b35c:	83 ec 04             	sub    esp,0x4
c000b35f:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000b364:	48                   	dec    eax
c000b365:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c000b36a:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000b36f:	85 c0                	test   eax,eax
c000b371:	75 01                	jne    c000b374 <startGUIVESA(void*)+0x1c>
c000b373:	fb                   	sti    
c000b374:	8b 1d 68 03 02 c0    	mov    ebx,DWORD PTR ds:0xc0020368
c000b37a:	83 ec 08             	sub    esp,0x8
c000b37d:	6a 01                	push   0x1
c000b37f:	68 79 e4 01 c0       	push   0xc001e479
c000b384:	e8 c5 6a 00 00       	call   c0011e4e <Thr::loadDLL(char const*, bool)>
c000b389:	83 c4 10             	add    esp,0x10
c000b38c:	83 ec 08             	sub    esp,0x8
c000b38f:	53                   	push   ebx
c000b390:	50                   	push   eax
c000b391:	e8 e9 6c 00 00       	call   c001207f <Thr::executeDLL(unsigned long, void*)>
c000b396:	83 c4 10             	add    esp,0x10
c000b399:	8b 1d 68 03 02 c0    	mov    ebx,DWORD PTR ds:0xc0020368
c000b39f:	83 ec 08             	sub    esp,0x8
c000b3a2:	6a 01                	push   0x1
c000b3a4:	68 5b e4 01 c0       	push   0xc001e45b
c000b3a9:	e8 a0 6a 00 00       	call   c0011e4e <Thr::loadDLL(char const*, bool)>
c000b3ae:	83 c4 10             	add    esp,0x10
c000b3b1:	83 ec 08             	sub    esp,0x8
c000b3b4:	53                   	push   ebx
c000b3b5:	50                   	push   eax
c000b3b6:	e8 c4 6c 00 00       	call   c001207f <Thr::executeDLL(unsigned long, void*)>
c000b3bb:	83 c4 10             	add    esp,0x10
c000b3be:	90                   	nop
c000b3bf:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000b3c2:	c9                   	leave  
c000b3c3:	c3                   	ret    

c000b3c4 <sendKeyToTerminal(unsigned char)>:
c000b3c4:	55                   	push   ebp
c000b3c5:	89 e5                	mov    ebp,esp
c000b3c7:	83 ec 28             	sub    esp,0x28
c000b3ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3cd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000b3d0:	a1 b4 03 02 c0       	mov    eax,ds:0xc00203b4
c000b3d5:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000b3d9:	83 ec 08             	sub    esp,0x8
c000b3dc:	52                   	push   edx
c000b3dd:	50                   	push   eax
c000b3de:	e8 d1 c8 ff ff       	call   c0007cb4 <VgaText::receiveKey(unsigned char)>
c000b3e3:	83 c4 10             	add    esp,0x10
c000b3e6:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000b3ea:	0f 85 8f 00 00 00    	jne    c000b47f <sendKeyToTerminal(unsigned char)+0xbb>
c000b3f0:	fa                   	cli    
c000b3f1:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000b3f6:	40                   	inc    eax
c000b3f7:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c000b3fc:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c000b401:	40                   	inc    eax
c000b402:	a3 44 38 02 c0       	mov    ds:0xc0023844,eax
c000b407:	a1 80 24 02 c0       	mov    eax,ds:0xc0022480
c000b40c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000b40f:	c7 05 80 24 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022480,0x0
c000b419:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000b41d:	74 1f                	je     c000b43e <sendKeyToTerminal(unsigned char)+0x7a>
c000b41f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000b422:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000b425:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000b428:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b42b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000b42e:	83 ec 0c             	sub    esp,0xc
c000b431:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b434:	e8 af 78 00 00       	call   c0012ce8 <unblockTask(ThreadControlBlock*)>
c000b439:	83 c4 10             	add    esp,0x10
c000b43c:	eb db                	jmp    c000b419 <sendKeyToTerminal(unsigned char)+0x55>
c000b43e:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c000b443:	48                   	dec    eax
c000b444:	a3 44 38 02 c0       	mov    ds:0xc0023844,eax
c000b449:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c000b44e:	85 c0                	test   eax,eax
c000b450:	75 18                	jne    c000b46a <sendKeyToTerminal(unsigned char)+0xa6>
c000b452:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c000b457:	85 c0                	test   eax,eax
c000b459:	74 0f                	je     c000b46a <sendKeyToTerminal(unsigned char)+0xa6>
c000b45b:	c7 05 40 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x0
c000b465:	e8 c2 73 00 00       	call   c001282c <schedule()>
c000b46a:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000b46f:	48                   	dec    eax
c000b470:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c000b475:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000b47a:	85 c0                	test   eax,eax
c000b47c:	75 01                	jne    c000b47f <sendKeyToTerminal(unsigned char)+0xbb>
c000b47e:	fb                   	sti    
c000b47f:	90                   	nop
c000b480:	c9                   	leave  
c000b481:	c3                   	ret    

c000b482 <sendKeyboardToken(KeyboardToken)>:
c000b482:	55                   	push   ebp
c000b483:	89 e5                	mov    ebp,esp
c000b485:	83 ec 18             	sub    esp,0x18
c000b488:	e8 e1 41 00 00       	call   c000f66e <Krnl::userIOReceived()>
c000b48d:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000b490:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b493:	0f b7 c0             	movzx  eax,ax
c000b496:	83 f2 01             	xor    edx,0x1
c000b499:	88 90 a0 24 02 c0    	mov    BYTE PTR [eax-0x3ffddb60],dl
c000b49f:	a1 88 24 02 c0       	mov    eax,ds:0xc0022488
c000b4a4:	85 c0                	test   eax,eax
c000b4a6:	74 24                	je     c000b4cc <sendKeyboardToken(KeyboardToken)+0x4a>
c000b4a8:	8b 0d 88 24 02 c0    	mov    ecx,DWORD PTR ds:0xc0022488
c000b4ae:	83 ec 04             	sub    esp,0x4
c000b4b1:	68 a0 24 02 c0       	push   0xc00224a0
c000b4b6:	83 ec 08             	sub    esp,0x8
c000b4b9:	89 e2                	mov    edx,esp
c000b4bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b4be:	89 02                	mov    DWORD PTR [edx],eax
c000b4c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b4c3:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000b4c7:	ff d1                	call   ecx
c000b4c9:	83 c4 10             	add    esp,0x10
c000b4cc:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000b4d0:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000b4d3:	a0 a8 28 02 c0       	mov    al,ds:0xc00228a8
c000b4d8:	38 c2                	cmp    dl,al
c000b4da:	74 1c                	je     c000b4f8 <sendKeyboardToken(KeyboardToken)+0x76>
c000b4dc:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000b4df:	a2 a8 28 02 c0       	mov    ds:0xc00228a8,al
c000b4e4:	a0 a8 28 02 c0       	mov    al,ds:0xc00228a8
c000b4e9:	0f b6 c0             	movzx  eax,al
c000b4ec:	83 ec 0c             	sub    esp,0xc
c000b4ef:	50                   	push   eax
c000b4f0:	e8 15 bf ff ff       	call   c000740a <setTerminalScrollLock(bool)>
c000b4f5:	83 c4 10             	add    esp,0x10
c000b4f8:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000b4fb:	84 c0                	test   al,al
c000b4fd:	0f 84 ae 00 00 00    	je     c000b5b1 <sendKeyboardToken(KeyboardToken)+0x12f>
c000b503:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b506:	66 3d 10 03          	cmp    ax,0x310
c000b50a:	75 06                	jne    c000b512 <sendKeyboardToken(KeyboardToken)+0x90>
c000b50c:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000b512:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b515:	66 3d 11 03          	cmp    ax,0x311
c000b519:	75 06                	jne    c000b521 <sendKeyboardToken(KeyboardToken)+0x9f>
c000b51b:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000b521:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b524:	66 3d 12 03          	cmp    ax,0x312
c000b528:	75 06                	jne    c000b530 <sendKeyboardToken(KeyboardToken)+0xae>
c000b52a:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000b530:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b533:	66 3d 13 03          	cmp    ax,0x313
c000b537:	75 06                	jne    c000b53f <sendKeyboardToken(KeyboardToken)+0xbd>
c000b539:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000b53f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b542:	66 3d 14 03          	cmp    ax,0x314
c000b546:	75 06                	jne    c000b54e <sendKeyboardToken(KeyboardToken)+0xcc>
c000b548:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000b54e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b551:	66 3d 15 03          	cmp    ax,0x315
c000b555:	75 06                	jne    c000b55d <sendKeyboardToken(KeyboardToken)+0xdb>
c000b557:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000b55d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b560:	66 3d 16 03          	cmp    ax,0x316
c000b564:	75 06                	jne    c000b56c <sendKeyboardToken(KeyboardToken)+0xea>
c000b566:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000b56c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b56f:	66 3d 17 03          	cmp    ax,0x317
c000b573:	75 06                	jne    c000b57b <sendKeyboardToken(KeyboardToken)+0xf9>
c000b575:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000b57b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b57e:	66 3d 18 03          	cmp    ax,0x318
c000b582:	75 06                	jne    c000b58a <sendKeyboardToken(KeyboardToken)+0x108>
c000b584:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000b58a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b58d:	66 3d 19 03          	cmp    ax,0x319
c000b591:	75 06                	jne    c000b599 <sendKeyboardToken(KeyboardToken)+0x117>
c000b593:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000b599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b59c:	66 3d 1a 03          	cmp    ax,0x31a
c000b5a0:	0f 85 c9 00 00 00    	jne    c000b66f <sendKeyboardToken(KeyboardToken)+0x1ed>
c000b5a6:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000b5ac:	e9 be 00 00 00       	jmp    c000b66f <sendKeyboardToken(KeyboardToken)+0x1ed>
c000b5b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b5b4:	66 3d 10 03          	cmp    ax,0x310
c000b5b8:	75 0a                	jne    c000b5c4 <sendKeyboardToken(KeyboardToken)+0x142>
c000b5ba:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000b5c0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b5c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b5c7:	66 3d 11 03          	cmp    ax,0x311
c000b5cb:	75 0a                	jne    c000b5d7 <sendKeyboardToken(KeyboardToken)+0x155>
c000b5cd:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000b5d3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b5d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b5da:	66 3d 12 03          	cmp    ax,0x312
c000b5de:	75 0a                	jne    c000b5ea <sendKeyboardToken(KeyboardToken)+0x168>
c000b5e0:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000b5e6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b5ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b5ed:	66 3d 13 03          	cmp    ax,0x313
c000b5f1:	75 0a                	jne    c000b5fd <sendKeyboardToken(KeyboardToken)+0x17b>
c000b5f3:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000b5f9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b5fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b600:	66 3d 14 03          	cmp    ax,0x314
c000b604:	75 0a                	jne    c000b610 <sendKeyboardToken(KeyboardToken)+0x18e>
c000b606:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000b60c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b610:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b613:	66 3d 15 03          	cmp    ax,0x315
c000b617:	75 0a                	jne    c000b623 <sendKeyboardToken(KeyboardToken)+0x1a1>
c000b619:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000b61f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b623:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b626:	66 3d 16 03          	cmp    ax,0x316
c000b62a:	75 0a                	jne    c000b636 <sendKeyboardToken(KeyboardToken)+0x1b4>
c000b62c:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000b632:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b636:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b639:	66 3d 17 03          	cmp    ax,0x317
c000b63d:	75 0a                	jne    c000b649 <sendKeyboardToken(KeyboardToken)+0x1c7>
c000b63f:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000b645:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b649:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b64c:	66 3d 18 03          	cmp    ax,0x318
c000b650:	75 0a                	jne    c000b65c <sendKeyboardToken(KeyboardToken)+0x1da>
c000b652:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000b658:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b65c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b65f:	66 3d 19 03          	cmp    ax,0x319
c000b663:	75 0a                	jne    c000b66f <sendKeyboardToken(KeyboardToken)+0x1ed>
c000b665:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000b66b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b66f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b672:	66 3d 00 02          	cmp    ax,0x200
c000b676:	75 2c                	jne    c000b6a4 <sendKeyboardToken(KeyboardToken)+0x222>
c000b678:	a0 a0 28 02 c0       	mov    al,ds:0xc00228a0
c000b67d:	83 f0 01             	xor    eax,0x1
c000b680:	84 c0                	test   al,al
c000b682:	74 20                	je     c000b6a4 <sendKeyboardToken(KeyboardToken)+0x222>
c000b684:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c000b689:	6a 01                	push   0x1
c000b68b:	6a 00                	push   0x0
c000b68d:	68 ec b2 00 c0       	push   0xc000b2ec
c000b692:	50                   	push   eax
c000b693:	e8 78 6f 00 00       	call   c0012610 <Process::createThread(void (*)(void*), void*, int)>
c000b698:	83 c4 10             	add    esp,0x10
c000b69b:	c6 05 a0 28 02 c0 01 	mov    BYTE PTR ds:0xc00228a0,0x1
c000b6a2:	eb 33                	jmp    c000b6d7 <sendKeyboardToken(KeyboardToken)+0x255>
c000b6a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6a7:	66 3d 01 02          	cmp    ax,0x201
c000b6ab:	75 2a                	jne    c000b6d7 <sendKeyboardToken(KeyboardToken)+0x255>
c000b6ad:	a0 a0 28 02 c0       	mov    al,ds:0xc00228a0
c000b6b2:	83 f0 01             	xor    eax,0x1
c000b6b5:	84 c0                	test   al,al
c000b6b7:	74 1e                	je     c000b6d7 <sendKeyboardToken(KeyboardToken)+0x255>
c000b6b9:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c000b6be:	6a 01                	push   0x1
c000b6c0:	6a 00                	push   0x0
c000b6c2:	68 58 b3 00 c0       	push   0xc000b358
c000b6c7:	50                   	push   eax
c000b6c8:	e8 43 6f 00 00       	call   c0012610 <Process::createThread(void (*)(void*), void*, int)>
c000b6cd:	83 c4 10             	add    esp,0x10
c000b6d0:	c6 05 a0 28 02 c0 01 	mov    BYTE PTR ds:0xc00228a0,0x1
c000b6d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6da:	66 3d 1d 03          	cmp    ax,0x31d
c000b6de:	75 06                	jne    c000b6e6 <sendKeyboardToken(KeyboardToken)+0x264>
c000b6e0:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000b6e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6e9:	66 3d 1c 03          	cmp    ax,0x31c
c000b6ed:	75 06                	jne    c000b6f5 <sendKeyboardToken(KeyboardToken)+0x273>
c000b6ef:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000b6f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6f8:	66 3d 1b 03          	cmp    ax,0x31b
c000b6fc:	75 06                	jne    c000b704 <sendKeyboardToken(KeyboardToken)+0x282>
c000b6fe:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000b704:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b707:	66 3d 1e 03          	cmp    ax,0x31e
c000b70b:	75 06                	jne    c000b713 <sendKeyboardToken(KeyboardToken)+0x291>
c000b70d:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000b713:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b716:	66 3d 1f 03          	cmp    ax,0x31f
c000b71a:	75 06                	jne    c000b722 <sendKeyboardToken(KeyboardToken)+0x2a0>
c000b71c:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000b722:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b725:	66 3d 1a 03          	cmp    ax,0x31a
c000b729:	75 06                	jne    c000b731 <sendKeyboardToken(KeyboardToken)+0x2af>
c000b72b:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000b731:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000b735:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000b738:	83 f0 01             	xor    eax,0x1
c000b73b:	84 c0                	test   al,al
c000b73d:	74 77                	je     c000b7b6 <sendKeyboardToken(KeyboardToken)+0x334>
c000b73f:	a0 a1 25 02 c0       	mov    al,ds:0xc00225a1
c000b744:	84 c0                	test   al,al
c000b746:	74 41                	je     c000b789 <sendKeyboardToken(KeyboardToken)+0x307>
c000b748:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000b74c:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000b750:	74 2b                	je     c000b77d <sendKeyboardToken(KeyboardToken)+0x2fb>
c000b752:	8b 15 a4 28 02 c0    	mov    edx,DWORD PTR ds:0xc00228a4
c000b758:	89 d0                	mov    eax,edx
c000b75a:	c1 e0 02             	shl    eax,0x2
c000b75d:	01 d0                	add    eax,edx
c000b75f:	01 c0                	add    eax,eax
c000b761:	a3 a4 28 02 c0       	mov    ds:0xc00228a4,eax
c000b766:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b769:	0f b7 c0             	movzx  eax,ax
c000b76c:	8d 50 d0             	lea    edx,[eax-0x30]
c000b76f:	a1 a4 28 02 c0       	mov    eax,ds:0xc00228a4
c000b774:	01 d0                	add    eax,edx
c000b776:	a3 a4 28 02 c0       	mov    ds:0xc00228a4,eax
c000b77b:	eb 6d                	jmp    c000b7ea <sendKeyboardToken(KeyboardToken)+0x368>
c000b77d:	c7 05 a4 28 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00228a4,0x0
c000b787:	eb 61                	jmp    c000b7ea <sendKeyboardToken(KeyboardToken)+0x368>
c000b789:	a1 a4 28 02 c0       	mov    eax,ds:0xc00228a4
c000b78e:	85 c0                	test   eax,eax
c000b790:	74 18                	je     c000b7aa <sendKeyboardToken(KeyboardToken)+0x328>
c000b792:	a1 a4 28 02 c0       	mov    eax,ds:0xc00228a4
c000b797:	0f b6 c0             	movzx  eax,al
c000b79a:	83 ec 0c             	sub    esp,0xc
c000b79d:	50                   	push   eax
c000b79e:	e8 21 fc ff ff       	call   c000b3c4 <sendKeyToTerminal(unsigned char)>
c000b7a3:	83 c4 10             	add    esp,0x10
c000b7a6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000b7aa:	c7 05 a4 28 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00228a4,0x0
c000b7b4:	eb 34                	jmp    c000b7ea <sendKeyboardToken(KeyboardToken)+0x368>
c000b7b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7b9:	66 3d 01 01          	cmp    ax,0x101
c000b7bd:	75 2b                	jne    c000b7ea <sendKeyboardToken(KeyboardToken)+0x368>
c000b7bf:	a1 a4 28 02 c0       	mov    eax,ds:0xc00228a4
c000b7c4:	85 c0                	test   eax,eax
c000b7c6:	74 18                	je     c000b7e0 <sendKeyboardToken(KeyboardToken)+0x35e>
c000b7c8:	a1 a4 28 02 c0       	mov    eax,ds:0xc00228a4
c000b7cd:	0f b6 c0             	movzx  eax,al
c000b7d0:	83 ec 0c             	sub    esp,0xc
c000b7d3:	50                   	push   eax
c000b7d4:	e8 eb fb ff ff       	call   c000b3c4 <sendKeyToTerminal(unsigned char)>
c000b7d9:	83 c4 10             	add    esp,0x10
c000b7dc:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000b7e0:	c7 05 a4 28 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00228a4,0x0
c000b7ea:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000b7ed:	83 f0 01             	xor    eax,0x1
c000b7f0:	84 c0                	test   al,al
c000b7f2:	74 4c                	je     c000b840 <sendKeyboardToken(KeyboardToken)+0x3be>
c000b7f4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000b7f7:	83 f0 01             	xor    eax,0x1
c000b7fa:	84 c0                	test   al,al
c000b7fc:	74 42                	je     c000b840 <sendKeyboardToken(KeyboardToken)+0x3be>
c000b7fe:	a0 a0 25 02 c0       	mov    al,ds:0xc00225a0
c000b803:	83 f0 01             	xor    eax,0x1
c000b806:	84 c0                	test   al,al
c000b808:	74 36                	je     c000b840 <sendKeyboardToken(KeyboardToken)+0x3be>
c000b80a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b80d:	66 83 f8 1f          	cmp    ax,0x1f
c000b811:	76 09                	jbe    c000b81c <sendKeyboardToken(KeyboardToken)+0x39a>
c000b813:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b816:	66 83 f8 7e          	cmp    ax,0x7e
c000b81a:	76 12                	jbe    c000b82e <sendKeyboardToken(KeyboardToken)+0x3ac>
c000b81c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b81f:	66 83 f8 0a          	cmp    ax,0xa
c000b823:	74 09                	je     c000b82e <sendKeyboardToken(KeyboardToken)+0x3ac>
c000b825:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b828:	66 83 f8 08          	cmp    ax,0x8
c000b82c:	75 12                	jne    c000b840 <sendKeyboardToken(KeyboardToken)+0x3be>
c000b82e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b831:	0f b6 c0             	movzx  eax,al
c000b834:	83 ec 0c             	sub    esp,0xc
c000b837:	50                   	push   eax
c000b838:	e8 87 fb ff ff       	call   c000b3c4 <sendKeyToTerminal(unsigned char)>
c000b83d:	83 c4 10             	add    esp,0x10
c000b840:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000b843:	83 f0 01             	xor    eax,0x1
c000b846:	84 c0                	test   al,al
c000b848:	74 4f                	je     c000b899 <sendKeyboardToken(KeyboardToken)+0x417>
c000b84a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000b84d:	83 f0 01             	xor    eax,0x1
c000b850:	84 c0                	test   al,al
c000b852:	74 45                	je     c000b899 <sendKeyboardToken(KeyboardToken)+0x417>
c000b854:	a0 a0 25 02 c0       	mov    al,ds:0xc00225a0
c000b859:	84 c0                	test   al,al
c000b85b:	74 3c                	je     c000b899 <sendKeyboardToken(KeyboardToken)+0x417>
c000b85d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b860:	66 83 f8 3f          	cmp    ax,0x3f
c000b864:	76 33                	jbe    c000b899 <sendKeyboardToken(KeyboardToken)+0x417>
c000b866:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b869:	66 83 f8 7f          	cmp    ax,0x7f
c000b86d:	77 2a                	ja     c000b899 <sendKeyboardToken(KeyboardToken)+0x417>
c000b86f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b872:	88 c2                	mov    dl,al
c000b874:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b877:	66 83 f8 5f          	cmp    ax,0x5f
c000b87b:	76 04                	jbe    c000b881 <sendKeyboardToken(KeyboardToken)+0x3ff>
c000b87d:	b0 20                	mov    al,0x20
c000b87f:	eb 02                	jmp    c000b883 <sendKeyboardToken(KeyboardToken)+0x401>
c000b881:	b0 00                	mov    al,0x0
c000b883:	29 c2                	sub    edx,eax
c000b885:	88 d0                	mov    al,dl
c000b887:	83 e8 40             	sub    eax,0x40
c000b88a:	0f b6 c0             	movzx  eax,al
c000b88d:	83 ec 0c             	sub    esp,0xc
c000b890:	50                   	push   eax
c000b891:	e8 2e fb ff ff       	call   c000b3c4 <sendKeyToTerminal(unsigned char)>
c000b896:	83 c4 10             	add    esp,0x10
c000b899:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b89c:	66 3d 00 03          	cmp    ax,0x300
c000b8a0:	75 0f                	jne    c000b8b1 <sendKeyboardToken(KeyboardToken)+0x42f>
c000b8a2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000b8a5:	83 f0 01             	xor    eax,0x1
c000b8a8:	84 c0                	test   al,al
c000b8aa:	74 05                	je     c000b8b1 <sendKeyboardToken(KeyboardToken)+0x42f>
c000b8ac:	e8 5a bb ff ff       	call   c000740b <doTerminalCycle()>
c000b8b1:	90                   	nop
c000b8b2:	c9                   	leave  
c000b8b3:	c3                   	ret    

c000b8b4 <clearInternalKeybuffer(VgaText*)>:
c000b8b4:	55                   	push   ebp
c000b8b5:	89 e5                	mov    ebp,esp
c000b8b7:	83 ec 08             	sub    esp,0x8
c000b8ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8bd:	05 b2 00 00 00       	add    eax,0xb2
c000b8c2:	83 ec 0c             	sub    esp,0xc
c000b8c5:	50                   	push   eax
c000b8c6:	e8 f9 4b ff ff       	call   c00004c4 <strlen>
c000b8cb:	83 c4 10             	add    esp,0x10
c000b8ce:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b8d1:	81 c2 b2 00 00 00    	add    edx,0xb2
c000b8d7:	83 ec 04             	sub    esp,0x4
c000b8da:	50                   	push   eax
c000b8db:	6a 00                	push   0x0
c000b8dd:	52                   	push   edx
c000b8de:	e8 c5 4b ff ff       	call   c00004a8 <memset>
c000b8e3:	83 c4 10             	add    esp,0x10
c000b8e6:	90                   	nop
c000b8e7:	c9                   	leave  
c000b8e8:	c3                   	ret    

c000b8e9 <readKeyboard(VgaText*, char*, unsigned long)>:
c000b8e9:	55                   	push   ebp
c000b8ea:	89 e5                	mov    ebp,esp
c000b8ec:	83 ec 18             	sub    esp,0x18
c000b8ef:	a1 88 24 02 c0       	mov    eax,ds:0xc0022488
c000b8f4:	85 c0                	test   eax,eax
c000b8f6:	74 2a                	je     c000b922 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000b8f8:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000b8fe:	8b 0d 88 24 02 c0    	mov    ecx,DWORD PTR ds:0xc0022488
c000b904:	83 ec 04             	sub    esp,0x4
c000b907:	68 a0 24 02 c0       	push   0xc00224a0
c000b90c:	83 ec 08             	sub    esp,0x8
c000b90f:	89 e2                	mov    edx,esp
c000b911:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000b914:	89 02                	mov    DWORD PTR [edx],eax
c000b916:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000b919:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000b91d:	ff d1                	call   ecx
c000b91f:	83 c4 10             	add    esp,0x10
c000b922:	fb                   	sti    
c000b923:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000b92a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000b92e:	0f 84 a1 00 00 00    	je     c000b9d5 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000b934:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b937:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000b93d:	84 c0                	test   al,al
c000b93f:	75 28                	jne    c000b969 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000b941:	fa                   	cli    
c000b942:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000b947:	40                   	inc    eax
c000b948:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c000b94d:	e8 da 6e 00 00       	call   c001282c <schedule()>
c000b952:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000b957:	48                   	dec    eax
c000b958:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c000b95d:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000b962:	85 c0                	test   eax,eax
c000b964:	75 ce                	jne    c000b934 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000b966:	fb                   	sti    
c000b967:	eb cb                	jmp    c000b934 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000b969:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b96c:	8d 50 01             	lea    edx,[eax+0x1]
c000b96f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000b972:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b975:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000b97b:	88 10                	mov    BYTE PTR [eax],dl
c000b97d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b980:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000b986:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000b989:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b98c:	05 b2 00 00 00       	add    eax,0xb2
c000b991:	83 ec 0c             	sub    esp,0xc
c000b994:	50                   	push   eax
c000b995:	e8 2a 4b ff ff       	call   c00004c4 <strlen>
c000b99a:	83 c4 10             	add    esp,0x10
c000b99d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b9a0:	81 c2 b2 00 00 00    	add    edx,0xb2
c000b9a6:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b9a9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b9ac:	81 c2 b2 00 00 00    	add    edx,0xb2
c000b9b2:	83 ec 04             	sub    esp,0x4
c000b9b5:	50                   	push   eax
c000b9b6:	51                   	push   ecx
c000b9b7:	52                   	push   edx
c000b9b8:	e8 23 4a ff ff       	call   c00003e0 <memmove>
c000b9bd:	83 c4 10             	add    esp,0x10
c000b9c0:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000b9c3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000b9c6:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000b9ca:	0f 85 5a ff ff ff    	jne    c000b92a <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000b9d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000b9d3:	eb 03                	jmp    c000b9d8 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000b9d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000b9d8:	c9                   	leave  
c000b9d9:	c3                   	ret    

c000b9da <Keyboard::Keyboard(char const*)>:
c000b9da:	83 ec 0c             	sub    esp,0xc
c000b9dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9e1:	83 ec 08             	sub    esp,0x8
c000b9e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9e8:	50                   	push   eax
c000b9e9:	e8 a0 f2 ff ff       	call   c000ac8e <Device::Device(char const*)>
c000b9ee:	83 c4 10             	add    esp,0x10
c000b9f1:	ba 9c e4 01 c0       	mov    edx,0xc001e49c
c000b9f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9fa:	89 10                	mov    DWORD PTR [eax],edx
c000b9fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba00:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000ba0a:	c6 05 84 24 02 c0 01 	mov    BYTE PTR ds:0xc0022484,0x1
c000ba11:	90                   	nop
c000ba12:	83 c4 0c             	add    esp,0xc
c000ba15:	c3                   	ret    

c000ba16 <Keyboard::~Keyboard()>:
c000ba16:	83 ec 0c             	sub    esp,0xc
c000ba19:	ba 9c e4 01 c0       	mov    edx,0xc001e49c
c000ba1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba22:	89 10                	mov    DWORD PTR [eax],edx
c000ba24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba28:	83 ec 0c             	sub    esp,0xc
c000ba2b:	50                   	push   eax
c000ba2c:	e8 c7 ef ff ff       	call   c000a9f8 <Device::~Device()>
c000ba31:	83 c4 10             	add    esp,0x10
c000ba34:	90                   	nop
c000ba35:	83 c4 0c             	add    esp,0xc
c000ba38:	c3                   	ret    
c000ba39:	90                   	nop

c000ba3a <Keyboard::~Keyboard()>:
c000ba3a:	83 ec 0c             	sub    esp,0xc
c000ba3d:	83 ec 0c             	sub    esp,0xc
c000ba40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba44:	e8 cd ff ff ff       	call   c000ba16 <Keyboard::~Keyboard()>
c000ba49:	83 c4 10             	add    esp,0x10
c000ba4c:	83 ec 08             	sub    esp,0x8
c000ba4f:	68 5c 01 00 00       	push   0x15c
c000ba54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba58:	e8 95 db ff ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c000ba5d:	83 c4 10             	add    esp,0x10
c000ba60:	83 c4 0c             	add    esp,0xc
c000ba63:	c3                   	ret    

c000ba64 <LogicalDisk::close(int, int, void*)>:
c000ba64:	83 c8 ff             	or     eax,0xffffffff
c000ba67:	c3                   	ret    

c000ba68 <LogicalDisk::~LogicalDisk()>:
c000ba68:	83 ec 0c             	sub    esp,0xc
c000ba6b:	ba 14 e5 01 c0       	mov    edx,0xc001e514
c000ba70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba74:	89 10                	mov    DWORD PTR [eax],edx
c000ba76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba7a:	83 ec 0c             	sub    esp,0xc
c000ba7d:	50                   	push   eax
c000ba7e:	e8 75 ef ff ff       	call   c000a9f8 <Device::~Device()>
c000ba83:	83 c4 10             	add    esp,0x10
c000ba86:	90                   	nop
c000ba87:	83 c4 0c             	add    esp,0xc
c000ba8a:	c3                   	ret    
c000ba8b:	90                   	nop

c000ba8c <LogicalDisk::~LogicalDisk()>:
c000ba8c:	83 ec 0c             	sub    esp,0xc
c000ba8f:	83 ec 0c             	sub    esp,0xc
c000ba92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba96:	e8 cd ff ff ff       	call   c000ba68 <LogicalDisk::~LogicalDisk()>
c000ba9b:	83 c4 10             	add    esp,0x10
c000ba9e:	83 ec 08             	sub    esp,0x8
c000baa1:	68 74 01 00 00       	push   0x174
c000baa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baaa:	e8 43 db ff ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c000baaf:	83 c4 10             	add    esp,0x10
c000bab2:	83 c4 0c             	add    esp,0xc
c000bab5:	c3                   	ret    

c000bab6 <LogicalDisk::open(int, int, void*)>:
c000bab6:	83 ec 18             	sub    esp,0x18
c000bab9:	68 c8 e4 01 c0       	push   0xc001e4c8
c000babe:	e8 e6 38 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c000bac3:	83 c8 ff             	or     eax,0xffffffff
c000bac6:	83 c4 1c             	add    esp,0x1c
c000bac9:	c3                   	ret    

c000baca <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000baca:	53                   	push   ebx
c000bacb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bacf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bad3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bad7:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000badd:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000bae3:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000bae9:	77 10                	ja     c000bafb <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000baeb:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000baf1:	89 d3                	mov    ebx,edx
c000baf3:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000baf9:	72 05                	jb     c000bb00 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000bafb:	83 c8 ff             	or     eax,0xffffffff
c000bafe:	89 c2                	mov    edx,eax
c000bb00:	5b                   	pop    ebx
c000bb01:	c3                   	ret    

c000bb02 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000bb02:	56                   	push   esi
c000bb03:	83 c8 ff             	or     eax,0xffffffff
c000bb06:	53                   	push   ebx
c000bb07:	89 c2                	mov    edx,eax
c000bb09:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bb0d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bb11:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bb15:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000bb1b:	77 27                	ja     c000bb44 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000bb1d:	89 d8                	mov    eax,ebx
c000bb1f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000bb25:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000bb2b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bb30:	89 c2                	mov    edx,eax
c000bb32:	73 10                	jae    c000bb44 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000bb34:	89 c8                	mov    eax,ecx
c000bb36:	89 da                	mov    edx,ebx
c000bb38:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000bb3e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000bb44:	5b                   	pop    ebx
c000bb45:	5e                   	pop    esi
c000bb46:	c3                   	ret    
c000bb47:	90                   	nop

c000bb48 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000bb48:	83 ec 1c             	sub    esp,0x1c
c000bb4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bb57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bb5b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bb5f:	89 04 24             	mov    DWORD PTR [esp],eax
c000bb62:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bb66:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bb6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb6e:	83 ec 08             	sub    esp,0x8
c000bb71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb75:	50                   	push   eax
c000bb76:	e8 13 f1 ff ff       	call   c000ac8e <Device::Device(char const*)>
c000bb7b:	83 c4 10             	add    esp,0x10
c000bb7e:	ba 14 e5 01 c0       	mov    edx,0xc001e514
c000bb83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb87:	89 10                	mov    DWORD PTR [eax],edx
c000bb89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb8d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bb94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb98:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bb9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bba3:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000bbad:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000bbb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bbb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bbb9:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000bbbf:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000bbc5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000bbc9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000bbcc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bbd0:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000bbd6:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000bbdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbe0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbe4:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000bbea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbee:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000bbf8:	90                   	nop
c000bbf9:	83 c4 1c             	add    esp,0x1c
c000bbfc:	c3                   	ret    
c000bbfd:	90                   	nop

c000bbfe <LogicalDisk::assignDriveLetter()>:
c000bbfe:	55                   	push   ebp
c000bbff:	57                   	push   edi
c000bc00:	56                   	push   esi
c000bc01:	53                   	push   ebx
c000bc02:	83 ec 14             	sub    esp,0x14
c000bc05:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bc09:	8b 3d c0 28 02 c0    	mov    edi,DWORD PTR ds:0xc00228c0
c000bc0f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000bc15:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000bc19:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000bc1f:	8b 3d c4 28 02 c0    	mov    edi,DWORD PTR ds:0xc00228c4
c000bc25:	3c 01                	cmp    al,0x1
c000bc27:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000bc2b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000bc2f:	19 c0                	sbb    eax,eax
c000bc31:	83 e0 02             	and    eax,0x2
c000bc34:	83 c0 41             	add    eax,0x41
c000bc37:	0f be e8             	movsx  ebp,al
c000bc3a:	3c 43                	cmp    al,0x43
c000bc3c:	75 10                	jne    c000bc4e <LogicalDisk::assignDriveLetter()+0x50>
c000bc3e:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000bc45:	75 5d                	jne    c000bca4 <LogicalDisk::assignDriveLetter()+0xa6>
c000bc47:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000bc4c:	75 56                	jne    c000bca4 <LogicalDisk::assignDriveLetter()+0xa6>
c000bc4e:	8d 75 bf             	lea    esi,[ebp-0x41]
c000bc51:	ba 01 00 00 00       	mov    edx,0x1
c000bc56:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000bc5a:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000bc5e:	d3 e2                	shl    edx,cl
c000bc60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bc64:	89 d7                	mov    edi,edx
c000bc66:	89 d6                	mov    esi,edx
c000bc68:	c1 ff 1f             	sar    edi,0x1f
c000bc6b:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000bc6f:	21 f9                	and    ecx,edi
c000bc71:	09 d1                	or     ecx,edx
c000bc73:	75 2f                	jne    c000bca4 <LogicalDisk::assignDriveLetter()+0xa6>
c000bc75:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000bc79:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bc7d:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000bc83:	09 f2                	or     edx,esi
c000bc85:	89 15 c0 28 02 c0    	mov    DWORD PTR ds:0xc00228c0,edx
c000bc8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bc8f:	09 fa                	or     edx,edi
c000bc91:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000bc95:	89 15 c4 28 02 c0    	mov    DWORD PTR ds:0xc00228c4,edx
c000bc9b:	89 1c bd e0 28 02 c0 	mov    DWORD PTR [edi*4-0x3ffdd720],ebx
c000bca2:	eb 08                	jmp    c000bcac <LogicalDisk::assignDriveLetter()+0xae>
c000bca4:	45                   	inc    ebp
c000bca5:	40                   	inc    eax
c000bca6:	3c 5b                	cmp    al,0x5b
c000bca8:	75 90                	jne    c000bc3a <LogicalDisk::assignDriveLetter()+0x3c>
c000bcaa:	31 c0                	xor    eax,eax
c000bcac:	83 c4 14             	add    esp,0x14
c000bcaf:	5b                   	pop    ebx
c000bcb0:	5e                   	pop    esi
c000bcb1:	5f                   	pop    edi
c000bcb2:	5d                   	pop    ebp
c000bcb3:	c3                   	ret    

c000bcb4 <LogicalDisk::mount()>:
c000bcb4:	56                   	push   esi
c000bcb5:	53                   	push   ebx
c000bcb6:	53                   	push   ebx
c000bcb7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bcbb:	8b 1d 58 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020458
c000bcc1:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000bccb:	85 db                	test   ebx,ebx
c000bccd:	74 27                	je     c000bcf6 <LogicalDisk::mount()+0x42>
c000bccf:	51                   	push   ecx
c000bcd0:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000bcd7:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bcd9:	83 e8 41             	sub    eax,0x41
c000bcdc:	50                   	push   eax
c000bcdd:	56                   	push   esi
c000bcde:	53                   	push   ebx
c000bcdf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000bce2:	83 c4 10             	add    esp,0x10
c000bce5:	84 c0                	test   al,al
c000bce7:	74 08                	je     c000bcf1 <LogicalDisk::mount()+0x3d>
c000bce9:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000bcef:	eb 07                	jmp    c000bcf8 <LogicalDisk::mount()+0x44>
c000bcf1:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000bcf4:	eb d5                	jmp    c000bccb <LogicalDisk::mount()+0x17>
c000bcf6:	31 c0                	xor    eax,eax
c000bcf8:	5a                   	pop    edx
c000bcf9:	5b                   	pop    ebx
c000bcfa:	5e                   	pop    esi
c000bcfb:	c3                   	ret    

c000bcfc <LogicalDisk::unmount()>:
c000bcfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd00:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000bd0a:	c3                   	ret    
c000bd0b:	90                   	nop

c000bd0c <LogicalDisk::eject()>:
c000bd0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd10:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000bd16:	8b 10                	mov    edx,DWORD PTR [eax]
c000bd18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bd1c:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000bd1f:	90                   	nop

c000bd20 <LogicalDisk::unassignDriveLetter()>:
c000bd20:	57                   	push   edi
c000bd21:	56                   	push   esi
c000bd22:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd26:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000bd2d:	84 c9                	test   cl,cl
c000bd2f:	75 0f                	jne    c000bd40 <LogicalDisk::unassignDriveLetter()+0x20>
c000bd31:	c7 44 24 0c ec e4 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e4ec
c000bd39:	5e                   	pop    esi
c000bd3a:	5f                   	pop    edi
c000bd3b:	e9 69 36 00 00       	jmp    c000f3a9 <Krnl::panic(char const*)>
c000bd40:	83 e9 41             	sub    ecx,0x41
c000bd43:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000bd4a:	b8 01 00 00 00       	mov    eax,0x1
c000bd4f:	c7 04 8d e0 28 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdd720],0x0
c000bd5a:	d3 e0                	shl    eax,cl
c000bd5c:	89 c7                	mov    edi,eax
c000bd5e:	f7 d0                	not    eax
c000bd60:	c1 ff 1f             	sar    edi,0x1f
c000bd63:	21 05 c0 28 02 c0    	and    DWORD PTR ds:0xc00228c0,eax
c000bd69:	89 fe                	mov    esi,edi
c000bd6b:	f7 d6                	not    esi
c000bd6d:	21 35 c4 28 02 c0    	and    DWORD PTR ds:0xc00228c4,esi
c000bd73:	5e                   	pop    esi
c000bd74:	5f                   	pop    edi
c000bd75:	c3                   	ret    

c000bd76 <LogicalDisk::read(unsigned long long, int, void*)>:
c000bd76:	57                   	push   edi
c000bd77:	56                   	push   esi
c000bd78:	53                   	push   ebx
c000bd79:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bd7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd81:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bd89:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000bd8f:	77 41                	ja     c000bdd2 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000bd91:	99                   	cdq    
c000bd92:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000bd98:	01 c8                	add    eax,ecx
c000bd9a:	11 da                	adc    edx,ebx
c000bd9c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000bda2:	19 d7                	sbb    edi,edx
c000bda4:	72 33                	jb     c000bdd9 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000bda6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000bdac:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000bdb2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000bdb6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000bdba:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000bdc0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000bdc6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bdca:	5b                   	pop    ebx
c000bdcb:	5e                   	pop    esi
c000bdcc:	5f                   	pop    edi
c000bdcd:	e9 34 0a 00 00       	jmp    c000c806 <VCache::read(unsigned long long, int, void*)>
c000bdd2:	b8 05 00 00 00       	mov    eax,0x5
c000bdd7:	eb 05                	jmp    c000bdde <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000bdd9:	b8 07 00 00 00       	mov    eax,0x7
c000bdde:	5b                   	pop    ebx
c000bddf:	5e                   	pop    esi
c000bde0:	5f                   	pop    edi
c000bde1:	c3                   	ret    

c000bde2 <LogicalDisk::write(unsigned long long, int, void*)>:
c000bde2:	57                   	push   edi
c000bde3:	56                   	push   esi
c000bde4:	53                   	push   ebx
c000bde5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bde9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bded:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bdf1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bdf5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000bdfb:	77 41                	ja     c000be3e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000bdfd:	99                   	cdq    
c000bdfe:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000be04:	01 c8                	add    eax,ecx
c000be06:	11 da                	adc    edx,ebx
c000be08:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000be0e:	19 d7                	sbb    edi,edx
c000be10:	72 33                	jb     c000be45 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000be12:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000be18:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000be1e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000be22:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000be26:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000be2c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000be32:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be36:	5b                   	pop    ebx
c000be37:	5e                   	pop    esi
c000be38:	5f                   	pop    edi
c000be39:	e9 ce 08 00 00       	jmp    c000c70c <VCache::write(unsigned long long, int, void*)>
c000be3e:	b8 05 00 00 00       	mov    eax,0x5
c000be43:	eb 05                	jmp    c000be4a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000be45:	b8 07 00 00 00       	mov    eax,0x7
c000be4a:	5b                   	pop    ebx
c000be4b:	5e                   	pop    esi
c000be4c:	5f                   	pop    edi
c000be4d:	c3                   	ret    
c000be4e:	66 90                	xchg   ax,ax

c000be50 <Mouse::Mouse(char const*)>:
c000be50:	83 ec 0c             	sub    esp,0xc
c000be53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be57:	83 ec 08             	sub    esp,0x8
c000be5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be5e:	50                   	push   eax
c000be5f:	e8 2a ee ff ff       	call   c000ac8e <Device::Device(char const*)>
c000be64:	83 c4 10             	add    esp,0x10
c000be67:	ba 40 e5 01 c0       	mov    edx,0xc001e540
c000be6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be70:	89 10                	mov    DWORD PTR [eax],edx
c000be72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be76:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000be80:	90                   	nop
c000be81:	83 c4 0c             	add    esp,0xc
c000be84:	c3                   	ret    
c000be85:	90                   	nop
c000be86:	66 90                	xchg   ax,ax

c000be88 <Mouse::~Mouse()>:
c000be88:	83 ec 0c             	sub    esp,0xc
c000be8b:	ba 40 e5 01 c0       	mov    edx,0xc001e540
c000be90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be94:	89 10                	mov    DWORD PTR [eax],edx
c000be96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be9a:	83 ec 0c             	sub    esp,0xc
c000be9d:	50                   	push   eax
c000be9e:	e8 55 eb ff ff       	call   c000a9f8 <Device::~Device()>
c000bea3:	83 c4 10             	add    esp,0x10
c000bea6:	90                   	nop
c000bea7:	83 c4 0c             	add    esp,0xc
c000beaa:	c3                   	ret    
c000beab:	90                   	nop

c000beac <Mouse::~Mouse()>:
c000beac:	83 ec 0c             	sub    esp,0xc
c000beaf:	83 ec 0c             	sub    esp,0xc
c000beb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000beb6:	e8 cd ff ff ff       	call   c000be88 <Mouse::~Mouse()>
c000bebb:	83 c4 10             	add    esp,0x10
c000bebe:	83 ec 08             	sub    esp,0x8
c000bec1:	68 58 01 00 00       	push   0x158
c000bec6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000beca:	e8 23 d7 ff ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c000becf:	83 c4 10             	add    esp,0x10
c000bed2:	83 c4 0c             	add    esp,0xc
c000bed5:	c3                   	ret    

c000bed6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000bed6:	55                   	push   ebp
c000bed7:	57                   	push   edi
c000bed8:	56                   	push   esi
c000bed9:	53                   	push   ebx
c000beda:	81 ec 28 01 00 00    	sub    esp,0x128
c000bee0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000bee7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000beee:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000bef5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000befc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bf00:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bf04:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000bf0b:	e8 7a ee ff ff       	call   c000ad8a <Device::getName()>
c000bf10:	5a                   	pop    edx
c000bf11:	59                   	pop    ecx
c000bf12:	50                   	push   eax
c000bf13:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000bf17:	55                   	push   ebp
c000bf18:	e8 47 46 ff ff       	call   c0000564 <strcpy>
c000bf1d:	5b                   	pop    ebx
c000bf1e:	58                   	pop    eax
c000bf1f:	68 64 e5 01 c0       	push   0xc001e564
c000bf24:	55                   	push   ebp
c000bf25:	e8 7a 47 ff ff       	call   c00006a4 <strcat>
c000bf2a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000bf31:	e8 13 aa ff ff       	call   c0006949 <malloc>
c000bf36:	83 c4 0c             	add    esp,0xc
c000bf39:	89 c3                	mov    ebx,eax
c000bf3b:	57                   	push   edi
c000bf3c:	56                   	push   esi
c000bf3d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bf41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bf45:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000bf4c:	55                   	push   ebp
c000bf4d:	50                   	push   eax
c000bf4e:	e8 f5 fb ff ff       	call   c000bb48 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000bf53:	83 c4 14             	add    esp,0x14
c000bf56:	53                   	push   ebx
c000bf57:	e8 a2 fc ff ff       	call   c000bbfe <LogicalDisk::assignDriveLetter()>
c000bf5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bf5f:	e8 50 fd ff ff       	call   c000bcb4 <LogicalDisk::mount()>
c000bf64:	58                   	pop    eax
c000bf65:	5a                   	pop    edx
c000bf66:	53                   	push   ebx
c000bf67:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000bf6e:	e8 83 eb ff ff       	call   c000aaf6 <Device::addChild(Device*)>
c000bf73:	81 c4 2c 01 00 00    	add    esp,0x12c
c000bf79:	5b                   	pop    ebx
c000bf7a:	5e                   	pop    esi
c000bf7b:	5f                   	pop    edi
c000bf7c:	5d                   	pop    ebp
c000bf7d:	c3                   	ret    

c000bf7e <createPartitionsForDisk(PhysicalDisk*)>:
c000bf7e:	55                   	push   ebp
c000bf7f:	57                   	push   edi
c000bf80:	56                   	push   esi
c000bf81:	53                   	push   ebx
c000bf82:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000bf88:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000bf8f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000bf95:	3d 00 02 00 00       	cmp    eax,0x200
c000bf9a:	74 27                	je     c000bfc3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000bf9c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000bfa2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000bfa8:	83 ec 10             	sub    esp,0x10
c000bfab:	0f a4 f7 0a          	shld   edi,esi,0xa
c000bfaf:	99                   	cdq    
c000bfb0:	c1 e6 0a             	shl    esi,0xa
c000bfb3:	52                   	push   edx
c000bfb4:	89 fd                	mov    ebp,edi
c000bfb6:	50                   	push   eax
c000bfb7:	55                   	push   ebp
c000bfb8:	56                   	push   esi
c000bfb9:	e8 02 05 01 00       	call   c001c4c0 <__udivdi3>
c000bfbe:	e9 b1 00 00 00       	jmp    c000c074 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000bfc3:	83 ec 0c             	sub    esp,0xc
c000bfc6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfc8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000bfcc:	56                   	push   esi
c000bfcd:	6a 01                	push   0x1
c000bfcf:	6a 00                	push   0x0
c000bfd1:	6a 00                	push   0x0
c000bfd3:	53                   	push   ebx
c000bfd4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bfd7:	83 c4 20             	add    esp,0x20
c000bfda:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000bfe2:	75 0a                	jne    c000bfee <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000bfe4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000bfec:	74 2c                	je     c000c01a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000bfee:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000bff4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000bffa:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c000:	83 ec 10             	sub    esp,0x10
c000c003:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c007:	89 f7                	mov    edi,esi
c000c009:	c1 e0 0a             	shl    eax,0xa
c000c00c:	c1 ff 1f             	sar    edi,0x1f
c000c00f:	57                   	push   edi
c000c010:	56                   	push   esi
c000c011:	52                   	push   edx
c000c012:	50                   	push   eax
c000c013:	e8 a8 04 01 00       	call   c001c4c0 <__udivdi3>
c000c018:	eb 5a                	jmp    c000c074 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000c01a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000c021:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000c028:	83 e1 7f             	and    ecx,0x7f
c000c02b:	83 e0 7f             	and    eax,0x7f
c000c02e:	01 c1                	add    ecx,eax
c000c030:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000c037:	83 e0 7f             	and    eax,0x7f
c000c03a:	01 c1                	add    ecx,eax
c000c03c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000c043:	83 e0 7f             	and    eax,0x7f
c000c046:	00 c1                	add    cl,al
c000c048:	74 41                	je     c000c08b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000c04a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c050:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c056:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c05c:	83 ec 10             	sub    esp,0x10
c000c05f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c063:	89 f7                	mov    edi,esi
c000c065:	c1 e0 0a             	shl    eax,0xa
c000c068:	c1 ff 1f             	sar    edi,0x1f
c000c06b:	57                   	push   edi
c000c06c:	56                   	push   esi
c000c06d:	52                   	push   edx
c000c06e:	50                   	push   eax
c000c06f:	e8 4c 04 01 00       	call   c001c4c0 <__udivdi3>
c000c074:	83 c4 14             	add    esp,0x14
c000c077:	52                   	push   edx
c000c078:	50                   	push   eax
c000c079:	6a 00                	push   0x0
c000c07b:	6a 00                	push   0x0
c000c07d:	53                   	push   ebx
c000c07e:	e8 53 fe ff ff       	call   c000bed6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000c083:	83 c4 20             	add    esp,0x20
c000c086:	e9 79 01 00 00       	jmp    c000c204 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000c08b:	89 f0                	mov    eax,esi
c000c08d:	31 f6                	xor    esi,esi
c000c08f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000c096:	75 02                	jne    c000c09a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000c098:	89 f1                	mov    ecx,esi
c000c09a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000c0a1:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000c0a8:	c1 e2 08             	shl    edx,0x8
c000c0ab:	c1 e7 10             	shl    edi,0x10
c000c0ae:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000c0b6:	09 fa                	or     edx,edi
c000c0b8:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000c0c0:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000c0c7:	83 c0 10             	add    eax,0x10
c000c0ca:	09 fa                	or     edx,edi
c000c0cc:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000c0d3:	c1 e7 18             	shl    edi,0x18
c000c0d6:	09 fa                	or     edx,edi
c000c0d8:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000c0df:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000c0e3:	c1 e7 10             	shl    edi,0x10
c000c0e6:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000c0ed:	c1 e2 08             	shl    edx,0x8
c000c0f0:	09 fa                	or     edx,edi
c000c0f2:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000c0f9:	09 fa                	or     edx,edi
c000c0fb:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000c102:	c1 e7 18             	shl    edi,0x18
c000c105:	09 fa                	or     edx,edi
c000c107:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000c10b:	46                   	inc    esi
c000c10c:	83 fe 04             	cmp    esi,0x4
c000c10f:	0f 85 7a ff ff ff    	jne    c000c08f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000c115:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c119:	83 f0 01             	xor    eax,0x1
c000c11c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c120:	75 57                	jne    c000c179 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000c122:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c126:	83 f0 01             	xor    eax,0x1
c000c129:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c12d:	75 4a                	jne    c000c179 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000c12f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000c133:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000c13b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c143:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c149:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c14f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c155:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c159:	89 f7                	mov    edi,esi
c000c15b:	c1 e0 0a             	shl    eax,0xa
c000c15e:	c1 ff 1f             	sar    edi,0x1f
c000c161:	57                   	push   edi
c000c162:	56                   	push   esi
c000c163:	52                   	push   edx
c000c164:	50                   	push   eax
c000c165:	e8 56 03 01 00       	call   c001c4c0 <__udivdi3>
c000c16a:	83 c4 10             	add    esp,0x10
c000c16d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c171:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c175:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000c179:	84 c9                	test   cl,cl
c000c17b:	74 53                	je     c000c1d0 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000c17d:	0f b6 c9             	movzx  ecx,cl
c000c180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c184:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c188:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c18c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c190:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c194:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c198:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000c19c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000c1a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c1a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c1a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1b0:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000c1b4:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000c1b8:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000c1bc:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000c1c0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1c4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c1c8:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000c1cc:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000c1d0:	31 ed                	xor    ebp,ebp
c000c1d2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000c1d6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000c1da:	89 f8                	mov    eax,edi
c000c1dc:	09 f0                	or     eax,esi
c000c1de:	74 1e                	je     c000c1fe <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000c1e0:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000c1e4:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000c1e8:	89 d1                	mov    ecx,edx
c000c1ea:	09 c1                	or     ecx,eax
c000c1ec:	74 10                	je     c000c1fe <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000c1ee:	83 ec 0c             	sub    esp,0xc
c000c1f1:	57                   	push   edi
c000c1f2:	56                   	push   esi
c000c1f3:	52                   	push   edx
c000c1f4:	50                   	push   eax
c000c1f5:	53                   	push   ebx
c000c1f6:	e8 db fc ff ff       	call   c000bed6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000c1fb:	83 c4 20             	add    esp,0x20
c000c1fe:	45                   	inc    ebp
c000c1ff:	83 fd 04             	cmp    ebp,0x4
c000c202:	75 ce                	jne    c000c1d2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000c204:	81 c4 5c 02 00 00    	add    esp,0x25c
c000c20a:	5b                   	pop    ebx
c000c20b:	5e                   	pop    esi
c000c20c:	5f                   	pop    edi
c000c20d:	5d                   	pop    ebp
c000c20e:	c3                   	ret    
c000c20f:	90                   	nop

c000c210 <Serial::Serial(char const*)>:
c000c210:	83 ec 0c             	sub    esp,0xc
c000c213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c217:	83 ec 08             	sub    esp,0x8
c000c21a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c21e:	50                   	push   eax
c000c21f:	e8 6a ea ff ff       	call   c000ac8e <Device::Device(char const*)>
c000c224:	83 c4 10             	add    esp,0x10
c000c227:	ba 78 e5 01 c0       	mov    edx,0xc001e578
c000c22c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c230:	89 10                	mov    DWORD PTR [eax],edx
c000c232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c236:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000c240:	90                   	nop
c000c241:	83 c4 0c             	add    esp,0xc
c000c244:	c3                   	ret    
c000c245:	90                   	nop
c000c246:	66 90                	xchg   ax,ax

c000c248 <Serial::~Serial()>:
c000c248:	83 ec 0c             	sub    esp,0xc
c000c24b:	ba 78 e5 01 c0       	mov    edx,0xc001e578
c000c250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c254:	89 10                	mov    DWORD PTR [eax],edx
c000c256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c25a:	83 ec 0c             	sub    esp,0xc
c000c25d:	50                   	push   eax
c000c25e:	e8 95 e7 ff ff       	call   c000a9f8 <Device::~Device()>
c000c263:	83 c4 10             	add    esp,0x10
c000c266:	90                   	nop
c000c267:	83 c4 0c             	add    esp,0xc
c000c26a:	c3                   	ret    
c000c26b:	90                   	nop

c000c26c <Serial::~Serial()>:
c000c26c:	83 ec 0c             	sub    esp,0xc
c000c26f:	83 ec 0c             	sub    esp,0xc
c000c272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c276:	e8 cd ff ff ff       	call   c000c248 <Serial::~Serial()>
c000c27b:	83 c4 10             	add    esp,0x10
c000c27e:	83 ec 08             	sub    esp,0x8
c000c281:	68 58 01 00 00       	push   0x158
c000c286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c28a:	e8 63 d3 ff ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c000c28f:	83 c4 10             	add    esp,0x10
c000c292:	83 c4 0c             	add    esp,0xc
c000c295:	c3                   	ret    
c000c296:	66 90                	xchg   ax,ax

c000c298 <Timer::Timer(char const*)>:
c000c298:	83 ec 0c             	sub    esp,0xc
c000c29b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c29f:	83 ec 08             	sub    esp,0x8
c000c2a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2a6:	50                   	push   eax
c000c2a7:	e8 e2 e9 ff ff       	call   c000ac8e <Device::Device(char const*)>
c000c2ac:	83 c4 10             	add    esp,0x10
c000c2af:	ba bc e5 01 c0       	mov    edx,0xc001e5bc
c000c2b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2b8:	89 10                	mov    DWORD PTR [eax],edx
c000c2ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2be:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000c2c8:	90                   	nop
c000c2c9:	83 c4 0c             	add    esp,0xc
c000c2cc:	c3                   	ret    
c000c2cd:	90                   	nop
c000c2ce:	66 90                	xchg   ax,ax

c000c2d0 <Timer::~Timer()>:
c000c2d0:	83 ec 0c             	sub    esp,0xc
c000c2d3:	ba bc e5 01 c0       	mov    edx,0xc001e5bc
c000c2d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2dc:	89 10                	mov    DWORD PTR [eax],edx
c000c2de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2e2:	83 ec 0c             	sub    esp,0xc
c000c2e5:	50                   	push   eax
c000c2e6:	e8 0d e7 ff ff       	call   c000a9f8 <Device::~Device()>
c000c2eb:	83 c4 10             	add    esp,0x10
c000c2ee:	90                   	nop
c000c2ef:	83 c4 0c             	add    esp,0xc
c000c2f2:	c3                   	ret    
c000c2f3:	90                   	nop

c000c2f4 <Timer::~Timer()>:
c000c2f4:	83 ec 0c             	sub    esp,0xc
c000c2f7:	83 ec 0c             	sub    esp,0xc
c000c2fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2fe:	e8 cd ff ff ff       	call   c000c2d0 <Timer::~Timer()>
c000c303:	83 c4 10             	add    esp,0x10
c000c306:	83 ec 08             	sub    esp,0x8
c000c309:	68 5c 01 00 00       	push   0x15c
c000c30e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c312:	e8 db d2 ff ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c000c317:	83 c4 10             	add    esp,0x10
c000c31a:	83 c4 0c             	add    esp,0xc
c000c31d:	c3                   	ret    

c000c31e <Timer::read()>:
c000c31e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c322:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c328:	c3                   	ret    

c000c329 <setupTimer(int)>:
c000c329:	53                   	push   ebx
c000c32a:	83 ec 14             	sub    esp,0x14
c000c32d:	68 5c 01 00 00       	push   0x15c
c000c332:	e8 12 a6 ff ff       	call   c0006949 <malloc>
c000c337:	89 04 24             	mov    DWORD PTR [esp],eax
c000c33a:	89 c3                	mov    ebx,eax
c000c33c:	e8 f3 fa 00 00       	call   c001be34 <PIT::PIT()>
c000c341:	58                   	pop    eax
c000c342:	5a                   	pop    edx
c000c343:	53                   	push   ebx
c000c344:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c000c34a:	e8 a7 e7 ff ff       	call   c000aaf6 <Device::addChild(Device*)>
c000c34f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c351:	6a 00                	push   0x0
c000c353:	6a 00                	push   0x0
c000c355:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c359:	53                   	push   ebx
c000c35a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c35d:	89 d8                	mov    eax,ebx
c000c35f:	83 c4 28             	add    esp,0x28
c000c362:	5b                   	pop    ebx
c000c363:	c3                   	ret    

c000c364 <timerHandler(unsigned int)>:
c000c364:	56                   	push   esi
c000c365:	53                   	push   ebx
c000c366:	51                   	push   ecx
c000c367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c36b:	01 05 4c 29 02 c0    	add    DWORD PTR ds:0xc002294c,eax
c000c371:	80 3d 6d 03 02 c0 00 	cmp    BYTE PTR ds:0xc002036d,0x0
c000c378:	0f 84 4a 01 00 00    	je     c000c4c8 <timerHandler(unsigned int)+0x164>
c000c37e:	fa                   	cli    
c000c37f:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c000c385:	83 ec 0c             	sub    esp,0xc
c000c388:	ff 05 44 38 02 c0    	inc    DWORD PTR ds:0xc0023844
c000c38e:	68 58 38 02 c0       	push   0xc0023858
c000c393:	e8 f8 06 01 00       	call   c001ca90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000c398:	83 c4 10             	add    esp,0x10
c000c39b:	84 c0                	test   al,al
c000c39d:	0f 85 a1 00 00 00    	jne    c000c444 <timerHandler(unsigned int)+0xe0>
c000c3a3:	83 ec 0c             	sub    esp,0xc
c000c3a6:	68 58 38 02 c0       	push   0xc0023858
c000c3ab:	e8 fc 06 01 00       	call   c001caac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c3b0:	83 c4 10             	add    esp,0x10
c000c3b3:	89 c6                	mov    esi,eax
c000c3b5:	8d 76 00             	lea    esi,[esi+0x0]
c000c3b8:	83 ec 0c             	sub    esp,0xc
c000c3bb:	68 58 38 02 c0       	push   0xc0023858
c000c3c0:	e8 e7 06 01 00       	call   c001caac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c3c5:	c7 04 24 58 38 02 c0 	mov    DWORD PTR [esp],0xc0023858
c000c3cc:	89 c3                	mov    ebx,eax
c000c3ce:	e8 e1 06 01 00       	call   c001cab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000c3d3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000c3d6:	83 c4 10             	add    esp,0x10
c000c3d9:	3b 05 4c 29 02 c0    	cmp    eax,DWORD PTR ds:0xc002294c
c000c3df:	77 23                	ja     c000c404 <timerHandler(unsigned int)+0xa0>
c000c3e1:	83 ec 0c             	sub    esp,0xc
c000c3e4:	53                   	push   ebx
c000c3e5:	e8 fe 68 00 00       	call   c0012ce8 <unblockTask(ThreadControlBlock*)>
c000c3ea:	83 c4 10             	add    esp,0x10
c000c3ed:	39 de                	cmp    esi,ebx
c000c3ef:	75 27                	jne    c000c418 <timerHandler(unsigned int)+0xb4>
c000c3f1:	83 ec 0c             	sub    esp,0xc
c000c3f4:	68 58 38 02 c0       	push   0xc0023858
c000c3f9:	e8 ae 06 01 00       	call   c001caac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c3fe:	89 c6                	mov    esi,eax
c000c400:	eb 12                	jmp    c000c414 <timerHandler(unsigned int)+0xb0>
c000c402:	66 90                	xchg   ax,ax
c000c404:	52                   	push   edx
c000c405:	52                   	push   edx
c000c406:	53                   	push   ebx
c000c407:	68 58 38 02 c0       	push   0xc0023858
c000c40c:	e8 5b 07 01 00       	call   c001cb6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000c411:	8d 76 00             	lea    esi,[esi+0x0]
c000c414:	83 c4 10             	add    esp,0x10
c000c417:	90                   	nop
c000c418:	83 ec 0c             	sub    esp,0xc
c000c41b:	68 58 38 02 c0       	push   0xc0023858
c000c420:	e8 6b 06 01 00       	call   c001ca90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000c425:	83 c4 10             	add    esp,0x10
c000c428:	84 c0                	test   al,al
c000c42a:	75 18                	jne    c000c444 <timerHandler(unsigned int)+0xe0>
c000c42c:	83 ec 0c             	sub    esp,0xc
c000c42f:	68 58 38 02 c0       	push   0xc0023858
c000c434:	e8 73 06 01 00       	call   c001caac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c439:	83 c4 10             	add    esp,0x10
c000c43c:	39 f0                	cmp    eax,esi
c000c43e:	0f 85 74 ff ff ff    	jne    c000c3b8 <timerHandler(unsigned int)+0x54>
c000c444:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c449:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000c44d:	74 41                	je     c000c490 <timerHandler(unsigned int)+0x12c>
c000c44f:	80 3d 6c 03 02 c0 00 	cmp    BYTE PTR ds:0xc002036c,0x0
c000c456:	74 38                	je     c000c490 <timerHandler(unsigned int)+0x12c>
c000c458:	fa                   	cli    
c000c459:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c000c45f:	a1 4c 29 02 c0       	mov    eax,ds:0xc002294c
c000c464:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000c46a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000c46d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000c473:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000c476:	72 08                	jb     c000c480 <timerHandler(unsigned int)+0x11c>
c000c478:	e8 af 63 00 00       	call   c001282c <schedule()>
c000c47d:	8d 76 00             	lea    esi,[esi+0x0]
c000c480:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000c485:	48                   	dec    eax
c000c486:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c000c48b:	75 03                	jne    c000c490 <timerHandler(unsigned int)+0x12c>
c000c48d:	fb                   	sti    
c000c48e:	66 90                	xchg   ax,ax
c000c490:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c000c495:	48                   	dec    eax
c000c496:	a3 44 38 02 c0       	mov    ds:0xc0023844,eax
c000c49b:	75 1b                	jne    c000c4b8 <timerHandler(unsigned int)+0x154>
c000c49d:	83 3d 40 38 02 c0 00 	cmp    DWORD PTR ds:0xc0023840,0x0
c000c4a4:	74 12                	je     c000c4b8 <timerHandler(unsigned int)+0x154>
c000c4a6:	c7 05 40 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x0
c000c4b0:	e8 77 63 00 00       	call   c001282c <schedule()>
c000c4b5:	8d 76 00             	lea    esi,[esi+0x0]
c000c4b8:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000c4bd:	48                   	dec    eax
c000c4be:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c000c4c3:	75 03                	jne    c000c4c8 <timerHandler(unsigned int)+0x164>
c000c4c5:	fb                   	sti    
c000c4c6:	66 90                	xchg   ax,ax
c000c4c8:	58                   	pop    eax
c000c4c9:	5b                   	pop    ebx
c000c4ca:	5e                   	pop    esi
c000c4cb:	c3                   	ret    

c000c4cc <VCache::VCache(PhysicalDisk*)>:
c000c4cc:	53                   	push   ebx
c000c4cd:	83 ec 18             	sub    esp,0x18
c000c4d0:	ba ec e5 01 c0       	mov    edx,0xc001e5ec
c000c4d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c4d9:	89 10                	mov    DWORD PTR [eax],edx
c000c4db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c4df:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000c4e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c4ea:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000c4f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c4f5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000c4fc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000c503:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c507:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000c50e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000c515:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c519:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000c520:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c524:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000c528:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c52c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000c533:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000c53a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c53e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000c542:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c546:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000c54a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c54e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000c552:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c556:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000c55d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000c565:	83 ec 0c             	sub    esp,0xc
c000c568:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c56c:	e8 d8 a3 ff ff       	call   c0006949 <malloc>
c000c571:	83 c4 10             	add    esp,0x10
c000c574:	89 c3                	mov    ebx,eax
c000c576:	83 ec 0c             	sub    esp,0xc
c000c579:	53                   	push   ebx
c000c57a:	e8 7d 60 00 00       	call   c00125fc <Mutex::Mutex()>
c000c57f:	83 c4 10             	add    esp,0x10
c000c582:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c586:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000c589:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c58d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c591:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000c594:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c598:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000c59f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c5a3:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000c5a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c5ad:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c5b0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c5b4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000c5ba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c5c0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c5c4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000c5c7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000c5ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c5ce:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000c5d2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c5d6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c5dc:	05 00 01 00 00       	add    eax,0x100
c000c5e1:	c1 e0 04             	shl    eax,0x4
c000c5e4:	83 ec 0c             	sub    esp,0xc
c000c5e7:	50                   	push   eax
c000c5e8:	e8 5c a3 ff ff       	call   c0006949 <malloc>
c000c5ed:	83 c4 10             	add    esp,0x10
c000c5f0:	89 c2                	mov    edx,eax
c000c5f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c5f6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000c5f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c5fd:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000c604:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c608:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000c60c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c610:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c616:	c1 e0 06             	shl    eax,0x6
c000c619:	83 ec 0c             	sub    esp,0xc
c000c61c:	50                   	push   eax
c000c61d:	e8 27 a3 ff ff       	call   c0006949 <malloc>
c000c622:	83 c4 10             	add    esp,0x10
c000c625:	89 c2                	mov    edx,eax
c000c627:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c62b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000c62e:	90                   	nop
c000c62f:	83 c4 18             	add    esp,0x18
c000c632:	5b                   	pop    ebx
c000c633:	c3                   	ret    

c000c634 <VCache::invalidateReadBuffer()>:
c000c634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c638:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000c63e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000c642:	c3                   	ret    
c000c643:	90                   	nop

c000c644 <VCache::writeWriteBuffer()>:
c000c644:	53                   	push   ebx
c000c645:	83 ec 08             	sub    esp,0x8
c000c648:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c64c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000c650:	74 1e                	je     c000c670 <VCache::writeWriteBuffer()+0x2c>
c000c652:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c655:	83 ec 0c             	sub    esp,0xc
c000c658:	8b 10                	mov    edx,DWORD PTR [eax]
c000c65a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000c65d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000c660:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000c663:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c666:	50                   	push   eax
c000c667:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000c66a:	83 c4 20             	add    esp,0x20
c000c66d:	8d 76 00             	lea    esi,[esi+0x0]
c000c670:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000c677:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000c67e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000c682:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000c689:	83 c4 08             	add    esp,0x8
c000c68c:	5b                   	pop    ebx
c000c68d:	c3                   	ret    
c000c68e:	66 90                	xchg   ax,ax

c000c690 <VCache::~VCache()>:
c000c690:	83 ec 0c             	sub    esp,0xc
c000c693:	ba ec e5 01 c0       	mov    edx,0xc001e5ec
c000c698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c69c:	89 10                	mov    DWORD PTR [eax],edx
c000c69e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6a2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000c6a5:	84 c0                	test   al,al
c000c6a7:	74 0f                	je     c000c6b8 <VCache::~VCache()+0x28>
c000c6a9:	83 ec 0c             	sub    esp,0xc
c000c6ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6b0:	e8 8f ff ff ff       	call   c000c644 <VCache::writeWriteBuffer()>
c000c6b5:	83 c4 10             	add    esp,0x10
c000c6b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6bc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c6bf:	83 ec 0c             	sub    esp,0xc
c000c6c2:	50                   	push   eax
c000c6c3:	e8 91 a2 ff ff       	call   c0006959 <free>
c000c6c8:	83 c4 10             	add    esp,0x10
c000c6cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6cf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000c6d2:	83 ec 0c             	sub    esp,0xc
c000c6d5:	50                   	push   eax
c000c6d6:	e8 7e a2 ff ff       	call   c0006959 <free>
c000c6db:	83 c4 10             	add    esp,0x10
c000c6de:	90                   	nop
c000c6df:	83 c4 0c             	add    esp,0xc
c000c6e2:	c3                   	ret    
c000c6e3:	90                   	nop

c000c6e4 <VCache::~VCache()>:
c000c6e4:	83 ec 0c             	sub    esp,0xc
c000c6e7:	83 ec 0c             	sub    esp,0xc
c000c6ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6ee:	e8 9d ff ff ff       	call   c000c690 <VCache::~VCache()>
c000c6f3:	83 c4 10             	add    esp,0x10
c000c6f6:	83 ec 08             	sub    esp,0x8
c000c6f9:	6a 44                	push   0x44
c000c6fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6ff:	e8 ee ce ff ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c000c704:	83 c4 10             	add    esp,0x10
c000c707:	83 c4 0c             	add    esp,0xc
c000c70a:	c3                   	ret    
c000c70b:	90                   	nop

c000c70c <VCache::write(unsigned long long, int, void*)>:
c000c70c:	55                   	push   ebp
c000c70d:	31 c0                	xor    eax,eax
c000c70f:	57                   	push   edi
c000c710:	56                   	push   esi
c000c711:	53                   	push   ebx
c000c712:	83 ec 0c             	sub    esp,0xc
c000c715:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c719:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c71d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c721:	8d 76 00             	lea    esi,[esi+0x0]
c000c724:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c000c728:	7d 1a                	jge    c000c744 <VCache::write(unsigned long long, int, void*)+0x38>
c000c72a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000c72d:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000c733:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c737:	0f af c8             	imul   ecx,eax
c000c73a:	01 ca                	add    edx,ecx
c000c73c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000c73e:	40                   	inc    eax
c000c73f:	eb e3                	jmp    c000c724 <VCache::write(unsigned long long, int, void*)+0x18>
c000c741:	8d 76 00             	lea    esi,[esi+0x0]
c000c744:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000c748:	74 0a                	je     c000c754 <VCache::write(unsigned long long, int, void*)+0x48>
c000c74a:	53                   	push   ebx
c000c74b:	e8 e4 fe ff ff       	call   c000c634 <VCache::invalidateReadBuffer()>
c000c750:	58                   	pop    eax
c000c751:	8d 76 00             	lea    esi,[esi+0x0]
c000c754:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000c758:	74 5e                	je     c000c7b8 <VCache::write(unsigned long long, int, void*)+0xac>
c000c75a:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000c75d:	89 e8                	mov    eax,ebp
c000c75f:	99                   	cdq    
c000c760:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000c763:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000c766:	89 c1                	mov    ecx,eax
c000c768:	89 d0                	mov    eax,edx
c000c76a:	31 f1                	xor    ecx,esi
c000c76c:	31 f8                	xor    eax,edi
c000c76e:	09 c1                	or     ecx,eax
c000c770:	75 3a                	jne    c000c7ac <VCache::write(unsigned long long, int, void*)+0xa0>
c000c772:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c000c777:	75 33                	jne    c000c7ac <VCache::write(unsigned long long, int, void*)+0xa0>
c000c779:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c77c:	89 ef                	mov    edi,ebp
c000c77e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000c784:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c788:	0f af f9             	imul   edi,ecx
c000c78b:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000c78e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c790:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000c793:	40                   	inc    eax
c000c794:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000c797:	83 f8 40             	cmp    eax,0x40
c000c79a:	75 60                	jne    c000c7fc <VCache::write(unsigned long long, int, void*)+0xf0>
c000c79c:	83 ec 0c             	sub    esp,0xc
c000c79f:	53                   	push   ebx
c000c7a0:	e8 9f fe ff ff       	call   c000c644 <VCache::writeWriteBuffer()>
c000c7a5:	83 c4 10             	add    esp,0x10
c000c7a8:	eb 52                	jmp    c000c7fc <VCache::write(unsigned long long, int, void*)+0xf0>
c000c7aa:	66 90                	xchg   ax,ax
c000c7ac:	83 ec 0c             	sub    esp,0xc
c000c7af:	53                   	push   ebx
c000c7b0:	e8 8f fe ff ff       	call   c000c644 <VCache::writeWriteBuffer()>
c000c7b5:	83 c4 10             	add    esp,0x10
c000c7b8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c7bb:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c000c7c0:	7f 22                	jg     c000c7e4 <VCache::write(unsigned long long, int, void*)+0xd8>
c000c7c2:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000c7c5:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000c7c8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c7cc:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000c7d0:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000c7d3:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000c7d6:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000c7dc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c7e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c7e2:	eb 18                	jmp    c000c7fc <VCache::write(unsigned long long, int, void*)+0xf0>
c000c7e4:	83 ec 0c             	sub    esp,0xc
c000c7e7:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7f1:	57                   	push   edi
c000c7f2:	56                   	push   esi
c000c7f3:	50                   	push   eax
c000c7f4:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000c7f7:	83 c4 20             	add    esp,0x20
c000c7fa:	66 90                	xchg   ax,ax
c000c7fc:	83 c4 0c             	add    esp,0xc
c000c7ff:	31 c0                	xor    eax,eax
c000c801:	5b                   	pop    ebx
c000c802:	5e                   	pop    esi
c000c803:	5f                   	pop    edi
c000c804:	5d                   	pop    ebp
c000c805:	c3                   	ret    

c000c806 <VCache::read(unsigned long long, int, void*)>:
c000c806:	55                   	push   ebp
c000c807:	31 c0                	xor    eax,eax
c000c809:	57                   	push   edi
c000c80a:	56                   	push   esi
c000c80b:	53                   	push   ebx
c000c80c:	83 ec 1c             	sub    esp,0x1c
c000c80f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c813:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c817:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c81b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000c81f:	90                   	nop
c000c820:	39 e8                	cmp    eax,ebp
c000c822:	7d 18                	jge    c000c83c <VCache::read(unsigned long long, int, void*)+0x36>
c000c824:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000c827:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000c82d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c831:	0f af c8             	imul   ecx,eax
c000c834:	01 ca                	add    edx,ecx
c000c836:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000c838:	40                   	inc    eax
c000c839:	eb e5                	jmp    c000c820 <VCache::read(unsigned long long, int, void*)+0x1a>
c000c83b:	90                   	nop
c000c83c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000c840:	74 0e                	je     c000c850 <VCache::read(unsigned long long, int, void*)+0x4a>
c000c842:	83 ec 0c             	sub    esp,0xc
c000c845:	53                   	push   ebx
c000c846:	e8 f9 fd ff ff       	call   c000c644 <VCache::writeWriteBuffer()>
c000c84b:	83 c4 10             	add    esp,0x10
c000c84e:	66 90                	xchg   ax,ax
c000c850:	83 fd 01             	cmp    ebp,0x1
c000c853:	0f 85 87 00 00 00    	jne    c000c8e0 <VCache::read(unsigned long long, int, void*)+0xda>
c000c859:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c85c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c860:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000c867:	75 77                	jne    c000c8e0 <VCache::read(unsigned long long, int, void*)+0xda>
c000c869:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000c86c:	89 e9                	mov    ecx,ebp
c000c86e:	f7 d9                	neg    ecx
c000c870:	89 c8                	mov    eax,ecx
c000c872:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000c876:	c1 f8 1f             	sar    eax,0x1f
c000c879:	21 f1                	and    ecx,esi
c000c87b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c87f:	89 c8                	mov    eax,ecx
c000c881:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c885:	21 f9                	and    ecx,edi
c000c887:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000c88b:	89 ca                	mov    edx,ecx
c000c88d:	74 0d                	je     c000c89c <VCache::read(unsigned long long, int, void*)+0x96>
c000c88f:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000c892:	75 08                	jne    c000c89c <VCache::read(unsigned long long, int, void*)+0x96>
c000c894:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000c897:	74 27                	je     c000c8c0 <VCache::read(unsigned long long, int, void*)+0xba>
c000c899:	8d 76 00             	lea    esi,[esi+0x0]
c000c89c:	83 ec 0c             	sub    esp,0xc
c000c89f:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000c8a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c8a7:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000c8aa:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c8ad:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000c8af:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000c8b2:	55                   	push   ebp
c000c8b3:	52                   	push   edx
c000c8b4:	50                   	push   eax
c000c8b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c8b9:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000c8bc:	83 c4 20             	add    esp,0x20
c000c8bf:	90                   	nop
c000c8c0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c8c3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000c8c7:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000c8cd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000c8d0:	48                   	dec    eax
c000c8d1:	21 c6                	and    esi,eax
c000c8d3:	0f af f1             	imul   esi,ecx
c000c8d6:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000c8d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c8db:	eb 23                	jmp    c000c900 <VCache::read(unsigned long long, int, void*)+0xfa>
c000c8dd:	8d 76 00             	lea    esi,[esi+0x0]
c000c8e0:	83 ec 0c             	sub    esp,0xc
c000c8e3:	53                   	push   ebx
c000c8e4:	e8 4b fd ff ff       	call   c000c634 <VCache::invalidateReadBuffer()>
c000c8e9:	5a                   	pop    edx
c000c8ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c8ed:	8b 10                	mov    edx,DWORD PTR [eax]
c000c8ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c8f3:	55                   	push   ebp
c000c8f4:	57                   	push   edi
c000c8f5:	56                   	push   esi
c000c8f6:	50                   	push   eax
c000c8f7:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000c8fa:	83 c4 20             	add    esp,0x20
c000c8fd:	8d 76 00             	lea    esi,[esi+0x0]
c000c900:	83 c4 1c             	add    esp,0x1c
c000c903:	31 c0                	xor    eax,eax
c000c905:	5b                   	pop    ebx
c000c906:	5e                   	pop    esi
c000c907:	5f                   	pop    edi
c000c908:	5d                   	pop    ebp
c000c909:	c3                   	ret    

c000c90a <Video::putrect(int, int, int, int, unsigned int)>:
c000c90a:	55                   	push   ebp
c000c90b:	57                   	push   edi
c000c90c:	56                   	push   esi
c000c90d:	53                   	push   ebx
c000c90e:	83 ec 1c             	sub    esp,0x1c
c000c911:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c915:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c919:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000c91d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000c921:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c925:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c929:	01 df                	add    edi,ebx
c000c92b:	39 fb                	cmp    ebx,edi
c000c92d:	7d 1f                	jge    c000c94e <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000c92f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c933:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000c937:	7d 12                	jge    c000c94b <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000c939:	8b 16                	mov    edx,DWORD PTR [esi]
c000c93b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c93f:	53                   	push   ebx
c000c940:	55                   	push   ebp
c000c941:	45                   	inc    ebp
c000c942:	56                   	push   esi
c000c943:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c946:	83 c4 10             	add    esp,0x10
c000c949:	eb e8                	jmp    c000c933 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000c94b:	43                   	inc    ebx
c000c94c:	eb dd                	jmp    c000c92b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000c94e:	83 c4 1c             	add    esp,0x1c
c000c951:	5b                   	pop    ebx
c000c952:	5e                   	pop    esi
c000c953:	5f                   	pop    edi
c000c954:	5d                   	pop    ebp
c000c955:	c3                   	ret    

c000c956 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000c956:	55                   	push   ebp
c000c957:	57                   	push   edi
c000c958:	31 ff                	xor    edi,edi
c000c95a:	56                   	push   esi
c000c95b:	53                   	push   ebx
c000c95c:	83 ec 1c             	sub    esp,0x1c
c000c95f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000c963:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000c967:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000c96e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000c973:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c977:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000c97b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c97f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000c982:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c986:	01 f9                	add    ecx,edi
c000c988:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000c98c:	7d 2f                	jge    c000c9bd <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000c98e:	31 f6                	xor    esi,esi
c000c990:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c994:	01 f2                	add    edx,esi
c000c996:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000c99a:	7d 1a                	jge    c000c9b6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000c99c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c99f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000c9a2:	46                   	inc    esi
c000c9a3:	51                   	push   ecx
c000c9a4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c9a8:	52                   	push   edx
c000c9a9:	55                   	push   ebp
c000c9aa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000c9ad:	83 c4 10             	add    esp,0x10
c000c9b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c9b4:	eb da                	jmp    c000c990 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000c9b6:	47                   	inc    edi
c000c9b7:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000c9bb:	eb c5                	jmp    c000c982 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000c9bd:	83 c4 1c             	add    esp,0x1c
c000c9c0:	5b                   	pop    ebx
c000c9c1:	5e                   	pop    esi
c000c9c2:	5f                   	pop    edi
c000c9c3:	5d                   	pop    ebp
c000c9c4:	c3                   	ret    
c000c9c5:	90                   	nop

c000c9c6 <Video::blit(unsigned int*, int, int, int, int)>:
c000c9c6:	55                   	push   ebp
c000c9c7:	57                   	push   edi
c000c9c8:	56                   	push   esi
c000c9c9:	53                   	push   ebx
c000c9ca:	83 ec 1c             	sub    esp,0x1c
c000c9cd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c9d1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c9d5:	85 c0                	test   eax,eax
c000c9d7:	79 02                	jns    c000c9db <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000c9d9:	31 c0                	xor    eax,eax
c000c9db:	c1 e0 02             	shl    eax,0x2
c000c9de:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000c9e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c9e6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c9ea:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000c9ee:	39 d8                	cmp    eax,ebx
c000c9f0:	7e 49                	jle    c000ca3b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000c9f2:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000c9f8:	7c 41                	jl     c000ca3b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000c9fa:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c9fe:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ca02:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ca06:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000ca0a:	39 f9                	cmp    ecx,edi
c000ca0c:	7e 22                	jle    c000ca30 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000ca0e:	83 c5 04             	add    ebp,0x4
c000ca11:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ca17:	7c 14                	jl     c000ca2d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000ca19:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ca1b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000ca1e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ca22:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ca26:	56                   	push   esi
c000ca27:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ca2a:	83 c4 10             	add    esp,0x10
c000ca2d:	47                   	inc    edi
c000ca2e:	eb d2                	jmp    c000ca02 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000ca30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca34:	43                   	inc    ebx
c000ca35:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ca39:	eb ab                	jmp    c000c9e6 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000ca3b:	83 c4 1c             	add    esp,0x1c
c000ca3e:	5b                   	pop    ebx
c000ca3f:	5e                   	pop    esi
c000ca40:	5f                   	pop    edi
c000ca41:	5d                   	pop    ebp
c000ca42:	c3                   	ret    
c000ca43:	90                   	nop

c000ca44 <Video::clearScreen(unsigned int)>:
c000ca44:	57                   	push   edi
c000ca45:	56                   	push   esi
c000ca46:	53                   	push   ebx
c000ca47:	31 db                	xor    ebx,ebx
c000ca49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ca4d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ca53:	7e 1f                	jle    c000ca74 <Video::clearScreen(unsigned int)+0x30>
c000ca55:	31 ff                	xor    edi,edi
c000ca57:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ca5d:	7e 12                	jle    c000ca71 <Video::clearScreen(unsigned int)+0x2d>
c000ca5f:	8b 06                	mov    eax,DWORD PTR [esi]
c000ca61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca65:	53                   	push   ebx
c000ca66:	57                   	push   edi
c000ca67:	47                   	inc    edi
c000ca68:	56                   	push   esi
c000ca69:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ca6c:	83 c4 10             	add    esp,0x10
c000ca6f:	eb e6                	jmp    c000ca57 <Video::clearScreen(unsigned int)+0x13>
c000ca71:	43                   	inc    ebx
c000ca72:	eb d9                	jmp    c000ca4d <Video::clearScreen(unsigned int)+0x9>
c000ca74:	5b                   	pop    ebx
c000ca75:	5e                   	pop    esi
c000ca76:	5f                   	pop    edi
c000ca77:	c3                   	ret    

c000ca78 <Video::putpixel(int, int, unsigned int)>:
c000ca78:	c7 44 24 04 f4 e5 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e5f4
c000ca80:	e9 24 29 00 00       	jmp    c000f3a9 <Krnl::panic(char const*)>
c000ca85:	90                   	nop

c000ca86 <Video::Video(char const*)>:
c000ca86:	83 ec 0c             	sub    esp,0xc
c000ca89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca8d:	83 ec 08             	sub    esp,0x8
c000ca90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca94:	50                   	push   eax
c000ca95:	e8 f4 e1 ff ff       	call   c000ac8e <Device::Device(char const*)>
c000ca9a:	83 c4 10             	add    esp,0x10
c000ca9d:	ba 64 e6 01 c0       	mov    edx,0xc001e664
c000caa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caa6:	89 10                	mov    DWORD PTR [eax],edx
c000caa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caac:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000cab6:	90                   	nop
c000cab7:	83 c4 0c             	add    esp,0xc
c000caba:	c3                   	ret    
c000cabb:	90                   	nop

c000cabc <Video::~Video()>:
c000cabc:	83 ec 0c             	sub    esp,0xc
c000cabf:	ba 64 e6 01 c0       	mov    edx,0xc001e664
c000cac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cac8:	89 10                	mov    DWORD PTR [eax],edx
c000caca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cace:	83 ec 0c             	sub    esp,0xc
c000cad1:	50                   	push   eax
c000cad2:	e8 21 df ff ff       	call   c000a9f8 <Device::~Device()>
c000cad7:	83 c4 10             	add    esp,0x10
c000cada:	90                   	nop
c000cadb:	83 c4 0c             	add    esp,0xc
c000cade:	c3                   	ret    
c000cadf:	90                   	nop

c000cae0 <Video::~Video()>:
c000cae0:	83 ec 0c             	sub    esp,0xc
c000cae3:	83 ec 0c             	sub    esp,0xc
c000cae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000caea:	e8 cd ff ff ff       	call   c000cabc <Video::~Video()>
c000caef:	83 c4 10             	add    esp,0x10
c000caf2:	83 ec 08             	sub    esp,0x8
c000caf5:	68 64 01 00 00       	push   0x164
c000cafa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cafe:	e8 ef ca ff ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c000cb03:	83 c4 10             	add    esp,0x10
c000cb06:	83 c4 0c             	add    esp,0xc
c000cb09:	c3                   	ret    

c000cb0a <Video::isMonochrome()>:
c000cb0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb0e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000cb14:	c3                   	ret    
c000cb15:	90                   	nop

c000cb16 <Video::getWidth()>:
c000cb16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb1a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cb20:	c3                   	ret    
c000cb21:	90                   	nop

c000cb22 <Video::getHeight()>:
c000cb22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb26:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000cb2c:	c3                   	ret    
c000cb2d:	90                   	nop

c000cb2e <Video::drawCursor(int, int, unsigned char*, int)>:
c000cb2e:	55                   	push   ebp
c000cb2f:	57                   	push   edi
c000cb30:	56                   	push   esi
c000cb31:	53                   	push   ebx
c000cb32:	83 ec 2c             	sub    esp,0x2c
c000cb35:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000cb39:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000cb3d:	83 f8 01             	cmp    eax,0x1
c000cb40:	19 c9                	sbb    ecx,ecx
c000cb42:	31 db                	xor    ebx,ebx
c000cb44:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000cb48:	89 cd                	mov    ebp,ecx
c000cb4a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000cb52:	f7 d5                	not    ebp
c000cb54:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000cb5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000cb5e:	01 d8                	add    eax,ebx
c000cb60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb64:	56                   	push   esi
c000cb65:	e8 b8 ff ff ff       	call   c000cb22 <Video::getHeight()>
c000cb6a:	59                   	pop    ecx
c000cb6b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000cb6f:	7e 70                	jle    c000cbe1 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000cb71:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000cb75:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000cb79:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000cb7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cb80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000cb84:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000cb8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb8f:	89 f8                	mov    eax,edi
c000cb91:	83 c0 20             	add    eax,0x20
c000cb94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cb98:	56                   	push   esi
c000cb99:	e8 78 ff ff ff       	call   c000cb16 <Video::getWidth()>
c000cb9e:	5a                   	pop    edx
c000cb9f:	39 c7                	cmp    edi,eax
c000cba1:	7d 34                	jge    c000cbd7 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000cba3:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000cba8:	74 05                	je     c000cbaf <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000cbaa:	8b 06                	mov    eax,DWORD PTR [esi]
c000cbac:	55                   	push   ebp
c000cbad:	eb 0d                	jmp    c000cbbc <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000cbaf:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000cbb4:	74 12                	je     c000cbc8 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000cbb6:	8b 06                	mov    eax,DWORD PTR [esi]
c000cbb8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbbc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cbc0:	57                   	push   edi
c000cbc1:	56                   	push   esi
c000cbc2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000cbc5:	83 c4 10             	add    esp,0x10
c000cbc8:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000cbcc:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000cbd0:	47                   	inc    edi
c000cbd1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000cbd5:	75 c1                	jne    c000cb98 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000cbd7:	43                   	inc    ebx
c000cbd8:	83 fb 20             	cmp    ebx,0x20
c000cbdb:	0f 85 79 ff ff ff    	jne    c000cb5a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000cbe1:	83 c4 2c             	add    esp,0x2c
c000cbe4:	5b                   	pop    ebx
c000cbe5:	5e                   	pop    esi
c000cbe6:	5f                   	pop    edi
c000cbe7:	5d                   	pop    ebp
c000cbe8:	c3                   	ret    
c000cbe9:	90                   	nop

c000cbea <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000cbea:	55                   	push   ebp
c000cbeb:	57                   	push   edi
c000cbec:	56                   	push   esi
c000cbed:	53                   	push   ebx
c000cbee:	83 ec 28             	sub    esp,0x28
c000cbf1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000cbf5:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000cbf9:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000cbfd:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000cc01:	c1 e6 08             	shl    esi,0x8
c000cc04:	01 c6                	add    esi,eax
c000cc06:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000cc0a:	c1 e0 08             	shl    eax,0x8
c000cc0d:	01 d0                	add    eax,edx
c000cc0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cc13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cc17:	0f af c6             	imul   eax,esi
c000cc1a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000cc21:	50                   	push   eax
c000cc22:	e8 22 9d ff ff       	call   c0006949 <malloc>
c000cc27:	83 c4 10             	add    esp,0x10
c000cc2a:	89 c7                	mov    edi,eax
c000cc2c:	85 c0                	test   eax,eax
c000cc2e:	75 10                	jne    c000cc40 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000cc30:	83 ec 0c             	sub    esp,0xc
c000cc33:	68 15 e6 01 c0       	push   0xc001e615
c000cc38:	e8 6c 27 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c000cc3d:	83 c4 10             	add    esp,0x10
c000cc40:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000cc43:	ba 12 00 00 00       	mov    edx,0x12
c000cc48:	84 c0                	test   al,al
c000cc4a:	74 11                	je     c000cc5d <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000cc4c:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000cc50:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000cc54:	c1 fa 03             	sar    edx,0x3
c000cc57:	0f af d1             	imul   edx,ecx
c000cc5a:	83 c2 12             	add    edx,0x12
c000cc5d:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000cc61:	74 04                	je     c000cc67 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000cc63:	85 f6                	test   esi,esi
c000cc65:	75 12                	jne    c000cc79 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000cc67:	83 ec 0c             	sub    esp,0xc
c000cc6a:	68 25 e6 01 c0       	push   0xc001e625
c000cc6f:	e8 5f ca ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c000cc74:	e9 b8 00 00 00       	jmp    c000cd31 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000cc79:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000cc7d:	80 f9 02             	cmp    cl,0x2
c000cc80:	0f 85 96 00 00 00    	jne    c000cd1c <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000cc86:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000cc8b:	75 0e                	jne    c000cc9b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000cc8d:	84 c0                	test   al,al
c000cc8f:	75 0a                	jne    c000cc9b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000cc91:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000cc94:	83 e8 18             	sub    eax,0x18
c000cc97:	a8 f7                	test   al,0xf7
c000cc99:	74 0a                	je     c000cca5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000cc9b:	83 ec 0c             	sub    esp,0xc
c000cc9e:	68 3a e6 01 c0       	push   0xc001e63a
c000cca3:	eb 7f                	jmp    c000cd24 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000cca5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ccad:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ccb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000ccb9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ccc1:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000ccc5:	75 0c                	jne    c000ccd3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000ccc7:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000cccc:	c1 e0 18             	shl    eax,0x18
c000cccf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ccd3:	45                   	inc    ebp
c000ccd4:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ccd9:	c1 e1 10             	shl    ecx,0x10
c000ccdc:	89 c8                	mov    eax,ecx
c000ccde:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000cce3:	c1 e1 08             	shl    ecx,0x8
c000cce6:	09 c1                	or     ecx,eax
c000cce8:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ccec:	09 c1                	or     ecx,eax
c000ccee:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ccf2:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000ccf6:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ccfa:	c1 f8 03             	sar    eax,0x3
c000ccfd:	01 c2                	add    edx,eax
c000ccff:	89 e8                	mov    eax,ebp
c000cd01:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000cd05:	39 c6                	cmp    esi,eax
c000cd07:	7f b0                	jg     c000ccb9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000cd09:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000cd0d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cd11:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000cd14:	7e 22                	jle    c000cd38 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000cd16:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000cd1a:	eb 99                	jmp    c000ccb5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000cd1c:	50                   	push   eax
c000cd1d:	50                   	push   eax
c000cd1e:	51                   	push   ecx
c000cd1f:	68 48 e6 01 c0       	push   0xc001e648
c000cd24:	e8 aa c9 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c000cd29:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cd2c:	e8 28 9c ff ff       	call   c0006959 <free>
c000cd31:	83 c4 10             	add    esp,0x10
c000cd34:	31 ff                	xor    edi,edi
c000cd36:	eb 0f                	jmp    c000cd47 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000cd38:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000cd3c:	89 30                	mov    DWORD PTR [eax],esi
c000cd3e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd42:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000cd45:	89 30                	mov    DWORD PTR [eax],esi
c000cd47:	83 c4 1c             	add    esp,0x1c
c000cd4a:	89 f8                	mov    eax,edi
c000cd4c:	5b                   	pop    ebx
c000cd4d:	5e                   	pop    esi
c000cd4e:	5f                   	pop    edi
c000cd4f:	5d                   	pop    ebp
c000cd50:	c3                   	ret    
c000cd51:	90                   	nop

c000cd52 <Video::putTGA(int, int, unsigned char*, int)>:
c000cd52:	55                   	push   ebp
c000cd53:	57                   	push   edi
c000cd54:	56                   	push   esi
c000cd55:	53                   	push   ebx
c000cd56:	83 ec 28             	sub    esp,0x28
c000cd59:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000cd5d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000cd61:	50                   	push   eax
c000cd62:	8d 44 24 18          	lea    eax,[esp+0x18]
c000cd66:	50                   	push   eax
c000cd67:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000cd6b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000cd6f:	56                   	push   esi
c000cd70:	e8 75 fe ff ff       	call   c000cbea <Video::tgaParse(unsigned char*, int, int*, int*)>
c000cd75:	83 c4 20             	add    esp,0x20
c000cd78:	85 c0                	test   eax,eax
c000cd7a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000cd7e:	74 35                	je     c000cdb5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000cd80:	89 c7                	mov    edi,eax
c000cd82:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cd86:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000cd8a:	39 d8                	cmp    eax,ebx
c000cd8c:	7e 27                	jle    c000cdb5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000cd8e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cd92:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cd96:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000cd9a:	39 e8                	cmp    eax,ebp
c000cd9c:	7e 14                	jle    c000cdb2 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000cd9e:	8b 06                	mov    eax,DWORD PTR [esi]
c000cda0:	83 c7 04             	add    edi,0x4
c000cda3:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000cda6:	53                   	push   ebx
c000cda7:	55                   	push   ebp
c000cda8:	45                   	inc    ebp
c000cda9:	56                   	push   esi
c000cdaa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000cdad:	83 c4 10             	add    esp,0x10
c000cdb0:	eb e0                	jmp    c000cd92 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000cdb2:	43                   	inc    ebx
c000cdb3:	eb cd                	jmp    c000cd82 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000cdb5:	83 c4 1c             	add    esp,0x1c
c000cdb8:	5b                   	pop    ebx
c000cdb9:	5e                   	pop    esi
c000cdba:	5f                   	pop    edi
c000cdbb:	5d                   	pop    ebp
c000cdbc:	c3                   	ret    
c000cdbd:	66 90                	xchg   ax,ax
c000cdbf:	90                   	nop

c000cdc0 <ACPI::close(int, int, void*)>:
c000cdc0:	83 ec 1c             	sub    esp,0x1c
c000cdc3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000cdcb:	74 0b                	je     c000cdd8 <ACPI::close(int, int, void*)+0x18>
c000cdcd:	b8 00 00 00 00       	mov    eax,0x0
c000cdd2:	e9 99 00 00 00       	jmp    c000ce70 <ACPI::close(int, int, void*)+0xb0>
c000cdd7:	90                   	nop
c000cdd8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000cddd:	75 29                	jne    c000ce08 <ACPI::close(int, int, void*)+0x48>
c000cddf:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c000cde4:	85 c0                	test   eax,eax
c000cde6:	74 08                	je     c000cdf0 <ACPI::close(int, int, void*)+0x30>
c000cde8:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c000cded:	ff d0                	call   eax
c000cdef:	90                   	nop
c000cdf0:	83 ec 0c             	sub    esp,0xc
c000cdf3:	68 a4 e6 01 c0       	push   0xc001e6a4
c000cdf8:	e8 ac 25 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c000cdfd:	83 c4 10             	add    esp,0x10
c000ce00:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ce05:	eb 69                	jmp    c000ce70 <ACPI::close(int, int, void*)+0xb0>
c000ce07:	90                   	nop
c000ce08:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ce0d:	75 59                	jne    c000ce68 <ACPI::close(int, int, void*)+0xa8>
c000ce0f:	a1 64 29 02 c0       	mov    eax,ds:0xc0022964
c000ce14:	85 c0                	test   eax,eax
c000ce16:	74 08                	je     c000ce20 <ACPI::close(int, int, void*)+0x60>
c000ce18:	a1 64 29 02 c0       	mov    eax,ds:0xc0022964
c000ce1d:	ff d0                	call   eax
c000ce1f:	90                   	nop
c000ce20:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ce25:	8d 76 00             	lea    esi,[esi+0x0]
c000ce28:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ce2d:	83 e0 02             	and    eax,0x2
c000ce30:	74 1e                	je     c000ce50 <ACPI::close(int, int, void*)+0x90>
c000ce32:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ce39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ce3d:	89 c2                	mov    edx,eax
c000ce3f:	ec                   	in     al,dx
c000ce40:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ce44:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ce48:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ce4c:	eb da                	jmp    c000ce28 <ACPI::close(int, int, void*)+0x68>
c000ce4e:	66 90                	xchg   ax,ax
c000ce50:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ce57:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ce5c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ce60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce64:	ee                   	out    dx,al
c000ce65:	8d 76 00             	lea    esi,[esi+0x0]
c000ce68:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ce6d:	8d 76 00             	lea    esi,[esi+0x0]
c000ce70:	83 c4 1c             	add    esp,0x1c
c000ce73:	c3                   	ret    

c000ce74 <findRSDP()>:
c000ce74:	83 ec 1c             	sub    esp,0x1c
c000ce77:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c000ce7c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000ce82:	83 e0 04             	and    eax,0x4
c000ce85:	84 c0                	test   al,al
c000ce87:	75 07                	jne    c000ce90 <findRSDP()+0x1c>
c000ce89:	b8 00 00 00 00       	mov    eax,0x0
c000ce8e:	eb 70                	jmp    c000cf00 <findRSDP()+0x8c>
c000ce90:	a1 98 03 02 c0       	mov    eax,ds:0xc0020398
c000ce95:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ce9a:	7f 1c                	jg     c000ceb8 <findRSDP()+0x44>
c000ce9c:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c000cea1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000cea7:	83 e2 fb             	and    edx,0xfffffffb
c000ceaa:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ceb0:	b8 00 00 00 00       	mov    eax,0x0
c000ceb5:	eb 49                	jmp    c000cf00 <findRSDP()+0x8c>
c000ceb7:	90                   	nop
c000ceb8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000cec0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000cec8:	77 2e                	ja     c000cef8 <findRSDP()+0x84>
c000ceca:	83 ec 04             	sub    esp,0x4
c000cecd:	6a 08                	push   0x8
c000cecf:	68 3f e7 01 c0       	push   0xc001e73f
c000ced4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ced8:	e8 c7 34 ff ff       	call   c00003a4 <memcmp>
c000cedd:	83 c4 10             	add    esp,0x10
c000cee0:	85 c0                	test   eax,eax
c000cee2:	0f 94 c0             	sete   al
c000cee5:	84 c0                	test   al,al
c000cee7:	74 07                	je     c000cef0 <findRSDP()+0x7c>
c000cee9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ceed:	eb 11                	jmp    c000cf00 <findRSDP()+0x8c>
c000ceef:	90                   	nop
c000cef0:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000cef5:	eb c9                	jmp    c000cec0 <findRSDP()+0x4c>
c000cef7:	90                   	nop
c000cef8:	b8 00 00 00 00       	mov    eax,0x0
c000cefd:	8d 76 00             	lea    esi,[esi+0x0]
c000cf00:	83 c4 1c             	add    esp,0x1c
c000cf03:	c3                   	ret    

c000cf04 <loadACPITables(unsigned char*)>:
c000cf04:	57                   	push   edi
c000cf05:	56                   	push   esi
c000cf06:	53                   	push   ebx
c000cf07:	83 ec 60             	sub    esp,0x60
c000cf0a:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c000cf0f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000cf15:	83 e0 04             	and    eax,0x4
c000cf18:	84 c0                	test   al,al
c000cf1a:	0f 84 3c 02 00 00    	je     c000d15c <loadACPITables(unsigned char*)+0x258>
c000cf20:	a0 80 2b 02 c0       	mov    al,ds:0xc0022b80
c000cf25:	84 c0                	test   al,al
c000cf27:	74 77                	je     c000cfa0 <loadACPITables(unsigned char*)+0x9c>
c000cf29:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000cf2d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf31:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000cf35:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cf38:	83 e8 24             	sub    eax,0x24
c000cf3b:	c1 e8 03             	shr    eax,0x3
c000cf3e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cf42:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000cf4a:	66 90                	xchg   ax,ax
c000cf4c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000cf50:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000cf54:	0f 8d b6 00 00 00    	jge    c000d010 <loadACPITables(unsigned char*)+0x10c>
c000cf5a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000cf5e:	83 c0 24             	add    eax,0x24
c000cf61:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000cf65:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000cf69:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000cf6d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000cf71:	c1 e0 03             	shl    eax,0x3
c000cf74:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000cf78:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000cf7c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cf7f:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf81:	89 c1                	mov    ecx,eax
c000cf83:	a1 6c 29 02 c0       	mov    eax,ds:0xc002296c
c000cf88:	8d 50 01             	lea    edx,[eax+0x1]
c000cf8b:	89 15 6c 29 02 c0    	mov    DWORD PTR ds:0xc002296c,edx
c000cf91:	89 ca                	mov    edx,ecx
c000cf93:	89 14 c5 84 29 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd67c],edx
c000cf9a:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000cf9e:	eb ac                	jmp    c000cf4c <loadACPITables(unsigned char*)+0x48>
c000cfa0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000cfa4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cfa8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cfac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cfaf:	83 e8 24             	sub    eax,0x24
c000cfb2:	c1 e8 02             	shr    eax,0x2
c000cfb5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000cfb9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000cfc1:	8d 76 00             	lea    esi,[esi+0x0]
c000cfc4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000cfc8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000cfcc:	7d 42                	jge    c000d010 <loadACPITables(unsigned char*)+0x10c>
c000cfce:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000cfd2:	83 c0 24             	add    eax,0x24
c000cfd5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cfd9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cfdd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000cfe1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000cfe5:	c1 e0 02             	shl    eax,0x2
c000cfe8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000cfec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cff0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cff2:	a1 6c 29 02 c0       	mov    eax,ds:0xc002296c
c000cff7:	8d 50 01             	lea    edx,[eax+0x1]
c000cffa:	89 15 6c 29 02 c0    	mov    DWORD PTR ds:0xc002296c,edx
c000d000:	89 ca                	mov    edx,ecx
c000d002:	89 14 c5 84 29 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd67c],edx
c000d009:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000d00d:	eb b5                	jmp    c000cfc4 <loadACPITables(unsigned char*)+0xc0>
c000d00f:	90                   	nop
c000d010:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000d018:	a1 6c 29 02 c0       	mov    eax,ds:0xc002296c
c000d01d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000d021:	0f 8d 39 01 00 00    	jge    c000d160 <loadACPITables(unsigned char*)+0x25c>
c000d027:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d02b:	8b 04 c5 84 29 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd67c]
c000d032:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d036:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d03a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d03e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d042:	25 ff 0f 00 00       	and    eax,0xfff
c000d047:	89 c6                	mov    esi,eax
c000d049:	8b 1d 54 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020454
c000d04f:	83 ec 0c             	sub    esp,0xc
c000d052:	6a 01                	push   0x1
c000d054:	e8 18 b4 ff ff       	call   c0008471 <Virt::allocateKernelVirtualPages(int)>
c000d059:	83 c4 10             	add    esp,0x10
c000d05c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d060:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d066:	83 ec 0c             	sub    esp,0xc
c000d069:	6a 01                	push   0x1
c000d06b:	6a 01                	push   0x1
c000d06d:	50                   	push   eax
c000d06e:	52                   	push   edx
c000d06f:	53                   	push   ebx
c000d070:	e8 47 bd ff ff       	call   c0008dbc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d075:	83 c4 20             	add    esp,0x20
c000d078:	09 f0                	or     eax,esi
c000d07a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d07e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d082:	c1 e0 03             	shl    eax,0x3
c000d085:	05 80 29 02 c0       	add    eax,0xc0022980
c000d08a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d08e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d092:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d096:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000d09e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d0a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d0a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d0aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d0ae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d0b2:	89 c6                	mov    esi,eax
c000d0b4:	89 d7                	mov    edi,edx
c000d0b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d0b8:	89 c8                	mov    eax,ecx
c000d0ba:	89 fa                	mov    edx,edi
c000d0bc:	89 f3                	mov    ebx,esi
c000d0be:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000d0c2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000d0c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d0ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d0d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0d5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d0d9:	05 00 10 00 00       	add    eax,0x1000
c000d0de:	c1 e8 0c             	shr    eax,0xc
c000d0e1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d0e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0f1:	25 ff 0f 00 00       	and    eax,0xfff
c000d0f6:	89 c6                	mov    esi,eax
c000d0f8:	8b 1d 54 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020454
c000d0fe:	83 ec 0c             	sub    esp,0xc
c000d101:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000d105:	e8 67 b3 ff ff       	call   c0008471 <Virt::allocateKernelVirtualPages(int)>
c000d10a:	83 c4 10             	add    esp,0x10
c000d10d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d111:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d117:	83 ec 0c             	sub    esp,0xc
c000d11a:	6a 01                	push   0x1
c000d11c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d120:	50                   	push   eax
c000d121:	52                   	push   edx
c000d122:	53                   	push   ebx
c000d123:	e8 94 bc ff ff       	call   c0008dbc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d128:	83 c4 20             	add    esp,0x20
c000d12b:	09 f0                	or     eax,esi
c000d12d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d131:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d135:	83 ec 0c             	sub    esp,0xc
c000d138:	50                   	push   eax
c000d139:	e8 27 b6 ff ff       	call   c0008765 <Virt::freeKernelVirtualPages(unsigned long)>
c000d13e:	83 c4 10             	add    esp,0x10
c000d141:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d145:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000d149:	89 14 c5 84 29 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd67c],edx
c000d150:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000d154:	e9 bf fe ff ff       	jmp    c000d018 <loadACPITables(unsigned char*)+0x114>
c000d159:	8d 76 00             	lea    esi,[esi+0x0]
c000d15c:	90                   	nop
c000d15d:	8d 76 00             	lea    esi,[esi+0x0]
c000d160:	83 c4 60             	add    esp,0x60
c000d163:	5b                   	pop    ebx
c000d164:	5e                   	pop    esi
c000d165:	5f                   	pop    edi
c000d166:	c3                   	ret    
c000d167:	90                   	nop

c000d168 <findRSDT(unsigned char*)>:
c000d168:	57                   	push   edi
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	83 ec 50             	sub    esp,0x50
c000d16e:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c000d173:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d179:	83 e0 04             	and    eax,0x4
c000d17c:	84 c0                	test   al,al
c000d17e:	75 0c                	jne    c000d18c <findRSDT(unsigned char*)+0x24>
c000d180:	b8 00 00 00 00       	mov    eax,0x0
c000d185:	e9 26 01 00 00       	jmp    c000d2b0 <findRSDT(unsigned char*)+0x148>
c000d18a:	66 90                	xchg   ax,ax
c000d18c:	89 e0                	mov    eax,esp
c000d18e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000d192:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d196:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d19a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000d1a2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d1a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1aa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d1ae:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000d1b2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000d1b6:	89 c6                	mov    esi,eax
c000d1b8:	89 d7                	mov    edi,edx
c000d1ba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d1bc:	89 c8                	mov    eax,ecx
c000d1be:	89 fa                	mov    edx,edi
c000d1c0:	89 f3                	mov    ebx,esi
c000d1c2:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000d1c6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d1ca:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d1ce:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d1d2:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000d1d6:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000d1de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d1e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d1e6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d1ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1ee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d1f2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d1f6:	25 ff 0f 00 00       	and    eax,0xfff
c000d1fb:	89 c6                	mov    esi,eax
c000d1fd:	8b 1d 54 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020454
c000d203:	83 ec 0c             	sub    esp,0xc
c000d206:	6a 02                	push   0x2
c000d208:	e8 64 b2 ff ff       	call   c0008471 <Virt::allocateKernelVirtualPages(int)>
c000d20d:	83 c4 10             	add    esp,0x10
c000d210:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000d214:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d21a:	83 ec 0c             	sub    esp,0xc
c000d21d:	6a 01                	push   0x1
c000d21f:	6a 02                	push   0x2
c000d221:	50                   	push   eax
c000d222:	52                   	push   edx
c000d223:	53                   	push   ebx
c000d224:	e8 93 bb ff ff       	call   c0008dbc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d229:	83 c4 20             	add    esp,0x20
c000d22c:	09 f0                	or     eax,esi
c000d22e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d232:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d236:	25 ff 0f 00 00       	and    eax,0xfff
c000d23b:	89 c6                	mov    esi,eax
c000d23d:	8b 1d 54 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020454
c000d243:	83 ec 0c             	sub    esp,0xc
c000d246:	6a 02                	push   0x2
c000d248:	e8 24 b2 ff ff       	call   c0008471 <Virt::allocateKernelVirtualPages(int)>
c000d24d:	83 c4 10             	add    esp,0x10
c000d250:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000d254:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d25a:	83 ec 0c             	sub    esp,0xc
c000d25d:	6a 01                	push   0x1
c000d25f:	6a 02                	push   0x2
c000d261:	50                   	push   eax
c000d262:	52                   	push   edx
c000d263:	53                   	push   ebx
c000d264:	e8 53 bb ff ff       	call   c0008dbc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d269:	83 c4 20             	add    esp,0x20
c000d26c:	09 f0                	or     eax,esi
c000d26e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d272:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000d277:	75 13                	jne    c000d28c <findRSDT(unsigned char*)+0x124>
c000d279:	c6 05 80 2b 02 c0 00 	mov    BYTE PTR ds:0xc0022b80,0x0
c000d280:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d284:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d288:	eb 22                	jmp    c000d2ac <findRSDT(unsigned char*)+0x144>
c000d28a:	66 90                	xchg   ax,ax
c000d28c:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000d291:	75 11                	jne    c000d2a4 <findRSDT(unsigned char*)+0x13c>
c000d293:	c6 05 80 2b 02 c0 01 	mov    BYTE PTR ds:0xc0022b80,0x1
c000d29a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d29e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d2a2:	eb 08                	jmp    c000d2ac <findRSDT(unsigned char*)+0x144>
c000d2a4:	b8 00 00 00 00       	mov    eax,0x0
c000d2a9:	eb 05                	jmp    c000d2b0 <findRSDT(unsigned char*)+0x148>
c000d2ab:	90                   	nop
c000d2ac:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d2b0:	83 c4 50             	add    esp,0x50
c000d2b3:	5b                   	pop    ebx
c000d2b4:	5e                   	pop    esi
c000d2b5:	5f                   	pop    edi
c000d2b6:	c3                   	ret    
c000d2b7:	90                   	nop

c000d2b8 <findDataTable(unsigned char*, char*)>:
c000d2b8:	83 ec 1c             	sub    esp,0x1c
c000d2bb:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c000d2c0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d2c6:	83 e0 04             	and    eax,0x4
c000d2c9:	84 c0                	test   al,al
c000d2cb:	75 07                	jne    c000d2d4 <findDataTable(unsigned char*, char*)+0x1c>
c000d2cd:	b8 00 00 00 00       	mov    eax,0x0
c000d2d2:	eb 58                	jmp    c000d32c <findDataTable(unsigned char*, char*)+0x74>
c000d2d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000d2dc:	a1 6c 29 02 c0       	mov    eax,ds:0xc002296c
c000d2e1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000d2e5:	7d 3d                	jge    c000d324 <findDataTable(unsigned char*, char*)+0x6c>
c000d2e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d2eb:	c1 e0 03             	shl    eax,0x3
c000d2ee:	05 80 29 02 c0       	add    eax,0xc0022980
c000d2f3:	83 ec 04             	sub    esp,0x4
c000d2f6:	6a 04                	push   0x4
c000d2f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2fc:	50                   	push   eax
c000d2fd:	e8 a2 30 ff ff       	call   c00003a4 <memcmp>
c000d302:	83 c4 10             	add    esp,0x10
c000d305:	85 c0                	test   eax,eax
c000d307:	0f 94 c0             	sete   al
c000d30a:	84 c0                	test   al,al
c000d30c:	74 0e                	je     c000d31c <findDataTable(unsigned char*, char*)+0x64>
c000d30e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d312:	8b 04 c5 84 29 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd67c]
c000d319:	eb 11                	jmp    c000d32c <findDataTable(unsigned char*, char*)+0x74>
c000d31b:	90                   	nop
c000d31c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000d320:	eb ba                	jmp    c000d2dc <findDataTable(unsigned char*, char*)+0x24>
c000d322:	66 90                	xchg   ax,ax
c000d324:	b8 00 00 00 00       	mov    eax,0x0
c000d329:	8d 76 00             	lea    esi,[esi+0x0]
c000d32c:	83 c4 1c             	add    esp,0x1c
c000d32f:	c3                   	ret    

c000d330 <scanMADT()>:
c000d330:	53                   	push   ebx
c000d331:	83 ec 38             	sub    esp,0x38
c000d334:	a1 80 03 02 c0       	mov    eax,ds:0xc0020380
c000d339:	25 00 04 00 00       	and    eax,0x400
c000d33e:	74 14                	je     c000d354 <scanMADT()+0x24>
c000d340:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c000d345:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d34b:	83 e2 fb             	and    edx,0xfffffffb
c000d34e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d354:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c000d359:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d35f:	83 e0 04             	and    eax,0x4
c000d362:	84 c0                	test   al,al
c000d364:	0f 84 52 04 00 00    	je     c000d7bc <scanMADT()+0x48c>
c000d36a:	e8 05 fb ff ff       	call   c000ce74 <findRSDP()>
c000d36f:	a3 8c 2b 02 c0       	mov    ds:0xc0022b8c,eax
c000d374:	a1 8c 2b 02 c0       	mov    eax,ds:0xc0022b8c
c000d379:	85 c0                	test   eax,eax
c000d37b:	75 1b                	jne    c000d398 <scanMADT()+0x68>
c000d37d:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c000d382:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d388:	83 e2 fb             	and    edx,0xfffffffb
c000d38b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d391:	e9 2e 04 00 00       	jmp    c000d7c4 <scanMADT()+0x494>
c000d396:	66 90                	xchg   ax,ax
c000d398:	a1 8c 2b 02 c0       	mov    eax,ds:0xc0022b8c
c000d39d:	83 ec 0c             	sub    esp,0xc
c000d3a0:	50                   	push   eax
c000d3a1:	e8 c2 fd ff ff       	call   c000d168 <findRSDT(unsigned char*)>
c000d3a6:	83 c4 10             	add    esp,0x10
c000d3a9:	a3 88 2b 02 c0       	mov    ds:0xc0022b88,eax
c000d3ae:	a1 88 2b 02 c0       	mov    eax,ds:0xc0022b88
c000d3b3:	85 c0                	test   eax,eax
c000d3b5:	75 19                	jne    c000d3d0 <scanMADT()+0xa0>
c000d3b7:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c000d3bc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d3c2:	83 e2 fb             	and    edx,0xfffffffb
c000d3c5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d3cb:	e9 f4 03 00 00       	jmp    c000d7c4 <scanMADT()+0x494>
c000d3d0:	a1 88 2b 02 c0       	mov    eax,ds:0xc0022b88
c000d3d5:	83 ec 0c             	sub    esp,0xc
c000d3d8:	50                   	push   eax
c000d3d9:	e8 26 fb ff ff       	call   c000cf04 <loadACPITables(unsigned char*)>
c000d3de:	83 c4 10             	add    esp,0x10
c000d3e1:	a1 88 2b 02 c0       	mov    eax,ds:0xc0022b88
c000d3e6:	83 ec 08             	sub    esp,0x8
c000d3e9:	68 48 e7 01 c0       	push   0xc001e748
c000d3ee:	50                   	push   eax
c000d3ef:	e8 c4 fe ff ff       	call   c000d2b8 <findDataTable(unsigned char*, char*)>
c000d3f4:	83 c4 10             	add    esp,0x10
c000d3f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3fb:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000d400:	75 1a                	jne    c000d41c <scanMADT()+0xec>
c000d402:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c000d407:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d40d:	83 e2 fe             	and    edx,0xfffffffe
c000d410:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d416:	e9 a9 03 00 00       	jmp    c000d7c4 <scanMADT()+0x494>
c000d41b:	90                   	nop
c000d41c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000d424:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d428:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d42b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000d42f:	0f 87 8f 03 00 00    	ja     c000d7c4 <scanMADT()+0x494>
c000d435:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000d43d:	0f 87 81 03 00 00    	ja     c000d7c4 <scanMADT()+0x494>
c000d443:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d447:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d44b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d44f:	8d 50 01             	lea    edx,[eax+0x1]
c000d452:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d456:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d45a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d45e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000d462:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d466:	8d 50 01             	lea    edx,[eax+0x1]
c000d469:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d46d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d471:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d475:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000d479:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000d47e:	0f 86 3c 03 00 00    	jbe    c000d7c0 <scanMADT()+0x490>
c000d484:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000d489:	75 59                	jne    c000d4e4 <scanMADT()+0x1b4>
c000d48b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d48f:	8d 50 01             	lea    edx,[eax+0x1]
c000d492:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d496:	8a 15 80 2d 02 c0    	mov    dl,BYTE PTR ds:0xc0022d80
c000d49c:	0f b6 d2             	movzx  edx,dl
c000d49f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d4a3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d4a7:	88 82 c0 2d 02 c0    	mov    BYTE PTR [edx-0x3ffdd240],al
c000d4ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d4b1:	8d 50 01             	lea    edx,[eax+0x1]
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	8a 15 80 2d 02 c0    	mov    dl,BYTE PTR ds:0xc0022d80
c000d4be:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d4c1:	88 0d 80 2d 02 c0    	mov    BYTE PTR ds:0xc0022d80,cl
c000d4c7:	0f b6 d2             	movzx  edx,dl
c000d4ca:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d4ce:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d4d2:	88 82 a0 2d 02 c0    	mov    BYTE PTR [edx-0x3ffdd260],al
c000d4d8:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d4dd:	e9 c6 02 00 00       	jmp    c000d7a8 <scanMADT()+0x478>
c000d4e2:	66 90                	xchg   ax,ax
c000d4e4:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000d4e9:	0f 85 15 01 00 00    	jne    c000d604 <scanMADT()+0x2d4>
c000d4ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d4f3:	8d 50 01             	lea    edx,[eax+0x1]
c000d4f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4fa:	8a 15 40 2c 02 c0    	mov    dl,BYTE PTR ds:0xc0022c40
c000d500:	0f b6 d2             	movzx  edx,dl
c000d503:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d507:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d50b:	88 82 60 2c 02 c0    	mov    BYTE PTR [edx-0x3ffdd3a0],al
c000d511:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000d515:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d519:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d51d:	01 d0                	add    eax,edx
c000d51f:	83 c0 2c             	add    eax,0x2c
c000d522:	8a 00                	mov    al,BYTE PTR [eax]
c000d524:	0f b6 d0             	movzx  edx,al
c000d527:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d52b:	8d 48 01             	lea    ecx,[eax+0x1]
c000d52e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d532:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d536:	0f b6 c0             	movzx  eax,al
c000d539:	c1 e0 08             	shl    eax,0x8
c000d53c:	89 d1                	mov    ecx,edx
c000d53e:	09 c1                	or     ecx,eax
c000d540:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d544:	8d 50 02             	lea    edx,[eax+0x2]
c000d547:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d54b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d54f:	0f b6 c0             	movzx  eax,al
c000d552:	c1 e0 10             	shl    eax,0x10
c000d555:	09 c1                	or     ecx,eax
c000d557:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d55b:	8d 50 03             	lea    edx,[eax+0x3]
c000d55e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d562:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d566:	0f b6 c0             	movzx  eax,al
c000d569:	c1 e0 18             	shl    eax,0x18
c000d56c:	09 c1                	or     ecx,eax
c000d56e:	89 ca                	mov    edx,ecx
c000d570:	a0 40 2c 02 c0       	mov    al,ds:0xc0022c40
c000d575:	0f b6 c0             	movzx  eax,al
c000d578:	89 14 85 80 2c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd380],edx
c000d57f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d584:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d588:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d58c:	01 d0                	add    eax,edx
c000d58e:	83 c0 2c             	add    eax,0x2c
c000d591:	8a 00                	mov    al,BYTE PTR [eax]
c000d593:	0f b6 d0             	movzx  edx,al
c000d596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d59a:	8d 48 01             	lea    ecx,[eax+0x1]
c000d59d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d5a1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d5a5:	0f b6 c0             	movzx  eax,al
c000d5a8:	c1 e0 08             	shl    eax,0x8
c000d5ab:	89 d1                	mov    ecx,edx
c000d5ad:	09 c1                	or     ecx,eax
c000d5af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d5b3:	8d 50 02             	lea    edx,[eax+0x2]
c000d5b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d5ba:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d5be:	0f b6 c0             	movzx  eax,al
c000d5c1:	c1 e0 10             	shl    eax,0x10
c000d5c4:	09 c1                	or     ecx,eax
c000d5c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d5ca:	8d 50 03             	lea    edx,[eax+0x3]
c000d5cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d5d1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d5d5:	0f b6 c0             	movzx  eax,al
c000d5d8:	c1 e0 18             	shl    eax,0x18
c000d5db:	09 c1                	or     ecx,eax
c000d5dd:	89 ca                	mov    edx,ecx
c000d5df:	a0 40 2c 02 c0       	mov    al,ds:0xc0022c40
c000d5e4:	0f b6 c0             	movzx  eax,al
c000d5e7:	89 14 85 00 2d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd300],edx
c000d5ee:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d5f3:	a0 40 2c 02 c0       	mov    al,ds:0xc0022c40
c000d5f8:	40                   	inc    eax
c000d5f9:	a2 40 2c 02 c0       	mov    ds:0xc0022c40,al
c000d5fe:	e9 a5 01 00 00       	jmp    c000d7a8 <scanMADT()+0x478>
c000d603:	90                   	nop
c000d604:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000d609:	0f 85 e9 00 00 00    	jne    c000d6f8 <scanMADT()+0x3c8>
c000d60f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d613:	8d 50 01             	lea    edx,[eax+0x1]
c000d616:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d61a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d61e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d622:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000d626:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d62a:	8d 50 01             	lea    edx,[eax+0x1]
c000d62d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d631:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d635:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d639:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000d63d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d641:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d645:	01 d0                	add    eax,edx
c000d647:	83 c0 2c             	add    eax,0x2c
c000d64a:	8a 00                	mov    al,BYTE PTR [eax]
c000d64c:	0f b6 d0             	movzx  edx,al
c000d64f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d653:	8d 48 01             	lea    ecx,[eax+0x1]
c000d656:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d65a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d65e:	0f b6 c0             	movzx  eax,al
c000d661:	c1 e0 08             	shl    eax,0x8
c000d664:	89 d1                	mov    ecx,edx
c000d666:	09 c1                	or     ecx,eax
c000d668:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d66c:	8d 50 02             	lea    edx,[eax+0x2]
c000d66f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d673:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d677:	0f b6 c0             	movzx  eax,al
c000d67a:	c1 e0 10             	shl    eax,0x10
c000d67d:	09 c1                	or     ecx,eax
c000d67f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d683:	8d 50 03             	lea    edx,[eax+0x3]
c000d686:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d68a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d68e:	0f b6 c0             	movzx  eax,al
c000d691:	c1 e0 18             	shl    eax,0x18
c000d694:	09 c8                	or     eax,ecx
c000d696:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d69a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d69f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d6a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d6a7:	01 d0                	add    eax,edx
c000d6a9:	83 c0 2c             	add    eax,0x2c
c000d6ac:	8a 00                	mov    al,BYTE PTR [eax]
c000d6ae:	0f b6 c0             	movzx  eax,al
c000d6b1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d6b5:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d6b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d6bc:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000d6c0:	0f b6 d2             	movzx  edx,dl
c000d6c3:	c1 e2 08             	shl    edx,0x8
c000d6c6:	09 d0                	or     eax,edx
c000d6c8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000d6cd:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000d6d2:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000d6d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d6db:	88 90 20 fd 01 c0    	mov    BYTE PTR [eax-0x3ffe02e0],dl
c000d6e1:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000d6e6:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000d6eb:	66 89 84 12 20 2c 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdd3e0],ax
c000d6f3:	e9 b0 00 00 00       	jmp    c000d7a8 <scanMADT()+0x478>
c000d6f8:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000d6fd:	0f 85 99 00 00 00    	jne    c000d79c <scanMADT()+0x46c>
c000d703:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d707:	8d 50 01             	lea    edx,[eax+0x1]
c000d70a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d70e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d712:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d716:	0f b6 c0             	movzx  eax,al
c000d719:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d71d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d721:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d725:	01 d0                	add    eax,edx
c000d727:	83 c0 2c             	add    eax,0x2c
c000d72a:	8a 00                	mov    al,BYTE PTR [eax]
c000d72c:	0f b6 d0             	movzx  edx,al
c000d72f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d733:	8d 48 01             	lea    ecx,[eax+0x1]
c000d736:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d73a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d73e:	0f b6 c0             	movzx  eax,al
c000d741:	c1 e0 08             	shl    eax,0x8
c000d744:	09 d0                	or     eax,edx
c000d746:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d74a:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000d74f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d753:	8d 50 01             	lea    edx,[eax+0x1]
c000d756:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d75a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d75e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d762:	0f b6 c0             	movzx  eax,al
c000d765:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d76d:	c1 e0 08             	shl    eax,0x8
c000d770:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d774:	89 c1                	mov    ecx,eax
c000d776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d77a:	c1 e0 18             	shl    eax,0x18
c000d77d:	89 c3                	mov    ebx,eax
c000d77f:	a1 90 2b 02 c0       	mov    eax,ds:0xc0022b90
c000d784:	8d 50 01             	lea    edx,[eax+0x1]
c000d787:	89 15 90 2b 02 c0    	mov    DWORD PTR ds:0xc0022b90,edx
c000d78d:	09 d9                	or     ecx,ebx
c000d78f:	89 ca                	mov    edx,ecx
c000d791:	89 14 85 a0 2b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd460],edx
c000d798:	eb 0e                	jmp    c000d7a8 <scanMADT()+0x478>
c000d79a:	66 90                	xchg   ax,ax
c000d79c:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000d7a1:	75 05                	jne    c000d7a8 <scanMADT()+0x478>
c000d7a3:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000d7a8:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000d7ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d7b1:	01 d0                	add    eax,edx
c000d7b3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d7b7:	e9 68 fc ff ff       	jmp    c000d424 <scanMADT()+0xf4>
c000d7bc:	90                   	nop
c000d7bd:	eb 05                	jmp    c000d7c4 <scanMADT()+0x494>
c000d7bf:	90                   	nop
c000d7c0:	90                   	nop
c000d7c1:	8d 76 00             	lea    esi,[esi+0x0]
c000d7c4:	83 c4 38             	add    esp,0x38
c000d7c7:	5b                   	pop    ebx
c000d7c8:	c3                   	ret    
c000d7c9:	90                   	nop
c000d7ca:	66 90                	xchg   ax,ax

c000d7cc <ACPI::ACPI()>:
c000d7cc:	83 ec 0c             	sub    esp,0xc
c000d7cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d3:	83 ec 08             	sub    esp,0x8
c000d7d6:	68 4d e7 01 c0       	push   0xc001e74d
c000d7db:	50                   	push   eax
c000d7dc:	e8 ad d4 ff ff       	call   c000ac8e <Device::Device(char const*)>
c000d7e1:	83 c4 10             	add    esp,0x10
c000d7e4:	ba 84 e8 01 c0       	mov    edx,0xc001e884
c000d7e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ed:	89 10                	mov    DWORD PTR [eax],edx
c000d7ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000d7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7fe:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000d808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d80c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000d816:	e8 15 fb ff ff       	call   c000d330 <scanMADT()>
c000d81b:	90                   	nop
c000d81c:	83 c4 0c             	add    esp,0xc
c000d81f:	c3                   	ret    

c000d820 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000d820:	83 ec 2c             	sub    esp,0x2c
c000d823:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d827:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d82b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000d82f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000d833:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000d838:	88 d0                	mov    al,dl
c000d83a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000d83e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d843:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d84b:	90                   	nop
c000d84c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d850:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000d856:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000d85a:	0f 8d 9c 00 00 00    	jge    c000d8fc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000d860:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d864:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d868:	83 c2 2a             	add    edx,0x2a
c000d86b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000d86f:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000d874:	75 7a                	jne    c000d8f0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000d876:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d87a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d87e:	83 c2 2a             	add    edx,0x2a
c000d881:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000d885:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000d889:	75 65                	jne    c000d8f0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000d88b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000d890:	74 3a                	je     c000d8cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000d892:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d896:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d89a:	83 c2 2a             	add    edx,0x2a
c000d89d:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000d8a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d8a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d8a8:	39 c2                	cmp    edx,eax
c000d8aa:	74 10                	je     c000d8bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000d8ac:	83 ec 0c             	sub    esp,0xc
c000d8af:	68 c8 e6 01 c0       	push   0xc001e6c8
c000d8b4:	e8 f0 1a 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c000d8b9:	83 c4 10             	add    esp,0x10
c000d8bc:	83 ec 0c             	sub    esp,0xc
c000d8bf:	68 52 e7 01 c0       	push   0xc001e752
c000d8c4:	e8 e0 1a 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c000d8c9:	83 c4 10             	add    esp,0x10
c000d8cc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000d8d0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d8d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d8d8:	83 c2 2a             	add    edx,0x2a
c000d8db:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000d8df:	8b 02                	mov    eax,DWORD PTR [edx]
c000d8e1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000d8e4:	89 01                	mov    DWORD PTR [ecx],eax
c000d8e6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8e9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d8ee:	66 90                	xchg   ax,ax
c000d8f0:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000d8f4:	e9 53 ff ff ff       	jmp    c000d84c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000d8f9:	8d 76 00             	lea    esi,[esi+0x0]
c000d8fc:	90                   	nop
c000d8fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d901:	83 c4 2c             	add    esp,0x2c
c000d904:	c2 04 00             	ret    0x4
c000d907:	90                   	nop

c000d908 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000d908:	83 ec 1c             	sub    esp,0x1c
c000d90b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d90f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d913:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000d917:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000d91c:	88 c8                	mov    al,cl
c000d91e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000d922:	88 d0                	mov    al,dl
c000d924:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000d928:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d92c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000d932:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d936:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000d939:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000d93d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000d941:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d945:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000d94b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d94f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000d952:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d956:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000d95b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d95f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000d965:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000d969:	8d 48 01             	lea    ecx,[eax+0x1]
c000d96c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d970:	83 c2 2a             	add    edx,0x2a
c000d973:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000d977:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d97b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000d981:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d985:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000d988:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d98c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000d990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d994:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000d99a:	8d 50 01             	lea    edx,[eax+0x1]
c000d99d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9a1:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000d9a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9ab:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000d9b1:	3d 00 02 00 00       	cmp    eax,0x200
c000d9b6:	75 10                	jne    c000d9c8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000d9b8:	83 ec 0c             	sub    esp,0xc
c000d9bb:	68 61 e7 01 c0       	push   0xc001e761
c000d9c0:	e8 e4 19 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c000d9c5:	83 c4 10             	add    esp,0x10
c000d9c8:	90                   	nop
c000d9c9:	83 c4 1c             	add    esp,0x1c
c000d9cc:	c3                   	ret    
c000d9cd:	90                   	nop
c000d9ce:	66 90                	xchg   ax,ax

c000d9d0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000d9d0:	b8 00 00 00 00       	mov    eax,0x0
c000d9d5:	c3                   	ret    
c000d9d6:	66 90                	xchg   ax,ax

c000d9d8 <ACPI::detectPCI()>:
c000d9d8:	53                   	push   ebx
c000d9d9:	83 ec 28             	sub    esp,0x28
c000d9dc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d9e1:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000d9e6:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c000d9eb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d9f1:	83 e0 04             	and    eax,0x4
c000d9f4:	84 c0                	test   al,al
c000d9f6:	74 2c                	je     c000da24 <ACPI::detectPCI()+0x4c>
c000d9f8:	a1 88 2b 02 c0       	mov    eax,ds:0xc0022b88
c000d9fd:	83 ec 08             	sub    esp,0x8
c000da00:	68 7e e7 01 c0       	push   0xc001e77e
c000da05:	50                   	push   eax
c000da06:	e8 ad f8 ff ff       	call   c000d2b8 <findDataTable(unsigned char*, char*)>
c000da0b:	83 c4 10             	add    esp,0x10
c000da0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000da12:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000da17:	74 0b                	je     c000da24 <ACPI::detectPCI()+0x4c>
c000da19:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000da1e:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000da23:	90                   	nop
c000da24:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000da2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000da30:	8a 00                	mov    al,BYTE PTR [eax]
c000da32:	3c 01                	cmp    al,0x1
c000da34:	75 0e                	jne    c000da44 <ACPI::detectPCI()+0x6c>
c000da36:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000da3b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000da40:	eb 2a                	jmp    c000da6c <ACPI::detectPCI()+0x94>
c000da42:	66 90                	xchg   ax,ax
c000da44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000da48:	8a 00                	mov    al,BYTE PTR [eax]
c000da4a:	3c 02                	cmp    al,0x2
c000da4c:	75 1e                	jne    c000da6c <ACPI::detectPCI()+0x94>
c000da4e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000da53:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000da58:	74 12                	je     c000da6c <ACPI::detectPCI()+0x94>
c000da5a:	83 ec 0c             	sub    esp,0xc
c000da5d:	68 f8 e6 01 c0       	push   0xc001e6f8
c000da62:	e8 42 19 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c000da67:	83 c4 10             	add    esp,0x10
c000da6a:	66 90                	xchg   ax,ax
c000da6c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000da70:	83 f0 01             	xor    eax,0x1
c000da73:	84 c0                	test   al,al
c000da75:	74 41                	je     c000dab8 <ACPI::detectPCI()+0xe0>
c000da77:	e8 d4 26 ff ff       	call   c0000150 <manualPCIProbe>
c000da7c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da80:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000da85:	75 0d                	jne    c000da94 <ACPI::detectPCI()+0xbc>
c000da87:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000da8c:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000da91:	eb 25                	jmp    c000dab8 <ACPI::detectPCI()+0xe0>
c000da93:	90                   	nop
c000da94:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000da99:	75 1d                	jne    c000dab8 <ACPI::detectPCI()+0xe0>
c000da9b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000daa0:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000daa5:	74 11                	je     c000dab8 <ACPI::detectPCI()+0xe0>
c000daa7:	83 ec 0c             	sub    esp,0xc
c000daaa:	68 f8 e6 01 c0       	push   0xc001e6f8
c000daaf:	e8 f5 18 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c000dab4:	83 c4 10             	add    esp,0x10
c000dab7:	90                   	nop
c000dab8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000dabd:	0f 84 85 00 00 00    	je     c000db48 <ACPI::detectPCI()+0x170>
c000dac3:	83 ec 0c             	sub    esp,0xc
c000dac6:	68 83 e7 01 c0       	push   0xc001e783
c000dacb:	e8 d3 8e ff ff       	call   c00069a3 <Krnl::setBootMessage(char const*)>
c000dad0:	83 c4 10             	add    esp,0x10
c000dad3:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000dadb:	83 ec 0c             	sub    esp,0xc
c000dade:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dae2:	e8 62 8e ff ff       	call   c0006949 <malloc>
c000dae7:	83 c4 10             	add    esp,0x10
c000daea:	89 c3                	mov    ebx,eax
c000daec:	83 ec 0c             	sub    esp,0xc
c000daef:	53                   	push   ebx
c000daf0:	e8 25 ad 00 00       	call   c001881a <PCI::PCI()>
c000daf5:	83 c4 10             	add    esp,0x10
c000daf8:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000dafc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db00:	83 ec 08             	sub    esp,0x8
c000db03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db07:	50                   	push   eax
c000db08:	e8 e9 cf ff ff       	call   c000aaf6 <Device::addChild(Device*)>
c000db0d:	83 c4 10             	add    esp,0x10
c000db10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db14:	8b 00                	mov    eax,DWORD PTR [eax]
c000db16:	83 c0 08             	add    eax,0x8
c000db19:	8b 00                	mov    eax,DWORD PTR [eax]
c000db1b:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000db20:	74 0a                	je     c000db2c <ACPI::detectPCI()+0x154>
c000db22:	ba 01 00 00 00       	mov    edx,0x1
c000db27:	eb 0b                	jmp    c000db34 <ACPI::detectPCI()+0x15c>
c000db29:	8d 76 00             	lea    esi,[esi+0x0]
c000db2c:	ba 02 00 00 00       	mov    edx,0x2
c000db31:	8d 76 00             	lea    esi,[esi+0x0]
c000db34:	6a 00                	push   0x0
c000db36:	6a 00                	push   0x0
c000db38:	52                   	push   edx
c000db39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db3d:	ff d0                	call   eax
c000db3f:	83 c4 10             	add    esp,0x10
c000db42:	e9 91 00 00 00       	jmp    c000dbd8 <ACPI::detectPCI()+0x200>
c000db47:	90                   	nop
c000db48:	83 ec 0c             	sub    esp,0xc
c000db4b:	68 9b e7 01 c0       	push   0xc001e79b
c000db50:	e8 4e 8e ff ff       	call   c00069a3 <Krnl::setBootMessage(char const*)>
c000db55:	83 c4 10             	add    esp,0x10
c000db58:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000db5f:	83 ec 0c             	sub    esp,0xc
c000db62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000db66:	e8 de 8d ff ff       	call   c0006949 <malloc>
c000db6b:	83 c4 10             	add    esp,0x10
c000db6e:	89 c3                	mov    ebx,eax
c000db70:	83 ec 0c             	sub    esp,0xc
c000db73:	53                   	push   ebx
c000db74:	e8 c7 b7 00 00       	call   c0019340 <IDE::IDE()>
c000db79:	83 c4 10             	add    esp,0x10
c000db7c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000db80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db84:	83 ec 08             	sub    esp,0x8
c000db87:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000db8b:	50                   	push   eax
c000db8c:	e8 65 cf ff ff       	call   c000aaf6 <Device::addChild(Device*)>
c000db91:	83 c4 10             	add    esp,0x10
c000db94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000db98:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000dba2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dba6:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000dbaf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dbb3:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000dbbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dbc0:	8b 00                	mov    eax,DWORD PTR [eax]
c000dbc2:	83 c0 08             	add    eax,0x8
c000dbc5:	8b 00                	mov    eax,DWORD PTR [eax]
c000dbc7:	6a 00                	push   0x0
c000dbc9:	6a 00                	push   0x0
c000dbcb:	6a 00                	push   0x0
c000dbcd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd1:	ff d0                	call   eax
c000dbd3:	83 c4 10             	add    esp,0x10
c000dbd6:	66 90                	xchg   ax,ax
c000dbd8:	90                   	nop
c000dbd9:	83 c4 28             	add    esp,0x28
c000dbdc:	5b                   	pop    ebx
c000dbdd:	c3                   	ret    
c000dbde:	66 90                	xchg   ax,ax

c000dbe0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000dbe0:	83 ec 1c             	sub    esp,0x1c
c000dbe3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dbe7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dbea:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dbee:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c000dbf3:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000dbf8:	83 ec 08             	sub    esp,0x8
c000dbfb:	52                   	push   edx
c000dbfc:	50                   	push   eax
c000dbfd:	e8 cc 83 ff ff       	call   c0005fce <Computer::readCMOS(unsigned char)>
c000dc02:	83 c4 10             	add    esp,0x10
c000dc05:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000dc09:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c000dc0e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000dc13:	83 ec 04             	sub    esp,0x4
c000dc16:	6a 01                	push   0x1
c000dc18:	52                   	push   edx
c000dc19:	50                   	push   eax
c000dc1a:	e8 c1 84 ff ff       	call   c00060e0 <Computer::writeCMOS(unsigned char, unsigned char)>
c000dc1f:	83 c4 10             	add    esp,0x10
c000dc22:	90                   	nop
c000dc23:	83 c4 1c             	add    esp,0x1c
c000dc26:	c3                   	ret    
c000dc27:	90                   	nop

c000dc28 <ACPI::sleep()>:
c000dc28:	83 ec 0c             	sub    esp,0xc
c000dc2b:	a1 60 29 02 c0       	mov    eax,ds:0xc0022960
c000dc30:	85 c0                	test   eax,eax
c000dc32:	74 08                	je     c000dc3c <ACPI::sleep()+0x14>
c000dc34:	a1 60 29 02 c0       	mov    eax,ds:0xc0022960
c000dc39:	ff d0                	call   eax
c000dc3b:	90                   	nop
c000dc3c:	90                   	nop
c000dc3d:	83 c4 0c             	add    esp,0xc
c000dc40:	c3                   	ret    
c000dc41:	90                   	nop
c000dc42:	66 90                	xchg   ax,ax

c000dc44 <ACPI::open(int, int, void*)>:
c000dc44:	57                   	push   edi
c000dc45:	56                   	push   esi
c000dc46:	53                   	push   ebx
c000dc47:	81 ec 70 01 00 00    	sub    esp,0x170
c000dc4d:	83 ec 0c             	sub    esp,0xc
c000dc50:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000dc57:	e8 7c fd ff ff       	call   c000d9d8 <ACPI::detectPCI()>
c000dc5c:	83 c4 10             	add    esp,0x10
c000dc5f:	83 ec 0c             	sub    esp,0xc
c000dc62:	68 20 e7 01 c0       	push   0xc001e720
c000dc67:	e8 37 8d ff ff       	call   c00069a3 <Krnl::setBootMessage(char const*)>
c000dc6c:	83 c4 10             	add    esp,0x10
c000dc6f:	83 ec 0c             	sub    esp,0xc
c000dc72:	68 b0 e7 01 c0       	push   0xc001e7b0
c000dc77:	e8 5b 37 00 00       	call   c00113d7 <Thr::loadKernelSymbolTable(char const*)>
c000dc7c:	83 c4 10             	add    esp,0x10
c000dc7f:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000dc87:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000dc92:	83 ec 0c             	sub    esp,0xc
c000dc95:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000dc9c:	e8 a8 8c ff ff       	call   c0006949 <malloc>
c000dca1:	83 c4 10             	add    esp,0x10
c000dca4:	89 c3                	mov    ebx,eax
c000dca6:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c000dcab:	83 ec 04             	sub    esp,0x4
c000dcae:	50                   	push   eax
c000dcaf:	68 ce e7 01 c0       	push   0xc001e7ce
c000dcb4:	53                   	push   ebx
c000dcb5:	e8 84 bf ff ff       	call   c0009c3e <File::File(char const*, Process*)>
c000dcba:	83 c4 10             	add    esp,0x10
c000dcbd:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000dcc4:	83 ec 08             	sub    esp,0x8
c000dcc7:	6a 01                	push   0x1
c000dcc9:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000dcd0:	e8 23 c0 ff ff       	call   c0009cf8 <File::open(FileOpenMode)>
c000dcd5:	83 c4 10             	add    esp,0x10
c000dcd8:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000dcdf:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000dce7:	75 17                	jne    c000dd00 <ACPI::open(int, int, void*)+0xbc>
c000dce9:	83 ec 0c             	sub    esp,0xc
c000dcec:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000dcf3:	e8 5e c0 ff ff       	call   c0009d56 <File::close()>
c000dcf8:	83 c4 10             	add    esp,0x10
c000dcfb:	eb 0b                	jmp    c000dd08 <ACPI::open(int, int, void*)+0xc4>
c000dcfd:	8d 76 00             	lea    esi,[esi+0x0]
c000dd00:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000dd08:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000dd10:	74 1e                	je     c000dd30 <ACPI::open(int, int, void*)+0xec>
c000dd12:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000dd19:	8b 00                	mov    eax,DWORD PTR [eax]
c000dd1b:	83 c0 08             	add    eax,0x8
c000dd1e:	8b 00                	mov    eax,DWORD PTR [eax]
c000dd20:	83 ec 0c             	sub    esp,0xc
c000dd23:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000dd2a:	ff d0                	call   eax
c000dd2c:	83 c4 10             	add    esp,0x10
c000dd2f:	90                   	nop
c000dd30:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000dd37:	83 f0 01             	xor    eax,0x1
c000dd3a:	84 c0                	test   al,al
c000dd3c:	74 42                	je     c000dd80 <ACPI::open(int, int, void*)+0x13c>
c000dd3e:	83 ec 0c             	sub    esp,0xc
c000dd41:	68 ec e7 01 c0       	push   0xc001e7ec
c000dd46:	e8 58 8c ff ff       	call   c00069a3 <Krnl::setBootMessage(char const*)>
c000dd4b:	83 c4 10             	add    esp,0x10
c000dd4e:	83 ec 04             	sub    esp,0x4
c000dd51:	6a 0c                	push   0xc
c000dd53:	68 07 e8 01 c0       	push   0xc001e807
c000dd58:	68 18 e8 01 c0       	push   0xc001e818
c000dd5d:	e8 ab 1e 00 00       	call   c000fc0d <Reg::readIntWithDefault(char*, char*, int)>
c000dd62:	83 c4 10             	add    esp,0x10
c000dd65:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000dd6c:	83 ec 0c             	sub    esp,0xc
c000dd6f:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000dd76:	e8 00 a9 ff ff       	call   c000867b <Virt::setupPageSwapping(int)>
c000dd7b:	83 c4 10             	add    esp,0x10
c000dd7e:	66 90                	xchg   ax,ax
c000dd80:	83 ec 0c             	sub    esp,0xc
c000dd83:	68 8f d8 01 c0       	push   0xc001d88f
c000dd88:	e8 16 8c ff ff       	call   c00069a3 <Krnl::setBootMessage(char const*)>
c000dd8d:	83 c4 10             	add    esp,0x10
c000dd90:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000dd97:	83 ec 08             	sub    esp,0x8
c000dd9a:	6a 12                	push   0x12
c000dd9c:	50                   	push   eax
c000dd9d:	e8 6c d0 ff ff       	call   c000ae0e <getDevicesOfType(DeviceType)>
c000dda2:	83 c4 0c             	add    esp,0xc
c000dda5:	8d 76 00             	lea    esi,[esi+0x0]
c000dda8:	83 ec 0c             	sub    esp,0xc
c000ddab:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ddb2:	50                   	push   eax
c000ddb3:	e8 e4 ee 00 00       	call   c001cc9c <LinkedList<Device>::isEmpty()>
c000ddb8:	83 c4 10             	add    esp,0x10
c000ddbb:	83 f0 01             	xor    eax,0x1
c000ddbe:	84 c0                	test   al,al
c000ddc0:	0f 84 46 01 00 00    	je     c000df0c <ACPI::open(int, int, void*)+0x2c8>
c000ddc6:	83 ec 0c             	sub    esp,0xc
c000ddc9:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ddd0:	50                   	push   eax
c000ddd1:	e8 e2 ee 00 00       	call   c001ccb8 <LinkedList<Device>::getFirstElement()>
c000ddd6:	83 c4 10             	add    esp,0x10
c000ddd9:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000dde0:	83 ec 0c             	sub    esp,0xc
c000dde3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ddea:	50                   	push   eax
c000ddeb:	e8 d0 ee 00 00       	call   c001ccc0 <LinkedList<Device>::removeFirst()>
c000ddf0:	83 c4 10             	add    esp,0x10
c000ddf3:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ddfa:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000de01:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000de08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000de0c:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000de12:	ba 09 00 00 00       	mov    edx,0x9
c000de17:	fc                   	cld    
c000de18:	89 c7                	mov    edi,eax
c000de1a:	89 de                	mov    esi,ebx
c000de1c:	89 d1                	mov    ecx,edx
c000de1e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000de20:	83 ec 08             	sub    esp,0x8
c000de23:	8d 44 24 38          	lea    eax,[esp+0x38]
c000de27:	50                   	push   eax
c000de28:	83 ec 24             	sub    esp,0x24
c000de2b:	89 e0                	mov    eax,esp
c000de2d:	89 c3                	mov    ebx,eax
c000de2f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000de33:	ba 09 00 00 00       	mov    edx,0x9
c000de38:	89 df                	mov    edi,ebx
c000de3a:	89 c6                	mov    esi,eax
c000de3c:	89 d1                	mov    ecx,edx
c000de3e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000de40:	e8 b3 ae 00 00       	call   c0018cf8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000de45:	83 c4 30             	add    esp,0x30
c000de48:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000de4f:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000de57:	0f 84 4b ff ff ff    	je     c000dda8 <ACPI::open(int, int, void*)+0x164>
c000de5d:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000de68:	83 ec 0c             	sub    esp,0xc
c000de6b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000de72:	e8 d2 8a ff ff       	call   c0006949 <malloc>
c000de77:	83 c4 10             	add    esp,0x10
c000de7a:	89 c3                	mov    ebx,eax
c000de7c:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c000de81:	83 ec 04             	sub    esp,0x4
c000de84:	50                   	push   eax
c000de85:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000de8c:	53                   	push   ebx
c000de8d:	e8 ac bd ff ff       	call   c0009c3e <File::File(char const*, Process*)>
c000de92:	83 c4 10             	add    esp,0x10
c000de95:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000de9c:	83 ec 0c             	sub    esp,0xc
c000de9f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000dea6:	e8 bb c0 ff ff       	call   c0009f66 <File::exists()>
c000deab:	83 c4 10             	add    esp,0x10
c000deae:	84 c0                	test   al,al
c000deb0:	74 2a                	je     c000dedc <ACPI::open(int, int, void*)+0x298>
c000deb2:	83 ec 08             	sub    esp,0x8
c000deb5:	6a 01                	push   0x1
c000deb7:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000debe:	e8 8b 3f 00 00       	call   c0011e4e <Thr::loadDLL(char const*, bool)>
c000dec3:	83 c4 10             	add    esp,0x10
c000dec6:	83 ec 08             	sub    esp,0x8
c000dec9:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ded0:	50                   	push   eax
c000ded1:	e8 a9 41 00 00       	call   c001207f <Thr::executeDLL(unsigned long, void*)>
c000ded6:	83 c4 10             	add    esp,0x10
c000ded9:	8d 76 00             	lea    esi,[esi+0x0]
c000dedc:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000dee4:	0f 84 be fe ff ff    	je     c000dda8 <ACPI::open(int, int, void*)+0x164>
c000deea:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000def1:	8b 00                	mov    eax,DWORD PTR [eax]
c000def3:	83 c0 08             	add    eax,0x8
c000def6:	8b 00                	mov    eax,DWORD PTR [eax]
c000def8:	83 ec 0c             	sub    esp,0xc
c000defb:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000df02:	ff d0                	call   eax
c000df04:	83 c4 10             	add    esp,0x10
c000df07:	e9 9c fe ff ff       	jmp    c000dda8 <ACPI::open(int, int, void*)+0x164>
c000df0c:	83 ec 0c             	sub    esp,0xc
c000df0f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000df16:	50                   	push   eax
c000df17:	e8 7c ed 00 00       	call   c001cc98 <LinkedList<Device>::~LinkedList()>
c000df1c:	83 c4 10             	add    esp,0x10
c000df1f:	8b 1d 68 03 02 c0    	mov    ebx,DWORD PTR ds:0xc0020368
c000df25:	83 ec 08             	sub    esp,0x8
c000df28:	6a 01                	push   0x1
c000df2a:	68 1f e8 01 c0       	push   0xc001e81f
c000df2f:	e8 1a 3f 00 00       	call   c0011e4e <Thr::loadDLL(char const*, bool)>
c000df34:	83 c4 10             	add    esp,0x10
c000df37:	83 ec 08             	sub    esp,0x8
c000df3a:	53                   	push   ebx
c000df3b:	50                   	push   eax
c000df3c:	e8 3e 41 00 00       	call   c001207f <Thr::executeDLL(unsigned long, void*)>
c000df41:	83 c4 10             	add    esp,0x10
c000df44:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c000df49:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000df4f:	83 e0 04             	and    eax,0x4
c000df52:	84 c0                	test   al,al
c000df54:	0f 84 16 01 00 00    	je     c000e070 <ACPI::open(int, int, void*)+0x42c>
c000df5a:	83 ec 0c             	sub    esp,0xc
c000df5d:	68 3c e8 01 c0       	push   0xc001e83c
c000df62:	e8 3c 8a ff ff       	call   c00069a3 <Krnl::setBootMessage(char const*)>
c000df67:	83 c4 10             	add    esp,0x10
c000df6a:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000df75:	83 ec 0c             	sub    esp,0xc
c000df78:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000df7f:	e8 c5 89 ff ff       	call   c0006949 <malloc>
c000df84:	83 c4 10             	add    esp,0x10
c000df87:	89 c3                	mov    ebx,eax
c000df89:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c000df8e:	83 ec 04             	sub    esp,0x4
c000df91:	50                   	push   eax
c000df92:	68 59 e8 01 c0       	push   0xc001e859
c000df97:	53                   	push   ebx
c000df98:	e8 a1 bc ff ff       	call   c0009c3e <File::File(char const*, Process*)>
c000df9d:	83 c4 10             	add    esp,0x10
c000dfa0:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000dfa7:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000dfaf:	74 1b                	je     c000dfcc <ACPI::open(int, int, void*)+0x388>
c000dfb1:	83 ec 0c             	sub    esp,0xc
c000dfb4:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000dfbb:	e8 a6 bf ff ff       	call   c0009f66 <File::exists()>
c000dfc0:	83 c4 10             	add    esp,0x10
c000dfc3:	84 c0                	test   al,al
c000dfc5:	74 05                	je     c000dfcc <ACPI::open(int, int, void*)+0x388>
c000dfc7:	b0 01                	mov    al,0x1
c000dfc9:	eb 05                	jmp    c000dfd0 <ACPI::open(int, int, void*)+0x38c>
c000dfcb:	90                   	nop
c000dfcc:	b0 00                	mov    al,0x0
c000dfce:	66 90                	xchg   ax,ax
c000dfd0:	84 c0                	test   al,al
c000dfd2:	74 28                	je     c000dffc <ACPI::open(int, int, void*)+0x3b8>
c000dfd4:	83 ec 08             	sub    esp,0x8
c000dfd7:	6a 01                	push   0x1
c000dfd9:	68 59 e8 01 c0       	push   0xc001e859
c000dfde:	e8 6b 3e 00 00       	call   c0011e4e <Thr::loadDLL(char const*, bool)>
c000dfe3:	83 c4 10             	add    esp,0x10
c000dfe6:	83 ec 08             	sub    esp,0x8
c000dfe9:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000dff0:	50                   	push   eax
c000dff1:	e8 89 40 00 00       	call   c001207f <Thr::executeDLL(unsigned long, void*)>
c000dff6:	83 c4 10             	add    esp,0x10
c000dff9:	8d 76 00             	lea    esi,[esi+0x0]
c000dffc:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e004:	74 2a                	je     c000e030 <ACPI::open(int, int, void*)+0x3ec>
c000e006:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e00e:	74 20                	je     c000e030 <ACPI::open(int, int, void*)+0x3ec>
c000e010:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000e017:	8b 00                	mov    eax,DWORD PTR [eax]
c000e019:	83 c0 08             	add    eax,0x8
c000e01c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e01e:	83 ec 0c             	sub    esp,0xc
c000e021:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000e028:	ff d0                	call   eax
c000e02a:	83 c4 10             	add    esp,0x10
c000e02d:	8d 76 00             	lea    esi,[esi+0x0]
c000e030:	a1 88 2b 02 c0       	mov    eax,ds:0xc0022b88
c000e035:	83 ec 08             	sub    esp,0x8
c000e038:	68 76 e8 01 c0       	push   0xc001e876
c000e03d:	50                   	push   eax
c000e03e:	e8 75 f2 ff ff       	call   c000d2b8 <findDataTable(unsigned char*, char*)>
c000e043:	83 c4 10             	add    esp,0x10
c000e046:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000e04d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000e055:	74 19                	je     c000e070 <ACPI::open(int, int, void*)+0x42c>
c000e057:	83 ec 08             	sub    esp,0x8
c000e05a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000e061:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000e068:	e8 73 fb ff ff       	call   c000dbe0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000e06d:	83 c4 10             	add    esp,0x10
c000e070:	b8 00 00 00 00       	mov    eax,0x0
c000e075:	81 c4 70 01 00 00    	add    esp,0x170
c000e07b:	5b                   	pop    ebx
c000e07c:	5e                   	pop    esi
c000e07d:	5f                   	pop    edi
c000e07e:	c3                   	ret    
c000e07f:	90                   	nop

c000e080 <CPU::close(int, int, void*)>:
c000e080:	31 c0                	xor    eax,eax
c000e082:	c3                   	ret    
c000e083:	90                   	nop

c000e084 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000e084:	60                   	pusha  
c000e085:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e089:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e08d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e091:	9c                   	pushf  
c000e092:	fa                   	cli    
c000e093:	0f 09                	wbinvd 
c000e095:	0f 30                	wrmsr  
c000e097:	9d                   	popf   
c000e098:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e09c:	89 02                	mov    DWORD PTR [edx],eax
c000e09e:	61                   	popa   
c000e09f:	c3                   	ret    

c000e0a0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000e0a0:	60                   	pusha  
c000e0a1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e0a5:	9c                   	pushf  
c000e0a6:	fa                   	cli    
c000e0a7:	0f 09                	wbinvd 
c000e0a9:	31 c0                	xor    eax,eax
c000e0ab:	31 d2                	xor    edx,edx
c000e0ad:	0f 32                	rdmsr  
c000e0af:	9d                   	popf   
c000e0b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e0b4:	89 02                	mov    DWORD PTR [edx],eax
c000e0b6:	61                   	popa   
c000e0b7:	c3                   	ret    

c000e0b8 <CPU::AMD_K6_writeback(int, int, int)>:
c000e0b8:	56                   	push   esi
c000e0b9:	53                   	push   ebx
c000e0ba:	83 ec 10             	sub    esp,0x10
c000e0bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0c1:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000e0c6:	75 5d                	jne    c000e125 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e0c8:	83 f8 08             	cmp    eax,0x8
c000e0cb:	75 09                	jne    c000e0d6 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000e0cd:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000e0d2:	7e 13                	jle    c000e0e7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000e0d4:	eb 30                	jmp    c000e106 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000e0d6:	83 f8 06             	cmp    eax,0x6
c000e0d9:	7c 4a                	jl     c000e125 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e0db:	83 f8 07             	cmp    eax,0x7
c000e0de:	7e 07                	jle    c000e0e7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000e0e0:	83 f8 09             	cmp    eax,0x9
c000e0e3:	74 21                	je     c000e106 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000e0e5:	eb 3e                	jmp    c000e125 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e0e7:	89 e6                	mov    esi,esp
c000e0e9:	8b 1d 8c 03 02 c0    	mov    ebx,DWORD PTR ds:0xc002038c
c000e0ef:	56                   	push   esi
c000e0f0:	c1 eb 15             	shr    ebx,0x15
c000e0f3:	68 82 00 00 c0       	push   0xc0000082
c000e0f8:	83 e3 7e             	and    ebx,0x7e
c000e0fb:	e8 a0 ff ff ff       	call   c000e0a0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000e100:	56                   	push   esi
c000e101:	6a 00                	push   0x0
c000e103:	53                   	push   ebx
c000e104:	eb 12                	jmp    c000e118 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000e106:	89 e3                	mov    ebx,esp
c000e108:	53                   	push   ebx
c000e109:	68 82 00 00 c0       	push   0xc0000082
c000e10e:	e8 8d ff ff ff       	call   c000e0a0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000e113:	53                   	push   ebx
c000e114:	6a 00                	push   0x0
c000e116:	6a 00                	push   0x0
c000e118:	68 82 00 00 c0       	push   0xc0000082
c000e11d:	e8 62 ff ff ff       	call   c000e084 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000e122:	83 c4 18             	add    esp,0x18
c000e125:	83 c4 10             	add    esp,0x10
c000e128:	5b                   	pop    ebx
c000e129:	5e                   	pop    esi
c000e12a:	c3                   	ret    
c000e12b:	90                   	nop

c000e12c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000e12c:	55                   	push   ebp
c000e12d:	57                   	push   edi
c000e12e:	56                   	push   esi
c000e12f:	53                   	push   ebx
c000e130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e134:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e138:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e13c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000e140:	39 05 30 fd 01 c0    	cmp    DWORD PTR ds:0xc001fd30,eax
c000e146:	75 23                	jne    c000e16b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000e148:	a1 ec 2d 02 c0       	mov    eax,ds:0xc0022dec
c000e14d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e151:	89 06                	mov    DWORD PTR [esi],eax
c000e153:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c000e158:	89 07                	mov    DWORD PTR [edi],eax
c000e15a:	a1 e4 2d 02 c0       	mov    eax,ds:0xc0022de4
c000e15f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e162:	a1 e0 2d 02 c0       	mov    eax,ds:0xc0022de0
c000e167:	89 02                	mov    DWORD PTR [edx],eax
c000e169:	eb 3f                	jmp    c000e1aa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000e16b:	31 c9                	xor    ecx,ecx
c000e16d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e171:	0f a2                	cpuid  
c000e173:	89 06                	mov    DWORD PTR [esi],eax
c000e175:	89 1f                	mov    DWORD PTR [edi],ebx
c000e177:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e17b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000e17e:	89 10                	mov    DWORD PTR [eax],edx
c000e180:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e184:	a3 30 fd 01 c0       	mov    ds:0xc001fd30,eax
c000e189:	8b 06                	mov    eax,DWORD PTR [esi]
c000e18b:	a3 ec 2d 02 c0       	mov    ds:0xc0022dec,eax
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	a3 e8 2d 02 c0       	mov    ds:0xc0022de8,eax
c000e197:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e19a:	a3 e4 2d 02 c0       	mov    ds:0xc0022de4,eax
c000e19f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e1a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000e1a5:	a3 e0 2d 02 c0       	mov    ds:0xc0022de0,eax
c000e1aa:	5b                   	pop    ebx
c000e1ab:	5e                   	pop    esi
c000e1ac:	5f                   	pop    edi
c000e1ad:	5d                   	pop    ebp
c000e1ae:	c3                   	ret    
c000e1af:	90                   	nop

c000e1b0 <CPU::cpuidCheckEDX(unsigned int)>:
c000e1b0:	83 ec 10             	sub    esp,0x10
c000e1b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e1b7:	50                   	push   eax
c000e1b8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e1bc:	50                   	push   eax
c000e1bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e1c1:	50                   	push   eax
c000e1c2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e1c6:	50                   	push   eax
c000e1c7:	6a 01                	push   0x1
c000e1c9:	e8 5e ff ff ff       	call   c000e12c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e1ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e1d2:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000e1d6:	0f 95 c0             	setne  al
c000e1d9:	83 c4 24             	add    esp,0x24
c000e1dc:	c3                   	ret    
c000e1dd:	90                   	nop

c000e1de <CPU::cpuidCheckECX(unsigned int)>:
c000e1de:	83 ec 10             	sub    esp,0x10
c000e1e1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e1e5:	50                   	push   eax
c000e1e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e1ea:	50                   	push   eax
c000e1eb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e1ef:	50                   	push   eax
c000e1f0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e1f4:	50                   	push   eax
c000e1f5:	6a 01                	push   0x1
c000e1f7:	e8 30 ff ff ff       	call   c000e12c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e1fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e200:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000e204:	0f 95 c0             	setne  al
c000e207:	83 c4 24             	add    esp,0x24
c000e20a:	c3                   	ret    
c000e20b:	90                   	nop

c000e20c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000e20c:	83 ec 10             	sub    esp,0x10
c000e20f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e213:	50                   	push   eax
c000e214:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e218:	50                   	push   eax
c000e219:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e21d:	50                   	push   eax
c000e21e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e222:	50                   	push   eax
c000e223:	6a 07                	push   0x7
c000e225:	e8 02 ff ff ff       	call   c000e12c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e22a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e22e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000e232:	0f 95 c0             	setne  al
c000e235:	83 c4 24             	add    esp,0x24
c000e238:	c3                   	ret    
c000e239:	90                   	nop

c000e23a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000e23a:	83 ec 10             	sub    esp,0x10
c000e23d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e241:	50                   	push   eax
c000e242:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e246:	50                   	push   eax
c000e247:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e24b:	50                   	push   eax
c000e24c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e250:	50                   	push   eax
c000e251:	6a 07                	push   0x7
c000e253:	e8 d4 fe ff ff       	call   c000e12c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e258:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e25c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000e260:	0f 95 c0             	setne  al
c000e263:	83 c4 24             	add    esp,0x24
c000e266:	c3                   	ret    
c000e267:	90                   	nop

c000e268 <CPU::CPU()>:
c000e268:	83 ec 0c             	sub    esp,0xc
c000e26b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e26f:	83 ec 08             	sub    esp,0x8
c000e272:	68 99 e9 01 c0       	push   0xc001e999
c000e277:	50                   	push   eax
c000e278:	e8 11 ca ff ff       	call   c000ac8e <Device::Device(char const*)>
c000e27d:	83 c4 10             	add    esp,0x10
c000e280:	ba 20 ea 01 c0       	mov    edx,0xc001ea20
c000e285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e289:	89 10                	mov    DWORD PTR [eax],edx
c000e28b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e28f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000e299:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e29d:	05 78 01 00 00       	add    eax,0x178
c000e2a2:	83 ec 0c             	sub    esp,0xc
c000e2a5:	50                   	push   eax
c000e2a6:	e8 1f 7f ff ff       	call   c00061ca <GDT::GDT()>
c000e2ab:	83 c4 10             	add    esp,0x10
c000e2ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2b2:	05 7c 09 00 00       	add    eax,0x97c
c000e2b7:	83 ec 0c             	sub    esp,0xc
c000e2ba:	50                   	push   eax
c000e2bb:	e8 84 81 ff ff       	call   c0006444 <IDT::IDT()>
c000e2c0:	83 c4 10             	add    esp,0x10
c000e2c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2c7:	05 7c 11 00 00       	add    eax,0x117c
c000e2cc:	83 ec 0c             	sub    esp,0xc
c000e2cf:	50                   	push   eax
c000e2d0:	e8 df 9a ff ff       	call   c0007db4 <TSS::TSS()>
c000e2d5:	83 c4 10             	add    esp,0x10
c000e2d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2dc:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000e2e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2e7:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000e2f1:	90                   	nop
c000e2f2:	83 c4 0c             	add    esp,0xc
c000e2f5:	c3                   	ret    

c000e2f6 <CPU::displayFeatures()>:
c000e2f6:	c3                   	ret    
c000e2f7:	90                   	nop

c000e2f8 <CPU::detectFeatures()>:
c000e2f8:	55                   	push   ebp
c000e2f9:	57                   	push   edi
c000e2fa:	56                   	push   esi
c000e2fb:	53                   	push   ebx
c000e2fc:	83 ec 30             	sub    esp,0x30
c000e2ff:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e303:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000e30d:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000e314:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000e31a:	6a 0d                	push   0xd
c000e31c:	6a 00                	push   0x0
c000e31e:	55                   	push   ebp
c000e31f:	e8 84 21 ff ff       	call   c00004a8 <memset>
c000e324:	83 c4 10             	add    esp,0x10
c000e327:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c000e32c:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c000e333:	0f 84 e8 05 00 00    	je     c000e921 <CPU::detectFeatures()+0x629>
c000e339:	83 ec 0c             	sub    esp,0xc
c000e33c:	89 ef                	mov    edi,ebp
c000e33e:	6a 10                	push   0x10
c000e340:	e8 6b fe ff ff       	call   c000e1b0 <CPU::cpuidCheckEDX(unsigned int)>
c000e345:	83 e0 01             	and    eax,0x1
c000e348:	8d 14 00             	lea    edx,[eax+eax*1]
c000e34b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e351:	83 e0 fd             	and    eax,0xfffffffd
c000e354:	09 d0                	or     eax,edx
c000e356:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e35c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000e363:	e8 48 fe ff ff       	call   c000e1b0 <CPU::cpuidCheckEDX(unsigned int)>
c000e368:	83 e0 01             	and    eax,0x1
c000e36b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e372:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e378:	83 e0 fb             	and    eax,0xfffffffb
c000e37b:	09 d0                	or     eax,edx
c000e37d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e383:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000e38a:	e8 21 fe ff ff       	call   c000e1b0 <CPU::cpuidCheckEDX(unsigned int)>
c000e38f:	83 e0 01             	and    eax,0x1
c000e392:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e399:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e39f:	83 e0 f7             	and    eax,0xfffffff7
c000e3a2:	09 d0                	or     eax,edx
c000e3a4:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e3aa:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000e3b1:	e8 fa fd ff ff       	call   c000e1b0 <CPU::cpuidCheckEDX(unsigned int)>
c000e3b6:	83 e0 01             	and    eax,0x1
c000e3b9:	c1 e0 04             	shl    eax,0x4
c000e3bc:	88 c2                	mov    dl,al
c000e3be:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e3c4:	83 e0 ef             	and    eax,0xffffffef
c000e3c7:	09 d0                	or     eax,edx
c000e3c9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e3cf:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000e3d6:	e8 d5 fd ff ff       	call   c000e1b0 <CPU::cpuidCheckEDX(unsigned int)>
c000e3db:	83 e0 01             	and    eax,0x1
c000e3de:	c1 e0 05             	shl    eax,0x5
c000e3e1:	88 c2                	mov    dl,al
c000e3e3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e3e9:	83 e0 df             	and    eax,0xffffffdf
c000e3ec:	09 d0                	or     eax,edx
c000e3ee:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e3f4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000e3fb:	e8 b0 fd ff ff       	call   c000e1b0 <CPU::cpuidCheckEDX(unsigned int)>
c000e400:	83 e0 01             	and    eax,0x1
c000e403:	8d 14 00             	lea    edx,[eax+eax*1]
c000e406:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000e40c:	83 e0 fd             	and    eax,0xfffffffd
c000e40f:	09 d0                	or     eax,edx
c000e411:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000e417:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000e41e:	e8 8d fd ff ff       	call   c000e1b0 <CPU::cpuidCheckEDX(unsigned int)>
c000e423:	83 e0 01             	and    eax,0x1
c000e426:	c1 e0 06             	shl    eax,0x6
c000e429:	88 c2                	mov    dl,al
c000e42b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000e431:	83 e0 bf             	and    eax,0xffffffbf
c000e434:	09 d0                	or     eax,edx
c000e436:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000e43c:	58                   	pop    eax
c000e43d:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e441:	50                   	push   eax
c000e442:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e446:	50                   	push   eax
c000e447:	8d 74 24 28          	lea    esi,[esp+0x28]
c000e44b:	56                   	push   esi
c000e44c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e450:	50                   	push   eax
c000e451:	6a 00                	push   0x0
c000e453:	e8 d4 fc ff ff       	call   c000e12c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e458:	b8 04 00 00 00       	mov    eax,0x4
c000e45d:	89 c1                	mov    ecx,eax
c000e45f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e461:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000e467:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000e46b:	89 c1                	mov    ecx,eax
c000e46d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e46f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000e475:	8d 74 24 38          	lea    esi,[esp+0x38]
c000e479:	89 c1                	mov    ecx,eax
c000e47b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e47d:	83 c4 18             	add    esp,0x18
c000e480:	68 a8 e8 01 c0       	push   0xc001e8a8
c000e485:	55                   	push   ebp
c000e486:	e8 65 21 ff ff       	call   c00005f0 <strcmp>
c000e48b:	83 c4 10             	add    esp,0x10
c000e48e:	85 c0                	test   eax,eax
c000e490:	75 0f                	jne    c000e4a1 <CPU::detectFeatures()+0x1a9>
c000e492:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000e49c:	e9 22 02 00 00       	jmp    c000e6c3 <CPU::detectFeatures()+0x3cb>
c000e4a1:	50                   	push   eax
c000e4a2:	50                   	push   eax
c000e4a3:	68 b5 e8 01 c0       	push   0xc001e8b5
c000e4a8:	55                   	push   ebp
c000e4a9:	e8 42 21 ff ff       	call   c00005f0 <strcmp>
c000e4ae:	83 c4 10             	add    esp,0x10
c000e4b1:	85 c0                	test   eax,eax
c000e4b3:	74 dd                	je     c000e492 <CPU::detectFeatures()+0x19a>
c000e4b5:	50                   	push   eax
c000e4b6:	50                   	push   eax
c000e4b7:	68 c2 e8 01 c0       	push   0xc001e8c2
c000e4bc:	55                   	push   ebp
c000e4bd:	e8 2e 21 ff ff       	call   c00005f0 <strcmp>
c000e4c2:	83 c4 10             	add    esp,0x10
c000e4c5:	85 c0                	test   eax,eax
c000e4c7:	74 2a                	je     c000e4f3 <CPU::detectFeatures()+0x1fb>
c000e4c9:	50                   	push   eax
c000e4ca:	50                   	push   eax
c000e4cb:	68 cf e8 01 c0       	push   0xc001e8cf
c000e4d0:	55                   	push   ebp
c000e4d1:	e8 1a 21 ff ff       	call   c00005f0 <strcmp>
c000e4d6:	83 c4 10             	add    esp,0x10
c000e4d9:	85 c0                	test   eax,eax
c000e4db:	74 16                	je     c000e4f3 <CPU::detectFeatures()+0x1fb>
c000e4dd:	50                   	push   eax
c000e4de:	50                   	push   eax
c000e4df:	68 dc e8 01 c0       	push   0xc001e8dc
c000e4e4:	55                   	push   ebp
c000e4e5:	e8 06 21 ff ff       	call   c00005f0 <strcmp>
c000e4ea:	83 c4 10             	add    esp,0x10
c000e4ed:	85 c0                	test   eax,eax
c000e4ef:	74 48                	je     c000e539 <CPU::detectFeatures()+0x241>
c000e4f1:	eb 0f                	jmp    c000e502 <CPU::detectFeatures()+0x20a>
c000e4f3:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000e4fd:	e9 c1 01 00 00       	jmp    c000e6c3 <CPU::detectFeatures()+0x3cb>
c000e502:	50                   	push   eax
c000e503:	50                   	push   eax
c000e504:	68 e9 e8 01 c0       	push   0xc001e8e9
c000e509:	55                   	push   ebp
c000e50a:	e8 e1 20 ff ff       	call   c00005f0 <strcmp>
c000e50f:	83 c4 10             	add    esp,0x10
c000e512:	85 c0                	test   eax,eax
c000e514:	74 23                	je     c000e539 <CPU::detectFeatures()+0x241>
c000e516:	57                   	push   edi
c000e517:	57                   	push   edi
c000e518:	68 f6 e8 01 c0       	push   0xc001e8f6
c000e51d:	55                   	push   ebp
c000e51e:	e8 cd 20 ff ff       	call   c00005f0 <strcmp>
c000e523:	83 c4 10             	add    esp,0x10
c000e526:	85 c0                	test   eax,eax
c000e528:	75 1e                	jne    c000e548 <CPU::detectFeatures()+0x250>
c000e52a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000e534:	e9 8a 01 00 00       	jmp    c000e6c3 <CPU::detectFeatures()+0x3cb>
c000e539:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000e543:	e9 7b 01 00 00       	jmp    c000e6c3 <CPU::detectFeatures()+0x3cb>
c000e548:	56                   	push   esi
c000e549:	56                   	push   esi
c000e54a:	68 03 e9 01 c0       	push   0xc001e903
c000e54f:	55                   	push   ebp
c000e550:	e8 9b 20 ff ff       	call   c00005f0 <strcmp>
c000e555:	83 c4 10             	add    esp,0x10
c000e558:	85 c0                	test   eax,eax
c000e55a:	75 0f                	jne    c000e56b <CPU::detectFeatures()+0x273>
c000e55c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000e566:	e9 58 01 00 00       	jmp    c000e6c3 <CPU::detectFeatures()+0x3cb>
c000e56b:	51                   	push   ecx
c000e56c:	51                   	push   ecx
c000e56d:	68 c2 e8 01 c0       	push   0xc001e8c2
c000e572:	55                   	push   ebp
c000e573:	e8 78 20 ff ff       	call   c00005f0 <strcmp>
c000e578:	83 c4 10             	add    esp,0x10
c000e57b:	85 c0                	test   eax,eax
c000e57d:	75 0f                	jne    c000e58e <CPU::detectFeatures()+0x296>
c000e57f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000e589:	e9 35 01 00 00       	jmp    c000e6c3 <CPU::detectFeatures()+0x3cb>
c000e58e:	52                   	push   edx
c000e58f:	52                   	push   edx
c000e590:	68 10 e9 01 c0       	push   0xc001e910
c000e595:	55                   	push   ebp
c000e596:	e8 55 20 ff ff       	call   c00005f0 <strcmp>
c000e59b:	83 c4 10             	add    esp,0x10
c000e59e:	85 c0                	test   eax,eax
c000e5a0:	75 0f                	jne    c000e5b1 <CPU::detectFeatures()+0x2b9>
c000e5a2:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000e5ac:	e9 12 01 00 00       	jmp    c000e6c3 <CPU::detectFeatures()+0x3cb>
c000e5b1:	50                   	push   eax
c000e5b2:	50                   	push   eax
c000e5b3:	68 1d e9 01 c0       	push   0xc001e91d
c000e5b8:	55                   	push   ebp
c000e5b9:	e8 32 20 ff ff       	call   c00005f0 <strcmp>
c000e5be:	83 c4 10             	add    esp,0x10
c000e5c1:	85 c0                	test   eax,eax
c000e5c3:	75 0f                	jne    c000e5d4 <CPU::detectFeatures()+0x2dc>
c000e5c5:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000e5cf:	e9 ef 00 00 00       	jmp    c000e6c3 <CPU::detectFeatures()+0x3cb>
c000e5d4:	50                   	push   eax
c000e5d5:	50                   	push   eax
c000e5d6:	68 2a e9 01 c0       	push   0xc001e92a
c000e5db:	55                   	push   ebp
c000e5dc:	e8 0f 20 ff ff       	call   c00005f0 <strcmp>
c000e5e1:	83 c4 10             	add    esp,0x10
c000e5e4:	85 c0                	test   eax,eax
c000e5e6:	75 0f                	jne    c000e5f7 <CPU::detectFeatures()+0x2ff>
c000e5e8:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000e5f2:	e9 cc 00 00 00       	jmp    c000e6c3 <CPU::detectFeatures()+0x3cb>
c000e5f7:	50                   	push   eax
c000e5f8:	50                   	push   eax
c000e5f9:	68 37 e9 01 c0       	push   0xc001e937
c000e5fe:	55                   	push   ebp
c000e5ff:	e8 ec 1f ff ff       	call   c00005f0 <strcmp>
c000e604:	83 c4 10             	add    esp,0x10
c000e607:	85 c0                	test   eax,eax
c000e609:	75 0f                	jne    c000e61a <CPU::detectFeatures()+0x322>
c000e60b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000e615:	e9 a9 00 00 00       	jmp    c000e6c3 <CPU::detectFeatures()+0x3cb>
c000e61a:	50                   	push   eax
c000e61b:	50                   	push   eax
c000e61c:	68 44 e9 01 c0       	push   0xc001e944
c000e621:	55                   	push   ebp
c000e622:	e8 c9 1f ff ff       	call   c00005f0 <strcmp>
c000e627:	83 c4 10             	add    esp,0x10
c000e62a:	85 c0                	test   eax,eax
c000e62c:	75 0f                	jne    c000e63d <CPU::detectFeatures()+0x345>
c000e62e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000e638:	e9 86 00 00 00       	jmp    c000e6c3 <CPU::detectFeatures()+0x3cb>
c000e63d:	50                   	push   eax
c000e63e:	50                   	push   eax
c000e63f:	68 51 e9 01 c0       	push   0xc001e951
c000e644:	55                   	push   ebp
c000e645:	e8 a6 1f ff ff       	call   c00005f0 <strcmp>
c000e64a:	83 c4 10             	add    esp,0x10
c000e64d:	85 c0                	test   eax,eax
c000e64f:	75 0c                	jne    c000e65d <CPU::detectFeatures()+0x365>
c000e651:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000e65b:	eb 66                	jmp    c000e6c3 <CPU::detectFeatures()+0x3cb>
c000e65d:	50                   	push   eax
c000e65e:	50                   	push   eax
c000e65f:	68 5e e9 01 c0       	push   0xc001e95e
c000e664:	55                   	push   ebp
c000e665:	e8 86 1f ff ff       	call   c00005f0 <strcmp>
c000e66a:	83 c4 10             	add    esp,0x10
c000e66d:	85 c0                	test   eax,eax
c000e66f:	75 0c                	jne    c000e67d <CPU::detectFeatures()+0x385>
c000e671:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000e67b:	eb 46                	jmp    c000e6c3 <CPU::detectFeatures()+0x3cb>
c000e67d:	57                   	push   edi
c000e67e:	57                   	push   edi
c000e67f:	68 6b e9 01 c0       	push   0xc001e96b
c000e684:	55                   	push   ebp
c000e685:	e8 66 1f ff ff       	call   c00005f0 <strcmp>
c000e68a:	83 c4 10             	add    esp,0x10
c000e68d:	85 c0                	test   eax,eax
c000e68f:	74 e0                	je     c000e671 <CPU::detectFeatures()+0x379>
c000e691:	56                   	push   esi
c000e692:	56                   	push   esi
c000e693:	68 78 e9 01 c0       	push   0xc001e978
c000e698:	55                   	push   ebp
c000e699:	e8 52 1f ff ff       	call   c00005f0 <strcmp>
c000e69e:	83 c4 10             	add    esp,0x10
c000e6a1:	85 c0                	test   eax,eax
c000e6a3:	74 cc                	je     c000e671 <CPU::detectFeatures()+0x379>
c000e6a5:	51                   	push   ecx
c000e6a6:	51                   	push   ecx
c000e6a7:	68 85 e9 01 c0       	push   0xc001e985
c000e6ac:	55                   	push   ebp
c000e6ad:	e8 3e 1f ff ff       	call   c00005f0 <strcmp>
c000e6b2:	83 c4 10             	add    esp,0x10
c000e6b5:	85 c0                	test   eax,eax
c000e6b7:	74 b8                	je     c000e671 <CPU::detectFeatures()+0x379>
c000e6b9:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000e6c3:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000e6c8:	0f 86 be 00 00 00    	jbe    c000e78c <CPU::detectFeatures()+0x494>
c000e6ce:	83 ec 0c             	sub    esp,0xc
c000e6d1:	68 80 00 00 00       	push   0x80
c000e6d6:	e8 31 fb ff ff       	call   c000e20c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000e6db:	83 e0 01             	and    eax,0x1
c000e6de:	c1 e0 06             	shl    eax,0x6
c000e6e1:	88 c2                	mov    dl,al
c000e6e3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e6e9:	83 e0 bf             	and    eax,0xffffffbf
c000e6ec:	09 d0                	or     eax,edx
c000e6ee:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e6f4:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000e6fb:	e8 0c fb ff ff       	call   c000e20c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000e700:	83 e0 01             	and    eax,0x1
c000e703:	c1 e0 04             	shl    eax,0x4
c000e706:	88 c2                	mov    dl,al
c000e708:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000e70e:	83 e0 ef             	and    eax,0xffffffef
c000e711:	09 d0                	or     eax,edx
c000e713:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000e719:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000e720:	e8 e7 fa ff ff       	call   c000e20c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000e725:	c1 e0 07             	shl    eax,0x7
c000e728:	88 c2                	mov    dl,al
c000e72a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e730:	83 e0 7f             	and    eax,0x7f
c000e733:	09 d0                	or     eax,edx
c000e735:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e73b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000e742:	e8 f3 fa ff ff       	call   c000e23a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000e747:	83 e0 01             	and    eax,0x1
c000e74a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e751:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000e757:	83 e0 f7             	and    eax,0xfffffff7
c000e75a:	09 d0                	or     eax,edx
c000e75c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000e762:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000e769:	e8 cc fa ff ff       	call   c000e23a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000e76e:	83 c4 10             	add    esp,0x10
c000e771:	83 e0 01             	and    eax,0x1
c000e774:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e77b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000e781:	83 e0 fb             	and    eax,0xfffffffb
c000e784:	09 d0                	or     eax,edx
c000e786:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000e78c:	83 ec 0c             	sub    esp,0xc
c000e78f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e793:	50                   	push   eax
c000e794:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e798:	50                   	push   eax
c000e799:	8d 74 24 28          	lea    esi,[esp+0x28]
c000e79d:	56                   	push   esi
c000e79e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e7a2:	50                   	push   eax
c000e7a3:	6a 01                	push   0x1
c000e7a5:	e8 82 f9 ff ff       	call   c000e12c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e7aa:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e7ae:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000e7b4:	88 ca                	mov    dl,cl
c000e7b6:	83 e0 f0             	and    eax,0xfffffff0
c000e7b9:	83 e2 0f             	and    edx,0xf
c000e7bc:	09 d0                	or     eax,edx
c000e7be:	88 ca                	mov    dl,cl
c000e7c0:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000e7c6:	c0 ea 04             	shr    dl,0x4
c000e7c9:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000e7cd:	0f b6 c2             	movzx  eax,dl
c000e7d0:	83 c4 20             	add    esp,0x20
c000e7d3:	c1 e0 06             	shl    eax,0x6
c000e7d6:	89 c7                	mov    edi,eax
c000e7d8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e7de:	66 25 3f c0          	and    ax,0xc03f
c000e7e2:	09 f8                	or     eax,edi
c000e7e4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000e7eb:	89 c8                	mov    eax,ecx
c000e7ed:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000e7f4:	c1 e8 08             	shr    eax,0x8
c000e7f7:	83 e5 3f             	and    ebp,0x3f
c000e7fa:	83 e0 0f             	and    eax,0xf
c000e7fd:	89 c7                	mov    edi,eax
c000e7ff:	c1 e7 06             	shl    edi,0x6
c000e802:	09 ef                	or     edi,ebp
c000e804:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000e80b:	89 fa                	mov    edx,edi
c000e80d:	83 e5 c0             	and    ebp,0xffffffc0
c000e810:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000e816:	88 c2                	mov    dl,al
c000e818:	c0 ea 02             	shr    dl,0x2
c000e81b:	89 d7                	mov    edi,edx
c000e81d:	09 ef                	or     edi,ebp
c000e81f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000e825:	89 fa                	mov    edx,edi
c000e827:	83 e5 cf             	and    ebp,0xffffffcf
c000e82a:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000e830:	89 cf                	mov    edi,ecx
c000e832:	c1 ef 0c             	shr    edi,0xc
c000e835:	83 e7 03             	and    edi,0x3
c000e838:	c1 e7 04             	shl    edi,0x4
c000e83b:	09 ef                	or     edi,ebp
c000e83d:	3c 06                	cmp    al,0x6
c000e83f:	89 fa                	mov    edx,edi
c000e841:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000e847:	74 04                	je     c000e84d <CPU::detectFeatures()+0x555>
c000e849:	3c 0f                	cmp    al,0xf
c000e84b:	75 5c                	jne    c000e8a9 <CPU::detectFeatures()+0x5b1>
c000e84d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e851:	89 cf                	mov    edi,ecx
c000e853:	c1 ef 10             	shr    edi,0x10
c000e856:	c1 e7 04             	shl    edi,0x4
c000e859:	09 fa                	or     edx,edi
c000e85b:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000e861:	0f b6 d2             	movzx  edx,dl
c000e864:	66 81 e7 3f c0       	and    di,0xc03f
c000e869:	c1 e2 06             	shl    edx,0x6
c000e86c:	09 fa                	or     edx,edi
c000e86e:	3c 0f                	cmp    al,0xf
c000e870:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000e877:	75 30                	jne    c000e8a9 <CPU::detectFeatures()+0x5b1>
c000e879:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000e87f:	c1 e9 14             	shr    ecx,0x14
c000e882:	83 e0 3f             	and    eax,0x3f
c000e885:	83 c1 0f             	add    ecx,0xf
c000e888:	88 ca                	mov    dl,cl
c000e88a:	c0 e9 02             	shr    cl,0x2
c000e88d:	c1 e2 06             	shl    edx,0x6
c000e890:	09 d0                	or     eax,edx
c000e892:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000e898:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000e89e:	83 e0 c0             	and    eax,0xffffffc0
c000e8a1:	09 c1                	or     ecx,eax
c000e8a3:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000e8a9:	83 ec 0c             	sub    esp,0xc
c000e8ac:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000e8b3:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e8b7:	50                   	push   eax
c000e8b8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000e8bc:	55                   	push   ebp
c000e8bd:	56                   	push   esi
c000e8be:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000e8c2:	57                   	push   edi
c000e8c3:	68 00 00 00 80       	push   0x80000000
c000e8c8:	e8 5f f8 ff ff       	call   c000e12c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e8cd:	83 c4 20             	add    esp,0x20
c000e8d0:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000e8d8:	76 22                	jbe    c000e8fc <CPU::detectFeatures()+0x604>
c000e8da:	83 ec 0c             	sub    esp,0xc
c000e8dd:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e8e1:	50                   	push   eax
c000e8e2:	55                   	push   ebp
c000e8e3:	56                   	push   esi
c000e8e4:	57                   	push   edi
c000e8e5:	68 01 00 00 80       	push   0x80000001
c000e8ea:	e8 3d f8 ff ff       	call   c000e12c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e8ef:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000e8f9:	83 c4 20             	add    esp,0x20
c000e8fc:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c000e902:	8d 50 ff             	lea    edx,[eax-0x1]
c000e905:	83 fa 03             	cmp    edx,0x3
c000e908:	76 7e                	jbe    c000e988 <CPU::detectFeatures()+0x690>
c000e90a:	83 f8 06             	cmp    eax,0x6
c000e90d:	74 79                	je     c000e988 <CPU::detectFeatures()+0x690>
c000e90f:	52                   	push   edx
c000e910:	52                   	push   edx
c000e911:	68 91 e9 01 c0       	push   0xc001e991
c000e916:	53                   	push   ebx
c000e917:	e8 64 c3 ff ff       	call   c000ac80 <Device::setName(char const*)>
c000e91c:	83 c4 10             	add    esp,0x10
c000e91f:	eb 67                	jmp    c000e988 <CPU::detectFeatures()+0x690>
c000e921:	50                   	push   eax
c000e922:	50                   	push   eax
c000e923:	68 f6 e8 01 c0       	push   0xc001e8f6
c000e928:	55                   	push   ebp
c000e929:	e8 36 1c ff ff       	call   c0000564 <strcpy>
c000e92e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000e938:	e8 a6 18 ff ff       	call   c00001e3 <is486>
c000e93d:	83 c4 10             	add    esp,0x10
c000e940:	85 c0                	test   eax,eax
c000e942:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000e948:	74 1d                	je     c000e967 <CPU::detectFeatures()+0x66f>
c000e94a:	83 c8 07             	or     eax,0x7
c000e94d:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000e953:	0f 20 c0             	mov    eax,cr0
c000e956:	83 e0 14             	and    eax,0x14
c000e959:	83 f8 04             	cmp    eax,0x4
c000e95c:	75 0e                	jne    c000e96c <CPU::detectFeatures()+0x674>
c000e95e:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000e965:	eb 21                	jmp    c000e988 <CPU::detectFeatures()+0x690>
c000e967:	83 e0 f8             	and    eax,0xfffffff8
c000e96a:	eb e1                	jmp    c000e94d <CPU::detectFeatures()+0x655>
c000e96c:	e8 4d 18 ff ff       	call   c00001be <hasLegacyFPU>
c000e971:	83 e0 01             	and    eax,0x1
c000e974:	8d 14 00             	lea    edx,[eax+eax*1]
c000e977:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000e97d:	83 e0 fd             	and    eax,0xfffffffd
c000e980:	09 d0                	or     eax,edx
c000e982:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000e988:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000e98f:	74 0e                	je     c000e99f <CPU::detectFeatures()+0x6a7>
c000e991:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c000e996:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c000e99d:	eb 20                	jmp    c000e9bf <CPU::detectFeatures()+0x6c7>
c000e99f:	e8 1a 18 ff ff       	call   c00001be <hasLegacyFPU>
c000e9a4:	83 e0 01             	and    eax,0x1
c000e9a7:	8d 14 00             	lea    edx,[eax+eax*1]
c000e9aa:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000e9b0:	83 e0 fd             	and    eax,0xfffffffd
c000e9b3:	09 d0                	or     eax,edx
c000e9b5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000e9bb:	a8 02                	test   al,0x2
c000e9bd:	75 d2                	jne    c000e991 <CPU::detectFeatures()+0x699>
c000e9bf:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000e9c6:	83 c4 2c             	add    esp,0x2c
c000e9c9:	5b                   	pop    ebx
c000e9ca:	5e                   	pop    esi
c000e9cb:	5f                   	pop    edi
c000e9cc:	5d                   	pop    ebp
c000e9cd:	c3                   	ret    

c000e9ce <CPU::setupSMEP()>:
c000e9ce:	0f 20 e0             	mov    eax,cr4
c000e9d1:	0d 00 00 10 00       	or     eax,0x100000
c000e9d6:	0f 22 e0             	mov    cr4,eax
c000e9d9:	c3                   	ret    

c000e9da <CPU::setupUMIP()>:
c000e9da:	0f 20 e0             	mov    eax,cr4
c000e9dd:	80 cc 08             	or     ah,0x8
c000e9e0:	0f 22 e0             	mov    cr4,eax
c000e9e3:	c3                   	ret    

c000e9e4 <CPU::setupTSC()>:
c000e9e4:	0f 20 e0             	mov    eax,cr4
c000e9e7:	83 c8 04             	or     eax,0x4
c000e9ea:	0f 22 e0             	mov    cr4,eax
c000e9ed:	c3                   	ret    

c000e9ee <CPU::setupLargePages()>:
c000e9ee:	0f 20 e0             	mov    eax,cr4
c000e9f1:	83 c8 10             	or     eax,0x10
c000e9f4:	0f 22 e0             	mov    cr4,eax
c000e9f7:	c3                   	ret    

c000e9f8 <CPU::setupPAT()>:
c000e9f8:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c000e9fd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ea04:	74 2c                	je     c000ea32 <CPU::setupPAT()+0x3a>
c000ea06:	53                   	push   ebx
c000ea07:	83 ec 10             	sub    esp,0x10
c000ea0a:	68 77 02 00 00       	push   0x277
c000ea0f:	50                   	push   eax
c000ea10:	e8 05 75 ff ff       	call   c0005f1a <Computer::rdmsr(unsigned int)>
c000ea15:	83 e2 f8             	and    edx,0xfffffff8
c000ea18:	83 ca 01             	or     edx,0x1
c000ea1b:	52                   	push   edx
c000ea1c:	50                   	push   eax
c000ea1d:	68 77 02 00 00       	push   0x277
c000ea22:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c000ea28:	e8 19 75 ff ff       	call   c0005f46 <Computer::wrmsr(unsigned int, unsigned long long)>
c000ea2d:	83 c4 28             	add    esp,0x28
c000ea30:	5b                   	pop    ebx
c000ea31:	c3                   	ret    
c000ea32:	c3                   	ret    
c000ea33:	90                   	nop

c000ea34 <CPU::setupMTRR()>:
c000ea34:	c3                   	ret    
c000ea35:	90                   	nop

c000ea36 <CPU::setupGlobalPages()>:
c000ea36:	0f 20 e0             	mov    eax,cr4
c000ea39:	0c 80                	or     al,0x80
c000ea3b:	0f 22 e0             	mov    cr4,eax
c000ea3e:	c3                   	ret    
c000ea3f:	90                   	nop

c000ea40 <CPU::allowUsermodeDataAccess()>:
c000ea40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ea44:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ea4b:	74 03                	je     c000ea50 <CPU::allowUsermodeDataAccess()+0x10>
c000ea4d:	0f 01 cb             	stac   
c000ea50:	c3                   	ret    
c000ea51:	90                   	nop

c000ea52 <CPU::prohibitUsermodeDataAccess()>:
c000ea52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ea56:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ea5d:	74 03                	je     c000ea62 <CPU::prohibitUsermodeDataAccess()+0x10>
c000ea5f:	0f 01 ca             	clac   
c000ea62:	c3                   	ret    
c000ea63:	90                   	nop

c000ea64 <CPU::setupSMAP()>:
c000ea64:	0f 20 e0             	mov    eax,cr4
c000ea67:	0d 00 00 20 00       	or     eax,0x200000
c000ea6c:	0f 22 e0             	mov    cr4,eax
c000ea6f:	eb e1                	jmp    c000ea52 <CPU::prohibitUsermodeDataAccess()>
c000ea71:	90                   	nop

c000ea72 <CPU::setupFeatures()>:
c000ea72:	53                   	push   ebx
c000ea73:	83 ec 08             	sub    esp,0x8
c000ea76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ea7a:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000ea81:	74 18                	je     c000ea9b <CPU::setupFeatures()+0x29>
c000ea83:	83 ec 0c             	sub    esp,0xc
c000ea86:	68 9d e9 01 c0       	push   0xc001e99d
c000ea8b:	e8 43 ac ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c000ea90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ea93:	e8 42 ff ff ff       	call   c000e9da <CPU::setupUMIP()>
c000ea98:	83 c4 10             	add    esp,0x10
c000ea9b:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000eaa2:	74 18                	je     c000eabc <CPU::setupFeatures()+0x4a>
c000eaa4:	83 ec 0c             	sub    esp,0xc
c000eaa7:	68 a7 e9 01 c0       	push   0xc001e9a7
c000eaac:	e8 22 ac ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c000eab1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eab4:	e8 2b ff ff ff       	call   c000e9e4 <CPU::setupTSC()>
c000eab9:	83 c4 10             	add    esp,0x10
c000eabc:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000eac3:	74 18                	je     c000eadd <CPU::setupFeatures()+0x6b>
c000eac5:	83 ec 0c             	sub    esp,0xc
c000eac8:	68 b0 e9 01 c0       	push   0xc001e9b0
c000eacd:	e8 01 ac ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c000ead2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ead5:	e8 14 ff ff ff       	call   c000e9ee <CPU::setupLargePages()>
c000eada:	83 c4 10             	add    esp,0x10
c000eadd:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000eae4:	74 18                	je     c000eafe <CPU::setupFeatures()+0x8c>
c000eae6:	83 ec 0c             	sub    esp,0xc
c000eae9:	68 b9 e9 01 c0       	push   0xc001e9b9
c000eaee:	e8 e0 ab ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c000eaf3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eaf6:	e8 3b ff ff ff       	call   c000ea36 <CPU::setupGlobalPages()>
c000eafb:	83 c4 10             	add    esp,0x10
c000eafe:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000eb05:	74 18                	je     c000eb1f <CPU::setupFeatures()+0xad>
c000eb07:	83 ec 0c             	sub    esp,0xc
c000eb0a:	68 cb e9 01 c0       	push   0xc001e9cb
c000eb0f:	e8 bf ab ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c000eb14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb17:	e8 dc fe ff ff       	call   c000e9f8 <CPU::setupPAT()>
c000eb1c:	83 c4 10             	add    esp,0x10
c000eb1f:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000eb26:	74 11                	je     c000eb39 <CPU::setupFeatures()+0xc7>
c000eb28:	c7 44 24 10 d4 e9 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e9d4
c000eb30:	83 c4 08             	add    esp,0x8
c000eb33:	5b                   	pop    ebx
c000eb34:	e9 9a ab ff ff       	jmp    c00096d3 <Dbg::kprintf(char const*, ...)>
c000eb39:	83 c4 08             	add    esp,0x8
c000eb3c:	5b                   	pop    ebx
c000eb3d:	c3                   	ret    

c000eb3e <CPU::open(int, int, void*)>:
c000eb3e:	57                   	push   edi
c000eb3f:	56                   	push   esi
c000eb40:	53                   	push   ebx
c000eb41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eb45:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eb49:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000eb4f:	83 ec 0c             	sub    esp,0xc
c000eb52:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000eb58:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000eb5e:	50                   	push   eax
c000eb5f:	e8 c8 76 ff ff       	call   c000622c <GDT::setup()>
c000eb64:	83 c4 0c             	add    esp,0xc
c000eb67:	6a 00                	push   0x0
c000eb69:	68 ef be ad de       	push   0xdeadbeef
c000eb6e:	57                   	push   edi
c000eb6f:	e8 84 92 ff ff       	call   c0007df8 <TSS::setup(unsigned long, unsigned long)>
c000eb74:	89 3c 24             	mov    DWORD PTR [esp],edi
c000eb77:	e8 5c 92 ff ff       	call   c0007dd8 <TSS::flush()>
c000eb7c:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000eb82:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb85:	e8 30 79 ff ff       	call   c00064ba <IDT::setup()>
c000eb8a:	b8 00 04 00 00       	mov    eax,0x400
c000eb8f:	0f 23 f8             	mov    db7,eax
c000eb92:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000eb9c:	e8 6f 81 ff ff       	call   c0006d10 <Phys::allocatePage()>
c000eba1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000eba7:	89 30                	mov    DWORD PTR [eax],esi
c000eba9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000ebaf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000ebb2:	58                   	pop    eax
c000ebb3:	5a                   	pop    edx
c000ebb4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000ebba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ebbe:	e8 dd a1 ff ff       	call   c0008da0 <VAS::setCPUSpecific(unsigned long)>
c000ebc3:	c7 04 24 de e9 01 c0 	mov    DWORD PTR [esp],0xc001e9de
c000ebca:	e8 d4 7d ff ff       	call   c00069a3 <Krnl::setBootMessage(char const*)>
c000ebcf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ebd2:	e8 21 f7 ff ff       	call   c000e2f8 <CPU::detectFeatures()>
c000ebd7:	c7 04 24 01 ea 01 c0 	mov    DWORD PTR [esp],0xc001ea01
c000ebde:	e8 c0 7d ff ff       	call   c00069a3 <Krnl::setBootMessage(char const*)>
c000ebe3:	e8 82 69 00 00       	call   c001556a <Hal::initialise()>
c000ebe8:	a1 80 03 02 c0       	mov    eax,ds:0xc0020380
c000ebed:	83 e0 10             	and    eax,0x10
c000ebf0:	83 f8 01             	cmp    eax,0x1
c000ebf3:	19 c0                	sbb    eax,eax
c000ebf5:	83 e0 46             	and    eax,0x46
c000ebf8:	83 c0 1e             	add    eax,0x1e
c000ebfb:	89 04 24             	mov    DWORD PTR [esp],eax
c000ebfe:	e8 26 d7 ff ff       	call   c000c329 <setupTimer(int)>
c000ec03:	83 c4 10             	add    esp,0x10
c000ec06:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000ec0c:	f6 05 80 03 02 c0 20 	test   BYTE PTR ds:0xc0020380,0x20
c000ec13:	74 0c                	je     c000ec21 <CPU::open(int, int, void*)+0xe3>
c000ec15:	83 ec 0c             	sub    esp,0xc
c000ec18:	53                   	push   ebx
c000ec19:	e8 54 fe ff ff       	call   c000ea72 <CPU::setupFeatures()>
c000ec1e:	83 c4 10             	add    esp,0x10
c000ec21:	5b                   	pop    ebx
c000ec22:	31 c0                	xor    eax,eax
c000ec24:	5e                   	pop    esi
c000ec25:	5f                   	pop    edi
c000ec26:	c3                   	ret    
c000ec27:	90                   	nop

c000ec28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c000ec28:	57                   	push   edi
c000ec29:	56                   	push   esi
c000ec2a:	53                   	push   ebx
c000ec2b:	51                   	push   ecx
c000ec2c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ec30:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c000ec33:	0f 02 c0             	lar    eax,ax
c000ec36:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c000ec39:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ec3d:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c000ec40:	88 ca                	mov    dl,cl
c000ec42:	c0 ea 06             	shr    dl,0x6
c000ec45:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c000ec49:	89 ca                	mov    edx,ecx
c000ec4b:	66 c1 ea 03          	shr    dx,0x3
c000ec4f:	83 e2 07             	and    edx,0x7
c000ec52:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c000ec57:	88 17                	mov    BYTE PTR [edi],dl
c000ec59:	0f 84 a6 01 00 00    	je     c000ee05 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c000ec5f:	83 e1 07             	and    ecx,0x7
c000ec62:	80 f9 04             	cmp    cl,0x4
c000ec65:	0f 84 98 00 00 00    	je     c000ed03 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c000ec6b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c000ec70:	0f 95 c0             	setne  al
c000ec73:	80 f9 05             	cmp    cl,0x5
c000ec76:	0f 95 c2             	setne  dl
c000ec79:	08 c2                	or     dl,al
c000ec7b:	74 79                	je     c000ecf6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c000ec7d:	84 c9                	test   cl,cl
c000ec7f:	75 05                	jne    c000ec86 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c000ec81:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c000ec84:	eb 3c                	jmp    c000ecc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c000ec86:	80 f9 01             	cmp    cl,0x1
c000ec89:	75 05                	jne    c000ec90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c000ec8b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c000ec8e:	eb 32                	jmp    c000ecc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c000ec90:	80 f9 02             	cmp    cl,0x2
c000ec93:	75 05                	jne    c000ec9a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c000ec95:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000ec98:	eb 28                	jmp    c000ecc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c000ec9a:	31 c0                	xor    eax,eax
c000ec9c:	80 f9 03             	cmp    cl,0x3
c000ec9f:	75 05                	jne    c000eca6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c000eca1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000eca4:	eb 1c                	jmp    c000ecc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c000eca6:	80 f9 05             	cmp    cl,0x5
c000eca9:	75 05                	jne    c000ecb0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c000ecab:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ecae:	eb 12                	jmp    c000ecc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c000ecb0:	80 f9 06             	cmp    cl,0x6
c000ecb3:	75 05                	jne    c000ecba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c000ecb5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000ecb8:	eb 08                	jmp    c000ecc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c000ecba:	80 f9 07             	cmp    cl,0x7
c000ecbd:	75 03                	jne    c000ecc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c000ecbf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000ecc2:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c000ecc7:	75 10                	jne    c000ecd9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c000ecc9:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c000eccd:	b9 03 00 00 00       	mov    ecx,0x3
c000ecd2:	01 d0                	add    eax,edx
c000ecd4:	e9 37 01 00 00       	jmp    c000ee10 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c000ecd9:	b9 02 00 00 00       	mov    ecx,0x2
c000ecde:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c000ece3:	0f 85 27 01 00 00    	jne    c000ee10 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c000ece9:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c000ecec:	b9 06 00 00 00       	mov    ecx,0x6
c000ecf1:	e9 1a 01 00 00       	jmp    c000ee10 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c000ecf6:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c000ecf9:	b9 06 00 00 00       	mov    ecx,0x6
c000ecfe:	e9 0f 01 00 00       	jmp    c000ee12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c000ed03:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c000ed06:	88 ca                	mov    dl,cl
c000ed08:	c0 ea 06             	shr    dl,0x6
c000ed0b:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c000ed0f:	89 ca                	mov    edx,ecx
c000ed11:	66 c1 ea 03          	shr    dx,0x3
c000ed15:	83 e2 07             	and    edx,0x7
c000ed18:	80 e1 07             	and    cl,0x7
c000ed1b:	75 05                	jne    c000ed22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c000ed1d:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c000ed20:	eb 4c                	jmp    c000ed6e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c000ed22:	80 f9 01             	cmp    cl,0x1
c000ed25:	75 05                	jne    c000ed2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c000ed27:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c000ed2a:	eb 42                	jmp    c000ed6e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c000ed2c:	80 f9 02             	cmp    cl,0x2
c000ed2f:	75 05                	jne    c000ed36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c000ed31:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c000ed34:	eb 38                	jmp    c000ed6e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c000ed36:	80 f9 03             	cmp    cl,0x3
c000ed39:	75 05                	jne    c000ed40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c000ed3b:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c000ed3e:	eb 2e                	jmp    c000ed6e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c000ed40:	80 f9 04             	cmp    cl,0x4
c000ed43:	75 12                	jne    c000ed57 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c000ed45:	f6 c4 60             	test   ah,0x60
c000ed48:	75 08                	jne    c000ed52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c000ed4a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000ed4d:	8d 78 14             	lea    edi,[eax+0x14]
c000ed50:	eb 1c                	jmp    c000ed6e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c000ed52:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c000ed55:	eb 17                	jmp    c000ed6e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c000ed57:	80 f9 05             	cmp    cl,0x5
c000ed5a:	75 05                	jne    c000ed61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c000ed5c:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c000ed5f:	eb 0d                	jmp    c000ed6e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c000ed61:	80 f9 06             	cmp    cl,0x6
c000ed64:	75 05                	jne    c000ed6b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c000ed66:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000ed69:	eb 03                	jmp    c000ed6e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c000ed6b:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c000ed6e:	84 d2                	test   dl,dl
c000ed70:	75 05                	jne    c000ed77 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c000ed72:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c000ed75:	eb 3c                	jmp    c000edb3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c000ed77:	80 fa 01             	cmp    dl,0x1
c000ed7a:	75 05                	jne    c000ed81 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c000ed7c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c000ed7f:	eb 32                	jmp    c000edb3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c000ed81:	80 fa 02             	cmp    dl,0x2
c000ed84:	75 05                	jne    c000ed8b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c000ed86:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000ed89:	eb 28                	jmp    c000edb3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c000ed8b:	80 fa 03             	cmp    dl,0x3
c000ed8e:	75 05                	jne    c000ed95 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c000ed90:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000ed93:	eb 1e                	jmp    c000edb3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c000ed95:	31 c0                	xor    eax,eax
c000ed97:	80 fa 04             	cmp    dl,0x4
c000ed9a:	74 17                	je     c000edb3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c000ed9c:	80 fa 05             	cmp    dl,0x5
c000ed9f:	75 05                	jne    c000eda6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c000eda1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000eda4:	eb 0d                	jmp    c000edb3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c000eda6:	80 fa 06             	cmp    dl,0x6
c000eda9:	75 05                	jne    c000edb0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c000edab:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000edae:	eb 03                	jmp    c000edb3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c000edb0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000edb3:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c000edb8:	0f 94 c2             	sete   dl
c000edbb:	80 f9 05             	cmp    cl,0x5
c000edbe:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c000edc2:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c000edc7:	d3 e0                	shl    eax,cl
c000edc9:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c000edcd:	74 0a                	je     c000edd9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c000edcf:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c000edd2:	b9 07 00 00 00       	mov    ecx,0x7
c000edd7:	eb 37                	jmp    c000ee10 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c000edd9:	01 f8                	add    eax,edi
c000eddb:	b9 03 00 00 00       	mov    ecx,0x3
c000ede0:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c000ede5:	74 2b                	je     c000ee12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c000ede7:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c000edec:	75 0d                	jne    c000edfb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c000edee:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c000edf2:	01 c8                	add    eax,ecx
c000edf4:	b9 04 00 00 00       	mov    ecx,0x4
c000edf9:	eb 17                	jmp    c000ee12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c000edfb:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c000edfe:	b9 07 00 00 00       	mov    ecx,0x7
c000ee03:	eb 0d                	jmp    c000ee12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c000ee05:	b9 02 00 00 00       	mov    ecx,0x2
c000ee0a:	b2 01                	mov    dl,0x1
c000ee0c:	31 c0                	xor    eax,eax
c000ee0e:	eb 02                	jmp    c000ee12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c000ee10:	31 d2                	xor    edx,edx
c000ee12:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ee16:	89 0b                	mov    DWORD PTR [ebx],ecx
c000ee18:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ee1c:	88 11                	mov    BYTE PTR [ecx],dl
c000ee1e:	5a                   	pop    edx
c000ee1f:	5b                   	pop    ebx
c000ee20:	5e                   	pop    esi
c000ee21:	5f                   	pop    edi
c000ee22:	c3                   	ret    

c000ee23 <Krnl::smpEntry()>:
c000ee23:	eb fe                	jmp    c000ee23 <Krnl::smpEntry()>

c000ee25 <Krnl::startCPU(int)>:
c000ee25:	c3                   	ret    

c000ee26 <Krnl::startCPUs()>:
c000ee26:	c3                   	ret    
c000ee27:	90                   	nop

c000ee28 <EnvVarContainer::getEnv(char const*)>:
c000ee28:	57                   	push   edi
c000ee29:	56                   	push   esi
c000ee2a:	53                   	push   ebx
c000ee2b:	31 db                	xor    ebx,ebx
c000ee2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ee31:	39 1e                	cmp    DWORD PTR [esi],ebx
c000ee33:	7e 2b                	jle    c000ee60 <EnvVarContainer::getEnv(char const*)+0x38>
c000ee35:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000ee3c:	50                   	push   eax
c000ee3d:	50                   	push   eax
c000ee3e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ee41:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ee44:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee48:	e8 a3 17 ff ff       	call   c00005f0 <strcmp>
c000ee4d:	83 c4 10             	add    esp,0x10
c000ee50:	85 c0                	test   eax,eax
c000ee52:	75 09                	jne    c000ee5d <EnvVarContainer::getEnv(char const*)+0x35>
c000ee54:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ee57:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000ee5b:	eb 05                	jmp    c000ee62 <EnvVarContainer::getEnv(char const*)+0x3a>
c000ee5d:	43                   	inc    ebx
c000ee5e:	eb d1                	jmp    c000ee31 <EnvVarContainer::getEnv(char const*)+0x9>
c000ee60:	31 c0                	xor    eax,eax
c000ee62:	5b                   	pop    ebx
c000ee63:	5e                   	pop    esi
c000ee64:	5f                   	pop    edi
c000ee65:	c3                   	ret    

c000ee66 <EnvVarContainer::setEnv(char const*, char const*)>:
c000ee66:	55                   	push   ebp
c000ee67:	57                   	push   edi
c000ee68:	56                   	push   esi
c000ee69:	53                   	push   ebx
c000ee6a:	83 ec 28             	sub    esp,0x28
c000ee6d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ee71:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ee75:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ee79:	56                   	push   esi
c000ee7a:	e8 45 16 ff ff       	call   c00004c4 <strlen>
c000ee7f:	40                   	inc    eax
c000ee80:	89 04 24             	mov    DWORD PTR [esp],eax
c000ee83:	e8 c1 7a ff ff       	call   c0006949 <malloc>
c000ee88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee8b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ee8f:	e8 30 16 ff ff       	call   c00004c4 <strlen>
c000ee94:	40                   	inc    eax
c000ee95:	89 04 24             	mov    DWORD PTR [esp],eax
c000ee98:	e8 ac 7a ff ff       	call   c0006949 <malloc>
c000ee9d:	89 34 24             	mov    DWORD PTR [esp],esi
c000eea0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eea4:	e8 1b 16 ff ff       	call   c00004c4 <strlen>
c000eea9:	83 c4 0c             	add    esp,0xc
c000eeac:	40                   	inc    eax
c000eead:	50                   	push   eax
c000eeae:	6a 00                	push   0x0
c000eeb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eeb4:	e8 ef 15 ff ff       	call   c00004a8 <memset>
c000eeb9:	89 34 24             	mov    DWORD PTR [esp],esi
c000eebc:	e8 03 16 ff ff       	call   c00004c4 <strlen>
c000eec1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000eec5:	8d 48 01             	lea    ecx,[eax+0x1]
c000eec8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eeca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecd:	89 de                	mov    esi,ebx
c000eecf:	e8 f0 15 ff ff       	call   c00004c4 <strlen>
c000eed4:	83 c4 0c             	add    esp,0xc
c000eed7:	40                   	inc    eax
c000eed8:	50                   	push   eax
c000eed9:	6a 00                	push   0x0
c000eedb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eedf:	e8 c4 15 ff ff       	call   c00004a8 <memset>
c000eee4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eee7:	e8 d8 15 ff ff       	call   c00004c4 <strlen>
c000eeec:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eef0:	8d 48 01             	lea    ecx,[eax+0x1]
c000eef3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eef5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eef8:	40                   	inc    eax
c000eef9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000eefc:	c1 e0 03             	shl    eax,0x3
c000eeff:	5a                   	pop    edx
c000ef00:	59                   	pop    ecx
c000ef01:	50                   	push   eax
c000ef02:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ef05:	e8 2b 7a ff ff       	call   c0006935 <realloc>
c000ef0a:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ef0e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000ef11:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000ef14:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000ef18:	b9 08 00 00 00       	mov    ecx,0x8
c000ef1d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef1f:	83 c4 2c             	add    esp,0x2c
c000ef22:	5b                   	pop    ebx
c000ef23:	5e                   	pop    esi
c000ef24:	5f                   	pop    edi
c000ef25:	5d                   	pop    ebp
c000ef26:	c3                   	ret    
c000ef27:	90                   	nop

c000ef28 <EnvVarContainer::deleteEnv(char const*)>:
c000ef28:	c3                   	ret    
c000ef29:	90                   	nop

c000ef2a <EnvVarContainer::loadFrom(char const*, char const*)>:
c000ef2a:	55                   	push   ebp
c000ef2b:	57                   	push   edi
c000ef2c:	56                   	push   esi
c000ef2d:	53                   	push   ebx
c000ef2e:	81 ec 38 01 00 00    	sub    esp,0x138
c000ef34:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000ef3b:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000ef42:	68 14 01 00 00       	push   0x114
c000ef47:	e8 fd 79 ff ff       	call   c0006949 <malloc>
c000ef4c:	83 c4 0c             	add    esp,0xc
c000ef4f:	89 c3                	mov    ebx,eax
c000ef51:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ef54:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ef5b:	50                   	push   eax
c000ef5c:	e8 dd ac ff ff       	call   c0009c3e <File::File(char const*, Process*)>
c000ef61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef64:	e8 fd af ff ff       	call   c0009f66 <File::exists()>
c000ef69:	83 c4 10             	add    esp,0x10
c000ef6c:	84 c0                	test   al,al
c000ef6e:	75 31                	jne    c000efa1 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000ef70:	50                   	push   eax
c000ef71:	50                   	push   eax
c000ef72:	6a 12                	push   0x12
c000ef74:	53                   	push   ebx
c000ef75:	e8 7e ad ff ff       	call   c0009cf8 <File::open(FileOpenMode)>
c000ef7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ef7c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000ef7f:	89 34 24             	mov    DWORD PTR [esp],esi
c000ef82:	e8 3d 15 ff ff       	call   c00004c4 <strlen>
c000ef87:	5a                   	pop    edx
c000ef88:	31 d2                	xor    edx,edx
c000ef8a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000ef8e:	51                   	push   ecx
c000ef8f:	56                   	push   esi
c000ef90:	52                   	push   edx
c000ef91:	50                   	push   eax
c000ef92:	53                   	push   ebx
c000ef93:	ff d7                	call   edi
c000ef95:	83 c4 14             	add    esp,0x14
c000ef98:	53                   	push   ebx
c000ef99:	e8 b8 ad ff ff       	call   c0009d56 <File::close()>
c000ef9e:	83 c4 10             	add    esp,0x10
c000efa1:	56                   	push   esi
c000efa2:	31 f6                	xor    esi,esi
c000efa4:	68 00 01 00 00       	push   0x100
c000efa9:	6a 00                	push   0x0
c000efab:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000efaf:	50                   	push   eax
c000efb0:	e8 f3 14 ff ff       	call   c00004a8 <memset>
c000efb5:	5f                   	pop    edi
c000efb6:	58                   	pop    eax
c000efb7:	6a 01                	push   0x1
c000efb9:	53                   	push   ebx
c000efba:	e8 39 ad ff ff       	call   c0009cf8 <File::open(FileOpenMode)>
c000efbf:	83 c4 10             	add    esp,0x10
c000efc2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000efca:	83 ec 0c             	sub    esp,0xc
c000efcd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000efcf:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000efd3:	51                   	push   ecx
c000efd4:	8d 54 24 23          	lea    edx,[esp+0x23]
c000efd8:	52                   	push   edx
c000efd9:	6a 00                	push   0x0
c000efdb:	6a 01                	push   0x1
c000efdd:	53                   	push   ebx
c000efde:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000efe1:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000efe5:	83 c4 20             	add    esp,0x20
c000efe8:	3c 0d                	cmp    al,0xd
c000efea:	0f 84 09 01 00 00    	je     c000f0f9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000eff0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000eff5:	0f 84 ef 00 00 00    	je     c000f0ea <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000effb:	3c 0a                	cmp    al,0xa
c000effd:	74 13                	je     c000f012 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000efff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000f004:	74 0c                	je     c000f012 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000f006:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000f00c:	0f 8e d8 00 00 00    	jle    c000f0ea <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000f012:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f016:	83 ec 0c             	sub    esp,0xc
c000f019:	8d 78 01             	lea    edi,[eax+0x1]
c000f01c:	57                   	push   edi
c000f01d:	e8 27 79 ff ff       	call   c0006949 <malloc>
c000f022:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000f026:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f02a:	8d 56 04             	lea    edx,[esi+0x4]
c000f02d:	89 14 24             	mov    DWORD PTR [esp],edx
c000f030:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f034:	e8 10 79 ff ff       	call   c0006949 <malloc>
c000f039:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f03d:	83 c4 0c             	add    esp,0xc
c000f040:	57                   	push   edi
c000f041:	6a 00                	push   0x0
c000f043:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f047:	e8 5c 14 ff ff       	call   c00004a8 <memset>
c000f04c:	8d 74 24 30          	lea    esi,[esp+0x30]
c000f050:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000f054:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f058:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f05a:	83 c4 0c             	add    esp,0xc
c000f05d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f061:	52                   	push   edx
c000f062:	6a 00                	push   0x0
c000f064:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f068:	e8 3b 14 ff ff       	call   c00004a8 <memset>
c000f06d:	8d 74 24 30          	lea    esi,[esp+0x30]
c000f071:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000f075:	89 34 24             	mov    DWORD PTR [esp],esi
c000f078:	e8 47 14 ff ff       	call   c00004c4 <strlen>
c000f07d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000f081:	89 c1                	mov    ecx,eax
c000f083:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f085:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f088:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000f08b:	40                   	inc    eax
c000f08c:	83 c4 10             	add    esp,0x10
c000f08f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f092:	85 d2                	test   edx,edx
c000f094:	75 0c                	jne    c000f0a2 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000f096:	83 ec 0c             	sub    esp,0xc
c000f099:	6a 08                	push   0x8
c000f09b:	e8 a9 78 ff ff       	call   c0006949 <malloc>
c000f0a0:	eb 0c                	jmp    c000f0ae <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000f0a2:	c1 e0 03             	shl    eax,0x3
c000f0a5:	51                   	push   ecx
c000f0a6:	51                   	push   ecx
c000f0a7:	50                   	push   eax
c000f0a8:	52                   	push   edx
c000f0a9:	e8 87 78 ff ff       	call   c0006935 <realloc>
c000f0ae:	83 c4 10             	add    esp,0x10
c000f0b1:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000f0b4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000f0b7:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000f0ba:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f0be:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000f0c2:	b9 08 00 00 00       	mov    ecx,0x8
c000f0c7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f0c9:	31 f6                	xor    esi,esi
c000f0cb:	50                   	push   eax
c000f0cc:	68 00 01 00 00       	push   0x100
c000f0d1:	6a 00                	push   0x0
c000f0d3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000f0d7:	50                   	push   eax
c000f0d8:	e8 cb 13 ff ff       	call   c00004a8 <memset>
c000f0dd:	83 c4 10             	add    esp,0x10
c000f0e0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f0e8:	eb 0f                	jmp    c000f0f9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f0ea:	3c 3d                	cmp    al,0x3d
c000f0ec:	74 07                	je     c000f0f5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000f0ee:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000f0f2:	46                   	inc    esi
c000f0f3:	eb 04                	jmp    c000f0f9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f0f5:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000f0f9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000f0fe:	0f 85 c6 fe ff ff    	jne    c000efca <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000f104:	81 c4 2c 01 00 00    	add    esp,0x12c
c000f10a:	5b                   	pop    ebx
c000f10b:	5e                   	pop    esi
c000f10c:	5f                   	pop    edi
c000f10d:	5d                   	pop    ebp
c000f10e:	c3                   	ret    
c000f10f:	90                   	nop

c000f110 <EnvVarContainer::__loadSystem()>:
c000f110:	83 ec 10             	sub    esp,0x10
c000f113:	68 40 fd 01 c0       	push   0xc001fd40
c000f118:	68 44 ea 01 c0       	push   0xc001ea44
c000f11d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f121:	e8 04 fe ff ff       	call   c000ef2a <EnvVarContainer::loadFrom(char const*, char const*)>
c000f126:	83 c4 1c             	add    esp,0x1c
c000f129:	c3                   	ret    

c000f12a <EnvVarContainer::__loadUser()>:
c000f12a:	c3                   	ret    
c000f12b:	90                   	nop

c000f12c <EnvVarContainer::EnvVarContainer(Process*)>:
c000f12c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f130:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f136:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f13a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f13e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000f141:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f145:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f14c:	90                   	nop
c000f14d:	c3                   	ret    

c000f14e <EnvVarContainer::~EnvVarContainer()>:
c000f14e:	83 ec 0c             	sub    esp,0xc
c000f151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f155:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f158:	85 c0                	test   eax,eax
c000f15a:	74 1d                	je     c000f179 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000f15c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f160:	8b 00                	mov    eax,DWORD PTR [eax]
c000f162:	85 c0                	test   eax,eax
c000f164:	74 13                	je     c000f179 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000f166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f16a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f16d:	83 ec 0c             	sub    esp,0xc
c000f170:	50                   	push   eax
c000f171:	e8 e3 77 ff ff       	call   c0006959 <free>
c000f176:	83 c4 10             	add    esp,0x10
c000f179:	90                   	nop
c000f17a:	83 c4 0c             	add    esp,0xc
c000f17d:	c3                   	ret    

c000f17e <Krnl::getEnv(Process*, char const*)>:
c000f17e:	53                   	push   ebx
c000f17f:	83 ec 08             	sub    esp,0x8
c000f182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f186:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f18a:	39 05 70 38 02 c0    	cmp    DWORD PTR ds:0xc0023870,eax
c000f190:	74 04                	je     c000f196 <Krnl::getEnv(Process*, char const*)+0x18>
c000f192:	85 c0                	test   eax,eax
c000f194:	75 0b                	jne    c000f1a1 <Krnl::getEnv(Process*, char const*)+0x23>
c000f196:	a1 f4 2d 02 c0       	mov    eax,ds:0xc0022df4
c000f19b:	85 c0                	test   eax,eax
c000f19d:	75 19                	jne    c000f1b8 <Krnl::getEnv(Process*, char const*)+0x3a>
c000f19f:	eb 27                	jmp    c000f1c8 <Krnl::getEnv(Process*, char const*)+0x4a>
c000f1a1:	52                   	push   edx
c000f1a2:	52                   	push   edx
c000f1a3:	53                   	push   ebx
c000f1a4:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000f1aa:	e8 79 fc ff ff       	call   c000ee28 <EnvVarContainer::getEnv(char const*)>
c000f1af:	83 c4 10             	add    esp,0x10
c000f1b2:	85 c0                	test   eax,eax
c000f1b4:	75 28                	jne    c000f1de <Krnl::getEnv(Process*, char const*)+0x60>
c000f1b6:	eb de                	jmp    c000f196 <Krnl::getEnv(Process*, char const*)+0x18>
c000f1b8:	52                   	push   edx
c000f1b9:	52                   	push   edx
c000f1ba:	53                   	push   ebx
c000f1bb:	50                   	push   eax
c000f1bc:	e8 67 fc ff ff       	call   c000ee28 <EnvVarContainer::getEnv(char const*)>
c000f1c1:	83 c4 10             	add    esp,0x10
c000f1c4:	85 c0                	test   eax,eax
c000f1c6:	75 16                	jne    c000f1de <Krnl::getEnv(Process*, char const*)+0x60>
c000f1c8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000f1cc:	a1 f8 2d 02 c0       	mov    eax,ds:0xc0022df8
c000f1d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f1d5:	83 c4 08             	add    esp,0x8
c000f1d8:	5b                   	pop    ebx
c000f1d9:	e9 4a fc ff ff       	jmp    c000ee28 <EnvVarContainer::getEnv(char const*)>
c000f1de:	83 c4 08             	add    esp,0x8
c000f1e1:	5b                   	pop    ebx
c000f1e2:	c3                   	ret    

c000f1e3 <Krnl::setEnvSystem(char const*, char const*)>:
c000f1e3:	83 ec 10             	sub    esp,0x10
c000f1e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f1ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f1ee:	ff 35 f8 2d 02 c0    	push   DWORD PTR ds:0xc0022df8
c000f1f4:	e8 6d fc ff ff       	call   c000ee66 <EnvVarContainer::setEnv(char const*, char const*)>
c000f1f9:	83 c4 1c             	add    esp,0x1c
c000f1fc:	c3                   	ret    

c000f1fd <Krnl::setEnvUser(char const*, char const*)>:
c000f1fd:	a1 f4 2d 02 c0       	mov    eax,ds:0xc0022df4
c000f202:	85 c0                	test   eax,eax
c000f204:	74 15                	je     c000f21b <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000f206:	83 ec 10             	sub    esp,0x10
c000f209:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f20d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f211:	50                   	push   eax
c000f212:	e8 4f fc ff ff       	call   c000ee66 <EnvVarContainer::setEnv(char const*, char const*)>
c000f217:	83 c4 1c             	add    esp,0x1c
c000f21a:	c3                   	ret    
c000f21b:	c3                   	ret    

c000f21c <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000f21c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f220:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000f226:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f22a:	e9 37 fc ff ff       	jmp    c000ee66 <EnvVarContainer::setEnv(char const*, char const*)>

c000f22f <Krnl::deleteEnvSystem(char const*)>:
c000f22f:	c3                   	ret    

c000f230 <Krnl::deleteEnvUser(char const*)>:
c000f230:	c3                   	ret    

c000f231 <Krnl::deleteEnvProcess(Process*, char const*)>:
c000f231:	c3                   	ret    

c000f232 <Krnl::newProcessEnv(Process*)>:
c000f232:	83 ec 28             	sub    esp,0x28
c000f235:	6a 0c                	push   0xc
c000f237:	e8 0d 77 ff ff       	call   c0006949 <malloc>
c000f23c:	5a                   	pop    edx
c000f23d:	59                   	pop    ecx
c000f23e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f242:	50                   	push   eax
c000f243:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f247:	e8 e0 fe ff ff       	call   c000f12c <EnvVarContainer::EnvVarContainer(Process*)>
c000f24c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f250:	83 c4 2c             	add    esp,0x2c
c000f253:	c3                   	ret    

c000f254 <Krnl::copyProcessEnv(Process*, Process*)>:
c000f254:	57                   	push   edi
c000f255:	56                   	push   esi
c000f256:	53                   	push   ebx
c000f257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f25b:	83 ec 0c             	sub    esp,0xc
c000f25e:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000f264:	6a 0c                	push   0xc
c000f266:	e8 de 76 ff ff       	call   c0006949 <malloc>
c000f26b:	89 c3                	mov    ebx,eax
c000f26d:	58                   	pop    eax
c000f26e:	5a                   	pop    edx
c000f26f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f273:	53                   	push   ebx
c000f274:	e8 b3 fe ff ff       	call   c000f12c <EnvVarContainer::EnvVarContainer(Process*)>
c000f279:	8b 07                	mov    eax,DWORD PTR [edi]
c000f27b:	89 03                	mov    DWORD PTR [ebx],eax
c000f27d:	c1 e0 03             	shl    eax,0x3
c000f280:	89 04 24             	mov    DWORD PTR [esp],eax
c000f283:	e8 c1 76 ff ff       	call   c0006949 <malloc>
c000f288:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000f28b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000f28d:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000f290:	c1 e1 03             	shl    ecx,0x3
c000f293:	89 c7                	mov    edi,eax
c000f295:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f297:	83 c4 10             	add    esp,0x10
c000f29a:	89 d8                	mov    eax,ebx
c000f29c:	5b                   	pop    ebx
c000f29d:	5e                   	pop    esi
c000f29e:	5f                   	pop    edi
c000f29f:	c3                   	ret    

c000f2a0 <Krnl::loadSystemEnv()>:
c000f2a0:	53                   	push   ebx
c000f2a1:	83 ec 14             	sub    esp,0x14
c000f2a4:	6a 0c                	push   0xc
c000f2a6:	e8 9e 76 ff ff       	call   c0006949 <malloc>
c000f2ab:	89 c3                	mov    ebx,eax
c000f2ad:	58                   	pop    eax
c000f2ae:	5a                   	pop    edx
c000f2af:	ff 35 70 38 02 c0    	push   DWORD PTR ds:0xc0023870
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 71 fe ff ff       	call   c000f12c <EnvVarContainer::EnvVarContainer(Process*)>
c000f2bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f2be:	89 1d f8 2d 02 c0    	mov    DWORD PTR ds:0xc0022df8,ebx
c000f2c4:	e8 47 fe ff ff       	call   c000f110 <EnvVarContainer::__loadSystem()>
c000f2c9:	83 c4 18             	add    esp,0x18
c000f2cc:	5b                   	pop    ebx
c000f2cd:	c3                   	ret    

c000f2ce <Krnl::loadUserEnv()>:
c000f2ce:	53                   	push   ebx
c000f2cf:	83 ec 14             	sub    esp,0x14
c000f2d2:	6a 0c                	push   0xc
c000f2d4:	e8 70 76 ff ff       	call   c0006949 <malloc>
c000f2d9:	89 c3                	mov    ebx,eax
c000f2db:	58                   	pop    eax
c000f2dc:	5a                   	pop    edx
c000f2dd:	ff 35 70 38 02 c0    	push   DWORD PTR ds:0xc0023870
c000f2e3:	53                   	push   ebx
c000f2e4:	e8 43 fe ff ff       	call   c000f12c <EnvVarContainer::EnvVarContainer(Process*)>
c000f2e9:	89 1d f4 2d 02 c0    	mov    DWORD PTR ds:0xc0022df4,ebx
c000f2ef:	83 c4 18             	add    esp,0x18
c000f2f2:	5b                   	pop    ebx
c000f2f3:	c3                   	ret    

c000f2f4 <Krnl::flushEnv()>:
c000f2f4:	c3                   	ret    

c000f2f5 <Krnl::getProcessTotalEnvCount(Process*)>:
c000f2f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2f9:	8b 15 f4 2d 02 c0    	mov    edx,DWORD PTR ds:0xc0022df4
c000f2ff:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000f305:	a1 f8 2d 02 c0       	mov    eax,ds:0xc0022df8
c000f30a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f30c:	03 01                	add    eax,DWORD PTR [ecx]
c000f30e:	85 d2                	test   edx,edx
c000f310:	74 02                	je     c000f314 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c000f312:	03 02                	add    eax,DWORD PTR [edx]
c000f314:	c3                   	ret    

c000f315 <Krnl::getProcessEnvPair(Process*, int)>:
c000f315:	57                   	push   edi
c000f316:	56                   	push   esi
c000f317:	8b 35 f4 2d 02 c0    	mov    esi,DWORD PTR ds:0xc0022df4
c000f31d:	53                   	push   ebx
c000f31e:	85 f6                	test   esi,esi
c000f320:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f324:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f328:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000f32e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f332:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f334:	75 16                	jne    c000f34c <Krnl::getProcessEnvPair(Process*, int)+0x37>
c000f336:	39 c2                	cmp    edx,eax
c000f338:	7c 16                	jl     c000f350 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c000f33a:	8b 0d f8 2d 02 c0    	mov    ecx,DWORD PTR ds:0xc0022df8
c000f340:	8b 31                	mov    esi,DWORD PTR [ecx]
c000f342:	01 c6                	add    esi,eax
c000f344:	39 d6                	cmp    esi,edx
c000f346:	7e 3c                	jle    c000f384 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c000f348:	29 c2                	sub    edx,eax
c000f34a:	eb 04                	jmp    c000f350 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c000f34c:	39 c2                	cmp    edx,eax
c000f34e:	7d 05                	jge    c000f355 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c000f350:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000f353:	eb 20                	jmp    c000f375 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c000f355:	8b 3e                	mov    edi,DWORD PTR [esi]
c000f357:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000f35a:	39 d1                	cmp    ecx,edx
c000f35c:	7e 04                	jle    c000f362 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c000f35e:	29 c2                	sub    edx,eax
c000f360:	eb 10                	jmp    c000f372 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c000f362:	8b 35 f8 2d 02 c0    	mov    esi,DWORD PTR ds:0xc0022df8
c000f368:	03 0e                	add    ecx,DWORD PTR [esi]
c000f36a:	39 d1                	cmp    ecx,edx
c000f36c:	7e 16                	jle    c000f384 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c000f36e:	29 c2                	sub    edx,eax
c000f370:	29 fa                	sub    edx,edi
c000f372:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000f375:	8d 14 d0             	lea    edx,[eax+edx*8]
c000f378:	8b 02                	mov    eax,DWORD PTR [edx]
c000f37a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f37d:	89 03                	mov    DWORD PTR [ebx],eax
c000f37f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000f382:	eb 1d                	jmp    c000f3a1 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c000f384:	83 ec 0c             	sub    esp,0xc
c000f387:	68 66 ea 01 c0       	push   0xc001ea66
c000f38c:	e8 18 00 00 00       	call   c000f3a9 <Krnl::panic(char const*)>
c000f391:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000f397:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000f39e:	83 c4 10             	add    esp,0x10
c000f3a1:	89 d8                	mov    eax,ebx
c000f3a3:	5b                   	pop    ebx
c000f3a4:	5e                   	pop    esi
c000f3a5:	5f                   	pop    edi
c000f3a6:	c2 04 00             	ret    0x4

c000f3a9 <Krnl::panic(char const*)>:
c000f3a9:	53                   	push   ebx
c000f3aa:	83 ec 10             	sub    esp,0x10
c000f3ad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f3b1:	fa                   	cli    
c000f3b2:	c6 05 04 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022e04,0x1
c000f3b9:	53                   	push   ebx
c000f3ba:	68 80 ea 01 c0       	push   0xc001ea80
c000f3bf:	e8 0f a3 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c000f3c4:	83 c4 0c             	add    esp,0xc
c000f3c7:	6a 01                	push   0x1
c000f3c9:	6a 0f                	push   0xf
c000f3cb:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f3d1:	e8 e6 80 ff ff       	call   c00074bc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f3d6:	59                   	pop    ecx
c000f3d7:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f3dd:	e8 d2 82 ff ff       	call   c00076b4 <VgaText::clearScreen()>
c000f3e2:	58                   	pop    eax
c000f3e3:	5a                   	pop    edx
c000f3e4:	68 d7 ea 01 c0       	push   0xc001ead7
c000f3e9:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f3ef:	e8 00 81 ff ff       	call   c00074f4 <VgaText::setTitle(char*)>
c000f3f4:	83 c4 0c             	add    esp,0xc
c000f3f7:	6a 01                	push   0x1
c000f3f9:	6a 0f                	push   0xf
c000f3fb:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f401:	e8 b6 80 ff ff       	call   c00074bc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f406:	59                   	pop    ecx
c000f407:	58                   	pop    eax
c000f408:	68 99 ea 01 c0       	push   0xc001ea99
c000f40d:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f413:	e8 90 85 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c000f418:	58                   	pop    eax
c000f419:	5a                   	pop    edx
c000f41a:	68 20 eb 01 c0       	push   0xc001eb20
c000f41f:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f425:	e8 7e 85 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c000f42a:	59                   	pop    ecx
c000f42b:	58                   	pop    eax
c000f42c:	68 b5 ea 01 c0       	push   0xc001eab5
c000f431:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f437:	e8 6c 85 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c000f43c:	58                   	pop    eax
c000f43d:	5a                   	pop    edx
c000f43e:	53                   	push   ebx
c000f43f:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f445:	e8 5e 85 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c000f44a:	59                   	pop    ecx
c000f44b:	5b                   	pop    ebx
c000f44c:	68 d5 ea 01 c0       	push   0xc001ead5
c000f451:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f457:	e8 4c 85 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c000f45c:	58                   	pop    eax
c000f45d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f461:	e8 97 29 00 00       	call   c0011dfd <Thr::getDriverNameFromAddress(unsigned long)>
c000f466:	83 c4 10             	add    esp,0x10
c000f469:	85 c0                	test   eax,eax
c000f46b:	0f 84 4e 01 00 00    	je     c000f5bf <Krnl::panic(char const*)+0x216>
c000f471:	83 ec 08             	sub    esp,0x8
c000f474:	89 c3                	mov    ebx,eax
c000f476:	68 5c eb 01 c0       	push   0xc001eb5c
c000f47b:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f481:	e8 22 85 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c000f486:	59                   	pop    ecx
c000f487:	58                   	pop    eax
c000f488:	68 b5 ea 01 c0       	push   0xc001eab5
c000f48d:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f493:	e8 10 85 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c000f498:	58                   	pop    eax
c000f499:	5a                   	pop    edx
c000f49a:	53                   	push   ebx
c000f49b:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f4a1:	e8 02 85 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c000f4a6:	83 c4 10             	add    esp,0x10
c000f4a9:	83 ec 08             	sub    esp,0x8
c000f4ac:	68 d4 ea 01 c0       	push   0xc001ead4
c000f4b1:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f4b7:	e8 ec 84 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c000f4bc:	58                   	pop    eax
c000f4bd:	5a                   	pop    edx
c000f4be:	68 b4 eb 01 c0       	push   0xc001ebb4
c000f4c3:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f4c9:	e8 da 84 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c000f4ce:	59                   	pop    ecx
c000f4cf:	5b                   	pop    ebx
c000f4d0:	68 f4 eb 01 c0       	push   0xc001ebf4
c000f4d5:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f4db:	e8 c8 84 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c000f4e0:	58                   	pop    eax
c000f4e1:	5a                   	pop    edx
c000f4e2:	68 c0 ea 01 c0       	push   0xc001eac0
c000f4e7:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f4ed:	e8 b6 84 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c000f4f2:	59                   	pop    ecx
c000f4f3:	5b                   	pop    ebx
c000f4f4:	68 38 ec 01 c0       	push   0xc001ec38
c000f4f9:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f4ff:	e8 a4 84 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c000f504:	58                   	pop    eax
c000f505:	5a                   	pop    edx
c000f506:	68 d8 ea 01 c0       	push   0xc001ead8
c000f50b:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f511:	e8 92 84 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c000f516:	0f 20 c0             	mov    eax,cr0
c000f519:	59                   	pop    ecx
c000f51a:	5b                   	pop    ebx
c000f51b:	50                   	push   eax
c000f51c:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f522:	e8 3b 84 ff ff       	call   c0007962 <VgaText::putx(unsigned int)>
c000f527:	58                   	pop    eax
c000f528:	5a                   	pop    edx
c000f529:	68 e2 ea 01 c0       	push   0xc001eae2
c000f52e:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f534:	e8 6f 84 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c000f539:	0f 20 d0             	mov    eax,cr2
c000f53c:	59                   	pop    ecx
c000f53d:	5b                   	pop    ebx
c000f53e:	50                   	push   eax
c000f53f:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f545:	e8 18 84 ff ff       	call   c0007962 <VgaText::putx(unsigned int)>
c000f54a:	58                   	pop    eax
c000f54b:	5a                   	pop    edx
c000f54c:	68 ec ea 01 c0       	push   0xc001eaec
c000f551:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f557:	e8 4c 84 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c000f55c:	0f 20 d8             	mov    eax,cr3
c000f55f:	59                   	pop    ecx
c000f560:	5b                   	pop    ebx
c000f561:	50                   	push   eax
c000f562:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f568:	e8 f5 83 ff ff       	call   c0007962 <VgaText::putx(unsigned int)>
c000f56d:	58                   	pop    eax
c000f56e:	5a                   	pop    edx
c000f56f:	68 ff ea 01 c0       	push   0xc001eaff
c000f574:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f57a:	e8 29 84 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c000f57f:	0f 20 e0             	mov    eax,cr4
c000f582:	59                   	pop    ecx
c000f583:	5b                   	pop    ebx
c000f584:	50                   	push   eax
c000f585:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f58b:	e8 d2 83 ff ff       	call   c0007962 <VgaText::putx(unsigned int)>
c000f590:	58                   	pop    eax
c000f591:	5a                   	pop    edx
c000f592:	68 09 eb 01 c0       	push   0xc001eb09
c000f597:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f59d:	e8 06 84 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c000f5a2:	83 c4 10             	add    esp,0x10
c000f5a5:	b2 fe                	mov    dl,0xfe
c000f5a7:	e4 60                	in     al,0x60
c000f5a9:	3c 1c                	cmp    al,0x1c
c000f5ab:	74 04                	je     c000f5b1 <Krnl::panic(char const*)+0x208>
c000f5ad:	3c 5a                	cmp    al,0x5a
c000f5af:	75 f6                	jne    c000f5a7 <Krnl::panic(char const*)+0x1fe>
c000f5b1:	e4 64                	in     al,0x64
c000f5b3:	a8 02                	test   al,0x2
c000f5b5:	75 fa                	jne    c000f5b1 <Krnl::panic(char const*)+0x208>
c000f5b7:	88 d0                	mov    al,dl
c000f5b9:	e6 64                	out    0x64,al
c000f5bb:	fa                   	cli    
c000f5bc:	f4                   	hlt    
c000f5bd:	eb e8                	jmp    c000f5a7 <Krnl::panic(char const*)+0x1fe>
c000f5bf:	51                   	push   ecx
c000f5c0:	51                   	push   ecx
c000f5c1:	68 88 eb 01 c0       	push   0xc001eb88
c000f5c6:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f5cc:	e8 d7 83 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c000f5d1:	5b                   	pop    ebx
c000f5d2:	58                   	pop    eax
c000f5d3:	68 b5 ea 01 c0       	push   0xc001eab5
c000f5d8:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f5de:	e8 c5 83 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c000f5e3:	58                   	pop    eax
c000f5e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f5e9:	5a                   	pop    edx
c000f5ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f5ed:	83 c0 0c             	add    eax,0xc
c000f5f0:	50                   	push   eax
c000f5f1:	ff 35 b4 03 02 c0    	push   DWORD PTR ds:0xc00203b4
c000f5f7:	e8 ac 83 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c000f5fc:	83 c4 10             	add    esp,0x10
c000f5ff:	e9 a5 fe ff ff       	jmp    c000f4a9 <Krnl::panic(char const*)+0x100>

c000f604 <Krnl::powerThread(void*)>:
c000f604:	53                   	push   ebx
c000f605:	83 ec 08             	sub    esp,0x8
c000f608:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000f60d:	48                   	dec    eax
c000f60e:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c000f613:	75 01                	jne    c000f616 <Krnl::powerThread(void*)+0x12>
c000f615:	fb                   	sti    
c000f616:	83 ec 0c             	sub    esp,0xc
c000f619:	8b 1d 54 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022e54
c000f61f:	6a 0a                	push   0xa
c000f621:	c6 05 20 2e 02 c0 00 	mov    BYTE PTR ds:0xc0022e20,0x0
c000f628:	e8 07 35 00 00       	call   c0012b34 <sleep(unsigned int)>
c000f62d:	a1 64 2e 02 c0       	mov    eax,ds:0xc0022e64
c000f632:	83 c4 10             	add    esp,0x10
c000f635:	83 c0 0a             	add    eax,0xa
c000f638:	85 db                	test   ebx,ebx
c000f63a:	a3 64 2e 02 c0       	mov    ds:0xc0022e64,eax
c000f63f:	74 d5                	je     c000f616 <Krnl::powerThread(void*)+0x12>
c000f641:	39 d8                	cmp    eax,ebx
c000f643:	7e d1                	jle    c000f616 <Krnl::powerThread(void*)+0x12>
c000f645:	83 ec 0c             	sub    esp,0xc
c000f648:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c000f64e:	e8 5b 69 ff ff       	call   c0005fae <Computer::sleep()>
c000f653:	83 c4 10             	add    esp,0x10
c000f656:	eb be                	jmp    c000f616 <Krnl::powerThread(void*)+0x12>

c000f658 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c000f658:	57                   	push   edi
c000f659:	b9 09 00 00 00       	mov    ecx,0x9
c000f65e:	56                   	push   esi
c000f65f:	bf 40 2e 02 c0       	mov    edi,0xc0022e40
c000f664:	fc                   	cld    
c000f665:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f669:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f66b:	5e                   	pop    esi
c000f66c:	5f                   	pop    edi
c000f66d:	c3                   	ret    

c000f66e <Krnl::userIOReceived()>:
c000f66e:	c7 05 64 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e64,0x0
c000f678:	c3                   	ret    

c000f679 <Krnl::handlePowerButton()>:
c000f679:	83 ec 0c             	sub    esp,0xc
c000f67c:	a1 40 2e 02 c0       	mov    eax,ds:0xc0022e40
c000f681:	83 f8 02             	cmp    eax,0x2
c000f684:	75 10                	jne    c000f696 <Krnl::handlePowerButton()+0x1d>
c000f686:	83 ec 0c             	sub    esp,0xc
c000f689:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c000f68f:	e8 ea 68 ff ff       	call   c0005f7e <Computer::shutdown()>
c000f694:	eb 11                	jmp    c000f6a7 <Krnl::handlePowerButton()+0x2e>
c000f696:	48                   	dec    eax
c000f697:	75 11                	jne    c000f6aa <Krnl::handlePowerButton()+0x31>
c000f699:	83 ec 0c             	sub    esp,0xc
c000f69c:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c000f6a2:	e8 07 69 ff ff       	call   c0005fae <Computer::sleep()>
c000f6a7:	83 c4 10             	add    esp,0x10
c000f6aa:	83 c4 0c             	add    esp,0xc
c000f6ad:	c3                   	ret    

c000f6ae <Krnl::handleSleepButton()>:
c000f6ae:	83 ec 0c             	sub    esp,0xc
c000f6b1:	a1 44 2e 02 c0       	mov    eax,ds:0xc0022e44
c000f6b6:	83 f8 02             	cmp    eax,0x2
c000f6b9:	75 10                	jne    c000f6cb <Krnl::handleSleepButton()+0x1d>
c000f6bb:	83 ec 0c             	sub    esp,0xc
c000f6be:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c000f6c4:	e8 b5 68 ff ff       	call   c0005f7e <Computer::shutdown()>
c000f6c9:	eb 11                	jmp    c000f6dc <Krnl::handleSleepButton()+0x2e>
c000f6cb:	48                   	dec    eax
c000f6cc:	75 11                	jne    c000f6df <Krnl::handleSleepButton()+0x31>
c000f6ce:	83 ec 0c             	sub    esp,0xc
c000f6d1:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c000f6d7:	e8 d2 68 ff ff       	call   c0005fae <Computer::sleep()>
c000f6dc:	83 c4 10             	add    esp,0x10
c000f6df:	83 c4 0c             	add    esp,0xc
c000f6e2:	c3                   	ret    

c000f6e3 <Krnl::setupPowerManager()>:
c000f6e3:	83 ec 0c             	sub    esp,0xc
c000f6e6:	c7 05 64 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e64,0x0
c000f6f0:	68 f0 00 00 00       	push   0xf0
c000f6f5:	c6 05 20 2e 02 c0 00 	mov    BYTE PTR ds:0xc0022e20,0x0
c000f6fc:	6a 00                	push   0x0
c000f6fe:	68 04 f6 00 c0       	push   0xc000f604
c000f703:	ff 35 70 38 02 c0    	push   DWORD PTR ds:0xc0023870
c000f709:	e8 02 2f 00 00       	call   c0012610 <Process::createThread(void (*)(void*), void*, int)>
c000f70e:	c7 05 40 2e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0022e40,0x2
c000f718:	c7 05 44 2e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0022e44,0x1
c000f722:	c7 05 48 2e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0022e48,0x3
c000f72c:	c7 05 4c 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e4c,0x0
c000f736:	c7 05 58 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e58,0x0
c000f740:	c7 05 50 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e50,0x0
c000f74a:	c7 05 5c 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e5c,0x0
c000f754:	c7 05 54 2e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0022e54,0x3c
c000f75e:	c7 05 60 2e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0022e60,0x3c
c000f768:	83 c4 1c             	add    esp,0x1c
c000f76b:	c3                   	ret    

c000f76c <Reg::findLineFromLoadedData(char*, char*, char*)>:
c000f76c:	55                   	push   ebp
c000f76d:	57                   	push   edi
c000f76e:	56                   	push   esi
c000f76f:	53                   	push   ebx
c000f770:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000f776:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c000f77d:	8a 1e                	mov    bl,BYTE PTR [esi]
c000f77f:	8d 6e 01             	lea    ebp,[esi+0x1]
c000f782:	80 fb 40             	cmp    bl,0x40
c000f785:	75 1b                	jne    c000f7a2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c000f787:	8a 16                	mov    dl,BYTE PTR [esi]
c000f789:	84 d2                	test   dl,dl
c000f78b:	0f 84 f1 00 00 00    	je     c000f882 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f791:	8d 46 01             	lea    eax,[esi+0x1]
c000f794:	80 fa 3a             	cmp    dl,0x3a
c000f797:	74 04                	je     c000f79d <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c000f799:	89 c6                	mov    esi,eax
c000f79b:	eb ea                	jmp    c000f787 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c000f79d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f7a0:	89 c6                	mov    esi,eax
c000f7a2:	50                   	push   eax
c000f7a3:	6a 40                	push   0x40
c000f7a5:	6a 00                	push   0x0
c000f7a7:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f7ab:	50                   	push   eax
c000f7ac:	e8 f7 0c ff ff       	call   c00004a8 <memset>
c000f7b1:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c000f7b8:	31 c0                	xor    eax,eax
c000f7ba:	83 c4 10             	add    esp,0x10
c000f7bd:	8a 0f                	mov    cl,BYTE PTR [edi]
c000f7bf:	84 c9                	test   cl,cl
c000f7c1:	0f 84 bb 00 00 00    	je     c000f882 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f7c7:	3d c7 00 00 00       	cmp    eax,0xc7
c000f7cc:	0f 8f b0 00 00 00    	jg     c000f882 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f7d2:	80 f9 0a             	cmp    cl,0xa
c000f7d5:	0f 85 98 00 00 00    	jne    c000f873 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c000f7db:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c000f7e0:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c000f7e4:	a8 df                	test   al,0xdf
c000f7e6:	0f 94 c1             	sete   cl
c000f7e9:	3c 23                	cmp    al,0x23
c000f7eb:	0f 94 c2             	sete   dl
c000f7ee:	08 d1                	or     cl,dl
c000f7f0:	75 4a                	jne    c000f83c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f7f2:	8d 50 f7             	lea    edx,[eax-0x9]
c000f7f5:	80 fa 01             	cmp    dl,0x1
c000f7f8:	76 42                	jbe    c000f83c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f7fa:	3c 5b                	cmp    al,0x5b
c000f7fc:	75 42                	jne    c000f840 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c000f7fe:	80 fb 40             	cmp    bl,0x40
c000f801:	75 39                	jne    c000f83c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f803:	83 ec 0c             	sub    esp,0xc
c000f806:	8d 54 24 65          	lea    edx,[esp+0x65]
c000f80a:	52                   	push   edx
c000f80b:	e8 b4 0c ff ff       	call   c00004c4 <strlen>
c000f810:	83 c4 10             	add    esp,0x10
c000f813:	83 f8 3f             	cmp    eax,0x3f
c000f816:	77 6a                	ja     c000f882 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f818:	50                   	push   eax
c000f819:	50                   	push   eax
c000f81a:	8d 54 24 61          	lea    edx,[esp+0x61]
c000f81e:	52                   	push   edx
c000f81f:	8d 54 24 24          	lea    edx,[esp+0x24]
c000f823:	52                   	push   edx
c000f824:	e8 3b 0d ff ff       	call   c0000564 <strcpy>
c000f829:	58                   	pop    eax
c000f82a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000f82e:	52                   	push   edx
c000f82f:	e8 90 0c ff ff       	call   c00004c4 <strlen>
c000f834:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c000f839:	83 c4 10             	add    esp,0x10
c000f83c:	31 d2                	xor    edx,edx
c000f83e:	eb 3a                	jmp    c000f87a <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c000f840:	80 fb 40             	cmp    bl,0x40
c000f843:	74 06                	je     c000f84b <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c000f845:	8d 44 24 58          	lea    eax,[esp+0x58]
c000f849:	eb 20                	jmp    c000f86b <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c000f84b:	50                   	push   eax
c000f84c:	50                   	push   eax
c000f84d:	55                   	push   ebp
c000f84e:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f852:	50                   	push   eax
c000f853:	e8 98 0d ff ff       	call   c00005f0 <strcmp>
c000f858:	83 c4 10             	add    esp,0x10
c000f85b:	85 c0                	test   eax,eax
c000f85d:	75 dd                	jne    c000f83c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f85f:	eb e4                	jmp    c000f845 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c000f861:	8d 50 01             	lea    edx,[eax+0x1]
c000f864:	80 f9 3d             	cmp    cl,0x3d
c000f867:	74 1d                	je     c000f886 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c000f869:	89 d0                	mov    eax,edx
c000f86b:	8a 08                	mov    cl,BYTE PTR [eax]
c000f86d:	84 c9                	test   cl,cl
c000f86f:	75 f0                	jne    c000f861 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c000f871:	eb 0f                	jmp    c000f882 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f873:	8d 50 01             	lea    edx,[eax+0x1]
c000f876:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c000f87a:	47                   	inc    edi
c000f87b:	89 d0                	mov    eax,edx
c000f87d:	e9 3b ff ff ff       	jmp    c000f7bd <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c000f882:	31 c0                	xor    eax,eax
c000f884:	eb 33                	jmp    c000f8b9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c000f886:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f88a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f88d:	50                   	push   eax
c000f88e:	50                   	push   eax
c000f88f:	8d 44 24 60          	lea    eax,[esp+0x60]
c000f893:	50                   	push   eax
c000f894:	56                   	push   esi
c000f895:	e8 56 0d ff ff       	call   c00005f0 <strcmp>
c000f89a:	83 c4 10             	add    esp,0x10
c000f89d:	85 c0                	test   eax,eax
c000f89f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f8a3:	75 97                	jne    c000f83c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f8a5:	51                   	push   ecx
c000f8a6:	51                   	push   ecx
c000f8a7:	52                   	push   edx
c000f8a8:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c000f8af:	e8 b0 0c ff ff       	call   c0000564 <strcpy>
c000f8b4:	83 c4 10             	add    esp,0x10
c000f8b7:	b0 01                	mov    al,0x1
c000f8b9:	81 c4 2c 01 00 00    	add    esp,0x12c
c000f8bf:	5b                   	pop    ebx
c000f8c0:	5e                   	pop    esi
c000f8c1:	5f                   	pop    edi
c000f8c2:	5d                   	pop    ebp
c000f8c3:	c3                   	ret    

c000f8c4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c000f8c4:	57                   	push   edi
c000f8c5:	56                   	push   esi
c000f8c6:	53                   	push   ebx
c000f8c7:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000f8cd:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c000f8d4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c000f8db:	53                   	push   ebx
c000f8dc:	e8 e3 0b ff ff       	call   c00004c4 <strlen>
c000f8e1:	89 34 24             	mov    DWORD PTR [esp],esi
c000f8e4:	89 c7                	mov    edi,eax
c000f8e6:	e8 d9 0b ff ff       	call   c00004c4 <strlen>
c000f8eb:	83 c4 10             	add    esp,0x10
c000f8ee:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c000f8f2:	3d ff 00 00 00       	cmp    eax,0xff
c000f8f7:	0f 87 d3 00 00 00    	ja     c000f9d0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c000f8fd:	57                   	push   edi
c000f8fe:	57                   	push   edi
c000f8ff:	56                   	push   esi
c000f900:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f904:	56                   	push   esi
c000f905:	e8 5a 0c ff ff       	call   c0000564 <strcpy>
c000f90a:	58                   	pop    eax
c000f90b:	5a                   	pop    edx
c000f90c:	68 43 ef 01 c0       	push   0xc001ef43
c000f911:	56                   	push   esi
c000f912:	e8 8d 0d ff ff       	call   c00006a4 <strcat>
c000f917:	59                   	pop    ecx
c000f918:	5f                   	pop    edi
c000f919:	53                   	push   ebx
c000f91a:	56                   	push   esi
c000f91b:	e8 84 0d ff ff       	call   c00006a4 <strcat>
c000f920:	58                   	pop    eax
c000f921:	5a                   	pop    edx
c000f922:	68 5e ec 01 c0       	push   0xc001ec5e
c000f927:	56                   	push   esi
c000f928:	e8 77 0d ff ff       	call   c00006a4 <strcat>
c000f92d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000f934:	e8 10 70 ff ff       	call   c0006949 <malloc>
c000f939:	83 c4 0c             	add    esp,0xc
c000f93c:	89 c3                	mov    ebx,eax
c000f93e:	ff 35 70 38 02 c0    	push   DWORD PTR ds:0xc0023870
c000f944:	56                   	push   esi
c000f945:	50                   	push   eax
c000f946:	e8 f3 a2 ff ff       	call   c0009c3e <File::File(char const*, Process*)>
c000f94b:	83 c4 10             	add    esp,0x10
c000f94e:	85 db                	test   ebx,ebx
c000f950:	74 7e                	je     c000f9d0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c000f952:	51                   	push   ecx
c000f953:	51                   	push   ecx
c000f954:	6a 01                	push   0x1
c000f956:	53                   	push   ebx
c000f957:	e8 9c a3 ff ff       	call   c0009cf8 <File::open(FileOpenMode)>
c000f95c:	83 c4 10             	add    esp,0x10
c000f95f:	85 c0                	test   eax,eax
c000f961:	74 08                	je     c000f96b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c000f963:	83 ec 0c             	sub    esp,0xc
c000f966:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f968:	53                   	push   ebx
c000f969:	eb 5f                	jmp    c000f9ca <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c000f96b:	52                   	push   edx
c000f96c:	8d 44 24 17          	lea    eax,[esp+0x17]
c000f970:	50                   	push   eax
c000f971:	8d 44 24 20          	lea    eax,[esp+0x20]
c000f975:	50                   	push   eax
c000f976:	53                   	push   ebx
c000f977:	e8 28 a6 ff ff       	call   c0009fa4 <File::stat(unsigned long long*, bool*)>
c000f97c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f980:	83 c4 10             	add    esp,0x10
c000f983:	89 c1                	mov    ecx,eax
c000f985:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c000f989:	74 31                	je     c000f9bc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c000f98b:	83 ec 0c             	sub    esp,0xc
c000f98e:	50                   	push   eax
c000f98f:	e8 b5 6f ff ff       	call   c0006949 <malloc>
c000f994:	89 c6                	mov    esi,eax
c000f996:	58                   	pop    eax
c000f997:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f999:	8d 54 24 20          	lea    edx,[esp+0x20]
c000f99d:	52                   	push   edx
c000f99e:	56                   	push   esi
c000f99f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f9a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f9a7:	53                   	push   ebx
c000f9a8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000f9ab:	83 c4 20             	add    esp,0x20
c000f9ae:	85 c0                	test   eax,eax
c000f9b0:	75 0a                	jne    c000f9bc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c000f9b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f9b6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f9ba:	74 18                	je     c000f9d4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c000f9bc:	83 ec 0c             	sub    esp,0xc
c000f9bf:	53                   	push   ebx
c000f9c0:	e8 91 a3 ff ff       	call   c0009d56 <File::close()>
c000f9c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f9c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f9ca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f9cd:	83 c4 10             	add    esp,0x10
c000f9d0:	31 c0                	xor    eax,eax
c000f9d2:	eb 3b                	jmp    c000fa0f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c000f9d4:	83 ec 0c             	sub    esp,0xc
c000f9d7:	53                   	push   ebx
c000f9d8:	e8 79 a3 ff ff       	call   c0009d56 <File::close()>
c000f9dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f9df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f9e2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f9e5:	83 c4 0c             	add    esp,0xc
c000f9e8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c000f9ef:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c000f9f6:	56                   	push   esi
c000f9f7:	e8 70 fd ff ff       	call   c000f76c <Reg::findLineFromLoadedData(char*, char*, char*)>
c000f9fc:	89 34 24             	mov    DWORD PTR [esp],esi
c000f9ff:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000fa03:	e8 51 6f ff ff       	call   c0006959 <free>
c000fa08:	83 c4 10             	add    esp,0x10
c000fa0b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fa0f:	81 c4 20 01 00 00    	add    esp,0x120
c000fa15:	5b                   	pop    ebx
c000fa16:	5e                   	pop    esi
c000fa17:	5f                   	pop    edi
c000fa18:	c3                   	ret    

c000fa19 <Reg::getLine(char*, char*, char*)>:
c000fa19:	57                   	push   edi
c000fa1a:	56                   	push   esi
c000fa1b:	53                   	push   ebx
c000fa1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa20:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fa24:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fa28:	57                   	push   edi
c000fa29:	56                   	push   esi
c000fa2a:	53                   	push   ebx
c000fa2b:	68 63 ec 01 c0       	push   0xc001ec63
c000fa30:	e8 8f fe ff ff       	call   c000f8c4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c000fa35:	83 c4 10             	add    esp,0x10
c000fa38:	84 c0                	test   al,al
c000fa3a:	75 10                	jne    c000fa4c <Reg::getLine(char*, char*, char*)+0x33>
c000fa3c:	57                   	push   edi
c000fa3d:	56                   	push   esi
c000fa3e:	53                   	push   ebx
c000fa3f:	68 88 ec 01 c0       	push   0xc001ec88
c000fa44:	e8 7b fe ff ff       	call   c000f8c4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c000fa49:	83 c4 10             	add    esp,0x10
c000fa4c:	5b                   	pop    ebx
c000fa4d:	5e                   	pop    esi
c000fa4e:	5f                   	pop    edi
c000fa4f:	c3                   	ret    

c000fa50 <Reg::readInt(char*, char*, int*)>:
c000fa50:	55                   	push   ebp
c000fa51:	57                   	push   edi
c000fa52:	56                   	push   esi
c000fa53:	53                   	push   ebx
c000fa54:	81 ec f0 00 00 00    	sub    esp,0xf0
c000fa5a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000fa5e:	57                   	push   edi
c000fa5f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c000fa66:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c000fa6d:	e8 a7 ff ff ff       	call   c000fa19 <Reg::getLine(char*, char*, char*)>
c000fa72:	83 c4 10             	add    esp,0x10
c000fa75:	84 c0                	test   al,al
c000fa77:	0f 84 b3 00 00 00    	je     c000fb30 <Reg::readInt(char*, char*, int*)+0xe0>
c000fa7d:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c000fa81:	80 fa 2b             	cmp    dl,0x2b
c000fa84:	74 0c                	je     c000fa92 <Reg::readInt(char*, char*, int*)+0x42>
c000fa86:	80 fa 2d             	cmp    dl,0x2d
c000fa89:	75 0e                	jne    c000fa99 <Reg::readInt(char*, char*, int*)+0x49>
c000fa8b:	ba 01 00 00 00       	mov    edx,0x1
c000fa90:	eb 0b                	jmp    c000fa9d <Reg::readInt(char*, char*, int*)+0x4d>
c000fa92:	ba 01 00 00 00       	mov    edx,0x1
c000fa97:	eb 02                	jmp    c000fa9b <Reg::readInt(char*, char*, int*)+0x4b>
c000fa99:	31 d2                	xor    edx,edx
c000fa9b:	31 c0                	xor    eax,eax
c000fa9d:	be 0a 00 00 00       	mov    esi,0xa
c000faa2:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c000faa7:	75 20                	jne    c000fac9 <Reg::readInt(char*, char*, int*)+0x79>
c000faa9:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c000faad:	80 f9 78             	cmp    cl,0x78
c000fab0:	75 0a                	jne    c000fabc <Reg::readInt(char*, char*, int*)+0x6c>
c000fab2:	83 c2 02             	add    edx,0x2
c000fab5:	be 10 00 00 00       	mov    esi,0x10
c000faba:	eb 0d                	jmp    c000fac9 <Reg::readInt(char*, char*, int*)+0x79>
c000fabc:	80 f9 62             	cmp    cl,0x62
c000fabf:	75 08                	jne    c000fac9 <Reg::readInt(char*, char*, int*)+0x79>
c000fac1:	83 c2 02             	add    edx,0x2
c000fac4:	be 02 00 00 00       	mov    esi,0x2
c000fac9:	01 d7                	add    edi,edx
c000facb:	31 d2                	xor    edx,edx
c000facd:	8a 1f                	mov    bl,BYTE PTR [edi]
c000facf:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c000fad3:	80 fb 0d             	cmp    bl,0xd
c000fad6:	0f 94 c3             	sete   bl
c000fad9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000fade:	0f 94 c1             	sete   cl
c000fae1:	08 cb                	or     bl,cl
c000fae3:	75 3a                	jne    c000fb1f <Reg::readInt(char*, char*, int*)+0xcf>
c000fae5:	0f af d6             	imul   edx,esi
c000fae8:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c000faed:	83 fe 10             	cmp    esi,0x10
c000faf0:	75 26                	jne    c000fb18 <Reg::readInt(char*, char*, int*)+0xc8>
c000faf2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000faf6:	8d 69 bf             	lea    ebp,[ecx-0x41]
c000faf9:	89 e9                	mov    ecx,ebp
c000fafb:	80 f9 05             	cmp    cl,0x5
c000fafe:	77 06                	ja     c000fb06 <Reg::readInt(char*, char*, int*)+0xb6>
c000fb00:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c000fb04:	eb 16                	jmp    c000fb1c <Reg::readInt(char*, char*, int*)+0xcc>
c000fb06:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000fb0a:	83 e9 61             	sub    ecx,0x61
c000fb0d:	80 f9 05             	cmp    cl,0x5
c000fb10:	77 06                	ja     c000fb18 <Reg::readInt(char*, char*, int*)+0xc8>
c000fb12:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c000fb16:	eb 04                	jmp    c000fb1c <Reg::readInt(char*, char*, int*)+0xcc>
c000fb18:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c000fb1c:	47                   	inc    edi
c000fb1d:	eb ae                	jmp    c000facd <Reg::readInt(char*, char*, int*)+0x7d>
c000fb1f:	84 c0                	test   al,al
c000fb21:	74 02                	je     c000fb25 <Reg::readInt(char*, char*, int*)+0xd5>
c000fb23:	f7 da                	neg    edx
c000fb25:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c000fb2c:	89 10                	mov    DWORD PTR [eax],edx
c000fb2e:	88 d8                	mov    al,bl
c000fb30:	81 c4 ec 00 00 00    	add    esp,0xec
c000fb36:	5b                   	pop    ebx
c000fb37:	5e                   	pop    esi
c000fb38:	5f                   	pop    edi
c000fb39:	5d                   	pop    ebp
c000fb3a:	c3                   	ret    

c000fb3b <Reg::readString(char*, char*, char*, int)>:
c000fb3b:	57                   	push   edi
c000fb3c:	56                   	push   esi
c000fb3d:	53                   	push   ebx
c000fb3e:	81 ec d4 00 00 00    	sub    esp,0xd4
c000fb44:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c000fb4b:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000fb4f:	57                   	push   edi
c000fb50:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c000fb57:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c000fb5e:	e8 b6 fe ff ff       	call   c000fa19 <Reg::getLine(char*, char*, char*)>
c000fb63:	83 c4 10             	add    esp,0x10
c000fb66:	89 c6                	mov    esi,eax
c000fb68:	84 c0                	test   al,al
c000fb6a:	74 44                	je     c000fbb0 <Reg::readString(char*, char*, char*, int)+0x75>
c000fb6c:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c000fb73:	31 c0                	xor    eax,eax
c000fb75:	4a                   	dec    edx
c000fb76:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c000fb79:	84 c9                	test   cl,cl
c000fb7b:	74 0f                	je     c000fb8c <Reg::readString(char*, char*, char*, int)+0x51>
c000fb7d:	39 c2                	cmp    edx,eax
c000fb7f:	7e 0b                	jle    c000fb8c <Reg::readString(char*, char*, char*, int)+0x51>
c000fb81:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000fb84:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c000fb89:	40                   	inc    eax
c000fb8a:	eb ea                	jmp    c000fb76 <Reg::readString(char*, char*, char*, int)+0x3b>
c000fb8c:	83 ec 0c             	sub    esp,0xc
c000fb8f:	53                   	push   ebx
c000fb90:	e8 2f 09 ff ff       	call   c00004c4 <strlen>
c000fb95:	83 c4 10             	add    esp,0x10
c000fb98:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c000fb9d:	75 11                	jne    c000fbb0 <Reg::readString(char*, char*, char*, int)+0x75>
c000fb9f:	83 ec 0c             	sub    esp,0xc
c000fba2:	53                   	push   ebx
c000fba3:	e8 1c 09 ff ff       	call   c00004c4 <strlen>
c000fba8:	83 c4 10             	add    esp,0x10
c000fbab:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000fbb0:	81 c4 d0 00 00 00    	add    esp,0xd0
c000fbb6:	89 f0                	mov    eax,esi
c000fbb8:	5b                   	pop    ebx
c000fbb9:	5e                   	pop    esi
c000fbba:	5f                   	pop    edi
c000fbbb:	c3                   	ret    

c000fbbc <Reg::readBool(char*, char*, bool*)>:
c000fbbc:	83 ec 20             	sub    esp,0x20
c000fbbf:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fbc3:	50                   	push   eax
c000fbc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fbc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fbcc:	e8 7f fe ff ff       	call   c000fa50 <Reg::readInt(char*, char*, int*)>
c000fbd1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000fbd6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fbda:	0f 95 02             	setne  BYTE PTR [edx]
c000fbdd:	83 c4 2c             	add    esp,0x2c
c000fbe0:	c3                   	ret    

c000fbe1 <Reg::readBoolWithDefault(char*, char*, bool)>:
c000fbe1:	53                   	push   ebx
c000fbe2:	83 ec 1c             	sub    esp,0x1c
c000fbe5:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c000fbe9:	8d 44 24 13          	lea    eax,[esp+0x13]
c000fbed:	50                   	push   eax
c000fbee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fbf2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fbf6:	e8 c1 ff ff ff       	call   c000fbbc <Reg::readBool(char*, char*, bool*)>
c000fbfb:	83 c4 10             	add    esp,0x10
c000fbfe:	84 c0                	test   al,al
c000fc00:	74 04                	je     c000fc06 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c000fc02:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c000fc06:	88 d8                	mov    al,bl
c000fc08:	83 c4 18             	add    esp,0x18
c000fc0b:	5b                   	pop    ebx
c000fc0c:	c3                   	ret    

c000fc0d <Reg::readIntWithDefault(char*, char*, int)>:
c000fc0d:	53                   	push   ebx
c000fc0e:	83 ec 1c             	sub    esp,0x1c
c000fc11:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fc15:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fc19:	50                   	push   eax
c000fc1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc22:	e8 29 fe ff ff       	call   c000fa50 <Reg::readInt(char*, char*, int*)>
c000fc27:	83 c4 10             	add    esp,0x10
c000fc2a:	84 c0                	test   al,al
c000fc2c:	74 04                	je     c000fc32 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c000fc2e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fc32:	89 d8                	mov    eax,ebx
c000fc34:	83 c4 18             	add    esp,0x18
c000fc37:	5b                   	pop    ebx
c000fc38:	c3                   	ret    

c000fc39 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c000fc39:	57                   	push   edi
c000fc3a:	56                   	push   esi
c000fc3b:	56                   	push   esi
c000fc3c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fc40:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000fc44:	56                   	push   esi
c000fc45:	57                   	push   edi
c000fc46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc4e:	e8 e8 fe ff ff       	call   c000fb3b <Reg::readString(char*, char*, char*, int)>
c000fc53:	83 c4 10             	add    esp,0x10
c000fc56:	84 c0                	test   al,al
c000fc58:	75 1a                	jne    c000fc74 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c000fc5a:	51                   	push   ecx
c000fc5b:	56                   	push   esi
c000fc5c:	6a 00                	push   0x0
c000fc5e:	57                   	push   edi
c000fc5f:	e8 44 08 ff ff       	call   c00004a8 <memset>
c000fc64:	8d 4e ff             	lea    ecx,[esi-0x1]
c000fc67:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000fc6b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc6d:	83 c4 10             	add    esp,0x10
c000fc70:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000fc74:	89 f8                	mov    eax,edi
c000fc76:	5a                   	pop    edx
c000fc77:	5e                   	pop    esi
c000fc78:	5f                   	pop    edi
c000fc79:	c3                   	ret    

c000fc7a <Sys::eject(regs*)>:
c000fc7a:	83 ec 0c             	sub    esp,0xc
c000fc7d:	83 ca ff             	or     edx,0xffffffff
c000fc80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc84:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c000fc87:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000fc8c:	83 e9 41             	sub    ecx,0x41
c000fc8f:	83 f9 19             	cmp    ecx,0x19
c000fc92:	77 18                	ja     c000fcac <Sys::eject(regs*)+0x32>
c000fc94:	8b 0c 8d e0 28 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd720]
c000fc9b:	85 c9                	test   ecx,ecx
c000fc9d:	74 0d                	je     c000fcac <Sys::eject(regs*)+0x32>
c000fc9f:	83 ec 0c             	sub    esp,0xc
c000fca2:	51                   	push   ecx
c000fca3:	e8 64 c0 ff ff       	call   c000bd0c <LogicalDisk::eject()>
c000fca8:	83 c4 10             	add    esp,0x10
c000fcab:	99                   	cdq    
c000fcac:	83 c4 0c             	add    esp,0xc
c000fcaf:	c3                   	ret    

c000fcb0 <Sys::exit(regs*)>:
c000fcb0:	83 ec 18             	sub    esp,0x18
c000fcb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fcb7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000fcba:	e8 85 34 00 00       	call   c0013144 <terminateTask(int)>
c000fcbf:	83 c8 ff             	or     eax,0xffffffff
c000fcc2:	83 c4 1c             	add    esp,0x1c
c000fcc5:	89 c2                	mov    edx,eax
c000fcc7:	c3                   	ret    

c000fcc8 <Sys::getCwd(regs*)>:
c000fcc8:	83 ec 10             	sub    esp,0x10
c000fccb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fccf:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000fcd2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000fcd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fcda:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c000fcdd:	e8 5e 9d ff ff       	call   c0009a40 <Fs::getcwd(Process*, char*, int)>
c000fce2:	83 c4 1c             	add    esp,0x1c
c000fce5:	99                   	cdq    
c000fce6:	c3                   	ret    

c000fce7 <Sys::getPID(regs*)>:
c000fce7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fcec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fcef:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcf1:	99                   	cdq    
c000fcf2:	c3                   	ret    

c000fcf3 <Sys::getRAMData(regs*)>:
c000fcf3:	8b 0d 98 03 02 c0    	mov    ecx,DWORD PTR ds:0xc0020398
c000fcf9:	69 05 94 03 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0020394,0xc8
c000fd03:	99                   	cdq    
c000fd04:	f7 f9                	idiv   ecx
c000fd06:	c1 e0 18             	shl    eax,0x18
c000fd09:	09 c8                	or     eax,ecx
c000fd0b:	99                   	cdq    
c000fd0c:	c3                   	ret    

c000fd0d <Sys::getVGAPtr(regs*)>:
c000fd0d:	55                   	push   ebp
c000fd0e:	57                   	push   edi
c000fd0f:	56                   	push   esi
c000fd10:	53                   	push   ebx
c000fd11:	83 ec 18             	sub    esp,0x18
c000fd14:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fd18:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000fd1b:	e8 28 2f 00 00       	call   c0012c48 <Thr::processFromPID(int)>
c000fd20:	83 c4 10             	add    esp,0x10
c000fd23:	89 c1                	mov    ecx,eax
c000fd25:	b8 01 00 00 00       	mov    eax,0x1
c000fd2a:	85 c9                	test   ecx,ecx
c000fd2c:	74 57                	je     c000fd85 <Sys::getVGAPtr(regs*)+0x78>
c000fd2e:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c000fd34:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000fd38:	74 0c                	je     c000fd46 <Sys::getVGAPtr(regs*)+0x39>
c000fd3a:	83 ec 0c             	sub    esp,0xc
c000fd3d:	55                   	push   ebp
c000fd3e:	e8 26 79 ff ff       	call   c0007669 <setActiveTerminal(VgaText*)>
c000fd43:	83 c4 10             	add    esp,0x10
c000fd46:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c000fd49:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c000fd4c:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c000fd51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd53:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fd56:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000fd59:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c000fd5f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000fd62:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000fd65:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c000fd6b:	50                   	push   eax
c000fd6c:	50                   	push   eax
c000fd6d:	68 a3 ec 01 c0       	push   0xc001eca3
c000fd72:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000fd75:	05 a8 0f 00 00       	add    eax,0xfa8
c000fd7a:	50                   	push   eax
c000fd7b:	e8 e4 07 ff ff       	call   c0000564 <strcpy>
c000fd80:	83 c4 10             	add    esp,0x10
c000fd83:	31 c0                	xor    eax,eax
c000fd85:	83 c4 0c             	add    esp,0xc
c000fd88:	31 d2                	xor    edx,edx
c000fd8a:	5b                   	pop    ebx
c000fd8b:	5e                   	pop    esi
c000fd8c:	5f                   	pop    edi
c000fd8d:	5d                   	pop    ebp
c000fd8e:	c3                   	ret    

c000fd8f <Sys::loadDLL(regs*)>:
c000fd8f:	56                   	push   esi
c000fd90:	53                   	push   ebx
c000fd91:	31 d2                	xor    edx,edx
c000fd93:	51                   	push   ecx
c000fd94:	b8 01 00 00 00       	mov    eax,0x1
c000fd99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fd9d:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000fda1:	0f 84 8c 00 00 00    	je     c000fe33 <Sys::loadDLL(regs*)+0xa4>
c000fda7:	83 ec 0c             	sub    esp,0xc
c000fdaa:	68 14 01 00 00       	push   0x114
c000fdaf:	e8 95 6b ff ff       	call   c0006949 <malloc>
c000fdb4:	83 c4 0c             	add    esp,0xc
c000fdb7:	89 c3                	mov    ebx,eax
c000fdb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fdbe:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c000fdc1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000fdc4:	53                   	push   ebx
c000fdc5:	e8 74 9e ff ff       	call   c0009c3e <File::File(char const*, Process*)>
c000fdca:	83 c4 10             	add    esp,0x10
c000fdcd:	31 d2                	xor    edx,edx
c000fdcf:	b8 02 00 00 00       	mov    eax,0x2
c000fdd4:	85 db                	test   ebx,ebx
c000fdd6:	74 5b                	je     c000fe33 <Sys::loadDLL(regs*)+0xa4>
c000fdd8:	83 ec 0c             	sub    esp,0xc
c000fddb:	53                   	push   ebx
c000fddc:	e8 85 a1 ff ff       	call   c0009f66 <File::exists()>
c000fde1:	83 c4 10             	add    esp,0x10
c000fde4:	84 c0                	test   al,al
c000fde6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fde8:	75 11                	jne    c000fdfb <Sys::loadDLL(regs*)+0x6c>
c000fdea:	83 ec 0c             	sub    esp,0xc
c000fded:	53                   	push   ebx
c000fdee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fdf1:	83 c4 10             	add    esp,0x10
c000fdf4:	b8 03 00 00 00       	mov    eax,0x3
c000fdf9:	eb 36                	jmp    c000fe31 <Sys::loadDLL(regs*)+0xa2>
c000fdfb:	83 ec 0c             	sub    esp,0xc
c000fdfe:	53                   	push   ebx
c000fdff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fe02:	58                   	pop    eax
c000fe03:	5a                   	pop    edx
c000fe04:	6a 00                	push   0x0
c000fe06:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000fe09:	e8 40 20 00 00       	call   c0011e4e <Thr::loadDLL(char const*, bool)>
c000fe0e:	83 c4 10             	add    esp,0x10
c000fe11:	89 c1                	mov    ecx,eax
c000fe13:	31 d2                	xor    edx,edx
c000fe15:	b8 04 00 00 00       	mov    eax,0x4
c000fe1a:	85 c9                	test   ecx,ecx
c000fe1c:	74 15                	je     c000fe33 <Sys::loadDLL(regs*)+0xa4>
c000fe1e:	53                   	push   ebx
c000fe1f:	53                   	push   ebx
c000fe20:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c000fe26:	51                   	push   ecx
c000fe27:	e8 53 22 00 00       	call   c001207f <Thr::executeDLL(unsigned long, void*)>
c000fe2c:	83 c4 10             	add    esp,0x10
c000fe2f:	31 c0                	xor    eax,eax
c000fe31:	31 d2                	xor    edx,edx
c000fe33:	59                   	pop    ecx
c000fe34:	5b                   	pop    ebx
c000fe35:	5e                   	pop    esi
c000fe36:	c3                   	ret    

c000fe37 <Sys::read(regs*)>:
c000fe37:	57                   	push   edi
c000fe38:	56                   	push   esi
c000fe39:	53                   	push   ebx
c000fe3a:	83 ec 10             	sub    esp,0x10
c000fe3d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fe41:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000fe44:	83 f8 02             	cmp    eax,0x2
c000fe47:	77 10                	ja     c000fe59 <Sys::read(regs*)+0x22>
c000fe49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fe4e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fe51:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c000fe57:	eb 0e                	jmp    c000fe67 <Sys::read(regs*)+0x30>
c000fe59:	83 ec 0c             	sub    esp,0xc
c000fe5c:	50                   	push   eax
c000fe5d:	e8 b9 84 ff ff       	call   c000831b <getFromFileDescriptor(int)>
c000fe62:	83 c4 10             	add    esp,0x10
c000fe65:	89 c1                	mov    ecx,eax
c000fe67:	83 c8 ff             	or     eax,0xffffffff
c000fe6a:	85 c9                	test   ecx,ecx
c000fe6c:	89 c2                	mov    edx,eax
c000fe6e:	74 28                	je     c000fe98 <Sys::read(regs*)+0x61>
c000fe70:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fe78:	31 ff                	xor    edi,edi
c000fe7a:	83 ec 0c             	sub    esp,0xc
c000fe7d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fe7f:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fe83:	52                   	push   edx
c000fe84:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000fe87:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c000fe8a:	57                   	push   edi
c000fe8b:	56                   	push   esi
c000fe8c:	51                   	push   ecx
c000fe8d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fe90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000fe94:	83 c4 20             	add    esp,0x20
c000fe97:	99                   	cdq    
c000fe98:	83 c4 10             	add    esp,0x10
c000fe9b:	5b                   	pop    ebx
c000fe9c:	5e                   	pop    esi
c000fe9d:	5f                   	pop    edi
c000fe9e:	c3                   	ret    

c000fe9f <Sys::sbrk(regs*)>:
c000fe9f:	56                   	push   esi
c000fea0:	53                   	push   ebx
c000fea1:	50                   	push   eax
c000fea2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fea7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000feab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000feae:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c000feb1:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c000feb7:	85 db                	test   ebx,ebx
c000feb9:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c000febc:	74 02                	je     c000fec0 <Sys::sbrk(regs*)+0x21>
c000febe:	79 06                	jns    c000fec6 <Sys::sbrk(regs*)+0x27>
c000fec0:	89 f0                	mov    eax,esi
c000fec2:	31 d2                	xor    edx,edx
c000fec4:	eb 2a                	jmp    c000fef0 <Sys::sbrk(regs*)+0x51>
c000fec6:	83 c8 ff             	or     eax,0xffffffff
c000fec9:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c000fecf:	89 c2                	mov    edx,eax
c000fed1:	77 1d                	ja     c000fef0 <Sys::sbrk(regs*)+0x51>
c000fed3:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c000fed9:	50                   	push   eax
c000feda:	c1 ea 0c             	shr    edx,0xc
c000fedd:	68 07 0c 00 00       	push   0xc07
c000fee2:	52                   	push   edx
c000fee3:	51                   	push   ecx
c000fee4:	e8 df 8c ff ff       	call   c0008bc8 <VAS::allocatePages(int, int)>
c000fee9:	89 f0                	mov    eax,esi
c000feeb:	31 d2                	xor    edx,edx
c000feed:	83 c4 10             	add    esp,0x10
c000fef0:	59                   	pop    ecx
c000fef1:	5b                   	pop    ebx
c000fef2:	5e                   	pop    esi
c000fef3:	c3                   	ret    

c000fef4 <Sys::setCwd(regs*)>:
c000fef4:	83 ec 14             	sub    esp,0x14
c000fef7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fefb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000fefe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff03:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c000ff06:	e8 fa a0 ff ff       	call   c000a005 <Fs::setcwd(Process*, char*)>
c000ff0b:	83 c4 1c             	add    esp,0x1c
c000ff0e:	99                   	cdq    
c000ff0f:	c3                   	ret    

c000ff10 <Sys::setTime(regs*)>:
c000ff10:	55                   	push   ebp
c000ff11:	31 c9                	xor    ecx,ecx
c000ff13:	57                   	push   edi
c000ff14:	bd 0c 00 00 00       	mov    ebp,0xc
c000ff19:	56                   	push   esi
c000ff1a:	53                   	push   ebx
c000ff1b:	31 db                	xor    ebx,ebx
c000ff1d:	83 ec 10             	sub    esp,0x10
c000ff20:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ff24:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c000ff27:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000ff2a:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c000ff2d:	89 c2                	mov    edx,eax
c000ff2f:	66 81 ef 6c 07       	sub    di,0x76c
c000ff34:	83 e2 1f             	and    edx,0x1f
c000ff37:	c1 e7 10             	shl    edi,0x10
c000ff3a:	42                   	inc    edx
c000ff3b:	c1 e8 05             	shr    eax,0x5
c000ff3e:	88 d1                	mov    cl,dl
c000ff40:	31 d2                	xor    edx,edx
c000ff42:	f7 f5                	div    ebp
c000ff44:	89 dd                	mov    ebp,ebx
c000ff46:	88 d5                	mov    ch,dl
c000ff48:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c000ff4e:	0f b7 c1             	movzx  eax,cx
c000ff51:	31 d2                	xor    edx,edx
c000ff53:	09 f8                	or     eax,edi
c000ff55:	bf 3c 00 00 00       	mov    edi,0x3c
c000ff5a:	89 c1                	mov    ecx,eax
c000ff5c:	89 f0                	mov    eax,esi
c000ff5e:	f7 f7                	div    edi
c000ff60:	c1 e2 10             	shl    edx,0x10
c000ff63:	09 d5                	or     ebp,edx
c000ff65:	31 d2                	xor    edx,edx
c000ff67:	89 eb                	mov    ebx,ebp
c000ff69:	f7 f7                	div    edi
c000ff6b:	bf 10 0e 00 00       	mov    edi,0xe10
c000ff70:	88 d7                	mov    bh,dl
c000ff72:	89 f0                	mov    eax,esi
c000ff74:	31 d2                	xor    edx,edx
c000ff76:	f7 f7                	div    edi
c000ff78:	bf 18 00 00 00       	mov    edi,0x18
c000ff7d:	31 d2                	xor    edx,edx
c000ff7f:	f7 f7                	div    edi
c000ff81:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c000ff86:	88 d3                	mov    bl,dl
c000ff88:	53                   	push   ebx
c000ff89:	51                   	push   ecx
c000ff8a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000ff90:	e8 75 a8 ff ff       	call   c000a80a <Clock::setTimeInDatetimeLocal(datetime_t)>
c000ff95:	83 c4 1c             	add    esp,0x1c
c000ff98:	83 f0 01             	xor    eax,0x1
c000ff9b:	5b                   	pop    ebx
c000ff9c:	0f b6 c0             	movzx  eax,al
c000ff9f:	5e                   	pop    esi
c000ffa0:	31 d2                	xor    edx,edx
c000ffa2:	5f                   	pop    edi
c000ffa3:	5d                   	pop    ebp
c000ffa4:	c3                   	ret    

c000ffa5 <Sys::timezone(regs*)>:
c000ffa5:	53                   	push   ebx
c000ffa6:	83 ec 08             	sub    esp,0x8
c000ffa9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffad:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c000ffb1:	75 17                	jne    c000ffca <Sys::timezone(regs*)+0x25>
c000ffb3:	83 ec 0c             	sub    esp,0xc
c000ffb6:	68 ad ec 01 c0       	push   0xc001ecad
c000ffbb:	e8 13 97 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c000ffc0:	83 c8 ff             	or     eax,0xffffffff
c000ffc3:	83 c4 10             	add    esp,0x10
c000ffc6:	89 c2                	mov    edx,eax
c000ffc8:	eb 20                	jmp    c000ffea <Sys::timezone(regs*)+0x45>
c000ffca:	83 ec 0c             	sub    esp,0xc
c000ffcd:	68 c2 ec 01 c0       	push   0xc001ecc2
c000ffd2:	e8 fc 96 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c000ffd7:	58                   	pop    eax
c000ffd8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000ffdb:	e8 8c a5 ff ff       	call   c000a56c <User::loadClockSettings(int)>
c000ffe0:	83 c4 10             	add    esp,0x10
c000ffe3:	b8 01 00 00 00       	mov    eax,0x1
c000ffe8:	31 d2                	xor    edx,edx
c000ffea:	83 c4 08             	add    esp,0x8
c000ffed:	5b                   	pop    ebx
c000ffee:	c3                   	ret    

c000ffef <Sys::write(regs*)>:
c000ffef:	57                   	push   edi
c000fff0:	56                   	push   esi
c000fff1:	53                   	push   ebx
c000fff2:	83 ec 10             	sub    esp,0x10
c000fff5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fff9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000fffc:	83 f8 02             	cmp    eax,0x2
c000ffff:	77 10                	ja     c0010011 <Sys::write(regs*)+0x22>
c0010001:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010006:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010009:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001000f:	eb 0e                	jmp    c001001f <Sys::write(regs*)+0x30>
c0010011:	83 ec 0c             	sub    esp,0xc
c0010014:	50                   	push   eax
c0010015:	e8 01 83 ff ff       	call   c000831b <getFromFileDescriptor(int)>
c001001a:	83 c4 10             	add    esp,0x10
c001001d:	89 c1                	mov    ecx,eax
c001001f:	83 c8 ff             	or     eax,0xffffffff
c0010022:	85 c9                	test   ecx,ecx
c0010024:	89 c2                	mov    edx,eax
c0010026:	74 28                	je     c0010050 <Sys::write(regs*)+0x61>
c0010028:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010030:	31 ff                	xor    edi,edi
c0010032:	83 ec 0c             	sub    esp,0xc
c0010035:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010037:	8d 54 24 18          	lea    edx,[esp+0x18]
c001003b:	52                   	push   edx
c001003c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001003f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0010042:	57                   	push   edi
c0010043:	56                   	push   esi
c0010044:	51                   	push   ecx
c0010045:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0010048:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001004c:	83 c4 20             	add    esp,0x20
c001004f:	99                   	cdq    
c0010050:	83 c4 10             	add    esp,0x10
c0010053:	5b                   	pop    ebx
c0010054:	5e                   	pop    esi
c0010055:	5f                   	pop    edi
c0010056:	c3                   	ret    

c0010057 <Sys::wsbe(regs*)>:
c0010057:	57                   	push   edi
c0010058:	b9 0b 00 00 00       	mov    ecx,0xb
c001005d:	56                   	push   esi
c001005e:	be 01 ed 01 c0       	mov    esi,0xc001ed01
c0010063:	53                   	push   ebx
c0010064:	83 ec 30             	sub    esp,0x30
c0010067:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001006b:	fc                   	cld    
c001006c:	83 ec 0c             	sub    esp,0xc
c001006f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010071:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0010075:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001007a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001007d:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0010083:	8b 06                	mov    eax,DWORD PTR [esi]
c0010085:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0010088:	57                   	push   edi
c0010089:	e8 36 04 ff ff       	call   c00004c4 <strlen>
c001008e:	5a                   	pop    edx
c001008f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0010093:	52                   	push   edx
c0010094:	31 d2                	xor    edx,edx
c0010096:	57                   	push   edi
c0010097:	52                   	push   edx
c0010098:	50                   	push   eax
c0010099:	56                   	push   esi
c001009a:	ff d3                	call   ebx
c001009c:	83 c4 14             	add    esp,0x14
c001009f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00100a3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00100a6:	e8 99 30 00 00       	call   c0013144 <terminateTask(int)>
c00100ab:	83 c4 40             	add    esp,0x40
c00100ae:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00100b3:	5b                   	pop    ebx
c00100b4:	31 d2                	xor    edx,edx
c00100b6:	5e                   	pop    esi
c00100b7:	5f                   	pop    edi
c00100b8:	c3                   	ret    

c00100b9 <Sys::yield(regs*)>:
c00100b9:	83 ec 0c             	sub    esp,0xc
c00100bc:	fa                   	cli    
c00100bd:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c00100c3:	e8 64 27 00 00       	call   c001282c <schedule()>
c00100c8:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00100cd:	48                   	dec    eax
c00100ce:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c00100d3:	75 01                	jne    c00100d6 <Sys::yield(regs*)+0x1d>
c00100d5:	fb                   	sti    
c00100d6:	31 c0                	xor    eax,eax
c00100d8:	31 d2                	xor    edx,edx
c00100da:	83 c4 0c             	add    esp,0xc
c00100dd:	c3                   	ret    

c00100de <sysCallSeekDir(regs*)>:
c00100de:	31 c0                	xor    eax,eax
c00100e0:	31 d2                	xor    edx,edx
c00100e2:	c3                   	ret    

c00100e3 <sysCallTellDir(regs*)>:
c00100e3:	31 c0                	xor    eax,eax
c00100e5:	31 d2                	xor    edx,edx
c00100e7:	c3                   	ret    

c00100e8 <sysCallVerify(regs*)>:
c00100e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100ec:	31 d2                	xor    edx,edx
c00100ee:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00100f1:	c3                   	ret    

c00100f2 <sysCallGetArgc(regs*)>:
c00100f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00100f7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00100fa:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010100:	99                   	cdq    
c0010101:	c3                   	ret    

c0010102 <sysCallTTYName(regs*)>:
c0010102:	b8 01 00 00 00       	mov    eax,0x1
c0010107:	31 d2                	xor    edx,edx
c0010109:	c3                   	ret    

c001010a <sysFormatDisk(regs*)>:
c001010a:	56                   	push   esi
c001010b:	53                   	push   ebx
c001010c:	53                   	push   ebx
c001010d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010111:	8b 1d 58 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020458
c0010117:	eb 25                	jmp    c001013e <sysFormatDisk(regs*)+0x34>
c0010119:	83 ec 0c             	sub    esp,0xc
c001011c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001011f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010121:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0010124:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0010127:	50                   	push   eax
c0010128:	ff 34 85 e0 28 02 c0 	push   DWORD PTR [eax*4-0x3ffdd720]
c001012f:	53                   	push   ebx
c0010130:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010133:	83 c4 20             	add    esp,0x20
c0010136:	83 f8 08             	cmp    eax,0x8
c0010139:	75 12                	jne    c001014d <sysFormatDisk(regs*)+0x43>
c001013b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001013e:	85 db                	test   ebx,ebx
c0010140:	75 d7                	jne    c0010119 <sysFormatDisk(regs*)+0xf>
c0010142:	59                   	pop    ecx
c0010143:	b8 03 00 00 00       	mov    eax,0x3
c0010148:	31 d2                	xor    edx,edx
c001014a:	5b                   	pop    ebx
c001014b:	5e                   	pop    esi
c001014c:	c3                   	ret    
c001014d:	85 c0                	test   eax,eax
c001014f:	74 1b                	je     c001016c <sysFormatDisk(regs*)+0x62>
c0010151:	83 f8 09             	cmp    eax,0x9
c0010154:	74 0b                	je     c0010161 <sysFormatDisk(regs*)+0x57>
c0010156:	59                   	pop    ecx
c0010157:	b8 02 00 00 00       	mov    eax,0x2
c001015c:	31 d2                	xor    edx,edx
c001015e:	5b                   	pop    ebx
c001015f:	5e                   	pop    esi
c0010160:	c3                   	ret    
c0010161:	59                   	pop    ecx
c0010162:	b8 01 00 00 00       	mov    eax,0x1
c0010167:	31 d2                	xor    edx,edx
c0010169:	5b                   	pop    ebx
c001016a:	5e                   	pop    esi
c001016b:	c3                   	ret    
c001016c:	59                   	pop    ecx
c001016d:	31 c0                	xor    eax,eax
c001016f:	31 d2                	xor    edx,edx
c0010171:	5b                   	pop    ebx
c0010172:	5e                   	pop    esi
c0010173:	c3                   	ret    

c0010174 <sysSetDiskVolumeLabel(regs*)>:
c0010174:	56                   	push   esi
c0010175:	53                   	push   ebx
c0010176:	53                   	push   ebx
c0010177:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001017b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001017e:	83 f8 19             	cmp    eax,0x19
c0010181:	77 2d                	ja     c00101b0 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0010183:	8b 0c 85 e0 28 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd720]
c001018a:	85 c9                	test   ecx,ecx
c001018c:	74 22                	je     c00101b0 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001018e:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010191:	85 db                	test   ebx,ebx
c0010193:	74 1b                	je     c00101b0 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0010195:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c001019b:	85 d2                	test   edx,edx
c001019d:	74 11                	je     c00101b0 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001019f:	8b 32                	mov    esi,DWORD PTR [edx]
c00101a1:	53                   	push   ebx
c00101a2:	50                   	push   eax
c00101a3:	51                   	push   ecx
c00101a4:	52                   	push   edx
c00101a5:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00101a8:	83 c4 10             	add    esp,0x10
c00101ab:	99                   	cdq    
c00101ac:	59                   	pop    ecx
c00101ad:	5b                   	pop    ebx
c00101ae:	5e                   	pop    esi
c00101af:	c3                   	ret    
c00101b0:	59                   	pop    ecx
c00101b1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00101b6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00101bb:	5b                   	pop    ebx
c00101bc:	5e                   	pop    esi
c00101bd:	c3                   	ret    

c00101be <sysGetDiskVolumeLabel(regs*)>:
c00101be:	57                   	push   edi
c00101bf:	56                   	push   esi
c00101c0:	53                   	push   ebx
c00101c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101c5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00101c8:	83 fa 19             	cmp    edx,0x19
c00101cb:	77 38                	ja     c0010205 <sysGetDiskVolumeLabel(regs*)+0x47>
c00101cd:	8b 0c 95 e0 28 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdd720]
c00101d4:	85 c9                	test   ecx,ecx
c00101d6:	74 2d                	je     c0010205 <sysGetDiskVolumeLabel(regs*)+0x47>
c00101d8:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00101db:	85 db                	test   ebx,ebx
c00101dd:	74 26                	je     c0010205 <sysGetDiskVolumeLabel(regs*)+0x47>
c00101df:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00101e2:	85 f6                	test   esi,esi
c00101e4:	74 1f                	je     c0010205 <sysGetDiskVolumeLabel(regs*)+0x47>
c00101e6:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00101ec:	85 c0                	test   eax,eax
c00101ee:	74 15                	je     c0010205 <sysGetDiskVolumeLabel(regs*)+0x47>
c00101f0:	83 ec 0c             	sub    esp,0xc
c00101f3:	8b 38                	mov    edi,DWORD PTR [eax]
c00101f5:	56                   	push   esi
c00101f6:	53                   	push   ebx
c00101f7:	52                   	push   edx
c00101f8:	51                   	push   ecx
c00101f9:	50                   	push   eax
c00101fa:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00101fd:	83 c4 20             	add    esp,0x20
c0010200:	99                   	cdq    
c0010201:	5b                   	pop    ebx
c0010202:	5e                   	pop    esi
c0010203:	5f                   	pop    edi
c0010204:	c3                   	ret    
c0010205:	5b                   	pop    ebx
c0010206:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001020b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010210:	5e                   	pop    esi
c0010211:	5f                   	pop    edi
c0010212:	c3                   	ret    

c0010213 <sysShutdown(regs*)>:
c0010213:	83 ec 0c             	sub    esp,0xc
c0010216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001021a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001021d:	85 c0                	test   eax,eax
c001021f:	74 18                	je     c0010239 <sysShutdown(regs*)+0x26>
c0010221:	83 f8 01             	cmp    eax,0x1
c0010224:	74 38                	je     c001025e <sysShutdown(regs*)+0x4b>
c0010226:	83 f8 02             	cmp    eax,0x2
c0010229:	74 24                	je     c001024f <sysShutdown(regs*)+0x3c>
c001022b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010230:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010235:	83 c4 0c             	add    esp,0xc
c0010238:	c3                   	ret    
c0010239:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c001023e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010240:	6a 00                	push   0x0
c0010242:	6a 00                	push   0x0
c0010244:	6a 00                	push   0x0
c0010246:	50                   	push   eax
c0010247:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001024a:	83 c4 10             	add    esp,0x10
c001024d:	eb dc                	jmp    c001022b <sysShutdown(regs*)+0x18>
c001024f:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c0010254:	8b 10                	mov    edx,DWORD PTR [eax]
c0010256:	6a 00                	push   0x0
c0010258:	6a 00                	push   0x0
c001025a:	6a 01                	push   0x1
c001025c:	eb e8                	jmp    c0010246 <sysShutdown(regs*)+0x33>
c001025e:	a1 60 29 02 c0       	mov    eax,ds:0xc0022960
c0010263:	85 c0                	test   eax,eax
c0010265:	74 02                	je     c0010269 <sysShutdown(regs*)+0x56>
c0010267:	ff d0                	call   eax
c0010269:	31 c0                	xor    eax,eax
c001026b:	31 d2                	xor    edx,edx
c001026d:	83 c4 0c             	add    esp,0xc
c0010270:	c3                   	ret    

c0010271 <sysCallRealpath(regs*)>:
c0010271:	83 ec 0c             	sub    esp,0xc
c0010274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010278:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001027b:	85 d2                	test   edx,edx
c001027d:	74 07                	je     c0010286 <sysCallRealpath(regs*)+0x15>
c001027f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010282:	85 c0                	test   eax,eax
c0010284:	75 0b                	jne    c0010291 <sysCallRealpath(regs*)+0x20>
c0010286:	b8 01 00 00 00       	mov    eax,0x1
c001028b:	31 d2                	xor    edx,edx
c001028d:	83 c4 0c             	add    esp,0xc
c0010290:	c3                   	ret    
c0010291:	51                   	push   ecx
c0010292:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010298:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001029b:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00102a1:	51                   	push   ecx
c00102a2:	52                   	push   edx
c00102a3:	50                   	push   eax
c00102a4:	e8 eb 97 ff ff       	call   c0009a94 <Fs::standardiseFiles(char*, char const*, char const*)>
c00102a9:	83 c4 10             	add    esp,0x10
c00102ac:	31 c0                	xor    eax,eax
c00102ae:	31 d2                	xor    edx,edx
c00102b0:	83 c4 0c             	add    esp,0xc
c00102b3:	c3                   	ret    

c00102b4 <sysCallReadDir(regs*)>:
c00102b4:	53                   	push   ebx
c00102b5:	83 ec 18             	sub    esp,0x18
c00102b8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00102bc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00102bf:	83 f8 02             	cmp    eax,0x2
c00102c2:	76 60                	jbe    c0010324 <sysCallReadDir(regs*)+0x70>
c00102c4:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00102cb:	77 48                	ja     c0010315 <sysCallReadDir(regs*)+0x61>
c00102cd:	83 ec 0c             	sub    esp,0xc
c00102d0:	50                   	push   eax
c00102d1:	e8 45 80 ff ff       	call   c000831b <getFromFileDescriptor(int)>
c00102d6:	83 c4 10             	add    esp,0x10
c00102d9:	85 c0                	test   eax,eax
c00102db:	74 38                	je     c0010315 <sysCallReadDir(regs*)+0x61>
c00102dd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102e5:	83 ec 0c             	sub    esp,0xc
c00102e8:	8b 10                	mov    edx,DWORD PTR [eax]
c00102ea:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00102ee:	51                   	push   ecx
c00102ef:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00102f2:	6a 00                	push   0x0
c00102f4:	68 10 01 00 00       	push   0x110
c00102f9:	50                   	push   eax
c00102fa:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00102fd:	83 c4 20             	add    esp,0x20
c0010300:	85 c0                	test   eax,eax
c0010302:	74 29                	je     c001032d <sysCallReadDir(regs*)+0x79>
c0010304:	83 f8 07             	cmp    eax,0x7
c0010307:	74 1b                	je     c0010324 <sysCallReadDir(regs*)+0x70>
c0010309:	b8 02 00 00 00       	mov    eax,0x2
c001030e:	31 d2                	xor    edx,edx
c0010310:	83 c4 18             	add    esp,0x18
c0010313:	5b                   	pop    ebx
c0010314:	c3                   	ret    
c0010315:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001031a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001031f:	83 c4 18             	add    esp,0x18
c0010322:	5b                   	pop    ebx
c0010323:	c3                   	ret    
c0010324:	b8 01 00 00 00       	mov    eax,0x1
c0010329:	31 d2                	xor    edx,edx
c001032b:	eb e3                	jmp    c0010310 <sysCallReadDir(regs*)+0x5c>
c001032d:	31 c0                	xor    eax,eax
c001032f:	31 d2                	xor    edx,edx
c0010331:	eb dd                	jmp    c0010310 <sysCallReadDir(regs*)+0x5c>

c0010333 <sysCallIsATTY(regs*)>:
c0010333:	83 ec 0c             	sub    esp,0xc
c0010336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001033a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001033d:	83 f8 02             	cmp    eax,0x2
c0010340:	76 07                	jbe    c0010349 <sysCallIsATTY(regs*)+0x16>
c0010342:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010347:	75 26                	jne    c001036f <sysCallIsATTY(regs*)+0x3c>
c0010349:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001034e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010351:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010357:	85 c0                	test   eax,eax
c0010359:	74 24                	je     c001037f <sysCallIsATTY(regs*)+0x4c>
c001035b:	83 ec 0c             	sub    esp,0xc
c001035e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010360:	50                   	push   eax
c0010361:	ff 12                	call   DWORD PTR [edx]
c0010363:	31 d2                	xor    edx,edx
c0010365:	0f b6 c0             	movzx  eax,al
c0010368:	83 c4 10             	add    esp,0x10
c001036b:	83 c4 0c             	add    esp,0xc
c001036e:	c3                   	ret    
c001036f:	83 ec 0c             	sub    esp,0xc
c0010372:	50                   	push   eax
c0010373:	e8 a3 7f ff ff       	call   c000831b <getFromFileDescriptor(int)>
c0010378:	83 c4 10             	add    esp,0x10
c001037b:	85 c0                	test   eax,eax
c001037d:	75 dc                	jne    c001035b <sysCallIsATTY(regs*)+0x28>
c001037f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010384:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010389:	83 c4 0c             	add    esp,0xc
c001038c:	c3                   	ret    

c001038d <sysCallSeek(regs*)>:
c001038d:	53                   	push   ebx
c001038e:	83 ec 08             	sub    esp,0x8
c0010391:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010395:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010398:	8d 50 fd             	lea    edx,[eax-0x3]
c001039b:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00103a1:	77 32                	ja     c00103d5 <sysCallSeek(regs*)+0x48>
c00103a3:	83 ec 0c             	sub    esp,0xc
c00103a6:	50                   	push   eax
c00103a7:	e8 6f 7f ff ff       	call   c000831b <getFromFileDescriptor(int)>
c00103ac:	83 c4 0c             	add    esp,0xc
c00103af:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00103b2:	31 db                	xor    ebx,ebx
c00103b4:	53                   	push   ebx
c00103b5:	51                   	push   ecx
c00103b6:	50                   	push   eax
c00103b7:	e8 fa 99 ff ff       	call   c0009db6 <File::seek(unsigned long long)>
c00103bc:	83 c4 10             	add    esp,0x10
c00103bf:	85 c0                	test   eax,eax
c00103c1:	0f 95 c0             	setne  al
c00103c4:	31 d2                	xor    edx,edx
c00103c6:	0f b6 c0             	movzx  eax,al
c00103c9:	f7 d8                	neg    eax
c00103cb:	83 d2 00             	adc    edx,0x0
c00103ce:	83 c4 08             	add    esp,0x8
c00103d1:	f7 da                	neg    edx
c00103d3:	5b                   	pop    ebx
c00103d4:	c3                   	ret    
c00103d5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00103da:	ba ff ff ff ff       	mov    edx,0xffffffff
c00103df:	83 c4 08             	add    esp,0x8
c00103e2:	5b                   	pop    ebx
c00103e3:	c3                   	ret    

c00103e4 <sysCallTell(regs*)>:
c00103e4:	53                   	push   ebx
c00103e5:	83 ec 08             	sub    esp,0x8
c00103e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103ec:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00103ef:	83 f8 02             	cmp    eax,0x2
c00103f2:	76 4d                	jbe    c0010441 <sysCallTell(regs*)+0x5d>
c00103f4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00103f9:	76 19                	jbe    c0010414 <sysCallTell(regs*)+0x30>
c00103fb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00103fe:	31 d2                	xor    edx,edx
c0010400:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010406:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001040d:	31 c0                	xor    eax,eax
c001040f:	83 c4 08             	add    esp,0x8
c0010412:	5b                   	pop    ebx
c0010413:	c3                   	ret    
c0010414:	83 ec 0c             	sub    esp,0xc
c0010417:	50                   	push   eax
c0010418:	e8 fe 7e ff ff       	call   c000831b <getFromFileDescriptor(int)>
c001041d:	5a                   	pop    edx
c001041e:	59                   	pop    ecx
c001041f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010422:	50                   	push   eax
c0010423:	e8 e4 99 ff ff       	call   c0009e0c <File::tell(unsigned long long*)>
c0010428:	83 c4 10             	add    esp,0x10
c001042b:	85 c0                	test   eax,eax
c001042d:	0f 95 c0             	setne  al
c0010430:	31 d2                	xor    edx,edx
c0010432:	0f b6 c0             	movzx  eax,al
c0010435:	f7 d8                	neg    eax
c0010437:	83 d2 00             	adc    edx,0x0
c001043a:	83 c4 08             	add    esp,0x8
c001043d:	f7 da                	neg    edx
c001043f:	5b                   	pop    ebx
c0010440:	c3                   	ret    
c0010441:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010446:	ba ff ff ff ff       	mov    edx,0xffffffff
c001044b:	83 c4 08             	add    esp,0x8
c001044e:	5b                   	pop    ebx
c001044f:	c3                   	ret    

c0010450 <sysCallSize(regs*)>:
c0010450:	53                   	push   ebx
c0010451:	83 ec 18             	sub    esp,0x18
c0010454:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010458:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001045b:	83 f8 02             	cmp    eax,0x2
c001045e:	76 53                	jbe    c00104b3 <sysCallSize(regs*)+0x63>
c0010460:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010465:	76 19                	jbe    c0010480 <sysCallSize(regs*)+0x30>
c0010467:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001046a:	31 d2                	xor    edx,edx
c001046c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010472:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010479:	31 c0                	xor    eax,eax
c001047b:	83 c4 18             	add    esp,0x18
c001047e:	5b                   	pop    ebx
c001047f:	c3                   	ret    
c0010480:	83 ec 0c             	sub    esp,0xc
c0010483:	50                   	push   eax
c0010484:	e8 92 7e ff ff       	call   c000831b <getFromFileDescriptor(int)>
c0010489:	83 c4 0c             	add    esp,0xc
c001048c:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010490:	52                   	push   edx
c0010491:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010494:	50                   	push   eax
c0010495:	e8 0a 9b ff ff       	call   c0009fa4 <File::stat(unsigned long long*, bool*)>
c001049a:	83 c4 10             	add    esp,0x10
c001049d:	85 c0                	test   eax,eax
c001049f:	0f 95 c0             	setne  al
c00104a2:	31 d2                	xor    edx,edx
c00104a4:	0f b6 c0             	movzx  eax,al
c00104a7:	f7 d8                	neg    eax
c00104a9:	83 d2 00             	adc    edx,0x0
c00104ac:	83 c4 18             	add    esp,0x18
c00104af:	f7 da                	neg    edx
c00104b1:	5b                   	pop    ebx
c00104b2:	c3                   	ret    
c00104b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00104b8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00104bd:	83 c4 18             	add    esp,0x18
c00104c0:	5b                   	pop    ebx
c00104c1:	c3                   	ret    

c00104c2 <sysCallSizeFromFilename(regs*)>:
c00104c2:	57                   	push   edi
c00104c3:	56                   	push   esi
c00104c4:	53                   	push   ebx
c00104c5:	83 ec 20             	sub    esp,0x20
c00104c8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00104cc:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00104cf:	83 fb 02             	cmp    ebx,0x2
c00104d2:	0f 86 88 00 00 00    	jbe    c0010560 <sysCallSizeFromFilename(regs*)+0x9e>
c00104d8:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00104de:	76 1b                	jbe    c00104fb <sysCallSizeFromFilename(regs*)+0x39>
c00104e0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00104e3:	31 d2                	xor    edx,edx
c00104e5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00104eb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00104f2:	83 c4 20             	add    esp,0x20
c00104f5:	31 c0                	xor    eax,eax
c00104f7:	5b                   	pop    ebx
c00104f8:	5e                   	pop    esi
c00104f9:	5f                   	pop    edi
c00104fa:	c3                   	ret    
c00104fb:	83 ec 0c             	sub    esp,0xc
c00104fe:	68 14 01 00 00       	push   0x114
c0010503:	e8 41 64 ff ff       	call   c0006949 <malloc>
c0010508:	83 c4 0c             	add    esp,0xc
c001050b:	89 c7                	mov    edi,eax
c001050d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010512:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010515:	53                   	push   ebx
c0010516:	57                   	push   edi
c0010517:	e8 22 97 ff ff       	call   c0009c3e <File::File(char const*, Process*)>
c001051c:	83 c4 0c             	add    esp,0xc
c001051f:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010523:	50                   	push   eax
c0010524:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0010527:	57                   	push   edi
c0010528:	e8 77 9a ff ff       	call   c0009fa4 <File::stat(unsigned long long*, bool*)>
c001052d:	83 c4 10             	add    esp,0x10
c0010530:	85 ff                	test   edi,edi
c0010532:	74 14                	je     c0010548 <sysCallSizeFromFilename(regs*)+0x86>
c0010534:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010538:	8b 17                	mov    edx,DWORD PTR [edi]
c001053a:	83 ec 0c             	sub    esp,0xc
c001053d:	57                   	push   edi
c001053e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010541:	83 c4 10             	add    esp,0x10
c0010544:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010548:	85 c0                	test   eax,eax
c001054a:	0f 95 c0             	setne  al
c001054d:	31 d2                	xor    edx,edx
c001054f:	0f b6 c0             	movzx  eax,al
c0010552:	f7 d8                	neg    eax
c0010554:	83 d2 00             	adc    edx,0x0
c0010557:	83 c4 20             	add    esp,0x20
c001055a:	f7 da                	neg    edx
c001055c:	5b                   	pop    ebx
c001055d:	5e                   	pop    esi
c001055e:	5f                   	pop    edi
c001055f:	c3                   	ret    
c0010560:	83 c4 20             	add    esp,0x20
c0010563:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010568:	5b                   	pop    ebx
c0010569:	ba ff ff ff ff       	mov    edx,0xffffffff
c001056e:	5e                   	pop    esi
c001056f:	5f                   	pop    edi
c0010570:	c3                   	ret    

c0010571 <sysCallClose(regs*)>:
c0010571:	53                   	push   ebx
c0010572:	83 ec 08             	sub    esp,0x8
c0010575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010579:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001057c:	83 f8 02             	cmp    eax,0x2
c001057f:	76 41                	jbe    c00105c2 <sysCallClose(regs*)+0x51>
c0010581:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010587:	83 fa 01             	cmp    edx,0x1
c001058a:	76 2d                	jbe    c00105b9 <sysCallClose(regs*)+0x48>
c001058c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010591:	77 2f                	ja     c00105c2 <sysCallClose(regs*)+0x51>
c0010593:	83 ec 0c             	sub    esp,0xc
c0010596:	50                   	push   eax
c0010597:	e8 7f 7d ff ff       	call   c000831b <getFromFileDescriptor(int)>
c001059c:	89 c3                	mov    ebx,eax
c001059e:	89 04 24             	mov    DWORD PTR [esp],eax
c00105a1:	e8 b0 97 ff ff       	call   c0009d56 <File::close()>
c00105a6:	83 c4 10             	add    esp,0x10
c00105a9:	85 db                	test   ebx,ebx
c00105ab:	74 0c                	je     c00105b9 <sysCallClose(regs*)+0x48>
c00105ad:	83 ec 0c             	sub    esp,0xc
c00105b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105b2:	53                   	push   ebx
c00105b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00105b6:	83 c4 10             	add    esp,0x10
c00105b9:	31 c0                	xor    eax,eax
c00105bb:	31 d2                	xor    edx,edx
c00105bd:	83 c4 08             	add    esp,0x8
c00105c0:	5b                   	pop    ebx
c00105c1:	c3                   	ret    
c00105c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00105c7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00105cc:	83 c4 08             	add    esp,0x8
c00105cf:	5b                   	pop    ebx
c00105d0:	c3                   	ret    

c00105d1 <sysCallOpenDir(regs*)>:
c00105d1:	56                   	push   esi
c00105d2:	53                   	push   ebx
c00105d3:	53                   	push   ebx
c00105d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00105d8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00105db:	85 f6                	test   esi,esi
c00105dd:	74 59                	je     c0010638 <sysCallOpenDir(regs*)+0x67>
c00105df:	83 ec 0c             	sub    esp,0xc
c00105e2:	68 14 01 00 00       	push   0x114
c00105e7:	e8 5d 63 ff ff       	call   c0006949 <malloc>
c00105ec:	83 c4 0c             	add    esp,0xc
c00105ef:	89 c6                	mov    esi,eax
c00105f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00105f6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00105f9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00105fc:	56                   	push   esi
c00105fd:	e8 60 9b ff ff       	call   c000a162 <Directory::Directory(char const*, Process*)>
c0010602:	83 c4 10             	add    esp,0x10
c0010605:	85 f6                	test   esi,esi
c0010607:	74 2f                	je     c0010638 <sysCallOpenDir(regs*)+0x67>
c0010609:	83 ec 0c             	sub    esp,0xc
c001060c:	56                   	push   esi
c001060d:	e8 0a 9c ff ff       	call   c000a21c <Directory::open()>
c0010612:	83 c4 10             	add    esp,0x10
c0010615:	85 c0                	test   eax,eax
c0010617:	75 1f                	jne    c0010638 <sysCallOpenDir(regs*)+0x67>
c0010619:	83 ec 0c             	sub    esp,0xc
c001061c:	56                   	push   esi
c001061d:	e8 04 7a ff ff       	call   c0008026 <UnixFile::getFileDescriptor()>
c0010622:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010625:	83 c4 10             	add    esp,0x10
c0010628:	89 02                	mov    DWORD PTR [edx],eax
c001062a:	c1 f8 1f             	sar    eax,0x1f
c001062d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010630:	31 c0                	xor    eax,eax
c0010632:	59                   	pop    ecx
c0010633:	31 d2                	xor    edx,edx
c0010635:	5b                   	pop    ebx
c0010636:	5e                   	pop    esi
c0010637:	c3                   	ret    
c0010638:	59                   	pop    ecx
c0010639:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001063e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010643:	5b                   	pop    ebx
c0010644:	5e                   	pop    esi
c0010645:	c3                   	ret    

c0010646 <sysCallCloseDir(regs*)>:
c0010646:	53                   	push   ebx
c0010647:	83 ec 08             	sub    esp,0x8
c001064a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001064e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010651:	8d 50 fd             	lea    edx,[eax-0x3]
c0010654:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001065a:	77 2f                	ja     c001068b <sysCallCloseDir(regs*)+0x45>
c001065c:	83 ec 0c             	sub    esp,0xc
c001065f:	50                   	push   eax
c0010660:	e8 b6 7c ff ff       	call   c000831b <getFromFileDescriptor(int)>
c0010665:	89 c3                	mov    ebx,eax
c0010667:	89 04 24             	mov    DWORD PTR [esp],eax
c001066a:	e8 09 9c ff ff       	call   c000a278 <Directory::close()>
c001066f:	83 c4 10             	add    esp,0x10
c0010672:	85 db                	test   ebx,ebx
c0010674:	74 0c                	je     c0010682 <sysCallCloseDir(regs*)+0x3c>
c0010676:	83 ec 0c             	sub    esp,0xc
c0010679:	8b 03                	mov    eax,DWORD PTR [ebx]
c001067b:	53                   	push   ebx
c001067c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001067f:	83 c4 10             	add    esp,0x10
c0010682:	31 c0                	xor    eax,eax
c0010684:	31 d2                	xor    edx,edx
c0010686:	83 c4 08             	add    esp,0x8
c0010689:	5b                   	pop    ebx
c001068a:	c3                   	ret    
c001068b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010690:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010695:	83 c4 08             	add    esp,0x8
c0010698:	5b                   	pop    ebx
c0010699:	c3                   	ret    

c001069a <sysCallMakeDir(regs*)>:
c001069a:	56                   	push   esi
c001069b:	53                   	push   ebx
c001069c:	83 ec 10             	sub    esp,0x10
c001069f:	68 14 01 00 00       	push   0x114
c00106a4:	e8 a0 62 ff ff       	call   c0006949 <malloc>
c00106a9:	83 c4 0c             	add    esp,0xc
c00106ac:	89 c3                	mov    ebx,eax
c00106ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00106b3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00106b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00106ba:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00106bd:	53                   	push   ebx
c00106be:	e8 9f 9a ff ff       	call   c000a162 <Directory::Directory(char const*, Process*)>
c00106c3:	83 c4 10             	add    esp,0x10
c00106c6:	85 db                	test   ebx,ebx
c00106c8:	74 32                	je     c00106fc <sysCallMakeDir(regs*)+0x62>
c00106ca:	83 ec 0c             	sub    esp,0xc
c00106cd:	53                   	push   ebx
c00106ce:	e8 29 9d ff ff       	call   c000a3fc <Directory::create()>
c00106d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00106d6:	89 c6                	mov    esi,eax
c00106d8:	e8 9b 9b ff ff       	call   c000a278 <Directory::close()>
c00106dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00106e2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00106e5:	83 c4 10             	add    esp,0x10
c00106e8:	31 c0                	xor    eax,eax
c00106ea:	59                   	pop    ecx
c00106eb:	85 f6                	test   esi,esi
c00106ed:	5b                   	pop    ebx
c00106ee:	0f 95 c0             	setne  al
c00106f1:	5e                   	pop    esi
c00106f2:	31 d2                	xor    edx,edx
c00106f4:	f7 d8                	neg    eax
c00106f6:	83 d2 00             	adc    edx,0x0
c00106f9:	f7 da                	neg    edx
c00106fb:	c3                   	ret    
c00106fc:	59                   	pop    ecx
c00106fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010702:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010707:	5b                   	pop    ebx
c0010708:	5e                   	pop    esi
c0010709:	c3                   	ret    

c001070a <sysCallWait(regs*)>:
c001070a:	83 ec 10             	sub    esp,0x10
c001070d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010711:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0010714:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0010717:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001071a:	e8 35 23 00 00       	call   c0012a54 <waitTask(int, int*, int)>
c001071f:	83 c4 1c             	add    esp,0x1c
c0010722:	99                   	cdq    
c0010723:	c3                   	ret    

c0010724 <sysCallNotImpl(regs*)>:
c0010724:	83 ec 18             	sub    esp,0x18
c0010727:	68 2d ed 01 c0       	push   0xc001ed2d
c001072c:	e8 78 ec ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c0010731:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010736:	ba ff ff ff ff       	mov    edx,0xffffffff
c001073b:	83 c4 1c             	add    esp,0x1c
c001073e:	c3                   	ret    

c001073f <sysPanic(regs*)>:
c001073f:	83 ec 18             	sub    esp,0x18
c0010742:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010746:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0010749:	e8 5b ec ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001074e:	b8 01 00 00 00       	mov    eax,0x1
c0010753:	31 d2                	xor    edx,edx
c0010755:	83 c4 1c             	add    esp,0x1c
c0010758:	c3                   	ret    

c0010759 <sysCallRmdir(regs*)>:
c0010759:	56                   	push   esi
c001075a:	53                   	push   ebx
c001075b:	83 ec 20             	sub    esp,0x20
c001075e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010762:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010765:	68 14 01 00 00       	push   0x114
c001076a:	e8 da 61 ff ff       	call   c0006949 <malloc>
c001076f:	83 c4 0c             	add    esp,0xc
c0010772:	89 c3                	mov    ebx,eax
c0010774:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010779:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001077c:	56                   	push   esi
c001077d:	53                   	push   ebx
c001077e:	e8 bb 94 ff ff       	call   c0009c3e <File::File(char const*, Process*)>
c0010783:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010786:	e8 e5 96 ff ff       	call   c0009e70 <File::unlink()>
c001078b:	83 c4 10             	add    esp,0x10
c001078e:	85 db                	test   ebx,ebx
c0010790:	74 14                	je     c00107a6 <sysCallRmdir(regs*)+0x4d>
c0010792:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010796:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010798:	83 ec 0c             	sub    esp,0xc
c001079b:	53                   	push   ebx
c001079c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001079f:	83 c4 10             	add    esp,0x10
c00107a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00107a6:	85 c0                	test   eax,eax
c00107a8:	0f 95 c0             	setne  al
c00107ab:	31 d2                	xor    edx,edx
c00107ad:	0f b6 c0             	movzx  eax,al
c00107b0:	f7 d8                	neg    eax
c00107b2:	83 d2 00             	adc    edx,0x0
c00107b5:	83 c4 14             	add    esp,0x14
c00107b8:	f7 da                	neg    edx
c00107ba:	5b                   	pop    ebx
c00107bb:	5e                   	pop    esi
c00107bc:	c3                   	ret    

c00107bd <sysCallUnlink(regs*)>:
c00107bd:	56                   	push   esi
c00107be:	53                   	push   ebx
c00107bf:	83 ec 20             	sub    esp,0x20
c00107c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00107c6:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00107c9:	68 14 01 00 00       	push   0x114
c00107ce:	e8 76 61 ff ff       	call   c0006949 <malloc>
c00107d3:	83 c4 0c             	add    esp,0xc
c00107d6:	89 c3                	mov    ebx,eax
c00107d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00107dd:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00107e0:	56                   	push   esi
c00107e1:	53                   	push   ebx
c00107e2:	e8 57 94 ff ff       	call   c0009c3e <File::File(char const*, Process*)>
c00107e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00107ea:	e8 81 96 ff ff       	call   c0009e70 <File::unlink()>
c00107ef:	83 c4 10             	add    esp,0x10
c00107f2:	85 db                	test   ebx,ebx
c00107f4:	74 14                	je     c001080a <sysCallUnlink(regs*)+0x4d>
c00107f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00107fa:	8b 13                	mov    edx,DWORD PTR [ebx]
c00107fc:	83 ec 0c             	sub    esp,0xc
c00107ff:	53                   	push   ebx
c0010800:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010803:	83 c4 10             	add    esp,0x10
c0010806:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001080a:	85 c0                	test   eax,eax
c001080c:	0f 95 c0             	setne  al
c001080f:	31 d2                	xor    edx,edx
c0010811:	0f b6 c0             	movzx  eax,al
c0010814:	f7 d8                	neg    eax
c0010816:	83 d2 00             	adc    edx,0x0
c0010819:	83 c4 14             	add    esp,0x14
c001081c:	f7 da                	neg    edx
c001081e:	5b                   	pop    ebx
c001081f:	5e                   	pop    esi
c0010820:	c3                   	ret    

c0010821 <sysCallGetArgv(regs*)>:
c0010821:	83 ec 0c             	sub    esp,0xc
c0010824:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010828:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001082b:	85 c0                	test   eax,eax
c001082d:	78 2b                	js     c001085a <sysCallGetArgv(regs*)+0x39>
c001082f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010835:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010838:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c001083e:	7d 1a                	jge    c001085a <sysCallGetArgv(regs*)+0x39>
c0010840:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010847:	85 c0                	test   eax,eax
c0010849:	74 17                	je     c0010862 <sysCallGetArgv(regs*)+0x41>
c001084b:	83 ec 08             	sub    esp,0x8
c001084e:	50                   	push   eax
c001084f:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0010852:	e8 0d fd fe ff       	call   c0000564 <strcpy>
c0010857:	83 c4 10             	add    esp,0x10
c001085a:	31 c0                	xor    eax,eax
c001085c:	31 d2                	xor    edx,edx
c001085e:	83 c4 0c             	add    esp,0xc
c0010861:	c3                   	ret    
c0010862:	b8 01 00 00 00       	mov    eax,0x1
c0010867:	31 d2                	xor    edx,edx
c0010869:	83 c4 0c             	add    esp,0xc
c001086c:	c3                   	ret    

c001086d <sysCallUSleep(regs*)>:
c001086d:	83 ec 1c             	sub    esp,0x1c
c0010870:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010874:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010877:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001087a:	6a 00                	push   0x0
c001087c:	6a 64                	push   0x64
c001087e:	52                   	push   edx
c001087f:	50                   	push   eax
c0010880:	e8 3b bc 00 00       	call   c001c4c0 <__udivdi3>
c0010885:	83 c4 14             	add    esp,0x14
c0010888:	50                   	push   eax
c0010889:	e8 96 22 00 00       	call   c0012b24 <milliTenthSleep(unsigned int)>
c001088e:	31 c0                	xor    eax,eax
c0010890:	31 d2                	xor    edx,edx
c0010892:	83 c4 1c             	add    esp,0x1c
c0010895:	c3                   	ret    

c0010896 <sysCallSpawn(regs*)>:
c0010896:	56                   	push   esi
c0010897:	53                   	push   ebx
c0010898:	50                   	push   eax
c0010899:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001089d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00108a0:	85 c0                	test   eax,eax
c00108a2:	75 08                	jne    c00108ac <sysCallSpawn(regs*)+0x16>
c00108a4:	59                   	pop    ecx
c00108a5:	31 c0                	xor    eax,eax
c00108a7:	31 d2                	xor    edx,edx
c00108a9:	5b                   	pop    ebx
c00108aa:	5e                   	pop    esi
c00108ab:	c3                   	ret    
c00108ac:	83 ec 0c             	sub    esp,0xc
c00108af:	68 1f 07 00 00       	push   0x71f
c00108b4:	e8 90 60 ff ff       	call   c0006949 <malloc>
c00108b9:	83 c4 10             	add    esp,0x10
c00108bc:	89 c6                	mov    esi,eax
c00108be:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00108c1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00108c4:	85 c0                	test   eax,eax
c00108c6:	75 32                	jne    c00108fa <sysCallSpawn(regs*)+0x64>
c00108c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00108cd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108d0:	52                   	push   edx
c00108d1:	50                   	push   eax
c00108d2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00108d5:	56                   	push   esi
c00108d6:	e8 41 19 00 00       	call   c001221c <Process::Process(char const*, Process*, char**)>
c00108db:	83 c4 10             	add    esp,0x10
c00108de:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00108e5:	75 bd                	jne    c00108a4 <sysCallSpawn(regs*)+0xe>
c00108e7:	83 ec 0c             	sub    esp,0xc
c00108ea:	56                   	push   esi
c00108eb:	e8 18 1e 00 00       	call   c0012708 <Process::createUserThread()>
c00108f0:	8b 06                	mov    eax,DWORD PTR [esi]
c00108f2:	83 c4 10             	add    esp,0x10
c00108f5:	99                   	cdq    
c00108f6:	59                   	pop    ecx
c00108f7:	5b                   	pop    ebx
c00108f8:	5e                   	pop    esi
c00108f9:	c3                   	ret    
c00108fa:	31 c0                	xor    eax,eax
c00108fc:	eb d2                	jmp    c00108d0 <sysCallSpawn(regs*)+0x3a>

c00108fe <sysCallGetEnv(regs*)>:
c00108fe:	57                   	push   edi
c00108ff:	56                   	push   esi
c0010900:	53                   	push   ebx
c0010901:	83 ec 1c             	sub    esp,0x1c
c0010904:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010908:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001090d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010910:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010913:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010916:	e8 da e9 ff ff       	call   c000f2f5 <Krnl::getProcessTotalEnvCount(Process*)>
c001091b:	83 c4 10             	add    esp,0x10
c001091e:	39 c7                	cmp    edi,eax
c0010920:	7c 14                	jl     c0010936 <sysCallGetEnv(regs*)+0x38>
c0010922:	85 f6                	test   esi,esi
c0010924:	75 0b                	jne    c0010931 <sysCallGetEnv(regs*)+0x33>
c0010926:	83 c4 10             	add    esp,0x10
c0010929:	31 c0                	xor    eax,eax
c001092b:	5b                   	pop    ebx
c001092c:	31 d2                	xor    edx,edx
c001092e:	5e                   	pop    esi
c001092f:	5f                   	pop    edi
c0010930:	c3                   	ret    
c0010931:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010934:	eb f0                	jmp    c0010926 <sysCallGetEnv(regs*)+0x28>
c0010936:	8d 44 24 08          	lea    eax,[esp+0x8]
c001093a:	52                   	push   edx
c001093b:	57                   	push   edi
c001093c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010942:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0010945:	50                   	push   eax
c0010946:	e8 ca e9 ff ff       	call   c000f315 <Krnl::getProcessEnvPair(Process*, int)>
c001094b:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001094e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010952:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010956:	83 c4 0c             	add    esp,0xc
c0010959:	85 c9                	test   ecx,ecx
c001095b:	75 23                	jne    c0010980 <sysCallGetEnv(regs*)+0x82>
c001095d:	83 ec 0c             	sub    esp,0xc
c0010960:	50                   	push   eax
c0010961:	e8 5e fb fe ff       	call   c00004c4 <strlen>
c0010966:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010969:	89 c3                	mov    ebx,eax
c001096b:	e8 54 fb fe ff       	call   c00004c4 <strlen>
c0010970:	83 c4 10             	add    esp,0x10
c0010973:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010977:	83 c4 10             	add    esp,0x10
c001097a:	31 d2                	xor    edx,edx
c001097c:	5b                   	pop    ebx
c001097d:	5e                   	pop    esi
c001097e:	5f                   	pop    edi
c001097f:	c3                   	ret    
c0010980:	83 ec 08             	sub    esp,0x8
c0010983:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010986:	50                   	push   eax
c0010987:	56                   	push   esi
c0010988:	e8 d7 fb fe ff       	call   c0000564 <strcpy>
c001098d:	58                   	pop    eax
c001098e:	5a                   	pop    edx
c001098f:	68 47 ed 01 c0       	push   0xc001ed47
c0010994:	56                   	push   esi
c0010995:	e8 0a fd fe ff       	call   c00006a4 <strcat>
c001099a:	59                   	pop    ecx
c001099b:	5b                   	pop    ebx
c001099c:	57                   	push   edi
c001099d:	56                   	push   esi
c001099e:	e8 01 fd fe ff       	call   c00006a4 <strcat>
c00109a3:	83 c4 10             	add    esp,0x10
c00109a6:	e9 7b ff ff ff       	jmp    c0010926 <sysCallGetEnv(regs*)+0x28>

c00109ab <sysSetFatAttrib(regs*)>:
c00109ab:	57                   	push   edi
c00109ac:	56                   	push   esi
c00109ad:	53                   	push   ebx
c00109ae:	83 ec 1c             	sub    esp,0x1c
c00109b1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00109b5:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00109b8:	68 14 01 00 00       	push   0x114
c00109bd:	e8 87 5f ff ff       	call   c0006949 <malloc>
c00109c2:	83 c4 0c             	add    esp,0xc
c00109c5:	89 c3                	mov    ebx,eax
c00109c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109cc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00109cf:	57                   	push   edi
c00109d0:	53                   	push   ebx
c00109d1:	e8 68 92 ff ff       	call   c0009c3e <File::File(char const*, Process*)>
c00109d6:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00109d9:	83 c4 0c             	add    esp,0xc
c00109dc:	0f b6 d4             	movzx  edx,ah
c00109df:	0f b6 c0             	movzx  eax,al
c00109e2:	52                   	push   edx
c00109e3:	50                   	push   eax
c00109e4:	53                   	push   ebx
c00109e5:	e8 20 95 ff ff       	call   c0009f0a <File::chfatattr(unsigned char, unsigned char)>
c00109ea:	83 c4 10             	add    esp,0x10
c00109ed:	85 db                	test   ebx,ebx
c00109ef:	74 14                	je     c0010a05 <sysSetFatAttrib(regs*)+0x5a>
c00109f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00109f5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00109f7:	83 ec 0c             	sub    esp,0xc
c00109fa:	53                   	push   ebx
c00109fb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00109fe:	83 c4 10             	add    esp,0x10
c0010a01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a05:	85 c0                	test   eax,eax
c0010a07:	0f 95 c0             	setne  al
c0010a0a:	31 d2                	xor    edx,edx
c0010a0c:	0f b6 c0             	movzx  eax,al
c0010a0f:	f7 d8                	neg    eax
c0010a11:	83 d2 00             	adc    edx,0x0
c0010a14:	83 c4 10             	add    esp,0x10
c0010a17:	f7 da                	neg    edx
c0010a19:	5b                   	pop    ebx
c0010a1a:	5e                   	pop    esi
c0010a1b:	5f                   	pop    edi
c0010a1c:	c3                   	ret    

c0010a1d <sysPipe(regs*)>:
c0010a1d:	57                   	push   edi
c0010a1e:	56                   	push   esi
c0010a1f:	53                   	push   ebx
c0010a20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a24:	83 ec 0c             	sub    esp,0xc
c0010a27:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010a2a:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010a2d:	6a 20                	push   0x20
c0010a2f:	e8 15 5f ff ff       	call   c0006949 <malloc>
c0010a34:	89 c3                	mov    ebx,eax
c0010a36:	58                   	pop    eax
c0010a37:	5a                   	pop    edx
c0010a38:	68 00 50 00 00       	push   0x5000
c0010a3d:	53                   	push   ebx
c0010a3e:	e8 ed 68 ff ff       	call   c0007330 <Pipe::Pipe(int)>
c0010a43:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a46:	e8 db 75 ff ff       	call   c0008026 <UnixFile::getFileDescriptor()>
c0010a4b:	89 07                	mov    DWORD PTR [edi],eax
c0010a4d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a50:	e8 d1 75 ff ff       	call   c0008026 <UnixFile::getFileDescriptor()>
c0010a55:	83 c4 10             	add    esp,0x10
c0010a58:	89 06                	mov    DWORD PTR [esi],eax
c0010a5a:	31 d2                	xor    edx,edx
c0010a5c:	5b                   	pop    ebx
c0010a5d:	31 c0                	xor    eax,eax
c0010a5f:	5e                   	pop    esi
c0010a60:	5f                   	pop    edi
c0010a61:	c3                   	ret    

c0010a62 <sysGetUnixTime(regs*)>:
c0010a62:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c0010a67:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010a6d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010a71:	e9 cc 9b ff ff       	jmp    c000a642 <Clock::timeInSecondsLocal()>

c0010a76 <string_ends_with(char const*, char const*)>:
c0010a76:	57                   	push   edi
c0010a77:	56                   	push   esi
c0010a78:	53                   	push   ebx
c0010a79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a7d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0010a81:	83 ec 0c             	sub    esp,0xc
c0010a84:	53                   	push   ebx
c0010a85:	e8 3a fa fe ff       	call   c00004c4 <strlen>
c0010a8a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a8d:	89 c6                	mov    esi,eax
c0010a8f:	e8 30 fa fe ff       	call   c00004c4 <strlen>
c0010a94:	83 c4 10             	add    esp,0x10
c0010a97:	39 c6                	cmp    esi,eax
c0010a99:	7d 06                	jge    c0010aa1 <string_ends_with(char const*, char const*)+0x2b>
c0010a9b:	5b                   	pop    ebx
c0010a9c:	31 c0                	xor    eax,eax
c0010a9e:	5e                   	pop    esi
c0010a9f:	5f                   	pop    edi
c0010aa0:	c3                   	ret    
c0010aa1:	83 ec 08             	sub    esp,0x8
c0010aa4:	29 c6                	sub    esi,eax
c0010aa6:	57                   	push   edi
c0010aa7:	01 f3                	add    ebx,esi
c0010aa9:	53                   	push   ebx
c0010aaa:	e8 41 fb fe ff       	call   c00005f0 <strcmp>
c0010aaf:	83 c4 10             	add    esp,0x10
c0010ab2:	85 c0                	test   eax,eax
c0010ab4:	5b                   	pop    ebx
c0010ab5:	0f 94 c0             	sete   al
c0010ab8:	5e                   	pop    esi
c0010ab9:	0f b6 c0             	movzx  eax,al
c0010abc:	5f                   	pop    edi
c0010abd:	c3                   	ret    

c0010abe <sysCallOpen(regs*)>:
c0010abe:	56                   	push   esi
c0010abf:	53                   	push   ebx
c0010ac0:	81 ec 04 01 00 00    	sub    esp,0x104
c0010ac6:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010acd:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010ad0:	85 c9                	test   ecx,ecx
c0010ad2:	0f 84 ad 01 00 00    	je     c0010c85 <sysCallOpen(regs*)+0x1c7>
c0010ad8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010adb:	85 c0                	test   eax,eax
c0010add:	0f 84 a2 01 00 00    	je     c0010c85 <sysCallOpen(regs*)+0x1c7>
c0010ae3:	52                   	push   edx
c0010ae4:	68 49 ed 01 c0       	push   0xc001ed49
c0010ae9:	50                   	push   eax
c0010aea:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010aee:	56                   	push   esi
c0010aef:	e8 a0 8f ff ff       	call   c0009a94 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010af4:	89 34 24             	mov    DWORD PTR [esp],esi
c0010af7:	e8 c8 f9 fe ff       	call   c00004c4 <strlen>
c0010afc:	83 c4 10             	add    esp,0x10
c0010aff:	48                   	dec    eax
c0010b00:	74 1d                	je     c0010b1f <sysCallOpen(regs*)+0x61>
c0010b02:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0010b05:	eb 0f                	jmp    c0010b16 <sysCallOpen(regs*)+0x58>
c0010b07:	80 fa 3a             	cmp    dl,0x3a
c0010b0a:	74 0f                	je     c0010b1b <sysCallOpen(regs*)+0x5d>
c0010b0c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010b10:	48                   	dec    eax
c0010b11:	74 0c                	je     c0010b1f <sysCallOpen(regs*)+0x61>
c0010b13:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0010b16:	80 fa 2e             	cmp    dl,0x2e
c0010b19:	75 ec                	jne    c0010b07 <sysCallOpen(regs*)+0x49>
c0010b1b:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010b1f:	83 ec 08             	sub    esp,0x8
c0010b22:	68 4d ed 01 c0       	push   0xc001ed4d
c0010b27:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010b2a:	e8 47 ff ff ff       	call   c0010a76 <string_ends_with(char const*, char const*)>
c0010b2f:	83 c4 10             	add    esp,0x10
c0010b32:	85 c0                	test   eax,eax
c0010b34:	74 1d                	je     c0010b53 <sysCallOpen(regs*)+0x95>
c0010b36:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b39:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010b3f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b46:	81 c4 04 01 00 00    	add    esp,0x104
c0010b4c:	31 c0                	xor    eax,eax
c0010b4e:	31 d2                	xor    edx,edx
c0010b50:	5b                   	pop    ebx
c0010b51:	5e                   	pop    esi
c0010b52:	c3                   	ret    
c0010b53:	83 ec 08             	sub    esp,0x8
c0010b56:	68 52 ed 01 c0       	push   0xc001ed52
c0010b5b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010b5e:	e8 13 ff ff ff       	call   c0010a76 <string_ends_with(char const*, char const*)>
c0010b63:	83 c4 10             	add    esp,0x10
c0010b66:	85 c0                	test   eax,eax
c0010b68:	75 cc                	jne    c0010b36 <sysCallOpen(regs*)+0x78>
c0010b6a:	83 ec 08             	sub    esp,0x8
c0010b6d:	68 4e ed 01 c0       	push   0xc001ed4e
c0010b72:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010b75:	e8 76 fa fe ff       	call   c00005f0 <strcmp>
c0010b7a:	83 c4 10             	add    esp,0x10
c0010b7d:	85 c0                	test   eax,eax
c0010b7f:	74 b5                	je     c0010b36 <sysCallOpen(regs*)+0x78>
c0010b81:	83 ec 08             	sub    esp,0x8
c0010b84:	68 4d ed 01 c0       	push   0xc001ed4d
c0010b89:	56                   	push   esi
c0010b8a:	e8 e7 fe ff ff       	call   c0010a76 <string_ends_with(char const*, char const*)>
c0010b8f:	83 c4 10             	add    esp,0x10
c0010b92:	85 c0                	test   eax,eax
c0010b94:	75 a0                	jne    c0010b36 <sysCallOpen(regs*)+0x78>
c0010b96:	83 ec 08             	sub    esp,0x8
c0010b99:	68 57 ed 01 c0       	push   0xc001ed57
c0010b9e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010ba1:	e8 d0 fe ff ff       	call   c0010a76 <string_ends_with(char const*, char const*)>
c0010ba6:	83 c4 10             	add    esp,0x10
c0010ba9:	85 c0                	test   eax,eax
c0010bab:	0f 85 e7 00 00 00    	jne    c0010c98 <sysCallOpen(regs*)+0x1da>
c0010bb1:	83 ec 08             	sub    esp,0x8
c0010bb4:	68 5c ed 01 c0       	push   0xc001ed5c
c0010bb9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010bbc:	e8 b5 fe ff ff       	call   c0010a76 <string_ends_with(char const*, char const*)>
c0010bc1:	83 c4 10             	add    esp,0x10
c0010bc4:	85 c0                	test   eax,eax
c0010bc6:	0f 85 cc 00 00 00    	jne    c0010c98 <sysCallOpen(regs*)+0x1da>
c0010bcc:	83 ec 08             	sub    esp,0x8
c0010bcf:	68 58 ed 01 c0       	push   0xc001ed58
c0010bd4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010bd7:	e8 14 fa fe ff       	call   c00005f0 <strcmp>
c0010bdc:	83 c4 10             	add    esp,0x10
c0010bdf:	85 c0                	test   eax,eax
c0010be1:	0f 84 b1 00 00 00    	je     c0010c98 <sysCallOpen(regs*)+0x1da>
c0010be7:	83 ec 08             	sub    esp,0x8
c0010bea:	68 57 ed 01 c0       	push   0xc001ed57
c0010bef:	56                   	push   esi
c0010bf0:	e8 81 fe ff ff       	call   c0010a76 <string_ends_with(char const*, char const*)>
c0010bf5:	83 c4 10             	add    esp,0x10
c0010bf8:	85 c0                	test   eax,eax
c0010bfa:	0f 85 98 00 00 00    	jne    c0010c98 <sysCallOpen(regs*)+0x1da>
c0010c00:	83 ec 0c             	sub    esp,0xc
c0010c03:	68 14 01 00 00       	push   0x114
c0010c08:	e8 3c 5d ff ff       	call   c0006949 <malloc>
c0010c0d:	83 c4 0c             	add    esp,0xc
c0010c10:	89 c6                	mov    esi,eax
c0010c12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c17:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010c1a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010c1d:	56                   	push   esi
c0010c1e:	e8 1b 90 ff ff       	call   c0009c3e <File::File(char const*, Process*)>
c0010c23:	83 c4 10             	add    esp,0x10
c0010c26:	85 f6                	test   esi,esi
c0010c28:	74 5b                	je     c0010c85 <sysCallOpen(regs*)+0x1c7>
c0010c2a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010c2d:	0f b6 c2             	movzx  eax,dl
c0010c30:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010c33:	89 d0                	mov    eax,edx
c0010c35:	83 e0 01             	and    eax,0x1
c0010c38:	f6 c2 02             	test   dl,0x2
c0010c3b:	74 03                	je     c0010c40 <sysCallOpen(regs*)+0x182>
c0010c3d:	83 c8 02             	or     eax,0x2
c0010c40:	f6 c2 04             	test   dl,0x4
c0010c43:	74 03                	je     c0010c48 <sysCallOpen(regs*)+0x18a>
c0010c45:	83 c8 04             	or     eax,0x4
c0010c48:	f6 c2 08             	test   dl,0x8
c0010c4b:	74 03                	je     c0010c50 <sysCallOpen(regs*)+0x192>
c0010c4d:	83 c8 0a             	or     eax,0xa
c0010c50:	83 e2 10             	and    edx,0x10
c0010c53:	74 03                	je     c0010c58 <sysCallOpen(regs*)+0x19a>
c0010c55:	83 c8 12             	or     eax,0x12
c0010c58:	83 ec 08             	sub    esp,0x8
c0010c5b:	50                   	push   eax
c0010c5c:	56                   	push   esi
c0010c5d:	e8 96 90 ff ff       	call   c0009cf8 <File::open(FileOpenMode)>
c0010c62:	83 c4 10             	add    esp,0x10
c0010c65:	85 c0                	test   eax,eax
c0010c67:	75 1c                	jne    c0010c85 <sysCallOpen(regs*)+0x1c7>
c0010c69:	83 ec 0c             	sub    esp,0xc
c0010c6c:	56                   	push   esi
c0010c6d:	e8 b4 73 ff ff       	call   c0008026 <UnixFile::getFileDescriptor()>
c0010c72:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010c75:	83 c4 10             	add    esp,0x10
c0010c78:	89 02                	mov    DWORD PTR [edx],eax
c0010c7a:	c1 f8 1f             	sar    eax,0x1f
c0010c7d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010c80:	e9 c1 fe ff ff       	jmp    c0010b46 <sysCallOpen(regs*)+0x88>
c0010c85:	81 c4 04 01 00 00    	add    esp,0x104
c0010c8b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c90:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c95:	5b                   	pop    ebx
c0010c96:	5e                   	pop    esi
c0010c97:	c3                   	ret    
c0010c98:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c9b:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010ca1:	e9 99 fe ff ff       	jmp    c0010b3f <sysCallOpen(regs*)+0x81>

c0010ca6 <Sys::loadSyscalls()>:
c0010ca6:	c7 05 80 2e 02 c0 b9 00 01 c0 	mov    DWORD PTR ds:0xc0022e80,0xc00100b9
c0010cb0:	c7 05 84 2e 02 c0 b0 fc 00 c0 	mov    DWORD PTR ds:0xc0022e84,0xc000fcb0
c0010cba:	c7 05 88 2e 02 c0 9f fe 00 c0 	mov    DWORD PTR ds:0xc0022e88,0xc000fe9f
c0010cc4:	c7 05 8c 2e 02 c0 ef ff 00 c0 	mov    DWORD PTR ds:0xc0022e8c,0xc000ffef
c0010cce:	c7 05 90 2e 02 c0 37 fe 00 c0 	mov    DWORD PTR ds:0xc0022e90,0xc000fe37
c0010cd8:	c7 05 94 2e 02 c0 e7 fc 00 c0 	mov    DWORD PTR ds:0xc0022e94,0xc000fce7
c0010ce2:	c7 05 98 2e 02 c0 c8 fc 00 c0 	mov    DWORD PTR ds:0xc0022e98,0xc000fcc8
c0010cec:	c7 05 9c 2e 02 c0 f4 fe 00 c0 	mov    DWORD PTR ds:0xc0022e9c,0xc000fef4
c0010cf6:	c7 05 a4 2e 02 c0 71 05 01 c0 	mov    DWORD PTR ds:0xc0022ea4,0xc0010571
c0010d00:	c7 05 a0 2e 02 c0 be 0a 01 c0 	mov    DWORD PTR ds:0xc0022ea0,0xc0010abe
c0010d0a:	c7 05 a8 2e 02 c0 d1 05 01 c0 	mov    DWORD PTR ds:0xc0022ea8,0xc00105d1
c0010d14:	c7 05 ac 2e 02 c0 b4 02 01 c0 	mov    DWORD PTR ds:0xc0022eac,0xc00102b4
c0010d1e:	c7 05 b0 2e 02 c0 de 00 01 c0 	mov    DWORD PTR ds:0xc0022eb0,0xc00100de
c0010d28:	c7 05 b4 2e 02 c0 e3 00 01 c0 	mov    DWORD PTR ds:0xc0022eb4,0xc00100e3
c0010d32:	c7 05 b8 2e 02 c0 9a 06 01 c0 	mov    DWORD PTR ds:0xc0022eb8,0xc001069a
c0010d3c:	c7 05 bc 2e 02 c0 46 06 01 c0 	mov    DWORD PTR ds:0xc0022ebc,0xc0010646
c0010d46:	c7 05 c0 2e 02 c0 8d 03 01 c0 	mov    DWORD PTR ds:0xc0022ec0,0xc001038d
c0010d50:	c7 05 c4 2e 02 c0 e4 03 01 c0 	mov    DWORD PTR ds:0xc0022ec4,0xc00103e4
c0010d5a:	c7 05 c8 2e 02 c0 50 04 01 c0 	mov    DWORD PTR ds:0xc0022ec8,0xc0010450
c0010d64:	c7 05 cc 2e 02 c0 e8 00 01 c0 	mov    DWORD PTR ds:0xc0022ecc,0xc00100e8
c0010d6e:	c7 05 d0 2e 02 c0 0a 07 01 c0 	mov    DWORD PTR ds:0xc0022ed0,0xc001070a
c0010d78:	c7 05 d4 2e 02 c0 24 07 01 c0 	mov    DWORD PTR ds:0xc0022ed4,0xc0010724
c0010d82:	c7 05 d8 2e 02 c0 24 07 01 c0 	mov    DWORD PTR ds:0xc0022ed8,0xc0010724
c0010d8c:	c7 05 dc 2e 02 c0 59 07 01 c0 	mov    DWORD PTR ds:0xc0022edc,0xc0010759
c0010d96:	c7 05 e0 2e 02 c0 bd 07 01 c0 	mov    DWORD PTR ds:0xc0022ee0,0xc00107bd
c0010da0:	c7 05 e4 2e 02 c0 f2 00 01 c0 	mov    DWORD PTR ds:0xc0022ee4,0xc00100f2
c0010daa:	c7 05 e8 2e 02 c0 21 08 01 c0 	mov    DWORD PTR ds:0xc0022ee8,0xc0010821
c0010db4:	c7 05 ec 2e 02 c0 71 02 01 c0 	mov    DWORD PTR ds:0xc0022eec,0xc0010271
c0010dbe:	c7 05 f0 2e 02 c0 02 01 01 c0 	mov    DWORD PTR ds:0xc0022ef0,0xc0010102
c0010dc8:	c7 05 f4 2e 02 c0 33 03 01 c0 	mov    DWORD PTR ds:0xc0022ef4,0xc0010333
c0010dd2:	c7 05 f8 2e 02 c0 6d 08 01 c0 	mov    DWORD PTR ds:0xc0022ef8,0xc001086d
c0010ddc:	c7 05 fc 2e 02 c0 c2 04 01 c0 	mov    DWORD PTR ds:0xc0022efc,0xc00104c2
c0010de6:	c7 05 00 2f 02 c0 96 08 01 c0 	mov    DWORD PTR ds:0xc0022f00,0xc0010896
c0010df0:	c7 05 04 2f 02 c0 fe 08 01 c0 	mov    DWORD PTR ds:0xc0022f04,0xc00108fe
c0010dfa:	c7 05 0c 2f 02 c0 0a 01 01 c0 	mov    DWORD PTR ds:0xc0022f0c,0xc001010a
c0010e04:	c7 05 10 2f 02 c0 74 01 01 c0 	mov    DWORD PTR ds:0xc0022f10,0xc0010174
c0010e0e:	c7 05 14 2f 02 c0 be 01 01 c0 	mov    DWORD PTR ds:0xc0022f14,0xc00101be
c0010e18:	c7 05 18 2f 02 c0 ab 09 01 c0 	mov    DWORD PTR ds:0xc0022f18,0xc00109ab
c0010e22:	c7 05 1c 2f 02 c0 3f 07 01 c0 	mov    DWORD PTR ds:0xc0022f1c,0xc001073f
c0010e2c:	c7 05 20 2f 02 c0 13 02 01 c0 	mov    DWORD PTR ds:0xc0022f20,0xc0010213
c0010e36:	c7 05 24 2f 02 c0 1d 0a 01 c0 	mov    DWORD PTR ds:0xc0022f24,0xc0010a1d
c0010e40:	c7 05 28 2f 02 c0 62 0a 01 c0 	mov    DWORD PTR ds:0xc0022f28,0xc0010a62
c0010e4a:	c7 05 2c 2f 02 c0 8f fd 00 c0 	mov    DWORD PTR ds:0xc0022f2c,0xc000fd8f
c0010e54:	c7 05 30 2f 02 c0 10 ff 00 c0 	mov    DWORD PTR ds:0xc0022f30,0xc000ff10
c0010e5e:	c7 05 34 2f 02 c0 a5 ff 00 c0 	mov    DWORD PTR ds:0xc0022f34,0xc000ffa5
c0010e68:	c7 05 38 2f 02 c0 7a fc 00 c0 	mov    DWORD PTR ds:0xc0022f38,0xc000fc7a
c0010e72:	c7 05 3c 2f 02 c0 57 00 01 c0 	mov    DWORD PTR ds:0xc0022f3c,0xc0010057
c0010e7c:	c7 05 40 2f 02 c0 f3 fc 00 c0 	mov    DWORD PTR ds:0xc0022f40,0xc000fcf3
c0010e86:	c7 05 44 2f 02 c0 0d fd 00 c0 	mov    DWORD PTR ds:0xc0022f44,0xc000fd0d
c0010e90:	c3                   	ret    

c0010e91 <Sys::systemCall(regs*, void*)>:
c0010e91:	53                   	push   ebx
c0010e92:	83 ec 08             	sub    esp,0x8
c0010e95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010e99:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010e9c:	83 f8 7f             	cmp    eax,0x7f
c0010e9f:	77 16                	ja     c0010eb7 <Sys::systemCall(regs*, void*)+0x26>
c0010ea1:	8b 14 85 80 2e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd180]
c0010ea8:	85 d2                	test   edx,edx
c0010eaa:	74 0b                	je     c0010eb7 <Sys::systemCall(regs*, void*)+0x26>
c0010eac:	83 ec 0c             	sub    esp,0xc
c0010eaf:	53                   	push   ebx
c0010eb0:	ff d2                	call   edx
c0010eb2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0010eb5:	eb 0d                	jmp    c0010ec4 <Sys::systemCall(regs*, void*)+0x33>
c0010eb7:	52                   	push   edx
c0010eb8:	52                   	push   edx
c0010eb9:	50                   	push   eax
c0010eba:	68 61 ed 01 c0       	push   0xc001ed61
c0010ebf:	e8 0f 88 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0010ec4:	83 c4 10             	add    esp,0x10
c0010ec7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0010ecc:	31 d2                	xor    edx,edx
c0010ece:	83 c4 08             	add    esp,0x8
c0010ed1:	5b                   	pop    ebx
c0010ed2:	c3                   	ret    

c0010ed3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0010ed3:	55                   	push   ebp
c0010ed4:	57                   	push   edi
c0010ed5:	56                   	push   esi
c0010ed6:	53                   	push   ebx
c0010ed7:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0010edd:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0010ee5:	0f 95 c2             	setne  dl
c0010ee8:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0010ef0:	0f 94 c0             	sete   al
c0010ef3:	84 c2                	test   dl,al
c0010ef5:	74 34                	je     c0010f2b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0010ef7:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0010f02:	74 27                	je     c0010f2b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0010f04:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0010f0b:	05 00 10 00 00       	add    eax,0x1000
c0010f10:	89 c1                	mov    ecx,eax
c0010f12:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010f17:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0010f1d:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0010f24:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0010f2b:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0010f32:	83 ec 0c             	sub    esp,0xc
c0010f35:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0010f3b:	6a 01                	push   0x1
c0010f3d:	e8 2f 75 ff ff       	call   c0008471 <Virt::allocateKernelVirtualPages(int)>
c0010f42:	83 c4 10             	add    esp,0x10
c0010f45:	89 c3                	mov    ebx,eax
c0010f47:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0010f4d:	0f 86 25 01 00 00    	jbe    c0011078 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0010f53:	c1 ee 0c             	shr    esi,0xc
c0010f56:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0010f5d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010f61:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010f69:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0010f70:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010f74:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0010f7b:	29 ef                	sub    edi,ebp
c0010f7d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0010f81:	0f 83 f8 00 00 00    	jae    c001107f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0010f87:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0010f8d:	76 05                	jbe    c0010f94 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0010f8f:	bf 00 10 00 00       	mov    edi,0x1000
c0010f94:	83 ec 0c             	sub    esp,0xc
c0010f97:	31 d2                	xor    edx,edx
c0010f99:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0010fa0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0010fa2:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010fa6:	50                   	push   eax
c0010fa7:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010fab:	56                   	push   esi
c0010fac:	52                   	push   edx
c0010fad:	57                   	push   edi
c0010fae:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0010fb5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0010fb8:	83 c4 20             	add    esp,0x20
c0010fbb:	85 c0                	test   eax,eax
c0010fbd:	75 06                	jne    c0010fc5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0010fbf:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0010fc3:	74 13                	je     c0010fd8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0010fc5:	83 ec 0c             	sub    esp,0xc
c0010fc8:	53                   	push   ebx
c0010fc9:	e8 97 77 ff ff       	call   c0008765 <Virt::freeKernelVirtualPages(unsigned long)>
c0010fce:	83 c4 10             	add    esp,0x10
c0010fd1:	31 c0                	xor    eax,eax
c0010fd3:	e9 7c 01 00 00       	jmp    c0011154 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0010fd8:	fa                   	cli    
c0010fd9:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0010fdf:	e8 2c 5d ff ff       	call   c0006d10 <Phys::allocatePage()>
c0010fe4:	6a 07                	push   0x7
c0010fe6:	89 c7                	mov    edi,eax
c0010fe8:	53                   	push   ebx
c0010fe9:	50                   	push   eax
c0010fea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fef:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ff2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0010ff8:	e8 c7 7a ff ff       	call   c0008ac4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0010ffd:	83 c4 0c             	add    esp,0xc
c0011000:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011007:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001100d:	6a 00                	push   0x0
c001100f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011014:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011017:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001101d:	e8 14 79 ff ff       	call   c0008936 <VAS::mapOtherVASIn(bool, VAS*)>
c0011022:	58                   	pop    eax
c0011023:	5a                   	pop    edx
c0011024:	68 07 0c 00 00       	push   0xc07
c0011029:	55                   	push   ebp
c001102a:	57                   	push   edi
c001102b:	89 df                	mov    edi,ebx
c001102d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011034:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001103a:	6a 00                	push   0x0
c001103c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011041:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011044:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001104a:	e8 33 7e ff ff       	call   c0008e82 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001104f:	b9 00 10 00 00       	mov    ecx,0x1000
c0011054:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011056:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c001105b:	83 c4 20             	add    esp,0x20
c001105e:	48                   	dec    eax
c001105f:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0011064:	85 c0                	test   eax,eax
c0011066:	75 01                	jne    c0011069 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011068:	fb                   	sti    
c0011069:	81 c5 00 10 00 00    	add    ebp,0x1000
c001106f:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011073:	e9 f1 fe ff ff       	jmp    c0010f69 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011078:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001107f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011086:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001108c:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011092:	0f 86 ae 00 00 00    	jbe    c0011146 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011098:	fa                   	cli    
c0011099:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c001109f:	c1 ee 0c             	shr    esi,0xc
c00110a2:	51                   	push   ecx
c00110a3:	31 ff                	xor    edi,edi
c00110a5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00110ac:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00110b2:	6a 00                	push   0x0
c00110b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110b9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110bc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00110c2:	e8 6f 78 ff ff       	call   c0008936 <VAS::mapOtherVASIn(bool, VAS*)>
c00110c7:	83 c4 10             	add    esp,0x10
c00110ca:	e8 41 5c ff ff       	call   c0006d10 <Phys::allocatePage()>
c00110cf:	47                   	inc    edi
c00110d0:	6a 07                	push   0x7
c00110d2:	53                   	push   ebx
c00110d3:	50                   	push   eax
c00110d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00110d8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00110de:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00110e1:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00110e7:	e8 d8 79 ff ff       	call   c0008ac4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00110ec:	58                   	pop    eax
c00110ed:	5a                   	pop    edx
c00110ee:	68 07 0c 00 00       	push   0xc07
c00110f3:	55                   	push   ebp
c00110f4:	81 c5 00 10 00 00    	add    ebp,0x1000
c00110fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00110fe:	50                   	push   eax
c00110ff:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011106:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001110c:	6a 00                	push   0x0
c001110e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011113:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011116:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001111c:	e8 61 7d ff ff       	call   c0008e82 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011121:	83 c4 1c             	add    esp,0x1c
c0011124:	68 00 10 00 00       	push   0x1000
c0011129:	6a 00                	push   0x0
c001112b:	53                   	push   ebx
c001112c:	e8 77 f3 fe ff       	call   c00004a8 <memset>
c0011131:	83 c4 10             	add    esp,0x10
c0011134:	39 fe                	cmp    esi,edi
c0011136:	77 92                	ja     c00110ca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0011138:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c001113d:	48                   	dec    eax
c001113e:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0011143:	75 01                	jne    c0011146 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011145:	fb                   	sti    
c0011146:	83 ec 0c             	sub    esp,0xc
c0011149:	53                   	push   ebx
c001114a:	e8 16 76 ff ff       	call   c0008765 <Virt::freeKernelVirtualPages(unsigned long)>
c001114f:	83 c4 10             	add    esp,0x10
c0011152:	b0 01                	mov    al,0x1
c0011154:	81 c4 2c 10 00 00    	add    esp,0x102c
c001115a:	5b                   	pop    ebx
c001115b:	5e                   	pop    esi
c001115c:	5f                   	pop    edi
c001115d:	5d                   	pop    ebp
c001115e:	c3                   	ret    

c001115f <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001115f:	55                   	push   ebp
c0011160:	57                   	push   edi
c0011161:	56                   	push   esi
c0011162:	53                   	push   ebx
c0011163:	83 ec 48             	sub    esp,0x48
c0011166:	68 14 01 00 00       	push   0x114
c001116b:	e8 d9 57 ff ff       	call   c0006949 <malloc>
c0011170:	83 c4 0c             	add    esp,0xc
c0011173:	89 c6                	mov    esi,eax
c0011175:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011179:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001117d:	50                   	push   eax
c001117e:	e8 bb 8a ff ff       	call   c0009c3e <File::File(char const*, Process*)>
c0011183:	58                   	pop    eax
c0011184:	5a                   	pop    edx
c0011185:	6a 01                	push   0x1
c0011187:	56                   	push   esi
c0011188:	e8 6b 8b ff ff       	call   c0009cf8 <File::open(FileOpenMode)>
c001118d:	83 c4 10             	add    esp,0x10
c0011190:	85 c0                	test   eax,eax
c0011192:	0f 85 47 01 00 00    	jne    c00112df <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011198:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00111a0:	83 ec 0c             	sub    esp,0xc
c00111a3:	6a 34                	push   0x34
c00111a5:	e8 9f 57 ff ff       	call   c0006949 <malloc>
c00111aa:	89 c3                	mov    ebx,eax
c00111ac:	58                   	pop    eax
c00111ad:	8b 06                	mov    eax,DWORD PTR [esi]
c00111af:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00111b3:	57                   	push   edi
c00111b4:	53                   	push   ebx
c00111b5:	6a 00                	push   0x0
c00111b7:	6a 34                	push   0x34
c00111b9:	56                   	push   esi
c00111ba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00111bd:	83 c4 20             	add    esp,0x20
c00111c0:	85 c0                	test   eax,eax
c00111c2:	0f 85 17 01 00 00    	jne    c00112df <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00111c8:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00111ce:	0f 85 0b 01 00 00    	jne    c00112df <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00111d4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00111d7:	85 c0                	test   eax,eax
c00111d9:	0f 84 00 01 00 00    	je     c00112df <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00111df:	31 d2                	xor    edx,edx
c00111e1:	55                   	push   ebp
c00111e2:	52                   	push   edx
c00111e3:	50                   	push   eax
c00111e4:	56                   	push   esi
c00111e5:	e8 cc 8b ff ff       	call   c0009db6 <File::seek(unsigned long long)>
c00111ea:	83 c4 10             	add    esp,0x10
c00111ed:	85 c0                	test   eax,eax
c00111ef:	0f 85 ea 00 00 00    	jne    c00112df <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00111f5:	83 ec 0c             	sub    esp,0xc
c00111f8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00111fb:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00111ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011203:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011207:	0f af c2             	imul   eax,edx
c001120a:	50                   	push   eax
c001120b:	e8 39 57 ff ff       	call   c0006949 <malloc>
c0011210:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011212:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011216:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011219:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001121d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011221:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011225:	0f af c2             	imul   eax,edx
c0011228:	99                   	cdq    
c0011229:	52                   	push   edx
c001122a:	50                   	push   eax
c001122b:	56                   	push   esi
c001122c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001122f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0011232:	83 c4 20             	add    esp,0x20
c0011235:	85 c0                	test   eax,eax
c0011237:	0f 84 a2 00 00 00    	je     c00112df <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001123d:	31 d2                	xor    edx,edx
c001123f:	51                   	push   ecx
c0011240:	52                   	push   edx
c0011241:	50                   	push   eax
c0011242:	56                   	push   esi
c0011243:	e8 6e 8b ff ff       	call   c0009db6 <File::seek(unsigned long long)>
c0011248:	83 c4 10             	add    esp,0x10
c001124b:	85 c0                	test   eax,eax
c001124d:	0f 85 8c 00 00 00    	jne    c00112df <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011253:	83 ec 0c             	sub    esp,0xc
c0011256:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001125a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001125e:	31 ed                	xor    ebp,ebp
c0011260:	0f af c2             	imul   eax,edx
c0011263:	50                   	push   eax
c0011264:	e8 e0 56 ff ff       	call   c0006949 <malloc>
c0011269:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001126b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001126f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011276:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001127a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001127e:	0f af c2             	imul   eax,edx
c0011281:	99                   	cdq    
c0011282:	52                   	push   edx
c0011283:	50                   	push   eax
c0011284:	56                   	push   esi
c0011285:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011288:	83 c4 20             	add    esp,0x20
c001128b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011293:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0011297:	0f 86 80 00 00 00    	jbe    c001131d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001129d:	0f b7 fd             	movzx  edi,bp
c00112a0:	c1 e7 05             	shl    edi,0x5
c00112a3:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00112a7:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00112aa:	75 6b                	jne    c0011317 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00112ac:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00112af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00112b3:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00112b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00112ba:	52                   	push   edx
c00112bb:	31 d2                	xor    edx,edx
c00112bd:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00112c0:	52                   	push   edx
c00112c1:	50                   	push   eax
c00112c2:	56                   	push   esi
c00112c3:	e8 ee 8a ff ff       	call   c0009db6 <File::seek(unsigned long long)>
c00112c8:	83 c4 10             	add    esp,0x10
c00112cb:	85 c0                	test   eax,eax
c00112cd:	74 17                	je     c00112e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00112cf:	83 ec 0c             	sub    esp,0xc
c00112d2:	68 75 ed 01 c0       	push   0xc001ed75
c00112d7:	e8 f7 83 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c00112dc:	83 c4 10             	add    esp,0x10
c00112df:	31 c0                	xor    eax,eax
c00112e1:	e9 87 00 00 00       	jmp    c001136d <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00112e6:	83 ec 0c             	sub    esp,0xc
c00112e9:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00112ec:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00112ef:	50                   	push   eax
c00112f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00112f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00112f8:	56                   	push   esi
c00112f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00112fd:	e8 d1 fb ff ff       	call   c0010ed3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0011302:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011306:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001130a:	83 c4 20             	add    esp,0x20
c001130d:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0011311:	73 04                	jae    c0011317 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011313:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011317:	45                   	inc    ebp
c0011318:	e9 76 ff ff ff       	jmp    c0011293 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001131d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0011321:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011325:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011329:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001132f:	83 ec 0c             	sub    esp,0xc
c0011332:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0011338:	25 00 f0 ff ff       	and    eax,0xfffff000
c001133d:	05 00 10 00 00       	add    eax,0x1000
c0011342:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011345:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011349:	e8 0b 56 ff ff       	call   c0006959 <free>
c001134e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011351:	e8 03 56 ff ff       	call   c0006959 <free>
c0011356:	58                   	pop    eax
c0011357:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001135b:	e8 f9 55 ff ff       	call   c0006959 <free>
c0011360:	89 34 24             	mov    DWORD PTR [esp],esi
c0011363:	e8 ee 89 ff ff       	call   c0009d56 <File::close()>
c0011368:	83 c4 10             	add    esp,0x10
c001136b:	b0 01                	mov    al,0x1
c001136d:	83 c4 3c             	add    esp,0x3c
c0011370:	5b                   	pop    ebx
c0011371:	5e                   	pop    esi
c0011372:	5f                   	pop    edi
c0011373:	5d                   	pop    ebp
c0011374:	c3                   	ret    

c0011375 <Thr::runtimeReferenceHelper()>:
c0011375:	83 ec 18             	sub    esp,0x18
c0011378:	68 7d ed 01 c0       	push   0xc001ed7d
c001137d:	e8 51 83 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0011382:	fa                   	cli    
c0011383:	83 c4 10             	add    esp,0x10
c0011386:	eb fe                	jmp    c0011386 <Thr::runtimeReferenceHelper()+0x11>

c0011388 <Thr::getAddressOfKernelSymbol(char const*)>:
c0011388:	57                   	push   edi
c0011389:	56                   	push   esi
c001138a:	53                   	push   ebx
c001138b:	31 db                	xor    ebx,ebx
c001138d:	39 1d 20 38 02 c0    	cmp    DWORD PTR ds:0xc0023820,ebx
c0011393:	7e 3c                	jle    c00113d1 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0011395:	8b 34 9d a0 37 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc860]
c001139c:	31 ff                	xor    edi,edi
c001139e:	39 3c 9d a0 36 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdc960],edi
c00113a5:	7e 27                	jle    c00113ce <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00113a7:	50                   	push   eax
c00113a8:	50                   	push   eax
c00113a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113ad:	8b 06                	mov    eax,DWORD PTR [esi]
c00113af:	03 04 9d 20 37 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc8e0]
c00113b6:	50                   	push   eax
c00113b7:	e8 34 f2 fe ff       	call   c00005f0 <strcmp>
c00113bc:	83 c4 10             	add    esp,0x10
c00113bf:	85 c0                	test   eax,eax
c00113c1:	75 05                	jne    c00113c8 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00113c3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00113c6:	eb 0b                	jmp    c00113d3 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00113c8:	83 c6 10             	add    esi,0x10
c00113cb:	47                   	inc    edi
c00113cc:	eb d0                	jmp    c001139e <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00113ce:	43                   	inc    ebx
c00113cf:	eb bc                	jmp    c001138d <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00113d1:	31 c0                	xor    eax,eax
c00113d3:	5b                   	pop    ebx
c00113d4:	5e                   	pop    esi
c00113d5:	5f                   	pop    edi
c00113d6:	c3                   	ret    

c00113d7 <Thr::loadKernelSymbolTable(char const*)>:
c00113d7:	55                   	push   ebp
c00113d8:	57                   	push   edi
c00113d9:	56                   	push   esi
c00113da:	53                   	push   ebx
c00113db:	83 ec 68             	sub    esp,0x68
c00113de:	8b 35 70 38 02 c0    	mov    esi,DWORD PTR ds:0xc0023870
c00113e4:	68 14 01 00 00       	push   0x114
c00113e9:	e8 5b 55 ff ff       	call   c0006949 <malloc>
c00113ee:	83 c4 0c             	add    esp,0xc
c00113f1:	89 c3                	mov    ebx,eax
c00113f3:	56                   	push   esi
c00113f4:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00113f8:	50                   	push   eax
c00113f9:	e8 40 88 ff ff       	call   c0009c3e <File::File(char const*, Process*)>
c00113fe:	5e                   	pop    esi
c00113ff:	5f                   	pop    edi
c0011400:	6a 01                	push   0x1
c0011402:	53                   	push   ebx
c0011403:	e8 f0 88 ff ff       	call   c0009cf8 <File::open(FileOpenMode)>
c0011408:	83 c4 10             	add    esp,0x10
c001140b:	85 c0                	test   eax,eax
c001140d:	74 0a                	je     c0011419 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001140f:	83 ec 0c             	sub    esp,0xc
c0011412:	68 9f ed 01 c0       	push   0xc001ed9f
c0011417:	eb 34                	jmp    c001144d <Thr::loadKernelSymbolTable(char const*)+0x76>
c0011419:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0011421:	83 ec 0c             	sub    esp,0xc
c0011424:	6a 34                	push   0x34
c0011426:	e8 1e 55 ff ff       	call   c0006949 <malloc>
c001142b:	59                   	pop    ecx
c001142c:	89 c7                	mov    edi,eax
c001142e:	8d 74 24 34          	lea    esi,[esp+0x34]
c0011432:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011434:	56                   	push   esi
c0011435:	57                   	push   edi
c0011436:	6a 00                	push   0x0
c0011438:	6a 34                	push   0x34
c001143a:	53                   	push   ebx
c001143b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001143e:	83 c4 20             	add    esp,0x20
c0011441:	85 c0                	test   eax,eax
c0011443:	74 17                	je     c001145c <Thr::loadKernelSymbolTable(char const*)+0x85>
c0011445:	83 ec 0c             	sub    esp,0xc
c0011448:	68 b6 ed 01 c0       	push   0xc001edb6
c001144d:	e8 57 df ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c0011452:	83 c4 10             	add    esp,0x10
c0011455:	31 c0                	xor    eax,eax
c0011457:	e9 31 02 00 00       	jmp    c001168d <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001145c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0011462:	75 e1                	jne    c0011445 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011464:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0011467:	85 c0                	test   eax,eax
c0011469:	74 da                	je     c0011445 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001146b:	52                   	push   edx
c001146c:	31 d2                	xor    edx,edx
c001146e:	52                   	push   edx
c001146f:	50                   	push   eax
c0011470:	53                   	push   ebx
c0011471:	e8 40 89 ff ff       	call   c0009db6 <File::seek(unsigned long long)>
c0011476:	83 c4 10             	add    esp,0x10
c0011479:	85 c0                	test   eax,eax
c001147b:	75 c8                	jne    c0011445 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001147d:	83 ec 0c             	sub    esp,0xc
c0011480:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011484:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011488:	31 ed                	xor    ebp,ebp
c001148a:	0f af c2             	imul   eax,edx
c001148d:	50                   	push   eax
c001148e:	e8 b6 54 ff ff       	call   c0006949 <malloc>
c0011493:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0011495:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011499:	89 34 24             	mov    DWORD PTR [esp],esi
c001149c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00114a0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00114a4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00114a8:	0f af c2             	imul   eax,edx
c00114ab:	99                   	cdq    
c00114ac:	52                   	push   edx
c00114ad:	50                   	push   eax
c00114ae:	53                   	push   ebx
c00114af:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00114b2:	83 c4 20             	add    esp,0x20
c00114b5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00114bd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00114c5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00114cd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00114d5:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00114d9:	0f 86 aa 00 00 00    	jbe    c0011589 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00114df:	0f b7 f5             	movzx  esi,bp
c00114e2:	6b f6 28             	imul   esi,esi,0x28
c00114e5:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00114e9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00114ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00114f0:	50                   	push   eax
c00114f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00114f5:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00114f9:	8b 16                	mov    edx,DWORD PTR [esi]
c00114fb:	6b c0 28             	imul   eax,eax,0x28
c00114fe:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0011502:	89 d0                	mov    eax,edx
c0011504:	31 d2                	xor    edx,edx
c0011506:	52                   	push   edx
c0011507:	50                   	push   eax
c0011508:	53                   	push   ebx
c0011509:	e8 a8 88 ff ff       	call   c0009db6 <File::seek(unsigned long long)>
c001150e:	83 c4 0c             	add    esp,0xc
c0011511:	6a 20                	push   0x20
c0011513:	6a 00                	push   0x0
c0011515:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0011519:	52                   	push   edx
c001151a:	e8 89 ef fe ff       	call   c00004a8 <memset>
c001151f:	58                   	pop    eax
c0011520:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011522:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0011526:	51                   	push   ecx
c0011527:	8d 54 24 40          	lea    edx,[esp+0x40]
c001152b:	52                   	push   edx
c001152c:	6a 00                	push   0x0
c001152e:	6a 1f                	push   0x1f
c0011530:	53                   	push   ebx
c0011531:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011534:	83 c4 18             	add    esp,0x18
c0011537:	68 cd ed 01 c0       	push   0xc001edcd
c001153c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0011540:	52                   	push   edx
c0011541:	e8 aa f0 fe ff       	call   c00005f0 <strcmp>
c0011546:	83 c4 10             	add    esp,0x10
c0011549:	85 c0                	test   eax,eax
c001154b:	75 0f                	jne    c001155c <Thr::loadKernelSymbolTable(char const*)+0x185>
c001154d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011550:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011554:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011558:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001155c:	50                   	push   eax
c001155d:	50                   	push   eax
c001155e:	68 d5 ed 01 c0       	push   0xc001edd5
c0011563:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0011567:	50                   	push   eax
c0011568:	e8 83 f0 fe ff       	call   c00005f0 <strcmp>
c001156d:	83 c4 10             	add    esp,0x10
c0011570:	85 c0                	test   eax,eax
c0011572:	75 0f                	jne    c0011583 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0011574:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011577:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001157b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001157f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011583:	45                   	inc    ebp
c0011584:	e9 4c ff ff ff       	jmp    c00114d5 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0011589:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001158e:	75 10                	jne    c00115a0 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0011590:	83 ec 0c             	sub    esp,0xc
c0011593:	68 dd ed 01 c0       	push   0xc001eddd
c0011598:	e8 0c de ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001159d:	83 c4 10             	add    esp,0x10
c00115a0:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00115a5:	75 10                	jne    c00115b7 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00115a7:	83 ec 0c             	sub    esp,0xc
c00115aa:	68 dd ed 01 c0       	push   0xc001eddd
c00115af:	e8 f5 dd ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c00115b4:	83 c4 10             	add    esp,0x10
c00115b7:	31 d2                	xor    edx,edx
c00115b9:	50                   	push   eax
c00115ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115be:	52                   	push   edx
c00115bf:	50                   	push   eax
c00115c0:	53                   	push   ebx
c00115c1:	e8 f0 87 ff ff       	call   c0009db6 <File::seek(unsigned long long)>
c00115c6:	5a                   	pop    edx
c00115c7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00115cb:	e8 79 53 ff ff       	call   c0006949 <malloc>
c00115d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00115d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00115d8:	31 c9                	xor    ecx,ecx
c00115da:	5e                   	pop    esi
c00115db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115dd:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00115e1:	55                   	push   ebp
c00115e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115e6:	51                   	push   ecx
c00115e7:	52                   	push   edx
c00115e8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00115ec:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00115f0:	53                   	push   ebx
c00115f1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00115f4:	83 c4 14             	add    esp,0x14
c00115f7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00115fb:	e8 49 53 ff ff       	call   c0006949 <malloc>
c0011600:	89 c6                	mov    esi,eax
c0011602:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011604:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011607:	56                   	push   esi
c0011608:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001160c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011610:	51                   	push   ecx
c0011611:	52                   	push   edx
c0011612:	53                   	push   ebx
c0011613:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011616:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001161a:	8b 15 20 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023820
c0011620:	83 c4 1c             	add    esp,0x1c
c0011623:	c1 e8 04             	shr    eax,0x4
c0011626:	89 04 95 a0 36 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc960],eax
c001162d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011631:	31 d2                	xor    edx,edx
c0011633:	52                   	push   edx
c0011634:	50                   	push   eax
c0011635:	53                   	push   ebx
c0011636:	e8 7b 87 ff ff       	call   c0009db6 <File::seek(unsigned long long)>
c001163b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001163d:	31 d2                	xor    edx,edx
c001163f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011642:	56                   	push   esi
c0011643:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011647:	52                   	push   edx
c0011648:	50                   	push   eax
c0011649:	53                   	push   ebx
c001164a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001164d:	83 c4 14             	add    esp,0x14
c0011650:	53                   	push   ebx
c0011651:	e8 00 87 ff ff       	call   c0009d56 <File::close()>
c0011656:	5d                   	pop    ebp
c0011657:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001165b:	e8 f9 52 ff ff       	call   c0006959 <free>
c0011660:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011663:	e8 f1 52 ff ff       	call   c0006959 <free>
c0011668:	a1 20 38 02 c0       	mov    eax,ds:0xc0023820
c001166d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0011671:	8d 50 01             	lea    edx,[eax+0x1]
c0011674:	89 0c 85 a0 37 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc860],ecx
c001167b:	89 34 85 20 37 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc8e0],esi
c0011682:	89 15 20 38 02 c0    	mov    DWORD PTR ds:0xc0023820,edx
c0011688:	83 c4 10             	add    esp,0x10
c001168b:	b0 01                	mov    al,0x1
c001168d:	83 c4 5c             	add    esp,0x5c
c0011690:	5b                   	pop    ebx
c0011691:	5e                   	pop    esi
c0011692:	5f                   	pop    edi
c0011693:	5d                   	pop    ebp
c0011694:	c3                   	ret    

c0011695 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0011695:	55                   	push   ebp
c0011696:	57                   	push   edi
c0011697:	56                   	push   esi
c0011698:	53                   	push   ebx
c0011699:	81 ec 68 03 00 00    	sub    esp,0x368
c001169f:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00116a6:	8b 1d 70 38 02 c0    	mov    ebx,DWORD PTR ds:0xc0023870
c00116ac:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00116b0:	68 14 01 00 00       	push   0x114
c00116b5:	e8 8f 52 ff ff       	call   c0006949 <malloc>
c00116ba:	83 c4 0c             	add    esp,0xc
c00116bd:	89 c5                	mov    ebp,eax
c00116bf:	53                   	push   ebx
c00116c0:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00116c7:	50                   	push   eax
c00116c8:	e8 71 85 ff ff       	call   c0009c3e <File::File(char const*, Process*)>
c00116cd:	5e                   	pop    esi
c00116ce:	5f                   	pop    edi
c00116cf:	6a 01                	push   0x1
c00116d1:	55                   	push   ebp
c00116d2:	e8 21 86 ff ff       	call   c0009cf8 <File::open(FileOpenMode)>
c00116d7:	83 c4 10             	add    esp,0x10
c00116da:	85 c0                	test   eax,eax
c00116dc:	0f 85 a7 06 00 00    	jne    c0011d89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00116e2:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00116ea:	83 ec 0c             	sub    esp,0xc
c00116ed:	6a 34                	push   0x34
c00116ef:	e8 55 52 ff ff       	call   c0006949 <malloc>
c00116f4:	5b                   	pop    ebx
c00116f5:	89 c7                	mov    edi,eax
c00116f7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00116fb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00116fe:	53                   	push   ebx
c00116ff:	57                   	push   edi
c0011700:	6a 00                	push   0x0
c0011702:	6a 34                	push   0x34
c0011704:	55                   	push   ebp
c0011705:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011708:	83 c4 20             	add    esp,0x20
c001170b:	85 c0                	test   eax,eax
c001170d:	0f 85 76 06 00 00    	jne    c0011d89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011713:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0011719:	0f 85 6a 06 00 00    	jne    c0011d89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001171f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0011722:	85 c0                	test   eax,eax
c0011724:	0f 84 5f 06 00 00    	je     c0011d89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001172a:	31 d2                	xor    edx,edx
c001172c:	51                   	push   ecx
c001172d:	52                   	push   edx
c001172e:	50                   	push   eax
c001172f:	55                   	push   ebp
c0011730:	e8 81 86 ff ff       	call   c0009db6 <File::seek(unsigned long long)>
c0011735:	83 c4 10             	add    esp,0x10
c0011738:	85 c0                	test   eax,eax
c001173a:	0f 85 49 06 00 00    	jne    c0011d89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011740:	83 ec 0c             	sub    esp,0xc
c0011743:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0011746:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001174a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001174e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011752:	0f af c2             	imul   eax,edx
c0011755:	50                   	push   eax
c0011756:	e8 ee 51 ff ff       	call   c0006949 <malloc>
c001175b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001175e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011762:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011765:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011769:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001176d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011771:	0f af c2             	imul   eax,edx
c0011774:	99                   	cdq    
c0011775:	52                   	push   edx
c0011776:	50                   	push   eax
c0011777:	55                   	push   ebp
c0011778:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001177b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001177e:	83 c4 20             	add    esp,0x20
c0011781:	85 c0                	test   eax,eax
c0011783:	0f 84 00 06 00 00    	je     c0011d89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011789:	52                   	push   edx
c001178a:	31 d2                	xor    edx,edx
c001178c:	52                   	push   edx
c001178d:	50                   	push   eax
c001178e:	55                   	push   ebp
c001178f:	e8 22 86 ff ff       	call   c0009db6 <File::seek(unsigned long long)>
c0011794:	83 c4 10             	add    esp,0x10
c0011797:	85 c0                	test   eax,eax
c0011799:	0f 85 ea 05 00 00    	jne    c0011d89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001179f:	83 ec 0c             	sub    esp,0xc
c00117a2:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00117a6:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00117aa:	31 f6                	xor    esi,esi
c00117ac:	0f af c2             	imul   eax,edx
c00117af:	50                   	push   eax
c00117b0:	e8 94 51 ff ff       	call   c0006949 <malloc>
c00117b5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00117b8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00117bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00117bf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117c3:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00117c7:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00117cb:	0f af c2             	imul   eax,edx
c00117ce:	99                   	cdq    
c00117cf:	52                   	push   edx
c00117d0:	50                   	push   eax
c00117d1:	55                   	push   ebp
c00117d2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00117d5:	83 c4 20             	add    esp,0x20
c00117d8:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00117dc:	0f 86 8a 00 00 00    	jbe    c001186c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00117e2:	0f b7 de             	movzx  ebx,si
c00117e5:	c1 e3 05             	shl    ebx,0x5
c00117e8:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00117ec:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00117ef:	75 75                	jne    c0011866 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00117f1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00117f4:	31 d2                	xor    edx,edx
c00117f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00117fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00117fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011801:	50                   	push   eax
c0011802:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0011805:	52                   	push   edx
c0011806:	50                   	push   eax
c0011807:	55                   	push   ebp
c0011808:	e8 a9 85 ff ff       	call   c0009db6 <File::seek(unsigned long long)>
c001180d:	83 c4 10             	add    esp,0x10
c0011810:	85 c0                	test   eax,eax
c0011812:	0f 85 71 05 00 00    	jne    c0011d89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011818:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001181f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011822:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0011826:	31 d2                	xor    edx,edx
c0011828:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001182c:	83 ec 0c             	sub    esp,0xc
c001182f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011833:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001183a:	50                   	push   eax
c001183b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001183f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011843:	52                   	push   edx
c0011844:	50                   	push   eax
c0011845:	55                   	push   ebp
c0011846:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011849:	83 c4 1c             	add    esp,0x1c
c001184c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001184f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0011852:	50                   	push   eax
c0011853:	6a 00                	push   0x0
c0011855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011859:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001185d:	50                   	push   eax
c001185e:	e8 45 ec fe ff       	call   c00004a8 <memset>
c0011863:	83 c4 10             	add    esp,0x10
c0011866:	46                   	inc    esi
c0011867:	e9 6c ff ff ff       	jmp    c00117d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001186c:	53                   	push   ebx
c001186d:	31 db                	xor    ebx,ebx
c001186f:	68 00 01 00 00       	push   0x100
c0011874:	6a 00                	push   0x0
c0011876:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001187a:	50                   	push   eax
c001187b:	e8 28 ec fe ff       	call   c00004a8 <memset>
c0011880:	83 c4 0c             	add    esp,0xc
c0011883:	68 00 01 00 00       	push   0x100
c0011888:	6a 00                	push   0x0
c001188a:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0011891:	50                   	push   eax
c0011892:	e8 11 ec fe ff       	call   c00004a8 <memset>
c0011897:	83 c4 10             	add    esp,0x10
c001189a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00118a2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00118aa:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00118b2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00118ba:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00118c2:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00118c6:	0f 86 30 01 00 00    	jbe    c00119fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00118cc:	0f b7 f3             	movzx  esi,bx
c00118cf:	6b f6 28             	imul   esi,esi,0x28
c00118d2:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00118d6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00118d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00118dd:	52                   	push   edx
c00118de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00118e2:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00118e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00118e8:	6b d2 28             	imul   edx,edx,0x28
c00118eb:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00118ef:	31 d2                	xor    edx,edx
c00118f1:	52                   	push   edx
c00118f2:	50                   	push   eax
c00118f3:	55                   	push   ebp
c00118f4:	e8 bd 84 ff ff       	call   c0009db6 <File::seek(unsigned long long)>
c00118f9:	83 c4 0c             	add    esp,0xc
c00118fc:	6a 20                	push   0x20
c00118fe:	6a 00                	push   0x0
c0011900:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0011907:	51                   	push   ecx
c0011908:	e8 9b eb fe ff       	call   c00004a8 <memset>
c001190d:	59                   	pop    ecx
c001190e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011911:	8d 54 24 58          	lea    edx,[esp+0x58]
c0011915:	52                   	push   edx
c0011916:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001191d:	51                   	push   ecx
c001191e:	6a 00                	push   0x0
c0011920:	6a 1f                	push   0x1f
c0011922:	55                   	push   ebp
c0011923:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011926:	83 c4 1c             	add    esp,0x1c
c0011929:	6a 09                	push   0x9
c001192b:	68 f7 ed 01 c0       	push   0xc001edf7
c0011930:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0011937:	51                   	push   ecx
c0011938:	e8 67 ea fe ff       	call   c00003a4 <memcmp>
c001193d:	83 c4 10             	add    esp,0x10
c0011940:	85 c0                	test   eax,eax
c0011942:	75 21                	jne    c0011965 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0011944:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011948:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001194c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0011950:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011954:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011957:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001195e:	89 d0                	mov    eax,edx
c0011960:	40                   	inc    eax
c0011961:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011965:	50                   	push   eax
c0011966:	6a 09                	push   0x9
c0011968:	68 01 ee 01 c0       	push   0xc001ee01
c001196d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011974:	50                   	push   eax
c0011975:	e8 2a ea fe ff       	call   c00003a4 <memcmp>
c001197a:	83 c4 10             	add    esp,0x10
c001197d:	85 c0                	test   eax,eax
c001197f:	75 21                	jne    c00119a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0011981:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011985:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011989:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001198d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011991:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011994:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001199b:	89 d0                	mov    eax,edx
c001199d:	40                   	inc    eax
c001199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00119a2:	50                   	push   eax
c00119a3:	50                   	push   eax
c00119a4:	68 cd ed 01 c0       	push   0xc001edcd
c00119a9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00119b0:	50                   	push   eax
c00119b1:	e8 3a ec fe ff       	call   c00005f0 <strcmp>
c00119b6:	83 c4 10             	add    esp,0x10
c00119b9:	85 c0                	test   eax,eax
c00119bb:	75 0f                	jne    c00119cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00119bd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00119c0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00119c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00119cc:	50                   	push   eax
c00119cd:	50                   	push   eax
c00119ce:	68 d5 ed 01 c0       	push   0xc001edd5
c00119d3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00119da:	50                   	push   eax
c00119db:	e8 10 ec fe ff       	call   c00005f0 <strcmp>
c00119e0:	83 c4 10             	add    esp,0x10
c00119e3:	85 c0                	test   eax,eax
c00119e5:	75 0f                	jne    c00119f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00119e7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00119ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00119ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119f2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00119f6:	43                   	inc    ebx
c00119f7:	e9 c6 fe ff ff       	jmp    c00118c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00119fc:	31 d2                	xor    edx,edx
c00119fe:	50                   	push   eax
c00119ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011a03:	52                   	push   edx
c0011a04:	50                   	push   eax
c0011a05:	55                   	push   ebp
c0011a06:	e8 ab 83 ff ff       	call   c0009db6 <File::seek(unsigned long long)>
c0011a0b:	58                   	pop    eax
c0011a0c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011a10:	e8 34 4f ff ff       	call   c0006949 <malloc>
c0011a15:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011a18:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011a1c:	31 d2                	xor    edx,edx
c0011a1e:	58                   	pop    eax
c0011a1f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0011a23:	53                   	push   ebx
c0011a24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011a28:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011a2c:	52                   	push   edx
c0011a2d:	50                   	push   eax
c0011a2e:	55                   	push   ebp
c0011a2f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011a32:	83 c4 14             	add    esp,0x14
c0011a35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011a39:	e8 0b 4f ff ff       	call   c0006949 <malloc>
c0011a3e:	31 d2                	xor    edx,edx
c0011a40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011a44:	83 c4 0c             	add    esp,0xc
c0011a47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011a4b:	52                   	push   edx
c0011a4c:	50                   	push   eax
c0011a4d:	55                   	push   ebp
c0011a4e:	e8 63 83 ff ff       	call   c0009db6 <File::seek(unsigned long long)>
c0011a53:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011a56:	31 d2                	xor    edx,edx
c0011a58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011a5b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011a5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a63:	52                   	push   edx
c0011a64:	50                   	push   eax
c0011a65:	55                   	push   ebp
c0011a66:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011a69:	83 c4 20             	add    esp,0x20
c0011a6c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011a74:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011a78:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0011a7c:	0f 84 0b 03 00 00    	je     c0011d8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0011a82:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0011a89:	31 d2                	xor    edx,edx
c0011a8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a8f:	c1 e8 03             	shr    eax,0x3
c0011a92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011a96:	51                   	push   ecx
c0011a97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011a9b:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0011a9f:	52                   	push   edx
c0011aa0:	50                   	push   eax
c0011aa1:	55                   	push   ebp
c0011aa2:	e8 0f 83 ff ff       	call   c0009db6 <File::seek(unsigned long long)>
c0011aa7:	5b                   	pop    ebx
c0011aa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011aac:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0011ab3:	e8 91 4e ff ff       	call   c0006949 <malloc>
c0011ab8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011abb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011abf:	31 d2                	xor    edx,edx
c0011ac1:	5e                   	pop    esi
c0011ac2:	8d 44 24 58          	lea    eax,[esp+0x58]
c0011ac6:	50                   	push   eax
c0011ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011acb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011acf:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0011ad6:	52                   	push   edx
c0011ad7:	50                   	push   eax
c0011ad8:	55                   	push   ebp
c0011ad9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011adc:	83 c4 20             	add    esp,0x20
c0011adf:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0011ae7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011aeb:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0011aef:	0f 8d 7c 02 00 00    	jge    c0011d71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0011af5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011af9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011afd:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0011b02:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0011b05:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011b09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b0d:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0011b11:	89 d8                	mov    eax,ebx
c0011b13:	c1 e8 08             	shr    eax,0x8
c0011b16:	89 c6                	mov    esi,eax
c0011b18:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011b1c:	c1 e6 04             	shl    esi,0x4
c0011b1f:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0011b23:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0011b26:	85 d2                	test   edx,edx
c0011b28:	0f 85 bf 00 00 00    	jne    c0011bed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011b2e:	83 ec 0c             	sub    esp,0xc
c0011b31:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011b35:	03 06                	add    eax,DWORD PTR [esi]
c0011b37:	50                   	push   eax
c0011b38:	e8 4b f8 ff ff       	call   c0011388 <Thr::getAddressOfKernelSymbol(char const*)>
c0011b3d:	83 c4 10             	add    esp,0x10
c0011b40:	89 c2                	mov    edx,eax
c0011b42:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0011b47:	85 c0                	test   eax,eax
c0011b49:	0f 85 9e 00 00 00    	jne    c0011bed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011b4f:	83 ec 0c             	sub    esp,0xc
c0011b52:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011b56:	03 06                	add    eax,DWORD PTR [esi]
c0011b58:	50                   	push   eax
c0011b59:	e8 ae 3d ff ff       	call   c000590c <Krnl::resolveCompatibilitySymbol(char*)>
c0011b5e:	83 c4 10             	add    esp,0x10
c0011b61:	89 c2                	mov    edx,eax
c0011b63:	85 c0                	test   eax,eax
c0011b65:	0f 85 82 00 00 00    	jne    c0011bed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011b6b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011b6f:	50                   	push   eax
c0011b70:	50                   	push   eax
c0011b71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011b75:	03 06                	add    eax,DWORD PTR [esi]
c0011b77:	50                   	push   eax
c0011b78:	68 0b ee 01 c0       	push   0xc001ee0b
c0011b7d:	e8 51 7b ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0011b82:	58                   	pop    eax
c0011b83:	5a                   	pop    edx
c0011b84:	68 25 ee 01 c0       	push   0xc001ee25
c0011b89:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011b90:	50                   	push   eax
c0011b91:	e8 ce e9 fe ff       	call   c0000564 <strcpy>
c0011b96:	59                   	pop    ecx
c0011b97:	58                   	pop    eax
c0011b98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011b9c:	03 06                	add    eax,DWORD PTR [esi]
c0011b9e:	50                   	push   eax
c0011b9f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011ba6:	50                   	push   eax
c0011ba7:	e8 f8 ea fe ff       	call   c00006a4 <strcat>
c0011bac:	58                   	pop    eax
c0011bad:	5a                   	pop    edx
c0011bae:	68 bb ee 01 c0       	push   0xc001eebb
c0011bb3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011bba:	50                   	push   eax
c0011bbb:	e8 e4 ea fe ff       	call   c00006a4 <strcat>
c0011bc0:	83 c4 10             	add    esp,0x10
c0011bc3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011bc8:	0f 84 5d 01 00 00    	je     c0011d2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011bce:	83 ec 0c             	sub    esp,0xc
c0011bd1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011bd8:	50                   	push   eax
c0011bd9:	e8 cb d7 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c0011bde:	83 c4 10             	add    esp,0x10
c0011be1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011be5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011be9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0011bed:	80 fb 01             	cmp    bl,0x1
c0011bf0:	0f 85 88 00 00 00    	jne    c0011c7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0011bf6:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0011bfd:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011c01:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0011c05:	01 ce                	add    esi,ecx
c0011c07:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0011c0d:	0f 94 c0             	sete   al
c0011c10:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0011c16:	0f 94 c3             	sete   bl
c0011c19:	09 c3                	or     ebx,eax
c0011c1b:	8b 06                	mov    eax,DWORD PTR [esi]
c0011c1d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0011c22:	74 41                	je     c0011c65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0011c24:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0011c27:	84 db                	test   bl,bl
c0011c29:	75 15                	jne    c0011c40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0011c2b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011c2f:	66 83 f8 0c          	cmp    ax,0xc
c0011c33:	76 05                	jbe    c0011c3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0011c35:	b8 0c 00 00 00       	mov    eax,0xc
c0011c3a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0011c3e:	76 37                	jbe    c0011c77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011c40:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0011c44:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011c49:	0f 84 dc 00 00 00    	je     c0011d2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011c4f:	83 ec 0c             	sub    esp,0xc
c0011c52:	68 3c ee 01 c0       	push   0xc001ee3c
c0011c57:	e8 4d d7 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c0011c5c:	83 c4 10             	add    esp,0x10
c0011c5f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011c63:	eb 12                	jmp    c0011c77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011c65:	01 c1                	add    ecx,eax
c0011c67:	84 db                	test   bl,bl
c0011c69:	75 0c                	jne    c0011c77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011c6b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011c6f:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0011c73:	77 02                	ja     c0011c77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011c75:	01 d1                	add    ecx,edx
c0011c77:	89 0e                	mov    DWORD PTR [esi],ecx
c0011c79:	e9 ea 00 00 00       	jmp    c0011d68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0011c7e:	80 fb 02             	cmp    bl,0x2
c0011c81:	75 7c                	jne    c0011cff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0011c83:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0011c8a:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0011c8e:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0011c92:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0011c98:	74 20                	je     c0011cba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0011c9a:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0011ca0:	74 18                	je     c0011cba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0011ca2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011ca6:	b9 0a 00 00 00       	mov    ecx,0xa
c0011cab:	66 83 f8 0e          	cmp    ax,0xe
c0011caf:	77 03                	ja     c0011cb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0011cb1:	8d 48 fc             	lea    ecx,[eax-0x4]
c0011cb4:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0011cb8:	76 1f                	jbe    c0011cd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0011cba:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0011cbe:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011cc3:	74 66                	je     c0011d2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011cc5:	83 ec 0c             	sub    esp,0xc
c0011cc8:	68 58 ee 01 c0       	push   0xc001ee58
c0011ccd:	e8 d7 d6 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c0011cd2:	83 c4 10             	add    esp,0x10
c0011cd5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011cd9:	8b 06                	mov    eax,DWORD PTR [esi]
c0011cdb:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0011ce0:	74 13                	je     c0011cf5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0011ce2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011ce6:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0011ced:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0011cf1:	01 c8                	add    eax,ecx
c0011cf3:	eb 04                	jmp    c0011cf9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0011cf5:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0011cf9:	01 c2                	add    edx,eax
c0011cfb:	89 16                	mov    DWORD PTR [esi],edx
c0011cfd:	eb 69                	jmp    c0011d68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0011cff:	0f b6 db             	movzx  ebx,bl
c0011d02:	50                   	push   eax
c0011d03:	50                   	push   eax
c0011d04:	53                   	push   ebx
c0011d05:	68 74 ee 01 c0       	push   0xc001ee74
c0011d0a:	e8 c4 79 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0011d0f:	83 c4 10             	add    esp,0x10
c0011d12:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011d17:	74 12                	je     c0011d2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011d19:	83 ec 0c             	sub    esp,0xc
c0011d1c:	68 7f ee 01 c0       	push   0xc001ee7f
c0011d21:	e8 83 d6 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c0011d26:	83 c4 10             	add    esp,0x10
c0011d29:	eb 3d                	jmp    c0011d68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0011d2b:	83 ec 0c             	sub    esp,0xc
c0011d2e:	55                   	push   ebp
c0011d2f:	e8 22 80 ff ff       	call   c0009d56 <File::close()>
c0011d34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011d37:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011d3a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d3d:	59                   	pop    ecx
c0011d3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011d42:	e8 12 4c ff ff       	call   c0006959 <free>
c0011d47:	5b                   	pop    ebx
c0011d48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011d4c:	e8 08 4c ff ff       	call   c0006959 <free>
c0011d51:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d54:	e8 00 4c ff ff       	call   c0006959 <free>
c0011d59:	5e                   	pop    esi
c0011d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d5e:	e8 f6 4b ff ff       	call   c0006959 <free>
c0011d63:	83 c4 10             	add    esp,0x10
c0011d66:	eb 21                	jmp    c0011d89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011d68:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0011d6c:	e9 76 fd ff ff       	jmp    c0011ae7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0011d71:	83 ec 0c             	sub    esp,0xc
c0011d74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011d78:	e8 dc 4b ff ff       	call   c0006959 <free>
c0011d7d:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0011d81:	83 c4 10             	add    esp,0x10
c0011d84:	e9 eb fc ff ff       	jmp    c0011a74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0011d89:	31 c0                	xor    eax,eax
c0011d8b:	eb 33                	jmp    c0011dc0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0011d8d:	83 ec 0c             	sub    esp,0xc
c0011d90:	55                   	push   ebp
c0011d91:	e8 c0 7f ff ff       	call   c0009d56 <File::close()>
c0011d96:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011d99:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011d9c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d9f:	58                   	pop    eax
c0011da0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011da4:	e8 b0 4b ff ff       	call   c0006959 <free>
c0011da9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011dac:	e8 a8 4b ff ff       	call   c0006959 <free>
c0011db1:	5a                   	pop    edx
c0011db2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011db6:	e8 9e 4b ff ff       	call   c0006959 <free>
c0011dbb:	83 c4 10             	add    esp,0x10
c0011dbe:	b0 01                	mov    al,0x1
c0011dc0:	81 c4 5c 03 00 00    	add    esp,0x35c
c0011dc6:	5b                   	pop    ebx
c0011dc7:	5e                   	pop    esi
c0011dc8:	5f                   	pop    edi
c0011dc9:	5d                   	pop    ebp
c0011dca:	c3                   	ret    

c0011dcb <Thr::getDriverBaseFromAddress(unsigned long)>:
c0011dcb:	56                   	push   esi
c0011dcc:	31 d2                	xor    edx,edx
c0011dce:	53                   	push   ebx
c0011dcf:	8b 1d 80 30 02 c0    	mov    ebx,DWORD PTR ds:0xc0023080
c0011dd5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011dd9:	39 d3                	cmp    ebx,edx
c0011ddb:	7e 1b                	jle    c0011df8 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0011ddd:	8b 04 95 a0 32 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcd60]
c0011de4:	39 c8                	cmp    eax,ecx
c0011de6:	77 0d                	ja     c0011df5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0011de8:	8b 34 95 a0 30 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdcf60]
c0011def:	01 c6                	add    esi,eax
c0011df1:	39 ce                	cmp    esi,ecx
c0011df3:	77 05                	ja     c0011dfa <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0011df5:	42                   	inc    edx
c0011df6:	eb e1                	jmp    c0011dd9 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0011df8:	31 c0                	xor    eax,eax
c0011dfa:	5b                   	pop    ebx
c0011dfb:	5e                   	pop    esi
c0011dfc:	c3                   	ret    

c0011dfd <Thr::getDriverNameFromAddress(unsigned long)>:
c0011dfd:	53                   	push   ebx
c0011dfe:	31 c0                	xor    eax,eax
c0011e00:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011e04:	8b 1d 80 30 02 c0    	mov    ebx,DWORD PTR ds:0xc0023080
c0011e0a:	39 c3                	cmp    ebx,eax
c0011e0c:	7e 22                	jle    c0011e30 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0011e0e:	8b 14 85 a0 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcd60]
c0011e15:	39 ca                	cmp    edx,ecx
c0011e17:	77 14                	ja     c0011e2d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0011e19:	03 14 85 a0 30 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdcf60]
c0011e20:	39 ca                	cmp    edx,ecx
c0011e22:	76 09                	jbe    c0011e2d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0011e24:	8b 04 85 a0 34 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcb60]
c0011e2b:	eb 05                	jmp    c0011e32 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0011e2d:	40                   	inc    eax
c0011e2e:	eb da                	jmp    c0011e0a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0011e30:	31 c0                	xor    eax,eax
c0011e32:	5b                   	pop    ebx
c0011e33:	c3                   	ret    

c0011e34 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0011e34:	53                   	push   ebx
c0011e35:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0011e39:	53                   	push   ebx
c0011e3a:	e8 8c ff ff ff       	call   c0011dcb <Thr::getDriverBaseFromAddress(unsigned long)>
c0011e3f:	5a                   	pop    edx
c0011e40:	31 d2                	xor    edx,edx
c0011e42:	85 c0                	test   eax,eax
c0011e44:	74 04                	je     c0011e4a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0011e46:	89 da                	mov    edx,ebx
c0011e48:	29 c2                	sub    edx,eax
c0011e4a:	89 d0                	mov    eax,edx
c0011e4c:	5b                   	pop    ebx
c0011e4d:	c3                   	ret    

c0011e4e <Thr::loadDLL(char const*, bool)>:
c0011e4e:	55                   	push   ebp
c0011e4f:	57                   	push   edi
c0011e50:	56                   	push   esi
c0011e51:	53                   	push   ebx
c0011e52:	81 ec 34 01 00 00    	sub    esp,0x134
c0011e58:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0011e5f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0011e66:	56                   	push   esi
c0011e67:	68 97 ee 01 c0       	push   0xc001ee97
c0011e6c:	e8 62 78 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0011e71:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011e78:	e8 cc 4a ff ff       	call   c0006949 <malloc>
c0011e7d:	83 c4 0c             	add    esp,0xc
c0011e80:	89 c3                	mov    ebx,eax
c0011e82:	ff 35 70 38 02 c0    	push   DWORD PTR ds:0xc0023870
c0011e88:	56                   	push   esi
c0011e89:	50                   	push   eax
c0011e8a:	e8 af 7d ff ff       	call   c0009c3e <File::File(char const*, Process*)>
c0011e8f:	83 c4 10             	add    esp,0x10
c0011e92:	85 db                	test   ebx,ebx
c0011e94:	75 3c                	jne    c0011ed2 <Thr::loadDLL(char const*, bool)+0x84>
c0011e96:	89 f8                	mov    eax,edi
c0011e98:	84 c0                	test   al,al
c0011e9a:	0f 84 d2 01 00 00    	je     c0012072 <Thr::loadDLL(char const*, bool)+0x224>
c0011ea0:	55                   	push   ebp
c0011ea1:	55                   	push   ebp
c0011ea2:	68 a8 ee 01 c0       	push   0xc001eea8
c0011ea7:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0011eab:	55                   	push   ebp
c0011eac:	e8 b3 e6 fe ff       	call   c0000564 <strcpy>
c0011eb1:	58                   	pop    eax
c0011eb2:	5a                   	pop    edx
c0011eb3:	56                   	push   esi
c0011eb4:	55                   	push   ebp
c0011eb5:	e8 ea e7 fe ff       	call   c00006a4 <strcat>
c0011eba:	59                   	pop    ecx
c0011ebb:	58                   	pop    eax
c0011ebc:	68 bb ee 01 c0       	push   0xc001eebb
c0011ec1:	55                   	push   ebp
c0011ec2:	e8 dd e7 fe ff       	call   c00006a4 <strcat>
c0011ec7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011eca:	e8 da d4 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c0011ecf:	83 c4 10             	add    esp,0x10
c0011ed2:	51                   	push   ecx
c0011ed3:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0011ed7:	50                   	push   eax
c0011ed8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0011edc:	50                   	push   eax
c0011edd:	53                   	push   ebx
c0011ede:	e8 c1 80 ff ff       	call   c0009fa4 <File::stat(unsigned long long*, bool*)>
c0011ee3:	83 c4 10             	add    esp,0x10
c0011ee6:	85 db                	test   ebx,ebx
c0011ee8:	74 0c                	je     c0011ef6 <Thr::loadDLL(char const*, bool)+0xa8>
c0011eea:	83 ec 0c             	sub    esp,0xc
c0011eed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011eef:	53                   	push   ebx
c0011ef0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ef3:	83 c4 10             	add    esp,0x10
c0011ef6:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0011efb:	75 0a                	jne    c0011f07 <Thr::loadDLL(char const*, bool)+0xb9>
c0011efd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f01:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0011f05:	75 3c                	jne    c0011f43 <Thr::loadDLL(char const*, bool)+0xf5>
c0011f07:	89 f8                	mov    eax,edi
c0011f09:	84 c0                	test   al,al
c0011f0b:	0f 84 49 01 00 00    	je     c001205a <Thr::loadDLL(char const*, bool)+0x20c>
c0011f11:	51                   	push   ecx
c0011f12:	51                   	push   ecx
c0011f13:	68 a8 ee 01 c0       	push   0xc001eea8
c0011f18:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0011f1c:	53                   	push   ebx
c0011f1d:	e8 42 e6 fe ff       	call   c0000564 <strcpy>
c0011f22:	5d                   	pop    ebp
c0011f23:	58                   	pop    eax
c0011f24:	56                   	push   esi
c0011f25:	53                   	push   ebx
c0011f26:	e8 79 e7 fe ff       	call   c00006a4 <strcat>
c0011f2b:	58                   	pop    eax
c0011f2c:	5a                   	pop    edx
c0011f2d:	68 bb ee 01 c0       	push   0xc001eebb
c0011f32:	53                   	push   ebx
c0011f33:	e8 6c e7 fe ff       	call   c00006a4 <strcat>
c0011f38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011f3b:	e8 69 d4 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c0011f40:	83 c4 10             	add    esp,0x10
c0011f43:	52                   	push   edx
c0011f44:	6a 03                	push   0x3
c0011f46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f4a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011f4e:	05 ff 0f 00 00       	add    eax,0xfff
c0011f53:	83 d2 00             	adc    edx,0x0
c0011f56:	0f ac d0 0c          	shrd   eax,edx,0xc
c0011f5a:	50                   	push   eax
c0011f5b:	ff 35 54 04 02 c0    	push   DWORD PTR ds:0xc0020454
c0011f61:	e8 62 6c ff ff       	call   c0008bc8 <VAS::allocatePages(int, int)>
c0011f66:	59                   	pop    ecx
c0011f67:	89 c3                	mov    ebx,eax
c0011f69:	5d                   	pop    ebp
c0011f6a:	50                   	push   eax
c0011f6b:	68 2e db 01 c0       	push   0xc001db2e
c0011f70:	e8 5e 77 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0011f75:	89 34 24             	mov    DWORD PTR [esp],esi
c0011f78:	e8 47 e5 fe ff       	call   c00004c4 <strlen>
c0011f7d:	8b 2d 80 30 02 c0    	mov    ebp,DWORD PTR ds:0xc0023080
c0011f83:	40                   	inc    eax
c0011f84:	89 04 24             	mov    DWORD PTR [esp],eax
c0011f87:	e8 bd 49 ff ff       	call   c0006949 <malloc>
c0011f8c:	89 04 ad a0 34 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdcb60],eax
c0011f93:	58                   	pop    eax
c0011f94:	a1 80 30 02 c0       	mov    eax,ds:0xc0023080
c0011f99:	5a                   	pop    edx
c0011f9a:	56                   	push   esi
c0011f9b:	ff 34 85 a0 34 02 c0 	push   DWORD PTR [eax*4-0x3ffdcb60]
c0011fa2:	e8 bd e5 fe ff       	call   c0000564 <strcpy>
c0011fa7:	a1 80 30 02 c0       	mov    eax,ds:0xc0023080
c0011fac:	8d 50 01             	lea    edx,[eax+0x1]
c0011faf:	89 1c 85 a0 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcd60],ebx
c0011fb6:	89 15 80 30 02 c0    	mov    DWORD PTR ds:0xc0023080,edx
c0011fbc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011fc0:	83 c4 0c             	add    esp,0xc
c0011fc3:	89 14 85 a0 30 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcf60],edx
c0011fca:	6a 01                	push   0x1
c0011fcc:	53                   	push   ebx
c0011fcd:	56                   	push   esi
c0011fce:	e8 c2 f6 ff ff       	call   c0011695 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0011fd3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011fd7:	83 c4 10             	add    esp,0x10
c0011fda:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011fdf:	0f 85 89 00 00 00    	jne    c001206e <Thr::loadDLL(char const*, bool)+0x220>
c0011fe5:	89 f8                	mov    eax,edi
c0011fe7:	84 c0                	test   al,al
c0011fe9:	74 73                	je     c001205e <Thr::loadDLL(char const*, bool)+0x210>
c0011feb:	83 ec 0c             	sub    esp,0xc
c0011fee:	68 bd ee 01 c0       	push   0xc001eebd
c0011ff3:	e8 b1 d3 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c0011ff8:	83 c4 10             	add    esp,0x10
c0011ffb:	eb 61                	jmp    c001205e <Thr::loadDLL(char const*, bool)+0x210>
c0011ffd:	50                   	push   eax
c0011ffe:	50                   	push   eax
c0011fff:	89 e8                	mov    eax,ebp
c0012001:	c1 e0 0c             	shl    eax,0xc
c0012004:	01 d8                	add    eax,ebx
c0012006:	50                   	push   eax
c0012007:	ff 35 54 04 02 c0    	push   DWORD PTR ds:0xc0020454
c001200d:	e8 34 67 ff ff       	call   c0008746 <VAS::getPageTableEntry(unsigned long)>
c0012012:	83 c4 10             	add    esp,0x10
c0012015:	8b 00                	mov    eax,DWORD PTR [eax]
c0012017:	a8 60                	test   al,0x60
c0012019:	75 11                	jne    c001202c <Thr::loadDLL(char const*, bool)+0x1de>
c001201b:	83 ec 0c             	sub    esp,0xc
c001201e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012023:	50                   	push   eax
c0012024:	e8 85 4c ff ff       	call   c0006cae <Phys::freePage(unsigned long)>
c0012029:	83 c4 10             	add    esp,0x10
c001202c:	45                   	inc    ebp
c001202d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012031:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012035:	05 ff 0f 00 00       	add    eax,0xfff
c001203a:	bf 00 00 00 00       	mov    edi,0x0
c001203f:	83 d2 00             	adc    edx,0x0
c0012042:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012046:	c1 ea 0c             	shr    edx,0xc
c0012049:	39 c5                	cmp    ebp,eax
c001204b:	89 d1                	mov    ecx,edx
c001204d:	89 f8                	mov    eax,edi
c001204f:	19 c8                	sbb    eax,ecx
c0012051:	72 aa                	jb     c0011ffd <Thr::loadDLL(char const*, bool)+0x1af>
c0012053:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012058:	75 18                	jne    c0012072 <Thr::loadDLL(char const*, bool)+0x224>
c001205a:	31 db                	xor    ebx,ebx
c001205c:	eb 14                	jmp    c0012072 <Thr::loadDLL(char const*, bool)+0x224>
c001205e:	83 ec 0c             	sub    esp,0xc
c0012061:	68 dc ee 01 c0       	push   0xc001eedc
c0012066:	e8 3e d3 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001206b:	83 c4 10             	add    esp,0x10
c001206e:	31 ed                	xor    ebp,ebp
c0012070:	eb bb                	jmp    c001202d <Thr::loadDLL(char const*, bool)+0x1df>
c0012072:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012078:	89 d8                	mov    eax,ebx
c001207a:	5b                   	pop    ebx
c001207b:	5e                   	pop    esi
c001207c:	5f                   	pop    edi
c001207d:	5d                   	pop    ebp
c001207e:	c3                   	ret    

c001207f <Thr::executeDLL(unsigned long, void*)>:
c001207f:	56                   	push   esi
c0012080:	53                   	push   ebx
c0012081:	52                   	push   edx
c0012082:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012086:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001208a:	85 db                	test   ebx,ebx
c001208c:	75 10                	jne    c001209e <Thr::executeDLL(unsigned long, void*)+0x1f>
c001208e:	83 ec 0c             	sub    esp,0xc
c0012091:	68 f8 ee 01 c0       	push   0xc001eef8
c0012096:	e8 0e d3 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001209b:	83 c4 10             	add    esp,0x10
c001209e:	50                   	push   eax
c001209f:	50                   	push   eax
c00120a0:	53                   	push   ebx
c00120a1:	68 22 ef 01 c0       	push   0xc001ef22
c00120a6:	e8 28 76 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c00120ab:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00120af:	89 d8                	mov    eax,ebx
c00120b1:	83 c4 14             	add    esp,0x14
c00120b4:	5b                   	pop    ebx
c00120b5:	5e                   	pop    esi
c00120b6:	ff e0                	jmp    eax

c00120b8 <userModeEntryPoint(void*)>:
c00120b8:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00120bd:	48                   	dec    eax
c00120be:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c00120c3:	75 03                	jne    c00120c8 <userModeEntryPoint(void*)+0x10>
c00120c5:	fb                   	sti    
c00120c6:	66 90                	xchg   ax,ax
c00120c8:	fb                   	sti    
c00120c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120d1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00120d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00120db:	e9 7f e1 fe ff       	jmp    c000025f <goToUsermode>

c00120e0 <changeTSS>:
c00120e0:	83 ec 14             	sub    esp,0x14
c00120e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120e8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00120eb:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00120f0:	c1 e2 15             	shl    edx,0x15
c00120f3:	29 d0                	sub    eax,edx
c00120f5:	50                   	push   eax
c00120f6:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c00120fb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012101:	05 7c 11 00 00       	add    eax,0x117c
c0012106:	50                   	push   eax
c0012107:	e8 b8 5c ff ff       	call   c0007dc4 <TSS::setESP(unsigned long)>
c001210c:	83 c4 1c             	add    esp,0x1c
c001210f:	c3                   	ret    

c0012110 <switchToThread(ThreadControlBlock*)>:
c0012110:	57                   	push   edi
c0012111:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c0012116:	56                   	push   esi
c0012117:	85 c0                	test   eax,eax
c0012119:	53                   	push   ebx
c001211a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001211e:	0f 85 88 00 00 00    	jne    c00121ac <switchToThread(ThreadControlBlock*)+0x9c>
c0012124:	8a 43 40             	mov    al,BYTE PTR [ebx+0x40]
c0012127:	3c ff                	cmp    al,0xff
c0012129:	74 7d                	je     c00121a8 <switchToThread(ThreadControlBlock*)+0x98>
c001212b:	0f b6 d0             	movzx  edx,al
c001212e:	b8 00 04 00 00       	mov    eax,0x400
c0012133:	29 d0                	sub    eax,edx
c0012135:	d1 f8                	sar    eax,1
c0012137:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c001213a:	66 90                	xchg   ax,ax
c001213c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001213f:	ff 15 38 39 02 c0    	call   DWORD PTR ds:0xc0023938
c0012145:	a3 88 38 02 c0       	mov    ds:0xc0023888,eax
c001214a:	89 15 8c 38 02 c0    	mov    DWORD PTR ds:0xc002388c,edx
c0012150:	89 c6                	mov    esi,eax
c0012152:	89 d7                	mov    edi,edx
c0012154:	2b 35 78 38 02 c0    	sub    esi,DWORD PTR ds:0xc0023878
c001215a:	a3 78 38 02 c0       	mov    ds:0xc0023878,eax
c001215f:	1b 3d 7c 38 02 c0    	sbb    edi,DWORD PTR ds:0xc002387c
c0012165:	89 35 80 38 02 c0    	mov    DWORD PTR ds:0xc0023880,esi
c001216b:	89 3d 84 38 02 c0    	mov    DWORD PTR ds:0xc0023884,edi
c0012171:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012177:	89 15 7c 38 02 c0    	mov    DWORD PTR ds:0xc002387c,edx
c001217d:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0012180:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0012183:	01 c6                	add    esi,eax
c0012185:	11 d7                	adc    edi,edx
c0012187:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001218a:	83 ec 0c             	sub    esp,0xc
c001218d:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0012190:	53                   	push   ebx
c0012191:	e8 01 e1 fe ff       	call   c0000297 <switchToThreadASM>
c0012196:	0f 20 c0             	mov    eax,cr0
c0012199:	83 c8 08             	or     eax,0x8
c001219c:	0f 22 c0             	mov    cr0,eax
c001219f:	83 c4 10             	add    esp,0x10
c00121a2:	5b                   	pop    ebx
c00121a3:	5e                   	pop    esi
c00121a4:	5f                   	pop    edi
c00121a5:	c3                   	ret    
c00121a6:	66 90                	xchg   ax,ax
c00121a8:	31 c0                	xor    eax,eax
c00121aa:	eb 90                	jmp    c001213c <switchToThread(ThreadControlBlock*)+0x2c>
c00121ac:	5b                   	pop    ebx
c00121ad:	c7 05 40 38 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x1
c00121b7:	5e                   	pop    esi
c00121b8:	5f                   	pop    edi
c00121b9:	c3                   	ret    
c00121ba:	66 90                	xchg   ax,ax

c00121bc <Process::addArgs(char**)>:
c00121bc:	57                   	push   edi
c00121bd:	56                   	push   esi
c00121be:	53                   	push   ebx
c00121bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00121c3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00121c7:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00121d1:	85 ff                	test   edi,edi
c00121d3:	74 43                	je     c0012218 <Process::addArgs(char**)+0x5c>
c00121d5:	8b 07                	mov    eax,DWORD PTR [edi]
c00121d7:	85 c0                	test   eax,eax
c00121d9:	74 3d                	je     c0012218 <Process::addArgs(char**)+0x5c>
c00121db:	31 db                	xor    ebx,ebx
c00121dd:	8d 76 00             	lea    esi,[esi+0x0]
c00121e0:	83 ec 0c             	sub    esp,0xc
c00121e3:	50                   	push   eax
c00121e4:	e8 db e2 fe ff       	call   c00004c4 <strlen>
c00121e9:	40                   	inc    eax
c00121ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00121ed:	e8 57 47 ff ff       	call   c0006949 <malloc>
c00121f2:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00121f9:	5a                   	pop    edx
c00121fa:	59                   	pop    ecx
c00121fb:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00121fe:	43                   	inc    ebx
c00121ff:	50                   	push   eax
c0012200:	e8 5f e3 fe ff       	call   c0000564 <strcpy>
c0012205:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c001220b:	83 c4 10             	add    esp,0x10
c001220e:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0012211:	85 c0                	test   eax,eax
c0012213:	75 cb                	jne    c00121e0 <Process::addArgs(char**)+0x24>
c0012215:	8d 76 00             	lea    esi,[esi+0x0]
c0012218:	5b                   	pop    ebx
c0012219:	5e                   	pop    esi
c001221a:	5f                   	pop    edi
c001221b:	c3                   	ret    

c001221c <Process::Process(char const*, Process*, char**)>:
c001221c:	56                   	push   esi
c001221d:	53                   	push   ebx
c001221e:	83 ec 14             	sub    esp,0x14
c0012221:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012225:	05 0c 02 00 00       	add    eax,0x20c
c001222a:	bb 07 00 00 00       	mov    ebx,0x7
c001222f:	89 c6                	mov    esi,eax
c0012231:	8d 76 00             	lea    esi,[esi+0x0]
c0012234:	85 db                	test   ebx,ebx
c0012236:	78 14                	js     c001224c <Process::Process(char const*, Process*, char**)+0x30>
c0012238:	83 ec 0c             	sub    esp,0xc
c001223b:	56                   	push   esi
c001223c:	e8 8b ab 00 00       	call   c001cdcc <ThreadControlBlock::ThreadControlBlock()>
c0012241:	83 c4 10             	add    esp,0x10
c0012244:	83 c6 5f             	add    esi,0x5f
c0012247:	4b                   	dec    ebx
c0012248:	eb ea                	jmp    c0012234 <Process::Process(char const*, Process*, char**)+0x18>
c001224a:	66 90                	xchg   ax,ax
c001224c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012250:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0012257:	83 ec 0c             	sub    esp,0xc
c001225a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001225e:	e8 cf cf ff ff       	call   c000f232 <Krnl::newProcessEnv(Process*)>
c0012263:	83 c4 10             	add    esp,0x10
c0012266:	89 c2                	mov    edx,eax
c0012268:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001226c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0012272:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012276:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001227f:	a1 90 fd 01 c0       	mov    eax,ds:0xc001fd90
c0012284:	8d 50 01             	lea    edx,[eax+0x1]
c0012287:	89 15 90 fd 01 c0    	mov    DWORD PTR ds:0xc001fd90,edx
c001228d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012291:	89 02                	mov    DWORD PTR [edx],eax
c0012293:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001229b:	83 ec 0c             	sub    esp,0xc
c001229e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00122a2:	e8 a2 46 ff ff       	call   c0006949 <malloc>
c00122a7:	83 c4 10             	add    esp,0x10
c00122aa:	89 c3                	mov    ebx,eax
c00122ac:	83 ec 08             	sub    esp,0x8
c00122af:	6a 00                	push   0x0
c00122b1:	53                   	push   ebx
c00122b2:	e8 b9 6c ff ff       	call   c0008f70 <VAS::VAS(bool)>
c00122b7:	83 c4 10             	add    esp,0x10
c00122ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122be:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00122c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122c8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00122d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122d6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00122da:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00122e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122e4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00122ea:	85 c0                	test   eax,eax
c00122ec:	74 42                	je     c0012330 <Process::Process(char const*, Process*, char**)+0x114>
c00122ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122f2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00122f8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00122fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012302:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001230c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012312:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012318:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001231c:	05 0c 01 00 00       	add    eax,0x10c
c0012321:	83 ec 08             	sub    esp,0x8
c0012324:	52                   	push   edx
c0012325:	50                   	push   eax
c0012326:	e8 39 e2 fe ff       	call   c0000564 <strcpy>
c001232b:	83 c4 10             	add    esp,0x10
c001232e:	eb 64                	jmp    c0012394 <Process::Process(char const*, Process*, char**)+0x178>
c0012330:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0012338:	83 ec 0c             	sub    esp,0xc
c001233b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001233f:	e8 05 46 ff ff       	call   c0006949 <malloc>
c0012344:	83 c4 10             	add    esp,0x10
c0012347:	89 c3                	mov    ebx,eax
c0012349:	83 ec 08             	sub    esp,0x8
c001234c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012350:	53                   	push   ebx
c0012351:	e8 12 58 ff ff       	call   c0007b68 <VgaText::VgaText(char const*)>
c0012356:	83 c4 10             	add    esp,0x10
c0012359:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001235d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0012363:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012367:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001236d:	83 ec 0c             	sub    esp,0xc
c0012370:	50                   	push   eax
c0012371:	e8 96 50 ff ff       	call   c000740c <addToTerminalCycle(VgaText*)>
c0012376:	83 c4 10             	add    esp,0x10
c0012379:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001237d:	05 0c 01 00 00       	add    eax,0x10c
c0012382:	83 ec 08             	sub    esp,0x8
c0012385:	68 41 ef 01 c0       	push   0xc001ef41
c001238a:	50                   	push   eax
c001238b:	e8 d4 e1 fe ff       	call   c0000564 <strcpy>
c0012390:	83 c4 10             	add    esp,0x10
c0012393:	90                   	nop
c0012394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012398:	83 c0 0c             	add    eax,0xc
c001239b:	83 ec 08             	sub    esp,0x8
c001239e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00123a2:	50                   	push   eax
c00123a3:	e8 bc e1 fe ff       	call   c0000564 <strcpy>
c00123a8:	83 c4 10             	add    esp,0x10
c00123ab:	83 ec 08             	sub    esp,0x8
c00123ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00123b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00123b6:	e8 01 fe ff ff       	call   c00121bc <Process::addArgs(char**)>
c00123bb:	83 c4 10             	add    esp,0x10
c00123be:	83 ec 08             	sub    esp,0x8
c00123c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00123c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00123c9:	e8 91 ed ff ff       	call   c001115f <Thr::loadProgramIntoMemory(Process*, char const*)>
c00123ce:	83 c4 10             	add    esp,0x10
c00123d1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00123d5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00123d9:	83 f0 01             	xor    eax,0x1
c00123dc:	88 c2                	mov    dl,al
c00123de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123e2:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00123e8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00123ed:	83 ec 08             	sub    esp,0x8
c00123f0:	50                   	push   eax
c00123f1:	68 98 ef 01 c0       	push   0xc001ef98
c00123f6:	e8 d8 72 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c00123fb:	83 c4 10             	add    esp,0x10
c00123fe:	90                   	nop
c00123ff:	83 c4 14             	add    esp,0x14
c0012402:	5b                   	pop    ebx
c0012403:	5e                   	pop    esi
c0012404:	c3                   	ret    
c0012405:	90                   	nop
c0012406:	66 90                	xchg   ax,ax

c0012408 <Process::Process(bool, char const*, Process*, char**)>:
c0012408:	56                   	push   esi
c0012409:	53                   	push   ebx
c001240a:	83 ec 24             	sub    esp,0x24
c001240d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012411:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012415:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012419:	05 0c 02 00 00       	add    eax,0x20c
c001241e:	bb 07 00 00 00       	mov    ebx,0x7
c0012423:	89 c6                	mov    esi,eax
c0012425:	8d 76 00             	lea    esi,[esi+0x0]
c0012428:	85 db                	test   ebx,ebx
c001242a:	78 14                	js     c0012440 <Process::Process(bool, char const*, Process*, char**)+0x38>
c001242c:	83 ec 0c             	sub    esp,0xc
c001242f:	56                   	push   esi
c0012430:	e8 97 a9 00 00       	call   c001cdcc <ThreadControlBlock::ThreadControlBlock()>
c0012435:	83 c4 10             	add    esp,0x10
c0012438:	83 c6 5f             	add    esi,0x5f
c001243b:	4b                   	dec    ebx
c001243c:	eb ea                	jmp    c0012428 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001243e:	66 90                	xchg   ax,ax
c0012440:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012444:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001244b:	83 ec 0c             	sub    esp,0xc
c001244e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012452:	e8 db cd ff ff       	call   c000f232 <Krnl::newProcessEnv(Process*)>
c0012457:	83 c4 10             	add    esp,0x10
c001245a:	89 c2                	mov    edx,eax
c001245c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012460:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0012466:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001246a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0012473:	a1 90 fd 01 c0       	mov    eax,ds:0xc001fd90
c0012478:	8d 50 01             	lea    edx,[eax+0x1]
c001247b:	89 15 90 fd 01 c0    	mov    DWORD PTR ds:0xc001fd90,edx
c0012481:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012485:	89 02                	mov    DWORD PTR [edx],eax
c0012487:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001248f:	83 ec 0c             	sub    esp,0xc
c0012492:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012496:	e8 ae 44 ff ff       	call   c0006949 <malloc>
c001249b:	83 c4 10             	add    esp,0x10
c001249e:	89 c3                	mov    ebx,eax
c00124a0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00124a5:	83 ec 08             	sub    esp,0x8
c00124a8:	50                   	push   eax
c00124a9:	53                   	push   ebx
c00124aa:	e8 c1 6a ff ff       	call   c0008f70 <VAS::VAS(bool)>
c00124af:	83 c4 10             	add    esp,0x10
c00124b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124b6:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00124bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124c0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00124ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124ce:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00124d2:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00124d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124dc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00124e2:	85 c0                	test   eax,eax
c00124e4:	74 42                	je     c0012528 <Process::Process(bool, char const*, Process*, char**)+0x120>
c00124e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124ea:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00124f0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00124f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124fa:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012500:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012504:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001250a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012510:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012514:	05 0c 01 00 00       	add    eax,0x10c
c0012519:	83 ec 08             	sub    esp,0x8
c001251c:	52                   	push   edx
c001251d:	50                   	push   eax
c001251e:	e8 41 e0 fe ff       	call   c0000564 <strcpy>
c0012523:	83 c4 10             	add    esp,0x10
c0012526:	eb 64                	jmp    c001258c <Process::Process(bool, char const*, Process*, char**)+0x184>
c0012528:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c0012530:	83 ec 0c             	sub    esp,0xc
c0012533:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012537:	e8 0d 44 ff ff       	call   c0006949 <malloc>
c001253c:	83 c4 10             	add    esp,0x10
c001253f:	89 c3                	mov    ebx,eax
c0012541:	83 ec 08             	sub    esp,0x8
c0012544:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012548:	53                   	push   ebx
c0012549:	e8 1a 56 ff ff       	call   c0007b68 <VgaText::VgaText(char const*)>
c001254e:	83 c4 10             	add    esp,0x10
c0012551:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012555:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001255b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001255f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012565:	83 ec 0c             	sub    esp,0xc
c0012568:	50                   	push   eax
c0012569:	e8 9e 4e ff ff       	call   c000740c <addToTerminalCycle(VgaText*)>
c001256e:	83 c4 10             	add    esp,0x10
c0012571:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012575:	05 0c 01 00 00       	add    eax,0x10c
c001257a:	83 ec 08             	sub    esp,0x8
c001257d:	68 41 ef 01 c0       	push   0xc001ef41
c0012582:	50                   	push   eax
c0012583:	e8 dc df fe ff       	call   c0000564 <strcpy>
c0012588:	83 c4 10             	add    esp,0x10
c001258b:	90                   	nop
c001258c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012590:	83 c0 0c             	add    eax,0xc
c0012593:	83 ec 08             	sub    esp,0x8
c0012596:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001259a:	50                   	push   eax
c001259b:	e8 c4 df fe ff       	call   c0000564 <strcpy>
c00125a0:	83 c4 10             	add    esp,0x10
c00125a3:	83 ec 08             	sub    esp,0x8
c00125a6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00125aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00125ae:	e8 09 fc ff ff       	call   c00121bc <Process::addArgs(char**)>
c00125b3:	83 c4 10             	add    esp,0x10
c00125b6:	90                   	nop
c00125b7:	83 c4 24             	add    esp,0x24
c00125ba:	5b                   	pop    ebx
c00125bb:	5e                   	pop    esi
c00125bc:	c3                   	ret    
c00125bd:	8d 76 00             	lea    esi,[esi+0x0]

c00125c0 <taskStartupFunction>:
c00125c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125c5:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00125c8:	c3                   	ret    
c00125c9:	90                   	nop
c00125ca:	66 90                	xchg   ax,ax

c00125cc <Semaphore::Semaphore(int)>:
c00125cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00125d4:	89 10                	mov    DWORD PTR [eax],edx
c00125d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125da:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00125e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125e5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00125ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125f0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00125f7:	90                   	nop
c00125f8:	c3                   	ret    
c00125f9:	90                   	nop
c00125fa:	66 90                	xchg   ax,ax

c00125fc <Mutex::Mutex()>:
c00125fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012600:	6a 01                	push   0x1
c0012602:	50                   	push   eax
c0012603:	e8 c4 ff ff ff       	call   c00125cc <Semaphore::Semaphore(int)>
c0012608:	83 c4 08             	add    esp,0x8
c001260b:	90                   	nop
c001260c:	c3                   	ret    
c001260d:	90                   	nop
c001260e:	66 90                	xchg   ax,ax

c0012610 <Process::createThread(void (*)(void*), void*, int)>:
c0012610:	57                   	push   edi
c0012611:	31 c9                	xor    ecx,ecx
c0012613:	56                   	push   esi
c0012614:	53                   	push   ebx
c0012615:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012619:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0012620:	89 f2                	mov    edx,esi
c0012622:	66 90                	xchg   ax,ax
c0012624:	0f b7 c2             	movzx  eax,dx
c0012627:	83 e2 01             	and    edx,0x1
c001262a:	74 14                	je     c0012640 <Process::createThread(void (*)(void*), void*, int)+0x30>
c001262c:	d1 f8                	sar    eax,1
c001262e:	41                   	inc    ecx
c001262f:	89 c2                	mov    edx,eax
c0012631:	83 f9 10             	cmp    ecx,0x10
c0012634:	75 ee                	jne    c0012624 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0012636:	31 db                	xor    ebx,ebx
c0012638:	89 d8                	mov    eax,ebx
c001263a:	5b                   	pop    ebx
c001263b:	5e                   	pop    esi
c001263c:	5f                   	pop    edi
c001263d:	c3                   	ret    
c001263e:	66 90                	xchg   ax,ax
c0012640:	b8 01 00 00 00       	mov    eax,0x1
c0012645:	d3 e0                	shl    eax,cl
c0012647:	09 c6                	or     esi,eax
c0012649:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001264c:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0012653:	01 c0                	add    eax,eax
c0012655:	01 c8                	add    eax,ecx
c0012657:	8d 04 80             	lea    eax,[eax+eax*4]
c001265a:	01 d8                	add    eax,ebx
c001265c:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0012663:	75 0b                	jne    c0012670 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0012665:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001266f:	90                   	nop
c0012670:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0012676:	83 ec 08             	sub    esp,0x8
c0012679:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001267c:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001267f:	01 c0                	add    eax,eax
c0012681:	01 c8                	add    eax,ecx
c0012683:	8d 3c 80             	lea    edi,[eax+eax*4]
c0012686:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0012689:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001268f:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0012695:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012699:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001269f:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00126a5:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00126ac:	89 ca                	mov    edx,ecx
c00126ae:	f7 da                	neg    edx
c00126b0:	c1 e2 15             	shl    edx,0x15
c00126b3:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00126b9:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00126bf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00126c3:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00126cd:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00126d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00126d7:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00126dd:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00126e7:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00126f1:	53                   	push   ebx
c00126f2:	68 64 38 02 c0       	push   0xc0023864
c00126f7:	e8 70 a4 00 00       	call   c001cb6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00126fc:	83 c4 10             	add    esp,0x10
c00126ff:	89 d8                	mov    eax,ebx
c0012701:	5b                   	pop    ebx
c0012702:	5e                   	pop    esi
c0012703:	5f                   	pop    edi
c0012704:	c3                   	ret    
c0012705:	90                   	nop
c0012706:	66 90                	xchg   ax,ax

c0012708 <Process::createUserThread()>:
c0012708:	83 ec 0c             	sub    esp,0xc
c001270b:	68 80 00 00 00       	push   0x80
c0012710:	6a 00                	push   0x0
c0012712:	68 b8 20 01 c0       	push   0xc00120b8
c0012717:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001271b:	e8 f0 fe ff ff       	call   c0012610 <Process::createThread(void (*)(void*), void*, int)>
c0012720:	83 c4 1c             	add    esp,0x1c
c0012723:	c3                   	ret    

c0012724 <setupMultitasking(void (*)())>:
c0012724:	56                   	push   esi
c0012725:	53                   	push   ebx
c0012726:	51                   	push   ecx
c0012727:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001272b:	eb 13                	jmp    c0012740 <setupMultitasking(void (*)())+0x1c>
c001272d:	8d 76 00             	lea    esi,[esi+0x0]
c0012730:	83 ec 0c             	sub    esp,0xc
c0012733:	68 64 38 02 c0       	push   0xc0023864
c0012738:	e8 77 a3 00 00       	call   c001cab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001273d:	83 c4 10             	add    esp,0x10
c0012740:	83 ec 0c             	sub    esp,0xc
c0012743:	68 64 38 02 c0       	push   0xc0023864
c0012748:	e8 43 a3 00 00       	call   c001ca90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001274d:	83 c4 10             	add    esp,0x10
c0012750:	84 c0                	test   al,al
c0012752:	74 dc                	je     c0012730 <setupMultitasking(void (*)())+0xc>
c0012754:	83 ec 0c             	sub    esp,0xc
c0012757:	68 1f 07 00 00       	push   0x71f
c001275c:	e8 e8 41 ff ff       	call   c0006949 <malloc>
c0012761:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0012768:	89 c3                	mov    ebx,eax
c001276a:	6a 00                	push   0x0
c001276c:	68 45 ef 01 c0       	push   0xc001ef45
c0012771:	6a 01                	push   0x1
c0012773:	50                   	push   eax
c0012774:	e8 8f fc ff ff       	call   c0012408 <Process::Process(bool, char const*, Process*, char**)>
c0012779:	83 c4 14             	add    esp,0x14
c001277c:	89 1d 70 38 02 c0    	mov    DWORD PTR ds:0xc0023870,ebx
c0012782:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0012788:	e8 dc 4e ff ff       	call   c0007669 <setActiveTerminal(VgaText*)>
c001278d:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0012795:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001279f:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00127a5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00127a8:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00127b2:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00127b8:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00127be:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00127c8:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00127d2:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00127dc:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00127e2:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00127ec:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00127f2:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00127fc:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0012802:	58                   	pop    eax
c0012803:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0012809:	5a                   	pop    edx
c001280a:	68 41 ef 01 c0       	push   0xc001ef41
c001280f:	50                   	push   eax
c0012810:	e8 4f dd fe ff       	call   c0000564 <strcpy>
c0012815:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c001281c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012820:	83 c4 14             	add    esp,0x14
c0012823:	5b                   	pop    ebx
c0012824:	5e                   	pop    esi
c0012825:	e9 5f da fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c001282a:	66 90                	xchg   ax,ax

c001282c <schedule()>:
c001282c:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c0012831:	85 c0                	test   eax,eax
c0012833:	74 0b                	je     c0012840 <schedule()+0x14>
c0012835:	c7 05 40 38 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x1
c001283f:	c3                   	ret    
c0012840:	53                   	push   ebx
c0012841:	83 ec 14             	sub    esp,0x14
c0012844:	68 64 38 02 c0       	push   0xc0023864
c0012849:	e8 42 a2 00 00       	call   c001ca90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001284e:	83 c4 10             	add    esp,0x10
c0012851:	84 c0                	test   al,al
c0012853:	75 3b                	jne    c0012890 <schedule()+0x64>
c0012855:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001285a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001285d:	4a                   	dec    edx
c001285e:	74 38                	je     c0012898 <schedule()+0x6c>
c0012860:	83 ec 0c             	sub    esp,0xc
c0012863:	68 64 38 02 c0       	push   0xc0023864
c0012868:	e8 3f a2 00 00       	call   c001caac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001286d:	c7 04 24 64 38 02 c0 	mov    DWORD PTR [esp],0xc0023864
c0012874:	89 c3                	mov    ebx,eax
c0012876:	e8 39 a2 00 00       	call   c001cab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001287b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0012882:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012885:	e8 86 f8 ff ff       	call   c0012110 <switchToThread(ThreadControlBlock*)>
c001288a:	83 c4 10             	add    esp,0x10
c001288d:	8d 76 00             	lea    esi,[esi+0x0]
c0012890:	83 c4 08             	add    esp,0x8
c0012893:	5b                   	pop    ebx
c0012894:	c3                   	ret    
c0012895:	8d 76 00             	lea    esi,[esi+0x0]
c0012898:	83 ec 08             	sub    esp,0x8
c001289b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00128a2:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00128a8:	68 64 38 02 c0       	push   0xc0023864
c00128ad:	e8 ba a2 00 00       	call   c001cb6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00128b2:	83 c4 10             	add    esp,0x10
c00128b5:	eb a9                	jmp    c0012860 <schedule()+0x34>
c00128b7:	90                   	nop

c00128b8 <Semaphore::tryAcquire()>:
c00128b8:	53                   	push   ebx
c00128b9:	83 ec 08             	sub    esp,0x8
c00128bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00128c0:	fa                   	cli    
c00128c1:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00128c6:	8d 50 01             	lea    edx,[eax+0x1]
c00128c9:	89 15 48 38 02 c0    	mov    DWORD PTR ds:0xc0023848,edx
c00128cf:	8b 15 44 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023844
c00128d5:	8d 5a 01             	lea    ebx,[edx+0x1]
c00128d8:	89 1d 44 38 02 c0    	mov    DWORD PTR ds:0xc0023844,ebx
c00128de:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00128e1:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00128e3:	7c 33                	jl     c0012918 <Semaphore::tryAcquire()+0x60>
c00128e5:	89 15 44 38 02 c0    	mov    DWORD PTR ds:0xc0023844,edx
c00128eb:	85 d2                	test   edx,edx
c00128ed:	75 0d                	jne    c00128fc <Semaphore::tryAcquire()+0x44>
c00128ef:	8b 15 40 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023840
c00128f5:	85 d2                	test   edx,edx
c00128f7:	75 6b                	jne    c0012964 <Semaphore::tryAcquire()+0xac>
c00128f9:	8d 76 00             	lea    esi,[esi+0x0]
c00128fc:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0012901:	85 c0                	test   eax,eax
c0012903:	74 0b                	je     c0012910 <Semaphore::tryAcquire()+0x58>
c0012905:	8d 76 00             	lea    esi,[esi+0x0]
c0012908:	31 c0                	xor    eax,eax
c001290a:	83 c4 08             	add    esp,0x8
c001290d:	5b                   	pop    ebx
c001290e:	c3                   	ret    
c001290f:	90                   	nop
c0012910:	fb                   	sti    
c0012911:	83 c4 08             	add    esp,0x8
c0012914:	5b                   	pop    ebx
c0012915:	c3                   	ret    
c0012916:	66 90                	xchg   ax,ax
c0012918:	43                   	inc    ebx
c0012919:	89 15 44 38 02 c0    	mov    DWORD PTR ds:0xc0023844,edx
c001291f:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0012922:	85 d2                	test   edx,edx
c0012924:	75 22                	jne    c0012948 <Semaphore::tryAcquire()+0x90>
c0012926:	8b 0d 40 38 02 c0    	mov    ecx,DWORD PTR ds:0xc0023840
c001292c:	85 c9                	test   ecx,ecx
c001292e:	74 18                	je     c0012948 <Semaphore::tryAcquire()+0x90>
c0012930:	c7 05 40 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x0
c001293a:	e8 ed fe ff ff       	call   c001282c <schedule()>
c001293f:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0012944:	48                   	dec    eax
c0012945:	8d 76 00             	lea    esi,[esi+0x0]
c0012948:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c001294d:	85 c0                	test   eax,eax
c001294f:	75 0b                	jne    c001295c <Semaphore::tryAcquire()+0xa4>
c0012951:	fb                   	sti    
c0012952:	b0 01                	mov    al,0x1
c0012954:	83 c4 08             	add    esp,0x8
c0012957:	5b                   	pop    ebx
c0012958:	c3                   	ret    
c0012959:	8d 76 00             	lea    esi,[esi+0x0]
c001295c:	b0 01                	mov    al,0x1
c001295e:	83 c4 08             	add    esp,0x8
c0012961:	5b                   	pop    ebx
c0012962:	c3                   	ret    
c0012963:	90                   	nop
c0012964:	c7 05 40 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x0
c001296e:	e8 b9 fe ff ff       	call   c001282c <schedule()>
c0012973:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0012978:	48                   	dec    eax
c0012979:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c001297e:	85 c0                	test   eax,eax
c0012980:	75 86                	jne    c0012908 <Semaphore::tryAcquire()+0x50>
c0012982:	eb 8c                	jmp    c0012910 <Semaphore::tryAcquire()+0x58>

c0012984 <Semaphore::assertLocked(char const*)>:
c0012984:	83 ec 0c             	sub    esp,0xc
c0012987:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001298b:	fa                   	cli    
c001298c:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0012992:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c0012997:	8d 48 01             	lea    ecx,[eax+0x1]
c001299a:	89 0d 44 38 02 c0    	mov    DWORD PTR ds:0xc0023844,ecx
c00129a0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00129a2:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00129a5:	7c 29                	jl     c00129d0 <Semaphore::assertLocked(char const*)+0x4c>
c00129a7:	90                   	nop
c00129a8:	a3 44 38 02 c0       	mov    ds:0xc0023844,eax
c00129ad:	85 c0                	test   eax,eax
c00129af:	75 0b                	jne    c00129bc <Semaphore::assertLocked(char const*)+0x38>
c00129b1:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c00129b6:	85 c0                	test   eax,eax
c00129b8:	75 2e                	jne    c00129e8 <Semaphore::assertLocked(char const*)+0x64>
c00129ba:	66 90                	xchg   ax,ax
c00129bc:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00129c1:	48                   	dec    eax
c00129c2:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c00129c7:	75 03                	jne    c00129cc <Semaphore::assertLocked(char const*)+0x48>
c00129c9:	fb                   	sti    
c00129ca:	66 90                	xchg   ax,ax
c00129cc:	83 c4 0c             	add    esp,0xc
c00129cf:	c3                   	ret    
c00129d0:	83 ec 0c             	sub    esp,0xc
c00129d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00129d7:	e8 cd c9 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c00129dc:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c00129e1:	83 c4 10             	add    esp,0x10
c00129e4:	48                   	dec    eax
c00129e5:	eb c1                	jmp    c00129a8 <Semaphore::assertLocked(char const*)+0x24>
c00129e7:	90                   	nop
c00129e8:	c7 05 40 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x0
c00129f2:	e8 35 fe ff ff       	call   c001282c <schedule()>
c00129f7:	eb c3                	jmp    c00129bc <Semaphore::assertLocked(char const*)+0x38>
c00129f9:	8d 76 00             	lea    esi,[esi+0x0]

c00129fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00129fc:	83 ec 0c             	sub    esp,0xc
c00129ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a08:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012a0b:	e8 1c fe ff ff       	call   c001282c <schedule()>
c0012a10:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0012a15:	48                   	dec    eax
c0012a16:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0012a1b:	75 03                	jne    c0012a20 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0012a1d:	fb                   	sti    
c0012a1e:	66 90                	xchg   ax,ax
c0012a20:	83 c4 0c             	add    esp,0xc
c0012a23:	c3                   	ret    

c0012a24 <blockTask(TaskState)>:
c0012a24:	83 ec 0c             	sub    esp,0xc
c0012a27:	fa                   	cli    
c0012a28:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0012a2e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a37:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012a3a:	e8 ed fd ff ff       	call   c001282c <schedule()>
c0012a3f:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0012a44:	48                   	dec    eax
c0012a45:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0012a4a:	75 04                	jne    c0012a50 <blockTask(TaskState)+0x2c>
c0012a4c:	fb                   	sti    
c0012a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0012a50:	83 c4 0c             	add    esp,0xc
c0012a53:	c3                   	ret    

c0012a54 <waitTask(int, int*, int)>:
c0012a54:	83 ec 18             	sub    esp,0x18
c0012a57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a5c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012a60:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0012a63:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012a67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a6c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0012a6f:	6a 07                	push   0x7
c0012a71:	e8 ae ff ff ff       	call   c0012a24 <blockTask(TaskState)>
c0012a76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a7b:	83 c4 10             	add    esp,0x10
c0012a7e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0012a81:	85 d2                	test   edx,edx
c0012a83:	74 0b                	je     c0012a90 <waitTask(int, int*, int)+0x3c>
c0012a85:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0012a88:	89 02                	mov    DWORD PTR [edx],eax
c0012a8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a8f:	90                   	nop
c0012a90:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0012a93:	83 c4 0c             	add    esp,0xc
c0012a96:	c3                   	ret    
c0012a97:	90                   	nop

c0012a98 <milliTenthSleepUntil(unsigned int)>:
c0012a98:	83 ec 0c             	sub    esp,0xc
c0012a9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a9f:	39 05 4c 29 02 c0    	cmp    DWORD PTR ds:0xc002294c,eax
c0012aa5:	76 05                	jbe    c0012aac <milliTenthSleepUntil(unsigned int)+0x14>
c0012aa7:	90                   	nop
c0012aa8:	83 c4 0c             	add    esp,0xc
c0012aab:	c3                   	ret    
c0012aac:	fa                   	cli    
c0012aad:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0012ab3:	83 ec 08             	sub    esp,0x8
c0012ab6:	ff 05 44 38 02 c0    	inc    DWORD PTR ds:0xc0023844
c0012abc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012ac2:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0012ac5:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0012acb:	68 58 38 02 c0       	push   0xc0023858
c0012ad0:	e8 97 a0 00 00       	call   c001cb6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012ad5:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012adc:	e8 43 ff ff ff       	call   c0012a24 <blockTask(TaskState)>
c0012ae1:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c0012ae6:	83 c4 10             	add    esp,0x10
c0012ae9:	48                   	dec    eax
c0012aea:	a3 44 38 02 c0       	mov    ds:0xc0023844,eax
c0012aef:	85 c0                	test   eax,eax
c0012af1:	75 09                	jne    c0012afc <milliTenthSleepUntil(unsigned int)+0x64>
c0012af3:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c0012af8:	85 c0                	test   eax,eax
c0012afa:	75 14                	jne    c0012b10 <milliTenthSleepUntil(unsigned int)+0x78>
c0012afc:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0012b01:	48                   	dec    eax
c0012b02:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0012b07:	75 9f                	jne    c0012aa8 <milliTenthSleepUntil(unsigned int)+0x10>
c0012b09:	fb                   	sti    
c0012b0a:	83 c4 0c             	add    esp,0xc
c0012b0d:	c3                   	ret    
c0012b0e:	66 90                	xchg   ax,ax
c0012b10:	c7 05 40 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x0
c0012b1a:	e8 0d fd ff ff       	call   c001282c <schedule()>
c0012b1f:	eb db                	jmp    c0012afc <milliTenthSleepUntil(unsigned int)+0x64>
c0012b21:	8d 76 00             	lea    esi,[esi+0x0]

c0012b24 <milliTenthSleep(unsigned int)>:
c0012b24:	a1 4c 29 02 c0       	mov    eax,ds:0xc002294c
c0012b29:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0012b2d:	e9 66 ff ff ff       	jmp    c0012a98 <milliTenthSleepUntil(unsigned int)>
c0012b32:	66 90                	xchg   ax,ax

c0012b34 <sleep(unsigned int)>:
c0012b34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b38:	8d 04 80             	lea    eax,[eax+eax*4]
c0012b3b:	8d 04 80             	lea    eax,[eax+eax*4]
c0012b3e:	8d 04 80             	lea    eax,[eax+eax*4]
c0012b41:	8d 04 80             	lea    eax,[eax+eax*4]
c0012b44:	c1 e0 04             	shl    eax,0x4
c0012b47:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b4b:	eb d7                	jmp    c0012b24 <milliTenthSleep(unsigned int)>
c0012b4d:	90                   	nop
c0012b4e:	66 90                	xchg   ax,ax

c0012b50 <Semaphore::acquire()>:
c0012b50:	83 ec 0c             	sub    esp,0xc
c0012b53:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012b57:	fa                   	cli    
c0012b58:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c0012b5d:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0012b63:	8d 48 01             	lea    ecx,[eax+0x1]
c0012b66:	89 0d 44 38 02 c0    	mov    DWORD PTR ds:0xc0023844,ecx
c0012b6c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0012b6f:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0012b71:	7d 2d                	jge    c0012ba0 <Semaphore::acquire()+0x50>
c0012b73:	41                   	inc    ecx
c0012b74:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0012b77:	90                   	nop
c0012b78:	a3 44 38 02 c0       	mov    ds:0xc0023844,eax
c0012b7d:	85 c0                	test   eax,eax
c0012b7f:	75 0b                	jne    c0012b8c <Semaphore::acquire()+0x3c>
c0012b81:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c0012b86:	85 c0                	test   eax,eax
c0012b88:	75 62                	jne    c0012bec <Semaphore::acquire()+0x9c>
c0012b8a:	66 90                	xchg   ax,ax
c0012b8c:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0012b91:	48                   	dec    eax
c0012b92:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0012b97:	75 03                	jne    c0012b9c <Semaphore::acquire()+0x4c>
c0012b99:	fb                   	sti    
c0012b9a:	66 90                	xchg   ax,ax
c0012b9c:	83 c4 0c             	add    esp,0xc
c0012b9f:	c3                   	ret    
c0012ba0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ba5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0012bac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0012baf:	85 c9                	test   ecx,ecx
c0012bb1:	74 4d                	je     c0012c00 <Semaphore::acquire()+0xb0>
c0012bb3:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0012bb6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012bbc:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0012bbf:	90                   	nop
c0012bc0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012bc5:	83 ec 0c             	sub    esp,0xc
c0012bc8:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0012bcb:	68 c0 ef 01 c0       	push   0xc001efc0
c0012bd0:	e8 fe 6a ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0012bd5:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0012bdc:	e8 43 fe ff ff       	call   c0012a24 <blockTask(TaskState)>
c0012be1:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c0012be6:	83 c4 10             	add    esp,0x10
c0012be9:	48                   	dec    eax
c0012bea:	eb 8c                	jmp    c0012b78 <Semaphore::acquire()+0x28>
c0012bec:	c7 05 40 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x0
c0012bf6:	e8 31 fc ff ff       	call   c001282c <schedule()>
c0012bfb:	eb 8f                	jmp    c0012b8c <Semaphore::acquire()+0x3c>
c0012bfd:	8d 76 00             	lea    esi,[esi+0x0]
c0012c00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c05:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012c08:	eb b6                	jmp    c0012bc0 <Semaphore::acquire()+0x70>
c0012c0a:	66 90                	xchg   ax,ax

c0012c0c <taskReturned>:
c0012c0c:	83 ec 18             	sub    esp,0x18
c0012c0f:	68 e0 ef 01 c0       	push   0xc001efe0
c0012c14:	e8 90 c7 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c0012c19:	83 c4 10             	add    esp,0x10
c0012c1c:	83 ec 0c             	sub    esp,0xc
c0012c1f:	6a 02                	push   0x2
c0012c21:	e8 fe fd ff ff       	call   c0012a24 <blockTask(TaskState)>
c0012c26:	fa                   	cli    
c0012c27:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0012c2d:	e8 fa fb ff ff       	call   c001282c <schedule()>
c0012c32:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0012c37:	83 c4 10             	add    esp,0x10
c0012c3a:	48                   	dec    eax
c0012c3b:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0012c40:	85 c0                	test   eax,eax
c0012c42:	75 d8                	jne    c0012c1c <taskReturned+0x10>
c0012c44:	fb                   	sti    
c0012c45:	eb d5                	jmp    c0012c1c <taskReturned+0x10>
c0012c47:	90                   	nop

c0012c48 <Thr::processFromPID(int)>:
c0012c48:	57                   	push   edi
c0012c49:	56                   	push   esi
c0012c4a:	53                   	push   ebx
c0012c4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012c4f:	fa                   	cli    
c0012c50:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0012c56:	83 ec 0c             	sub    esp,0xc
c0012c59:	68 64 38 02 c0       	push   0xc0023864
c0012c5e:	e8 49 9e 00 00       	call   c001caac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012c63:	83 c4 10             	add    esp,0x10
c0012c66:	89 c7                	mov    edi,eax
c0012c68:	eb 16                	jmp    c0012c80 <Thr::processFromPID(int)+0x38>
c0012c6a:	66 90                	xchg   ax,ax
c0012c6c:	83 ec 0c             	sub    esp,0xc
c0012c6f:	68 64 38 02 c0       	push   0xc0023864
c0012c74:	e8 33 9e 00 00       	call   c001caac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012c79:	83 c4 10             	add    esp,0x10
c0012c7c:	39 f8                	cmp    eax,edi
c0012c7e:	74 4c                	je     c0012ccc <Thr::processFromPID(int)+0x84>
c0012c80:	83 ec 0c             	sub    esp,0xc
c0012c83:	68 64 38 02 c0       	push   0xc0023864
c0012c88:	e8 1f 9e 00 00       	call   c001caac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012c8d:	c7 04 24 64 38 02 c0 	mov    DWORD PTR [esp],0xc0023864
c0012c94:	89 c3                	mov    ebx,eax
c0012c96:	e8 19 9e 00 00       	call   c001cab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012c9b:	58                   	pop    eax
c0012c9c:	5a                   	pop    edx
c0012c9d:	53                   	push   ebx
c0012c9e:	68 64 38 02 c0       	push   0xc0023864
c0012ca3:	e8 c4 9e 00 00       	call   c001cb6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012ca8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012cab:	83 c4 10             	add    esp,0x10
c0012cae:	39 30                	cmp    DWORD PTR [eax],esi
c0012cb0:	75 ba                	jne    c0012c6c <Thr::processFromPID(int)+0x24>
c0012cb2:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0012cb7:	48                   	dec    eax
c0012cb8:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0012cbd:	74 09                	je     c0012cc8 <Thr::processFromPID(int)+0x80>
c0012cbf:	90                   	nop
c0012cc0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012cc3:	5b                   	pop    ebx
c0012cc4:	5e                   	pop    esi
c0012cc5:	5f                   	pop    edi
c0012cc6:	c3                   	ret    
c0012cc7:	90                   	nop
c0012cc8:	fb                   	sti    
c0012cc9:	eb f5                	jmp    c0012cc0 <Thr::processFromPID(int)+0x78>
c0012ccb:	90                   	nop
c0012ccc:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0012cd1:	48                   	dec    eax
c0012cd2:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0012cd7:	75 07                	jne    c0012ce0 <Thr::processFromPID(int)+0x98>
c0012cd9:	fb                   	sti    
c0012cda:	5b                   	pop    ebx
c0012cdb:	5e                   	pop    esi
c0012cdc:	5f                   	pop    edi
c0012cdd:	c3                   	ret    
c0012cde:	66 90                	xchg   ax,ax
c0012ce0:	5b                   	pop    ebx
c0012ce1:	31 c0                	xor    eax,eax
c0012ce3:	5e                   	pop    esi
c0012ce4:	5f                   	pop    edi
c0012ce5:	c3                   	ret    
c0012ce6:	66 90                	xchg   ax,ax

c0012ce8 <unblockTask(ThreadControlBlock*)>:
c0012ce8:	53                   	push   ebx
c0012ce9:	83 ec 08             	sub    esp,0x8
c0012cec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012cf0:	fa                   	cli    
c0012cf1:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0012cf7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012cfa:	85 c0                	test   eax,eax
c0012cfc:	74 66                	je     c0012d64 <unblockTask(ThreadControlBlock*)+0x7c>
c0012cfe:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012d01:	48                   	dec    eax
c0012d02:	74 38                	je     c0012d3c <unblockTask(ThreadControlBlock*)+0x54>
c0012d04:	83 ec 0c             	sub    esp,0xc
c0012d07:	68 64 38 02 c0       	push   0xc0023864
c0012d0c:	e8 9b 9d 00 00       	call   c001caac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d11:	83 c4 10             	add    esp,0x10
c0012d14:	85 c0                	test   eax,eax
c0012d16:	75 1c                	jne    c0012d34 <unblockTask(ThreadControlBlock*)+0x4c>
c0012d18:	eb 5e                	jmp    c0012d78 <unblockTask(ThreadControlBlock*)+0x90>
c0012d1a:	66 90                	xchg   ax,ax
c0012d1c:	83 ec 08             	sub    esp,0x8
c0012d1f:	50                   	push   eax
c0012d20:	68 64 38 02 c0       	push   0xc0023864
c0012d25:	e8 32 a1 00 00       	call   c001ce5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0012d2a:	83 c4 10             	add    esp,0x10
c0012d2d:	85 c0                	test   eax,eax
c0012d2f:	74 47                	je     c0012d78 <unblockTask(ThreadControlBlock*)+0x90>
c0012d31:	8d 76 00             	lea    esi,[esi+0x0]
c0012d34:	39 c3                	cmp    ebx,eax
c0012d36:	75 e4                	jne    c0012d1c <unblockTask(ThreadControlBlock*)+0x34>
c0012d38:	eb 12                	jmp    c0012d4c <unblockTask(ThreadControlBlock*)+0x64>
c0012d3a:	66 90                	xchg   ax,ax
c0012d3c:	83 ec 0c             	sub    esp,0xc
c0012d3f:	68 63 ef 01 c0       	push   0xc001ef63
c0012d44:	e8 8a 69 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0012d49:	83 c4 10             	add    esp,0x10
c0012d4c:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0012d51:	48                   	dec    eax
c0012d52:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0012d57:	75 03                	jne    c0012d5c <unblockTask(ThreadControlBlock*)+0x74>
c0012d59:	fb                   	sti    
c0012d5a:	66 90                	xchg   ax,ax
c0012d5c:	83 c4 08             	add    esp,0x8
c0012d5f:	5b                   	pop    ebx
c0012d60:	c3                   	ret    
c0012d61:	8d 76 00             	lea    esi,[esi+0x0]
c0012d64:	83 ec 0c             	sub    esp,0xc
c0012d67:	68 4c ef 01 c0       	push   0xc001ef4c
c0012d6c:	e8 62 69 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0012d71:	83 c4 10             	add    esp,0x10
c0012d74:	eb d6                	jmp    c0012d4c <unblockTask(ThreadControlBlock*)+0x64>
c0012d76:	66 90                	xchg   ax,ax
c0012d78:	83 ec 08             	sub    esp,0x8
c0012d7b:	53                   	push   ebx
c0012d7c:	68 64 38 02 c0       	push   0xc0023864
c0012d81:	e8 e6 9d 00 00       	call   c001cb6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012d86:	83 c4 10             	add    esp,0x10
c0012d89:	eb c1                	jmp    c0012d4c <unblockTask(ThreadControlBlock*)+0x64>
c0012d8b:	90                   	nop

c0012d8c <cleanupTerminatedTask(ThreadControlBlock*)>:
c0012d8c:	55                   	push   ebp
c0012d8d:	57                   	push   edi
c0012d8e:	56                   	push   esi
c0012d8f:	53                   	push   ebx
c0012d90:	83 ec 1c             	sub    esp,0x1c
c0012d93:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0012d97:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012d9a:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0012da0:	85 ff                	test   edi,edi
c0012da2:	7e 24                	jle    c0012dc8 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0012da4:	31 f6                	xor    esi,esi
c0012da6:	66 90                	xchg   ax,ax
c0012da8:	83 ec 0c             	sub    esp,0xc
c0012dab:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0012db2:	46                   	inc    esi
c0012db3:	e8 a1 3b ff ff       	call   c0006959 <free>
c0012db8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012dbb:	83 c4 10             	add    esp,0x10
c0012dbe:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0012dc4:	7f e2                	jg     c0012da8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0012dc6:	66 90                	xchg   ax,ax
c0012dc8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012dd2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012dd7:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0012dda:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0012ddd:	d3 c0                	rol    eax,cl
c0012ddf:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0012de6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0012de9:	89 f7                	mov    edi,esi
c0012deb:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0012df3:	0f 85 73 01 00 00    	jne    c0012f6c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0012df9:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0012dff:	85 ed                	test   ebp,ebp
c0012e01:	74 1d                	je     c0012e20 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0012e03:	83 ec 0c             	sub    esp,0xc
c0012e06:	55                   	push   ebp
c0012e07:	e8 42 c3 ff ff       	call   c000f14e <EnvVarContainer::~EnvVarContainer()>
c0012e0c:	59                   	pop    ecx
c0012e0d:	5e                   	pop    esi
c0012e0e:	6a 0c                	push   0xc
c0012e10:	55                   	push   ebp
c0012e11:	e8 dc 67 ff ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c0012e16:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0012e19:	83 c4 10             	add    esp,0x10
c0012e1c:	89 f7                	mov    edi,esi
c0012e1e:	66 90                	xchg   ax,ax
c0012e20:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0012e26:	85 c0                	test   eax,eax
c0012e28:	0f 84 b2 00 00 00    	je     c0012ee0 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0012e2e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0012e31:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0012e35:	31 c9                	xor    ecx,ecx
c0012e37:	eb 17                	jmp    c0012e50 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0012e39:	8d 76 00             	lea    esi,[esi+0x0]
c0012e3c:	41                   	inc    ecx
c0012e3d:	83 f9 10             	cmp    ecx,0x10
c0012e40:	0f 84 9a 00 00 00    	je     c0012ee0 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0012e46:	66 90                	xchg   ax,ax
c0012e48:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0012e4e:	66 90                	xchg   ax,ax
c0012e50:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0012e57:	d3 fa                	sar    edx,cl
c0012e59:	83 e2 01             	and    edx,0x1
c0012e5c:	74 de                	je     c0012e3c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0012e5e:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0012e61:	01 d2                	add    edx,edx
c0012e63:	01 ca                	add    edx,ecx
c0012e65:	8d 14 92             	lea    edx,[edx+edx*4]
c0012e68:	01 d0                	add    eax,edx
c0012e6a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0012e70:	83 fd 07             	cmp    ebp,0x7
c0012e73:	75 c7                	jne    c0012e3c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0012e75:	05 40 02 00 00       	add    eax,0x240
c0012e7a:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0012e7d:	83 fd ff             	cmp    ebp,0xffffffff
c0012e80:	0f 8c ee 00 00 00    	jl     c0012f74 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0012e86:	0f 84 ac 01 00 00    	je     c0013038 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0012e8c:	85 ed                	test   ebp,ebp
c0012e8e:	0f 84 90 01 00 00    	je     c0013024 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0012e94:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0012e96:	75 a4                	jne    c0012e3c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0012e98:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0012e9e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0012ea2:	01 d0                	add    eax,edx
c0012ea4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0012ea8:	83 ec 0c             	sub    esp,0xc
c0012eab:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0012eb1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012eb4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012eba:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0012ec1:	50                   	push   eax
c0012ec2:	e8 21 fe ff ff       	call   c0012ce8 <unblockTask(ThreadControlBlock*)>
c0012ec7:	83 c4 10             	add    esp,0x10
c0012eca:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0012ecd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012ed1:	89 f7                	mov    edi,esi
c0012ed3:	41                   	inc    ecx
c0012ed4:	83 f9 10             	cmp    ecx,0x10
c0012ed7:	0f 85 6b ff ff ff    	jne    c0012e48 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0012edd:	8d 76 00             	lea    esi,[esi+0x0]
c0012ee0:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0012ee6:	85 c0                	test   eax,eax
c0012ee8:	74 62                	je     c0012f4c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0012eea:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0012ef0:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0012ef6:	74 54                	je     c0012f4c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0012ef8:	83 ec 0c             	sub    esp,0xc
c0012efb:	68 64 38 02 c0       	push   0xc0023864
c0012f00:	e8 a7 9b 00 00       	call   c001caac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012f05:	c7 04 24 64 38 02 c0 	mov    DWORD PTR [esp],0xc0023864
c0012f0c:	89 c7                	mov    edi,eax
c0012f0e:	e8 7d 9b 00 00       	call   c001ca90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012f13:	83 c4 10             	add    esp,0x10
c0012f16:	84 c0                	test   al,al
c0012f18:	0f 84 ce 00 00 00    	je     c0012fec <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0012f1e:	66 90                	xchg   ax,ax
c0012f20:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012f23:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0012f29:	85 d2                	test   edx,edx
c0012f2b:	74 0f                	je     c0012f3c <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0012f2d:	83 ec 0c             	sub    esp,0xc
c0012f30:	8b 02                	mov    eax,DWORD PTR [edx]
c0012f32:	52                   	push   edx
c0012f33:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f36:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012f39:	83 c4 10             	add    esp,0x10
c0012f3c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0012f46:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0012f49:	8d 76 00             	lea    esi,[esi+0x0]
c0012f4c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0012f52:	85 db                	test   ebx,ebx
c0012f54:	74 16                	je     c0012f6c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0012f56:	83 ec 0c             	sub    esp,0xc
c0012f59:	53                   	push   ebx
c0012f5a:	e8 01 5a ff ff       	call   c0008960 <VAS::~VAS()>
c0012f5f:	58                   	pop    eax
c0012f60:	5a                   	pop    edx
c0012f61:	6a 14                	push   0x14
c0012f63:	53                   	push   ebx
c0012f64:	e8 89 66 ff ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c0012f69:	83 c4 10             	add    esp,0x10
c0012f6c:	83 c4 1c             	add    esp,0x1c
c0012f6f:	5b                   	pop    ebx
c0012f70:	5e                   	pop    esi
c0012f71:	5f                   	pop    edi
c0012f72:	5d                   	pop    ebp
c0012f73:	c3                   	ret    
c0012f74:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0012f78:	83 ec 0c             	sub    esp,0xc
c0012f7b:	68 14 f0 01 c0       	push   0xc001f014
c0012f80:	e8 24 c4 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c0012f85:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0012f88:	83 c4 10             	add    esp,0x10
c0012f8b:	89 f7                	mov    edi,esi
c0012f8d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012f91:	e9 a6 fe ff ff       	jmp    c0012e3c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0012f96:	66 90                	xchg   ax,ax
c0012f98:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012f9e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0012fa4:	75 1e                	jne    c0012fc4 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0012fa6:	83 ec 0c             	sub    esp,0xc
c0012fa9:	68 7c f0 01 c0       	push   0xc001f07c
c0012fae:	e8 20 67 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0012fb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0012fba:	e8 65 fa ff ff       	call   c0012a24 <blockTask(TaskState)>
c0012fbf:	83 c4 10             	add    esp,0x10
c0012fc2:	66 90                	xchg   ax,ax
c0012fc4:	83 ec 08             	sub    esp,0x8
c0012fc7:	56                   	push   esi
c0012fc8:	68 64 38 02 c0       	push   0xc0023864
c0012fcd:	e8 9a 9b 00 00       	call   c001cb6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012fd2:	c7 04 24 64 38 02 c0 	mov    DWORD PTR [esp],0xc0023864
c0012fd9:	e8 ce 9a 00 00       	call   c001caac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012fde:	83 c4 10             	add    esp,0x10
c0012fe1:	39 f8                	cmp    eax,edi
c0012fe3:	0f 84 37 ff ff ff    	je     c0012f20 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0012fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0012fec:	83 ec 0c             	sub    esp,0xc
c0012fef:	68 64 38 02 c0       	push   0xc0023864
c0012ff4:	e8 b3 9a 00 00       	call   c001caac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012ff9:	c7 04 24 64 38 02 c0 	mov    DWORD PTR [esp],0xc0023864
c0013000:	89 c6                	mov    esi,eax
c0013002:	e8 ad 9a 00 00       	call   c001cab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013007:	83 c4 10             	add    esp,0x10
c001300a:	39 f3                	cmp    ebx,esi
c001300c:	74 b6                	je     c0012fc4 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c001300e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013011:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013014:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001301a:	75 a8                	jne    c0012fc4 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c001301c:	e9 77 ff ff ff       	jmp    c0012f98 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0013021:	8d 76 00             	lea    esi,[esi+0x0]
c0013024:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013028:	83 ec 0c             	sub    esp,0xc
c001302b:	68 48 f0 01 c0       	push   0xc001f048
c0013030:	e9 4b ff ff ff       	jmp    c0012f80 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0013035:	8d 76 00             	lea    esi,[esi+0x0]
c0013038:	8b 36                	mov    esi,DWORD PTR [esi]
c001303a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001303e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0013041:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013044:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001304a:	01 d7                	add    edi,edx
c001304c:	89 f8                	mov    eax,edi
c001304e:	e9 51 fe ff ff       	jmp    c0012ea4 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0013053:	90                   	nop

c0013054 <cleanerTaskFunction(void*)>:
c0013054:	53                   	push   ebx
c0013055:	83 ec 08             	sub    esp,0x8
c0013058:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c001305d:	48                   	dec    eax
c001305e:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0013063:	75 03                	jne    c0013068 <cleanerTaskFunction(void*)+0x14>
c0013065:	fb                   	sti    
c0013066:	66 90                	xchg   ax,ax
c0013068:	fa                   	cli    
c0013069:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c001306e:	80 3d 2c 38 02 c0 00 	cmp    BYTE PTR ds:0xc002382c,0x0
c0013075:	8d 50 01             	lea    edx,[eax+0x1]
c0013078:	89 15 48 38 02 c0    	mov    DWORD PTR ds:0xc0023848,edx
c001307e:	0f 84 ac 00 00 00    	je     c0013130 <cleanerTaskFunction(void*)+0xdc>
c0013084:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0013089:	85 c0                	test   eax,eax
c001308b:	75 03                	jne    c0013090 <cleanerTaskFunction(void*)+0x3c>
c001308d:	fb                   	sti    
c001308e:	66 90                	xchg   ax,ax
c0013090:	c6 05 2c 38 02 c0 00 	mov    BYTE PTR ds:0xc002382c,0x0
c0013097:	fa                   	cli    
c0013098:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c001309e:	ff 05 44 38 02 c0    	inc    DWORD PTR ds:0xc0023844
c00130a4:	fa                   	cli    
c00130a5:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c00130ab:	eb 2b                	jmp    c00130d8 <cleanerTaskFunction(void*)+0x84>
c00130ad:	8d 76 00             	lea    esi,[esi+0x0]
c00130b0:	83 ec 0c             	sub    esp,0xc
c00130b3:	68 4c 38 02 c0       	push   0xc002384c
c00130b8:	e8 ef 99 00 00       	call   c001caac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00130bd:	c7 04 24 4c 38 02 c0 	mov    DWORD PTR [esp],0xc002384c
c00130c4:	89 c3                	mov    ebx,eax
c00130c6:	e8 e9 99 00 00       	call   c001cab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00130cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00130ce:	e8 b9 fc ff ff       	call   c0012d8c <cleanupTerminatedTask(ThreadControlBlock*)>
c00130d3:	83 c4 10             	add    esp,0x10
c00130d6:	66 90                	xchg   ax,ax
c00130d8:	83 ec 0c             	sub    esp,0xc
c00130db:	68 4c 38 02 c0       	push   0xc002384c
c00130e0:	e8 ab 99 00 00       	call   c001ca90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00130e5:	83 c4 10             	add    esp,0x10
c00130e8:	84 c0                	test   al,al
c00130ea:	74 c4                	je     c00130b0 <cleanerTaskFunction(void*)+0x5c>
c00130ec:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00130f1:	48                   	dec    eax
c00130f2:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c00130f7:	75 03                	jne    c00130fc <cleanerTaskFunction(void*)+0xa8>
c00130f9:	fb                   	sti    
c00130fa:	66 90                	xchg   ax,ax
c00130fc:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c0013101:	48                   	dec    eax
c0013102:	a3 44 38 02 c0       	mov    ds:0xc0023844,eax
c0013107:	0f 85 4b ff ff ff    	jne    c0013058 <cleanerTaskFunction(void*)+0x4>
c001310d:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c0013112:	85 c0                	test   eax,eax
c0013114:	0f 84 3e ff ff ff    	je     c0013058 <cleanerTaskFunction(void*)+0x4>
c001311a:	c7 05 40 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x0
c0013124:	e8 03 f7 ff ff       	call   c001282c <schedule()>
c0013129:	e9 2a ff ff ff       	jmp    c0013058 <cleanerTaskFunction(void*)+0x4>
c001312e:	66 90                	xchg   ax,ax
c0013130:	83 ec 0c             	sub    esp,0xc
c0013133:	6a 02                	push   0x2
c0013135:	e8 c2 f8 ff ff       	call   c00129fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001313a:	83 c4 10             	add    esp,0x10
c001313d:	e9 4e ff ff ff       	jmp    c0013090 <cleanerTaskFunction(void*)+0x3c>
c0013142:	66 90                	xchg   ax,ax

c0013144 <terminateTask(int)>:
c0013144:	83 ec 14             	sub    esp,0x14
c0013147:	fa                   	cli    
c0013148:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c001314e:	ff 05 44 38 02 c0    	inc    DWORD PTR ds:0xc0023844
c0013154:	fa                   	cli    
c0013155:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c001315b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001315f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013164:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0013167:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001316c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001316f:	50                   	push   eax
c0013170:	68 4c 38 02 c0       	push   0xc002384c
c0013175:	e8 f2 99 00 00       	call   c001cb6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001317a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001317f:	83 c4 10             	add    esp,0x10
c0013182:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0013189:	a1 28 38 02 c0       	mov    eax,ds:0xc0023828
c001318e:	85 c0                	test   eax,eax
c0013190:	74 5e                	je     c00131f0 <terminateTask(int)+0xac>
c0013192:	83 ec 0c             	sub    esp,0xc
c0013195:	c6 05 2c 38 02 c0 01 	mov    BYTE PTR ds:0xc002382c,0x1
c001319c:	50                   	push   eax
c001319d:	e8 46 fb ff ff       	call   c0012ce8 <unblockTask(ThreadControlBlock*)>
c00131a2:	83 c4 10             	add    esp,0x10
c00131a5:	8d 76 00             	lea    esi,[esi+0x0]
c00131a8:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00131ad:	48                   	dec    eax
c00131ae:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c00131b3:	75 03                	jne    c00131b8 <terminateTask(int)+0x74>
c00131b5:	fb                   	sti    
c00131b6:	66 90                	xchg   ax,ax
c00131b8:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c00131bd:	48                   	dec    eax
c00131be:	a3 44 38 02 c0       	mov    ds:0xc0023844,eax
c00131c3:	75 0b                	jne    c00131d0 <terminateTask(int)+0x8c>
c00131c5:	83 3d 40 38 02 c0 00 	cmp    DWORD PTR ds:0xc0023840,0x0
c00131cc:	75 36                	jne    c0013204 <terminateTask(int)+0xc0>
c00131ce:	66 90                	xchg   ax,ax
c00131d0:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00131d5:	48                   	dec    eax
c00131d6:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c00131db:	75 03                	jne    c00131e0 <terminateTask(int)+0x9c>
c00131dd:	fb                   	sti    
c00131de:	66 90                	xchg   ax,ax
c00131e0:	fa                   	cli    
c00131e1:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c00131e7:	90                   	nop
c00131e8:	e8 3f f6 ff ff       	call   c001282c <schedule()>
c00131ed:	eb e1                	jmp    c00131d0 <terminateTask(int)+0x8c>
c00131ef:	90                   	nop
c00131f0:	83 ec 0c             	sub    esp,0xc
c00131f3:	68 7a ef 01 c0       	push   0xc001ef7a
c00131f8:	e8 d6 64 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c00131fd:	83 c4 10             	add    esp,0x10
c0013200:	eb a6                	jmp    c00131a8 <terminateTask(int)+0x64>
c0013202:	66 90                	xchg   ax,ax
c0013204:	c7 05 40 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x0
c001320e:	eb d8                	jmp    c00131e8 <terminateTask(int)+0xa4>

c0013210 <Thr::terminateFromIRQ(int)>:
c0013210:	83 ec 18             	sub    esp,0x18
c0013213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013217:	e8 28 ff ff ff       	call   c0013144 <terminateTask(int)>

c001321c <Semaphore::release()>:
c001321c:	83 ec 0c             	sub    esp,0xc
c001321f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013223:	fa                   	cli    
c0013224:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c0013229:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c001322f:	8d 48 01             	lea    ecx,[eax+0x1]
c0013232:	89 0d 44 38 02 c0    	mov    DWORD PTR ds:0xc0023844,ecx
c0013238:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001323b:	85 c9                	test   ecx,ecx
c001323d:	74 41                	je     c0013280 <Semaphore::release()+0x64>
c001323f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0013242:	83 ec 0c             	sub    esp,0xc
c0013245:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013248:	51                   	push   ecx
c0013249:	e8 9a fa ff ff       	call   c0012ce8 <unblockTask(ThreadControlBlock*)>
c001324e:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c0013253:	83 c4 10             	add    esp,0x10
c0013256:	48                   	dec    eax
c0013257:	90                   	nop
c0013258:	a3 44 38 02 c0       	mov    ds:0xc0023844,eax
c001325d:	85 c0                	test   eax,eax
c001325f:	75 0b                	jne    c001326c <Semaphore::release()+0x50>
c0013261:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c0013266:	85 c0                	test   eax,eax
c0013268:	75 1e                	jne    c0013288 <Semaphore::release()+0x6c>
c001326a:	66 90                	xchg   ax,ax
c001326c:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0013271:	48                   	dec    eax
c0013272:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0013277:	75 03                	jne    c001327c <Semaphore::release()+0x60>
c0013279:	fb                   	sti    
c001327a:	66 90                	xchg   ax,ax
c001327c:	83 c4 0c             	add    esp,0xc
c001327f:	c3                   	ret    
c0013280:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0013283:	eb d3                	jmp    c0013258 <Semaphore::release()+0x3c>
c0013285:	8d 76 00             	lea    esi,[esi+0x0]
c0013288:	c7 05 40 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x0
c0013292:	e8 95 f5 ff ff       	call   c001282c <schedule()>
c0013297:	eb d3                	jmp    c001326c <Semaphore::release()+0x50>
c0013299:	8d 76 00             	lea    esi,[esi+0x0]

c001329c <__static_initialization_and_destruction_0(int, int)>:
c001329c:	83 ec 0c             	sub    esp,0xc
c001329f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00132a4:	0f 85 8e 00 00 00    	jne    c0013338 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00132aa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00132b2:	0f 85 80 00 00 00    	jne    c0013338 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00132b8:	83 ec 0c             	sub    esp,0xc
c00132bb:	68 64 38 02 c0       	push   0xc0023864
c00132c0:	e8 53 9b 00 00       	call   c001ce18 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00132c5:	83 c4 10             	add    esp,0x10
c00132c8:	83 ec 04             	sub    esp,0x4
c00132cb:	68 28 fb 01 c0       	push   0xc001fb28
c00132d0:	68 64 38 02 c0       	push   0xc0023864
c00132d5:	68 c8 cd 01 c0       	push   0xc001cdc8
c00132da:	e8 c3 62 ff ff       	call   c00095a2 <__cxa_atexit>
c00132df:	83 c4 10             	add    esp,0x10
c00132e2:	83 ec 0c             	sub    esp,0xc
c00132e5:	68 58 38 02 c0       	push   0xc0023858
c00132ea:	e8 29 9b 00 00       	call   c001ce18 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00132ef:	83 c4 10             	add    esp,0x10
c00132f2:	83 ec 04             	sub    esp,0x4
c00132f5:	68 28 fb 01 c0       	push   0xc001fb28
c00132fa:	68 58 38 02 c0       	push   0xc0023858
c00132ff:	68 c8 cd 01 c0       	push   0xc001cdc8
c0013304:	e8 99 62 ff ff       	call   c00095a2 <__cxa_atexit>
c0013309:	83 c4 10             	add    esp,0x10
c001330c:	83 ec 0c             	sub    esp,0xc
c001330f:	68 4c 38 02 c0       	push   0xc002384c
c0013314:	e8 ff 9a 00 00       	call   c001ce18 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013319:	83 c4 10             	add    esp,0x10
c001331c:	83 ec 04             	sub    esp,0x4
c001331f:	68 28 fb 01 c0       	push   0xc001fb28
c0013324:	68 4c 38 02 c0       	push   0xc002384c
c0013329:	68 c8 cd 01 c0       	push   0xc001cdc8
c001332e:	e8 6f 62 ff ff       	call   c00095a2 <__cxa_atexit>
c0013333:	83 c4 10             	add    esp,0x10
c0013336:	66 90                	xchg   ax,ax
c0013338:	90                   	nop
c0013339:	83 c4 0c             	add    esp,0xc
c001333c:	c3                   	ret    
c001333d:	8d 76 00             	lea    esi,[esi+0x0]

c0013340 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0013340:	83 ec 0c             	sub    esp,0xc
c0013343:	83 ec 08             	sub    esp,0x8
c0013346:	68 ff ff 00 00       	push   0xffff
c001334b:	6a 01                	push   0x1
c001334d:	e8 4a ff ff ff       	call   c001329c <__static_initialization_and_destruction_0(int, int)>
c0013352:	83 c4 10             	add    esp,0x10
c0013355:	83 c4 0c             	add    esp,0xc
c0013358:	c3                   	ret    

c0013359 <Vm::inbv(unsigned short)>:
c0013359:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001335d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0013362:	75 06                	jne    c001336a <Vm::inbv(unsigned short)+0x11>
c0013364:	a0 ac 38 02 c0       	mov    al,ds:0xc00238ac
c0013369:	c3                   	ret    
c001336a:	ec                   	in     al,dx
c001336b:	c3                   	ret    

c001336c <Vm::outbv(unsigned short, unsigned char)>:
c001336c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013370:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013374:	66 81 fa fe fe       	cmp    dx,0xfefe
c0013379:	75 25                	jne    c00133a0 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001337b:	8b 0d ac 38 02 c0    	mov    ecx,DWORD PTR ds:0xc00238ac
c0013381:	8d 51 01             	lea    edx,[ecx+0x1]
c0013384:	88 81 c0 38 02 c0    	mov    BYTE PTR [ecx-0x3ffdc740],al
c001338a:	89 15 ac 38 02 c0    	mov    DWORD PTR ds:0xc00238ac,edx
c0013390:	83 fa 20             	cmp    edx,0x20
c0013393:	75 0c                	jne    c00133a1 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0013395:	c7 05 ac 38 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00238ac,0x1f
c001339f:	c3                   	ret    
c00133a0:	ee                   	out    dx,al
c00133a1:	c3                   	ret    

c00133a2 <Vm::realToLinear(unsigned short, unsigned short)>:
c00133a2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00133a7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00133ac:	c1 e0 04             	shl    eax,0x4
c00133af:	01 d0                	add    eax,edx
c00133b1:	c3                   	ret    

c00133b2 <Vm::getSegment(unsigned int)>:
c00133b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00133b6:	c1 e8 10             	shr    eax,0x10
c00133b9:	c3                   	ret    

c00133ba <Vm::getOffset(unsigned int)>:
c00133ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00133be:	c3                   	ret    

c00133bf <Vm::mainloop2()>:
c00133bf:	83 ec 18             	sub    esp,0x18
c00133c2:	fa                   	cli    
c00133c3:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c00133c9:	6a 02                	push   0x2
c00133cb:	c6 05 a5 38 02 c0 01 	mov    BYTE PTR ds:0xc00238a5,0x1
c00133d2:	e8 25 f6 ff ff       	call   c00129fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00133d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133dc:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00133e0:	52                   	push   edx
c00133e1:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00133e5:	52                   	push   edx
c00133e6:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00133ea:	52                   	push   edx
c00133eb:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00133ef:	50                   	push   eax
c00133f0:	e8 3a ce fe ff       	call   c000022f <goToVM86>
c00133f5:	83 c4 2c             	add    esp,0x2c
c00133f8:	c3                   	ret    

c00133f9 <Vm::mainVm8086Loop(void*)>:
c00133f9:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00133fe:	48                   	dec    eax
c00133ff:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0013404:	75 01                	jne    c0013407 <Vm::mainVm8086Loop(void*)+0xe>
c0013406:	fb                   	sti    
c0013407:	eb b6                	jmp    c00133bf <Vm::mainloop2()>

c0013409 <Vm::mainloop3(unsigned long)>:
c0013409:	83 ec 18             	sub    esp,0x18
c001340c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013410:	fa                   	cli    
c0013411:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0013417:	6a 02                	push   0x2
c0013419:	c6 05 a4 38 02 c0 01 	mov    BYTE PTR ds:0xc00238a4,0x1
c0013420:	a3 a0 38 02 c0       	mov    ds:0xc00238a0,eax
c0013425:	e8 d2 f5 ff ff       	call   c00129fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001342a:	83 c4 1c             	add    esp,0x1c
c001342d:	eb 90                	jmp    c00133bf <Vm::mainloop2()>

c001342f <Vm::initialise8086()>:
c001342f:	83 ec 0c             	sub    esp,0xc
c0013432:	68 80 00 00 00       	push   0x80
c0013437:	6a 00                	push   0x0
c0013439:	68 f9 33 01 c0       	push   0xc00133f9
c001343e:	ff 35 70 38 02 c0    	push   DWORD PTR ds:0xc0023870
c0013444:	e8 c7 f1 ff ff       	call   c0012610 <Process::createThread(void (*)(void*), void*, int)>
c0013449:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0013450:	a3 a8 38 02 c0       	mov    ds:0xc00238a8,eax
c0013455:	68 00 01 00 00       	push   0x100
c001345a:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c001345f:	6a 00                	push   0x0
c0013461:	6a 00                	push   0x0
c0013463:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013469:	e8 4e 59 ff ff       	call   c0008dbc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001346e:	83 c4 2c             	add    esp,0x2c
c0013471:	c3                   	ret    

c0013472 <Vm::finish8086()>:
c0013472:	53                   	push   ebx
c0013473:	83 ec 08             	sub    esp,0x8
c0013476:	fa                   	cli    
c0013477:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c001347d:	80 3d a4 38 02 c0 00 	cmp    BYTE PTR ds:0xc00238a4,0x0
c0013484:	75 15                	jne    c001349b <Vm::finish8086()+0x29>
c0013486:	e8 a1 f3 ff ff       	call   c001282c <schedule()>
c001348b:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0013490:	48                   	dec    eax
c0013491:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0013496:	75 de                	jne    c0013476 <Vm::finish8086()+0x4>
c0013498:	fb                   	sti    
c0013499:	eb db                	jmp    c0013476 <Vm::finish8086()+0x4>
c001349b:	83 ec 0c             	sub    esp,0xc
c001349e:	8b 1d a0 38 02 c0    	mov    ebx,DWORD PTR ds:0xc00238a0
c00134a4:	ff 35 a8 38 02 c0    	push   DWORD PTR ds:0xc00238a8
c00134aa:	c6 05 a4 38 02 c0 00 	mov    BYTE PTR ds:0xc00238a4,0x0
c00134b1:	e8 32 f8 ff ff       	call   c0012ce8 <unblockTask(ThreadControlBlock*)>
c00134b6:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00134bb:	83 c4 10             	add    esp,0x10
c00134be:	8d 50 ff             	lea    edx,[eax-0x1]
c00134c1:	89 15 48 38 02 c0    	mov    DWORD PTR ds:0xc0023848,edx
c00134c7:	85 d2                	test   edx,edx
c00134c9:	75 01                	jne    c00134cc <Vm::finish8086()+0x5a>
c00134cb:	fb                   	sti    
c00134cc:	89 d8                	mov    eax,ebx
c00134ce:	83 c4 08             	add    esp,0x8
c00134d1:	5b                   	pop    ebx
c00134d2:	c3                   	ret    

c00134d3 <Vm::getOutput8086(unsigned char*)>:
c00134d3:	57                   	push   edi
c00134d4:	8b 0d ac 38 02 c0    	mov    ecx,DWORD PTR ds:0xc00238ac
c00134da:	56                   	push   esi
c00134db:	be c0 38 02 c0       	mov    esi,0xc00238c0
c00134e0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00134e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00134e6:	a1 ac 38 02 c0       	mov    eax,ds:0xc00238ac
c00134eb:	5e                   	pop    esi
c00134ec:	c7 05 ac 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00238ac,0x0
c00134f6:	5f                   	pop    edi
c00134f7:	c3                   	ret    

c00134f8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00134f8:	55                   	push   ebp
c00134f9:	57                   	push   edi
c00134fa:	56                   	push   esi
c00134fb:	53                   	push   ebx
c00134fc:	83 ec 0c             	sub    esp,0xc
c00134ff:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013503:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0013507:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001350b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001350f:	fa                   	cli    
c0013510:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0013516:	80 3d a5 38 02 c0 00 	cmp    BYTE PTR ds:0xc00238a5,0x0
c001351d:	75 15                	jne    c0013534 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c001351f:	e8 08 f3 ff ff       	call   c001282c <schedule()>
c0013524:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0013529:	48                   	dec    eax
c001352a:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c001352f:	75 de                	jne    c001350f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0013531:	fb                   	sti    
c0013532:	eb db                	jmp    c001350f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0013534:	a1 a8 38 02 c0       	mov    eax,ds:0xc00238a8
c0013539:	c7 05 ac 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00238ac,0x0
c0013543:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0013547:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001354b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001354f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0013553:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0013557:	0f b7 ff             	movzx  edi,di
c001355a:	0f b7 f6             	movzx  esi,si
c001355d:	50                   	push   eax
c001355e:	6a 20                	push   0x20
c0013560:	6a 00                	push   0x0
c0013562:	68 c0 38 02 c0       	push   0xc00238c0
c0013567:	e8 3c cf fe ff       	call   c00004a8 <memset>
c001356c:	5a                   	pop    edx
c001356d:	59                   	pop    ecx
c001356e:	57                   	push   edi
c001356f:	56                   	push   esi
c0013570:	e8 2d fe ff ff       	call   c00133a2 <Vm::realToLinear(unsigned short, unsigned short)>
c0013575:	83 c4 10             	add    esp,0x10
c0013578:	89 c7                	mov    edi,eax
c001357a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001357e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013582:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013584:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0013589:	c6 05 a5 38 02 c0 00 	mov    BYTE PTR ds:0xc00238a5,0x0
c0013590:	48                   	dec    eax
c0013591:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0013596:	75 01                	jne    c0013599 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0013598:	fb                   	sti    
c0013599:	83 ec 0c             	sub    esp,0xc
c001359c:	ff 35 a8 38 02 c0    	push   DWORD PTR ds:0xc00238a8
c00135a2:	e8 41 f7 ff ff       	call   c0012ce8 <unblockTask(ThreadControlBlock*)>
c00135a7:	83 c4 1c             	add    esp,0x1c
c00135aa:	b0 01                	mov    al,0x1
c00135ac:	5b                   	pop    ebx
c00135ad:	5e                   	pop    esi
c00135ae:	5f                   	pop    edi
c00135af:	5d                   	pop    ebp
c00135b0:	c3                   	ret    

c00135b1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00135b1:	55                   	push   ebp
c00135b2:	57                   	push   edi
c00135b3:	56                   	push   esi
c00135b4:	53                   	push   ebx
c00135b5:	83 ec 2c             	sub    esp,0x2c
c00135b8:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00135bc:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00135c0:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00135c4:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00135c8:	fa                   	cli    
c00135c9:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c00135cf:	0f b6 35 a5 38 02 c0 	movzx  esi,BYTE PTR ds:0xc00238a5
c00135d6:	89 f0                	mov    eax,esi
c00135d8:	84 c0                	test   al,al
c00135da:	75 1d                	jne    c00135f9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00135dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00135e0:	e8 47 f2 ff ff       	call   c001282c <schedule()>
c00135e5:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00135ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00135ee:	48                   	dec    eax
c00135ef:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c00135f4:	75 d2                	jne    c00135c8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00135f6:	fb                   	sti    
c00135f7:	eb cf                	jmp    c00135c8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00135f9:	a1 a8 38 02 c0       	mov    eax,ds:0xc00238a8
c00135fe:	c7 05 ac 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00238ac,0x0
c0013608:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c001360c:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0013610:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0013614:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0013618:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001361c:	50                   	push   eax
c001361d:	6a 20                	push   0x20
c001361f:	6a 00                	push   0x0
c0013621:	68 c0 38 02 c0       	push   0xc00238c0
c0013626:	e8 7d ce fe ff       	call   c00004a8 <memset>
c001362b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013632:	e8 12 33 ff ff       	call   c0006949 <malloc>
c0013637:	83 c4 0c             	add    esp,0xc
c001363a:	89 c3                	mov    ebx,eax
c001363c:	ff 35 70 38 02 c0    	push   DWORD PTR ds:0xc0023870
c0013642:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013646:	50                   	push   eax
c0013647:	e8 f2 65 ff ff       	call   c0009c3e <File::File(char const*, Process*)>
c001364c:	83 c4 10             	add    esp,0x10
c001364f:	85 db                	test   ebx,ebx
c0013651:	75 0a                	jne    c001365d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0013653:	83 ec 0c             	sub    esp,0xc
c0013656:	68 a4 f0 01 c0       	push   0xc001f0a4
c001365b:	eb 3e                	jmp    c001369b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001365d:	50                   	push   eax
c001365e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013662:	50                   	push   eax
c0013663:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013667:	50                   	push   eax
c0013668:	53                   	push   ebx
c0013669:	e8 36 69 ff ff       	call   c0009fa4 <File::stat(unsigned long long*, bool*)>
c001366e:	83 c4 10             	add    esp,0x10
c0013671:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013676:	74 0a                	je     c0013682 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0013678:	83 ec 0c             	sub    esp,0xc
c001367b:	68 b8 f0 01 c0       	push   0xc001f0b8
c0013680:	eb 19                	jmp    c001369b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0013682:	51                   	push   ecx
c0013683:	51                   	push   ecx
c0013684:	6a 01                	push   0x1
c0013686:	53                   	push   ebx
c0013687:	e8 6c 66 ff ff       	call   c0009cf8 <File::open(FileOpenMode)>
c001368c:	83 c4 10             	add    esp,0x10
c001368f:	85 c0                	test   eax,eax
c0013691:	74 24                	je     c00136b7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0013693:	83 ec 0c             	sub    esp,0xc
c0013696:	68 d1 f0 01 c0       	push   0xc001f0d1
c001369b:	e8 09 bd ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c00136a0:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00136a5:	83 c4 10             	add    esp,0x10
c00136a8:	48                   	dec    eax
c00136a9:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c00136ae:	85 c0                	test   eax,eax
c00136b0:	75 01                	jne    c00136b3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00136b2:	fb                   	sti    
c00136b3:	31 f6                	xor    esi,esi
c00136b5:	eb 58                	jmp    c001370f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00136b7:	0f b7 ed             	movzx  ebp,bp
c00136ba:	50                   	push   eax
c00136bb:	0f b7 ff             	movzx  edi,di
c00136be:	50                   	push   eax
c00136bf:	55                   	push   ebp
c00136c0:	57                   	push   edi
c00136c1:	e8 dc fc ff ff       	call   c00133a2 <Vm::realToLinear(unsigned short, unsigned short)>
c00136c6:	5a                   	pop    edx
c00136c7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00136c9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00136cd:	51                   	push   ecx
c00136ce:	50                   	push   eax
c00136cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00136d3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00136d7:	53                   	push   ebx
c00136d8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00136db:	83 c4 14             	add    esp,0x14
c00136de:	53                   	push   ebx
c00136df:	e8 72 66 ff ff       	call   c0009d56 <File::close()>
c00136e4:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00136e9:	83 c4 10             	add    esp,0x10
c00136ec:	48                   	dec    eax
c00136ed:	c6 05 a5 38 02 c0 00 	mov    BYTE PTR ds:0xc00238a5,0x0
c00136f4:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c00136f9:	85 c0                	test   eax,eax
c00136fb:	75 01                	jne    c00136fe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00136fd:	fb                   	sti    
c00136fe:	83 ec 0c             	sub    esp,0xc
c0013701:	ff 35 a8 38 02 c0    	push   DWORD PTR ds:0xc00238a8
c0013707:	e8 dc f5 ff ff       	call   c0012ce8 <unblockTask(ThreadControlBlock*)>
c001370c:	83 c4 10             	add    esp,0x10
c001370f:	83 c4 2c             	add    esp,0x2c
c0013712:	89 f0                	mov    eax,esi
c0013714:	5b                   	pop    ebx
c0013715:	5e                   	pop    esi
c0013716:	5f                   	pop    edi
c0013717:	5d                   	pop    ebp
c0013718:	c3                   	ret    

c0013719 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0013719:	57                   	push   edi
c001371a:	56                   	push   esi
c001371b:	53                   	push   ebx
c001371c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013720:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013724:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013728:	83 e8 06             	sub    eax,0x6
c001372b:	0f b7 c0             	movzx  eax,ax
c001372e:	50                   	push   eax
c001372f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0013734:	50                   	push   eax
c0013735:	e8 68 fc ff ff       	call   c00133a2 <Vm::realToLinear(unsigned short, unsigned short)>
c001373a:	5a                   	pop    edx
c001373b:	5e                   	pop    esi
c001373c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001373f:	8d 56 fa             	lea    edx,[esi-0x6]
c0013742:	81 e2 ff ff 00 00    	and    edx,0xffff
c0013748:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001374b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001374e:	83 c2 02             	add    edx,0x2
c0013751:	66 89 10             	mov    WORD PTR [eax],dx
c0013754:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0013757:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001375b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001375e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0013762:	89 d6                	mov    esi,edx
c0013764:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001376a:	66 81 e6 ff fd       	and    si,0xfdff
c001376f:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0013773:	74 07                	je     c001377c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0013775:	89 d6                	mov    esi,edx
c0013777:	66 81 ce 00 02       	or     si,0x200
c001377c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0013780:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013785:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0013789:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0013791:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0013794:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001379c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001379f:	5b                   	pop    ebx
c00137a0:	5e                   	pop    esi
c00137a1:	5f                   	pop    edi
c00137a2:	c3                   	ret    

c00137a3 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00137a3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00137a8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00137ad:	c1 e0 04             	shl    eax,0x4
c00137b0:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00137b3:	c3                   	ret    

c00137b4 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00137b4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00137b9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00137be:	c1 e0 04             	shl    eax,0x4
c00137c1:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00137c5:	c3                   	ret    

c00137c6 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00137c6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00137cb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00137d0:	c1 e0 04             	shl    eax,0x4
c00137d3:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00137d6:	c3                   	ret    

c00137d7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00137d7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00137dc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00137e1:	c1 e0 04             	shl    eax,0x4
c00137e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00137e8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00137eb:	c3                   	ret    

c00137ec <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00137ec:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00137f1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00137f6:	c1 e0 04             	shl    eax,0x4
c00137f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00137fd:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0013801:	c3                   	ret    

c0013802 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0013802:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013807:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001380c:	c1 e0 04             	shl    eax,0x4
c001380f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013813:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0013816:	c3                   	ret    

c0013817 <Vm::faultHandler(regs*)>:
c0013817:	55                   	push   ebp
c0013818:	57                   	push   edi
c0013819:	56                   	push   esi
c001381a:	53                   	push   ebx
c001381b:	83 ec 1c             	sub    esp,0x1c
c001381e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013822:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013825:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0013829:	0f b7 f8             	movzx  edi,ax
c001382c:	52                   	push   edx
c001382d:	0f b7 c0             	movzx  eax,ax
c0013830:	50                   	push   eax
c0013831:	e8 6c fb ff ff       	call   c00133a2 <Vm::realToLinear(unsigned short, unsigned short)>
c0013836:	5a                   	pop    edx
c0013837:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001383a:	59                   	pop    ecx
c001383b:	89 c1                	mov    ecx,eax
c001383d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013840:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013844:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013849:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001384d:	0f b7 c5             	movzx  eax,bp
c0013850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013854:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0013858:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001385c:	e8 41 fb ff ff       	call   c00133a2 <Vm::realToLinear(unsigned short, unsigned short)>
c0013861:	5e                   	pop    esi
c0013862:	be 06 00 00 00       	mov    esi,0x6
c0013867:	5a                   	pop    edx
c0013868:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001386d:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0013872:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0013875:	80 fa 9d             	cmp    dl,0x9d
c0013878:	0f 84 2c 02 00 00    	je     c0013aaa <Vm::faultHandler(regs*)+0x293>
c001387e:	0f 87 91 00 00 00    	ja     c0013915 <Vm::faultHandler(regs*)+0xfe>
c0013884:	80 fa 66             	cmp    dl,0x66
c0013887:	0f 84 98 01 00 00    	je     c0013a25 <Vm::faultHandler(regs*)+0x20e>
c001388d:	77 47                	ja     c00138d6 <Vm::faultHandler(regs*)+0xbf>
c001388f:	80 fa 36             	cmp    dl,0x36
c0013892:	0f 84 80 01 00 00    	je     c0013a18 <Vm::faultHandler(regs*)+0x201>
c0013898:	77 1a                	ja     c00138b4 <Vm::faultHandler(regs*)+0x9d>
c001389a:	80 fa 26             	cmp    dl,0x26
c001389d:	0f 84 4e 01 00 00    	je     c00139f1 <Vm::faultHandler(regs*)+0x1da>
c00138a3:	80 fa 2e             	cmp    dl,0x2e
c00138a6:	0f 85 e2 05 00 00    	jne    c0013e8e <Vm::faultHandler(regs*)+0x677>
c00138ac:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00138af:	31 f6                	xor    esi,esi
c00138b1:	41                   	inc    ecx
c00138b2:	eb be                	jmp    c0013872 <Vm::faultHandler(regs*)+0x5b>
c00138b4:	80 fa 64             	cmp    dl,0x64
c00138b7:	0f 84 41 01 00 00    	je     c00139fe <Vm::faultHandler(regs*)+0x1e7>
c00138bd:	0f 87 48 01 00 00    	ja     c0013a0b <Vm::faultHandler(regs*)+0x1f4>
c00138c3:	80 fa 3e             	cmp    dl,0x3e
c00138c6:	0f 85 c2 05 00 00    	jne    c0013e8e <Vm::faultHandler(regs*)+0x677>
c00138cc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00138cf:	be 01 00 00 00       	mov    esi,0x1
c00138d4:	eb db                	jmp    c00138b1 <Vm::faultHandler(regs*)+0x9a>
c00138d6:	80 fa 6d             	cmp    dl,0x6d
c00138d9:	0f 84 ec 02 00 00    	je     c0013bcb <Vm::faultHandler(regs*)+0x3b4>
c00138df:	77 17                	ja     c00138f8 <Vm::faultHandler(regs*)+0xe1>
c00138e1:	80 fa 67             	cmp    dl,0x67
c00138e4:	0f 84 48 01 00 00    	je     c0013a32 <Vm::faultHandler(regs*)+0x21b>
c00138ea:	80 fa 6c             	cmp    dl,0x6c
c00138ed:	0f 84 69 02 00 00    	je     c0013b5c <Vm::faultHandler(regs*)+0x345>
c00138f3:	e9 96 05 00 00       	jmp    c0013e8e <Vm::faultHandler(regs*)+0x677>
c00138f8:	80 fa 6f             	cmp    dl,0x6f
c00138fb:	0f 84 f4 03 00 00    	je     c0013cf5 <Vm::faultHandler(regs*)+0x4de>
c0013901:	0f 82 59 03 00 00    	jb     c0013c60 <Vm::faultHandler(regs*)+0x449>
c0013907:	80 fa 9c             	cmp    dl,0x9c
c001390a:	0f 84 2f 01 00 00    	je     c0013a3f <Vm::faultHandler(regs*)+0x228>
c0013910:	e9 79 05 00 00       	jmp    c0013e8e <Vm::faultHandler(regs*)+0x677>
c0013915:	80 fa ec             	cmp    dl,0xec
c0013918:	0f 84 14 05 00 00    	je     c0013e32 <Vm::faultHandler(regs*)+0x61b>
c001391e:	77 7b                	ja     c001399b <Vm::faultHandler(regs*)+0x184>
c0013920:	80 fa e4             	cmp    dl,0xe4
c0013923:	0f 84 93 04 00 00    	je     c0013dbc <Vm::faultHandler(regs*)+0x5a5>
c0013929:	77 53                	ja     c001397e <Vm::faultHandler(regs*)+0x167>
c001392b:	80 fa cd             	cmp    dl,0xcd
c001392e:	0f 84 d9 01 00 00    	je     c0013b0d <Vm::faultHandler(regs*)+0x2f6>
c0013934:	80 fa cf             	cmp    dl,0xcf
c0013937:	0f 85 51 05 00 00    	jne    c0013e8e <Vm::faultHandler(regs*)+0x677>
c001393d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0013940:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0013943:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0013947:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001394a:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001394e:	81 ca 00 02 02 00    	or     edx,0x20200
c0013954:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0013957:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001395b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013961:	66 c1 e8 09          	shr    ax,0x9
c0013965:	83 e0 01             	and    eax,0x1
c0013968:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001396b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001396e:	83 c0 06             	add    eax,0x6
c0013971:	25 ff ff 00 00       	and    eax,0xffff
c0013976:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0013979:	e9 0c 05 00 00       	jmp    c0013e8a <Vm::faultHandler(regs*)+0x673>
c001397e:	80 fa e6             	cmp    dl,0xe6
c0013981:	0f 84 7f 04 00 00    	je     c0013e06 <Vm::faultHandler(regs*)+0x5ef>
c0013987:	0f 82 4b 04 00 00    	jb     c0013dd8 <Vm::faultHandler(regs*)+0x5c1>
c001398d:	80 fa e7             	cmp    dl,0xe7
c0013990:	0f 84 87 04 00 00    	je     c0013e1d <Vm::faultHandler(regs*)+0x606>
c0013996:	e9 f3 04 00 00       	jmp    c0013e8e <Vm::faultHandler(regs*)+0x677>
c001399b:	80 fa ef             	cmp    dl,0xef
c001399e:	0f 84 d1 04 00 00    	je     c0013e75 <Vm::faultHandler(regs*)+0x65e>
c00139a4:	77 28                	ja     c00139ce <Vm::faultHandler(regs*)+0x1b7>
c00139a6:	80 fa ed             	cmp    dl,0xed
c00139a9:	0f 84 9f 04 00 00    	je     c0013e4e <Vm::faultHandler(regs*)+0x637>
c00139af:	80 fa ee             	cmp    dl,0xee
c00139b2:	0f 85 d6 04 00 00    	jne    c0013e8e <Vm::faultHandler(regs*)+0x677>
c00139b8:	50                   	push   eax
c00139b9:	50                   	push   eax
c00139ba:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00139be:	50                   	push   eax
c00139bf:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00139c3:	50                   	push   eax
c00139c4:	e8 a3 f9 ff ff       	call   c001336c <Vm::outbv(unsigned short, unsigned char)>
c00139c9:	e9 9f 04 00 00       	jmp    c0013e6d <Vm::faultHandler(regs*)+0x656>
c00139ce:	80 fa fa             	cmp    dl,0xfa
c00139d1:	0f 84 69 01 00 00    	je     c0013b40 <Vm::faultHandler(regs*)+0x329>
c00139d7:	80 fa fb             	cmp    dl,0xfb
c00139da:	0f 84 6e 01 00 00    	je     c0013b4e <Vm::faultHandler(regs*)+0x337>
c00139e0:	80 fa f3             	cmp    dl,0xf3
c00139e3:	0f 85 a5 04 00 00    	jne    c0013e8e <Vm::faultHandler(regs*)+0x677>
c00139e9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00139ec:	e9 c0 fe ff ff       	jmp    c00138b1 <Vm::faultHandler(regs*)+0x9a>
c00139f1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00139f4:	be 02 00 00 00       	mov    esi,0x2
c00139f9:	e9 b3 fe ff ff       	jmp    c00138b1 <Vm::faultHandler(regs*)+0x9a>
c00139fe:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013a01:	be 03 00 00 00       	mov    esi,0x3
c0013a06:	e9 a6 fe ff ff       	jmp    c00138b1 <Vm::faultHandler(regs*)+0x9a>
c0013a0b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013a0e:	be 04 00 00 00       	mov    esi,0x4
c0013a13:	e9 99 fe ff ff       	jmp    c00138b1 <Vm::faultHandler(regs*)+0x9a>
c0013a18:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013a1b:	be 05 00 00 00       	mov    esi,0x5
c0013a20:	e9 8c fe ff ff       	jmp    c00138b1 <Vm::faultHandler(regs*)+0x9a>
c0013a25:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013a28:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0013a2d:	e9 7f fe ff ff       	jmp    c00138b1 <Vm::faultHandler(regs*)+0x9a>
c0013a32:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013a35:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0013a3a:	e9 72 fe ff ff       	jmp    c00138b1 <Vm::faultHandler(regs*)+0x9a>
c0013a3f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0013a42:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013a46:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013a4b:	74 30                	je     c0013a7d <Vm::faultHandler(regs*)+0x266>
c0013a4d:	83 e9 04             	sub    ecx,0x4
c0013a50:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0013a56:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0013a5c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0013a5f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0013a62:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013a68:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0013a6c:	0f 84 15 04 00 00    	je     c0013e87 <Vm::faultHandler(regs*)+0x670>
c0013a72:	80 ce 02             	or     dh,0x2
c0013a75:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0013a78:	e9 0a 04 00 00       	jmp    c0013e87 <Vm::faultHandler(regs*)+0x670>
c0013a7d:	83 e9 02             	sub    ecx,0x2
c0013a80:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0013a86:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0013a89:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0013a8d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013a93:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0013a97:	74 05                	je     c0013a9e <Vm::faultHandler(regs*)+0x287>
c0013a99:	80 ce 02             	or     dh,0x2
c0013a9c:	eb 03                	jmp    c0013aa1 <Vm::faultHandler(regs*)+0x28a>
c0013a9e:	80 e6 fd             	and    dh,0xfd
c0013aa1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0013aa5:	e9 dd 03 00 00       	jmp    c0013e87 <Vm::faultHandler(regs*)+0x670>
c0013aaa:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013aaf:	74 2a                	je     c0013adb <Vm::faultHandler(regs*)+0x2c4>
c0013ab1:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ab3:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0013ab9:	81 ca 00 02 02 00    	or     edx,0x20200
c0013abf:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0013ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ac4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013aca:	c1 e8 09             	shr    eax,0x9
c0013acd:	83 e0 01             	and    eax,0x1
c0013ad0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0013ad3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013ad6:	83 c0 04             	add    eax,0x4
c0013ad9:	eb 25                	jmp    c0013b00 <Vm::faultHandler(regs*)+0x2e9>
c0013adb:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0013ade:	81 ca 00 02 02 00    	or     edx,0x20200
c0013ae4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0013ae7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013aea:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013af0:	66 c1 e8 09          	shr    ax,0x9
c0013af4:	83 e0 01             	and    eax,0x1
c0013af7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0013afa:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013afd:	83 c0 02             	add    eax,0x2
c0013b00:	25 ff ff 00 00       	and    eax,0xffff
c0013b05:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0013b08:	e9 7a 03 00 00       	jmp    c0013e87 <Vm::faultHandler(regs*)+0x670>
c0013b0d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013b11:	3c ee                	cmp    al,0xee
c0013b13:	75 10                	jne    c0013b25 <Vm::faultHandler(regs*)+0x30e>
c0013b15:	83 ec 0c             	sub    esp,0xc
c0013b18:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0013b1b:	e8 e9 f8 ff ff       	call   c0013409 <Vm::mainloop3(unsigned long)>
c0013b20:	e9 4b 03 00 00       	jmp    c0013e70 <Vm::faultHandler(regs*)+0x659>
c0013b25:	83 ec 0c             	sub    esp,0xc
c0013b28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013b2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b30:	51                   	push   ecx
c0013b31:	50                   	push   eax
c0013b32:	53                   	push   ebx
c0013b33:	e8 e1 fb ff ff       	call   c0013719 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0013b38:	83 c4 20             	add    esp,0x20
c0013b3b:	e9 4a 03 00 00       	jmp    c0013e8a <Vm::faultHandler(regs*)+0x673>
c0013b40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b45:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0013b49:	e9 39 03 00 00       	jmp    c0013e87 <Vm::faultHandler(regs*)+0x670>
c0013b4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b53:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0013b57:	e9 2b 03 00 00       	jmp    c0013e87 <Vm::faultHandler(regs*)+0x670>
c0013b5c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0013b5f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013b64:	74 2b                	je     c0013b91 <Vm::faultHandler(regs*)+0x37a>
c0013b66:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0013b6d:	76 22                	jbe    c0013b91 <Vm::faultHandler(regs*)+0x37a>
c0013b6f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013b73:	50                   	push   eax
c0013b74:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013b78:	50                   	push   eax
c0013b79:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013b7d:	50                   	push   eax
c0013b7e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013b82:	50                   	push   eax
c0013b83:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013b87:	50                   	push   eax
c0013b88:	6a 6c                	push   0x6c
c0013b8a:	6a 6c                	push   0x6c
c0013b8c:	e9 b9 01 00 00       	jmp    c0013d4a <Vm::faultHandler(regs*)+0x533>
c0013b91:	83 ec 0c             	sub    esp,0xc
c0013b94:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013b98:	0f b7 f6             	movzx  esi,si
c0013b9b:	50                   	push   eax
c0013b9c:	e8 b8 f7 ff ff       	call   c0013359 <Vm::inbv(unsigned short)>
c0013ba1:	83 c4 0c             	add    esp,0xc
c0013ba4:	0f b6 c0             	movzx  eax,al
c0013ba7:	50                   	push   eax
c0013ba8:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0013bac:	50                   	push   eax
c0013bad:	56                   	push   esi
c0013bae:	e8 24 fc ff ff       	call   c00137d7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0013bb3:	83 c4 10             	add    esp,0x10
c0013bb6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013bb9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013bbd:	74 03                	je     c0013bc2 <Vm::faultHandler(regs*)+0x3ab>
c0013bbf:	48                   	dec    eax
c0013bc0:	eb 01                	jmp    c0013bc3 <Vm::faultHandler(regs*)+0x3ac>
c0013bc2:	40                   	inc    eax
c0013bc3:	0f b7 c0             	movzx  eax,ax
c0013bc6:	e9 8d 00 00 00       	jmp    c0013c58 <Vm::faultHandler(regs*)+0x441>
c0013bcb:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0013bce:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013bd1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013bd6:	74 29                	je     c0013c01 <Vm::faultHandler(regs*)+0x3ea>
c0013bd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0013bdd:	76 22                	jbe    c0013c01 <Vm::faultHandler(regs*)+0x3ea>
c0013bdf:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013be3:	50                   	push   eax
c0013be4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013be8:	50                   	push   eax
c0013be9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013bed:	50                   	push   eax
c0013bee:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013bf2:	50                   	push   eax
c0013bf3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013bf7:	50                   	push   eax
c0013bf8:	6a 6d                	push   0x6d
c0013bfa:	6a 6d                	push   0x6d
c0013bfc:	e9 49 01 00 00       	jmp    c0013d4a <Vm::faultHandler(regs*)+0x533>
c0013c01:	0f b7 c8             	movzx  ecx,ax
c0013c04:	0f b7 f6             	movzx  esi,si
c0013c07:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0013c0a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013c0f:	74 20                	je     c0013c31 <Vm::faultHandler(regs*)+0x41a>
c0013c11:	ed                   	in     eax,dx
c0013c12:	55                   	push   ebp
c0013c13:	50                   	push   eax
c0013c14:	51                   	push   ecx
c0013c15:	56                   	push   esi
c0013c16:	e8 e7 fb ff ff       	call   c0013802 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0013c1b:	83 c4 10             	add    esp,0x10
c0013c1e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013c21:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013c25:	74 05                	je     c0013c2c <Vm::faultHandler(regs*)+0x415>
c0013c27:	83 e8 04             	sub    eax,0x4
c0013c2a:	eb 27                	jmp    c0013c53 <Vm::faultHandler(regs*)+0x43c>
c0013c2c:	83 c0 04             	add    eax,0x4
c0013c2f:	eb 22                	jmp    c0013c53 <Vm::faultHandler(regs*)+0x43c>
c0013c31:	66 ed                	in     ax,dx
c0013c33:	0f b7 c0             	movzx  eax,ax
c0013c36:	57                   	push   edi
c0013c37:	50                   	push   eax
c0013c38:	51                   	push   ecx
c0013c39:	56                   	push   esi
c0013c3a:	e8 ad fb ff ff       	call   c00137ec <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0013c3f:	83 c4 10             	add    esp,0x10
c0013c42:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013c45:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013c49:	74 05                	je     c0013c50 <Vm::faultHandler(regs*)+0x439>
c0013c4b:	83 e8 02             	sub    eax,0x2
c0013c4e:	eb 03                	jmp    c0013c53 <Vm::faultHandler(regs*)+0x43c>
c0013c50:	83 c0 02             	add    eax,0x2
c0013c53:	25 ff ff 00 00       	and    eax,0xffff
c0013c58:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0013c5b:	e9 27 02 00 00       	jmp    c0013e87 <Vm::faultHandler(regs*)+0x670>
c0013c60:	8d 46 ff             	lea    eax,[esi-0x1]
c0013c63:	3c 05                	cmp    al,0x5
c0013c65:	77 24                	ja     c0013c8b <Vm::faultHandler(regs*)+0x474>
c0013c67:	0f b6 c0             	movzx  eax,al
c0013c6a:	ff 24 85 44 f1 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0ebc]
c0013c71:	0f b7 fd             	movzx  edi,bp
c0013c74:	eb 15                	jmp    c0013c8b <Vm::faultHandler(regs*)+0x474>
c0013c76:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0013c7a:	eb 0f                	jmp    c0013c8b <Vm::faultHandler(regs*)+0x474>
c0013c7c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0013c80:	eb 09                	jmp    c0013c8b <Vm::faultHandler(regs*)+0x474>
c0013c82:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0013c86:	eb 03                	jmp    c0013c8b <Vm::faultHandler(regs*)+0x474>
c0013c88:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0013c8b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013c8e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013c93:	74 29                	je     c0013cbe <Vm::faultHandler(regs*)+0x4a7>
c0013c95:	3d ff ff 00 00       	cmp    eax,0xffff
c0013c9a:	76 22                	jbe    c0013cbe <Vm::faultHandler(regs*)+0x4a7>
c0013c9c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013ca0:	50                   	push   eax
c0013ca1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013ca5:	50                   	push   eax
c0013ca6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013caa:	50                   	push   eax
c0013cab:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013caf:	50                   	push   eax
c0013cb0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013cb4:	50                   	push   eax
c0013cb5:	6a 6e                	push   0x6e
c0013cb7:	6a 6e                	push   0x6e
c0013cb9:	e9 8c 00 00 00       	jmp    c0013d4a <Vm::faultHandler(regs*)+0x533>
c0013cbe:	0f b7 c0             	movzx  eax,ax
c0013cc1:	52                   	push   edx
c0013cc2:	52                   	push   edx
c0013cc3:	50                   	push   eax
c0013cc4:	57                   	push   edi
c0013cc5:	e8 d9 fa ff ff       	call   c00137a3 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0013cca:	59                   	pop    ecx
c0013ccb:	0f b6 c0             	movzx  eax,al
c0013cce:	5e                   	pop    esi
c0013ccf:	50                   	push   eax
c0013cd0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013cd4:	50                   	push   eax
c0013cd5:	e8 92 f6 ff ff       	call   c001336c <Vm::outbv(unsigned short, unsigned char)>
c0013cda:	83 c4 10             	add    esp,0x10
c0013cdd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013ce0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013ce4:	74 03                	je     c0013ce9 <Vm::faultHandler(regs*)+0x4d2>
c0013ce6:	48                   	dec    eax
c0013ce7:	eb 01                	jmp    c0013cea <Vm::faultHandler(regs*)+0x4d3>
c0013ce9:	40                   	inc    eax
c0013cea:	0f b7 c0             	movzx  eax,ax
c0013ced:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0013cf0:	e9 92 01 00 00       	jmp    c0013e87 <Vm::faultHandler(regs*)+0x670>
c0013cf5:	8d 46 ff             	lea    eax,[esi-0x1]
c0013cf8:	3c 05                	cmp    al,0x5
c0013cfa:	77 1f                	ja     c0013d1b <Vm::faultHandler(regs*)+0x504>
c0013cfc:	0f b6 c0             	movzx  eax,al
c0013cff:	ff 24 85 5c f1 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0ea4]
c0013d06:	89 ef                	mov    edi,ebp
c0013d08:	eb 11                	jmp    c0013d1b <Vm::faultHandler(regs*)+0x504>
c0013d0a:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0013d0d:	eb 0c                	jmp    c0013d1b <Vm::faultHandler(regs*)+0x504>
c0013d0f:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0013d12:	eb 07                	jmp    c0013d1b <Vm::faultHandler(regs*)+0x504>
c0013d14:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0013d17:	eb 02                	jmp    c0013d1b <Vm::faultHandler(regs*)+0x504>
c0013d19:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0013d1b:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0013d1e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013d23:	74 37                	je     c0013d5c <Vm::faultHandler(regs*)+0x545>
c0013d25:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0013d2b:	76 2f                	jbe    c0013d5c <Vm::faultHandler(regs*)+0x545>
c0013d2d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013d31:	50                   	push   eax
c0013d32:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013d36:	50                   	push   eax
c0013d37:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013d3b:	50                   	push   eax
c0013d3c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013d40:	50                   	push   eax
c0013d41:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013d45:	50                   	push   eax
c0013d46:	6a 6f                	push   0x6f
c0013d48:	6a 6f                	push   0x6f
c0013d4a:	68 ea f0 01 c0       	push   0xc001f0ea
c0013d4f:	e8 7f 59 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0013d54:	83 c4 20             	add    esp,0x20
c0013d57:	e9 86 01 00 00       	jmp    c0013ee2 <Vm::faultHandler(regs*)+0x6cb>
c0013d5c:	0f b7 d7             	movzx  edx,di
c0013d5f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0013d62:	0f b7 c6             	movzx  eax,si
c0013d65:	81 e1 00 04 00 00    	and    ecx,0x400
c0013d6b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0013d6e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013d73:	74 1d                	je     c0013d92 <Vm::faultHandler(regs*)+0x57b>
c0013d75:	55                   	push   ebp
c0013d76:	55                   	push   ebp
c0013d77:	50                   	push   eax
c0013d78:	52                   	push   edx
c0013d79:	e8 48 fa ff ff       	call   c00137c6 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0013d7e:	83 c4 10             	add    esp,0x10
c0013d81:	89 fa                	mov    edx,edi
c0013d83:	ef                   	out    dx,eax
c0013d84:	85 c9                	test   ecx,ecx
c0013d86:	74 05                	je     c0013d8d <Vm::faultHandler(regs*)+0x576>
c0013d88:	83 ee 04             	sub    esi,0x4
c0013d8b:	eb 21                	jmp    c0013dae <Vm::faultHandler(regs*)+0x597>
c0013d8d:	83 c6 04             	add    esi,0x4
c0013d90:	eb 1c                	jmp    c0013dae <Vm::faultHandler(regs*)+0x597>
c0013d92:	55                   	push   ebp
c0013d93:	55                   	push   ebp
c0013d94:	50                   	push   eax
c0013d95:	52                   	push   edx
c0013d96:	e8 19 fa ff ff       	call   c00137b4 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0013d9b:	83 c4 10             	add    esp,0x10
c0013d9e:	89 fa                	mov    edx,edi
c0013da0:	66 ef                	out    dx,ax
c0013da2:	85 c9                	test   ecx,ecx
c0013da4:	74 05                	je     c0013dab <Vm::faultHandler(regs*)+0x594>
c0013da6:	83 ee 02             	sub    esi,0x2
c0013da9:	eb 03                	jmp    c0013dae <Vm::faultHandler(regs*)+0x597>
c0013dab:	83 c6 02             	add    esi,0x2
c0013dae:	81 e6 ff ff 00 00    	and    esi,0xffff
c0013db4:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0013db7:	e9 cb 00 00 00       	jmp    c0013e87 <Vm::faultHandler(regs*)+0x670>
c0013dbc:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0013dc3:	83 ec 0c             	sub    esp,0xc
c0013dc6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013dca:	50                   	push   eax
c0013dcb:	e8 89 f5 ff ff       	call   c0013359 <Vm::inbv(unsigned short)>
c0013dd0:	0f b6 c0             	movzx  eax,al
c0013dd3:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0013dd6:	eb 3f                	jmp    c0013e17 <Vm::faultHandler(regs*)+0x600>
c0013dd8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013ddd:	74 07                	je     c0013de6 <Vm::faultHandler(regs*)+0x5cf>
c0013ddf:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0013de3:	ed                   	in     eax,dx
c0013de4:	eb 14                	jmp    c0013dfa <Vm::faultHandler(regs*)+0x5e3>
c0013de6:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0013de9:	66 31 f6             	xor    si,si
c0013dec:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0013def:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0013df3:	66 ed                	in     ax,dx
c0013df5:	0f b7 c0             	movzx  eax,ax
c0013df8:	09 f0                	or     eax,esi
c0013dfa:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0013dfd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0013e01:	e9 84 00 00 00       	jmp    c0013e8a <Vm::faultHandler(regs*)+0x673>
c0013e06:	52                   	push   edx
c0013e07:	52                   	push   edx
c0013e08:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0013e0c:	50                   	push   eax
c0013e0d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013e11:	50                   	push   eax
c0013e12:	e8 55 f5 ff ff       	call   c001336c <Vm::outbv(unsigned short, unsigned char)>
c0013e17:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0013e1b:	eb 53                	jmp    c0013e70 <Vm::faultHandler(regs*)+0x659>
c0013e1d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0013e20:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0013e24:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013e29:	74 03                	je     c0013e2e <Vm::faultHandler(regs*)+0x617>
c0013e2b:	ef                   	out    dx,eax
c0013e2c:	eb cf                	jmp    c0013dfd <Vm::faultHandler(regs*)+0x5e6>
c0013e2e:	66 ef                	out    dx,ax
c0013e30:	eb cb                	jmp    c0013dfd <Vm::faultHandler(regs*)+0x5e6>
c0013e32:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0013e39:	83 ec 0c             	sub    esp,0xc
c0013e3c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013e40:	50                   	push   eax
c0013e41:	e8 13 f5 ff ff       	call   c0013359 <Vm::inbv(unsigned short)>
c0013e46:	0f b6 c0             	movzx  eax,al
c0013e49:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0013e4c:	eb 1f                	jmp    c0013e6d <Vm::faultHandler(regs*)+0x656>
c0013e4e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0013e51:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013e56:	74 03                	je     c0013e5b <Vm::faultHandler(regs*)+0x644>
c0013e58:	ed                   	in     eax,dx
c0013e59:	eb 0d                	jmp    c0013e68 <Vm::faultHandler(regs*)+0x651>
c0013e5b:	66 ed                	in     ax,dx
c0013e5d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0013e60:	0f b7 c0             	movzx  eax,ax
c0013e63:	66 31 d2             	xor    dx,dx
c0013e66:	09 d0                	or     eax,edx
c0013e68:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0013e6b:	eb 1a                	jmp    c0013e87 <Vm::faultHandler(regs*)+0x670>
c0013e6d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013e70:	83 c4 10             	add    esp,0x10
c0013e73:	eb 15                	jmp    c0013e8a <Vm::faultHandler(regs*)+0x673>
c0013e75:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0013e78:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0013e7b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013e80:	74 03                	je     c0013e85 <Vm::faultHandler(regs*)+0x66e>
c0013e82:	ef                   	out    dx,eax
c0013e83:	eb 02                	jmp    c0013e87 <Vm::faultHandler(regs*)+0x670>
c0013e85:	66 ef                	out    dx,ax
c0013e87:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013e8a:	b0 01                	mov    al,0x1
c0013e8c:	eb 56                	jmp    c0013ee4 <Vm::faultHandler(regs*)+0x6cd>
c0013e8e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013e92:	50                   	push   eax
c0013e93:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013e97:	50                   	push   eax
c0013e98:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013e9c:	50                   	push   eax
c0013e9d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013ea1:	50                   	push   eax
c0013ea2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013ea6:	50                   	push   eax
c0013ea7:	52                   	push   edx
c0013ea8:	52                   	push   edx
c0013ea9:	68 17 f1 01 c0       	push   0xc001f117
c0013eae:	e8 20 58 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0013eb3:	83 c4 20             	add    esp,0x20
c0013eb6:	83 ec 0c             	sub    esp,0xc
c0013eb9:	6a 60                	push   0x60
c0013ebb:	e8 99 f4 ff ff       	call   c0013359 <Vm::inbv(unsigned short)>
c0013ec0:	83 c4 10             	add    esp,0x10
c0013ec3:	3c 1c                	cmp    al,0x1c
c0013ec5:	74 04                	je     c0013ecb <Vm::faultHandler(regs*)+0x6b4>
c0013ec7:	3c 5a                	cmp    al,0x5a
c0013ec9:	75 eb                	jne    c0013eb6 <Vm::faultHandler(regs*)+0x69f>
c0013ecb:	3c 5a                	cmp    al,0x5a
c0013ecd:	74 04                	je     c0013ed3 <Vm::faultHandler(regs*)+0x6bc>
c0013ecf:	3c 1c                	cmp    al,0x1c
c0013ed1:	75 0f                	jne    c0013ee2 <Vm::faultHandler(regs*)+0x6cb>
c0013ed3:	83 ec 0c             	sub    esp,0xc
c0013ed6:	6a 60                	push   0x60
c0013ed8:	e8 7c f4 ff ff       	call   c0013359 <Vm::inbv(unsigned short)>
c0013edd:	83 c4 10             	add    esp,0x10
c0013ee0:	eb e9                	jmp    c0013ecb <Vm::faultHandler(regs*)+0x6b4>
c0013ee2:	31 c0                	xor    eax,eax
c0013ee4:	83 c4 1c             	add    esp,0x1c
c0013ee7:	5b                   	pop    ebx
c0013ee8:	5e                   	pop    esi
c0013ee9:	5f                   	pop    edi
c0013eea:	5d                   	pop    ebp
c0013eeb:	c3                   	ret    

c0013eec <Vm::fpuInternalTo32(unsigned long long)>:
c0013eec:	57                   	push   edi
c0013eed:	56                   	push   esi
c0013eee:	53                   	push   ebx
c0013eef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ef7:	89 d6                	mov    esi,edx
c0013ef9:	89 d7                	mov    edi,edx
c0013efb:	89 c1                	mov    ecx,eax
c0013efd:	c1 ef 14             	shr    edi,0x14
c0013f00:	89 d3                	mov    ebx,edx
c0013f02:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0013f08:	31 d2                	xor    edx,edx
c0013f0a:	89 f8                	mov    eax,edi
c0013f0c:	81 e6 00 00 00 80    	and    esi,0x80000000
c0013f12:	bf ff 00 00 00       	mov    edi,0xff
c0013f17:	05 80 fc ff ff       	add    eax,0xfffffc80
c0013f1c:	83 d2 ff             	adc    edx,0xffffffff
c0013f1f:	39 c7                	cmp    edi,eax
c0013f21:	bf 00 00 00 00       	mov    edi,0x0
c0013f26:	19 d7                	sbb    edi,edx
c0013f28:	72 16                	jb     c0013f40 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0013f2a:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0013f2e:	c1 e0 17             	shl    eax,0x17
c0013f31:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c0013f37:	09 f1                	or     ecx,esi
c0013f39:	09 c1                	or     ecx,eax
c0013f3b:	89 cf                	mov    edi,ecx
c0013f3d:	eb 05                	jmp    c0013f44 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0013f3f:	90                   	nop
c0013f40:	31 ff                	xor    edi,edi
c0013f42:	66 90                	xchg   ax,ax
c0013f44:	89 f8                	mov    eax,edi
c0013f46:	5b                   	pop    ebx
c0013f47:	5e                   	pop    esi
c0013f48:	5f                   	pop    edi
c0013f49:	c3                   	ret    

c0013f4a <Vm::fpuInternalTo64(unsigned long long)>:
c0013f4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013f52:	c3                   	ret    

c0013f53 <Vm::fpu32ToInternal(unsigned int)>:
c0013f53:	57                   	push   edi
c0013f54:	31 ff                	xor    edi,edi
c0013f56:	56                   	push   esi
c0013f57:	53                   	push   ebx
c0013f58:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013f5c:	89 cb                	mov    ebx,ecx
c0013f5e:	89 ce                	mov    esi,ecx
c0013f60:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0013f66:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0013f6c:	c1 e9 17             	shr    ecx,0x17
c0013f6f:	89 f0                	mov    eax,esi
c0013f71:	0f b6 d1             	movzx  edx,cl
c0013f74:	81 c2 80 03 00 00    	add    edx,0x380
c0013f7a:	89 d1                	mov    ecx,edx
c0013f7c:	89 fa                	mov    edx,edi
c0013f7e:	c1 e1 14             	shl    ecx,0x14
c0013f81:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0013f85:	c1 e0 1d             	shl    eax,0x1d
c0013f88:	89 d7                	mov    edi,edx
c0013f8a:	89 c6                	mov    esi,eax
c0013f8c:	89 ca                	mov    edx,ecx
c0013f8e:	89 f0                	mov    eax,esi
c0013f90:	09 fa                	or     edx,edi
c0013f92:	09 da                	or     edx,ebx
c0013f94:	5b                   	pop    ebx
c0013f95:	5e                   	pop    esi
c0013f96:	5f                   	pop    edi
c0013f97:	c3                   	ret    

c0013f98 <Vm::fpu64ToInternal(unsigned long long)>:
c0013f98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013fa0:	c3                   	ret    

c0013fa1 <Vm::fpuFloatToLong(unsigned long long)>:
c0013fa1:	57                   	push   edi
c0013fa2:	31 c0                	xor    eax,eax
c0013fa4:	56                   	push   esi
c0013fa5:	31 d2                	xor    edx,edx
c0013fa7:	53                   	push   ebx
c0013fa8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013fac:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013fb0:	89 d9                	mov    ecx,ebx
c0013fb2:	c1 e9 14             	shr    ecx,0x14
c0013fb5:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0013fbb:	89 cf                	mov    edi,ecx
c0013fbd:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0013fc3:	78 37                	js     c0013ffc <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0013fc5:	89 d9                	mov    ecx,ebx
c0013fc7:	89 f0                	mov    eax,esi
c0013fc9:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0013fcf:	81 c9 00 00 10 00    	or     ecx,0x100000
c0013fd5:	89 ca                	mov    edx,ecx
c0013fd7:	b9 34 00 00 00       	mov    ecx,0x34
c0013fdc:	29 f9                	sub    ecx,edi
c0013fde:	0f ad d0             	shrd   eax,edx,cl
c0013fe1:	d3 fa                	sar    edx,cl
c0013fe3:	f6 c1 20             	test   cl,0x20
c0013fe6:	74 08                	je     c0013ff0 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0013fe8:	89 d0                	mov    eax,edx
c0013fea:	c1 fa 1f             	sar    edx,0x1f
c0013fed:	8d 76 00             	lea    esi,[esi+0x0]
c0013ff0:	85 db                	test   ebx,ebx
c0013ff2:	79 08                	jns    c0013ffc <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0013ff4:	f7 d8                	neg    eax
c0013ff6:	83 d2 00             	adc    edx,0x0
c0013ff9:	f7 da                	neg    edx
c0013ffb:	90                   	nop
c0013ffc:	5b                   	pop    ebx
c0013ffd:	5e                   	pop    esi
c0013ffe:	5f                   	pop    edi
c0013fff:	c3                   	ret    

c0014000 <Vm::fpuULongToFloat(unsigned long long)>:
c0014000:	57                   	push   edi
c0014001:	31 c9                	xor    ecx,ecx
c0014003:	56                   	push   esi
c0014004:	53                   	push   ebx
c0014005:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014009:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001400d:	8d 76 00             	lea    esi,[esi+0x0]
c0014010:	0f ba e7 14          	bt     edi,0x14
c0014014:	72 0a                	jb     c0014020 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c0014016:	01 f6                	add    esi,esi
c0014018:	11 ff                	adc    edi,edi
c001401a:	41                   	inc    ecx
c001401b:	eb f3                	jmp    c0014010 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c001401d:	8d 76 00             	lea    esi,[esi+0x0]
c0014020:	89 fa                	mov    edx,edi
c0014022:	89 f0                	mov    eax,esi
c0014024:	bb 33 04 00 00       	mov    ebx,0x433
c0014029:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001402f:	29 cb                	sub    ebx,ecx
c0014031:	89 d9                	mov    ecx,ebx
c0014033:	5b                   	pop    ebx
c0014034:	c1 e1 14             	shl    ecx,0x14
c0014037:	5e                   	pop    esi
c0014038:	09 ca                	or     edx,ecx
c001403a:	5f                   	pop    edi
c001403b:	c3                   	ret    

c001403c <Vm::fpuLongToFloat(long long)>:
c001403c:	56                   	push   esi
c001403d:	31 c0                	xor    eax,eax
c001403f:	53                   	push   ebx
c0014040:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014044:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014048:	39 c8                	cmp    eax,ecx
c001404a:	19 d8                	sbb    eax,ebx
c001404c:	7d 06                	jge    c0014054 <Vm::fpuLongToFloat(long long)+0x18>
c001404e:	31 f6                	xor    esi,esi
c0014050:	eb 0e                	jmp    c0014060 <Vm::fpuLongToFloat(long long)+0x24>
c0014052:	66 90                	xchg   ax,ax
c0014054:	f7 d9                	neg    ecx
c0014056:	be 01 00 00 00       	mov    esi,0x1
c001405b:	83 d3 00             	adc    ebx,0x0
c001405e:	f7 db                	neg    ebx
c0014060:	31 c0                	xor    eax,eax
c0014062:	66 90                	xchg   ax,ax
c0014064:	0f ba e3 14          	bt     ebx,0x14
c0014068:	72 0a                	jb     c0014074 <Vm::fpuLongToFloat(long long)+0x38>
c001406a:	01 c9                	add    ecx,ecx
c001406c:	11 db                	adc    ebx,ebx
c001406e:	40                   	inc    eax
c001406f:	eb f3                	jmp    c0014064 <Vm::fpuLongToFloat(long long)+0x28>
c0014071:	8d 76 00             	lea    esi,[esi+0x0]
c0014074:	ba 33 04 00 00       	mov    edx,0x433
c0014079:	29 c2                	sub    edx,eax
c001407b:	89 c8                	mov    eax,ecx
c001407d:	c1 e2 14             	shl    edx,0x14
c0014080:	89 d9                	mov    ecx,ebx
c0014082:	89 f3                	mov    ebx,esi
c0014084:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001408a:	09 ca                	or     edx,ecx
c001408c:	84 db                	test   bl,bl
c001408e:	74 08                	je     c0014098 <Vm::fpuLongToFloat(long long)+0x5c>
c0014090:	81 ca 00 00 00 80    	or     edx,0x80000000
c0014096:	66 90                	xchg   ax,ax
c0014098:	5b                   	pop    ebx
c0014099:	5e                   	pop    esi
c001409a:	c3                   	ret    

c001409b <Vm::fpuGet0()>:
c001409b:	31 c0                	xor    eax,eax
c001409d:	31 d2                	xor    edx,edx
c001409f:	c3                   	ret    

c00140a0 <Vm::fpuGet1()>:
c00140a0:	b8 01 00 00 00       	mov    eax,0x1
c00140a5:	31 d2                	xor    edx,edx
c00140a7:	c3                   	ret    

c00140a8 <Vm::fpuGetPi()>:
c00140a8:	b8 03 00 00 00       	mov    eax,0x3
c00140ad:	31 d2                	xor    edx,edx
c00140af:	c3                   	ret    

c00140b0 <Vm::fpuGetLog2E()>:
c00140b0:	83 ec 18             	sub    esp,0x18
c00140b3:	68 74 f1 01 c0       	push   0xc001f174
c00140b8:	e8 ec b2 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c00140bd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00140c2:	31 d2                	xor    edx,edx
c00140c4:	83 c4 1c             	add    esp,0x1c
c00140c7:	c3                   	ret    

c00140c8 <Vm::fpuGetLogE2()>:
c00140c8:	83 ec 18             	sub    esp,0x18
c00140cb:	68 80 f1 01 c0       	push   0xc001f180
c00140d0:	e8 d4 b2 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c00140d5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00140da:	31 d2                	xor    edx,edx
c00140dc:	83 c4 1c             	add    esp,0x1c
c00140df:	c3                   	ret    

c00140e0 <Vm::fpuGetLog210()>:
c00140e0:	83 ec 18             	sub    esp,0x18
c00140e3:	68 8c f1 01 c0       	push   0xc001f18c
c00140e8:	e8 bc b2 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c00140ed:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00140f2:	31 d2                	xor    edx,edx
c00140f4:	83 c4 1c             	add    esp,0x1c
c00140f7:	c3                   	ret    

c00140f8 <Vm::fpuGetLog102()>:
c00140f8:	83 ec 18             	sub    esp,0x18
c00140fb:	68 99 f1 01 c0       	push   0xc001f199
c0014100:	e8 a4 b2 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c0014105:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001410a:	31 d2                	xor    edx,edx
c001410c:	83 c4 1c             	add    esp,0x1c
c001410f:	c3                   	ret    

c0014110 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0014110:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014114:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0014118:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001411c:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0014120:	0f 92 c0             	setb   al
c0014123:	c3                   	ret    

c0014124 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0014124:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001412c:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0014130:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0014134:	09 c2                	or     edx,eax
c0014136:	0f 94 c0             	sete   al
c0014139:	c3                   	ret    

c001413a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001413a:	57                   	push   edi
c001413b:	56                   	push   esi
c001413c:	53                   	push   ebx
c001413d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014141:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014145:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014149:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001414d:	57                   	push   edi
c001414e:	56                   	push   esi
c001414f:	53                   	push   ebx
c0014150:	51                   	push   ecx
c0014151:	e8 ce ff ff ff       	call   c0014124 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c0014156:	83 c4 10             	add    esp,0x10
c0014159:	88 c2                	mov    dl,al
c001415b:	31 c0                	xor    eax,eax
c001415d:	84 d2                	test   dl,dl
c001415f:	75 0f                	jne    c0014170 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0014161:	57                   	push   edi
c0014162:	56                   	push   esi
c0014163:	53                   	push   ebx
c0014164:	51                   	push   ecx
c0014165:	e8 a6 ff ff ff       	call   c0014110 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001416a:	83 c4 10             	add    esp,0x10
c001416d:	8d 76 00             	lea    esi,[esi+0x0]
c0014170:	83 e0 01             	and    eax,0x1
c0014173:	5b                   	pop    ebx
c0014174:	88 c1                	mov    cl,al
c0014176:	83 e2 01             	and    edx,0x1
c0014179:	a0 e1 38 02 c0       	mov    al,ds:0xc00238e1
c001417e:	c1 e2 06             	shl    edx,0x6
c0014181:	83 e0 ba             	and    eax,0xffffffba
c0014184:	5e                   	pop    esi
c0014185:	09 c8                	or     eax,ecx
c0014187:	5f                   	pop    edi
c0014188:	09 d0                	or     eax,edx
c001418a:	a2 e1 38 02 c0       	mov    ds:0xc00238e1,al
c001418f:	c3                   	ret    

c0014190 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0014190:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014194:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014198:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001419c:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c00141a0:	c3                   	ret    

c00141a1 <Vm::fpuAbs(unsigned long long)>:
c00141a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00141a9:	c3                   	ret    

c00141aa <Vm::fpuChs(unsigned long long)>:
c00141aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00141b2:	f7 d8                	neg    eax
c00141b4:	83 d2 00             	adc    edx,0x0
c00141b7:	f7 da                	neg    edx
c00141b9:	c3                   	ret    

c00141ba <Vm::fpuSub(unsigned long long, unsigned long long)>:
c00141ba:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c00141be:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c00141c3:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c00141c7:	eb c7                	jmp    c0014190 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c00141c9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c00141c9:	53                   	push   ebx
c00141ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00141ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00141d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00141d6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141da:	0f af ca             	imul   ecx,edx
c00141dd:	0f af d8             	imul   ebx,eax
c00141e0:	f7 e2                	mul    edx
c00141e2:	01 d9                	add    ecx,ebx
c00141e4:	5b                   	pop    ebx
c00141e5:	01 ca                	add    edx,ecx
c00141e7:	c3                   	ret    

c00141e8 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c00141e8:	83 ec 0c             	sub    esp,0xc
c00141eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141fb:	e8 c0 82 00 00       	call   c001c4c0 <__udivdi3>
c0014200:	83 c4 1c             	add    esp,0x1c
c0014203:	c3                   	ret    

c0014204 <Vm::fpuSquare(unsigned long long)>:
c0014204:	50                   	push   eax
c0014205:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014209:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001420d:	52                   	push   edx
c001420e:	50                   	push   eax
c001420f:	52                   	push   edx
c0014210:	50                   	push   eax
c0014211:	e8 b3 ff ff ff       	call   c00141c9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0014216:	83 c4 14             	add    esp,0x14
c0014219:	c3                   	ret    

c001421a <Vm::fpuGetReg(int)>:
c001421a:	83 ec 0c             	sub    esp,0xc
c001421d:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0014222:	76 10                	jbe    c0014234 <Vm::fpuGetReg(int)+0x1a>
c0014224:	83 ec 0c             	sub    esp,0xc
c0014227:	68 a6 f1 01 c0       	push   0xc001f1a6
c001422c:	e8 78 b1 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c0014231:	83 c4 10             	add    esp,0x10
c0014234:	a0 e1 38 02 c0       	mov    al,ds:0xc00238e1
c0014239:	b9 08 00 00 00       	mov    ecx,0x8
c001423e:	c0 e8 03             	shr    al,0x3
c0014241:	83 e0 07             	and    eax,0x7
c0014244:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0014248:	99                   	cdq    
c0014249:	f7 f9                	idiv   ecx
c001424b:	8b 04 d5 e4 38 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffdc71c]
c0014252:	8b 14 d5 e8 38 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffdc718]
c0014259:	83 c4 0c             	add    esp,0xc
c001425c:	c3                   	ret    

c001425d <Vm::fpuSetReg(int, unsigned long long)>:
c001425d:	57                   	push   edi
c001425e:	56                   	push   esi
c001425f:	52                   	push   edx
c0014260:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014264:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014268:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001426d:	76 11                	jbe    c0014280 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c001426f:	83 ec 0c             	sub    esp,0xc
c0014272:	68 b9 f1 01 c0       	push   0xc001f1b9
c0014277:	e8 2d b1 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001427c:	83 c4 10             	add    esp,0x10
c001427f:	90                   	nop
c0014280:	a0 e1 38 02 c0       	mov    al,ds:0xc00238e1
c0014285:	b9 08 00 00 00       	mov    ecx,0x8
c001428a:	c0 e8 03             	shr    al,0x3
c001428d:	83 e0 07             	and    eax,0x7
c0014290:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0014294:	99                   	cdq    
c0014295:	f7 f9                	idiv   ecx
c0014297:	89 34 d5 e4 38 02 c0 	mov    DWORD PTR [edx*8-0x3ffdc71c],esi
c001429e:	89 3c d5 e8 38 02 c0 	mov    DWORD PTR [edx*8-0x3ffdc718],edi
c00142a5:	58                   	pop    eax
c00142a6:	5e                   	pop    esi
c00142a7:	5f                   	pop    edi
c00142a8:	c3                   	ret    

c00142a9 <Vm::fpuPush(unsigned long long)>:
c00142a9:	a0 e1 38 02 c0       	mov    al,ds:0xc00238e1
c00142ae:	c0 e8 03             	shr    al,0x3
c00142b1:	83 e0 07             	and    eax,0x7
c00142b4:	83 c0 07             	add    eax,0x7
c00142b7:	88 c2                	mov    dl,al
c00142b9:	83 e0 07             	and    eax,0x7
c00142bc:	83 e2 07             	and    edx,0x7
c00142bf:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c00142c6:	8a 15 e1 38 02 c0    	mov    dl,BYTE PTR ds:0xc00238e1
c00142cc:	83 e2 c7             	and    edx,0xffffffc7
c00142cf:	09 ca                	or     edx,ecx
c00142d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00142d5:	88 15 e1 38 02 c0    	mov    BYTE PTR ds:0xc00238e1,dl
c00142db:	89 0c c5 e8 38 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc718],ecx
c00142e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00142e6:	89 14 c5 e4 38 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc71c],edx
c00142ed:	a1 24 39 02 c0       	mov    eax,ds:0xc0023924
c00142f2:	83 f8 08             	cmp    eax,0x8
c00142f5:	75 09                	jne    c0014300 <Vm::fpuPush(unsigned long long)+0x57>
c00142f7:	80 0d e0 38 02 c0 40 	or     BYTE PTR ds:0xc00238e0,0x40
c00142fe:	c3                   	ret    
c00142ff:	90                   	nop
c0014300:	40                   	inc    eax
c0014301:	a3 24 39 02 c0       	mov    ds:0xc0023924,eax
c0014306:	c3                   	ret    

c0014307 <Vm::fpuPop()>:
c0014307:	8a 0d e1 38 02 c0    	mov    cl,BYTE PTR ds:0xc00238e1
c001430d:	53                   	push   ebx
c001430e:	c0 e9 03             	shr    cl,0x3
c0014311:	8a 1d e1 38 02 c0    	mov    bl,BYTE PTR ds:0xc00238e1
c0014317:	83 e1 07             	and    ecx,0x7
c001431a:	83 e3 c7             	and    ebx,0xffffffc7
c001431d:	8b 04 cd e4 38 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffdc71c]
c0014324:	8b 14 cd e8 38 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffdc718]
c001432b:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c0014332:	83 e1 38             	and    ecx,0x38
c0014335:	09 d9                	or     ecx,ebx
c0014337:	88 0d e1 38 02 c0    	mov    BYTE PTR ds:0xc00238e1,cl
c001433d:	8b 0d 24 39 02 c0    	mov    ecx,DWORD PTR ds:0xc0023924
c0014343:	85 c9                	test   ecx,ecx
c0014345:	74 09                	je     c0014350 <Vm::fpuPop()+0x49>
c0014347:	49                   	dec    ecx
c0014348:	89 0d 24 39 02 c0    	mov    DWORD PTR ds:0xc0023924,ecx
c001434e:	eb 08                	jmp    c0014358 <Vm::fpuPop()+0x51>
c0014350:	80 0d e0 38 02 c0 40 	or     BYTE PTR ds:0xc00238e0,0x40
c0014357:	90                   	nop
c0014358:	5b                   	pop    ebx
c0014359:	c3                   	ret    

c001435a <Vm::x87Handler(regs*)>:
c001435a:	55                   	push   ebp
c001435b:	57                   	push   edi
c001435c:	56                   	push   esi
c001435d:	53                   	push   ebx
c001435e:	83 ec 1c             	sub    esp,0x1c
c0014361:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014365:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001436a:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001436d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0014375:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0014379:	50                   	push   eax
c001437a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001437e:	50                   	push   eax
c001437f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0014383:	50                   	push   eax
c0014384:	53                   	push   ebx
c0014385:	e8 9e a8 ff ff       	call   c000ec28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001438a:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001438d:	83 c4 10             	add    esp,0x10
c0014390:	89 c6                	mov    esi,eax
c0014392:	80 fa d9             	cmp    dl,0xd9
c0014395:	0f 85 79 01 00 00    	jne    c0014514 <Vm::x87Handler(regs*)+0x1ba>
c001439b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001439f:	8d 50 20             	lea    edx,[eax+0x20]
c00143a2:	80 fa 0e             	cmp    dl,0xe
c00143a5:	0f 87 a5 00 00 00    	ja     c0014450 <Vm::x87Handler(regs*)+0xf6>
c00143ab:	0f b6 d2             	movzx  edx,dl
c00143ae:	ff 24 95 cc f1 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe0e34]
c00143b5:	8d 76 00             	lea    esi,[esi+0x0]
c00143b8:	e8 de fc ff ff       	call   c001409b <Vm::fpuGet0()>
c00143bd:	eb 09                	jmp    c00143c8 <Vm::x87Handler(regs*)+0x6e>
c00143bf:	90                   	nop
c00143c0:	e8 db fc ff ff       	call   c00140a0 <Vm::fpuGet1()>
c00143c5:	8d 76 00             	lea    esi,[esi+0x0]
c00143c8:	57                   	push   edi
c00143c9:	57                   	push   edi
c00143ca:	66 90                	xchg   ax,ax
c00143cc:	52                   	push   edx
c00143cd:	50                   	push   eax
c00143ce:	e8 d6 fe ff ff       	call   c00142a9 <Vm::fpuPush(unsigned long long)>
c00143d3:	90                   	nop
c00143d4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00143d8:	83 c4 10             	add    esp,0x10
c00143db:	90                   	nop
c00143dc:	b0 01                	mov    al,0x1
c00143de:	e9 89 0a 00 00       	jmp    c0014e6c <Vm::x87Handler(regs*)+0xb12>
c00143e3:	90                   	nop
c00143e4:	83 ec 0c             	sub    esp,0xc
c00143e7:	6a 00                	push   0x0
c00143e9:	e8 2c fe ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c00143ee:	59                   	pop    ecx
c00143ef:	5e                   	pop    esi
c00143f0:	52                   	push   edx
c00143f1:	50                   	push   eax
c00143f2:	e8 b3 fd ff ff       	call   c00141aa <Vm::fpuChs(unsigned long long)>
c00143f7:	eb 17                	jmp    c0014410 <Vm::x87Handler(regs*)+0xb6>
c00143f9:	8d 76 00             	lea    esi,[esi+0x0]
c00143fc:	83 ec 0c             	sub    esp,0xc
c00143ff:	6a 00                	push   0x0
c0014401:	e8 14 fe ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014406:	5f                   	pop    edi
c0014407:	5d                   	pop    ebp
c0014408:	52                   	push   edx
c0014409:	50                   	push   eax
c001440a:	e8 92 fd ff ff       	call   c00141a1 <Vm::fpuAbs(unsigned long long)>
c001440f:	90                   	nop
c0014410:	83 c4 0c             	add    esp,0xc
c0014413:	90                   	nop
c0014414:	52                   	push   edx
c0014415:	50                   	push   eax
c0014416:	66 90                	xchg   ax,ax
c0014418:	6a 00                	push   0x0
c001441a:	66 90                	xchg   ax,ax
c001441c:	e8 3c fe ff ff       	call   c001425d <Vm::fpuSetReg(int, unsigned long long)>
c0014421:	eb b1                	jmp    c00143d4 <Vm::x87Handler(regs*)+0x7a>
c0014423:	90                   	nop
c0014424:	e8 b7 fc ff ff       	call   c00140e0 <Vm::fpuGetLog210()>
c0014429:	eb 9d                	jmp    c00143c8 <Vm::x87Handler(regs*)+0x6e>
c001442b:	90                   	nop
c001442c:	e8 7f fc ff ff       	call   c00140b0 <Vm::fpuGetLog2E()>
c0014431:	eb 95                	jmp    c00143c8 <Vm::x87Handler(regs*)+0x6e>
c0014433:	90                   	nop
c0014434:	e8 6f fc ff ff       	call   c00140a8 <Vm::fpuGetPi()>
c0014439:	eb 8d                	jmp    c00143c8 <Vm::x87Handler(regs*)+0x6e>
c001443b:	90                   	nop
c001443c:	e8 b7 fc ff ff       	call   c00140f8 <Vm::fpuGetLog102()>
c0014441:	eb 85                	jmp    c00143c8 <Vm::x87Handler(regs*)+0x6e>
c0014443:	90                   	nop
c0014444:	e8 7f fc ff ff       	call   c00140c8 <Vm::fpuGetLogE2()>
c0014449:	e9 7a ff ff ff       	jmp    c00143c8 <Vm::x87Handler(regs*)+0x6e>
c001444e:	66 90                	xchg   ax,ax
c0014450:	8d 50 40             	lea    edx,[eax+0x40]
c0014453:	80 fa 07             	cmp    dl,0x7
c0014456:	77 18                	ja     c0014470 <Vm::x87Handler(regs*)+0x116>
c0014458:	83 ec 0c             	sub    esp,0xc
c001445b:	2d c0 00 00 00       	sub    eax,0xc0
c0014460:	50                   	push   eax
c0014461:	e8 b4 fd ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014466:	59                   	pop    ecx
c0014467:	5e                   	pop    esi
c0014468:	e9 5f ff ff ff       	jmp    c00143cc <Vm::x87Handler(regs*)+0x72>
c001446d:	8d 76 00             	lea    esi,[esi+0x0]
c0014470:	8d 50 38             	lea    edx,[eax+0x38]
c0014473:	80 fa 07             	cmp    dl,0x7
c0014476:	77 3c                	ja     c00144b4 <Vm::x87Handler(regs*)+0x15a>
c0014478:	83 ec 0c             	sub    esp,0xc
c001447b:	2d c8 00 00 00       	sub    eax,0xc8
c0014480:	50                   	push   eax
c0014481:	e8 94 fd ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014486:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001448d:	89 c6                	mov    esi,eax
c001448f:	89 d7                	mov    edi,edx
c0014491:	e8 84 fd ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014496:	83 c4 0c             	add    esp,0xc
c0014499:	52                   	push   edx
c001449a:	50                   	push   eax
c001449b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001449f:	2d c8 00 00 00       	sub    eax,0xc8
c00144a4:	50                   	push   eax
c00144a5:	e8 b3 fd ff ff       	call   c001425d <Vm::fpuSetReg(int, unsigned long long)>
c00144aa:	83 c4 0c             	add    esp,0xc
c00144ad:	57                   	push   edi
c00144ae:	56                   	push   esi
c00144af:	e9 64 ff ff ff       	jmp    c0014418 <Vm::x87Handler(regs*)+0xbe>
c00144b4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00144b8:	84 d2                	test   dl,dl
c00144ba:	75 10                	jne    c00144cc <Vm::x87Handler(regs*)+0x172>
c00144bc:	83 ec 0c             	sub    esp,0xc
c00144bf:	ff 36                	push   DWORD PTR [esi]
c00144c1:	e8 8d fa ff ff       	call   c0013f53 <Vm::fpu32ToInternal(unsigned int)>
c00144c6:	e9 c9 00 00 00       	jmp    c0014594 <Vm::x87Handler(regs*)+0x23a>
c00144cb:	90                   	nop
c00144cc:	80 fa 03             	cmp    dl,0x3
c00144cf:	75 13                	jne    c00144e4 <Vm::x87Handler(regs*)+0x18a>
c00144d1:	e8 31 fe ff ff       	call   c0014307 <Vm::fpuPop()>
c00144d6:	55                   	push   ebp
c00144d7:	55                   	push   ebp
c00144d8:	52                   	push   edx
c00144d9:	50                   	push   eax
c00144da:	e8 0d fa ff ff       	call   c0013eec <Vm::fpuInternalTo32(unsigned long long)>
c00144df:	e9 90 00 00 00       	jmp    c0014574 <Vm::x87Handler(regs*)+0x21a>
c00144e4:	80 fa 05             	cmp    dl,0x5
c00144e7:	75 0f                	jne    c00144f8 <Vm::x87Handler(regs*)+0x19e>
c00144e9:	66 8b 06             	mov    ax,WORD PTR [esi]
c00144ec:	66 a3 e2 38 02 c0    	mov    ds:0xc00238e2,ax
c00144f2:	e9 ed 00 00 00       	jmp    c00145e4 <Vm::x87Handler(regs*)+0x28a>
c00144f7:	90                   	nop
c00144f8:	31 c0                	xor    eax,eax
c00144fa:	80 fa 07             	cmp    dl,0x7
c00144fd:	0f 85 69 09 00 00    	jne    c0014e6c <Vm::x87Handler(regs*)+0xb12>
c0014503:	66 a1 e2 38 02 c0    	mov    ax,ds:0xc00238e2
c0014509:	66 89 06             	mov    WORD PTR [esi],ax
c001450c:	e9 d3 00 00 00       	jmp    c00145e4 <Vm::x87Handler(regs*)+0x28a>
c0014511:	8d 76 00             	lea    esi,[esi+0x0]
c0014514:	80 fa d8             	cmp    dl,0xd8
c0014517:	0f 84 d3 00 00 00    	je     c00145f0 <Vm::x87Handler(regs*)+0x296>
c001451d:	80 fa dc             	cmp    dl,0xdc
c0014520:	0f 84 2a 02 00 00    	je     c0014750 <Vm::x87Handler(regs*)+0x3f6>
c0014526:	80 fa de             	cmp    dl,0xde
c0014529:	0f 84 f1 02 00 00    	je     c0014820 <Vm::x87Handler(regs*)+0x4c6>
c001452f:	80 fa dd             	cmp    dl,0xdd
c0014532:	0f 84 94 04 00 00    	je     c00149cc <Vm::x87Handler(regs*)+0x672>
c0014538:	80 fa da             	cmp    dl,0xda
c001453b:	0f 84 5f 05 00 00    	je     c0014aa0 <Vm::x87Handler(regs*)+0x746>
c0014541:	80 fa df             	cmp    dl,0xdf
c0014544:	0f 84 aa 05 00 00    	je     c0014af4 <Vm::x87Handler(regs*)+0x79a>
c001454a:	31 c0                	xor    eax,eax
c001454c:	80 fa db             	cmp    dl,0xdb
c001454f:	0f 85 17 09 00 00    	jne    c0014e6c <Vm::x87Handler(regs*)+0xb12>
c0014555:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0014559:	80 fa 03             	cmp    dl,0x3
c001455c:	0f 85 c2 06 00 00    	jne    c0014c24 <Vm::x87Handler(regs*)+0x8ca>
c0014562:	e8 a0 fd ff ff       	call   c0014307 <Vm::fpuPop()>
c0014567:	55                   	push   ebp
c0014568:	55                   	push   ebp
c0014569:	8d 76 00             	lea    esi,[esi+0x0]
c001456c:	52                   	push   edx
c001456d:	50                   	push   eax
c001456e:	e8 2e fa ff ff       	call   c0013fa1 <Vm::fpuFloatToLong(unsigned long long)>
c0014573:	90                   	nop
c0014574:	83 c4 10             	add    esp,0x10
c0014577:	89 06                	mov    DWORD PTR [esi],eax
c0014579:	eb 69                	jmp    c00145e4 <Vm::x87Handler(regs*)+0x28a>
c001457b:	90                   	nop
c001457c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0014580:	84 d2                	test   dl,dl
c0014582:	0f 85 2c 06 00 00    	jne    c0014bb4 <Vm::x87Handler(regs*)+0x85a>
c0014588:	57                   	push   edi
c0014589:	57                   	push   edi
c001458a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001458d:	ff 36                	push   DWORD PTR [esi]
c001458f:	e8 04 fa ff ff       	call   c0013f98 <Vm::fpu64ToInternal(unsigned long long)>
c0014594:	5e                   	pop    esi
c0014595:	5f                   	pop    edi
c0014596:	52                   	push   edx
c0014597:	50                   	push   eax
c0014598:	e8 0c fd ff ff       	call   c00142a9 <Vm::fpuPush(unsigned long long)>
c001459d:	8d 76 00             	lea    esi,[esi+0x0]
c00145a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00145a4:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00145a7:	e9 2c fe ff ff       	jmp    c00143d8 <Vm::x87Handler(regs*)+0x7e>
c00145ac:	80 fa 03             	cmp    dl,0x3
c00145af:	0f 85 2b 07 00 00    	jne    c0014ce0 <Vm::x87Handler(regs*)+0x986>
c00145b5:	57                   	push   edi
c00145b6:	57                   	push   edi
c00145b7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00145ba:	ff 36                	push   DWORD PTR [esi]
c00145bc:	e8 d7 f9 ff ff       	call   c0013f98 <Vm::fpu64ToInternal(unsigned long long)>
c00145c1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00145c8:	89 c6                	mov    esi,eax
c00145ca:	89 d7                	mov    edi,edx
c00145cc:	e8 49 fc ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c00145d1:	57                   	push   edi
c00145d2:	56                   	push   esi
c00145d3:	52                   	push   edx
c00145d4:	50                   	push   eax
c00145d5:	e8 60 fb ff ff       	call   c001413a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00145da:	83 c4 20             	add    esp,0x20
c00145dd:	e8 25 fd ff ff       	call   c0014307 <Vm::fpuPop()>
c00145e2:	66 90                	xchg   ax,ax
c00145e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00145e8:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00145eb:	e9 ec fd ff ff       	jmp    c00143dc <Vm::x87Handler(regs*)+0x82>
c00145f0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00145f4:	8d 50 40             	lea    edx,[eax+0x40]
c00145f7:	80 fa 07             	cmp    dl,0x7
c00145fa:	77 2c                	ja     c0014628 <Vm::x87Handler(regs*)+0x2ce>
c00145fc:	83 ec 0c             	sub    esp,0xc
c00145ff:	2d c0 00 00 00       	sub    eax,0xc0
c0014604:	50                   	push   eax
c0014605:	e8 10 fc ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c001460a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014611:	89 c6                	mov    esi,eax
c0014613:	89 d7                	mov    edi,edx
c0014615:	e8 00 fc ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c001461a:	57                   	push   edi
c001461b:	56                   	push   esi
c001461c:	52                   	push   edx
c001461d:	50                   	push   eax
c001461e:	e8 6d fb ff ff       	call   c0014190 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0014623:	eb 33                	jmp    c0014658 <Vm::x87Handler(regs*)+0x2fe>
c0014625:	8d 76 00             	lea    esi,[esi+0x0]
c0014628:	8d 50 38             	lea    edx,[eax+0x38]
c001462b:	80 fa 07             	cmp    dl,0x7
c001462e:	77 30                	ja     c0014660 <Vm::x87Handler(regs*)+0x306>
c0014630:	83 ec 0c             	sub    esp,0xc
c0014633:	2d c8 00 00 00       	sub    eax,0xc8
c0014638:	50                   	push   eax
c0014639:	e8 dc fb ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c001463e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014645:	89 c6                	mov    esi,eax
c0014647:	89 d7                	mov    edi,edx
c0014649:	e8 cc fb ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c001464e:	57                   	push   edi
c001464f:	56                   	push   esi
c0014650:	52                   	push   edx
c0014651:	50                   	push   eax
c0014652:	e8 72 fb ff ff       	call   c00141c9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0014657:	90                   	nop
c0014658:	83 c4 1c             	add    esp,0x1c
c001465b:	e9 b4 fd ff ff       	jmp    c0014414 <Vm::x87Handler(regs*)+0xba>
c0014660:	8d 50 30             	lea    edx,[eax+0x30]
c0014663:	80 fa 07             	cmp    dl,0x7
c0014666:	77 10                	ja     c0014678 <Vm::x87Handler(regs*)+0x31e>
c0014668:	83 ec 0c             	sub    esp,0xc
c001466b:	2d d0 00 00 00       	sub    eax,0xd0
c0014670:	e9 c3 03 00 00       	jmp    c0014a38 <Vm::x87Handler(regs*)+0x6de>
c0014675:	8d 76 00             	lea    esi,[esi+0x0]
c0014678:	8d 50 28             	lea    edx,[eax+0x28]
c001467b:	80 fa 07             	cmp    dl,0x7
c001467e:	77 10                	ja     c0014690 <Vm::x87Handler(regs*)+0x336>
c0014680:	83 ec 0c             	sub    esp,0xc
c0014683:	2d d8 00 00 00       	sub    eax,0xd8
c0014688:	e9 e7 03 00 00       	jmp    c0014a74 <Vm::x87Handler(regs*)+0x71a>
c001468d:	8d 76 00             	lea    esi,[esi+0x0]
c0014690:	8d 50 20             	lea    edx,[eax+0x20]
c0014693:	80 fa 07             	cmp    dl,0x7
c0014696:	77 1c                	ja     c00146b4 <Vm::x87Handler(regs*)+0x35a>
c0014698:	83 ec 0c             	sub    esp,0xc
c001469b:	2d e0 00 00 00       	sub    eax,0xe0
c00146a0:	50                   	push   eax
c00146a1:	e8 74 fb ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c00146a6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00146ad:	89 c6                	mov    esi,eax
c00146af:	89 d7                	mov    edi,edx
c00146b1:	eb 25                	jmp    c00146d8 <Vm::x87Handler(regs*)+0x37e>
c00146b3:	90                   	nop
c00146b4:	8d 50 18             	lea    edx,[eax+0x18]
c00146b7:	80 fa 07             	cmp    dl,0x7
c00146ba:	77 30                	ja     c00146ec <Vm::x87Handler(regs*)+0x392>
c00146bc:	83 ec 0c             	sub    esp,0xc
c00146bf:	6a 00                	push   0x0
c00146c1:	e8 54 fb ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c00146c6:	89 c6                	mov    esi,eax
c00146c8:	89 d7                	mov    edi,edx
c00146ca:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00146ce:	2d e8 00 00 00       	sub    eax,0xe8
c00146d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00146d6:	66 90                	xchg   ax,ax
c00146d8:	e8 3d fb ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c00146dd:	57                   	push   edi
c00146de:	56                   	push   esi
c00146df:	52                   	push   edx
c00146e0:	50                   	push   eax
c00146e1:	e8 d4 fa ff ff       	call   c00141ba <Vm::fpuSub(unsigned long long, unsigned long long)>
c00146e6:	e9 6d ff ff ff       	jmp    c0014658 <Vm::x87Handler(regs*)+0x2fe>
c00146eb:	90                   	nop
c00146ec:	8d 50 10             	lea    edx,[eax+0x10]
c00146ef:	80 fa 07             	cmp    dl,0x7
c00146f2:	77 1c                	ja     c0014710 <Vm::x87Handler(regs*)+0x3b6>
c00146f4:	83 ec 0c             	sub    esp,0xc
c00146f7:	2d f0 00 00 00       	sub    eax,0xf0
c00146fc:	50                   	push   eax
c00146fd:	e8 18 fb ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014702:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014709:	89 c6                	mov    esi,eax
c001470b:	89 d7                	mov    edi,edx
c001470d:	eb 25                	jmp    c0014734 <Vm::x87Handler(regs*)+0x3da>
c001470f:	90                   	nop
c0014710:	3c f7                	cmp    al,0xf7
c0014712:	0f 86 00 04 00 00    	jbe    c0014b18 <Vm::x87Handler(regs*)+0x7be>
c0014718:	83 ec 0c             	sub    esp,0xc
c001471b:	6a 00                	push   0x0
c001471d:	e8 f8 fa ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014722:	89 c6                	mov    esi,eax
c0014724:	89 d7                	mov    edi,edx
c0014726:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001472a:	2d f8 00 00 00       	sub    eax,0xf8
c001472f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014732:	66 90                	xchg   ax,ax
c0014734:	e8 e1 fa ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014739:	57                   	push   edi
c001473a:	56                   	push   esi
c001473b:	52                   	push   edx
c001473c:	50                   	push   eax
c001473d:	e8 a6 fa ff ff       	call   c00141e8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0014742:	83 c4 1c             	add    esp,0x1c
c0014745:	52                   	push   edx
c0014746:	50                   	push   eax
c0014747:	6a 00                	push   0x0
c0014749:	e9 6a 02 00 00       	jmp    c00149b8 <Vm::x87Handler(regs*)+0x65e>
c001474e:	66 90                	xchg   ax,ax
c0014750:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014754:	8d 50 40             	lea    edx,[eax+0x40]
c0014757:	80 fa 07             	cmp    dl,0x7
c001475a:	77 38                	ja     c0014794 <Vm::x87Handler(regs*)+0x43a>
c001475c:	83 ec 0c             	sub    esp,0xc
c001475f:	2d c0 00 00 00       	sub    eax,0xc0
c0014764:	50                   	push   eax
c0014765:	e8 b0 fa ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c001476a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014771:	89 c6                	mov    esi,eax
c0014773:	89 d7                	mov    edi,edx
c0014775:	e8 a0 fa ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c001477a:	57                   	push   edi
c001477b:	56                   	push   esi
c001477c:	52                   	push   edx
c001477d:	50                   	push   eax
c001477e:	e8 0d fa ff ff       	call   c0014190 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0014783:	83 c4 1c             	add    esp,0x1c
c0014786:	52                   	push   edx
c0014787:	50                   	push   eax
c0014788:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001478c:	2d c0 00 00 00       	sub    eax,0xc0
c0014791:	eb 41                	jmp    c00147d4 <Vm::x87Handler(regs*)+0x47a>
c0014793:	90                   	nop
c0014794:	8d 50 38             	lea    edx,[eax+0x38]
c0014797:	80 fa 07             	cmp    dl,0x7
c001479a:	77 40                	ja     c00147dc <Vm::x87Handler(regs*)+0x482>
c001479c:	83 ec 0c             	sub    esp,0xc
c001479f:	2d c8 00 00 00       	sub    eax,0xc8
c00147a4:	50                   	push   eax
c00147a5:	e8 70 fa ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c00147aa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00147b1:	89 c6                	mov    esi,eax
c00147b3:	89 d7                	mov    edi,edx
c00147b5:	e8 60 fa ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c00147ba:	57                   	push   edi
c00147bb:	56                   	push   esi
c00147bc:	52                   	push   edx
c00147bd:	50                   	push   eax
c00147be:	e8 06 fa ff ff       	call   c00141c9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00147c3:	83 c4 1c             	add    esp,0x1c
c00147c6:	52                   	push   edx
c00147c7:	50                   	push   eax
c00147c8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00147cc:	2d c8 00 00 00       	sub    eax,0xc8
c00147d1:	8d 76 00             	lea    esi,[esi+0x0]
c00147d4:	50                   	push   eax
c00147d5:	e9 42 fc ff ff       	jmp    c001441c <Vm::x87Handler(regs*)+0xc2>
c00147da:	66 90                	xchg   ax,ax
c00147dc:	83 c0 18             	add    eax,0x18
c00147df:	3c 07                	cmp    al,0x7
c00147e1:	0f 87 6d 04 00 00    	ja     c0014c54 <Vm::x87Handler(regs*)+0x8fa>
c00147e7:	83 ec 0c             	sub    esp,0xc
c00147ea:	6a 00                	push   0x0
c00147ec:	e8 29 fa ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c00147f1:	89 c6                	mov    esi,eax
c00147f3:	89 d7                	mov    edi,edx
c00147f5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00147f9:	2d e8 00 00 00       	sub    eax,0xe8
c00147fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0014801:	e8 14 fa ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014806:	57                   	push   edi
c0014807:	56                   	push   esi
c0014808:	52                   	push   edx
c0014809:	50                   	push   eax
c001480a:	e8 ab f9 ff ff       	call   c00141ba <Vm::fpuSub(unsigned long long, unsigned long long)>
c001480f:	83 c4 1c             	add    esp,0x1c
c0014812:	52                   	push   edx
c0014813:	50                   	push   eax
c0014814:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014818:	2d e8 00 00 00       	sub    eax,0xe8
c001481d:	eb b5                	jmp    c00147d4 <Vm::x87Handler(regs*)+0x47a>
c001481f:	90                   	nop
c0014820:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014824:	8d 50 40             	lea    edx,[eax+0x40]
c0014827:	80 fa 07             	cmp    dl,0x7
c001482a:	77 3c                	ja     c0014868 <Vm::x87Handler(regs*)+0x50e>
c001482c:	83 ec 0c             	sub    esp,0xc
c001482f:	2d c0 00 00 00       	sub    eax,0xc0
c0014834:	50                   	push   eax
c0014835:	e8 e0 f9 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c001483a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014841:	89 c6                	mov    esi,eax
c0014843:	89 d7                	mov    edi,edx
c0014845:	e8 d0 f9 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c001484a:	57                   	push   edi
c001484b:	56                   	push   esi
c001484c:	52                   	push   edx
c001484d:	50                   	push   eax
c001484e:	e8 3d f9 ff ff       	call   c0014190 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0014853:	83 c4 1c             	add    esp,0x1c
c0014856:	52                   	push   edx
c0014857:	50                   	push   eax
c0014858:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001485c:	2d c0 00 00 00       	sub    eax,0xc0
c0014861:	e9 b2 01 00 00       	jmp    c0014a18 <Vm::x87Handler(regs*)+0x6be>
c0014866:	66 90                	xchg   ax,ax
c0014868:	8d 50 20             	lea    edx,[eax+0x20]
c001486b:	80 fa 07             	cmp    dl,0x7
c001486e:	77 3c                	ja     c00148ac <Vm::x87Handler(regs*)+0x552>
c0014870:	83 ec 0c             	sub    esp,0xc
c0014873:	2d e0 00 00 00       	sub    eax,0xe0
c0014878:	50                   	push   eax
c0014879:	e8 9c f9 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c001487e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014885:	89 c6                	mov    esi,eax
c0014887:	89 d7                	mov    edi,edx
c0014889:	e8 8c f9 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c001488e:	57                   	push   edi
c001488f:	56                   	push   esi
c0014890:	52                   	push   edx
c0014891:	50                   	push   eax
c0014892:	e8 23 f9 ff ff       	call   c00141ba <Vm::fpuSub(unsigned long long, unsigned long long)>
c0014897:	83 c4 1c             	add    esp,0x1c
c001489a:	52                   	push   edx
c001489b:	50                   	push   eax
c001489c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00148a0:	2d e0 00 00 00       	sub    eax,0xe0
c00148a5:	e9 6e 01 00 00       	jmp    c0014a18 <Vm::x87Handler(regs*)+0x6be>
c00148aa:	66 90                	xchg   ax,ax
c00148ac:	8d 50 18             	lea    edx,[eax+0x18]
c00148af:	80 fa 07             	cmp    dl,0x7
c00148b2:	77 3c                	ja     c00148f0 <Vm::x87Handler(regs*)+0x596>
c00148b4:	83 ec 0c             	sub    esp,0xc
c00148b7:	6a 00                	push   0x0
c00148b9:	e8 5c f9 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c00148be:	89 c6                	mov    esi,eax
c00148c0:	89 d7                	mov    edi,edx
c00148c2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00148c6:	2d e8 00 00 00       	sub    eax,0xe8
c00148cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00148ce:	e8 47 f9 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c00148d3:	57                   	push   edi
c00148d4:	56                   	push   esi
c00148d5:	52                   	push   edx
c00148d6:	50                   	push   eax
c00148d7:	e8 de f8 ff ff       	call   c00141ba <Vm::fpuSub(unsigned long long, unsigned long long)>
c00148dc:	83 c4 1c             	add    esp,0x1c
c00148df:	52                   	push   edx
c00148e0:	50                   	push   eax
c00148e1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00148e5:	2d e8 00 00 00       	sub    eax,0xe8
c00148ea:	e9 29 01 00 00       	jmp    c0014a18 <Vm::x87Handler(regs*)+0x6be>
c00148ef:	90                   	nop
c00148f0:	8d 50 38             	lea    edx,[eax+0x38]
c00148f3:	80 fa 07             	cmp    dl,0x7
c00148f6:	77 3c                	ja     c0014934 <Vm::x87Handler(regs*)+0x5da>
c00148f8:	83 ec 0c             	sub    esp,0xc
c00148fb:	2d c8 00 00 00       	sub    eax,0xc8
c0014900:	50                   	push   eax
c0014901:	e8 14 f9 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014906:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001490d:	89 c6                	mov    esi,eax
c001490f:	89 d7                	mov    edi,edx
c0014911:	e8 04 f9 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014916:	57                   	push   edi
c0014917:	56                   	push   esi
c0014918:	52                   	push   edx
c0014919:	50                   	push   eax
c001491a:	e8 aa f8 ff ff       	call   c00141c9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001491f:	83 c4 1c             	add    esp,0x1c
c0014922:	52                   	push   edx
c0014923:	50                   	push   eax
c0014924:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014928:	2d c8 00 00 00       	sub    eax,0xc8
c001492d:	e9 82 00 00 00       	jmp    c00149b4 <Vm::x87Handler(regs*)+0x65a>
c0014932:	66 90                	xchg   ax,ax
c0014934:	3c f7                	cmp    al,0xf7
c0014936:	76 38                	jbe    c0014970 <Vm::x87Handler(regs*)+0x616>
c0014938:	83 ec 0c             	sub    esp,0xc
c001493b:	6a 00                	push   0x0
c001493d:	e8 d8 f8 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014942:	89 c6                	mov    esi,eax
c0014944:	89 d7                	mov    edi,edx
c0014946:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001494a:	2d f8 00 00 00       	sub    eax,0xf8
c001494f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014952:	e8 c3 f8 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014957:	57                   	push   edi
c0014958:	56                   	push   esi
c0014959:	52                   	push   edx
c001495a:	50                   	push   eax
c001495b:	e8 88 f8 ff ff       	call   c00141e8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0014960:	83 c4 1c             	add    esp,0x1c
c0014963:	52                   	push   edx
c0014964:	50                   	push   eax
c0014965:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014969:	2d f8 00 00 00       	sub    eax,0xf8
c001496e:	eb 44                	jmp    c00149b4 <Vm::x87Handler(regs*)+0x65a>
c0014970:	8d 50 10             	lea    edx,[eax+0x10]
c0014973:	80 fa 07             	cmp    dl,0x7
c0014976:	0f 87 6c 01 00 00    	ja     c0014ae8 <Vm::x87Handler(regs*)+0x78e>
c001497c:	83 ec 0c             	sub    esp,0xc
c001497f:	2d f0 00 00 00       	sub    eax,0xf0
c0014984:	50                   	push   eax
c0014985:	e8 90 f8 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c001498a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014991:	89 c6                	mov    esi,eax
c0014993:	89 d7                	mov    edi,edx
c0014995:	e8 80 f8 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c001499a:	57                   	push   edi
c001499b:	56                   	push   esi
c001499c:	52                   	push   edx
c001499d:	50                   	push   eax
c001499e:	e8 45 f8 ff ff       	call   c00141e8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00149a3:	83 c4 1c             	add    esp,0x1c
c00149a6:	52                   	push   edx
c00149a7:	50                   	push   eax
c00149a8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00149ac:	2d f0 00 00 00       	sub    eax,0xf0
c00149b1:	8d 76 00             	lea    esi,[esi+0x0]
c00149b4:	50                   	push   eax
c00149b5:	8d 76 00             	lea    esi,[esi+0x0]
c00149b8:	e8 a0 f8 ff ff       	call   c001425d <Vm::fpuSetReg(int, unsigned long long)>
c00149bd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00149c1:	e8 41 f9 ff ff       	call   c0014307 <Vm::fpuPop()>
c00149c6:	e9 0d fa ff ff       	jmp    c00143d8 <Vm::x87Handler(regs*)+0x7e>
c00149cb:	90                   	nop
c00149cc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00149d0:	8d 50 30             	lea    edx,[eax+0x30]
c00149d3:	80 fa 07             	cmp    dl,0x7
c00149d6:	77 20                	ja     c00149f8 <Vm::x87Handler(regs*)+0x69e>
c00149d8:	83 ec 0c             	sub    esp,0xc
c00149db:	6a 00                	push   0x0
c00149dd:	e8 38 f8 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c00149e2:	83 c4 0c             	add    esp,0xc
c00149e5:	52                   	push   edx
c00149e6:	50                   	push   eax
c00149e7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00149eb:	2d d0 00 00 00       	sub    eax,0xd0
c00149f0:	e9 df fd ff ff       	jmp    c00147d4 <Vm::x87Handler(regs*)+0x47a>
c00149f5:	8d 76 00             	lea    esi,[esi+0x0]
c00149f8:	8d 50 28             	lea    edx,[eax+0x28]
c00149fb:	80 fa 07             	cmp    dl,0x7
c00149fe:	77 28                	ja     c0014a28 <Vm::x87Handler(regs*)+0x6ce>
c0014a00:	83 ec 0c             	sub    esp,0xc
c0014a03:	6a 00                	push   0x0
c0014a05:	e8 10 f8 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014a0a:	83 c4 0c             	add    esp,0xc
c0014a0d:	52                   	push   edx
c0014a0e:	50                   	push   eax
c0014a0f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014a13:	2d d8 00 00 00       	sub    eax,0xd8
c0014a18:	50                   	push   eax
c0014a19:	e8 3f f8 ff ff       	call   c001425d <Vm::fpuSetReg(int, unsigned long long)>
c0014a1e:	e8 e4 f8 ff ff       	call   c0014307 <Vm::fpuPop()>
c0014a23:	e9 ac f9 ff ff       	jmp    c00143d4 <Vm::x87Handler(regs*)+0x7a>
c0014a28:	8d 50 20             	lea    edx,[eax+0x20]
c0014a2b:	80 fa 07             	cmp    dl,0x7
c0014a2e:	77 30                	ja     c0014a60 <Vm::x87Handler(regs*)+0x706>
c0014a30:	83 ec 0c             	sub    esp,0xc
c0014a33:	2d e0 00 00 00       	sub    eax,0xe0
c0014a38:	50                   	push   eax
c0014a39:	e8 dc f7 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014a3e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014a45:	89 c6                	mov    esi,eax
c0014a47:	89 d7                	mov    edi,edx
c0014a49:	e8 cc f7 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014a4e:	57                   	push   edi
c0014a4f:	56                   	push   esi
c0014a50:	52                   	push   edx
c0014a51:	50                   	push   eax
c0014a52:	e8 e3 f6 ff ff       	call   c001413a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0014a57:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014a5b:	e9 78 02 00 00       	jmp    c0014cd8 <Vm::x87Handler(regs*)+0x97e>
c0014a60:	8d 50 18             	lea    edx,[eax+0x18]
c0014a63:	80 fa 07             	cmp    dl,0x7
c0014a66:	0f 87 10 fb ff ff    	ja     c001457c <Vm::x87Handler(regs*)+0x222>
c0014a6c:	83 ec 0c             	sub    esp,0xc
c0014a6f:	2d e8 00 00 00       	sub    eax,0xe8
c0014a74:	50                   	push   eax
c0014a75:	e8 a0 f7 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014a7a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014a81:	89 c6                	mov    esi,eax
c0014a83:	89 d7                	mov    edi,edx
c0014a85:	e8 90 f7 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014a8a:	57                   	push   edi
c0014a8b:	56                   	push   esi
c0014a8c:	52                   	push   edx
c0014a8d:	50                   	push   eax
c0014a8e:	e8 a7 f6 ff ff       	call   c001413a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0014a93:	83 c4 20             	add    esp,0x20
c0014a96:	e8 6c f8 ff ff       	call   c0014307 <Vm::fpuPop()>
c0014a9b:	eb 6f                	jmp    c0014b0c <Vm::x87Handler(regs*)+0x7b2>
c0014a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0014aa0:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0014aa4:	0f 85 22 01 00 00    	jne    c0014bcc <Vm::x87Handler(regs*)+0x872>
c0014aaa:	66 90                	xchg   ax,ax
c0014aac:	83 ec 0c             	sub    esp,0xc
c0014aaf:	6a 01                	push   0x1
c0014ab1:	e8 64 f7 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014ab6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014abd:	89 c6                	mov    esi,eax
c0014abf:	89 d7                	mov    edi,edx
c0014ac1:	e8 54 f7 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014ac6:	57                   	push   edi
c0014ac7:	56                   	push   esi
c0014ac8:	52                   	push   edx
c0014ac9:	50                   	push   eax
c0014aca:	e8 6b f6 ff ff       	call   c001413a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0014acf:	83 c4 20             	add    esp,0x20
c0014ad2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014ad6:	e8 2c f8 ff ff       	call   c0014307 <Vm::fpuPop()>
c0014adb:	e8 27 f8 ff ff       	call   c0014307 <Vm::fpuPop()>
c0014ae0:	e9 f7 f8 ff ff       	jmp    c00143dc <Vm::x87Handler(regs*)+0x82>
c0014ae5:	8d 76 00             	lea    esi,[esi+0x0]
c0014ae8:	3c d9                	cmp    al,0xd9
c0014aea:	0f 85 e8 02 00 00    	jne    c0014dd8 <Vm::x87Handler(regs*)+0xa7e>
c0014af0:	eb ba                	jmp    c0014aac <Vm::x87Handler(regs*)+0x752>
c0014af2:	66 90                	xchg   ax,ax
c0014af4:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0014af8:	0f 85 2a 03 00 00    	jne    c0014e28 <Vm::x87Handler(regs*)+0xace>
c0014afe:	0f b7 05 e0 38 02 c0 	movzx  eax,WORD PTR ds:0xc00238e0
c0014b05:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0014b09:	8d 76 00             	lea    esi,[esi+0x0]
c0014b0c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014b10:	e9 c7 f8 ff ff       	jmp    c00143dc <Vm::x87Handler(regs*)+0x82>
c0014b15:	8d 76 00             	lea    esi,[esi+0x0]
c0014b18:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0014b1c:	84 d2                	test   dl,dl
c0014b1e:	75 10                	jne    c0014b30 <Vm::x87Handler(regs*)+0x7d6>
c0014b20:	83 ec 0c             	sub    esp,0xc
c0014b23:	ff 36                	push   DWORD PTR [esi]
c0014b25:	e8 29 f4 ff ff       	call   c0013f53 <Vm::fpu32ToInternal(unsigned int)>
c0014b2a:	e9 39 01 00 00       	jmp    c0014c68 <Vm::x87Handler(regs*)+0x90e>
c0014b2f:	90                   	nop
c0014b30:	80 fa 01             	cmp    dl,0x1
c0014b33:	75 0f                	jne    c0014b44 <Vm::x87Handler(regs*)+0x7ea>
c0014b35:	83 ec 0c             	sub    esp,0xc
c0014b38:	ff 36                	push   DWORD PTR [esi]
c0014b3a:	e8 14 f4 ff ff       	call   c0013f53 <Vm::fpu32ToInternal(unsigned int)>
c0014b3f:	e9 b4 02 00 00       	jmp    c0014df8 <Vm::x87Handler(regs*)+0xa9e>
c0014b44:	80 fa 04             	cmp    dl,0x4
c0014b47:	75 0f                	jne    c0014b58 <Vm::x87Handler(regs*)+0x7fe>
c0014b49:	83 ec 0c             	sub    esp,0xc
c0014b4c:	ff 36                	push   DWORD PTR [esi]
c0014b4e:	e8 00 f4 ff ff       	call   c0013f53 <Vm::fpu32ToInternal(unsigned int)>
c0014b53:	e9 9c 01 00 00       	jmp    c0014cf4 <Vm::x87Handler(regs*)+0x99a>
c0014b58:	80 fa 05             	cmp    dl,0x5
c0014b5b:	75 1b                	jne    c0014b78 <Vm::x87Handler(regs*)+0x81e>
c0014b5d:	83 ec 0c             	sub    esp,0xc
c0014b60:	6a 00                	push   0x0
c0014b62:	e8 b3 f6 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014b67:	89 c7                	mov    edi,eax
c0014b69:	89 d5                	mov    ebp,edx
c0014b6b:	58                   	pop    eax
c0014b6c:	ff 36                	push   DWORD PTR [esi]
c0014b6e:	e8 e0 f3 ff ff       	call   c0013f53 <Vm::fpu32ToInternal(unsigned int)>
c0014b73:	e9 bc 01 00 00       	jmp    c0014d34 <Vm::x87Handler(regs*)+0x9da>
c0014b78:	80 fa 06             	cmp    dl,0x6
c0014b7b:	75 0f                	jne    c0014b8c <Vm::x87Handler(regs*)+0x832>
c0014b7d:	83 ec 0c             	sub    esp,0xc
c0014b80:	ff 36                	push   DWORD PTR [esi]
c0014b82:	e8 cc f3 ff ff       	call   c0013f53 <Vm::fpu32ToInternal(unsigned int)>
c0014b87:	e9 cc 01 00 00       	jmp    c0014d58 <Vm::x87Handler(regs*)+0x9fe>
c0014b8c:	31 c0                	xor    eax,eax
c0014b8e:	80 fa 07             	cmp    dl,0x7
c0014b91:	0f 85 d5 02 00 00    	jne    c0014e6c <Vm::x87Handler(regs*)+0xb12>
c0014b97:	83 ec 0c             	sub    esp,0xc
c0014b9a:	6a 00                	push   0x0
c0014b9c:	e8 79 f6 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014ba1:	89 c7                	mov    edi,eax
c0014ba3:	89 d5                	mov    ebp,edx
c0014ba5:	58                   	pop    eax
c0014ba6:	ff 36                	push   DWORD PTR [esi]
c0014ba8:	e8 a6 f3 ff ff       	call   c0013f53 <Vm::fpu32ToInternal(unsigned int)>
c0014bad:	e9 ee 01 00 00       	jmp    c0014da0 <Vm::x87Handler(regs*)+0xa46>
c0014bb2:	66 90                	xchg   ax,ax
c0014bb4:	80 fa 03             	cmp    dl,0x3
c0014bb7:	0f 85 f7 01 00 00    	jne    c0014db4 <Vm::x87Handler(regs*)+0xa5a>
c0014bbd:	e8 45 f7 ff ff       	call   c0014307 <Vm::fpuPop()>
c0014bc2:	51                   	push   ecx
c0014bc3:	51                   	push   ecx
c0014bc4:	e9 03 02 00 00       	jmp    c0014dcc <Vm::x87Handler(regs*)+0xa72>
c0014bc9:	8d 76 00             	lea    esi,[esi+0x0]
c0014bcc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0014bd0:	80 fa 01             	cmp    dl,0x1
c0014bd3:	75 0b                	jne    c0014be0 <Vm::x87Handler(regs*)+0x886>
c0014bd5:	57                   	push   edi
c0014bd6:	57                   	push   edi
c0014bd7:	8b 06                	mov    eax,DWORD PTR [esi]
c0014bd9:	e9 0e 02 00 00       	jmp    c0014dec <Vm::x87Handler(regs*)+0xa92>
c0014bde:	66 90                	xchg   ax,ax
c0014be0:	80 fa 04             	cmp    dl,0x4
c0014be3:	75 13                	jne    c0014bf8 <Vm::x87Handler(regs*)+0x89e>
c0014be5:	31 d2                	xor    edx,edx
c0014be7:	51                   	push   ecx
c0014be8:	51                   	push   ecx
c0014be9:	8b 06                	mov    eax,DWORD PTR [esi]
c0014beb:	52                   	push   edx
c0014bec:	50                   	push   eax
c0014bed:	e8 4a f4 ff ff       	call   c001403c <Vm::fpuLongToFloat(long long)>
c0014bf2:	e9 fd 00 00 00       	jmp    c0014cf4 <Vm::x87Handler(regs*)+0x99a>
c0014bf7:	90                   	nop
c0014bf8:	31 c0                	xor    eax,eax
c0014bfa:	80 fa 07             	cmp    dl,0x7
c0014bfd:	0f 85 69 02 00 00    	jne    c0014e6c <Vm::x87Handler(regs*)+0xb12>
c0014c03:	83 ec 0c             	sub    esp,0xc
c0014c06:	6a 00                	push   0x0
c0014c08:	e8 0d f6 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014c0d:	89 c7                	mov    edi,eax
c0014c0f:	89 d5                	mov    ebp,edx
c0014c11:	58                   	pop    eax
c0014c12:	8b 06                	mov    eax,DWORD PTR [esi]
c0014c14:	5a                   	pop    edx
c0014c15:	31 d2                	xor    edx,edx
c0014c17:	52                   	push   edx
c0014c18:	50                   	push   eax
c0014c19:	e8 1e f4 ff ff       	call   c001403c <Vm::fpuLongToFloat(long long)>
c0014c1e:	e9 7d 01 00 00       	jmp    c0014da0 <Vm::x87Handler(regs*)+0xa46>
c0014c23:	90                   	nop
c0014c24:	84 d2                	test   dl,dl
c0014c26:	75 10                	jne    c0014c38 <Vm::x87Handler(regs*)+0x8de>
c0014c28:	31 d2                	xor    edx,edx
c0014c2a:	55                   	push   ebp
c0014c2b:	55                   	push   ebp
c0014c2c:	8b 06                	mov    eax,DWORD PTR [esi]
c0014c2e:	52                   	push   edx
c0014c2f:	50                   	push   eax
c0014c30:	e9 03 02 00 00       	jmp    c0014e38 <Vm::x87Handler(regs*)+0xade>
c0014c35:	8d 76 00             	lea    esi,[esi+0x0]
c0014c38:	31 c0                	xor    eax,eax
c0014c3a:	80 fa 02             	cmp    dl,0x2
c0014c3d:	0f 85 29 02 00 00    	jne    c0014e6c <Vm::x87Handler(regs*)+0xb12>
c0014c43:	83 ec 0c             	sub    esp,0xc
c0014c46:	6a 00                	push   0x0
c0014c48:	e8 cd f5 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014c4d:	59                   	pop    ecx
c0014c4e:	5f                   	pop    edi
c0014c4f:	e9 18 f9 ff ff       	jmp    c001456c <Vm::x87Handler(regs*)+0x212>
c0014c54:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0014c58:	84 d2                	test   dl,dl
c0014c5a:	75 2c                	jne    c0014c88 <Vm::x87Handler(regs*)+0x92e>
c0014c5c:	50                   	push   eax
c0014c5d:	50                   	push   eax
c0014c5e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0014c61:	ff 36                	push   DWORD PTR [esi]
c0014c63:	e8 30 f3 ff ff       	call   c0013f98 <Vm::fpu64ToInternal(unsigned long long)>
c0014c68:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014c6f:	89 c6                	mov    esi,eax
c0014c71:	89 d7                	mov    edi,edx
c0014c73:	e8 a2 f5 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014c78:	57                   	push   edi
c0014c79:	56                   	push   esi
c0014c7a:	52                   	push   edx
c0014c7b:	50                   	push   eax
c0014c7c:	e8 0f f5 ff ff       	call   c0014190 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0014c81:	e9 8e 01 00 00       	jmp    c0014e14 <Vm::x87Handler(regs*)+0xaba>
c0014c86:	66 90                	xchg   ax,ax
c0014c88:	80 fa 01             	cmp    dl,0x1
c0014c8b:	75 13                	jne    c0014ca0 <Vm::x87Handler(regs*)+0x946>
c0014c8d:	50                   	push   eax
c0014c8e:	50                   	push   eax
c0014c8f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0014c92:	ff 36                	push   DWORD PTR [esi]
c0014c94:	e8 ff f2 ff ff       	call   c0013f98 <Vm::fpu64ToInternal(unsigned long long)>
c0014c99:	e9 5a 01 00 00       	jmp    c0014df8 <Vm::x87Handler(regs*)+0xa9e>
c0014c9e:	66 90                	xchg   ax,ax
c0014ca0:	80 fa 02             	cmp    dl,0x2
c0014ca3:	0f 85 03 f9 ff ff    	jne    c00145ac <Vm::x87Handler(regs*)+0x252>
c0014ca9:	55                   	push   ebp
c0014caa:	55                   	push   ebp
c0014cab:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0014cae:	ff 36                	push   DWORD PTR [esi]
c0014cb0:	e8 e3 f2 ff ff       	call   c0013f98 <Vm::fpu64ToInternal(unsigned long long)>
c0014cb5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014cbc:	89 c6                	mov    esi,eax
c0014cbe:	89 d7                	mov    edi,edx
c0014cc0:	e8 55 f5 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014cc5:	57                   	push   edi
c0014cc6:	56                   	push   esi
c0014cc7:	52                   	push   edx
c0014cc8:	50                   	push   eax
c0014cc9:	e8 6c f4 ff ff       	call   c001413a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0014cce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014cd2:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0014cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0014cd8:	83 c4 20             	add    esp,0x20
c0014cdb:	e9 fc f6 ff ff       	jmp    c00143dc <Vm::x87Handler(regs*)+0x82>
c0014ce0:	80 fa 04             	cmp    dl,0x4
c0014ce3:	75 2f                	jne    c0014d14 <Vm::x87Handler(regs*)+0x9ba>
c0014ce5:	51                   	push   ecx
c0014ce6:	51                   	push   ecx
c0014ce7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0014cea:	ff 36                	push   DWORD PTR [esi]
c0014cec:	e8 a7 f2 ff ff       	call   c0013f98 <Vm::fpu64ToInternal(unsigned long long)>
c0014cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0014cf4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014cfb:	89 c6                	mov    esi,eax
c0014cfd:	89 d7                	mov    edi,edx
c0014cff:	e8 16 f5 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014d04:	57                   	push   edi
c0014d05:	56                   	push   esi
c0014d06:	52                   	push   edx
c0014d07:	50                   	push   eax
c0014d08:	e8 ad f4 ff ff       	call   c00141ba <Vm::fpuSub(unsigned long long, unsigned long long)>
c0014d0d:	e9 02 01 00 00       	jmp    c0014e14 <Vm::x87Handler(regs*)+0xaba>
c0014d12:	66 90                	xchg   ax,ax
c0014d14:	80 fa 05             	cmp    dl,0x5
c0014d17:	75 2b                	jne    c0014d44 <Vm::x87Handler(regs*)+0x9ea>
c0014d19:	83 ec 0c             	sub    esp,0xc
c0014d1c:	6a 00                	push   0x0
c0014d1e:	e8 f7 f4 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014d23:	89 c7                	mov    edi,eax
c0014d25:	89 d5                	mov    ebp,edx
c0014d27:	58                   	pop    eax
c0014d28:	5a                   	pop    edx
c0014d29:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0014d2c:	ff 36                	push   DWORD PTR [esi]
c0014d2e:	e8 65 f2 ff ff       	call   c0013f98 <Vm::fpu64ToInternal(unsigned long long)>
c0014d33:	90                   	nop
c0014d34:	83 c4 10             	add    esp,0x10
c0014d37:	55                   	push   ebp
c0014d38:	57                   	push   edi
c0014d39:	52                   	push   edx
c0014d3a:	50                   	push   eax
c0014d3b:	e8 7a f4 ff ff       	call   c00141ba <Vm::fpuSub(unsigned long long, unsigned long long)>
c0014d40:	eb 6a                	jmp    c0014dac <Vm::x87Handler(regs*)+0xa52>
c0014d42:	66 90                	xchg   ax,ax
c0014d44:	80 fa 06             	cmp    dl,0x6
c0014d47:	75 2f                	jne    c0014d78 <Vm::x87Handler(regs*)+0xa1e>
c0014d49:	51                   	push   ecx
c0014d4a:	51                   	push   ecx
c0014d4b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0014d4e:	ff 36                	push   DWORD PTR [esi]
c0014d50:	e8 43 f2 ff ff       	call   c0013f98 <Vm::fpu64ToInternal(unsigned long long)>
c0014d55:	8d 76 00             	lea    esi,[esi+0x0]
c0014d58:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014d5f:	89 c6                	mov    esi,eax
c0014d61:	89 d7                	mov    edi,edx
c0014d63:	e8 b2 f4 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014d68:	57                   	push   edi
c0014d69:	56                   	push   esi
c0014d6a:	52                   	push   edx
c0014d6b:	50                   	push   eax
c0014d6c:	e8 77 f4 ff ff       	call   c00141e8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0014d71:	e9 9e 00 00 00       	jmp    c0014e14 <Vm::x87Handler(regs*)+0xaba>
c0014d76:	66 90                	xchg   ax,ax
c0014d78:	31 c0                	xor    eax,eax
c0014d7a:	80 fa 07             	cmp    dl,0x7
c0014d7d:	0f 85 e9 00 00 00    	jne    c0014e6c <Vm::x87Handler(regs*)+0xb12>
c0014d83:	83 ec 0c             	sub    esp,0xc
c0014d86:	6a 00                	push   0x0
c0014d88:	e8 8d f4 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014d8d:	89 c7                	mov    edi,eax
c0014d8f:	89 d5                	mov    ebp,edx
c0014d91:	58                   	pop    eax
c0014d92:	5a                   	pop    edx
c0014d93:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0014d96:	ff 36                	push   DWORD PTR [esi]
c0014d98:	e8 fb f1 ff ff       	call   c0013f98 <Vm::fpu64ToInternal(unsigned long long)>
c0014d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0014da0:	83 c4 10             	add    esp,0x10
c0014da3:	55                   	push   ebp
c0014da4:	57                   	push   edi
c0014da5:	52                   	push   edx
c0014da6:	50                   	push   eax
c0014da7:	e8 3c f4 ff ff       	call   c00141e8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0014dac:	83 c4 0c             	add    esp,0xc
c0014daf:	eb 67                	jmp    c0014e18 <Vm::x87Handler(regs*)+0xabe>
c0014db1:	8d 76 00             	lea    esi,[esi+0x0]
c0014db4:	31 c0                	xor    eax,eax
c0014db6:	80 fa 02             	cmp    dl,0x2
c0014db9:	0f 85 ad 00 00 00    	jne    c0014e6c <Vm::x87Handler(regs*)+0xb12>
c0014dbf:	83 ec 0c             	sub    esp,0xc
c0014dc2:	6a 00                	push   0x0
c0014dc4:	e8 51 f4 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014dc9:	59                   	pop    ecx
c0014dca:	5f                   	pop    edi
c0014dcb:	90                   	nop
c0014dcc:	52                   	push   edx
c0014dcd:	50                   	push   eax
c0014dce:	e8 77 f1 ff ff       	call   c0013f4a <Vm::fpuInternalTo64(unsigned long long)>
c0014dd3:	e9 84 00 00 00       	jmp    c0014e5c <Vm::x87Handler(regs*)+0xb02>
c0014dd8:	31 c0                	xor    eax,eax
c0014dda:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0014ddf:	0f 85 87 00 00 00    	jne    c0014e6c <Vm::x87Handler(regs*)+0xb12>
c0014de5:	50                   	push   eax
c0014de6:	50                   	push   eax
c0014de7:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0014dea:	66 90                	xchg   ax,ax
c0014dec:	31 d2                	xor    edx,edx
c0014dee:	52                   	push   edx
c0014def:	50                   	push   eax
c0014df0:	e8 47 f2 ff ff       	call   c001403c <Vm::fpuLongToFloat(long long)>
c0014df5:	8d 76 00             	lea    esi,[esi+0x0]
c0014df8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014dff:	89 c6                	mov    esi,eax
c0014e01:	89 d7                	mov    edi,edx
c0014e03:	e8 12 f4 ff ff       	call   c001421a <Vm::fpuGetReg(int)>
c0014e08:	57                   	push   edi
c0014e09:	56                   	push   esi
c0014e0a:	52                   	push   edx
c0014e0b:	50                   	push   eax
c0014e0c:	e8 b8 f3 ff ff       	call   c00141c9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0014e11:	8d 76 00             	lea    esi,[esi+0x0]
c0014e14:	83 c4 1c             	add    esp,0x1c
c0014e17:	90                   	nop
c0014e18:	52                   	push   edx
c0014e19:	50                   	push   eax
c0014e1a:	6a 00                	push   0x0
c0014e1c:	e8 3c f4 ff ff       	call   c001425d <Vm::fpuSetReg(int, unsigned long long)>
c0014e21:	e9 7a f7 ff ff       	jmp    c00145a0 <Vm::x87Handler(regs*)+0x246>
c0014e26:	66 90                	xchg   ax,ax
c0014e28:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0014e2c:	80 fa 05             	cmp    dl,0x5
c0014e2f:	75 13                	jne    c0014e44 <Vm::x87Handler(regs*)+0xaea>
c0014e31:	55                   	push   ebp
c0014e32:	55                   	push   ebp
c0014e33:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0014e36:	ff 36                	push   DWORD PTR [esi]
c0014e38:	e8 c3 f1 ff ff       	call   c0014000 <Vm::fpuULongToFloat(unsigned long long)>
c0014e3d:	e9 52 f7 ff ff       	jmp    c0014594 <Vm::x87Handler(regs*)+0x23a>
c0014e42:	66 90                	xchg   ax,ax
c0014e44:	31 c0                	xor    eax,eax
c0014e46:	80 fa 07             	cmp    dl,0x7
c0014e49:	75 21                	jne    c0014e6c <Vm::x87Handler(regs*)+0xb12>
c0014e4b:	e8 b7 f4 ff ff       	call   c0014307 <Vm::fpuPop()>
c0014e50:	51                   	push   ecx
c0014e51:	51                   	push   ecx
c0014e52:	52                   	push   edx
c0014e53:	50                   	push   eax
c0014e54:	e8 48 f1 ff ff       	call   c0013fa1 <Vm::fpuFloatToLong(unsigned long long)>
c0014e59:	8d 76 00             	lea    esi,[esi+0x0]
c0014e5c:	83 c4 10             	add    esp,0x10
c0014e5f:	89 06                	mov    DWORD PTR [esi],eax
c0014e61:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0014e64:	e9 7b f7 ff ff       	jmp    c00145e4 <Vm::x87Handler(regs*)+0x28a>
c0014e69:	8d 76 00             	lea    esi,[esi+0x0]
c0014e6c:	83 c4 1c             	add    esp,0x1c
c0014e6f:	5b                   	pop    ebx
c0014e70:	5e                   	pop    esi
c0014e71:	5f                   	pop    edi
c0014e72:	5d                   	pop    ebp
c0014e73:	c3                   	ret    

c0014e74 <__static_initialization_and_destruction_0(int, int)>:
c0014e74:	83 ec 0c             	sub    esp,0xc
c0014e77:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0014e7c:	75 1a                	jne    c0014e98 <__static_initialization_and_destruction_0(int, int)+0x24>
c0014e7e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0014e86:	75 10                	jne    c0014e98 <__static_initialization_and_destruction_0(int, int)+0x24>
c0014e88:	83 ec 0c             	sub    esp,0xc
c0014e8b:	68 e0 38 02 c0       	push   0xc00238e0
c0014e90:	e8 cf 7f 00 00       	call   c001ce64 <Vm::_FPUState::_FPUState()>
c0014e95:	83 c4 10             	add    esp,0x10
c0014e98:	90                   	nop
c0014e99:	83 c4 0c             	add    esp,0xc
c0014e9c:	c3                   	ret    
c0014e9d:	8d 76 00             	lea    esi,[esi+0x0]

c0014ea0 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0014ea0:	83 ec 0c             	sub    esp,0xc
c0014ea3:	83 ec 08             	sub    esp,0x8
c0014ea6:	68 ff ff 00 00       	push   0xffff
c0014eab:	6a 01                	push   0x1
c0014ead:	e8 c2 ff ff ff       	call   c0014e74 <__static_initialization_and_destruction_0(int, int)>
c0014eb2:	83 c4 10             	add    esp,0x10
c0014eb5:	83 c4 0c             	add    esp,0xc
c0014eb8:	c3                   	ret    

c0014eb9 <Hal::noCopro(unsigned long)>:
c0014eb9:	c3                   	ret    

c0014eba <Hal::noTSC()>:
c0014eba:	31 c0                	xor    eax,eax
c0014ebc:	31 d2                	xor    edx,edx
c0014ebe:	c3                   	ret    

c0014ebf <Hal::readTSC()>:
c0014ebf:	0f 31                	rdtsc  
c0014ec1:	c3                   	ret    

c0014ec2 <nmiHandler(regs*, void*)>:
c0014ec2:	83 ec 0c             	sub    esp,0xc
c0014ec5:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c0014eca:	83 ec 0c             	sub    esp,0xc
c0014ecd:	50                   	push   eax
c0014ece:	e8 2b 12 ff ff       	call   c00060fe <Computer::handleNMI()>
c0014ed3:	83 c4 10             	add    esp,0x10
c0014ed6:	90                   	nop
c0014ed7:	83 c4 0c             	add    esp,0xc
c0014eda:	c3                   	ret    

c0014edb <doubleFault(regs*, void*)>:
c0014edb:	55                   	push   ebp
c0014edc:	89 e5                	mov    ebp,esp
c0014ede:	83 ec 08             	sub    esp,0x8
c0014ee1:	83 ec 0c             	sub    esp,0xc
c0014ee4:	68 08 f2 01 c0       	push   0xc001f208
c0014ee9:	e8 bb a4 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c0014eee:	83 c4 10             	add    esp,0x10
c0014ef1:	90                   	nop
c0014ef2:	c9                   	leave  
c0014ef3:	c3                   	ret    

c0014ef4 <displayDebugInfo(regs*)>:
c0014ef4:	83 ec 1c             	sub    esp,0x1c
c0014ef7:	0f 20 c0             	mov    eax,cr0
c0014efa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014efe:	0f 20 d0             	mov    eax,cr2
c0014f01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014f05:	0f 20 d8             	mov    eax,cr3
c0014f08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f0c:	0f 20 e0             	mov    eax,cr4
c0014f0f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014f12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f16:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014f19:	83 ec 08             	sub    esp,0x8
c0014f1c:	50                   	push   eax
c0014f1d:	68 24 f2 01 c0       	push   0xc001f224
c0014f22:	e8 ac 47 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0014f27:	83 c4 10             	add    esp,0x10
c0014f2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f2e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014f31:	83 ec 08             	sub    esp,0x8
c0014f34:	50                   	push   eax
c0014f35:	68 15 f2 01 c0       	push   0xc001f215
c0014f3a:	e8 94 47 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0014f3f:	83 c4 10             	add    esp,0x10
c0014f42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f46:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014f49:	83 ec 08             	sub    esp,0x8
c0014f4c:	50                   	push   eax
c0014f4d:	68 20 f2 01 c0       	push   0xc001f220
c0014f52:	e8 7c 47 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0014f57:	83 c4 10             	add    esp,0x10
c0014f5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f5e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f61:	83 ec 08             	sub    esp,0x8
c0014f64:	50                   	push   eax
c0014f65:	68 2f f2 01 c0       	push   0xc001f22f
c0014f6a:	e8 64 47 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0014f6f:	83 c4 10             	add    esp,0x10
c0014f72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f76:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014f79:	83 ec 08             	sub    esp,0x8
c0014f7c:	50                   	push   eax
c0014f7d:	68 3a f2 01 c0       	push   0xc001f23a
c0014f82:	e8 4c 47 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0014f87:	83 c4 10             	add    esp,0x10
c0014f8a:	83 ec 08             	sub    esp,0x8
c0014f8d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f91:	68 45 f2 01 c0       	push   0xc001f245
c0014f96:	e8 38 47 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0014f9b:	83 c4 10             	add    esp,0x10
c0014f9e:	83 ec 08             	sub    esp,0x8
c0014fa1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014fa5:	68 50 f2 01 c0       	push   0xc001f250
c0014faa:	e8 24 47 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0014faf:	83 c4 10             	add    esp,0x10
c0014fb2:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0014fb7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fbd:	83 ec 0c             	sub    esp,0xc
c0014fc0:	50                   	push   eax
c0014fc1:	e8 a3 26 ff ff       	call   c0007669 <setActiveTerminal(VgaText*)>
c0014fc6:	83 c4 10             	add    esp,0x10
c0014fc9:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0014fce:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fd4:	83 ec 08             	sub    esp,0x8
c0014fd7:	68 5b f2 01 c0       	push   0xc001f25b
c0014fdc:	50                   	push   eax
c0014fdd:	e8 c6 29 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c0014fe2:	83 c4 10             	add    esp,0x10
c0014fe5:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0014fea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ff0:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0014ff5:	8b 12                	mov    edx,DWORD PTR [edx]
c0014ff7:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014ffa:	83 c2 0c             	add    edx,0xc
c0014ffd:	83 ec 08             	sub    esp,0x8
c0015000:	52                   	push   edx
c0015001:	50                   	push   eax
c0015002:	e8 a1 29 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c0015007:	83 c4 10             	add    esp,0x10
c001500a:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c001500f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015015:	83 ec 08             	sub    esp,0x8
c0015018:	68 64 f2 01 c0       	push   0xc001f264
c001501d:	50                   	push   eax
c001501e:	e8 85 29 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c0015023:	83 c4 10             	add    esp,0x10
c0015026:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c001502b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015031:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015035:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0015038:	83 ec 08             	sub    esp,0x8
c001503b:	52                   	push   edx
c001503c:	50                   	push   eax
c001503d:	e8 20 29 ff ff       	call   c0007962 <VgaText::putx(unsigned int)>
c0015042:	83 c4 10             	add    esp,0x10
c0015045:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c001504a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015050:	83 ec 08             	sub    esp,0x8
c0015053:	68 6c f2 01 c0       	push   0xc001f26c
c0015058:	50                   	push   eax
c0015059:	e8 4a 29 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c001505e:	83 c4 10             	add    esp,0x10
c0015061:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0015066:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001506c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015070:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0015073:	83 ec 08             	sub    esp,0x8
c0015076:	52                   	push   edx
c0015077:	50                   	push   eax
c0015078:	e8 e5 28 ff ff       	call   c0007962 <VgaText::putx(unsigned int)>
c001507d:	83 c4 10             	add    esp,0x10
c0015080:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0015085:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001508b:	83 ec 08             	sub    esp,0x8
c001508e:	68 74 f2 01 c0       	push   0xc001f274
c0015093:	50                   	push   eax
c0015094:	e8 0f 29 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c0015099:	83 c4 10             	add    esp,0x10
c001509c:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c00150a1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150a7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150ab:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00150ae:	83 ec 08             	sub    esp,0x8
c00150b1:	52                   	push   edx
c00150b2:	50                   	push   eax
c00150b3:	e8 aa 28 ff ff       	call   c0007962 <VgaText::putx(unsigned int)>
c00150b8:	83 c4 10             	add    esp,0x10
c00150bb:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c00150c0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150c6:	83 ec 08             	sub    esp,0x8
c00150c9:	68 7c f2 01 c0       	push   0xc001f27c
c00150ce:	50                   	push   eax
c00150cf:	e8 d4 28 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c00150d4:	83 c4 10             	add    esp,0x10
c00150d7:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c00150dc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150e2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150e6:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00150e9:	83 ec 08             	sub    esp,0x8
c00150ec:	52                   	push   edx
c00150ed:	50                   	push   eax
c00150ee:	e8 6f 28 ff ff       	call   c0007962 <VgaText::putx(unsigned int)>
c00150f3:	83 c4 10             	add    esp,0x10
c00150f6:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c00150fb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015101:	83 ec 08             	sub    esp,0x8
c0015104:	68 84 f2 01 c0       	push   0xc001f284
c0015109:	50                   	push   eax
c001510a:	e8 99 28 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c001510f:	83 c4 10             	add    esp,0x10
c0015112:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0015117:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001511d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015121:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0015124:	83 ec 08             	sub    esp,0x8
c0015127:	52                   	push   edx
c0015128:	50                   	push   eax
c0015129:	e8 34 28 ff ff       	call   c0007962 <VgaText::putx(unsigned int)>
c001512e:	83 c4 10             	add    esp,0x10
c0015131:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0015136:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001513c:	83 ec 08             	sub    esp,0x8
c001513f:	68 8c f2 01 c0       	push   0xc001f28c
c0015144:	50                   	push   eax
c0015145:	e8 5e 28 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c001514a:	83 c4 10             	add    esp,0x10
c001514d:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0015152:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015158:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001515c:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001515f:	83 ec 08             	sub    esp,0x8
c0015162:	52                   	push   edx
c0015163:	50                   	push   eax
c0015164:	e8 f9 27 ff ff       	call   c0007962 <VgaText::putx(unsigned int)>
c0015169:	83 c4 10             	add    esp,0x10
c001516c:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0015171:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015177:	83 ec 08             	sub    esp,0x8
c001517a:	68 94 f2 01 c0       	push   0xc001f294
c001517f:	50                   	push   eax
c0015180:	e8 23 28 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c0015185:	83 c4 10             	add    esp,0x10
c0015188:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c001518d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015193:	83 ec 08             	sub    esp,0x8
c0015196:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001519a:	50                   	push   eax
c001519b:	e8 c2 27 ff ff       	call   c0007962 <VgaText::putx(unsigned int)>
c00151a0:	83 c4 10             	add    esp,0x10
c00151a3:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c00151a8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151ae:	83 ec 08             	sub    esp,0x8
c00151b1:	68 9d f2 01 c0       	push   0xc001f29d
c00151b6:	50                   	push   eax
c00151b7:	e8 ec 27 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c00151bc:	83 c4 10             	add    esp,0x10
c00151bf:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c00151c4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151ca:	83 ec 08             	sub    esp,0x8
c00151cd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00151d1:	50                   	push   eax
c00151d2:	e8 8b 27 ff ff       	call   c0007962 <VgaText::putx(unsigned int)>
c00151d7:	83 c4 10             	add    esp,0x10
c00151da:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c00151df:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151e5:	83 ec 08             	sub    esp,0x8
c00151e8:	68 a5 f2 01 c0       	push   0xc001f2a5
c00151ed:	50                   	push   eax
c00151ee:	e8 b5 27 ff ff       	call   c00079a8 <VgaText::puts(char const*)>
c00151f3:	83 c4 10             	add    esp,0x10
c00151f6:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c00151fb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015201:	83 ec 08             	sub    esp,0x8
c0015204:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015208:	50                   	push   eax
c0015209:	e8 54 27 ff ff       	call   c0007962 <VgaText::putx(unsigned int)>
c001520e:	83 c4 10             	add    esp,0x10
c0015211:	fa                   	cli    
c0015212:	f4                   	hlt    
c0015213:	eb fe                	jmp    c0015213 <displayDebugInfo(regs*)+0x31f>

c0015215 <displayProgramFault(char const*)>:
c0015215:	83 ec 0c             	sub    esp,0xc
c0015218:	83 ec 0c             	sub    esp,0xc
c001521b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001521f:	e8 af 44 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0015224:	83 c4 10             	add    esp,0x10
c0015227:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001522c:	8b 00                	mov    eax,DWORD PTR [eax]
c001522e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015231:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015237:	85 c0                	test   eax,eax
c0015239:	74 21                	je     c001525c <displayProgramFault(char const*)+0x47>
c001523b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015240:	8b 00                	mov    eax,DWORD PTR [eax]
c0015242:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015245:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001524b:	6a 04                	push   0x4
c001524d:	6a 0f                	push   0xf
c001524f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015253:	50                   	push   eax
c0015254:	e8 c1 27 ff ff       	call   c0007a1a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015259:	83 c4 10             	add    esp,0x10
c001525c:	90                   	nop
c001525d:	83 c4 0c             	add    esp,0xc
c0015260:	c3                   	ret    

c0015261 <gpFault(regs*, void*)>:
c0015261:	83 ec 1c             	sub    esp,0x1c
c0015264:	c7 05 3c 39 02 c0 17 38 01 c0 	mov    DWORD PTR ds:0xc002393c,0xc0013817
c001526e:	a1 3c 39 02 c0       	mov    eax,ds:0xc002393c
c0015273:	85 c0                	test   eax,eax
c0015275:	74 1c                	je     c0015293 <gpFault(regs*, void*)+0x32>
c0015277:	a1 3c 39 02 c0       	mov    eax,ds:0xc002393c
c001527c:	83 ec 0c             	sub    esp,0xc
c001527f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015283:	ff d0                	call   eax
c0015285:	83 c4 10             	add    esp,0x10
c0015288:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001528c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015291:	75 2e                	jne    c00152c1 <gpFault(regs*, void*)+0x60>
c0015293:	83 ec 0c             	sub    esp,0xc
c0015296:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001529a:	e8 55 fc ff ff       	call   c0014ef4 <displayDebugInfo(regs*)>
c001529f:	83 c4 10             	add    esp,0x10
c00152a2:	83 ec 0c             	sub    esp,0xc
c00152a5:	68 ad f2 01 c0       	push   0xc001f2ad
c00152aa:	e8 66 ff ff ff       	call   c0015215 <displayProgramFault(char const*)>
c00152af:	83 c4 10             	add    esp,0x10
c00152b2:	83 ec 0c             	sub    esp,0xc
c00152b5:	6a 00                	push   0x0
c00152b7:	e8 54 df ff ff       	call   c0013210 <Thr::terminateFromIRQ(int)>
c00152bc:	83 c4 10             	add    esp,0x10
c00152bf:	eb 01                	jmp    c00152c2 <gpFault(regs*, void*)+0x61>
c00152c1:	90                   	nop
c00152c2:	83 c4 1c             	add    esp,0x1c
c00152c5:	c3                   	ret    

c00152c6 <pgFault(regs*, void*)>:
c00152c6:	83 ec 1c             	sub    esp,0x1c
c00152c9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00152ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152d3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00152d9:	0f 20 d2             	mov    edx,cr2
c00152dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00152e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00152e4:	83 ec 08             	sub    esp,0x8
c00152e7:	52                   	push   edx
c00152e8:	50                   	push   eax
c00152e9:	e8 30 40 ff ff       	call   c000931e <VAS::tryLoadBackOffDisk(unsigned long)>
c00152ee:	83 c4 10             	add    esp,0x10
c00152f1:	84 c0                	test   al,al
c00152f3:	75 2e                	jne    c0015323 <pgFault(regs*, void*)+0x5d>
c00152f5:	83 ec 0c             	sub    esp,0xc
c00152f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00152fc:	e8 f3 fb ff ff       	call   c0014ef4 <displayDebugInfo(regs*)>
c0015301:	83 c4 10             	add    esp,0x10
c0015304:	83 ec 0c             	sub    esp,0xc
c0015307:	68 c6 f2 01 c0       	push   0xc001f2c6
c001530c:	e8 04 ff ff ff       	call   c0015215 <displayProgramFault(char const*)>
c0015311:	83 c4 10             	add    esp,0x10
c0015314:	83 ec 0c             	sub    esp,0xc
c0015317:	6a 00                	push   0x0
c0015319:	e8 f2 de ff ff       	call   c0013210 <Thr::terminateFromIRQ(int)>
c001531e:	83 c4 10             	add    esp,0x10
c0015321:	eb 01                	jmp    c0015324 <pgFault(regs*, void*)+0x5e>
c0015323:	90                   	nop
c0015324:	83 c4 1c             	add    esp,0x1c
c0015327:	c3                   	ret    

c0015328 <otherISRHandler(regs*, void*)>:
c0015328:	83 ec 0c             	sub    esp,0xc
c001532b:	83 ec 0c             	sub    esp,0xc
c001532e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015332:	e8 bd fb ff ff       	call   c0014ef4 <displayDebugInfo(regs*)>
c0015337:	83 c4 10             	add    esp,0x10
c001533a:	83 ec 0c             	sub    esp,0xc
c001533d:	68 18 f3 01 c0       	push   0xc001f318
c0015342:	e8 ce fe ff ff       	call   c0015215 <displayProgramFault(char const*)>
c0015347:	83 c4 10             	add    esp,0x10
c001534a:	83 ec 0c             	sub    esp,0xc
c001534d:	6a 00                	push   0x0
c001534f:	e8 bc de ff ff       	call   c0013210 <Thr::terminateFromIRQ(int)>
c0015354:	83 c4 10             	add    esp,0x10
c0015357:	90                   	nop
c0015358:	83 c4 0c             	add    esp,0xc
c001535b:	c3                   	ret    

c001535c <opcodeFault(regs*, void*)>:
c001535c:	55                   	push   ebp
c001535d:	89 e5                	mov    ebp,esp
c001535f:	83 ec 08             	sub    esp,0x8
c0015362:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015365:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015368:	83 ec 08             	sub    esp,0x8
c001536b:	50                   	push   eax
c001536c:	68 d1 f2 01 c0       	push   0xc001f2d1
c0015371:	e8 5d 43 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0015376:	83 c4 10             	add    esp,0x10
c0015379:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c001537e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015384:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001538a:	84 c0                	test   al,al
c001538c:	74 21                	je     c00153af <opcodeFault(regs*, void*)+0x53>
c001538e:	83 ec 0c             	sub    esp,0xc
c0015391:	68 40 f3 01 c0       	push   0xc001f340
c0015396:	e8 38 43 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c001539b:	83 c4 10             	add    esp,0x10
c001539e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153a4:	8d 50 19             	lea    edx,[eax+0x19]
c00153a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153aa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153ad:	eb 2b                	jmp    c00153da <opcodeFault(regs*, void*)+0x7e>
c00153af:	83 ec 0c             	sub    esp,0xc
c00153b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00153b5:	e8 3a fb ff ff       	call   c0014ef4 <displayDebugInfo(regs*)>
c00153ba:	83 c4 10             	add    esp,0x10
c00153bd:	83 ec 0c             	sub    esp,0xc
c00153c0:	68 df f2 01 c0       	push   0xc001f2df
c00153c5:	e8 4b fe ff ff       	call   c0015215 <displayProgramFault(char const*)>
c00153ca:	83 c4 10             	add    esp,0x10
c00153cd:	83 ec 0c             	sub    esp,0xc
c00153d0:	6a 00                	push   0x0
c00153d2:	e8 39 de ff ff       	call   c0013210 <Thr::terminateFromIRQ(int)>
c00153d7:	83 c4 10             	add    esp,0x10
c00153da:	c9                   	leave  
c00153db:	c3                   	ret    

c00153dc <i386SaveCoprocessor(void*)>:
c00153dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00153e0:	83 c0 3f             	add    eax,0x3f
c00153e3:	83 e0 c0             	and    eax,0xffffffc0
c00153e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00153ea:	ff 25 34 39 02 c0    	jmp    DWORD PTR ds:0xc0023934

c00153f0 <i386LoadCoprocessor(void*)>:
c00153f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00153f4:	83 c0 3f             	add    eax,0x3f
c00153f7:	83 e0 c0             	and    eax,0xffffffc0
c00153fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00153fe:	ff 25 30 39 02 c0    	jmp    DWORD PTR ds:0xc0023930

c0015404 <x87EmulHandler(regs*, void*)>:
c0015404:	53                   	push   ebx
c0015405:	83 ec 08             	sub    esp,0x8
c0015408:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001540d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015411:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0015415:	74 10                	je     c0015427 <x87EmulHandler(regs*, void*)+0x23>
c0015417:	83 ec 0c             	sub    esp,0xc
c001541a:	68 ec f2 01 c0       	push   0xc001f2ec
c001541f:	e8 85 9f ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c0015424:	83 c4 10             	add    esp,0x10
c0015427:	0f 20 c0             	mov    eax,cr0
c001542a:	a8 08                	test   al,0x8
c001542c:	74 56                	je     c0015484 <x87EmulHandler(regs*, void*)+0x80>
c001542e:	0f 06                	clts   
c0015430:	a1 2c 39 02 c0       	mov    eax,ds:0xc002392c
c0015435:	85 c0                	test   eax,eax
c0015437:	74 0e                	je     c0015447 <x87EmulHandler(regs*, void*)+0x43>
c0015439:	83 ec 0c             	sub    esp,0xc
c001543c:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001543f:	e8 98 ff ff ff       	call   c00153dc <i386SaveCoprocessor(void*)>
c0015444:	83 c4 10             	add    esp,0x10
c0015447:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001544d:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0015451:	75 12                	jne    c0015465 <x87EmulHandler(regs*, void*)+0x61>
c0015453:	83 ec 0c             	sub    esp,0xc
c0015456:	68 40 02 00 00       	push   0x240
c001545b:	e8 e9 14 ff ff       	call   c0006949 <malloc>
c0015460:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0015463:	eb 10                	jmp    c0015475 <x87EmulHandler(regs*, void*)+0x71>
c0015465:	83 ec 0c             	sub    esp,0xc
c0015468:	a1 2c 39 02 c0       	mov    eax,ds:0xc002392c
c001546d:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015470:	e8 7b ff ff ff       	call   c00153f0 <i386LoadCoprocessor(void*)>
c0015475:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001547a:	83 c4 10             	add    esp,0x10
c001547d:	a3 2c 39 02 c0       	mov    ds:0xc002392c,eax
c0015482:	eb 2e                	jmp    c00154b2 <x87EmulHandler(regs*, void*)+0xae>
c0015484:	83 ec 0c             	sub    esp,0xc
c0015487:	53                   	push   ebx
c0015488:	e8 cd ee ff ff       	call   c001435a <Vm::x87Handler(regs*)>
c001548d:	83 c4 10             	add    esp,0x10
c0015490:	84 c0                	test   al,al
c0015492:	75 1e                	jne    c00154b2 <x87EmulHandler(regs*, void*)+0xae>
c0015494:	83 ec 0c             	sub    esp,0xc
c0015497:	68 00 f3 01 c0       	push   0xc001f300
c001549c:	e8 32 42 ff ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c00154a1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00154a9:	83 c4 18             	add    esp,0x18
c00154ac:	5b                   	pop    ebx
c00154ad:	e9 5e dd ff ff       	jmp    c0013210 <Thr::terminateFromIRQ(int)>
c00154b2:	83 c4 08             	add    esp,0x8
c00154b5:	5b                   	pop    ebx
c00154b6:	c3                   	ret    

c00154b7 <Hal::initialiseCoprocessor()>:
c00154b7:	83 ec 10             	sub    esp,0x10
c00154ba:	c7 05 2c 39 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002392c,0x0
c00154c4:	6a 00                	push   0x0
c00154c6:	68 04 54 01 c0       	push   0xc0015404
c00154cb:	6a 07                	push   0x7
c00154cd:	e8 56 5b ff ff       	call   c000b028 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00154d2:	e8 e9 69 00 00       	call   c001bec0 <avxDetect>
c00154d7:	83 c4 10             	add    esp,0x10
c00154da:	85 c0                	test   eax,eax
c00154dc:	74 1c                	je     c00154fa <Hal::initialiseCoprocessor()+0x43>
c00154de:	c7 05 34 39 02 c0 ea be 01 c0 	mov    DWORD PTR ds:0xc0023934,0xc001beea
c00154e8:	c7 05 30 39 02 c0 fb be 01 c0 	mov    DWORD PTR ds:0xc0023930,0xc001befb
c00154f2:	83 c4 0c             	add    esp,0xc
c00154f5:	e9 12 6a 00 00       	jmp    c001bf0c <avxInit>
c00154fa:	e8 41 6c 00 00       	call   c001c140 <absolutelyNoChanceInHell>
c00154ff:	85 c0                	test   eax,eax
c0015501:	74 1c                	je     c001551f <Hal::initialiseCoprocessor()+0x68>
c0015503:	c7 05 34 39 02 c0 58 c1 01 c0 	mov    DWORD PTR ds:0xc0023934,0xc001c158
c001550d:	c7 05 30 39 02 c0 60 c1 01 c0 	mov    DWORD PTR ds:0xc0023930,0xc001c160
c0015517:	83 c4 0c             	add    esp,0xc
c001551a:	e9 49 6c 00 00       	jmp    c001c168 <sseInit>
c001551f:	e8 62 6c 00 00       	call   c001c186 <x87Detect>
c0015524:	85 c0                	test   eax,eax
c0015526:	74 1c                	je     c0015544 <Hal::initialiseCoprocessor()+0x8d>
c0015528:	c7 05 34 39 02 c0 a1 c1 01 c0 	mov    DWORD PTR ds:0xc0023934,0xc001c1a1
c0015532:	c7 05 30 39 02 c0 a8 c1 01 c0 	mov    DWORD PTR ds:0xc0023930,0xc001c1a8
c001553c:	83 c4 0c             	add    esp,0xc
c001553f:	e9 6b 6c 00 00       	jmp    c001c1af <x87Init>
c0015544:	c7 05 34 39 02 c0 b9 4e 01 c0 	mov    DWORD PTR ds:0xc0023934,0xc0014eb9
c001554e:	c7 05 30 39 02 c0 b9 4e 01 c0 	mov    DWORD PTR ds:0xc0023930,0xc0014eb9
c0015558:	0f 20 c0             	mov    eax,cr0
c001555b:	83 c8 04             	or     eax,0x4
c001555e:	0f 22 c0             	mov    cr0,eax
c0015561:	83 c4 0c             	add    esp,0xc
c0015564:	c3                   	ret    

c0015565 <Hal::panic(char const*)>:
c0015565:	e9 3f 9e ff ff       	jmp    c000f3a9 <Krnl::panic(char const*)>

c001556a <Hal::initialise()>:
c001556a:	53                   	push   ebx
c001556b:	83 ec 08             	sub    esp,0x8
c001556e:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c0015573:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0015579:	b8 ba 4e 01 c0       	mov    eax,0xc0014eba
c001557e:	f6 82 8c 11 00 00 02 	test   BYTE PTR [edx+0x118c],0x2
c0015585:	74 05                	je     c001558c <Hal::initialise()+0x22>
c0015587:	b8 bf 4e 01 c0       	mov    eax,0xc0014ebf
c001558c:	a3 38 39 02 c0       	mov    ds:0xc0023938,eax
c0015591:	e8 b7 5c ff ff       	call   c000b24d <setupINTS()>
c0015596:	80 3d 40 2c 02 c0 00 	cmp    BYTE PTR ds:0xc0022c40,0x0
c001559d:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c00155a2:	75 07                	jne    c00155ab <Hal::initialise()+0x41>
c00155a4:	80 a0 e8 01 00 00 fe 	and    BYTE PTR [eax+0x1e8],0xfe
c00155ab:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00155b1:	83 e0 01             	and    eax,0x1
c00155b4:	a2 28 39 02 c0       	mov    ds:0xc0023928,al
c00155b9:	e8 9e 02 00 00       	call   c001585c <picOpen()>
c00155be:	80 3d 28 39 02 c0 00 	cmp    BYTE PTR ds:0xc0023928,0x0
c00155c5:	74 0a                	je     c00155d1 <Hal::initialise()+0x67>
c00155c7:	e8 e0 01 00 00       	call   c00157ac <picDisable()>
c00155cc:	e8 91 62 00 00       	call   c001b862 <apicOpen()>
c00155d1:	bb 0f 00 00 00       	mov    ebx,0xf
c00155d6:	50                   	push   eax
c00155d7:	6a 00                	push   0x0
c00155d9:	68 28 53 01 c0       	push   0xc0015328
c00155de:	6a 00                	push   0x0
c00155e0:	e8 43 5a ff ff       	call   c000b028 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00155e5:	83 c4 0c             	add    esp,0xc
c00155e8:	6a 00                	push   0x0
c00155ea:	68 28 53 01 c0       	push   0xc0015328
c00155ef:	6a 01                	push   0x1
c00155f1:	e8 32 5a ff ff       	call   c000b028 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00155f6:	83 c4 0c             	add    esp,0xc
c00155f9:	6a 00                	push   0x0
c00155fb:	68 c2 4e 01 c0       	push   0xc0014ec2
c0015600:	6a 02                	push   0x2
c0015602:	e8 21 5a ff ff       	call   c000b028 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015607:	83 c4 0c             	add    esp,0xc
c001560a:	6a 00                	push   0x0
c001560c:	68 28 53 01 c0       	push   0xc0015328
c0015611:	6a 03                	push   0x3
c0015613:	e8 10 5a ff ff       	call   c000b028 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015618:	83 c4 0c             	add    esp,0xc
c001561b:	6a 00                	push   0x0
c001561d:	68 28 53 01 c0       	push   0xc0015328
c0015622:	6a 04                	push   0x4
c0015624:	e8 ff 59 ff ff       	call   c000b028 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015629:	83 c4 0c             	add    esp,0xc
c001562c:	6a 00                	push   0x0
c001562e:	68 28 53 01 c0       	push   0xc0015328
c0015633:	6a 05                	push   0x5
c0015635:	e8 ee 59 ff ff       	call   c000b028 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001563a:	83 c4 0c             	add    esp,0xc
c001563d:	6a 00                	push   0x0
c001563f:	68 5c 53 01 c0       	push   0xc001535c
c0015644:	6a 06                	push   0x6
c0015646:	e8 dd 59 ff ff       	call   c000b028 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001564b:	83 c4 0c             	add    esp,0xc
c001564e:	6a 00                	push   0x0
c0015650:	68 db 4e 01 c0       	push   0xc0014edb
c0015655:	6a 08                	push   0x8
c0015657:	e8 cc 59 ff ff       	call   c000b028 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001565c:	83 c4 0c             	add    esp,0xc
c001565f:	6a 00                	push   0x0
c0015661:	68 28 53 01 c0       	push   0xc0015328
c0015666:	6a 09                	push   0x9
c0015668:	e8 bb 59 ff ff       	call   c000b028 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001566d:	83 c4 0c             	add    esp,0xc
c0015670:	6a 00                	push   0x0
c0015672:	68 28 53 01 c0       	push   0xc0015328
c0015677:	6a 0a                	push   0xa
c0015679:	e8 aa 59 ff ff       	call   c000b028 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001567e:	83 c4 0c             	add    esp,0xc
c0015681:	6a 00                	push   0x0
c0015683:	68 28 53 01 c0       	push   0xc0015328
c0015688:	6a 0b                	push   0xb
c001568a:	e8 99 59 ff ff       	call   c000b028 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001568f:	83 c4 0c             	add    esp,0xc
c0015692:	6a 00                	push   0x0
c0015694:	68 61 52 01 c0       	push   0xc0015261
c0015699:	6a 0d                	push   0xd
c001569b:	e8 88 59 ff ff       	call   c000b028 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00156a0:	83 c4 0c             	add    esp,0xc
c00156a3:	6a 00                	push   0x0
c00156a5:	68 c6 52 01 c0       	push   0xc00152c6
c00156aa:	6a 0e                	push   0xe
c00156ac:	e8 77 59 ff ff       	call   c000b028 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00156b1:	83 c4 10             	add    esp,0x10
c00156b4:	50                   	push   eax
c00156b5:	6a 00                	push   0x0
c00156b7:	68 28 53 01 c0       	push   0xc0015328
c00156bc:	53                   	push   ebx
c00156bd:	43                   	inc    ebx
c00156be:	e8 65 59 ff ff       	call   c000b028 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00156c3:	83 c4 10             	add    esp,0x10
c00156c6:	83 fb 1e             	cmp    ebx,0x1e
c00156c9:	75 e9                	jne    c00156b4 <Hal::initialise()+0x14a>
c00156cb:	50                   	push   eax
c00156cc:	6a 00                	push   0x0
c00156ce:	68 91 0e 01 c0       	push   0xc0010e91
c00156d3:	6a 60                	push   0x60
c00156d5:	e8 4e 59 ff ff       	call   c000b028 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00156da:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c00156df:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00156e9:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00156f0:	e8 54 12 ff ff       	call   c0006949 <malloc>
c00156f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00156f8:	89 c3                	mov    ebx,eax
c00156fa:	e8 15 09 00 00       	call   c0016014 <RTC::RTC()>
c00156ff:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0015709:	5a                   	pop    edx
c001570a:	59                   	pop    ecx
c001570b:	53                   	push   ebx
c001570c:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c0015712:	e8 df 53 ff ff       	call   c000aaf6 <Device::addChild(Device*)>
c0015717:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015719:	6a 00                	push   0x0
c001571b:	6a 00                	push   0x0
c001571d:	6a 00                	push   0x0
c001571f:	53                   	push   ebx
c0015720:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015723:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c0015728:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001572e:	83 c4 28             	add    esp,0x28
c0015731:	5b                   	pop    ebx
c0015732:	c3                   	ret    

c0015733 <Hal::makeBeep(int)>:
c0015733:	53                   	push   ebx
c0015734:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015738:	85 db                	test   ebx,ebx
c001573a:	75 07                	jne    c0015743 <Hal::makeBeep(int)+0x10>
c001573c:	e4 61                	in     al,0x61
c001573e:	83 e0 fc             	and    eax,0xfffffffc
c0015741:	eb 26                	jmp    c0015769 <Hal::makeBeep(int)+0x36>
c0015743:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0015748:	99                   	cdq    
c0015749:	f7 fb                	idiv   ebx
c001574b:	89 c1                	mov    ecx,eax
c001574d:	b0 b6                	mov    al,0xb6
c001574f:	e6 43                	out    0x43,al
c0015751:	88 c8                	mov    al,cl
c0015753:	e6 42                	out    0x42,al
c0015755:	89 c8                	mov    eax,ecx
c0015757:	c1 e8 08             	shr    eax,0x8
c001575a:	e6 42                	out    0x42,al
c001575c:	e4 61                	in     al,0x61
c001575e:	88 c2                	mov    dl,al
c0015760:	83 ca 03             	or     edx,0x3
c0015763:	38 c2                	cmp    dl,al
c0015765:	74 04                	je     c001576b <Hal::makeBeep(int)+0x38>
c0015767:	88 d0                	mov    al,dl
c0015769:	e6 61                	out    0x61,al
c001576b:	5b                   	pop    ebx
c001576c:	c3                   	ret    

c001576d <Hal::getRand()>:
c001576d:	31 c0                	xor    eax,eax
c001576f:	c3                   	ret    

c0015770 <Hal::endOfInterrupt(int)>:
c0015770:	80 3d 28 39 02 c0 00 	cmp    BYTE PTR ds:0xc0023928,0x0
c0015777:	74 23                	je     c001579c <Hal::endOfInterrupt(int)+0x2c>
c0015779:	83 ec 14             	sub    esp,0x14
c001577c:	6a 1b                	push   0x1b
c001577e:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c0015784:	e8 91 07 ff ff       	call   c0005f1a <Computer::rdmsr(unsigned int)>
c0015789:	25 00 f0 ff ff       	and    eax,0xfffff000
c001578e:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0015798:	83 c4 1c             	add    esp,0x1c
c001579b:	c3                   	ret    
c001579c:	e9 3f 02 00 00       	jmp    c00159e0 <picEOI(int)>
c00157a1:	66 90                	xchg   ax,ax
c00157a3:	90                   	nop

c00157a4 <picIoWait()>:
c00157a4:	eb 00                	jmp    c00157a6 <picIoWait()+0x2>
c00157a6:	eb 00                	jmp    c00157a8 <picIoWait()+0x4>
c00157a8:	90                   	nop
c00157a9:	c3                   	ret    
c00157aa:	66 90                	xchg   ax,ax

c00157ac <picDisable()>:
c00157ac:	83 ec 10             	sub    esp,0x10
c00157af:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00157b6:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00157bb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00157bf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00157c4:	ee                   	out    dx,al
c00157c5:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00157cc:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00157d1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00157d5:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00157da:	ee                   	out    dx,al
c00157db:	90                   	nop
c00157dc:	83 c4 10             	add    esp,0x10
c00157df:	c3                   	ret    

c00157e0 <picGetIRQReg(int)>:
c00157e0:	83 ec 10             	sub    esp,0x10
c00157e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00157e7:	0f b6 c0             	movzx  eax,al
c00157ea:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00157f1:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00157f5:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00157f9:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00157fe:	ee                   	out    dx,al
c00157ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015803:	0f b6 c0             	movzx  eax,al
c0015806:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001580d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015811:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015815:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001581a:	ee                   	out    dx,al
c001581b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0015822:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015827:	89 c2                	mov    edx,eax
c0015829:	ec                   	in     al,dx
c001582a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001582e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015832:	0f b6 c0             	movzx  eax,al
c0015835:	c1 e0 08             	shl    eax,0x8
c0015838:	89 c1                	mov    ecx,eax
c001583a:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0015841:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015846:	89 c2                	mov    edx,eax
c0015848:	ec                   	in     al,dx
c0015849:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001584d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015851:	0f b6 c0             	movzx  eax,al
c0015854:	09 c8                	or     eax,ecx
c0015856:	83 c4 10             	add    esp,0x10
c0015859:	c3                   	ret    
c001585a:	66 90                	xchg   ax,ax

c001585c <picOpen()>:
c001585c:	83 ec 50             	sub    esp,0x50
c001585f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015866:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001586b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001586f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015873:	ee                   	out    dx,al
c0015874:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001587b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015880:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015884:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015888:	ee                   	out    dx,al
c0015889:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015891:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015899:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00158a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00158a4:	89 c2                	mov    edx,eax
c00158a6:	ec                   	in     al,dx
c00158a7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00158ab:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00158af:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00158b3:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00158ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00158be:	89 c2                	mov    edx,eax
c00158c0:	ec                   	in     al,dx
c00158c1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00158c5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00158c9:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00158cd:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00158d4:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00158d9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00158dd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00158e1:	ee                   	out    dx,al
c00158e2:	e8 bd fe ff ff       	call   c00157a4 <picIoWait()>
c00158e7:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00158ee:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00158f3:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00158f7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00158fb:	ee                   	out    dx,al
c00158fc:	e8 a3 fe ff ff       	call   c00157a4 <picIoWait()>
c0015901:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015905:	0f b6 c0             	movzx  eax,al
c0015908:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001590f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015913:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015917:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001591b:	ee                   	out    dx,al
c001591c:	e8 83 fe ff ff       	call   c00157a4 <picIoWait()>
c0015921:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015925:	0f b6 c0             	movzx  eax,al
c0015928:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001592f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015933:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015937:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001593b:	ee                   	out    dx,al
c001593c:	e8 63 fe ff ff       	call   c00157a4 <picIoWait()>
c0015941:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015948:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001594d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015951:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015955:	ee                   	out    dx,al
c0015956:	e8 49 fe ff ff       	call   c00157a4 <picIoWait()>
c001595b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015962:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015967:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001596b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001596f:	ee                   	out    dx,al
c0015970:	e8 2f fe ff ff       	call   c00157a4 <picIoWait()>
c0015975:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001597c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015981:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015985:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015989:	ee                   	out    dx,al
c001598a:	e8 15 fe ff ff       	call   c00157a4 <picIoWait()>
c001598f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015996:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001599b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001599f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00159a3:	ee                   	out    dx,al
c00159a4:	e8 fb fd ff ff       	call   c00157a4 <picIoWait()>
c00159a9:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00159ae:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00159b5:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00159b9:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00159bd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00159c1:	ee                   	out    dx,al
c00159c2:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00159c7:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00159ce:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00159d2:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00159d6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00159da:	ee                   	out    dx,al
c00159db:	90                   	nop
c00159dc:	83 c4 50             	add    esp,0x50
c00159df:	c3                   	ret    

c00159e0 <picEOI(int)>:
c00159e0:	83 ec 10             	sub    esp,0x10
c00159e3:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00159e8:	75 1e                	jne    c0015a08 <picEOI(int)+0x28>
c00159ea:	6a 0b                	push   0xb
c00159ec:	e8 ef fd ff ff       	call   c00157e0 <picGetIRQReg(int)>
c00159f1:	83 c4 04             	add    esp,0x4
c00159f4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00159f9:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00159fe:	25 80 00 00 00       	and    eax,0x80
c0015a03:	74 73                	je     c0015a78 <picEOI(int)+0x98>
c0015a05:	8d 76 00             	lea    esi,[esi+0x0]
c0015a08:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015a0d:	75 31                	jne    c0015a40 <picEOI(int)+0x60>
c0015a0f:	6a 0b                	push   0xb
c0015a11:	e8 ca fd ff ff       	call   c00157e0 <picGetIRQReg(int)>
c0015a16:	83 c4 04             	add    esp,0x4
c0015a19:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015a1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015a22:	66 85 c0             	test   ax,ax
c0015a25:	78 19                	js     c0015a40 <picEOI(int)+0x60>
c0015a27:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015a2e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015a33:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015a37:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015a3c:	ee                   	out    dx,al
c0015a3d:	eb 3d                	jmp    c0015a7c <picEOI(int)+0x9c>
c0015a3f:	90                   	nop
c0015a40:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015a45:	7e 19                	jle    c0015a60 <picEOI(int)+0x80>
c0015a47:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015a4e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015a53:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015a57:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015a5c:	ee                   	out    dx,al
c0015a5d:	8d 76 00             	lea    esi,[esi+0x0]
c0015a60:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015a67:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015a6c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015a70:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015a75:	ee                   	out    dx,al
c0015a76:	eb 04                	jmp    c0015a7c <picEOI(int)+0x9c>
c0015a78:	90                   	nop
c0015a79:	8d 76 00             	lea    esi,[esi+0x0]
c0015a7c:	83 c4 10             	add    esp,0x10
c0015a7f:	c3                   	ret    

c0015a80 <RTC::open(int, int, void*)>:
c0015a80:	31 c0                	xor    eax,eax
c0015a82:	c3                   	ret    
c0015a83:	90                   	nop

c0015a84 <RTC::close(int, int, void*)>:
c0015a84:	31 c0                	xor    eax,eax
c0015a86:	c3                   	ret    
c0015a87:	90                   	nop

c0015a88 <RTC::timeInSecondsUTC()>:
c0015a88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a8c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015a92:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015a98:	c3                   	ret    
c0015a99:	90                   	nop

c0015a9a <RTC::timeInDatetimeUTC()>:
c0015a9a:	53                   	push   ebx
c0015a9b:	83 ec 14             	sub    esp,0x14
c0015a9e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015aa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aa6:	8b 10                	mov    edx,DWORD PTR [eax]
c0015aa8:	50                   	push   eax
c0015aa9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015aac:	83 c4 0c             	add    esp,0xc
c0015aaf:	52                   	push   edx
c0015ab0:	50                   	push   eax
c0015ab1:	53                   	push   ebx
c0015ab2:	e8 b3 4d ff ff       	call   c000a86a <secondsToDatetime(unsigned long long)>
c0015ab7:	89 d8                	mov    eax,ebx
c0015ab9:	83 c4 14             	add    esp,0x14
c0015abc:	5b                   	pop    ebx
c0015abd:	c2 04 00             	ret    0x4

c0015ac0 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015ac0:	56                   	push   esi
c0015ac1:	53                   	push   ebx
c0015ac2:	83 ec 14             	sub    esp,0x14
c0015ac5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015ac9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015acb:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015ace:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015ad2:	52                   	push   edx
c0015ad3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ad7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015adb:	50                   	push   eax
c0015adc:	e8 89 4d ff ff       	call   c000a86a <secondsToDatetime(unsigned long long)>
c0015ae1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ae5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015ae9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015aed:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015af1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015af5:	89 f0                	mov    eax,esi
c0015af7:	83 c4 20             	add    esp,0x20
c0015afa:	5b                   	pop    ebx
c0015afb:	5e                   	pop    esi
c0015afc:	ff e0                	jmp    eax

c0015afe <RTC::~RTC()>:
c0015afe:	83 ec 0c             	sub    esp,0xc
c0015b01:	ba 80 f3 01 c0       	mov    edx,0xc001f380
c0015b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b0a:	89 10                	mov    DWORD PTR [eax],edx
c0015b0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b10:	83 ec 0c             	sub    esp,0xc
c0015b13:	50                   	push   eax
c0015b14:	e8 db 4a ff ff       	call   c000a5f4 <Clock::~Clock()>
c0015b19:	83 c4 10             	add    esp,0x10
c0015b1c:	90                   	nop
c0015b1d:	83 c4 0c             	add    esp,0xc
c0015b20:	c3                   	ret    
c0015b21:	90                   	nop

c0015b22 <RTC::~RTC()>:
c0015b22:	83 ec 0c             	sub    esp,0xc
c0015b25:	83 ec 0c             	sub    esp,0xc
c0015b28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b2c:	e8 cd ff ff ff       	call   c0015afe <RTC::~RTC()>
c0015b31:	83 c4 10             	add    esp,0x10
c0015b34:	83 ec 08             	sub    esp,0x8
c0015b37:	68 60 01 00 00       	push   0x160
c0015b3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b40:	e8 ad 3a ff ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c0015b45:	83 c4 10             	add    esp,0x10
c0015b48:	83 c4 0c             	add    esp,0xc
c0015b4b:	c3                   	ret    

c0015b4c <RTC::get_update_in_progress_flag()>:
c0015b4c:	83 ec 14             	sub    esp,0x14
c0015b4f:	6a 0a                	push   0xa
c0015b51:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c0015b57:	e8 72 04 ff ff       	call   c0005fce <Computer::readCMOS(unsigned char)>
c0015b5c:	83 c4 1c             	add    esp,0x1c
c0015b5f:	c0 e8 07             	shr    al,0x7
c0015b62:	c3                   	ret    
c0015b63:	90                   	nop

c0015b64 <RTC::completeRTCRefresh()>:
c0015b64:	55                   	push   ebp
c0015b65:	57                   	push   edi
c0015b66:	56                   	push   esi
c0015b67:	53                   	push   ebx
c0015b68:	83 ec 2c             	sub    esp,0x2c
c0015b6b:	8b 1d 4c 29 02 c0    	mov    ebx,DWORD PTR ds:0xc002294c
c0015b71:	83 ec 0c             	sub    esp,0xc
c0015b74:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015b78:	e8 cf ff ff ff       	call   c0015b4c <RTC::get_update_in_progress_flag()>
c0015b7d:	83 c4 10             	add    esp,0x10
c0015b80:	84 c0                	test   al,al
c0015b82:	74 0e                	je     c0015b92 <RTC::completeRTCRefresh()+0x2e>
c0015b84:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015b8a:	3b 05 4c 29 02 c0    	cmp    eax,DWORD PTR ds:0xc002294c
c0015b90:	73 df                	jae    c0015b71 <RTC::completeRTCRefresh()+0xd>
c0015b92:	55                   	push   ebp
c0015b93:	55                   	push   ebp
c0015b94:	6a 00                	push   0x0
c0015b96:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c0015b9c:	e8 2d 04 ff ff       	call   c0005fce <Computer::readCMOS(unsigned char)>
c0015ba1:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015ba5:	58                   	pop    eax
c0015ba6:	5a                   	pop    edx
c0015ba7:	6a 02                	push   0x2
c0015ba9:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c0015baf:	e8 1a 04 ff ff       	call   c0005fce <Computer::readCMOS(unsigned char)>
c0015bb4:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015bb8:	59                   	pop    ecx
c0015bb9:	5b                   	pop    ebx
c0015bba:	6a 04                	push   0x4
c0015bbc:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c0015bc2:	e8 07 04 ff ff       	call   c0005fce <Computer::readCMOS(unsigned char)>
c0015bc7:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015bcb:	5e                   	pop    esi
c0015bcc:	5f                   	pop    edi
c0015bcd:	6a 07                	push   0x7
c0015bcf:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c0015bd5:	e8 f4 03 ff ff       	call   c0005fce <Computer::readCMOS(unsigned char)>
c0015bda:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015bde:	5d                   	pop    ebp
c0015bdf:	58                   	pop    eax
c0015be0:	6a 08                	push   0x8
c0015be2:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c0015be8:	e8 e1 03 ff ff       	call   c0005fce <Computer::readCMOS(unsigned char)>
c0015bed:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015bf1:	58                   	pop    eax
c0015bf2:	5a                   	pop    edx
c0015bf3:	6a 09                	push   0x9
c0015bf5:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c0015bfb:	e8 ce 03 ff ff       	call   c0005fce <Computer::readCMOS(unsigned char)>
c0015c00:	83 c4 10             	add    esp,0x10
c0015c03:	0f b6 e8             	movzx  ebp,al
c0015c06:	8b 1d 4c 29 02 c0    	mov    ebx,DWORD PTR ds:0xc002294c
c0015c0c:	83 ec 0c             	sub    esp,0xc
c0015c0f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015c13:	e8 34 ff ff ff       	call   c0015b4c <RTC::get_update_in_progress_flag()>
c0015c18:	83 c4 10             	add    esp,0x10
c0015c1b:	84 c0                	test   al,al
c0015c1d:	74 0e                	je     c0015c2d <RTC::completeRTCRefresh()+0xc9>
c0015c1f:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015c25:	3b 05 4c 29 02 c0    	cmp    eax,DWORD PTR ds:0xc002294c
c0015c2b:	73 df                	jae    c0015c0c <RTC::completeRTCRefresh()+0xa8>
c0015c2d:	50                   	push   eax
c0015c2e:	50                   	push   eax
c0015c2f:	6a 00                	push   0x0
c0015c31:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c0015c37:	e8 92 03 ff ff       	call   c0005fce <Computer::readCMOS(unsigned char)>
c0015c3c:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015c40:	58                   	pop    eax
c0015c41:	5a                   	pop    edx
c0015c42:	6a 02                	push   0x2
c0015c44:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c0015c4a:	e8 7f 03 ff ff       	call   c0005fce <Computer::readCMOS(unsigned char)>
c0015c4f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015c53:	59                   	pop    ecx
c0015c54:	5b                   	pop    ebx
c0015c55:	6a 04                	push   0x4
c0015c57:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c0015c5d:	e8 6c 03 ff ff       	call   c0005fce <Computer::readCMOS(unsigned char)>
c0015c62:	5e                   	pop    esi
c0015c63:	88 c3                	mov    bl,al
c0015c65:	5f                   	pop    edi
c0015c66:	6a 07                	push   0x7
c0015c68:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c0015c6e:	e8 5b 03 ff ff       	call   c0005fce <Computer::readCMOS(unsigned char)>
c0015c73:	89 c6                	mov    esi,eax
c0015c75:	58                   	pop    eax
c0015c76:	5a                   	pop    edx
c0015c77:	6a 08                	push   0x8
c0015c79:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c0015c7f:	e8 4a 03 ff ff       	call   c0005fce <Computer::readCMOS(unsigned char)>
c0015c84:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015c88:	59                   	pop    ecx
c0015c89:	5f                   	pop    edi
c0015c8a:	6a 09                	push   0x9
c0015c8c:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c0015c92:	e8 37 03 ff ff       	call   c0005fce <Computer::readCMOS(unsigned char)>
c0015c97:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015c9b:	0f b6 f8             	movzx  edi,al
c0015c9e:	83 c4 10             	add    esp,0x10
c0015ca1:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015ca5:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015ca9:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015cad:	89 f1                	mov    ecx,esi
c0015caf:	0f 94 c0             	sete   al
c0015cb2:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015cb6:	0f 94 c2             	sete   dl
c0015cb9:	21 d0                	and    eax,edx
c0015cbb:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015cbf:	0f 94 c2             	sete   dl
c0015cc2:	21 c2                	and    edx,eax
c0015cc4:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015cc8:	0f 94 c0             	sete   al
c0015ccb:	21 d0                	and    eax,edx
c0015ccd:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015cd1:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015cd5:	0f 94 c1             	sete   cl
c0015cd8:	84 c8                	test   al,cl
c0015cda:	75 29                	jne    c0015d05 <RTC::completeRTCRefresh()+0x1a1>
c0015cdc:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015ce0:	89 fd                	mov    ebp,edi
c0015ce2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015ce6:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015cea:	89 f0                	mov    eax,esi
c0015cec:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015cf0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015cf4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015cf8:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015cfc:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015d00:	e9 01 ff ff ff       	jmp    c0015c06 <RTC::completeRTCRefresh()+0xa2>
c0015d05:	39 fd                	cmp    ebp,edi
c0015d07:	75 d3                	jne    c0015cdc <RTC::completeRTCRefresh()+0x178>
c0015d09:	55                   	push   ebp
c0015d0a:	55                   	push   ebp
c0015d0b:	6a 0b                	push   0xb
c0015d0d:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c0015d13:	e8 b6 02 ff ff       	call   c0005fce <Computer::readCMOS(unsigned char)>
c0015d18:	83 c4 10             	add    esp,0x10
c0015d1b:	89 c5                	mov    ebp,eax
c0015d1d:	a8 04                	test   al,0x4
c0015d1f:	75 78                	jne    c0015d99 <RTC::completeRTCRefresh()+0x235>
c0015d21:	b1 0a                	mov    cl,0xa
c0015d23:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015d27:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015d2b:	83 e2 0f             	and    edx,0xf
c0015d2e:	c0 e8 04             	shr    al,0x4
c0015d31:	c1 ef 04             	shr    edi,0x4
c0015d34:	f6 e1                	mul    cl
c0015d36:	6b ff 0a             	imul   edi,edi,0xa
c0015d39:	01 d0                	add    eax,edx
c0015d3b:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015d3f:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015d43:	83 e2 0f             	and    edx,0xf
c0015d46:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015d4a:	c0 e8 04             	shr    al,0x4
c0015d4d:	f6 e1                	mul    cl
c0015d4f:	01 d0                	add    eax,edx
c0015d51:	88 da                	mov    dl,bl
c0015d53:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015d57:	83 e2 0f             	and    edx,0xf
c0015d5a:	88 d8                	mov    al,bl
c0015d5c:	83 e3 80             	and    ebx,0xffffff80
c0015d5f:	c0 e8 04             	shr    al,0x4
c0015d62:	83 e0 07             	and    eax,0x7
c0015d65:	f6 e1                	mul    cl
c0015d67:	01 d0                	add    eax,edx
c0015d69:	89 f2                	mov    edx,esi
c0015d6b:	09 c3                	or     ebx,eax
c0015d6d:	83 e2 0f             	and    edx,0xf
c0015d70:	89 f0                	mov    eax,esi
c0015d72:	c0 e8 04             	shr    al,0x4
c0015d75:	f6 e1                	mul    cl
c0015d77:	8d 34 02             	lea    esi,[edx+eax*1]
c0015d7a:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015d7e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015d82:	83 e2 0f             	and    edx,0xf
c0015d85:	c0 e8 04             	shr    al,0x4
c0015d88:	f6 e1                	mul    cl
c0015d8a:	01 d0                	add    eax,edx
c0015d8c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015d90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015d94:	83 e0 0f             	and    eax,0xf
c0015d97:	01 c7                	add    edi,eax
c0015d99:	83 e5 02             	and    ebp,0x2
c0015d9c:	75 14                	jne    c0015db2 <RTC::completeRTCRefresh()+0x24e>
c0015d9e:	84 db                	test   bl,bl
c0015da0:	79 10                	jns    c0015db2 <RTC::completeRTCRefresh()+0x24e>
c0015da2:	83 e3 7f             	and    ebx,0x7f
c0015da5:	b9 18 00 00 00       	mov    ecx,0x18
c0015daa:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015dad:	99                   	cdq    
c0015dae:	f7 f9                	idiv   ecx
c0015db0:	88 d3                	mov    bl,dl
c0015db2:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015db8:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015dbe:	77 06                	ja     c0015dc6 <RTC::completeRTCRefresh()+0x262>
c0015dc0:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015dc6:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015dcb:	31 d2                	xor    edx,edx
c0015dcd:	c1 e1 10             	shl    ecx,0x10
c0015dd0:	89 d7                	mov    edi,edx
c0015dd2:	c1 e5 10             	shl    ebp,0x10
c0015dd5:	31 c0                	xor    eax,eax
c0015dd7:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015ddd:	09 cf                	or     edi,ecx
c0015ddf:	89 fa                	mov    edx,edi
c0015de1:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015de5:	88 da                	mov    dl,bl
c0015de7:	89 f3                	mov    ebx,esi
c0015de9:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015ded:	88 d8                	mov    al,bl
c0015def:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015df3:	0f b7 c8             	movzx  ecx,ax
c0015df6:	09 e9                	or     ecx,ebp
c0015df8:	89 c8                	mov    eax,ecx
c0015dfa:	51                   	push   ecx
c0015dfb:	51                   	push   ecx
c0015dfc:	52                   	push   edx
c0015dfd:	50                   	push   eax
c0015dfe:	e8 e0 48 ff ff       	call   c000a6e3 <datetimeToSeconds(datetime_t)>
c0015e03:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015e07:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015e0d:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015e13:	83 c4 3c             	add    esp,0x3c
c0015e16:	5b                   	pop    ebx
c0015e17:	5e                   	pop    esi
c0015e18:	5f                   	pop    edi
c0015e19:	5d                   	pop    ebp
c0015e1a:	c3                   	ret    
c0015e1b:	90                   	nop

c0015e1c <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015e1c:	55                   	push   ebp
c0015e1d:	57                   	push   edi
c0015e1e:	56                   	push   esi
c0015e1f:	53                   	push   ebx
c0015e20:	83 ec 30             	sub    esp,0x30
c0015e23:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015e27:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015e2b:	6a 00                	push   0x0
c0015e2d:	6a 00                	push   0x0
c0015e2f:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c0015e35:	e8 a6 02 ff ff       	call   c00060e0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015e3a:	83 c4 0c             	add    esp,0xc
c0015e3d:	6a 00                	push   0x0
c0015e3f:	6a 02                	push   0x2
c0015e41:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c0015e47:	e8 94 02 ff ff       	call   c00060e0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015e4c:	31 d2                	xor    edx,edx
c0015e4e:	89 f9                	mov    ecx,edi
c0015e50:	89 f8                	mov    eax,edi
c0015e52:	c1 e9 10             	shr    ecx,0x10
c0015e55:	0f b6 c4             	movzx  eax,ah
c0015e58:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0015e5c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0015e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015e64:	b9 64 00 00 00       	mov    ecx,0x64
c0015e69:	89 f0                	mov    eax,esi
c0015e6b:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0015e6f:	89 f0                	mov    eax,esi
c0015e71:	0f b6 c4             	movzx  eax,ah
c0015e74:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015e78:	89 f0                	mov    eax,esi
c0015e7a:	c1 e8 10             	shr    eax,0x10
c0015e7d:	66 f7 f1             	div    cx
c0015e80:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0015e85:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0015e8a:	59                   	pop    ecx
c0015e8b:	5b                   	pop    ebx
c0015e8c:	89 fb                	mov    ebx,edi
c0015e8e:	6a 0b                	push   0xb
c0015e90:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c0015e96:	e8 33 01 ff ff       	call   c0005fce <Computer::readCMOS(unsigned char)>
c0015e9b:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0015e9f:	83 c4 10             	add    esp,0x10
c0015ea2:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0015ea7:	75 74                	jne    c0015f1d <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0015ea9:	b2 0a                	mov    dl,0xa
c0015eab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015eaf:	0f b6 c1             	movzx  eax,cl
c0015eb2:	f6 f2                	div    dl
c0015eb4:	88 c3                	mov    bl,al
c0015eb6:	88 e0                	mov    al,ah
c0015eb8:	c1 e3 04             	shl    ebx,0x4
c0015ebb:	09 c3                	or     ebx,eax
c0015ebd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015ec2:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0015ec6:	f6 f2                	div    dl
c0015ec8:	88 c1                	mov    cl,al
c0015eca:	88 e0                	mov    al,ah
c0015ecc:	c1 e1 04             	shl    ecx,0x4
c0015ecf:	09 c1                	or     ecx,eax
c0015ed1:	89 f8                	mov    eax,edi
c0015ed3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0015ed7:	0f b6 c0             	movzx  eax,al
c0015eda:	f6 f2                	div    dl
c0015edc:	88 c3                	mov    bl,al
c0015ede:	88 e0                	mov    al,ah
c0015ee0:	c1 e3 04             	shl    ebx,0x4
c0015ee3:	09 c3                	or     ebx,eax
c0015ee5:	89 f0                	mov    eax,esi
c0015ee7:	0f b6 c0             	movzx  eax,al
c0015eea:	f6 f2                	div    dl
c0015eec:	88 c1                	mov    cl,al
c0015eee:	88 e0                	mov    al,ah
c0015ef0:	c1 e1 04             	shl    ecx,0x4
c0015ef3:	09 c1                	or     ecx,eax
c0015ef5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015efa:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0015efe:	f6 f2                	div    dl
c0015f00:	88 c1                	mov    cl,al
c0015f02:	88 e0                	mov    al,ah
c0015f04:	c1 e1 04             	shl    ecx,0x4
c0015f07:	09 c1                	or     ecx,eax
c0015f09:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0015f0e:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0015f12:	f6 f2                	div    dl
c0015f14:	89 c5                	mov    ebp,eax
c0015f16:	88 e0                	mov    al,ah
c0015f18:	c1 e5 04             	shl    ebp,0x4
c0015f1b:	09 c5                	or     ebp,eax
c0015f1d:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0015f22:	75 17                	jne    c0015f3b <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015f24:	80 fb 0b             	cmp    bl,0xb
c0015f27:	76 0c                	jbe    c0015f35 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0015f29:	80 eb 0c             	sub    bl,0xc
c0015f2c:	75 02                	jne    c0015f30 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0015f2e:	b3 0c                	mov    bl,0xc
c0015f30:	83 cb 80             	or     ebx,0xffffff80
c0015f33:	eb 06                	jmp    c0015f3b <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015f35:	84 db                	test   bl,bl
c0015f37:	75 02                	jne    c0015f3b <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015f39:	b3 0c                	mov    bl,0xc
c0015f3b:	0f b6 db             	movzx  ebx,bl
c0015f3e:	50                   	push   eax
c0015f3f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0015f44:	50                   	push   eax
c0015f45:	6a 00                	push   0x0
c0015f47:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c0015f4d:	e8 8e 01 ff ff       	call   c00060e0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015f52:	83 c4 0c             	add    esp,0xc
c0015f55:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015f5a:	50                   	push   eax
c0015f5b:	6a 02                	push   0x2
c0015f5d:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c0015f63:	e8 78 01 ff ff       	call   c00060e0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015f68:	83 c4 0c             	add    esp,0xc
c0015f6b:	53                   	push   ebx
c0015f6c:	6a 04                	push   0x4
c0015f6e:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c0015f74:	e8 67 01 ff ff       	call   c00060e0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015f79:	83 c4 0c             	add    esp,0xc
c0015f7c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0015f81:	50                   	push   eax
c0015f82:	6a 07                	push   0x7
c0015f84:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c0015f8a:	e8 51 01 ff ff       	call   c00060e0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015f8f:	83 c4 0c             	add    esp,0xc
c0015f92:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0015f97:	50                   	push   eax
c0015f98:	6a 08                	push   0x8
c0015f9a:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c0015fa0:	e8 3b 01 ff ff       	call   c00060e0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015fa5:	83 c4 0c             	add    esp,0xc
c0015fa8:	89 e8                	mov    eax,ebp
c0015faa:	0f b6 e8             	movzx  ebp,al
c0015fad:	55                   	push   ebp
c0015fae:	6a 09                	push   0x9
c0015fb0:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c0015fb6:	e8 25 01 ff ff       	call   c00060e0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015fbb:	5a                   	pop    edx
c0015fbc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015fc0:	e8 9f fb ff ff       	call   c0015b64 <RTC::completeRTCRefresh()>
c0015fc5:	83 c4 3c             	add    esp,0x3c
c0015fc8:	b0 01                	mov    al,0x1
c0015fca:	5b                   	pop    ebx
c0015fcb:	5e                   	pop    esi
c0015fcc:	5f                   	pop    edi
c0015fcd:	5d                   	pop    ebp
c0015fce:	c3                   	ret    

c0015fcf <rtcIRQHandler(regs*, void*)>:
c0015fcf:	53                   	push   ebx
c0015fd0:	83 ec 10             	sub    esp,0x10
c0015fd3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015fd7:	6a 0c                	push   0xc
c0015fd9:	ff 35 68 03 02 c0    	push   DWORD PTR ds:0xc0020368
c0015fdf:	e8 ea ff fe ff       	call   c0005fce <Computer::readCMOS(unsigned char)>
c0015fe4:	83 c4 10             	add    esp,0x10
c0015fe7:	84 c0                	test   al,al
c0015fe9:	79 24                	jns    c001600f <rtcIRQHandler(regs*, void*)+0x40>
c0015feb:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0015ff2:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0015ff9:	66 ff 05 40 39 02 c0 	inc    WORD PTR ds:0xc0023940
c0016000:	75 0d                	jne    c001600f <rtcIRQHandler(regs*, void*)+0x40>
c0016002:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0016006:	83 c4 08             	add    esp,0x8
c0016009:	5b                   	pop    ebx
c001600a:	e9 55 fb ff ff       	jmp    c0015b64 <RTC::completeRTCRefresh()>
c001600f:	83 c4 08             	add    esp,0x8
c0016012:	5b                   	pop    ebx
c0016013:	c3                   	ret    

c0016014 <RTC::RTC()>:
c0016014:	83 ec 1c             	sub    esp,0x1c
c0016017:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001601b:	83 ec 08             	sub    esp,0x8
c001601e:	68 63 f3 01 c0       	push   0xc001f363
c0016023:	50                   	push   eax
c0016024:	e8 95 45 ff ff       	call   c000a5be <Clock::Clock(char const*)>
c0016029:	83 c4 10             	add    esp,0x10
c001602c:	ba 80 f3 01 c0       	mov    edx,0xc001f380
c0016031:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016035:	89 10                	mov    DWORD PTR [eax],edx
c0016037:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001603b:	83 ec 0c             	sub    esp,0xc
c001603e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016042:	6a 01                	push   0x1
c0016044:	68 cf 5f 01 c0       	push   0xc0015fcf
c0016049:	6a 08                	push   0x8
c001604b:	50                   	push   eax
c001604c:	e8 51 4a ff ff       	call   c000aaa2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0016051:	83 c4 20             	add    esp,0x20
c0016054:	89 c2                	mov    edx,eax
c0016056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001605a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0016060:	fa                   	cli    
c0016061:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0016066:	40                   	inc    eax
c0016067:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c001606c:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c0016071:	83 ec 08             	sub    esp,0x8
c0016074:	6a 0b                	push   0xb
c0016076:	50                   	push   eax
c0016077:	e8 52 ff fe ff       	call   c0005fce <Computer::readCMOS(unsigned char)>
c001607c:	83 c4 10             	add    esp,0x10
c001607f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016083:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c0016088:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001608c:	83 ca 10             	or     edx,0x10
c001608f:	0f b6 d2             	movzx  edx,dl
c0016092:	83 ec 04             	sub    esp,0x4
c0016095:	52                   	push   edx
c0016096:	6a 0b                	push   0xb
c0016098:	50                   	push   eax
c0016099:	e8 42 00 ff ff       	call   c00060e0 <Computer::writeCMOS(unsigned char, unsigned char)>
c001609e:	83 c4 10             	add    esp,0x10
c00160a1:	83 ec 0c             	sub    esp,0xc
c00160a4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160a8:	e8 b7 fa ff ff       	call   c0015b64 <RTC::completeRTCRefresh()>
c00160ad:	83 c4 10             	add    esp,0x10
c00160b0:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00160b5:	48                   	dec    eax
c00160b6:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c00160bb:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00160c0:	85 c0                	test   eax,eax
c00160c2:	75 01                	jne    c00160c5 <RTC::RTC()+0xb1>
c00160c4:	fb                   	sti    
c00160c5:	90                   	nop
c00160c6:	83 c4 1c             	add    esp,0x1c
c00160c9:	c3                   	ret    
c00160ca:	66 90                	xchg   ax,ax

c00160cc <Hal::consoleScroll(int, int)>:
c00160cc:	83 ec 10             	sub    esp,0x10
c00160cf:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00160d7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00160df:	90                   	nop
c00160e0:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00160e5:	0f 8f e1 00 00 00    	jg     c00161cc <Hal::consoleScroll(int, int)+0x100>
c00160eb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00160f3:	90                   	nop
c00160f4:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00160fc:	0f 8f be 00 00 00    	jg     c00161c0 <Hal::consoleScroll(int, int)+0xf4>
c0016102:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016106:	89 d0                	mov    eax,edx
c0016108:	c1 e0 02             	shl    eax,0x2
c001610b:	01 d0                	add    eax,edx
c001610d:	c1 e0 05             	shl    eax,0x5
c0016110:	89 c2                	mov    edx,eax
c0016112:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016116:	01 d0                	add    eax,edx
c0016118:	89 c2                	mov    edx,eax
c001611a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001611e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0016121:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016125:	89 d0                	mov    eax,edx
c0016127:	c1 e0 02             	shl    eax,0x2
c001612a:	01 d0                	add    eax,edx
c001612c:	c1 e0 05             	shl    eax,0x5
c001612f:	89 c2                	mov    edx,eax
c0016131:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016135:	01 d0                	add    eax,edx
c0016137:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001613d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016141:	01 c2                	add    edx,eax
c0016143:	8a 01                	mov    al,BYTE PTR [ecx]
c0016145:	88 02                	mov    BYTE PTR [edx],al
c0016147:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001614c:	75 66                	jne    c00161b4 <Hal::consoleScroll(int, int)+0xe8>
c001614e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016152:	83 e0 01             	and    eax,0x1
c0016155:	74 39                	je     c0016190 <Hal::consoleScroll(int, int)+0xc4>
c0016157:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001615b:	83 e0 0f             	and    eax,0xf
c001615e:	88 c2                	mov    dl,al
c0016160:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016164:	c1 e0 04             	shl    eax,0x4
c0016167:	88 d1                	mov    cl,dl
c0016169:	09 c1                	or     ecx,eax
c001616b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001616f:	89 d0                	mov    eax,edx
c0016171:	c1 e0 02             	shl    eax,0x2
c0016174:	01 d0                	add    eax,edx
c0016176:	c1 e0 05             	shl    eax,0x5
c0016179:	89 c2                	mov    edx,eax
c001617b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001617f:	01 d0                	add    eax,edx
c0016181:	89 c2                	mov    edx,eax
c0016183:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016187:	01 d0                	add    eax,edx
c0016189:	88 ca                	mov    dl,cl
c001618b:	88 10                	mov    BYTE PTR [eax],dl
c001618d:	eb 25                	jmp    c00161b4 <Hal::consoleScroll(int, int)+0xe8>
c001618f:	90                   	nop
c0016190:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016194:	89 d0                	mov    eax,edx
c0016196:	c1 e0 02             	shl    eax,0x2
c0016199:	01 d0                	add    eax,edx
c001619b:	c1 e0 05             	shl    eax,0x5
c001619e:	89 c2                	mov    edx,eax
c00161a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00161a4:	01 d0                	add    eax,edx
c00161a6:	89 c2                	mov    edx,eax
c00161a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00161ac:	01 d0                	add    eax,edx
c00161ae:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00161b1:	8d 76 00             	lea    esi,[esi+0x0]
c00161b4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00161b8:	e9 37 ff ff ff       	jmp    c00160f4 <Hal::consoleScroll(int, int)+0x28>
c00161bd:	8d 76 00             	lea    esi,[esi+0x0]
c00161c0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00161c4:	e9 17 ff ff ff       	jmp    c00160e0 <Hal::consoleScroll(int, int)+0x14>
c00161c9:	8d 76 00             	lea    esi,[esi+0x0]
c00161cc:	90                   	nop
c00161cd:	83 c4 10             	add    esp,0x10
c00161d0:	c3                   	ret    
c00161d1:	8d 76 00             	lea    esi,[esi+0x0]

c00161d4 <Hal::consoleWriteCharacter(char, int, int, int, int)>:
c00161d4:	83 ec 14             	sub    esp,0x14
c00161d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00161db:	88 04 24             	mov    BYTE PTR [esp],al
c00161de:	8a 04 24             	mov    al,BYTE PTR [esp]
c00161e1:	0f b6 c0             	movzx  eax,al
c00161e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00161e8:	89 d1                	mov    ecx,edx
c00161ea:	83 e1 0f             	and    ecx,0xf
c00161ed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00161f1:	c1 e2 04             	shl    edx,0x4
c00161f4:	0f b6 d2             	movzx  edx,dl
c00161f7:	09 ca                	or     edx,ecx
c00161f9:	c1 e2 08             	shl    edx,0x8
c00161fc:	09 d0                	or     eax,edx
c00161fe:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0016203:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001620b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001620f:	89 d0                	mov    eax,edx
c0016211:	c1 e0 02             	shl    eax,0x2
c0016214:	01 d0                	add    eax,edx
c0016216:	c1 e0 04             	shl    eax,0x4
c0016219:	89 c2                	mov    edx,eax
c001621b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001621f:	01 d0                	add    eax,edx
c0016221:	01 c0                	add    eax,eax
c0016223:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0016227:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001622b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016230:	66 89 02             	mov    WORD PTR [edx],ax
c0016233:	90                   	nop
c0016234:	83 c4 14             	add    esp,0x14
c0016237:	c3                   	ret    

c0016238 <Hal::consoleCursorUpdate(int, int)>:
c0016238:	83 ec 20             	sub    esp,0x20
c001623b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001623f:	89 c2                	mov    edx,eax
c0016241:	89 d0                	mov    eax,edx
c0016243:	c1 e0 02             	shl    eax,0x2
c0016246:	01 d0                	add    eax,edx
c0016248:	c1 e0 04             	shl    eax,0x4
c001624b:	89 c2                	mov    edx,eax
c001624d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016251:	01 d0                	add    eax,edx
c0016253:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0016258:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001625f:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0016264:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016268:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001626c:	ee                   	out    dx,al
c001626d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016272:	0f b6 c0             	movzx  eax,al
c0016275:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001627c:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016280:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0016284:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016288:	ee                   	out    dx,al
c0016289:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0016290:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0016295:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0016299:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001629d:	ee                   	out    dx,al
c001629e:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00162a3:	66 c1 e8 08          	shr    ax,0x8
c00162a7:	0f b6 c0             	movzx  eax,al
c00162aa:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00162b1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00162b5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00162b9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00162bd:	ee                   	out    dx,al
c00162be:	90                   	nop
c00162bf:	83 c4 20             	add    esp,0x20
c00162c2:	c3                   	ret    
c00162c3:	90                   	nop

c00162c4 <FAT::getName()>:
c00162c4:	b8 b4 f3 01 c0       	mov    eax,0xc001f3b4
c00162c9:	c3                   	ret    
c00162ca:	66 90                	xchg   ax,ax

c00162cc <FAT::tell(void*, unsigned long long*)>:
c00162cc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00162d1:	75 09                	jne    c00162dc <FAT::tell(void*, unsigned long long*)+0x10>
c00162d3:	b8 04 00 00 00       	mov    eax,0x4
c00162d8:	c3                   	ret    
c00162d9:	8d 76 00             	lea    esi,[esi+0x0]
c00162dc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00162e1:	75 09                	jne    c00162ec <FAT::tell(void*, unsigned long long*)+0x20>
c00162e3:	b8 04 00 00 00       	mov    eax,0x4
c00162e8:	c3                   	ret    
c00162e9:	8d 76 00             	lea    esi,[esi+0x0]
c00162ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162f0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00162f3:	ba 00 00 00 00       	mov    edx,0x0
c00162f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00162fc:	89 01                	mov    DWORD PTR [ecx],eax
c00162fe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016301:	b8 00 00 00 00       	mov    eax,0x0
c0016306:	c3                   	ret    
c0016307:	90                   	nop

c0016308 <FAT::stat(void*, unsigned long long*)>:
c0016308:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001630d:	75 09                	jne    c0016318 <FAT::stat(void*, unsigned long long*)+0x10>
c001630f:	b8 04 00 00 00       	mov    eax,0x4
c0016314:	c3                   	ret    
c0016315:	8d 76 00             	lea    esi,[esi+0x0]
c0016318:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001631d:	75 09                	jne    c0016328 <FAT::stat(void*, unsigned long long*)+0x20>
c001631f:	b8 04 00 00 00       	mov    eax,0x4
c0016324:	c3                   	ret    
c0016325:	8d 76 00             	lea    esi,[esi+0x0]
c0016328:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001632c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001632f:	ba 00 00 00 00       	mov    edx,0x0
c0016334:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016338:	89 01                	mov    DWORD PTR [ecx],eax
c001633a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001633d:	b8 00 00 00 00       	mov    eax,0x0
c0016342:	c3                   	ret    
c0016343:	90                   	nop

c0016344 <FAT::~FAT()>:
c0016344:	83 ec 0c             	sub    esp,0xc
c0016347:	ba 00 f4 01 c0       	mov    edx,0xc001f400
c001634c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016350:	89 10                	mov    DWORD PTR [eax],edx
c0016352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016356:	83 ec 0c             	sub    esp,0xc
c0016359:	50                   	push   eax
c001635a:	e8 af 36 ff ff       	call   c0009a0e <Filesystem::~Filesystem()>
c001635f:	83 c4 10             	add    esp,0x10
c0016362:	90                   	nop
c0016363:	83 c4 0c             	add    esp,0xc
c0016366:	c3                   	ret    
c0016367:	90                   	nop

c0016368 <FAT::~FAT()>:
c0016368:	83 ec 0c             	sub    esp,0xc
c001636b:	83 ec 0c             	sub    esp,0xc
c001636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016372:	e8 cd ff ff ff       	call   c0016344 <FAT::~FAT()>
c0016377:	83 c4 10             	add    esp,0x10
c001637a:	83 ec 08             	sub    esp,0x8
c001637d:	6a 08                	push   0x8
c001637f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016383:	e8 6a 32 ff ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c0016388:	83 c4 10             	add    esp,0x10
c001638b:	83 c4 0c             	add    esp,0xc
c001638e:	c3                   	ret    
c001638f:	90                   	nop

c0016390 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0016390:	83 ec 1c             	sub    esp,0x1c
c0016393:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001639a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001639f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00163a3:	8b 04 85 80 39 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc680]
c00163aa:	83 f8 ff             	cmp    eax,0xffffffff
c00163ad:	75 35                	jne    c00163e4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00163af:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00163b3:	88 c2                	mov    dl,al
c00163b5:	a1 60 39 02 c0       	mov    eax,ds:0xc0023960
c00163ba:	01 d0                	add    eax,edx
c00163bc:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00163c0:	8b 15 60 39 02 c0    	mov    edx,DWORD PTR ds:0xc0023960
c00163c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00163ca:	89 14 85 80 39 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc680],edx
c00163d1:	a1 60 39 02 c0       	mov    eax,ds:0xc0023960
c00163d6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00163da:	89 14 85 00 3a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc600],edx
c00163e1:	eb 19                	jmp    c00163fc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00163e3:	90                   	nop
c00163e4:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00163e8:	88 c2                	mov    dl,al
c00163ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00163ee:	8b 04 85 80 39 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc680]
c00163f5:	01 d0                	add    eax,edx
c00163f7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00163fb:	90                   	nop
c00163fc:	83 ec 04             	sub    esp,0x4
c00163ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016403:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016407:	8d 44 24 15          	lea    eax,[esp+0x15]
c001640b:	50                   	push   eax
c001640c:	e8 da e4 fe ff       	call   c00048eb <f_getlabel>
c0016411:	83 c4 10             	add    esp,0x10
c0016414:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016418:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001641d:	75 09                	jne    c0016428 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001641f:	b8 00 00 00 00       	mov    eax,0x0
c0016424:	eb 0a                	jmp    c0016430 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0016426:	66 90                	xchg   ax,ax
c0016428:	b8 01 00 00 00       	mov    eax,0x1
c001642d:	8d 76 00             	lea    esi,[esi+0x0]
c0016430:	83 c4 1c             	add    esp,0x1c
c0016433:	c3                   	ret    

c0016434 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0016434:	57                   	push   edi
c0016435:	83 ec 58             	sub    esp,0x58
c0016438:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0016440:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016444:	b9 0f 00 00 00       	mov    ecx,0xf
c0016449:	b8 00 00 00 00       	mov    eax,0x0
c001644e:	fc                   	cld    
c001644f:	89 d7                	mov    edi,edx
c0016451:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0016453:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016457:	8b 04 85 80 39 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc680]
c001645e:	83 f8 ff             	cmp    eax,0xffffffff
c0016461:	75 35                	jne    c0016498 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0016463:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016467:	88 c2                	mov    dl,al
c0016469:	a1 60 39 02 c0       	mov    eax,ds:0xc0023960
c001646e:	01 d0                	add    eax,edx
c0016470:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016474:	8b 15 60 39 02 c0    	mov    edx,DWORD PTR ds:0xc0023960
c001647a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001647e:	89 14 85 80 39 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc680],edx
c0016485:	a1 60 39 02 c0       	mov    eax,ds:0xc0023960
c001648a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001648e:	89 14 85 00 3a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc600],edx
c0016495:	eb 19                	jmp    c00164b0 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0016497:	90                   	nop
c0016498:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001649c:	88 c2                	mov    dl,al
c001649e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00164a2:	8b 04 85 80 39 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc680]
c00164a9:	01 d0                	add    eax,edx
c00164ab:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00164af:	90                   	nop
c00164b0:	83 ec 08             	sub    esp,0x8
c00164b3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00164b7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00164bb:	50                   	push   eax
c00164bc:	e8 e3 a1 fe ff       	call   c00006a4 <strcat>
c00164c1:	83 c4 10             	add    esp,0x10
c00164c4:	83 ec 0c             	sub    esp,0xc
c00164c7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00164cb:	50                   	push   eax
c00164cc:	e8 ef e4 fe ff       	call   c00049c0 <f_setlabel>
c00164d1:	83 c4 10             	add    esp,0x10
c00164d4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00164d8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00164dd:	75 09                	jne    c00164e8 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00164df:	b8 00 00 00 00       	mov    eax,0x0
c00164e4:	eb 0a                	jmp    c00164f0 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00164e6:	66 90                	xchg   ax,ax
c00164e8:	b8 01 00 00 00       	mov    eax,0x1
c00164ed:	8d 76 00             	lea    esi,[esi+0x0]
c00164f0:	83 c4 58             	add    esp,0x58
c00164f3:	5f                   	pop    edi
c00164f4:	c3                   	ret    
c00164f5:	90                   	nop
c00164f6:	66 90                	xchg   ax,ax

c00164f8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00164f8:	83 ec 2c             	sub    esp,0x2c
c00164fb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016503:	83 ec 08             	sub    esp,0x8
c0016506:	68 d8 f3 01 c0       	push   0xc001f3d8
c001650b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001650f:	e8 dc a0 fe ff       	call   c00005f0 <strcmp>
c0016514:	83 c4 10             	add    esp,0x10
c0016517:	85 c0                	test   eax,eax
c0016519:	0f 94 c0             	sete   al
c001651c:	84 c0                	test   al,al
c001651e:	74 10                	je     c0016530 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0016520:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016528:	e9 b3 00 00 00       	jmp    c00165e0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001652d:	8d 76 00             	lea    esi,[esi+0x0]
c0016530:	83 ec 08             	sub    esp,0x8
c0016533:	68 ca f3 01 c0       	push   0xc001f3ca
c0016538:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001653c:	e8 af a0 fe ff       	call   c00005f0 <strcmp>
c0016541:	83 c4 10             	add    esp,0x10
c0016544:	85 c0                	test   eax,eax
c0016546:	0f 94 c0             	sete   al
c0016549:	84 c0                	test   al,al
c001654b:	74 0f                	je     c001655c <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001654d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016555:	e9 86 00 00 00       	jmp    c00165e0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001655a:	66 90                	xchg   ax,ax
c001655c:	83 ec 08             	sub    esp,0x8
c001655f:	68 d0 f3 01 c0       	push   0xc001f3d0
c0016564:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016568:	e8 83 a0 fe ff       	call   c00005f0 <strcmp>
c001656d:	83 c4 10             	add    esp,0x10
c0016570:	85 c0                	test   eax,eax
c0016572:	0f 94 c0             	sete   al
c0016575:	84 c0                	test   al,al
c0016577:	74 0b                	je     c0016584 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0016579:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016581:	eb 5d                	jmp    c00165e0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016583:	90                   	nop
c0016584:	83 ec 08             	sub    esp,0x8
c0016587:	68 bc d2 01 c0       	push   0xc001d2bc
c001658c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016590:	e8 5b a0 fe ff       	call   c00005f0 <strcmp>
c0016595:	83 c4 10             	add    esp,0x10
c0016598:	85 c0                	test   eax,eax
c001659a:	0f 94 c0             	sete   al
c001659d:	84 c0                	test   al,al
c001659f:	74 0b                	je     c00165ac <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c00165a1:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00165a9:	eb 35                	jmp    c00165e0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00165ab:	90                   	nop
c00165ac:	83 ec 08             	sub    esp,0x8
c00165af:	68 d6 f3 01 c0       	push   0xc001f3d6
c00165b4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00165b8:	e8 33 a0 fe ff       	call   c00005f0 <strcmp>
c00165bd:	83 c4 10             	add    esp,0x10
c00165c0:	85 c0                	test   eax,eax
c00165c2:	0f 94 c0             	sete   al
c00165c5:	84 c0                	test   al,al
c00165c7:	74 0b                	je     c00165d4 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c00165c9:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00165d1:	eb 0d                	jmp    c00165e0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00165d3:	90                   	nop
c00165d4:	b8 08 00 00 00       	mov    eax,0x8
c00165d9:	e9 ea 00 00 00       	jmp    c00166c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00165de:	66 90                	xchg   ax,ax
c00165e0:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00165e7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00165ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00165f0:	8b 04 85 80 39 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc680]
c00165f7:	83 f8 ff             	cmp    eax,0xffffffff
c00165fa:	75 34                	jne    c0016630 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00165fc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016600:	88 c2                	mov    dl,al
c0016602:	a1 60 39 02 c0       	mov    eax,ds:0xc0023960
c0016607:	01 d0                	add    eax,edx
c0016609:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001660d:	8b 15 60 39 02 c0    	mov    edx,DWORD PTR ds:0xc0023960
c0016613:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016617:	89 14 85 80 39 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc680],edx
c001661e:	a1 60 39 02 c0       	mov    eax,ds:0xc0023960
c0016623:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016627:	89 14 85 00 3a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc600],edx
c001662e:	eb 18                	jmp    c0016648 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0016630:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016634:	88 c2                	mov    dl,al
c0016636:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001663a:	8b 04 85 80 39 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc680]
c0016641:	01 d0                	add    eax,edx
c0016643:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016647:	90                   	nop
c0016648:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001664c:	88 04 24             	mov    BYTE PTR [esp],al
c001664f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016653:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016657:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001665f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016664:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001666c:	83 ec 0c             	sub    esp,0xc
c001666f:	68 00 20 00 00       	push   0x2000
c0016674:	e8 d0 02 ff ff       	call   c0006949 <malloc>
c0016679:	83 c4 10             	add    esp,0x10
c001667c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016680:	68 00 20 00 00       	push   0x2000
c0016685:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016689:	8d 44 24 08          	lea    eax,[esp+0x8]
c001668d:	50                   	push   eax
c001668e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0016692:	50                   	push   eax
c0016693:	e8 a6 e7 fe ff       	call   c0004e3e <f_mkfs>
c0016698:	83 c4 10             	add    esp,0x10
c001669b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001669f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00166a4:	75 0a                	jne    c00166b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c00166a6:	b8 00 00 00 00       	mov    eax,0x0
c00166ab:	eb 1b                	jmp    c00166c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00166ad:	8d 76 00             	lea    esi,[esi+0x0]
c00166b0:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00166b5:	75 09                	jne    c00166c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00166b7:	b8 09 00 00 00       	mov    eax,0x9
c00166bc:	eb 0a                	jmp    c00166c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00166be:	66 90                	xchg   ax,ax
c00166c0:	b8 01 00 00 00       	mov    eax,0x1
c00166c5:	8d 76 00             	lea    esi,[esi+0x0]
c00166c8:	83 c4 2c             	add    esp,0x2c
c00166cb:	c3                   	ret    

c00166cc <FAT::tryMount(LogicalDisk*, int)>:
c00166cc:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00166d2:	a1 60 39 02 c0       	mov    eax,ds:0xc0023960
c00166d7:	83 f8 14             	cmp    eax,0x14
c00166da:	75 18                	jne    c00166f4 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00166dc:	83 ec 0c             	sub    esp,0xc
c00166df:	68 dc f3 01 c0       	push   0xc001f3dc
c00166e4:	e8 c0 8c ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c00166e9:	83 c4 10             	add    esp,0x10
c00166ec:	b0 00                	mov    al,0x0
c00166ee:	e9 e9 01 00 00       	jmp    c00168dc <FAT::tryMount(LogicalDisk*, int)+0x210>
c00166f3:	90                   	nop
c00166f4:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00166fb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016701:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016707:	3d 00 02 00 00       	cmp    eax,0x200
c001670c:	74 0a                	je     c0016718 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001670e:	b0 00                	mov    al,0x0
c0016710:	e9 c7 01 00 00       	jmp    c00168dc <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016715:	8d 76 00             	lea    esi,[esi+0x0]
c0016718:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0016720:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016727:	8b 04 85 80 39 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc680]
c001672e:	83 f8 ff             	cmp    eax,0xffffffff
c0016731:	74 09                	je     c001673c <FAT::tryMount(LogicalDisk*, int)+0x70>
c0016733:	b0 01                	mov    al,0x1
c0016735:	e9 a2 01 00 00       	jmp    c00168dc <FAT::tryMount(LogicalDisk*, int)+0x210>
c001673a:	66 90                	xchg   ax,ax
c001673c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0016746:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001674e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016755:	88 c2                	mov    dl,al
c0016757:	a1 60 39 02 c0       	mov    eax,ds:0xc0023960
c001675c:	01 d0                	add    eax,edx
c001675e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016765:	8b 15 60 39 02 c0    	mov    edx,DWORD PTR ds:0xc0023960
c001676b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016772:	89 14 85 80 39 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc680],edx
c0016779:	a1 60 39 02 c0       	mov    eax,ds:0xc0023960
c001677e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016785:	89 14 85 00 3a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc600],edx
c001678c:	83 ec 0c             	sub    esp,0xc
c001678f:	68 34 02 00 00       	push   0x234
c0016794:	e8 b0 01 ff ff       	call   c0006949 <malloc>
c0016799:	83 c4 10             	add    esp,0x10
c001679c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00167a3:	83 ec 04             	sub    esp,0x4
c00167a6:	6a 00                	push   0x0
c00167a8:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00167af:	50                   	push   eax
c00167b0:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00167b7:	e8 71 cd fe ff       	call   c000352d <f_mount>
c00167bc:	83 c4 10             	add    esp,0x10
c00167bf:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00167c6:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00167ce:	74 1c                	je     c00167ec <FAT::tryMount(LogicalDisk*, int)+0x120>
c00167d0:	83 ec 0c             	sub    esp,0xc
c00167d3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00167da:	e8 8a 01 ff ff       	call   c0006969 <rfree>
c00167df:	83 c4 10             	add    esp,0x10
c00167e2:	b0 00                	mov    al,0x0
c00167e4:	e9 f3 00 00 00       	jmp    c00168dc <FAT::tryMount(LogicalDisk*, int)+0x210>
c00167e9:	8d 76 00             	lea    esi,[esi+0x0]
c00167ec:	83 ec 04             	sub    esp,0x4
c00167ef:	68 00 01 00 00       	push   0x100
c00167f4:	6a 00                	push   0x0
c00167f6:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00167fd:	50                   	push   eax
c00167fe:	e8 a5 9c fe ff       	call   c00004a8 <memset>
c0016803:	83 c4 10             	add    esp,0x10
c0016806:	83 ec 08             	sub    esp,0x8
c0016809:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016810:	50                   	push   eax
c0016811:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016818:	50                   	push   eax
c0016819:	e8 86 9e fe ff       	call   c00006a4 <strcat>
c001681e:	83 c4 10             	add    esp,0x10
c0016821:	83 ec 08             	sub    esp,0x8
c0016824:	68 ea f3 01 c0       	push   0xc001f3ea
c0016829:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016830:	50                   	push   eax
c0016831:	e8 6e 9e fe ff       	call   c00006a4 <strcat>
c0016836:	83 c4 10             	add    esp,0x10
c0016839:	83 ec 04             	sub    esp,0x4
c001683c:	6a 01                	push   0x1
c001683e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016845:	50                   	push   eax
c0016846:	8d 44 24 10          	lea    eax,[esp+0x10]
c001684a:	50                   	push   eax
c001684b:	e8 3f cd fe ff       	call   c000358f <f_open>
c0016850:	83 c4 10             	add    esp,0x10
c0016853:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001685a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016861:	85 c0                	test   eax,eax
c0016863:	74 0b                	je     c0016870 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016865:	78 31                	js     c0016898 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016867:	83 e8 04             	sub    eax,0x4
c001686a:	83 f8 01             	cmp    eax,0x1
c001686d:	77 29                	ja     c0016898 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001686f:	90                   	nop
c0016870:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016878:	83 ec 0c             	sub    esp,0xc
c001687b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001687f:	50                   	push   eax
c0016880:	e8 c9 d4 fe ff       	call   c0003d4e <f_close>
c0016885:	83 c4 10             	add    esp,0x10
c0016888:	90                   	nop
c0016889:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016891:	74 41                	je     c00168d4 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016893:	eb 33                	jmp    c00168c8 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016895:	8d 76 00             	lea    esi,[esi+0x0]
c0016898:	83 ec 0c             	sub    esp,0xc
c001689b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00168a2:	e8 c2 00 ff ff       	call   c0006969 <rfree>
c00168a7:	83 c4 10             	add    esp,0x10
c00168aa:	83 ec 04             	sub    esp,0x4
c00168ad:	6a 00                	push   0x0
c00168af:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00168b6:	50                   	push   eax
c00168b7:	6a 00                	push   0x0
c00168b9:	e8 6f cc fe ff       	call   c000352d <f_mount>
c00168be:	83 c4 10             	add    esp,0x10
c00168c1:	b0 00                	mov    al,0x0
c00168c3:	eb 17                	jmp    c00168dc <FAT::tryMount(LogicalDisk*, int)+0x210>
c00168c5:	8d 76 00             	lea    esi,[esi+0x0]
c00168c8:	a1 60 39 02 c0       	mov    eax,ds:0xc0023960
c00168cd:	40                   	inc    eax
c00168ce:	a3 60 39 02 c0       	mov    ds:0xc0023960,eax
c00168d3:	90                   	nop
c00168d4:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00168db:	90                   	nop
c00168dc:	81 c4 4c 03 00 00    	add    esp,0x34c
c00168e2:	c3                   	ret    
c00168e3:	90                   	nop

c00168e4 <FAT::allocateSwapfile(char const*, int)>:
c00168e4:	55                   	push   ebp
c00168e5:	57                   	push   edi
c00168e6:	56                   	push   esi
c00168e7:	53                   	push   ebx
c00168e8:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00168ee:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00168f9:	83 ec 0c             	sub    esp,0xc
c00168fc:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016903:	e8 41 00 ff ff       	call   c0006949 <malloc>
c0016908:	83 c4 10             	add    esp,0x10
c001690b:	89 c7                	mov    edi,eax
c001690d:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0016912:	83 ec 04             	sub    esp,0x4
c0016915:	50                   	push   eax
c0016916:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001691d:	57                   	push   edi
c001691e:	e8 1b 33 ff ff       	call   c0009c3e <File::File(char const*, Process*)>
c0016923:	83 c4 10             	add    esp,0x10
c0016926:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001692d:	83 ec 04             	sub    esp,0x4
c0016930:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016934:	50                   	push   eax
c0016935:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016939:	50                   	push   eax
c001693a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016941:	e8 5e 36 ff ff       	call   c0009fa4 <File::stat(unsigned long long*, bool*)>
c0016946:	83 c4 10             	add    esp,0x10
c0016949:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016950:	c1 e0 14             	shl    eax,0x14
c0016953:	89 c7                	mov    edi,eax
c0016955:	89 c5                	mov    ebp,eax
c0016957:	c1 fd 1f             	sar    ebp,0x1f
c001695a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001695e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016962:	89 f9                	mov    ecx,edi
c0016964:	31 c1                	xor    ecx,eax
c0016966:	89 cb                	mov    ebx,ecx
c0016968:	89 e9                	mov    ecx,ebp
c001696a:	31 d1                	xor    ecx,edx
c001696c:	89 ce                	mov    esi,ecx
c001696e:	89 f0                	mov    eax,esi
c0016970:	09 d8                	or     eax,ebx
c0016972:	0f 84 9c 00 00 00    	je     c0016a14 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016978:	83 ec 0c             	sub    esp,0xc
c001697b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016982:	e8 e9 34 ff ff       	call   c0009e70 <File::unlink()>
c0016987:	83 c4 10             	add    esp,0x10
c001698a:	83 ec 08             	sub    esp,0x8
c001698d:	6a 12                	push   0x12
c001698f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016996:	e8 5d 33 ff ff       	call   c0009cf8 <File::open(FileOpenMode)>
c001699b:	83 c4 10             	add    esp,0x10
c001699e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00169a5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00169ab:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00169b2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00169b9:	c1 e0 14             	shl    eax,0x14
c00169bc:	83 ec 04             	sub    esp,0x4
c00169bf:	6a 01                	push   0x1
c00169c1:	50                   	push   eax
c00169c2:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00169c9:	e8 82 e1 fe ff       	call   c0004b50 <f_expand>
c00169ce:	83 c4 10             	add    esp,0x10
c00169d1:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00169d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00169da:	83 c0 10             	add    eax,0x10
c00169dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00169df:	83 ec 0c             	sub    esp,0xc
c00169e2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00169e6:	52                   	push   edx
c00169e7:	8d 54 24 30          	lea    edx,[esp+0x30]
c00169eb:	52                   	push   edx
c00169ec:	6a 00                	push   0x0
c00169ee:	68 00 04 00 00       	push   0x400
c00169f3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00169fa:	ff d0                	call   eax
c00169fc:	83 c4 20             	add    esp,0x20
c00169ff:	83 ec 0c             	sub    esp,0xc
c0016a02:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016a09:	e8 48 33 ff ff       	call   c0009d56 <File::close()>
c0016a0e:	83 c4 10             	add    esp,0x10
c0016a11:	8d 76 00             	lea    esi,[esi+0x0]
c0016a14:	83 ec 08             	sub    esp,0x8
c0016a17:	6a 01                	push   0x1
c0016a19:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016a20:	e8 d3 32 ff ff       	call   c0009cf8 <File::open(FileOpenMode)>
c0016a25:	83 c4 10             	add    esp,0x10
c0016a28:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016a2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0016a31:	83 c0 0c             	add    eax,0xc
c0016a34:	8b 00                	mov    eax,DWORD PTR [eax]
c0016a36:	83 ec 0c             	sub    esp,0xc
c0016a39:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016a3d:	52                   	push   edx
c0016a3e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016a42:	52                   	push   edx
c0016a43:	6a 00                	push   0x0
c0016a45:	6a 04                	push   0x4
c0016a47:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016a4e:	ff d0                	call   eax
c0016a50:	83 c4 20             	add    esp,0x20
c0016a53:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016a5a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016a60:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016a67:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016a6e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016a71:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016a78:	83 ec 0c             	sub    esp,0xc
c0016a7b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016a82:	e8 cf 32 ff ff       	call   c0009d56 <File::close()>
c0016a87:	83 c4 10             	add    esp,0x10
c0016a8a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016a91:	ba 00 00 00 00       	mov    edx,0x0
c0016a96:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016a9c:	5b                   	pop    ebx
c0016a9d:	5e                   	pop    esi
c0016a9e:	5f                   	pop    edi
c0016a9f:	5d                   	pop    ebp
c0016aa0:	c3                   	ret    
c0016aa1:	90                   	nop
c0016aa2:	66 90                	xchg   ax,ax

c0016aa4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016aa4:	57                   	push   edi
c0016aa5:	56                   	push   esi
c0016aa6:	53                   	push   ebx
c0016aa7:	81 ec 50 02 00 00    	sub    esp,0x250
c0016aad:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016ab5:	74 0d                	je     c0016ac4 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016ab7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016abf:	75 0f                	jne    c0016ad0 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016ac1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ac4:	b8 04 00 00 00       	mov    eax,0x4
c0016ac9:	e9 36 01 00 00       	jmp    c0016c04 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016ace:	66 90                	xchg   ax,ax
c0016ad0:	83 ec 08             	sub    esp,0x8
c0016ad3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016ada:	50                   	push   eax
c0016adb:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016ae2:	e8 4b d6 fe ff       	call   c0004132 <f_readdir>
c0016ae7:	83 c4 10             	add    esp,0x10
c0016aea:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016af1:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016af8:	83 ec 0c             	sub    esp,0xc
c0016afb:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016b02:	83 c0 16             	add    eax,0x16
c0016b05:	50                   	push   eax
c0016b06:	e8 b9 99 fe ff       	call   c00004c4 <strlen>
c0016b0b:	83 c4 10             	add    esp,0x10
c0016b0e:	ba 00 00 00 00       	mov    edx,0x0
c0016b13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b17:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016b1b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016b22:	0f b6 c0             	movzx  eax,al
c0016b25:	83 e0 10             	and    eax,0x10
c0016b28:	74 0a                	je     c0016b34 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016b2a:	b8 02 00 00 00       	mov    eax,0x2
c0016b2f:	eb 0b                	jmp    c0016b3c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016b31:	8d 76 00             	lea    esi,[esi+0x0]
c0016b34:	b8 01 00 00 00       	mov    eax,0x1
c0016b39:	8d 76 00             	lea    esi,[esi+0x0]
c0016b3c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b40:	83 ec 08             	sub    esp,0x8
c0016b43:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016b4a:	83 c0 16             	add    eax,0x16
c0016b4d:	50                   	push   eax
c0016b4e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016b52:	83 c0 10             	add    eax,0x10
c0016b55:	50                   	push   eax
c0016b56:	e8 09 9a fe ff       	call   c0000564 <strcpy>
c0016b5b:	83 c4 10             	add    esp,0x10
c0016b5e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016b65:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016b6c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016b70:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016b77:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016b7e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016b85:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016b8c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016b93:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016b9a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016ba1:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016ba8:	89 c6                	mov    esi,eax
c0016baa:	89 d7                	mov    edi,edx
c0016bac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016bae:	89 c8                	mov    eax,ecx
c0016bb0:	89 fa                	mov    edx,edi
c0016bb2:	89 f3                	mov    ebx,esi
c0016bb4:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016bbb:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016bc2:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016bc9:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016bd0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016bd6:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016bdd:	84 c0                	test   al,al
c0016bdf:	75 07                	jne    c0016be8 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016be1:	b8 07 00 00 00       	mov    eax,0x7
c0016be6:	eb 1c                	jmp    c0016c04 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016be8:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016bef:	85 c0                	test   eax,eax
c0016bf1:	75 09                	jne    c0016bfc <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016bf3:	b8 00 00 00 00       	mov    eax,0x0
c0016bf8:	eb 0a                	jmp    c0016c04 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016bfa:	66 90                	xchg   ax,ax
c0016bfc:	b8 01 00 00 00       	mov    eax,0x1
c0016c01:	8d 76 00             	lea    esi,[esi+0x0]
c0016c04:	81 c4 50 02 00 00    	add    esp,0x250
c0016c0a:	5b                   	pop    ebx
c0016c0b:	5e                   	pop    esi
c0016c0c:	5f                   	pop    edi
c0016c0d:	c3                   	ret    
c0016c0e:	66 90                	xchg   ax,ax

c0016c10 <FAT::read(void*, unsigned long, void*, int*)>:
c0016c10:	83 ec 1c             	sub    esp,0x1c
c0016c13:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016c18:	74 0a                	je     c0016c24 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016c1a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016c1f:	75 0b                	jne    c0016c2c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016c21:	8d 76 00             	lea    esi,[esi+0x0]
c0016c24:	b8 04 00 00 00       	mov    eax,0x4
c0016c29:	eb 41                	jmp    c0016c6c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016c2b:	90                   	nop
c0016c2c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016c30:	50                   	push   eax
c0016c31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016c39:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016c3d:	e8 06 cc fe ff       	call   c0003848 <f_read>
c0016c42:	83 c4 10             	add    esp,0x10
c0016c45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c4d:	89 c2                	mov    edx,eax
c0016c4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c53:	89 10                	mov    DWORD PTR [eax],edx
c0016c55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c59:	85 c0                	test   eax,eax
c0016c5b:	75 07                	jne    c0016c64 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016c5d:	b8 00 00 00 00       	mov    eax,0x0
c0016c62:	eb 08                	jmp    c0016c6c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016c64:	b8 01 00 00 00       	mov    eax,0x1
c0016c69:	8d 76 00             	lea    esi,[esi+0x0]
c0016c6c:	83 c4 1c             	add    esp,0x1c
c0016c6f:	c3                   	ret    

c0016c70 <FAT::write(void*, unsigned long, void*, int*)>:
c0016c70:	83 ec 1c             	sub    esp,0x1c
c0016c73:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016c78:	74 0a                	je     c0016c84 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016c7a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016c7f:	75 0b                	jne    c0016c8c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016c81:	8d 76 00             	lea    esi,[esi+0x0]
c0016c84:	b8 04 00 00 00       	mov    eax,0x4
c0016c89:	eb 41                	jmp    c0016ccc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016c8b:	90                   	nop
c0016c8c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016c90:	50                   	push   eax
c0016c91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016c99:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016c9d:	e8 b4 cd fe ff       	call   c0003a56 <f_write>
c0016ca2:	83 c4 10             	add    esp,0x10
c0016ca5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cad:	89 c2                	mov    edx,eax
c0016caf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016cb3:	89 10                	mov    DWORD PTR [eax],edx
c0016cb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016cb9:	85 c0                	test   eax,eax
c0016cbb:	75 07                	jne    c0016cc4 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016cbd:	b8 00 00 00 00       	mov    eax,0x0
c0016cc2:	eb 08                	jmp    c0016ccc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016cc4:	b8 01 00 00 00       	mov    eax,0x1
c0016cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0016ccc:	83 c4 1c             	add    esp,0x1c
c0016ccf:	c3                   	ret    

c0016cd0 <FAT::close(void*)>:
c0016cd0:	83 ec 1c             	sub    esp,0x1c
c0016cd3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016cd8:	75 0a                	jne    c0016ce4 <FAT::close(void*)+0x14>
c0016cda:	b8 04 00 00 00       	mov    eax,0x4
c0016cdf:	eb 3f                	jmp    c0016d20 <FAT::close(void*)+0x50>
c0016ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ce4:	83 ec 0c             	sub    esp,0xc
c0016ce7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ceb:	e8 5e d0 fe ff       	call   c0003d4e <f_close>
c0016cf0:	83 c4 10             	add    esp,0x10
c0016cf3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016cf7:	83 ec 0c             	sub    esp,0xc
c0016cfa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016cfe:	e8 56 fc fe ff       	call   c0006959 <free>
c0016d03:	83 c4 10             	add    esp,0x10
c0016d06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d0a:	85 c0                	test   eax,eax
c0016d0c:	75 0a                	jne    c0016d18 <FAT::close(void*)+0x48>
c0016d0e:	b8 00 00 00 00       	mov    eax,0x0
c0016d13:	eb 0b                	jmp    c0016d20 <FAT::close(void*)+0x50>
c0016d15:	8d 76 00             	lea    esi,[esi+0x0]
c0016d18:	b8 01 00 00 00       	mov    eax,0x1
c0016d1d:	8d 76 00             	lea    esi,[esi+0x0]
c0016d20:	83 c4 1c             	add    esp,0x1c
c0016d23:	c3                   	ret    

c0016d24 <FAT::closeDir(void*)>:
c0016d24:	83 ec 1c             	sub    esp,0x1c
c0016d27:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016d2c:	75 0a                	jne    c0016d38 <FAT::closeDir(void*)+0x14>
c0016d2e:	b8 04 00 00 00       	mov    eax,0x4
c0016d33:	eb 3f                	jmp    c0016d74 <FAT::closeDir(void*)+0x50>
c0016d35:	8d 76 00             	lea    esi,[esi+0x0]
c0016d38:	83 ec 0c             	sub    esp,0xc
c0016d3b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016d3f:	e8 cc d3 fe ff       	call   c0004110 <f_closedir>
c0016d44:	83 c4 10             	add    esp,0x10
c0016d47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d4b:	83 ec 0c             	sub    esp,0xc
c0016d4e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016d52:	e8 02 fc fe ff       	call   c0006959 <free>
c0016d57:	83 c4 10             	add    esp,0x10
c0016d5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d5e:	85 c0                	test   eax,eax
c0016d60:	75 0a                	jne    c0016d6c <FAT::closeDir(void*)+0x48>
c0016d62:	b8 00 00 00 00       	mov    eax,0x0
c0016d67:	eb 0b                	jmp    c0016d74 <FAT::closeDir(void*)+0x50>
c0016d69:	8d 76 00             	lea    esi,[esi+0x0]
c0016d6c:	b8 01 00 00 00       	mov    eax,0x1
c0016d71:	8d 76 00             	lea    esi,[esi+0x0]
c0016d74:	83 c4 1c             	add    esp,0x1c
c0016d77:	c3                   	ret    

c0016d78 <FAT::seek(void*, unsigned long long)>:
c0016d78:	83 ec 2c             	sub    esp,0x2c
c0016d7b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016d7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016d83:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d8b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016d90:	75 0a                	jne    c0016d9c <FAT::seek(void*, unsigned long long)+0x24>
c0016d92:	b8 04 00 00 00       	mov    eax,0x4
c0016d97:	eb 33                	jmp    c0016dcc <FAT::seek(void*, unsigned long long)+0x54>
c0016d99:	8d 76 00             	lea    esi,[esi+0x0]
c0016d9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016da0:	83 ec 08             	sub    esp,0x8
c0016da3:	50                   	push   eax
c0016da4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016da8:	e8 d0 cf fe ff       	call   c0003d7d <f_lseek>
c0016dad:	83 c4 10             	add    esp,0x10
c0016db0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016db4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016db8:	85 c0                	test   eax,eax
c0016dba:	75 08                	jne    c0016dc4 <FAT::seek(void*, unsigned long long)+0x4c>
c0016dbc:	b8 00 00 00 00       	mov    eax,0x0
c0016dc1:	eb 09                	jmp    c0016dcc <FAT::seek(void*, unsigned long long)+0x54>
c0016dc3:	90                   	nop
c0016dc4:	b8 01 00 00 00       	mov    eax,0x1
c0016dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0016dcc:	83 c4 2c             	add    esp,0x2c
c0016dcf:	c3                   	ret    

c0016dd0 <fatWrapperReadDisk>:
c0016dd0:	53                   	push   ebx
c0016dd1:	83 ec 18             	sub    esp,0x18
c0016dd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016dd8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016ddc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016de1:	8b 0c 85 e0 28 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd720]
c0016de8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016dec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016df0:	ba 00 00 00 00       	mov    edx,0x0
c0016df5:	83 ec 0c             	sub    esp,0xc
c0016df8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016dfc:	53                   	push   ebx
c0016dfd:	52                   	push   edx
c0016dfe:	50                   	push   eax
c0016dff:	51                   	push   ecx
c0016e00:	e8 71 4f ff ff       	call   c000bd76 <LogicalDisk::read(unsigned long long, int, void*)>
c0016e05:	83 c4 20             	add    esp,0x20
c0016e08:	83 c4 18             	add    esp,0x18
c0016e0b:	5b                   	pop    ebx
c0016e0c:	c3                   	ret    
c0016e0d:	8d 76 00             	lea    esi,[esi+0x0]

c0016e10 <fatWrapperWriteDisk>:
c0016e10:	53                   	push   ebx
c0016e11:	83 ec 18             	sub    esp,0x18
c0016e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e18:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016e1c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016e21:	8b 0c 85 e0 28 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd720]
c0016e28:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016e2c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016e30:	ba 00 00 00 00       	mov    edx,0x0
c0016e35:	83 ec 0c             	sub    esp,0xc
c0016e38:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e3c:	53                   	push   ebx
c0016e3d:	52                   	push   edx
c0016e3e:	50                   	push   eax
c0016e3f:	51                   	push   ecx
c0016e40:	e8 9d 4f ff ff       	call   c000bde2 <LogicalDisk::write(unsigned long long, int, void*)>
c0016e45:	83 c4 20             	add    esp,0x20
c0016e48:	83 c4 18             	add    esp,0x18
c0016e4b:	5b                   	pop    ebx
c0016e4c:	c3                   	ret    
c0016e4d:	8d 76 00             	lea    esi,[esi+0x0]

c0016e50 <fatWrapperIoctl>:
c0016e50:	53                   	push   ebx
c0016e51:	83 ec 28             	sub    esp,0x28
c0016e54:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016e58:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e5c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016e60:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016e64:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0016e69:	75 31                	jne    c0016e9c <fatWrapperIoctl+0x4c>
c0016e6b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016e6f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016e73:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016e78:	8b 04 85 e0 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd720]
c0016e7f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016e85:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016e8b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016e8f:	66 89 02             	mov    WORD PTR [edx],ax
c0016e92:	b8 00 00 00 00       	mov    eax,0x0
c0016e97:	e9 b8 00 00 00       	jmp    c0016f54 <fatWrapperIoctl+0x104>
c0016e9c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0016ea1:	75 69                	jne    c0016f0c <fatWrapperIoctl+0xbc>
c0016ea3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ea7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016eab:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016eb0:	8b 04 85 e0 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd720]
c0016eb7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016ebd:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016ec3:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0016ec9:	89 c8                	mov    eax,ecx
c0016ecb:	89 da                	mov    edx,ebx
c0016ecd:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016ed1:	c1 e0 0a             	shl    eax,0xa
c0016ed4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0016ed9:	8b 0c 8d e0 28 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd720]
c0016ee0:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0016ee6:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0016eec:	89 cb                	mov    ebx,ecx
c0016eee:	c1 fb 1f             	sar    ebx,0x1f
c0016ef1:	53                   	push   ebx
c0016ef2:	51                   	push   ecx
c0016ef3:	52                   	push   edx
c0016ef4:	50                   	push   eax
c0016ef5:	e8 c6 55 00 00       	call   c001c4c0 <__udivdi3>
c0016efa:	83 c4 10             	add    esp,0x10
c0016efd:	89 c2                	mov    edx,eax
c0016eff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016f03:	89 10                	mov    DWORD PTR [eax],edx
c0016f05:	b8 00 00 00 00       	mov    eax,0x0
c0016f0a:	eb 48                	jmp    c0016f54 <fatWrapperIoctl+0x104>
c0016f0c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0016f11:	75 09                	jne    c0016f1c <fatWrapperIoctl+0xcc>
c0016f13:	b8 00 00 00 00       	mov    eax,0x0
c0016f18:	eb 3a                	jmp    c0016f54 <fatWrapperIoctl+0x104>
c0016f1a:	66 90                	xchg   ax,ax
c0016f1c:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0016f21:	75 19                	jne    c0016f3c <fatWrapperIoctl+0xec>
c0016f23:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016f27:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016f2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016f2f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0016f35:	b8 00 00 00 00       	mov    eax,0x0
c0016f3a:	eb 18                	jmp    c0016f54 <fatWrapperIoctl+0x104>
c0016f3c:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0016f41:	75 09                	jne    c0016f4c <fatWrapperIoctl+0xfc>
c0016f43:	b8 00 00 00 00       	mov    eax,0x0
c0016f48:	eb 0a                	jmp    c0016f54 <fatWrapperIoctl+0x104>
c0016f4a:	66 90                	xchg   ax,ax
c0016f4c:	b8 04 00 00 00       	mov    eax,0x4
c0016f51:	8d 76 00             	lea    esi,[esi+0x0]
c0016f54:	83 c4 28             	add    esp,0x28
c0016f57:	5b                   	pop    ebx
c0016f58:	c3                   	ret    
c0016f59:	90                   	nop
c0016f5a:	66 90                	xchg   ax,ax

c0016f5c <FAT::FAT()>:
c0016f5c:	83 ec 1c             	sub    esp,0x1c
c0016f5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f63:	83 ec 0c             	sub    esp,0xc
c0016f66:	50                   	push   eax
c0016f67:	e8 7e 2a ff ff       	call   c00099ea <Filesystem::Filesystem()>
c0016f6c:	83 c4 10             	add    esp,0x10
c0016f6f:	ba 00 f4 01 c0       	mov    edx,0xc001f400
c0016f74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f78:	89 10                	mov    DWORD PTR [eax],edx
c0016f7a:	c7 05 60 39 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023960,0x0
c0016f84:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016f8c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0016f91:	7f 15                	jg     c0016fa8 <FAT::FAT()+0x4c>
c0016f93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f97:	c7 04 85 80 39 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc680],0xffffffff
c0016fa2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016fa6:	eb e4                	jmp    c0016f8c <FAT::FAT()+0x30>
c0016fa8:	90                   	nop
c0016fa9:	83 c4 1c             	add    esp,0x1c
c0016fac:	c3                   	ret    
c0016fad:	90                   	nop
c0016fae:	66 90                	xchg   ax,ax

c0016fb0 <FAT::fixFilepath(char*)>:
c0016fb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016fb4:	8a 00                	mov    al,BYTE PTR [eax]
c0016fb6:	3c 40                	cmp    al,0x40
c0016fb8:	7e 2e                	jle    c0016fe8 <FAT::fixFilepath(char*)+0x38>
c0016fba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016fbe:	8a 00                	mov    al,BYTE PTR [eax]
c0016fc0:	83 e8 41             	sub    eax,0x41
c0016fc3:	88 c2                	mov    dl,al
c0016fc5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016fc9:	88 10                	mov    BYTE PTR [eax],dl
c0016fcb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016fcf:	8a 00                	mov    al,BYTE PTR [eax]
c0016fd1:	0f be c0             	movsx  eax,al
c0016fd4:	8b 04 85 80 39 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc680]
c0016fdb:	83 c0 30             	add    eax,0x30
c0016fde:	88 c2                	mov    dl,al
c0016fe0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016fe4:	88 10                	mov    BYTE PTR [eax],dl
c0016fe6:	66 90                	xchg   ax,ax
c0016fe8:	90                   	nop
c0016fe9:	c3                   	ret    
c0016fea:	66 90                	xchg   ax,ax

c0016fec <FAT::open(char const*, void**, FileOpenMode)>:
c0016fec:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016ff2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016ffa:	74 0c                	je     c0017008 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0016ffc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017004:	75 0e                	jne    c0017014 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0017006:	66 90                	xchg   ax,ax
c0017008:	b8 04 00 00 00       	mov    eax,0x4
c001700d:	e9 06 01 00 00       	jmp    c0017118 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c0017012:	66 90                	xchg   ax,ax
c0017014:	83 ec 08             	sub    esp,0x8
c0017017:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001701e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017022:	50                   	push   eax
c0017023:	e8 3c 95 fe ff       	call   c0000564 <strcpy>
c0017028:	83 c4 10             	add    esp,0x10
c001702b:	83 ec 08             	sub    esp,0x8
c001702e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017032:	50                   	push   eax
c0017033:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001703a:	e8 71 ff ff ff       	call   c0016fb0 <FAT::fixFilepath(char*)>
c001703f:	83 c4 10             	add    esp,0x10
c0017042:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001704a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017051:	83 e0 01             	and    eax,0x1
c0017054:	74 0a                	je     c0017060 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0017056:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001705e:	66 90                	xchg   ax,ax
c0017060:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017067:	83 e0 04             	and    eax,0x4
c001706a:	74 10                	je     c001707c <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001706c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0017074:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001707c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017083:	83 e0 02             	and    eax,0x2
c0017086:	74 08                	je     c0017090 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0017088:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017090:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017097:	83 e0 08             	and    eax,0x8
c001709a:	74 08                	je     c00170a4 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001709c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00170a4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00170ab:	83 e0 10             	and    eax,0x10
c00170ae:	74 08                	je     c00170b8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00170b0:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00170b8:	83 ec 0c             	sub    esp,0xc
c00170bb:	68 2c 02 00 00       	push   0x22c
c00170c0:	e8 84 f8 fe ff       	call   c0006949 <malloc>
c00170c5:	83 c4 10             	add    esp,0x10
c00170c8:	89 c2                	mov    edx,eax
c00170ca:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00170d1:	89 10                	mov    DWORD PTR [eax],edx
c00170d3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00170db:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00170e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00170e4:	83 ec 04             	sub    esp,0x4
c00170e7:	52                   	push   edx
c00170e8:	8d 54 24 10          	lea    edx,[esp+0x10]
c00170ec:	52                   	push   edx
c00170ed:	50                   	push   eax
c00170ee:	e8 9c c4 fe ff       	call   c000358f <f_open>
c00170f3:	83 c4 10             	add    esp,0x10
c00170f6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00170fd:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0017105:	74 09                	je     c0017110 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c0017107:	b8 01 00 00 00       	mov    eax,0x1
c001710c:	eb 0a                	jmp    c0017118 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001710e:	66 90                	xchg   ax,ax
c0017110:	b8 00 00 00 00       	mov    eax,0x0
c0017115:	8d 76 00             	lea    esi,[esi+0x0]
c0017118:	81 c4 1c 01 00 00    	add    esp,0x11c
c001711e:	c3                   	ret    
c001711f:	90                   	nop

c0017120 <FAT::openDir(char const*, void**)>:
c0017120:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017126:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001712e:	74 0c                	je     c001713c <FAT::openDir(char const*, void**)+0x1c>
c0017130:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017138:	75 0e                	jne    c0017148 <FAT::openDir(char const*, void**)+0x28>
c001713a:	66 90                	xchg   ax,ax
c001713c:	b8 04 00 00 00       	mov    eax,0x4
c0017141:	e9 82 00 00 00       	jmp    c00171c8 <FAT::openDir(char const*, void**)+0xa8>
c0017146:	66 90                	xchg   ax,ax
c0017148:	83 ec 08             	sub    esp,0x8
c001714b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017152:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017156:	50                   	push   eax
c0017157:	e8 08 94 fe ff       	call   c0000564 <strcpy>
c001715c:	83 c4 10             	add    esp,0x10
c001715f:	83 ec 08             	sub    esp,0x8
c0017162:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017166:	50                   	push   eax
c0017167:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001716e:	e8 3d fe ff ff       	call   c0016fb0 <FAT::fixFilepath(char*)>
c0017173:	83 c4 10             	add    esp,0x10
c0017176:	83 ec 0c             	sub    esp,0xc
c0017179:	6a 30                	push   0x30
c001717b:	e8 c9 f7 fe ff       	call   c0006949 <malloc>
c0017180:	83 c4 10             	add    esp,0x10
c0017183:	89 c2                	mov    edx,eax
c0017185:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001718c:	89 10                	mov    DWORD PTR [eax],edx
c001718e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017195:	8b 00                	mov    eax,DWORD PTR [eax]
c0017197:	83 ec 08             	sub    esp,0x8
c001719a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001719e:	52                   	push   edx
c001719f:	50                   	push   eax
c00171a0:	e8 c2 ce fe ff       	call   c0004067 <f_opendir>
c00171a5:	83 c4 10             	add    esp,0x10
c00171a8:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00171af:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00171b7:	74 07                	je     c00171c0 <FAT::openDir(char const*, void**)+0xa0>
c00171b9:	b8 01 00 00 00       	mov    eax,0x1
c00171be:	eb 08                	jmp    c00171c8 <FAT::openDir(char const*, void**)+0xa8>
c00171c0:	b8 00 00 00 00       	mov    eax,0x0
c00171c5:	8d 76 00             	lea    esi,[esi+0x0]
c00171c8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00171ce:	c3                   	ret    
c00171cf:	90                   	nop

c00171d0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00171d0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00171d6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00171de:	75 0c                	jne    c00171ec <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00171e0:	b8 04 00 00 00       	mov    eax,0x4
c00171e5:	e9 d6 00 00 00       	jmp    c00172c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00171ea:	66 90                	xchg   ax,ax
c00171ec:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00171f4:	75 0a                	jne    c0017200 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00171f6:	b8 04 00 00 00       	mov    eax,0x4
c00171fb:	e9 c0 00 00 00       	jmp    c00172c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017200:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0017208:	75 0a                	jne    c0017214 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001720a:	b8 04 00 00 00       	mov    eax,0x4
c001720f:	e9 ac 00 00 00       	jmp    c00172c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017214:	83 ec 08             	sub    esp,0x8
c0017217:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001721e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017225:	50                   	push   eax
c0017226:	e8 39 93 fe ff       	call   c0000564 <strcpy>
c001722b:	83 c4 10             	add    esp,0x10
c001722e:	83 ec 08             	sub    esp,0x8
c0017231:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017238:	50                   	push   eax
c0017239:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017240:	e8 6b fd ff ff       	call   c0016fb0 <FAT::fixFilepath(char*)>
c0017245:	83 c4 10             	add    esp,0x10
c0017248:	83 ec 08             	sub    esp,0x8
c001724b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001724f:	50                   	push   eax
c0017250:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017257:	50                   	push   eax
c0017258:	e8 46 cf fe ff       	call   c00041a3 <f_stat>
c001725d:	83 c4 10             	add    esp,0x10
c0017260:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017267:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001726e:	85 c0                	test   eax,eax
c0017270:	74 0a                	je     c001727c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0017272:	83 f8 04             	cmp    eax,0x4
c0017275:	74 39                	je     c00172b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0017277:	eb 3f                	jmp    c00172b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0017279:	8d 76 00             	lea    esi,[esi+0x0]
c001727c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017280:	0f b6 c0             	movzx  eax,al
c0017283:	83 e0 10             	and    eax,0x10
c0017286:	0f 95 c2             	setne  dl
c0017289:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0017290:	88 10                	mov    BYTE PTR [eax],dl
c0017292:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017296:	ba 00 00 00 00       	mov    edx,0x0
c001729b:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00172a2:	89 01                	mov    DWORD PTR [ecx],eax
c00172a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00172a7:	b8 00 00 00 00       	mov    eax,0x0
c00172ac:	eb 12                	jmp    c00172c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00172ae:	66 90                	xchg   ax,ax
c00172b0:	b8 02 00 00 00       	mov    eax,0x2
c00172b5:	eb 09                	jmp    c00172c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00172b7:	90                   	nop
c00172b8:	b8 01 00 00 00       	mov    eax,0x1
c00172bd:	8d 76 00             	lea    esi,[esi+0x0]
c00172c0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00172c6:	c3                   	ret    
c00172c7:	90                   	nop

c00172c8 <FAT::unlink(char const*)>:
c00172c8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00172ce:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00172d6:	75 08                	jne    c00172e0 <FAT::unlink(char const*)+0x18>
c00172d8:	b8 04 00 00 00       	mov    eax,0x4
c00172dd:	eb 61                	jmp    c0017340 <FAT::unlink(char const*)+0x78>
c00172df:	90                   	nop
c00172e0:	83 ec 08             	sub    esp,0x8
c00172e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172ea:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172ee:	50                   	push   eax
c00172ef:	e8 70 92 fe ff       	call   c0000564 <strcpy>
c00172f4:	83 c4 10             	add    esp,0x10
c00172f7:	83 ec 08             	sub    esp,0x8
c00172fa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172fe:	50                   	push   eax
c00172ff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017306:	e8 a5 fc ff ff       	call   c0016fb0 <FAT::fixFilepath(char*)>
c001730b:	83 c4 10             	add    esp,0x10
c001730e:	83 ec 0c             	sub    esp,0xc
c0017311:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017315:	50                   	push   eax
c0017316:	e8 d7 d0 fe ff       	call   c00043f2 <f_unlink>
c001731b:	83 c4 10             	add    esp,0x10
c001731e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017325:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001732c:	85 c0                	test   eax,eax
c001732e:	75 08                	jne    c0017338 <FAT::unlink(char const*)+0x70>
c0017330:	b8 00 00 00 00       	mov    eax,0x0
c0017335:	eb 09                	jmp    c0017340 <FAT::unlink(char const*)+0x78>
c0017337:	90                   	nop
c0017338:	b8 01 00 00 00       	mov    eax,0x1
c001733d:	8d 76 00             	lea    esi,[esi+0x0]
c0017340:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017346:	c3                   	ret    
c0017347:	90                   	nop

c0017348 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0017348:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001734e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0017355:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001735c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017360:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017364:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001736c:	75 0a                	jne    c0017378 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001736e:	b8 04 00 00 00       	mov    eax,0x4
c0017373:	e9 30 01 00 00       	jmp    c00174a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c0017378:	83 ec 08             	sub    esp,0x8
c001737b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017382:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017386:	50                   	push   eax
c0017387:	e8 d8 91 fe ff       	call   c0000564 <strcpy>
c001738c:	83 c4 10             	add    esp,0x10
c001738f:	83 ec 08             	sub    esp,0x8
c0017392:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017396:	50                   	push   eax
c0017397:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001739e:	e8 0d fc ff ff       	call   c0016fb0 <FAT::fixFilepath(char*)>
c00173a3:	83 c4 10             	add    esp,0x10
c00173a6:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00173ae:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00173b6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00173bb:	83 e0 01             	and    eax,0x1
c00173be:	74 08                	je     c00173c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00173c0:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00173c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00173cd:	83 e0 02             	and    eax,0x2
c00173d0:	74 0a                	je     c00173dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c00173d2:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00173da:	66 90                	xchg   ax,ax
c00173dc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00173e1:	83 e0 04             	and    eax,0x4
c00173e4:	74 0a                	je     c00173f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c00173e6:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00173ee:	66 90                	xchg   ax,ax
c00173f0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00173f5:	83 e0 08             	and    eax,0x8
c00173f8:	74 0a                	je     c0017404 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c00173fa:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0017402:	66 90                	xchg   ax,ax
c0017404:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017409:	83 e0 01             	and    eax,0x1
c001740c:	74 0a                	je     c0017418 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001740e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0017416:	66 90                	xchg   ax,ax
c0017418:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001741d:	83 e0 02             	and    eax,0x2
c0017420:	74 0a                	je     c001742c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0017422:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001742a:	66 90                	xchg   ax,ax
c001742c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017431:	83 e0 04             	and    eax,0x4
c0017434:	74 0a                	je     c0017440 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c0017436:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001743e:	66 90                	xchg   ax,ax
c0017440:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017445:	83 e0 08             	and    eax,0x8
c0017448:	74 0a                	je     c0017454 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001744a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0017452:	66 90                	xchg   ax,ax
c0017454:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001745b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0017462:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001746a:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0017472:	83 ec 04             	sub    esp,0x4
c0017475:	52                   	push   edx
c0017476:	50                   	push   eax
c0017477:	8d 44 24 24          	lea    eax,[esp+0x24]
c001747b:	50                   	push   eax
c001747c:	e8 58 d3 fe ff       	call   c00047d9 <f_chmod>
c0017481:	83 c4 10             	add    esp,0x10
c0017484:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001748b:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0017492:	85 c0                	test   eax,eax
c0017494:	75 0a                	jne    c00174a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c0017496:	b8 00 00 00 00       	mov    eax,0x0
c001749b:	eb 0b                	jmp    c00174a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001749d:	8d 76 00             	lea    esi,[esi+0x0]
c00174a0:	b8 01 00 00 00       	mov    eax,0x1
c00174a5:	8d 76 00             	lea    esi,[esi+0x0]
c00174a8:	81 c4 2c 01 00 00    	add    esp,0x12c
c00174ae:	c3                   	ret    
c00174af:	90                   	nop

c00174b0 <FAT::rename(char const*, char const*)>:
c00174b0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00174b6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00174be:	74 0c                	je     c00174cc <FAT::rename(char const*, char const*)+0x1c>
c00174c0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00174c8:	75 0e                	jne    c00174d8 <FAT::rename(char const*, char const*)+0x28>
c00174ca:	66 90                	xchg   ax,ax
c00174cc:	b8 04 00 00 00       	mov    eax,0x4
c00174d1:	e9 9e 00 00 00       	jmp    c0017574 <FAT::rename(char const*, char const*)+0xc4>
c00174d6:	66 90                	xchg   ax,ax
c00174d8:	83 ec 08             	sub    esp,0x8
c00174db:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00174e2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00174e9:	50                   	push   eax
c00174ea:	e8 75 90 fe ff       	call   c0000564 <strcpy>
c00174ef:	83 c4 10             	add    esp,0x10
c00174f2:	83 ec 08             	sub    esp,0x8
c00174f5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00174fc:	50                   	push   eax
c00174fd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017504:	e8 a7 fa ff ff       	call   c0016fb0 <FAT::fixFilepath(char*)>
c0017509:	83 c4 10             	add    esp,0x10
c001750c:	83 ec 08             	sub    esp,0x8
c001750f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0017516:	8d 44 24 18          	lea    eax,[esp+0x18]
c001751a:	50                   	push   eax
c001751b:	e8 44 90 fe ff       	call   c0000564 <strcpy>
c0017520:	83 c4 10             	add    esp,0x10
c0017523:	83 ec 08             	sub    esp,0x8
c0017526:	8d 44 24 14          	lea    eax,[esp+0x14]
c001752a:	50                   	push   eax
c001752b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017532:	e8 79 fa ff ff       	call   c0016fb0 <FAT::fixFilepath(char*)>
c0017537:	83 c4 10             	add    esp,0x10
c001753a:	83 ec 08             	sub    esp,0x8
c001753d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017541:	50                   	push   eax
c0017542:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017549:	50                   	push   eax
c001754a:	e8 0c d1 fe ff       	call   c000465b <f_rename>
c001754f:	83 c4 10             	add    esp,0x10
c0017552:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0017559:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0017560:	85 c0                	test   eax,eax
c0017562:	75 08                	jne    c001756c <FAT::rename(char const*, char const*)+0xbc>
c0017564:	b8 00 00 00 00       	mov    eax,0x0
c0017569:	eb 09                	jmp    c0017574 <FAT::rename(char const*, char const*)+0xc4>
c001756b:	90                   	nop
c001756c:	b8 01 00 00 00       	mov    eax,0x1
c0017571:	8d 76 00             	lea    esi,[esi+0x0]
c0017574:	81 c4 1c 02 00 00    	add    esp,0x21c
c001757a:	c3                   	ret    
c001757b:	90                   	nop

c001757c <FAT::mkdir(char const*)>:
c001757c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017582:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001758a:	75 08                	jne    c0017594 <FAT::mkdir(char const*)+0x18>
c001758c:	b8 04 00 00 00       	mov    eax,0x4
c0017591:	eb 61                	jmp    c00175f4 <FAT::mkdir(char const*)+0x78>
c0017593:	90                   	nop
c0017594:	83 ec 08             	sub    esp,0x8
c0017597:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001759e:	8d 44 24 18          	lea    eax,[esp+0x18]
c00175a2:	50                   	push   eax
c00175a3:	e8 bc 8f fe ff       	call   c0000564 <strcpy>
c00175a8:	83 c4 10             	add    esp,0x10
c00175ab:	83 ec 08             	sub    esp,0x8
c00175ae:	8d 44 24 14          	lea    eax,[esp+0x14]
c00175b2:	50                   	push   eax
c00175b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00175ba:	e8 f1 f9 ff ff       	call   c0016fb0 <FAT::fixFilepath(char*)>
c00175bf:	83 c4 10             	add    esp,0x10
c00175c2:	83 ec 0c             	sub    esp,0xc
c00175c5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00175c9:	50                   	push   eax
c00175ca:	e8 10 cf fe ff       	call   c00044df <f_mkdir>
c00175cf:	83 c4 10             	add    esp,0x10
c00175d2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00175d9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00175e0:	85 c0                	test   eax,eax
c00175e2:	75 08                	jne    c00175ec <FAT::mkdir(char const*)+0x70>
c00175e4:	b8 00 00 00 00       	mov    eax,0x0
c00175e9:	eb 09                	jmp    c00175f4 <FAT::mkdir(char const*)+0x78>
c00175eb:	90                   	nop
c00175ec:	b8 01 00 00 00       	mov    eax,0x1
c00175f1:	8d 76 00             	lea    esi,[esi+0x0]
c00175f4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00175fa:	c3                   	ret    
c00175fb:	90                   	nop

c00175fc <FAT::exists(char const*)>:
c00175fc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0017602:	83 ec 08             	sub    esp,0x8
c0017605:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001760c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017610:	50                   	push   eax
c0017611:	e8 4e 8f fe ff       	call   c0000564 <strcpy>
c0017616:	83 c4 10             	add    esp,0x10
c0017619:	83 ec 08             	sub    esp,0x8
c001761c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017620:	50                   	push   eax
c0017621:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017628:	e8 83 f9 ff ff       	call   c0016fb0 <FAT::fixFilepath(char*)>
c001762d:	83 c4 10             	add    esp,0x10
c0017630:	83 ec 08             	sub    esp,0x8
c0017633:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001763a:	50                   	push   eax
c001763b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001763f:	50                   	push   eax
c0017640:	e8 5e cb fe ff       	call   c00041a3 <f_stat>
c0017645:	83 c4 10             	add    esp,0x10
c0017648:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001764f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017656:	85 c0                	test   eax,eax
c0017658:	75 06                	jne    c0017660 <FAT::exists(char const*)+0x64>
c001765a:	b0 01                	mov    al,0x1
c001765c:	eb 06                	jmp    c0017664 <FAT::exists(char const*)+0x68>
c001765e:	66 90                	xchg   ax,ax
c0017660:	b0 00                	mov    al,0x0
c0017662:	66 90                	xchg   ax,ax
c0017664:	81 c4 2c 02 00 00    	add    esp,0x22c
c001766a:	c3                   	ret    
c001766b:	90                   	nop

c001766c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001766c:	b8 08 00 00 00       	mov    eax,0x8
c0017671:	c3                   	ret    

c0017672 <ISO9660::seek(void*, unsigned long long)>:
c0017672:	53                   	push   ebx
c0017673:	b8 04 00 00 00       	mov    eax,0x4
c0017678:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001767c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017680:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017684:	85 d2                	test   edx,edx
c0017686:	74 17                	je     c001769f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0017688:	89 c8                	mov    eax,ecx
c001768a:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001768d:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0017690:	b8 01 00 00 00       	mov    eax,0x1
c0017695:	73 08                	jae    c001769f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0017697:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001769a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001769d:	31 c0                	xor    eax,eax
c001769f:	5b                   	pop    ebx
c00176a0:	c3                   	ret    
c00176a1:	90                   	nop

c00176a2 <ISO9660::tell(void*, unsigned long long*)>:
c00176a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00176a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176aa:	85 d2                	test   edx,edx
c00176ac:	74 12                	je     c00176c0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00176ae:	85 c0                	test   eax,eax
c00176b0:	74 0e                	je     c00176c0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00176b2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00176b5:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00176b8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00176bb:	89 10                	mov    DWORD PTR [eax],edx
c00176bd:	31 c0                	xor    eax,eax
c00176bf:	c3                   	ret    
c00176c0:	b8 04 00 00 00       	mov    eax,0x4
c00176c5:	c3                   	ret    

c00176c6 <ISO9660::getName()>:
c00176c6:	b8 60 f4 01 c0       	mov    eax,0xc001f460
c00176cb:	c3                   	ret    

c00176cc <ISO9660::stat(void*, unsigned long long*)>:
c00176cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00176d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176d4:	85 d2                	test   edx,edx
c00176d6:	74 12                	je     c00176ea <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00176d8:	85 c0                	test   eax,eax
c00176da:	74 0e                	je     c00176ea <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00176dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00176df:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00176e2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00176e5:	89 10                	mov    DWORD PTR [eax],edx
c00176e7:	31 c0                	xor    eax,eax
c00176e9:	c3                   	ret    
c00176ea:	b8 04 00 00 00       	mov    eax,0x4
c00176ef:	c3                   	ret    

c00176f0 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00176f0:	b8 01 00 00 00       	mov    eax,0x1
c00176f5:	c3                   	ret    

c00176f6 <ISO9660::unlink(char const*)>:
c00176f6:	b8 01 00 00 00       	mov    eax,0x1
c00176fb:	c3                   	ret    

c00176fc <ISO9660::write(void*, unsigned long, void*, int*)>:
c00176fc:	b8 01 00 00 00       	mov    eax,0x1
c0017701:	c3                   	ret    

c0017702 <ISO9660::rename(char const*, char const*)>:
c0017702:	b8 01 00 00 00       	mov    eax,0x1
c0017707:	c3                   	ret    

c0017708 <ISO9660::mkdir(char const*)>:
c0017708:	b8 01 00 00 00       	mov    eax,0x1
c001770d:	c3                   	ret    

c001770e <ISO9660::close(void*)>:
c001770e:	83 ec 0c             	sub    esp,0xc
c0017711:	b8 04 00 00 00       	mov    eax,0x4
c0017716:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001771a:	85 d2                	test   edx,edx
c001771c:	74 0e                	je     c001772c <ISO9660::close(void*)+0x1e>
c001771e:	83 ec 0c             	sub    esp,0xc
c0017721:	52                   	push   edx
c0017722:	e8 32 f2 fe ff       	call   c0006959 <free>
c0017727:	83 c4 10             	add    esp,0x10
c001772a:	31 c0                	xor    eax,eax
c001772c:	83 c4 0c             	add    esp,0xc
c001772f:	c3                   	ret    

c0017730 <ISO9660::closeDir(void*)>:
c0017730:	83 ec 0c             	sub    esp,0xc
c0017733:	b8 04 00 00 00       	mov    eax,0x4
c0017738:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001773c:	85 d2                	test   edx,edx
c001773e:	74 0e                	je     c001774e <ISO9660::closeDir(void*)+0x1e>
c0017740:	83 ec 0c             	sub    esp,0xc
c0017743:	52                   	push   edx
c0017744:	e8 10 f2 fe ff       	call   c0006959 <free>
c0017749:	83 c4 10             	add    esp,0x10
c001774c:	31 c0                	xor    eax,eax
c001774e:	83 c4 0c             	add    esp,0xc
c0017751:	c3                   	ret    

c0017752 <ISO9660::~ISO9660()>:
c0017752:	83 ec 0c             	sub    esp,0xc
c0017755:	ba 84 f4 01 c0       	mov    edx,0xc001f484
c001775a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001775e:	89 10                	mov    DWORD PTR [eax],edx
c0017760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017764:	83 ec 0c             	sub    esp,0xc
c0017767:	50                   	push   eax
c0017768:	e8 a1 22 ff ff       	call   c0009a0e <Filesystem::~Filesystem()>
c001776d:	83 c4 10             	add    esp,0x10
c0017770:	90                   	nop
c0017771:	83 c4 0c             	add    esp,0xc
c0017774:	c3                   	ret    
c0017775:	90                   	nop

c0017776 <ISO9660::~ISO9660()>:
c0017776:	83 ec 0c             	sub    esp,0xc
c0017779:	83 ec 0c             	sub    esp,0xc
c001777c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017780:	e8 cd ff ff ff       	call   c0017752 <ISO9660::~ISO9660()>
c0017785:	83 c4 10             	add    esp,0x10
c0017788:	83 ec 08             	sub    esp,0x8
c001778b:	6a 08                	push   0x8
c001778d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017791:	e8 5c 1e ff ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c0017796:	83 c4 10             	add    esp,0x10
c0017799:	83 c4 0c             	add    esp,0xc
c001779c:	c3                   	ret    

c001779d <__memmem(unsigned char*, int, unsigned char*, int)>:
c001779d:	55                   	push   ebp
c001779e:	31 c9                	xor    ecx,ecx
c00177a0:	57                   	push   edi
c00177a1:	56                   	push   esi
c00177a2:	53                   	push   ebx
c00177a3:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00177a7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00177ab:	89 eb                	mov    ebx,ebp
c00177ad:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00177b1:	39 ce                	cmp    esi,ecx
c00177b3:	7e 17                	jle    c00177cc <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00177b5:	31 d2                	xor    edx,edx
c00177b7:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00177bb:	7d 13                	jge    c00177d0 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00177bd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00177c1:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00177c4:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00177c7:	75 0d                	jne    c00177d6 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00177c9:	42                   	inc    edx
c00177ca:	eb eb                	jmp    c00177b7 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00177cc:	31 c0                	xor    eax,eax
c00177ce:	eb 0a                	jmp    c00177da <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00177d0:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00177d4:	eb 04                	jmp    c00177da <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00177d6:	41                   	inc    ecx
c00177d7:	43                   	inc    ebx
c00177d8:	eb d7                	jmp    c00177b1 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00177da:	5b                   	pop    ebx
c00177db:	5e                   	pop    esi
c00177dc:	5f                   	pop    edi
c00177dd:	5d                   	pop    ebp
c00177de:	c3                   	ret    

c00177df <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00177df:	57                   	push   edi
c00177e0:	56                   	push   esi
c00177e1:	53                   	push   ebx
c00177e2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00177e6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00177ea:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00177ee:	39 35 60 3a 02 c0    	cmp    DWORD PTR ds:0xc0023a60,esi
c00177f4:	75 08                	jne    c00177fe <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00177f6:	38 1d 94 fd 01 c0    	cmp    BYTE PTR ds:0xc001fd94,bl
c00177fc:	74 4a                	je     c0017848 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c00177fe:	83 ec 0c             	sub    esp,0xc
c0017801:	31 d2                	xor    edx,edx
c0017803:	68 80 3a 02 c0       	push   0xc0023a80
c0017808:	0f be c3             	movsx  eax,bl
c001780b:	6a 01                	push   0x1
c001780d:	52                   	push   edx
c001780e:	56                   	push   esi
c001780f:	ff 34 85 dc 27 02 c0 	push   DWORD PTR [eax*4-0x3ffdd824]
c0017816:	e8 5b 45 ff ff       	call   c000bd76 <LogicalDisk::read(unsigned long long, int, void*)>
c001781b:	83 c4 20             	add    esp,0x20
c001781e:	85 c0                	test   eax,eax
c0017820:	75 0e                	jne    c0017830 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017822:	89 35 60 3a 02 c0    	mov    DWORD PTR ds:0xc0023a60,esi
c0017828:	88 1d 94 fd 01 c0    	mov    BYTE PTR ds:0xc001fd94,bl
c001782e:	eb 18                	jmp    c0017848 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017830:	50                   	push   eax
c0017831:	68 00 08 00 00       	push   0x800
c0017836:	6a 00                	push   0x0
c0017838:	57                   	push   edi
c0017839:	e8 6a 8c fe ff       	call   c00004a8 <memset>
c001783e:	83 c4 10             	add    esp,0x10
c0017841:	b8 01 00 00 00       	mov    eax,0x1
c0017846:	eb 0e                	jmp    c0017856 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017848:	be 80 3a 02 c0       	mov    esi,0xc0023a80
c001784d:	b9 00 08 00 00       	mov    ecx,0x800
c0017852:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017854:	31 c0                	xor    eax,eax
c0017856:	5b                   	pop    ebx
c0017857:	5e                   	pop    esi
c0017858:	5f                   	pop    edi
c0017859:	c3                   	ret    

c001785a <ISO9660::tryMount(LogicalDisk*, int)>:
c001785a:	81 ec 10 08 00 00    	sub    esp,0x810
c0017860:	c7 05 60 3a 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0023a60,0xdeadbeef
c001786a:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017871:	83 c0 41             	add    eax,0x41
c0017874:	0f be c0             	movsx  eax,al
c0017877:	50                   	push   eax
c0017878:	8d 44 24 08          	lea    eax,[esp+0x8]
c001787c:	50                   	push   eax
c001787d:	6a 10                	push   0x10
c001787f:	e8 5b ff ff ff       	call   c00177df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017884:	83 c4 10             	add    esp,0x10
c0017887:	31 d2                	xor    edx,edx
c0017889:	85 c0                	test   eax,eax
c001788b:	75 24                	jne    c00178b1 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001788d:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017892:	75 1d                	jne    c00178b1 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0017894:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017899:	75 16                	jne    c00178b1 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001789b:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00178a0:	75 0f                	jne    c00178b1 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c00178a2:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00178a7:	75 08                	jne    c00178b1 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c00178a9:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00178ae:	0f 94 c2             	sete   dl
c00178b1:	88 d0                	mov    al,dl
c00178b3:	81 c4 0c 08 00 00    	add    esp,0x80c
c00178b9:	c3                   	ret    

c00178ba <ISO9660::read(void*, unsigned long, void*, int*)>:
c00178ba:	55                   	push   ebp
c00178bb:	57                   	push   edi
c00178bc:	56                   	push   esi
c00178bd:	53                   	push   ebx
c00178be:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00178c4:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00178cb:	85 ed                	test   ebp,ebp
c00178cd:	0f 84 da 01 00 00    	je     c0017aad <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00178d3:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00178db:	0f 84 cc 01 00 00    	je     c0017aad <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00178e1:	b8 01 00 00 00       	mov    eax,0x1
c00178e6:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00178ea:	0f 85 c2 01 00 00    	jne    c0017ab2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00178f0:	31 d2                	xor    edx,edx
c00178f2:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00178f9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00178fc:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00178ff:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017902:	89 04 24             	mov    DWORD PTR [esp],eax
c0017905:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0017909:	01 c8                	add    eax,ecx
c001790b:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001790e:	11 da                	adc    edx,ebx
c0017910:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0017914:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0017918:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001791c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0017920:	19 d7                	sbb    edi,edx
c0017922:	72 11                	jb     c0017935 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0017924:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0017927:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001792b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001792f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017933:	eb 0c                	jmp    c0017941 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0017935:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0017939:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001793d:	29 ce                	sub    esi,ecx
c001793f:	19 df                	sbb    edi,ebx
c0017941:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017944:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0017947:	0f a4 c2 0b          	shld   edx,eax,0xb
c001794b:	c1 e0 0b             	shl    eax,0xb
c001794e:	01 c8                	add    eax,ecx
c0017950:	11 da                	adc    edx,ebx
c0017952:	89 04 24             	mov    DWORD PTR [esp],eax
c0017955:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0017959:	51                   	push   ecx
c001795a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001795e:	50                   	push   eax
c001795f:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0017963:	53                   	push   ebx
c0017964:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017968:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001796c:	0f ac d0 0b          	shrd   eax,edx,0xb
c0017970:	50                   	push   eax
c0017971:	e8 69 fe ff ff       	call   c00177df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017976:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0017979:	b8 00 08 00 00       	mov    eax,0x800
c001797e:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0017984:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0017988:	29 d0                	sub    eax,edx
c001798a:	83 c4 10             	add    esp,0x10
c001798d:	89 f9                	mov    ecx,edi
c001798f:	39 c6                	cmp    esi,eax
c0017991:	83 d9 00             	sbb    ecx,0x0
c0017994:	7d 1b                	jge    c00179b1 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0017996:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001799b:	75 12                	jne    c00179af <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001799d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00179a4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00179aa:	e9 fa 00 00 00       	jmp    c0017aa9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00179af:	89 f0                	mov    eax,esi
c00179b1:	01 d3                	add    ebx,edx
c00179b3:	31 d2                	xor    edx,edx
c00179b5:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00179b9:	39 c2                	cmp    edx,eax
c00179bb:	7d 14                	jge    c00179d1 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c00179bd:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00179c4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00179c8:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00179cb:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00179ce:	42                   	inc    edx
c00179cf:	eb e8                	jmp    c00179b9 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c00179d1:	89 c2                	mov    edx,eax
c00179d3:	85 c0                	test   eax,eax
c00179d5:	79 02                	jns    c00179d9 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c00179d7:	31 d2                	xor    edx,edx
c00179d9:	01 c2                	add    edx,eax
c00179db:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00179de:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c00179e5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00179e9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00179ed:	99                   	cdq    
c00179ee:	01 c1                	add    ecx,eax
c00179f0:	11 d3                	adc    ebx,edx
c00179f2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00179f6:	29 c6                	sub    esi,eax
c00179f8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00179fc:	19 d7                	sbb    edi,edx
c00179fe:	89 34 24             	mov    DWORD PTR [esp],esi
c0017a01:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0017a05:	b8 ff 07 00 00       	mov    eax,0x7ff
c0017a0a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0017a0d:	b8 00 00 00 00       	mov    eax,0x0
c0017a12:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0017a16:	7d 43                	jge    c0017a5b <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0017a18:	52                   	push   edx
c0017a19:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0017a1d:	50                   	push   eax
c0017a1e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017a22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a26:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a2a:	0f ac d0 0b          	shrd   eax,edx,0xb
c0017a2e:	50                   	push   eax
c0017a2f:	e8 ab fd ff ff       	call   c00177df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017a34:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0017a3c:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0017a41:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0017a49:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0017a51:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0017a56:	83 c4 10             	add    esp,0x10
c0017a59:	eb aa                	jmp    c0017a05 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0017a5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a5f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0017a62:	74 2a                	je     c0017a8e <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0017a64:	50                   	push   eax
c0017a65:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0017a69:	50                   	push   eax
c0017a6a:	8d 74 24 28          	lea    esi,[esp+0x28]
c0017a6e:	56                   	push   esi
c0017a6f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017a73:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017a77:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0017a7b:	51                   	push   ecx
c0017a7c:	e8 5e fd ff ff       	call   c00177df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017a81:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0017a85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017a89:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017a8b:	83 c4 10             	add    esp,0x10
c0017a8e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0017a95:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017a99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a9d:	89 18                	mov    DWORD PTR [eax],ebx
c0017a9f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017aa3:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0017aa6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0017aa9:	31 c0                	xor    eax,eax
c0017aab:	eb 05                	jmp    c0017ab2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0017aad:	b8 04 00 00 00       	mov    eax,0x4
c0017ab2:	81 c4 2c 08 00 00    	add    esp,0x82c
c0017ab8:	5b                   	pop    ebx
c0017ab9:	5e                   	pop    esi
c0017aba:	5f                   	pop    edi
c0017abb:	5d                   	pop    ebp
c0017abc:	c3                   	ret    
c0017abd:	90                   	nop

c0017abe <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017abe:	55                   	push   ebp
c0017abf:	57                   	push   edi
c0017ac0:	56                   	push   esi
c0017ac1:	53                   	push   ebx
c0017ac2:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0017ac8:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0017acf:	85 ed                	test   ebp,ebp
c0017ad1:	0f 84 51 02 00 00    	je     c0017d28 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0017ad7:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0017adf:	0f 84 43 02 00 00    	je     c0017d28 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0017ae5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017ae8:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0017aeb:	75 0a                	jne    c0017af7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0017aed:	b8 07 00 00 00       	mov    eax,0x7
c0017af2:	e9 36 02 00 00       	jmp    c0017d2d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0017af7:	50                   	push   eax
c0017af8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0017afc:	50                   	push   eax
c0017afd:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0017b04:	53                   	push   ebx
c0017b05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017b08:	c1 e0 0b             	shl    eax,0xb
c0017b0b:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0017b0e:	c1 e8 0b             	shr    eax,0xb
c0017b11:	50                   	push   eax
c0017b12:	e8 c8 fc ff ff       	call   c00177df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017b17:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017b1a:	83 c4 10             	add    esp,0x10
c0017b1d:	89 c1                	mov    ecx,eax
c0017b1f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0017b22:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0017b28:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0017b2b:	84 db                	test   bl,bl
c0017b2d:	0f 85 8b 00 00 00    	jne    c0017bbe <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0017b33:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0017b39:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0017b3c:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0017b42:	29 c6                	sub    esi,eax
c0017b44:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0017b48:	89 f3                	mov    ebx,esi
c0017b4a:	89 f1                	mov    ecx,esi
c0017b4c:	c1 fb 1f             	sar    ebx,0x1f
c0017b4f:	01 f0                	add    eax,esi
c0017b51:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0017b54:	11 da                	adc    edx,ebx
c0017b56:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b59:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0017b5d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0017b60:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0017b63:	89 d8                	mov    eax,ebx
c0017b65:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0017b69:	ba 00 00 00 00       	mov    edx,0x0
c0017b6e:	19 f8                	sbb    eax,edi
c0017b70:	b8 00 00 00 00       	mov    eax,0x0
c0017b75:	73 08                	jae    c0017b7f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0017b77:	89 f0                	mov    eax,esi
c0017b79:	89 fa                	mov    edx,edi
c0017b7b:	29 c8                	sub    eax,ecx
c0017b7d:	19 da                	sbb    edx,ebx
c0017b7f:	89 d7                	mov    edi,edx
c0017b81:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0017b84:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0017b87:	09 c7                	or     edi,eax
c0017b89:	0f 84 5e ff ff ff    	je     c0017aed <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0017b8f:	57                   	push   edi
c0017b90:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0017b94:	50                   	push   eax
c0017b95:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0017b9c:	53                   	push   ebx
c0017b9d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017ba0:	c1 e0 0b             	shl    eax,0xb
c0017ba3:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017ba7:	c1 e8 0b             	shr    eax,0xb
c0017baa:	50                   	push   eax
c0017bab:	e8 2f fc ff ff       	call   c00177df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017bb0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017bb3:	83 c4 10             	add    esp,0x10
c0017bb6:	25 ff 07 00 00       	and    eax,0x7ff
c0017bbb:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0017bbe:	31 ff                	xor    edi,edi
c0017bc0:	56                   	push   esi
c0017bc1:	6a 28                	push   0x28
c0017bc3:	6a 00                	push   0x0
c0017bc5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017bc9:	50                   	push   eax
c0017bca:	e8 d9 88 fe ff       	call   c00004a8 <memset>
c0017bcf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017bd2:	25 ff 07 00 00       	and    eax,0x7ff
c0017bd7:	89 c6                	mov    esi,eax
c0017bd9:	83 c6 21             	add    esi,0x21
c0017bdc:	83 d7 00             	adc    edi,0x0
c0017bdf:	83 c4 10             	add    esp,0x10
c0017be2:	31 c9                	xor    ecx,ecx
c0017be4:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0017beb:	83 f9 28             	cmp    ecx,0x28
c0017bee:	88 04 24             	mov    BYTE PTR [esp],al
c0017bf1:	0f 94 c2             	sete   dl
c0017bf4:	88 d0                	mov    al,dl
c0017bf6:	ba ff 07 00 00       	mov    edx,0x7ff
c0017bfb:	39 f2                	cmp    edx,esi
c0017bfd:	ba 00 00 00 00       	mov    edx,0x0
c0017c02:	19 fa                	sbb    edx,edi
c0017c04:	0f 92 c2             	setb   dl
c0017c07:	09 c2                	or     edx,eax
c0017c09:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0017c0d:	0f 94 c0             	sete   al
c0017c10:	08 d0                	or     al,dl
c0017c12:	75 16                	jne    c0017c2a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0017c14:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0017c18:	74 10                	je     c0017c2a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0017c1a:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017c1d:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0017c21:	41                   	inc    ecx
c0017c22:	83 c6 01             	add    esi,0x1
c0017c25:	83 d7 00             	adc    edi,0x0
c0017c28:	eb ba                	jmp    c0017be4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0017c2a:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0017c31:	83 ec 0c             	sub    esp,0xc
c0017c34:	8d 74 24 24          	lea    esi,[esp+0x24]
c0017c38:	56                   	push   esi
c0017c39:	e8 86 88 fe ff       	call   c00004c4 <strlen>
c0017c3e:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0017c45:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0017c49:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017c51:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017c54:	5a                   	pop    edx
c0017c55:	25 ff 07 00 00       	and    eax,0x7ff
c0017c5a:	59                   	pop    ecx
c0017c5b:	01 f8                	add    eax,edi
c0017c5d:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0017c63:	83 e0 02             	and    eax,0x2
c0017c66:	3c 01                	cmp    al,0x1
c0017c68:	19 c0                	sbb    eax,eax
c0017c6a:	83 c0 02             	add    eax,0x2
c0017c6d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0017c71:	56                   	push   esi
c0017c72:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017c76:	50                   	push   eax
c0017c77:	e8 e8 88 fe ff       	call   c0000564 <strcpy>
c0017c7c:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0017c80:	83 c4 10             	add    esp,0x10
c0017c83:	84 c0                	test   al,al
c0017c85:	75 21                	jne    c0017ca8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0017c87:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0017c8f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017c97:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0017c9f:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0017ca6:	eb 28                	jmp    c0017cd0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0017ca8:	fe c8                	dec    al
c0017caa:	75 24                	jne    c0017cd0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0017cac:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0017cb4:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017cbc:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0017cc4:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0017ccb:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0017cd0:	8d 74 24 40          	lea    esi,[esp+0x40]
c0017cd4:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0017cdb:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0017ce2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017ce4:	0f b6 f3             	movzx  esi,bl
c0017ce7:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0017cee:	31 db                	xor    ebx,ebx
c0017cf0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0017cf6:	89 df                	mov    edi,ebx
c0017cf8:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0017cfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017cfe:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0017d01:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017d04:	39 c6                	cmp    esi,eax
c0017d06:	19 d7                	sbb    edi,edx
c0017d08:	72 10                	jb     c0017d1a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0017d0a:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0017d11:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0017d18:	eb 0a                	jmp    c0017d24 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0017d1a:	29 f0                	sub    eax,esi
c0017d1c:	19 da                	sbb    edx,ebx
c0017d1e:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0017d21:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0017d24:	31 c0                	xor    eax,eax
c0017d26:	eb 05                	jmp    c0017d2d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0017d28:	b8 04 00 00 00       	mov    eax,0x4
c0017d2d:	81 c4 5c 09 00 00    	add    esp,0x95c
c0017d33:	5b                   	pop    ebx
c0017d34:	5e                   	pop    esi
c0017d35:	5f                   	pop    edi
c0017d36:	5d                   	pop    ebp
c0017d37:	c3                   	ret    

c0017d38 <readRoot(unsigned int*, unsigned int*, char)>:
c0017d38:	57                   	push   edi
c0017d39:	56                   	push   esi
c0017d3a:	81 ec 38 08 00 00    	sub    esp,0x838
c0017d40:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0017d48:	50                   	push   eax
c0017d49:	8d 44 24 38          	lea    eax,[esp+0x38]
c0017d4d:	50                   	push   eax
c0017d4e:	6a 10                	push   0x10
c0017d50:	e8 8a fa ff ff       	call   c00177df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017d55:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0017d5c:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0017d60:	b9 22 00 00 00       	mov    ecx,0x22
c0017d65:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017d67:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0017d6e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d72:	89 10                	mov    DWORD PTR [eax],edx
c0017d74:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0017d7b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d7f:	89 10                	mov    DWORD PTR [eax],edx
c0017d81:	81 c4 44 08 00 00    	add    esp,0x844
c0017d87:	b0 01                	mov    al,0x1
c0017d89:	5e                   	pop    esi
c0017d8a:	5f                   	pop    edi
c0017d8b:	c3                   	ret    

c0017d8c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0017d8c:	55                   	push   ebp
c0017d8d:	57                   	push   edi
c0017d8e:	56                   	push   esi
c0017d8f:	53                   	push   ebx
c0017d90:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017d96:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0017d9d:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0017da4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017da8:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0017dac:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0017db0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017db4:	75 03                	jne    c0017db9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0017db6:	83 c3 02             	add    ebx,0x2
c0017db9:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0017dbc:	75 03                	jne    c0017dc1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0017dbe:	43                   	inc    ebx
c0017dbf:	eb f8                	jmp    c0017db9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0017dc1:	52                   	push   edx
c0017dc2:	68 00 01 00 00       	push   0x100
c0017dc7:	6a 00                	push   0x0
c0017dc9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017dcd:	50                   	push   eax
c0017dce:	e8 d5 86 fe ff       	call   c00004a8 <memset>
c0017dd3:	83 c4 10             	add    esp,0x10
c0017dd6:	31 d2                	xor    edx,edx
c0017dd8:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0017ddb:	84 c0                	test   al,al
c0017ddd:	74 21                	je     c0017e00 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0017ddf:	3c 2f                	cmp    al,0x2f
c0017de1:	75 0b                	jne    c0017dee <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0017de3:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0017de7:	bd 01 00 00 00       	mov    ebp,0x1
c0017dec:	eb 14                	jmp    c0017e02 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0017dee:	8d 48 9f             	lea    ecx,[eax-0x61]
c0017df1:	80 f9 19             	cmp    cl,0x19
c0017df4:	77 03                	ja     c0017df9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0017df6:	83 e8 20             	sub    eax,0x20
c0017df9:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0017dfd:	42                   	inc    edx
c0017dfe:	eb d8                	jmp    c0017dd8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0017e00:	31 ed                	xor    ebp,ebp
c0017e02:	83 ec 0c             	sub    esp,0xc
c0017e05:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0017e0c:	e8 38 eb fe ff       	call   c0006949 <malloc>
c0017e11:	89 c6                	mov    esi,eax
c0017e13:	89 c2                	mov    edx,eax
c0017e15:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0017e1c:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0017e22:	c1 ef 0b             	shr    edi,0xb
c0017e25:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0017e2c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0017e30:	83 c4 10             	add    esp,0x10
c0017e33:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0017e38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e3c:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c0017e43:	74 29                	je     c0017e6e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c0017e45:	50                   	push   eax
c0017e46:	57                   	push   edi
c0017e47:	52                   	push   edx
c0017e48:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0017e4c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0017e53:	e8 87 f9 ff ff       	call   c00177df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017e58:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e5c:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0017e63:	81 c2 00 08 00 00    	add    edx,0x800
c0017e69:	83 c4 10             	add    esp,0x10
c0017e6c:	eb ca                	jmp    c0017e38 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c0017e6e:	83 ec 0c             	sub    esp,0xc
c0017e71:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0017e75:	57                   	push   edi
c0017e76:	e8 49 86 fe ff       	call   c00004c4 <strlen>
c0017e7b:	50                   	push   eax
c0017e7c:	57                   	push   edi
c0017e7d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0017e84:	56                   	push   esi
c0017e85:	e8 13 f9 ff ff       	call   c001779d <__memmem(unsigned char*, int, unsigned char*, int)>
c0017e8a:	83 c4 20             	add    esp,0x20
c0017e8d:	85 c0                	test   eax,eax
c0017e8f:	75 13                	jne    c0017ea4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c0017e91:	83 ec 0c             	sub    esp,0xc
c0017e94:	56                   	push   esi
c0017e95:	e8 bf ea fe ff       	call   c0006959 <free>
c0017e9a:	83 c4 10             	add    esp,0x10
c0017e9d:	31 c0                	xor    eax,eax
c0017e9f:	e9 b3 00 00 00       	jmp    c0017f57 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c0017ea4:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0017ea8:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0017eac:	c1 e7 08             	shl    edi,0x8
c0017eaf:	c1 e2 10             	shl    edx,0x10
c0017eb2:	09 d7                	or     edi,edx
c0017eb4:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0017eb8:	09 d7                	or     edi,edx
c0017eba:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0017ebe:	c1 e2 18             	shl    edx,0x18
c0017ec1:	09 d7                	or     edi,edx
c0017ec3:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0017ec7:	89 d1                	mov    ecx,edx
c0017ec9:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0017ecd:	c1 e1 08             	shl    ecx,0x8
c0017ed0:	c1 e2 10             	shl    edx,0x10
c0017ed3:	09 ca                	or     edx,ecx
c0017ed5:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0017ed9:	09 ca                	or     edx,ecx
c0017edb:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0017edf:	c1 e1 18             	shl    ecx,0x18
c0017ee2:	09 ca                	or     edx,ecx
c0017ee4:	89 e9                	mov    ecx,ebp
c0017ee6:	84 c9                	test   cl,cl
c0017ee8:	74 3c                	je     c0017f26 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c0017eea:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017eee:	83 ec 0c             	sub    esp,0xc
c0017ef1:	56                   	push   esi
c0017ef2:	e8 62 ea fe ff       	call   c0006959 <free>
c0017ef7:	83 c4 0c             	add    esp,0xc
c0017efa:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0017f01:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017f06:	50                   	push   eax
c0017f07:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0017f0e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0017f15:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f19:	52                   	push   edx
c0017f1a:	57                   	push   edi
c0017f1b:	53                   	push   ebx
c0017f1c:	e8 6b fe ff ff       	call   c0017d8c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0017f21:	83 c4 20             	add    esp,0x20
c0017f24:	eb 31                	jmp    c0017f57 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c0017f26:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0017f29:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0017f30:	d0 e8                	shr    al,1
c0017f32:	89 3b                	mov    DWORD PTR [ebx],edi
c0017f34:	83 e0 01             	and    eax,0x1
c0017f37:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017f3e:	83 ec 0c             	sub    esp,0xc
c0017f41:	89 13                	mov    DWORD PTR [ebx],edx
c0017f43:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0017f4a:	89 03                	mov    DWORD PTR [ebx],eax
c0017f4c:	56                   	push   esi
c0017f4d:	e8 07 ea fe ff       	call   c0006959 <free>
c0017f52:	83 c4 10             	add    esp,0x10
c0017f55:	b0 01                	mov    al,0x1
c0017f57:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017f5d:	5b                   	pop    ebx
c0017f5e:	5e                   	pop    esi
c0017f5f:	5f                   	pop    edi
c0017f60:	5d                   	pop    ebp
c0017f61:	c3                   	ret    

c0017f62 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0017f62:	55                   	push   ebp
c0017f63:	57                   	push   edi
c0017f64:	56                   	push   esi
c0017f65:	53                   	push   ebx
c0017f66:	83 ec 20             	sub    esp,0x20
c0017f69:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017f6d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017f71:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0017f75:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017f7d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017f85:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0017f8a:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0017f90:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0017f96:	57                   	push   edi
c0017f97:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017f9b:	50                   	push   eax
c0017f9c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017fa0:	50                   	push   eax
c0017fa1:	e8 92 fd ff ff       	call   c0017d38 <readRoot(unsigned int*, unsigned int*, char)>
c0017fa6:	5a                   	pop    edx
c0017fa7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017fab:	e8 14 85 fe ff       	call   c00004c4 <strlen>
c0017fb0:	83 c4 10             	add    esp,0x10
c0017fb3:	83 f8 03             	cmp    eax,0x3
c0017fb6:	77 17                	ja     c0017fcf <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0017fb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fbc:	89 03                	mov    DWORD PTR [ebx],eax
c0017fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017fc2:	89 06                	mov    DWORD PTR [esi],eax
c0017fc4:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0017fcb:	b0 01                	mov    al,0x1
c0017fcd:	eb 19                	jmp    c0017fe8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0017fcf:	50                   	push   eax
c0017fd0:	55                   	push   ebp
c0017fd1:	57                   	push   edi
c0017fd2:	56                   	push   esi
c0017fd3:	53                   	push   ebx
c0017fd4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017fd8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017fdc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017fe0:	e8 a7 fd ff ff       	call   c0017d8c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0017fe5:	83 c4 20             	add    esp,0x20
c0017fe8:	83 c4 1c             	add    esp,0x1c
c0017feb:	5b                   	pop    ebx
c0017fec:	5e                   	pop    esi
c0017fed:	5f                   	pop    edi
c0017fee:	5d                   	pop    ebp
c0017fef:	c3                   	ret    

c0017ff0 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017ff0:	57                   	push   edi
c0017ff1:	56                   	push   esi
c0017ff2:	53                   	push   ebx
c0017ff3:	83 ec 10             	sub    esp,0x10
c0017ff6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0017ffa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0017ffe:	85 ff                	test   edi,edi
c0018000:	0f 84 8b 00 00 00    	je     c0018091 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0018006:	85 f6                	test   esi,esi
c0018008:	0f 84 83 00 00 00    	je     c0018091 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001800e:	b8 03 00 00 00       	mov    eax,0x3
c0018013:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0018018:	75 7c                	jne    c0018096 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001801a:	83 ec 0c             	sub    esp,0xc
c001801d:	6a 1c                	push   0x1c
c001801f:	e8 25 e9 fe ff       	call   c0006949 <malloc>
c0018024:	89 07                	mov    DWORD PTR [edi],eax
c0018026:	89 c3                	mov    ebx,eax
c0018028:	58                   	pop    eax
c0018029:	8d 44 24 18          	lea    eax,[esp+0x18]
c001802d:	50                   	push   eax
c001802e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0018031:	50                   	push   eax
c0018032:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018036:	50                   	push   eax
c0018037:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001803b:	50                   	push   eax
c001803c:	56                   	push   esi
c001803d:	e8 20 ff ff ff       	call   c0017f62 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0018042:	83 c4 20             	add    esp,0x20
c0018045:	84 c0                	test   al,al
c0018047:	74 07                	je     c0018050 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c0018049:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001804e:	74 0b                	je     c001805b <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c0018050:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0018054:	b8 01 00 00 00       	mov    eax,0x1
c0018059:	eb 3b                	jmp    c0018096 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001805b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001805f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0018063:	89 03                	mov    DWORD PTR [ebx],eax
c0018065:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001806c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018070:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0018077:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001807e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0018081:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0018088:	8a 06                	mov    al,BYTE PTR [esi]
c001808a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001808d:	31 c0                	xor    eax,eax
c001808f:	eb 05                	jmp    c0018096 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0018091:	b8 04 00 00 00       	mov    eax,0x4
c0018096:	83 c4 10             	add    esp,0x10
c0018099:	5b                   	pop    ebx
c001809a:	5e                   	pop    esi
c001809b:	5f                   	pop    edi
c001809c:	c3                   	ret    
c001809d:	90                   	nop

c001809e <ISO9660::exists(char const*)>:
c001809e:	83 ec 28             	sub    esp,0x28
c00180a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180a5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00180a9:	52                   	push   edx
c00180aa:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00180ad:	52                   	push   edx
c00180ae:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00180b2:	52                   	push   edx
c00180b3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00180b7:	52                   	push   edx
c00180b8:	50                   	push   eax
c00180b9:	e8 a4 fe ff ff       	call   c0017f62 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00180be:	83 c4 3c             	add    esp,0x3c
c00180c1:	c3                   	ret    

c00180c2 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00180c2:	56                   	push   esi
c00180c3:	53                   	push   ebx
c00180c4:	83 ec 14             	sub    esp,0x14
c00180c7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00180cb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00180cf:	85 db                	test   ebx,ebx
c00180d1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00180d5:	0f 94 c2             	sete   dl
c00180d8:	85 f6                	test   esi,esi
c00180da:	0f 94 c0             	sete   al
c00180dd:	08 c2                	or     dl,al
c00180df:	75 68                	jne    c0018149 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00180e1:	85 c9                	test   ecx,ecx
c00180e3:	74 64                	je     c0018149 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00180e5:	83 ec 0c             	sub    esp,0xc
c00180e8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00180eb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00180ef:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00180f5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00180fc:	50                   	push   eax
c00180fd:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0018100:	50                   	push   eax
c0018101:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018105:	50                   	push   eax
c0018106:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001810a:	50                   	push   eax
c001810b:	51                   	push   ecx
c001810c:	e8 51 fe ff ff       	call   c0017f62 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0018111:	83 c4 20             	add    esp,0x20
c0018114:	ba 01 00 00 00       	mov    edx,0x1
c0018119:	84 c0                	test   al,al
c001811b:	74 31                	je     c001814e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001811d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018121:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0018128:	89 03                	mov    DWORD PTR [ebx],eax
c001812a:	ba 00 00 00 00       	mov    edx,0x0
c001812f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018133:	85 c0                	test   eax,eax
c0018135:	0f 95 06             	setne  BYTE PTR [esi]
c0018138:	74 14                	je     c001814e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001813a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0018140:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0018147:	eb 05                	jmp    c001814e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0018149:	ba 04 00 00 00       	mov    edx,0x4
c001814e:	83 c4 14             	add    esp,0x14
c0018151:	89 d0                	mov    eax,edx
c0018153:	5b                   	pop    ebx
c0018154:	5e                   	pop    esi
c0018155:	c3                   	ret    

c0018156 <ISO9660::openDir(char const*, void**)>:
c0018156:	57                   	push   edi
c0018157:	56                   	push   esi
c0018158:	53                   	push   ebx
c0018159:	83 ec 10             	sub    esp,0x10
c001815c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0018160:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0018164:	85 ff                	test   edi,edi
c0018166:	74 7b                	je     c00181e3 <ISO9660::openDir(char const*, void**)+0x8d>
c0018168:	85 f6                	test   esi,esi
c001816a:	74 77                	je     c00181e3 <ISO9660::openDir(char const*, void**)+0x8d>
c001816c:	83 ec 0c             	sub    esp,0xc
c001816f:	6a 1c                	push   0x1c
c0018171:	e8 d3 e7 fe ff       	call   c0006949 <malloc>
c0018176:	89 07                	mov    DWORD PTR [edi],eax
c0018178:	89 c3                	mov    ebx,eax
c001817a:	58                   	pop    eax
c001817b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001817f:	50                   	push   eax
c0018180:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0018183:	50                   	push   eax
c0018184:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018188:	50                   	push   eax
c0018189:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001818d:	50                   	push   eax
c001818e:	56                   	push   esi
c001818f:	e8 ce fd ff ff       	call   c0017f62 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0018194:	83 c4 20             	add    esp,0x20
c0018197:	84 c0                	test   al,al
c0018199:	74 07                	je     c00181a2 <ISO9660::openDir(char const*, void**)+0x4c>
c001819b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00181a0:	75 0b                	jne    c00181ad <ISO9660::openDir(char const*, void**)+0x57>
c00181a2:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00181a6:	b8 01 00 00 00       	mov    eax,0x1
c00181ab:	eb 3b                	jmp    c00181e8 <ISO9660::openDir(char const*, void**)+0x92>
c00181ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181b1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00181b5:	89 03                	mov    DWORD PTR [ebx],eax
c00181b7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00181be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00181c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00181c9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00181d0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00181d3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00181da:	8a 06                	mov    al,BYTE PTR [esi]
c00181dc:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00181df:	31 c0                	xor    eax,eax
c00181e1:	eb 05                	jmp    c00181e8 <ISO9660::openDir(char const*, void**)+0x92>
c00181e3:	b8 04 00 00 00       	mov    eax,0x4
c00181e8:	83 c4 10             	add    esp,0x10
c00181eb:	5b                   	pop    ebx
c00181ec:	5e                   	pop    esi
c00181ed:	5f                   	pop    edi
c00181ee:	c3                   	ret    
c00181ef:	90                   	nop

c00181f0 <ISO9660::ISO9660()>:
c00181f0:	83 ec 0c             	sub    esp,0xc
c00181f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181f7:	83 ec 0c             	sub    esp,0xc
c00181fa:	50                   	push   eax
c00181fb:	e8 ea 17 ff ff       	call   c00099ea <Filesystem::Filesystem()>
c0018200:	83 c4 10             	add    esp,0x10
c0018203:	ba 84 f4 01 c0       	mov    edx,0xc001f484
c0018208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001820c:	89 10                	mov    DWORD PTR [eax],edx
c001820e:	90                   	nop
c001820f:	83 c4 0c             	add    esp,0xc
c0018212:	c3                   	ret    
c0018213:	90                   	nop

c0018214 <SoundCard::beginPlayback()>:
c0018214:	c7 44 24 04 e4 f4 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f4e4
c001821c:	e9 88 71 ff ff       	jmp    c000f3a9 <Krnl::panic(char const*)>
c0018221:	90                   	nop

c0018222 <SoundCard::stopPlayback()>:
c0018222:	c7 44 24 04 e4 f4 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f4e4
c001822a:	e9 7a 71 ff ff       	jmp    c000f3a9 <Krnl::panic(char const*)>
c001822f:	90                   	nop

c0018230 <SoundCard::SoundCard(char const*)>:
c0018230:	83 ec 1c             	sub    esp,0x1c
c0018233:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018237:	83 ec 08             	sub    esp,0x8
c001823a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001823e:	50                   	push   eax
c001823f:	e8 4a 2a ff ff       	call   c000ac8e <Device::Device(char const*)>
c0018244:	83 c4 10             	add    esp,0x10
c0018247:	ba 30 f5 01 c0       	mov    edx,0xc001f530
c001824c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018250:	89 10                	mov    DWORD PTR [eax],edx
c0018252:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018256:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001825d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018261:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001826b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001826f:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0018279:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001827d:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0018287:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001828b:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0018295:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001829d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00182a2:	7f 19                	jg     c00182bd <SoundCard::SoundCard(char const*)+0x8d>
c00182a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182a8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00182ac:	83 c2 54             	add    edx,0x54
c00182af:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00182b7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00182bb:	eb e0                	jmp    c001829d <SoundCard::SoundCard(char const*)+0x6d>
c00182bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182c1:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00182c8:	90                   	nop
c00182c9:	83 c4 1c             	add    esp,0x1c
c00182cc:	c3                   	ret    
c00182cd:	90                   	nop

c00182ce <SoundCard::~SoundCard()>:
c00182ce:	83 ec 0c             	sub    esp,0xc
c00182d1:	ba 30 f5 01 c0       	mov    edx,0xc001f530
c00182d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182da:	89 10                	mov    DWORD PTR [eax],edx
c00182dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182e0:	83 ec 0c             	sub    esp,0xc
c00182e3:	50                   	push   eax
c00182e4:	e8 0f 27 ff ff       	call   c000a9f8 <Device::~Device()>
c00182e9:	83 c4 10             	add    esp,0x10
c00182ec:	90                   	nop
c00182ed:	83 c4 0c             	add    esp,0xc
c00182f0:	c3                   	ret    
c00182f1:	90                   	nop

c00182f2 <SoundCard::~SoundCard()>:
c00182f2:	83 ec 0c             	sub    esp,0xc
c00182f5:	83 ec 0c             	sub    esp,0xc
c00182f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00182fc:	e8 cd ff ff ff       	call   c00182ce <SoundCard::~SoundCard()>
c0018301:	83 c4 10             	add    esp,0x10
c0018304:	83 ec 08             	sub    esp,0x8
c0018307:	68 e8 01 00 00       	push   0x1e8
c001830c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018310:	e8 dd 12 ff ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c0018315:	83 c4 10             	add    esp,0x10
c0018318:	83 c4 0c             	add    esp,0xc
c001831b:	c3                   	ret    

c001831c <SoundCard::configureRates(int, int, int)>:
c001831c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018320:	31 c0                	xor    eax,eax
c0018322:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0018329:	75 20                	jne    c001834b <SoundCard::configureRates(int, int, int)+0x2f>
c001832b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001832f:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0018335:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018339:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001833f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018343:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0018349:	b0 01                	mov    al,0x1
c001834b:	c3                   	ret    

c001834c <SoundCard::getSamples16(int, short*)>:
c001834c:	55                   	push   ebp
c001834d:	57                   	push   edi
c001834e:	31 ff                	xor    edi,edi
c0018350:	56                   	push   esi
c0018351:	53                   	push   ebx
c0018352:	31 db                	xor    ebx,ebx
c0018354:	83 ec 10             	sub    esp,0x10
c0018357:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001835b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001835f:	8d 04 36             	lea    eax,[esi+esi*1]
c0018362:	50                   	push   eax
c0018363:	6a 00                	push   0x0
c0018365:	55                   	push   ebp
c0018366:	e8 3d 81 fe ff       	call   c00004a8 <memset>
c001836b:	83 c4 10             	add    esp,0x10
c001836e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018372:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0018379:	85 c0                	test   eax,eax
c001837b:	74 1b                	je     c0018398 <SoundCard::getSamples16(int, short*)+0x4c>
c001837d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018381:	75 15                	jne    c0018398 <SoundCard::getSamples16(int, short*)+0x4c>
c0018383:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018387:	55                   	push   ebp
c0018388:	56                   	push   esi
c0018389:	50                   	push   eax
c001838a:	e8 ed 02 00 00       	call   c001867c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001838f:	83 c4 10             	add    esp,0x10
c0018392:	39 c7                	cmp    edi,eax
c0018394:	7d 02                	jge    c0018398 <SoundCard::getSamples16(int, short*)+0x4c>
c0018396:	89 c7                	mov    edi,eax
c0018398:	43                   	inc    ebx
c0018399:	83 fb 20             	cmp    ebx,0x20
c001839c:	75 d0                	jne    c001836e <SoundCard::getSamples16(int, short*)+0x22>
c001839e:	83 c4 0c             	add    esp,0xc
c00183a1:	89 f8                	mov    eax,edi
c00183a3:	5b                   	pop    ebx
c00183a4:	5e                   	pop    esi
c00183a5:	5f                   	pop    edi
c00183a6:	5d                   	pop    ebp
c00183a7:	c3                   	ret    

c00183a8 <SoundCard::getSamples32(int, int*)>:
c00183a8:	55                   	push   ebp
c00183a9:	57                   	push   edi
c00183aa:	31 ff                	xor    edi,edi
c00183ac:	56                   	push   esi
c00183ad:	31 f6                	xor    esi,esi
c00183af:	53                   	push   ebx
c00183b0:	83 ec 10             	sub    esp,0x10
c00183b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00183b7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00183bb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00183bf:	c1 e0 02             	shl    eax,0x2
c00183c2:	50                   	push   eax
c00183c3:	6a 00                	push   0x0
c00183c5:	55                   	push   ebp
c00183c6:	e8 dd 80 fe ff       	call   c00004a8 <memset>
c00183cb:	83 c4 10             	add    esp,0x10
c00183ce:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c00183d5:	85 c0                	test   eax,eax
c00183d7:	74 1b                	je     c00183f4 <SoundCard::getSamples32(int, int*)+0x4c>
c00183d9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00183dd:	75 15                	jne    c00183f4 <SoundCard::getSamples32(int, int*)+0x4c>
c00183df:	53                   	push   ebx
c00183e0:	55                   	push   ebp
c00183e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00183e5:	50                   	push   eax
c00183e6:	e8 55 03 00 00       	call   c0018740 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c00183eb:	83 c4 10             	add    esp,0x10
c00183ee:	39 c6                	cmp    esi,eax
c00183f0:	7d 02                	jge    c00183f4 <SoundCard::getSamples32(int, int*)+0x4c>
c00183f2:	89 c6                	mov    esi,eax
c00183f4:	47                   	inc    edi
c00183f5:	83 ff 20             	cmp    edi,0x20
c00183f8:	75 d4                	jne    c00183ce <SoundCard::getSamples32(int, int*)+0x26>
c00183fa:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0018400:	85 f6                	test   esi,esi
c0018402:	75 0f                	jne    c0018413 <SoundCard::getSamples32(int, int*)+0x6b>
c0018404:	84 c0                	test   al,al
c0018406:	74 1b                	je     c0018423 <SoundCard::getSamples32(int, int*)+0x7b>
c0018408:	83 ec 0c             	sub    esp,0xc
c001840b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001840d:	53                   	push   ebx
c001840e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0018411:	eb 0d                	jmp    c0018420 <SoundCard::getSamples32(int, int*)+0x78>
c0018413:	84 c0                	test   al,al
c0018415:	75 0c                	jne    c0018423 <SoundCard::getSamples32(int, int*)+0x7b>
c0018417:	83 ec 0c             	sub    esp,0xc
c001841a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001841c:	53                   	push   ebx
c001841d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0018420:	83 c4 10             	add    esp,0x10
c0018423:	83 c4 0c             	add    esp,0xc
c0018426:	89 f0                	mov    eax,esi
c0018428:	5b                   	pop    ebx
c0018429:	5e                   	pop    esi
c001842a:	5f                   	pop    edi
c001842b:	5d                   	pop    ebp
c001842c:	c3                   	ret    
c001842d:	90                   	nop

c001842e <SoundCard::addChannel(SoundPort*)>:
c001842e:	83 ec 0c             	sub    esp,0xc
c0018431:	31 c0                	xor    eax,eax
c0018433:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018437:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001843f:	74 1b                	je     c001845c <SoundCard::addChannel(SoundPort*)+0x2e>
c0018441:	40                   	inc    eax
c0018442:	83 f8 20             	cmp    eax,0x20
c0018445:	75 f0                	jne    c0018437 <SoundCard::addChannel(SoundPort*)+0x9>
c0018447:	83 ec 0c             	sub    esp,0xc
c001844a:	68 09 f5 01 c0       	push   0xc001f509
c001844f:	e8 55 6f ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c0018454:	83 c4 10             	add    esp,0x10
c0018457:	83 c8 ff             	or     eax,0xffffffff
c001845a:	eb 0b                	jmp    c0018467 <SoundCard::addChannel(SoundPort*)+0x39>
c001845c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018460:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0018467:	83 c4 0c             	add    esp,0xc
c001846a:	c3                   	ret    
c001846b:	90                   	nop

c001846c <SoundCard::removeChannel(int)>:
c001846c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018470:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018474:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001847f:	c3                   	ret    

c0018480 <SoundPort::SoundPort(int, int, int, int)>:
c0018480:	83 ec 0c             	sub    esp,0xc
c0018483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018487:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001848e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018492:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001849a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001849e:	89 10                	mov    DWORD PTR [eax],edx
c00184a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00184a8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00184ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00184b3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00184b6:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00184bb:	75 13                	jne    c00184d0 <SoundPort::SoundPort(int, int, int, int)+0x50>
c00184bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00184c3:	05 a0 0f 00 00       	add    eax,0xfa0
c00184c8:	01 c0                	add    eax,eax
c00184ca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00184ce:	66 90                	xchg   ax,ax
c00184d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00184d8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00184db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184df:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00184e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00184ed:	c1 e0 02             	shl    eax,0x2
c00184f0:	83 ec 0c             	sub    esp,0xc
c00184f3:	50                   	push   eax
c00184f4:	e8 50 e4 fe ff       	call   c0006949 <malloc>
c00184f9:	83 c4 10             	add    esp,0x10
c00184fc:	89 c2                	mov    edx,eax
c00184fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018502:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018505:	90                   	nop
c0018506:	83 c4 0c             	add    esp,0xc
c0018509:	c3                   	ret    
c001850a:	66 90                	xchg   ax,ax

c001850c <SoundPort::~SoundPort()>:
c001850c:	83 ec 0c             	sub    esp,0xc
c001850f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018513:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018516:	85 c0                	test   eax,eax
c0018518:	74 1e                	je     c0018538 <SoundPort::~SoundPort()+0x2c>
c001851a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001851e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018521:	83 ec 0c             	sub    esp,0xc
c0018524:	50                   	push   eax
c0018525:	e8 2f e4 fe ff       	call   c0006959 <free>
c001852a:	83 c4 10             	add    esp,0x10
c001852d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018531:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018538:	90                   	nop
c0018539:	83 c4 0c             	add    esp,0xc
c001853c:	c3                   	ret    
c001853d:	90                   	nop
c001853e:	66 90                	xchg   ax,ax

c0018540 <SoundPort::unpause()>:
c0018540:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018544:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0018548:	c3                   	ret    
c0018549:	90                   	nop
c001854a:	66 90                	xchg   ax,ax

c001854c <SoundPort::pause()>:
c001854c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018550:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018554:	c3                   	ret    
c0018555:	90                   	nop
c0018556:	66 90                	xchg   ax,ax

c0018558 <SoundPort::getBufferUsed()>:
c0018558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001855c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001855f:	c3                   	ret    

c0018560 <SoundPort::getBufferSize()>:
c0018560:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018564:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018567:	c3                   	ret    

c0018568 <SoundPort::buffer16(short*, int)>:
c0018568:	55                   	push   ebp
c0018569:	57                   	push   edi
c001856a:	56                   	push   esi
c001856b:	53                   	push   ebx
c001856c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018570:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0018574:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0018577:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001857a:	74 68                	je     c00185e4 <SoundPort::buffer16(short*, int)+0x7c>
c001857c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018580:	85 c9                	test   ecx,ecx
c0018582:	7e 60                	jle    c00185e4 <SoundPort::buffer16(short*, int)+0x7c>
c0018584:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0018588:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001858b:	c1 e1 0f             	shl    ecx,0xf
c001858e:	8d 70 01             	lea    esi,[eax+0x1]
c0018591:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018594:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0018597:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001859a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001859d:	74 4d                	je     c00185ec <SoundPort::buffer16(short*, int)+0x84>
c001859f:	31 f6                	xor    esi,esi
c00185a1:	eb 21                	jmp    c00185c4 <SoundPort::buffer16(short*, int)+0x5c>
c00185a3:	90                   	nop
c00185a4:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c00185a9:	8d 79 01             	lea    edi,[ecx+0x1]
c00185ac:	c1 e3 0f             	shl    ebx,0xf
c00185af:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c00185b2:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c00185b5:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00185b8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00185bb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00185be:	74 1c                	je     c00185dc <SoundPort::buffer16(short*, int)+0x74>
c00185c0:	89 c6                	mov    esi,eax
c00185c2:	66 90                	xchg   ax,ax
c00185c4:	8d 46 01             	lea    eax,[esi+0x1]
c00185c7:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00185cb:	75 d7                	jne    c00185a4 <SoundPort::buffer16(short*, int)+0x3c>
c00185cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00185d1:	8d 76 00             	lea    esi,[esi+0x0]
c00185d4:	5b                   	pop    ebx
c00185d5:	5e                   	pop    esi
c00185d6:	5f                   	pop    edi
c00185d7:	5d                   	pop    ebp
c00185d8:	c3                   	ret    
c00185d9:	8d 76 00             	lea    esi,[esi+0x0]
c00185dc:	5b                   	pop    ebx
c00185dd:	8d 46 02             	lea    eax,[esi+0x2]
c00185e0:	5e                   	pop    esi
c00185e1:	5f                   	pop    edi
c00185e2:	5d                   	pop    ebp
c00185e3:	c3                   	ret    
c00185e4:	5b                   	pop    ebx
c00185e5:	31 c0                	xor    eax,eax
c00185e7:	5e                   	pop    esi
c00185e8:	5f                   	pop    edi
c00185e9:	5d                   	pop    ebp
c00185ea:	c3                   	ret    
c00185eb:	90                   	nop
c00185ec:	b8 01 00 00 00       	mov    eax,0x1
c00185f1:	eb e1                	jmp    c00185d4 <SoundPort::buffer16(short*, int)+0x6c>
c00185f3:	90                   	nop

c00185f4 <SoundPort::buffer32(int*, int)>:
c00185f4:	55                   	push   ebp
c00185f5:	57                   	push   edi
c00185f6:	56                   	push   esi
c00185f7:	53                   	push   ebx
c00185f8:	51                   	push   ecx
c00185f9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00185fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018601:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018604:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018608:	89 04 24             	mov    DWORD PTR [esp],eax
c001860b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001860e:	74 5c                	je     c001866c <SoundPort::buffer32(int*, int)+0x78>
c0018610:	85 c0                	test   eax,eax
c0018612:	7e 58                	jle    c001866c <SoundPort::buffer32(int*, int)+0x78>
c0018614:	8d 71 01             	lea    esi,[ecx+0x1]
c0018617:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001861a:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001861d:	8b 37                	mov    esi,DWORD PTR [edi]
c001861f:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0018622:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018625:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018628:	74 4a                	je     c0018674 <SoundPort::buffer32(int*, int)+0x80>
c001862a:	31 f6                	xor    esi,esi
c001862c:	eb 1e                	jmp    c001864c <SoundPort::buffer32(int*, int)+0x58>
c001862e:	66 90                	xchg   ax,ax
c0018630:	8d 69 01             	lea    ebp,[ecx+0x1]
c0018633:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0018636:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0018639:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001863c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0018640:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018643:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018646:	74 18                	je     c0018660 <SoundPort::buffer32(int*, int)+0x6c>
c0018648:	89 de                	mov    esi,ebx
c001864a:	66 90                	xchg   ax,ax
c001864c:	8d 5e 01             	lea    ebx,[esi+0x1]
c001864f:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0018652:	75 dc                	jne    c0018630 <SoundPort::buffer32(int*, int)+0x3c>
c0018654:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018657:	90                   	nop
c0018658:	5a                   	pop    edx
c0018659:	5b                   	pop    ebx
c001865a:	5e                   	pop    esi
c001865b:	5f                   	pop    edi
c001865c:	5d                   	pop    ebp
c001865d:	c3                   	ret    
c001865e:	66 90                	xchg   ax,ax
c0018660:	5a                   	pop    edx
c0018661:	8d 46 02             	lea    eax,[esi+0x2]
c0018664:	5b                   	pop    ebx
c0018665:	5e                   	pop    esi
c0018666:	5f                   	pop    edi
c0018667:	5d                   	pop    ebp
c0018668:	c3                   	ret    
c0018669:	8d 76 00             	lea    esi,[esi+0x0]
c001866c:	5a                   	pop    edx
c001866d:	31 c0                	xor    eax,eax
c001866f:	5b                   	pop    ebx
c0018670:	5e                   	pop    esi
c0018671:	5f                   	pop    edi
c0018672:	5d                   	pop    ebp
c0018673:	c3                   	ret    
c0018674:	b8 01 00 00 00       	mov    eax,0x1
c0018679:	eb dd                	jmp    c0018658 <SoundPort::buffer32(int*, int)+0x64>
c001867b:	90                   	nop

c001867c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001867c:	57                   	push   edi
c001867d:	56                   	push   esi
c001867e:	53                   	push   ebx
c001867f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018683:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0018687:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001868d:	39 03                	cmp    DWORD PTR [ebx],eax
c001868f:	74 13                	je     c00186a4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0018691:	83 ec 0c             	sub    esp,0xc
c0018694:	68 5c f5 01 c0       	push   0xc001f55c
c0018699:	e8 0b 6d ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001869e:	83 c4 10             	add    esp,0x10
c00186a1:	8d 76 00             	lea    esi,[esi+0x0]
c00186a4:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c00186aa:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c00186ad:	74 11                	je     c00186c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c00186af:	83 ec 0c             	sub    esp,0xc
c00186b2:	68 9b f5 01 c0       	push   0xc001f59b
c00186b7:	e8 ed 6c ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c00186bc:	83 c4 10             	add    esp,0x10
c00186bf:	90                   	nop
c00186c0:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c00186c6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c00186c9:	74 11                	je     c00186dc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c00186cb:	83 ec 0c             	sub    esp,0xc
c00186ce:	68 9b f5 01 c0       	push   0xc001f59b
c00186d3:	e8 d1 6c ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c00186d8:	83 c4 10             	add    esp,0x10
c00186db:	90                   	nop
c00186dc:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00186df:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c00186e3:	7e 07                	jle    c00186ec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c00186e5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00186e9:	8d 76 00             	lea    esi,[esi+0x0]
c00186ec:	85 f6                	test   esi,esi
c00186ee:	7e 2c                	jle    c001871c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c00186f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00186f4:	8d 3c 36             	lea    edi,[esi+esi*1]
c00186f7:	31 c9                	xor    ecx,ecx
c00186f9:	01 d7                	add    edi,edx
c00186fb:	90                   	nop
c00186fc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00186ff:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0018702:	85 c0                	test   eax,eax
c0018704:	79 06                	jns    c001870c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0018706:	05 ff 7f 00 00       	add    eax,0x7fff
c001870b:	90                   	nop
c001870c:	c1 f8 0f             	sar    eax,0xf
c001870f:	83 c1 04             	add    ecx,0x4
c0018712:	66 01 02             	add    WORD PTR [edx],ax
c0018715:	83 c2 02             	add    edx,0x2
c0018718:	39 d7                	cmp    edi,edx
c001871a:	75 e0                	jne    c00186fc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001871c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001871f:	50                   	push   eax
c0018720:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018723:	29 f0                	sub    eax,esi
c0018725:	c1 e0 02             	shl    eax,0x2
c0018728:	50                   	push   eax
c0018729:	8d 04 b2             	lea    eax,[edx+esi*4]
c001872c:	50                   	push   eax
c001872d:	52                   	push   edx
c001872e:	e8 ad 7c fe ff       	call   c00003e0 <memmove>
c0018733:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0018736:	83 c4 10             	add    esp,0x10
c0018739:	89 f0                	mov    eax,esi
c001873b:	5b                   	pop    ebx
c001873c:	5e                   	pop    esi
c001873d:	5f                   	pop    edi
c001873e:	c3                   	ret    
c001873f:	90                   	nop

c0018740 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0018740:	57                   	push   edi
c0018741:	56                   	push   esi
c0018742:	53                   	push   ebx
c0018743:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018747:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001874b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001874f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0018755:	39 06                	cmp    DWORD PTR [esi],eax
c0018757:	74 13                	je     c001876c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0018759:	83 ec 0c             	sub    esp,0xc
c001875c:	68 7c f5 01 c0       	push   0xc001f57c
c0018761:	e8 43 6c ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c0018766:	83 c4 10             	add    esp,0x10
c0018769:	8d 76 00             	lea    esi,[esi+0x0]
c001876c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0018772:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0018775:	74 11                	je     c0018788 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0018777:	83 ec 0c             	sub    esp,0xc
c001877a:	68 b7 f5 01 c0       	push   0xc001f5b7
c001877f:	e8 25 6c ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c0018784:	83 c4 10             	add    esp,0x10
c0018787:	90                   	nop
c0018788:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001878e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0018791:	74 11                	je     c00187a4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0018793:	83 ec 0c             	sub    esp,0xc
c0018796:	68 b7 f5 01 c0       	push   0xc001f5b7
c001879b:	e8 09 6c ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c00187a0:	83 c4 10             	add    esp,0x10
c00187a3:	90                   	nop
c00187a4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00187a7:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c00187ab:	7e 07                	jle    c00187b4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c00187ad:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00187b1:	8d 76 00             	lea    esi,[esi+0x0]
c00187b4:	85 ff                	test   edi,edi
c00187b6:	7e 1c                	jle    c00187d4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c00187b8:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c00187bf:	31 c0                	xor    eax,eax
c00187c1:	8d 76 00             	lea    esi,[esi+0x0]
c00187c4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00187c7:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c00187ca:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c00187cd:	83 c0 04             	add    eax,0x4
c00187d0:	39 c1                	cmp    ecx,eax
c00187d2:	75 f0                	jne    c00187c4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c00187d4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00187d7:	50                   	push   eax
c00187d8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00187db:	29 f8                	sub    eax,edi
c00187dd:	c1 e0 02             	shl    eax,0x2
c00187e0:	50                   	push   eax
c00187e1:	8d 04 ba             	lea    eax,[edx+edi*4]
c00187e4:	50                   	push   eax
c00187e5:	52                   	push   edx
c00187e6:	e8 f5 7b fe ff       	call   c00003e0 <memmove>
c00187eb:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c00187ee:	83 c4 10             	add    esp,0x10
c00187f1:	89 f8                	mov    eax,edi
c00187f3:	5b                   	pop    ebx
c00187f4:	5e                   	pop    esi
c00187f5:	5f                   	pop    edi
c00187f6:	c3                   	ret    
c00187f7:	90                   	nop

c00187f8 <PCI::open(int, int, void*)>:
c00187f8:	83 ec 18             	sub    esp,0x18
c00187fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00187ff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018803:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018809:	8b 10                	mov    edx,DWORD PTR [eax]
c001880b:	50                   	push   eax
c001880c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001880f:	31 c0                	xor    eax,eax
c0018811:	83 c4 1c             	add    esp,0x1c
c0018814:	c3                   	ret    
c0018815:	90                   	nop

c0018816 <PCI::close(int, int, void*)>:
c0018816:	31 c0                	xor    eax,eax
c0018818:	c3                   	ret    
c0018819:	90                   	nop

c001881a <PCI::PCI()>:
c001881a:	83 ec 0c             	sub    esp,0xc
c001881d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018821:	83 ec 08             	sub    esp,0x8
c0018824:	68 d3 f5 01 c0       	push   0xc001f5d3
c0018829:	50                   	push   eax
c001882a:	e8 21 1c ff ff       	call   c000a450 <Bus::Bus(char const*)>
c001882f:	83 c4 10             	add    esp,0x10
c0018832:	ba 7c f6 01 c0       	mov    edx,0xc001f67c
c0018837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001883b:	89 10                	mov    DWORD PTR [eax],edx
c001883d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018841:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001884b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001884f:	a3 80 42 02 c0       	mov    ds:0xc0024280,eax
c0018854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018858:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001885e:	0f b6 d0             	movzx  edx,al
c0018861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018865:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001886c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018870:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018876:	0f b6 d0             	movzx  edx,al
c0018879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001887d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0018882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018886:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001888c:	8d 50 01             	lea    edx,[eax+0x1]
c001888f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018893:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0018899:	0f b6 d0             	movzx  edx,al
c001889c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188a0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00188a4:	83 c9 c0             	or     ecx,0xffffffc0
c00188a7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00188ab:	90                   	nop
c00188ac:	83 c4 0c             	add    esp,0xc
c00188af:	c3                   	ret    

c00188b0 <PCI::readBAR8(unsigned int, int)>:
c00188b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00188b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00188b8:	f6 c2 01             	test   dl,0x1
c00188bb:	74 07                	je     c00188c4 <PCI::readBAR8(unsigned int, int)+0x14>
c00188bd:	83 e2 fc             	and    edx,0xfffffffc
c00188c0:	01 c2                	add    edx,eax
c00188c2:	ec                   	in     al,dx
c00188c3:	c3                   	ret    
c00188c4:	83 e2 f0             	and    edx,0xfffffff0
c00188c7:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00188ca:	c3                   	ret    
c00188cb:	90                   	nop

c00188cc <PCI::readBAR16(unsigned int, int)>:
c00188cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00188d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00188d4:	f6 c2 01             	test   dl,0x1
c00188d7:	74 08                	je     c00188e1 <PCI::readBAR16(unsigned int, int)+0x15>
c00188d9:	83 e2 fc             	and    edx,0xfffffffc
c00188dc:	01 c2                	add    edx,eax
c00188de:	66 ed                	in     ax,dx
c00188e0:	c3                   	ret    
c00188e1:	83 e2 f0             	and    edx,0xfffffff0
c00188e4:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00188e8:	c3                   	ret    
c00188e9:	90                   	nop

c00188ea <PCI::readBAR32(unsigned int, int)>:
c00188ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00188ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00188f2:	f6 c2 01             	test   dl,0x1
c00188f5:	74 07                	je     c00188fe <PCI::readBAR32(unsigned int, int)+0x14>
c00188f7:	83 e2 fc             	and    edx,0xfffffffc
c00188fa:	01 c2                	add    edx,eax
c00188fc:	ed                   	in     eax,dx
c00188fd:	c3                   	ret    
c00188fe:	83 e2 f0             	and    edx,0xfffffff0
c0018901:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0018904:	c3                   	ret    
c0018905:	90                   	nop

c0018906 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0018906:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001890a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001890e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018912:	f6 c2 01             	test   dl,0x1
c0018915:	74 07                	je     c001891e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0018917:	83 e2 fc             	and    edx,0xfffffffc
c001891a:	01 ca                	add    edx,ecx
c001891c:	ee                   	out    dx,al
c001891d:	c3                   	ret    
c001891e:	83 e2 f0             	and    edx,0xfffffff0
c0018921:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0018924:	c3                   	ret    
c0018925:	90                   	nop

c0018926 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0018926:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001892a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001892e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018932:	f6 c2 01             	test   dl,0x1
c0018935:	74 08                	je     c001893f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0018937:	83 e2 fc             	and    edx,0xfffffffc
c001893a:	01 ca                	add    edx,ecx
c001893c:	66 ef                	out    dx,ax
c001893e:	c3                   	ret    
c001893f:	83 e2 f0             	and    edx,0xfffffff0
c0018942:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0018946:	c3                   	ret    
c0018947:	90                   	nop

c0018948 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0018948:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001894c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018950:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018954:	f6 c2 01             	test   dl,0x1
c0018957:	74 07                	je     c0018960 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0018959:	83 e2 fc             	and    edx,0xfffffffc
c001895c:	01 ca                	add    edx,ecx
c001895e:	ef                   	out    dx,eax
c001895f:	c3                   	ret    
c0018960:	83 e2 f0             	and    edx,0xfffffff0
c0018963:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0018966:	c3                   	ret    
c0018967:	90                   	nop

c0018968 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018968:	55                   	push   ebp
c0018969:	57                   	push   edi
c001896a:	56                   	push   esi
c001896b:	53                   	push   ebx
c001896c:	83 ec 0c             	sub    esp,0xc
c001896f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018973:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0018977:	89 f0                	mov    eax,esi
c0018979:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001897d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018981:	3c 07                	cmp    al,0x7
c0018983:	76 10                	jbe    c0018995 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0018985:	83 ec 0c             	sub    esp,0xc
c0018988:	68 db f5 01 c0       	push   0xc001f5db
c001898d:	e8 17 6a ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c0018992:	83 c4 10             	add    esp,0x10
c0018995:	80 fb 0f             	cmp    bl,0xf
c0018998:	76 10                	jbe    c00189aa <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001899a:	83 ec 0c             	sub    esp,0xc
c001899d:	68 0b f6 01 c0       	push   0xc001f60b
c00189a2:	e8 02 6a ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c00189a7:	83 c4 10             	add    esp,0x10
c00189aa:	8d 04 36             	lea    eax,[esi+esi*1]
c00189ad:	ba f8 0c 00 00       	mov    edx,0xcf8
c00189b2:	83 c8 f0             	or     eax,0xfffffff0
c00189b5:	ee                   	out    dx,al
c00189b6:	ba fa 0c 00 00       	mov    edx,0xcfa
c00189bb:	89 e8                	mov    eax,ebp
c00189bd:	ee                   	out    dx,al
c00189be:	83 c4 0c             	add    esp,0xc
c00189c1:	89 d8                	mov    eax,ebx
c00189c3:	66 81 e7 fc 00       	and    di,0xfc
c00189c8:	5b                   	pop    ebx
c00189c9:	c1 e0 08             	shl    eax,0x8
c00189cc:	5e                   	pop    esi
c00189cd:	09 f8                	or     eax,edi
c00189cf:	5f                   	pop    edi
c00189d0:	66 0d 00 c0          	or     ax,0xc000
c00189d4:	5d                   	pop    ebp
c00189d5:	c3                   	ret    

c00189d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00189d6:	57                   	push   edi
c00189d7:	56                   	push   esi
c00189d8:	53                   	push   ebx
c00189d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00189dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00189e1:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c00189e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00189eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00189ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00189f3:	83 ff 01             	cmp    edi,0x1
c00189f6:	75 3e                	jne    c0018a36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c00189f8:	89 de                	mov    esi,ebx
c00189fa:	0f b6 c0             	movzx  eax,al
c00189fd:	81 e6 fc 00 00 00    	and    esi,0xfc
c0018a03:	c1 e0 10             	shl    eax,0x10
c0018a06:	0f b6 c9             	movzx  ecx,cl
c0018a09:	09 f0                	or     eax,esi
c0018a0b:	c1 e1 08             	shl    ecx,0x8
c0018a0e:	0f b6 d2             	movzx  edx,dl
c0018a11:	09 c8                	or     eax,ecx
c0018a13:	c1 e2 0b             	shl    edx,0xb
c0018a16:	09 d0                	or     eax,edx
c0018a18:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018a1d:	0d 00 00 00 80       	or     eax,0x80000000
c0018a22:	ef                   	out    dx,eax
c0018a23:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018a28:	ed                   	in     eax,dx
c0018a29:	83 e3 02             	and    ebx,0x2
c0018a2c:	0f b6 cb             	movzx  ecx,bl
c0018a2f:	c1 e1 03             	shl    ecx,0x3
c0018a32:	d3 e8                	shr    eax,cl
c0018a34:	eb 43                	jmp    c0018a79 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018a36:	83 ff 02             	cmp    edi,0x2
c0018a39:	75 2c                	jne    c0018a67 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0018a3b:	83 ec 0c             	sub    esp,0xc
c0018a3e:	0f b6 c9             	movzx  ecx,cl
c0018a41:	0f b6 d2             	movzx  edx,dl
c0018a44:	0f b6 fb             	movzx  edi,bl
c0018a47:	0f b6 c0             	movzx  eax,al
c0018a4a:	57                   	push   edi
c0018a4b:	51                   	push   ecx
c0018a4c:	52                   	push   edx
c0018a4d:	50                   	push   eax
c0018a4e:	56                   	push   esi
c0018a4f:	e8 14 ff ff ff       	call   c0018968 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018a54:	89 c2                	mov    edx,eax
c0018a56:	ed                   	in     eax,dx
c0018a57:	83 e3 02             	and    ebx,0x2
c0018a5a:	83 c4 20             	add    esp,0x20
c0018a5d:	0f b6 cb             	movzx  ecx,bl
c0018a60:	c1 e1 03             	shl    ecx,0x3
c0018a63:	d3 e8                	shr    eax,cl
c0018a65:	eb 12                	jmp    c0018a79 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018a67:	83 ec 0c             	sub    esp,0xc
c0018a6a:	68 3b f6 01 c0       	push   0xc001f63b
c0018a6f:	e8 35 69 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c0018a74:	83 c4 10             	add    esp,0x10
c0018a77:	31 c0                	xor    eax,eax
c0018a79:	5b                   	pop    ebx
c0018a7a:	5e                   	pop    esi
c0018a7b:	5f                   	pop    edi
c0018a7c:	c3                   	ret    
c0018a7d:	90                   	nop

c0018a7e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0018a7e:	83 ec 18             	sub    esp,0x18
c0018a81:	6a 00                	push   0x0
c0018a83:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018a88:	50                   	push   eax
c0018a89:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018a8e:	50                   	push   eax
c0018a8f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018a94:	50                   	push   eax
c0018a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018a99:	e8 38 ff ff ff       	call   c00189d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018a9e:	83 c4 2c             	add    esp,0x2c
c0018aa1:	c3                   	ret    

c0018aa2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0018aa2:	83 ec 18             	sub    esp,0x18
c0018aa5:	6a 0e                	push   0xe
c0018aa7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018aac:	50                   	push   eax
c0018aad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018ab2:	50                   	push   eax
c0018ab3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018ab8:	50                   	push   eax
c0018ab9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018abd:	e8 14 ff ff ff       	call   c00189d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ac2:	83 c4 2c             	add    esp,0x2c
c0018ac5:	0f b6 c0             	movzx  eax,al
c0018ac8:	c3                   	ret    
c0018ac9:	90                   	nop

c0018aca <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0018aca:	55                   	push   ebp
c0018acb:	57                   	push   edi
c0018acc:	56                   	push   esi
c0018acd:	53                   	push   ebx
c0018ace:	83 ec 18             	sub    esp,0x18
c0018ad1:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0018ad6:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0018adb:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018ae0:	6a 0a                	push   0xa
c0018ae2:	56                   	push   esi
c0018ae3:	55                   	push   ebp
c0018ae4:	57                   	push   edi
c0018ae5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018ae9:	e8 e8 fe ff ff       	call   c00189d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018aee:	83 c4 14             	add    esp,0x14
c0018af1:	89 c3                	mov    ebx,eax
c0018af3:	6a 0a                	push   0xa
c0018af5:	0f b6 db             	movzx  ebx,bl
c0018af8:	56                   	push   esi
c0018af9:	55                   	push   ebp
c0018afa:	57                   	push   edi
c0018afb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018aff:	e8 d2 fe ff ff       	call   c00189d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018b04:	83 c4 2c             	add    esp,0x2c
c0018b07:	25 00 ff 00 00       	and    eax,0xff00
c0018b0c:	09 d8                	or     eax,ebx
c0018b0e:	5b                   	pop    ebx
c0018b0f:	5e                   	pop    esi
c0018b10:	5f                   	pop    edi
c0018b11:	5d                   	pop    ebp
c0018b12:	c3                   	ret    
c0018b13:	90                   	nop

c0018b14 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0018b14:	83 ec 18             	sub    esp,0x18
c0018b17:	6a 08                	push   0x8
c0018b19:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018b1e:	50                   	push   eax
c0018b1f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018b24:	50                   	push   eax
c0018b25:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018b2a:	50                   	push   eax
c0018b2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018b2f:	e8 a2 fe ff ff       	call   c00189d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018b34:	83 c4 2c             	add    esp,0x2c
c0018b37:	0f b6 c4             	movzx  eax,ah
c0018b3a:	c3                   	ret    
c0018b3b:	90                   	nop

c0018b3c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0018b3c:	83 ec 18             	sub    esp,0x18
c0018b3f:	6a 08                	push   0x8
c0018b41:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018b46:	50                   	push   eax
c0018b47:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018b4c:	50                   	push   eax
c0018b4d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018b52:	50                   	push   eax
c0018b53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018b57:	e8 7a fe ff ff       	call   c00189d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018b5c:	83 c4 2c             	add    esp,0x2c
c0018b5f:	c3                   	ret    

c0018b60 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0018b60:	83 ec 18             	sub    esp,0x18
c0018b63:	6a 3c                	push   0x3c
c0018b65:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018b6a:	50                   	push   eax
c0018b6b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018b70:	50                   	push   eax
c0018b71:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018b76:	50                   	push   eax
c0018b77:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018b7b:	e8 56 fe ff ff       	call   c00189d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018b80:	83 c4 2c             	add    esp,0x2c
c0018b83:	c3                   	ret    

c0018b84 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0018b84:	83 ec 18             	sub    esp,0x18
c0018b87:	6a 18                	push   0x18
c0018b89:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018b8e:	50                   	push   eax
c0018b8f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018b94:	50                   	push   eax
c0018b95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018b9a:	50                   	push   eax
c0018b9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018b9f:	e8 32 fe ff ff       	call   c00189d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ba4:	83 c4 2c             	add    esp,0x2c
c0018ba7:	0f b6 c4             	movzx  eax,ah
c0018baa:	c3                   	ret    
c0018bab:	90                   	nop

c0018bac <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018bac:	55                   	push   ebp
c0018bad:	57                   	push   edi
c0018bae:	56                   	push   esi
c0018baf:	53                   	push   ebx
c0018bb0:	83 ec 28             	sub    esp,0x28
c0018bb3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0018bb7:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0018bbc:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0018bc1:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0018bc6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0018bcd:	8d 43 12             	lea    eax,[ebx+0x12]
c0018bd0:	83 c3 10             	add    ebx,0x10
c0018bd3:	0f b6 c0             	movzx  eax,al
c0018bd6:	0f b6 db             	movzx  ebx,bl
c0018bd9:	50                   	push   eax
c0018bda:	51                   	push   ecx
c0018bdb:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0018bdf:	57                   	push   edi
c0018be0:	55                   	push   ebp
c0018be1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018be5:	e8 ec fd ff ff       	call   c00189d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018bea:	83 c4 14             	add    esp,0x14
c0018bed:	89 c6                	mov    esi,eax
c0018bef:	53                   	push   ebx
c0018bf0:	c1 e6 10             	shl    esi,0x10
c0018bf3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018bf7:	51                   	push   ecx
c0018bf8:	57                   	push   edi
c0018bf9:	55                   	push   ebp
c0018bfa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018bfe:	e8 d3 fd ff ff       	call   c00189d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018c03:	83 c4 3c             	add    esp,0x3c
c0018c06:	0f b7 c0             	movzx  eax,ax
c0018c09:	5b                   	pop    ebx
c0018c0a:	09 f0                	or     eax,esi
c0018c0c:	5e                   	pop    esi
c0018c0d:	5f                   	pop    edi
c0018c0e:	5d                   	pop    ebp
c0018c0f:	c3                   	ret    

c0018c10 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018c10:	55                   	push   ebp
c0018c11:	57                   	push   edi
c0018c12:	56                   	push   esi
c0018c13:	53                   	push   ebx
c0018c14:	83 ec 0c             	sub    esp,0xc
c0018c17:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018c1b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018c1f:	89 f5                	mov    ebp,esi
c0018c21:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0018c27:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018c2b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018c2f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018c33:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0018c37:	83 f9 01             	cmp    ecx,0x1
c0018c3a:	75 5d                	jne    c0018c99 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0018c3c:	0f b6 c8             	movzx  ecx,al
c0018c3f:	0f b6 d2             	movzx  edx,dl
c0018c42:	c1 e1 10             	shl    ecx,0x10
c0018c45:	c1 e2 0b             	shl    edx,0xb
c0018c48:	89 f0                	mov    eax,esi
c0018c4a:	25 fc 00 00 00       	and    eax,0xfc
c0018c4f:	09 c1                	or     ecx,eax
c0018c51:	89 e8                	mov    eax,ebp
c0018c53:	0f b6 c0             	movzx  eax,al
c0018c56:	c1 e0 08             	shl    eax,0x8
c0018c59:	09 c1                	or     ecx,eax
c0018c5b:	09 d1                	or     ecx,edx
c0018c5d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018c62:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0018c68:	89 c8                	mov    eax,ecx
c0018c6a:	ef                   	out    dx,eax
c0018c6b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018c70:	ed                   	in     eax,dx
c0018c71:	0f b7 db             	movzx  ebx,bx
c0018c74:	83 e6 02             	and    esi,0x2
c0018c77:	74 0a                	je     c0018c83 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0018c79:	0f b7 d0             	movzx  edx,ax
c0018c7c:	c1 e3 10             	shl    ebx,0x10
c0018c7f:	09 d3                	or     ebx,edx
c0018c81:	eb 05                	jmp    c0018c88 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0018c83:	66 31 c0             	xor    ax,ax
c0018c86:	09 c3                	or     ebx,eax
c0018c88:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018c8d:	89 c8                	mov    eax,ecx
c0018c8f:	ef                   	out    dx,eax
c0018c90:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018c95:	89 d8                	mov    eax,ebx
c0018c97:	eb 41                	jmp    c0018cda <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018c99:	83 f9 02             	cmp    ecx,0x2
c0018c9c:	75 45                	jne    c0018ce3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0018c9e:	83 ec 0c             	sub    esp,0xc
c0018ca1:	0f b6 d2             	movzx  edx,dl
c0018ca4:	89 f1                	mov    ecx,esi
c0018ca6:	0f b6 c0             	movzx  eax,al
c0018ca9:	0f b6 f1             	movzx  esi,cl
c0018cac:	89 e9                	mov    ecx,ebp
c0018cae:	56                   	push   esi
c0018caf:	0f b6 c9             	movzx  ecx,cl
c0018cb2:	51                   	push   ecx
c0018cb3:	52                   	push   edx
c0018cb4:	50                   	push   eax
c0018cb5:	57                   	push   edi
c0018cb6:	e8 ad fc ff ff       	call   c0018968 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018cbb:	89 c2                	mov    edx,eax
c0018cbd:	ed                   	in     eax,dx
c0018cbe:	83 c4 20             	add    esp,0x20
c0018cc1:	0f b7 db             	movzx  ebx,bx
c0018cc4:	f6 c2 02             	test   dl,0x2
c0018cc7:	74 0c                	je     c0018cd5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0018cc9:	0f b7 c8             	movzx  ecx,ax
c0018ccc:	89 d8                	mov    eax,ebx
c0018cce:	c1 e0 10             	shl    eax,0x10
c0018cd1:	09 c8                	or     eax,ecx
c0018cd3:	eb 05                	jmp    c0018cda <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018cd5:	66 31 c0             	xor    ax,ax
c0018cd8:	09 d8                	or     eax,ebx
c0018cda:	ef                   	out    dx,eax
c0018cdb:	83 c4 0c             	add    esp,0xc
c0018cde:	5b                   	pop    ebx
c0018cdf:	5e                   	pop    esi
c0018ce0:	5f                   	pop    edi
c0018ce1:	5d                   	pop    ebp
c0018ce2:	c3                   	ret    
c0018ce3:	c7 44 24 20 3b f6 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f63b
c0018ceb:	83 c4 0c             	add    esp,0xc
c0018cee:	5b                   	pop    ebx
c0018cef:	5e                   	pop    esi
c0018cf0:	5f                   	pop    edi
c0018cf1:	5d                   	pop    ebp
c0018cf2:	e9 b2 66 ff ff       	jmp    c000f3a9 <Krnl::panic(char const*)>
c0018cf7:	90                   	nop

c0018cf8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018cf8:	55                   	push   ebp
c0018cf9:	57                   	push   edi
c0018cfa:	56                   	push   esi
c0018cfb:	53                   	push   ebx
c0018cfc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018d02:	80 3d 8c 42 02 c0 00 	cmp    BYTE PTR ds:0xc002428c,0x0
c0018d09:	0f 85 84 00 00 00    	jne    c0018d93 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018d0f:	83 ec 0c             	sub    esp,0xc
c0018d12:	68 14 01 00 00       	push   0x114
c0018d17:	e8 2d dc fe ff       	call   c0006949 <malloc>
c0018d1c:	83 c4 0c             	add    esp,0xc
c0018d1f:	89 c3                	mov    ebx,eax
c0018d21:	ff 35 70 38 02 c0    	push   DWORD PTR ds:0xc0023870
c0018d27:	68 41 f6 01 c0       	push   0xc001f641
c0018d2c:	50                   	push   eax
c0018d2d:	e8 0c 0f ff ff       	call   c0009c3e <File::File(char const*, Process*)>
c0018d32:	5a                   	pop    edx
c0018d33:	59                   	pop    ecx
c0018d34:	6a 01                	push   0x1
c0018d36:	53                   	push   ebx
c0018d37:	e8 bc 0f ff ff       	call   c0009cf8 <File::open(FileOpenMode)>
c0018d3c:	83 c4 0c             	add    esp,0xc
c0018d3f:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018d43:	50                   	push   eax
c0018d44:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d48:	50                   	push   eax
c0018d49:	53                   	push   ebx
c0018d4a:	e8 55 12 ff ff       	call   c0009fa4 <File::stat(unsigned long long*, bool*)>
c0018d4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018d53:	40                   	inc    eax
c0018d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d57:	e8 ed db fe ff       	call   c0006949 <malloc>
c0018d5c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018d60:	a3 88 42 02 c0       	mov    ds:0xc0024288,eax
c0018d65:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018d69:	5e                   	pop    esi
c0018d6a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018d6c:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018d70:	51                   	push   ecx
c0018d71:	50                   	push   eax
c0018d72:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018d76:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018d7a:	53                   	push   ebx
c0018d7b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018d7e:	83 c4 14             	add    esp,0x14
c0018d81:	53                   	push   ebx
c0018d82:	e8 cf 0f ff ff       	call   c0009d56 <File::close()>
c0018d87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018d8b:	83 c4 10             	add    esp,0x10
c0018d8e:	a3 84 42 02 c0       	mov    ds:0xc0024284,eax
c0018d93:	a1 84 42 02 c0       	mov    eax,ds:0xc0024284
c0018d98:	8b 15 88 42 02 c0    	mov    edx,DWORD PTR ds:0xc0024288
c0018d9e:	89 04 24             	mov    DWORD PTR [esp],eax
c0018da1:	31 ff                	xor    edi,edi
c0018da3:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018dab:	31 f6                	xor    esi,esi
c0018dad:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018db2:	31 db                	xor    ebx,ebx
c0018db4:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018dbc:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018dc1:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018dc8:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018dcc:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018dd3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018dd7:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018dda:	0f 8e 6b 01 00 00    	jle    c0018f4b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018de0:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018de3:	d4 40                	aam    0x40
c0018de5:	d5 39                	aad    0x39
c0018de7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018deb:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018def:	d4 40                	aam    0x40
c0018df1:	d5 39                	aad    0x39
c0018df3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018df7:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018dfb:	d4 40                	aam    0x40
c0018dfd:	d5 39                	aad    0x39
c0018dff:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018e03:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018e07:	d4 40                	aam    0x40
c0018e09:	d5 39                	aad    0x39
c0018e0b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018e0f:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018e13:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018e17:	3c 56                	cmp    al,0x56
c0018e19:	74 45                	je     c0018e60 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018e1b:	d4 40                	aam    0x40
c0018e1d:	d5 39                	aad    0x39
c0018e1f:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018e22:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018e26:	0f b6 c9             	movzx  ecx,cl
c0018e29:	c1 e1 04             	shl    ecx,0x4
c0018e2c:	d4 40                	aam    0x40
c0018e2e:	d5 39                	aad    0x39
c0018e30:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018e33:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018e37:	0f b6 db             	movzx  ebx,bl
c0018e3a:	09 cb                	or     ebx,ecx
c0018e3c:	c1 e3 04             	shl    ebx,0x4
c0018e3f:	d4 40                	aam    0x40
c0018e41:	d5 39                	aad    0x39
c0018e43:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018e46:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018e4a:	0f b6 c9             	movzx  ecx,cl
c0018e4d:	09 cb                	or     ebx,ecx
c0018e4f:	c1 e3 04             	shl    ebx,0x4
c0018e52:	89 d9                	mov    ecx,ebx
c0018e54:	d4 40                	aam    0x40
c0018e56:	d5 39                	aad    0x39
c0018e58:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018e5b:	0f b6 db             	movzx  ebx,bl
c0018e5e:	09 cb                	or     ebx,ecx
c0018e60:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018e64:	80 f9 44             	cmp    cl,0x44
c0018e67:	74 47                	je     c0018eb0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018e69:	88 c8                	mov    al,cl
c0018e6b:	d4 40                	aam    0x40
c0018e6d:	d5 39                	aad    0x39
c0018e6f:	83 e8 30             	sub    eax,0x30
c0018e72:	0f b6 e8             	movzx  ebp,al
c0018e75:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018e79:	c1 e5 04             	shl    ebp,0x4
c0018e7c:	d4 40                	aam    0x40
c0018e7e:	d5 39                	aad    0x39
c0018e80:	83 e8 30             	sub    eax,0x30
c0018e83:	0f b6 f0             	movzx  esi,al
c0018e86:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018e8a:	09 ee                	or     esi,ebp
c0018e8c:	c1 e6 04             	shl    esi,0x4
c0018e8f:	d4 40                	aam    0x40
c0018e91:	d5 39                	aad    0x39
c0018e93:	83 e8 30             	sub    eax,0x30
c0018e96:	0f b6 e8             	movzx  ebp,al
c0018e99:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018e9d:	09 ee                	or     esi,ebp
c0018e9f:	c1 e6 04             	shl    esi,0x4
c0018ea2:	89 f5                	mov    ebp,esi
c0018ea4:	d4 40                	aam    0x40
c0018ea6:	d5 39                	aad    0x39
c0018ea8:	83 e8 30             	sub    eax,0x30
c0018eab:	0f b6 f0             	movzx  esi,al
c0018eae:	09 ee                	or     esi,ebp
c0018eb0:	83 c7 10             	add    edi,0x10
c0018eb3:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018eb7:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018eba:	3c 0a                	cmp    al,0xa
c0018ebc:	74 09                	je     c0018ec7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018ebe:	45                   	inc    ebp
c0018ebf:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018ec2:	75 16                	jne    c0018eda <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018ec4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018ec7:	3c 0a                	cmp    al,0xa
c0018ec9:	0f 94 c0             	sete   al
c0018ecc:	0f b6 c0             	movzx  eax,al
c0018ecf:	01 c7                	add    edi,eax
c0018ed1:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018ed6:	75 0c                	jne    c0018ee4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018ed8:	eb 15                	jmp    c0018eef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018eda:	47                   	inc    edi
c0018edb:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018ede:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018ee2:	eb d3                	jmp    c0018eb7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018ee4:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018ee9:	0f 85 e8 fe ff ff    	jne    c0018dd7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018eef:	80 f9 44             	cmp    cl,0x44
c0018ef2:	74 0b                	je     c0018eff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018ef4:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018ef9:	0f 85 d8 fe ff ff    	jne    c0018dd7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018eff:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018f03:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018f07:	c1 e1 04             	shl    ecx,0x4
c0018f0a:	83 e8 30             	sub    eax,0x30
c0018f0d:	09 c8                	or     eax,ecx
c0018f0f:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018f13:	0f 85 be fe ff ff    	jne    c0018dd7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018f19:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018f1d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018f21:	c1 e1 04             	shl    ecx,0x4
c0018f24:	83 e8 30             	sub    eax,0x30
c0018f27:	09 c8                	or     eax,ecx
c0018f29:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018f2d:	0f 85 a4 fe ff ff    	jne    c0018dd7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018f33:	50                   	push   eax
c0018f34:	50                   	push   eax
c0018f35:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f39:	50                   	push   eax
c0018f3a:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018f41:	e8 1e 76 fe ff       	call   c0000564 <strcpy>
c0018f46:	83 c4 10             	add    esp,0x10
c0018f49:	eb 15                	jmp    c0018f60 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018f4b:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018f52:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018f5d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018f60:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018f67:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018f6d:	5b                   	pop    ebx
c0018f6e:	5e                   	pop    esi
c0018f6f:	5f                   	pop    edi
c0018f70:	5d                   	pop    ebp
c0018f71:	c3                   	ret    

c0018f72 <PCI::checkBus(unsigned char)>:
c0018f72:	56                   	push   esi
c0018f73:	53                   	push   ebx
c0018f74:	31 db                	xor    ebx,ebx
c0018f76:	51                   	push   ecx
c0018f77:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0018f7c:	52                   	push   edx
c0018f7d:	53                   	push   ebx
c0018f7e:	43                   	inc    ebx
c0018f7f:	56                   	push   esi
c0018f80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f84:	e8 f3 02 00 00       	call   c001927c <PCI::checkDevice(unsigned char, unsigned char)>
c0018f89:	83 c4 10             	add    esp,0x10
c0018f8c:	83 fb 20             	cmp    ebx,0x20
c0018f8f:	75 eb                	jne    c0018f7c <PCI::checkBus(unsigned char)+0xa>
c0018f91:	58                   	pop    eax
c0018f92:	5b                   	pop    ebx
c0018f93:	5e                   	pop    esi
c0018f94:	c3                   	ret    
c0018f95:	90                   	nop

c0018f96 <PCI::foundDevice(PCIDeviceInfo)>:
c0018f96:	55                   	push   ebp
c0018f97:	57                   	push   edi
c0018f98:	56                   	push   esi
c0018f99:	53                   	push   ebx
c0018f9a:	83 ec 1c             	sub    esp,0x1c
c0018f9d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018fa1:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018fa7:	0f 84 52 01 00 00    	je     c00190ff <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018fad:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018fb1:	66 81 f9 06 04       	cmp    cx,0x406
c0018fb6:	75 2c                	jne    c0018fe4 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018fb8:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018fbd:	50                   	push   eax
c0018fbe:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018fc3:	50                   	push   eax
c0018fc4:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018fc9:	50                   	push   eax
c0018fca:	56                   	push   esi
c0018fcb:	e8 b4 fb ff ff       	call   c0018b84 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018fd0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018fd4:	0f b6 c0             	movzx  eax,al
c0018fd7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018fdb:	83 c4 2c             	add    esp,0x2c
c0018fde:	5b                   	pop    ebx
c0018fdf:	5e                   	pop    esi
c0018fe0:	5f                   	pop    edi
c0018fe1:	5d                   	pop    ebp
c0018fe2:	eb 8e                	jmp    c0018f72 <PCI::checkBus(unsigned char)>
c0018fe4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018fe8:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018fee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018ff2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018ff6:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018ffa:	88 d3                	mov    bl,dl
c0018ffc:	85 c0                	test   eax,eax
c0018ffe:	74 33                	je     c0019033 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0019000:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0019003:	85 d2                	test   edx,edx
c0019005:	74 28                	je     c001902f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0019007:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001900d:	31 ef                	xor    edi,ebp
c001900f:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0019015:	75 18                	jne    c001902f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0019017:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001901b:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0019021:	75 0c                	jne    c001902f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0019023:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0019029:	0f 84 d0 00 00 00    	je     c00190ff <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001902f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019031:	eb c9                	jmp    c0018ffc <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0019033:	66 81 f9 01 06       	cmp    cx,0x601
c0019038:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001903c:	75 19                	jne    c0019057 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001903e:	83 ec 0c             	sub    esp,0xc
c0019041:	68 64 01 00 00       	push   0x164
c0019046:	e8 fe d8 fe ff       	call   c0006949 <malloc>
c001904b:	89 c5                	mov    ebp,eax
c001904d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019050:	e8 37 0e 00 00       	call   c0019e8c <SATABus::SATABus()>
c0019055:	eb 1e                	jmp    c0019075 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0019057:	66 81 f9 01 01       	cmp    cx,0x101
c001905c:	75 60                	jne    c00190be <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001905e:	83 ec 0c             	sub    esp,0xc
c0019061:	68 70 02 00 00       	push   0x270
c0019066:	e8 de d8 fe ff       	call   c0006949 <malloc>
c001906b:	89 c5                	mov    ebp,eax
c001906d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019070:	e8 cb 02 00 00       	call   c0019340 <IDE::IDE()>
c0019075:	58                   	pop    eax
c0019076:	5a                   	pop    edx
c0019077:	55                   	push   ebp
c0019078:	56                   	push   esi
c0019079:	e8 78 1a ff ff       	call   c000aaf6 <Device::addChild(Device*)>
c001907e:	83 ec 1c             	sub    esp,0x1c
c0019081:	b9 09 00 00 00       	mov    ecx,0x9
c0019086:	fc                   	cld    
c0019087:	89 e7                	mov    edi,esp
c0019089:	89 de                	mov    esi,ebx
c001908b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001908d:	55                   	push   ebp
c001908e:	e8 a9 19 ff ff       	call   c000aa3c <Device::preOpenPCI(PCIDeviceInfo)>
c0019093:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019096:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001909a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00190a2:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00190aa:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00190b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00190b5:	83 c4 4c             	add    esp,0x4c
c00190b8:	5b                   	pop    ebx
c00190b9:	5e                   	pop    esi
c00190ba:	5f                   	pop    edi
c00190bb:	5d                   	pop    ebp
c00190bc:	ff e0                	jmp    eax
c00190be:	83 ec 0c             	sub    esp,0xc
c00190c1:	68 58 01 00 00       	push   0x158
c00190c6:	e8 7e d8 fe ff       	call   c0006949 <malloc>
c00190cb:	89 c5                	mov    ebp,eax
c00190cd:	58                   	pop    eax
c00190ce:	5a                   	pop    edx
c00190cf:	68 5a f6 01 c0       	push   0xc001f65a
c00190d4:	55                   	push   ebp
c00190d5:	e8 ba 1c ff ff       	call   c000ad94 <DriverlessDevice::DriverlessDevice(char const*)>
c00190da:	59                   	pop    ecx
c00190db:	5f                   	pop    edi
c00190dc:	55                   	push   ebp
c00190dd:	56                   	push   esi
c00190de:	e8 13 1a ff ff       	call   c000aaf6 <Device::addChild(Device*)>
c00190e3:	b9 09 00 00 00       	mov    ecx,0x9
c00190e8:	fc                   	cld    
c00190e9:	89 df                	mov    edi,ebx
c00190eb:	89 de                	mov    esi,ebx
c00190ed:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00190ef:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00190f3:	83 c4 2c             	add    esp,0x2c
c00190f6:	5b                   	pop    ebx
c00190f7:	5e                   	pop    esi
c00190f8:	5f                   	pop    edi
c00190f9:	5d                   	pop    ebp
c00190fa:	e9 3d 19 ff ff       	jmp    c000aa3c <Device::preOpenPCI(PCIDeviceInfo)>
c00190ff:	83 c4 1c             	add    esp,0x1c
c0019102:	5b                   	pop    ebx
c0019103:	5e                   	pop    esi
c0019104:	5f                   	pop    edi
c0019105:	5d                   	pop    ebp
c0019106:	c3                   	ret    
c0019107:	90                   	nop

c0019108 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0019108:	55                   	push   ebp
c0019109:	57                   	push   edi
c001910a:	56                   	push   esi
c001910b:	53                   	push   ebx
c001910c:	83 ec 68             	sub    esp,0x68
c001910f:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0019113:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001911a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001911e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019125:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001912a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001912e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019135:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c001913a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001913e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0019143:	6a 0c                	push   0xc
c0019145:	57                   	push   edi
c0019146:	53                   	push   ebx
c0019147:	56                   	push   esi
c0019148:	55                   	push   ebp
c0019149:	e8 88 f8 ff ff       	call   c00189d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001914e:	83 c4 20             	add    esp,0x20
c0019151:	57                   	push   edi
c0019152:	53                   	push   ebx
c0019153:	56                   	push   esi
c0019154:	55                   	push   ebp
c0019155:	e8 70 f9 ff ff       	call   c0018aca <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001915a:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c001915f:	57                   	push   edi
c0019160:	53                   	push   ebx
c0019161:	56                   	push   esi
c0019162:	55                   	push   ebp
c0019163:	e8 f8 f9 ff ff       	call   c0018b60 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0019168:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001916c:	83 c4 14             	add    esp,0x14
c001916f:	6a 3c                	push   0x3c
c0019171:	57                   	push   edi
c0019172:	53                   	push   ebx
c0019173:	56                   	push   esi
c0019174:	55                   	push   ebp
c0019175:	e8 5c f8 ff ff       	call   c00189d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001917a:	0f b6 c4             	movzx  eax,ah
c001917d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019181:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0019185:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0019189:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c001918e:	8b 90 e4 01 00 00    	mov    edx,DWORD PTR [eax+0x1e4]
c0019194:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001919a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001919e:	83 c4 20             	add    esp,0x20
c00191a1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00191a6:	74 30                	je     c00191d8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c00191a8:	31 c0                	xor    eax,eax
c00191aa:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00191ae:	7e 28                	jle    c00191d8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c00191b0:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c00191b8:	39 cb                	cmp    ebx,ecx
c00191ba:	75 19                	jne    c00191d5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c00191bc:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c00191c4:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00191c8:	75 0b                	jne    c00191d5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c00191ca:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c00191d1:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c00191d5:	40                   	inc    eax
c00191d6:	eb d2                	jmp    c00191aa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c00191d8:	31 d2                	xor    edx,edx
c00191da:	83 ec 0c             	sub    esp,0xc
c00191dd:	57                   	push   edi
c00191de:	53                   	push   ebx
c00191df:	56                   	push   esi
c00191e0:	52                   	push   edx
c00191e1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00191e5:	55                   	push   ebp
c00191e6:	e8 c1 f9 ff ff       	call   c0018bac <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00191eb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00191ef:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00191f3:	42                   	inc    edx
c00191f4:	83 c4 20             	add    esp,0x20
c00191f7:	83 fa 06             	cmp    edx,0x6
c00191fa:	75 de                	jne    c00191da <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c00191fc:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0019201:	83 ec 0c             	sub    esp,0xc
c0019204:	86 e0                	xchg   al,ah
c0019206:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001920b:	6a 02                	push   0x2
c001920d:	57                   	push   edi
c001920e:	53                   	push   ebx
c001920f:	56                   	push   esi
c0019210:	55                   	push   ebp
c0019211:	e8 c0 f7 ff ff       	call   c00189d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019216:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001921b:	83 c4 20             	add    esp,0x20
c001921e:	57                   	push   edi
c001921f:	53                   	push   ebx
c0019220:	56                   	push   esi
c0019221:	55                   	push   ebp
c0019222:	e8 ed f8 ff ff       	call   c0018b14 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0019227:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001922b:	57                   	push   edi
c001922c:	53                   	push   ebx
c001922d:	56                   	push   esi
c001922e:	55                   	push   ebp
c001922f:	e8 4a f8 ff ff       	call   c0018a7e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019234:	b9 09 00 00 00       	mov    ecx,0x9
c0019239:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001923e:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0019242:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0019246:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001924a:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001924e:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0019252:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0019256:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001925a:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001925e:	83 ec 0c             	sub    esp,0xc
c0019261:	fc                   	cld    
c0019262:	89 e7                	mov    edi,esp
c0019264:	8d 74 24 58          	lea    esi,[esp+0x58]
c0019268:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001926a:	55                   	push   ebp
c001926b:	e8 26 fd ff ff       	call   c0018f96 <PCI::foundDevice(PCIDeviceInfo)>
c0019270:	81 c4 8c 00 00 00    	add    esp,0x8c
c0019276:	5b                   	pop    ebx
c0019277:	5e                   	pop    esi
c0019278:	5f                   	pop    edi
c0019279:	5d                   	pop    ebp
c001927a:	c3                   	ret    
c001927b:	90                   	nop

c001927c <PCI::checkDevice(unsigned char, unsigned char)>:
c001927c:	55                   	push   ebp
c001927d:	57                   	push   edi
c001927e:	56                   	push   esi
c001927f:	53                   	push   ebx
c0019280:	83 ec 0c             	sub    esp,0xc
c0019283:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0019287:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001928c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0019291:	6a 00                	push   0x0
c0019293:	56                   	push   esi
c0019294:	57                   	push   edi
c0019295:	55                   	push   ebp
c0019296:	e8 e3 f7 ff ff       	call   c0018a7e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001929b:	6a 00                	push   0x0
c001929d:	56                   	push   esi
c001929e:	57                   	push   edi
c001929f:	55                   	push   ebp
c00192a0:	e8 63 fe ff ff       	call   c0019108 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00192a5:	83 c4 20             	add    esp,0x20
c00192a8:	6a 00                	push   0x0
c00192aa:	56                   	push   esi
c00192ab:	57                   	push   edi
c00192ac:	55                   	push   ebp
c00192ad:	e8 f0 f7 ff ff       	call   c0018aa2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00192b2:	83 c4 10             	add    esp,0x10
c00192b5:	84 c0                	test   al,al
c00192b7:	79 27                	jns    c00192e0 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00192b9:	bb 01 00 00 00       	mov    ebx,0x1
c00192be:	53                   	push   ebx
c00192bf:	56                   	push   esi
c00192c0:	57                   	push   edi
c00192c1:	55                   	push   ebp
c00192c2:	e8 b7 f7 ff ff       	call   c0018a7e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00192c7:	83 c4 10             	add    esp,0x10
c00192ca:	66 40                	inc    ax
c00192cc:	74 0c                	je     c00192da <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00192ce:	53                   	push   ebx
c00192cf:	56                   	push   esi
c00192d0:	57                   	push   edi
c00192d1:	55                   	push   ebp
c00192d2:	e8 31 fe ff ff       	call   c0019108 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00192d7:	83 c4 10             	add    esp,0x10
c00192da:	43                   	inc    ebx
c00192db:	83 fb 08             	cmp    ebx,0x8
c00192de:	75 de                	jne    c00192be <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00192e0:	83 c4 0c             	add    esp,0xc
c00192e3:	5b                   	pop    ebx
c00192e4:	5e                   	pop    esi
c00192e5:	5f                   	pop    edi
c00192e6:	5d                   	pop    ebp
c00192e7:	c3                   	ret    

c00192e8 <PCI::detect()>:
c00192e8:	56                   	push   esi
c00192e9:	53                   	push   ebx
c00192ea:	53                   	push   ebx
c00192eb:	31 db                	xor    ebx,ebx
c00192ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00192f1:	6a 00                	push   0x0
c00192f3:	6a 00                	push   0x0
c00192f5:	6a 00                	push   0x0
c00192f7:	56                   	push   esi
c00192f8:	e8 a5 f7 ff ff       	call   c0018aa2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00192fd:	83 c4 10             	add    esp,0x10
c0019300:	a8 80                	test   al,0x80
c0019302:	75 21                	jne    c0019325 <PCI::detect()+0x3d>
c0019304:	51                   	push   ecx
c0019305:	51                   	push   ecx
c0019306:	6a 00                	push   0x0
c0019308:	56                   	push   esi
c0019309:	e8 64 fc ff ff       	call   c0018f72 <PCI::checkBus(unsigned char)>
c001930e:	83 c4 10             	add    esp,0x10
c0019311:	eb 24                	jmp    c0019337 <PCI::detect()+0x4f>
c0019313:	52                   	push   edx
c0019314:	52                   	push   edx
c0019315:	53                   	push   ebx
c0019316:	43                   	inc    ebx
c0019317:	56                   	push   esi
c0019318:	e8 55 fc ff ff       	call   c0018f72 <PCI::checkBus(unsigned char)>
c001931d:	83 c4 10             	add    esp,0x10
c0019320:	83 fb 08             	cmp    ebx,0x8
c0019323:	74 12                	je     c0019337 <PCI::detect()+0x4f>
c0019325:	53                   	push   ebx
c0019326:	6a 00                	push   0x0
c0019328:	6a 00                	push   0x0
c001932a:	56                   	push   esi
c001932b:	e8 4e f7 ff ff       	call   c0018a7e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019330:	83 c4 10             	add    esp,0x10
c0019333:	66 40                	inc    ax
c0019335:	74 dc                	je     c0019313 <PCI::detect()+0x2b>
c0019337:	58                   	pop    eax
c0019338:	5b                   	pop    ebx
c0019339:	5e                   	pop    esi
c001933a:	c3                   	ret    
c001933b:	90                   	nop

c001933c <IDE::close(int, int, void*)>:
c001933c:	83 c8 ff             	or     eax,0xffffffff
c001933f:	c3                   	ret    

c0019340 <IDE::IDE()>:
c0019340:	83 ec 0c             	sub    esp,0xc
c0019343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019347:	83 ec 08             	sub    esp,0x8
c001934a:	68 a0 f6 01 c0       	push   0xc001f6a0
c001934f:	50                   	push   eax
c0019350:	e8 e3 1a ff ff       	call   c000ae38 <HardDiskController::HardDiskController(char const*)>
c0019355:	83 c4 10             	add    esp,0x10
c0019358:	ba 30 f7 01 c0       	mov    edx,0xc001f730
c001935d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019361:	89 10                	mov    DWORD PTR [eax],edx
c0019363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019367:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001936e:	90                   	nop
c001936f:	83 c4 0c             	add    esp,0xc
c0019372:	c3                   	ret    
c0019373:	90                   	nop

c0019374 <IDE::prepareInterrupt(unsigned char)>:
c0019374:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019379:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001937d:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0019385:	c3                   	ret    

c0019386 <selectDrive(unsigned char, unsigned char)>:
c0019386:	c3                   	ret    
c0019387:	90                   	nop

c0019388 <IDE::getBase(unsigned char)>:
c0019388:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001938d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019391:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0019399:	c3                   	ret    

c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001939a:	55                   	push   ebp
c001939b:	57                   	push   edi
c001939c:	56                   	push   esi
c001939d:	53                   	push   ebx
c001939e:	83 ec 1c             	sub    esp,0x1c
c00193a1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00193a5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00193a9:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00193ac:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00193b0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00193b4:	80 f9 03             	cmp    cl,0x3
c00193b7:	77 51                	ja     c001940a <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00193b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193bd:	0f b6 f2             	movzx  esi,dl
c00193c0:	0f b6 db             	movzx  ebx,bl
c00193c3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00193c6:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00193ca:	83 ca 80             	or     edx,0xffffff80
c00193cd:	0f b6 d2             	movzx  edx,dl
c00193d0:	52                   	push   edx
c00193d1:	6a 0c                	push   0xc
c00193d3:	56                   	push   esi
c00193d4:	57                   	push   edi
c00193d5:	e8 c0 ff ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00193da:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00193df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00193e3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00193e7:	ee                   	out    dx,al
c00193e8:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00193ed:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00193f1:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00193f5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00193f9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019401:	83 c4 2c             	add    esp,0x2c
c0019404:	5b                   	pop    ebx
c0019405:	5e                   	pop    esi
c0019406:	5f                   	pop    edi
c0019407:	5d                   	pop    ebp
c0019408:	eb 90                	jmp    c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001940a:	80 fb 07             	cmp    bl,0x7
c001940d:	77 12                	ja     c0019421 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001940f:	0f b6 d2             	movzx  edx,dl
c0019412:	0f b6 db             	movzx  ebx,bl
c0019415:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001941d:	89 da                	mov    edx,ebx
c001941f:	eb 2f                	jmp    c0019450 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019421:	80 fb 0d             	cmp    bl,0xd
c0019424:	77 13                	ja     c0019439 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0019426:	0f b6 d2             	movzx  edx,dl
c0019429:	0f b6 db             	movzx  ebx,bl
c001942c:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0019433:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0019437:	eb 17                	jmp    c0019450 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019439:	80 fb 15             	cmp    bl,0x15
c001943c:	77 13                	ja     c0019451 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001943e:	0f b6 d2             	movzx  edx,dl
c0019441:	0f b6 db             	movzx  ebx,bl
c0019444:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001944c:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0019450:	ee                   	out    dx,al
c0019451:	83 c4 1c             	add    esp,0x1c
c0019454:	5b                   	pop    ebx
c0019455:	5e                   	pop    esi
c0019456:	5f                   	pop    edi
c0019457:	5d                   	pop    ebp
c0019458:	c3                   	ret    
c0019459:	90                   	nop

c001945a <IDE::read(unsigned char, unsigned char)>:
c001945a:	55                   	push   ebp
c001945b:	57                   	push   edi
c001945c:	56                   	push   esi
c001945d:	53                   	push   ebx
c001945e:	83 ec 1c             	sub    esp,0x1c
c0019461:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0019465:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019469:	8d 43 f8             	lea    eax,[ebx-0x8]
c001946c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019470:	3c 03                	cmp    al,0x3
c0019472:	77 43                	ja     c00194b7 <IDE::read(unsigned char, unsigned char)+0x5d>
c0019474:	0f b6 f2             	movzx  esi,dl
c0019477:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001947a:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001947e:	83 c8 80             	or     eax,0xffffff80
c0019481:	0f b6 c0             	movzx  eax,al
c0019484:	50                   	push   eax
c0019485:	6a 0c                	push   0xc
c0019487:	56                   	push   esi
c0019488:	57                   	push   edi
c0019489:	e8 0c ff ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001948e:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0019493:	0f b6 c3             	movzx  eax,bl
c0019496:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001949a:	ec                   	in     al,dx
c001949b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001949f:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00194a4:	52                   	push   edx
c00194a5:	6a 0c                	push   0xc
c00194a7:	56                   	push   esi
c00194a8:	57                   	push   edi
c00194a9:	e8 ec fe ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00194ae:	83 c4 20             	add    esp,0x20
c00194b1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00194b5:	eb 49                	jmp    c0019500 <IDE::read(unsigned char, unsigned char)+0xa6>
c00194b7:	80 fb 07             	cmp    bl,0x7
c00194ba:	77 12                	ja     c00194ce <IDE::read(unsigned char, unsigned char)+0x74>
c00194bc:	0f b6 d2             	movzx  edx,dl
c00194bf:	0f b6 c3             	movzx  eax,bl
c00194c2:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00194ca:	89 c2                	mov    edx,eax
c00194cc:	eb 31                	jmp    c00194ff <IDE::read(unsigned char, unsigned char)+0xa5>
c00194ce:	80 fb 0d             	cmp    bl,0xd
c00194d1:	77 13                	ja     c00194e6 <IDE::read(unsigned char, unsigned char)+0x8c>
c00194d3:	0f b6 d2             	movzx  edx,dl
c00194d6:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00194dd:	0f b6 d3             	movzx  edx,bl
c00194e0:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00194e4:	eb 19                	jmp    c00194ff <IDE::read(unsigned char, unsigned char)+0xa5>
c00194e6:	31 c0                	xor    eax,eax
c00194e8:	80 fb 15             	cmp    bl,0x15
c00194eb:	77 13                	ja     c0019500 <IDE::read(unsigned char, unsigned char)+0xa6>
c00194ed:	0f b6 d2             	movzx  edx,dl
c00194f0:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00194f8:	0f b6 d3             	movzx  edx,bl
c00194fb:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00194ff:	ec                   	in     al,dx
c0019500:	83 c4 1c             	add    esp,0x1c
c0019503:	5b                   	pop    ebx
c0019504:	5e                   	pop    esi
c0019505:	5f                   	pop    edi
c0019506:	5d                   	pop    ebp
c0019507:	c3                   	ret    

c0019508 <IDE::waitInterrupt(unsigned char)>:
c0019508:	55                   	push   ebp
c0019509:	57                   	push   edi
c001950a:	56                   	push   esi
c001950b:	53                   	push   ebx
c001950c:	31 db                	xor    ebx,ebx
c001950e:	83 ec 0c             	sub    esp,0xc
c0019511:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019515:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001951a:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0019522:	89 e8                	mov    eax,ebp
c0019524:	84 c0                	test   al,al
c0019526:	75 30                	jne    c0019558 <IDE::waitInterrupt(unsigned char)+0x50>
c0019528:	50                   	push   eax
c0019529:	6a 0c                	push   0xc
c001952b:	56                   	push   esi
c001952c:	57                   	push   edi
c001952d:	e8 28 ff ff ff       	call   c001945a <IDE::read(unsigned char, unsigned char)>
c0019532:	83 c4 10             	add    esp,0x10
c0019535:	a8 01                	test   al,0x1
c0019537:	75 27                	jne    c0019560 <IDE::waitInterrupt(unsigned char)+0x58>
c0019539:	f6 c3 04             	test   bl,0x4
c001953c:	75 12                	jne    c0019550 <IDE::waitInterrupt(unsigned char)+0x48>
c001953e:	83 fb 32             	cmp    ebx,0x32
c0019541:	7e 0d                	jle    c0019550 <IDE::waitInterrupt(unsigned char)+0x48>
c0019543:	83 ec 0c             	sub    esp,0xc
c0019546:	6a 64                	push   0x64
c0019548:	e8 d7 95 ff ff       	call   c0012b24 <milliTenthSleep(unsigned int)>
c001954d:	83 c4 10             	add    esp,0x10
c0019550:	83 fb 3c             	cmp    ebx,0x3c
c0019553:	74 0b                	je     c0019560 <IDE::waitInterrupt(unsigned char)+0x58>
c0019555:	43                   	inc    ebx
c0019556:	eb c2                	jmp    c001951a <IDE::waitInterrupt(unsigned char)+0x12>
c0019558:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0019560:	83 c4 0c             	add    esp,0xc
c0019563:	89 e8                	mov    eax,ebp
c0019565:	5b                   	pop    ebx
c0019566:	5e                   	pop    esi
c0019567:	5f                   	pop    edi
c0019568:	5d                   	pop    ebp
c0019569:	c3                   	ret    

c001956a <ideChannel0IRQHandler(regs*, void*)>:
c001956a:	83 ec 10             	sub    esp,0x10
c001956d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019571:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0019578:	6a 07                	push   0x7
c001957a:	6a 00                	push   0x0
c001957c:	50                   	push   eax
c001957d:	e8 d8 fe ff ff       	call   c001945a <IDE::read(unsigned char, unsigned char)>
c0019582:	83 c4 1c             	add    esp,0x1c
c0019585:	c3                   	ret    

c0019586 <ideChannel1IRQHandler(regs*, void*)>:
c0019586:	83 ec 10             	sub    esp,0x10
c0019589:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001958d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0019594:	6a 07                	push   0x7
c0019596:	6a 01                	push   0x1
c0019598:	50                   	push   eax
c0019599:	e8 bc fe ff ff       	call   c001945a <IDE::read(unsigned char, unsigned char)>
c001959e:	83 c4 1c             	add    esp,0x1c
c00195a1:	c3                   	ret    

c00195a2 <IDE::enableIRQs(unsigned char, bool)>:
c00195a2:	57                   	push   edi
c00195a3:	56                   	push   esi
c00195a4:	be 04 00 00 00       	mov    esi,0x4
c00195a9:	53                   	push   ebx
c00195aa:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00195af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00195b3:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00195b8:	0f 94 c0             	sete   al
c00195bb:	d1 e0                	shl    eax,1
c00195bd:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00195c4:	0f b6 c0             	movzx  eax,al
c00195c7:	50                   	push   eax
c00195c8:	6a 0c                	push   0xc
c00195ca:	57                   	push   edi
c00195cb:	53                   	push   ebx
c00195cc:	e8 c9 fd ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00195d1:	83 c4 10             	add    esp,0x10
c00195d4:	50                   	push   eax
c00195d5:	6a 0c                	push   0xc
c00195d7:	57                   	push   edi
c00195d8:	53                   	push   ebx
c00195d9:	e8 7c fe ff ff       	call   c001945a <IDE::read(unsigned char, unsigned char)>
c00195de:	83 c4 10             	add    esp,0x10
c00195e1:	4e                   	dec    esi
c00195e2:	75 f0                	jne    c00195d4 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00195e4:	5b                   	pop    ebx
c00195e5:	5e                   	pop    esi
c00195e6:	5f                   	pop    edi
c00195e7:	c3                   	ret    

c00195e8 <IDE::open(int, int, void*)>:
c00195e8:	55                   	push   ebp
c00195e9:	57                   	push   edi
c00195ea:	56                   	push   esi
c00195eb:	53                   	push   ebx
c00195ec:	83 ec 1c             	sub    esp,0x1c
c00195ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00195f3:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00195fc:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0019605:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001960c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0019613:	0f 85 b0 02 00 00    	jne    c00198c9 <IDE::open(int, int, void*)+0x2e1>
c0019619:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001961f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0019623:	83 e0 7f             	and    eax,0x7f
c0019626:	3c 05                	cmp    al,0x5
c0019628:	74 04                	je     c001962e <IDE::open(int, int, void*)+0x46>
c001962a:	3c 0f                	cmp    al,0xf
c001962c:	75 32                	jne    c0019660 <IDE::open(int, int, void*)+0x78>
c001962e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0019634:	83 e0 fc             	and    eax,0xfffffffc
c0019637:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001963e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0019644:	83 e0 fc             	and    eax,0xfffffffc
c0019647:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001964e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0019654:	83 e0 fc             	and    eax,0xfffffffc
c0019657:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001965e:	eb 14                	jmp    c0019674 <IDE::open(int, int, void*)+0x8c>
c0019660:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001966a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0019674:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001967b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0019682:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019686:	89 c6                	mov    esi,eax
c0019688:	bf f8 0c 00 00       	mov    edi,0xcf8
c001968d:	c1 e6 10             	shl    esi,0x10
c0019690:	89 e8                	mov    eax,ebp
c0019692:	89 fa                	mov    edx,edi
c0019694:	c1 e0 0b             	shl    eax,0xb
c0019697:	09 f0                	or     eax,esi
c0019699:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00196a0:	c1 e6 08             	shl    esi,0x8
c00196a3:	09 c6                	or     esi,eax
c00196a5:	89 f0                	mov    eax,esi
c00196a7:	0d 08 00 00 80       	or     eax,0x80000008
c00196ac:	ef                   	out    dx,eax
c00196ad:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00196b2:	89 ca                	mov    edx,ecx
c00196b4:	ed                   	in     eax,dx
c00196b5:	c1 e8 10             	shr    eax,0x10
c00196b8:	3d ff ff 00 00       	cmp    eax,0xffff
c00196bd:	0f 84 f5 00 00 00    	je     c00197b8 <IDE::open(int, int, void*)+0x1d0>
c00196c3:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00196c9:	89 fa                	mov    edx,edi
c00196cb:	89 f0                	mov    eax,esi
c00196cd:	ef                   	out    dx,eax
c00196ce:	b0 fe                	mov    al,0xfe
c00196d0:	89 ca                	mov    edx,ecx
c00196d2:	ee                   	out    dx,al
c00196d3:	89 f0                	mov    eax,esi
c00196d5:	89 fa                	mov    edx,edi
c00196d7:	ef                   	out    dx,eax
c00196d8:	89 ca                	mov    edx,ecx
c00196da:	ed                   	in     eax,dx
c00196db:	3c fe                	cmp    al,0xfe
c00196dd:	0f 85 a9 00 00 00    	jne    c001978c <IDE::open(int, int, void*)+0x1a4>
c00196e3:	8b 15 68 03 02 c0    	mov    edx,DWORD PTR ds:0xc0020368
c00196e9:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00196f0:	74 33                	je     c0019725 <IDE::open(int, int, void*)+0x13d>
c00196f2:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00196f8:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00196fc:	40                   	inc    eax
c00196fd:	83 ec 0c             	sub    esp,0xc
c0019700:	0f b6 c0             	movzx  eax,al
c0019703:	50                   	push   eax
c0019704:	55                   	push   ebp
c0019705:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019709:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001970f:	51                   	push   ecx
c0019710:	e8 0b 41 ff ff       	call   c000d820 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0019715:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001971a:	83 c4 1c             	add    esp,0x1c
c001971d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019723:	eb 0a                	jmp    c001972f <IDE::open(int, int, void*)+0x147>
c0019725:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001972f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0019736:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001973d:	c1 e1 10             	shl    ecx,0x10
c0019740:	c1 e0 08             	shl    eax,0x8
c0019743:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019748:	09 c1                	or     ecx,eax
c001974a:	89 fa                	mov    edx,edi
c001974c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0019753:	c1 e0 0b             	shl    eax,0xb
c0019756:	09 c1                	or     ecx,eax
c0019758:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001975e:	89 c8                	mov    eax,ecx
c0019760:	ef                   	out    dx,eax
c0019761:	be fc 0c 00 00       	mov    esi,0xcfc
c0019766:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001976c:	89 f2                	mov    edx,esi
c001976e:	ee                   	out    dx,al
c001976f:	89 c8                	mov    eax,ecx
c0019771:	89 fa                	mov    edx,edi
c0019773:	ef                   	out    dx,eax
c0019774:	89 f2                	mov    edx,esi
c0019776:	ed                   	in     eax,dx
c0019777:	0f b6 c0             	movzx  eax,al
c001977a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0019780:	74 46                	je     c00197c8 <IDE::open(int, int, void*)+0x1e0>
c0019782:	83 ec 0c             	sub    esp,0xc
c0019785:	68 b8 f6 01 c0       	push   0xc001f6b8
c001978a:	eb 34                	jmp    c00197c0 <IDE::open(int, int, void*)+0x1d8>
c001978c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0019795:	75 17                	jne    c00197ae <IDE::open(int, int, void*)+0x1c6>
c0019797:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001979c:	74 07                	je     c00197a5 <IDE::open(int, int, void*)+0x1bd>
c001979e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00197a3:	75 09                	jne    c00197ae <IDE::open(int, int, void*)+0x1c6>
c00197a5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00197ac:	eb 1a                	jmp    c00197c8 <IDE::open(int, int, void*)+0x1e0>
c00197ae:	83 ec 0c             	sub    esp,0xc
c00197b1:	68 c0 f6 01 c0       	push   0xc001f6c0
c00197b6:	eb 08                	jmp    c00197c0 <IDE::open(int, int, void*)+0x1d8>
c00197b8:	83 ec 0c             	sub    esp,0xc
c00197bb:	68 f1 f6 01 c0       	push   0xc001f6f1
c00197c0:	e8 e4 5b ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c00197c5:	83 c4 10             	add    esp,0x10
c00197c8:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00197cf:	79 1a                	jns    c00197eb <IDE::open(int, int, void*)+0x203>
c00197d1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00197d7:	83 e0 fc             	and    eax,0xfffffffc
c00197da:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00197e1:	83 c0 08             	add    eax,0x8
c00197e4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00197eb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197f1:	89 c2                	mov    edx,eax
c00197f3:	83 e2 0f             	and    edx,0xf
c00197f6:	66 83 fa 08          	cmp    dx,0x8
c00197fa:	75 0a                	jne    c0019806 <IDE::open(int, int, void*)+0x21e>
c00197fc:	83 e8 02             	sub    eax,0x2
c00197ff:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019806:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001980c:	89 c2                	mov    edx,eax
c001980e:	83 e2 0f             	and    edx,0xf
c0019811:	66 83 fa 08          	cmp    dx,0x8
c0019815:	75 0a                	jne    c0019821 <IDE::open(int, int, void*)+0x239>
c0019817:	83 e8 02             	sub    eax,0x2
c001981a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019821:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019828:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001982f:	89 d0                	mov    eax,edx
c0019831:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019834:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019838:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001983c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001983f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019844:	0f b6 c9             	movzx  ecx,cl
c0019847:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001984e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019851:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019855:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0019859:	8d 50 02             	lea    edx,[eax+0x2]
c001985c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019861:	0f b6 d2             	movzx  edx,dl
c0019864:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001986a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001986d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019871:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0019875:	8d 48 03             	lea    ecx,[eax+0x3]
c0019878:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001987d:	0f b6 c9             	movzx  ecx,cl
c0019880:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0019886:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019889:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001988d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0019891:	8d 50 04             	lea    edx,[eax+0x4]
c0019894:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001989a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001989f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00198a6:	66 85 f6             	test   si,si
c00198a9:	74 5b                	je     c0019906 <IDE::open(int, int, void*)+0x31e>
c00198ab:	0f b6 d2             	movzx  edx,dl
c00198ae:	83 c0 05             	add    eax,0x5
c00198b1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00198b4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00198b8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00198bc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00198c2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00198c7:	eb 3d                	jmp    c0019906 <IDE::open(int, int, void*)+0x31e>
c00198c9:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c00198cf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00198d6:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00198dd:	66 05 06 02          	add    ax,0x206
c00198e1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00198e8:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c00198ef:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00198f6:	66 05 06 02          	add    ax,0x206
c00198fa:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019901:	e9 e5 fe ff ff       	jmp    c00197eb <IDE::open(int, int, void*)+0x203>
c0019906:	50                   	push   eax
c0019907:	50                   	push   eax
c0019908:	6a 00                	push   0x0
c001990a:	53                   	push   ebx
c001990b:	e8 64 fa ff ff       	call   c0019374 <IDE::prepareInterrupt(unsigned char)>
c0019910:	5a                   	pop    edx
c0019911:	59                   	pop    ecx
c0019912:	6a 01                	push   0x1
c0019914:	53                   	push   ebx
c0019915:	e8 5a fa ff ff       	call   c0019374 <IDE::prepareInterrupt(unsigned char)>
c001991a:	83 c4 0c             	add    esp,0xc
c001991d:	6a 00                	push   0x0
c001991f:	6a 00                	push   0x0
c0019921:	53                   	push   ebx
c0019922:	e8 7b fc ff ff       	call   c00195a2 <IDE::enableIRQs(unsigned char, bool)>
c0019927:	83 c4 0c             	add    esp,0xc
c001992a:	6a 00                	push   0x0
c001992c:	6a 01                	push   0x1
c001992e:	53                   	push   ebx
c001992f:	e8 6e fc ff ff       	call   c00195a2 <IDE::enableIRQs(unsigned char, bool)>
c0019934:	83 c4 10             	add    esp,0x10
c0019937:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001993e:	74 34                	je     c0019974 <IDE::open(int, int, void*)+0x38c>
c0019940:	83 ec 0c             	sub    esp,0xc
c0019943:	53                   	push   ebx
c0019944:	6a 01                	push   0x1
c0019946:	68 6a 95 01 c0       	push   0xc001956a
c001994b:	6a 0e                	push   0xe
c001994d:	53                   	push   ebx
c001994e:	e8 4f 11 ff ff       	call   c000aaa2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019953:	83 c4 14             	add    esp,0x14
c0019956:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001995c:	53                   	push   ebx
c001995d:	6a 01                	push   0x1
c001995f:	68 86 95 01 c0       	push   0xc0019586
c0019964:	6a 0f                	push   0xf
c0019966:	53                   	push   ebx
c0019967:	e8 36 11 ff ff       	call   c000aaa2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001996c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0019972:	eb 38                	jmp    c00199ac <IDE::open(int, int, void*)+0x3c4>
c0019974:	83 ec 0c             	sub    esp,0xc
c0019977:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0019981:	53                   	push   ebx
c0019982:	6a 00                	push   0x0
c0019984:	68 6a 95 01 c0       	push   0xc001956a
c0019989:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001998f:	53                   	push   ebx
c0019990:	e8 0d 11 ff ff       	call   c000aaa2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019995:	83 c4 14             	add    esp,0x14
c0019998:	53                   	push   ebx
c0019999:	6a 00                	push   0x0
c001999b:	68 86 95 01 c0       	push   0xc0019586
c00199a0:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00199a6:	53                   	push   ebx
c00199a7:	e8 f6 10 ff ff       	call   c000aaa2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00199ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00199ae:	83 c4 20             	add    esp,0x20
c00199b1:	83 ec 0c             	sub    esp,0xc
c00199b4:	53                   	push   ebx
c00199b5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00199b8:	83 c4 0c             	add    esp,0xc
c00199bb:	6a 07                	push   0x7
c00199bd:	6a 00                	push   0x0
c00199bf:	53                   	push   ebx
c00199c0:	e8 95 fa ff ff       	call   c001945a <IDE::read(unsigned char, unsigned char)>
c00199c5:	83 c4 0c             	add    esp,0xc
c00199c8:	6a 07                	push   0x7
c00199ca:	6a 01                	push   0x1
c00199cc:	53                   	push   ebx
c00199cd:	e8 88 fa ff ff       	call   c001945a <IDE::read(unsigned char, unsigned char)>
c00199d2:	83 c4 0c             	add    esp,0xc
c00199d5:	6a 01                	push   0x1
c00199d7:	6a 00                	push   0x0
c00199d9:	53                   	push   ebx
c00199da:	e8 c3 fb ff ff       	call   c00195a2 <IDE::enableIRQs(unsigned char, bool)>
c00199df:	83 c4 0c             	add    esp,0xc
c00199e2:	6a 01                	push   0x1
c00199e4:	6a 01                	push   0x1
c00199e6:	53                   	push   ebx
c00199e7:	e8 b6 fb ff ff       	call   c00195a2 <IDE::enableIRQs(unsigned char, bool)>
c00199ec:	83 c4 2c             	add    esp,0x2c
c00199ef:	31 c0                	xor    eax,eax
c00199f1:	5b                   	pop    ebx
c00199f2:	5e                   	pop    esi
c00199f3:	5f                   	pop    edi
c00199f4:	5d                   	pop    ebp
c00199f5:	c3                   	ret    

c00199f6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00199f6:	55                   	push   ebp
c00199f7:	57                   	push   edi
c00199f8:	56                   	push   esi
c00199f9:	53                   	push   ebx
c00199fa:	83 ec 1c             	sub    esp,0x1c
c00199fd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a01:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019a05:	8d 50 f8             	lea    edx,[eax-0x8]
c0019a08:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019a0c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0019a10:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019a14:	80 fa 03             	cmp    dl,0x3
c0019a17:	77 5d                	ja     c0019a76 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019a19:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019a1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a21:	0f b6 db             	movzx  ebx,bl
c0019a24:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0019a27:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0019a2b:	83 ca 80             	or     edx,0xffffff80
c0019a2e:	0f b6 d2             	movzx  edx,dl
c0019a31:	52                   	push   edx
c0019a32:	6a 0c                	push   0xc
c0019a34:	53                   	push   ebx
c0019a35:	56                   	push   esi
c0019a36:	e8 5f f9 ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a3b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0019a40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019a44:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019a48:	0f b6 c0             	movzx  eax,al
c0019a4b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0019a4f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019a51:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0019a56:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0019a5a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0019a5e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019a62:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019a6a:	83 c4 2c             	add    esp,0x2c
c0019a6d:	5b                   	pop    ebx
c0019a6e:	5e                   	pop    esi
c0019a6f:	5f                   	pop    edi
c0019a70:	5d                   	pop    ebp
c0019a71:	e9 24 f9 ff ff       	jmp    c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a76:	3c 07                	cmp    al,0x7
c0019a78:	77 10                	ja     c0019a8a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0019a7a:	0f b6 db             	movzx  ebx,bl
c0019a7d:	0f b6 d0             	movzx  edx,al
c0019a80:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0019a88:	eb 2d                	jmp    c0019ab7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019a8a:	3c 0d                	cmp    al,0xd
c0019a8c:	77 13                	ja     c0019aa1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0019a8e:	0f b6 db             	movzx  ebx,bl
c0019a91:	0f b6 c0             	movzx  eax,al
c0019a94:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0019a9b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0019a9f:	eb 16                	jmp    c0019ab7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019aa1:	3c 15                	cmp    al,0x15
c0019aa3:	77 14                	ja     c0019ab9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0019aa5:	0f b6 db             	movzx  ebx,bl
c0019aa8:	0f b6 c0             	movzx  eax,al
c0019aab:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0019ab3:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0019ab7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019ab9:	83 c4 1c             	add    esp,0x1c
c0019abc:	5b                   	pop    ebx
c0019abd:	5e                   	pop    esi
c0019abe:	5f                   	pop    edi
c0019abf:	5d                   	pop    ebp
c0019ac0:	c3                   	ret    
c0019ac1:	90                   	nop

c0019ac2 <IDE::detect()>:
c0019ac2:	55                   	push   ebp
c0019ac3:	57                   	push   edi
c0019ac4:	56                   	push   esi
c0019ac5:	53                   	push   ebx
c0019ac6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019acc:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0019ad3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0019ada:	0f 85 97 02 00 00    	jne    c0019d77 <IDE::detect()+0x2b5>
c0019ae0:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0019ae7:	31 f6                	xor    esi,esi
c0019ae9:	31 ed                	xor    ebp,ebp
c0019aeb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019af3:	89 e8                	mov    eax,ebp
c0019af5:	c1 e0 06             	shl    eax,0x6
c0019af8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0019b00:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019b04:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019b08:	c1 e0 04             	shl    eax,0x4
c0019b0b:	83 c8 a0             	or     eax,0xffffffa0
c0019b0e:	0f b6 c0             	movzx  eax,al
c0019b11:	50                   	push   eax
c0019b12:	6a 06                	push   0x6
c0019b14:	56                   	push   esi
c0019b15:	53                   	push   ebx
c0019b16:	e8 7f f8 ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019b1b:	83 c4 0c             	add    esp,0xc
c0019b1e:	6a 0c                	push   0xc
c0019b20:	56                   	push   esi
c0019b21:	53                   	push   ebx
c0019b22:	e8 33 f9 ff ff       	call   c001945a <IDE::read(unsigned char, unsigned char)>
c0019b27:	83 c4 0c             	add    esp,0xc
c0019b2a:	6a 0c                	push   0xc
c0019b2c:	56                   	push   esi
c0019b2d:	53                   	push   ebx
c0019b2e:	e8 27 f9 ff ff       	call   c001945a <IDE::read(unsigned char, unsigned char)>
c0019b33:	83 c4 0c             	add    esp,0xc
c0019b36:	6a 0c                	push   0xc
c0019b38:	56                   	push   esi
c0019b39:	53                   	push   ebx
c0019b3a:	e8 1b f9 ff ff       	call   c001945a <IDE::read(unsigned char, unsigned char)>
c0019b3f:	83 c4 0c             	add    esp,0xc
c0019b42:	6a 0c                	push   0xc
c0019b44:	56                   	push   esi
c0019b45:	53                   	push   ebx
c0019b46:	e8 0f f9 ff ff       	call   c001945a <IDE::read(unsigned char, unsigned char)>
c0019b4b:	68 ec 00 00 00       	push   0xec
c0019b50:	6a 07                	push   0x7
c0019b52:	56                   	push   esi
c0019b53:	53                   	push   ebx
c0019b54:	e8 41 f8 ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019b59:	83 c4 1c             	add    esp,0x1c
c0019b5c:	6a 0c                	push   0xc
c0019b5e:	56                   	push   esi
c0019b5f:	53                   	push   ebx
c0019b60:	e8 f5 f8 ff ff       	call   c001945a <IDE::read(unsigned char, unsigned char)>
c0019b65:	83 c4 0c             	add    esp,0xc
c0019b68:	6a 0c                	push   0xc
c0019b6a:	56                   	push   esi
c0019b6b:	53                   	push   ebx
c0019b6c:	e8 e9 f8 ff ff       	call   c001945a <IDE::read(unsigned char, unsigned char)>
c0019b71:	83 c4 0c             	add    esp,0xc
c0019b74:	6a 0c                	push   0xc
c0019b76:	56                   	push   esi
c0019b77:	53                   	push   ebx
c0019b78:	e8 dd f8 ff ff       	call   c001945a <IDE::read(unsigned char, unsigned char)>
c0019b7d:	83 c4 0c             	add    esp,0xc
c0019b80:	6a 0c                	push   0xc
c0019b82:	56                   	push   esi
c0019b83:	53                   	push   ebx
c0019b84:	e8 d1 f8 ff ff       	call   c001945a <IDE::read(unsigned char, unsigned char)>
c0019b89:	83 c4 0c             	add    esp,0xc
c0019b8c:	6a 0c                	push   0xc
c0019b8e:	56                   	push   esi
c0019b8f:	53                   	push   ebx
c0019b90:	e8 c5 f8 ff ff       	call   c001945a <IDE::read(unsigned char, unsigned char)>
c0019b95:	83 c4 10             	add    esp,0x10
c0019b98:	84 c0                	test   al,al
c0019b9a:	0f 84 5f 01 00 00    	je     c0019cff <IDE::detect()+0x23d>
c0019ba0:	31 ff                	xor    edi,edi
c0019ba2:	50                   	push   eax
c0019ba3:	6a 0c                	push   0xc
c0019ba5:	56                   	push   esi
c0019ba6:	53                   	push   ebx
c0019ba7:	e8 ae f8 ff ff       	call   c001945a <IDE::read(unsigned char, unsigned char)>
c0019bac:	83 c4 10             	add    esp,0x10
c0019baf:	a8 01                	test   al,0x1
c0019bb1:	0f 85 69 01 00 00    	jne    c0019d20 <IDE::detect()+0x25e>
c0019bb7:	84 c0                	test   al,al
c0019bb9:	78 04                	js     c0019bbf <IDE::detect()+0xfd>
c0019bbb:	a8 08                	test   al,0x8
c0019bbd:	75 23                	jne    c0019be2 <IDE::detect()+0x120>
c0019bbf:	47                   	inc    edi
c0019bc0:	81 ff 17 01 00 00    	cmp    edi,0x117
c0019bc6:	7e da                	jle    c0019ba2 <IDE::detect()+0xe0>
c0019bc8:	83 ec 0c             	sub    esp,0xc
c0019bcb:	6a 32                	push   0x32
c0019bcd:	e8 52 8f ff ff       	call   c0012b24 <milliTenthSleep(unsigned int)>
c0019bd2:	83 c4 10             	add    esp,0x10
c0019bd5:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0019bdb:	75 c5                	jne    c0019ba2 <IDE::detect()+0xe0>
c0019bdd:	e9 3e 01 00 00       	jmp    c0019d20 <IDE::detect()+0x25e>
c0019be2:	31 c9                	xor    ecx,ecx
c0019be4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019be8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019bec:	83 ec 0c             	sub    esp,0xc
c0019bef:	68 80 00 00 00       	push   0x80
c0019bf4:	57                   	push   edi
c0019bf5:	6a 00                	push   0x0
c0019bf7:	56                   	push   esi
c0019bf8:	53                   	push   ebx
c0019bf9:	e8 f8 fd ff ff       	call   c00199f6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0019bfe:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0019c03:	89 e8                	mov    eax,ebp
c0019c05:	89 d1                	mov    ecx,edx
c0019c07:	c1 e0 06             	shl    eax,0x6
c0019c0a:	01 d8                	add    eax,ebx
c0019c0c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0019c13:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0019c1a:	89 f2                	mov    edx,esi
c0019c1c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0019c22:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0019c26:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0019c2c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019c30:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0019c37:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0019c3f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0019c46:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0019c4e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0019c54:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0019c5b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0019c61:	8d 54 24 58          	lea    edx,[esp+0x58]
c0019c65:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019c69:	83 c4 20             	add    esp,0x20
c0019c6c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0019c6f:	83 c0 02             	add    eax,0x2
c0019c72:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0019c78:	83 c7 02             	add    edi,0x2
c0019c7b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0019c7e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0019c84:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0019c88:	75 e2                	jne    c0019c6c <IDE::detect()+0x1aa>
c0019c8a:	89 e8                	mov    eax,ebp
c0019c8c:	c1 e0 06             	shl    eax,0x6
c0019c8f:	01 d8                	add    eax,ebx
c0019c91:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0019c97:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0019c9e:	66 c1 ea 09          	shr    dx,0x9
c0019ca2:	83 e2 01             	and    edx,0x1
c0019ca5:	84 c9                	test   cl,cl
c0019ca7:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0019cad:	75 22                	jne    c0019cd1 <IDE::detect()+0x20f>
c0019caf:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0019cb6:	74 46                	je     c0019cfe <IDE::detect()+0x23c>
c0019cb8:	83 ec 0c             	sub    esp,0xc
c0019cbb:	68 7c 01 00 00       	push   0x17c
c0019cc0:	e8 84 cc fe ff       	call   c0006949 <malloc>
c0019cc5:	89 c7                	mov    edi,eax
c0019cc7:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cca:	e8 fd 04 00 00       	call   c001a1cc <ATA::ATA()>
c0019ccf:	eb 17                	jmp    c0019ce8 <IDE::detect()+0x226>
c0019cd1:	83 ec 0c             	sub    esp,0xc
c0019cd4:	68 84 01 00 00       	push   0x184
c0019cd9:	e8 6b cc fe ff       	call   c0006949 <malloc>
c0019cde:	89 c7                	mov    edi,eax
c0019ce0:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ce3:	e8 dc 0a 00 00       	call   c001a7c4 <ATAPI::ATAPI()>
c0019ce8:	5a                   	pop    edx
c0019ce9:	59                   	pop    ecx
c0019cea:	57                   	push   edi
c0019ceb:	53                   	push   ebx
c0019cec:	e8 05 0e ff ff       	call   c000aaf6 <Device::addChild(Device*)>
c0019cf1:	8b 07                	mov    eax,DWORD PTR [edi]
c0019cf3:	53                   	push   ebx
c0019cf4:	55                   	push   ebp
c0019cf5:	6a 00                	push   0x0
c0019cf7:	57                   	push   edi
c0019cf8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019cfb:	83 c4 20             	add    esp,0x20
c0019cfe:	45                   	inc    ebp
c0019cff:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019d04:	74 0d                	je     c0019d13 <IDE::detect()+0x251>
c0019d06:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019d0e:	e9 e0 fd ff ff       	jmp    c0019af3 <IDE::detect()+0x31>
c0019d13:	4e                   	dec    esi
c0019d14:	74 61                	je     c0019d77 <IDE::detect()+0x2b5>
c0019d16:	be 01 00 00 00       	mov    esi,0x1
c0019d1b:	e9 cb fd ff ff       	jmp    c0019aeb <IDE::detect()+0x29>
c0019d20:	50                   	push   eax
c0019d21:	6a 04                	push   0x4
c0019d23:	56                   	push   esi
c0019d24:	53                   	push   ebx
c0019d25:	e8 30 f7 ff ff       	call   c001945a <IDE::read(unsigned char, unsigned char)>
c0019d2a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019d2e:	83 c4 0c             	add    esp,0xc
c0019d31:	6a 05                	push   0x5
c0019d33:	56                   	push   esi
c0019d34:	53                   	push   ebx
c0019d35:	e8 20 f7 ff ff       	call   c001945a <IDE::read(unsigned char, unsigned char)>
c0019d3a:	83 c4 10             	add    esp,0x10
c0019d3d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019d41:	80 fa 14             	cmp    dl,0x14
c0019d44:	75 04                	jne    c0019d4a <IDE::detect()+0x288>
c0019d46:	3c eb                	cmp    al,0xeb
c0019d48:	eb 07                	jmp    c0019d51 <IDE::detect()+0x28f>
c0019d4a:	3c 96                	cmp    al,0x96
c0019d4c:	75 b1                	jne    c0019cff <IDE::detect()+0x23d>
c0019d4e:	80 fa 69             	cmp    dl,0x69
c0019d51:	75 ac                	jne    c0019cff <IDE::detect()+0x23d>
c0019d53:	68 a1 00 00 00       	push   0xa1
c0019d58:	6a 07                	push   0x7
c0019d5a:	56                   	push   esi
c0019d5b:	53                   	push   ebx
c0019d5c:	e8 39 f6 ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019d61:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019d68:	e8 b7 8d ff ff       	call   c0012b24 <milliTenthSleep(unsigned int)>
c0019d6d:	83 c4 10             	add    esp,0x10
c0019d70:	b1 01                	mov    cl,0x1
c0019d72:	e9 6d fe ff ff       	jmp    c0019be4 <IDE::detect()+0x122>
c0019d77:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019d7d:	5b                   	pop    ebx
c0019d7e:	5e                   	pop    esi
c0019d7f:	5f                   	pop    edi
c0019d80:	5d                   	pop    ebp
c0019d81:	c3                   	ret    

c0019d82 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019d82:	55                   	push   ebp
c0019d83:	57                   	push   edi
c0019d84:	56                   	push   esi
c0019d85:	53                   	push   ebx
c0019d86:	83 ec 1c             	sub    esp,0x1c
c0019d89:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019d8d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019d91:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019d95:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019d99:	88 c3                	mov    bl,al
c0019d9b:	84 c0                	test   al,al
c0019d9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019da1:	0f 84 81 00 00 00    	je     c0019e28 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019da7:	83 ec 0c             	sub    esp,0xc
c0019daa:	68 1b f7 01 c0       	push   0xc001f71b
c0019daf:	e8 1f f9 fe ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c0019db4:	83 c4 10             	add    esp,0x10
c0019db7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019dbb:	3c 01                	cmp    al,0x1
c0019dbd:	74 63                	je     c0019e22 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019dbf:	3c 02                	cmp    al,0x2
c0019dc1:	75 53                	jne    c0019e16 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019dc3:	d1 e6                	shl    esi,1
c0019dc5:	09 ee                	or     esi,ebp
c0019dc7:	50                   	push   eax
c0019dc8:	89 f0                	mov    eax,esi
c0019dca:	6a 01                	push   0x1
c0019dcc:	0f b6 f0             	movzx  esi,al
c0019dcf:	c1 e6 06             	shl    esi,0x6
c0019dd2:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019dda:	50                   	push   eax
c0019ddb:	57                   	push   edi
c0019ddc:	e8 79 f6 ff ff       	call   c001945a <IDE::read(unsigned char, unsigned char)>
c0019de1:	83 c4 10             	add    esp,0x10
c0019de4:	a8 01                	test   al,0x1
c0019de6:	74 02                	je     c0019dea <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019de8:	b3 07                	mov    bl,0x7
c0019dea:	a8 02                	test   al,0x2
c0019dec:	74 02                	je     c0019df0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019dee:	b3 03                	mov    bl,0x3
c0019df0:	a8 04                	test   al,0x4
c0019df2:	74 02                	je     c0019df6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019df4:	b3 14                	mov    bl,0x14
c0019df6:	a8 08                	test   al,0x8
c0019df8:	74 02                	je     c0019dfc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019dfa:	b3 03                	mov    bl,0x3
c0019dfc:	a8 10                	test   al,0x10
c0019dfe:	74 02                	je     c0019e02 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019e00:	b3 15                	mov    bl,0x15
c0019e02:	a8 20                	test   al,0x20
c0019e04:	74 02                	je     c0019e08 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019e06:	b3 03                	mov    bl,0x3
c0019e08:	a8 40                	test   al,0x40
c0019e0a:	74 02                	je     c0019e0e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019e0c:	b3 16                	mov    bl,0x16
c0019e0e:	84 c0                	test   al,al
c0019e10:	79 16                	jns    c0019e28 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019e12:	b3 0d                	mov    bl,0xd
c0019e14:	eb 12                	jmp    c0019e28 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019e16:	3c 03                	cmp    al,0x3
c0019e18:	74 0c                	je     c0019e26 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019e1a:	3c 04                	cmp    al,0x4
c0019e1c:	75 0a                	jne    c0019e28 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019e1e:	b3 08                	mov    bl,0x8
c0019e20:	eb 06                	jmp    c0019e28 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019e22:	b3 13                	mov    bl,0x13
c0019e24:	eb 02                	jmp    c0019e28 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019e26:	b3 17                	mov    bl,0x17
c0019e28:	83 c4 1c             	add    esp,0x1c
c0019e2b:	88 d8                	mov    al,bl
c0019e2d:	5b                   	pop    ebx
c0019e2e:	5e                   	pop    esi
c0019e2f:	5f                   	pop    edi
c0019e30:	5d                   	pop    ebp
c0019e31:	c3                   	ret    

c0019e32 <IDE::polling(unsigned char, unsigned int)>:
c0019e32:	57                   	push   edi
c0019e33:	56                   	push   esi
c0019e34:	53                   	push   ebx
c0019e35:	bb 04 00 00 00       	mov    ebx,0x4
c0019e3a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0019e3e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0019e43:	52                   	push   edx
c0019e44:	6a 0c                	push   0xc
c0019e46:	56                   	push   esi
c0019e47:	57                   	push   edi
c0019e48:	e8 0d f6 ff ff       	call   c001945a <IDE::read(unsigned char, unsigned char)>
c0019e4d:	83 c4 10             	add    esp,0x10
c0019e50:	4b                   	dec    ebx
c0019e51:	75 f0                	jne    c0019e43 <IDE::polling(unsigned char, unsigned int)+0x11>
c0019e53:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019e58:	50                   	push   eax
c0019e59:	6a 0c                	push   0xc
c0019e5b:	56                   	push   esi
c0019e5c:	57                   	push   edi
c0019e5d:	e8 f8 f5 ff ff       	call   c001945a <IDE::read(unsigned char, unsigned char)>
c0019e62:	83 c4 10             	add    esp,0x10
c0019e65:	a8 01                	test   al,0x1
c0019e67:	75 17                	jne    c0019e80 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0019e69:	a8 20                	test   al,0x20
c0019e6b:	75 0f                	jne    c0019e7c <IDE::polling(unsigned char, unsigned int)+0x4a>
c0019e6d:	4b                   	dec    ebx
c0019e6e:	74 10                	je     c0019e80 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0019e70:	84 c0                	test   al,al
c0019e72:	78 e4                	js     c0019e58 <IDE::polling(unsigned char, unsigned int)+0x26>
c0019e74:	a8 08                	test   al,0x8
c0019e76:	74 e0                	je     c0019e58 <IDE::polling(unsigned char, unsigned int)+0x26>
c0019e78:	31 c0                	xor    eax,eax
c0019e7a:	eb 06                	jmp    c0019e82 <IDE::polling(unsigned char, unsigned int)+0x50>
c0019e7c:	b0 01                	mov    al,0x1
c0019e7e:	eb 02                	jmp    c0019e82 <IDE::polling(unsigned char, unsigned int)+0x50>
c0019e80:	b0 02                	mov    al,0x2
c0019e82:	5b                   	pop    ebx
c0019e83:	5e                   	pop    esi
c0019e84:	5f                   	pop    edi
c0019e85:	c3                   	ret    

c0019e86 <SATABus::close(int, int, void*)>:
c0019e86:	31 c0                	xor    eax,eax
c0019e88:	c3                   	ret    
c0019e89:	90                   	nop

c0019e8a <SATABus::detect()>:
c0019e8a:	c3                   	ret    
c0019e8b:	90                   	nop

c0019e8c <SATABus::SATABus()>:
c0019e8c:	83 ec 0c             	sub    esp,0xc
c0019e8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e93:	83 ec 08             	sub    esp,0x8
c0019e96:	68 54 f7 01 c0       	push   0xc001f754
c0019e9b:	50                   	push   eax
c0019e9c:	e8 97 0f ff ff       	call   c000ae38 <HardDiskController::HardDiskController(char const*)>
c0019ea1:	83 c4 10             	add    esp,0x10
c0019ea4:	ba 80 f7 01 c0       	mov    edx,0xc001f780
c0019ea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ead:	89 10                	mov    DWORD PTR [eax],edx
c0019eaf:	83 ec 0c             	sub    esp,0xc
c0019eb2:	6a 50                	push   0x50
c0019eb4:	e8 14 cf fe ff       	call   c0006dcd <Phys::allocateContiguousPages(int)>
c0019eb9:	83 c4 10             	add    esp,0x10
c0019ebc:	89 c2                	mov    edx,eax
c0019ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ec2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019ec8:	83 ec 0c             	sub    esp,0xc
c0019ecb:	6a 50                	push   0x50
c0019ecd:	e8 9f e5 fe ff       	call   c0008471 <Virt::allocateKernelVirtualPages(int)>
c0019ed2:	83 c4 10             	add    esp,0x10
c0019ed5:	89 c2                	mov    edx,eax
c0019ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019edb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019ee1:	a1 54 04 02 c0       	mov    eax,ds:0xc0020454
c0019ee6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019eea:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019ef0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019ef4:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019efa:	83 ec 0c             	sub    esp,0xc
c0019efd:	6a 03                	push   0x3
c0019eff:	6a 50                	push   0x50
c0019f01:	51                   	push   ecx
c0019f02:	52                   	push   edx
c0019f03:	50                   	push   eax
c0019f04:	e8 b3 ee fe ff       	call   c0008dbc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019f09:	83 c4 20             	add    esp,0x20
c0019f0c:	90                   	nop
c0019f0d:	83 c4 0c             	add    esp,0xc
c0019f10:	c3                   	ret    
c0019f11:	90                   	nop

c0019f12 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019f12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f16:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019f19:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019f1c:	09 c2                	or     edx,eax
c0019f1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019f28:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019f2a:	31 c0                	xor    eax,eax
c0019f2c:	c1 e9 08             	shr    ecx,0x8
c0019f2f:	83 e1 0f             	and    ecx,0xf
c0019f32:	39 c8                	cmp    eax,ecx
c0019f34:	74 0a                	je     c0019f40 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019f36:	f6 c2 01             	test   dl,0x1
c0019f39:	74 08                	je     c0019f43 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019f3b:	d1 ea                	shr    edx,1
c0019f3d:	40                   	inc    eax
c0019f3e:	eb f2                	jmp    c0019f32 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019f40:	83 c8 ff             	or     eax,0xffffffff
c0019f43:	c3                   	ret    

c0019f44 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019f44:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019f48:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019f4b:	89 c2                	mov    edx,eax
c0019f4d:	c1 ea 08             	shr    edx,0x8
c0019f50:	83 e2 0f             	and    edx,0xf
c0019f53:	fe ca                	dec    dl
c0019f55:	75 31                	jne    c0019f88 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019f57:	83 e0 0f             	and    eax,0xf
c0019f5a:	3c 03                	cmp    al,0x3
c0019f5c:	75 2a                	jne    c0019f88 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019f5e:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019f61:	b8 02 00 00 00       	mov    eax,0x2
c0019f66:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019f6c:	74 1c                	je     c0019f8a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019f6e:	b8 04 00 00 00       	mov    eax,0x4
c0019f73:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019f79:	74 0f                	je     c0019f8a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019f7b:	31 c0                	xor    eax,eax
c0019f7d:	83 fa 03             	cmp    edx,0x3
c0019f80:	0f 94 c0             	sete   al
c0019f83:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019f87:	c3                   	ret    
c0019f88:	31 c0                	xor    eax,eax
c0019f8a:	c3                   	ret    
c0019f8b:	90                   	nop

c0019f8c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019f8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f90:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019f93:	0f ba e2 0f          	bt     edx,0xf
c0019f97:	72 f7                	jb     c0019f90 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019f99:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019f9c:	83 ca 10             	or     edx,0x10
c0019f9f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019fa2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019fa5:	83 ca 01             	or     edx,0x1
c0019fa8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019fab:	c3                   	ret    

c0019fac <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019fac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019fb0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019fb3:	83 e2 fe             	and    edx,0xfffffffe
c0019fb6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019fb9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019fbc:	83 e2 ef             	and    edx,0xffffffef
c0019fbf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019fc2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019fc5:	0f ba e2 0e          	bt     edx,0xe
c0019fc9:	72 f7                	jb     c0019fc2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019fcb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019fce:	0f ba e2 0f          	bt     edx,0xf
c0019fd2:	72 ee                	jb     c0019fc2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019fd4:	c3                   	ret    
c0019fd5:	90                   	nop

c0019fd6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019fd6:	55                   	push   ebp
c0019fd7:	57                   	push   edi
c0019fd8:	56                   	push   esi
c0019fd9:	53                   	push   ebx
c0019fda:	83 ec 1c             	sub    esp,0x1c
c0019fdd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019fe1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019fe5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0019fe9:	53                   	push   ebx
c0019fea:	89 fd                	mov    ebp,edi
c0019fec:	56                   	push   esi
c0019fed:	c1 e5 0a             	shl    ebp,0xa
c0019ff0:	e8 b7 ff ff ff       	call   c0019fac <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019ff5:	83 ec 0c             	sub    esp,0xc
c0019ff8:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019ffe:	01 e8                	add    eax,ebp
c001a000:	89 03                	mov    DWORD PTR [ebx],eax
c001a002:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a004:	68 00 04 00 00       	push   0x400
c001a009:	6a 00                	push   0x0
c001a00b:	50                   	push   eax
c001a00c:	e8 97 64 fe ff       	call   c00004a8 <memset>
c001a011:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001a017:	89 fa                	mov    edx,edi
c001a019:	01 e8                	add    eax,ebp
c001a01b:	c1 e7 0d             	shl    edi,0xd
c001a01e:	89 03                	mov    DWORD PTR [ebx],eax
c001a020:	c1 e2 08             	shl    edx,0x8
c001a023:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a02a:	81 c2 00 80 00 00    	add    edx,0x8000
c001a030:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001a034:	89 d0                	mov    eax,edx
c001a036:	83 c4 1c             	add    esp,0x1c
c001a039:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001a03f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a042:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001a045:	68 00 01 00 00       	push   0x100
c001a04a:	6a 00                	push   0x0
c001a04c:	50                   	push   eax
c001a04d:	e8 56 64 fe ff       	call   c00004a8 <memset>
c001a052:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a056:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001a05c:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001a062:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a066:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001a069:	83 c4 10             	add    esp,0x10
c001a06c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a073:	31 ff                	xor    edi,edi
c001a075:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001a07b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001a081:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a085:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001a08b:	83 c5 20             	add    ebp,0x20
c001a08e:	01 f8                	add    eax,edi
c001a090:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001a093:	52                   	push   edx
c001a094:	68 00 01 00 00       	push   0x100
c001a099:	6a 00                	push   0x0
c001a09b:	50                   	push   eax
c001a09c:	e8 07 64 fe ff       	call   c00004a8 <memset>
c001a0a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a0a5:	83 c4 10             	add    esp,0x10
c001a0a8:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001a0ae:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001a0b5:	01 f8                	add    eax,edi
c001a0b7:	81 c7 00 01 00 00    	add    edi,0x100
c001a0bd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001a0c0:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001a0c6:	75 b3                	jne    c001a07b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001a0c8:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001a0cc:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001a0d0:	83 c4 1c             	add    esp,0x1c
c001a0d3:	5b                   	pop    ebx
c001a0d4:	5e                   	pop    esi
c001a0d5:	5f                   	pop    edi
c001a0d6:	5d                   	pop    ebp
c001a0d7:	e9 b0 fe ff ff       	jmp    c0019f8c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001a0dc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001a0dc:	55                   	push   ebp
c001a0dd:	57                   	push   edi
c001a0de:	56                   	push   esi
c001a0df:	53                   	push   ebx
c001a0e0:	31 db                	xor    ebx,ebx
c001a0e2:	83 ec 0c             	sub    esp,0xc
c001a0e5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a0e9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a0ed:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001a0f0:	f7 c7 01 00 00 00    	test   edi,0x1
c001a0f6:	74 7a                	je     c001a172 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001a0f8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001a0fc:	89 d8                	mov    eax,ebx
c001a0fe:	c1 e0 07             	shl    eax,0x7
c001a101:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001a108:	55                   	push   ebp
c001a109:	56                   	push   esi
c001a10a:	e8 35 fe ff ff       	call   c0019f44 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001a10f:	5a                   	pop    edx
c001a110:	83 f8 01             	cmp    eax,0x1
c001a113:	59                   	pop    ecx
c001a114:	75 21                	jne    c001a137 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001a116:	50                   	push   eax
c001a117:	53                   	push   ebx
c001a118:	55                   	push   ebp
c001a119:	56                   	push   esi
c001a11a:	e8 b7 fe ff ff       	call   c0019fd6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001a11f:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001a126:	e8 1e c8 fe ff       	call   c0006949 <malloc>
c001a12b:	89 c5                	mov    ebp,eax
c001a12d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a130:	e8 49 0d 00 00       	call   c001ae7e <SATA::SATA()>
c001a135:	eb 24                	jmp    c001a15b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001a137:	83 f8 04             	cmp    eax,0x4
c001a13a:	75 36                	jne    c001a172 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001a13c:	51                   	push   ecx
c001a13d:	53                   	push   ebx
c001a13e:	55                   	push   ebp
c001a13f:	56                   	push   esi
c001a140:	e8 91 fe ff ff       	call   c0019fd6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001a145:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001a14c:	e8 f8 c7 fe ff       	call   c0006949 <malloc>
c001a151:	89 c5                	mov    ebp,eax
c001a153:	89 04 24             	mov    DWORD PTR [esp],eax
c001a156:	e8 7f 10 00 00       	call   c001b1da <SATAPI::SATAPI()>
c001a15b:	58                   	pop    eax
c001a15c:	5a                   	pop    edx
c001a15d:	55                   	push   ebp
c001a15e:	56                   	push   esi
c001a15f:	e8 92 09 ff ff       	call   c000aaf6 <Device::addChild(Device*)>
c001a164:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a167:	56                   	push   esi
c001a168:	6a 00                	push   0x0
c001a16a:	53                   	push   ebx
c001a16b:	55                   	push   ebp
c001a16c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a16f:	83 c4 20             	add    esp,0x20
c001a172:	d1 ef                	shr    edi,1
c001a174:	43                   	inc    ebx
c001a175:	83 fb 20             	cmp    ebx,0x20
c001a178:	0f 85 72 ff ff ff    	jne    c001a0f0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001a17e:	83 c4 0c             	add    esp,0xc
c001a181:	5b                   	pop    ebx
c001a182:	5e                   	pop    esi
c001a183:	5f                   	pop    edi
c001a184:	5d                   	pop    ebp
c001a185:	c3                   	ret    

c001a186 <SATABus::open(int, int, void*)>:
c001a186:	83 ec 14             	sub    esp,0x14
c001a189:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a18d:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001a193:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001a199:	52                   	push   edx
c001a19a:	50                   	push   eax
c001a19b:	e8 3c ff ff ff       	call   c001a0dc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001a1a0:	31 c0                	xor    eax,eax
c001a1a2:	83 c4 1c             	add    esp,0x1c
c001a1a5:	c3                   	ret    

c001a1a6 <ATA::close(int, int, void*)>:
c001a1a6:	83 ec 0c             	sub    esp,0xc
c001a1a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1ad:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a1b3:	85 c0                	test   eax,eax
c001a1b5:	74 0c                	je     c001a1c3 <ATA::close(int, int, void*)+0x1d>
c001a1b7:	83 ec 0c             	sub    esp,0xc
c001a1ba:	8b 10                	mov    edx,DWORD PTR [eax]
c001a1bc:	50                   	push   eax
c001a1bd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a1c0:	83 c4 10             	add    esp,0x10
c001a1c3:	31 c0                	xor    eax,eax
c001a1c5:	83 c4 0c             	add    esp,0xc
c001a1c8:	c3                   	ret    
c001a1c9:	90                   	nop

c001a1ca <ATA::powerSaving(PowerSavingLevel)>:
c001a1ca:	c3                   	ret    
c001a1cb:	90                   	nop

c001a1cc <ATA::ATA()>:
c001a1cc:	83 ec 0c             	sub    esp,0xc
c001a1cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1d3:	83 ec 04             	sub    esp,0x4
c001a1d6:	68 00 02 00 00       	push   0x200
c001a1db:	68 4d f8 01 c0       	push   0xc001f84d
c001a1e0:	50                   	push   eax
c001a1e1:	e8 dc 0c ff ff       	call   c000aec2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a1e6:	83 c4 10             	add    esp,0x10
c001a1e9:	ba c0 f7 01 c0       	mov    edx,0xc001f7c0
c001a1ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1f2:	89 10                	mov    DWORD PTR [eax],edx
c001a1f4:	90                   	nop
c001a1f5:	83 c4 0c             	add    esp,0xc
c001a1f8:	c3                   	ret    
c001a1f9:	90                   	nop

c001a1fa <ATA::flush(bool)>:
c001a1fa:	53                   	push   ebx
c001a1fb:	83 ec 08             	sub    esp,0x8
c001a1fe:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001a203:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a207:	19 c0                	sbb    eax,eax
c001a209:	83 e0 fd             	and    eax,0xfffffffd
c001a20c:	05 ea 00 00 00       	add    eax,0xea
c001a211:	50                   	push   eax
c001a212:	6a 07                	push   0x7
c001a214:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a21b:	50                   	push   eax
c001a21c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a222:	e8 73 f1 ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a227:	83 c4 0c             	add    esp,0xc
c001a22a:	6a 00                	push   0x0
c001a22c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a233:	50                   	push   eax
c001a234:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a23a:	e8 f3 fb ff ff       	call   c0019e32 <IDE::polling(unsigned char, unsigned int)>
c001a23f:	83 c4 18             	add    esp,0x18
c001a242:	5b                   	pop    ebx
c001a243:	c3                   	ret    

c001a244 <ATA::readyForCommand()>:
c001a244:	56                   	push   esi
c001a245:	53                   	push   ebx
c001a246:	53                   	push   ebx
c001a247:	31 db                	xor    ebx,ebx
c001a249:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a24d:	51                   	push   ecx
c001a24e:	6a 0c                	push   0xc
c001a250:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a257:	50                   	push   eax
c001a258:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a25e:	e8 f7 f1 ff ff       	call   c001945a <IDE::read(unsigned char, unsigned char)>
c001a263:	83 c4 10             	add    esp,0x10
c001a266:	a8 88                	test   al,0x88
c001a268:	74 1f                	je     c001a289 <ATA::readyForCommand()+0x45>
c001a26a:	43                   	inc    ebx
c001a26b:	83 fb 63             	cmp    ebx,0x63
c001a26e:	7e dd                	jle    c001a24d <ATA::readyForCommand()+0x9>
c001a270:	83 ec 0c             	sub    esp,0xc
c001a273:	6a 0a                	push   0xa
c001a275:	e8 aa 88 ff ff       	call   c0012b24 <milliTenthSleep(unsigned int)>
c001a27a:	83 c4 10             	add    esp,0x10
c001a27d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001a283:	75 c8                	jne    c001a24d <ATA::readyForCommand()+0x9>
c001a285:	31 c0                	xor    eax,eax
c001a287:	eb 02                	jmp    c001a28b <ATA::readyForCommand()+0x47>
c001a289:	b0 01                	mov    al,0x1
c001a28b:	5a                   	pop    edx
c001a28c:	5b                   	pop    ebx
c001a28d:	5e                   	pop    esi
c001a28e:	c3                   	ret    
c001a28f:	90                   	nop

c001a290 <ATA::access(unsigned long long, int, void*, bool)>:
c001a290:	55                   	push   ebp
c001a291:	57                   	push   edi
c001a292:	56                   	push   esi
c001a293:	53                   	push   ebx
c001a294:	83 ec 2c             	sub    esp,0x2c
c001a297:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a29b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a29f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a2a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a2a7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001a2ab:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a2af:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a2b3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001a2b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a2bd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a2c3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a2c7:	c1 e0 06             	shl    eax,0x6
c001a2ca:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001a2d2:	74 5d                	je     c001a331 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001a2d4:	89 fa                	mov    edx,edi
c001a2d6:	89 f0                	mov    eax,esi
c001a2d8:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001a2dc:	c1 ea 1c             	shr    edx,0x1c
c001a2df:	89 d1                	mov    ecx,edx
c001a2e1:	09 c1                	or     ecx,eax
c001a2e3:	74 25                	je     c001a30a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001a2e5:	31 ed                	xor    ebp,ebp
c001a2e7:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001a2ee:	89 fa                	mov    edx,edi
c001a2f0:	89 f0                	mov    eax,esi
c001a2f2:	0f ad d0             	shrd   eax,edx,cl
c001a2f5:	d3 ea                	shr    edx,cl
c001a2f7:	f6 c1 20             	test   cl,0x20
c001a2fa:	74 02                	je     c001a2fe <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001a2fc:	89 d0                	mov    eax,edx
c001a2fe:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001a302:	45                   	inc    ebp
c001a303:	83 fd 06             	cmp    ebp,0x6
c001a306:	75 df                	jne    c001a2e7 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001a308:	eb 76                	jmp    c001a380 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001a30a:	89 f0                	mov    eax,esi
c001a30c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001a311:	89 fa                	mov    edx,edi
c001a313:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a31a:	0f ac d0 10          	shrd   eax,edx,0x10
c001a31e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a323:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a327:	c1 ee 18             	shr    esi,0x18
c001a32a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001a32f:	eb 56                	jmp    c001a387 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a331:	6a 00                	push   0x0
c001a333:	6a 3f                	push   0x3f
c001a335:	57                   	push   edi
c001a336:	56                   	push   esi
c001a337:	e8 84 22 00 00       	call   c001c5c0 <__umoddi3>
c001a33c:	83 c4 10             	add    esp,0x10
c001a33f:	40                   	inc    eax
c001a340:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a344:	6a 00                	push   0x0
c001a346:	68 f0 03 00 00       	push   0x3f0
c001a34b:	57                   	push   edi
c001a34c:	56                   	push   esi
c001a34d:	e8 6e 21 00 00       	call   c001c4c0 <__udivdi3>
c001a352:	83 c4 10             	add    esp,0x10
c001a355:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001a35a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a361:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a366:	6a 00                	push   0x0
c001a368:	6a 3f                	push   0x3f
c001a36a:	57                   	push   edi
c001a36b:	56                   	push   esi
c001a36c:	e8 4f 21 00 00       	call   c001c4c0 <__udivdi3>
c001a371:	83 c4 10             	add    esp,0x10
c001a374:	89 c6                	mov    esi,eax
c001a376:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a37b:	83 e6 0f             	and    esi,0xf
c001a37e:	eb 07                	jmp    c001a387 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a380:	31 f6                	xor    esi,esi
c001a382:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a387:	bf 01 00 00 00       	mov    edi,0x1
c001a38c:	50                   	push   eax
c001a38d:	6a 00                	push   0x0
c001a38f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a396:	50                   	push   eax
c001a397:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a39b:	e8 02 f2 ff ff       	call   c00195a2 <IDE::enableIRQs(unsigned char, bool)>
c001a3a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a3a3:	e8 9c fe ff ff       	call   c001a244 <ATA::readyForCommand()>
c001a3a8:	83 c4 10             	add    esp,0x10
c001a3ab:	84 c0                	test   al,al
c001a3ad:	0f 84 4e 02 00 00    	je     c001a601 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a3b3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a3b9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a3bf:	c1 e0 04             	shl    eax,0x4
c001a3c2:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a3c9:	09 c6                	or     esi,eax
c001a3cb:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a3d0:	75 05                	jne    c001a3d7 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a3d2:	83 ce a0             	or     esi,0xffffffa0
c001a3d5:	eb 03                	jmp    c001a3da <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a3d7:	83 ce e0             	or     esi,0xffffffe0
c001a3da:	89 f0                	mov    eax,esi
c001a3dc:	0f b6 f0             	movzx  esi,al
c001a3df:	56                   	push   esi
c001a3e0:	6a 06                	push   0x6
c001a3e2:	51                   	push   ecx
c001a3e3:	52                   	push   edx
c001a3e4:	e8 b1 ef ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a3e9:	83 c4 10             	add    esp,0x10
c001a3ec:	6a 00                	push   0x0
c001a3ee:	6a 01                	push   0x1
c001a3f0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a3f7:	50                   	push   eax
c001a3f8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a3fe:	e8 97 ef ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a403:	83 c4 10             	add    esp,0x10
c001a406:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a40b:	75 6e                	jne    c001a47b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a40d:	6a 00                	push   0x0
c001a40f:	6a 08                	push   0x8
c001a411:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a418:	50                   	push   eax
c001a419:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a41f:	e8 76 ef ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a424:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a429:	50                   	push   eax
c001a42a:	6a 09                	push   0x9
c001a42c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a433:	50                   	push   eax
c001a434:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a43a:	e8 5b ef ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a43f:	83 c4 20             	add    esp,0x20
c001a442:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a447:	50                   	push   eax
c001a448:	6a 0a                	push   0xa
c001a44a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a451:	50                   	push   eax
c001a452:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a458:	e8 3d ef ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a45d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a462:	50                   	push   eax
c001a463:	6a 0b                	push   0xb
c001a465:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a46c:	50                   	push   eax
c001a46d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a473:	e8 22 ef ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a478:	83 c4 20             	add    esp,0x20
c001a47b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a480:	50                   	push   eax
c001a481:	6a 02                	push   0x2
c001a483:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a48a:	50                   	push   eax
c001a48b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a491:	e8 04 ef ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a496:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a49b:	50                   	push   eax
c001a49c:	6a 03                	push   0x3
c001a49e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a4a5:	50                   	push   eax
c001a4a6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a4ac:	e8 e9 ee ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4b1:	83 c4 20             	add    esp,0x20
c001a4b4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a4b9:	50                   	push   eax
c001a4ba:	6a 04                	push   0x4
c001a4bc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a4c3:	50                   	push   eax
c001a4c4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a4ca:	e8 cb ee ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a4d4:	50                   	push   eax
c001a4d5:	6a 05                	push   0x5
c001a4d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a4de:	50                   	push   eax
c001a4df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a4e5:	e8 b0 ee ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4ea:	83 c4 20             	add    esp,0x20
c001a4ed:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a4f2:	0f 94 c0             	sete   al
c001a4f5:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a4fa:	74 09                	je     c001a505 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a4fc:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a503:	eb 07                	jmp    c001a50c <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a505:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a50c:	0f b6 c0             	movzx  eax,al
c001a50f:	50                   	push   eax
c001a510:	6a 07                	push   0x7
c001a512:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a519:	50                   	push   eax
c001a51a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a520:	e8 75 ee ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a525:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a529:	83 c4 10             	add    esp,0x10
c001a52c:	85 f6                	test   esi,esi
c001a52e:	0f 84 ae 00 00 00    	je     c001a5e2 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a534:	50                   	push   eax
c001a535:	6a 01                	push   0x1
c001a537:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a53e:	50                   	push   eax
c001a53f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a545:	e8 e8 f8 ff ff       	call   c0019e32 <IDE::polling(unsigned char, unsigned int)>
c001a54a:	83 c4 10             	add    esp,0x10
c001a54d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a553:	84 c0                	test   al,al
c001a555:	74 20                	je     c001a577 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a557:	0f b6 f8             	movzx  edi,al
c001a55a:	0f b6 d2             	movzx  edx,dl
c001a55d:	57                   	push   edi
c001a55e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a565:	50                   	push   eax
c001a566:	52                   	push   edx
c001a567:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a56d:	e8 10 f8 ff ff       	call   c0019d82 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a572:	e9 87 00 00 00       	jmp    c001a5fe <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a577:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a57c:	74 33                	je     c001a5b1 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a57e:	31 ed                	xor    ebp,ebp
c001a580:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a584:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a588:	50                   	push   eax
c001a589:	50                   	push   eax
c001a58a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a591:	50                   	push   eax
c001a592:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a598:	e8 eb ed ff ff       	call   c0019388 <IDE::getBase(unsigned char)>
c001a59d:	89 c2                	mov    edx,eax
c001a59f:	89 f8                	mov    eax,edi
c001a5a1:	66 ef                	out    dx,ax
c001a5a3:	45                   	inc    ebp
c001a5a4:	83 c4 10             	add    esp,0x10
c001a5a7:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a5ad:	75 d1                	jne    c001a580 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a5af:	eb 23                	jmp    c001a5d4 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a5b1:	0f b6 d2             	movzx  edx,dl
c001a5b4:	51                   	push   ecx
c001a5b5:	51                   	push   ecx
c001a5b6:	52                   	push   edx
c001a5b7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a5bd:	e8 c6 ed ff ff       	call   c0019388 <IDE::getBase(unsigned char)>
c001a5c2:	b9 00 01 00 00       	mov    ecx,0x100
c001a5c7:	89 c2                	mov    edx,eax
c001a5c9:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a5cd:	fc                   	cld    
c001a5ce:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a5d1:	83 c4 10             	add    esp,0x10
c001a5d4:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a5dc:	4e                   	dec    esi
c001a5dd:	e9 4a ff ff ff       	jmp    c001a52c <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a5e2:	31 ff                	xor    edi,edi
c001a5e4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a5e9:	74 16                	je     c001a601 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a5eb:	50                   	push   eax
c001a5ec:	50                   	push   eax
c001a5ed:	31 c0                	xor    eax,eax
c001a5ef:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a5f4:	0f 94 c0             	sete   al
c001a5f7:	50                   	push   eax
c001a5f8:	53                   	push   ebx
c001a5f9:	e8 fc fb ff ff       	call   c001a1fa <ATA::flush(bool)>
c001a5fe:	83 c4 10             	add    esp,0x10
c001a601:	83 c4 2c             	add    esp,0x2c
c001a604:	89 f8                	mov    eax,edi
c001a606:	5b                   	pop    ebx
c001a607:	5e                   	pop    esi
c001a608:	5f                   	pop    edi
c001a609:	5d                   	pop    ebp
c001a60a:	c3                   	ret    
c001a60b:	90                   	nop

c001a60c <ATA::read(unsigned long long, int, void*)>:
c001a60c:	57                   	push   edi
c001a60d:	b8 04 00 00 00       	mov    eax,0x4
c001a612:	56                   	push   esi
c001a613:	53                   	push   ebx
c001a614:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a618:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a61c:	8d 7a ff             	lea    edi,[edx-0x1]
c001a61f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a623:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a627:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a62d:	77 25                	ja     c001a654 <ATA::read(unsigned long long, int, void*)+0x48>
c001a62f:	b8 06 00 00 00       	mov    eax,0x6
c001a634:	85 f6                	test   esi,esi
c001a636:	74 1c                	je     c001a654 <ATA::read(unsigned long long, int, void*)+0x48>
c001a638:	50                   	push   eax
c001a639:	50                   	push   eax
c001a63a:	6a 00                	push   0x0
c001a63c:	56                   	push   esi
c001a63d:	52                   	push   edx
c001a63e:	53                   	push   ebx
c001a63f:	51                   	push   ecx
c001a640:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a644:	e8 47 fc ff ff       	call   c001a290 <ATA::access(unsigned long long, int, void*, bool)>
c001a649:	83 c4 20             	add    esp,0x20
c001a64c:	85 c0                	test   eax,eax
c001a64e:	0f 95 c0             	setne  al
c001a651:	0f b6 c0             	movzx  eax,al
c001a654:	5b                   	pop    ebx
c001a655:	5e                   	pop    esi
c001a656:	5f                   	pop    edi
c001a657:	c3                   	ret    

c001a658 <ATA::write(unsigned long long, int, void*)>:
c001a658:	57                   	push   edi
c001a659:	b8 04 00 00 00       	mov    eax,0x4
c001a65e:	56                   	push   esi
c001a65f:	53                   	push   ebx
c001a660:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a664:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a668:	8d 7a ff             	lea    edi,[edx-0x1]
c001a66b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a66f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a673:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a679:	77 25                	ja     c001a6a0 <ATA::write(unsigned long long, int, void*)+0x48>
c001a67b:	b8 06 00 00 00       	mov    eax,0x6
c001a680:	85 f6                	test   esi,esi
c001a682:	74 1c                	je     c001a6a0 <ATA::write(unsigned long long, int, void*)+0x48>
c001a684:	50                   	push   eax
c001a685:	50                   	push   eax
c001a686:	6a 01                	push   0x1
c001a688:	56                   	push   esi
c001a689:	52                   	push   edx
c001a68a:	53                   	push   ebx
c001a68b:	51                   	push   ecx
c001a68c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a690:	e8 fb fb ff ff       	call   c001a290 <ATA::access(unsigned long long, int, void*, bool)>
c001a695:	83 c4 20             	add    esp,0x20
c001a698:	85 c0                	test   eax,eax
c001a69a:	0f 95 c0             	setne  al
c001a69d:	0f b6 c0             	movzx  eax,al
c001a6a0:	5b                   	pop    ebx
c001a6a1:	5e                   	pop    esi
c001a6a2:	5f                   	pop    edi
c001a6a3:	c3                   	ret    

c001a6a4 <ATA::detectCHS()>:
c001a6a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a6a8:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a6ae:	c1 e0 06             	shl    eax,0x6
c001a6b1:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a6b7:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a6c1:	c7 44 24 04 a4 f7 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f7a4
c001a6c9:	e9 db 4c ff ff       	jmp    c000f3a9 <Krnl::panic(char const*)>

c001a6ce <ATA::open(int, int, void*)>:
c001a6ce:	53                   	push   ebx
c001a6cf:	83 ec 08             	sub    esp,0x8
c001a6d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a6d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a6da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a6de:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a6e4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a6ea:	c1 e0 06             	shl    eax,0x6
c001a6ed:	01 d0                	add    eax,edx
c001a6ef:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a6f6:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a6fc:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a703:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a70d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a713:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a71a:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a721:	75 0c                	jne    c001a72f <ATA::open(int, int, void*)+0x61>
c001a723:	83 ec 0c             	sub    esp,0xc
c001a726:	53                   	push   ebx
c001a727:	e8 78 ff ff ff       	call   c001a6a4 <ATA::detectCHS()>
c001a72c:	83 c4 10             	add    esp,0x10
c001a72f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a735:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a73b:	c1 e0 06             	shl    eax,0x6
c001a73e:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a745:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a74f:	d1 e8                	shr    eax,1
c001a751:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a757:	6a 04                	push   0x4
c001a759:	6a 0c                	push   0xc
c001a75b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a762:	50                   	push   eax
c001a763:	52                   	push   edx
c001a764:	e8 31 ec ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a769:	90                   	nop
c001a76a:	90                   	nop
c001a76b:	6a 00                	push   0x0
c001a76d:	6a 0c                	push   0xc
c001a76f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a776:	50                   	push   eax
c001a777:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a77d:	e8 18 ec ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a782:	83 c4 14             	add    esp,0x14
c001a785:	53                   	push   ebx
c001a786:	e8 9f 07 ff ff       	call   c000af2a <PhysicalDisk::startCache()>
c001a78b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a78e:	e8 eb 17 ff ff       	call   c000bf7e <createPartitionsForDisk(PhysicalDisk*)>
c001a793:	31 c0                	xor    eax,eax
c001a795:	83 c4 18             	add    esp,0x18
c001a798:	5b                   	pop    ebx
c001a799:	c3                   	ret    

c001a79a <ATAPI::write(unsigned long long, int, void*)>:
c001a79a:	b8 03 00 00 00       	mov    eax,0x3
c001a79f:	c3                   	ret    

c001a7a0 <ATAPI::close(int, int, void*)>:
c001a7a0:	83 ec 0c             	sub    esp,0xc
c001a7a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7a7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a7ad:	85 c0                	test   eax,eax
c001a7af:	74 0c                	je     c001a7bd <ATAPI::close(int, int, void*)+0x1d>
c001a7b1:	83 ec 0c             	sub    esp,0xc
c001a7b4:	8b 10                	mov    edx,DWORD PTR [eax]
c001a7b6:	50                   	push   eax
c001a7b7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a7ba:	83 c4 10             	add    esp,0x10
c001a7bd:	31 c0                	xor    eax,eax
c001a7bf:	83 c4 0c             	add    esp,0xc
c001a7c2:	c3                   	ret    
c001a7c3:	90                   	nop

c001a7c4 <ATAPI::ATAPI()>:
c001a7c4:	83 ec 0c             	sub    esp,0xc
c001a7c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7cb:	83 ec 04             	sub    esp,0x4
c001a7ce:	68 00 08 00 00       	push   0x800
c001a7d3:	68 ed f8 01 c0       	push   0xc001f8ed
c001a7d8:	50                   	push   eax
c001a7d9:	e8 e4 06 ff ff       	call   c000aec2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a7de:	83 c4 10             	add    esp,0x10
c001a7e1:	ba 08 f8 01 c0       	mov    edx,0xc001f808
c001a7e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7ea:	89 10                	mov    DWORD PTR [eax],edx
c001a7ec:	90                   	nop
c001a7ed:	83 c4 0c             	add    esp,0xc
c001a7f0:	c3                   	ret    
c001a7f1:	90                   	nop

c001a7f2 <ATAPI::readyForCommand()>:
c001a7f2:	56                   	push   esi
c001a7f3:	53                   	push   ebx
c001a7f4:	53                   	push   ebx
c001a7f5:	31 db                	xor    ebx,ebx
c001a7f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a7fb:	51                   	push   ecx
c001a7fc:	6a 0c                	push   0xc
c001a7fe:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a805:	50                   	push   eax
c001a806:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a80c:	e8 49 ec ff ff       	call   c001945a <IDE::read(unsigned char, unsigned char)>
c001a811:	83 c4 10             	add    esp,0x10
c001a814:	a8 88                	test   al,0x88
c001a816:	74 25                	je     c001a83d <ATAPI::readyForCommand()+0x4b>
c001a818:	43                   	inc    ebx
c001a819:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a81f:	7e da                	jle    c001a7fb <ATAPI::readyForCommand()+0x9>
c001a821:	83 ec 0c             	sub    esp,0xc
c001a824:	68 5e 01 00 00       	push   0x15e
c001a829:	e8 f6 82 ff ff       	call   c0012b24 <milliTenthSleep(unsigned int)>
c001a82e:	83 c4 10             	add    esp,0x10
c001a831:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a837:	75 c2                	jne    c001a7fb <ATAPI::readyForCommand()+0x9>
c001a839:	31 c0                	xor    eax,eax
c001a83b:	eb 02                	jmp    c001a83f <ATAPI::readyForCommand()+0x4d>
c001a83d:	b0 01                	mov    al,0x1
c001a83f:	5a                   	pop    edx
c001a840:	5b                   	pop    ebx
c001a841:	5e                   	pop    esi
c001a842:	c3                   	ret    
c001a843:	90                   	nop

c001a844 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a844:	55                   	push   ebp
c001a845:	57                   	push   edi
c001a846:	56                   	push   esi
c001a847:	53                   	push   ebx
c001a848:	83 ec 20             	sub    esp,0x20
c001a84b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a84f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a853:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a857:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a85b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a85f:	6a 01                	push   0x1
c001a861:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a868:	50                   	push   eax
c001a869:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a86f:	e8 2e ed ff ff       	call   c00195a2 <IDE::enableIRQs(unsigned char, bool)>
c001a874:	5e                   	pop    esi
c001a875:	58                   	pop    eax
c001a876:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a87d:	50                   	push   eax
c001a87e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a884:	e8 eb ea ff ff       	call   c0019374 <IDE::prepareInterrupt(unsigned char)>
c001a889:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a88c:	e8 61 ff ff ff       	call   c001a7f2 <ATAPI::readyForCommand()>
c001a891:	83 c4 10             	add    esp,0x10
c001a894:	84 c0                	test   al,al
c001a896:	75 0a                	jne    c001a8a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a898:	bb 01 00 00 00       	mov    ebx,0x1
c001a89d:	e9 57 02 00 00       	jmp    c001aaf9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a8a2:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a8a8:	c1 e0 04             	shl    eax,0x4
c001a8ab:	0f b6 c0             	movzx  eax,al
c001a8ae:	50                   	push   eax
c001a8af:	6a 06                	push   0x6
c001a8b1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a8b8:	50                   	push   eax
c001a8b9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a8bf:	e8 d6 ea ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a8c4:	6a 00                	push   0x0
c001a8c6:	6a 01                	push   0x1
c001a8c8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a8cf:	50                   	push   eax
c001a8d0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a8d6:	e8 bf ea ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a8db:	83 c4 20             	add    esp,0x20
c001a8de:	0f b6 c3             	movzx  eax,bl
c001a8e1:	0f b6 df             	movzx  ebx,bh
c001a8e4:	50                   	push   eax
c001a8e5:	6a 04                	push   0x4
c001a8e7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a8ee:	50                   	push   eax
c001a8ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a8f5:	e8 a0 ea ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a8fa:	53                   	push   ebx
c001a8fb:	6a 05                	push   0x5
c001a8fd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a904:	50                   	push   eax
c001a905:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a90b:	e8 8a ea ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a910:	83 c4 20             	add    esp,0x20
c001a913:	68 a0 00 00 00       	push   0xa0
c001a918:	6a 07                	push   0x7
c001a91a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a921:	50                   	push   eax
c001a922:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a928:	e8 6d ea ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a92d:	83 c4 0c             	add    esp,0xc
c001a930:	6a 01                	push   0x1
c001a932:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a939:	50                   	push   eax
c001a93a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a940:	e8 ed f4 ff ff       	call   c0019e32 <IDE::polling(unsigned char, unsigned int)>
c001a945:	83 c4 10             	add    esp,0x10
c001a948:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a94e:	84 c0                	test   al,al
c001a950:	74 23                	je     c001a975 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a952:	0f b6 d8             	movzx  ebx,al
c001a955:	0f b6 d2             	movzx  edx,dl
c001a958:	53                   	push   ebx
c001a959:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a960:	50                   	push   eax
c001a961:	52                   	push   edx
c001a962:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a968:	e8 15 f4 ff ff       	call   c0019d82 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a96d:	83 c4 10             	add    esp,0x10
c001a970:	e9 84 01 00 00       	jmp    c001aaf9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a975:	0f b6 d2             	movzx  edx,dl
c001a978:	53                   	push   ebx
c001a979:	53                   	push   ebx
c001a97a:	52                   	push   edx
c001a97b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a981:	e8 02 ea ff ff       	call   c0019388 <IDE::getBase(unsigned char)>
c001a986:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a98a:	b9 06 00 00 00       	mov    ecx,0x6
c001a98f:	89 c2                	mov    edx,eax
c001a991:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a994:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a998:	83 c4 10             	add    esp,0x10
c001a99b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a9a1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a9a8:	85 db                	test   ebx,ebx
c001a9aa:	0f 84 ec 00 00 00    	je     c001aa9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a9b0:	51                   	push   ecx
c001a9b1:	51                   	push   ecx
c001a9b2:	52                   	push   edx
c001a9b3:	50                   	push   eax
c001a9b4:	e8 4f eb ff ff       	call   c0019508 <IDE::waitInterrupt(unsigned char)>
c001a9b9:	83 c4 10             	add    esp,0x10
c001a9bc:	84 c0                	test   al,al
c001a9be:	0f 84 d4 fe ff ff    	je     c001a898 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a9c4:	56                   	push   esi
c001a9c5:	56                   	push   esi
c001a9c6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a9cd:	50                   	push   eax
c001a9ce:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a9d4:	e8 9b e9 ff ff       	call   c0019374 <IDE::prepareInterrupt(unsigned char)>
c001a9d9:	83 c4 0c             	add    esp,0xc
c001a9dc:	6a 04                	push   0x4
c001a9de:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a9e5:	50                   	push   eax
c001a9e6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a9ec:	e8 69 ea ff ff       	call   c001945a <IDE::read(unsigned char, unsigned char)>
c001a9f1:	83 c4 0c             	add    esp,0xc
c001a9f4:	89 c6                	mov    esi,eax
c001a9f6:	6a 05                	push   0x5
c001a9f8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a9ff:	50                   	push   eax
c001aa00:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aa06:	e8 4f ea ff ff       	call   c001945a <IDE::read(unsigned char, unsigned char)>
c001aa0b:	89 f1                	mov    ecx,esi
c001aa0d:	0f b6 c0             	movzx  eax,al
c001aa10:	0f b6 f1             	movzx  esi,cl
c001aa13:	c1 e0 08             	shl    eax,0x8
c001aa16:	09 c6                	or     esi,eax
c001aa18:	d1 fe                	sar    esi,1
c001aa1a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001aa1e:	83 c4 10             	add    esp,0x10
c001aa21:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001aa26:	74 41                	je     c001aa69 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001aa28:	31 c9                	xor    ecx,ecx
c001aa2a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001aa30:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001aa37:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001aa3b:	75 0a                	jne    c001aa47 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001aa3d:	01 c9                	add    ecx,ecx
c001aa3f:	01 cd                	add    ebp,ecx
c001aa41:	4b                   	dec    ebx
c001aa42:	e9 54 ff ff ff       	jmp    c001a99b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001aa47:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001aa4c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001aa50:	51                   	push   ecx
c001aa51:	51                   	push   ecx
c001aa52:	52                   	push   edx
c001aa53:	50                   	push   eax
c001aa54:	e8 2f e9 ff ff       	call   c0019388 <IDE::getBase(unsigned char)>
c001aa59:	89 c2                	mov    edx,eax
c001aa5b:	89 f0                	mov    eax,esi
c001aa5d:	66 ef                	out    dx,ax
c001aa5f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aa63:	83 c4 10             	add    esp,0x10
c001aa66:	41                   	inc    ecx
c001aa67:	eb c1                	jmp    c001aa2a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001aa69:	31 f6                	xor    esi,esi
c001aa6b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001aa71:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001aa78:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001aa7c:	75 06                	jne    c001aa84 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001aa7e:	01 f6                	add    esi,esi
c001aa80:	01 f5                	add    ebp,esi
c001aa82:	eb bd                	jmp    c001aa41 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001aa84:	51                   	push   ecx
c001aa85:	51                   	push   ecx
c001aa86:	52                   	push   edx
c001aa87:	50                   	push   eax
c001aa88:	e8 fb e8 ff ff       	call   c0019388 <IDE::getBase(unsigned char)>
c001aa8d:	89 c2                	mov    edx,eax
c001aa8f:	66 ed                	in     ax,dx
c001aa91:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001aa96:	83 c4 10             	add    esp,0x10
c001aa99:	46                   	inc    esi
c001aa9a:	eb cf                	jmp    c001aa6b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001aa9c:	51                   	push   ecx
c001aa9d:	51                   	push   ecx
c001aa9e:	52                   	push   edx
c001aa9f:	50                   	push   eax
c001aaa0:	e8 63 ea ff ff       	call   c0019508 <IDE::waitInterrupt(unsigned char)>
c001aaa5:	83 c4 10             	add    esp,0x10
c001aaa8:	84 c0                	test   al,al
c001aaaa:	0f 84 e8 fd ff ff    	je     c001a898 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001aab0:	bb a0 86 01 00       	mov    ebx,0x186a0
c001aab5:	52                   	push   edx
c001aab6:	52                   	push   edx
c001aab7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001aabe:	50                   	push   eax
c001aabf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aac5:	e8 aa e8 ff ff       	call   c0019374 <IDE::prepareInterrupt(unsigned char)>
c001aaca:	83 c4 10             	add    esp,0x10
c001aacd:	50                   	push   eax
c001aace:	50                   	push   eax
c001aacf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001aad6:	50                   	push   eax
c001aad7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aadd:	e8 a6 e8 ff ff       	call   c0019388 <IDE::getBase(unsigned char)>
c001aae2:	8d 50 07             	lea    edx,[eax+0x7]
c001aae5:	ec                   	in     al,dx
c001aae6:	83 c4 10             	add    esp,0x10
c001aae9:	a8 88                	test   al,0x88
c001aaeb:	74 0a                	je     c001aaf7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001aaed:	4b                   	dec    ebx
c001aaee:	75 dd                	jne    c001aacd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001aaf0:	bb 02 00 00 00       	mov    ebx,0x2
c001aaf5:	eb 02                	jmp    c001aaf9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001aaf7:	31 db                	xor    ebx,ebx
c001aaf9:	83 c4 1c             	add    esp,0x1c
c001aafc:	89 d8                	mov    eax,ebx
c001aafe:	5b                   	pop    ebx
c001aaff:	5e                   	pop    esi
c001ab00:	5f                   	pop    edi
c001ab01:	5d                   	pop    ebp
c001ab02:	c3                   	ret    
c001ab03:	90                   	nop

c001ab04 <ATAPI::diskRemoved()>:
c001ab04:	53                   	push   ebx
c001ab05:	83 ec 14             	sub    esp,0x14
c001ab08:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ab0c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001ab13:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001ab19:	e8 de 11 ff ff       	call   c000bcfc <LogicalDisk::unmount()>
c001ab1e:	58                   	pop    eax
c001ab1f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ab25:	e8 1a 1b ff ff       	call   c000c644 <VCache::writeWriteBuffer()>
c001ab2a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001ab30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ab34:	83 c4 18             	add    esp,0x18
c001ab37:	5b                   	pop    ebx
c001ab38:	e9 f7 1a ff ff       	jmp    c000c634 <VCache::invalidateReadBuffer()>
c001ab3d:	90                   	nop

c001ab3e <ATAPI::eject()>:
c001ab3e:	57                   	push   edi
c001ab3f:	b9 03 00 00 00       	mov    ecx,0x3
c001ab44:	53                   	push   ebx
c001ab45:	83 ec 14             	sub    esp,0x14
c001ab48:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ab4c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ab50:	fc                   	cld    
c001ab51:	31 c0                	xor    eax,eax
c001ab53:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ab55:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ab5a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ab5f:	50                   	push   eax
c001ab60:	50                   	push   eax
c001ab61:	6a 00                	push   0x0
c001ab63:	6a 00                	push   0x0
c001ab65:	6a 00                	push   0x0
c001ab67:	6a 02                	push   0x2
c001ab69:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ab6d:	50                   	push   eax
c001ab6e:	53                   	push   ebx
c001ab6f:	e8 d0 fc ff ff       	call   c001a844 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ab74:	83 c4 14             	add    esp,0x14
c001ab77:	53                   	push   ebx
c001ab78:	e8 87 ff ff ff       	call   c001ab04 <ATAPI::diskRemoved()>
c001ab7d:	83 c4 24             	add    esp,0x24
c001ab80:	31 c0                	xor    eax,eax
c001ab82:	5b                   	pop    ebx
c001ab83:	5f                   	pop    edi
c001ab84:	c3                   	ret    
c001ab85:	90                   	nop

c001ab86 <ATAPI::diskInserted()>:
c001ab86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab8a:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001ab91:	c3                   	ret    

c001ab92 <ATAPI::detectMedia()>:
c001ab92:	56                   	push   esi
c001ab93:	53                   	push   ebx
c001ab94:	83 ec 28             	sub    esp,0x28
c001ab97:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ab9b:	6a 0c                	push   0xc
c001ab9d:	6a 00                	push   0x0
c001ab9f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001aba3:	56                   	push   esi
c001aba4:	e8 ff 58 fe ff       	call   c00004a8 <memset>
c001aba9:	58                   	pop    eax
c001abaa:	5a                   	pop    edx
c001abab:	6a 00                	push   0x0
c001abad:	6a 00                	push   0x0
c001abaf:	6a 00                	push   0x0
c001abb1:	6a 00                	push   0x0
c001abb3:	56                   	push   esi
c001abb4:	53                   	push   ebx
c001abb5:	e8 8a fc ff ff       	call   c001a844 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001abba:	83 c4 1c             	add    esp,0x1c
c001abbd:	6a 0c                	push   0xc
c001abbf:	6a 00                	push   0x0
c001abc1:	56                   	push   esi
c001abc2:	e8 e1 58 fe ff       	call   c00004a8 <memset>
c001abc7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001abcc:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001abd1:	59                   	pop    ecx
c001abd2:	58                   	pop    eax
c001abd3:	6a 01                	push   0x1
c001abd5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001abd9:	50                   	push   eax
c001abda:	6a 00                	push   0x0
c001abdc:	6a 12                	push   0x12
c001abde:	56                   	push   esi
c001abdf:	53                   	push   ebx
c001abe0:	e8 5f fc ff ff       	call   c001a844 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001abe5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001abe9:	83 c4 20             	add    esp,0x20
c001abec:	83 e0 7f             	and    eax,0x7f
c001abef:	3c 70                	cmp    al,0x70
c001abf1:	74 15                	je     c001ac08 <ATAPI::detectMedia()+0x76>
c001abf3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001abfa:	75 0c                	jne    c001ac08 <ATAPI::detectMedia()+0x76>
c001abfc:	83 ec 0c             	sub    esp,0xc
c001abff:	53                   	push   ebx
c001ac00:	e8 81 ff ff ff       	call   c001ab86 <ATAPI::diskInserted()>
c001ac05:	83 c4 10             	add    esp,0x10
c001ac08:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ac0c:	83 e0 0f             	and    eax,0xf
c001ac0f:	3c 02                	cmp    al,0x2
c001ac11:	75 1b                	jne    c001ac2e <ATAPI::detectMedia()+0x9c>
c001ac13:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001ac18:	75 2d                	jne    c001ac47 <ATAPI::detectMedia()+0xb5>
c001ac1a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ac21:	74 24                	je     c001ac47 <ATAPI::detectMedia()+0xb5>
c001ac23:	83 ec 0c             	sub    esp,0xc
c001ac26:	53                   	push   ebx
c001ac27:	e8 d8 fe ff ff       	call   c001ab04 <ATAPI::diskRemoved()>
c001ac2c:	eb 16                	jmp    c001ac44 <ATAPI::detectMedia()+0xb2>
c001ac2e:	84 c0                	test   al,al
c001ac30:	75 15                	jne    c001ac47 <ATAPI::detectMedia()+0xb5>
c001ac32:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ac39:	75 0c                	jne    c001ac47 <ATAPI::detectMedia()+0xb5>
c001ac3b:	83 ec 0c             	sub    esp,0xc
c001ac3e:	53                   	push   ebx
c001ac3f:	e8 42 ff ff ff       	call   c001ab86 <ATAPI::diskInserted()>
c001ac44:	83 c4 10             	add    esp,0x10
c001ac47:	83 c4 24             	add    esp,0x24
c001ac4a:	5b                   	pop    ebx
c001ac4b:	5e                   	pop    esi
c001ac4c:	c3                   	ret    
c001ac4d:	90                   	nop

c001ac4e <ATAPI::open(int, int, void*)>:
c001ac4e:	56                   	push   esi
c001ac4f:	53                   	push   ebx
c001ac50:	50                   	push   eax
c001ac51:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac59:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ac5d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ac63:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ac69:	c1 e0 06             	shl    eax,0x6
c001ac6c:	01 d0                	add    eax,edx
c001ac6e:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001ac75:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001ac7b:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001ac82:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ac8c:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ac92:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ac99:	6a 04                	push   0x4
c001ac9b:	6a 0c                	push   0xc
c001ac9d:	51                   	push   ecx
c001ac9e:	52                   	push   edx
c001ac9f:	e8 f6 e6 ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aca4:	90                   	nop
c001aca5:	90                   	nop
c001aca6:	6a 00                	push   0x0
c001aca8:	6a 0c                	push   0xc
c001acaa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001acb1:	50                   	push   eax
c001acb2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001acb8:	e8 dd e6 ff ff       	call   c001939a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001acbd:	83 c4 14             	add    esp,0x14
c001acc0:	68 74 01 00 00       	push   0x174
c001acc5:	e8 7f bc fe ff       	call   c0006949 <malloc>
c001acca:	83 c4 0c             	add    esp,0xc
c001accd:	89 c6                	mov    esi,eax
c001accf:	6a 00                	push   0x0
c001acd1:	68 ff ff ff 7f       	push   0x7fffffff
c001acd6:	6a 00                	push   0x0
c001acd8:	6a 00                	push   0x0
c001acda:	53                   	push   ebx
c001acdb:	68 d6 f9 01 c0       	push   0xc001f9d6
c001ace0:	50                   	push   eax
c001ace1:	e8 62 0e ff ff       	call   c000bb48 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ace6:	83 c4 14             	add    esp,0x14
c001ace9:	56                   	push   esi
c001acea:	e8 0f 0f ff ff       	call   c000bbfe <LogicalDisk::assignDriveLetter()>
c001acef:	5a                   	pop    edx
c001acf0:	0f be c0             	movsx  eax,al
c001acf3:	59                   	pop    ecx
c001acf4:	50                   	push   eax
c001acf5:	68 f0 f7 01 c0       	push   0xc001f7f0
c001acfa:	e8 d4 e9 fe ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c001acff:	58                   	pop    eax
c001ad00:	5a                   	pop    edx
c001ad01:	56                   	push   esi
c001ad02:	53                   	push   ebx
c001ad03:	e8 ee fd fe ff       	call   c000aaf6 <Device::addChild(Device*)>
c001ad08:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001ad0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad11:	e8 14 02 ff ff       	call   c000af2a <PhysicalDisk::startCache()>
c001ad16:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001ad1d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad20:	e8 6d fe ff ff       	call   c001ab92 <ATAPI::detectMedia()>
c001ad25:	83 c4 14             	add    esp,0x14
c001ad28:	31 c0                	xor    eax,eax
c001ad2a:	5b                   	pop    ebx
c001ad2b:	5e                   	pop    esi
c001ad2c:	c3                   	ret    
c001ad2d:	90                   	nop

c001ad2e <ATAPI::read(unsigned long long, int, void*)>:
c001ad2e:	55                   	push   ebp
c001ad2f:	57                   	push   edi
c001ad30:	56                   	push   esi
c001ad31:	53                   	push   ebx
c001ad32:	83 ec 1c             	sub    esp,0x1c
c001ad35:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ad39:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ad3d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001ad41:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001ad48:	74 41                	je     c001ad8b <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001ad4a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ad4e:	b9 03 00 00 00       	mov    ecx,0x3
c001ad53:	fc                   	cld    
c001ad54:	31 c0                	xor    eax,eax
c001ad56:	86 fb                	xchg   bl,bh
c001ad58:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ad5a:	c1 c3 10             	rol    ebx,0x10
c001ad5d:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001ad62:	89 e8                	mov    eax,ebp
c001ad64:	86 fb                	xchg   bl,bh
c001ad66:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ad6a:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001ad6e:	50                   	push   eax
c001ad6f:	50                   	push   eax
c001ad70:	55                   	push   ebp
c001ad71:	c1 e5 0b             	shl    ebp,0xb
c001ad74:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ad78:	6a 00                	push   0x0
c001ad7a:	55                   	push   ebp
c001ad7b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ad7f:	50                   	push   eax
c001ad80:	56                   	push   esi
c001ad81:	e8 be fa ff ff       	call   c001a844 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ad86:	83 c4 20             	add    esp,0x20
c001ad89:	eb 1a                	jmp    c001ada5 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001ad8b:	83 ec 0c             	sub    esp,0xc
c001ad8e:	56                   	push   esi
c001ad8f:	e8 fe fd ff ff       	call   c001ab92 <ATAPI::detectMedia()>
c001ad94:	83 c4 10             	add    esp,0x10
c001ad97:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001ad9e:	75 aa                	jne    c001ad4a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ada0:	b8 02 00 00 00       	mov    eax,0x2
c001ada5:	83 c4 1c             	add    esp,0x1c
c001ada8:	5b                   	pop    ebx
c001ada9:	5e                   	pop    esi
c001adaa:	5f                   	pop    edi
c001adab:	5d                   	pop    ebp
c001adac:	c3                   	ret    
c001adad:	90                   	nop

c001adae <SATA::close(int, int, void*)>:
c001adae:	83 ec 0c             	sub    esp,0xc
c001adb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adb5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001adbb:	85 c0                	test   eax,eax
c001adbd:	74 0c                	je     c001adcb <SATA::close(int, int, void*)+0x1d>
c001adbf:	83 ec 0c             	sub    esp,0xc
c001adc2:	8b 10                	mov    edx,DWORD PTR [eax]
c001adc4:	50                   	push   eax
c001adc5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001adc8:	83 c4 10             	add    esp,0x10
c001adcb:	31 c0                	xor    eax,eax
c001adcd:	83 c4 0c             	add    esp,0xc
c001add0:	c3                   	ret    
c001add1:	90                   	nop

c001add2 <SATA::powerSaving(PowerSavingLevel)>:
c001add2:	c3                   	ret    
c001add3:	90                   	nop

c001add4 <SATA::open(int, int, void*)>:
c001add4:	56                   	push   esi
c001add5:	53                   	push   ebx
c001add6:	50                   	push   eax
c001add7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001addb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001addf:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ade9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001adef:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001adf9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001adfd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ae07:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ae0d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ae14:	e8 f7 be fe ff       	call   c0006d10 <Phys::allocatePage()>
c001ae19:	89 c6                	mov    esi,eax
c001ae1b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ae21:	81 c6 00 10 00 00    	add    esi,0x1000
c001ae27:	e8 e4 be fe ff       	call   c0006d10 <Phys::allocatePage()>
c001ae2c:	39 c6                	cmp    esi,eax
c001ae2e:	74 10                	je     c001ae40 <SATA::open(int, int, void*)+0x6c>
c001ae30:	83 ec 0c             	sub    esp,0xc
c001ae33:	68 38 f8 01 c0       	push   0xc001f838
c001ae38:	e8 6c 45 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001ae3d:	83 c4 10             	add    esp,0x10
c001ae40:	83 ec 0c             	sub    esp,0xc
c001ae43:	6a 02                	push   0x2
c001ae45:	e8 27 d6 fe ff       	call   c0008471 <Virt::allocateKernelVirtualPages(int)>
c001ae4a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ae50:	6a 03                	push   0x3
c001ae52:	50                   	push   eax
c001ae53:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ae59:	ff 35 54 04 02 c0    	push   DWORD PTR ds:0xc0020454
c001ae5f:	e8 60 dc fe ff       	call   c0008ac4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ae64:	83 c4 14             	add    esp,0x14
c001ae67:	53                   	push   ebx
c001ae68:	e8 bd 00 ff ff       	call   c000af2a <PhysicalDisk::startCache()>
c001ae6d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae70:	e8 09 11 ff ff       	call   c000bf7e <createPartitionsForDisk(PhysicalDisk*)>
c001ae75:	83 c4 14             	add    esp,0x14
c001ae78:	31 c0                	xor    eax,eax
c001ae7a:	5b                   	pop    ebx
c001ae7b:	5e                   	pop    esi
c001ae7c:	c3                   	ret    
c001ae7d:	90                   	nop

c001ae7e <SATA::SATA()>:
c001ae7e:	83 ec 0c             	sub    esp,0xc
c001ae81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae85:	83 ec 04             	sub    esp,0x4
c001ae88:	68 00 02 00 00       	push   0x200
c001ae8d:	68 4c f8 01 c0       	push   0xc001f84c
c001ae92:	50                   	push   eax
c001ae93:	e8 2a 00 ff ff       	call   c000aec2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ae98:	83 c4 10             	add    esp,0x10
c001ae9b:	ba bc f8 01 c0       	mov    edx,0xc001f8bc
c001aea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aea4:	89 10                	mov    DWORD PTR [eax],edx
c001aea6:	90                   	nop
c001aea7:	83 c4 0c             	add    esp,0xc
c001aeaa:	c3                   	ret    
c001aeab:	90                   	nop

c001aeac <SATA::access(unsigned long long, int, void*, bool)>:
c001aeac:	55                   	push   ebp
c001aead:	57                   	push   edi
c001aeae:	56                   	push   esi
c001aeaf:	53                   	push   ebx
c001aeb0:	83 ec 2c             	sub    esp,0x2c
c001aeb3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001aeb7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001aebb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aebf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001aec3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aec7:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001aecc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aed0:	7e 10                	jle    c001aee2 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001aed2:	83 ec 0c             	sub    esp,0xc
c001aed5:	68 5c f8 01 c0       	push   0xc001f85c
c001aeda:	e8 ca 44 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001aedf:	83 c4 10             	add    esp,0x10
c001aee2:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001aee8:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001aeee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001aef4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aef8:	89 d0                	mov    eax,edx
c001aefa:	c1 e0 07             	shl    eax,0x7
c001aefd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001af01:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001af0b:	51                   	push   ecx
c001af0c:	8d 42 02             	lea    eax,[edx+0x2]
c001af0f:	51                   	push   ecx
c001af10:	c1 e0 07             	shl    eax,0x7
c001af13:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001af17:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001af1b:	50                   	push   eax
c001af1c:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001af22:	e8 eb ef ff ff       	call   c0019f12 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001af27:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001af2b:	83 c4 10             	add    esp,0x10
c001af2e:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001af33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001af37:	0f 84 4f 01 00 00    	je     c001b08c <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001af3d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001af41:	c1 e0 09             	shl    eax,0x9
c001af44:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001af49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001af4d:	74 0e                	je     c001af5d <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001af4f:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001af55:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001af59:	89 c1                	mov    ecx,eax
c001af5b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001af5d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001af61:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001af67:	8d 42 02             	lea    eax,[edx+0x2]
c001af6a:	c1 e0 07             	shl    eax,0x7
c001af6d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001af71:	8b 00                	mov    eax,DWORD PTR [eax]
c001af73:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001af79:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001af7f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001af83:	c1 e1 05             	shl    ecx,0x5
c001af86:	01 c8                	add    eax,ecx
c001af88:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001af8c:	83 e1 01             	and    ecx,0x1
c001af8f:	89 ce                	mov    esi,ecx
c001af91:	8a 08                	mov    cl,BYTE PTR [eax]
c001af93:	c1 e6 06             	shl    esi,0x6
c001af96:	83 e1 bf             	and    ecx,0xffffffbf
c001af99:	09 f1                	or     ecx,esi
c001af9b:	88 08                	mov    BYTE PTR [eax],cl
c001af9d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001af9f:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001afa5:	81 c9 05 00 01 00    	or     ecx,0x10005
c001afab:	89 08                	mov    DWORD PTR [eax],ecx
c001afad:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001afb3:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001afb9:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001afbf:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001afc2:	50                   	push   eax
c001afc3:	68 90 00 00 00       	push   0x90
c001afc8:	6a 00                	push   0x0
c001afca:	56                   	push   esi
c001afcb:	e8 d8 54 fe ff       	call   c00004a8 <memset>
c001afd0:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001afd6:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001afda:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001afe0:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001afe4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001afe8:	83 c4 10             	add    esp,0x10
c001afeb:	48                   	dec    eax
c001afec:	25 ff ff 3f 00       	and    eax,0x3fffff
c001aff1:	89 c1                	mov    ecx,eax
c001aff3:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001aff9:	25 00 00 c0 ff       	and    eax,0xffc00000
c001affe:	09 c8                	or     eax,ecx
c001b000:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001b006:	66 8b 06             	mov    ax,WORD PTR [esi]
c001b009:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001b010:	66 25 00 7f          	and    ax,0x7f00
c001b014:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b018:	66 0d 27 80          	or     ax,0x8027
c001b01c:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001b021:	66 89 06             	mov    WORD PTR [esi],ax
c001b024:	19 c0                	sbb    eax,eax
c001b026:	83 e0 f0             	and    eax,0xfffffff0
c001b029:	83 c0 35             	add    eax,0x35
c001b02c:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001b02f:	89 e8                	mov    eax,ebp
c001b031:	c1 e8 10             	shr    eax,0x10
c001b034:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001b037:	89 e8                	mov    eax,ebp
c001b039:	c1 e8 18             	shr    eax,0x18
c001b03c:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001b03f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001b043:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001b046:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b04a:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001b04d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b051:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001b055:	89 d6                	mov    esi,edx
c001b057:	31 c0                	xor    eax,eax
c001b059:	c1 e6 07             	shl    esi,0x7
c001b05c:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001b060:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001b066:	80 e1 88             	and    cl,0x88
c001b069:	74 0a                	je     c001b075 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001b06b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b070:	74 0a                	je     c001b07c <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001b072:	40                   	inc    eax
c001b073:	eb eb                	jmp    c001b060 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001b075:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b07a:	75 17                	jne    c001b093 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001b07c:	83 ec 0c             	sub    esp,0xc
c001b07f:	68 95 f8 01 c0       	push   0xc001f895
c001b084:	e8 4a e6 fe ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c001b089:	83 c4 10             	add    esp,0x10
c001b08c:	b8 01 00 00 00       	mov    eax,0x1
c001b091:	eb 5d                	jmp    c001b0f0 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001b093:	b8 01 00 00 00       	mov    eax,0x1
c001b098:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b09c:	c1 e2 07             	shl    edx,0x7
c001b09f:	d3 e0                	shl    eax,cl
c001b0a1:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001b0a5:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001b0ab:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001b0b1:	85 c8                	test   eax,ecx
c001b0b3:	74 16                	je     c001b0cb <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001b0b5:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001b0bb:	0f ba e1 1e          	bt     ecx,0x1e
c001b0bf:	73 ea                	jae    c001b0ab <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001b0c1:	83 ec 0c             	sub    esp,0xc
c001b0c4:	68 a3 f8 01 c0       	push   0xc001f8a3
c001b0c9:	eb b9                	jmp    c001b084 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001b0cb:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001b0d1:	0f ba e0 1e          	bt     eax,0x1e
c001b0d5:	72 b5                	jb     c001b08c <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001b0d7:	31 c0                	xor    eax,eax
c001b0d9:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001b0de:	75 10                	jne    c001b0f0 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001b0e0:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001b0e6:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001b0ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b0ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b0f0:	83 c4 2c             	add    esp,0x2c
c001b0f3:	5b                   	pop    ebx
c001b0f4:	5e                   	pop    esi
c001b0f5:	5f                   	pop    edi
c001b0f6:	5d                   	pop    ebp
c001b0f7:	c3                   	ret    

c001b0f8 <SATA::read(unsigned long long, int, void*)>:
c001b0f8:	57                   	push   edi
c001b0f9:	b8 04 00 00 00       	mov    eax,0x4
c001b0fe:	56                   	push   esi
c001b0ff:	53                   	push   ebx
c001b100:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b104:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b108:	8d 7a ff             	lea    edi,[edx-0x1]
c001b10b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b10f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b113:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001b119:	77 25                	ja     c001b140 <SATA::read(unsigned long long, int, void*)+0x48>
c001b11b:	b8 06 00 00 00       	mov    eax,0x6
c001b120:	85 f6                	test   esi,esi
c001b122:	74 1c                	je     c001b140 <SATA::read(unsigned long long, int, void*)+0x48>
c001b124:	50                   	push   eax
c001b125:	50                   	push   eax
c001b126:	6a 00                	push   0x0
c001b128:	56                   	push   esi
c001b129:	52                   	push   edx
c001b12a:	53                   	push   ebx
c001b12b:	51                   	push   ecx
c001b12c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b130:	e8 77 fd ff ff       	call   c001aeac <SATA::access(unsigned long long, int, void*, bool)>
c001b135:	83 c4 20             	add    esp,0x20
c001b138:	85 c0                	test   eax,eax
c001b13a:	0f 95 c0             	setne  al
c001b13d:	0f b6 c0             	movzx  eax,al
c001b140:	5b                   	pop    ebx
c001b141:	5e                   	pop    esi
c001b142:	5f                   	pop    edi
c001b143:	c3                   	ret    

c001b144 <SATA::write(unsigned long long, int, void*)>:
c001b144:	55                   	push   ebp
c001b145:	b8 04 00 00 00       	mov    eax,0x4
c001b14a:	57                   	push   edi
c001b14b:	56                   	push   esi
c001b14c:	53                   	push   ebx
c001b14d:	83 ec 0c             	sub    esp,0xc
c001b150:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b154:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b158:	8d 73 ff             	lea    esi,[ebx-0x1]
c001b15b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001b15f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b163:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001b169:	77 3d                	ja     c001b1a8 <SATA::write(unsigned long long, int, void*)+0x64>
c001b16b:	b8 06 00 00 00       	mov    eax,0x6
c001b170:	85 ed                	test   ebp,ebp
c001b172:	74 34                	je     c001b1a8 <SATA::write(unsigned long long, int, void*)+0x64>
c001b174:	c1 e3 09             	shl    ebx,0x9
c001b177:	01 eb                	add    ebx,ebp
c001b179:	89 d6                	mov    esi,edx
c001b17b:	89 cf                	mov    edi,ecx
c001b17d:	83 c6 01             	add    esi,0x1
c001b180:	83 d7 00             	adc    edi,0x0
c001b183:	50                   	push   eax
c001b184:	50                   	push   eax
c001b185:	6a 01                	push   0x1
c001b187:	55                   	push   ebp
c001b188:	81 c5 00 02 00 00    	add    ebp,0x200
c001b18e:	6a 01                	push   0x1
c001b190:	51                   	push   ecx
c001b191:	52                   	push   edx
c001b192:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b196:	e8 11 fd ff ff       	call   c001aeac <SATA::access(unsigned long long, int, void*, bool)>
c001b19b:	83 c4 20             	add    esp,0x20
c001b19e:	89 f2                	mov    edx,esi
c001b1a0:	89 f9                	mov    ecx,edi
c001b1a2:	39 dd                	cmp    ebp,ebx
c001b1a4:	75 d3                	jne    c001b179 <SATA::write(unsigned long long, int, void*)+0x35>
c001b1a6:	31 c0                	xor    eax,eax
c001b1a8:	83 c4 0c             	add    esp,0xc
c001b1ab:	5b                   	pop    ebx
c001b1ac:	5e                   	pop    esi
c001b1ad:	5f                   	pop    edi
c001b1ae:	5d                   	pop    ebp
c001b1af:	c3                   	ret    

c001b1b0 <SATAPI::write(unsigned long long, int, void*)>:
c001b1b0:	b8 03 00 00 00       	mov    eax,0x3
c001b1b5:	c3                   	ret    

c001b1b6 <SATAPI::close(int, int, void*)>:
c001b1b6:	83 ec 0c             	sub    esp,0xc
c001b1b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1bd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b1c3:	85 c0                	test   eax,eax
c001b1c5:	74 0c                	je     c001b1d3 <SATAPI::close(int, int, void*)+0x1d>
c001b1c7:	83 ec 0c             	sub    esp,0xc
c001b1ca:	8b 10                	mov    edx,DWORD PTR [eax]
c001b1cc:	50                   	push   eax
c001b1cd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b1d0:	83 c4 10             	add    esp,0x10
c001b1d3:	31 c0                	xor    eax,eax
c001b1d5:	83 c4 0c             	add    esp,0xc
c001b1d8:	c3                   	ret    
c001b1d9:	90                   	nop

c001b1da <SATAPI::SATAPI()>:
c001b1da:	83 ec 0c             	sub    esp,0xc
c001b1dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1e1:	83 ec 04             	sub    esp,0x4
c001b1e4:	68 00 08 00 00       	push   0x800
c001b1e9:	68 ec f8 01 c0       	push   0xc001f8ec
c001b1ee:	50                   	push   eax
c001b1ef:	e8 ce fc fe ff       	call   c000aec2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b1f4:	83 c4 10             	add    esp,0x10
c001b1f7:	ba 28 fa 01 c0       	mov    edx,0xc001fa28
c001b1fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b200:	89 10                	mov    DWORD PTR [eax],edx
c001b202:	90                   	nop
c001b203:	83 c4 0c             	add    esp,0xc
c001b206:	c3                   	ret    
c001b207:	90                   	nop

c001b208 <SATAPI::diskRemoved()>:
c001b208:	c3                   	ret    
c001b209:	90                   	nop

c001b20a <SATAPI::diskInserted()>:
c001b20a:	83 ec 18             	sub    esp,0x18
c001b20d:	68 f8 f8 01 c0       	push   0xc001f8f8
c001b212:	e8 bc e4 fe ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c001b217:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b21b:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001b222:	83 c4 1c             	add    esp,0x1c
c001b225:	c3                   	ret    

c001b226 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001b226:	55                   	push   ebp
c001b227:	57                   	push   edi
c001b228:	56                   	push   esi
c001b229:	53                   	push   ebx
c001b22a:	83 ec 38             	sub    esp,0x38
c001b22d:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001b231:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001b235:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001b239:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b23d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b241:	68 10 f9 01 c0       	push   0xc001f910
c001b246:	e8 88 e4 fe ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c001b24b:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001b251:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b257:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b25b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001b261:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b265:	c1 e0 07             	shl    eax,0x7
c001b268:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001b26c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b270:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001b27a:	5a                   	pop    edx
c001b27b:	59                   	pop    ecx
c001b27c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b280:	8d 58 02             	lea    ebx,[eax+0x2]
c001b283:	c1 e3 07             	shl    ebx,0x7
c001b286:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001b28a:	53                   	push   ebx
c001b28b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b291:	e8 7c ec ff ff       	call   c0019f12 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001b296:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b29a:	83 c4 10             	add    esp,0x10
c001b29d:	b8 01 00 00 00       	mov    eax,0x1
c001b2a2:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001b2a7:	0f 84 ff 01 00 00    	je     c001b4ac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001b2ad:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b2b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2b5:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001b2bb:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001b2c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b2c5:	c1 e1 05             	shl    ecx,0x5
c001b2c8:	01 c8                	add    eax,ecx
c001b2ca:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b2cc:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001b2d2:	81 c9 25 00 01 00    	or     ecx,0x10025
c001b2d8:	89 08                	mov    DWORD PTR [eax],ecx
c001b2da:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b2e0:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001b2e6:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001b2ec:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001b2ef:	8d 7b 40             	lea    edi,[ebx+0x40]
c001b2f2:	50                   	push   eax
c001b2f3:	68 90 00 00 00       	push   0x90
c001b2f8:	6a 00                	push   0x0
c001b2fa:	53                   	push   ebx
c001b2fb:	e8 a8 51 fe ff       	call   c00004a8 <memset>
c001b300:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001b304:	b9 0c 00 00 00       	mov    ecx,0xc
c001b309:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b30b:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001b311:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001b315:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001b31b:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001b31f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b323:	48                   	dec    eax
c001b324:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b329:	89 c1                	mov    ecx,eax
c001b32b:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b331:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b336:	09 c8                	or     eax,ecx
c001b338:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b33e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b341:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b348:	66 25 00 7f          	and    ax,0x7f00
c001b34c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b350:	66 0d 27 80          	or     ax,0x8027
c001b354:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b358:	66 89 03             	mov    WORD PTR [ebx],ax
c001b35b:	89 d0                	mov    eax,edx
c001b35d:	c1 ea 18             	shr    edx,0x18
c001b360:	c1 e8 10             	shr    eax,0x10
c001b363:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b366:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b369:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b36d:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b370:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b374:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b377:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b37b:	83 c4 10             	add    esp,0x10
c001b37e:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b382:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b386:	31 c0                	xor    eax,eax
c001b388:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b38e:	80 e1 88             	and    cl,0x88
c001b391:	74 0a                	je     c001b39d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001b393:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b398:	74 0a                	je     c001b3a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001b39a:	40                   	inc    eax
c001b39b:	eb eb                	jmp    c001b388 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001b39d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b3a2:	75 0a                	jne    c001b3ae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001b3a4:	83 ec 0c             	sub    esp,0xc
c001b3a7:	68 2a f9 01 c0       	push   0xc001f92a
c001b3ac:	eb 43                	jmp    c001b3f1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001b3ae:	be 01 00 00 00       	mov    esi,0x1
c001b3b3:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b3b7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b3bb:	d3 e6                	shl    esi,cl
c001b3bd:	c1 e7 07             	shl    edi,0x7
c001b3c0:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b3c6:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c001b3cb:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b3cf:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b3d5:	85 c6                	test   esi,eax
c001b3d7:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b3dd:	0f 84 96 00 00 00    	je     c001b479 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c001b3e3:	0f ba e0 1e          	bt     eax,0x1e
c001b3e7:	73 1a                	jae    c001b403 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1dd>
c001b3e9:	83 ec 0c             	sub    esp,0xc
c001b3ec:	68 3f f9 01 c0       	push   0xc001f93f
c001b3f1:	e8 dd e2 fe ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c001b3f6:	83 c4 10             	add    esp,0x10
c001b3f9:	b8 01 00 00 00       	mov    eax,0x1
c001b3fe:	e9 a9 00 00 00       	jmp    c001b4ac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001b403:	83 fb 0d             	cmp    ebx,0xd
c001b406:	77 12                	ja     c001b41a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c001b408:	83 ec 0c             	sub    esp,0xc
c001b40b:	68 c8 00 00 00       	push   0xc8
c001b410:	e8 0f 77 ff ff       	call   c0012b24 <milliTenthSleep(unsigned int)>
c001b415:	83 c4 10             	add    esp,0x10
c001b418:	eb 2a                	jmp    c001b444 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c001b41a:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c001b420:	83 f8 0d             	cmp    eax,0xd
c001b423:	77 0a                	ja     c001b42f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x209>
c001b425:	83 ec 0c             	sub    esp,0xc
c001b428:	68 58 02 00 00       	push   0x258
c001b42d:	eb 28                	jmp    c001b457 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c001b42f:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c001b435:	83 f8 0d             	cmp    eax,0xd
c001b438:	77 0a                	ja     c001b444 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c001b43a:	83 ec 0c             	sub    esp,0xc
c001b43d:	68 dc 05 00 00       	push   0x5dc
c001b442:	eb 13                	jmp    c001b457 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c001b444:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c001b44a:	83 f8 0d             	cmp    eax,0xd
c001b44d:	77 10                	ja     c001b45f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x239>
c001b44f:	83 ec 0c             	sub    esp,0xc
c001b452:	68 c4 09 00 00       	push   0x9c4
c001b457:	e8 c8 76 ff ff       	call   c0012b24 <milliTenthSleep(unsigned int)>
c001b45c:	83 c4 10             	add    esp,0x10
c001b45f:	43                   	inc    ebx
c001b460:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c001b466:	0f 85 63 ff ff ff    	jne    c001b3cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a9>
c001b46c:	83 ec 0c             	sub    esp,0xc
c001b46f:	68 52 f9 01 c0       	push   0xc001f952
c001b474:	e9 78 ff ff ff       	jmp    c001b3f1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001b479:	0f ba e0 1e          	bt     eax,0x1e
c001b47d:	73 0d                	jae    c001b48c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001b47f:	83 ec 0c             	sub    esp,0xc
c001b482:	68 66 f9 01 c0       	push   0xc001f966
c001b487:	e9 65 ff ff ff       	jmp    c001b3f1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001b48c:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b491:	74 17                	je     c001b4aa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c001b493:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b498:	74 10                	je     c001b4aa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c001b49a:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b4a0:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b4a4:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b4a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b4aa:	31 c0                	xor    eax,eax
c001b4ac:	83 c4 2c             	add    esp,0x2c
c001b4af:	5b                   	pop    ebx
c001b4b0:	5e                   	pop    esi
c001b4b1:	5f                   	pop    edi
c001b4b2:	5d                   	pop    ebp
c001b4b3:	c3                   	ret    

c001b4b4 <SATAPI::eject()>:
c001b4b4:	57                   	push   edi
c001b4b5:	b9 03 00 00 00       	mov    ecx,0x3
c001b4ba:	83 ec 18             	sub    esp,0x18
c001b4bd:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b4c1:	fc                   	cld    
c001b4c2:	31 c0                	xor    eax,eax
c001b4c4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b4c6:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b4cb:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b4d0:	50                   	push   eax
c001b4d1:	6a 00                	push   0x0
c001b4d3:	6a 00                	push   0x0
c001b4d5:	6a 00                	push   0x0
c001b4d7:	6a 00                	push   0x0
c001b4d9:	6a 02                	push   0x2
c001b4db:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b4df:	50                   	push   eax
c001b4e0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b4e4:	e8 3d fd ff ff       	call   c001b226 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b4e9:	31 c0                	xor    eax,eax
c001b4eb:	83 c4 38             	add    esp,0x38
c001b4ee:	5f                   	pop    edi
c001b4ef:	c3                   	ret    

c001b4f0 <SATAPI::detectMedia()>:
c001b4f0:	56                   	push   esi
c001b4f1:	53                   	push   ebx
c001b4f2:	83 ec 30             	sub    esp,0x30
c001b4f5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001b4f9:	68 7b f9 01 c0       	push   0xc001f97b
c001b4fe:	e8 d0 e1 fe ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c001b503:	83 c4 0c             	add    esp,0xc
c001b506:	6a 0c                	push   0xc
c001b508:	6a 00                	push   0x0
c001b50a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001b50e:	56                   	push   esi
c001b50f:	e8 94 4f fe ff       	call   c00004a8 <memset>
c001b514:	83 c4 0c             	add    esp,0xc
c001b517:	6a 00                	push   0x0
c001b519:	6a 00                	push   0x0
c001b51b:	6a 00                	push   0x0
c001b51d:	6a 00                	push   0x0
c001b51f:	6a 00                	push   0x0
c001b521:	56                   	push   esi
c001b522:	53                   	push   ebx
c001b523:	e8 fe fc ff ff       	call   c001b226 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b528:	83 c4 20             	add    esp,0x20
c001b52b:	48                   	dec    eax
c001b52c:	74 34                	je     c001b562 <SATAPI::detectMedia()+0x72>
c001b52e:	50                   	push   eax
c001b52f:	6a 0c                	push   0xc
c001b531:	6a 00                	push   0x0
c001b533:	56                   	push   esi
c001b534:	e8 6f 4f fe ff       	call   c00004a8 <memset>
c001b539:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001b53e:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001b543:	83 c4 0c             	add    esp,0xc
c001b546:	6a 01                	push   0x1
c001b548:	8d 44 24 16          	lea    eax,[esp+0x16]
c001b54c:	50                   	push   eax
c001b54d:	6a 00                	push   0x0
c001b54f:	6a 00                	push   0x0
c001b551:	6a 12                	push   0x12
c001b553:	56                   	push   esi
c001b554:	53                   	push   ebx
c001b555:	e8 cc fc ff ff       	call   c001b226 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b55a:	83 c4 20             	add    esp,0x20
c001b55d:	48                   	dec    eax
c001b55e:	75 39                	jne    c001b599 <SATAPI::detectMedia()+0xa9>
c001b560:	eb 1e                	jmp    c001b580 <SATAPI::detectMedia()+0x90>
c001b562:	83 ec 0c             	sub    esp,0xc
c001b565:	68 8f f9 01 c0       	push   0xc001f98f
c001b56a:	e8 64 e1 fe ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c001b56f:	83 c4 10             	add    esp,0x10
c001b572:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001b579:	74 b3                	je     c001b52e <SATAPI::detectMedia()+0x3e>
c001b57b:	e9 93 00 00 00       	jmp    c001b613 <SATAPI::detectMedia()+0x123>
c001b580:	83 ec 0c             	sub    esp,0xc
c001b583:	68 99 f9 01 c0       	push   0xc001f999
c001b588:	e8 46 e1 fe ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c001b58d:	83 c4 10             	add    esp,0x10
c001b590:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001b597:	75 7a                	jne    c001b613 <SATAPI::detectMedia()+0x123>
c001b599:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001b59d:	83 e0 7f             	and    eax,0x7f
c001b5a0:	3c 70                	cmp    al,0x70
c001b5a2:	74 25                	je     c001b5c9 <SATAPI::detectMedia()+0xd9>
c001b5a4:	83 ec 0c             	sub    esp,0xc
c001b5a7:	68 a3 f9 01 c0       	push   0xc001f9a3
c001b5ac:	e8 22 e1 fe ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c001b5b1:	83 c4 10             	add    esp,0x10
c001b5b4:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001b5bb:	75 0c                	jne    c001b5c9 <SATAPI::detectMedia()+0xd9>
c001b5bd:	83 ec 0c             	sub    esp,0xc
c001b5c0:	53                   	push   ebx
c001b5c1:	e8 44 fc ff ff       	call   c001b20a <SATAPI::diskInserted()>
c001b5c6:	83 c4 10             	add    esp,0x10
c001b5c9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b5cd:	83 e0 0f             	and    eax,0xf
c001b5d0:	3c 02                	cmp    al,0x2
c001b5d2:	75 16                	jne    c001b5ea <SATAPI::detectMedia()+0xfa>
c001b5d4:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001b5d9:	75 38                	jne    c001b613 <SATAPI::detectMedia()+0x123>
c001b5db:	83 ec 0c             	sub    esp,0xc
c001b5de:	68 ac f9 01 c0       	push   0xc001f9ac
c001b5e3:	e8 eb e0 fe ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c001b5e8:	eb 26                	jmp    c001b610 <SATAPI::detectMedia()+0x120>
c001b5ea:	84 c0                	test   al,al
c001b5ec:	75 25                	jne    c001b613 <SATAPI::detectMedia()+0x123>
c001b5ee:	83 ec 0c             	sub    esp,0xc
c001b5f1:	68 b5 f9 01 c0       	push   0xc001f9b5
c001b5f6:	e8 d8 e0 fe ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c001b5fb:	83 c4 10             	add    esp,0x10
c001b5fe:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001b605:	75 0c                	jne    c001b613 <SATAPI::detectMedia()+0x123>
c001b607:	83 ec 0c             	sub    esp,0xc
c001b60a:	53                   	push   ebx
c001b60b:	e8 fa fb ff ff       	call   c001b20a <SATAPI::diskInserted()>
c001b610:	83 c4 10             	add    esp,0x10
c001b613:	83 c4 24             	add    esp,0x24
c001b616:	5b                   	pop    ebx
c001b617:	5e                   	pop    esi
c001b618:	c3                   	ret    
c001b619:	90                   	nop

c001b61a <SATAPI::open(int, int, void*)>:
c001b61a:	56                   	push   esi
c001b61b:	53                   	push   ebx
c001b61c:	51                   	push   ecx
c001b61d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b621:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b625:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b62f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b635:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b63f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b643:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b64d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b653:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b65a:	e8 b1 b6 fe ff       	call   c0006d10 <Phys::allocatePage()>
c001b65f:	89 c6                	mov    esi,eax
c001b661:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b667:	81 c6 00 10 00 00    	add    esi,0x1000
c001b66d:	e8 9e b6 fe ff       	call   c0006d10 <Phys::allocatePage()>
c001b672:	39 c6                	cmp    esi,eax
c001b674:	74 10                	je     c001b686 <SATAPI::open(int, int, void*)+0x6c>
c001b676:	83 ec 0c             	sub    esp,0xc
c001b679:	68 bf f9 01 c0       	push   0xc001f9bf
c001b67e:	e8 26 3d ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001b683:	83 c4 10             	add    esp,0x10
c001b686:	83 ec 0c             	sub    esp,0xc
c001b689:	6a 02                	push   0x2
c001b68b:	e8 e1 cd fe ff       	call   c0008471 <Virt::allocateKernelVirtualPages(int)>
c001b690:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b696:	6a 03                	push   0x3
c001b698:	50                   	push   eax
c001b699:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b69f:	ff 35 54 04 02 c0    	push   DWORD PTR ds:0xc0020454
c001b6a5:	e8 1a d4 fe ff       	call   c0008ac4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b6aa:	83 c4 14             	add    esp,0x14
c001b6ad:	68 74 01 00 00       	push   0x174
c001b6b2:	e8 92 b2 fe ff       	call   c0006949 <malloc>
c001b6b7:	83 c4 0c             	add    esp,0xc
c001b6ba:	89 c6                	mov    esi,eax
c001b6bc:	6a 00                	push   0x0
c001b6be:	68 ff ff ff 7f       	push   0x7fffffff
c001b6c3:	6a 00                	push   0x0
c001b6c5:	6a 00                	push   0x0
c001b6c7:	53                   	push   ebx
c001b6c8:	68 d5 f9 01 c0       	push   0xc001f9d5
c001b6cd:	50                   	push   eax
c001b6ce:	e8 75 04 ff ff       	call   c000bb48 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b6d3:	83 c4 14             	add    esp,0x14
c001b6d6:	56                   	push   esi
c001b6d7:	e8 22 05 ff ff       	call   c000bbfe <LogicalDisk::assignDriveLetter()>
c001b6dc:	5a                   	pop    edx
c001b6dd:	0f be c0             	movsx  eax,al
c001b6e0:	59                   	pop    ecx
c001b6e1:	50                   	push   eax
c001b6e2:	68 f0 f7 01 c0       	push   0xc001f7f0
c001b6e7:	e8 e7 df fe ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c001b6ec:	58                   	pop    eax
c001b6ed:	5a                   	pop    edx
c001b6ee:	56                   	push   esi
c001b6ef:	53                   	push   ebx
c001b6f0:	e8 01 f4 fe ff       	call   c000aaf6 <Device::addChild(Device*)>
c001b6f5:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b6fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b6fe:	e8 27 f8 fe ff       	call   c000af2a <PhysicalDisk::startCache()>
c001b703:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b70a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b70d:	e8 de fd ff ff       	call   c001b4f0 <SATAPI::detectMedia()>
c001b712:	83 c4 14             	add    esp,0x14
c001b715:	31 c0                	xor    eax,eax
c001b717:	5b                   	pop    ebx
c001b718:	5e                   	pop    esi
c001b719:	c3                   	ret    

c001b71a <SATAPI::read(unsigned long long, int, void*)>:
c001b71a:	55                   	push   ebp
c001b71b:	57                   	push   edi
c001b71c:	56                   	push   esi
c001b71d:	53                   	push   ebx
c001b71e:	83 ec 48             	sub    esp,0x48
c001b721:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001b725:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c001b729:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c001b72d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001b731:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b735:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b739:	68 e3 f9 01 c0       	push   0xc001f9e3
c001b73e:	e8 90 df fe ff       	call   c00096d3 <Dbg::kprintf(char const*, ...)>
c001b743:	83 c4 10             	add    esp,0x10
c001b746:	83 fb 04             	cmp    ebx,0x4
c001b749:	7e 10                	jle    c001b75b <SATAPI::read(unsigned long long, int, void*)+0x41>
c001b74b:	83 ec 0c             	sub    esp,0xc
c001b74e:	68 f4 f9 01 c0       	push   0xc001f9f4
c001b753:	e8 51 3c ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001b758:	83 c4 10             	add    esp,0x10
c001b75b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c001b75f:	31 ed                	xor    ebp,ebp
c001b761:	b9 03 00 00 00       	mov    ecx,0x3
c001b766:	fc                   	cld    
c001b767:	89 e8                	mov    eax,ebp
c001b769:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b76b:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c001b770:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c001b775:	50                   	push   eax
c001b776:	6a 00                	push   0x0
c001b778:	6a 00                	push   0x0
c001b77a:	6a 00                	push   0x0
c001b77c:	6a 00                	push   0x0
c001b77e:	6a 02                	push   0x2
c001b780:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b784:	50                   	push   eax
c001b785:	56                   	push   esi
c001b786:	e8 9b fa ff ff       	call   c001b226 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b78b:	8d 7c 24 44          	lea    edi,[esp+0x44]
c001b78f:	89 e8                	mov    eax,ebp
c001b791:	b9 03 00 00 00       	mov    ecx,0x3
c001b796:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b798:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b79c:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c001b7a0:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c001b7a5:	86 e0                	xchg   al,ah
c001b7a7:	c1 c0 10             	rol    eax,0x10
c001b7aa:	86 e0                	xchg   al,ah
c001b7ac:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c001b7b0:	83 c4 1c             	add    esp,0x1c
c001b7b3:	53                   	push   ebx
c001b7b4:	c1 e3 0b             	shl    ebx,0xb
c001b7b7:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001b7bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b7bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b7c3:	53                   	push   ebx
c001b7c4:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b7c8:	50                   	push   eax
c001b7c9:	56                   	push   esi
c001b7ca:	e8 57 fa ff ff       	call   c001b226 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b7cf:	83 c4 20             	add    esp,0x20
c001b7d2:	85 c0                	test   eax,eax
c001b7d4:	74 14                	je     c001b7ea <SATAPI::read(unsigned long long, int, void*)+0xd0>
c001b7d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b7da:	83 ec 0c             	sub    esp,0xc
c001b7dd:	56                   	push   esi
c001b7de:	e8 0d fd ff ff       	call   c001b4f0 <SATAPI::detectMedia()>
c001b7e3:	83 c4 10             	add    esp,0x10
c001b7e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b7ea:	83 c4 3c             	add    esp,0x3c
c001b7ed:	5b                   	pop    ebx
c001b7ee:	5e                   	pop    esi
c001b7ef:	5f                   	pop    edi
c001b7f0:	5d                   	pop    ebp
c001b7f1:	c3                   	ret    

c001b7f2 <IOAPIC::close(int, int, void*)>:
c001b7f2:	b8 00 00 00 00       	mov    eax,0x0
c001b7f7:	c3                   	ret    

c001b7f8 <apicGetBase()>:
c001b7f8:	55                   	push   ebp
c001b7f9:	89 e5                	mov    ebp,esp
c001b7fb:	83 ec 18             	sub    esp,0x18
c001b7fe:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c001b803:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001b809:	83 e0 08             	and    eax,0x8
c001b80c:	84 c0                	test   al,al
c001b80e:	75 07                	jne    c001b817 <apicGetBase()+0x1f>
c001b810:	b8 00 00 00 00       	mov    eax,0x0
c001b815:	eb 21                	jmp    c001b838 <apicGetBase()+0x40>
c001b817:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c001b81c:	83 ec 08             	sub    esp,0x8
c001b81f:	6a 1b                	push   0x1b
c001b821:	50                   	push   eax
c001b822:	e8 f3 a6 fe ff       	call   c0005f1a <Computer::rdmsr(unsigned int)>
c001b827:	83 c4 10             	add    esp,0x10
c001b82a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b82d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b830:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b833:	25 00 f0 ff ff       	and    eax,0xfffff000
c001b838:	c9                   	leave  
c001b839:	c3                   	ret    

c001b83a <IOAPIC::IOAPIC()>:
c001b83a:	83 ec 0c             	sub    esp,0xc
c001b83d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b841:	83 ec 08             	sub    esp,0x8
c001b844:	68 58 fa 01 c0       	push   0xc001fa58
c001b849:	50                   	push   eax
c001b84a:	e8 3f f4 fe ff       	call   c000ac8e <Device::Device(char const*)>
c001b84f:	83 c4 10             	add    esp,0x10
c001b852:	ba 68 fa 01 c0       	mov    edx,0xc001fa68
c001b857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b85b:	89 10                	mov    DWORD PTR [eax],edx
c001b85d:	90                   	nop
c001b85e:	83 c4 0c             	add    esp,0xc
c001b861:	c3                   	ret    

c001b862 <apicOpen()>:
c001b862:	55                   	push   ebp
c001b863:	89 e5                	mov    ebp,esp
c001b865:	53                   	push   ebx
c001b866:	83 ec 34             	sub    esp,0x34
c001b869:	a0 e0 42 02 c0       	mov    al,ds:0xc00242e0
c001b86e:	83 f0 01             	xor    eax,0x1
c001b871:	84 c0                	test   al,al
c001b873:	0f 84 91 00 00 00    	je     c001b90a <apicOpen()+0xa8>
c001b879:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b87d:	a0 40 2c 02 c0       	mov    al,ds:0xc0022c40
c001b882:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b885:	73 7c                	jae    c001b903 <apicOpen()+0xa1>
c001b887:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b88e:	83 ec 0c             	sub    esp,0xc
c001b891:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b894:	e8 b0 b0 fe ff       	call   c0006949 <malloc>
c001b899:	83 c4 10             	add    esp,0x10
c001b89c:	89 c3                	mov    ebx,eax
c001b89e:	83 ec 0c             	sub    esp,0xc
c001b8a1:	53                   	push   ebx
c001b8a2:	e8 93 ff ff ff       	call   c001b83a <IOAPIC::IOAPIC()>
c001b8a7:	83 c4 10             	add    esp,0x10
c001b8aa:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b8ad:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001b8b1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b8b4:	89 14 85 c0 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbd40],edx
c001b8bb:	a1 a0 42 02 c0       	mov    eax,ds:0xc00242a0
c001b8c0:	40                   	inc    eax
c001b8c1:	a3 a0 42 02 c0       	mov    ds:0xc00242a0,eax
c001b8c6:	a1 68 03 02 c0       	mov    eax,ds:0xc0020368
c001b8cb:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001b8d1:	83 ec 08             	sub    esp,0x8
c001b8d4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b8d7:	50                   	push   eax
c001b8d8:	e8 19 f2 fe ff       	call   c000aaf6 <Device::addChild(Device*)>
c001b8dd:	83 c4 10             	add    esp,0x10
c001b8e0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b8e3:	8b 00                	mov    eax,DWORD PTR [eax]
c001b8e5:	83 c0 08             	add    eax,0x8
c001b8e8:	8b 00                	mov    eax,DWORD PTR [eax]
c001b8ea:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001b8ee:	6a 00                	push   0x0
c001b8f0:	6a 00                	push   0x0
c001b8f2:	52                   	push   edx
c001b8f3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b8f6:	ff d0                	call   eax
c001b8f8:	83 c4 10             	add    esp,0x10
c001b8fb:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b8fe:	e9 7a ff ff ff       	jmp    c001b87d <apicOpen()+0x1b>
c001b903:	c6 05 e0 42 02 c0 01 	mov    BYTE PTR ds:0xc00242e0,0x1
c001b90a:	e8 e9 fe ff ff       	call   c001b7f8 <apicGetBase()>
c001b90f:	05 f0 00 00 00       	add    eax,0xf0
c001b914:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b917:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b91a:	8b 00                	mov    eax,DWORD PTR [eax]
c001b91c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b91f:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b926:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b92d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b930:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b933:	89 10                	mov    DWORD PTR [eax],edx
c001b935:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b93c:	a1 90 2b 02 c0       	mov    eax,ds:0xc0022b90
c001b941:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b944:	7d 70                	jge    c001b9b6 <apicOpen()+0x154>
c001b946:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b949:	8b 04 85 a0 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd460]
c001b950:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b953:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b956:	8b 04 85 a0 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd460]
c001b95d:	c1 e8 08             	shr    eax,0x8
c001b960:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b964:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b967:	8b 04 85 a0 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd460]
c001b96e:	c1 e8 18             	shr    eax,0x18
c001b971:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b974:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b978:	75 37                	jne    c001b9b1 <apicOpen()+0x14f>
c001b97a:	e8 79 fe ff ff       	call   c001b7f8 <apicGetBase()>
c001b97f:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b983:	75 07                	jne    c001b98c <apicOpen()+0x12a>
c001b985:	ba 60 03 00 00       	mov    edx,0x360
c001b98a:	eb 05                	jmp    c001b991 <apicOpen()+0x12f>
c001b98c:	ba 50 03 00 00       	mov    edx,0x350
c001b991:	01 d0                	add    eax,edx
c001b993:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b996:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b999:	8b 00                	mov    eax,DWORD PTR [eax]
c001b99b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b99e:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b9a5:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b9a9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b9ac:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b9af:	89 10                	mov    DWORD PTR [eax],edx
c001b9b1:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b9b4:	eb 86                	jmp    c001b93c <apicOpen()+0xda>
c001b9b6:	90                   	nop
c001b9b7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b9ba:	c9                   	leave  
c001b9bb:	c3                   	ret    

c001b9bc <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b9bc:	55                   	push   ebp
c001b9bd:	89 e5                	mov    ebp,esp
c001b9bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b9c2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b9c8:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b9cb:	72 1d                	jb     c001b9ea <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b9cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b9d0:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b9d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b9d9:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b9df:	01 d0                	add    eax,edx
c001b9e1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b9e4:	73 04                	jae    c001b9ea <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b9e6:	b0 01                	mov    al,0x1
c001b9e8:	eb 02                	jmp    c001b9ec <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b9ea:	b0 00                	mov    al,0x0
c001b9ec:	5d                   	pop    ebp
c001b9ed:	c3                   	ret    

c001b9ee <IOAPIC::read(int)>:
c001b9ee:	55                   	push   ebp
c001b9ef:	89 e5                	mov    ebp,esp
c001b9f1:	83 ec 10             	sub    esp,0x10
c001b9f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b9f7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b9fd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ba00:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ba03:	0f b6 d0             	movzx  edx,al
c001ba06:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ba09:	89 10                	mov    DWORD PTR [eax],edx
c001ba0b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ba0e:	83 c0 10             	add    eax,0x10
c001ba11:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba13:	c9                   	leave  
c001ba14:	c3                   	ret    
c001ba15:	90                   	nop

c001ba16 <IOAPIC::open(int, int, void*)>:
c001ba16:	55                   	push   ebp
c001ba17:	89 e5                	mov    ebp,esp
c001ba19:	57                   	push   edi
c001ba1a:	56                   	push   esi
c001ba1b:	53                   	push   ebx
c001ba1c:	83 ec 04             	sub    esp,0x4
c001ba1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ba22:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ba25:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ba2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ba2e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ba34:	8b 14 85 80 2c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd380]
c001ba3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ba3e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ba44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ba47:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ba4d:	8b 14 85 00 2d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd300]
c001ba54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ba57:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ba5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ba60:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ba66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ba69:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ba6f:	0f b6 f0             	movzx  esi,al
c001ba72:	89 d0                	mov    eax,edx
c001ba74:	ba 00 00 00 00       	mov    edx,0x0
c001ba79:	89 c7                	mov    edi,eax
c001ba7b:	83 e7 ff             	and    edi,0xffffffff
c001ba7e:	89 f9                	mov    ecx,edi
c001ba80:	0f b6 da             	movzx  ebx,dl
c001ba83:	89 c8                	mov    eax,ecx
c001ba85:	89 da                	mov    edx,ebx
c001ba87:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ba8a:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ba8d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ba91:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ba95:	83 e0 00             	and    eax,0x0
c001ba98:	09 d0                	or     eax,edx
c001ba9a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ba9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001baa1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001baa7:	8d 50 01             	lea    edx,[eax+0x1]
c001baaa:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001baad:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001bab3:	0f b6 d0             	movzx  edx,al
c001bab6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bab9:	83 c2 08             	add    edx,0x8
c001babc:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001bac0:	0f b6 c9             	movzx  ecx,cl
c001bac3:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001bac9:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001bacd:	6a 01                	push   0x1
c001bacf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bad2:	e8 17 ff ff ff       	call   c001b9ee <IOAPIC::read(int)>
c001bad7:	83 c4 08             	add    esp,0x8
c001bada:	c1 f8 10             	sar    eax,0x10
c001badd:	0f b6 c0             	movzx  eax,al
c001bae0:	8d 50 01             	lea    edx,[eax+0x1]
c001bae3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bae6:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001baec:	b8 00 00 00 00       	mov    eax,0x0
c001baf1:	8d 65 f4             	lea    esp,[ebp-0xc]
c001baf4:	5b                   	pop    ebx
c001baf5:	5e                   	pop    esi
c001baf6:	5f                   	pop    edi
c001baf7:	5d                   	pop    ebp
c001baf8:	c3                   	ret    
c001baf9:	90                   	nop

c001bafa <IOAPIC::write(int, int)>:
c001bafa:	55                   	push   ebp
c001bafb:	89 e5                	mov    ebp,esp
c001bafd:	83 ec 10             	sub    esp,0x10
c001bb00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bb03:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bb09:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001bb0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bb0f:	0f b6 d0             	movzx  edx,al
c001bb12:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001bb15:	89 10                	mov    DWORD PTR [eax],edx
c001bb17:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001bb1a:	8d 50 10             	lea    edx,[eax+0x10]
c001bb1d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bb20:	89 02                	mov    DWORD PTR [edx],eax
c001bb22:	90                   	nop
c001bb23:	c9                   	leave  
c001bb24:	c3                   	ret    
c001bb25:	90                   	nop

c001bb26 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001bb26:	55                   	push   ebp
c001bb27:	89 e5                	mov    ebp,esp
c001bb29:	53                   	push   ebx
c001bb2a:	83 ec 2c             	sub    esp,0x2c
c001bb2d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bb30:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001bb33:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001bb36:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001bb39:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001bb3c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bb3f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001bb42:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001bb45:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001bb48:	88 d8                	mov    al,bl
c001bb4a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001bb4d:	88 c8                	mov    al,cl
c001bb4f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001bb52:	88 d0                	mov    al,dl
c001bb54:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001bb57:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bb5b:	83 c0 08             	add    eax,0x8
c001bb5e:	01 c0                	add    eax,eax
c001bb60:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bb63:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bb67:	83 c0 08             	add    eax,0x8
c001bb6a:	01 c0                	add    eax,eax
c001bb6c:	40                   	inc    eax
c001bb6d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001bb70:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001bb73:	50                   	push   eax
c001bb74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bb77:	e8 72 fe ff ff       	call   c001b9ee <IOAPIC::read(int)>
c001bb7c:	83 c4 08             	add    esp,0x8
c001bb7f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001bb82:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001bb89:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001bb8c:	c1 e0 18             	shl    eax,0x18
c001bb8f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001bb92:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001bb95:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001bb98:	52                   	push   edx
c001bb99:	50                   	push   eax
c001bb9a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bb9d:	e8 58 ff ff ff       	call   c001bafa <IOAPIC::write(int, int)>
c001bba2:	83 c4 0c             	add    esp,0xc
c001bba5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bba8:	50                   	push   eax
c001bba9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bbac:	e8 3d fe ff ff       	call   c001b9ee <IOAPIC::read(int)>
c001bbb1:	83 c4 08             	add    esp,0x8
c001bbb4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bbb7:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001bbbe:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001bbc5:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001bbcc:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001bbd0:	74 09                	je     c001bbdb <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c001bbd2:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001bbd9:	eb 07                	jmp    c001bbe2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c001bbdb:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001bbe2:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001bbe6:	74 09                	je     c001bbf1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c001bbe8:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001bbef:	eb 07                	jmp    c001bbf8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c001bbf1:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001bbf8:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001bbff:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001bc03:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001bc06:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001bc09:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bc0c:	52                   	push   edx
c001bc0d:	50                   	push   eax
c001bc0e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bc11:	e8 e4 fe ff ff       	call   c001bafa <IOAPIC::write(int, int)>
c001bc16:	83 c4 0c             	add    esp,0xc
c001bc19:	90                   	nop
c001bc1a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001bc1d:	c9                   	leave  
c001bc1e:	c3                   	ret    
c001bc1f:	90                   	nop

c001bc20 <APICTimer::close(int, int, void*)>:
c001bc20:	b8 00 00 00 00       	mov    eax,0x0
c001bc25:	c3                   	ret    
c001bc26:	66 90                	xchg   ax,ax

c001bc28 <apicTimerHandler(regs*, void*)>:
c001bc28:	83 ec 0c             	sub    esp,0xc
c001bc2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bc2f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001bc31:	b8 10 27 00 00       	mov    eax,0x2710
c001bc36:	ba 00 00 00 00       	mov    edx,0x0
c001bc3b:	f7 f1                	div    ecx
c001bc3d:	83 ec 0c             	sub    esp,0xc
c001bc40:	50                   	push   eax
c001bc41:	e8 1e 07 ff ff       	call   c000c364 <timerHandler(unsigned int)>
c001bc46:	83 c4 10             	add    esp,0x10
c001bc49:	90                   	nop
c001bc4a:	83 c4 0c             	add    esp,0xc
c001bc4d:	c3                   	ret    
c001bc4e:	66 90                	xchg   ax,ax

c001bc50 <APICTimer::open(int, int, void*)>:
c001bc50:	83 ec 0c             	sub    esp,0xc
c001bc53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc57:	8b 00                	mov    eax,DWORD PTR [eax]
c001bc59:	83 c0 24             	add    eax,0x24
c001bc5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001bc5e:	83 ec 08             	sub    esp,0x8
c001bc61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bc69:	ff d0                	call   eax
c001bc6b:	83 c4 10             	add    esp,0x10
c001bc6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc72:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bc76:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001bc7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bc84:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001bc8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bc8e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001bc94:	83 ec 0c             	sub    esp,0xc
c001bc97:	51                   	push   ecx
c001bc98:	6a 01                	push   0x1
c001bc9a:	68 28 bc 01 c0       	push   0xc001bc28
c001bc9f:	52                   	push   edx
c001bca0:	50                   	push   eax
c001bca1:	e8 fc ed fe ff       	call   c000aaa2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bca6:	83 c4 20             	add    esp,0x20
c001bca9:	89 c2                	mov    edx,eax
c001bcab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcaf:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001bcb5:	b8 00 00 00 00       	mov    eax,0x0
c001bcba:	83 c4 0c             	add    esp,0xc
c001bcbd:	c3                   	ret    
c001bcbe:	66 90                	xchg   ax,ax

c001bcc0 <APICTimer::write(int)>:
c001bcc0:	83 ec 0c             	sub    esp,0xc
c001bcc3:	83 ec 0c             	sub    esp,0xc
c001bcc6:	68 8c fa 01 c0       	push   0xc001fa8c
c001bccb:	e8 d9 36 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001bcd0:	83 c4 10             	add    esp,0x10
c001bcd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcd7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bcdb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001bce1:	90                   	nop
c001bce2:	83 c4 0c             	add    esp,0xc
c001bce5:	c3                   	ret    
c001bce6:	66 90                	xchg   ax,ax

c001bce8 <APICTimer::APICTimer()>:
c001bce8:	83 ec 0c             	sub    esp,0xc
c001bceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcef:	83 ec 08             	sub    esp,0x8
c001bcf2:	68 9c fa 01 c0       	push   0xc001fa9c
c001bcf7:	50                   	push   eax
c001bcf8:	e8 9b 05 ff ff       	call   c000c298 <Timer::Timer(char const*)>
c001bcfd:	83 c4 10             	add    esp,0x10
c001bd00:	ba b0 fa 01 c0       	mov    edx,0xc001fab0
c001bd05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd09:	89 10                	mov    DWORD PTR [eax],edx
c001bd0b:	90                   	nop
c001bd0c:	83 c4 0c             	add    esp,0xc
c001bd0f:	c3                   	ret    

c001bd10 <PIT::write(int)>:
c001bd10:	83 ec 10             	sub    esp,0x10
c001bd13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bd17:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bd1b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001bd21:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd25:	a3 e4 42 02 c0       	mov    ds:0xc00242e4,eax
c001bd2a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001bd2f:	99                   	cdq    
c001bd30:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001bd34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd38:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001bd3f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001bd44:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001bd48:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001bd4d:	ee                   	out    dx,al
c001bd4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd52:	0f b6 c0             	movzx  eax,al
c001bd55:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001bd5c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001bd60:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001bd64:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001bd69:	ee                   	out    dx,al
c001bd6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd6e:	c1 f8 08             	sar    eax,0x8
c001bd71:	0f b6 c0             	movzx  eax,al
c001bd74:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001bd7b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001bd7f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bd83:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001bd88:	ee                   	out    dx,al
c001bd89:	90                   	nop
c001bd8a:	83 c4 10             	add    esp,0x10
c001bd8d:	c3                   	ret    
c001bd8e:	66 90                	xchg   ax,ax

c001bd90 <pitHandler(regs*, void*)>:
c001bd90:	83 ec 0c             	sub    esp,0xc
c001bd93:	8b 0d e4 42 02 c0    	mov    ecx,DWORD PTR ds:0xc00242e4
c001bd99:	b8 10 27 00 00       	mov    eax,0x2710
c001bd9e:	99                   	cdq    
c001bd9f:	f7 f9                	idiv   ecx
c001bda1:	83 ec 0c             	sub    esp,0xc
c001bda4:	50                   	push   eax
c001bda5:	e8 ba 05 ff ff       	call   c000c364 <timerHandler(unsigned int)>
c001bdaa:	83 c4 10             	add    esp,0x10
c001bdad:	90                   	nop
c001bdae:	83 c4 0c             	add    esp,0xc
c001bdb1:	c3                   	ret    
c001bdb2:	66 90                	xchg   ax,ax

c001bdb4 <PIT::open(int, int, void*)>:
c001bdb4:	83 ec 0c             	sub    esp,0xc
c001bdb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdbb:	8b 00                	mov    eax,DWORD PTR [eax]
c001bdbd:	83 c0 24             	add    eax,0x24
c001bdc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001bdc2:	83 ec 08             	sub    esp,0x8
c001bdc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bdc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bdcd:	ff d0                	call   eax
c001bdcf:	83 c4 10             	add    esp,0x10
c001bdd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdd6:	83 ec 0c             	sub    esp,0xc
c001bdd9:	6a 00                	push   0x0
c001bddb:	6a 01                	push   0x1
c001bddd:	68 90 bd 01 c0       	push   0xc001bd90
c001bde2:	6a 00                	push   0x0
c001bde4:	50                   	push   eax
c001bde5:	e8 b8 ec fe ff       	call   c000aaa2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bdea:	83 c4 20             	add    esp,0x20
c001bded:	89 c2                	mov    edx,eax
c001bdef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdf3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001bdf9:	b8 00 00 00 00       	mov    eax,0x0
c001bdfe:	83 c4 0c             	add    esp,0xc
c001be01:	c3                   	ret    
c001be02:	66 90                	xchg   ax,ax

c001be04 <PIT::close(int, int, void*)>:
c001be04:	83 ec 0c             	sub    esp,0xc
c001be07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be0b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001be15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be19:	6a 01                	push   0x1
c001be1b:	68 90 bd 01 c0       	push   0xc001bd90
c001be20:	6a 00                	push   0x0
c001be22:	50                   	push   eax
c001be23:	e8 b0 ec fe ff       	call   c000aad8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001be28:	83 c4 10             	add    esp,0x10
c001be2b:	b8 00 00 00 00       	mov    eax,0x0
c001be30:	83 c4 0c             	add    esp,0xc
c001be33:	c3                   	ret    

c001be34 <PIT::PIT()>:
c001be34:	83 ec 0c             	sub    esp,0xc
c001be37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be3b:	83 ec 08             	sub    esp,0x8
c001be3e:	68 d8 fa 01 c0       	push   0xc001fad8
c001be43:	50                   	push   eax
c001be44:	e8 4f 04 ff ff       	call   c000c298 <Timer::Timer(char const*)>
c001be49:	83 c4 10             	add    esp,0x10
c001be4c:	ba 00 fb 01 c0       	mov    edx,0xc001fb00
c001be51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be55:	89 10                	mov    DWORD PTR [eax],edx
c001be57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be5b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001be61:	0f b6 d0             	movzx  edx,al
c001be64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be68:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001be6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be73:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001be79:	0f b6 d0             	movzx  edx,al
c001be7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be80:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001be85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be89:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001be8f:	8d 50 01             	lea    edx,[eax+0x1]
c001be92:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001be96:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001be9c:	0f b6 d0             	movzx  edx,al
c001be9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bea3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bea7:	83 e1 3f             	and    ecx,0x3f
c001beaa:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001beae:	90                   	nop
c001beaf:	83 c4 0c             	add    esp,0xc
c001beb2:	c3                   	ret    
c001beb3:	66 90                	xchg   ax,ax
c001beb5:	66 90                	xchg   ax,ax
c001beb7:	66 90                	xchg   ax,ax
c001beb9:	66 90                	xchg   ax,ax
c001bebb:	66 90                	xchg   ax,ax
c001bebd:	66 90                	xchg   ax,ax
c001bebf:	90                   	nop

c001bec0 <avxDetect>:
c001bec0:	b8 01 00 00 00       	mov    eax,0x1
c001bec5:	0f a2                	cpuid  
c001bec7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001becd:	74 15                	je     c001bee4 <avxDetect.noAVX>
c001becf:	b8 01 00 00 00       	mov    eax,0x1
c001bed4:	0f a2                	cpuid  
c001bed6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001bedc:	74 06                	je     c001bee4 <avxDetect.noAVX>
c001bede:	b8 01 00 00 00       	mov    eax,0x1
c001bee3:	c3                   	ret    

c001bee4 <avxDetect.noAVX>:
c001bee4:	b8 00 00 00 00       	mov    eax,0x0
c001bee9:	c3                   	ret    

c001beea <avxSave>:
c001beea:	53                   	push   ebx
c001beeb:	52                   	push   edx
c001beec:	31 c0                	xor    eax,eax
c001beee:	48                   	dec    eax
c001beef:	89 c2                	mov    edx,eax
c001bef1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bef5:	0f ae 23             	xsave  [ebx]
c001bef8:	5a                   	pop    edx
c001bef9:	5b                   	pop    ebx
c001befa:	c3                   	ret    

c001befb <avxLoad>:
c001befb:	53                   	push   ebx
c001befc:	52                   	push   edx
c001befd:	31 c0                	xor    eax,eax
c001beff:	48                   	dec    eax
c001bf00:	89 c2                	mov    edx,eax
c001bf02:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bf06:	0f ae 2b             	xrstor [ebx]
c001bf09:	5a                   	pop    edx
c001bf0a:	5b                   	pop    ebx
c001bf0b:	c3                   	ret    

c001bf0c <avxInit>:
c001bf0c:	e8 57 02 00 00       	call   c001c168 <sseInit>
c001bf11:	50                   	push   eax
c001bf12:	51                   	push   ecx
c001bf13:	0f 20 e0             	mov    eax,cr4
c001bf16:	0d 00 00 04 00       	or     eax,0x40000
c001bf1b:	0f 22 e0             	mov    cr4,eax
c001bf1e:	31 c9                	xor    ecx,ecx
c001bf20:	0f 01 d0             	xgetbv 
c001bf23:	0d 07 00 00 00       	or     eax,0x7
c001bf28:	0f 01 d1             	xsetbv 
c001bf2b:	59                   	pop    ecx
c001bf2c:	58                   	pop    eax
c001bf2d:	c3                   	ret    

c001bf2e <avxClose>:
c001bf2e:	c3                   	ret    

c001bf2f <wouldSheSayYes>:
c001bf2f:	c3                   	ret    
c001bf30:	49                   	dec    ecx
c001bf31:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bf35:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bf39:	75 20                	jne    c001bf5b <isr0+0xb>
c001bf3b:	4e                   	dec    esi
c001bf3c:	79 61                	jns    c001bf9f <isr7+0x3>
c001bf3e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bf43:	66 90                	xchg   ax,ax
c001bf45:	66 90                	xchg   ax,ax
c001bf47:	66 90                	xchg   ax,ax
c001bf49:	66 90                	xchg   ax,ax
c001bf4b:	66 90                	xchg   ax,ax
c001bf4d:	66 90                	xchg   ax,ax
c001bf4f:	90                   	nop

c001bf50 <isr0>:
c001bf50:	fa                   	cli    
c001bf51:	68 00 00 00 00       	push   0x0
c001bf56:	68 00 00 00 00       	push   0x0
c001bf5b:	e9 44 01 00 00       	jmp    c001c0a4 <int_common_stub>

c001bf60 <isr1>:
c001bf60:	fa                   	cli    
c001bf61:	6a 00                	push   0x0
c001bf63:	6a 01                	push   0x1
c001bf65:	e9 3a 01 00 00       	jmp    c001c0a4 <int_common_stub>

c001bf6a <isr2>:
c001bf6a:	fa                   	cli    
c001bf6b:	6a 00                	push   0x0
c001bf6d:	6a 02                	push   0x2
c001bf6f:	e9 30 01 00 00       	jmp    c001c0a4 <int_common_stub>

c001bf74 <isr3>:
c001bf74:	fa                   	cli    
c001bf75:	6a 00                	push   0x0
c001bf77:	6a 03                	push   0x3
c001bf79:	e9 26 01 00 00       	jmp    c001c0a4 <int_common_stub>

c001bf7e <isr4>:
c001bf7e:	fa                   	cli    
c001bf7f:	6a 00                	push   0x0
c001bf81:	6a 04                	push   0x4
c001bf83:	e9 1c 01 00 00       	jmp    c001c0a4 <int_common_stub>

c001bf88 <isr5>:
c001bf88:	fa                   	cli    
c001bf89:	6a 00                	push   0x0
c001bf8b:	6a 05                	push   0x5
c001bf8d:	e9 12 01 00 00       	jmp    c001c0a4 <int_common_stub>

c001bf92 <isr6>:
c001bf92:	fa                   	cli    
c001bf93:	6a 00                	push   0x0
c001bf95:	6a 06                	push   0x6
c001bf97:	e9 08 01 00 00       	jmp    c001c0a4 <int_common_stub>

c001bf9c <isr7>:
c001bf9c:	fa                   	cli    
c001bf9d:	6a 00                	push   0x0
c001bf9f:	6a 07                	push   0x7
c001bfa1:	e9 fe 00 00 00       	jmp    c001c0a4 <int_common_stub>

c001bfa6 <isr8>:
c001bfa6:	fa                   	cli    
c001bfa7:	6a 08                	push   0x8
c001bfa9:	e9 f6 00 00 00       	jmp    c001c0a4 <int_common_stub>

c001bfae <isr9>:
c001bfae:	fa                   	cli    
c001bfaf:	6a 00                	push   0x0
c001bfb1:	6a 09                	push   0x9
c001bfb3:	e9 ec 00 00 00       	jmp    c001c0a4 <int_common_stub>

c001bfb8 <isr10>:
c001bfb8:	fa                   	cli    
c001bfb9:	6a 0a                	push   0xa
c001bfbb:	e9 e4 00 00 00       	jmp    c001c0a4 <int_common_stub>

c001bfc0 <isr11>:
c001bfc0:	fa                   	cli    
c001bfc1:	6a 0b                	push   0xb
c001bfc3:	e9 dc 00 00 00       	jmp    c001c0a4 <int_common_stub>

c001bfc8 <isr12>:
c001bfc8:	fa                   	cli    
c001bfc9:	6a 0c                	push   0xc
c001bfcb:	e9 d4 00 00 00       	jmp    c001c0a4 <int_common_stub>

c001bfd0 <isr13>:
c001bfd0:	fa                   	cli    
c001bfd1:	6a 0d                	push   0xd
c001bfd3:	e9 cc 00 00 00       	jmp    c001c0a4 <int_common_stub>

c001bfd8 <isr14>:
c001bfd8:	fa                   	cli    
c001bfd9:	6a 0e                	push   0xe
c001bfdb:	e9 c4 00 00 00       	jmp    c001c0a4 <int_common_stub>

c001bfe0 <isr15>:
c001bfe0:	fa                   	cli    
c001bfe1:	6a 00                	push   0x0
c001bfe3:	6a 0f                	push   0xf
c001bfe5:	e9 ba 00 00 00       	jmp    c001c0a4 <int_common_stub>

c001bfea <isr16>:
c001bfea:	fa                   	cli    
c001bfeb:	6a 00                	push   0x0
c001bfed:	6a 10                	push   0x10
c001bfef:	e9 b0 00 00 00       	jmp    c001c0a4 <int_common_stub>

c001bff4 <isr17>:
c001bff4:	fa                   	cli    
c001bff5:	6a 00                	push   0x0
c001bff7:	6a 11                	push   0x11
c001bff9:	e9 a6 00 00 00       	jmp    c001c0a4 <int_common_stub>

c001bffe <isr18>:
c001bffe:	fa                   	cli    
c001bfff:	6a 00                	push   0x0
c001c001:	6a 12                	push   0x12
c001c003:	e9 9c 00 00 00       	jmp    c001c0a4 <int_common_stub>

c001c008 <irq3>:
c001c008:	fa                   	cli    
c001c009:	6a 00                	push   0x0
c001c00b:	6a 23                	push   0x23
c001c00d:	e9 92 00 00 00       	jmp    c001c0a4 <int_common_stub>

c001c012 <irq4>:
c001c012:	fa                   	cli    
c001c013:	6a 00                	push   0x0
c001c015:	6a 24                	push   0x24
c001c017:	e9 88 00 00 00       	jmp    c001c0a4 <int_common_stub>

c001c01c <irq5>:
c001c01c:	fa                   	cli    
c001c01d:	6a 00                	push   0x0
c001c01f:	6a 25                	push   0x25
c001c021:	e9 7e 00 00 00       	jmp    c001c0a4 <int_common_stub>

c001c026 <irq6>:
c001c026:	fa                   	cli    
c001c027:	6a 00                	push   0x0
c001c029:	6a 26                	push   0x26
c001c02b:	e9 74 00 00 00       	jmp    c001c0a4 <int_common_stub>

c001c030 <irq7>:
c001c030:	fa                   	cli    
c001c031:	6a 00                	push   0x0
c001c033:	6a 27                	push   0x27
c001c035:	e9 6a 00 00 00       	jmp    c001c0a4 <int_common_stub>

c001c03a <irq8>:
c001c03a:	fa                   	cli    
c001c03b:	6a 00                	push   0x0
c001c03d:	6a 28                	push   0x28
c001c03f:	e9 60 00 00 00       	jmp    c001c0a4 <int_common_stub>

c001c044 <irq9>:
c001c044:	fa                   	cli    
c001c045:	6a 00                	push   0x0
c001c047:	6a 29                	push   0x29
c001c049:	e9 56 00 00 00       	jmp    c001c0a4 <int_common_stub>

c001c04e <irq10>:
c001c04e:	fa                   	cli    
c001c04f:	6a 00                	push   0x0
c001c051:	6a 2a                	push   0x2a
c001c053:	e9 4c 00 00 00       	jmp    c001c0a4 <int_common_stub>

c001c058 <irq11>:
c001c058:	fa                   	cli    
c001c059:	6a 00                	push   0x0
c001c05b:	6a 2b                	push   0x2b
c001c05d:	e9 42 00 00 00       	jmp    c001c0a4 <int_common_stub>

c001c062 <irq12>:
c001c062:	fa                   	cli    
c001c063:	6a 00                	push   0x0
c001c065:	6a 2c                	push   0x2c
c001c067:	e9 38 00 00 00       	jmp    c001c0a4 <int_common_stub>

c001c06c <irq13>:
c001c06c:	fa                   	cli    
c001c06d:	6a 00                	push   0x0
c001c06f:	6a 2d                	push   0x2d
c001c071:	e9 2e 00 00 00       	jmp    c001c0a4 <int_common_stub>

c001c076 <irq14>:
c001c076:	fa                   	cli    
c001c077:	6a 00                	push   0x0
c001c079:	6a 2e                	push   0x2e
c001c07b:	e9 24 00 00 00       	jmp    c001c0a4 <int_common_stub>

c001c080 <irq15>:
c001c080:	fa                   	cli    
c001c081:	6a 00                	push   0x0
c001c083:	6a 2f                	push   0x2f
c001c085:	e9 1a 00 00 00       	jmp    c001c0a4 <int_common_stub>

c001c08a <irq1>:
c001c08a:	fa                   	cli    
c001c08b:	6a 00                	push   0x0
c001c08d:	6a 21                	push   0x21
c001c08f:	eb 13                	jmp    c001c0a4 <int_common_stub>

c001c091 <irq2>:
c001c091:	fa                   	cli    
c001c092:	6a 00                	push   0x0
c001c094:	6a 22                	push   0x22
c001c096:	eb 0c                	jmp    c001c0a4 <int_common_stub>

c001c098 <isr96>:
c001c098:	6a 00                	push   0x0
c001c09a:	6a 60                	push   0x60
c001c09c:	fb                   	sti    
c001c09d:	eb 05                	jmp    c001c0a4 <int_common_stub>

c001c09f <irq0>:
c001c09f:	fa                   	cli    
c001c0a0:	6a 00                	push   0x0
c001c0a2:	6a 20                	push   0x20

c001c0a4 <int_common_stub>:
c001c0a4:	60                   	pusha  
c001c0a5:	1e                   	push   ds
c001c0a6:	06                   	push   es
c001c0a7:	0f a0                	push   fs
c001c0a9:	0f a8                	push   gs
c001c0ab:	66 b8 10 00          	mov    ax,0x10
c001c0af:	66 8e d8             	mov    ds,ax
c001c0b2:	66 8e c0             	mov    es,ax
c001c0b5:	66 8e e0             	mov    fs,ax
c001c0b8:	66 8e e8             	mov    gs,ax
c001c0bb:	54                   	push   esp
c001c0bc:	fc                   	cld    
c001c0bd:	e8 de ee fe ff       	call   c000afa0 <int_handler>
c001c0c2:	81 c4 04 00 00 00    	add    esp,0x4
c001c0c8:	0f a9                	pop    gs
c001c0ca:	0f a1                	pop    fs
c001c0cc:	07                   	pop    es
c001c0cd:	1f                   	pop    ds
c001c0ce:	61                   	popa   
c001c0cf:	81 c4 08 00 00 00    	add    esp,0x8
c001c0d5:	cf                   	iret   

c001c0d6 <irq16>:
c001c0d6:	fa                   	cli    
c001c0d7:	6a 00                	push   0x0
c001c0d9:	6a 30                	push   0x30
c001c0db:	e9 c4 ff ff ff       	jmp    c001c0a4 <int_common_stub>

c001c0e0 <irq17>:
c001c0e0:	fa                   	cli    
c001c0e1:	6a 00                	push   0x0
c001c0e3:	6a 31                	push   0x31
c001c0e5:	e9 ba ff ff ff       	jmp    c001c0a4 <int_common_stub>

c001c0ea <irq18>:
c001c0ea:	fa                   	cli    
c001c0eb:	6a 00                	push   0x0
c001c0ed:	6a 32                	push   0x32
c001c0ef:	e9 b0 ff ff ff       	jmp    c001c0a4 <int_common_stub>

c001c0f4 <irq19>:
c001c0f4:	fa                   	cli    
c001c0f5:	6a 00                	push   0x0
c001c0f7:	6a 33                	push   0x33
c001c0f9:	e9 a6 ff ff ff       	jmp    c001c0a4 <int_common_stub>

c001c0fe <irq20>:
c001c0fe:	fa                   	cli    
c001c0ff:	6a 00                	push   0x0
c001c101:	6a 34                	push   0x34
c001c103:	e9 9c ff ff ff       	jmp    c001c0a4 <int_common_stub>

c001c108 <irq21>:
c001c108:	fa                   	cli    
c001c109:	6a 00                	push   0x0
c001c10b:	6a 35                	push   0x35
c001c10d:	e9 92 ff ff ff       	jmp    c001c0a4 <int_common_stub>

c001c112 <irq22>:
c001c112:	fa                   	cli    
c001c113:	6a 00                	push   0x0
c001c115:	6a 36                	push   0x36
c001c117:	e9 88 ff ff ff       	jmp    c001c0a4 <int_common_stub>

c001c11c <irq23>:
c001c11c:	fa                   	cli    
c001c11d:	6a 00                	push   0x0
c001c11f:	6a 37                	push   0x37
c001c121:	e9 7e ff ff ff       	jmp    c001c0a4 <int_common_stub>
c001c126:	66 90                	xchg   ax,ax
c001c128:	66 90                	xchg   ax,ax
c001c12a:	66 90                	xchg   ax,ax
c001c12c:	66 90                	xchg   ax,ax
c001c12e:	66 90                	xchg   ax,ax

c001c130 <i386GetRDRAND>:
c001c130:	b9 64 00 00 00       	mov    ecx,0x64

c001c135 <retry>:
c001c135:	0f c7 f0             	rdrand eax
c001c138:	72 05                	jb     c001c13f <retry.done>
c001c13a:	e2 f9                	loop   c001c135 <retry>

c001c13c <retry.fail>:
c001c13c:	31 c0                	xor    eax,eax
c001c13e:	c3                   	ret    

c001c13f <retry.done>:
c001c13f:	c3                   	ret    

c001c140 <absolutelyNoChanceInHell>:
c001c140:	b8 01 00 00 00       	mov    eax,0x1
c001c145:	0f a2                	cpuid  
c001c147:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001c14d:	74 06                	je     c001c155 <sseDetect.noSSE>
c001c14f:	b8 01 00 00 00       	mov    eax,0x1
c001c154:	c3                   	ret    

c001c155 <sseDetect.noSSE>:
c001c155:	31 c0                	xor    eax,eax
c001c157:	c3                   	ret    

c001c158 <sseSave>:
c001c158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c15c:	0f ae 00             	fxsave [eax]
c001c15f:	c3                   	ret    

c001c160 <sseLoad>:
c001c160:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c164:	0f ae 08             	fxrstor [eax]
c001c167:	c3                   	ret    

c001c168 <sseInit>:
c001c168:	e8 42 00 00 00       	call   c001c1af <x87Init>
c001c16d:	0f 20 e0             	mov    eax,cr4
c001c170:	66 0d 00 06          	or     ax,0x600
c001c174:	0f 22 e0             	mov    cr4,eax
c001c177:	c3                   	ret    

c001c178 <sseClose>:
c001c178:	c3                   	ret    
c001c179:	66 90                	xchg   ax,ax
c001c17b:	66 90                	xchg   ax,ax
c001c17d:	66 90                	xchg   ax,ax
c001c17f:	90                   	nop

c001c180 <value_37F>:
c001c180:	7f 03                	jg     c001c185 <value_37A+0x1>

c001c182 <value_37E>:
c001c182:	7e 03                	jle    c001c187 <x87Detect+0x1>

c001c184 <value_37A>:
c001c184:	7a 03                	jp     c001c189 <x87Detect+0x3>

c001c186 <x87Detect>:
c001c186:	b8 01 00 00 00       	mov    eax,0x1
c001c18b:	0f a2                	cpuid  
c001c18d:	f7 c2 01 00 00 00    	test   edx,0x1
c001c193:	74 06                	je     c001c19b <x87Detect.nox87>
c001c195:	b8 01 00 00 00       	mov    eax,0x1
c001c19a:	c3                   	ret    

c001c19b <x87Detect.nox87>:
c001c19b:	b8 00 00 00 00       	mov    eax,0x0
c001c1a0:	c3                   	ret    

c001c1a1 <x87Save>:
c001c1a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1a5:	dd 30                	fnsave [eax]
c001c1a7:	c3                   	ret    

c001c1a8 <x87Load>:
c001c1a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1ac:	dd 20                	frstor [eax]
c001c1ae:	c3                   	ret    

c001c1af <x87Init>:
c001c1af:	0f 20 c0             	mov    eax,cr0
c001c1b2:	66 25 fb ff          	and    ax,0xfffb
c001c1b6:	66 0d 22 00          	or     ax,0x22
c001c1ba:	0f 22 c0             	mov    cr0,eax
c001c1bd:	db e3                	fninit 
c001c1bf:	0f 06                	clts   
c001c1c1:	d9 2d 84 c1 01 c0    	fldcw  WORD PTR ds:0xc001c184
c001c1c7:	c3                   	ret    

c001c1c8 <x87Close>:
c001c1c8:	c3                   	ret    
c001c1c9:	66 90                	xchg   ax,ax
c001c1cb:	90                   	nop

c001c1cc <__do_global_ctors_aux>:
c001c1cc:	a1 90 d1 01 c0       	mov    eax,ds:0xc001d190
c001c1d1:	83 f8 ff             	cmp    eax,0xffffffff
c001c1d4:	74 1a                	je     c001c1f0 <__do_global_ctors_aux+0x24>
c001c1d6:	55                   	push   ebp
c001c1d7:	89 e5                	mov    ebp,esp
c001c1d9:	53                   	push   ebx
c001c1da:	52                   	push   edx
c001c1db:	bb 90 d1 01 c0       	mov    ebx,0xc001d190
c001c1e0:	ff d0                	call   eax
c001c1e2:	83 eb 04             	sub    ebx,0x4
c001c1e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c1e7:	83 f8 ff             	cmp    eax,0xffffffff
c001c1ea:	75 f4                	jne    c001c1e0 <__do_global_ctors_aux+0x14>
c001c1ec:	58                   	pop    eax
c001c1ed:	5b                   	pop    ebx
c001c1ee:	5d                   	pop    ebp
c001c1ef:	c3                   	ret    
c001c1f0:	c3                   	ret    
c001c1f1:	66 90                	xchg   ax,ax
c001c1f3:	90                   	nop

c001c1f4 <__divdi3>:
c001c1f4:	55                   	push   ebp
c001c1f5:	57                   	push   edi
c001c1f6:	56                   	push   esi
c001c1f7:	53                   	push   ebx
c001c1f8:	83 ec 1c             	sub    esp,0x1c
c001c1fb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c1ff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c203:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001c206:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001c20a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c20e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c212:	85 db                	test   ebx,ebx
c001c214:	0f 88 8e 00 00 00    	js     c001c2a8 <__divdi3+0xb4>
c001c21a:	89 dd                	mov    ebp,ebx
c001c21c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c224:	89 d3                	mov    ebx,edx
c001c226:	85 d2                	test   edx,edx
c001c228:	79 0d                	jns    c001c237 <__divdi3+0x43>
c001c22a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001c22e:	f7 d8                	neg    eax
c001c230:	83 d2 00             	adc    edx,0x0
c001c233:	f7 da                	neg    edx
c001c235:	89 d3                	mov    ebx,edx
c001c237:	89 c7                	mov    edi,eax
c001c239:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c23c:	85 db                	test   ebx,ebx
c001c23e:	75 48                	jne    c001c288 <__divdi3+0x94>
c001c240:	39 ef                	cmp    edi,ebp
c001c242:	76 24                	jbe    c001c268 <__divdi3+0x74>
c001c244:	89 ea                	mov    edx,ebp
c001c246:	f7 f7                	div    edi
c001c248:	89 c1                	mov    ecx,eax
c001c24a:	31 f6                	xor    esi,esi
c001c24c:	89 c8                	mov    eax,ecx
c001c24e:	89 f2                	mov    edx,esi
c001c250:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c254:	85 c9                	test   ecx,ecx
c001c256:	74 07                	je     c001c25f <__divdi3+0x6b>
c001c258:	f7 d8                	neg    eax
c001c25a:	83 d2 00             	adc    edx,0x0
c001c25d:	f7 da                	neg    edx
c001c25f:	83 c4 1c             	add    esp,0x1c
c001c262:	5b                   	pop    ebx
c001c263:	5e                   	pop    esi
c001c264:	5f                   	pop    edi
c001c265:	5d                   	pop    ebp
c001c266:	c3                   	ret    
c001c267:	90                   	nop
c001c268:	85 ff                	test   edi,edi
c001c26a:	75 0b                	jne    c001c277 <__divdi3+0x83>
c001c26c:	b8 01 00 00 00       	mov    eax,0x1
c001c271:	31 d2                	xor    edx,edx
c001c273:	f7 f3                	div    ebx
c001c275:	89 c7                	mov    edi,eax
c001c277:	31 d2                	xor    edx,edx
c001c279:	89 e8                	mov    eax,ebp
c001c27b:	f7 f7                	div    edi
c001c27d:	89 c6                	mov    esi,eax
c001c27f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c282:	f7 f7                	div    edi
c001c284:	89 c1                	mov    ecx,eax
c001c286:	eb c4                	jmp    c001c24c <__divdi3+0x58>
c001c288:	39 eb                	cmp    ebx,ebp
c001c28a:	77 3c                	ja     c001c2c8 <__divdi3+0xd4>
c001c28c:	0f bd f3             	bsr    esi,ebx
c001c28f:	83 f6 1f             	xor    esi,0x1f
c001c292:	75 40                	jne    c001c2d4 <__divdi3+0xe0>
c001c294:	39 eb                	cmp    ebx,ebp
c001c296:	72 09                	jb     c001c2a1 <__divdi3+0xad>
c001c298:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001c29b:	0f 87 97 00 00 00    	ja     c001c338 <__divdi3+0x144>
c001c2a1:	b9 01 00 00 00       	mov    ecx,0x1
c001c2a6:	eb a4                	jmp    c001c24c <__divdi3+0x58>
c001c2a8:	f7 d9                	neg    ecx
c001c2aa:	83 d3 00             	adc    ebx,0x0
c001c2ad:	f7 db                	neg    ebx
c001c2af:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001c2b2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001c2b6:	89 dd                	mov    ebp,ebx
c001c2b8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001c2c0:	e9 5f ff ff ff       	jmp    c001c224 <__divdi3+0x30>
c001c2c5:	8d 76 00             	lea    esi,[esi+0x0]
c001c2c8:	31 f6                	xor    esi,esi
c001c2ca:	31 c9                	xor    ecx,ecx
c001c2cc:	e9 7b ff ff ff       	jmp    c001c24c <__divdi3+0x58>
c001c2d1:	8d 76 00             	lea    esi,[esi+0x0]
c001c2d4:	b8 20 00 00 00       	mov    eax,0x20
c001c2d9:	29 f0                	sub    eax,esi
c001c2db:	89 f1                	mov    ecx,esi
c001c2dd:	d3 e3                	shl    ebx,cl
c001c2df:	89 fa                	mov    edx,edi
c001c2e1:	88 c1                	mov    cl,al
c001c2e3:	d3 ea                	shr    edx,cl
c001c2e5:	09 da                	or     edx,ebx
c001c2e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c2eb:	89 f1                	mov    ecx,esi
c001c2ed:	d3 e7                	shl    edi,cl
c001c2ef:	89 eb                	mov    ebx,ebp
c001c2f1:	88 c1                	mov    cl,al
c001c2f3:	d3 eb                	shr    ebx,cl
c001c2f5:	89 f1                	mov    ecx,esi
c001c2f7:	d3 e5                	shl    ebp,cl
c001c2f9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001c2fc:	88 c1                	mov    cl,al
c001c2fe:	d3 ea                	shr    edx,cl
c001c300:	09 d5                	or     ebp,edx
c001c302:	89 e8                	mov    eax,ebp
c001c304:	89 da                	mov    edx,ebx
c001c306:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001c30a:	89 d3                	mov    ebx,edx
c001c30c:	89 c5                	mov    ebp,eax
c001c30e:	f7 e7                	mul    edi
c001c310:	39 d3                	cmp    ebx,edx
c001c312:	72 18                	jb     c001c32c <__divdi3+0x138>
c001c314:	74 0a                	je     c001c320 <__divdi3+0x12c>
c001c316:	89 e9                	mov    ecx,ebp
c001c318:	31 f6                	xor    esi,esi
c001c31a:	e9 2d ff ff ff       	jmp    c001c24c <__divdi3+0x58>
c001c31f:	90                   	nop
c001c320:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001c323:	89 f1                	mov    ecx,esi
c001c325:	d3 e7                	shl    edi,cl
c001c327:	39 c7                	cmp    edi,eax
c001c329:	73 eb                	jae    c001c316 <__divdi3+0x122>
c001c32b:	90                   	nop
c001c32c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001c32f:	31 f6                	xor    esi,esi
c001c331:	e9 16 ff ff ff       	jmp    c001c24c <__divdi3+0x58>
c001c336:	66 90                	xchg   ax,ax
c001c338:	31 c9                	xor    ecx,ecx
c001c33a:	e9 0d ff ff ff       	jmp    c001c24c <__divdi3+0x58>
c001c33f:	90                   	nop

c001c340 <__moddi3>:
c001c340:	55                   	push   ebp
c001c341:	57                   	push   edi
c001c342:	56                   	push   esi
c001c343:	53                   	push   ebx
c001c344:	83 ec 2c             	sub    esp,0x2c
c001c347:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c34b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001c34f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c353:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001c357:	85 db                	test   ebx,ebx
c001c359:	0f 88 85 00 00 00    	js     c001c3e4 <__moddi3+0xa4>
c001c35f:	89 de                	mov    esi,ebx
c001c361:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c369:	89 d7                	mov    edi,edx
c001c36b:	85 d2                	test   edx,edx
c001c36d:	79 09                	jns    c001c378 <__moddi3+0x38>
c001c36f:	f7 d8                	neg    eax
c001c371:	83 d2 00             	adc    edx,0x0
c001c374:	f7 da                	neg    edx
c001c376:	89 d7                	mov    edi,edx
c001c378:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c37c:	89 cd                	mov    ebp,ecx
c001c37e:	85 ff                	test   edi,edi
c001c380:	75 52                	jne    c001c3d4 <__moddi3+0x94>
c001c382:	89 c3                	mov    ebx,eax
c001c384:	39 f0                	cmp    eax,esi
c001c386:	76 24                	jbe    c001c3ac <__moddi3+0x6c>
c001c388:	89 c8                	mov    eax,ecx
c001c38a:	89 f2                	mov    edx,esi
c001c38c:	f7 f3                	div    ebx
c001c38e:	89 d6                	mov    esi,edx
c001c390:	89 f0                	mov    eax,esi
c001c392:	31 d2                	xor    edx,edx
c001c394:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c398:	85 c9                	test   ecx,ecx
c001c39a:	74 07                	je     c001c3a3 <__moddi3+0x63>
c001c39c:	f7 d8                	neg    eax
c001c39e:	83 d2 00             	adc    edx,0x0
c001c3a1:	f7 da                	neg    edx
c001c3a3:	83 c4 2c             	add    esp,0x2c
c001c3a6:	5b                   	pop    ebx
c001c3a7:	5e                   	pop    esi
c001c3a8:	5f                   	pop    edi
c001c3a9:	5d                   	pop    ebp
c001c3aa:	c3                   	ret    
c001c3ab:	90                   	nop
c001c3ac:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c3b0:	85 db                	test   ebx,ebx
c001c3b2:	75 0d                	jne    c001c3c1 <__moddi3+0x81>
c001c3b4:	b8 01 00 00 00       	mov    eax,0x1
c001c3b9:	31 d2                	xor    edx,edx
c001c3bb:	f7 f7                	div    edi
c001c3bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c3c1:	89 f0                	mov    eax,esi
c001c3c3:	31 d2                	xor    edx,edx
c001c3c5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c3c9:	f7 f7                	div    edi
c001c3cb:	89 e8                	mov    eax,ebp
c001c3cd:	f7 f7                	div    edi
c001c3cf:	89 d6                	mov    esi,edx
c001c3d1:	eb bd                	jmp    c001c390 <__moddi3+0x50>
c001c3d3:	90                   	nop
c001c3d4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c3d8:	39 f7                	cmp    edi,esi
c001c3da:	76 20                	jbe    c001c3fc <__moddi3+0xbc>
c001c3dc:	89 c8                	mov    eax,ecx
c001c3de:	89 f2                	mov    edx,esi
c001c3e0:	eb b2                	jmp    c001c394 <__moddi3+0x54>
c001c3e2:	66 90                	xchg   ax,ax
c001c3e4:	f7 d9                	neg    ecx
c001c3e6:	83 d3 00             	adc    ebx,0x0
c001c3e9:	f7 db                	neg    ebx
c001c3eb:	89 de                	mov    esi,ebx
c001c3ed:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c3f5:	e9 6f ff ff ff       	jmp    c001c369 <__moddi3+0x29>
c001c3fa:	66 90                	xchg   ax,ax
c001c3fc:	0f bd c7             	bsr    eax,edi
c001c3ff:	83 f0 1f             	xor    eax,0x1f
c001c402:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c406:	75 24                	jne    c001c42c <__moddi3+0xec>
c001c408:	39 f7                	cmp    edi,esi
c001c40a:	72 06                	jb     c001c412 <__moddi3+0xd2>
c001c40c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c410:	77 0c                	ja     c001c41e <__moddi3+0xde>
c001c412:	89 e9                	mov    ecx,ebp
c001c414:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c418:	19 fe                	sbb    esi,edi
c001c41a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c41e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c422:	89 f2                	mov    edx,esi
c001c424:	e9 6b ff ff ff       	jmp    c001c394 <__moddi3+0x54>
c001c429:	8d 76 00             	lea    esi,[esi+0x0]
c001c42c:	b8 20 00 00 00       	mov    eax,0x20
c001c431:	89 c2                	mov    edx,eax
c001c433:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c437:	29 da                	sub    edx,ebx
c001c439:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c43d:	88 d9                	mov    cl,bl
c001c43f:	d3 e7                	shl    edi,cl
c001c441:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c445:	88 d1                	mov    cl,dl
c001c447:	d3 e8                	shr    eax,cl
c001c449:	09 c7                	or     edi,eax
c001c44b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c44f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c453:	89 d8                	mov    eax,ebx
c001c455:	88 d9                	mov    cl,bl
c001c457:	d3 e7                	shl    edi,cl
c001c459:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c45d:	89 f3                	mov    ebx,esi
c001c45f:	88 d1                	mov    cl,dl
c001c461:	d3 eb                	shr    ebx,cl
c001c463:	89 c7                	mov    edi,eax
c001c465:	88 c1                	mov    cl,al
c001c467:	d3 e6                	shl    esi,cl
c001c469:	89 e8                	mov    eax,ebp
c001c46b:	88 d1                	mov    cl,dl
c001c46d:	d3 e8                	shr    eax,cl
c001c46f:	09 f0                	or     eax,esi
c001c471:	89 f9                	mov    ecx,edi
c001c473:	d3 e5                	shl    ebp,cl
c001c475:	89 da                	mov    edx,ebx
c001c477:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c47b:	89 d3                	mov    ebx,edx
c001c47d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c481:	89 c6                	mov    esi,eax
c001c483:	89 d1                	mov    ecx,edx
c001c485:	39 d3                	cmp    ebx,edx
c001c487:	72 27                	jb     c001c4b0 <__moddi3+0x170>
c001c489:	74 21                	je     c001c4ac <__moddi3+0x16c>
c001c48b:	29 f5                	sub    ebp,esi
c001c48d:	19 cb                	sbb    ebx,ecx
c001c48f:	89 de                	mov    esi,ebx
c001c491:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c495:	d3 e6                	shl    esi,cl
c001c497:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c49b:	89 f9                	mov    ecx,edi
c001c49d:	d3 ed                	shr    ebp,cl
c001c49f:	09 ee                	or     esi,ebp
c001c4a1:	89 f0                	mov    eax,esi
c001c4a3:	d3 eb                	shr    ebx,cl
c001c4a5:	89 da                	mov    edx,ebx
c001c4a7:	e9 e8 fe ff ff       	jmp    c001c394 <__moddi3+0x54>
c001c4ac:	39 c5                	cmp    ebp,eax
c001c4ae:	73 db                	jae    c001c48b <__moddi3+0x14b>
c001c4b0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c4b4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c4b8:	89 d1                	mov    ecx,edx
c001c4ba:	89 c6                	mov    esi,eax
c001c4bc:	eb cd                	jmp    c001c48b <__moddi3+0x14b>
c001c4be:	66 90                	xchg   ax,ax

c001c4c0 <__udivdi3>:
c001c4c0:	55                   	push   ebp
c001c4c1:	57                   	push   edi
c001c4c2:	56                   	push   esi
c001c4c3:	53                   	push   ebx
c001c4c4:	83 ec 1c             	sub    esp,0x1c
c001c4c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c4cb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c4cf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c4d3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c4d7:	85 d2                	test   edx,edx
c001c4d9:	75 41                	jne    c001c51c <__udivdi3+0x5c>
c001c4db:	39 f7                	cmp    edi,esi
c001c4dd:	76 15                	jbe    c001c4f4 <__udivdi3+0x34>
c001c4df:	89 e8                	mov    eax,ebp
c001c4e1:	89 f2                	mov    edx,esi
c001c4e3:	f7 f7                	div    edi
c001c4e5:	31 db                	xor    ebx,ebx
c001c4e7:	89 da                	mov    edx,ebx
c001c4e9:	83 c4 1c             	add    esp,0x1c
c001c4ec:	5b                   	pop    ebx
c001c4ed:	5e                   	pop    esi
c001c4ee:	5f                   	pop    edi
c001c4ef:	5d                   	pop    ebp
c001c4f0:	c3                   	ret    
c001c4f1:	8d 76 00             	lea    esi,[esi+0x0]
c001c4f4:	89 f9                	mov    ecx,edi
c001c4f6:	85 ff                	test   edi,edi
c001c4f8:	75 0b                	jne    c001c505 <__udivdi3+0x45>
c001c4fa:	b8 01 00 00 00       	mov    eax,0x1
c001c4ff:	31 d2                	xor    edx,edx
c001c501:	f7 f7                	div    edi
c001c503:	89 c1                	mov    ecx,eax
c001c505:	31 d2                	xor    edx,edx
c001c507:	89 f0                	mov    eax,esi
c001c509:	f7 f1                	div    ecx
c001c50b:	89 c3                	mov    ebx,eax
c001c50d:	89 e8                	mov    eax,ebp
c001c50f:	f7 f1                	div    ecx
c001c511:	89 da                	mov    edx,ebx
c001c513:	83 c4 1c             	add    esp,0x1c
c001c516:	5b                   	pop    ebx
c001c517:	5e                   	pop    esi
c001c518:	5f                   	pop    edi
c001c519:	5d                   	pop    ebp
c001c51a:	c3                   	ret    
c001c51b:	90                   	nop
c001c51c:	39 f2                	cmp    edx,esi
c001c51e:	77 1c                	ja     c001c53c <__udivdi3+0x7c>
c001c520:	0f bd da             	bsr    ebx,edx
c001c523:	83 f3 1f             	xor    ebx,0x1f
c001c526:	75 24                	jne    c001c54c <__udivdi3+0x8c>
c001c528:	39 f2                	cmp    edx,esi
c001c52a:	72 08                	jb     c001c534 <__udivdi3+0x74>
c001c52c:	39 ef                	cmp    edi,ebp
c001c52e:	0f 87 84 00 00 00    	ja     c001c5b8 <__udivdi3+0xf8>
c001c534:	b8 01 00 00 00       	mov    eax,0x1
c001c539:	eb ac                	jmp    c001c4e7 <__udivdi3+0x27>
c001c53b:	90                   	nop
c001c53c:	31 db                	xor    ebx,ebx
c001c53e:	31 c0                	xor    eax,eax
c001c540:	89 da                	mov    edx,ebx
c001c542:	83 c4 1c             	add    esp,0x1c
c001c545:	5b                   	pop    ebx
c001c546:	5e                   	pop    esi
c001c547:	5f                   	pop    edi
c001c548:	5d                   	pop    ebp
c001c549:	c3                   	ret    
c001c54a:	66 90                	xchg   ax,ax
c001c54c:	b8 20 00 00 00       	mov    eax,0x20
c001c551:	29 d8                	sub    eax,ebx
c001c553:	88 d9                	mov    cl,bl
c001c555:	d3 e2                	shl    edx,cl
c001c557:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c55b:	89 fa                	mov    edx,edi
c001c55d:	88 c1                	mov    cl,al
c001c55f:	d3 ea                	shr    edx,cl
c001c561:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c565:	09 d1                	or     ecx,edx
c001c567:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c56b:	88 d9                	mov    cl,bl
c001c56d:	d3 e7                	shl    edi,cl
c001c56f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c573:	89 f7                	mov    edi,esi
c001c575:	88 c1                	mov    cl,al
c001c577:	d3 ef                	shr    edi,cl
c001c579:	88 d9                	mov    cl,bl
c001c57b:	d3 e6                	shl    esi,cl
c001c57d:	89 ea                	mov    edx,ebp
c001c57f:	88 c1                	mov    cl,al
c001c581:	d3 ea                	shr    edx,cl
c001c583:	09 d6                	or     esi,edx
c001c585:	89 f0                	mov    eax,esi
c001c587:	89 fa                	mov    edx,edi
c001c589:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c58d:	89 d7                	mov    edi,edx
c001c58f:	89 c6                	mov    esi,eax
c001c591:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c595:	39 d7                	cmp    edi,edx
c001c597:	72 13                	jb     c001c5ac <__udivdi3+0xec>
c001c599:	74 09                	je     c001c5a4 <__udivdi3+0xe4>
c001c59b:	89 f0                	mov    eax,esi
c001c59d:	31 db                	xor    ebx,ebx
c001c59f:	e9 43 ff ff ff       	jmp    c001c4e7 <__udivdi3+0x27>
c001c5a4:	88 d9                	mov    cl,bl
c001c5a6:	d3 e5                	shl    ebp,cl
c001c5a8:	39 c5                	cmp    ebp,eax
c001c5aa:	73 ef                	jae    c001c59b <__udivdi3+0xdb>
c001c5ac:	8d 46 ff             	lea    eax,[esi-0x1]
c001c5af:	31 db                	xor    ebx,ebx
c001c5b1:	e9 31 ff ff ff       	jmp    c001c4e7 <__udivdi3+0x27>
c001c5b6:	66 90                	xchg   ax,ax
c001c5b8:	31 c0                	xor    eax,eax
c001c5ba:	e9 28 ff ff ff       	jmp    c001c4e7 <__udivdi3+0x27>
c001c5bf:	90                   	nop

c001c5c0 <__umoddi3>:
c001c5c0:	55                   	push   ebp
c001c5c1:	57                   	push   edi
c001c5c2:	56                   	push   esi
c001c5c3:	53                   	push   ebx
c001c5c4:	83 ec 1c             	sub    esp,0x1c
c001c5c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c5cb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c5cf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c5d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c5d7:	89 da                	mov    edx,ebx
c001c5d9:	85 c0                	test   eax,eax
c001c5db:	75 37                	jne    c001c614 <__umoddi3+0x54>
c001c5dd:	39 df                	cmp    edi,ebx
c001c5df:	76 13                	jbe    c001c5f4 <__umoddi3+0x34>
c001c5e1:	89 f0                	mov    eax,esi
c001c5e3:	f7 f7                	div    edi
c001c5e5:	89 d0                	mov    eax,edx
c001c5e7:	31 d2                	xor    edx,edx
c001c5e9:	83 c4 1c             	add    esp,0x1c
c001c5ec:	5b                   	pop    ebx
c001c5ed:	5e                   	pop    esi
c001c5ee:	5f                   	pop    edi
c001c5ef:	5d                   	pop    ebp
c001c5f0:	c3                   	ret    
c001c5f1:	8d 76 00             	lea    esi,[esi+0x0]
c001c5f4:	89 fd                	mov    ebp,edi
c001c5f6:	85 ff                	test   edi,edi
c001c5f8:	75 0b                	jne    c001c605 <__umoddi3+0x45>
c001c5fa:	b8 01 00 00 00       	mov    eax,0x1
c001c5ff:	31 d2                	xor    edx,edx
c001c601:	f7 f7                	div    edi
c001c603:	89 c5                	mov    ebp,eax
c001c605:	89 d8                	mov    eax,ebx
c001c607:	31 d2                	xor    edx,edx
c001c609:	f7 f5                	div    ebp
c001c60b:	89 f0                	mov    eax,esi
c001c60d:	f7 f5                	div    ebp
c001c60f:	89 d0                	mov    eax,edx
c001c611:	eb d4                	jmp    c001c5e7 <__umoddi3+0x27>
c001c613:	90                   	nop
c001c614:	89 f1                	mov    ecx,esi
c001c616:	39 d8                	cmp    eax,ebx
c001c618:	76 0a                	jbe    c001c624 <__umoddi3+0x64>
c001c61a:	89 f0                	mov    eax,esi
c001c61c:	83 c4 1c             	add    esp,0x1c
c001c61f:	5b                   	pop    ebx
c001c620:	5e                   	pop    esi
c001c621:	5f                   	pop    edi
c001c622:	5d                   	pop    ebp
c001c623:	c3                   	ret    
c001c624:	0f bd e8             	bsr    ebp,eax
c001c627:	83 f5 1f             	xor    ebp,0x1f
c001c62a:	75 1c                	jne    c001c648 <__umoddi3+0x88>
c001c62c:	39 d8                	cmp    eax,ebx
c001c62e:	72 04                	jb     c001c634 <__umoddi3+0x74>
c001c630:	39 f7                	cmp    edi,esi
c001c632:	77 08                	ja     c001c63c <__umoddi3+0x7c>
c001c634:	89 da                	mov    edx,ebx
c001c636:	29 fe                	sub    esi,edi
c001c638:	19 c2                	sbb    edx,eax
c001c63a:	89 f1                	mov    ecx,esi
c001c63c:	89 c8                	mov    eax,ecx
c001c63e:	83 c4 1c             	add    esp,0x1c
c001c641:	5b                   	pop    ebx
c001c642:	5e                   	pop    esi
c001c643:	5f                   	pop    edi
c001c644:	5d                   	pop    ebp
c001c645:	c3                   	ret    
c001c646:	66 90                	xchg   ax,ax
c001c648:	ba 20 00 00 00       	mov    edx,0x20
c001c64d:	29 ea                	sub    edx,ebp
c001c64f:	89 e9                	mov    ecx,ebp
c001c651:	d3 e0                	shl    eax,cl
c001c653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c657:	89 f8                	mov    eax,edi
c001c659:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c65d:	88 d1                	mov    cl,dl
c001c65f:	d3 e8                	shr    eax,cl
c001c661:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c665:	09 c1                	or     ecx,eax
c001c667:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c66b:	89 e9                	mov    ecx,ebp
c001c66d:	d3 e7                	shl    edi,cl
c001c66f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c673:	89 d8                	mov    eax,ebx
c001c675:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c679:	88 d1                	mov    cl,dl
c001c67b:	d3 e8                	shr    eax,cl
c001c67d:	89 c7                	mov    edi,eax
c001c67f:	89 e9                	mov    ecx,ebp
c001c681:	d3 e3                	shl    ebx,cl
c001c683:	89 f0                	mov    eax,esi
c001c685:	88 d1                	mov    cl,dl
c001c687:	d3 e8                	shr    eax,cl
c001c689:	09 d8                	or     eax,ebx
c001c68b:	89 e9                	mov    ecx,ebp
c001c68d:	d3 e6                	shl    esi,cl
c001c68f:	89 f3                	mov    ebx,esi
c001c691:	89 fa                	mov    edx,edi
c001c693:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c697:	89 d1                	mov    ecx,edx
c001c699:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c69d:	89 c6                	mov    esi,eax
c001c69f:	89 d7                	mov    edi,edx
c001c6a1:	39 d1                	cmp    ecx,edx
c001c6a3:	72 27                	jb     c001c6cc <__umoddi3+0x10c>
c001c6a5:	74 21                	je     c001c6c8 <__umoddi3+0x108>
c001c6a7:	89 ca                	mov    edx,ecx
c001c6a9:	29 f3                	sub    ebx,esi
c001c6ab:	19 fa                	sbb    edx,edi
c001c6ad:	89 d0                	mov    eax,edx
c001c6af:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c6b3:	d3 e0                	shl    eax,cl
c001c6b5:	89 e9                	mov    ecx,ebp
c001c6b7:	d3 eb                	shr    ebx,cl
c001c6b9:	09 d8                	or     eax,ebx
c001c6bb:	d3 ea                	shr    edx,cl
c001c6bd:	83 c4 1c             	add    esp,0x1c
c001c6c0:	5b                   	pop    ebx
c001c6c1:	5e                   	pop    esi
c001c6c2:	5f                   	pop    edi
c001c6c3:	5d                   	pop    ebp
c001c6c4:	c3                   	ret    
c001c6c5:	8d 76 00             	lea    esi,[esi+0x0]
c001c6c8:	39 c3                	cmp    ebx,eax
c001c6ca:	73 db                	jae    c001c6a7 <__umoddi3+0xe7>
c001c6cc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c6d0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c6d4:	89 d7                	mov    edi,edx
c001c6d6:	89 c6                	mov    esi,eax
c001c6d8:	eb cd                	jmp    c001c6a7 <__umoddi3+0xe7>

Disassembly of section .init:

c001c6da <_init>:
c001c6da:	55                   	push   ebp
c001c6db:	89 e5                	mov    ebp,esp
c001c6dd:	e8 36 3a fe ff       	call   c0000118 <frame_dummy>
c001c6e2:	e8 e5 fa ff ff       	call   c001c1cc <__do_global_ctors_aux>
c001c6e7:	5d                   	pop    ebp
c001c6e8:	c3                   	ret    

Disassembly of section .fini:

c001c6e9 <_fini>:
c001c6e9:	55                   	push   ebp
c001c6ea:	89 e5                	mov    ebp,esp
c001c6ec:	e8 b7 39 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001c6f1:	5d                   	pop    ebp
c001c6f2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c6f4 <Computer::~Computer()>:
c001c6f4:	83 ec 0c             	sub    esp,0xc
c001c6f7:	ba f0 d9 01 c0       	mov    edx,0xc001d9f0
c001c6fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c700:	89 10                	mov    DWORD PTR [eax],edx
c001c702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c706:	83 ec 0c             	sub    esp,0xc
c001c709:	50                   	push   eax
c001c70a:	e8 e9 e2 fe ff       	call   c000a9f8 <Device::~Device()>
c001c70f:	83 c4 10             	add    esp,0x10
c001c712:	90                   	nop
c001c713:	83 c4 0c             	add    esp,0xc
c001c716:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c718 <Computer::~Computer()>:
c001c718:	83 ec 0c             	sub    esp,0xc
c001c71b:	83 ec 0c             	sub    esp,0xc
c001c71e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c722:	e8 cd ff ff ff       	call   c001c6f4 <Computer::~Computer()>
c001c727:	83 c4 10             	add    esp,0x10
c001c72a:	83 ec 08             	sub    esp,0x8
c001c72d:	68 ec 01 00 00       	push   0x1ec
c001c732:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c736:	e8 b7 ce fe ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c001c73b:	83 c4 10             	add    esp,0x10
c001c73e:	83 c4 0c             	add    esp,0xc
c001c741:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c742 <idleCommon()>:
c001c742:	83 ec 0c             	sub    esp,0xc
c001c745:	fa                   	cli    
c001c746:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c001c74c:	e8 db 60 ff ff       	call   c001282c <schedule()>
c001c751:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c001c756:	48                   	dec    eax
c001c757:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c001c75c:	75 01                	jne    c001c75f <idleCommon()+0x1d>
c001c75e:	fb                   	sti    
c001c75f:	83 c4 0c             	add    esp,0xc
c001c762:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c764 <LinkedList<UnixFile>::~LinkedList()>:
c001c764:	90                   	nop
c001c765:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c766 <LinkedList<UnixFile>::LinkedList()>:
c001c766:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c76a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c774:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c77b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c77f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c786:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c78a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c790:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c794:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c79b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c79f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c7a6:	90                   	nop
c001c7a7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c7a8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c7a8:	83 ec 0c             	sub    esp,0xc
c001c7ab:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c7b0:	75 10                	jne    c001c7c2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c7b2:	83 ec 0c             	sub    esp,0xc
c001c7b5:	68 44 dc 01 c0       	push   0xc001dc44
c001c7ba:	e8 ea 2b ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001c7bf:	83 c4 10             	add    esp,0x10
c001c7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7c6:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7c8:	85 c0                	test   eax,eax
c001c7ca:	74 34                	je     c001c800 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c7cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7d3:	85 c0                	test   eax,eax
c001c7d5:	74 29                	je     c001c800 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c7d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c7e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c7e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c7ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c7fe:	eb 65                	jmp    c001c865 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c804:	8b 00                	mov    eax,DWORD PTR [eax]
c001c806:	85 c0                	test   eax,eax
c001c808:	75 4b                	jne    c001c855 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c80e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c811:	85 c0                	test   eax,eax
c001c813:	75 40                	jne    c001c855 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c819:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c81d:	89 10                	mov    DWORD PTR [eax],edx
c001c81f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c823:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c827:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c82a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c82e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c831:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c83c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c83f:	85 c0                	test   eax,eax
c001c841:	74 22                	je     c001c865 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c843:	83 ec 0c             	sub    esp,0xc
c001c846:	68 66 dc 01 c0       	push   0xc001dc66
c001c84b:	e8 59 2b ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001c850:	83 c4 10             	add    esp,0x10
c001c853:	eb 10                	jmp    c001c865 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c855:	83 ec 0c             	sub    esp,0xc
c001c858:	68 70 dc 01 c0       	push   0xc001dc70
c001c85d:	e8 47 2b ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001c862:	83 c4 10             	add    esp,0x10
c001c865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c869:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c86c:	8d 50 01             	lea    edx,[eax+0x1]
c001c86f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c873:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c876:	90                   	nop
c001c877:	83 c4 0c             	add    esp,0xc
c001c87a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c87c <LinkedList<UnixFile>::getFirstElement()>:
c001c87c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c880:	8b 00                	mov    eax,DWORD PTR [eax]
c001c882:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c884 <LinkedList<UnixFile>::removeFirst()>:
c001c884:	83 ec 0c             	sub    esp,0xc
c001c887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c88b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c88d:	85 c0                	test   eax,eax
c001c88f:	75 12                	jne    c001c8a3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c891:	83 ec 0c             	sub    esp,0xc
c001c894:	68 7c dc 01 c0       	push   0xc001dc7c
c001c899:	e8 0b 2b ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001c89e:	83 c4 10             	add    esp,0x10
c001c8a1:	eb 7e                	jmp    c001c921 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c8ad:	85 c0                	test   eax,eax
c001c8af:	74 10                	je     c001c8c1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c8b1:	83 ec 0c             	sub    esp,0xc
c001c8b4:	68 c7 dc 01 c0       	push   0xc001dcc7
c001c8b9:	e8 eb 2a ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001c8be:	83 c4 10             	add    esp,0x10
c001c8c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8c5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c8ca:	85 c0                	test   eax,eax
c001c8cc:	75 33                	jne    c001c901 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c8ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c8ea:	83 f8 01             	cmp    eax,0x1
c001c8ed:	74 21                	je     c001c910 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c8ef:	83 ec 0c             	sub    esp,0xc
c001c8f2:	68 a0 dc 01 c0       	push   0xc001dca0
c001c8f7:	e8 ad 2a ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001c8fc:	83 c4 10             	add    esp,0x10
c001c8ff:	eb 0f                	jmp    c001c910 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c905:	8b 00                	mov    eax,DWORD PTR [eax]
c001c907:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c90a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c90e:	89 10                	mov    DWORD PTR [eax],edx
c001c910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c914:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c917:	8d 50 ff             	lea    edx,[eax-0x1]
c001c91a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c91e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c921:	83 c4 0c             	add    esp,0xc
c001c924:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c926 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c926:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c92a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c92d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c92e <DriverlessDevice::~DriverlessDevice()>:
c001c92e:	ba 1c e3 01 c0       	mov    edx,0xc001e31c
c001c933:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c937:	89 10                	mov    DWORD PTR [eax],edx
c001c939:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c93d:	50                   	push   eax
c001c93e:	e8 b5 e0 fe ff       	call   c000a9f8 <Device::~Device()>
c001c943:	83 c4 04             	add    esp,0x4
c001c946:	90                   	nop
c001c947:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c948 <DriverlessDevice::~DriverlessDevice()>:
c001c948:	83 ec 0c             	sub    esp,0xc
c001c94b:	83 ec 0c             	sub    esp,0xc
c001c94e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c952:	e8 d7 ff ff ff       	call   c001c92e <DriverlessDevice::~DriverlessDevice()>
c001c957:	83 c4 10             	add    esp,0x10
c001c95a:	83 ec 08             	sub    esp,0x8
c001c95d:	68 58 01 00 00       	push   0x158
c001c962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c966:	e8 87 cc fe ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c001c96b:	83 c4 10             	add    esp,0x10
c001c96e:	83 c4 0c             	add    esp,0xc
c001c971:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c972 <LinkedList<Device>::addElement(Device*)>:
c001c972:	83 ec 0c             	sub    esp,0xc
c001c975:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c97a:	75 10                	jne    c001c98c <LinkedList<Device>::addElement(Device*)+0x1a>
c001c97c:	83 ec 0c             	sub    esp,0xc
c001c97f:	68 44 dc 01 c0       	push   0xc001dc44
c001c984:	e8 20 2a ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001c989:	83 c4 10             	add    esp,0x10
c001c98c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c990:	8b 00                	mov    eax,DWORD PTR [eax]
c001c992:	85 c0                	test   eax,eax
c001c994:	74 3a                	je     c001c9d0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c99a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c99d:	85 c0                	test   eax,eax
c001c99f:	74 2f                	je     c001c9d0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c9a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c9a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c9ac:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c9b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c9ba:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c9bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c9c4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c9ce:	eb 68                	jmp    c001ca38 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c9d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9d6:	85 c0                	test   eax,eax
c001c9d8:	75 4e                	jne    c001ca28 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c9da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c9e1:	85 c0                	test   eax,eax
c001c9e3:	75 43                	jne    c001ca28 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c9e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c9ed:	89 10                	mov    DWORD PTR [eax],edx
c001c9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9f3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c9f7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ca01:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ca0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca0f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ca12:	85 c0                	test   eax,eax
c001ca14:	74 22                	je     c001ca38 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ca16:	83 ec 0c             	sub    esp,0xc
c001ca19:	68 66 dc 01 c0       	push   0xc001dc66
c001ca1e:	e8 86 29 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001ca23:	83 c4 10             	add    esp,0x10
c001ca26:	eb 10                	jmp    c001ca38 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ca28:	83 ec 0c             	sub    esp,0xc
c001ca2b:	68 70 dc 01 c0       	push   0xc001dc70
c001ca30:	e8 74 29 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001ca35:	83 c4 10             	add    esp,0x10
c001ca38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ca3f:	8d 50 01             	lea    edx,[eax+0x1]
c001ca42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca46:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ca49:	90                   	nop
c001ca4a:	83 c4 0c             	add    esp,0xc
c001ca4d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ca4e <LinkedList<Device>::LinkedList()>:
c001ca4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca5c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca67:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ca6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca87:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ca8e:	90                   	nop
c001ca8f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001ca90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001ca90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca94:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca96:	85 c0                	test   eax,eax
c001ca98:	75 0e                	jne    c001caa8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ca9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001caa1:	85 c0                	test   eax,eax
c001caa3:	75 03                	jne    c001caa8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001caa5:	b0 01                	mov    al,0x1
c001caa7:	c3                   	ret    
c001caa8:	b0 00                	mov    al,0x0
c001caaa:	90                   	nop
c001caab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001caac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001caac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cab0:	8b 00                	mov    eax,DWORD PTR [eax]
c001cab2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001cab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001cab4:	83 ec 0c             	sub    esp,0xc
c001cab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cabb:	8b 00                	mov    eax,DWORD PTR [eax]
c001cabd:	85 c0                	test   eax,eax
c001cabf:	75 17                	jne    c001cad8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001cac1:	83 ec 0c             	sub    esp,0xc
c001cac4:	68 7c dc 01 c0       	push   0xc001dc7c
c001cac9:	e8 db 28 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001cace:	83 c4 10             	add    esp,0x10
c001cad1:	e9 92 00 00 00       	jmp    c001cb68 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001cad6:	66 90                	xchg   ax,ax
c001cad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cadc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cadf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cae2:	85 c0                	test   eax,eax
c001cae4:	0f 95 c0             	setne  al
c001cae7:	84 c0                	test   al,al
c001cae9:	74 11                	je     c001cafc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001caeb:	83 ec 0c             	sub    esp,0xc
c001caee:	68 c7 dc 01 c0       	push   0xc001dcc7
c001caf3:	e8 b1 28 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001caf8:	83 c4 10             	add    esp,0x10
c001cafb:	90                   	nop
c001cafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb00:	8b 00                	mov    eax,DWORD PTR [eax]
c001cb02:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cb05:	85 c0                	test   eax,eax
c001cb07:	0f 94 c0             	sete   al
c001cb0a:	84 c0                	test   al,al
c001cb0c:	74 36                	je     c001cb44 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001cb0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb27:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cb2a:	83 f8 01             	cmp    eax,0x1
c001cb2d:	74 25                	je     c001cb54 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001cb2f:	83 ec 0c             	sub    esp,0xc
c001cb32:	68 a0 dc 01 c0       	push   0xc001dca0
c001cb37:	e8 6d 28 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001cb3c:	83 c4 10             	add    esp,0x10
c001cb3f:	eb 13                	jmp    c001cb54 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001cb41:	8d 76 00             	lea    esi,[esi+0x0]
c001cb44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb48:	8b 00                	mov    eax,DWORD PTR [eax]
c001cb4a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001cb4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb51:	89 10                	mov    DWORD PTR [eax],edx
c001cb53:	90                   	nop
c001cb54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb58:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cb5b:	8d 50 ff             	lea    edx,[eax-0x1]
c001cb5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb62:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cb65:	8d 76 00             	lea    esi,[esi+0x0]
c001cb68:	83 c4 0c             	add    esp,0xc
c001cb6b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001cb6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001cb6c:	83 ec 0c             	sub    esp,0xc
c001cb6f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001cb74:	75 12                	jne    c001cb88 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001cb76:	83 ec 0c             	sub    esp,0xc
c001cb79:	68 44 dc 01 c0       	push   0xc001dc44
c001cb7e:	e8 26 28 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001cb83:	83 c4 10             	add    esp,0x10
c001cb86:	66 90                	xchg   ax,ax
c001cb88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb8c:	8b 00                	mov    eax,DWORD PTR [eax]
c001cb8e:	85 c0                	test   eax,eax
c001cb90:	74 36                	je     c001cbc8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001cb92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cb99:	85 c0                	test   eax,eax
c001cb9b:	74 2b                	je     c001cbc8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001cb9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cba1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cba4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cba8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001cbab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cbb3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cbb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cbbd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cbc4:	eb 6a                	jmp    c001cc30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001cbc6:	66 90                	xchg   ax,ax
c001cbc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbcc:	8b 00                	mov    eax,DWORD PTR [eax]
c001cbce:	85 c0                	test   eax,eax
c001cbd0:	75 4e                	jne    c001cc20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001cbd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cbd9:	85 c0                	test   eax,eax
c001cbdb:	75 43                	jne    c001cc20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001cbdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbe1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cbe5:	89 10                	mov    DWORD PTR [eax],edx
c001cbe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbeb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cbef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cbf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbf6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cbf9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cc00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cc07:	85 c0                	test   eax,eax
c001cc09:	74 25                	je     c001cc30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001cc0b:	83 ec 0c             	sub    esp,0xc
c001cc0e:	68 66 dc 01 c0       	push   0xc001dc66
c001cc13:	e8 91 27 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001cc18:	83 c4 10             	add    esp,0x10
c001cc1b:	eb 13                	jmp    c001cc30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001cc1d:	8d 76 00             	lea    esi,[esi+0x0]
c001cc20:	83 ec 0c             	sub    esp,0xc
c001cc23:	68 70 dc 01 c0       	push   0xc001dc70
c001cc28:	e8 7c 27 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001cc2d:	83 c4 10             	add    esp,0x10
c001cc30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cc37:	8d 50 01             	lea    edx,[eax+0x1]
c001cc3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc3e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cc41:	90                   	nop
c001cc42:	83 c4 0c             	add    esp,0xc
c001cc45:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001cc48 <ACPI::~ACPI()>:
c001cc48:	83 ec 0c             	sub    esp,0xc
c001cc4b:	ba 84 e8 01 c0       	mov    edx,0xc001e884
c001cc50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc54:	89 10                	mov    DWORD PTR [eax],edx
c001cc56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc5a:	83 ec 0c             	sub    esp,0xc
c001cc5d:	50                   	push   eax
c001cc5e:	e8 95 dd fe ff       	call   c000a9f8 <Device::~Device()>
c001cc63:	83 c4 10             	add    esp,0x10
c001cc66:	90                   	nop
c001cc67:	83 c4 0c             	add    esp,0xc
c001cc6a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001cc6c <ACPI::~ACPI()>:
c001cc6c:	83 ec 0c             	sub    esp,0xc
c001cc6f:	83 ec 0c             	sub    esp,0xc
c001cc72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc76:	e8 cd ff ff ff       	call   c001cc48 <ACPI::~ACPI()>
c001cc7b:	83 c4 10             	add    esp,0x10
c001cc7e:	83 ec 08             	sub    esp,0x8
c001cc81:	68 64 12 00 00       	push   0x1264
c001cc86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc8a:	e8 63 c9 fe ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c001cc8f:	83 c4 10             	add    esp,0x10
c001cc92:	83 c4 0c             	add    esp,0xc
c001cc95:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001cc98 <LinkedList<Device>::~LinkedList()>:
c001cc98:	90                   	nop
c001cc99:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001cc9c <LinkedList<Device>::isEmpty()>:
c001cc9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cca0:	8b 00                	mov    eax,DWORD PTR [eax]
c001cca2:	85 c0                	test   eax,eax
c001cca4:	75 0e                	jne    c001ccb4 <LinkedList<Device>::isEmpty()+0x18>
c001cca6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ccaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ccad:	85 c0                	test   eax,eax
c001ccaf:	75 03                	jne    c001ccb4 <LinkedList<Device>::isEmpty()+0x18>
c001ccb1:	b0 01                	mov    al,0x1
c001ccb3:	c3                   	ret    
c001ccb4:	b0 00                	mov    al,0x0
c001ccb6:	90                   	nop
c001ccb7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ccb8 <LinkedList<Device>::getFirstElement()>:
c001ccb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ccbc:	8b 00                	mov    eax,DWORD PTR [eax]
c001ccbe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ccc0 <LinkedList<Device>::removeFirst()>:
c001ccc0:	83 ec 0c             	sub    esp,0xc
c001ccc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccc7:	8b 00                	mov    eax,DWORD PTR [eax]
c001ccc9:	85 c0                	test   eax,eax
c001cccb:	75 17                	jne    c001cce4 <LinkedList<Device>::removeFirst()+0x24>
c001cccd:	83 ec 0c             	sub    esp,0xc
c001ccd0:	68 7c dc 01 c0       	push   0xc001dc7c
c001ccd5:	e8 cf 26 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001ccda:	83 c4 10             	add    esp,0x10
c001ccdd:	e9 92 00 00 00       	jmp    c001cd74 <LinkedList<Device>::removeFirst()+0xb4>
c001cce2:	66 90                	xchg   ax,ax
c001cce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cce8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cceb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ccf1:	85 c0                	test   eax,eax
c001ccf3:	74 13                	je     c001cd08 <LinkedList<Device>::removeFirst()+0x48>
c001ccf5:	83 ec 0c             	sub    esp,0xc
c001ccf8:	68 c7 dc 01 c0       	push   0xc001dcc7
c001ccfd:	e8 a7 26 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001cd02:	83 c4 10             	add    esp,0x10
c001cd05:	8d 76 00             	lea    esi,[esi+0x0]
c001cd08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd0c:	8b 00                	mov    eax,DWORD PTR [eax]
c001cd0e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001cd14:	85 c0                	test   eax,eax
c001cd16:	75 34                	jne    c001cd4c <LinkedList<Device>::removeFirst()+0x8c>
c001cd18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd1c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cd22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cd2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd31:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cd34:	83 f8 01             	cmp    eax,0x1
c001cd37:	74 27                	je     c001cd60 <LinkedList<Device>::removeFirst()+0xa0>
c001cd39:	83 ec 0c             	sub    esp,0xc
c001cd3c:	68 a0 dc 01 c0       	push   0xc001dca0
c001cd41:	e8 63 26 ff ff       	call   c000f3a9 <Krnl::panic(char const*)>
c001cd46:	83 c4 10             	add    esp,0x10
c001cd49:	eb 15                	jmp    c001cd60 <LinkedList<Device>::removeFirst()+0xa0>
c001cd4b:	90                   	nop
c001cd4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd50:	8b 00                	mov    eax,DWORD PTR [eax]
c001cd52:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001cd58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd5c:	89 10                	mov    DWORD PTR [eax],edx
c001cd5e:	66 90                	xchg   ax,ax
c001cd60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cd67:	8d 50 ff             	lea    edx,[eax-0x1]
c001cd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd6e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cd71:	8d 76 00             	lea    esi,[esi+0x0]
c001cd74:	83 c4 0c             	add    esp,0xc
c001cd77:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001cd78 <CPU::~CPU()>:
c001cd78:	83 ec 0c             	sub    esp,0xc
c001cd7b:	ba 20 ea 01 c0       	mov    edx,0xc001ea20
c001cd80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd84:	89 10                	mov    DWORD PTR [eax],edx
c001cd86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd8a:	83 ec 0c             	sub    esp,0xc
c001cd8d:	50                   	push   eax
c001cd8e:	e8 65 dc fe ff       	call   c000a9f8 <Device::~Device()>
c001cd93:	83 c4 10             	add    esp,0x10
c001cd96:	90                   	nop
c001cd97:	83 c4 0c             	add    esp,0xc
c001cd9a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001cd9c <CPU::~CPU()>:
c001cd9c:	83 ec 0c             	sub    esp,0xc
c001cd9f:	83 ec 0c             	sub    esp,0xc
c001cda2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cda6:	e8 cd ff ff ff       	call   c001cd78 <CPU::~CPU()>
c001cdab:	83 c4 10             	add    esp,0x10
c001cdae:	83 ec 08             	sub    esp,0x8
c001cdb1:	68 94 11 00 00       	push   0x1194
c001cdb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdba:	e8 33 c8 fe ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c001cdbf:	83 c4 10             	add    esp,0x10
c001cdc2:	83 c4 0c             	add    esp,0xc
c001cdc5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001cdc8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001cdc8:	90                   	nop
c001cdc9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001cdcc <ThreadControlBlock::ThreadControlBlock()>:
c001cdcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cdd0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cdd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cddb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001cde2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cde6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001cded:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cdf1:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001cdf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cdfc:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001ce03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce07:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001ce0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce0f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001ce13:	90                   	nop
c001ce14:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ce18 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ce18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce1c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ce22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ce2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce31:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ce38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce3c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ce42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce46:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ce4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce51:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ce58:	90                   	nop
c001ce59:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ce5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ce5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ce60:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ce63:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c001ce64 <Vm::_FPUState::_FPUState()>:
c001ce64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce68:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c001ce6f:	90                   	nop
c001ce70:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001ce72 <PCI::~PCI()>:
c001ce72:	83 ec 0c             	sub    esp,0xc
c001ce75:	ba 7c f6 01 c0       	mov    edx,0xc001f67c
c001ce7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce7e:	89 10                	mov    DWORD PTR [eax],edx
c001ce80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce84:	83 ec 0c             	sub    esp,0xc
c001ce87:	50                   	push   eax
c001ce88:	e8 fb d5 fe ff       	call   c000a488 <Bus::~Bus()>
c001ce8d:	83 c4 10             	add    esp,0x10
c001ce90:	90                   	nop
c001ce91:	83 c4 0c             	add    esp,0xc
c001ce94:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ce96 <PCI::~PCI()>:
c001ce96:	83 ec 0c             	sub    esp,0xc
c001ce99:	83 ec 0c             	sub    esp,0xc
c001ce9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cea0:	e8 cd ff ff ff       	call   c001ce72 <PCI::~PCI()>
c001cea5:	83 c4 10             	add    esp,0x10
c001cea8:	83 ec 08             	sub    esp,0x8
c001ceab:	68 5c 01 00 00       	push   0x15c
c001ceb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ceb4:	e8 39 c7 fe ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c001ceb9:	83 c4 10             	add    esp,0x10
c001cebc:	83 c4 0c             	add    esp,0xc
c001cebf:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001cec0 <IDE::~IDE()>:
c001cec0:	83 ec 0c             	sub    esp,0xc
c001cec3:	ba 30 f7 01 c0       	mov    edx,0xc001f730
c001cec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cecc:	89 10                	mov    DWORD PTR [eax],edx
c001cece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ced2:	83 ec 0c             	sub    esp,0xc
c001ced5:	50                   	push   eax
c001ced6:	e8 95 df fe ff       	call   c000ae70 <HardDiskController::~HardDiskController()>
c001cedb:	83 c4 10             	add    esp,0x10
c001cede:	90                   	nop
c001cedf:	83 c4 0c             	add    esp,0xc
c001cee2:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cee4 <IDE::~IDE()>:
c001cee4:	83 ec 0c             	sub    esp,0xc
c001cee7:	83 ec 0c             	sub    esp,0xc
c001ceea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ceee:	e8 cd ff ff ff       	call   c001cec0 <IDE::~IDE()>
c001cef3:	83 c4 10             	add    esp,0x10
c001cef6:	83 ec 08             	sub    esp,0x8
c001cef9:	68 70 02 00 00       	push   0x270
c001cefe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf02:	e8 eb c6 fe ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c001cf07:	83 c4 10             	add    esp,0x10
c001cf0a:	83 c4 0c             	add    esp,0xc
c001cf0d:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cf0e <SATABus::~SATABus()>:
c001cf0e:	83 ec 0c             	sub    esp,0xc
c001cf11:	ba 80 f7 01 c0       	mov    edx,0xc001f780
c001cf16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf1a:	89 10                	mov    DWORD PTR [eax],edx
c001cf1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf20:	83 ec 0c             	sub    esp,0xc
c001cf23:	50                   	push   eax
c001cf24:	e8 47 df fe ff       	call   c000ae70 <HardDiskController::~HardDiskController()>
c001cf29:	83 c4 10             	add    esp,0x10
c001cf2c:	90                   	nop
c001cf2d:	83 c4 0c             	add    esp,0xc
c001cf30:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cf32 <SATABus::~SATABus()>:
c001cf32:	83 ec 0c             	sub    esp,0xc
c001cf35:	83 ec 0c             	sub    esp,0xc
c001cf38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf3c:	e8 cd ff ff ff       	call   c001cf0e <SATABus::~SATABus()>
c001cf41:	83 c4 10             	add    esp,0x10
c001cf44:	83 ec 08             	sub    esp,0x8
c001cf47:	68 64 01 00 00       	push   0x164
c001cf4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf50:	e8 9d c6 fe ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c001cf55:	83 c4 10             	add    esp,0x10
c001cf58:	83 c4 0c             	add    esp,0xc
c001cf5b:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001cf5c <ATA::~ATA()>:
c001cf5c:	83 ec 0c             	sub    esp,0xc
c001cf5f:	ba c0 f7 01 c0       	mov    edx,0xc001f7c0
c001cf64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf68:	89 10                	mov    DWORD PTR [eax],edx
c001cf6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf6e:	83 ec 0c             	sub    esp,0xc
c001cf71:	50                   	push   eax
c001cf72:	e8 db df fe ff       	call   c000af52 <PhysicalDisk::~PhysicalDisk()>
c001cf77:	83 c4 10             	add    esp,0x10
c001cf7a:	90                   	nop
c001cf7b:	83 c4 0c             	add    esp,0xc
c001cf7e:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001cf80 <ATA::~ATA()>:
c001cf80:	83 ec 0c             	sub    esp,0xc
c001cf83:	83 ec 0c             	sub    esp,0xc
c001cf86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf8a:	e8 cd ff ff ff       	call   c001cf5c <ATA::~ATA()>
c001cf8f:	83 c4 10             	add    esp,0x10
c001cf92:	83 ec 08             	sub    esp,0x8
c001cf95:	68 7c 01 00 00       	push   0x17c
c001cf9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf9e:	e8 4f c6 fe ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c001cfa3:	83 c4 10             	add    esp,0x10
c001cfa6:	83 c4 0c             	add    esp,0xc
c001cfa9:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001cfaa <ATAPI::~ATAPI()>:
c001cfaa:	83 ec 0c             	sub    esp,0xc
c001cfad:	ba 08 f8 01 c0       	mov    edx,0xc001f808
c001cfb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfb6:	89 10                	mov    DWORD PTR [eax],edx
c001cfb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfbc:	83 ec 0c             	sub    esp,0xc
c001cfbf:	50                   	push   eax
c001cfc0:	e8 8d df fe ff       	call   c000af52 <PhysicalDisk::~PhysicalDisk()>
c001cfc5:	83 c4 10             	add    esp,0x10
c001cfc8:	90                   	nop
c001cfc9:	83 c4 0c             	add    esp,0xc
c001cfcc:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001cfce <ATAPI::~ATAPI()>:
c001cfce:	83 ec 0c             	sub    esp,0xc
c001cfd1:	83 ec 0c             	sub    esp,0xc
c001cfd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfd8:	e8 cd ff ff ff       	call   c001cfaa <ATAPI::~ATAPI()>
c001cfdd:	83 c4 10             	add    esp,0x10
c001cfe0:	83 ec 08             	sub    esp,0x8
c001cfe3:	68 84 01 00 00       	push   0x184
c001cfe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfec:	e8 01 c6 fe ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c001cff1:	83 c4 10             	add    esp,0x10
c001cff4:	83 c4 0c             	add    esp,0xc
c001cff7:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001cff8 <SATA::~SATA()>:
c001cff8:	83 ec 0c             	sub    esp,0xc
c001cffb:	ba bc f8 01 c0       	mov    edx,0xc001f8bc
c001d000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d004:	89 10                	mov    DWORD PTR [eax],edx
c001d006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d00a:	83 ec 0c             	sub    esp,0xc
c001d00d:	50                   	push   eax
c001d00e:	e8 3f df fe ff       	call   c000af52 <PhysicalDisk::~PhysicalDisk()>
c001d013:	83 c4 10             	add    esp,0x10
c001d016:	90                   	nop
c001d017:	83 c4 0c             	add    esp,0xc
c001d01a:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001d01c <SATA::~SATA()>:
c001d01c:	83 ec 0c             	sub    esp,0xc
c001d01f:	83 ec 0c             	sub    esp,0xc
c001d022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d026:	e8 cd ff ff ff       	call   c001cff8 <SATA::~SATA()>
c001d02b:	83 c4 10             	add    esp,0x10
c001d02e:	83 ec 08             	sub    esp,0x8
c001d031:	68 7c 01 00 00       	push   0x17c
c001d036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d03a:	e8 b3 c5 fe ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c001d03f:	83 c4 10             	add    esp,0x10
c001d042:	83 c4 0c             	add    esp,0xc
c001d045:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001d046 <SATAPI::~SATAPI()>:
c001d046:	83 ec 0c             	sub    esp,0xc
c001d049:	ba 28 fa 01 c0       	mov    edx,0xc001fa28
c001d04e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d052:	89 10                	mov    DWORD PTR [eax],edx
c001d054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d058:	83 ec 0c             	sub    esp,0xc
c001d05b:	50                   	push   eax
c001d05c:	e8 f1 de fe ff       	call   c000af52 <PhysicalDisk::~PhysicalDisk()>
c001d061:	83 c4 10             	add    esp,0x10
c001d064:	90                   	nop
c001d065:	83 c4 0c             	add    esp,0xc
c001d068:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001d06a <SATAPI::~SATAPI()>:
c001d06a:	83 ec 0c             	sub    esp,0xc
c001d06d:	83 ec 0c             	sub    esp,0xc
c001d070:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d074:	e8 cd ff ff ff       	call   c001d046 <SATAPI::~SATAPI()>
c001d079:	83 c4 10             	add    esp,0x10
c001d07c:	83 ec 08             	sub    esp,0x8
c001d07f:	68 84 01 00 00       	push   0x184
c001d084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d088:	e8 65 c5 fe ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c001d08d:	83 c4 10             	add    esp,0x10
c001d090:	83 c4 0c             	add    esp,0xc
c001d093:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001d094 <IOAPIC::~IOAPIC()>:
c001d094:	83 ec 0c             	sub    esp,0xc
c001d097:	ba 68 fa 01 c0       	mov    edx,0xc001fa68
c001d09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0a0:	89 10                	mov    DWORD PTR [eax],edx
c001d0a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0a6:	83 ec 0c             	sub    esp,0xc
c001d0a9:	50                   	push   eax
c001d0aa:	e8 49 d9 fe ff       	call   c000a9f8 <Device::~Device()>
c001d0af:	83 c4 10             	add    esp,0x10
c001d0b2:	90                   	nop
c001d0b3:	83 c4 0c             	add    esp,0xc
c001d0b6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001d0b8 <IOAPIC::~IOAPIC()>:
c001d0b8:	83 ec 0c             	sub    esp,0xc
c001d0bb:	83 ec 0c             	sub    esp,0xc
c001d0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0c2:	e8 cd ff ff ff       	call   c001d094 <IOAPIC::~IOAPIC()>
c001d0c7:	83 c4 10             	add    esp,0x10
c001d0ca:	83 ec 08             	sub    esp,0x8
c001d0cd:	68 68 01 00 00       	push   0x168
c001d0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0d6:	e8 17 c5 fe ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c001d0db:	83 c4 10             	add    esp,0x10
c001d0de:	83 c4 0c             	add    esp,0xc
c001d0e1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001d0e4 <APICTimer::~APICTimer()>:
c001d0e4:	83 ec 0c             	sub    esp,0xc
c001d0e7:	ba b0 fa 01 c0       	mov    edx,0xc001fab0
c001d0ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0f0:	89 10                	mov    DWORD PTR [eax],edx
c001d0f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0f6:	83 ec 0c             	sub    esp,0xc
c001d0f9:	50                   	push   eax
c001d0fa:	e8 d1 f1 fe ff       	call   c000c2d0 <Timer::~Timer()>
c001d0ff:	83 c4 10             	add    esp,0x10
c001d102:	90                   	nop
c001d103:	83 c4 0c             	add    esp,0xc
c001d106:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001d108 <APICTimer::~APICTimer()>:
c001d108:	83 ec 0c             	sub    esp,0xc
c001d10b:	83 ec 0c             	sub    esp,0xc
c001d10e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d112:	e8 cd ff ff ff       	call   c001d0e4 <APICTimer::~APICTimer()>
c001d117:	83 c4 10             	add    esp,0x10
c001d11a:	83 ec 08             	sub    esp,0x8
c001d11d:	68 60 01 00 00       	push   0x160
c001d122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d126:	e8 c7 c4 fe ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c001d12b:	83 c4 10             	add    esp,0x10
c001d12e:	83 c4 0c             	add    esp,0xc
c001d131:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001d134 <PIT::~PIT()>:
c001d134:	83 ec 0c             	sub    esp,0xc
c001d137:	ba 00 fb 01 c0       	mov    edx,0xc001fb00
c001d13c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d140:	89 10                	mov    DWORD PTR [eax],edx
c001d142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d146:	83 ec 0c             	sub    esp,0xc
c001d149:	50                   	push   eax
c001d14a:	e8 81 f1 fe ff       	call   c000c2d0 <Timer::~Timer()>
c001d14f:	83 c4 10             	add    esp,0x10
c001d152:	90                   	nop
c001d153:	83 c4 0c             	add    esp,0xc
c001d156:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001d158 <PIT::~PIT()>:
c001d158:	83 ec 0c             	sub    esp,0xc
c001d15b:	83 ec 0c             	sub    esp,0xc
c001d15e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d162:	e8 cd ff ff ff       	call   c001d134 <PIT::~PIT()>
c001d167:	83 c4 10             	add    esp,0x10
c001d16a:	83 ec 08             	sub    esp,0x8
c001d16d:	68 5c 01 00 00       	push   0x15c
c001d172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d176:	e8 77 c4 fe ff       	call   c00095f2 <operator delete(void*, unsigned long)>
c001d17b:	83 c4 10             	add    esp,0x10
c001d17e:	83 c4 0c             	add    esp,0xc
c001d181:	c3                   	ret    
