
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3d f4 00 00       	call   c000f45d <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 13 52 02 00       	call   c0025238 <_init>
c0000025:	c3                   	ret    
c0000026:	bb d0 5d 02 c0       	mov    ebx,0xc0025dd0
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb dc 5d 02 c0    	cmp    ebx,0xc0025ddc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 2c 9c 02 c0       	mov    eax,0xc0029c2c
c0000049:	3d 2c 9c 02 c0       	cmp    eax,0xc0029c2c
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 2c 9c 02 c0       	push   0xc0029c2c
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 2c 9c 02 c0       	mov    eax,0xc0029c2c
c0000075:	2d 2c 9c 02 c0       	sub    eax,0xc0029c2c
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 2c 9c 02 c0       	push   0xc0029c2c
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 5c a2 02 c0 00 	cmp    BYTE PTR ds:0xc002a25c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb e4 5d 02 c0       	mov    ebx,0xc0025de4
c00000bb:	81 eb e0 5d 02 c0    	sub    ebx,0xc0025de0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be e0 5d 02 c0       	mov    esi,0xc0025de0
c00000ca:	a1 60 a2 02 c0       	mov    eax,ds:0xc002a260
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 60 a2 02 c0       	mov    ds:0xc002a260,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 60 a2 02 c0       	mov    eax,ds:0xc002a260
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 2c 9c 02 c0       	push   0xc0029c2c
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 5c a2 02 c0 01 	mov    BYTE PTR ds:0xc002a25c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 64 a2 02 c0       	push   0xc002a264
c000012c:	68 2c 9c 02 c0       	push   0xc0029c2c
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <goToVM86>:
c0000299:	fa                   	cli    
c000029a:	55                   	push   ebp
c000029b:	89 e5                	mov    ebp,esp
c000029d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002a0:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002a3:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002a6:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002a9:	25 ff ff 00 00       	and    eax,0xffff
c00002ae:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002b4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002ba:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002c0:	52                   	push   edx
c00002c1:	51                   	push   ecx
c00002c2:	68 02 02 02 00       	push   0x20202
c00002c7:	53                   	push   ebx
c00002c8:	50                   	push   eax
c00002c9:	cf                   	iret   

c00002ca <goToUsermode>:
c00002ca:	fa                   	cli    
c00002cb:	55                   	push   ebp
c00002cc:	89 e5                	mov    ebp,esp
c00002ce:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002d1:	66 b8 23 00          	mov    ax,0x23
c00002d5:	66 8e d8             	mov    ds,ax
c00002d8:	66 8e c0             	mov    es,ax
c00002db:	66 8e e0             	mov    fs,ax
c00002de:	66 8e e8             	mov    gs,ax
c00002e1:	89 e0                	mov    eax,esp
c00002e3:	68 23 00 00 00       	push   0x23
c00002e8:	50                   	push   eax
c00002e9:	68 02 02 00 00       	push   0x202
c00002ee:	68 1b 00 00 00       	push   0x1b
c00002f3:	53                   	push   ebx
c00002f4:	cf                   	iret   

c00002f5 <switchToThreadASMFirstTime>:
c00002f5:	9c                   	pushf  
c00002f6:	fa                   	cli    
c00002f7:	50                   	push   eax
c00002f8:	53                   	push   ebx
c00002f9:	51                   	push   ecx
c00002fa:	52                   	push   edx
c00002fb:	56                   	push   esi
c00002fc:	57                   	push   edi
c00002fd:	55                   	push   ebp
c00002fe:	e9 11 00 00 00       	jmp    c0000314 <commonThreadSwitch>

c0000303 <switchToThreadASM>:
c0000303:	9c                   	pushf  
c0000304:	50                   	push   eax
c0000305:	53                   	push   ebx
c0000306:	51                   	push   ecx
c0000307:	52                   	push   edx
c0000308:	56                   	push   esi
c0000309:	57                   	push   edi
c000030a:	55                   	push   ebp
c000030b:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000311:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000314 <commonThreadSwitch>:
c0000314:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000318:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000031e:	8b 06                	mov    eax,DWORD PTR [esi]
c0000320:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000323:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000326:	0f 20 d9             	mov    ecx,cr3
c0000329:	39 c8                	cmp    eax,ecx
c000032b:	74 03                	je     c0000330 <commonThreadSwitch.doneVAS>
c000032d:	0f 22 d8             	mov    cr3,eax

c0000330 <commonThreadSwitch.doneVAS>:
c0000330:	85 d2                	test   edx,edx
c0000332:	74 4e                	je     c0000382 <commonThreadSwitch.notFirstTime>
c0000334:	fa                   	cli    
c0000335:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000338:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c000033d:	60                   	pusha  
c000033e:	e8 09 1d 01 00       	call   c001204c <mapVASFirstTime>
c0000343:	61                   	popa   
c0000344:	89 c4                	mov    esp,eax
c0000346:	56                   	push   esi
c0000347:	52                   	push   edx
c0000348:	e8 2d b3 01 00       	call   c001b67a <changeTSS>
c000034d:	5a                   	pop    edx
c000034e:	5e                   	pop    esi
c000034f:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000356:	81 fa 01 00 00 00    	cmp    edx,0x1
c000035c:	74 39                	je     c0000397 <commonThreadSwitch.cameOffAFork>
c000035e:	5d                   	pop    ebp
c000035f:	5f                   	pop    edi
c0000360:	5e                   	pop    esi
c0000361:	59                   	pop    ecx
c0000362:	59                   	pop    ecx
c0000363:	5b                   	pop    ebx
c0000364:	58                   	pop    eax
c0000365:	81 c4 04 00 00 00    	add    esp,0x4
c000036b:	6a 02                	push   0x2
c000036d:	9d                   	popf   
c000036e:	52                   	push   edx
c000036f:	e8 19 b7 01 00       	call   c001ba8d <taskStartupFunction>
c0000374:	5a                   	pop    edx
c0000375:	50                   	push   eax
c0000376:	ff d2                	call   edx
c0000378:	e8 bf bc 01 00       	call   c001c03c <taskReturned>
c000037d:	e9 fb ff ff ff       	jmp    c000037d <commonThreadSwitch.doneVAS+0x4d>

c0000382 <commonThreadSwitch.notFirstTime>:
c0000382:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000385:	56                   	push   esi
c0000386:	52                   	push   edx
c0000387:	e8 ee b2 01 00       	call   c001b67a <changeTSS>
c000038c:	5a                   	pop    edx
c000038d:	5e                   	pop    esi
c000038e:	5d                   	pop    ebp
c000038f:	5f                   	pop    edi
c0000390:	5e                   	pop    esi
c0000391:	5a                   	pop    edx
c0000392:	59                   	pop    ecx
c0000393:	5b                   	pop    ebx
c0000394:	58                   	pop    eax
c0000395:	9d                   	popf   
c0000396:	c3                   	ret    

c0000397 <commonThreadSwitch.cameOffAFork>:
c0000397:	31 c0                	xor    eax,eax
c0000399:	31 d2                	xor    edx,edx
c000039b:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c000039e:	e9 7b 02 00 00       	jmp    c000061e <offAForkJumpThingy>

c00003a3 <detectCPUID>:
c00003a3:	9c                   	pushf  
c00003a4:	9c                   	pushf  
c00003a5:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00003ac:	9d                   	popf   
c00003ad:	9c                   	pushf  
c00003ae:	58                   	pop    eax
c00003af:	33 04 24             	xor    eax,DWORD PTR [esp]
c00003b2:	9d                   	popf   
c00003b3:	25 00 00 20 00       	and    eax,0x200000
c00003b8:	c3                   	ret    

c00003b9 <asmQuickAcquireLock>:
c00003b9:	55                   	push   ebp
c00003ba:	89 e5                	mov    ebp,esp
c00003bc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003bf <asmQuickAcquireLock.retry>:
c00003bf:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003c4:	72 02                	jb     c00003c8 <asmQuickAcquireLock.spin_with_pause>
c00003c6:	fa                   	cli    
c00003c7:	c3                   	ret    

c00003c8 <asmQuickAcquireLock.spin_with_pause>:
c00003c8:	f3 90                	pause  
c00003ca:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003d0:	75 f6                	jne    c00003c8 <asmQuickAcquireLock.spin_with_pause>
c00003d2:	e9 e8 ff ff ff       	jmp    c00003bf <asmQuickAcquireLock.retry>

c00003d7 <asmQuickReleaseLock>:
c00003d7:	55                   	push   ebp
c00003d8:	89 e5                	mov    ebp,esp
c00003da:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003e1:	5d                   	pop    ebp
c00003e2:	c3                   	ret    

c00003e3 <asmAcquireLock>:
c00003e3:	55                   	push   ebp
c00003e4:	89 e5                	mov    ebp,esp
c00003e6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003e9 <asmAcquireLock.retry>:
c00003e9:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003ee:	72 05                	jb     c00003f5 <asmAcquireLock.spin_with_pause>
c00003f0:	9c                   	pushf  
c00003f1:	58                   	pop    eax
c00003f2:	fa                   	cli    
c00003f3:	5d                   	pop    ebp
c00003f4:	c3                   	ret    

c00003f5 <asmAcquireLock.spin_with_pause>:
c00003f5:	f3 90                	pause  
c00003f7:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003fd:	75 f6                	jne    c00003f5 <asmAcquireLock.spin_with_pause>
c00003ff:	e9 e5 ff ff ff       	jmp    c00003e9 <asmAcquireLock.retry>

c0000404 <asmReleaseLock>:
c0000404:	55                   	push   ebp
c0000405:	89 e5                	mov    ebp,esp
c0000407:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000040a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000040d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000413:	52                   	push   edx
c0000414:	9d                   	popf   
c0000415:	5d                   	pop    ebp
c0000416:	c3                   	ret    

c0000417 <loadGDT>:
c0000417:	0f 01 15 90 a6 02 c0 	lgdtd  ds:0xc002a690
c000041e:	66 b8 10 00          	mov    ax,0x10
c0000422:	66 8e d8             	mov    ds,ax
c0000425:	66 8e c0             	mov    es,ax
c0000428:	66 8e e0             	mov    fs,ax
c000042b:	66 8e e8             	mov    gs,ax
c000042e:	66 8e d0             	mov    ss,ax
c0000431:	e9 00 00 00 00       	jmp    c0000436 <flush2>

c0000436 <flush2>:
c0000436:	c3                   	ret    

c0000437 <isr0>:
c0000437:	fa                   	cli    
c0000438:	68 00 00 00 00       	push   0x0
c000043d:	68 00 00 00 00       	push   0x0
c0000442:	e9 a2 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000447 <isr1>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 01                	push   0x1
c000044c:	e9 98 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000451 <isr2>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 02                	push   0x2
c0000456:	e9 8e 01 00 00       	jmp    c00005e9 <int_common_stub>

c000045b <isr3>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 03                	push   0x3
c0000460:	e9 84 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000465 <isr4>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 04                	push   0x4
c000046a:	e9 7a 01 00 00       	jmp    c00005e9 <int_common_stub>

c000046f <isr5>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 05                	push   0x5
c0000474:	e9 70 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000479 <isr6>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 06                	push   0x6
c000047e:	e9 66 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000483 <isr7>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 07                	push   0x7
c0000488:	e9 5c 01 00 00       	jmp    c00005e9 <int_common_stub>

c000048d <isr8>:
c000048d:	fa                   	cli    
c000048e:	6a 08                	push   0x8
c0000490:	e9 54 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000495 <isr9>:
c0000495:	fa                   	cli    
c0000496:	6a 00                	push   0x0
c0000498:	6a 09                	push   0x9
c000049a:	e9 4a 01 00 00       	jmp    c00005e9 <int_common_stub>

c000049f <isr10>:
c000049f:	fa                   	cli    
c00004a0:	6a 0a                	push   0xa
c00004a2:	e9 42 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004a7 <isr11>:
c00004a7:	fa                   	cli    
c00004a8:	6a 0b                	push   0xb
c00004aa:	e9 3a 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004af <isr12>:
c00004af:	fa                   	cli    
c00004b0:	6a 0c                	push   0xc
c00004b2:	e9 32 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004b7 <isr13>:
c00004b7:	fa                   	cli    
c00004b8:	6a 0d                	push   0xd
c00004ba:	e9 2a 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004bf <isr14>:
c00004bf:	fa                   	cli    
c00004c0:	6a 0e                	push   0xe
c00004c2:	e9 22 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004c7 <isr15>:
c00004c7:	fa                   	cli    
c00004c8:	6a 00                	push   0x0
c00004ca:	6a 0f                	push   0xf
c00004cc:	e9 18 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004d1 <isr16>:
c00004d1:	fa                   	cli    
c00004d2:	6a 00                	push   0x0
c00004d4:	6a 10                	push   0x10
c00004d6:	e9 0e 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004db <isr17>:
c00004db:	fa                   	cli    
c00004dc:	6a 00                	push   0x0
c00004de:	6a 11                	push   0x11
c00004e0:	e9 04 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004e5 <isr18>:
c00004e5:	fa                   	cli    
c00004e6:	6a 00                	push   0x0
c00004e8:	6a 12                	push   0x12
c00004ea:	e9 fa 00 00 00       	jmp    c00005e9 <int_common_stub>

c00004ef <isr96>:
c00004ef:	fa                   	cli    
c00004f0:	6a 00                	push   0x0
c00004f2:	6a 60                	push   0x60
c00004f4:	e9 11 01 00 00       	jmp    c000060a <syscall_common_stub>

c00004f9 <irq0>:
c00004f9:	fa                   	cli    
c00004fa:	6a 00                	push   0x0
c00004fc:	6a 20                	push   0x20
c00004fe:	e9 e6 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000503 <irq1>:
c0000503:	fa                   	cli    
c0000504:	6a 00                	push   0x0
c0000506:	6a 21                	push   0x21
c0000508:	e9 dc 00 00 00       	jmp    c00005e9 <int_common_stub>

c000050d <irq2>:
c000050d:	fa                   	cli    
c000050e:	6a 00                	push   0x0
c0000510:	6a 22                	push   0x22
c0000512:	e9 d2 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000517 <irq3>:
c0000517:	fa                   	cli    
c0000518:	6a 00                	push   0x0
c000051a:	6a 23                	push   0x23
c000051c:	e9 c8 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000521 <irq4>:
c0000521:	fa                   	cli    
c0000522:	6a 00                	push   0x0
c0000524:	6a 24                	push   0x24
c0000526:	e9 be 00 00 00       	jmp    c00005e9 <int_common_stub>

c000052b <irq5>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 25                	push   0x25
c0000530:	e9 b4 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000535 <irq6>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 26                	push   0x26
c000053a:	e9 aa 00 00 00       	jmp    c00005e9 <int_common_stub>

c000053f <irq7>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 27                	push   0x27
c0000544:	e9 a0 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000549 <irq8>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 28                	push   0x28
c000054e:	e9 96 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000553 <irq9>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 29                	push   0x29
c0000558:	e9 8c 00 00 00       	jmp    c00005e9 <int_common_stub>

c000055d <irq10>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 2a                	push   0x2a
c0000562:	e9 82 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000567 <irq11>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 2b                	push   0x2b
c000056c:	e9 78 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000571 <irq12>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 2c                	push   0x2c
c0000576:	e9 6e 00 00 00       	jmp    c00005e9 <int_common_stub>

c000057b <irq13>:
c000057b:	fa                   	cli    
c000057c:	6a 00                	push   0x0
c000057e:	6a 2d                	push   0x2d
c0000580:	e9 64 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000585 <irq14>:
c0000585:	fa                   	cli    
c0000586:	6a 00                	push   0x0
c0000588:	6a 2e                	push   0x2e
c000058a:	e9 5a 00 00 00       	jmp    c00005e9 <int_common_stub>

c000058f <irq15>:
c000058f:	fa                   	cli    
c0000590:	6a 00                	push   0x0
c0000592:	6a 2f                	push   0x2f
c0000594:	e9 50 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000599 <irq16>:
c0000599:	fa                   	cli    
c000059a:	6a 00                	push   0x0
c000059c:	6a 30                	push   0x30
c000059e:	e9 46 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005a3 <irq17>:
c00005a3:	fa                   	cli    
c00005a4:	6a 00                	push   0x0
c00005a6:	6a 31                	push   0x31
c00005a8:	e9 3c 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005ad <irq18>:
c00005ad:	fa                   	cli    
c00005ae:	6a 00                	push   0x0
c00005b0:	6a 32                	push   0x32
c00005b2:	e9 32 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005b7 <irq19>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 33                	push   0x33
c00005bc:	e9 28 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005c1 <irq20>:
c00005c1:	fa                   	cli    
c00005c2:	6a 00                	push   0x0
c00005c4:	6a 34                	push   0x34
c00005c6:	e9 1e 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005cb <irq21>:
c00005cb:	fa                   	cli    
c00005cc:	6a 00                	push   0x0
c00005ce:	6a 35                	push   0x35
c00005d0:	e9 14 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005d5 <irq22>:
c00005d5:	fa                   	cli    
c00005d6:	6a 00                	push   0x0
c00005d8:	6a 36                	push   0x36
c00005da:	e9 0a 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005df <irq23>:
c00005df:	fa                   	cli    
c00005e0:	6a 00                	push   0x0
c00005e2:	6a 37                	push   0x37
c00005e4:	e9 00 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005e9 <int_common_stub>:
c00005e9:	60                   	pusha  
c00005ea:	1e                   	push   ds
c00005eb:	06                   	push   es
c00005ec:	0f a0                	push   fs
c00005ee:	0f a8                	push   gs
c00005f0:	54                   	push   esp
c00005f1:	e8 39 39 01 00       	call   c0013f2f <int_handler>
c00005f6:	81 c4 04 00 00 00    	add    esp,0x4
c00005fc:	0f a9                	pop    gs
c00005fe:	0f a1                	pop    fs
c0000600:	07                   	pop    es
c0000601:	1f                   	pop    ds
c0000602:	61                   	popa   
c0000603:	81 c4 08 00 00 00    	add    esp,0x8
c0000609:	cf                   	iret   

c000060a <syscall_common_stub>:
c000060a:	60                   	pusha  
c000060b:	1e                   	push   ds
c000060c:	06                   	push   es
c000060d:	0f a0                	push   fs
c000060f:	0f a8                	push   gs
c0000611:	54                   	push   esp
c0000612:	fb                   	sti    
c0000613:	e8 17 39 01 00       	call   c0013f2f <int_handler>
c0000618:	81 c4 04 00 00 00    	add    esp,0x4

c000061e <offAForkJumpThingy>:
c000061e:	0f a9                	pop    gs
c0000620:	0f a1                	pop    fs
c0000622:	07                   	pop    es
c0000623:	1f                   	pop    ds
c0000624:	61                   	popa   
c0000625:	81 c4 08 00 00 00    	add    esp,0x8
c000062b:	cf                   	iret   

c000062c <memcmp>:
c000062c:	56                   	push   esi
c000062d:	53                   	push   ebx
c000062e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000632:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000636:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000063a:	01 d6                	add    esi,edx
c000063c:	39 f2                	cmp    edx,esi
c000063e:	74 0e                	je     c000064e <memcmp+0x22>
c0000640:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000643:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000646:	38 c8                	cmp    al,cl
c0000648:	75 08                	jne    c0000652 <memcmp+0x26>
c000064a:	42                   	inc    edx
c000064b:	43                   	inc    ebx
c000064c:	eb ee                	jmp    c000063c <memcmp+0x10>
c000064e:	31 c0                	xor    eax,eax
c0000650:	eb 02                	jmp    c0000654 <memcmp+0x28>
c0000652:	29 c8                	sub    eax,ecx
c0000654:	5b                   	pop    ebx
c0000655:	5e                   	pop    esi
c0000656:	c3                   	ret    

c0000657 <memmove>:
c0000657:	56                   	push   esi
c0000658:	53                   	push   ebx
c0000659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000065d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000665:	39 c8                	cmp    eax,ecx
c0000667:	73 12                	jae    c000067b <memmove+0x24>
c0000669:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000066c:	89 c3                	mov    ebx,eax
c000066e:	39 f1                	cmp    ecx,esi
c0000670:	74 1a                	je     c000068c <memmove+0x35>
c0000672:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000674:	43                   	inc    ebx
c0000675:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000678:	41                   	inc    ecx
c0000679:	eb f3                	jmp    c000066e <memmove+0x17>
c000067b:	76 0f                	jbe    c000068c <memmove+0x35>
c000067d:	85 d2                	test   edx,edx
c000067f:	74 0b                	je     c000068c <memmove+0x35>
c0000681:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c0000685:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c0000689:	4a                   	dec    edx
c000068a:	eb f1                	jmp    c000067d <memmove+0x26>
c000068c:	5b                   	pop    ebx
c000068d:	5e                   	pop    esi
c000068e:	c3                   	ret    

c000068f <memcpy>:
c000068f:	57                   	push   edi
c0000690:	56                   	push   esi
c0000691:	53                   	push   ebx
c0000692:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000069a:	89 da                	mov    edx,ebx
c000069c:	89 d9                	mov    ecx,ebx
c000069e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006a2:	83 e2 fc             	and    edx,0xfffffffc
c00006a5:	c1 e9 02             	shr    ecx,0x2
c00006a8:	89 c7                	mov    edi,eax
c00006aa:	fc                   	cld    
c00006ab:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00006ad:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006b0:	01 c2                	add    edx,eax
c00006b2:	01 de                	add    esi,ebx
c00006b4:	39 f1                	cmp    ecx,esi
c00006b6:	74 09                	je     c00006c1 <memcpy+0x32>
c00006b8:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006ba:	42                   	inc    edx
c00006bb:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006be:	41                   	inc    ecx
c00006bf:	eb f3                	jmp    c00006b4 <memcpy+0x25>
c00006c1:	5b                   	pop    ebx
c00006c2:	5e                   	pop    esi
c00006c3:	5f                   	pop    edi
c00006c4:	c3                   	ret    

c00006c5 <memset>:
c00006c5:	53                   	push   ebx
c00006c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006ce:	89 c2                	mov    edx,eax
c00006d0:	01 c1                	add    ecx,eax
c00006d2:	39 ca                	cmp    edx,ecx
c00006d4:	74 0a                	je     c00006e0 <memset+0x1b>
c00006d6:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006da:	42                   	inc    edx
c00006db:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006de:	eb f2                	jmp    c00006d2 <memset+0xd>
c00006e0:	5b                   	pop    ebx
c00006e1:	c3                   	ret    

c00006e2 <strlen>:
c00006e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006e6:	31 c0                	xor    eax,eax
c00006e8:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006ec:	74 03                	je     c00006f1 <strlen+0xf>
c00006ee:	40                   	inc    eax
c00006ef:	eb f7                	jmp    c00006e8 <strlen+0x6>
c00006f1:	c3                   	ret    

c00006f2 <strpbrk>:
c00006f2:	53                   	push   ebx
c00006f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006f7:	8a 08                	mov    cl,BYTE PTR [eax]
c00006f9:	84 c9                	test   cl,cl
c00006fb:	74 14                	je     c0000711 <strpbrk+0x1f>
c00006fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000701:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000703:	84 db                	test   bl,bl
c0000705:	74 07                	je     c000070e <strpbrk+0x1c>
c0000707:	38 cb                	cmp    bl,cl
c0000709:	74 08                	je     c0000713 <strpbrk+0x21>
c000070b:	42                   	inc    edx
c000070c:	eb f3                	jmp    c0000701 <strpbrk+0xf>
c000070e:	40                   	inc    eax
c000070f:	eb e6                	jmp    c00006f7 <strpbrk+0x5>
c0000711:	31 c0                	xor    eax,eax
c0000713:	5b                   	pop    ebx
c0000714:	c3                   	ret    

c0000715 <strtok>:
c0000715:	56                   	push   esi
c0000716:	53                   	push   ebx
c0000717:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000071b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000071f:	85 db                	test   ebx,ebx
c0000721:	75 0e                	jne    c0000731 <strtok+0x1c>
c0000723:	8b 1d 7c a2 02 c0    	mov    ebx,DWORD PTR ds:0xc002a27c
c0000729:	85 db                	test   ebx,ebx
c000072b:	75 04                	jne    c0000731 <strtok+0x1c>
c000072d:	31 db                	xor    ebx,ebx
c000072f:	eb 2e                	jmp    c000075f <strtok+0x4a>
c0000731:	56                   	push   esi
c0000732:	53                   	push   ebx
c0000733:	e8 ba ff ff ff       	call   c00006f2 <strpbrk>
c0000738:	5a                   	pop    edx
c0000739:	a3 7c a2 02 c0       	mov    ds:0xc002a27c,eax
c000073e:	59                   	pop    ecx
c000073f:	a1 7c a2 02 c0       	mov    eax,ds:0xc002a27c
c0000744:	39 d8                	cmp    eax,ebx
c0000746:	75 07                	jne    c000074f <strtok+0x3a>
c0000748:	43                   	inc    ebx
c0000749:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000074d:	eb e2                	jmp    c0000731 <strtok+0x1c>
c000074f:	85 c0                	test   eax,eax
c0000751:	74 da                	je     c000072d <strtok+0x18>
c0000753:	8d 50 01             	lea    edx,[eax+0x1]
c0000756:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000759:	89 15 7c a2 02 c0    	mov    DWORD PTR ds:0xc002a27c,edx
c000075f:	89 d8                	mov    eax,ebx
c0000761:	5b                   	pop    ebx
c0000762:	5e                   	pop    esi
c0000763:	c3                   	ret    

c0000764 <strcpy>:
c0000764:	53                   	push   ebx
c0000765:	31 d2                	xor    edx,edx
c0000767:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000076b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000076f:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000772:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0000775:	84 c9                	test   cl,cl
c0000777:	74 06                	je     c000077f <strcpy+0x1b>
c0000779:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c000077c:	42                   	inc    edx
c000077d:	eb ec                	jmp    c000076b <strcpy+0x7>
c000077f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000782:	5b                   	pop    ebx
c0000783:	c3                   	ret    

c0000784 <strncpy>:
c0000784:	56                   	push   esi
c0000785:	53                   	push   ebx
c0000786:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000792:	89 c3                	mov    ebx,eax
c0000794:	85 c9                	test   ecx,ecx
c0000796:	74 1a                	je     c00007b2 <strncpy+0x2e>
c0000798:	46                   	inc    esi
c0000799:	43                   	inc    ebx
c000079a:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c000079d:	49                   	dec    ecx
c000079e:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00007a1:	84 d2                	test   dl,dl
c00007a3:	75 ef                	jne    c0000794 <strncpy+0x10>
c00007a5:	31 d2                	xor    edx,edx
c00007a7:	39 d1                	cmp    ecx,edx
c00007a9:	74 07                	je     c00007b2 <strncpy+0x2e>
c00007ab:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007af:	42                   	inc    edx
c00007b0:	eb f5                	jmp    c00007a7 <strncpy+0x23>
c00007b2:	5b                   	pop    ebx
c00007b3:	5e                   	pop    esi
c00007b4:	c3                   	ret    

c00007b5 <strcmp>:
c00007b5:	31 c9                	xor    ecx,ecx
c00007b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007bb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007bf:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007c3:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007c7:	38 d0                	cmp    al,dl
c00007c9:	75 08                	jne    c00007d3 <strcmp+0x1e>
c00007cb:	41                   	inc    ecx
c00007cc:	84 c0                	test   al,al
c00007ce:	75 e7                	jne    c00007b7 <strcmp+0x2>
c00007d0:	31 c0                	xor    eax,eax
c00007d2:	c3                   	ret    
c00007d3:	29 d0                	sub    eax,edx
c00007d5:	c3                   	ret    

c00007d6 <strchr>:
c00007d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007da:	8a 10                	mov    dl,BYTE PTR [eax]
c00007dc:	84 d2                	test   dl,dl
c00007de:	74 09                	je     c00007e9 <strchr+0x13>
c00007e0:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007e4:	74 05                	je     c00007eb <strchr+0x15>
c00007e6:	40                   	inc    eax
c00007e7:	eb f1                	jmp    c00007da <strchr+0x4>
c00007e9:	31 c0                	xor    eax,eax
c00007eb:	c3                   	ret    

c00007ec <strncmp>:
c00007ec:	56                   	push   esi
c00007ed:	53                   	push   ebx
c00007ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007fa:	01 d6                	add    esi,edx
c00007fc:	39 f2                	cmp    edx,esi
c00007fe:	74 12                	je     c0000812 <strncmp+0x26>
c0000800:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000803:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000806:	38 c8                	cmp    al,cl
c0000808:	75 0c                	jne    c0000816 <strncmp+0x2a>
c000080a:	42                   	inc    edx
c000080b:	84 c0                	test   al,al
c000080d:	74 03                	je     c0000812 <strncmp+0x26>
c000080f:	43                   	inc    ebx
c0000810:	eb ea                	jmp    c00007fc <strncmp+0x10>
c0000812:	31 c0                	xor    eax,eax
c0000814:	eb 02                	jmp    c0000818 <strncmp+0x2c>
c0000816:	29 c8                	sub    eax,ecx
c0000818:	5b                   	pop    ebx
c0000819:	5e                   	pop    esi
c000081a:	c3                   	ret    

c000081b <strcat>:
c000081b:	53                   	push   ebx
c000081c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000820:	89 c1                	mov    ecx,eax
c0000822:	8d 51 01             	lea    edx,[ecx+0x1]
c0000825:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000829:	74 04                	je     c000082f <strcat+0x14>
c000082b:	89 d1                	mov    ecx,edx
c000082d:	eb f3                	jmp    c0000822 <strcat+0x7>
c000082f:	31 d2                	xor    edx,edx
c0000831:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000835:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c0000838:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000083b:	42                   	inc    edx
c000083c:	84 db                	test   bl,bl
c000083e:	75 f1                	jne    c0000831 <strcat+0x16>
c0000840:	5b                   	pop    ebx
c0000841:	c3                   	ret    

c0000842 <strncat>:
c0000842:	56                   	push   esi
c0000843:	53                   	push   ebx
c0000844:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000848:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000084c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000850:	89 c2                	mov    edx,eax
c0000852:	85 db                	test   ebx,ebx
c0000854:	74 23                	je     c0000879 <strncat+0x37>
c0000856:	8d 72 01             	lea    esi,[edx+0x1]
c0000859:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c000085d:	74 04                	je     c0000863 <strncat+0x21>
c000085f:	89 f2                	mov    edx,esi
c0000861:	eb f3                	jmp    c0000856 <strncat+0x14>
c0000863:	8d 34 19             	lea    esi,[ecx+ebx*1]
c0000866:	41                   	inc    ecx
c0000867:	42                   	inc    edx
c0000868:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c000086b:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000086e:	84 db                	test   bl,bl
c0000870:	74 07                	je     c0000879 <strncat+0x37>
c0000872:	39 f1                	cmp    ecx,esi
c0000874:	75 f0                	jne    c0000866 <strncat+0x24>
c0000876:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000879:	5b                   	pop    ebx
c000087a:	5e                   	pop    esi
c000087b:	c3                   	ret    

c000087c <strstr>:
c000087c:	57                   	push   edi
c000087d:	56                   	push   esi
c000087e:	53                   	push   ebx
c000087f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000883:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000887:	57                   	push   edi
c0000888:	e8 55 fe ff ff       	call   c00006e2 <strlen>
c000088d:	59                   	pop    ecx
c000088e:	89 c6                	mov    esi,eax
c0000890:	85 c0                	test   eax,eax
c0000892:	74 1f                	je     c00008b3 <strstr+0x37>
c0000894:	53                   	push   ebx
c0000895:	e8 48 fe ff ff       	call   c00006e2 <strlen>
c000089a:	5a                   	pop    edx
c000089b:	39 f0                	cmp    eax,esi
c000089d:	72 12                	jb     c00008b1 <strstr+0x35>
c000089f:	56                   	push   esi
c00008a0:	57                   	push   edi
c00008a1:	53                   	push   ebx
c00008a2:	e8 85 fd ff ff       	call   c000062c <memcmp>
c00008a7:	83 c4 0c             	add    esp,0xc
c00008aa:	85 c0                	test   eax,eax
c00008ac:	74 05                	je     c00008b3 <strstr+0x37>
c00008ae:	43                   	inc    ebx
c00008af:	eb e3                	jmp    c0000894 <strstr+0x18>
c00008b1:	31 db                	xor    ebx,ebx
c00008b3:	89 d8                	mov    eax,ebx
c00008b5:	5b                   	pop    ebx
c00008b6:	5e                   	pop    esi
c00008b7:	5f                   	pop    edi
c00008b8:	c3                   	ret    

c00008b9 <toupper>:
c00008b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008bd:	0f b6 d0             	movzx  edx,al
c00008c0:	f6 82 00 5e 02 c0 02 	test   BYTE PTR [edx-0x3ffda200],0x2
c00008c7:	74 03                	je     c00008cc <toupper+0x13>
c00008c9:	83 e8 20             	sub    eax,0x20
c00008cc:	c3                   	ret    

c00008cd <tolower>:
c00008cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d1:	0f b6 d0             	movzx  edx,al
c00008d4:	f6 82 00 5e 02 c0 01 	test   BYTE PTR [edx-0x3ffda200],0x1
c00008db:	74 03                	je     c00008e0 <tolower+0x13>
c00008dd:	83 c0 20             	add    eax,0x20
c00008e0:	c3                   	ret    

c00008e1 <simple_strtoul>:
c00008e1:	55                   	push   ebp
c00008e2:	57                   	push   edi
c00008e3:	56                   	push   esi
c00008e4:	53                   	push   ebx
c00008e5:	83 ec 08             	sub    esp,0x8
c00008e8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008f0:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008f3:	f6 82 00 5e 02 c0 08 	test   BYTE PTR [edx-0x3ffda200],0x8
c00008fa:	74 03                	je     c00008ff <simple_strtoul+0x1e>
c00008fc:	41                   	inc    ecx
c00008fd:	eb f1                	jmp    c00008f0 <simple_strtoul+0xf>
c00008ff:	80 fa 09             	cmp    dl,0x9
c0000902:	74 f8                	je     c00008fc <simple_strtoul+0x1b>
c0000904:	80 fa 2d             	cmp    dl,0x2d
c0000907:	75 0b                	jne    c0000914 <simple_strtoul+0x33>
c0000909:	41                   	inc    ecx
c000090a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000912:	eb 0e                	jmp    c0000922 <simple_strtoul+0x41>
c0000914:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000091c:	80 fa 2b             	cmp    dl,0x2b
c000091f:	75 01                	jne    c0000922 <simple_strtoul+0x41>
c0000921:	41                   	inc    ecx
c0000922:	85 f6                	test   esi,esi
c0000924:	75 22                	jne    c0000948 <simple_strtoul+0x67>
c0000926:	be 0a 00 00 00       	mov    esi,0xa
c000092b:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000092e:	75 5a                	jne    c000098a <simple_strtoul+0xa9>
c0000930:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000934:	50                   	push   eax
c0000935:	e8 93 ff ff ff       	call   c00008cd <tolower>
c000093a:	5a                   	pop    edx
c000093b:	83 f8 78             	cmp    eax,0x78
c000093e:	74 03                	je     c0000943 <simple_strtoul+0x62>
c0000940:	41                   	inc    ecx
c0000941:	eb 16                	jmp    c0000959 <simple_strtoul+0x78>
c0000943:	83 c1 02             	add    ecx,0x2
c0000946:	eb 22                	jmp    c000096a <simple_strtoul+0x89>
c0000948:	8d 46 fe             	lea    eax,[esi-0x2]
c000094b:	83 f8 22             	cmp    eax,0x22
c000094e:	0f 87 b7 00 00 00    	ja     c0000a0b <simple_strtoul+0x12a>
c0000954:	83 fe 08             	cmp    esi,0x8
c0000957:	75 0c                	jne    c0000965 <simple_strtoul+0x84>
c0000959:	be 08 00 00 00       	mov    esi,0x8
c000095e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000961:	75 27                	jne    c000098a <simple_strtoul+0xa9>
c0000963:	eb 1f                	jmp    c0000984 <simple_strtoul+0xa3>
c0000965:	83 fe 10             	cmp    esi,0x10
c0000968:	75 20                	jne    c000098a <simple_strtoul+0xa9>
c000096a:	be 10 00 00 00       	mov    esi,0x10
c000096f:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000972:	75 16                	jne    c000098a <simple_strtoul+0xa9>
c0000974:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000978:	50                   	push   eax
c0000979:	e8 4f ff ff ff       	call   c00008cd <tolower>
c000097e:	5d                   	pop    ebp
c000097f:	83 f8 78             	cmp    eax,0x78
c0000982:	74 03                	je     c0000987 <simple_strtoul+0xa6>
c0000984:	41                   	inc    ecx
c0000985:	eb 03                	jmp    c000098a <simple_strtoul+0xa9>
c0000987:	83 c1 02             	add    ecx,0x2
c000098a:	31 ed                	xor    ebp,ebp
c000098c:	31 db                	xor    ebx,ebx
c000098e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000995:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 27                	je     c00009c2 <simple_strtoul+0xe1>
c000099b:	0f b6 fa             	movzx  edi,dl
c000099e:	f6 87 00 5e 02 c0 04 	test   BYTE PTR [edi-0x3ffda200],0x4
c00009a5:	74 05                	je     c00009ac <simple_strtoul+0xcb>
c00009a7:	83 ef 30             	sub    edi,0x30
c00009aa:	eb 22                	jmp    c00009ce <simple_strtoul+0xed>
c00009ac:	0f be d2             	movsx  edx,dl
c00009af:	52                   	push   edx
c00009b0:	e8 04 ff ff ff       	call   c00008b9 <toupper>
c00009b5:	5f                   	pop    edi
c00009b6:	0f b6 d0             	movzx  edx,al
c00009b9:	f6 82 00 5e 02 c0 01 	test   BYTE PTR [edx-0x3ffda200],0x1
c00009c0:	75 09                	jne    c00009cb <simple_strtoul+0xea>
c00009c2:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009c7:	75 2d                	jne    c00009f6 <simple_strtoul+0x115>
c00009c9:	eb 57                	jmp    c0000a22 <simple_strtoul+0x141>
c00009cb:	8d 78 c9             	lea    edi,[eax-0x37]
c00009ce:	39 f7                	cmp    edi,esi
c00009d0:	73 f0                	jae    c00009c2 <simple_strtoul+0xe1>
c00009d2:	31 d2                	xor    edx,edx
c00009d4:	89 f8                	mov    eax,edi
c00009d6:	f7 d0                	not    eax
c00009d8:	f7 f6                	div    esi
c00009da:	39 d8                	cmp    eax,ebx
c00009dc:	72 0e                	jb     c00009ec <simple_strtoul+0x10b>
c00009de:	0f af de             	imul   ebx,esi
c00009e1:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e8:	01 fb                	add    ebx,edi
c00009ea:	eb 07                	jmp    c00009f3 <simple_strtoul+0x112>
c00009ec:	bd 01 00 00 00       	mov    ebp,0x1
c00009f1:	31 db                	xor    ebx,ebx
c00009f3:	41                   	inc    ecx
c00009f4:	eb 9f                	jmp    c0000995 <simple_strtoul+0xb4>
c00009f6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009f9:	09 d8                	or     eax,ebx
c00009fb:	75 1f                	jne    c0000a1c <simple_strtoul+0x13b>
c00009fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a01:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a05:	31 db                	xor    ebx,ebx
c0000a07:	89 38                	mov    DWORD PTR [eax],edi
c0000a09:	eb 17                	jmp    c0000a22 <simple_strtoul+0x141>
c0000a0b:	31 db                	xor    ebx,ebx
c0000a0d:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a12:	74 14                	je     c0000a28 <simple_strtoul+0x147>
c0000a14:	31 ed                	xor    ebp,ebp
c0000a16:	85 c9                	test   ecx,ecx
c0000a18:	75 e3                	jne    c00009fd <simple_strtoul+0x11c>
c0000a1a:	31 db                	xor    ebx,ebx
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	89 08                	mov    DWORD PTR [eax],ecx
c0000a22:	4d                   	dec    ebp
c0000a23:	75 03                	jne    c0000a28 <simple_strtoul+0x147>
c0000a25:	83 cb ff             	or     ebx,0xffffffff
c0000a28:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a2d:	75 02                	jne    c0000a31 <simple_strtoul+0x150>
c0000a2f:	f7 db                	neg    ebx
c0000a31:	83 c4 08             	add    esp,0x8
c0000a34:	89 d8                	mov    eax,ebx
c0000a36:	5b                   	pop    ebx
c0000a37:	5e                   	pop    esi
c0000a38:	5f                   	pop    edi
c0000a39:	5d                   	pop    ebp
c0000a3a:	c3                   	ret    

c0000a3b <largebin_index>:
c0000a3b:	89 c2                	mov    edx,eax
c0000a3d:	c1 ea 08             	shr    edx,0x8
c0000a40:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a46:	77 10                	ja     c0000a58 <largebin_index+0x1d>
c0000a48:	0f bd d2             	bsr    edx,edx
c0000a4b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a4e:	d3 e8                	shr    eax,cl
c0000a50:	83 e0 03             	and    eax,0x3
c0000a53:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a57:	c3                   	ret    
c0000a58:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a5d:	c3                   	ret    

c0000a5e <malloc_init_state>:
c0000a5e:	53                   	push   ebx
c0000a5f:	8d 50 34             	lea    edx,[eax+0x34]
c0000a62:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a68:	89 d1                	mov    ecx,edx
c0000a6a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a6d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a70:	83 c2 08             	add    edx,0x8
c0000a73:	39 da                	cmp    edx,ebx
c0000a75:	75 f3                	jne    c0000a6a <malloc_init_state+0xc>
c0000a77:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a79:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a83:	83 e2 03             	and    edx,0x3
c0000a86:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a90:	83 ca 48             	or     edx,0x48
c0000a93:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a9d:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000aa7:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000aae:	89 10                	mov    DWORD PTR [eax],edx
c0000ab0:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ab3:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000abd:	5b                   	pop    ebx
c0000abe:	c3                   	ret    

c0000abf <malloc_consolidate>:
c0000abf:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ac1:	85 d2                	test   edx,edx
c0000ac3:	0f 84 d8 00 00 00    	je     c0000ba1 <malloc_consolidate+0xe2>
c0000ac9:	55                   	push   ebp
c0000aca:	83 e2 fd             	and    edx,0xfffffffd
c0000acd:	57                   	push   edi
c0000ace:	89 c5                	mov    ebp,eax
c0000ad0:	56                   	push   esi
c0000ad1:	8d 78 34             	lea    edi,[eax+0x34]
c0000ad4:	53                   	push   ebx
c0000ad5:	83 ec 10             	sub    esp,0x10
c0000ad8:	89 10                	mov    DWORD PTR [eax],edx
c0000ada:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ade:	c1 ea 03             	shr    edx,0x3
c0000ae1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000ae5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000ae9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000aec:	85 d2                	test   edx,edx
c0000aee:	0f 84 98 00 00 00    	je     c0000b8c <malloc_consolidate+0xcd>
c0000af4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000afb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000afe:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000b01:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000b05:	89 f9                	mov    ecx,edi
c0000b07:	83 e1 fe             	and    ecx,0xfffffffe
c0000b0a:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b0d:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b10:	83 e3 fc             	and    ebx,0xfffffffc
c0000b13:	83 e7 01             	and    edi,0x1
c0000b16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b19:	75 14                	jne    c0000b2f <malloc_consolidate+0x70>
c0000b1b:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b1d:	29 fa                	sub    edx,edi
c0000b1f:	01 f9                	add    ecx,edi
c0000b21:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b24:	89 fb                	mov    ebx,edi
c0000b26:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b29:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b2c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b2f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b32:	74 40                	je     c0000b74 <malloc_consolidate+0xb5>
c0000b34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b37:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b3a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b3e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b41:	83 e7 01             	and    edi,0x1
c0000b44:	75 0e                	jne    c0000b54 <malloc_consolidate+0x95>
c0000b46:	01 d9                	add    ecx,ebx
c0000b48:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b4b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b4e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b51:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b54:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b57:	89 ce                	mov    esi,ecx
c0000b59:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b5c:	83 ce 01             	or     esi,0x1
c0000b5f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b62:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b65:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b68:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b6c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b6f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b72:	eb 0c                	jmp    c0000b80 <malloc_consolidate+0xc1>
c0000b74:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b77:	83 c9 01             	or     ecx,0x1
c0000b7a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b7d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b80:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b84:	85 d2                	test   edx,edx
c0000b86:	0f 85 6f ff ff ff    	jne    c0000afb <malloc_consolidate+0x3c>
c0000b8c:	83 c5 04             	add    ebp,0x4
c0000b8f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b93:	0f 85 50 ff ff ff    	jne    c0000ae9 <malloc_consolidate+0x2a>
c0000b99:	83 c4 10             	add    esp,0x10
c0000b9c:	5b                   	pop    ebx
c0000b9d:	5e                   	pop    esi
c0000b9e:	5f                   	pop    edi
c0000b9f:	5d                   	pop    ebp
c0000ba0:	c3                   	ret    
c0000ba1:	e9 b8 fe ff ff       	jmp    c0000a5e <malloc_init_state>

c0000ba6 <dlfree>:
c0000ba6:	57                   	push   edi
c0000ba7:	56                   	push   esi
c0000ba8:	53                   	push   ebx
c0000ba9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000bad:	85 db                	test   ebx,ebx
c0000baf:	0f 84 e2 00 00 00    	je     c0000c97 <dlfree+0xf1>
c0000bb5:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bb8:	8b 0d 80 a2 02 c0    	mov    ecx,DWORD PTR ds:0xc002a280
c0000bbe:	89 f0                	mov    eax,esi
c0000bc0:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bc3:	83 e0 fc             	and    eax,0xfffffffc
c0000bc6:	39 c1                	cmp    ecx,eax
c0000bc8:	72 24                	jb     c0000bee <dlfree+0x48>
c0000bca:	83 c9 03             	or     ecx,0x3
c0000bcd:	c1 e8 03             	shr    eax,0x3
c0000bd0:	89 0d 80 a2 02 c0    	mov    DWORD PTR ds:0xc002a280,ecx
c0000bd6:	83 e8 02             	sub    eax,0x2
c0000bd9:	8b 0c 85 84 a2 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5d7c]
c0000be0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000be2:	89 14 85 84 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d7c],edx
c0000be9:	e9 a9 00 00 00       	jmp    c0000c97 <dlfree+0xf1>
c0000bee:	83 e6 02             	and    esi,0x2
c0000bf1:	0f 85 a0 00 00 00    	jne    c0000c97 <dlfree+0xf1>
c0000bf7:	83 c9 01             	or     ecx,0x1
c0000bfa:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bfd:	89 0d 80 a2 02 c0    	mov    DWORD PTR ds:0xc002a280,ecx
c0000c03:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000c06:	83 e1 fc             	and    ecx,0xfffffffc
c0000c09:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c0d:	75 13                	jne    c0000c22 <dlfree+0x7c>
c0000c0f:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c12:	29 da                	sub    edx,ebx
c0000c14:	01 d8                	add    eax,ebx
c0000c16:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c19:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c1c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c1f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c22:	39 35 ac a2 02 c0    	cmp    DWORD PTR ds:0xc002a2ac,esi
c0000c28:	74 40                	je     c0000c6a <dlfree+0xc4>
c0000c2a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c2e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c31:	80 e3 01             	and    bl,0x1
c0000c34:	75 0e                	jne    c0000c44 <dlfree+0x9e>
c0000c36:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c39:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c3c:	01 c8                	add    eax,ecx
c0000c3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c44:	8b 0d bc a2 02 c0    	mov    ecx,DWORD PTR ds:0xc002a2bc
c0000c4a:	c7 42 0c b4 a2 02 c0 	mov    DWORD PTR [edx+0xc],0xc002a2b4
c0000c51:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c54:	89 15 bc a2 02 c0    	mov    DWORD PTR ds:0xc002a2bc,edx
c0000c5a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c5d:	89 c1                	mov    ecx,eax
c0000c5f:	83 c9 01             	or     ecx,0x1
c0000c62:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c65:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c68:	eb 10                	jmp    c0000c7a <dlfree+0xd4>
c0000c6a:	01 c8                	add    eax,ecx
c0000c6c:	89 c1                	mov    ecx,eax
c0000c6e:	83 c9 01             	or     ecx,0x1
c0000c71:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c74:	89 15 ac a2 02 c0    	mov    DWORD PTR ds:0xc002a2ac,edx
c0000c7a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c7f:	76 16                	jbe    c0000c97 <dlfree+0xf1>
c0000c81:	f6 05 80 a2 02 c0 02 	test   BYTE PTR ds:0xc002a280,0x2
c0000c88:	74 0d                	je     c0000c97 <dlfree+0xf1>
c0000c8a:	5b                   	pop    ebx
c0000c8b:	b8 80 a2 02 c0       	mov    eax,0xc002a280
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	e9 28 fe ff ff       	jmp    c0000abf <malloc_consolidate>
c0000c97:	5b                   	pop    ebx
c0000c98:	5e                   	pop    esi
c0000c99:	5f                   	pop    edi
c0000c9a:	c3                   	ret    

c0000c9b <sYSMALLOc>:
c0000c9b:	55                   	push   ebp
c0000c9c:	57                   	push   edi
c0000c9d:	56                   	push   esi
c0000c9e:	53                   	push   ebx
c0000c9f:	89 d3                	mov    ebx,edx
c0000ca1:	83 ec 2c             	sub    esp,0x2c
c0000ca4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ca8:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000cae:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000cb1:	8d 42 ff             	lea    eax,[edx-0x1]
c0000cb4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cb8:	74 1f                	je     c0000cd9 <sYSMALLOc+0x3e>
c0000cba:	89 d8                	mov    eax,ebx
c0000cbc:	e8 fe fd ff ff       	call   c0000abf <malloc_consolidate>
c0000cc1:	83 ec 0c             	sub    esp,0xc
c0000cc4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000cc8:	83 e8 07             	sub    eax,0x7
c0000ccb:	50                   	push   eax
c0000ccc:	e8 30 02 00 00       	call   c0000f01 <dlmalloc>
c0000cd1:	83 c4 10             	add    esp,0x10
c0000cd4:	e9 20 02 00 00       	jmp    c0000ef9 <sYSMALLOc+0x25e>
c0000cd9:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000cdc:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ce2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000cec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000cf0:	83 c0 10             	add    eax,0x10
c0000cf3:	01 c1                	add    ecx,eax
c0000cf5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cf9:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000d00:	74 04                	je     c0000d06 <sYSMALLOc+0x6b>
c0000d02:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000d06:	f7 da                	neg    edx
c0000d08:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000d0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000d10:	21 d1                	and    ecx,edx
c0000d12:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000d16:	7f 07                	jg     c0000d1f <sYSMALLOc+0x84>
c0000d18:	31 c0                	xor    eax,eax
c0000d1a:	e9 da 01 00 00       	jmp    c0000ef9 <sYSMALLOc+0x25e>
c0000d1f:	83 ec 0c             	sub    esp,0xc
c0000d22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d26:	e8 90 e2 00 00       	call   c000efbb <sbrk>
c0000d2b:	83 c4 10             	add    esp,0x10
c0000d2e:	89 c6                	mov    esi,eax
c0000d30:	83 f8 ff             	cmp    eax,0xffffffff
c0000d33:	74 e3                	je     c0000d18 <sYSMALLOc+0x7d>
c0000d35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d39:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d3d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d40:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d46:	39 f1                	cmp    ecx,esi
c0000d48:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d4e:	75 13                	jne    c0000d63 <sYSMALLOc+0xc8>
c0000d50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d54:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d58:	83 c8 01             	or     eax,0x1
c0000d5b:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d5e:	e9 3e 01 00 00       	jmp    c0000ea1 <sYSMALLOc+0x206>
c0000d63:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d69:	88 d0                	mov    al,dl
c0000d6b:	83 e0 01             	and    eax,0x1
c0000d6e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d73:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d77:	0f 95 c0             	setne  al
c0000d7a:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d7e:	39 f1                	cmp    ecx,esi
c0000d80:	76 12                	jbe    c0000d94 <sYSMALLOc+0xf9>
c0000d82:	84 c0                	test   al,al
c0000d84:	74 0e                	je     c0000d94 <sYSMALLOc+0xf9>
c0000d86:	83 e2 fe             	and    edx,0xfffffffe
c0000d89:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d8f:	e9 83 00 00 00       	jmp    c0000e17 <sYSMALLOc+0x17c>
c0000d94:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d99:	74 7c                	je     c0000e17 <sYSMALLOc+0x17c>
c0000d9b:	84 c0                	test   al,al
c0000d9d:	74 0c                	je     c0000dab <sYSMALLOc+0x110>
c0000d9f:	89 f0                	mov    eax,esi
c0000da1:	29 c8                	sub    eax,ecx
c0000da3:	01 e8                	add    eax,ebp
c0000da5:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000dab:	89 f2                	mov    edx,esi
c0000dad:	83 e2 07             	and    edx,0x7
c0000db0:	74 0c                	je     c0000dbe <sYSMALLOc+0x123>
c0000db2:	b8 08 00 00 00       	mov    eax,0x8
c0000db7:	29 d0                	sub    eax,edx
c0000db9:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000dbc:	eb 04                	jmp    c0000dc2 <sYSMALLOc+0x127>
c0000dbe:	89 f5                	mov    ebp,esi
c0000dc0:	31 c0                	xor    eax,eax
c0000dc2:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000dc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000dca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000dce:	01 c1                	add    ecx,eax
c0000dd0:	83 ec 0c             	sub    esp,0xc
c0000dd3:	01 f1                	add    ecx,esi
c0000dd5:	01 ca                	add    edx,ecx
c0000dd7:	29 c8                	sub    eax,ecx
c0000dd9:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ddd:	01 c2                	add    edx,eax
c0000ddf:	52                   	push   edx
c0000de0:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000de4:	e8 d2 e1 00 00       	call   c000efbb <sbrk>
c0000de9:	83 c4 10             	add    esp,0x10
c0000dec:	83 f8 ff             	cmp    eax,0xffffffff
c0000def:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000df3:	75 0f                	jne    c0000e04 <sYSMALLOc+0x169>
c0000df5:	83 ec 0c             	sub    esp,0xc
c0000df8:	6a 00                	push   0x0
c0000dfa:	e8 bc e1 00 00       	call   c000efbb <sbrk>
c0000dff:	83 c4 10             	add    esp,0x10
c0000e02:	eb 30                	jmp    c0000e34 <sYSMALLOc+0x199>
c0000e04:	39 c6                	cmp    esi,eax
c0000e06:	76 33                	jbe    c0000e3b <sYSMALLOc+0x1a0>
c0000e08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e0c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e13:	01 f0                	add    eax,esi
c0000e15:	eb 1d                	jmp    c0000e34 <sYSMALLOc+0x199>
c0000e17:	83 ec 0c             	sub    esp,0xc
c0000e1a:	89 f5                	mov    ebp,esi
c0000e1c:	6a 00                	push   0x0
c0000e1e:	e8 98 e1 00 00       	call   c000efbb <sbrk>
c0000e23:	89 c2                	mov    edx,eax
c0000e25:	29 f2                	sub    edx,esi
c0000e27:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000e2b:	83 c4 10             	add    esp,0x10
c0000e2e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e34:	31 d2                	xor    edx,edx
c0000e36:	83 f8 ff             	cmp    eax,0xffffffff
c0000e39:	74 66                	je     c0000ea1 <sYSMALLOc+0x206>
c0000e3b:	29 e8                	sub    eax,ebp
c0000e3d:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e40:	01 d0                	add    eax,edx
c0000e42:	83 c8 01             	or     eax,0x1
c0000e45:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e48:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e4e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e53:	74 4c                	je     c0000ea1 <sYSMALLOc+0x206>
c0000e55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e59:	83 e8 0c             	sub    eax,0xc
c0000e5c:	83 e0 f8             	and    eax,0xfffffff8
c0000e5f:	89 c2                	mov    edx,eax
c0000e61:	83 ca 01             	or     edx,0x1
c0000e64:	83 f8 0f             	cmp    eax,0xf
c0000e67:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e6a:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e72:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e7a:	76 25                	jbe    c0000ea1 <sYSMALLOc+0x206>
c0000e7c:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e82:	83 ec 0c             	sub    esp,0xc
c0000e85:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e8f:	83 c7 08             	add    edi,0x8
c0000e92:	57                   	push   edi
c0000e93:	e8 0e fd ff ff       	call   c0000ba6 <dlfree>
c0000e98:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e9e:	83 c4 10             	add    esp,0x10
c0000ea1:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000ea7:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000ead:	73 06                	jae    c0000eb5 <sYSMALLOc+0x21a>
c0000eaf:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000eb5:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000ebb:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000ec1:	73 06                	jae    c0000ec9 <sYSMALLOc+0x22e>
c0000ec3:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ec9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ecc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ecf:	83 e2 fc             	and    edx,0xfffffffc
c0000ed2:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ed6:	0f 82 3c fe ff ff    	jb     c0000d18 <sYSMALLOc+0x7d>
c0000edc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ee0:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ee3:	29 fa                	sub    edx,edi
c0000ee5:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ee8:	83 ca 01             	or     edx,0x1
c0000eeb:	89 fb                	mov    ebx,edi
c0000eed:	83 c0 08             	add    eax,0x8
c0000ef0:	83 cb 01             	or     ebx,0x1
c0000ef3:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ef6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000ef9:	83 c4 2c             	add    esp,0x2c
c0000efc:	5b                   	pop    ebx
c0000efd:	5e                   	pop    esi
c0000efe:	5f                   	pop    edi
c0000eff:	5d                   	pop    ebp
c0000f00:	c3                   	ret    

c0000f01 <dlmalloc>:
c0000f01:	55                   	push   ebp
c0000f02:	57                   	push   edi
c0000f03:	56                   	push   esi
c0000f04:	53                   	push   ebx
c0000f05:	83 ec 1c             	sub    esp,0x1c
c0000f08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f0c:	83 f8 df             	cmp    eax,0xffffffdf
c0000f0f:	0f 87 70 03 00 00    	ja     c0001285 <dlmalloc+0x384>
c0000f15:	83 c0 0b             	add    eax,0xb
c0000f18:	be 10 00 00 00       	mov    esi,0x10
c0000f1d:	83 f8 0f             	cmp    eax,0xf
c0000f20:	76 05                	jbe    c0000f27 <dlmalloc+0x26>
c0000f22:	83 e0 f8             	and    eax,0xfffffff8
c0000f25:	89 c6                	mov    esi,eax
c0000f27:	8b 3d 80 a2 02 c0    	mov    edi,DWORD PTR ds:0xc002a280
c0000f2d:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f33:	75 17                	jne    c0000f4c <dlmalloc+0x4b>
c0000f35:	85 ff                	test   edi,edi
c0000f37:	0f 85 05 03 00 00    	jne    c0001242 <dlmalloc+0x341>
c0000f3d:	b8 80 a2 02 c0       	mov    eax,0xc002a280
c0000f42:	e8 78 fb ff ff       	call   c0000abf <malloc_consolidate>
c0000f47:	e9 f6 02 00 00       	jmp    c0001242 <dlmalloc+0x341>
c0000f4c:	39 f7                	cmp    edi,esi
c0000f4e:	72 1f                	jb     c0000f6f <dlmalloc+0x6e>
c0000f50:	89 f2                	mov    edx,esi
c0000f52:	c1 ea 03             	shr    edx,0x3
c0000f55:	83 ea 02             	sub    edx,0x2
c0000f58:	8b 04 95 84 a2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5d7c]
c0000f5f:	85 c0                	test   eax,eax
c0000f61:	74 0c                	je     c0000f6f <dlmalloc+0x6e>
c0000f63:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f66:	89 0c 95 84 a2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5d7c],ecx
c0000f6d:	eb 30                	jmp    c0000f9f <dlmalloc+0x9e>
c0000f6f:	89 f0                	mov    eax,esi
c0000f71:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f77:	77 2e                	ja     c0000fa7 <dlmalloc+0xa6>
c0000f79:	c1 e8 03             	shr    eax,0x3
c0000f7c:	8d 14 c5 b4 a2 02 c0 	lea    edx,[eax*8-0x3ffd5d4c]
c0000f83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f87:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f8a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f8d:	39 c3                	cmp    ebx,eax
c0000f8f:	74 2e                	je     c0000fbf <dlmalloc+0xbe>
c0000f91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f94:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f99:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f9c:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f9f:	83 c0 08             	add    eax,0x8
c0000fa2:	e9 e0 02 00 00       	jmp    c0001287 <dlmalloc+0x386>
c0000fa7:	e8 8f fa ff ff       	call   c0000a3b <largebin_index>
c0000fac:	83 e7 02             	and    edi,0x2
c0000faf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fb3:	74 0a                	je     c0000fbf <dlmalloc+0xbe>
c0000fb5:	b8 80 a2 02 c0       	mov    eax,0xc002a280
c0000fba:	e8 00 fb ff ff       	call   c0000abf <malloc_consolidate>
c0000fbf:	8d 46 10             	lea    eax,[esi+0x10]
c0000fc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fc6:	8b 1d c0 a2 02 c0    	mov    ebx,DWORD PTR ds:0xc002a2c0
c0000fcc:	81 fb b4 a2 02 c0    	cmp    ebx,0xc002a2b4
c0000fd2:	0f 84 13 01 00 00    	je     c00010eb <dlmalloc+0x1ea>
c0000fd8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fdb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fde:	83 e7 fc             	and    edi,0xfffffffc
c0000fe1:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fe7:	77 4c                	ja     c0001035 <dlmalloc+0x134>
c0000fe9:	3d b4 a2 02 c0       	cmp    eax,0xc002a2b4
c0000fee:	75 45                	jne    c0001035 <dlmalloc+0x134>
c0000ff0:	39 1d b0 a2 02 c0    	cmp    DWORD PTR ds:0xc002a2b0,ebx
c0000ff6:	75 3d                	jne    c0001035 <dlmalloc+0x134>
c0000ff8:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000ffc:	73 37                	jae    c0001035 <dlmalloc+0x134>
c0000ffe:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001001:	89 fa                	mov    edx,edi
c0001003:	a3 bc a2 02 c0       	mov    ds:0xc002a2bc,eax
c0001008:	a3 c0 a2 02 c0       	mov    ds:0xc002a2c0,eax
c000100d:	a3 b0 a2 02 c0       	mov    ds:0xc002a2b0,eax
c0001012:	29 f2                	sub    edx,esi
c0001014:	c7 40 08 b4 a2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a2b4
c000101b:	c7 40 0c b4 a2 02 c0 	mov    DWORD PTR [eax+0xc],0xc002a2b4
c0001022:	83 ce 01             	or     esi,0x1
c0001025:	89 d1                	mov    ecx,edx
c0001027:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000102a:	83 c9 01             	or     ecx,0x1
c000102d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001030:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001033:	eb 15                	jmp    c000104a <dlmalloc+0x149>
c0001035:	a3 c0 a2 02 c0       	mov    ds:0xc002a2c0,eax
c000103a:	39 fe                	cmp    esi,edi
c000103c:	c7 40 08 b4 a2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a2b4
c0001043:	75 0d                	jne    c0001052 <dlmalloc+0x151>
c0001045:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000104a:	8d 43 08             	lea    eax,[ebx+0x8]
c000104d:	e9 35 02 00 00       	jmp    c0001287 <dlmalloc+0x386>
c0001052:	89 f8                	mov    eax,edi
c0001054:	81 ff ff 00 00 00    	cmp    edi,0xff
c000105a:	77 19                	ja     c0001075 <dlmalloc+0x174>
c000105c:	c1 e8 03             	shr    eax,0x3
c000105f:	8d 14 00             	lea    edx,[eax+eax*1]
c0001062:	83 c2 0d             	add    edx,0xd
c0001065:	8d 2c 95 78 a2 02 c0 	lea    ebp,[edx*4-0x3ffd5d88]
c000106c:	8b 14 95 80 a2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5d80]
c0001073:	eb 46                	jmp    c00010bb <dlmalloc+0x1ba>
c0001075:	e8 c1 f9 ff ff       	call   c0000a3b <largebin_index>
c000107a:	8d 14 00             	lea    edx,[eax+eax*1]
c000107d:	83 c2 0d             	add    edx,0xd
c0001080:	8d 0c 95 80 a2 02 c0 	lea    ecx,[edx*4-0x3ffd5d80]
c0001087:	8b 14 95 80 a2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5d80]
c000108e:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001091:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001095:	89 d5                	mov    ebp,edx
c0001097:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000109b:	74 1e                	je     c00010bb <dlmalloc+0x1ba>
c000109d:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00010a0:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00010a3:	77 12                	ja     c00010b7 <dlmalloc+0x1b6>
c00010a5:	83 cf 01             	or     edi,0x1
c00010a8:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010ab:	76 05                	jbe    c00010b2 <dlmalloc+0x1b1>
c00010ad:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010b0:	eb f6                	jmp    c00010a8 <dlmalloc+0x1a7>
c00010b2:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010b5:	eb 04                	jmp    c00010bb <dlmalloc+0x1ba>
c00010b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010bb:	89 c7                	mov    edi,eax
c00010bd:	88 c1                	mov    cl,al
c00010bf:	c1 ff 05             	sar    edi,0x5
c00010c2:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010c6:	bf 01 00 00 00       	mov    edi,0x1
c00010cb:	d3 e7                	shl    edi,cl
c00010cd:	89 f8                	mov    eax,edi
c00010cf:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010d3:	09 04 bd b4 a5 02 c0 	or     DWORD PTR [edi*4-0x3ffd5a4c],eax
c00010da:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010dd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010e0:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010e3:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010e6:	e9 db fe ff ff       	jmp    c0000fc6 <dlmalloc+0xc5>
c00010eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010f1:	76 78                	jbe    c000116b <dlmalloc+0x26a>
c00010f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010f7:	8d 04 c5 b4 a2 02 c0 	lea    eax,[eax*8-0x3ffd5d4c]
c00010fe:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001101:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001104:	39 ca                	cmp    edx,ecx
c0001106:	74 63                	je     c000116b <dlmalloc+0x26a>
c0001108:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000110b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000110e:	83 e3 fc             	and    ebx,0xfffffffc
c0001111:	39 de                	cmp    esi,ebx
c0001113:	77 52                	ja     c0001167 <dlmalloc+0x266>
c0001115:	89 df                	mov    edi,ebx
c0001117:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000111a:	29 f7                	sub    edi,esi
c000111c:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000111f:	01 d3                	add    ebx,edx
c0001121:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001124:	83 ff 0f             	cmp    edi,0xf
c0001127:	8d 42 08             	lea    eax,[edx+0x8]
c000112a:	77 09                	ja     c0001135 <dlmalloc+0x234>
c000112c:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001130:	e9 52 01 00 00       	jmp    c0001287 <dlmalloc+0x386>
c0001135:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001138:	83 ce 01             	or     esi,0x1
c000113b:	89 0d bc a2 02 c0    	mov    DWORD PTR ds:0xc002a2bc,ecx
c0001141:	89 0d c0 a2 02 c0    	mov    DWORD PTR ds:0xc002a2c0,ecx
c0001147:	c7 41 08 b4 a2 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002a2b4
c000114e:	c7 41 0c b4 a2 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002a2b4
c0001155:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001158:	89 fa                	mov    edx,edi
c000115a:	83 ca 01             	or     edx,0x1
c000115d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001160:	89 3b                	mov    DWORD PTR [ebx],edi
c0001162:	e9 20 01 00 00       	jmp    c0001287 <dlmalloc+0x386>
c0001167:	89 c2                	mov    edx,eax
c0001169:	eb 99                	jmp    c0001104 <dlmalloc+0x203>
c000116b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000116f:	b8 01 00 00 00       	mov    eax,0x1
c0001174:	41                   	inc    ecx
c0001175:	89 cb                	mov    ebx,ecx
c0001177:	8d 14 cd ac a2 02 c0 	lea    edx,[ecx*8-0x3ffd5d54]
c000117e:	c1 eb 05             	shr    ebx,0x5
c0001181:	d3 e0                	shl    eax,cl
c0001183:	8b 3c 9d b4 a5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd5a4c]
c000118a:	39 f8                	cmp    eax,edi
c000118c:	77 04                	ja     c0001192 <dlmalloc+0x291>
c000118e:	85 c0                	test   eax,eax
c0001190:	75 26                	jne    c00011b8 <dlmalloc+0x2b7>
c0001192:	43                   	inc    ebx
c0001193:	83 fb 02             	cmp    ebx,0x2
c0001196:	0f 87 a6 00 00 00    	ja     c0001242 <dlmalloc+0x341>
c000119c:	8b 3c 9d b4 a5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd5a4c]
c00011a3:	85 ff                	test   edi,edi
c00011a5:	74 eb                	je     c0001192 <dlmalloc+0x291>
c00011a7:	89 d8                	mov    eax,ebx
c00011a9:	c1 e0 06             	shl    eax,0x6
c00011ac:	8d 14 85 ac a2 02 c0 	lea    edx,[eax*4-0x3ffd5d54]
c00011b3:	b8 01 00 00 00       	mov    eax,0x1
c00011b8:	85 f8                	test   eax,edi
c00011ba:	75 07                	jne    c00011c3 <dlmalloc+0x2c2>
c00011bc:	83 c2 08             	add    edx,0x8
c00011bf:	01 c0                	add    eax,eax
c00011c1:	eb f5                	jmp    c00011b8 <dlmalloc+0x2b7>
c00011c3:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011c6:	39 ca                	cmp    edx,ecx
c00011c8:	75 14                	jne    c00011de <dlmalloc+0x2dd>
c00011ca:	89 c1                	mov    ecx,eax
c00011cc:	83 c2 08             	add    edx,0x8
c00011cf:	f7 d1                	not    ecx
c00011d1:	01 c0                	add    eax,eax
c00011d3:	21 cf                	and    edi,ecx
c00011d5:	89 3c 9d b4 a5 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd5a4c],edi
c00011dc:	eb ac                	jmp    c000118a <dlmalloc+0x289>
c00011de:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011e1:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011e4:	83 e0 fc             	and    eax,0xfffffffc
c00011e7:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011ea:	89 c3                	mov    ebx,eax
c00011ec:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011ef:	29 f3                	sub    ebx,esi
c00011f1:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011f4:	83 fb 0f             	cmp    ebx,0xf
c00011f7:	8d 41 08             	lea    eax,[ecx+0x8]
c00011fa:	77 09                	ja     c0001205 <dlmalloc+0x304>
c00011fc:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001200:	e9 82 00 00 00       	jmp    c0001287 <dlmalloc+0x386>
c0001205:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001208:	81 fe ff 00 00 00    	cmp    esi,0xff
c000120e:	89 3d bc a2 02 c0    	mov    DWORD PTR ds:0xc002a2bc,edi
c0001214:	89 3d c0 a2 02 c0    	mov    DWORD PTR ds:0xc002a2c0,edi
c000121a:	c7 47 08 b4 a2 02 c0 	mov    DWORD PTR [edi+0x8],0xc002a2b4
c0001221:	c7 47 0c b4 a2 02 c0 	mov    DWORD PTR [edi+0xc],0xc002a2b4
c0001228:	77 06                	ja     c0001230 <dlmalloc+0x32f>
c000122a:	89 3d b0 a2 02 c0    	mov    DWORD PTR ds:0xc002a2b0,edi
c0001230:	83 ce 01             	or     esi,0x1
c0001233:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001236:	89 d9                	mov    ecx,ebx
c0001238:	83 c9 01             	or     ecx,0x1
c000123b:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000123e:	89 1a                	mov    DWORD PTR [edx],ebx
c0001240:	eb 45                	jmp    c0001287 <dlmalloc+0x386>
c0001242:	a1 ac a2 02 c0       	mov    eax,ds:0xc002a2ac
c0001247:	8d 4e 10             	lea    ecx,[esi+0x10]
c000124a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000124d:	83 e2 fc             	and    edx,0xfffffffc
c0001250:	39 d1                	cmp    ecx,edx
c0001252:	77 1e                	ja     c0001272 <dlmalloc+0x371>
c0001254:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001257:	89 f3                	mov    ebx,esi
c0001259:	89 0d ac a2 02 c0    	mov    DWORD PTR ds:0xc002a2ac,ecx
c000125f:	83 cb 01             	or     ebx,0x1
c0001262:	29 f2                	sub    edx,esi
c0001264:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001267:	83 ca 01             	or     edx,0x1
c000126a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000126d:	e9 2d fd ff ff       	jmp    c0000f9f <dlmalloc+0x9e>
c0001272:	83 c4 1c             	add    esp,0x1c
c0001275:	89 f0                	mov    eax,esi
c0001277:	5b                   	pop    ebx
c0001278:	ba 80 a2 02 c0       	mov    edx,0xc002a280
c000127d:	5e                   	pop    esi
c000127e:	5f                   	pop    edi
c000127f:	5d                   	pop    ebp
c0001280:	e9 16 fa ff ff       	jmp    c0000c9b <sYSMALLOc>
c0001285:	31 c0                	xor    eax,eax
c0001287:	83 c4 1c             	add    esp,0x1c
c000128a:	5b                   	pop    ebx
c000128b:	5e                   	pop    esi
c000128c:	5f                   	pop    edi
c000128d:	5d                   	pop    ebp
c000128e:	c3                   	ret    

c000128f <iALLOc>:
c000128f:	55                   	push   ebp
c0001290:	89 c5                	mov    ebp,eax
c0001292:	57                   	push   edi
c0001293:	56                   	push   esi
c0001294:	53                   	push   ebx
c0001295:	83 ec 2c             	sub    esp,0x2c
c0001298:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000129c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00012a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012a4:	83 3d 80 a2 02 c0 00 	cmp    DWORD PTR ds:0xc002a280,0x0
c00012ab:	75 12                	jne    c00012bf <iALLOc+0x30>
c00012ad:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012b1:	b8 80 a2 02 c0       	mov    eax,0xc002a280
c00012b6:	e8 04 f8 ff ff       	call   c0000abf <malloc_consolidate>
c00012bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012bf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012c4:	74 12                	je     c00012d8 <iALLOc+0x49>
c00012c6:	85 ed                	test   ebp,ebp
c00012c8:	0f 84 64 01 00 00    	je     c0001432 <iALLOc+0x1a3>
c00012ce:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012d6:	eb 33                	jmp    c000130b <iALLOc+0x7c>
c00012d8:	85 ed                	test   ebp,ebp
c00012da:	75 14                	jne    c00012f0 <iALLOc+0x61>
c00012dc:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012e4:	83 c4 2c             	add    esp,0x2c
c00012e7:	5b                   	pop    ebx
c00012e8:	5e                   	pop    esi
c00012e9:	5f                   	pop    edi
c00012ea:	5d                   	pop    ebp
c00012eb:	e9 11 fc ff ff       	jmp    c0000f01 <dlmalloc>
c00012f0:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012f7:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012ff:	83 f8 0f             	cmp    eax,0xf
c0001302:	76 07                	jbe    c000130b <iALLOc+0x7c>
c0001304:	83 e0 f8             	and    eax,0xfffffff8
c0001307:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000130b:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001310:	75 09                	jne    c000131b <iALLOc+0x8c>
c0001312:	89 d0                	mov    eax,edx
c0001314:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001317:	31 f6                	xor    esi,esi
c0001319:	eb 3b                	jmp    c0001356 <iALLOc+0xc7>
c000131b:	8b 02                	mov    eax,DWORD PTR [edx]
c000131d:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001325:	83 c0 0b             	add    eax,0xb
c0001328:	83 f8 0f             	cmp    eax,0xf
c000132b:	76 07                	jbe    c0001334 <iALLOc+0xa5>
c000132d:	83 e0 f8             	and    eax,0xfffffff8
c0001330:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001334:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001338:	0f af f5             	imul   esi,ebp
c000133b:	eb 25                	jmp    c0001362 <iALLOc+0xd3>
c000133d:	8b 18                	mov    ebx,DWORD PTR [eax]
c000133f:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001342:	bb 10 00 00 00       	mov    ebx,0x10
c0001347:	83 f9 0f             	cmp    ecx,0xf
c000134a:	76 05                	jbe    c0001351 <iALLOc+0xc2>
c000134c:	83 e1 f8             	and    ecx,0xfffffff8
c000134f:	89 cb                	mov    ebx,ecx
c0001351:	01 de                	add    esi,ebx
c0001353:	83 c0 04             	add    eax,0x4
c0001356:	39 c7                	cmp    edi,eax
c0001358:	75 e3                	jne    c000133d <iALLOc+0xae>
c000135a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001362:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001366:	8b 1d d4 a5 02 c0    	mov    ebx,DWORD PTR ds:0xc002a5d4
c000136c:	83 ec 0c             	sub    esp,0xc
c000136f:	c7 05 d4 a5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a5d4,0x0
c0001379:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000137d:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001381:	50                   	push   eax
c0001382:	e8 7a fb ff ff       	call   c0000f01 <dlmalloc>
c0001387:	83 c4 10             	add    esp,0x10
c000138a:	89 1d d4 a5 02 c0    	mov    DWORD PTR ds:0xc002a5d4,ebx
c0001390:	85 c0                	test   eax,eax
c0001392:	0f 84 92 00 00 00    	je     c000142a <iALLOc+0x19b>
c0001398:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000139b:	8d 78 f8             	lea    edi,[eax-0x8]
c000139e:	83 e3 fc             	and    ebx,0xfffffffc
c00013a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00013a5:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013aa:	74 1e                	je     c00013ca <iALLOc+0x13b>
c00013ac:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013b0:	89 d9                	mov    ecx,ebx
c00013b2:	52                   	push   edx
c00013b3:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013b7:	83 e9 04             	sub    ecx,0x4
c00013ba:	51                   	push   ecx
c00013bb:	6a 00                	push   0x0
c00013bd:	50                   	push   eax
c00013be:	e8 02 f3 ff ff       	call   c00006c5 <memset>
c00013c3:	83 c4 10             	add    esp,0x10
c00013c6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013ca:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013cf:	75 14                	jne    c00013e5 <iALLOc+0x156>
c00013d1:	8d 04 37             	lea    eax,[edi+esi*1]
c00013d4:	29 f3                	sub    ebx,esi
c00013d6:	8d 48 08             	lea    ecx,[eax+0x8]
c00013d9:	83 cb 01             	or     ebx,0x1
c00013dc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013e0:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013e3:	89 f3                	mov    ebx,esi
c00013e5:	31 c0                	xor    eax,eax
c00013e7:	4d                   	dec    ebp
c00013e8:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013eb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013ef:	39 c5                	cmp    ebp,eax
c00013f1:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013f4:	74 2c                	je     c0001422 <iALLOc+0x193>
c00013f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013fa:	85 c9                	test   ecx,ecx
c00013fc:	75 15                	jne    c0001413 <iALLOc+0x184>
c00013fe:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001401:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001404:	b9 10 00 00 00       	mov    ecx,0x10
c0001409:	83 fe 0f             	cmp    esi,0xf
c000140c:	76 05                	jbe    c0001413 <iALLOc+0x184>
c000140e:	83 e6 f8             	and    esi,0xfffffff8
c0001411:	89 f1                	mov    ecx,esi
c0001413:	89 ce                	mov    esi,ecx
c0001415:	29 cb                	sub    ebx,ecx
c0001417:	83 ce 01             	or     esi,0x1
c000141a:	40                   	inc    eax
c000141b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000141e:	01 cf                	add    edi,ecx
c0001420:	eb c6                	jmp    c00013e8 <iALLOc+0x159>
c0001422:	83 cb 01             	or     ebx,0x1
c0001425:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001428:	eb 08                	jmp    c0001432 <iALLOc+0x1a3>
c000142a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001432:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001436:	83 c4 2c             	add    esp,0x2c
c0001439:	5b                   	pop    ebx
c000143a:	5e                   	pop    esi
c000143b:	5f                   	pop    edi
c000143c:	5d                   	pop    ebp
c000143d:	c3                   	ret    

c000143e <dlrealloc>:
c000143e:	55                   	push   ebp
c000143f:	57                   	push   edi
c0001440:	56                   	push   esi
c0001441:	53                   	push   ebx
c0001442:	83 ec 1c             	sub    esp,0x1c
c0001445:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001449:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000144d:	85 db                	test   ebx,ebx
c000144f:	75 10                	jne    c0001461 <dlrealloc+0x23>
c0001451:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	5b                   	pop    ebx
c0001459:	5e                   	pop    esi
c000145a:	5f                   	pop    edi
c000145b:	5d                   	pop    ebp
c000145c:	e9 a0 fa ff ff       	jmp    c0000f01 <dlmalloc>
c0001461:	83 f8 df             	cmp    eax,0xffffffdf
c0001464:	76 07                	jbe    c000146d <dlrealloc+0x2f>
c0001466:	31 db                	xor    ebx,ebx
c0001468:	e9 7c 01 00 00       	jmp    c00015e9 <dlrealloc+0x1ab>
c000146d:	83 c0 0b             	add    eax,0xb
c0001470:	bf 10 00 00 00       	mov    edi,0x10
c0001475:	83 f8 0f             	cmp    eax,0xf
c0001478:	76 05                	jbe    c000147f <dlrealloc+0x41>
c000147a:	83 e0 f8             	and    eax,0xfffffff8
c000147d:	89 c7                	mov    edi,eax
c000147f:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001482:	8d 6b f8             	lea    ebp,[ebx-0x8]
c0001485:	89 c6                	mov    esi,eax
c0001487:	83 e6 fc             	and    esi,0xfffffffc
c000148a:	a8 02                	test   al,0x2
c000148c:	75 d8                	jne    c0001466 <dlrealloc+0x28>
c000148e:	39 f7                	cmp    edi,esi
c0001490:	0f 86 15 01 00 00    	jbe    c00015ab <dlrealloc+0x16d>
c0001496:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c000149a:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000149d:	39 15 ac a2 02 c0    	cmp    DWORD PTR ds:0xc002a2ac,edx
c00014a3:	75 33                	jne    c00014d8 <dlrealloc+0x9a>
c00014a5:	83 e1 fc             	and    ecx,0xfffffffc
c00014a8:	01 f1                	add    ecx,esi
c00014aa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014ae:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014b1:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014b5:	77 49                	ja     c0001500 <dlrealloc+0xc2>
c00014b7:	01 fd                	add    ebp,edi
c00014b9:	83 e0 01             	and    eax,0x1
c00014bc:	09 f8                	or     eax,edi
c00014be:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014c1:	89 2d ac a2 02 c0    	mov    DWORD PTR ds:0xc002a2ac,ebp
c00014c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014cb:	29 f8                	sub    eax,edi
c00014cd:	83 c8 01             	or     eax,0x1
c00014d0:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014d3:	e9 11 01 00 00       	jmp    c00015e9 <dlrealloc+0x1ab>
c00014d8:	89 c8                	mov    eax,ecx
c00014da:	83 e0 fe             	and    eax,0xfffffffe
c00014dd:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014e2:	75 1c                	jne    c0001500 <dlrealloc+0xc2>
c00014e4:	83 e1 fc             	and    ecx,0xfffffffc
c00014e7:	01 f1                	add    ecx,esi
c00014e9:	39 cf                	cmp    edi,ecx
c00014eb:	77 13                	ja     c0001500 <dlrealloc+0xc2>
c00014ed:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014f0:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014f3:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014f6:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014f9:	89 ce                	mov    esi,ecx
c00014fb:	e9 ab 00 00 00       	jmp    c00015ab <dlrealloc+0x16d>
c0001500:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001504:	8d 47 f9             	lea    eax,[edi-0x7]
c0001507:	83 ec 0c             	sub    esp,0xc
c000150a:	50                   	push   eax
c000150b:	e8 f1 f9 ff ff       	call   c0000f01 <dlmalloc>
c0001510:	83 c4 10             	add    esp,0x10
c0001513:	89 c1                	mov    ecx,eax
c0001515:	85 c0                	test   eax,eax
c0001517:	0f 84 49 ff ff ff    	je     c0001466 <dlrealloc+0x28>
c000151d:	8d 40 f8             	lea    eax,[eax-0x8]
c0001520:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001524:	39 c2                	cmp    edx,eax
c0001526:	75 0a                	jne    c0001532 <dlrealloc+0xf4>
c0001528:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000152b:	83 e0 fc             	and    eax,0xfffffffc
c000152e:	01 c6                	add    esi,eax
c0001530:	eb 79                	jmp    c00015ab <dlrealloc+0x16d>
c0001532:	83 ee 04             	sub    esi,0x4
c0001535:	83 fe 27             	cmp    esi,0x27
c0001538:	76 16                	jbe    c0001550 <dlrealloc+0x112>
c000153a:	50                   	push   eax
c000153b:	56                   	push   esi
c000153c:	53                   	push   ebx
c000153d:	51                   	push   ecx
c000153e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001542:	e8 48 f1 ff ff       	call   c000068f <memcpy>
c0001547:	83 c4 10             	add    esp,0x10
c000154a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000154e:	eb 43                	jmp    c0001593 <dlrealloc+0x155>
c0001550:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001552:	83 fe 13             	cmp    esi,0x13
c0001555:	89 01                	mov    DWORD PTR [ecx],eax
c0001557:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000155a:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000155d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001560:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001563:	76 2e                	jbe    c0001593 <dlrealloc+0x155>
c0001565:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001568:	83 fe 1b             	cmp    esi,0x1b
c000156b:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000156e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001571:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001574:	76 1d                	jbe    c0001593 <dlrealloc+0x155>
c0001576:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001579:	83 fe 23             	cmp    esi,0x23
c000157c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000157f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001582:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c0001585:	76 0c                	jbe    c0001593 <dlrealloc+0x155>
c0001587:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000158a:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c000158d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001590:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001593:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001597:	83 ec 0c             	sub    esp,0xc
c000159a:	53                   	push   ebx
c000159b:	e8 06 f6 ff ff       	call   c0000ba6 <dlfree>
c00015a0:	83 c4 10             	add    esp,0x10
c00015a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015a7:	89 cb                	mov    ebx,ecx
c00015a9:	eb 3e                	jmp    c00015e9 <dlrealloc+0x1ab>
c00015ab:	89 f2                	mov    edx,esi
c00015ad:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015b0:	29 fa                	sub    edx,edi
c00015b2:	83 e1 01             	and    ecx,0x1
c00015b5:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015b9:	83 fa 0f             	cmp    edx,0xf
c00015bc:	77 0b                	ja     c00015c9 <dlrealloc+0x18b>
c00015be:	09 ce                	or     esi,ecx
c00015c0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015c3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015c7:	eb 20                	jmp    c00015e9 <dlrealloc+0x1ab>
c00015c9:	01 fd                	add    ebp,edi
c00015cb:	83 ec 0c             	sub    esp,0xc
c00015ce:	09 cf                	or     edi,ecx
c00015d0:	83 ca 01             	or     edx,0x1
c00015d3:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015d6:	83 c5 08             	add    ebp,0x8
c00015d9:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015dc:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015e0:	55                   	push   ebp
c00015e1:	e8 c0 f5 ff ff       	call   c0000ba6 <dlfree>
c00015e6:	83 c4 10             	add    esp,0x10
c00015e9:	83 c4 1c             	add    esp,0x1c
c00015ec:	89 d8                	mov    eax,ebx
c00015ee:	5b                   	pop    ebx
c00015ef:	5e                   	pop    esi
c00015f0:	5f                   	pop    edi
c00015f1:	5d                   	pop    ebp
c00015f2:	c3                   	ret    

c00015f3 <dlmemalign>:
c00015f3:	55                   	push   ebp
c00015f4:	57                   	push   edi
c00015f5:	56                   	push   esi
c00015f6:	53                   	push   ebx
c00015f7:	83 ec 0c             	sub    esp,0xc
c00015fa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001602:	83 fa 08             	cmp    edx,0x8
c0001605:	77 10                	ja     c0001617 <dlmemalign+0x24>
c0001607:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000160b:	83 c4 0c             	add    esp,0xc
c000160e:	5b                   	pop    ebx
c000160f:	5e                   	pop    esi
c0001610:	5f                   	pop    edi
c0001611:	5d                   	pop    ebp
c0001612:	e9 ea f8 ff ff       	jmp    c0000f01 <dlmalloc>
c0001617:	bf 10 00 00 00       	mov    edi,0x10
c000161c:	83 fa 0f             	cmp    edx,0xf
c000161f:	76 13                	jbe    c0001634 <dlmemalign+0x41>
c0001621:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001624:	85 d1                	test   ecx,edx
c0001626:	75 04                	jne    c000162c <dlmemalign+0x39>
c0001628:	89 d7                	mov    edi,edx
c000162a:	eb 08                	jmp    c0001634 <dlmemalign+0x41>
c000162c:	39 d7                	cmp    edi,edx
c000162e:	73 04                	jae    c0001634 <dlmemalign+0x41>
c0001630:	01 ff                	add    edi,edi
c0001632:	eb f8                	jmp    c000162c <dlmemalign+0x39>
c0001634:	83 f8 df             	cmp    eax,0xffffffdf
c0001637:	76 07                	jbe    c0001640 <dlmemalign+0x4d>
c0001639:	31 c0                	xor    eax,eax
c000163b:	e9 ce 00 00 00       	jmp    c000170e <dlmemalign+0x11b>
c0001640:	83 c0 0b             	add    eax,0xb
c0001643:	bd 10 00 00 00       	mov    ebp,0x10
c0001648:	83 f8 0f             	cmp    eax,0xf
c000164b:	76 05                	jbe    c0001652 <dlmemalign+0x5f>
c000164d:	83 e0 f8             	and    eax,0xfffffff8
c0001650:	89 c5                	mov    ebp,eax
c0001652:	83 ec 0c             	sub    esp,0xc
c0001655:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001659:	50                   	push   eax
c000165a:	e8 a2 f8 ff ff       	call   c0000f01 <dlmalloc>
c000165f:	83 c4 10             	add    esp,0x10
c0001662:	89 c1                	mov    ecx,eax
c0001664:	85 c0                	test   eax,eax
c0001666:	74 d1                	je     c0001639 <dlmemalign+0x46>
c0001668:	31 d2                	xor    edx,edx
c000166a:	8d 70 f8             	lea    esi,[eax-0x8]
c000166d:	f7 f7                	div    edi
c000166f:	85 d2                	test   edx,edx
c0001671:	74 62                	je     c00016d5 <dlmemalign+0xe2>
c0001673:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001677:	89 f8                	mov    eax,edi
c0001679:	f7 d8                	neg    eax
c000167b:	21 c3                	and    ebx,eax
c000167d:	83 eb 08             	sub    ebx,0x8
c0001680:	89 d8                	mov    eax,ebx
c0001682:	29 f0                	sub    eax,esi
c0001684:	83 f8 0f             	cmp    eax,0xf
c0001687:	77 02                	ja     c000168b <dlmemalign+0x98>
c0001689:	01 fb                	add    ebx,edi
c000168b:	89 d8                	mov    eax,ebx
c000168d:	29 f0                	sub    eax,esi
c000168f:	89 c6                	mov    esi,eax
c0001691:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001694:	89 c2                	mov    edx,eax
c0001696:	83 e2 fc             	and    edx,0xfffffffc
c0001699:	29 f2                	sub    edx,esi
c000169b:	a8 02                	test   al,0x2
c000169d:	74 10                	je     c00016af <dlmemalign+0xbc>
c000169f:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00016a2:	83 ca 02             	or     edx,0x2
c00016a5:	8d 43 08             	lea    eax,[ebx+0x8]
c00016a8:	89 33                	mov    DWORD PTR [ebx],esi
c00016aa:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016ad:	eb 5f                	jmp    c000170e <dlmemalign+0x11b>
c00016af:	83 ec 0c             	sub    esp,0xc
c00016b2:	89 d0                	mov    eax,edx
c00016b4:	83 c8 01             	or     eax,0x1
c00016b7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016ba:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016bf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016c2:	83 e0 01             	and    eax,0x1
c00016c5:	09 f0                	or     eax,esi
c00016c7:	89 de                	mov    esi,ebx
c00016c9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016cc:	51                   	push   ecx
c00016cd:	e8 d4 f4 ff ff       	call   c0000ba6 <dlfree>
c00016d2:	83 c4 10             	add    esp,0x10
c00016d5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016d8:	a8 02                	test   al,0x2
c00016da:	75 2f                	jne    c000170b <dlmemalign+0x118>
c00016dc:	83 e0 fc             	and    eax,0xfffffffc
c00016df:	8d 55 10             	lea    edx,[ebp+0x10]
c00016e2:	39 c2                	cmp    edx,eax
c00016e4:	73 25                	jae    c000170b <dlmemalign+0x118>
c00016e6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016e9:	83 ec 0c             	sub    esp,0xc
c00016ec:	29 e8                	sub    eax,ebp
c00016ee:	83 c2 08             	add    edx,0x8
c00016f1:	83 c8 01             	or     eax,0x1
c00016f4:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016f7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016fa:	83 e0 01             	and    eax,0x1
c00016fd:	09 c5                	or     ebp,eax
c00016ff:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001702:	52                   	push   edx
c0001703:	e8 9e f4 ff ff       	call   c0000ba6 <dlfree>
c0001708:	83 c4 10             	add    esp,0x10
c000170b:	8d 46 08             	lea    eax,[esi+0x8]
c000170e:	83 c4 0c             	add    esp,0xc
c0001711:	5b                   	pop    ebx
c0001712:	5e                   	pop    esi
c0001713:	5f                   	pop    edi
c0001714:	5d                   	pop    ebp
c0001715:	c3                   	ret    

c0001716 <dlcalloc>:
c0001716:	53                   	push   ebx
c0001717:	83 ec 14             	sub    esp,0x14
c000171a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000171e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001723:	50                   	push   eax
c0001724:	e8 d8 f7 ff ff       	call   c0000f01 <dlmalloc>
c0001729:	83 c4 10             	add    esp,0x10
c000172c:	89 c3                	mov    ebx,eax
c000172e:	85 c0                	test   eax,eax
c0001730:	74 77                	je     c00017a9 <dlcalloc+0x93>
c0001732:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001735:	89 d0                	mov    eax,edx
c0001737:	83 e0 fc             	and    eax,0xfffffffc
c000173a:	80 e2 02             	and    dl,0x2
c000173d:	75 5a                	jne    c0001799 <dlcalloc+0x83>
c000173f:	83 e8 04             	sub    eax,0x4
c0001742:	83 f8 27             	cmp    eax,0x27
c0001745:	76 03                	jbe    c000174a <dlcalloc+0x34>
c0001747:	51                   	push   ecx
c0001748:	eb 53                	jmp    c000179d <dlcalloc+0x87>
c000174a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001750:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001757:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000175e:	83 f8 13             	cmp    eax,0x13
c0001761:	76 46                	jbe    c00017a9 <dlcalloc+0x93>
c0001763:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000176a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001771:	83 f8 1b             	cmp    eax,0x1b
c0001774:	76 33                	jbe    c00017a9 <dlcalloc+0x93>
c0001776:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000177d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001784:	83 f8 23             	cmp    eax,0x23
c0001787:	76 20                	jbe    c00017a9 <dlcalloc+0x93>
c0001789:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001790:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001797:	eb 10                	jmp    c00017a9 <dlcalloc+0x93>
c0001799:	83 e8 08             	sub    eax,0x8
c000179c:	52                   	push   edx
c000179d:	50                   	push   eax
c000179e:	6a 00                	push   0x0
c00017a0:	53                   	push   ebx
c00017a1:	e8 1f ef ff ff       	call   c00006c5 <memset>
c00017a6:	83 c4 10             	add    esp,0x10
c00017a9:	89 d8                	mov    eax,ebx
c00017ab:	83 c4 08             	add    esp,0x8
c00017ae:	5b                   	pop    ebx
c00017af:	c3                   	ret    

c00017b0 <dlcfree>:
c00017b0:	e9 f1 f3 ff ff       	jmp    c0000ba6 <dlfree>

c00017b5 <dlindependent_calloc>:
c00017b5:	83 ec 28             	sub    esp,0x28
c00017b8:	b9 03 00 00 00       	mov    ecx,0x3
c00017bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017c9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017d1:	e8 b9 fa ff ff       	call   c000128f <iALLOc>
c00017d6:	83 c4 2c             	add    esp,0x2c
c00017d9:	c3                   	ret    

c00017da <dlindependent_comalloc>:
c00017da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017e2:	31 c9                	xor    ecx,ecx
c00017e4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017ec:	e9 9e fa ff ff       	jmp    c000128f <iALLOc>

c00017f1 <dlvalloc>:
c00017f1:	83 ec 0c             	sub    esp,0xc
c00017f4:	83 3d 80 a2 02 c0 00 	cmp    DWORD PTR ds:0xc002a280,0x0
c00017fb:	75 0a                	jne    c0001807 <dlvalloc+0x16>
c00017fd:	b8 80 a2 02 c0       	mov    eax,0xc002a280
c0001802:	e8 b8 f2 ff ff       	call   c0000abf <malloc_consolidate>
c0001807:	50                   	push   eax
c0001808:	50                   	push   eax
c0001809:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000180d:	ff 35 dc a5 02 c0    	push   DWORD PTR ds:0xc002a5dc
c0001813:	e8 db fd ff ff       	call   c00015f3 <dlmemalign>
c0001818:	83 c4 1c             	add    esp,0x1c
c000181b:	c3                   	ret    

c000181c <dlpvalloc>:
c000181c:	83 ec 0c             	sub    esp,0xc
c000181f:	83 3d 80 a2 02 c0 00 	cmp    DWORD PTR ds:0xc002a280,0x0
c0001826:	75 0a                	jne    c0001832 <dlpvalloc+0x16>
c0001828:	b8 80 a2 02 c0       	mov    eax,0xc002a280
c000182d:	e8 8d f2 ff ff       	call   c0000abf <malloc_consolidate>
c0001832:	a1 dc a5 02 c0       	mov    eax,ds:0xc002a5dc
c0001837:	89 c1                	mov    ecx,eax
c0001839:	52                   	push   edx
c000183a:	f7 d9                	neg    ecx
c000183c:	52                   	push   edx
c000183d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001841:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001845:	21 ca                	and    edx,ecx
c0001847:	52                   	push   edx
c0001848:	50                   	push   eax
c0001849:	e8 a5 fd ff ff       	call   c00015f3 <dlmemalign>
c000184e:	83 c4 1c             	add    esp,0x1c
c0001851:	c3                   	ret    

c0001852 <dlmalloc_trim>:
c0001852:	b8 80 a2 02 c0       	mov    eax,0xc002a280
c0001857:	e8 63 f2 ff ff       	call   c0000abf <malloc_consolidate>
c000185c:	31 c0                	xor    eax,eax
c000185e:	c3                   	ret    

c000185f <dlmalloc_usable_size>:
c000185f:	53                   	push   ebx
c0001860:	31 c0                	xor    eax,eax
c0001862:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001866:	85 c9                	test   ecx,ecx
c0001868:	74 24                	je     c000188e <dlmalloc_usable_size+0x2f>
c000186a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000186d:	f6 c2 02             	test   dl,0x2
c0001870:	74 08                	je     c000187a <dlmalloc_usable_size+0x1b>
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	8d 42 f8             	lea    eax,[edx-0x8]
c0001878:	eb 14                	jmp    c000188e <dlmalloc_usable_size+0x2f>
c000187a:	89 d3                	mov    ebx,edx
c000187c:	31 c0                	xor    eax,eax
c000187e:	83 e3 fe             	and    ebx,0xfffffffe
c0001881:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001886:	74 06                	je     c000188e <dlmalloc_usable_size+0x2f>
c0001888:	83 e2 fc             	and    edx,0xfffffffc
c000188b:	8d 42 fc             	lea    eax,[edx-0x4]
c000188e:	5b                   	pop    ebx
c000188f:	c3                   	ret    

c0001890 <dlmallinfo>:
c0001890:	55                   	push   ebp
c0001891:	57                   	push   edi
c0001892:	56                   	push   esi
c0001893:	53                   	push   ebx
c0001894:	83 ec 08             	sub    esp,0x8
c0001897:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000189b:	83 3d ac a2 02 c0 00 	cmp    DWORD PTR ds:0xc002a2ac,0x0
c00018a2:	75 0a                	jne    c00018ae <dlmallinfo+0x1e>
c00018a4:	b8 80 a2 02 c0       	mov    eax,0xc002a280
c00018a9:	e8 11 f2 ff ff       	call   c0000abf <malloc_consolidate>
c00018ae:	a1 ac a2 02 c0       	mov    eax,ds:0xc002a2ac
c00018b3:	31 ed                	xor    ebp,ebp
c00018b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018b8:	31 c9                	xor    ecx,ecx
c00018ba:	83 e0 fc             	and    eax,0xfffffffc
c00018bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018c1:	31 c0                	xor    eax,eax
c00018c3:	8b 14 85 84 a2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5d7c]
c00018ca:	85 d2                	test   edx,edx
c00018cc:	74 0e                	je     c00018dc <dlmallinfo+0x4c>
c00018ce:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018d1:	45                   	inc    ebp
c00018d2:	83 e6 fc             	and    esi,0xfffffffc
c00018d5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018d8:	01 f1                	add    ecx,esi
c00018da:	eb ee                	jmp    c00018ca <dlmallinfo+0x3a>
c00018dc:	40                   	inc    eax
c00018dd:	83 f8 0a             	cmp    eax,0xa
c00018e0:	75 e1                	jne    c00018c3 <dlmallinfo+0x33>
c00018e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018ed:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018f0:	b8 b4 a2 02 c0       	mov    eax,0xc002a2b4
c00018f5:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018f8:	39 f0                	cmp    eax,esi
c00018fa:	74 10                	je     c000190c <dlmallinfo+0x7c>
c00018fc:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018ff:	ff 04 24             	inc    DWORD PTR [esp]
c0001902:	83 e7 fc             	and    edi,0xfffffffc
c0001905:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001908:	01 fa                	add    edx,edi
c000190a:	eb ec                	jmp    c00018f8 <dlmallinfo+0x68>
c000190c:	83 c0 08             	add    eax,0x8
c000190f:	3d ac a5 02 c0       	cmp    eax,0xc002a5ac
c0001914:	75 df                	jne    c00018f5 <dlmallinfo+0x65>
c0001916:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001919:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000191c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000191f:	a1 e8 a5 02 c0       	mov    eax,ds:0xc002a5e8
c0001924:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001927:	89 03                	mov    DWORD PTR [ebx],eax
c0001929:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000192c:	8b 35 d0 a5 02 c0    	mov    esi,DWORD PTR ds:0xc002a5d0
c0001932:	29 d0                	sub    eax,edx
c0001934:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001937:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000193a:	8b 35 e4 a5 02 c0    	mov    esi,DWORD PTR ds:0xc002a5e4
c0001940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001944:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001947:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000194a:	8b 35 f4 a5 02 c0    	mov    esi,DWORD PTR ds:0xc002a5f4
c0001950:	89 d8                	mov    eax,ebx
c0001952:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001955:	83 c4 08             	add    esp,0x8
c0001958:	5b                   	pop    ebx
c0001959:	5e                   	pop    esi
c000195a:	5f                   	pop    edi
c000195b:	5d                   	pop    ebp
c000195c:	c2 04 00             	ret    0x4

c000195f <dlmalloc_stats>:
c000195f:	83 ec 30             	sub    esp,0x30
c0001962:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001966:	50                   	push   eax
c0001967:	e8 24 ff ff ff       	call   c0001890 <dlmallinfo>
c000196c:	83 c4 30             	add    esp,0x30
c000196f:	c3                   	ret    

c0001970 <dlmallopt>:
c0001970:	56                   	push   esi
c0001971:	b8 80 a2 02 c0       	mov    eax,0xc002a280
c0001976:	53                   	push   ebx
c0001977:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000197b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000197f:	e8 3b f1 ff ff       	call   c0000abf <malloc_consolidate>
c0001984:	8d 46 04             	lea    eax,[esi+0x4]
c0001987:	83 f8 05             	cmp    eax,0x5
c000198a:	77 67                	ja     c00019f3 <dlmallopt+0x83>
c000198c:	ff 24 85 04 5f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda0fc]
c0001993:	83 fb 50             	cmp    ebx,0x50
c0001996:	77 5b                	ja     c00019f3 <dlmallopt+0x83>
c0001998:	ba 08 00 00 00       	mov    edx,0x8
c000199d:	85 db                	test   ebx,ebx
c000199f:	74 12                	je     c00019b3 <dlmallopt+0x43>
c00019a1:	83 c3 0b             	add    ebx,0xb
c00019a4:	ba 10 00 00 00       	mov    edx,0x10
c00019a9:	83 fb 0f             	cmp    ebx,0xf
c00019ac:	76 05                	jbe    c00019b3 <dlmallopt+0x43>
c00019ae:	89 da                	mov    edx,ebx
c00019b0:	83 e2 f8             	and    edx,0xfffffff8
c00019b3:	a1 80 a2 02 c0       	mov    eax,ds:0xc002a280
c00019b8:	83 e0 03             	and    eax,0x3
c00019bb:	09 d0                	or     eax,edx
c00019bd:	a3 80 a2 02 c0       	mov    ds:0xc002a280,eax
c00019c2:	eb 31                	jmp    c00019f5 <dlmallopt+0x85>
c00019c4:	89 1d c4 a5 02 c0    	mov    DWORD PTR ds:0xc002a5c4,ebx
c00019ca:	eb 06                	jmp    c00019d2 <dlmallopt+0x62>
c00019cc:	89 1d c8 a5 02 c0    	mov    DWORD PTR ds:0xc002a5c8,ebx
c00019d2:	be 01 00 00 00       	mov    esi,0x1
c00019d7:	eb 1c                	jmp    c00019f5 <dlmallopt+0x85>
c00019d9:	89 1d cc a5 02 c0    	mov    DWORD PTR ds:0xc002a5cc,ebx
c00019df:	eb f1                	jmp    c00019d2 <dlmallopt+0x62>
c00019e1:	31 f6                	xor    esi,esi
c00019e3:	85 db                	test   ebx,ebx
c00019e5:	75 0e                	jne    c00019f5 <dlmallopt+0x85>
c00019e7:	c7 05 d4 a5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a5d4,0x0
c00019f1:	eb df                	jmp    c00019d2 <dlmallopt+0x62>
c00019f3:	31 f6                	xor    esi,esi
c00019f5:	89 f0                	mov    eax,esi
c00019f7:	5b                   	pop    ebx
c00019f8:	5e                   	pop    esi
c00019f9:	c3                   	ret    

c00019fa <disk_status>:
c00019fa:	31 c0                	xor    eax,eax
c00019fc:	c3                   	ret    

c00019fd <disk_initialize>:
c00019fd:	31 c0                	xor    eax,eax
c00019ff:	c3                   	ret    

c0001a00 <disk_read>:
c0001a00:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a05:	0f b6 04 85 c0 bc 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4340]
c0001a0d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a11:	e9 90 cc 01 00       	jmp    c001e6a6 <fatWrapperReadDisk>

c0001a16 <disk_write>:
c0001a16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a1b:	0f b6 04 85 c0 bc 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4340]
c0001a23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a27:	e9 c1 cc 01 00       	jmp    c001e6ed <fatWrapperWriteDisk>

c0001a2c <disk_ioctl>:
c0001a2c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a35:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a3a:	0f b6 04 85 c0 bc 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4340]
c0001a42:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a46:	e9 e9 cc 01 00       	jmp    c001e734 <fatWrapperIoctl>

c0001a4b <ld_word>:
c0001a4b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a4f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a52:	c1 e2 08             	shl    edx,0x8
c0001a55:	09 d0                	or     eax,edx
c0001a57:	c3                   	ret    

c0001a58 <ld_dword>:
c0001a58:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a5c:	89 d1                	mov    ecx,edx
c0001a5e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a62:	c1 e1 08             	shl    ecx,0x8
c0001a65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a68:	09 ca                	or     edx,ecx
c0001a6a:	c1 e2 08             	shl    edx,0x8
c0001a6d:	09 d0                	or     eax,edx
c0001a6f:	c3                   	ret    

c0001a70 <ld_qword>:
c0001a70:	57                   	push   edi
c0001a71:	56                   	push   esi
c0001a72:	53                   	push   ebx
c0001a73:	31 db                	xor    ebx,ebx
c0001a75:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a78:	89 df                	mov    edi,ebx
c0001a7a:	89 ce                	mov    esi,ecx
c0001a7c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a80:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a84:	c1 e6 08             	shl    esi,0x8
c0001a87:	09 f2                	or     edx,esi
c0001a89:	89 d6                	mov    esi,edx
c0001a8b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a8f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a93:	c1 e6 08             	shl    esi,0x8
c0001a96:	09 f2                	or     edx,esi
c0001a98:	89 d6                	mov    esi,edx
c0001a9a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a9e:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aa2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001aa5:	c1 e6 08             	shl    esi,0x8
c0001aa8:	89 fb                	mov    ebx,edi
c0001aaa:	09 f2                	or     edx,esi
c0001aac:	89 d1                	mov    ecx,edx
c0001aae:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001ab2:	c1 e1 08             	shl    ecx,0x8
c0001ab5:	89 da                	mov    edx,ebx
c0001ab7:	09 c8                	or     eax,ecx
c0001ab9:	5b                   	pop    ebx
c0001aba:	5e                   	pop    esi
c0001abb:	5f                   	pop    edi
c0001abc:	c3                   	ret    

c0001abd <st_word>:
c0001abd:	66 89 10             	mov    WORD PTR [eax],dx
c0001ac0:	c3                   	ret    

c0001ac1 <st_dword>:
c0001ac1:	89 10                	mov    DWORD PTR [eax],edx
c0001ac3:	c3                   	ret    

c0001ac4 <st_qword>:
c0001ac4:	89 10                	mov    DWORD PTR [eax],edx
c0001ac6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ac9:	c3                   	ret    

c0001aca <mem_cpy>:
c0001aca:	85 c9                	test   ecx,ecx
c0001acc:	74 10                	je     c0001ade <mem_cpy+0x14>
c0001ace:	57                   	push   edi
c0001acf:	01 c1                	add    ecx,eax
c0001ad1:	56                   	push   esi
c0001ad2:	89 c7                	mov    edi,eax
c0001ad4:	89 d6                	mov    esi,edx
c0001ad6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ad7:	39 f9                	cmp    ecx,edi
c0001ad9:	75 fb                	jne    c0001ad6 <mem_cpy+0xc>
c0001adb:	5e                   	pop    esi
c0001adc:	5f                   	pop    edi
c0001add:	c3                   	ret    
c0001ade:	c3                   	ret    

c0001adf <mem_set>:
c0001adf:	01 c1                	add    ecx,eax
c0001ae1:	40                   	inc    eax
c0001ae2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001ae5:	39 c8                	cmp    eax,ecx
c0001ae7:	75 f8                	jne    c0001ae1 <mem_set+0x2>
c0001ae9:	c3                   	ret    

c0001aea <mem_cmp>:
c0001aea:	57                   	push   edi
c0001aeb:	56                   	push   esi
c0001aec:	89 c6                	mov    esi,eax
c0001aee:	53                   	push   ebx
c0001aef:	46                   	inc    esi
c0001af0:	42                   	inc    edx
c0001af1:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001af5:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001af9:	29 fb                	sub    ebx,edi
c0001afb:	89 cf                	mov    edi,ecx
c0001afd:	29 f7                	sub    edi,esi
c0001aff:	01 c7                	add    edi,eax
c0001b01:	74 04                	je     c0001b07 <mem_cmp+0x1d>
c0001b03:	85 db                	test   ebx,ebx
c0001b05:	74 e8                	je     c0001aef <mem_cmp+0x5>
c0001b07:	89 d8                	mov    eax,ebx
c0001b09:	5b                   	pop    ebx
c0001b0a:	5e                   	pop    esi
c0001b0b:	5f                   	pop    edi
c0001b0c:	c3                   	ret    

c0001b0d <chk_chr>:
c0001b0d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b10:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b13:	74 07                	je     c0001b1c <chk_chr+0xf>
c0001b15:	39 d1                	cmp    ecx,edx
c0001b17:	74 03                	je     c0001b1c <chk_chr+0xf>
c0001b19:	40                   	inc    eax
c0001b1a:	eb f1                	jmp    c0001b0d <chk_chr>
c0001b1c:	89 c8                	mov    eax,ecx
c0001b1e:	c3                   	ret    

c0001b1f <dbc_1st>:
c0001b1f:	31 c0                	xor    eax,eax
c0001b21:	c3                   	ret    

c0001b22 <dbc_2nd>:
c0001b22:	31 c0                	xor    eax,eax
c0001b24:	c3                   	ret    

c0001b25 <tchar2uni>:
c0001b25:	57                   	push   edi
c0001b26:	89 c7                	mov    edi,eax
c0001b28:	56                   	push   esi
c0001b29:	53                   	push   ebx
c0001b2a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b2c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b2e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b31:	84 c9                	test   cl,cl
c0001b33:	78 0a                	js     c0001b3f <tchar2uni+0x1a>
c0001b35:	0f b6 d1             	movzx  edx,cl
c0001b38:	89 f3                	mov    ebx,esi
c0001b3a:	e9 9f 00 00 00       	jmp    c0001bde <tchar2uni+0xb9>
c0001b3f:	88 ca                	mov    dl,cl
c0001b41:	83 e2 e0             	and    edx,0xffffffe0
c0001b44:	80 fa c0             	cmp    dl,0xc0
c0001b47:	75 0c                	jne    c0001b55 <tchar2uni+0x30>
c0001b49:	89 ca                	mov    edx,ecx
c0001b4b:	b9 01 00 00 00       	mov    ecx,0x1
c0001b50:	83 e2 1f             	and    edx,0x1f
c0001b53:	eb 2e                	jmp    c0001b83 <tchar2uni+0x5e>
c0001b55:	88 ca                	mov    dl,cl
c0001b57:	83 e2 f0             	and    edx,0xfffffff0
c0001b5a:	80 fa e0             	cmp    dl,0xe0
c0001b5d:	75 0c                	jne    c0001b6b <tchar2uni+0x46>
c0001b5f:	89 ca                	mov    edx,ecx
c0001b61:	b9 02 00 00 00       	mov    ecx,0x2
c0001b66:	83 e2 0f             	and    edx,0xf
c0001b69:	eb 18                	jmp    c0001b83 <tchar2uni+0x5e>
c0001b6b:	88 ca                	mov    dl,cl
c0001b6d:	83 e2 f8             	and    edx,0xfffffff8
c0001b70:	88 d0                	mov    al,dl
c0001b72:	83 ca ff             	or     edx,0xffffffff
c0001b75:	3c f0                	cmp    al,0xf0
c0001b77:	75 6c                	jne    c0001be5 <tchar2uni+0xc0>
c0001b79:	89 ca                	mov    edx,ecx
c0001b7b:	b9 03 00 00 00       	mov    ecx,0x3
c0001b80:	83 e2 07             	and    edx,0x7
c0001b83:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b87:	46                   	inc    esi
c0001b88:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b8b:	88 c8                	mov    al,cl
c0001b8d:	83 e0 c0             	and    eax,0xffffffc0
c0001b90:	3c 80                	cmp    al,0x80
c0001b92:	75 4e                	jne    c0001be2 <tchar2uni+0xbd>
c0001b94:	c1 e2 06             	shl    edx,0x6
c0001b97:	83 e1 3f             	and    ecx,0x3f
c0001b9a:	09 ca                	or     edx,ecx
c0001b9c:	39 de                	cmp    esi,ebx
c0001b9e:	75 e7                	jne    c0001b87 <tchar2uni+0x62>
c0001ba0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ba3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ba9:	77 37                	ja     c0001be2 <tchar2uni+0xbd>
c0001bab:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001bb1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bb7:	76 29                	jbe    c0001be2 <tchar2uni+0xbd>
c0001bb9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bbf:	76 1d                	jbe    c0001bde <tchar2uni+0xb9>
c0001bc1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bc7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bcd:	c1 e1 06             	shl    ecx,0x6
c0001bd0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bd6:	09 ca                	or     edx,ecx
c0001bd8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bde:	89 1f                	mov    DWORD PTR [edi],ebx
c0001be0:	eb 03                	jmp    c0001be5 <tchar2uni+0xc0>
c0001be2:	83 ca ff             	or     edx,0xffffffff
c0001be5:	5b                   	pop    ebx
c0001be6:	89 d0                	mov    eax,edx
c0001be8:	5e                   	pop    esi
c0001be9:	5f                   	pop    edi
c0001bea:	c3                   	ret    

c0001beb <put_utf>:
c0001beb:	53                   	push   ebx
c0001bec:	83 f8 7f             	cmp    eax,0x7f
c0001bef:	89 c3                	mov    ebx,eax
c0001bf1:	b0 00                	mov    al,0x0
c0001bf3:	77 11                	ja     c0001c06 <put_utf+0x1b>
c0001bf5:	85 c9                	test   ecx,ecx
c0001bf7:	0f 84 e5 00 00 00    	je     c0001ce2 <put_utf+0xf7>
c0001bfd:	88 1a                	mov    BYTE PTR [edx],bl
c0001bff:	b0 01                	mov    al,0x1
c0001c01:	e9 dc 00 00 00       	jmp    c0001ce2 <put_utf+0xf7>
c0001c06:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c0c:	77 23                	ja     c0001c31 <put_utf+0x46>
c0001c0e:	83 f9 01             	cmp    ecx,0x1
c0001c11:	0f 86 cb 00 00 00    	jbe    c0001ce2 <put_utf+0xf7>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	83 e3 3f             	and    ebx,0x3f
c0001c1c:	c1 e8 06             	shr    eax,0x6
c0001c1f:	83 cb 80             	or     ebx,0xffffff80
c0001c22:	83 c8 c0             	or     eax,0xffffffc0
c0001c25:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c28:	88 02                	mov    BYTE PTR [edx],al
c0001c2a:	b0 02                	mov    al,0x2
c0001c2c:	e9 b1 00 00 00       	jmp    c0001ce2 <put_utf+0xf7>
c0001c31:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c37:	77 40                	ja     c0001c79 <put_utf+0x8e>
c0001c39:	83 f9 02             	cmp    ecx,0x2
c0001c3c:	0f 86 a0 00 00 00    	jbe    c0001ce2 <put_utf+0xf7>
c0001c42:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c48:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c4e:	0f 86 8e 00 00 00    	jbe    c0001ce2 <put_utf+0xf7>
c0001c54:	89 d8                	mov    eax,ebx
c0001c56:	c1 e8 0c             	shr    eax,0xc
c0001c59:	83 c8 e0             	or     eax,0xffffffe0
c0001c5c:	88 02                	mov    BYTE PTR [edx],al
c0001c5e:	89 d8                	mov    eax,ebx
c0001c60:	83 e3 3f             	and    ebx,0x3f
c0001c63:	c1 e8 06             	shr    eax,0x6
c0001c66:	83 cb 80             	or     ebx,0xffffff80
c0001c69:	83 e0 3f             	and    eax,0x3f
c0001c6c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c6f:	83 c8 80             	or     eax,0xffffff80
c0001c72:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c75:	b0 03                	mov    al,0x3
c0001c77:	eb 69                	jmp    c0001ce2 <put_utf+0xf7>
c0001c79:	83 f9 03             	cmp    ecx,0x3
c0001c7c:	76 64                	jbe    c0001ce2 <put_utf+0xf7>
c0001c7e:	89 d9                	mov    ecx,ebx
c0001c80:	0f b7 c3             	movzx  eax,bx
c0001c83:	66 31 c9             	xor    cx,cx
c0001c86:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c8c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c92:	c1 e9 06             	shr    ecx,0x6
c0001c95:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c9b:	77 43                	ja     c0001ce0 <put_utf+0xf5>
c0001c9d:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001ca3:	77 3b                	ja     c0001ce0 <put_utf+0xf5>
c0001ca5:	09 cb                	or     ebx,ecx
c0001ca7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001cad:	89 d8                	mov    eax,ebx
c0001caf:	c1 e8 12             	shr    eax,0x12
c0001cb2:	83 c8 f0             	or     eax,0xfffffff0
c0001cb5:	88 02                	mov    BYTE PTR [edx],al
c0001cb7:	89 d8                	mov    eax,ebx
c0001cb9:	c1 e8 0c             	shr    eax,0xc
c0001cbc:	83 e0 3f             	and    eax,0x3f
c0001cbf:	83 c8 80             	or     eax,0xffffff80
c0001cc2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cc5:	89 d8                	mov    eax,ebx
c0001cc7:	83 e3 3f             	and    ebx,0x3f
c0001cca:	c1 e8 06             	shr    eax,0x6
c0001ccd:	83 cb 80             	or     ebx,0xffffff80
c0001cd0:	83 e0 3f             	and    eax,0x3f
c0001cd3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cd6:	83 c8 80             	or     eax,0xffffff80
c0001cd9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cdc:	b0 04                	mov    al,0x4
c0001cde:	eb 02                	jmp    c0001ce2 <put_utf+0xf7>
c0001ce0:	31 c0                	xor    eax,eax
c0001ce2:	5b                   	pop    ebx
c0001ce3:	c3                   	ret    

c0001ce4 <clst2sect>:
c0001ce4:	89 c1                	mov    ecx,eax
c0001ce6:	83 ea 02             	sub    edx,0x2
c0001ce9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cec:	83 e8 02             	sub    eax,0x2
c0001cef:	39 d0                	cmp    eax,edx
c0001cf1:	76 0d                	jbe    c0001d00 <clst2sect+0x1c>
c0001cf3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cf7:	f7 e2                	mul    edx
c0001cf9:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cfc:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cff:	c3                   	ret    
c0001d00:	31 c0                	xor    eax,eax
c0001d02:	31 d2                	xor    edx,edx
c0001d04:	c3                   	ret    

c0001d05 <clmt_clust>:
c0001d05:	57                   	push   edi
c0001d06:	89 cf                	mov    edi,ecx
c0001d08:	56                   	push   esi
c0001d09:	89 d6                	mov    esi,edx
c0001d0b:	53                   	push   ebx
c0001d0c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d10:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d13:	89 f2                	mov    edx,esi
c0001d15:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d17:	c1 ef 09             	shr    edi,0x9
c0001d1a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d1e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d21:	89 f9                	mov    ecx,edi
c0001d23:	31 ff                	xor    edi,edi
c0001d25:	57                   	push   edi
c0001d26:	56                   	push   esi
c0001d27:	51                   	push   ecx
c0001d28:	52                   	push   edx
c0001d29:	e8 6e 18 02 00       	call   c002359c <__udivdi3>
c0001d2e:	83 c4 10             	add    esp,0x10
c0001d31:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d33:	85 d2                	test   edx,edx
c0001d35:	74 10                	je     c0001d47 <clmt_clust+0x42>
c0001d37:	39 d0                	cmp    eax,edx
c0001d39:	72 07                	jb     c0001d42 <clmt_clust+0x3d>
c0001d3b:	29 d0                	sub    eax,edx
c0001d3d:	83 c3 08             	add    ebx,0x8
c0001d40:	eb ef                	jmp    c0001d31 <clmt_clust+0x2c>
c0001d42:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d45:	89 c2                	mov    edx,eax
c0001d47:	5b                   	pop    ebx
c0001d48:	89 d0                	mov    eax,edx
c0001d4a:	5e                   	pop    esi
c0001d4b:	5f                   	pop    edi
c0001d4c:	c3                   	ret    

c0001d4d <pick_lfn>:
c0001d4d:	55                   	push   ebp
c0001d4e:	57                   	push   edi
c0001d4f:	56                   	push   esi
c0001d50:	89 d6                	mov    esi,edx
c0001d52:	53                   	push   ebx
c0001d53:	89 c3                	mov    ebx,eax
c0001d55:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d58:	e8 ee fc ff ff       	call   c0001a4b <ld_word>
c0001d5d:	66 85 c0             	test   ax,ax
c0001d60:	74 04                	je     c0001d66 <pick_lfn+0x19>
c0001d62:	31 c0                	xor    eax,eax
c0001d64:	eb 5c                	jmp    c0001dc2 <pick_lfn+0x75>
c0001d66:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d69:	bd 01 00 00 00       	mov    ebp,0x1
c0001d6e:	83 e1 bf             	and    ecx,0xffffffbf
c0001d71:	31 ff                	xor    edi,edi
c0001d73:	49                   	dec    ecx
c0001d74:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d77:	0f b6 87 20 60 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd9fe0]
c0001d7e:	01 f0                	add    eax,esi
c0001d80:	e8 c6 fc ff ff       	call   c0001a4b <ld_word>
c0001d85:	66 85 ed             	test   bp,bp
c0001d88:	74 11                	je     c0001d9b <pick_lfn+0x4e>
c0001d8a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d90:	77 d0                	ja     c0001d62 <pick_lfn+0x15>
c0001d92:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d96:	89 c5                	mov    ebp,eax
c0001d98:	41                   	inc    ecx
c0001d99:	eb 04                	jmp    c0001d9f <pick_lfn+0x52>
c0001d9b:	66 40                	inc    ax
c0001d9d:	75 c3                	jne    c0001d62 <pick_lfn+0x15>
c0001d9f:	47                   	inc    edi
c0001da0:	83 ff 0d             	cmp    edi,0xd
c0001da3:	75 d2                	jne    c0001d77 <pick_lfn+0x2a>
c0001da5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001da8:	74 13                	je     c0001dbd <pick_lfn+0x70>
c0001daa:	66 85 ed             	test   bp,bp
c0001dad:	74 0e                	je     c0001dbd <pick_lfn+0x70>
c0001daf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001db5:	77 ab                	ja     c0001d62 <pick_lfn+0x15>
c0001db7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001dbd:	b8 01 00 00 00       	mov    eax,0x1
c0001dc2:	5b                   	pop    ebx
c0001dc3:	5e                   	pop    esi
c0001dc4:	5f                   	pop    edi
c0001dc5:	5d                   	pop    ebp
c0001dc6:	c3                   	ret    

c0001dc7 <put_lfn>:
c0001dc7:	55                   	push   ebp
c0001dc8:	31 ed                	xor    ebp,ebp
c0001dca:	57                   	push   edi
c0001dcb:	89 d7                	mov    edi,edx
c0001dcd:	56                   	push   esi
c0001dce:	31 f6                	xor    esi,esi
c0001dd0:	53                   	push   ebx
c0001dd1:	83 ec 08             	sub    esp,0x8
c0001dd4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dd7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ddb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ddf:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001de5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001de8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001deb:	31 d2                	xor    edx,edx
c0001ded:	e8 cb fc ff ff       	call   c0001abd <st_word>
c0001df2:	0f b6 d9             	movzx  ebx,cl
c0001df5:	4b                   	dec    ebx
c0001df6:	6b db 0d             	imul   ebx,ebx,0xd
c0001df9:	66 83 fe ff          	cmp    si,0xffff
c0001dfd:	74 08                	je     c0001e07 <put_lfn+0x40>
c0001dff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e02:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e06:	43                   	inc    ebx
c0001e07:	0f b6 85 20 60 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd9fe0]
c0001e0e:	0f b7 d6             	movzx  edx,si
c0001e11:	01 f8                	add    eax,edi
c0001e13:	e8 a5 fc ff ff       	call   c0001abd <st_word>
c0001e18:	66 85 f6             	test   si,si
c0001e1b:	75 03                	jne    c0001e20 <put_lfn+0x59>
c0001e1d:	83 ce ff             	or     esi,0xffffffff
c0001e20:	45                   	inc    ebp
c0001e21:	83 fd 0d             	cmp    ebp,0xd
c0001e24:	75 d3                	jne    c0001df9 <put_lfn+0x32>
c0001e26:	66 46                	inc    si
c0001e28:	74 0a                	je     c0001e34 <put_lfn+0x6d>
c0001e2a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e2d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e32:	75 09                	jne    c0001e3d <put_lfn+0x76>
c0001e34:	88 c8                	mov    al,cl
c0001e36:	83 c8 40             	or     eax,0x40
c0001e39:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e3d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e41:	88 07                	mov    BYTE PTR [edi],al
c0001e43:	83 c4 08             	add    esp,0x8
c0001e46:	5b                   	pop    ebx
c0001e47:	5e                   	pop    esi
c0001e48:	5f                   	pop    edi
c0001e49:	5d                   	pop    ebp
c0001e4a:	c3                   	ret    

c0001e4b <gen_numname>:
c0001e4b:	57                   	push   edi
c0001e4c:	89 cf                	mov    edi,ecx
c0001e4e:	56                   	push   esi
c0001e4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e54:	53                   	push   ebx
c0001e55:	89 c6                	mov    esi,eax
c0001e57:	83 ec 10             	sub    esp,0x10
c0001e5a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e5e:	e8 67 fc ff ff       	call   c0001aca <mem_cpy>
c0001e63:	83 fb 05             	cmp    ebx,0x5
c0001e66:	76 2d                	jbe    c0001e95 <gen_numname+0x4a>
c0001e68:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e6b:	66 85 c0             	test   ax,ax
c0001e6e:	74 25                	je     c0001e95 <gen_numname+0x4a>
c0001e70:	83 c7 02             	add    edi,0x2
c0001e73:	ba 10 00 00 00       	mov    edx,0x10
c0001e78:	01 db                	add    ebx,ebx
c0001e7a:	89 c1                	mov    ecx,eax
c0001e7c:	66 d1 e8             	shr    ax,1
c0001e7f:	83 e1 01             	and    ecx,0x1
c0001e82:	01 cb                	add    ebx,ecx
c0001e84:	0f ba e3 10          	bt     ebx,0x10
c0001e88:	73 06                	jae    c0001e90 <gen_numname+0x45>
c0001e8a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e90:	4a                   	dec    edx
c0001e91:	75 e5                	jne    c0001e78 <gen_numname+0x2d>
c0001e93:	eb d3                	jmp    c0001e68 <gen_numname+0x1d>
c0001e95:	b8 07 00 00 00       	mov    eax,0x7
c0001e9a:	88 d9                	mov    cl,bl
c0001e9c:	83 e1 0f             	and    ecx,0xf
c0001e9f:	8d 51 30             	lea    edx,[ecx+0x30]
c0001ea2:	80 fa 39             	cmp    dl,0x39
c0001ea5:	76 03                	jbe    c0001eaa <gen_numname+0x5f>
c0001ea7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001eaa:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001ead:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001eb1:	89 da                	mov    edx,ebx
c0001eb3:	c1 ea 04             	shr    edx,0x4
c0001eb6:	83 fb 0f             	cmp    ebx,0xf
c0001eb9:	76 06                	jbe    c0001ec1 <gen_numname+0x76>
c0001ebb:	89 c8                	mov    eax,ecx
c0001ebd:	89 d3                	mov    ebx,edx
c0001ebf:	eb d9                	jmp    c0001e9a <gen_numname+0x4f>
c0001ec1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ec6:	31 d2                	xor    edx,edx
c0001ec8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001ecb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ece:	39 ca                	cmp    edx,ecx
c0001ed0:	73 18                	jae    c0001eea <gen_numname+0x9f>
c0001ed2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ed5:	3c 20                	cmp    al,0x20
c0001ed7:	74 11                	je     c0001eea <gen_numname+0x9f>
c0001ed9:	e8 41 fc ff ff       	call   c0001b1f <dbc_1st>
c0001ede:	85 c0                	test   eax,eax
c0001ee0:	74 05                	je     c0001ee7 <gen_numname+0x9c>
c0001ee2:	39 d3                	cmp    ebx,edx
c0001ee4:	74 04                	je     c0001eea <gen_numname+0x9f>
c0001ee6:	42                   	inc    edx
c0001ee7:	42                   	inc    edx
c0001ee8:	eb e1                	jmp    c0001ecb <gen_numname+0x80>
c0001eea:	b0 20                	mov    al,0x20
c0001eec:	83 f9 07             	cmp    ecx,0x7
c0001eef:	77 05                	ja     c0001ef6 <gen_numname+0xab>
c0001ef1:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ef5:	41                   	inc    ecx
c0001ef6:	42                   	inc    edx
c0001ef7:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001efb:	83 fa 07             	cmp    edx,0x7
c0001efe:	76 ea                	jbe    c0001eea <gen_numname+0x9f>
c0001f00:	83 c4 10             	add    esp,0x10
c0001f03:	5b                   	pop    ebx
c0001f04:	5e                   	pop    esi
c0001f05:	5f                   	pop    edi
c0001f06:	c3                   	ret    

c0001f07 <sum_sfn>:
c0001f07:	31 c9                	xor    ecx,ecx
c0001f09:	31 d2                	xor    edx,edx
c0001f0b:	d0 ca                	ror    dl,1
c0001f0d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f10:	41                   	inc    ecx
c0001f11:	83 f9 0b             	cmp    ecx,0xb
c0001f14:	75 f5                	jne    c0001f0b <sum_sfn+0x4>
c0001f16:	88 d0                	mov    al,dl
c0001f18:	c3                   	ret    

c0001f19 <xdir_sum>:
c0001f19:	56                   	push   esi
c0001f1a:	31 c9                	xor    ecx,ecx
c0001f1c:	53                   	push   ebx
c0001f1d:	31 d2                	xor    edx,edx
c0001f1f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f23:	43                   	inc    ebx
c0001f24:	c1 e3 05             	shl    ebx,0x5
c0001f27:	83 fa 02             	cmp    edx,0x2
c0001f2a:	74 0b                	je     c0001f37 <xdir_sum+0x1e>
c0001f2c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f30:	66 d1 c9             	ror    cx,1
c0001f33:	01 f1                	add    ecx,esi
c0001f35:	eb 05                	jmp    c0001f3c <xdir_sum+0x23>
c0001f37:	ba 03 00 00 00       	mov    edx,0x3
c0001f3c:	42                   	inc    edx
c0001f3d:	39 d3                	cmp    ebx,edx
c0001f3f:	77 e6                	ja     c0001f27 <xdir_sum+0xe>
c0001f41:	89 c8                	mov    eax,ecx
c0001f43:	5b                   	pop    ebx
c0001f44:	5e                   	pop    esi
c0001f45:	c3                   	ret    

c0001f46 <xsum32>:
c0001f46:	d1 ca                	ror    edx,1
c0001f48:	0f b6 c0             	movzx  eax,al
c0001f4b:	01 d0                	add    eax,edx
c0001f4d:	c3                   	ret    

c0001f4e <get_xfileinfo>:
c0001f4e:	55                   	push   ebp
c0001f4f:	31 c9                	xor    ecx,ecx
c0001f51:	57                   	push   edi
c0001f52:	bd 40 00 00 00       	mov    ebp,0x40
c0001f57:	56                   	push   esi
c0001f58:	31 ff                	xor    edi,edi
c0001f5a:	53                   	push   ebx
c0001f5b:	89 c6                	mov    esi,eax
c0001f5d:	83 ec 0c             	sub    esp,0xc
c0001f60:	89 d3                	mov    ebx,edx
c0001f62:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f69:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f6d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f70:	76 6d                	jbe    c0001fdf <get_xfileinfo+0x91>
c0001f72:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f78:	76 0b                	jbe    c0001f85 <get_xfileinfo+0x37>
c0001f7a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f7e:	bf 01 00 00 00       	mov    edi,0x1
c0001f83:	eb 63                	jmp    c0001fe8 <get_xfileinfo+0x9a>
c0001f85:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f8b:	75 03                	jne    c0001f90 <get_xfileinfo+0x42>
c0001f8d:	83 c5 02             	add    ebp,0x2
c0001f90:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f93:	83 c5 02             	add    ebp,0x2
c0001f96:	e8 b0 fa ff ff       	call   c0001a4b <ld_word>
c0001f9b:	ff 04 24             	inc    DWORD PTR [esp]
c0001f9e:	66 85 c9             	test   cx,cx
c0001fa1:	75 0d                	jne    c0001fb0 <get_xfileinfo+0x62>
c0001fa3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fa9:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fae:	76 2b                	jbe    c0001fdb <get_xfileinfo+0x8d>
c0001fb0:	c1 e1 10             	shl    ecx,0x10
c0001fb3:	ba ff 00 00 00       	mov    edx,0xff
c0001fb8:	0f b7 c0             	movzx  eax,ax
c0001fbb:	29 fa                	sub    edx,edi
c0001fbd:	09 c8                	or     eax,ecx
c0001fbf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fc3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fc7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fcb:	e8 1b fc ff ff       	call   c0001beb <put_utf>
c0001fd0:	84 c0                	test   al,al
c0001fd2:	74 a6                	je     c0001f7a <get_xfileinfo+0x2c>
c0001fd4:	0f b6 c0             	movzx  eax,al
c0001fd7:	01 c7                	add    edi,eax
c0001fd9:	31 c0                	xor    eax,eax
c0001fdb:	89 c1                	mov    ecx,eax
c0001fdd:	eb 8a                	jmp    c0001f69 <get_xfileinfo+0x1b>
c0001fdf:	85 ff                	test   edi,edi
c0001fe1:	74 97                	je     c0001f7a <get_xfileinfo+0x2c>
c0001fe3:	66 85 c9             	test   cx,cx
c0001fe6:	75 92                	jne    c0001f7a <get_xfileinfo+0x2c>
c0001fe8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fed:	31 c0                	xor    eax,eax
c0001fef:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001ff3:	31 d2                	xor    edx,edx
c0001ff5:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001ff8:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001ffb:	80 e1 10             	and    cl,0x10
c0001ffe:	75 08                	jne    c0002008 <get_xfileinfo+0xba>
c0002000:	8d 46 38             	lea    eax,[esi+0x38]
c0002003:	e8 68 fa ff ff       	call   c0001a70 <ld_qword>
c0002008:	89 03                	mov    DWORD PTR [ebx],eax
c000200a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000200d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002010:	e8 36 fa ff ff       	call   c0001a4b <ld_word>
c0002015:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002019:	8d 46 0e             	lea    eax,[esi+0xe]
c000201c:	e8 2a fa ff ff       	call   c0001a4b <ld_word>
c0002021:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002025:	83 c4 0c             	add    esp,0xc
c0002028:	5b                   	pop    ebx
c0002029:	5e                   	pop    esi
c000202a:	5f                   	pop    edi
c000202b:	5d                   	pop    ebp
c000202c:	c3                   	ret    

c000202d <get_ldnumber>:
c000202d:	8b 10                	mov    edx,DWORD PTR [eax]
c000202f:	85 d2                	test   edx,edx
c0002031:	74 14                	je     c0002047 <get_ldnumber+0x1a>
c0002033:	56                   	push   esi
c0002034:	53                   	push   ebx
c0002035:	89 d3                	mov    ebx,edx
c0002037:	43                   	inc    ebx
c0002038:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000203b:	80 f9 1f             	cmp    cl,0x1f
c000203e:	76 0d                	jbe    c000204d <get_ldnumber+0x20>
c0002040:	80 f9 3a             	cmp    cl,0x3a
c0002043:	75 f2                	jne    c0002037 <get_ldnumber+0xa>
c0002045:	eb 0a                	jmp    c0002051 <get_ldnumber+0x24>
c0002047:	83 c9 ff             	or     ecx,0xffffffff
c000204a:	89 c8                	mov    eax,ecx
c000204c:	c3                   	ret    
c000204d:	31 c9                	xor    ecx,ecx
c000204f:	eb 24                	jmp    c0002075 <get_ldnumber+0x48>
c0002051:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002054:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002057:	80 f9 09             	cmp    cl,0x9
c000205a:	77 16                	ja     c0002072 <get_ldnumber+0x45>
c000205c:	83 c2 02             	add    edx,0x2
c000205f:	83 c9 ff             	or     ecx,0xffffffff
c0002062:	39 d3                	cmp    ebx,edx
c0002064:	75 0f                	jne    c0002075 <get_ldnumber+0x48>
c0002066:	89 f2                	mov    edx,esi
c0002068:	89 18                	mov    DWORD PTR [eax],ebx
c000206a:	0f be ca             	movsx  ecx,dl
c000206d:	83 e9 30             	sub    ecx,0x30
c0002070:	eb 03                	jmp    c0002075 <get_ldnumber+0x48>
c0002072:	83 c9 ff             	or     ecx,0xffffffff
c0002075:	89 c8                	mov    eax,ecx
c0002077:	5b                   	pop    ebx
c0002078:	5e                   	pop    esi
c0002079:	c3                   	ret    

c000207a <crc32>:
c000207a:	56                   	push   esi
c000207b:	89 d6                	mov    esi,edx
c000207d:	53                   	push   ebx
c000207e:	b2 01                	mov    dl,0x1
c0002080:	bb 08 00 00 00       	mov    ebx,0x8
c0002085:	89 f1                	mov    ecx,esi
c0002087:	84 d1                	test   cl,dl
c0002089:	0f 95 c1             	setne  cl
c000208c:	0f b6 c9             	movzx  ecx,cl
c000208f:	31 c1                	xor    ecx,eax
c0002091:	89 c8                	mov    eax,ecx
c0002093:	d1 e8                	shr    eax,1
c0002095:	80 e1 01             	and    cl,0x1
c0002098:	74 05                	je     c000209f <crc32+0x25>
c000209a:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000209f:	d1 e2                	shl    edx,1
c00020a1:	4b                   	dec    ebx
c00020a2:	75 e1                	jne    c0002085 <crc32+0xb>
c00020a4:	5b                   	pop    ebx
c00020a5:	5e                   	pop    esi
c00020a6:	c3                   	ret    

c00020a7 <test_gpt_header>:
c00020a7:	55                   	push   ebp
c00020a8:	b9 10 00 00 00       	mov    ecx,0x10
c00020ad:	57                   	push   edi
c00020ae:	ba 20 5f 02 c0       	mov    edx,0xc0025f20
c00020b3:	56                   	push   esi
c00020b4:	31 ff                	xor    edi,edi
c00020b6:	53                   	push   ebx
c00020b7:	89 c3                	mov    ebx,eax
c00020b9:	e8 2c fa ff ff       	call   c0001aea <mem_cmp>
c00020be:	85 c0                	test   eax,eax
c00020c0:	75 55                	jne    c0002117 <test_gpt_header+0x70>
c00020c2:	89 c7                	mov    edi,eax
c00020c4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020c9:	83 ce ff             	or     esi,0xffffffff
c00020cc:	31 d2                	xor    edx,edx
c00020ce:	83 fd 03             	cmp    ebp,0x3
c00020d1:	76 05                	jbe    c00020d8 <test_gpt_header+0x31>
c00020d3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020d8:	89 f0                	mov    eax,esi
c00020da:	45                   	inc    ebp
c00020db:	e8 9a ff ff ff       	call   c000207a <crc32>
c00020e0:	83 fd 4c             	cmp    ebp,0x4c
c00020e3:	89 c6                	mov    esi,eax
c00020e5:	75 e5                	jne    c00020cc <test_gpt_header+0x25>
c00020e7:	8d 43 10             	lea    eax,[ebx+0x10]
c00020ea:	f7 d6                	not    esi
c00020ec:	e8 67 f9 ff ff       	call   c0001a58 <ld_dword>
c00020f1:	39 c6                	cmp    esi,eax
c00020f3:	75 22                	jne    c0002117 <test_gpt_header+0x70>
c00020f5:	8d 43 54             	lea    eax,[ebx+0x54]
c00020f8:	e8 5b f9 ff ff       	call   c0001a58 <ld_dword>
c00020fd:	83 c0 80             	add    eax,0xffffff80
c0002100:	75 15                	jne    c0002117 <test_gpt_header+0x70>
c0002102:	8d 43 50             	lea    eax,[ebx+0x50]
c0002105:	e8 4e f9 ff ff       	call   c0001a58 <ld_dword>
c000210a:	3d 80 00 00 00       	cmp    eax,0x80
c000210f:	0f 96 c0             	setbe  al
c0002112:	0f b6 c0             	movzx  eax,al
c0002115:	89 c7                	mov    edi,eax
c0002117:	5b                   	pop    ebx
c0002118:	89 f8                	mov    eax,edi
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	5d                   	pop    ebp
c000211d:	c3                   	ret    

c000211e <make_rand>:
c000211e:	56                   	push   esi
c000211f:	85 c0                	test   eax,eax
c0002121:	53                   	push   ebx
c0002122:	75 05                	jne    c0002129 <make_rand+0xb>
c0002124:	b8 01 00 00 00       	mov    eax,0x1
c0002129:	01 d1                	add    ecx,edx
c000212b:	bb 08 00 00 00       	mov    ebx,0x8
c0002130:	89 c6                	mov    esi,eax
c0002132:	d1 e8                	shr    eax,1
c0002134:	83 e6 01             	and    esi,0x1
c0002137:	85 f6                	test   esi,esi
c0002139:	74 05                	je     c0002140 <make_rand+0x22>
c000213b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002140:	4b                   	dec    ebx
c0002141:	75 ed                	jne    c0002130 <make_rand+0x12>
c0002143:	42                   	inc    edx
c0002144:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002147:	39 ca                	cmp    edx,ecx
c0002149:	75 e0                	jne    c000212b <make_rand+0xd>
c000214b:	5b                   	pop    ebx
c000214c:	5e                   	pop    esi
c000214d:	c3                   	ret    

c000214e <validate>:
c000214e:	56                   	push   esi
c000214f:	53                   	push   ebx
c0002150:	89 d6                	mov    esi,edx
c0002152:	51                   	push   ecx
c0002153:	85 c0                	test   eax,eax
c0002155:	75 09                	jne    c0002160 <validate+0x12>
c0002157:	b8 09 00 00 00       	mov    eax,0x9
c000215c:	31 c9                	xor    ecx,ecx
c000215e:	eb 2f                	jmp    c000218f <validate+0x41>
c0002160:	89 c3                	mov    ebx,eax
c0002162:	8b 00                	mov    eax,DWORD PTR [eax]
c0002164:	85 c0                	test   eax,eax
c0002166:	74 ef                	je     c0002157 <validate+0x9>
c0002168:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000216b:	74 ea                	je     c0002157 <validate+0x9>
c000216d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002171:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002175:	75 e0                	jne    c0002157 <validate+0x9>
c0002177:	83 ec 0c             	sub    esp,0xc
c000217a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000217e:	50                   	push   eax
c000217f:	e8 76 f8 ff ff       	call   c00019fa <disk_status>
c0002184:	83 c4 10             	add    esp,0x10
c0002187:	a8 01                	test   al,0x1
c0002189:	75 cc                	jne    c0002157 <validate+0x9>
c000218b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000218d:	31 c0                	xor    eax,eax
c000218f:	89 0e                	mov    DWORD PTR [esi],ecx
c0002191:	5a                   	pop    edx
c0002192:	5b                   	pop    ebx
c0002193:	5e                   	pop    esi
c0002194:	c3                   	ret    

c0002195 <sync_window>:
c0002195:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002199:	0f 84 85 00 00 00    	je     c0002224 <sync_window+0x8f>
c000219f:	55                   	push   ebp
c00021a0:	8d 68 54             	lea    ebp,[eax+0x54]
c00021a3:	57                   	push   edi
c00021a4:	56                   	push   esi
c00021a5:	53                   	push   ebx
c00021a6:	89 c3                	mov    ebx,eax
c00021a8:	83 ec 28             	sub    esp,0x28
c00021ab:	6a 01                	push   0x1
c00021ad:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021b0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021b3:	55                   	push   ebp
c00021b4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021b8:	50                   	push   eax
c00021b9:	e8 58 f8 ff ff       	call   c0001a16 <disk_write>
c00021be:	83 c4 20             	add    esp,0x20
c00021c1:	ba 01 00 00 00       	mov    edx,0x1
c00021c6:	85 c0                	test   eax,eax
c00021c8:	75 50                	jne    c000221a <sync_window+0x85>
c00021ca:	31 ff                	xor    edi,edi
c00021cc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021cf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021d3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021d7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021da:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021dd:	89 c6                	mov    esi,eax
c00021df:	89 d7                	mov    edi,edx
c00021e1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021e4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021e8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021eb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021ef:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021f3:	73 23                	jae    c0002218 <sync_window+0x83>
c00021f5:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021f9:	75 1d                	jne    c0002218 <sync_window+0x83>
c00021fb:	83 ec 0c             	sub    esp,0xc
c00021fe:	6a 01                	push   0x1
c0002200:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002204:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002208:	52                   	push   edx
c0002209:	50                   	push   eax
c000220a:	55                   	push   ebp
c000220b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000220f:	50                   	push   eax
c0002210:	e8 01 f8 ff ff       	call   c0001a16 <disk_write>
c0002215:	83 c4 20             	add    esp,0x20
c0002218:	31 d2                	xor    edx,edx
c000221a:	83 c4 1c             	add    esp,0x1c
c000221d:	89 d0                	mov    eax,edx
c000221f:	5b                   	pop    ebx
c0002220:	5e                   	pop    esi
c0002221:	5f                   	pop    edi
c0002222:	5d                   	pop    ebp
c0002223:	c3                   	ret    
c0002224:	31 d2                	xor    edx,edx
c0002226:	89 d0                	mov    eax,edx
c0002228:	c3                   	ret    

c0002229 <move_window>:
c0002229:	56                   	push   esi
c000222a:	53                   	push   ebx
c000222b:	89 c3                	mov    ebx,eax
c000222d:	83 ec 14             	sub    esp,0x14
c0002230:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002233:	75 07                	jne    c000223c <move_window+0x13>
c0002235:	31 f6                	xor    esi,esi
c0002237:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000223a:	74 59                	je     c0002295 <move_window+0x6c>
c000223c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002240:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002244:	89 d8                	mov    eax,ebx
c0002246:	e8 4a ff ff ff       	call   c0002195 <sync_window>
c000224b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000224f:	89 c6                	mov    esi,eax
c0002251:	85 c0                	test   eax,eax
c0002253:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002257:	75 3c                	jne    c0002295 <move_window+0x6c>
c0002259:	83 ec 0c             	sub    esp,0xc
c000225c:	8d 43 54             	lea    eax,[ebx+0x54]
c000225f:	6a 01                	push   0x1
c0002261:	51                   	push   ecx
c0002262:	52                   	push   edx
c0002263:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002267:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000226b:	50                   	push   eax
c000226c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002270:	50                   	push   eax
c0002271:	e8 8a f7 ff ff       	call   c0001a00 <disk_read>
c0002276:	83 c4 20             	add    esp,0x20
c0002279:	85 c0                	test   eax,eax
c000227b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000227f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002283:	74 0a                	je     c000228f <move_window+0x66>
c0002285:	83 ca ff             	or     edx,0xffffffff
c0002288:	be 01 00 00 00       	mov    esi,0x1
c000228d:	89 d1                	mov    ecx,edx
c000228f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002292:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002295:	89 f0                	mov    eax,esi
c0002297:	83 c4 14             	add    esp,0x14
c000229a:	5b                   	pop    ebx
c000229b:	5e                   	pop    esi
c000229c:	c3                   	ret    

c000229d <check_fs>:
c000229d:	53                   	push   ebx
c000229e:	89 c3                	mov    ebx,eax
c00022a0:	83 ec 08             	sub    esp,0x8
c00022a3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022a7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022ae:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022b5:	e8 6f ff ff ff       	call   c0002229 <move_window>
c00022ba:	ba 04 00 00 00       	mov    edx,0x4
c00022bf:	85 c0                	test   eax,eax
c00022c1:	0f 85 89 00 00 00    	jne    c0002350 <check_fs+0xb3>
c00022c7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022cd:	e8 79 f7 ff ff       	call   c0001a4b <ld_word>
c00022d2:	ba 03 00 00 00       	mov    edx,0x3
c00022d7:	66 3d 55 aa          	cmp    ax,0xaa55
c00022db:	75 73                	jne    c0002350 <check_fs+0xb3>
c00022dd:	ba 40 60 02 c0       	mov    edx,0xc0026040
c00022e2:	8d 43 54             	lea    eax,[ebx+0x54]
c00022e5:	b9 0b 00 00 00       	mov    ecx,0xb
c00022ea:	e8 fb f7 ff ff       	call   c0001aea <mem_cmp>
c00022ef:	ba 01 00 00 00       	mov    edx,0x1
c00022f4:	85 c0                	test   eax,eax
c00022f6:	74 58                	je     c0002350 <check_fs+0xb3>
c00022f8:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022fb:	8d 50 18             	lea    edx,[eax+0x18]
c00022fe:	80 fa 01             	cmp    dl,0x1
c0002301:	76 09                	jbe    c000230c <check_fs+0x6f>
c0002303:	ba 02 00 00 00       	mov    edx,0x2
c0002308:	3c eb                	cmp    al,0xeb
c000230a:	75 44                	jne    c0002350 <check_fs+0xb3>
c000230c:	ba 34 8d 02 c0       	mov    edx,0xc0028d34
c0002311:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002317:	b9 03 00 00 00       	mov    ecx,0x3
c000231c:	e8 c9 f7 ff ff       	call   c0001aea <mem_cmp>
c0002321:	31 d2                	xor    edx,edx
c0002323:	85 c0                	test   eax,eax
c0002325:	74 29                	je     c0002350 <check_fs+0xb3>
c0002327:	ba 4c 60 02 c0       	mov    edx,0xc002604c
c000232c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002332:	b9 05 00 00 00       	mov    ecx,0x5
c0002337:	e8 ae f7 ff ff       	call   c0001aea <mem_cmp>
c000233c:	31 d2                	xor    edx,edx
c000233e:	85 c0                	test   eax,eax
c0002340:	74 0e                	je     c0002350 <check_fs+0xb3>
c0002342:	31 d2                	xor    edx,edx
c0002344:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000234b:	0f 95 c2             	setne  dl
c000234e:	01 d2                	add    edx,edx
c0002350:	89 d0                	mov    eax,edx
c0002352:	83 c4 08             	add    esp,0x8
c0002355:	5b                   	pop    ebx
c0002356:	c3                   	ret    

c0002357 <find_volume>:
c0002357:	55                   	push   ebp
c0002358:	31 c9                	xor    ecx,ecx
c000235a:	57                   	push   edi
c000235b:	56                   	push   esi
c000235c:	89 d6                	mov    esi,edx
c000235e:	53                   	push   ebx
c000235f:	31 d2                	xor    edx,edx
c0002361:	83 ec 3c             	sub    esp,0x3c
c0002364:	89 c3                	mov    ebx,eax
c0002366:	e8 32 ff ff ff       	call   c000229d <check_fs>
c000236b:	83 f8 02             	cmp    eax,0x2
c000236e:	74 0e                	je     c000237e <find_volume+0x27>
c0002370:	0f 87 5d 01 00 00    	ja     c00024d3 <find_volume+0x17c>
c0002376:	85 f6                	test   esi,esi
c0002378:	0f 84 55 01 00 00    	je     c00024d3 <find_volume+0x17c>
c000237e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002385:	0f 85 dd 00 00 00    	jne    c0002468 <find_volume+0x111>
c000238b:	31 c9                	xor    ecx,ecx
c000238d:	ba 01 00 00 00       	mov    edx,0x1
c0002392:	89 d8                	mov    eax,ebx
c0002394:	e8 90 fe ff ff       	call   c0002229 <move_window>
c0002399:	85 c0                	test   eax,eax
c000239b:	74 0a                	je     c00023a7 <find_volume+0x50>
c000239d:	b8 04 00 00 00       	mov    eax,0x4
c00023a2:	e9 2c 01 00 00       	jmp    c00024d3 <find_volume+0x17c>
c00023a7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00023aa:	89 e8                	mov    eax,ebp
c00023ac:	e8 f6 fc ff ff       	call   c00020a7 <test_gpt_header>
c00023b1:	85 c0                	test   eax,eax
c00023b3:	75 0a                	jne    c00023bf <find_volume+0x68>
c00023b5:	b8 03 00 00 00       	mov    eax,0x3
c00023ba:	e9 14 01 00 00       	jmp    c00024d3 <find_volume+0x17c>
c00023bf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023c5:	e8 8e f6 ff ff       	call   c0001a58 <ld_dword>
c00023ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023ce:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023d4:	e8 97 f6 ff ff       	call   c0001a70 <ld_qword>
c00023d9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023e5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023e9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023f1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023f5:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023f9:	74 ba                	je     c00023b5 <find_volume+0x5e>
c00023fb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023ff:	31 c9                	xor    ecx,ecx
c0002401:	c1 e7 07             	shl    edi,0x7
c0002404:	89 d8                	mov    eax,ebx
c0002406:	89 fa                	mov    edx,edi
c0002408:	c1 ea 09             	shr    edx,0x9
c000240b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000240f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002413:	e8 11 fe ff ff       	call   c0002229 <move_window>
c0002418:	85 c0                	test   eax,eax
c000241a:	75 81                	jne    c000239d <find_volume+0x46>
c000241c:	81 e7 80 01 00 00    	and    edi,0x180
c0002422:	b9 10 00 00 00       	mov    ecx,0x10
c0002427:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000242b:	ba 30 60 02 c0       	mov    edx,0xc0026030
c0002430:	e8 b5 f6 ff ff       	call   c0001aea <mem_cmp>
c0002435:	85 c0                	test   eax,eax
c0002437:	75 29                	jne    c0002462 <find_volume+0x10b>
c0002439:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000243d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002441:	e8 2a f6 ff ff       	call   c0001a70 <ld_qword>
c0002446:	89 d1                	mov    ecx,edx
c0002448:	89 c2                	mov    edx,eax
c000244a:	89 d8                	mov    eax,ebx
c000244c:	e8 4c fe ff ff       	call   c000229d <check_fs>
c0002451:	85 f6                	test   esi,esi
c0002453:	75 07                	jne    c000245c <find_volume+0x105>
c0002455:	83 f8 01             	cmp    eax,0x1
c0002458:	77 08                	ja     c0002462 <find_volume+0x10b>
c000245a:	eb 77                	jmp    c00024d3 <find_volume+0x17c>
c000245c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002460:	74 71                	je     c00024d3 <find_volume+0x17c>
c0002462:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002466:	eb 89                	jmp    c00023f1 <find_volume+0x9a>
c0002468:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000246c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002472:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002478:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000247c:	89 cd                	mov    ebp,ecx
c000247e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002482:	89 f8                	mov    eax,edi
c0002484:	83 c7 10             	add    edi,0x10
c0002487:	e8 cc f5 ff ff       	call   c0001a58 <ld_dword>
c000248c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002490:	89 01                	mov    DWORD PTR [ecx],eax
c0002492:	83 c1 04             	add    ecx,0x4
c0002495:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002499:	75 e3                	jne    c000247e <find_volume+0x127>
c000249b:	31 ff                	xor    edi,edi
c000249d:	85 f6                	test   esi,esi
c000249f:	74 03                	je     c00024a4 <find_volume+0x14d>
c00024a1:	8d 7e ff             	lea    edi,[esi-0x1]
c00024a4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00024a8:	85 d2                	test   edx,edx
c00024aa:	74 14                	je     c00024c0 <find_volume+0x169>
c00024ac:	31 c9                	xor    ecx,ecx
c00024ae:	89 d8                	mov    eax,ebx
c00024b0:	e8 e8 fd ff ff       	call   c000229d <check_fs>
c00024b5:	83 f8 01             	cmp    eax,0x1
c00024b8:	76 19                	jbe    c00024d3 <find_volume+0x17c>
c00024ba:	85 f6                	test   esi,esi
c00024bc:	74 0f                	je     c00024cd <find_volume+0x176>
c00024be:	eb 13                	jmp    c00024d3 <find_volume+0x17c>
c00024c0:	85 f6                	test   esi,esi
c00024c2:	0f 85 ed fe ff ff    	jne    c00023b5 <find_volume+0x5e>
c00024c8:	b8 03 00 00 00       	mov    eax,0x3
c00024cd:	47                   	inc    edi
c00024ce:	83 ff 03             	cmp    edi,0x3
c00024d1:	76 d1                	jbe    c00024a4 <find_volume+0x14d>
c00024d3:	83 c4 3c             	add    esp,0x3c
c00024d6:	5b                   	pop    ebx
c00024d7:	5e                   	pop    esi
c00024d8:	5f                   	pop    edi
c00024d9:	5d                   	pop    ebp
c00024da:	c3                   	ret    

c00024db <mount_volume>:
c00024db:	55                   	push   ebp
c00024dc:	57                   	push   edi
c00024dd:	89 cf                	mov    edi,ecx
c00024df:	56                   	push   esi
c00024e0:	53                   	push   ebx
c00024e1:	bb 0b 00 00 00       	mov    ebx,0xb
c00024e6:	83 ec 3c             	sub    esp,0x3c
c00024e9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024ef:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024f3:	e8 35 fb ff ff       	call   c000202d <get_ldnumber>
c00024f8:	85 c0                	test   eax,eax
c00024fa:	0f 88 3a 05 00 00    	js     c0002a3a <mount_volume+0x55f>
c0002500:	8b 2c 85 20 a6 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd59e0]
c0002507:	89 c6                	mov    esi,eax
c0002509:	bb 0c 00 00 00       	mov    ebx,0xc
c000250e:	85 ed                	test   ebp,ebp
c0002510:	0f 84 24 05 00 00    	je     c0002a3a <mount_volume+0x55f>
c0002516:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000251a:	83 e7 fe             	and    edi,0xfffffffe
c000251d:	89 2a                	mov    DWORD PTR [edx],ebp
c000251f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002523:	74 32                	je     c0002557 <mount_volume+0x7c>
c0002525:	83 ec 0c             	sub    esp,0xc
c0002528:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000252c:	50                   	push   eax
c000252d:	e8 c8 f4 ff ff       	call   c00019fa <disk_status>
c0002532:	83 c4 10             	add    esp,0x10
c0002535:	a8 01                	test   al,0x1
c0002537:	75 1e                	jne    c0002557 <mount_volume+0x7c>
c0002539:	31 db                	xor    ebx,ebx
c000253b:	89 f9                	mov    ecx,edi
c000253d:	84 c9                	test   cl,cl
c000253f:	0f 84 f5 04 00 00    	je     c0002a3a <mount_volume+0x55f>
c0002545:	a8 04                	test   al,0x4
c0002547:	0f 84 ed 04 00 00    	je     c0002a3a <mount_volume+0x55f>
c000254d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002552:	e9 e3 04 00 00       	jmp    c0002a3a <mount_volume+0x55f>
c0002557:	83 ec 0c             	sub    esp,0xc
c000255a:	89 f0                	mov    eax,esi
c000255c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002560:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002563:	0f b6 f0             	movzx  esi,al
c0002566:	bb 03 00 00 00       	mov    ebx,0x3
c000256b:	56                   	push   esi
c000256c:	e8 8c f4 ff ff       	call   c00019fd <disk_initialize>
c0002571:	83 c4 10             	add    esp,0x10
c0002574:	a8 01                	test   al,0x1
c0002576:	0f 85 be 04 00 00    	jne    c0002a3a <mount_volume+0x55f>
c000257c:	89 f9                	mov    ecx,edi
c000257e:	84 c9                	test   cl,cl
c0002580:	74 04                	je     c0002586 <mount_volume+0xab>
c0002582:	a8 04                	test   al,0x4
c0002584:	75 c7                	jne    c000254d <mount_volume+0x72>
c0002586:	31 d2                	xor    edx,edx
c0002588:	89 e8                	mov    eax,ebp
c000258a:	e8 c8 fd ff ff       	call   c0002357 <find_volume>
c000258f:	83 f8 04             	cmp    eax,0x4
c0002592:	75 0a                	jne    c000259e <mount_volume+0xc3>
c0002594:	bb 01 00 00 00       	mov    ebx,0x1
c0002599:	e9 9c 04 00 00       	jmp    c0002a3a <mount_volume+0x55f>
c000259e:	83 f8 01             	cmp    eax,0x1
c00025a1:	76 0a                	jbe    c00025ad <mount_volume+0xd2>
c00025a3:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a8:	e9 8d 04 00 00       	jmp    c0002a3a <mount_volume+0x55f>
c00025ad:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025b0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025bb:	75 17                	jne    c00025d4 <mount_volume+0xf9>
c00025bd:	b8 0b 00 00 00       	mov    eax,0xb
c00025c2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025c7:	75 da                	jne    c00025a3 <mount_volume+0xc8>
c00025c9:	40                   	inc    eax
c00025ca:	83 f8 40             	cmp    eax,0x40
c00025cd:	75 f3                	jne    c00025c2 <mount_volume+0xe7>
c00025cf:	e9 5a 02 00 00       	jmp    c000282e <mount_volume+0x353>
c00025d4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025d7:	e8 6f f4 ff ff       	call   c0001a4b <ld_word>
c00025dc:	66 3d 00 02          	cmp    ax,0x200
c00025e0:	75 c1                	jne    c00025a3 <mount_volume+0xc8>
c00025e2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025e5:	e8 61 f4 ff ff       	call   c0001a4b <ld_word>
c00025ea:	0f b7 c0             	movzx  eax,ax
c00025ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025f1:	85 c0                	test   eax,eax
c00025f3:	75 0c                	jne    c0002601 <mount_volume+0x126>
c00025f5:	8d 45 78             	lea    eax,[ebp+0x78]
c00025f8:	e8 5b f4 ff ff       	call   c0001a58 <ld_dword>
c00025fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002605:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002608:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000260b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000260f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002612:	48                   	dec    eax
c0002613:	3c 01                	cmp    al,0x1
c0002615:	77 8c                	ja     c00025a3 <mount_volume+0xc8>
c0002617:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000261b:	89 c3                	mov    ebx,eax
c000261d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002621:	66 85 c0             	test   ax,ax
c0002624:	0f 84 79 ff ff ff    	je     c00025a3 <mount_volume+0xc8>
c000262a:	8d 40 ff             	lea    eax,[eax-0x1]
c000262d:	85 d8                	test   eax,ebx
c000262f:	0f 85 6e ff ff ff    	jne    c00025a3 <mount_volume+0xc8>
c0002635:	8d 45 65             	lea    eax,[ebp+0x65]
c0002638:	e8 0e f4 ff ff       	call   c0001a4b <ld_word>
c000263d:	89 c7                	mov    edi,eax
c000263f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002643:	a8 0f                	test   al,0xf
c0002645:	0f 85 58 ff ff ff    	jne    c00025a3 <mount_volume+0xc8>
c000264b:	8d 45 67             	lea    eax,[ebp+0x67]
c000264e:	e8 f8 f3 ff ff       	call   c0001a4b <ld_word>
c0002653:	0f b7 f0             	movzx  esi,ax
c0002656:	85 f6                	test   esi,esi
c0002658:	75 0a                	jne    c0002664 <mount_volume+0x189>
c000265a:	8d 45 74             	lea    eax,[ebp+0x74]
c000265d:	e8 f6 f3 ff ff       	call   c0001a58 <ld_dword>
c0002662:	89 c6                	mov    esi,eax
c0002664:	8d 45 62             	lea    eax,[ebp+0x62]
c0002667:	e8 df f3 ff ff       	call   c0001a4b <ld_word>
c000266c:	66 85 c0             	test   ax,ax
c000266f:	0f 84 2e ff ff ff    	je     c00025a3 <mount_volume+0xc8>
c0002675:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000267a:	0f b7 c8             	movzx  ecx,ax
c000267d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002682:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002686:	89 fa                	mov    edx,edi
c0002688:	66 c1 ea 04          	shr    dx,0x4
c000268c:	0f b7 d2             	movzx  edx,dx
c000268f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002693:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002696:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000269a:	39 c6                	cmp    esi,eax
c000269c:	0f 82 01 ff ff ff    	jb     c00025a3 <mount_volume+0xc8>
c00026a2:	29 c6                	sub    esi,eax
c00026a4:	31 d2                	xor    edx,edx
c00026a6:	89 f0                	mov    eax,esi
c00026a8:	f7 f3                	div    ebx
c00026aa:	39 de                	cmp    esi,ebx
c00026ac:	0f 82 f1 fe ff ff    	jb     c00025a3 <mount_volume+0xc8>
c00026b2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026b7:	0f 87 e6 fe ff ff    	ja     c00025a3 <mount_volume+0xc8>
c00026bd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026c2:	0f 86 63 03 00 00    	jbe    c0002a2b <mount_volume+0x550>
c00026c8:	bb 03 00 00 00       	mov    ebx,0x3
c00026cd:	8d 70 02             	lea    esi,[eax+0x2]
c00026d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026d8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026db:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026de:	31 d2                	xor    edx,edx
c00026e0:	89 c8                	mov    eax,ecx
c00026e2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026e5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026e9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026ed:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026f5:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026f8:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026ff:	31 d2                	xor    edx,edx
c0002701:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002705:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002709:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000270c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000270f:	83 fb 03             	cmp    ebx,0x3
c0002712:	75 2b                	jne    c000273f <mount_volume+0x264>
c0002714:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002717:	e8 2f f3 ff ff       	call   c0001a4b <ld_word>
c000271c:	66 09 c7             	or     di,ax
c000271f:	0f 85 7e fe ff ff    	jne    c00025a3 <mount_volume+0xc8>
c0002725:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000272b:	c1 e6 02             	shl    esi,0x2
c000272e:	e8 25 f3 ff ff       	call   c0001a58 <ld_dword>
c0002733:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000273a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000273d:	eb 30                	jmp    c000276f <mount_volume+0x294>
c000273f:	66 85 ff             	test   di,di
c0002742:	0f 84 5b fe ff ff    	je     c00025a3 <mount_volume+0xc8>
c0002748:	31 d2                	xor    edx,edx
c000274a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000274e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002752:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002756:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002759:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000275c:	83 fb 02             	cmp    ebx,0x2
c000275f:	75 04                	jne    c0002765 <mount_volume+0x28a>
c0002761:	01 f6                	add    esi,esi
c0002763:	eb 0a                	jmp    c000276f <mount_volume+0x294>
c0002765:	8d 04 76             	lea    eax,[esi+esi*2]
c0002768:	83 e6 01             	and    esi,0x1
c000276b:	d1 e8                	shr    eax,1
c000276d:	01 c6                	add    esi,eax
c000276f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002775:	c1 ee 09             	shr    esi,0x9
c0002778:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000277c:	0f 87 21 fe ff ff    	ja     c00025a3 <mount_volume+0xc8>
c0002782:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002789:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002790:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002794:	83 fb 03             	cmp    ebx,0x3
c0002797:	75 7a                	jne    c0002813 <mount_volume+0x338>
c0002799:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000279f:	e8 a7 f2 ff ff       	call   c0001a4b <ld_word>
c00027a4:	66 48                	dec    ax
c00027a6:	75 6b                	jne    c0002813 <mount_volume+0x338>
c00027a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00027ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027b0:	83 c2 01             	add    edx,0x1
c00027b3:	89 e8                	mov    eax,ebp
c00027b5:	83 d1 00             	adc    ecx,0x0
c00027b8:	e8 6c fa ff ff       	call   c0002229 <move_window>
c00027bd:	85 c0                	test   eax,eax
c00027bf:	75 52                	jne    c0002813 <mount_volume+0x338>
c00027c1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027c5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027cb:	e8 7b f2 ff ff       	call   c0001a4b <ld_word>
c00027d0:	66 3d 55 aa          	cmp    ax,0xaa55
c00027d4:	75 3d                	jne    c0002813 <mount_volume+0x338>
c00027d6:	8d 45 54             	lea    eax,[ebp+0x54]
c00027d9:	e8 7a f2 ff ff       	call   c0001a58 <ld_dword>
c00027de:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027e3:	75 2e                	jne    c0002813 <mount_volume+0x338>
c00027e5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027eb:	e8 68 f2 ff ff       	call   c0001a58 <ld_dword>
c00027f0:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027f5:	75 1c                	jne    c0002813 <mount_volume+0x338>
c00027f7:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027fd:	e8 56 f2 ff ff       	call   c0001a58 <ld_dword>
c0002802:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002805:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000280b:	e8 48 f2 ff ff       	call   c0001a58 <ld_dword>
c0002810:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002813:	66 a1 00 a6 02 c0    	mov    ax,ds:0xc002a600
c0002819:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000281c:	40                   	inc    eax
c000281d:	31 db                	xor    ebx,ebx
c000281f:	66 a3 00 a6 02 c0    	mov    ds:0xc002a600,ax
c0002825:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002829:	e9 0c 02 00 00       	jmp    c0002a3a <mount_volume+0x55f>
c000282e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002834:	e8 12 f2 ff ff       	call   c0001a4b <ld_word>
c0002839:	66 3d 00 01          	cmp    ax,0x100
c000283d:	0f 85 60 fd ff ff    	jne    c00025a3 <mount_volume+0xc8>
c0002843:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000284a:	0f 85 53 fd ff ff    	jne    c00025a3 <mount_volume+0xc8>
c0002850:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002856:	e8 15 f2 ff ff       	call   c0001a70 <ld_qword>
c000285b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000285f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002863:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002869:	e8 ea f1 ff ff       	call   c0001a58 <ld_dword>
c000286e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002871:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002877:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000287a:	fe c8                	dec    al
c000287c:	0f 85 21 fd ff ff    	jne    c00025a3 <mount_volume+0xc8>
c0002882:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002889:	bb 01 00 00 00       	mov    ebx,0x1
c000288e:	d3 e3                	shl    ebx,cl
c0002890:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002894:	66 85 db             	test   bx,bx
c0002897:	0f 84 06 fd ff ff    	je     c00025a3 <mount_volume+0xc8>
c000289d:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00028a3:	e8 b0 f1 ff ff       	call   c0001a58 <ld_dword>
c00028a8:	89 c6                	mov    esi,eax
c00028aa:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028af:	0f 87 ee fc ff ff    	ja     c00025a3 <mount_volume+0xc8>
c00028b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b9:	8d 40 02             	lea    eax,[eax+0x2]
c00028bc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028bf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028c6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028c9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028cf:	e8 84 f1 ff ff       	call   c0001a58 <ld_dword>
c00028d4:	31 d2                	xor    edx,edx
c00028d6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028da:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028e2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028e6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028ec:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028f2:	e8 61 f1 ff ff       	call   c0001a58 <ld_dword>
c00028f7:	31 d2                	xor    edx,edx
c00028f9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028fd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002901:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002905:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002908:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000290b:	0f b7 c3             	movzx  eax,bx
c000290e:	31 d2                	xor    edx,edx
c0002910:	0f af f0             	imul   esi,eax
c0002913:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002917:	89 f0                	mov    eax,esi
c0002919:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c000291d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002921:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002925:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002929:	39 c1                	cmp    ecx,eax
c000292b:	89 df                	mov    edi,ebx
c000292d:	19 d7                	sbb    edi,edx
c000292f:	0f 82 6e fc ff ff    	jb     c00025a3 <mount_volume+0xc8>
c0002935:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000293b:	31 db                	xor    ebx,ebx
c000293d:	e8 16 f1 ff ff       	call   c0001a58 <ld_dword>
c0002942:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002949:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000294c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002954:	85 db                	test   ebx,ebx
c0002956:	75 39                	jne    c0002991 <mount_volume+0x4b6>
c0002958:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000295c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002960:	0f 86 3d fc ff ff    	jbe    c00025a3 <mount_volume+0xc8>
c0002966:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002969:	31 ff                	xor    edi,edi
c000296b:	89 e8                	mov    eax,ebp
c000296d:	e8 72 f3 ff ff       	call   c0001ce4 <clst2sect>
c0002972:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002976:	01 c6                	add    esi,eax
c0002978:	89 e8                	mov    eax,ebp
c000297a:	11 d7                	adc    edi,edx
c000297c:	89 f2                	mov    edx,esi
c000297e:	89 f9                	mov    ecx,edi
c0002980:	e8 a4 f8 ff ff       	call   c0002229 <move_window>
c0002985:	85 c0                	test   eax,eax
c0002987:	0f 85 07 fc ff ff    	jne    c0002594 <mount_volume+0xb9>
c000298d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002991:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002996:	74 0b                	je     c00029a3 <mount_volume+0x4c8>
c0002998:	83 c3 20             	add    ebx,0x20
c000299b:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00029a1:	eb b1                	jmp    c0002954 <mount_volume+0x479>
c00029a3:	8d 75 54             	lea    esi,[ebp+0x54]
c00029a6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00029aa:	e8 a9 f0 ff ff       	call   c0001a58 <ld_dword>
c00029af:	89 c3                	mov    ebx,eax
c00029b1:	83 f8 01             	cmp    eax,0x1
c00029b4:	0f 86 e9 fb ff ff    	jbe    c00025a3 <mount_volume+0xc8>
c00029ba:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029bd:	0f 86 e0 fb ff ff    	jbe    c00025a3 <mount_volume+0xc8>
c00029c3:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029c6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029ca:	0f af c2             	imul   eax,edx
c00029cd:	31 d2                	xor    edx,edx
c00029cf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029d2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029d5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029d8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029db:	31 c9                	xor    ecx,ecx
c00029dd:	89 da                	mov    edx,ebx
c00029df:	89 e8                	mov    eax,ebp
c00029e1:	c1 ea 07             	shr    edx,0x7
c00029e4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029e7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029ea:	e8 3a f8 ff ff       	call   c0002229 <move_window>
c00029ef:	85 c0                	test   eax,eax
c00029f1:	0f 85 9d fb ff ff    	jne    c0002594 <mount_volume+0xb9>
c00029f7:	89 d8                	mov    eax,ebx
c00029f9:	83 e0 7f             	and    eax,0x7f
c00029fc:	8d 04 86             	lea    eax,[esi+eax*4]
c00029ff:	e8 54 f0 ff ff       	call   c0001a58 <ld_dword>
c0002a04:	83 f8 ff             	cmp    eax,0xffffffff
c0002a07:	74 0a                	je     c0002a13 <mount_volume+0x538>
c0002a09:	43                   	inc    ebx
c0002a0a:	39 d8                	cmp    eax,ebx
c0002a0c:	74 cd                	je     c00029db <mount_volume+0x500>
c0002a0e:	e9 90 fb ff ff       	jmp    c00025a3 <mount_volume+0xc8>
c0002a13:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a1a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a21:	bb 04 00 00 00       	mov    ebx,0x4
c0002a26:	e9 e8 fd ff ff       	jmp    c0002813 <mount_volume+0x338>
c0002a2b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002a30:	19 db                	sbb    ebx,ebx
c0002a32:	83 c3 02             	add    ebx,0x2
c0002a35:	e9 93 fc ff ff       	jmp    c00026cd <mount_volume+0x1f2>
c0002a3a:	83 c4 3c             	add    esp,0x3c
c0002a3d:	89 d8                	mov    eax,ebx
c0002a3f:	5b                   	pop    ebx
c0002a40:	5e                   	pop    esi
c0002a41:	5f                   	pop    edi
c0002a42:	5d                   	pop    ebp
c0002a43:	c3                   	ret    

c0002a44 <find_bitmap>:
c0002a44:	55                   	push   ebp
c0002a45:	57                   	push   edi
c0002a46:	89 c7                	mov    edi,eax
c0002a48:	56                   	push   esi
c0002a49:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a4c:	53                   	push   ebx
c0002a4d:	83 ec 1c             	sub    esp,0x1c
c0002a50:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a53:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a57:	83 e8 02             	sub    eax,0x2
c0002a5a:	39 f0                	cmp    eax,esi
c0002a5c:	77 02                	ja     c0002a60 <find_bitmap+0x1c>
c0002a5e:	31 f6                	xor    esi,esi
c0002a60:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a64:	89 f3                	mov    ebx,esi
c0002a66:	31 ed                	xor    ebp,ebp
c0002a68:	31 c9                	xor    ecx,ecx
c0002a6a:	89 da                	mov    edx,ebx
c0002a6c:	89 f8                	mov    eax,edi
c0002a6e:	c1 ea 0c             	shr    edx,0xc
c0002a71:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a74:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a77:	e8 ad f7 ff ff       	call   c0002229 <move_window>
c0002a7c:	85 c0                	test   eax,eax
c0002a7e:	75 68                	jne    c0002ae8 <find_bitmap+0xa4>
c0002a80:	89 da                	mov    edx,ebx
c0002a82:	89 d9                	mov    ecx,ebx
c0002a84:	c1 ea 03             	shr    edx,0x3
c0002a87:	83 e1 07             	and    ecx,0x7
c0002a8a:	b8 01 00 00 00       	mov    eax,0x1
c0002a8f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a95:	d3 e0                	shl    eax,cl
c0002a97:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a9a:	83 e9 02             	sub    ecx,0x2
c0002a9d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aa1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002aa5:	43                   	inc    ebx
c0002aa6:	21 c1                	and    ecx,eax
c0002aa8:	d1 e0                	shl    eax,1
c0002aaa:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002aae:	77 09                	ja     c0002ab9 <find_bitmap+0x75>
c0002ab0:	31 db                	xor    ebx,ebx
c0002ab2:	ba 00 02 00 00       	mov    edx,0x200
c0002ab7:	31 c0                	xor    eax,eax
c0002ab9:	84 c9                	test   cl,cl
c0002abb:	75 10                	jne    c0002acd <find_bitmap+0x89>
c0002abd:	45                   	inc    ebp
c0002abe:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ac2:	75 0f                	jne    c0002ad3 <find_bitmap+0x8f>
c0002ac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ac8:	83 c0 02             	add    eax,0x2
c0002acb:	eb 22                	jmp    c0002aef <find_bitmap+0xab>
c0002acd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ad1:	31 ed                	xor    ebp,ebp
c0002ad3:	39 de                	cmp    esi,ebx
c0002ad5:	74 16                	je     c0002aed <find_bitmap+0xa9>
c0002ad7:	84 c0                	test   al,al
c0002ad9:	75 c6                	jne    c0002aa1 <find_bitmap+0x5d>
c0002adb:	42                   	inc    edx
c0002adc:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002ae2:	77 84                	ja     c0002a68 <find_bitmap+0x24>
c0002ae4:	b0 01                	mov    al,0x1
c0002ae6:	eb b9                	jmp    c0002aa1 <find_bitmap+0x5d>
c0002ae8:	83 c8 ff             	or     eax,0xffffffff
c0002aeb:	eb 02                	jmp    c0002aef <find_bitmap+0xab>
c0002aed:	31 c0                	xor    eax,eax
c0002aef:	83 c4 1c             	add    esp,0x1c
c0002af2:	5b                   	pop    ebx
c0002af3:	5e                   	pop    esi
c0002af4:	5f                   	pop    edi
c0002af5:	5d                   	pop    ebp
c0002af6:	c3                   	ret    

c0002af7 <change_bitmap>:
c0002af7:	55                   	push   ebp
c0002af8:	89 cd                	mov    ebp,ecx
c0002afa:	57                   	push   edi
c0002afb:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002afe:	56                   	push   esi
c0002aff:	89 c7                	mov    edi,eax
c0002b01:	53                   	push   ebx
c0002b02:	89 c8                	mov    eax,ecx
c0002b04:	83 ec 1c             	sub    esp,0x1c
c0002b07:	31 d2                	xor    edx,edx
c0002b09:	89 ce                	mov    esi,ecx
c0002b0b:	c1 e8 0c             	shr    eax,0xc
c0002b0e:	bb 01 00 00 00       	mov    ebx,0x1
c0002b13:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b16:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b19:	c1 ee 03             	shr    esi,0x3
c0002b1c:	83 e1 07             	and    ecx,0x7
c0002b1f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b25:	d3 e3                	shl    ebx,cl
c0002b27:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b2b:	89 c1                	mov    ecx,eax
c0002b2d:	89 d3                	mov    ebx,edx
c0002b2f:	83 c1 01             	add    ecx,0x1
c0002b32:	83 d3 00             	adc    ebx,0x0
c0002b35:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b39:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b3d:	89 d1                	mov    ecx,edx
c0002b3f:	89 c2                	mov    edx,eax
c0002b41:	89 f8                	mov    eax,edi
c0002b43:	e8 e1 f6 ff ff       	call   c0002229 <move_window>
c0002b48:	89 c1                	mov    ecx,eax
c0002b4a:	85 c0                	test   eax,eax
c0002b4c:	75 48                	jne    c0002b96 <change_bitmap+0x9f>
c0002b4e:	31 d2                	xor    edx,edx
c0002b50:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b54:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b58:	0f 95 c2             	setne  dl
c0002b5b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b5f:	74 3c                	je     c0002b9d <change_bitmap+0xa6>
c0002b61:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b65:	4d                   	dec    ebp
c0002b66:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b6a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b6e:	74 32                	je     c0002ba2 <change_bitmap+0xab>
c0002b70:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b74:	75 d8                	jne    c0002b4e <change_bitmap+0x57>
c0002b76:	8d 46 01             	lea    eax,[esi+0x1]
c0002b79:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b7e:	89 c3                	mov    ebx,eax
c0002b80:	31 f6                	xor    esi,esi
c0002b82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b86:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b8a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b90:	74 99                	je     c0002b2b <change_bitmap+0x34>
c0002b92:	89 de                	mov    esi,ebx
c0002b94:	eb b8                	jmp    c0002b4e <change_bitmap+0x57>
c0002b96:	b9 01 00 00 00       	mov    ecx,0x1
c0002b9b:	eb 05                	jmp    c0002ba2 <change_bitmap+0xab>
c0002b9d:	b9 02 00 00 00       	mov    ecx,0x2
c0002ba2:	83 c4 1c             	add    esp,0x1c
c0002ba5:	89 c8                	mov    eax,ecx
c0002ba7:	5b                   	pop    ebx
c0002ba8:	5e                   	pop    esi
c0002ba9:	5f                   	pop    edi
c0002baa:	5d                   	pop    ebp
c0002bab:	c3                   	ret    

c0002bac <put_fat>:
c0002bac:	83 fa 01             	cmp    edx,0x1
c0002baf:	0f 86 7b 01 00 00    	jbe    c0002d30 <put_fat+0x184>
c0002bb5:	55                   	push   ebp
c0002bb6:	57                   	push   edi
c0002bb7:	89 cf                	mov    edi,ecx
c0002bb9:	56                   	push   esi
c0002bba:	b9 02 00 00 00       	mov    ecx,0x2
c0002bbf:	53                   	push   ebx
c0002bc0:	89 c6                	mov    esi,eax
c0002bc2:	83 ec 1c             	sub    esp,0x1c
c0002bc5:	89 d3                	mov    ebx,edx
c0002bc7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bca:	0f 86 68 01 00 00    	jbe    c0002d38 <put_fat+0x18c>
c0002bd0:	8a 00                	mov    al,BYTE PTR [eax]
c0002bd2:	3c 02                	cmp    al,0x2
c0002bd4:	0f 84 c7 00 00 00    	je     c0002ca1 <put_fat+0xf5>
c0002bda:	77 09                	ja     c0002be5 <put_fat+0x39>
c0002bdc:	fe c8                	dec    al
c0002bde:	74 17                	je     c0002bf7 <put_fat+0x4b>
c0002be0:	e9 53 01 00 00       	jmp    c0002d38 <put_fat+0x18c>
c0002be5:	b9 02 00 00 00       	mov    ecx,0x2
c0002bea:	3c 04                	cmp    al,0x4
c0002bec:	0f 86 e1 00 00 00    	jbe    c0002cd3 <put_fat+0x127>
c0002bf2:	e9 41 01 00 00       	jmp    c0002d38 <put_fat+0x18c>
c0002bf7:	89 d5                	mov    ebp,edx
c0002bf9:	31 c9                	xor    ecx,ecx
c0002bfb:	d1 ed                	shr    ebp,1
c0002bfd:	89 f0                	mov    eax,esi
c0002bff:	01 d5                	add    ebp,edx
c0002c01:	89 ea                	mov    edx,ebp
c0002c03:	c1 ea 09             	shr    edx,0x9
c0002c06:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c09:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c0c:	e8 18 f6 ff ff       	call   c0002229 <move_window>
c0002c11:	89 c1                	mov    ecx,eax
c0002c13:	85 c0                	test   eax,eax
c0002c15:	0f 85 1d 01 00 00    	jne    c0002d38 <put_fat+0x18c>
c0002c1b:	8d 46 54             	lea    eax,[esi+0x54]
c0002c1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c22:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c25:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c2f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c33:	89 f8                	mov    eax,edi
c0002c35:	83 e3 01             	and    ebx,0x1
c0002c38:	74 0d                	je     c0002c47 <put_fat+0x9b>
c0002c3a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c3d:	89 fa                	mov    edx,edi
c0002c3f:	83 e0 0f             	and    eax,0xf
c0002c42:	c1 e2 04             	shl    edx,0x4
c0002c45:	09 d0                	or     eax,edx
c0002c47:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c4a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c4e:	31 c9                	xor    ecx,ecx
c0002c50:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c54:	c1 ea 09             	shr    edx,0x9
c0002c57:	89 f0                	mov    eax,esi
c0002c59:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c5c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c5f:	e8 c5 f5 ff ff       	call   c0002229 <move_window>
c0002c64:	89 c1                	mov    ecx,eax
c0002c66:	85 c0                	test   eax,eax
c0002c68:	0f 85 ca 00 00 00    	jne    c0002d38 <put_fat+0x18c>
c0002c6e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c72:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c78:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c7c:	85 db                	test   ebx,ebx
c0002c7e:	74 07                	je     c0002c87 <put_fat+0xdb>
c0002c80:	c1 ef 04             	shr    edi,0x4
c0002c83:	89 fa                	mov    edx,edi
c0002c85:	eb 0e                	jmp    c0002c95 <put_fat+0xe9>
c0002c87:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c8a:	c1 ef 08             	shr    edi,0x8
c0002c8d:	83 e2 f0             	and    edx,0xfffffff0
c0002c90:	83 e7 0f             	and    edi,0xf
c0002c93:	09 fa                	or     edx,edi
c0002c95:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c98:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c9c:	e9 97 00 00 00       	jmp    c0002d38 <put_fat+0x18c>
c0002ca1:	31 c9                	xor    ecx,ecx
c0002ca3:	c1 ea 08             	shr    edx,0x8
c0002ca6:	89 f0                	mov    eax,esi
c0002ca8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cab:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cae:	e8 76 f5 ff ff       	call   c0002229 <move_window>
c0002cb3:	89 c1                	mov    ecx,eax
c0002cb5:	85 c0                	test   eax,eax
c0002cb7:	75 7f                	jne    c0002d38 <put_fat+0x18c>
c0002cb9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cbd:	01 db                	add    ebx,ebx
c0002cbf:	0f b7 d7             	movzx  edx,di
c0002cc2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cc8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ccc:	e8 ec ed ff ff       	call   c0001abd <st_word>
c0002cd1:	eb 53                	jmp    c0002d26 <put_fat+0x17a>
c0002cd3:	31 c9                	xor    ecx,ecx
c0002cd5:	c1 ea 07             	shr    edx,0x7
c0002cd8:	89 f0                	mov    eax,esi
c0002cda:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cdd:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ce0:	e8 44 f5 ff ff       	call   c0002229 <move_window>
c0002ce5:	89 c1                	mov    ecx,eax
c0002ce7:	85 c0                	test   eax,eax
c0002ce9:	75 4d                	jne    c0002d38 <put_fat+0x18c>
c0002ceb:	c1 e3 02             	shl    ebx,0x2
c0002cee:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cf4:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cf7:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cfb:	74 1c                	je     c0002d19 <put_fat+0x16d>
c0002cfd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d01:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002d07:	89 d8                	mov    eax,ebx
c0002d09:	e8 4a ed ff ff       	call   c0001a58 <ld_dword>
c0002d0e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d12:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d17:	09 c7                	or     edi,eax
c0002d19:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d1d:	89 fa                	mov    edx,edi
c0002d1f:	89 d8                	mov    eax,ebx
c0002d21:	e8 9b ed ff ff       	call   c0001ac1 <st_dword>
c0002d26:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d2a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d2e:	eb 08                	jmp    c0002d38 <put_fat+0x18c>
c0002d30:	b9 02 00 00 00       	mov    ecx,0x2
c0002d35:	89 c8                	mov    eax,ecx
c0002d37:	c3                   	ret    
c0002d38:	83 c4 1c             	add    esp,0x1c
c0002d3b:	89 c8                	mov    eax,ecx
c0002d3d:	5b                   	pop    ebx
c0002d3e:	5e                   	pop    esi
c0002d3f:	5f                   	pop    edi
c0002d40:	5d                   	pop    ebp
c0002d41:	c3                   	ret    

c0002d42 <fill_last_frag>:
c0002d42:	57                   	push   edi
c0002d43:	89 cf                	mov    edi,ecx
c0002d45:	56                   	push   esi
c0002d46:	89 d6                	mov    esi,edx
c0002d48:	53                   	push   ebx
c0002d49:	89 c3                	mov    ebx,eax
c0002d4b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d4e:	85 c0                	test   eax,eax
c0002d50:	74 21                	je     c0002d73 <fill_last_frag+0x31>
c0002d52:	89 f9                	mov    ecx,edi
c0002d54:	83 f8 01             	cmp    eax,0x1
c0002d57:	76 05                	jbe    c0002d5e <fill_last_frag+0x1c>
c0002d59:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d5c:	29 c1                	sub    ecx,eax
c0002d5e:	8d 56 01             	lea    edx,[esi+0x1]
c0002d61:	29 c2                	sub    edx,eax
c0002d63:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d65:	e8 42 fe ff ff       	call   c0002bac <put_fat>
c0002d6a:	85 c0                	test   eax,eax
c0002d6c:	75 05                	jne    c0002d73 <fill_last_frag+0x31>
c0002d6e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d71:	eb d8                	jmp    c0002d4b <fill_last_frag+0x9>
c0002d73:	5b                   	pop    ebx
c0002d74:	5e                   	pop    esi
c0002d75:	5f                   	pop    edi
c0002d76:	c3                   	ret    

c0002d77 <fill_first_frag>:
c0002d77:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d7b:	75 2d                	jne    c0002daa <fill_first_frag+0x33>
c0002d7d:	57                   	push   edi
c0002d7e:	56                   	push   esi
c0002d7f:	53                   	push   ebx
c0002d80:	89 c3                	mov    ebx,eax
c0002d82:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d85:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d88:	01 d7                	add    edi,edx
c0002d8a:	39 fa                	cmp    edx,edi
c0002d8c:	74 14                	je     c0002da2 <fill_first_frag+0x2b>
c0002d8e:	8d 72 01             	lea    esi,[edx+0x1]
c0002d91:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d93:	89 f1                	mov    ecx,esi
c0002d95:	e8 12 fe ff ff       	call   c0002bac <put_fat>
c0002d9a:	89 f2                	mov    edx,esi
c0002d9c:	85 c0                	test   eax,eax
c0002d9e:	74 ea                	je     c0002d8a <fill_first_frag+0x13>
c0002da0:	eb 0b                	jmp    c0002dad <fill_first_frag+0x36>
c0002da2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002da6:	31 c0                	xor    eax,eax
c0002da8:	eb 03                	jmp    c0002dad <fill_first_frag+0x36>
c0002daa:	31 c0                	xor    eax,eax
c0002dac:	c3                   	ret    
c0002dad:	5b                   	pop    ebx
c0002dae:	5e                   	pop    esi
c0002daf:	5f                   	pop    edi
c0002db0:	c3                   	ret    

c0002db1 <get_fat>:
c0002db1:	83 fa 01             	cmp    edx,0x1
c0002db4:	0f 86 db 01 00 00    	jbe    c0002f95 <get_fat+0x1e4>
c0002dba:	55                   	push   ebp
c0002dbb:	b9 01 00 00 00       	mov    ecx,0x1
c0002dc0:	57                   	push   edi
c0002dc1:	56                   	push   esi
c0002dc2:	53                   	push   ebx
c0002dc3:	83 ec 1c             	sub    esp,0x1c
c0002dc6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002dc8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002dcb:	0f 86 cc 01 00 00    	jbe    c0002f9d <get_fat+0x1ec>
c0002dd1:	89 c3                	mov    ebx,eax
c0002dd3:	89 d6                	mov    esi,edx
c0002dd5:	8a 07                	mov    al,BYTE PTR [edi]
c0002dd7:	3c 02                	cmp    al,0x2
c0002dd9:	0f 84 99 00 00 00    	je     c0002e78 <get_fat+0xc7>
c0002ddf:	77 09                	ja     c0002dea <get_fat+0x39>
c0002de1:	fe c8                	dec    al
c0002de3:	74 1a                	je     c0002dff <get_fat+0x4e>
c0002de5:	e9 b3 01 00 00       	jmp    c0002f9d <get_fat+0x1ec>
c0002dea:	3c 03                	cmp    al,0x3
c0002dec:	0f 84 b5 00 00 00    	je     c0002ea7 <get_fat+0xf6>
c0002df2:	3c 04                	cmp    al,0x4
c0002df4:	0f 84 e3 00 00 00    	je     c0002edd <get_fat+0x12c>
c0002dfa:	e9 9e 01 00 00       	jmp    c0002f9d <get_fat+0x1ec>
c0002dff:	89 d3                	mov    ebx,edx
c0002e01:	31 c9                	xor    ecx,ecx
c0002e03:	d1 eb                	shr    ebx,1
c0002e05:	89 f8                	mov    eax,edi
c0002e07:	01 d3                	add    ebx,edx
c0002e09:	89 da                	mov    edx,ebx
c0002e0b:	c1 ea 09             	shr    edx,0x9
c0002e0e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e11:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e14:	e8 10 f4 ff ff       	call   c0002229 <move_window>
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	74 08                	je     c0002e25 <get_fat+0x74>
c0002e1d:	83 c9 ff             	or     ecx,0xffffffff
c0002e20:	e9 78 01 00 00       	jmp    c0002f9d <get_fat+0x1ec>
c0002e25:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e28:	31 c9                	xor    ecx,ecx
c0002e2a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e30:	89 ea                	mov    edx,ebp
c0002e32:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e36:	c1 ea 09             	shr    edx,0x9
c0002e39:	89 f8                	mov    eax,edi
c0002e3b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e3e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e41:	e8 e3 f3 ff ff       	call   c0002229 <move_window>
c0002e46:	85 c0                	test   eax,eax
c0002e48:	75 d3                	jne    c0002e1d <get_fat+0x6c>
c0002e4a:	0f b6 c3             	movzx  eax,bl
c0002e4d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e53:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e58:	c1 e3 08             	shl    ebx,0x8
c0002e5b:	09 c3                	or     ebx,eax
c0002e5d:	89 d9                	mov    ecx,ebx
c0002e5f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e65:	83 e6 01             	and    esi,0x1
c0002e68:	0f 84 2f 01 00 00    	je     c0002f9d <get_fat+0x1ec>
c0002e6e:	89 d9                	mov    ecx,ebx
c0002e70:	c1 e9 04             	shr    ecx,0x4
c0002e73:	e9 25 01 00 00       	jmp    c0002f9d <get_fat+0x1ec>
c0002e78:	31 c9                	xor    ecx,ecx
c0002e7a:	c1 ea 08             	shr    edx,0x8
c0002e7d:	89 f8                	mov    eax,edi
c0002e7f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e82:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e85:	e8 9f f3 ff ff       	call   c0002229 <move_window>
c0002e8a:	85 c0                	test   eax,eax
c0002e8c:	75 8f                	jne    c0002e1d <get_fat+0x6c>
c0002e8e:	01 f6                	add    esi,esi
c0002e90:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e96:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e9a:	e8 ac eb ff ff       	call   c0001a4b <ld_word>
c0002e9f:	0f b7 c8             	movzx  ecx,ax
c0002ea2:	e9 f6 00 00 00       	jmp    c0002f9d <get_fat+0x1ec>
c0002ea7:	31 c9                	xor    ecx,ecx
c0002ea9:	c1 ea 07             	shr    edx,0x7
c0002eac:	89 f8                	mov    eax,edi
c0002eae:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002eb1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb4:	e8 70 f3 ff ff       	call   c0002229 <move_window>
c0002eb9:	85 c0                	test   eax,eax
c0002ebb:	0f 85 5c ff ff ff    	jne    c0002e1d <get_fat+0x6c>
c0002ec1:	c1 e6 02             	shl    esi,0x2
c0002ec4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002eca:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ece:	e8 85 eb ff ff       	call   c0001a58 <ld_dword>
c0002ed3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ed8:	e9 b4 00 00 00       	jmp    c0002f91 <get_fat+0x1e0>
c0002edd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ee0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ee3:	89 d1                	mov    ecx,edx
c0002ee5:	09 c1                	or     ecx,eax
c0002ee7:	74 06                	je     c0002eef <get_fat+0x13e>
c0002ee9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eed:	75 0f                	jne    c0002efe <get_fat+0x14d>
c0002eef:	b9 01 00 00 00       	mov    ecx,0x1
c0002ef4:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ef8:	0f 85 9f 00 00 00    	jne    c0002f9d <get_fat+0x1ec>
c0002efe:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002f02:	89 f5                	mov    ebp,esi
c0002f04:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002f09:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f0c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f0f:	80 f9 02             	cmp    cl,0x2
c0002f12:	75 35                	jne    c0002f49 <get_fat+0x198>
c0002f14:	83 c0 ff             	add    eax,0xffffffff
c0002f17:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f1c:	83 d2 ff             	adc    edx,0xffffffff
c0002f1f:	31 db                	xor    ebx,ebx
c0002f21:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f25:	53                   	push   ebx
c0002f26:	c1 ea 09             	shr    edx,0x9
c0002f29:	51                   	push   ecx
c0002f2a:	52                   	push   edx
c0002f2b:	50                   	push   eax
c0002f2c:	e8 6b 06 02 00       	call   c002359c <__udivdi3>
c0002f31:	83 c4 10             	add    esp,0x10
c0002f34:	b9 01 00 00 00       	mov    ecx,0x1
c0002f39:	39 c5                	cmp    ebp,eax
c0002f3b:	77 60                	ja     c0002f9d <get_fat+0x1ec>
c0002f3d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f42:	74 59                	je     c0002f9d <get_fat+0x1ec>
c0002f44:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f47:	eb 54                	jmp    c0002f9d <get_fat+0x1ec>
c0002f49:	80 f9 03             	cmp    cl,0x3
c0002f4c:	75 05                	jne    c0002f53 <get_fat+0x1a2>
c0002f4e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f51:	77 f1                	ja     c0002f44 <get_fat+0x193>
c0002f53:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f58:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f5c:	75 3f                	jne    c0002f9d <get_fat+0x1ec>
c0002f5e:	31 c9                	xor    ecx,ecx
c0002f60:	89 f2                	mov    edx,esi
c0002f62:	89 f8                	mov    eax,edi
c0002f64:	c1 ea 07             	shr    edx,0x7
c0002f67:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f6a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f6d:	e8 b7 f2 ff ff       	call   c0002229 <move_window>
c0002f72:	85 c0                	test   eax,eax
c0002f74:	0f 85 a3 fe ff ff    	jne    c0002e1d <get_fat+0x6c>
c0002f7a:	c1 e6 02             	shl    esi,0x2
c0002f7d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f83:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f87:	e8 cc ea ff ff       	call   c0001a58 <ld_dword>
c0002f8c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f91:	89 c1                	mov    ecx,eax
c0002f93:	eb 08                	jmp    c0002f9d <get_fat+0x1ec>
c0002f95:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9a:	89 c8                	mov    eax,ecx
c0002f9c:	c3                   	ret    
c0002f9d:	83 c4 1c             	add    esp,0x1c
c0002fa0:	89 c8                	mov    eax,ecx
c0002fa2:	5b                   	pop    ebx
c0002fa3:	5e                   	pop    esi
c0002fa4:	5f                   	pop    edi
c0002fa5:	5d                   	pop    ebp
c0002fa6:	c3                   	ret    

c0002fa7 <dir_sdi>:
c0002fa7:	55                   	push   ebp
c0002fa8:	57                   	push   edi
c0002fa9:	56                   	push   esi
c0002faa:	53                   	push   ebx
c0002fab:	89 c3                	mov    ebx,eax
c0002fad:	83 ec 1c             	sub    esp,0x1c
c0002fb0:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fb2:	31 c0                	xor    eax,eax
c0002fb4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fb7:	0f 94 c0             	sete   al
c0002fba:	48                   	dec    eax
c0002fbb:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fc0:	05 00 00 00 10       	add    eax,0x10000000
c0002fc5:	39 d0                	cmp    eax,edx
c0002fc7:	77 0a                	ja     c0002fd3 <dir_sdi+0x2c>
c0002fc9:	b8 02 00 00 00       	mov    eax,0x2
c0002fce:	e9 c4 00 00 00       	jmp    c0003097 <dir_sdi+0xf0>
c0002fd3:	89 d6                	mov    esi,edx
c0002fd5:	f6 c2 1f             	test   dl,0x1f
c0002fd8:	75 ef                	jne    c0002fc9 <dir_sdi+0x22>
c0002fda:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fdd:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fe0:	85 c9                	test   ecx,ecx
c0002fe2:	75 2d                	jne    c0003011 <dir_sdi+0x6a>
c0002fe4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fe7:	77 1b                	ja     c0003004 <dir_sdi+0x5d>
c0002fe9:	89 f2                	mov    edx,esi
c0002feb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fef:	c1 ea 05             	shr    edx,0x5
c0002ff2:	39 c2                	cmp    edx,eax
c0002ff4:	73 d3                	jae    c0002fc9 <dir_sdi+0x22>
c0002ff6:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ff9:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002ffc:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fff:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003002:	eb 4b                	jmp    c000304f <dir_sdi+0xa8>
c0003004:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003007:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000300b:	85 c0                	test   eax,eax
c000300d:	74 da                	je     c0002fe9 <dir_sdi+0x42>
c000300f:	89 c1                	mov    ecx,eax
c0003011:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003015:	c1 e5 09             	shl    ebp,0x9
c0003018:	89 ca                	mov    edx,ecx
c000301a:	39 ee                	cmp    esi,ebp
c000301c:	72 1c                	jb     c000303a <dir_sdi+0x93>
c000301e:	89 d8                	mov    eax,ebx
c0003020:	e8 8c fd ff ff       	call   c0002db1 <get_fat>
c0003025:	89 c1                	mov    ecx,eax
c0003027:	83 f8 ff             	cmp    eax,0xffffffff
c000302a:	74 66                	je     c0003092 <dir_sdi+0xeb>
c000302c:	83 f8 01             	cmp    eax,0x1
c000302f:	76 98                	jbe    c0002fc9 <dir_sdi+0x22>
c0003031:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003034:	76 93                	jbe    c0002fc9 <dir_sdi+0x22>
c0003036:	29 ee                	sub    esi,ebp
c0003038:	eb de                	jmp    c0003018 <dir_sdi+0x71>
c000303a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000303e:	89 f8                	mov    eax,edi
c0003040:	e8 9f ec ff ff       	call   c0001ce4 <clst2sect>
c0003045:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003049:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000304c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000304f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003052:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003055:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003058:	89 d1                	mov    ecx,edx
c000305a:	09 c1                	or     ecx,eax
c000305c:	0f 84 67 ff ff ff    	je     c0002fc9 <dir_sdi+0x22>
c0003062:	89 f1                	mov    ecx,esi
c0003064:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000306c:	c1 e9 09             	shr    ecx,0x9
c000306f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003073:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003077:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000307b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000307e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003084:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003087:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000308b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000308e:	31 c0                	xor    eax,eax
c0003090:	eb 05                	jmp    c0003097 <dir_sdi+0xf0>
c0003092:	b8 01 00 00 00       	mov    eax,0x1
c0003097:	83 c4 1c             	add    esp,0x1c
c000309a:	5b                   	pop    ebx
c000309b:	5e                   	pop    esi
c000309c:	5f                   	pop    edi
c000309d:	5d                   	pop    ebp
c000309e:	c3                   	ret    

c000309f <create_chain>:
c000309f:	55                   	push   ebp
c00030a0:	89 c5                	mov    ebp,eax
c00030a2:	57                   	push   edi
c00030a3:	56                   	push   esi
c00030a4:	53                   	push   ebx
c00030a5:	83 ec 1c             	sub    esp,0x1c
c00030a8:	85 d2                	test   edx,edx
c00030aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030ae:	8b 30                	mov    esi,DWORD PTR [eax]
c00030b0:	75 0e                	jne    c00030c0 <create_chain+0x21>
c00030b2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030b5:	85 ff                	test   edi,edi
c00030b7:	74 39                	je     c00030f2 <create_chain+0x53>
c00030b9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030bc:	77 39                	ja     c00030f7 <create_chain+0x58>
c00030be:	eb 32                	jmp    c00030f2 <create_chain+0x53>
c00030c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030c4:	e8 e8 fc ff ff       	call   c0002db1 <get_fat>
c00030c9:	89 c3                	mov    ebx,eax
c00030cb:	83 f8 01             	cmp    eax,0x1
c00030ce:	77 0a                	ja     c00030da <create_chain+0x3b>
c00030d0:	bb 01 00 00 00       	mov    ebx,0x1
c00030d5:	e9 ba 01 00 00       	jmp    c0003294 <create_chain+0x1f5>
c00030da:	83 f8 ff             	cmp    eax,0xffffffff
c00030dd:	0f 84 62 01 00 00    	je     c0003245 <create_chain+0x1a6>
c00030e3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030e6:	0f 87 a8 01 00 00    	ja     c0003294 <create_chain+0x1f5>
c00030ec:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030f0:	eb 05                	jmp    c00030f7 <create_chain+0x58>
c00030f2:	bf 01 00 00 00       	mov    edi,0x1
c00030f7:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030fb:	75 07                	jne    c0003104 <create_chain+0x65>
c00030fd:	31 db                	xor    ebx,ebx
c00030ff:	e9 90 01 00 00       	jmp    c0003294 <create_chain+0x1f5>
c0003104:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003107:	75 74                	jne    c000317d <create_chain+0xde>
c0003109:	b9 01 00 00 00       	mov    ecx,0x1
c000310e:	89 fa                	mov    edx,edi
c0003110:	89 f0                	mov    eax,esi
c0003112:	e8 2d f9 ff ff       	call   c0002a44 <find_bitmap>
c0003117:	89 c3                	mov    ebx,eax
c0003119:	8d 40 ff             	lea    eax,[eax-0x1]
c000311c:	83 f8 fd             	cmp    eax,0xfffffffd
c000311f:	0f 87 6f 01 00 00    	ja     c0003294 <create_chain+0x1f5>
c0003125:	83 ec 0c             	sub    esp,0xc
c0003128:	b9 01 00 00 00       	mov    ecx,0x1
c000312d:	6a 01                	push   0x1
c000312f:	89 da                	mov    edx,ebx
c0003131:	89 f0                	mov    eax,esi
c0003133:	e8 bf f9 ff ff       	call   c0002af7 <change_bitmap>
c0003138:	83 c4 10             	add    esp,0x10
c000313b:	83 f8 02             	cmp    eax,0x2
c000313e:	74 90                	je     c00030d0 <create_chain+0x31>
c0003140:	83 f8 01             	cmp    eax,0x1
c0003143:	0f 84 fc 00 00 00    	je     c0003245 <create_chain+0x1a6>
c0003149:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000314e:	75 09                	jne    c0003159 <create_chain+0xba>
c0003150:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003154:	e9 0c 01 00 00       	jmp    c0003265 <create_chain+0x1c6>
c0003159:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000315d:	0f 85 e7 00 00 00    	jne    c000324a <create_chain+0x1ab>
c0003163:	8d 57 01             	lea    edx,[edi+0x1]
c0003166:	39 da                	cmp    edx,ebx
c0003168:	0f 84 f7 00 00 00    	je     c0003265 <create_chain+0x1c6>
c000316e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003171:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003175:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003178:	e9 cd 00 00 00       	jmp    c000324a <create_chain+0x1ab>
c000317d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003181:	75 41                	jne    c00031c4 <create_chain+0x125>
c0003183:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003186:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003189:	77 05                	ja     c0003190 <create_chain+0xf1>
c000318b:	bb 02 00 00 00       	mov    ebx,0x2
c0003190:	89 da                	mov    edx,ebx
c0003192:	89 e8                	mov    eax,ebp
c0003194:	e8 18 fc ff ff       	call   c0002db1 <get_fat>
c0003199:	83 f8 01             	cmp    eax,0x1
c000319c:	0f 84 2e ff ff ff    	je     c00030d0 <create_chain+0x31>
c00031a2:	83 f8 ff             	cmp    eax,0xffffffff
c00031a5:	0f 84 9a 00 00 00    	je     c0003245 <create_chain+0x1a6>
c00031ab:	85 c0                	test   eax,eax
c00031ad:	74 11                	je     c00031c0 <create_chain+0x121>
c00031af:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031b2:	83 f8 01             	cmp    eax,0x1
c00031b5:	76 0d                	jbe    c00031c4 <create_chain+0x125>
c00031b7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031ba:	76 08                	jbe    c00031c4 <create_chain+0x125>
c00031bc:	89 c7                	mov    edi,eax
c00031be:	eb 04                	jmp    c00031c4 <create_chain+0x125>
c00031c0:	85 db                	test   ebx,ebx
c00031c2:	75 38                	jne    c00031fc <create_chain+0x15d>
c00031c4:	89 fb                	mov    ebx,edi
c00031c6:	43                   	inc    ebx
c00031c7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031ca:	77 0e                	ja     c00031da <create_chain+0x13b>
c00031cc:	83 ff 01             	cmp    edi,0x1
c00031cf:	0f 86 28 ff ff ff    	jbe    c00030fd <create_chain+0x5e>
c00031d5:	bb 02 00 00 00       	mov    ebx,0x2
c00031da:	89 da                	mov    edx,ebx
c00031dc:	89 e8                	mov    eax,ebp
c00031de:	e8 ce fb ff ff       	call   c0002db1 <get_fat>
c00031e3:	85 c0                	test   eax,eax
c00031e5:	74 15                	je     c00031fc <create_chain+0x15d>
c00031e7:	83 f8 01             	cmp    eax,0x1
c00031ea:	0f 84 e0 fe ff ff    	je     c00030d0 <create_chain+0x31>
c00031f0:	40                   	inc    eax
c00031f1:	74 52                	je     c0003245 <create_chain+0x1a6>
c00031f3:	39 fb                	cmp    ebx,edi
c00031f5:	75 cf                	jne    c00031c6 <create_chain+0x127>
c00031f7:	e9 01 ff ff ff       	jmp    c00030fd <create_chain+0x5e>
c00031fc:	83 c9 ff             	or     ecx,0xffffffff
c00031ff:	89 da                	mov    edx,ebx
c0003201:	89 f0                	mov    eax,esi
c0003203:	e8 a4 f9 ff ff       	call   c0002bac <put_fat>
c0003208:	85 c0                	test   eax,eax
c000320a:	75 32                	jne    c000323e <create_chain+0x19f>
c000320c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003211:	74 11                	je     c0003224 <create_chain+0x185>
c0003213:	89 d9                	mov    ecx,ebx
c0003215:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003219:	89 f0                	mov    eax,esi
c000321b:	e8 8c f9 ff ff       	call   c0002bac <put_fat>
c0003220:	85 c0                	test   eax,eax
c0003222:	75 1a                	jne    c000323e <create_chain+0x19f>
c0003224:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003227:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000322a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000322d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003230:	39 d0                	cmp    eax,edx
c0003232:	77 04                	ja     c0003238 <create_chain+0x199>
c0003234:	48                   	dec    eax
c0003235:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003238:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000323c:	eb 56                	jmp    c0003294 <create_chain+0x1f5>
c000323e:	48                   	dec    eax
c000323f:	0f 85 8b fe ff ff    	jne    c00030d0 <create_chain+0x31>
c0003245:	83 cb ff             	or     ebx,0xffffffff
c0003248:	eb 4a                	jmp    c0003294 <create_chain+0x1f5>
c000324a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000324e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003251:	41                   	inc    ecx
c0003252:	39 d9                	cmp    ecx,ebx
c0003254:	75 19                	jne    c000326f <create_chain+0x1d0>
c0003256:	b9 02 00 00 00       	mov    ecx,0x2
c000325b:	85 d2                	test   edx,edx
c000325d:	74 03                	je     c0003262 <create_chain+0x1c3>
c000325f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003262:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003265:	85 c0                	test   eax,eax
c0003267:	0f 85 63 fe ff ff    	jne    c00030d0 <create_chain+0x31>
c000326d:	eb b5                	jmp    c0003224 <create_chain+0x185>
c000326f:	85 d2                	test   edx,edx
c0003271:	75 07                	jne    c000327a <create_chain+0x1db>
c0003273:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000327a:	89 d9                	mov    ecx,ebx
c000327c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003280:	89 e8                	mov    eax,ebp
c0003282:	e8 bb fa ff ff       	call   c0002d42 <fill_last_frag>
c0003287:	85 c0                	test   eax,eax
c0003289:	75 b3                	jne    c000323e <create_chain+0x19f>
c000328b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003292:	eb 90                	jmp    c0003224 <create_chain+0x185>
c0003294:	83 c4 1c             	add    esp,0x1c
c0003297:	89 d8                	mov    eax,ebx
c0003299:	5b                   	pop    ebx
c000329a:	5e                   	pop    esi
c000329b:	5f                   	pop    edi
c000329c:	5d                   	pop    ebp
c000329d:	c3                   	ret    

c000329e <remove_chain>:
c000329e:	55                   	push   ebp
c000329f:	57                   	push   edi
c00032a0:	56                   	push   esi
c00032a1:	53                   	push   ebx
c00032a2:	83 ec 1c             	sub    esp,0x1c
c00032a5:	83 fa 01             	cmp    edx,0x1
c00032a8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032ac:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032ae:	77 0a                	ja     c00032ba <remove_chain+0x1c>
c00032b0:	b8 02 00 00 00       	mov    eax,0x2
c00032b5:	e9 24 01 00 00       	jmp    c00033de <remove_chain+0x140>
c00032ba:	89 d6                	mov    esi,edx
c00032bc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032bf:	76 ef                	jbe    c00032b0 <remove_chain+0x12>
c00032c1:	89 c7                	mov    edi,eax
c00032c3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032c8:	75 06                	jne    c00032d0 <remove_chain+0x32>
c00032ca:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032ce:	eb 54                	jmp    c0003324 <remove_chain+0x86>
c00032d0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032d3:	75 06                	jne    c00032db <remove_chain+0x3d>
c00032d5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032d9:	74 ef                	je     c00032ca <remove_chain+0x2c>
c00032db:	83 c9 ff             	or     ecx,0xffffffff
c00032de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032e2:	89 d8                	mov    eax,ebx
c00032e4:	e8 c3 f8 ff ff       	call   c0002bac <put_fat>
c00032e9:	85 c0                	test   eax,eax
c00032eb:	74 dd                	je     c00032ca <remove_chain+0x2c>
c00032ed:	e9 ec 00 00 00       	jmp    c00033de <remove_chain+0x140>
c00032f2:	83 f8 01             	cmp    eax,0x1
c00032f5:	74 b9                	je     c00032b0 <remove_chain+0x12>
c00032f7:	83 f8 ff             	cmp    eax,0xffffffff
c00032fa:	74 6d                	je     c0003369 <remove_chain+0xcb>
c00032fc:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032ff:	75 6f                	jne    c0003370 <remove_chain+0xd2>
c0003301:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003304:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003307:	8d 51 fe             	lea    edx,[ecx-0x2]
c000330a:	39 d0                	cmp    eax,edx
c000330c:	73 08                	jae    c0003316 <remove_chain+0x78>
c000330e:	40                   	inc    eax
c000330f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003313:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003316:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003319:	39 e9                	cmp    ecx,ebp
c000331b:	75 64                	jne    c0003381 <remove_chain+0xe3>
c000331d:	89 ee                	mov    esi,ebp
c000331f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003322:	76 0f                	jbe    c0003333 <remove_chain+0x95>
c0003324:	89 f2                	mov    edx,esi
c0003326:	89 f8                	mov    eax,edi
c0003328:	e8 84 fa ff ff       	call   c0002db1 <get_fat>
c000332d:	89 c5                	mov    ebp,eax
c000332f:	85 c0                	test   eax,eax
c0003331:	75 bf                	jne    c00032f2 <remove_chain+0x54>
c0003333:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003336:	0f 85 a0 00 00 00    	jne    c00033dc <remove_chain+0x13e>
c000333c:	eb 6c                	jmp    c00033aa <remove_chain+0x10c>
c000333e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003341:	84 c0                	test   al,al
c0003343:	75 7d                	jne    c00033c2 <remove_chain+0x124>
c0003345:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003348:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000334c:	0f 84 86 00 00 00    	je     c00033d8 <remove_chain+0x13a>
c0003352:	89 da                	mov    edx,ebx
c0003354:	89 f8                	mov    eax,edi
c0003356:	e8 56 fa ff ff       	call   c0002db1 <get_fat>
c000335b:	83 f8 01             	cmp    eax,0x1
c000335e:	0f 86 4c ff ff ff    	jbe    c00032b0 <remove_chain+0x12>
c0003364:	83 f8 ff             	cmp    eax,0xffffffff
c0003367:	75 4e                	jne    c00033b7 <remove_chain+0x119>
c0003369:	b8 01 00 00 00       	mov    eax,0x1
c000336e:	eb 6e                	jmp    c00033de <remove_chain+0x140>
c0003370:	31 c9                	xor    ecx,ecx
c0003372:	89 f2                	mov    edx,esi
c0003374:	89 d8                	mov    eax,ebx
c0003376:	e8 31 f8 ff ff       	call   c0002bac <put_fat>
c000337b:	85 c0                	test   eax,eax
c000337d:	74 82                	je     c0003301 <remove_chain+0x63>
c000337f:	eb 5d                	jmp    c00033de <remove_chain+0x140>
c0003381:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003384:	75 1b                	jne    c00033a1 <remove_chain+0x103>
c0003386:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000338a:	89 d8                	mov    eax,ebx
c000338c:	83 ec 0c             	sub    esp,0xc
c000338f:	6a 00                	push   0x0
c0003391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003395:	e8 5d f7 ff ff       	call   c0002af7 <change_bitmap>
c000339a:	83 c4 10             	add    esp,0x10
c000339d:	85 c0                	test   eax,eax
c000339f:	75 3d                	jne    c00033de <remove_chain+0x140>
c00033a1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00033a5:	e9 73 ff ff ff       	jmp    c000331d <remove_chain+0x7f>
c00033aa:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033af:	75 8d                	jne    c000333e <remove_chain+0xa0>
c00033b1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033b5:	eb 25                	jmp    c00033dc <remove_chain+0x13e>
c00033b7:	8d 53 01             	lea    edx,[ebx+0x1]
c00033ba:	89 c3                	mov    ebx,eax
c00033bc:	39 c2                	cmp    edx,eax
c00033be:	74 88                	je     c0003348 <remove_chain+0xaa>
c00033c0:	eb 1a                	jmp    c00033dc <remove_chain+0x13e>
c00033c2:	3c 03                	cmp    al,0x3
c00033c4:	75 16                	jne    c00033dc <remove_chain+0x13e>
c00033c6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033c9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033cd:	77 0d                	ja     c00033dc <remove_chain+0x13e>
c00033cf:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033d2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033d6:	72 04                	jb     c00033dc <remove_chain+0x13e>
c00033d8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033dc:	31 c0                	xor    eax,eax
c00033de:	83 c4 1c             	add    esp,0x1c
c00033e1:	5b                   	pop    ebx
c00033e2:	5e                   	pop    esi
c00033e3:	5f                   	pop    edi
c00033e4:	5d                   	pop    ebp
c00033e5:	c3                   	ret    

c00033e6 <dir_clear>:
c00033e6:	55                   	push   ebp
c00033e7:	57                   	push   edi
c00033e8:	56                   	push   esi
c00033e9:	89 c6                	mov    esi,eax
c00033eb:	53                   	push   ebx
c00033ec:	83 ec 1c             	sub    esp,0x1c
c00033ef:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033f3:	e8 9d ed ff ff       	call   c0002195 <sync_window>
c00033f8:	85 c0                	test   eax,eax
c00033fa:	0f 85 de 00 00 00    	jne    c00034de <dir_clear+0xf8>
c0003400:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003404:	89 f0                	mov    eax,esi
c0003406:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003409:	e8 d6 e8 ff ff       	call   c0001ce4 <clst2sect>
c000340e:	b9 00 02 00 00       	mov    ecx,0x200
c0003413:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003417:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000341b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000341e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003421:	89 e8                	mov    eax,ebp
c0003423:	31 d2                	xor    edx,edx
c0003425:	e8 b5 e6 ff ff       	call   c0001adf <mem_set>
c000342a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000342e:	c1 e3 09             	shl    ebx,0x9
c0003431:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003437:	76 1f                	jbe    c0003458 <dir_clear+0x72>
c0003439:	bb 00 80 00 00       	mov    ebx,0x8000
c000343e:	eb 18                	jmp    c0003458 <dir_clear+0x72>
c0003440:	83 ec 0c             	sub    esp,0xc
c0003443:	53                   	push   ebx
c0003444:	e8 35 4e 00 00       	call   c000827e <ff_memalloc>
c0003449:	83 c4 10             	add    esp,0x10
c000344c:	89 c7                	mov    edi,eax
c000344e:	85 c0                	test   eax,eax
c0003450:	0f 85 8f 00 00 00    	jne    c00034e5 <dir_clear+0xff>
c0003456:	d1 eb                	shr    ebx,1
c0003458:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000345e:	77 e0                	ja     c0003440 <dir_clear+0x5a>
c0003460:	31 db                	xor    ebx,ebx
c0003462:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003466:	39 d8                	cmp    eax,ebx
c0003468:	76 66                	jbe    c00034d0 <dir_clear+0xea>
c000346a:	83 ec 0c             	sub    esp,0xc
c000346d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003471:	6a 01                	push   0x1
c0003473:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003477:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000347b:	55                   	push   ebp
c000347c:	50                   	push   eax
c000347d:	e8 94 e5 ff ff       	call   c0001a16 <disk_write>
c0003482:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003487:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000348c:	83 c4 20             	add    esp,0x20
c000348f:	85 c0                	test   eax,eax
c0003491:	75 3d                	jne    c00034d0 <dir_clear+0xea>
c0003493:	43                   	inc    ebx
c0003494:	eb cc                	jmp    c0003462 <dir_clear+0x7c>
c0003496:	83 ec 0c             	sub    esp,0xc
c0003499:	31 d2                	xor    edx,edx
c000349b:	55                   	push   ebp
c000349c:	89 d8                	mov    eax,ebx
c000349e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00034a2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00034a6:	52                   	push   edx
c00034a7:	50                   	push   eax
c00034a8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034ac:	57                   	push   edi
c00034ad:	50                   	push   eax
c00034ae:	e8 63 e5 ff ff       	call   c0001a16 <disk_write>
c00034b3:	83 c4 20             	add    esp,0x20
c00034b6:	85 c0                	test   eax,eax
c00034b8:	75 0a                	jne    c00034c4 <dir_clear+0xde>
c00034ba:	01 eb                	add    ebx,ebp
c00034bc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034c0:	39 d8                	cmp    eax,ebx
c00034c2:	77 d2                	ja     c0003496 <dir_clear+0xb0>
c00034c4:	83 ec 0c             	sub    esp,0xc
c00034c7:	57                   	push   edi
c00034c8:	e8 c7 4d 00 00       	call   c0008294 <ff_memfree>
c00034cd:	83 c4 10             	add    esp,0x10
c00034d0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034d4:	39 d8                	cmp    eax,ebx
c00034d6:	0f 95 c0             	setne  al
c00034d9:	0f b6 c0             	movzx  eax,al
c00034dc:	eb 19                	jmp    c00034f7 <dir_clear+0x111>
c00034de:	b8 01 00 00 00       	mov    eax,0x1
c00034e3:	eb 12                	jmp    c00034f7 <dir_clear+0x111>
c00034e5:	89 d9                	mov    ecx,ebx
c00034e7:	31 d2                	xor    edx,edx
c00034e9:	c1 eb 09             	shr    ebx,0x9
c00034ec:	e8 ee e5 ff ff       	call   c0001adf <mem_set>
c00034f1:	89 dd                	mov    ebp,ebx
c00034f3:	31 db                	xor    ebx,ebx
c00034f5:	eb c5                	jmp    c00034bc <dir_clear+0xd6>
c00034f7:	83 c4 1c             	add    esp,0x1c
c00034fa:	5b                   	pop    ebx
c00034fb:	5e                   	pop    esi
c00034fc:	5f                   	pop    edi
c00034fd:	5d                   	pop    ebp
c00034fe:	c3                   	ret    

c00034ff <dir_next>:
c00034ff:	55                   	push   ebp
c0003500:	57                   	push   edi
c0003501:	56                   	push   esi
c0003502:	53                   	push   ebx
c0003503:	89 c3                	mov    ebx,eax
c0003505:	83 ec 1c             	sub    esp,0x1c
c0003508:	8b 28                	mov    ebp,DWORD PTR [eax]
c000350a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000350e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003511:	8d 78 20             	lea    edi,[eax+0x20]
c0003514:	31 c0                	xor    eax,eax
c0003516:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000351a:	0f 94 c0             	sete   al
c000351d:	48                   	dec    eax
c000351e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003523:	05 00 00 00 10       	add    eax,0x10000000
c0003528:	39 f8                	cmp    eax,edi
c000352a:	77 0e                	ja     c000353a <dir_next+0x3b>
c000352c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003533:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000353a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000353d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003540:	b8 04 00 00 00       	mov    eax,0x4
c0003545:	89 ce                	mov    esi,ecx
c0003547:	09 d6                	or     esi,edx
c0003549:	0f 84 da 00 00 00    	je     c0003629 <dir_next+0x12a>
c000354f:	89 f8                	mov    eax,edi
c0003551:	25 ff 01 00 00       	and    eax,0x1ff
c0003556:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000355a:	0f 85 b9 00 00 00    	jne    c0003619 <dir_next+0x11a>
c0003560:	83 c2 01             	add    edx,0x1
c0003563:	83 d1 00             	adc    ecx,0x0
c0003566:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003569:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000356c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000356f:	85 d2                	test   edx,edx
c0003571:	75 29                	jne    c000359c <dir_next+0x9d>
c0003573:	89 fa                	mov    edx,edi
c0003575:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003579:	c1 ea 05             	shr    edx,0x5
c000357c:	39 c2                	cmp    edx,eax
c000357e:	0f 82 95 00 00 00    	jb     c0003619 <dir_next+0x11a>
c0003584:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000358b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003592:	b8 04 00 00 00       	mov    eax,0x4
c0003597:	e9 8d 00 00 00       	jmp    c0003629 <dir_next+0x12a>
c000359c:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00035a0:	89 f9                	mov    ecx,edi
c00035a2:	48                   	dec    eax
c00035a3:	c1 e9 09             	shr    ecx,0x9
c00035a6:	85 c8                	test   eax,ecx
c00035a8:	75 6f                	jne    c0003619 <dir_next+0x11a>
c00035aa:	89 d8                	mov    eax,ebx
c00035ac:	e8 00 f8 ff ff       	call   c0002db1 <get_fat>
c00035b1:	89 c6                	mov    esi,eax
c00035b3:	83 f8 01             	cmp    eax,0x1
c00035b6:	77 07                	ja     c00035bf <dir_next+0xc0>
c00035b8:	b8 02 00 00 00       	mov    eax,0x2
c00035bd:	eb 6a                	jmp    c0003629 <dir_next+0x12a>
c00035bf:	83 f8 ff             	cmp    eax,0xffffffff
c00035c2:	75 07                	jne    c00035cb <dir_next+0xcc>
c00035c4:	b8 01 00 00 00       	mov    eax,0x1
c00035c9:	eb 5e                	jmp    c0003629 <dir_next+0x12a>
c00035cb:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035ce:	77 37                	ja     c0003607 <dir_next+0x108>
c00035d0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035d5:	74 ad                	je     c0003584 <dir_next+0x85>
c00035d7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035da:	89 d8                	mov    eax,ebx
c00035dc:	e8 be fa ff ff       	call   c000309f <create_chain>
c00035e1:	89 c6                	mov    esi,eax
c00035e3:	b8 07 00 00 00       	mov    eax,0x7
c00035e8:	85 f6                	test   esi,esi
c00035ea:	74 3d                	je     c0003629 <dir_next+0x12a>
c00035ec:	83 fe 01             	cmp    esi,0x1
c00035ef:	74 c7                	je     c00035b8 <dir_next+0xb9>
c00035f1:	83 fe ff             	cmp    esi,0xffffffff
c00035f4:	74 ce                	je     c00035c4 <dir_next+0xc5>
c00035f6:	89 f2                	mov    edx,esi
c00035f8:	89 e8                	mov    eax,ebp
c00035fa:	e8 e7 fd ff ff       	call   c00033e6 <dir_clear>
c00035ff:	85 c0                	test   eax,eax
c0003601:	75 c1                	jne    c00035c4 <dir_next+0xc5>
c0003603:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003607:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000360a:	89 f2                	mov    edx,esi
c000360c:	89 e8                	mov    eax,ebp
c000360e:	e8 d1 e6 ff ff       	call   c0001ce4 <clst2sect>
c0003613:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003616:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003619:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000361d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003620:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003624:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003627:	31 c0                	xor    eax,eax
c0003629:	83 c4 1c             	add    esp,0x1c
c000362c:	5b                   	pop    ebx
c000362d:	5e                   	pop    esi
c000362e:	5f                   	pop    edi
c000362f:	5d                   	pop    ebp
c0003630:	c3                   	ret    

c0003631 <load_xdir>:
c0003631:	55                   	push   ebp
c0003632:	57                   	push   edi
c0003633:	56                   	push   esi
c0003634:	89 c6                	mov    esi,eax
c0003636:	53                   	push   ebx
c0003637:	83 ec 1c             	sub    esp,0x1c
c000363a:	8b 00                	mov    eax,DWORD PTR [eax]
c000363c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000363f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003642:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003645:	e8 df eb ff ff       	call   c0002229 <move_window>
c000364a:	89 c3                	mov    ebx,eax
c000364c:	85 c0                	test   eax,eax
c000364e:	0f 85 0c 01 00 00    	jne    c0003760 <load_xdir+0x12f>
c0003654:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003657:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000365a:	0f 85 fb 00 00 00    	jne    c000375b <load_xdir+0x12a>
c0003660:	89 f8                	mov    eax,edi
c0003662:	b9 20 00 00 00       	mov    ecx,0x20
c0003667:	e8 5e e4 ff ff       	call   c0001aca <mem_cpy>
c000366c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003670:	40                   	inc    eax
c0003671:	c1 e0 05             	shl    eax,0x5
c0003674:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003678:	83 e8 60             	sub    eax,0x60
c000367b:	3d 00 02 00 00       	cmp    eax,0x200
c0003680:	0f 87 d5 00 00 00    	ja     c000375b <load_xdir+0x12a>
c0003686:	31 d2                	xor    edx,edx
c0003688:	89 f0                	mov    eax,esi
c000368a:	e8 70 fe ff ff       	call   c00034ff <dir_next>
c000368f:	89 c3                	mov    ebx,eax
c0003691:	83 f8 04             	cmp    eax,0x4
c0003694:	0f 84 c1 00 00 00    	je     c000375b <load_xdir+0x12a>
c000369a:	85 c0                	test   eax,eax
c000369c:	0f 85 be 00 00 00    	jne    c0003760 <load_xdir+0x12f>
c00036a2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036a5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036a8:	8b 06                	mov    eax,DWORD PTR [esi]
c00036aa:	e8 7a eb ff ff       	call   c0002229 <move_window>
c00036af:	89 c3                	mov    ebx,eax
c00036b1:	85 c0                	test   eax,eax
c00036b3:	0f 85 a7 00 00 00    	jne    c0003760 <load_xdir+0x12f>
c00036b9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036bc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036bf:	0f 85 96 00 00 00    	jne    c000375b <load_xdir+0x12a>
c00036c5:	8d 47 20             	lea    eax,[edi+0x20]
c00036c8:	b9 20 00 00 00       	mov    ecx,0x20
c00036cd:	e8 f8 e3 ff ff       	call   c0001aca <mem_cpy>
c00036d2:	31 d2                	xor    edx,edx
c00036d4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036d8:	b9 0f 00 00 00       	mov    ecx,0xf
c00036dd:	83 c0 2c             	add    eax,0x2c
c00036e0:	f7 f1                	div    ecx
c00036e2:	c1 e0 05             	shl    eax,0x5
c00036e5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036e9:	77 70                	ja     c000375b <load_xdir+0x12a>
c00036eb:	bd 40 00 00 00       	mov    ebp,0x40
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 f0                	mov    eax,esi
c00036f4:	e8 06 fe ff ff       	call   c00034ff <dir_next>
c00036f9:	89 c3                	mov    ebx,eax
c00036fb:	83 f8 04             	cmp    eax,0x4
c00036fe:	74 5b                	je     c000375b <load_xdir+0x12a>
c0003700:	85 c0                	test   eax,eax
c0003702:	75 5c                	jne    c0003760 <load_xdir+0x12f>
c0003704:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003707:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000370a:	8b 06                	mov    eax,DWORD PTR [esi]
c000370c:	e8 18 eb ff ff       	call   c0002229 <move_window>
c0003711:	89 c3                	mov    ebx,eax
c0003713:	85 c0                	test   eax,eax
c0003715:	75 49                	jne    c0003760 <load_xdir+0x12f>
c0003717:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000371a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000371d:	75 3c                	jne    c000375b <load_xdir+0x12a>
c000371f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003725:	77 0d                	ja     c0003734 <load_xdir+0x103>
c0003727:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000372a:	b9 20 00 00 00       	mov    ecx,0x20
c000372f:	e8 96 e3 ff ff       	call   c0001aca <mem_cpy>
c0003734:	83 c5 20             	add    ebp,0x20
c0003737:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000373b:	77 b3                	ja     c00036f0 <load_xdir+0xbf>
c000373d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003743:	77 1b                	ja     c0003760 <load_xdir+0x12f>
c0003745:	89 f8                	mov    eax,edi
c0003747:	e8 cd e7 ff ff       	call   c0001f19 <xdir_sum>
c000374c:	89 c1                	mov    ecx,eax
c000374e:	8d 47 02             	lea    eax,[edi+0x2]
c0003751:	e8 f5 e2 ff ff       	call   c0001a4b <ld_word>
c0003756:	66 39 c1             	cmp    cx,ax
c0003759:	74 05                	je     c0003760 <load_xdir+0x12f>
c000375b:	bb 02 00 00 00       	mov    ebx,0x2
c0003760:	83 c4 1c             	add    esp,0x1c
c0003763:	89 d8                	mov    eax,ebx
c0003765:	5b                   	pop    ebx
c0003766:	5e                   	pop    esi
c0003767:	5f                   	pop    edi
c0003768:	5d                   	pop    ebp
c0003769:	c3                   	ret    

c000376a <load_obj_xdir>:
c000376a:	53                   	push   ebx
c000376b:	89 c3                	mov    ebx,eax
c000376d:	83 ec 08             	sub    esp,0x8
c0003770:	8b 02                	mov    eax,DWORD PTR [edx]
c0003772:	89 03                	mov    DWORD PTR [ebx],eax
c0003774:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003777:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000377a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000377d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003780:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003783:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000378a:	30 c0                	xor    al,al
c000378c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003793:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003796:	89 d8                	mov    eax,ebx
c0003798:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000379b:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000379e:	e8 04 f8 ff ff       	call   c0002fa7 <dir_sdi>
c00037a3:	85 c0                	test   eax,eax
c00037a5:	75 0b                	jne    c00037b2 <load_obj_xdir+0x48>
c00037a7:	89 d8                	mov    eax,ebx
c00037a9:	83 c4 08             	add    esp,0x8
c00037ac:	5b                   	pop    ebx
c00037ad:	e9 7f fe ff ff       	jmp    c0003631 <load_xdir>
c00037b2:	83 c4 08             	add    esp,0x8
c00037b5:	5b                   	pop    ebx
c00037b6:	c3                   	ret    

c00037b7 <dir_read>:
c00037b7:	55                   	push   ebp
c00037b8:	bd 04 00 00 00       	mov    ebp,0x4
c00037bd:	57                   	push   edi
c00037be:	56                   	push   esi
c00037bf:	be ff ff ff ff       	mov    esi,0xffffffff
c00037c4:	53                   	push   ebx
c00037c5:	89 c3                	mov    ebx,eax
c00037c7:	83 ec 1c             	sub    esp,0x1c
c00037ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037ce:	8b 38                	mov    edi,DWORD PTR [eax]
c00037d0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037d5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037d8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037db:	89 c8                	mov    eax,ecx
c00037dd:	09 d0                	or     eax,edx
c00037df:	0f 84 25 01 00 00    	je     c000390a <dir_read+0x153>
c00037e5:	89 f8                	mov    eax,edi
c00037e7:	e8 3d ea ff ff       	call   c0002229 <move_window>
c00037ec:	89 c5                	mov    ebp,eax
c00037ee:	85 c0                	test   eax,eax
c00037f0:	0f 85 23 01 00 00    	jne    c0003919 <dir_read+0x162>
c00037f6:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037f9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037fb:	84 c9                	test   cl,cl
c00037fd:	0f 84 11 01 00 00    	je     c0003914 <dir_read+0x15d>
c0003803:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003806:	75 48                	jne    c0003850 <dir_read+0x99>
c0003808:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000380d:	74 10                	je     c000381f <dir_read+0x68>
c000380f:	80 f9 83             	cmp    cl,0x83
c0003812:	0f 85 dd 00 00 00    	jne    c00038f5 <dir_read+0x13e>
c0003818:	31 ed                	xor    ebp,ebp
c000381a:	e9 08 01 00 00       	jmp    c0003927 <dir_read+0x170>
c000381f:	80 f9 85             	cmp    cl,0x85
c0003822:	0f 85 cd 00 00 00    	jne    c00038f5 <dir_read+0x13e>
c0003828:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000382b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000382e:	89 d8                	mov    eax,ebx
c0003830:	e8 fc fd ff ff       	call   c0003631 <load_xdir>
c0003835:	89 c5                	mov    ebp,eax
c0003837:	85 c0                	test   eax,eax
c0003839:	0f 85 da 00 00 00    	jne    c0003919 <dir_read+0x162>
c000383f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003842:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003845:	83 e0 3f             	and    eax,0x3f
c0003848:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000384b:	e9 d7 00 00 00       	jmp    c0003927 <dir_read+0x170>
c0003850:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003853:	83 e0 3f             	and    eax,0x3f
c0003856:	80 f9 2e             	cmp    cl,0x2e
c0003859:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000385d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003860:	0f 84 8a 00 00 00    	je     c00038f0 <dir_read+0x139>
c0003866:	80 f9 e5             	cmp    cl,0xe5
c0003869:	0f 84 81 00 00 00    	je     c00038f0 <dir_read+0x139>
c000386f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003873:	83 e0 1f             	and    eax,0x1f
c0003876:	83 f8 08             	cmp    eax,0x8
c0003879:	0f 94 c0             	sete   al
c000387c:	0f b6 c0             	movzx  eax,al
c000387f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003883:	75 6b                	jne    c00038f0 <dir_read+0x139>
c0003885:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000388a:	75 44                	jne    c00038d0 <dir_read+0x119>
c000388c:	f6 c1 40             	test   cl,0x40
c000388f:	74 12                	je     c00038a3 <dir_read+0xec>
c0003891:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003894:	83 e1 bf             	and    ecx,0xffffffbf
c0003897:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000389b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000389e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00038a1:	eb 06                	jmp    c00038a9 <dir_read+0xf2>
c00038a3:	89 f0                	mov    eax,esi
c00038a5:	38 c8                	cmp    al,cl
c00038a7:	75 47                	jne    c00038f0 <dir_read+0x139>
c00038a9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038ad:	be ff ff ff ff       	mov    esi,0xffffffff
c00038b2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038b5:	75 3e                	jne    c00038f5 <dir_read+0x13e>
c00038b7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038bb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038be:	e8 8a e4 ff ff       	call   c0001d4d <pick_lfn>
c00038c3:	85 c0                	test   eax,eax
c00038c5:	74 2e                	je     c00038f5 <dir_read+0x13e>
c00038c7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038cb:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038ce:	eb 25                	jmp    c00038f5 <dir_read+0x13e>
c00038d0:	89 f0                	mov    eax,esi
c00038d2:	84 c0                	test   al,al
c00038d4:	75 11                	jne    c00038e7 <dir_read+0x130>
c00038d6:	89 d0                	mov    eax,edx
c00038d8:	e8 2a e6 ff ff       	call   c0001f07 <sum_sfn>
c00038dd:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038e1:	0f 84 31 ff ff ff    	je     c0003818 <dir_read+0x61>
c00038e7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038ee:	eb 37                	jmp    c0003927 <dir_read+0x170>
c00038f0:	be ff ff ff ff       	mov    esi,0xffffffff
c00038f5:	31 d2                	xor    edx,edx
c00038f7:	89 d8                	mov    eax,ebx
c00038f9:	e8 01 fc ff ff       	call   c00034ff <dir_next>
c00038fe:	89 c5                	mov    ebp,eax
c0003900:	85 c0                	test   eax,eax
c0003902:	0f 84 cd fe ff ff    	je     c00037d5 <dir_read+0x1e>
c0003908:	eb 0f                	jmp    c0003919 <dir_read+0x162>
c000390a:	85 ed                	test   ebp,ebp
c000390c:	0f 84 06 ff ff ff    	je     c0003818 <dir_read+0x61>
c0003912:	eb 05                	jmp    c0003919 <dir_read+0x162>
c0003914:	bd 04 00 00 00       	mov    ebp,0x4
c0003919:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003920:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003927:	83 c4 1c             	add    esp,0x1c
c000392a:	89 e8                	mov    eax,ebp
c000392c:	5b                   	pop    ebx
c000392d:	5e                   	pop    esi
c000392e:	5f                   	pop    edi
c000392f:	5d                   	pop    ebp
c0003930:	c3                   	ret    

c0003931 <dir_alloc>:
c0003931:	55                   	push   ebp
c0003932:	89 d5                	mov    ebp,edx
c0003934:	57                   	push   edi
c0003935:	31 d2                	xor    edx,edx
c0003937:	56                   	push   esi
c0003938:	53                   	push   ebx
c0003939:	89 c3                	mov    ebx,eax
c000393b:	83 ec 0c             	sub    esp,0xc
c000393e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003940:	e8 62 f6 ff ff       	call   c0002fa7 <dir_sdi>
c0003945:	85 c0                	test   eax,eax
c0003947:	75 4e                	jne    c0003997 <dir_alloc+0x66>
c0003949:	31 f6                	xor    esi,esi
c000394b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000394e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003951:	89 f8                	mov    eax,edi
c0003953:	e8 d1 e8 ff ff       	call   c0002229 <move_window>
c0003958:	85 c0                	test   eax,eax
c000395a:	75 3b                	jne    c0003997 <dir_alloc+0x66>
c000395c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000395f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003962:	8a 12                	mov    dl,BYTE PTR [edx]
c0003964:	75 07                	jne    c000396d <dir_alloc+0x3c>
c0003966:	f7 d2                	not    edx
c0003968:	c0 ea 07             	shr    dl,0x7
c000396b:	eb 0d                	jmp    c000397a <dir_alloc+0x49>
c000396d:	84 d2                	test   dl,dl
c000396f:	0f 94 c1             	sete   cl
c0003972:	80 fa e5             	cmp    dl,0xe5
c0003975:	0f 94 c2             	sete   dl
c0003978:	09 ca                	or     edx,ecx
c000397a:	84 d2                	test   dl,dl
c000397c:	74 07                	je     c0003985 <dir_alloc+0x54>
c000397e:	46                   	inc    esi
c000397f:	39 ee                	cmp    esi,ebp
c0003981:	75 04                	jne    c0003987 <dir_alloc+0x56>
c0003983:	eb 1c                	jmp    c00039a1 <dir_alloc+0x70>
c0003985:	31 f6                	xor    esi,esi
c0003987:	ba 01 00 00 00       	mov    edx,0x1
c000398c:	89 d8                	mov    eax,ebx
c000398e:	e8 6c fb ff ff       	call   c00034ff <dir_next>
c0003993:	85 c0                	test   eax,eax
c0003995:	74 b4                	je     c000394b <dir_alloc+0x1a>
c0003997:	83 f8 04             	cmp    eax,0x4
c000399a:	75 05                	jne    c00039a1 <dir_alloc+0x70>
c000399c:	b8 07 00 00 00       	mov    eax,0x7
c00039a1:	83 c4 0c             	add    esp,0xc
c00039a4:	5b                   	pop    ebx
c00039a5:	5e                   	pop    esi
c00039a6:	5f                   	pop    edi
c00039a7:	5d                   	pop    ebp
c00039a8:	c3                   	ret    

c00039a9 <store_xdir>:
c00039a9:	55                   	push   ebp
c00039aa:	57                   	push   edi
c00039ab:	89 c7                	mov    edi,eax
c00039ad:	56                   	push   esi
c00039ae:	53                   	push   ebx
c00039af:	83 ec 0c             	sub    esp,0xc
c00039b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00039b4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039b7:	89 e8                	mov    eax,ebp
c00039b9:	e8 5b e5 ff ff       	call   c0001f19 <xdir_sum>
c00039be:	0f b7 d0             	movzx  edx,ax
c00039c1:	8d 45 02             	lea    eax,[ebp+0x2]
c00039c4:	e8 f4 e0 ff ff       	call   c0001abd <st_word>
c00039c9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039cd:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039d0:	89 f8                	mov    eax,edi
c00039d2:	e8 d0 f5 ff ff       	call   c0002fa7 <dir_sdi>
c00039d7:	89 c6                	mov    esi,eax
c00039d9:	85 f6                	test   esi,esi
c00039db:	75 3d                	jne    c0003a1a <store_xdir+0x71>
c00039dd:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039e0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039e3:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e5:	e8 3f e8 ff ff       	call   c0002229 <move_window>
c00039ea:	89 c6                	mov    esi,eax
c00039ec:	85 c0                	test   eax,eax
c00039ee:	75 2a                	jne    c0003a1a <store_xdir+0x71>
c00039f0:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039f3:	b9 20 00 00 00       	mov    ecx,0x20
c00039f8:	89 ea                	mov    edx,ebp
c00039fa:	e8 cb e0 ff ff       	call   c0001aca <mem_cpy>
c00039ff:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a01:	85 db                	test   ebx,ebx
c0003a03:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a07:	74 11                	je     c0003a1a <store_xdir+0x71>
c0003a09:	31 d2                	xor    edx,edx
c0003a0b:	89 f8                	mov    eax,edi
c0003a0d:	83 c5 20             	add    ebp,0x20
c0003a10:	e8 ea fa ff ff       	call   c00034ff <dir_next>
c0003a15:	4b                   	dec    ebx
c0003a16:	89 c6                	mov    esi,eax
c0003a18:	eb bf                	jmp    c00039d9 <store_xdir+0x30>
c0003a1a:	89 f0                	mov    eax,esi
c0003a1c:	83 fe 02             	cmp    esi,0x2
c0003a1f:	76 05                	jbe    c0003a26 <store_xdir+0x7d>
c0003a21:	b8 02 00 00 00       	mov    eax,0x2
c0003a26:	83 c4 0c             	add    esp,0xc
c0003a29:	5b                   	pop    ebx
c0003a2a:	5e                   	pop    esi
c0003a2b:	5f                   	pop    edi
c0003a2c:	5d                   	pop    ebp
c0003a2d:	c3                   	ret    

c0003a2e <dir_remove>:
c0003a2e:	57                   	push   edi
c0003a2f:	56                   	push   esi
c0003a30:	53                   	push   ebx
c0003a31:	89 c3                	mov    ebx,eax
c0003a33:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a36:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a38:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a3b:	83 fa ff             	cmp    edx,0xffffffff
c0003a3e:	74 09                	je     c0003a49 <dir_remove+0x1b>
c0003a40:	e8 62 f5 ff ff       	call   c0002fa7 <dir_sdi>
c0003a45:	85 c0                	test   eax,eax
c0003a47:	75 41                	jne    c0003a8a <dir_remove+0x5c>
c0003a49:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a4c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a4f:	89 f0                	mov    eax,esi
c0003a51:	e8 d3 e7 ff ff       	call   c0002229 <move_window>
c0003a56:	85 c0                	test   eax,eax
c0003a58:	75 26                	jne    c0003a80 <dir_remove+0x52>
c0003a5a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a5d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a60:	75 05                	jne    c0003a67 <dir_remove+0x39>
c0003a62:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a65:	eb 03                	jmp    c0003a6a <dir_remove+0x3c>
c0003a67:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a6a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a6e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a71:	73 17                	jae    c0003a8a <dir_remove+0x5c>
c0003a73:	31 d2                	xor    edx,edx
c0003a75:	89 d8                	mov    eax,ebx
c0003a77:	e8 83 fa ff ff       	call   c00034ff <dir_next>
c0003a7c:	85 c0                	test   eax,eax
c0003a7e:	74 c9                	je     c0003a49 <dir_remove+0x1b>
c0003a80:	83 f8 04             	cmp    eax,0x4
c0003a83:	75 05                	jne    c0003a8a <dir_remove+0x5c>
c0003a85:	b8 02 00 00 00       	mov    eax,0x2
c0003a8a:	5b                   	pop    ebx
c0003a8b:	5e                   	pop    esi
c0003a8c:	5f                   	pop    edi
c0003a8d:	c3                   	ret    

c0003a8e <create_name>:
c0003a8e:	55                   	push   ebp
c0003a8f:	89 d5                	mov    ebp,edx
c0003a91:	57                   	push   edi
c0003a92:	89 c7                	mov    edi,eax
c0003a94:	56                   	push   esi
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	53                   	push   ebx
c0003a98:	83 ec 3c             	sub    esp,0x3c
c0003a9b:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003aa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003aa3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003aa6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003aaa:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003aae:	e8 72 e0 ff ff       	call   c0001b25 <tchar2uni>
c0003ab3:	89 c3                	mov    ebx,eax
c0003ab5:	83 f8 ff             	cmp    eax,0xffffffff
c0003ab8:	75 0a                	jne    c0003ac4 <create_name+0x36>
c0003aba:	b8 06 00 00 00       	mov    eax,0x6
c0003abf:	e9 9e 02 00 00       	jmp    c0003d62 <create_name+0x2d4>
c0003ac4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ac9:	76 0c                	jbe    c0003ad7 <create_name+0x49>
c0003acb:	c1 e8 10             	shr    eax,0x10
c0003ace:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ad2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003ad6:	46                   	inc    esi
c0003ad7:	66 83 fb 1f          	cmp    bx,0x1f
c0003adb:	76 4f                	jbe    c0003b2c <create_name+0x9e>
c0003add:	66 83 fb 5c          	cmp    bx,0x5c
c0003ae1:	74 35                	je     c0003b18 <create_name+0x8a>
c0003ae3:	66 83 fb 2f          	cmp    bx,0x2f
c0003ae7:	74 2f                	je     c0003b18 <create_name+0x8a>
c0003ae9:	66 83 fb 7f          	cmp    bx,0x7f
c0003aed:	77 11                	ja     c0003b00 <create_name+0x72>
c0003aef:	0f b7 d3             	movzx  edx,bx
c0003af2:	b8 52 60 02 c0       	mov    eax,0xc0026052
c0003af7:	e8 11 e0 ff ff       	call   c0001b0d <chk_chr>
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 ba                	jne    c0003aba <create_name+0x2c>
c0003b00:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003b06:	77 b2                	ja     c0003aba <create_name+0x2c>
c0003b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b0c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b10:	46                   	inc    esi
c0003b11:	eb 97                	jmp    c0003aaa <create_name+0x1c>
c0003b13:	40                   	inc    eax
c0003b14:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b18:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b1c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b1e:	80 fa 2f             	cmp    dl,0x2f
c0003b21:	74 f0                	je     c0003b13 <create_name+0x85>
c0003b23:	80 fa 5c             	cmp    dl,0x5c
c0003b26:	74 eb                	je     c0003b13 <create_name+0x85>
c0003b28:	31 db                	xor    ebx,ebx
c0003b2a:	eb 02                	jmp    c0003b2e <create_name+0xa0>
c0003b2c:	b3 04                	mov    bl,0x4
c0003b2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b32:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b35:	85 f6                	test   esi,esi
c0003b37:	74 18                	je     c0003b51 <create_name+0xc3>
c0003b39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b3d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b42:	66 83 f8 20          	cmp    ax,0x20
c0003b46:	74 06                	je     c0003b4e <create_name+0xc0>
c0003b48:	66 83 f8 2e          	cmp    ax,0x2e
c0003b4c:	75 03                	jne    c0003b51 <create_name+0xc3>
c0003b4e:	4e                   	dec    esi
c0003b4f:	eb e4                	jmp    c0003b35 <create_name+0xa7>
c0003b51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b55:	31 ed                	xor    ebp,ebp
c0003b57:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b5d:	85 f6                	test   esi,esi
c0003b5f:	0f 84 55 ff ff ff    	je     c0003aba <create_name+0x2c>
c0003b65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b69:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b6c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b70:	66 83 f8 20          	cmp    ax,0x20
c0003b74:	75 04                	jne    c0003b7a <create_name+0xec>
c0003b76:	89 d5                	mov    ebp,edx
c0003b78:	eb eb                	jmp    c0003b65 <create_name+0xd7>
c0003b7a:	85 ed                	test   ebp,ebp
c0003b7c:	75 06                	jne    c0003b84 <create_name+0xf6>
c0003b7e:	66 83 f8 2e          	cmp    ax,0x2e
c0003b82:	75 08                	jne    c0003b8c <create_name+0xfe>
c0003b84:	83 cb 03             	or     ebx,0x3
c0003b87:	eb 03                	jmp    c0003b8c <create_name+0xfe>
c0003b89:	4e                   	dec    esi
c0003b8a:	74 0c                	je     c0003b98 <create_name+0x10a>
c0003b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b90:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b96:	75 f1                	jne    c0003b89 <create_name+0xfb>
c0003b98:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b9d:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ba0:	ba 20 00 00 00       	mov    edx,0x20
c0003ba5:	e8 35 df ff ff       	call   c0001adf <mem_set>
c0003baa:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003bb2:	31 c9                	xor    ecx,ecx
c0003bb4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003bb9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bbc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003bc4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bc8:	66 85 ed             	test   bp,bp
c0003bcb:	0f 84 30 01 00 00    	je     c0003d01 <create_name+0x273>
c0003bd1:	66 83 fd 20          	cmp    bp,0x20
c0003bd5:	74 10                	je     c0003be7 <create_name+0x159>
c0003bd7:	66 83 fd 2e          	cmp    bp,0x2e
c0003bdb:	75 13                	jne    c0003bf0 <create_name+0x162>
c0003bdd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003be1:	0f 84 6b 01 00 00    	je     c0003d52 <create_name+0x2c4>
c0003be7:	83 cb 03             	or     ebx,0x3
c0003bea:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bee:	eb c9                	jmp    c0003bb9 <create_name+0x12b>
c0003bf0:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bf4:	73 0b                	jae    c0003c01 <create_name+0x173>
c0003bf6:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bfa:	75 47                	jne    c0003c43 <create_name+0x1b5>
c0003bfc:	e9 51 01 00 00       	jmp    c0003d52 <create_name+0x2c4>
c0003c01:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c06:	75 10                	jne    c0003c18 <create_name+0x18a>
c0003c08:	83 cb 03             	or     ebx,0x3
c0003c0b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c13:	e9 e9 00 00 00       	jmp    c0003d01 <create_name+0x273>
c0003c18:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c1c:	74 0d                	je     c0003c2b <create_name+0x19d>
c0003c1e:	83 cb 03             	or     ebx,0x3
c0003c21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c25:	0f 87 d6 00 00 00    	ja     c0003d01 <create_name+0x273>
c0003c2b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c30:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003c34:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c3c:	b9 08 00 00 00       	mov    ecx,0x8
c0003c41:	eb a7                	jmp    c0003bea <create_name+0x15c>
c0003c43:	66 83 fd 7f          	cmp    bp,0x7f
c0003c47:	76 68                	jbe    c0003cb1 <create_name+0x223>
c0003c49:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c4d:	88 da                	mov    dl,bl
c0003c4f:	83 ca 02             	or     edx,0x2
c0003c52:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c56:	50                   	push   eax
c0003c57:	50                   	push   eax
c0003c58:	68 b5 01 00 00       	push   0x1b5
c0003c5d:	55                   	push   ebp
c0003c5e:	e8 48 46 00 00       	call   c00082ab <ff_uni2oem>
c0003c63:	83 c4 10             	add    esp,0x10
c0003c66:	89 c5                	mov    ebp,eax
c0003c68:	a8 80                	test   al,0x80
c0003c6a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c6e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c72:	74 0c                	je     c0003c80 <create_name+0x1f2>
c0003c74:	83 e5 7f             	and    ebp,0x7f
c0003c77:	0f b6 ad a0 5f 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffda060]
c0003c7e:	eb 2a                	jmp    c0003caa <create_name+0x21c>
c0003c80:	66 3d ff 00          	cmp    ax,0xff
c0003c84:	76 24                	jbe    c0003caa <create_name+0x21c>
c0003c86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c8a:	48                   	dec    eax
c0003c8b:	39 c8                	cmp    eax,ecx
c0003c8d:	77 0c                	ja     c0003c9b <create_name+0x20d>
c0003c8f:	83 cb 03             	or     ebx,0x3
c0003c92:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c96:	e9 4f ff ff ff       	jmp    c0003bea <create_name+0x15c>
c0003c9b:	89 e8                	mov    eax,ebp
c0003c9d:	88 d3                	mov    bl,dl
c0003c9f:	66 c1 e8 08          	shr    ax,0x8
c0003ca3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ca7:	41                   	inc    ecx
c0003ca8:	eb 4b                	jmp    c0003cf5 <create_name+0x267>
c0003caa:	88 d3                	mov    bl,dl
c0003cac:	66 85 ed             	test   bp,bp
c0003caf:	74 19                	je     c0003cca <create_name+0x23c>
c0003cb1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003cb5:	0f b7 d5             	movzx  edx,bp
c0003cb8:	b8 5b 60 02 c0       	mov    eax,0xc002605b
c0003cbd:	e8 4b de ff ff       	call   c0001b0d <chk_chr>
c0003cc2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cc6:	85 c0                	test   eax,eax
c0003cc8:	74 0a                	je     c0003cd4 <create_name+0x246>
c0003cca:	83 cb 03             	or     ebx,0x3
c0003ccd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cd2:	eb 21                	jmp    c0003cf5 <create_name+0x267>
c0003cd4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cd7:	66 83 f8 19          	cmp    ax,0x19
c0003cdb:	77 07                	ja     c0003ce4 <create_name+0x256>
c0003cdd:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ce2:	eb 11                	jmp    c0003cf5 <create_name+0x267>
c0003ce4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ce7:	66 83 f8 19          	cmp    ax,0x19
c0003ceb:	77 08                	ja     c0003cf5 <create_name+0x267>
c0003ced:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003cf2:	83 ed 20             	sub    ebp,0x20
c0003cf5:	89 e8                	mov    eax,ebp
c0003cf7:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cfb:	41                   	inc    ecx
c0003cfc:	e9 e9 fe ff ff       	jmp    c0003bea <create_name+0x15c>
c0003d01:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003d05:	75 04                	jne    c0003d0b <create_name+0x27d>
c0003d07:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003d0b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003d10:	75 05                	jne    c0003d17 <create_name+0x289>
c0003d12:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d17:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d1b:	83 e0 0c             	and    eax,0xc
c0003d1e:	3c 0c                	cmp    al,0xc
c0003d20:	74 0b                	je     c0003d2d <create_name+0x29f>
c0003d22:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d26:	83 e0 03             	and    eax,0x3
c0003d29:	3c 03                	cmp    al,0x3
c0003d2b:	75 05                	jne    c0003d32 <create_name+0x2a4>
c0003d2d:	83 cb 02             	or     ebx,0x2
c0003d30:	eb 19                	jmp    c0003d4b <create_name+0x2bd>
c0003d32:	f6 c3 02             	test   bl,0x2
c0003d35:	75 14                	jne    c0003d4b <create_name+0x2bd>
c0003d37:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d3c:	74 03                	je     c0003d41 <create_name+0x2b3>
c0003d3e:	83 cb 10             	or     ebx,0x10
c0003d41:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d46:	74 03                	je     c0003d4b <create_name+0x2bd>
c0003d48:	83 cb 08             	or     ebx,0x8
c0003d4b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d4e:	31 c0                	xor    eax,eax
c0003d50:	eb 10                	jmp    c0003d62 <create_name+0x2d4>
c0003d52:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d57:	0f 85 ce fe ff ff    	jne    c0003c2b <create_name+0x19d>
c0003d5d:	e9 a6 fe ff ff       	jmp    c0003c08 <create_name+0x17a>
c0003d62:	83 c4 3c             	add    esp,0x3c
c0003d65:	5b                   	pop    ebx
c0003d66:	5e                   	pop    esi
c0003d67:	5f                   	pop    edi
c0003d68:	5d                   	pop    ebp
c0003d69:	c3                   	ret    

c0003d6a <xname_sum>:
c0003d6a:	56                   	push   esi
c0003d6b:	53                   	push   ebx
c0003d6c:	89 c6                	mov    esi,eax
c0003d6e:	51                   	push   ecx
c0003d6f:	31 db                	xor    ebx,ebx
c0003d71:	83 c6 02             	add    esi,0x2
c0003d74:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d78:	66 85 c0             	test   ax,ax
c0003d7b:	74 1f                	je     c0003d9c <xname_sum+0x32>
c0003d7d:	83 ec 0c             	sub    esp,0xc
c0003d80:	66 d1 cb             	ror    bx,1
c0003d83:	50                   	push   eax
c0003d84:	e8 1e 46 00 00       	call   c00083a7 <ff_wtoupper>
c0003d89:	83 c4 10             	add    esp,0x10
c0003d8c:	0f b6 d0             	movzx  edx,al
c0003d8f:	66 c1 e8 08          	shr    ax,0x8
c0003d93:	01 d3                	add    ebx,edx
c0003d95:	66 d1 cb             	ror    bx,1
c0003d98:	01 c3                	add    ebx,eax
c0003d9a:	eb d5                	jmp    c0003d71 <xname_sum+0x7>
c0003d9c:	89 d8                	mov    eax,ebx
c0003d9e:	5a                   	pop    edx
c0003d9f:	5b                   	pop    ebx
c0003da0:	5e                   	pop    esi
c0003da1:	c3                   	ret    

c0003da2 <create_xdir>:
c0003da2:	55                   	push   ebp
c0003da3:	b9 40 00 00 00       	mov    ecx,0x40
c0003da8:	57                   	push   edi
c0003da9:	bd 01 00 00 00       	mov    ebp,0x1
c0003dae:	56                   	push   esi
c0003daf:	31 ff                	xor    edi,edi
c0003db1:	53                   	push   ebx
c0003db2:	be 40 00 00 00       	mov    esi,0x40
c0003db7:	89 c3                	mov    ebx,eax
c0003db9:	83 ec 1c             	sub    esp,0x1c
c0003dbc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003dc0:	31 d2                	xor    edx,edx
c0003dc2:	e8 18 dd ff ff       	call   c0001adf <mem_set>
c0003dc7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003dca:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003dce:	31 c9                	xor    ecx,ecx
c0003dd0:	8d 46 01             	lea    eax,[esi+0x1]
c0003dd3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003dd7:	83 c6 02             	add    esi,0x2
c0003dda:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	74 12                	je     c0003df5 <create_xdir+0x53>
c0003de3:	0f b6 c1             	movzx  eax,cl
c0003de6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dea:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003dee:	66 83 fd 01          	cmp    bp,0x1
c0003df2:	80 d9 ff             	sbb    cl,0xff
c0003df5:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003df8:	0f b7 d5             	movzx  edx,bp
c0003dfb:	83 c6 02             	add    esi,0x2
c0003dfe:	e8 ba dc ff ff       	call   c0001abd <st_word>
c0003e03:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003e09:	75 d3                	jne    c0003dde <create_xdir+0x3c>
c0003e0b:	8d 47 01             	lea    eax,[edi+0x1]
c0003e0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e12:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003e16:	0f b6 c1             	movzx  eax,cl
c0003e19:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003e1e:	74 07                	je     c0003e27 <create_xdir+0x85>
c0003e20:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e25:	eb a9                	jmp    c0003dd0 <create_xdir+0x2e>
c0003e27:	8d 47 02             	lea    eax,[edi+0x2]
c0003e2a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e2d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e30:	89 d0                	mov    eax,edx
c0003e32:	e8 33 ff ff ff       	call   c0003d6a <xname_sum>
c0003e37:	83 c4 1c             	add    esp,0x1c
c0003e3a:	0f b7 d0             	movzx  edx,ax
c0003e3d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e40:	5b                   	pop    ebx
c0003e41:	5e                   	pop    esi
c0003e42:	5f                   	pop    edi
c0003e43:	5d                   	pop    ebp
c0003e44:	e9 74 dc ff ff       	jmp    c0001abd <st_word>

c0003e49 <cmp_lfn>:
c0003e49:	55                   	push   ebp
c0003e4a:	57                   	push   edi
c0003e4b:	89 d7                	mov    edi,edx
c0003e4d:	56                   	push   esi
c0003e4e:	53                   	push   ebx
c0003e4f:	83 ec 1c             	sub    esp,0x1c
c0003e52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e56:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e59:	e8 ed db ff ff       	call   c0001a4b <ld_word>
c0003e5e:	66 85 c0             	test   ax,ax
c0003e61:	74 07                	je     c0003e6a <cmp_lfn+0x21>
c0003e63:	31 c0                	xor    eax,eax
c0003e65:	e9 9a 00 00 00       	jmp    c0003f04 <cmp_lfn+0xbb>
c0003e6a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e6c:	bd 01 00 00 00       	mov    ebp,0x1
c0003e71:	83 e3 3f             	and    ebx,0x3f
c0003e74:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e7c:	4b                   	dec    ebx
c0003e7d:	6b db 0d             	imul   ebx,ebx,0xd
c0003e80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e84:	0f b6 80 20 60 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9fe0]
c0003e8b:	01 f8                	add    eax,edi
c0003e8d:	e8 b9 db ff ff       	call   c0001a4b <ld_word>
c0003e92:	66 85 ed             	test   bp,bp
c0003e95:	89 c6                	mov    esi,eax
c0003e97:	74 3c                	je     c0003ed5 <cmp_lfn+0x8c>
c0003e99:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e9f:	77 c2                	ja     c0003e63 <cmp_lfn+0x1a>
c0003ea1:	83 ec 0c             	sub    esp,0xc
c0003ea4:	0f b7 c0             	movzx  eax,ax
c0003ea7:	50                   	push   eax
c0003ea8:	e8 fa 44 00 00       	call   c00083a7 <ff_wtoupper>
c0003ead:	89 c5                	mov    ebp,eax
c0003eaf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003eb2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003eb6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003eba:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003ebe:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ec1:	e8 e1 44 00 00       	call   c00083a7 <ff_wtoupper>
c0003ec6:	83 c4 10             	add    esp,0x10
c0003ec9:	39 c5                	cmp    ebp,eax
c0003ecb:	75 96                	jne    c0003e63 <cmp_lfn+0x1a>
c0003ecd:	89 f5                	mov    ebp,esi
c0003ecf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ed3:	eb 04                	jmp    c0003ed9 <cmp_lfn+0x90>
c0003ed5:	66 46                	inc    si
c0003ed7:	75 8a                	jne    c0003e63 <cmp_lfn+0x1a>
c0003ed9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003edd:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ee2:	75 9c                	jne    c0003e80 <cmp_lfn+0x37>
c0003ee4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ee7:	74 16                	je     c0003eff <cmp_lfn+0xb6>
c0003ee9:	66 85 ed             	test   bp,bp
c0003eec:	74 11                	je     c0003eff <cmp_lfn+0xb6>
c0003eee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ef2:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ef7:	0f 94 c0             	sete   al
c0003efa:	0f b6 c0             	movzx  eax,al
c0003efd:	eb 05                	jmp    c0003f04 <cmp_lfn+0xbb>
c0003eff:	b8 01 00 00 00       	mov    eax,0x1
c0003f04:	83 c4 1c             	add    esp,0x1c
c0003f07:	5b                   	pop    ebx
c0003f08:	5e                   	pop    esi
c0003f09:	5f                   	pop    edi
c0003f0a:	5d                   	pop    ebp
c0003f0b:	c3                   	ret    

c0003f0c <dir_find>:
c0003f0c:	55                   	push   ebp
c0003f0d:	31 d2                	xor    edx,edx
c0003f0f:	57                   	push   edi
c0003f10:	56                   	push   esi
c0003f11:	53                   	push   ebx
c0003f12:	89 c3                	mov    ebx,eax
c0003f14:	83 ec 1c             	sub    esp,0x1c
c0003f17:	8b 30                	mov    esi,DWORD PTR [eax]
c0003f19:	e8 89 f0 ff ff       	call   c0002fa7 <dir_sdi>
c0003f1e:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f21:	85 c0                	test   eax,eax
c0003f23:	0f 85 9e 01 00 00    	jne    c00040c7 <dir_find+0x1bb>
c0003f29:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f2c:	0f 85 8d 00 00 00    	jne    c0003fbf <dir_find+0xb3>
c0003f32:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f35:	e8 30 fe ff ff       	call   c0003d6a <xname_sum>
c0003f3a:	89 c7                	mov    edi,eax
c0003f3c:	31 d2                	xor    edx,edx
c0003f3e:	89 d8                	mov    eax,ebx
c0003f40:	e8 72 f8 ff ff       	call   c00037b7 <dir_read>
c0003f45:	85 c0                	test   eax,eax
c0003f47:	0f 85 5e 01 00 00    	jne    c00040ab <dir_find+0x19f>
c0003f4d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f50:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f53:	e8 f3 da ff ff       	call   c0001a4b <ld_word>
c0003f58:	66 39 f8             	cmp    ax,di
c0003f5b:	75 df                	jne    c0003f3c <dir_find+0x30>
c0003f5d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f60:	31 ed                	xor    ebp,ebp
c0003f62:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f66:	ba 40 00 00 00       	mov    edx,0x40
c0003f6b:	89 e9                	mov    ecx,ebp
c0003f6d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f71:	0f 84 42 01 00 00    	je     c00040b9 <dir_find+0x1ad>
c0003f77:	f6 c2 1f             	test   dl,0x1f
c0003f7a:	75 03                	jne    c0003f7f <dir_find+0x73>
c0003f7c:	83 c2 02             	add    edx,0x2
c0003f7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f83:	89 d0                	mov    eax,edx
c0003f85:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f88:	e8 be da ff ff       	call   c0001a4b <ld_word>
c0003f8d:	83 ec 0c             	sub    esp,0xc
c0003f90:	0f b7 c0             	movzx  eax,ax
c0003f93:	50                   	push   eax
c0003f94:	e8 0e 44 00 00       	call   c00083a7 <ff_wtoupper>
c0003f99:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f9d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fa0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003fa4:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fa7:	e8 fb 43 00 00       	call   c00083a7 <ff_wtoupper>
c0003fac:	83 c4 10             	add    esp,0x10
c0003faf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003fb3:	75 87                	jne    c0003f3c <dir_find+0x30>
c0003fb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003fb9:	45                   	inc    ebp
c0003fba:	83 c2 02             	add    edx,0x2
c0003fbd:	eb ac                	jmp    c0003f6b <dir_find+0x5f>
c0003fbf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fc6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fcb:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fd0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fd3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fd6:	89 f0                	mov    eax,esi
c0003fd8:	e8 4c e2 ff ff       	call   c0002229 <move_window>
c0003fdd:	85 c0                	test   eax,eax
c0003fdf:	0f 85 c6 00 00 00    	jne    c00040ab <dir_find+0x19f>
c0003fe5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fe8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003feb:	84 c9                	test   cl,cl
c0003fed:	0f 84 bd 00 00 00    	je     c00040b0 <dir_find+0x1a4>
c0003ff3:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ff6:	88 d0                	mov    al,dl
c0003ff8:	83 e0 3f             	and    eax,0x3f
c0003ffb:	80 f9 e5             	cmp    cl,0xe5
c0003ffe:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004001:	0f 84 87 00 00 00    	je     c000408e <dir_find+0x182>
c0004007:	80 e2 08             	and    dl,0x8
c000400a:	74 06                	je     c0004012 <dir_find+0x106>
c000400c:	3c 0f                	cmp    al,0xf
c000400e:	75 7e                	jne    c000408e <dir_find+0x182>
c0004010:	eb 04                	jmp    c0004016 <dir_find+0x10a>
c0004012:	3c 0f                	cmp    al,0xf
c0004014:	75 4c                	jne    c0004062 <dir_find+0x156>
c0004016:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000401a:	75 7e                	jne    c000409a <dir_find+0x18e>
c000401c:	f6 c1 40             	test   cl,0x40
c000401f:	74 12                	je     c0004033 <dir_find+0x127>
c0004021:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004024:	83 e1 bf             	and    ecx,0xffffffbf
c0004027:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000402b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000402e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004031:	eb 06                	jmp    c0004039 <dir_find+0x12d>
c0004033:	89 f8                	mov    eax,edi
c0004035:	38 c8                	cmp    al,cl
c0004037:	75 5c                	jne    c0004095 <dir_find+0x189>
c0004039:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000403d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004042:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004045:	75 53                	jne    c000409a <dir_find+0x18e>
c0004047:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000404b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000404e:	89 ea                	mov    edx,ebp
c0004050:	e8 f4 fd ff ff       	call   c0003e49 <cmp_lfn>
c0004055:	85 c0                	test   eax,eax
c0004057:	74 41                	je     c000409a <dir_find+0x18e>
c0004059:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000405d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004060:	eb 38                	jmp    c000409a <dir_find+0x18e>
c0004062:	89 f8                	mov    eax,edi
c0004064:	84 c0                	test   al,al
c0004066:	75 0d                	jne    c0004075 <dir_find+0x169>
c0004068:	89 e8                	mov    eax,ebp
c000406a:	e8 98 de ff ff       	call   c0001f07 <sum_sfn>
c000406f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004073:	74 52                	je     c00040c7 <dir_find+0x1bb>
c0004075:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004079:	75 13                	jne    c000408e <dir_find+0x182>
c000407b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000407e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004083:	89 e8                	mov    eax,ebp
c0004085:	e8 60 da ff ff       	call   c0001aea <mem_cmp>
c000408a:	85 c0                	test   eax,eax
c000408c:	74 39                	je     c00040c7 <dir_find+0x1bb>
c000408e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004095:	bf ff ff ff ff       	mov    edi,0xffffffff
c000409a:	31 d2                	xor    edx,edx
c000409c:	89 d8                	mov    eax,ebx
c000409e:	e8 5c f4 ff ff       	call   c00034ff <dir_next>
c00040a3:	85 c0                	test   eax,eax
c00040a5:	0f 84 25 ff ff ff    	je     c0003fd0 <dir_find+0xc4>
c00040ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00040ae:	eb 17                	jmp    c00040c7 <dir_find+0x1bb>
c00040b0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00040b7:	eb 0e                	jmp    c00040c7 <dir_find+0x1bb>
c00040b9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040bc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00040c1:	0f 85 75 fe ff ff    	jne    c0003f3c <dir_find+0x30>
c00040c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040ca:	83 c4 1c             	add    esp,0x1c
c00040cd:	5b                   	pop    ebx
c00040ce:	5e                   	pop    esi
c00040cf:	5f                   	pop    edi
c00040d0:	5d                   	pop    ebp
c00040d1:	c3                   	ret    

c00040d2 <dir_register>:
c00040d2:	55                   	push   ebp
c00040d3:	57                   	push   edi
c00040d4:	56                   	push   esi
c00040d5:	be 06 00 00 00       	mov    esi,0x6
c00040da:	53                   	push   ebx
c00040db:	83 ec 6c             	sub    esp,0x6c
c00040de:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040e2:	0f 85 62 02 00 00    	jne    c000434a <dir_register+0x278>
c00040e8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040ea:	31 ff                	xor    edi,edi
c00040ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040ef:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040f4:	74 03                	je     c00040f9 <dir_register+0x27>
c00040f6:	47                   	inc    edi
c00040f7:	eb f6                	jmp    c00040ef <dir_register+0x1d>
c00040f9:	89 c3                	mov    ebx,eax
c00040fb:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040ff:	0f 85 e1 00 00 00    	jne    c00041e6 <dir_register+0x114>
c0004105:	83 c7 0e             	add    edi,0xe
c0004108:	b9 0f 00 00 00       	mov    ecx,0xf
c000410d:	89 f8                	mov    eax,edi
c000410f:	31 d2                	xor    edx,edx
c0004111:	f7 f1                	div    ecx
c0004113:	8d 50 02             	lea    edx,[eax+0x2]
c0004116:	89 c7                	mov    edi,eax
c0004118:	89 d8                	mov    eax,ebx
c000411a:	e8 12 f8 ff ff       	call   c0003931 <dir_alloc>
c000411f:	89 c6                	mov    esi,eax
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 21 02 00 00    	jne    c000434a <dir_register+0x278>
c0004129:	81 c7 01 00 00 08    	add    edi,0x8000001
c000412f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004132:	c1 e7 05             	shl    edi,0x5
c0004135:	29 f8                	sub    eax,edi
c0004137:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000413a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000413d:	a8 04                	test   al,0x4
c000413f:	0f 84 91 00 00 00    	je     c00041d6 <dir_register+0x104>
c0004145:	83 e0 fb             	and    eax,0xfffffffb
c0004148:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000414b:	89 d8                	mov    eax,ebx
c000414d:	e8 25 ec ff ff       	call   c0002d77 <fill_first_frag>
c0004152:	85 c0                	test   eax,eax
c0004154:	0f 85 ee 01 00 00    	jne    c0004348 <dir_register+0x276>
c000415a:	83 c9 ff             	or     ecx,0xffffffff
c000415d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004160:	89 d8                	mov    eax,ebx
c0004162:	e8 db eb ff ff       	call   c0002d42 <fill_last_frag>
c0004167:	85 c0                	test   eax,eax
c0004169:	0f 85 d9 01 00 00    	jne    c0004348 <dir_register+0x276>
c000416f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004173:	74 61                	je     c00041d6 <dir_register+0x104>
c0004175:	89 da                	mov    edx,ebx
c0004177:	8d 44 24 14          	lea    eax,[esp+0x14]
c000417b:	e8 ea f5 ff ff       	call   c000376a <load_obj_xdir>
c0004180:	85 c0                	test   eax,eax
c0004182:	0f 85 c0 01 00 00    	jne    c0004348 <dir_register+0x276>
c0004188:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000418c:	31 c9                	xor    ecx,ecx
c000418e:	c1 e2 09             	shl    edx,0x9
c0004191:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004194:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004197:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000419a:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000419d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041a0:	83 c0 38             	add    eax,0x38
c00041a3:	e8 1c d9 ff ff       	call   c0001ac4 <st_qword>
c00041a8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041ab:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00041ae:	83 c0 28             	add    eax,0x28
c00041b1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00041b4:	e8 0b d9 ff ff       	call   c0001ac4 <st_qword>
c00041b9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00041bc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00041bf:	83 c8 01             	or     eax,0x1
c00041c2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041c5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041c9:	e8 db f7 ff ff       	call   c00039a9 <store_xdir>
c00041ce:	85 c0                	test   eax,eax
c00041d0:	0f 85 72 01 00 00    	jne    c0004348 <dir_register+0x276>
c00041d6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041d9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041dc:	e8 c1 fb ff ff       	call   c0003da2 <create_xdir>
c00041e1:	e9 64 01 00 00       	jmp    c000434a <dir_register+0x278>
c00041e6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041e9:	b9 0c 00 00 00       	mov    ecx,0xc
c00041ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041f2:	89 c2                	mov    edx,eax
c00041f4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041f8:	e8 cd d8 ff ff       	call   c0001aca <mem_cpy>
c00041fd:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004202:	74 58                	je     c000425c <dir_register+0x18a>
c0004204:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004208:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004210:	83 ec 0c             	sub    esp,0xc
c0004213:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004216:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000421a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000421e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004222:	e8 24 dc ff ff       	call   c0001e4b <gen_numname>
c0004227:	89 d8                	mov    eax,ebx
c0004229:	e8 de fc ff ff       	call   c0003f0c <dir_find>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	89 c6                	mov    esi,eax
c0004233:	85 c0                	test   eax,eax
c0004235:	75 15                	jne    c000424c <dir_register+0x17a>
c0004237:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000423b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004240:	75 ce                	jne    c0004210 <dir_register+0x13e>
c0004242:	be 07 00 00 00       	mov    esi,0x7
c0004247:	e9 fe 00 00 00       	jmp    c000434a <dir_register+0x278>
c000424c:	83 f8 04             	cmp    eax,0x4
c000424f:	0f 85 f5 00 00 00    	jne    c000434a <dir_register+0x278>
c0004255:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004259:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000425c:	b9 01 00 00 00       	mov    ecx,0x1
c0004261:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004266:	74 0f                	je     c0004277 <dir_register+0x1a5>
c0004268:	b9 0d 00 00 00       	mov    ecx,0xd
c000426d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004270:	31 d2                	xor    edx,edx
c0004272:	f7 f1                	div    ecx
c0004274:	8d 48 01             	lea    ecx,[eax+0x1]
c0004277:	89 ca                	mov    edx,ecx
c0004279:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000427d:	89 d8                	mov    eax,ebx
c000427f:	e8 ad f6 ff ff       	call   c0003931 <dir_alloc>
c0004284:	89 c6                	mov    esi,eax
c0004286:	85 c0                	test   eax,eax
c0004288:	0f 85 bc 00 00 00    	jne    c000434a <dir_register+0x278>
c000428e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004292:	49                   	dec    ecx
c0004293:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004297:	74 6a                	je     c0004303 <dir_register+0x231>
c0004299:	89 c8                	mov    eax,ecx
c000429b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000429e:	c1 e0 05             	shl    eax,0x5
c00042a1:	29 c2                	sub    edx,eax
c00042a3:	89 d8                	mov    eax,ebx
c00042a5:	e8 fd ec ff ff       	call   c0002fa7 <dir_sdi>
c00042aa:	89 c6                	mov    esi,eax
c00042ac:	85 c0                	test   eax,eax
c00042ae:	0f 85 96 00 00 00    	jne    c000434a <dir_register+0x278>
c00042b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00042b8:	e8 4a dc ff ff       	call   c0001f07 <sum_sfn>
c00042bd:	0f b6 f8             	movzx  edi,al
c00042c0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042c3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042c6:	89 e8                	mov    eax,ebp
c00042c8:	e8 5c df ff ff       	call   c0002229 <move_window>
c00042cd:	89 c6                	mov    esi,eax
c00042cf:	85 c0                	test   eax,eax
c00042d1:	75 77                	jne    c000434a <dir_register+0x278>
c00042d3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00042d8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042db:	83 ec 0c             	sub    esp,0xc
c00042de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042e1:	57                   	push   edi
c00042e2:	e8 e0 da ff ff       	call   c0001dc7 <put_lfn>
c00042e7:	31 d2                	xor    edx,edx
c00042e9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042ed:	89 d8                	mov    eax,ebx
c00042ef:	e8 0b f2 ff ff       	call   c00034ff <dir_next>
c00042f4:	83 c4 10             	add    esp,0x10
c00042f7:	89 c6                	mov    esi,eax
c00042f9:	85 c0                	test   eax,eax
c00042fb:	75 4d                	jne    c000434a <dir_register+0x278>
c00042fd:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004301:	75 bd                	jne    c00042c0 <dir_register+0x1ee>
c0004303:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004306:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004309:	89 e8                	mov    eax,ebp
c000430b:	e8 19 df ff ff       	call   c0002229 <move_window>
c0004310:	89 c6                	mov    esi,eax
c0004312:	85 c0                	test   eax,eax
c0004314:	75 34                	jne    c000434a <dir_register+0x278>
c0004316:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004319:	b9 20 00 00 00       	mov    ecx,0x20
c000431e:	31 d2                	xor    edx,edx
c0004320:	e8 ba d7 ff ff       	call   c0001adf <mem_set>
c0004325:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004328:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000432c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004331:	e8 94 d7 ff ff       	call   c0001aca <mem_cpy>
c0004336:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004339:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000433c:	83 e0 18             	and    eax,0x18
c000433f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004342:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004346:	eb 02                	jmp    c000434a <dir_register+0x278>
c0004348:	89 c6                	mov    esi,eax
c000434a:	83 c4 6c             	add    esp,0x6c
c000434d:	89 f0                	mov    eax,esi
c000434f:	5b                   	pop    ebx
c0004350:	5e                   	pop    esi
c0004351:	5f                   	pop    edi
c0004352:	5d                   	pop    ebp
c0004353:	c3                   	ret    

c0004354 <sync_fs>:
c0004354:	56                   	push   esi
c0004355:	53                   	push   ebx
c0004356:	53                   	push   ebx
c0004357:	89 c3                	mov    ebx,eax
c0004359:	e8 37 de ff ff       	call   c0002195 <sync_window>
c000435e:	85 c0                	test   eax,eax
c0004360:	0f 85 b1 00 00 00    	jne    c0004417 <sync_fs+0xc3>
c0004366:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004369:	0f 85 8e 00 00 00    	jne    c00043fd <sync_fs+0xa9>
c000436f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004373:	0f 85 84 00 00 00    	jne    c00043fd <sync_fs+0xa9>
c0004379:	b9 00 02 00 00       	mov    ecx,0x200
c000437e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004381:	31 d2                	xor    edx,edx
c0004383:	89 f0                	mov    eax,esi
c0004385:	e8 55 d7 ff ff       	call   c0001adf <mem_set>
c000438a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004390:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004395:	e8 23 d7 ff ff       	call   c0001abd <st_word>
c000439a:	ba 52 52 61 41       	mov    edx,0x41615252
c000439f:	89 f0                	mov    eax,esi
c00043a1:	e8 1b d7 ff ff       	call   c0001ac1 <st_dword>
c00043a6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00043ac:	ba 72 72 41 61       	mov    edx,0x61417272
c00043b1:	e8 0b d7 ff ff       	call   c0001ac1 <st_dword>
c00043b6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00043bf:	e8 fd d6 ff ff       	call   c0001ac1 <st_dword>
c00043c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043c7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043cd:	e8 ef d6 ff ff       	call   c0001ac1 <st_dword>
c00043d2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043d5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043d8:	83 c0 01             	add    eax,0x1
c00043db:	83 d2 00             	adc    edx,0x0
c00043de:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043e1:	83 ec 0c             	sub    esp,0xc
c00043e4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043e7:	6a 01                	push   0x1
c00043e9:	52                   	push   edx
c00043ea:	50                   	push   eax
c00043eb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043ef:	56                   	push   esi
c00043f0:	50                   	push   eax
c00043f1:	e8 20 d6 ff ff       	call   c0001a16 <disk_write>
c00043f6:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043fa:	83 c4 20             	add    esp,0x20
c00043fd:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004401:	51                   	push   ecx
c0004402:	6a 00                	push   0x0
c0004404:	6a 00                	push   0x0
c0004406:	50                   	push   eax
c0004407:	e8 20 d6 ff ff       	call   c0001a2c <disk_ioctl>
c000440c:	83 c4 10             	add    esp,0x10
c000440f:	85 c0                	test   eax,eax
c0004411:	0f 95 c0             	setne  al
c0004414:	0f b6 c0             	movzx  eax,al
c0004417:	5a                   	pop    edx
c0004418:	5b                   	pop    ebx
c0004419:	5e                   	pop    esi
c000441a:	c3                   	ret    

c000441b <create_partition>:
c000441b:	55                   	push   ebp
c000441c:	0f b6 c0             	movzx  eax,al
c000441f:	57                   	push   edi
c0004420:	56                   	push   esi
c0004421:	53                   	push   ebx
c0004422:	83 ec 60             	sub    esp,0x60
c0004425:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004429:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000442d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004431:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004435:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004439:	50                   	push   eax
c000443a:	6a 01                	push   0x1
c000443c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004440:	e8 e7 d5 ff ff       	call   c0001a2c <disk_ioctl>
c0004445:	83 c4 10             	add    esp,0x10
c0004448:	85 c0                	test   eax,eax
c000444a:	74 0a                	je     c0004456 <create_partition+0x3b>
c000444c:	b8 01 00 00 00       	mov    eax,0x1
c0004451:	e9 67 05 00 00       	jmp    c00049bd <create_partition+0x5a2>
c0004456:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000445a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000445e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004462:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004466:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000446b:	0f 86 ed 03 00 00    	jbe    c000485e <create_partition+0x443>
c0004471:	83 c0 df             	add    eax,0xffffffdf
c0004474:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000447c:	83 d2 ff             	adc    edx,0xffffffff
c000447f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004483:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004487:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000448b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000448f:	83 c0 bd             	add    eax,0xffffffbd
c0004492:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004499:	83 d2 ff             	adc    edx,0xffffffff
c000449c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00044a0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00044a4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044ac:	be 22 00 00 00       	mov    esi,0x22
c00044b1:	31 ff                	xor    edi,edi
c00044b3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00044bb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044c3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044cb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044d5:	75 0e                	jne    c00044e5 <create_partition+0xca>
c00044d7:	b9 00 02 00 00       	mov    ecx,0x200
c00044dc:	31 d2                	xor    edx,edx
c00044de:	89 d8                	mov    eax,ebx
c00044e0:	e8 fa d5 ff ff       	call   c0001adf <mem_set>
c00044e5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044e9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044f1:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044f4:	0f 84 23 01 00 00    	je     c000461d <create_partition+0x202>
c00044fa:	89 f0                	mov    eax,esi
c00044fc:	89 fa                	mov    edx,edi
c00044fe:	05 ff 07 00 00       	add    eax,0x7ff
c0004503:	83 d2 00             	adc    edx,0x0
c0004506:	89 c1                	mov    ecx,eax
c0004508:	89 d7                	mov    edi,edx
c000450a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004510:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004514:	89 ce                	mov    esi,ecx
c0004516:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000451a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000451e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004522:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004525:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004529:	89 04 24             	mov    DWORD PTR [esp],eax
c000452c:	b8 64 00 00 00       	mov    eax,0x64
c0004531:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004534:	b8 00 00 00 00       	mov    eax,0x0
c0004539:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000453d:	72 41                	jb     c0004580 <create_partition+0x165>
c000453f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004543:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004547:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000454b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004550:	01 c1                	add    ecx,eax
c0004552:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004556:	f7 24 24             	mul    DWORD PTR [esp]
c0004559:	6a 00                	push   0x0
c000455b:	01 ca                	add    edx,ecx
c000455d:	6a 64                	push   0x64
c000455f:	52                   	push   edx
c0004560:	50                   	push   eax
c0004561:	e8 36 f0 01 00       	call   c002359c <__udivdi3>
c0004566:	83 c4 10             	add    esp,0x10
c0004569:	05 ff 07 00 00       	add    eax,0x7ff
c000456e:	83 d2 00             	adc    edx,0x0
c0004571:	89 c1                	mov    ecx,eax
c0004573:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004577:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000457d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004580:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004583:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004587:	01 f0                	add    eax,esi
c0004589:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000458d:	11 fa                	adc    edx,edi
c000458f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004593:	19 d1                	sbb    ecx,edx
c0004595:	73 2e                	jae    c00045c5 <create_partition+0x1aa>
c0004597:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000459b:	89 f8                	mov    eax,edi
c000459d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00045a4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00045a8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045b0:	73 6b                	jae    c000461d <create_partition+0x202>
c00045b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00045b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00045ba:	29 f0                	sub    eax,esi
c00045bc:	19 fa                	sbb    edx,edi
c00045be:	89 04 24             	mov    DWORD PTR [esp],eax
c00045c1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045c9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045cc:	74 4f                	je     c000461d <create_partition+0x202>
c00045ce:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045d1:	b9 10 00 00 00       	mov    ecx,0x10
c00045d6:	ba 30 60 02 c0       	mov    edx,0xc0026030
c00045db:	e8 ea d4 ff ff       	call   c0001aca <mem_cpy>
c00045e0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045e4:	b9 10 00 00 00       	mov    ecx,0x10
c00045e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045ed:	e8 2c db ff ff       	call   c000211e <make_rand>
c00045f2:	89 f2                	mov    edx,esi
c00045f4:	89 f9                	mov    ecx,edi
c00045f6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045fa:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045fe:	e8 c1 d4 ff ff       	call   c0001ac4 <st_qword>
c0004603:	03 34 24             	add    esi,DWORD PTR [esp]
c0004606:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000460a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000460e:	89 f2                	mov    edx,esi
c0004610:	89 f9                	mov    ecx,edi
c0004612:	83 c2 ff             	add    edx,0xffffffff
c0004615:	83 d1 ff             	adc    ecx,0xffffffff
c0004618:	e8 a7 d4 ff ff       	call   c0001ac4 <st_qword>
c000461d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004621:	83 e8 80             	sub    eax,0xffffff80
c0004624:	89 c5                	mov    ebp,eax
c0004626:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000462a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004630:	75 6b                	jne    c000469d <create_partition+0x282>
c0004632:	45                   	inc    ebp
c0004633:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004637:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000463c:	e8 39 da ff ff       	call   c000207a <crc32>
c0004641:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004647:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000464b:	75 e5                	jne    c0004632 <create_partition+0x217>
c000464d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004651:	31 d2                	xor    edx,edx
c0004653:	83 ec 0c             	sub    esp,0xc
c0004656:	c1 ed 09             	shr    ebp,0x9
c0004659:	6a 01                	push   0x1
c000465b:	8d 45 02             	lea    eax,[ebp+0x2]
c000465e:	52                   	push   edx
c000465f:	50                   	push   eax
c0004660:	53                   	push   ebx
c0004661:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004665:	e8 ac d3 ff ff       	call   c0001a16 <disk_write>
c000466a:	83 c4 20             	add    esp,0x20
c000466d:	85 c0                	test   eax,eax
c000466f:	0f 85 d7 fd ff ff    	jne    c000444c <create_partition+0x31>
c0004675:	83 ec 0c             	sub    esp,0xc
c0004678:	31 d2                	xor    edx,edx
c000467a:	6a 01                	push   0x1
c000467c:	89 e8                	mov    eax,ebp
c000467e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004682:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004686:	52                   	push   edx
c0004687:	50                   	push   eax
c0004688:	53                   	push   ebx
c0004689:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000468d:	e8 84 d3 ff ff       	call   c0001a16 <disk_write>
c0004692:	83 c4 20             	add    esp,0x20
c0004695:	85 c0                	test   eax,eax
c0004697:	0f 85 af fd ff ff    	jne    c000444c <create_partition+0x31>
c000469d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046a1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00046a5:	3d 00 40 00 00       	cmp    eax,0x4000
c00046aa:	74 0d                	je     c00046b9 <create_partition+0x29e>
c00046ac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00046b0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00046b4:	e9 12 fe ff ff       	jmp    c00044cb <create_partition+0xb0>
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	b9 00 02 00 00       	mov    ecx,0x200
c00046c0:	89 d8                	mov    eax,ebx
c00046c2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046c5:	e8 15 d4 ff ff       	call   c0001adf <mem_set>
c00046ca:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046cd:	b9 10 00 00 00       	mov    ecx,0x10
c00046d2:	ba 20 5f 02 c0       	mov    edx,0xc0025f20
c00046d7:	89 d8                	mov    eax,ebx
c00046d9:	e8 ec d3 ff ff       	call   c0001aca <mem_cpy>
c00046de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046e2:	8d 43 58             	lea    eax,[ebx+0x58]
c00046e5:	f7 d2                	not    edx
c00046e7:	e8 d5 d3 ff ff       	call   c0001ac1 <st_dword>
c00046ec:	8d 43 18             	lea    eax,[ebx+0x18]
c00046ef:	31 c9                	xor    ecx,ecx
c00046f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00046f4:	ba 01 00 00 00       	mov    edx,0x1
c00046f9:	e8 c6 d3 ff ff       	call   c0001ac4 <st_qword>
c00046fe:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004702:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004706:	83 c2 ff             	add    edx,0xffffffff
c0004709:	89 e8                	mov    eax,ebp
c000470b:	83 d1 ff             	adc    ecx,0xffffffff
c000470e:	e8 b1 d3 ff ff       	call   c0001ac4 <st_qword>
c0004713:	31 c9                	xor    ecx,ecx
c0004715:	8d 43 28             	lea    eax,[ebx+0x28]
c0004718:	ba 22 00 00 00       	mov    edx,0x22
c000471d:	e8 a2 d3 ff ff       	call   c0001ac4 <st_qword>
c0004722:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004726:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000472a:	83 c2 de             	add    edx,0xffffffde
c000472d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004730:	83 d1 ff             	adc    ecx,0xffffffff
c0004733:	31 f6                	xor    esi,esi
c0004735:	e8 8a d3 ff ff       	call   c0001ac4 <st_qword>
c000473a:	8d 43 54             	lea    eax,[ebx+0x54]
c000473d:	ba 80 00 00 00       	mov    edx,0x80
c0004742:	e8 7a d3 ff ff       	call   c0001ac1 <st_dword>
c0004747:	8d 43 50             	lea    eax,[ebx+0x50]
c000474a:	ba 80 00 00 00       	mov    edx,0x80
c000474f:	e8 6d d3 ff ff       	call   c0001ac1 <st_dword>
c0004754:	ba 02 00 00 00       	mov    edx,0x2
c0004759:	89 f8                	mov    eax,edi
c000475b:	e8 61 d3 ff ff       	call   c0001ac1 <st_dword>
c0004760:	8d 53 38             	lea    edx,[ebx+0x38]
c0004763:	b9 10 00 00 00       	mov    ecx,0x10
c0004768:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000476c:	e8 ad d9 ff ff       	call   c000211e <make_rand>
c0004771:	83 c8 ff             	or     eax,0xffffffff
c0004774:	46                   	inc    esi
c0004775:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000477a:	e8 fb d8 ff ff       	call   c000207a <crc32>
c000477f:	83 fe 5c             	cmp    esi,0x5c
c0004782:	75 f0                	jne    c0004774 <create_partition+0x359>
c0004784:	f7 d0                	not    eax
c0004786:	8d 73 10             	lea    esi,[ebx+0x10]
c0004789:	89 c2                	mov    edx,eax
c000478b:	89 f0                	mov    eax,esi
c000478d:	e8 2f d3 ff ff       	call   c0001ac1 <st_dword>
c0004792:	83 ec 0c             	sub    esp,0xc
c0004795:	6a 01                	push   0x1
c0004797:	6a 00                	push   0x0
c0004799:	6a 01                	push   0x1
c000479b:	53                   	push   ebx
c000479c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047a0:	e8 71 d2 ff ff       	call   c0001a16 <disk_write>
c00047a5:	83 c4 20             	add    esp,0x20
c00047a8:	85 c0                	test   eax,eax
c00047aa:	0f 85 9c fc ff ff    	jne    c000444c <create_partition+0x31>
c00047b0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00047b4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00047b8:	83 c2 ff             	add    edx,0xffffffff
c00047bb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047be:	83 d1 ff             	adc    ecx,0xffffffff
c00047c1:	e8 fe d2 ff ff       	call   c0001ac4 <st_qword>
c00047c6:	ba 01 00 00 00       	mov    edx,0x1
c00047cb:	31 c9                	xor    ecx,ecx
c00047cd:	89 e8                	mov    eax,ebp
c00047cf:	e8 f0 d2 ff ff       	call   c0001ac4 <st_qword>
c00047d4:	89 f8                	mov    eax,edi
c00047d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047da:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047de:	31 ff                	xor    edi,edi
c00047e0:	e8 df d2 ff ff       	call   c0001ac4 <st_qword>
c00047e5:	89 f0                	mov    eax,esi
c00047e7:	31 d2                	xor    edx,edx
c00047e9:	e8 d3 d2 ff ff       	call   c0001ac1 <st_dword>
c00047ee:	83 c8 ff             	or     eax,0xffffffff
c00047f1:	47                   	inc    edi
c00047f2:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047f7:	e8 7e d8 ff ff       	call   c000207a <crc32>
c00047fc:	83 ff 5c             	cmp    edi,0x5c
c00047ff:	75 f0                	jne    c00047f1 <create_partition+0x3d6>
c0004801:	f7 d0                	not    eax
c0004803:	89 c2                	mov    edx,eax
c0004805:	89 f0                	mov    eax,esi
c0004807:	e8 b5 d2 ff ff       	call   c0001ac1 <st_dword>
c000480c:	83 ec 0c             	sub    esp,0xc
c000480f:	6a 01                	push   0x1
c0004811:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004815:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004819:	83 c0 ff             	add    eax,0xffffffff
c000481c:	83 d2 ff             	adc    edx,0xffffffff
c000481f:	52                   	push   edx
c0004820:	50                   	push   eax
c0004821:	53                   	push   ebx
c0004822:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004826:	e8 eb d1 ff ff       	call   c0001a16 <disk_write>
c000482b:	83 c4 20             	add    esp,0x20
c000482e:	85 c0                	test   eax,eax
c0004830:	0f 85 16 fc ff ff    	jne    c000444c <create_partition+0x31>
c0004836:	31 d2                	xor    edx,edx
c0004838:	89 d8                	mov    eax,ebx
c000483a:	b9 00 02 00 00       	mov    ecx,0x200
c000483f:	e8 9b d2 ff ff       	call   c0001adf <mem_set>
c0004844:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000484a:	b9 10 00 00 00       	mov    ecx,0x10
c000484f:	ba 30 5f 02 c0       	mov    edx,0xc0025f30
c0004854:	e8 71 d2 ff ff       	call   c0001aca <mem_cpy>
c0004859:	e9 21 01 00 00       	jmp    c000497f <create_partition+0x564>
c000485e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004862:	b9 05 00 00 00       	mov    ecx,0x5
c0004867:	89 04 24             	mov    DWORD PTR [esp],eax
c000486a:	bf 08 00 00 00       	mov    edi,0x8
c000486f:	89 f8                	mov    eax,edi
c0004871:	31 d2                	xor    edx,edx
c0004873:	0f b6 f0             	movzx  esi,al
c0004876:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004879:	f7 f6                	div    esi
c000487b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004880:	76 0a                	jbe    c000488c <create_partition+0x471>
c0004882:	d1 e7                	shl    edi,1
c0004884:	49                   	dec    ecx
c0004885:	75 e8                	jne    c000486f <create_partition+0x454>
c0004887:	bf ff ff ff ff       	mov    edi,0xffffffff
c000488c:	b9 00 02 00 00       	mov    ecx,0x200
c0004891:	31 d2                	xor    edx,edx
c0004893:	89 d8                	mov    eax,ebx
c0004895:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c000489b:	e8 3f d2 ff ff       	call   c0001adf <mem_set>
c00048a0:	b9 64 00 00 00       	mov    ecx,0x64
c00048a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048a8:	31 d2                	xor    edx,edx
c00048aa:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00048b2:	f7 f1                	div    ecx
c00048b4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00048b9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048bd:	89 f8                	mov    eax,edi
c00048bf:	0f b6 c0             	movzx  eax,al
c00048c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00048c6:	e9 80 00 00 00       	jmp    c000494b <create_partition+0x530>
c00048cb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048ce:	29 cf                	sub    edi,ecx
c00048d0:	89 ca                	mov    edx,ecx
c00048d2:	89 f0                	mov    eax,esi
c00048d4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048d9:	e8 e3 d1 ff ff       	call   c0001ac1 <st_dword>
c00048de:	8d 46 04             	lea    eax,[esi+0x4]
c00048e1:	89 fa                	mov    edx,edi
c00048e3:	83 c6 10             	add    esi,0x10
c00048e6:	e8 d6 d1 ff ff       	call   c0001ac1 <st_dword>
c00048eb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048ef:	31 d2                	xor    edx,edx
c00048f1:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048f4:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048f8:	89 c8                	mov    eax,ecx
c00048fa:	01 f9                	add    ecx,edi
c00048fc:	f7 f5                	div    ebp
c00048fe:	89 d5                	mov    ebp,edx
c0004900:	31 d2                	xor    edx,edx
c0004902:	45                   	inc    ebp
c0004903:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004907:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000490a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c000490d:	89 c2                	mov    edx,eax
c000490f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004912:	c1 ea 02             	shr    edx,0x2
c0004915:	83 e2 c0             	and    edx,0xffffffc0
c0004918:	09 ea                	or     edx,ebp
c000491a:	bd 3f 00 00 00       	mov    ebp,0x3f
c000491f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004922:	31 d2                	xor    edx,edx
c0004924:	f7 f5                	div    ebp
c0004926:	89 d7                	mov    edi,edx
c0004928:	31 d2                	xor    edx,edx
c000492a:	47                   	inc    edi
c000492b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000492f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004932:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004935:	89 c5                	mov    ebp,eax
c0004937:	c1 ed 02             	shr    ebp,0x2
c000493a:	83 e5 c0             	and    ebp,0xffffffc0
c000493d:	09 ef                	or     edi,ebp
c000493f:	89 fa                	mov    edx,edi
c0004941:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004944:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004949:	74 34                	je     c000497f <create_partition+0x564>
c000494b:	85 c9                	test   ecx,ecx
c000494d:	74 30                	je     c000497f <create_partition+0x564>
c000494f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004952:	76 2b                	jbe    c000497f <create_partition+0x564>
c0004954:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004958:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000495c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c000495f:	83 ff 64             	cmp    edi,0x64
c0004962:	76 4b                	jbe    c00049af <create_partition+0x594>
c0004964:	89 f8                	mov    eax,edi
c0004966:	01 c8                	add    eax,ecx
c0004968:	0f 82 5d ff ff ff    	jb     c00048cb <create_partition+0x4b0>
c000496e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004971:	0f 87 54 ff ff ff    	ja     c00048cb <create_partition+0x4b0>
c0004977:	85 ff                	test   edi,edi
c0004979:	0f 85 51 ff ff ff    	jne    c00048d0 <create_partition+0x4b5>
c000497f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004985:	ba 55 aa 00 00       	mov    edx,0xaa55
c000498a:	e8 2e d1 ff ff       	call   c0001abd <st_word>
c000498f:	83 ec 0c             	sub    esp,0xc
c0004992:	6a 01                	push   0x1
c0004994:	6a 00                	push   0x0
c0004996:	6a 00                	push   0x0
c0004998:	53                   	push   ebx
c0004999:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000499d:	e8 74 d0 ff ff       	call   c0001a16 <disk_write>
c00049a2:	83 c4 20             	add    esp,0x20
c00049a5:	85 c0                	test   eax,eax
c00049a7:	0f 95 c0             	setne  al
c00049aa:	0f b6 c0             	movzx  eax,al
c00049ad:	eb 0e                	jmp    c00049bd <create_partition+0x5a2>
c00049af:	74 07                	je     c00049b8 <create_partition+0x59d>
c00049b1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00049b6:	eb ac                	jmp    c0004964 <create_partition+0x549>
c00049b8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049bb:	eb a7                	jmp    c0004964 <create_partition+0x549>
c00049bd:	83 c4 5c             	add    esp,0x5c
c00049c0:	5b                   	pop    ebx
c00049c1:	5e                   	pop    esi
c00049c2:	5f                   	pop    edi
c00049c3:	5d                   	pop    ebp
c00049c4:	c3                   	ret    

c00049c5 <get_fileinfo>:
c00049c5:	55                   	push   ebp
c00049c6:	57                   	push   edi
c00049c7:	56                   	push   esi
c00049c8:	53                   	push   ebx
c00049c9:	83 ec 1c             	sub    esp,0x1c
c00049cc:	8b 30                	mov    esi,DWORD PTR [eax]
c00049ce:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049d2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049d6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049d9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049dc:	0f 84 dc 01 00 00    	je     c0004bbe <get_fileinfo+0x1f9>
c00049e2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049e5:	75 0f                	jne    c00049f6 <get_fileinfo+0x31>
c00049e7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049ea:	83 c4 1c             	add    esp,0x1c
c00049ed:	5b                   	pop    ebx
c00049ee:	5e                   	pop    esi
c00049ef:	5f                   	pop    edi
c00049f0:	5d                   	pop    ebp
c00049f1:	e9 58 d5 ff ff       	jmp    c0001f4e <get_xfileinfo>
c00049f6:	89 d3                	mov    ebx,edx
c00049f8:	89 c6                	mov    esi,eax
c00049fa:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049fe:	74 6a                	je     c0004a6a <get_fileinfo+0xa5>
c0004a00:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004a08:	31 ed                	xor    ebp,ebp
c0004a0a:	31 ff                	xor    edi,edi
c0004a0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004a10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a14:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a17:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a1b:	66 85 d2             	test   dx,dx
c0004a1e:	74 3e                	je     c0004a5e <get_fileinfo+0x99>
c0004a20:	66 85 ed             	test   bp,bp
c0004a23:	75 0c                	jne    c0004a31 <get_fileinfo+0x6c>
c0004a25:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a2b:	66 3d ff 07          	cmp    ax,0x7ff
c0004a2f:	76 22                	jbe    c0004a53 <get_fileinfo+0x8e>
c0004a31:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a36:	89 e8                	mov    eax,ebp
c0004a38:	29 f9                	sub    ecx,edi
c0004a3a:	c1 e0 10             	shl    eax,0x10
c0004a3d:	09 d0                	or     eax,edx
c0004a3f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a43:	e8 a3 d1 ff ff       	call   c0001beb <put_utf>
c0004a48:	84 c0                	test   al,al
c0004a4a:	74 10                	je     c0004a5c <get_fileinfo+0x97>
c0004a4c:	0f b6 c0             	movzx  eax,al
c0004a4f:	31 d2                	xor    edx,edx
c0004a51:	01 c7                	add    edi,eax
c0004a53:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a58:	89 d5                	mov    ebp,edx
c0004a5a:	eb b0                	jmp    c0004a0c <get_fileinfo+0x47>
c0004a5c:	31 ff                	xor    edi,edi
c0004a5e:	66 85 ed             	test   bp,bp
c0004a61:	74 02                	je     c0004a65 <get_fileinfo+0xa0>
c0004a63:	31 ff                	xor    edi,edi
c0004a65:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a6a:	31 ff                	xor    edi,edi
c0004a6c:	31 c9                	xor    ecx,ecx
c0004a6e:	83 f9 0a             	cmp    ecx,0xa
c0004a71:	0f 87 ad 00 00 00    	ja     c0004b24 <get_fileinfo+0x15f>
c0004a77:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a7a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a7d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a81:	66 83 fa 20          	cmp    dx,0x20
c0004a85:	0f 84 92 00 00 00    	je     c0004b1d <get_fileinfo+0x158>
c0004a8b:	66 83 fa 05          	cmp    dx,0x5
c0004a8f:	75 05                	jne    c0004a96 <get_fileinfo+0xd1>
c0004a91:	ba e5 00 00 00       	mov    edx,0xe5
c0004a96:	83 ff 0b             	cmp    edi,0xb
c0004a99:	77 0b                	ja     c0004aa6 <get_fileinfo+0xe1>
c0004a9b:	83 fd 09             	cmp    ebp,0x9
c0004a9e:	75 06                	jne    c0004aa6 <get_fileinfo+0xe1>
c0004aa0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004aa5:	47                   	inc    edi
c0004aa6:	0f b7 c2             	movzx  eax,dx
c0004aa9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004aad:	e8 6d d0 ff ff       	call   c0001b1f <dbc_1st>
c0004ab2:	85 c0                	test   eax,eax
c0004ab4:	74 2f                	je     c0004ae5 <get_fileinfo+0x120>
c0004ab6:	83 fd 08             	cmp    ebp,0x8
c0004ab9:	74 2a                	je     c0004ae5 <get_fileinfo+0x120>
c0004abb:	83 fd 0b             	cmp    ebp,0xb
c0004abe:	74 25                	je     c0004ae5 <get_fileinfo+0x120>
c0004ac0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ac7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004acb:	e8 52 d0 ff ff       	call   c0001b22 <dbc_2nd>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	74 11                	je     c0004ae5 <get_fileinfo+0x120>
c0004ad4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ad8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004add:	c1 e2 08             	shl    edx,0x8
c0004ae0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004ae3:	09 c2                	or     edx,eax
c0004ae5:	0f b7 d2             	movzx  edx,dx
c0004ae8:	50                   	push   eax
c0004ae9:	50                   	push   eax
c0004aea:	68 b5 01 00 00       	push   0x1b5
c0004aef:	52                   	push   edx
c0004af0:	e8 46 38 00 00       	call   c000833b <ff_oem2uni>
c0004af5:	83 c4 10             	add    esp,0x10
c0004af8:	66 85 c0             	test   ax,ax
c0004afb:	75 04                	jne    c0004b01 <get_fileinfo+0x13c>
c0004afd:	31 ff                	xor    edi,edi
c0004aff:	eb 23                	jmp    c0004b24 <get_fileinfo+0x15f>
c0004b01:	b9 0c 00 00 00       	mov    ecx,0xc
c0004b06:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004b0a:	29 f9                	sub    ecx,edi
c0004b0c:	0f b7 c0             	movzx  eax,ax
c0004b0f:	e8 d7 d0 ff ff       	call   c0001beb <put_utf>
c0004b14:	84 c0                	test   al,al
c0004b16:	74 e5                	je     c0004afd <get_fileinfo+0x138>
c0004b18:	0f b6 c0             	movzx  eax,al
c0004b1b:	01 c7                	add    edi,eax
c0004b1d:	89 e9                	mov    ecx,ebp
c0004b1f:	e9 4a ff ff ff       	jmp    c0004a6e <get_fileinfo+0xa9>
c0004b24:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b29:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b2d:	75 54                	jne    c0004b83 <get_fileinfo+0x1be>
c0004b2f:	85 ff                	test   edi,edi
c0004b31:	75 0b                	jne    c0004b3e <get_fileinfo+0x179>
c0004b33:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b37:	ba 01 00 00 00       	mov    edx,0x1
c0004b3c:	eb 33                	jmp    c0004b71 <get_fileinfo+0x1ac>
c0004b3e:	b1 08                	mov    cl,0x8
c0004b40:	31 d2                	xor    edx,edx
c0004b42:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b48:	84 c0                	test   al,al
c0004b4a:	74 25                	je     c0004b71 <get_fileinfo+0x1ac>
c0004b4c:	66 83 f8 2e          	cmp    ax,0x2e
c0004b50:	74 16                	je     c0004b68 <get_fileinfo+0x1a3>
c0004b52:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b55:	66 83 ff 19          	cmp    di,0x19
c0004b59:	77 0f                	ja     c0004b6a <get_fileinfo+0x1a5>
c0004b5b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b5e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b61:	74 07                	je     c0004b6a <get_fileinfo+0x1a5>
c0004b63:	83 c0 20             	add    eax,0x20
c0004b66:	eb 02                	jmp    c0004b6a <get_fileinfo+0x1a5>
c0004b68:	b1 10                	mov    cl,0x10
c0004b6a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b6e:	42                   	inc    edx
c0004b6f:	eb d1                	jmp    c0004b42 <get_fileinfo+0x17d>
c0004b71:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b76:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b79:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b7d:	75 04                	jne    c0004b83 <get_fileinfo+0x1be>
c0004b7f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b83:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b86:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b89:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8f:	83 c0 1c             	add    eax,0x1c
c0004b92:	e8 c1 ce ff ff       	call   c0001a58 <ld_dword>
c0004b97:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b9e:	89 03                	mov    DWORD PTR [ebx],eax
c0004ba0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ba3:	83 c0 16             	add    eax,0x16
c0004ba6:	e8 a0 ce ff ff       	call   c0001a4b <ld_word>
c0004bab:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004baf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bb2:	83 c0 18             	add    eax,0x18
c0004bb5:	e8 91 ce ff ff       	call   c0001a4b <ld_word>
c0004bba:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004bbe:	83 c4 1c             	add    esp,0x1c
c0004bc1:	5b                   	pop    ebx
c0004bc2:	5e                   	pop    esi
c0004bc3:	5f                   	pop    edi
c0004bc4:	5d                   	pop    ebp
c0004bc5:	c3                   	ret    

c0004bc6 <ld_clust.isra.0>:
c0004bc6:	56                   	push   esi
c0004bc7:	89 c6                	mov    esi,eax
c0004bc9:	53                   	push   ebx
c0004bca:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bcd:	89 d3                	mov    ebx,edx
c0004bcf:	e8 77 ce ff ff       	call   c0001a4b <ld_word>
c0004bd4:	0f b7 c8             	movzx  ecx,ax
c0004bd7:	89 f0                	mov    eax,esi
c0004bd9:	3c 03                	cmp    al,0x3
c0004bdb:	75 0d                	jne    c0004bea <ld_clust.isra.0+0x24>
c0004bdd:	8d 43 14             	lea    eax,[ebx+0x14]
c0004be0:	e8 66 ce ff ff       	call   c0001a4b <ld_word>
c0004be5:	c1 e0 10             	shl    eax,0x10
c0004be8:	09 c1                	or     ecx,eax
c0004bea:	89 c8                	mov    eax,ecx
c0004bec:	5b                   	pop    ebx
c0004bed:	5e                   	pop    esi
c0004bee:	c3                   	ret    

c0004bef <st_clust.isra.1>:
c0004bef:	56                   	push   esi
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	53                   	push   ebx
c0004bf3:	89 d3                	mov    ebx,edx
c0004bf5:	0f b7 d1             	movzx  edx,cx
c0004bf8:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bfb:	e8 bd ce ff ff       	call   c0001abd <st_word>
c0004c00:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004c03:	75 0f                	jne    c0004c14 <st_clust.isra.1+0x25>
c0004c05:	c1 e9 10             	shr    ecx,0x10
c0004c08:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c0b:	89 ca                	mov    edx,ecx
c0004c0d:	5b                   	pop    ebx
c0004c0e:	5e                   	pop    esi
c0004c0f:	e9 a9 ce ff ff       	jmp    c0001abd <st_word>
c0004c14:	5b                   	pop    ebx
c0004c15:	5e                   	pop    esi
c0004c16:	c3                   	ret    

c0004c17 <init_alloc_info.isra.2>:
c0004c17:	56                   	push   esi
c0004c18:	53                   	push   ebx
c0004c19:	89 c6                	mov    esi,eax
c0004c1b:	89 d3                	mov    ebx,edx
c0004c1d:	51                   	push   ecx
c0004c1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 30 ce ff ff       	call   c0001a58 <ld_dword>
c0004c28:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c2b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c2d:	83 c0 38             	add    eax,0x38
c0004c30:	e8 3b ce ff ff       	call   c0001a70 <ld_qword>
c0004c35:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c38:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c3d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c40:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c47:	83 e0 02             	and    eax,0x2
c0004c4a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c4d:	5b                   	pop    ebx
c0004c4e:	5b                   	pop    ebx
c0004c4f:	5e                   	pop    esi
c0004c50:	c3                   	ret    

c0004c51 <follow_path>:
c0004c51:	56                   	push   esi
c0004c52:	53                   	push   ebx
c0004c53:	89 c3                	mov    ebx,eax
c0004c55:	83 ec 14             	sub    esp,0x14
c0004c58:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c5c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c62:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c64:	80 fa 5c             	cmp    dl,0x5c
c0004c67:	75 07                	jne    c0004c70 <follow_path+0x1f>
c0004c69:	40                   	inc    eax
c0004c6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6e:	eb ee                	jmp    c0004c5e <follow_path+0xd>
c0004c70:	80 fa 2f             	cmp    dl,0x2f
c0004c73:	74 f4                	je     c0004c69 <follow_path+0x18>
c0004c75:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c7c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c83:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c86:	77 52                	ja     c0004cda <follow_path+0x89>
c0004c88:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c8c:	31 d2                	xor    edx,edx
c0004c8e:	89 d8                	mov    eax,ebx
c0004c90:	e8 12 e3 ff ff       	call   c0002fa7 <dir_sdi>
c0004c95:	eb 7c                	jmp    c0004d13 <follow_path+0xc2>
c0004c97:	89 d8                	mov    eax,ebx
c0004c99:	e8 6e f2 ff ff       	call   c0003f0c <dir_find>
c0004c9e:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004ca1:	85 c0                	test   eax,eax
c0004ca3:	75 46                	jne    c0004ceb <follow_path+0x9a>
c0004ca5:	80 e2 04             	and    dl,0x4
c0004ca8:	75 69                	jne    c0004d13 <follow_path+0xc2>
c0004caa:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004cae:	74 5e                	je     c0004d0e <follow_path+0xbd>
c0004cb0:	8a 06                	mov    al,BYTE PTR [esi]
c0004cb2:	3c 04                	cmp    al,0x4
c0004cb4:	75 41                	jne    c0004cf7 <follow_path+0xa6>
c0004cb6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004cb9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004cbd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004cc0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004cc3:	30 c0                	xor    al,al
c0004cc5:	09 d0                	or     eax,edx
c0004cc7:	89 da                	mov    edx,ebx
c0004cc9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ccc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ccf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cd2:	8d 46 10             	lea    eax,[esi+0x10]
c0004cd5:	e8 3d ff ff ff       	call   c0004c17 <init_alloc_info.isra.2>
c0004cda:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cde:	89 d8                	mov    eax,ebx
c0004ce0:	e8 a9 ed ff ff       	call   c0003a8e <create_name>
c0004ce5:	85 c0                	test   eax,eax
c0004ce7:	74 ae                	je     c0004c97 <follow_path+0x46>
c0004ce9:	eb 28                	jmp    c0004d13 <follow_path+0xc2>
c0004ceb:	83 f8 04             	cmp    eax,0x4
c0004cee:	75 23                	jne    c0004d13 <follow_path+0xc2>
c0004cf0:	80 e2 04             	and    dl,0x4
c0004cf3:	74 19                	je     c0004d0e <follow_path+0xbd>
c0004cf5:	eb 1c                	jmp    c0004d13 <follow_path+0xc2>
c0004cf7:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cfa:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004d00:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004d04:	e8 bd fe ff ff       	call   c0004bc6 <ld_clust.isra.0>
c0004d09:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d0c:	eb cc                	jmp    c0004cda <follow_path+0x89>
c0004d0e:	b8 05 00 00 00       	mov    eax,0x5
c0004d13:	83 c4 14             	add    esp,0x14
c0004d16:	5b                   	pop    ebx
c0004d17:	5e                   	pop    esi
c0004d18:	c3                   	ret    

c0004d19 <f_mount>:
c0004d19:	53                   	push   ebx
c0004d1a:	83 ec 18             	sub    esp,0x18
c0004d1d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d29:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d2d:	e8 fb d2 ff ff       	call   c000202d <get_ldnumber>
c0004d32:	89 c2                	mov    edx,eax
c0004d34:	b8 0b 00 00 00       	mov    eax,0xb
c0004d39:	85 d2                	test   edx,edx
c0004d3b:	78 39                	js     c0004d76 <f_mount+0x5d>
c0004d3d:	8b 04 95 20 a6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd59e0]
c0004d44:	85 c0                	test   eax,eax
c0004d46:	74 03                	je     c0004d4b <f_mount+0x32>
c0004d48:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d4f:	85 c0                	test   eax,eax
c0004d51:	74 03                	je     c0004d56 <f_mount+0x3d>
c0004d53:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d5a:	89 04 95 20 a6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd59e0],eax
c0004d61:	31 c0                	xor    eax,eax
c0004d63:	84 db                	test   bl,bl
c0004d65:	74 0f                	je     c0004d76 <f_mount+0x5d>
c0004d67:	31 c9                	xor    ecx,ecx
c0004d69:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d6d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d71:	e8 65 d7 ff ff       	call   c00024db <mount_volume>
c0004d76:	83 c4 18             	add    esp,0x18
c0004d79:	5b                   	pop    ebx
c0004d7a:	c3                   	ret    

c0004d7b <f_open>:
c0004d7b:	55                   	push   ebp
c0004d7c:	bd 09 00 00 00       	mov    ebp,0x9
c0004d81:	57                   	push   edi
c0004d82:	56                   	push   esi
c0004d83:	53                   	push   ebx
c0004d84:	83 ec 7c             	sub    esp,0x7c
c0004d87:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d8e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d95:	85 db                	test   ebx,ebx
c0004d97:	0f 84 10 04 00 00    	je     c00051ad <f_open+0x432>
c0004d9d:	89 fe                	mov    esi,edi
c0004d9f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004da3:	83 e6 3f             	and    esi,0x3f
c0004da6:	89 f0                	mov    eax,esi
c0004da8:	0f b6 c8             	movzx  ecx,al
c0004dab:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004db2:	e8 24 d7 ff ff       	call   c00024db <mount_volume>
c0004db7:	89 c5                	mov    ebp,eax
c0004db9:	85 c0                	test   eax,eax
c0004dbb:	0f 85 e6 03 00 00    	jne    c00051a7 <f_open+0x42c>
c0004dc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dc5:	bd 11 00 00 00       	mov    ebp,0x11
c0004dca:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dce:	83 ec 0c             	sub    esp,0xc
c0004dd1:	68 60 04 00 00       	push   0x460
c0004dd6:	e8 a3 34 00 00       	call   c000827e <ff_memalloc>
c0004ddb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ddf:	83 c4 10             	add    esp,0x10
c0004de2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004de7:	0f 84 c0 03 00 00    	je     c00051ad <f_open+0x432>
c0004ded:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004df1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004df5:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004dfb:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004dfe:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004e01:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004e08:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e0c:	e8 40 fe ff ff       	call   c0004c51 <follow_path>
c0004e11:	89 c5                	mov    ebp,eax
c0004e13:	85 c0                	test   eax,eax
c0004e15:	75 0c                	jne    c0004e23 <f_open+0xa8>
c0004e17:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e1c:	79 05                	jns    c0004e23 <f_open+0xa8>
c0004e1e:	bd 06 00 00 00       	mov    ebp,0x6
c0004e23:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e29:	0f 84 84 01 00 00    	je     c0004fb3 <f_open+0x238>
c0004e2f:	85 ed                	test   ebp,ebp
c0004e31:	74 20                	je     c0004e53 <f_open+0xd8>
c0004e33:	83 fd 04             	cmp    ebp,0x4
c0004e36:	0f 85 58 03 00 00    	jne    c0005194 <f_open+0x419>
c0004e3c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e40:	83 ce 08             	or     esi,0x8
c0004e43:	e8 8a f2 ff ff       	call   c00040d2 <dir_register>
c0004e48:	89 c5                	mov    ebp,eax
c0004e4a:	85 c0                	test   eax,eax
c0004e4c:	74 2f                	je     c0004e7d <f_open+0x102>
c0004e4e:	e9 41 03 00 00       	jmp    c0005194 <f_open+0x419>
c0004e53:	bd 07 00 00 00       	mov    ebp,0x7
c0004e58:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e5d:	0f 85 31 03 00 00    	jne    c0005194 <f_open+0x419>
c0004e63:	bd 08 00 00 00       	mov    ebp,0x8
c0004e68:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e6e:	0f 85 20 03 00 00    	jne    c0005194 <f_open+0x419>
c0004e74:	83 e7 08             	and    edi,0x8
c0004e77:	0f 84 65 01 00 00    	je     c0004fe2 <f_open+0x267>
c0004e7d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e81:	8a 02                	mov    al,BYTE PTR [edx]
c0004e83:	3c 04                	cmp    al,0x4
c0004e85:	0f 85 97 00 00 00    	jne    c0004f22 <f_open+0x1a7>
c0004e8b:	8d 42 10             	lea    eax,[edx+0x10]
c0004e8e:	89 13                	mov    DWORD PTR [ebx],edx
c0004e90:	89 da                	mov    edx,ebx
c0004e92:	e8 80 fd ff ff       	call   c0004c17 <init_alloc_info.isra.2>
c0004e97:	31 d2                	xor    edx,edx
c0004e99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e9d:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004ea2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ea5:	83 c0 02             	add    eax,0x2
c0004ea8:	e8 32 cc ff ff       	call   c0001adf <mem_set>
c0004ead:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004eb2:	31 d2                	xor    edx,edx
c0004eb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ebb:	83 c0 26             	add    eax,0x26
c0004ebe:	e8 1c cc ff ff       	call   c0001adf <mem_set>
c0004ec3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ec7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004eca:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004ece:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ed3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ed6:	83 c0 08             	add    eax,0x8
c0004ed9:	e8 e3 cb ff ff       	call   c0001ac1 <st_dword>
c0004ede:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ee5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ee9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eed:	e8 b7 ea ff ff       	call   c00039a9 <store_xdir>
c0004ef2:	89 c5                	mov    ebp,eax
c0004ef4:	85 c0                	test   eax,eax
c0004ef6:	0f 85 98 02 00 00    	jne    c0005194 <f_open+0x419>
c0004efc:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004eff:	85 d2                	test   edx,edx
c0004f01:	0f 84 db 00 00 00    	je     c0004fe2 <f_open+0x267>
c0004f07:	31 c9                	xor    ecx,ecx
c0004f09:	89 d8                	mov    eax,ebx
c0004f0b:	e8 8e e3 ff ff       	call   c000329e <remove_chain>
c0004f10:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f14:	89 c5                	mov    ebp,eax
c0004f16:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f19:	48                   	dec    eax
c0004f1a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f1d:	e9 b8 00 00 00       	jmp    c0004fda <f_open+0x25f>
c0004f22:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f26:	89 ea                	mov    edx,ebp
c0004f28:	e8 99 fc ff ff       	call   c0004bc6 <ld_clust.isra.0>
c0004f2d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f32:	89 c7                	mov    edi,eax
c0004f34:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f37:	e8 85 cb ff ff       	call   c0001ac1 <st_dword>
c0004f3c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f40:	31 c9                	xor    ecx,ecx
c0004f42:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f4a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4e:	e8 9c fc ff ff       	call   c0004bef <st_clust.isra.1>
c0004f53:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f57:	31 d2                	xor    edx,edx
c0004f59:	83 c0 1c             	add    eax,0x1c
c0004f5c:	e8 60 cb ff ff       	call   c0001ac1 <st_dword>
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 ff                	test   edi,edi
c0004f67:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f6b:	74 75                	je     c0004fe2 <f_open+0x267>
c0004f6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f71:	31 c9                	xor    ecx,ecx
c0004f73:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f76:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f81:	89 fa                	mov    edx,edi
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 12 e3 ff ff       	call   c000329e <remove_chain>
c0004f8c:	89 c5                	mov    ebp,eax
c0004f8e:	85 c0                	test   eax,eax
c0004f90:	0f 85 fe 01 00 00    	jne    c0005194 <f_open+0x419>
c0004f96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa2:	4f                   	dec    edi
c0004fa3:	e8 81 d2 ff ff       	call   c0002229 <move_window>
c0004fa8:	89 c5                	mov    ebp,eax
c0004faa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fae:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004fb1:	eb 27                	jmp    c0004fda <f_open+0x25f>
c0004fb3:	85 ed                	test   ebp,ebp
c0004fb5:	0f 85 d9 01 00 00    	jne    c0005194 <f_open+0x419>
c0004fbb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fbf:	bd 04 00 00 00       	mov    ebp,0x4
c0004fc4:	a8 10                	test   al,0x10
c0004fc6:	0f 85 c8 01 00 00    	jne    c0005194 <f_open+0x419>
c0004fcc:	83 e7 02             	and    edi,0x2
c0004fcf:	74 11                	je     c0004fe2 <f_open+0x267>
c0004fd1:	bd 07 00 00 00       	mov    ebp,0x7
c0004fd6:	a8 01                	test   al,0x1
c0004fd8:	eb 02                	jmp    c0004fdc <f_open+0x261>
c0004fda:	85 ed                	test   ebp,ebp
c0004fdc:	0f 85 b2 01 00 00    	jne    c0005194 <f_open+0x419>
c0004fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fe8:	74 03                	je     c0004fed <f_open+0x272>
c0004fea:	83 ce 40             	or     esi,0x40
c0004fed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ff1:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004ff4:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004ff7:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004ffa:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004ffd:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005001:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005004:	8a 02                	mov    al,BYTE PTR [edx]
c0005006:	3c 04                	cmp    al,0x4
c0005008:	75 2a                	jne    c0005034 <f_open+0x2b9>
c000500a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000500e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005013:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005016:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000501a:	30 c0                	xor    al,al
c000501c:	09 c8                	or     eax,ecx
c000501e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005021:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005025:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005028:	8d 42 10             	lea    eax,[edx+0x10]
c000502b:	89 da                	mov    edx,ebx
c000502d:	e8 e5 fb ff ff       	call   c0004c17 <init_alloc_info.isra.2>
c0005032:	eb 1c                	jmp    c0005050 <f_open+0x2d5>
c0005034:	89 fa                	mov    edx,edi
c0005036:	e8 8b fb ff ff       	call   c0004bc6 <ld_clust.isra.0>
c000503b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000503e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005041:	e8 12 ca ff ff       	call   c0001a58 <ld_dword>
c0005046:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000504d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005054:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000505b:	89 03                	mov    DWORD PTR [ebx],eax
c000505d:	31 d2                	xor    edx,edx
c000505f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005063:	b9 00 02 00 00       	mov    ecx,0x200
c0005068:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000506c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005070:	89 f0                	mov    eax,esi
c0005072:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005079:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000507c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005083:	8d 43 50             	lea    eax,[ebx+0x50]
c0005086:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000508d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005094:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005098:	e8 42 ca ff ff       	call   c0001adf <mem_set>
c000509d:	83 e6 20             	and    esi,0x20
c00050a0:	75 07                	jne    c00050a9 <f_open+0x32e>
c00050a2:	31 ed                	xor    ebp,ebp
c00050a4:	e9 eb 00 00 00       	jmp    c0005194 <f_open+0x419>
c00050a9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00050ac:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00050af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00050b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050bb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050bf:	74 e1                	je     c00050a2 <f_open+0x327>
c00050c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050c9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050cc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050d6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050da:	31 ff                	xor    edi,edi
c00050dc:	c1 e5 09             	shl    ebp,0x9
c00050df:	89 ee                	mov    esi,ebp
c00050e1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050e5:	89 f8                	mov    eax,edi
c00050e7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050eb:	73 22                	jae    c000510f <f_open+0x394>
c00050ed:	89 d8                	mov    eax,ebx
c00050ef:	e8 bd dc ff ff       	call   c0002db1 <get_fat>
c00050f4:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050f8:	89 c2                	mov    edx,eax
c00050fa:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050fe:	83 f8 01             	cmp    eax,0x1
c0005101:	76 10                	jbe    c0005113 <f_open+0x398>
c0005103:	83 f8 ff             	cmp    eax,0xffffffff
c0005106:	75 d9                	jne    c00050e1 <f_open+0x366>
c0005108:	bd 01 00 00 00       	mov    ebp,0x1
c000510d:	eb 09                	jmp    c0005118 <f_open+0x39d>
c000510f:	31 ed                	xor    ebp,ebp
c0005111:	eb 05                	jmp    c0005118 <f_open+0x39d>
c0005113:	bd 02 00 00 00       	mov    ebp,0x2
c0005118:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000511b:	85 ed                	test   ebp,ebp
c000511d:	75 75                	jne    c0005194 <f_open+0x419>
c000511f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005123:	25 ff 01 00 00       	and    eax,0x1ff
c0005128:	0f 84 74 ff ff ff    	je     c00050a2 <f_open+0x327>
c000512e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005132:	bd 02 00 00 00       	mov    ebp,0x2
c0005137:	89 c8                	mov    eax,ecx
c0005139:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000513d:	e8 a2 cb ff ff       	call   c0001ce4 <clst2sect>
c0005142:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005146:	89 d7                	mov    edi,edx
c0005148:	09 c7                	or     edi,eax
c000514a:	74 48                	je     c0005194 <f_open+0x419>
c000514c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005150:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005154:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000515c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005160:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005164:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005168:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000516b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000516f:	83 ec 0c             	sub    esp,0xc
c0005172:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005175:	6a 01                	push   0x1
c0005177:	52                   	push   edx
c0005178:	50                   	push   eax
c0005179:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000517d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005181:	50                   	push   eax
c0005182:	e8 79 c8 ff ff       	call   c0001a00 <disk_read>
c0005187:	83 c4 20             	add    esp,0x20
c000518a:	85 c0                	test   eax,eax
c000518c:	0f 95 c0             	setne  al
c000518f:	0f b6 c0             	movzx  eax,al
c0005192:	89 c5                	mov    ebp,eax
c0005194:	83 ec 0c             	sub    esp,0xc
c0005197:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000519b:	e8 f4 30 00 00       	call   c0008294 <ff_memfree>
c00051a0:	83 c4 10             	add    esp,0x10
c00051a3:	85 ed                	test   ebp,ebp
c00051a5:	74 06                	je     c00051ad <f_open+0x432>
c00051a7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00051ad:	83 c4 7c             	add    esp,0x7c
c00051b0:	89 e8                	mov    eax,ebp
c00051b2:	5b                   	pop    ebx
c00051b3:	5e                   	pop    esi
c00051b4:	5f                   	pop    edi
c00051b5:	5d                   	pop    ebp
c00051b6:	c3                   	ret    

c00051b7 <f_read>:
c00051b7:	55                   	push   ebp
c00051b8:	57                   	push   edi
c00051b9:	56                   	push   esi
c00051ba:	53                   	push   ebx
c00051bb:	83 ec 2c             	sub    esp,0x2c
c00051be:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051c2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051c6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051cc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051d0:	89 d8                	mov    eax,ebx
c00051d2:	e8 77 cf ff ff       	call   c000214e <validate>
c00051d7:	89 c5                	mov    ebp,eax
c00051d9:	85 c0                	test   eax,eax
c00051db:	0f 85 4c 02 00 00    	jne    c000542d <f_read+0x276>
c00051e1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051e5:	85 ed                	test   ebp,ebp
c00051e7:	0f 85 40 02 00 00    	jne    c000542d <f_read+0x276>
c00051ed:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051f1:	0f 84 31 02 00 00    	je     c0005428 <f_read+0x271>
c00051f7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051fa:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051fd:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005200:	bf 00 00 00 00       	mov    edi,0x0
c0005205:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005208:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000520c:	89 d1                	mov    ecx,edx
c000520e:	19 f9                	sbb    ecx,edi
c0005210:	0f 83 cf 00 00 00    	jae    c00052e5 <f_read+0x12e>
c0005216:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000521a:	e9 c6 00 00 00       	jmp    c00052e5 <f_read+0x12e>
c000521f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005222:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005225:	89 d0                	mov    eax,edx
c0005227:	25 ff 01 00 00       	and    eax,0x1ff
c000522c:	0f 85 c9 01 00 00    	jne    c00053fb <f_read+0x244>
c0005232:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005236:	89 d6                	mov    esi,edx
c0005238:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000523c:	89 cf                	mov    edi,ecx
c000523e:	48                   	dec    eax
c000523f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005243:	21 f0                	and    eax,esi
c0005245:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005249:	0f 84 a6 00 00 00    	je     c00052f5 <f_read+0x13e>
c000524f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005253:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005256:	89 c8                	mov    eax,ecx
c0005258:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000525b:	e8 84 ca ff ff       	call   c0001ce4 <clst2sect>
c0005260:	89 d7                	mov    edi,edx
c0005262:	09 c7                	or     edi,eax
c0005264:	0f 84 b4 00 00 00    	je     c000531e <f_read+0x167>
c000526a:	31 ff                	xor    edi,edi
c000526c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005270:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005273:	01 c6                	add    esi,eax
c0005275:	11 d7                	adc    edi,edx
c0005277:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000527f:	0f 86 fd 00 00 00    	jbe    c0005382 <f_read+0x1cb>
c0005285:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005289:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000528d:	c1 e8 09             	shr    eax,0x9
c0005290:	89 04 24             	mov    DWORD PTR [esp],eax
c0005293:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005297:	03 14 24             	add    edx,DWORD PTR [esp]
c000529a:	39 c2                	cmp    edx,eax
c000529c:	76 07                	jbe    c00052a5 <f_read+0xee>
c000529e:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00052a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00052a5:	83 ec 0c             	sub    esp,0xc
c00052a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00052ac:	57                   	push   edi
c00052ad:	56                   	push   esi
c00052ae:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00052b2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052b6:	50                   	push   eax
c00052b7:	e8 44 c7 ff ff       	call   c0001a00 <disk_read>
c00052bc:	83 c4 20             	add    esp,0x20
c00052bf:	85 c0                	test   eax,eax
c00052c1:	75 6e                	jne    c0005331 <f_read+0x17a>
c00052c3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052c7:	78 7e                	js     c0005347 <f_read+0x190>
c00052c9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052cc:	c1 e6 09             	shl    esi,0x9
c00052cf:	31 ff                	xor    edi,edi
c00052d1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052d5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052dd:	01 30                	add    DWORD PTR [eax],esi
c00052df:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052e2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052e5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052ea:	0f 85 2f ff ff ff    	jne    c000521f <f_read+0x68>
c00052f0:	e9 38 01 00 00       	jmp    c000542d <f_read+0x276>
c00052f5:	89 c8                	mov    eax,ecx
c00052f7:	09 d0                	or     eax,edx
c00052f9:	75 05                	jne    c0005300 <f_read+0x149>
c00052fb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052fe:	eb 19                	jmp    c0005319 <f_read+0x162>
c0005300:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005304:	74 09                	je     c000530f <f_read+0x158>
c0005306:	89 d8                	mov    eax,ebx
c0005308:	e8 f8 c9 ff ff       	call   c0001d05 <clmt_clust>
c000530d:	eb 0a                	jmp    c0005319 <f_read+0x162>
c000530f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005312:	89 d8                	mov    eax,ebx
c0005314:	e8 98 da ff ff       	call   c0002db1 <get_fat>
c0005319:	83 f8 01             	cmp    eax,0x1
c000531c:	77 0e                	ja     c000532c <f_read+0x175>
c000531e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005322:	bd 02 00 00 00       	mov    ebp,0x2
c0005327:	e9 01 01 00 00       	jmp    c000542d <f_read+0x276>
c000532c:	83 f8 ff             	cmp    eax,0xffffffff
c000532f:	75 0e                	jne    c000533f <f_read+0x188>
c0005331:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005335:	bd 01 00 00 00       	mov    ebp,0x1
c000533a:	e9 ee 00 00 00       	jmp    c000542d <f_read+0x276>
c000533f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005342:	e9 08 ff ff ff       	jmp    c000524f <f_read+0x98>
c0005347:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000534a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000534d:	29 f0                	sub    eax,esi
c000534f:	19 fa                	sbb    edx,edi
c0005351:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005354:	89 d7                	mov    edi,edx
c0005356:	ba 00 00 00 00       	mov    edx,0x0
c000535b:	89 f9                	mov    ecx,edi
c000535d:	19 d1                	sbb    ecx,edx
c000535f:	0f 83 64 ff ff ff    	jae    c00052c9 <f_read+0x112>
c0005365:	89 c7                	mov    edi,eax
c0005367:	8d 53 50             	lea    edx,[ebx+0x50]
c000536a:	c1 e7 09             	shl    edi,0x9
c000536d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005371:	b9 00 02 00 00       	mov    ecx,0x200
c0005376:	01 f8                	add    eax,edi
c0005378:	e8 4d c7 ff ff       	call   c0001aca <mem_cpy>
c000537d:	e9 47 ff ff ff       	jmp    c00052c9 <f_read+0x112>
c0005382:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005385:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005388:	89 04 24             	mov    DWORD PTR [esp],eax
c000538b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000538f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005393:	75 05                	jne    c000539a <f_read+0x1e3>
c0005395:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005398:	74 5b                	je     c00053f5 <f_read+0x23e>
c000539a:	8d 43 50             	lea    eax,[ebx+0x50]
c000539d:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053a5:	79 2a                	jns    c00053d1 <f_read+0x21a>
c00053a7:	83 ec 0c             	sub    esp,0xc
c00053aa:	6a 01                	push   0x1
c00053ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053b8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053bc:	50                   	push   eax
c00053bd:	e8 54 c6 ff ff       	call   c0001a16 <disk_write>
c00053c2:	83 c4 20             	add    esp,0x20
c00053c5:	85 c0                	test   eax,eax
c00053c7:	0f 85 64 ff ff ff    	jne    c0005331 <f_read+0x17a>
c00053cd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053d1:	83 ec 0c             	sub    esp,0xc
c00053d4:	6a 01                	push   0x1
c00053d6:	57                   	push   edi
c00053d7:	56                   	push   esi
c00053d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053e0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053e4:	50                   	push   eax
c00053e5:	e8 16 c6 ff ff       	call   c0001a00 <disk_read>
c00053ea:	83 c4 20             	add    esp,0x20
c00053ed:	85 c0                	test   eax,eax
c00053ef:	0f 85 3c ff ff ff    	jne    c0005331 <f_read+0x17a>
c00053f5:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053f8:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053fb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053fe:	ba 00 02 00 00       	mov    edx,0x200
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000540c:	29 c2                	sub    edx,eax
c000540e:	39 d6                	cmp    esi,edx
c0005410:	76 02                	jbe    c0005414 <f_read+0x25d>
c0005412:	89 d6                	mov    esi,edx
c0005414:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005418:	89 f1                	mov    ecx,esi
c000541a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000541e:	e8 a7 c6 ff ff       	call   c0001aca <mem_cpy>
c0005423:	e9 a7 fe ff ff       	jmp    c00052cf <f_read+0x118>
c0005428:	bd 07 00 00 00       	mov    ebp,0x7
c000542d:	83 c4 2c             	add    esp,0x2c
c0005430:	89 e8                	mov    eax,ebp
c0005432:	5b                   	pop    ebx
c0005433:	5e                   	pop    esi
c0005434:	5f                   	pop    edi
c0005435:	5d                   	pop    ebp
c0005436:	c3                   	ret    

c0005437 <f_write>:
c0005437:	55                   	push   ebp
c0005438:	57                   	push   edi
c0005439:	56                   	push   esi
c000543a:	53                   	push   ebx
c000543b:	83 ec 2c             	sub    esp,0x2c
c000543e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005442:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005446:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000544c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005450:	89 d8                	mov    eax,ebx
c0005452:	e8 f7 cc ff ff       	call   c000214e <validate>
c0005457:	89 c5                	mov    ebp,eax
c0005459:	85 c0                	test   eax,eax
c000545b:	0f 85 86 02 00 00    	jne    c00056e7 <f_write+0x2b0>
c0005461:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005465:	85 ed                	test   ebp,ebp
c0005467:	0f 85 7a 02 00 00    	jne    c00056e7 <f_write+0x2b0>
c000546d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005471:	0f 84 6b 02 00 00    	je     c00056e2 <f_write+0x2ab>
c0005477:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000547b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000547e:	0f 84 43 01 00 00    	je     c00055c7 <f_write+0x190>
c0005484:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005487:	89 c1                	mov    ecx,eax
c0005489:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000548d:	0f 83 34 01 00 00    	jae    c00055c7 <f_write+0x190>
c0005493:	f7 d0                	not    eax
c0005495:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005499:	e9 29 01 00 00       	jmp    c00055c7 <f_write+0x190>
c000549e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00054a1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00054a4:	89 d0                	mov    eax,edx
c00054a6:	25 ff 01 00 00       	and    eax,0x1ff
c00054ab:	0f 85 00 02 00 00    	jne    c00056b1 <f_write+0x27a>
c00054b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054b5:	89 d6                	mov    esi,edx
c00054b7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054bb:	89 cf                	mov    edi,ecx
c00054bd:	48                   	dec    eax
c00054be:	0f ac fe 09          	shrd   esi,edi,0x9
c00054c2:	21 f0                	and    eax,esi
c00054c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054c8:	0f 84 06 01 00 00    	je     c00055d4 <f_write+0x19d>
c00054ce:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054d2:	0f 88 6e 01 00 00    	js     c0005646 <f_write+0x20f>
c00054d8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054dc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054df:	89 c8                	mov    eax,ecx
c00054e1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054e5:	e8 fa c7 ff ff       	call   c0001ce4 <clst2sect>
c00054ea:	89 d1                	mov    ecx,edx
c00054ec:	09 c1                	or     ecx,eax
c00054ee:	0f 84 1c 01 00 00    	je     c0005610 <f_write+0x1d9>
c00054f4:	31 ff                	xor    edi,edi
c00054f6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054fe:	01 c6                	add    esi,eax
c0005500:	11 d7                	adc    edi,edx
c0005502:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000550a:	0f 86 63 01 00 00    	jbe    c0005673 <f_write+0x23c>
c0005510:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005514:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005518:	c1 e8 09             	shr    eax,0x9
c000551b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000551f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005523:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005527:	39 c2                	cmp    edx,eax
c0005529:	76 08                	jbe    c0005533 <f_write+0xfc>
c000552b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000552f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005533:	83 ec 0c             	sub    esp,0xc
c0005536:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000553a:	57                   	push   edi
c000553b:	56                   	push   esi
c000553c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005540:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005544:	50                   	push   eax
c0005545:	e8 cc c4 ff ff       	call   c0001a16 <disk_write>
c000554a:	83 c4 20             	add    esp,0x20
c000554d:	85 c0                	test   eax,eax
c000554f:	0f 85 ce 00 00 00    	jne    c0005623 <f_write+0x1ec>
c0005555:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005558:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000555b:	29 f0                	sub    eax,esi
c000555d:	19 fa                	sbb    edx,edi
c000555f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005563:	89 d7                	mov    edi,edx
c0005565:	ba 00 00 00 00       	mov    edx,0x0
c000556a:	89 f9                	mov    ecx,edi
c000556c:	19 d1                	sbb    ecx,edx
c000556e:	73 1c                	jae    c000558c <f_write+0x155>
c0005570:	89 c7                	mov    edi,eax
c0005572:	b9 00 02 00 00       	mov    ecx,0x200
c0005577:	c1 e7 09             	shl    edi,0x9
c000557a:	8d 43 50             	lea    eax,[ebx+0x50]
c000557d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005581:	89 fa                	mov    edx,edi
c0005583:	e8 42 c5 ff ff       	call   c0001aca <mem_cpy>
c0005588:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000558c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005590:	c1 e6 09             	shl    esi,0x9
c0005593:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005597:	31 ff                	xor    edi,edi
c0005599:	01 30                	add    DWORD PTR [eax],esi
c000559b:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000559f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00055a3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055a6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00055a9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00055ac:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00055af:	89 c1                	mov    ecx,eax
c00055b1:	39 f2                	cmp    edx,esi
c00055b3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055b6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055b9:	19 f9                	sbb    ecx,edi
c00055bb:	73 04                	jae    c00055c1 <f_write+0x18a>
c00055bd:	89 f2                	mov    edx,esi
c00055bf:	89 f8                	mov    eax,edi
c00055c1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055c4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055c7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055cc:	0f 85 cc fe ff ff    	jne    c000549e <f_write+0x67>
c00055d2:	eb 2e                	jmp    c0005602 <f_write+0x1cb>
c00055d4:	89 c8                	mov    eax,ecx
c00055d6:	09 d0                	or     eax,edx
c00055d8:	75 0b                	jne    c00055e5 <f_write+0x1ae>
c00055da:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055dd:	31 d2                	xor    edx,edx
c00055df:	85 c0                	test   eax,eax
c00055e1:	75 28                	jne    c000560b <f_write+0x1d4>
c00055e3:	eb 12                	jmp    c00055f7 <f_write+0x1c0>
c00055e5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055e9:	74 09                	je     c00055f4 <f_write+0x1bd>
c00055eb:	89 d8                	mov    eax,ebx
c00055ed:	e8 13 c7 ff ff       	call   c0001d05 <clmt_clust>
c00055f2:	eb 0a                	jmp    c00055fe <f_write+0x1c7>
c00055f4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055f7:	89 d8                	mov    eax,ebx
c00055f9:	e8 a1 da ff ff       	call   c000309f <create_chain>
c00055fe:	85 c0                	test   eax,eax
c0005600:	75 09                	jne    c000560b <f_write+0x1d4>
c0005602:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005606:	e9 dc 00 00 00       	jmp    c00056e7 <f_write+0x2b0>
c000560b:	83 f8 01             	cmp    eax,0x1
c000560e:	75 0e                	jne    c000561e <f_write+0x1e7>
c0005610:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005614:	bd 02 00 00 00       	mov    ebp,0x2
c0005619:	e9 c9 00 00 00       	jmp    c00056e7 <f_write+0x2b0>
c000561e:	83 f8 ff             	cmp    eax,0xffffffff
c0005621:	75 0e                	jne    c0005631 <f_write+0x1fa>
c0005623:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005627:	bd 01 00 00 00       	mov    ebp,0x1
c000562c:	e9 b6 00 00 00       	jmp    c00056e7 <f_write+0x2b0>
c0005631:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005634:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005638:	0f 85 90 fe ff ff    	jne    c00054ce <f_write+0x97>
c000563e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005641:	e9 88 fe ff ff       	jmp    c00054ce <f_write+0x97>
c0005646:	83 ec 0c             	sub    esp,0xc
c0005649:	8d 43 50             	lea    eax,[ebx+0x50]
c000564c:	6a 01                	push   0x1
c000564e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005651:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005654:	50                   	push   eax
c0005655:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005659:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000565d:	50                   	push   eax
c000565e:	e8 b3 c3 ff ff       	call   c0001a16 <disk_write>
c0005663:	83 c4 20             	add    esp,0x20
c0005666:	85 c0                	test   eax,eax
c0005668:	75 b9                	jne    c0005623 <f_write+0x1ec>
c000566a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000566e:	e9 65 fe ff ff       	jmp    c00054d8 <f_write+0xa1>
c0005673:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005676:	75 05                	jne    c000567d <f_write+0x246>
c0005678:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000567b:	74 2e                	je     c00056ab <f_write+0x274>
c000567d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005680:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005683:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005686:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005689:	73 20                	jae    c00056ab <f_write+0x274>
c000568b:	83 ec 0c             	sub    esp,0xc
c000568e:	8d 43 50             	lea    eax,[ebx+0x50]
c0005691:	6a 01                	push   0x1
c0005693:	57                   	push   edi
c0005694:	56                   	push   esi
c0005695:	50                   	push   eax
c0005696:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000569a:	50                   	push   eax
c000569b:	e8 60 c3 ff ff       	call   c0001a00 <disk_read>
c00056a0:	83 c4 20             	add    esp,0x20
c00056a3:	85 c0                	test   eax,eax
c00056a5:	0f 85 78 ff ff ff    	jne    c0005623 <f_write+0x1ec>
c00056ab:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00056ae:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00056b1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056b4:	ba 00 02 00 00       	mov    edx,0x200
c00056b9:	25 ff 01 00 00       	and    eax,0x1ff
c00056be:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056c2:	29 c2                	sub    edx,eax
c00056c4:	39 d6                	cmp    esi,edx
c00056c6:	76 02                	jbe    c00056ca <f_write+0x293>
c00056c8:	89 d6                	mov    esi,edx
c00056ca:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056ce:	89 f1                	mov    ecx,esi
c00056d0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056d4:	e8 f1 c3 ff ff       	call   c0001aca <mem_cpy>
c00056d9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056dd:	e9 b1 fe ff ff       	jmp    c0005593 <f_write+0x15c>
c00056e2:	bd 07 00 00 00       	mov    ebp,0x7
c00056e7:	83 c4 2c             	add    esp,0x2c
c00056ea:	89 e8                	mov    eax,ebp
c00056ec:	5b                   	pop    ebx
c00056ed:	5e                   	pop    esi
c00056ee:	5f                   	pop    edi
c00056ef:	5d                   	pop    ebp
c00056f0:	c3                   	ret    

c00056f1 <f_sync>:
c00056f1:	56                   	push   esi
c00056f2:	53                   	push   ebx
c00056f3:	83 ec 64             	sub    esp,0x64
c00056f6:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056fa:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056fe:	89 d8                	mov    eax,ebx
c0005700:	e8 49 ca ff ff       	call   c000214e <validate>
c0005705:	85 c0                	test   eax,eax
c0005707:	0f 85 ba 01 00 00    	jne    c00058c7 <f_sync+0x1d6>
c000570d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005710:	f6 c2 40             	test   dl,0x40
c0005713:	0f 84 ae 01 00 00    	je     c00058c7 <f_sync+0x1d6>
c0005719:	84 d2                	test   dl,dl
c000571b:	79 33                	jns    c0005750 <f_sync+0x5f>
c000571d:	83 ec 0c             	sub    esp,0xc
c0005720:	8d 43 50             	lea    eax,[ebx+0x50]
c0005723:	6a 01                	push   0x1
c0005725:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005728:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000572b:	50                   	push   eax
c000572c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005730:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005734:	50                   	push   eax
c0005735:	e8 dc c2 ff ff       	call   c0001a16 <disk_write>
c000573a:	83 c4 20             	add    esp,0x20
c000573d:	89 c2                	mov    edx,eax
c000573f:	b8 01 00 00 00       	mov    eax,0x1
c0005744:	85 d2                	test   edx,edx
c0005746:	0f 85 7b 01 00 00    	jne    c00058c7 <f_sync+0x1d6>
c000574c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005754:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005757:	0f 85 11 01 00 00    	jne    c000586e <f_sync+0x17d>
c000575d:	89 d8                	mov    eax,ebx
c000575f:	e8 13 d6 ff ff       	call   c0002d77 <fill_first_frag>
c0005764:	85 c0                	test   eax,eax
c0005766:	0f 85 5b 01 00 00    	jne    c00058c7 <f_sync+0x1d6>
c000576c:	83 c9 ff             	or     ecx,0xffffffff
c000576f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005772:	89 d8                	mov    eax,ebx
c0005774:	e8 c9 d5 ff ff       	call   c0002d42 <fill_last_frag>
c0005779:	85 c0                	test   eax,eax
c000577b:	0f 85 46 01 00 00    	jne    c00058c7 <f_sync+0x1d6>
c0005781:	83 ec 0c             	sub    esp,0xc
c0005784:	68 60 04 00 00       	push   0x460
c0005789:	e8 f0 2a 00 00       	call   c000827e <ff_memalloc>
c000578e:	83 c4 10             	add    esp,0x10
c0005791:	89 c6                	mov    esi,eax
c0005793:	b8 11 00 00 00       	mov    eax,0x11
c0005798:	85 f6                	test   esi,esi
c000579a:	0f 84 27 01 00 00    	je     c00058c7 <f_sync+0x1d6>
c00057a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00057aa:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00057ad:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00057b0:	89 da                	mov    edx,ebx
c00057b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057b6:	e8 af df ff ff       	call   c000376a <load_obj_xdir>
c00057bb:	85 c0                	test   eax,eax
c00057bd:	0f 85 95 00 00 00    	jne    c0005858 <f_sync+0x167>
c00057c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057c7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057ca:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057ce:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057d1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057d4:	83 ca 01             	or     edx,0x1
c00057d7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057da:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057dd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e0:	83 c0 34             	add    eax,0x34
c00057e3:	e8 d9 c2 ff ff       	call   c0001ac1 <st_dword>
c00057e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ec:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057f2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057f5:	83 c0 38             	add    eax,0x38
c00057f8:	e8 c7 c2 ff ff       	call   c0001ac4 <st_qword>
c00057fd:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005804:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005807:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000580a:	83 c0 28             	add    eax,0x28
c000580d:	e8 b2 c2 ff ff       	call   c0001ac4 <st_qword>
c0005812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005816:	ba 00 00 21 50       	mov    edx,0x50210000
c000581b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000581e:	83 c0 0c             	add    eax,0xc
c0005821:	e8 9b c2 ff ff       	call   c0001ac1 <st_dword>
c0005826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000582a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000582d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005831:	31 d2                	xor    edx,edx
c0005833:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005836:	83 c0 10             	add    eax,0x10
c0005839:	e8 83 c2 ff ff       	call   c0001ac1 <st_dword>
c000583e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005842:	e8 62 e1 ff ff       	call   c00039a9 <store_xdir>
c0005847:	85 c0                	test   eax,eax
c0005849:	75 0d                	jne    c0005858 <f_sync+0x167>
c000584b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000584f:	e8 00 eb ff ff       	call   c0004354 <sync_fs>
c0005854:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005858:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	56                   	push   esi
c0005860:	e8 2f 2a 00 00       	call   c0008294 <ff_memfree>
c0005865:	83 c4 10             	add    esp,0x10
c0005868:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000586c:	eb 59                	jmp    c00058c7 <f_sync+0x1d6>
c000586e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005871:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005874:	e8 b0 c9 ff ff       	call   c0002229 <move_window>
c0005879:	85 c0                	test   eax,eax
c000587b:	75 4a                	jne    c00058c7 <f_sync+0x1d6>
c000587d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005880:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005884:	89 f2                	mov    edx,esi
c0005886:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005889:	8b 03                	mov    eax,DWORD PTR [ebx]
c000588b:	e8 5f f3 ff ff       	call   c0004bef <st_clust.isra.1>
c0005890:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005893:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005896:	e8 26 c2 ff ff       	call   c0001ac1 <st_dword>
c000589b:	8d 46 16             	lea    eax,[esi+0x16]
c000589e:	ba 00 00 21 50       	mov    edx,0x50210000
c00058a3:	e8 19 c2 ff ff       	call   c0001ac1 <st_dword>
c00058a8:	8d 46 12             	lea    eax,[esi+0x12]
c00058ab:	31 d2                	xor    edx,edx
c00058ad:	e8 0b c2 ff ff       	call   c0001abd <st_word>
c00058b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058be:	e8 91 ea ff ff       	call   c0004354 <sync_fs>
c00058c3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058c7:	83 c4 64             	add    esp,0x64
c00058ca:	5b                   	pop    ebx
c00058cb:	5e                   	pop    esi
c00058cc:	c3                   	ret    

c00058cd <f_close>:
c00058cd:	53                   	push   ebx
c00058ce:	83 ec 24             	sub    esp,0x24
c00058d1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058d5:	53                   	push   ebx
c00058d6:	e8 16 fe ff ff       	call   c00056f1 <f_sync>
c00058db:	83 c4 10             	add    esp,0x10
c00058de:	85 c0                	test   eax,eax
c00058e0:	75 15                	jne    c00058f7 <f_close+0x2a>
c00058e2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058e6:	89 d8                	mov    eax,ebx
c00058e8:	e8 61 c8 ff ff       	call   c000214e <validate>
c00058ed:	85 c0                	test   eax,eax
c00058ef:	75 06                	jne    c00058f7 <f_close+0x2a>
c00058f1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058f7:	83 c4 18             	add    esp,0x18
c00058fa:	5b                   	pop    ebx
c00058fb:	c3                   	ret    

c00058fc <f_lseek>:
c00058fc:	55                   	push   ebp
c00058fd:	57                   	push   edi
c00058fe:	56                   	push   esi
c00058ff:	53                   	push   ebx
c0005900:	83 ec 3c             	sub    esp,0x3c
c0005903:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005907:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000590b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000590f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005912:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005916:	89 d8                	mov    eax,ebx
c0005918:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000591c:	e8 2d c8 ff ff       	call   c000214e <validate>
c0005921:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005925:	85 c0                	test   eax,eax
c0005927:	0f 85 7a 04 00 00    	jne    c0005da7 <f_lseek+0x4ab>
c000592d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005931:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005935:	85 c0                	test   eax,eax
c0005937:	0f 85 6a 04 00 00    	jne    c0005da7 <f_lseek+0x4ab>
c000593d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005941:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005944:	74 0c                	je     c0005952 <f_lseek+0x56>
c0005946:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005949:	85 c0                	test   eax,eax
c000594b:	75 1f                	jne    c000596c <f_lseek+0x70>
c000594d:	e9 b5 01 00 00       	jmp    c0005b07 <f_lseek+0x20b>
c0005952:	83 c9 ff             	or     ecx,0xffffffff
c0005955:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005958:	89 d8                	mov    eax,ebx
c000595a:	e8 e3 d3 ff ff       	call   c0002d42 <fill_last_frag>
c000595f:	85 c0                	test   eax,eax
c0005961:	74 e3                	je     c0005946 <f_lseek+0x4a>
c0005963:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005967:	e9 3b 04 00 00       	jmp    c0005da7 <f_lseek+0x4ab>
c000596c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005971:	0f 85 ac 00 00 00    	jne    c0005a23 <f_lseek+0x127>
c0005977:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c000597b:	0f 85 a2 00 00 00    	jne    c0005a23 <f_lseek+0x127>
c0005981:	8d 78 04             	lea    edi,[eax+0x4]
c0005984:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005987:	8b 00                	mov    eax,DWORD PTR [eax]
c0005989:	be 02 00 00 00       	mov    esi,0x2
c000598e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005992:	85 ed                	test   ebp,ebp
c0005994:	74 73                	je     c0005a09 <f_lseek+0x10d>
c0005996:	89 e9                	mov    ecx,ebp
c0005998:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000599f:	ff 04 24             	inc    DWORD PTR [esp]
c00059a2:	89 ca                	mov    edx,ecx
c00059a4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059a8:	89 d8                	mov    eax,ebx
c00059aa:	e8 02 d4 ff ff       	call   c0002db1 <get_fat>
c00059af:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059b3:	83 f8 01             	cmp    eax,0x1
c00059b6:	77 11                	ja     c00059c9 <f_lseek+0xcd>
c00059b8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059bc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00059c4:	e9 de 03 00 00       	jmp    c0005da7 <f_lseek+0x4ab>
c00059c9:	83 f8 ff             	cmp    eax,0xffffffff
c00059cc:	75 11                	jne    c00059df <f_lseek+0xe3>
c00059ce:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059d2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059da:	e9 c8 03 00 00       	jmp    c0005da7 <f_lseek+0x4ab>
c00059df:	8d 51 01             	lea    edx,[ecx+0x1]
c00059e2:	89 c1                	mov    ecx,eax
c00059e4:	39 c2                	cmp    edx,eax
c00059e6:	74 b7                	je     c000599f <f_lseek+0xa3>
c00059e8:	83 c6 02             	add    esi,0x2
c00059eb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059ef:	72 0b                	jb     c00059fc <f_lseek+0x100>
c00059f1:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059f4:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059f7:	89 0f                	mov    DWORD PTR [edi],ecx
c00059f9:	83 c7 08             	add    edi,0x8
c00059fc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005a00:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005a03:	76 04                	jbe    c0005a09 <f_lseek+0x10d>
c0005a05:	89 c5                	mov    ebp,eax
c0005a07:	eb 8d                	jmp    c0005996 <f_lseek+0x9a>
c0005a09:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a0c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005a10:	89 30                	mov    DWORD PTR [eax],esi
c0005a12:	0f 87 87 03 00 00    	ja     c0005d9f <f_lseek+0x4a3>
c0005a18:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a1e:	e9 84 03 00 00       	jmp    c0005da7 <f_lseek+0x4ab>
c0005a23:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005a26:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005a29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a2d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a35:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005a38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a3c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a40:	73 0f                	jae    c0005a51 <f_lseek+0x155>
c0005a42:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a45:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a55:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a59:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a5c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a63:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a67:	0f 84 3a 03 00 00    	je     c0005da7 <f_lseek+0x4ab>
c0005a6d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a71:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a75:	83 c6 ff             	add    esi,0xffffffff
c0005a78:	89 d8                	mov    eax,ebx
c0005a7a:	83 d7 ff             	adc    edi,0xffffffff
c0005a7d:	89 f2                	mov    edx,esi
c0005a7f:	89 f9                	mov    ecx,edi
c0005a81:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a85:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a88:	e8 78 c2 ff ff       	call   c0001d05 <clmt_clust>
c0005a8d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a91:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a94:	89 c2                	mov    edx,eax
c0005a96:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a9a:	89 c8                	mov    eax,ecx
c0005a9c:	e8 43 c2 ff ff       	call   c0001ce4 <clst2sect>
c0005aa1:	89 d7                	mov    edi,edx
c0005aa3:	09 c7                	or     edi,eax
c0005aa5:	0f 84 0d ff ff ff    	je     c00059b8 <f_lseek+0xbc>
c0005aab:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005aaf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ab5:	0f 84 ec 02 00 00    	je     c0005da7 <f_lseek+0x4ab>
c0005abb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ac6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005aca:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ace:	4d                   	dec    ebp
c0005acf:	31 ff                	xor    edi,edi
c0005ad1:	21 ee                	and    esi,ebp
c0005ad3:	01 c6                	add    esi,eax
c0005ad5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005ad8:	11 d7                	adc    edi,edx
c0005ada:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005add:	39 fa                	cmp    edx,edi
c0005adf:	75 08                	jne    c0005ae9 <f_lseek+0x1ed>
c0005ae1:	39 f0                	cmp    eax,esi
c0005ae3:	0f 84 be 02 00 00    	je     c0005da7 <f_lseek+0x4ab>
c0005ae9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aec:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005af0:	0f 89 80 02 00 00    	jns    c0005d76 <f_lseek+0x47a>
c0005af6:	83 ec 0c             	sub    esp,0xc
c0005af9:	6a 01                	push   0x1
c0005afb:	52                   	push   edx
c0005afc:	50                   	push   eax
c0005afd:	55                   	push   ebp
c0005afe:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005b02:	e9 5a 02 00 00       	jmp    c0005d61 <f_lseek+0x465>
c0005b07:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b0b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005b0e:	74 16                	je     c0005b26 <f_lseek+0x22a>
c0005b10:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005b15:	76 0f                	jbe    c0005b26 <f_lseek+0x22a>
c0005b17:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005b1e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005b26:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005b29:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005b2c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005b2f:	89 c7                	mov    edi,eax
c0005b31:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b35:	73 0d                	jae    c0005b44 <f_lseek+0x248>
c0005b37:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b3b:	75 07                	jne    c0005b44 <f_lseek+0x248>
c0005b3d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b40:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b44:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b47:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b4a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b4e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b55:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b5c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b5f:	75 09                	jne    c0005b6a <f_lseek+0x26e>
c0005b61:	31 f6                	xor    esi,esi
c0005b63:	31 ff                	xor    edi,edi
c0005b65:	e9 af 01 00 00       	jmp    c0005d19 <f_lseek+0x41d>
c0005b6a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b6e:	89 d7                	mov    edi,edx
c0005b70:	c1 e1 09             	shl    ecx,0x9
c0005b73:	09 c7                	or     edi,eax
c0005b75:	89 cd                	mov    ebp,ecx
c0005b77:	74 6d                	je     c0005be6 <f_lseek+0x2ea>
c0005b79:	83 c0 ff             	add    eax,0xffffffff
c0005b7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b80:	83 d2 ff             	adc    edx,0xffffffff
c0005b83:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b8a:	83 c0 ff             	add    eax,0xffffffff
c0005b8d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b91:	83 d2 ff             	adc    edx,0xffffffff
c0005b94:	31 ff                	xor    edi,edi
c0005b96:	57                   	push   edi
c0005b97:	51                   	push   ecx
c0005b98:	52                   	push   edx
c0005b99:	50                   	push   eax
c0005b9a:	e8 fd d9 01 00       	call   c002359c <__udivdi3>
c0005b9f:	83 c4 10             	add    esp,0x10
c0005ba2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ba6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005baa:	57                   	push   edi
c0005bab:	55                   	push   ebp
c0005bac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bb4:	e8 e3 d9 01 00       	call   c002359c <__udivdi3>
c0005bb9:	83 c4 10             	add    esp,0x10
c0005bbc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005bc0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005bc4:	19 d1                	sbb    ecx,edx
c0005bc6:	72 1e                	jb     c0005be6 <f_lseek+0x2ea>
c0005bc8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005bcc:	89 e9                	mov    ecx,ebp
c0005bce:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005bd1:	f7 d9                	neg    ecx
c0005bd3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005bd6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005bda:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005bdd:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005be0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005be4:	eb 28                	jmp    c0005c0e <f_lseek+0x312>
c0005be6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005be9:	85 c0                	test   eax,eax
c0005beb:	75 1e                	jne    c0005c0b <f_lseek+0x30f>
c0005bed:	31 d2                	xor    edx,edx
c0005bef:	89 d8                	mov    eax,ebx
c0005bf1:	e8 a9 d4 ff ff       	call   c000309f <create_chain>
c0005bf6:	83 f8 01             	cmp    eax,0x1
c0005bf9:	0f 84 b9 fd ff ff    	je     c00059b8 <f_lseek+0xbc>
c0005bff:	83 f8 ff             	cmp    eax,0xffffffff
c0005c02:	0f 84 c6 fd ff ff    	je     c00059ce <f_lseek+0xd2>
c0005c08:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005c0b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c0e:	85 c0                	test   eax,eax
c0005c10:	0f 84 4b ff ff ff    	je     c0005b61 <f_lseek+0x265>
c0005c16:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005c1a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005c22:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005c25:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c29:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005c2c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005c2f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c33:	0f 83 9d 00 00 00    	jae    c0005cd6 <f_lseek+0x3da>
c0005c39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c3d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c41:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c44:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c48:	01 f2                	add    edx,esi
c0005c4a:	11 f9                	adc    ecx,edi
c0005c4c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c50:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c54:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c57:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c5a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c5d:	f6 c1 02             	test   cl,0x2
c0005c60:	74 35                	je     c0005c97 <f_lseek+0x39b>
c0005c62:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c66:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c69:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c6c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c70:	73 16                	jae    c0005c88 <f_lseek+0x38c>
c0005c72:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c76:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c7a:	88 ca                	mov    dl,cl
c0005c7c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c7f:	83 ca 40             	or     edx,0x40
c0005c82:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c85:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c88:	89 c2                	mov    edx,eax
c0005c8a:	89 d8                	mov    eax,ebx
c0005c8c:	e8 0e d4 ff ff       	call   c000309f <create_chain>
c0005c91:	85 c0                	test   eax,eax
c0005c93:	75 0b                	jne    c0005ca0 <f_lseek+0x3a4>
c0005c95:	eb 30                	jmp    c0005cc7 <f_lseek+0x3cb>
c0005c97:	89 c2                	mov    edx,eax
c0005c99:	89 d8                	mov    eax,ebx
c0005c9b:	e8 11 d1 ff ff       	call   c0002db1 <get_fat>
c0005ca0:	83 f8 ff             	cmp    eax,0xffffffff
c0005ca3:	0f 84 25 fd ff ff    	je     c00059ce <f_lseek+0xd2>
c0005ca9:	83 f8 01             	cmp    eax,0x1
c0005cac:	0f 86 06 fd ff ff    	jbe    c00059b8 <f_lseek+0xbc>
c0005cb2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005cb6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005cb9:	0f 86 f9 fc ff ff    	jbe    c00059b8 <f_lseek+0xbc>
c0005cbf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cc2:	e9 5b ff ff ff       	jmp    c0005c22 <f_lseek+0x326>
c0005cc7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005cce:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005cd6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005cd9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005cdd:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ce0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ce3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ce6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005cec:	0f 84 6f fe ff ff    	je     c0005b61 <f_lseek+0x265>
c0005cf2:	89 c2                	mov    edx,eax
c0005cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cf8:	e8 e7 bf ff ff       	call   c0001ce4 <clst2sect>
c0005cfd:	89 d7                	mov    edi,edx
c0005cff:	09 c7                	or     edi,eax
c0005d01:	0f 84 b1 fc ff ff    	je     c00059b8 <f_lseek+0xbc>
c0005d07:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d0b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d0e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d12:	c1 ef 09             	shr    edi,0x9
c0005d15:	01 c6                	add    esi,eax
c0005d17:	11 d7                	adc    edi,edx
c0005d19:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d1c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d1f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005d22:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005d25:	19 d1                	sbb    ecx,edx
c0005d27:	73 0a                	jae    c0005d33 <f_lseek+0x437>
c0005d29:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005d2c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005d2f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005d33:	a9 ff 01 00 00       	test   eax,0x1ff
c0005d38:	74 6d                	je     c0005da7 <f_lseek+0x4ab>
c0005d3a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d3d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d40:	39 fa                	cmp    edx,edi
c0005d42:	75 04                	jne    c0005d48 <f_lseek+0x44c>
c0005d44:	39 f0                	cmp    eax,esi
c0005d46:	74 5f                	je     c0005da7 <f_lseek+0x4ab>
c0005d48:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d4b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d4f:	79 25                	jns    c0005d76 <f_lseek+0x47a>
c0005d51:	83 ec 0c             	sub    esp,0xc
c0005d54:	6a 01                	push   0x1
c0005d56:	52                   	push   edx
c0005d57:	50                   	push   eax
c0005d58:	55                   	push   ebp
c0005d59:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d5d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d61:	50                   	push   eax
c0005d62:	e8 af bc ff ff       	call   c0001a16 <disk_write>
c0005d67:	83 c4 20             	add    esp,0x20
c0005d6a:	85 c0                	test   eax,eax
c0005d6c:	0f 85 5c fc ff ff    	jne    c00059ce <f_lseek+0xd2>
c0005d72:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d76:	83 ec 0c             	sub    esp,0xc
c0005d79:	6a 01                	push   0x1
c0005d7b:	57                   	push   edi
c0005d7c:	56                   	push   esi
c0005d7d:	55                   	push   ebp
c0005d7e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d82:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d86:	50                   	push   eax
c0005d87:	e8 74 bc ff ff       	call   c0001a00 <disk_read>
c0005d8c:	83 c4 20             	add    esp,0x20
c0005d8f:	85 c0                	test   eax,eax
c0005d91:	0f 85 37 fc ff ff    	jne    c00059ce <f_lseek+0xd2>
c0005d97:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d9a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d9d:	eb 08                	jmp    c0005da7 <f_lseek+0x4ab>
c0005d9f:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005da7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005dab:	83 c4 3c             	add    esp,0x3c
c0005dae:	5b                   	pop    ebx
c0005daf:	5e                   	pop    esi
c0005db0:	5f                   	pop    edi
c0005db1:	5d                   	pop    ebp
c0005db2:	c3                   	ret    

c0005db3 <f_opendir>:
c0005db3:	56                   	push   esi
c0005db4:	b8 09 00 00 00       	mov    eax,0x9
c0005db9:	53                   	push   ebx
c0005dba:	83 ec 24             	sub    esp,0x24
c0005dbd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005dc1:	85 db                	test   ebx,ebx
c0005dc3:	0f 84 e6 00 00 00    	je     c0005eaf <f_opendir+0xfc>
c0005dc9:	31 c9                	xor    ecx,ecx
c0005dcb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005dcf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005dd3:	e8 03 c7 ff ff       	call   c00024db <mount_volume>
c0005dd8:	85 c0                	test   eax,eax
c0005dda:	0f 85 c9 00 00 00    	jne    c0005ea9 <f_opendir+0xf6>
c0005de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005de4:	83 ec 0c             	sub    esp,0xc
c0005de7:	89 03                	mov    DWORD PTR [ebx],eax
c0005de9:	68 60 04 00 00       	push   0x460
c0005dee:	e8 8b 24 00 00       	call   c000827e <ff_memalloc>
c0005df3:	83 c4 10             	add    esp,0x10
c0005df6:	89 c6                	mov    esi,eax
c0005df8:	b8 11 00 00 00       	mov    eax,0x11
c0005dfd:	85 f6                	test   esi,esi
c0005dff:	0f 84 aa 00 00 00    	je     c0005eaf <f_opendir+0xfc>
c0005e05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e09:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e0f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e12:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e15:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005e19:	89 d8                	mov    eax,ebx
c0005e1b:	e8 31 ee ff ff       	call   c0004c51 <follow_path>
c0005e20:	85 c0                	test   eax,eax
c0005e22:	75 61                	jne    c0005e85 <f_opendir+0xd2>
c0005e24:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005e28:	78 46                	js     c0005e70 <f_opendir+0xbd>
c0005e2a:	b8 05 00 00 00       	mov    eax,0x5
c0005e2f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005e33:	74 50                	je     c0005e85 <f_opendir+0xd2>
c0005e35:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e39:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e3b:	3c 04                	cmp    al,0x4
c0005e3d:	75 26                	jne    c0005e65 <f_opendir+0xb2>
c0005e3f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e42:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e45:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e48:	30 d2                	xor    dl,dl
c0005e4a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e4e:	09 c2                	or     edx,eax
c0005e50:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e53:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e56:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e59:	89 da                	mov    edx,ebx
c0005e5b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e5e:	e8 b4 ed ff ff       	call   c0004c17 <init_alloc_info.isra.2>
c0005e63:	eb 0b                	jmp    c0005e70 <f_opendir+0xbd>
c0005e65:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e68:	e8 59 ed ff ff       	call   c0004bc6 <ld_clust.isra.0>
c0005e6d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e74:	31 d2                	xor    edx,edx
c0005e76:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e7a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e7e:	89 d8                	mov    eax,ebx
c0005e80:	e8 22 d1 ff ff       	call   c0002fa7 <dir_sdi>
c0005e85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e89:	83 ec 0c             	sub    esp,0xc
c0005e8c:	56                   	push   esi
c0005e8d:	e8 02 24 00 00       	call   c0008294 <ff_memfree>
c0005e92:	83 c4 10             	add    esp,0x10
c0005e95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e99:	83 f8 04             	cmp    eax,0x4
c0005e9c:	74 06                	je     c0005ea4 <f_opendir+0xf1>
c0005e9e:	85 c0                	test   eax,eax
c0005ea0:	74 0d                	je     c0005eaf <f_opendir+0xfc>
c0005ea2:	eb 05                	jmp    c0005ea9 <f_opendir+0xf6>
c0005ea4:	b8 05 00 00 00       	mov    eax,0x5
c0005ea9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005eaf:	83 c4 24             	add    esp,0x24
c0005eb2:	5b                   	pop    ebx
c0005eb3:	5e                   	pop    esi
c0005eb4:	c3                   	ret    

c0005eb5 <f_closedir>:
c0005eb5:	53                   	push   ebx
c0005eb6:	83 ec 18             	sub    esp,0x18
c0005eb9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005ebd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ec1:	89 d8                	mov    eax,ebx
c0005ec3:	e8 86 c2 ff ff       	call   c000214e <validate>
c0005ec8:	85 c0                	test   eax,eax
c0005eca:	75 06                	jne    c0005ed2 <f_closedir+0x1d>
c0005ecc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ed2:	83 c4 18             	add    esp,0x18
c0005ed5:	5b                   	pop    ebx
c0005ed6:	c3                   	ret    

c0005ed7 <f_readdir>:
c0005ed7:	57                   	push   edi
c0005ed8:	56                   	push   esi
c0005ed9:	53                   	push   ebx
c0005eda:	83 ec 20             	sub    esp,0x20
c0005edd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ee1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ee5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ee9:	89 d8                	mov    eax,ebx
c0005eeb:	e8 5e c2 ff ff       	call   c000214e <validate>
c0005ef0:	85 c0                	test   eax,eax
c0005ef2:	75 77                	jne    c0005f6b <f_readdir+0x94>
c0005ef4:	85 ff                	test   edi,edi
c0005ef6:	75 0b                	jne    c0005f03 <f_readdir+0x2c>
c0005ef8:	31 d2                	xor    edx,edx
c0005efa:	89 d8                	mov    eax,ebx
c0005efc:	e8 a6 d0 ff ff       	call   c0002fa7 <dir_sdi>
c0005f01:	eb 68                	jmp    c0005f6b <f_readdir+0x94>
c0005f03:	83 ec 0c             	sub    esp,0xc
c0005f06:	68 60 04 00 00       	push   0x460
c0005f0b:	e8 6e 23 00 00       	call   c000827e <ff_memalloc>
c0005f10:	83 c4 10             	add    esp,0x10
c0005f13:	89 c6                	mov    esi,eax
c0005f15:	b8 11 00 00 00       	mov    eax,0x11
c0005f1a:	85 f6                	test   esi,esi
c0005f1c:	74 4d                	je     c0005f6b <f_readdir+0x94>
c0005f1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f22:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f28:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f2b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f2e:	31 d2                	xor    edx,edx
c0005f30:	89 d8                	mov    eax,ebx
c0005f32:	e8 80 d8 ff ff       	call   c00037b7 <dir_read>
c0005f37:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f3c:	75 19                	jne    c0005f57 <f_readdir+0x80>
c0005f3e:	89 fa                	mov    edx,edi
c0005f40:	89 d8                	mov    eax,ebx
c0005f42:	e8 7e ea ff ff       	call   c00049c5 <get_fileinfo>
c0005f47:	31 d2                	xor    edx,edx
c0005f49:	89 d8                	mov    eax,ebx
c0005f4b:	e8 af d5 ff ff       	call   c00034ff <dir_next>
c0005f50:	83 f8 04             	cmp    eax,0x4
c0005f53:	75 02                	jne    c0005f57 <f_readdir+0x80>
c0005f55:	31 c0                	xor    eax,eax
c0005f57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f5b:	83 ec 0c             	sub    esp,0xc
c0005f5e:	56                   	push   esi
c0005f5f:	e8 30 23 00 00       	call   c0008294 <ff_memfree>
c0005f64:	83 c4 10             	add    esp,0x10
c0005f67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f6b:	83 c4 20             	add    esp,0x20
c0005f6e:	5b                   	pop    ebx
c0005f6f:	5e                   	pop    esi
c0005f70:	5f                   	pop    edi
c0005f71:	c3                   	ret    

c0005f72 <f_stat>:
c0005f72:	57                   	push   edi
c0005f73:	31 c9                	xor    ecx,ecx
c0005f75:	56                   	push   esi
c0005f76:	53                   	push   ebx
c0005f77:	83 ec 50             	sub    esp,0x50
c0005f7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f7e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f82:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f86:	e8 50 c5 ff ff       	call   c00024db <mount_volume>
c0005f8b:	89 c3                	mov    ebx,eax
c0005f8d:	85 c0                	test   eax,eax
c0005f8f:	75 67                	jne    c0005ff8 <f_stat+0x86>
c0005f91:	83 ec 0c             	sub    esp,0xc
c0005f94:	bb 11 00 00 00       	mov    ebx,0x11
c0005f99:	68 60 04 00 00       	push   0x460
c0005f9e:	e8 db 22 00 00       	call   c000827e <ff_memalloc>
c0005fa3:	83 c4 10             	add    esp,0x10
c0005fa6:	89 c6                	mov    esi,eax
c0005fa8:	85 c0                	test   eax,eax
c0005faa:	74 4c                	je     c0005ff8 <f_stat+0x86>
c0005fac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005fb0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005fb6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fb9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005fbc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005fc0:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fc4:	e8 88 ec ff ff       	call   c0004c51 <follow_path>
c0005fc9:	89 c3                	mov    ebx,eax
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	75 1d                	jne    c0005fec <f_stat+0x7a>
c0005fcf:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005fd4:	78 11                	js     c0005fe7 <f_stat+0x75>
c0005fd6:	85 ff                	test   edi,edi
c0005fd8:	74 12                	je     c0005fec <f_stat+0x7a>
c0005fda:	89 fa                	mov    edx,edi
c0005fdc:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fe0:	e8 e0 e9 ff ff       	call   c00049c5 <get_fileinfo>
c0005fe5:	eb 05                	jmp    c0005fec <f_stat+0x7a>
c0005fe7:	bb 06 00 00 00       	mov    ebx,0x6
c0005fec:	83 ec 0c             	sub    esp,0xc
c0005fef:	56                   	push   esi
c0005ff0:	e8 9f 22 00 00       	call   c0008294 <ff_memfree>
c0005ff5:	83 c4 10             	add    esp,0x10
c0005ff8:	83 c4 50             	add    esp,0x50
c0005ffb:	89 d8                	mov    eax,ebx
c0005ffd:	5b                   	pop    ebx
c0005ffe:	5e                   	pop    esi
c0005fff:	5f                   	pop    edi
c0006000:	c3                   	ret    

c0006001 <f_getfree>:
c0006001:	55                   	push   ebp
c0006002:	31 c9                	xor    ecx,ecx
c0006004:	57                   	push   edi
c0006005:	56                   	push   esi
c0006006:	53                   	push   ebx
c0006007:	83 ec 5c             	sub    esp,0x5c
c000600a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000600e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006012:	e8 c4 c4 ff ff       	call   c00024db <mount_volume>
c0006017:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000601b:	85 c0                	test   eax,eax
c000601d:	0f 85 9d 01 00 00    	jne    c00061c0 <f_getfree+0x1bf>
c0006023:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006027:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000602b:	89 02                	mov    DWORD PTR [edx],eax
c000602d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006030:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006033:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006036:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000603a:	39 f2                	cmp    edx,esi
c000603c:	77 0b                	ja     c0006049 <f_getfree+0x48>
c000603e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006042:	89 10                	mov    DWORD PTR [eax],edx
c0006044:	e9 77 01 00 00       	jmp    c00061c0 <f_getfree+0x1bf>
c0006049:	8a 10                	mov    dl,BYTE PTR [eax]
c000604b:	80 fa 01             	cmp    dl,0x1
c000604e:	75 3a                	jne    c000608a <f_getfree+0x89>
c0006050:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006054:	be 02 00 00 00       	mov    esi,0x2
c0006059:	31 db                	xor    ebx,ebx
c000605b:	89 f2                	mov    edx,esi
c000605d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006061:	e8 4b cd ff ff       	call   c0002db1 <get_fat>
c0006066:	83 f8 ff             	cmp    eax,0xffffffff
c0006069:	0f 84 28 01 00 00    	je     c0006197 <f_getfree+0x196>
c000606f:	83 f8 01             	cmp    eax,0x1
c0006072:	0f 84 29 01 00 00    	je     c00061a1 <f_getfree+0x1a0>
c0006078:	83 d3 00             	adc    ebx,0x0
c000607b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607f:	46                   	inc    esi
c0006080:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006083:	77 d6                	ja     c000605b <f_getfree+0x5a>
c0006085:	e9 25 01 00 00       	jmp    c00061af <f_getfree+0x1ae>
c000608a:	80 fa 04             	cmp    dl,0x4
c000608d:	0f 85 88 00 00 00    	jne    c000611b <f_getfree+0x11a>
c0006093:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006096:	31 ed                	xor    ebp,ebp
c0006098:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c000609b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000609f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	85 ed                	test   ebp,ebp
c00060a7:	75 3f                	jne    c00060e8 <f_getfree+0xe7>
c00060a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00060b1:	83 c0 01             	add    eax,0x1
c00060b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00060b8:	83 d2 00             	adc    edx,0x0
c00060bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00060c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00060cb:	e8 59 c1 ff ff       	call   c0002229 <move_window>
c00060d0:	85 c0                	test   eax,eax
c00060d2:	0f 85 d3 00 00 00    	jne    c00061ab <f_getfree+0x1aa>
c00060d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060e4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ec:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060ef:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060f3:	89 cf                	mov    edi,ecx
c00060f5:	85 f6                	test   esi,esi
c00060f7:	74 12                	je     c000610b <f_getfree+0x10a>
c00060f9:	88 c1                	mov    cl,al
c00060fb:	83 e1 01             	and    ecx,0x1
c00060fe:	80 f9 01             	cmp    cl,0x1
c0006101:	83 d3 00             	adc    ebx,0x0
c0006104:	d0 e8                	shr    al,1
c0006106:	4e                   	dec    esi
c0006107:	39 fe                	cmp    esi,edi
c0006109:	75 ea                	jne    c00060f5 <f_getfree+0xf4>
c000610b:	45                   	inc    ebp
c000610c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006112:	85 f6                	test   esi,esi
c0006114:	75 8f                	jne    c00060a5 <f_getfree+0xa4>
c0006116:	e9 94 00 00 00       	jmp    c00061af <f_getfree+0x1ae>
c000611b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000611e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006121:	31 f6                	xor    esi,esi
c0006123:	31 db                	xor    ebx,ebx
c0006125:	85 f6                	test   esi,esi
c0006127:	75 1b                	jne    c0006144 <f_getfree+0x143>
c0006129:	89 d7                	mov    edi,edx
c000612b:	89 cd                	mov    ebp,ecx
c000612d:	83 c7 01             	add    edi,0x1
c0006130:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006134:	83 d5 00             	adc    ebp,0x0
c0006137:	e8 ed c0 ff ff       	call   c0002229 <move_window>
c000613c:	85 c0                	test   eax,eax
c000613e:	75 6b                	jne    c00061ab <f_getfree+0x1aa>
c0006140:	89 fa                	mov    edx,edi
c0006142:	89 e9                	mov    ecx,ebp
c0006144:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006148:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000614c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006150:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006153:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006157:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000615b:	75 11                	jne    c000616e <f_getfree+0x16d>
c000615d:	e8 e9 b8 ff ff       	call   c0001a4b <ld_word>
c0006162:	66 83 f8 01          	cmp    ax,0x1
c0006166:	83 d3 00             	adc    ebx,0x0
c0006169:	83 c6 02             	add    esi,0x2
c000616c:	eb 13                	jmp    c0006181 <f_getfree+0x180>
c000616e:	e8 e5 b8 ff ff       	call   c0001a58 <ld_dword>
c0006173:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006178:	83 f8 01             	cmp    eax,0x1
c000617b:	83 d3 00             	adc    ebx,0x0
c000617e:	83 c6 04             	add    esi,0x4
c0006181:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006187:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000618b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000618f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006193:	75 90                	jne    c0006125 <f_getfree+0x124>
c0006195:	eb 18                	jmp    c00061af <f_getfree+0x1ae>
c0006197:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000619f:	eb 0e                	jmp    c00061af <f_getfree+0x1ae>
c00061a1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00061a9:	eb 04                	jmp    c00061af <f_getfree+0x1ae>
c00061ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061af:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00061b3:	89 18                	mov    DWORD PTR [eax],ebx
c00061b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061b9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00061bc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00061c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061c4:	83 c4 5c             	add    esp,0x5c
c00061c7:	5b                   	pop    ebx
c00061c8:	5e                   	pop    esi
c00061c9:	5f                   	pop    edi
c00061ca:	5d                   	pop    ebp
c00061cb:	c3                   	ret    

c00061cc <f_truncate>:
c00061cc:	56                   	push   esi
c00061cd:	53                   	push   ebx
c00061ce:	83 ec 14             	sub    esp,0x14
c00061d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00061d5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00061d9:	89 d8                	mov    eax,ebx
c00061db:	e8 6e bf ff ff       	call   c000214e <validate>
c00061e0:	89 c6                	mov    esi,eax
c00061e2:	85 c0                	test   eax,eax
c00061e4:	0f 85 d2 00 00 00    	jne    c00062bc <f_truncate+0xf0>
c00061ea:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061ee:	85 f6                	test   esi,esi
c00061f0:	0f 85 c6 00 00 00    	jne    c00062bc <f_truncate+0xf0>
c00061f6:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061fa:	0f 84 b7 00 00 00    	je     c00062b7 <f_truncate+0xeb>
c0006200:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006203:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006206:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006209:	89 d1                	mov    ecx,edx
c000620b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000620e:	0f 83 a8 00 00 00    	jae    c00062bc <f_truncate+0xf0>
c0006214:	09 c2                	or     edx,eax
c0006216:	75 15                	jne    c000622d <f_truncate+0x61>
c0006218:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000621b:	31 c9                	xor    ecx,ecx
c000621d:	89 d8                	mov    eax,ebx
c000621f:	e8 7a d0 ff ff       	call   c000329e <remove_chain>
c0006224:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000622b:	eb 35                	jmp    c0006262 <f_truncate+0x96>
c000622d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006230:	89 d8                	mov    eax,ebx
c0006232:	e8 7a cb ff ff       	call   c0002db1 <get_fat>
c0006237:	89 c2                	mov    edx,eax
c0006239:	b8 01 00 00 00       	mov    eax,0x1
c000623e:	83 fa ff             	cmp    edx,0xffffffff
c0006241:	74 1f                	je     c0006262 <f_truncate+0x96>
c0006243:	b8 02 00 00 00       	mov    eax,0x2
c0006248:	83 fa 01             	cmp    edx,0x1
c000624b:	74 15                	je     c0006262 <f_truncate+0x96>
c000624d:	31 c0                	xor    eax,eax
c000624f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006253:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006256:	76 0a                	jbe    c0006262 <f_truncate+0x96>
c0006258:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000625b:	89 d8                	mov    eax,ebx
c000625d:	e8 3c d0 ff ff       	call   c000329e <remove_chain>
c0006262:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006265:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006268:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000626b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000626e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006271:	83 ca 40             	or     edx,0x40
c0006274:	85 c0                	test   eax,eax
c0006276:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006279:	75 35                	jne    c00062b0 <f_truncate+0xe4>
c000627b:	84 d2                	test   dl,dl
c000627d:	79 3d                	jns    c00062bc <f_truncate+0xf0>
c000627f:	83 ec 0c             	sub    esp,0xc
c0006282:	8d 43 50             	lea    eax,[ebx+0x50]
c0006285:	6a 01                	push   0x1
c0006287:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000628a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000628d:	50                   	push   eax
c000628e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006292:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006296:	50                   	push   eax
c0006297:	e8 7a b7 ff ff       	call   c0001a16 <disk_write>
c000629c:	83 c4 20             	add    esp,0x20
c000629f:	85 c0                	test   eax,eax
c00062a1:	75 08                	jne    c00062ab <f_truncate+0xdf>
c00062a3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00062a7:	31 f6                	xor    esi,esi
c00062a9:	eb 11                	jmp    c00062bc <f_truncate+0xf0>
c00062ab:	b8 01 00 00 00       	mov    eax,0x1
c00062b0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00062b3:	89 c6                	mov    esi,eax
c00062b5:	eb 05                	jmp    c00062bc <f_truncate+0xf0>
c00062b7:	be 07 00 00 00       	mov    esi,0x7
c00062bc:	89 f0                	mov    eax,esi
c00062be:	83 c4 14             	add    esp,0x14
c00062c1:	5b                   	pop    ebx
c00062c2:	5e                   	pop    esi
c00062c3:	c3                   	ret    

c00062c4 <f_unlink>:
c00062c4:	56                   	push   esi
c00062c5:	b9 02 00 00 00       	mov    ecx,0x2
c00062ca:	53                   	push   ebx
c00062cb:	81 ec e4 00 00 00    	sub    esp,0xe4
c00062d1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00062d5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062dc:	e8 fa c1 ff ff       	call   c00024db <mount_volume>
c00062e1:	85 c0                	test   eax,eax
c00062e3:	0f 85 55 01 00 00    	jne    c000643e <f_unlink+0x17a>
c00062e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ed:	83 ec 0c             	sub    esp,0xc
c00062f0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062f4:	68 60 04 00 00       	push   0x460
c00062f9:	e8 80 1f 00 00       	call   c000827e <ff_memalloc>
c00062fe:	83 c4 10             	add    esp,0x10
c0006301:	89 c3                	mov    ebx,eax
c0006303:	b8 11 00 00 00       	mov    eax,0x11
c0006308:	85 db                	test   ebx,ebx
c000630a:	0f 84 2e 01 00 00    	je     c000643e <f_unlink+0x17a>
c0006310:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006314:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000631a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000631d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006320:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006327:	8d 44 24 48          	lea    eax,[esp+0x48]
c000632b:	e8 21 e9 ff ff       	call   c0004c51 <follow_path>
c0006330:	85 c0                	test   eax,eax
c0006332:	0f 85 f2 00 00 00    	jne    c000642a <f_unlink+0x166>
c0006338:	b8 06 00 00 00       	mov    eax,0x6
c000633d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006345:	0f 88 df 00 00 00    	js     c000642a <f_unlink+0x166>
c000634b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006350:	74 0a                	je     c000635c <f_unlink+0x98>
c0006352:	b8 07 00 00 00       	mov    eax,0x7
c0006357:	e9 ce 00 00 00       	jmp    c000642a <f_unlink+0x166>
c000635c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006360:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006364:	8a 02                	mov    al,BYTE PTR [edx]
c0006366:	3c 04                	cmp    al,0x4
c0006368:	75 12                	jne    c000637c <f_unlink+0xb8>
c000636a:	8d 42 10             	lea    eax,[edx+0x10]
c000636d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006371:	e8 a1 e8 ff ff       	call   c0004c17 <init_alloc_info.isra.2>
c0006376:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000637a:	eb 0e                	jmp    c000638a <f_unlink+0xc6>
c000637c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006383:	e8 3e e8 ff ff       	call   c0004bc6 <ld_clust.isra.0>
c0006388:	89 c6                	mov    esi,eax
c000638a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000638f:	75 12                	jne    c00063a3 <f_unlink+0xdf>
c0006391:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006395:	e8 94 d6 ff ff       	call   c0003a2e <dir_remove>
c000639a:	85 c0                	test   eax,eax
c000639c:	74 6c                	je     c000640a <f_unlink+0x146>
c000639e:	e9 87 00 00 00       	jmp    c000642a <f_unlink+0x166>
c00063a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063a7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00063ae:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00063b5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00063b8:	75 21                	jne    c00063db <f_unlink+0x117>
c00063ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00063be:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00063c2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00063c9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00063d0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00063d4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063db:	31 d2                	xor    edx,edx
c00063dd:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063e4:	e8 be cb ff ff       	call   c0002fa7 <dir_sdi>
c00063e9:	85 c0                	test   eax,eax
c00063eb:	75 3d                	jne    c000642a <f_unlink+0x166>
c00063ed:	31 d2                	xor    edx,edx
c00063ef:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063f6:	e8 bc d3 ff ff       	call   c00037b7 <dir_read>
c00063fb:	85 c0                	test   eax,eax
c00063fd:	0f 84 4f ff ff ff    	je     c0006352 <f_unlink+0x8e>
c0006403:	83 f8 04             	cmp    eax,0x4
c0006406:	75 22                	jne    c000642a <f_unlink+0x166>
c0006408:	eb 87                	jmp    c0006391 <f_unlink+0xcd>
c000640a:	85 f6                	test   esi,esi
c000640c:	75 0b                	jne    c0006419 <f_unlink+0x155>
c000640e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006412:	e8 3d df ff ff       	call   c0004354 <sync_fs>
c0006417:	eb 11                	jmp    c000642a <f_unlink+0x166>
c0006419:	31 c9                	xor    ecx,ecx
c000641b:	89 f2                	mov    edx,esi
c000641d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006421:	e8 78 ce ff ff       	call   c000329e <remove_chain>
c0006426:	85 c0                	test   eax,eax
c0006428:	74 e4                	je     c000640e <f_unlink+0x14a>
c000642a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000642e:	83 ec 0c             	sub    esp,0xc
c0006431:	53                   	push   ebx
c0006432:	e8 5d 1e 00 00       	call   c0008294 <ff_memfree>
c0006437:	83 c4 10             	add    esp,0x10
c000643a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000643e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	c3                   	ret    

c0006447 <f_mkdir>:
c0006447:	57                   	push   edi
c0006448:	b9 02 00 00 00       	mov    ecx,0x2
c000644d:	56                   	push   esi
c000644e:	53                   	push   ebx
c000644f:	83 c4 80             	add    esp,0xffffff80
c0006452:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006456:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000645d:	e8 79 c0 ff ff       	call   c00024db <mount_volume>
c0006462:	89 c3                	mov    ebx,eax
c0006464:	85 c0                	test   eax,eax
c0006466:	0f 85 fe 01 00 00    	jne    c000666a <f_mkdir+0x223>
c000646c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006470:	bb 11 00 00 00       	mov    ebx,0x11
c0006475:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006479:	83 ec 0c             	sub    esp,0xc
c000647c:	68 60 04 00 00       	push   0x460
c0006481:	e8 f8 1d 00 00       	call   c000827e <ff_memalloc>
c0006486:	83 c4 10             	add    esp,0x10
c0006489:	89 c7                	mov    edi,eax
c000648b:	85 c0                	test   eax,eax
c000648d:	0f 84 d7 01 00 00    	je     c000666a <f_mkdir+0x223>
c0006493:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006497:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c000649d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00064a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064a3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00064aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064ae:	e8 9e e7 ff ff       	call   c0004c51 <follow_path>
c00064b3:	89 c3                	mov    ebx,eax
c00064b5:	85 c0                	test   eax,eax
c00064b7:	74 3e                	je     c00064f7 <f_mkdir+0xb0>
c00064b9:	83 f8 04             	cmp    eax,0x4
c00064bc:	75 3e                	jne    c00064fc <f_mkdir+0xb5>
c00064be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c2:	31 d2                	xor    edx,edx
c00064c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064cc:	e8 ce cb ff ff       	call   c000309f <create_chain>
c00064d1:	89 c6                	mov    esi,eax
c00064d3:	85 c0                	test   eax,eax
c00064d5:	74 0c                	je     c00064e3 <f_mkdir+0x9c>
c00064d7:	bb 02 00 00 00       	mov    ebx,0x2
c00064dc:	83 f8 01             	cmp    eax,0x1
c00064df:	74 07                	je     c00064e8 <f_mkdir+0xa1>
c00064e1:	eb 2a                	jmp    c000650d <f_mkdir+0xc6>
c00064e3:	bb 07 00 00 00       	mov    ebx,0x7
c00064e8:	31 c9                	xor    ecx,ecx
c00064ea:	89 f2                	mov    edx,esi
c00064ec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064f0:	e8 a9 cd ff ff       	call   c000329e <remove_chain>
c00064f5:	eb 05                	jmp    c00064fc <f_mkdir+0xb5>
c00064f7:	bb 08 00 00 00       	mov    ebx,0x8
c00064fc:	83 ec 0c             	sub    esp,0xc
c00064ff:	57                   	push   edi
c0006500:	e8 8f 1d 00 00       	call   c0008294 <ff_memfree>
c0006505:	83 c4 10             	add    esp,0x10
c0006508:	e9 5d 01 00 00       	jmp    c000666a <f_mkdir+0x223>
c000650d:	bb 01 00 00 00       	mov    ebx,0x1
c0006512:	83 f8 ff             	cmp    eax,0xffffffff
c0006515:	74 d1                	je     c00064e8 <f_mkdir+0xa1>
c0006517:	89 f2                	mov    edx,esi
c0006519:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651d:	e8 c4 ce ff ff       	call   c00033e6 <dir_clear>
c0006522:	89 c3                	mov    ebx,eax
c0006524:	85 c0                	test   eax,eax
c0006526:	75 c0                	jne    c00064e8 <f_mkdir+0xa1>
c0006528:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000652c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000652f:	74 69                	je     c000659a <f_mkdir+0x153>
c0006531:	b9 0b 00 00 00       	mov    ecx,0xb
c0006536:	83 c0 54             	add    eax,0x54
c0006539:	ba 20 00 00 00       	mov    edx,0x20
c000653e:	e8 9c b5 ff ff       	call   c0001adf <mem_set>
c0006543:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006547:	ba 00 00 21 50       	mov    edx,0x50210000
c000654c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006550:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006554:	83 c0 6a             	add    eax,0x6a
c0006557:	e8 65 b5 ff ff       	call   c0001ac1 <st_dword>
c000655c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006560:	89 f1                	mov    ecx,esi
c0006562:	8d 50 54             	lea    edx,[eax+0x54]
c0006565:	e8 85 e6 ff ff       	call   c0004bef <st_clust.isra.1>
c000656a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000656e:	b9 20 00 00 00       	mov    ecx,0x20
c0006573:	8d 50 54             	lea    edx,[eax+0x54]
c0006576:	83 c0 74             	add    eax,0x74
c0006579:	e8 4c b5 ff ff       	call   c0001aca <mem_cpy>
c000657e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006582:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006586:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000658a:	8d 50 74             	lea    edx,[eax+0x74]
c000658d:	e8 5d e6 ff ff       	call   c0004bef <st_clust.isra.1>
c0006592:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006596:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000659a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000659e:	e8 2f db ff ff       	call   c00040d2 <dir_register>
c00065a3:	89 c3                	mov    ebx,eax
c00065a5:	85 c0                	test   eax,eax
c00065a7:	0f 85 3b ff ff ff    	jne    c00064e8 <f_mkdir+0xa1>
c00065ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065b4:	75 74                	jne    c000662a <f_mkdir+0x1e3>
c00065b6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065b9:	ba 00 00 21 50       	mov    edx,0x50210000
c00065be:	83 c0 0c             	add    eax,0xc
c00065c1:	e8 fb b4 ff ff       	call   c0001ac1 <st_dword>
c00065c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ca:	89 f2                	mov    edx,esi
c00065cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065cf:	83 c0 34             	add    eax,0x34
c00065d2:	e8 ea b4 ff ff       	call   c0001ac1 <st_dword>
c00065d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065db:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065df:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065e2:	c1 e2 09             	shl    edx,0x9
c00065e5:	83 c0 38             	add    eax,0x38
c00065e8:	e8 d4 b4 ff ff       	call   c0001ac1 <st_dword>
c00065ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065f8:	c1 e2 09             	shl    edx,0x9
c00065fb:	83 c0 28             	add    eax,0x28
c00065fe:	e8 be b4 ff ff       	call   c0001ac1 <st_dword>
c0006603:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006607:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000660a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000660e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006611:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006615:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006619:	e8 8b d3 ff ff       	call   c00039a9 <store_xdir>
c000661e:	89 c3                	mov    ebx,eax
c0006620:	85 c0                	test   eax,eax
c0006622:	0f 85 d4 fe ff ff    	jne    c00064fc <f_mkdir+0xb5>
c0006628:	eb 30                	jmp    c000665a <f_mkdir+0x213>
c000662a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000662e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006633:	83 c0 16             	add    eax,0x16
c0006636:	e8 86 b4 ff ff       	call   c0001ac1 <st_dword>
c000663b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663f:	89 f1                	mov    ecx,esi
c0006641:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006645:	e8 a5 e5 ff ff       	call   c0004bef <st_clust.isra.1>
c000664a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000664e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006652:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006656:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000665a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000665e:	e8 f1 dc ff ff       	call   c0004354 <sync_fs>
c0006663:	89 c3                	mov    ebx,eax
c0006665:	e9 92 fe ff ff       	jmp    c00064fc <f_mkdir+0xb5>
c000666a:	83 ec 80             	sub    esp,0xffffff80
c000666d:	89 d8                	mov    eax,ebx
c000666f:	5b                   	pop    ebx
c0006670:	5e                   	pop    esi
c0006671:	5f                   	pop    edi
c0006672:	c3                   	ret    

c0006673 <f_rename>:
c0006673:	55                   	push   ebp
c0006674:	57                   	push   edi
c0006675:	56                   	push   esi
c0006676:	53                   	push   ebx
c0006677:	81 ec fc 00 00 00    	sub    esp,0xfc
c000667d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006684:	e8 a4 b9 ff ff       	call   c000202d <get_ldnumber>
c0006689:	b9 02 00 00 00       	mov    ecx,0x2
c000668e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006692:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006699:	e8 3d be ff ff       	call   c00024db <mount_volume>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 85 b5 02 00 00    	jne    c000695b <f_rename+0x2e8>
c00066a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066aa:	83 ec 0c             	sub    esp,0xc
c00066ad:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00066b1:	68 60 04 00 00       	push   0x460
c00066b6:	e8 c3 1b 00 00       	call   c000827e <ff_memalloc>
c00066bb:	83 c4 10             	add    esp,0x10
c00066be:	89 c3                	mov    ebx,eax
c00066c0:	b8 11 00 00 00       	mov    eax,0x11
c00066c5:	85 db                	test   ebx,ebx
c00066c7:	0f 84 8e 02 00 00    	je     c000695b <f_rename+0x2e8>
c00066cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00066d7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066da:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066dd:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066e4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066e8:	e8 64 e5 ff ff       	call   c0004c51 <follow_path>
c00066ed:	85 c0                	test   eax,eax
c00066ef:	0f 85 52 02 00 00    	jne    c0006947 <f_rename+0x2d4>
c00066f5:	b8 06 00 00 00       	mov    eax,0x6
c00066fa:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006702:	0f 85 3f 02 00 00    	jne    c0006947 <f_rename+0x2d4>
c0006708:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670f:	0f 85 05 01 00 00    	jne    c000681a <f_rename+0x1a7>
c0006715:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006718:	b9 40 00 00 00       	mov    ecx,0x40
c000671d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006721:	e8 a4 b3 ff ff       	call   c0001aca <mem_cpy>
c0006726:	b9 4c 00 00 00       	mov    ecx,0x4c
c000672b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000672f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006736:	e8 8f b3 ff ff       	call   c0001aca <mem_cpy>
c000673b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006742:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006749:	e8 03 e5 ff ff       	call   c0004c51 <follow_path>
c000674e:	85 c0                	test   eax,eax
c0006750:	75 29                	jne    c000677b <f_rename+0x108>
c0006752:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006756:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000675d:	74 0a                	je     c0006769 <f_rename+0xf6>
c000675f:	b8 08 00 00 00       	mov    eax,0x8
c0006764:	e9 de 01 00 00       	jmp    c0006947 <f_rename+0x2d4>
c0006769:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006770:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006777:	75 e6                	jne    c000675f <f_rename+0xec>
c0006779:	eb 09                	jmp    c0006784 <f_rename+0x111>
c000677b:	83 f8 04             	cmp    eax,0x4
c000677e:	0f 85 c3 01 00 00    	jne    c0006947 <f_rename+0x2d4>
c0006784:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000678b:	e8 42 d9 ff ff       	call   c00040d2 <dir_register>
c0006790:	85 c0                	test   eax,eax
c0006792:	0f 85 af 01 00 00    	jne    c0006947 <f_rename+0x2d4>
c0006798:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679c:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000679f:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00067a2:	89 c5                	mov    ebp,eax
c00067a4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00067a7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00067ab:	8d 46 24             	lea    eax,[esi+0x24]
c00067ae:	e8 98 b2 ff ff       	call   c0001a4b <ld_word>
c00067b3:	b9 40 00 00 00       	mov    ecx,0x40
c00067b8:	89 c7                	mov    edi,eax
c00067ba:	8d 54 24 18          	lea    edx,[esp+0x18]
c00067be:	89 f0                	mov    eax,esi
c00067c0:	e8 05 b3 ff ff       	call   c0001aca <mem_cpy>
c00067c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067c9:	89 e9                	mov    ecx,ebp
c00067cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ce:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00067d1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00067d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067d9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067dc:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067df:	0f b7 d7             	movzx  edx,di
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 24             	add    eax,0x24
c00067e8:	e8 d0 b2 ff ff       	call   c0001abd <st_word>
c00067ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067f4:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067f7:	a8 10                	test   al,0x10
c00067f9:	75 06                	jne    c0006801 <f_rename+0x18e>
c00067fb:	83 c8 20             	or     eax,0x20
c00067fe:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006801:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006808:	e8 9c d1 ff ff       	call   c00039a9 <store_xdir>
c000680d:	85 c0                	test   eax,eax
c000680f:	0f 84 1c 01 00 00    	je     c0006931 <f_rename+0x2be>
c0006815:	e9 2d 01 00 00       	jmp    c0006947 <f_rename+0x2d4>
c000681a:	b9 20 00 00 00       	mov    ecx,0x20
c000681f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006826:	8d 44 24 18          	lea    eax,[esp+0x18]
c000682a:	e8 9b b2 ff ff       	call   c0001aca <mem_cpy>
c000682f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006834:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006838:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000683f:	e8 86 b2 ff ff       	call   c0001aca <mem_cpy>
c0006844:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000684b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006852:	e8 fa e3 ff ff       	call   c0004c51 <follow_path>
c0006857:	85 c0                	test   eax,eax
c0006859:	75 27                	jne    c0006882 <f_rename+0x20f>
c000685b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000685f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006866:	0f 85 f3 fe ff ff    	jne    c000675f <f_rename+0xec>
c000686c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006873:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000687a:	0f 85 df fe ff ff    	jne    c000675f <f_rename+0xec>
c0006880:	eb 09                	jmp    c000688b <f_rename+0x218>
c0006882:	83 f8 04             	cmp    eax,0x4
c0006885:	0f 85 bc 00 00 00    	jne    c0006947 <f_rename+0x2d4>
c000688b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006892:	e8 3b d8 ff ff       	call   c00040d2 <dir_register>
c0006897:	85 c0                	test   eax,eax
c0006899:	0f 85 a8 00 00 00    	jne    c0006947 <f_rename+0x2d4>
c000689f:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00068a6:	b9 13 00 00 00       	mov    ecx,0x13
c00068ab:	8d 46 0d             	lea    eax,[esi+0xd]
c00068ae:	8d 54 24 25          	lea    edx,[esp+0x25]
c00068b2:	e8 13 b2 ff ff       	call   c0001aca <mem_cpy>
c00068b7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00068bb:	a8 10                	test   al,0x10
c00068bd:	75 03                	jne    c00068c2 <f_rename+0x24f>
c00068bf:	83 c8 20             	or     eax,0x20
c00068c2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00068c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068cd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00068d1:	74 5e                	je     c0006931 <f_rename+0x2be>
c00068d3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068da:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068de:	74 51                	je     c0006931 <f_rename+0x2be>
c00068e0:	89 f2                	mov    edx,esi
c00068e2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068e6:	8a 07                	mov    al,BYTE PTR [edi]
c00068e8:	e8 d9 e2 ff ff       	call   c0004bc6 <ld_clust.isra.0>
c00068ed:	89 c2                	mov    edx,eax
c00068ef:	89 f8                	mov    eax,edi
c00068f1:	e8 ee b3 ff ff       	call   c0001ce4 <clst2sect>
c00068f6:	89 c6                	mov    esi,eax
c00068f8:	89 d1                	mov    ecx,edx
c00068fa:	b8 02 00 00 00       	mov    eax,0x2
c00068ff:	09 f2                	or     edx,esi
c0006901:	74 44                	je     c0006947 <f_rename+0x2d4>
c0006903:	89 f2                	mov    edx,esi
c0006905:	89 f8                	mov    eax,edi
c0006907:	e8 1d b9 ff ff       	call   c0002229 <move_window>
c000690c:	85 c0                	test   eax,eax
c000690e:	75 37                	jne    c0006947 <f_rename+0x2d4>
c0006910:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006914:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006918:	75 17                	jne    c0006931 <f_rename+0x2be>
c000691a:	8d 50 74             	lea    edx,[eax+0x74]
c000691d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006924:	e8 c6 e2 ff ff       	call   c0004bef <st_clust.isra.1>
c0006929:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000692d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006931:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006935:	e8 f4 d0 ff ff       	call   c0003a2e <dir_remove>
c000693a:	85 c0                	test   eax,eax
c000693c:	75 09                	jne    c0006947 <f_rename+0x2d4>
c000693e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006942:	e8 0d da ff ff       	call   c0004354 <sync_fs>
c0006947:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000694b:	83 ec 0c             	sub    esp,0xc
c000694e:	53                   	push   ebx
c000694f:	e8 40 19 00 00       	call   c0008294 <ff_memfree>
c0006954:	83 c4 10             	add    esp,0x10
c0006957:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000695b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006961:	5b                   	pop    ebx
c0006962:	5e                   	pop    esi
c0006963:	5f                   	pop    edi
c0006964:	5d                   	pop    ebp
c0006965:	c3                   	ret    

c0006966 <f_chmod>:
c0006966:	57                   	push   edi
c0006967:	b9 02 00 00 00       	mov    ecx,0x2
c000696c:	56                   	push   esi
c000696d:	53                   	push   ebx
c000696e:	83 ec 60             	sub    esp,0x60
c0006971:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006975:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006979:	8d 54 24 10          	lea    edx,[esp+0x10]
c000697d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006981:	e8 55 bb ff ff       	call   c00024db <mount_volume>
c0006986:	85 c0                	test   eax,eax
c0006988:	0f 85 af 00 00 00    	jne    c0006a3d <f_chmod+0xd7>
c000698e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006992:	83 ec 0c             	sub    esp,0xc
c0006995:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006999:	68 60 04 00 00       	push   0x460
c000699e:	e8 db 18 00 00       	call   c000827e <ff_memalloc>
c00069a3:	83 c4 10             	add    esp,0x10
c00069a6:	89 c6                	mov    esi,eax
c00069a8:	b8 11 00 00 00       	mov    eax,0x11
c00069ad:	85 f6                	test   esi,esi
c00069af:	0f 84 88 00 00 00    	je     c0006a3d <f_chmod+0xd7>
c00069b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069b9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00069bf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00069c2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069c5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069c9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069cd:	e8 7f e2 ff ff       	call   c0004c51 <follow_path>
c00069d2:	85 c0                	test   eax,eax
c00069d4:	75 53                	jne    c0006a29 <f_chmod+0xc3>
c00069d6:	b8 06 00 00 00       	mov    eax,0x6
c00069db:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069e0:	75 47                	jne    c0006a29 <f_chmod+0xc3>
c00069e2:	89 f9                	mov    ecx,edi
c00069e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069e8:	83 e1 27             	and    ecx,0x27
c00069eb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069ee:	75 1d                	jne    c0006a0d <f_chmod+0xa7>
c00069f0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069f3:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069f6:	21 cb                	and    ebx,ecx
c00069f8:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069fb:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a02:	e8 a2 cf ff ff       	call   c00039a9 <store_xdir>
c0006a07:	85 c0                	test   eax,eax
c0006a09:	75 1e                	jne    c0006a29 <f_chmod+0xc3>
c0006a0b:	eb 13                	jmp    c0006a20 <f_chmod+0xba>
c0006a0d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006a11:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a14:	21 cb                	and    ebx,ecx
c0006a16:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a19:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006a1c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a24:	e8 2b d9 ff ff       	call   c0004354 <sync_fs>
c0006a29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a2d:	83 ec 0c             	sub    esp,0xc
c0006a30:	56                   	push   esi
c0006a31:	e8 5e 18 00 00       	call   c0008294 <ff_memfree>
c0006a36:	83 c4 10             	add    esp,0x10
c0006a39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a3d:	83 c4 60             	add    esp,0x60
c0006a40:	5b                   	pop    ebx
c0006a41:	5e                   	pop    esi
c0006a42:	5f                   	pop    edi
c0006a43:	c3                   	ret    

c0006a44 <f_utime>:
c0006a44:	56                   	push   esi
c0006a45:	b9 02 00 00 00       	mov    ecx,0x2
c0006a4a:	53                   	push   ebx
c0006a4b:	83 ec 64             	sub    esp,0x64
c0006a4e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a52:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a56:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a5a:	e8 7c ba ff ff       	call   c00024db <mount_volume>
c0006a5f:	85 c0                	test   eax,eax
c0006a61:	0f 85 b5 00 00 00    	jne    c0006b1c <f_utime+0xd8>
c0006a67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a6b:	83 ec 0c             	sub    esp,0xc
c0006a6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a72:	68 60 04 00 00       	push   0x460
c0006a77:	e8 02 18 00 00       	call   c000827e <ff_memalloc>
c0006a7c:	83 c4 10             	add    esp,0x10
c0006a7f:	89 c3                	mov    ebx,eax
c0006a81:	b8 11 00 00 00       	mov    eax,0x11
c0006a86:	85 db                	test   ebx,ebx
c0006a88:	0f 84 8e 00 00 00    	je     c0006b1c <f_utime+0xd8>
c0006a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a92:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a98:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a9b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a9e:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006aa2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aa6:	e8 a6 e1 ff ff       	call   c0004c51 <follow_path>
c0006aab:	85 c0                	test   eax,eax
c0006aad:	75 59                	jne    c0006b08 <f_utime+0xc4>
c0006aaf:	b8 06 00 00 00       	mov    eax,0x6
c0006ab4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ab9:	75 4d                	jne    c0006b08 <f_utime+0xc4>
c0006abb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006abf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ac3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ac7:	c1 e2 10             	shl    edx,0x10
c0006aca:	09 ca                	or     edx,ecx
c0006acc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006acf:	75 1a                	jne    c0006aeb <f_utime+0xa7>
c0006ad1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006ad4:	83 c0 0c             	add    eax,0xc
c0006ad7:	e8 e5 af ff ff       	call   c0001ac1 <st_dword>
c0006adc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ae0:	e8 c4 ce ff ff       	call   c00039a9 <store_xdir>
c0006ae5:	85 c0                	test   eax,eax
c0006ae7:	75 1f                	jne    c0006b08 <f_utime+0xc4>
c0006ae9:	eb 14                	jmp    c0006aff <f_utime+0xbb>
c0006aeb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aef:	83 c0 16             	add    eax,0x16
c0006af2:	e8 ca af ff ff       	call   c0001ac1 <st_dword>
c0006af7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006afb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b03:	e8 4c d8 ff ff       	call   c0004354 <sync_fs>
c0006b08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b0c:	83 ec 0c             	sub    esp,0xc
c0006b0f:	53                   	push   ebx
c0006b10:	e8 7f 17 00 00       	call   c0008294 <ff_memfree>
c0006b15:	83 c4 10             	add    esp,0x10
c0006b18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b1c:	83 c4 64             	add    esp,0x64
c0006b1f:	5b                   	pop    ebx
c0006b20:	5e                   	pop    esi
c0006b21:	c3                   	ret    

c0006b22 <f_getlabel>:
c0006b22:	55                   	push   ebp
c0006b23:	31 c9                	xor    ecx,ecx
c0006b25:	57                   	push   edi
c0006b26:	56                   	push   esi
c0006b27:	53                   	push   ebx
c0006b28:	83 ec 6c             	sub    esp,0x6c
c0006b2b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b2f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006b36:	e8 a0 b9 ff ff       	call   c00024db <mount_volume>
c0006b3b:	89 c6                	mov    esi,eax
c0006b3d:	85 c0                	test   eax,eax
c0006b3f:	0f 85 c1 01 00 00    	jne    c0006d06 <f_getlabel+0x1e4>
c0006b45:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b4d:	0f 84 5f 01 00 00    	je     c0006cb2 <f_getlabel+0x190>
c0006b53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b57:	31 d2                	xor    edx,edx
c0006b59:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b5d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b65:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b69:	e8 39 c4 ff ff       	call   c0002fa7 <dir_sdi>
c0006b6e:	85 c0                	test   eax,eax
c0006b70:	0f 85 2d 01 00 00    	jne    c0006ca3 <f_getlabel+0x181>
c0006b76:	ba 01 00 00 00       	mov    edx,0x1
c0006b7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b7f:	e8 33 cc ff ff       	call   c00037b7 <dir_read>
c0006b84:	85 c0                	test   eax,eax
c0006b86:	0f 85 17 01 00 00    	jne    c0006ca3 <f_getlabel+0x181>
c0006b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b90:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b93:	74 09                	je     c0006b9e <f_getlabel+0x7c>
c0006b95:	31 db                	xor    ebx,ebx
c0006b97:	31 c9                	xor    ecx,ecx
c0006b99:	e9 c8 00 00 00       	jmp    c0006c66 <f_getlabel+0x144>
c0006b9e:	31 ed                	xor    ebp,ebp
c0006ba0:	31 db                	xor    ebx,ebx
c0006ba2:	31 ff                	xor    edi,edi
c0006ba4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ba8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006bac:	39 fa                	cmp    edx,edi
c0006bae:	76 4b                	jbe    c0006bfb <f_getlabel+0xd9>
c0006bb0:	47                   	inc    edi
c0006bb1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006bb4:	01 d0                	add    eax,edx
c0006bb6:	e8 90 ae ff ff       	call   c0001a4b <ld_word>
c0006bbb:	66 85 ed             	test   bp,bp
c0006bbe:	75 0d                	jne    c0006bcd <f_getlabel+0xab>
c0006bc0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006bc6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006bcb:	76 28                	jbe    c0006bf5 <f_getlabel+0xd3>
c0006bcd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bd4:	89 e9                	mov    ecx,ebp
c0006bd6:	01 da                	add    edx,ebx
c0006bd8:	c1 e1 10             	shl    ecx,0x10
c0006bdb:	0f b7 c0             	movzx  eax,ax
c0006bde:	09 c8                	or     eax,ecx
c0006be0:	b9 04 00 00 00       	mov    ecx,0x4
c0006be5:	e8 01 b0 ff ff       	call   c0001beb <put_utf>
c0006bea:	84 c0                	test   al,al
c0006bec:	74 0b                	je     c0006bf9 <f_getlabel+0xd7>
c0006bee:	0f b6 c0             	movzx  eax,al
c0006bf1:	01 c3                	add    ebx,eax
c0006bf3:	31 c0                	xor    eax,eax
c0006bf5:	89 c5                	mov    ebp,eax
c0006bf7:	eb ab                	jmp    c0006ba4 <f_getlabel+0x82>
c0006bf9:	31 db                	xor    ebx,ebx
c0006bfb:	66 85 ed             	test   bp,bp
c0006bfe:	74 02                	je     c0006c02 <f_getlabel+0xe0>
c0006c00:	31 db                	xor    ebx,ebx
c0006c02:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c09:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006c0d:	e9 a0 00 00 00       	jmp    c0006cb2 <f_getlabel+0x190>
c0006c12:	83 ff 0b             	cmp    edi,0xb
c0006c15:	74 11                	je     c0006c28 <f_getlabel+0x106>
c0006c17:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006c1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c20:	8d 79 02             	lea    edi,[ecx+0x2]
c0006c23:	c1 e0 08             	shl    eax,0x8
c0006c26:	09 c2                	or     edx,eax
c0006c28:	0f b7 d2             	movzx  edx,dx
c0006c2b:	50                   	push   eax
c0006c2c:	50                   	push   eax
c0006c2d:	68 b5 01 00 00       	push   0x1b5
c0006c32:	52                   	push   edx
c0006c33:	e8 03 17 00 00       	call   c000833b <ff_oem2uni>
c0006c38:	83 c4 10             	add    esp,0x10
c0006c3b:	66 85 c0             	test   ax,ax
c0006c3e:	74 46                	je     c0006c86 <f_getlabel+0x164>
c0006c40:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c47:	0f b7 c0             	movzx  eax,ax
c0006c4a:	01 da                	add    edx,ebx
c0006c4c:	b9 04 00 00 00       	mov    ecx,0x4
c0006c51:	e8 95 af ff ff       	call   c0001beb <put_utf>
c0006c56:	84 c0                	test   al,al
c0006c58:	74 2c                	je     c0006c86 <f_getlabel+0x164>
c0006c5a:	0f b6 c0             	movzx  eax,al
c0006c5d:	01 c3                	add    ebx,eax
c0006c5f:	83 ff 0b             	cmp    edi,0xb
c0006c62:	74 24                	je     c0006c88 <f_getlabel+0x166>
c0006c64:	89 f9                	mov    ecx,edi
c0006c66:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c6a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c6d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c72:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c7b:	e8 9f ae ff ff       	call   c0001b1f <dbc_1st>
c0006c80:	85 c0                	test   eax,eax
c0006c82:	74 a4                	je     c0006c28 <f_getlabel+0x106>
c0006c84:	eb 8c                	jmp    c0006c12 <f_getlabel+0xf0>
c0006c86:	31 db                	xor    ebx,ebx
c0006c88:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c8f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c92:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c99:	74 17                	je     c0006cb2 <f_getlabel+0x190>
c0006c9b:	4b                   	dec    ebx
c0006c9c:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c9f:	74 ee                	je     c0006c8f <f_getlabel+0x16d>
c0006ca1:	eb 0f                	jmp    c0006cb2 <f_getlabel+0x190>
c0006ca3:	83 f8 04             	cmp    eax,0x4
c0006ca6:	75 5c                	jne    c0006d04 <f_getlabel+0x1e2>
c0006ca8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006caf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006cb2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006cba:	74 4a                	je     c0006d06 <f_getlabel+0x1e4>
c0006cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cc0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006cc3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006cc6:	e8 5e b5 ff ff       	call   c0002229 <move_window>
c0006ccb:	89 c6                	mov    esi,eax
c0006ccd:	85 c0                	test   eax,eax
c0006ccf:	75 35                	jne    c0006d06 <f_getlabel+0x1e4>
c0006cd1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006cd5:	b8 43 00 00 00       	mov    eax,0x43
c0006cda:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006cdc:	80 f9 03             	cmp    cl,0x3
c0006cdf:	74 0f                	je     c0006cf0 <f_getlabel+0x1ce>
c0006ce1:	31 c0                	xor    eax,eax
c0006ce3:	80 f9 04             	cmp    cl,0x4
c0006ce6:	0f 94 c0             	sete   al
c0006ce9:	48                   	dec    eax
c0006cea:	83 e0 c3             	and    eax,0xffffffc3
c0006ced:	83 c0 64             	add    eax,0x64
c0006cf0:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cf4:	e8 5f ad ff ff       	call   c0001a58 <ld_dword>
c0006cf9:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006d00:	89 07                	mov    DWORD PTR [edi],eax
c0006d02:	eb 02                	jmp    c0006d06 <f_getlabel+0x1e4>
c0006d04:	89 c6                	mov    esi,eax
c0006d06:	83 c4 6c             	add    esp,0x6c
c0006d09:	89 f0                	mov    eax,esi
c0006d0b:	5b                   	pop    ebx
c0006d0c:	5e                   	pop    esi
c0006d0d:	5f                   	pop    edi
c0006d0e:	5d                   	pop    ebp
c0006d0f:	c3                   	ret    

c0006d10 <f_setlabel>:
c0006d10:	56                   	push   esi
c0006d11:	b9 02 00 00 00       	mov    ecx,0x2
c0006d16:	53                   	push   ebx
c0006d17:	83 ec 74             	sub    esp,0x74
c0006d1a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006d1e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d25:	e8 b1 b7 ff ff       	call   c00024db <mount_volume>
c0006d2a:	89 c6                	mov    esi,eax
c0006d2c:	85 c0                	test   eax,eax
c0006d2e:	0f 85 41 02 00 00    	jne    c0006f75 <f_setlabel+0x265>
c0006d34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d38:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d3b:	0f 85 8e 00 00 00    	jne    c0006dcf <f_setlabel+0xbf>
c0006d41:	b9 16 00 00 00       	mov    ecx,0x16
c0006d46:	31 d2                	xor    edx,edx
c0006d48:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d4c:	31 db                	xor    ebx,ebx
c0006d4e:	e8 8c ad ff ff       	call   c0001adf <mem_set>
c0006d53:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d5a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d5d:	0f 86 0a 01 00 00    	jbe    c0006e6d <f_setlabel+0x15d>
c0006d63:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d6a:	e8 b6 ad ff ff       	call   c0001b25 <tchar2uni>
c0006d6f:	89 c6                	mov    esi,eax
c0006d71:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d76:	76 2a                	jbe    c0006da2 <f_setlabel+0x92>
c0006d78:	83 f8 ff             	cmp    eax,0xffffffff
c0006d7b:	74 05                	je     c0006d82 <f_setlabel+0x72>
c0006d7d:	83 fb 09             	cmp    ebx,0x9
c0006d80:	76 0a                	jbe    c0006d8c <f_setlabel+0x7c>
c0006d82:	be 06 00 00 00       	mov    esi,0x6
c0006d87:	e9 e9 01 00 00       	jmp    c0006f75 <f_setlabel+0x265>
c0006d8c:	89 c2                	mov    edx,eax
c0006d8e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d92:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d95:	c1 ea 10             	shr    edx,0x10
c0006d98:	01 c8                	add    eax,ecx
c0006d9a:	43                   	inc    ebx
c0006d9b:	e8 1d ad ff ff       	call   c0001abd <st_word>
c0006da0:	eb 04                	jmp    c0006da6 <f_setlabel+0x96>
c0006da2:	85 c0                	test   eax,eax
c0006da4:	74 dc                	je     c0006d82 <f_setlabel+0x72>
c0006da6:	89 f2                	mov    edx,esi
c0006da8:	b8 77 5f 02 c0       	mov    eax,0xc0025f77
c0006dad:	e8 5b ad ff ff       	call   c0001b0d <chk_chr>
c0006db2:	85 c0                	test   eax,eax
c0006db4:	75 cc                	jne    c0006d82 <f_setlabel+0x72>
c0006db6:	83 fb 0a             	cmp    ebx,0xa
c0006db9:	77 c7                	ja     c0006d82 <f_setlabel+0x72>
c0006dbb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006dbe:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006dc2:	0f b7 d6             	movzx  edx,si
c0006dc5:	01 c8                	add    eax,ecx
c0006dc7:	43                   	inc    ebx
c0006dc8:	e8 f0 ac ff ff       	call   c0001abd <st_word>
c0006dcd:	eb 84                	jmp    c0006d53 <f_setlabel+0x43>
c0006dcf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dd4:	ba 20 00 00 00       	mov    edx,0x20
c0006dd9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ddd:	31 db                	xor    ebx,ebx
c0006ddf:	e8 fb ac ff ff       	call   c0001adf <mem_set>
c0006de4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006deb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006dee:	76 60                	jbe    c0006e50 <f_setlabel+0x140>
c0006df0:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006df7:	e8 29 ad ff ff       	call   c0001b25 <tchar2uni>
c0006dfc:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e01:	0f 87 7b ff ff ff    	ja     c0006d82 <f_setlabel+0x72>
c0006e07:	83 ec 0c             	sub    esp,0xc
c0006e0a:	50                   	push   eax
c0006e0b:	e8 97 15 00 00       	call   c00083a7 <ff_wtoupper>
c0006e10:	5a                   	pop    edx
c0006e11:	59                   	pop    ecx
c0006e12:	68 b5 01 00 00       	push   0x1b5
c0006e17:	50                   	push   eax
c0006e18:	e8 8e 14 00 00       	call   c00082ab <ff_uni2oem>
c0006e1d:	83 c4 10             	add    esp,0x10
c0006e20:	89 c6                	mov    esi,eax
c0006e22:	66 85 c0             	test   ax,ax
c0006e25:	0f 84 57 ff ff ff    	je     c0006d82 <f_setlabel+0x72>
c0006e2b:	0f b7 d0             	movzx  edx,ax
c0006e2e:	b8 70 5f 02 c0       	mov    eax,0xc0025f70
c0006e33:	e8 d5 ac ff ff       	call   c0001b0d <chk_chr>
c0006e38:	85 c0                	test   eax,eax
c0006e3a:	0f 85 42 ff ff ff    	jne    c0006d82 <f_setlabel+0x72>
c0006e40:	66 81 fe ff 00       	cmp    si,0xff
c0006e45:	0f 87 14 01 00 00    	ja     c0006f5f <f_setlabel+0x24f>
c0006e4b:	e9 fa 00 00 00       	jmp    c0006f4a <f_setlabel+0x23a>
c0006e50:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e55:	0f 84 27 ff ff ff    	je     c0006d82 <f_setlabel+0x72>
c0006e5b:	85 db                	test   ebx,ebx
c0006e5d:	74 0e                	je     c0006e6d <f_setlabel+0x15d>
c0006e5f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e62:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e67:	75 04                	jne    c0006e6d <f_setlabel+0x15d>
c0006e69:	89 c3                	mov    ebx,eax
c0006e6b:	eb ee                	jmp    c0006e5b <f_setlabel+0x14b>
c0006e6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e71:	31 d2                	xor    edx,edx
c0006e73:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e77:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e7f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e83:	e8 1f c1 ff ff       	call   c0002fa7 <dir_sdi>
c0006e88:	89 c6                	mov    esi,eax
c0006e8a:	85 c0                	test   eax,eax
c0006e8c:	0f 85 e3 00 00 00    	jne    c0006f75 <f_setlabel+0x265>
c0006e92:	ba 01 00 00 00       	mov    edx,0x1
c0006e97:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e9b:	e8 17 c9 ff ff       	call   c00037b7 <dir_read>
c0006ea0:	85 c0                	test   eax,eax
c0006ea2:	75 21                	jne    c0006ec5 <f_setlabel+0x1b5>
c0006ea4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ea8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eac:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006eaf:	74 5d                	je     c0006f0e <f_setlabel+0x1fe>
c0006eb1:	85 db                	test   ebx,ebx
c0006eb3:	74 0b                	je     c0006ec0 <f_setlabel+0x1b0>
c0006eb5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eba:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ebe:	eb 70                	jmp    c0006f30 <f_setlabel+0x220>
c0006ec0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006ec3:	eb 70                	jmp    c0006f35 <f_setlabel+0x225>
c0006ec5:	83 f8 04             	cmp    eax,0x4
c0006ec8:	75 7c                	jne    c0006f46 <f_setlabel+0x236>
c0006eca:	85 db                	test   ebx,ebx
c0006ecc:	0f 84 a3 00 00 00    	je     c0006f75 <f_setlabel+0x265>
c0006ed2:	ba 01 00 00 00       	mov    edx,0x1
c0006ed7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006edb:	e8 51 ca ff ff       	call   c0003931 <dir_alloc>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	85 c0                	test   eax,eax
c0006ee4:	0f 85 8b 00 00 00    	jne    c0006f75 <f_setlabel+0x265>
c0006eea:	31 d2                	xor    edx,edx
c0006eec:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ef0:	b9 20 00 00 00       	mov    ecx,0x20
c0006ef5:	e8 e5 ab ff ff       	call   c0001adf <mem_set>
c0006efa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006efe:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f01:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f05:	75 18                	jne    c0006f1f <f_setlabel+0x20f>
c0006f07:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006f0a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f0e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006f11:	b9 16 00 00 00       	mov    ecx,0x16
c0006f16:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f1a:	83 c0 02             	add    eax,0x2
c0006f1d:	eb 9b                	jmp    c0006eba <f_setlabel+0x1aa>
c0006f1f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006f23:	b9 0b 00 00 00       	mov    ecx,0xb
c0006f28:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006f2c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f30:	e8 95 ab ff ff       	call   c0001aca <mem_cpy>
c0006f35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f39:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f41:	e8 0e d4 ff ff       	call   c0004354 <sync_fs>
c0006f46:	89 c6                	mov    esi,eax
c0006f48:	eb 2b                	jmp    c0006f75 <f_setlabel+0x265>
c0006f4a:	83 fb 0a             	cmp    ebx,0xa
c0006f4d:	0f 87 2f fe ff ff    	ja     c0006d82 <f_setlabel+0x72>
c0006f53:	89 f0                	mov    eax,esi
c0006f55:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f59:	43                   	inc    ebx
c0006f5a:	e9 85 fe ff ff       	jmp    c0006de4 <f_setlabel+0xd4>
c0006f5f:	83 fb 09             	cmp    ebx,0x9
c0006f62:	0f 87 1a fe ff ff    	ja     c0006d82 <f_setlabel+0x72>
c0006f68:	89 f0                	mov    eax,esi
c0006f6a:	66 c1 e8 08          	shr    ax,0x8
c0006f6e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f72:	43                   	inc    ebx
c0006f73:	eb de                	jmp    c0006f53 <f_setlabel+0x243>
c0006f75:	89 f0                	mov    eax,esi
c0006f77:	83 c4 74             	add    esp,0x74
c0006f7a:	5b                   	pop    ebx
c0006f7b:	5e                   	pop    esi
c0006f7c:	c3                   	ret    

c0006f7d <f_forward>:
c0006f7d:	55                   	push   ebp
c0006f7e:	57                   	push   edi
c0006f7f:	56                   	push   esi
c0006f80:	53                   	push   ebx
c0006f81:	83 ec 2c             	sub    esp,0x2c
c0006f84:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f88:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f8c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f92:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f96:	89 d8                	mov    eax,ebx
c0006f98:	e8 b1 b1 ff ff       	call   c000214e <validate>
c0006f9d:	89 c5                	mov    ebp,eax
c0006f9f:	85 c0                	test   eax,eax
c0006fa1:	0f 85 aa 01 00 00    	jne    c0007151 <f_forward+0x1d4>
c0006fa7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006fab:	85 ed                	test   ebp,ebp
c0006fad:	0f 85 9e 01 00 00    	jne    c0007151 <f_forward+0x1d4>
c0006fb3:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006fb7:	0f 84 8f 01 00 00    	je     c000714c <f_forward+0x1cf>
c0006fbd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006fc0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006fc3:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006fc6:	bf 00 00 00 00       	mov    edi,0x0
c0006fcb:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006fce:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006fd2:	89 d1                	mov    ecx,edx
c0006fd4:	19 f9                	sbb    ecx,edi
c0006fd6:	0f 83 cf 00 00 00    	jae    c00070ab <f_forward+0x12e>
c0006fdc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fe0:	e9 c6 00 00 00       	jmp    c00070ab <f_forward+0x12e>
c0006fe5:	50                   	push   eax
c0006fe6:	50                   	push   eax
c0006fe7:	6a 00                	push   0x0
c0006fe9:	6a 00                	push   0x0
c0006feb:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fef:	83 c4 10             	add    esp,0x10
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 84 57 01 00 00    	je     c0007151 <f_forward+0x1d4>
c0006ffa:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006ffd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007001:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007004:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007008:	89 d7                	mov    edi,edx
c000700a:	8d 4e ff             	lea    ecx,[esi-0x1]
c000700d:	89 c6                	mov    esi,eax
c000700f:	0f ac fe 09          	shrd   esi,edi,0x9
c0007013:	21 ce                	and    esi,ecx
c0007015:	89 c1                	mov    ecx,eax
c0007017:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000701d:	0f 84 98 00 00 00    	je     c00070bb <f_forward+0x13e>
c0007023:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007027:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000702a:	89 c8                	mov    eax,ecx
c000702c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007030:	e8 af ac ff ff       	call   c0001ce4 <clst2sect>
c0007035:	89 d7                	mov    edi,edx
c0007037:	09 c7                	or     edi,eax
c0007039:	0f 84 9e 00 00 00    	je     c00070dd <f_forward+0x160>
c000703f:	31 ff                	xor    edi,edi
c0007041:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007044:	01 c6                	add    esi,eax
c0007046:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000704a:	11 d7                	adc    edi,edx
c000704c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000704f:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007052:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007056:	39 fa                	cmp    edx,edi
c0007058:	0f 85 a2 00 00 00    	jne    c0007100 <f_forward+0x183>
c000705e:	39 f0                	cmp    eax,esi
c0007060:	0f 85 9a 00 00 00    	jne    c0007100 <f_forward+0x183>
c0007066:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007069:	ba 00 02 00 00       	mov    edx,0x200
c000706e:	25 ff 01 00 00       	and    eax,0x1ff
c0007073:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007077:	29 c2                	sub    edx,eax
c0007079:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000707c:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000707f:	39 d1                	cmp    ecx,edx
c0007081:	76 02                	jbe    c0007085 <f_forward+0x108>
c0007083:	89 d1                	mov    ecx,edx
c0007085:	8d 73 50             	lea    esi,[ebx+0x50]
c0007088:	52                   	push   edx
c0007089:	01 c6                	add    esi,eax
c000708b:	52                   	push   edx
c000708c:	51                   	push   ecx
c000708d:	56                   	push   esi
c000708e:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007092:	83 c4 10             	add    esp,0x10
c0007095:	85 c0                	test   eax,eax
c0007097:	74 44                	je     c00070dd <f_forward+0x160>
c0007099:	31 ff                	xor    edi,edi
c000709b:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000709e:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00070a1:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00070a5:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00070a9:	01 07                	add    DWORD PTR [edi],eax
c00070ab:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00070b0:	0f 85 2f ff ff ff    	jne    c0006fe5 <f_forward+0x68>
c00070b6:	e9 96 00 00 00       	jmp    c0007151 <f_forward+0x1d4>
c00070bb:	85 f6                	test   esi,esi
c00070bd:	0f 85 60 ff ff ff    	jne    c0007023 <f_forward+0xa6>
c00070c3:	89 d7                	mov    edi,edx
c00070c5:	09 c7                	or     edi,eax
c00070c7:	75 05                	jne    c00070ce <f_forward+0x151>
c00070c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00070cc:	eb 0a                	jmp    c00070d8 <f_forward+0x15b>
c00070ce:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00070d1:	89 d8                	mov    eax,ebx
c00070d3:	e8 d9 bc ff ff       	call   c0002db1 <get_fat>
c00070d8:	83 f8 01             	cmp    eax,0x1
c00070db:	77 0b                	ja     c00070e8 <f_forward+0x16b>
c00070dd:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070e1:	bd 02 00 00 00       	mov    ebp,0x2
c00070e6:	eb 69                	jmp    c0007151 <f_forward+0x1d4>
c00070e8:	83 f8 ff             	cmp    eax,0xffffffff
c00070eb:	75 0b                	jne    c00070f8 <f_forward+0x17b>
c00070ed:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070f1:	bd 01 00 00 00       	mov    ebp,0x1
c00070f6:	eb 59                	jmp    c0007151 <f_forward+0x1d4>
c00070f8:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070fb:	e9 23 ff ff ff       	jmp    c0007023 <f_forward+0xa6>
c0007100:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007104:	79 20                	jns    c0007126 <f_forward+0x1a9>
c0007106:	83 ec 0c             	sub    esp,0xc
c0007109:	6a 01                	push   0x1
c000710b:	52                   	push   edx
c000710c:	50                   	push   eax
c000710d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007111:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007115:	50                   	push   eax
c0007116:	e8 fb a8 ff ff       	call   c0001a16 <disk_write>
c000711b:	83 c4 20             	add    esp,0x20
c000711e:	85 c0                	test   eax,eax
c0007120:	75 cb                	jne    c00070ed <f_forward+0x170>
c0007122:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007126:	83 ec 0c             	sub    esp,0xc
c0007129:	6a 01                	push   0x1
c000712b:	57                   	push   edi
c000712c:	56                   	push   esi
c000712d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007131:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007135:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007139:	50                   	push   eax
c000713a:	e8 c1 a8 ff ff       	call   c0001a00 <disk_read>
c000713f:	83 c4 20             	add    esp,0x20
c0007142:	85 c0                	test   eax,eax
c0007144:	0f 84 1c ff ff ff    	je     c0007066 <f_forward+0xe9>
c000714a:	eb a1                	jmp    c00070ed <f_forward+0x170>
c000714c:	bd 07 00 00 00       	mov    ebp,0x7
c0007151:	83 c4 2c             	add    esp,0x2c
c0007154:	89 e8                	mov    eax,ebp
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	5f                   	pop    edi
c0007159:	5d                   	pop    ebp
c000715a:	c3                   	ret    

c000715b <f_mkfs>:
c000715b:	55                   	push   ebp
c000715c:	57                   	push   edi
c000715d:	56                   	push   esi
c000715e:	53                   	push   ebx
c000715f:	bb 0b 00 00 00       	mov    ebx,0xb
c0007164:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000716a:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007171:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007178:	e8 b0 ae ff ff       	call   c000202d <get_ldnumber>
c000717d:	85 c0                	test   eax,eax
c000717f:	0f 88 ec 10 00 00    	js     c0008271 <f_mkfs+0x1116>
c0007185:	8b 14 85 20 a6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd59e0]
c000718c:	85 d2                	test   edx,edx
c000718e:	74 03                	je     c0007193 <f_mkfs+0x38>
c0007190:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007193:	85 f6                	test   esi,esi
c0007195:	75 05                	jne    c000719c <f_mkfs+0x41>
c0007197:	be 60 5f 02 c0       	mov    esi,0xc0025f60
c000719c:	83 ec 0c             	sub    esp,0xc
c000719f:	0f b6 c0             	movzx  eax,al
c00071a2:	bb 03 00 00 00       	mov    ebx,0x3
c00071a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00071ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071af:	e8 49 a8 ff ff       	call   c00019fd <disk_initialize>
c00071b4:	83 c4 10             	add    esp,0x10
c00071b7:	a8 01                	test   al,0x1
c00071b9:	0f 85 b2 10 00 00    	jne    c0008271 <f_mkfs+0x1116>
c00071bf:	bb 0a 00 00 00       	mov    ebx,0xa
c00071c4:	a8 04                	test   al,0x4
c00071c6:	0f 85 a5 10 00 00    	jne    c0008271 <f_mkfs+0x1116>
c00071cc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00071cf:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00071d3:	85 c0                	test   eax,eax
c00071d5:	75 20                	jne    c00071f7 <f_mkfs+0x9c>
c00071d7:	51                   	push   ecx
c00071d8:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071dc:	50                   	push   eax
c00071dd:	6a 03                	push   0x3
c00071df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071e3:	e8 44 a8 ff ff       	call   c0001a2c <disk_ioctl>
c00071e8:	83 c4 10             	add    esp,0x10
c00071eb:	85 c0                	test   eax,eax
c00071ed:	74 08                	je     c00071f7 <f_mkfs+0x9c>
c00071ef:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071f7:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071fb:	8d 42 ff             	lea    eax,[edx-0x1]
c00071fe:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007203:	77 04                	ja     c0007209 <f_mkfs+0xae>
c0007205:	85 c2                	test   edx,eax
c0007207:	74 08                	je     c0007211 <f_mkfs+0xb6>
c0007209:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007211:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007214:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007218:	48                   	dec    eax
c0007219:	3c 01                	cmp    al,0x1
c000721b:	76 05                	jbe    c0007222 <f_mkfs+0xc7>
c000721d:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007222:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007225:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007229:	48                   	dec    eax
c000722a:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000722f:	77 07                	ja     c0007238 <f_mkfs+0xdd>
c0007231:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007236:	74 08                	je     c0007240 <f_mkfs+0xe5>
c0007238:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007240:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007243:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007249:	77 07                	ja     c0007252 <f_mkfs+0xf7>
c000724b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000724e:	85 d8                	test   eax,ebx
c0007250:	74 02                	je     c0007254 <f_mkfs+0xf9>
c0007252:	31 db                	xor    ebx,ebx
c0007254:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000725f:	77 0a                	ja     c000726b <f_mkfs+0x110>
c0007261:	bb 11 00 00 00       	mov    ebx,0x11
c0007266:	e9 06 10 00 00       	jmp    c0008271 <f_mkfs+0x1116>
c000726b:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007272:	8b 36                	mov    esi,DWORD PTR [esi]
c0007274:	85 ed                	test   ebp,ebp
c0007276:	75 1e                	jne    c0007296 <f_mkfs+0x13b>
c0007278:	83 ec 0c             	sub    esp,0xc
c000727b:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007282:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007287:	50                   	push   eax
c0007288:	e8 f1 0f 00 00       	call   c000827e <ff_memalloc>
c000728d:	83 c4 10             	add    esp,0x10
c0007290:	89 c5                	mov    ebp,eax
c0007292:	85 c0                	test   eax,eax
c0007294:	74 cb                	je     c0007261 <f_mkfs+0x106>
c0007296:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000729e:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00072a6:	52                   	push   edx
c00072a7:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00072ab:	50                   	push   eax
c00072ac:	6a 01                	push   0x1
c00072ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b2:	e8 75 a7 ff ff       	call   c0001a2c <disk_ioctl>
c00072b7:	83 c4 10             	add    esp,0x10
c00072ba:	85 c0                	test   eax,eax
c00072bc:	0f 85 4a 0f 00 00    	jne    c000820c <f_mkfs+0x10b1>
c00072c2:	89 f1                	mov    ecx,esi
c00072c4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00072cc:	83 e1 0f             	and    ecx,0xf
c00072cf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072d7:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072db:	83 e6 08             	and    esi,0x8
c00072de:	75 56                	jne    c0007336 <f_mkfs+0x1db>
c00072e0:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072e4:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072e8:	83 ff 00             	cmp    edi,0x0
c00072eb:	76 20                	jbe    c000730d <f_mkfs+0x1b2>
c00072ed:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072f2:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072fa:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007300:	83 d7 ff             	adc    edi,0xffffffff
c0007303:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007307:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000730b:	eb 21                	jmp    c000732e <f_mkfs+0x1d3>
c000730d:	ba 3f 00 00 00       	mov    edx,0x3f
c0007312:	39 f2                	cmp    edx,esi
c0007314:	19 f8                	sbb    eax,edi
c0007316:	73 1e                	jae    c0007336 <f_mkfs+0x1db>
c0007318:	83 c6 c1             	add    esi,0xffffffc1
c000731b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007323:	83 d7 ff             	adc    edi,0xffffffff
c0007326:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000732a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000732e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007336:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000733a:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000733e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007341:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007345:	31 c0                	xor    eax,eax
c0007347:	ba 7f 00 00 00       	mov    edx,0x7f
c000734c:	89 c7                	mov    edi,eax
c000734e:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007351:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007355:	0f 83 c5 0a 00 00    	jae    c0007e20 <f_mkfs+0xcc5>
c000735b:	89 df                	mov    edi,ebx
c000735d:	c1 ef 09             	shr    edi,0x9
c0007360:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007364:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000736b:	c1 ef 09             	shr    edi,0x9
c000736e:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007373:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007377:	74 29                	je     c00073a2 <f_mkfs+0x247>
c0007379:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000737f:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007384:	0f 97 c2             	seta   dl
c0007387:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c000738a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000738e:	0f 92 c0             	setb   al
c0007391:	08 c2                	or     dl,al
c0007393:	75 5b                	jne    c00073f0 <f_mkfs+0x295>
c0007395:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007399:	83 e0 07             	and    eax,0x7
c000739c:	3c 04                	cmp    al,0x4
c000739e:	74 50                	je     c00073f0 <f_mkfs+0x295>
c00073a0:	eb 1b                	jmp    c00073bd <f_mkfs+0x262>
c00073a2:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00073a7:	0f 87 73 0a 00 00    	ja     c0007e20 <f_mkfs+0xcc5>
c00073ad:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073b3:	76 08                	jbe    c00073bd <f_mkfs+0x262>
c00073b5:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00073bd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073c1:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00073c5:	83 e0 01             	and    eax,0x1
c00073c8:	80 e1 02             	and    cl,0x2
c00073cb:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00073cf:	74 0d                	je     c00073de <f_mkfs+0x283>
c00073d1:	84 c0                	test   al,al
c00073d3:	0f 84 53 09 00 00    	je     c0007d2c <f_mkfs+0xbd1>
c00073d9:	e9 12 08 00 00       	jmp    c0007bf0 <f_mkfs+0xa95>
c00073de:	bb 13 00 00 00       	mov    ebx,0x13
c00073e3:	84 c0                	test   al,al
c00073e5:	0f 85 05 08 00 00    	jne    c0007bf0 <f_mkfs+0xa95>
c00073eb:	e9 39 0e 00 00       	jmp    c0008229 <f_mkfs+0x10ce>
c00073f0:	31 c0                	xor    eax,eax
c00073f2:	ba ff 0f 00 00       	mov    edx,0xfff
c00073f7:	89 c7                	mov    edi,eax
c00073f9:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073fc:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007400:	0f 83 1a 0a 00 00    	jae    c0007e20 <f_mkfs+0xcc5>
c0007406:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000740c:	77 39                	ja     c0007447 <f_mkfs+0x2ec>
c000740e:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007413:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000741b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000741e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007422:	73 08                	jae    c000742c <f_mkfs+0x2d1>
c0007424:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000742c:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007431:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007434:	b8 00 00 00 00       	mov    eax,0x0
c0007439:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000743d:	73 08                	jae    c0007447 <f_mkfs+0x2ec>
c000743f:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000744b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000744f:	83 c0 20             	add    eax,0x20
c0007452:	83 d2 00             	adc    edx,0x0
c0007455:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007459:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000745d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007461:	31 d2                	xor    edx,edx
c0007463:	31 ff                	xor    edi,edi
c0007465:	52                   	push   edx
c0007466:	89 fb                	mov    ebx,edi
c0007468:	50                   	push   eax
c0007469:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000746d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007471:	e8 26 c1 01 00       	call   c002359c <__udivdi3>
c0007476:	83 c4 10             	add    esp,0x10
c0007479:	c1 e0 02             	shl    eax,0x2
c000747c:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007480:	05 07 02 00 00       	add    eax,0x207
c0007485:	89 f1                	mov    ecx,esi
c0007487:	c1 e8 09             	shr    eax,0x9
c000748a:	83 c1 ff             	add    ecx,0xffffffff
c000748d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007491:	83 d3 ff             	adc    ebx,0xffffffff
c0007494:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007498:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c000749c:	31 d2                	xor    edx,edx
c000749e:	01 c8                	add    eax,ecx
c00074a0:	11 da                	adc    edx,ebx
c00074a2:	89 c1                	mov    ecx,eax
c00074a4:	f7 de                	neg    esi
c00074a6:	89 d0                	mov    eax,edx
c00074a8:	83 d7 00             	adc    edi,0x0
c00074ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00074af:	f7 df                	neg    edi
c00074b1:	21 f1                	and    ecx,esi
c00074b3:	21 f8                	and    eax,edi
c00074b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00074b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00074bd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00074c1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00074c5:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00074c9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074cc:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00074d0:	0f ac d0 01          	shrd   eax,edx,0x1
c00074d4:	89 df                	mov    edi,ebx
c00074d6:	d1 ea                	shr    edx,1
c00074d8:	39 c1                	cmp    ecx,eax
c00074da:	19 d7                	sbb    edi,edx
c00074dc:	0f 83 3e 09 00 00    	jae    c0007e20 <f_mkfs+0xcc5>
c00074e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074e6:	31 d2                	xor    edx,edx
c00074e8:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074f0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074f4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074f7:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074fb:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074ff:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007503:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007507:	83 f8 0f             	cmp    eax,0xf
c000750a:	0f 86 10 09 00 00    	jbe    c0007e20 <f_mkfs+0xcc5>
c0007510:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007518:	0f 87 02 09 00 00    	ja     c0007e20 <f_mkfs+0xcc5>
c000751e:	31 d2                	xor    edx,edx
c0007520:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007524:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000752c:	83 c0 07             	add    eax,0x7
c000752f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007537:	c1 e8 03             	shr    eax,0x3
c000753a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007541:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007545:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007549:	c1 e0 09             	shl    eax,0x9
c000754c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007550:	48                   	dec    eax
c0007551:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007555:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007559:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000755d:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007561:	31 d2                	xor    edx,edx
c0007563:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007567:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000756e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007572:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007577:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000757b:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000757f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007583:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007587:	31 ff                	xor    edi,edi
c0007589:	31 f6                	xor    esi,esi
c000758b:	31 db                	xor    ebx,ebx
c000758d:	85 ff                	test   edi,edi
c000758f:	74 05                	je     c0007596 <f_mkfs+0x43b>
c0007591:	4f                   	dec    edi
c0007592:	74 44                	je     c00075d8 <f_mkfs+0x47d>
c0007594:	eb 4f                	jmp    c00075e5 <f_mkfs+0x48a>
c0007596:	83 ec 0c             	sub    esp,0xc
c0007599:	0f b7 c3             	movzx  eax,bx
c000759c:	50                   	push   eax
c000759d:	e8 05 0e 00 00       	call   c00083a7 <ff_wtoupper>
c00075a2:	83 c4 10             	add    esp,0x10
c00075a5:	89 c1                	mov    ecx,eax
c00075a7:	8d 53 01             	lea    edx,[ebx+0x1]
c00075aa:	66 39 c3             	cmp    bx,ax
c00075ad:	75 3e                	jne    c00075ed <f_mkfs+0x492>
c00075af:	be 01 00 00 00       	mov    esi,0x1
c00075b4:	89 df                	mov    edi,ebx
c00075b6:	66 01 f7             	add    di,si
c00075b9:	75 07                	jne    c00075c2 <f_mkfs+0x467>
c00075bb:	83 fe 7f             	cmp    esi,0x7f
c00075be:	77 31                	ja     c00075f1 <f_mkfs+0x496>
c00075c0:	eb 16                	jmp    c00075d8 <f_mkfs+0x47d>
c00075c2:	83 ec 0c             	sub    esp,0xc
c00075c5:	0f b7 ff             	movzx  edi,di
c00075c8:	57                   	push   edi
c00075c9:	e8 d9 0d 00 00       	call   c00083a7 <ff_wtoupper>
c00075ce:	83 c4 10             	add    esp,0x10
c00075d1:	39 c7                	cmp    edi,eax
c00075d3:	75 e6                	jne    c00075bb <f_mkfs+0x460>
c00075d5:	46                   	inc    esi
c00075d6:	eb dc                	jmp    c00075b4 <f_mkfs+0x459>
c00075d8:	31 c0                	xor    eax,eax
c00075da:	89 d9                	mov    ecx,ebx
c00075dc:	4e                   	dec    esi
c00075dd:	0f 95 c0             	setne  al
c00075e0:	43                   	inc    ebx
c00075e1:	89 c7                	mov    edi,eax
c00075e3:	eb 14                	jmp    c00075f9 <f_mkfs+0x49e>
c00075e5:	89 f1                	mov    ecx,esi
c00075e7:	01 f3                	add    ebx,esi
c00075e9:	31 ff                	xor    edi,edi
c00075eb:	eb 0c                	jmp    c00075f9 <f_mkfs+0x49e>
c00075ed:	89 d3                	mov    ebx,edx
c00075ef:	eb 08                	jmp    c00075f9 <f_mkfs+0x49e>
c00075f1:	bf 02 00 00 00       	mov    edi,0x2
c00075f6:	83 c9 ff             	or     ecx,0xffffffff
c00075f9:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007600:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007604:	0f b6 c1             	movzx  eax,cl
c0007607:	e8 3a a9 ff ff       	call   c0001f46 <xsum32>
c000760c:	66 c1 e9 08          	shr    cx,0x8
c0007610:	89 c2                	mov    edx,eax
c0007612:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007615:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007619:	0f b7 c1             	movzx  eax,cx
c000761c:	e8 25 a9 ff ff       	call   c0001f46 <xsum32>
c0007621:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007626:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000762a:	66 85 db             	test   bx,bx
c000762d:	74 1f                	je     c000764e <f_mkfs+0x4f3>
c000762f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007632:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007639:	83 c0 02             	add    eax,0x2
c000763c:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007642:	39 c2                	cmp    edx,eax
c0007644:	74 08                	je     c000764e <f_mkfs+0x4f3>
c0007646:	89 04 24             	mov    DWORD PTR [esp],eax
c0007649:	e9 3f ff ff ff       	jmp    c000758d <f_mkfs+0x432>
c000764e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007651:	83 ec 0c             	sub    esp,0xc
c0007654:	05 01 02 00 00       	add    eax,0x201
c0007659:	c1 e8 09             	shr    eax,0x9
c000765c:	50                   	push   eax
c000765d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007661:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007665:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007669:	55                   	push   ebp
c000766a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000766e:	e8 a3 a3 ff ff       	call   c0001a16 <disk_write>
c0007673:	83 c4 20             	add    esp,0x20
c0007676:	85 c0                	test   eax,eax
c0007678:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000767b:	0f 85 8b 0b 00 00    	jne    c000820c <f_mkfs+0x10b1>
c0007681:	89 d0                	mov    eax,edx
c0007683:	31 d2                	xor    edx,edx
c0007685:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007689:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c000768d:	66 85 db             	test   bx,bx
c0007690:	74 04                	je     c0007696 <f_mkfs+0x53b>
c0007692:	31 c0                	xor    eax,eax
c0007694:	eb b0                	jmp    c0007646 <f_mkfs+0x4eb>
c0007696:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000769a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000769e:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00076a2:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00076a8:	31 d2                	xor    edx,edx
c00076aa:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00076b5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076b9:	c1 eb 09             	shr    ebx,0x9
c00076bc:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00076c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076c7:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00076cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00076cf:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076d3:	8d 70 01             	lea    esi,[eax+0x1]
c00076d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076de:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076e5:	31 d2                	xor    edx,edx
c00076e7:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00076ef:	89 c1                	mov    ecx,eax
c00076f1:	89 e8                	mov    eax,ebp
c00076f3:	e8 e7 a3 ff ff       	call   c0001adf <mem_set>
c00076f8:	31 c0                	xor    eax,eax
c00076fa:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076fd:	76 10                	jbe    c000770f <f_mkfs+0x5b4>
c00076ff:	83 fe 07             	cmp    esi,0x7
c0007702:	76 0b                	jbe    c000770f <f_mkfs+0x5b4>
c0007704:	40                   	inc    eax
c0007705:	83 ee 08             	sub    esi,0x8
c0007708:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000770d:	eb eb                	jmp    c00076fa <f_mkfs+0x59f>
c000770f:	b2 01                	mov    dl,0x1
c0007711:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007715:	85 f6                	test   esi,esi
c0007717:	74 0c                	je     c0007725 <f_mkfs+0x5ca>
c0007719:	39 04 24             	cmp    DWORD PTR [esp],eax
c000771c:	76 07                	jbe    c0007725 <f_mkfs+0x5ca>
c000771e:	08 11                	or     BYTE PTR [ecx],dl
c0007720:	4e                   	dec    esi
c0007721:	d1 e2                	shl    edx,1
c0007723:	eb f0                	jmp    c0007715 <f_mkfs+0x5ba>
c0007725:	89 df                	mov    edi,ebx
c0007727:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000772b:	76 04                	jbe    c0007731 <f_mkfs+0x5d6>
c000772d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007731:	83 ec 0c             	sub    esp,0xc
c0007734:	57                   	push   edi
c0007735:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007739:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000773d:	55                   	push   ebp
c000773e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007742:	e8 cf a2 ff ff       	call   c0001a16 <disk_write>
c0007747:	83 c4 20             	add    esp,0x20
c000774a:	85 c0                	test   eax,eax
c000774c:	0f 85 ba 0a 00 00    	jne    c000820c <f_mkfs+0x10b1>
c0007752:	31 d2                	xor    edx,edx
c0007754:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007758:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000775c:	29 fb                	sub    ebx,edi
c000775e:	0f 85 7a ff ff ff    	jne    c00076de <f_mkfs+0x583>
c0007764:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007768:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007770:	31 f6                	xor    esi,esi
c0007772:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007776:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007779:	31 d2                	xor    edx,edx
c000777b:	89 e8                	mov    eax,ebp
c000777d:	e8 5d a3 ff ff       	call   c0001adf <mem_set>
c0007782:	31 c9                	xor    ecx,ecx
c0007784:	85 db                	test   ebx,ebx
c0007786:	75 40                	jne    c00077c8 <f_mkfs+0x66d>
c0007788:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000778d:	89 e8                	mov    eax,ebp
c000778f:	bb 02 00 00 00       	mov    ebx,0x2
c0007794:	e8 28 a3 ff ff       	call   c0001ac1 <st_dword>
c0007799:	8d 45 04             	lea    eax,[ebp+0x4]
c000779c:	83 ca ff             	or     edx,0xffffffff
c000779f:	e8 1d a3 ff ff       	call   c0001ac1 <st_dword>
c00077a4:	b9 08 00 00 00       	mov    ecx,0x8
c00077a9:	eb 1d                	jmp    c00077c8 <f_mkfs+0x66d>
c00077ab:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077ae:	76 3b                	jbe    c00077eb <f_mkfs+0x690>
c00077b0:	43                   	inc    ebx
c00077b1:	83 fe 01             	cmp    esi,0x1
c00077b4:	89 da                	mov    edx,ebx
c00077b6:	77 03                	ja     c00077bb <f_mkfs+0x660>
c00077b8:	83 ca ff             	or     edx,0xffffffff
c00077bb:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00077bf:	4e                   	dec    esi
c00077c0:	e8 fc a2 ff ff       	call   c0001ac1 <st_dword>
c00077c5:	83 c1 04             	add    ecx,0x4
c00077c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00077cc:	85 f6                	test   esi,esi
c00077ce:	75 db                	jne    c00077ab <f_mkfs+0x650>
c00077d0:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00077d5:	77 14                	ja     c00077eb <f_mkfs+0x690>
c00077d7:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077db:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077e2:	85 f6                	test   esi,esi
c00077e4:	74 05                	je     c00077eb <f_mkfs+0x690>
c00077e6:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077e9:	77 dd                	ja     c00077c8 <f_mkfs+0x66d>
c00077eb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077ef:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077f3:	39 cf                	cmp    edi,ecx
c00077f5:	76 02                	jbe    c00077f9 <f_mkfs+0x69e>
c00077f7:	89 cf                	mov    edi,ecx
c00077f9:	83 ec 0c             	sub    esp,0xc
c00077fc:	57                   	push   edi
c00077fd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007801:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007805:	55                   	push   ebp
c0007806:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000780a:	e8 07 a2 ff ff       	call   c0001a16 <disk_write>
c000780f:	83 c4 20             	add    esp,0x20
c0007812:	85 c0                	test   eax,eax
c0007814:	0f 85 f2 09 00 00    	jne    c000820c <f_mkfs+0x10b1>
c000781a:	31 d2                	xor    edx,edx
c000781c:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007820:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007824:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007828:	0f 85 48 ff ff ff    	jne    c0007776 <f_mkfs+0x61b>
c000782e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007831:	31 d2                	xor    edx,edx
c0007833:	89 e8                	mov    eax,ebp
c0007835:	31 ff                	xor    edi,edi
c0007837:	e8 a3 a2 ff ff       	call   c0001adf <mem_set>
c000783c:	8d 45 34             	lea    eax,[ebp+0x34]
c000783f:	ba 02 00 00 00       	mov    edx,0x2
c0007844:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007848:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000784c:	e8 70 a2 ff ff       	call   c0001ac1 <st_dword>
c0007851:	8d 45 38             	lea    eax,[ebp+0x38]
c0007854:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007858:	e8 64 a2 ff ff       	call   c0001ac1 <st_dword>
c000785d:	8d 45 44             	lea    eax,[ebp+0x44]
c0007860:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007864:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007868:	e8 54 a2 ff ff       	call   c0001ac1 <st_dword>
c000786d:	8d 45 54             	lea    eax,[ebp+0x54]
c0007870:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007874:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007878:	83 c2 02             	add    edx,0x2
c000787b:	e8 41 a2 ff ff       	call   c0001ac1 <st_dword>
c0007880:	8d 45 58             	lea    eax,[ebp+0x58]
c0007883:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007887:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000788b:	e8 31 a2 ff ff       	call   c0001ac1 <st_dword>
c0007890:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007894:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007899:	89 c6                	mov    esi,eax
c000789b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000789f:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00078a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00078a6:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00078aa:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00078ad:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00078b1:	39 cb                	cmp    ebx,ecx
c00078b3:	76 02                	jbe    c00078b7 <f_mkfs+0x75c>
c00078b5:	89 cb                	mov    ebx,ecx
c00078b7:	83 ec 0c             	sub    esp,0xc
c00078ba:	53                   	push   ebx
c00078bb:	57                   	push   edi
c00078bc:	56                   	push   esi
c00078bd:	55                   	push   ebp
c00078be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078c2:	e8 4f a1 ff ff       	call   c0001a16 <disk_write>
c00078c7:	83 c4 20             	add    esp,0x20
c00078ca:	85 c0                	test   eax,eax
c00078cc:	0f 85 3a 09 00 00    	jne    c000820c <f_mkfs+0x10b1>
c00078d2:	31 d2                	xor    edx,edx
c00078d4:	b9 00 02 00 00       	mov    ecx,0x200
c00078d9:	89 e8                	mov    eax,ebp
c00078db:	e8 ff a1 ff ff       	call   c0001adf <mem_set>
c00078e0:	31 d2                	xor    edx,edx
c00078e2:	01 de                	add    esi,ebx
c00078e4:	11 d7                	adc    edi,edx
c00078e6:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078e9:	75 bf                	jne    c00078aa <f_mkfs+0x74f>
c00078eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078ef:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078f3:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078fb:	b9 00 02 00 00       	mov    ecx,0x200
c0007900:	31 d2                	xor    edx,edx
c0007902:	89 e8                	mov    eax,ebp
c0007904:	e8 d6 a1 ff ff       	call   c0001adf <mem_set>
c0007909:	b9 0b 00 00 00       	mov    ecx,0xb
c000790e:	ba 40 60 02 c0       	mov    edx,0xc0026040
c0007913:	89 e8                	mov    eax,ebp
c0007915:	e8 b0 a1 ff ff       	call   c0001aca <mem_cpy>
c000791a:	8d 45 40             	lea    eax,[ebp+0x40]
c000791d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007921:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007925:	e8 9a a1 ff ff       	call   c0001ac4 <st_qword>
c000792a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000792e:	8d 45 48             	lea    eax,[ebp+0x48]
c0007931:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007935:	e8 8a a1 ff ff       	call   c0001ac4 <st_qword>
c000793a:	8d 45 50             	lea    eax,[ebp+0x50]
c000793d:	ba 20 00 00 00       	mov    edx,0x20
c0007942:	e8 7a a1 ff ff       	call   c0001ac1 <st_dword>
c0007947:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000794b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000794f:	e8 6d a1 ff ff       	call   c0001ac1 <st_dword>
c0007954:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007958:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000795c:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007960:	e8 5c a1 ff ff       	call   c0001ac1 <st_dword>
c0007965:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007968:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000796c:	e8 50 a1 ff ff       	call   c0001ac1 <st_dword>
c0007971:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007975:	8d 50 02             	lea    edx,[eax+0x2]
c0007978:	8d 45 60             	lea    eax,[ebp+0x60]
c000797b:	e8 41 a1 ff ff       	call   c0001ac1 <st_dword>
c0007980:	8d 45 64             	lea    eax,[ebp+0x64]
c0007983:	ba 00 00 21 50       	mov    edx,0x50210000
c0007988:	e8 34 a1 ff ff       	call   c0001ac1 <st_dword>
c000798d:	8d 45 68             	lea    eax,[ebp+0x68]
c0007990:	ba 00 01 00 00       	mov    edx,0x100
c0007995:	e8 23 a1 ff ff       	call   c0001abd <st_word>
c000799a:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c000799e:	b8 0a 00 00 00       	mov    eax,0xa
c00079a3:	48                   	dec    eax
c00079a4:	74 05                	je     c00079ab <f_mkfs+0x850>
c00079a6:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00079a9:	eb f8                	jmp    c00079a3 <f_mkfs+0x848>
c00079ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079af:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00079b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079b7:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00079bb:	74 05                	je     c00079c2 <f_mkfs+0x867>
c00079bd:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c00079c0:	eb f5                	jmp    c00079b7 <f_mkfs+0x85c>
c00079c2:	8d 45 78             	lea    eax,[ebp+0x78]
c00079c5:	ba eb fe 00 00       	mov    edx,0xfeeb
c00079ca:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c00079d0:	31 db                	xor    ebx,ebx
c00079d2:	e8 e6 a0 ff ff       	call   c0001abd <st_word>
c00079d7:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079dd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00079e5:	e8 d3 a0 ff ff       	call   c0001abd <st_word>
c00079ea:	31 c9                	xor    ecx,ecx
c00079ec:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079ef:	83 f8 01             	cmp    eax,0x1
c00079f2:	76 13                	jbe    c0007a07 <f_mkfs+0x8ac>
c00079f4:	83 f9 70             	cmp    ecx,0x70
c00079f7:	74 0e                	je     c0007a07 <f_mkfs+0x8ac>
c00079f9:	89 da                	mov    edx,ebx
c00079fb:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007a00:	e8 41 a5 ff ff       	call   c0001f46 <xsum32>
c0007a05:	89 c3                	mov    ebx,eax
c0007a07:	41                   	inc    ecx
c0007a08:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a0e:	75 dc                	jne    c00079ec <f_mkfs+0x891>
c0007a10:	89 f0                	mov    eax,esi
c0007a12:	89 fa                	mov    edx,edi
c0007a14:	83 c0 01             	add    eax,0x1
c0007a17:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1b:	83 d2 00             	adc    edx,0x0
c0007a1e:	83 ec 0c             	sub    esp,0xc
c0007a21:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007a25:	6a 01                	push   0x1
c0007a27:	57                   	push   edi
c0007a28:	56                   	push   esi
c0007a29:	55                   	push   ebp
c0007a2a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a2e:	e8 e3 9f ff ff       	call   c0001a16 <disk_write>
c0007a33:	83 c4 20             	add    esp,0x20
c0007a36:	85 c0                	test   eax,eax
c0007a38:	0f 85 ce 07 00 00    	jne    c000820c <f_mkfs+0x10b1>
c0007a3e:	31 d2                	xor    edx,edx
c0007a40:	b9 00 02 00 00       	mov    ecx,0x200
c0007a45:	89 e8                	mov    eax,ebp
c0007a47:	e8 93 a0 ff ff       	call   c0001adf <mem_set>
c0007a4c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a51:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a54:	e8 64 a0 ff ff       	call   c0001abd <st_word>
c0007a59:	89 f0                	mov    eax,esi
c0007a5b:	89 fa                	mov    edx,edi
c0007a5d:	83 c0 09             	add    eax,0x9
c0007a60:	83 d2 00             	adc    edx,0x0
c0007a63:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a66:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a6a:	31 c9                	xor    ecx,ecx
c0007a6c:	41                   	inc    ecx
c0007a6d:	89 da                	mov    edx,ebx
c0007a6f:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a74:	e8 cd a4 ff ff       	call   c0001f46 <xsum32>
c0007a79:	89 c3                	mov    ebx,eax
c0007a7b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a81:	75 e9                	jne    c0007a6c <f_mkfs+0x911>
c0007a83:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a87:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a8b:	83 c0 01             	add    eax,0x1
c0007a8e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a92:	83 d2 00             	adc    edx,0x0
c0007a95:	83 ec 0c             	sub    esp,0xc
c0007a98:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a9c:	6a 01                	push   0x1
c0007a9e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007aa2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007aa6:	55                   	push   ebp
c0007aa7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aab:	e8 66 9f ff ff       	call   c0001a16 <disk_write>
c0007ab0:	83 c4 20             	add    esp,0x20
c0007ab3:	85 c0                	test   eax,eax
c0007ab5:	0f 85 51 07 00 00    	jne    c000820c <f_mkfs+0x10b1>
c0007abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007abf:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ac3:	75 09                	jne    c0007ace <f_mkfs+0x973>
c0007ac5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ac8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007acc:	74 12                	je     c0007ae0 <f_mkfs+0x985>
c0007ace:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ad2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ad6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007ada:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ade:	eb 8a                	jmp    c0007a6a <f_mkfs+0x90f>
c0007ae0:	31 d2                	xor    edx,edx
c0007ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0007ae7:	89 e8                	mov    eax,ebp
c0007ae9:	e8 f1 9f ff ff       	call   c0001adf <mem_set>
c0007aee:	83 c6 0b             	add    esi,0xb
c0007af1:	83 d7 00             	adc    edi,0x0
c0007af4:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007af8:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007afc:	31 c9                	xor    ecx,ecx
c0007afe:	41                   	inc    ecx
c0007aff:	89 da                	mov    edx,ebx
c0007b01:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007b06:	e8 3b a4 ff ff       	call   c0001f46 <xsum32>
c0007b0b:	89 c3                	mov    ebx,eax
c0007b0d:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b13:	75 e9                	jne    c0007afe <f_mkfs+0x9a3>
c0007b15:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b18:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b1c:	83 c6 01             	add    esi,0x1
c0007b1f:	83 d7 00             	adc    edi,0x0
c0007b22:	83 ec 0c             	sub    esp,0xc
c0007b25:	6a 01                	push   0x1
c0007b27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b2f:	55                   	push   ebp
c0007b30:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b34:	e8 dd 9e ff ff       	call   c0001a16 <disk_write>
c0007b39:	83 c4 20             	add    esp,0x20
c0007b3c:	85 c0                	test   eax,eax
c0007b3e:	0f 85 c8 06 00 00    	jne    c000820c <f_mkfs+0x10b1>
c0007b44:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b48:	75 06                	jne    c0007b50 <f_mkfs+0x9f5>
c0007b4a:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b4e:	74 09                	je     c0007b59 <f_mkfs+0x9fe>
c0007b50:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b53:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b57:	eb a3                	jmp    c0007afc <f_mkfs+0x9a1>
c0007b59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b5d:	89 da                	mov    edx,ebx
c0007b5f:	01 e8                	add    eax,ebp
c0007b61:	e8 5b 9f ff ff       	call   c0001ac1 <st_dword>
c0007b66:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b6b:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b73:	75 e4                	jne    c0007b59 <f_mkfs+0x9fe>
c0007b75:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b78:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b7c:	83 c6 02             	add    esi,0x2
c0007b7f:	83 d7 00             	adc    edi,0x0
c0007b82:	83 ec 0c             	sub    esp,0xc
c0007b85:	6a 01                	push   0x1
c0007b87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b8b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b8f:	55                   	push   ebp
c0007b90:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b94:	e8 7d 9e ff ff       	call   c0001a16 <disk_write>
c0007b99:	83 c4 20             	add    esp,0x20
c0007b9c:	85 c0                	test   eax,eax
c0007b9e:	0f 85 68 06 00 00    	jne    c000820c <f_mkfs+0x10b1>
c0007ba4:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007ba9:	74 0d                	je     c0007bb8 <f_mkfs+0xa5d>
c0007bab:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007bb3:	e9 43 fd ff ff       	jmp    c00078fb <f_mkfs+0x7a0>
c0007bb8:	b1 07                	mov    cl,0x7
c0007bba:	e9 e3 05 00 00       	jmp    c00081a2 <f_mkfs+0x1047>
c0007bbf:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007bc4:	0f 85 4f 02 00 00    	jne    c0007e19 <f_mkfs+0xcbe>
c0007bca:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007bcf:	0f 86 22 02 00 00    	jbe    c0007df7 <f_mkfs+0xc9c>
c0007bd5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007bda:	0f 85 81 06 00 00    	jne    c0008261 <f_mkfs+0x1106>
c0007be0:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007be3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007be7:	83 f8 40             	cmp    eax,0x40
c0007bea:	0f 87 51 06 00 00    	ja     c0008241 <f_mkfs+0x10e6>
c0007bf0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bf4:	85 ff                	test   edi,edi
c0007bf6:	75 1c                	jne    c0007c14 <f_mkfs+0xab9>
c0007bf8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bfb:	ba 40 5f 02 c0       	mov    edx,0xc0025f40
c0007c00:	c1 e9 0c             	shr    ecx,0xc
c0007c03:	bf 01 00 00 00       	mov    edi,0x1
c0007c08:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c0b:	66 85 c0             	test   ax,ax
c0007c0e:	0f 85 95 01 00 00    	jne    c0007da9 <f_mkfs+0xc4e>
c0007c14:	31 d2                	xor    edx,edx
c0007c16:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c19:	f7 f7                	div    edi
c0007c1b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007c20:	0f 86 95 01 00 00    	jbe    c0007dbb <f_mkfs+0xc60>
c0007c26:	83 c0 02             	add    eax,0x2
c0007c29:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007c2e:	01 c0                	add    eax,eax
c0007c30:	05 ff 01 00 00       	add    eax,0x1ff
c0007c35:	be 01 00 00 00       	mov    esi,0x1
c0007c3a:	c1 e8 09             	shr    eax,0x9
c0007c3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c41:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c45:	c1 e0 05             	shl    eax,0x5
c0007c48:	c1 e8 09             	shr    eax,0x9
c0007c4b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c4f:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c5a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c5e:	89 f0                	mov    eax,esi
c0007c60:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c64:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c68:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c6c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c70:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c74:	31 d2                	xor    edx,edx
c0007c76:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c7b:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c7f:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c83:	31 db                	xor    ebx,ebx
c0007c85:	01 c8                	add    eax,ecx
c0007c87:	11 da                	adc    edx,ebx
c0007c89:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c8d:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c91:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c95:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c99:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c9d:	f7 da                	neg    edx
c0007c9f:	21 d1                	and    ecx,edx
c0007ca1:	29 d9                	sub    ecx,ebx
c0007ca3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ca8:	0f 85 20 01 00 00    	jne    c0007dce <f_mkfs+0xc73>
c0007cae:	31 db                	xor    ebx,ebx
c0007cb0:	01 ce                	add    esi,ecx
c0007cb2:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007cb6:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007cba:	31 d2                	xor    edx,edx
c0007cbc:	89 f8                	mov    eax,edi
c0007cbe:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007cc2:	c1 e0 04             	shl    eax,0x4
c0007cc5:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007cc9:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ccd:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007cd1:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007cd5:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007cd8:	19 d3                	sbb    ebx,edx
c0007cda:	0f 82 40 01 00 00    	jb     c0007e20 <f_mkfs+0xcc5>
c0007ce0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ce3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ce7:	89 c8                	mov    eax,ecx
c0007ce9:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007cee:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007cf2:	29 f0                	sub    eax,esi
c0007cf4:	29 d0                	sub    eax,edx
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	f7 f7                	div    edi
c0007cfa:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cff:	89 c3                	mov    ebx,eax
c0007d01:	0f 85 b8 fe ff ff    	jne    c0007bbf <f_mkfs+0xa64>
c0007d07:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d0c:	0f 87 1d 01 00 00    	ja     c0007e2f <f_mkfs+0xcd4>
c0007d12:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d17:	0f 85 03 01 00 00    	jne    c0007e20 <f_mkfs+0xcc5>
c0007d1d:	83 ff 01             	cmp    edi,0x1
c0007d20:	0f 86 fa 00 00 00    	jbe    c0007e20 <f_mkfs+0xcc5>
c0007d26:	d1 ef                	shr    edi,1
c0007d28:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007d2c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007d30:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d33:	85 db                	test   ebx,ebx
c0007d35:	75 2d                	jne    c0007d64 <f_mkfs+0xc09>
c0007d37:	89 cb                	mov    ebx,ecx
c0007d39:	ba 50 5f 02 c0       	mov    edx,0xc0025f50
c0007d3e:	c1 eb 11             	shr    ebx,0x11
c0007d41:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d49:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d4c:	66 85 c0             	test   ax,ax
c0007d4f:	74 11                	je     c0007d62 <f_mkfs+0xc07>
c0007d51:	83 c2 02             	add    edx,0x2
c0007d54:	39 d8                	cmp    eax,ebx
c0007d56:	77 0a                	ja     c0007d62 <f_mkfs+0xc07>
c0007d58:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d5c:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d60:	eb e7                	jmp    c0007d49 <f_mkfs+0xbee>
c0007d62:	31 db                	xor    ebx,ebx
c0007d64:	31 d2                	xor    edx,edx
c0007d66:	89 c8                	mov    eax,ecx
c0007d68:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d6c:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d73:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d78:	c1 ea 09             	shr    edx,0x9
c0007d7b:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d80:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d84:	0f 87 96 00 00 00    	ja     c0007e20 <f_mkfs+0xcc5>
c0007d8a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d8e:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d96:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d9a:	be 20 00 00 00       	mov    esi,0x20
c0007d9f:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007da4:	e9 a6 fe ff ff       	jmp    c0007c4f <f_mkfs+0xaf4>
c0007da9:	83 c2 02             	add    edx,0x2
c0007dac:	39 c8                	cmp    eax,ecx
c0007dae:	0f 87 60 fe ff ff    	ja     c0007c14 <f_mkfs+0xab9>
c0007db4:	01 ff                	add    edi,edi
c0007db6:	e9 4d fe ff ff       	jmp    c0007c08 <f_mkfs+0xaad>
c0007dbb:	8d 04 40             	lea    eax,[eax+eax*2]
c0007dbe:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007dc3:	40                   	inc    eax
c0007dc4:	d1 e8                	shr    eax,1
c0007dc6:	83 c0 03             	add    eax,0x3
c0007dc9:	e9 62 fe ff ff       	jmp    c0007c30 <f_mkfs+0xad5>
c0007dce:	31 d2                	xor    edx,edx
c0007dd0:	89 c8                	mov    eax,ecx
c0007dd2:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007dd6:	85 d2                	test   edx,edx
c0007dd8:	74 0c                	je     c0007de6 <f_mkfs+0xc8b>
c0007dda:	49                   	dec    ecx
c0007ddb:	46                   	inc    esi
c0007ddc:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007de1:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007de6:	89 c8                	mov    eax,ecx
c0007de8:	31 d2                	xor    edx,edx
c0007dea:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007dee:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007df2:	e9 c3 fe ff ff       	jmp    c0007cba <f_mkfs+0xb5f>
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	77 31                	ja     c0007e2f <f_mkfs+0xcd4>
c0007dfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e03:	75 1b                	jne    c0007e20 <f_mkfs+0xcc5>
c0007e05:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e0c:	3d 80 00 00 00       	cmp    eax,0x80
c0007e11:	0f 86 d9 fd ff ff    	jbe    c0007bf0 <f_mkfs+0xa95>
c0007e17:	eb 07                	jmp    c0007e20 <f_mkfs+0xcc5>
c0007e19:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e1e:	76 0a                	jbe    c0007e2a <f_mkfs+0xccf>
c0007e20:	bb 0e 00 00 00       	mov    ebx,0xe
c0007e25:	e9 ff 03 00 00       	jmp    c0008229 <f_mkfs+0x10ce>
c0007e2a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007e2f:	31 d2                	xor    edx,edx
c0007e31:	b9 00 02 00 00       	mov    ecx,0x200
c0007e36:	89 e8                	mov    eax,ebp
c0007e38:	e8 a2 9c ff ff       	call   c0001adf <mem_set>
c0007e3d:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e42:	ba 62 60 02 c0       	mov    edx,0xc0026062
c0007e47:	89 e8                	mov    eax,ebp
c0007e49:	e8 7c 9c ff ff       	call   c0001aca <mem_cpy>
c0007e4e:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e51:	ba 00 02 00 00       	mov    edx,0x200
c0007e56:	e8 62 9c ff ff       	call   c0001abd <st_word>
c0007e5b:	89 f8                	mov    eax,edi
c0007e5d:	0f b7 d6             	movzx  edx,si
c0007e60:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e63:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e66:	e8 52 9c ff ff       	call   c0001abd <st_word>
c0007e6b:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e6f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e74:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e77:	75 08                	jne    c0007e81 <f_mkfs+0xd26>
c0007e79:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e81:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e84:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e88:	e8 30 9c ff ff       	call   c0001abd <st_word>
c0007e8d:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e92:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e96:	39 d0                	cmp    eax,edx
c0007e98:	b8 00 00 00 00       	mov    eax,0x0
c0007e9d:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007ea1:	72 0a                	jb     c0007ead <f_mkfs+0xd52>
c0007ea3:	8d 45 13             	lea    eax,[ebp+0x13]
c0007ea6:	e8 12 9c ff ff       	call   c0001abd <st_word>
c0007eab:	eb 08                	jmp    c0007eb5 <f_mkfs+0xd5a>
c0007ead:	8d 45 20             	lea    eax,[ebp+0x20]
c0007eb0:	e8 0c 9c ff ff       	call   c0001ac1 <st_dword>
c0007eb5:	8d 45 18             	lea    eax,[ebp+0x18]
c0007eb8:	ba 3f 00 00 00       	mov    edx,0x3f
c0007ebd:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007ec1:	e8 f7 9b ff ff       	call   c0001abd <st_word>
c0007ec6:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007ec9:	ba ff 00 00 00       	mov    edx,0xff
c0007ece:	e8 ea 9b ff ff       	call   c0001abd <st_word>
c0007ed3:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007ed6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007eda:	e8 e2 9b ff ff       	call   c0001ac1 <st_dword>
c0007edf:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ee4:	75 57                	jne    c0007f3d <f_mkfs+0xde2>
c0007ee6:	8d 45 43             	lea    eax,[ebp+0x43]
c0007ee9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eee:	e8 ce 9b ff ff       	call   c0001ac1 <st_dword>
c0007ef3:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ef6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efa:	e8 c2 9b ff ff       	call   c0001ac1 <st_dword>
c0007eff:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007f02:	ba 02 00 00 00       	mov    edx,0x2
c0007f07:	e8 b5 9b ff ff       	call   c0001ac1 <st_dword>
c0007f0c:	8d 45 30             	lea    eax,[ebp+0x30]
c0007f0f:	ba 01 00 00 00       	mov    edx,0x1
c0007f14:	e8 a4 9b ff ff       	call   c0001abd <st_word>
c0007f19:	8d 45 32             	lea    eax,[ebp+0x32]
c0007f1c:	ba 06 00 00 00       	mov    edx,0x6
c0007f21:	e8 97 9b ff ff       	call   c0001abd <st_word>
c0007f26:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007f2a:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007f2e:	8d 45 47             	lea    eax,[ebp+0x47]
c0007f31:	b9 13 00 00 00       	mov    ecx,0x13
c0007f36:	ba 6e 60 02 c0       	mov    edx,0xc002606e
c0007f3b:	eb 2f                	jmp    c0007f6c <f_mkfs+0xe11>
c0007f3d:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f40:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f45:	e8 77 9b ff ff       	call   c0001ac1 <st_dword>
c0007f4a:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f4f:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f52:	e8 66 9b ff ff       	call   c0001abd <st_word>
c0007f57:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f5b:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f5f:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f62:	b9 13 00 00 00       	mov    ecx,0x13
c0007f67:	ba 82 60 02 c0       	mov    edx,0xc0026082
c0007f6c:	e8 59 9b ff ff       	call   c0001aca <mem_cpy>
c0007f71:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f77:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f7c:	89 f0                	mov    eax,esi
c0007f7e:	e8 3a 9b ff ff       	call   c0001abd <st_word>
c0007f83:	83 ec 0c             	sub    esp,0xc
c0007f86:	6a 01                	push   0x1
c0007f88:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f8c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f90:	55                   	push   ebp
c0007f91:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f95:	e8 7c 9a ff ff       	call   c0001a16 <disk_write>
c0007f9a:	83 c4 20             	add    esp,0x20
c0007f9d:	85 c0                	test   eax,eax
c0007f9f:	0f 85 67 02 00 00    	jne    c000820c <f_mkfs+0x10b1>
c0007fa5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007faa:	0f 85 b7 00 00 00    	jne    c0008067 <f_mkfs+0xf0c>
c0007fb0:	83 ec 0c             	sub    esp,0xc
c0007fb3:	6a 01                	push   0x1
c0007fb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fb9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fbd:	83 c0 06             	add    eax,0x6
c0007fc0:	83 d2 00             	adc    edx,0x0
c0007fc3:	52                   	push   edx
c0007fc4:	50                   	push   eax
c0007fc5:	55                   	push   ebp
c0007fc6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fca:	e8 47 9a ff ff       	call   c0001a16 <disk_write>
c0007fcf:	83 c4 20             	add    esp,0x20
c0007fd2:	b9 00 02 00 00       	mov    ecx,0x200
c0007fd7:	31 d2                	xor    edx,edx
c0007fd9:	89 e8                	mov    eax,ebp
c0007fdb:	e8 ff 9a ff ff       	call   c0001adf <mem_set>
c0007fe0:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fe5:	89 e8                	mov    eax,ebp
c0007fe7:	e8 d5 9a ff ff       	call   c0001ac1 <st_dword>
c0007fec:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007ff2:	ba 72 72 41 61       	mov    edx,0x61417272
c0007ff7:	e8 c5 9a ff ff       	call   c0001ac1 <st_dword>
c0007ffc:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fff:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008005:	e8 b7 9a ff ff       	call   c0001ac1 <st_dword>
c000800a:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008010:	ba 02 00 00 00       	mov    edx,0x2
c0008015:	e8 a7 9a ff ff       	call   c0001ac1 <st_dword>
c000801a:	ba 55 aa 00 00       	mov    edx,0xaa55
c000801f:	89 f0                	mov    eax,esi
c0008021:	e8 97 9a ff ff       	call   c0001abd <st_word>
c0008026:	83 ec 0c             	sub    esp,0xc
c0008029:	6a 01                	push   0x1
c000802b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000802f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008033:	83 c0 07             	add    eax,0x7
c0008036:	83 d2 00             	adc    edx,0x0
c0008039:	52                   	push   edx
c000803a:	50                   	push   eax
c000803b:	55                   	push   ebp
c000803c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008040:	e8 d1 99 ff ff       	call   c0001a16 <disk_write>
c0008045:	83 c4 14             	add    esp,0x14
c0008048:	6a 01                	push   0x1
c000804a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000804e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008052:	83 c0 01             	add    eax,0x1
c0008055:	83 d2 00             	adc    edx,0x0
c0008058:	52                   	push   edx
c0008059:	50                   	push   eax
c000805a:	55                   	push   ebp
c000805b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000805f:	e8 b2 99 ff ff       	call   c0001a16 <disk_write>
c0008064:	83 c4 20             	add    esp,0x20
c0008067:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000806e:	31 d2                	xor    edx,edx
c0008070:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008076:	31 db                	xor    ebx,ebx
c0008078:	89 e8                	mov    eax,ebp
c000807a:	e8 60 9a ff ff       	call   c0001adf <mem_set>
c000807f:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008084:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000808b:	0f 94 c3             	sete   bl
c000808e:	4b                   	dec    ebx
c000808f:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008095:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c000809b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080a0:	75 21                	jne    c00080c3 <f_mkfs+0xf68>
c00080a2:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00080a7:	89 e8                	mov    eax,ebp
c00080a9:	e8 13 9a ff ff       	call   c0001ac1 <st_dword>
c00080ae:	8d 45 04             	lea    eax,[ebp+0x4]
c00080b1:	83 ca ff             	or     edx,0xffffffff
c00080b4:	e8 08 9a ff ff       	call   c0001ac1 <st_dword>
c00080b9:	8d 45 08             	lea    eax,[ebp+0x8]
c00080bc:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00080c1:	eb 04                	jmp    c00080c7 <f_mkfs+0xf6c>
c00080c3:	89 da                	mov    edx,ebx
c00080c5:	89 e8                	mov    eax,ebp
c00080c7:	e8 f5 99 ff ff       	call   c0001ac1 <st_dword>
c00080cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00080d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00080d4:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080d8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080dc:	39 ce                	cmp    esi,ecx
c00080de:	76 02                	jbe    c00080e2 <f_mkfs+0xf87>
c00080e0:	89 ce                	mov    esi,ecx
c00080e2:	83 ec 0c             	sub    esp,0xc
c00080e5:	56                   	push   esi
c00080e6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080ea:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080ee:	55                   	push   ebp
c00080ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080f3:	e8 1e 99 ff ff       	call   c0001a16 <disk_write>
c00080f8:	83 c4 20             	add    esp,0x20
c00080fb:	85 c0                	test   eax,eax
c00080fd:	0f 85 09 01 00 00    	jne    c000820c <f_mkfs+0x10b1>
c0008103:	31 d2                	xor    edx,edx
c0008105:	b9 00 02 00 00       	mov    ecx,0x200
c000810a:	89 e8                	mov    eax,ebp
c000810c:	e8 ce 99 ff ff       	call   c0001adf <mem_set>
c0008111:	31 d2                	xor    edx,edx
c0008113:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008117:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000811b:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000811f:	75 b3                	jne    c00080d4 <f_mkfs+0xf79>
c0008121:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008124:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000812b:	40                   	inc    eax
c000812c:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008130:	0f 87 65 ff ff ff    	ja     c000809b <f_mkfs+0xf40>
c0008136:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000813b:	74 04                	je     c0008141 <f_mkfs+0xfe6>
c000813d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008141:	89 fb                	mov    ebx,edi
c0008143:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008147:	76 04                	jbe    c000814d <f_mkfs+0xff2>
c0008149:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000814d:	83 ec 0c             	sub    esp,0xc
c0008150:	53                   	push   ebx
c0008151:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008155:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008159:	55                   	push   ebp
c000815a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000815e:	e8 b3 98 ff ff       	call   c0001a16 <disk_write>
c0008163:	83 c4 20             	add    esp,0x20
c0008166:	85 c0                	test   eax,eax
c0008168:	0f 85 9e 00 00 00    	jne    c000820c <f_mkfs+0x10b1>
c000816e:	31 d2                	xor    edx,edx
c0008170:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008174:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008178:	29 df                	sub    edi,ebx
c000817a:	75 c5                	jne    c0008141 <f_mkfs+0xfe6>
c000817c:	b1 0c                	mov    cl,0xc
c000817e:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008183:	74 1d                	je     c00081a2 <f_mkfs+0x1047>
c0008185:	b8 ff ff 00 00       	mov    eax,0xffff
c000818a:	b1 06                	mov    cl,0x6
c000818c:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008190:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008194:	72 0c                	jb     c00081a2 <f_mkfs+0x1047>
c0008196:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c000819b:	0f 94 c1             	sete   cl
c000819e:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00081a2:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00081a7:	75 4c                	jne    c00081f5 <f_mkfs+0x109a>
c00081a9:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00081ad:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00081b1:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00081b8:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00081bf:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00081ca:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00081d5:	0f b6 c9             	movzx  ecx,cl
c00081d8:	83 ec 0c             	sub    esp,0xc
c00081db:	55                   	push   ebp
c00081dc:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081e7:	e8 2f c2 ff ff       	call   c000441b <create_partition>
c00081ec:	83 c4 10             	add    esp,0x10
c00081ef:	89 c3                	mov    ebx,eax
c00081f1:	85 c0                	test   eax,eax
c00081f3:	75 34                	jne    c0008229 <f_mkfs+0x10ce>
c00081f5:	31 db                	xor    ebx,ebx
c00081f7:	50                   	push   eax
c00081f8:	6a 00                	push   0x0
c00081fa:	6a 00                	push   0x0
c00081fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008200:	e8 27 98 ff ff       	call   c0001a2c <disk_ioctl>
c0008205:	83 c4 10             	add    esp,0x10
c0008208:	85 c0                	test   eax,eax
c000820a:	74 1d                	je     c0008229 <f_mkfs+0x10ce>
c000820c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008214:	75 0c                	jne    c0008222 <f_mkfs+0x10c7>
c0008216:	83 ec 0c             	sub    esp,0xc
c0008219:	55                   	push   ebp
c000821a:	e8 75 00 00 00       	call   c0008294 <ff_memfree>
c000821f:	83 c4 10             	add    esp,0x10
c0008222:	bb 01 00 00 00       	mov    ebx,0x1
c0008227:	eb 48                	jmp    c0008271 <f_mkfs+0x1116>
c0008229:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008231:	75 3e                	jne    c0008271 <f_mkfs+0x1116>
c0008233:	83 ec 0c             	sub    esp,0xc
c0008236:	55                   	push   ebp
c0008237:	e8 58 00 00 00       	call   c0008294 <ff_memfree>
c000823c:	83 c4 10             	add    esp,0x10
c000823f:	eb 30                	jmp    c0008271 <f_mkfs+0x1116>
c0008241:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008246:	0f 85 eb fa ff ff    	jne    c0007d37 <f_mkfs+0xbdc>
c000824c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008250:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008256:	0f 86 b8 f9 ff ff    	jbe    c0007c14 <f_mkfs+0xab9>
c000825c:	e9 bf fb ff ff       	jmp    c0007e20 <f_mkfs+0xcc5>
c0008261:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008266:	0f 85 c0 fa ff ff    	jne    c0007d2c <f_mkfs+0xbd1>
c000826c:	e9 af fb ff ff       	jmp    c0007e20 <f_mkfs+0xcc5>
c0008271:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008277:	89 d8                	mov    eax,ebx
c0008279:	5b                   	pop    ebx
c000827a:	5e                   	pop    esi
c000827b:	5f                   	pop    edi
c000827c:	5d                   	pop    ebp
c000827d:	c3                   	ret    

c000827e <ff_memalloc>:
c000827e:	83 ec 0c             	sub    esp,0xc
c0008281:	83 ec 0c             	sub    esp,0xc
c0008284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008288:	e8 e1 6e 00 00       	call   c000f16e <malloc>
c000828d:	83 c4 10             	add    esp,0x10
c0008290:	83 c4 0c             	add    esp,0xc
c0008293:	c3                   	ret    

c0008294 <ff_memfree>:
c0008294:	83 ec 0c             	sub    esp,0xc
c0008297:	83 ec 0c             	sub    esp,0xc
c000829a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000829e:	e8 db 6e 00 00       	call   c000f17e <free>
c00082a3:	83 c4 10             	add    esp,0x10
c00082a6:	90                   	nop
c00082a7:	83 c4 0c             	add    esp,0xc
c00082aa:	c3                   	ret    

c00082ab <ff_uni2oem>:
c00082ab:	83 ec 14             	sub    esp,0x14
c00082ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00082b2:	66 89 04 24          	mov    WORD PTR [esp],ax
c00082b6:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082bd:	c7 44 24 0c a0 63 02 c0 	mov    DWORD PTR [esp+0xc],0xc00263a0
c00082c5:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00082ca:	77 0b                	ja     c00082d7 <ff_uni2oem+0x2c>
c00082cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00082d0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082d5:	eb 5b                	jmp    c0008332 <ff_uni2oem+0x87>
c00082d7:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082df:	77 51                	ja     c0008332 <ff_uni2oem+0x87>
c00082e1:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082e7:	75 49                	jne    c0008332 <ff_uni2oem+0x87>
c00082e9:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082f0:	eb 0b                	jmp    c00082fd <ff_uni2oem+0x52>
c00082f2:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082f7:	40                   	inc    eax
c00082f8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082fd:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008303:	77 1b                	ja     c0008320 <ff_uni2oem+0x75>
c0008305:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000830a:	01 c0                	add    eax,eax
c000830c:	89 c2                	mov    edx,eax
c000830e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008312:	01 d0                	add    eax,edx
c0008314:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008317:	0f b7 c0             	movzx  eax,ax
c000831a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000831e:	75 d2                	jne    c00082f2 <ff_uni2oem+0x47>
c0008320:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008325:	83 e8 80             	sub    eax,0xffffff80
c0008328:	25 ff 00 00 00       	and    eax,0xff
c000832d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008332:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008337:	83 c4 14             	add    esp,0x14
c000833a:	c3                   	ret    

c000833b <ff_oem2uni>:
c000833b:	83 ec 18             	sub    esp,0x18
c000833e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008342:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008346:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000834b:	66 89 04 24          	mov    WORD PTR [esp],ax
c000834f:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008356:	c7 44 24 10 a0 63 02 c0 	mov    DWORD PTR [esp+0x10],0xc00263a0
c000835e:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008364:	77 0b                	ja     c0008371 <ff_oem2uni+0x36>
c0008366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000836a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000836f:	eb 2d                	jmp    c000839e <ff_oem2uni+0x63>
c0008371:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008377:	75 25                	jne    c000839e <ff_oem2uni+0x63>
c0008379:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008380:	77 1c                	ja     c000839e <ff_oem2uni+0x63>
c0008382:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008387:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000838c:	01 c0                	add    eax,eax
c000838e:	89 c2                	mov    edx,eax
c0008390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008394:	01 d0                	add    eax,edx
c0008396:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008399:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000839e:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00083a3:	83 c4 18             	add    esp,0x18
c00083a6:	c3                   	ret    

c00083a7 <ff_wtoupper>:
c00083a7:	83 ec 10             	sub    esp,0x10
c00083aa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00083b2:	0f 87 3e 01 00 00    	ja     c00084f6 <ff_wtoupper+0x14f>
c00083b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083bc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083c1:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00083c8:	77 07                	ja     c00083d1 <ff_wtoupper+0x2a>
c00083ca:	b8 a0 61 02 c0       	mov    eax,0xc00261a0
c00083cf:	eb 05                	jmp    c00083d6 <ff_wtoupper+0x2f>
c00083d1:	b8 e0 60 02 c0       	mov    eax,0xc00260e0
c00083d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083de:	8d 50 02             	lea    edx,[eax+0x2]
c00083e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083e5:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083e8:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083ed:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083f3:	0f 84 f4 00 00 00    	je     c00084ed <ff_wtoupper+0x146>
c00083f9:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083fe:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008403:	0f 82 e4 00 00 00    	jb     c00084ed <ff_wtoupper+0x146>
c0008409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000840d:	8d 50 02             	lea    edx,[eax+0x2]
c0008410:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008414:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008417:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000841c:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008421:	66 c1 e8 08          	shr    ax,0x8
c0008425:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000842a:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008431:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008436:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000843b:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008440:	01 ca                	add    edx,ecx
c0008442:	39 d0                	cmp    eax,edx
c0008444:	0f 8d 86 00 00 00    	jge    c00084d0 <ff_wtoupper+0x129>
c000844a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000844f:	83 f8 08             	cmp    eax,0x8
c0008452:	0f 87 94 00 00 00    	ja     c00084ec <ff_wtoupper+0x145>
c0008458:	8b 04 85 a0 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f60]
c000845f:	ff e0                	jmp    eax
c0008461:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008466:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000846b:	29 c2                	sub    edx,eax
c000846d:	89 d0                	mov    eax,edx
c000846f:	01 c0                	add    eax,eax
c0008471:	89 c2                	mov    edx,eax
c0008473:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008477:	01 d0                	add    eax,edx
c0008479:	66 8b 00             	mov    ax,WORD PTR [eax]
c000847c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008481:	eb 4b                	jmp    c00084ce <ff_wtoupper+0x127>
c0008483:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008488:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000848c:	83 e0 01             	and    eax,0x1
c000848f:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008494:	eb 38                	jmp    c00084ce <ff_wtoupper+0x127>
c0008496:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c000849c:	eb 30                	jmp    c00084ce <ff_wtoupper+0x127>
c000849e:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00084a4:	eb 28                	jmp    c00084ce <ff_wtoupper+0x127>
c00084a6:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00084ac:	eb 20                	jmp    c00084ce <ff_wtoupper+0x127>
c00084ae:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00084b4:	eb 18                	jmp    c00084ce <ff_wtoupper+0x127>
c00084b6:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00084bc:	eb 10                	jmp    c00084ce <ff_wtoupper+0x127>
c00084be:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00084c4:	eb 08                	jmp    c00084ce <ff_wtoupper+0x127>
c00084c6:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084cd:	90                   	nop
c00084ce:	eb 1c                	jmp    c00084ec <ff_wtoupper+0x145>
c00084d0:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084d6:	0f 85 fe fe ff ff    	jne    c00083da <ff_wtoupper+0x33>
c00084dc:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084e1:	01 c0                	add    eax,eax
c00084e3:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084e7:	e9 ee fe ff ff       	jmp    c00083da <ff_wtoupper+0x33>
c00084ec:	90                   	nop
c00084ed:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084fa:	83 c4 10             	add    esp,0x10
c00084fd:	c3                   	ret    

c00084fe <is_bad_src_ratio>:
c00084fe:	83 ec 1c             	sub    esp,0x1c
c0008501:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008505:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008509:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000850d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008511:	b8 00 00 00 00       	mov    eax,0x0
c0008516:	ba 00 00 70 3f       	mov    edx,0x3f700000
c000851b:	52                   	push   edx
c000851c:	50                   	push   eax
c000851d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008525:	e8 45 cb 01 00       	call   c002506f <__ltdf2>
c000852a:	83 c4 10             	add    esp,0x10
c000852d:	85 c0                	test   eax,eax
c000852f:	78 20                	js     c0008551 <is_bad_src_ratio+0x53>
c0008531:	b8 00 00 00 00       	mov    eax,0x0
c0008536:	ba 00 00 70 40       	mov    edx,0x40700000
c000853b:	52                   	push   edx
c000853c:	50                   	push   eax
c000853d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008541:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008545:	e8 07 cb 01 00       	call   c0025051 <__gtdf2>
c000854a:	83 c4 10             	add    esp,0x10
c000854d:	85 c0                	test   eax,eax
c000854f:	7e 07                	jle    c0008558 <is_bad_src_ratio+0x5a>
c0008551:	b8 01 00 00 00       	mov    eax,0x1
c0008556:	eb 05                	jmp    c000855d <is_bad_src_ratio+0x5f>
c0008558:	b8 00 00 00 00       	mov    eax,0x0
c000855d:	83 c4 1c             	add    esp,0x1c
c0008560:	c3                   	ret    

c0008561 <psrc_set_converter>:
c0008561:	56                   	push   esi
c0008562:	89 d6                	mov    esi,edx
c0008564:	53                   	push   ebx
c0008565:	89 c3                	mov    ebx,eax
c0008567:	83 ec 0c             	sub    esp,0xc
c000856a:	52                   	push   edx
c000856b:	50                   	push   eax
c000856c:	e8 58 51 00 00       	call   c000d6c9 <sinc_set_converter>
c0008571:	83 c4 10             	add    esp,0x10
c0008574:	85 c0                	test   eax,eax
c0008576:	74 25                	je     c000859d <psrc_set_converter+0x3c>
c0008578:	50                   	push   eax
c0008579:	50                   	push   eax
c000857a:	56                   	push   esi
c000857b:	53                   	push   ebx
c000857c:	e8 2a 59 00 00       	call   c000deab <zoh_set_converter>
c0008581:	83 c4 10             	add    esp,0x10
c0008584:	85 c0                	test   eax,eax
c0008586:	74 15                	je     c000859d <psrc_set_converter+0x3c>
c0008588:	51                   	push   ecx
c0008589:	51                   	push   ecx
c000858a:	56                   	push   esi
c000858b:	53                   	push   ebx
c000858c:	e8 77 10 00 00       	call   c0009608 <linear_set_converter>
c0008591:	83 c4 10             	add    esp,0x10
c0008594:	ba 0a 00 00 00       	mov    edx,0xa
c0008599:	85 c0                	test   eax,eax
c000859b:	75 02                	jne    c000859f <psrc_set_converter+0x3e>
c000859d:	31 d2                	xor    edx,edx
c000859f:	89 d0                	mov    eax,edx
c00085a1:	5a                   	pop    edx
c00085a2:	5b                   	pop    ebx
c00085a3:	5e                   	pop    esi
c00085a4:	c3                   	ret    

c00085a5 <src_delete>:
c00085a5:	53                   	push   ebx
c00085a6:	83 ec 08             	sub    esp,0x8
c00085a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00085ad:	85 db                	test   ebx,ebx
c00085af:	74 29                	je     c00085da <src_delete+0x35>
c00085b1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00085b4:	85 c0                	test   eax,eax
c00085b6:	74 0c                	je     c00085c4 <src_delete+0x1f>
c00085b8:	83 ec 0c             	sub    esp,0xc
c00085bb:	50                   	push   eax
c00085bc:	e8 bd 6b 00 00       	call   c000f17e <free>
c00085c1:	83 c4 10             	add    esp,0x10
c00085c4:	50                   	push   eax
c00085c5:	6a 3c                	push   0x3c
c00085c7:	6a 00                	push   0x0
c00085c9:	53                   	push   ebx
c00085ca:	e8 f6 80 ff ff       	call   c00006c5 <memset>
c00085cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00085d2:	e8 a7 6b 00 00       	call   c000f17e <free>
c00085d7:	83 c4 10             	add    esp,0x10
c00085da:	31 c0                	xor    eax,eax
c00085dc:	83 c4 08             	add    esp,0x8
c00085df:	5b                   	pop    ebx
c00085e0:	c3                   	ret    

c00085e1 <src_process>:
c00085e1:	56                   	push   esi
c00085e2:	53                   	push   ebx
c00085e3:	83 ec 14             	sub    esp,0x14
c00085e6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00085ea:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00085ee:	85 f6                	test   esi,esi
c00085f0:	0f 84 2a 01 00 00    	je     c0008720 <src_process+0x13f>
c00085f6:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00085fa:	0f 84 27 01 00 00    	je     c0008727 <src_process+0x146>
c0008600:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008604:	0f 84 1d 01 00 00    	je     c0008727 <src_process+0x146>
c000860a:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008611:	0f 85 17 01 00 00    	jne    c000872e <src_process+0x14d>
c0008617:	85 db                	test   ebx,ebx
c0008619:	0f 84 16 01 00 00    	je     c0008735 <src_process+0x154>
c000861f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008622:	0f 84 14 01 00 00    	je     c000873c <src_process+0x15b>
c0008628:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000862c:	0f 84 0a 01 00 00    	je     c000873c <src_process+0x15b>
c0008632:	50                   	push   eax
c0008633:	50                   	push   eax
c0008634:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008637:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000863a:	e8 bf fe ff ff       	call   c00084fe <is_bad_src_ratio>
c000863f:	83 c4 10             	add    esp,0x10
c0008642:	85 c0                	test   eax,eax
c0008644:	0f 85 f9 00 00 00    	jne    c0008743 <src_process+0x162>
c000864a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000864e:	79 07                	jns    c0008657 <src_process+0x76>
c0008650:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008657:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000865b:	79 07                	jns    c0008664 <src_process+0x83>
c000865d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008664:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008666:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008669:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000866c:	39 ca                	cmp    edx,ecx
c000866e:	73 0b                	jae    c000867b <src_process+0x9a>
c0008670:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008674:	8d 04 82             	lea    eax,[edx+eax*4]
c0008677:	39 c1                	cmp    ecx,eax
c0008679:	eb 09                	jmp    c0008684 <src_process+0xa3>
c000867b:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c000867f:	8d 04 81             	lea    eax,[ecx+eax*4]
c0008682:	39 c2                	cmp    edx,eax
c0008684:	0f 82 c0 00 00 00    	jb     c000874a <src_process+0x169>
c000868a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008691:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008698:	68 00 00 70 3f       	push   0x3f700000
c000869d:	6a 00                	push   0x0
c000869f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00086a2:	ff 36                	push   DWORD PTR [esi]
c00086a4:	e8 c6 c9 01 00       	call   c002506f <__ltdf2>
c00086a9:	83 c4 10             	add    esp,0x10
c00086ac:	85 c0                	test   eax,eax
c00086ae:	79 0b                	jns    c00086bb <src_process+0xda>
c00086b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00086b3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00086b6:	89 06                	mov    DWORD PTR [esi],eax
c00086b8:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00086bb:	83 ec 10             	sub    esp,0x10
c00086be:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00086c1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00086c4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00086c7:	ff 36                	push   DWORD PTR [esi]
c00086c9:	e8 a6 c0 01 00       	call   c0024774 <__subdf3>
c00086ce:	83 c4 18             	add    esp,0x18
c00086d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00086d5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00086d9:	52                   	push   edx
c00086da:	50                   	push   eax
c00086db:	e8 20 cb 01 00       	call   c0025200 <fabs>
c00086e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00086e8:	83 c4 10             	add    esp,0x10
c00086eb:	68 af 03 d2 3c       	push   0x3cd203af
c00086f0:	68 16 56 e7 9e       	push   0x9ee75616
c00086f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086fd:	e8 6d c9 01 00       	call   c002506f <__ltdf2>
c0008702:	83 c4 10             	add    esp,0x10
c0008705:	85 c0                	test   eax,eax
c0008707:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c000870b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000870f:	79 05                	jns    c0008716 <src_process+0x135>
c0008711:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0008714:	eb 03                	jmp    c0008719 <src_process+0x138>
c0008716:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0008719:	83 c4 14             	add    esp,0x14
c000871c:	5b                   	pop    ebx
c000871d:	5e                   	pop    esi
c000871e:	ff e0                	jmp    eax
c0008720:	b8 02 00 00 00       	mov    eax,0x2
c0008725:	eb 28                	jmp    c000874f <src_process+0x16e>
c0008727:	b8 07 00 00 00       	mov    eax,0x7
c000872c:	eb 21                	jmp    c000874f <src_process+0x16e>
c000872e:	b8 12 00 00 00       	mov    eax,0x12
c0008733:	eb 1a                	jmp    c000874f <src_process+0x16e>
c0008735:	b8 03 00 00 00       	mov    eax,0x3
c000873a:	eb 13                	jmp    c000874f <src_process+0x16e>
c000873c:	b8 04 00 00 00       	mov    eax,0x4
c0008741:	eb 0c                	jmp    c000874f <src_process+0x16e>
c0008743:	b8 06 00 00 00       	mov    eax,0x6
c0008748:	eb 05                	jmp    c000874f <src_process+0x16e>
c000874a:	b8 10 00 00 00       	mov    eax,0x10
c000874f:	83 c4 14             	add    esp,0x14
c0008752:	5b                   	pop    ebx
c0008753:	5e                   	pop    esi
c0008754:	c3                   	ret    

c0008755 <src_callback_read>:
c0008755:	55                   	push   ebp
c0008756:	57                   	push   edi
c0008757:	56                   	push   esi
c0008758:	53                   	push   ebx
c0008759:	83 ec 3c             	sub    esp,0x3c
c000875c:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008760:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008764:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008768:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c000876c:	85 ed                	test   ebp,ebp
c000876e:	0f 8e 30 01 00 00    	jle    c00088a4 <src_callback_read+0x14f>
c0008774:	85 db                	test   ebx,ebx
c0008776:	0f 84 28 01 00 00    	je     c00088a4 <src_callback_read+0x14f>
c000877c:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008783:	74 0c                	je     c0008791 <src_callback_read+0x3c>
c0008785:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c000878c:	e9 13 01 00 00       	jmp    c00088a4 <src_callback_read+0x14f>
c0008791:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008795:	75 0c                	jne    c00087a3 <src_callback_read+0x4e>
c0008797:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000879e:	e9 01 01 00 00       	jmp    c00088a4 <src_callback_read+0x14f>
c00087a3:	51                   	push   ecx
c00087a4:	6a 24                	push   0x24
c00087a6:	6a 00                	push   0x0
c00087a8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00087ac:	50                   	push   eax
c00087ad:	e8 13 7f ff ff       	call   c00006c5 <memset>
c00087b2:	58                   	pop    eax
c00087b3:	5a                   	pop    edx
c00087b4:	57                   	push   edi
c00087b5:	56                   	push   esi
c00087b6:	e8 43 fd ff ff       	call   c00084fe <is_bad_src_ratio>
c00087bb:	83 c4 10             	add    esp,0x10
c00087be:	85 c0                	test   eax,eax
c00087c0:	74 0c                	je     c00087ce <src_callback_read+0x79>
c00087c2:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087c9:	e9 d6 00 00 00       	jmp    c00088a4 <src_callback_read+0x14f>
c00087ce:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00087d2:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00087d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00087da:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00087de:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00087e1:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00087e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087e9:	31 f6                	xor    esi,esi
c00087eb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087f2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00087f7:	75 30                	jne    c0008829 <src_callback_read+0xd4>
c00087f9:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008801:	52                   	push   edx
c0008802:	52                   	push   edx
c0008803:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008807:	50                   	push   eax
c0008808:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000880b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c000880e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008812:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008816:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000881a:	83 c4 10             	add    esp,0x10
c000881d:	85 c0                	test   eax,eax
c000881f:	75 08                	jne    c0008829 <src_callback_read+0xd4>
c0008821:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008829:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008830:	50                   	push   eax
c0008831:	50                   	push   eax
c0008832:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008836:	50                   	push   eax
c0008837:	53                   	push   ebx
c0008838:	e8 a4 fd ff ff       	call   c00085e1 <src_process>
c000883d:	83 c4 10             	add    esp,0x10
c0008840:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008847:	85 c0                	test   eax,eax
c0008849:	75 42                	jne    c000888d <src_callback_read+0x138>
c000884b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000884f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008852:	89 f9                	mov    ecx,edi
c0008854:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008858:	0f af ca             	imul   ecx,edx
c000885b:	c1 e1 02             	shl    ecx,0x2
c000885e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008862:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008866:	0f af d1             	imul   edx,ecx
c0008869:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000886d:	c1 e2 02             	shl    edx,0x2
c0008870:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008874:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008877:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000887c:	75 04                	jne    c0008882 <src_callback_read+0x12d>
c000887e:	85 c9                	test   ecx,ecx
c0008880:	74 0b                	je     c000888d <src_callback_read+0x138>
c0008882:	39 d5                	cmp    ebp,edx
c0008884:	7e 09                	jle    c000888f <src_callback_read+0x13a>
c0008886:	89 d6                	mov    esi,edx
c0008888:	e9 65 ff ff ff       	jmp    c00087f2 <src_callback_read+0x9d>
c000888d:	89 f2                	mov    edx,esi
c000888f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008893:	85 c0                	test   eax,eax
c0008895:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008898:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000889c:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000889f:	74 05                	je     c00088a6 <src_callback_read+0x151>
c00088a1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00088a4:	31 d2                	xor    edx,edx
c00088a6:	83 c4 3c             	add    esp,0x3c
c00088a9:	89 d0                	mov    eax,edx
c00088ab:	5b                   	pop    ebx
c00088ac:	5e                   	pop    esi
c00088ad:	5f                   	pop    edi
c00088ae:	5d                   	pop    ebp
c00088af:	c3                   	ret    

c00088b0 <src_set_ratio>:
c00088b0:	57                   	push   edi
c00088b1:	b8 02 00 00 00       	mov    eax,0x2
c00088b6:	56                   	push   esi
c00088b7:	53                   	push   ebx
c00088b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00088c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00088c4:	85 db                	test   ebx,ebx
c00088c6:	74 2d                	je     c00088f5 <src_set_ratio+0x45>
c00088c8:	b8 07 00 00 00       	mov    eax,0x7
c00088cd:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00088d1:	74 22                	je     c00088f5 <src_set_ratio+0x45>
c00088d3:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00088d7:	74 1c                	je     c00088f5 <src_set_ratio+0x45>
c00088d9:	50                   	push   eax
c00088da:	50                   	push   eax
c00088db:	57                   	push   edi
c00088dc:	56                   	push   esi
c00088dd:	e8 1c fc ff ff       	call   c00084fe <is_bad_src_ratio>
c00088e2:	83 c4 10             	add    esp,0x10
c00088e5:	85 c0                	test   eax,eax
c00088e7:	75 07                	jne    c00088f0 <src_set_ratio+0x40>
c00088e9:	89 33                	mov    DWORD PTR [ebx],esi
c00088eb:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088ee:	eb 05                	jmp    c00088f5 <src_set_ratio+0x45>
c00088f0:	b8 06 00 00 00       	mov    eax,0x6
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	c3                   	ret    

c00088f9 <src_get_channels>:
c00088f9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088fd:	b8 02 00 00 00       	mov    eax,0x2
c0008902:	85 d2                	test   edx,edx
c0008904:	74 14                	je     c000891a <src_get_channels+0x21>
c0008906:	b8 07 00 00 00       	mov    eax,0x7
c000890b:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c000890f:	74 09                	je     c000891a <src_get_channels+0x21>
c0008911:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008915:	74 03                	je     c000891a <src_get_channels+0x21>
c0008917:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000891a:	c3                   	ret    

c000891b <src_reset>:
c000891b:	53                   	push   ebx
c000891c:	b8 02 00 00 00       	mov    eax,0x2
c0008921:	83 ec 08             	sub    esp,0x8
c0008924:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008928:	85 db                	test   ebx,ebx
c000892a:	74 36                	je     c0008962 <src_reset+0x47>
c000892c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000892f:	85 c0                	test   eax,eax
c0008931:	74 09                	je     c000893c <src_reset+0x21>
c0008933:	83 ec 0c             	sub    esp,0xc
c0008936:	53                   	push   ebx
c0008937:	ff d0                	call   eax
c0008939:	83 c4 10             	add    esp,0x10
c000893c:	31 c0                	xor    eax,eax
c000893e:	31 d2                	xor    edx,edx
c0008940:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008943:	89 03                	mov    DWORD PTR [ebx],eax
c0008945:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008948:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000894b:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008952:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008959:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008960:	31 c0                	xor    eax,eax
c0008962:	83 c4 08             	add    esp,0x8
c0008965:	5b                   	pop    ebx
c0008966:	c3                   	ret    

c0008967 <src_new>:
c0008967:	57                   	push   edi
c0008968:	56                   	push   esi
c0008969:	53                   	push   ebx
c000896a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000896e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008972:	85 f6                	test   esi,esi
c0008974:	74 73                	je     c00089e9 <src_new+0x82>
c0008976:	85 ff                	test   edi,edi
c0008978:	7f 08                	jg     c0008982 <src_new+0x1b>
c000897a:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008980:	eb 1e                	jmp    c00089a0 <src_new+0x39>
c0008982:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008988:	50                   	push   eax
c0008989:	50                   	push   eax
c000898a:	6a 3c                	push   0x3c
c000898c:	6a 01                	push   0x1
c000898e:	e8 0b 68 00 00       	call   c000f19e <calloc>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	89 c3                	mov    ebx,eax
c0008998:	85 c0                	test   eax,eax
c000899a:	75 10                	jne    c00089ac <src_new+0x45>
c000899c:	85 f6                	test   esi,esi
c000899e:	75 04                	jne    c00089a4 <src_new+0x3d>
c00089a0:	31 db                	xor    ebx,ebx
c00089a2:	eb 4b                	jmp    c00089ef <src_new+0x88>
c00089a4:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00089aa:	eb 43                	jmp    c00089ef <src_new+0x88>
c00089ac:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00089af:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c00089b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089ba:	e8 a2 fb ff ff       	call   c0008561 <psrc_set_converter>
c00089bf:	85 c0                	test   eax,eax
c00089c1:	74 18                	je     c00089db <src_new+0x74>
c00089c3:	85 f6                	test   esi,esi
c00089c5:	74 06                	je     c00089cd <src_new+0x66>
c00089c7:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089cd:	83 ec 0c             	sub    esp,0xc
c00089d0:	53                   	push   ebx
c00089d1:	31 db                	xor    ebx,ebx
c00089d3:	e8 a6 67 00 00       	call   c000f17e <free>
c00089d8:	83 c4 10             	add    esp,0x10
c00089db:	83 ec 0c             	sub    esp,0xc
c00089de:	53                   	push   ebx
c00089df:	e8 37 ff ff ff       	call   c000891b <src_reset>
c00089e4:	83 c4 10             	add    esp,0x10
c00089e7:	eb 06                	jmp    c00089ef <src_new+0x88>
c00089e9:	85 ff                	test   edi,edi
c00089eb:	7f 9b                	jg     c0008988 <src_new+0x21>
c00089ed:	eb b1                	jmp    c00089a0 <src_new+0x39>
c00089ef:	89 d8                	mov    eax,ebx
c00089f1:	5b                   	pop    ebx
c00089f2:	5e                   	pop    esi
c00089f3:	5f                   	pop    edi
c00089f4:	c3                   	ret    

c00089f5 <src_callback_new>:
c00089f5:	56                   	push   esi
c00089f6:	53                   	push   ebx
c00089f7:	53                   	push   ebx
c00089f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a00:	85 f6                	test   esi,esi
c0008a02:	75 0e                	jne    c0008a12 <src_callback_new+0x1d>
c0008a04:	31 db                	xor    ebx,ebx
c0008a06:	85 c0                	test   eax,eax
c0008a08:	74 47                	je     c0008a51 <src_callback_new+0x5c>
c0008a0a:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008a10:	eb 3f                	jmp    c0008a51 <src_callback_new+0x5c>
c0008a12:	85 c0                	test   eax,eax
c0008a14:	74 06                	je     c0008a1c <src_callback_new+0x27>
c0008a16:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a1c:	51                   	push   ecx
c0008a1d:	50                   	push   eax
c0008a1e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a22:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a26:	e8 3c ff ff ff       	call   c0008967 <src_new>
c0008a2b:	83 c4 10             	add    esp,0x10
c0008a2e:	89 c3                	mov    ebx,eax
c0008a30:	85 c0                	test   eax,eax
c0008a32:	74 1d                	je     c0008a51 <src_callback_new+0x5c>
c0008a34:	83 ec 0c             	sub    esp,0xc
c0008a37:	50                   	push   eax
c0008a38:	e8 de fe ff ff       	call   c000891b <src_reset>
c0008a3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a41:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a48:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a4b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a4e:	83 c4 10             	add    esp,0x10
c0008a51:	89 d8                	mov    eax,ebx
c0008a53:	5a                   	pop    edx
c0008a54:	5b                   	pop    ebx
c0008a55:	5e                   	pop    esi
c0008a56:	c3                   	ret    

c0008a57 <src_get_name>:
c0008a57:	53                   	push   ebx
c0008a58:	83 ec 14             	sub    esp,0x14
c0008a5b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a5f:	53                   	push   ebx
c0008a60:	e8 3e 4c 00 00       	call   c000d6a3 <sinc_get_name>
c0008a65:	83 c4 10             	add    esp,0x10
c0008a68:	85 c0                	test   eax,eax
c0008a6a:	75 1d                	jne    c0008a89 <src_get_name+0x32>
c0008a6c:	83 ec 0c             	sub    esp,0xc
c0008a6f:	53                   	push   ebx
c0008a70:	e8 18 54 00 00       	call   c000de8d <zoh_get_name>
c0008a75:	83 c4 10             	add    esp,0x10
c0008a78:	85 c0                	test   eax,eax
c0008a7a:	75 0d                	jne    c0008a89 <src_get_name+0x32>
c0008a7c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a80:	83 c4 08             	add    esp,0x8
c0008a83:	5b                   	pop    ebx
c0008a84:	e9 61 0b 00 00       	jmp    c00095ea <linear_get_name>
c0008a89:	83 c4 08             	add    esp,0x8
c0008a8c:	5b                   	pop    ebx
c0008a8d:	c3                   	ret    

c0008a8e <src_get_description>:
c0008a8e:	53                   	push   ebx
c0008a8f:	83 ec 14             	sub    esp,0x14
c0008a92:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a96:	53                   	push   ebx
c0008a97:	e8 1a 4c 00 00       	call   c000d6b6 <sinc_get_description>
c0008a9c:	83 c4 10             	add    esp,0x10
c0008a9f:	85 c0                	test   eax,eax
c0008aa1:	75 1d                	jne    c0008ac0 <src_get_description+0x32>
c0008aa3:	83 ec 0c             	sub    esp,0xc
c0008aa6:	53                   	push   ebx
c0008aa7:	e8 f0 53 00 00       	call   c000de9c <zoh_get_description>
c0008aac:	83 c4 10             	add    esp,0x10
c0008aaf:	85 c0                	test   eax,eax
c0008ab1:	75 0d                	jne    c0008ac0 <src_get_description+0x32>
c0008ab3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008ab7:	83 c4 08             	add    esp,0x8
c0008aba:	5b                   	pop    ebx
c0008abb:	e9 39 0b 00 00       	jmp    c00095f9 <linear_get_description>
c0008ac0:	83 c4 08             	add    esp,0x8
c0008ac3:	5b                   	pop    ebx
c0008ac4:	c3                   	ret    

c0008ac5 <src_get_version>:
c0008ac5:	b8 a0 64 02 c0       	mov    eax,0xc00264a0
c0008aca:	c3                   	ret    

c0008acb <src_is_valid_ratio>:
c0008acb:	83 ec 14             	sub    esp,0x14
c0008ace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ad6:	e8 23 fa ff ff       	call   c00084fe <is_bad_src_ratio>
c0008adb:	85 c0                	test   eax,eax
c0008add:	0f 94 c0             	sete   al
c0008ae0:	83 c4 1c             	add    esp,0x1c
c0008ae3:	0f b6 c0             	movzx  eax,al
c0008ae6:	c3                   	ret    

c0008ae7 <src_error>:
c0008ae7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008aeb:	31 c0                	xor    eax,eax
c0008aed:	85 d2                	test   edx,edx
c0008aef:	74 03                	je     c0008af4 <src_error+0xd>
c0008af1:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008af4:	c3                   	ret    

c0008af5 <src_strerror>:
c0008af5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008af9:	31 c0                	xor    eax,eax
c0008afb:	83 fa 17             	cmp    edx,0x17
c0008afe:	77 07                	ja     c0008b07 <src_strerror+0x12>
c0008b00:	8b 04 95 00 69 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9700]
c0008b07:	c3                   	ret    

c0008b08 <src_simple>:
c0008b08:	56                   	push   esi
c0008b09:	53                   	push   ebx
c0008b0a:	83 ec 18             	sub    esp,0x18
c0008b0d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b11:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b15:	50                   	push   eax
c0008b16:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b1a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b1e:	e8 44 fe ff ff       	call   c0008967 <src_new>
c0008b23:	83 c4 10             	add    esp,0x10
c0008b26:	85 c0                	test   eax,eax
c0008b28:	75 06                	jne    c0008b30 <src_simple+0x28>
c0008b2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b2e:	eb 25                	jmp    c0008b55 <src_simple+0x4d>
c0008b30:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b37:	89 c3                	mov    ebx,eax
c0008b39:	50                   	push   eax
c0008b3a:	50                   	push   eax
c0008b3b:	56                   	push   esi
c0008b3c:	53                   	push   ebx
c0008b3d:	e8 9f fa ff ff       	call   c00085e1 <src_process>
c0008b42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b45:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b49:	e8 57 fa ff ff       	call   c00085a5 <src_delete>
c0008b4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b52:	83 c4 10             	add    esp,0x10
c0008b55:	83 c4 14             	add    esp,0x14
c0008b58:	5b                   	pop    ebx
c0008b59:	5e                   	pop    esi
c0008b5a:	c3                   	ret    

c0008b5b <src_short_to_float_array>:
c0008b5b:	53                   	push   ebx
c0008b5c:	83 ec 18             	sub    esp,0x18
c0008b5f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b63:	85 db                	test   ebx,ebx
c0008b65:	74 54                	je     c0008bbb <src_short_to_float_array+0x60>
c0008b67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b6b:	4b                   	dec    ebx
c0008b6c:	83 ec 0c             	sub    esp,0xc
c0008b6f:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b73:	50                   	push   eax
c0008b74:	e8 8a c2 01 00       	call   c0024e03 <__floatsidf>
c0008b79:	83 c4 10             	add    esp,0x10
c0008b7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b80:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008b84:	68 00 00 00 3f       	push   0x3f000000
c0008b89:	6a 00                	push   0x0
c0008b8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b93:	e8 08 bc 01 00       	call   c00247a0 <__muldf3>
c0008b98:	59                   	pop    ecx
c0008b99:	59                   	pop    ecx
c0008b9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008b9e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ba2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ba6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008baa:	e8 c4 c4 01 00       	call   c0025073 <__truncdfsf2>
c0008baf:	83 c4 10             	add    esp,0x10
c0008bb2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bb6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bb9:	eb a8                	jmp    c0008b63 <src_short_to_float_array+0x8>
c0008bbb:	83 c4 18             	add    esp,0x18
c0008bbe:	5b                   	pop    ebx
c0008bbf:	c3                   	ret    

c0008bc0 <src_float_to_short_array>:
c0008bc0:	56                   	push   esi
c0008bc1:	53                   	push   ebx
c0008bc2:	83 ec 14             	sub    esp,0x14
c0008bc5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008bc9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bcd:	85 db                	test   ebx,ebx
c0008bcf:	0f 84 a4 00 00 00    	je     c0008c79 <src_float_to_short_array+0xb9>
c0008bd5:	83 ec 0c             	sub    esp,0xc
c0008bd8:	4b                   	dec    ebx
c0008bd9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008bdd:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008be0:	e8 b2 c5 01 00       	call   c0025197 <__extendsfdf2>
c0008be5:	83 c4 10             	add    esp,0x10
c0008be8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008bec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008bf0:	68 00 00 e0 41       	push   0x41e00000
c0008bf5:	6a 00                	push   0x0
c0008bf7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bff:	e8 9c bb 01 00       	call   c00247a0 <__muldf3>
c0008c04:	83 c4 10             	add    esp,0x10
c0008c07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c0f:	68 ff ff df 41       	push   0x41dfffff
c0008c14:	68 00 00 c0 ff       	push   0xffc00000
c0008c19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c21:	e8 47 c4 01 00       	call   c002506d <__gedf2>
c0008c26:	83 c4 10             	add    esp,0x10
c0008c29:	85 c0                	test   eax,eax
c0008c2b:	78 08                	js     c0008c35 <src_float_to_short_array+0x75>
c0008c2d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c33:	eb 98                	jmp    c0008bcd <src_float_to_short_array+0xd>
c0008c35:	68 00 00 e0 c1       	push   0xc1e00000
c0008c3a:	6a 00                	push   0x0
c0008c3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c44:	e8 28 c4 01 00       	call   c0025071 <__ledf2>
c0008c49:	83 c4 10             	add    esp,0x10
c0008c4c:	85 c0                	test   eax,eax
c0008c4e:	7f 0b                	jg     c0008c5b <src_float_to_short_array+0x9b>
c0008c50:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c56:	e9 72 ff ff ff       	jmp    c0008bcd <src_float_to_short_array+0xd>
c0008c5b:	50                   	push   eax
c0008c5c:	50                   	push   eax
c0008c5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c65:	e8 b6 c5 01 00       	call   c0025220 <lrint>
c0008c6a:	83 c4 10             	add    esp,0x10
c0008c6d:	c1 f8 10             	sar    eax,0x10
c0008c70:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c74:	e9 54 ff ff ff       	jmp    c0008bcd <src_float_to_short_array+0xd>
c0008c79:	83 c4 14             	add    esp,0x14
c0008c7c:	5b                   	pop    ebx
c0008c7d:	5e                   	pop    esi
c0008c7e:	c3                   	ret    

c0008c7f <src_int_to_float_array>:
c0008c7f:	53                   	push   ebx
c0008c80:	83 ec 18             	sub    esp,0x18
c0008c83:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008c87:	85 db                	test   ebx,ebx
c0008c89:	74 52                	je     c0008cdd <src_int_to_float_array+0x5e>
c0008c8b:	83 ec 0c             	sub    esp,0xc
c0008c8e:	4b                   	dec    ebx
c0008c8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008c93:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c96:	e8 68 c1 01 00       	call   c0024e03 <__floatsidf>
c0008c9b:	83 c4 10             	add    esp,0x10
c0008c9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ca2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ca6:	68 00 00 00 3e       	push   0x3e000000
c0008cab:	6a 00                	push   0x0
c0008cad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cb5:	e8 e6 ba 01 00       	call   c00247a0 <__muldf3>
c0008cba:	59                   	pop    ecx
c0008cbb:	59                   	pop    ecx
c0008cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008cc0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008cc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ccc:	e8 a2 c3 01 00       	call   c0025073 <__truncdfsf2>
c0008cd1:	83 c4 10             	add    esp,0x10
c0008cd4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd8:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008cdb:	eb aa                	jmp    c0008c87 <src_int_to_float_array+0x8>
c0008cdd:	83 c4 18             	add    esp,0x18
c0008ce0:	5b                   	pop    ebx
c0008ce1:	c3                   	ret    

c0008ce2 <src_float_to_int_array>:
c0008ce2:	56                   	push   esi
c0008ce3:	53                   	push   ebx
c0008ce4:	83 ec 14             	sub    esp,0x14
c0008ce7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008ceb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008cef:	85 db                	test   ebx,ebx
c0008cf1:	0f 84 a2 00 00 00    	je     c0008d99 <src_float_to_int_array+0xb7>
c0008cf7:	83 ec 0c             	sub    esp,0xc
c0008cfa:	4b                   	dec    ebx
c0008cfb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cff:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d02:	e8 90 c4 01 00       	call   c0025197 <__extendsfdf2>
c0008d07:	83 c4 10             	add    esp,0x10
c0008d0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	68 00 00 e0 41       	push   0x41e00000
c0008d17:	6a 00                	push   0x0
c0008d19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	e8 7a ba 01 00       	call   c00247a0 <__muldf3>
c0008d26:	83 c4 10             	add    esp,0x10
c0008d29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d2d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d31:	68 ff ff df 41       	push   0x41dfffff
c0008d36:	68 00 00 c0 ff       	push   0xffc00000
c0008d3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d43:	e8 25 c3 01 00       	call   c002506d <__gedf2>
c0008d48:	83 c4 10             	add    esp,0x10
c0008d4b:	85 c0                	test   eax,eax
c0008d4d:	78 09                	js     c0008d58 <src_float_to_int_array+0x76>
c0008d4f:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d56:	eb 97                	jmp    c0008cef <src_float_to_int_array+0xd>
c0008d58:	68 00 00 e0 c1       	push   0xc1e00000
c0008d5d:	6a 00                	push   0x0
c0008d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d67:	e8 05 c3 01 00       	call   c0025071 <__ledf2>
c0008d6c:	83 c4 10             	add    esp,0x10
c0008d6f:	85 c0                	test   eax,eax
c0008d71:	7f 0c                	jg     c0008d7f <src_float_to_int_array+0x9d>
c0008d73:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d7a:	e9 70 ff ff ff       	jmp    c0008cef <src_float_to_int_array+0xd>
c0008d7f:	50                   	push   eax
c0008d80:	50                   	push   eax
c0008d81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d89:	e8 92 c4 01 00       	call   c0025220 <lrint>
c0008d8e:	83 c4 10             	add    esp,0x10
c0008d91:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008d94:	e9 56 ff ff ff       	jmp    c0008cef <src_float_to_int_array+0xd>
c0008d99:	83 c4 14             	add    esp,0x14
c0008d9c:	5b                   	pop    ebx
c0008d9d:	5e                   	pop    esi
c0008d9e:	c3                   	ret    

c0008d9f <is_bad_src_ratio>:
c0008d9f:	83 ec 1c             	sub    esp,0x1c
c0008da2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008daa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008dae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008db2:	b8 00 00 00 00       	mov    eax,0x0
c0008db7:	ba 00 00 70 3f       	mov    edx,0x3f700000
c0008dbc:	52                   	push   edx
c0008dbd:	50                   	push   eax
c0008dbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc6:	e8 a4 c2 01 00       	call   c002506f <__ltdf2>
c0008dcb:	83 c4 10             	add    esp,0x10
c0008dce:	85 c0                	test   eax,eax
c0008dd0:	78 20                	js     c0008df2 <is_bad_src_ratio+0x53>
c0008dd2:	b8 00 00 00 00       	mov    eax,0x0
c0008dd7:	ba 00 00 70 40       	mov    edx,0x40700000
c0008ddc:	52                   	push   edx
c0008ddd:	50                   	push   eax
c0008dde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de6:	e8 66 c2 01 00       	call   c0025051 <__gtdf2>
c0008deb:	83 c4 10             	add    esp,0x10
c0008dee:	85 c0                	test   eax,eax
c0008df0:	7e 07                	jle    c0008df9 <is_bad_src_ratio+0x5a>
c0008df2:	b8 01 00 00 00       	mov    eax,0x1
c0008df7:	eb 05                	jmp    c0008dfe <is_bad_src_ratio+0x5f>
c0008df9:	b8 00 00 00 00       	mov    eax,0x0
c0008dfe:	83 c4 1c             	add    esp,0x1c
c0008e01:	c3                   	ret    

c0008e02 <fmod_one>:
c0008e02:	83 ec 2c             	sub    esp,0x2c
c0008e05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008e11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e15:	83 ec 08             	sub    esp,0x8
c0008e18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e20:	e8 fb c3 01 00       	call   c0025220 <lrint>
c0008e25:	83 c4 10             	add    esp,0x10
c0008e28:	83 ec 0c             	sub    esp,0xc
c0008e2b:	50                   	push   eax
c0008e2c:	e8 d2 bf 01 00       	call   c0024e03 <__floatsidf>
c0008e31:	83 c4 10             	add    esp,0x10
c0008e34:	52                   	push   edx
c0008e35:	50                   	push   eax
c0008e36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e3e:	e8 31 b9 01 00       	call   c0024774 <__subdf3>
c0008e43:	83 c4 10             	add    esp,0x10
c0008e46:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008e4a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008e4e:	b8 00 00 00 00       	mov    eax,0x0
c0008e53:	ba 00 00 00 00       	mov    edx,0x0
c0008e58:	52                   	push   edx
c0008e59:	50                   	push   eax
c0008e5a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e5e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e62:	e8 08 c2 01 00       	call   c002506f <__ltdf2>
c0008e67:	83 c4 10             	add    esp,0x10
c0008e6a:	85 c0                	test   eax,eax
c0008e6c:	79 1e                	jns    c0008e8c <fmod_one+0x8a>
c0008e6e:	b8 00 00 00 00       	mov    eax,0x0
c0008e73:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c0008e78:	52                   	push   edx
c0008e79:	50                   	push   eax
c0008e7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e82:	e8 9c b2 01 00       	call   c0024123 <__adddf3>
c0008e87:	83 c4 10             	add    esp,0x10
c0008e8a:	eb 08                	jmp    c0008e94 <fmod_one+0x92>
c0008e8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e94:	83 c4 2c             	add    esp,0x2c
c0008e97:	c3                   	ret    

c0008e98 <linear_vari_process>:
c0008e98:	55                   	push   ebp
c0008e99:	57                   	push   edi
c0008e9a:	56                   	push   esi
c0008e9b:	53                   	push   ebx
c0008e9c:	83 ec 3c             	sub    esp,0x3c
c0008e9f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008ea3:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008eab:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008eaf:	0f 8e f7 06 00 00    	jle    c00095ac <linear_vari_process+0x714>
c0008eb5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008eb9:	c7 44 24 28 05 00 00 00 	mov    DWORD PTR [esp+0x28],0x5
c0008ec1:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ec4:	85 db                	test   ebx,ebx
c0008ec6:	0f 84 e0 06 00 00    	je     c00095ac <linear_vari_process+0x714>
c0008ecc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ecf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008ed3:	74 19                	je     c0008eee <linear_vari_process+0x56>
c0008ed5:	31 d2                	xor    edx,edx
c0008ed7:	39 c2                	cmp    edx,eax
c0008ed9:	7d 0c                	jge    c0008ee7 <linear_vari_process+0x4f>
c0008edb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008edd:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008ee0:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008ee4:	42                   	inc    edx
c0008ee5:	eb f0                	jmp    c0008ed7 <linear_vari_process+0x3f>
c0008ee7:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008eee:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008ef1:	0f af d0             	imul   edx,eax
c0008ef4:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008ef7:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008efb:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008f02:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008f05:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008f0c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008f10:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008f13:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f15:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f1d:	57                   	push   edi
c0008f1e:	57                   	push   edi
c0008f1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f27:	e8 73 fe ff ff       	call   c0008d9f <is_bad_src_ratio>
c0008f2c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0008f30:	83 c4 10             	add    esp,0x10
c0008f33:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0008f38:	0f 85 66 06 00 00    	jne    c00095a4 <linear_vari_process+0x70c>
c0008f3e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008f42:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008f45:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008f48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f50:	68 00 00 f0 3f       	push   0x3ff00000
c0008f55:	6a 00                	push   0x0
c0008f57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f5f:	e8 0b c1 01 00       	call   c002506f <__ltdf2>
c0008f64:	83 c4 10             	add    esp,0x10
c0008f67:	85 c0                	test   eax,eax
c0008f69:	0f 89 89 02 00 00    	jns    c00091f8 <linear_vari_process+0x360>
c0008f6f:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008f72:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008f75:	0f 8d 7d 02 00 00    	jge    c00091f8 <linear_vari_process+0x360>
c0008f7b:	83 ec 0c             	sub    esp,0xc
c0008f7e:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008f81:	e8 7d be 01 00       	call   c0024e03 <__floatsidf>
c0008f86:	83 c4 10             	add    esp,0x10
c0008f89:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008f90:	68 00 00 f0 3f       	push   0x3ff00000
c0008f95:	6a 00                	push   0x0
c0008f97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9f:	e8 7f b1 01 00       	call   c0024123 <__adddf3>
c0008fa4:	83 c4 10             	add    esp,0x10
c0008fa7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008fab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008faf:	52                   	push   edx
c0008fb0:	50                   	push   eax
c0008fb1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fb5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fb9:	e8 e2 b7 01 00       	call   c00247a0 <__muldf3>
c0008fbe:	5d                   	pop    ebp
c0008fbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008fc3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008fc7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008fca:	e8 34 be 01 00       	call   c0024e03 <__floatsidf>
c0008fcf:	83 c4 10             	add    esp,0x10
c0008fd2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008fd6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008fda:	52                   	push   edx
c0008fdb:	50                   	push   eax
c0008fdc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fe4:	e8 3a b1 01 00       	call   c0024123 <__adddf3>
c0008fe9:	59                   	pop    ecx
c0008fea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008fee:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008ff2:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008ff5:	e8 09 be 01 00       	call   c0024e03 <__floatsidf>
c0008ffa:	83 c4 10             	add    esp,0x10
c0008ffd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009001:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009005:	52                   	push   edx
c0009006:	50                   	push   eax
c0009007:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000900b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000900f:	e8 59 c0 01 00       	call   c002506d <__gedf2>
c0009014:	83 c4 10             	add    esp,0x10
c0009017:	85 c0                	test   eax,eax
c0009019:	0f 89 d9 01 00 00    	jns    c00091f8 <linear_vari_process+0x360>
c000901f:	85 ff                	test   edi,edi
c0009021:	0f 8e f4 00 00 00    	jle    c000911b <linear_vari_process+0x283>
c0009027:	83 ec 10             	sub    esp,0x10
c000902a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000902d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009030:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0009034:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009037:	ff 30                	push   DWORD PTR [eax]
c0009039:	e8 36 b7 01 00       	call   c0024774 <__subdf3>
c000903e:	83 c4 18             	add    esp,0x18
c0009041:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009045:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009049:	52                   	push   edx
c000904a:	50                   	push   eax
c000904b:	e8 b0 c1 01 00       	call   c0025200 <fabs>
c0009050:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009054:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009058:	83 c4 10             	add    esp,0x10
c000905b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009060:	68 23 42 92 0c       	push   0xc924223
c0009065:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009069:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000906d:	e8 df bf 01 00       	call   c0025051 <__gtdf2>
c0009072:	83 c4 10             	add    esp,0x10
c0009075:	85 c0                	test   eax,eax
c0009077:	0f 8e 9e 00 00 00    	jle    c000911b <linear_vari_process+0x283>
c000907d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009081:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009084:	8b 00                	mov    eax,DWORD PTR [eax]
c0009086:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000908a:	89 04 24             	mov    DWORD PTR [esp],eax
c000908d:	52                   	push   edx
c000908e:	50                   	push   eax
c000908f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009092:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009095:	e8 da b6 01 00       	call   c0024774 <__subdf3>
c000909a:	59                   	pop    ecx
c000909b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000909f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00090a3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00090a6:	e8 58 bd 01 00       	call   c0024e03 <__floatsidf>
c00090ab:	83 c4 10             	add    esp,0x10
c00090ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00090b6:	52                   	push   edx
c00090b7:	50                   	push   eax
c00090b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c0:	e8 db b6 01 00       	call   c00247a0 <__muldf3>
c00090c5:	5f                   	pop    edi
c00090c6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00090ca:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00090ce:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00090d1:	e8 2d bd 01 00       	call   c0024e03 <__floatsidf>
c00090d6:	83 c4 10             	add    esp,0x10
c00090d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00090e1:	52                   	push   edx
c00090e2:	50                   	push   eax
c00090e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090eb:	e8 94 b9 01 00       	call   c0024a84 <__divdf3>
c00090f0:	83 c4 10             	add    esp,0x10
c00090f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00090f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00090fb:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00090ff:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009103:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009107:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000910b:	e8 13 b0 01 00       	call   c0024123 <__adddf3>
c0009110:	83 c4 10             	add    esp,0x10
c0009113:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009117:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000911b:	31 ff                	xor    edi,edi
c000911d:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009120:	0f 8e 9d 00 00 00    	jle    c00091c3 <linear_vari_process+0x32b>
c0009126:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009129:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c000912d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009130:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009134:	89 04 24             	mov    DWORD PTR [esp],eax
c0009137:	8b 06                	mov    eax,DWORD PTR [esi]
c0009139:	52                   	push   edx
c000913a:	52                   	push   edx
c000913b:	55                   	push   ebp
c000913c:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000913f:	47                   	inc    edi
c0009140:	e8 73 a9 01 00       	call   c0023ab8 <__subsf3>
c0009145:	89 04 24             	mov    DWORD PTR [esp],eax
c0009148:	e8 4a c0 01 00       	call   c0025197 <__extendsfdf2>
c000914d:	83 c4 10             	add    esp,0x10
c0009150:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009154:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009158:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000915c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009160:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009168:	e8 33 b6 01 00       	call   c00247a0 <__muldf3>
c000916d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009170:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009174:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009178:	e8 1a c0 01 00       	call   c0025197 <__extendsfdf2>
c000917d:	83 c4 10             	add    esp,0x10
c0009180:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009184:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009188:	52                   	push   edx
c0009189:	50                   	push   eax
c000918a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000918e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009192:	e8 8c af 01 00       	call   c0024123 <__adddf3>
c0009197:	59                   	pop    ecx
c0009198:	5d                   	pop    ebp
c0009199:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000919d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00091a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091a9:	e8 c5 be 01 00       	call   c0025073 <__truncdfsf2>
c00091ae:	83 c4 10             	add    esp,0x10
c00091b1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00091b4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00091b8:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c00091bb:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c00091be:	e9 5a ff ff ff       	jmp    c000911d <linear_vari_process+0x285>
c00091c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091cb:	68 00 00 f0 3f       	push   0x3ff00000
c00091d0:	6a 00                	push   0x0
c00091d2:	e8 ad b8 01 00       	call   c0024a84 <__divdf3>
c00091d7:	83 c4 10             	add    esp,0x10
c00091da:	89 04 24             	mov    DWORD PTR [esp],eax
c00091dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e1:	52                   	push   edx
c00091e2:	50                   	push   eax
c00091e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091eb:	e8 33 af 01 00       	call   c0024123 <__adddf3>
c00091f0:	83 c4 10             	add    esp,0x10
c00091f3:	e9 50 fd ff ff       	jmp    c0008f48 <linear_vari_process+0xb0>
c00091f8:	50                   	push   eax
c00091f9:	50                   	push   eax
c00091fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009202:	e8 fb fb ff ff       	call   c0008e02 <fmod_one>
c0009207:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000920a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000920e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009212:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009216:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000921a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000921e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009222:	e8 4d b5 01 00       	call   c0024774 <__subdf3>
c0009227:	83 c4 18             	add    esp,0x18
c000922a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000922e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009232:	52                   	push   edx
c0009233:	50                   	push   eax
c0009234:	e8 e7 bf 01 00       	call   c0025220 <lrint>
c0009239:	83 c4 10             	add    esp,0x10
c000923c:	0f af f8             	imul   edi,eax
c000923f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009242:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009245:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009248:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000924b:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000924e:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009252:	0f 8d b4 02 00 00    	jge    c000950c <linear_vari_process+0x674>
c0009258:	83 ec 0c             	sub    esp,0xc
c000925b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000925e:	e8 a0 bb 01 00       	call   c0024e03 <__floatsidf>
c0009263:	83 c4 10             	add    esp,0x10
c0009266:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000926a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000926e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009272:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009276:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000927a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000927e:	e8 1d b5 01 00       	call   c00247a0 <__muldf3>
c0009283:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009286:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000928a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000928e:	e8 70 bb 01 00       	call   c0024e03 <__floatsidf>
c0009293:	83 c4 10             	add    esp,0x10
c0009296:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000929a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000929e:	52                   	push   edx
c000929f:	50                   	push   eax
c00092a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092a8:	e8 76 ae 01 00       	call   c0024123 <__adddf3>
c00092ad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092b4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b8:	e8 46 bb 01 00       	call   c0024e03 <__floatsidf>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092c4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092c8:	52                   	push   edx
c00092c9:	50                   	push   eax
c00092ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d2:	e8 98 bd 01 00       	call   c002506f <__ltdf2>
c00092d7:	83 c4 10             	add    esp,0x10
c00092da:	85 c0                	test   eax,eax
c00092dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00092e0:	0f 89 26 02 00 00    	jns    c000950c <linear_vari_process+0x674>
c00092e6:	85 c9                	test   ecx,ecx
c00092e8:	0f 8e f5 00 00 00    	jle    c00093e3 <linear_vari_process+0x54b>
c00092ee:	83 ec 10             	sub    esp,0x10
c00092f1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092f4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00092f7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00092fb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092fe:	ff 30                	push   DWORD PTR [eax]
c0009300:	e8 6f b4 01 00       	call   c0024774 <__subdf3>
c0009305:	83 c4 18             	add    esp,0x18
c0009308:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000930c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009310:	52                   	push   edx
c0009311:	50                   	push   eax
c0009312:	e8 e9 be 01 00       	call   c0025200 <fabs>
c0009317:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000931b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000931f:	83 c4 10             	add    esp,0x10
c0009322:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009327:	68 23 42 92 0c       	push   0xc924223
c000932c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009330:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009334:	e8 18 bd 01 00       	call   c0025051 <__gtdf2>
c0009339:	83 c4 10             	add    esp,0x10
c000933c:	85 c0                	test   eax,eax
c000933e:	0f 8e 9f 00 00 00    	jle    c00093e3 <linear_vari_process+0x54b>
c0009344:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009348:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000934b:	8b 00                	mov    eax,DWORD PTR [eax]
c000934d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009351:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009355:	52                   	push   edx
c0009356:	50                   	push   eax
c0009357:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000935a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000935d:	e8 12 b4 01 00       	call   c0024774 <__subdf3>
c0009362:	5f                   	pop    edi
c0009363:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009367:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000936b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000936e:	e8 90 ba 01 00       	call   c0024e03 <__floatsidf>
c0009373:	83 c4 10             	add    esp,0x10
c0009376:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000937a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000937e:	52                   	push   edx
c000937f:	50                   	push   eax
c0009380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009384:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009388:	e8 13 b4 01 00       	call   c00247a0 <__muldf3>
c000938d:	5d                   	pop    ebp
c000938e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009392:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009396:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009399:	e8 65 ba 01 00       	call   c0024e03 <__floatsidf>
c000939e:	83 c4 10             	add    esp,0x10
c00093a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093a9:	52                   	push   edx
c00093aa:	50                   	push   eax
c00093ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093b3:	e8 cc b6 01 00       	call   c0024a84 <__divdf3>
c00093b8:	83 c4 10             	add    esp,0x10
c00093bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093bf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093c7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093d3:	e8 4b ad 01 00       	call   c0024123 <__adddf3>
c00093d8:	83 c4 10             	add    esp,0x10
c00093db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093e3:	31 ff                	xor    edi,edi
c00093e5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00093e8:	39 f8                	cmp    eax,edi
c00093ea:	0f 8e ac 00 00 00    	jle    c000949c <linear_vari_process+0x604>
c00093f0:	8b 16                	mov    edx,DWORD PTR [esi]
c00093f2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00093f5:	29 c1                	sub    ecx,eax
c00093f7:	89 c8                	mov    eax,ecx
c00093f9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093fc:	01 f8                	add    eax,edi
c00093fe:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009402:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c0009405:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009408:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000940c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000940f:	51                   	push   ecx
c0009410:	01 f8                	add    eax,edi
c0009412:	51                   	push   ecx
c0009413:	47                   	inc    edi
c0009414:	55                   	push   ebp
c0009415:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009418:	e8 9b a6 01 00       	call   c0023ab8 <__subsf3>
c000941d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009420:	e8 72 bd 01 00       	call   c0025197 <__extendsfdf2>
c0009425:	83 c4 10             	add    esp,0x10
c0009428:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000942c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009430:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009434:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009438:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000943c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009440:	e8 5b b3 01 00       	call   c00247a0 <__muldf3>
c0009445:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009448:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000944c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009450:	e8 42 bd 01 00       	call   c0025197 <__extendsfdf2>
c0009455:	83 c4 10             	add    esp,0x10
c0009458:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000945c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009460:	52                   	push   edx
c0009461:	50                   	push   eax
c0009462:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009466:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000946a:	e8 b4 ac 01 00       	call   c0024123 <__adddf3>
c000946f:	5d                   	pop    ebp
c0009470:	59                   	pop    ecx
c0009471:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009475:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009479:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000947d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009481:	e8 ed bb 01 00       	call   c0025073 <__truncdfsf2>
c0009486:	83 c4 10             	add    esp,0x10
c0009489:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000948d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009491:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009494:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009497:	e9 49 ff ff ff       	jmp    c00093e5 <linear_vari_process+0x54d>
c000949c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a4:	68 00 00 f0 3f       	push   0x3ff00000
c00094a9:	6a 00                	push   0x0
c00094ab:	e8 d4 b5 01 00       	call   c0024a84 <__divdf3>
c00094b0:	83 c4 10             	add    esp,0x10
c00094b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00094b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00094bb:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00094bf:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00094c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094cb:	e8 53 ac 01 00       	call   c0024123 <__adddf3>
c00094d0:	59                   	pop    ecx
c00094d1:	5f                   	pop    edi
c00094d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094d6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094e2:	e8 1b f9 ff ff       	call   c0008e02 <fmod_one>
c00094e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009502:	e8 6d b2 01 00       	call   c0024774 <__subdf3>
c0009507:	e9 1b fd ff ff       	jmp    c0009227 <linear_vari_process+0x38f>
c000950c:	39 fd                	cmp    ebp,edi
c000950e:	7d 38                	jge    c0009548 <linear_vari_process+0x6b0>
c0009510:	83 ec 0c             	sub    esp,0xc
c0009513:	89 f8                	mov    eax,edi
c0009515:	29 e8                	sub    eax,ebp
c0009517:	99                   	cdq    
c0009518:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000951b:	50                   	push   eax
c000951c:	e8 e2 b8 01 00       	call   c0024e03 <__floatsidf>
c0009521:	83 c4 10             	add    esp,0x10
c0009524:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009528:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000952c:	52                   	push   edx
c000952d:	50                   	push   eax
c000952e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009532:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009536:	e8 e8 ab 01 00       	call   c0024123 <__adddf3>
c000953b:	83 c4 10             	add    esp,0x10
c000953e:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009541:	89 04 24             	mov    DWORD PTR [esp],eax
c0009544:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009548:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000954c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000954f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009553:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009556:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009559:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000955c:	85 c0                	test   eax,eax
c000955e:	7f 27                	jg     c0009587 <linear_vari_process+0x6ef>
c0009560:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009568:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000956c:	89 01                	mov    DWORD PTR [ecx],eax
c000956e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009571:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009574:	99                   	cdq    
c0009575:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009578:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000957b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000957e:	99                   	cdq    
c000957f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009582:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0009585:	eb 25                	jmp    c00095ac <linear_vari_process+0x714>
c0009587:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000958a:	31 d2                	xor    edx,edx
c000958c:	29 c8                	sub    eax,ecx
c000958e:	c1 e0 02             	shl    eax,0x2
c0009591:	39 d1                	cmp    ecx,edx
c0009593:	7e cb                	jle    c0009560 <linear_vari_process+0x6c8>
c0009595:	8b 3e                	mov    edi,DWORD PTR [esi]
c0009597:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000959a:	83 c0 04             	add    eax,0x4
c000959d:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095a1:	42                   	inc    edx
c00095a2:	eb ed                	jmp    c0009591 <linear_vari_process+0x6f9>
c00095a4:	c7 44 24 28 16 00 00 00 	mov    DWORD PTR [esp+0x28],0x16
c00095ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00095b0:	83 c4 3c             	add    esp,0x3c
c00095b3:	5b                   	pop    ebx
c00095b4:	5e                   	pop    esi
c00095b5:	5f                   	pop    edi
c00095b6:	5d                   	pop    ebp
c00095b7:	c3                   	ret    

c00095b8 <linear_reset>:
c00095b8:	83 ec 0c             	sub    esp,0xc
c00095bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095bf:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095c2:	85 c0                	test   eax,eax
c00095c4:	74 20                	je     c00095e6 <linear_reset+0x2e>
c00095c6:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095c9:	83 c0 1c             	add    eax,0x1c
c00095cc:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095cf:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095d6:	c1 e2 02             	shl    edx,0x2
c00095d9:	51                   	push   ecx
c00095da:	52                   	push   edx
c00095db:	6a 00                	push   0x0
c00095dd:	50                   	push   eax
c00095de:	e8 e2 70 ff ff       	call   c00006c5 <memset>
c00095e3:	83 c4 10             	add    esp,0x10
c00095e6:	83 c4 0c             	add    esp,0xc
c00095e9:	c3                   	ret    

c00095ea <linear_get_name>:
c00095ea:	31 c0                	xor    eax,eax
c00095ec:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095f1:	75 05                	jne    c00095f8 <linear_get_name+0xe>
c00095f3:	b8 60 69 02 c0       	mov    eax,0xc0026960
c00095f8:	c3                   	ret    

c00095f9 <linear_get_description>:
c00095f9:	31 c0                	xor    eax,eax
c00095fb:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009600:	75 05                	jne    c0009607 <linear_get_description+0xe>
c0009602:	b8 74 69 02 c0       	mov    eax,0xc0026974
c0009607:	c3                   	ret    

c0009608 <linear_set_converter>:
c0009608:	53                   	push   ebx
c0009609:	b8 0a 00 00 00       	mov    eax,0xa
c000960e:	83 ec 08             	sub    esp,0x8
c0009611:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009615:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000961a:	75 6e                	jne    c000968a <linear_set_converter+0x82>
c000961c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000961f:	85 c0                	test   eax,eax
c0009621:	74 13                	je     c0009636 <linear_set_converter+0x2e>
c0009623:	83 ec 0c             	sub    esp,0xc
c0009626:	50                   	push   eax
c0009627:	e8 52 5b 00 00       	call   c000f17e <free>
c000962c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009633:	83 c4 10             	add    esp,0x10
c0009636:	50                   	push   eax
c0009637:	50                   	push   eax
c0009638:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000963b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009642:	50                   	push   eax
c0009643:	6a 01                	push   0x1
c0009645:	e8 54 5b 00 00       	call   c000f19e <calloc>
c000964a:	83 c4 10             	add    esp,0x10
c000964d:	89 c2                	mov    edx,eax
c000964f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009652:	85 d2                	test   edx,edx
c0009654:	b8 01 00 00 00       	mov    eax,0x1
c0009659:	74 2f                	je     c000968a <linear_set_converter+0x82>
c000965b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000965e:	83 ec 0c             	sub    esp,0xc
c0009661:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009664:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000966a:	c7 43 24 98 8e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008e98
c0009671:	c7 43 20 98 8e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008e98
c0009678:	c7 43 28 b8 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095b8
c000967f:	53                   	push   ebx
c0009680:	e8 33 ff ff ff       	call   c00095b8 <linear_reset>
c0009685:	83 c4 10             	add    esp,0x10
c0009688:	31 c0                	xor    eax,eax
c000968a:	83 c4 08             	add    esp,0x8
c000968d:	5b                   	pop    ebx
c000968e:	c3                   	ret    

c000968f <is_bad_src_ratio>:
c000968f:	83 ec 1c             	sub    esp,0x1c
c0009692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009696:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000969a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000969e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00096a2:	b8 00 00 00 00       	mov    eax,0x0
c00096a7:	ba 00 00 70 3f       	mov    edx,0x3f700000
c00096ac:	52                   	push   edx
c00096ad:	50                   	push   eax
c00096ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b6:	e8 b4 b9 01 00       	call   c002506f <__ltdf2>
c00096bb:	83 c4 10             	add    esp,0x10
c00096be:	85 c0                	test   eax,eax
c00096c0:	78 20                	js     c00096e2 <is_bad_src_ratio+0x53>
c00096c2:	b8 00 00 00 00       	mov    eax,0x0
c00096c7:	ba 00 00 70 40       	mov    edx,0x40700000
c00096cc:	52                   	push   edx
c00096cd:	50                   	push   eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 76 b9 01 00       	call   c0025051 <__gtdf2>
c00096db:	83 c4 10             	add    esp,0x10
c00096de:	85 c0                	test   eax,eax
c00096e0:	7e 07                	jle    c00096e9 <is_bad_src_ratio+0x5a>
c00096e2:	b8 01 00 00 00       	mov    eax,0x1
c00096e7:	eb 05                	jmp    c00096ee <is_bad_src_ratio+0x5f>
c00096e9:	b8 00 00 00 00       	mov    eax,0x0
c00096ee:	83 c4 1c             	add    esp,0x1c
c00096f1:	c3                   	ret    

c00096f2 <int_to_fp>:
c00096f2:	c1 e0 0c             	shl    eax,0xc
c00096f5:	c3                   	ret    

c00096f6 <fp_to_int>:
c00096f6:	c1 f8 0c             	sar    eax,0xc
c00096f9:	c3                   	ret    

c00096fa <fp_fraction_part>:
c00096fa:	25 ff 0f 00 00       	and    eax,0xfff
c00096ff:	c3                   	ret    

c0009700 <fp_to_double>:
c0009700:	83 ec 1c             	sub    esp,0x1c
c0009703:	e8 f2 ff ff ff       	call   c00096fa <fp_fraction_part>
c0009708:	83 ec 0c             	sub    esp,0xc
c000970b:	50                   	push   eax
c000970c:	e8 f2 b6 01 00       	call   c0024e03 <__floatsidf>
c0009711:	83 c4 10             	add    esp,0x10
c0009714:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009718:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000971c:	68 00 00 30 3f       	push   0x3f300000
c0009721:	6a 00                	push   0x0
c0009723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009727:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000972b:	e8 70 b0 01 00       	call   c00247a0 <__muldf3>
c0009730:	83 c4 2c             	add    esp,0x2c
c0009733:	c3                   	ret    

c0009734 <calc_output_single>:
c0009734:	55                   	push   ebp
c0009735:	57                   	push   edi
c0009736:	56                   	push   esi
c0009737:	89 c6                	mov    esi,eax
c0009739:	53                   	push   ebx
c000973a:	89 d3                	mov    ebx,edx
c000973c:	83 ec 4c             	sub    esp,0x4c
c000973f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009743:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009746:	e8 a7 ff ff ff       	call   c00096f2 <int_to_fp>
c000974b:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c000974e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009752:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009756:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000975a:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000975d:	99                   	cdq    
c000975e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009766:	f7 fb                	idiv   ebx
c0009768:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009770:	89 da                	mov    edx,ebx
c0009772:	0f af d0             	imul   edx,eax
c0009775:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009779:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000977d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009781:	29 c2                	sub    edx,eax
c0009783:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000978a:	83 c5 04             	add    ebp,0x4
c000978d:	e8 6e ff ff ff       	call   c0009700 <fp_to_double>
c0009792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009796:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000979a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000979e:	e8 53 ff ff ff       	call   c00096f6 <fp_to_int>
c00097a3:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c00097a6:	52                   	push   edx
c00097a7:	52                   	push   edx
c00097a8:	51                   	push   ecx
c00097a9:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c00097ad:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00097b1:	e8 02 a3 01 00       	call   c0023ab8 <__subsf3>
c00097b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00097b9:	e8 d9 b9 01 00       	call   c0025197 <__extendsfdf2>
c00097be:	83 c4 10             	add    esp,0x10
c00097c1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097c5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097d9:	e8 c2 af 01 00       	call   c00247a0 <__muldf3>
c00097de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00097e2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00097e6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00097e9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00097ed:	e8 a5 b9 01 00       	call   c0025197 <__extendsfdf2>
c00097f2:	83 c4 10             	add    esp,0x10
c00097f5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097f9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097fd:	52                   	push   edx
c00097fe:	50                   	push   eax
c00097ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009803:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009807:	e8 17 a9 01 00       	call   c0024123 <__adddf3>
c000980c:	59                   	pop    ecx
c000980d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009811:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009815:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c000981b:	e8 77 b9 01 00       	call   c0025197 <__extendsfdf2>
c0009820:	83 c4 10             	add    esp,0x10
c0009823:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009827:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000982b:	52                   	push   edx
c000982c:	50                   	push   eax
c000982d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009831:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009835:	e8 66 af 01 00       	call   c00247a0 <__muldf3>
c000983a:	83 c4 10             	add    esp,0x10
c000983d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009841:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009845:	52                   	push   edx
c0009846:	50                   	push   eax
c0009847:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000984b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000984f:	e8 cf a8 01 00       	call   c0024123 <__adddf3>
c0009854:	83 c4 10             	add    esp,0x10
c0009857:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000985b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000985f:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009863:	0f 89 1d ff ff ff    	jns    c0009786 <calc_output_single+0x52>
c0009869:	89 d9                	mov    ecx,ebx
c000986b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000986f:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009873:	89 dd                	mov    ebp,ebx
c0009875:	29 c8                	sub    eax,ecx
c0009877:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000987f:	99                   	cdq    
c0009880:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009888:	f7 fb                	idiv   ebx
c000988a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000988e:	0f af e8             	imul   ebp,eax
c0009891:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009895:	01 cd                	add    ebp,ecx
c0009897:	8d 34 86             	lea    esi,[esi+eax*4]
c000989a:	89 e8                	mov    eax,ebp
c000989c:	83 ee 04             	sub    esi,0x4
c000989f:	e8 5c fe ff ff       	call   c0009700 <fp_to_double>
c00098a4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098ac:	89 e8                	mov    eax,ebp
c00098ae:	29 dd                	sub    ebp,ebx
c00098b0:	e8 41 fe ff ff       	call   c00096f6 <fp_to_int>
c00098b5:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c00098b8:	52                   	push   edx
c00098b9:	52                   	push   edx
c00098ba:	51                   	push   ecx
c00098bb:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c00098bf:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00098c3:	e8 f0 a1 01 00       	call   c0023ab8 <__subsf3>
c00098c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00098cb:	e8 c7 b8 01 00       	call   c0025197 <__extendsfdf2>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098d7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098eb:	e8 b0 ae 01 00       	call   c00247a0 <__muldf3>
c00098f0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00098f4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00098f8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00098fb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00098ff:	e8 93 b8 01 00       	call   c0025197 <__extendsfdf2>
c0009904:	83 c4 10             	add    esp,0x10
c0009907:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000990b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000990f:	52                   	push   edx
c0009910:	50                   	push   eax
c0009911:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009915:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009919:	e8 05 a8 01 00       	call   c0024123 <__adddf3>
c000991e:	59                   	pop    ecx
c000991f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009923:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009927:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000992d:	e8 65 b8 01 00       	call   c0025197 <__extendsfdf2>
c0009932:	83 c4 10             	add    esp,0x10
c0009935:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009939:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000993d:	52                   	push   edx
c000993e:	50                   	push   eax
c000993f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009943:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009947:	e8 54 ae 01 00       	call   c00247a0 <__muldf3>
c000994c:	83 c4 10             	add    esp,0x10
c000994f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009953:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009957:	52                   	push   edx
c0009958:	50                   	push   eax
c0009959:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000995d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009961:	e8 bd a7 01 00       	call   c0024123 <__adddf3>
c0009966:	83 c4 10             	add    esp,0x10
c0009969:	85 ed                	test   ebp,ebp
c000996b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000996f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009973:	0f 8f 21 ff ff ff    	jg     c000989a <calc_output_single+0x166>
c0009979:	52                   	push   edx
c000997a:	50                   	push   eax
c000997b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000997f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009983:	e8 9b a7 01 00       	call   c0024123 <__adddf3>
c0009988:	83 c4 5c             	add    esp,0x5c
c000998b:	5b                   	pop    ebx
c000998c:	5e                   	pop    esi
c000998d:	5f                   	pop    edi
c000998e:	5d                   	pop    ebp
c000998f:	c3                   	ret    

c0009990 <calc_output_stereo>:
c0009990:	55                   	push   ebp
c0009991:	89 cd                	mov    ebp,ecx
c0009993:	57                   	push   edi
c0009994:	56                   	push   esi
c0009995:	53                   	push   ebx
c0009996:	89 c3                	mov    ebx,eax
c0009998:	83 ec 6c             	sub    esp,0x6c
c000999b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000999f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00099a6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c00099ad:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00099b1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00099b5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00099b8:	e8 35 fd ff ff       	call   c00096f2 <int_to_fp>
c00099bd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00099c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099c9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00099d1:	29 c8                	sub    eax,ecx
c00099d3:	99                   	cdq    
c00099d4:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c00099d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00099dc:	0f af d0             	imul   edx,eax
c00099df:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00099e2:	31 d2                	xor    edx,edx
c00099e4:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00099e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00099ec:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c00099ef:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00099f3:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c00099f6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00099fa:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00099fe:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009a01:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009a06:	29 c1                	sub    ecx,eax
c0009a08:	31 c0                	xor    eax,eax
c0009a0a:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009a0d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009a11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a15:	83 c7 08             	add    edi,0x8
c0009a18:	e8 e3 fc ff ff       	call   c0009700 <fp_to_double>
c0009a1d:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009a21:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009a25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a29:	e8 c8 fc ff ff       	call   c00096f6 <fp_to_int>
c0009a2e:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009a31:	52                   	push   edx
c0009a32:	52                   	push   edx
c0009a33:	51                   	push   ecx
c0009a34:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009a38:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009a3c:	e8 77 a0 01 00       	call   c0023ab8 <__subsf3>
c0009a41:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a44:	e8 4e b7 01 00       	call   c0025197 <__extendsfdf2>
c0009a49:	83 c4 10             	add    esp,0x10
c0009a4c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a50:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a54:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a58:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a5c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a60:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a64:	e8 37 ad 01 00       	call   c00247a0 <__muldf3>
c0009a69:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a6d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a71:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a74:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a78:	e8 1a b7 01 00       	call   c0025197 <__extendsfdf2>
c0009a7d:	83 c4 10             	add    esp,0x10
c0009a80:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a84:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a88:	52                   	push   edx
c0009a89:	50                   	push   eax
c0009a8a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a8e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a92:	e8 8c a6 01 00       	call   c0024123 <__adddf3>
c0009a97:	59                   	pop    ecx
c0009a98:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a9c:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009aa0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009aa6:	e8 ec b6 01 00       	call   c0025197 <__extendsfdf2>
c0009aab:	83 c4 10             	add    esp,0x10
c0009aae:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ab2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ab6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aba:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009abe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ac2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ac6:	e8 d5 ac 01 00       	call   c00247a0 <__muldf3>
c0009acb:	83 c4 10             	add    esp,0x10
c0009ace:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ad2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ad6:	52                   	push   edx
c0009ad7:	50                   	push   eax
c0009ad8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009adc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ae0:	e8 3e a6 01 00       	call   c0024123 <__adddf3>
c0009ae5:	59                   	pop    ecx
c0009ae6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009aea:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009aee:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009af4:	e8 9e b6 01 00       	call   c0025197 <__extendsfdf2>
c0009af9:	83 c4 10             	add    esp,0x10
c0009afc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009b00:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009b04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009b08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009b0c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009b10:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009b14:	e8 87 ac 01 00       	call   c00247a0 <__muldf3>
c0009b19:	83 c4 10             	add    esp,0x10
c0009b1c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009b20:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009b24:	52                   	push   edx
c0009b25:	50                   	push   eax
c0009b26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b2e:	e8 f0 a5 01 00       	call   c0024123 <__adddf3>
c0009b33:	83 c4 10             	add    esp,0x10
c0009b36:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009b3a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b3e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b42:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009b46:	0f 89 c5 fe ff ff    	jns    c0009a11 <calc_output_stereo+0x81>
c0009b4c:	29 e9                	sub    ecx,ebp
c0009b4e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009b52:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009b56:	29 c8                	sub    eax,ecx
c0009b58:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009b60:	99                   	cdq    
c0009b61:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b65:	31 d2                	xor    edx,edx
c0009b67:	0f af f8             	imul   edi,eax
c0009b6a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b6e:	40                   	inc    eax
c0009b6f:	01 cf                	add    edi,ecx
c0009b71:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b76:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b7a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b82:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b85:	31 c0                	xor    eax,eax
c0009b87:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b8b:	89 f8                	mov    eax,edi
c0009b8d:	83 eb 08             	sub    ebx,0x8
c0009b90:	e8 6b fb ff ff       	call   c0009700 <fp_to_double>
c0009b95:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b99:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b9d:	89 f8                	mov    eax,edi
c0009b9f:	e8 52 fb ff ff       	call   c00096f6 <fp_to_int>
c0009ba4:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009ba7:	52                   	push   edx
c0009ba8:	52                   	push   edx
c0009ba9:	55                   	push   ebp
c0009baa:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bae:	e8 05 9f 01 00       	call   c0023ab8 <__subsf3>
c0009bb3:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bb6:	e8 dc b5 01 00       	call   c0025197 <__extendsfdf2>
c0009bbb:	83 c4 10             	add    esp,0x10
c0009bbe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bc2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bc6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bd6:	e8 c5 ab 01 00       	call   c00247a0 <__muldf3>
c0009bdb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009bde:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009be2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009be6:	e8 ac b5 01 00       	call   c0025197 <__extendsfdf2>
c0009beb:	83 c4 10             	add    esp,0x10
c0009bee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bf2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bf6:	52                   	push   edx
c0009bf7:	50                   	push   eax
c0009bf8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bfc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009c00:	e8 1e a5 01 00       	call   c0024123 <__adddf3>
c0009c05:	59                   	pop    ecx
c0009c06:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009c0a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009c0e:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009c14:	e8 7e b5 01 00       	call   c0025197 <__extendsfdf2>
c0009c19:	83 c4 10             	add    esp,0x10
c0009c1c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c20:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c28:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c30:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c34:	e8 67 ab 01 00       	call   c00247a0 <__muldf3>
c0009c39:	83 c4 10             	add    esp,0x10
c0009c3c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c40:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c44:	52                   	push   edx
c0009c45:	50                   	push   eax
c0009c46:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c4a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c4e:	e8 d0 a4 01 00       	call   c0024123 <__adddf3>
c0009c53:	5d                   	pop    ebp
c0009c54:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009c58:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009c5c:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009c62:	e8 30 b5 01 00       	call   c0025197 <__extendsfdf2>
c0009c67:	83 c4 10             	add    esp,0x10
c0009c6a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c6e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c72:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c7a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c7e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c82:	e8 19 ab 01 00       	call   c00247a0 <__muldf3>
c0009c87:	83 c4 10             	add    esp,0x10
c0009c8a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c8e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c92:	52                   	push   edx
c0009c93:	50                   	push   eax
c0009c94:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c98:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c9c:	e8 82 a4 01 00       	call   c0024123 <__adddf3>
c0009ca1:	83 c4 10             	add    esp,0x10
c0009ca4:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009ca8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cac:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009cb0:	85 ff                	test   edi,edi
c0009cb2:	0f 8f d3 fe ff ff    	jg     c0009b8b <calc_output_stereo+0x1fb>
c0009cb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 56 a4 01 00       	call   c0024123 <__adddf3>
c0009ccd:	83 c4 10             	add    esp,0x10
c0009cd0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cd8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cdc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ce0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ce4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ce8:	e8 b3 aa 01 00       	call   c00247a0 <__muldf3>
c0009ced:	59                   	pop    ecx
c0009cee:	5b                   	pop    ebx
c0009cef:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009cf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009cf7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cff:	e8 6f b3 01 00       	call   c0025073 <__truncdfsf2>
c0009d04:	83 c4 10             	add    esp,0x10
c0009d07:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009d0e:	89 03                	mov    DWORD PTR [ebx],eax
c0009d10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d20:	e8 fe a3 01 00       	call   c0024123 <__adddf3>
c0009d25:	83 c4 10             	add    esp,0x10
c0009d28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d2c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d30:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d34:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d40:	e8 5b aa 01 00       	call   c00247a0 <__muldf3>
c0009d45:	5e                   	pop    esi
c0009d46:	5f                   	pop    edi
c0009d47:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d4b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d57:	e8 17 b3 01 00       	call   c0025073 <__truncdfsf2>
c0009d5c:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009d63:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009d66:	83 c4 7c             	add    esp,0x7c
c0009d69:	5b                   	pop    ebx
c0009d6a:	5e                   	pop    esi
c0009d6b:	5f                   	pop    edi
c0009d6c:	5d                   	pop    ebp
c0009d6d:	c3                   	ret    

c0009d6e <calc_output_quad>:
c0009d6e:	55                   	push   ebp
c0009d6f:	57                   	push   edi
c0009d70:	56                   	push   esi
c0009d71:	89 c6                	mov    esi,eax
c0009d73:	53                   	push   ebx
c0009d74:	83 ec 7c             	sub    esp,0x7c
c0009d77:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d7b:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d7f:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d86:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d8d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d91:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d95:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d98:	e8 55 f9 ff ff       	call   c00096f2 <int_to_fp>
c0009d9d:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009da0:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009da3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009da7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009dab:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009daf:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009db3:	99                   	cdq    
c0009db4:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009db8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009dbc:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009dbf:	31 d2                	xor    edx,edx
c0009dc1:	0f af d8             	imul   ebx,eax
c0009dc4:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009dcc:	0f af c7             	imul   eax,edi
c0009dcf:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009dd3:	29 c1                	sub    ecx,eax
c0009dd5:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009ddd:	31 c0                	xor    eax,eax
c0009ddf:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009de2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009de6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009df6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009dfa:	89 d8                	mov    eax,ebx
c0009dfc:	83 c7 10             	add    edi,0x10
c0009dff:	e8 fc f8 ff ff       	call   c0009700 <fp_to_double>
c0009e04:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009e08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e0c:	89 d8                	mov    eax,ebx
c0009e0e:	e8 e3 f8 ff ff       	call   c00096f6 <fp_to_int>
c0009e13:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009e17:	52                   	push   edx
c0009e18:	52                   	push   edx
c0009e19:	51                   	push   ecx
c0009e1a:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009e1e:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009e22:	e8 91 9c 01 00       	call   c0023ab8 <__subsf3>
c0009e27:	89 04 24             	mov    DWORD PTR [esp],eax
c0009e2a:	e8 68 b3 01 00       	call   c0025197 <__extendsfdf2>
c0009e2f:	83 c4 10             	add    esp,0x10
c0009e32:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e36:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e42:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e46:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e4a:	e8 51 a9 01 00       	call   c00247a0 <__muldf3>
c0009e4f:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009e53:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e57:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	e8 34 b3 01 00       	call   c0025197 <__extendsfdf2>
c0009e63:	83 c4 10             	add    esp,0x10
c0009e66:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e6a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e6e:	52                   	push   edx
c0009e6f:	50                   	push   eax
c0009e70:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e74:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e78:	e8 a6 a2 01 00       	call   c0024123 <__adddf3>
c0009e7d:	59                   	pop    ecx
c0009e7e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e82:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e86:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e8c:	e8 06 b3 01 00       	call   c0025197 <__extendsfdf2>
c0009e91:	83 c4 10             	add    esp,0x10
c0009e94:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e98:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ea8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009eac:	e8 ef a8 01 00       	call   c00247a0 <__muldf3>
c0009eb1:	83 c4 10             	add    esp,0x10
c0009eb4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eb8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ebc:	52                   	push   edx
c0009ebd:	50                   	push   eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	e8 58 a2 01 00       	call   c0024123 <__adddf3>
c0009ecb:	59                   	pop    ecx
c0009ecc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009ed0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009ed4:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009eda:	e8 b8 b2 01 00       	call   c0025197 <__extendsfdf2>
c0009edf:	83 c4 10             	add    esp,0x10
c0009ee2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ee6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009eea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ef2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ef6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009efa:	e8 a1 a8 01 00       	call   c00247a0 <__muldf3>
c0009eff:	83 c4 10             	add    esp,0x10
c0009f02:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f06:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f0a:	52                   	push   edx
c0009f0b:	50                   	push   eax
c0009f0c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f10:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f14:	e8 0a a2 01 00       	call   c0024123 <__adddf3>
c0009f19:	59                   	pop    ecx
c0009f1a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009f1e:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009f22:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009f28:	e8 6a b2 01 00       	call   c0025197 <__extendsfdf2>
c0009f2d:	83 c4 10             	add    esp,0x10
c0009f30:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f34:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f40:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f44:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f48:	e8 53 a8 01 00       	call   c00247a0 <__muldf3>
c0009f4d:	83 c4 10             	add    esp,0x10
c0009f50:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f54:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f58:	52                   	push   edx
c0009f59:	50                   	push   eax
c0009f5a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f5e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f62:	e8 bc a1 01 00       	call   c0024123 <__adddf3>
c0009f67:	59                   	pop    ecx
c0009f68:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f6c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f70:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f76:	e8 1c b2 01 00       	call   c0025197 <__extendsfdf2>
c0009f7b:	83 c4 10             	add    esp,0x10
c0009f7e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f82:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f8e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f92:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f96:	e8 05 a8 01 00       	call   c00247a0 <__muldf3>
c0009f9b:	83 c4 10             	add    esp,0x10
c0009f9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fa2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fa6:	52                   	push   edx
c0009fa7:	50                   	push   eax
c0009fa8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009fac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009fb0:	e8 6e a1 01 00       	call   c0024123 <__adddf3>
c0009fb5:	83 c4 10             	add    esp,0x10
c0009fb8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009fbc:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009fc0:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009fc4:	0f 89 30 fe ff ff    	jns    c0009dfa <calc_output_quad+0x8c>
c0009fca:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009fce:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fd2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009fd6:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009fda:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009fe2:	29 c8                	sub    eax,ecx
c0009fe4:	99                   	cdq    
c0009fe5:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fe9:	31 d2                	xor    edx,edx
c0009feb:	0f af d8             	imul   ebx,eax
c0009fee:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ff2:	40                   	inc    eax
c0009ff3:	01 cb                	add    ebx,ecx
c0009ff5:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009ffa:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009ffe:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a002:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a006:	8d 34 86             	lea    esi,[esi+eax*4]
c000a009:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a011:	31 c0                	xor    eax,eax
c000a013:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a017:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a01b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a01f:	89 d8                	mov    eax,ebx
c000a021:	83 ee 10             	sub    esi,0x10
c000a024:	e8 d7 f6 ff ff       	call   c0009700 <fp_to_double>
c000a029:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a02d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a031:	89 d8                	mov    eax,ebx
c000a033:	e8 be f6 ff ff       	call   c00096f6 <fp_to_int>
c000a038:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a03c:	52                   	push   edx
c000a03d:	52                   	push   edx
c000a03e:	57                   	push   edi
c000a03f:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a043:	e8 70 9a 01 00       	call   c0023ab8 <__subsf3>
c000a048:	89 04 24             	mov    DWORD PTR [esp],eax
c000a04b:	e8 47 b1 01 00       	call   c0025197 <__extendsfdf2>
c000a050:	83 c4 10             	add    esp,0x10
c000a053:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a057:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a05b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a05f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a063:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a067:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a06b:	e8 30 a7 01 00       	call   c00247a0 <__muldf3>
c000a070:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a073:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a077:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a07b:	e8 17 b1 01 00       	call   c0025197 <__extendsfdf2>
c000a080:	83 c4 10             	add    esp,0x10
c000a083:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a087:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a08b:	52                   	push   edx
c000a08c:	50                   	push   eax
c000a08d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a091:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a095:	e8 89 a0 01 00       	call   c0024123 <__adddf3>
c000a09a:	59                   	pop    ecx
c000a09b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a09f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a0a3:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a0a9:	e8 e9 b0 01 00       	call   c0025197 <__extendsfdf2>
c000a0ae:	83 c4 10             	add    esp,0x10
c000a0b1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0c5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0c9:	e8 d2 a6 01 00       	call   c00247a0 <__muldf3>
c000a0ce:	83 c4 10             	add    esp,0x10
c000a0d1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d9:	52                   	push   edx
c000a0da:	50                   	push   eax
c000a0db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0e3:	e8 3b a0 01 00       	call   c0024123 <__adddf3>
c000a0e8:	5f                   	pop    edi
c000a0e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a0ed:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a0f1:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a0f7:	e8 9b b0 01 00       	call   c0025197 <__extendsfdf2>
c000a0fc:	83 c4 10             	add    esp,0x10
c000a0ff:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a103:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a107:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a10b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a10f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a113:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a117:	e8 84 a6 01 00       	call   c00247a0 <__muldf3>
c000a11c:	83 c4 10             	add    esp,0x10
c000a11f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a123:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a127:	52                   	push   edx
c000a128:	50                   	push   eax
c000a129:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a12d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a131:	e8 ed 9f 01 00       	call   c0024123 <__adddf3>
c000a136:	59                   	pop    ecx
c000a137:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a13b:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a13f:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a145:	e8 4d b0 01 00       	call   c0025197 <__extendsfdf2>
c000a14a:	83 c4 10             	add    esp,0x10
c000a14d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a151:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a159:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a15d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a161:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a165:	e8 36 a6 01 00       	call   c00247a0 <__muldf3>
c000a16a:	83 c4 10             	add    esp,0x10
c000a16d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a171:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a175:	52                   	push   edx
c000a176:	50                   	push   eax
c000a177:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a17b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a17f:	e8 9f 9f 01 00       	call   c0024123 <__adddf3>
c000a184:	5f                   	pop    edi
c000a185:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a189:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a18d:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a193:	e8 ff af 01 00       	call   c0025197 <__extendsfdf2>
c000a198:	83 c4 10             	add    esp,0x10
c000a19b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a19f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a1a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1ab:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a1af:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a1b3:	e8 e8 a5 01 00       	call   c00247a0 <__muldf3>
c000a1b8:	83 c4 10             	add    esp,0x10
c000a1bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1c3:	52                   	push   edx
c000a1c4:	50                   	push   eax
c000a1c5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a1c9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a1cd:	e8 51 9f 01 00       	call   c0024123 <__adddf3>
c000a1d2:	83 c4 10             	add    esp,0x10
c000a1d5:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1d9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a1dd:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a1e1:	85 db                	test   ebx,ebx
c000a1e3:	0f 8f 36 fe ff ff    	jg     c000a01f <calc_output_quad+0x2b1>
c000a1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1f9:	e8 25 9f 01 00       	call   c0024123 <__adddf3>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a205:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a209:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a20d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a211:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a215:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a219:	e8 82 a5 01 00       	call   c00247a0 <__muldf3>
c000a21e:	59                   	pop    ecx
c000a21f:	5b                   	pop    ebx
c000a220:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a224:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a228:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a22c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a230:	e8 3e ae 01 00       	call   c0025073 <__truncdfsf2>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a23f:	89 06                	mov    DWORD PTR [esi],eax
c000a241:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a245:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a249:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a24d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a251:	e8 cd 9e 01 00       	call   c0024123 <__adddf3>
c000a256:	83 c4 10             	add    esp,0x10
c000a259:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a25d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a261:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a265:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a269:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a26d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a271:	e8 2a a5 01 00       	call   c00247a0 <__muldf3>
c000a276:	5e                   	pop    esi
c000a277:	5f                   	pop    edi
c000a278:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a27c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a280:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a284:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a288:	e8 e6 ad 01 00       	call   c0025073 <__truncdfsf2>
c000a28d:	83 c4 10             	add    esp,0x10
c000a290:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a297:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a29a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a29e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a2a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2aa:	e8 74 9e 01 00       	call   c0024123 <__adddf3>
c000a2af:	83 c4 10             	add    esp,0x10
c000a2b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ca:	e8 d1 a4 01 00       	call   c00247a0 <__muldf3>
c000a2cf:	5d                   	pop    ebp
c000a2d0:	59                   	pop    ecx
c000a2d1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2e1:	e8 8d ad 01 00       	call   c0025073 <__truncdfsf2>
c000a2e6:	83 c4 10             	add    esp,0x10
c000a2e9:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a2f0:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a2f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a303:	e8 1b 9e 01 00       	call   c0024123 <__adddf3>
c000a308:	83 c4 10             	add    esp,0x10
c000a30b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a30f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a313:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a317:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a31b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a31f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a323:	e8 78 a4 01 00       	call   c00247a0 <__muldf3>
c000a328:	5b                   	pop    ebx
c000a329:	5e                   	pop    esi
c000a32a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a32e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a336:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a33a:	e8 34 ad 01 00       	call   c0025073 <__truncdfsf2>
c000a33f:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a346:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a349:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a34f:	5b                   	pop    ebx
c000a350:	5e                   	pop    esi
c000a351:	5f                   	pop    edi
c000a352:	5d                   	pop    ebp
c000a353:	c3                   	ret    

c000a354 <calc_output_hex>:
c000a354:	55                   	push   ebp
c000a355:	89 cd                	mov    ebp,ecx
c000a357:	57                   	push   edi
c000a358:	56                   	push   esi
c000a359:	53                   	push   ebx
c000a35a:	89 c3                	mov    ebx,eax
c000a35c:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a362:	89 14 24             	mov    DWORD PTR [esp],edx
c000a365:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a36c:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a373:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a377:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a37b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a37e:	e8 6f f3 ff ff       	call   c00096f2 <int_to_fp>
c000a383:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a386:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a38a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a38d:	29 c8                	sub    eax,ecx
c000a38f:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a393:	99                   	cdq    
c000a394:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a39c:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a39f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a3a7:	0f af f8             	imul   edi,eax
c000a3aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a3ad:	01 cf                	add    edi,ecx
c000a3af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a3b3:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a3b6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a3ba:	0f af c2             	imul   eax,edx
c000a3bd:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a3c1:	29 c1                	sub    ecx,eax
c000a3c3:	31 d2                	xor    edx,edx
c000a3c5:	31 c0                	xor    eax,eax
c000a3c7:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a3ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a3ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a3d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a3d6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a3da:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a3de:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a3e2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a3e6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3f2:	89 f8                	mov    eax,edi
c000a3f4:	e8 07 f3 ff ff       	call   c0009700 <fp_to_double>
c000a3f9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a401:	89 f8                	mov    eax,edi
c000a403:	e8 ee f2 ff ff       	call   c00096f6 <fp_to_int>
c000a408:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a40c:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a40f:	52                   	push   edx
c000a410:	52                   	push   edx
c000a411:	51                   	push   ecx
c000a412:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a416:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a41d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a421:	e8 92 96 01 00       	call   c0023ab8 <__subsf3>
c000a426:	89 04 24             	mov    DWORD PTR [esp],eax
c000a429:	e8 69 ad 01 00       	call   c0025197 <__extendsfdf2>
c000a42e:	83 c4 10             	add    esp,0x10
c000a431:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a435:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a439:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a441:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a445:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a449:	e8 52 a3 01 00       	call   c00247a0 <__muldf3>
c000a44e:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a452:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a456:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a459:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a45d:	e8 35 ad 01 00       	call   c0025197 <__extendsfdf2>
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a469:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a46d:	52                   	push   edx
c000a46e:	50                   	push   eax
c000a46f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a473:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a477:	e8 a7 9c 01 00       	call   c0024123 <__adddf3>
c000a47c:	59                   	pop    ecx
c000a47d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a481:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a485:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a48b:	e8 07 ad 01 00       	call   c0025197 <__extendsfdf2>
c000a490:	83 c4 10             	add    esp,0x10
c000a493:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a497:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a49b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a49f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4a7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ab:	e8 f0 a2 01 00       	call   c00247a0 <__muldf3>
c000a4b0:	83 c4 10             	add    esp,0x10
c000a4b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4bb:	52                   	push   edx
c000a4bc:	50                   	push   eax
c000a4bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a4c1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a4c5:	e8 59 9c 01 00       	call   c0024123 <__adddf3>
c000a4ca:	59                   	pop    ecx
c000a4cb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4cf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a4d3:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a4d9:	e8 b9 ac 01 00       	call   c0025197 <__extendsfdf2>
c000a4de:	83 c4 10             	add    esp,0x10
c000a4e1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4e5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4f9:	e8 a2 a2 01 00       	call   c00247a0 <__muldf3>
c000a4fe:	83 c4 10             	add    esp,0x10
c000a501:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a505:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a509:	52                   	push   edx
c000a50a:	50                   	push   eax
c000a50b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a50f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a513:	e8 0b 9c 01 00       	call   c0024123 <__adddf3>
c000a518:	59                   	pop    ecx
c000a519:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a51d:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a521:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a527:	e8 6b ac 01 00       	call   c0025197 <__extendsfdf2>
c000a52c:	83 c4 10             	add    esp,0x10
c000a52f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a533:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a537:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a53f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a543:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a547:	e8 54 a2 01 00       	call   c00247a0 <__muldf3>
c000a54c:	83 c4 10             	add    esp,0x10
c000a54f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a553:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a557:	52                   	push   edx
c000a558:	50                   	push   eax
c000a559:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a55d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a561:	e8 bd 9b 01 00       	call   c0024123 <__adddf3>
c000a566:	59                   	pop    ecx
c000a567:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a575:	e8 1d ac 01 00       	call   c0025197 <__extendsfdf2>
c000a57a:	83 c4 10             	add    esp,0x10
c000a57d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a581:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a585:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a589:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a58d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a591:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a595:	e8 06 a2 01 00       	call   c00247a0 <__muldf3>
c000a59a:	83 c4 10             	add    esp,0x10
c000a59d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5a1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5a5:	52                   	push   edx
c000a5a6:	50                   	push   eax
c000a5a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a5ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a5af:	e8 6f 9b 01 00       	call   c0024123 <__adddf3>
c000a5b4:	59                   	pop    ecx
c000a5b5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a5b9:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a5bd:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a5c3:	e8 cf ab 01 00       	call   c0025197 <__extendsfdf2>
c000a5c8:	83 c4 10             	add    esp,0x10
c000a5cb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5cf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5db:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5df:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5e3:	e8 b8 a1 01 00       	call   c00247a0 <__muldf3>
c000a5e8:	83 c4 10             	add    esp,0x10
c000a5eb:	83 c6 18             	add    esi,0x18
c000a5ee:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5f2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5f6:	52                   	push   edx
c000a5f7:	50                   	push   eax
c000a5f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a600:	e8 1e 9b 01 00       	call   c0024123 <__adddf3>
c000a605:	59                   	pop    ecx
c000a606:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a60a:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a60e:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a614:	e8 7e ab 01 00       	call   c0025197 <__extendsfdf2>
c000a619:	83 c4 10             	add    esp,0x10
c000a61c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a620:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a624:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a628:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a62c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a630:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a634:	e8 67 a1 01 00       	call   c00247a0 <__muldf3>
c000a639:	83 c4 10             	add    esp,0x10
c000a63c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a640:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a644:	52                   	push   edx
c000a645:	50                   	push   eax
c000a646:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a64a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a64e:	e8 d0 9a 01 00       	call   c0024123 <__adddf3>
c000a653:	83 c4 10             	add    esp,0x10
c000a656:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a65a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a65e:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a661:	0f 89 8b fd ff ff    	jns    c000a3f2 <calc_output_hex+0x9e>
c000a667:	31 f6                	xor    esi,esi
c000a669:	31 ff                	xor    edi,edi
c000a66b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a66f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a672:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a676:	29 e9                	sub    ecx,ebp
c000a678:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a67c:	29 c8                	sub    eax,ecx
c000a67e:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a681:	99                   	cdq    
c000a682:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a686:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a689:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a68d:	0f af e8             	imul   ebp,eax
c000a690:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a694:	40                   	inc    eax
c000a695:	01 cd                	add    ebp,ecx
c000a697:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a69c:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a6a0:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a6a4:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a6a8:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a6ab:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a6af:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a6b3:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a6b7:	89 e8                	mov    eax,ebp
c000a6b9:	e8 42 f0 ff ff       	call   c0009700 <fp_to_double>
c000a6be:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a6c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a6c6:	89 e8                	mov    eax,ebp
c000a6c8:	e8 29 f0 ff ff       	call   c00096f6 <fp_to_int>
c000a6cd:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a6d1:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a6d4:	52                   	push   edx
c000a6d5:	52                   	push   edx
c000a6d6:	51                   	push   ecx
c000a6d7:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a6de:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a6e5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a6e9:	e8 ca 93 01 00       	call   c0023ab8 <__subsf3>
c000a6ee:	89 04 24             	mov    DWORD PTR [esp],eax
c000a6f1:	e8 a1 aa 01 00       	call   c0025197 <__extendsfdf2>
c000a6f6:	83 c4 10             	add    esp,0x10
c000a6f9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6fd:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a701:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a705:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a709:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a711:	e8 8a a0 01 00       	call   c00247a0 <__muldf3>
c000a716:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a71d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a721:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a724:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a728:	e8 6a aa 01 00       	call   c0025197 <__extendsfdf2>
c000a72d:	83 c4 10             	add    esp,0x10
c000a730:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a734:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a738:	52                   	push   edx
c000a739:	50                   	push   eax
c000a73a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a73e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a742:	e8 dc 99 01 00       	call   c0024123 <__adddf3>
c000a747:	59                   	pop    ecx
c000a748:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a74c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a750:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a756:	e8 3c aa 01 00       	call   c0025197 <__extendsfdf2>
c000a75b:	83 c4 10             	add    esp,0x10
c000a75e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a762:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a766:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a76a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a76e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a772:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a776:	e8 25 a0 01 00       	call   c00247a0 <__muldf3>
c000a77b:	83 c4 10             	add    esp,0x10
c000a77e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a782:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a786:	52                   	push   edx
c000a787:	50                   	push   eax
c000a788:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a78c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a790:	e8 8e 99 01 00       	call   c0024123 <__adddf3>
c000a795:	59                   	pop    ecx
c000a796:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a79a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a79e:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a7a4:	e8 ee a9 01 00       	call   c0025197 <__extendsfdf2>
c000a7a9:	83 c4 10             	add    esp,0x10
c000a7ac:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7b0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7c0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7c4:	e8 d7 9f 01 00       	call   c00247a0 <__muldf3>
c000a7c9:	83 c4 10             	add    esp,0x10
c000a7cc:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7d0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7d4:	52                   	push   edx
c000a7d5:	50                   	push   eax
c000a7d6:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7da:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7de:	e8 40 99 01 00       	call   c0024123 <__adddf3>
c000a7e3:	59                   	pop    ecx
c000a7e4:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a7e8:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a7ec:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a7f2:	e8 a0 a9 01 00       	call   c0025197 <__extendsfdf2>
c000a7f7:	83 c4 10             	add    esp,0x10
c000a7fa:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7fe:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a80a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a80e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a812:	e8 89 9f 01 00       	call   c00247a0 <__muldf3>
c000a817:	83 c4 10             	add    esp,0x10
c000a81a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a81e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a822:	52                   	push   edx
c000a823:	50                   	push   eax
c000a824:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a828:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a82c:	e8 f2 98 01 00       	call   c0024123 <__adddf3>
c000a831:	59                   	pop    ecx
c000a832:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a836:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a83a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a840:	e8 52 a9 01 00       	call   c0025197 <__extendsfdf2>
c000a845:	83 c4 10             	add    esp,0x10
c000a848:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a84c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a850:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a854:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a858:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a85c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a860:	e8 3b 9f 01 00       	call   c00247a0 <__muldf3>
c000a865:	83 c4 10             	add    esp,0x10
c000a868:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a86c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a870:	52                   	push   edx
c000a871:	50                   	push   eax
c000a872:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a876:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a87a:	e8 a4 98 01 00       	call   c0024123 <__adddf3>
c000a87f:	59                   	pop    ecx
c000a880:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a884:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a888:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a88e:	e8 04 a9 01 00       	call   c0025197 <__extendsfdf2>
c000a893:	83 c4 10             	add    esp,0x10
c000a896:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a89a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a89e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8a6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8aa:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8ae:	e8 ed 9e 01 00       	call   c00247a0 <__muldf3>
c000a8b3:	83 c4 10             	add    esp,0x10
c000a8b6:	83 eb 18             	sub    ebx,0x18
c000a8b9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8bd:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8c1:	52                   	push   edx
c000a8c2:	50                   	push   eax
c000a8c3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a8c7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a8cb:	e8 53 98 01 00       	call   c0024123 <__adddf3>
c000a8d0:	59                   	pop    ecx
c000a8d1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a8d5:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a8d9:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a8df:	e8 b3 a8 01 00       	call   c0025197 <__extendsfdf2>
c000a8e4:	83 c4 10             	add    esp,0x10
c000a8e7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8eb:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8fb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8ff:	e8 9c 9e 01 00       	call   c00247a0 <__muldf3>
c000a904:	83 c4 10             	add    esp,0x10
c000a907:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a90b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a90f:	52                   	push   edx
c000a910:	50                   	push   eax
c000a911:	57                   	push   edi
c000a912:	56                   	push   esi
c000a913:	e8 0b 98 01 00       	call   c0024123 <__adddf3>
c000a918:	83 c4 10             	add    esp,0x10
c000a91b:	89 c6                	mov    esi,eax
c000a91d:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a920:	89 d7                	mov    edi,edx
c000a922:	85 ed                	test   ebp,ebp
c000a924:	0f 8f 8d fd ff ff    	jg     c000a6b7 <calc_output_hex+0x363>
c000a92a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a92e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a932:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a936:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a93a:	e8 e4 97 01 00       	call   c0024123 <__adddf3>
c000a93f:	83 c4 10             	add    esp,0x10
c000a942:	89 04 24             	mov    DWORD PTR [esp],eax
c000a945:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a949:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a94d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a951:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a955:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a959:	e8 42 9e 01 00       	call   c00247a0 <__muldf3>
c000a95e:	59                   	pop    ecx
c000a95f:	5b                   	pop    ebx
c000a960:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a968:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a96c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a970:	e8 fe a6 01 00       	call   c0025073 <__truncdfsf2>
c000a975:	83 c4 10             	add    esp,0x10
c000a978:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a97f:	89 03                	mov    DWORD PTR [ebx],eax
c000a981:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a985:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a989:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a98d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a991:	e8 8d 97 01 00       	call   c0024123 <__adddf3>
c000a996:	83 c4 10             	add    esp,0x10
c000a999:	89 04 24             	mov    DWORD PTR [esp],eax
c000a99c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b0:	e8 eb 9d 01 00       	call   c00247a0 <__muldf3>
c000a9b5:	5d                   	pop    ebp
c000a9b6:	59                   	pop    ecx
c000a9b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9bf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9c7:	e8 a7 a6 01 00       	call   c0025073 <__truncdfsf2>
c000a9cc:	83 c4 10             	add    esp,0x10
c000a9cf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9d6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a9d9:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9dd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9e1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9e9:	e8 35 97 01 00       	call   c0024123 <__adddf3>
c000a9ee:	83 c4 10             	add    esp,0x10
c000a9f1:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9fc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa00:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa04:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa08:	e8 93 9d 01 00       	call   c00247a0 <__muldf3>
c000aa0d:	5b                   	pop    ebx
c000aa0e:	5d                   	pop    ebp
c000aa0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa17:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa1b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa1f:	e8 4f a6 01 00       	call   c0025073 <__truncdfsf2>
c000aa24:	83 c4 10             	add    esp,0x10
c000aa27:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa2e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000aa31:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa35:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa39:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa3d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa41:	e8 dd 96 01 00       	call   c0024123 <__adddf3>
c000aa46:	83 c4 10             	add    esp,0x10
c000aa49:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa4c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa58:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa5c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa60:	e8 3b 9d 01 00       	call   c00247a0 <__muldf3>
c000aa65:	59                   	pop    ecx
c000aa66:	5b                   	pop    ebx
c000aa67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa6f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa73:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa77:	e8 f7 a5 01 00       	call   c0025073 <__truncdfsf2>
c000aa7c:	83 c4 10             	add    esp,0x10
c000aa7f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa86:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa89:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa8d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa91:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa99:	e8 85 96 01 00       	call   c0024123 <__adddf3>
c000aa9e:	83 c4 10             	add    esp,0x10
c000aaa1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaa4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaa8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab8:	e8 e3 9c 01 00       	call   c00247a0 <__muldf3>
c000aabd:	5d                   	pop    ebp
c000aabe:	59                   	pop    ecx
c000aabf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aac3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aac7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aacb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aacf:	e8 9f a5 01 00       	call   c0025073 <__truncdfsf2>
c000aad4:	83 c4 10             	add    esp,0x10
c000aad7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aade:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aae1:	57                   	push   edi
c000aae2:	56                   	push   esi
c000aae3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aae7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aaeb:	e8 33 96 01 00       	call   c0024123 <__adddf3>
c000aaf0:	83 c4 10             	add    esp,0x10
c000aaf3:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aafa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab0a:	e8 91 9c 01 00       	call   c00247a0 <__muldf3>
c000ab0f:	5b                   	pop    ebx
c000ab10:	5e                   	pop    esi
c000ab11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab19:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab21:	e8 4d a5 01 00       	call   c0025073 <__truncdfsf2>
c000ab26:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ab2d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ab30:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ab36:	5b                   	pop    ebx
c000ab37:	5e                   	pop    esi
c000ab38:	5f                   	pop    edi
c000ab39:	5d                   	pop    ebp
c000ab3a:	c3                   	ret    

c000ab3b <sinc_reset>:
c000ab3b:	56                   	push   esi
c000ab3c:	53                   	push   ebx
c000ab3d:	51                   	push   ecx
c000ab3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab42:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ab45:	85 db                	test   ebx,ebx
c000ab47:	74 59                	je     c000aba2 <sinc_reset+0x67>
c000ab49:	31 d2                	xor    edx,edx
c000ab4b:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ab52:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ab55:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ab58:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ab5f:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ab66:	31 c0                	xor    eax,eax
c000ab68:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab6e:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab71:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab74:	52                   	push   edx
c000ab75:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab78:	c1 e0 02             	shl    eax,0x2
c000ab7b:	50                   	push   eax
c000ab7c:	6a 00                	push   0x0
c000ab7e:	56                   	push   esi
c000ab7f:	e8 41 5b ff ff       	call   c00006c5 <memset>
c000ab84:	83 c4 0c             	add    esp,0xc
c000ab87:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab8a:	c1 e0 02             	shl    eax,0x2
c000ab8d:	50                   	push   eax
c000ab8e:	68 aa 00 00 00       	push   0xaa
c000ab93:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab96:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab99:	50                   	push   eax
c000ab9a:	e8 26 5b ff ff       	call   c00006c5 <memset>
c000ab9f:	83 c4 10             	add    esp,0x10
c000aba2:	58                   	pop    eax
c000aba3:	5b                   	pop    ebx
c000aba4:	5e                   	pop    esi
c000aba5:	c3                   	ret    

c000aba6 <calc_output_multi>:
c000aba6:	55                   	push   ebp
c000aba7:	57                   	push   edi
c000aba8:	56                   	push   esi
c000aba9:	89 c6                	mov    esi,eax
c000abab:	53                   	push   ebx
c000abac:	83 ec 4c             	sub    esp,0x4c
c000abaf:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000abb3:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000abb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000abbb:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000abbf:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000abc3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000abc7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000abcb:	8d 46 44             	lea    eax,[esi+0x44]
c000abce:	89 04 24             	mov    DWORD PTR [esp],eax
c000abd1:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000abd7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000abdb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000abde:	e8 0f eb ff ff       	call   c00096f2 <int_to_fp>
c000abe3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000abe6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000abea:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000abee:	99                   	cdq    
c000abef:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000abf3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000abf7:	0f af d0             	imul   edx,eax
c000abfa:	0f af c3             	imul   eax,ebx
c000abfd:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ac01:	29 c1                	sub    ecx,eax
c000ac03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac07:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ac0b:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ac12:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ac16:	57                   	push   edi
c000ac17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac1b:	6a 00                	push   0x0
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	e8 9f 5a ff ff       	call   c00006c5 <memset>
c000ac26:	83 c4 10             	add    esp,0x10
c000ac29:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac2d:	89 df                	mov    edi,ebx
c000ac2f:	e8 cc ea ff ff       	call   c0009700 <fp_to_double>
c000ac34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac38:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac3c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac40:	e8 b1 ea ff ff       	call   c00096f6 <fp_to_int>
c000ac45:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ac48:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ac4b:	51                   	push   ecx
c000ac4c:	51                   	push   ecx
c000ac4d:	55                   	push   ebp
c000ac4e:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ac52:	e8 61 8e 01 00       	call   c0023ab8 <__subsf3>
c000ac57:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac5a:	e8 38 a5 01 00       	call   c0025197 <__extendsfdf2>
c000ac5f:	83 c4 10             	add    esp,0x10
c000ac62:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac66:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac72:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac76:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac7a:	e8 21 9b 01 00       	call   c00247a0 <__muldf3>
c000ac7f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac82:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac86:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac8a:	e8 08 a5 01 00       	call   c0025197 <__extendsfdf2>
c000ac8f:	83 c4 10             	add    esp,0x10
c000ac92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac9a:	52                   	push   edx
c000ac9b:	50                   	push   eax
c000ac9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aca4:	e8 7a 94 01 00       	call   c0024123 <__adddf3>
c000aca9:	83 c4 10             	add    esp,0x10
c000acac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acb0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000acb4:	89 f8                	mov    eax,edi
c000acb6:	b9 08 00 00 00       	mov    ecx,0x8
c000acbb:	99                   	cdq    
c000acbc:	f7 f9                	idiv   ecx
c000acbe:	4a                   	dec    edx
c000acbf:	83 fa 06             	cmp    edx,0x6
c000acc2:	77 07                	ja     c000accb <calc_output_multi+0x125>
c000acc4:	ff 24 95 a4 69 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd965c]
c000accb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acce:	4f                   	dec    edi
c000accf:	83 ec 0c             	sub    esp,0xc
c000acd2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000acd5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acd9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ace0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ace4:	e8 ae a4 01 00       	call   c0025197 <__extendsfdf2>
c000ace9:	83 c4 10             	add    esp,0x10
c000acec:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acf0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acf4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acf8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acfc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad00:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad04:	e8 97 9a 01 00       	call   c00247a0 <__muldf3>
c000ad09:	83 c4 10             	add    esp,0x10
c000ad0c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad10:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad14:	52                   	push   edx
c000ad15:	50                   	push   eax
c000ad16:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad19:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad1c:	e8 02 94 01 00       	call   c0024123 <__adddf3>
c000ad21:	83 c4 10             	add    esp,0x10
c000ad24:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad27:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad2a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad2d:	4f                   	dec    edi
c000ad2e:	83 ec 0c             	sub    esp,0xc
c000ad31:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad38:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad3f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad43:	e8 4f a4 01 00       	call   c0025197 <__extendsfdf2>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad4f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad5b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad5f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad63:	e8 38 9a 01 00       	call   c00247a0 <__muldf3>
c000ad68:	83 c4 10             	add    esp,0x10
c000ad6b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad6f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad73:	52                   	push   edx
c000ad74:	50                   	push   eax
c000ad75:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad78:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad7b:	e8 a3 93 01 00       	call   c0024123 <__adddf3>
c000ad80:	83 c4 10             	add    esp,0x10
c000ad83:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad86:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad89:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad8c:	4f                   	dec    edi
c000ad8d:	83 ec 0c             	sub    esp,0xc
c000ad90:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad97:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad9e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ada2:	e8 f0 a3 01 00       	call   c0025197 <__extendsfdf2>
c000ada7:	83 c4 10             	add    esp,0x10
c000adaa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adae:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adbe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adc2:	e8 d9 99 01 00       	call   c00247a0 <__muldf3>
c000adc7:	83 c4 10             	add    esp,0x10
c000adca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000add2:	52                   	push   edx
c000add3:	50                   	push   eax
c000add4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000add7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000adda:	e8 44 93 01 00       	call   c0024123 <__adddf3>
c000addf:	83 c4 10             	add    esp,0x10
c000ade2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ade5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ade8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000adeb:	4f                   	dec    edi
c000adec:	83 ec 0c             	sub    esp,0xc
c000adef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000adf2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000adf6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adfd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae01:	e8 91 a3 01 00       	call   c0025197 <__extendsfdf2>
c000ae06:	83 c4 10             	add    esp,0x10
c000ae09:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae0d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae19:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae1d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae21:	e8 7a 99 01 00       	call   c00247a0 <__muldf3>
c000ae26:	83 c4 10             	add    esp,0x10
c000ae29:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae2d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae31:	52                   	push   edx
c000ae32:	50                   	push   eax
c000ae33:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae36:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae39:	e8 e5 92 01 00       	call   c0024123 <__adddf3>
c000ae3e:	83 c4 10             	add    esp,0x10
c000ae41:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae44:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae47:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae4a:	4f                   	dec    edi
c000ae4b:	83 ec 0c             	sub    esp,0xc
c000ae4e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae55:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae5c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae60:	e8 32 a3 01 00       	call   c0025197 <__extendsfdf2>
c000ae65:	83 c4 10             	add    esp,0x10
c000ae68:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae6c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae78:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae80:	e8 1b 99 01 00       	call   c00247a0 <__muldf3>
c000ae85:	83 c4 10             	add    esp,0x10
c000ae88:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae8c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae90:	52                   	push   edx
c000ae91:	50                   	push   eax
c000ae92:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae95:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae98:	e8 86 92 01 00       	call   c0024123 <__adddf3>
c000ae9d:	83 c4 10             	add    esp,0x10
c000aea0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aea3:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aea6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aea9:	4f                   	dec    edi
c000aeaa:	83 ec 0c             	sub    esp,0xc
c000aead:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aeb0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aeb4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aebb:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aebf:	e8 d3 a2 01 00       	call   c0025197 <__extendsfdf2>
c000aec4:	83 c4 10             	add    esp,0x10
c000aec7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aecb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aed3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aed7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aedb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aedf:	e8 bc 98 01 00       	call   c00247a0 <__muldf3>
c000aee4:	83 c4 10             	add    esp,0x10
c000aee7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeeb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aeef:	52                   	push   edx
c000aef0:	50                   	push   eax
c000aef1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aef4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aef7:	e8 27 92 01 00       	call   c0024123 <__adddf3>
c000aefc:	83 c4 10             	add    esp,0x10
c000aeff:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af02:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af05:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af08:	4f                   	dec    edi
c000af09:	83 ec 0c             	sub    esp,0xc
c000af0c:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af13:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af1a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af1e:	e8 74 a2 01 00       	call   c0025197 <__extendsfdf2>
c000af23:	83 c4 10             	add    esp,0x10
c000af26:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af2a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af36:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af3a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af3e:	e8 5d 98 01 00       	call   c00247a0 <__muldf3>
c000af43:	83 c4 10             	add    esp,0x10
c000af46:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af4a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af4e:	52                   	push   edx
c000af4f:	50                   	push   eax
c000af50:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af53:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af56:	e8 c8 91 01 00       	call   c0024123 <__adddf3>
c000af5b:	83 c4 10             	add    esp,0x10
c000af5e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af61:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af64:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af67:	4f                   	dec    edi
c000af68:	83 ec 0c             	sub    esp,0xc
c000af6b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af72:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af79:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af7d:	e8 15 a2 01 00       	call   c0025197 <__extendsfdf2>
c000af82:	83 c4 10             	add    esp,0x10
c000af85:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af89:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af95:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af99:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af9d:	e8 fe 97 01 00       	call   c00247a0 <__muldf3>
c000afa2:	83 c4 10             	add    esp,0x10
c000afa5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afa9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afad:	52                   	push   edx
c000afae:	50                   	push   eax
c000afaf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afb2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afb5:	e8 69 91 01 00       	call   c0024123 <__adddf3>
c000afba:	83 c4 10             	add    esp,0x10
c000afbd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afc0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afc3:	85 ff                	test   edi,edi
c000afc5:	0f 8f e9 fc ff ff    	jg     c000acb4 <calc_output_multi+0x10e>
c000afcb:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000afcf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000afd3:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000afd7:	0f 89 4c fc ff ff    	jns    c000ac29 <calc_output_multi+0x83>
c000afdd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000afe1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000afe5:	29 c8                	sub    eax,ecx
c000afe7:	99                   	cdq    
c000afe8:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000afec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000aff0:	0f af d0             	imul   edx,eax
c000aff3:	40                   	inc    eax
c000aff4:	01 d1                	add    ecx,edx
c000aff6:	0f af c3             	imul   eax,ebx
c000aff9:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000affd:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b000:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b004:	55                   	push   ebp
c000b005:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b009:	6a 00                	push   0x0
c000b00b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b00f:	e8 b1 56 ff ff       	call   c00006c5 <memset>
c000b014:	83 c4 10             	add    esp,0x10
c000b017:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b01b:	e8 e0 e6 ff ff       	call   c0009700 <fp_to_double>
c000b020:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b024:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b028:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b02c:	e8 c5 e6 ff ff       	call   c00096f6 <fp_to_int>
c000b031:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b034:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b037:	57                   	push   edi
c000b038:	57                   	push   edi
c000b039:	89 df                	mov    edi,ebx
c000b03b:	55                   	push   ebp
c000b03c:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b040:	e8 73 8a 01 00       	call   c0023ab8 <__subsf3>
c000b045:	89 04 24             	mov    DWORD PTR [esp],eax
c000b048:	e8 4a a1 01 00       	call   c0025197 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b054:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b064:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b068:	e8 33 97 01 00       	call   c00247a0 <__muldf3>
c000b06d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b070:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b074:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b078:	e8 1a a1 01 00       	call   c0025197 <__extendsfdf2>
c000b07d:	83 c4 10             	add    esp,0x10
c000b080:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b084:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b088:	52                   	push   edx
c000b089:	50                   	push   eax
c000b08a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b08e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b092:	e8 8c 90 01 00       	call   c0024123 <__adddf3>
c000b097:	83 c4 10             	add    esp,0x10
c000b09a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b09e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b0a2:	89 f8                	mov    eax,edi
c000b0a4:	b9 08 00 00 00       	mov    ecx,0x8
c000b0a9:	99                   	cdq    
c000b0aa:	f7 f9                	idiv   ecx
c000b0ac:	4a                   	dec    edx
c000b0ad:	83 fa 06             	cmp    edx,0x6
c000b0b0:	77 07                	ja     c000b0b9 <calc_output_multi+0x513>
c000b0b2:	ff 24 95 c0 69 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9640]
c000b0b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0bd:	4f                   	dec    edi
c000b0be:	83 ec 0c             	sub    esp,0xc
c000b0c1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0cf:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0d3:	e8 bf a0 01 00       	call   c0025197 <__extendsfdf2>
c000b0d8:	83 c4 10             	add    esp,0x10
c000b0db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0f3:	e8 a8 96 01 00       	call   c00247a0 <__muldf3>
c000b0f8:	83 c4 10             	add    esp,0x10
c000b0fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0ff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b103:	52                   	push   edx
c000b104:	50                   	push   eax
c000b105:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b108:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b10b:	e8 13 90 01 00       	call   c0024123 <__adddf3>
c000b110:	83 c4 10             	add    esp,0x10
c000b113:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b116:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b119:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b11d:	4f                   	dec    edi
c000b11e:	83 ec 0c             	sub    esp,0xc
c000b121:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b124:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b128:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b12f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b133:	e8 5f a0 01 00       	call   c0025197 <__extendsfdf2>
c000b138:	83 c4 10             	add    esp,0x10
c000b13b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b13f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b143:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b147:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b14b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b14f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b153:	e8 48 96 01 00       	call   c00247a0 <__muldf3>
c000b158:	83 c4 10             	add    esp,0x10
c000b15b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b15f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b163:	52                   	push   edx
c000b164:	50                   	push   eax
c000b165:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b168:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b16b:	e8 b3 8f 01 00       	call   c0024123 <__adddf3>
c000b170:	83 c4 10             	add    esp,0x10
c000b173:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b176:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b179:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b17d:	4f                   	dec    edi
c000b17e:	83 ec 0c             	sub    esp,0xc
c000b181:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b184:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b188:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b18f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b193:	e8 ff 9f 01 00       	call   c0025197 <__extendsfdf2>
c000b198:	83 c4 10             	add    esp,0x10
c000b19b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b19f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1ab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b3:	e8 e8 95 01 00       	call   c00247a0 <__muldf3>
c000b1b8:	83 c4 10             	add    esp,0x10
c000b1bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1c3:	52                   	push   edx
c000b1c4:	50                   	push   eax
c000b1c5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1c8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1cb:	e8 53 8f 01 00       	call   c0024123 <__adddf3>
c000b1d0:	83 c4 10             	add    esp,0x10
c000b1d3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1d6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1dd:	4f                   	dec    edi
c000b1de:	83 ec 0c             	sub    esp,0xc
c000b1e1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1e8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1ef:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1f3:	e8 9f 9f 01 00       	call   c0025197 <__extendsfdf2>
c000b1f8:	83 c4 10             	add    esp,0x10
c000b1fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1ff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b203:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b207:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b20f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b213:	e8 88 95 01 00       	call   c00247a0 <__muldf3>
c000b218:	83 c4 10             	add    esp,0x10
c000b21b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b21f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b223:	52                   	push   edx
c000b224:	50                   	push   eax
c000b225:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b228:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b22b:	e8 f3 8e 01 00       	call   c0024123 <__adddf3>
c000b230:	83 c4 10             	add    esp,0x10
c000b233:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b236:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b239:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b23d:	4f                   	dec    edi
c000b23e:	83 ec 0c             	sub    esp,0xc
c000b241:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b244:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b248:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b24f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b253:	e8 3f 9f 01 00       	call   c0025197 <__extendsfdf2>
c000b258:	83 c4 10             	add    esp,0x10
c000b25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b263:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b267:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b26b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b26f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b273:	e8 28 95 01 00       	call   c00247a0 <__muldf3>
c000b278:	83 c4 10             	add    esp,0x10
c000b27b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b27f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b283:	52                   	push   edx
c000b284:	50                   	push   eax
c000b285:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b288:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b28b:	e8 93 8e 01 00       	call   c0024123 <__adddf3>
c000b290:	83 c4 10             	add    esp,0x10
c000b293:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b296:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b299:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b29d:	4f                   	dec    edi
c000b29e:	83 ec 0c             	sub    esp,0xc
c000b2a1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2a8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2af:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2b3:	e8 df 9e 01 00       	call   c0025197 <__extendsfdf2>
c000b2b8:	83 c4 10             	add    esp,0x10
c000b2bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d3:	e8 c8 94 01 00       	call   c00247a0 <__muldf3>
c000b2d8:	83 c4 10             	add    esp,0x10
c000b2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2e3:	52                   	push   edx
c000b2e4:	50                   	push   eax
c000b2e5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2e8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2eb:	e8 33 8e 01 00       	call   c0024123 <__adddf3>
c000b2f0:	83 c4 10             	add    esp,0x10
c000b2f3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2f6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2fd:	4f                   	dec    edi
c000b2fe:	83 ec 0c             	sub    esp,0xc
c000b301:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b304:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b308:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b30f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b313:	e8 7f 9e 01 00       	call   c0025197 <__extendsfdf2>
c000b318:	83 c4 10             	add    esp,0x10
c000b31b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b31f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b323:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b327:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b32f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b333:	e8 68 94 01 00       	call   c00247a0 <__muldf3>
c000b338:	83 c4 10             	add    esp,0x10
c000b33b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b33f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b343:	52                   	push   edx
c000b344:	50                   	push   eax
c000b345:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b348:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b34b:	e8 d3 8d 01 00       	call   c0024123 <__adddf3>
c000b350:	83 c4 10             	add    esp,0x10
c000b353:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b356:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b359:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b35d:	4f                   	dec    edi
c000b35e:	83 ec 0c             	sub    esp,0xc
c000b361:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b364:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b368:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b36f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b373:	e8 1f 9e 01 00       	call   c0025197 <__extendsfdf2>
c000b378:	83 c4 10             	add    esp,0x10
c000b37b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b37f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b383:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b387:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b38f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b393:	e8 08 94 01 00       	call   c00247a0 <__muldf3>
c000b398:	83 c4 10             	add    esp,0x10
c000b39b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b39f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3a3:	52                   	push   edx
c000b3a4:	50                   	push   eax
c000b3a5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3a8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3ab:	e8 73 8d 01 00       	call   c0024123 <__adddf3>
c000b3b0:	83 c4 10             	add    esp,0x10
c000b3b3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3b6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3b9:	85 ff                	test   edi,edi
c000b3bb:	0f 8f e1 fc ff ff    	jg     c000b0a2 <calc_output_multi+0x4fc>
c000b3c1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b3c5:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b3c9:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b3cd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b3d2:	0f 8f 3f fc ff ff    	jg     c000b017 <calc_output_multi+0x471>
c000b3d8:	be 08 00 00 00       	mov    esi,0x8
c000b3dd:	89 d8                	mov    eax,ebx
c000b3df:	99                   	cdq    
c000b3e0:	f7 fe                	idiv   esi
c000b3e2:	4a                   	dec    edx
c000b3e3:	83 fa 06             	cmp    edx,0x6
c000b3e6:	77 07                	ja     c000b3ef <calc_output_multi+0x849>
c000b3e8:	ff 24 95 dc 69 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9624]
c000b3ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3f3:	4b                   	dec    ebx
c000b3f4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3f8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b403:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b406:	e8 18 8d 01 00       	call   c0024123 <__adddf3>
c000b40b:	83 c4 10             	add    esp,0x10
c000b40e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b412:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b416:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b41a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b41e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b422:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b426:	e8 75 93 01 00       	call   c00247a0 <__muldf3>
c000b42b:	5d                   	pop    ebp
c000b42c:	59                   	pop    ecx
c000b42d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b431:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b435:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b439:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b43d:	e8 31 9c 01 00       	call   c0025073 <__truncdfsf2>
c000b442:	83 c4 10             	add    esp,0x10
c000b445:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b449:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b44c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b450:	4b                   	dec    ebx
c000b451:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b455:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b458:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b45c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b460:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b463:	e8 bb 8c 01 00       	call   c0024123 <__adddf3>
c000b468:	83 c4 10             	add    esp,0x10
c000b46b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b46f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b473:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b477:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b47b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b47f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b483:	e8 18 93 01 00       	call   c00247a0 <__muldf3>
c000b488:	59                   	pop    ecx
c000b489:	5f                   	pop    edi
c000b48a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b48e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b492:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b496:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b49a:	e8 d4 9b 01 00       	call   c0025073 <__truncdfsf2>
c000b49f:	83 c4 10             	add    esp,0x10
c000b4a2:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4a6:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ad:	4b                   	dec    ebx
c000b4ae:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4b2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4c0:	e8 5e 8c 01 00       	call   c0024123 <__adddf3>
c000b4c5:	83 c4 10             	add    esp,0x10
c000b4c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4cc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4e0:	e8 bb 92 01 00       	call   c00247a0 <__muldf3>
c000b4e5:	5f                   	pop    edi
c000b4e6:	5d                   	pop    ebp
c000b4e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4f7:	e8 77 9b 01 00       	call   c0025073 <__truncdfsf2>
c000b4fc:	83 c4 10             	add    esp,0x10
c000b4ff:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b503:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b506:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50a:	4b                   	dec    ebx
c000b50b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b50f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b512:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b516:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b51a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b51d:	e8 01 8c 01 00       	call   c0024123 <__adddf3>
c000b522:	83 c4 10             	add    esp,0x10
c000b525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b52d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b531:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b53d:	e8 5e 92 01 00       	call   c00247a0 <__muldf3>
c000b542:	5d                   	pop    ebp
c000b543:	59                   	pop    ecx
c000b544:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b548:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b54c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b550:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b554:	e8 1a 9b 01 00       	call   c0025073 <__truncdfsf2>
c000b559:	83 c4 10             	add    esp,0x10
c000b55c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b560:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b563:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b567:	4b                   	dec    ebx
c000b568:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b56c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b56f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b573:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b577:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b57a:	e8 a4 8b 01 00       	call   c0024123 <__adddf3>
c000b57f:	83 c4 10             	add    esp,0x10
c000b582:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b586:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b58a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b58e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b592:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b596:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b59a:	e8 01 92 01 00       	call   c00247a0 <__muldf3>
c000b59f:	59                   	pop    ecx
c000b5a0:	5f                   	pop    edi
c000b5a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5a5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5b1:	e8 bd 9a 01 00       	call   c0025073 <__truncdfsf2>
c000b5b6:	83 c4 10             	add    esp,0x10
c000b5b9:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5bd:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5c4:	4b                   	dec    ebx
c000b5c5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5c9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5d7:	e8 47 8b 01 00       	call   c0024123 <__adddf3>
c000b5dc:	83 c4 10             	add    esp,0x10
c000b5df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5f7:	e8 a4 91 01 00       	call   c00247a0 <__muldf3>
c000b5fc:	5f                   	pop    edi
c000b5fd:	5d                   	pop    ebp
c000b5fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b602:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 60 9a 01 00       	call   c0025073 <__truncdfsf2>
c000b613:	83 c4 10             	add    esp,0x10
c000b616:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b61a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b61d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b621:	4b                   	dec    ebx
c000b622:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b626:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b62d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b631:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b634:	e8 ea 8a 01 00       	call   c0024123 <__adddf3>
c000b639:	83 c4 10             	add    esp,0x10
c000b63c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b640:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b648:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b64c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b650:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b654:	e8 47 91 01 00       	call   c00247a0 <__muldf3>
c000b659:	5d                   	pop    ebp
c000b65a:	59                   	pop    ecx
c000b65b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b65f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 03 9a 01 00       	call   c0025073 <__truncdfsf2>
c000b670:	83 c4 10             	add    esp,0x10
c000b673:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b677:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b67a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b67e:	4b                   	dec    ebx
c000b67f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b683:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b686:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b68a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b68e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b691:	e8 8d 8a 01 00       	call   c0024123 <__adddf3>
c000b696:	83 c4 10             	add    esp,0x10
c000b699:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b69d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6b1:	e8 ea 90 01 00       	call   c00247a0 <__muldf3>
c000b6b6:	59                   	pop    ecx
c000b6b7:	5f                   	pop    edi
c000b6b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 a6 99 01 00       	call   c0025073 <__truncdfsf2>
c000b6cd:	83 c4 10             	add    esp,0x10
c000b6d0:	85 db                	test   ebx,ebx
c000b6d2:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b6d6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b6d9:	0f 8f fe fc ff ff    	jg     c000b3dd <calc_output_multi+0x837>
c000b6df:	83 c4 4c             	add    esp,0x4c
c000b6e2:	5b                   	pop    ebx
c000b6e3:	5e                   	pop    esi
c000b6e4:	5f                   	pop    edi
c000b6e5:	5d                   	pop    ebp
c000b6e6:	c3                   	ret    

c000b6e7 <double_to_fp>:
c000b6e7:	83 ec 0c             	sub    esp,0xc
c000b6ea:	68 00 00 b0 40       	push   0x40b00000
c000b6ef:	6a 00                	push   0x0
c000b6f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6f9:	e8 a2 90 01 00       	call   c00247a0 <__muldf3>
c000b6fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b706:	83 c4 1c             	add    esp,0x1c
c000b709:	e9 12 9b 01 00       	jmp    c0025220 <lrint>

c000b70e <fmod_one>:
c000b70e:	83 ec 2c             	sub    esp,0x2c
c000b711:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b715:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b719:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b71d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b721:	83 ec 08             	sub    esp,0x8
c000b724:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b728:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b72c:	e8 ef 9a 01 00       	call   c0025220 <lrint>
c000b731:	83 c4 10             	add    esp,0x10
c000b734:	83 ec 0c             	sub    esp,0xc
c000b737:	50                   	push   eax
c000b738:	e8 c6 96 01 00       	call   c0024e03 <__floatsidf>
c000b73d:	83 c4 10             	add    esp,0x10
c000b740:	52                   	push   edx
c000b741:	50                   	push   eax
c000b742:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b746:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b74a:	e8 25 90 01 00       	call   c0024774 <__subdf3>
c000b74f:	83 c4 10             	add    esp,0x10
c000b752:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b756:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b75a:	b8 00 00 00 00       	mov    eax,0x0
c000b75f:	ba 00 00 00 00       	mov    edx,0x0
c000b764:	52                   	push   edx
c000b765:	50                   	push   eax
c000b766:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b76a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b76e:	e8 fc 98 01 00       	call   c002506f <__ltdf2>
c000b773:	83 c4 10             	add    esp,0x10
c000b776:	85 c0                	test   eax,eax
c000b778:	79 1e                	jns    c000b798 <fmod_one+0x8a>
c000b77a:	b8 00 00 00 00       	mov    eax,0x0
c000b77f:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c000b784:	52                   	push   edx
c000b785:	50                   	push   eax
c000b786:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b78a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b78e:	e8 90 89 01 00       	call   c0024123 <__adddf3>
c000b793:	83 c4 10             	add    esp,0x10
c000b796:	eb 08                	jmp    c000b7a0 <fmod_one+0x92>
c000b798:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b79c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b7a0:	83 c4 2c             	add    esp,0x2c
c000b7a3:	c3                   	ret    

c000b7a4 <prepare_data>:
c000b7a4:	55                   	push   ebp
c000b7a5:	57                   	push   edi
c000b7a6:	56                   	push   esi
c000b7a7:	53                   	push   ebx
c000b7a8:	83 ec 1c             	sub    esp,0x1c
c000b7ab:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b7af:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b7b3:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b7b7:	0f 89 57 01 00 00    	jns    c000b914 <prepare_data+0x170>
c000b7bd:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b7c0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b7c3:	85 d2                	test   edx,edx
c000b7c5:	75 0d                	jne    c000b7d4 <prepare_data+0x30>
c000b7c7:	8d 14 36             	lea    edx,[esi+esi*1]
c000b7ca:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b7cd:	29 d0                	sub    eax,edx
c000b7cf:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7d2:	eb 44                	jmp    c000b818 <prepare_data+0x74>
c000b7d4:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b7d7:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b7da:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b7dd:	39 c1                	cmp    ecx,eax
c000b7df:	7d 04                	jge    c000b7e5 <prepare_data+0x41>
c000b7e1:	29 d0                	sub    eax,edx
c000b7e3:	eb 2d                	jmp    c000b812 <prepare_data+0x6e>
c000b7e5:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b7eb:	29 d7                	sub    edi,edx
c000b7ed:	01 f7                	add    edi,esi
c000b7ef:	51                   	push   ecx
c000b7f0:	29 f2                	sub    edx,esi
c000b7f2:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b7f9:	8d 14 90             	lea    edx,[eax+edx*4]
c000b7fc:	51                   	push   ecx
c000b7fd:	52                   	push   edx
c000b7fe:	50                   	push   eax
c000b7ff:	e8 53 4e ff ff       	call   c0000657 <memmove>
c000b804:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b807:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b80a:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b80d:	29 f0                	sub    eax,esi
c000b80f:	83 c4 10             	add    esp,0x10
c000b812:	29 f0                	sub    eax,esi
c000b814:	79 02                	jns    c000b818 <prepare_data+0x74>
c000b816:	31 c0                	xor    eax,eax
c000b818:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b81b:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b81e:	29 ef                	sub    edi,ebp
c000b820:	39 c7                	cmp    edi,eax
c000b822:	7e 02                	jle    c000b826 <prepare_data+0x82>
c000b824:	89 c7                	mov    edi,eax
c000b826:	89 f8                	mov    eax,edi
c000b828:	99                   	cdq    
c000b829:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b82c:	b8 15 00 00 00       	mov    eax,0x15
c000b831:	29 d7                	sub    edi,edx
c000b833:	0f 88 dd 00 00 00    	js     c000b916 <prepare_data+0x172>
c000b839:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b83c:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b83f:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b842:	0f 8f ce 00 00 00    	jg     c000b916 <prepare_data+0x172>
c000b848:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b84e:	50                   	push   eax
c000b84f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b856:	50                   	push   eax
c000b857:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b85b:	8b 00                	mov    eax,DWORD PTR [eax]
c000b85d:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b860:	50                   	push   eax
c000b861:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b864:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b868:	50                   	push   eax
c000b869:	e8 21 4e ff ff       	call   c000068f <memcpy>
c000b86e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b871:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b874:	01 fd                	add    ebp,edi
c000b876:	01 f9                	add    ecx,edi
c000b878:	83 c4 10             	add    esp,0x10
c000b87b:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b87e:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b881:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b884:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b888:	0f 85 86 00 00 00    	jne    c000b914 <prepare_data+0x170>
c000b88e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b891:	89 e8                	mov    eax,ebp
c000b893:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b896:	29 c8                	sub    eax,ecx
c000b898:	39 f8                	cmp    eax,edi
c000b89a:	7d 78                	jge    c000b914 <prepare_data+0x170>
c000b89c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b8a0:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b8a4:	74 6e                	je     c000b914 <prepare_data+0x170>
c000b8a6:	8d 7e 04             	lea    edi,[esi+0x4]
c000b8a9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b8ad:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b8b0:	29 ef                	sub    edi,ebp
c000b8b2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b8b6:	7c 29                	jl     c000b8e1 <prepare_data+0x13d>
c000b8b8:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b8bb:	29 f1                	sub    ecx,esi
c000b8bd:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b8c4:	55                   	push   ebp
c000b8c5:	50                   	push   eax
c000b8c6:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b8c9:	50                   	push   eax
c000b8ca:	52                   	push   edx
c000b8cb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8cf:	e8 83 4d ff ff       	call   c0000657 <memmove>
c000b8d4:	83 c4 10             	add    esp,0x10
c000b8d7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8da:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b8dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b8e1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b8e4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b8e7:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b8ea:	83 c6 05             	add    esi,0x5
c000b8ed:	78 07                	js     c000b8f6 <prepare_data+0x152>
c000b8ef:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b8f2:	39 cf                	cmp    edi,ecx
c000b8f4:	7e 04                	jle    c000b8fa <prepare_data+0x156>
c000b8f6:	89 ce                	mov    esi,ecx
c000b8f8:	29 c6                	sub    esi,eax
c000b8fa:	8d 04 82             	lea    eax,[edx+eax*4]
c000b8fd:	51                   	push   ecx
c000b8fe:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b905:	51                   	push   ecx
c000b906:	6a 00                	push   0x0
c000b908:	50                   	push   eax
c000b909:	e8 b7 4d ff ff       	call   c00006c5 <memset>
c000b90e:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b911:	83 c4 10             	add    esp,0x10
c000b914:	31 c0                	xor    eax,eax
c000b916:	83 c4 1c             	add    esp,0x1c
c000b919:	5b                   	pop    ebx
c000b91a:	5e                   	pop    esi
c000b91b:	5f                   	pop    edi
c000b91c:	5d                   	pop    ebp
c000b91d:	c3                   	ret    

c000b91e <sinc_multichan_vari_process>:
c000b91e:	55                   	push   ebp
c000b91f:	b8 05 00 00 00       	mov    eax,0x5
c000b924:	57                   	push   edi
c000b925:	56                   	push   esi
c000b926:	53                   	push   ebx
c000b927:	83 ec 4c             	sub    esp,0x4c
c000b92a:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b92e:	8b 6c 24 64          	mov    ebp,DWORD PTR [esp+0x64]
c000b932:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b935:	85 db                	test   ebx,ebx
c000b937:	0f 84 b5 05 00 00    	je     c000bef2 <sinc_multichan_vari_process+0x5d4>
c000b93d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b940:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b943:	0f af d0             	imul   edx,eax
c000b946:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000b949:	0f af 45 0c          	imul   eax,DWORD PTR [ebp+0xc]
c000b94d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b954:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b957:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b95e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b961:	8b 06                	mov    eax,DWORD PTR [esi]
c000b963:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b967:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b96b:	57                   	push   edi
c000b96c:	57                   	push   edi
c000b96d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b971:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b975:	e8 15 dd ff ff       	call   c000968f <is_bad_src_ratio>
c000b97a:	83 c4 10             	add    esp,0x10
c000b97d:	89 c2                	mov    edx,eax
c000b97f:	b8 16 00 00 00       	mov    eax,0x16
c000b984:	85 d2                	test   edx,edx
c000b986:	0f 85 66 05 00 00    	jne    c000bef2 <sinc_multichan_vari_process+0x5d4>
c000b98c:	83 ec 0c             	sub    esp,0xc
c000b98f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b992:	e8 6c 94 01 00       	call   c0024e03 <__floatsidf>
c000b997:	83 c4 10             	add    esp,0x10
c000b99a:	89 04 24             	mov    DWORD PTR [esp],eax
c000b99d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b9a1:	68 00 00 00 40       	push   0x40000000
c000b9a6:	6a 00                	push   0x0
c000b9a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9b0:	e8 6e 87 01 00       	call   c0024123 <__adddf3>
c000b9b5:	59                   	pop    ecx
c000b9b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b9ba:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000b9be:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b9c1:	e8 3d 94 01 00       	call   c0024e03 <__floatsidf>
c000b9c6:	83 c4 10             	add    esp,0x10
c000b9c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b9cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b9d1:	52                   	push   edx
c000b9d2:	50                   	push   eax
c000b9d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9db:	e8 a4 90 01 00       	call   c0024a84 <__divdf3>
c000b9e0:	83 c4 10             	add    esp,0x10
c000b9e3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9e7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9eb:	8b 06                	mov    eax,DWORD PTR [esi]
c000b9ed:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b9f0:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9f3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b9f7:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c000b9fa:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c000b9fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba01:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba05:	52                   	push   edx
c000ba06:	50                   	push   eax
c000ba07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba0f:	e8 5b 96 01 00       	call   c002506f <__ltdf2>
c000ba14:	83 c4 10             	add    esp,0x10
c000ba17:	85 c0                	test   eax,eax
c000ba19:	79 1d                	jns    c000ba38 <sinc_multichan_vari_process+0x11a>
c000ba1b:	68 00 00 f0 3f       	push   0x3ff00000
c000ba20:	6a 00                	push   0x0
c000ba22:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba26:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba2a:	e8 40 96 01 00       	call   c002506f <__ltdf2>
c000ba2f:	83 c4 10             	add    esp,0x10
c000ba32:	85 c0                	test   eax,eax
c000ba34:	78 2c                	js     c000ba62 <sinc_multichan_vari_process+0x144>
c000ba36:	eb 4a                	jmp    c000ba82 <sinc_multichan_vari_process+0x164>
c000ba38:	68 00 00 f0 3f       	push   0x3ff00000
c000ba3d:	6a 00                	push   0x0
c000ba3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba47:	e8 23 96 01 00       	call   c002506f <__ltdf2>
c000ba4c:	83 c4 10             	add    esp,0x10
c000ba4f:	85 c0                	test   eax,eax
c000ba51:	79 2f                	jns    c000ba82 <sinc_multichan_vari_process+0x164>
c000ba53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba5b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba5e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ba62:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000ba66:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000ba6a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba6e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba72:	e8 0d 90 01 00       	call   c0024a84 <__divdf3>
c000ba77:	83 c4 10             	add    esp,0x10
c000ba7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ba7e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba82:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ba85:	50                   	push   eax
c000ba86:	50                   	push   eax
c000ba87:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8f:	e8 8c 97 01 00       	call   c0025220 <lrint>
c000ba94:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000ba97:	40                   	inc    eax
c000ba98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba9c:	0f af c7             	imul   eax,edi
c000ba9f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000baa3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000baa6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000baaa:	58                   	pop    eax
c000baab:	5a                   	pop    edx
c000baac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bab0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bab4:	e8 55 fc ff ff       	call   c000b70e <fmod_one>
c000bab9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000babc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bac0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bac4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bac7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bacb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bacf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bad3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bad7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000badb:	e8 94 8c 01 00       	call   c0024774 <__subdf3>
c000bae0:	83 c4 18             	add    esp,0x18
c000bae3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bae7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000baeb:	52                   	push   edx
c000baec:	50                   	push   eax
c000baed:	e8 2e 97 01 00       	call   c0025220 <lrint>
c000baf2:	0f af f8             	imul   edi,eax
c000baf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000baf9:	01 f8                	add    eax,edi
c000bafb:	99                   	cdq    
c000bafc:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000baff:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bb02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb0a:	68 00 00 f0 3f       	push   0x3ff00000
c000bb0f:	6a 00                	push   0x0
c000bb11:	e8 6e 8f 01 00       	call   c0024a84 <__divdf3>
c000bb16:	83 c4 10             	add    esp,0x10
c000bb19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bb1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bb21:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bb26:	68 23 42 92 0c       	push   0xc924223
c000bb2b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb33:	e8 eb 85 01 00       	call   c0024123 <__adddf3>
c000bb38:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bb3c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bb40:	83 c4 20             	add    esp,0x20
c000bb43:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000bb4b:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000bb53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bb56:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bb59:	7d 4e                	jge    c000bba9 <sinc_multichan_vari_process+0x28b>
c000bb5b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb5e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb61:	01 c8                	add    eax,ecx
c000bb63:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb66:	99                   	cdq    
c000bb67:	f7 f9                	idiv   ecx
c000bb69:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bb6d:	7d 0c                	jge    c000bb7b <sinc_multichan_vari_process+0x25d>
c000bb6f:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000bb72:	85 ff                	test   edi,edi
c000bb74:	79 68                	jns    c000bbde <sinc_multichan_vari_process+0x2c0>
c000bb76:	e9 e3 00 00 00       	jmp    c000bc5e <sinc_multichan_vari_process+0x340>
c000bb7b:	50                   	push   eax
c000bb7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb80:	55                   	push   ebp
c000bb81:	53                   	push   ebx
c000bb82:	e8 1d fc ff ff       	call   c000b7a4 <prepare_data>
c000bb87:	83 c4 10             	add    esp,0x10
c000bb8a:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	0f 85 5d 03 00 00    	jne    c000bef2 <sinc_multichan_vari_process+0x5d4>
c000bb95:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb98:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb9b:	01 c8                	add    eax,ecx
c000bb9d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bba0:	99                   	cdq    
c000bba1:	f7 f9                	idiv   ecx
c000bba3:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bba7:	7c c6                	jl     c000bb6f <sinc_multichan_vari_process+0x251>
c000bba9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000bbac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bbb0:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bbb3:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bbb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bbba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bbbe:	89 06                	mov    DWORD PTR [esi],eax
c000bbc0:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bbc3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bbc6:	99                   	cdq    
c000bbc7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bbca:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000bbcd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bbd0:	99                   	cdq    
c000bbd1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bbd4:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000bbd7:	31 c0                	xor    eax,eax
c000bbd9:	e9 14 03 00 00       	jmp    c000bef2 <sinc_multichan_vari_process+0x5d4>
c000bbde:	83 ec 0c             	sub    esp,0xc
c000bbe1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bbe4:	e8 1a 92 01 00       	call   c0024e03 <__floatsidf>
c000bbe9:	83 c4 10             	add    esp,0x10
c000bbec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000bbf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000bbfc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc00:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc04:	e8 1a 85 01 00       	call   c0024123 <__adddf3>
c000bc09:	83 c4 10             	add    esp,0x10
c000bc0c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc10:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc14:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc18:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc1c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	e8 fa 84 01 00       	call   c0024123 <__adddf3>
c000bc29:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bc2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc30:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc34:	e8 ca 91 01 00       	call   c0024e03 <__floatsidf>
c000bc39:	83 c4 10             	add    esp,0x10
c000bc3c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc40:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc44:	52                   	push   edx
c000bc45:	50                   	push   eax
c000bc46:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc4a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc4e:	e8 1a 94 01 00       	call   c002506d <__gedf2>
c000bc53:	83 c4 10             	add    esp,0x10
c000bc56:	85 c0                	test   eax,eax
c000bc58:	0f 89 4b ff ff ff    	jns    c000bba9 <sinc_multichan_vari_process+0x28b>
c000bc5e:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bc62:	0f 8e ed 00 00 00    	jle    c000bd55 <sinc_multichan_vari_process+0x437>
c000bc68:	83 ec 10             	sub    esp,0x10
c000bc6b:	ff 75 20             	push   DWORD PTR [ebp+0x20]
c000bc6e:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
c000bc71:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bc74:	ff 36                	push   DWORD PTR [esi]
c000bc76:	e8 f9 8a 01 00       	call   c0024774 <__subdf3>
c000bc7b:	83 c4 18             	add    esp,0x18
c000bc7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc82:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc86:	52                   	push   edx
c000bc87:	50                   	push   eax
c000bc88:	e8 73 95 01 00       	call   c0025200 <fabs>
c000bc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc95:	83 c4 10             	add    esp,0x10
c000bc98:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc9d:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bca2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcaa:	e8 a2 93 01 00       	call   c0025051 <__gtdf2>
c000bcaf:	83 c4 10             	add    esp,0x10
c000bcb2:	85 c0                	test   eax,eax
c000bcb4:	0f 8e 9b 00 00 00    	jle    c000bd55 <sinc_multichan_vari_process+0x437>
c000bcba:	8b 06                	mov    eax,DWORD PTR [esi]
c000bcbc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bcbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bcc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bcc7:	52                   	push   edx
c000bcc8:	50                   	push   eax
c000bcc9:	ff 75 20             	push   DWORD PTR [ebp+0x20]
c000bccc:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
c000bccf:	e8 a0 8a 01 00       	call   c0024774 <__subdf3>
c000bcd4:	59                   	pop    ecx
c000bcd5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bcd9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000bcdd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bce0:	e8 1e 91 01 00       	call   c0024e03 <__floatsidf>
c000bce5:	83 c4 10             	add    esp,0x10
c000bce8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf0:	52                   	push   edx
c000bcf1:	50                   	push   eax
c000bcf2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcf6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcfa:	e8 a1 8a 01 00       	call   c00247a0 <__muldf3>
c000bcff:	5f                   	pop    edi
c000bd00:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd04:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000bd08:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bd0b:	e8 f3 90 01 00       	call   c0024e03 <__floatsidf>
c000bd10:	83 c4 10             	add    esp,0x10
c000bd13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd1b:	52                   	push   edx
c000bd1c:	50                   	push   eax
c000bd1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd21:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd25:	e8 5a 8d 01 00       	call   c0024a84 <__divdf3>
c000bd2a:	83 c4 10             	add    esp,0x10
c000bd2d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd31:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd3d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd45:	e8 d9 83 01 00       	call   c0024123 <__adddf3>
c000bd4a:	83 c4 10             	add    esp,0x10
c000bd4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd51:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd55:	83 ec 0c             	sub    esp,0xc
c000bd58:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd5b:	e8 a3 90 01 00       	call   c0024e03 <__floatsidf>
c000bd60:	83 c4 10             	add    esp,0x10
c000bd63:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd67:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd7b:	e8 ef 92 01 00       	call   c002506f <__ltdf2>
c000bd80:	83 c4 10             	add    esp,0x10
c000bd83:	85 c0                	test   eax,eax
c000bd85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bd89:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bd8d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd91:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000bd95:	78 10                	js     c000bda7 <sinc_multichan_vari_process+0x489>
c000bd97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd9b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bd9f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bda3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bda7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb7:	e8 e4 89 01 00       	call   c00247a0 <__muldf3>
c000bdbc:	59                   	pop    ecx
c000bdbd:	5f                   	pop    edi
c000bdbe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdc2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdce:	e8 14 f9 ff ff       	call   c000b6e7 <double_to_fp>
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	89 c7                	mov    edi,eax
c000bdd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bde1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bde5:	e8 b6 89 01 00       	call   c00247a0 <__muldf3>
c000bdea:	83 c4 18             	add    esp,0x18
c000bded:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdf1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdf5:	52                   	push   edx
c000bdf6:	50                   	push   eax
c000bdf7:	e8 eb f8 ff ff       	call   c000b6e7 <double_to_fp>
c000bdfc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bdff:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000be03:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000be06:	8d 04 90             	lea    eax,[eax+edx*4]
c000be09:	50                   	push   eax
c000be0a:	50                   	push   eax
c000be0b:	50                   	push   eax
c000be0c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000be0f:	e8 ef 8f 01 00       	call   c0024e03 <__floatsidf>
c000be14:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000be18:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000be1c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be20:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be2c:	e8 53 8c 01 00       	call   c0024a84 <__divdf3>
c000be31:	83 c4 1c             	add    esp,0x1c
c000be34:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be38:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be3c:	52                   	push   edx
c000be3d:	89 fa                	mov    edx,edi
c000be3f:	50                   	push   eax
c000be40:	89 d8                	mov    eax,ebx
c000be42:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be45:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000be49:	e8 58 ed ff ff       	call   c000aba6 <calc_output_multi>
c000be4e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be51:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000be54:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be5c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be60:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be64:	e8 1b 8c 01 00       	call   c0024a84 <__divdf3>
c000be69:	83 c4 10             	add    esp,0x10
c000be6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000be74:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be78:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be84:	e8 9a 82 01 00       	call   c0024123 <__adddf3>
c000be89:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000be8d:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000be91:	83 c4 28             	add    esp,0x28
c000be94:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be9c:	e8 6d f8 ff ff       	call   c000b70e <fmod_one>
c000bea1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bea4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bea8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000beac:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000beaf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000beb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bebb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bebf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bec3:	e8 ac 88 01 00       	call   c0024774 <__subdf3>
c000bec8:	83 c4 18             	add    esp,0x18
c000becb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000becf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bed3:	52                   	push   edx
c000bed4:	50                   	push   eax
c000bed5:	e8 46 93 01 00       	call   c0025220 <lrint>
c000beda:	0f af f8             	imul   edi,eax
c000bedd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bee1:	83 c4 10             	add    esp,0x10
c000bee4:	01 f8                	add    eax,edi
c000bee6:	99                   	cdq    
c000bee7:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000beea:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000beed:	e9 61 fc ff ff       	jmp    c000bb53 <sinc_multichan_vari_process+0x235>
c000bef2:	83 c4 4c             	add    esp,0x4c
c000bef5:	5b                   	pop    ebx
c000bef6:	5e                   	pop    esi
c000bef7:	5f                   	pop    edi
c000bef8:	5d                   	pop    ebp
c000bef9:	c3                   	ret    

c000befa <sinc_hex_vari_process>:
c000befa:	55                   	push   ebp
c000befb:	b8 05 00 00 00       	mov    eax,0x5
c000bf00:	57                   	push   edi
c000bf01:	56                   	push   esi
c000bf02:	53                   	push   ebx
c000bf03:	83 ec 4c             	sub    esp,0x4c
c000bf06:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bf0a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bf0e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000bf11:	85 db                	test   ebx,ebx
c000bf13:	0f 84 b7 05 00 00    	je     c000c4d0 <sinc_hex_vari_process+0x5d6>
c000bf19:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000bf1c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bf1f:	0f af d0             	imul   edx,eax
c000bf22:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000bf25:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000bf29:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf30:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf33:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf3a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf3d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf40:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf48:	57                   	push   edi
c000bf49:	57                   	push   edi
c000bf4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf52:	e8 38 d7 ff ff       	call   c000968f <is_bad_src_ratio>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	89 c2                	mov    edx,eax
c000bf5c:	b8 16 00 00 00       	mov    eax,0x16
c000bf61:	85 d2                	test   edx,edx
c000bf63:	0f 85 67 05 00 00    	jne    c000c4d0 <sinc_hex_vari_process+0x5d6>
c000bf69:	83 ec 0c             	sub    esp,0xc
c000bf6c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf6f:	e8 8f 8e 01 00       	call   c0024e03 <__floatsidf>
c000bf74:	83 c4 10             	add    esp,0x10
c000bf77:	89 04 24             	mov    DWORD PTR [esp],eax
c000bf7a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bf7e:	68 00 00 00 40       	push   0x40000000
c000bf83:	6a 00                	push   0x0
c000bf85:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bf89:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bf8d:	e8 91 81 01 00       	call   c0024123 <__adddf3>
c000bf92:	59                   	pop    ecx
c000bf93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bf97:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000bf9b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf9e:	e8 60 8e 01 00       	call   c0024e03 <__floatsidf>
c000bfa3:	83 c4 10             	add    esp,0x10
c000bfa6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bfaa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bfae:	52                   	push   edx
c000bfaf:	50                   	push   eax
c000bfb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfb8:	e8 c7 8a 01 00       	call   c0024a84 <__divdf3>
c000bfbd:	83 c4 10             	add    esp,0x10
c000bfc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfc4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfc8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bfcb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bfce:	89 04 24             	mov    DWORD PTR [esp],eax
c000bfd1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bfd5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfd8:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bfdb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bfdf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bfe3:	52                   	push   edx
c000bfe4:	50                   	push   eax
c000bfe5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfe9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfed:	e8 7d 90 01 00       	call   c002506f <__ltdf2>
c000bff2:	83 c4 10             	add    esp,0x10
c000bff5:	85 c0                	test   eax,eax
c000bff7:	79 1d                	jns    c000c016 <sinc_hex_vari_process+0x11c>
c000bff9:	68 00 00 f0 3f       	push   0x3ff00000
c000bffe:	6a 00                	push   0x0
c000c000:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c004:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c008:	e8 62 90 01 00       	call   c002506f <__ltdf2>
c000c00d:	83 c4 10             	add    esp,0x10
c000c010:	85 c0                	test   eax,eax
c000c012:	78 2c                	js     c000c040 <sinc_hex_vari_process+0x146>
c000c014:	eb 4a                	jmp    c000c060 <sinc_hex_vari_process+0x166>
c000c016:	68 00 00 f0 3f       	push   0x3ff00000
c000c01b:	6a 00                	push   0x0
c000c01d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c021:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c025:	e8 45 90 01 00       	call   c002506f <__ltdf2>
c000c02a:	83 c4 10             	add    esp,0x10
c000c02d:	85 c0                	test   eax,eax
c000c02f:	79 2f                	jns    c000c060 <sinc_hex_vari_process+0x166>
c000c031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c035:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c039:	89 04 24             	mov    DWORD PTR [esp],eax
c000c03c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c040:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c044:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c048:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c04c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c050:	e8 2f 8a 01 00       	call   c0024a84 <__divdf3>
c000c055:	83 c4 10             	add    esp,0x10
c000c058:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c05c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c060:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c063:	50                   	push   eax
c000c064:	50                   	push   eax
c000c065:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c069:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c06d:	e8 ae 91 01 00       	call   c0025220 <lrint>
c000c072:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c075:	40                   	inc    eax
c000c076:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c07a:	0f af c7             	imul   eax,edi
c000c07d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c081:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c084:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c088:	58                   	pop    eax
c000c089:	5a                   	pop    edx
c000c08a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c08e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c092:	e8 77 f6 ff ff       	call   c000b70e <fmod_one>
c000c097:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c09a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c09e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c0a2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0b9:	e8 b6 86 01 00       	call   c0024774 <__subdf3>
c000c0be:	83 c4 18             	add    esp,0x18
c000c0c1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c0c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c0c9:	52                   	push   edx
c000c0ca:	50                   	push   eax
c000c0cb:	e8 50 91 01 00       	call   c0025220 <lrint>
c000c0d0:	0f af f8             	imul   edi,eax
c000c0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0d7:	01 f8                	add    eax,edi
c000c0d9:	99                   	cdq    
c000c0da:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0dd:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0e8:	68 00 00 f0 3f       	push   0x3ff00000
c000c0ed:	6a 00                	push   0x0
c000c0ef:	e8 90 89 01 00       	call   c0024a84 <__divdf3>
c000c0f4:	83 c4 10             	add    esp,0x10
c000c0f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0fb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0ff:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c104:	68 23 42 92 0c       	push   0xc924223
c000c109:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c10d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c111:	e8 0d 80 01 00       	call   c0024123 <__adddf3>
c000c116:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c11a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c11e:	83 c4 20             	add    esp,0x20
c000c121:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c129:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000c131:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c134:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c137:	7d 4e                	jge    c000c187 <sinc_hex_vari_process+0x28d>
c000c139:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c13c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c13f:	01 c8                	add    eax,ecx
c000c141:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c144:	99                   	cdq    
c000c145:	f7 f9                	idiv   ecx
c000c147:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c14b:	7d 0c                	jge    c000c159 <sinc_hex_vari_process+0x25f>
c000c14d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c150:	85 ff                	test   edi,edi
c000c152:	79 69                	jns    c000c1bd <sinc_hex_vari_process+0x2c3>
c000c154:	e9 e4 00 00 00       	jmp    c000c23d <sinc_hex_vari_process+0x343>
c000c159:	50                   	push   eax
c000c15a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c15e:	56                   	push   esi
c000c15f:	53                   	push   ebx
c000c160:	e8 3f f6 ff ff       	call   c000b7a4 <prepare_data>
c000c165:	83 c4 10             	add    esp,0x10
c000c168:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c16b:	85 c0                	test   eax,eax
c000c16d:	0f 85 5d 03 00 00    	jne    c000c4d0 <sinc_hex_vari_process+0x5d6>
c000c173:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c176:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c179:	01 c8                	add    eax,ecx
c000c17b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c17e:	99                   	cdq    
c000c17f:	f7 f9                	idiv   ecx
c000c181:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c185:	7c c6                	jl     c000c14d <sinc_hex_vari_process+0x253>
c000c187:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c18a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c18e:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c191:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c19c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c19f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c1a2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c1a5:	99                   	cdq    
c000c1a6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c1a9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c1ac:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c1af:	99                   	cdq    
c000c1b0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c1b3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c1b6:	31 c0                	xor    eax,eax
c000c1b8:	e9 13 03 00 00       	jmp    c000c4d0 <sinc_hex_vari_process+0x5d6>
c000c1bd:	83 ec 0c             	sub    esp,0xc
c000c1c0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c1c3:	e8 3b 8c 01 00       	call   c0024e03 <__floatsidf>
c000c1c8:	83 c4 10             	add    esp,0x10
c000c1cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c1d7:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c1db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1df:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1e3:	e8 3b 7f 01 00       	call   c0024123 <__adddf3>
c000c1e8:	83 c4 10             	add    esp,0x10
c000c1eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ef:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c203:	e8 1b 7f 01 00       	call   c0024123 <__adddf3>
c000c208:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c20b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c20f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c213:	e8 eb 8b 01 00       	call   c0024e03 <__floatsidf>
c000c218:	83 c4 10             	add    esp,0x10
c000c21b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c21f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c223:	52                   	push   edx
c000c224:	50                   	push   eax
c000c225:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c229:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c22d:	e8 3b 8e 01 00       	call   c002506d <__gedf2>
c000c232:	83 c4 10             	add    esp,0x10
c000c235:	85 c0                	test   eax,eax
c000c237:	0f 89 4a ff ff ff    	jns    c000c187 <sinc_hex_vari_process+0x28d>
c000c23d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c241:	0f 8e ef 00 00 00    	jle    c000c336 <sinc_hex_vari_process+0x43c>
c000c247:	83 ec 10             	sub    esp,0x10
c000c24a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c24d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c250:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c253:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c256:	e8 19 85 01 00       	call   c0024774 <__subdf3>
c000c25b:	83 c4 18             	add    esp,0x18
c000c25e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c262:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c266:	52                   	push   edx
c000c267:	50                   	push   eax
c000c268:	e8 93 8f 01 00       	call   c0025200 <fabs>
c000c26d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c271:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c275:	83 c4 10             	add    esp,0x10
c000c278:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c27d:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c282:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	e8 c2 8d 01 00       	call   c0025051 <__gtdf2>
c000c28f:	83 c4 10             	add    esp,0x10
c000c292:	85 c0                	test   eax,eax
c000c294:	0f 8e 9c 00 00 00    	jle    c000c336 <sinc_hex_vari_process+0x43c>
c000c29a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c29d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c2a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c2a8:	52                   	push   edx
c000c2a9:	50                   	push   eax
c000c2aa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2ad:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2b0:	e8 bf 84 01 00       	call   c0024774 <__subdf3>
c000c2b5:	59                   	pop    ecx
c000c2b6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c2ba:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c2be:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c2c1:	e8 3d 8b 01 00       	call   c0024e03 <__floatsidf>
c000c2c6:	83 c4 10             	add    esp,0x10
c000c2c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d1:	52                   	push   edx
c000c2d2:	50                   	push   eax
c000c2d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2db:	e8 c0 84 01 00       	call   c00247a0 <__muldf3>
c000c2e0:	5f                   	pop    edi
c000c2e1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c2e5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c2e9:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c2ec:	e8 12 8b 01 00       	call   c0024e03 <__floatsidf>
c000c2f1:	83 c4 10             	add    esp,0x10
c000c2f4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2f8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2fc:	52                   	push   edx
c000c2fd:	50                   	push   eax
c000c2fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c302:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c306:	e8 79 87 01 00       	call   c0024a84 <__divdf3>
c000c30b:	83 c4 10             	add    esp,0x10
c000c30e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c312:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c316:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c31a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c31e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c322:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c326:	e8 f8 7d 01 00       	call   c0024123 <__adddf3>
c000c32b:	83 c4 10             	add    esp,0x10
c000c32e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c332:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c336:	83 ec 0c             	sub    esp,0xc
c000c339:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c33c:	e8 c2 8a 01 00       	call   c0024e03 <__floatsidf>
c000c341:	83 c4 10             	add    esp,0x10
c000c344:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c348:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c34c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c350:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c354:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c35c:	e8 0e 8d 01 00       	call   c002506f <__ltdf2>
c000c361:	83 c4 10             	add    esp,0x10
c000c364:	85 c0                	test   eax,eax
c000c366:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c36a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c36e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c372:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c376:	78 10                	js     c000c388 <sinc_hex_vari_process+0x48e>
c000c378:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c37c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c380:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c384:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c390:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c394:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c398:	e8 03 84 01 00       	call   c00247a0 <__muldf3>
c000c39d:	59                   	pop    ecx
c000c39e:	5f                   	pop    edi
c000c39f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3a3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3af:	e8 33 f3 ff ff       	call   c000b6e7 <double_to_fp>
c000c3b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3b8:	89 c7                	mov    edi,eax
c000c3ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c6:	e8 d5 83 01 00       	call   c00247a0 <__muldf3>
c000c3cb:	83 c4 18             	add    esp,0x18
c000c3ce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c3d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c3d6:	52                   	push   edx
c000c3d7:	50                   	push   eax
c000c3d8:	e8 0a f3 ff ff       	call   c000b6e7 <double_to_fp>
c000c3dd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c3e0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c3e4:	83 c4 0c             	add    esp,0xc
c000c3e7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c3ea:	8d 04 90             	lea    eax,[eax+edx*4]
c000c3ed:	50                   	push   eax
c000c3ee:	50                   	push   eax
c000c3ef:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3f2:	e8 0c 8a 01 00       	call   c0024e03 <__floatsidf>
c000c3f7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c3fb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c3ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c403:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c407:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c40b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c40f:	e8 70 86 01 00       	call   c0024a84 <__divdf3>
c000c414:	83 c4 18             	add    esp,0x18
c000c417:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c41b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c41f:	52                   	push   edx
c000c420:	89 fa                	mov    edx,edi
c000c422:	50                   	push   eax
c000c423:	89 d8                	mov    eax,ebx
c000c425:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c429:	e8 26 df ff ff       	call   c000a354 <calc_output_hex>
c000c42e:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c436:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c43a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c43e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c442:	e8 3d 86 01 00       	call   c0024a84 <__divdf3>
c000c447:	83 c4 10             	add    esp,0x10
c000c44a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c44e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c452:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c456:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c45a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c45e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c462:	e8 bc 7c 01 00       	call   c0024123 <__adddf3>
c000c467:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c46b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c46f:	83 c4 18             	add    esp,0x18
c000c472:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c476:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c47a:	e8 8f f2 ff ff       	call   c000b70e <fmod_one>
c000c47f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c482:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c486:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c48a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c48d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c491:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c495:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c499:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c49d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4a1:	e8 ce 82 01 00       	call   c0024774 <__subdf3>
c000c4a6:	83 c4 18             	add    esp,0x18
c000c4a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4ad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4b1:	52                   	push   edx
c000c4b2:	50                   	push   eax
c000c4b3:	e8 68 8d 01 00       	call   c0025220 <lrint>
c000c4b8:	0f af f8             	imul   edi,eax
c000c4bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c4bf:	83 c4 10             	add    esp,0x10
c000c4c2:	01 f8                	add    eax,edi
c000c4c4:	99                   	cdq    
c000c4c5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c4c8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c4cb:	e9 61 fc ff ff       	jmp    c000c131 <sinc_hex_vari_process+0x237>
c000c4d0:	83 c4 4c             	add    esp,0x4c
c000c4d3:	5b                   	pop    ebx
c000c4d4:	5e                   	pop    esi
c000c4d5:	5f                   	pop    edi
c000c4d6:	5d                   	pop    ebp
c000c4d7:	c3                   	ret    

c000c4d8 <sinc_quad_vari_process>:
c000c4d8:	55                   	push   ebp
c000c4d9:	b8 05 00 00 00       	mov    eax,0x5
c000c4de:	57                   	push   edi
c000c4df:	56                   	push   esi
c000c4e0:	53                   	push   ebx
c000c4e1:	83 ec 4c             	sub    esp,0x4c
c000c4e4:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c4e8:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c4ec:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c4ef:	85 db                	test   ebx,ebx
c000c4f1:	0f 84 b7 05 00 00    	je     c000caae <sinc_quad_vari_process+0x5d6>
c000c4f7:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000c4fa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c4fd:	0f af d0             	imul   edx,eax
c000c500:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000c503:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000c507:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c50e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c511:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c518:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c51b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c51e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c522:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c526:	57                   	push   edi
c000c527:	57                   	push   edi
c000c528:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c52c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c530:	e8 5a d1 ff ff       	call   c000968f <is_bad_src_ratio>
c000c535:	83 c4 10             	add    esp,0x10
c000c538:	89 c2                	mov    edx,eax
c000c53a:	b8 16 00 00 00       	mov    eax,0x16
c000c53f:	85 d2                	test   edx,edx
c000c541:	0f 85 67 05 00 00    	jne    c000caae <sinc_quad_vari_process+0x5d6>
c000c547:	83 ec 0c             	sub    esp,0xc
c000c54a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c54d:	e8 b1 88 01 00       	call   c0024e03 <__floatsidf>
c000c552:	83 c4 10             	add    esp,0x10
c000c555:	89 04 24             	mov    DWORD PTR [esp],eax
c000c558:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c55c:	68 00 00 00 40       	push   0x40000000
c000c561:	6a 00                	push   0x0
c000c563:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c567:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c56b:	e8 b3 7b 01 00       	call   c0024123 <__adddf3>
c000c570:	59                   	pop    ecx
c000c571:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c575:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c579:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c57c:	e8 82 88 01 00       	call   c0024e03 <__floatsidf>
c000c581:	83 c4 10             	add    esp,0x10
c000c584:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c588:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c58c:	52                   	push   edx
c000c58d:	50                   	push   eax
c000c58e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c592:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c596:	e8 e9 84 01 00       	call   c0024a84 <__divdf3>
c000c59b:	83 c4 10             	add    esp,0x10
c000c59e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c5a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c5a6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5a9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5ac:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5af:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c5b3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c5b6:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c5b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5bd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5c1:	52                   	push   edx
c000c5c2:	50                   	push   eax
c000c5c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5c7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5cb:	e8 9f 8a 01 00       	call   c002506f <__ltdf2>
c000c5d0:	83 c4 10             	add    esp,0x10
c000c5d3:	85 c0                	test   eax,eax
c000c5d5:	79 1d                	jns    c000c5f4 <sinc_quad_vari_process+0x11c>
c000c5d7:	68 00 00 f0 3f       	push   0x3ff00000
c000c5dc:	6a 00                	push   0x0
c000c5de:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5e2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5e6:	e8 84 8a 01 00       	call   c002506f <__ltdf2>
c000c5eb:	83 c4 10             	add    esp,0x10
c000c5ee:	85 c0                	test   eax,eax
c000c5f0:	78 2c                	js     c000c61e <sinc_quad_vari_process+0x146>
c000c5f2:	eb 4a                	jmp    c000c63e <sinc_quad_vari_process+0x166>
c000c5f4:	68 00 00 f0 3f       	push   0x3ff00000
c000c5f9:	6a 00                	push   0x0
c000c5fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c603:	e8 67 8a 01 00       	call   c002506f <__ltdf2>
c000c608:	83 c4 10             	add    esp,0x10
c000c60b:	85 c0                	test   eax,eax
c000c60d:	79 2f                	jns    c000c63e <sinc_quad_vari_process+0x166>
c000c60f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c613:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c617:	89 04 24             	mov    DWORD PTR [esp],eax
c000c61a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c61e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c622:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c626:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c62a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c62e:	e8 51 84 01 00       	call   c0024a84 <__divdf3>
c000c633:	83 c4 10             	add    esp,0x10
c000c636:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c63a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c63e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c641:	50                   	push   eax
c000c642:	50                   	push   eax
c000c643:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c647:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64b:	e8 d0 8b 01 00       	call   c0025220 <lrint>
c000c650:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c653:	40                   	inc    eax
c000c654:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c658:	0f af c7             	imul   eax,edi
c000c65b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c65f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c662:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c666:	58                   	pop    eax
c000c667:	5a                   	pop    edx
c000c668:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c66c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c670:	e8 99 f0 ff ff       	call   c000b70e <fmod_one>
c000c675:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c678:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c67c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c680:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c683:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c68b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c68f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c693:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c697:	e8 d8 80 01 00       	call   c0024774 <__subdf3>
c000c69c:	83 c4 18             	add    esp,0x18
c000c69f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c6a3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c6a7:	52                   	push   edx
c000c6a8:	50                   	push   eax
c000c6a9:	e8 72 8b 01 00       	call   c0025220 <lrint>
c000c6ae:	0f af f8             	imul   edi,eax
c000c6b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6b5:	01 f8                	add    eax,edi
c000c6b7:	99                   	cdq    
c000c6b8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c6bb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c6be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6c6:	68 00 00 f0 3f       	push   0x3ff00000
c000c6cb:	6a 00                	push   0x0
c000c6cd:	e8 b2 83 01 00       	call   c0024a84 <__divdf3>
c000c6d2:	83 c4 10             	add    esp,0x10
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c6e2:	68 23 42 92 0c       	push   0xc924223
c000c6e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6ef:	e8 2f 7a 01 00       	call   c0024123 <__adddf3>
c000c6f4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c6f8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c6fc:	83 c4 20             	add    esp,0x20
c000c6ff:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c707:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000c70f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c712:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c715:	7d 4e                	jge    c000c765 <sinc_quad_vari_process+0x28d>
c000c717:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c71a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c71d:	01 c8                	add    eax,ecx
c000c71f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c722:	99                   	cdq    
c000c723:	f7 f9                	idiv   ecx
c000c725:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c729:	7d 0c                	jge    c000c737 <sinc_quad_vari_process+0x25f>
c000c72b:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c72e:	85 ff                	test   edi,edi
c000c730:	79 69                	jns    c000c79b <sinc_quad_vari_process+0x2c3>
c000c732:	e9 e4 00 00 00       	jmp    c000c81b <sinc_quad_vari_process+0x343>
c000c737:	50                   	push   eax
c000c738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73c:	56                   	push   esi
c000c73d:	53                   	push   ebx
c000c73e:	e8 61 f0 ff ff       	call   c000b7a4 <prepare_data>
c000c743:	83 c4 10             	add    esp,0x10
c000c746:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c749:	85 c0                	test   eax,eax
c000c74b:	0f 85 5d 03 00 00    	jne    c000caae <sinc_quad_vari_process+0x5d6>
c000c751:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c754:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c757:	01 c8                	add    eax,ecx
c000c759:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c75c:	99                   	cdq    
c000c75d:	f7 f9                	idiv   ecx
c000c75f:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c763:	7c c6                	jl     c000c72b <sinc_quad_vari_process+0x253>
c000c765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c76c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c76f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c776:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c77a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c77d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c780:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c783:	99                   	cdq    
c000c784:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c787:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c78a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c78d:	99                   	cdq    
c000c78e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c791:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c794:	31 c0                	xor    eax,eax
c000c796:	e9 13 03 00 00       	jmp    c000caae <sinc_quad_vari_process+0x5d6>
c000c79b:	83 ec 0c             	sub    esp,0xc
c000c79e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c7a1:	e8 5d 86 01 00       	call   c0024e03 <__floatsidf>
c000c7a6:	83 c4 10             	add    esp,0x10
c000c7a9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7ad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7b1:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c7b5:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c7b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7c1:	e8 5d 79 01 00       	call   c0024123 <__adddf3>
c000c7c6:	83 c4 10             	add    esp,0x10
c000c7c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7d9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7e1:	e8 3d 79 01 00       	call   c0024123 <__adddf3>
c000c7e6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c7e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7f1:	e8 0d 86 01 00       	call   c0024e03 <__floatsidf>
c000c7f6:	83 c4 10             	add    esp,0x10
c000c7f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c801:	52                   	push   edx
c000c802:	50                   	push   eax
c000c803:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c807:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c80b:	e8 5d 88 01 00       	call   c002506d <__gedf2>
c000c810:	83 c4 10             	add    esp,0x10
c000c813:	85 c0                	test   eax,eax
c000c815:	0f 89 4a ff ff ff    	jns    c000c765 <sinc_quad_vari_process+0x28d>
c000c81b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c81f:	0f 8e ef 00 00 00    	jle    c000c914 <sinc_quad_vari_process+0x43c>
c000c825:	83 ec 10             	sub    esp,0x10
c000c828:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c82b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c82e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c831:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c834:	e8 3b 7f 01 00       	call   c0024774 <__subdf3>
c000c839:	83 c4 18             	add    esp,0x18
c000c83c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c840:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c844:	52                   	push   edx
c000c845:	50                   	push   eax
c000c846:	e8 b5 89 01 00       	call   c0025200 <fabs>
c000c84b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c84f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c853:	83 c4 10             	add    esp,0x10
c000c856:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c85b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c860:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c864:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c868:	e8 e4 87 01 00       	call   c0025051 <__gtdf2>
c000c86d:	83 c4 10             	add    esp,0x10
c000c870:	85 c0                	test   eax,eax
c000c872:	0f 8e 9c 00 00 00    	jle    c000c914 <sinc_quad_vari_process+0x43c>
c000c878:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c87b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c87e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c882:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c886:	52                   	push   edx
c000c887:	50                   	push   eax
c000c888:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c88b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c88e:	e8 e1 7e 01 00       	call   c0024774 <__subdf3>
c000c893:	59                   	pop    ecx
c000c894:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c898:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c89c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c89f:	e8 5f 85 01 00       	call   c0024e03 <__floatsidf>
c000c8a4:	83 c4 10             	add    esp,0x10
c000c8a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8ab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8af:	52                   	push   edx
c000c8b0:	50                   	push   eax
c000c8b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8b5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8b9:	e8 e2 7e 01 00       	call   c00247a0 <__muldf3>
c000c8be:	5f                   	pop    edi
c000c8bf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c8c3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c8c7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c8ca:	e8 34 85 01 00       	call   c0024e03 <__floatsidf>
c000c8cf:	83 c4 10             	add    esp,0x10
c000c8d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8da:	52                   	push   edx
c000c8db:	50                   	push   eax
c000c8dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8e4:	e8 9b 81 01 00       	call   c0024a84 <__divdf3>
c000c8e9:	83 c4 10             	add    esp,0x10
c000c8ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8f0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c900:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c904:	e8 1a 78 01 00       	call   c0024123 <__adddf3>
c000c909:	83 c4 10             	add    esp,0x10
c000c90c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c910:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c914:	83 ec 0c             	sub    esp,0xc
c000c917:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c91a:	e8 e4 84 01 00       	call   c0024e03 <__floatsidf>
c000c91f:	83 c4 10             	add    esp,0x10
c000c922:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c926:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c92a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c92e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c932:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c936:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c93a:	e8 30 87 01 00       	call   c002506f <__ltdf2>
c000c93f:	83 c4 10             	add    esp,0x10
c000c942:	85 c0                	test   eax,eax
c000c944:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c948:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c94c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c950:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c954:	78 10                	js     c000c966 <sinc_quad_vari_process+0x48e>
c000c956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c95a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c95e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c962:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c96a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c96e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c972:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c976:	e8 25 7e 01 00       	call   c00247a0 <__muldf3>
c000c97b:	59                   	pop    ecx
c000c97c:	5f                   	pop    edi
c000c97d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c981:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 55 ed ff ff       	call   c000b6e7 <double_to_fp>
c000c992:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c996:	89 c7                	mov    edi,eax
c000c998:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c99c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9a4:	e8 f7 7d 01 00       	call   c00247a0 <__muldf3>
c000c9a9:	83 c4 18             	add    esp,0x18
c000c9ac:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9b0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9b4:	52                   	push   edx
c000c9b5:	50                   	push   eax
c000c9b6:	e8 2c ed ff ff       	call   c000b6e7 <double_to_fp>
c000c9bb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c9be:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c9c2:	83 c4 0c             	add    esp,0xc
c000c9c5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c9c8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c9cb:	50                   	push   eax
c000c9cc:	50                   	push   eax
c000c9cd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c9d0:	e8 2e 84 01 00       	call   c0024e03 <__floatsidf>
c000c9d5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c9d9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c9dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ed:	e8 92 80 01 00       	call   c0024a84 <__divdf3>
c000c9f2:	83 c4 18             	add    esp,0x18
c000c9f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c9f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c9fd:	52                   	push   edx
c000c9fe:	89 fa                	mov    edx,edi
c000ca00:	50                   	push   eax
c000ca01:	89 d8                	mov    eax,ebx
c000ca03:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000ca07:	e8 62 d3 ff ff       	call   c0009d6e <calc_output_quad>
c000ca0c:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000ca10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca20:	e8 5f 80 01 00       	call   c0024a84 <__divdf3>
c000ca25:	83 c4 10             	add    esp,0x10
c000ca28:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca2c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca38:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca40:	e8 de 76 01 00       	call   c0024123 <__adddf3>
c000ca45:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca49:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ca4d:	83 c4 18             	add    esp,0x18
c000ca50:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca54:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca58:	e8 b1 ec ff ff       	call   c000b70e <fmod_one>
c000ca5d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca64:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca6b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca7f:	e8 f0 7c 01 00       	call   c0024774 <__subdf3>
c000ca84:	83 c4 18             	add    esp,0x18
c000ca87:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca8b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca8f:	52                   	push   edx
c000ca90:	50                   	push   eax
c000ca91:	e8 8a 87 01 00       	call   c0025220 <lrint>
c000ca96:	0f af f8             	imul   edi,eax
c000ca99:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ca9d:	83 c4 10             	add    esp,0x10
c000caa0:	01 f8                	add    eax,edi
c000caa2:	99                   	cdq    
c000caa3:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000caa6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000caa9:	e9 61 fc ff ff       	jmp    c000c70f <sinc_quad_vari_process+0x237>
c000caae:	83 c4 4c             	add    esp,0x4c
c000cab1:	5b                   	pop    ebx
c000cab2:	5e                   	pop    esi
c000cab3:	5f                   	pop    edi
c000cab4:	5d                   	pop    ebp
c000cab5:	c3                   	ret    

c000cab6 <sinc_stereo_vari_process>:
c000cab6:	55                   	push   ebp
c000cab7:	b8 05 00 00 00       	mov    eax,0x5
c000cabc:	57                   	push   edi
c000cabd:	56                   	push   esi
c000cabe:	53                   	push   ebx
c000cabf:	83 ec 4c             	sub    esp,0x4c
c000cac2:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cac6:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000caca:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cacd:	85 db                	test   ebx,ebx
c000cacf:	0f 84 b7 05 00 00    	je     c000d08c <sinc_stereo_vari_process+0x5d6>
c000cad5:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000cad8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000cadb:	0f af d0             	imul   edx,eax
c000cade:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000cae1:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000cae5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000caec:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000caef:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000caf6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000caf9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cafc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cb00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb04:	57                   	push   edi
c000cb05:	57                   	push   edi
c000cb06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb0e:	e8 7c cb ff ff       	call   c000968f <is_bad_src_ratio>
c000cb13:	83 c4 10             	add    esp,0x10
c000cb16:	89 c2                	mov    edx,eax
c000cb18:	b8 16 00 00 00       	mov    eax,0x16
c000cb1d:	85 d2                	test   edx,edx
c000cb1f:	0f 85 67 05 00 00    	jne    c000d08c <sinc_stereo_vari_process+0x5d6>
c000cb25:	83 ec 0c             	sub    esp,0xc
c000cb28:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cb2b:	e8 d3 82 01 00       	call   c0024e03 <__floatsidf>
c000cb30:	83 c4 10             	add    esp,0x10
c000cb33:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb36:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb3a:	68 00 00 00 40       	push   0x40000000
c000cb3f:	6a 00                	push   0x0
c000cb41:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb45:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb49:	e8 d5 75 01 00       	call   c0024123 <__adddf3>
c000cb4e:	59                   	pop    ecx
c000cb4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb53:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000cb57:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb5a:	e8 a4 82 01 00       	call   c0024e03 <__floatsidf>
c000cb5f:	83 c4 10             	add    esp,0x10
c000cb62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb66:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cb6a:	52                   	push   edx
c000cb6b:	50                   	push   eax
c000cb6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb74:	e8 0b 7f 01 00       	call   c0024a84 <__divdf3>
c000cb79:	83 c4 10             	add    esp,0x10
c000cb7c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cb80:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cb84:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb87:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cb8a:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb8d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb91:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cb94:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cb97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb9b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cb9f:	52                   	push   edx
c000cba0:	50                   	push   eax
c000cba1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cba5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cba9:	e8 c1 84 01 00       	call   c002506f <__ltdf2>
c000cbae:	83 c4 10             	add    esp,0x10
c000cbb1:	85 c0                	test   eax,eax
c000cbb3:	79 1d                	jns    c000cbd2 <sinc_stereo_vari_process+0x11c>
c000cbb5:	68 00 00 f0 3f       	push   0x3ff00000
c000cbba:	6a 00                	push   0x0
c000cbbc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbc0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbc4:	e8 a6 84 01 00       	call   c002506f <__ltdf2>
c000cbc9:	83 c4 10             	add    esp,0x10
c000cbcc:	85 c0                	test   eax,eax
c000cbce:	78 2c                	js     c000cbfc <sinc_stereo_vari_process+0x146>
c000cbd0:	eb 4a                	jmp    c000cc1c <sinc_stereo_vari_process+0x166>
c000cbd2:	68 00 00 f0 3f       	push   0x3ff00000
c000cbd7:	6a 00                	push   0x0
c000cbd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbe1:	e8 89 84 01 00       	call   c002506f <__ltdf2>
c000cbe6:	83 c4 10             	add    esp,0x10
c000cbe9:	85 c0                	test   eax,eax
c000cbeb:	79 2f                	jns    c000cc1c <sinc_stereo_vari_process+0x166>
c000cbed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbf1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cbf5:	89 04 24             	mov    DWORD PTR [esp],eax
c000cbf8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cbfc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cc00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cc04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc0c:	e8 73 7e 01 00       	call   c0024a84 <__divdf3>
c000cc11:	83 c4 10             	add    esp,0x10
c000cc14:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cc18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cc1c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc1f:	50                   	push   eax
c000cc20:	50                   	push   eax
c000cc21:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc25:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc29:	e8 f2 85 01 00       	call   c0025220 <lrint>
c000cc2e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cc31:	40                   	inc    eax
c000cc32:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc36:	0f af c7             	imul   eax,edi
c000cc39:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc44:	58                   	pop    eax
c000cc45:	5a                   	pop    edx
c000cc46:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc4a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc4e:	e8 bb ea ff ff       	call   c000b70e <fmod_one>
c000cc53:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc56:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc5a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc5e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc61:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc75:	e8 fa 7a 01 00       	call   c0024774 <__subdf3>
c000cc7a:	83 c4 18             	add    esp,0x18
c000cc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc85:	52                   	push   edx
c000cc86:	50                   	push   eax
c000cc87:	e8 94 85 01 00       	call   c0025220 <lrint>
c000cc8c:	0f af f8             	imul   edi,eax
c000cc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc93:	01 f8                	add    eax,edi
c000cc95:	99                   	cdq    
c000cc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca4:	68 00 00 f0 3f       	push   0x3ff00000
c000cca9:	6a 00                	push   0x0
c000ccab:	e8 d4 7d 01 00       	call   c0024a84 <__divdf3>
c000ccb0:	83 c4 10             	add    esp,0x10
c000ccb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ccc0:	68 23 42 92 0c       	push   0xc924223
c000ccc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cccd:	e8 51 74 01 00       	call   c0024123 <__adddf3>
c000ccd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ccd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ccda:	83 c4 20             	add    esp,0x20
c000ccdd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000cce5:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000cced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ccf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ccf3:	7d 4e                	jge    c000cd43 <sinc_stereo_vari_process+0x28d>
c000ccf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ccfb:	01 c8                	add    eax,ecx
c000ccfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cd00:	99                   	cdq    
c000cd01:	f7 f9                	idiv   ecx
c000cd03:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000cd07:	7d 0c                	jge    c000cd15 <sinc_stereo_vari_process+0x25f>
c000cd09:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cd0c:	85 ff                	test   edi,edi
c000cd0e:	79 69                	jns    c000cd79 <sinc_stereo_vari_process+0x2c3>
c000cd10:	e9 e4 00 00 00       	jmp    c000cdf9 <sinc_stereo_vari_process+0x343>
c000cd15:	50                   	push   eax
c000cd16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd1a:	56                   	push   esi
c000cd1b:	53                   	push   ebx
c000cd1c:	e8 83 ea ff ff       	call   c000b7a4 <prepare_data>
c000cd21:	83 c4 10             	add    esp,0x10
c000cd24:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cd27:	85 c0                	test   eax,eax
c000cd29:	0f 85 5d 03 00 00    	jne    c000d08c <sinc_stereo_vari_process+0x5d6>
c000cd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cd35:	01 c8                	add    eax,ecx
c000cd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cd3a:	99                   	cdq    
c000cd3b:	f7 f9                	idiv   ecx
c000cd3d:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000cd41:	7c c6                	jl     c000cd09 <sinc_stereo_vari_process+0x253>
c000cd43:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cd46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd4a:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cd4d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd58:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cd5b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cd5e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cd61:	99                   	cdq    
c000cd62:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd65:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cd68:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cd6b:	99                   	cdq    
c000cd6c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd6f:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cd72:	31 c0                	xor    eax,eax
c000cd74:	e9 13 03 00 00       	jmp    c000d08c <sinc_stereo_vari_process+0x5d6>
c000cd79:	83 ec 0c             	sub    esp,0xc
c000cd7c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cd7f:	e8 7f 80 01 00       	call   c0024e03 <__floatsidf>
c000cd84:	83 c4 10             	add    esp,0x10
c000cd87:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd8b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd8f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cd93:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cd97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd9f:	e8 7f 73 01 00       	call   c0024123 <__adddf3>
c000cda4:	83 c4 10             	add    esp,0x10
c000cda7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdb7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbf:	e8 5f 73 01 00       	call   c0024123 <__adddf3>
c000cdc4:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cdc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdcb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdcf:	e8 2f 80 01 00       	call   c0024e03 <__floatsidf>
c000cdd4:	83 c4 10             	add    esp,0x10
c000cdd7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cddb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cddf:	52                   	push   edx
c000cde0:	50                   	push   eax
c000cde1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde9:	e8 7f 82 01 00       	call   c002506d <__gedf2>
c000cdee:	83 c4 10             	add    esp,0x10
c000cdf1:	85 c0                	test   eax,eax
c000cdf3:	0f 89 4a ff ff ff    	jns    c000cd43 <sinc_stereo_vari_process+0x28d>
c000cdf9:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cdfd:	0f 8e ef 00 00 00    	jle    c000cef2 <sinc_stereo_vari_process+0x43c>
c000ce03:	83 ec 10             	sub    esp,0x10
c000ce06:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce09:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce0c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ce0f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ce12:	e8 5d 79 01 00       	call   c0024774 <__subdf3>
c000ce17:	83 c4 18             	add    esp,0x18
c000ce1a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ce1e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ce22:	52                   	push   edx
c000ce23:	50                   	push   eax
c000ce24:	e8 d7 83 01 00       	call   c0025200 <fabs>
c000ce29:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce2d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce31:	83 c4 10             	add    esp,0x10
c000ce34:	68 df 7c db 3d       	push   0x3ddb7cdf
c000ce39:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000ce3e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce42:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce46:	e8 06 82 01 00       	call   c0025051 <__gtdf2>
c000ce4b:	83 c4 10             	add    esp,0x10
c000ce4e:	85 c0                	test   eax,eax
c000ce50:	0f 8e 9c 00 00 00    	jle    c000cef2 <sinc_stereo_vari_process+0x43c>
c000ce56:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce59:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ce5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce64:	52                   	push   edx
c000ce65:	50                   	push   eax
c000ce66:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce69:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce6c:	e8 03 79 01 00       	call   c0024774 <__subdf3>
c000ce71:	59                   	pop    ecx
c000ce72:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ce76:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ce7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ce7d:	e8 81 7f 01 00       	call   c0024e03 <__floatsidf>
c000ce82:	83 c4 10             	add    esp,0x10
c000ce85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce8d:	52                   	push   edx
c000ce8e:	50                   	push   eax
c000ce8f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce93:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce97:	e8 04 79 01 00       	call   c00247a0 <__muldf3>
c000ce9c:	5f                   	pop    edi
c000ce9d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000cea1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000cea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cea8:	e8 56 7f 01 00       	call   c0024e03 <__floatsidf>
c000cead:	83 c4 10             	add    esp,0x10
c000ceb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ceb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ceb8:	52                   	push   edx
c000ceb9:	50                   	push   eax
c000ceba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cebe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cec2:	e8 bd 7b 01 00       	call   c0024a84 <__divdf3>
c000cec7:	83 c4 10             	add    esp,0x10
c000ceca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cece:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ced2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ced6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ceda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cede:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cee2:	e8 3c 72 01 00       	call   c0024123 <__adddf3>
c000cee7:	83 c4 10             	add    esp,0x10
c000ceea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ceee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cef2:	83 ec 0c             	sub    esp,0xc
c000cef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cef8:	e8 06 7f 01 00       	call   c0024e03 <__floatsidf>
c000cefd:	83 c4 10             	add    esp,0x10
c000cf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf18:	e8 52 81 01 00       	call   c002506f <__ltdf2>
c000cf1d:	83 c4 10             	add    esp,0x10
c000cf20:	85 c0                	test   eax,eax
c000cf22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf2a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf2e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000cf32:	78 10                	js     c000cf44 <sinc_stereo_vari_process+0x48e>
c000cf34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf38:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cf3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf40:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf54:	e8 47 78 01 00       	call   c00247a0 <__muldf3>
c000cf59:	59                   	pop    ecx
c000cf5a:	5f                   	pop    edi
c000cf5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cf5f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf63:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf6b:	e8 77 e7 ff ff       	call   c000b6e7 <double_to_fp>
c000cf70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf74:	89 c7                	mov    edi,eax
c000cf76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf82:	e8 19 78 01 00       	call   c00247a0 <__muldf3>
c000cf87:	83 c4 18             	add    esp,0x18
c000cf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf92:	52                   	push   edx
c000cf93:	50                   	push   eax
c000cf94:	e8 4e e7 ff ff       	call   c000b6e7 <double_to_fp>
c000cf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cfa0:	83 c4 0c             	add    esp,0xc
c000cfa3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cfa6:	8d 04 90             	lea    eax,[eax+edx*4]
c000cfa9:	50                   	push   eax
c000cfaa:	50                   	push   eax
c000cfab:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cfae:	e8 50 7e 01 00       	call   c0024e03 <__floatsidf>
c000cfb3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cfb7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cfbb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfbf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfc3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfc7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfcb:	e8 b4 7a 01 00       	call   c0024a84 <__divdf3>
c000cfd0:	83 c4 18             	add    esp,0x18
c000cfd3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfd7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfdb:	52                   	push   edx
c000cfdc:	89 fa                	mov    edx,edi
c000cfde:	50                   	push   eax
c000cfdf:	89 d8                	mov    eax,ebx
c000cfe1:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cfe5:	e8 a6 c9 ff ff       	call   c0009990 <calc_output_stereo>
c000cfea:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000cfee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cffa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cffe:	e8 81 7a 01 00       	call   c0024a84 <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d00a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d00e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d012:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d016:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d01a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d01e:	e8 00 71 01 00       	call   c0024123 <__adddf3>
c000d023:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d027:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d02b:	83 c4 18             	add    esp,0x18
c000d02e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d032:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d036:	e8 d3 e6 ff ff       	call   c000b70e <fmod_one>
c000d03b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d03e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d042:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d046:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d049:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d04d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d051:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d055:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d059:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05d:	e8 12 77 01 00       	call   c0024774 <__subdf3>
c000d062:	83 c4 18             	add    esp,0x18
c000d065:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d069:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d06d:	52                   	push   edx
c000d06e:	50                   	push   eax
c000d06f:	e8 ac 81 01 00       	call   c0025220 <lrint>
c000d074:	0f af f8             	imul   edi,eax
c000d077:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d07b:	83 c4 10             	add    esp,0x10
c000d07e:	01 f8                	add    eax,edi
c000d080:	99                   	cdq    
c000d081:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d084:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d087:	e9 61 fc ff ff       	jmp    c000cced <sinc_stereo_vari_process+0x237>
c000d08c:	83 c4 4c             	add    esp,0x4c
c000d08f:	5b                   	pop    ebx
c000d090:	5e                   	pop    esi
c000d091:	5f                   	pop    edi
c000d092:	5d                   	pop    ebp
c000d093:	c3                   	ret    

c000d094 <sinc_mono_vari_process>:
c000d094:	55                   	push   ebp
c000d095:	b8 05 00 00 00       	mov    eax,0x5
c000d09a:	57                   	push   edi
c000d09b:	56                   	push   esi
c000d09c:	53                   	push   ebx
c000d09d:	83 ec 4c             	sub    esp,0x4c
c000d0a0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d0a4:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d0a8:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d0ab:	85 db                	test   ebx,ebx
c000d0ad:	0f 84 e8 05 00 00    	je     c000d69b <sinc_mono_vari_process+0x607>
c000d0b3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000d0b6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000d0b9:	0f af d0             	imul   edx,eax
c000d0bc:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000d0bf:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000d0c3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d0ca:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d0cd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d0d4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0d7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0e2:	57                   	push   edi
c000d0e3:	57                   	push   edi
c000d0e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0ec:	e8 9e c5 ff ff       	call   c000968f <is_bad_src_ratio>
c000d0f1:	83 c4 10             	add    esp,0x10
c000d0f4:	89 c2                	mov    edx,eax
c000d0f6:	b8 16 00 00 00       	mov    eax,0x16
c000d0fb:	85 d2                	test   edx,edx
c000d0fd:	0f 85 98 05 00 00    	jne    c000d69b <sinc_mono_vari_process+0x607>
c000d103:	83 ec 0c             	sub    esp,0xc
c000d106:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d109:	e8 f5 7c 01 00       	call   c0024e03 <__floatsidf>
c000d10e:	83 c4 10             	add    esp,0x10
c000d111:	89 04 24             	mov    DWORD PTR [esp],eax
c000d114:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d118:	68 00 00 00 40       	push   0x40000000
c000d11d:	6a 00                	push   0x0
c000d11f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d123:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d127:	e8 f7 6f 01 00       	call   c0024123 <__adddf3>
c000d12c:	59                   	pop    ecx
c000d12d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d131:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d135:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d138:	e8 c6 7c 01 00       	call   c0024e03 <__floatsidf>
c000d13d:	83 c4 10             	add    esp,0x10
c000d140:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d144:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d148:	52                   	push   edx
c000d149:	50                   	push   eax
c000d14a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d14e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d152:	e8 2d 79 01 00       	call   c0024a84 <__divdf3>
c000d157:	83 c4 10             	add    esp,0x10
c000d15a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d15e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d162:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d165:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d168:	89 04 24             	mov    DWORD PTR [esp],eax
c000d16b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d16f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d172:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d175:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d179:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d17d:	52                   	push   edx
c000d17e:	50                   	push   eax
c000d17f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d183:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d187:	e8 e3 7e 01 00       	call   c002506f <__ltdf2>
c000d18c:	83 c4 10             	add    esp,0x10
c000d18f:	85 c0                	test   eax,eax
c000d191:	79 1d                	jns    c000d1b0 <sinc_mono_vari_process+0x11c>
c000d193:	68 00 00 f0 3f       	push   0x3ff00000
c000d198:	6a 00                	push   0x0
c000d19a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d19e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1a2:	e8 c8 7e 01 00       	call   c002506f <__ltdf2>
c000d1a7:	83 c4 10             	add    esp,0x10
c000d1aa:	85 c0                	test   eax,eax
c000d1ac:	78 2c                	js     c000d1da <sinc_mono_vari_process+0x146>
c000d1ae:	eb 4a                	jmp    c000d1fa <sinc_mono_vari_process+0x166>
c000d1b0:	68 00 00 f0 3f       	push   0x3ff00000
c000d1b5:	6a 00                	push   0x0
c000d1b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1bf:	e8 ab 7e 01 00       	call   c002506f <__ltdf2>
c000d1c4:	83 c4 10             	add    esp,0x10
c000d1c7:	85 c0                	test   eax,eax
c000d1c9:	79 2f                	jns    c000d1fa <sinc_mono_vari_process+0x166>
c000d1cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1d3:	89 04 24             	mov    DWORD PTR [esp],eax
c000d1d6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d1da:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d1de:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d1e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1ea:	e8 95 78 01 00       	call   c0024a84 <__divdf3>
c000d1ef:	83 c4 10             	add    esp,0x10
c000d1f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d1f6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d1fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d1fd:	50                   	push   eax
c000d1fe:	50                   	push   eax
c000d1ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d203:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d207:	e8 14 80 01 00       	call   c0025220 <lrint>
c000d20c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d20f:	40                   	inc    eax
c000d210:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d214:	0f af c7             	imul   eax,edi
c000d217:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d21b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d21e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d222:	58                   	pop    eax
c000d223:	5a                   	pop    edx
c000d224:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d228:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d22c:	e8 dd e4 ff ff       	call   c000b70e <fmod_one>
c000d231:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d234:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d238:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d23c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d23f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d243:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d247:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d24b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d24f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d253:	e8 1c 75 01 00       	call   c0024774 <__subdf3>
c000d258:	83 c4 18             	add    esp,0x18
c000d25b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d25f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d263:	52                   	push   edx
c000d264:	50                   	push   eax
c000d265:	e8 b6 7f 01 00       	call   c0025220 <lrint>
c000d26a:	0f af f8             	imul   edi,eax
c000d26d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d271:	01 f8                	add    eax,edi
c000d273:	99                   	cdq    
c000d274:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d277:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d27a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d27e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d282:	68 00 00 f0 3f       	push   0x3ff00000
c000d287:	6a 00                	push   0x0
c000d289:	e8 f6 77 01 00       	call   c0024a84 <__divdf3>
c000d28e:	83 c4 10             	add    esp,0x10
c000d291:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d295:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d299:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d29e:	68 23 42 92 0c       	push   0xc924223
c000d2a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2ab:	e8 73 6e 01 00       	call   c0024123 <__adddf3>
c000d2b0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d2b4:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d2b8:	83 c4 20             	add    esp,0x20
c000d2bb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000d2c3:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000d2cb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d2ce:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d2d1:	7d 4e                	jge    c000d321 <sinc_mono_vari_process+0x28d>
c000d2d3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d2d6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d2d9:	01 c8                	add    eax,ecx
c000d2db:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d2de:	99                   	cdq    
c000d2df:	f7 f9                	idiv   ecx
c000d2e1:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000d2e5:	7d 0c                	jge    c000d2f3 <sinc_mono_vari_process+0x25f>
c000d2e7:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d2ea:	85 ff                	test   edi,edi
c000d2ec:	79 69                	jns    c000d357 <sinc_mono_vari_process+0x2c3>
c000d2ee:	e9 e4 00 00 00       	jmp    c000d3d7 <sinc_mono_vari_process+0x343>
c000d2f3:	57                   	push   edi
c000d2f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2f8:	56                   	push   esi
c000d2f9:	53                   	push   ebx
c000d2fa:	e8 a5 e4 ff ff       	call   c000b7a4 <prepare_data>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d305:	85 c0                	test   eax,eax
c000d307:	0f 85 8e 03 00 00    	jne    c000d69b <sinc_mono_vari_process+0x607>
c000d30d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d310:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d313:	01 c8                	add    eax,ecx
c000d315:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d318:	99                   	cdq    
c000d319:	f7 f9                	idiv   ecx
c000d31b:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000d31f:	7c c6                	jl     c000d2e7 <sinc_mono_vari_process+0x253>
c000d321:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d324:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d328:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d32b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d32e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d332:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d336:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d339:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d33c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d33f:	99                   	cdq    
c000d340:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d343:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d346:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d349:	99                   	cdq    
c000d34a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d34d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d350:	31 c0                	xor    eax,eax
c000d352:	e9 44 03 00 00       	jmp    c000d69b <sinc_mono_vari_process+0x607>
c000d357:	83 ec 0c             	sub    esp,0xc
c000d35a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d35d:	e8 a1 7a 01 00       	call   c0024e03 <__floatsidf>
c000d362:	83 c4 10             	add    esp,0x10
c000d365:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d369:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d36d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d371:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d375:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d379:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d37d:	e8 a1 6d 01 00       	call   c0024123 <__adddf3>
c000d382:	83 c4 10             	add    esp,0x10
c000d385:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d389:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d38d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d391:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d395:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d399:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39d:	e8 81 6d 01 00       	call   c0024123 <__adddf3>
c000d3a2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d3a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3ad:	e8 51 7a 01 00       	call   c0024e03 <__floatsidf>
c000d3b2:	83 c4 10             	add    esp,0x10
c000d3b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3bd:	52                   	push   edx
c000d3be:	50                   	push   eax
c000d3bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3c3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3c7:	e8 85 7c 01 00       	call   c0025051 <__gtdf2>
c000d3cc:	83 c4 10             	add    esp,0x10
c000d3cf:	85 c0                	test   eax,eax
c000d3d1:	0f 8f 4a ff ff ff    	jg     c000d321 <sinc_mono_vari_process+0x28d>
c000d3d7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d3db:	0f 8e ef 00 00 00    	jle    c000d4d0 <sinc_mono_vari_process+0x43c>
c000d3e1:	83 ec 10             	sub    esp,0x10
c000d3e4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d3e7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d3ea:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d3ed:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d3f0:	e8 7f 73 01 00       	call   c0024774 <__subdf3>
c000d3f5:	83 c4 18             	add    esp,0x18
c000d3f8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3fc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d400:	52                   	push   edx
c000d401:	50                   	push   eax
c000d402:	e8 f9 7d 01 00       	call   c0025200 <fabs>
c000d407:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d40b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d40f:	83 c4 10             	add    esp,0x10
c000d412:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d417:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d41c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d420:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d424:	e8 28 7c 01 00       	call   c0025051 <__gtdf2>
c000d429:	83 c4 10             	add    esp,0x10
c000d42c:	85 c0                	test   eax,eax
c000d42e:	0f 8e 9c 00 00 00    	jle    c000d4d0 <sinc_mono_vari_process+0x43c>
c000d434:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d437:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d43a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d43e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d442:	52                   	push   edx
c000d443:	50                   	push   eax
c000d444:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d447:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d44a:	e8 25 73 01 00       	call   c0024774 <__subdf3>
c000d44f:	5f                   	pop    edi
c000d450:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d454:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d458:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d45b:	e8 a3 79 01 00       	call   c0024e03 <__floatsidf>
c000d460:	83 c4 10             	add    esp,0x10
c000d463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d46b:	52                   	push   edx
c000d46c:	50                   	push   eax
c000d46d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d471:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d475:	e8 26 73 01 00       	call   c00247a0 <__muldf3>
c000d47a:	59                   	pop    ecx
c000d47b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d47f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d483:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d486:	e8 78 79 01 00       	call   c0024e03 <__floatsidf>
c000d48b:	83 c4 10             	add    esp,0x10
c000d48e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d492:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d496:	52                   	push   edx
c000d497:	50                   	push   eax
c000d498:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d49c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4a0:	e8 df 75 01 00       	call   c0024a84 <__divdf3>
c000d4a5:	83 c4 10             	add    esp,0x10
c000d4a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4ac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c0:	e8 5e 6c 01 00       	call   c0024123 <__adddf3>
c000d4c5:	83 c4 10             	add    esp,0x10
c000d4c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4cc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4d0:	83 ec 0c             	sub    esp,0xc
c000d4d3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d4d6:	e8 28 79 01 00       	call   c0024e03 <__floatsidf>
c000d4db:	83 c4 10             	add    esp,0x10
c000d4de:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4f6:	e8 74 7b 01 00       	call   c002506f <__ltdf2>
c000d4fb:	83 c4 10             	add    esp,0x10
c000d4fe:	85 c0                	test   eax,eax
c000d500:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d504:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d508:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d50c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000d510:	78 10                	js     c000d522 <sinc_mono_vari_process+0x48e>
c000d512:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d516:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d51a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d51e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d52a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d52e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d532:	e8 69 72 01 00       	call   c00247a0 <__muldf3>
c000d537:	59                   	pop    ecx
c000d538:	5f                   	pop    edi
c000d539:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d53d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d541:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d545:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d549:	e8 99 e1 ff ff       	call   c000b6e7 <double_to_fp>
c000d54e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d552:	89 c7                	mov    edi,eax
c000d554:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d55c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d560:	e8 3b 72 01 00       	call   c00247a0 <__muldf3>
c000d565:	83 c4 18             	add    esp,0x18
c000d568:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d56c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d570:	52                   	push   edx
c000d571:	50                   	push   eax
c000d572:	e8 70 e1 ff ff       	call   c000b6e7 <double_to_fp>
c000d577:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d57b:	83 ec 0c             	sub    esp,0xc
c000d57e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d581:	e8 7d 78 01 00       	call   c0024e03 <__floatsidf>
c000d586:	83 c4 10             	add    esp,0x10
c000d589:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d58d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d591:	52                   	push   edx
c000d592:	50                   	push   eax
c000d593:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d597:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d59b:	e8 e4 74 01 00       	call   c0024a84 <__divdf3>
c000d5a0:	83 c4 10             	add    esp,0x10
c000d5a3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d5a7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d5ab:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d5af:	89 d8                	mov    eax,ebx
c000d5b1:	89 fa                	mov    edx,edi
c000d5b3:	e8 7c c1 ff ff       	call   c0009734 <calc_output_single>
c000d5b8:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000d5bb:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d5be:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5c6:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d5ca:	52                   	push   edx
c000d5cb:	50                   	push   eax
c000d5cc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d5d0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d5d4:	e8 c7 71 01 00       	call   c00247a0 <__muldf3>
c000d5d9:	59                   	pop    ecx
c000d5da:	59                   	pop    ecx
c000d5db:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d5df:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d5e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5eb:	e8 83 7a 01 00       	call   c0025073 <__truncdfsf2>
c000d5f0:	83 c4 10             	add    esp,0x10
c000d5f3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d5f7:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000d5fa:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d5fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d609:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d60d:	e8 72 74 01 00       	call   c0024a84 <__divdf3>
c000d612:	83 c4 10             	add    esp,0x10
c000d615:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d619:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d625:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d629:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d62d:	e8 f1 6a 01 00       	call   c0024123 <__adddf3>
c000d632:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d636:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d63a:	83 c4 18             	add    esp,0x18
c000d63d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d641:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d645:	e8 c4 e0 ff ff       	call   c000b70e <fmod_one>
c000d64a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d64d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d651:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d655:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d658:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d65c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d660:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d664:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d668:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d66c:	e8 03 71 01 00       	call   c0024774 <__subdf3>
c000d671:	83 c4 18             	add    esp,0x18
c000d674:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d678:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d67c:	52                   	push   edx
c000d67d:	50                   	push   eax
c000d67e:	e8 9d 7b 01 00       	call   c0025220 <lrint>
c000d683:	0f af f8             	imul   edi,eax
c000d686:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d68a:	83 c4 10             	add    esp,0x10
c000d68d:	01 f8                	add    eax,edi
c000d68f:	99                   	cdq    
c000d690:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d693:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d696:	e9 30 fc ff ff       	jmp    c000d2cb <sinc_mono_vari_process+0x237>
c000d69b:	83 c4 4c             	add    esp,0x4c
c000d69e:	5b                   	pop    ebx
c000d69f:	5e                   	pop    esi
c000d6a0:	5f                   	pop    edi
c000d6a1:	5d                   	pop    ebp
c000d6a2:	c3                   	ret    

c000d6a3 <sinc_get_name>:
c000d6a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d6a7:	31 c0                	xor    eax,eax
c000d6a9:	83 fa 02             	cmp    edx,0x2
c000d6ac:	77 07                	ja     c000d6b5 <sinc_get_name+0x12>
c000d6ae:	8b 04 95 04 6a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd95fc]
c000d6b5:	c3                   	ret    

c000d6b6 <sinc_get_description>:
c000d6b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d6ba:	31 c0                	xor    eax,eax
c000d6bc:	83 fa 02             	cmp    edx,0x2
c000d6bf:	77 07                	ja     c000d6c8 <sinc_get_description+0x12>
c000d6c1:	8b 04 95 f8 69 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9608]
c000d6c8:	c3                   	ret    

c000d6c9 <sinc_set_converter>:
c000d6c9:	53                   	push   ebx
c000d6ca:	81 ec 58 08 00 00    	sub    esp,0x858
c000d6d0:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000d6d7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000d6da:	85 c0                	test   eax,eax
c000d6dc:	74 13                	je     c000d6f1 <sinc_set_converter+0x28>
c000d6de:	83 ec 0c             	sub    esp,0xc
c000d6e1:	50                   	push   eax
c000d6e2:	e8 97 1a 00 00       	call   c000f17e <free>
c000d6e7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d6ee:	83 c4 10             	add    esp,0x10
c000d6f1:	50                   	push   eax
c000d6f2:	68 44 08 00 00       	push   0x844
c000d6f7:	6a 00                	push   0x0
c000d6f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000d6fd:	50                   	push   eax
c000d6fe:	e8 c2 2f ff ff       	call   c00006c5 <memset>
c000d703:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d706:	83 c4 10             	add    esp,0x10
c000d709:	b8 0b 00 00 00       	mov    eax,0xb
c000d70e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000d714:	7f 6e                	jg     c000d784 <sinc_set_converter+0xbb>
c000d716:	83 fa 01             	cmp    edx,0x1
c000d719:	75 10                	jne    c000d72b <sinc_set_converter+0x62>
c000d71b:	c7 43 24 94 d0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d094
c000d722:	c7 43 20 94 d0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d094
c000d729:	eb 4d                	jmp    c000d778 <sinc_set_converter+0xaf>
c000d72b:	83 fa 02             	cmp    edx,0x2
c000d72e:	75 10                	jne    c000d740 <sinc_set_converter+0x77>
c000d730:	c7 43 24 b6 ca 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cab6
c000d737:	c7 43 20 b6 ca 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cab6
c000d73e:	eb 38                	jmp    c000d778 <sinc_set_converter+0xaf>
c000d740:	83 fa 04             	cmp    edx,0x4
c000d743:	75 10                	jne    c000d755 <sinc_set_converter+0x8c>
c000d745:	c7 43 24 d8 c4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c4d8
c000d74c:	c7 43 20 d8 c4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c4d8
c000d753:	eb 23                	jmp    c000d778 <sinc_set_converter+0xaf>
c000d755:	83 fa 06             	cmp    edx,0x6
c000d758:	75 10                	jne    c000d76a <sinc_set_converter+0xa1>
c000d75a:	c7 43 24 fa be 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000befa
c000d761:	c7 43 20 fa be 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000befa
c000d768:	eb 0e                	jmp    c000d778 <sinc_set_converter+0xaf>
c000d76a:	c7 43 24 1e b9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b91e
c000d771:	c7 43 20 1e b9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b91e
c000d778:	c7 43 28 3b ab 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ab3b
c000d77f:	b8 0a 00 00 00       	mov    eax,0xa
c000d784:	81 c4 58 08 00 00    	add    esp,0x858
c000d78a:	5b                   	pop    ebx
c000d78b:	c3                   	ret    

c000d78c <is_bad_src_ratio>:
c000d78c:	83 ec 1c             	sub    esp,0x1c
c000d78f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d793:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d797:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d79b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d79f:	b8 00 00 00 00       	mov    eax,0x0
c000d7a4:	ba 00 00 70 3f       	mov    edx,0x3f700000
c000d7a9:	52                   	push   edx
c000d7aa:	50                   	push   eax
c000d7ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7b3:	e8 b7 78 01 00       	call   c002506f <__ltdf2>
c000d7b8:	83 c4 10             	add    esp,0x10
c000d7bb:	85 c0                	test   eax,eax
c000d7bd:	78 20                	js     c000d7df <is_bad_src_ratio+0x53>
c000d7bf:	b8 00 00 00 00       	mov    eax,0x0
c000d7c4:	ba 00 00 70 40       	mov    edx,0x40700000
c000d7c9:	52                   	push   edx
c000d7ca:	50                   	push   eax
c000d7cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7d3:	e8 79 78 01 00       	call   c0025051 <__gtdf2>
c000d7d8:	83 c4 10             	add    esp,0x10
c000d7db:	85 c0                	test   eax,eax
c000d7dd:	7e 07                	jle    c000d7e6 <is_bad_src_ratio+0x5a>
c000d7df:	b8 01 00 00 00       	mov    eax,0x1
c000d7e4:	eb 05                	jmp    c000d7eb <is_bad_src_ratio+0x5f>
c000d7e6:	b8 00 00 00 00       	mov    eax,0x0
c000d7eb:	83 c4 1c             	add    esp,0x1c
c000d7ee:	c3                   	ret    

c000d7ef <fmod_one>:
c000d7ef:	83 ec 2c             	sub    esp,0x2c
c000d7f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d7f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7fa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d7fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d802:	83 ec 08             	sub    esp,0x8
c000d805:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d809:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d80d:	e8 0e 7a 01 00       	call   c0025220 <lrint>
c000d812:	83 c4 10             	add    esp,0x10
c000d815:	83 ec 0c             	sub    esp,0xc
c000d818:	50                   	push   eax
c000d819:	e8 e5 75 01 00       	call   c0024e03 <__floatsidf>
c000d81e:	83 c4 10             	add    esp,0x10
c000d821:	52                   	push   edx
c000d822:	50                   	push   eax
c000d823:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d827:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d82b:	e8 44 6f 01 00       	call   c0024774 <__subdf3>
c000d830:	83 c4 10             	add    esp,0x10
c000d833:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d837:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d83b:	b8 00 00 00 00       	mov    eax,0x0
c000d840:	ba 00 00 00 00       	mov    edx,0x0
c000d845:	52                   	push   edx
c000d846:	50                   	push   eax
c000d847:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d84b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d84f:	e8 1b 78 01 00       	call   c002506f <__ltdf2>
c000d854:	83 c4 10             	add    esp,0x10
c000d857:	85 c0                	test   eax,eax
c000d859:	79 1e                	jns    c000d879 <fmod_one+0x8a>
c000d85b:	b8 00 00 00 00       	mov    eax,0x0
c000d860:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c000d865:	52                   	push   edx
c000d866:	50                   	push   eax
c000d867:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d86b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d86f:	e8 af 68 01 00       	call   c0024123 <__adddf3>
c000d874:	83 c4 10             	add    esp,0x10
c000d877:	eb 08                	jmp    c000d881 <fmod_one+0x92>
c000d879:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d87d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d881:	83 c4 2c             	add    esp,0x2c
c000d884:	c3                   	ret    

c000d885 <zoh_vari_process>:
c000d885:	55                   	push   ebp
c000d886:	57                   	push   edi
c000d887:	56                   	push   esi
c000d888:	53                   	push   ebx
c000d889:	83 ec 3c             	sub    esp,0x3c
c000d88c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000d890:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000d894:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000d89c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000d8a0:	0f 8e a9 05 00 00    	jle    c000de4f <zoh_vari_process+0x5ca>
c000d8a6:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d8a9:	c7 44 24 28 05 00 00 00 	mov    DWORD PTR [esp+0x28],0x5
c000d8b1:	85 db                	test   ebx,ebx
c000d8b3:	0f 84 96 05 00 00    	je     c000de4f <zoh_vari_process+0x5ca>
c000d8b9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000d8bc:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000d8c0:	74 19                	je     c000d8db <zoh_vari_process+0x56>
c000d8c2:	31 d2                	xor    edx,edx
c000d8c4:	39 c2                	cmp    edx,eax
c000d8c6:	7d 0c                	jge    c000d8d4 <zoh_vari_process+0x4f>
c000d8c8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d8ca:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000d8cd:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000d8d1:	42                   	inc    edx
c000d8d2:	eb f0                	jmp    c000d8c4 <zoh_vari_process+0x3f>
c000d8d4:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000d8db:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000d8de:	0f af d0             	imul   edx,eax
c000d8e1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000d8e4:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000d8e8:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000d8ef:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000d8f2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000d8f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d8fc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d8ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d903:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d907:	57                   	push   edi
c000d908:	57                   	push   edi
c000d909:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d90d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d911:	e8 76 fe ff ff       	call   c000d78c <is_bad_src_ratio>
c000d916:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91a:	83 c4 10             	add    esp,0x10
c000d91d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000d922:	0f 85 1f 05 00 00    	jne    c000de47 <zoh_vari_process+0x5c2>
c000d928:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d92b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d92e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d932:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d936:	68 00 00 f0 3f       	push   0x3ff00000
c000d93b:	6a 00                	push   0x0
c000d93d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d941:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d945:	e8 25 77 01 00       	call   c002506f <__ltdf2>
c000d94a:	83 c4 10             	add    esp,0x10
c000d94d:	85 c0                	test   eax,eax
c000d94f:	0f 89 dc 01 00 00    	jns    c000db31 <zoh_vari_process+0x2ac>
c000d955:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c000d958:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000d95b:	0f 8d d0 01 00 00    	jge    c000db31 <zoh_vari_process+0x2ac>
c000d961:	83 ec 0c             	sub    esp,0xc
c000d964:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000d967:	e8 97 74 01 00       	call   c0024e03 <__floatsidf>
c000d96c:	83 c4 10             	add    esp,0x10
c000d96f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d972:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d97a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d97e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d982:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d986:	e8 15 6e 01 00       	call   c00247a0 <__muldf3>
c000d98b:	59                   	pop    ecx
c000d98c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d990:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d994:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d997:	e8 67 74 01 00       	call   c0024e03 <__floatsidf>
c000d99c:	83 c4 10             	add    esp,0x10
c000d99f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9a7:	52                   	push   edx
c000d9a8:	50                   	push   eax
c000d9a9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9ad:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9b1:	e8 6d 67 01 00       	call   c0024123 <__adddf3>
c000d9b6:	59                   	pop    ecx
c000d9b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9bb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d9bf:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000d9c2:	e8 3c 74 01 00       	call   c0024e03 <__floatsidf>
c000d9c7:	83 c4 10             	add    esp,0x10
c000d9ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9d2:	52                   	push   edx
c000d9d3:	50                   	push   eax
c000d9d4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9dc:	e8 8c 76 01 00       	call   c002506d <__gedf2>
c000d9e1:	83 c4 10             	add    esp,0x10
c000d9e4:	85 c0                	test   eax,eax
c000d9e6:	0f 89 45 01 00 00    	jns    c000db31 <zoh_vari_process+0x2ac>
c000d9ec:	85 ff                	test   edi,edi
c000d9ee:	0f 8e ee 00 00 00    	jle    c000dae2 <zoh_vari_process+0x25d>
c000d9f4:	83 ec 10             	sub    esp,0x10
c000d9f7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9fa:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000da00:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000da03:	e8 6c 6d 01 00       	call   c0024774 <__subdf3>
c000da08:	83 c4 18             	add    esp,0x18
c000da0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000da13:	52                   	push   edx
c000da14:	50                   	push   eax
c000da15:	e8 e6 77 01 00       	call   c0025200 <fabs>
c000da1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da1e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da22:	83 c4 10             	add    esp,0x10
c000da25:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000da2a:	68 23 42 92 0c       	push   0xc924223
c000da2f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000da33:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000da37:	e8 15 76 01 00       	call   c0025051 <__gtdf2>
c000da3c:	83 c4 10             	add    esp,0x10
c000da3f:	85 c0                	test   eax,eax
c000da41:	0f 8e 9b 00 00 00    	jle    c000dae2 <zoh_vari_process+0x25d>
c000da47:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da4a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000da4d:	89 04 24             	mov    DWORD PTR [esp],eax
c000da50:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000da54:	52                   	push   edx
c000da55:	50                   	push   eax
c000da56:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000da59:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000da5c:	e8 13 6d 01 00       	call   c0024774 <__subdf3>
c000da61:	59                   	pop    ecx
c000da62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da66:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da6a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000da6d:	e8 91 73 01 00       	call   c0024e03 <__floatsidf>
c000da72:	83 c4 10             	add    esp,0x10
c000da75:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000da79:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000da7d:	52                   	push   edx
c000da7e:	50                   	push   eax
c000da7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da87:	e8 14 6d 01 00       	call   c00247a0 <__muldf3>
c000da8c:	5f                   	pop    edi
c000da8d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da91:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da95:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000da98:	e8 66 73 01 00       	call   c0024e03 <__floatsidf>
c000da9d:	83 c4 10             	add    esp,0x10
c000daa0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000daa4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000daa8:	52                   	push   edx
c000daa9:	50                   	push   eax
c000daaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000daae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dab2:	e8 cd 6f 01 00       	call   c0024a84 <__divdf3>
c000dab7:	83 c4 10             	add    esp,0x10
c000daba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dabe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dac2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dac6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000daca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dace:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dad2:	e8 4c 66 01 00       	call   c0024123 <__adddf3>
c000dad7:	83 c4 10             	add    esp,0x10
c000dada:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dade:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dae2:	31 c0                	xor    eax,eax
c000dae4:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dae7:	7e 13                	jle    c000dafc <zoh_vari_process+0x277>
c000dae9:	8b 7c 83 1c          	mov    edi,DWORD PTR [ebx+eax*4+0x1c]
c000daed:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000daf0:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000daf3:	40                   	inc    eax
c000daf4:	89 3c 8a             	mov    DWORD PTR [edx+ecx*4],edi
c000daf7:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dafa:	eb e8                	jmp    c000dae4 <zoh_vari_process+0x25f>
c000dafc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000db00:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000db04:	68 00 00 f0 3f       	push   0x3ff00000
c000db09:	6a 00                	push   0x0
c000db0b:	e8 74 6f 01 00       	call   c0024a84 <__divdf3>
c000db10:	83 c4 10             	add    esp,0x10
c000db13:	89 04 24             	mov    DWORD PTR [esp],eax
c000db16:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000db1a:	52                   	push   edx
c000db1b:	50                   	push   eax
c000db1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db24:	e8 fa 65 01 00       	call   c0024123 <__adddf3>
c000db29:	83 c4 10             	add    esp,0x10
c000db2c:	e9 fd fd ff ff       	jmp    c000d92e <zoh_vari_process+0xa9>
c000db31:	57                   	push   edi
c000db32:	57                   	push   edi
c000db33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db3b:	e8 af fc ff ff       	call   c000d7ef <fmod_one>
c000db40:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000db43:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db47:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000db4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db5b:	e8 14 6c 01 00       	call   c0024774 <__subdf3>
c000db60:	83 c4 18             	add    esp,0x18
c000db63:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db67:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db6b:	52                   	push   edx
c000db6c:	50                   	push   eax
c000db6d:	e8 ae 76 01 00       	call   c0025220 <lrint>
c000db72:	83 c4 10             	add    esp,0x10
c000db75:	0f af f8             	imul   edi,eax
c000db78:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000db7b:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c000db7e:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000db82:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000db85:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000db88:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db8c:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000db8f:	0f 8d 1d 02 00 00    	jge    c000ddb2 <zoh_vari_process+0x52d>
c000db95:	83 ec 0c             	sub    esp,0xc
c000db98:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000db9b:	e8 63 72 01 00       	call   c0024e03 <__floatsidf>
c000dba0:	83 c4 10             	add    esp,0x10
c000dba3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dba7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbab:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dbaf:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dbb3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbb7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbbb:	e8 e0 6b 01 00       	call   c00247a0 <__muldf3>
c000dbc0:	59                   	pop    ecx
c000dbc1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dbc5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dbc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcd:	e8 31 72 01 00       	call   c0024e03 <__floatsidf>
c000dbd2:	83 c4 10             	add    esp,0x10
c000dbd5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dbd9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dbdd:	52                   	push   edx
c000dbde:	50                   	push   eax
c000dbdf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbe3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbe7:	e8 37 65 01 00       	call   c0024123 <__adddf3>
c000dbec:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dbef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbf3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbf7:	e8 07 72 01 00       	call   c0024e03 <__floatsidf>
c000dbfc:	83 c4 10             	add    esp,0x10
c000dbff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dc03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dc07:	52                   	push   edx
c000dc08:	50                   	push   eax
c000dc09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dc0d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dc11:	e8 5b 74 01 00       	call   c0025071 <__ledf2>
c000dc16:	83 c4 10             	add    esp,0x10
c000dc19:	85 c0                	test   eax,eax
c000dc1b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dc1f:	0f 8f 8d 01 00 00    	jg     c000ddb2 <zoh_vari_process+0x52d>
c000dc25:	85 c9                	test   ecx,ecx
c000dc27:	0f 8e ef 00 00 00    	jle    c000dd1c <zoh_vari_process+0x497>
c000dc2d:	83 ec 10             	sub    esp,0x10
c000dc30:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc33:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc36:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000dc39:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000dc3c:	e8 33 6b 01 00       	call   c0024774 <__subdf3>
c000dc41:	83 c4 18             	add    esp,0x18
c000dc44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc48:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc4c:	52                   	push   edx
c000dc4d:	50                   	push   eax
c000dc4e:	e8 ad 75 01 00       	call   c0025200 <fabs>
c000dc53:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dc57:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dc5b:	83 c4 10             	add    esp,0x10
c000dc5e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dc63:	68 23 42 92 0c       	push   0xc924223
c000dc68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc70:	e8 dc 73 01 00       	call   c0025051 <__gtdf2>
c000dc75:	83 c4 10             	add    esp,0x10
c000dc78:	85 c0                	test   eax,eax
c000dc7a:	0f 8e 9c 00 00 00    	jle    c000dd1c <zoh_vari_process+0x497>
c000dc80:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dc83:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000dc86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc8e:	52                   	push   edx
c000dc8f:	50                   	push   eax
c000dc90:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc93:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc96:	e8 d9 6a 01 00       	call   c0024774 <__subdf3>
c000dc9b:	5f                   	pop    edi
c000dc9c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dca0:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dca4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dca7:	e8 57 71 01 00       	call   c0024e03 <__floatsidf>
c000dcac:	83 c4 10             	add    esp,0x10
c000dcaf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dcb3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dcb7:	52                   	push   edx
c000dcb8:	50                   	push   eax
c000dcb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcc1:	e8 da 6a 01 00       	call   c00247a0 <__muldf3>
c000dcc6:	59                   	pop    ecx
c000dcc7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dccb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dccf:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dcd2:	e8 2c 71 01 00       	call   c0024e03 <__floatsidf>
c000dcd7:	83 c4 10             	add    esp,0x10
c000dcda:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dcde:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dce2:	52                   	push   edx
c000dce3:	50                   	push   eax
c000dce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcec:	e8 93 6d 01 00       	call   c0024a84 <__divdf3>
c000dcf1:	83 c4 10             	add    esp,0x10
c000dcf4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcf8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcfc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd00:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd0c:	e8 12 64 01 00       	call   c0024123 <__adddf3>
c000dd11:	83 c4 10             	add    esp,0x10
c000dd14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd1c:	31 c0                	xor    eax,eax
c000dd1e:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000dd21:	39 c2                	cmp    edx,eax
c000dd23:	7e 1d                	jle    c000dd42 <zoh_vari_process+0x4bd>
c000dd25:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000dd28:	29 d1                	sub    ecx,edx
c000dd2a:	89 ca                	mov    edx,ecx
c000dd2c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd2e:	01 c2                	add    edx,eax
c000dd30:	40                   	inc    eax
c000dd31:	8b 3c 91             	mov    edi,DWORD PTR [ecx+edx*4]
c000dd34:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd37:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd3a:	89 3c 8a             	mov    DWORD PTR [edx+ecx*4],edi
c000dd3d:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd40:	eb dc                	jmp    c000dd1e <zoh_vari_process+0x499>
c000dd42:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd46:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd4a:	68 00 00 f0 3f       	push   0x3ff00000
c000dd4f:	6a 00                	push   0x0
c000dd51:	e8 2e 6d 01 00       	call   c0024a84 <__divdf3>
c000dd56:	83 c4 10             	add    esp,0x10
c000dd59:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd5d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd61:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd65:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd71:	e8 ad 63 01 00       	call   c0024123 <__adddf3>
c000dd76:	5f                   	pop    edi
c000dd77:	59                   	pop    ecx
c000dd78:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd7c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd88:	e8 62 fa ff ff       	call   c000d7ef <fmod_one>
c000dd8d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dd90:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd94:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dda4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dda8:	e8 c7 69 01 00       	call   c0024774 <__subdf3>
c000ddad:	e9 ae fd ff ff       	jmp    c000db60 <zoh_vari_process+0x2db>
c000ddb2:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c000ddb6:	7d 3a                	jge    c000ddf2 <zoh_vari_process+0x56d>
c000ddb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ddbc:	83 ec 0c             	sub    esp,0xc
c000ddbf:	29 f8                	sub    eax,edi
c000ddc1:	99                   	cdq    
c000ddc2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ddc5:	50                   	push   eax
c000ddc6:	e8 38 70 01 00       	call   c0024e03 <__floatsidf>
c000ddcb:	83 c4 10             	add    esp,0x10
c000ddce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddd6:	52                   	push   edx
c000ddd7:	50                   	push   eax
c000ddd8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dddc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dde0:	e8 3e 63 01 00       	call   c0024123 <__adddf3>
c000dde5:	83 c4 10             	add    esp,0x10
c000dde8:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000ddeb:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddf2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ddf5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ddf9:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000ddfc:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000ddff:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de02:	85 c0                	test   eax,eax
c000de04:	7f 24                	jg     c000de2a <zoh_vari_process+0x5a5>
c000de06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de0a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000de0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000de11:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000de14:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de17:	99                   	cdq    
c000de18:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000de1b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000de1e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000de21:	99                   	cdq    
c000de22:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000de25:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000de28:	eb 25                	jmp    c000de4f <zoh_vari_process+0x5ca>
c000de2a:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000de2d:	31 d2                	xor    edx,edx
c000de2f:	29 c8                	sub    eax,ecx
c000de31:	c1 e0 02             	shl    eax,0x2
c000de34:	39 d1                	cmp    ecx,edx
c000de36:	7e ce                	jle    c000de06 <zoh_vari_process+0x581>
c000de38:	8b 3e                	mov    edi,DWORD PTR [esi]
c000de3a:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000de3d:	83 c0 04             	add    eax,0x4
c000de40:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c000de44:	42                   	inc    edx
c000de45:	eb ed                	jmp    c000de34 <zoh_vari_process+0x5af>
c000de47:	c7 44 24 28 16 00 00 00 	mov    DWORD PTR [esp+0x28],0x16
c000de4f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000de53:	83 c4 3c             	add    esp,0x3c
c000de56:	5b                   	pop    ebx
c000de57:	5e                   	pop    esi
c000de58:	5f                   	pop    edi
c000de59:	5d                   	pop    ebp
c000de5a:	c3                   	ret    

c000de5b <zoh_reset>:
c000de5b:	83 ec 0c             	sub    esp,0xc
c000de5e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de62:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000de65:	85 c0                	test   eax,eax
c000de67:	74 20                	je     c000de89 <zoh_reset+0x2e>
c000de69:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000de6c:	83 c0 1c             	add    eax,0x1c
c000de6f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000de72:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000de79:	c1 e2 02             	shl    edx,0x2
c000de7c:	51                   	push   ecx
c000de7d:	52                   	push   edx
c000de7e:	6a 00                	push   0x0
c000de80:	50                   	push   eax
c000de81:	e8 3f 28 ff ff       	call   c00006c5 <memset>
c000de86:	83 c4 10             	add    esp,0x10
c000de89:	83 c4 0c             	add    esp,0xc
c000de8c:	c3                   	ret    

c000de8d <zoh_get_name>:
c000de8d:	31 c0                	xor    eax,eax
c000de8f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000de94:	75 05                	jne    c000de9b <zoh_get_name+0xe>
c000de96:	b8 1e 6b 02 c0       	mov    eax,0xc0026b1e
c000de9b:	c3                   	ret    

c000de9c <zoh_get_description>:
c000de9c:	31 c0                	xor    eax,eax
c000de9e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000dea3:	75 05                	jne    c000deaa <zoh_get_description+0xe>
c000dea5:	b8 2f 6b 02 c0       	mov    eax,0xc0026b2f
c000deaa:	c3                   	ret    

c000deab <zoh_set_converter>:
c000deab:	53                   	push   ebx
c000deac:	b8 0a 00 00 00       	mov    eax,0xa
c000deb1:	83 ec 08             	sub    esp,0x8
c000deb4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000deb8:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000debd:	75 6e                	jne    c000df2d <zoh_set_converter+0x82>
c000debf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dec2:	85 c0                	test   eax,eax
c000dec4:	74 13                	je     c000ded9 <zoh_set_converter+0x2e>
c000dec6:	83 ec 0c             	sub    esp,0xc
c000dec9:	50                   	push   eax
c000deca:	e8 af 12 00 00       	call   c000f17e <free>
c000decf:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ded6:	83 c4 10             	add    esp,0x10
c000ded9:	50                   	push   eax
c000deda:	50                   	push   eax
c000dedb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000dede:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000dee5:	50                   	push   eax
c000dee6:	6a 01                	push   0x1
c000dee8:	e8 b1 12 00 00       	call   c000f19e <calloc>
c000deed:	83 c4 10             	add    esp,0x10
c000def0:	89 c2                	mov    edx,eax
c000def2:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000def5:	85 d2                	test   edx,edx
c000def7:	b8 01 00 00 00       	mov    eax,0x1
c000defc:	74 2f                	je     c000df2d <zoh_set_converter+0x82>
c000defe:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000df01:	83 ec 0c             	sub    esp,0xc
c000df04:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000df07:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000df0d:	c7 43 24 85 d8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d885
c000df14:	c7 43 20 85 d8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d885
c000df1b:	c7 43 28 5b de 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000de5b
c000df22:	53                   	push   ebx
c000df23:	e8 33 ff ff ff       	call   c000de5b <zoh_reset>
c000df28:	83 c4 10             	add    esp,0x10
c000df2b:	31 c0                	xor    eax,eax
c000df2d:	83 c4 08             	add    esp,0x8
c000df30:	5b                   	pop    ebx
c000df31:	c3                   	ret    

c000df32 <Computer::close(int, int, void*)>:
c000df32:	57                   	push   edi
c000df33:	56                   	push   esi
c000df34:	53                   	push   ebx
c000df35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000df39:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000df3d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000df41:	83 ec 0c             	sub    esp,0xc
c000df44:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000df4a:	e8 a9 58 00 00       	call   c00137f8 <Device::closeAll()>
c000df4f:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000df55:	83 c4 10             	add    esp,0x10
c000df58:	8b 10                	mov    edx,DWORD PTR [eax]
c000df5a:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000df5e:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000df66:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000df6a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df6e:	5b                   	pop    ebx
c000df6f:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000df72:	5e                   	pop    esi
c000df73:	5f                   	pop    edi
c000df74:	ff e0                	jmp    eax

c000df76 <Computer::Computer()>:
c000df76:	83 ec 0c             	sub    esp,0xc
c000df79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7d:	83 ec 08             	sub    esp,0x8
c000df80:	68 66 6b 02 c0       	push   0xc0026b66
c000df85:	50                   	push   eax
c000df86:	e8 e7 58 00 00       	call   c0013872 <Device::Device(char const*)>
c000df8b:	83 c4 10             	add    esp,0x10
c000df8e:	ba 30 6d 02 c0       	mov    edx,0xc0026d30
c000df93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df97:	89 10                	mov    DWORD PTR [eax],edx
c000df99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df9d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000dfa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfab:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000dfb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000dfbf:	83 ca 04             	or     edx,0x4
c000dfc2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000dfc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfcc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000dfd2:	0f b6 d0             	movzx  edx,al
c000dfd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd9:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000dfe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfe4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000dfea:	0f b6 d0             	movzx  edx,al
c000dfed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dff1:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000dff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dffa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e000:	8d 50 01             	lea    edx,[eax+0x1]
c000e003:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e007:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e00d:	0f b6 d0             	movzx  edx,al
c000e010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e014:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e018:	83 e1 3f             	and    ecx,0x3f
c000e01b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e01f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e023:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e029:	0f b6 d0             	movzx  edx,al
c000e02c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e030:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e03b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e041:	0f b6 d0             	movzx  edx,al
c000e044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e048:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e04d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e051:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e057:	8d 50 01             	lea    edx,[eax+0x1]
c000e05a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e05e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e064:	0f b6 d0             	movzx  edx,al
c000e067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e06b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e06f:	83 e1 3f             	and    ecx,0x3f
c000e072:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e07a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e080:	0f b6 d0             	movzx  edx,al
c000e083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e087:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e08e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e092:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e098:	0f b6 d0             	movzx  edx,al
c000e09b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e09f:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e0a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e0ae:	8d 50 01             	lea    edx,[eax+0x1]
c000e0b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e0b5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e0bb:	0f b6 d0             	movzx  edx,al
c000e0be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0c2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e0c6:	83 e1 3f             	and    ecx,0x3f
c000e0c9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e0cd:	90                   	nop
c000e0ce:	83 c4 0c             	add    esp,0xc
c000e0d1:	c3                   	ret    

c000e0d2 <Computer::setBootMessage(char const*)>:
c000e0d2:	c3                   	ret    
c000e0d3:	90                   	nop

c000e0d4 <Computer::start()>:
c000e0d4:	56                   	push   esi
c000e0d5:	53                   	push   ebx
c000e0d6:	50                   	push   eax
c000e0d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e0db:	e8 7a d9 00 00       	call   c001ba5a <lockScheduler()>
c000e0e0:	e8 a9 dc 00 00       	call   c001bd8e <schedule()>
c000e0e5:	e8 72 d9 00 00       	call   c001ba5c <unlockScheduler()>
c000e0ea:	fb                   	sti    
c000e0eb:	83 ec 0c             	sub    esp,0xc
c000e0ee:	68 3b 07 00 00       	push   0x73b
c000e0f3:	e8 90 40 00 00       	call   c0012188 <operator new(unsigned long)>
c000e0f8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e0ff:	89 c6                	mov    esi,eax
c000e101:	ff 35 94 bb 02 c0    	push   DWORD PTR ds:0xc002bb94
c000e107:	68 6f 6b 02 c0       	push   0xc0026b6f
c000e10c:	6a 01                	push   0x1
c000e10e:	50                   	push   eax
c000e10f:	e8 a6 d7 00 00       	call   c001b8ba <Process::Process(bool, char const*, Process*, char**)>
c000e114:	83 c4 20             	add    esp,0x20
c000e117:	68 ff 00 00 00       	push   0xff
c000e11c:	6a 00                	push   0x0
c000e11e:	68 fb ea 00 c0       	push   0xc000eafb
c000e123:	56                   	push   esi
c000e124:	e8 5b da 00 00       	call   c001bb84 <Process::createThread(void (*)(void*), void*, int)>
c000e129:	6a 7a                	push   0x7a
c000e12b:	6a 00                	push   0x0
c000e12d:	68 bd c3 01 c0       	push   0xc001c3bd
c000e132:	ff 35 94 bb 02 c0    	push   DWORD PTR ds:0xc002bb94
c000e138:	e8 47 da 00 00       	call   c001bb84 <Process::createThread(void (*)(void*), void*, int)>
c000e13d:	83 c4 20             	add    esp,0x20
c000e140:	a3 48 bb 02 c0       	mov    ds:0xc002bb48,eax
c000e145:	c6 05 8d a6 02 c0 01 	mov    BYTE PTR ds:0xc002a68d,0x1
c000e14c:	e8 81 44 00 00       	call   c00125d2 <initVFS()>
c000e151:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e157:	8b 10                	mov    edx,DWORD PTR [eax]
c000e159:	6a 00                	push   0x0
c000e15b:	6a 00                	push   0x0
c000e15d:	6a 00                	push   0x0
c000e15f:	50                   	push   eax
c000e160:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e163:	e8 50 c1 00 00       	call   c001a2b8 <setupSystemCalls()>
c000e168:	e8 63 4f 00 00       	call   c00130d0 <loadClockSettings()>
c000e16d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e170:	e8 57 56 00 00       	call   c00137cc <Device::loadDriversForAll()>
c000e175:	5a                   	pop    edx
c000e176:	8b 1d 88 a6 02 c0    	mov    ebx,DWORD PTR ds:0xc002a688
c000e17c:	59                   	pop    ecx
c000e17d:	6a 01                	push   0x1
c000e17f:	68 7c 6b 02 c0       	push   0xc0026b7c
c000e184:	e8 01 d3 00 00       	call   c001b48a <Thr::loadDLL(char const*, bool)>
c000e189:	5e                   	pop    esi
c000e18a:	5a                   	pop    edx
c000e18b:	53                   	push   ebx
c000e18c:	50                   	push   eax
c000e18d:	e8 be d4 00 00       	call   c001b650 <Thr::executeDLL(unsigned long, void*)>
c000e192:	c7 04 24 00 7d 02 c0 	mov    DWORD PTR [esp],0xc0027d00
c000e199:	e8 d9 40 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e19e:	83 c4 10             	add    esp,0x10
c000e1a1:	83 ec 0c             	sub    esp,0xc
c000e1a4:	6a 02                	push   0x2
c000e1a6:	e8 3d dd 00 00       	call   c001bee8 <blockTask(TaskState)>
c000e1ab:	83 c4 10             	add    esp,0x10
c000e1ae:	eb f1                	jmp    c000e1a1 <Computer::start()+0xcd>

c000e1b0 <firstTask()>:
c000e1b0:	83 ec 18             	sub    esp,0x18
c000e1b3:	ff 35 88 a6 02 c0    	push   DWORD PTR ds:0xc002a688
c000e1b9:	e8 16 ff ff ff       	call   c000e0d4 <Computer::start()>

c000e1be <Computer::detectFeatures()>:
c000e1be:	55                   	push   ebp
c000e1bf:	57                   	push   edi
c000e1c0:	56                   	push   esi
c000e1c1:	53                   	push   ebx
c000e1c2:	83 ec 1c             	sub    esp,0x1c
c000e1c5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e1c9:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e1d3:	e8 cb 21 ff ff       	call   c00003a3 <detectCPUID>
c000e1d8:	85 c0                	test   eax,eax
c000e1da:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e1e0:	0f 95 c2             	setne  dl
c000e1e3:	83 e0 fd             	and    eax,0xfffffffd
c000e1e6:	d1 e2                	shl    edx,1
c000e1e8:	09 d0                	or     eax,edx
c000e1ea:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e1f0:	a8 02                	test   al,0x2
c000e1f2:	75 46                	jne    c000e23a <Computer::detectFeatures()+0x7c>
c000e1f4:	f6 05 a1 a6 02 c0 04 	test   BYTE PTR ds:0xc002a6a1,0x4
c000e1fb:	74 07                	je     c000e204 <Computer::detectFeatures()+0x46>
c000e1fd:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e204:	e8 5d 50 01 00       	call   c0023266 <x87Detect>
c000e209:	83 e0 01             	and    eax,0x1
c000e20c:	c1 e0 04             	shl    eax,0x4
c000e20f:	88 c2                	mov    dl,al
c000e211:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e217:	83 e0 ef             	and    eax,0xffffffef
c000e21a:	09 d0                	or     eax,edx
c000e21c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e222:	a8 10                	test   al,0x10
c000e224:	0f 85 2a 01 00 00    	jne    c000e354 <Computer::detectFeatures()+0x196>
c000e22a:	84 c0                	test   al,al
c000e22c:	0f 88 45 01 00 00    	js     c000e377 <Computer::detectFeatures()+0x1b9>
c000e232:	83 c4 1c             	add    esp,0x1c
c000e235:	5b                   	pop    ebx
c000e236:	5e                   	pop    esi
c000e237:	5f                   	pop    edi
c000e238:	5d                   	pop    ebp
c000e239:	c3                   	ret    
c000e23a:	83 ec 0c             	sub    esp,0xc
c000e23d:	6a 20                	push   0x20
c000e23f:	e8 84 96 00 00       	call   c00178c8 <CPU::cpuidCheckEDX(unsigned int)>
c000e244:	83 e0 01             	and    eax,0x1
c000e247:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e24e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e254:	83 e0 f7             	and    eax,0xfffffff7
c000e257:	09 d0                	or     eax,edx
c000e259:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e25f:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e266:	e8 5d 96 00 00       	call   c00178c8 <CPU::cpuidCheckEDX(unsigned int)>
c000e26b:	83 e0 01             	and    eax,0x1
c000e26e:	88 c2                	mov    dl,al
c000e270:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e276:	83 e0 fe             	and    eax,0xfffffffe
c000e279:	09 d0                	or     eax,edx
c000e27b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e281:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e288:	e8 3b 96 00 00       	call   c00178c8 <CPU::cpuidCheckEDX(unsigned int)>
c000e28d:	c1 e0 07             	shl    eax,0x7
c000e290:	88 c2                	mov    dl,al
c000e292:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e298:	83 e0 7f             	and    eax,0x7f
c000e29b:	09 d0                	or     eax,edx
c000e29d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e2a3:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e2aa:	e8 19 96 00 00       	call   c00178c8 <CPU::cpuidCheckEDX(unsigned int)>
c000e2af:	83 c4 10             	add    esp,0x10
c000e2b2:	83 e0 01             	and    eax,0x1
c000e2b5:	c1 e0 05             	shl    eax,0x5
c000e2b8:	88 c2                	mov    dl,al
c000e2ba:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e2c0:	83 e0 df             	and    eax,0xffffffdf
c000e2c3:	09 d0                	or     eax,edx
c000e2c5:	f7 05 a0 a6 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002a6a0,0x401
c000e2cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e2d5:	0f 84 c2 00 00 00    	je     c000e39d <Computer::detectFeatures()+0x1df>
c000e2db:	83 e0 fe             	and    eax,0xfffffffe
c000e2de:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e2e4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e2ea:	88 c2                	mov    dl,al
c000e2ec:	83 e2 09             	and    edx,0x9
c000e2ef:	fe ca                	dec    dl
c000e2f1:	75 09                	jne    c000e2fc <Computer::detectFeatures()+0x13e>
c000e2f3:	83 e0 fe             	and    eax,0xfffffffe
c000e2f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e2fc:	83 ec 0c             	sub    esp,0xc
c000e2ff:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e303:	50                   	push   eax
c000e304:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e308:	55                   	push   ebp
c000e309:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e30d:	57                   	push   edi
c000e30e:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e312:	56                   	push   esi
c000e313:	68 00 00 00 80       	push   0x80000000
c000e318:	e8 27 95 00 00       	call   c0017844 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e31d:	83 c4 20             	add    esp,0x20
c000e320:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e327:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e32b:	0f 86 c3 fe ff ff    	jbe    c000e1f4 <Computer::detectFeatures()+0x36>
c000e331:	83 ec 0c             	sub    esp,0xc
c000e334:	50                   	push   eax
c000e335:	55                   	push   ebp
c000e336:	57                   	push   edi
c000e337:	56                   	push   esi
c000e338:	68 01 00 00 80       	push   0x80000001
c000e33d:	e8 02 95 00 00       	call   c0017844 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e342:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e34c:	83 c4 20             	add    esp,0x20
c000e34f:	e9 a0 fe ff ff       	jmp    c000e1f4 <Computer::detectFeatures()+0x36>
c000e354:	e8 c7 4e 01 00       	call   c0023220 <sseDetect>
c000e359:	88 c2                	mov    dl,al
c000e35b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e361:	c1 e2 07             	shl    edx,0x7
c000e364:	83 e0 7f             	and    eax,0x7f
c000e367:	09 d0                	or     eax,edx
c000e369:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e36f:	84 c0                	test   al,al
c000e371:	0f 89 bb fe ff ff    	jns    c000e232 <Computer::detectFeatures()+0x74>
c000e377:	e8 94 4e 01 00       	call   c0023210 <avxDetect>
c000e37c:	83 e0 01             	and    eax,0x1
c000e37f:	c1 e0 05             	shl    eax,0x5
c000e382:	88 c2                	mov    dl,al
c000e384:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e38a:	83 e0 df             	and    eax,0xffffffdf
c000e38d:	09 d0                	or     eax,edx
c000e38f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e395:	83 c4 1c             	add    esp,0x1c
c000e398:	5b                   	pop    ebx
c000e399:	5e                   	pop    esi
c000e39a:	5f                   	pop    edi
c000e39b:	5d                   	pop    ebp
c000e39c:	c3                   	ret    
c000e39d:	83 ec 0c             	sub    esp,0xc
c000e3a0:	68 00 02 00 00       	push   0x200
c000e3a5:	e8 1e 95 00 00       	call   c00178c8 <CPU::cpuidCheckEDX(unsigned int)>
c000e3aa:	83 c4 10             	add    esp,0x10
c000e3ad:	83 e0 01             	and    eax,0x1
c000e3b0:	88 c2                	mov    dl,al
c000e3b2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e3b8:	83 e0 fe             	and    eax,0xfffffffe
c000e3bb:	09 d0                	or     eax,edx
c000e3bd:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e3c3:	e9 1c ff ff ff       	jmp    c000e2e4 <Computer::detectFeatures()+0x126>

c000e3c8 <Computer::displayFeatures()>:
c000e3c8:	53                   	push   ebx
c000e3c9:	83 ec 14             	sub    esp,0x14
c000e3cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e3d0:	68 9f 6b 02 c0       	push   0xc0026b9f
c000e3d5:	e8 9d 3e 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e3da:	83 c4 10             	add    esp,0x10
c000e3dd:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e3e4:	0f 85 73 02 00 00    	jne    c000e65d <Computer::displayFeatures()+0x295>
c000e3ea:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c000e3ef:	83 ec 08             	sub    esp,0x8
c000e3f2:	50                   	push   eax
c000e3f3:	68 b2 6b 02 c0       	push   0xc0026bb2
c000e3f8:	e8 7a 3e 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e3fd:	83 c4 10             	add    esp,0x10
c000e400:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e407:	0f 85 8c 02 00 00    	jne    c000e699 <Computer::displayFeatures()+0x2d1>
c000e40d:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c000e412:	83 ec 08             	sub    esp,0x8
c000e415:	50                   	push   eax
c000e416:	68 c3 6b 02 c0       	push   0xc0026bc3
c000e41b:	e8 57 3e 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e420:	83 c4 10             	add    esp,0x10
c000e423:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e42a:	0f 85 5f 02 00 00    	jne    c000e68f <Computer::displayFeatures()+0x2c7>
c000e430:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c000e435:	83 ec 08             	sub    esp,0x8
c000e438:	50                   	push   eax
c000e439:	68 d4 6b 02 c0       	push   0xc0026bd4
c000e43e:	e8 34 3e 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e443:	83 c4 10             	add    esp,0x10
c000e446:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e44d:	0f 85 32 02 00 00    	jne    c000e685 <Computer::displayFeatures()+0x2bd>
c000e453:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c000e458:	83 ec 08             	sub    esp,0x8
c000e45b:	50                   	push   eax
c000e45c:	68 e5 6b 02 c0       	push   0xc0026be5
c000e461:	e8 11 3e 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e466:	83 c4 10             	add    esp,0x10
c000e469:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e470:	0f 85 05 02 00 00    	jne    c000e67b <Computer::displayFeatures()+0x2b3>
c000e476:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c000e47b:	83 ec 08             	sub    esp,0x8
c000e47e:	50                   	push   eax
c000e47f:	68 f6 6b 02 c0       	push   0xc0026bf6
c000e484:	e8 ee 3d 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e489:	83 c4 10             	add    esp,0x10
c000e48c:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e493:	0f 85 d8 01 00 00    	jne    c000e671 <Computer::displayFeatures()+0x2a9>
c000e499:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c000e49e:	83 ec 08             	sub    esp,0x8
c000e4a1:	50                   	push   eax
c000e4a2:	68 07 6c 02 c0       	push   0xc0026c07
c000e4a7:	e8 cb 3d 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e4ac:	83 c4 10             	add    esp,0x10
c000e4af:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e4b6:	0f 85 ab 01 00 00    	jne    c000e667 <Computer::displayFeatures()+0x29f>
c000e4bc:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c000e4c1:	83 ec 08             	sub    esp,0x8
c000e4c4:	50                   	push   eax
c000e4c5:	68 18 6c 02 c0       	push   0xc0026c18
c000e4ca:	e8 a8 3d 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e4cf:	83 c4 10             	add    esp,0x10
c000e4d2:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e4d9:	0f 88 1b 02 00 00    	js     c000e6fa <Computer::displayFeatures()+0x332>
c000e4df:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c000e4e4:	83 ec 08             	sub    esp,0x8
c000e4e7:	50                   	push   eax
c000e4e8:	68 29 6c 02 c0       	push   0xc0026c29
c000e4ed:	e8 85 3d 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e4f2:	83 c4 10             	add    esp,0x10
c000e4f5:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e4fc:	0f 85 a1 01 00 00    	jne    c000e6a3 <Computer::displayFeatures()+0x2db>
c000e502:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c000e507:	83 ec 08             	sub    esp,0x8
c000e50a:	50                   	push   eax
c000e50b:	68 3a 6c 02 c0       	push   0xc0026c3a
c000e510:	e8 62 3d 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e515:	83 c4 10             	add    esp,0x10
c000e518:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e51f:	0f 85 cb 01 00 00    	jne    c000e6f0 <Computer::displayFeatures()+0x328>
c000e525:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c000e52a:	83 ec 08             	sub    esp,0x8
c000e52d:	50                   	push   eax
c000e52e:	68 4b 6c 02 c0       	push   0xc0026c4b
c000e533:	e8 3f 3d 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e538:	83 c4 10             	add    esp,0x10
c000e53b:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e542:	0f 85 9e 01 00 00    	jne    c000e6e6 <Computer::displayFeatures()+0x31e>
c000e548:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c000e54d:	83 ec 08             	sub    esp,0x8
c000e550:	50                   	push   eax
c000e551:	68 5c 6c 02 c0       	push   0xc0026c5c
c000e556:	e8 1c 3d 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e55b:	83 c4 10             	add    esp,0x10
c000e55e:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e565:	0f 85 71 01 00 00    	jne    c000e6dc <Computer::displayFeatures()+0x314>
c000e56b:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c000e570:	83 ec 08             	sub    esp,0x8
c000e573:	50                   	push   eax
c000e574:	68 6d 6c 02 c0       	push   0xc0026c6d
c000e579:	e8 f9 3c 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e588:	0f 85 44 01 00 00    	jne    c000e6d2 <Computer::displayFeatures()+0x30a>
c000e58e:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c000e593:	83 ec 08             	sub    esp,0x8
c000e596:	50                   	push   eax
c000e597:	68 7e 6c 02 c0       	push   0xc0026c7e
c000e59c:	e8 d6 3c 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e5ab:	0f 85 17 01 00 00    	jne    c000e6c8 <Computer::displayFeatures()+0x300>
c000e5b1:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c000e5b6:	83 ec 08             	sub    esp,0x8
c000e5b9:	50                   	push   eax
c000e5ba:	68 8f 6c 02 c0       	push   0xc0026c8f
c000e5bf:	e8 b3 3c 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e5c4:	83 c4 10             	add    esp,0x10
c000e5c7:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e5ce:	0f 85 ea 00 00 00    	jne    c000e6be <Computer::displayFeatures()+0x2f6>
c000e5d4:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	50                   	push   eax
c000e5dd:	68 a0 6c 02 c0       	push   0xc0026ca0
c000e5e2:	e8 90 3c 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e5e7:	83 c4 10             	add    esp,0x10
c000e5ea:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e5f1:	0f 88 0d 01 00 00    	js     c000e704 <Computer::displayFeatures()+0x33c>
c000e5f7:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c000e5fc:	83 ec 08             	sub    esp,0x8
c000e5ff:	50                   	push   eax
c000e600:	68 b1 6c 02 c0       	push   0xc0026cb1
c000e605:	e8 6d 3c 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e60a:	83 c4 10             	add    esp,0x10
c000e60d:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e614:	0f 85 9a 00 00 00    	jne    c000e6b4 <Computer::displayFeatures()+0x2ec>
c000e61a:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c000e61f:	83 ec 08             	sub    esp,0x8
c000e622:	50                   	push   eax
c000e623:	68 c2 6c 02 c0       	push   0xc0026cc2
c000e628:	e8 4a 3c 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e62d:	83 c4 10             	add    esp,0x10
c000e630:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e637:	75 74                	jne    c000e6ad <Computer::displayFeatures()+0x2e5>
c000e639:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c000e63e:	83 ec 08             	sub    esp,0x8
c000e641:	50                   	push   eax
c000e642:	68 d3 6c 02 c0       	push   0xc0026cd3
c000e647:	e8 2b 3c 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e64c:	c7 44 24 20 fa 82 02 c0 	mov    DWORD PTR [esp+0x20],0xc00282fa
c000e654:	83 c4 18             	add    esp,0x18
c000e657:	5b                   	pop    ebx
c000e658:	e9 1a 3c 00 00       	jmp    c0012277 <Dbg::kprintf(char const*, ...)>
c000e65d:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c000e662:	e9 88 fd ff ff       	jmp    c000e3ef <Computer::displayFeatures()+0x27>
c000e667:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c000e66c:	e9 50 fe ff ff       	jmp    c000e4c1 <Computer::displayFeatures()+0xf9>
c000e671:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c000e676:	e9 23 fe ff ff       	jmp    c000e49e <Computer::displayFeatures()+0xd6>
c000e67b:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c000e680:	e9 f6 fd ff ff       	jmp    c000e47b <Computer::displayFeatures()+0xb3>
c000e685:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c000e68a:	e9 c9 fd ff ff       	jmp    c000e458 <Computer::displayFeatures()+0x90>
c000e68f:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c000e694:	e9 9c fd ff ff       	jmp    c000e435 <Computer::displayFeatures()+0x6d>
c000e699:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c000e69e:	e9 6f fd ff ff       	jmp    c000e412 <Computer::displayFeatures()+0x4a>
c000e6a3:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c000e6a8:	e9 5a fe ff ff       	jmp    c000e507 <Computer::displayFeatures()+0x13f>
c000e6ad:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c000e6b2:	eb 8a                	jmp    c000e63e <Computer::displayFeatures()+0x276>
c000e6b4:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c000e6b9:	e9 61 ff ff ff       	jmp    c000e61f <Computer::displayFeatures()+0x257>
c000e6be:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c000e6c3:	e9 11 ff ff ff       	jmp    c000e5d9 <Computer::displayFeatures()+0x211>
c000e6c8:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c000e6cd:	e9 e4 fe ff ff       	jmp    c000e5b6 <Computer::displayFeatures()+0x1ee>
c000e6d2:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c000e6d7:	e9 b7 fe ff ff       	jmp    c000e593 <Computer::displayFeatures()+0x1cb>
c000e6dc:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c000e6e1:	e9 8a fe ff ff       	jmp    c000e570 <Computer::displayFeatures()+0x1a8>
c000e6e6:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c000e6eb:	e9 5d fe ff ff       	jmp    c000e54d <Computer::displayFeatures()+0x185>
c000e6f0:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c000e6f5:	e9 30 fe ff ff       	jmp    c000e52a <Computer::displayFeatures()+0x162>
c000e6fa:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c000e6ff:	e9 e0 fd ff ff       	jmp    c000e4e4 <Computer::displayFeatures()+0x11c>
c000e704:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c000e709:	e9 ee fe ff ff       	jmp    c000e5fc <Computer::displayFeatures()+0x234>

c000e70e <Computer::rdmsr(unsigned int)>:
c000e70e:	83 ec 0c             	sub    esp,0xc
c000e711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e715:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000e71c:	74 0a                	je     c000e728 <Computer::rdmsr(unsigned int)+0x1a>
c000e71e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e722:	0f 32                	rdmsr  
c000e724:	83 c4 0c             	add    esp,0xc
c000e727:	c3                   	ret    
c000e728:	83 ec 0c             	sub    esp,0xc
c000e72b:	68 e4 6c 02 c0       	push   0xc0026ce4
c000e730:	e8 d2 a3 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c000e735:	83 c4 10             	add    esp,0x10
c000e738:	eb e4                	jmp    c000e71e <Computer::rdmsr(unsigned int)+0x10>

c000e73a <Computer::wrmsr(unsigned int, unsigned long long)>:
c000e73a:	57                   	push   edi
c000e73b:	56                   	push   esi
c000e73c:	52                   	push   edx
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e745:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e749:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000e750:	74 0e                	je     c000e760 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000e752:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e756:	89 f0                	mov    eax,esi
c000e758:	89 fa                	mov    edx,edi
c000e75a:	0f 30                	wrmsr  
c000e75c:	58                   	pop    eax
c000e75d:	5e                   	pop    esi
c000e75e:	5f                   	pop    edi
c000e75f:	c3                   	ret    
c000e760:	83 ec 0c             	sub    esp,0xc
c000e763:	68 ea 6c 02 c0       	push   0xc0026cea
c000e768:	e8 9a a3 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c000e76d:	83 c4 10             	add    esp,0x10
c000e770:	eb e0                	jmp    c000e752 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000e772 <Computer::nmiEnabled()>:
c000e772:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e776:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000e77c:	c3                   	ret    
c000e77d:	90                   	nop

c000e77e <Computer::readCMOS(unsigned char)>:
c000e77e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e782:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000e789:	19 c0                	sbb    eax,eax
c000e78b:	83 e0 80             	and    eax,0xffffff80
c000e78e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e792:	e6 70                	out    0x70,al
c000e794:	e4 71                	in     al,0x71
c000e796:	c3                   	ret    
c000e797:	90                   	nop

c000e798 <Computer::enableNMI(bool)>:
c000e798:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e79c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e7a0:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000e7a6:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000e7ae:	eb ce                	jmp    c000e77e <Computer::readCMOS(unsigned char)>

c000e7b0 <Computer::open(int, int, void*)>:
c000e7b0:	56                   	push   esi
c000e7b1:	53                   	push   ebx
c000e7b2:	83 ec 10             	sub    esp,0x10
c000e7b5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e7b9:	f6 05 a0 a6 02 c0 04 	test   BYTE PTR ds:0xc002a6a0,0x4
c000e7c0:	68 68 22 00 00       	push   0x2268
c000e7c5:	0f 94 05 40 96 02 c0 	sete   BYTE PTR ds:0xc0029640
c000e7cc:	e8 b7 39 00 00       	call   c0012188 <operator new(unsigned long)>
c000e7d1:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7d4:	89 c6                	mov    esi,eax
c000e7d6:	e8 2b 87 00 00       	call   c0016f06 <ACPI::ACPI()>
c000e7db:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000e7e1:	58                   	pop    eax
c000e7e2:	5a                   	pop    edx
c000e7e3:	56                   	push   esi
c000e7e4:	53                   	push   ebx
c000e7e5:	e8 98 4e 00 00       	call   c0013682 <Device::addChild(Device*)>
c000e7ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7ed:	e8 cc f9 ff ff       	call   c000e1be <Computer::detectFeatures()>
c000e7f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7f5:	e8 ce fb ff ff       	call   c000e3c8 <Computer::displayFeatures()>
c000e7fa:	59                   	pop    ecx
c000e7fb:	5e                   	pop    esi
c000e7fc:	6a 01                	push   0x1
c000e7fe:	53                   	push   ebx
c000e7ff:	e8 94 ff ff ff       	call   c000e798 <Computer::enableNMI(bool)>
c000e804:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000e80b:	e8 78 39 00 00       	call   c0012188 <operator new(unsigned long)>
c000e810:	89 04 24             	mov    DWORD PTR [esp],eax
c000e813:	89 c6                	mov    esi,eax
c000e815:	e8 7e 91 00 00       	call   c0017998 <CPU::CPU()>
c000e81a:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000e820:	58                   	pop    eax
c000e821:	5a                   	pop    edx
c000e822:	56                   	push   esi
c000e823:	53                   	push   ebx
c000e824:	e8 59 4e 00 00       	call   c0013682 <Device::addChild(Device*)>
c000e829:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e82f:	8b 10                	mov    edx,DWORD PTR [eax]
c000e831:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e835:	6a 00                	push   0x0
c000e837:	6a 00                	push   0x0
c000e839:	50                   	push   eax
c000e83a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e83d:	83 c4 20             	add    esp,0x20
c000e840:	e8 a5 53 00 00       	call   c0013bea <setupFPU()>
c000e845:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000e84b:	85 c0                	test   eax,eax
c000e84d:	74 1f                	je     c000e86e <Computer::open(int, int, void*)+0xbe>
c000e84f:	83 ec 08             	sub    esp,0x8
c000e852:	50                   	push   eax
c000e853:	53                   	push   ebx
c000e854:	e8 29 4e 00 00       	call   c0013682 <Device::addChild(Device*)>
c000e859:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000e85f:	8b 10                	mov    edx,DWORD PTR [eax]
c000e861:	6a 00                	push   0x0
c000e863:	6a 00                	push   0x0
c000e865:	6a 00                	push   0x0
c000e867:	50                   	push   eax
c000e868:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e86b:	83 c4 20             	add    esp,0x20
c000e86e:	83 ec 0c             	sub    esp,0xc
c000e871:	68 b0 e1 00 c0       	push   0xc000e1b0
c000e876:	e8 09 d4 00 00       	call   c001bc84 <setupMultitasking(void (*)())>
c000e87b:	83 c4 14             	add    esp,0x14
c000e87e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e883:	5b                   	pop    ebx
c000e884:	5e                   	pop    esi
c000e885:	c3                   	ret    

c000e886 <Computer::disableNMI()>:
c000e886:	6a 00                	push   0x0
c000e888:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e88c:	e8 07 ff ff ff       	call   c000e798 <Computer::enableNMI(bool)>
c000e891:	58                   	pop    eax
c000e892:	5a                   	pop    edx
c000e893:	c3                   	ret    

c000e894 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000e894:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e898:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000e89f:	19 c0                	sbb    eax,eax
c000e8a1:	83 e0 80             	and    eax,0xffffff80
c000e8a4:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e8a8:	e6 70                	out    0x70,al
c000e8aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8ae:	e6 71                	out    0x71,al
c000e8b0:	c3                   	ret    
c000e8b1:	90                   	nop

c000e8b2 <Computer::handleNMI()>:
c000e8b2:	56                   	push   esi
c000e8b3:	53                   	push   ebx
c000e8b4:	83 ec 10             	sub    esp,0x10
c000e8b7:	e4 92                	in     al,0x92
c000e8b9:	89 c6                	mov    esi,eax
c000e8bb:	e4 61                	in     al,0x61
c000e8bd:	68 f0 6c 02 c0       	push   0xc0026cf0
c000e8c2:	88 c3                	mov    bl,al
c000e8c4:	e8 ae 39 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e8c9:	83 c4 10             	add    esp,0x10
c000e8cc:	83 e6 10             	and    esi,0x10
c000e8cf:	75 0d                	jne    c000e8de <Computer::handleNMI()+0x2c>
c000e8d1:	f6 c3 40             	test   bl,0x40
c000e8d4:	75 1d                	jne    c000e8f3 <Computer::handleNMI()+0x41>
c000e8d6:	84 db                	test   bl,bl
c000e8d8:	78 2d                	js     c000e907 <Computer::handleNMI()+0x55>
c000e8da:	58                   	pop    eax
c000e8db:	5b                   	pop    ebx
c000e8dc:	5e                   	pop    esi
c000e8dd:	c3                   	ret    
c000e8de:	83 ec 0c             	sub    esp,0xc
c000e8e1:	68 01 6d 02 c0       	push   0xc0026d01
c000e8e6:	e8 1c a2 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c000e8eb:	83 c4 10             	add    esp,0x10
c000e8ee:	f6 c3 40             	test   bl,0x40
c000e8f1:	74 e3                	je     c000e8d6 <Computer::handleNMI()+0x24>
c000e8f3:	83 ec 0c             	sub    esp,0xc
c000e8f6:	68 0e 6d 02 c0       	push   0xc0026d0e
c000e8fb:	e8 07 a2 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c000e900:	83 c4 10             	add    esp,0x10
c000e903:	84 db                	test   bl,bl
c000e905:	79 d3                	jns    c000e8da <Computer::handleNMI()+0x28>
c000e907:	c7 44 24 10 18 6d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026d18
c000e90f:	5a                   	pop    edx
c000e910:	5b                   	pop    ebx
c000e911:	5e                   	pop    esi
c000e912:	e9 f0 a1 00 00       	jmp    c0018b07 <Krnl::panic(char const*)>
c000e917:	90                   	nop

c000e918 <Computer::setDiskActivityLight(int, bool)>:
c000e918:	56                   	push   esi
c000e919:	53                   	push   ebx
c000e91a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e91e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e923:	77 1b                	ja     c000e940 <Computer::setDiskActivityLight(int, bool)+0x28>
c000e925:	e4 92                	in     al,0x92
c000e927:	bb 40 00 00 00       	mov    ebx,0x40
c000e92c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000e930:	89 da                	mov    edx,ebx
c000e932:	d3 e2                	shl    edx,cl
c000e934:	89 f1                	mov    ecx,esi
c000e936:	f7 d2                	not    edx
c000e938:	d3 e3                	shl    ebx,cl
c000e93a:	21 d0                	and    eax,edx
c000e93c:	09 d8                	or     eax,ebx
c000e93e:	e6 92                	out    0x92,al
c000e940:	5b                   	pop    ebx
c000e941:	5e                   	pop    esi
c000e942:	c3                   	ret    
c000e943:	90                   	nop

c000e944 <GDTEntry::setBase(unsigned int)>:
c000e944:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e948:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e94c:	89 c1                	mov    ecx,eax
c000e94e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e952:	c1 e9 10             	shr    ecx,0x10
c000e955:	c1 e8 18             	shr    eax,0x18
c000e958:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e95b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e95e:	c3                   	ret    
c000e95f:	90                   	nop

c000e960 <GDTEntry::setLimit(unsigned int)>:
c000e960:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e964:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e968:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e96b:	66 89 01             	mov    WORD PTR [ecx],ax
c000e96e:	83 e2 f0             	and    edx,0xfffffff0
c000e971:	c1 e8 10             	shr    eax,0x10
c000e974:	83 e0 0f             	and    eax,0xf
c000e977:	09 d0                	or     eax,edx
c000e979:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e97c:	c3                   	ret    
c000e97d:	90                   	nop

c000e97e <GDT::GDT()>:
c000e97e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e982:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e98c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e992:	90                   	nop
c000e993:	c3                   	ret    

c000e994 <GDT::addEntry(GDTEntry)>:
c000e994:	53                   	push   ebx
c000e995:	83 ec 0c             	sub    esp,0xc
c000e998:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e99c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e99e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9a5:	52                   	push   edx
c000e9a6:	50                   	push   eax
c000e9a7:	68 54 6d 02 c0       	push   0xc0026d54
c000e9ac:	e8 c6 38 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e9b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e9b3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e9b7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9bb:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000e9bf:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000e9c3:	8d 50 01             	lea    edx,[eax+0x1]
c000e9c6:	c1 e0 03             	shl    eax,0x3
c000e9c9:	89 13                	mov    DWORD PTR [ebx],edx
c000e9cb:	83 c4 18             	add    esp,0x18
c000e9ce:	5b                   	pop    ebx
c000e9cf:	c3                   	ret    

c000e9d0 <GDT::getNumberOfEntries()>:
c000e9d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9d6:	c3                   	ret    
c000e9d7:	90                   	nop

c000e9d8 <GDT::flush()>:
c000e9d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9dc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9de:	83 c0 04             	add    eax,0x4
c000e9e1:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e9e8:	a3 92 a6 02 c0       	mov    ds:0xc002a692,eax
c000e9ed:	66 89 15 90 a6 02 c0 	mov    WORD PTR ds:0xc002a690,dx
c000e9f4:	e9 1e 1a ff ff       	jmp    c0000417 <loadGDT>
c000e9f9:	90                   	nop

c000e9fa <GDT::setup()>:
c000e9fa:	55                   	push   ebp
c000e9fb:	57                   	push   edi
c000e9fc:	56                   	push   esi
c000e9fd:	53                   	push   ebx
c000e9fe:	83 ec 3c             	sub    esp,0x3c
c000ea01:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ea05:	6a 00                	push   0x0
c000ea07:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ea0b:	53                   	push   ebx
c000ea0c:	e8 33 ff ff ff       	call   c000e944 <GDTEntry::setBase(unsigned int)>
c000ea11:	6a 00                	push   0x0
c000ea13:	53                   	push   ebx
c000ea14:	e8 47 ff ff ff       	call   c000e960 <GDTEntry::setLimit(unsigned int)>
c000ea19:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ea21:	6a 00                	push   0x0
c000ea23:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ea27:	53                   	push   ebx
c000ea28:	e8 17 ff ff ff       	call   c000e944 <GDTEntry::setBase(unsigned int)>
c000ea2d:	68 ff ff ff 00       	push   0xffffff
c000ea32:	53                   	push   ebx
c000ea33:	e8 28 ff ff ff       	call   c000e960 <GDTEntry::setLimit(unsigned int)>
c000ea38:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ea3c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ea41:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ea46:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ea4a:	83 c4 20             	add    esp,0x20
c000ea4d:	6a 00                	push   0x0
c000ea4f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ea53:	53                   	push   ebx
c000ea54:	e8 eb fe ff ff       	call   c000e944 <GDTEntry::setBase(unsigned int)>
c000ea59:	68 ff ff ff 00       	push   0xffffff
c000ea5e:	53                   	push   ebx
c000ea5f:	e8 fc fe ff ff       	call   c000e960 <GDTEntry::setLimit(unsigned int)>
c000ea64:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ea68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea6c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ea70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ea74:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ea78:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ea7d:	0d 00 92 c0 00       	or     eax,0xc09200
c000ea82:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ea86:	89 d8                	mov    eax,ebx
c000ea88:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ea8c:	80 cc 60             	or     ah,0x60
c000ea8f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea93:	83 c4 0c             	add    esp,0xc
c000ea96:	89 f8                	mov    eax,edi
c000ea98:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea9c:	80 cc 60             	or     ah,0x60
c000ea9f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eaa3:	89 c7                	mov    edi,eax
c000eaa5:	55                   	push   ebp
c000eaa6:	e8 e9 fe ff ff       	call   c000e994 <GDT::addEntry(GDTEntry)>
c000eaab:	83 c4 0c             	add    esp,0xc
c000eaae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eab2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eab6:	55                   	push   ebp
c000eab7:	e8 d8 fe ff ff       	call   c000e994 <GDT::addEntry(GDTEntry)>
c000eabc:	83 c4 0c             	add    esp,0xc
c000eabf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eac3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eac7:	55                   	push   ebp
c000eac8:	e8 c7 fe ff ff       	call   c000e994 <GDT::addEntry(GDTEntry)>
c000eacd:	83 c4 0c             	add    esp,0xc
c000ead0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ead4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ead8:	53                   	push   ebx
c000ead9:	51                   	push   ecx
c000eada:	55                   	push   ebp
c000eadb:	e8 b4 fe ff ff       	call   c000e994 <GDT::addEntry(GDTEntry)>
c000eae0:	83 c4 0c             	add    esp,0xc
c000eae3:	57                   	push   edi
c000eae4:	56                   	push   esi
c000eae5:	55                   	push   ebp
c000eae6:	e8 a9 fe ff ff       	call   c000e994 <GDT::addEntry(GDTEntry)>
c000eaeb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000eaee:	e8 e5 fe ff ff       	call   c000e9d8 <GDT::flush()>
c000eaf3:	83 c4 4c             	add    esp,0x4c
c000eaf6:	5b                   	pop    ebx
c000eaf7:	5e                   	pop    esi
c000eaf8:	5f                   	pop    edi
c000eaf9:	5d                   	pop    ebp
c000eafa:	c3                   	ret    

c000eafb <idleFunction(void*)>:
c000eafb:	53                   	push   ebx
c000eafc:	83 ec 08             	sub    esp,0x8
c000eaff:	e8 58 cf 00 00       	call   c001ba5c <unlockScheduler()>
c000eb04:	e8 7b 8e 00 00       	call   c0017984 <CPU::current()>
c000eb09:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000eb10:	74 41                	je     c000eb53 <idleFunction(void*)+0x58>
c000eb12:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c000eb17:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb1e:	74 33                	je     c000eb53 <idleFunction(void*)+0x58>
c000eb20:	31 db                	xor    ebx,ebx
c000eb22:	52                   	push   edx
c000eb23:	52                   	push   edx
c000eb24:	68 e1 00 00 00       	push   0xe1
c000eb29:	50                   	push   eax
c000eb2a:	e8 df fb ff ff       	call   c000e70e <Computer::rdmsr(unsigned int)>
c000eb2f:	53                   	push   ebx
c000eb30:	83 e0 02             	and    eax,0x2
c000eb33:	50                   	push   eax
c000eb34:	68 e1 00 00 00       	push   0xe1
c000eb39:	ff 35 88 a6 02 c0    	push   DWORD PTR ds:0xc002a688
c000eb3f:	e8 f6 fb ff ff       	call   c000e73a <Computer::wrmsr(unsigned int, unsigned long long)>
c000eb44:	83 c4 20             	add    esp,0x20
c000eb47:	e8 e8 16 ff ff       	call   c0000234 <doTPAUSE>
c000eb4c:	e8 4f 67 01 00       	call   c00252a0 <idleCommon()>
c000eb51:	eb f4                	jmp    c000eb47 <idleFunction(void*)+0x4c>
c000eb53:	fb                   	sti    
c000eb54:	f4                   	hlt    
c000eb55:	e8 46 67 01 00       	call   c00252a0 <idleCommon()>
c000eb5a:	eb f7                	jmp    c000eb53 <idleFunction(void*)+0x58>

c000eb5c <IDTEntry::IDTEntry(bool)>:
c000eb5c:	83 ec 04             	sub    esp,0x4
c000eb5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb63:	88 04 24             	mov    BYTE PTR [esp],al
c000eb66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb6a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eb70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb74:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eb78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb7c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb7f:	83 e2 f0             	and    edx,0xfffffff0
c000eb82:	83 ca 0e             	or     edx,0xe
c000eb85:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb8c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb8f:	83 e2 ef             	and    edx,0xffffffef
c000eb92:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb95:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000eb99:	74 04                	je     c000eb9f <IDTEntry::IDTEntry(bool)+0x43>
c000eb9b:	b2 03                	mov    dl,0x3
c000eb9d:	eb 02                	jmp    c000eba1 <IDTEntry::IDTEntry(bool)+0x45>
c000eb9f:	b2 00                	mov    dl,0x0
c000eba1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eba5:	83 e2 03             	and    edx,0x3
c000eba8:	88 d1                	mov    cl,dl
c000ebaa:	c1 e1 05             	shl    ecx,0x5
c000ebad:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ebb0:	83 e2 9f             	and    edx,0xffffff9f
c000ebb3:	09 ca                	or     edx,ecx
c000ebb5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ebb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebbc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ebbf:	83 ca 80             	or     edx,0xffffff80
c000ebc2:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ebc5:	90                   	nop
c000ebc6:	83 c4 04             	add    esp,0x4
c000ebc9:	c3                   	ret    

c000ebca <IDTEntry::setOffset(unsigned int)>:
c000ebca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ebce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebd2:	66 89 02             	mov    WORD PTR [edx],ax
c000ebd5:	c1 e8 10             	shr    eax,0x10
c000ebd8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ebdc:	c3                   	ret    
c000ebdd:	90                   	nop

c000ebde <IDT::IDT()>:
c000ebde:	90                   	nop
c000ebdf:	c3                   	ret    

c000ebe0 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ebe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebe4:	83 c0 30             	add    eax,0x30
c000ebe7:	c3                   	ret    

c000ebe8 <IDT::addEntry(IDTEntry, int)>:
c000ebe8:	53                   	push   ebx
c000ebe9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ebf1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ebf5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ebf9:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ebfc:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ec00:	5b                   	pop    ebx
c000ec01:	c3                   	ret    

c000ec02 <IDT::addEntry(int, void (*)(), bool)>:
c000ec02:	53                   	push   ebx
c000ec03:	83 ec 10             	sub    esp,0x10
c000ec06:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ec0b:	50                   	push   eax
c000ec0c:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ec10:	53                   	push   ebx
c000ec11:	e8 46 ff ff ff       	call   c000eb5c <IDTEntry::IDTEntry(bool)>
c000ec16:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ec1a:	53                   	push   ebx
c000ec1b:	e8 aa ff ff ff       	call   c000ebca <IDTEntry::setOffset(unsigned int)>
c000ec20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec24:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ec28:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ec2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ec30:	e8 b3 ff ff ff       	call   c000ebe8 <IDT::addEntry(IDTEntry, int)>
c000ec35:	83 c4 30             	add    esp,0x30
c000ec38:	5b                   	pop    ebx
c000ec39:	c3                   	ret    

c000ec3a <IDT::flush()>:
c000ec3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec3e:	66 c7 05 98 a6 02 c0 ff 07 	mov    WORD PTR ds:0xc002a698,0x7ff
c000ec47:	a3 9a a6 02 c0       	mov    ds:0xc002a69a,eax
c000ec4c:	0f 01 1d 98 a6 02 c0 	lidtd  ds:0xc002a698
c000ec53:	c3                   	ret    

c000ec54 <IDT::setup()>:
c000ec54:	57                   	push   edi
c000ec55:	56                   	push   esi
c000ec56:	53                   	push   ebx
c000ec57:	83 ec 10             	sub    esp,0x10
c000ec5a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ec5e:	6a 00                	push   0x0
c000ec60:	68 37 04 00 c0       	push   0xc0000437
c000ec65:	6a 00                	push   0x0
c000ec67:	53                   	push   ebx
c000ec68:	e8 95 ff ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ec6d:	6a 00                	push   0x0
c000ec6f:	68 47 04 00 c0       	push   0xc0000447
c000ec74:	6a 01                	push   0x1
c000ec76:	53                   	push   ebx
c000ec77:	e8 86 ff ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ec7c:	83 c4 20             	add    esp,0x20
c000ec7f:	6a 00                	push   0x0
c000ec81:	68 51 04 00 c0       	push   0xc0000451
c000ec86:	6a 02                	push   0x2
c000ec88:	53                   	push   ebx
c000ec89:	e8 74 ff ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ec8e:	6a 00                	push   0x0
c000ec90:	68 5b 04 00 c0       	push   0xc000045b
c000ec95:	6a 03                	push   0x3
c000ec97:	53                   	push   ebx
c000ec98:	e8 65 ff ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ec9d:	83 c4 20             	add    esp,0x20
c000eca0:	6a 00                	push   0x0
c000eca2:	68 65 04 00 c0       	push   0xc0000465
c000eca7:	6a 04                	push   0x4
c000eca9:	53                   	push   ebx
c000ecaa:	e8 53 ff ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ecaf:	6a 00                	push   0x0
c000ecb1:	68 6f 04 00 c0       	push   0xc000046f
c000ecb6:	6a 05                	push   0x5
c000ecb8:	53                   	push   ebx
c000ecb9:	e8 44 ff ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ecbe:	83 c4 20             	add    esp,0x20
c000ecc1:	6a 00                	push   0x0
c000ecc3:	68 79 04 00 c0       	push   0xc0000479
c000ecc8:	6a 06                	push   0x6
c000ecca:	53                   	push   ebx
c000eccb:	e8 32 ff ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ecd0:	6a 00                	push   0x0
c000ecd2:	68 83 04 00 c0       	push   0xc0000483
c000ecd7:	6a 07                	push   0x7
c000ecd9:	53                   	push   ebx
c000ecda:	e8 23 ff ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ecdf:	83 c4 20             	add    esp,0x20
c000ece2:	6a 00                	push   0x0
c000ece4:	68 8d 04 00 c0       	push   0xc000048d
c000ece9:	6a 08                	push   0x8
c000eceb:	53                   	push   ebx
c000ecec:	e8 11 ff ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ecf1:	6a 00                	push   0x0
c000ecf3:	68 95 04 00 c0       	push   0xc0000495
c000ecf8:	6a 09                	push   0x9
c000ecfa:	53                   	push   ebx
c000ecfb:	e8 02 ff ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ed00:	83 c4 20             	add    esp,0x20
c000ed03:	6a 00                	push   0x0
c000ed05:	68 9f 04 00 c0       	push   0xc000049f
c000ed0a:	6a 0a                	push   0xa
c000ed0c:	53                   	push   ebx
c000ed0d:	e8 f0 fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ed12:	6a 00                	push   0x0
c000ed14:	68 a7 04 00 c0       	push   0xc00004a7
c000ed19:	6a 0b                	push   0xb
c000ed1b:	53                   	push   ebx
c000ed1c:	e8 e1 fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ed21:	83 c4 20             	add    esp,0x20
c000ed24:	6a 00                	push   0x0
c000ed26:	68 af 04 00 c0       	push   0xc00004af
c000ed2b:	6a 0c                	push   0xc
c000ed2d:	53                   	push   ebx
c000ed2e:	e8 cf fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ed33:	6a 00                	push   0x0
c000ed35:	68 b7 04 00 c0       	push   0xc00004b7
c000ed3a:	6a 0d                	push   0xd
c000ed3c:	53                   	push   ebx
c000ed3d:	e8 c0 fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ed42:	83 c4 20             	add    esp,0x20
c000ed45:	6a 00                	push   0x0
c000ed47:	68 bf 04 00 c0       	push   0xc00004bf
c000ed4c:	6a 0e                	push   0xe
c000ed4e:	53                   	push   ebx
c000ed4f:	e8 ae fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ed54:	6a 00                	push   0x0
c000ed56:	68 c7 04 00 c0       	push   0xc00004c7
c000ed5b:	6a 0f                	push   0xf
c000ed5d:	53                   	push   ebx
c000ed5e:	e8 9f fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ed63:	83 c4 20             	add    esp,0x20
c000ed66:	6a 00                	push   0x0
c000ed68:	68 d1 04 00 c0       	push   0xc00004d1
c000ed6d:	6a 10                	push   0x10
c000ed6f:	53                   	push   ebx
c000ed70:	e8 8d fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ed75:	6a 00                	push   0x0
c000ed77:	68 db 04 00 c0       	push   0xc00004db
c000ed7c:	6a 11                	push   0x11
c000ed7e:	53                   	push   ebx
c000ed7f:	e8 7e fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ed84:	83 c4 20             	add    esp,0x20
c000ed87:	6a 00                	push   0x0
c000ed89:	68 e5 04 00 c0       	push   0xc00004e5
c000ed8e:	6a 12                	push   0x12
c000ed90:	53                   	push   ebx
c000ed91:	e8 6c fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ed96:	6a 01                	push   0x1
c000ed98:	68 ef 04 00 c0       	push   0xc00004ef
c000ed9d:	6a 60                	push   0x60
c000ed9f:	53                   	push   ebx
c000eda0:	e8 5d fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000eda5:	83 c4 20             	add    esp,0x20
c000eda8:	6a 00                	push   0x0
c000edaa:	68 f9 04 00 c0       	push   0xc00004f9
c000edaf:	6a 20                	push   0x20
c000edb1:	53                   	push   ebx
c000edb2:	e8 4b fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000edb7:	6a 00                	push   0x0
c000edb9:	68 03 05 00 c0       	push   0xc0000503
c000edbe:	6a 21                	push   0x21
c000edc0:	53                   	push   ebx
c000edc1:	e8 3c fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000edc6:	83 c4 20             	add    esp,0x20
c000edc9:	6a 00                	push   0x0
c000edcb:	68 0d 05 00 c0       	push   0xc000050d
c000edd0:	6a 22                	push   0x22
c000edd2:	53                   	push   ebx
c000edd3:	e8 2a fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000edd8:	6a 00                	push   0x0
c000edda:	68 17 05 00 c0       	push   0xc0000517
c000eddf:	6a 23                	push   0x23
c000ede1:	53                   	push   ebx
c000ede2:	e8 1b fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ede7:	83 c4 20             	add    esp,0x20
c000edea:	6a 00                	push   0x0
c000edec:	68 21 05 00 c0       	push   0xc0000521
c000edf1:	6a 24                	push   0x24
c000edf3:	53                   	push   ebx
c000edf4:	e8 09 fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000edf9:	6a 00                	push   0x0
c000edfb:	68 2b 05 00 c0       	push   0xc000052b
c000ee00:	6a 25                	push   0x25
c000ee02:	53                   	push   ebx
c000ee03:	e8 fa fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ee08:	83 c4 20             	add    esp,0x20
c000ee0b:	6a 00                	push   0x0
c000ee0d:	68 35 05 00 c0       	push   0xc0000535
c000ee12:	6a 26                	push   0x26
c000ee14:	53                   	push   ebx
c000ee15:	e8 e8 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ee1a:	6a 00                	push   0x0
c000ee1c:	68 3f 05 00 c0       	push   0xc000053f
c000ee21:	6a 27                	push   0x27
c000ee23:	53                   	push   ebx
c000ee24:	e8 d9 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ee29:	83 c4 20             	add    esp,0x20
c000ee2c:	6a 00                	push   0x0
c000ee2e:	68 49 05 00 c0       	push   0xc0000549
c000ee33:	6a 28                	push   0x28
c000ee35:	53                   	push   ebx
c000ee36:	e8 c7 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ee3b:	6a 00                	push   0x0
c000ee3d:	68 53 05 00 c0       	push   0xc0000553
c000ee42:	6a 29                	push   0x29
c000ee44:	53                   	push   ebx
c000ee45:	e8 b8 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ee4a:	83 c4 20             	add    esp,0x20
c000ee4d:	6a 00                	push   0x0
c000ee4f:	68 5d 05 00 c0       	push   0xc000055d
c000ee54:	6a 2a                	push   0x2a
c000ee56:	53                   	push   ebx
c000ee57:	e8 a6 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ee5c:	6a 00                	push   0x0
c000ee5e:	68 67 05 00 c0       	push   0xc0000567
c000ee63:	6a 2b                	push   0x2b
c000ee65:	53                   	push   ebx
c000ee66:	e8 97 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ee6b:	83 c4 20             	add    esp,0x20
c000ee6e:	6a 00                	push   0x0
c000ee70:	68 71 05 00 c0       	push   0xc0000571
c000ee75:	6a 2c                	push   0x2c
c000ee77:	53                   	push   ebx
c000ee78:	e8 85 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ee7d:	6a 00                	push   0x0
c000ee7f:	68 7b 05 00 c0       	push   0xc000057b
c000ee84:	6a 2d                	push   0x2d
c000ee86:	53                   	push   ebx
c000ee87:	e8 76 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ee8c:	83 c4 20             	add    esp,0x20
c000ee8f:	6a 00                	push   0x0
c000ee91:	68 85 05 00 c0       	push   0xc0000585
c000ee96:	6a 2e                	push   0x2e
c000ee98:	53                   	push   ebx
c000ee99:	e8 64 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ee9e:	6a 00                	push   0x0
c000eea0:	68 8f 05 00 c0       	push   0xc000058f
c000eea5:	6a 2f                	push   0x2f
c000eea7:	53                   	push   ebx
c000eea8:	e8 55 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000eead:	83 c4 20             	add    esp,0x20
c000eeb0:	6a 00                	push   0x0
c000eeb2:	68 99 05 00 c0       	push   0xc0000599
c000eeb7:	6a 30                	push   0x30
c000eeb9:	53                   	push   ebx
c000eeba:	e8 43 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000eebf:	6a 00                	push   0x0
c000eec1:	68 a3 05 00 c0       	push   0xc00005a3
c000eec6:	6a 31                	push   0x31
c000eec8:	53                   	push   ebx
c000eec9:	e8 34 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000eece:	83 c4 20             	add    esp,0x20
c000eed1:	6a 00                	push   0x0
c000eed3:	68 ad 05 00 c0       	push   0xc00005ad
c000eed8:	6a 32                	push   0x32
c000eeda:	53                   	push   ebx
c000eedb:	e8 22 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000eee0:	6a 00                	push   0x0
c000eee2:	68 b7 05 00 c0       	push   0xc00005b7
c000eee7:	6a 33                	push   0x33
c000eee9:	53                   	push   ebx
c000eeea:	e8 13 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000eeef:	83 c4 20             	add    esp,0x20
c000eef2:	6a 00                	push   0x0
c000eef4:	68 c1 05 00 c0       	push   0xc00005c1
c000eef9:	6a 34                	push   0x34
c000eefb:	53                   	push   ebx
c000eefc:	e8 01 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ef01:	6a 00                	push   0x0
c000ef03:	68 cb 05 00 c0       	push   0xc00005cb
c000ef08:	6a 35                	push   0x35
c000ef0a:	53                   	push   ebx
c000ef0b:	e8 f2 fc ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ef10:	83 c4 20             	add    esp,0x20
c000ef13:	6a 00                	push   0x0
c000ef15:	68 d5 05 00 c0       	push   0xc00005d5
c000ef1a:	6a 36                	push   0x36
c000ef1c:	53                   	push   ebx
c000ef1d:	e8 e0 fc ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ef22:	6a 00                	push   0x0
c000ef24:	68 df 05 00 c0       	push   0xc00005df
c000ef29:	6a 37                	push   0x37
c000ef2b:	53                   	push   ebx
c000ef2c:	e8 d1 fc ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ef31:	83 c4 20             	add    esp,0x20
c000ef34:	e8 fc 24 00 00       	call   c0011435 <Virt::getAKernelVAS()>
c000ef39:	52                   	push   edx
c000ef3a:	6a 03                	push   0x3
c000ef3c:	6a 02                	push   0x2
c000ef3e:	50                   	push   eax
c000ef3f:	e8 34 2b 00 00       	call   c0011a78 <VAS::allocatePages(int, int)>
c000ef44:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ef4b:	89 c6                	mov    esi,eax
c000ef4d:	e8 36 32 00 00       	call   c0012188 <operator new(unsigned long)>
c000ef52:	81 c6 00 20 00 00    	add    esi,0x2000
c000ef58:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef5b:	89 c7                	mov    edi,eax
c000ef5d:	e8 c0 1c 00 00       	call   c0010c22 <TSS::TSS()>
c000ef62:	83 c4 0c             	add    esp,0xc
c000ef65:	68 8d 04 00 c0       	push   0xc000048d
c000ef6a:	56                   	push   esi
c000ef6b:	57                   	push   edi
c000ef6c:	e8 f1 1c 00 00       	call   c0010c62 <TSS::setup(unsigned long, unsigned long)>
c000ef71:	59                   	pop    ecx
c000ef72:	89 c6                	mov    esi,eax
c000ef74:	5f                   	pop    edi
c000ef75:	6a 00                	push   0x0
c000ef77:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ef7b:	50                   	push   eax
c000ef7c:	e8 db fb ff ff       	call   c000eb5c <IDTEntry::IDTEntry(bool)>
c000ef81:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef85:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ef8a:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ef91:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ef97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef9b:	80 ce 05             	or     dh,0x5
c000ef9e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000efa1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000efa5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000efa9:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000efac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000efaf:	e8 86 fc ff ff       	call   c000ec3a <IDT::flush()>
c000efb4:	83 c4 20             	add    esp,0x20
c000efb7:	5b                   	pop    ebx
c000efb8:	5e                   	pop    esi
c000efb9:	5f                   	pop    edi
c000efba:	c3                   	ret    

c000efbb <sbrk>:
c000efbb:	55                   	push   ebp
c000efbc:	57                   	push   edi
c000efbd:	56                   	push   esi
c000efbe:	53                   	push   ebx
c000efbf:	83 ec 1c             	sub    esp,0x1c
c000efc2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000efc6:	85 db                	test   ebx,ebx
c000efc8:	74 37                	je     c000f001 <sbrk+0x46>
c000efca:	78 3f                	js     c000f00b <sbrk+0x50>
c000efcc:	e8 b3 89 00 00       	call   c0017984 <CPU::current()>
c000efd1:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000efd7:	83 e0 01             	and    eax,0x1
c000efda:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000efde:	a1 1c 96 02 c0       	mov    eax,ds:0xc002961c
c000efe3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000efe7:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000efed:	89 d8                	mov    eax,ebx
c000efef:	78 35                	js     c000f026 <sbrk+0x6b>
c000eff1:	c1 f8 0c             	sar    eax,0xc
c000eff4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eff8:	89 c7                	mov    edi,eax
c000effa:	be 00 00 00 00       	mov    esi,0x0
c000efff:	eb 3c                	jmp    c000f03d <sbrk+0x82>
c000f001:	a1 1c 96 02 c0       	mov    eax,ds:0xc002961c
c000f006:	e9 ad 00 00 00       	jmp    c000f0b8 <sbrk+0xfd>
c000f00b:	83 ec 08             	sub    esp,0x8
c000f00e:	53                   	push   ebx
c000f00f:	68 70 6d 02 c0       	push   0xc0026d70
c000f014:	e8 5e 32 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000f019:	83 c4 10             	add    esp,0x10
c000f01c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f021:	e9 92 00 00 00       	jmp    c000f0b8 <sbrk+0xfd>
c000f026:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000f02c:	eb c3                	jmp    c000eff1 <sbrk+0x36>
c000f02e:	81 05 1c 96 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002961c,0x1000
c000f038:	46                   	inc    esi
c000f039:	39 f7                	cmp    edi,esi
c000f03b:	74 34                	je     c000f071 <sbrk+0xb6>
c000f03d:	e8 f3 23 00 00       	call   c0011435 <Virt::getAKernelVAS()>
c000f042:	89 c3                	mov    ebx,eax
c000f044:	8b 2d 1c 96 02 c0    	mov    ebp,DWORD PTR ds:0xc002961c
c000f04a:	e8 c9 06 00 00       	call   c000f718 <Phys::allocatePage()>
c000f04f:	68 01 04 00 00       	push   0x401
c000f054:	55                   	push   ebp
c000f055:	50                   	push   eax
c000f056:	53                   	push   ebx
c000f057:	e8 1c 29 00 00       	call   c0011978 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f05c:	83 c4 10             	add    esp,0x10
c000f05f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f064:	74 c8                	je     c000f02e <sbrk+0x73>
c000f066:	8b 1d 1c 96 02 c0    	mov    ebx,DWORD PTR ds:0xc002961c
c000f06c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f06f:	eb bd                	jmp    c000f02e <sbrk+0x73>
c000f071:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f076:	74 48                	je     c000f0c0 <sbrk+0x105>
c000f078:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f07c:	89 d3                	mov    ebx,edx
c000f07e:	c1 eb 0a             	shr    ebx,0xa
c000f081:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f087:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f08d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f091:	c1 e0 0c             	shl    eax,0xc
c000f094:	01 d0                	add    eax,edx
c000f096:	c1 e8 0a             	shr    eax,0xa
c000f099:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f09e:	2d 00 00 40 00       	sub    eax,0x400000
c000f0a3:	39 c3                	cmp    ebx,eax
c000f0a5:	77 0d                	ja     c000f0b4 <sbrk+0xf9>
c000f0a7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f0aa:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f0b0:	39 d8                	cmp    eax,ebx
c000f0b2:	73 f3                	jae    c000f0a7 <sbrk+0xec>
c000f0b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0b8:	83 c4 1c             	add    esp,0x1c
c000f0bb:	5b                   	pop    ebx
c000f0bc:	5e                   	pop    esi
c000f0bd:	5f                   	pop    edi
c000f0be:	5d                   	pop    ebp
c000f0bf:	c3                   	ret    
c000f0c0:	e8 f0 61 01 00       	call   c00252b5 <CPU::readCR3()>
c000f0c5:	83 ec 0c             	sub    esp,0xc
c000f0c8:	50                   	push   eax
c000f0c9:	e8 f9 61 01 00       	call   c00252c7 <CPU::writeCR3(unsigned long)>
c000f0ce:	83 c4 10             	add    esp,0x10
c000f0d1:	eb e1                	jmp    c000f0b4 <sbrk+0xf9>

c000f0d3 <mmap>:
c000f0d3:	83 ec 18             	sub    esp,0x18
c000f0d6:	68 a0 6d 02 c0       	push   0xc0026da0
c000f0db:	e8 27 9a 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c000f0e0:	b8 00 00 00 00       	mov    eax,0x0
c000f0e5:	83 c4 1c             	add    esp,0x1c
c000f0e8:	c3                   	ret    

c000f0e9 <munmap>:
c000f0e9:	83 ec 18             	sub    esp,0x18
c000f0ec:	68 a5 6d 02 c0       	push   0xc0026da5
c000f0f1:	e8 11 9a 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c000f0f6:	b8 00 00 00 00       	mov    eax,0x0
c000f0fb:	83 c4 1c             	add    esp,0x1c
c000f0fe:	c3                   	ret    

c000f0ff <liballoc_lock()>:
c000f0ff:	83 ec 0c             	sub    esp,0xc
c000f102:	e8 53 c9 00 00       	call   c001ba5a <lockScheduler()>
c000f107:	b8 00 00 00 00       	mov    eax,0x0
c000f10c:	83 c4 0c             	add    esp,0xc
c000f10f:	c3                   	ret    

c000f110 <liballoc_unlock()>:
c000f110:	83 ec 0c             	sub    esp,0xc
c000f113:	e8 44 c9 00 00       	call   c001ba5c <unlockScheduler()>
c000f118:	b8 00 00 00 00       	mov    eax,0x0
c000f11d:	83 c4 0c             	add    esp,0xc
c000f120:	c3                   	ret    

c000f121 <liballoc_alloc(int)>:
c000f121:	83 ec 0c             	sub    esp,0xc
c000f124:	e8 0c 23 00 00       	call   c0011435 <Virt::getAKernelVAS()>
c000f129:	83 ec 04             	sub    esp,0x4
c000f12c:	6a 01                	push   0x1
c000f12e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f132:	50                   	push   eax
c000f133:	e8 40 29 00 00       	call   c0011a78 <VAS::allocatePages(int, int)>
c000f138:	83 c4 1c             	add    esp,0x1c
c000f13b:	c3                   	ret    

c000f13c <liballoc_free(void*, int)>:
c000f13c:	83 ec 0c             	sub    esp,0xc
c000f13f:	e8 f1 22 00 00       	call   c0011435 <Virt::getAKernelVAS()>
c000f144:	83 ec 08             	sub    esp,0x8
c000f147:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f14b:	50                   	push   eax
c000f14c:	e8 d1 25 00 00       	call   c0011722 <VAS::freeAllocatedPages(unsigned long)>
c000f151:	b8 00 00 00 00       	mov    eax,0x0
c000f156:	83 c4 1c             	add    esp,0x1c
c000f159:	c3                   	ret    

c000f15a <realloc>:
c000f15a:	83 ec 14             	sub    esp,0x14
c000f15d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f161:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f165:	e8 d4 22 ff ff       	call   c000143e <dlrealloc>
c000f16a:	83 c4 1c             	add    esp,0x1c
c000f16d:	c3                   	ret    

c000f16e <malloc>:
c000f16e:	83 ec 18             	sub    esp,0x18
c000f171:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f175:	e8 87 1d ff ff       	call   c0000f01 <dlmalloc>
c000f17a:	83 c4 1c             	add    esp,0x1c
c000f17d:	c3                   	ret    

c000f17e <free>:
c000f17e:	83 ec 18             	sub    esp,0x18
c000f181:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f185:	e8 1c 1a ff ff       	call   c0000ba6 <dlfree>
c000f18a:	83 c4 1c             	add    esp,0x1c
c000f18d:	c3                   	ret    

c000f18e <rfree>:
c000f18e:	83 ec 18             	sub    esp,0x18
c000f191:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f195:	e8 e4 ff ff ff       	call   c000f17e <free>
c000f19a:	83 c4 1c             	add    esp,0x1c
c000f19d:	c3                   	ret    

c000f19e <calloc>:
c000f19e:	56                   	push   esi
c000f19f:	53                   	push   ebx
c000f1a0:	83 ec 10             	sub    esp,0x10
c000f1a3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f1a7:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f1ac:	53                   	push   ebx
c000f1ad:	e8 bc ff ff ff       	call   c000f16e <malloc>
c000f1b2:	89 c6                	mov    esi,eax
c000f1b4:	83 c4 0c             	add    esp,0xc
c000f1b7:	53                   	push   ebx
c000f1b8:	6a 00                	push   0x0
c000f1ba:	50                   	push   eax
c000f1bb:	e8 05 15 ff ff       	call   c00006c5 <memset>
c000f1c0:	89 f0                	mov    eax,esi
c000f1c2:	83 c4 14             	add    esp,0x14
c000f1c5:	5b                   	pop    ebx
c000f1c6:	5e                   	pop    esi
c000f1c7:	c3                   	ret    

c000f1c8 <hwTextMode_loadInData(VgaText*)>:
c000f1c8:	57                   	push   edi
c000f1c9:	56                   	push   esi
c000f1ca:	53                   	push   ebx
c000f1cb:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f1cf:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000f1d5:	85 c0                	test   eax,eax
c000f1d7:	7e 30                	jle    c000f209 <hwTextMode_loadInData(VgaText*)+0x41>
c000f1d9:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000f1dc:	31 f6                	xor    esi,esi
c000f1de:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000f1e1:	31 c0                	xor    eax,eax
c000f1e3:	c1 e1 05             	shl    ecx,0x5
c000f1e6:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000f1ec:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000f1f0:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000f1f4:	40                   	inc    eax
c000f1f5:	83 f8 50             	cmp    eax,0x50
c000f1f8:	75 f2                	jne    c000f1ec <hwTextMode_loadInData(VgaText*)+0x24>
c000f1fa:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000f200:	46                   	inc    esi
c000f201:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f207:	7f d5                	jg     c000f1de <hwTextMode_loadInData(VgaText*)+0x16>
c000f209:	5b                   	pop    ebx
c000f20a:	5e                   	pop    esi
c000f20b:	5f                   	pop    edi
c000f20c:	c3                   	ret    

c000f20d <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f20d:	56                   	push   esi
c000f20e:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000f213:	53                   	push   ebx
c000f214:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f218:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f21c:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f222:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000f228:	c1 e0 04             	shl    eax,0x4
c000f22b:	83 e6 0f             	and    esi,0xf
c000f22e:	0f b6 c0             	movzx  eax,al
c000f231:	41                   	inc    ecx
c000f232:	09 f0                	or     eax,esi
c000f234:	83 c2 02             	add    edx,0x2
c000f237:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000f23b:	c1 e0 08             	shl    eax,0x8
c000f23e:	09 f0                	or     eax,esi
c000f240:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f244:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000f24a:	75 d0                	jne    c000f21c <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000f24c:	5b                   	pop    ebx
c000f24d:	5e                   	pop    esi
c000f24e:	c3                   	ret    

c000f24f <hwTextMode_showCursor(VgaText*, bool)>:
c000f24f:	56                   	push   esi
c000f250:	53                   	push   ebx
c000f251:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f256:	74 38                	je     c000f290 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f258:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f25d:	b0 0a                	mov    al,0xa
c000f25f:	89 da                	mov    edx,ebx
c000f261:	ee                   	out    dx,al
c000f262:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f267:	89 ca                	mov    edx,ecx
c000f269:	ec                   	in     al,dx
c000f26a:	b2 0f                	mov    dl,0xf
c000f26c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f270:	83 e0 c0             	and    eax,0xffffffc0
c000f273:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f279:	09 d0                	or     eax,edx
c000f27b:	89 ca                	mov    edx,ecx
c000f27d:	ee                   	out    dx,al
c000f27e:	b0 0b                	mov    al,0xb
c000f280:	89 da                	mov    edx,ebx
c000f282:	ee                   	out    dx,al
c000f283:	89 ca                	mov    edx,ecx
c000f285:	ec                   	in     al,dx
c000f286:	83 e0 e0             	and    eax,0xffffffe0
c000f289:	83 c8 0f             	or     eax,0xf
c000f28c:	ee                   	out    dx,al
c000f28d:	5b                   	pop    ebx
c000f28e:	5e                   	pop    esi
c000f28f:	c3                   	ret    
c000f290:	b0 0a                	mov    al,0xa
c000f292:	ba d4 03 00 00       	mov    edx,0x3d4
c000f297:	ee                   	out    dx,al
c000f298:	b0 20                	mov    al,0x20
c000f29a:	ba d5 03 00 00       	mov    edx,0x3d5
c000f29f:	ee                   	out    dx,al
c000f2a0:	5b                   	pop    ebx
c000f2a1:	5e                   	pop    esi
c000f2a2:	c3                   	ret    

c000f2a3 <hwTextMode_update(VgaText*)>:
c000f2a3:	c3                   	ret    

c000f2a4 <hwTextMode_updateCursor(VgaText*)>:
c000f2a4:	56                   	push   esi
c000f2a5:	b9 19 00 00 00       	mov    ecx,0x19
c000f2aa:	53                   	push   ebx
c000f2ab:	be d4 03 00 00       	mov    esi,0x3d4
c000f2b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2b4:	89 f2                	mov    edx,esi
c000f2b6:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f2bc:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f2c2:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f2c5:	c1 e1 04             	shl    ecx,0x4
c000f2c8:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f2ce:	b0 0f                	mov    al,0xf
c000f2d0:	ee                   	out    dx,al
c000f2d1:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f2d6:	88 c8                	mov    al,cl
c000f2d8:	89 da                	mov    edx,ebx
c000f2da:	ee                   	out    dx,al
c000f2db:	b0 0e                	mov    al,0xe
c000f2dd:	89 f2                	mov    edx,esi
c000f2df:	ee                   	out    dx,al
c000f2e0:	89 c8                	mov    eax,ecx
c000f2e2:	89 da                	mov    edx,ebx
c000f2e4:	66 c1 e8 08          	shr    ax,0x8
c000f2e8:	ee                   	out    dx,al
c000f2e9:	5b                   	pop    ebx
c000f2ea:	5e                   	pop    esi
c000f2eb:	c3                   	ret    

c000f2ec <hwTextMode_disableBlink(VgaText*, bool)>:
c000f2ec:	ba da 03 00 00       	mov    edx,0x3da
c000f2f1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f2f6:	75 18                	jne    c000f310 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f2f8:	ec                   	in     al,dx
c000f2f9:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f2fe:	b0 30                	mov    al,0x30
c000f300:	89 ca                	mov    edx,ecx
c000f302:	ee                   	out    dx,al
c000f303:	ba c1 03 00 00       	mov    edx,0x3c1
c000f308:	ec                   	in     al,dx
c000f309:	83 c8 08             	or     eax,0x8
c000f30c:	89 ca                	mov    edx,ecx
c000f30e:	ee                   	out    dx,al
c000f30f:	c3                   	ret    
c000f310:	ec                   	in     al,dx
c000f311:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f316:	b0 30                	mov    al,0x30
c000f318:	89 ca                	mov    edx,ecx
c000f31a:	ee                   	out    dx,al
c000f31b:	ba c1 03 00 00       	mov    edx,0x3c1
c000f320:	ec                   	in     al,dx
c000f321:	83 e0 f7             	and    eax,0xfffffff7
c000f324:	89 ca                	mov    edx,ecx
c000f326:	ee                   	out    dx,al
c000f327:	c3                   	ret    

c000f328 <hwTextMode_scrollScreen(VgaText*)>:
c000f328:	55                   	push   ebp
c000f329:	bd 02 00 00 00       	mov    ebp,0x2
c000f32e:	57                   	push   edi
c000f32f:	56                   	push   esi
c000f330:	53                   	push   ebx
c000f331:	83 ec 1c             	sub    esp,0x1c
c000f334:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000f33c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f340:	31 c0                	xor    eax,eax
c000f342:	eb 0b                	jmp    c000f34f <hwTextMode_scrollScreen(VgaText*)+0x27>
c000f344:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f34a:	74 57                	je     c000f3a3 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f34c:	43                   	inc    ebx
c000f34d:	89 f0                	mov    eax,esi
c000f34f:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f355:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f35b:	88 13                	mov    BYTE PTR [ebx],dl
c000f35d:	8d 70 01             	lea    esi,[eax+0x1]
c000f360:	83 fd 18             	cmp    ebp,0x18
c000f363:	75 df                	jne    c000f344 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000f365:	a8 01                	test   al,0x1
c000f367:	75 13                	jne    c000f37c <hwTextMode_scrollScreen(VgaText*)+0x54>
c000f369:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f36c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f372:	75 d8                	jne    c000f34c <hwTextMode_scrollScreen(VgaText*)+0x24>
c000f374:	83 c4 1c             	add    esp,0x1c
c000f377:	5b                   	pop    ebx
c000f378:	5e                   	pop    esi
c000f379:	5f                   	pop    edi
c000f37a:	5d                   	pop    ebp
c000f37b:	c3                   	ret    
c000f37c:	83 ec 08             	sub    esp,0x8
c000f37f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f383:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f38a:	50                   	push   eax
c000f38b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f38f:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f396:	50                   	push   eax
c000f397:	e8 66 0b 00 00       	call   c000ff02 <VgaText::combineColours(unsigned char, unsigned char)>
c000f39c:	83 c4 10             	add    esp,0x10
c000f39f:	88 07                	mov    BYTE PTR [edi],al
c000f3a1:	eb c9                	jmp    c000f36c <hwTextMode_scrollScreen(VgaText*)+0x44>
c000f3a3:	45                   	inc    ebp
c000f3a4:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f3ac:	eb 8e                	jmp    c000f33c <hwTextMode_scrollScreen(VgaText*)+0x14>

c000f3ae <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f3ae:	56                   	push   esi
c000f3af:	53                   	push   ebx
c000f3b0:	83 ec 0c             	sub    esp,0xc
c000f3b3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f3b7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f3bb:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f3c0:	50                   	push   eax
c000f3c1:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f3c6:	50                   	push   eax
c000f3c7:	e8 36 0b 00 00       	call   c000ff02 <VgaText::combineColours(unsigned char, unsigned char)>
c000f3cc:	5a                   	pop    edx
c000f3cd:	0f b6 c0             	movzx  eax,al
c000f3d0:	59                   	pop    ecx
c000f3d1:	50                   	push   eax
c000f3d2:	89 f0                	mov    eax,esi
c000f3d4:	0f be f0             	movsx  esi,al
c000f3d7:	56                   	push   esi
c000f3d8:	e8 cb 0b 00 00       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c000f3dd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f3e1:	ba 19 00 00 00       	mov    edx,0x19
c000f3e6:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f3ec:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f3ef:	8d 14 92             	lea    edx,[edx+edx*4]
c000f3f2:	c1 e1 04             	shl    ecx,0x4
c000f3f5:	c1 e2 04             	shl    edx,0x4
c000f3f8:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f3fc:	01 ca                	add    edx,ecx
c000f3fe:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f406:	83 c4 14             	add    esp,0x14
c000f409:	5b                   	pop    ebx
c000f40a:	5e                   	pop    esi
c000f40b:	c3                   	ret    

c000f40c <setupTextMode()>:
c000f40c:	c7 05 38 a7 02 c0 ec f2 00 c0 	mov    DWORD PTR ds:0xc002a738,0xc000f2ec
c000f416:	c7 05 24 a7 02 c0 c8 f1 00 c0 	mov    DWORD PTR ds:0xc002a724,0xc000f1c8
c000f420:	c7 05 20 a7 02 c0 0d f2 00 c0 	mov    DWORD PTR ds:0xc002a720,0xc000f20d
c000f42a:	c7 05 2c a7 02 c0 28 f3 00 c0 	mov    DWORD PTR ds:0xc002a72c,0xc000f328
c000f434:	c7 05 34 a7 02 c0 4f f2 00 c0 	mov    DWORD PTR ds:0xc002a734,0xc000f24f
c000f43e:	c7 05 28 a7 02 c0 a3 f2 00 c0 	mov    DWORD PTR ds:0xc002a728,0xc000f2a3
c000f448:	c7 05 30 a7 02 c0 a4 f2 00 c0 	mov    DWORD PTR ds:0xc002a730,0xc000f2a4
c000f452:	c7 05 3c a7 02 c0 ae f3 00 c0 	mov    DWORD PTR ds:0xc002a73c,0xc000f3ae
c000f45c:	c3                   	ret    

c000f45d <kernel_main>:
c000f45d:	57                   	push   edi
c000f45e:	bf f9 03 00 00       	mov    edi,0x3f9
c000f463:	56                   	push   esi
c000f464:	31 f6                	xor    esi,esi
c000f466:	53                   	push   ebx
c000f467:	83 ec 10             	sub    esp,0x10
c000f46a:	e8 ed 08 00 00       	call   c000fd5c <installVgaTextImplementation()>
c000f46f:	e8 98 ff ff ff       	call   c000f40c <setupTextMode()>
c000f474:	89 f0                	mov    eax,esi
c000f476:	89 fa                	mov    edx,edi
c000f478:	ee                   	out    dx,al
c000f479:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f47e:	b0 80                	mov    al,0x80
c000f480:	89 da                	mov    edx,ebx
c000f482:	ee                   	out    dx,al
c000f483:	b1 03                	mov    cl,0x3
c000f485:	ba f8 03 00 00       	mov    edx,0x3f8
c000f48a:	88 c8                	mov    al,cl
c000f48c:	ee                   	out    dx,al
c000f48d:	89 f0                	mov    eax,esi
c000f48f:	89 fa                	mov    edx,edi
c000f491:	ee                   	out    dx,al
c000f492:	88 c8                	mov    al,cl
c000f494:	89 da                	mov    edx,ebx
c000f496:	ee                   	out    dx,al
c000f497:	b0 c7                	mov    al,0xc7
c000f499:	ba fa 03 00 00       	mov    edx,0x3fa
c000f49e:	ee                   	out    dx,al
c000f49f:	b0 0b                	mov    al,0xb
c000f4a1:	ba fc 03 00 00       	mov    edx,0x3fc
c000f4a6:	ee                   	out    dx,al
c000f4a7:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f4ac:	83 ec 0c             	sub    esp,0xc
c000f4af:	05 ff 0f 00 00       	add    eax,0xfff
c000f4b4:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4b9:	50                   	push   eax
c000f4ba:	e8 59 03 00 00       	call   c000f818 <Phys::physicalMemorySetup(unsigned int)>
c000f4bf:	e8 f2 1e 00 00       	call   c00113b6 <Virt::virtualMemorySetup()>
c000f4c4:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f4ca:	83 c4 10             	add    esp,0x10
c000f4cd:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f4d3:	75 0e                	jne    c000f4e3 <kernel_main+0x86>
c000f4d5:	89 d8                	mov    eax,ebx
c000f4d7:	25 48 03 00 00       	and    eax,0x348
c000f4dc:	3d 00 03 00 00       	cmp    eax,0x300
c000f4e1:	74 10                	je     c000f4f3 <kernel_main+0x96>
c000f4e3:	83 ec 0c             	sub    esp,0xc
c000f4e6:	68 fb 82 02 c0       	push   0xc00282fb
c000f4eb:	e8 17 96 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c000f4f0:	83 c4 10             	add    esp,0x10
c000f4f3:	83 ec 0c             	sub    esp,0xc
c000f4f6:	89 1d a0 a6 02 c0    	mov    DWORD PTR ds:0xc002a6a0,ebx
c000f4fc:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f500:	53                   	push   ebx
c000f501:	e8 5a 20 00 00       	call   c0011560 <VAS::VAS()>
c000f506:	89 1d e4 a7 02 c0    	mov    DWORD PTR ds:0xc002a7e4,ebx
c000f50c:	e8 0f 0b ff ff       	call   c0000020 <callGlobalConstructors>
c000f511:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f518:	e8 6b 2c 00 00       	call   c0012188 <operator new(unsigned long)>
c000f51d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f520:	89 c6                	mov    esi,eax
c000f522:	e8 4f ea ff ff       	call   c000df76 <Computer::Computer()>
c000f527:	6a 00                	push   0x0
c000f529:	89 35 88 a6 02 c0    	mov    DWORD PTR ds:0xc002a688,esi
c000f52f:	6a 00                	push   0x0
c000f531:	6a 00                	push   0x0
c000f533:	56                   	push   esi
c000f534:	e8 77 f2 ff ff       	call   c000e7b0 <Computer::open(int, int, void*)>
c000f539:	83 c4 14             	add    esp,0x14
c000f53c:	53                   	push   ebx
c000f53d:	e8 ca 22 00 00       	call   c001180c <VAS::~VAS()>
c000f542:	c7 04 24 ac 6d 02 c0 	mov    DWORD PTR [esp],0xc0026dac
c000f549:	e8 b9 95 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c000f54e:	83 c4 20             	add    esp,0x20
c000f551:	5b                   	pop    ebx
c000f552:	5e                   	pop    esi
c000f553:	5f                   	pop    edi
c000f554:	c3                   	ret    

c000f555 <Phys::allocateDMA(unsigned long)>:
c000f555:	55                   	push   ebp
c000f556:	31 d2                	xor    edx,edx
c000f558:	57                   	push   edi
c000f559:	31 ed                	xor    ebp,ebp
c000f55b:	56                   	push   esi
c000f55c:	31 c9                	xor    ecx,ecx
c000f55e:	53                   	push   ebx
c000f55f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f563:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f569:	31 c0                	xor    eax,eax
c000f56b:	c1 ee 0c             	shr    esi,0xc
c000f56e:	eb 17                	jmp    c000f587 <Phys::allocateDMA(unsigned long)+0x32>
c000f570:	85 c9                	test   ecx,ecx
c000f572:	75 04                	jne    c000f578 <Phys::allocateDMA(unsigned long)+0x23>
c000f574:	89 d5                	mov    ebp,edx
c000f576:	89 d0                	mov    eax,edx
c000f578:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f57b:	39 de                	cmp    esi,ebx
c000f57d:	74 20                	je     c000f59f <Phys::allocateDMA(unsigned long)+0x4a>
c000f57f:	42                   	inc    edx
c000f580:	89 d9                	mov    ecx,ebx
c000f582:	83 fa 2f             	cmp    edx,0x2f
c000f585:	7f 11                	jg     c000f598 <Phys::allocateDMA(unsigned long)+0x43>
c000f587:	80 ba e0 a6 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd5920],0x0
c000f58e:	74 e0                	je     c000f570 <Phys::allocateDMA(unsigned long)+0x1b>
c000f590:	31 c9                	xor    ecx,ecx
c000f592:	42                   	inc    edx
c000f593:	83 fa 2f             	cmp    edx,0x2f
c000f596:	7e ef                	jle    c000f587 <Phys::allocateDMA(unsigned long)+0x32>
c000f598:	5b                   	pop    ebx
c000f599:	31 c0                	xor    eax,eax
c000f59b:	5e                   	pop    esi
c000f59c:	5f                   	pop    edi
c000f59d:	5d                   	pop    ebp
c000f59e:	c3                   	ret    
c000f59f:	8d 14 30             	lea    edx,[eax+esi*1]
c000f5a2:	89 d7                	mov    edi,edx
c000f5a4:	4f                   	dec    edi
c000f5a5:	79 03                	jns    c000f5aa <Phys::allocateDMA(unsigned long)+0x55>
c000f5a7:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f5aa:	c1 ff 04             	sar    edi,0x4
c000f5ad:	89 c2                	mov    edx,eax
c000f5af:	c1 fa 04             	sar    edx,0x4
c000f5b2:	39 fa                	cmp    edx,edi
c000f5b4:	75 2f                	jne    c000f5e5 <Phys::allocateDMA(unsigned long)+0x90>
c000f5b6:	85 db                	test   ebx,ebx
c000f5b8:	74 1a                	je     c000f5d4 <Phys::allocateDMA(unsigned long)+0x7f>
c000f5ba:	be e0 a6 02 c0       	mov    esi,0xc002a6e0
c000f5bf:	8d 90 e0 a6 02 c0    	lea    edx,[eax-0x3ffd5920]
c000f5c5:	f7 d6                	not    esi
c000f5c7:	29 c6                	sub    esi,eax
c000f5c9:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f5cc:	42                   	inc    edx
c000f5cd:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f5d0:	39 d9                	cmp    ecx,ebx
c000f5d2:	7f f5                	jg     c000f5c9 <Phys::allocateDMA(unsigned long)+0x74>
c000f5d4:	85 ff                	test   edi,edi
c000f5d6:	74 13                	je     c000f5eb <Phys::allocateDMA(unsigned long)+0x96>
c000f5d8:	5b                   	pop    ebx
c000f5d9:	05 50 20 0c 00       	add    eax,0xc2050
c000f5de:	5e                   	pop    esi
c000f5df:	c1 e0 0c             	shl    eax,0xc
c000f5e2:	5f                   	pop    edi
c000f5e3:	5d                   	pop    ebp
c000f5e4:	c3                   	ret    
c000f5e5:	89 ea                	mov    edx,ebp
c000f5e7:	31 c9                	xor    ecx,ecx
c000f5e9:	eb a7                	jmp    c000f592 <Phys::allocateDMA(unsigned long)+0x3d>
c000f5eb:	5b                   	pop    ebx
c000f5ec:	c1 e0 0c             	shl    eax,0xc
c000f5ef:	5e                   	pop    esi
c000f5f0:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f5f5:	5f                   	pop    edi
c000f5f6:	5d                   	pop    ebp
c000f5f7:	c3                   	ret    

c000f5f8 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f5f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f5fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f600:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f606:	c1 e9 0c             	shr    ecx,0xc
c000f609:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f60e:	76 25                	jbe    c000f635 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f610:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f615:	c1 e8 0c             	shr    eax,0xc
c000f618:	8d 50 10             	lea    edx,[eax+0x10]
c000f61b:	85 c9                	test   ecx,ecx
c000f61d:	74 15                	je     c000f634 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f61f:	8d 82 e0 a6 02 c0    	lea    eax,[edx-0x3ffd5920]
c000f625:	8d 94 11 e0 a6 02 c0 	lea    edx,[ecx+edx*1-0x3ffd5920]
c000f62c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f62f:	40                   	inc    eax
c000f630:	39 d0                	cmp    eax,edx
c000f632:	75 f8                	jne    c000f62c <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f634:	c3                   	ret    
c000f635:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f63b:	c1 ea 0c             	shr    edx,0xc
c000f63e:	eb db                	jmp    c000f61b <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f640 <Phys::setPageState(unsigned long, bool)>:
c000f640:	56                   	push   esi
c000f641:	ba 01 00 00 00       	mov    edx,0x1
c000f646:	53                   	push   ebx
c000f647:	8b 35 20 96 02 c0    	mov    esi,DWORD PTR ds:0xc0029620
c000f64d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f655:	89 c8                	mov    eax,ecx
c000f657:	83 e1 07             	and    ecx,0x7
c000f65a:	c1 e8 03             	shr    eax,0x3
c000f65d:	d3 e3                	shl    ebx,cl
c000f65f:	01 c6                	add    esi,eax
c000f661:	d3 e2                	shl    edx,cl
c000f663:	f7 d2                	not    edx
c000f665:	20 16                	and    BYTE PTR [esi],dl
c000f667:	03 05 20 96 02 c0    	add    eax,DWORD PTR ds:0xc0029620
c000f66d:	08 18                	or     BYTE PTR [eax],bl
c000f66f:	5b                   	pop    ebx
c000f670:	5e                   	pop    esi
c000f671:	c3                   	ret    

c000f672 <Phys::getPageState(unsigned long)>:
c000f672:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f676:	8b 15 20 96 02 c0    	mov    edx,DWORD PTR ds:0xc0029620
c000f67c:	89 c8                	mov    eax,ecx
c000f67e:	83 e1 07             	and    ecx,0x7
c000f681:	c1 e8 03             	shr    eax,0x3
c000f684:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f688:	d3 f8                	sar    eax,cl
c000f68a:	83 e0 01             	and    eax,0x1
c000f68d:	c3                   	ret    

c000f68e <Phys::freePage(unsigned long)>:
c000f68e:	53                   	push   ebx
c000f68f:	83 ec 08             	sub    esp,0x8
c000f692:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f696:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f69c:	76 57                	jbe    c000f6f5 <Phys::freePage(unsigned long)+0x67>
c000f69e:	c1 eb 0c             	shr    ebx,0xc
c000f6a1:	53                   	push   ebx
c000f6a2:	e8 cb ff ff ff       	call   c000f672 <Phys::getPageState(unsigned long)>
c000f6a7:	5a                   	pop    edx
c000f6a8:	84 c0                	test   al,al
c000f6aa:	74 5b                	je     c000f707 <Phys::freePage(unsigned long)+0x79>
c000f6ac:	a1 cc a6 02 c0       	mov    eax,ds:0xc002a6cc
c000f6b1:	48                   	dec    eax
c000f6b2:	a3 cc a6 02 c0       	mov    ds:0xc002a6cc,eax
c000f6b7:	8d 04 80             	lea    eax,[eax+eax*4]
c000f6ba:	8d 04 80             	lea    eax,[eax+eax*4]
c000f6bd:	c1 e0 02             	shl    eax,0x2
c000f6c0:	99                   	cdq    
c000f6c1:	f7 3d d0 a6 02 c0    	idiv   DWORD PTR ds:0xc002a6d0
c000f6c7:	39 05 c8 a6 02 c0    	cmp    DWORD PTR ds:0xc002a6c8,eax
c000f6cd:	75 13                	jne    c000f6e2 <Phys::freePage(unsigned long)+0x54>
c000f6cf:	83 ec 08             	sub    esp,0x8
c000f6d2:	6a 00                	push   0x0
c000f6d4:	53                   	push   ebx
c000f6d5:	e8 66 ff ff ff       	call   c000f640 <Phys::setPageState(unsigned long, bool)>
c000f6da:	83 c4 10             	add    esp,0x10
c000f6dd:	83 c4 08             	add    esp,0x8
c000f6e0:	5b                   	pop    ebx
c000f6e1:	c3                   	ret    
c000f6e2:	83 ec 0c             	sub    esp,0xc
c000f6e5:	a3 c8 a6 02 c0       	mov    ds:0xc002a6c8,eax
c000f6ea:	50                   	push   eax
c000f6eb:	e8 00 0a 00 00       	call   c00100f0 <VgaText::updateRAMUsageDisplay(int)>
c000f6f0:	83 c4 10             	add    esp,0x10
c000f6f3:	eb da                	jmp    c000f6cf <Phys::freePage(unsigned long)+0x41>
c000f6f5:	68 00 10 00 00       	push   0x1000
c000f6fa:	53                   	push   ebx
c000f6fb:	e8 f8 fe ff ff       	call   c000f5f8 <Phys::freeDMA(unsigned long, unsigned long)>
c000f700:	59                   	pop    ecx
c000f701:	5b                   	pop    ebx
c000f702:	83 c4 08             	add    esp,0x8
c000f705:	5b                   	pop    ebx
c000f706:	c3                   	ret    
c000f707:	c7 44 24 10 c7 6d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026dc7
c000f70f:	83 c4 08             	add    esp,0x8
c000f712:	5b                   	pop    ebx
c000f713:	e9 ef 93 00 00       	jmp    c0018b07 <Krnl::panic(char const*)>

c000f718 <Phys::allocatePage()>:
c000f718:	56                   	push   esi
c000f719:	53                   	push   ebx
c000f71a:	51                   	push   ecx
c000f71b:	8b 35 c0 a6 02 c0    	mov    esi,DWORD PTR ds:0xc002a6c0
c000f721:	89 f3                	mov    ebx,esi
c000f723:	eb 0a                	jmp    c000f72f <Phys::allocatePage()+0x17>
c000f725:	89 1d c0 a6 02 c0    	mov    DWORD PTR ds:0xc002a6c0,ebx
c000f72b:	39 de                	cmp    esi,ebx
c000f72d:	74 24                	je     c000f753 <Phys::allocatePage()+0x3b>
c000f72f:	53                   	push   ebx
c000f730:	e8 3d ff ff ff       	call   c000f672 <Phys::getPageState(unsigned long)>
c000f735:	5a                   	pop    edx
c000f736:	84 c0                	test   al,al
c000f738:	74 5a                	je     c000f794 <Phys::allocatePage()+0x7c>
c000f73a:	43                   	inc    ebx
c000f73b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f741:	75 e2                	jne    c000f725 <Phys::allocatePage()+0xd>
c000f743:	31 db                	xor    ebx,ebx
c000f745:	c7 05 c0 a6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a6c0,0x0
c000f74f:	39 de                	cmp    esi,ebx
c000f751:	75 dc                	jne    c000f72f <Phys::allocatePage()+0x17>
c000f753:	83 ec 0c             	sub    esp,0xc
c000f756:	68 dd 6d 02 c0       	push   0xc0026ddd
c000f75b:	e8 17 2b 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000f760:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000f767:	e8 e9 fd ff ff       	call   c000f555 <Phys::allocateDMA(unsigned long)>
c000f76c:	83 c4 10             	add    esp,0x10
c000f76f:	85 c0                	test   eax,eax
c000f771:	75 56                	jne    c000f7c9 <Phys::allocatePage()+0xb1>
c000f773:	83 ec 0c             	sub    esp,0xc
c000f776:	68 ee 6d 02 c0       	push   0xc0026dee
c000f77b:	e8 87 93 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c000f780:	83 c4 10             	add    esp,0x10
c000f783:	8b 1d c0 a6 02 c0    	mov    ebx,DWORD PTR ds:0xc002a6c0
c000f789:	53                   	push   ebx
c000f78a:	e8 e3 fe ff ff       	call   c000f672 <Phys::getPageState(unsigned long)>
c000f78f:	5a                   	pop    edx
c000f790:	84 c0                	test   al,al
c000f792:	75 a6                	jne    c000f73a <Phys::allocatePage()+0x22>
c000f794:	6a 01                	push   0x1
c000f796:	53                   	push   ebx
c000f797:	e8 a4 fe ff ff       	call   c000f640 <Phys::setPageState(unsigned long, bool)>
c000f79c:	a1 cc a6 02 c0       	mov    eax,ds:0xc002a6cc
c000f7a1:	59                   	pop    ecx
c000f7a2:	40                   	inc    eax
c000f7a3:	5b                   	pop    ebx
c000f7a4:	a3 cc a6 02 c0       	mov    ds:0xc002a6cc,eax
c000f7a9:	8d 04 80             	lea    eax,[eax+eax*4]
c000f7ac:	8d 04 80             	lea    eax,[eax+eax*4]
c000f7af:	c1 e0 02             	shl    eax,0x2
c000f7b2:	99                   	cdq    
c000f7b3:	f7 3d d0 a6 02 c0    	idiv   DWORD PTR ds:0xc002a6d0
c000f7b9:	39 05 c8 a6 02 c0    	cmp    DWORD PTR ds:0xc002a6c8,eax
c000f7bf:	75 0c                	jne    c000f7cd <Phys::allocatePage()+0xb5>
c000f7c1:	a1 c0 a6 02 c0       	mov    eax,ds:0xc002a6c0
c000f7c6:	c1 e0 0c             	shl    eax,0xc
c000f7c9:	5a                   	pop    edx
c000f7ca:	5b                   	pop    ebx
c000f7cb:	5e                   	pop    esi
c000f7cc:	c3                   	ret    
c000f7cd:	83 ec 0c             	sub    esp,0xc
c000f7d0:	a3 c8 a6 02 c0       	mov    ds:0xc002a6c8,eax
c000f7d5:	50                   	push   eax
c000f7d6:	e8 15 09 00 00       	call   c00100f0 <VgaText::updateRAMUsageDisplay(int)>
c000f7db:	83 c4 10             	add    esp,0x10
c000f7de:	eb e1                	jmp    c000f7c1 <Phys::allocatePage()+0xa9>

c000f7e0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000f7e0:	56                   	push   esi
c000f7e1:	53                   	push   ebx
c000f7e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f7e6:	39 1d c4 a6 02 c0    	cmp    DWORD PTR ds:0xc002a6c4,ebx
c000f7ec:	73 06                	jae    c000f7f4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000f7ee:	89 1d c4 a6 02 c0    	mov    DWORD PTR ds:0xc002a6c4,ebx
c000f7f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7f8:	c1 eb 0c             	shr    ebx,0xc
c000f7fb:	c1 e8 0c             	shr    eax,0xc
c000f7fe:	39 d8                	cmp    eax,ebx
c000f800:	73 13                	jae    c000f815 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000f802:	6a 00                	push   0x0
c000f804:	8d 70 01             	lea    esi,[eax+0x1]
c000f807:	50                   	push   eax
c000f808:	e8 33 fe ff ff       	call   c000f640 <Phys::setPageState(unsigned long, bool)>
c000f80d:	5a                   	pop    edx
c000f80e:	89 f0                	mov    eax,esi
c000f810:	59                   	pop    ecx
c000f811:	39 f3                	cmp    ebx,esi
c000f813:	75 ed                	jne    c000f802 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000f815:	5b                   	pop    ebx
c000f816:	5e                   	pop    esi
c000f817:	c3                   	ret    

c000f818 <Phys::physicalMemorySetup(unsigned int)>:
c000f818:	55                   	push   ebp
c000f819:	57                   	push   edi
c000f81a:	56                   	push   esi
c000f81b:	53                   	push   ebx
c000f81c:	31 db                	xor    ebx,ebx
c000f81e:	83 ec 40             	sub    esp,0x40
c000f821:	6a 30                	push   0x30
c000f823:	6a 00                	push   0x0
c000f825:	68 e0 a6 02 c0       	push   0xc002a6e0
c000f82a:	e8 96 0e ff ff       	call   c00006c5 <memset>
c000f82f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f833:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f838:	05 00 10 00 00       	add    eax,0x1000
c000f83d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f841:	83 c4 10             	add    esp,0x10
c000f844:	83 ec 08             	sub    esp,0x8
c000f847:	6a 01                	push   0x1
c000f849:	53                   	push   ebx
c000f84a:	43                   	inc    ebx
c000f84b:	e8 f0 fd ff ff       	call   c000f640 <Phys::setPageState(unsigned long, bool)>
c000f850:	83 c4 10             	add    esp,0x10
c000f853:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f859:	75 e9                	jne    c000f844 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000f85b:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000f862:	66 85 c0             	test   ax,ax
c000f865:	0f 84 8e 01 00 00    	je     c000f9f9 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000f86b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f86f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f877:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f87b:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000f880:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f884:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f88c:	eb 15                	jmp    c000f8a3 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000f88e:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000f892:	83 c3 18             	add    ebx,0x18
c000f895:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f899:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000f89d:	0f 84 66 01 00 00    	je     c000fa09 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000f8a3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f8a6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f8a9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f8ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f8b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f8b4:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f8b6:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f8b9:	01 f0                	add    eax,esi
c000f8bb:	55                   	push   ebp
c000f8bc:	11 fa                	adc    edx,edi
c000f8be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f8c2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f8c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f8ca:	56                   	push   esi
c000f8cb:	68 28 6e 02 c0       	push   0xc0026e28
c000f8d0:	e8 a2 29 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000f8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f8d9:	83 c4 10             	add    esp,0x10
c000f8dc:	09 f8                	or     eax,edi
c000f8de:	0f 85 25 01 00 00    	jne    c000fa09 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000f8e4:	4d                   	dec    ebp
c000f8e5:	75 a7                	jne    c000f88e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f8e7:	ba 00 00 08 00       	mov    edx,0x80000
c000f8ec:	89 c1                	mov    ecx,eax
c000f8ee:	39 f2                	cmp    edx,esi
c000f8f0:	19 f9                	sbb    ecx,edi
c000f8f2:	0f 82 a7 00 00 00    	jb     c000f99f <Phys::physicalMemorySetup(unsigned int)+0x187>
c000f8f8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f8fc:	89 c1                	mov    ecx,eax
c000f8fe:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000f902:	0f 83 97 00 00 00    	jae    c000f99f <Phys::physicalMemorySetup(unsigned int)+0x187>
c000f908:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f90d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f911:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f915:	39 fa                	cmp    edx,edi
c000f917:	19 e8                	sbb    eax,ebp
c000f919:	0f 82 14 01 00 00    	jb     c000fa33 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000f91f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f923:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f927:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000f92d:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f932:	83 d5 ff             	adc    ebp,0xffffffff
c000f935:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f939:	31 c0                	xor    eax,eax
c000f93b:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f93f:	39 fa                	cmp    edx,edi
c000f941:	89 c1                	mov    ecx,eax
c000f943:	19 e9                	sbb    ecx,ebp
c000f945:	0f 83 43 ff ff ff    	jae    c000f88e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f94b:	be 00 00 08 00       	mov    esi,0x80000
c000f950:	50                   	push   eax
c000f951:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f955:	57                   	push   edi
c000f956:	56                   	push   esi
c000f957:	68 4c 6e 02 c0       	push   0xc0026e4c
c000f95c:	e8 16 29 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000f961:	5a                   	pop    edx
c000f962:	59                   	pop    ecx
c000f963:	57                   	push   edi
c000f964:	56                   	push   esi
c000f965:	e8 76 fe ff ff       	call   c000f7e0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000f96a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f96e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f972:	83 c4 0c             	add    esp,0xc
c000f975:	0f ac d0 0c          	shrd   eax,edx,0xc
c000f979:	03 05 d0 a6 02 c0    	add    eax,DWORD PTR ds:0xc002a6d0
c000f97f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f986:	a3 d0 a6 02 c0       	mov    ds:0xc002a6d0,eax
c000f98b:	52                   	push   edx
c000f98c:	50                   	push   eax
c000f98d:	68 0a 6e 02 c0       	push   0xc0026e0a
c000f992:	e8 e0 28 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000f997:	83 c4 10             	add    esp,0x10
c000f99a:	e9 ef fe ff ff       	jmp    c000f88e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f99f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000f9a3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f9a7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f9ab:	39 ea                	cmp    edx,ebp
c000f9ad:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000f9b1:	0f 82 d7 fe ff ff    	jb     c000f88e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f9b7:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f9bc:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000f9c0:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000f9c4:	0f 83 c4 fe ff ff    	jae    c000f88e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f9ca:	39 ee                	cmp    esi,ebp
c000f9cc:	89 f8                	mov    eax,edi
c000f9ce:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000f9d2:	0f 83 78 ff ff ff    	jae    c000f950 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000f9d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f9dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f9e0:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000f9e4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000f9e8:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000f9ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f9f0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f9f4:	e9 57 ff ff ff       	jmp    c000f950 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000f9f9:	83 ec 0c             	sub    esp,0xc
c000f9fc:	68 fc 6d 02 c0       	push   0xc0026dfc
c000fa01:	e8 01 91 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c000fa06:	83 c4 10             	add    esp,0x10
c000fa09:	bb 40 01 00 00       	mov    ebx,0x140
c000fa0e:	83 ec 08             	sub    esp,0x8
c000fa11:	6a 00                	push   0x0
c000fa13:	53                   	push   ebx
c000fa14:	43                   	inc    ebx
c000fa15:	e8 26 fc ff ff       	call   c000f640 <Phys::setPageState(unsigned long, bool)>
c000fa1a:	ff 05 d0 a6 02 c0    	inc    DWORD PTR ds:0xc002a6d0
c000fa20:	83 c4 10             	add    esp,0x10
c000fa23:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fa29:	75 e3                	jne    c000fa0e <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fa2b:	83 c4 3c             	add    esp,0x3c
c000fa2e:	5b                   	pop    ebx
c000fa2f:	5e                   	pop    esi
c000fa30:	5f                   	pop    edi
c000fa31:	5d                   	pop    ebp
c000fa32:	c3                   	ret    
c000fa33:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fa3b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fa43:	e9 d7 fe ff ff       	jmp    c000f91f <Phys::physicalMemorySetup(unsigned int)+0x107>

c000fa48 <Pipe::isAtty()>:
c000fa48:	31 c0                	xor    eax,eax
c000fa4a:	c3                   	ret    
c000fa4b:	90                   	nop

c000fa4c <Pipe::~Pipe()>:
c000fa4c:	83 ec 0c             	sub    esp,0xc
c000fa4f:	ba b8 6e 02 c0       	mov    edx,0xc0026eb8
c000fa54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa58:	89 10                	mov    DWORD PTR [eax],edx
c000fa5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa5e:	83 ec 0c             	sub    esp,0xc
c000fa61:	50                   	push   eax
c000fa62:	e8 dd 15 00 00       	call   c0011044 <UnixFile::~UnixFile()>
c000fa67:	83 c4 10             	add    esp,0x10
c000fa6a:	90                   	nop
c000fa6b:	83 c4 0c             	add    esp,0xc
c000fa6e:	c3                   	ret    
c000fa6f:	90                   	nop

c000fa70 <Pipe::~Pipe()>:
c000fa70:	83 ec 0c             	sub    esp,0xc
c000fa73:	83 ec 0c             	sub    esp,0xc
c000fa76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa7a:	e8 cd ff ff ff       	call   c000fa4c <Pipe::~Pipe()>
c000fa7f:	83 c4 10             	add    esp,0x10
c000fa82:	83 ec 08             	sub    esp,0x8
c000fa85:	6a 20                	push   0x20
c000fa87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa8b:	e8 07 27 00 00       	call   c0012197 <operator delete(void*, unsigned long)>
c000fa90:	83 c4 10             	add    esp,0x10
c000fa93:	83 c4 0c             	add    esp,0xc
c000fa96:	c3                   	ret    
c000fa97:	90                   	nop

c000fa98 <Pipe::read(unsigned long long, void*, int*)>:
c000fa98:	55                   	push   ebp
c000fa99:	57                   	push   edi
c000fa9a:	56                   	push   esi
c000fa9b:	53                   	push   ebx
c000fa9c:	83 ec 1c             	sub    esp,0x1c
c000fa9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000faa3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000faa7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000faab:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000faae:	89 c8                	mov    eax,ecx
c000fab0:	99                   	cdq    
c000fab1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fab5:	74 19                	je     c000fad0 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fab7:	39 f9                	cmp    ecx,edi
c000fab9:	89 d1                	mov    ecx,edx
c000fabb:	19 f1                	sbb    ecx,esi
c000fabd:	73 11                	jae    c000fad0 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fabf:	e8 96 bf 00 00       	call   c001ba5a <lockScheduler()>
c000fac4:	e8 c5 c2 00 00       	call   c001bd8e <schedule()>
c000fac9:	e8 8e bf 00 00       	call   c001ba5c <unlockScheduler()>
c000face:	eb db                	jmp    c000faab <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fad0:	39 f8                	cmp    eax,edi
c000fad2:	89 d1                	mov    ecx,edx
c000fad4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000fad8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000fadc:	19 f1                	sbb    ecx,esi
c000fade:	73 08                	jae    c000fae8 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000fae0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fae4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fae8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000faeb:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000faee:	29 c6                	sub    esi,eax
c000faf0:	89 f1                	mov    ecx,esi
c000faf2:	c1 f9 1f             	sar    ecx,0x1f
c000faf5:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000faf9:	89 ca                	mov    edx,ecx
c000fafb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000faff:	19 d1                	sbb    ecx,edx
c000fb01:	73 04                	jae    c000fb07 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000fb03:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000fb07:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fb0b:	89 fd                	mov    ebp,edi
c000fb0d:	29 f5                	sub    ebp,esi
c000fb0f:	85 f6                	test   esi,esi
c000fb11:	74 12                	je     c000fb25 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000fb13:	52                   	push   edx
c000fb14:	56                   	push   esi
c000fb15:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000fb18:	50                   	push   eax
c000fb19:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000fb1d:	e8 6d 0b ff ff       	call   c000068f <memcpy>
c000fb22:	83 c4 10             	add    esp,0x10
c000fb25:	85 ed                	test   ebp,ebp
c000fb27:	74 12                	je     c000fb3b <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000fb29:	50                   	push   eax
c000fb2a:	55                   	push   ebp
c000fb2b:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000fb2e:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000fb32:	56                   	push   esi
c000fb33:	e8 57 0b ff ff       	call   c000068f <memcpy>
c000fb38:	83 c4 10             	add    esp,0x10
c000fb3b:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000fb3e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fb41:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fb44:	99                   	cdq    
c000fb45:	89 f7                	mov    edi,esi
c000fb47:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fb4b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000fb4f:	c1 ff 1f             	sar    edi,0x1f
c000fb52:	57                   	push   edi
c000fb53:	56                   	push   esi
c000fb54:	52                   	push   edx
c000fb55:	50                   	push   eax
c000fb56:	e8 41 3b 01 00       	call   c002369c <__umoddi3>
c000fb5b:	83 c4 10             	add    esp,0x10
c000fb5e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fb61:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fb66:	75 10                	jne    c000fb78 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000fb68:	83 ec 0c             	sub    esp,0xc
c000fb6b:	68 75 6e 02 c0       	push   0xc0026e75
c000fb70:	e8 92 8f 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c000fb75:	83 c4 10             	add    esp,0x10
c000fb78:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb7c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fb80:	89 10                	mov    DWORD PTR [eax],edx
c000fb82:	83 c4 1c             	add    esp,0x1c
c000fb85:	31 c0                	xor    eax,eax
c000fb87:	5b                   	pop    ebx
c000fb88:	5e                   	pop    esi
c000fb89:	5f                   	pop    edi
c000fb8a:	5d                   	pop    ebp
c000fb8b:	c3                   	ret    

c000fb8c <Pipe::write(unsigned long long, void*, int*)>:
c000fb8c:	55                   	push   ebp
c000fb8d:	57                   	push   edi
c000fb8e:	56                   	push   esi
c000fb8f:	53                   	push   ebx
c000fb90:	83 ec 1c             	sub    esp,0x1c
c000fb93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fb97:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fb9b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fb9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000fba2:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000fba5:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000fba8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fbac:	89 de                	mov    esi,ebx
c000fbae:	89 df                	mov    edi,ebx
c000fbb0:	c1 ff 1f             	sar    edi,0x1f
c000fbb3:	01 c6                	add    esi,eax
c000fbb5:	89 c8                	mov    eax,ecx
c000fbb7:	11 d7                	adc    edi,edx
c000fbb9:	99                   	cdq    
c000fbba:	39 f1                	cmp    ecx,esi
c000fbbc:	89 d0                	mov    eax,edx
c000fbbe:	19 f8                	sbb    eax,edi
c000fbc0:	b8 01 00 00 00       	mov    eax,0x1
c000fbc5:	0f 82 80 00 00 00    	jb     c000fc4b <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000fbcb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fbce:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000fbd1:	01 d8                	add    eax,ebx
c000fbd3:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000fbd7:	99                   	cdq    
c000fbd8:	f7 f9                	idiv   ecx
c000fbda:	29 d1                	sub    ecx,edx
c000fbdc:	89 d7                	mov    edi,edx
c000fbde:	89 c8                	mov    eax,ecx
c000fbe0:	99                   	cdq    
c000fbe1:	39 ce                	cmp    esi,ecx
c000fbe3:	19 d3                	sbb    ebx,edx
c000fbe5:	bb 00 00 00 00       	mov    ebx,0x0
c000fbea:	72 04                	jb     c000fbf0 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000fbec:	89 f3                	mov    ebx,esi
c000fbee:	29 cb                	sub    ebx,ecx
c000fbf0:	89 f1                	mov    ecx,esi
c000fbf2:	29 d9                	sub    ecx,ebx
c000fbf4:	74 1a                	je     c000fc10 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000fbf6:	52                   	push   edx
c000fbf7:	51                   	push   ecx
c000fbf8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000fbfc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000fc00:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000fc03:	57                   	push   edi
c000fc04:	e8 86 0a ff ff       	call   c000068f <memcpy>
c000fc09:	83 c4 10             	add    esp,0x10
c000fc0c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fc10:	85 db                	test   ebx,ebx
c000fc12:	74 12                	je     c000fc26 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000fc14:	50                   	push   eax
c000fc15:	53                   	push   ebx
c000fc16:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000fc1a:	51                   	push   ecx
c000fc1b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000fc1e:	e8 6c 0a ff ff       	call   c000068f <memcpy>
c000fc23:	83 c4 10             	add    esp,0x10
c000fc26:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000fc29:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fc2e:	75 10                	jne    c000fc40 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000fc30:	83 ec 0c             	sub    esp,0xc
c000fc33:	68 91 6e 02 c0       	push   0xc0026e91
c000fc38:	e8 ca 8e 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c000fc3d:	83 c4 10             	add    esp,0x10
c000fc40:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc44:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000fc47:	89 38                	mov    DWORD PTR [eax],edi
c000fc49:	31 c0                	xor    eax,eax
c000fc4b:	83 c4 1c             	add    esp,0x1c
c000fc4e:	5b                   	pop    ebx
c000fc4f:	5e                   	pop    esi
c000fc50:	5f                   	pop    edi
c000fc51:	5d                   	pop    ebp
c000fc52:	c3                   	ret    
c000fc53:	90                   	nop

c000fc54 <Pipe::Pipe(int)>:
c000fc54:	83 ec 0c             	sub    esp,0xc
c000fc57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc5b:	83 ec 08             	sub    esp,0x8
c000fc5e:	6a 00                	push   0x0
c000fc60:	50                   	push   eax
c000fc61:	e8 3c 12 00 00       	call   c0010ea2 <UnixFile::UnixFile(int)>
c000fc66:	83 c4 10             	add    esp,0x10
c000fc69:	ba b8 6e 02 c0       	mov    edx,0xc0026eb8
c000fc6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc72:	89 10                	mov    DWORD PTR [eax],edx
c000fc74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fc7c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000fc7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc83:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000fc8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc8e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000fc95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc99:	83 ec 0c             	sub    esp,0xc
c000fc9c:	50                   	push   eax
c000fc9d:	e8 cc f4 ff ff       	call   c000f16e <malloc>
c000fca2:	83 c4 10             	add    esp,0x10
c000fca5:	89 c2                	mov    edx,eax
c000fca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcab:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fcae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcb2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000fcb6:	90                   	nop
c000fcb7:	83 c4 0c             	add    esp,0xc
c000fcba:	c3                   	ret    
c000fcbb:	90                   	nop

c000fcbc <VgaText::isAtty()>:
c000fcbc:	b0 01                	mov    al,0x1
c000fcbe:	c3                   	ret    
c000fcbf:	90                   	nop

c000fcc0 <VgaText::~VgaText()>:
c000fcc0:	83 ec 0c             	sub    esp,0xc
c000fcc3:	ba 74 6f 02 c0       	mov    edx,0xc0026f74
c000fcc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fccc:	89 10                	mov    DWORD PTR [eax],edx
c000fcce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcd2:	83 ec 0c             	sub    esp,0xc
c000fcd5:	50                   	push   eax
c000fcd6:	e8 69 13 00 00       	call   c0011044 <UnixFile::~UnixFile()>
c000fcdb:	83 c4 10             	add    esp,0x10
c000fcde:	90                   	nop
c000fcdf:	83 c4 0c             	add    esp,0xc
c000fce2:	c3                   	ret    
c000fce3:	90                   	nop

c000fce4 <VgaText::~VgaText()>:
c000fce4:	83 ec 0c             	sub    esp,0xc
c000fce7:	83 ec 0c             	sub    esp,0xc
c000fcea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcee:	e8 cd ff ff ff       	call   c000fcc0 <VgaText::~VgaText()>
c000fcf3:	83 c4 10             	add    esp,0x10
c000fcf6:	83 ec 08             	sub    esp,0x8
c000fcf9:	68 60 12 00 00       	push   0x1260
c000fcfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd02:	e8 90 24 00 00       	call   c0012197 <operator delete(void*, unsigned long)>
c000fd07:	83 c4 10             	add    esp,0x10
c000fd0a:	83 c4 0c             	add    esp,0xc
c000fd0d:	c3                   	ret    

c000fd0e <VgaText::read(unsigned long long, void*, int*)>:
c000fd0e:	83 ec 10             	sub    esp,0x10
c000fd11:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd15:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd1d:	e8 26 57 00 00       	call   c0015448 <readKeyboard(VgaText*, char*, unsigned long)>
c000fd22:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fd26:	89 02                	mov    DWORD PTR [edx],eax
c000fd28:	31 c0                	xor    eax,eax
c000fd2a:	83 c4 1c             	add    esp,0x1c
c000fd2d:	c3                   	ret    

c000fd2e <setTerminalScrollLock(bool)>:
c000fd2e:	c3                   	ret    

c000fd2f <addToTerminalCycle(VgaText*)>:
c000fd2f:	8b 15 40 a7 02 c0    	mov    edx,DWORD PTR ds:0xc002a740
c000fd35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd39:	85 d2                	test   edx,edx
c000fd3b:	75 0c                	jne    c000fd49 <addToTerminalCycle(VgaText*)+0x1a>
c000fd3d:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000fd43:	a3 40 a7 02 c0       	mov    ds:0xc002a740,eax
c000fd48:	c3                   	ret    
c000fd49:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000fd4f:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000fd55:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000fd5b:	c3                   	ret    

c000fd5c <installVgaTextImplementation()>:
c000fd5c:	83 ec 10             	sub    esp,0x10
c000fd5f:	6a 20                	push   0x20
c000fd61:	6a 00                	push   0x0
c000fd63:	68 20 a7 02 c0       	push   0xc002a720
c000fd68:	e8 58 09 ff ff       	call   c00006c5 <memset>
c000fd6d:	83 c4 1c             	add    esp,0x1c
c000fd70:	c3                   	ret    

c000fd71 <scrollTerminalScrollLock(int)>:
c000fd71:	c3                   	ret    

c000fd72 <VgaText::load()>:
c000fd72:	53                   	push   ebx
c000fd73:	31 c0                	xor    eax,eax
c000fd75:	83 ec 58             	sub    esp,0x58
c000fd78:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000fd7c:	89 e2                	mov    edx,esp
c000fd7e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000fd82:	40                   	inc    eax
c000fd83:	83 f8 50             	cmp    eax,0x50
c000fd86:	75 f6                	jne    c000fd7e <VgaText::load()+0xc>
c000fd88:	31 c0                	xor    eax,eax
c000fd8a:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000fd91:	84 c9                	test   cl,cl
c000fd93:	74 06                	je     c000fd9b <VgaText::load()+0x29>
c000fd95:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fd98:	40                   	inc    eax
c000fd99:	eb ef                	jmp    c000fd8a <VgaText::load()+0x18>
c000fd9b:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000fda1:	85 c0                	test   eax,eax
c000fda3:	74 09                	je     c000fdae <VgaText::load()+0x3c>
c000fda5:	51                   	push   ecx
c000fda6:	51                   	push   ecx
c000fda7:	52                   	push   edx
c000fda8:	53                   	push   ebx
c000fda9:	ff d0                	call   eax
c000fdab:	83 c4 10             	add    esp,0x10
c000fdae:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000fdb4:	85 c0                	test   eax,eax
c000fdb6:	74 09                	je     c000fdc1 <VgaText::load()+0x4f>
c000fdb8:	83 ec 0c             	sub    esp,0xc
c000fdbb:	53                   	push   ebx
c000fdbc:	ff d0                	call   eax
c000fdbe:	83 c4 10             	add    esp,0x10
c000fdc1:	83 c4 58             	add    esp,0x58
c000fdc4:	5b                   	pop    ebx
c000fdc5:	c3                   	ret    

c000fdc6 <VgaText::updateCursor()>:
c000fdc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdca:	39 05 44 a7 02 c0    	cmp    DWORD PTR ds:0xc002a744,eax
c000fdd0:	75 0c                	jne    c000fdde <VgaText::updateCursor()+0x18>
c000fdd2:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000fdd8:	85 c0                	test   eax,eax
c000fdda:	74 02                	je     c000fdde <VgaText::updateCursor()+0x18>
c000fddc:	ff e0                	jmp    eax
c000fdde:	c3                   	ret    
c000fddf:	90                   	nop

c000fde0 <VgaText::showCursor(bool)>:
c000fde0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fde4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fde8:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000fdee:	c3                   	ret    
c000fdef:	90                   	nop

c000fdf0 <VgaText::disableBlink(bool)>:
c000fdf0:	56                   	push   esi
c000fdf1:	53                   	push   ebx
c000fdf2:	51                   	push   ecx
c000fdf3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fdf7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fdfb:	39 1d 44 a7 02 c0    	cmp    DWORD PTR ds:0xc002a744,ebx
c000fe01:	75 18                	jne    c000fe1b <VgaText::disableBlink(bool)+0x2b>
c000fe03:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000fe09:	85 c0                	test   eax,eax
c000fe0b:	74 0e                	je     c000fe1b <VgaText::disableBlink(bool)+0x2b>
c000fe0d:	89 f1                	mov    ecx,esi
c000fe0f:	52                   	push   edx
c000fe10:	52                   	push   edx
c000fe11:	0f b6 d1             	movzx  edx,cl
c000fe14:	52                   	push   edx
c000fe15:	53                   	push   ebx
c000fe16:	ff d0                	call   eax
c000fe18:	83 c4 10             	add    esp,0x10
c000fe1b:	89 f0                	mov    eax,esi
c000fe1d:	83 f0 01             	xor    eax,0x1
c000fe20:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000fe26:	58                   	pop    eax
c000fe27:	5b                   	pop    ebx
c000fe28:	5e                   	pop    esi
c000fe29:	c3                   	ret    

c000fe2a <VgaText::doANSI_SGR(int)>:
c000fe2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe32:	85 d2                	test   edx,edx
c000fe34:	75 14                	jne    c000fe4a <VgaText::doANSI_SGR(int)+0x20>
c000fe36:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000fe3c:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fe42:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000fe48:	eb 65                	jmp    c000feaf <VgaText::doANSI_SGR(int)+0x85>
c000fe4a:	83 fa 07             	cmp    edx,0x7
c000fe4d:	75 14                	jne    c000fe63 <VgaText::doANSI_SGR(int)+0x39>
c000fe4f:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000fe55:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000fe5b:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000fe61:	eb 4c                	jmp    c000feaf <VgaText::doANSI_SGR(int)+0x85>
c000fe63:	83 fa 1b             	cmp    edx,0x1b
c000fe66:	74 ce                	je     c000fe36 <VgaText::doANSI_SGR(int)+0xc>
c000fe68:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000fe6b:	83 f9 07             	cmp    ecx,0x7
c000fe6e:	77 09                	ja     c000fe79 <VgaText::doANSI_SGR(int)+0x4f>
c000fe70:	8b 14 8d 60 96 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd69a0]
c000fe77:	eb 20                	jmp    c000fe99 <VgaText::doANSI_SGR(int)+0x6f>
c000fe79:	8d 4a d8             	lea    ecx,[edx-0x28]
c000fe7c:	83 f9 07             	cmp    ecx,0x7
c000fe7f:	77 09                	ja     c000fe8a <VgaText::doANSI_SGR(int)+0x60>
c000fe81:	8b 14 8d 60 96 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd69a0]
c000fe88:	eb 25                	jmp    c000feaf <VgaText::doANSI_SGR(int)+0x85>
c000fe8a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000fe8d:	83 f9 07             	cmp    ecx,0x7
c000fe90:	77 0e                	ja     c000fea0 <VgaText::doANSI_SGR(int)+0x76>
c000fe92:	8b 14 95 18 95 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6ae8]
c000fe99:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fe9f:	c3                   	ret    
c000fea0:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000fea3:	83 f9 07             	cmp    ecx,0x7
c000fea6:	77 0d                	ja     c000feb5 <VgaText::doANSI_SGR(int)+0x8b>
c000fea8:	8b 14 95 f0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b10]
c000feaf:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000feb5:	c3                   	ret    

c000feb6 <VgaText::setDefaultBgColour(VgaColour)>:
c000feb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000feba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000febe:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000fec4:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000feca:	c3                   	ret    
c000fecb:	90                   	nop

c000fecc <VgaText::setDefaultFgColour(VgaColour)>:
c000fecc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fed0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fed4:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000feda:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fee0:	c3                   	ret    
c000fee1:	90                   	nop

c000fee2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000fee2:	53                   	push   ebx
c000fee3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fee7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000feeb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000feef:	51                   	push   ecx
c000fef0:	e8 c1 ff ff ff       	call   c000feb6 <VgaText::setDefaultBgColour(VgaColour)>
c000fef5:	58                   	pop    eax
c000fef6:	5a                   	pop    edx
c000fef7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fefb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000feff:	5b                   	pop    ebx
c000ff00:	eb ca                	jmp    c000fecc <VgaText::setDefaultFgColour(VgaColour)>

c000ff02 <VgaText::combineColours(unsigned char, unsigned char)>:
c000ff02:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000ff06:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000ff0b:	83 e0 0f             	and    eax,0xf
c000ff0e:	c1 e2 04             	shl    edx,0x4
c000ff11:	09 d0                	or     eax,edx
c000ff13:	c3                   	ret    

c000ff14 <VgaText::scrollScreen()>:
c000ff14:	57                   	push   edi
c000ff15:	56                   	push   esi
c000ff16:	be 01 00 00 00       	mov    esi,0x1
c000ff1b:	53                   	push   ebx
c000ff1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff20:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000ff26:	31 ff                	xor    edi,edi
c000ff28:	01 d9                	add    ecx,ebx
c000ff2a:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000ff2d:	83 fe 17             	cmp    esi,0x17
c000ff30:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000ff36:	75 28                	jne    c000ff60 <VgaText::scrollScreen()+0x4c>
c000ff38:	f7 c7 01 00 00 00    	test   edi,0x1
c000ff3e:	74 1c                	je     c000ff5c <VgaText::scrollScreen()+0x48>
c000ff40:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000ff47:	50                   	push   eax
c000ff48:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000ff4f:	50                   	push   eax
c000ff50:	e8 ad ff ff ff       	call   c000ff02 <VgaText::combineColours(unsigned char, unsigned char)>
c000ff55:	5a                   	pop    edx
c000ff56:	5a                   	pop    edx
c000ff57:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000ff5a:	eb 04                	jmp    c000ff60 <VgaText::scrollScreen()+0x4c>
c000ff5c:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000ff60:	47                   	inc    edi
c000ff61:	41                   	inc    ecx
c000ff62:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ff68:	75 c0                	jne    c000ff2a <VgaText::scrollScreen()+0x16>
c000ff6a:	46                   	inc    esi
c000ff6b:	83 fe 18             	cmp    esi,0x18
c000ff6e:	75 b0                	jne    c000ff20 <VgaText::scrollScreen()+0xc>
c000ff70:	39 1d 44 a7 02 c0    	cmp    DWORD PTR ds:0xc002a744,ebx
c000ff76:	75 24                	jne    c000ff9c <VgaText::scrollScreen()+0x88>
c000ff78:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ff7f:	74 08                	je     c000ff89 <VgaText::scrollScreen()+0x75>
c000ff81:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ff87:	eb 13                	jmp    c000ff9c <VgaText::scrollScreen()+0x88>
c000ff89:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ff8f:	85 c0                	test   eax,eax
c000ff91:	74 09                	je     c000ff9c <VgaText::scrollScreen()+0x88>
c000ff93:	83 ec 0c             	sub    esp,0xc
c000ff96:	53                   	push   ebx
c000ff97:	ff d0                	call   eax
c000ff99:	83 c4 10             	add    esp,0x10
c000ff9c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ffa0:	5b                   	pop    ebx
c000ffa1:	5e                   	pop    esi
c000ffa2:	5f                   	pop    edi
c000ffa3:	e9 1e fe ff ff       	jmp    c000fdc6 <VgaText::updateCursor()>

c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ffa8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ffad:	c1 e0 08             	shl    eax,0x8
c000ffb0:	89 c2                	mov    edx,eax
c000ffb2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ffb7:	09 d0                	or     eax,edx
c000ffb9:	c3                   	ret    

c000ffba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ffba:	53                   	push   ebx
c000ffbb:	83 ec 08             	sub    esp,0x8
c000ffbe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ffc2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ffc7:	50                   	push   eax
c000ffc8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ffcd:	50                   	push   eax
c000ffce:	e8 2f ff ff ff       	call   c000ff02 <VgaText::combineColours(unsigned char, unsigned char)>
c000ffd3:	5a                   	pop    edx
c000ffd4:	0f b6 c0             	movzx  eax,al
c000ffd7:	5b                   	pop    ebx
c000ffd8:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ffdd:	50                   	push   eax
c000ffde:	53                   	push   ebx
c000ffdf:	e8 c4 ff ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c000ffe4:	5a                   	pop    edx
c000ffe5:	5a                   	pop    edx
c000ffe6:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ffec:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000fff0:	0f b7 d2             	movzx  edx,dx
c000fff3:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000fff8:	39 0d 44 a7 02 c0    	cmp    DWORD PTR ds:0xc002a744,ecx
c000fffe:	75 14                	jne    c0010014 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010000:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010006:	85 c0                	test   eax,eax
c0010008:	74 0a                	je     c0010014 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001000a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001000e:	83 c4 08             	add    esp,0x8
c0010011:	5b                   	pop    ebx
c0010012:	ff e0                	jmp    eax
c0010014:	83 c4 08             	add    esp,0x8
c0010017:	5b                   	pop    ebx
c0010018:	c3                   	ret    
c0010019:	90                   	nop

c001001a <VgaText::getCursorX()>:
c001001a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001001e:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010024:	c3                   	ret    
c0010025:	90                   	nop

c0010026 <VgaText::getCursorY()>:
c0010026:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001002a:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010030:	c3                   	ret    
c0010031:	90                   	nop

c0010032 <VgaText::setCursor(int, int)>:
c0010032:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010036:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001003a:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010040:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010044:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001004a:	e9 77 fd ff ff       	jmp    c000fdc6 <VgaText::updateCursor()>
c001004f:	90                   	nop

c0010050 <VgaText::setCursorX(int)>:
c0010050:	83 ec 10             	sub    esp,0x10
c0010053:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010057:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c001005d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010061:	50                   	push   eax
c0010062:	e8 cb ff ff ff       	call   c0010032 <VgaText::setCursor(int, int)>
c0010067:	83 c4 1c             	add    esp,0x1c
c001006a:	c3                   	ret    
c001006b:	90                   	nop

c001006c <VgaText::setCursorY(int)>:
c001006c:	83 ec 10             	sub    esp,0x10
c001006f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010073:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010077:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001007d:	50                   	push   eax
c001007e:	e8 af ff ff ff       	call   c0010032 <VgaText::setCursor(int, int)>
c0010083:	83 c4 1c             	add    esp,0x1c
c0010086:	c3                   	ret    
c0010087:	90                   	nop

c0010088 <VgaText::incrementCursor(bool)>:
c0010088:	56                   	push   esi
c0010089:	53                   	push   ebx
c001008a:	51                   	push   ecx
c001008b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001008f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010093:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010099:	40                   	inc    eax
c001009a:	83 f8 50             	cmp    eax,0x50
c001009d:	74 08                	je     c00100a7 <VgaText::incrementCursor(bool)+0x1f>
c001009f:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00100a5:	eb 33                	jmp    c00100da <VgaText::incrementCursor(bool)+0x52>
c00100a7:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00100ad:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00100b7:	8d 50 01             	lea    edx,[eax+0x1]
c00100ba:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00100c0:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00100c6:	75 12                	jne    c00100da <VgaText::incrementCursor(bool)+0x52>
c00100c8:	83 ec 0c             	sub    esp,0xc
c00100cb:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00100d1:	53                   	push   ebx
c00100d2:	e8 3d fe ff ff       	call   c000ff14 <VgaText::scrollScreen()>
c00100d7:	83 c4 10             	add    esp,0x10
c00100da:	89 f0                	mov    eax,esi
c00100dc:	84 c0                	test   al,al
c00100de:	74 0c                	je     c00100ec <VgaText::incrementCursor(bool)+0x64>
c00100e0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00100e4:	5a                   	pop    edx
c00100e5:	5b                   	pop    ebx
c00100e6:	5e                   	pop    esi
c00100e7:	e9 da fc ff ff       	jmp    c000fdc6 <VgaText::updateCursor()>
c00100ec:	58                   	pop    eax
c00100ed:	5b                   	pop    ebx
c00100ee:	5e                   	pop    esi
c00100ef:	c3                   	ret    

c00100f0 <VgaText::updateRAMUsageDisplay(int)>:
c00100f0:	53                   	push   ebx
c00100f1:	bb 0a 00 00 00       	mov    ebx,0xa
c00100f6:	6a 0f                	push   0xf
c00100f8:	6a 00                	push   0x0
c00100fa:	e8 03 fe ff ff       	call   c000ff02 <VgaText::combineColours(unsigned char, unsigned char)>
c00100ff:	5a                   	pop    edx
c0010100:	59                   	pop    ecx
c0010101:	0f b6 c8             	movzx  ecx,al
c0010104:	51                   	push   ecx
c0010105:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010109:	99                   	cdq    
c001010a:	f7 fb                	idiv   ebx
c001010c:	89 d3                	mov    ebx,edx
c001010e:	83 c0 30             	add    eax,0x30
c0010111:	83 c3 30             	add    ebx,0x30
c0010114:	0f be c0             	movsx  eax,al
c0010117:	0f b6 db             	movzx  ebx,bl
c001011a:	50                   	push   eax
c001011b:	e8 88 fe ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010120:	5a                   	pop    edx
c0010121:	5a                   	pop    edx
c0010122:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c0010128:	51                   	push   ecx
c0010129:	53                   	push   ebx
c001012a:	e8 79 fe ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c001012f:	5b                   	pop    ebx
c0010130:	5a                   	pop    edx
c0010131:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c0010137:	51                   	push   ecx
c0010138:	6a 25                	push   0x25
c001013a:	e8 69 fe ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c001013f:	59                   	pop    ecx
c0010140:	5b                   	pop    ebx
c0010141:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c0010147:	5b                   	pop    ebx
c0010148:	c3                   	ret    
c0010149:	90                   	nop

c001014a <VgaText::updateDiskUsage()>:
c001014a:	55                   	push   ebp
c001014b:	bd 10 27 00 00       	mov    ebp,0x2710
c0010150:	57                   	push   edi
c0010151:	56                   	push   esi
c0010152:	53                   	push   ebx
c0010153:	6a 0f                	push   0xf
c0010155:	6a 00                	push   0x0
c0010157:	e8 a6 fd ff ff       	call   c000ff02 <VgaText::combineColours(unsigned char, unsigned char)>
c001015c:	5a                   	pop    edx
c001015d:	0f b6 d8             	movzx  ebx,al
c0010160:	59                   	pop    ecx
c0010161:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0010166:	53                   	push   ebx
c0010167:	b9 0a 00 00 00       	mov    ecx,0xa
c001016c:	99                   	cdq    
c001016d:	f7 fd                	idiv   ebp
c001016f:	99                   	cdq    
c0010170:	f7 f9                	idiv   ecx
c0010172:	8d 42 30             	lea    eax,[edx+0x30]
c0010175:	0f b6 c0             	movzx  eax,al
c0010178:	50                   	push   eax
c0010179:	e8 2a fe ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c001017e:	5e                   	pop    esi
c001017f:	5f                   	pop    edi
c0010180:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c0010186:	bf e8 03 00 00       	mov    edi,0x3e8
c001018b:	53                   	push   ebx
c001018c:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0010191:	99                   	cdq    
c0010192:	f7 ff                	idiv   edi
c0010194:	99                   	cdq    
c0010195:	f7 f9                	idiv   ecx
c0010197:	8d 42 30             	lea    eax,[edx+0x30]
c001019a:	0f b6 c0             	movzx  eax,al
c001019d:	50                   	push   eax
c001019e:	e8 05 fe ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c00101a3:	5a                   	pop    edx
c00101a4:	5e                   	pop    esi
c00101a5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c00101ab:	be 64 00 00 00       	mov    esi,0x64
c00101b0:	53                   	push   ebx
c00101b1:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c00101b6:	99                   	cdq    
c00101b7:	f7 fe                	idiv   esi
c00101b9:	99                   	cdq    
c00101ba:	f7 f9                	idiv   ecx
c00101bc:	8d 42 30             	lea    eax,[edx+0x30]
c00101bf:	0f b6 c0             	movzx  eax,al
c00101c2:	50                   	push   eax
c00101c3:	e8 e0 fd ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c00101c8:	5a                   	pop    edx
c00101c9:	5a                   	pop    edx
c00101ca:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c00101d0:	53                   	push   ebx
c00101d1:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c00101d6:	99                   	cdq    
c00101d7:	f7 f9                	idiv   ecx
c00101d9:	99                   	cdq    
c00101da:	f7 f9                	idiv   ecx
c00101dc:	8d 42 30             	lea    eax,[edx+0x30]
c00101df:	0f b6 c0             	movzx  eax,al
c00101e2:	50                   	push   eax
c00101e3:	e8 c0 fd ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c00101e8:	5a                   	pop    edx
c00101e9:	5a                   	pop    edx
c00101ea:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c00101f0:	53                   	push   ebx
c00101f1:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c00101f6:	99                   	cdq    
c00101f7:	f7 f9                	idiv   ecx
c00101f9:	8d 42 30             	lea    eax,[edx+0x30]
c00101fc:	0f b6 c0             	movzx  eax,al
c00101ff:	50                   	push   eax
c0010200:	e8 a3 fd ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010205:	5a                   	pop    edx
c0010206:	5a                   	pop    edx
c0010207:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001020d:	53                   	push   ebx
c001020e:	a1 44 c9 02 c0       	mov    eax,ds:0xc002c944
c0010213:	99                   	cdq    
c0010214:	f7 fd                	idiv   ebp
c0010216:	99                   	cdq    
c0010217:	f7 f9                	idiv   ecx
c0010219:	8d 42 30             	lea    eax,[edx+0x30]
c001021c:	0f b6 c0             	movzx  eax,al
c001021f:	50                   	push   eax
c0010220:	e8 83 fd ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010225:	5d                   	pop    ebp
c0010226:	5a                   	pop    edx
c0010227:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001022d:	53                   	push   ebx
c001022e:	a1 44 c9 02 c0       	mov    eax,ds:0xc002c944
c0010233:	99                   	cdq    
c0010234:	f7 ff                	idiv   edi
c0010236:	99                   	cdq    
c0010237:	f7 f9                	idiv   ecx
c0010239:	8d 42 30             	lea    eax,[edx+0x30]
c001023c:	0f b6 c0             	movzx  eax,al
c001023f:	50                   	push   eax
c0010240:	e8 63 fd ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010245:	5f                   	pop    edi
c0010246:	5d                   	pop    ebp
c0010247:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001024d:	53                   	push   ebx
c001024e:	a1 44 c9 02 c0       	mov    eax,ds:0xc002c944
c0010253:	99                   	cdq    
c0010254:	f7 fe                	idiv   esi
c0010256:	99                   	cdq    
c0010257:	f7 f9                	idiv   ecx
c0010259:	8d 42 30             	lea    eax,[edx+0x30]
c001025c:	0f b6 c0             	movzx  eax,al
c001025f:	50                   	push   eax
c0010260:	e8 43 fd ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010265:	5a                   	pop    edx
c0010266:	5e                   	pop    esi
c0010267:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001026d:	53                   	push   ebx
c001026e:	a1 44 c9 02 c0       	mov    eax,ds:0xc002c944
c0010273:	99                   	cdq    
c0010274:	f7 f9                	idiv   ecx
c0010276:	99                   	cdq    
c0010277:	f7 f9                	idiv   ecx
c0010279:	8d 42 30             	lea    eax,[edx+0x30]
c001027c:	0f b6 c0             	movzx  eax,al
c001027f:	50                   	push   eax
c0010280:	e8 23 fd ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010285:	5f                   	pop    edi
c0010286:	5d                   	pop    ebp
c0010287:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001028d:	53                   	push   ebx
c001028e:	a1 44 c9 02 c0       	mov    eax,ds:0xc002c944
c0010293:	99                   	cdq    
c0010294:	f7 f9                	idiv   ecx
c0010296:	83 c2 30             	add    edx,0x30
c0010299:	0f b6 d2             	movzx  edx,dl
c001029c:	52                   	push   edx
c001029d:	e8 06 fd ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c00102a2:	5a                   	pop    edx
c00102a3:	59                   	pop    ecx
c00102a4:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c00102aa:	5b                   	pop    ebx
c00102ab:	5e                   	pop    esi
c00102ac:	5f                   	pop    edi
c00102ad:	5d                   	pop    ebp
c00102ae:	c3                   	ret    
c00102af:	90                   	nop

c00102b0 <VgaText::updateTitle()>:
c00102b0:	53                   	push   ebx
c00102b1:	31 c0                	xor    eax,eax
c00102b3:	83 ec 58             	sub    esp,0x58
c00102b6:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00102ba:	89 e1                	mov    ecx,esp
c00102bc:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c00102c0:	40                   	inc    eax
c00102c1:	83 f8 50             	cmp    eax,0x50
c00102c4:	75 f6                	jne    c00102bc <VgaText::updateTitle()+0xc>
c00102c6:	31 c0                	xor    eax,eax
c00102c8:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c00102cf:	84 db                	test   bl,bl
c00102d1:	74 06                	je     c00102d9 <VgaText::updateTitle()+0x29>
c00102d3:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00102d6:	40                   	inc    eax
c00102d7:	eb ef                	jmp    c00102c8 <VgaText::updateTitle()+0x18>
c00102d9:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c00102df:	85 c0                	test   eax,eax
c00102e1:	74 09                	je     c00102ec <VgaText::updateTitle()+0x3c>
c00102e3:	53                   	push   ebx
c00102e4:	53                   	push   ebx
c00102e5:	51                   	push   ecx
c00102e6:	52                   	push   edx
c00102e7:	ff d0                	call   eax
c00102e9:	83 c4 10             	add    esp,0x10
c00102ec:	e8 59 fe ff ff       	call   c001014a <VgaText::updateDiskUsage()>
c00102f1:	83 c4 58             	add    esp,0x58
c00102f4:	5b                   	pop    ebx
c00102f5:	c3                   	ret    

c00102f6 <VgaText::setTitleTextColour(VgaColour)>:
c00102f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102fe:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010304:	eb aa                	jmp    c00102b0 <VgaText::updateTitle()>

c0010306 <VgaText::setTitleColour(VgaColour)>:
c0010306:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001030a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001030e:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010314:	eb 9a                	jmp    c00102b0 <VgaText::updateTitle()>

c0010316 <VgaText::setTitle(char*)>:
c0010316:	53                   	push   ebx
c0010317:	83 ec 10             	sub    esp,0x10
c001031a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001031e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010322:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010328:	50                   	push   eax
c0010329:	e8 36 04 ff ff       	call   c0000764 <strcpy>
c001032e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010332:	83 c4 18             	add    esp,0x18
c0010335:	5b                   	pop    ebx
c0010336:	e9 75 ff ff ff       	jmp    c00102b0 <VgaText::updateTitle()>
c001033b:	90                   	nop

c001033c <VgaText::decrementCursor(bool)>:
c001033c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010340:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010344:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c001034a:	85 c0                	test   eax,eax
c001034c:	74 07                	je     c0010355 <VgaText::decrementCursor(bool)+0x19>
c001034e:	48                   	dec    eax
c001034f:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010355:	84 c9                	test   cl,cl
c0010357:	74 09                	je     c0010362 <VgaText::decrementCursor(bool)+0x26>
c0010359:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001035d:	e9 64 fa ff ff       	jmp    c000fdc6 <VgaText::updateCursor()>
c0010362:	c3                   	ret    
c0010363:	90                   	nop

c0010364 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010364:	53                   	push   ebx
c0010365:	83 ec 08             	sub    esp,0x8
c0010368:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001036c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010370:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010374:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010378:	3c 07                	cmp    al,0x7
c001037a:	75 2a                	jne    c00103a6 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001037c:	a1 ec a7 02 c0       	mov    eax,ds:0xc002a7ec
c0010381:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010389:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010391:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010399:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001039d:	83 c4 08             	add    esp,0x8
c00103a0:	5b                   	pop    ebx
c00103a1:	e9 bc 2c 00 00       	jmp    c0013062 <Buzzer::beep(int, int, bool)>
c00103a6:	3c 0d                	cmp    al,0xd
c00103a8:	75 0c                	jne    c00103b6 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c00103aa:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00103b4:	eb 3b                	jmp    c00103f1 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c00103b6:	3c 0a                	cmp    al,0xa
c00103b8:	75 40                	jne    c00103fa <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c00103ba:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00103c0:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00103ca:	8d 50 01             	lea    edx,[eax+0x1]
c00103cd:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00103d3:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00103d9:	75 12                	jne    c00103ed <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c00103db:	83 ec 0c             	sub    esp,0xc
c00103de:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00103e4:	53                   	push   ebx
c00103e5:	e8 2a fb ff ff       	call   c000ff14 <VgaText::scrollScreen()>
c00103ea:	83 c4 10             	add    esp,0x10
c00103ed:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103f1:	83 c4 08             	add    esp,0x8
c00103f4:	5b                   	pop    ebx
c00103f5:	e9 cc f9 ff ff       	jmp    c000fdc6 <VgaText::updateCursor()>
c00103fa:	3c 08                	cmp    al,0x8
c00103fc:	75 31                	jne    c001042f <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00103fe:	50                   	push   eax
c00103ff:	50                   	push   eax
c0010400:	6a 01                	push   0x1
c0010402:	53                   	push   ebx
c0010403:	e8 34 ff ff ff       	call   c001033c <VgaText::decrementCursor(bool)>
c0010408:	5a                   	pop    edx
c0010409:	59                   	pop    ecx
c001040a:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010410:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010416:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001041c:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010422:	6a 20                	push   0x20
c0010424:	53                   	push   ebx
c0010425:	e8 90 fb ff ff       	call   c000ffba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001042a:	83 c4 28             	add    esp,0x28
c001042d:	5b                   	pop    ebx
c001042e:	c3                   	ret    
c001042f:	83 ec 08             	sub    esp,0x8
c0010432:	0f be c0             	movsx  eax,al
c0010435:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c001043b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010441:	51                   	push   ecx
c0010442:	52                   	push   edx
c0010443:	50                   	push   eax
c0010444:	53                   	push   ebx
c0010445:	e8 70 fb ff ff       	call   c000ffba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001044a:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001044e:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010456:	83 c4 28             	add    esp,0x28
c0010459:	5b                   	pop    ebx
c001045a:	e9 29 fc ff ff       	jmp    c0010088 <VgaText::incrementCursor(bool)>
c001045f:	90                   	nop

c0010460 <VgaText::isShowingCursor()>:
c0010460:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010464:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c001046a:	c3                   	ret    
c001046b:	90                   	nop

c001046c <VgaText::isBlinkDisabled()>:
c001046c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010470:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010476:	83 f0 01             	xor    eax,0x1
c0010479:	c3                   	ret    

c001047a <VgaText::setCursorHeight(int)>:
c001047a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001047e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010482:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010488:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c001048f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010493:	e9 48 f9 ff ff       	jmp    c000fde0 <VgaText::showCursor(bool)>

c0010498 <VgaText::getCursorHeight()>:
c0010498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001049c:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c00104a2:	c3                   	ret    

c00104a3 <setActiveTerminal(VgaText*)>:
c00104a3:	53                   	push   ebx
c00104a4:	83 ec 08             	sub    esp,0x8
c00104a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00104ab:	85 db                	test   ebx,ebx
c00104ad:	75 11                	jne    c00104c0 <setActiveTerminal(VgaText*)+0x1d>
c00104af:	c7 44 24 10 cc 6e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026ecc
c00104b7:	83 c4 08             	add    esp,0x8
c00104ba:	5b                   	pop    ebx
c00104bb:	e9 47 86 00 00       	jmp    c0018b07 <Krnl::panic(char const*)>
c00104c0:	50                   	push   eax
c00104c1:	50                   	push   eax
c00104c2:	53                   	push   ebx
c00104c3:	68 da 6e 02 c0       	push   0xc0026eda
c00104c8:	e8 aa 1d 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00104cd:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c00104d2:	83 c4 10             	add    esp,0x10
c00104d5:	85 c0                	test   eax,eax
c00104d7:	74 0c                	je     c00104e5 <setActiveTerminal(VgaText*)+0x42>
c00104d9:	83 ec 0c             	sub    esp,0xc
c00104dc:	50                   	push   eax
c00104dd:	e8 e4 f8 ff ff       	call   c000fdc6 <VgaText::updateCursor()>
c00104e2:	83 c4 10             	add    esp,0x10
c00104e5:	89 1d 44 a7 02 c0    	mov    DWORD PTR ds:0xc002a744,ebx
c00104eb:	51                   	push   ecx
c00104ec:	51                   	push   ecx
c00104ed:	53                   	push   ebx
c00104ee:	68 f2 6e 02 c0       	push   0xc0026ef2
c00104f3:	e8 7f 1d 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00104f8:	83 c4 0c             	add    esp,0xc
c00104fb:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010501:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010507:	53                   	push   ebx
c0010508:	e8 25 fb ff ff       	call   c0010032 <VgaText::setCursor(int, int)>
c001050d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010510:	e8 57 ff ff ff       	call   c001046c <VgaText::isBlinkDisabled()>
c0010515:	5a                   	pop    edx
c0010516:	0f b6 c0             	movzx  eax,al
c0010519:	59                   	pop    ecx
c001051a:	50                   	push   eax
c001051b:	53                   	push   ebx
c001051c:	e8 cf f8 ff ff       	call   c000fdf0 <VgaText::disableBlink(bool)>
c0010521:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010524:	e8 6f ff ff ff       	call   c0010498 <VgaText::getCursorHeight()>
c0010529:	5a                   	pop    edx
c001052a:	59                   	pop    ecx
c001052b:	50                   	push   eax
c001052c:	53                   	push   ebx
c001052d:	e8 48 ff ff ff       	call   c001047a <VgaText::setCursorHeight(int)>
c0010532:	83 c4 10             	add    esp,0x10
c0010535:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001053c:	75 0a                	jne    c0010548 <setActiveTerminal(VgaText*)+0xa5>
c001053e:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010548:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001054c:	83 c4 08             	add    esp,0x8
c001054f:	5b                   	pop    ebx
c0010550:	e9 1d f8 ff ff       	jmp    c000fd72 <VgaText::load()>

c0010555 <doTerminalCycle()>:
c0010555:	83 ec 18             	sub    esp,0x18
c0010558:	a1 40 a7 02 c0       	mov    eax,ds:0xc002a740
c001055d:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010563:	50                   	push   eax
c0010564:	a3 40 a7 02 c0       	mov    ds:0xc002a740,eax
c0010569:	e8 35 ff ff ff       	call   c00104a3 <setActiveTerminal(VgaText*)>
c001056e:	83 c4 1c             	add    esp,0x1c
c0010571:	c3                   	ret    

c0010572 <VgaText::doUpdate()>:
c0010572:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010576:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c001057c:	85 c0                	test   eax,eax
c001057e:	74 02                	je     c0010582 <VgaText::doUpdate()+0x10>
c0010580:	ff e0                	jmp    eax
c0010582:	c3                   	ret    
c0010583:	90                   	nop

c0010584 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010584:	55                   	push   ebp
c0010585:	57                   	push   edi
c0010586:	56                   	push   esi
c0010587:	53                   	push   ebx
c0010588:	83 ec 1c             	sub    esp,0x1c
c001058b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001058f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010594:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c001059b:	8d 7d 0c             	lea    edi,[ebp+0xc]
c001059e:	50                   	push   eax
c001059f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00105a4:	50                   	push   eax
c00105a5:	e8 58 f9 ff ff       	call   c000ff02 <VgaText::combineColours(unsigned char, unsigned char)>
c00105aa:	59                   	pop    ecx
c00105ab:	0f b6 c0             	movzx  eax,al
c00105ae:	5b                   	pop    ebx
c00105af:	31 c9                	xor    ecx,ecx
c00105b1:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00105b9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00105bd:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00105c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00105c7:	0f b7 db             	movzx  ebx,bx
c00105ca:	01 db                	add    ebx,ebx
c00105cc:	01 fb                	add    ebx,edi
c00105ce:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00105d1:	84 c0                	test   al,al
c00105d3:	0f 84 38 01 00 00    	je     c0010711 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c00105d9:	3c 0d                	cmp    al,0xd
c00105db:	75 0f                	jne    c00105ec <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c00105dd:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00105e7:	e9 1f 01 00 00       	jmp    c001070b <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00105ec:	3c 0a                	cmp    al,0xa
c00105ee:	75 5b                	jne    c001064b <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c00105f0:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c00105f6:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010600:	8d 48 01             	lea    ecx,[eax+0x1]
c0010603:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010609:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c001060f:	75 12                	jne    c0010623 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010611:	83 ec 0c             	sub    esp,0xc
c0010614:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c001061a:	55                   	push   ebp
c001061b:	e8 f4 f8 ff ff       	call   c000ff14 <VgaText::scrollScreen()>
c0010620:	83 c4 10             	add    esp,0x10
c0010623:	83 ec 0c             	sub    esp,0xc
c0010626:	55                   	push   ebp
c0010627:	e8 9a f7 ff ff       	call   c000fdc6 <VgaText::updateCursor()>
c001062c:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010634:	83 c4 10             	add    esp,0x10
c0010637:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c001063d:	31 c9                	xor    ecx,ecx
c001063f:	0f b7 db             	movzx  ebx,bx
c0010642:	01 db                	add    ebx,ebx
c0010644:	01 fb                	add    ebx,edi
c0010646:	e9 c0 00 00 00       	jmp    c001070b <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c001064b:	3c 08                	cmp    al,0x8
c001064d:	75 4e                	jne    c001069d <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c001064f:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010653:	53                   	push   ebx
c0010654:	53                   	push   ebx
c0010655:	6a 01                	push   0x1
c0010657:	55                   	push   ebp
c0010658:	e8 df fc ff ff       	call   c001033c <VgaText::decrementCursor(bool)>
c001065d:	58                   	pop    eax
c001065e:	5a                   	pop    edx
c001065f:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010665:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c001066b:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010671:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010677:	6a 20                	push   0x20
c0010679:	55                   	push   ebp
c001067a:	e8 3b f9 ff ff       	call   c000ffba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001067f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010687:	83 c4 20             	add    esp,0x20
c001068a:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010690:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010694:	0f b7 db             	movzx  ebx,bx
c0010697:	01 db                	add    ebx,ebx
c0010699:	01 fb                	add    ebx,edi
c001069b:	eb 6e                	jmp    c001070b <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c001069d:	51                   	push   ecx
c001069e:	51                   	push   ecx
c001069f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00106a3:	50                   	push   eax
c00106a4:	e8 ff f8 ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c00106a9:	83 c4 10             	add    esp,0x10
c00106ac:	66 89 03             	mov    WORD PTR [ebx],ax
c00106af:	39 2d 44 a7 02 c0    	cmp    DWORD PTR ds:0xc002a744,ebp
c00106b5:	75 2a                	jne    c00106e1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c00106b7:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c00106bd:	85 c0                	test   eax,eax
c00106bf:	74 20                	je     c00106e1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c00106c1:	52                   	push   edx
c00106c2:	52                   	push   edx
c00106c3:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c00106c9:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c00106cf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00106d3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00106d7:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c00106da:	51                   	push   ecx
c00106db:	55                   	push   ebp
c00106dc:	ff d0                	call   eax
c00106de:	83 c4 20             	add    esp,0x20
c00106e1:	83 c3 02             	add    ebx,0x2
c00106e4:	50                   	push   eax
c00106e5:	50                   	push   eax
c00106e6:	6a 00                	push   0x0
c00106e8:	55                   	push   ebp
c00106e9:	e8 9a f9 ff ff       	call   c0010088 <VgaText::incrementCursor(bool)>
c00106ee:	83 c4 10             	add    esp,0x10
c00106f1:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c00106f8:	75 0f                	jne    c0010709 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c00106fa:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010702:	0f b7 db             	movzx  ebx,bx
c0010705:	01 db                	add    ebx,ebx
c0010707:	01 fb                	add    ebx,edi
c0010709:	b1 01                	mov    cl,0x1
c001070b:	46                   	inc    esi
c001070c:	e9 bd fe ff ff       	jmp    c00105ce <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010711:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010715:	83 ec 0c             	sub    esp,0xc
c0010718:	55                   	push   ebp
c0010719:	e8 a8 f6 ff ff       	call   c000fdc6 <VgaText::updateCursor()>
c001071e:	83 c4 10             	add    esp,0x10
c0010721:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010725:	84 c9                	test   cl,cl
c0010727:	74 0c                	je     c0010735 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010729:	83 ec 0c             	sub    esp,0xc
c001072c:	55                   	push   ebp
c001072d:	e8 40 fe ff ff       	call   c0010572 <VgaText::doUpdate()>
c0010732:	83 c4 10             	add    esp,0x10
c0010735:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c001073c:	83 c4 1c             	add    esp,0x1c
c001073f:	5b                   	pop    ebx
c0010740:	5e                   	pop    esi
c0010741:	5f                   	pop    edi
c0010742:	5d                   	pop    ebp
c0010743:	c3                   	ret    

c0010744 <VgaText::clearScreen()>:
c0010744:	57                   	push   edi
c0010745:	56                   	push   esi
c0010746:	31 f6                	xor    esi,esi
c0010748:	53                   	push   ebx
c0010749:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001074d:	52                   	push   edx
c001074e:	6a 00                	push   0x0
c0010750:	6a 00                	push   0x0
c0010752:	53                   	push   ebx
c0010753:	e8 da f8 ff ff       	call   c0010032 <VgaText::setCursor(int, int)>
c0010758:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c001075f:	83 c4 10             	add    esp,0x10
c0010762:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010768:	7e 26                	jle    c0010790 <VgaText::clearScreen()+0x4c>
c001076a:	31 ff                	xor    edi,edi
c001076c:	50                   	push   eax
c001076d:	50                   	push   eax
c001076e:	56                   	push   esi
c001076f:	57                   	push   edi
c0010770:	47                   	inc    edi
c0010771:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010777:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001077d:	6a 20                	push   0x20
c001077f:	53                   	push   ebx
c0010780:	e8 35 f8 ff ff       	call   c000ffba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010785:	83 c4 20             	add    esp,0x20
c0010788:	83 ff 50             	cmp    edi,0x50
c001078b:	75 df                	jne    c001076c <VgaText::clearScreen()+0x28>
c001078d:	46                   	inc    esi
c001078e:	eb d2                	jmp    c0010762 <VgaText::clearScreen()+0x1e>
c0010790:	83 ec 0c             	sub    esp,0xc
c0010793:	53                   	push   ebx
c0010794:	e8 d9 fd ff ff       	call   c0010572 <VgaText::doUpdate()>
c0010799:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c00107a0:	83 c4 10             	add    esp,0x10
c00107a3:	5b                   	pop    ebx
c00107a4:	5e                   	pop    esi
c00107a5:	5f                   	pop    edi
c00107a6:	c3                   	ret    
c00107a7:	90                   	nop

c00107a8 <VgaText::putchar(char)>:
c00107a8:	56                   	push   esi
c00107a9:	53                   	push   ebx
c00107aa:	83 ec 14             	sub    esp,0x14
c00107ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00107b1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00107b5:	3c 5b                	cmp    al,0x5b
c00107b7:	75 21                	jne    c00107da <VgaText::putchar(char)+0x32>
c00107b9:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c00107c0:	74 28                	je     c00107ea <VgaText::putchar(char)+0x42>
c00107c2:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c00107cb:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c00107d5:	e9 e2 00 00 00       	jmp    c00108bc <VgaText::putchar(char)+0x114>
c00107da:	3c 1b                	cmp    al,0x1b
c00107dc:	75 0c                	jne    c00107ea <VgaText::putchar(char)+0x42>
c00107de:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c00107e5:	e9 d2 00 00 00       	jmp    c00108bc <VgaText::putchar(char)+0x114>
c00107ea:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c00107f0:	84 c9                	test   cl,cl
c00107f2:	0f 84 ab 00 00 00    	je     c00108a3 <VgaText::putchar(char)+0xfb>
c00107f8:	8d 50 c0             	lea    edx,[eax-0x40]
c00107fb:	80 fa 3e             	cmp    dl,0x3e
c00107fe:	0f 87 82 00 00 00    	ja     c0010886 <VgaText::putchar(char)+0xde>
c0010804:	3c 6d                	cmp    al,0x6d
c0010806:	75 4d                	jne    c0010855 <VgaText::putchar(char)+0xad>
c0010808:	31 f6                	xor    esi,esi
c001080a:	31 d2                	xor    edx,edx
c001080c:	31 c0                	xor    eax,eax
c001080e:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010814:	7e 30                	jle    c0010846 <VgaText::putchar(char)+0x9e>
c0010816:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c001081e:	80 fa 3b             	cmp    dl,0x3b
c0010821:	75 17                	jne    c001083a <VgaText::putchar(char)+0x92>
c0010823:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010827:	50                   	push   eax
c0010828:	53                   	push   ebx
c0010829:	e8 fc f5 ff ff       	call   c000fe2a <VgaText::doANSI_SGR(int)>
c001082e:	59                   	pop    ecx
c001082f:	31 d2                	xor    edx,edx
c0010831:	58                   	pop    eax
c0010832:	31 c0                	xor    eax,eax
c0010834:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010838:	eb 09                	jmp    c0010843 <VgaText::putchar(char)+0x9b>
c001083a:	6b c0 0a             	imul   eax,eax,0xa
c001083d:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010841:	88 ca                	mov    dl,cl
c0010843:	46                   	inc    esi
c0010844:	eb c8                	jmp    c001080e <VgaText::putchar(char)+0x66>
c0010846:	84 d2                	test   dl,dl
c0010848:	74 31                	je     c001087b <VgaText::putchar(char)+0xd3>
c001084a:	50                   	push   eax
c001084b:	53                   	push   ebx
c001084c:	e8 d9 f5 ff ff       	call   c000fe2a <VgaText::doANSI_SGR(int)>
c0010851:	58                   	pop    eax
c0010852:	5a                   	pop    edx
c0010853:	eb 26                	jmp    c001087b <VgaText::putchar(char)+0xd3>
c0010855:	3c 4a                	cmp    al,0x4a
c0010857:	75 22                	jne    c001087b <VgaText::putchar(char)+0xd3>
c0010859:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010860:	75 19                	jne    c001087b <VgaText::putchar(char)+0xd3>
c0010862:	83 ec 0c             	sub    esp,0xc
c0010865:	53                   	push   ebx
c0010866:	e8 d9 fe ff ff       	call   c0010744 <VgaText::clearScreen()>
c001086b:	83 c4 0c             	add    esp,0xc
c001086e:	6a 00                	push   0x0
c0010870:	6a 00                	push   0x0
c0010872:	53                   	push   ebx
c0010873:	e8 ba f7 ff ff       	call   c0010032 <VgaText::setCursor(int, int)>
c0010878:	83 c4 10             	add    esp,0x10
c001087b:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010884:	eb 36                	jmp    c00108bc <VgaText::putchar(char)+0x114>
c0010886:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c001088c:	83 fa 0e             	cmp    edx,0xe
c001088f:	7f 2b                	jg     c00108bc <VgaText::putchar(char)+0x114>
c0010891:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010894:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c001089a:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00108a1:	eb 19                	jmp    c00108bc <VgaText::putchar(char)+0x114>
c00108a3:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00108a9:	0f be c0             	movsx  eax,al
c00108ac:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00108b2:	50                   	push   eax
c00108b3:	53                   	push   ebx
c00108b4:	e8 ab fa ff ff       	call   c0010364 <VgaText::putchar(char, VgaColour, VgaColour)>
c00108b9:	83 c4 10             	add    esp,0x10
c00108bc:	83 c4 14             	add    esp,0x14
c00108bf:	5b                   	pop    ebx
c00108c0:	5e                   	pop    esi
c00108c1:	c3                   	ret    

c00108c2 <VgaText::puts(char const*)>:
c00108c2:	53                   	push   ebx
c00108c3:	83 ec 08             	sub    esp,0x8
c00108c6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00108ca:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00108cd:	84 c0                	test   al,al
c00108cf:	74 12                	je     c00108e3 <VgaText::puts(char const*)+0x21>
c00108d1:	43                   	inc    ebx
c00108d2:	51                   	push   ecx
c00108d3:	51                   	push   ecx
c00108d4:	50                   	push   eax
c00108d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108d9:	e8 ca fe ff ff       	call   c00107a8 <VgaText::putchar(char)>
c00108de:	83 c4 10             	add    esp,0x10
c00108e1:	eb e7                	jmp    c00108ca <VgaText::puts(char const*)+0x8>
c00108e3:	83 c4 08             	add    esp,0x8
c00108e6:	5b                   	pop    ebx
c00108e7:	c3                   	ret    

c00108e8 <VgaText::putx(unsigned int)>:
c00108e8:	57                   	push   edi
c00108e9:	b9 11 00 00 00       	mov    ecx,0x11
c00108ee:	56                   	push   esi
c00108ef:	be 0e 6f 02 c0       	mov    esi,0xc0026f0e
c00108f4:	53                   	push   ebx
c00108f5:	83 ec 20             	sub    esp,0x20
c00108f8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00108fc:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010900:	fc                   	cld    
c0010901:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010903:	be 08 00 00 00       	mov    esi,0x8
c0010908:	50                   	push   eax
c0010909:	50                   	push   eax
c001090a:	89 d8                	mov    eax,ebx
c001090c:	c1 e3 04             	shl    ebx,0x4
c001090f:	c1 e8 1c             	shr    eax,0x1c
c0010912:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010917:	50                   	push   eax
c0010918:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001091c:	e8 87 fe ff ff       	call   c00107a8 <VgaText::putchar(char)>
c0010921:	83 c4 10             	add    esp,0x10
c0010924:	4e                   	dec    esi
c0010925:	75 e1                	jne    c0010908 <VgaText::putx(unsigned int)+0x20>
c0010927:	83 c4 20             	add    esp,0x20
c001092a:	5b                   	pop    ebx
c001092b:	5e                   	pop    esi
c001092c:	5f                   	pop    edi
c001092d:	c3                   	ret    

c001092e <VgaText::VgaText(char const*)>:
c001092e:	57                   	push   edi
c001092f:	56                   	push   esi
c0010930:	53                   	push   ebx
c0010931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010935:	83 ec 08             	sub    esp,0x8
c0010938:	6a 00                	push   0x0
c001093a:	50                   	push   eax
c001093b:	e8 62 05 00 00       	call   c0010ea2 <UnixFile::UnixFile(int)>
c0010940:	83 c4 10             	add    esp,0x10
c0010943:	ba 74 6f 02 c0       	mov    edx,0xc0026f74
c0010948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001094c:	89 10                	mov    DWORD PTR [eax],edx
c001094e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010952:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c001095c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010960:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c001096a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001096e:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010979:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010984:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c001098e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010992:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c001099c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a0:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c00109a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ab:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c00109b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b6:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c00109bc:	bb 20 a7 02 c0       	mov    ebx,0xc002a720
c00109c1:	b8 08 00 00 00       	mov    eax,0x8
c00109c6:	fc                   	cld    
c00109c7:	89 d7                	mov    edi,edx
c00109c9:	89 de                	mov    esi,ebx
c00109cb:	89 c1                	mov    ecx,eax
c00109cd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00109cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109d3:	05 1e 10 00 00       	add    eax,0x101e
c00109d8:	83 ec 08             	sub    esp,0x8
c00109db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109df:	50                   	push   eax
c00109e0:	e8 7f fd fe ff       	call   c0000764 <strcpy>
c00109e5:	83 c4 10             	add    esp,0x10
c00109e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ec:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00109f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109fa:	83 c0 0c             	add    eax,0xc
c00109fd:	83 ec 04             	sub    esp,0x4
c0010a00:	68 00 0f 00 00       	push   0xf00
c0010a05:	6a 00                	push   0x0
c0010a07:	50                   	push   eax
c0010a08:	e8 b8 fc fe ff       	call   c00006c5 <memset>
c0010a0d:	83 c4 10             	add    esp,0x10
c0010a10:	83 ec 04             	sub    esp,0x4
c0010a13:	6a 00                	push   0x0
c0010a15:	6a 07                	push   0x7
c0010a17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a1b:	e8 c2 f4 ff ff       	call   c000fee2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010a20:	83 c4 10             	add    esp,0x10
c0010a23:	83 ec 08             	sub    esp,0x8
c0010a26:	6a 02                	push   0x2
c0010a28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a2c:	e8 49 fa ff ff       	call   c001047a <VgaText::setCursorHeight(int)>
c0010a31:	83 c4 10             	add    esp,0x10
c0010a34:	83 ec 04             	sub    esp,0x4
c0010a37:	6a 00                	push   0x0
c0010a39:	6a 00                	push   0x0
c0010a3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a3f:	e8 ee f5 ff ff       	call   c0010032 <VgaText::setCursor(int, int)>
c0010a44:	83 c4 10             	add    esp,0x10
c0010a47:	83 ec 08             	sub    esp,0x8
c0010a4a:	6a 01                	push   0x1
c0010a4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a50:	e8 8b f3 ff ff       	call   c000fde0 <VgaText::showCursor(bool)>
c0010a55:	83 c4 10             	add    esp,0x10
c0010a58:	83 ec 08             	sub    esp,0x8
c0010a5b:	6a 01                	push   0x1
c0010a5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a61:	e8 8a f3 ff ff       	call   c000fdf0 <VgaText::disableBlink(bool)>
c0010a66:	83 c4 10             	add    esp,0x10
c0010a69:	83 ec 0c             	sub    esp,0xc
c0010a6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a70:	e8 cf fc ff ff       	call   c0010744 <VgaText::clearScreen()>
c0010a75:	83 c4 10             	add    esp,0x10
c0010a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a7c:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a87:	05 9e 10 00 00       	add    eax,0x109e
c0010a8c:	83 ec 04             	sub    esp,0x4
c0010a8f:	68 96 00 00 00       	push   0x96
c0010a94:	6a 00                	push   0x0
c0010a96:	50                   	push   eax
c0010a97:	e8 29 fc fe ff       	call   c00006c5 <memset>
c0010a9c:	83 c4 10             	add    esp,0x10
c0010a9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aa3:	05 34 11 00 00       	add    eax,0x1134
c0010aa8:	83 ec 04             	sub    esp,0x4
c0010aab:	68 2c 01 00 00       	push   0x12c
c0010ab0:	6a 00                	push   0x0
c0010ab2:	50                   	push   eax
c0010ab3:	e8 0d fc fe ff       	call   c00006c5 <memset>
c0010ab8:	83 c4 10             	add    esp,0x10
c0010abb:	90                   	nop
c0010abc:	5b                   	pop    ebx
c0010abd:	5e                   	pop    esi
c0010abe:	5f                   	pop    edi
c0010abf:	c3                   	ret    

c0010ac0 <VgaText::receiveKey(unsigned char)>:
c0010ac0:	55                   	push   ebp
c0010ac1:	57                   	push   edi
c0010ac2:	56                   	push   esi
c0010ac3:	53                   	push   ebx
c0010ac4:	83 ec 1c             	sub    esp,0x1c
c0010ac7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010acb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010acf:	84 db                	test   bl,bl
c0010ad1:	0f 84 c9 00 00 00    	je     c0010ba0 <VgaText::receiveKey(unsigned char)+0xe0>
c0010ad7:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010add:	80 fb 08             	cmp    bl,0x8
c0010ae0:	75 2c                	jne    c0010b0e <VgaText::receiveKey(unsigned char)+0x4e>
c0010ae2:	83 ec 0c             	sub    esp,0xc
c0010ae5:	57                   	push   edi
c0010ae6:	e8 f7 fb fe ff       	call   c00006e2 <strlen>
c0010aeb:	83 c4 10             	add    esp,0x10
c0010aee:	85 c0                	test   eax,eax
c0010af0:	74 41                	je     c0010b33 <VgaText::receiveKey(unsigned char)+0x73>
c0010af2:	50                   	push   eax
c0010af3:	50                   	push   eax
c0010af4:	6a 08                	push   0x8
c0010af6:	56                   	push   esi
c0010af7:	e8 ac fc ff ff       	call   c00107a8 <VgaText::putchar(char)>
c0010afc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010aff:	e8 de fb fe ff       	call   c00006e2 <strlen>
c0010b04:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010b0c:	eb 22                	jmp    c0010b30 <VgaText::receiveKey(unsigned char)+0x70>
c0010b0e:	0f be c3             	movsx  eax,bl
c0010b11:	52                   	push   edx
c0010b12:	52                   	push   edx
c0010b13:	50                   	push   eax
c0010b14:	56                   	push   esi
c0010b15:	e8 8e fc ff ff       	call   c00107a8 <VgaText::putchar(char)>
c0010b1a:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010b1e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010b23:	59                   	pop    ecx
c0010b24:	5d                   	pop    ebp
c0010b25:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010b29:	50                   	push   eax
c0010b2a:	57                   	push   edi
c0010b2b:	e8 eb fc fe ff       	call   c000081b <strcat>
c0010b30:	83 c4 10             	add    esp,0x10
c0010b33:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010b3a:	75 05                	jne    c0010b41 <VgaText::receiveKey(unsigned char)+0x81>
c0010b3c:	80 fb 0a             	cmp    bl,0xa
c0010b3f:	75 53                	jne    c0010b94 <VgaText::receiveKey(unsigned char)+0xd4>
c0010b41:	83 ec 0c             	sub    esp,0xc
c0010b44:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010b4a:	53                   	push   ebx
c0010b4b:	e8 92 fb fe ff       	call   c00006e2 <strlen>
c0010b50:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010b53:	89 c5                	mov    ebp,eax
c0010b55:	e8 88 fb fe ff       	call   c00006e2 <strlen>
c0010b5a:	83 c4 10             	add    esp,0x10
c0010b5d:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010b61:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010b66:	76 10                	jbe    c0010b78 <VgaText::receiveKey(unsigned char)+0xb8>
c0010b68:	83 ec 0c             	sub    esp,0xc
c0010b6b:	68 1f 6f 02 c0       	push   0xc0026f1f
c0010b70:	e8 92 7f 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c0010b75:	83 c4 10             	add    esp,0x10
c0010b78:	50                   	push   eax
c0010b79:	50                   	push   eax
c0010b7a:	57                   	push   edi
c0010b7b:	53                   	push   ebx
c0010b7c:	e8 9a fc fe ff       	call   c000081b <strcat>
c0010b81:	83 c4 0c             	add    esp,0xc
c0010b84:	68 96 00 00 00       	push   0x96
c0010b89:	6a 00                	push   0x0
c0010b8b:	57                   	push   edi
c0010b8c:	e8 34 fb fe ff       	call   c00006c5 <memset>
c0010b91:	83 c4 10             	add    esp,0x10
c0010b94:	83 ec 0c             	sub    esp,0xc
c0010b97:	56                   	push   esi
c0010b98:	e8 d5 f9 ff ff       	call   c0010572 <VgaText::doUpdate()>
c0010b9d:	83 c4 10             	add    esp,0x10
c0010ba0:	83 c4 1c             	add    esp,0x1c
c0010ba3:	5b                   	pop    ebx
c0010ba4:	5e                   	pop    esi
c0010ba5:	5f                   	pop    edi
c0010ba6:	5d                   	pop    ebp
c0010ba7:	c3                   	ret    

c0010ba8 <VgaText::write(unsigned long long, void*, int*)>:
c0010ba8:	55                   	push   ebp
c0010ba9:	57                   	push   edi
c0010baa:	56                   	push   esi
c0010bab:	53                   	push   ebx
c0010bac:	83 ec 0c             	sub    esp,0xc
c0010baf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010bb3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010bb7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010bbb:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010bc2:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010bc5:	39 eb                	cmp    ebx,ebp
c0010bc7:	74 13                	je     c0010bdc <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010bc9:	43                   	inc    ebx
c0010bca:	50                   	push   eax
c0010bcb:	50                   	push   eax
c0010bcc:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010bd0:	50                   	push   eax
c0010bd1:	56                   	push   esi
c0010bd2:	e8 d1 fb ff ff       	call   c00107a8 <VgaText::putchar(char)>
c0010bd7:	83 c4 10             	add    esp,0x10
c0010bda:	eb e9                	jmp    c0010bc5 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010bdc:	83 ec 0c             	sub    esp,0xc
c0010bdf:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010be6:	56                   	push   esi
c0010be7:	e8 86 f9 ff ff       	call   c0010572 <VgaText::doUpdate()>
c0010bec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010bf0:	89 38                	mov    DWORD PTR [eax],edi
c0010bf2:	83 c4 1c             	add    esp,0x1c
c0010bf5:	31 c0                	xor    eax,eax
c0010bf7:	5b                   	pop    ebx
c0010bf8:	5e                   	pop    esi
c0010bf9:	5f                   	pop    edi
c0010bfa:	5d                   	pop    ebp
c0010bfb:	c3                   	ret    

c0010bfc <newTerminal(char*)>:
c0010bfc:	83 ec 28             	sub    esp,0x28
c0010bff:	68 60 12 00 00       	push   0x1260
c0010c04:	e8 7f 15 00 00       	call   c0012188 <operator new(unsigned long)>
c0010c09:	5a                   	pop    edx
c0010c0a:	59                   	pop    ecx
c0010c0b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010c0f:	50                   	push   eax
c0010c10:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010c14:	e8 15 fd ff ff       	call   c001092e <VgaText::VgaText(char const*)>
c0010c19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010c1d:	83 c4 2c             	add    esp,0x2c
c0010c20:	c3                   	ret    
c0010c21:	90                   	nop

c0010c22 <TSS::TSS()>:
c0010c22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c2d:	90                   	nop
c0010c2e:	c3                   	ret    
c0010c2f:	90                   	nop

c0010c30 <TSS::setESP(unsigned long)>:
c0010c30:	55                   	push   ebp
c0010c31:	89 e5                	mov    ebp,esp
c0010c33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c39:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c3c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c3f:	90                   	nop
c0010c40:	5d                   	pop    ebp
c0010c41:	c3                   	ret    

c0010c42 <TSS::flush()>:
c0010c42:	55                   	push   ebp
c0010c43:	89 e5                	mov    ebp,esp
c0010c45:	83 ec 10             	sub    esp,0x10
c0010c48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c4d:	83 c8 03             	or     eax,0x3
c0010c50:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010c54:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010c58:	66 89 d0             	mov    ax,dx
c0010c5b:	0f 00 d8             	ltr    ax
c0010c5e:	90                   	nop
c0010c5f:	c9                   	leave  
c0010c60:	c3                   	ret    
c0010c61:	90                   	nop

c0010c62 <TSS::setup(unsigned long, unsigned long)>:
c0010c62:	55                   	push   ebp
c0010c63:	89 e5                	mov    ebp,esp
c0010c65:	53                   	push   ebx
c0010c66:	83 ec 14             	sub    esp,0x14
c0010c69:	83 ec 0c             	sub    esp,0xc
c0010c6c:	6a 68                	push   0x68
c0010c6e:	e8 fb e4 ff ff       	call   c000f16e <malloc>
c0010c73:	83 c4 10             	add    esp,0x10
c0010c76:	89 c2                	mov    edx,eax
c0010c78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c7b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c81:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c84:	83 ec 04             	sub    esp,0x4
c0010c87:	6a 68                	push   0x68
c0010c89:	6a 00                	push   0x0
c0010c8b:	50                   	push   eax
c0010c8c:	e8 34 fa fe ff       	call   c00006c5 <memset>
c0010c91:	83 c4 10             	add    esp,0x10
c0010c94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c9a:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010ca0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ca3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ca6:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010cac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010caf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cb2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010cb5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010cb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cbb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cbe:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010cc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cc7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cca:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010cd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cd3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cd6:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010cdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cdf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ce2:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010ce8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ceb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cee:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010cf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cf7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cfa:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010d00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d06:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010d09:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010d0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d0f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d12:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010d15:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010d18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d1e:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010d25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d28:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c0010d2b:	e8 85 45 01 00       	call   c00252b5 <CPU::readCR3()>
c0010d30:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0010d33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d39:	83 ec 08             	sub    esp,0x8
c0010d3c:	50                   	push   eax
c0010d3d:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010d40:	50                   	push   eax
c0010d41:	e8 fe db ff ff       	call   c000e944 <GDTEntry::setBase(unsigned int)>
c0010d46:	83 c4 10             	add    esp,0x10
c0010d49:	83 ec 08             	sub    esp,0x8
c0010d4c:	6a 68                	push   0x68
c0010d4e:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010d51:	50                   	push   eax
c0010d52:	e8 09 dc ff ff       	call   c000e960 <GDTEntry::setLimit(unsigned int)>
c0010d57:	83 c4 10             	add    esp,0x10
c0010d5a:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c0010d5e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010d61:	83 e0 0f             	and    eax,0xf
c0010d64:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010d67:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010d6a:	83 c8 40             	or     eax,0x40
c0010d6d:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010d70:	e8 0f 6c 00 00       	call   c0017984 <CPU::current()>
c0010d75:	05 78 01 00 00       	add    eax,0x178
c0010d7a:	83 ec 04             	sub    esp,0x4
c0010d7d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0010d80:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010d83:	50                   	push   eax
c0010d84:	e8 0b dc ff ff       	call   c000e994 <GDT::addEntry(GDTEntry)>
c0010d89:	83 c4 10             	add    esp,0x10
c0010d8c:	89 c2                	mov    edx,eax
c0010d8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d91:	89 10                	mov    DWORD PTR [eax],edx
c0010d93:	e8 ec 6b 00 00       	call   c0017984 <CPU::current()>
c0010d98:	05 78 01 00 00       	add    eax,0x178
c0010d9d:	83 ec 0c             	sub    esp,0xc
c0010da0:	50                   	push   eax
c0010da1:	e8 32 dc ff ff       	call   c000e9d8 <GDT::flush()>
c0010da6:	83 c4 10             	add    esp,0x10
c0010da9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010dac:	8b 00                	mov    eax,DWORD PTR [eax]
c0010dae:	83 ec 08             	sub    esp,0x8
c0010db1:	50                   	push   eax
c0010db2:	68 88 6f 02 c0       	push   0xc0026f88
c0010db7:	e8 bb 14 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0010dbc:	83 c4 10             	add    esp,0x10
c0010dbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010dc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0010dc4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010dc7:	c9                   	leave  
c0010dc8:	c3                   	ret    
c0010dc9:	90                   	nop

c0010dca <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010dca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010dd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dd5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010dda:	75 08                	jne    c0010de4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010ddc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010de2:	eb 38                	jmp    c0010e1c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010de4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010de9:	75 17                	jne    c0010e02 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010deb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010df0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010df3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010df9:	8b 10                	mov    edx,DWORD PTR [eax]
c0010dfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010dff:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010e02:	89 c1                	mov    ecx,eax
c0010e04:	83 e1 fd             	and    ecx,0xfffffffd
c0010e07:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010e0d:	74 cd                	je     c0010ddc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010e0f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010e14:	83 e0 ef             	and    eax,0xffffffef
c0010e17:	83 f8 08             	cmp    eax,0x8
c0010e1a:	76 c0                	jbe    c0010ddc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010e1c:	31 c0                	xor    eax,eax
c0010e1e:	c3                   	ret    
c0010e1f:	90                   	nop

c0010e20 <ReservedFilename::isAtty()>:
c0010e20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e24:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010e27:	31 c0                	xor    eax,eax
c0010e29:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010e2f:	74 09                	je     c0010e3a <ReservedFilename::isAtty()+0x1a>
c0010e31:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010e37:	0f 94 c0             	sete   al
c0010e3a:	c3                   	ret    
c0010e3b:	90                   	nop

c0010e3c <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010e3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010e44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e47:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010e4b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010e50:	75 08                	jne    c0010e5a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010e52:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010e58:	eb 3d                	jmp    c0010e97 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010e5a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010e5f:	75 17                	jne    c0010e78 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010e61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e66:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010e69:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010e6f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e71:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010e75:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010e78:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010e7d:	75 04                	jne    c0010e83 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010e7f:	89 0a                	mov    DWORD PTR [edx],ecx
c0010e81:	eb 14                	jmp    c0010e97 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010e83:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010e88:	74 c8                	je     c0010e52 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010e8a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010e8f:	83 e0 ef             	and    eax,0xffffffef
c0010e92:	83 f8 08             	cmp    eax,0x8
c0010e95:	76 bb                	jbe    c0010e52 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010e97:	31 c0                	xor    eax,eax
c0010e99:	c3                   	ret    

c0010e9a <UnixFile::getFileDescriptor()>:
c0010e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ea1:	c3                   	ret    

c0010ea2 <UnixFile::UnixFile(int)>:
c0010ea2:	53                   	push   ebx
c0010ea3:	83 ec 18             	sub    esp,0x18
c0010ea6:	ba 74 70 02 c0       	mov    edx,0xc0027074
c0010eab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eaf:	89 10                	mov    DWORD PTR [eax],edx
c0010eb1:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c0010eb9:	0f 8f 4d 01 00 00    	jg     c001100c <UnixFile::UnixFile(int)+0x16a>
c0010ebf:	a1 a0 96 02 c0       	mov    eax,ds:0xc00296a0
c0010ec4:	8d 50 01             	lea    edx,[eax+0x1]
c0010ec7:	89 15 a0 96 02 c0    	mov    DWORD PTR ds:0xc00296a0,edx
c0010ecd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010ed1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010ed4:	83 ec 08             	sub    esp,0x8
c0010ed7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010edb:	68 d8 a7 02 c0       	push   0xc002a7d8
c0010ee0:	e8 45 44 01 00       	call   c002532a <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010ee5:	83 c4 10             	add    esp,0x10
c0010ee8:	a0 d4 a7 02 c0       	mov    al,ds:0xc002a7d4
c0010eed:	83 f0 01             	xor    eax,0x1
c0010ef0:	84 c0                	test   al,al
c0010ef2:	0f 84 15 01 00 00    	je     c001100d <UnixFile::UnixFile(int)+0x16b>
c0010ef8:	c6 05 d4 a7 02 c0 01 	mov    BYTE PTR ds:0xc002a7d4,0x1
c0010eff:	83 ec 0c             	sub    esp,0xc
c0010f02:	6a 0c                	push   0xc
c0010f04:	e8 7f 12 00 00       	call   c0012188 <operator new(unsigned long)>
c0010f09:	83 c4 10             	add    esp,0x10
c0010f0c:	89 c3                	mov    ebx,eax
c0010f0e:	83 ec 08             	sub    esp,0x8
c0010f11:	68 03 ff ff 0f       	push   0xfffff03
c0010f16:	53                   	push   ebx
c0010f17:	e8 f6 00 00 00       	call   c0011012 <ReservedFilename::ReservedFilename(int)>
c0010f1c:	83 c4 10             	add    esp,0x10
c0010f1f:	89 1d cc a7 02 c0    	mov    DWORD PTR ds:0xc002a7cc,ebx
c0010f25:	83 ec 0c             	sub    esp,0xc
c0010f28:	6a 0c                	push   0xc
c0010f2a:	e8 59 12 00 00       	call   c0012188 <operator new(unsigned long)>
c0010f2f:	83 c4 10             	add    esp,0x10
c0010f32:	89 c3                	mov    ebx,eax
c0010f34:	83 ec 08             	sub    esp,0x8
c0010f37:	68 01 ff ff 0f       	push   0xfffff01
c0010f3c:	53                   	push   ebx
c0010f3d:	e8 d0 00 00 00       	call   c0011012 <ReservedFilename::ReservedFilename(int)>
c0010f42:	83 c4 10             	add    esp,0x10
c0010f45:	89 1d d0 a7 02 c0    	mov    DWORD PTR ds:0xc002a7d0,ebx
c0010f4b:	83 ec 0c             	sub    esp,0xc
c0010f4e:	6a 0c                	push   0xc
c0010f50:	e8 33 12 00 00       	call   c0012188 <operator new(unsigned long)>
c0010f55:	83 c4 10             	add    esp,0x10
c0010f58:	89 c3                	mov    ebx,eax
c0010f5a:	83 ec 08             	sub    esp,0x8
c0010f5d:	68 00 ff ff 0f       	push   0xfffff00
c0010f62:	53                   	push   ebx
c0010f63:	e8 aa 00 00 00       	call   c0011012 <ReservedFilename::ReservedFilename(int)>
c0010f68:	83 c4 10             	add    esp,0x10
c0010f6b:	89 1d c4 a7 02 c0    	mov    DWORD PTR ds:0xc002a7c4,ebx
c0010f71:	83 ec 0c             	sub    esp,0xc
c0010f74:	6a 0c                	push   0xc
c0010f76:	e8 0d 12 00 00       	call   c0012188 <operator new(unsigned long)>
c0010f7b:	83 c4 10             	add    esp,0x10
c0010f7e:	89 c3                	mov    ebx,eax
c0010f80:	83 ec 08             	sub    esp,0x8
c0010f83:	68 02 ff ff 0f       	push   0xfffff02
c0010f88:	53                   	push   ebx
c0010f89:	e8 84 00 00 00       	call   c0011012 <ReservedFilename::ReservedFilename(int)>
c0010f8e:	83 c4 10             	add    esp,0x10
c0010f91:	89 1d c8 a7 02 c0    	mov    DWORD PTR ds:0xc002a7c8,ebx
c0010f97:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f9f:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0010fa4:	7f 67                	jg     c001100d <UnixFile::UnixFile(int)+0x16b>
c0010fa6:	83 ec 0c             	sub    esp,0xc
c0010fa9:	6a 0c                	push   0xc
c0010fab:	e8 d8 11 00 00       	call   c0012188 <operator new(unsigned long)>
c0010fb0:	83 c4 10             	add    esp,0x10
c0010fb3:	89 c3                	mov    ebx,eax
c0010fb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fb9:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010fbe:	83 ec 08             	sub    esp,0x8
c0010fc1:	50                   	push   eax
c0010fc2:	53                   	push   ebx
c0010fc3:	e8 4a 00 00 00       	call   c0011012 <ReservedFilename::ReservedFilename(int)>
c0010fc8:	83 c4 10             	add    esp,0x10
c0010fcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fcf:	89 1c 85 a0 a7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5860],ebx
c0010fd6:	83 ec 0c             	sub    esp,0xc
c0010fd9:	6a 0c                	push   0xc
c0010fdb:	e8 a8 11 00 00       	call   c0012188 <operator new(unsigned long)>
c0010fe0:	83 c4 10             	add    esp,0x10
c0010fe3:	89 c3                	mov    ebx,eax
c0010fe5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fe9:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010fee:	83 ec 08             	sub    esp,0x8
c0010ff1:	50                   	push   eax
c0010ff2:	53                   	push   ebx
c0010ff3:	e8 1a 00 00 00       	call   c0011012 <ReservedFilename::ReservedFilename(int)>
c0010ff8:	83 c4 10             	add    esp,0x10
c0010ffb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fff:	89 1c 85 60 a7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd58a0],ebx
c0011006:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001100a:	eb 93                	jmp    c0010f9f <UnixFile::UnixFile(int)+0xfd>
c001100c:	90                   	nop
c001100d:	83 c4 18             	add    esp,0x18
c0011010:	5b                   	pop    ebx
c0011011:	c3                   	ret    

c0011012 <ReservedFilename::ReservedFilename(int)>:
c0011012:	83 ec 0c             	sub    esp,0xc
c0011015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011019:	83 ec 08             	sub    esp,0x8
c001101c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011020:	50                   	push   eax
c0011021:	e8 7c fe ff ff       	call   c0010ea2 <UnixFile::UnixFile(int)>
c0011026:	83 c4 10             	add    esp,0x10
c0011029:	ba 90 70 02 c0       	mov    edx,0xc0027090
c001102e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011032:	89 10                	mov    DWORD PTR [eax],edx
c0011034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011038:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001103c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001103f:	90                   	nop
c0011040:	83 c4 0c             	add    esp,0xc
c0011043:	c3                   	ret    

c0011044 <UnixFile::~UnixFile()>:
c0011044:	83 ec 1c             	sub    esp,0x1c
c0011047:	ba 74 70 02 c0       	mov    edx,0xc0027074
c001104c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011050:	89 10                	mov    DWORD PTR [eax],edx
c0011052:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011056:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011059:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001105e:	7f 73                	jg     c00110d3 <UnixFile::~UnixFile()+0x8f>
c0011060:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011068:	83 ec 0c             	sub    esp,0xc
c001106b:	68 d8 a7 02 c0       	push   0xc002a7d8
c0011070:	e8 89 43 01 00       	call   c00253fe <LinkedList<UnixFile>::getFirstElement()>
c0011075:	83 c4 10             	add    esp,0x10
c0011078:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001107c:	83 ec 0c             	sub    esp,0xc
c001107f:	68 d8 a7 02 c0       	push   0xc002a7d8
c0011084:	e8 7d 43 01 00       	call   c0025406 <LinkedList<UnixFile>::removeFirst()>
c0011089:	83 c4 10             	add    esp,0x10
c001108c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011090:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011094:	74 40                	je     c00110d6 <UnixFile::~UnixFile()+0x92>
c0011096:	83 ec 08             	sub    esp,0x8
c0011099:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001109d:	68 d8 a7 02 c0       	push   0xc002a7d8
c00110a2:	e8 83 42 01 00       	call   c002532a <LinkedList<UnixFile>::addElement(UnixFile*)>
c00110a7:	83 c4 10             	add    esp,0x10
c00110aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00110ae:	8d 50 01             	lea    edx,[eax+0x1]
c00110b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00110b5:	3d 88 13 00 00       	cmp    eax,0x1388
c00110ba:	0f 94 c0             	sete   al
c00110bd:	84 c0                	test   al,al
c00110bf:	74 a7                	je     c0011068 <UnixFile::~UnixFile()+0x24>
c00110c1:	83 ec 0c             	sub    esp,0xc
c00110c4:	68 4c 70 02 c0       	push   0xc002704c
c00110c9:	e8 39 7a 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c00110ce:	83 c4 10             	add    esp,0x10
c00110d1:	eb 95                	jmp    c0011068 <UnixFile::~UnixFile()+0x24>
c00110d3:	90                   	nop
c00110d4:	eb 01                	jmp    c00110d7 <UnixFile::~UnixFile()+0x93>
c00110d6:	90                   	nop
c00110d7:	90                   	nop
c00110d8:	83 c4 1c             	add    esp,0x1c
c00110db:	c3                   	ret    

c00110dc <UnixFile::~UnixFile()>:
c00110dc:	83 ec 0c             	sub    esp,0xc
c00110df:	83 ec 0c             	sub    esp,0xc
c00110e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110e6:	e8 59 ff ff ff       	call   c0011044 <UnixFile::~UnixFile()>
c00110eb:	83 c4 10             	add    esp,0x10
c00110ee:	83 ec 08             	sub    esp,0x8
c00110f1:	6a 0c                	push   0xc
c00110f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110f7:	e8 9b 10 00 00       	call   c0012197 <operator delete(void*, unsigned long)>
c00110fc:	83 c4 10             	add    esp,0x10
c00110ff:	83 c4 0c             	add    esp,0xc
c0011102:	c3                   	ret    
c0011103:	90                   	nop

c0011104 <ReservedFilename::~ReservedFilename()>:
c0011104:	83 ec 0c             	sub    esp,0xc
c0011107:	ba 90 70 02 c0       	mov    edx,0xc0027090
c001110c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011110:	89 10                	mov    DWORD PTR [eax],edx
c0011112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011116:	83 ec 0c             	sub    esp,0xc
c0011119:	50                   	push   eax
c001111a:	e8 25 ff ff ff       	call   c0011044 <UnixFile::~UnixFile()>
c001111f:	83 c4 10             	add    esp,0x10
c0011122:	90                   	nop
c0011123:	83 c4 0c             	add    esp,0xc
c0011126:	c3                   	ret    
c0011127:	90                   	nop

c0011128 <ReservedFilename::~ReservedFilename()>:
c0011128:	83 ec 0c             	sub    esp,0xc
c001112b:	83 ec 0c             	sub    esp,0xc
c001112e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011132:	e8 cd ff ff ff       	call   c0011104 <ReservedFilename::~ReservedFilename()>
c0011137:	83 c4 10             	add    esp,0x10
c001113a:	83 ec 08             	sub    esp,0x8
c001113d:	6a 0c                	push   0xc
c001113f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011143:	e8 4f 10 00 00       	call   c0012197 <operator delete(void*, unsigned long)>
c0011148:	83 c4 10             	add    esp,0x10
c001114b:	83 c4 0c             	add    esp,0xc
c001114e:	c3                   	ret    

c001114f <getFromFileDescriptor(int)>:
c001114f:	53                   	push   ebx
c0011150:	83 ec 08             	sub    esp,0x8
c0011153:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011157:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001115d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011163:	7f 2c                	jg     c0011191 <getFromFileDescriptor(int)+0x42>
c0011165:	83 ec 0c             	sub    esp,0xc
c0011168:	68 d8 a7 02 c0       	push   0xc002a7d8
c001116d:	e8 8c 42 01 00       	call   c00253fe <LinkedList<UnixFile>::getFirstElement()>
c0011172:	83 c4 10             	add    esp,0x10
c0011175:	85 c0                	test   eax,eax
c0011177:	75 04                	jne    c001117d <getFromFileDescriptor(int)+0x2e>
c0011179:	31 c0                	xor    eax,eax
c001117b:	eb 6e                	jmp    c00111eb <getFromFileDescriptor(int)+0x9c>
c001117d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011180:	74 69                	je     c00111eb <getFromFileDescriptor(int)+0x9c>
c0011182:	52                   	push   edx
c0011183:	52                   	push   edx
c0011184:	50                   	push   eax
c0011185:	68 d8 a7 02 c0       	push   0xc002a7d8
c001118a:	e8 19 43 01 00       	call   c00254a8 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001118f:	eb e1                	jmp    c0011172 <getFromFileDescriptor(int)+0x23>
c0011191:	a1 cc a7 02 c0       	mov    eax,ds:0xc002a7cc
c0011196:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001119c:	74 4d                	je     c00111eb <getFromFileDescriptor(int)+0x9c>
c001119e:	a1 d0 a7 02 c0       	mov    eax,ds:0xc002a7d0
c00111a3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00111a9:	74 40                	je     c00111eb <getFromFileDescriptor(int)+0x9c>
c00111ab:	a1 c8 a7 02 c0       	mov    eax,ds:0xc002a7c8
c00111b0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00111b6:	74 33                	je     c00111eb <getFromFileDescriptor(int)+0x9c>
c00111b8:	a1 c4 a7 02 c0       	mov    eax,ds:0xc002a7c4
c00111bd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00111c3:	74 26                	je     c00111eb <getFromFileDescriptor(int)+0x9c>
c00111c5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00111cb:	83 f8 08             	cmp    eax,0x8
c00111ce:	77 09                	ja     c00111d9 <getFromFileDescriptor(int)+0x8a>
c00111d0:	8b 04 85 a0 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5860]
c00111d7:	eb 12                	jmp    c00111eb <getFromFileDescriptor(int)+0x9c>
c00111d9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00111df:	83 fb 08             	cmp    ebx,0x8
c00111e2:	77 95                	ja     c0011179 <getFromFileDescriptor(int)+0x2a>
c00111e4:	8b 04 9d 60 a7 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd58a0]
c00111eb:	83 c4 08             	add    esp,0x8
c00111ee:	5b                   	pop    ebx
c00111ef:	c3                   	ret    

c00111f0 <__static_initialization_and_destruction_0(int, int)>:
c00111f0:	83 ec 0c             	sub    esp,0xc
c00111f3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00111f8:	75 34                	jne    c001122e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00111fa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011202:	75 2a                	jne    c001122e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011204:	83 ec 0c             	sub    esp,0xc
c0011207:	68 d8 a7 02 c0       	push   0xc002a7d8
c001120c:	e8 c1 40 01 00       	call   c00252d2 <LinkedList<UnixFile>::LinkedList()>
c0011211:	83 c4 10             	add    esp,0x10
c0011214:	83 ec 04             	sub    esp,0x4
c0011217:	68 18 96 02 c0       	push   0xc0029618
c001121c:	68 d8 a7 02 c0       	push   0xc002a7d8
c0011221:	68 d0 52 02 c0       	push   0xc00252d0
c0011226:	e8 e8 0e 00 00       	call   c0012113 <__cxa_atexit>
c001122b:	83 c4 10             	add    esp,0x10
c001122e:	90                   	nop
c001122f:	83 c4 0c             	add    esp,0xc
c0011232:	c3                   	ret    

c0011233 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011233:	83 ec 0c             	sub    esp,0xc
c0011236:	83 ec 08             	sub    esp,0x8
c0011239:	68 ff ff 00 00       	push   0xffff
c001123e:	6a 01                	push   0x1
c0011240:	e8 ab ff ff ff       	call   c00111f0 <__static_initialization_and_destruction_0(int, int)>
c0011245:	83 c4 10             	add    esp,0x10
c0011248:	83 c4 0c             	add    esp,0xc
c001124b:	c3                   	ret    

c001124c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001124c:	53                   	push   ebx
c001124d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011251:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011255:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c001125b:	89 c8                	mov    eax,ecx
c001125d:	d1 e8                	shr    eax,1
c001125f:	03 05 a8 96 02 c0    	add    eax,DWORD PTR ds:0xc00296a8
c0011265:	83 e1 01             	and    ecx,0x1
c0011268:	8a 10                	mov    dl,BYTE PTR [eax]
c001126a:	75 09                	jne    c0011275 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c001126c:	83 e2 f0             	and    edx,0xfffffff0
c001126f:	09 da                	or     edx,ebx
c0011271:	88 10                	mov    BYTE PTR [eax],dl
c0011273:	5b                   	pop    ebx
c0011274:	c3                   	ret    
c0011275:	c1 e3 04             	shl    ebx,0x4
c0011278:	83 e2 0f             	and    edx,0xf
c001127b:	09 da                	or     edx,ebx
c001127d:	88 10                	mov    BYTE PTR [eax],dl
c001127f:	5b                   	pop    ebx
c0011280:	c3                   	ret    

c0011281 <Virt::getPageState(unsigned long)>:
c0011281:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011285:	8b 0d a8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296a8
c001128b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011291:	89 d0                	mov    eax,edx
c0011293:	d1 e8                	shr    eax,1
c0011295:	83 e2 01             	and    edx,0x1
c0011298:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001129b:	75 04                	jne    c00112a1 <Virt::getPageState(unsigned long)+0x20>
c001129d:	83 e0 0f             	and    eax,0xf
c00112a0:	c3                   	ret    
c00112a1:	c0 e8 04             	shr    al,0x4
c00112a4:	c3                   	ret    

c00112a5 <Virt::allocateKernelVirtualPages(int)>:
c00112a5:	55                   	push   ebp
c00112a6:	31 ed                	xor    ebp,ebp
c00112a8:	57                   	push   edi
c00112a9:	56                   	push   esi
c00112aa:	53                   	push   ebx
c00112ab:	31 db                	xor    ebx,ebx
c00112ad:	83 ec 1c             	sub    esp,0x1c
c00112b0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00112b4:	8b 3d a4 96 02 c0    	mov    edi,DWORD PTR ds:0xc00296a4
c00112ba:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00112bf:	57                   	push   edi
c00112c0:	e8 bc ff ff ff       	call   c0011281 <Virt::getPageState(unsigned long)>
c00112c5:	5a                   	pop    edx
c00112c6:	84 c0                	test   al,al
c00112c8:	75 3a                	jne    c0011304 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00112ca:	85 db                	test   ebx,ebx
c00112cc:	75 02                	jne    c00112d0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00112ce:	89 fd                	mov    ebp,edi
c00112d0:	43                   	inc    ebx
c00112d1:	39 f3                	cmp    ebx,esi
c00112d3:	74 5a                	je     c001132f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00112d5:	47                   	inc    edi
c00112d6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00112dc:	76 31                	jbe    c001130f <Virt::allocateKernelVirtualPages(int)+0x6a>
c00112de:	c7 05 a4 96 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00296a4,0xc8000
c00112e8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00112ed:	75 28                	jne    c0011317 <Virt::allocateKernelVirtualPages(int)+0x72>
c00112ef:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00112f4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00112f9:	57                   	push   edi
c00112fa:	e8 82 ff ff ff       	call   c0011281 <Virt::getPageState(unsigned long)>
c00112ff:	5a                   	pop    edx
c0011300:	84 c0                	test   al,al
c0011302:	74 c6                	je     c00112ca <Virt::allocateKernelVirtualPages(int)+0x25>
c0011304:	31 db                	xor    ebx,ebx
c0011306:	47                   	inc    edi
c0011307:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001130d:	77 cf                	ja     c00112de <Virt::allocateKernelVirtualPages(int)+0x39>
c001130f:	89 3d a4 96 02 c0    	mov    DWORD PTR ds:0xc00296a4,edi
c0011315:	eb a8                	jmp    c00112bf <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011317:	83 ec 0c             	sub    esp,0xc
c001131a:	68 a4 70 02 c0       	push   0xc00270a4
c001131f:	e8 e3 77 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c0011324:	8b 3d a4 96 02 c0    	mov    edi,DWORD PTR ds:0xc00296a4
c001132a:	83 c4 10             	add    esp,0x10
c001132d:	eb 90                	jmp    c00112bf <Virt::allocateKernelVirtualPages(int)+0x1a>
c001132f:	89 2d a4 96 02 c0    	mov    DWORD PTR ds:0xc00296a4,ebp
c0011335:	4b                   	dec    ebx
c0011336:	74 5f                	je     c0011397 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011338:	85 f6                	test   esi,esi
c001133a:	74 3d                	je     c0011379 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001133c:	89 e8                	mov    eax,ebp
c001133e:	31 db                	xor    ebx,ebx
c0011340:	8d 7e ff             	lea    edi,[esi-0x1]
c0011343:	eb 14                	jmp    c0011359 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011345:	6a 01                	push   0x1
c0011347:	43                   	inc    ebx
c0011348:	50                   	push   eax
c0011349:	e8 fe fe ff ff       	call   c001124c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001134e:	58                   	pop    eax
c001134f:	39 f3                	cmp    ebx,esi
c0011351:	5a                   	pop    edx
c0011352:	74 25                	je     c0011379 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011354:	a1 a4 96 02 c0       	mov    eax,ds:0xc00296a4
c0011359:	8d 50 01             	lea    edx,[eax+0x1]
c001135c:	85 db                	test   ebx,ebx
c001135e:	89 15 a4 96 02 c0    	mov    DWORD PTR ds:0xc00296a4,edx
c0011364:	74 20                	je     c0011386 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011366:	39 df                	cmp    edi,ebx
c0011368:	75 db                	jne    c0011345 <Virt::allocateKernelVirtualPages(int)+0xa0>
c001136a:	6a 03                	push   0x3
c001136c:	43                   	inc    ebx
c001136d:	50                   	push   eax
c001136e:	e8 d9 fe ff ff       	call   c001124c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011373:	59                   	pop    ecx
c0011374:	39 f3                	cmp    ebx,esi
c0011376:	58                   	pop    eax
c0011377:	75 db                	jne    c0011354 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011379:	83 c4 1c             	add    esp,0x1c
c001137c:	89 e8                	mov    eax,ebp
c001137e:	5b                   	pop    ebx
c001137f:	c1 e0 0c             	shl    eax,0xc
c0011382:	5e                   	pop    esi
c0011383:	5f                   	pop    edi
c0011384:	5d                   	pop    ebp
c0011385:	c3                   	ret    
c0011386:	6a 02                	push   0x2
c0011388:	bb 01 00 00 00       	mov    ebx,0x1
c001138d:	50                   	push   eax
c001138e:	e8 b9 fe ff ff       	call   c001124c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011393:	58                   	pop    eax
c0011394:	5a                   	pop    edx
c0011395:	eb bd                	jmp    c0011354 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011397:	6a 04                	push   0x4
c0011399:	8d 45 01             	lea    eax,[ebp+0x1]
c001139c:	55                   	push   ebp
c001139d:	a3 a4 96 02 c0       	mov    ds:0xc00296a4,eax
c00113a2:	e8 a5 fe ff ff       	call   c001124c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113a7:	59                   	pop    ecx
c00113a8:	89 e8                	mov    eax,ebp
c00113aa:	5b                   	pop    ebx
c00113ab:	c1 e0 0c             	shl    eax,0xc
c00113ae:	83 c4 1c             	add    esp,0x1c
c00113b1:	5b                   	pop    ebx
c00113b2:	5e                   	pop    esi
c00113b3:	5f                   	pop    edi
c00113b4:	5d                   	pop    ebp
c00113b5:	c3                   	ret    

c00113b6 <Virt::virtualMemorySetup()>:
c00113b6:	53                   	push   ebx
c00113b7:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113bc:	83 ec 08             	sub    esp,0x8
c00113bf:	6a 0f                	push   0xf
c00113c1:	53                   	push   ebx
c00113c2:	43                   	inc    ebx
c00113c3:	e8 84 fe ff ff       	call   c001124c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113c8:	59                   	pop    ecx
c00113c9:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113cf:	58                   	pop    eax
c00113d0:	75 ed                	jne    c00113bf <Virt::virtualMemorySetup()+0x9>
c00113d2:	83 ec 08             	sub    esp,0x8
c00113d5:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113da:	68 00 00 00 c8       	push   0xc8000000
c00113df:	68 2b 72 02 c0       	push   0xc002722b
c00113e4:	e8 8e 0e 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00113e9:	58                   	pop    eax
c00113ea:	5a                   	pop    edx
c00113eb:	68 00 f0 ff ef       	push   0xeffff000
c00113f0:	68 3f 72 02 c0       	push   0xc002723f
c00113f5:	e8 7d 0e 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00113fa:	83 c4 10             	add    esp,0x10
c00113fd:	83 ec 08             	sub    esp,0x8
c0011400:	6a 00                	push   0x0
c0011402:	53                   	push   ebx
c0011403:	43                   	inc    ebx
c0011404:	e8 43 fe ff ff       	call   c001124c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011409:	83 c4 10             	add    esp,0x10
c001140c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011412:	75 e9                	jne    c00113fd <Virt::virtualMemorySetup()+0x47>
c0011414:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011419:	83 ec 08             	sub    esp,0x8
c001141c:	6a 0f                	push   0xf
c001141e:	53                   	push   ebx
c001141f:	43                   	inc    ebx
c0011420:	e8 27 fe ff ff       	call   c001124c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011425:	83 c4 10             	add    esp,0x10
c0011428:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001142e:	75 e9                	jne    c0011419 <Virt::virtualMemorySetup()+0x63>
c0011430:	83 c4 08             	add    esp,0x8
c0011433:	5b                   	pop    ebx
c0011434:	c3                   	ret    

c0011435 <Virt::getAKernelVAS()>:
c0011435:	a1 e4 a7 02 c0       	mov    eax,ds:0xc002a7e4
c001143a:	c3                   	ret    

c001143b <Virt::setupPageSwapping(int)>:
c001143b:	57                   	push   edi
c001143c:	56                   	push   esi
c001143d:	53                   	push   ebx
c001143e:	83 ec 1c             	sub    esp,0x1c
c0011441:	68 14 01 00 00       	push   0x114
c0011446:	e8 3d 0d 00 00       	call   c0012188 <operator new(unsigned long)>
c001144b:	83 c4 0c             	add    esp,0xc
c001144e:	89 c6                	mov    esi,eax
c0011450:	ff 35 94 bb 02 c0    	push   DWORD PTR ds:0xc002bb94
c0011456:	68 53 72 02 c0       	push   0xc0027253
c001145b:	50                   	push   eax
c001145c:	e8 45 13 00 00       	call   c00127a6 <File::File(char const*, Process*)>
c0011461:	89 34 24             	mov    DWORD PTR [esp],esi
c0011464:	e8 19 15 00 00       	call   c0012982 <File::unlink()>
c0011469:	58                   	pop    eax
c001146a:	5a                   	pop    edx
c001146b:	6a 12                	push   0x12
c001146d:	56                   	push   esi
c001146e:	e8 97 13 00 00       	call   c001280a <File::open(FileOpenMode)>
c0011473:	83 c4 10             	add    esp,0x10
c0011476:	85 c0                	test   eax,eax
c0011478:	0f 85 bf 00 00 00    	jne    c001153d <Virt::setupPageSwapping(int)+0x102>
c001147e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011482:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001148a:	c1 e3 08             	shl    ebx,0x8
c001148d:	83 ec 0c             	sub    esp,0xc
c0011490:	68 00 00 01 00       	push   0x10000
c0011495:	e8 d4 dc ff ff       	call   c000f16e <malloc>
c001149a:	83 c4 0c             	add    esp,0xc
c001149d:	89 c7                	mov    edi,eax
c001149f:	68 00 00 01 00       	push   0x10000
c00114a4:	6a 00                	push   0x0
c00114a6:	50                   	push   eax
c00114a7:	e8 19 f2 fe ff       	call   c00006c5 <memset>
c00114ac:	83 c4 10             	add    esp,0x10
c00114af:	85 db                	test   ebx,ebx
c00114b1:	79 03                	jns    c00114b6 <Virt::setupPageSwapping(int)+0x7b>
c00114b3:	83 c3 0f             	add    ebx,0xf
c00114b6:	c1 fb 04             	sar    ebx,0x4
c00114b9:	4b                   	dec    ebx
c00114ba:	83 fb ff             	cmp    ebx,0xffffffff
c00114bd:	74 4b                	je     c001150a <Virt::setupPageSwapping(int)+0xcf>
c00114bf:	83 ec 0c             	sub    esp,0xc
c00114c2:	8b 06                	mov    eax,DWORD PTR [esi]
c00114c4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00114c8:	52                   	push   edx
c00114c9:	57                   	push   edi
c00114ca:	6a 00                	push   0x0
c00114cc:	68 00 00 01 00       	push   0x10000
c00114d1:	56                   	push   esi
c00114d2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00114d5:	83 c4 20             	add    esp,0x20
c00114d8:	85 c0                	test   eax,eax
c00114da:	75 4e                	jne    c001152a <Virt::setupPageSwapping(int)+0xef>
c00114dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114e0:	3d 00 00 01 00       	cmp    eax,0x10000
c00114e5:	74 d2                	je     c00114b9 <Virt::setupPageSwapping(int)+0x7e>
c00114e7:	83 ec 08             	sub    esp,0x8
c00114ea:	4b                   	dec    ebx
c00114eb:	50                   	push   eax
c00114ec:	68 a6 72 02 c0       	push   0xc00272a6
c00114f1:	e8 81 0d 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00114f6:	c7 04 24 af 72 02 c0 	mov    DWORD PTR [esp],0xc00272af
c00114fd:	e8 05 76 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c0011502:	83 c4 10             	add    esp,0x10
c0011505:	83 fb ff             	cmp    ebx,0xffffffff
c0011508:	75 b5                	jne    c00114bf <Virt::setupPageSwapping(int)+0x84>
c001150a:	83 ec 0c             	sub    esp,0xc
c001150d:	56                   	push   esi
c001150e:	e8 55 13 00 00       	call   c0012868 <File::close()>
c0011513:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011516:	e8 73 dc ff ff       	call   c000f18e <rfree>
c001151b:	89 34 24             	mov    DWORD PTR [esp],esi
c001151e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011520:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011523:	83 c4 20             	add    esp,0x20
c0011526:	5b                   	pop    ebx
c0011527:	5e                   	pop    esi
c0011528:	5f                   	pop    edi
c0011529:	c3                   	ret    
c001152a:	83 ec 08             	sub    esp,0x8
c001152d:	50                   	push   eax
c001152e:	68 8e 72 02 c0       	push   0xc002728e
c0011533:	e8 3f 0d 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0011538:	83 c4 10             	add    esp,0x10
c001153b:	eb 9f                	jmp    c00114dc <Virt::setupPageSwapping(int)+0xa1>
c001153d:	83 ec 08             	sub    esp,0x8
c0011540:	50                   	push   eax
c0011541:	68 6a 72 02 c0       	push   0xc002726a
c0011546:	e8 2c 0d 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001154b:	c7 04 24 73 72 02 c0 	mov    DWORD PTR [esp],0xc0027273
c0011552:	e8 b0 75 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c0011557:	83 c4 10             	add    esp,0x10
c001155a:	e9 1f ff ff ff       	jmp    c001147e <Virt::setupPageSwapping(int)+0x43>
c001155f:	90                   	nop

c0011560 <VAS::VAS()>:
c0011560:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011564:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001156b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001156f:	a3 e4 a7 02 c0       	mov    ds:0xc002a7e4,eax
c0011574:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011578:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001157c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011580:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011583:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011587:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c001158e:	90                   	nop
c001158f:	c3                   	ret    

c0011590 <VAS::VAS(VAS*)>:
c0011590:	83 ec 0c             	sub    esp,0xc
c0011593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011597:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001159e:	83 ec 0c             	sub    esp,0xc
c00115a1:	68 c4 70 02 c0       	push   0xc00270c4
c00115a6:	e8 5c 75 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c00115ab:	83 c4 10             	add    esp,0x10
c00115ae:	90                   	nop
c00115af:	83 c4 0c             	add    esp,0xc
c00115b2:	c3                   	ret    
c00115b3:	90                   	nop

c00115b4 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00115b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115b8:	89 c2                	mov    edx,eax
c00115ba:	c1 e8 0a             	shr    eax,0xa
c00115bd:	c1 ea 16             	shr    edx,0x16
c00115c0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00115c5:	19 c9                	sbb    ecx,ecx
c00115c7:	c1 e2 0c             	shl    edx,0xc
c00115ca:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00115d0:	25 fc 0f 00 00       	and    eax,0xffc
c00115d5:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00115dc:	01 d0                	add    eax,edx
c00115de:	c3                   	ret    
c00115df:	90                   	nop

c00115e0 <VAS::getPageTableEntry(unsigned long)>:
c00115e0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115e4:	89 ca                	mov    edx,ecx
c00115e6:	c1 e9 0a             	shr    ecx,0xa
c00115e9:	c1 ea 16             	shr    edx,0x16
c00115ec:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00115f2:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00115f8:	c1 e0 0c             	shl    eax,0xc
c00115fb:	8d 04 08             	lea    eax,[eax+ecx*1]
c00115fe:	c3                   	ret    

c00115ff <Virt::freeKernelVirtualPages(unsigned long)>:
c00115ff:	57                   	push   edi
c0011600:	56                   	push   esi
c0011601:	be 01 00 00 00       	mov    esi,0x1
c0011606:	53                   	push   ebx
c0011607:	83 ec 10             	sub    esp,0x10
c001160a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001160e:	c1 eb 0c             	shr    ebx,0xc
c0011611:	eb 3f                	jmp    c0011652 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011613:	e8 1d fe ff ff       	call   c0011435 <Virt::getAKernelVAS()>
c0011618:	83 ec 08             	sub    esp,0x8
c001161b:	57                   	push   edi
c001161c:	50                   	push   eax
c001161d:	e8 be ff ff ff       	call   c00115e0 <VAS::getPageTableEntry(unsigned long)>
c0011622:	83 c4 10             	add    esp,0x10
c0011625:	8b 00                	mov    eax,DWORD PTR [eax]
c0011627:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001162b:	f6 c4 04             	test   ah,0x4
c001162e:	75 5f                	jne    c001168f <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011630:	80 fa 04             	cmp    dl,0x4
c0011633:	74 78                	je     c00116ad <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011635:	80 fa 02             	cmp    dl,0x2
c0011638:	0f 84 88 00 00 00    	je     c00116c6 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001163e:	80 fa 03             	cmp    dl,0x3
c0011641:	0f 84 ad 00 00 00    	je     c00116f4 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011647:	fe ca                	dec    dl
c0011649:	0f 84 92 00 00 00    	je     c00116e1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001164f:	43                   	inc    ebx
c0011650:	31 f6                	xor    esi,esi
c0011652:	53                   	push   ebx
c0011653:	e8 29 fc ff ff       	call   c0011281 <Virt::getPageState(unsigned long)>
c0011658:	5f                   	pop    edi
c0011659:	89 df                	mov    edi,ebx
c001165b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001165f:	c1 e7 0c             	shl    edi,0xc
c0011662:	84 c0                	test   al,al
c0011664:	75 ad                	jne    c0011613 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011666:	83 ec 0c             	sub    esp,0xc
c0011669:	68 b5 72 02 c0       	push   0xc00272b5
c001166e:	e8 94 74 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c0011673:	e8 bd fd ff ff       	call   c0011435 <Virt::getAKernelVAS()>
c0011678:	5a                   	pop    edx
c0011679:	59                   	pop    ecx
c001167a:	57                   	push   edi
c001167b:	50                   	push   eax
c001167c:	e8 5f ff ff ff       	call   c00115e0 <VAS::getPageTableEntry(unsigned long)>
c0011681:	83 c4 10             	add    esp,0x10
c0011684:	8b 00                	mov    eax,DWORD PTR [eax]
c0011686:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001168a:	f6 c4 04             	test   ah,0x4
c001168d:	74 c0                	je     c001164f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001168f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011693:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011698:	83 ec 0c             	sub    esp,0xc
c001169b:	50                   	push   eax
c001169c:	e8 ed df ff ff       	call   c000f68e <Phys::freePage(unsigned long)>
c00116a1:	83 c4 10             	add    esp,0x10
c00116a4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116a8:	80 fa 04             	cmp    dl,0x4
c00116ab:	75 88                	jne    c0011635 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00116ad:	89 f0                	mov    eax,esi
c00116af:	84 c0                	test   al,al
c00116b1:	75 47                	jne    c00116fa <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00116b3:	c7 44 24 20 e8 70 02 c0 	mov    DWORD PTR [esp+0x20],0xc00270e8
c00116bb:	83 c4 10             	add    esp,0x10
c00116be:	5b                   	pop    ebx
c00116bf:	5e                   	pop    esi
c00116c0:	5f                   	pop    edi
c00116c1:	e9 41 74 00 00       	jmp    c0018b07 <Krnl::panic(char const*)>
c00116c6:	89 f0                	mov    eax,esi
c00116c8:	84 c0                	test   al,al
c00116ca:	75 15                	jne    c00116e1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116cc:	83 ec 0c             	sub    esp,0xc
c00116cf:	68 d1 72 02 c0       	push   0xc00272d1
c00116d4:	e8 2e 74 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c00116d9:	83 c4 10             	add    esp,0x10
c00116dc:	e9 6e ff ff ff       	jmp    c001164f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116e1:	83 ec 08             	sub    esp,0x8
c00116e4:	6a 00                	push   0x0
c00116e6:	53                   	push   ebx
c00116e7:	e8 60 fb ff ff       	call   c001124c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116ec:	83 c4 10             	add    esp,0x10
c00116ef:	e9 5b ff ff ff       	jmp    c001164f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116f4:	89 f0                	mov    eax,esi
c00116f6:	84 c0                	test   al,al
c00116f8:	75 15                	jne    c001170f <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00116fa:	83 ec 08             	sub    esp,0x8
c00116fd:	6a 00                	push   0x0
c00116ff:	53                   	push   ebx
c0011700:	e8 47 fb ff ff       	call   c001124c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011705:	83 c4 10             	add    esp,0x10
c0011708:	83 c4 10             	add    esp,0x10
c001170b:	5b                   	pop    ebx
c001170c:	5e                   	pop    esi
c001170d:	5f                   	pop    edi
c001170e:	c3                   	ret    
c001170f:	c7 44 24 20 ed 72 02 c0 	mov    DWORD PTR [esp+0x20],0xc00272ed
c0011717:	83 c4 10             	add    esp,0x10
c001171a:	5b                   	pop    ebx
c001171b:	5e                   	pop    esi
c001171c:	5f                   	pop    edi
c001171d:	e9 e5 73 00 00       	jmp    c0018b07 <Krnl::panic(char const*)>

c0011722 <VAS::freeAllocatedPages(unsigned long)>:
c0011722:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011726:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001172a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001172e:	74 09                	je     c0011739 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011730:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011734:	e9 c6 fe ff ff       	jmp    c00115ff <Virt::freeKernelVirtualPages(unsigned long)>
c0011739:	c7 44 24 04 0c 71 02 c0 	mov    DWORD PTR [esp+0x4],0xc002710c
c0011741:	e9 31 0b 00 00       	jmp    c0012277 <Dbg::kprintf(char const*, ...)>

c0011746 <VAS::virtualToPhysical(unsigned long)>:
c0011746:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001174a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001174e:	e8 8d fe ff ff       	call   c00115e0 <VAS::getPageTableEntry(unsigned long)>
c0011753:	5a                   	pop    edx
c0011754:	8b 00                	mov    eax,DWORD PTR [eax]
c0011756:	59                   	pop    ecx
c0011757:	25 00 f0 ff ff       	and    eax,0xfffff000
c001175c:	c3                   	ret    
c001175d:	90                   	nop

c001175e <VAS::reflagRange(unsigned long, int, int, int)>:
c001175e:	55                   	push   ebp
c001175f:	57                   	push   edi
c0011760:	56                   	push   esi
c0011761:	53                   	push   ebx
c0011762:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011766:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001176a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001176e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011772:	85 db                	test   ebx,ebx
c0011774:	7e 22                	jle    c0011798 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011776:	c1 e3 0c             	shl    ebx,0xc
c0011779:	01 f3                	add    ebx,esi
c001177b:	56                   	push   esi
c001177c:	81 c6 00 10 00 00    	add    esi,0x1000
c0011782:	55                   	push   ebp
c0011783:	e8 58 fe ff ff       	call   c00115e0 <VAS::getPageTableEntry(unsigned long)>
c0011788:	5a                   	pop    edx
c0011789:	59                   	pop    ecx
c001178a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001178c:	21 f9                	and    ecx,edi
c001178e:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011792:	39 f3                	cmp    ebx,esi
c0011794:	89 08                	mov    DWORD PTR [eax],ecx
c0011796:	75 e3                	jne    c001177b <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011798:	5b                   	pop    ebx
c0011799:	5e                   	pop    esi
c001179a:	5f                   	pop    edi
c001179b:	5d                   	pop    ebp
c001179c:	c3                   	ret    
c001179d:	90                   	nop

c001179e <VAS::setToWriteCombining(unsigned long, int)>:
c001179e:	83 ec 0c             	sub    esp,0xc
c00117a1:	e8 de 61 00 00       	call   c0017984 <CPU::current()>
c00117a6:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00117ad:	75 04                	jne    c00117b3 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00117af:	83 c4 0c             	add    esp,0xc
c00117b2:	c3                   	ret    
c00117b3:	83 ec 0c             	sub    esp,0xc
c00117b6:	68 80 00 00 00       	push   0x80
c00117bb:	6a ff                	push   0xffffffff
c00117bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00117c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00117c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00117c9:	e8 90 ff ff ff       	call   c001175e <VAS::reflagRange(unsigned long, int, int, int)>
c00117ce:	83 c4 20             	add    esp,0x20
c00117d1:	83 c4 0c             	add    esp,0xc
c00117d4:	c3                   	ret    
c00117d5:	90                   	nop

c00117d6 <VAS::mapOtherVASIn(bool, VAS*)>:
c00117d6:	83 ec 0c             	sub    esp,0xc
c00117d9:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00117de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117e2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00117e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117e9:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00117ec:	19 c0                	sbb    eax,eax
c00117ee:	83 ca 03             	or     edx,0x3
c00117f1:	83 e0 fc             	and    eax,0xfffffffc
c00117f4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00117fb:	e8 b5 3a 01 00       	call   c00252b5 <CPU::readCR3()>
c0011800:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011804:	83 c4 0c             	add    esp,0xc
c0011807:	e9 bb 3a 01 00       	jmp    c00252c7 <CPU::writeCR3(unsigned long)>

c001180c <VAS::~VAS()>:
c001180c:	83 ec 2c             	sub    esp,0x2c
c001180f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011817:	e8 3e a2 00 00       	call   c001ba5a <lockScheduler()>
c001181c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011821:	8b 00                	mov    eax,DWORD PTR [eax]
c0011823:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011826:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001182c:	83 ec 04             	sub    esp,0x4
c001182f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011833:	6a 01                	push   0x1
c0011835:	50                   	push   eax
c0011836:	e8 9b ff ff ff       	call   c00117d6 <VAS::mapOtherVASIn(bool, VAS*)>
c001183b:	83 c4 10             	add    esp,0x10
c001183e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011846:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001184e:	0f 8f d7 00 00 00    	jg     c001192b <VAS::~VAS()+0x11f>
c0011854:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011858:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001185b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001185f:	c1 e2 02             	shl    edx,0x2
c0011862:	01 d0                	add    eax,edx
c0011864:	8b 00                	mov    eax,DWORD PTR [eax]
c0011866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001186a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001186e:	83 e0 01             	and    eax,0x1
c0011871:	0f 84 ab 00 00 00    	je     c0011922 <VAS::~VAS()+0x116>
c0011877:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001187f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011887:	7f 75                	jg     c00118fe <VAS::~VAS()+0xf2>
c0011889:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001188d:	c1 e0 0a             	shl    eax,0xa
c0011890:	89 c2                	mov    edx,eax
c0011892:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011896:	01 d0                	add    eax,edx
c0011898:	c1 e0 0c             	shl    eax,0xc
c001189b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001189f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00118a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00118a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118a9:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00118af:	83 ec 04             	sub    esp,0x4
c00118b2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00118b6:	6a 01                	push   0x1
c00118b8:	50                   	push   eax
c00118b9:	e8 f6 fc ff ff       	call   c00115b4 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00118be:	83 c4 10             	add    esp,0x10
c00118c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00118c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00118cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118d3:	25 01 04 00 00       	and    eax,0x401
c00118d8:	3d 01 04 00 00       	cmp    eax,0x401
c00118dd:	75 19                	jne    c00118f8 <VAS::~VAS()+0xec>
c00118df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118e3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118e8:	83 ec 0c             	sub    esp,0xc
c00118eb:	50                   	push   eax
c00118ec:	e8 9d dd ff ff       	call   c000f68e <Phys::freePage(unsigned long)>
c00118f1:	83 c4 10             	add    esp,0x10
c00118f4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118f8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00118fc:	eb 81                	jmp    c001187f <VAS::~VAS()+0x73>
c00118fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011902:	25 00 04 00 00       	and    eax,0x400
c0011907:	74 19                	je     c0011922 <VAS::~VAS()+0x116>
c0011909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001190d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011912:	83 ec 0c             	sub    esp,0xc
c0011915:	50                   	push   eax
c0011916:	e8 73 dd ff ff       	call   c000f68e <Phys::freePage(unsigned long)>
c001191b:	83 c4 10             	add    esp,0x10
c001191e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011922:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011926:	e9 1b ff ff ff       	jmp    c0011846 <VAS::~VAS()+0x3a>
c001192b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001192f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011932:	83 ec 0c             	sub    esp,0xc
c0011935:	50                   	push   eax
c0011936:	e8 c4 fc ff ff       	call   c00115ff <Virt::freeKernelVirtualPages(unsigned long)>
c001193b:	83 c4 10             	add    esp,0x10
c001193e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011942:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011945:	83 ec 0c             	sub    esp,0xc
c0011948:	50                   	push   eax
c0011949:	e8 40 dd ff ff       	call   c000f68e <Phys::freePage(unsigned long)>
c001194e:	83 c4 10             	add    esp,0x10
c0011951:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011955:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011959:	c1 e0 02             	shl    eax,0x2
c001195c:	83 ec 08             	sub    esp,0x8
c001195f:	50                   	push   eax
c0011960:	68 30 71 02 c0       	push   0xc0027130
c0011965:	e8 0d 09 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001196a:	83 c4 10             	add    esp,0x10
c001196d:	e8 ea a0 00 00       	call   c001ba5c <unlockScheduler()>
c0011972:	90                   	nop
c0011973:	83 c4 2c             	add    esp,0x2c
c0011976:	c3                   	ret    
c0011977:	90                   	nop

c0011978 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011978:	55                   	push   ebp
c0011979:	57                   	push   edi
c001197a:	56                   	push   esi
c001197b:	53                   	push   ebx
c001197c:	83 ec 1c             	sub    esp,0x1c
c001197f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011983:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011987:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001198d:	77 08                	ja     c0011997 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001198f:	0f 20 d8             	mov    eax,cr3
c0011992:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011995:	75 47                	jne    c00119de <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011997:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001199b:	09 d8                	or     eax,ebx
c001199d:	a9 ff 0f 00 00       	test   eax,0xfff
c00119a2:	75 57                	jne    c00119fb <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00119a4:	89 de                	mov    esi,ebx
c00119a6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00119a9:	c1 ee 16             	shr    esi,0x16
c00119ac:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00119b3:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00119b7:	74 54                	je     c0011a0d <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00119b9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00119bd:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00119c3:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00119c7:	c1 e6 0c             	shl    esi,0xc
c00119ca:	c1 eb 0a             	shr    ebx,0xa
c00119cd:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00119d3:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00119d6:	83 c4 1c             	add    esp,0x1c
c00119d9:	5b                   	pop    ebx
c00119da:	5e                   	pop    esi
c00119db:	5f                   	pop    edi
c00119dc:	5d                   	pop    ebp
c00119dd:	c3                   	ret    
c00119de:	83 ec 0c             	sub    esp,0xc
c00119e1:	68 50 71 02 c0       	push   0xc0027150
c00119e6:	e8 8c 08 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00119eb:	83 c4 10             	add    esp,0x10
c00119ee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119f2:	09 d8                	or     eax,ebx
c00119f4:	a9 ff 0f 00 00       	test   eax,0xfff
c00119f9:	74 a9                	je     c00119a4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119fb:	83 ec 0c             	sub    esp,0xc
c00119fe:	68 b8 71 02 c0       	push   0xc00271b8
c0011a03:	e8 ff 70 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c0011a08:	83 c4 10             	add    esp,0x10
c0011a0b:	eb 97                	jmp    c00119a4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011a11:	e8 02 dd ff ff       	call   c000f718 <Phys::allocatePage()>
c0011a16:	89 c5                	mov    ebp,eax
c0011a18:	e8 18 fa ff ff       	call   c0011435 <Virt::getAKernelVAS()>
c0011a1d:	83 ec 0c             	sub    esp,0xc
c0011a20:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011a24:	6a 01                	push   0x1
c0011a26:	e8 7a f8 ff ff       	call   c00112a5 <Virt::allocateKernelVirtualPages(int)>
c0011a2b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a32:	6a 01                	push   0x1
c0011a34:	50                   	push   eax
c0011a35:	55                   	push   ebp
c0011a36:	81 cd 07 04 00 00    	or     ebp,0x407
c0011a3c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a40:	51                   	push   ecx
c0011a41:	e8 1e 02 00 00       	call   c0011c64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a46:	83 c4 1c             	add    esp,0x1c
c0011a49:	68 00 10 00 00       	push   0x1000
c0011a4e:	6a 00                	push   0x0
c0011a50:	50                   	push   eax
c0011a51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a55:	e8 6b ec fe ff       	call   c00006c5 <memset>
c0011a5a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011a5e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011a61:	e8 99 fb ff ff       	call   c00115ff <Virt::freeKernelVirtualPages(unsigned long)>
c0011a66:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a6a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011a6d:	83 c4 10             	add    esp,0x10
c0011a70:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011a73:	e9 41 ff ff ff       	jmp    c00119b9 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011a78 <VAS::allocatePages(int, int)>:
c0011a78:	55                   	push   ebp
c0011a79:	57                   	push   edi
c0011a7a:	56                   	push   esi
c0011a7b:	53                   	push   ebx
c0011a7c:	83 ec 1c             	sub    esp,0x1c
c0011a7f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a83:	e8 fc 5e 00 00       	call   c0017984 <CPU::current()>
c0011a88:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011a8e:	83 e0 01             	and    eax,0x1
c0011a91:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011a95:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011a99:	0f 85 d7 00 00 00    	jne    c0011b76 <VAS::allocatePages(int, int)+0xfe>
c0011a9f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011aa2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011aa6:	85 c0                	test   eax,eax
c0011aa8:	0f 84 ac 00 00 00    	je     c0011b5a <VAS::allocatePages(int, int)+0xe2>
c0011aae:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011ab2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ab6:	c1 e6 0c             	shl    esi,0xc
c0011ab9:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011abd:	85 c0                	test   eax,eax
c0011abf:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011ac2:	7e 33                	jle    c0011af7 <VAS::allocatePages(int, int)+0x7f>
c0011ac4:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011ac8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011acc:	81 cd 00 04 00 00    	or     ebp,0x400
c0011ad2:	e8 41 dc ff ff       	call   c000f718 <Phys::allocatePage()>
c0011ad7:	55                   	push   ebp
c0011ad8:	53                   	push   ebx
c0011ad9:	50                   	push   eax
c0011ada:	57                   	push   edi
c0011adb:	e8 98 fe ff ff       	call   c0011978 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ae0:	83 c4 10             	add    esp,0x10
c0011ae3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ae8:	74 03                	je     c0011aed <VAS::allocatePages(int, int)+0x75>
c0011aea:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011aed:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011af3:	39 de                	cmp    esi,ebx
c0011af5:	75 db                	jne    c0011ad2 <VAS::allocatePages(int, int)+0x5a>
c0011af7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011afc:	74 3f                	je     c0011b3d <VAS::allocatePages(int, int)+0xc5>
c0011afe:	c1 ee 0a             	shr    esi,0xa
c0011b01:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b05:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011b0b:	c1 eb 0a             	shr    ebx,0xa
c0011b0e:	81 ee 00 00 40 00    	sub    esi,0x400000
c0011b14:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011b1a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011b20:	39 f3                	cmp    ebx,esi
c0011b22:	77 0d                	ja     c0011b31 <VAS::allocatePages(int, int)+0xb9>
c0011b24:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b27:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b2d:	39 de                	cmp    esi,ebx
c0011b2f:	73 f3                	jae    c0011b24 <VAS::allocatePages(int, int)+0xac>
c0011b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b35:	83 c4 1c             	add    esp,0x1c
c0011b38:	5b                   	pop    ebx
c0011b39:	5e                   	pop    esi
c0011b3a:	5f                   	pop    edi
c0011b3b:	5d                   	pop    ebp
c0011b3c:	c3                   	ret    
c0011b3d:	e8 73 37 01 00       	call   c00252b5 <CPU::readCR3()>
c0011b42:	83 ec 0c             	sub    esp,0xc
c0011b45:	50                   	push   eax
c0011b46:	e8 7c 37 01 00       	call   c00252c7 <CPU::writeCR3(unsigned long)>
c0011b4b:	83 c4 10             	add    esp,0x10
c0011b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b52:	83 c4 1c             	add    esp,0x1c
c0011b55:	5b                   	pop    ebx
c0011b56:	5e                   	pop    esi
c0011b57:	5f                   	pop    edi
c0011b58:	5d                   	pop    ebp
c0011b59:	c3                   	ret    
c0011b5a:	83 ec 0c             	sub    esp,0xc
c0011b5d:	68 dc 71 02 c0       	push   0xc00271dc
c0011b62:	e8 a0 6f 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c0011b67:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b6a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b6e:	83 c4 10             	add    esp,0x10
c0011b71:	e9 38 ff ff ff       	jmp    c0011aae <VAS::allocatePages(int, int)+0x36>
c0011b76:	83 ec 0c             	sub    esp,0xc
c0011b79:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011b7d:	e8 23 f7 ff ff       	call   c00112a5 <Virt::allocateKernelVirtualPages(int)>
c0011b82:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b86:	83 c4 10             	add    esp,0x10
c0011b89:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011b8e:	0f 87 94 00 00 00    	ja     c0011c28 <VAS::allocatePages(int, int)+0x1b0>
c0011b94:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011b98:	85 d2                	test   edx,edx
c0011b9a:	7e 3c                	jle    c0011bd8 <VAS::allocatePages(int, int)+0x160>
c0011b9c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011ba0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011ba4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ba8:	c1 e5 0c             	shl    ebp,0xc
c0011bab:	81 ce 00 04 00 00    	or     esi,0x400
c0011bb1:	01 dd                	add    ebp,ebx
c0011bb3:	e8 60 db ff ff       	call   c000f718 <Phys::allocatePage()>
c0011bb8:	56                   	push   esi
c0011bb9:	53                   	push   ebx
c0011bba:	50                   	push   eax
c0011bbb:	57                   	push   edi
c0011bbc:	e8 b7 fd ff ff       	call   c0011978 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011bc1:	83 c4 10             	add    esp,0x10
c0011bc4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bc9:	74 03                	je     c0011bce <VAS::allocatePages(int, int)+0x156>
c0011bcb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bce:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bd4:	39 dd                	cmp    ebp,ebx
c0011bd6:	75 db                	jne    c0011bb3 <VAS::allocatePages(int, int)+0x13b>
c0011bd8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bdd:	0f 84 5a ff ff ff    	je     c0011b3d <VAS::allocatePages(int, int)+0xc5>
c0011be3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011be7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011beb:	89 d3                	mov    ebx,edx
c0011bed:	c1 e0 0c             	shl    eax,0xc
c0011bf0:	c1 eb 0a             	shr    ebx,0xa
c0011bf3:	01 d0                	add    eax,edx
c0011bf5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011bfb:	c1 e8 0a             	shr    eax,0xa
c0011bfe:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011c04:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c09:	2d 00 00 40 00       	sub    eax,0x400000
c0011c0e:	39 c3                	cmp    ebx,eax
c0011c10:	0f 87 1b ff ff ff    	ja     c0011b31 <VAS::allocatePages(int, int)+0xb9>
c0011c16:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c19:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c1f:	39 d8                	cmp    eax,ebx
c0011c21:	73 f3                	jae    c0011c16 <VAS::allocatePages(int, int)+0x19e>
c0011c23:	e9 09 ff ff ff       	jmp    c0011b31 <VAS::allocatePages(int, int)+0xb9>
c0011c28:	e8 57 5d 00 00       	call   c0017984 <CPU::current()>
c0011c2d:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011c34:	0f 84 5a ff ff ff    	je     c0011b94 <VAS::allocatePages(int, int)+0x11c>
c0011c3a:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011c42:	e9 4d ff ff ff       	jmp    c0011b94 <VAS::allocatePages(int, int)+0x11c>
c0011c47:	90                   	nop

c0011c48 <VAS::setCPUSpecific(unsigned long)>:
c0011c48:	83 ec 0c             	sub    esp,0xc
c0011c4b:	6a 05                	push   0x5
c0011c4d:	68 00 00 40 c2       	push   0xc2400000
c0011c52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c5a:	e8 19 fd ff ff       	call   c0011978 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c5f:	83 c4 1c             	add    esp,0x1c
c0011c62:	c3                   	ret    
c0011c63:	90                   	nop

c0011c64 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011c64:	55                   	push   ebp
c0011c65:	57                   	push   edi
c0011c66:	56                   	push   esi
c0011c67:	53                   	push   ebx
c0011c68:	83 ec 1c             	sub    esp,0x1c
c0011c6b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c6f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c73:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011c77:	e8 08 5d 00 00       	call   c0017984 <CPU::current()>
c0011c7c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011c82:	83 e0 01             	and    eax,0x1
c0011c85:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c89:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c8d:	85 c0                	test   eax,eax
c0011c8f:	7e 39                	jle    c0011cca <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c0011c91:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c95:	89 f3                	mov    ebx,esi
c0011c97:	c1 e0 0c             	shl    eax,0xc
c0011c9a:	01 f0                	add    eax,esi
c0011c9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ca0:	55                   	push   ebp
c0011ca1:	53                   	push   ebx
c0011ca2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ca6:	29 f0                	sub    eax,esi
c0011ca8:	01 d8                	add    eax,ebx
c0011caa:	50                   	push   eax
c0011cab:	57                   	push   edi
c0011cac:	e8 c7 fc ff ff       	call   c0011978 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011cb1:	83 c4 10             	add    esp,0x10
c0011cb4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cb9:	74 03                	je     c0011cbe <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c0011cbb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cbe:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011cc4:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011cc8:	75 d6                	jne    c0011ca0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c0011cca:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ccf:	74 42                	je     c0011d13 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c0011cd1:	89 f3                	mov    ebx,esi
c0011cd3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cd7:	c1 eb 0a             	shr    ebx,0xa
c0011cda:	c1 e0 0c             	shl    eax,0xc
c0011cdd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011ce3:	01 f0                	add    eax,esi
c0011ce5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011ceb:	c1 e8 0a             	shr    eax,0xa
c0011cee:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cf3:	2d 00 00 40 00       	sub    eax,0x400000
c0011cf8:	39 c3                	cmp    ebx,eax
c0011cfa:	77 0d                	ja     c0011d09 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c0011cfc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cff:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d05:	39 d8                	cmp    eax,ebx
c0011d07:	73 f3                	jae    c0011cfc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c0011d09:	83 c4 1c             	add    esp,0x1c
c0011d0c:	89 f0                	mov    eax,esi
c0011d0e:	5b                   	pop    ebx
c0011d0f:	5e                   	pop    esi
c0011d10:	5f                   	pop    edi
c0011d11:	5d                   	pop    ebp
c0011d12:	c3                   	ret    
c0011d13:	e8 9d 35 01 00       	call   c00252b5 <CPU::readCR3()>
c0011d18:	83 ec 0c             	sub    esp,0xc
c0011d1b:	50                   	push   eax
c0011d1c:	e8 a6 35 01 00       	call   c00252c7 <CPU::writeCR3(unsigned long)>
c0011d21:	89 f0                	mov    eax,esi
c0011d23:	83 c4 10             	add    esp,0x10
c0011d26:	83 c4 1c             	add    esp,0x1c
c0011d29:	5b                   	pop    ebx
c0011d2a:	5e                   	pop    esi
c0011d2b:	5f                   	pop    edi
c0011d2c:	5d                   	pop    ebp
c0011d2d:	c3                   	ret    

c0011d2e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d2e:	55                   	push   ebp
c0011d2f:	57                   	push   edi
c0011d30:	56                   	push   esi
c0011d31:	53                   	push   ebx
c0011d32:	83 ec 1c             	sub    esp,0x1c
c0011d35:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d39:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d3d:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011d41:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d4a:	75 4a                	jne    c0011d96 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011d4c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011d50:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011d53:	c1 eb 16             	shr    ebx,0x16
c0011d56:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011d5d:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011d61:	74 4d                	je     c0011db0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011d63:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d67:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011d6b:	c1 e8 0a             	shr    eax,0xa
c0011d6e:	80 fa 01             	cmp    dl,0x1
c0011d71:	19 d2                	sbb    edx,edx
c0011d73:	c1 e3 0c             	shl    ebx,0xc
c0011d76:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011d7a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011d80:	25 fc 0f 00 00       	and    eax,0xffc
c0011d85:	01 d8                	add    eax,ebx
c0011d87:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011d8e:	83 c4 1c             	add    esp,0x1c
c0011d91:	5b                   	pop    ebx
c0011d92:	5e                   	pop    esi
c0011d93:	5f                   	pop    edi
c0011d94:	5d                   	pop    ebp
c0011d95:	c3                   	ret    
c0011d96:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011d9a:	83 ec 0c             	sub    esp,0xc
c0011d9d:	68 08 72 02 c0       	push   0xc0027208
c0011da2:	e8 60 6d 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c0011da7:	83 c4 10             	add    esp,0x10
c0011daa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011dae:	eb 9c                	jmp    c0011d4c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011db0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011db4:	e8 5f d9 ff ff       	call   c000f718 <Phys::allocatePage()>
c0011db9:	89 c5                	mov    ebp,eax
c0011dbb:	e8 75 f6 ff ff       	call   c0011435 <Virt::getAKernelVAS()>
c0011dc0:	83 ec 0c             	sub    esp,0xc
c0011dc3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011dc7:	6a 01                	push   0x1
c0011dc9:	e8 d7 f4 ff ff       	call   c00112a5 <Virt::allocateKernelVirtualPages(int)>
c0011dce:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011dd5:	6a 01                	push   0x1
c0011dd7:	50                   	push   eax
c0011dd8:	55                   	push   ebp
c0011dd9:	81 cd 07 04 00 00    	or     ebp,0x407
c0011ddf:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011de3:	51                   	push   ecx
c0011de4:	e8 7b fe ff ff       	call   c0011c64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011de9:	83 c4 1c             	add    esp,0x1c
c0011dec:	68 00 10 00 00       	push   0x1000
c0011df1:	6a 00                	push   0x0
c0011df3:	50                   	push   eax
c0011df4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011df8:	e8 c8 e8 fe ff       	call   c00006c5 <memset>
c0011dfd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e01:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e04:	e8 f6 f7 ff ff       	call   c00115ff <Virt::freeKernelVirtualPages(unsigned long)>
c0011e09:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011e0c:	83 c4 10             	add    esp,0x10
c0011e0f:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011e12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e16:	e9 48 ff ff ff       	jmp    c0011d63 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0011e1b:	90                   	nop

c0011e1c <VAS::VAS(bool)>:
c0011e1c:	53                   	push   ebx
c0011e1d:	83 ec 28             	sub    esp,0x28
c0011e20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e24:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e37:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011e3b:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011e3e:	e8 d5 d8 ff ff       	call   c000f718 <Phys::allocatePage()>
c0011e43:	89 c2                	mov    edx,eax
c0011e45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e49:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011e4c:	e8 e4 f5 ff ff       	call   c0011435 <Virt::getAKernelVAS()>
c0011e51:	89 c3                	mov    ebx,eax
c0011e53:	83 ec 0c             	sub    esp,0xc
c0011e56:	6a 01                	push   0x1
c0011e58:	e8 48 f4 ff ff       	call   c00112a5 <Virt::allocateKernelVirtualPages(int)>
c0011e5d:	83 c4 10             	add    esp,0x10
c0011e60:	89 c2                	mov    edx,eax
c0011e62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e66:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e69:	83 ec 0c             	sub    esp,0xc
c0011e6c:	6a 03                	push   0x3
c0011e6e:	6a 01                	push   0x1
c0011e70:	52                   	push   edx
c0011e71:	50                   	push   eax
c0011e72:	53                   	push   ebx
c0011e73:	e8 ec fd ff ff       	call   c0011c64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e78:	83 c4 20             	add    esp,0x20
c0011e7b:	89 c2                	mov    edx,eax
c0011e7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e81:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011e84:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e8c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011e94:	7f 1c                	jg     c0011eb2 <VAS::VAS(bool)+0x96>
c0011e96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e9a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e9d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011ea1:	c1 e2 02             	shl    edx,0x2
c0011ea4:	01 d0                	add    eax,edx
c0011ea6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011eac:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011eb0:	eb da                	jmp    c0011e8c <VAS::VAS(bool)+0x70>
c0011eb2:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011eba:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011ec2:	7f 71                	jg     c0011f35 <VAS::VAS(bool)+0x119>
c0011ec4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ec8:	2d 00 02 00 00       	sub    eax,0x200
c0011ecd:	c1 e0 0c             	shl    eax,0xc
c0011ed0:	83 c8 03             	or     eax,0x3
c0011ed3:	89 c3                	mov    ebx,eax
c0011ed5:	e8 aa 5a 00 00       	call   c0017984 <CPU::current()>
c0011eda:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011ee0:	83 e0 10             	and    eax,0x10
c0011ee3:	84 c0                	test   al,al
c0011ee5:	74 07                	je     c0011eee <VAS::VAS(bool)+0xd2>
c0011ee7:	b8 00 01 00 00       	mov    eax,0x100
c0011eec:	eb 05                	jmp    c0011ef3 <VAS::VAS(bool)+0xd7>
c0011eee:	b8 00 00 00 00       	mov    eax,0x0
c0011ef3:	09 d8                	or     eax,ebx
c0011ef5:	89 c1                	mov    ecx,eax
c0011ef7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011efb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011efe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f02:	c1 e2 02             	shl    edx,0x2
c0011f05:	01 d0                	add    eax,edx
c0011f07:	89 ca                	mov    edx,ecx
c0011f09:	89 10                	mov    DWORD PTR [eax],edx
c0011f0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f0f:	2d 40 03 00 00       	sub    eax,0x340
c0011f14:	83 f8 7f             	cmp    eax,0x7f
c0011f17:	77 16                	ja     c0011f2f <VAS::VAS(bool)+0x113>
c0011f19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f1d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f20:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f24:	c1 e2 02             	shl    edx,0x2
c0011f27:	01 d0                	add    eax,edx
c0011f29:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f2f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f33:	eb 85                	jmp    c0011eba <VAS::VAS(bool)+0x9e>
c0011f35:	e8 4a 5a 00 00       	call   c0017984 <CPU::current()>
c0011f3a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f40:	83 e0 10             	and    eax,0x10
c0011f43:	84 c0                	test   al,al
c0011f45:	74 07                	je     c0011f4e <VAS::VAS(bool)+0x132>
c0011f47:	b8 03 41 00 00       	mov    eax,0x4103
c0011f4c:	eb 05                	jmp    c0011f53 <VAS::VAS(bool)+0x137>
c0011f4e:	b8 03 40 00 00       	mov    eax,0x4003
c0011f53:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f57:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011f5a:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011f60:	89 02                	mov    DWORD PTR [edx],eax
c0011f62:	e8 1d 5a 00 00       	call   c0017984 <CPU::current()>
c0011f67:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011f6d:	83 ec 08             	sub    esp,0x8
c0011f70:	50                   	push   eax
c0011f71:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011f75:	e8 ce fc ff ff       	call   c0011c48 <VAS::setCPUSpecific(unsigned long)>
c0011f7a:	83 c4 10             	add    esp,0x10
c0011f7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f81:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c0011f84:	e8 fb 59 00 00       	call   c0017984 <CPU::current()>
c0011f89:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f8f:	83 e0 10             	and    eax,0x10
c0011f92:	84 c0                	test   al,al
c0011f94:	74 07                	je     c0011f9d <VAS::VAS(bool)+0x181>
c0011f96:	b8 00 01 00 00       	mov    eax,0x100
c0011f9b:	eb 05                	jmp    c0011fa2 <VAS::VAS(bool)+0x186>
c0011f9d:	b8 00 00 00 00       	mov    eax,0x0
c0011fa2:	09 d8                	or     eax,ebx
c0011fa4:	89 c2                	mov    edx,eax
c0011fa6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011faa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011fad:	05 fc 0f 00 00       	add    eax,0xffc
c0011fb2:	83 ca 03             	or     edx,0x3
c0011fb5:	89 10                	mov    DWORD PTR [eax],edx
c0011fb7:	e8 c8 59 00 00       	call   c0017984 <CPU::current()>
c0011fbc:	83 ec 0c             	sub    esp,0xc
c0011fbf:	50                   	push   eax
c0011fc0:	e8 9f 19 00 00       	call   c0013964 <Device::getName()>
c0011fc5:	83 c4 10             	add    esp,0x10
c0011fc8:	83 ec 08             	sub    esp,0x8
c0011fcb:	68 07 73 02 c0       	push   0xc0027307
c0011fd0:	50                   	push   eax
c0011fd1:	e8 df e7 fe ff       	call   c00007b5 <strcmp>
c0011fd6:	83 c4 10             	add    esp,0x10
c0011fd9:	85 c0                	test   eax,eax
c0011fdb:	0f 94 c0             	sete   al
c0011fde:	84 c0                	test   al,al
c0011fe0:	74 64                	je     c0012046 <VAS::VAS(bool)+0x22a>
c0011fe2:	e8 56 9a 00 00       	call   c001ba3d <disableIRQs()>
c0011fe7:	e8 98 59 00 00       	call   c0017984 <CPU::current()>
c0011fec:	05 7c 09 00 00       	add    eax,0x97c
c0011ff1:	83 ec 0c             	sub    esp,0xc
c0011ff4:	50                   	push   eax
c0011ff5:	e8 e6 cb ff ff       	call   c000ebe0 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0011ffa:	83 c4 10             	add    esp,0x10
c0011ffd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012002:	89 c3                	mov    ebx,eax
c0012004:	e8 7b 59 00 00       	call   c0017984 <CPU::current()>
c0012009:	05 7c 09 00 00       	add    eax,0x97c
c001200e:	83 ec 0c             	sub    esp,0xc
c0012011:	50                   	push   eax
c0012012:	e8 c9 cb ff ff       	call   c000ebe0 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012017:	83 c4 10             	add    esp,0x10
c001201a:	83 ec 08             	sub    esp,0x8
c001201d:	50                   	push   eax
c001201e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012022:	e8 b9 f5 ff ff       	call   c00115e0 <VAS::getPageTableEntry(unsigned long)>
c0012027:	83 c4 10             	add    esp,0x10
c001202a:	8b 00                	mov    eax,DWORD PTR [eax]
c001202c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012031:	6a 11                	push   0x11
c0012033:	53                   	push   ebx
c0012034:	50                   	push   eax
c0012035:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012039:	e8 3a f9 ff ff       	call   c0011978 <VAS::mapPage(unsigned long, unsigned long, int)>
c001203e:	83 c4 10             	add    esp,0x10
c0012041:	e8 05 9a 00 00       	call   c001ba4b <enableIRQs()>
c0012046:	90                   	nop
c0012047:	83 c4 28             	add    esp,0x28
c001204a:	5b                   	pop    ebx
c001204b:	c3                   	ret    

c001204c <mapVASFirstTime>:
c001204c:	55                   	push   ebp
c001204d:	57                   	push   edi
c001204e:	56                   	push   esi
c001204f:	53                   	push   ebx
c0012050:	83 ec 0c             	sub    esp,0xc
c0012053:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012058:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001205b:	4a                   	dec    edx
c001205c:	0f 84 99 00 00 00    	je     c00120fb <mapVASFirstTime+0xaf>
c0012062:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012065:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012068:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001206d:	c1 e5 15             	shl    ebp,0x15
c0012070:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c0012075:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c001207b:	29 eb                	sub    ebx,ebp
c001207d:	29 ee                	sub    esi,ebp
c001207f:	e8 94 d6 ff ff       	call   c000f718 <Phys::allocatePage()>
c0012084:	83 ec 0c             	sub    esp,0xc
c0012087:	68 03 04 00 00       	push   0x403
c001208c:	6a 01                	push   0x1
c001208e:	53                   	push   ebx
c001208f:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012095:	50                   	push   eax
c0012096:	57                   	push   edi
c0012097:	e8 c8 fb ff ff       	call   c0011c64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001209c:	83 c4 20             	add    esp,0x20
c001209f:	39 f3                	cmp    ebx,esi
c00120a1:	75 dc                	jne    c001207f <mapVASFirstTime+0x33>
c00120a3:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00120a8:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c00120ad:	29 ee                	sub    esi,ebp
c00120af:	29 e8                	sub    eax,ebp
c00120b1:	89 c5                	mov    ebp,eax
c00120b3:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c00120b7:	19 db                	sbb    ebx,ebx
c00120b9:	e8 5a d6 ff ff       	call   c000f718 <Phys::allocatePage()>
c00120be:	83 e3 04             	and    ebx,0x4
c00120c1:	83 ec 0c             	sub    esp,0xc
c00120c4:	81 c3 03 04 00 00    	add    ebx,0x403
c00120ca:	53                   	push   ebx
c00120cb:	6a 01                	push   0x1
c00120cd:	56                   	push   esi
c00120ce:	81 ee 00 10 00 00    	sub    esi,0x1000
c00120d4:	50                   	push   eax
c00120d5:	57                   	push   edi
c00120d6:	e8 89 fb ff ff       	call   c0011c64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00120db:	83 c4 20             	add    esp,0x20
c00120de:	39 f5                	cmp    ebp,esi
c00120e0:	75 d1                	jne    c00120b3 <mapVASFirstTime+0x67>
c00120e2:	e8 ce 31 01 00       	call   c00252b5 <CPU::readCR3()>
c00120e7:	83 ec 0c             	sub    esp,0xc
c00120ea:	50                   	push   eax
c00120eb:	e8 d7 31 01 00       	call   c00252c7 <CPU::writeCR3(unsigned long)>
c00120f0:	83 c4 10             	add    esp,0x10
c00120f3:	83 c4 0c             	add    esp,0xc
c00120f6:	5b                   	pop    ebx
c00120f7:	5e                   	pop    esi
c00120f8:	5f                   	pop    edi
c00120f9:	5d                   	pop    ebp
c00120fa:	c3                   	ret    
c00120fb:	83 ec 0c             	sub    esp,0xc
c00120fe:	68 15 73 02 c0       	push   0xc0027315
c0012103:	e8 6f 01 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0012108:	83 c4 10             	add    esp,0x10
c001210b:	83 c4 0c             	add    esp,0xc
c001210e:	5b                   	pop    ebx
c001210f:	5e                   	pop    esi
c0012110:	5f                   	pop    edi
c0012111:	5d                   	pop    ebp
c0012112:	c3                   	ret    

c0012113 <__cxa_atexit>:
c0012113:	31 c0                	xor    eax,eax
c0012115:	c3                   	ret    

c0012116 <__cxa_finalize>:
c0012116:	c3                   	ret    

c0012117 <__stack_chk_fail>:
c0012117:	55                   	push   ebp
c0012118:	89 e5                	mov    ebp,esp
c001211a:	83 ec 10             	sub    esp,0x10
c001211d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012120:	68 2e 73 02 c0       	push   0xc002732e
c0012125:	e8 4d 01 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001212a:	58                   	pop    eax
c001212b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001212e:	5a                   	pop    edx
c001212f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012132:	68 2e 73 02 c0       	push   0xc002732e
c0012137:	e8 3b 01 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001213c:	59                   	pop    ecx
c001213d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012140:	5a                   	pop    edx
c0012141:	8b 00                	mov    eax,DWORD PTR [eax]
c0012143:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012146:	68 2e 73 02 c0       	push   0xc002732e
c001214b:	e8 27 01 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0012150:	59                   	pop    ecx
c0012151:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012154:	5a                   	pop    edx
c0012155:	8b 00                	mov    eax,DWORD PTR [eax]
c0012157:	8b 00                	mov    eax,DWORD PTR [eax]
c0012159:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001215c:	68 2e 73 02 c0       	push   0xc002732e
c0012161:	e8 11 01 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0012166:	c7 04 24 36 73 02 c0 	mov    DWORD PTR [esp],0xc0027336
c001216d:	e8 95 69 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c0012172:	83 c4 10             	add    esp,0x10
c0012175:	c9                   	leave  
c0012176:	c3                   	ret    

c0012177 <__cxa_pure_virtual>:
c0012177:	83 ec 18             	sub    esp,0x18
c001217a:	68 4e 73 02 c0       	push   0xc002734e
c001217f:	e8 83 69 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c0012184:	83 c4 1c             	add    esp,0x1c
c0012187:	c3                   	ret    

c0012188 <operator new(unsigned long)>:
c0012188:	e9 e1 cf ff ff       	jmp    c000f16e <malloc>

c001218d <operator new[](unsigned long)>:
c001218d:	e9 dc cf ff ff       	jmp    c000f16e <malloc>

c0012192 <operator delete(void*)>:
c0012192:	e9 f7 cf ff ff       	jmp    c000f18e <rfree>

c0012197 <operator delete(void*, unsigned long)>:
c0012197:	e9 f2 cf ff ff       	jmp    c000f18e <rfree>

c001219c <operator delete[](void*)>:
c001219c:	e9 ed cf ff ff       	jmp    c000f18e <rfree>

c00121a1 <operator delete[](void*, unsigned long)>:
c00121a1:	e9 e8 cf ff ff       	jmp    c000f18e <rfree>

c00121a6 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00121a6:	57                   	push   edi
c00121a7:	b9 3f 00 00 00       	mov    ecx,0x3f
c00121ac:	56                   	push   esi
c00121ad:	be 64 73 02 c0       	mov    esi,0xc0027364
c00121b2:	53                   	push   ebx
c00121b3:	83 ec 40             	sub    esp,0x40
c00121b6:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00121ba:	8d 7c 24 01          	lea    edi,[esp+0x1]
c00121be:	fc                   	cld    
c00121bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00121c1:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c00121c5:	83 f9 3e             	cmp    ecx,0x3e
c00121c8:	7e 05                	jle    c00121cf <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c00121ca:	b9 3e 00 00 00       	mov    ecx,0x3e
c00121cf:	89 df                	mov    edi,ebx
c00121d1:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00121d5:	eb 02                	jmp    c00121d9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00121d7:	89 c7                	mov    edi,eax
c00121d9:	31 d2                	xor    edx,edx
c00121db:	46                   	inc    esi
c00121dc:	89 f8                	mov    eax,edi
c00121de:	f7 f1                	div    ecx
c00121e0:	39 cf                	cmp    edi,ecx
c00121e2:	73 f3                	jae    c00121d7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00121e4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00121e7:	eb 02                	jmp    c00121eb <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00121e9:	89 c3                	mov    ebx,eax
c00121eb:	31 d2                	xor    edx,edx
c00121ed:	4e                   	dec    esi
c00121ee:	89 d8                	mov    eax,ebx
c00121f0:	f7 f1                	div    ecx
c00121f2:	39 cb                	cmp    ebx,ecx
c00121f4:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c00121f8:	88 16                	mov    BYTE PTR [esi],dl
c00121fa:	73 ed                	jae    c00121e9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c00121fc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012200:	83 c4 40             	add    esp,0x40
c0012203:	5b                   	pop    ebx
c0012204:	5e                   	pop    esi
c0012205:	5f                   	pop    edi
c0012206:	c3                   	ret    

c0012207 <Dbg::logc(char)>:
c0012207:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001220b:	ba fd 03 00 00       	mov    edx,0x3fd
c0012210:	ec                   	in     al,dx
c0012211:	a8 20                	test   al,0x20
c0012213:	74 fb                	je     c0012210 <Dbg::logc(char)+0x9>
c0012215:	ba f8 03 00 00       	mov    edx,0x3f8
c001221a:	88 c8                	mov    al,cl
c001221c:	ee                   	out    dx,al
c001221d:	c3                   	ret    

c001221e <Dbg::logs(char*)>:
c001221e:	53                   	push   ebx
c001221f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012223:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012226:	84 c0                	test   al,al
c0012228:	74 0f                	je     c0012239 <Dbg::logs(char*)+0x1b>
c001222a:	50                   	push   eax
c001222b:	43                   	inc    ebx
c001222c:	e8 d6 ff ff ff       	call   c0012207 <Dbg::logc(char)>
c0012231:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012234:	5a                   	pop    edx
c0012235:	84 c0                	test   al,al
c0012237:	75 f1                	jne    c001222a <Dbg::logs(char*)+0xc>
c0012239:	5b                   	pop    ebx
c001223a:	c3                   	ret    

c001223b <Dbg::logWriteInt(unsigned int)>:
c001223b:	83 ec 10             	sub    esp,0x10
c001223e:	6a 0a                	push   0xa
c0012240:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012244:	50                   	push   eax
c0012245:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012249:	e8 58 ff ff ff       	call   c00121a6 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001224e:	50                   	push   eax
c001224f:	e8 ca ff ff ff       	call   c001221e <Dbg::logs(char*)>
c0012254:	83 c4 20             	add    esp,0x20
c0012257:	c3                   	ret    

c0012258 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012258:	83 ec 10             	sub    esp,0x10
c001225b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001225f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012263:	50                   	push   eax
c0012264:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012268:	e8 39 ff ff ff       	call   c00121a6 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001226d:	50                   	push   eax
c001226e:	e8 ab ff ff ff       	call   c001221e <Dbg::logs(char*)>
c0012273:	83 c4 20             	add    esp,0x20
c0012276:	c3                   	ret    

c0012277 <Dbg::kprintf(char const*, ...)>:
c0012277:	55                   	push   ebp
c0012278:	57                   	push   edi
c0012279:	56                   	push   esi
c001227a:	53                   	push   ebx
c001227b:	83 ec 0c             	sub    esp,0xc
c001227e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012282:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012286:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001228a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001228d:	84 c0                	test   al,al
c001228f:	74 4a                	je     c00122db <Dbg::kprintf(char const*, ...)+0x64>
c0012291:	31 db                	xor    ebx,ebx
c0012293:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012296:	3c 25                	cmp    al,0x25
c0012298:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c001229b:	0f 85 e4 00 00 00    	jne    c0012385 <Dbg::kprintf(char const*, ...)+0x10e>
c00122a1:	83 c3 02             	add    ebx,0x2
c00122a4:	8a 07                	mov    al,BYTE PTR [edi]
c00122a6:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00122a9:	83 e8 25             	sub    eax,0x25
c00122ac:	3c 53                	cmp    al,0x53
c00122ae:	0f 87 ba 00 00 00    	ja     c001236e <Dbg::kprintf(char const*, ...)+0xf7>
c00122b4:	0f b6 c0             	movzx  eax,al
c00122b7:	ff 24 85 a4 73 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd8c5c]
c00122be:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00122c2:	89 c8                	mov    eax,ecx
c00122c4:	83 c1 04             	add    ecx,0x4
c00122c7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00122cb:	ff 30                	push   DWORD PTR [eax]
c00122cd:	e8 4c ff ff ff       	call   c001221e <Dbg::logs(char*)>
c00122d2:	58                   	pop    eax
c00122d3:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00122d7:	84 c0                	test   al,al
c00122d9:	75 b8                	jne    c0012293 <Dbg::kprintf(char const*, ...)+0x1c>
c00122db:	83 c4 0c             	add    esp,0xc
c00122de:	5b                   	pop    ebx
c00122df:	5e                   	pop    esi
c00122e0:	5f                   	pop    edi
c00122e1:	5d                   	pop    ebp
c00122e2:	c3                   	ret    
c00122e3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00122e7:	89 d0                	mov    eax,edx
c00122e9:	83 c2 04             	add    edx,0x4
c00122ec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00122f0:	ff 30                	push   DWORD PTR [eax]
c00122f2:	e8 44 ff ff ff       	call   c001223b <Dbg::logWriteInt(unsigned int)>
c00122f7:	58                   	pop    eax
c00122f8:	eb d9                	jmp    c00122d3 <Dbg::kprintf(char const*, ...)+0x5c>
c00122fa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00122fe:	89 d0                	mov    eax,edx
c0012300:	83 c2 04             	add    edx,0x4
c0012303:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012306:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001230a:	50                   	push   eax
c001230b:	e8 f7 fe ff ff       	call   c0012207 <Dbg::logc(char)>
c0012310:	58                   	pop    eax
c0012311:	eb c0                	jmp    c00122d3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012313:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012317:	89 c8                	mov    eax,ecx
c0012319:	83 c1 04             	add    ecx,0x4
c001231c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012320:	ff 30                	push   DWORD PTR [eax]
c0012322:	e8 14 ff ff ff       	call   c001223b <Dbg::logWriteInt(unsigned int)>
c0012327:	5f                   	pop    edi
c0012328:	eb a9                	jmp    c00122d3 <Dbg::kprintf(char const*, ...)+0x5c>
c001232a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001232e:	89 c8                	mov    eax,ecx
c0012330:	83 c1 04             	add    ecx,0x4
c0012333:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012337:	6a 10                	push   0x10
c0012339:	ff 30                	push   DWORD PTR [eax]
c001233b:	e8 18 ff ff ff       	call   c0012258 <Dbg::logWriteIntBase(unsigned int, int)>
c0012340:	59                   	pop    ecx
c0012341:	5f                   	pop    edi
c0012342:	eb 8f                	jmp    c00122d3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012344:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012348:	89 d0                	mov    eax,edx
c001234a:	83 c2 08             	add    edx,0x8
c001234d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012351:	6a 10                	push   0x10
c0012353:	ff 30                	push   DWORD PTR [eax]
c0012355:	e8 fe fe ff ff       	call   c0012258 <Dbg::logWriteIntBase(unsigned int, int)>
c001235a:	58                   	pop    eax
c001235b:	5a                   	pop    edx
c001235c:	e9 72 ff ff ff       	jmp    c00122d3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012361:	6a 25                	push   0x25
c0012363:	e8 9f fe ff ff       	call   c0012207 <Dbg::logc(char)>
c0012368:	58                   	pop    eax
c0012369:	e9 65 ff ff ff       	jmp    c00122d3 <Dbg::kprintf(char const*, ...)+0x5c>
c001236e:	6a 25                	push   0x25
c0012370:	e8 92 fe ff ff       	call   c0012207 <Dbg::logc(char)>
c0012375:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012378:	50                   	push   eax
c0012379:	e8 89 fe ff ff       	call   c0012207 <Dbg::logc(char)>
c001237e:	5a                   	pop    edx
c001237f:	59                   	pop    ecx
c0012380:	e9 4e ff ff ff       	jmp    c00122d3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012385:	50                   	push   eax
c0012386:	89 eb                	mov    ebx,ebp
c0012388:	e8 7a fe ff ff       	call   c0012207 <Dbg::logc(char)>
c001238d:	89 fd                	mov    ebp,edi
c001238f:	58                   	pop    eax
c0012390:	e9 3e ff ff ff       	jmp    c00122d3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012395:	90                   	nop

c0012396 <File::read(unsigned long long, void*, int*)>:
c0012396:	53                   	push   ebx
c0012397:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001239b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001239f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00123a6:	3c 19                	cmp    al,0x19
c00123a8:	77 35                	ja     c00123df <File::read(unsigned long long, void*, int*)+0x49>
c00123aa:	8b 04 85 80 ac 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5380]
c00123b1:	85 c0                	test   eax,eax
c00123b3:	74 2a                	je     c00123df <File::read(unsigned long long, void*, int*)+0x49>
c00123b5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00123bb:	85 c0                	test   eax,eax
c00123bd:	74 20                	je     c00123df <File::read(unsigned long long, void*, int*)+0x49>
c00123bf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00123c3:	74 21                	je     c00123e6 <File::read(unsigned long long, void*, int*)+0x50>
c00123c5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00123c7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00123cb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00123d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00123d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123d9:	5b                   	pop    ebx
c00123da:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00123dd:	ff e0                	jmp    eax
c00123df:	b8 0b 00 00 00       	mov    eax,0xb
c00123e4:	eb 05                	jmp    c00123eb <File::read(unsigned long long, void*, int*)+0x55>
c00123e6:	b8 05 00 00 00       	mov    eax,0x5
c00123eb:	5b                   	pop    ebx
c00123ec:	c3                   	ret    
c00123ed:	90                   	nop

c00123ee <File::write(unsigned long long, void*, int*)>:
c00123ee:	53                   	push   ebx
c00123ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123f3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123f7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00123fe:	3c 19                	cmp    al,0x19
c0012400:	77 35                	ja     c0012437 <File::write(unsigned long long, void*, int*)+0x49>
c0012402:	8b 04 85 80 ac 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5380]
c0012409:	85 c0                	test   eax,eax
c001240b:	74 2a                	je     c0012437 <File::write(unsigned long long, void*, int*)+0x49>
c001240d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012413:	85 c0                	test   eax,eax
c0012415:	74 20                	je     c0012437 <File::write(unsigned long long, void*, int*)+0x49>
c0012417:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001241b:	74 21                	je     c001243e <File::write(unsigned long long, void*, int*)+0x50>
c001241d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001241f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012423:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012429:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001242d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012431:	5b                   	pop    ebx
c0012432:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012435:	ff e0                	jmp    eax
c0012437:	b8 0b 00 00 00       	mov    eax,0xb
c001243c:	eb 05                	jmp    c0012443 <File::write(unsigned long long, void*, int*)+0x55>
c001243e:	b8 05 00 00 00       	mov    eax,0x5
c0012443:	5b                   	pop    ebx
c0012444:	c3                   	ret    
c0012445:	90                   	nop

c0012446 <Directory::read(unsigned long long, void*, int*)>:
c0012446:	53                   	push   ebx
c0012447:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001244b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001244f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012456:	3c 19                	cmp    al,0x19
c0012458:	77 35                	ja     c001248f <Directory::read(unsigned long long, void*, int*)+0x49>
c001245a:	8b 04 85 80 ac 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5380]
c0012461:	85 c0                	test   eax,eax
c0012463:	74 2a                	je     c001248f <Directory::read(unsigned long long, void*, int*)+0x49>
c0012465:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001246b:	85 c0                	test   eax,eax
c001246d:	74 20                	je     c001248f <Directory::read(unsigned long long, void*, int*)+0x49>
c001246f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012473:	74 21                	je     c0012496 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012475:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012477:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001247b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012481:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012485:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012489:	5b                   	pop    ebx
c001248a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001248d:	ff e0                	jmp    eax
c001248f:	b8 0b 00 00 00       	mov    eax,0xb
c0012494:	eb 05                	jmp    c001249b <Directory::read(unsigned long long, void*, int*)+0x55>
c0012496:	b8 05 00 00 00       	mov    eax,0x5
c001249b:	5b                   	pop    ebx
c001249c:	c3                   	ret    
c001249d:	90                   	nop

c001249e <Directory::write(unsigned long long, void*, int*)>:
c001249e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124a2:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00124a9:	b8 0b 00 00 00       	mov    eax,0xb
c00124ae:	80 fa 19             	cmp    dl,0x19
c00124b1:	77 18                	ja     c00124cb <Directory::write(unsigned long long, void*, int*)+0x2d>
c00124b3:	8b 14 95 80 ac 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5380]
c00124ba:	85 d2                	test   edx,edx
c00124bc:	74 0d                	je     c00124cb <Directory::write(unsigned long long, void*, int*)+0x2d>
c00124be:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00124c5:	19 c0                	sbb    eax,eax
c00124c7:	83 e0 0a             	and    eax,0xa
c00124ca:	40                   	inc    eax
c00124cb:	c3                   	ret    

c00124cc <File::isAtty()>:
c00124cc:	31 c0                	xor    eax,eax
c00124ce:	c3                   	ret    
c00124cf:	90                   	nop

c00124d0 <Directory::isAtty()>:
c00124d0:	31 c0                	xor    eax,eax
c00124d2:	c3                   	ret    
c00124d3:	90                   	nop

c00124d4 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00124d4:	b8 0a 00 00 00       	mov    eax,0xa
c00124d9:	c3                   	ret    

c00124da <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00124da:	b8 0a 00 00 00       	mov    eax,0xa
c00124df:	c3                   	ret    

c00124e0 <File::~File()>:
c00124e0:	83 ec 0c             	sub    esp,0xc
c00124e3:	ba 60 75 02 c0       	mov    edx,0xc0027560
c00124e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124ec:	89 10                	mov    DWORD PTR [eax],edx
c00124ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124f2:	83 ec 0c             	sub    esp,0xc
c00124f5:	50                   	push   eax
c00124f6:	e8 49 eb ff ff       	call   c0011044 <UnixFile::~UnixFile()>
c00124fb:	83 c4 10             	add    esp,0x10
c00124fe:	90                   	nop
c00124ff:	83 c4 0c             	add    esp,0xc
c0012502:	c3                   	ret    
c0012503:	90                   	nop

c0012504 <File::~File()>:
c0012504:	83 ec 0c             	sub    esp,0xc
c0012507:	83 ec 0c             	sub    esp,0xc
c001250a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001250e:	e8 cd ff ff ff       	call   c00124e0 <File::~File()>
c0012513:	83 c4 10             	add    esp,0x10
c0012516:	83 ec 08             	sub    esp,0x8
c0012519:	68 14 01 00 00       	push   0x114
c001251e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012522:	e8 70 fc ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0012527:	83 c4 10             	add    esp,0x10
c001252a:	83 c4 0c             	add    esp,0xc
c001252d:	c3                   	ret    

c001252e <Directory::~Directory()>:
c001252e:	83 ec 0c             	sub    esp,0xc
c0012531:	ba 7c 75 02 c0       	mov    edx,0xc002757c
c0012536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001253a:	89 10                	mov    DWORD PTR [eax],edx
c001253c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012540:	83 ec 0c             	sub    esp,0xc
c0012543:	50                   	push   eax
c0012544:	e8 fb ea ff ff       	call   c0011044 <UnixFile::~UnixFile()>
c0012549:	83 c4 10             	add    esp,0x10
c001254c:	90                   	nop
c001254d:	83 c4 0c             	add    esp,0xc
c0012550:	c3                   	ret    
c0012551:	90                   	nop

c0012552 <Directory::~Directory()>:
c0012552:	83 ec 0c             	sub    esp,0xc
c0012555:	83 ec 0c             	sub    esp,0xc
c0012558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001255c:	e8 cd ff ff ff       	call   c001252e <Directory::~Directory()>
c0012561:	83 c4 10             	add    esp,0x10
c0012564:	83 ec 08             	sub    esp,0x8
c0012567:	68 14 01 00 00       	push   0x114
c001256c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012570:	e8 22 fc ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0012575:	83 c4 10             	add    esp,0x10
c0012578:	83 c4 0c             	add    esp,0xc
c001257b:	c3                   	ret    

c001257c <Filesystem::Filesystem()>:
c001257c:	ba fc 74 02 c0       	mov    edx,0xc00274fc
c0012581:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012585:	89 10                	mov    DWORD PTR [eax],edx
c0012587:	8b 15 e8 a7 02 c0    	mov    edx,DWORD PTR ds:0xc002a7e8
c001258d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012591:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012598:	a3 e8 a7 02 c0       	mov    ds:0xc002a7e8,eax
c001259d:	90                   	nop
c001259e:	c3                   	ret    
c001259f:	90                   	nop

c00125a0 <Filesystem::~Filesystem()>:
c00125a0:	ba fc 74 02 c0       	mov    edx,0xc00274fc
c00125a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125a9:	89 10                	mov    DWORD PTR [eax],edx
c00125ab:	90                   	nop
c00125ac:	c3                   	ret    
c00125ad:	90                   	nop

c00125ae <Filesystem::~Filesystem()>:
c00125ae:	83 ec 0c             	sub    esp,0xc
c00125b1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00125b5:	e8 e6 ff ff ff       	call   c00125a0 <Filesystem::~Filesystem()>
c00125ba:	83 c4 04             	add    esp,0x4
c00125bd:	83 ec 08             	sub    esp,0x8
c00125c0:	6a 08                	push   0x8
c00125c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125c6:	e8 cc fb ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c00125cb:	83 c4 10             	add    esp,0x10
c00125ce:	83 c4 0c             	add    esp,0xc
c00125d1:	c3                   	ret    

c00125d2 <initVFS()>:
c00125d2:	83 ec 18             	sub    esp,0x18
c00125d5:	6a 08                	push   0x8
c00125d7:	e8 ac fb ff ff       	call   c0012188 <operator new(unsigned long)>
c00125dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00125df:	e8 54 c2 00 00       	call   c001e838 <FAT::FAT()>
c00125e4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00125eb:	e8 98 fb ff ff       	call   c0012188 <operator new(unsigned long)>
c00125f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00125f3:	e8 b6 d4 00 00       	call   c001faae <ISO9660::ISO9660()>
c00125f8:	83 c4 1c             	add    esp,0x1c
c00125fb:	c3                   	ret    

c00125fc <standardiseFiles(char*, char const*, char const*)>:
c00125fc:	55                   	push   ebp
c00125fd:	57                   	push   edi
c00125fe:	56                   	push   esi
c00125ff:	53                   	push   ebx
c0012600:	81 ec 10 04 00 00    	sub    esp,0x410
c0012606:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c001260d:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012614:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c001261b:	68 00 04 00 00       	push   0x400
c0012620:	6a 00                	push   0x0
c0012622:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012626:	56                   	push   esi
c0012627:	e8 99 e0 fe ff       	call   c00006c5 <memset>
c001262c:	83 c4 10             	add    esp,0x10
c001262f:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012633:	75 0b                	jne    c0012640 <standardiseFiles(char*, char const*, char const*)+0x44>
c0012635:	50                   	push   eax
c0012636:	50                   	push   eax
c0012637:	57                   	push   edi
c0012638:	56                   	push   esi
c0012639:	e8 26 e1 fe ff       	call   c0000764 <strcpy>
c001263e:	eb 41                	jmp    c0012681 <standardiseFiles(char*, char const*, char const*)+0x85>
c0012640:	8a 07                	mov    al,BYTE PTR [edi]
c0012642:	3c 5c                	cmp    al,0x5c
c0012644:	74 04                	je     c001264a <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012646:	3c 2f                	cmp    al,0x2f
c0012648:	75 18                	jne    c0012662 <standardiseFiles(char*, char const*, char const*)+0x66>
c001264a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001264d:	3c 60                	cmp    al,0x60
c001264f:	7e 03                	jle    c0012654 <standardiseFiles(char*, char const*, char const*)+0x58>
c0012651:	83 e8 20             	sub    eax,0x20
c0012654:	88 04 24             	mov    BYTE PTR [esp],al
c0012657:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001265e:	50                   	push   eax
c001265f:	50                   	push   eax
c0012660:	eb 18                	jmp    c001267a <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012662:	50                   	push   eax
c0012663:	50                   	push   eax
c0012664:	55                   	push   ebp
c0012665:	56                   	push   esi
c0012666:	e8 f9 e0 fe ff       	call   c0000764 <strcpy>
c001266b:	5a                   	pop    edx
c001266c:	59                   	pop    ecx
c001266d:	68 48 88 02 c0       	push   0xc0028848
c0012672:	56                   	push   esi
c0012673:	e8 a3 e1 fe ff       	call   c000081b <strcat>
c0012678:	5d                   	pop    ebp
c0012679:	58                   	pop    eax
c001267a:	57                   	push   edi
c001267b:	56                   	push   esi
c001267c:	e8 9a e1 fe ff       	call   c000081b <strcat>
c0012681:	83 c4 10             	add    esp,0x10
c0012684:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012687:	3c 60                	cmp    al,0x60
c0012689:	7e 03                	jle    c001268e <standardiseFiles(char*, char const*, char const*)+0x92>
c001268b:	83 e8 20             	sub    eax,0x20
c001268e:	88 04 24             	mov    BYTE PTR [esp],al
c0012691:	88 03                	mov    BYTE PTR [ebx],al
c0012693:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001269a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00126a0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00126a4:	bf 03 00 00 00       	mov    edi,0x3
c00126a9:	b8 03 00 00 00       	mov    eax,0x3
c00126ae:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00126b1:	84 d2                	test   dl,dl
c00126b3:	0f 84 91 00 00 00    	je     c001274a <standardiseFiles(char*, char const*, char const*)+0x14e>
c00126b9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00126bc:	80 fa 5c             	cmp    dl,0x5c
c00126bf:	74 05                	je     c00126c6 <standardiseFiles(char*, char const*, char const*)+0xca>
c00126c1:	80 fa 2f             	cmp    dl,0x2f
c00126c4:	75 12                	jne    c00126d8 <standardiseFiles(char*, char const*, char const*)+0xdc>
c00126c6:	89 c5                	mov    ebp,eax
c00126c8:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00126cd:	74 09                	je     c00126d8 <standardiseFiles(char*, char const*, char const*)+0xdc>
c00126cf:	40                   	inc    eax
c00126d0:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00126d4:	89 cf                	mov    edi,ecx
c00126d6:	eb d6                	jmp    c00126ae <standardiseFiles(char*, char const*, char const*)+0xb2>
c00126d8:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00126dd:	75 5b                	jne    c001273a <standardiseFiles(char*, char const*, char const*)+0x13e>
c00126df:	80 fa 2e             	cmp    dl,0x2e
c00126e2:	75 56                	jne    c001273a <standardiseFiles(char*, char const*, char const*)+0x13e>
c00126e4:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00126e8:	74 19                	je     c0012703 <standardiseFiles(char*, char const*, char const*)+0x107>
c00126ea:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00126ef:	74 53                	je     c0012744 <standardiseFiles(char*, char const*, char const*)+0x148>
c00126f1:	89 f9                	mov    ecx,edi
c00126f3:	41                   	inc    ecx
c00126f4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00126f7:	80 fa 2f             	cmp    dl,0x2f
c00126fa:	74 f7                	je     c00126f3 <standardiseFiles(char*, char const*, char const*)+0xf7>
c00126fc:	80 fa 5c             	cmp    dl,0x5c
c00126ff:	74 f2                	je     c00126f3 <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012701:	eb d1                	jmp    c00126d4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012703:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012708:	74 3a                	je     c0012744 <standardiseFiles(char*, char const*, char const*)+0x148>
c001270a:	83 f8 03             	cmp    eax,0x3
c001270d:	74 c5                	je     c00126d4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001270f:	41                   	inc    ecx
c0012710:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012713:	80 fa 2f             	cmp    dl,0x2f
c0012716:	74 f7                	je     c001270f <standardiseFiles(char*, char const*, char const*)+0x113>
c0012718:	80 fa 5c             	cmp    dl,0x5c
c001271b:	74 f2                	je     c001270f <standardiseFiles(char*, char const*, char const*)+0x113>
c001271d:	48                   	dec    eax
c001271e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012722:	75 06                	jne    c001272a <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012724:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012728:	eb f3                	jmp    c001271d <standardiseFiles(char*, char const*, char const*)+0x121>
c001272a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001272e:	74 07                	je     c0012737 <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012730:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012734:	48                   	dec    eax
c0012735:	eb f3                	jmp    c001272a <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012737:	40                   	inc    eax
c0012738:	eb 9a                	jmp    c00126d4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001273a:	80 fa 2f             	cmp    dl,0x2f
c001273d:	74 95                	je     c00126d4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001273f:	80 fa 5c             	cmp    dl,0x5c
c0012742:	74 90                	je     c00126d4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012744:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012747:	40                   	inc    eax
c0012748:	eb 8a                	jmp    c00126d4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001274a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001274e:	83 ec 0c             	sub    esp,0xc
c0012751:	53                   	push   ebx
c0012752:	e8 8b df fe ff       	call   c00006e2 <strlen>
c0012757:	83 c4 10             	add    esp,0x10
c001275a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001275f:	75 26                	jne    c0012787 <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012761:	83 ec 0c             	sub    esp,0xc
c0012764:	53                   	push   ebx
c0012765:	e8 78 df fe ff       	call   c00006e2 <strlen>
c001276a:	83 c4 10             	add    esp,0x10
c001276d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012772:	74 26                	je     c001279a <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012774:	83 ec 0c             	sub    esp,0xc
c0012777:	53                   	push   ebx
c0012778:	e8 65 df fe ff       	call   c00006e2 <strlen>
c001277d:	83 c4 10             	add    esp,0x10
c0012780:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012785:	eb c7                	jmp    c001274e <standardiseFiles(char*, char const*, char const*)+0x152>
c0012787:	83 ec 0c             	sub    esp,0xc
c001278a:	53                   	push   ebx
c001278b:	e8 52 df fe ff       	call   c00006e2 <strlen>
c0012790:	83 c4 10             	add    esp,0x10
c0012793:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012798:	74 c7                	je     c0012761 <standardiseFiles(char*, char const*, char const*)+0x165>
c001279a:	81 c4 0c 04 00 00    	add    esp,0x40c
c00127a0:	5b                   	pop    ebx
c00127a1:	5e                   	pop    esi
c00127a2:	5f                   	pop    edi
c00127a3:	5d                   	pop    ebp
c00127a4:	c3                   	ret    
c00127a5:	90                   	nop

c00127a6 <File::File(char const*, Process*)>:
c00127a6:	83 ec 0c             	sub    esp,0xc
c00127a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127ad:	83 ec 08             	sub    esp,0x8
c00127b0:	6a 00                	push   0x0
c00127b2:	50                   	push   eax
c00127b3:	e8 ea e6 ff ff       	call   c0010ea2 <UnixFile::UnixFile(int)>
c00127b8:	83 c4 10             	add    esp,0x10
c00127bb:	ba 60 75 02 c0       	mov    edx,0xc0027560
c00127c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127c4:	89 10                	mov    DWORD PTR [eax],edx
c00127c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127ca:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00127d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127d4:	83 c0 0d             	add    eax,0xd
c00127d7:	83 ec 04             	sub    esp,0x4
c00127da:	52                   	push   edx
c00127db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127df:	50                   	push   eax
c00127e0:	e8 17 fe ff ff       	call   c00125fc <standardiseFiles(char*, char const*, char const*)>
c00127e5:	83 c4 10             	add    esp,0x10
c00127e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127ec:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00127ef:	8d 50 bf             	lea    edx,[eax-0x41]
c00127f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127f6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00127fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012800:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012804:	90                   	nop
c0012805:	83 c4 0c             	add    esp,0xc
c0012808:	c3                   	ret    
c0012809:	90                   	nop

c001280a <File::open(FileOpenMode)>:
c001280a:	53                   	push   ebx
c001280b:	b8 0b 00 00 00       	mov    eax,0xb
c0012810:	83 ec 08             	sub    esp,0x8
c0012813:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012817:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001281e:	80 fa 19             	cmp    dl,0x19
c0012821:	77 40                	ja     c0012863 <File::open(FileOpenMode)+0x59>
c0012823:	8b 14 95 80 ac 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5380]
c001282a:	85 d2                	test   edx,edx
c001282c:	74 35                	je     c0012863 <File::open(FileOpenMode)+0x59>
c001282e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012834:	85 d2                	test   edx,edx
c0012836:	74 2b                	je     c0012863 <File::open(FileOpenMode)+0x59>
c0012838:	b8 06 00 00 00       	mov    eax,0x6
c001283d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012841:	75 20                	jne    c0012863 <File::open(FileOpenMode)+0x59>
c0012843:	8b 02                	mov    eax,DWORD PTR [edx]
c0012845:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001284b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001284f:	51                   	push   ecx
c0012850:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012853:	51                   	push   ecx
c0012854:	52                   	push   edx
c0012855:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012858:	83 c4 10             	add    esp,0x10
c001285b:	85 c0                	test   eax,eax
c001285d:	75 04                	jne    c0012863 <File::open(FileOpenMode)+0x59>
c001285f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012863:	83 c4 08             	add    esp,0x8
c0012866:	5b                   	pop    ebx
c0012867:	c3                   	ret    

c0012868 <File::close()>:
c0012868:	53                   	push   ebx
c0012869:	b8 0b 00 00 00       	mov    eax,0xb
c001286e:	83 ec 08             	sub    esp,0x8
c0012871:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012875:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001287c:	80 fa 19             	cmp    dl,0x19
c001287f:	77 41                	ja     c00128c2 <File::close()+0x5a>
c0012881:	8b 1c 95 80 ac 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd5380]
c0012888:	85 db                	test   ebx,ebx
c001288a:	74 36                	je     c00128c2 <File::close()+0x5a>
c001288c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012893:	74 2d                	je     c00128c2 <File::close()+0x5a>
c0012895:	b8 05 00 00 00       	mov    eax,0x5
c001289a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001289e:	74 22                	je     c00128c2 <File::close()+0x5a>
c00128a0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00128a4:	8b 04 95 80 ac 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5380]
c00128ab:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00128b1:	53                   	push   ebx
c00128b2:	53                   	push   ebx
c00128b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00128b5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00128bb:	50                   	push   eax
c00128bc:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00128bf:	83 c4 10             	add    esp,0x10
c00128c2:	83 c4 08             	add    esp,0x8
c00128c5:	5b                   	pop    ebx
c00128c6:	c3                   	ret    
c00128c7:	90                   	nop

c00128c8 <File::seek(unsigned long long)>:
c00128c8:	56                   	push   esi
c00128c9:	53                   	push   ebx
c00128ca:	b8 0b 00 00 00       	mov    eax,0xb
c00128cf:	51                   	push   ecx
c00128d0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00128d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00128d8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00128df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00128e3:	80 fa 19             	cmp    dl,0x19
c00128e6:	77 31                	ja     c0012919 <File::seek(unsigned long long)+0x51>
c00128e8:	8b 14 95 80 ac 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5380]
c00128ef:	85 d2                	test   edx,edx
c00128f1:	74 26                	je     c0012919 <File::seek(unsigned long long)+0x51>
c00128f3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00128f9:	85 d2                	test   edx,edx
c00128fb:	74 1c                	je     c0012919 <File::seek(unsigned long long)+0x51>
c00128fd:	b8 05 00 00 00       	mov    eax,0x5
c0012902:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012906:	74 11                	je     c0012919 <File::seek(unsigned long long)+0x51>
c0012908:	8b 02                	mov    eax,DWORD PTR [edx]
c001290a:	53                   	push   ebx
c001290b:	51                   	push   ecx
c001290c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012912:	52                   	push   edx
c0012913:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012916:	83 c4 10             	add    esp,0x10
c0012919:	5a                   	pop    edx
c001291a:	5b                   	pop    ebx
c001291b:	5e                   	pop    esi
c001291c:	c3                   	ret    
c001291d:	90                   	nop

c001291e <File::tell(unsigned long long*)>:
c001291e:	83 ec 0c             	sub    esp,0xc
c0012921:	b8 0b 00 00 00       	mov    eax,0xb
c0012926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001292a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012931:	80 fa 19             	cmp    dl,0x19
c0012934:	77 34                	ja     c001296a <File::tell(unsigned long long*)+0x4c>
c0012936:	8b 14 95 80 ac 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5380]
c001293d:	85 d2                	test   edx,edx
c001293f:	74 29                	je     c001296a <File::tell(unsigned long long*)+0x4c>
c0012941:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012947:	85 d2                	test   edx,edx
c0012949:	74 1f                	je     c001296a <File::tell(unsigned long long*)+0x4c>
c001294b:	b8 05 00 00 00       	mov    eax,0x5
c0012950:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012954:	74 14                	je     c001296a <File::tell(unsigned long long*)+0x4c>
c0012956:	50                   	push   eax
c0012957:	8b 02                	mov    eax,DWORD PTR [edx]
c0012959:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001295d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012963:	52                   	push   edx
c0012964:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012967:	83 c4 10             	add    esp,0x10
c001296a:	83 c4 0c             	add    esp,0xc
c001296d:	c3                   	ret    

c001296e <File::rewind()>:
c001296e:	83 ec 10             	sub    esp,0x10
c0012971:	6a 00                	push   0x0
c0012973:	6a 00                	push   0x0
c0012975:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012979:	e8 4a ff ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001297e:	83 c4 1c             	add    esp,0x1c
c0012981:	c3                   	ret    

c0012982 <File::unlink()>:
c0012982:	83 ec 0c             	sub    esp,0xc
c0012985:	b8 0b 00 00 00       	mov    eax,0xb
c001298a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001298e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012995:	80 f9 19             	cmp    cl,0x19
c0012998:	77 2f                	ja     c00129c9 <File::unlink()+0x47>
c001299a:	8b 0c 8d 80 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5380]
c00129a1:	85 c9                	test   ecx,ecx
c00129a3:	74 24                	je     c00129c9 <File::unlink()+0x47>
c00129a5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00129ab:	85 c9                	test   ecx,ecx
c00129ad:	74 1a                	je     c00129c9 <File::unlink()+0x47>
c00129af:	b8 06 00 00 00       	mov    eax,0x6
c00129b4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00129b8:	75 0f                	jne    c00129c9 <File::unlink()+0x47>
c00129ba:	83 c2 0d             	add    edx,0xd
c00129bd:	50                   	push   eax
c00129be:	50                   	push   eax
c00129bf:	8b 01                	mov    eax,DWORD PTR [ecx]
c00129c1:	52                   	push   edx
c00129c2:	51                   	push   ecx
c00129c3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00129c6:	83 c4 10             	add    esp,0x10
c00129c9:	83 c4 0c             	add    esp,0xc
c00129cc:	c3                   	ret    
c00129cd:	90                   	nop

c00129ce <File::rename(char const*)>:
c00129ce:	83 ec 0c             	sub    esp,0xc
c00129d1:	b8 0b 00 00 00       	mov    eax,0xb
c00129d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00129da:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00129e1:	80 f9 19             	cmp    cl,0x19
c00129e4:	77 32                	ja     c0012a18 <File::rename(char const*)+0x4a>
c00129e6:	8b 0c 8d 80 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5380]
c00129ed:	85 c9                	test   ecx,ecx
c00129ef:	74 27                	je     c0012a18 <File::rename(char const*)+0x4a>
c00129f1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00129f7:	85 c9                	test   ecx,ecx
c00129f9:	74 1d                	je     c0012a18 <File::rename(char const*)+0x4a>
c00129fb:	b8 06 00 00 00       	mov    eax,0x6
c0012a00:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a04:	75 12                	jne    c0012a18 <File::rename(char const*)+0x4a>
c0012a06:	83 c2 0d             	add    edx,0xd
c0012a09:	50                   	push   eax
c0012a0a:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012a0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a10:	52                   	push   edx
c0012a11:	51                   	push   ecx
c0012a12:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012a15:	83 c4 10             	add    esp,0x10
c0012a18:	83 c4 0c             	add    esp,0xc
c0012a1b:	c3                   	ret    

c0012a1c <File::chfatattr(unsigned char, unsigned char)>:
c0012a1c:	57                   	push   edi
c0012a1d:	b8 0b 00 00 00       	mov    eax,0xb
c0012a22:	56                   	push   esi
c0012a23:	53                   	push   ebx
c0012a24:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a28:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012a2c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a33:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012a37:	80 f9 19             	cmp    cl,0x19
c0012a3a:	77 37                	ja     c0012a73 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a3c:	8b 0c 8d 80 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5380]
c0012a43:	85 c9                	test   ecx,ecx
c0012a45:	74 2c                	je     c0012a73 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a47:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a4d:	85 c9                	test   ecx,ecx
c0012a4f:	74 22                	je     c0012a73 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a51:	b8 06 00 00 00       	mov    eax,0x6
c0012a56:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a5a:	75 17                	jne    c0012a73 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a5c:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012a5e:	89 f0                	mov    eax,esi
c0012a60:	83 c2 0d             	add    edx,0xd
c0012a63:	0f b6 f0             	movzx  esi,al
c0012a66:	0f b6 db             	movzx  ebx,bl
c0012a69:	56                   	push   esi
c0012a6a:	53                   	push   ebx
c0012a6b:	52                   	push   edx
c0012a6c:	51                   	push   ecx
c0012a6d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012a70:	83 c4 10             	add    esp,0x10
c0012a73:	5b                   	pop    ebx
c0012a74:	5e                   	pop    esi
c0012a75:	5f                   	pop    edi
c0012a76:	c3                   	ret    
c0012a77:	90                   	nop

c0012a78 <File::exists()>:
c0012a78:	83 ec 0c             	sub    esp,0xc
c0012a7b:	31 c0                	xor    eax,eax
c0012a7d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a81:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a88:	80 f9 19             	cmp    cl,0x19
c0012a8b:	77 24                	ja     c0012ab1 <File::exists()+0x39>
c0012a8d:	8b 0c 8d 80 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5380]
c0012a94:	85 c9                	test   ecx,ecx
c0012a96:	74 19                	je     c0012ab1 <File::exists()+0x39>
c0012a98:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a9e:	85 c9                	test   ecx,ecx
c0012aa0:	74 0f                	je     c0012ab1 <File::exists()+0x39>
c0012aa2:	83 c2 0d             	add    edx,0xd
c0012aa5:	50                   	push   eax
c0012aa6:	50                   	push   eax
c0012aa7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012aa9:	52                   	push   edx
c0012aaa:	51                   	push   ecx
c0012aab:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012aae:	83 c4 10             	add    esp,0x10
c0012ab1:	83 c4 0c             	add    esp,0xc
c0012ab4:	c3                   	ret    
c0012ab5:	90                   	nop

c0012ab6 <File::stat(unsigned long long*, bool*)>:
c0012ab6:	56                   	push   esi
c0012ab7:	53                   	push   ebx
c0012ab8:	50                   	push   eax
c0012ab9:	b8 0b 00 00 00       	mov    eax,0xb
c0012abe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ac2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012ac6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012acd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012ad1:	80 f9 19             	cmp    cl,0x19
c0012ad4:	77 3d                	ja     c0012b13 <File::stat(unsigned long long*, bool*)+0x5d>
c0012ad6:	8b 0c 8d 80 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5380]
c0012add:	85 c9                	test   ecx,ecx
c0012adf:	74 32                	je     c0012b13 <File::stat(unsigned long long*, bool*)+0x5d>
c0012ae1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ae7:	85 c9                	test   ecx,ecx
c0012ae9:	74 28                	je     c0012b13 <File::stat(unsigned long long*, bool*)+0x5d>
c0012aeb:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012aed:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012af1:	74 13                	je     c0012b06 <File::stat(unsigned long long*, bool*)+0x50>
c0012af3:	83 ec 04             	sub    esp,0x4
c0012af6:	56                   	push   esi
c0012af7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012afd:	51                   	push   ecx
c0012afe:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012b01:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012b04:	eb 0a                	jmp    c0012b10 <File::stat(unsigned long long*, bool*)+0x5a>
c0012b06:	53                   	push   ebx
c0012b07:	83 c2 0d             	add    edx,0xd
c0012b0a:	56                   	push   esi
c0012b0b:	52                   	push   edx
c0012b0c:	51                   	push   ecx
c0012b0d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012b10:	83 c4 10             	add    esp,0x10
c0012b13:	5a                   	pop    edx
c0012b14:	5b                   	pop    ebx
c0012b15:	5e                   	pop    esi
c0012b16:	c3                   	ret    

c0012b17 <getcwd(Process*, char*, int)>:
c0012b17:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b1b:	31 c0                	xor    eax,eax
c0012b1d:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012b20:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012b24:	7d 15                	jge    c0012b3b <getcwd(Process*, char*, int)+0x24>
c0012b26:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b2a:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012b31:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012b34:	84 c9                	test   cl,cl
c0012b36:	74 06                	je     c0012b3e <getcwd(Process*, char*, int)+0x27>
c0012b38:	40                   	inc    eax
c0012b39:	eb e2                	jmp    c0012b1d <getcwd(Process*, char*, int)+0x6>
c0012b3b:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012b3e:	31 c0                	xor    eax,eax
c0012b40:	c3                   	ret    

c0012b41 <setcwd(Process*, char*)>:
c0012b41:	55                   	push   ebp
c0012b42:	57                   	push   edi
c0012b43:	56                   	push   esi
c0012b44:	53                   	push   ebx
c0012b45:	81 ec 20 02 00 00    	sub    esp,0x220
c0012b4b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012b52:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012b58:	57                   	push   edi
c0012b59:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012b60:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012b64:	56                   	push   esi
c0012b65:	e8 92 fa ff ff       	call   c00125fc <standardiseFiles(char*, char const*, char const*)>
c0012b6a:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b6d:	e8 70 db fe ff       	call   c00006e2 <strlen>
c0012b72:	83 c4 10             	add    esp,0x10
c0012b75:	83 f8 02             	cmp    eax,0x2
c0012b78:	77 17                	ja     c0012b91 <setcwd(Process*, char*)+0x50>
c0012b7a:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012b7f:	83 e8 41             	sub    eax,0x41
c0012b82:	83 f8 19             	cmp    eax,0x19
c0012b85:	76 24                	jbe    c0012bab <setcwd(Process*, char*)+0x6a>
c0012b87:	b8 03 00 00 00       	mov    eax,0x3
c0012b8c:	e9 cb 00 00 00       	jmp    c0012c5c <setcwd(Process*, char*)+0x11b>
c0012b91:	83 ec 0c             	sub    esp,0xc
c0012b94:	56                   	push   esi
c0012b95:	e8 48 db fe ff       	call   c00006e2 <strlen>
c0012b9a:	83 c4 10             	add    esp,0x10
c0012b9d:	83 f8 03             	cmp    eax,0x3
c0012ba0:	75 33                	jne    c0012bd5 <setcwd(Process*, char*)+0x94>
c0012ba2:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012ba7:	75 2c                	jne    c0012bd5 <setcwd(Process*, char*)+0x94>
c0012ba9:	eb cf                	jmp    c0012b7a <setcwd(Process*, char*)+0x39>
c0012bab:	8b 14 85 80 ac 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5380]
c0012bb2:	b8 05 00 00 00       	mov    eax,0x5
c0012bb7:	85 d2                	test   edx,edx
c0012bb9:	0f 84 9d 00 00 00    	je     c0012c5c <setcwd(Process*, char*)+0x11b>
c0012bbf:	b8 06 00 00 00       	mov    eax,0x6
c0012bc4:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012bcb:	0f 84 8b 00 00 00    	je     c0012c5c <setcwd(Process*, char*)+0x11b>
c0012bd1:	51                   	push   ecx
c0012bd2:	51                   	push   ecx
c0012bd3:	eb 7b                	jmp    c0012c50 <setcwd(Process*, char*)+0x10f>
c0012bd5:	83 ec 0c             	sub    esp,0xc
c0012bd8:	68 14 01 00 00       	push   0x114
c0012bdd:	e8 a6 f5 ff ff       	call   c0012188 <operator new(unsigned long)>
c0012be2:	83 c4 0c             	add    esp,0xc
c0012be5:	89 c3                	mov    ebx,eax
c0012be7:	55                   	push   ebp
c0012be8:	56                   	push   esi
c0012be9:	50                   	push   eax
c0012bea:	e8 b7 fb ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c0012bef:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012bf4:	83 c4 0c             	add    esp,0xc
c0012bf7:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012bfb:	50                   	push   eax
c0012bfc:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012c00:	50                   	push   eax
c0012c01:	53                   	push   ebx
c0012c02:	e8 af fe ff ff       	call   c0012ab6 <File::stat(unsigned long long*, bool*)>
c0012c07:	83 c4 10             	add    esp,0x10
c0012c0a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012c0c:	83 f8 02             	cmp    eax,0x2
c0012c0f:	75 09                	jne    c0012c1a <setcwd(Process*, char*)+0xd9>
c0012c11:	83 ec 0c             	sub    esp,0xc
c0012c14:	53                   	push   ebx
c0012c15:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012c18:	eb 0d                	jmp    c0012c27 <setcwd(Process*, char*)+0xe6>
c0012c1a:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012c1d:	85 c0                	test   eax,eax
c0012c1f:	74 10                	je     c0012c31 <setcwd(Process*, char*)+0xf0>
c0012c21:	83 ec 0c             	sub    esp,0xc
c0012c24:	53                   	push   ebx
c0012c25:	ff d2                	call   edx
c0012c27:	83 c4 10             	add    esp,0x10
c0012c2a:	b8 01 00 00 00       	mov    eax,0x1
c0012c2f:	eb 2b                	jmp    c0012c5c <setcwd(Process*, char*)+0x11b>
c0012c31:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012c36:	75 10                	jne    c0012c48 <setcwd(Process*, char*)+0x107>
c0012c38:	83 ec 0c             	sub    esp,0xc
c0012c3b:	53                   	push   ebx
c0012c3c:	ff d2                	call   edx
c0012c3e:	83 c4 10             	add    esp,0x10
c0012c41:	b8 02 00 00 00       	mov    eax,0x2
c0012c46:	eb 14                	jmp    c0012c5c <setcwd(Process*, char*)+0x11b>
c0012c48:	83 ec 0c             	sub    esp,0xc
c0012c4b:	53                   	push   ebx
c0012c4c:	ff d2                	call   edx
c0012c4e:	58                   	pop    eax
c0012c4f:	5a                   	pop    edx
c0012c50:	56                   	push   esi
c0012c51:	57                   	push   edi
c0012c52:	e8 0d db fe ff       	call   c0000764 <strcpy>
c0012c57:	83 c4 10             	add    esp,0x10
c0012c5a:	31 c0                	xor    eax,eax
c0012c5c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012c62:	5b                   	pop    ebx
c0012c63:	5e                   	pop    esi
c0012c64:	5f                   	pop    edi
c0012c65:	5d                   	pop    ebp
c0012c66:	c3                   	ret    
c0012c67:	90                   	nop

c0012c68 <Directory::Directory(char const*, Process*)>:
c0012c68:	83 ec 0c             	sub    esp,0xc
c0012c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c6f:	83 ec 08             	sub    esp,0x8
c0012c72:	6a 00                	push   0x0
c0012c74:	50                   	push   eax
c0012c75:	e8 28 e2 ff ff       	call   c0010ea2 <UnixFile::UnixFile(int)>
c0012c7a:	83 c4 10             	add    esp,0x10
c0012c7d:	ba 7c 75 02 c0       	mov    edx,0xc002757c
c0012c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c86:	89 10                	mov    DWORD PTR [eax],edx
c0012c88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c8c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c96:	83 c0 0d             	add    eax,0xd
c0012c99:	83 ec 04             	sub    esp,0x4
c0012c9c:	52                   	push   edx
c0012c9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ca1:	50                   	push   eax
c0012ca2:	e8 55 f9 ff ff       	call   c00125fc <standardiseFiles(char*, char const*, char const*)>
c0012ca7:	83 c4 10             	add    esp,0x10
c0012caa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cae:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012cb1:	8d 50 bf             	lea    edx,[eax-0x41]
c0012cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cb8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cc2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012cc6:	90                   	nop
c0012cc7:	83 c4 0c             	add    esp,0xc
c0012cca:	c3                   	ret    
c0012ccb:	90                   	nop

c0012ccc <Directory::open()>:
c0012ccc:	53                   	push   ebx
c0012ccd:	b8 0b 00 00 00       	mov    eax,0xb
c0012cd2:	83 ec 08             	sub    esp,0x8
c0012cd5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012cd9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012ce0:	80 fa 19             	cmp    dl,0x19
c0012ce3:	77 3d                	ja     c0012d22 <Directory::open()+0x56>
c0012ce5:	8b 14 95 80 ac 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5380]
c0012cec:	85 d2                	test   edx,edx
c0012cee:	74 32                	je     c0012d22 <Directory::open()+0x56>
c0012cf0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012cf6:	85 d2                	test   edx,edx
c0012cf8:	74 28                	je     c0012d22 <Directory::open()+0x56>
c0012cfa:	b8 06 00 00 00       	mov    eax,0x6
c0012cff:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012d03:	75 1d                	jne    c0012d22 <Directory::open()+0x56>
c0012d05:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012d0b:	50                   	push   eax
c0012d0c:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d0e:	51                   	push   ecx
c0012d0f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012d12:	51                   	push   ecx
c0012d13:	52                   	push   edx
c0012d14:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0012d17:	83 c4 10             	add    esp,0x10
c0012d1a:	85 c0                	test   eax,eax
c0012d1c:	75 04                	jne    c0012d22 <Directory::open()+0x56>
c0012d1e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012d22:	83 c4 08             	add    esp,0x8
c0012d25:	5b                   	pop    ebx
c0012d26:	c3                   	ret    
c0012d27:	90                   	nop

c0012d28 <Directory::close()>:
c0012d28:	53                   	push   ebx
c0012d29:	b8 0b 00 00 00       	mov    eax,0xb
c0012d2e:	83 ec 08             	sub    esp,0x8
c0012d31:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d35:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d3c:	80 fa 19             	cmp    dl,0x19
c0012d3f:	77 41                	ja     c0012d82 <Directory::close()+0x5a>
c0012d41:	8b 1c 95 80 ac 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd5380]
c0012d48:	85 db                	test   ebx,ebx
c0012d4a:	74 36                	je     c0012d82 <Directory::close()+0x5a>
c0012d4c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012d53:	74 2d                	je     c0012d82 <Directory::close()+0x5a>
c0012d55:	b8 05 00 00 00       	mov    eax,0x5
c0012d5a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d5e:	74 22                	je     c0012d82 <Directory::close()+0x5a>
c0012d60:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012d64:	8b 04 95 80 ac 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5380]
c0012d6b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d71:	53                   	push   ebx
c0012d72:	53                   	push   ebx
c0012d73:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d75:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d7b:	50                   	push   eax
c0012d7c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0012d7f:	83 c4 10             	add    esp,0x10
c0012d82:	83 c4 08             	add    esp,0x8
c0012d85:	5b                   	pop    ebx
c0012d86:	c3                   	ret    
c0012d87:	90                   	nop

c0012d88 <Directory::unlink()>:
c0012d88:	83 ec 0c             	sub    esp,0xc
c0012d8b:	b8 0b 00 00 00       	mov    eax,0xb
c0012d90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d94:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d9b:	80 f9 19             	cmp    cl,0x19
c0012d9e:	77 2f                	ja     c0012dcf <Directory::unlink()+0x47>
c0012da0:	8b 0c 8d 80 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5380]
c0012da7:	85 c9                	test   ecx,ecx
c0012da9:	74 24                	je     c0012dcf <Directory::unlink()+0x47>
c0012dab:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012db1:	85 c9                	test   ecx,ecx
c0012db3:	74 1a                	je     c0012dcf <Directory::unlink()+0x47>
c0012db5:	b8 06 00 00 00       	mov    eax,0x6
c0012dba:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012dbe:	75 0f                	jne    c0012dcf <Directory::unlink()+0x47>
c0012dc0:	83 c2 0d             	add    edx,0xd
c0012dc3:	50                   	push   eax
c0012dc4:	50                   	push   eax
c0012dc5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012dc7:	52                   	push   edx
c0012dc8:	51                   	push   ecx
c0012dc9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012dcc:	83 c4 10             	add    esp,0x10
c0012dcf:	83 c4 0c             	add    esp,0xc
c0012dd2:	c3                   	ret    
c0012dd3:	90                   	nop

c0012dd4 <Directory::rename(char const*)>:
c0012dd4:	83 ec 0c             	sub    esp,0xc
c0012dd7:	b8 0b 00 00 00       	mov    eax,0xb
c0012ddc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012de0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012de7:	80 f9 19             	cmp    cl,0x19
c0012dea:	77 32                	ja     c0012e1e <Directory::rename(char const*)+0x4a>
c0012dec:	8b 0c 8d 80 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5380]
c0012df3:	85 c9                	test   ecx,ecx
c0012df5:	74 27                	je     c0012e1e <Directory::rename(char const*)+0x4a>
c0012df7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012dfd:	85 c9                	test   ecx,ecx
c0012dff:	74 1d                	je     c0012e1e <Directory::rename(char const*)+0x4a>
c0012e01:	b8 06 00 00 00       	mov    eax,0x6
c0012e06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e0a:	75 12                	jne    c0012e1e <Directory::rename(char const*)+0x4a>
c0012e0c:	83 c2 0d             	add    edx,0xd
c0012e0f:	50                   	push   eax
c0012e10:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e16:	52                   	push   edx
c0012e17:	51                   	push   ecx
c0012e18:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012e1b:	83 c4 10             	add    esp,0x10
c0012e1e:	83 c4 0c             	add    esp,0xc
c0012e21:	c3                   	ret    

c0012e22 <Directory::exists()>:
c0012e22:	83 ec 0c             	sub    esp,0xc
c0012e25:	31 c0                	xor    eax,eax
c0012e27:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e2b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e32:	80 f9 19             	cmp    cl,0x19
c0012e35:	77 24                	ja     c0012e5b <Directory::exists()+0x39>
c0012e37:	8b 0c 8d 80 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5380]
c0012e3e:	85 c9                	test   ecx,ecx
c0012e40:	74 19                	je     c0012e5b <Directory::exists()+0x39>
c0012e42:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e48:	85 c9                	test   ecx,ecx
c0012e4a:	74 0f                	je     c0012e5b <Directory::exists()+0x39>
c0012e4c:	83 c2 0d             	add    edx,0xd
c0012e4f:	50                   	push   eax
c0012e50:	50                   	push   eax
c0012e51:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e53:	52                   	push   edx
c0012e54:	51                   	push   ecx
c0012e55:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012e58:	83 c4 10             	add    esp,0x10
c0012e5b:	83 c4 0c             	add    esp,0xc
c0012e5e:	c3                   	ret    
c0012e5f:	90                   	nop

c0012e60 <Directory::read(dirent*)>:
c0012e60:	83 ec 1c             	sub    esp,0x1c
c0012e63:	b8 0b 00 00 00       	mov    eax,0xb
c0012e68:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012e6c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e73:	80 fa 19             	cmp    dl,0x19
c0012e76:	77 30                	ja     c0012ea8 <Directory::read(dirent*)+0x48>
c0012e78:	8b 14 95 80 ac 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5380]
c0012e7f:	85 d2                	test   edx,edx
c0012e81:	74 25                	je     c0012ea8 <Directory::read(dirent*)+0x48>
c0012e83:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012e8a:	74 1c                	je     c0012ea8 <Directory::read(dirent*)+0x48>
c0012e8c:	83 ec 0c             	sub    esp,0xc
c0012e8f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e91:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012e95:	52                   	push   edx
c0012e96:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012e9a:	6a 00                	push   0x0
c0012e9c:	68 10 01 00 00       	push   0x110
c0012ea1:	51                   	push   ecx
c0012ea2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012ea5:	83 c4 20             	add    esp,0x20
c0012ea8:	83 c4 1c             	add    esp,0x1c
c0012eab:	c3                   	ret    

c0012eac <Directory::create()>:
c0012eac:	83 ec 0c             	sub    esp,0xc
c0012eaf:	b8 0b 00 00 00       	mov    eax,0xb
c0012eb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012eb8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ebf:	80 f9 19             	cmp    cl,0x19
c0012ec2:	77 2f                	ja     c0012ef3 <Directory::create()+0x47>
c0012ec4:	8b 0c 8d 80 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5380]
c0012ecb:	85 c9                	test   ecx,ecx
c0012ecd:	74 24                	je     c0012ef3 <Directory::create()+0x47>
c0012ecf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ed5:	85 c9                	test   ecx,ecx
c0012ed7:	74 1a                	je     c0012ef3 <Directory::create()+0x47>
c0012ed9:	b8 06 00 00 00       	mov    eax,0x6
c0012ede:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ee2:	75 0f                	jne    c0012ef3 <Directory::create()+0x47>
c0012ee4:	83 c2 0d             	add    edx,0xd
c0012ee7:	50                   	push   eax
c0012ee8:	50                   	push   eax
c0012ee9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012eeb:	52                   	push   edx
c0012eec:	51                   	push   ecx
c0012eed:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0012ef0:	83 c4 10             	add    esp,0x10
c0012ef3:	83 c4 0c             	add    esp,0xc
c0012ef6:	c3                   	ret    
c0012ef7:	90                   	nop

c0012ef8 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0012ef8:	b8 0a 00 00 00       	mov    eax,0xa
c0012efd:	c3                   	ret    

c0012efe <Bus::Bus(char const*)>:
c0012efe:	83 ec 0c             	sub    esp,0xc
c0012f01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f05:	83 ec 08             	sub    esp,0x8
c0012f08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f0c:	50                   	push   eax
c0012f0d:	e8 60 09 00 00       	call   c0013872 <Device::Device(char const*)>
c0012f12:	83 c4 10             	add    esp,0x10
c0012f15:	ba 98 75 02 c0       	mov    edx,0xc0027598
c0012f1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f1e:	89 10                	mov    DWORD PTR [eax],edx
c0012f20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f24:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0012f2e:	90                   	nop
c0012f2f:	83 c4 0c             	add    esp,0xc
c0012f32:	c3                   	ret    
c0012f33:	90                   	nop

c0012f34 <Bus::~Bus()>:
c0012f34:	83 ec 0c             	sub    esp,0xc
c0012f37:	ba 98 75 02 c0       	mov    edx,0xc0027598
c0012f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f40:	89 10                	mov    DWORD PTR [eax],edx
c0012f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f46:	83 ec 0c             	sub    esp,0xc
c0012f49:	50                   	push   eax
c0012f4a:	e8 d5 05 00 00       	call   c0013524 <Device::~Device()>
c0012f4f:	83 c4 10             	add    esp,0x10
c0012f52:	90                   	nop
c0012f53:	83 c4 0c             	add    esp,0xc
c0012f56:	c3                   	ret    
c0012f57:	90                   	nop

c0012f58 <Bus::~Bus()>:
c0012f58:	83 ec 0c             	sub    esp,0xc
c0012f5b:	83 ec 0c             	sub    esp,0xc
c0012f5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f62:	e8 cd ff ff ff       	call   c0012f34 <Bus::~Bus()>
c0012f67:	83 c4 10             	add    esp,0x10
c0012f6a:	83 ec 08             	sub    esp,0x8
c0012f6d:	68 58 01 00 00       	push   0x158
c0012f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f76:	e8 1c f2 ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0012f7b:	83 c4 10             	add    esp,0x10
c0012f7e:	83 c4 0c             	add    esp,0xc
c0012f81:	c3                   	ret    

c0012f82 <Buzzer::Buzzer(char const*)>:
c0012f82:	83 ec 0c             	sub    esp,0xc
c0012f85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f89:	83 ec 08             	sub    esp,0x8
c0012f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f90:	50                   	push   eax
c0012f91:	e8 dc 08 00 00       	call   c0013872 <Device::Device(char const*)>
c0012f96:	83 c4 10             	add    esp,0x10
c0012f99:	ba c4 75 02 c0       	mov    edx,0xc00275c4
c0012f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fa2:	89 10                	mov    DWORD PTR [eax],edx
c0012fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fa8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0012fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fb6:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0012fc0:	90                   	nop
c0012fc1:	83 c4 0c             	add    esp,0xc
c0012fc4:	c3                   	ret    
c0012fc5:	90                   	nop

c0012fc6 <Buzzer::~Buzzer()>:
c0012fc6:	83 ec 0c             	sub    esp,0xc
c0012fc9:	ba c4 75 02 c0       	mov    edx,0xc00275c4
c0012fce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fd2:	89 10                	mov    DWORD PTR [eax],edx
c0012fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fd8:	83 ec 0c             	sub    esp,0xc
c0012fdb:	50                   	push   eax
c0012fdc:	e8 43 05 00 00       	call   c0013524 <Device::~Device()>
c0012fe1:	83 c4 10             	add    esp,0x10
c0012fe4:	90                   	nop
c0012fe5:	83 c4 0c             	add    esp,0xc
c0012fe8:	c3                   	ret    
c0012fe9:	90                   	nop

c0012fea <Buzzer::~Buzzer()>:
c0012fea:	83 ec 0c             	sub    esp,0xc
c0012fed:	83 ec 0c             	sub    esp,0xc
c0012ff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ff4:	e8 cd ff ff ff       	call   c0012fc6 <Buzzer::~Buzzer()>
c0012ff9:	83 c4 10             	add    esp,0x10
c0012ffc:	83 ec 08             	sub    esp,0x8
c0012fff:	68 5c 01 00 00       	push   0x15c
c0013004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013008:	e8 8a f1 ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c001300d:	83 c4 10             	add    esp,0x10
c0013010:	83 c4 0c             	add    esp,0xc
c0013013:	c3                   	ret    

c0013014 <Buzzer::stop()>:
c0013014:	83 ec 14             	sub    esp,0x14
c0013017:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001301b:	8b 10                	mov    edx,DWORD PTR [eax]
c001301d:	6a 00                	push   0x0
c001301f:	50                   	push   eax
c0013020:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013023:	83 c4 1c             	add    esp,0x1c
c0013026:	c3                   	ret    

c0013027 <beepThread(void*)>:
c0013027:	53                   	push   ebx
c0013028:	83 ec 08             	sub    esp,0x8
c001302b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001302f:	e8 28 8a 00 00       	call   c001ba5c <unlockScheduler()>
c0013034:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013039:	52                   	push   edx
c001303a:	52                   	push   edx
c001303b:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013041:	52                   	push   edx
c0013042:	50                   	push   eax
c0013043:	e8 5a 8f 00 00       	call   c001bfa2 <nanoSleep(unsigned long long)>
c0013048:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001304b:	e8 c4 ff ff ff       	call   c0013014 <Buzzer::stop()>
c0013050:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013058:	83 c4 18             	add    esp,0x18
c001305b:	5b                   	pop    ebx
c001305c:	e9 87 8e 00 00       	jmp    c001bee8 <blockTask(TaskState)>
c0013061:	90                   	nop

c0013062 <Buzzer::beep(int, int, bool)>:
c0013062:	57                   	push   edi
c0013063:	56                   	push   esi
c0013064:	53                   	push   ebx
c0013065:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013069:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001306d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013071:	52                   	push   edx
c0013072:	52                   	push   edx
c0013073:	8b 06                	mov    eax,DWORD PTR [esi]
c0013075:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013079:	56                   	push   esi
c001307a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001307d:	83 c4 10             	add    esp,0x10
c0013080:	89 f8                	mov    eax,edi
c0013082:	84 c0                	test   al,al
c0013084:	74 1f                	je     c00130a5 <Buzzer::beep(int, int, bool)+0x43>
c0013086:	50                   	push   eax
c0013087:	50                   	push   eax
c0013088:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001308e:	99                   	cdq    
c001308f:	52                   	push   edx
c0013090:	50                   	push   eax
c0013091:	e8 0c 8f 00 00       	call   c001bfa2 <nanoSleep(unsigned long long)>
c0013096:	83 c4 10             	add    esp,0x10
c0013099:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001309d:	5b                   	pop    ebx
c001309e:	5e                   	pop    esi
c001309f:	5f                   	pop    edi
c00130a0:	e9 6f ff ff ff       	jmp    c0013014 <Buzzer::stop()>
c00130a5:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00130ab:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c00130b0:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00130b8:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00130bc:	c7 44 24 14 27 30 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013027
c00130c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00130c8:	5b                   	pop    ebx
c00130c9:	5e                   	pop    esi
c00130ca:	5f                   	pop    edi
c00130cb:	e9 b4 8a 00 00       	jmp    c001bb84 <Process::createThread(void (*)(void*), void*, int)>

c00130d0 <loadClockSettings()>:
c00130d0:	c7 05 f4 a7 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002a7f4,0xa
c00130da:	c6 05 f1 a7 02 c0 00 	mov    BYTE PTR ds:0xc002a7f1,0x0
c00130e1:	c6 05 f0 a7 02 c0 01 	mov    BYTE PTR ds:0xc002a7f0,0x1
c00130e8:	c3                   	ret    
c00130e9:	90                   	nop

c00130ea <Clock::Clock(char const*)>:
c00130ea:	83 ec 0c             	sub    esp,0xc
c00130ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130f1:	83 ec 08             	sub    esp,0x8
c00130f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130f8:	50                   	push   eax
c00130f9:	e8 74 07 00 00       	call   c0013872 <Device::Device(char const*)>
c00130fe:	83 c4 10             	add    esp,0x10
c0013101:	ba f4 75 02 c0       	mov    edx,0xc00275f4
c0013106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001310a:	89 10                	mov    DWORD PTR [eax],edx
c001310c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013110:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001311a:	90                   	nop
c001311b:	83 c4 0c             	add    esp,0xc
c001311e:	c3                   	ret    
c001311f:	90                   	nop

c0013120 <Clock::~Clock()>:
c0013120:	83 ec 0c             	sub    esp,0xc
c0013123:	ba f4 75 02 c0       	mov    edx,0xc00275f4
c0013128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001312c:	89 10                	mov    DWORD PTR [eax],edx
c001312e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013132:	83 ec 0c             	sub    esp,0xc
c0013135:	50                   	push   eax
c0013136:	e8 e9 03 00 00       	call   c0013524 <Device::~Device()>
c001313b:	83 c4 10             	add    esp,0x10
c001313e:	90                   	nop
c001313f:	83 c4 0c             	add    esp,0xc
c0013142:	c3                   	ret    
c0013143:	90                   	nop

c0013144 <Clock::~Clock()>:
c0013144:	83 ec 0c             	sub    esp,0xc
c0013147:	83 ec 0c             	sub    esp,0xc
c001314a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001314e:	e8 cd ff ff ff       	call   c0013120 <Clock::~Clock()>
c0013153:	83 c4 10             	add    esp,0x10
c0013156:	83 ec 08             	sub    esp,0x8
c0013159:	68 58 01 00 00       	push   0x158
c001315e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013162:	e8 30 f0 ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0013167:	83 c4 10             	add    esp,0x10
c001316a:	83 c4 0c             	add    esp,0xc
c001316d:	c3                   	ret    

c001316e <Clock::timeInSecondsLocal()>:
c001316e:	53                   	push   ebx
c001316f:	83 ec 14             	sub    esp,0x14
c0013172:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013176:	8b 10                	mov    edx,DWORD PTR [eax]
c0013178:	50                   	push   eax
c0013179:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001317c:	0f b6 0d f0 a7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a7f0
c0013183:	03 0d f4 a7 02 c0    	add    ecx,DWORD PTR ds:0xc002a7f4
c0013189:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001318f:	89 cb                	mov    ebx,ecx
c0013191:	c1 fb 1f             	sar    ebx,0x1f
c0013194:	01 c8                	add    eax,ecx
c0013196:	11 da                	adc    edx,ebx
c0013198:	83 c4 10             	add    esp,0x10
c001319b:	31 c9                	xor    ecx,ecx
c001319d:	80 3d f1 a7 02 c0 00 	cmp    BYTE PTR ds:0xc002a7f1,0x0
c00131a4:	74 05                	je     c00131ab <Clock::timeInSecondsLocal()+0x3d>
c00131a6:	b9 08 07 00 00       	mov    ecx,0x708
c00131ab:	31 db                	xor    ebx,ebx
c00131ad:	01 c8                	add    eax,ecx
c00131af:	11 da                	adc    edx,ebx
c00131b1:	83 c4 08             	add    esp,0x8
c00131b4:	5b                   	pop    ebx
c00131b5:	c3                   	ret    

c00131b6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00131b6:	57                   	push   edi
c00131b7:	56                   	push   esi
c00131b8:	53                   	push   ebx
c00131b9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00131bd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00131c1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131c3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00131c7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00131ca:	0f b6 05 f0 a7 02 c0 	movzx  eax,BYTE PTR ds:0xc002a7f0
c00131d1:	03 05 f4 a7 02 c0    	add    eax,DWORD PTR ds:0xc002a7f4
c00131d7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00131dd:	99                   	cdq    
c00131de:	29 c6                	sub    esi,eax
c00131e0:	19 d7                	sbb    edi,edx
c00131e2:	89 f0                	mov    eax,esi
c00131e4:	89 fa                	mov    edx,edi
c00131e6:	31 f6                	xor    esi,esi
c00131e8:	80 3d f1 a7 02 c0 00 	cmp    BYTE PTR ds:0xc002a7f1,0x0
c00131ef:	74 05                	je     c00131f6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00131f1:	be 08 07 00 00       	mov    esi,0x708
c00131f6:	31 ff                	xor    edi,edi
c00131f8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00131fc:	29 f0                	sub    eax,esi
c00131fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013202:	19 fa                	sbb    edx,edi
c0013204:	89 d8                	mov    eax,ebx
c0013206:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001320a:	5b                   	pop    ebx
c001320b:	5e                   	pop    esi
c001320c:	5f                   	pop    edi
c001320d:	ff e0                	jmp    eax

c001320f <datetimeToSeconds(datetime_t)>:
c001320f:	55                   	push   ebp
c0013210:	57                   	push   edi
c0013211:	56                   	push   esi
c0013212:	53                   	push   ebx
c0013213:	83 ec 14             	sub    esp,0x14
c0013216:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001321a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001321e:	89 d3                	mov    ebx,edx
c0013220:	0f b6 c6             	movzx  eax,dh
c0013223:	c1 eb 10             	shr    ebx,0x10
c0013226:	48                   	dec    eax
c0013227:	66 81 eb 6c 07       	sub    bx,0x76c
c001322c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013230:	0f b6 f5             	movzx  esi,ch
c0013233:	89 cf                	mov    edi,ecx
c0013235:	6b f6 3c             	imul   esi,esi,0x3c
c0013238:	c1 ef 10             	shr    edi,0x10
c001323b:	0f b6 c9             	movzx  ecx,cl
c001323e:	89 f8                	mov    eax,edi
c0013240:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013246:	0f b6 f8             	movzx  edi,al
c0013249:	0f b6 d2             	movzx  edx,dl
c001324c:	01 fe                	add    esi,edi
c001324e:	01 f1                	add    ecx,esi
c0013250:	0f b7 f3             	movzx  esi,bx
c0013253:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013257:	c1 f9 1f             	sar    ecx,0x1f
c001325a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001325f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013263:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013268:	8b 0c 8d 40 76 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd89c0]
c001326f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013273:	76 29                	jbe    c001329e <datetimeToSeconds(datetime_t)+0x8f>
c0013275:	f6 c3 03             	test   bl,0x3
c0013278:	75 24                	jne    c001329e <datetimeToSeconds(datetime_t)+0x8f>
c001327a:	31 d2                	xor    edx,edx
c001327c:	bf 64 00 00 00       	mov    edi,0x64
c0013281:	89 d8                	mov    eax,ebx
c0013283:	66 f7 f7             	div    di
c0013286:	66 85 d2             	test   dx,dx
c0013289:	75 12                	jne    c001329d <datetimeToSeconds(datetime_t)+0x8e>
c001328b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013291:	bf 90 01 00 00       	mov    edi,0x190
c0013296:	99                   	cdq    
c0013297:	f7 ff                	idiv   edi
c0013299:	85 d2                	test   edx,edx
c001329b:	75 01                	jne    c001329e <datetimeToSeconds(datetime_t)+0x8f>
c001329d:	41                   	inc    ecx
c001329e:	66 83 fb 46          	cmp    bx,0x46
c00132a2:	76 45                	jbe    c00132e9 <datetimeToSeconds(datetime_t)+0xda>
c00132a4:	bb 46 00 00 00       	mov    ebx,0x46
c00132a9:	bf 64 00 00 00       	mov    edi,0x64
c00132ae:	bd 90 01 00 00       	mov    ebp,0x190
c00132b3:	b8 6d 01 00 00       	mov    eax,0x16d
c00132b8:	f6 c3 03             	test   bl,0x3
c00132bb:	75 23                	jne    c00132e0 <datetimeToSeconds(datetime_t)+0xd1>
c00132bd:	89 d8                	mov    eax,ebx
c00132bf:	99                   	cdq    
c00132c0:	f7 ff                	idiv   edi
c00132c2:	b8 6e 01 00 00       	mov    eax,0x16e
c00132c7:	85 d2                	test   edx,edx
c00132c9:	75 15                	jne    c00132e0 <datetimeToSeconds(datetime_t)+0xd1>
c00132cb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00132d1:	99                   	cdq    
c00132d2:	f7 fd                	idiv   ebp
c00132d4:	83 fa 01             	cmp    edx,0x1
c00132d7:	19 c0                	sbb    eax,eax
c00132d9:	f7 d0                	not    eax
c00132db:	05 6e 01 00 00       	add    eax,0x16e
c00132e0:	01 c1                	add    ecx,eax
c00132e2:	43                   	inc    ebx
c00132e3:	39 f3                	cmp    ebx,esi
c00132e5:	7c cc                	jl     c00132b3 <datetimeToSeconds(datetime_t)+0xa4>
c00132e7:	eb 35                	jmp    c001331e <datetimeToSeconds(datetime_t)+0x10f>
c00132e9:	74 33                	je     c001331e <datetimeToSeconds(datetime_t)+0x10f>
c00132eb:	b8 45 00 00 00       	mov    eax,0x45
c00132f0:	89 c2                	mov    edx,eax
c00132f2:	83 e2 03             	and    edx,0x3
c00132f5:	39 f0                	cmp    eax,esi
c00132f7:	7e 0f                	jle    c0013308 <datetimeToSeconds(datetime_t)+0xf9>
c00132f9:	83 fa 01             	cmp    edx,0x1
c00132fc:	19 d2                	sbb    edx,edx
c00132fe:	48                   	dec    eax
c00132ff:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013306:	eb e8                	jmp    c00132f0 <datetimeToSeconds(datetime_t)+0xe1>
c0013308:	b8 6d 01 00 00       	mov    eax,0x16d
c001330d:	85 d2                	test   edx,edx
c001330f:	75 0b                	jne    c001331c <datetimeToSeconds(datetime_t)+0x10d>
c0013311:	66 83 fb 01          	cmp    bx,0x1
c0013315:	19 c0                	sbb    eax,eax
c0013317:	05 6e 01 00 00       	add    eax,0x16e
c001331c:	29 c1                	sub    ecx,eax
c001331e:	b8 80 51 01 00       	mov    eax,0x15180
c0013323:	f7 e9                	imul   ecx
c0013325:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013329:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001332d:	83 c4 14             	add    esp,0x14
c0013330:	5b                   	pop    ebx
c0013331:	5e                   	pop    esi
c0013332:	5f                   	pop    edi
c0013333:	5d                   	pop    ebp
c0013334:	c3                   	ret    
c0013335:	90                   	nop

c0013336 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013336:	57                   	push   edi
c0013337:	56                   	push   esi
c0013338:	53                   	push   ebx
c0013339:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001333d:	8b 06                	mov    eax,DWORD PTR [esi]
c001333f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013342:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013346:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001334a:	e8 c0 fe ff ff       	call   c001320f <datetimeToSeconds(datetime_t)>
c001334f:	59                   	pop    ecx
c0013350:	0f b6 0d f0 a7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a7f0
c0013357:	5b                   	pop    ebx
c0013358:	03 0d f4 a7 02 c0    	add    ecx,DWORD PTR ds:0xc002a7f4
c001335e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013364:	89 cb                	mov    ebx,ecx
c0013366:	c1 fb 1f             	sar    ebx,0x1f
c0013369:	29 c8                	sub    eax,ecx
c001336b:	19 da                	sbb    edx,ebx
c001336d:	31 c9                	xor    ecx,ecx
c001336f:	80 3d f1 a7 02 c0 00 	cmp    BYTE PTR ds:0xc002a7f1,0x0
c0013376:	74 05                	je     c001337d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013378:	b9 08 07 00 00       	mov    ecx,0x708
c001337d:	31 db                	xor    ebx,ebx
c001337f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013383:	29 c8                	sub    eax,ecx
c0013385:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013389:	19 da                	sbb    edx,ebx
c001338b:	89 f8                	mov    eax,edi
c001338d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013391:	5b                   	pop    ebx
c0013392:	5e                   	pop    esi
c0013393:	5f                   	pop    edi
c0013394:	ff e0                	jmp    eax

c0013396 <secondsToDatetime(unsigned long long)>:
c0013396:	55                   	push   ebp
c0013397:	57                   	push   edi
c0013398:	56                   	push   esi
c0013399:	53                   	push   ebx
c001339a:	83 ec 1c             	sub    esp,0x1c
c001339d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00133a1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00133a5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00133a9:	6a 00                	push   0x0
c00133ab:	68 80 51 01 00       	push   0x15180
c00133b0:	55                   	push   ebp
c00133b1:	57                   	push   edi
c00133b2:	e8 e5 01 01 00       	call   c002359c <__udivdi3>
c00133b7:	83 c4 10             	add    esp,0x10
c00133ba:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00133c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00133c4:	6a 00                	push   0x0
c00133c6:	68 80 51 01 00       	push   0x15180
c00133cb:	55                   	push   ebp
c00133cc:	57                   	push   edi
c00133cd:	bf 10 0e 00 00       	mov    edi,0xe10
c00133d2:	e8 c5 02 01 00       	call   c002369c <__umoddi3>
c00133d7:	83 c4 10             	add    esp,0x10
c00133da:	99                   	cdq    
c00133db:	f7 ff                	idiv   edi
c00133dd:	bf 3c 00 00 00       	mov    edi,0x3c
c00133e2:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00133e5:	89 d0                	mov    eax,edx
c00133e7:	99                   	cdq    
c00133e8:	f7 ff                	idiv   edi
c00133ea:	85 db                	test   ebx,ebx
c00133ec:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00133ef:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00133f2:	79 11                	jns    c0013405 <secondsToDatetime(unsigned long long)+0x6f>
c00133f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00133f8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00133fe:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013403:	eb 07                	jmp    c001340c <secondsToDatetime(unsigned long long)+0x76>
c0013405:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001340a:	89 d8                	mov    eax,ebx
c001340c:	bf b4 05 00 00       	mov    edi,0x5b4
c0013411:	99                   	cdq    
c0013412:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013417:	f7 f9                	idiv   ecx
c0013419:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001341e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013422:	31 d2                	xor    edx,edx
c0013424:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001342c:	01 c3                	add    ebx,eax
c001342e:	89 d8                	mov    eax,ebx
c0013430:	f7 f1                	div    ecx
c0013432:	31 d2                	xor    edx,edx
c0013434:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013437:	89 d8                	mov    eax,ebx
c0013439:	f7 f7                	div    edi
c001343b:	31 d2                	xor    edx,edx
c001343d:	29 c1                	sub    ecx,eax
c001343f:	89 d8                	mov    eax,ebx
c0013441:	f7 f5                	div    ebp
c0013443:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013448:	29 c1                	sub    ecx,eax
c001344a:	31 d2                	xor    edx,edx
c001344c:	89 c8                	mov    eax,ecx
c001344e:	f7 f5                	div    ebp
c0013450:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013455:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013459:	31 d2                	xor    edx,edx
c001345b:	89 c8                	mov    eax,ecx
c001345d:	f7 f5                	div    ebp
c001345f:	31 d2                	xor    edx,edx
c0013461:	01 c3                	add    ebx,eax
c0013463:	89 c8                	mov    eax,ecx
c0013465:	f7 f7                	div    edi
c0013467:	bf 99 00 00 00       	mov    edi,0x99
c001346c:	29 c3                	sub    ebx,eax
c001346e:	31 d2                	xor    edx,edx
c0013470:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013478:	29 c3                	sub    ebx,eax
c001347a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001347d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013480:	bb 05 00 00 00       	mov    ebx,0x5
c0013485:	83 c1 02             	add    ecx,0x2
c0013488:	89 c8                	mov    eax,ecx
c001348a:	f7 f7                	div    edi
c001348c:	31 d2                	xor    edx,edx
c001348e:	89 c7                	mov    edi,eax
c0013490:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013496:	83 c0 02             	add    eax,0x2
c0013499:	f7 f3                	div    ebx
c001349b:	89 eb                	mov    ebx,ebp
c001349d:	29 c3                	sub    ebx,eax
c001349f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00134a5:	88 1e                	mov    BYTE PTR [esi],bl
c00134a7:	19 c0                	sbb    eax,eax
c00134a9:	31 d2                	xor    edx,edx
c00134ab:	83 e0 0c             	and    eax,0xc
c00134ae:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00134b2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00134ba:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00134be:	83 f9 01             	cmp    ecx,0x1
c00134c1:	0f 96 c2             	setbe  dl
c00134c4:	41                   	inc    ecx
c00134c5:	01 d0                	add    eax,edx
c00134c7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00134ca:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00134ce:	83 c4 1c             	add    esp,0x1c
c00134d1:	89 f0                	mov    eax,esi
c00134d3:	5b                   	pop    ebx
c00134d4:	5e                   	pop    esi
c00134d5:	5f                   	pop    edi
c00134d6:	5d                   	pop    ebp
c00134d7:	c2 04 00             	ret    0x4

c00134da <Clock::timeInDatetimeLocal()>:
c00134da:	53                   	push   ebx
c00134db:	83 ec 14             	sub    esp,0x14
c00134de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00134e2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00134e6:	e8 83 fc ff ff       	call   c001316e <Clock::timeInSecondsLocal()>
c00134eb:	83 c4 0c             	add    esp,0xc
c00134ee:	52                   	push   edx
c00134ef:	50                   	push   eax
c00134f0:	53                   	push   ebx
c00134f1:	e8 a0 fe ff ff       	call   c0013396 <secondsToDatetime(unsigned long long)>
c00134f6:	89 d8                	mov    eax,ebx
c00134f8:	83 c4 14             	add    esp,0x14
c00134fb:	5b                   	pop    ebx
c00134fc:	c2 04 00             	ret    0x4
c00134ff:	90                   	nop

c0013500 <Device::hibernate()>:
c0013500:	c3                   	ret    
c0013501:	90                   	nop

c0013502 <Device::wake()>:
c0013502:	c3                   	ret    
c0013503:	90                   	nop

c0013504 <Device::detect()>:
c0013504:	c3                   	ret    
c0013505:	90                   	nop

c0013506 <Device::disableLegacy()>:
c0013506:	c3                   	ret    
c0013507:	90                   	nop

c0013508 <Device::powerSaving(PowerSavingLevel)>:
c0013508:	c3                   	ret    
c0013509:	90                   	nop

c001350a <DriverlessDevice::close(int, int, void*)>:
c001350a:	31 c0                	xor    eax,eax
c001350c:	c3                   	ret    
c001350d:	90                   	nop

c001350e <DriverlessDevice::detect()>:
c001350e:	c3                   	ret    
c001350f:	90                   	nop

c0013510 <DriverlessDevice::open(int, int, void*)>:
c0013510:	83 ec 18             	sub    esp,0x18
c0013513:	68 70 76 02 c0       	push   0xc0027670
c0013518:	e8 ea 55 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c001351d:	83 c8 ff             	or     eax,0xffffffff
c0013520:	83 c4 1c             	add    esp,0x1c
c0013523:	c3                   	ret    

c0013524 <Device::~Device()>:
c0013524:	ba 98 76 02 c0       	mov    edx,0xc0027698
c0013529:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001352d:	89 10                	mov    DWORD PTR [eax],edx
c001352f:	90                   	nop
c0013530:	c3                   	ret    
c0013531:	90                   	nop

c0013532 <Device::~Device()>:
c0013532:	83 ec 0c             	sub    esp,0xc
c0013535:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013539:	e8 e6 ff ff ff       	call   c0013524 <Device::~Device()>
c001353e:	83 c4 04             	add    esp,0x4
c0013541:	83 ec 08             	sub    esp,0x8
c0013544:	68 58 01 00 00       	push   0x158
c0013549:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001354d:	e8 45 ec ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0013552:	83 c4 10             	add    esp,0x10
c0013555:	83 c4 0c             	add    esp,0xc
c0013558:	c3                   	ret    
c0013559:	90                   	nop

c001355a <Device::findAndLoadDriver()>:
c001355a:	c3                   	ret    
c001355b:	90                   	nop

c001355c <Device::preOpenPCI(PCIDeviceInfo)>:
c001355c:	57                   	push   edi
c001355d:	b9 09 00 00 00       	mov    ecx,0x9
c0013562:	56                   	push   esi
c0013563:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013567:	8d 74 24 10          	lea    esi,[esp+0x10]
c001356b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013575:	81 c7 18 01 00 00    	add    edi,0x118
c001357b:	fc                   	cld    
c001357c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001357e:	5e                   	pop    esi
c001357f:	5f                   	pop    edi
c0013580:	c3                   	ret    
c0013581:	90                   	nop

c0013582 <Device::preOpenACPI(void*, char*, char*)>:
c0013582:	56                   	push   esi
c0013583:	53                   	push   ebx
c0013584:	83 ec 08             	sub    esp,0x8
c0013587:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001358b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001358f:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013599:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001359d:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00135a3:	6a 1e                	push   0x1e
c00135a5:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00135ab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00135af:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00135b5:	50                   	push   eax
c00135b6:	e8 d4 d0 fe ff       	call   c000068f <memcpy>
c00135bb:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00135bf:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00135c3:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00135cb:	83 c4 14             	add    esp,0x14
c00135ce:	5b                   	pop    ebx
c00135cf:	5e                   	pop    esi
c00135d0:	e9 ba d0 fe ff       	jmp    c000068f <memcpy>
c00135d5:	90                   	nop

c00135d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00135d6:	55                   	push   ebp
c00135d7:	57                   	push   edi
c00135d8:	56                   	push   esi
c00135d9:	53                   	push   ebx
c00135da:	83 ec 0c             	sub    esp,0xc
c00135dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135e1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00135e5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00135e9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00135ed:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00135f2:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00135f9:	75 0b                	jne    c0013606 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00135fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00135fd:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0013601:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013604:	eb 24                	jmp    c001362a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c0013606:	e8 79 43 00 00       	call   c0017984 <CPU::current()>
c001360b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013611:	8b 10                	mov    edx,DWORD PTR [eax]
c0013613:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0013617:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001361b:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c001361f:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013623:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013627:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001362a:	83 c4 0c             	add    esp,0xc
c001362d:	5b                   	pop    ebx
c001362e:	5e                   	pop    esi
c001362f:	5f                   	pop    edi
c0013630:	5d                   	pop    ebp
c0013631:	ff e0                	jmp    eax
c0013633:	90                   	nop

c0013634 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013634:	57                   	push   edi
c0013635:	56                   	push   esi
c0013636:	53                   	push   ebx
c0013637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001363b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001363f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013643:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0013648:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001364f:	75 0b                	jne    c001365c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c0013651:	8b 00                	mov    eax,DWORD PTR [eax]
c0013653:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0013657:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001365a:	eb 20                	jmp    c001367c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c001365c:	e8 23 43 00 00       	call   c0017984 <CPU::current()>
c0013661:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013667:	8b 10                	mov    edx,DWORD PTR [eax]
c0013669:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001366d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0013671:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0013675:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013679:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c001367c:	5b                   	pop    ebx
c001367d:	5e                   	pop    esi
c001367e:	5f                   	pop    edi
c001367f:	ff e0                	jmp    eax
c0013681:	90                   	nop

c0013682 <Device::addChild(Device*)>:
c0013682:	53                   	push   ebx
c0013683:	83 ec 08             	sub    esp,0x8
c0013686:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001368a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001368e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013694:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001369a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001369c:	85 d2                	test   edx,edx
c001369e:	74 04                	je     c00136a4 <Device::addChild(Device*)+0x22>
c00136a0:	89 d3                	mov    ebx,edx
c00136a2:	eb f6                	jmp    c001369a <Device::addChild(Device*)+0x18>
c00136a4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00136a7:	83 ec 0c             	sub    esp,0xc
c00136aa:	6a 08                	push   0x8
c00136ac:	e8 d7 ea ff ff       	call   c0012188 <operator new(unsigned long)>
c00136b1:	89 03                	mov    DWORD PTR [ebx],eax
c00136b3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00136b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00136c0:	83 c4 18             	add    esp,0x18
c00136c3:	5b                   	pop    ebx
c00136c4:	c3                   	ret    
c00136c5:	90                   	nop

c00136c6 <Device::removeAllChildren()>:
c00136c6:	56                   	push   esi
c00136c7:	53                   	push   ebx
c00136c8:	52                   	push   edx
c00136c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136cd:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00136d3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00136d6:	74 17                	je     c00136ef <Device::removeAllChildren()+0x29>
c00136d8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00136db:	85 c0                	test   eax,eax
c00136dd:	74 0c                	je     c00136eb <Device::removeAllChildren()+0x25>
c00136df:	83 ec 0c             	sub    esp,0xc
c00136e2:	8b 10                	mov    edx,DWORD PTR [eax]
c00136e4:	50                   	push   eax
c00136e5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00136e8:	83 c4 10             	add    esp,0x10
c00136eb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00136ed:	eb e4                	jmp    c00136d3 <Device::removeAllChildren()+0xd>
c00136ef:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00136f5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00136fb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013701:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013708:	58                   	pop    eax
c0013709:	5b                   	pop    ebx
c001370a:	5e                   	pop    esi
c001370b:	c3                   	ret    

c001370c <Device::hibernateAll()>:
c001370c:	53                   	push   ebx
c001370d:	83 ec 14             	sub    esp,0x14
c0013710:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013714:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013716:	53                   	push   ebx
c0013717:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001371a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013720:	83 c4 10             	add    esp,0x10
c0013723:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013726:	74 0f                	je     c0013737 <Device::hibernateAll()+0x2b>
c0013728:	83 ec 0c             	sub    esp,0xc
c001372b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001372e:	e8 d9 ff ff ff       	call   c001370c <Device::hibernateAll()>
c0013733:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013735:	eb e9                	jmp    c0013720 <Device::hibernateAll()+0x14>
c0013737:	83 c4 08             	add    esp,0x8
c001373a:	5b                   	pop    ebx
c001373b:	c3                   	ret    

c001373c <Device::wakeAll()>:
c001373c:	53                   	push   ebx
c001373d:	83 ec 14             	sub    esp,0x14
c0013740:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013744:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013746:	53                   	push   ebx
c0013747:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001374a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013750:	83 c4 10             	add    esp,0x10
c0013753:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013756:	74 0f                	je     c0013767 <Device::wakeAll()+0x2b>
c0013758:	83 ec 0c             	sub    esp,0xc
c001375b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001375e:	e8 d9 ff ff ff       	call   c001373c <Device::wakeAll()>
c0013763:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013765:	eb e9                	jmp    c0013750 <Device::wakeAll()+0x14>
c0013767:	83 c4 08             	add    esp,0x8
c001376a:	5b                   	pop    ebx
c001376b:	c3                   	ret    

c001376c <Device::detectAll()>:
c001376c:	53                   	push   ebx
c001376d:	83 ec 14             	sub    esp,0x14
c0013770:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013774:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013776:	53                   	push   ebx
c0013777:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001377a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013780:	83 c4 10             	add    esp,0x10
c0013783:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013786:	74 0f                	je     c0013797 <Device::detectAll()+0x2b>
c0013788:	83 ec 0c             	sub    esp,0xc
c001378b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001378e:	e8 d9 ff ff ff       	call   c001376c <Device::detectAll()>
c0013793:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013795:	eb e9                	jmp    c0013780 <Device::detectAll()+0x14>
c0013797:	83 c4 08             	add    esp,0x8
c001379a:	5b                   	pop    ebx
c001379b:	c3                   	ret    

c001379c <Device::disableLegacyAll()>:
c001379c:	53                   	push   ebx
c001379d:	83 ec 14             	sub    esp,0x14
c00137a0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00137a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137a6:	53                   	push   ebx
c00137a7:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00137aa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00137b0:	83 c4 10             	add    esp,0x10
c00137b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00137b6:	74 0f                	je     c00137c7 <Device::disableLegacyAll()+0x2b>
c00137b8:	83 ec 0c             	sub    esp,0xc
c00137bb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00137be:	e8 d9 ff ff ff       	call   c001379c <Device::disableLegacyAll()>
c00137c3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00137c5:	eb e9                	jmp    c00137b0 <Device::disableLegacyAll()+0x14>
c00137c7:	83 c4 08             	add    esp,0x8
c00137ca:	5b                   	pop    ebx
c00137cb:	c3                   	ret    

c00137cc <Device::loadDriversForAll()>:
c00137cc:	53                   	push   ebx
c00137cd:	83 ec 08             	sub    esp,0x8
c00137d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d4:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00137da:	8b 18                	mov    ebx,DWORD PTR [eax]
c00137dc:	85 db                	test   ebx,ebx
c00137de:	74 12                	je     c00137f2 <Device::loadDriversForAll()+0x26>
c00137e0:	83 ec 0c             	sub    esp,0xc
c00137e3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00137e6:	e8 e1 ff ff ff       	call   c00137cc <Device::loadDriversForAll()>
c00137eb:	83 c4 10             	add    esp,0x10
c00137ee:	89 d8                	mov    eax,ebx
c00137f0:	eb e8                	jmp    c00137da <Device::loadDriversForAll()+0xe>
c00137f2:	83 c4 08             	add    esp,0x8
c00137f5:	5b                   	pop    ebx
c00137f6:	c3                   	ret    
c00137f7:	90                   	nop

c00137f8 <Device::closeAll()>:
c00137f8:	53                   	push   ebx
c00137f9:	83 ec 08             	sub    esp,0x8
c00137fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013800:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013802:	6a 00                	push   0x0
c0013804:	6a 00                	push   0x0
c0013806:	6a 00                	push   0x0
c0013808:	53                   	push   ebx
c0013809:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001380c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013812:	83 c4 10             	add    esp,0x10
c0013815:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013818:	74 0f                	je     c0013829 <Device::closeAll()+0x31>
c001381a:	83 ec 0c             	sub    esp,0xc
c001381d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013820:	e8 d3 ff ff ff       	call   c00137f8 <Device::closeAll()>
c0013825:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013827:	eb e9                	jmp    c0013812 <Device::closeAll()+0x1a>
c0013829:	83 c4 08             	add    esp,0x8
c001382c:	5b                   	pop    ebx
c001382d:	c3                   	ret    

c001382e <Device::powerSavingAll(PowerSavingLevel)>:
c001382e:	56                   	push   esi
c001382f:	53                   	push   ebx
c0013830:	83 ec 0c             	sub    esp,0xc
c0013833:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013837:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001383b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001383d:	56                   	push   esi
c001383e:	53                   	push   ebx
c001383f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013842:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013848:	83 c4 10             	add    esp,0x10
c001384b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001384e:	74 0f                	je     c001385f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013850:	52                   	push   edx
c0013851:	52                   	push   edx
c0013852:	56                   	push   esi
c0013853:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013856:	e8 d3 ff ff ff       	call   c001382e <Device::powerSavingAll(PowerSavingLevel)>
c001385b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001385d:	eb e9                	jmp    c0013848 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001385f:	58                   	pop    eax
c0013860:	5b                   	pop    ebx
c0013861:	5e                   	pop    esi
c0013862:	c3                   	ret    
c0013863:	90                   	nop

c0013864 <Device::setName(char const*)>:
c0013864:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001386c:	e9 f3 ce fe ff       	jmp    c0000764 <strcpy>
c0013871:	90                   	nop

c0013872 <Device::Device(char const*)>:
c0013872:	83 ec 0c             	sub    esp,0xc
c0013875:	ba 98 76 02 c0       	mov    edx,0xc0027698
c001387a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001387e:	89 10                	mov    DWORD PTR [eax],edx
c0013880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013884:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001388e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013892:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001389c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138a0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00138aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138ae:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00138b8:	83 ec 08             	sub    esp,0x8
c00138bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138c3:	e8 9c ff ff ff       	call   c0013864 <Device::setName(char const*)>
c00138c8:	83 c4 10             	add    esp,0x10
c00138cb:	83 ec 0c             	sub    esp,0xc
c00138ce:	6a 08                	push   0x8
c00138d0:	e8 b3 e8 ff ff       	call   c0012188 <operator new(unsigned long)>
c00138d5:	83 c4 10             	add    esp,0x10
c00138d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00138de:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00138e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138e9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00138ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00138f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00138ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013903:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013909:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013914:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001391b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001391f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001392a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013938:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013946:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013954:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001395e:	90                   	nop
c001395f:	83 c4 0c             	add    esp,0xc
c0013962:	c3                   	ret    
c0013963:	90                   	nop

c0013964 <Device::getName()>:
c0013964:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013968:	05 d0 00 00 00       	add    eax,0xd0
c001396d:	c3                   	ret    

c001396e <DriverlessDevice::DriverlessDevice(char const*)>:
c001396e:	83 ec 0c             	sub    esp,0xc
c0013971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013975:	83 ec 08             	sub    esp,0x8
c0013978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001397c:	50                   	push   eax
c001397d:	e8 f0 fe ff ff       	call   c0013872 <Device::Device(char const*)>
c0013982:	83 c4 10             	add    esp,0x10
c0013985:	ba c4 76 02 c0       	mov    edx,0xc00276c4
c001398a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001398e:	89 10                	mov    DWORD PTR [eax],edx
c0013990:	90                   	nop
c0013991:	83 c4 0c             	add    esp,0xc
c0013994:	c3                   	ret    
c0013995:	90                   	nop

c0013996 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013996:	57                   	push   edi
c0013997:	56                   	push   esi
c0013998:	53                   	push   ebx
c0013999:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001399d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00139a1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00139a5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00139ab:	75 0c                	jne    c00139b9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00139ad:	52                   	push   edx
c00139ae:	52                   	push   edx
c00139af:	53                   	push   ebx
c00139b0:	56                   	push   esi
c00139b1:	e8 3e 1b 01 00       	call   c00254f4 <LinkedList<Device>::addElement(Device*)>
c00139b6:	83 c4 10             	add    esp,0x10
c00139b9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00139bf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00139c2:	74 12                	je     c00139d6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00139c4:	50                   	push   eax
c00139c5:	57                   	push   edi
c00139c6:	56                   	push   esi
c00139c7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00139ca:	e8 c7 ff ff ff       	call   c0013996 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00139cf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00139d1:	83 c4 10             	add    esp,0x10
c00139d4:	eb e9                	jmp    c00139bf <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00139d6:	5b                   	pop    ebx
c00139d7:	5e                   	pop    esi
c00139d8:	5f                   	pop    edi
c00139d9:	c3                   	ret    

c00139da <getDevicesOfType(DeviceType)>:
c00139da:	53                   	push   ebx
c00139db:	83 ec 14             	sub    esp,0x14
c00139de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00139e2:	53                   	push   ebx
c00139e3:	e8 e8 1b 01 00       	call   c00255d0 <LinkedList<Device>::LinkedList()>
c00139e8:	83 c4 0c             	add    esp,0xc
c00139eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139ef:	53                   	push   ebx
c00139f0:	ff 35 88 a6 02 c0    	push   DWORD PTR ds:0xc002a688
c00139f6:	e8 9b ff ff ff       	call   c0013996 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00139fb:	89 d8                	mov    eax,ebx
c00139fd:	83 c4 18             	add    esp,0x18
c0013a00:	5b                   	pop    ebx
c0013a01:	c2 04 00             	ret    0x4

c0013a04 <HardDiskController::HardDiskController(char const*)>:
c0013a04:	83 ec 0c             	sub    esp,0xc
c0013a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a0b:	83 ec 08             	sub    esp,0x8
c0013a0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a12:	50                   	push   eax
c0013a13:	e8 5a fe ff ff       	call   c0013872 <Device::Device(char const*)>
c0013a18:	83 c4 10             	add    esp,0x10
c0013a1b:	ba f0 76 02 c0       	mov    edx,0xc00276f0
c0013a20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a24:	89 10                	mov    DWORD PTR [eax],edx
c0013a26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a2a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013a34:	90                   	nop
c0013a35:	83 c4 0c             	add    esp,0xc
c0013a38:	c3                   	ret    
c0013a39:	90                   	nop

c0013a3a <HardDiskController::~HardDiskController()>:
c0013a3a:	83 ec 0c             	sub    esp,0xc
c0013a3d:	ba f0 76 02 c0       	mov    edx,0xc00276f0
c0013a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a46:	89 10                	mov    DWORD PTR [eax],edx
c0013a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a4c:	83 ec 0c             	sub    esp,0xc
c0013a4f:	50                   	push   eax
c0013a50:	e8 cf fa ff ff       	call   c0013524 <Device::~Device()>
c0013a55:	83 c4 10             	add    esp,0x10
c0013a58:	90                   	nop
c0013a59:	83 c4 0c             	add    esp,0xc
c0013a5c:	c3                   	ret    
c0013a5d:	90                   	nop

c0013a5e <HardDiskController::~HardDiskController()>:
c0013a5e:	83 ec 0c             	sub    esp,0xc
c0013a61:	83 ec 0c             	sub    esp,0xc
c0013a64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a68:	e8 cd ff ff ff       	call   c0013a3a <HardDiskController::~HardDiskController()>
c0013a6d:	83 c4 10             	add    esp,0x10
c0013a70:	83 ec 08             	sub    esp,0x8
c0013a73:	68 58 01 00 00       	push   0x158
c0013a78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a7c:	e8 16 e7 ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0013a81:	83 c4 10             	add    esp,0x10
c0013a84:	83 c4 0c             	add    esp,0xc
c0013a87:	c3                   	ret    

c0013a88 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013a88:	83 ec 0c             	sub    esp,0xc
c0013a8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a8f:	83 ec 08             	sub    esp,0x8
c0013a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a96:	50                   	push   eax
c0013a97:	e8 d6 fd ff ff       	call   c0013872 <Device::Device(char const*)>
c0013a9c:	83 c4 10             	add    esp,0x10
c0013a9f:	ba 1c 77 02 c0       	mov    edx,0xc002771c
c0013aa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aa8:	89 10                	mov    DWORD PTR [eax],edx
c0013aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aae:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013ab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ab9:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ac4:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ad2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ad6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ae0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013aea:	90                   	nop
c0013aeb:	83 c4 0c             	add    esp,0xc
c0013aee:	c3                   	ret    
c0013aef:	90                   	nop

c0013af0 <PhysicalDisk::startCache()>:
c0013af0:	56                   	push   esi
c0013af1:	53                   	push   ebx
c0013af2:	83 ec 10             	sub    esp,0x10
c0013af5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013af9:	6a 30                	push   0x30
c0013afb:	e8 88 e6 ff ff       	call   c0012188 <operator new(unsigned long)>
c0013b00:	89 c6                	mov    esi,eax
c0013b02:	58                   	pop    eax
c0013b03:	5a                   	pop    edx
c0013b04:	53                   	push   ebx
c0013b05:	56                   	push   esi
c0013b06:	e8 15 25 00 00       	call   c0016020 <VCache::VCache(PhysicalDisk*)>
c0013b0b:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013b11:	83 c4 14             	add    esp,0x14
c0013b14:	5b                   	pop    ebx
c0013b15:	5e                   	pop    esi
c0013b16:	c3                   	ret    
c0013b17:	90                   	nop

c0013b18 <PhysicalDisk::~PhysicalDisk()>:
c0013b18:	83 ec 0c             	sub    esp,0xc
c0013b1b:	ba 1c 77 02 c0       	mov    edx,0xc002771c
c0013b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b24:	89 10                	mov    DWORD PTR [eax],edx
c0013b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b2a:	83 ec 0c             	sub    esp,0xc
c0013b2d:	50                   	push   eax
c0013b2e:	e8 f1 f9 ff ff       	call   c0013524 <Device::~Device()>
c0013b33:	83 c4 10             	add    esp,0x10
c0013b36:	90                   	nop
c0013b37:	83 c4 0c             	add    esp,0xc
c0013b3a:	c3                   	ret    
c0013b3b:	90                   	nop

c0013b3c <PhysicalDisk::~PhysicalDisk()>:
c0013b3c:	83 ec 0c             	sub    esp,0xc
c0013b3f:	83 ec 0c             	sub    esp,0xc
c0013b42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b46:	e8 cd ff ff ff       	call   c0013b18 <PhysicalDisk::~PhysicalDisk()>
c0013b4b:	83 c4 10             	add    esp,0x10
c0013b4e:	83 ec 08             	sub    esp,0x8
c0013b51:	68 6c 01 00 00       	push   0x16c
c0013b56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b5a:	e8 38 e6 ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0013b5f:	83 c4 10             	add    esp,0x10
c0013b62:	83 c4 0c             	add    esp,0xc
c0013b65:	c3                   	ret    

c0013b66 <FPU::FPU(char const*)>:
c0013b66:	83 ec 0c             	sub    esp,0xc
c0013b69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b6d:	83 ec 08             	sub    esp,0x8
c0013b70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b74:	50                   	push   eax
c0013b75:	e8 f8 fc ff ff       	call   c0013872 <Device::Device(char const*)>
c0013b7a:	83 c4 10             	add    esp,0x10
c0013b7d:	ba 5c 77 02 c0       	mov    edx,0xc002775c
c0013b82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b86:	89 10                	mov    DWORD PTR [eax],edx
c0013b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b8c:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013b96:	90                   	nop
c0013b97:	83 c4 0c             	add    esp,0xc
c0013b9a:	c3                   	ret    
c0013b9b:	90                   	nop

c0013b9c <FPU::~FPU()>:
c0013b9c:	83 ec 0c             	sub    esp,0xc
c0013b9f:	ba 5c 77 02 c0       	mov    edx,0xc002775c
c0013ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ba8:	89 10                	mov    DWORD PTR [eax],edx
c0013baa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bae:	83 ec 0c             	sub    esp,0xc
c0013bb1:	50                   	push   eax
c0013bb2:	e8 6d f9 ff ff       	call   c0013524 <Device::~Device()>
c0013bb7:	83 c4 10             	add    esp,0x10
c0013bba:	90                   	nop
c0013bbb:	83 c4 0c             	add    esp,0xc
c0013bbe:	c3                   	ret    
c0013bbf:	90                   	nop

c0013bc0 <FPU::~FPU()>:
c0013bc0:	83 ec 0c             	sub    esp,0xc
c0013bc3:	83 ec 0c             	sub    esp,0xc
c0013bc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bca:	e8 cd ff ff ff       	call   c0013b9c <FPU::~FPU()>
c0013bcf:	83 c4 10             	add    esp,0x10
c0013bd2:	83 ec 08             	sub    esp,0x8
c0013bd5:	68 58 01 00 00       	push   0x158
c0013bda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bde:	e8 b4 e5 ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0013be3:	83 c4 10             	add    esp,0x10
c0013be6:	83 c4 0c             	add    esp,0xc
c0013be9:	c3                   	ret    

c0013bea <setupFPU()>:
c0013bea:	53                   	push   ebx
c0013beb:	83 ec 08             	sub    esp,0x8
c0013bee:	8b 15 88 a6 02 c0    	mov    edx,DWORD PTR ds:0xc002a688
c0013bf4:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013bfb:	74 19                	je     c0013c16 <setupFPU()+0x2c>
c0013bfd:	83 ec 0c             	sub    esp,0xc
c0013c00:	68 58 01 00 00       	push   0x158
c0013c05:	e8 7e e5 ff ff       	call   c0012188 <operator new(unsigned long)>
c0013c0a:	89 c3                	mov    ebx,eax
c0013c0c:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c0f:	e8 32 e5 00 00       	call   c0022146 <AVX::AVX()>
c0013c14:	eb 5b                	jmp    c0013c71 <setupFPU()+0x87>
c0013c16:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013c1c:	84 c0                	test   al,al
c0013c1e:	79 19                	jns    c0013c39 <setupFPU()+0x4f>
c0013c20:	83 ec 0c             	sub    esp,0xc
c0013c23:	68 58 01 00 00       	push   0x158
c0013c28:	e8 5b e5 ff ff       	call   c0012188 <operator new(unsigned long)>
c0013c2d:	89 c3                	mov    ebx,eax
c0013c2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c32:	e8 35 e6 00 00       	call   c002226c <SSE::SSE()>
c0013c37:	eb 38                	jmp    c0013c71 <setupFPU()+0x87>
c0013c39:	a8 20                	test   al,0x20
c0013c3b:	74 19                	je     c0013c56 <setupFPU()+0x6c>
c0013c3d:	83 ec 0c             	sub    esp,0xc
c0013c40:	68 58 01 00 00       	push   0x158
c0013c45:	e8 3e e5 ff ff       	call   c0012188 <operator new(unsigned long)>
c0013c4a:	89 c3                	mov    ebx,eax
c0013c4c:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c4f:	e8 82 e5 00 00       	call   c00221d6 <MMX::MMX()>
c0013c54:	eb 1b                	jmp    c0013c71 <setupFPU()+0x87>
c0013c56:	a8 10                	test   al,0x10
c0013c58:	74 1c                	je     c0013c76 <setupFPU()+0x8c>
c0013c5a:	83 ec 0c             	sub    esp,0xc
c0013c5d:	68 58 01 00 00       	push   0x158
c0013c62:	e8 21 e5 ff ff       	call   c0012188 <operator new(unsigned long)>
c0013c67:	89 c3                	mov    ebx,eax
c0013c69:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c6c:	e8 89 e6 00 00       	call   c00222fa <x87::x87()>
c0013c71:	83 c4 10             	add    esp,0x10
c0013c74:	eb 35                	jmp    c0013cab <setupFPU()+0xc1>
c0013c76:	83 ec 0c             	sub    esp,0xc
c0013c79:	83 e0 ef             	and    eax,0xffffffef
c0013c7c:	31 db                	xor    ebx,ebx
c0013c7e:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013c84:	68 48 77 02 c0       	push   0xc0027748
c0013c89:	e8 e9 e5 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0013c8e:	e8 f1 3c 00 00       	call   c0017984 <CPU::current()>
c0013c93:	e8 ec 3c 00 00       	call   c0017984 <CPU::current()>
c0013c98:	e8 8b 19 01 00       	call   c0025628 <CPU::readCR0()>
c0013c9d:	83 c8 04             	or     eax,0x4
c0013ca0:	89 04 24             	mov    DWORD PTR [esp],eax
c0013ca3:	e8 92 19 01 00       	call   c002563a <CPU::writeCR0(unsigned long)>
c0013ca8:	83 c4 10             	add    esp,0x10
c0013cab:	89 d8                	mov    eax,ebx
c0013cad:	83 c4 08             	add    esp,0x8
c0013cb0:	5b                   	pop    ebx
c0013cb1:	c3                   	ret    

c0013cb2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0013cb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013cb6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013cba:	c1 e0 04             	shl    eax,0x4
c0013cbd:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013cc1:	8d 50 10             	lea    edx,[eax+0x10]
c0013cc4:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0013cca:	74 08                	je     c0013cd4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0013ccc:	83 c0 04             	add    eax,0x4
c0013ccf:	39 d0                	cmp    eax,edx
c0013cd1:	75 f1                	jne    c0013cc4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0013cd3:	c3                   	ret    
c0013cd4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013cde:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013ce8:	eb e2                	jmp    c0013ccc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0013cea <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0013cea:	57                   	push   edi
c0013ceb:	31 c0                	xor    eax,eax
c0013ced:	56                   	push   esi
c0013cee:	53                   	push   ebx
c0013cef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013cf3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013cf7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013cfb:	89 da                	mov    edx,ebx
c0013cfd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013d01:	c1 e2 04             	shl    edx,0x4
c0013d04:	01 ca                	add    edx,ecx
c0013d06:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0013d0e:	74 16                	je     c0013d26 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0013d10:	40                   	inc    eax
c0013d11:	83 f8 04             	cmp    eax,0x4
c0013d14:	75 f0                	jne    c0013d06 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0013d16:	c7 44 24 10 8c 77 02 c0 	mov    DWORD PTR [esp+0x10],0xc002778c
c0013d1e:	5b                   	pop    ebx
c0013d1f:	5e                   	pop    esi
c0013d20:	5f                   	pop    edi
c0013d21:	e9 e1 4d 00 00       	jmp    c0018b07 <Krnl::panic(char const*)>
c0013d26:	8d 04 98             	lea    eax,[eax+ebx*4]
c0013d29:	8d 04 81             	lea    eax,[ecx+eax*4]
c0013d2c:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0013d32:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0013d38:	5b                   	pop    ebx
c0013d39:	5e                   	pop    esi
c0013d3a:	5f                   	pop    edi
c0013d3b:	c3                   	ret    

c0013d3c <doubleFault(regs*, void*)>:
c0013d3c:	55                   	push   ebp
c0013d3d:	89 e5                	mov    ebp,esp
c0013d3f:	83 ec 08             	sub    esp,0x8
c0013d42:	83 ec 0c             	sub    esp,0xc
c0013d45:	68 c7 77 02 c0       	push   0xc00277c7
c0013d4a:	e8 b8 4d 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c0013d4f:	83 c4 10             	add    esp,0x10
c0013d52:	90                   	nop
c0013d53:	c9                   	leave  
c0013d54:	c3                   	ret    
c0013d55:	90                   	nop

c0013d56 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013d56:	56                   	push   esi
c0013d57:	53                   	push   ebx
c0013d58:	50                   	push   eax
c0013d59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d5d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013d61:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013d66:	75 35                	jne    c0013d9d <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0013d68:	8d 43 20             	lea    eax,[ebx+0x20]
c0013d6b:	31 d2                	xor    edx,edx
c0013d6d:	89 c1                	mov    ecx,eax
c0013d6f:	c1 e1 04             	shl    ecx,0x4
c0013d72:	01 f1                	add    ecx,esi
c0013d74:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0013d7c:	74 3e                	je     c0013dbc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0013d7e:	42                   	inc    edx
c0013d7f:	83 fa 04             	cmp    edx,0x4
c0013d82:	75 f0                	jne    c0013d74 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0013d84:	83 ec 0c             	sub    esp,0xc
c0013d87:	68 0c 78 02 c0       	push   0xc002780c
c0013d8c:	e8 76 4d 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c0013d91:	83 c4 10             	add    esp,0x10
c0013d94:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013d99:	5a                   	pop    edx
c0013d9a:	5b                   	pop    ebx
c0013d9b:	5e                   	pop    esi
c0013d9c:	c3                   	ret    
c0013d9d:	83 ec 0c             	sub    esp,0xc
c0013da0:	56                   	push   esi
c0013da1:	e8 be fb ff ff       	call   c0013964 <Device::getName()>
c0013da6:	83 c4 10             	add    esp,0x10
c0013da9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013dac:	75 ba                	jne    c0013d68 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013dae:	83 fb 0f             	cmp    ebx,0xf
c0013db1:	7f 29                	jg     c0013ddc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0013db3:	0f b6 9b 60 99 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd66a0]
c0013dba:	eb ac                	jmp    c0013d68 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013dbc:	8d 04 82             	lea    eax,[edx+eax*4]
c0013dbf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013dc3:	8d 04 86             	lea    eax,[esi+eax*4]
c0013dc6:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0013dcc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013dd0:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0013dd6:	89 d8                	mov    eax,ebx
c0013dd8:	5a                   	pop    edx
c0013dd9:	5b                   	pop    ebx
c0013dda:	5e                   	pop    esi
c0013ddb:	c3                   	ret    
c0013ddc:	83 ec 0c             	sub    esp,0xc
c0013ddf:	68 d4 77 02 c0       	push   0xc00277d4
c0013de4:	e8 1e 4d 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c0013de9:	83 c4 10             	add    esp,0x10
c0013dec:	e9 77 ff ff ff       	jmp    c0013d68 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013df1:	90                   	nop

c0013df2 <InterruptController::clearAllHandlers(int, bool)>:
c0013df2:	56                   	push   esi
c0013df3:	53                   	push   ebx
c0013df4:	52                   	push   edx
c0013df5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013df9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013dfd:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013e02:	75 61                	jne    c0013e65 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0013e04:	8d 46 20             	lea    eax,[esi+0x20]
c0013e07:	c1 e6 04             	shl    esi,0x4
c0013e0a:	c1 e0 04             	shl    eax,0x4
c0013e0d:	01 de                	add    esi,ebx
c0013e0f:	01 d8                	add    eax,ebx
c0013e11:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0013e1b:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0013e25:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0013e2f:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0013e39:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0013e43:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0013e4d:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0013e57:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0013e61:	58                   	pop    eax
c0013e62:	5b                   	pop    ebx
c0013e63:	5e                   	pop    esi
c0013e64:	c3                   	ret    
c0013e65:	83 ec 0c             	sub    esp,0xc
c0013e68:	53                   	push   ebx
c0013e69:	e8 f6 fa ff ff       	call   c0013964 <Device::getName()>
c0013e6e:	83 c4 10             	add    esp,0x10
c0013e71:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013e74:	75 8e                	jne    c0013e04 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e76:	83 fe 0f             	cmp    esi,0xf
c0013e79:	7f 09                	jg     c0013e84 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0013e7b:	0f b6 b6 60 99 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd66a0]
c0013e82:	eb 80                	jmp    c0013e04 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e84:	83 ec 0c             	sub    esp,0xc
c0013e87:	68 48 78 02 c0       	push   0xc0027848
c0013e8c:	e8 76 4c 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c0013e91:	83 c4 10             	add    esp,0x10
c0013e94:	e9 6b ff ff ff       	jmp    c0013e04 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e99:	90                   	nop

c0013e9a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013e9a:	56                   	push   esi
c0013e9b:	53                   	push   ebx
c0013e9c:	52                   	push   edx
c0013e9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ea1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ea5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013eaa:	75 3a                	jne    c0013ee6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0013eac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013eb0:	8d 50 20             	lea    edx,[eax+0x20]
c0013eb3:	c1 e2 04             	shl    edx,0x4
c0013eb6:	8d 04 16             	lea    eax,[esi+edx*1]
c0013eb9:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0013ebd:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0013ec3:	74 0b                	je     c0013ed0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0013ec5:	83 c0 04             	add    eax,0x4
c0013ec8:	39 d0                	cmp    eax,edx
c0013eca:	75 f1                	jne    c0013ebd <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0013ecc:	58                   	pop    eax
c0013ecd:	5b                   	pop    ebx
c0013ece:	5e                   	pop    esi
c0013ecf:	c3                   	ret    
c0013ed0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013eda:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013ee4:	eb df                	jmp    c0013ec5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0013ee6:	83 ec 0c             	sub    esp,0xc
c0013ee9:	56                   	push   esi
c0013eea:	e8 75 fa ff ff       	call   c0013964 <Device::getName()>
c0013eef:	83 c4 10             	add    esp,0x10
c0013ef2:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013ef5:	75 b5                	jne    c0013eac <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013ef7:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0013efc:	7f 11                	jg     c0013f0f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0013efe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f02:	0f b6 80 60 99 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd66a0]
c0013f09:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f0d:	eb 9d                	jmp    c0013eac <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013f0f:	83 ec 0c             	sub    esp,0xc
c0013f12:	68 48 78 02 c0       	push   0xc0027848
c0013f17:	e8 eb 4b 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c0013f1c:	83 c4 10             	add    esp,0x10
c0013f1f:	eb 8b                	jmp    c0013eac <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0013f21 <nmiHandler(regs*, void*)>:
c0013f21:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c0013f26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013f2a:	e9 83 a9 ff ff       	jmp    c000e8b2 <Computer::handleNMI()>

c0013f2f <int_handler>:
c0013f2f:	55                   	push   ebp
c0013f30:	57                   	push   edi
c0013f31:	56                   	push   esi
c0013f32:	53                   	push   ebx
c0013f33:	83 ec 0c             	sub    esp,0xc
c0013f36:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013f3a:	80 3d 94 b1 02 c0 00 	cmp    BYTE PTR ds:0xc002b194,0x0
c0013f41:	74 0b                	je     c0013f4e <int_handler+0x1f>
c0013f43:	fa                   	cli    
c0013f44:	f4                   	hlt    
c0013f45:	80 3d 94 b1 02 c0 00 	cmp    BYTE PTR ds:0xc002b194,0x0
c0013f4c:	75 f5                	jne    c0013f43 <int_handler+0x14>
c0013f4e:	e8 31 3a 00 00       	call   c0017984 <CPU::current()>
c0013f53:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0013f56:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0013f5c:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013f5f:	83 f8 17             	cmp    eax,0x17
c0013f62:	77 13                	ja     c0013f77 <int_handler+0x48>
c0013f64:	83 ec 08             	sub    esp,0x8
c0013f67:	8b 17                	mov    edx,DWORD PTR [edi]
c0013f69:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013f6c:	0f b6 c0             	movzx  eax,al
c0013f6f:	50                   	push   eax
c0013f70:	57                   	push   edi
c0013f71:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0013f74:	83 c4 10             	add    esp,0x10
c0013f77:	83 c3 15             	add    ebx,0x15
c0013f7a:	c1 e3 04             	shl    ebx,0x4
c0013f7d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0013f81:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0013f88:	31 db                	xor    ebx,ebx
c0013f8a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0013f8e:	85 c0                	test   eax,eax
c0013f90:	74 13                	je     c0013fa5 <int_handler+0x76>
c0013f92:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013f95:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0013f99:	74 1c                	je     c0013fb7 <int_handler+0x88>
c0013f9b:	83 ec 08             	sub    esp,0x8
c0013f9e:	52                   	push   edx
c0013f9f:	56                   	push   esi
c0013fa0:	ff d0                	call   eax
c0013fa2:	83 c4 10             	add    esp,0x10
c0013fa5:	43                   	inc    ebx
c0013fa6:	83 fb 04             	cmp    ebx,0x4
c0013fa9:	75 df                	jne    c0013f8a <int_handler+0x5b>
c0013fab:	83 c4 0c             	add    esp,0xc
c0013fae:	31 c0                	xor    eax,eax
c0013fb0:	5b                   	pop    ebx
c0013fb1:	31 d2                	xor    edx,edx
c0013fb3:	5e                   	pop    esi
c0013fb4:	5f                   	pop    edi
c0013fb5:	5d                   	pop    ebp
c0013fb6:	c3                   	ret    
c0013fb7:	83 ec 08             	sub    esp,0x8
c0013fba:	52                   	push   edx
c0013fbb:	56                   	push   esi
c0013fbc:	ff d0                	call   eax
c0013fbe:	83 c4 10             	add    esp,0x10
c0013fc1:	83 c4 0c             	add    esp,0xc
c0013fc4:	5b                   	pop    ebx
c0013fc5:	5e                   	pop    esi
c0013fc6:	5f                   	pop    edi
c0013fc7:	5d                   	pop    ebp
c0013fc8:	c3                   	ret    
c0013fc9:	90                   	nop

c0013fca <InterruptController::InterruptController(char const*)>:
c0013fca:	83 ec 1c             	sub    esp,0x1c
c0013fcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fd1:	83 ec 08             	sub    esp,0x8
c0013fd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013fd8:	50                   	push   eax
c0013fd9:	e8 94 f8 ff ff       	call   c0013872 <Device::Device(char const*)>
c0013fde:	83 c4 10             	add    esp,0x10
c0013fe1:	ba 7c 7a 02 c0       	mov    edx,0xc0027a7c
c0013fe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fea:	89 10                	mov    DWORD PTR [eax],edx
c0013fec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ff0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0013ffa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014002:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c001400a:	7f 5e                	jg     c001406a <InterruptController::InterruptController(char const*)+0xa0>
c001400c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014014:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014019:	7f 49                	jg     c0014064 <InterruptController::InterruptController(char const*)+0x9a>
c001401b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001401f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014023:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001402a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001402e:	01 ca                	add    edx,ecx
c0014030:	83 c2 54             	add    edx,0x54
c0014033:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001403b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001403f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014043:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001404a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001404e:	01 ca                	add    edx,ecx
c0014050:	81 c2 54 04 00 00    	add    edx,0x454
c0014056:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001405e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014062:	eb b0                	jmp    c0014014 <InterruptController::InterruptController(char const*)+0x4a>
c0014064:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014068:	eb 98                	jmp    c0014002 <InterruptController::InterruptController(char const*)+0x38>
c001406a:	90                   	nop
c001406b:	83 c4 1c             	add    esp,0x1c
c001406e:	c3                   	ret    
c001406f:	90                   	nop

c0014070 <InterruptController::~InterruptController()>:
c0014070:	83 ec 0c             	sub    esp,0xc
c0014073:	ba 7c 7a 02 c0       	mov    edx,0xc0027a7c
c0014078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001407c:	89 10                	mov    DWORD PTR [eax],edx
c001407e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014082:	83 ec 0c             	sub    esp,0xc
c0014085:	50                   	push   eax
c0014086:	e8 99 f4 ff ff       	call   c0013524 <Device::~Device()>
c001408b:	83 c4 10             	add    esp,0x10
c001408e:	90                   	nop
c001408f:	83 c4 0c             	add    esp,0xc
c0014092:	c3                   	ret    
c0014093:	90                   	nop

c0014094 <InterruptController::~InterruptController()>:
c0014094:	83 ec 0c             	sub    esp,0xc
c0014097:	83 ec 0c             	sub    esp,0xc
c001409a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001409e:	e8 cd ff ff ff       	call   c0014070 <InterruptController::~InterruptController()>
c00140a3:	83 c4 10             	add    esp,0x10
c00140a6:	83 ec 08             	sub    esp,0x8
c00140a9:	68 58 21 00 00       	push   0x2158
c00140ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140b2:	e8 e0 e0 ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c00140b7:	83 c4 10             	add    esp,0x10
c00140ba:	83 c4 0c             	add    esp,0xc
c00140bd:	c3                   	ret    

c00140be <displayDebugInfo(regs*)>:
c00140be:	55                   	push   ebp
c00140bf:	57                   	push   edi
c00140c0:	56                   	push   esi
c00140c1:	53                   	push   ebx
c00140c2:	83 ec 24             	sub    esp,0x24
c00140c5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00140c9:	0f 20 c2             	mov    edx,cr0
c00140cc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00140d0:	0f 20 d7             	mov    edi,cr2
c00140d3:	0f 20 de             	mov    esi,cr3
c00140d6:	0f 20 e5             	mov    ebp,cr4
c00140d9:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00140dc:	68 82 78 02 c0       	push   0xc0027882
c00140e1:	e8 91 e1 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00140e6:	58                   	pop    eax
c00140e7:	5a                   	pop    edx
c00140e8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00140eb:	68 8d 78 02 c0       	push   0xc002788d
c00140f0:	e8 82 e1 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00140f5:	59                   	pop    ecx
c00140f6:	58                   	pop    eax
c00140f7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00140fa:	68 98 78 02 c0       	push   0xc0027898
c00140ff:	e8 73 e1 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0014104:	58                   	pop    eax
c0014105:	5a                   	pop    edx
c0014106:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014109:	68 a3 78 02 c0       	push   0xc00278a3
c001410e:	e8 64 e1 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0014113:	59                   	pop    ecx
c0014114:	58                   	pop    eax
c0014115:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014118:	68 ae 78 02 c0       	push   0xc00278ae
c001411d:	e8 55 e1 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0014122:	58                   	pop    eax
c0014123:	5a                   	pop    edx
c0014124:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014127:	68 b9 78 02 c0       	push   0xc00278b9
c001412c:	e8 46 e1 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0014131:	59                   	pop    ecx
c0014132:	58                   	pop    eax
c0014133:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014136:	68 c4 78 02 c0       	push   0xc00278c4
c001413b:	e8 37 e1 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0014140:	58                   	pop    eax
c0014141:	5a                   	pop    edx
c0014142:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014145:	68 cf 78 02 c0       	push   0xc00278cf
c001414a:	e8 28 e1 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001414f:	59                   	pop    ecx
c0014150:	58                   	pop    eax
c0014151:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014154:	68 da 78 02 c0       	push   0xc00278da
c0014159:	e8 19 e1 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001415e:	58                   	pop    eax
c001415f:	5a                   	pop    edx
c0014160:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014163:	68 e9 78 02 c0       	push   0xc00278e9
c0014168:	e8 0a e1 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001416d:	59                   	pop    ecx
c001416e:	58                   	pop    eax
c001416f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014172:	68 f4 78 02 c0       	push   0xc00278f4
c0014177:	e8 fb e0 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001417c:	58                   	pop    eax
c001417d:	5a                   	pop    edx
c001417e:	57                   	push   edi
c001417f:	68 ff 78 02 c0       	push   0xc00278ff
c0014184:	e8 ee e0 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0014189:	59                   	pop    ecx
c001418a:	58                   	pop    eax
c001418b:	56                   	push   esi
c001418c:	68 0a 79 02 c0       	push   0xc002790a
c0014191:	e8 e1 e0 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0014196:	58                   	pop    eax
c0014197:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c001419c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141a2:	e8 fc c2 ff ff       	call   c00104a3 <setActiveTerminal(VgaText*)>
c00141a7:	58                   	pop    eax
c00141a8:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00141ab:	5a                   	pop    edx
c00141ac:	c1 e0 05             	shl    eax,0x5
c00141af:	05 c0 96 02 c0       	add    eax,0xc00296c0
c00141b4:	50                   	push   eax
c00141b5:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c00141ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141c0:	e8 fd c6 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c00141c5:	59                   	pop    ecx
c00141c6:	58                   	pop    eax
c00141c7:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c00141cc:	68 15 79 02 c0       	push   0xc0027915
c00141d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141d7:	e8 e6 c6 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c00141dc:	58                   	pop    eax
c00141dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141e2:	5a                   	pop    edx
c00141e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00141e6:	83 c0 0c             	add    eax,0xc
c00141e9:	50                   	push   eax
c00141ea:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c00141ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141f5:	e8 c8 c6 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c00141fa:	59                   	pop    ecx
c00141fb:	58                   	pop    eax
c00141fc:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0014201:	68 1e 79 02 c0       	push   0xc002791e
c0014206:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001420c:	e8 b1 c6 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0014211:	58                   	pop    eax
c0014212:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0014217:	5a                   	pop    edx
c0014218:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001421b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014221:	e8 c2 c6 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c0014226:	59                   	pop    ecx
c0014227:	58                   	pop    eax
c0014228:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c001422d:	68 26 79 02 c0       	push   0xc0027926
c0014232:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014238:	e8 85 c6 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c001423d:	58                   	pop    eax
c001423e:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0014243:	5a                   	pop    edx
c0014244:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014247:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001424d:	e8 96 c6 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c0014252:	59                   	pop    ecx
c0014253:	58                   	pop    eax
c0014254:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0014259:	68 2e 79 02 c0       	push   0xc002792e
c001425e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014264:	e8 59 c6 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0014269:	58                   	pop    eax
c001426a:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c001426f:	5a                   	pop    edx
c0014270:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014273:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014279:	e8 6a c6 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c001427e:	59                   	pop    ecx
c001427f:	58                   	pop    eax
c0014280:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0014285:	68 36 79 02 c0       	push   0xc0027936
c001428a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014290:	e8 2d c6 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0014295:	58                   	pop    eax
c0014296:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c001429b:	5a                   	pop    edx
c001429c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001429f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142a5:	e8 3e c6 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c00142aa:	59                   	pop    ecx
c00142ab:	58                   	pop    eax
c00142ac:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c00142b1:	68 3e 79 02 c0       	push   0xc002793e
c00142b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142bc:	e8 01 c6 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c00142c1:	58                   	pop    eax
c00142c2:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c00142c7:	5a                   	pop    edx
c00142c8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00142cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142d1:	e8 12 c6 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c00142d6:	59                   	pop    ecx
c00142d7:	58                   	pop    eax
c00142d8:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c00142dd:	68 46 79 02 c0       	push   0xc0027946
c00142e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142e8:	e8 d5 c5 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c00142ed:	58                   	pop    eax
c00142ee:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c00142f3:	5a                   	pop    edx
c00142f4:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00142f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142fd:	e8 e6 c5 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c0014302:	59                   	pop    ecx
c0014303:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0014308:	5b                   	pop    ebx
c0014309:	68 4e 79 02 c0       	push   0xc002794e
c001430e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014314:	e8 a9 c5 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0014319:	58                   	pop    eax
c001431a:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c001431f:	5a                   	pop    edx
c0014320:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014324:	52                   	push   edx
c0014325:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001432b:	e8 b8 c5 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c0014330:	59                   	pop    ecx
c0014331:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0014336:	5b                   	pop    ebx
c0014337:	68 57 79 02 c0       	push   0xc0027957
c001433c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014342:	e8 7b c5 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0014347:	58                   	pop    eax
c0014348:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c001434d:	5a                   	pop    edx
c001434e:	57                   	push   edi
c001434f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014355:	e8 8e c5 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c001435a:	59                   	pop    ecx
c001435b:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0014360:	5b                   	pop    ebx
c0014361:	68 5f 79 02 c0       	push   0xc002795f
c0014366:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001436c:	e8 51 c5 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0014371:	5f                   	pop    edi
c0014372:	58                   	pop    eax
c0014373:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0014378:	56                   	push   esi
c0014379:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001437f:	e8 64 c5 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c0014384:	58                   	pop    eax
c0014385:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c001438a:	5a                   	pop    edx
c001438b:	68 67 79 02 c0       	push   0xc0027967
c0014390:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014396:	e8 27 c5 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c001439b:	59                   	pop    ecx
c001439c:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c00143a1:	5b                   	pop    ebx
c00143a2:	55                   	push   ebp
c00143a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143a9:	e8 3a c5 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c00143ae:	5e                   	pop    esi
c00143af:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c00143b4:	5f                   	pop    edi
c00143b5:	68 6f 79 02 c0       	push   0xc002796f
c00143ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143c0:	e8 fd c4 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c00143c5:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c00143ca:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00143d0:	e8 6e 12 01 00       	call   c0025643 <CPU::readDR0()>
c00143d5:	5d                   	pop    ebp
c00143d6:	5a                   	pop    edx
c00143d7:	50                   	push   eax
c00143d8:	53                   	push   ebx
c00143d9:	e8 0a c5 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c00143de:	59                   	pop    ecx
c00143df:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c00143e4:	5b                   	pop    ebx
c00143e5:	68 78 79 02 c0       	push   0xc0027978
c00143ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143f0:	e8 cd c4 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c00143f5:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c00143fa:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014400:	e8 50 12 01 00       	call   c0025655 <CPU::readDR1()>
c0014405:	5e                   	pop    esi
c0014406:	5f                   	pop    edi
c0014407:	50                   	push   eax
c0014408:	53                   	push   ebx
c0014409:	e8 da c4 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c001440e:	5d                   	pop    ebp
c001440f:	58                   	pop    eax
c0014410:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0014415:	68 80 79 02 c0       	push   0xc0027980
c001441a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014420:	e8 9d c4 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0014425:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c001442a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014430:	e8 32 12 01 00       	call   c0025667 <CPU::readDR2()>
c0014435:	5a                   	pop    edx
c0014436:	59                   	pop    ecx
c0014437:	50                   	push   eax
c0014438:	53                   	push   ebx
c0014439:	e8 aa c4 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c001443e:	5b                   	pop    ebx
c001443f:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0014444:	5e                   	pop    esi
c0014445:	68 88 79 02 c0       	push   0xc0027988
c001444a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014450:	e8 6d c4 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0014455:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c001445a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014460:	e8 14 12 01 00       	call   c0025679 <CPU::readDR3()>
c0014465:	5f                   	pop    edi
c0014466:	5d                   	pop    ebp
c0014467:	50                   	push   eax
c0014468:	53                   	push   ebx
c0014469:	e8 7a c4 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c001446e:	58                   	pop    eax
c001446f:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0014474:	5a                   	pop    edx
c0014475:	68 90 79 02 c0       	push   0xc0027990
c001447a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014480:	e8 3d c4 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0014485:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c001448a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014490:	e8 f6 11 01 00       	call   c002568b <CPU::readDR6()>
c0014495:	59                   	pop    ecx
c0014496:	5e                   	pop    esi
c0014497:	50                   	push   eax
c0014498:	53                   	push   ebx
c0014499:	e8 4a c4 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c001449e:	5f                   	pop    edi
c001449f:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c00144a4:	5d                   	pop    ebp
c00144a5:	68 98 79 02 c0       	push   0xc0027998
c00144aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144b0:	e8 0d c4 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c00144b5:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c00144ba:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00144c0:	e8 d8 11 01 00       	call   c002569d <CPU::readDR7()>
c00144c5:	5a                   	pop    edx
c00144c6:	59                   	pop    ecx
c00144c7:	50                   	push   eax
c00144c8:	53                   	push   ebx
c00144c9:	e8 1a c4 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c00144ce:	fa                   	cli    
c00144cf:	f4                   	hlt    
c00144d0:	83 c4 10             	add    esp,0x10
c00144d3:	eb fe                	jmp    c00144d3 <displayDebugInfo(regs*)+0x415>

c00144d5 <x87EmulHandler(regs*, void*)>:
c00144d5:	53                   	push   ebx
c00144d6:	83 ec 14             	sub    esp,0x14
c00144d9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144dd:	53                   	push   ebx
c00144de:	e8 76 8e 00 00       	call   c001d359 <Vm::x87Handler(regs*)>
c00144e3:	83 c4 10             	add    esp,0x10
c00144e6:	84 c0                	test   al,al
c00144e8:	74 05                	je     c00144ef <x87EmulHandler(regs*, void*)+0x1a>
c00144ea:	83 c4 08             	add    esp,0x8
c00144ed:	5b                   	pop    ebx
c00144ee:	c3                   	ret    
c00144ef:	83 ec 0c             	sub    esp,0xc
c00144f2:	68 a0 79 02 c0       	push   0xc00279a0
c00144f7:	e8 7b dd ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00144fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144ff:	e8 ba fb ff ff       	call   c00140be <displayDebugInfo(regs*)>

c0014504 <gpFault(regs*, void*)>:
c0014504:	53                   	push   ebx
c0014505:	83 ec 14             	sub    esp,0x14
c0014508:	c7 05 10 a8 02 c0 cd c8 01 c0 	mov    DWORD PTR ds:0xc002a810,0xc001c8cd
c0014512:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014516:	53                   	push   ebx
c0014517:	e8 b1 83 00 00       	call   c001c8cd <Vm::faultHandler(regs*)>
c001451c:	83 c4 10             	add    esp,0x10
c001451f:	84 c0                	test   al,al
c0014521:	74 05                	je     c0014528 <gpFault(regs*, void*)+0x24>
c0014523:	83 c4 08             	add    esp,0x8
c0014526:	5b                   	pop    ebx
c0014527:	c3                   	ret    
c0014528:	83 ec 0c             	sub    esp,0xc
c001452b:	68 b6 79 02 c0       	push   0xc00279b6
c0014530:	e8 42 dd ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0014535:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014538:	e8 81 fb ff ff       	call   c00140be <displayDebugInfo(regs*)>

c001453d <pgFault(regs*, void*)>:
c001453d:	83 ec 18             	sub    esp,0x18
c0014540:	68 d1 79 02 c0       	push   0xc00279d1
c0014545:	e8 2d dd ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001454a:	58                   	pop    eax
c001454b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001454f:	e8 6a fb ff ff       	call   c00140be <displayDebugInfo(regs*)>

c0014554 <otherISRHandler(regs*, void*)>:
c0014554:	53                   	push   ebx
c0014555:	83 ec 0c             	sub    esp,0xc
c0014558:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001455c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001455f:	50                   	push   eax
c0014560:	50                   	push   eax
c0014561:	68 de 79 02 c0       	push   0xc00279de
c0014566:	e8 0c dd ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001456b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001456e:	e8 4b fb ff ff       	call   c00140be <displayDebugInfo(regs*)>

c0014573 <opcodeFault(regs*, void*)>:
c0014573:	55                   	push   ebp
c0014574:	89 e5                	mov    ebp,esp
c0014576:	56                   	push   esi
c0014577:	53                   	push   ebx
c0014578:	83 ec 40             	sub    esp,0x40
c001457b:	e8 04 34 00 00       	call   c0017984 <CPU::current()>
c0014580:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014586:	84 c0                	test   al,al
c0014588:	74 24                	je     c00145ae <opcodeFault(regs*, void*)+0x3b>
c001458a:	83 ec 0c             	sub    esp,0xc
c001458d:	68 fc 79 02 c0       	push   0xc00279fc
c0014592:	e8 e0 dc ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0014597:	83 c4 10             	add    esp,0x10
c001459a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001459d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145a0:	8d 50 19             	lea    edx,[eax+0x19]
c00145a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145a6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00145a9:	e9 77 05 00 00       	jmp    c0014b25 <opcodeFault(regs*, void*)+0x5b2>
c00145ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145b1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145b4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00145b7:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00145bb:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00145bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145c2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145c5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00145c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145cb:	8a 00                	mov    al,BYTE PTR [eax]
c00145cd:	3c f0                	cmp    al,0xf0
c00145cf:	75 17                	jne    c00145e8 <opcodeFault(regs*, void*)+0x75>
c00145d1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00145d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145d7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145da:	8d 50 01             	lea    edx,[eax+0x1]
c00145dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145e0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00145e3:	e9 da 00 00 00       	jmp    c00146c2 <opcodeFault(regs*, void*)+0x14f>
c00145e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145eb:	8a 00                	mov    al,BYTE PTR [eax]
c00145ed:	3c f2                	cmp    al,0xf2
c00145ef:	74 09                	je     c00145fa <opcodeFault(regs*, void*)+0x87>
c00145f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145f4:	8a 00                	mov    al,BYTE PTR [eax]
c00145f6:	3c f3                	cmp    al,0xf3
c00145f8:	75 1b                	jne    c0014615 <opcodeFault(regs*, void*)+0xa2>
c00145fa:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00145fe:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014601:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014604:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014607:	8d 50 01             	lea    edx,[eax+0x1]
c001460a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001460d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014610:	e9 ad 00 00 00       	jmp    c00146c2 <opcodeFault(regs*, void*)+0x14f>
c0014615:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014618:	8a 00                	mov    al,BYTE PTR [eax]
c001461a:	3c 66                	cmp    al,0x66
c001461c:	75 1f                	jne    c001463d <opcodeFault(regs*, void*)+0xca>
c001461e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014622:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014626:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014629:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001462c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001462f:	8d 50 01             	lea    edx,[eax+0x1]
c0014632:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014635:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014638:	e9 85 00 00 00       	jmp    c00146c2 <opcodeFault(regs*, void*)+0x14f>
c001463d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014640:	8a 00                	mov    al,BYTE PTR [eax]
c0014642:	3c 67                	cmp    al,0x67
c0014644:	75 18                	jne    c001465e <opcodeFault(regs*, void*)+0xeb>
c0014646:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001464a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001464d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014650:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014653:	8d 50 01             	lea    edx,[eax+0x1]
c0014656:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014659:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001465c:	eb 64                	jmp    c00146c2 <opcodeFault(regs*, void*)+0x14f>
c001465e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014661:	8a 00                	mov    al,BYTE PTR [eax]
c0014663:	3c 2e                	cmp    al,0x2e
c0014665:	74 09                	je     c0014670 <opcodeFault(regs*, void*)+0xfd>
c0014667:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001466a:	8a 00                	mov    al,BYTE PTR [eax]
c001466c:	3c 3e                	cmp    al,0x3e
c001466e:	75 18                	jne    c0014688 <opcodeFault(regs*, void*)+0x115>
c0014670:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014674:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014677:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001467a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001467d:	8d 50 01             	lea    edx,[eax+0x1]
c0014680:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014683:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014686:	eb 3a                	jmp    c00146c2 <opcodeFault(regs*, void*)+0x14f>
c0014688:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001468b:	8a 00                	mov    al,BYTE PTR [eax]
c001468d:	3c 36                	cmp    al,0x36
c001468f:	74 1b                	je     c00146ac <opcodeFault(regs*, void*)+0x139>
c0014691:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014694:	8a 00                	mov    al,BYTE PTR [eax]
c0014696:	3c 26                	cmp    al,0x26
c0014698:	74 12                	je     c00146ac <opcodeFault(regs*, void*)+0x139>
c001469a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001469d:	8a 00                	mov    al,BYTE PTR [eax]
c001469f:	3c 64                	cmp    al,0x64
c00146a1:	74 09                	je     c00146ac <opcodeFault(regs*, void*)+0x139>
c00146a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146a6:	8a 00                	mov    al,BYTE PTR [eax]
c00146a8:	3c 65                	cmp    al,0x65
c00146aa:	75 16                	jne    c00146c2 <opcodeFault(regs*, void*)+0x14f>
c00146ac:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00146b0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00146b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146b6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00146b9:	8d 50 01             	lea    edx,[eax+0x1]
c00146bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146bf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00146c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146c5:	8a 00                	mov    al,BYTE PTR [eax]
c00146c7:	3c 0f                	cmp    al,0xf
c00146c9:	0f 85 ad 00 00 00    	jne    c001477c <opcodeFault(regs*, void*)+0x209>
c00146cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146d2:	40                   	inc    eax
c00146d3:	8a 00                	mov    al,BYTE PTR [eax]
c00146d5:	3c c2                	cmp    al,0xc2
c00146d7:	74 0e                	je     c00146e7 <opcodeFault(regs*, void*)+0x174>
c00146d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146dc:	40                   	inc    eax
c00146dd:	8a 00                	mov    al,BYTE PTR [eax]
c00146df:	3c c3                	cmp    al,0xc3
c00146e1:	0f 85 95 00 00 00    	jne    c001477c <opcodeFault(regs*, void*)+0x209>
c00146e7:	83 ec 0c             	sub    esp,0xc
c00146ea:	68 1f 7a 02 c0       	push   0xc0027a1f
c00146ef:	e8 83 db ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00146f4:	83 c4 10             	add    esp,0x10
c00146f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146fa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00146fd:	8d 50 01             	lea    edx,[eax+0x1]
c0014700:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014703:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014706:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014709:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001470c:	8a 00                	mov    al,BYTE PTR [eax]
c001470e:	8d 50 fe             	lea    edx,[eax-0x2]
c0014711:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014714:	88 10                	mov    BYTE PTR [eax],dl
c0014716:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014719:	50                   	push   eax
c001471a:	8d 45 c3             	lea    eax,[ebp-0x3d]
c001471d:	50                   	push   eax
c001471e:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014721:	50                   	push   eax
c0014722:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014725:	e8 e2 41 00 00       	call   c001890c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001472a:	83 c4 10             	add    esp,0x10
c001472d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014730:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014733:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014736:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014739:	01 d0                	add    eax,edx
c001473b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001473e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014741:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014744:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014747:	48                   	dec    eax
c0014748:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001474b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001474e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014751:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014754:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014757:	83 ec 04             	sub    esp,0x4
c001475a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001475d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014760:	50                   	push   eax
c0014761:	e8 03 ba fe ff       	call   c0000169 <voodooXADD>
c0014766:	83 c4 10             	add    esp,0x10
c0014769:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001476c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001476f:	01 c2                	add    edx,eax
c0014771:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014774:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014777:	e9 a9 03 00 00       	jmp    c0014b25 <opcodeFault(regs*, void*)+0x5b2>
c001477c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001477f:	8a 00                	mov    al,BYTE PTR [eax]
c0014781:	3c 0f                	cmp    al,0xf
c0014783:	0f 85 8b 01 00 00    	jne    c0014914 <opcodeFault(regs*, void*)+0x3a1>
c0014789:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001478c:	40                   	inc    eax
c001478d:	8a 00                	mov    al,BYTE PTR [eax]
c001478f:	3c c7                	cmp    al,0xc7
c0014791:	0f 86 7d 01 00 00    	jbe    c0014914 <opcodeFault(regs*, void*)+0x3a1>
c0014797:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001479a:	40                   	inc    eax
c001479b:	8a 00                	mov    al,BYTE PTR [eax]
c001479d:	3c cf                	cmp    al,0xcf
c001479f:	0f 87 6f 01 00 00    	ja     c0014914 <opcodeFault(regs*, void*)+0x3a1>
c00147a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00147a8:	40                   	inc    eax
c00147a9:	8a 00                	mov    al,BYTE PTR [eax]
c00147ab:	83 c0 38             	add    eax,0x38
c00147ae:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00147b1:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00147b5:	75 0b                	jne    c00147c2 <opcodeFault(regs*, void*)+0x24f>
c00147b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147ba:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00147bd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147c0:	eb 75                	jmp    c0014837 <opcodeFault(regs*, void*)+0x2c4>
c00147c2:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00147c6:	75 0b                	jne    c00147d3 <opcodeFault(regs*, void*)+0x260>
c00147c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147cb:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00147ce:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147d1:	eb 64                	jmp    c0014837 <opcodeFault(regs*, void*)+0x2c4>
c00147d3:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00147d7:	75 0b                	jne    c00147e4 <opcodeFault(regs*, void*)+0x271>
c00147d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147dc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00147df:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147e2:	eb 53                	jmp    c0014837 <opcodeFault(regs*, void*)+0x2c4>
c00147e4:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00147e8:	75 0b                	jne    c00147f5 <opcodeFault(regs*, void*)+0x282>
c00147ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147ed:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00147f0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147f3:	eb 42                	jmp    c0014837 <opcodeFault(regs*, void*)+0x2c4>
c00147f5:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00147f9:	75 0b                	jne    c0014806 <opcodeFault(regs*, void*)+0x293>
c00147fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147fe:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014801:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014804:	eb 31                	jmp    c0014837 <opcodeFault(regs*, void*)+0x2c4>
c0014806:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001480a:	75 0b                	jne    c0014817 <opcodeFault(regs*, void*)+0x2a4>
c001480c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001480f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014812:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014815:	eb 20                	jmp    c0014837 <opcodeFault(regs*, void*)+0x2c4>
c0014817:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001481b:	75 0b                	jne    c0014828 <opcodeFault(regs*, void*)+0x2b5>
c001481d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014820:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014823:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014826:	eb 0f                	jmp    c0014837 <opcodeFault(regs*, void*)+0x2c4>
c0014828:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001482c:	75 09                	jne    c0014837 <opcodeFault(regs*, void*)+0x2c4>
c001482e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014831:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014834:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014837:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001483b:	74 10                	je     c001484d <opcodeFault(regs*, void*)+0x2da>
c001483d:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014844:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001484b:	eb 2d                	jmp    c001487a <opcodeFault(regs*, void*)+0x307>
c001484d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014850:	c1 e0 18             	shl    eax,0x18
c0014853:	89 c2                	mov    edx,eax
c0014855:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014858:	c1 e0 08             	shl    eax,0x8
c001485b:	25 00 00 ff 00       	and    eax,0xff0000
c0014860:	09 c2                	or     edx,eax
c0014862:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014865:	c1 e8 08             	shr    eax,0x8
c0014868:	25 00 ff 00 00       	and    eax,0xff00
c001486d:	09 c2                	or     edx,eax
c001486f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014872:	c1 e8 18             	shr    eax,0x18
c0014875:	09 d0                	or     eax,edx
c0014877:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001487a:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001487e:	75 0b                	jne    c001488b <opcodeFault(regs*, void*)+0x318>
c0014880:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014883:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014886:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014889:	eb 75                	jmp    c0014900 <opcodeFault(regs*, void*)+0x38d>
c001488b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001488f:	75 0b                	jne    c001489c <opcodeFault(regs*, void*)+0x329>
c0014891:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014894:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014897:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001489a:	eb 64                	jmp    c0014900 <opcodeFault(regs*, void*)+0x38d>
c001489c:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00148a0:	75 0b                	jne    c00148ad <opcodeFault(regs*, void*)+0x33a>
c00148a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148a5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148a8:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00148ab:	eb 53                	jmp    c0014900 <opcodeFault(regs*, void*)+0x38d>
c00148ad:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00148b1:	75 0b                	jne    c00148be <opcodeFault(regs*, void*)+0x34b>
c00148b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148b6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148b9:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00148bc:	eb 42                	jmp    c0014900 <opcodeFault(regs*, void*)+0x38d>
c00148be:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00148c2:	75 0b                	jne    c00148cf <opcodeFault(regs*, void*)+0x35c>
c00148c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148c7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148ca:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00148cd:	eb 31                	jmp    c0014900 <opcodeFault(regs*, void*)+0x38d>
c00148cf:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00148d3:	75 0b                	jne    c00148e0 <opcodeFault(regs*, void*)+0x36d>
c00148d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148d8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148db:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00148de:	eb 20                	jmp    c0014900 <opcodeFault(regs*, void*)+0x38d>
c00148e0:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00148e4:	75 0b                	jne    c00148f1 <opcodeFault(regs*, void*)+0x37e>
c00148e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148e9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148ec:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00148ef:	eb 0f                	jmp    c0014900 <opcodeFault(regs*, void*)+0x38d>
c00148f1:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00148f5:	75 09                	jne    c0014900 <opcodeFault(regs*, void*)+0x38d>
c00148f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148fa:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148fd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014900:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014903:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014906:	8d 50 02             	lea    edx,[eax+0x2]
c0014909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001490c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001490f:	e9 11 02 00 00       	jmp    c0014b25 <opcodeFault(regs*, void*)+0x5b2>
c0014914:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014917:	8a 00                	mov    al,BYTE PTR [eax]
c0014919:	3c 0f                	cmp    al,0xf
c001491b:	0f 85 76 01 00 00    	jne    c0014a97 <opcodeFault(regs*, void*)+0x524>
c0014921:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014924:	40                   	inc    eax
c0014925:	8a 00                	mov    al,BYTE PTR [eax]
c0014927:	3c c7                	cmp    al,0xc7
c0014929:	0f 85 68 01 00 00    	jne    c0014a97 <opcodeFault(regs*, void*)+0x524>
c001492f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014932:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014935:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014938:	8d 50 01             	lea    edx,[eax+0x1]
c001493b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001493e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014941:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014944:	50                   	push   eax
c0014945:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014948:	50                   	push   eax
c0014949:	8d 45 bc             	lea    eax,[ebp-0x44]
c001494c:	50                   	push   eax
c001494d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014950:	e8 b7 3f 00 00       	call   c001890c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014955:	83 c4 10             	add    esp,0x10
c0014958:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001495b:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001495e:	83 f0 01             	xor    eax,0x1
c0014961:	84 c0                	test   al,al
c0014963:	0f 84 2e 01 00 00    	je     c0014a97 <opcodeFault(regs*, void*)+0x524>
c0014969:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001496c:	3c 01                	cmp    al,0x1
c001496e:	0f 85 23 01 00 00    	jne    c0014a97 <opcodeFault(regs*, void*)+0x524>
c0014974:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014977:	83 f0 01             	xor    eax,0x1
c001497a:	84 c0                	test   al,al
c001497c:	0f 84 15 01 00 00    	je     c0014a97 <opcodeFault(regs*, void*)+0x524>
c0014982:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014985:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014988:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001498b:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014992:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014995:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014998:	89 c2                	mov    edx,eax
c001499a:	b8 00 00 00 00       	mov    eax,0x0
c001499f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00149a2:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00149a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149a8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00149ab:	ba 00 00 00 00       	mov    edx,0x0
c00149b0:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00149b3:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00149b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149b9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00149bc:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00149bf:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00149c6:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00149c9:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00149cc:	89 c2                	mov    edx,eax
c00149ce:	b8 00 00 00 00       	mov    eax,0x0
c00149d3:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00149d6:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00149d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149dc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00149df:	ba 00 00 00 00       	mov    edx,0x0
c00149e4:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00149e7:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00149ea:	e8 6b 70 00 00       	call   c001ba5a <lockScheduler()>
c00149ef:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00149f2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00149f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00149f7:	89 c1                	mov    ecx,eax
c00149f9:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00149fc:	89 cb                	mov    ebx,ecx
c00149fe:	89 d0                	mov    eax,edx
c0014a00:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014a03:	89 c6                	mov    esi,eax
c0014a05:	89 f0                	mov    eax,esi
c0014a07:	09 d8                	or     eax,ebx
c0014a09:	85 c0                	test   eax,eax
c0014a0b:	75 21                	jne    c0014a2e <opcodeFault(regs*, void*)+0x4bb>
c0014a0d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014a10:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014a13:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014a16:	89 01                	mov    DWORD PTR [ecx],eax
c0014a18:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014a1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a1e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a21:	83 c8 40             	or     eax,0x40
c0014a24:	89 c2                	mov    edx,eax
c0014a26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a29:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014a2c:	eb 3e                	jmp    c0014a6c <opcodeFault(regs*, void*)+0x4f9>
c0014a2e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014a31:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014a34:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a36:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014a39:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014a3c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014a3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a42:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014a45:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014a48:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014a4b:	89 d0                	mov    eax,edx
c0014a4d:	31 d2                	xor    edx,edx
c0014a4f:	89 c3                	mov    ebx,eax
c0014a51:	89 d6                	mov    esi,edx
c0014a53:	89 da                	mov    edx,ebx
c0014a55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a58:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014a5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a5e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a61:	83 e0 bf             	and    eax,0xffffffbf
c0014a64:	89 c2                	mov    edx,eax
c0014a66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a69:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014a6c:	e8 eb 6f 00 00       	call   c001ba5c <unlockScheduler()>
c0014a71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a74:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a77:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014a7a:	01 c2                	add    edx,eax
c0014a7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a7f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a82:	83 ec 0c             	sub    esp,0xc
c0014a85:	68 2e 7a 02 c0       	push   0xc0027a2e
c0014a8a:	e8 e8 d7 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0014a8f:	83 c4 10             	add    esp,0x10
c0014a92:	e9 8e 00 00 00       	jmp    c0014b25 <opcodeFault(regs*, void*)+0x5b2>
c0014a97:	83 ec 0c             	sub    esp,0xc
c0014a9a:	68 41 7a 02 c0       	push   0xc0027a41
c0014a9f:	e8 d3 d7 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0014aa4:	83 c4 10             	add    esp,0x10
c0014aa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aaa:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014aad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ab0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ab3:	c1 e0 04             	shl    eax,0x4
c0014ab6:	01 d0                	add    eax,edx
c0014ab8:	83 c0 03             	add    eax,0x3
c0014abb:	8a 00                	mov    al,BYTE PTR [eax]
c0014abd:	0f b6 d8             	movzx  ebx,al
c0014ac0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ac3:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014ac6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ac9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014acc:	c1 e0 04             	shl    eax,0x4
c0014acf:	01 d0                	add    eax,edx
c0014ad1:	83 c0 02             	add    eax,0x2
c0014ad4:	8a 00                	mov    al,BYTE PTR [eax]
c0014ad6:	0f b6 c8             	movzx  ecx,al
c0014ad9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014adc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014adf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ae2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ae5:	c1 e0 04             	shl    eax,0x4
c0014ae8:	01 d0                	add    eax,edx
c0014aea:	40                   	inc    eax
c0014aeb:	8a 00                	mov    al,BYTE PTR [eax]
c0014aed:	0f b6 d0             	movzx  edx,al
c0014af0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014af3:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014af6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014af9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014afc:	c1 e0 04             	shl    eax,0x4
c0014aff:	01 f0                	add    eax,esi
c0014b01:	8a 00                	mov    al,BYTE PTR [eax]
c0014b03:	0f b6 c0             	movzx  eax,al
c0014b06:	83 ec 0c             	sub    esp,0xc
c0014b09:	53                   	push   ebx
c0014b0a:	51                   	push   ecx
c0014b0b:	52                   	push   edx
c0014b0c:	50                   	push   eax
c0014b0d:	68 54 7a 02 c0       	push   0xc0027a54
c0014b12:	e8 60 d7 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0014b17:	83 c4 20             	add    esp,0x20
c0014b1a:	83 ec 0c             	sub    esp,0xc
c0014b1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014b20:	e8 99 f5 ff ff       	call   c00140be <displayDebugInfo(regs*)>
c0014b25:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014b28:	5b                   	pop    ebx
c0014b29:	5e                   	pop    esi
c0014b2a:	5d                   	pop    ebp
c0014b2b:	c3                   	ret    

c0014b2c <displayProgramFault(char const*)>:
c0014b2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b31:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b34:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014b3a:	85 c0                	test   eax,eax
c0014b3c:	74 15                	je     c0014b53 <displayProgramFault(char const*)+0x27>
c0014b3e:	83 ec 0c             	sub    esp,0xc
c0014b41:	6a 04                	push   0x4
c0014b43:	6a 0f                	push   0xf
c0014b45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b49:	50                   	push   eax
c0014b4a:	e8 35 ba ff ff       	call   c0010584 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014b4f:	83 c4 1c             	add    esp,0x1c
c0014b52:	c3                   	ret    
c0014b53:	c3                   	ret    

c0014b54 <setupInterruptController()>:
c0014b54:	55                   	push   ebp
c0014b55:	89 e5                	mov    ebp,esp
c0014b57:	53                   	push   ebx
c0014b58:	83 ec 14             	sub    esp,0x14
c0014b5b:	e8 20 2e 00 00       	call   c0017980 <CPU::getNumber()>
c0014b60:	85 c0                	test   eax,eax
c0014b62:	0f 95 c0             	setne  al
c0014b65:	84 c0                	test   al,al
c0014b67:	74 56                	je     c0014bbf <setupInterruptController()+0x6b>
c0014b69:	83 ec 0c             	sub    esp,0xc
c0014b6c:	68 58 21 00 00       	push   0x2158
c0014b71:	e8 12 d6 ff ff       	call   c0012188 <operator new(unsigned long)>
c0014b76:	83 c4 10             	add    esp,0x10
c0014b79:	89 c3                	mov    ebx,eax
c0014b7b:	83 ec 0c             	sub    esp,0xc
c0014b7e:	53                   	push   ebx
c0014b7f:	e8 b4 d9 00 00       	call   c0022538 <APIC::APIC()>
c0014b84:	83 c4 10             	add    esp,0x10
c0014b87:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0014b8a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0014b8d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014b90:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b92:	83 c0 08             	add    eax,0x8
c0014b95:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b97:	6a 00                	push   0x0
c0014b99:	6a 00                	push   0x0
c0014b9b:	6a 00                	push   0x0
c0014b9d:	52                   	push   edx
c0014b9e:	ff d0                	call   eax
c0014ba0:	83 c4 10             	add    esp,0x10
c0014ba3:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c0014ba8:	83 ec 08             	sub    esp,0x8
c0014bab:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014bae:	50                   	push   eax
c0014baf:	e8 ce ea ff ff       	call   c0013682 <Device::addChild(Device*)>
c0014bb4:	83 c4 10             	add    esp,0x10
c0014bb7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014bba:	e9 48 03 00 00       	jmp    c0014f07 <setupInterruptController()+0x3b3>
c0014bbf:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c0014bc4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014bca:	83 e0 01             	and    eax,0x1
c0014bcd:	84 c0                	test   al,al
c0014bcf:	0f 95 c0             	setne  al
c0014bd2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0014bd5:	83 ec 0c             	sub    esp,0xc
c0014bd8:	68 58 21 00 00       	push   0x2158
c0014bdd:	e8 a6 d5 ff ff       	call   c0012188 <operator new(unsigned long)>
c0014be2:	83 c4 10             	add    esp,0x10
c0014be5:	89 c3                	mov    ebx,eax
c0014be7:	83 ec 0c             	sub    esp,0xc
c0014bea:	53                   	push   ebx
c0014beb:	e8 94 de 00 00       	call   c0022a84 <PIC::PIC()>
c0014bf0:	83 c4 10             	add    esp,0x10
c0014bf3:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014bf6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014bf9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bfe:	83 c0 08             	add    eax,0x8
c0014c01:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c03:	6a 00                	push   0x0
c0014c05:	6a 00                	push   0x0
c0014c07:	6a 00                	push   0x0
c0014c09:	52                   	push   edx
c0014c0a:	ff d0                	call   eax
c0014c0c:	83 c4 10             	add    esp,0x10
c0014c0f:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0014c13:	74 6e                	je     c0014c83 <setupInterruptController()+0x12f>
c0014c15:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014c18:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c1d:	83 c0 0c             	add    eax,0xc
c0014c20:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c22:	6a 00                	push   0x0
c0014c24:	6a 00                	push   0x0
c0014c26:	6a 00                	push   0x0
c0014c28:	52                   	push   edx
c0014c29:	ff d0                	call   eax
c0014c2b:	83 c4 10             	add    esp,0x10
c0014c2e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014c32:	74 15                	je     c0014c49 <setupInterruptController()+0xf5>
c0014c34:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c37:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c39:	83 c0 04             	add    eax,0x4
c0014c3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c3e:	83 ec 0c             	sub    esp,0xc
c0014c41:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c44:	ff d0                	call   eax
c0014c46:	83 c4 10             	add    esp,0x10
c0014c49:	83 ec 0c             	sub    esp,0xc
c0014c4c:	68 58 21 00 00       	push   0x2158
c0014c51:	e8 32 d5 ff ff       	call   c0012188 <operator new(unsigned long)>
c0014c56:	83 c4 10             	add    esp,0x10
c0014c59:	89 c3                	mov    ebx,eax
c0014c5b:	83 ec 0c             	sub    esp,0xc
c0014c5e:	53                   	push   ebx
c0014c5f:	e8 d4 d8 00 00       	call   c0022538 <APIC::APIC()>
c0014c64:	83 c4 10             	add    esp,0x10
c0014c67:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014c6a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014c6d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c70:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c72:	83 c0 08             	add    eax,0x8
c0014c75:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c77:	6a 00                	push   0x0
c0014c79:	6a 00                	push   0x0
c0014c7b:	6a 00                	push   0x0
c0014c7d:	52                   	push   edx
c0014c7e:	ff d0                	call   eax
c0014c80:	83 c4 10             	add    esp,0x10
c0014c83:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c0014c88:	83 ec 08             	sub    esp,0x8
c0014c8b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c8e:	50                   	push   eax
c0014c8f:	e8 ee e9 ff ff       	call   c0013682 <Device::addChild(Device*)>
c0014c94:	83 c4 10             	add    esp,0x10
c0014c97:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c9c:	83 c0 24             	add    eax,0x24
c0014c9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ca1:	6a 00                	push   0x0
c0014ca3:	68 54 45 01 c0       	push   0xc0014554
c0014ca8:	6a 00                	push   0x0
c0014caa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cad:	ff d0                	call   eax
c0014caf:	83 c4 10             	add    esp,0x10
c0014cb2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cb5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cb7:	83 c0 24             	add    eax,0x24
c0014cba:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cbc:	6a 00                	push   0x0
c0014cbe:	68 54 45 01 c0       	push   0xc0014554
c0014cc3:	6a 01                	push   0x1
c0014cc5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cc8:	ff d0                	call   eax
c0014cca:	83 c4 10             	add    esp,0x10
c0014ccd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cd2:	83 c0 24             	add    eax,0x24
c0014cd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cd7:	6a 00                	push   0x0
c0014cd9:	68 21 3f 01 c0       	push   0xc0013f21
c0014cde:	6a 02                	push   0x2
c0014ce0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ce3:	ff d0                	call   eax
c0014ce5:	83 c4 10             	add    esp,0x10
c0014ce8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ceb:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ced:	83 c0 24             	add    eax,0x24
c0014cf0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cf2:	6a 00                	push   0x0
c0014cf4:	68 54 45 01 c0       	push   0xc0014554
c0014cf9:	6a 03                	push   0x3
c0014cfb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cfe:	ff d0                	call   eax
c0014d00:	83 c4 10             	add    esp,0x10
c0014d03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d06:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d08:	83 c0 24             	add    eax,0x24
c0014d0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d0d:	6a 00                	push   0x0
c0014d0f:	68 54 45 01 c0       	push   0xc0014554
c0014d14:	6a 04                	push   0x4
c0014d16:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d19:	ff d0                	call   eax
c0014d1b:	83 c4 10             	add    esp,0x10
c0014d1e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d21:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d23:	83 c0 24             	add    eax,0x24
c0014d26:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d28:	6a 00                	push   0x0
c0014d2a:	68 54 45 01 c0       	push   0xc0014554
c0014d2f:	6a 05                	push   0x5
c0014d31:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d34:	ff d0                	call   eax
c0014d36:	83 c4 10             	add    esp,0x10
c0014d39:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d3e:	83 c0 24             	add    eax,0x24
c0014d41:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d43:	6a 00                	push   0x0
c0014d45:	68 73 45 01 c0       	push   0xc0014573
c0014d4a:	6a 06                	push   0x6
c0014d4c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d4f:	ff d0                	call   eax
c0014d51:	83 c4 10             	add    esp,0x10
c0014d54:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d57:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d59:	83 c0 24             	add    eax,0x24
c0014d5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d5e:	6a 00                	push   0x0
c0014d60:	68 d5 44 01 c0       	push   0xc00144d5
c0014d65:	6a 07                	push   0x7
c0014d67:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d6a:	ff d0                	call   eax
c0014d6c:	83 c4 10             	add    esp,0x10
c0014d6f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d72:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d74:	83 c0 24             	add    eax,0x24
c0014d77:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d79:	6a 00                	push   0x0
c0014d7b:	68 3c 3d 01 c0       	push   0xc0013d3c
c0014d80:	6a 08                	push   0x8
c0014d82:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d85:	ff d0                	call   eax
c0014d87:	83 c4 10             	add    esp,0x10
c0014d8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d8f:	83 c0 24             	add    eax,0x24
c0014d92:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d94:	6a 00                	push   0x0
c0014d96:	68 54 45 01 c0       	push   0xc0014554
c0014d9b:	6a 09                	push   0x9
c0014d9d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014da0:	ff d0                	call   eax
c0014da2:	83 c4 10             	add    esp,0x10
c0014da5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014da8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014daa:	83 c0 24             	add    eax,0x24
c0014dad:	8b 00                	mov    eax,DWORD PTR [eax]
c0014daf:	6a 00                	push   0x0
c0014db1:	68 54 45 01 c0       	push   0xc0014554
c0014db6:	6a 0a                	push   0xa
c0014db8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014dbb:	ff d0                	call   eax
c0014dbd:	83 c4 10             	add    esp,0x10
c0014dc0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dc5:	83 c0 24             	add    eax,0x24
c0014dc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dca:	6a 00                	push   0x0
c0014dcc:	68 54 45 01 c0       	push   0xc0014554
c0014dd1:	6a 0b                	push   0xb
c0014dd3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014dd6:	ff d0                	call   eax
c0014dd8:	83 c4 10             	add    esp,0x10
c0014ddb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dde:	8b 00                	mov    eax,DWORD PTR [eax]
c0014de0:	83 c0 24             	add    eax,0x24
c0014de3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014de5:	6a 00                	push   0x0
c0014de7:	68 54 45 01 c0       	push   0xc0014554
c0014dec:	6a 0c                	push   0xc
c0014dee:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014df1:	ff d0                	call   eax
c0014df3:	83 c4 10             	add    esp,0x10
c0014df6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014df9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dfb:	83 c0 24             	add    eax,0x24
c0014dfe:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e00:	6a 00                	push   0x0
c0014e02:	68 04 45 01 c0       	push   0xc0014504
c0014e07:	6a 0d                	push   0xd
c0014e09:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e0c:	ff d0                	call   eax
c0014e0e:	83 c4 10             	add    esp,0x10
c0014e11:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e14:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e16:	83 c0 24             	add    eax,0x24
c0014e19:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e1b:	6a 00                	push   0x0
c0014e1d:	68 3d 45 01 c0       	push   0xc001453d
c0014e22:	6a 0e                	push   0xe
c0014e24:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e27:	ff d0                	call   eax
c0014e29:	83 c4 10             	add    esp,0x10
c0014e2c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e31:	83 c0 24             	add    eax,0x24
c0014e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e36:	6a 00                	push   0x0
c0014e38:	68 54 45 01 c0       	push   0xc0014554
c0014e3d:	6a 0f                	push   0xf
c0014e3f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e42:	ff d0                	call   eax
c0014e44:	83 c4 10             	add    esp,0x10
c0014e47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e4c:	83 c0 24             	add    eax,0x24
c0014e4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e51:	6a 00                	push   0x0
c0014e53:	68 54 45 01 c0       	push   0xc0014554
c0014e58:	6a 10                	push   0x10
c0014e5a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e5d:	ff d0                	call   eax
c0014e5f:	83 c4 10             	add    esp,0x10
c0014e62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e65:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e67:	83 c0 24             	add    eax,0x24
c0014e6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e6c:	6a 00                	push   0x0
c0014e6e:	68 54 45 01 c0       	push   0xc0014554
c0014e73:	6a 11                	push   0x11
c0014e75:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e78:	ff d0                	call   eax
c0014e7a:	83 c4 10             	add    esp,0x10
c0014e7d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e80:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e82:	83 c0 24             	add    eax,0x24
c0014e85:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e87:	6a 00                	push   0x0
c0014e89:	68 54 45 01 c0       	push   0xc0014554
c0014e8e:	6a 12                	push   0x12
c0014e90:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e93:	ff d0                	call   eax
c0014e95:	83 c4 10             	add    esp,0x10
c0014e98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e9d:	83 c0 24             	add    eax,0x24
c0014ea0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ea2:	6a 00                	push   0x0
c0014ea4:	68 54 45 01 c0       	push   0xc0014554
c0014ea9:	6a 13                	push   0x13
c0014eab:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014eae:	ff d0                	call   eax
c0014eb0:	83 c4 10             	add    esp,0x10
c0014eb3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0014eb8:	83 c0 24             	add    eax,0x24
c0014ebb:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ebd:	6a 00                	push   0x0
c0014ebf:	68 54 45 01 c0       	push   0xc0014554
c0014ec4:	6a 14                	push   0x14
c0014ec6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ec9:	ff d0                	call   eax
c0014ecb:	83 c4 10             	add    esp,0x10
c0014ece:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ed1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ed3:	83 c0 24             	add    eax,0x24
c0014ed6:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ed8:	6a 00                	push   0x0
c0014eda:	68 54 45 01 c0       	push   0xc0014554
c0014edf:	6a 1e                	push   0x1e
c0014ee1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ee4:	ff d0                	call   eax
c0014ee6:	83 c4 10             	add    esp,0x10
c0014ee9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eec:	8b 00                	mov    eax,DWORD PTR [eax]
c0014eee:	83 c0 24             	add    eax,0x24
c0014ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ef3:	6a 00                	push   0x0
c0014ef5:	68 71 a4 01 c0       	push   0xc001a471
c0014efa:	6a 60                	push   0x60
c0014efc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014eff:	ff d0                	call   eax
c0014f01:	83 c4 10             	add    esp,0x10
c0014f04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f07:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0014f0a:	c9                   	leave  
c0014f0b:	c3                   	ret    

c0014f0c <InterruptController::convertLegacyIRQNumber(int)>:
c0014f0c:	55                   	push   ebp
c0014f0d:	89 e5                	mov    ebp,esp
c0014f0f:	83 ec 08             	sub    esp,0x8
c0014f12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f15:	83 ec 0c             	sub    esp,0xc
c0014f18:	50                   	push   eax
c0014f19:	e8 46 ea ff ff       	call   c0013964 <Device::getName()>
c0014f1e:	83 c4 10             	add    esp,0x10
c0014f21:	8a 00                	mov    al,BYTE PTR [eax]
c0014f23:	3c 41                	cmp    al,0x41
c0014f25:	0f 94 c0             	sete   al
c0014f28:	84 c0                	test   al,al
c0014f2a:	74 28                	je     c0014f54 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0014f2c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0014f30:	7f 12                	jg     c0014f44 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0014f32:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014f35:	05 60 99 02 c0       	add    eax,0xc0029960
c0014f3a:	8a 00                	mov    al,BYTE PTR [eax]
c0014f3c:	0f b6 c0             	movzx  eax,al
c0014f3f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0014f42:	eb 10                	jmp    c0014f54 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0014f44:	83 ec 0c             	sub    esp,0xc
c0014f47:	68 d4 77 02 c0       	push   0xc00277d4
c0014f4c:	e8 b6 3b 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c0014f51:	83 c4 10             	add    esp,0x10
c0014f54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014f57:	c9                   	leave  
c0014f58:	c3                   	ret    
c0014f59:	90                   	nop

c0014f5a <startGUI(void*)>:
c0014f5a:	55                   	push   ebp
c0014f5b:	89 e5                	mov    ebp,esp
c0014f5d:	53                   	push   ebx
c0014f5e:	83 ec 04             	sub    esp,0x4
c0014f61:	e8 f6 6a 00 00       	call   c001ba5c <unlockScheduler()>
c0014f66:	e8 da 6a 00 00       	call   c001ba45 <getIRQNestingLevel()>
c0014f6b:	83 ec 08             	sub    esp,0x8
c0014f6e:	50                   	push   eax
c0014f6f:	68 bc 7a 02 c0       	push   0xc0027abc
c0014f74:	e8 fe d2 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0014f79:	83 c4 10             	add    esp,0x10
c0014f7c:	8b 1d 88 a6 02 c0    	mov    ebx,DWORD PTR ds:0xc002a688
c0014f82:	83 ec 08             	sub    esp,0x8
c0014f85:	6a 01                	push   0x1
c0014f87:	68 d6 7a 02 c0       	push   0xc0027ad6
c0014f8c:	e8 f9 64 00 00       	call   c001b48a <Thr::loadDLL(char const*, bool)>
c0014f91:	83 c4 10             	add    esp,0x10
c0014f94:	83 ec 08             	sub    esp,0x8
c0014f97:	53                   	push   ebx
c0014f98:	50                   	push   eax
c0014f99:	e8 b2 66 00 00       	call   c001b650 <Thr::executeDLL(unsigned long, void*)>
c0014f9e:	83 c4 10             	add    esp,0x10
c0014fa1:	8b 1d 88 a6 02 c0    	mov    ebx,DWORD PTR ds:0xc002a688
c0014fa7:	83 ec 08             	sub    esp,0x8
c0014faa:	6a 01                	push   0x1
c0014fac:	68 f0 7a 02 c0       	push   0xc0027af0
c0014fb1:	e8 d4 64 00 00       	call   c001b48a <Thr::loadDLL(char const*, bool)>
c0014fb6:	83 c4 10             	add    esp,0x10
c0014fb9:	83 ec 08             	sub    esp,0x8
c0014fbc:	53                   	push   ebx
c0014fbd:	50                   	push   eax
c0014fbe:	e8 8d 66 00 00       	call   c001b650 <Thr::executeDLL(unsigned long, void*)>
c0014fc3:	83 c4 10             	add    esp,0x10
c0014fc6:	90                   	nop
c0014fc7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0014fca:	c9                   	leave  
c0014fcb:	c3                   	ret    

c0014fcc <sendKeyToTerminal(unsigned char)>:
c0014fcc:	55                   	push   ebp
c0014fcd:	89 e5                	mov    ebp,esp
c0014fcf:	83 ec 28             	sub    esp,0x28
c0014fd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0014fd8:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0014fdd:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0014fe1:	83 ec 08             	sub    esp,0x8
c0014fe4:	52                   	push   edx
c0014fe5:	50                   	push   eax
c0014fe6:	e8 d5 ba ff ff       	call   c0010ac0 <VgaText::receiveKey(unsigned char)>
c0014feb:	83 c4 10             	add    esp,0x10
c0014fee:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0014ff2:	75 41                	jne    c0015035 <sendKeyToTerminal(unsigned char)+0x69>
c0014ff4:	e8 88 6a 00 00       	call   c001ba81 <lockStuff()>
c0014ff9:	a1 20 a8 02 c0       	mov    eax,ds:0xc002a820
c0014ffe:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015001:	c7 05 20 a8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a820,0x0
c001500b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001500f:	74 1f                	je     c0015030 <sendKeyToTerminal(unsigned char)+0x64>
c0015011:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015014:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015017:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001501a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001501d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015020:	83 ec 0c             	sub    esp,0xc
c0015023:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015026:	e8 3f 70 00 00       	call   c001c06a <unblockTask(ThreadControlBlock*)>
c001502b:	83 c4 10             	add    esp,0x10
c001502e:	eb db                	jmp    c001500b <sendKeyToTerminal(unsigned char)+0x3f>
c0015030:	e8 de 6d 00 00       	call   c001be13 <unlockStuff()>
c0015035:	90                   	nop
c0015036:	c9                   	leave  
c0015037:	c3                   	ret    

c0015038 <sendKeyboardToken(KeyboardToken)>:
c0015038:	55                   	push   ebp
c0015039:	89 e5                	mov    ebp,esp
c001503b:	83 ec 18             	sub    esp,0x18
c001503e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015041:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015044:	0f b7 c0             	movzx  eax,ax
c0015047:	83 f2 01             	xor    edx,0x1
c001504a:	88 90 40 a8 02 c0    	mov    BYTE PTR [eax-0x3ffd57c0],dl
c0015050:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015053:	66 3d 03 02          	cmp    ax,0x203
c0015057:	75 07                	jne    c0015060 <sendKeyboardToken(KeyboardToken)+0x28>
c0015059:	a0 40 a9 02 c0       	mov    al,ds:0xc002a940
c001505e:	84 c0                	test   al,al
c0015060:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015064:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015067:	a0 48 ac 02 c0       	mov    al,ds:0xc002ac48
c001506c:	38 c2                	cmp    dl,al
c001506e:	74 1c                	je     c001508c <sendKeyboardToken(KeyboardToken)+0x54>
c0015070:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015073:	a2 48 ac 02 c0       	mov    ds:0xc002ac48,al
c0015078:	a0 48 ac 02 c0       	mov    al,ds:0xc002ac48
c001507d:	0f b6 c0             	movzx  eax,al
c0015080:	83 ec 0c             	sub    esp,0xc
c0015083:	50                   	push   eax
c0015084:	e8 a5 ac ff ff       	call   c000fd2e <setTerminalScrollLock(bool)>
c0015089:	83 c4 10             	add    esp,0x10
c001508c:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001508f:	84 c0                	test   al,al
c0015091:	0f 84 ae 00 00 00    	je     c0015145 <sendKeyboardToken(KeyboardToken)+0x10d>
c0015097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001509a:	66 3d 10 03          	cmp    ax,0x310
c001509e:	75 06                	jne    c00150a6 <sendKeyboardToken(KeyboardToken)+0x6e>
c00150a0:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00150a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a9:	66 3d 11 03          	cmp    ax,0x311
c00150ad:	75 06                	jne    c00150b5 <sendKeyboardToken(KeyboardToken)+0x7d>
c00150af:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00150b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b8:	66 3d 12 03          	cmp    ax,0x312
c00150bc:	75 06                	jne    c00150c4 <sendKeyboardToken(KeyboardToken)+0x8c>
c00150be:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00150c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c7:	66 3d 13 03          	cmp    ax,0x313
c00150cb:	75 06                	jne    c00150d3 <sendKeyboardToken(KeyboardToken)+0x9b>
c00150cd:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00150d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d6:	66 3d 14 03          	cmp    ax,0x314
c00150da:	75 06                	jne    c00150e2 <sendKeyboardToken(KeyboardToken)+0xaa>
c00150dc:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00150e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e5:	66 3d 15 03          	cmp    ax,0x315
c00150e9:	75 06                	jne    c00150f1 <sendKeyboardToken(KeyboardToken)+0xb9>
c00150eb:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00150f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f4:	66 3d 16 03          	cmp    ax,0x316
c00150f8:	75 06                	jne    c0015100 <sendKeyboardToken(KeyboardToken)+0xc8>
c00150fa:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015100:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015103:	66 3d 17 03          	cmp    ax,0x317
c0015107:	75 06                	jne    c001510f <sendKeyboardToken(KeyboardToken)+0xd7>
c0015109:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001510f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015112:	66 3d 18 03          	cmp    ax,0x318
c0015116:	75 06                	jne    c001511e <sendKeyboardToken(KeyboardToken)+0xe6>
c0015118:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001511e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015121:	66 3d 19 03          	cmp    ax,0x319
c0015125:	75 06                	jne    c001512d <sendKeyboardToken(KeyboardToken)+0xf5>
c0015127:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001512d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015130:	66 3d 1a 03          	cmp    ax,0x31a
c0015134:	0f 85 c9 00 00 00    	jne    c0015203 <sendKeyboardToken(KeyboardToken)+0x1cb>
c001513a:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015140:	e9 be 00 00 00       	jmp    c0015203 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015148:	66 3d 10 03          	cmp    ax,0x310
c001514c:	75 0a                	jne    c0015158 <sendKeyboardToken(KeyboardToken)+0x120>
c001514e:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015154:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015158:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001515b:	66 3d 11 03          	cmp    ax,0x311
c001515f:	75 0a                	jne    c001516b <sendKeyboardToken(KeyboardToken)+0x133>
c0015161:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015167:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001516b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001516e:	66 3d 12 03          	cmp    ax,0x312
c0015172:	75 0a                	jne    c001517e <sendKeyboardToken(KeyboardToken)+0x146>
c0015174:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001517a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001517e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015181:	66 3d 13 03          	cmp    ax,0x313
c0015185:	75 0a                	jne    c0015191 <sendKeyboardToken(KeyboardToken)+0x159>
c0015187:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001518d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015191:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015194:	66 3d 14 03          	cmp    ax,0x314
c0015198:	75 0a                	jne    c00151a4 <sendKeyboardToken(KeyboardToken)+0x16c>
c001519a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00151a0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a7:	66 3d 15 03          	cmp    ax,0x315
c00151ab:	75 0a                	jne    c00151b7 <sendKeyboardToken(KeyboardToken)+0x17f>
c00151ad:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00151b3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ba:	66 3d 16 03          	cmp    ax,0x316
c00151be:	75 0a                	jne    c00151ca <sendKeyboardToken(KeyboardToken)+0x192>
c00151c0:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00151c6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151cd:	66 3d 17 03          	cmp    ax,0x317
c00151d1:	75 0a                	jne    c00151dd <sendKeyboardToken(KeyboardToken)+0x1a5>
c00151d3:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00151d9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e0:	66 3d 18 03          	cmp    ax,0x318
c00151e4:	75 0a                	jne    c00151f0 <sendKeyboardToken(KeyboardToken)+0x1b8>
c00151e6:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00151ec:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151f3:	66 3d 19 03          	cmp    ax,0x319
c00151f7:	75 0a                	jne    c0015203 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00151f9:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00151ff:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015203:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015206:	66 3d 00 02          	cmp    ax,0x200
c001520a:	75 2a                	jne    c0015236 <sendKeyboardToken(KeyboardToken)+0x1fe>
c001520c:	a0 40 ac 02 c0       	mov    al,ds:0xc002ac40
c0015211:	83 f0 01             	xor    eax,0x1
c0015214:	84 c0                	test   al,al
c0015216:	74 1e                	je     c0015236 <sendKeyboardToken(KeyboardToken)+0x1fe>
c0015218:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c001521d:	6a 01                	push   0x1
c001521f:	6a 00                	push   0x0
c0015221:	68 5a 4f 01 c0       	push   0xc0014f5a
c0015226:	50                   	push   eax
c0015227:	e8 58 69 00 00       	call   c001bb84 <Process::createThread(void (*)(void*), void*, int)>
c001522c:	83 c4 10             	add    esp,0x10
c001522f:	c6 05 40 ac 02 c0 01 	mov    BYTE PTR ds:0xc002ac40,0x1
c0015236:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015239:	66 3d 1d 03          	cmp    ax,0x31d
c001523d:	75 06                	jne    c0015245 <sendKeyboardToken(KeyboardToken)+0x20d>
c001523f:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015245:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015248:	66 3d 1c 03          	cmp    ax,0x31c
c001524c:	75 06                	jne    c0015254 <sendKeyboardToken(KeyboardToken)+0x21c>
c001524e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015254:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015257:	66 3d 1b 03          	cmp    ax,0x31b
c001525b:	75 06                	jne    c0015263 <sendKeyboardToken(KeyboardToken)+0x22b>
c001525d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015263:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015266:	66 3d 1e 03          	cmp    ax,0x31e
c001526a:	75 06                	jne    c0015272 <sendKeyboardToken(KeyboardToken)+0x23a>
c001526c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015272:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015275:	66 3d 1f 03          	cmp    ax,0x31f
c0015279:	75 06                	jne    c0015281 <sendKeyboardToken(KeyboardToken)+0x249>
c001527b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015281:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015284:	66 3d 1a 03          	cmp    ax,0x31a
c0015288:	75 06                	jne    c0015290 <sendKeyboardToken(KeyboardToken)+0x258>
c001528a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015290:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015294:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015297:	83 f0 01             	xor    eax,0x1
c001529a:	84 c0                	test   al,al
c001529c:	74 77                	je     c0015315 <sendKeyboardToken(KeyboardToken)+0x2dd>
c001529e:	a0 41 a9 02 c0       	mov    al,ds:0xc002a941
c00152a3:	84 c0                	test   al,al
c00152a5:	74 41                	je     c00152e8 <sendKeyboardToken(KeyboardToken)+0x2b0>
c00152a7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00152ab:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00152af:	74 2b                	je     c00152dc <sendKeyboardToken(KeyboardToken)+0x2a4>
c00152b1:	8b 15 44 ac 02 c0    	mov    edx,DWORD PTR ds:0xc002ac44
c00152b7:	89 d0                	mov    eax,edx
c00152b9:	c1 e0 02             	shl    eax,0x2
c00152bc:	01 d0                	add    eax,edx
c00152be:	01 c0                	add    eax,eax
c00152c0:	a3 44 ac 02 c0       	mov    ds:0xc002ac44,eax
c00152c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c8:	0f b7 c0             	movzx  eax,ax
c00152cb:	8d 50 d0             	lea    edx,[eax-0x30]
c00152ce:	a1 44 ac 02 c0       	mov    eax,ds:0xc002ac44
c00152d3:	01 d0                	add    eax,edx
c00152d5:	a3 44 ac 02 c0       	mov    ds:0xc002ac44,eax
c00152da:	eb 6d                	jmp    c0015349 <sendKeyboardToken(KeyboardToken)+0x311>
c00152dc:	c7 05 44 ac 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ac44,0x0
c00152e6:	eb 61                	jmp    c0015349 <sendKeyboardToken(KeyboardToken)+0x311>
c00152e8:	a1 44 ac 02 c0       	mov    eax,ds:0xc002ac44
c00152ed:	85 c0                	test   eax,eax
c00152ef:	74 18                	je     c0015309 <sendKeyboardToken(KeyboardToken)+0x2d1>
c00152f1:	a1 44 ac 02 c0       	mov    eax,ds:0xc002ac44
c00152f6:	0f b6 c0             	movzx  eax,al
c00152f9:	83 ec 0c             	sub    esp,0xc
c00152fc:	50                   	push   eax
c00152fd:	e8 ca fc ff ff       	call   c0014fcc <sendKeyToTerminal(unsigned char)>
c0015302:	83 c4 10             	add    esp,0x10
c0015305:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015309:	c7 05 44 ac 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ac44,0x0
c0015313:	eb 34                	jmp    c0015349 <sendKeyboardToken(KeyboardToken)+0x311>
c0015315:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015318:	66 3d 01 01          	cmp    ax,0x101
c001531c:	75 2b                	jne    c0015349 <sendKeyboardToken(KeyboardToken)+0x311>
c001531e:	a1 44 ac 02 c0       	mov    eax,ds:0xc002ac44
c0015323:	85 c0                	test   eax,eax
c0015325:	74 18                	je     c001533f <sendKeyboardToken(KeyboardToken)+0x307>
c0015327:	a1 44 ac 02 c0       	mov    eax,ds:0xc002ac44
c001532c:	0f b6 c0             	movzx  eax,al
c001532f:	83 ec 0c             	sub    esp,0xc
c0015332:	50                   	push   eax
c0015333:	e8 94 fc ff ff       	call   c0014fcc <sendKeyToTerminal(unsigned char)>
c0015338:	83 c4 10             	add    esp,0x10
c001533b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001533f:	c7 05 44 ac 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ac44,0x0
c0015349:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001534c:	83 f0 01             	xor    eax,0x1
c001534f:	84 c0                	test   al,al
c0015351:	74 4c                	je     c001539f <sendKeyboardToken(KeyboardToken)+0x367>
c0015353:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015356:	83 f0 01             	xor    eax,0x1
c0015359:	84 c0                	test   al,al
c001535b:	74 42                	je     c001539f <sendKeyboardToken(KeyboardToken)+0x367>
c001535d:	a0 40 a9 02 c0       	mov    al,ds:0xc002a940
c0015362:	83 f0 01             	xor    eax,0x1
c0015365:	84 c0                	test   al,al
c0015367:	74 36                	je     c001539f <sendKeyboardToken(KeyboardToken)+0x367>
c0015369:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536c:	66 83 f8 1f          	cmp    ax,0x1f
c0015370:	76 09                	jbe    c001537b <sendKeyboardToken(KeyboardToken)+0x343>
c0015372:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015375:	66 83 f8 7e          	cmp    ax,0x7e
c0015379:	76 12                	jbe    c001538d <sendKeyboardToken(KeyboardToken)+0x355>
c001537b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001537e:	66 83 f8 0a          	cmp    ax,0xa
c0015382:	74 09                	je     c001538d <sendKeyboardToken(KeyboardToken)+0x355>
c0015384:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015387:	66 83 f8 08          	cmp    ax,0x8
c001538b:	75 12                	jne    c001539f <sendKeyboardToken(KeyboardToken)+0x367>
c001538d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015390:	0f b6 c0             	movzx  eax,al
c0015393:	83 ec 0c             	sub    esp,0xc
c0015396:	50                   	push   eax
c0015397:	e8 30 fc ff ff       	call   c0014fcc <sendKeyToTerminal(unsigned char)>
c001539c:	83 c4 10             	add    esp,0x10
c001539f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00153a2:	83 f0 01             	xor    eax,0x1
c00153a5:	84 c0                	test   al,al
c00153a7:	74 4f                	je     c00153f8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00153a9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00153ac:	83 f0 01             	xor    eax,0x1
c00153af:	84 c0                	test   al,al
c00153b1:	74 45                	je     c00153f8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00153b3:	a0 40 a9 02 c0       	mov    al,ds:0xc002a940
c00153b8:	84 c0                	test   al,al
c00153ba:	74 3c                	je     c00153f8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00153bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153bf:	66 83 f8 3f          	cmp    ax,0x3f
c00153c3:	76 33                	jbe    c00153f8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00153c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c8:	66 83 f8 7f          	cmp    ax,0x7f
c00153cc:	77 2a                	ja     c00153f8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00153ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d1:	88 c2                	mov    dl,al
c00153d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d6:	66 83 f8 5f          	cmp    ax,0x5f
c00153da:	76 04                	jbe    c00153e0 <sendKeyboardToken(KeyboardToken)+0x3a8>
c00153dc:	b0 20                	mov    al,0x20
c00153de:	eb 02                	jmp    c00153e2 <sendKeyboardToken(KeyboardToken)+0x3aa>
c00153e0:	b0 00                	mov    al,0x0
c00153e2:	29 c2                	sub    edx,eax
c00153e4:	88 d0                	mov    al,dl
c00153e6:	83 e8 40             	sub    eax,0x40
c00153e9:	0f b6 c0             	movzx  eax,al
c00153ec:	83 ec 0c             	sub    esp,0xc
c00153ef:	50                   	push   eax
c00153f0:	e8 d7 fb ff ff       	call   c0014fcc <sendKeyToTerminal(unsigned char)>
c00153f5:	83 c4 10             	add    esp,0x10
c00153f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153fb:	66 3d 00 03          	cmp    ax,0x300
c00153ff:	75 0f                	jne    c0015410 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0015401:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015404:	83 f0 01             	xor    eax,0x1
c0015407:	84 c0                	test   al,al
c0015409:	74 05                	je     c0015410 <sendKeyboardToken(KeyboardToken)+0x3d8>
c001540b:	e8 45 b1 ff ff       	call   c0010555 <doTerminalCycle()>
c0015410:	90                   	nop
c0015411:	c9                   	leave  
c0015412:	c3                   	ret    

c0015413 <clearInternalKeybuffer(VgaText*)>:
c0015413:	55                   	push   ebp
c0015414:	89 e5                	mov    ebp,esp
c0015416:	83 ec 08             	sub    esp,0x8
c0015419:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001541c:	05 34 11 00 00       	add    eax,0x1134
c0015421:	83 ec 0c             	sub    esp,0xc
c0015424:	50                   	push   eax
c0015425:	e8 b8 b2 fe ff       	call   c00006e2 <strlen>
c001542a:	83 c4 10             	add    esp,0x10
c001542d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015430:	81 c2 34 11 00 00    	add    edx,0x1134
c0015436:	83 ec 04             	sub    esp,0x4
c0015439:	50                   	push   eax
c001543a:	6a 00                	push   0x0
c001543c:	52                   	push   edx
c001543d:	e8 83 b2 fe ff       	call   c00006c5 <memset>
c0015442:	83 c4 10             	add    esp,0x10
c0015445:	90                   	nop
c0015446:	c9                   	leave  
c0015447:	c3                   	ret    

c0015448 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015448:	55                   	push   ebp
c0015449:	89 e5                	mov    ebp,esp
c001544b:	83 ec 18             	sub    esp,0x18
c001544e:	fb                   	sti    
c001544f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015456:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001545a:	0f 84 8a 00 00 00    	je     c00154ea <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015460:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015463:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015469:	84 c0                	test   al,al
c001546b:	75 11                	jne    c001547e <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c001546d:	e8 e8 65 00 00       	call   c001ba5a <lockScheduler()>
c0015472:	e8 17 69 00 00       	call   c001bd8e <schedule()>
c0015477:	e8 e0 65 00 00       	call   c001ba5c <unlockScheduler()>
c001547c:	eb e2                	jmp    c0015460 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c001547e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015481:	8d 50 01             	lea    edx,[eax+0x1]
c0015484:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015487:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001548a:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015490:	88 10                	mov    BYTE PTR [eax],dl
c0015492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015495:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001549b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001549e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a1:	05 34 11 00 00       	add    eax,0x1134
c00154a6:	83 ec 0c             	sub    esp,0xc
c00154a9:	50                   	push   eax
c00154aa:	e8 33 b2 fe ff       	call   c00006e2 <strlen>
c00154af:	83 c4 10             	add    esp,0x10
c00154b2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00154b5:	81 c2 34 11 00 00    	add    edx,0x1134
c00154bb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00154be:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00154c1:	81 c2 34 11 00 00    	add    edx,0x1134
c00154c7:	83 ec 04             	sub    esp,0x4
c00154ca:	50                   	push   eax
c00154cb:	51                   	push   ecx
c00154cc:	52                   	push   edx
c00154cd:	e8 85 b1 fe ff       	call   c0000657 <memmove>
c00154d2:	83 c4 10             	add    esp,0x10
c00154d5:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00154d8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154db:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00154df:	0f 85 71 ff ff ff    	jne    c0015456 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00154e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e8:	eb 03                	jmp    c00154ed <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c00154ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ed:	c9                   	leave  
c00154ee:	c3                   	ret    
c00154ef:	90                   	nop

c00154f0 <Keyboard::Keyboard(char const*)>:
c00154f0:	83 ec 0c             	sub    esp,0xc
c00154f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154f7:	83 ec 08             	sub    esp,0x8
c00154fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154fe:	50                   	push   eax
c00154ff:	e8 6e e3 ff ff       	call   c0013872 <Device::Device(char const*)>
c0015504:	83 c4 10             	add    esp,0x10
c0015507:	ba 14 7b 02 c0       	mov    edx,0xc0027b14
c001550c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015510:	89 10                	mov    DWORD PTR [eax],edx
c0015512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015516:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015520:	c6 05 24 a8 02 c0 01 	mov    BYTE PTR ds:0xc002a824,0x1
c0015527:	90                   	nop
c0015528:	83 c4 0c             	add    esp,0xc
c001552b:	c3                   	ret    

c001552c <Keyboard::~Keyboard()>:
c001552c:	83 ec 0c             	sub    esp,0xc
c001552f:	ba 14 7b 02 c0       	mov    edx,0xc0027b14
c0015534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015538:	89 10                	mov    DWORD PTR [eax],edx
c001553a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001553e:	83 ec 0c             	sub    esp,0xc
c0015541:	50                   	push   eax
c0015542:	e8 dd df ff ff       	call   c0013524 <Device::~Device()>
c0015547:	83 c4 10             	add    esp,0x10
c001554a:	90                   	nop
c001554b:	83 c4 0c             	add    esp,0xc
c001554e:	c3                   	ret    
c001554f:	90                   	nop

c0015550 <Keyboard::~Keyboard()>:
c0015550:	83 ec 0c             	sub    esp,0xc
c0015553:	83 ec 0c             	sub    esp,0xc
c0015556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001555a:	e8 cd ff ff ff       	call   c001552c <Keyboard::~Keyboard()>
c001555f:	83 c4 10             	add    esp,0x10
c0015562:	83 ec 08             	sub    esp,0x8
c0015565:	68 5c 01 00 00       	push   0x15c
c001556a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001556e:	e8 24 cc ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0015573:	83 c4 10             	add    esp,0x10
c0015576:	83 c4 0c             	add    esp,0xc
c0015579:	c3                   	ret    

c001557a <LogicalDisk::close(int, int, void*)>:
c001557a:	83 c8 ff             	or     eax,0xffffffff
c001557d:	c3                   	ret    

c001557e <LogicalDisk::~LogicalDisk()>:
c001557e:	83 ec 0c             	sub    esp,0xc
c0015581:	ba c4 7b 02 c0       	mov    edx,0xc0027bc4
c0015586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001558a:	89 10                	mov    DWORD PTR [eax],edx
c001558c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015590:	83 ec 0c             	sub    esp,0xc
c0015593:	50                   	push   eax
c0015594:	e8 8b df ff ff       	call   c0013524 <Device::~Device()>
c0015599:	83 c4 10             	add    esp,0x10
c001559c:	90                   	nop
c001559d:	83 c4 0c             	add    esp,0xc
c00155a0:	c3                   	ret    
c00155a1:	90                   	nop

c00155a2 <LogicalDisk::~LogicalDisk()>:
c00155a2:	83 ec 0c             	sub    esp,0xc
c00155a5:	83 ec 0c             	sub    esp,0xc
c00155a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155ac:	e8 cd ff ff ff       	call   c001557e <LogicalDisk::~LogicalDisk()>
c00155b1:	83 c4 10             	add    esp,0x10
c00155b4:	83 ec 08             	sub    esp,0x8
c00155b7:	68 74 01 00 00       	push   0x174
c00155bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155c0:	e8 d2 cb ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c00155c5:	83 c4 10             	add    esp,0x10
c00155c8:	83 c4 0c             	add    esp,0xc
c00155cb:	c3                   	ret    

c00155cc <LogicalDisk::open(int, int, void*)>:
c00155cc:	83 ec 18             	sub    esp,0x18
c00155cf:	68 40 7b 02 c0       	push   0xc0027b40
c00155d4:	e8 2e 35 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c00155d9:	83 c8 ff             	or     eax,0xffffffff
c00155dc:	83 c4 1c             	add    esp,0x1c
c00155df:	c3                   	ret    

c00155e0 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00155e0:	53                   	push   ebx
c00155e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00155e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00155e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00155ed:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00155f3:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00155f9:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00155ff:	77 10                	ja     c0015611 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015601:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015607:	89 d3                	mov    ebx,edx
c0015609:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001560f:	72 05                	jb     c0015616 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015611:	83 c8 ff             	or     eax,0xffffffff
c0015614:	89 c2                	mov    edx,eax
c0015616:	5b                   	pop    ebx
c0015617:	c3                   	ret    

c0015618 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015618:	56                   	push   esi
c0015619:	83 c8 ff             	or     eax,0xffffffff
c001561c:	53                   	push   ebx
c001561d:	89 c2                	mov    edx,eax
c001561f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015623:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015627:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001562b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015631:	77 27                	ja     c001565a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015633:	89 d8                	mov    eax,ebx
c0015635:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001563b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015641:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015646:	89 c2                	mov    edx,eax
c0015648:	73 10                	jae    c001565a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001564a:	89 c8                	mov    eax,ecx
c001564c:	89 da                	mov    edx,ebx
c001564e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015654:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001565a:	5b                   	pop    ebx
c001565b:	5e                   	pop    esi
c001565c:	c3                   	ret    
c001565d:	90                   	nop

c001565e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001565e:	83 ec 1c             	sub    esp,0x1c
c0015661:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015665:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015669:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001566d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015671:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015675:	89 04 24             	mov    DWORD PTR [esp],eax
c0015678:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001567c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015680:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015684:	83 ec 08             	sub    esp,0x8
c0015687:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001568b:	50                   	push   eax
c001568c:	e8 e1 e1 ff ff       	call   c0013872 <Device::Device(char const*)>
c0015691:	83 c4 10             	add    esp,0x10
c0015694:	ba c4 7b 02 c0       	mov    edx,0xc0027bc4
c0015699:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001569d:	89 10                	mov    DWORD PTR [eax],edx
c001569f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156a3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00156aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156ae:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00156b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156b9:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00156c3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00156c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00156cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00156cf:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00156d5:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00156db:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00156df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00156e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00156e6:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00156ec:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00156f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00156fa:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015700:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015704:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001570e:	90                   	nop
c001570f:	83 c4 1c             	add    esp,0x1c
c0015712:	c3                   	ret    
c0015713:	90                   	nop

c0015714 <LogicalDisk::assignDriveLetter()>:
c0015714:	55                   	push   ebp
c0015715:	57                   	push   edi
c0015716:	56                   	push   esi
c0015717:	53                   	push   ebx
c0015718:	83 ec 14             	sub    esp,0x14
c001571b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001571f:	8b 3d 60 ac 02 c0    	mov    edi,DWORD PTR ds:0xc002ac60
c0015725:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001572b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001572f:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015735:	8b 3d 64 ac 02 c0    	mov    edi,DWORD PTR ds:0xc002ac64
c001573b:	3c 01                	cmp    al,0x1
c001573d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015741:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015745:	19 c0                	sbb    eax,eax
c0015747:	83 e0 02             	and    eax,0x2
c001574a:	83 c0 41             	add    eax,0x41
c001574d:	0f be e8             	movsx  ebp,al
c0015750:	3c 43                	cmp    al,0x43
c0015752:	75 10                	jne    c0015764 <LogicalDisk::assignDriveLetter()+0x50>
c0015754:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001575b:	75 5d                	jne    c00157ba <LogicalDisk::assignDriveLetter()+0xa6>
c001575d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015762:	75 56                	jne    c00157ba <LogicalDisk::assignDriveLetter()+0xa6>
c0015764:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015767:	ba 01 00 00 00       	mov    edx,0x1
c001576c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015770:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015774:	d3 e2                	shl    edx,cl
c0015776:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001577a:	89 d7                	mov    edi,edx
c001577c:	89 d6                	mov    esi,edx
c001577e:	c1 ff 1f             	sar    edi,0x1f
c0015781:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015785:	21 f9                	and    ecx,edi
c0015787:	09 d1                	or     ecx,edx
c0015789:	75 2f                	jne    c00157ba <LogicalDisk::assignDriveLetter()+0xa6>
c001578b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001578f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015793:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015799:	09 f2                	or     edx,esi
c001579b:	89 15 60 ac 02 c0    	mov    DWORD PTR ds:0xc002ac60,edx
c00157a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00157a5:	09 fa                	or     edx,edi
c00157a7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00157ab:	89 15 64 ac 02 c0    	mov    DWORD PTR ds:0xc002ac64,edx
c00157b1:	89 1c bd 80 ac 02 c0 	mov    DWORD PTR [edi*4-0x3ffd5380],ebx
c00157b8:	eb 08                	jmp    c00157c2 <LogicalDisk::assignDriveLetter()+0xae>
c00157ba:	45                   	inc    ebp
c00157bb:	40                   	inc    eax
c00157bc:	3c 5b                	cmp    al,0x5b
c00157be:	75 90                	jne    c0015750 <LogicalDisk::assignDriveLetter()+0x3c>
c00157c0:	31 c0                	xor    eax,eax
c00157c2:	83 c4 14             	add    esp,0x14
c00157c5:	5b                   	pop    ebx
c00157c6:	5e                   	pop    esi
c00157c7:	5f                   	pop    edi
c00157c8:	5d                   	pop    ebp
c00157c9:	c3                   	ret    

c00157ca <LogicalDisk::mount()>:
c00157ca:	56                   	push   esi
c00157cb:	53                   	push   ebx
c00157cc:	51                   	push   ecx
c00157cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00157d1:	8b 1d e8 a7 02 c0    	mov    ebx,DWORD PTR ds:0xc002a7e8
c00157d7:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00157e1:	85 db                	test   ebx,ebx
c00157e3:	74 50                	je     c0015835 <LogicalDisk::mount()+0x6b>
c00157e5:	e8 5b 62 00 00       	call   c001ba45 <getIRQNestingLevel()>
c00157ea:	52                   	push   edx
c00157eb:	52                   	push   edx
c00157ec:	50                   	push   eax
c00157ed:	68 64 7b 02 c0       	push   0xc0027b64
c00157f2:	e8 80 ca ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00157f7:	83 c4 0c             	add    esp,0xc
c00157fa:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015801:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015803:	83 e8 41             	sub    eax,0x41
c0015806:	50                   	push   eax
c0015807:	56                   	push   esi
c0015808:	53                   	push   ebx
c0015809:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001580c:	83 c4 10             	add    esp,0x10
c001580f:	84 c0                	test   al,al
c0015811:	74 08                	je     c001581b <LogicalDisk::mount()+0x51>
c0015813:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015819:	eb 1c                	jmp    c0015837 <LogicalDisk::mount()+0x6d>
c001581b:	e8 25 62 00 00       	call   c001ba45 <getIRQNestingLevel()>
c0015820:	51                   	push   ecx
c0015821:	51                   	push   ecx
c0015822:	50                   	push   eax
c0015823:	68 7f 7b 02 c0       	push   0xc0027b7f
c0015828:	e8 4a ca ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001582d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015830:	83 c4 10             	add    esp,0x10
c0015833:	eb ac                	jmp    c00157e1 <LogicalDisk::mount()+0x17>
c0015835:	31 c0                	xor    eax,eax
c0015837:	5a                   	pop    edx
c0015838:	5b                   	pop    ebx
c0015839:	5e                   	pop    esi
c001583a:	c3                   	ret    
c001583b:	90                   	nop

c001583c <LogicalDisk::unmount()>:
c001583c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015840:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001584a:	c3                   	ret    
c001584b:	90                   	nop

c001584c <LogicalDisk::unassignDriveLetter()>:
c001584c:	57                   	push   edi
c001584d:	56                   	push   esi
c001584e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015852:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015859:	84 c9                	test   cl,cl
c001585b:	75 0f                	jne    c001586c <LogicalDisk::unassignDriveLetter()+0x20>
c001585d:	c7 44 24 0c 9a 7b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0027b9a
c0015865:	5e                   	pop    esi
c0015866:	5f                   	pop    edi
c0015867:	e9 9b 32 00 00       	jmp    c0018b07 <Krnl::panic(char const*)>
c001586c:	83 e9 41             	sub    ecx,0x41
c001586f:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015876:	b8 01 00 00 00       	mov    eax,0x1
c001587b:	c7 04 8d 80 ac 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd5380],0x0
c0015886:	d3 e0                	shl    eax,cl
c0015888:	89 c7                	mov    edi,eax
c001588a:	f7 d0                	not    eax
c001588c:	c1 ff 1f             	sar    edi,0x1f
c001588f:	21 05 60 ac 02 c0    	and    DWORD PTR ds:0xc002ac60,eax
c0015895:	89 fe                	mov    esi,edi
c0015897:	f7 d6                	not    esi
c0015899:	21 35 64 ac 02 c0    	and    DWORD PTR ds:0xc002ac64,esi
c001589f:	5e                   	pop    esi
c00158a0:	5f                   	pop    edi
c00158a1:	c3                   	ret    

c00158a2 <LogicalDisk::read(unsigned long long, int, void*)>:
c00158a2:	57                   	push   edi
c00158a3:	56                   	push   esi
c00158a4:	53                   	push   ebx
c00158a5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00158a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00158ad:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00158b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00158b5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00158bb:	77 41                	ja     c00158fe <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00158bd:	99                   	cdq    
c00158be:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00158c4:	01 c8                	add    eax,ecx
c00158c6:	11 da                	adc    edx,ebx
c00158c8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00158ce:	19 d7                	sbb    edi,edx
c00158d0:	72 33                	jb     c0015905 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00158d2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00158d8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00158de:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00158e2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00158e6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00158ec:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00158f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00158f6:	5b                   	pop    ebx
c00158f7:	5e                   	pop    esi
c00158f8:	5f                   	pop    edi
c00158f9:	e9 9a 09 00 00       	jmp    c0016298 <VCache::read(unsigned long long, int, void*)>
c00158fe:	b8 05 00 00 00       	mov    eax,0x5
c0015903:	eb 05                	jmp    c001590a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015905:	b8 07 00 00 00       	mov    eax,0x7
c001590a:	5b                   	pop    ebx
c001590b:	5e                   	pop    esi
c001590c:	5f                   	pop    edi
c001590d:	c3                   	ret    

c001590e <LogicalDisk::write(unsigned long long, int, void*)>:
c001590e:	57                   	push   edi
c001590f:	56                   	push   esi
c0015910:	53                   	push   ebx
c0015911:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015915:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015919:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001591d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015921:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015927:	77 41                	ja     c001596a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015929:	99                   	cdq    
c001592a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015930:	01 c8                	add    eax,ecx
c0015932:	11 da                	adc    edx,ebx
c0015934:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001593a:	19 d7                	sbb    edi,edx
c001593c:	72 33                	jb     c0015971 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001593e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015944:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001594a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001594e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015952:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015958:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001595e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015962:	5b                   	pop    ebx
c0015963:	5e                   	pop    esi
c0015964:	5f                   	pop    edi
c0015965:	e9 4a 08 00 00       	jmp    c00161b4 <VCache::write(unsigned long long, int, void*)>
c001596a:	b8 05 00 00 00       	mov    eax,0x5
c001596f:	eb 05                	jmp    c0015976 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015971:	b8 07 00 00 00       	mov    eax,0x7
c0015976:	5b                   	pop    ebx
c0015977:	5e                   	pop    esi
c0015978:	5f                   	pop    edi
c0015979:	c3                   	ret    

c001597a <Mouse::Mouse(char const*)>:
c001597a:	83 ec 0c             	sub    esp,0xc
c001597d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015981:	83 ec 08             	sub    esp,0x8
c0015984:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015988:	50                   	push   eax
c0015989:	e8 e4 de ff ff       	call   c0013872 <Device::Device(char const*)>
c001598e:	83 c4 10             	add    esp,0x10
c0015991:	ba f0 7b 02 c0       	mov    edx,0xc0027bf0
c0015996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001599a:	89 10                	mov    DWORD PTR [eax],edx
c001599c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159a0:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00159aa:	90                   	nop
c00159ab:	83 c4 0c             	add    esp,0xc
c00159ae:	c3                   	ret    
c00159af:	90                   	nop

c00159b0 <Mouse::~Mouse()>:
c00159b0:	83 ec 0c             	sub    esp,0xc
c00159b3:	ba f0 7b 02 c0       	mov    edx,0xc0027bf0
c00159b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159bc:	89 10                	mov    DWORD PTR [eax],edx
c00159be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159c2:	83 ec 0c             	sub    esp,0xc
c00159c5:	50                   	push   eax
c00159c6:	e8 59 db ff ff       	call   c0013524 <Device::~Device()>
c00159cb:	83 c4 10             	add    esp,0x10
c00159ce:	90                   	nop
c00159cf:	83 c4 0c             	add    esp,0xc
c00159d2:	c3                   	ret    
c00159d3:	90                   	nop

c00159d4 <Mouse::~Mouse()>:
c00159d4:	83 ec 0c             	sub    esp,0xc
c00159d7:	83 ec 0c             	sub    esp,0xc
c00159da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159de:	e8 cd ff ff ff       	call   c00159b0 <Mouse::~Mouse()>
c00159e3:	83 c4 10             	add    esp,0x10
c00159e6:	83 ec 08             	sub    esp,0x8
c00159e9:	68 58 01 00 00       	push   0x158
c00159ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159f2:	e8 a0 c7 ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c00159f7:	83 c4 10             	add    esp,0x10
c00159fa:	83 c4 0c             	add    esp,0xc
c00159fd:	c3                   	ret    

c00159fe <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00159fe:	55                   	push   ebp
c00159ff:	57                   	push   edi
c0015a00:	56                   	push   esi
c0015a01:	53                   	push   ebx
c0015a02:	81 ec 28 01 00 00    	sub    esp,0x128
c0015a08:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015a0f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015a16:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015a1d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015a24:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015a28:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015a2c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015a33:	e8 2c df ff ff       	call   c0013964 <Device::getName()>
c0015a38:	5a                   	pop    edx
c0015a39:	59                   	pop    ecx
c0015a3a:	50                   	push   eax
c0015a3b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015a3f:	55                   	push   ebp
c0015a40:	e8 1f ad fe ff       	call   c0000764 <strcpy>
c0015a45:	5b                   	pop    ebx
c0015a46:	58                   	pop    eax
c0015a47:	68 14 7c 02 c0       	push   0xc0027c14
c0015a4c:	55                   	push   ebp
c0015a4d:	e8 c9 ad fe ff       	call   c000081b <strcat>
c0015a52:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015a59:	e8 2a c7 ff ff       	call   c0012188 <operator new(unsigned long)>
c0015a5e:	83 c4 0c             	add    esp,0xc
c0015a61:	89 c3                	mov    ebx,eax
c0015a63:	57                   	push   edi
c0015a64:	56                   	push   esi
c0015a65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a6d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015a74:	55                   	push   ebp
c0015a75:	50                   	push   eax
c0015a76:	e8 e3 fb ff ff       	call   c001565e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015a7b:	83 c4 14             	add    esp,0x14
c0015a7e:	53                   	push   ebx
c0015a7f:	e8 90 fc ff ff       	call   c0015714 <LogicalDisk::assignDriveLetter()>
c0015a84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015a87:	e8 3e fd ff ff       	call   c00157ca <LogicalDisk::mount()>
c0015a8c:	58                   	pop    eax
c0015a8d:	5a                   	pop    edx
c0015a8e:	53                   	push   ebx
c0015a8f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015a96:	e8 e7 db ff ff       	call   c0013682 <Device::addChild(Device*)>
c0015a9b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015aa1:	5b                   	pop    ebx
c0015aa2:	5e                   	pop    esi
c0015aa3:	5f                   	pop    edi
c0015aa4:	5d                   	pop    ebp
c0015aa5:	c3                   	ret    

c0015aa6 <createPartitionsForDisk(PhysicalDisk*)>:
c0015aa6:	55                   	push   ebp
c0015aa7:	57                   	push   edi
c0015aa8:	56                   	push   esi
c0015aa9:	53                   	push   ebx
c0015aaa:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015ab0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015ab7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015abd:	3d 00 02 00 00       	cmp    eax,0x200
c0015ac2:	74 27                	je     c0015aeb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015ac4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015aca:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015ad0:	83 ec 10             	sub    esp,0x10
c0015ad3:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015ad7:	99                   	cdq    
c0015ad8:	c1 e6 0a             	shl    esi,0xa
c0015adb:	52                   	push   edx
c0015adc:	89 fd                	mov    ebp,edi
c0015ade:	50                   	push   eax
c0015adf:	55                   	push   ebp
c0015ae0:	56                   	push   esi
c0015ae1:	e8 b6 da 00 00       	call   c002359c <__udivdi3>
c0015ae6:	e9 b1 00 00 00       	jmp    c0015b9c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015aeb:	83 ec 0c             	sub    esp,0xc
c0015aee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015af0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0015af4:	56                   	push   esi
c0015af5:	6a 01                	push   0x1
c0015af7:	6a 00                	push   0x0
c0015af9:	6a 00                	push   0x0
c0015afb:	53                   	push   ebx
c0015afc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015aff:	83 c4 20             	add    esp,0x20
c0015b02:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0015b0a:	75 0a                	jne    c0015b16 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0015b0c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0015b14:	74 2c                	je     c0015b42 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0015b16:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015b1c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015b22:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015b28:	83 ec 10             	sub    esp,0x10
c0015b2b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015b2f:	89 f7                	mov    edi,esi
c0015b31:	c1 e0 0a             	shl    eax,0xa
c0015b34:	c1 ff 1f             	sar    edi,0x1f
c0015b37:	57                   	push   edi
c0015b38:	56                   	push   esi
c0015b39:	52                   	push   edx
c0015b3a:	50                   	push   eax
c0015b3b:	e8 5c da 00 00       	call   c002359c <__udivdi3>
c0015b40:	eb 5a                	jmp    c0015b9c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015b42:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0015b49:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0015b50:	83 e1 7f             	and    ecx,0x7f
c0015b53:	83 e0 7f             	and    eax,0x7f
c0015b56:	01 c1                	add    ecx,eax
c0015b58:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0015b5f:	83 e0 7f             	and    eax,0x7f
c0015b62:	01 c1                	add    ecx,eax
c0015b64:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0015b6b:	83 e0 7f             	and    eax,0x7f
c0015b6e:	00 c1                	add    cl,al
c0015b70:	74 41                	je     c0015bb3 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0015b72:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015b78:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015b7e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015b84:	83 ec 10             	sub    esp,0x10
c0015b87:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015b8b:	89 f7                	mov    edi,esi
c0015b8d:	c1 e0 0a             	shl    eax,0xa
c0015b90:	c1 ff 1f             	sar    edi,0x1f
c0015b93:	57                   	push   edi
c0015b94:	56                   	push   esi
c0015b95:	52                   	push   edx
c0015b96:	50                   	push   eax
c0015b97:	e8 00 da 00 00       	call   c002359c <__udivdi3>
c0015b9c:	83 c4 14             	add    esp,0x14
c0015b9f:	52                   	push   edx
c0015ba0:	50                   	push   eax
c0015ba1:	6a 00                	push   0x0
c0015ba3:	6a 00                	push   0x0
c0015ba5:	53                   	push   ebx
c0015ba6:	e8 53 fe ff ff       	call   c00159fe <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015bab:	83 c4 20             	add    esp,0x20
c0015bae:	e9 79 01 00 00       	jmp    c0015d2c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0015bb3:	89 f0                	mov    eax,esi
c0015bb5:	31 f6                	xor    esi,esi
c0015bb7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0015bbe:	75 02                	jne    c0015bc2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0015bc0:	89 f1                	mov    ecx,esi
c0015bc2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0015bc9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0015bd0:	c1 e2 08             	shl    edx,0x8
c0015bd3:	c1 e7 10             	shl    edi,0x10
c0015bd6:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0015bde:	09 fa                	or     edx,edi
c0015be0:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0015be8:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0015bef:	83 c0 10             	add    eax,0x10
c0015bf2:	09 fa                	or     edx,edi
c0015bf4:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0015bfb:	c1 e7 18             	shl    edi,0x18
c0015bfe:	09 fa                	or     edx,edi
c0015c00:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0015c07:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0015c0b:	c1 e7 10             	shl    edi,0x10
c0015c0e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0015c15:	c1 e2 08             	shl    edx,0x8
c0015c18:	09 fa                	or     edx,edi
c0015c1a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0015c21:	09 fa                	or     edx,edi
c0015c23:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0015c2a:	c1 e7 18             	shl    edi,0x18
c0015c2d:	09 fa                	or     edx,edi
c0015c2f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0015c33:	46                   	inc    esi
c0015c34:	83 fe 04             	cmp    esi,0x4
c0015c37:	0f 85 7a ff ff ff    	jne    c0015bb7 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0015c3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c41:	83 f0 01             	xor    eax,0x1
c0015c44:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0015c48:	75 57                	jne    c0015ca1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015c4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c4e:	83 f0 01             	xor    eax,0x1
c0015c51:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0015c55:	75 4a                	jne    c0015ca1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015c57:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0015c5b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015c63:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015c6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015c71:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015c77:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015c7d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015c81:	89 f7                	mov    edi,esi
c0015c83:	c1 e0 0a             	shl    eax,0xa
c0015c86:	c1 ff 1f             	sar    edi,0x1f
c0015c89:	57                   	push   edi
c0015c8a:	56                   	push   esi
c0015c8b:	52                   	push   edx
c0015c8c:	50                   	push   eax
c0015c8d:	e8 0a d9 00 00       	call   c002359c <__udivdi3>
c0015c92:	83 c4 10             	add    esp,0x10
c0015c95:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c99:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c9d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0015ca1:	84 c9                	test   cl,cl
c0015ca3:	74 53                	je     c0015cf8 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0015ca5:	0f b6 c9             	movzx  ecx,cl
c0015ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015cb0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015cb4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0015cb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015cbc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015cc0:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0015cc4:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0015cc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015ccc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015cd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015cd4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015cd8:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0015cdc:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0015ce0:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0015ce4:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0015ce8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015cec:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015cf0:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0015cf4:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0015cf8:	31 ed                	xor    ebp,ebp
c0015cfa:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0015cfe:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0015d02:	89 f8                	mov    eax,edi
c0015d04:	09 f0                	or     eax,esi
c0015d06:	74 1e                	je     c0015d26 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015d08:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0015d0c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0015d10:	89 d1                	mov    ecx,edx
c0015d12:	09 c1                	or     ecx,eax
c0015d14:	74 10                	je     c0015d26 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015d16:	83 ec 0c             	sub    esp,0xc
c0015d19:	57                   	push   edi
c0015d1a:	56                   	push   esi
c0015d1b:	52                   	push   edx
c0015d1c:	50                   	push   eax
c0015d1d:	53                   	push   ebx
c0015d1e:	e8 db fc ff ff       	call   c00159fe <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015d23:	83 c4 20             	add    esp,0x20
c0015d26:	45                   	inc    ebp
c0015d27:	83 fd 04             	cmp    ebp,0x4
c0015d2a:	75 ce                	jne    c0015cfa <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0015d2c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0015d32:	5b                   	pop    ebx
c0015d33:	5e                   	pop    esi
c0015d34:	5f                   	pop    edi
c0015d35:	5d                   	pop    ebp
c0015d36:	c3                   	ret    
c0015d37:	90                   	nop

c0015d38 <Timer::Timer(char const*)>:
c0015d38:	83 ec 0c             	sub    esp,0xc
c0015d3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d3f:	83 ec 08             	sub    esp,0x8
c0015d42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d46:	50                   	push   eax
c0015d47:	e8 26 db ff ff       	call   c0013872 <Device::Device(char const*)>
c0015d4c:	83 c4 10             	add    esp,0x10
c0015d4f:	ba 28 7c 02 c0       	mov    edx,0xc0027c28
c0015d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d58:	89 10                	mov    DWORD PTR [eax],edx
c0015d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d5e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0015d68:	90                   	nop
c0015d69:	83 c4 0c             	add    esp,0xc
c0015d6c:	c3                   	ret    
c0015d6d:	90                   	nop

c0015d6e <Timer::~Timer()>:
c0015d6e:	83 ec 0c             	sub    esp,0xc
c0015d71:	ba 28 7c 02 c0       	mov    edx,0xc0027c28
c0015d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d7a:	89 10                	mov    DWORD PTR [eax],edx
c0015d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d80:	83 ec 0c             	sub    esp,0xc
c0015d83:	50                   	push   eax
c0015d84:	e8 9b d7 ff ff       	call   c0013524 <Device::~Device()>
c0015d89:	83 c4 10             	add    esp,0x10
c0015d8c:	90                   	nop
c0015d8d:	83 c4 0c             	add    esp,0xc
c0015d90:	c3                   	ret    
c0015d91:	90                   	nop

c0015d92 <Timer::~Timer()>:
c0015d92:	83 ec 0c             	sub    esp,0xc
c0015d95:	83 ec 0c             	sub    esp,0xc
c0015d98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d9c:	e8 cd ff ff ff       	call   c0015d6e <Timer::~Timer()>
c0015da1:	83 c4 10             	add    esp,0x10
c0015da4:	83 ec 08             	sub    esp,0x8
c0015da7:	68 5c 01 00 00       	push   0x15c
c0015dac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015db0:	e8 e2 c3 ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0015db5:	83 c4 10             	add    esp,0x10
c0015db8:	83 c4 0c             	add    esp,0xc
c0015dbb:	c3                   	ret    

c0015dbc <Timer::read()>:
c0015dbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dc0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015dc6:	c3                   	ret    

c0015dc7 <timerHandler(unsigned long long)>:
c0015dc7:	55                   	push   ebp
c0015dc8:	57                   	push   edi
c0015dc9:	56                   	push   esi
c0015dca:	53                   	push   ebx
c0015dcb:	83 ec 0c             	sub    esp,0xc
c0015dce:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015dd2:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0015dd6:	01 35 f0 ac 02 c0    	add    DWORD PTR ds:0xc002acf0,esi
c0015ddc:	11 3d f4 ac 02 c0    	adc    DWORD PTR ds:0xc002acf4,edi
c0015de2:	80 3d 8d a6 02 c0 00 	cmp    BYTE PTR ds:0xc002a68d,0x0
c0015de9:	0f 84 07 01 00 00    	je     c0015ef6 <timerHandler(unsigned long long)+0x12f>
c0015def:	e8 8d 5c 00 00       	call   c001ba81 <lockStuff()>
c0015df4:	83 ec 0c             	sub    esp,0xc
c0015df7:	68 7c bb 02 c0       	push   0xc002bb7c
c0015dfc:	e8 af f8 00 00       	call   c00256b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e01:	c7 04 24 7c bb 02 c0 	mov    DWORD PTR [esp],0xc002bb7c
c0015e08:	89 c3                	mov    ebx,eax
c0015e0a:	e8 a9 f8 00 00       	call   c00256b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015e0f:	83 c4 10             	add    esp,0x10
c0015e12:	84 c0                	test   al,al
c0015e14:	74 60                	je     c0015e76 <timerHandler(unsigned long long)+0xaf>
c0015e16:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015e1c:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0015e1f:	85 c0                	test   eax,eax
c0015e21:	0f 85 91 00 00 00    	jne    c0015eb8 <timerHandler(unsigned long long)+0xf1>
c0015e27:	e9 be 00 00 00       	jmp    c0015eea <timerHandler(unsigned long long)+0x123>
c0015e2c:	83 ec 0c             	sub    esp,0xc
c0015e2f:	55                   	push   ebp
c0015e30:	e8 35 62 00 00       	call   c001c06a <unblockTask(ThreadControlBlock*)>
c0015e35:	83 c4 10             	add    esp,0x10
c0015e38:	39 eb                	cmp    ebx,ebp
c0015e3a:	75 12                	jne    c0015e4e <timerHandler(unsigned long long)+0x87>
c0015e3c:	83 ec 0c             	sub    esp,0xc
c0015e3f:	68 7c bb 02 c0       	push   0xc002bb7c
c0015e44:	e8 67 f8 00 00       	call   c00256b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e49:	89 c3                	mov    ebx,eax
c0015e4b:	83 c4 10             	add    esp,0x10
c0015e4e:	83 ec 0c             	sub    esp,0xc
c0015e51:	68 7c bb 02 c0       	push   0xc002bb7c
c0015e56:	e8 5d f8 00 00       	call   c00256b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015e5b:	83 c4 10             	add    esp,0x10
c0015e5e:	84 c0                	test   al,al
c0015e60:	75 b4                	jne    c0015e16 <timerHandler(unsigned long long)+0x4f>
c0015e62:	83 ec 0c             	sub    esp,0xc
c0015e65:	68 7c bb 02 c0       	push   0xc002bb7c
c0015e6a:	e8 41 f8 00 00       	call   c00256b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e6f:	83 c4 10             	add    esp,0x10
c0015e72:	39 d8                	cmp    eax,ebx
c0015e74:	74 a0                	je     c0015e16 <timerHandler(unsigned long long)+0x4f>
c0015e76:	83 ec 0c             	sub    esp,0xc
c0015e79:	68 7c bb 02 c0       	push   0xc002bb7c
c0015e7e:	e8 2d f8 00 00       	call   c00256b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e83:	c7 04 24 7c bb 02 c0 	mov    DWORD PTR [esp],0xc002bb7c
c0015e8a:	89 c5                	mov    ebp,eax
c0015e8c:	e8 43 f8 00 00       	call   c00256d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015e91:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0015e94:	83 c4 10             	add    esp,0x10
c0015e97:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0015e9a:	39 15 f0 ac 02 c0    	cmp    DWORD PTR ds:0xc002acf0,edx
c0015ea0:	a1 f4 ac 02 c0       	mov    eax,ds:0xc002acf4
c0015ea5:	19 c8                	sbb    eax,ecx
c0015ea7:	73 83                	jae    c0015e2c <timerHandler(unsigned long long)+0x65>
c0015ea9:	50                   	push   eax
c0015eaa:	50                   	push   eax
c0015eab:	55                   	push   ebp
c0015eac:	68 7c bb 02 c0       	push   0xc002bb7c
c0015eb1:	e8 cc f8 00 00       	call   c0025782 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015eb6:	eb 93                	jmp    c0015e4b <timerHandler(unsigned long long)+0x84>
c0015eb8:	80 3d 8c a6 02 c0 00 	cmp    BYTE PTR ds:0xc002a68c,0x0
c0015ebf:	74 29                	je     c0015eea <timerHandler(unsigned long long)+0x123>
c0015ec1:	39 c6                	cmp    esi,eax
c0015ec3:	bb 00 00 00 00       	mov    ebx,0x0
c0015ec8:	19 df                	sbb    edi,ebx
c0015eca:	72 19                	jb     c0015ee5 <timerHandler(unsigned long long)+0x11e>
c0015ecc:	e8 89 5b 00 00       	call   c001ba5a <lockScheduler()>
c0015ed1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ed6:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0015ed9:	e8 b0 5e 00 00       	call   c001bd8e <schedule()>
c0015ede:	e8 79 5b 00 00       	call   c001ba5c <unlockScheduler()>
c0015ee3:	eb 05                	jmp    c0015eea <timerHandler(unsigned long long)+0x123>
c0015ee5:	29 f0                	sub    eax,esi
c0015ee7:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0015eea:	83 c4 0c             	add    esp,0xc
c0015eed:	5b                   	pop    ebx
c0015eee:	5e                   	pop    esi
c0015eef:	5f                   	pop    edi
c0015ef0:	5d                   	pop    ebp
c0015ef1:	e9 1d 5f 00 00       	jmp    c001be13 <unlockStuff()>
c0015ef6:	83 c4 0c             	add    esp,0xc
c0015ef9:	5b                   	pop    ebx
c0015efa:	5e                   	pop    esi
c0015efb:	5f                   	pop    edi
c0015efc:	5d                   	pop    ebp
c0015efd:	c3                   	ret    

c0015efe <setupTimer(int)>:
c0015efe:	57                   	push   edi
c0015eff:	56                   	push   esi
c0015f00:	53                   	push   ebx
c0015f01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f05:	e8 76 1a 00 00       	call   c0017980 <CPU::getNumber()>
c0015f0a:	85 c0                	test   eax,eax
c0015f0c:	74 32                	je     c0015f40 <setupTimer(int)+0x42>
c0015f0e:	83 ec 0c             	sub    esp,0xc
c0015f11:	68 60 01 00 00       	push   0x160
c0015f16:	e8 6d c2 ff ff       	call   c0012188 <operator new(unsigned long)>
c0015f1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f1e:	89 c3                	mov    ebx,eax
c0015f20:	e8 0d d1 00 00       	call   c0023032 <APICTimer::APICTimer()>
c0015f25:	6a 00                	push   0x0
c0015f27:	6a 00                	push   0x0
c0015f29:	56                   	push   esi
c0015f2a:	53                   	push   ebx
c0015f2b:	e8 0a d0 00 00       	call   c0022f3a <APICTimer::open(int, int, void*)>
c0015f30:	83 c4 20             	add    esp,0x20
c0015f33:	e8 4c 1a 00 00       	call   c0017984 <CPU::current()>
c0015f38:	56                   	push   esi
c0015f39:	56                   	push   esi
c0015f3a:	53                   	push   ebx
c0015f3b:	e9 96 00 00 00       	jmp    c0015fd6 <setupTimer(int)+0xd8>
c0015f40:	e8 3f 1a 00 00       	call   c0017984 <CPU::current()>
c0015f45:	83 ec 0c             	sub    esp,0xc
c0015f48:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015f4e:	e8 11 da ff ff       	call   c0013964 <Device::getName()>
c0015f53:	83 c4 10             	add    esp,0x10
c0015f56:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0015f59:	0f 85 87 00 00 00    	jne    c0015fe6 <setupTimer(int)+0xe8>
c0015f5f:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c0015f64:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0015f6b:	74 79                	je     c0015fe6 <setupTimer(int)+0xe8>
c0015f6d:	83 ec 0c             	sub    esp,0xc
c0015f70:	68 5c 01 00 00       	push   0x15c
c0015f75:	e8 0e c2 ff ff       	call   c0012188 <operator new(unsigned long)>
c0015f7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f7d:	89 c3                	mov    ebx,eax
c0015f7f:	e8 fe d1 00 00       	call   c0023182 <PIT::PIT()>
c0015f84:	59                   	pop    ecx
c0015f85:	5f                   	pop    edi
c0015f86:	53                   	push   ebx
c0015f87:	ff 35 88 a6 02 c0    	push   DWORD PTR ds:0xc002a688
c0015f8d:	e8 f0 d6 ff ff       	call   c0013682 <Device::addChild(Device*)>
c0015f92:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f94:	6a 00                	push   0x0
c0015f96:	6a 00                	push   0x0
c0015f98:	56                   	push   esi
c0015f99:	53                   	push   ebx
c0015f9a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f9d:	83 c4 14             	add    esp,0x14
c0015fa0:	68 60 01 00 00       	push   0x160
c0015fa5:	e8 de c1 ff ff       	call   c0012188 <operator new(unsigned long)>
c0015faa:	89 04 24             	mov    DWORD PTR [esp],eax
c0015fad:	89 c7                	mov    edi,eax
c0015faf:	e8 7e d0 00 00       	call   c0023032 <APICTimer::APICTimer()>
c0015fb4:	6a 00                	push   0x0
c0015fb6:	6a 00                	push   0x0
c0015fb8:	56                   	push   esi
c0015fb9:	57                   	push   edi
c0015fba:	e8 7b cf 00 00       	call   c0022f3a <APICTimer::open(int, int, void*)>
c0015fbf:	83 c4 20             	add    esp,0x20
c0015fc2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fc4:	6a 00                	push   0x0
c0015fc6:	6a 00                	push   0x0
c0015fc8:	6a 00                	push   0x0
c0015fca:	53                   	push   ebx
c0015fcb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015fce:	e8 b1 19 00 00       	call   c0017984 <CPU::current()>
c0015fd3:	5a                   	pop    edx
c0015fd4:	59                   	pop    ecx
c0015fd5:	57                   	push   edi
c0015fd6:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015fdc:	e8 a1 d6 ff ff       	call   c0013682 <Device::addChild(Device*)>
c0015fe1:	83 c4 10             	add    esp,0x10
c0015fe4:	eb 33                	jmp    c0016019 <setupTimer(int)+0x11b>
c0015fe6:	83 ec 0c             	sub    esp,0xc
c0015fe9:	68 5c 01 00 00       	push   0x15c
c0015fee:	e8 95 c1 ff ff       	call   c0012188 <operator new(unsigned long)>
c0015ff3:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ff6:	89 c3                	mov    ebx,eax
c0015ff8:	e8 85 d1 00 00       	call   c0023182 <PIT::PIT()>
c0015ffd:	58                   	pop    eax
c0015ffe:	5a                   	pop    edx
c0015fff:	53                   	push   ebx
c0016000:	ff 35 88 a6 02 c0    	push   DWORD PTR ds:0xc002a688
c0016006:	e8 77 d6 ff ff       	call   c0013682 <Device::addChild(Device*)>
c001600b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001600d:	6a 00                	push   0x0
c001600f:	6a 00                	push   0x0
c0016011:	56                   	push   esi
c0016012:	53                   	push   ebx
c0016013:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016016:	83 c4 20             	add    esp,0x20
c0016019:	89 d8                	mov    eax,ebx
c001601b:	5b                   	pop    ebx
c001601c:	5e                   	pop    esi
c001601d:	5f                   	pop    edi
c001601e:	c3                   	ret    
c001601f:	90                   	nop

c0016020 <VCache::VCache(PhysicalDisk*)>:
c0016020:	53                   	push   ebx
c0016021:	83 ec 08             	sub    esp,0x8
c0016024:	ba 58 7c 02 c0       	mov    edx,0xc0027c58
c0016029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001602d:	89 10                	mov    DWORD PTR [eax],edx
c001602f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016033:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001603a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001603e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016049:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016050:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001605b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016062:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001606d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016078:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001607c:	83 ec 0c             	sub    esp,0xc
c001607f:	6a 10                	push   0x10
c0016081:	e8 02 c1 ff ff       	call   c0012188 <operator new(unsigned long)>
c0016086:	83 c4 10             	add    esp,0x10
c0016089:	89 c3                	mov    ebx,eax
c001608b:	83 ec 0c             	sub    esp,0xc
c001608e:	53                   	push   ebx
c001608f:	e8 de 5a 00 00       	call   c001bb72 <Mutex::Mutex()>
c0016094:	83 c4 10             	add    esp,0x10
c0016097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001609b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001609e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00160a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00160a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160ad:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00160b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00160b8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00160be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160c2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00160c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00160c9:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00160cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00160d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00160d9:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00160dc:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00160df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160e3:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00160e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00160eb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00160f1:	c1 e0 06             	shl    eax,0x6
c00160f4:	83 ec 0c             	sub    esp,0xc
c00160f7:	50                   	push   eax
c00160f8:	e8 71 90 ff ff       	call   c000f16e <malloc>
c00160fd:	83 c4 10             	add    esp,0x10
c0016100:	89 c2                	mov    edx,eax
c0016102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016106:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016109:	90                   	nop
c001610a:	83 c4 08             	add    esp,0x8
c001610d:	5b                   	pop    ebx
c001610e:	c3                   	ret    
c001610f:	90                   	nop

c0016110 <VCache::writeWriteBuffer()>:
c0016110:	53                   	push   ebx
c0016111:	83 ec 14             	sub    esp,0x14
c0016114:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016118:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001611b:	8b 10                	mov    edx,DWORD PTR [eax]
c001611d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016120:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016123:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016126:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016129:	50                   	push   eax
c001612a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001612d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016134:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001613b:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001613f:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016146:	83 c4 28             	add    esp,0x28
c0016149:	5b                   	pop    ebx
c001614a:	c3                   	ret    
c001614b:	90                   	nop

c001614c <VCache::~VCache()>:
c001614c:	83 ec 0c             	sub    esp,0xc
c001614f:	ba 58 7c 02 c0       	mov    edx,0xc0027c58
c0016154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016158:	89 10                	mov    DWORD PTR [eax],edx
c001615a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001615e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016161:	84 c0                	test   al,al
c0016163:	74 0f                	je     c0016174 <VCache::~VCache()+0x28>
c0016165:	83 ec 0c             	sub    esp,0xc
c0016168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001616c:	e8 9f ff ff ff       	call   c0016110 <VCache::writeWriteBuffer()>
c0016171:	83 c4 10             	add    esp,0x10
c0016174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016178:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001617b:	83 ec 0c             	sub    esp,0xc
c001617e:	50                   	push   eax
c001617f:	e8 fa 8f ff ff       	call   c000f17e <free>
c0016184:	83 c4 10             	add    esp,0x10
c0016187:	90                   	nop
c0016188:	83 c4 0c             	add    esp,0xc
c001618b:	c3                   	ret    

c001618c <VCache::~VCache()>:
c001618c:	83 ec 0c             	sub    esp,0xc
c001618f:	83 ec 0c             	sub    esp,0xc
c0016192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016196:	e8 b1 ff ff ff       	call   c001614c <VCache::~VCache()>
c001619b:	83 c4 10             	add    esp,0x10
c001619e:	83 ec 08             	sub    esp,0x8
c00161a1:	6a 30                	push   0x30
c00161a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161a7:	e8 eb bf ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c00161ac:	83 c4 10             	add    esp,0x10
c00161af:	83 c4 0c             	add    esp,0xc
c00161b2:	c3                   	ret    
c00161b3:	90                   	nop

c00161b4 <VCache::write(unsigned long long, int, void*)>:
c00161b4:	55                   	push   ebp
c00161b5:	57                   	push   edi
c00161b6:	56                   	push   esi
c00161b7:	53                   	push   ebx
c00161b8:	83 ec 28             	sub    esp,0x28
c00161bb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00161bf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00161c3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00161c7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00161cb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00161ce:	e8 01 5e 00 00       	call   c001bfd4 <Semaphore::acquire()>
c00161d3:	83 c4 10             	add    esp,0x10
c00161d6:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00161da:	74 66                	je     c0016242 <VCache::write(unsigned long long, int, void*)+0x8e>
c00161dc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00161df:	99                   	cdq    
c00161e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00161e4:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00161e7:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00161ea:	89 c1                	mov    ecx,eax
c00161ec:	89 d0                	mov    eax,edx
c00161ee:	31 f1                	xor    ecx,esi
c00161f0:	31 f8                	xor    eax,edi
c00161f2:	89 ca                	mov    edx,ecx
c00161f4:	09 c2                	or     edx,eax
c00161f6:	75 3e                	jne    c0016236 <VCache::write(unsigned long long, int, void*)+0x82>
c00161f8:	83 fd 01             	cmp    ebp,0x1
c00161fb:	75 39                	jne    c0016236 <VCache::write(unsigned long long, int, void*)+0x82>
c00161fd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016200:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016206:	51                   	push   ecx
c0016207:	50                   	push   eax
c0016208:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001620c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016210:	0f af c8             	imul   ecx,eax
c0016213:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0016216:	51                   	push   ecx
c0016217:	e8 73 a4 fe ff       	call   c000068f <memcpy>
c001621c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001621f:	83 c4 10             	add    esp,0x10
c0016222:	40                   	inc    eax
c0016223:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016226:	83 f8 40             	cmp    eax,0x40
c0016229:	75 57                	jne    c0016282 <VCache::write(unsigned long long, int, void*)+0xce>
c001622b:	83 ec 0c             	sub    esp,0xc
c001622e:	53                   	push   ebx
c001622f:	e8 dc fe ff ff       	call   c0016110 <VCache::writeWriteBuffer()>
c0016234:	eb 34                	jmp    c001626a <VCache::write(unsigned long long, int, void*)+0xb6>
c0016236:	83 ec 0c             	sub    esp,0xc
c0016239:	53                   	push   ebx
c001623a:	e8 d1 fe ff ff       	call   c0016110 <VCache::writeWriteBuffer()>
c001623f:	83 c4 10             	add    esp,0x10
c0016242:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016245:	83 fd 3f             	cmp    ebp,0x3f
c0016248:	7f 25                	jg     c001626f <VCache::write(unsigned long long, int, void*)+0xbb>
c001624a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001624d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016250:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016253:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016257:	52                   	push   edx
c0016258:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001625e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016262:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016265:	e8 25 a4 fe ff       	call   c000068f <memcpy>
c001626a:	83 c4 10             	add    esp,0x10
c001626d:	eb 13                	jmp    c0016282 <VCache::write(unsigned long long, int, void*)+0xce>
c001626f:	83 ec 0c             	sub    esp,0xc
c0016272:	8b 10                	mov    edx,DWORD PTR [eax]
c0016274:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016278:	55                   	push   ebp
c0016279:	57                   	push   edi
c001627a:	56                   	push   esi
c001627b:	50                   	push   eax
c001627c:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001627f:	83 c4 20             	add    esp,0x20
c0016282:	83 ec 0c             	sub    esp,0xc
c0016285:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016288:	e8 cf 62 00 00       	call   c001c55c <Semaphore::release()>
c001628d:	83 c4 2c             	add    esp,0x2c
c0016290:	31 c0                	xor    eax,eax
c0016292:	5b                   	pop    ebx
c0016293:	5e                   	pop    esi
c0016294:	5f                   	pop    edi
c0016295:	5d                   	pop    ebp
c0016296:	c3                   	ret    
c0016297:	90                   	nop

c0016298 <VCache::read(unsigned long long, int, void*)>:
c0016298:	57                   	push   edi
c0016299:	56                   	push   esi
c001629a:	53                   	push   ebx
c001629b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001629f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00162a3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00162a7:	83 ec 0c             	sub    esp,0xc
c00162aa:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00162ad:	e8 22 5d 00 00       	call   c001bfd4 <Semaphore::acquire()>
c00162b2:	83 c4 10             	add    esp,0x10
c00162b5:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00162b9:	74 0c                	je     c00162c7 <VCache::read(unsigned long long, int, void*)+0x2f>
c00162bb:	83 ec 0c             	sub    esp,0xc
c00162be:	53                   	push   ebx
c00162bf:	e8 4c fe ff ff       	call   c0016110 <VCache::writeWriteBuffer()>
c00162c4:	83 c4 10             	add    esp,0x10
c00162c7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00162ca:	83 ec 0c             	sub    esp,0xc
c00162cd:	8b 10                	mov    edx,DWORD PTR [eax]
c00162cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162d7:	57                   	push   edi
c00162d8:	56                   	push   esi
c00162d9:	50                   	push   eax
c00162da:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00162dd:	83 c4 14             	add    esp,0x14
c00162e0:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00162e3:	e8 74 62 00 00       	call   c001c55c <Semaphore::release()>
c00162e8:	83 c4 10             	add    esp,0x10
c00162eb:	31 c0                	xor    eax,eax
c00162ed:	5b                   	pop    ebx
c00162ee:	5e                   	pop    esi
c00162ef:	5f                   	pop    edi
c00162f0:	c3                   	ret    
c00162f1:	90                   	nop

c00162f2 <Video::putrect(int, int, int, int, unsigned int)>:
c00162f2:	55                   	push   ebp
c00162f3:	57                   	push   edi
c00162f4:	56                   	push   esi
c00162f5:	53                   	push   ebx
c00162f6:	83 ec 1c             	sub    esp,0x1c
c00162f9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00162fd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016301:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016305:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016309:	01 e8                	add    eax,ebp
c001630b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001630f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016313:	01 df                	add    edi,ebx
c0016315:	39 fb                	cmp    ebx,edi
c0016317:	7d 1b                	jge    c0016334 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0016319:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001631d:	7d 12                	jge    c0016331 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c001631f:	8b 16                	mov    edx,DWORD PTR [esi]
c0016321:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016325:	53                   	push   ebx
c0016326:	55                   	push   ebp
c0016327:	45                   	inc    ebp
c0016328:	56                   	push   esi
c0016329:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001632c:	83 c4 10             	add    esp,0x10
c001632f:	eb e8                	jmp    c0016319 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0016331:	43                   	inc    ebx
c0016332:	eb e1                	jmp    c0016315 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0016334:	83 c4 1c             	add    esp,0x1c
c0016337:	5b                   	pop    ebx
c0016338:	5e                   	pop    esi
c0016339:	5f                   	pop    edi
c001633a:	5d                   	pop    ebp
c001633b:	c3                   	ret    

c001633c <Video::blit(unsigned int*, int, int, int, int)>:
c001633c:	55                   	push   ebp
c001633d:	57                   	push   edi
c001633e:	56                   	push   esi
c001633f:	53                   	push   ebx
c0016340:	83 ec 1c             	sub    esp,0x1c
c0016343:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016347:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001634b:	85 c0                	test   eax,eax
c001634d:	79 02                	jns    c0016351 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001634f:	31 c0                	xor    eax,eax
c0016351:	c1 e0 02             	shl    eax,0x2
c0016354:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016358:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001635c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016360:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016364:	39 d8                	cmp    eax,ebx
c0016366:	7e 49                	jle    c00163b1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016368:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001636e:	7c 41                	jl     c00163b1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016370:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016374:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016378:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001637c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016380:	39 f9                	cmp    ecx,edi
c0016382:	7e 22                	jle    c00163a6 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016384:	83 c5 04             	add    ebp,0x4
c0016387:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001638d:	7c 14                	jl     c00163a3 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001638f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016391:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016394:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016398:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001639c:	56                   	push   esi
c001639d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00163a0:	83 c4 10             	add    esp,0x10
c00163a3:	47                   	inc    edi
c00163a4:	eb d2                	jmp    c0016378 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00163a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00163aa:	43                   	inc    ebx
c00163ab:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00163af:	eb ab                	jmp    c001635c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00163b1:	83 c4 1c             	add    esp,0x1c
c00163b4:	5b                   	pop    ebx
c00163b5:	5e                   	pop    esi
c00163b6:	5f                   	pop    edi
c00163b7:	5d                   	pop    ebp
c00163b8:	c3                   	ret    
c00163b9:	90                   	nop

c00163ba <Video::clearScreen(unsigned int)>:
c00163ba:	57                   	push   edi
c00163bb:	56                   	push   esi
c00163bc:	53                   	push   ebx
c00163bd:	31 db                	xor    ebx,ebx
c00163bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00163c3:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00163c9:	7e 1f                	jle    c00163ea <Video::clearScreen(unsigned int)+0x30>
c00163cb:	31 ff                	xor    edi,edi
c00163cd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00163d3:	7e 12                	jle    c00163e7 <Video::clearScreen(unsigned int)+0x2d>
c00163d5:	8b 06                	mov    eax,DWORD PTR [esi]
c00163d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00163db:	53                   	push   ebx
c00163dc:	57                   	push   edi
c00163dd:	47                   	inc    edi
c00163de:	56                   	push   esi
c00163df:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00163e2:	83 c4 10             	add    esp,0x10
c00163e5:	eb e6                	jmp    c00163cd <Video::clearScreen(unsigned int)+0x13>
c00163e7:	43                   	inc    ebx
c00163e8:	eb d9                	jmp    c00163c3 <Video::clearScreen(unsigned int)+0x9>
c00163ea:	5b                   	pop    ebx
c00163eb:	5e                   	pop    esi
c00163ec:	5f                   	pop    edi
c00163ed:	c3                   	ret    

c00163ee <Video::putpixel(int, int, unsigned int)>:
c00163ee:	c7 44 24 04 60 7c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0027c60
c00163f6:	e9 7c be ff ff       	jmp    c0012277 <Dbg::kprintf(char const*, ...)>
c00163fb:	90                   	nop

c00163fc <Video::Video(char const*)>:
c00163fc:	83 ec 0c             	sub    esp,0xc
c00163ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016403:	83 ec 08             	sub    esp,0x8
c0016406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001640a:	50                   	push   eax
c001640b:	e8 62 d4 ff ff       	call   c0013872 <Device::Device(char const*)>
c0016410:	83 c4 10             	add    esp,0x10
c0016413:	ba 78 7c 02 c0       	mov    edx,0xc0027c78
c0016418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001641c:	89 10                	mov    DWORD PTR [eax],edx
c001641e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016422:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001642c:	90                   	nop
c001642d:	83 c4 0c             	add    esp,0xc
c0016430:	c3                   	ret    
c0016431:	90                   	nop

c0016432 <Video::~Video()>:
c0016432:	83 ec 0c             	sub    esp,0xc
c0016435:	ba 78 7c 02 c0       	mov    edx,0xc0027c78
c001643a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001643e:	89 10                	mov    DWORD PTR [eax],edx
c0016440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016444:	83 ec 0c             	sub    esp,0xc
c0016447:	50                   	push   eax
c0016448:	e8 d7 d0 ff ff       	call   c0013524 <Device::~Device()>
c001644d:	83 c4 10             	add    esp,0x10
c0016450:	90                   	nop
c0016451:	83 c4 0c             	add    esp,0xc
c0016454:	c3                   	ret    
c0016455:	90                   	nop

c0016456 <Video::~Video()>:
c0016456:	83 ec 0c             	sub    esp,0xc
c0016459:	83 ec 0c             	sub    esp,0xc
c001645c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016460:	e8 cd ff ff ff       	call   c0016432 <Video::~Video()>
c0016465:	83 c4 10             	add    esp,0x10
c0016468:	83 ec 08             	sub    esp,0x8
c001646b:	68 64 01 00 00       	push   0x164
c0016470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016474:	e8 1e bd ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0016479:	83 c4 10             	add    esp,0x10
c001647c:	83 c4 0c             	add    esp,0xc
c001647f:	c3                   	ret    

c0016480 <Video::isMonochrome()>:
c0016480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016484:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001648a:	c3                   	ret    
c001648b:	90                   	nop

c001648c <Video::getWidth()>:
c001648c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016490:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016496:	c3                   	ret    
c0016497:	90                   	nop

c0016498 <Video::getHeight()>:
c0016498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001649c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00164a2:	c3                   	ret    
c00164a3:	90                   	nop

c00164a4 <Video::drawCursor(int, int, unsigned char*, int)>:
c00164a4:	55                   	push   ebp
c00164a5:	57                   	push   edi
c00164a6:	56                   	push   esi
c00164a7:	53                   	push   ebx
c00164a8:	83 ec 2c             	sub    esp,0x2c
c00164ab:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00164af:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00164b3:	83 f8 01             	cmp    eax,0x1
c00164b6:	19 c9                	sbb    ecx,ecx
c00164b8:	31 db                	xor    ebx,ebx
c00164ba:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00164be:	89 cd                	mov    ebp,ecx
c00164c0:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00164c8:	f7 d5                	not    ebp
c00164ca:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00164d0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00164d4:	01 d8                	add    eax,ebx
c00164d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00164da:	56                   	push   esi
c00164db:	e8 b8 ff ff ff       	call   c0016498 <Video::getHeight()>
c00164e0:	59                   	pop    ecx
c00164e1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00164e5:	7e 70                	jle    c0016557 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00164e7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00164eb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00164ef:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00164f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00164f6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00164fa:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016501:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016505:	89 f8                	mov    eax,edi
c0016507:	83 c0 20             	add    eax,0x20
c001650a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001650e:	56                   	push   esi
c001650f:	e8 78 ff ff ff       	call   c001648c <Video::getWidth()>
c0016514:	5a                   	pop    edx
c0016515:	39 c7                	cmp    edi,eax
c0016517:	7d 34                	jge    c001654d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016519:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001651e:	74 05                	je     c0016525 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016520:	8b 06                	mov    eax,DWORD PTR [esi]
c0016522:	55                   	push   ebp
c0016523:	eb 0d                	jmp    c0016532 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016525:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001652a:	74 12                	je     c001653e <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001652c:	8b 06                	mov    eax,DWORD PTR [esi]
c001652e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016532:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016536:	57                   	push   edi
c0016537:	56                   	push   esi
c0016538:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001653b:	83 c4 10             	add    esp,0x10
c001653e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016542:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016546:	47                   	inc    edi
c0016547:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001654b:	75 c1                	jne    c001650e <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001654d:	43                   	inc    ebx
c001654e:	83 fb 20             	cmp    ebx,0x20
c0016551:	0f 85 79 ff ff ff    	jne    c00164d0 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016557:	83 c4 2c             	add    esp,0x2c
c001655a:	5b                   	pop    ebx
c001655b:	5e                   	pop    esi
c001655c:	5f                   	pop    edi
c001655d:	5d                   	pop    ebp
c001655e:	c3                   	ret    
c001655f:	90                   	nop

c0016560 <ACPI::close(int, int, void*)>:
c0016560:	83 ec 1c             	sub    esp,0x1c
c0016563:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001656b:	74 0a                	je     c0016577 <ACPI::close(int, int, void*)+0x17>
c001656d:	b8 00 00 00 00       	mov    eax,0x0
c0016572:	e9 9a 00 00 00       	jmp    c0016611 <ACPI::close(int, int, void*)+0xb1>
c0016577:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001657c:	75 37                	jne    c00165b5 <ACPI::close(int, int, void*)+0x55>
c001657e:	83 ec 0c             	sub    esp,0xc
c0016581:	68 b0 7c 02 c0       	push   0xc0027cb0
c0016586:	e8 ec bc ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001658b:	83 c4 10             	add    esp,0x10
c001658e:	a1 08 ad 02 c0       	mov    eax,ds:0xc002ad08
c0016593:	85 c0                	test   eax,eax
c0016595:	74 07                	je     c001659e <ACPI::close(int, int, void*)+0x3e>
c0016597:	a1 08 ad 02 c0       	mov    eax,ds:0xc002ad08
c001659c:	ff d0                	call   eax
c001659e:	83 ec 0c             	sub    esp,0xc
c00165a1:	68 64 7d 02 c0       	push   0xc0027d64
c00165a6:	e8 5c 25 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c00165ab:	83 c4 10             	add    esp,0x10
c00165ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165b3:	eb 5c                	jmp    c0016611 <ACPI::close(int, int, void*)+0xb1>
c00165b5:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00165ba:	75 50                	jne    c001660c <ACPI::close(int, int, void*)+0xac>
c00165bc:	a1 04 ad 02 c0       	mov    eax,ds:0xc002ad04
c00165c1:	85 c0                	test   eax,eax
c00165c3:	74 07                	je     c00165cc <ACPI::close(int, int, void*)+0x6c>
c00165c5:	a1 04 ad 02 c0       	mov    eax,ds:0xc002ad04
c00165ca:	ff d0                	call   eax
c00165cc:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00165d1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00165d6:	83 e0 02             	and    eax,0x2
c00165d9:	74 1c                	je     c00165f7 <ACPI::close(int, int, void*)+0x97>
c00165db:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00165e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00165e6:	89 c2                	mov    edx,eax
c00165e8:	ec                   	in     al,dx
c00165e9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00165ed:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00165f1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00165f5:	eb da                	jmp    c00165d1 <ACPI::close(int, int, void*)+0x71>
c00165f7:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00165fe:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016603:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016607:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001660b:	ee                   	out    dx,al
c001660c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016611:	83 c4 1c             	add    esp,0x1c
c0016614:	c3                   	ret    

c0016615 <findRSDP()>:
c0016615:	83 ec 1c             	sub    esp,0x1c
c0016618:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c001661d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016623:	83 e0 04             	and    eax,0x4
c0016626:	84 c0                	test   al,al
c0016628:	75 07                	jne    c0016631 <findRSDP()+0x1c>
c001662a:	b8 00 00 00 00       	mov    eax,0x0
c001662f:	eb 6a                	jmp    c001669b <findRSDP()+0x86>
c0016631:	a1 d0 a6 02 c0       	mov    eax,ds:0xc002a6d0
c0016636:	3d ff 07 00 00       	cmp    eax,0x7ff
c001663b:	7f 1b                	jg     c0016658 <findRSDP()+0x43>
c001663d:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c0016642:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016648:	83 e2 fb             	and    edx,0xfffffffb
c001664b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016651:	b8 00 00 00 00       	mov    eax,0x0
c0016656:	eb 43                	jmp    c001669b <findRSDP()+0x86>
c0016658:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016660:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016668:	77 2c                	ja     c0016696 <findRSDP()+0x81>
c001666a:	83 ec 04             	sub    esp,0x4
c001666d:	6a 08                	push   0x8
c001666f:	68 bd 7c 02 c0       	push   0xc0027cbd
c0016674:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016678:	e8 af 9f fe ff       	call   c000062c <memcmp>
c001667d:	83 c4 10             	add    esp,0x10
c0016680:	85 c0                	test   eax,eax
c0016682:	0f 94 c0             	sete   al
c0016685:	84 c0                	test   al,al
c0016687:	74 06                	je     c001668f <findRSDP()+0x7a>
c0016689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001668d:	eb 0c                	jmp    c001669b <findRSDP()+0x86>
c001668f:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016694:	eb ca                	jmp    c0016660 <findRSDP()+0x4b>
c0016696:	b8 00 00 00 00       	mov    eax,0x0
c001669b:	83 c4 1c             	add    esp,0x1c
c001669e:	c3                   	ret    

c001669f <loadACPITables(unsigned char*)>:
c001669f:	56                   	push   esi
c00166a0:	53                   	push   ebx
c00166a1:	83 ec 44             	sub    esp,0x44
c00166a4:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c00166a9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00166af:	83 e0 04             	and    eax,0x4
c00166b2:	84 c0                	test   al,al
c00166b4:	0f 84 05 02 00 00    	je     c00168bf <loadACPITables(unsigned char*)+0x220>
c00166ba:	a0 20 af 02 c0       	mov    al,ds:0xc002af20
c00166bf:	84 c0                	test   al,al
c00166c1:	74 75                	je     c0016738 <loadACPITables(unsigned char*)+0x99>
c00166c3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00166c7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00166cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00166d2:	83 e8 24             	sub    eax,0x24
c00166d5:	c1 e8 03             	shr    eax,0x3
c00166d8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00166dc:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00166e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00166e8:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00166ec:	0f 8d b2 00 00 00    	jge    c00167a4 <loadACPITables(unsigned char*)+0x105>
c00166f2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00166f6:	83 c0 24             	add    eax,0x24
c00166f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00166fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016701:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016705:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016709:	c1 e0 03             	shl    eax,0x3
c001670c:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0016710:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016714:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0016717:	8b 00                	mov    eax,DWORD PTR [eax]
c0016719:	89 c1                	mov    ecx,eax
c001671b:	a1 0c ad 02 c0       	mov    eax,ds:0xc002ad0c
c0016720:	8d 50 01             	lea    edx,[eax+0x1]
c0016723:	89 15 0c ad 02 c0    	mov    DWORD PTR ds:0xc002ad0c,edx
c0016729:	89 ca                	mov    edx,ecx
c001672b:	89 14 c5 24 ad 02 c0 	mov    DWORD PTR [eax*8-0x3ffd52dc],edx
c0016732:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0016736:	eb ac                	jmp    c00166e4 <loadACPITables(unsigned char*)+0x45>
c0016738:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001673c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016740:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016744:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016747:	83 e8 24             	sub    eax,0x24
c001674a:	c1 e8 02             	shr    eax,0x2
c001674d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016751:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016759:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001675d:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016761:	7d 41                	jge    c00167a4 <loadACPITables(unsigned char*)+0x105>
c0016763:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016767:	83 c0 24             	add    eax,0x24
c001676a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001676e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016772:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016776:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001677a:	c1 e0 02             	shl    eax,0x2
c001677d:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016781:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016785:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016787:	a1 0c ad 02 c0       	mov    eax,ds:0xc002ad0c
c001678c:	8d 50 01             	lea    edx,[eax+0x1]
c001678f:	89 15 0c ad 02 c0    	mov    DWORD PTR ds:0xc002ad0c,edx
c0016795:	89 ca                	mov    edx,ecx
c0016797:	89 14 c5 24 ad 02 c0 	mov    DWORD PTR [eax*8-0x3ffd52dc],edx
c001679e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00167a2:	eb b5                	jmp    c0016759 <loadACPITables(unsigned char*)+0xba>
c00167a4:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00167ac:	a1 0c ad 02 c0       	mov    eax,ds:0xc002ad0c
c00167b1:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c00167b5:	0f 8d 05 01 00 00    	jge    c00168c0 <loadACPITables(unsigned char*)+0x221>
c00167bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00167bf:	8b 04 c5 24 ad 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd52dc]
c00167c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167d6:	25 ff 0f 00 00       	and    eax,0xfff
c00167db:	89 c6                	mov    esi,eax
c00167dd:	e8 53 ac ff ff       	call   c0011435 <Virt::getAKernelVAS()>
c00167e2:	89 c3                	mov    ebx,eax
c00167e4:	83 ec 0c             	sub    esp,0xc
c00167e7:	6a 01                	push   0x1
c00167e9:	e8 b7 aa ff ff       	call   c00112a5 <Virt::allocateKernelVirtualPages(int)>
c00167ee:	83 c4 10             	add    esp,0x10
c00167f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167f5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00167fb:	83 ec 0c             	sub    esp,0xc
c00167fe:	6a 01                	push   0x1
c0016800:	6a 01                	push   0x1
c0016802:	50                   	push   eax
c0016803:	52                   	push   edx
c0016804:	53                   	push   ebx
c0016805:	e8 5a b4 ff ff       	call   c0011c64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001680a:	83 c4 20             	add    esp,0x20
c001680d:	09 f0                	or     eax,esi
c001680f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016813:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016817:	c1 e0 03             	shl    eax,0x3
c001681a:	05 20 ad 02 c0       	add    eax,0xc002ad20
c001681f:	83 ec 04             	sub    esp,0x4
c0016822:	6a 04                	push   0x4
c0016824:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016828:	50                   	push   eax
c0016829:	e8 61 9e fe ff       	call   c000068f <memcpy>
c001682e:	83 c4 10             	add    esp,0x10
c0016831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016835:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001683c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016840:	05 00 10 00 00       	add    eax,0x1000
c0016845:	c1 e8 0c             	shr    eax,0xc
c0016848:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001684c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016850:	89 04 24             	mov    DWORD PTR [esp],eax
c0016853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016857:	25 ff 0f 00 00       	and    eax,0xfff
c001685c:	89 c6                	mov    esi,eax
c001685e:	e8 d2 ab ff ff       	call   c0011435 <Virt::getAKernelVAS()>
c0016863:	89 c3                	mov    ebx,eax
c0016865:	83 ec 0c             	sub    esp,0xc
c0016868:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001686c:	e8 34 aa ff ff       	call   c00112a5 <Virt::allocateKernelVirtualPages(int)>
c0016871:	83 c4 10             	add    esp,0x10
c0016874:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016878:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001687e:	83 ec 0c             	sub    esp,0xc
c0016881:	6a 01                	push   0x1
c0016883:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016887:	50                   	push   eax
c0016888:	52                   	push   edx
c0016889:	53                   	push   ebx
c001688a:	e8 d5 b3 ff ff       	call   c0011c64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001688f:	83 c4 20             	add    esp,0x20
c0016892:	09 f0                	or     eax,esi
c0016894:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016898:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001689b:	83 ec 0c             	sub    esp,0xc
c001689e:	50                   	push   eax
c001689f:	e8 5b ad ff ff       	call   c00115ff <Virt::freeKernelVirtualPages(unsigned long)>
c00168a4:	83 c4 10             	add    esp,0x10
c00168a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00168ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00168af:	89 14 c5 24 ad 02 c0 	mov    DWORD PTR [eax*8-0x3ffd52dc],edx
c00168b6:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c00168ba:	e9 ed fe ff ff       	jmp    c00167ac <loadACPITables(unsigned char*)+0x10d>
c00168bf:	90                   	nop
c00168c0:	83 c4 44             	add    esp,0x44
c00168c3:	5b                   	pop    ebx
c00168c4:	5e                   	pop    esi
c00168c5:	c3                   	ret    

c00168c6 <findRSDT(unsigned char*)>:
c00168c6:	56                   	push   esi
c00168c7:	53                   	push   ebx
c00168c8:	83 ec 44             	sub    esp,0x44
c00168cb:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c00168d0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00168d6:	83 e0 04             	and    eax,0x4
c00168d9:	84 c0                	test   al,al
c00168db:	75 0a                	jne    c00168e7 <findRSDT(unsigned char*)+0x21>
c00168dd:	b8 00 00 00 00       	mov    eax,0x0
c00168e2:	e9 f7 00 00 00       	jmp    c00169de <findRSDT(unsigned char*)+0x118>
c00168e7:	83 ec 04             	sub    esp,0x4
c00168ea:	6a 24                	push   0x24
c00168ec:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00168f0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00168f4:	50                   	push   eax
c00168f5:	e8 95 9d fe ff       	call   c000068f <memcpy>
c00168fa:	83 c4 10             	add    esp,0x10
c00168fd:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016901:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0016905:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001690d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016911:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016915:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016919:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001691d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016921:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016925:	25 ff 0f 00 00       	and    eax,0xfff
c001692a:	89 c6                	mov    esi,eax
c001692c:	e8 04 ab ff ff       	call   c0011435 <Virt::getAKernelVAS()>
c0016931:	89 c3                	mov    ebx,eax
c0016933:	83 ec 0c             	sub    esp,0xc
c0016936:	6a 02                	push   0x2
c0016938:	e8 68 a9 ff ff       	call   c00112a5 <Virt::allocateKernelVirtualPages(int)>
c001693d:	83 c4 10             	add    esp,0x10
c0016940:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016944:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001694a:	83 ec 0c             	sub    esp,0xc
c001694d:	6a 01                	push   0x1
c001694f:	6a 02                	push   0x2
c0016951:	50                   	push   eax
c0016952:	52                   	push   edx
c0016953:	53                   	push   ebx
c0016954:	e8 0b b3 ff ff       	call   c0011c64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016959:	83 c4 20             	add    esp,0x20
c001695c:	09 f0                	or     eax,esi
c001695e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016962:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016966:	25 ff 0f 00 00       	and    eax,0xfff
c001696b:	89 c6                	mov    esi,eax
c001696d:	e8 c3 aa ff ff       	call   c0011435 <Virt::getAKernelVAS()>
c0016972:	89 c3                	mov    ebx,eax
c0016974:	83 ec 0c             	sub    esp,0xc
c0016977:	6a 02                	push   0x2
c0016979:	e8 27 a9 ff ff       	call   c00112a5 <Virt::allocateKernelVirtualPages(int)>
c001697e:	83 c4 10             	add    esp,0x10
c0016981:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016985:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001698b:	83 ec 0c             	sub    esp,0xc
c001698e:	6a 01                	push   0x1
c0016990:	6a 02                	push   0x2
c0016992:	50                   	push   eax
c0016993:	52                   	push   edx
c0016994:	53                   	push   ebx
c0016995:	e8 ca b2 ff ff       	call   c0011c64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001699a:	83 c4 20             	add    esp,0x20
c001699d:	09 f0                	or     eax,esi
c001699f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00169a3:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00169a8:	75 11                	jne    c00169bb <findRSDT(unsigned char*)+0xf5>
c00169aa:	c6 05 20 af 02 c0 00 	mov    BYTE PTR ds:0xc002af20,0x0
c00169b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169b5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00169b9:	eb 1f                	jmp    c00169da <findRSDT(unsigned char*)+0x114>
c00169bb:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00169c0:	75 11                	jne    c00169d3 <findRSDT(unsigned char*)+0x10d>
c00169c2:	c6 05 20 af 02 c0 01 	mov    BYTE PTR ds:0xc002af20,0x1
c00169c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00169cd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00169d1:	eb 07                	jmp    c00169da <findRSDT(unsigned char*)+0x114>
c00169d3:	b8 00 00 00 00       	mov    eax,0x0
c00169d8:	eb 04                	jmp    c00169de <findRSDT(unsigned char*)+0x118>
c00169da:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00169de:	83 c4 44             	add    esp,0x44
c00169e1:	5b                   	pop    ebx
c00169e2:	5e                   	pop    esi
c00169e3:	c3                   	ret    

c00169e4 <findDataTable(unsigned char*, char*)>:
c00169e4:	83 ec 1c             	sub    esp,0x1c
c00169e7:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c00169ec:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00169f2:	83 e0 04             	and    eax,0x4
c00169f5:	84 c0                	test   al,al
c00169f7:	75 07                	jne    c0016a00 <findDataTable(unsigned char*, char*)+0x1c>
c00169f9:	b8 00 00 00 00       	mov    eax,0x0
c00169fe:	eb 7c                	jmp    c0016a7c <findDataTable(unsigned char*, char*)+0x98>
c0016a00:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016a08:	a1 0c ad 02 c0       	mov    eax,ds:0xc002ad0c
c0016a0d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0016a11:	7d 3a                	jge    c0016a4d <findDataTable(unsigned char*, char*)+0x69>
c0016a13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a17:	c1 e0 03             	shl    eax,0x3
c0016a1a:	05 20 ad 02 c0       	add    eax,0xc002ad20
c0016a1f:	83 ec 04             	sub    esp,0x4
c0016a22:	6a 04                	push   0x4
c0016a24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a28:	50                   	push   eax
c0016a29:	e8 fe 9b fe ff       	call   c000062c <memcmp>
c0016a2e:	83 c4 10             	add    esp,0x10
c0016a31:	85 c0                	test   eax,eax
c0016a33:	0f 94 c0             	sete   al
c0016a36:	84 c0                	test   al,al
c0016a38:	74 0d                	je     c0016a47 <findDataTable(unsigned char*, char*)+0x63>
c0016a3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a3e:	8b 04 c5 24 ad 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd52dc]
c0016a45:	eb 35                	jmp    c0016a7c <findDataTable(unsigned char*, char*)+0x98>
c0016a47:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016a4b:	eb bb                	jmp    c0016a08 <findDataTable(unsigned char*, char*)+0x24>
c0016a4d:	a0 20 af 02 c0       	mov    al,ds:0xc002af20
c0016a52:	84 c0                	test   al,al
c0016a54:	74 07                	je     c0016a5d <findDataTable(unsigned char*, char*)+0x79>
c0016a56:	b8 58 00 00 00       	mov    eax,0x58
c0016a5b:	eb 05                	jmp    c0016a62 <findDataTable(unsigned char*, char*)+0x7e>
c0016a5d:	b8 52 00 00 00       	mov    eax,0x52
c0016a62:	83 ec 04             	sub    esp,0x4
c0016a65:	50                   	push   eax
c0016a66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a6a:	68 88 7d 02 c0       	push   0xc0027d88
c0016a6f:	e8 03 b8 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0016a74:	83 c4 10             	add    esp,0x10
c0016a77:	b8 00 00 00 00       	mov    eax,0x0
c0016a7c:	83 c4 1c             	add    esp,0x1c
c0016a7f:	c3                   	ret    

c0016a80 <scanMADT()>:
c0016a80:	53                   	push   ebx
c0016a81:	83 ec 38             	sub    esp,0x38
c0016a84:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c0016a89:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016a8f:	83 e0 04             	and    eax,0x4
c0016a92:	84 c0                	test   al,al
c0016a94:	0f 84 63 04 00 00    	je     c0016efd <scanMADT()+0x47d>
c0016a9a:	e8 76 fb ff ff       	call   c0016615 <findRSDP()>
c0016a9f:	a3 2c af 02 c0       	mov    ds:0xc002af2c,eax
c0016aa4:	a1 2c af 02 c0       	mov    eax,ds:0xc002af2c
c0016aa9:	85 c0                	test   eax,eax
c0016aab:	75 19                	jne    c0016ac6 <scanMADT()+0x46>
c0016aad:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c0016ab2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016ab8:	83 e2 fb             	and    edx,0xfffffffb
c0016abb:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016ac1:	e9 3b 04 00 00       	jmp    c0016f01 <scanMADT()+0x481>
c0016ac6:	a1 2c af 02 c0       	mov    eax,ds:0xc002af2c
c0016acb:	83 ec 0c             	sub    esp,0xc
c0016ace:	50                   	push   eax
c0016acf:	e8 f2 fd ff ff       	call   c00168c6 <findRSDT(unsigned char*)>
c0016ad4:	83 c4 10             	add    esp,0x10
c0016ad7:	a3 28 af 02 c0       	mov    ds:0xc002af28,eax
c0016adc:	a1 28 af 02 c0       	mov    eax,ds:0xc002af28
c0016ae1:	85 c0                	test   eax,eax
c0016ae3:	75 19                	jne    c0016afe <scanMADT()+0x7e>
c0016ae5:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c0016aea:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016af0:	83 e2 fb             	and    edx,0xfffffffb
c0016af3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016af9:	e9 03 04 00 00       	jmp    c0016f01 <scanMADT()+0x481>
c0016afe:	a1 28 af 02 c0       	mov    eax,ds:0xc002af28
c0016b03:	83 ec 0c             	sub    esp,0xc
c0016b06:	50                   	push   eax
c0016b07:	e8 93 fb ff ff       	call   c001669f <loadACPITables(unsigned char*)>
c0016b0c:	83 c4 10             	add    esp,0x10
c0016b0f:	a1 28 af 02 c0       	mov    eax,ds:0xc002af28
c0016b14:	83 ec 08             	sub    esp,0x8
c0016b17:	68 c6 7c 02 c0       	push   0xc0027cc6
c0016b1c:	50                   	push   eax
c0016b1d:	e8 c2 fe ff ff       	call   c00169e4 <findDataTable(unsigned char*, char*)>
c0016b22:	83 c4 10             	add    esp,0x10
c0016b25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016b29:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0016b2e:	75 19                	jne    c0016b49 <scanMADT()+0xc9>
c0016b30:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c0016b35:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016b3b:	83 e2 fe             	and    edx,0xfffffffe
c0016b3e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016b44:	e9 b8 03 00 00       	jmp    c0016f01 <scanMADT()+0x481>
c0016b49:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016b51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016b55:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016b58:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0016b5c:	0f 87 9f 03 00 00    	ja     c0016f01 <scanMADT()+0x481>
c0016b62:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0016b6a:	0f 87 91 03 00 00    	ja     c0016f01 <scanMADT()+0x481>
c0016b70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016b74:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016b78:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016b7c:	8d 50 01             	lea    edx,[eax+0x1]
c0016b7f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016b83:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016b87:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016b8b:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0016b8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016b93:	8d 50 01             	lea    edx,[eax+0x1]
c0016b96:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016b9a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016b9e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016ba2:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0016ba6:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0016bab:	0f 86 4f 03 00 00    	jbe    c0016f00 <scanMADT()+0x480>
c0016bb1:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0016bb6:	75 57                	jne    c0016c0f <scanMADT()+0x18f>
c0016bb8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016bbc:	8d 50 01             	lea    edx,[eax+0x1]
c0016bbf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016bc3:	8a 15 20 b1 02 c0    	mov    dl,BYTE PTR ds:0xc002b120
c0016bc9:	0f b6 d2             	movzx  edx,dl
c0016bcc:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0016bd0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016bd4:	88 82 60 b1 02 c0    	mov    BYTE PTR [edx-0x3ffd4ea0],al
c0016bda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016bde:	8d 50 01             	lea    edx,[eax+0x1]
c0016be1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016be5:	8a 15 20 b1 02 c0    	mov    dl,BYTE PTR ds:0xc002b120
c0016beb:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016bee:	88 0d 20 b1 02 c0    	mov    BYTE PTR ds:0xc002b120,cl
c0016bf4:	0f b6 d2             	movzx  edx,dl
c0016bf7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0016bfb:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016bff:	88 82 40 b1 02 c0    	mov    BYTE PTR [edx-0x3ffd4ec0],al
c0016c05:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0016c0a:	e9 da 02 00 00       	jmp    c0016ee9 <scanMADT()+0x469>
c0016c0f:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0016c14:	0f 85 14 01 00 00    	jne    c0016d2e <scanMADT()+0x2ae>
c0016c1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016c1e:	8d 50 01             	lea    edx,[eax+0x1]
c0016c21:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016c25:	8a 15 e0 af 02 c0    	mov    dl,BYTE PTR ds:0xc002afe0
c0016c2b:	0f b6 d2             	movzx  edx,dl
c0016c2e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0016c32:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016c36:	88 82 00 b0 02 c0    	mov    BYTE PTR [edx-0x3ffd5000],al
c0016c3c:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0016c40:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016c44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016c48:	01 d0                	add    eax,edx
c0016c4a:	83 c0 2c             	add    eax,0x2c
c0016c4d:	8a 00                	mov    al,BYTE PTR [eax]
c0016c4f:	0f b6 d0             	movzx  edx,al
c0016c52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016c56:	8d 48 01             	lea    ecx,[eax+0x1]
c0016c59:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016c5d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016c61:	0f b6 c0             	movzx  eax,al
c0016c64:	c1 e0 08             	shl    eax,0x8
c0016c67:	89 d1                	mov    ecx,edx
c0016c69:	09 c1                	or     ecx,eax
c0016c6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016c6f:	8d 50 02             	lea    edx,[eax+0x2]
c0016c72:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016c76:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016c7a:	0f b6 c0             	movzx  eax,al
c0016c7d:	c1 e0 10             	shl    eax,0x10
c0016c80:	09 c1                	or     ecx,eax
c0016c82:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016c86:	8d 50 03             	lea    edx,[eax+0x3]
c0016c89:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016c8d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016c91:	0f b6 c0             	movzx  eax,al
c0016c94:	c1 e0 18             	shl    eax,0x18
c0016c97:	09 c1                	or     ecx,eax
c0016c99:	89 ca                	mov    edx,ecx
c0016c9b:	a0 e0 af 02 c0       	mov    al,ds:0xc002afe0
c0016ca0:	0f b6 c0             	movzx  eax,al
c0016ca3:	89 14 85 20 b0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4fe0],edx
c0016caa:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0016caf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016cb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016cb7:	01 d0                	add    eax,edx
c0016cb9:	83 c0 2c             	add    eax,0x2c
c0016cbc:	8a 00                	mov    al,BYTE PTR [eax]
c0016cbe:	0f b6 d0             	movzx  edx,al
c0016cc1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016cc5:	8d 48 01             	lea    ecx,[eax+0x1]
c0016cc8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016ccc:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016cd0:	0f b6 c0             	movzx  eax,al
c0016cd3:	c1 e0 08             	shl    eax,0x8
c0016cd6:	89 d1                	mov    ecx,edx
c0016cd8:	09 c1                	or     ecx,eax
c0016cda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016cde:	8d 50 02             	lea    edx,[eax+0x2]
c0016ce1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016ce5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016ce9:	0f b6 c0             	movzx  eax,al
c0016cec:	c1 e0 10             	shl    eax,0x10
c0016cef:	09 c1                	or     ecx,eax
c0016cf1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016cf5:	8d 50 03             	lea    edx,[eax+0x3]
c0016cf8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016cfc:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016d00:	0f b6 c0             	movzx  eax,al
c0016d03:	c1 e0 18             	shl    eax,0x18
c0016d06:	09 c1                	or     ecx,eax
c0016d08:	89 ca                	mov    edx,ecx
c0016d0a:	a0 e0 af 02 c0       	mov    al,ds:0xc002afe0
c0016d0f:	0f b6 c0             	movzx  eax,al
c0016d12:	89 14 85 a0 b0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4f60],edx
c0016d19:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0016d1e:	a0 e0 af 02 c0       	mov    al,ds:0xc002afe0
c0016d23:	40                   	inc    eax
c0016d24:	a2 e0 af 02 c0       	mov    ds:0xc002afe0,al
c0016d29:	e9 bb 01 00 00       	jmp    c0016ee9 <scanMADT()+0x469>
c0016d2e:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0016d33:	0f 85 e9 00 00 00    	jne    c0016e22 <scanMADT()+0x3a2>
c0016d39:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016d3d:	8d 50 01             	lea    edx,[eax+0x1]
c0016d40:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016d44:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016d48:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016d4c:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0016d50:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016d54:	8d 50 01             	lea    edx,[eax+0x1]
c0016d57:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016d5b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016d5f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016d63:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0016d67:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016d6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016d6f:	01 d0                	add    eax,edx
c0016d71:	83 c0 2c             	add    eax,0x2c
c0016d74:	8a 00                	mov    al,BYTE PTR [eax]
c0016d76:	0f b6 d0             	movzx  edx,al
c0016d79:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016d7d:	8d 48 01             	lea    ecx,[eax+0x1]
c0016d80:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016d84:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016d88:	0f b6 c0             	movzx  eax,al
c0016d8b:	c1 e0 08             	shl    eax,0x8
c0016d8e:	89 d1                	mov    ecx,edx
c0016d90:	09 c1                	or     ecx,eax
c0016d92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016d96:	8d 50 02             	lea    edx,[eax+0x2]
c0016d99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016d9d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016da1:	0f b6 c0             	movzx  eax,al
c0016da4:	c1 e0 10             	shl    eax,0x10
c0016da7:	09 c1                	or     ecx,eax
c0016da9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016dad:	8d 50 03             	lea    edx,[eax+0x3]
c0016db0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016db4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016db8:	0f b6 c0             	movzx  eax,al
c0016dbb:	c1 e0 18             	shl    eax,0x18
c0016dbe:	09 c8                	or     eax,ecx
c0016dc0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016dc4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0016dc9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016dcd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016dd1:	01 d0                	add    eax,edx
c0016dd3:	83 c0 2c             	add    eax,0x2c
c0016dd6:	8a 00                	mov    al,BYTE PTR [eax]
c0016dd8:	0f b6 c0             	movzx  eax,al
c0016ddb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016ddf:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016de2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016de6:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0016dea:	0f b6 d2             	movzx  edx,dl
c0016ded:	c1 e2 08             	shl    edx,0x8
c0016df0:	09 d0                	or     eax,edx
c0016df2:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0016df7:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0016dfc:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0016e01:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016e05:	88 90 60 99 02 c0    	mov    BYTE PTR [eax-0x3ffd66a0],dl
c0016e0b:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0016e10:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0016e15:	66 89 84 12 c0 af 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd5040],ax
c0016e1d:	e9 c7 00 00 00       	jmp    c0016ee9 <scanMADT()+0x469>
c0016e22:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0016e27:	0f 85 b0 00 00 00    	jne    c0016edd <scanMADT()+0x45d>
c0016e2d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016e31:	8d 50 01             	lea    edx,[eax+0x1]
c0016e34:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016e38:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016e3c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016e40:	0f b6 c0             	movzx  eax,al
c0016e43:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e47:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016e4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016e4f:	01 d0                	add    eax,edx
c0016e51:	83 c0 2c             	add    eax,0x2c
c0016e54:	8a 00                	mov    al,BYTE PTR [eax]
c0016e56:	0f b6 d0             	movzx  edx,al
c0016e59:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016e5d:	8d 48 01             	lea    ecx,[eax+0x1]
c0016e60:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016e64:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016e68:	0f b6 c0             	movzx  eax,al
c0016e6b:	c1 e0 08             	shl    eax,0x8
c0016e6e:	09 d0                	or     eax,edx
c0016e70:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016e74:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0016e79:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016e7d:	8d 50 01             	lea    edx,[eax+0x1]
c0016e80:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016e84:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016e88:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016e8c:	0f b6 c0             	movzx  eax,al
c0016e8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e97:	c1 e0 08             	shl    eax,0x8
c0016e9a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016e9e:	89 c1                	mov    ecx,eax
c0016ea0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ea4:	c1 e0 18             	shl    eax,0x18
c0016ea7:	89 c3                	mov    ebx,eax
c0016ea9:	a1 30 af 02 c0       	mov    eax,ds:0xc002af30
c0016eae:	8d 50 01             	lea    edx,[eax+0x1]
c0016eb1:	89 15 30 af 02 c0    	mov    DWORD PTR ds:0xc002af30,edx
c0016eb7:	09 d9                	or     ecx,ebx
c0016eb9:	89 ca                	mov    edx,ecx
c0016ebb:	89 14 85 40 af 02 c0 	mov    DWORD PTR [eax*4-0x3ffd50c0],edx
c0016ec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016ec6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016eca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ece:	68 b8 7d 02 c0       	push   0xc0027db8
c0016ed3:	e8 9f b3 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0016ed8:	83 c4 10             	add    esp,0x10
c0016edb:	eb 0c                	jmp    c0016ee9 <scanMADT()+0x469>
c0016edd:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0016ee2:	75 05                	jne    c0016ee9 <scanMADT()+0x469>
c0016ee4:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0016ee9:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0016eee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ef2:	01 d0                	add    eax,edx
c0016ef4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016ef8:	e9 54 fc ff ff       	jmp    c0016b51 <scanMADT()+0xd1>
c0016efd:	90                   	nop
c0016efe:	eb 01                	jmp    c0016f01 <scanMADT()+0x481>
c0016f00:	90                   	nop
c0016f01:	83 c4 38             	add    esp,0x38
c0016f04:	5b                   	pop    ebx
c0016f05:	c3                   	ret    

c0016f06 <ACPI::ACPI()>:
c0016f06:	83 ec 0c             	sub    esp,0xc
c0016f09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f0d:	83 ec 08             	sub    esp,0x8
c0016f10:	68 cb 7c 02 c0       	push   0xc0027ccb
c0016f15:	50                   	push   eax
c0016f16:	e8 57 c9 ff ff       	call   c0013872 <Device::Device(char const*)>
c0016f1b:	83 c4 10             	add    esp,0x10
c0016f1e:	ba 90 7e 02 c0       	mov    edx,0xc0027e90
c0016f23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f27:	89 10                	mov    DWORD PTR [eax],edx
c0016f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f2d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0016f34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f38:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0016f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f46:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0016f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f54:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0016f5b:	e8 20 fb ff ff       	call   c0016a80 <scanMADT()>
c0016f60:	90                   	nop
c0016f61:	83 c4 0c             	add    esp,0xc
c0016f64:	c3                   	ret    
c0016f65:	90                   	nop

c0016f66 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0016f66:	83 ec 2c             	sub    esp,0x2c
c0016f69:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016f6d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f71:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0016f75:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016f79:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0016f7e:	88 d0                	mov    al,dl
c0016f80:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016f84:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0016f89:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016f91:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f95:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016f9b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0016f9f:	0f 8d 97 00 00 00    	jge    c001703c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0016fa5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fa9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016fad:	83 c2 2a             	add    edx,0x2a
c0016fb0:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0016fb4:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0016fb9:	75 78                	jne    c0017033 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016fbb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fbf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016fc3:	83 c2 2a             	add    edx,0x2a
c0016fc6:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0016fca:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0016fce:	75 63                	jne    c0017033 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016fd0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0016fd5:	74 3a                	je     c0017011 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0016fd7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fdb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016fdf:	83 c2 2a             	add    edx,0x2a
c0016fe2:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0016fe6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016fea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016fed:	39 c2                	cmp    edx,eax
c0016fef:	74 10                	je     c0017001 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0016ff1:	83 ec 0c             	sub    esp,0xc
c0016ff4:	68 f4 7d 02 c0       	push   0xc0027df4
c0016ff9:	e8 09 1b 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c0016ffe:	83 c4 10             	add    esp,0x10
c0017001:	83 ec 0c             	sub    esp,0xc
c0017004:	68 d0 7c 02 c0       	push   0xc0027cd0
c0017009:	e8 f9 1a 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c001700e:	83 c4 10             	add    esp,0x10
c0017011:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017015:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017019:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001701d:	83 c2 2a             	add    edx,0x2a
c0017020:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017024:	8b 02                	mov    eax,DWORD PTR [edx]
c0017026:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017029:	89 01                	mov    DWORD PTR [ecx],eax
c001702b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001702e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017033:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017037:	e9 55 ff ff ff       	jmp    c0016f91 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001703c:	90                   	nop
c001703d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017041:	83 c4 2c             	add    esp,0x2c
c0017044:	c2 04 00             	ret    0x4
c0017047:	90                   	nop

c0017048 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017048:	56                   	push   esi
c0017049:	53                   	push   ebx
c001704a:	83 ec 14             	sub    esp,0x14
c001704d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017051:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017055:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017059:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001705e:	88 c8                	mov    al,cl
c0017060:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017064:	88 d0                	mov    al,dl
c0017066:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001706a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001706e:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0017074:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017078:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c001707e:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0017083:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0017088:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001708d:	83 ec 04             	sub    esp,0x4
c0017090:	56                   	push   esi
c0017091:	53                   	push   ebx
c0017092:	51                   	push   ecx
c0017093:	52                   	push   edx
c0017094:	50                   	push   eax
c0017095:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017099:	68 24 7e 02 c0       	push   0xc0027e24
c001709e:	e8 d4 b1 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00170a3:	83 c4 20             	add    esp,0x20
c00170a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170aa:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00170b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b4:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00170b7:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00170bb:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00170bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c3:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00170c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00170cd:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00170d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170d4:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00170d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170dd:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00170e3:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00170e7:	8d 48 01             	lea    ecx,[eax+0x1]
c00170ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ee:	83 c2 2a             	add    edx,0x2a
c00170f1:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00170f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170f9:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00170ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017103:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017106:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001710a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001710e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017112:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017118:	8d 50 01             	lea    edx,[eax+0x1]
c001711b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001711f:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0017125:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017129:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001712f:	3d 00 08 00 00       	cmp    eax,0x800
c0017134:	75 10                	jne    c0017146 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0017136:	83 ec 0c             	sub    esp,0xc
c0017139:	68 df 7c 02 c0       	push   0xc0027cdf
c001713e:	e8 c4 19 00 00       	call   c0018b07 <Krnl::panic(char const*)>
c0017143:	83 c4 10             	add    esp,0x10
c0017146:	90                   	nop
c0017147:	83 c4 14             	add    esp,0x14
c001714a:	5b                   	pop    ebx
c001714b:	5e                   	pop    esi
c001714c:	c3                   	ret    
c001714d:	90                   	nop

c001714e <ACPI::setScreenBrightnessLevel(void*, int)>:
c001714e:	b8 00 00 00 00       	mov    eax,0x0
c0017153:	c3                   	ret    

c0017154 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017154:	83 ec 1c             	sub    esp,0x1c
c0017157:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001715b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001715e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017162:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c0017167:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001716c:	83 ec 08             	sub    esp,0x8
c001716f:	52                   	push   edx
c0017170:	50                   	push   eax
c0017171:	e8 08 76 ff ff       	call   c000e77e <Computer::readCMOS(unsigned char)>
c0017176:	83 c4 10             	add    esp,0x10
c0017179:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001717d:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c0017182:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017187:	83 ec 04             	sub    esp,0x4
c001718a:	6a 01                	push   0x1
c001718c:	52                   	push   edx
c001718d:	50                   	push   eax
c001718e:	e8 01 77 ff ff       	call   c000e894 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017193:	83 c4 10             	add    esp,0x10
c0017196:	90                   	nop
c0017197:	83 c4 1c             	add    esp,0x1c
c001719a:	c3                   	ret    
c001719b:	90                   	nop

c001719c <ACPI::open(int, int, void*)>:
c001719c:	53                   	push   ebx
c001719d:	83 ec 18             	sub    esp,0x18
c00171a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171a4:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00171ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171af:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00171b5:	84 c0                	test   al,al
c00171b7:	74 60                	je     c0017219 <ACPI::open(int, int, void*)+0x7d>
c00171b9:	83 ec 0c             	sub    esp,0xc
c00171bc:	68 58 01 00 00       	push   0x158
c00171c1:	e8 c2 af ff ff       	call   c0012188 <operator new(unsigned long)>
c00171c6:	83 c4 10             	add    esp,0x10
c00171c9:	89 c3                	mov    ebx,eax
c00171cb:	83 ec 0c             	sub    esp,0xc
c00171ce:	53                   	push   ebx
c00171cf:	e8 12 90 00 00       	call   c00201e6 <PCI::PCI()>
c00171d4:	83 c4 10             	add    esp,0x10
c00171d7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00171db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171df:	83 ec 08             	sub    esp,0x8
c00171e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00171e6:	50                   	push   eax
c00171e7:	e8 96 c4 ff ff       	call   c0013682 <Device::addChild(Device*)>
c00171ec:	83 c4 10             	add    esp,0x10
c00171ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00171f5:	83 c0 08             	add    eax,0x8
c00171f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00171fa:	6a 00                	push   0x0
c00171fc:	6a 00                	push   0x0
c00171fe:	6a 00                	push   0x0
c0017200:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017204:	ff d0                	call   eax
c0017206:	83 c4 10             	add    esp,0x10
c0017209:	83 ec 0c             	sub    esp,0xc
c001720c:	68 fc 7c 02 c0       	push   0xc0027cfc
c0017211:	e8 61 b0 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017216:	83 c4 10             	add    esp,0x10
c0017219:	83 ec 0c             	sub    esp,0xc
c001721c:	68 07 7d 02 c0       	push   0xc0027d07
c0017221:	e8 82 37 00 00       	call   c001a9a8 <Thr::loadKernelSymbolTable(char const*)>
c0017226:	83 c4 10             	add    esp,0x10
c0017229:	8b 1d 88 a6 02 c0    	mov    ebx,DWORD PTR ds:0xc002a688
c001722f:	83 ec 08             	sub    esp,0x8
c0017232:	6a 01                	push   0x1
c0017234:	68 25 7d 02 c0       	push   0xc0027d25
c0017239:	e8 4c 42 00 00       	call   c001b48a <Thr::loadDLL(char const*, bool)>
c001723e:	83 c4 10             	add    esp,0x10
c0017241:	83 ec 08             	sub    esp,0x8
c0017244:	53                   	push   ebx
c0017245:	50                   	push   eax
c0017246:	e8 05 44 00 00       	call   c001b650 <Thr::executeDLL(unsigned long, void*)>
c001724b:	83 c4 10             	add    esp,0x10
c001724e:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c0017253:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017259:	83 e0 04             	and    eax,0x4
c001725c:	84 c0                	test   al,al
c001725e:	0f 84 cf 00 00 00    	je     c0017333 <ACPI::open(int, int, void*)+0x197>
c0017264:	83 ec 0c             	sub    esp,0xc
c0017267:	68 14 01 00 00       	push   0x114
c001726c:	e8 17 af ff ff       	call   c0012188 <operator new(unsigned long)>
c0017271:	83 c4 10             	add    esp,0x10
c0017274:	89 c3                	mov    ebx,eax
c0017276:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c001727b:	83 ec 04             	sub    esp,0x4
c001727e:	50                   	push   eax
c001727f:	68 42 7d 02 c0       	push   0xc0027d42
c0017284:	53                   	push   ebx
c0017285:	e8 1c b5 ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c001728a:	83 c4 10             	add    esp,0x10
c001728d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017291:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017296:	74 17                	je     c00172af <ACPI::open(int, int, void*)+0x113>
c0017298:	83 ec 0c             	sub    esp,0xc
c001729b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001729f:	e8 d4 b7 ff ff       	call   c0012a78 <File::exists()>
c00172a4:	83 c4 10             	add    esp,0x10
c00172a7:	84 c0                	test   al,al
c00172a9:	74 04                	je     c00172af <ACPI::open(int, int, void*)+0x113>
c00172ab:	b0 01                	mov    al,0x1
c00172ad:	eb 02                	jmp    c00172b1 <ACPI::open(int, int, void*)+0x115>
c00172af:	b0 00                	mov    al,0x0
c00172b1:	84 c0                	test   al,al
c00172b3:	74 25                	je     c00172da <ACPI::open(int, int, void*)+0x13e>
c00172b5:	8b 1d 88 a6 02 c0    	mov    ebx,DWORD PTR ds:0xc002a688
c00172bb:	83 ec 08             	sub    esp,0x8
c00172be:	6a 01                	push   0x1
c00172c0:	68 42 7d 02 c0       	push   0xc0027d42
c00172c5:	e8 c0 41 00 00       	call   c001b48a <Thr::loadDLL(char const*, bool)>
c00172ca:	83 c4 10             	add    esp,0x10
c00172cd:	83 ec 08             	sub    esp,0x8
c00172d0:	53                   	push   ebx
c00172d1:	50                   	push   eax
c00172d2:	e8 79 43 00 00       	call   c001b650 <Thr::executeDLL(unsigned long, void*)>
c00172d7:	83 c4 10             	add    esp,0x10
c00172da:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00172df:	74 1e                	je     c00172ff <ACPI::open(int, int, void*)+0x163>
c00172e1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00172e6:	74 17                	je     c00172ff <ACPI::open(int, int, void*)+0x163>
c00172e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00172ee:	83 c0 08             	add    eax,0x8
c00172f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00172f3:	83 ec 0c             	sub    esp,0xc
c00172f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00172fa:	ff d0                	call   eax
c00172fc:	83 c4 10             	add    esp,0x10
c00172ff:	a1 28 af 02 c0       	mov    eax,ds:0xc002af28
c0017304:	83 ec 08             	sub    esp,0x8
c0017307:	68 5f 7d 02 c0       	push   0xc0027d5f
c001730c:	50                   	push   eax
c001730d:	e8 d2 f6 ff ff       	call   c00169e4 <findDataTable(unsigned char*, char*)>
c0017312:	83 c4 10             	add    esp,0x10
c0017315:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017319:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001731e:	74 13                	je     c0017333 <ACPI::open(int, int, void*)+0x197>
c0017320:	83 ec 08             	sub    esp,0x8
c0017323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017327:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001732b:	e8 24 fe ff ff       	call   c0017154 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017330:	83 c4 10             	add    esp,0x10
c0017333:	b8 00 00 00 00       	mov    eax,0x0
c0017338:	83 c4 18             	add    esp,0x18
c001733b:	5b                   	pop    ebx
c001733c:	c3                   	ret    
c001733d:	90                   	nop

c001733e <ACPI::sleep()>:
c001733e:	83 ec 0c             	sub    esp,0xc
c0017341:	a1 00 ad 02 c0       	mov    eax,ds:0xc002ad00
c0017346:	85 c0                	test   eax,eax
c0017348:	74 07                	je     c0017351 <ACPI::sleep()+0x13>
c001734a:	a1 00 ad 02 c0       	mov    eax,ds:0xc002ad00
c001734f:	ff d0                	call   eax
c0017351:	90                   	nop
c0017352:	83 c4 0c             	add    esp,0xc
c0017355:	c3                   	ret    

c0017356 <CPU::close(int, int, void*)>:
c0017356:	31 c0                	xor    eax,eax
c0017358:	c3                   	ret    
c0017359:	90                   	nop

c001735a <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001735a:	55                   	push   ebp
c001735b:	57                   	push   edi
c001735c:	56                   	push   esi
c001735d:	53                   	push   ebx
c001735e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017362:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017366:	89 ce                	mov    esi,ecx
c0017368:	89 d5                	mov    ebp,edx
c001736a:	80 f9 04             	cmp    cl,0x4
c001736d:	75 28                	jne    c0017397 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001736f:	8d 42 f9             	lea    eax,[edx-0x7]
c0017372:	3c 03                	cmp    al,0x3
c0017374:	0f 86 63 01 00 00    	jbe    c00174dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001737a:	80 fa 03             	cmp    dl,0x3
c001737d:	0f 84 5a 01 00 00    	je     c00174dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017383:	8d 7a f2             	lea    edi,[edx-0xe]
c0017386:	b8 30 9b 02 c0       	mov    eax,0xc0029b30
c001738b:	89 fb                	mov    ebx,edi
c001738d:	80 fb 01             	cmp    bl,0x1
c0017390:	77 4e                	ja     c00173e0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017392:	e9 52 01 00 00       	jmp    c00174e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017397:	80 f9 05             	cmp    cl,0x5
c001739a:	75 4d                	jne    c00173e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001739c:	b8 40 9b 02 c0       	mov    eax,0xc0029b40
c00173a1:	80 fa 03             	cmp    dl,0x3
c00173a4:	0f 86 3f 01 00 00    	jbe    c00174e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173aa:	8d 7a fa             	lea    edi,[edx-0x6]
c00173ad:	b8 50 9b 02 c0       	mov    eax,0xc0029b50
c00173b2:	89 fb                	mov    ebx,edi
c00173b4:	80 fb 01             	cmp    bl,0x1
c00173b7:	0f 86 2c 01 00 00    	jbe    c00174e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173bd:	b8 60 9b 02 c0       	mov    eax,0xc0029b60
c00173c2:	80 fa 08             	cmp    dl,0x8
c00173c5:	0f 84 1e 01 00 00    	je     c00174e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173cb:	89 d7                	mov    edi,edx
c00173cd:	b8 70 9b 02 c0       	mov    eax,0xc0029b70
c00173d2:	83 e7 fb             	and    edi,0xfffffffb
c00173d5:	89 fb                	mov    ebx,edi
c00173d7:	80 fb 09             	cmp    bl,0x9
c00173da:	0f 84 09 01 00 00    	je     c00174e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173e0:	31 c0                	xor    eax,eax
c00173e2:	89 eb                	mov    ebx,ebp
c00173e4:	0f b6 fb             	movzx  edi,bl
c00173e7:	eb 30                	jmp    c0017419 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00173e9:	31 c0                	xor    eax,eax
c00173eb:	80 f9 06             	cmp    cl,0x6
c00173ee:	75 f2                	jne    c00173e2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00173f0:	80 fa 0a             	cmp    dl,0xa
c00173f3:	77 ed                	ja     c00173e2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00173f5:	bf de 05 00 00       	mov    edi,0x5de
c00173fa:	0f a3 d7             	bt     edi,edx
c00173fd:	73 e3                	jae    c00173e2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00173ff:	b8 80 9b 02 c0       	mov    eax,0xc0029b80
c0017404:	e9 e0 00 00 00       	jmp    c00174e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017409:	39 c7                	cmp    edi,eax
c001740b:	0f 84 d3 00 00 00    	je     c00174e4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017411:	40                   	inc    eax
c0017412:	3d d0 00 00 00       	cmp    eax,0xd0
c0017417:	74 09                	je     c0017422 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0017419:	89 f3                	mov    ebx,esi
c001741b:	80 fb 0f             	cmp    bl,0xf
c001741e:	75 f1                	jne    c0017411 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0017420:	eb e7                	jmp    c0017409 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0017422:	80 f9 10             	cmp    cl,0x10
c0017425:	75 14                	jne    c001743b <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0017427:	8d 42 fc             	lea    eax,[edx-0x4]
c001742a:	83 e0 fb             	and    eax,0xfffffffb
c001742d:	3c 02                	cmp    al,0x2
c001742f:	76 34                	jbe    c0017465 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0017431:	b8 a6 81 02 c0       	mov    eax,0xc00281a6
c0017436:	80 fa 02             	cmp    dl,0x2
c0017439:	eb 24                	jmp    c001745f <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001743b:	80 f9 11             	cmp    cl,0x11
c001743e:	75 13                	jne    c0017453 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0017440:	b8 a6 81 02 c0       	mov    eax,0xc00281a6
c0017445:	80 fa 03             	cmp    dl,0x3
c0017448:	0f 85 9b 00 00 00    	jne    c00174e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001744e:	e9 91 00 00 00       	jmp    c00174e4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017453:	80 f9 12             	cmp    cl,0x12
c0017456:	75 14                	jne    c001746c <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0017458:	b8 a6 81 02 c0       	mov    eax,0xc00281a6
c001745d:	fe ca                	dec    dl
c001745f:	0f 85 84 00 00 00    	jne    c00174e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017465:	b8 a0 9b 02 c0       	mov    eax,0xc0029ba0
c001746a:	eb 7d                	jmp    c00174e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001746c:	80 f9 14             	cmp    cl,0x14
c001746f:	75 12                	jne    c0017483 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0017471:	4a                   	dec    edx
c0017472:	b8 a6 81 02 c0       	mov    eax,0xc00281a6
c0017477:	80 fa 01             	cmp    dl,0x1
c001747a:	77 6d                	ja     c00174e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001747c:	b8 b0 9b 02 c0       	mov    eax,0xc0029bb0
c0017481:	eb 66                	jmp    c00174e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017483:	80 f9 15             	cmp    cl,0x15
c0017486:	75 31                	jne    c00174b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017488:	b8 c0 9b 02 c0       	mov    eax,0xc0029bc0
c001748d:	80 fa 01             	cmp    dl,0x1
c0017490:	74 57                	je     c00174e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017492:	b8 a6 81 02 c0       	mov    eax,0xc00281a6
c0017497:	80 fa 13             	cmp    dl,0x13
c001749a:	76 0c                	jbe    c00174a8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001749c:	80 fa 30             	cmp    dl,0x30
c001749f:	75 48                	jne    c00174e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00174a1:	b8 e0 9b 02 c0       	mov    eax,0xc0029be0
c00174a6:	eb 41                	jmp    c00174e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00174a8:	b9 04 00 09 00       	mov    ecx,0x90004
c00174ad:	0f a3 d1             	bt     ecx,edx
c00174b0:	73 37                	jae    c00174e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00174b2:	b8 d0 9b 02 c0       	mov    eax,0xc0029bd0
c00174b7:	eb 30                	jmp    c00174e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00174b9:	b8 a6 81 02 c0       	mov    eax,0xc00281a6
c00174be:	80 f9 16             	cmp    cl,0x16
c00174c1:	75 26                	jne    c00174e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00174c3:	b8 f0 9b 02 c0       	mov    eax,0xc0029bf0
c00174c8:	84 d2                	test   dl,dl
c00174ca:	74 1d                	je     c00174e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00174cc:	b8 a6 81 02 c0       	mov    eax,0xc00281a6
c00174d1:	80 fa 30             	cmp    dl,0x30
c00174d4:	75 13                	jne    c00174e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00174d6:	b8 00 9c 02 c0       	mov    eax,0xc0029c00
c00174db:	eb 0c                	jmp    c00174e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00174dd:	b8 20 9b 02 c0       	mov    eax,0xc0029b20
c00174e2:	eb 05                	jmp    c00174e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00174e4:	b8 90 9b 02 c0       	mov    eax,0xc0029b90
c00174e9:	5b                   	pop    ebx
c00174ea:	5e                   	pop    esi
c00174eb:	5f                   	pop    edi
c00174ec:	5d                   	pop    ebp
c00174ed:	c3                   	ret    

c00174ee <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00174ee:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00174f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00174f6:	80 f9 04             	cmp    cl,0x4
c00174f9:	75 6b                	jne    c0017566 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00174fb:	b8 80 99 02 c0       	mov    eax,0xc0029980
c0017500:	80 fa 01             	cmp    dl,0x1
c0017503:	0f 86 92 02 00 00    	jbe    c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017509:	b8 90 99 02 c0       	mov    eax,0xc0029990
c001750e:	80 fa 02             	cmp    dl,0x2
c0017511:	0f 84 84 02 00 00    	je     c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017517:	b8 a0 99 02 c0       	mov    eax,0xc00299a0
c001751c:	80 fa 03             	cmp    dl,0x3
c001751f:	0f 84 76 02 00 00    	je     c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017525:	b8 b0 99 02 c0       	mov    eax,0xc00299b0
c001752a:	80 fa 04             	cmp    dl,0x4
c001752d:	0f 84 68 02 00 00    	je     c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017533:	b8 c0 99 02 c0       	mov    eax,0xc00299c0
c0017538:	80 fa 05             	cmp    dl,0x5
c001753b:	0f 84 5a 02 00 00    	je     c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017541:	b8 a0 99 02 c0       	mov    eax,0xc00299a0
c0017546:	80 fa 07             	cmp    dl,0x7
c0017549:	0f 84 4c 02 00 00    	je     c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001754f:	83 ea 08             	sub    edx,0x8
c0017552:	b8 a6 81 02 c0       	mov    eax,0xc00281a6
c0017557:	80 fa 01             	cmp    dl,0x1
c001755a:	0f 87 3b 02 00 00    	ja     c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017560:	b8 d0 99 02 c0       	mov    eax,0xc00299d0
c0017565:	c3                   	ret    
c0017566:	80 f9 05             	cmp    cl,0x5
c0017569:	75 45                	jne    c00175b0 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c001756b:	8d 4a ff             	lea    ecx,[edx-0x1]
c001756e:	b8 e0 99 02 c0       	mov    eax,0xc00299e0
c0017573:	80 f9 02             	cmp    cl,0x2
c0017576:	0f 86 1f 02 00 00    	jbe    c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001757c:	80 fa 04             	cmp    dl,0x4
c001757f:	0f 84 f3 01 00 00    	je     c0017778 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0017585:	80 fa 07             	cmp    dl,0x7
c0017588:	0f 84 0d 02 00 00    	je     c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001758e:	b8 f0 99 02 c0       	mov    eax,0xc00299f0
c0017593:	80 fa 08             	cmp    dl,0x8
c0017596:	0f 84 ff 01 00 00    	je     c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001759c:	b8 a6 81 02 c0       	mov    eax,0xc00281a6
c00175a1:	80 fa 09             	cmp    dl,0x9
c00175a4:	0f 85 f1 01 00 00    	jne    c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175aa:	b8 00 9a 02 c0       	mov    eax,0xc0029a00
c00175af:	c3                   	ret    
c00175b0:	80 f9 06             	cmp    cl,0x6
c00175b3:	0f 85 85 01 00 00    	jne    c001773e <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00175b9:	b8 10 9a 02 c0       	mov    eax,0xc0029a10
c00175be:	80 fa 01             	cmp    dl,0x1
c00175c1:	0f 84 d4 01 00 00    	je     c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175c7:	8d 42 fb             	lea    eax,[edx-0x5]
c00175ca:	3c 01                	cmp    al,0x1
c00175cc:	0f 86 ac 01 00 00    	jbe    c001777e <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00175d2:	80 fa 03             	cmp    dl,0x3
c00175d5:	0f 84 a3 01 00 00    	je     c001777e <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00175db:	8d 4a f9             	lea    ecx,[edx-0x7]
c00175de:	b8 30 9a 02 c0       	mov    eax,0xc0029a30
c00175e3:	80 f9 01             	cmp    cl,0x1
c00175e6:	0f 86 af 01 00 00    	jbe    c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175ec:	80 fa 09             	cmp    dl,0x9
c00175ef:	0f 84 8f 01 00 00    	je     c0017784 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00175f5:	8d 4a f6             	lea    ecx,[edx-0xa]
c00175f8:	80 f9 01             	cmp    cl,0x1
c00175fb:	0f 86 9a 01 00 00    	jbe    c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017601:	b8 40 9a 02 c0       	mov    eax,0xc0029a40
c0017606:	80 fa 0d             	cmp    dl,0xd
c0017609:	0f 84 8c 01 00 00    	je     c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001760f:	b8 50 9a 02 c0       	mov    eax,0xc0029a50
c0017614:	80 fa 0e             	cmp    dl,0xe
c0017617:	0f 84 7e 01 00 00    	je     c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001761d:	b8 60 9a 02 c0       	mov    eax,0xc0029a60
c0017622:	80 fa 0f             	cmp    dl,0xf
c0017625:	0f 84 70 01 00 00    	je     c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001762b:	b8 40 9a 02 c0       	mov    eax,0xc0029a40
c0017630:	80 fa 15             	cmp    dl,0x15
c0017633:	0f 84 62 01 00 00    	je     c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017639:	8d 4a ea             	lea    ecx,[edx-0x16]
c001763c:	b8 60 9a 02 c0       	mov    eax,0xc0029a60
c0017641:	80 f9 01             	cmp    cl,0x1
c0017644:	0f 86 51 01 00 00    	jbe    c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001764a:	80 fa 1a             	cmp    dl,0x1a
c001764d:	0f 84 37 01 00 00    	je     c001778a <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0017653:	80 fa 1c             	cmp    dl,0x1c
c0017656:	0f 84 34 01 00 00    	je     c0017790 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c001765c:	80 fa 1d             	cmp    dl,0x1d
c001765f:	0f 84 36 01 00 00    	je     c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017665:	b8 90 9a 02 c0       	mov    eax,0xc0029a90
c001766a:	80 fa 25             	cmp    dl,0x25
c001766d:	0f 84 28 01 00 00    	je     c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017673:	8d 4a da             	lea    ecx,[edx-0x26]
c0017676:	b8 80 9a 02 c0       	mov    eax,0xc0029a80
c001767b:	80 f9 01             	cmp    cl,0x1
c001767e:	0f 86 17 01 00 00    	jbe    c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017684:	b8 a0 9a 02 c0       	mov    eax,0xc0029aa0
c0017689:	80 fa 2a             	cmp    dl,0x2a
c001768c:	0f 84 09 01 00 00    	je     c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017692:	b8 90 9a 02 c0       	mov    eax,0xc0029a90
c0017697:	80 fa 2c             	cmp    dl,0x2c
c001769a:	0f 84 fb 00 00 00    	je     c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00176a0:	b8 a0 9a 02 c0       	mov    eax,0xc0029aa0
c00176a5:	80 fa 2d             	cmp    dl,0x2d
c00176a8:	0f 84 ed 00 00 00    	je     c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00176ae:	b8 70 9a 02 c0       	mov    eax,0xc0029a70
c00176b3:	80 fa 2e             	cmp    dl,0x2e
c00176b6:	0f 84 df 00 00 00    	je     c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00176bc:	b8 90 9a 02 c0       	mov    eax,0xc0029a90
c00176c1:	80 fa 2f             	cmp    dl,0x2f
c00176c4:	0f 84 d1 00 00 00    	je     c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00176ca:	8d 4a cb             	lea    ecx,[edx-0x35]
c00176cd:	b8 80 9a 02 c0       	mov    eax,0xc0029a80
c00176d2:	80 f9 01             	cmp    cl,0x1
c00176d5:	0f 86 c0 00 00 00    	jbe    c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00176db:	b8 b0 9a 02 c0       	mov    eax,0xc0029ab0
c00176e0:	80 fa 37             	cmp    dl,0x37
c00176e3:	0f 84 b2 00 00 00    	je     c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00176e9:	b8 c0 9a 02 c0       	mov    eax,0xc0029ac0
c00176ee:	80 fa 3a             	cmp    dl,0x3a
c00176f1:	0f 84 a4 00 00 00    	je     c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00176f7:	b8 d0 9a 02 c0       	mov    eax,0xc0029ad0
c00176fc:	80 fa 3c             	cmp    dl,0x3c
c00176ff:	0f 84 96 00 00 00    	je     c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017705:	b8 e0 9a 02 c0       	mov    eax,0xc0029ae0
c001770a:	80 fa 3d             	cmp    dl,0x3d
c001770d:	0f 84 88 00 00 00    	je     c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017713:	b8 c0 9a 02 c0       	mov    eax,0xc0029ac0
c0017718:	80 fa 3e             	cmp    dl,0x3e
c001771b:	74 7e                	je     c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001771d:	8d 42 bb             	lea    eax,[edx-0x45]
c0017720:	3c 01                	cmp    al,0x1
c0017722:	76 72                	jbe    c0017796 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017724:	80 fa 3f             	cmp    dl,0x3f
c0017727:	74 6d                	je     c0017796 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017729:	80 fa 4a             	cmp    dl,0x4a
c001772c:	74 0a                	je     c0017738 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c001772e:	b8 a6 81 02 c0       	mov    eax,0xc00281a6
c0017733:	80 fa 4d             	cmp    dl,0x4d
c0017736:	75 63                	jne    c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017738:	b8 b0 9a 02 c0       	mov    eax,0xc0029ab0
c001773d:	c3                   	ret    
c001773e:	b8 a6 81 02 c0       	mov    eax,0xc00281a6
c0017743:	80 f9 0b             	cmp    cl,0xb
c0017746:	75 0a                	jne    c0017752 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0017748:	fe ca                	dec    dl
c001774a:	75 4f                	jne    c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001774c:	b8 f0 9a 02 c0       	mov    eax,0xc0029af0
c0017751:	c3                   	ret    
c0017752:	80 f9 0f             	cmp    cl,0xf
c0017755:	75 44                	jne    c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017757:	b8 00 9b 02 c0       	mov    eax,0xc0029b00
c001775c:	80 fa 02             	cmp    dl,0x2
c001775f:	76 3a                	jbe    c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017761:	8d 42 fd             	lea    eax,[edx-0x3]
c0017764:	3c 01                	cmp    al,0x1
c0017766:	76 0a                	jbe    c0017772 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0017768:	b8 a6 81 02 c0       	mov    eax,0xc00281a6
c001776d:	80 fa 06             	cmp    dl,0x6
c0017770:	75 29                	jne    c001779b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017772:	b8 10 9b 02 c0       	mov    eax,0xc0029b10
c0017777:	c3                   	ret    
c0017778:	b8 f0 99 02 c0       	mov    eax,0xc00299f0
c001777d:	c3                   	ret    
c001777e:	b8 20 9a 02 c0       	mov    eax,0xc0029a20
c0017783:	c3                   	ret    
c0017784:	b8 40 9a 02 c0       	mov    eax,0xc0029a40
c0017789:	c3                   	ret    
c001778a:	b8 70 9a 02 c0       	mov    eax,0xc0029a70
c001778f:	c3                   	ret    
c0017790:	b8 80 9a 02 c0       	mov    eax,0xc0029a80
c0017795:	c3                   	ret    
c0017796:	b8 d0 9a 02 c0       	mov    eax,0xc0029ad0
c001779b:	c3                   	ret    

c001779c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001779c:	60                   	pusha  
c001779d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00177a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00177a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00177a9:	9c                   	pushf  
c00177aa:	fa                   	cli    
c00177ab:	0f 09                	wbinvd 
c00177ad:	0f 30                	wrmsr  
c00177af:	9d                   	popf   
c00177b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00177b4:	89 02                	mov    DWORD PTR [edx],eax
c00177b6:	61                   	popa   
c00177b7:	c3                   	ret    

c00177b8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00177b8:	60                   	pusha  
c00177b9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00177bd:	9c                   	pushf  
c00177be:	fa                   	cli    
c00177bf:	0f 09                	wbinvd 
c00177c1:	31 c0                	xor    eax,eax
c00177c3:	31 d2                	xor    edx,edx
c00177c5:	0f 32                	rdmsr  
c00177c7:	9d                   	popf   
c00177c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00177cc:	89 02                	mov    DWORD PTR [edx],eax
c00177ce:	61                   	popa   
c00177cf:	c3                   	ret    

c00177d0 <CPU::AMD_K6_writeback(int, int, int)>:
c00177d0:	56                   	push   esi
c00177d1:	53                   	push   ebx
c00177d2:	83 ec 10             	sub    esp,0x10
c00177d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177d9:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00177de:	75 5d                	jne    c001783d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00177e0:	83 f8 08             	cmp    eax,0x8
c00177e3:	75 09                	jne    c00177ee <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00177e5:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00177ea:	7e 13                	jle    c00177ff <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00177ec:	eb 30                	jmp    c001781e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00177ee:	83 f8 06             	cmp    eax,0x6
c00177f1:	7c 4a                	jl     c001783d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00177f3:	83 f8 07             	cmp    eax,0x7
c00177f6:	7e 07                	jle    c00177ff <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00177f8:	83 f8 09             	cmp    eax,0x9
c00177fb:	74 21                	je     c001781e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00177fd:	eb 3e                	jmp    c001783d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00177ff:	89 e6                	mov    esi,esp
c0017801:	8b 1d c4 a6 02 c0    	mov    ebx,DWORD PTR ds:0xc002a6c4
c0017807:	56                   	push   esi
c0017808:	c1 eb 15             	shr    ebx,0x15
c001780b:	68 82 00 00 c0       	push   0xc0000082
c0017810:	83 e3 7e             	and    ebx,0x7e
c0017813:	e8 a0 ff ff ff       	call   c00177b8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017818:	56                   	push   esi
c0017819:	6a 00                	push   0x0
c001781b:	53                   	push   ebx
c001781c:	eb 12                	jmp    c0017830 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001781e:	89 e3                	mov    ebx,esp
c0017820:	53                   	push   ebx
c0017821:	68 82 00 00 c0       	push   0xc0000082
c0017826:	e8 8d ff ff ff       	call   c00177b8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001782b:	53                   	push   ebx
c001782c:	6a 00                	push   0x0
c001782e:	6a 00                	push   0x0
c0017830:	68 82 00 00 c0       	push   0xc0000082
c0017835:	e8 62 ff ff ff       	call   c001779c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001783a:	83 c4 18             	add    esp,0x18
c001783d:	83 c4 10             	add    esp,0x10
c0017840:	5b                   	pop    ebx
c0017841:	5e                   	pop    esi
c0017842:	c3                   	ret    
c0017843:	90                   	nop

c0017844 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0017844:	55                   	push   ebp
c0017845:	57                   	push   edi
c0017846:	56                   	push   esi
c0017847:	53                   	push   ebx
c0017848:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001784c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017850:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017854:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0017858:	39 05 20 9c 02 c0    	cmp    DWORD PTR ds:0xc0029c20,eax
c001785e:	75 23                	jne    c0017883 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0017860:	a1 8c b1 02 c0       	mov    eax,ds:0xc002b18c
c0017865:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017869:	89 06                	mov    DWORD PTR [esi],eax
c001786b:	a1 88 b1 02 c0       	mov    eax,ds:0xc002b188
c0017870:	89 07                	mov    DWORD PTR [edi],eax
c0017872:	a1 84 b1 02 c0       	mov    eax,ds:0xc002b184
c0017877:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001787a:	a1 80 b1 02 c0       	mov    eax,ds:0xc002b180
c001787f:	89 02                	mov    DWORD PTR [edx],eax
c0017881:	eb 3f                	jmp    c00178c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0017883:	31 c9                	xor    ecx,ecx
c0017885:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017889:	0f a2                	cpuid  
c001788b:	89 06                	mov    DWORD PTR [esi],eax
c001788d:	89 1f                	mov    DWORD PTR [edi],ebx
c001788f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017893:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0017896:	89 10                	mov    DWORD PTR [eax],edx
c0017898:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001789c:	a3 20 9c 02 c0       	mov    ds:0xc0029c20,eax
c00178a1:	8b 06                	mov    eax,DWORD PTR [esi]
c00178a3:	a3 8c b1 02 c0       	mov    ds:0xc002b18c,eax
c00178a8:	8b 07                	mov    eax,DWORD PTR [edi]
c00178aa:	a3 88 b1 02 c0       	mov    ds:0xc002b188,eax
c00178af:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00178b2:	a3 84 b1 02 c0       	mov    ds:0xc002b184,eax
c00178b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00178bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00178bd:	a3 80 b1 02 c0       	mov    ds:0xc002b180,eax
c00178c2:	5b                   	pop    ebx
c00178c3:	5e                   	pop    esi
c00178c4:	5f                   	pop    edi
c00178c5:	5d                   	pop    ebp
c00178c6:	c3                   	ret    
c00178c7:	90                   	nop

c00178c8 <CPU::cpuidCheckEDX(unsigned int)>:
c00178c8:	83 ec 10             	sub    esp,0x10
c00178cb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178cf:	50                   	push   eax
c00178d0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178d4:	50                   	push   eax
c00178d5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178d9:	50                   	push   eax
c00178da:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178de:	50                   	push   eax
c00178df:	6a 01                	push   0x1
c00178e1:	e8 5e ff ff ff       	call   c0017844 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00178e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178ea:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00178ee:	0f 95 c0             	setne  al
c00178f1:	83 c4 24             	add    esp,0x24
c00178f4:	c3                   	ret    
c00178f5:	90                   	nop

c00178f6 <CPU::cpuidCheckECX(unsigned int)>:
c00178f6:	83 ec 10             	sub    esp,0x10
c00178f9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178fd:	50                   	push   eax
c00178fe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017902:	50                   	push   eax
c0017903:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017907:	50                   	push   eax
c0017908:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001790c:	50                   	push   eax
c001790d:	6a 01                	push   0x1
c001790f:	e8 30 ff ff ff       	call   c0017844 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017914:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017918:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001791c:	0f 95 c0             	setne  al
c001791f:	83 c4 24             	add    esp,0x24
c0017922:	c3                   	ret    
c0017923:	90                   	nop

c0017924 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0017924:	83 ec 10             	sub    esp,0x10
c0017927:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001792b:	50                   	push   eax
c001792c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017930:	50                   	push   eax
c0017931:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017935:	50                   	push   eax
c0017936:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001793a:	50                   	push   eax
c001793b:	6a 07                	push   0x7
c001793d:	e8 02 ff ff ff       	call   c0017844 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017942:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017946:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001794a:	0f 95 c0             	setne  al
c001794d:	83 c4 24             	add    esp,0x24
c0017950:	c3                   	ret    
c0017951:	90                   	nop

c0017952 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0017952:	83 ec 10             	sub    esp,0x10
c0017955:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017959:	50                   	push   eax
c001795a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001795e:	50                   	push   eax
c001795f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017963:	50                   	push   eax
c0017964:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017968:	50                   	push   eax
c0017969:	6a 07                	push   0x7
c001796b:	e8 d4 fe ff ff       	call   c0017844 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017970:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017974:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0017978:	0f 95 c0             	setne  al
c001797b:	83 c4 24             	add    esp,0x24
c001797e:	c3                   	ret    
c001797f:	90                   	nop

c0017980 <CPU::getNumber()>:
c0017980:	31 c0                	xor    eax,eax
c0017982:	c3                   	ret    
c0017983:	90                   	nop

c0017984 <CPU::current()>:
c0017984:	e8 f7 ff ff ff       	call   c0017980 <CPU::getNumber()>
c0017989:	8b 15 88 a6 02 c0    	mov    edx,DWORD PTR ds:0xc002a688
c001798f:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0017996:	c3                   	ret    
c0017997:	90                   	nop

c0017998 <CPU::CPU()>:
c0017998:	83 ec 0c             	sub    esp,0xc
c001799b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001799f:	83 ec 08             	sub    esp,0x8
c00179a2:	68 a6 81 02 c0       	push   0xc00281a6
c00179a7:	50                   	push   eax
c00179a8:	e8 c5 be ff ff       	call   c0013872 <Device::Device(char const*)>
c00179ad:	83 c4 10             	add    esp,0x10
c00179b0:	ba 80 82 02 c0       	mov    edx,0xc0028280
c00179b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179b9:	89 10                	mov    DWORD PTR [eax],edx
c00179bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179bf:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00179c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179cd:	05 78 01 00 00       	add    eax,0x178
c00179d2:	83 ec 0c             	sub    esp,0xc
c00179d5:	50                   	push   eax
c00179d6:	e8 a3 6f ff ff       	call   c000e97e <GDT::GDT()>
c00179db:	83 c4 10             	add    esp,0x10
c00179de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179e2:	05 7c 09 00 00       	add    eax,0x97c
c00179e7:	83 ec 0c             	sub    esp,0xc
c00179ea:	50                   	push   eax
c00179eb:	e8 ee 71 ff ff       	call   c000ebde <IDT::IDT()>
c00179f0:	83 c4 10             	add    esp,0x10
c00179f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179f7:	05 7c 11 00 00       	add    eax,0x117c
c00179fc:	83 ec 0c             	sub    esp,0xc
c00179ff:	50                   	push   eax
c0017a00:	e8 1d 92 ff ff       	call   c0010c22 <TSS::TSS()>
c0017a05:	83 c4 10             	add    esp,0x10
c0017a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a0c:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0017a13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a17:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0017a21:	90                   	nop
c0017a22:	83 c4 0c             	add    esp,0xc
c0017a25:	c3                   	ret    

c0017a26 <CPU::displayFeatures()>:
c0017a26:	53                   	push   ebx
c0017a27:	83 ec 10             	sub    esp,0x10
c0017a2a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017a2e:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0017a34:	68 b4 7e 02 c0       	push   0xc0027eb4
c0017a39:	e8 39 a8 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017a3e:	59                   	pop    ecx
c0017a3f:	58                   	pop    eax
c0017a40:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0017a46:	50                   	push   eax
c0017a47:	68 c5 7e 02 c0       	push   0xc0027ec5
c0017a4c:	e8 26 a8 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017a51:	58                   	pop    eax
c0017a52:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017a58:	5a                   	pop    edx
c0017a59:	c1 e8 0e             	shr    eax,0xe
c0017a5c:	0f b6 c0             	movzx  eax,al
c0017a5f:	50                   	push   eax
c0017a60:	68 d6 7e 02 c0       	push   0xc0027ed6
c0017a65:	e8 0d a8 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017a6a:	59                   	pop    ecx
c0017a6b:	58                   	pop    eax
c0017a6c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017a72:	66 c1 e8 06          	shr    ax,0x6
c0017a76:	0f b6 c0             	movzx  eax,al
c0017a79:	50                   	push   eax
c0017a7a:	68 e7 7e 02 c0       	push   0xc0027ee7
c0017a7f:	e8 f3 a7 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017a84:	c7 04 24 fa 82 02 c0 	mov    DWORD PTR [esp],0xc00282fa
c0017a8b:	e8 e7 a7 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017a90:	83 c4 10             	add    esp,0x10
c0017a93:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c0017a98:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0017a9f:	74 05                	je     c0017aa6 <CPU::displayFeatures()+0x80>
c0017aa1:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c0017aa6:	52                   	push   edx
c0017aa7:	52                   	push   edx
c0017aa8:	50                   	push   eax
c0017aa9:	68 f8 7e 02 c0       	push   0xc0027ef8
c0017aae:	e8 c4 a7 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017ab3:	83 c4 10             	add    esp,0x10
c0017ab6:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c0017abb:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0017ac2:	78 05                	js     c0017ac9 <CPU::displayFeatures()+0xa3>
c0017ac4:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c0017ac9:	51                   	push   ecx
c0017aca:	51                   	push   ecx
c0017acb:	50                   	push   eax
c0017acc:	68 0f 7f 02 c0       	push   0xc0027f0f
c0017ad1:	e8 a1 a7 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017ad6:	83 c4 10             	add    esp,0x10
c0017ad9:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c0017ade:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0017ae5:	75 05                	jne    c0017aec <CPU::displayFeatures()+0xc6>
c0017ae7:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c0017aec:	52                   	push   edx
c0017aed:	52                   	push   edx
c0017aee:	50                   	push   eax
c0017aef:	68 26 7f 02 c0       	push   0xc0027f26
c0017af4:	e8 7e a7 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017af9:	83 c4 10             	add    esp,0x10
c0017afc:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c0017b01:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0017b08:	75 05                	jne    c0017b0f <CPU::displayFeatures()+0xe9>
c0017b0a:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c0017b0f:	51                   	push   ecx
c0017b10:	51                   	push   ecx
c0017b11:	50                   	push   eax
c0017b12:	68 3d 7f 02 c0       	push   0xc0027f3d
c0017b17:	e8 5b a7 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017b1c:	83 c4 10             	add    esp,0x10
c0017b1f:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c0017b24:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0017b2b:	75 05                	jne    c0017b32 <CPU::displayFeatures()+0x10c>
c0017b2d:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c0017b32:	52                   	push   edx
c0017b33:	52                   	push   edx
c0017b34:	50                   	push   eax
c0017b35:	68 54 7f 02 c0       	push   0xc0027f54
c0017b3a:	e8 38 a7 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017b3f:	83 c4 10             	add    esp,0x10
c0017b42:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c0017b47:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0017b4e:	75 05                	jne    c0017b55 <CPU::displayFeatures()+0x12f>
c0017b50:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c0017b55:	51                   	push   ecx
c0017b56:	51                   	push   ecx
c0017b57:	50                   	push   eax
c0017b58:	68 6b 7f 02 c0       	push   0xc0027f6b
c0017b5d:	e8 15 a7 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017b62:	83 c4 10             	add    esp,0x10
c0017b65:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c0017b6a:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0017b71:	75 05                	jne    c0017b78 <CPU::displayFeatures()+0x152>
c0017b73:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c0017b78:	52                   	push   edx
c0017b79:	52                   	push   edx
c0017b7a:	50                   	push   eax
c0017b7b:	68 82 7f 02 c0       	push   0xc0027f82
c0017b80:	e8 f2 a6 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017b85:	83 c4 10             	add    esp,0x10
c0017b88:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c0017b8d:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0017b94:	75 05                	jne    c0017b9b <CPU::displayFeatures()+0x175>
c0017b96:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c0017b9b:	51                   	push   ecx
c0017b9c:	51                   	push   ecx
c0017b9d:	50                   	push   eax
c0017b9e:	68 99 7f 02 c0       	push   0xc0027f99
c0017ba3:	e8 cf a6 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017ba8:	83 c4 10             	add    esp,0x10
c0017bab:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c0017bb0:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0017bb7:	75 05                	jne    c0017bbe <CPU::displayFeatures()+0x198>
c0017bb9:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c0017bbe:	52                   	push   edx
c0017bbf:	52                   	push   edx
c0017bc0:	50                   	push   eax
c0017bc1:	68 b0 7f 02 c0       	push   0xc0027fb0
c0017bc6:	e8 ac a6 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017bcb:	83 c4 10             	add    esp,0x10
c0017bce:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c0017bd3:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0017bda:	75 05                	jne    c0017be1 <CPU::displayFeatures()+0x1bb>
c0017bdc:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c0017be1:	51                   	push   ecx
c0017be2:	51                   	push   ecx
c0017be3:	50                   	push   eax
c0017be4:	68 c7 7f 02 c0       	push   0xc0027fc7
c0017be9:	e8 89 a6 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017bee:	83 c4 10             	add    esp,0x10
c0017bf1:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c0017bf6:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0017bfd:	75 05                	jne    c0017c04 <CPU::displayFeatures()+0x1de>
c0017bff:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c0017c04:	52                   	push   edx
c0017c05:	52                   	push   edx
c0017c06:	50                   	push   eax
c0017c07:	68 de 7f 02 c0       	push   0xc0027fde
c0017c0c:	e8 66 a6 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017c11:	83 c4 10             	add    esp,0x10
c0017c14:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c0017c19:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0017c20:	75 05                	jne    c0017c27 <CPU::displayFeatures()+0x201>
c0017c22:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c0017c27:	51                   	push   ecx
c0017c28:	51                   	push   ecx
c0017c29:	50                   	push   eax
c0017c2a:	68 f5 7f 02 c0       	push   0xc0027ff5
c0017c2f:	e8 43 a6 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017c34:	83 c4 10             	add    esp,0x10
c0017c37:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c0017c3c:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0017c43:	75 05                	jne    c0017c4a <CPU::displayFeatures()+0x224>
c0017c45:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c0017c4a:	52                   	push   edx
c0017c4b:	52                   	push   edx
c0017c4c:	50                   	push   eax
c0017c4d:	68 0c 80 02 c0       	push   0xc002800c
c0017c52:	e8 20 a6 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017c57:	83 c4 10             	add    esp,0x10
c0017c5a:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c0017c5f:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0017c66:	78 05                	js     c0017c6d <CPU::displayFeatures()+0x247>
c0017c68:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c0017c6d:	51                   	push   ecx
c0017c6e:	51                   	push   ecx
c0017c6f:	50                   	push   eax
c0017c70:	68 23 80 02 c0       	push   0xc0028023
c0017c75:	e8 fd a5 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017c7a:	83 c4 10             	add    esp,0x10
c0017c7d:	b8 98 6b 02 c0       	mov    eax,0xc0026b98
c0017c82:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0017c89:	75 05                	jne    c0017c90 <CPU::displayFeatures()+0x26a>
c0017c8b:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c0017c90:	52                   	push   edx
c0017c91:	52                   	push   edx
c0017c92:	50                   	push   eax
c0017c93:	68 3a 80 02 c0       	push   0xc002803a
c0017c98:	e8 da a5 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017c9d:	83 c4 18             	add    esp,0x18
c0017ca0:	5b                   	pop    ebx
c0017ca1:	c3                   	ret    

c0017ca2 <CPU::detectFeatures()>:
c0017ca2:	55                   	push   ebp
c0017ca3:	57                   	push   edi
c0017ca4:	56                   	push   esi
c0017ca5:	53                   	push   ebx
c0017ca6:	83 ec 50             	sub    esp,0x50
c0017ca9:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0017cad:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0017cb7:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0017cbe:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0017cc4:	6a 0d                	push   0xd
c0017cc6:	6a 00                	push   0x0
c0017cc8:	57                   	push   edi
c0017cc9:	e8 f7 89 fe ff       	call   c00006c5 <memset>
c0017cce:	83 c4 10             	add    esp,0x10
c0017cd1:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c0017cd6:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0017cdd:	0f 84 20 09 00 00    	je     c0018603 <CPU::detectFeatures()+0x961>
c0017ce3:	83 ec 0c             	sub    esp,0xc
c0017ce6:	6a 10                	push   0x10
c0017ce8:	e8 db fb ff ff       	call   c00178c8 <CPU::cpuidCheckEDX(unsigned int)>
c0017ced:	83 e0 01             	and    eax,0x1
c0017cf0:	8d 14 00             	lea    edx,[eax+eax*1]
c0017cf3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017cf9:	83 e0 fd             	and    eax,0xfffffffd
c0017cfc:	09 d0                	or     eax,edx
c0017cfe:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017d04:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0017d0b:	e8 b8 fb ff ff       	call   c00178c8 <CPU::cpuidCheckEDX(unsigned int)>
c0017d10:	83 e0 01             	and    eax,0x1
c0017d13:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0017d1a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017d20:	83 e0 fb             	and    eax,0xfffffffb
c0017d23:	09 d0                	or     eax,edx
c0017d25:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017d2b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0017d32:	e8 91 fb ff ff       	call   c00178c8 <CPU::cpuidCheckEDX(unsigned int)>
c0017d37:	83 e0 01             	and    eax,0x1
c0017d3a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0017d41:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017d47:	83 e0 f7             	and    eax,0xfffffff7
c0017d4a:	09 d0                	or     eax,edx
c0017d4c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017d52:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0017d59:	e8 6a fb ff ff       	call   c00178c8 <CPU::cpuidCheckEDX(unsigned int)>
c0017d5e:	83 e0 01             	and    eax,0x1
c0017d61:	c1 e0 04             	shl    eax,0x4
c0017d64:	88 c2                	mov    dl,al
c0017d66:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017d6c:	83 e0 ef             	and    eax,0xffffffef
c0017d6f:	09 d0                	or     eax,edx
c0017d71:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017d77:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0017d7e:	e8 45 fb ff ff       	call   c00178c8 <CPU::cpuidCheckEDX(unsigned int)>
c0017d83:	83 e0 01             	and    eax,0x1
c0017d86:	c1 e0 05             	shl    eax,0x5
c0017d89:	88 c2                	mov    dl,al
c0017d8b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017d91:	83 e0 df             	and    eax,0xffffffdf
c0017d94:	09 d0                	or     eax,edx
c0017d96:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017d9c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0017da3:	e8 20 fb ff ff       	call   c00178c8 <CPU::cpuidCheckEDX(unsigned int)>
c0017da8:	83 e0 01             	and    eax,0x1
c0017dab:	8d 14 00             	lea    edx,[eax+eax*1]
c0017dae:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017db4:	83 e0 fd             	and    eax,0xfffffffd
c0017db7:	09 d0                	or     eax,edx
c0017db9:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017dbf:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0017dc6:	e8 fd fa ff ff       	call   c00178c8 <CPU::cpuidCheckEDX(unsigned int)>
c0017dcb:	83 e0 01             	and    eax,0x1
c0017dce:	c1 e0 06             	shl    eax,0x6
c0017dd1:	88 c2                	mov    dl,al
c0017dd3:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017dd9:	83 e0 bf             	and    eax,0xffffffbf
c0017ddc:	09 d0                	or     eax,edx
c0017dde:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017de4:	58                   	pop    eax
c0017de5:	8d 74 24 28          	lea    esi,[esp+0x28]
c0017de9:	56                   	push   esi
c0017dea:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0017dee:	55                   	push   ebp
c0017def:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017df3:	50                   	push   eax
c0017df4:	8d 54 24 28          	lea    edx,[esp+0x28]
c0017df8:	52                   	push   edx
c0017df9:	6a 00                	push   0x0
c0017dfb:	e8 44 fa ff ff       	call   c0017844 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017e00:	83 c4 1c             	add    esp,0x1c
c0017e03:	6a 04                	push   0x4
c0017e05:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017e09:	50                   	push   eax
c0017e0a:	57                   	push   edi
c0017e0b:	e8 7f 88 fe ff       	call   c000068f <memcpy>
c0017e10:	83 c4 0c             	add    esp,0xc
c0017e13:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0017e19:	6a 04                	push   0x4
c0017e1b:	56                   	push   esi
c0017e1c:	50                   	push   eax
c0017e1d:	e8 6d 88 fe ff       	call   c000068f <memcpy>
c0017e22:	83 c4 0c             	add    esp,0xc
c0017e25:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0017e2b:	6a 04                	push   0x4
c0017e2d:	55                   	push   ebp
c0017e2e:	50                   	push   eax
c0017e2f:	e8 5b 88 fe ff       	call   c000068f <memcpy>
c0017e34:	58                   	pop    eax
c0017e35:	5a                   	pop    edx
c0017e36:	68 51 80 02 c0       	push   0xc0028051
c0017e3b:	57                   	push   edi
c0017e3c:	e8 74 89 fe ff       	call   c00007b5 <strcmp>
c0017e41:	83 c4 10             	add    esp,0x10
c0017e44:	85 c0                	test   eax,eax
c0017e46:	75 0f                	jne    c0017e57 <CPU::detectFeatures()+0x1b5>
c0017e48:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0017e52:	e9 22 02 00 00       	jmp    c0018079 <CPU::detectFeatures()+0x3d7>
c0017e57:	50                   	push   eax
c0017e58:	50                   	push   eax
c0017e59:	68 5e 80 02 c0       	push   0xc002805e
c0017e5e:	57                   	push   edi
c0017e5f:	e8 51 89 fe ff       	call   c00007b5 <strcmp>
c0017e64:	83 c4 10             	add    esp,0x10
c0017e67:	85 c0                	test   eax,eax
c0017e69:	74 dd                	je     c0017e48 <CPU::detectFeatures()+0x1a6>
c0017e6b:	51                   	push   ecx
c0017e6c:	51                   	push   ecx
c0017e6d:	68 6b 80 02 c0       	push   0xc002806b
c0017e72:	57                   	push   edi
c0017e73:	e8 3d 89 fe ff       	call   c00007b5 <strcmp>
c0017e78:	83 c4 10             	add    esp,0x10
c0017e7b:	85 c0                	test   eax,eax
c0017e7d:	74 2a                	je     c0017ea9 <CPU::detectFeatures()+0x207>
c0017e7f:	52                   	push   edx
c0017e80:	52                   	push   edx
c0017e81:	68 78 80 02 c0       	push   0xc0028078
c0017e86:	57                   	push   edi
c0017e87:	e8 29 89 fe ff       	call   c00007b5 <strcmp>
c0017e8c:	83 c4 10             	add    esp,0x10
c0017e8f:	85 c0                	test   eax,eax
c0017e91:	74 16                	je     c0017ea9 <CPU::detectFeatures()+0x207>
c0017e93:	50                   	push   eax
c0017e94:	50                   	push   eax
c0017e95:	68 85 80 02 c0       	push   0xc0028085
c0017e9a:	57                   	push   edi
c0017e9b:	e8 15 89 fe ff       	call   c00007b5 <strcmp>
c0017ea0:	83 c4 10             	add    esp,0x10
c0017ea3:	85 c0                	test   eax,eax
c0017ea5:	74 48                	je     c0017eef <CPU::detectFeatures()+0x24d>
c0017ea7:	eb 0f                	jmp    c0017eb8 <CPU::detectFeatures()+0x216>
c0017ea9:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0017eb3:	e9 c1 01 00 00       	jmp    c0018079 <CPU::detectFeatures()+0x3d7>
c0017eb8:	50                   	push   eax
c0017eb9:	50                   	push   eax
c0017eba:	68 92 80 02 c0       	push   0xc0028092
c0017ebf:	57                   	push   edi
c0017ec0:	e8 f0 88 fe ff       	call   c00007b5 <strcmp>
c0017ec5:	83 c4 10             	add    esp,0x10
c0017ec8:	85 c0                	test   eax,eax
c0017eca:	74 23                	je     c0017eef <CPU::detectFeatures()+0x24d>
c0017ecc:	50                   	push   eax
c0017ecd:	50                   	push   eax
c0017ece:	68 9f 80 02 c0       	push   0xc002809f
c0017ed3:	57                   	push   edi
c0017ed4:	e8 dc 88 fe ff       	call   c00007b5 <strcmp>
c0017ed9:	83 c4 10             	add    esp,0x10
c0017edc:	85 c0                	test   eax,eax
c0017ede:	75 1e                	jne    c0017efe <CPU::detectFeatures()+0x25c>
c0017ee0:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0017eea:	e9 8a 01 00 00       	jmp    c0018079 <CPU::detectFeatures()+0x3d7>
c0017eef:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0017ef9:	e9 7b 01 00 00       	jmp    c0018079 <CPU::detectFeatures()+0x3d7>
c0017efe:	50                   	push   eax
c0017eff:	50                   	push   eax
c0017f00:	68 ac 80 02 c0       	push   0xc00280ac
c0017f05:	57                   	push   edi
c0017f06:	e8 aa 88 fe ff       	call   c00007b5 <strcmp>
c0017f0b:	83 c4 10             	add    esp,0x10
c0017f0e:	85 c0                	test   eax,eax
c0017f10:	75 0f                	jne    c0017f21 <CPU::detectFeatures()+0x27f>
c0017f12:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0017f1c:	e9 58 01 00 00       	jmp    c0018079 <CPU::detectFeatures()+0x3d7>
c0017f21:	50                   	push   eax
c0017f22:	50                   	push   eax
c0017f23:	68 6b 80 02 c0       	push   0xc002806b
c0017f28:	57                   	push   edi
c0017f29:	e8 87 88 fe ff       	call   c00007b5 <strcmp>
c0017f2e:	83 c4 10             	add    esp,0x10
c0017f31:	85 c0                	test   eax,eax
c0017f33:	75 0f                	jne    c0017f44 <CPU::detectFeatures()+0x2a2>
c0017f35:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0017f3f:	e9 35 01 00 00       	jmp    c0018079 <CPU::detectFeatures()+0x3d7>
c0017f44:	50                   	push   eax
c0017f45:	50                   	push   eax
c0017f46:	68 b9 80 02 c0       	push   0xc00280b9
c0017f4b:	57                   	push   edi
c0017f4c:	e8 64 88 fe ff       	call   c00007b5 <strcmp>
c0017f51:	83 c4 10             	add    esp,0x10
c0017f54:	85 c0                	test   eax,eax
c0017f56:	75 0f                	jne    c0017f67 <CPU::detectFeatures()+0x2c5>
c0017f58:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0017f62:	e9 12 01 00 00       	jmp    c0018079 <CPU::detectFeatures()+0x3d7>
c0017f67:	51                   	push   ecx
c0017f68:	51                   	push   ecx
c0017f69:	68 c6 80 02 c0       	push   0xc00280c6
c0017f6e:	57                   	push   edi
c0017f6f:	e8 41 88 fe ff       	call   c00007b5 <strcmp>
c0017f74:	83 c4 10             	add    esp,0x10
c0017f77:	85 c0                	test   eax,eax
c0017f79:	75 0f                	jne    c0017f8a <CPU::detectFeatures()+0x2e8>
c0017f7b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0017f85:	e9 ef 00 00 00       	jmp    c0018079 <CPU::detectFeatures()+0x3d7>
c0017f8a:	52                   	push   edx
c0017f8b:	52                   	push   edx
c0017f8c:	68 d3 80 02 c0       	push   0xc00280d3
c0017f91:	57                   	push   edi
c0017f92:	e8 1e 88 fe ff       	call   c00007b5 <strcmp>
c0017f97:	83 c4 10             	add    esp,0x10
c0017f9a:	85 c0                	test   eax,eax
c0017f9c:	75 0f                	jne    c0017fad <CPU::detectFeatures()+0x30b>
c0017f9e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0017fa8:	e9 cc 00 00 00       	jmp    c0018079 <CPU::detectFeatures()+0x3d7>
c0017fad:	50                   	push   eax
c0017fae:	50                   	push   eax
c0017faf:	68 e0 80 02 c0       	push   0xc00280e0
c0017fb4:	57                   	push   edi
c0017fb5:	e8 fb 87 fe ff       	call   c00007b5 <strcmp>
c0017fba:	83 c4 10             	add    esp,0x10
c0017fbd:	85 c0                	test   eax,eax
c0017fbf:	75 0f                	jne    c0017fd0 <CPU::detectFeatures()+0x32e>
c0017fc1:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0017fcb:	e9 a9 00 00 00       	jmp    c0018079 <CPU::detectFeatures()+0x3d7>
c0017fd0:	50                   	push   eax
c0017fd1:	50                   	push   eax
c0017fd2:	68 ed 80 02 c0       	push   0xc00280ed
c0017fd7:	57                   	push   edi
c0017fd8:	e8 d8 87 fe ff       	call   c00007b5 <strcmp>
c0017fdd:	83 c4 10             	add    esp,0x10
c0017fe0:	85 c0                	test   eax,eax
c0017fe2:	75 0f                	jne    c0017ff3 <CPU::detectFeatures()+0x351>
c0017fe4:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0017fee:	e9 86 00 00 00       	jmp    c0018079 <CPU::detectFeatures()+0x3d7>
c0017ff3:	50                   	push   eax
c0017ff4:	50                   	push   eax
c0017ff5:	68 fa 80 02 c0       	push   0xc00280fa
c0017ffa:	57                   	push   edi
c0017ffb:	e8 b5 87 fe ff       	call   c00007b5 <strcmp>
c0018000:	83 c4 10             	add    esp,0x10
c0018003:	85 c0                	test   eax,eax
c0018005:	75 0c                	jne    c0018013 <CPU::detectFeatures()+0x371>
c0018007:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018011:	eb 66                	jmp    c0018079 <CPU::detectFeatures()+0x3d7>
c0018013:	50                   	push   eax
c0018014:	50                   	push   eax
c0018015:	68 07 81 02 c0       	push   0xc0028107
c001801a:	57                   	push   edi
c001801b:	e8 95 87 fe ff       	call   c00007b5 <strcmp>
c0018020:	83 c4 10             	add    esp,0x10
c0018023:	85 c0                	test   eax,eax
c0018025:	75 0c                	jne    c0018033 <CPU::detectFeatures()+0x391>
c0018027:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018031:	eb 46                	jmp    c0018079 <CPU::detectFeatures()+0x3d7>
c0018033:	50                   	push   eax
c0018034:	50                   	push   eax
c0018035:	68 14 81 02 c0       	push   0xc0028114
c001803a:	57                   	push   edi
c001803b:	e8 75 87 fe ff       	call   c00007b5 <strcmp>
c0018040:	83 c4 10             	add    esp,0x10
c0018043:	85 c0                	test   eax,eax
c0018045:	74 e0                	je     c0018027 <CPU::detectFeatures()+0x385>
c0018047:	50                   	push   eax
c0018048:	50                   	push   eax
c0018049:	68 21 81 02 c0       	push   0xc0028121
c001804e:	57                   	push   edi
c001804f:	e8 61 87 fe ff       	call   c00007b5 <strcmp>
c0018054:	83 c4 10             	add    esp,0x10
c0018057:	85 c0                	test   eax,eax
c0018059:	74 cc                	je     c0018027 <CPU::detectFeatures()+0x385>
c001805b:	51                   	push   ecx
c001805c:	51                   	push   ecx
c001805d:	68 2e 81 02 c0       	push   0xc002812e
c0018062:	57                   	push   edi
c0018063:	e8 4d 87 fe ff       	call   c00007b5 <strcmp>
c0018068:	83 c4 10             	add    esp,0x10
c001806b:	85 c0                	test   eax,eax
c001806d:	74 b8                	je     c0018027 <CPU::detectFeatures()+0x385>
c001806f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018079:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001807e:	0f 86 be 00 00 00    	jbe    c0018142 <CPU::detectFeatures()+0x4a0>
c0018084:	83 ec 0c             	sub    esp,0xc
c0018087:	68 80 00 00 00       	push   0x80
c001808c:	e8 93 f8 ff ff       	call   c0017924 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018091:	83 e0 01             	and    eax,0x1
c0018094:	c1 e0 06             	shl    eax,0x6
c0018097:	88 c2                	mov    dl,al
c0018099:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001809f:	83 e0 bf             	and    eax,0xffffffbf
c00180a2:	09 d0                	or     eax,edx
c00180a4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00180aa:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00180b1:	e8 6e f8 ff ff       	call   c0017924 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00180b6:	83 e0 01             	and    eax,0x1
c00180b9:	c1 e0 04             	shl    eax,0x4
c00180bc:	88 c2                	mov    dl,al
c00180be:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00180c4:	83 e0 ef             	and    eax,0xffffffef
c00180c7:	09 d0                	or     eax,edx
c00180c9:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00180cf:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00180d6:	e8 49 f8 ff ff       	call   c0017924 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00180db:	c1 e0 07             	shl    eax,0x7
c00180de:	88 c2                	mov    dl,al
c00180e0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00180e6:	83 e0 7f             	and    eax,0x7f
c00180e9:	09 d0                	or     eax,edx
c00180eb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00180f1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00180f8:	e8 55 f8 ff ff       	call   c0017952 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00180fd:	83 e0 01             	and    eax,0x1
c0018100:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018107:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001810d:	83 e0 f7             	and    eax,0xfffffff7
c0018110:	09 d0                	or     eax,edx
c0018112:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018118:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001811f:	e8 2e f8 ff ff       	call   c0017952 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018124:	83 c4 10             	add    esp,0x10
c0018127:	83 e0 01             	and    eax,0x1
c001812a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018131:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018137:	83 e0 fb             	and    eax,0xfffffffb
c001813a:	09 d0                	or     eax,edx
c001813c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018142:	83 ec 0c             	sub    esp,0xc
c0018145:	56                   	push   esi
c0018146:	55                   	push   ebp
c0018147:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001814b:	57                   	push   edi
c001814c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018150:	50                   	push   eax
c0018151:	6a 01                	push   0x1
c0018153:	e8 ec f6 ff ff       	call   c0017844 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018158:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001815c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018162:	88 ca                	mov    dl,cl
c0018164:	83 e0 f0             	and    eax,0xfffffff0
c0018167:	83 e2 0f             	and    edx,0xf
c001816a:	09 d0                	or     eax,edx
c001816c:	88 ca                	mov    dl,cl
c001816e:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018174:	c0 ea 04             	shr    dl,0x4
c0018177:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001817b:	0f b6 c2             	movzx  eax,dl
c001817e:	83 c4 20             	add    esp,0x20
c0018181:	c1 e0 06             	shl    eax,0x6
c0018184:	89 c5                	mov    ebp,eax
c0018186:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001818c:	66 25 3f c0          	and    ax,0xc03f
c0018190:	09 e8                	or     eax,ebp
c0018192:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018199:	89 c8                	mov    eax,ecx
c001819b:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00181a1:	c1 e8 08             	shr    eax,0x8
c00181a4:	83 e2 3f             	and    edx,0x3f
c00181a7:	83 e0 0f             	and    eax,0xf
c00181aa:	89 c5                	mov    ebp,eax
c00181ac:	c1 e5 06             	shl    ebp,0x6
c00181af:	09 d5                	or     ebp,edx
c00181b1:	89 ea                	mov    edx,ebp
c00181b3:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00181b9:	88 c2                	mov    dl,al
c00181bb:	c0 ea 02             	shr    dl,0x2
c00181be:	89 d5                	mov    ebp,edx
c00181c0:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00181c6:	83 e2 c0             	and    edx,0xffffffc0
c00181c9:	09 d5                	or     ebp,edx
c00181cb:	89 ea                	mov    edx,ebp
c00181cd:	89 cd                	mov    ebp,ecx
c00181cf:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00181d5:	c1 ed 0c             	shr    ebp,0xc
c00181d8:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00181de:	83 e5 03             	and    ebp,0x3
c00181e1:	83 e2 cf             	and    edx,0xffffffcf
c00181e4:	c1 e5 04             	shl    ebp,0x4
c00181e7:	09 d5                	or     ebp,edx
c00181e9:	3c 06                	cmp    al,0x6
c00181eb:	89 ea                	mov    edx,ebp
c00181ed:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00181f3:	74 04                	je     c00181f9 <CPU::detectFeatures()+0x557>
c00181f5:	3c 0f                	cmp    al,0xf
c00181f7:	75 5c                	jne    c0018255 <CPU::detectFeatures()+0x5b3>
c00181f9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00181fd:	89 cd                	mov    ebp,ecx
c00181ff:	c1 ed 10             	shr    ebp,0x10
c0018202:	c1 e5 04             	shl    ebp,0x4
c0018205:	09 ea                	or     edx,ebp
c0018207:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001820d:	0f b6 d2             	movzx  edx,dl
c0018210:	66 81 e5 3f c0       	and    bp,0xc03f
c0018215:	c1 e2 06             	shl    edx,0x6
c0018218:	09 ea                	or     edx,ebp
c001821a:	3c 0f                	cmp    al,0xf
c001821c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018223:	75 30                	jne    c0018255 <CPU::detectFeatures()+0x5b3>
c0018225:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001822b:	c1 e9 14             	shr    ecx,0x14
c001822e:	83 e0 3f             	and    eax,0x3f
c0018231:	83 c1 0f             	add    ecx,0xf
c0018234:	88 ca                	mov    dl,cl
c0018236:	c0 e9 02             	shr    cl,0x2
c0018239:	c1 e2 06             	shl    edx,0x6
c001823c:	09 d0                	or     eax,edx
c001823e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018244:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001824a:	83 e0 c0             	and    eax,0xffffffc0
c001824d:	09 c1                	or     ecx,eax
c001824f:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018255:	83 ec 0c             	sub    esp,0xc
c0018258:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001825f:	56                   	push   esi
c0018260:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018264:	50                   	push   eax
c0018265:	57                   	push   edi
c0018266:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001826a:	55                   	push   ebp
c001826b:	68 00 00 00 80       	push   0x80000000
c0018270:	e8 cf f5 ff ff       	call   c0017844 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018275:	83 c4 20             	add    esp,0x20
c0018278:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018280:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018284:	76 1e                	jbe    c00182a4 <CPU::detectFeatures()+0x602>
c0018286:	83 ec 0c             	sub    esp,0xc
c0018289:	56                   	push   esi
c001828a:	50                   	push   eax
c001828b:	57                   	push   edi
c001828c:	55                   	push   ebp
c001828d:	68 01 00 00 80       	push   0x80000001
c0018292:	e8 ad f5 ff ff       	call   c0017844 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018297:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00182a1:	83 c4 20             	add    esp,0x20
c00182a4:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00182aa:	83 f8 01             	cmp    eax,0x1
c00182ad:	75 6f                	jne    c001831e <CPU::detectFeatures()+0x67c>
c00182af:	51                   	push   ecx
c00182b0:	51                   	push   ecx
c00182b1:	68 3a 81 02 c0       	push   0xc002813a
c00182b6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00182ba:	56                   	push   esi
c00182bb:	e8 a4 84 fe ff       	call   c0000764 <strcpy>
c00182c0:	5f                   	pop    edi
c00182c1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00182c7:	5d                   	pop    ebp
c00182c8:	66 c1 e8 06          	shr    ax,0x6
c00182cc:	0f b6 c0             	movzx  eax,al
c00182cf:	50                   	push   eax
c00182d0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00182d6:	c1 e8 0e             	shr    eax,0xe
c00182d9:	0f b6 c0             	movzx  eax,al
c00182dc:	50                   	push   eax
c00182dd:	e8 0c f2 ff ff       	call   c00174ee <CPU::lookupIntelName(unsigned char, unsigned char)>
c00182e2:	5a                   	pop    edx
c00182e3:	59                   	pop    ecx
c00182e4:	50                   	push   eax
c00182e5:	56                   	push   esi
c00182e6:	e8 30 85 fe ff       	call   c000081b <strcat>
c00182eb:	5f                   	pop    edi
c00182ec:	5d                   	pop    ebp
c00182ed:	56                   	push   esi
c00182ee:	53                   	push   ebx
c00182ef:	e8 70 b5 ff ff       	call   c0013864 <Device::setName(char const*)>
c00182f4:	58                   	pop    eax
c00182f5:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00182fb:	5a                   	pop    edx
c00182fc:	68 41 81 02 c0       	push   0xc0028141
c0018301:	50                   	push   eax
c0018302:	e8 ae 84 fe ff       	call   c00007b5 <strcmp>
c0018307:	83 c4 10             	add    esp,0x10
c001830a:	85 c0                	test   eax,eax
c001830c:	0f 85 73 03 00 00    	jne    c0018685 <CPU::detectFeatures()+0x9e3>
c0018312:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018319:	e9 67 03 00 00       	jmp    c0018685 <CPU::detectFeatures()+0x9e3>
c001831e:	83 f8 02             	cmp    eax,0x2
c0018321:	0f 85 b5 00 00 00    	jne    c00183dc <CPU::detectFeatures()+0x73a>
c0018327:	57                   	push   edi
c0018328:	57                   	push   edi
c0018329:	68 53 81 02 c0       	push   0xc0028153
c001832e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018332:	56                   	push   esi
c0018333:	e8 2c 84 fe ff       	call   c0000764 <strcpy>
c0018338:	5d                   	pop    ebp
c0018339:	58                   	pop    eax
c001833a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018340:	66 c1 e8 06          	shr    ax,0x6
c0018344:	0f b6 c0             	movzx  eax,al
c0018347:	50                   	push   eax
c0018348:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001834e:	c1 e8 0e             	shr    eax,0xe
c0018351:	0f b6 c0             	movzx  eax,al
c0018354:	50                   	push   eax
c0018355:	e8 00 f0 ff ff       	call   c001735a <CPU::lookupAMDName(unsigned char, unsigned char)>
c001835a:	5a                   	pop    edx
c001835b:	59                   	pop    ecx
c001835c:	50                   	push   eax
c001835d:	56                   	push   esi
c001835e:	e8 b8 84 fe ff       	call   c000081b <strcat>
c0018363:	5f                   	pop    edi
c0018364:	5d                   	pop    ebp
c0018365:	56                   	push   esi
c0018366:	53                   	push   ebx
c0018367:	e8 f8 b4 ff ff       	call   c0013864 <Device::setName(char const*)>
c001836c:	58                   	pop    eax
c001836d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018373:	5a                   	pop    edx
c0018374:	68 58 81 02 c0       	push   0xc0028158
c0018379:	50                   	push   eax
c001837a:	e8 36 84 fe ff       	call   c00007b5 <strcmp>
c001837f:	83 c4 10             	add    esp,0x10
c0018382:	85 c0                	test   eax,eax
c0018384:	75 20                	jne    c00183a6 <CPU::detectFeatures()+0x704>
c0018386:	8b 15 88 a6 02 c0    	mov    edx,DWORD PTR ds:0xc002a688
c001838c:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018392:	a8 01                	test   al,0x1
c0018394:	74 10                	je     c00183a6 <CPU::detectFeatures()+0x704>
c0018396:	83 e0 fe             	and    eax,0xfffffffe
c0018399:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001839f:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00183a6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00183ac:	c1 e8 0e             	shr    eax,0xe
c00183af:	3c 05                	cmp    al,0x5
c00183b1:	0f 85 ce 02 00 00    	jne    c0018685 <CPU::detectFeatures()+0x9e3>
c00183b7:	56                   	push   esi
c00183b8:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00183be:	83 e0 0f             	and    eax,0xf
c00183c1:	50                   	push   eax
c00183c2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00183c8:	66 c1 e8 06          	shr    ax,0x6
c00183cc:	0f b6 c0             	movzx  eax,al
c00183cf:	50                   	push   eax
c00183d0:	6a 05                	push   0x5
c00183d2:	e8 f9 f3 ff ff       	call   c00177d0 <CPU::AMD_K6_writeback(int, int, int)>
c00183d7:	e9 1f 02 00 00       	jmp    c00185fb <CPU::detectFeatures()+0x959>
c00183dc:	8d 50 fd             	lea    edx,[eax-0x3]
c00183df:	83 fa 01             	cmp    edx,0x1
c00183e2:	76 09                	jbe    c00183ed <CPU::detectFeatures()+0x74b>
c00183e4:	83 f8 06             	cmp    eax,0x6
c00183e7:	0f 85 91 01 00 00    	jne    c001857e <CPU::detectFeatures()+0x8dc>
c00183ed:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00183f3:	c1 ea 0e             	shr    edx,0xe
c00183f6:	80 fa 05             	cmp    dl,0x5
c00183f9:	75 7b                	jne    c0018476 <CPU::detectFeatures()+0x7d4>
c00183fb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018401:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018406:	66 81 fa 00 01       	cmp    dx,0x100
c001840b:	75 0c                	jne    c0018419 <CPU::detectFeatures()+0x777>
c001840d:	51                   	push   ecx
c001840e:	51                   	push   ecx
c001840f:	68 5f 81 02 c0       	push   0xc002815f
c0018414:	e9 dc 01 00 00       	jmp    c00185f5 <CPU::detectFeatures()+0x953>
c0018419:	66 81 fa 00 02       	cmp    dx,0x200
c001841e:	75 0c                	jne    c001842c <CPU::detectFeatures()+0x78a>
c0018420:	52                   	push   edx
c0018421:	52                   	push   edx
c0018422:	68 72 81 02 c0       	push   0xc0028172
c0018427:	e9 c9 01 00 00       	jmp    c00185f5 <CPU::detectFeatures()+0x953>
c001842c:	66 81 fa 40 02       	cmp    dx,0x240
c0018431:	75 0c                	jne    c001843f <CPU::detectFeatures()+0x79d>
c0018433:	50                   	push   eax
c0018434:	50                   	push   eax
c0018435:	68 84 81 02 c0       	push   0xc0028184
c001843a:	e9 b6 01 00 00       	jmp    c00185f5 <CPU::detectFeatures()+0x953>
c001843f:	83 f8 06             	cmp    eax,0x6
c0018442:	75 0c                	jne    c0018450 <CPU::detectFeatures()+0x7ae>
c0018444:	50                   	push   eax
c0018445:	50                   	push   eax
c0018446:	68 96 81 02 c0       	push   0xc0028196
c001844b:	e9 a5 01 00 00       	jmp    c00185f5 <CPU::detectFeatures()+0x953>
c0018450:	83 f8 04             	cmp    eax,0x4
c0018453:	75 0c                	jne    c0018461 <CPU::detectFeatures()+0x7bf>
c0018455:	50                   	push   eax
c0018456:	50                   	push   eax
c0018457:	68 a2 81 02 c0       	push   0xc00281a2
c001845c:	e9 94 01 00 00       	jmp    c00185f5 <CPU::detectFeatures()+0x953>
c0018461:	83 f8 03             	cmp    eax,0x3
c0018464:	0f 85 1b 02 00 00    	jne    c0018685 <CPU::detectFeatures()+0x9e3>
c001846a:	50                   	push   eax
c001846b:	50                   	push   eax
c001846c:	68 aa 81 02 c0       	push   0xc00281aa
c0018471:	e9 7f 01 00 00       	jmp    c00185f5 <CPU::detectFeatures()+0x953>
c0018476:	80 fa 06             	cmp    dl,0x6
c0018479:	0f 85 db 00 00 00    	jne    c001855a <CPU::detectFeatures()+0x8b8>
c001847f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018485:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001848a:	66 81 fa 80 01       	cmp    dx,0x180
c001848f:	75 0c                	jne    c001849d <CPU::detectFeatures()+0x7fb>
c0018491:	50                   	push   eax
c0018492:	50                   	push   eax
c0018493:	68 b5 81 02 c0       	push   0xc00281b5
c0018498:	e9 58 01 00 00       	jmp    c00185f5 <CPU::detectFeatures()+0x953>
c001849d:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00184a3:	66 f7 c1 80 ff       	test   cx,0xff80
c00184a8:	75 0c                	jne    c00184b6 <CPU::detectFeatures()+0x814>
c00184aa:	50                   	push   eax
c00184ab:	50                   	push   eax
c00184ac:	68 c5 81 02 c0       	push   0xc00281c5
c00184b1:	e9 3f 01 00 00       	jmp    c00185f5 <CPU::detectFeatures()+0x953>
c00184b6:	66 81 fa 40 02       	cmp    dx,0x240
c00184bb:	75 0c                	jne    c00184c9 <CPU::detectFeatures()+0x827>
c00184bd:	55                   	push   ebp
c00184be:	55                   	push   ebp
c00184bf:	68 cc 81 02 c0       	push   0xc00281cc
c00184c4:	e9 2c 01 00 00       	jmp    c00185f5 <CPU::detectFeatures()+0x953>
c00184c9:	66 81 fa 80 02       	cmp    dx,0x280
c00184ce:	75 0c                	jne    c00184dc <CPU::detectFeatures()+0x83a>
c00184d0:	57                   	push   edi
c00184d1:	57                   	push   edi
c00184d2:	68 d5 81 02 c0       	push   0xc00281d5
c00184d7:	e9 19 01 00 00       	jmp    c00185f5 <CPU::detectFeatures()+0x953>
c00184dc:	66 81 fa 40 03       	cmp    dx,0x340
c00184e1:	74 ed                	je     c00184d0 <CPU::detectFeatures()+0x82e>
c00184e3:	66 81 fa c0 03       	cmp    dx,0x3c0
c00184e8:	75 0c                	jne    c00184f6 <CPU::detectFeatures()+0x854>
c00184ea:	56                   	push   esi
c00184eb:	56                   	push   esi
c00184ec:	68 dc 81 02 c0       	push   0xc00281dc
c00184f1:	e9 ff 00 00 00       	jmp    c00185f5 <CPU::detectFeatures()+0x953>
c00184f6:	83 f8 06             	cmp    eax,0x6
c00184f9:	0f 84 45 ff ff ff    	je     c0018444 <CPU::detectFeatures()+0x7a2>
c00184ff:	83 f8 04             	cmp    eax,0x4
c0018502:	0f 84 4d ff ff ff    	je     c0018455 <CPU::detectFeatures()+0x7b3>
c0018508:	83 f8 03             	cmp    eax,0x3
c001850b:	0f 85 74 01 00 00    	jne    c0018685 <CPU::detectFeatures()+0x9e3>
c0018511:	51                   	push   ecx
c0018512:	51                   	push   ecx
c0018513:	68 e5 81 02 c0       	push   0xc00281e5
c0018518:	53                   	push   ebx
c0018519:	e8 46 b3 ff ff       	call   c0013864 <Device::setName(char const*)>
c001851e:	b1 c1                	mov    cl,0xc1
c0018520:	88 c8                	mov    al,cl
c0018522:	e6 22                	out    0x22,al
c0018524:	e4 23                	in     al,0x23
c0018526:	88 c2                	mov    dl,al
c0018528:	88 c8                	mov    al,cl
c001852a:	e6 22                	out    0x22,al
c001852c:	88 d0                	mov    al,dl
c001852e:	83 c8 10             	or     eax,0x10
c0018531:	e6 23                	out    0x23,al
c0018533:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001853a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001853d:	89 d0                	mov    eax,edx
c001853f:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0018545:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018549:	40                   	inc    eax
c001854a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018550:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018555:	e9 a1 00 00 00       	jmp    c00185fb <CPU::detectFeatures()+0x959>
c001855a:	83 f8 06             	cmp    eax,0x6
c001855d:	0f 84 e1 fe ff ff    	je     c0018444 <CPU::detectFeatures()+0x7a2>
c0018563:	83 f8 04             	cmp    eax,0x4
c0018566:	0f 84 e9 fe ff ff    	je     c0018455 <CPU::detectFeatures()+0x7b3>
c001856c:	83 f8 03             	cmp    eax,0x3
c001856f:	0f 85 10 01 00 00    	jne    c0018685 <CPU::detectFeatures()+0x9e3>
c0018575:	52                   	push   edx
c0018576:	52                   	push   edx
c0018577:	68 f0 81 02 c0       	push   0xc00281f0
c001857c:	eb 77                	jmp    c00185f5 <CPU::detectFeatures()+0x953>
c001857e:	83 f8 07             	cmp    eax,0x7
c0018581:	75 09                	jne    c001858c <CPU::detectFeatures()+0x8ea>
c0018583:	50                   	push   eax
c0018584:	50                   	push   eax
c0018585:	68 fa 81 02 c0       	push   0xc00281fa
c001858a:	eb 69                	jmp    c00185f5 <CPU::detectFeatures()+0x953>
c001858c:	83 f8 0a             	cmp    eax,0xa
c001858f:	75 09                	jne    c001859a <CPU::detectFeatures()+0x8f8>
c0018591:	50                   	push   eax
c0018592:	50                   	push   eax
c0018593:	68 05 82 02 c0       	push   0xc0028205
c0018598:	eb 5b                	jmp    c00185f5 <CPU::detectFeatures()+0x953>
c001859a:	83 f8 0b             	cmp    eax,0xb
c001859d:	75 09                	jne    c00185a8 <CPU::detectFeatures()+0x906>
c001859f:	50                   	push   eax
c00185a0:	50                   	push   eax
c00185a1:	68 0d 82 02 c0       	push   0xc002820d
c00185a6:	eb 4d                	jmp    c00185f5 <CPU::detectFeatures()+0x953>
c00185a8:	83 f8 08             	cmp    eax,0x8
c00185ab:	75 09                	jne    c00185b6 <CPU::detectFeatures()+0x914>
c00185ad:	50                   	push   eax
c00185ae:	50                   	push   eax
c00185af:	68 16 82 02 c0       	push   0xc0028216
c00185b4:	eb 3f                	jmp    c00185f5 <CPU::detectFeatures()+0x953>
c00185b6:	83 f8 09             	cmp    eax,0x9
c00185b9:	75 09                	jne    c00185c4 <CPU::detectFeatures()+0x922>
c00185bb:	50                   	push   eax
c00185bc:	50                   	push   eax
c00185bd:	68 1e 82 02 c0       	push   0xc002821e
c00185c2:	eb 31                	jmp    c00185f5 <CPU::detectFeatures()+0x953>
c00185c4:	83 f8 05             	cmp    eax,0x5
c00185c7:	75 09                	jne    c00185d2 <CPU::detectFeatures()+0x930>
c00185c9:	50                   	push   eax
c00185ca:	50                   	push   eax
c00185cb:	68 26 82 02 c0       	push   0xc0028226
c00185d0:	eb 23                	jmp    c00185f5 <CPU::detectFeatures()+0x953>
c00185d2:	83 f8 0c             	cmp    eax,0xc
c00185d5:	75 09                	jne    c00185e0 <CPU::detectFeatures()+0x93e>
c00185d7:	55                   	push   ebp
c00185d8:	55                   	push   ebp
c00185d9:	68 34 82 02 c0       	push   0xc0028234
c00185de:	eb 15                	jmp    c00185f5 <CPU::detectFeatures()+0x953>
c00185e0:	83 f8 0d             	cmp    eax,0xd
c00185e3:	75 09                	jne    c00185ee <CPU::detectFeatures()+0x94c>
c00185e5:	57                   	push   edi
c00185e6:	57                   	push   edi
c00185e7:	68 3f 82 02 c0       	push   0xc002823f
c00185ec:	eb 07                	jmp    c00185f5 <CPU::detectFeatures()+0x953>
c00185ee:	56                   	push   esi
c00185ef:	56                   	push   esi
c00185f0:	68 53 82 02 c0       	push   0xc0028253
c00185f5:	53                   	push   ebx
c00185f6:	e8 69 b2 ff ff       	call   c0013864 <Device::setName(char const*)>
c00185fb:	83 c4 10             	add    esp,0x10
c00185fe:	e9 82 00 00 00       	jmp    c0018685 <CPU::detectFeatures()+0x9e3>
c0018603:	51                   	push   ecx
c0018604:	51                   	push   ecx
c0018605:	68 9f 80 02 c0       	push   0xc002809f
c001860a:	57                   	push   edi
c001860b:	e8 54 81 fe ff       	call   c0000764 <strcpy>
c0018610:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001861a:	e8 44 7c fe ff       	call   c0000263 <is486>
c001861f:	83 c4 10             	add    esp,0x10
c0018622:	85 c0                	test   eax,eax
c0018624:	74 2d                	je     c0018653 <CPU::detectFeatures()+0x9b1>
c0018626:	52                   	push   edx
c0018627:	52                   	push   edx
c0018628:	68 5f 82 02 c0       	push   0xc002825f
c001862d:	53                   	push   ebx
c001862e:	e8 31 b2 ff ff       	call   c0013864 <Device::setName(char const*)>
c0018633:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001863a:	e8 e9 cf 00 00       	call   c0025628 <CPU::readCR0()>
c001863f:	83 c4 10             	add    esp,0x10
c0018642:	83 e0 14             	and    eax,0x14
c0018645:	83 f8 04             	cmp    eax,0x4
c0018648:	75 1f                	jne    c0018669 <CPU::detectFeatures()+0x9c7>
c001864a:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0018651:	eb 32                	jmp    c0018685 <CPU::detectFeatures()+0x9e3>
c0018653:	50                   	push   eax
c0018654:	50                   	push   eax
c0018655:	68 6a 82 02 c0       	push   0xc002826a
c001865a:	53                   	push   ebx
c001865b:	e8 04 b2 ff ff       	call   c0013864 <Device::setName(char const*)>
c0018660:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0018667:	eb d1                	jmp    c001863a <CPU::detectFeatures()+0x998>
c0018669:	e8 d0 7b fe ff       	call   c000023e <hasLegacyFPU>
c001866e:	83 e0 01             	and    eax,0x1
c0018671:	8d 14 00             	lea    edx,[eax+eax*1]
c0018674:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001867a:	83 e0 fd             	and    eax,0xfffffffd
c001867d:	09 d0                	or     eax,edx
c001867f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018685:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001868c:	83 c4 4c             	add    esp,0x4c
c001868f:	5b                   	pop    ebx
c0018690:	5e                   	pop    esi
c0018691:	5f                   	pop    edi
c0018692:	5d                   	pop    ebp
c0018693:	c3                   	ret    

c0018694 <CPU::setupSMEP()>:
c0018694:	83 ec 0c             	sub    esp,0xc
c0018697:	e8 56 d2 00 00       	call   c00258f2 <CPU::readCR4()>
c001869c:	0d 00 00 10 00       	or     eax,0x100000
c00186a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00186a5:	83 c4 0c             	add    esp,0xc
c00186a8:	e9 60 d2 00 00       	jmp    c002590d <CPU::writeCR4(unsigned long)>
c00186ad:	90                   	nop

c00186ae <CPU::setupUMIP()>:
c00186ae:	83 ec 0c             	sub    esp,0xc
c00186b1:	e8 3c d2 00 00       	call   c00258f2 <CPU::readCR4()>
c00186b6:	80 cc 08             	or     ah,0x8
c00186b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00186bd:	83 c4 0c             	add    esp,0xc
c00186c0:	e9 48 d2 00 00       	jmp    c002590d <CPU::writeCR4(unsigned long)>
c00186c5:	90                   	nop

c00186c6 <CPU::setupTSC()>:
c00186c6:	83 ec 0c             	sub    esp,0xc
c00186c9:	e8 24 d2 00 00       	call   c00258f2 <CPU::readCR4()>
c00186ce:	83 c8 04             	or     eax,0x4
c00186d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00186d5:	83 c4 0c             	add    esp,0xc
c00186d8:	e9 30 d2 00 00       	jmp    c002590d <CPU::writeCR4(unsigned long)>
c00186dd:	90                   	nop

c00186de <CPU::setupLargePages()>:
c00186de:	83 ec 0c             	sub    esp,0xc
c00186e1:	e8 0c d2 00 00       	call   c00258f2 <CPU::readCR4()>
c00186e6:	83 c8 10             	or     eax,0x10
c00186e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00186ed:	83 c4 0c             	add    esp,0xc
c00186f0:	e9 18 d2 00 00       	jmp    c002590d <CPU::writeCR4(unsigned long)>
c00186f5:	90                   	nop

c00186f6 <CPU::setupPAT()>:
c00186f6:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c00186fb:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0018702:	74 2c                	je     c0018730 <CPU::setupPAT()+0x3a>
c0018704:	53                   	push   ebx
c0018705:	83 ec 10             	sub    esp,0x10
c0018708:	68 77 02 00 00       	push   0x277
c001870d:	50                   	push   eax
c001870e:	e8 fb 5f ff ff       	call   c000e70e <Computer::rdmsr(unsigned int)>
c0018713:	83 e2 f8             	and    edx,0xfffffff8
c0018716:	83 ca 01             	or     edx,0x1
c0018719:	52                   	push   edx
c001871a:	50                   	push   eax
c001871b:	68 77 02 00 00       	push   0x277
c0018720:	ff 35 88 a6 02 c0    	push   DWORD PTR ds:0xc002a688
c0018726:	e8 0f 60 ff ff       	call   c000e73a <Computer::wrmsr(unsigned int, unsigned long long)>
c001872b:	83 c4 28             	add    esp,0x28
c001872e:	5b                   	pop    ebx
c001872f:	c3                   	ret    
c0018730:	c3                   	ret    
c0018731:	90                   	nop

c0018732 <CPU::setupMTRR()>:
c0018732:	c3                   	ret    
c0018733:	90                   	nop

c0018734 <CPU::setupGlobalPages()>:
c0018734:	83 ec 0c             	sub    esp,0xc
c0018737:	e8 b6 d1 00 00       	call   c00258f2 <CPU::readCR4()>
c001873c:	0c 80                	or     al,0x80
c001873e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018742:	83 c4 0c             	add    esp,0xc
c0018745:	e9 c3 d1 00 00       	jmp    c002590d <CPU::writeCR4(unsigned long)>

c001874a <CPU::allowUsermodeDataAccess()>:
c001874a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001874e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018755:	74 03                	je     c001875a <CPU::allowUsermodeDataAccess()+0x10>
c0018757:	0f 01 cb             	stac   
c001875a:	c3                   	ret    
c001875b:	90                   	nop

c001875c <CPU::prohibitUsermodeDataAccess()>:
c001875c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018760:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018767:	74 03                	je     c001876c <CPU::prohibitUsermodeDataAccess()+0x10>
c0018769:	0f 01 ca             	clac   
c001876c:	c3                   	ret    
c001876d:	90                   	nop

c001876e <CPU::setupSMAP()>:
c001876e:	53                   	push   ebx
c001876f:	83 ec 08             	sub    esp,0x8
c0018772:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018776:	e8 77 d1 00 00       	call   c00258f2 <CPU::readCR4()>
c001877b:	83 ec 0c             	sub    esp,0xc
c001877e:	0d 00 00 20 00       	or     eax,0x200000
c0018783:	50                   	push   eax
c0018784:	e8 84 d1 00 00       	call   c002590d <CPU::writeCR4(unsigned long)>
c0018789:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001878d:	83 c4 18             	add    esp,0x18
c0018790:	5b                   	pop    ebx
c0018791:	eb c9                	jmp    c001875c <CPU::prohibitUsermodeDataAccess()>
c0018793:	90                   	nop

c0018794 <CPU::setupFeatures()>:
c0018794:	53                   	push   ebx
c0018795:	83 ec 08             	sub    esp,0x8
c0018798:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001879c:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00187a3:	74 0c                	je     c00187b1 <CPU::setupFeatures()+0x1d>
c00187a5:	83 ec 0c             	sub    esp,0xc
c00187a8:	53                   	push   ebx
c00187a9:	e8 e6 fe ff ff       	call   c0018694 <CPU::setupSMEP()>
c00187ae:	83 c4 10             	add    esp,0x10
c00187b1:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00187b8:	74 0c                	je     c00187c6 <CPU::setupFeatures()+0x32>
c00187ba:	83 ec 0c             	sub    esp,0xc
c00187bd:	53                   	push   ebx
c00187be:	e8 ab ff ff ff       	call   c001876e <CPU::setupSMAP()>
c00187c3:	83 c4 10             	add    esp,0x10
c00187c6:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00187cd:	74 0c                	je     c00187db <CPU::setupFeatures()+0x47>
c00187cf:	83 ec 0c             	sub    esp,0xc
c00187d2:	53                   	push   ebx
c00187d3:	e8 d6 fe ff ff       	call   c00186ae <CPU::setupUMIP()>
c00187d8:	83 c4 10             	add    esp,0x10
c00187db:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00187e2:	74 0c                	je     c00187f0 <CPU::setupFeatures()+0x5c>
c00187e4:	83 ec 0c             	sub    esp,0xc
c00187e7:	53                   	push   ebx
c00187e8:	e8 d9 fe ff ff       	call   c00186c6 <CPU::setupTSC()>
c00187ed:	83 c4 10             	add    esp,0x10
c00187f0:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00187f7:	74 0c                	je     c0018805 <CPU::setupFeatures()+0x71>
c00187f9:	83 ec 0c             	sub    esp,0xc
c00187fc:	53                   	push   ebx
c00187fd:	e8 dc fe ff ff       	call   c00186de <CPU::setupLargePages()>
c0018802:	83 c4 10             	add    esp,0x10
c0018805:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001880c:	74 0c                	je     c001881a <CPU::setupFeatures()+0x86>
c001880e:	83 ec 0c             	sub    esp,0xc
c0018811:	53                   	push   ebx
c0018812:	e8 1d ff ff ff       	call   c0018734 <CPU::setupGlobalPages()>
c0018817:	83 c4 10             	add    esp,0x10
c001881a:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018821:	74 0d                	je     c0018830 <CPU::setupFeatures()+0x9c>
c0018823:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018827:	83 c4 08             	add    esp,0x8
c001882a:	5b                   	pop    ebx
c001882b:	e9 c6 fe ff ff       	jmp    c00186f6 <CPU::setupPAT()>
c0018830:	83 c4 08             	add    esp,0x8
c0018833:	5b                   	pop    ebx
c0018834:	c3                   	ret    
c0018835:	90                   	nop

c0018836 <CPU::open(int, int, void*)>:
c0018836:	57                   	push   edi
c0018837:	56                   	push   esi
c0018838:	53                   	push   ebx
c0018839:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001883d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018841:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0018847:	83 ec 0c             	sub    esp,0xc
c001884a:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0018850:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0018856:	50                   	push   eax
c0018857:	e8 9e 61 ff ff       	call   c000e9fa <GDT::setup()>
c001885c:	83 c4 0c             	add    esp,0xc
c001885f:	6a 00                	push   0x0
c0018861:	68 ef be ad de       	push   0xdeadbeef
c0018866:	57                   	push   edi
c0018867:	e8 f6 83 ff ff       	call   c0010c62 <TSS::setup(unsigned long, unsigned long)>
c001886c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001886f:	e8 ce 83 ff ff       	call   c0010c42 <TSS::flush()>
c0018874:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001887a:	89 04 24             	mov    DWORD PTR [esp],eax
c001887d:	e8 d2 63 ff ff       	call   c000ec54 <IDT::setup()>
c0018882:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0018889:	e8 76 d0 00 00       	call   c0025904 <CPU::writeDR7(unsigned long)>
c001888e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0018898:	e8 7b 6e ff ff       	call   c000f718 <Phys::allocatePage()>
c001889d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00188a3:	89 30                	mov    DWORD PTR [eax],esi
c00188a5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00188ab:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00188ae:	58                   	pop    eax
c00188af:	5a                   	pop    edx
c00188b0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00188b6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00188ba:	e8 89 93 ff ff       	call   c0011c48 <VAS::setCPUSpecific(unsigned long)>
c00188bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00188c2:	e8 db f3 ff ff       	call   c0017ca2 <CPU::detectFeatures()>
c00188c7:	e8 88 c2 ff ff       	call   c0014b54 <setupInterruptController()>
c00188cc:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00188d2:	a1 a0 a6 02 c0       	mov    eax,ds:0xc002a6a0
c00188d7:	83 e0 10             	and    eax,0x10
c00188da:	83 f8 01             	cmp    eax,0x1
c00188dd:	19 c0                	sbb    eax,eax
c00188df:	83 e0 46             	and    eax,0x46
c00188e2:	83 c0 1e             	add    eax,0x1e
c00188e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00188e8:	e8 11 d6 ff ff       	call   c0015efe <setupTimer(int)>
c00188ed:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00188f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00188f6:	e8 99 fe ff ff       	call   c0018794 <CPU::setupFeatures()>
c00188fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00188fe:	e8 23 f1 ff ff       	call   c0017a26 <CPU::displayFeatures()>
c0018903:	83 c4 10             	add    esp,0x10
c0018906:	31 c0                	xor    eax,eax
c0018908:	5b                   	pop    ebx
c0018909:	5e                   	pop    esi
c001890a:	5f                   	pop    edi
c001890b:	c3                   	ret    

c001890c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001890c:	57                   	push   edi
c001890d:	56                   	push   esi
c001890e:	53                   	push   ebx
c001890f:	51                   	push   ecx
c0018910:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018914:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0018917:	0f 02 c0             	lar    eax,ax
c001891a:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001891d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018921:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0018924:	88 ca                	mov    dl,cl
c0018926:	c0 ea 06             	shr    dl,0x6
c0018929:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001892d:	89 ca                	mov    edx,ecx
c001892f:	66 c1 ea 03          	shr    dx,0x3
c0018933:	83 e2 07             	and    edx,0x7
c0018936:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001893b:	88 17                	mov    BYTE PTR [edi],dl
c001893d:	0f 84 a6 01 00 00    	je     c0018ae9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0018943:	83 e1 07             	and    ecx,0x7
c0018946:	80 f9 04             	cmp    cl,0x4
c0018949:	0f 84 98 00 00 00    	je     c00189e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001894f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018954:	0f 95 c0             	setne  al
c0018957:	80 f9 05             	cmp    cl,0x5
c001895a:	0f 95 c2             	setne  dl
c001895d:	08 c2                	or     dl,al
c001895f:	74 79                	je     c00189da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0018961:	84 c9                	test   cl,cl
c0018963:	75 05                	jne    c001896a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0018965:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018968:	eb 3c                	jmp    c00189a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001896a:	80 f9 01             	cmp    cl,0x1
c001896d:	75 05                	jne    c0018974 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001896f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0018972:	eb 32                	jmp    c00189a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018974:	80 f9 02             	cmp    cl,0x2
c0018977:	75 05                	jne    c001897e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0018979:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001897c:	eb 28                	jmp    c00189a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001897e:	31 c0                	xor    eax,eax
c0018980:	80 f9 03             	cmp    cl,0x3
c0018983:	75 05                	jne    c001898a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0018985:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0018988:	eb 1c                	jmp    c00189a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001898a:	80 f9 05             	cmp    cl,0x5
c001898d:	75 05                	jne    c0018994 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001898f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0018992:	eb 12                	jmp    c00189a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018994:	80 f9 06             	cmp    cl,0x6
c0018997:	75 05                	jne    c001899e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0018999:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001899c:	eb 08                	jmp    c00189a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001899e:	80 f9 07             	cmp    cl,0x7
c00189a1:	75 03                	jne    c00189a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00189a3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00189a6:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00189ab:	75 10                	jne    c00189bd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00189ad:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00189b1:	b9 03 00 00 00       	mov    ecx,0x3
c00189b6:	01 d0                	add    eax,edx
c00189b8:	e9 37 01 00 00       	jmp    c0018af4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00189bd:	b9 02 00 00 00       	mov    ecx,0x2
c00189c2:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00189c7:	0f 85 27 01 00 00    	jne    c0018af4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00189cd:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00189d0:	b9 06 00 00 00       	mov    ecx,0x6
c00189d5:	e9 1a 01 00 00       	jmp    c0018af4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00189da:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00189dd:	b9 06 00 00 00       	mov    ecx,0x6
c00189e2:	e9 0f 01 00 00       	jmp    c0018af6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00189e7:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00189ea:	88 ca                	mov    dl,cl
c00189ec:	c0 ea 06             	shr    dl,0x6
c00189ef:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00189f3:	89 ca                	mov    edx,ecx
c00189f5:	66 c1 ea 03          	shr    dx,0x3
c00189f9:	83 e2 07             	and    edx,0x7
c00189fc:	80 e1 07             	and    cl,0x7
c00189ff:	75 05                	jne    c0018a06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0018a01:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0018a04:	eb 4c                	jmp    c0018a52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018a06:	80 f9 01             	cmp    cl,0x1
c0018a09:	75 05                	jne    c0018a10 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0018a0b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0018a0e:	eb 42                	jmp    c0018a52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018a10:	80 f9 02             	cmp    cl,0x2
c0018a13:	75 05                	jne    c0018a1a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0018a15:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0018a18:	eb 38                	jmp    c0018a52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018a1a:	80 f9 03             	cmp    cl,0x3
c0018a1d:	75 05                	jne    c0018a24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0018a1f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0018a22:	eb 2e                	jmp    c0018a52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018a24:	80 f9 04             	cmp    cl,0x4
c0018a27:	75 12                	jne    c0018a3b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0018a29:	f6 c4 60             	test   ah,0x60
c0018a2c:	75 08                	jne    c0018a36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0018a2e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0018a31:	8d 78 14             	lea    edi,[eax+0x14]
c0018a34:	eb 1c                	jmp    c0018a52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018a36:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0018a39:	eb 17                	jmp    c0018a52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018a3b:	80 f9 05             	cmp    cl,0x5
c0018a3e:	75 05                	jne    c0018a45 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0018a40:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0018a43:	eb 0d                	jmp    c0018a52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018a45:	80 f9 06             	cmp    cl,0x6
c0018a48:	75 05                	jne    c0018a4f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0018a4a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0018a4d:	eb 03                	jmp    c0018a52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018a4f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0018a52:	84 d2                	test   dl,dl
c0018a54:	75 05                	jne    c0018a5b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0018a56:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018a59:	eb 3c                	jmp    c0018a97 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018a5b:	80 fa 01             	cmp    dl,0x1
c0018a5e:	75 05                	jne    c0018a65 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0018a60:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0018a63:	eb 32                	jmp    c0018a97 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018a65:	80 fa 02             	cmp    dl,0x2
c0018a68:	75 05                	jne    c0018a6f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0018a6a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0018a6d:	eb 28                	jmp    c0018a97 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018a6f:	80 fa 03             	cmp    dl,0x3
c0018a72:	75 05                	jne    c0018a79 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0018a74:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0018a77:	eb 1e                	jmp    c0018a97 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018a79:	31 c0                	xor    eax,eax
c0018a7b:	80 fa 04             	cmp    dl,0x4
c0018a7e:	74 17                	je     c0018a97 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018a80:	80 fa 05             	cmp    dl,0x5
c0018a83:	75 05                	jne    c0018a8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0018a85:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0018a88:	eb 0d                	jmp    c0018a97 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018a8a:	80 fa 06             	cmp    dl,0x6
c0018a8d:	75 05                	jne    c0018a94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0018a8f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018a92:	eb 03                	jmp    c0018a97 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018a94:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018a97:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018a9c:	0f 94 c2             	sete   dl
c0018a9f:	80 f9 05             	cmp    cl,0x5
c0018aa2:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0018aa6:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0018aab:	d3 e0                	shl    eax,cl
c0018aad:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0018ab1:	74 0a                	je     c0018abd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0018ab3:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0018ab6:	b9 07 00 00 00       	mov    ecx,0x7
c0018abb:	eb 37                	jmp    c0018af4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0018abd:	01 f8                	add    eax,edi
c0018abf:	b9 03 00 00 00       	mov    ecx,0x3
c0018ac4:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018ac9:	74 2b                	je     c0018af6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018acb:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0018ad0:	75 0d                	jne    c0018adf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0018ad2:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0018ad6:	01 c8                	add    eax,ecx
c0018ad8:	b9 04 00 00 00       	mov    ecx,0x4
c0018add:	eb 17                	jmp    c0018af6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018adf:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0018ae2:	b9 07 00 00 00       	mov    ecx,0x7
c0018ae7:	eb 0d                	jmp    c0018af6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018ae9:	b9 02 00 00 00       	mov    ecx,0x2
c0018aee:	b2 01                	mov    dl,0x1
c0018af0:	31 c0                	xor    eax,eax
c0018af2:	eb 02                	jmp    c0018af6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018af4:	31 d2                	xor    edx,edx
c0018af6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018afa:	89 0b                	mov    DWORD PTR [ebx],ecx
c0018afc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018b00:	88 11                	mov    BYTE PTR [ecx],dl
c0018b02:	5a                   	pop    edx
c0018b03:	5b                   	pop    ebx
c0018b04:	5e                   	pop    esi
c0018b05:	5f                   	pop    edi
c0018b06:	c3                   	ret    

c0018b07 <Krnl::panic(char const*)>:
c0018b07:	55                   	push   ebp
c0018b08:	89 e5                	mov    ebp,esp
c0018b0a:	53                   	push   ebx
c0018b0b:	50                   	push   eax
c0018b0c:	a1 90 b1 02 c0       	mov    eax,ds:0xc002b190
c0018b11:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0018b14:	85 c0                	test   eax,eax
c0018b16:	74 02                	je     c0018b1a <Krnl::panic(char const*)+0x13>
c0018b18:	ff d0                	call   eax
c0018b1a:	fa                   	cli    
c0018b1b:	c6 05 94 b1 02 c0 01 	mov    BYTE PTR ds:0xc002b194,0x1
c0018b22:	83 ec 08             	sub    esp,0x8
c0018b25:	c6 05 40 96 02 c0 00 	mov    BYTE PTR ds:0xc0029640,0x0
c0018b2c:	53                   	push   ebx
c0018b2d:	68 a4 82 02 c0       	push   0xc00282a4
c0018b32:	e8 40 97 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0018b37:	58                   	pop    eax
c0018b38:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018b3d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b43:	e8 5b 79 ff ff       	call   c00104a3 <setActiveTerminal(VgaText*)>
c0018b48:	83 c4 0c             	add    esp,0xc
c0018b4b:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018b50:	6a 01                	push   0x1
c0018b52:	6a 0f                	push   0xf
c0018b54:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b5a:	e8 83 73 ff ff       	call   c000fee2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018b5f:	5a                   	pop    edx
c0018b60:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018b65:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b6b:	e8 d4 7b ff ff       	call   c0010744 <VgaText::clearScreen()>
c0018b70:	59                   	pop    ecx
c0018b71:	58                   	pop    eax
c0018b72:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018b77:	68 bd 82 02 c0       	push   0xc00282bd
c0018b7c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b82:	e8 3b 7d ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018b87:	58                   	pop    eax
c0018b88:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018b8d:	5a                   	pop    edx
c0018b8e:	68 64 83 02 c0       	push   0xc0028364
c0018b93:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b99:	e8 24 7d ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018b9e:	59                   	pop    ecx
c0018b9f:	58                   	pop    eax
c0018ba0:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018ba5:	68 d9 82 02 c0       	push   0xc00282d9
c0018baa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bb0:	e8 0d 7d ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018bb5:	58                   	pop    eax
c0018bb6:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018bbb:	5a                   	pop    edx
c0018bbc:	53                   	push   ebx
c0018bbd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bc3:	e8 fa 7c ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018bc8:	59                   	pop    ecx
c0018bc9:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018bce:	5b                   	pop    ebx
c0018bcf:	68 f9 82 02 c0       	push   0xc00282f9
c0018bd4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bda:	e8 e3 7c ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018bdf:	58                   	pop    eax
c0018be0:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018be5:	5a                   	pop    edx
c0018be6:	68 a0 83 02 c0       	push   0xc00283a0
c0018beb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bf1:	e8 cc 7c ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018bf6:	59                   	pop    ecx
c0018bf7:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018bfc:	5b                   	pop    ebx
c0018bfd:	68 d9 82 02 c0       	push   0xc00282d9
c0018c02:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c08:	e8 b5 7c ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018c0d:	58                   	pop    eax
c0018c0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018c13:	5a                   	pop    edx
c0018c14:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018c17:	83 c0 0c             	add    eax,0xc
c0018c1a:	50                   	push   eax
c0018c1b:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018c20:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c26:	e8 97 7c ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018c2b:	59                   	pop    ecx
c0018c2c:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018c31:	5b                   	pop    ebx
c0018c32:	68 f8 82 02 c0       	push   0xc00282f8
c0018c37:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c3d:	e8 80 7c ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018c42:	58                   	pop    eax
c0018c43:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018c48:	5a                   	pop    edx
c0018c49:	68 cc 83 02 c0       	push   0xc00283cc
c0018c4e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c54:	e8 69 7c ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018c59:	59                   	pop    ecx
c0018c5a:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018c5f:	5b                   	pop    ebx
c0018c60:	68 0c 84 02 c0       	push   0xc002840c
c0018c65:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c6b:	e8 52 7c ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018c70:	58                   	pop    eax
c0018c71:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018c76:	5a                   	pop    edx
c0018c77:	68 e4 82 02 c0       	push   0xc00282e4
c0018c7c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c82:	e8 3b 7c ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018c87:	59                   	pop    ecx
c0018c88:	5b                   	pop    ebx
c0018c89:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0018c8c:	68 fc 82 02 c0       	push   0xc00282fc
c0018c91:	e8 e1 95 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0018c96:	58                   	pop    eax
c0018c97:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018c9a:	5a                   	pop    edx
c0018c9b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0018c9e:	68 05 83 02 c0       	push   0xc0028305
c0018ca3:	e8 cf 95 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0018ca8:	59                   	pop    ecx
c0018ca9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018cac:	5b                   	pop    ebx
c0018cad:	8b 00                	mov    eax,DWORD PTR [eax]
c0018caf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0018cb2:	68 0e 83 02 c0       	push   0xc002830e
c0018cb7:	e8 bb 95 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0018cbc:	58                   	pop    eax
c0018cbd:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018cc2:	5a                   	pop    edx
c0018cc3:	68 50 84 02 c0       	push   0xc0028450
c0018cc8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018cce:	e8 ef 7b ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018cd3:	59                   	pop    ecx
c0018cd4:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018cd9:	5b                   	pop    ebx
c0018cda:	68 17 83 02 c0       	push   0xc0028317
c0018cdf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ce5:	e8 d8 7b ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018cea:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018cef:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018cf5:	e8 2e c9 00 00       	call   c0025628 <CPU::readCR0()>
c0018cfa:	5a                   	pop    edx
c0018cfb:	59                   	pop    ecx
c0018cfc:	50                   	push   eax
c0018cfd:	53                   	push   ebx
c0018cfe:	e8 e5 7b ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c0018d03:	5b                   	pop    ebx
c0018d04:	58                   	pop    eax
c0018d05:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018d0a:	68 21 83 02 c0       	push   0xc0028321
c0018d0f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018d15:	e8 a8 7b ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018d1a:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018d1f:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018d25:	e8 ec cb 00 00       	call   c0025916 <CPU::readCR2()>
c0018d2a:	5a                   	pop    edx
c0018d2b:	59                   	pop    ecx
c0018d2c:	50                   	push   eax
c0018d2d:	53                   	push   ebx
c0018d2e:	e8 b5 7b ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c0018d33:	5b                   	pop    ebx
c0018d34:	58                   	pop    eax
c0018d35:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018d3a:	68 2b 83 02 c0       	push   0xc002832b
c0018d3f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018d45:	e8 78 7b ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018d4a:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018d4f:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018d55:	e8 5b c5 00 00       	call   c00252b5 <CPU::readCR3()>
c0018d5a:	5a                   	pop    edx
c0018d5b:	59                   	pop    ecx
c0018d5c:	50                   	push   eax
c0018d5d:	53                   	push   ebx
c0018d5e:	e8 85 7b ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c0018d63:	5b                   	pop    ebx
c0018d64:	58                   	pop    eax
c0018d65:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018d6a:	68 3e 83 02 c0       	push   0xc002833e
c0018d6f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018d75:	e8 48 7b ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018d7a:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018d7f:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018d85:	e8 68 cb 00 00       	call   c00258f2 <CPU::readCR4()>
c0018d8a:	5a                   	pop    edx
c0018d8b:	59                   	pop    ecx
c0018d8c:	50                   	push   eax
c0018d8d:	53                   	push   ebx
c0018d8e:	e8 55 7b ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c0018d93:	5b                   	pop    ebx
c0018d94:	58                   	pop    eax
c0018d95:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018d9a:	68 48 83 02 c0       	push   0xc0028348
c0018d9f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018da5:	e8 18 7b ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018daa:	5a                   	pop    edx
c0018dab:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018db0:	59                   	pop    ecx
c0018db1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018db7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0018dba:	50                   	push   eax
c0018dbb:	e8 28 7b ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c0018dc0:	5b                   	pop    ebx
c0018dc1:	58                   	pop    eax
c0018dc2:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018dc7:	68 5f 83 02 c0       	push   0xc002835f
c0018dcc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018dd2:	e8 eb 7a ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018dd7:	5a                   	pop    edx
c0018dd8:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018ddd:	59                   	pop    ecx
c0018dde:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018de4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0018de7:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0018dea:	50                   	push   eax
c0018deb:	e8 f8 7a ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c0018df0:	5b                   	pop    ebx
c0018df1:	58                   	pop    eax
c0018df2:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018df7:	68 5f 83 02 c0       	push   0xc002835f
c0018dfc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018e02:	e8 bb 7a ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018e07:	59                   	pop    ecx
c0018e08:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0018e0d:	5b                   	pop    ebx
c0018e0e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018e14:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0018e17:	8b 12                	mov    edx,DWORD PTR [edx]
c0018e19:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0018e1c:	50                   	push   eax
c0018e1d:	e8 c6 7a ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c0018e22:	83 c4 10             	add    esp,0x10
c0018e25:	b2 fe                	mov    dl,0xfe
c0018e27:	e4 60                	in     al,0x60
c0018e29:	3c 1c                	cmp    al,0x1c
c0018e2b:	74 04                	je     c0018e31 <Krnl::panic(char const*)+0x32a>
c0018e2d:	3c 5a                	cmp    al,0x5a
c0018e2f:	75 f6                	jne    c0018e27 <Krnl::panic(char const*)+0x320>
c0018e31:	e4 64                	in     al,0x64
c0018e33:	a8 02                	test   al,0x2
c0018e35:	75 fa                	jne    c0018e31 <Krnl::panic(char const*)+0x32a>
c0018e37:	88 d0                	mov    al,dl
c0018e39:	e6 64                	out    0x64,al
c0018e3b:	fa                   	cli    
c0018e3c:	f4                   	hlt    
c0018e3d:	eb e8                	jmp    c0018e27 <Krnl::panic(char const*)+0x320>

c0018e3f <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0018e3f:	55                   	push   ebp
c0018e40:	57                   	push   edi
c0018e41:	56                   	push   esi
c0018e42:	53                   	push   ebx
c0018e43:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018e49:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0018e50:	8a 1e                	mov    bl,BYTE PTR [esi]
c0018e52:	8d 6e 01             	lea    ebp,[esi+0x1]
c0018e55:	80 fb 40             	cmp    bl,0x40
c0018e58:	75 1b                	jne    c0018e75 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0018e5a:	8a 16                	mov    dl,BYTE PTR [esi]
c0018e5c:	84 d2                	test   dl,dl
c0018e5e:	0f 84 f1 00 00 00    	je     c0018f55 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018e64:	8d 46 01             	lea    eax,[esi+0x1]
c0018e67:	80 fa 3a             	cmp    dl,0x3a
c0018e6a:	74 04                	je     c0018e70 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0018e6c:	89 c6                	mov    esi,eax
c0018e6e:	eb ea                	jmp    c0018e5a <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0018e70:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0018e73:	89 c6                	mov    esi,eax
c0018e75:	50                   	push   eax
c0018e76:	6a 40                	push   0x40
c0018e78:	6a 00                	push   0x0
c0018e7a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018e7e:	50                   	push   eax
c0018e7f:	e8 41 78 fe ff       	call   c00006c5 <memset>
c0018e84:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0018e8b:	31 c0                	xor    eax,eax
c0018e8d:	83 c4 10             	add    esp,0x10
c0018e90:	8a 0f                	mov    cl,BYTE PTR [edi]
c0018e92:	84 c9                	test   cl,cl
c0018e94:	0f 84 bb 00 00 00    	je     c0018f55 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018e9a:	3d c7 00 00 00       	cmp    eax,0xc7
c0018e9f:	0f 8f b0 00 00 00    	jg     c0018f55 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018ea5:	80 f9 0a             	cmp    cl,0xa
c0018ea8:	0f 85 98 00 00 00    	jne    c0018f46 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0018eae:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0018eb3:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0018eb7:	a8 df                	test   al,0xdf
c0018eb9:	0f 94 c1             	sete   cl
c0018ebc:	3c 23                	cmp    al,0x23
c0018ebe:	0f 94 c2             	sete   dl
c0018ec1:	08 d1                	or     cl,dl
c0018ec3:	75 4a                	jne    c0018f0f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018ec5:	8d 50 f7             	lea    edx,[eax-0x9]
c0018ec8:	80 fa 01             	cmp    dl,0x1
c0018ecb:	76 42                	jbe    c0018f0f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018ecd:	3c 5b                	cmp    al,0x5b
c0018ecf:	75 42                	jne    c0018f13 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0018ed1:	80 fb 40             	cmp    bl,0x40
c0018ed4:	75 39                	jne    c0018f0f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018ed6:	83 ec 0c             	sub    esp,0xc
c0018ed9:	8d 54 24 65          	lea    edx,[esp+0x65]
c0018edd:	52                   	push   edx
c0018ede:	e8 ff 77 fe ff       	call   c00006e2 <strlen>
c0018ee3:	83 c4 10             	add    esp,0x10
c0018ee6:	83 f8 3f             	cmp    eax,0x3f
c0018ee9:	77 6a                	ja     c0018f55 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018eeb:	50                   	push   eax
c0018eec:	50                   	push   eax
c0018eed:	8d 54 24 61          	lea    edx,[esp+0x61]
c0018ef1:	52                   	push   edx
c0018ef2:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018ef6:	52                   	push   edx
c0018ef7:	e8 68 78 fe ff       	call   c0000764 <strcpy>
c0018efc:	58                   	pop    eax
c0018efd:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018f01:	52                   	push   edx
c0018f02:	e8 db 77 fe ff       	call   c00006e2 <strlen>
c0018f07:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0018f0c:	83 c4 10             	add    esp,0x10
c0018f0f:	31 d2                	xor    edx,edx
c0018f11:	eb 3a                	jmp    c0018f4d <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0018f13:	80 fb 40             	cmp    bl,0x40
c0018f16:	74 06                	je     c0018f1e <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0018f18:	8d 44 24 58          	lea    eax,[esp+0x58]
c0018f1c:	eb 20                	jmp    c0018f3e <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0018f1e:	50                   	push   eax
c0018f1f:	50                   	push   eax
c0018f20:	55                   	push   ebp
c0018f21:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018f25:	50                   	push   eax
c0018f26:	e8 8a 78 fe ff       	call   c00007b5 <strcmp>
c0018f2b:	83 c4 10             	add    esp,0x10
c0018f2e:	85 c0                	test   eax,eax
c0018f30:	75 dd                	jne    c0018f0f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018f32:	eb e4                	jmp    c0018f18 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0018f34:	8d 50 01             	lea    edx,[eax+0x1]
c0018f37:	80 f9 3d             	cmp    cl,0x3d
c0018f3a:	74 1d                	je     c0018f59 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0018f3c:	89 d0                	mov    eax,edx
c0018f3e:	8a 08                	mov    cl,BYTE PTR [eax]
c0018f40:	84 c9                	test   cl,cl
c0018f42:	75 f0                	jne    c0018f34 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0018f44:	eb 0f                	jmp    c0018f55 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018f46:	8d 50 01             	lea    edx,[eax+0x1]
c0018f49:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0018f4d:	47                   	inc    edi
c0018f4e:	89 d0                	mov    eax,edx
c0018f50:	e9 3b ff ff ff       	jmp    c0018e90 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0018f55:	31 c0                	xor    eax,eax
c0018f57:	eb 33                	jmp    c0018f8c <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0018f59:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018f5d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018f60:	50                   	push   eax
c0018f61:	50                   	push   eax
c0018f62:	8d 44 24 60          	lea    eax,[esp+0x60]
c0018f66:	50                   	push   eax
c0018f67:	56                   	push   esi
c0018f68:	e8 48 78 fe ff       	call   c00007b5 <strcmp>
c0018f6d:	83 c4 10             	add    esp,0x10
c0018f70:	85 c0                	test   eax,eax
c0018f72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018f76:	75 97                	jne    c0018f0f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018f78:	51                   	push   ecx
c0018f79:	51                   	push   ecx
c0018f7a:	52                   	push   edx
c0018f7b:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018f82:	e8 dd 77 fe ff       	call   c0000764 <strcpy>
c0018f87:	83 c4 10             	add    esp,0x10
c0018f8a:	b0 01                	mov    al,0x1
c0018f8c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018f92:	5b                   	pop    ebx
c0018f93:	5e                   	pop    esi
c0018f94:	5f                   	pop    edi
c0018f95:	5d                   	pop    ebp
c0018f96:	c3                   	ret    

c0018f97 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0018f97:	57                   	push   edi
c0018f98:	56                   	push   esi
c0018f99:	53                   	push   ebx
c0018f9a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018fa0:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0018fa7:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0018fae:	53                   	push   ebx
c0018faf:	e8 2e 77 fe ff       	call   c00006e2 <strlen>
c0018fb4:	89 34 24             	mov    DWORD PTR [esp],esi
c0018fb7:	89 c7                	mov    edi,eax
c0018fb9:	e8 24 77 fe ff       	call   c00006e2 <strlen>
c0018fbe:	83 c4 10             	add    esp,0x10
c0018fc1:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0018fc5:	31 ff                	xor    edi,edi
c0018fc7:	3d ff 00 00 00       	cmp    eax,0xff
c0018fcc:	0f 87 18 01 00 00    	ja     c00190ea <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0018fd2:	51                   	push   ecx
c0018fd3:	51                   	push   ecx
c0018fd4:	56                   	push   esi
c0018fd5:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0018fd9:	56                   	push   esi
c0018fda:	e8 85 77 fe ff       	call   c0000764 <strcpy>
c0018fdf:	58                   	pop    eax
c0018fe0:	5a                   	pop    edx
c0018fe1:	68 48 88 02 c0       	push   0xc0028848
c0018fe6:	56                   	push   esi
c0018fe7:	e8 2f 78 fe ff       	call   c000081b <strcat>
c0018fec:	59                   	pop    ecx
c0018fed:	58                   	pop    eax
c0018fee:	53                   	push   ebx
c0018fef:	56                   	push   esi
c0018ff0:	e8 26 78 fe ff       	call   c000081b <strcat>
c0018ff5:	58                   	pop    eax
c0018ff6:	5a                   	pop    edx
c0018ff7:	68 76 84 02 c0       	push   0xc0028476
c0018ffc:	56                   	push   esi
c0018ffd:	e8 19 78 fe ff       	call   c000081b <strcat>
c0019002:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019009:	e8 7a 91 ff ff       	call   c0012188 <operator new(unsigned long)>
c001900e:	83 c4 0c             	add    esp,0xc
c0019011:	89 c3                	mov    ebx,eax
c0019013:	ff 35 94 bb 02 c0    	push   DWORD PTR ds:0xc002bb94
c0019019:	56                   	push   esi
c001901a:	50                   	push   eax
c001901b:	e8 86 97 ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c0019020:	59                   	pop    ecx
c0019021:	5e                   	pop    esi
c0019022:	6a 01                	push   0x1
c0019024:	53                   	push   ebx
c0019025:	e8 e0 97 ff ff       	call   c001280a <File::open(FileOpenMode)>
c001902a:	83 c4 10             	add    esp,0x10
c001902d:	85 c0                	test   eax,eax
c001902f:	74 08                	je     c0019039 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0019031:	83 ec 0c             	sub    esp,0xc
c0019034:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019036:	53                   	push   ebx
c0019037:	eb 2e                	jmp    c0019067 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0019039:	52                   	push   edx
c001903a:	8d 44 24 07          	lea    eax,[esp+0x7]
c001903e:	50                   	push   eax
c001903f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019043:	50                   	push   eax
c0019044:	53                   	push   ebx
c0019045:	e8 6c 9a ff ff       	call   c0012ab6 <File::stat(unsigned long long*, bool*)>
c001904a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001904e:	83 c4 10             	add    esp,0x10
c0019051:	89 c1                	mov    ecx,eax
c0019053:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0019057:	75 13                	jne    c001906c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0019059:	83 ec 0c             	sub    esp,0xc
c001905c:	53                   	push   ebx
c001905d:	e8 06 98 ff ff       	call   c0012868 <File::close()>
c0019062:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019064:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019067:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001906a:	eb 7b                	jmp    c00190e7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c001906c:	83 ec 0c             	sub    esp,0xc
c001906f:	50                   	push   eax
c0019070:	e8 f9 60 ff ff       	call   c000f16e <malloc>
c0019075:	89 c6                	mov    esi,eax
c0019077:	58                   	pop    eax
c0019078:	8b 03                	mov    eax,DWORD PTR [ebx]
c001907a:	8d 54 24 10          	lea    edx,[esp+0x10]
c001907e:	52                   	push   edx
c001907f:	56                   	push   esi
c0019080:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019084:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019088:	53                   	push   ebx
c0019089:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001908c:	83 c4 20             	add    esp,0x20
c001908f:	85 c0                	test   eax,eax
c0019091:	75 0a                	jne    c001909d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0019093:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019097:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001909b:	74 18                	je     c00190b5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c001909d:	83 ec 0c             	sub    esp,0xc
c00190a0:	31 ff                	xor    edi,edi
c00190a2:	53                   	push   ebx
c00190a3:	e8 c0 97 ff ff       	call   c0012868 <File::close()>
c00190a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00190aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00190ad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00190b0:	83 c4 10             	add    esp,0x10
c00190b3:	eb 35                	jmp    c00190ea <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c00190b5:	83 ec 0c             	sub    esp,0xc
c00190b8:	53                   	push   ebx
c00190b9:	e8 aa 97 ff ff       	call   c0012868 <File::close()>
c00190be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00190c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00190c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00190c6:	83 c4 0c             	add    esp,0xc
c00190c9:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c00190d0:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c00190d7:	56                   	push   esi
c00190d8:	e8 62 fd ff ff       	call   c0018e3f <Reg::findLineFromLoadedData(char*, char*, char*)>
c00190dd:	89 34 24             	mov    DWORD PTR [esp],esi
c00190e0:	89 c7                	mov    edi,eax
c00190e2:	e8 97 60 ff ff       	call   c000f17e <free>
c00190e7:	83 c4 10             	add    esp,0x10
c00190ea:	81 c4 10 01 00 00    	add    esp,0x110
c00190f0:	89 f8                	mov    eax,edi
c00190f2:	5b                   	pop    ebx
c00190f3:	5e                   	pop    esi
c00190f4:	5f                   	pop    edi
c00190f5:	c3                   	ret    

c00190f6 <Reg::getLine(char*, char*, char*)>:
c00190f6:	57                   	push   edi
c00190f7:	56                   	push   esi
c00190f8:	53                   	push   ebx
c00190f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00190fd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019101:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019105:	57                   	push   edi
c0019106:	56                   	push   esi
c0019107:	53                   	push   ebx
c0019108:	68 7b 84 02 c0       	push   0xc002847b
c001910d:	e8 85 fe ff ff       	call   c0018f97 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0019112:	83 c4 10             	add    esp,0x10
c0019115:	84 c0                	test   al,al
c0019117:	75 10                	jne    c0019129 <Reg::getLine(char*, char*, char*)+0x33>
c0019119:	57                   	push   edi
c001911a:	56                   	push   esi
c001911b:	53                   	push   ebx
c001911c:	68 a0 84 02 c0       	push   0xc00284a0
c0019121:	e8 71 fe ff ff       	call   c0018f97 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0019126:	83 c4 10             	add    esp,0x10
c0019129:	5b                   	pop    ebx
c001912a:	5e                   	pop    esi
c001912b:	5f                   	pop    edi
c001912c:	c3                   	ret    

c001912d <Reg::readInt(char*, char*, int*)>:
c001912d:	55                   	push   ebp
c001912e:	57                   	push   edi
c001912f:	56                   	push   esi
c0019130:	53                   	push   ebx
c0019131:	81 ec f0 00 00 00    	sub    esp,0xf0
c0019137:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001913b:	57                   	push   edi
c001913c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0019143:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001914a:	e8 a7 ff ff ff       	call   c00190f6 <Reg::getLine(char*, char*, char*)>
c001914f:	83 c4 10             	add    esp,0x10
c0019152:	84 c0                	test   al,al
c0019154:	0f 84 b3 00 00 00    	je     c001920d <Reg::readInt(char*, char*, int*)+0xe0>
c001915a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001915e:	80 fa 2b             	cmp    dl,0x2b
c0019161:	74 0c                	je     c001916f <Reg::readInt(char*, char*, int*)+0x42>
c0019163:	80 fa 2d             	cmp    dl,0x2d
c0019166:	75 0e                	jne    c0019176 <Reg::readInt(char*, char*, int*)+0x49>
c0019168:	ba 01 00 00 00       	mov    edx,0x1
c001916d:	eb 0b                	jmp    c001917a <Reg::readInt(char*, char*, int*)+0x4d>
c001916f:	ba 01 00 00 00       	mov    edx,0x1
c0019174:	eb 02                	jmp    c0019178 <Reg::readInt(char*, char*, int*)+0x4b>
c0019176:	31 d2                	xor    edx,edx
c0019178:	31 c0                	xor    eax,eax
c001917a:	be 0a 00 00 00       	mov    esi,0xa
c001917f:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0019184:	75 20                	jne    c00191a6 <Reg::readInt(char*, char*, int*)+0x79>
c0019186:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001918a:	80 f9 78             	cmp    cl,0x78
c001918d:	75 0a                	jne    c0019199 <Reg::readInt(char*, char*, int*)+0x6c>
c001918f:	83 c2 02             	add    edx,0x2
c0019192:	be 10 00 00 00       	mov    esi,0x10
c0019197:	eb 0d                	jmp    c00191a6 <Reg::readInt(char*, char*, int*)+0x79>
c0019199:	80 f9 62             	cmp    cl,0x62
c001919c:	75 08                	jne    c00191a6 <Reg::readInt(char*, char*, int*)+0x79>
c001919e:	83 c2 02             	add    edx,0x2
c00191a1:	be 02 00 00 00       	mov    esi,0x2
c00191a6:	01 d7                	add    edi,edx
c00191a8:	31 d2                	xor    edx,edx
c00191aa:	8a 1f                	mov    bl,BYTE PTR [edi]
c00191ac:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00191b0:	80 fb 0d             	cmp    bl,0xd
c00191b3:	0f 94 c3             	sete   bl
c00191b6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00191bb:	0f 94 c1             	sete   cl
c00191be:	08 cb                	or     bl,cl
c00191c0:	75 3a                	jne    c00191fc <Reg::readInt(char*, char*, int*)+0xcf>
c00191c2:	0f af d6             	imul   edx,esi
c00191c5:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00191ca:	83 fe 10             	cmp    esi,0x10
c00191cd:	75 26                	jne    c00191f5 <Reg::readInt(char*, char*, int*)+0xc8>
c00191cf:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00191d3:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00191d6:	89 e9                	mov    ecx,ebp
c00191d8:	80 f9 05             	cmp    cl,0x5
c00191db:	77 06                	ja     c00191e3 <Reg::readInt(char*, char*, int*)+0xb6>
c00191dd:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00191e1:	eb 16                	jmp    c00191f9 <Reg::readInt(char*, char*, int*)+0xcc>
c00191e3:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00191e7:	83 e9 61             	sub    ecx,0x61
c00191ea:	80 f9 05             	cmp    cl,0x5
c00191ed:	77 06                	ja     c00191f5 <Reg::readInt(char*, char*, int*)+0xc8>
c00191ef:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00191f3:	eb 04                	jmp    c00191f9 <Reg::readInt(char*, char*, int*)+0xcc>
c00191f5:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00191f9:	47                   	inc    edi
c00191fa:	eb ae                	jmp    c00191aa <Reg::readInt(char*, char*, int*)+0x7d>
c00191fc:	84 c0                	test   al,al
c00191fe:	74 02                	je     c0019202 <Reg::readInt(char*, char*, int*)+0xd5>
c0019200:	f7 da                	neg    edx
c0019202:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0019209:	89 10                	mov    DWORD PTR [eax],edx
c001920b:	88 d8                	mov    al,bl
c001920d:	81 c4 ec 00 00 00    	add    esp,0xec
c0019213:	5b                   	pop    ebx
c0019214:	5e                   	pop    esi
c0019215:	5f                   	pop    edi
c0019216:	5d                   	pop    ebp
c0019217:	c3                   	ret    

c0019218 <Reg::readString(char*, char*, char*, int)>:
c0019218:	57                   	push   edi
c0019219:	56                   	push   esi
c001921a:	53                   	push   ebx
c001921b:	81 ec d4 00 00 00    	sub    esp,0xd4
c0019221:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0019228:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001922c:	57                   	push   edi
c001922d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0019234:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001923b:	e8 b6 fe ff ff       	call   c00190f6 <Reg::getLine(char*, char*, char*)>
c0019240:	83 c4 10             	add    esp,0x10
c0019243:	89 c6                	mov    esi,eax
c0019245:	84 c0                	test   al,al
c0019247:	74 44                	je     c001928d <Reg::readString(char*, char*, char*, int)+0x75>
c0019249:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0019250:	31 c0                	xor    eax,eax
c0019252:	4a                   	dec    edx
c0019253:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0019256:	84 c9                	test   cl,cl
c0019258:	74 0f                	je     c0019269 <Reg::readString(char*, char*, char*, int)+0x51>
c001925a:	39 c2                	cmp    edx,eax
c001925c:	7e 0b                	jle    c0019269 <Reg::readString(char*, char*, char*, int)+0x51>
c001925e:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0019261:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0019266:	40                   	inc    eax
c0019267:	eb ea                	jmp    c0019253 <Reg::readString(char*, char*, char*, int)+0x3b>
c0019269:	83 ec 0c             	sub    esp,0xc
c001926c:	53                   	push   ebx
c001926d:	e8 70 74 fe ff       	call   c00006e2 <strlen>
c0019272:	83 c4 10             	add    esp,0x10
c0019275:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001927a:	75 11                	jne    c001928d <Reg::readString(char*, char*, char*, int)+0x75>
c001927c:	83 ec 0c             	sub    esp,0xc
c001927f:	53                   	push   ebx
c0019280:	e8 5d 74 fe ff       	call   c00006e2 <strlen>
c0019285:	83 c4 10             	add    esp,0x10
c0019288:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001928d:	81 c4 d0 00 00 00    	add    esp,0xd0
c0019293:	89 f0                	mov    eax,esi
c0019295:	5b                   	pop    ebx
c0019296:	5e                   	pop    esi
c0019297:	5f                   	pop    edi
c0019298:	c3                   	ret    

c0019299 <Reg::readBool(char*, char*, bool*)>:
c0019299:	83 ec 20             	sub    esp,0x20
c001929c:	8d 44 24 10          	lea    eax,[esp+0x10]
c00192a0:	50                   	push   eax
c00192a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00192a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00192a9:	e8 7f fe ff ff       	call   c001912d <Reg::readInt(char*, char*, int*)>
c00192ae:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00192b3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00192b7:	0f 95 02             	setne  BYTE PTR [edx]
c00192ba:	83 c4 2c             	add    esp,0x2c
c00192bd:	c3                   	ret    

c00192be <Reg::readBoolWithDefault(char*, char*, bool)>:
c00192be:	53                   	push   ebx
c00192bf:	83 ec 1c             	sub    esp,0x1c
c00192c2:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00192c6:	8d 44 24 13          	lea    eax,[esp+0x13]
c00192ca:	50                   	push   eax
c00192cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00192cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00192d3:	e8 c1 ff ff ff       	call   c0019299 <Reg::readBool(char*, char*, bool*)>
c00192d8:	83 c4 10             	add    esp,0x10
c00192db:	84 c0                	test   al,al
c00192dd:	74 04                	je     c00192e3 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00192df:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00192e3:	88 d8                	mov    al,bl
c00192e5:	83 c4 18             	add    esp,0x18
c00192e8:	5b                   	pop    ebx
c00192e9:	c3                   	ret    

c00192ea <Reg::readIntWithDefault(char*, char*, int)>:
c00192ea:	53                   	push   ebx
c00192eb:	83 ec 1c             	sub    esp,0x1c
c00192ee:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00192f2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00192f6:	50                   	push   eax
c00192f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00192fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00192ff:	e8 29 fe ff ff       	call   c001912d <Reg::readInt(char*, char*, int*)>
c0019304:	83 c4 10             	add    esp,0x10
c0019307:	84 c0                	test   al,al
c0019309:	74 04                	je     c001930f <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001930b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001930f:	89 d8                	mov    eax,ebx
c0019311:	83 c4 18             	add    esp,0x18
c0019314:	5b                   	pop    ebx
c0019315:	c3                   	ret    

c0019316 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0019316:	56                   	push   esi
c0019317:	53                   	push   ebx
c0019318:	51                   	push   ecx
c0019319:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001931d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019321:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019325:	56                   	push   esi
c0019326:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001932a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001932e:	e8 e5 fe ff ff       	call   c0019218 <Reg::readString(char*, char*, char*, int)>
c0019333:	83 c4 10             	add    esp,0x10
c0019336:	84 c0                	test   al,al
c0019338:	74 02                	je     c001933c <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c001933a:	89 f3                	mov    ebx,esi
c001933c:	89 d8                	mov    eax,ebx
c001933e:	5a                   	pop    edx
c001933f:	5b                   	pop    ebx
c0019340:	5e                   	pop    esi
c0019341:	c3                   	ret    

c0019342 <Sys::exit(regs*)>:
c0019342:	83 ec 18             	sub    esp,0x18
c0019345:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019349:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001934c:	e8 1f 31 00 00       	call   c001c470 <terminateTask(int)>
c0019351:	83 c8 ff             	or     eax,0xffffffff
c0019354:	83 c4 1c             	add    esp,0x1c
c0019357:	89 c2                	mov    edx,eax
c0019359:	c3                   	ret    

c001935a <Sys::loadDLL(regs*)>:
c001935a:	56                   	push   esi
c001935b:	53                   	push   ebx
c001935c:	31 d2                	xor    edx,edx
c001935e:	51                   	push   ecx
c001935f:	b8 01 00 00 00       	mov    eax,0x1
c0019364:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019368:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001936c:	74 7d                	je     c00193eb <Sys::loadDLL(regs*)+0x91>
c001936e:	83 ec 0c             	sub    esp,0xc
c0019371:	68 14 01 00 00       	push   0x114
c0019376:	e8 0d 8e ff ff       	call   c0012188 <operator new(unsigned long)>
c001937b:	83 c4 0c             	add    esp,0xc
c001937e:	89 c3                	mov    ebx,eax
c0019380:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019385:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019388:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001938b:	53                   	push   ebx
c001938c:	e8 15 94 ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c0019391:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019394:	e8 df 96 ff ff       	call   c0012a78 <File::exists()>
c0019399:	83 c4 10             	add    esp,0x10
c001939c:	84 c0                	test   al,al
c001939e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00193a0:	75 11                	jne    c00193b3 <Sys::loadDLL(regs*)+0x59>
c00193a2:	83 ec 0c             	sub    esp,0xc
c00193a5:	53                   	push   ebx
c00193a6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00193a9:	83 c4 10             	add    esp,0x10
c00193ac:	b8 03 00 00 00       	mov    eax,0x3
c00193b1:	eb 36                	jmp    c00193e9 <Sys::loadDLL(regs*)+0x8f>
c00193b3:	83 ec 0c             	sub    esp,0xc
c00193b6:	53                   	push   ebx
c00193b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00193ba:	58                   	pop    eax
c00193bb:	5a                   	pop    edx
c00193bc:	6a 00                	push   0x0
c00193be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00193c1:	e8 c4 20 00 00       	call   c001b48a <Thr::loadDLL(char const*, bool)>
c00193c6:	83 c4 10             	add    esp,0x10
c00193c9:	89 c1                	mov    ecx,eax
c00193cb:	31 d2                	xor    edx,edx
c00193cd:	b8 04 00 00 00       	mov    eax,0x4
c00193d2:	85 c9                	test   ecx,ecx
c00193d4:	74 15                	je     c00193eb <Sys::loadDLL(regs*)+0x91>
c00193d6:	53                   	push   ebx
c00193d7:	53                   	push   ebx
c00193d8:	ff 35 88 a6 02 c0    	push   DWORD PTR ds:0xc002a688
c00193de:	51                   	push   ecx
c00193df:	e8 6c 22 00 00       	call   c001b650 <Thr::executeDLL(unsigned long, void*)>
c00193e4:	83 c4 10             	add    esp,0x10
c00193e7:	31 c0                	xor    eax,eax
c00193e9:	31 d2                	xor    edx,edx
c00193eb:	59                   	pop    ecx
c00193ec:	5b                   	pop    ebx
c00193ed:	5e                   	pop    esi
c00193ee:	c3                   	ret    

c00193ef <Sys::read(regs*)>:
c00193ef:	57                   	push   edi
c00193f0:	56                   	push   esi
c00193f1:	53                   	push   ebx
c00193f2:	83 ec 10             	sub    esp,0x10
c00193f5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00193f9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00193fc:	83 f8 02             	cmp    eax,0x2
c00193ff:	77 10                	ja     c0019411 <Sys::read(regs*)+0x22>
c0019401:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019406:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019409:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001940f:	eb 0e                	jmp    c001941f <Sys::read(regs*)+0x30>
c0019411:	83 ec 0c             	sub    esp,0xc
c0019414:	50                   	push   eax
c0019415:	e8 35 7d ff ff       	call   c001114f <getFromFileDescriptor(int)>
c001941a:	83 c4 10             	add    esp,0x10
c001941d:	89 c1                	mov    ecx,eax
c001941f:	83 c8 ff             	or     eax,0xffffffff
c0019422:	85 c9                	test   ecx,ecx
c0019424:	89 c2                	mov    edx,eax
c0019426:	74 28                	je     c0019450 <Sys::read(regs*)+0x61>
c0019428:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019430:	31 ff                	xor    edi,edi
c0019432:	83 ec 0c             	sub    esp,0xc
c0019435:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019437:	8d 54 24 18          	lea    edx,[esp+0x18]
c001943b:	52                   	push   edx
c001943c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001943f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0019442:	57                   	push   edi
c0019443:	56                   	push   esi
c0019444:	51                   	push   ecx
c0019445:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019448:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001944c:	83 c4 20             	add    esp,0x20
c001944f:	99                   	cdq    
c0019450:	83 c4 10             	add    esp,0x10
c0019453:	5b                   	pop    ebx
c0019454:	5e                   	pop    esi
c0019455:	5f                   	pop    edi
c0019456:	c3                   	ret    

c0019457 <Sys::sbrk(regs*)>:
c0019457:	56                   	push   esi
c0019458:	53                   	push   ebx
c0019459:	50                   	push   eax
c001945a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001945f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019463:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019466:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0019469:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001946f:	85 db                	test   ebx,ebx
c0019471:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0019474:	74 02                	je     c0019478 <Sys::sbrk(regs*)+0x21>
c0019476:	79 06                	jns    c001947e <Sys::sbrk(regs*)+0x27>
c0019478:	89 f0                	mov    eax,esi
c001947a:	31 d2                	xor    edx,edx
c001947c:	eb 2a                	jmp    c00194a8 <Sys::sbrk(regs*)+0x51>
c001947e:	83 c8 ff             	or     eax,0xffffffff
c0019481:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0019487:	89 c2                	mov    edx,eax
c0019489:	77 1d                	ja     c00194a8 <Sys::sbrk(regs*)+0x51>
c001948b:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0019491:	50                   	push   eax
c0019492:	c1 ea 0c             	shr    edx,0xc
c0019495:	68 07 04 00 00       	push   0x407
c001949a:	52                   	push   edx
c001949b:	51                   	push   ecx
c001949c:	e8 d7 85 ff ff       	call   c0011a78 <VAS::allocatePages(int, int)>
c00194a1:	89 f0                	mov    eax,esi
c00194a3:	31 d2                	xor    edx,edx
c00194a5:	83 c4 10             	add    esp,0x10
c00194a8:	59                   	pop    ecx
c00194a9:	5b                   	pop    ebx
c00194aa:	5e                   	pop    esi
c00194ab:	c3                   	ret    

c00194ac <Sys::write(regs*)>:
c00194ac:	57                   	push   edi
c00194ad:	56                   	push   esi
c00194ae:	53                   	push   ebx
c00194af:	83 ec 10             	sub    esp,0x10
c00194b2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00194b6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00194b9:	83 f8 02             	cmp    eax,0x2
c00194bc:	77 10                	ja     c00194ce <Sys::write(regs*)+0x22>
c00194be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194c3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00194c6:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00194cc:	eb 0e                	jmp    c00194dc <Sys::write(regs*)+0x30>
c00194ce:	83 ec 0c             	sub    esp,0xc
c00194d1:	50                   	push   eax
c00194d2:	e8 78 7c ff ff       	call   c001114f <getFromFileDescriptor(int)>
c00194d7:	83 c4 10             	add    esp,0x10
c00194da:	89 c1                	mov    ecx,eax
c00194dc:	83 c8 ff             	or     eax,0xffffffff
c00194df:	85 c9                	test   ecx,ecx
c00194e1:	89 c2                	mov    edx,eax
c00194e3:	74 28                	je     c001950d <Sys::write(regs*)+0x61>
c00194e5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00194ed:	31 ff                	xor    edi,edi
c00194ef:	83 ec 0c             	sub    esp,0xc
c00194f2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00194f4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00194f8:	52                   	push   edx
c00194f9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00194fc:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00194ff:	57                   	push   edi
c0019500:	56                   	push   esi
c0019501:	51                   	push   ecx
c0019502:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019505:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019509:	83 c4 20             	add    esp,0x20
c001950c:	99                   	cdq    
c001950d:	83 c4 10             	add    esp,0x10
c0019510:	5b                   	pop    ebx
c0019511:	5e                   	pop    esi
c0019512:	5f                   	pop    edi
c0019513:	c3                   	ret    

c0019514 <Sys::yield(regs*)>:
c0019514:	83 ec 0c             	sub    esp,0xc
c0019517:	e8 3e 25 00 00       	call   c001ba5a <lockScheduler()>
c001951c:	e8 6d 28 00 00       	call   c001bd8e <schedule()>
c0019521:	e8 36 25 00 00       	call   c001ba5c <unlockScheduler()>
c0019526:	31 c0                	xor    eax,eax
c0019528:	31 d2                	xor    edx,edx
c001952a:	83 c4 0c             	add    esp,0xc
c001952d:	c3                   	ret    

c001952e <sysCallGetPID(regs*)>:
c001952e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019533:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019536:	8b 00                	mov    eax,DWORD PTR [eax]
c0019538:	99                   	cdq    
c0019539:	c3                   	ret    

c001953a <sysCallSeekDir(regs*)>:
c001953a:	31 c0                	xor    eax,eax
c001953c:	31 d2                	xor    edx,edx
c001953e:	c3                   	ret    

c001953f <sysCallTellDir(regs*)>:
c001953f:	31 c0                	xor    eax,eax
c0019541:	31 d2                	xor    edx,edx
c0019543:	c3                   	ret    

c0019544 <sysCallVerify(regs*)>:
c0019544:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019548:	31 d2                	xor    edx,edx
c001954a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001954d:	c3                   	ret    

c001954e <sysCallFork(regs*)>:
c001954e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019553:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019558:	c3                   	ret    

c0019559 <sysCallExecve(regs*)>:
c0019559:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001955e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019563:	c3                   	ret    

c0019564 <sysCallGetArgc(regs*)>:
c0019564:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019569:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001956c:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c0019572:	99                   	cdq    
c0019573:	c3                   	ret    

c0019574 <sysFormatDisk(regs*)>:
c0019574:	56                   	push   esi
c0019575:	53                   	push   ebx
c0019576:	53                   	push   ebx
c0019577:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001957b:	8b 1d e8 a7 02 c0    	mov    ebx,DWORD PTR ds:0xc002a7e8
c0019581:	eb 25                	jmp    c00195a8 <sysFormatDisk(regs*)+0x34>
c0019583:	83 ec 0c             	sub    esp,0xc
c0019586:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019589:	8b 13                	mov    edx,DWORD PTR [ebx]
c001958b:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001958e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0019591:	50                   	push   eax
c0019592:	ff 34 85 80 ac 02 c0 	push   DWORD PTR [eax*4-0x3ffd5380]
c0019599:	53                   	push   ebx
c001959a:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001959d:	83 c4 20             	add    esp,0x20
c00195a0:	83 f8 08             	cmp    eax,0x8
c00195a3:	75 12                	jne    c00195b7 <sysFormatDisk(regs*)+0x43>
c00195a5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00195a8:	85 db                	test   ebx,ebx
c00195aa:	75 d7                	jne    c0019583 <sysFormatDisk(regs*)+0xf>
c00195ac:	59                   	pop    ecx
c00195ad:	b8 03 00 00 00       	mov    eax,0x3
c00195b2:	31 d2                	xor    edx,edx
c00195b4:	5b                   	pop    ebx
c00195b5:	5e                   	pop    esi
c00195b6:	c3                   	ret    
c00195b7:	85 c0                	test   eax,eax
c00195b9:	74 1b                	je     c00195d6 <sysFormatDisk(regs*)+0x62>
c00195bb:	83 f8 09             	cmp    eax,0x9
c00195be:	74 0b                	je     c00195cb <sysFormatDisk(regs*)+0x57>
c00195c0:	59                   	pop    ecx
c00195c1:	b8 02 00 00 00       	mov    eax,0x2
c00195c6:	31 d2                	xor    edx,edx
c00195c8:	5b                   	pop    ebx
c00195c9:	5e                   	pop    esi
c00195ca:	c3                   	ret    
c00195cb:	59                   	pop    ecx
c00195cc:	b8 01 00 00 00       	mov    eax,0x1
c00195d1:	31 d2                	xor    edx,edx
c00195d3:	5b                   	pop    ebx
c00195d4:	5e                   	pop    esi
c00195d5:	c3                   	ret    
c00195d6:	59                   	pop    ecx
c00195d7:	31 c0                	xor    eax,eax
c00195d9:	31 d2                	xor    edx,edx
c00195db:	5b                   	pop    ebx
c00195dc:	5e                   	pop    esi
c00195dd:	c3                   	ret    

c00195de <sysSetDiskVolumeLabel(regs*)>:
c00195de:	56                   	push   esi
c00195df:	53                   	push   ebx
c00195e0:	53                   	push   ebx
c00195e1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00195e5:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00195e8:	83 f8 19             	cmp    eax,0x19
c00195eb:	77 29                	ja     c0019616 <sysSetDiskVolumeLabel(regs*)+0x38>
c00195ed:	8b 0c 85 80 ac 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5380]
c00195f4:	85 c9                	test   ecx,ecx
c00195f6:	74 1e                	je     c0019616 <sysSetDiskVolumeLabel(regs*)+0x38>
c00195f8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00195fb:	85 d2                	test   edx,edx
c00195fd:	74 17                	je     c0019616 <sysSetDiskVolumeLabel(regs*)+0x38>
c00195ff:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c0019605:	8b 33                	mov    esi,DWORD PTR [ebx]
c0019607:	52                   	push   edx
c0019608:	50                   	push   eax
c0019609:	51                   	push   ecx
c001960a:	53                   	push   ebx
c001960b:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001960e:	83 c4 10             	add    esp,0x10
c0019611:	99                   	cdq    
c0019612:	59                   	pop    ecx
c0019613:	5b                   	pop    ebx
c0019614:	5e                   	pop    esi
c0019615:	c3                   	ret    
c0019616:	59                   	pop    ecx
c0019617:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001961c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019621:	5b                   	pop    ebx
c0019622:	5e                   	pop    esi
c0019623:	c3                   	ret    

c0019624 <sysGetDiskVolumeLabel(regs*)>:
c0019624:	57                   	push   edi
c0019625:	56                   	push   esi
c0019626:	53                   	push   ebx
c0019627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001962b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001962e:	83 fa 19             	cmp    edx,0x19
c0019631:	77 34                	ja     c0019667 <sysGetDiskVolumeLabel(regs*)+0x43>
c0019633:	8b 0c 95 80 ac 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd5380]
c001963a:	85 c9                	test   ecx,ecx
c001963c:	74 29                	je     c0019667 <sysGetDiskVolumeLabel(regs*)+0x43>
c001963e:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0019641:	85 db                	test   ebx,ebx
c0019643:	74 22                	je     c0019667 <sysGetDiskVolumeLabel(regs*)+0x43>
c0019645:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0019648:	85 c0                	test   eax,eax
c001964a:	74 1b                	je     c0019667 <sysGetDiskVolumeLabel(regs*)+0x43>
c001964c:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c0019652:	83 ec 0c             	sub    esp,0xc
c0019655:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019657:	50                   	push   eax
c0019658:	53                   	push   ebx
c0019659:	52                   	push   edx
c001965a:	51                   	push   ecx
c001965b:	56                   	push   esi
c001965c:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001965f:	83 c4 20             	add    esp,0x20
c0019662:	99                   	cdq    
c0019663:	5b                   	pop    ebx
c0019664:	5e                   	pop    esi
c0019665:	5f                   	pop    edi
c0019666:	c3                   	ret    
c0019667:	5b                   	pop    ebx
c0019668:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001966d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019672:	5e                   	pop    esi
c0019673:	5f                   	pop    edi
c0019674:	c3                   	ret    

c0019675 <sysShutdown(regs*)>:
c0019675:	83 ec 0c             	sub    esp,0xc
c0019678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001967c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001967f:	85 c0                	test   eax,eax
c0019681:	74 18                	je     c001969b <sysShutdown(regs*)+0x26>
c0019683:	83 f8 01             	cmp    eax,0x1
c0019686:	74 38                	je     c00196c0 <sysShutdown(regs*)+0x4b>
c0019688:	83 f8 02             	cmp    eax,0x2
c001968b:	74 24                	je     c00196b1 <sysShutdown(regs*)+0x3c>
c001968d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019692:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019697:	83 c4 0c             	add    esp,0xc
c001969a:	c3                   	ret    
c001969b:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c00196a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00196a2:	6a 00                	push   0x0
c00196a4:	6a 00                	push   0x0
c00196a6:	6a 00                	push   0x0
c00196a8:	50                   	push   eax
c00196a9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00196ac:	83 c4 10             	add    esp,0x10
c00196af:	eb dc                	jmp    c001968d <sysShutdown(regs*)+0x18>
c00196b1:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c00196b6:	8b 10                	mov    edx,DWORD PTR [eax]
c00196b8:	6a 00                	push   0x0
c00196ba:	6a 00                	push   0x0
c00196bc:	6a 01                	push   0x1
c00196be:	eb e8                	jmp    c00196a8 <sysShutdown(regs*)+0x33>
c00196c0:	a1 00 ad 02 c0       	mov    eax,ds:0xc002ad00
c00196c5:	85 c0                	test   eax,eax
c00196c7:	74 02                	je     c00196cb <sysShutdown(regs*)+0x56>
c00196c9:	ff d0                	call   eax
c00196cb:	31 c0                	xor    eax,eax
c00196cd:	31 d2                	xor    edx,edx
c00196cf:	83 c4 0c             	add    esp,0xc
c00196d2:	c3                   	ret    

c00196d3 <sysCallGetCwd(regs*)>:
c00196d3:	83 ec 10             	sub    esp,0x10
c00196d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00196da:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00196dd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00196e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00196e5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00196e8:	e8 2a 94 ff ff       	call   c0012b17 <getcwd(Process*, char*, int)>
c00196ed:	83 c4 1c             	add    esp,0x1c
c00196f0:	99                   	cdq    
c00196f1:	c3                   	ret    

c00196f2 <sysCallSetCwd(regs*)>:
c00196f2:	83 ec 14             	sub    esp,0x14
c00196f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00196f9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00196fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019701:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019704:	e8 38 94 ff ff       	call   c0012b41 <setcwd(Process*, char*)>
c0019709:	83 c4 1c             	add    esp,0x1c
c001970c:	99                   	cdq    
c001970d:	c3                   	ret    

c001970e <sysCallRealpath(regs*)>:
c001970e:	83 ec 0c             	sub    esp,0xc
c0019711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019715:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0019718:	85 d2                	test   edx,edx
c001971a:	74 07                	je     c0019723 <sysCallRealpath(regs*)+0x15>
c001971c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001971f:	85 c0                	test   eax,eax
c0019721:	75 0b                	jne    c001972e <sysCallRealpath(regs*)+0x20>
c0019723:	b8 01 00 00 00       	mov    eax,0x1
c0019728:	31 d2                	xor    edx,edx
c001972a:	83 c4 0c             	add    esp,0xc
c001972d:	c3                   	ret    
c001972e:	51                   	push   ecx
c001972f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019735:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0019738:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001973e:	51                   	push   ecx
c001973f:	52                   	push   edx
c0019740:	50                   	push   eax
c0019741:	e8 b6 8e ff ff       	call   c00125fc <standardiseFiles(char*, char const*, char const*)>
c0019746:	83 c4 10             	add    esp,0x10
c0019749:	31 c0                	xor    eax,eax
c001974b:	31 d2                	xor    edx,edx
c001974d:	83 c4 0c             	add    esp,0xc
c0019750:	c3                   	ret    

c0019751 <sysCallReadDir(regs*)>:
c0019751:	53                   	push   ebx
c0019752:	83 ec 18             	sub    esp,0x18
c0019755:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019759:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001975c:	83 f8 02             	cmp    eax,0x2
c001975f:	76 53                	jbe    c00197b4 <sysCallReadDir(regs*)+0x63>
c0019761:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0019764:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001976a:	77 4f                	ja     c00197bb <sysCallReadDir(regs*)+0x6a>
c001976c:	83 ec 0c             	sub    esp,0xc
c001976f:	50                   	push   eax
c0019770:	e8 da 79 ff ff       	call   c001114f <getFromFileDescriptor(int)>
c0019775:	83 c4 10             	add    esp,0x10
c0019778:	85 c0                	test   eax,eax
c001977a:	74 50                	je     c00197cc <sysCallReadDir(regs*)+0x7b>
c001977c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019784:	83 ec 0c             	sub    esp,0xc
c0019787:	8b 10                	mov    edx,DWORD PTR [eax]
c0019789:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001978d:	51                   	push   ecx
c001978e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019791:	6a 00                	push   0x0
c0019793:	68 10 01 00 00       	push   0x110
c0019798:	50                   	push   eax
c0019799:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001979c:	83 c4 20             	add    esp,0x20
c001979f:	85 c0                	test   eax,eax
c00197a1:	74 38                	je     c00197db <sysCallReadDir(regs*)+0x8a>
c00197a3:	83 f8 07             	cmp    eax,0x7
c00197a6:	74 0c                	je     c00197b4 <sysCallReadDir(regs*)+0x63>
c00197a8:	b8 02 00 00 00       	mov    eax,0x2
c00197ad:	31 d2                	xor    edx,edx
c00197af:	83 c4 18             	add    esp,0x18
c00197b2:	5b                   	pop    ebx
c00197b3:	c3                   	ret    
c00197b4:	b8 01 00 00 00       	mov    eax,0x1
c00197b9:	eb f2                	jmp    c00197ad <sysCallReadDir(regs*)+0x5c>
c00197bb:	83 ec 08             	sub    esp,0x8
c00197be:	52                   	push   edx
c00197bf:	68 bc 84 02 c0       	push   0xc00284bc
c00197c4:	e8 ae 8a ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00197c9:	83 c4 10             	add    esp,0x10
c00197cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00197d1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00197d6:	83 c4 18             	add    esp,0x18
c00197d9:	5b                   	pop    ebx
c00197da:	c3                   	ret    
c00197db:	31 c0                	xor    eax,eax
c00197dd:	eb ce                	jmp    c00197ad <sysCallReadDir(regs*)+0x5c>

c00197df <sysCallIsATTY(regs*)>:
c00197df:	83 ec 0c             	sub    esp,0xc
c00197e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00197e6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00197e9:	83 f8 02             	cmp    eax,0x2
c00197ec:	76 07                	jbe    c00197f5 <sysCallIsATTY(regs*)+0x16>
c00197ee:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00197f3:	75 26                	jne    c001981b <sysCallIsATTY(regs*)+0x3c>
c00197f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00197fa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00197fd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019803:	85 c0                	test   eax,eax
c0019805:	74 24                	je     c001982b <sysCallIsATTY(regs*)+0x4c>
c0019807:	83 ec 0c             	sub    esp,0xc
c001980a:	8b 10                	mov    edx,DWORD PTR [eax]
c001980c:	50                   	push   eax
c001980d:	ff 12                	call   DWORD PTR [edx]
c001980f:	31 d2                	xor    edx,edx
c0019811:	0f b6 c0             	movzx  eax,al
c0019814:	83 c4 10             	add    esp,0x10
c0019817:	83 c4 0c             	add    esp,0xc
c001981a:	c3                   	ret    
c001981b:	83 ec 0c             	sub    esp,0xc
c001981e:	50                   	push   eax
c001981f:	e8 2b 79 ff ff       	call   c001114f <getFromFileDescriptor(int)>
c0019824:	83 c4 10             	add    esp,0x10
c0019827:	85 c0                	test   eax,eax
c0019829:	75 dc                	jne    c0019807 <sysCallIsATTY(regs*)+0x28>
c001982b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019830:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019835:	83 c4 0c             	add    esp,0xc
c0019838:	c3                   	ret    

c0019839 <sysCallSeek(regs*)>:
c0019839:	53                   	push   ebx
c001983a:	83 ec 08             	sub    esp,0x8
c001983d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019841:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019844:	83 f8 02             	cmp    eax,0x2
c0019847:	76 4a                	jbe    c0019893 <sysCallSeek(regs*)+0x5a>
c0019849:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001984e:	77 32                	ja     c0019882 <sysCallSeek(regs*)+0x49>
c0019850:	83 ec 0c             	sub    esp,0xc
c0019853:	50                   	push   eax
c0019854:	e8 f6 78 ff ff       	call   c001114f <getFromFileDescriptor(int)>
c0019859:	83 c4 0c             	add    esp,0xc
c001985c:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001985f:	31 db                	xor    ebx,ebx
c0019861:	53                   	push   ebx
c0019862:	51                   	push   ecx
c0019863:	50                   	push   eax
c0019864:	e8 5f 90 ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c0019869:	83 c4 10             	add    esp,0x10
c001986c:	85 c0                	test   eax,eax
c001986e:	0f 95 c0             	setne  al
c0019871:	31 d2                	xor    edx,edx
c0019873:	0f b6 c0             	movzx  eax,al
c0019876:	f7 d8                	neg    eax
c0019878:	83 d2 00             	adc    edx,0x0
c001987b:	83 c4 08             	add    esp,0x8
c001987e:	f7 da                	neg    edx
c0019880:	5b                   	pop    ebx
c0019881:	c3                   	ret    
c0019882:	83 ec 08             	sub    esp,0x8
c0019885:	50                   	push   eax
c0019886:	68 78 85 02 c0       	push   0xc0028578
c001988b:	e8 e7 89 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0019890:	83 c4 10             	add    esp,0x10
c0019893:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019898:	ba ff ff ff ff       	mov    edx,0xffffffff
c001989d:	83 c4 08             	add    esp,0x8
c00198a0:	5b                   	pop    ebx
c00198a1:	c3                   	ret    

c00198a2 <sysCallTell(regs*)>:
c00198a2:	53                   	push   ebx
c00198a3:	83 ec 08             	sub    esp,0x8
c00198a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00198aa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00198ad:	83 f8 02             	cmp    eax,0x2
c00198b0:	76 5e                	jbe    c0019910 <sysCallTell(regs*)+0x6e>
c00198b2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00198b7:	77 2d                	ja     c00198e6 <sysCallTell(regs*)+0x44>
c00198b9:	83 ec 0c             	sub    esp,0xc
c00198bc:	50                   	push   eax
c00198bd:	e8 8d 78 ff ff       	call   c001114f <getFromFileDescriptor(int)>
c00198c2:	5a                   	pop    edx
c00198c3:	59                   	pop    ecx
c00198c4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00198c7:	50                   	push   eax
c00198c8:	e8 51 90 ff ff       	call   c001291e <File::tell(unsigned long long*)>
c00198cd:	83 c4 10             	add    esp,0x10
c00198d0:	85 c0                	test   eax,eax
c00198d2:	0f 95 c0             	setne  al
c00198d5:	31 d2                	xor    edx,edx
c00198d7:	0f b6 c0             	movzx  eax,al
c00198da:	f7 d8                	neg    eax
c00198dc:	83 d2 00             	adc    edx,0x0
c00198df:	83 c4 08             	add    esp,0x8
c00198e2:	f7 da                	neg    edx
c00198e4:	5b                   	pop    ebx
c00198e5:	c3                   	ret    
c00198e6:	83 ec 08             	sub    esp,0x8
c00198e9:	50                   	push   eax
c00198ea:	68 92 85 02 c0       	push   0xc0028592
c00198ef:	e8 83 89 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00198f4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00198f7:	83 c4 10             	add    esp,0x10
c00198fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019900:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019907:	31 d2                	xor    edx,edx
c0019909:	31 c0                	xor    eax,eax
c001990b:	83 c4 08             	add    esp,0x8
c001990e:	5b                   	pop    ebx
c001990f:	c3                   	ret    
c0019910:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019915:	ba ff ff ff ff       	mov    edx,0xffffffff
c001991a:	83 c4 08             	add    esp,0x8
c001991d:	5b                   	pop    ebx
c001991e:	c3                   	ret    

c001991f <sysCallSizeFromFilename(regs*)>:
c001991f:	57                   	push   edi
c0019920:	56                   	push   esi
c0019921:	53                   	push   ebx
c0019922:	83 ec 10             	sub    esp,0x10
c0019925:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019929:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001992c:	83 fb 02             	cmp    ebx,0x2
c001992f:	0f 86 8a 00 00 00    	jbe    c00199bf <sysCallSizeFromFilename(regs*)+0xa0>
c0019935:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001993b:	77 56                	ja     c0019993 <sysCallSizeFromFilename(regs*)+0x74>
c001993d:	83 ec 0c             	sub    esp,0xc
c0019940:	68 14 01 00 00       	push   0x114
c0019945:	e8 3e 88 ff ff       	call   c0012188 <operator new(unsigned long)>
c001994a:	83 c4 0c             	add    esp,0xc
c001994d:	89 c7                	mov    edi,eax
c001994f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019954:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019957:	53                   	push   ebx
c0019958:	57                   	push   edi
c0019959:	e8 48 8e ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c001995e:	83 c4 0c             	add    esp,0xc
c0019961:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019965:	50                   	push   eax
c0019966:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0019969:	57                   	push   edi
c001996a:	e8 47 91 ff ff       	call   c0012ab6 <File::stat(unsigned long long*, bool*)>
c001996f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019972:	89 c3                	mov    ebx,eax
c0019974:	8b 07                	mov    eax,DWORD PTR [edi]
c0019976:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019979:	83 c4 10             	add    esp,0x10
c001997c:	31 c0                	xor    eax,eax
c001997e:	85 db                	test   ebx,ebx
c0019980:	0f 95 c0             	setne  al
c0019983:	31 d2                	xor    edx,edx
c0019985:	f7 d8                	neg    eax
c0019987:	83 d2 00             	adc    edx,0x0
c001998a:	83 c4 10             	add    esp,0x10
c001998d:	f7 da                	neg    edx
c001998f:	5b                   	pop    ebx
c0019990:	5e                   	pop    esi
c0019991:	5f                   	pop    edi
c0019992:	c3                   	ret    
c0019993:	83 ec 08             	sub    esp,0x8
c0019996:	53                   	push   ebx
c0019997:	68 ac 85 02 c0       	push   0xc00285ac
c001999c:	e8 d6 88 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00199a1:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00199a4:	83 c4 10             	add    esp,0x10
c00199a7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00199ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00199b4:	31 d2                	xor    edx,edx
c00199b6:	83 c4 10             	add    esp,0x10
c00199b9:	31 c0                	xor    eax,eax
c00199bb:	5b                   	pop    ebx
c00199bc:	5e                   	pop    esi
c00199bd:	5f                   	pop    edi
c00199be:	c3                   	ret    
c00199bf:	83 c4 10             	add    esp,0x10
c00199c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00199c7:	5b                   	pop    ebx
c00199c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00199cd:	5e                   	pop    esi
c00199ce:	5f                   	pop    edi
c00199cf:	c3                   	ret    

c00199d0 <sysCallSize(regs*)>:
c00199d0:	53                   	push   ebx
c00199d1:	83 ec 18             	sub    esp,0x18
c00199d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00199d8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00199db:	83 f8 02             	cmp    eax,0x2
c00199de:	76 64                	jbe    c0019a44 <sysCallSize(regs*)+0x74>
c00199e0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00199e5:	77 33                	ja     c0019a1a <sysCallSize(regs*)+0x4a>
c00199e7:	83 ec 0c             	sub    esp,0xc
c00199ea:	50                   	push   eax
c00199eb:	e8 5f 77 ff ff       	call   c001114f <getFromFileDescriptor(int)>
c00199f0:	83 c4 0c             	add    esp,0xc
c00199f3:	8d 54 24 13          	lea    edx,[esp+0x13]
c00199f7:	52                   	push   edx
c00199f8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00199fb:	50                   	push   eax
c00199fc:	e8 b5 90 ff ff       	call   c0012ab6 <File::stat(unsigned long long*, bool*)>
c0019a01:	83 c4 10             	add    esp,0x10
c0019a04:	85 c0                	test   eax,eax
c0019a06:	0f 95 c0             	setne  al
c0019a09:	31 d2                	xor    edx,edx
c0019a0b:	0f b6 c0             	movzx  eax,al
c0019a0e:	f7 d8                	neg    eax
c0019a10:	83 d2 00             	adc    edx,0x0
c0019a13:	83 c4 18             	add    esp,0x18
c0019a16:	f7 da                	neg    edx
c0019a18:	5b                   	pop    ebx
c0019a19:	c3                   	ret    
c0019a1a:	83 ec 08             	sub    esp,0x8
c0019a1d:	50                   	push   eax
c0019a1e:	68 ac 85 02 c0       	push   0xc00285ac
c0019a23:	e8 4f 88 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0019a28:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019a2b:	83 c4 10             	add    esp,0x10
c0019a2e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019a34:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019a3b:	31 d2                	xor    edx,edx
c0019a3d:	31 c0                	xor    eax,eax
c0019a3f:	83 c4 18             	add    esp,0x18
c0019a42:	5b                   	pop    ebx
c0019a43:	c3                   	ret    
c0019a44:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019a49:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019a4e:	83 c4 18             	add    esp,0x18
c0019a51:	5b                   	pop    ebx
c0019a52:	c3                   	ret    

c0019a53 <sysCallClose(regs*)>:
c0019a53:	53                   	push   ebx
c0019a54:	83 ec 08             	sub    esp,0x8
c0019a57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a5b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019a5e:	83 f8 02             	cmp    eax,0x2
c0019a61:	76 50                	jbe    c0019ab3 <sysCallClose(regs*)+0x60>
c0019a63:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019a68:	74 58                	je     c0019ac2 <sysCallClose(regs*)+0x6f>
c0019a6a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019a6f:	74 60                	je     c0019ad1 <sysCallClose(regs*)+0x7e>
c0019a71:	77 2f                	ja     c0019aa2 <sysCallClose(regs*)+0x4f>
c0019a73:	83 ec 0c             	sub    esp,0xc
c0019a76:	50                   	push   eax
c0019a77:	e8 d3 76 ff ff       	call   c001114f <getFromFileDescriptor(int)>
c0019a7c:	89 c3                	mov    ebx,eax
c0019a7e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a81:	e8 e2 8d ff ff       	call   c0012868 <File::close()>
c0019a86:	83 c4 10             	add    esp,0x10
c0019a89:	85 db                	test   ebx,ebx
c0019a8b:	74 0c                	je     c0019a99 <sysCallClose(regs*)+0x46>
c0019a8d:	83 ec 0c             	sub    esp,0xc
c0019a90:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a92:	53                   	push   ebx
c0019a93:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a96:	83 c4 10             	add    esp,0x10
c0019a99:	31 c0                	xor    eax,eax
c0019a9b:	31 d2                	xor    edx,edx
c0019a9d:	83 c4 08             	add    esp,0x8
c0019aa0:	5b                   	pop    ebx
c0019aa1:	c3                   	ret    
c0019aa2:	83 ec 08             	sub    esp,0x8
c0019aa5:	50                   	push   eax
c0019aa6:	68 e0 84 02 c0       	push   0xc00284e0
c0019aab:	e8 c7 87 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0019ab0:	83 c4 10             	add    esp,0x10
c0019ab3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019ab8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019abd:	83 c4 08             	add    esp,0x8
c0019ac0:	5b                   	pop    ebx
c0019ac1:	c3                   	ret    
c0019ac2:	83 ec 0c             	sub    esp,0xc
c0019ac5:	68 c7 85 02 c0       	push   0xc00285c7
c0019aca:	e8 a8 87 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0019acf:	eb c5                	jmp    c0019a96 <sysCallClose(regs*)+0x43>
c0019ad1:	83 ec 0c             	sub    esp,0xc
c0019ad4:	68 d5 85 02 c0       	push   0xc00285d5
c0019ad9:	eb ef                	jmp    c0019aca <sysCallClose(regs*)+0x77>

c0019adb <sysCallOpenDir(regs*)>:
c0019adb:	56                   	push   esi
c0019adc:	53                   	push   ebx
c0019add:	53                   	push   ebx
c0019ade:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019ae2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0019ae5:	85 f6                	test   esi,esi
c0019ae7:	74 51                	je     c0019b3a <sysCallOpenDir(regs*)+0x5f>
c0019ae9:	83 ec 0c             	sub    esp,0xc
c0019aec:	68 14 01 00 00       	push   0x114
c0019af1:	e8 92 86 ff ff       	call   c0012188 <operator new(unsigned long)>
c0019af6:	83 c4 0c             	add    esp,0xc
c0019af9:	89 c6                	mov    esi,eax
c0019afb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b00:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019b03:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019b06:	56                   	push   esi
c0019b07:	e8 5c 91 ff ff       	call   c0012c68 <Directory::Directory(char const*, Process*)>
c0019b0c:	89 34 24             	mov    DWORD PTR [esp],esi
c0019b0f:	e8 b8 91 ff ff       	call   c0012ccc <Directory::open()>
c0019b14:	83 c4 10             	add    esp,0x10
c0019b17:	85 c0                	test   eax,eax
c0019b19:	75 1f                	jne    c0019b3a <sysCallOpenDir(regs*)+0x5f>
c0019b1b:	83 ec 0c             	sub    esp,0xc
c0019b1e:	56                   	push   esi
c0019b1f:	e8 76 73 ff ff       	call   c0010e9a <UnixFile::getFileDescriptor()>
c0019b24:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0019b27:	83 c4 10             	add    esp,0x10
c0019b2a:	89 02                	mov    DWORD PTR [edx],eax
c0019b2c:	c1 f8 1f             	sar    eax,0x1f
c0019b2f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019b32:	31 c0                	xor    eax,eax
c0019b34:	59                   	pop    ecx
c0019b35:	31 d2                	xor    edx,edx
c0019b37:	5b                   	pop    ebx
c0019b38:	5e                   	pop    esi
c0019b39:	c3                   	ret    
c0019b3a:	59                   	pop    ecx
c0019b3b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019b40:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019b45:	5b                   	pop    ebx
c0019b46:	5e                   	pop    esi
c0019b47:	c3                   	ret    

c0019b48 <sysCallMakeDir(regs*)>:
c0019b48:	56                   	push   esi
c0019b49:	53                   	push   ebx
c0019b4a:	83 ec 10             	sub    esp,0x10
c0019b4d:	68 14 01 00 00       	push   0x114
c0019b52:	e8 31 86 ff ff       	call   c0012188 <operator new(unsigned long)>
c0019b57:	83 c4 0c             	add    esp,0xc
c0019b5a:	89 c3                	mov    ebx,eax
c0019b5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b61:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019b64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019b68:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019b6b:	53                   	push   ebx
c0019b6c:	e8 f7 90 ff ff       	call   c0012c68 <Directory::Directory(char const*, Process*)>
c0019b71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b74:	e8 33 93 ff ff       	call   c0012eac <Directory::create()>
c0019b79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b7c:	89 c6                	mov    esi,eax
c0019b7e:	e8 a5 91 ff ff       	call   c0012d28 <Directory::close()>
c0019b83:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b88:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019b8b:	31 c0                	xor    eax,eax
c0019b8d:	85 f6                	test   esi,esi
c0019b8f:	0f 95 c0             	setne  al
c0019b92:	31 d2                	xor    edx,edx
c0019b94:	f7 d8                	neg    eax
c0019b96:	83 d2 00             	adc    edx,0x0
c0019b99:	83 c4 14             	add    esp,0x14
c0019b9c:	f7 da                	neg    edx
c0019b9e:	5b                   	pop    ebx
c0019b9f:	5e                   	pop    esi
c0019ba0:	c3                   	ret    

c0019ba1 <sysCallCloseDir(regs*)>:
c0019ba1:	53                   	push   ebx
c0019ba2:	83 ec 08             	sub    esp,0x8
c0019ba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ba9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019bac:	83 f8 02             	cmp    eax,0x2
c0019baf:	76 47                	jbe    c0019bf8 <sysCallCloseDir(regs*)+0x57>
c0019bb1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019bb6:	77 2f                	ja     c0019be7 <sysCallCloseDir(regs*)+0x46>
c0019bb8:	83 ec 0c             	sub    esp,0xc
c0019bbb:	50                   	push   eax
c0019bbc:	e8 8e 75 ff ff       	call   c001114f <getFromFileDescriptor(int)>
c0019bc1:	89 c3                	mov    ebx,eax
c0019bc3:	89 04 24             	mov    DWORD PTR [esp],eax
c0019bc6:	e8 5d 91 ff ff       	call   c0012d28 <Directory::close()>
c0019bcb:	83 c4 10             	add    esp,0x10
c0019bce:	85 db                	test   ebx,ebx
c0019bd0:	74 0c                	je     c0019bde <sysCallCloseDir(regs*)+0x3d>
c0019bd2:	83 ec 0c             	sub    esp,0xc
c0019bd5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bd7:	53                   	push   ebx
c0019bd8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019bdb:	83 c4 10             	add    esp,0x10
c0019bde:	31 c0                	xor    eax,eax
c0019be0:	31 d2                	xor    edx,edx
c0019be2:	83 c4 08             	add    esp,0x8
c0019be5:	5b                   	pop    ebx
c0019be6:	c3                   	ret    
c0019be7:	83 ec 08             	sub    esp,0x8
c0019bea:	50                   	push   eax
c0019beb:	68 08 85 02 c0       	push   0xc0028508
c0019bf0:	e8 82 86 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0019bf5:	83 c4 10             	add    esp,0x10
c0019bf8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019bfd:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019c02:	83 c4 08             	add    esp,0x8
c0019c05:	5b                   	pop    ebx
c0019c06:	c3                   	ret    

c0019c07 <sysCallWait(regs*)>:
c0019c07:	83 ec 10             	sub    esp,0x10
c0019c0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c0e:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0019c11:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019c14:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019c17:	e8 ed 22 00 00       	call   c001bf09 <waitTask(int, int*, int)>
c0019c1c:	83 c4 1c             	add    esp,0x1c
c0019c1f:	99                   	cdq    
c0019c20:	c3                   	ret    

c0019c21 <sysCallRmdir(regs*)>:
c0019c21:	56                   	push   esi
c0019c22:	53                   	push   ebx
c0019c23:	83 ec 10             	sub    esp,0x10
c0019c26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019c2a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0019c2d:	68 14 01 00 00       	push   0x114
c0019c32:	e8 51 85 ff ff       	call   c0012188 <operator new(unsigned long)>
c0019c37:	83 c4 0c             	add    esp,0xc
c0019c3a:	89 c3                	mov    ebx,eax
c0019c3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019c41:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019c44:	56                   	push   esi
c0019c45:	53                   	push   ebx
c0019c46:	e8 5b 8b ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c0019c4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c4e:	e8 2f 8d ff ff       	call   c0012982 <File::unlink()>
c0019c53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c56:	89 c6                	mov    esi,eax
c0019c58:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c5a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019c5d:	31 c0                	xor    eax,eax
c0019c5f:	85 f6                	test   esi,esi
c0019c61:	0f 95 c0             	setne  al
c0019c64:	31 d2                	xor    edx,edx
c0019c66:	f7 d8                	neg    eax
c0019c68:	83 d2 00             	adc    edx,0x0
c0019c6b:	83 c4 14             	add    esp,0x14
c0019c6e:	f7 da                	neg    edx
c0019c70:	5b                   	pop    ebx
c0019c71:	5e                   	pop    esi
c0019c72:	c3                   	ret    

c0019c73 <sysCallUnlink(regs*)>:
c0019c73:	56                   	push   esi
c0019c74:	53                   	push   ebx
c0019c75:	83 ec 10             	sub    esp,0x10
c0019c78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019c7c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0019c7f:	68 14 01 00 00       	push   0x114
c0019c84:	e8 ff 84 ff ff       	call   c0012188 <operator new(unsigned long)>
c0019c89:	83 c4 0c             	add    esp,0xc
c0019c8c:	89 c3                	mov    ebx,eax
c0019c8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019c93:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019c96:	56                   	push   esi
c0019c97:	53                   	push   ebx
c0019c98:	e8 09 8b ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c0019c9d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ca0:	e8 dd 8c ff ff       	call   c0012982 <File::unlink()>
c0019ca5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ca8:	89 c6                	mov    esi,eax
c0019caa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019cac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019caf:	31 c0                	xor    eax,eax
c0019cb1:	85 f6                	test   esi,esi
c0019cb3:	0f 95 c0             	setne  al
c0019cb6:	31 d2                	xor    edx,edx
c0019cb8:	f7 d8                	neg    eax
c0019cba:	83 d2 00             	adc    edx,0x0
c0019cbd:	83 c4 14             	add    esp,0x14
c0019cc0:	f7 da                	neg    edx
c0019cc2:	5b                   	pop    ebx
c0019cc3:	5e                   	pop    esi
c0019cc4:	c3                   	ret    

c0019cc5 <sysCallGetArgv(regs*)>:
c0019cc5:	83 ec 0c             	sub    esp,0xc
c0019cc8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019ccc:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0019ccf:	85 c0                	test   eax,eax
c0019cd1:	78 2b                	js     c0019cfe <sysCallGetArgv(regs*)+0x39>
c0019cd3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019cd9:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0019cdc:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0019ce2:	7d 1a                	jge    c0019cfe <sysCallGetArgv(regs*)+0x39>
c0019ce4:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0019ceb:	85 c0                	test   eax,eax
c0019ced:	74 17                	je     c0019d06 <sysCallGetArgv(regs*)+0x41>
c0019cef:	83 ec 08             	sub    esp,0x8
c0019cf2:	50                   	push   eax
c0019cf3:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0019cf6:	e8 69 6a fe ff       	call   c0000764 <strcpy>
c0019cfb:	83 c4 10             	add    esp,0x10
c0019cfe:	31 c0                	xor    eax,eax
c0019d00:	31 d2                	xor    edx,edx
c0019d02:	83 c4 0c             	add    esp,0xc
c0019d05:	c3                   	ret    
c0019d06:	b8 01 00 00 00       	mov    eax,0x1
c0019d0b:	31 d2                	xor    edx,edx
c0019d0d:	83 c4 0c             	add    esp,0xc
c0019d10:	c3                   	ret    

c0019d11 <sysCallTTYName(regs*)>:
c0019d11:	56                   	push   esi
c0019d12:	53                   	push   ebx
c0019d13:	53                   	push   ebx
c0019d14:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019d18:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019d1b:	85 c0                	test   eax,eax
c0019d1d:	74 5f                	je     c0019d7e <sysCallTTYName(regs*)+0x6d>
c0019d1f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019d22:	83 f8 02             	cmp    eax,0x2
c0019d25:	77 3e                	ja     c0019d65 <sysCallTTYName(regs*)+0x54>
c0019d27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019d2c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019d2f:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0019d35:	85 db                	test   ebx,ebx
c0019d37:	74 45                	je     c0019d7e <sysCallTTYName(regs*)+0x6d>
c0019d39:	83 ec 0c             	sub    esp,0xc
c0019d3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d3e:	53                   	push   ebx
c0019d3f:	ff 10                	call   DWORD PTR [eax]
c0019d41:	83 c4 10             	add    esp,0x10
c0019d44:	84 c0                	test   al,al
c0019d46:	74 41                	je     c0019d89 <sysCallTTYName(regs*)+0x78>
c0019d48:	83 ec 08             	sub    esp,0x8
c0019d4b:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0019d51:	53                   	push   ebx
c0019d52:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0019d55:	e8 0a 6a fe ff       	call   c0000764 <strcpy>
c0019d5a:	83 c4 10             	add    esp,0x10
c0019d5d:	31 c0                	xor    eax,eax
c0019d5f:	59                   	pop    ecx
c0019d60:	31 d2                	xor    edx,edx
c0019d62:	5b                   	pop    ebx
c0019d63:	5e                   	pop    esi
c0019d64:	c3                   	ret    
c0019d65:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019d6a:	74 bb                	je     c0019d27 <sysCallTTYName(regs*)+0x16>
c0019d6c:	83 ec 0c             	sub    esp,0xc
c0019d6f:	50                   	push   eax
c0019d70:	e8 da 73 ff ff       	call   c001114f <getFromFileDescriptor(int)>
c0019d75:	83 c4 10             	add    esp,0x10
c0019d78:	89 c3                	mov    ebx,eax
c0019d7a:	85 db                	test   ebx,ebx
c0019d7c:	75 bb                	jne    c0019d39 <sysCallTTYName(regs*)+0x28>
c0019d7e:	59                   	pop    ecx
c0019d7f:	b8 01 00 00 00       	mov    eax,0x1
c0019d84:	31 d2                	xor    edx,edx
c0019d86:	5b                   	pop    ebx
c0019d87:	5e                   	pop    esi
c0019d88:	c3                   	ret    
c0019d89:	59                   	pop    ecx
c0019d8a:	b8 02 00 00 00       	mov    eax,0x2
c0019d8f:	31 d2                	xor    edx,edx
c0019d91:	5b                   	pop    ebx
c0019d92:	5e                   	pop    esi
c0019d93:	c3                   	ret    

c0019d94 <sysCallGetEnv(regs*)>:
c0019d94:	83 ec 0c             	sub    esp,0xc
c0019d97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d9b:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0019d9e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019da1:	85 c9                	test   ecx,ecx
c0019da3:	75 22                	jne    c0019dc7 <sysCallGetEnv(regs*)+0x33>
c0019da5:	85 d2                	test   edx,edx
c0019da7:	74 08                	je     c0019db1 <sysCallGetEnv(regs*)+0x1d>
c0019da9:	31 c0                	xor    eax,eax
c0019dab:	31 d2                	xor    edx,edx
c0019dad:	83 c4 0c             	add    esp,0xc
c0019db0:	c3                   	ret    
c0019db1:	83 ec 0c             	sub    esp,0xc
c0019db4:	68 2c 85 02 c0       	push   0xc002852c
c0019db9:	e8 24 69 fe ff       	call   c00006e2 <strlen>
c0019dbe:	83 c4 10             	add    esp,0x10
c0019dc1:	31 d2                	xor    edx,edx
c0019dc3:	83 c4 0c             	add    esp,0xc
c0019dc6:	c3                   	ret    
c0019dc7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019dca:	85 d2                	test   edx,edx
c0019dcc:	74 05                	je     c0019dd3 <sysCallGetEnv(regs*)+0x3f>
c0019dce:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0019dd1:	eb d6                	jmp    c0019da9 <sysCallGetEnv(regs*)+0x15>
c0019dd3:	83 ec 08             	sub    esp,0x8
c0019dd6:	68 2c 85 02 c0       	push   0xc002852c
c0019ddb:	50                   	push   eax
c0019ddc:	e8 83 69 fe ff       	call   c0000764 <strcpy>
c0019de1:	83 c4 10             	add    esp,0x10
c0019de4:	eb c3                	jmp    c0019da9 <sysCallGetEnv(regs*)+0x15>

c0019de6 <sysCallUSleep(regs*)>:
c0019de6:	83 ec 14             	sub    esp,0x14
c0019de9:	b8 e8 03 00 00       	mov    eax,0x3e8
c0019dee:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019df2:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0019df9:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0019dfc:	01 ca                	add    edx,ecx
c0019dfe:	52                   	push   edx
c0019dff:	50                   	push   eax
c0019e00:	e8 9d 21 00 00       	call   c001bfa2 <nanoSleep(unsigned long long)>
c0019e05:	31 c0                	xor    eax,eax
c0019e07:	31 d2                	xor    edx,edx
c0019e09:	83 c4 1c             	add    esp,0x1c
c0019e0c:	c3                   	ret    

c0019e0d <sysCallSpawn(regs*)>:
c0019e0d:	56                   	push   esi
c0019e0e:	53                   	push   ebx
c0019e0f:	53                   	push   ebx
c0019e10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e14:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019e17:	85 f6                	test   esi,esi
c0019e19:	75 08                	jne    c0019e23 <sysCallSpawn(regs*)+0x16>
c0019e1b:	59                   	pop    ecx
c0019e1c:	31 c0                	xor    eax,eax
c0019e1e:	31 d2                	xor    edx,edx
c0019e20:	5b                   	pop    ebx
c0019e21:	5e                   	pop    esi
c0019e22:	c3                   	ret    
c0019e23:	83 ec 0c             	sub    esp,0xc
c0019e26:	68 3b 07 00 00       	push   0x73b
c0019e2b:	e8 58 83 ff ff       	call   c0012188 <operator new(unsigned long)>
c0019e30:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019e33:	89 c6                	mov    esi,eax
c0019e35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e3a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019e3d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019e40:	56                   	push   esi
c0019e41:	e8 bc 18 00 00       	call   c001b702 <Process::Process(char const*, Process*, char**)>
c0019e46:	83 c4 20             	add    esp,0x20
c0019e49:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0019e50:	75 c9                	jne    c0019e1b <sysCallSpawn(regs*)+0xe>
c0019e52:	83 ec 0c             	sub    esp,0xc
c0019e55:	56                   	push   esi
c0019e56:	e8 0d 1e 00 00       	call   c001bc68 <Process::createUserThread()>
c0019e5b:	8b 06                	mov    eax,DWORD PTR [esi]
c0019e5d:	83 c4 10             	add    esp,0x10
c0019e60:	99                   	cdq    
c0019e61:	59                   	pop    ecx
c0019e62:	5b                   	pop    ebx
c0019e63:	5e                   	pop    esi
c0019e64:	c3                   	ret    

c0019e65 <sysAppSettings(regs*)>:
c0019e65:	53                   	push   ebx
c0019e66:	83 ec 08             	sub    esp,0x8
c0019e69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e6d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0019e70:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c0019e76:	25 e0 1f 00 00       	and    eax,0x1fe0
c0019e7b:	66 3d c0 09          	cmp    ax,0x9c0
c0019e7f:	75 2f                	jne    c0019eb0 <sysAppSettings(regs*)+0x4b>
c0019e81:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0019e87:	83 e0 1f             	and    eax,0x1f
c0019e8a:	3c 01                	cmp    al,0x1
c0019e8c:	74 2e                	je     c0019ebc <sysAppSettings(regs*)+0x57>
c0019e8e:	3c 07                	cmp    al,0x7
c0019e90:	0f 84 bd 00 00 00    	je     c0019f53 <sysAppSettings(regs*)+0xee>
c0019e96:	84 c0                	test   al,al
c0019e98:	0f 84 dc 00 00 00    	je     c0019f7a <sysAppSettings(regs*)+0x115>
c0019e9e:	3c 08                	cmp    al,0x8
c0019ea0:	74 6d                	je     c0019f0f <sysAppSettings(regs*)+0xaa>
c0019ea2:	0f b6 c0             	movzx  eax,al
c0019ea5:	83 c4 08             	add    esp,0x8
c0019ea8:	05 e8 03 00 00       	add    eax,0x3e8
c0019ead:	5b                   	pop    ebx
c0019eae:	99                   	cdq    
c0019eaf:	c3                   	ret    
c0019eb0:	b8 01 00 00 00       	mov    eax,0x1
c0019eb5:	31 d2                	xor    edx,edx
c0019eb7:	83 c4 08             	add    esp,0x8
c0019eba:	5b                   	pop    ebx
c0019ebb:	c3                   	ret    
c0019ebc:	51                   	push   ecx
c0019ebd:	68 00 01 00 00       	push   0x100
c0019ec2:	6a 00                	push   0x0
c0019ec4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ec9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019ecc:	83 c0 0c             	add    eax,0xc
c0019ecf:	50                   	push   eax
c0019ed0:	e8 f0 67 fe ff       	call   c00006c5 <memset>
c0019ed5:	83 c4 0c             	add    esp,0xc
c0019ed8:	68 ff 00 00 00       	push   0xff
c0019edd:	53                   	push   ebx
c0019ede:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ee3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019ee6:	83 c0 0c             	add    eax,0xc
c0019ee9:	50                   	push   eax
c0019eea:	e8 a0 67 fe ff       	call   c000068f <memcpy>
c0019eef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ef4:	5b                   	pop    ebx
c0019ef5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019ef8:	5a                   	pop    edx
c0019ef9:	8d 50 0c             	lea    edx,[eax+0xc]
c0019efc:	52                   	push   edx
c0019efd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f03:	e8 0e 64 ff ff       	call   c0010316 <VgaText::setTitle(char*)>
c0019f08:	83 c4 10             	add    esp,0x10
c0019f0b:	31 c0                	xor    eax,eax
c0019f0d:	eb a6                	jmp    c0019eb5 <sysAppSettings(regs*)+0x50>
c0019f0f:	83 ec 08             	sub    esp,0x8
c0019f12:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0019f18:	83 e0 0f             	and    eax,0xf
c0019f1b:	50                   	push   eax
c0019f1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019f21:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019f24:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f2a:	e8 d7 63 ff ff       	call   c0010306 <VgaText::setTitleColour(VgaColour)>
c0019f2f:	58                   	pop    eax
c0019f30:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0019f36:	5a                   	pop    edx
c0019f37:	c1 e8 04             	shr    eax,0x4
c0019f3a:	83 e0 0f             	and    eax,0xf
c0019f3d:	50                   	push   eax
c0019f3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019f43:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019f46:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f4c:	e8 a5 63 ff ff       	call   c00102f6 <VgaText::setTitleTextColour(VgaColour)>
c0019f51:	eb b5                	jmp    c0019f08 <sysAppSettings(regs*)+0xa3>
c0019f53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019f58:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019f5b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0019f61:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0019f67:	c0 e8 06             	shr    al,0x6
c0019f6a:	83 e0 01             	and    eax,0x1
c0019f6d:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0019f73:	31 c0                	xor    eax,eax
c0019f75:	e9 3b ff ff ff       	jmp    c0019eb5 <sysAppSettings(regs*)+0x50>
c0019f7a:	b8 02 00 00 00       	mov    eax,0x2
c0019f7f:	e9 31 ff ff ff       	jmp    c0019eb5 <sysAppSettings(regs*)+0x50>

c0019f84 <sysSetFatAttrib(regs*)>:
c0019f84:	57                   	push   edi
c0019f85:	56                   	push   esi
c0019f86:	53                   	push   ebx
c0019f87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f8b:	83 ec 0c             	sub    esp,0xc
c0019f8e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019f91:	68 14 01 00 00       	push   0x114
c0019f96:	e8 ed 81 ff ff       	call   c0012188 <operator new(unsigned long)>
c0019f9b:	83 c4 0c             	add    esp,0xc
c0019f9e:	89 c3                	mov    ebx,eax
c0019fa0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019fa5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019fa8:	57                   	push   edi
c0019fa9:	53                   	push   ebx
c0019faa:	e8 f7 87 ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c0019faf:	83 c4 0c             	add    esp,0xc
c0019fb2:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019fb5:	0f b6 d4             	movzx  edx,ah
c0019fb8:	0f b6 c0             	movzx  eax,al
c0019fbb:	52                   	push   edx
c0019fbc:	50                   	push   eax
c0019fbd:	53                   	push   ebx
c0019fbe:	e8 59 8a ff ff       	call   c0012a1c <File::chfatattr(unsigned char, unsigned char)>
c0019fc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fc6:	89 c6                	mov    esi,eax
c0019fc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019fca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019fcd:	83 c4 10             	add    esp,0x10
c0019fd0:	31 c0                	xor    eax,eax
c0019fd2:	5b                   	pop    ebx
c0019fd3:	85 f6                	test   esi,esi
c0019fd5:	5e                   	pop    esi
c0019fd6:	0f 95 c0             	setne  al
c0019fd9:	5f                   	pop    edi
c0019fda:	31 d2                	xor    edx,edx
c0019fdc:	f7 d8                	neg    eax
c0019fde:	83 d2 00             	adc    edx,0x0
c0019fe1:	f7 da                	neg    edx
c0019fe3:	c3                   	ret    

c0019fe4 <sysPanic(regs*)>:
c0019fe4:	83 ec 18             	sub    esp,0x18
c0019fe7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019feb:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019fee:	e8 14 eb ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c0019ff3:	c7 04 24 e3 85 02 c0 	mov    DWORD PTR [esp],0xc00285e3
c0019ffa:	e8 08 eb ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c0019fff:	b8 01 00 00 00       	mov    eax,0x1
c001a004:	31 d2                	xor    edx,edx
c001a006:	83 c4 1c             	add    esp,0x1c
c001a009:	c3                   	ret    

c001a00a <sysPipe(regs*)>:
c001a00a:	57                   	push   edi
c001a00b:	56                   	push   esi
c001a00c:	53                   	push   ebx
c001a00d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a011:	83 ec 0c             	sub    esp,0xc
c001a014:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001a017:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001a01a:	6a 20                	push   0x20
c001a01c:	e8 67 81 ff ff       	call   c0012188 <operator new(unsigned long)>
c001a021:	89 c3                	mov    ebx,eax
c001a023:	58                   	pop    eax
c001a024:	5a                   	pop    edx
c001a025:	68 00 50 00 00       	push   0x5000
c001a02a:	53                   	push   ebx
c001a02b:	e8 24 5c ff ff       	call   c000fc54 <Pipe::Pipe(int)>
c001a030:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a033:	e8 62 6e ff ff       	call   c0010e9a <UnixFile::getFileDescriptor()>
c001a038:	89 07                	mov    DWORD PTR [edi],eax
c001a03a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a03d:	e8 58 6e ff ff       	call   c0010e9a <UnixFile::getFileDescriptor()>
c001a042:	83 c4 10             	add    esp,0x10
c001a045:	89 06                	mov    DWORD PTR [esi],eax
c001a047:	31 d2                	xor    edx,edx
c001a049:	5b                   	pop    ebx
c001a04a:	31 c0                	xor    eax,eax
c001a04c:	5e                   	pop    esi
c001a04d:	5f                   	pop    edi
c001a04e:	c3                   	ret    

c001a04f <sysGetUnixTime(regs*)>:
c001a04f:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c001a054:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a05a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a05e:	e9 0b 91 ff ff       	jmp    c001316e <Clock::timeInSecondsLocal()>

c001a063 <string_ends_with(char const*, char const*)>:
c001a063:	57                   	push   edi
c001a064:	56                   	push   esi
c001a065:	53                   	push   ebx
c001a066:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a06a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a06e:	83 ec 0c             	sub    esp,0xc
c001a071:	53                   	push   ebx
c001a072:	e8 6b 66 fe ff       	call   c00006e2 <strlen>
c001a077:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a07a:	89 c6                	mov    esi,eax
c001a07c:	e8 61 66 fe ff       	call   c00006e2 <strlen>
c001a081:	83 c4 10             	add    esp,0x10
c001a084:	39 c6                	cmp    esi,eax
c001a086:	7d 06                	jge    c001a08e <string_ends_with(char const*, char const*)+0x2b>
c001a088:	5b                   	pop    ebx
c001a089:	31 c0                	xor    eax,eax
c001a08b:	5e                   	pop    esi
c001a08c:	5f                   	pop    edi
c001a08d:	c3                   	ret    
c001a08e:	83 ec 08             	sub    esp,0x8
c001a091:	29 c6                	sub    esi,eax
c001a093:	57                   	push   edi
c001a094:	01 f3                	add    ebx,esi
c001a096:	53                   	push   ebx
c001a097:	e8 19 67 fe ff       	call   c00007b5 <strcmp>
c001a09c:	83 c4 10             	add    esp,0x10
c001a09f:	85 c0                	test   eax,eax
c001a0a1:	5b                   	pop    ebx
c001a0a2:	0f 94 c0             	sete   al
c001a0a5:	5e                   	pop    esi
c001a0a6:	0f b6 c0             	movzx  eax,al
c001a0a9:	5f                   	pop    edi
c001a0aa:	c3                   	ret    

c001a0ab <sysCallOpen(regs*)>:
c001a0ab:	56                   	push   esi
c001a0ac:	53                   	push   ebx
c001a0ad:	81 ec 04 01 00 00    	sub    esp,0x104
c001a0b3:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001a0ba:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001a0bd:	85 c9                	test   ecx,ecx
c001a0bf:	0f 84 b3 00 00 00    	je     c001a178 <sysCallOpen(regs*)+0xcd>
c001a0c5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001a0c8:	85 c0                	test   eax,eax
c001a0ca:	0f 84 a8 00 00 00    	je     c001a178 <sysCallOpen(regs*)+0xcd>
c001a0d0:	52                   	push   edx
c001a0d1:	68 f2 85 02 c0       	push   0xc00285f2
c001a0d6:	50                   	push   eax
c001a0d7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a0db:	56                   	push   esi
c001a0dc:	e8 1b 85 ff ff       	call   c00125fc <standardiseFiles(char*, char const*, char const*)>
c001a0e1:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0e4:	e8 f9 65 fe ff       	call   c00006e2 <strlen>
c001a0e9:	83 c4 10             	add    esp,0x10
c001a0ec:	48                   	dec    eax
c001a0ed:	74 1d                	je     c001a10c <sysCallOpen(regs*)+0x61>
c001a0ef:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001a0f2:	eb 0f                	jmp    c001a103 <sysCallOpen(regs*)+0x58>
c001a0f4:	80 fa 3a             	cmp    dl,0x3a
c001a0f7:	74 0f                	je     c001a108 <sysCallOpen(regs*)+0x5d>
c001a0f9:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a0fd:	48                   	dec    eax
c001a0fe:	74 0c                	je     c001a10c <sysCallOpen(regs*)+0x61>
c001a100:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001a103:	80 fa 2e             	cmp    dl,0x2e
c001a106:	75 ec                	jne    c001a0f4 <sysCallOpen(regs*)+0x49>
c001a108:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001a10c:	83 ec 08             	sub    esp,0x8
c001a10f:	68 f6 85 02 c0       	push   0xc00285f6
c001a114:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a117:	e8 47 ff ff ff       	call   c001a063 <string_ends_with(char const*, char const*)>
c001a11c:	83 c4 10             	add    esp,0x10
c001a11f:	85 c0                	test   eax,eax
c001a121:	75 17                	jne    c001a13a <sysCallOpen(regs*)+0x8f>
c001a123:	83 ec 08             	sub    esp,0x8
c001a126:	68 17 86 02 c0       	push   0xc0028617
c001a12b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a12e:	e8 30 ff ff ff       	call   c001a063 <string_ends_with(char const*, char const*)>
c001a133:	83 c4 10             	add    esp,0x10
c001a136:	85 c0                	test   eax,eax
c001a138:	74 51                	je     c001a18b <sysCallOpen(regs*)+0xe0>
c001a13a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a13d:	83 ec 08             	sub    esp,0x8
c001a140:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001a146:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a14d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a150:	ff 30                	push   DWORD PTR [eax]
c001a152:	68 fb 85 02 c0       	push   0xc00285fb
c001a157:	e8 1b 81 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001a15c:	c7 04 24 0a 86 02 c0 	mov    DWORD PTR [esp],0xc002860a
c001a163:	e8 0f 81 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001a168:	83 c4 10             	add    esp,0x10
c001a16b:	81 c4 04 01 00 00    	add    esp,0x104
c001a171:	31 c0                	xor    eax,eax
c001a173:	31 d2                	xor    edx,edx
c001a175:	5b                   	pop    ebx
c001a176:	5e                   	pop    esi
c001a177:	c3                   	ret    
c001a178:	81 c4 04 01 00 00    	add    esp,0x104
c001a17e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a183:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a188:	5b                   	pop    ebx
c001a189:	5e                   	pop    esi
c001a18a:	c3                   	ret    
c001a18b:	83 ec 08             	sub    esp,0x8
c001a18e:	68 f7 85 02 c0       	push   0xc00285f7
c001a193:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a196:	e8 1a 66 fe ff       	call   c00007b5 <strcmp>
c001a19b:	83 c4 10             	add    esp,0x10
c001a19e:	85 c0                	test   eax,eax
c001a1a0:	74 98                	je     c001a13a <sysCallOpen(regs*)+0x8f>
c001a1a2:	83 ec 08             	sub    esp,0x8
c001a1a5:	68 f6 85 02 c0       	push   0xc00285f6
c001a1aa:	56                   	push   esi
c001a1ab:	e8 b3 fe ff ff       	call   c001a063 <string_ends_with(char const*, char const*)>
c001a1b0:	83 c4 10             	add    esp,0x10
c001a1b3:	85 c0                	test   eax,eax
c001a1b5:	75 83                	jne    c001a13a <sysCallOpen(regs*)+0x8f>
c001a1b7:	83 ec 08             	sub    esp,0x8
c001a1ba:	68 1c 86 02 c0       	push   0xc002861c
c001a1bf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a1c2:	e8 9c fe ff ff       	call   c001a063 <string_ends_with(char const*, char const*)>
c001a1c7:	83 c4 10             	add    esp,0x10
c001a1ca:	85 c0                	test   eax,eax
c001a1cc:	0f 85 d1 00 00 00    	jne    c001a2a3 <sysCallOpen(regs*)+0x1f8>
c001a1d2:	83 ec 08             	sub    esp,0x8
c001a1d5:	68 21 86 02 c0       	push   0xc0028621
c001a1da:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a1dd:	e8 81 fe ff ff       	call   c001a063 <string_ends_with(char const*, char const*)>
c001a1e2:	83 c4 10             	add    esp,0x10
c001a1e5:	85 c0                	test   eax,eax
c001a1e7:	0f 85 b6 00 00 00    	jne    c001a2a3 <sysCallOpen(regs*)+0x1f8>
c001a1ed:	83 ec 08             	sub    esp,0x8
c001a1f0:	68 1d 86 02 c0       	push   0xc002861d
c001a1f5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a1f8:	e8 b8 65 fe ff       	call   c00007b5 <strcmp>
c001a1fd:	83 c4 10             	add    esp,0x10
c001a200:	85 c0                	test   eax,eax
c001a202:	0f 84 9b 00 00 00    	je     c001a2a3 <sysCallOpen(regs*)+0x1f8>
c001a208:	83 ec 08             	sub    esp,0x8
c001a20b:	68 1c 86 02 c0       	push   0xc002861c
c001a210:	56                   	push   esi
c001a211:	e8 4d fe ff ff       	call   c001a063 <string_ends_with(char const*, char const*)>
c001a216:	83 c4 10             	add    esp,0x10
c001a219:	85 c0                	test   eax,eax
c001a21b:	0f 85 82 00 00 00    	jne    c001a2a3 <sysCallOpen(regs*)+0x1f8>
c001a221:	83 ec 0c             	sub    esp,0xc
c001a224:	68 14 01 00 00       	push   0x114
c001a229:	e8 5a 7f ff ff       	call   c0012188 <operator new(unsigned long)>
c001a22e:	83 c4 0c             	add    esp,0xc
c001a231:	89 c6                	mov    esi,eax
c001a233:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a238:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a23b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a23e:	56                   	push   esi
c001a23f:	e8 62 85 ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c001a244:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001a247:	83 c4 10             	add    esp,0x10
c001a24a:	0f b6 c2             	movzx  eax,dl
c001a24d:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001a250:	89 d0                	mov    eax,edx
c001a252:	83 e0 01             	and    eax,0x1
c001a255:	f6 c2 02             	test   dl,0x2
c001a258:	74 03                	je     c001a25d <sysCallOpen(regs*)+0x1b2>
c001a25a:	83 c8 02             	or     eax,0x2
c001a25d:	f6 c2 04             	test   dl,0x4
c001a260:	74 03                	je     c001a265 <sysCallOpen(regs*)+0x1ba>
c001a262:	83 c8 04             	or     eax,0x4
c001a265:	f6 c2 08             	test   dl,0x8
c001a268:	74 03                	je     c001a26d <sysCallOpen(regs*)+0x1c2>
c001a26a:	83 c8 0a             	or     eax,0xa
c001a26d:	83 e2 10             	and    edx,0x10
c001a270:	74 03                	je     c001a275 <sysCallOpen(regs*)+0x1ca>
c001a272:	83 c8 12             	or     eax,0x12
c001a275:	83 ec 08             	sub    esp,0x8
c001a278:	50                   	push   eax
c001a279:	56                   	push   esi
c001a27a:	e8 8b 85 ff ff       	call   c001280a <File::open(FileOpenMode)>
c001a27f:	83 c4 10             	add    esp,0x10
c001a282:	85 c0                	test   eax,eax
c001a284:	0f 85 ee fe ff ff    	jne    c001a178 <sysCallOpen(regs*)+0xcd>
c001a28a:	83 ec 0c             	sub    esp,0xc
c001a28d:	56                   	push   esi
c001a28e:	e8 07 6c ff ff       	call   c0010e9a <UnixFile::getFileDescriptor()>
c001a293:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a296:	89 02                	mov    DWORD PTR [edx],eax
c001a298:	c1 f8 1f             	sar    eax,0x1f
c001a29b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a29e:	e9 c5 fe ff ff       	jmp    c001a168 <sysCallOpen(regs*)+0xbd>
c001a2a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a2a6:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001a2ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a2b3:	e9 b3 fe ff ff       	jmp    c001a16b <sysCallOpen(regs*)+0xc0>

c001a2b8 <setupSystemCalls()>:
c001a2b8:	c7 05 a0 b1 02 c0 14 95 01 c0 	mov    DWORD PTR ds:0xc002b1a0,0xc0019514
c001a2c2:	c7 05 a4 b1 02 c0 42 93 01 c0 	mov    DWORD PTR ds:0xc002b1a4,0xc0019342
c001a2cc:	c7 05 a8 b1 02 c0 57 94 01 c0 	mov    DWORD PTR ds:0xc002b1a8,0xc0019457
c001a2d6:	c7 05 ac b1 02 c0 ac 94 01 c0 	mov    DWORD PTR ds:0xc002b1ac,0xc00194ac
c001a2e0:	c7 05 b0 b1 02 c0 ef 93 01 c0 	mov    DWORD PTR ds:0xc002b1b0,0xc00193ef
c001a2ea:	c7 05 b4 b1 02 c0 2e 95 01 c0 	mov    DWORD PTR ds:0xc002b1b4,0xc001952e
c001a2f4:	c7 05 b8 b1 02 c0 d3 96 01 c0 	mov    DWORD PTR ds:0xc002b1b8,0xc00196d3
c001a2fe:	c7 05 bc b1 02 c0 f2 96 01 c0 	mov    DWORD PTR ds:0xc002b1bc,0xc00196f2
c001a308:	c7 05 c4 b1 02 c0 53 9a 01 c0 	mov    DWORD PTR ds:0xc002b1c4,0xc0019a53
c001a312:	c7 05 c0 b1 02 c0 ab a0 01 c0 	mov    DWORD PTR ds:0xc002b1c0,0xc001a0ab
c001a31c:	c7 05 c8 b1 02 c0 db 9a 01 c0 	mov    DWORD PTR ds:0xc002b1c8,0xc0019adb
c001a326:	c7 05 cc b1 02 c0 51 97 01 c0 	mov    DWORD PTR ds:0xc002b1cc,0xc0019751
c001a330:	c7 05 d0 b1 02 c0 3a 95 01 c0 	mov    DWORD PTR ds:0xc002b1d0,0xc001953a
c001a33a:	c7 05 d4 b1 02 c0 3f 95 01 c0 	mov    DWORD PTR ds:0xc002b1d4,0xc001953f
c001a344:	c7 05 d8 b1 02 c0 48 9b 01 c0 	mov    DWORD PTR ds:0xc002b1d8,0xc0019b48
c001a34e:	c7 05 dc b1 02 c0 a1 9b 01 c0 	mov    DWORD PTR ds:0xc002b1dc,0xc0019ba1
c001a358:	c7 05 e0 b1 02 c0 39 98 01 c0 	mov    DWORD PTR ds:0xc002b1e0,0xc0019839
c001a362:	c7 05 e4 b1 02 c0 a2 98 01 c0 	mov    DWORD PTR ds:0xc002b1e4,0xc00198a2
c001a36c:	c7 05 e8 b1 02 c0 d0 99 01 c0 	mov    DWORD PTR ds:0xc002b1e8,0xc00199d0
c001a376:	c7 05 ec b1 02 c0 44 95 01 c0 	mov    DWORD PTR ds:0xc002b1ec,0xc0019544
c001a380:	c7 05 f0 b1 02 c0 07 9c 01 c0 	mov    DWORD PTR ds:0xc002b1f0,0xc0019c07
c001a38a:	c7 05 f4 b1 02 c0 4e 95 01 c0 	mov    DWORD PTR ds:0xc002b1f4,0xc001954e
c001a394:	c7 05 f8 b1 02 c0 59 95 01 c0 	mov    DWORD PTR ds:0xc002b1f8,0xc0019559
c001a39e:	c7 05 fc b1 02 c0 21 9c 01 c0 	mov    DWORD PTR ds:0xc002b1fc,0xc0019c21
c001a3a8:	c7 05 00 b2 02 c0 73 9c 01 c0 	mov    DWORD PTR ds:0xc002b200,0xc0019c73
c001a3b2:	c7 05 04 b2 02 c0 64 95 01 c0 	mov    DWORD PTR ds:0xc002b204,0xc0019564
c001a3bc:	c7 05 08 b2 02 c0 c5 9c 01 c0 	mov    DWORD PTR ds:0xc002b208,0xc0019cc5
c001a3c6:	c7 05 0c b2 02 c0 0e 97 01 c0 	mov    DWORD PTR ds:0xc002b20c,0xc001970e
c001a3d0:	c7 05 10 b2 02 c0 11 9d 01 c0 	mov    DWORD PTR ds:0xc002b210,0xc0019d11
c001a3da:	c7 05 14 b2 02 c0 df 97 01 c0 	mov    DWORD PTR ds:0xc002b214,0xc00197df
c001a3e4:	c7 05 18 b2 02 c0 e6 9d 01 c0 	mov    DWORD PTR ds:0xc002b218,0xc0019de6
c001a3ee:	c7 05 1c b2 02 c0 1f 99 01 c0 	mov    DWORD PTR ds:0xc002b21c,0xc001991f
c001a3f8:	c7 05 20 b2 02 c0 0d 9e 01 c0 	mov    DWORD PTR ds:0xc002b220,0xc0019e0d
c001a402:	c7 05 24 b2 02 c0 94 9d 01 c0 	mov    DWORD PTR ds:0xc002b224,0xc0019d94
c001a40c:	c7 05 28 b2 02 c0 65 9e 01 c0 	mov    DWORD PTR ds:0xc002b228,0xc0019e65
c001a416:	c7 05 2c b2 02 c0 74 95 01 c0 	mov    DWORD PTR ds:0xc002b22c,0xc0019574
c001a420:	c7 05 30 b2 02 c0 de 95 01 c0 	mov    DWORD PTR ds:0xc002b230,0xc00195de
c001a42a:	c7 05 34 b2 02 c0 24 96 01 c0 	mov    DWORD PTR ds:0xc002b234,0xc0019624
c001a434:	c7 05 38 b2 02 c0 84 9f 01 c0 	mov    DWORD PTR ds:0xc002b238,0xc0019f84
c001a43e:	c7 05 3c b2 02 c0 e4 9f 01 c0 	mov    DWORD PTR ds:0xc002b23c,0xc0019fe4
c001a448:	c7 05 40 b2 02 c0 75 96 01 c0 	mov    DWORD PTR ds:0xc002b240,0xc0019675
c001a452:	c7 05 44 b2 02 c0 0a a0 01 c0 	mov    DWORD PTR ds:0xc002b244,0xc001a00a
c001a45c:	c7 05 48 b2 02 c0 4f a0 01 c0 	mov    DWORD PTR ds:0xc002b248,0xc001a04f
c001a466:	c7 05 4c b2 02 c0 5a 93 01 c0 	mov    DWORD PTR ds:0xc002b24c,0xc001935a
c001a470:	c3                   	ret    

c001a471 <systemCall(regs*, void*)>:
c001a471:	53                   	push   ebx
c001a472:	83 ec 08             	sub    esp,0x8
c001a475:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a479:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a47c:	83 f8 7f             	cmp    eax,0x7f
c001a47f:	77 16                	ja     c001a497 <systemCall(regs*, void*)+0x26>
c001a481:	8b 14 85 a0 b1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4e60]
c001a488:	85 d2                	test   edx,edx
c001a48a:	74 0b                	je     c001a497 <systemCall(regs*, void*)+0x26>
c001a48c:	83 ec 0c             	sub    esp,0xc
c001a48f:	53                   	push   ebx
c001a490:	ff d2                	call   edx
c001a492:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a495:	eb 0d                	jmp    c001a4a4 <systemCall(regs*, void*)+0x33>
c001a497:	52                   	push   edx
c001a498:	52                   	push   edx
c001a499:	50                   	push   eax
c001a49a:	68 26 86 02 c0       	push   0xc0028626
c001a49f:	e8 d3 7d ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001a4a4:	83 c4 10             	add    esp,0x10
c001a4a7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a4ac:	31 d2                	xor    edx,edx
c001a4ae:	83 c4 08             	add    esp,0x8
c001a4b1:	5b                   	pop    ebx
c001a4b2:	c3                   	ret    

c001a4b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001a4b3:	55                   	push   ebp
c001a4b4:	89 e5                	mov    ebp,esp
c001a4b6:	57                   	push   edi
c001a4b7:	56                   	push   esi
c001a4b8:	53                   	push   ebx
c001a4b9:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001a4bf:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001a4c2:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001a4c5:	85 c0                	test   eax,eax
c001a4c7:	0f 95 c1             	setne  cl
c001a4ca:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001a4ce:	0f 94 c2             	sete   dl
c001a4d1:	84 d1                	test   cl,dl
c001a4d3:	74 26                	je     c001a4fb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001a4d5:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001a4dc:	74 1d                	je     c001a4fb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001a4de:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001a4e1:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001a4e7:	89 d6                	mov    esi,edx
c001a4e9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001a4ef:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001a4f5:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001a4f8:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001a4fb:	83 ec 0c             	sub    esp,0xc
c001a4fe:	05 ff 0f 00 00       	add    eax,0xfff
c001a503:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001a506:	6a 01                	push   0x1
c001a508:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001a50e:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001a514:	e8 8c 6d ff ff       	call   c00112a5 <Virt::allocateKernelVirtualPages(int)>
c001a519:	83 c4 10             	add    esp,0x10
c001a51c:	89 c6                	mov    esi,eax
c001a51e:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001a524:	0f 86 21 01 00 00    	jbe    c001a64b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001a52a:	c1 eb 0c             	shr    ebx,0xc
c001a52d:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001a537:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001a53d:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001a540:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001a543:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001a549:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001a54c:	29 d8                	sub    eax,ebx
c001a54e:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001a554:	0f 83 f4 00 00 00    	jae    c001a64e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001a55a:	83 ec 0c             	sub    esp,0xc
c001a55d:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001a563:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001a566:	3d 00 10 00 00       	cmp    eax,0x1000
c001a56b:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001a56d:	52                   	push   edx
c001a56e:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001a574:	52                   	push   edx
c001a575:	76 05                	jbe    c001a57c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001a577:	b8 00 10 00 00       	mov    eax,0x1000
c001a57c:	31 d2                	xor    edx,edx
c001a57e:	52                   	push   edx
c001a57f:	50                   	push   eax
c001a580:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001a583:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a586:	83 c4 20             	add    esp,0x20
c001a589:	85 c0                	test   eax,eax
c001a58b:	74 1f                	je     c001a5ac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001a58d:	51                   	push   ecx
c001a58e:	51                   	push   ecx
c001a58f:	50                   	push   eax
c001a590:	68 3a 86 02 c0       	push   0xc002863a
c001a595:	e8 dd 7c ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001a59a:	89 34 24             	mov    DWORD PTR [esp],esi
c001a59d:	e8 5d 70 ff ff       	call   c00115ff <Virt::freeKernelVirtualPages(unsigned long)>
c001a5a2:	83 c4 10             	add    esp,0x10
c001a5a5:	31 c0                	xor    eax,eax
c001a5a7:	e9 7c 01 00 00       	jmp    c001a728 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001a5ac:	e8 a9 14 00 00       	call   c001ba5a <lockScheduler()>
c001a5b1:	e8 62 51 ff ff       	call   c000f718 <Phys::allocatePage()>
c001a5b6:	6a 07                	push   0x7
c001a5b8:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001a5be:	56                   	push   esi
c001a5bf:	50                   	push   eax
c001a5c0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a5c6:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a5c9:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001a5cf:	e8 a4 73 ff ff       	call   c0011978 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a5d4:	83 c4 0c             	add    esp,0xc
c001a5d7:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a5dd:	6a 00                	push   0x0
c001a5df:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a5e5:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a5e8:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001a5ee:	e8 e3 71 ff ff       	call   c00117d6 <VAS::mapOtherVASIn(bool, VAS*)>
c001a5f3:	58                   	pop    eax
c001a5f4:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001a5fa:	5a                   	pop    edx
c001a5fb:	68 07 04 00 00       	push   0x407
c001a600:	53                   	push   ebx
c001a601:	81 c3 00 10 00 00    	add    ebx,0x1000
c001a607:	50                   	push   eax
c001a608:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a60e:	6a 00                	push   0x0
c001a610:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a615:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a618:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a61e:	e8 0b 77 ff ff       	call   c0011d2e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001a623:	83 c4 1c             	add    esp,0x1c
c001a626:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001a62c:	68 00 10 00 00       	push   0x1000
c001a631:	50                   	push   eax
c001a632:	56                   	push   esi
c001a633:	e8 57 60 fe ff       	call   c000068f <memcpy>
c001a638:	e8 1f 14 00 00       	call   c001ba5c <unlockScheduler()>
c001a63d:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001a643:	83 c4 10             	add    esp,0x10
c001a646:	e9 f5 fe ff ff       	jmp    c001a540 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001a64b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001a64e:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001a658:	0f 86 bc 00 00 00    	jbe    c001a71a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001a65e:	e8 f7 13 00 00       	call   c001ba5a <lockScheduler()>
c001a663:	51                   	push   ecx
c001a664:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a66a:	6a 00                	push   0x0
c001a66c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a671:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a674:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a67a:	e8 57 71 ff ff       	call   c00117d6 <VAS::mapOtherVASIn(bool, VAS*)>
c001a67f:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001a685:	83 c4 10             	add    esp,0x10
c001a688:	c1 e8 0c             	shr    eax,0xc
c001a68b:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001a695:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001a69b:	e8 78 50 ff ff       	call   c000f718 <Phys::allocatePage()>
c001a6a0:	6a 07                	push   0x7
c001a6a2:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001a6a8:	56                   	push   esi
c001a6a9:	50                   	push   eax
c001a6aa:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a6b0:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a6b3:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001a6b9:	e8 ba 72 ff ff       	call   c0011978 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a6be:	58                   	pop    eax
c001a6bf:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001a6c5:	5a                   	pop    edx
c001a6c6:	68 07 04 00 00       	push   0x407
c001a6cb:	53                   	push   ebx
c001a6cc:	81 c3 00 10 00 00    	add    ebx,0x1000
c001a6d2:	50                   	push   eax
c001a6d3:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a6d9:	6a 00                	push   0x0
c001a6db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a6e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a6e3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a6e9:	e8 40 76 ff ff       	call   c0011d2e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001a6ee:	83 c4 1c             	add    esp,0x1c
c001a6f1:	68 00 10 00 00       	push   0x1000
c001a6f6:	6a 00                	push   0x0
c001a6f8:	56                   	push   esi
c001a6f9:	e8 c7 5f fe ff       	call   c00006c5 <memset>
c001a6fe:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001a704:	83 c4 10             	add    esp,0x10
c001a707:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001a70d:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001a713:	77 86                	ja     c001a69b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001a715:	e8 42 13 00 00       	call   c001ba5c <unlockScheduler()>
c001a71a:	83 ec 0c             	sub    esp,0xc
c001a71d:	56                   	push   esi
c001a71e:	e8 dc 6e ff ff       	call   c00115ff <Virt::freeKernelVirtualPages(unsigned long)>
c001a723:	83 c4 10             	add    esp,0x10
c001a726:	b0 01                	mov    al,0x1
c001a728:	8d 65 f4             	lea    esp,[ebp-0xc]
c001a72b:	5b                   	pop    ebx
c001a72c:	5e                   	pop    esi
c001a72d:	5f                   	pop    edi
c001a72e:	5d                   	pop    ebp
c001a72f:	c3                   	ret    

c001a730 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001a730:	55                   	push   ebp
c001a731:	57                   	push   edi
c001a732:	56                   	push   esi
c001a733:	53                   	push   ebx
c001a734:	83 ec 48             	sub    esp,0x48
c001a737:	68 14 01 00 00       	push   0x114
c001a73c:	e8 47 7a ff ff       	call   c0012188 <operator new(unsigned long)>
c001a741:	83 c4 0c             	add    esp,0xc
c001a744:	89 c6                	mov    esi,eax
c001a746:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001a74a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a74e:	50                   	push   eax
c001a74f:	e8 52 80 ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c001a754:	58                   	pop    eax
c001a755:	5a                   	pop    edx
c001a756:	6a 01                	push   0x1
c001a758:	56                   	push   esi
c001a759:	e8 ac 80 ff ff       	call   c001280a <File::open(FileOpenMode)>
c001a75e:	83 c4 10             	add    esp,0x10
c001a761:	85 c0                	test   eax,eax
c001a763:	0f 85 47 01 00 00    	jne    c001a8b0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a769:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001a771:	83 ec 0c             	sub    esp,0xc
c001a774:	6a 34                	push   0x34
c001a776:	e8 f3 49 ff ff       	call   c000f16e <malloc>
c001a77b:	89 c3                	mov    ebx,eax
c001a77d:	58                   	pop    eax
c001a77e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a780:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001a784:	57                   	push   edi
c001a785:	53                   	push   ebx
c001a786:	6a 00                	push   0x0
c001a788:	6a 34                	push   0x34
c001a78a:	56                   	push   esi
c001a78b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a78e:	83 c4 20             	add    esp,0x20
c001a791:	85 c0                	test   eax,eax
c001a793:	0f 85 17 01 00 00    	jne    c001a8b0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a799:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001a79f:	0f 85 0b 01 00 00    	jne    c001a8b0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a7a5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a7a8:	85 c0                	test   eax,eax
c001a7aa:	0f 84 00 01 00 00    	je     c001a8b0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a7b0:	31 d2                	xor    edx,edx
c001a7b2:	55                   	push   ebp
c001a7b3:	52                   	push   edx
c001a7b4:	50                   	push   eax
c001a7b5:	56                   	push   esi
c001a7b6:	e8 0d 81 ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001a7bb:	83 c4 10             	add    esp,0x10
c001a7be:	85 c0                	test   eax,eax
c001a7c0:	0f 85 ea 00 00 00    	jne    c001a8b0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a7c6:	83 ec 0c             	sub    esp,0xc
c001a7c9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001a7cc:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001a7d0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a7d4:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001a7d8:	0f af c2             	imul   eax,edx
c001a7db:	50                   	push   eax
c001a7dc:	e8 8d 49 ff ff       	call   c000f16e <malloc>
c001a7e1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a7e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a7e8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a7ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a7ee:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001a7f2:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001a7f6:	0f af c2             	imul   eax,edx
c001a7f9:	99                   	cdq    
c001a7fa:	52                   	push   edx
c001a7fb:	50                   	push   eax
c001a7fc:	56                   	push   esi
c001a7fd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a800:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001a803:	83 c4 20             	add    esp,0x20
c001a806:	85 c0                	test   eax,eax
c001a808:	0f 84 a2 00 00 00    	je     c001a8b0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a80e:	31 d2                	xor    edx,edx
c001a810:	51                   	push   ecx
c001a811:	52                   	push   edx
c001a812:	50                   	push   eax
c001a813:	56                   	push   esi
c001a814:	e8 af 80 ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001a819:	83 c4 10             	add    esp,0x10
c001a81c:	85 c0                	test   eax,eax
c001a81e:	0f 85 8c 00 00 00    	jne    c001a8b0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a824:	83 ec 0c             	sub    esp,0xc
c001a827:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001a82b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001a82f:	31 ed                	xor    ebp,ebp
c001a831:	0f af c2             	imul   eax,edx
c001a834:	50                   	push   eax
c001a835:	e8 34 49 ff ff       	call   c000f16e <malloc>
c001a83a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a83d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a841:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a847:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001a84b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001a84f:	0f af c2             	imul   eax,edx
c001a852:	99                   	cdq    
c001a853:	52                   	push   edx
c001a854:	50                   	push   eax
c001a855:	56                   	push   esi
c001a856:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a859:	83 c4 20             	add    esp,0x20
c001a85c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a864:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001a868:	0f 86 80 00 00 00    	jbe    c001a8ee <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001a86e:	0f b7 fd             	movzx  edi,bp
c001a871:	c1 e7 05             	shl    edi,0x5
c001a874:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001a878:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001a87b:	75 6b                	jne    c001a8e8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001a87d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001a880:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a884:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001a887:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a88b:	52                   	push   edx
c001a88c:	31 d2                	xor    edx,edx
c001a88e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001a891:	52                   	push   edx
c001a892:	50                   	push   eax
c001a893:	56                   	push   esi
c001a894:	e8 2f 80 ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001a899:	83 c4 10             	add    esp,0x10
c001a89c:	85 c0                	test   eax,eax
c001a89e:	74 17                	je     c001a8b7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001a8a0:	83 ec 0c             	sub    esp,0xc
c001a8a3:	68 65 86 02 c0       	push   0xc0028665
c001a8a8:	e8 ca 79 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001a8ad:	83 c4 10             	add    esp,0x10
c001a8b0:	31 c0                	xor    eax,eax
c001a8b2:	e9 87 00 00 00       	jmp    c001a93e <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001a8b7:	83 ec 0c             	sub    esp,0xc
c001a8ba:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001a8bd:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001a8c0:	50                   	push   eax
c001a8c1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a8c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a8c9:	56                   	push   esi
c001a8ca:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001a8ce:	e8 e0 fb ff ff       	call   c001a4b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001a8d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a8d7:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001a8db:	83 c4 20             	add    esp,0x20
c001a8de:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001a8e2:	73 04                	jae    c001a8e8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001a8e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a8e8:	45                   	inc    ebp
c001a8e9:	e9 76 ff ff ff       	jmp    c001a864 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001a8ee:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001a8f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a8f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8fa:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001a900:	83 ec 0c             	sub    esp,0xc
c001a903:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001a909:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a90e:	05 00 10 00 00       	add    eax,0x1000
c001a913:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a91a:	e8 5f 48 ff ff       	call   c000f17e <free>
c001a91f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a922:	e8 57 48 ff ff       	call   c000f17e <free>
c001a927:	58                   	pop    eax
c001a928:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a92c:	e8 4d 48 ff ff       	call   c000f17e <free>
c001a931:	89 34 24             	mov    DWORD PTR [esp],esi
c001a934:	e8 2f 7f ff ff       	call   c0012868 <File::close()>
c001a939:	83 c4 10             	add    esp,0x10
c001a93c:	b0 01                	mov    al,0x1
c001a93e:	83 c4 3c             	add    esp,0x3c
c001a941:	5b                   	pop    ebx
c001a942:	5e                   	pop    esi
c001a943:	5f                   	pop    edi
c001a944:	5d                   	pop    ebp
c001a945:	c3                   	ret    

c001a946 <Thr::runtimeReferenceHelper()>:
c001a946:	83 ec 18             	sub    esp,0x18
c001a949:	68 6d 86 02 c0       	push   0xc002866d
c001a94e:	e8 24 79 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001a953:	fa                   	cli    
c001a954:	83 c4 10             	add    esp,0x10
c001a957:	eb fe                	jmp    c001a957 <Thr::runtimeReferenceHelper()+0x11>

c001a959 <Thr::getAddressOfKernelSymbol(char const*)>:
c001a959:	57                   	push   edi
c001a95a:	56                   	push   esi
c001a95b:	53                   	push   ebx
c001a95c:	31 db                	xor    ebx,ebx
c001a95e:	39 1d 40 bb 02 c0    	cmp    DWORD PTR ds:0xc002bb40,ebx
c001a964:	7e 3c                	jle    c001a9a2 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001a966:	8b 34 9d c0 ba 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd4540]
c001a96d:	31 ff                	xor    edi,edi
c001a96f:	39 3c 9d c0 b9 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd4640],edi
c001a976:	7e 27                	jle    c001a99f <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001a978:	50                   	push   eax
c001a979:	50                   	push   eax
c001a97a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a97e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a980:	03 04 9d 40 ba 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd45c0]
c001a987:	50                   	push   eax
c001a988:	e8 28 5e fe ff       	call   c00007b5 <strcmp>
c001a98d:	83 c4 10             	add    esp,0x10
c001a990:	85 c0                	test   eax,eax
c001a992:	75 05                	jne    c001a999 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001a994:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a997:	eb 0b                	jmp    c001a9a4 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001a999:	83 c6 10             	add    esi,0x10
c001a99c:	47                   	inc    edi
c001a99d:	eb d0                	jmp    c001a96f <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001a99f:	43                   	inc    ebx
c001a9a0:	eb bc                	jmp    c001a95e <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001a9a2:	31 c0                	xor    eax,eax
c001a9a4:	5b                   	pop    ebx
c001a9a5:	5e                   	pop    esi
c001a9a6:	5f                   	pop    edi
c001a9a7:	c3                   	ret    

c001a9a8 <Thr::loadKernelSymbolTable(char const*)>:
c001a9a8:	55                   	push   ebp
c001a9a9:	57                   	push   edi
c001a9aa:	56                   	push   esi
c001a9ab:	53                   	push   ebx
c001a9ac:	83 ec 68             	sub    esp,0x68
c001a9af:	8b 35 94 bb 02 c0    	mov    esi,DWORD PTR ds:0xc002bb94
c001a9b5:	68 14 01 00 00       	push   0x114
c001a9ba:	e8 c9 77 ff ff       	call   c0012188 <operator new(unsigned long)>
c001a9bf:	83 c4 0c             	add    esp,0xc
c001a9c2:	89 c3                	mov    ebx,eax
c001a9c4:	56                   	push   esi
c001a9c5:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a9c9:	50                   	push   eax
c001a9ca:	e8 d7 7d ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c001a9cf:	5e                   	pop    esi
c001a9d0:	5f                   	pop    edi
c001a9d1:	6a 01                	push   0x1
c001a9d3:	53                   	push   ebx
c001a9d4:	e8 31 7e ff ff       	call   c001280a <File::open(FileOpenMode)>
c001a9d9:	83 c4 10             	add    esp,0x10
c001a9dc:	31 d2                	xor    edx,edx
c001a9de:	85 c0                	test   eax,eax
c001a9e0:	0f 85 79 02 00 00    	jne    c001ac5f <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001a9e6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001a9ee:	83 ec 0c             	sub    esp,0xc
c001a9f1:	6a 34                	push   0x34
c001a9f3:	e8 76 47 ff ff       	call   c000f16e <malloc>
c001a9f8:	59                   	pop    ecx
c001a9f9:	89 c7                	mov    edi,eax
c001a9fb:	8d 74 24 34          	lea    esi,[esp+0x34]
c001a9ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa01:	56                   	push   esi
c001aa02:	57                   	push   edi
c001aa03:	6a 00                	push   0x0
c001aa05:	6a 34                	push   0x34
c001aa07:	53                   	push   ebx
c001aa08:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aa0b:	83 c4 20             	add    esp,0x20
c001aa0e:	85 c0                	test   eax,eax
c001aa10:	74 17                	je     c001aa29 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001aa12:	83 ec 0c             	sub    esp,0xc
c001aa15:	68 8f 86 02 c0       	push   0xc002868f
c001aa1a:	e8 e8 e0 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c001aa1f:	83 c4 10             	add    esp,0x10
c001aa22:	31 d2                	xor    edx,edx
c001aa24:	e9 36 02 00 00       	jmp    c001ac5f <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001aa29:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001aa2f:	75 e1                	jne    c001aa12 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001aa31:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001aa34:	85 c0                	test   eax,eax
c001aa36:	74 da                	je     c001aa12 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001aa38:	52                   	push   edx
c001aa39:	31 d2                	xor    edx,edx
c001aa3b:	52                   	push   edx
c001aa3c:	50                   	push   eax
c001aa3d:	53                   	push   ebx
c001aa3e:	e8 85 7e ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001aa43:	83 c4 10             	add    esp,0x10
c001aa46:	85 c0                	test   eax,eax
c001aa48:	75 c8                	jne    c001aa12 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001aa4a:	83 ec 0c             	sub    esp,0xc
c001aa4d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001aa51:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001aa55:	31 ed                	xor    ebp,ebp
c001aa57:	0f af c2             	imul   eax,edx
c001aa5a:	50                   	push   eax
c001aa5b:	e8 0e 47 ff ff       	call   c000f16e <malloc>
c001aa60:	89 34 24             	mov    DWORD PTR [esp],esi
c001aa63:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aa67:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001aa69:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aa6d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001aa71:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001aa75:	0f af c2             	imul   eax,edx
c001aa78:	99                   	cdq    
c001aa79:	52                   	push   edx
c001aa7a:	50                   	push   eax
c001aa7b:	53                   	push   ebx
c001aa7c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001aa7f:	83 c4 20             	add    esp,0x20
c001aa82:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001aa8a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001aa92:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001aa9a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aaa2:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001aaa6:	0f 86 aa 00 00 00    	jbe    c001ab56 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001aaac:	0f b7 f5             	movzx  esi,bp
c001aaaf:	6b f6 28             	imul   esi,esi,0x28
c001aab2:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c001aab6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001aab9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aabd:	50                   	push   eax
c001aabe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001aac2:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001aac6:	8b 16                	mov    edx,DWORD PTR [esi]
c001aac8:	6b c0 28             	imul   eax,eax,0x28
c001aacb:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001aacf:	89 d0                	mov    eax,edx
c001aad1:	31 d2                	xor    edx,edx
c001aad3:	52                   	push   edx
c001aad4:	50                   	push   eax
c001aad5:	53                   	push   ebx
c001aad6:	e8 ed 7d ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001aadb:	83 c4 0c             	add    esp,0xc
c001aade:	6a 20                	push   0x20
c001aae0:	6a 00                	push   0x0
c001aae2:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001aae6:	52                   	push   edx
c001aae7:	e8 d9 5b fe ff       	call   c00006c5 <memset>
c001aaec:	58                   	pop    eax
c001aaed:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aaef:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001aaf3:	51                   	push   ecx
c001aaf4:	8d 54 24 40          	lea    edx,[esp+0x40]
c001aaf8:	52                   	push   edx
c001aaf9:	6a 00                	push   0x0
c001aafb:	6a 1f                	push   0x1f
c001aafd:	53                   	push   ebx
c001aafe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ab01:	83 c4 18             	add    esp,0x18
c001ab04:	68 a6 86 02 c0       	push   0xc00286a6
c001ab09:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ab0d:	52                   	push   edx
c001ab0e:	e8 a2 5c fe ff       	call   c00007b5 <strcmp>
c001ab13:	83 c4 10             	add    esp,0x10
c001ab16:	85 c0                	test   eax,eax
c001ab18:	75 0f                	jne    c001ab29 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001ab1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ab1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab29:	50                   	push   eax
c001ab2a:	50                   	push   eax
c001ab2b:	68 ae 86 02 c0       	push   0xc00286ae
c001ab30:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ab34:	50                   	push   eax
c001ab35:	e8 7b 5c fe ff       	call   c00007b5 <strcmp>
c001ab3a:	83 c4 10             	add    esp,0x10
c001ab3d:	85 c0                	test   eax,eax
c001ab3f:	75 0f                	jne    c001ab50 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001ab41:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ab44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ab48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab4c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ab50:	45                   	inc    ebp
c001ab51:	e9 4c ff ff ff       	jmp    c001aaa2 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001ab56:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ab5b:	75 10                	jne    c001ab6d <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001ab5d:	83 ec 0c             	sub    esp,0xc
c001ab60:	68 b6 86 02 c0       	push   0xc00286b6
c001ab65:	e8 9d df ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c001ab6a:	83 c4 10             	add    esp,0x10
c001ab6d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ab72:	75 10                	jne    c001ab84 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001ab74:	83 ec 0c             	sub    esp,0xc
c001ab77:	68 b6 86 02 c0       	push   0xc00286b6
c001ab7c:	e8 86 df ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c001ab81:	83 c4 10             	add    esp,0x10
c001ab84:	31 d2                	xor    edx,edx
c001ab86:	50                   	push   eax
c001ab87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab8b:	52                   	push   edx
c001ab8c:	50                   	push   eax
c001ab8d:	53                   	push   ebx
c001ab8e:	e8 35 7d ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001ab93:	5a                   	pop    edx
c001ab94:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ab98:	e8 d1 45 ff ff       	call   c000f16e <malloc>
c001ab9d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001aba5:	89 c1                	mov    ecx,eax
c001aba7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001abab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001abaf:	5e                   	pop    esi
c001abb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001abb2:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001abb6:	55                   	push   ebp
c001abb7:	51                   	push   ecx
c001abb8:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c001abbc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001abc0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001abc4:	53                   	push   ebx
c001abc5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001abc8:	83 c4 14             	add    esp,0x14
c001abcb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001abcf:	e8 9a 45 ff ff       	call   c000f16e <malloc>
c001abd4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001abd7:	89 c6                	mov    esi,eax
c001abd9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001abdb:	56                   	push   esi
c001abdc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001abe0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001abe4:	53                   	push   ebx
c001abe5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001abe8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001abec:	8b 15 40 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb40
c001abf2:	83 c4 1c             	add    esp,0x1c
c001abf5:	c1 e8 04             	shr    eax,0x4
c001abf8:	89 04 95 c0 b9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd4640],eax
c001abff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac03:	31 d2                	xor    edx,edx
c001ac05:	52                   	push   edx
c001ac06:	50                   	push   eax
c001ac07:	53                   	push   ebx
c001ac08:	e8 bb 7c ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001ac0d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ac10:	31 d2                	xor    edx,edx
c001ac12:	56                   	push   esi
c001ac13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ac17:	52                   	push   edx
c001ac18:	50                   	push   eax
c001ac19:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac1b:	53                   	push   ebx
c001ac1c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ac1f:	83 c4 14             	add    esp,0x14
c001ac22:	53                   	push   ebx
c001ac23:	e8 40 7c ff ff       	call   c0012868 <File::close()>
c001ac28:	5d                   	pop    ebp
c001ac29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac2d:	e8 4c 45 ff ff       	call   c000f17e <free>
c001ac32:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ac35:	e8 44 45 ff ff       	call   c000f17e <free>
c001ac3a:	a1 40 bb 02 c0       	mov    eax,ds:0xc002bb40
c001ac3f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001ac43:	8d 50 01             	lea    edx,[eax+0x1]
c001ac46:	89 0c 85 c0 ba 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4540],ecx
c001ac4d:	89 15 40 bb 02 c0    	mov    DWORD PTR ds:0xc002bb40,edx
c001ac53:	89 34 85 40 ba 02 c0 	mov    DWORD PTR [eax*4-0x3ffd45c0],esi
c001ac5a:	83 c4 10             	add    esp,0x10
c001ac5d:	b2 01                	mov    dl,0x1
c001ac5f:	83 c4 5c             	add    esp,0x5c
c001ac62:	88 d0                	mov    al,dl
c001ac64:	5b                   	pop    ebx
c001ac65:	5e                   	pop    esi
c001ac66:	5f                   	pop    edi
c001ac67:	5d                   	pop    ebp
c001ac68:	c3                   	ret    

c001ac69 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001ac69:	55                   	push   ebp
c001ac6a:	57                   	push   edi
c001ac6b:	56                   	push   esi
c001ac6c:	53                   	push   ebx
c001ac6d:	81 ec 68 03 00 00    	sub    esp,0x368
c001ac73:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001ac7a:	8b 1d 94 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb94
c001ac80:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001ac84:	68 14 01 00 00       	push   0x114
c001ac89:	e8 fa 74 ff ff       	call   c0012188 <operator new(unsigned long)>
c001ac8e:	83 c4 0c             	add    esp,0xc
c001ac91:	89 c7                	mov    edi,eax
c001ac93:	53                   	push   ebx
c001ac94:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001ac9b:	50                   	push   eax
c001ac9c:	e8 05 7b ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c001aca1:	5e                   	pop    esi
c001aca2:	5d                   	pop    ebp
c001aca3:	6a 01                	push   0x1
c001aca5:	57                   	push   edi
c001aca6:	e8 5f 7b ff ff       	call   c001280a <File::open(FileOpenMode)>
c001acab:	83 c4 10             	add    esp,0x10
c001acae:	85 c0                	test   eax,eax
c001acb0:	0f 85 10 07 00 00    	jne    c001b3c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001acb6:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001acbe:	83 ec 0c             	sub    esp,0xc
c001acc1:	6a 34                	push   0x34
c001acc3:	e8 a6 44 ff ff       	call   c000f16e <malloc>
c001acc8:	5b                   	pop    ebx
c001acc9:	89 c5                	mov    ebp,eax
c001accb:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001accf:	8b 07                	mov    eax,DWORD PTR [edi]
c001acd1:	53                   	push   ebx
c001acd2:	55                   	push   ebp
c001acd3:	6a 00                	push   0x0
c001acd5:	6a 34                	push   0x34
c001acd7:	57                   	push   edi
c001acd8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001acdb:	83 c4 20             	add    esp,0x20
c001acde:	85 c0                	test   eax,eax
c001ace0:	0f 85 e0 06 00 00    	jne    c001b3c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ace6:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c001aced:	0f 85 d3 06 00 00    	jne    c001b3c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001acf3:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001acf6:	85 c0                	test   eax,eax
c001acf8:	0f 84 c8 06 00 00    	je     c001b3c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001acfe:	31 d2                	xor    edx,edx
c001ad00:	51                   	push   ecx
c001ad01:	52                   	push   edx
c001ad02:	50                   	push   eax
c001ad03:	57                   	push   edi
c001ad04:	e8 bf 7b ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001ad09:	83 c4 10             	add    esp,0x10
c001ad0c:	85 c0                	test   eax,eax
c001ad0e:	0f 85 b2 06 00 00    	jne    c001b3c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ad14:	83 ec 0c             	sub    esp,0xc
c001ad17:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001ad1a:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001ad1e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ad22:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001ad26:	0f af c2             	imul   eax,edx
c001ad29:	50                   	push   eax
c001ad2a:	e8 3f 44 ff ff       	call   c000f16e <malloc>
c001ad2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad32:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ad36:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001ad38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad3c:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001ad40:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001ad44:	0f af c2             	imul   eax,edx
c001ad47:	99                   	cdq    
c001ad48:	52                   	push   edx
c001ad49:	50                   	push   eax
c001ad4a:	57                   	push   edi
c001ad4b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ad4e:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c001ad51:	83 c4 20             	add    esp,0x20
c001ad54:	85 c0                	test   eax,eax
c001ad56:	0f 84 6a 06 00 00    	je     c001b3c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ad5c:	52                   	push   edx
c001ad5d:	31 d2                	xor    edx,edx
c001ad5f:	52                   	push   edx
c001ad60:	50                   	push   eax
c001ad61:	57                   	push   edi
c001ad62:	e8 61 7b ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001ad67:	83 c4 10             	add    esp,0x10
c001ad6a:	85 c0                	test   eax,eax
c001ad6c:	0f 85 54 06 00 00    	jne    c001b3c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ad72:	83 ec 0c             	sub    esp,0xc
c001ad75:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001ad79:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001ad7d:	31 f6                	xor    esi,esi
c001ad7f:	0f af c2             	imul   eax,edx
c001ad82:	50                   	push   eax
c001ad83:	e8 e6 43 ff ff       	call   c000f16e <malloc>
c001ad88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad8b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ad8f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001ad91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad95:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001ad99:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001ad9d:	0f af c2             	imul   eax,edx
c001ada0:	99                   	cdq    
c001ada1:	52                   	push   edx
c001ada2:	50                   	push   eax
c001ada3:	57                   	push   edi
c001ada4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ada7:	83 c4 20             	add    esp,0x20
c001adaa:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c001adae:	0f 86 af 00 00 00    	jbe    c001ae63 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c001adb4:	0f b7 de             	movzx  ebx,si
c001adb7:	c1 e3 05             	shl    ebx,0x5
c001adba:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001adbe:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001adc1:	0f 85 96 00 00 00    	jne    c001ae5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c001adc7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001adca:	31 d2                	xor    edx,edx
c001adcc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001add0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001add3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001add7:	50                   	push   eax
c001add8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001addb:	52                   	push   edx
c001addc:	50                   	push   eax
c001addd:	57                   	push   edi
c001adde:	e8 e5 7a ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001ade3:	83 c4 10             	add    esp,0x10
c001ade6:	85 c0                	test   eax,eax
c001ade8:	0f 85 d8 05 00 00    	jne    c001b3c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001adee:	52                   	push   edx
c001adef:	52                   	push   edx
c001adf0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001adf4:	68 d0 86 02 c0       	push   0xc00286d0
c001adf9:	e8 79 74 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001adfe:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c001ae05:	31 d2                	xor    edx,edx
c001ae07:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c001ae0b:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001ae0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ae13:	59                   	pop    ecx
c001ae14:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001ae16:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ae1d:	50                   	push   eax
c001ae1e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ae22:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae26:	52                   	push   edx
c001ae27:	50                   	push   eax
c001ae28:	57                   	push   edi
c001ae29:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ae2c:	83 c4 18             	add    esp,0x18
c001ae2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ae32:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ae35:	50                   	push   eax
c001ae36:	68 f4 86 02 c0       	push   0xc00286f4
c001ae3b:	e8 37 74 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001ae40:	83 c4 0c             	add    esp,0xc
c001ae43:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ae46:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ae49:	50                   	push   eax
c001ae4a:	6a 00                	push   0x0
c001ae4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae50:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ae54:	50                   	push   eax
c001ae55:	e8 6b 58 fe ff       	call   c00006c5 <memset>
c001ae5a:	83 c4 10             	add    esp,0x10
c001ae5d:	46                   	inc    esi
c001ae5e:	e9 47 ff ff ff       	jmp    c001adaa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c001ae63:	31 db                	xor    ebx,ebx
c001ae65:	50                   	push   eax
c001ae66:	68 00 01 00 00       	push   0x100
c001ae6b:	6a 00                	push   0x0
c001ae6d:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ae71:	50                   	push   eax
c001ae72:	e8 4e 58 fe ff       	call   c00006c5 <memset>
c001ae77:	83 c4 0c             	add    esp,0xc
c001ae7a:	68 00 01 00 00       	push   0x100
c001ae7f:	6a 00                	push   0x0
c001ae81:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ae88:	50                   	push   eax
c001ae89:	e8 37 58 fe ff       	call   c00006c5 <memset>
c001ae8e:	83 c4 10             	add    esp,0x10
c001ae91:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ae99:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001aea1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001aea9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001aeb1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001aeb9:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c001aebd:	0f 86 2f 01 00 00    	jbe    c001aff2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c001aec3:	0f b7 f3             	movzx  esi,bx
c001aec6:	6b f6 28             	imul   esi,esi,0x28
c001aec9:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001aecd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001aed0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aed4:	50                   	push   eax
c001aed5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aed9:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c001aedd:	8b 06                	mov    eax,DWORD PTR [esi]
c001aedf:	6b d2 28             	imul   edx,edx,0x28
c001aee2:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001aee6:	31 d2                	xor    edx,edx
c001aee8:	52                   	push   edx
c001aee9:	50                   	push   eax
c001aeea:	57                   	push   edi
c001aeeb:	e8 d8 79 ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001aef0:	83 c4 0c             	add    esp,0xc
c001aef3:	6a 20                	push   0x20
c001aef5:	6a 00                	push   0x0
c001aef7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001aefe:	51                   	push   ecx
c001aeff:	e8 c1 57 fe ff       	call   c00006c5 <memset>
c001af04:	58                   	pop    eax
c001af05:	8b 07                	mov    eax,DWORD PTR [edi]
c001af07:	8d 54 24 58          	lea    edx,[esp+0x58]
c001af0b:	52                   	push   edx
c001af0c:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001af13:	51                   	push   ecx
c001af14:	6a 00                	push   0x0
c001af16:	6a 1f                	push   0x1f
c001af18:	57                   	push   edi
c001af19:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af1c:	83 c4 1c             	add    esp,0x1c
c001af1f:	6a 09                	push   0x9
c001af21:	68 11 87 02 c0       	push   0xc0028711
c001af26:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001af2d:	51                   	push   ecx
c001af2e:	e8 f9 56 fe ff       	call   c000062c <memcmp>
c001af33:	83 c4 10             	add    esp,0x10
c001af36:	85 c0                	test   eax,eax
c001af38:	75 21                	jne    c001af5b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c001af3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af3e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001af42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af46:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001af4a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001af4d:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001af54:	89 c8                	mov    eax,ecx
c001af56:	40                   	inc    eax
c001af57:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001af5b:	50                   	push   eax
c001af5c:	6a 09                	push   0x9
c001af5e:	68 1b 87 02 c0       	push   0xc002871b
c001af63:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001af6a:	50                   	push   eax
c001af6b:	e8 bc 56 fe ff       	call   c000062c <memcmp>
c001af70:	83 c4 10             	add    esp,0x10
c001af73:	85 c0                	test   eax,eax
c001af75:	75 21                	jne    c001af98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c001af77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af7b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001af7f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af83:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001af87:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001af8a:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001af91:	89 c8                	mov    eax,ecx
c001af93:	40                   	inc    eax
c001af94:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001af98:	50                   	push   eax
c001af99:	50                   	push   eax
c001af9a:	68 a6 86 02 c0       	push   0xc00286a6
c001af9f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001afa6:	50                   	push   eax
c001afa7:	e8 09 58 fe ff       	call   c00007b5 <strcmp>
c001afac:	83 c4 10             	add    esp,0x10
c001afaf:	85 c0                	test   eax,eax
c001afb1:	75 0f                	jne    c001afc2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c001afb3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001afb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001afba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001afbe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001afc2:	50                   	push   eax
c001afc3:	50                   	push   eax
c001afc4:	68 ae 86 02 c0       	push   0xc00286ae
c001afc9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001afd0:	50                   	push   eax
c001afd1:	e8 df 57 fe ff       	call   c00007b5 <strcmp>
c001afd6:	83 c4 10             	add    esp,0x10
c001afd9:	85 c0                	test   eax,eax
c001afdb:	75 0f                	jne    c001afec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c001afdd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001afe0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001afe4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001afe8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001afec:	43                   	inc    ebx
c001afed:	e9 c7 fe ff ff       	jmp    c001aeb9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c001aff2:	31 d2                	xor    edx,edx
c001aff4:	50                   	push   eax
c001aff5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aff9:	52                   	push   edx
c001affa:	50                   	push   eax
c001affb:	57                   	push   edi
c001affc:	e8 c7 78 ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001b001:	5a                   	pop    edx
c001b002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b006:	e8 63 41 ff ff       	call   c000f16e <malloc>
c001b00b:	31 d2                	xor    edx,edx
c001b00d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001b011:	59                   	pop    ecx
c001b012:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001b014:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001b018:	53                   	push   ebx
c001b019:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b01d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b021:	52                   	push   edx
c001b022:	50                   	push   eax
c001b023:	57                   	push   edi
c001b024:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b027:	83 c4 14             	add    esp,0x14
c001b02a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b02e:	e8 3b 41 ff ff       	call   c000f16e <malloc>
c001b033:	31 d2                	xor    edx,edx
c001b035:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b039:	83 c4 0c             	add    esp,0xc
c001b03c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b040:	52                   	push   edx
c001b041:	50                   	push   eax
c001b042:	57                   	push   edi
c001b043:	e8 80 78 ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001b048:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b04b:	31 d2                	xor    edx,edx
c001b04d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b051:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001b053:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b057:	52                   	push   edx
c001b058:	50                   	push   eax
c001b059:	57                   	push   edi
c001b05a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b05d:	83 c4 20             	add    esp,0x20
c001b060:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001b068:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b06c:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001b070:	0f 84 54 03 00 00    	je     c001b3ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c001b076:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001b07d:	31 d2                	xor    edx,edx
c001b07f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b083:	c1 e8 03             	shr    eax,0x3
c001b086:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001b08a:	50                   	push   eax
c001b08b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b08f:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001b093:	52                   	push   edx
c001b094:	50                   	push   eax
c001b095:	57                   	push   edi
c001b096:	e8 2d 78 ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001b09b:	58                   	pop    eax
c001b09c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b0a0:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001b0a7:	e8 c2 40 ff ff       	call   c000f16e <malloc>
c001b0ac:	31 d2                	xor    edx,edx
c001b0ae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b0b2:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001b0b4:	58                   	pop    eax
c001b0b5:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b0b9:	50                   	push   eax
c001b0ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b0be:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b0c2:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001b0c9:	52                   	push   edx
c001b0ca:	50                   	push   eax
c001b0cb:	57                   	push   edi
c001b0cc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b0cf:	83 c4 20             	add    esp,0x20
c001b0d2:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001b0da:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001b0de:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001b0e2:	0f 8d c6 02 00 00    	jge    c001b3ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c001b0e8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b0ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b0f0:	31 db                	xor    ebx,ebx
c001b0f2:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001b0f5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b0f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b0fd:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001b101:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b105:	c1 e8 08             	shr    eax,0x8
c001b108:	89 c6                	mov    esi,eax
c001b10a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b10e:	c1 e6 04             	shl    esi,0x4
c001b111:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001b115:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001b118:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b11c:	85 c0                	test   eax,eax
c001b11e:	0f 85 17 01 00 00    	jne    c001b23b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001b124:	83 ec 0c             	sub    esp,0xc
c001b127:	b3 01                	mov    bl,0x1
c001b129:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b12d:	03 06                	add    eax,DWORD PTR [esi]
c001b12f:	50                   	push   eax
c001b130:	e8 24 f8 ff ff       	call   c001a959 <Thr::getAddressOfKernelSymbol(char const*)>
c001b135:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b139:	83 c4 10             	add    esp,0x10
c001b13c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b141:	0f 85 f4 00 00 00    	jne    c001b23b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001b147:	50                   	push   eax
c001b148:	50                   	push   eax
c001b149:	68 25 87 02 c0       	push   0xc0028725
c001b14e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b152:	03 06                	add    eax,DWORD PTR [esi]
c001b154:	50                   	push   eax
c001b155:	e8 5b 56 fe ff       	call   c00007b5 <strcmp>
c001b15a:	83 c4 10             	add    esp,0x10
c001b15d:	85 c0                	test   eax,eax
c001b15f:	75 0a                	jne    c001b16b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c001b161:	b8 9c 35 02 c0       	mov    eax,0xc002359c
c001b166:	e9 ca 00 00 00       	jmp    c001b235 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b16b:	50                   	push   eax
c001b16c:	50                   	push   eax
c001b16d:	68 2f 87 02 c0       	push   0xc002872f
c001b172:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b176:	03 06                	add    eax,DWORD PTR [esi]
c001b178:	50                   	push   eax
c001b179:	e8 37 56 fe ff       	call   c00007b5 <strcmp>
c001b17e:	83 c4 10             	add    esp,0x10
c001b181:	85 c0                	test   eax,eax
c001b183:	75 0a                	jne    c001b18f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c001b185:	b8 d0 32 02 c0       	mov    eax,0xc00232d0
c001b18a:	e9 a6 00 00 00       	jmp    c001b235 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b18f:	53                   	push   ebx
c001b190:	53                   	push   ebx
c001b191:	68 38 87 02 c0       	push   0xc0028738
c001b196:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b19a:	03 06                	add    eax,DWORD PTR [esi]
c001b19c:	50                   	push   eax
c001b19d:	e8 13 56 fe ff       	call   c00007b5 <strcmp>
c001b1a2:	83 c4 10             	add    esp,0x10
c001b1a5:	85 c0                	test   eax,eax
c001b1a7:	75 0a                	jne    c001b1b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c001b1a9:	b8 9c 36 02 c0       	mov    eax,0xc002369c
c001b1ae:	e9 82 00 00 00       	jmp    c001b235 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b1b3:	51                   	push   ecx
c001b1b4:	51                   	push   ecx
c001b1b5:	68 42 87 02 c0       	push   0xc0028742
c001b1ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b1be:	03 06                	add    eax,DWORD PTR [esi]
c001b1c0:	50                   	push   eax
c001b1c1:	e8 ef 55 fe ff       	call   c00007b5 <strcmp>
c001b1c6:	83 c4 10             	add    esp,0x10
c001b1c9:	85 c0                	test   eax,eax
c001b1cb:	74 63                	je     c001b230 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c001b1cd:	50                   	push   eax
c001b1ce:	50                   	push   eax
c001b1cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1d3:	03 06                	add    eax,DWORD PTR [esi]
c001b1d5:	50                   	push   eax
c001b1d6:	68 4b 87 02 c0       	push   0xc002874b
c001b1db:	e8 97 70 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001b1e0:	58                   	pop    eax
c001b1e1:	5a                   	pop    edx
c001b1e2:	68 65 87 02 c0       	push   0xc0028765
c001b1e7:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001b1ee:	53                   	push   ebx
c001b1ef:	e8 70 55 fe ff       	call   c0000764 <strcpy>
c001b1f4:	59                   	pop    ecx
c001b1f5:	58                   	pop    eax
c001b1f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1fa:	03 06                	add    eax,DWORD PTR [esi]
c001b1fc:	50                   	push   eax
c001b1fd:	53                   	push   ebx
c001b1fe:	e8 18 56 fe ff       	call   c000081b <strcat>
c001b203:	58                   	pop    eax
c001b204:	5a                   	pop    edx
c001b205:	68 fb 87 02 c0       	push   0xc00287fb
c001b20a:	53                   	push   ebx
c001b20b:	e8 0b 56 fe ff       	call   c000081b <strcat>
c001b210:	83 c4 10             	add    esp,0x10
c001b213:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b218:	0f 84 4b 01 00 00    	je     c001b369 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b21e:	83 ec 0c             	sub    esp,0xc
c001b221:	53                   	push   ebx
c001b222:	e8 e0 d8 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c001b227:	83 c4 10             	add    esp,0x10
c001b22a:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001b22e:	eb 0b                	jmp    c001b23b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001b230:	b8 1c 34 02 c0       	mov    eax,0xc002341c
c001b235:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b239:	b3 01                	mov    bl,0x1
c001b23b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001b240:	0f 85 80 00 00 00    	jne    c001b2c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c001b246:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001b24d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b251:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001b255:	01 ce                	add    esi,ecx
c001b257:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b25f:	8b 06                	mov    eax,DWORD PTR [esi]
c001b261:	0f 94 c2             	sete   dl
c001b264:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b26c:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001b271:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001b275:	84 db                	test   bl,bl
c001b277:	74 31                	je     c001b2aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c001b279:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b27d:	01 c3                	add    ebx,eax
c001b27f:	84 d2                	test   dl,dl
c001b281:	75 0a                	jne    c001b28d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c001b283:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b287:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b28b:	76 32                	jbe    c001b2bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b28d:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b292:	0f 84 d1 00 00 00    	je     c001b369 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b298:	83 ec 0c             	sub    esp,0xc
c001b29b:	68 7c 87 02 c0       	push   0xc002877c
c001b2a0:	e8 62 d8 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c001b2a5:	83 c4 10             	add    esp,0x10
c001b2a8:	eb 15                	jmp    c001b2bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b2aa:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001b2ad:	84 d2                	test   dl,dl
c001b2af:	75 0e                	jne    c001b2bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b2b1:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b2b5:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b2b9:	77 04                	ja     c001b2bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b2bb:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001b2bf:	89 1e                	mov    DWORD PTR [esi],ebx
c001b2c1:	e9 df 00 00 00       	jmp    c001b3a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b2c6:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001b2cb:	75 6e                	jne    c001b33b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c001b2cd:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001b2d4:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001b2d8:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001b2dc:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b2e4:	74 17                	je     c001b2fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c001b2e6:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b2ee:	74 0d                	je     c001b2fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c001b2f0:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b2f4:	83 e8 04             	sub    eax,0x4
c001b2f7:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b2fb:	76 17                	jbe    c001b314 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001b2fd:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b302:	74 65                	je     c001b369 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b304:	83 ec 0c             	sub    esp,0xc
c001b307:	68 98 87 02 c0       	push   0xc0028798
c001b30c:	e8 f6 d7 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c001b311:	83 c4 10             	add    esp,0x10
c001b314:	8b 16                	mov    edx,DWORD PTR [esi]
c001b316:	84 db                	test   bl,bl
c001b318:	74 13                	je     c001b32d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c001b31a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b31e:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001b325:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b329:	01 d0                	add    eax,edx
c001b32b:	eb 06                	jmp    c001b333 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c001b32d:	89 d0                	mov    eax,edx
c001b32f:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b333:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001b337:	89 06                	mov    DWORD PTR [esi],eax
c001b339:	eb 6a                	jmp    c001b3a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b33b:	50                   	push   eax
c001b33c:	50                   	push   eax
c001b33d:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001b342:	50                   	push   eax
c001b343:	68 b4 87 02 c0       	push   0xc00287b4
c001b348:	e8 2a 6f ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001b34d:	83 c4 10             	add    esp,0x10
c001b350:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b355:	74 12                	je     c001b369 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b357:	83 ec 0c             	sub    esp,0xc
c001b35a:	68 bf 87 02 c0       	push   0xc00287bf
c001b35f:	e8 a3 d7 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c001b364:	83 c4 10             	add    esp,0x10
c001b367:	eb 3c                	jmp    c001b3a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b369:	83 ec 0c             	sub    esp,0xc
c001b36c:	57                   	push   edi
c001b36d:	e8 f6 74 ff ff       	call   c0012868 <File::close()>
c001b372:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b375:	8b 07                	mov    eax,DWORD PTR [edi]
c001b377:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b37a:	59                   	pop    ecx
c001b37b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b37f:	e8 fa 3d ff ff       	call   c000f17e <free>
c001b384:	5b                   	pop    ebx
c001b385:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b389:	e8 f0 3d ff ff       	call   c000f17e <free>
c001b38e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b391:	e8 e8 3d ff ff       	call   c000f17e <free>
c001b396:	5e                   	pop    esi
c001b397:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b39b:	e8 de 3d ff ff       	call   c000f17e <free>
c001b3a0:	83 c4 10             	add    esp,0x10
c001b3a3:	eb 21                	jmp    c001b3c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001b3a5:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001b3a9:	e9 2c fd ff ff       	jmp    c001b0da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c001b3ae:	83 ec 0c             	sub    esp,0xc
c001b3b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b3b5:	e8 c4 3d ff ff       	call   c000f17e <free>
c001b3ba:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001b3be:	83 c4 10             	add    esp,0x10
c001b3c1:	e9 a2 fc ff ff       	jmp    c001b068 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c001b3c6:	31 c0                	xor    eax,eax
c001b3c8:	eb 32                	jmp    c001b3fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c001b3ca:	83 ec 0c             	sub    esp,0xc
c001b3cd:	57                   	push   edi
c001b3ce:	e8 95 74 ff ff       	call   c0012868 <File::close()>
c001b3d3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b3d6:	8b 07                	mov    eax,DWORD PTR [edi]
c001b3d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3db:	58                   	pop    eax
c001b3dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b3e0:	e8 99 3d ff ff       	call   c000f17e <free>
c001b3e5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b3e8:	e8 91 3d ff ff       	call   c000f17e <free>
c001b3ed:	5a                   	pop    edx
c001b3ee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b3f2:	e8 87 3d ff ff       	call   c000f17e <free>
c001b3f7:	83 c4 10             	add    esp,0x10
c001b3fa:	b0 01                	mov    al,0x1
c001b3fc:	81 c4 5c 03 00 00    	add    esp,0x35c
c001b402:	5b                   	pop    ebx
c001b403:	5e                   	pop    esi
c001b404:	5f                   	pop    edi
c001b405:	5d                   	pop    ebp
c001b406:	c3                   	ret    

c001b407 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001b407:	56                   	push   esi
c001b408:	31 d2                	xor    edx,edx
c001b40a:	53                   	push   ebx
c001b40b:	8b 1d a0 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b3a0
c001b411:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b415:	39 d3                	cmp    ebx,edx
c001b417:	7e 1b                	jle    c001b434 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001b419:	8b 04 95 c0 b5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd4a40]
c001b420:	39 c8                	cmp    eax,ecx
c001b422:	77 0d                	ja     c001b431 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001b424:	8b 34 95 c0 b3 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd4c40]
c001b42b:	01 c6                	add    esi,eax
c001b42d:	39 ce                	cmp    esi,ecx
c001b42f:	77 05                	ja     c001b436 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001b431:	42                   	inc    edx
c001b432:	eb e1                	jmp    c001b415 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001b434:	31 c0                	xor    eax,eax
c001b436:	5b                   	pop    ebx
c001b437:	5e                   	pop    esi
c001b438:	c3                   	ret    

c001b439 <Thr::getDriverNameFromAddress(unsigned long)>:
c001b439:	53                   	push   ebx
c001b43a:	31 c0                	xor    eax,eax
c001b43c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b440:	8b 1d a0 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b3a0
c001b446:	39 c3                	cmp    ebx,eax
c001b448:	7e 22                	jle    c001b46c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001b44a:	8b 14 85 c0 b5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4a40]
c001b451:	39 ca                	cmp    edx,ecx
c001b453:	77 14                	ja     c001b469 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001b455:	03 14 85 c0 b3 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd4c40]
c001b45c:	39 ca                	cmp    edx,ecx
c001b45e:	76 09                	jbe    c001b469 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001b460:	8b 04 85 c0 b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4840]
c001b467:	eb 05                	jmp    c001b46e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001b469:	40                   	inc    eax
c001b46a:	eb da                	jmp    c001b446 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001b46c:	31 c0                	xor    eax,eax
c001b46e:	5b                   	pop    ebx
c001b46f:	c3                   	ret    

c001b470 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001b470:	53                   	push   ebx
c001b471:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b475:	53                   	push   ebx
c001b476:	e8 8c ff ff ff       	call   c001b407 <Thr::getDriverBaseFromAddress(unsigned long)>
c001b47b:	5a                   	pop    edx
c001b47c:	31 d2                	xor    edx,edx
c001b47e:	85 c0                	test   eax,eax
c001b480:	74 04                	je     c001b486 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001b482:	89 da                	mov    edx,ebx
c001b484:	29 c2                	sub    edx,eax
c001b486:	89 d0                	mov    eax,edx
c001b488:	5b                   	pop    ebx
c001b489:	c3                   	ret    

c001b48a <Thr::loadDLL(char const*, bool)>:
c001b48a:	55                   	push   ebp
c001b48b:	57                   	push   edi
c001b48c:	56                   	push   esi
c001b48d:	53                   	push   ebx
c001b48e:	81 ec 34 01 00 00    	sub    esp,0x134
c001b494:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001b49b:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001b4a2:	56                   	push   esi
c001b4a3:	68 d7 87 02 c0       	push   0xc00287d7
c001b4a8:	e8 ca 6d ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001b4ad:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b4b4:	e8 cf 6c ff ff       	call   c0012188 <operator new(unsigned long)>
c001b4b9:	83 c4 0c             	add    esp,0xc
c001b4bc:	89 c3                	mov    ebx,eax
c001b4be:	ff 35 94 bb 02 c0    	push   DWORD PTR ds:0xc002bb94
c001b4c4:	56                   	push   esi
c001b4c5:	50                   	push   eax
c001b4c6:	e8 db 72 ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c001b4cb:	83 c4 0c             	add    esp,0xc
c001b4ce:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001b4d2:	50                   	push   eax
c001b4d3:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b4d7:	50                   	push   eax
c001b4d8:	53                   	push   ebx
c001b4d9:	e8 d8 75 ff ff       	call   c0012ab6 <File::stat(unsigned long long*, bool*)>
c001b4de:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b4e3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b4e6:	83 c4 10             	add    esp,0x10
c001b4e9:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001b4ee:	75 0a                	jne    c001b4fa <Thr::loadDLL(char const*, bool)+0x70>
c001b4f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b4f4:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001b4f8:	75 3c                	jne    c001b536 <Thr::loadDLL(char const*, bool)+0xac>
c001b4fa:	89 e8                	mov    eax,ebp
c001b4fc:	84 c0                	test   al,al
c001b4fe:	0f 84 3d 01 00 00    	je     c001b641 <Thr::loadDLL(char const*, bool)+0x1b7>
c001b504:	50                   	push   eax
c001b505:	50                   	push   eax
c001b506:	68 e8 87 02 c0       	push   0xc00287e8
c001b50b:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001b50f:	53                   	push   ebx
c001b510:	e8 4f 52 fe ff       	call   c0000764 <strcpy>
c001b515:	58                   	pop    eax
c001b516:	5a                   	pop    edx
c001b517:	56                   	push   esi
c001b518:	53                   	push   ebx
c001b519:	e8 fd 52 fe ff       	call   c000081b <strcat>
c001b51e:	59                   	pop    ecx
c001b51f:	5f                   	pop    edi
c001b520:	68 fb 87 02 c0       	push   0xc00287fb
c001b525:	53                   	push   ebx
c001b526:	e8 f0 52 fe ff       	call   c000081b <strcat>
c001b52b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b52e:	e8 d4 d5 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c001b533:	83 c4 10             	add    esp,0x10
c001b536:	e8 fa 5e ff ff       	call   c0011435 <Virt::getAKernelVAS()>
c001b53b:	51                   	push   ecx
c001b53c:	6a 03                	push   0x3
c001b53e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001b542:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b546:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001b54c:	83 d3 00             	adc    ebx,0x0
c001b54f:	89 ca                	mov    edx,ecx
c001b551:	89 d1                	mov    ecx,edx
c001b553:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001b557:	51                   	push   ecx
c001b558:	50                   	push   eax
c001b559:	e8 1a 65 ff ff       	call   c0011a78 <VAS::allocatePages(int, int)>
c001b55e:	89 34 24             	mov    DWORD PTR [esp],esi
c001b561:	89 c3                	mov    ebx,eax
c001b563:	e8 7a 51 fe ff       	call   c00006e2 <strlen>
c001b568:	8b 3d a0 b3 02 c0    	mov    edi,DWORD PTR ds:0xc002b3a0
c001b56e:	40                   	inc    eax
c001b56f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b572:	e8 f7 3b ff ff       	call   c000f16e <malloc>
c001b577:	89 04 bd c0 b7 02 c0 	mov    DWORD PTR [edi*4-0x3ffd4840],eax
c001b57e:	5f                   	pop    edi
c001b57f:	58                   	pop    eax
c001b580:	a1 a0 b3 02 c0       	mov    eax,ds:0xc002b3a0
c001b585:	56                   	push   esi
c001b586:	ff 34 85 c0 b7 02 c0 	push   DWORD PTR [eax*4-0x3ffd4840]
c001b58d:	e8 d2 51 fe ff       	call   c0000764 <strcpy>
c001b592:	a1 a0 b3 02 c0       	mov    eax,ds:0xc002b3a0
c001b597:	8d 50 01             	lea    edx,[eax+0x1]
c001b59a:	89 1c 85 c0 b5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4a40],ebx
c001b5a1:	89 15 a0 b3 02 c0    	mov    DWORD PTR ds:0xc002b3a0,edx
c001b5a7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b5ab:	83 c4 0c             	add    esp,0xc
c001b5ae:	89 14 85 c0 b3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4c40],edx
c001b5b5:	6a 01                	push   0x1
c001b5b7:	53                   	push   ebx
c001b5b8:	56                   	push   esi
c001b5b9:	e8 ab f6 ff ff       	call   c001ac69 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001b5be:	83 c4 10             	add    esp,0x10
c001b5c1:	89 c7                	mov    edi,eax
c001b5c3:	fe c8                	dec    al
c001b5c5:	74 16                	je     c001b5dd <Thr::loadDLL(char const*, bool)+0x153>
c001b5c7:	89 e8                	mov    eax,ebp
c001b5c9:	84 c0                	test   al,al
c001b5cb:	74 10                	je     c001b5dd <Thr::loadDLL(char const*, bool)+0x153>
c001b5cd:	83 ec 0c             	sub    esp,0xc
c001b5d0:	68 fd 87 02 c0       	push   0xc00287fd
c001b5d5:	e8 2d d5 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c001b5da:	83 c4 10             	add    esp,0x10
c001b5dd:	31 f6                	xor    esi,esi
c001b5df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b5e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b5e7:	05 ff 0f 00 00       	add    eax,0xfff
c001b5ec:	83 d2 00             	adc    edx,0x0
c001b5ef:	0f ac d0 0c          	shrd   eax,edx,0xc
c001b5f3:	c1 ea 0c             	shr    edx,0xc
c001b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b5fe:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001b602:	ba 00 00 00 00       	mov    edx,0x0
c001b607:	89 d0                	mov    eax,edx
c001b609:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001b60d:	73 2c                	jae    c001b63b <Thr::loadDLL(char const*, bool)+0x1b1>
c001b60f:	e8 21 5e ff ff       	call   c0011435 <Virt::getAKernelVAS()>
c001b614:	89 f5                	mov    ebp,esi
c001b616:	c1 e5 0c             	shl    ebp,0xc
c001b619:	52                   	push   edx
c001b61a:	01 dd                	add    ebp,ebx
c001b61c:	52                   	push   edx
c001b61d:	55                   	push   ebp
c001b61e:	50                   	push   eax
c001b61f:	e8 bc 5f ff ff       	call   c00115e0 <VAS::getPageTableEntry(unsigned long)>
c001b624:	83 c4 10             	add    esp,0x10
c001b627:	f6 00 60             	test   BYTE PTR [eax],0x60
c001b62a:	75 0c                	jne    c001b638 <Thr::loadDLL(char const*, bool)+0x1ae>
c001b62c:	83 ec 0c             	sub    esp,0xc
c001b62f:	55                   	push   ebp
c001b630:	e8 59 40 ff ff       	call   c000f68e <Phys::freePage(unsigned long)>
c001b635:	83 c4 10             	add    esp,0x10
c001b638:	46                   	inc    esi
c001b639:	eb a4                	jmp    c001b5df <Thr::loadDLL(char const*, bool)+0x155>
c001b63b:	89 f8                	mov    eax,edi
c001b63d:	84 c0                	test   al,al
c001b63f:	75 02                	jne    c001b643 <Thr::loadDLL(char const*, bool)+0x1b9>
c001b641:	31 db                	xor    ebx,ebx
c001b643:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b649:	89 d8                	mov    eax,ebx
c001b64b:	5b                   	pop    ebx
c001b64c:	5e                   	pop    esi
c001b64d:	5f                   	pop    edi
c001b64e:	5d                   	pop    ebp
c001b64f:	c3                   	ret    

c001b650 <Thr::executeDLL(unsigned long, void*)>:
c001b650:	56                   	push   esi
c001b651:	53                   	push   ebx
c001b652:	51                   	push   ecx
c001b653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b65b:	85 db                	test   ebx,ebx
c001b65d:	75 10                	jne    c001b66f <Thr::executeDLL(unsigned long, void*)+0x1f>
c001b65f:	83 ec 0c             	sub    esp,0xc
c001b662:	68 1c 88 02 c0       	push   0xc002881c
c001b667:	e8 9b d4 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c001b66c:	83 c4 10             	add    esp,0x10
c001b66f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b673:	89 d8                	mov    eax,ebx
c001b675:	5a                   	pop    edx
c001b676:	5b                   	pop    ebx
c001b677:	5e                   	pop    esi
c001b678:	ff e0                	jmp    eax

c001b67a <changeTSS>:
c001b67a:	83 ec 0c             	sub    esp,0xc
c001b67d:	e8 02 c3 ff ff       	call   c0017984 <CPU::current()>
c001b682:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b688:	83 ec 08             	sub    esp,0x8
c001b68b:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001b68e:	05 7c 11 00 00       	add    eax,0x117c
c001b693:	c1 e1 15             	shl    ecx,0x15
c001b696:	ba 00 00 e8 01       	mov    edx,0x1e80000
c001b69b:	29 ca                	sub    edx,ecx
c001b69d:	52                   	push   edx
c001b69e:	50                   	push   eax
c001b69f:	e8 8c 55 ff ff       	call   c0010c30 <TSS::setESP(unsigned long)>
c001b6a4:	83 c4 1c             	add    esp,0x1c
c001b6a7:	c3                   	ret    

c001b6a8 <Process::addArgs(char**)>:
c001b6a8:	57                   	push   edi
c001b6a9:	56                   	push   esi
c001b6aa:	53                   	push   ebx
c001b6ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b6af:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b6b3:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001b6bd:	85 ff                	test   edi,edi
c001b6bf:	74 3d                	je     c001b6fe <Process::addArgs(char**)+0x56>
c001b6c1:	8b 07                	mov    eax,DWORD PTR [edi]
c001b6c3:	85 c0                	test   eax,eax
c001b6c5:	74 37                	je     c001b6fe <Process::addArgs(char**)+0x56>
c001b6c7:	31 db                	xor    ebx,ebx
c001b6c9:	83 ec 0c             	sub    esp,0xc
c001b6cc:	50                   	push   eax
c001b6cd:	e8 10 50 fe ff       	call   c00006e2 <strlen>
c001b6d2:	40                   	inc    eax
c001b6d3:	89 04 24             	mov    DWORD PTR [esp],eax
c001b6d6:	e8 93 3a ff ff       	call   c000f16e <malloc>
c001b6db:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001b6e2:	5a                   	pop    edx
c001b6e3:	59                   	pop    ecx
c001b6e4:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001b6e7:	43                   	inc    ebx
c001b6e8:	50                   	push   eax
c001b6e9:	e8 76 50 fe ff       	call   c0000764 <strcpy>
c001b6ee:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001b6f4:	83 c4 10             	add    esp,0x10
c001b6f7:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b6fa:	85 c0                	test   eax,eax
c001b6fc:	75 cb                	jne    c001b6c9 <Process::addArgs(char**)+0x21>
c001b6fe:	5b                   	pop    ebx
c001b6ff:	5e                   	pop    esi
c001b700:	5f                   	pop    edi
c001b701:	c3                   	ret    

c001b702 <Process::Process(char const*, Process*, char**)>:
c001b702:	56                   	push   esi
c001b703:	53                   	push   ebx
c001b704:	83 ec 14             	sub    esp,0x14
c001b707:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b70b:	05 0c 02 00 00       	add    eax,0x20c
c001b710:	bb 07 00 00 00       	mov    ebx,0x7
c001b715:	89 c6                	mov    esi,eax
c001b717:	85 db                	test   ebx,ebx
c001b719:	78 12                	js     c001b72d <Process::Process(char const*, Process*, char**)+0x2b>
c001b71b:	83 ec 0c             	sub    esp,0xc
c001b71e:	56                   	push   esi
c001b71f:	e8 06 a2 00 00       	call   c002592a <ThreadControlBlock::ThreadControlBlock()>
c001b724:	83 c4 10             	add    esp,0x10
c001b727:	83 c6 63             	add    esi,0x63
c001b72a:	4b                   	dec    ebx
c001b72b:	eb ea                	jmp    c001b717 <Process::Process(char const*, Process*, char**)+0x15>
c001b72d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b731:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001b738:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b73c:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001b745:	a1 24 9c 02 c0       	mov    eax,ds:0xc0029c24
c001b74a:	8d 50 01             	lea    edx,[eax+0x1]
c001b74d:	89 15 24 9c 02 c0    	mov    DWORD PTR ds:0xc0029c24,edx
c001b753:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b757:	89 02                	mov    DWORD PTR [edx],eax
c001b759:	83 ec 0c             	sub    esp,0xc
c001b75c:	6a 10                	push   0x10
c001b75e:	e8 25 6a ff ff       	call   c0012188 <operator new(unsigned long)>
c001b763:	83 c4 10             	add    esp,0x10
c001b766:	89 c3                	mov    ebx,eax
c001b768:	83 ec 08             	sub    esp,0x8
c001b76b:	6a 00                	push   0x0
c001b76d:	53                   	push   ebx
c001b76e:	e8 a9 66 ff ff       	call   c0011e1c <VAS::VAS(bool)>
c001b773:	83 c4 10             	add    esp,0x10
c001b776:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b77a:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001b780:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b784:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001b78e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b792:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b796:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001b79c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7a0:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b7a6:	85 c0                	test   eax,eax
c001b7a8:	74 42                	je     c001b7ec <Process::Process(char const*, Process*, char**)+0xea>
c001b7aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7ae:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b7b4:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b7ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7be:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001b7c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7c8:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b7ce:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001b7d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7d8:	05 0c 01 00 00       	add    eax,0x10c
c001b7dd:	83 ec 08             	sub    esp,0x8
c001b7e0:	52                   	push   edx
c001b7e1:	50                   	push   eax
c001b7e2:	e8 7d 4f fe ff       	call   c0000764 <strcpy>
c001b7e7:	83 c4 10             	add    esp,0x10
c001b7ea:	eb 5c                	jmp    c001b848 <Process::Process(char const*, Process*, char**)+0x146>
c001b7ec:	83 ec 0c             	sub    esp,0xc
c001b7ef:	68 60 12 00 00       	push   0x1260
c001b7f4:	e8 8f 69 ff ff       	call   c0012188 <operator new(unsigned long)>
c001b7f9:	83 c4 10             	add    esp,0x10
c001b7fc:	89 c3                	mov    ebx,eax
c001b7fe:	83 ec 08             	sub    esp,0x8
c001b801:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b805:	53                   	push   ebx
c001b806:	e8 23 51 ff ff       	call   c001092e <VgaText::VgaText(char const*)>
c001b80b:	83 c4 10             	add    esp,0x10
c001b80e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b812:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001b818:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b81c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b822:	83 ec 0c             	sub    esp,0xc
c001b825:	50                   	push   eax
c001b826:	e8 04 45 ff ff       	call   c000fd2f <addToTerminalCycle(VgaText*)>
c001b82b:	83 c4 10             	add    esp,0x10
c001b82e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b832:	05 0c 01 00 00       	add    eax,0x10c
c001b837:	83 ec 08             	sub    esp,0x8
c001b83a:	68 46 88 02 c0       	push   0xc0028846
c001b83f:	50                   	push   eax
c001b840:	e8 1f 4f fe ff       	call   c0000764 <strcpy>
c001b845:	83 c4 10             	add    esp,0x10
c001b848:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b84c:	83 c0 0c             	add    eax,0xc
c001b84f:	83 ec 08             	sub    esp,0x8
c001b852:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b856:	50                   	push   eax
c001b857:	e8 08 4f fe ff       	call   c0000764 <strcpy>
c001b85c:	83 c4 10             	add    esp,0x10
c001b85f:	83 ec 08             	sub    esp,0x8
c001b862:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b866:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b86a:	e8 39 fe ff ff       	call   c001b6a8 <Process::addArgs(char**)>
c001b86f:	83 c4 10             	add    esp,0x10
c001b872:	83 ec 08             	sub    esp,0x8
c001b875:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b879:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b87d:	e8 ae ee ff ff       	call   c001a730 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001b882:	83 c4 10             	add    esp,0x10
c001b885:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b889:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b88d:	83 f0 01             	xor    eax,0x1
c001b890:	88 c2                	mov    dl,al
c001b892:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b896:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001b89c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001b8a1:	83 ec 08             	sub    esp,0x8
c001b8a4:	50                   	push   eax
c001b8a5:	68 44 89 02 c0       	push   0xc0028944
c001b8aa:	e8 c8 69 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001b8af:	83 c4 10             	add    esp,0x10
c001b8b2:	90                   	nop
c001b8b3:	83 c4 14             	add    esp,0x14
c001b8b6:	5b                   	pop    ebx
c001b8b7:	5e                   	pop    esi
c001b8b8:	c3                   	ret    
c001b8b9:	90                   	nop

c001b8ba <Process::Process(bool, char const*, Process*, char**)>:
c001b8ba:	56                   	push   esi
c001b8bb:	53                   	push   ebx
c001b8bc:	83 ec 14             	sub    esp,0x14
c001b8bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b8c3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b8c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8cb:	05 0c 02 00 00       	add    eax,0x20c
c001b8d0:	bb 07 00 00 00       	mov    ebx,0x7
c001b8d5:	89 c6                	mov    esi,eax
c001b8d7:	85 db                	test   ebx,ebx
c001b8d9:	78 12                	js     c001b8ed <Process::Process(bool, char const*, Process*, char**)+0x33>
c001b8db:	83 ec 0c             	sub    esp,0xc
c001b8de:	56                   	push   esi
c001b8df:	e8 46 a0 00 00       	call   c002592a <ThreadControlBlock::ThreadControlBlock()>
c001b8e4:	83 c4 10             	add    esp,0x10
c001b8e7:	83 c6 63             	add    esi,0x63
c001b8ea:	4b                   	dec    ebx
c001b8eb:	eb ea                	jmp    c001b8d7 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001b8ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8f1:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001b8f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8fc:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001b905:	a1 24 9c 02 c0       	mov    eax,ds:0xc0029c24
c001b90a:	8d 50 01             	lea    edx,[eax+0x1]
c001b90d:	89 15 24 9c 02 c0    	mov    DWORD PTR ds:0xc0029c24,edx
c001b913:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b917:	89 02                	mov    DWORD PTR [edx],eax
c001b919:	83 ec 0c             	sub    esp,0xc
c001b91c:	6a 10                	push   0x10
c001b91e:	e8 65 68 ff ff       	call   c0012188 <operator new(unsigned long)>
c001b923:	83 c4 10             	add    esp,0x10
c001b926:	89 c3                	mov    ebx,eax
c001b928:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b92d:	83 ec 08             	sub    esp,0x8
c001b930:	50                   	push   eax
c001b931:	53                   	push   ebx
c001b932:	e8 e5 64 ff ff       	call   c0011e1c <VAS::VAS(bool)>
c001b937:	83 c4 10             	add    esp,0x10
c001b93a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b93e:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001b944:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b948:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001b952:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b956:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b95a:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001b960:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b964:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b96a:	85 c0                	test   eax,eax
c001b96c:	74 42                	je     c001b9b0 <Process::Process(bool, char const*, Process*, char**)+0xf6>
c001b96e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b972:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b978:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b97e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b982:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001b988:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b98c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b992:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001b998:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b99c:	05 0c 01 00 00       	add    eax,0x10c
c001b9a1:	83 ec 08             	sub    esp,0x8
c001b9a4:	52                   	push   edx
c001b9a5:	50                   	push   eax
c001b9a6:	e8 b9 4d fe ff       	call   c0000764 <strcpy>
c001b9ab:	83 c4 10             	add    esp,0x10
c001b9ae:	eb 5c                	jmp    c001ba0c <Process::Process(bool, char const*, Process*, char**)+0x152>
c001b9b0:	83 ec 0c             	sub    esp,0xc
c001b9b3:	68 60 12 00 00       	push   0x1260
c001b9b8:	e8 cb 67 ff ff       	call   c0012188 <operator new(unsigned long)>
c001b9bd:	83 c4 10             	add    esp,0x10
c001b9c0:	89 c3                	mov    ebx,eax
c001b9c2:	83 ec 08             	sub    esp,0x8
c001b9c5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b9c9:	53                   	push   ebx
c001b9ca:	e8 5f 4f ff ff       	call   c001092e <VgaText::VgaText(char const*)>
c001b9cf:	83 c4 10             	add    esp,0x10
c001b9d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9d6:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001b9dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9e0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b9e6:	83 ec 0c             	sub    esp,0xc
c001b9e9:	50                   	push   eax
c001b9ea:	e8 40 43 ff ff       	call   c000fd2f <addToTerminalCycle(VgaText*)>
c001b9ef:	83 c4 10             	add    esp,0x10
c001b9f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9f6:	05 0c 01 00 00       	add    eax,0x10c
c001b9fb:	83 ec 08             	sub    esp,0x8
c001b9fe:	68 46 88 02 c0       	push   0xc0028846
c001ba03:	50                   	push   eax
c001ba04:	e8 5b 4d fe ff       	call   c0000764 <strcpy>
c001ba09:	83 c4 10             	add    esp,0x10
c001ba0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba10:	83 c0 0c             	add    eax,0xc
c001ba13:	83 ec 08             	sub    esp,0x8
c001ba16:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ba1a:	50                   	push   eax
c001ba1b:	e8 44 4d fe ff       	call   c0000764 <strcpy>
c001ba20:	83 c4 10             	add    esp,0x10
c001ba23:	83 ec 08             	sub    esp,0x8
c001ba26:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001ba2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ba2e:	e8 75 fc ff ff       	call   c001b6a8 <Process::addArgs(char**)>
c001ba33:	83 c4 10             	add    esp,0x10
c001ba36:	90                   	nop
c001ba37:	83 c4 14             	add    esp,0x14
c001ba3a:	5b                   	pop    ebx
c001ba3b:	5e                   	pop    esi
c001ba3c:	c3                   	ret    

c001ba3d <disableIRQs()>:
c001ba3d:	fa                   	cli    
c001ba3e:	ff 05 6c bb 02 c0    	inc    DWORD PTR ds:0xc002bb6c
c001ba44:	c3                   	ret    

c001ba45 <getIRQNestingLevel()>:
c001ba45:	a1 6c bb 02 c0       	mov    eax,ds:0xc002bb6c
c001ba4a:	c3                   	ret    

c001ba4b <enableIRQs()>:
c001ba4b:	a1 6c bb 02 c0       	mov    eax,ds:0xc002bb6c
c001ba50:	48                   	dec    eax
c001ba51:	a3 6c bb 02 c0       	mov    ds:0xc002bb6c,eax
c001ba56:	75 01                	jne    c001ba59 <enableIRQs()+0xe>
c001ba58:	fb                   	sti    
c001ba59:	c3                   	ret    

c001ba5a <lockScheduler()>:
c001ba5a:	eb e1                	jmp    c001ba3d <disableIRQs()>

c001ba5c <unlockScheduler()>:
c001ba5c:	eb ed                	jmp    c001ba4b <enableIRQs()>

c001ba5e <userModeEntryPoint(void*)>:
c001ba5e:	83 ec 0c             	sub    esp,0xc
c001ba61:	e8 f6 ff ff ff       	call   c001ba5c <unlockScheduler()>
c001ba66:	fb                   	sti    
c001ba67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba6c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba6f:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001ba75:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ba79:	83 c4 0c             	add    esp,0xc
c001ba7c:	e9 49 48 fe ff       	jmp    c00002ca <goToUsermode>

c001ba81 <lockStuff()>:
c001ba81:	e8 b7 ff ff ff       	call   c001ba3d <disableIRQs()>
c001ba86:	ff 05 68 bb 02 c0    	inc    DWORD PTR ds:0xc002bb68
c001ba8c:	c3                   	ret    

c001ba8d <taskStartupFunction>:
c001ba8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba92:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001ba95:	c3                   	ret    

c001ba96 <updateTimeUsed()>:
c001ba96:	57                   	push   edi
c001ba97:	56                   	push   esi
c001ba98:	53                   	push   ebx
c001ba99:	e8 e6 be ff ff       	call   c0017984 <CPU::current()>
c001ba9e:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001baa5:	74 49                	je     c001baf0 <updateTimeUsed()+0x5a>
c001baa7:	0f 31                	rdtsc  
c001baa9:	89 c1                	mov    ecx,eax
c001baab:	a3 a8 bb 02 c0       	mov    ds:0xc002bba8,eax
c001bab0:	2b 0d 98 bb 02 c0    	sub    ecx,DWORD PTR ds:0xc002bb98
c001bab6:	89 d3                	mov    ebx,edx
c001bab8:	89 0d a0 bb 02 c0    	mov    DWORD PTR ds:0xc002bba0,ecx
c001babe:	1b 1d 9c bb 02 c0    	sbb    ebx,DWORD PTR ds:0xc002bb9c
c001bac4:	a3 98 bb 02 c0       	mov    ds:0xc002bb98,eax
c001bac9:	89 1d a4 bb 02 c0    	mov    DWORD PTR ds:0xc002bba4,ebx
c001bacf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bad4:	89 15 ac bb 02 c0    	mov    DWORD PTR ds:0xc002bbac,edx
c001bada:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001badd:	89 15 9c bb 02 c0    	mov    DWORD PTR ds:0xc002bb9c,edx
c001bae3:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001bae6:	01 f1                	add    ecx,esi
c001bae8:	11 fb                	adc    ebx,edi
c001baea:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001baed:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001baf0:	5b                   	pop    ebx
c001baf1:	5e                   	pop    esi
c001baf2:	5f                   	pop    edi
c001baf3:	c3                   	ret    

c001baf4 <switchToThread(ThreadControlBlock*)>:
c001baf4:	53                   	push   ebx
c001baf5:	83 ec 08             	sub    esp,0x8
c001baf8:	a1 68 bb 02 c0       	mov    eax,ds:0xc002bb68
c001bafd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb01:	85 c0                	test   eax,eax
c001bb03:	75 30                	jne    c001bb35 <switchToThread(ThreadControlBlock*)+0x41>
c001bb05:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001bb08:	3c ff                	cmp    al,0xff
c001bb0a:	74 25                	je     c001bb31 <switchToThread(ThreadControlBlock*)+0x3d>
c001bb0c:	0f b6 d0             	movzx  edx,al
c001bb0f:	b8 84 03 00 00       	mov    eax,0x384
c001bb14:	29 d0                	sub    eax,edx
c001bb16:	c1 e0 10             	shl    eax,0x10
c001bb19:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001bb1c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001bb1f:	e8 72 ff ff ff       	call   c001ba96 <updateTimeUsed()>
c001bb24:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001bb28:	83 c4 08             	add    esp,0x8
c001bb2b:	5b                   	pop    ebx
c001bb2c:	e9 d2 47 fe ff       	jmp    c0000303 <switchToThreadASM>
c001bb31:	31 c0                	xor    eax,eax
c001bb33:	eb e7                	jmp    c001bb1c <switchToThread(ThreadControlBlock*)+0x28>
c001bb35:	c7 05 64 bb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bb64,0x1
c001bb3f:	83 c4 08             	add    esp,0x8
c001bb42:	5b                   	pop    ebx
c001bb43:	c3                   	ret    

c001bb44 <Semaphore::Semaphore(int)>:
c001bb44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bb4c:	89 10                	mov    DWORD PTR [eax],edx
c001bb4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb52:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001bb59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb5d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb68:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bb6f:	90                   	nop
c001bb70:	c3                   	ret    
c001bb71:	90                   	nop

c001bb72 <Mutex::Mutex()>:
c001bb72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb76:	6a 01                	push   0x1
c001bb78:	50                   	push   eax
c001bb79:	e8 c6 ff ff ff       	call   c001bb44 <Semaphore::Semaphore(int)>
c001bb7e:	83 c4 08             	add    esp,0x8
c001bb81:	90                   	nop
c001bb82:	c3                   	ret    
c001bb83:	90                   	nop

c001bb84 <Process::createThread(void (*)(void*), void*, int)>:
c001bb84:	55                   	push   ebp
c001bb85:	31 c9                	xor    ecx,ecx
c001bb87:	57                   	push   edi
c001bb88:	56                   	push   esi
c001bb89:	53                   	push   ebx
c001bb8a:	83 ec 1c             	sub    esp,0x1c
c001bb8d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bb91:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001bb98:	89 f2                	mov    edx,esi
c001bb9a:	0f b7 c2             	movzx  eax,dx
c001bb9d:	83 e2 01             	and    edx,0x1
c001bba0:	74 14                	je     c001bbb6 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001bba2:	d1 f8                	sar    eax,1
c001bba4:	41                   	inc    ecx
c001bba5:	89 c2                	mov    edx,eax
c001bba7:	83 f9 10             	cmp    ecx,0x10
c001bbaa:	75 ee                	jne    c001bb9a <Process::createThread(void (*)(void*), void*, int)+0x16>
c001bbac:	83 c4 1c             	add    esp,0x1c
c001bbaf:	31 c0                	xor    eax,eax
c001bbb1:	5b                   	pop    ebx
c001bbb2:	5e                   	pop    esi
c001bbb3:	5f                   	pop    edi
c001bbb4:	5d                   	pop    ebp
c001bbb5:	c3                   	ret    
c001bbb6:	83 ec 08             	sub    esp,0x8
c001bbb9:	b8 01 00 00 00       	mov    eax,0x1
c001bbbe:	d3 e0                	shl    eax,cl
c001bbc0:	09 c6                	or     esi,eax
c001bbc2:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001bbc8:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001bbcf:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001bbd2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001bbd5:	01 ce                	add    esi,ecx
c001bbd7:	89 f0                	mov    eax,esi
c001bbd9:	c1 e0 05             	shl    eax,0x5
c001bbdc:	01 c6                	add    esi,eax
c001bbde:	8d 04 33             	lea    eax,[ebx+esi*1]
c001bbe1:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001bbe7:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001bbed:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001bbf1:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001bbf7:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001bbfd:	89 ca                	mov    edx,ecx
c001bbff:	f7 da                	neg    edx
c001bc01:	c1 e2 15             	shl    edx,0x15
c001bc04:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001bc0a:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001bc10:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001bc14:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001bc1e:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001bc24:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bc28:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001bc2e:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001bc38:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001bc42:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001bc49:	50                   	push   eax
c001bc4a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bc4e:	68 88 bb 02 c0       	push   0xc002bb88
c001bc53:	e8 2a 9b 00 00       	call   c0025782 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bc58:	83 c4 10             	add    esp,0x10
c001bc5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc5f:	83 c4 1c             	add    esp,0x1c
c001bc62:	5b                   	pop    ebx
c001bc63:	5e                   	pop    esi
c001bc64:	5f                   	pop    edi
c001bc65:	5d                   	pop    ebp
c001bc66:	c3                   	ret    
c001bc67:	90                   	nop

c001bc68 <Process::createUserThread()>:
c001bc68:	83 ec 0c             	sub    esp,0xc
c001bc6b:	68 80 00 00 00       	push   0x80
c001bc70:	6a 00                	push   0x0
c001bc72:	68 5e ba 01 c0       	push   0xc001ba5e
c001bc77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bc7b:	e8 04 ff ff ff       	call   c001bb84 <Process::createThread(void (*)(void*), void*, int)>
c001bc80:	83 c4 1c             	add    esp,0x1c
c001bc83:	c3                   	ret    

c001bc84 <setupMultitasking(void (*)())>:
c001bc84:	56                   	push   esi
c001bc85:	53                   	push   ebx
c001bc86:	53                   	push   ebx
c001bc87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bc8b:	eb 10                	jmp    c001bc9d <setupMultitasking(void (*)())+0x19>
c001bc8d:	83 ec 0c             	sub    esp,0xc
c001bc90:	68 88 bb 02 c0       	push   0xc002bb88
c001bc95:	e8 3a 9a 00 00       	call   c00256d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001bc9a:	83 c4 10             	add    esp,0x10
c001bc9d:	83 ec 0c             	sub    esp,0xc
c001bca0:	68 88 bb 02 c0       	push   0xc002bb88
c001bca5:	e8 0e 9a 00 00       	call   c00256b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001bcaa:	83 c4 10             	add    esp,0x10
c001bcad:	84 c0                	test   al,al
c001bcaf:	74 dc                	je     c001bc8d <setupMultitasking(void (*)())+0x9>
c001bcb1:	83 ec 0c             	sub    esp,0xc
c001bcb4:	68 3b 07 00 00       	push   0x73b
c001bcb9:	e8 ca 64 ff ff       	call   c0012188 <operator new(unsigned long)>
c001bcbe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001bcc5:	89 c3                	mov    ebx,eax
c001bcc7:	6a 00                	push   0x0
c001bcc9:	68 4a 88 02 c0       	push   0xc002884a
c001bcce:	6a 01                	push   0x1
c001bcd0:	50                   	push   eax
c001bcd1:	e8 e4 fb ff ff       	call   c001b8ba <Process::Process(bool, char const*, Process*, char**)>
c001bcd6:	83 c4 18             	add    esp,0x18
c001bcd9:	89 1d 94 bb 02 c0    	mov    DWORD PTR ds:0xc002bb94,ebx
c001bcdf:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001bce5:	68 6c 89 02 c0       	push   0xc002896c
c001bcea:	e8 88 65 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001bcef:	58                   	pop    eax
c001bcf0:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001bcf6:	e8 a8 47 ff ff       	call   c00104a3 <setActiveTerminal(VgaText*)>
c001bcfb:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001bd03:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001bd09:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001bd0c:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001bd16:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001bd1c:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001bd22:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001bd2c:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001bd36:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001bd40:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001bd46:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001bd4c:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001bd56:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001bd5c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001bd66:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001bd6c:	5a                   	pop    edx
c001bd6d:	59                   	pop    ecx
c001bd6e:	68 46 88 02 c0       	push   0xc0028846
c001bd73:	50                   	push   eax
c001bd74:	e8 eb 49 fe ff       	call   c0000764 <strcpy>
c001bd79:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001bd80:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001bd84:	83 c4 14             	add    esp,0x14
c001bd87:	5b                   	pop    ebx
c001bd88:	5e                   	pop    esi
c001bd89:	e9 67 45 fe ff       	jmp    c00002f5 <switchToThreadASMFirstTime>

c001bd8e <schedule()>:
c001bd8e:	a1 68 bb 02 c0       	mov    eax,ds:0xc002bb68
c001bd93:	85 c0                	test   eax,eax
c001bd95:	74 0b                	je     c001bda2 <schedule()+0x14>
c001bd97:	c7 05 64 bb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bb64,0x1
c001bda1:	c3                   	ret    
c001bda2:	53                   	push   ebx
c001bda3:	83 ec 14             	sub    esp,0x14
c001bda6:	68 88 bb 02 c0       	push   0xc002bb88
c001bdab:	e8 08 99 00 00       	call   c00256b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001bdb0:	83 c4 10             	add    esp,0x10
c001bdb3:	84 c0                	test   al,al
c001bdb5:	75 38                	jne    c001bdef <schedule()+0x61>
c001bdb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdbc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bdbf:	4a                   	dec    edx
c001bdc0:	74 32                	je     c001bdf4 <schedule()+0x66>
c001bdc2:	83 ec 0c             	sub    esp,0xc
c001bdc5:	68 88 bb 02 c0       	push   0xc002bb88
c001bdca:	e8 e1 98 00 00       	call   c00256b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001bdcf:	c7 04 24 88 bb 02 c0 	mov    DWORD PTR [esp],0xc002bb88
c001bdd6:	89 c3                	mov    ebx,eax
c001bdd8:	e8 f7 98 00 00       	call   c00256d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001bddd:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001bde4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bde7:	e8 08 fd ff ff       	call   c001baf4 <switchToThread(ThreadControlBlock*)>
c001bdec:	83 c4 10             	add    esp,0x10
c001bdef:	83 c4 08             	add    esp,0x8
c001bdf2:	5b                   	pop    ebx
c001bdf3:	c3                   	ret    
c001bdf4:	83 ec 08             	sub    esp,0x8
c001bdf7:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001bdfe:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001be04:	68 88 bb 02 c0       	push   0xc002bb88
c001be09:	e8 74 99 00 00       	call   c0025782 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001be0e:	83 c4 10             	add    esp,0x10
c001be11:	eb af                	jmp    c001bdc2 <schedule()+0x34>

c001be13 <unlockStuff()>:
c001be13:	a1 68 bb 02 c0       	mov    eax,ds:0xc002bb68
c001be18:	48                   	dec    eax
c001be19:	a3 68 bb 02 c0       	mov    ds:0xc002bb68,eax
c001be1e:	75 09                	jne    c001be29 <unlockStuff()+0x16>
c001be20:	a1 64 bb 02 c0       	mov    eax,ds:0xc002bb64
c001be25:	85 c0                	test   eax,eax
c001be27:	75 05                	jne    c001be2e <unlockStuff()+0x1b>
c001be29:	e9 1d fc ff ff       	jmp    c001ba4b <enableIRQs()>
c001be2e:	83 ec 0c             	sub    esp,0xc
c001be31:	c7 05 64 bb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bb64,0x0
c001be3b:	e8 4e ff ff ff       	call   c001bd8e <schedule()>
c001be40:	83 c4 0c             	add    esp,0xc
c001be43:	e9 03 fc ff ff       	jmp    c001ba4b <enableIRQs()>

c001be48 <Semaphore::tryAcquire()>:
c001be48:	83 ec 0c             	sub    esp,0xc
c001be4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be4f:	e8 2d fc ff ff       	call   c001ba81 <lockStuff()>
c001be54:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001be57:	3b 10                	cmp    edx,DWORD PTR [eax]
c001be59:	7c 0b                	jl     c001be66 <Semaphore::tryAcquire()+0x1e>
c001be5b:	e8 b3 ff ff ff       	call   c001be13 <unlockStuff()>
c001be60:	31 c0                	xor    eax,eax
c001be62:	83 c4 0c             	add    esp,0xc
c001be65:	c3                   	ret    
c001be66:	42                   	inc    edx
c001be67:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001be6a:	e8 a4 ff ff ff       	call   c001be13 <unlockStuff()>
c001be6f:	b0 01                	mov    al,0x1
c001be71:	83 c4 0c             	add    esp,0xc
c001be74:	c3                   	ret    
c001be75:	90                   	nop

c001be76 <Semaphore::assertLocked(char const*)>:
c001be76:	83 ec 0c             	sub    esp,0xc
c001be79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be7d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be81:	e8 fb fb ff ff       	call   c001ba81 <lockStuff()>
c001be86:	8b 08                	mov    ecx,DWORD PTR [eax]
c001be88:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001be8b:	7c 05                	jl     c001be92 <Semaphore::assertLocked(char const*)+0x1c>
c001be8d:	83 c4 0c             	add    esp,0xc
c001be90:	eb 81                	jmp    c001be13 <unlockStuff()>
c001be92:	83 ec 0c             	sub    esp,0xc
c001be95:	52                   	push   edx
c001be96:	e8 6c cc ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c001be9b:	83 c4 10             	add    esp,0x10
c001be9e:	83 c4 0c             	add    esp,0xc
c001bea1:	e9 6d ff ff ff       	jmp    c001be13 <unlockStuff()>

c001bea6 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001bea6:	83 ec 0c             	sub    esp,0xc
c001bea9:	e8 97 fb ff ff       	call   c001ba45 <getIRQNestingLevel()>
c001beae:	83 ec 08             	sub    esp,0x8
c001beb1:	50                   	push   eax
c001beb2:	68 a0 89 02 c0       	push   0xc00289a0
c001beb7:	e8 bb 63 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001bebc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bec0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bec5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bec8:	e8 c1 fe ff ff       	call   c001bd8e <schedule()>
c001becd:	e8 8a fb ff ff       	call   c001ba5c <unlockScheduler()>
c001bed2:	e8 6e fb ff ff       	call   c001ba45 <getIRQNestingLevel()>
c001bed7:	5a                   	pop    edx
c001bed8:	59                   	pop    ecx
c001bed9:	50                   	push   eax
c001beda:	68 d4 89 02 c0       	push   0xc00289d4
c001bedf:	e8 93 63 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001bee4:	83 c4 1c             	add    esp,0x1c
c001bee7:	c3                   	ret    

c001bee8 <blockTask(TaskState)>:
c001bee8:	83 ec 0c             	sub    esp,0xc
c001beeb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001beef:	e8 66 fb ff ff       	call   c001ba5a <lockScheduler()>
c001bef4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bef9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001befc:	e8 8d fe ff ff       	call   c001bd8e <schedule()>
c001bf01:	83 c4 0c             	add    esp,0xc
c001bf04:	e9 53 fb ff ff       	jmp    c001ba5c <unlockScheduler()>

c001bf09 <waitTask(int, int*, int)>:
c001bf09:	83 ec 18             	sub    esp,0x18
c001bf0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bf15:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001bf18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bf1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf21:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001bf24:	6a 07                	push   0x7
c001bf26:	e8 bd ff ff ff       	call   c001bee8 <blockTask(TaskState)>
c001bf2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf30:	83 c4 10             	add    esp,0x10
c001bf33:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001bf36:	85 d2                	test   edx,edx
c001bf38:	74 0a                	je     c001bf44 <waitTask(int, int*, int)+0x3b>
c001bf3a:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001bf3d:	89 02                	mov    DWORD PTR [edx],eax
c001bf3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf44:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001bf47:	83 c4 0c             	add    esp,0xc
c001bf4a:	c3                   	ret    

c001bf4b <nanoSleepUntil(unsigned long long)>:
c001bf4b:	83 ec 0c             	sub    esp,0xc
c001bf4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf52:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bf56:	3b 05 f0 ac 02 c0    	cmp    eax,DWORD PTR ds:0xc002acf0
c001bf5c:	89 d1                	mov    ecx,edx
c001bf5e:	1b 0d f4 ac 02 c0    	sbb    ecx,DWORD PTR ds:0xc002acf4
c001bf64:	73 04                	jae    c001bf6a <nanoSleepUntil(unsigned long long)+0x1f>
c001bf66:	83 c4 0c             	add    esp,0xc
c001bf69:	c3                   	ret    
c001bf6a:	e8 12 fb ff ff       	call   c001ba81 <lockStuff()>
c001bf6f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bf75:	83 ec 08             	sub    esp,0x8
c001bf78:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001bf7b:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001bf7e:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001bf84:	68 7c bb 02 c0       	push   0xc002bb7c
c001bf89:	e8 f4 97 00 00       	call   c0025782 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bf8e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001bf95:	e8 4e ff ff ff       	call   c001bee8 <blockTask(TaskState)>
c001bf9a:	83 c4 1c             	add    esp,0x1c
c001bf9d:	e9 71 fe ff ff       	jmp    c001be13 <unlockStuff()>

c001bfa2 <nanoSleep(unsigned long long)>:
c001bfa2:	a1 f0 ac 02 c0       	mov    eax,ds:0xc002acf0
c001bfa7:	8b 15 f4 ac 02 c0    	mov    edx,DWORD PTR ds:0xc002acf4
c001bfad:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001bfb1:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001bfb5:	eb 94                	jmp    c001bf4b <nanoSleepUntil(unsigned long long)>

c001bfb7 <sleep(unsigned long long)>:
c001bfb7:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001bfbf:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001bfc4:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001bfc8:	01 ca                	add    edx,ecx
c001bfca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bfce:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bfd2:	eb ce                	jmp    c001bfa2 <nanoSleep(unsigned long long)>

c001bfd4 <Semaphore::acquire()>:
c001bfd4:	83 ec 0c             	sub    esp,0xc
c001bfd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfdb:	e8 a1 fa ff ff       	call   c001ba81 <lockStuff()>
c001bfe0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001bfe3:	3b 10                	cmp    edx,DWORD PTR [eax]
c001bfe5:	7d 0c                	jge    c001bff3 <Semaphore::acquire()+0x1f>
c001bfe7:	42                   	inc    edx
c001bfe8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bfeb:	83 c4 0c             	add    esp,0xc
c001bfee:	e9 20 fe ff ff       	jmp    c001be13 <unlockStuff()>
c001bff3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bff9:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001c000:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c003:	85 d2                	test   edx,edx
c001c005:	74 2a                	je     c001c031 <Semaphore::acquire()+0x5d>
c001c007:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c00a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c010:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001c013:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c019:	83 ec 0c             	sub    esp,0xc
c001c01c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c01f:	6a 05                	push   0x5
c001c021:	e8 c2 fe ff ff       	call   c001bee8 <blockTask(TaskState)>
c001c026:	83 c4 10             	add    esp,0x10
c001c029:	83 c4 0c             	add    esp,0xc
c001c02c:	e9 e2 fd ff ff       	jmp    c001be13 <unlockStuff()>
c001c031:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c037:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c03a:	eb d7                	jmp    c001c013 <Semaphore::acquire()+0x3f>

c001c03c <taskReturned>:
c001c03c:	83 ec 18             	sub    esp,0x18
c001c03f:	68 08 8a 02 c0       	push   0xc0028a08
c001c044:	e8 be ca ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c001c049:	83 c4 10             	add    esp,0x10
c001c04c:	83 ec 0c             	sub    esp,0xc
c001c04f:	6a 02                	push   0x2
c001c051:	e8 92 fe ff ff       	call   c001bee8 <blockTask(TaskState)>
c001c056:	e8 ff f9 ff ff       	call   c001ba5a <lockScheduler()>
c001c05b:	e8 2e fd ff ff       	call   c001bd8e <schedule()>
c001c060:	e8 f7 f9 ff ff       	call   c001ba5c <unlockScheduler()>
c001c065:	83 c4 10             	add    esp,0x10
c001c068:	eb e2                	jmp    c001c04c <taskReturned+0x10>

c001c06a <unblockTask(ThreadControlBlock*)>:
c001c06a:	53                   	push   ebx
c001c06b:	83 ec 08             	sub    esp,0x8
c001c06e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c072:	e8 e3 f9 ff ff       	call   c001ba5a <lockScheduler()>
c001c077:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c07a:	85 c0                	test   eax,eax
c001c07c:	74 5c                	je     c001c0da <unblockTask(ThreadControlBlock*)+0x70>
c001c07e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c081:	48                   	dec    eax
c001c082:	74 31                	je     c001c0b5 <unblockTask(ThreadControlBlock*)+0x4b>
c001c084:	83 ec 0c             	sub    esp,0xc
c001c087:	68 88 bb 02 c0       	push   0xc002bb88
c001c08c:	e8 1f 96 00 00       	call   c00256b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c091:	83 c4 10             	add    esp,0x10
c001c094:	85 c0                	test   eax,eax
c001c096:	75 17                	jne    c001c0af <unblockTask(ThreadControlBlock*)+0x45>
c001c098:	eb 65                	jmp    c001c0ff <unblockTask(ThreadControlBlock*)+0x95>
c001c09a:	83 ec 08             	sub    esp,0x8
c001c09d:	50                   	push   eax
c001c09e:	68 88 bb 02 c0       	push   0xc002bb88
c001c0a3:	e8 18 99 00 00       	call   c00259c0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001c0a8:	83 c4 10             	add    esp,0x10
c001c0ab:	85 c0                	test   eax,eax
c001c0ad:	74 50                	je     c001c0ff <unblockTask(ThreadControlBlock*)+0x95>
c001c0af:	39 c3                	cmp    ebx,eax
c001c0b1:	75 e7                	jne    c001c09a <unblockTask(ThreadControlBlock*)+0x30>
c001c0b3:	eb 1c                	jmp    c001c0d1 <unblockTask(ThreadControlBlock*)+0x67>
c001c0b5:	83 ec 0c             	sub    esp,0xc
c001c0b8:	68 f8 8a 02 c0       	push   0xc0028af8
c001c0bd:	e8 b5 61 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c0c2:	c7 04 24 84 8a 02 c0 	mov    DWORD PTR [esp],0xc0028a84
c001c0c9:	e8 a9 61 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c0ce:	83 c4 10             	add    esp,0x10
c001c0d1:	83 c4 08             	add    esp,0x8
c001c0d4:	5b                   	pop    ebx
c001c0d5:	e9 82 f9 ff ff       	jmp    c001ba5c <unlockScheduler()>
c001c0da:	83 ec 0c             	sub    esp,0xc
c001c0dd:	68 3c 8a 02 c0       	push   0xc0028a3c
c001c0e2:	e8 90 61 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c0e7:	c7 04 24 84 8a 02 c0 	mov    DWORD PTR [esp],0xc0028a84
c001c0ee:	e8 84 61 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c0f3:	83 c4 10             	add    esp,0x10
c001c0f6:	83 c4 08             	add    esp,0x8
c001c0f9:	5b                   	pop    ebx
c001c0fa:	e9 5d f9 ff ff       	jmp    c001ba5c <unlockScheduler()>
c001c0ff:	83 ec 08             	sub    esp,0x8
c001c102:	53                   	push   ebx
c001c103:	68 88 bb 02 c0       	push   0xc002bb88
c001c108:	e8 75 96 00 00       	call   c0025782 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c10d:	83 c4 10             	add    esp,0x10
c001c110:	83 c4 08             	add    esp,0x8
c001c113:	5b                   	pop    ebx
c001c114:	e9 43 f9 ff ff       	jmp    c001ba5c <unlockScheduler()>

c001c119 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001c119:	55                   	push   ebp
c001c11a:	57                   	push   edi
c001c11b:	56                   	push   esi
c001c11c:	53                   	push   ebx
c001c11d:	83 ec 1c             	sub    esp,0x1c
c001c120:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c124:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c127:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c001c12d:	85 c9                	test   ecx,ecx
c001c12f:	7e 20                	jle    c001c151 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001c131:	31 f6                	xor    esi,esi
c001c133:	83 ec 0c             	sub    esp,0xc
c001c136:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001c13d:	46                   	inc    esi
c001c13e:	e8 3b 30 ff ff       	call   c000f17e <free>
c001c143:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c146:	83 c4 10             	add    esp,0x10
c001c149:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001c14f:	7f e2                	jg     c001c133 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001c151:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c15b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001c160:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001c163:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001c166:	d3 c0                	rol    eax,cl
c001c168:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001c16f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c172:	89 f7                	mov    edi,esi
c001c174:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001c17c:	0f 85 4f 01 00 00    	jne    c001c2d1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c001c182:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c188:	85 c0                	test   eax,eax
c001c18a:	0f 84 aa 00 00 00    	je     c001c23a <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c190:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001c193:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c197:	31 c9                	xor    ecx,ecx
c001c199:	eb 10                	jmp    c001c1ab <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c001c19b:	41                   	inc    ecx
c001c19c:	83 f9 10             	cmp    ecx,0x10
c001c19f:	0f 84 95 00 00 00    	je     c001c23a <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c1a5:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c1ab:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001c1b2:	d3 fa                	sar    edx,cl
c001c1b4:	83 e2 01             	and    edx,0x1
c001c1b7:	74 e2                	je     c001c19b <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c1b9:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001c1bc:	01 ca                	add    edx,ecx
c001c1be:	89 d5                	mov    ebp,edx
c001c1c0:	c1 e5 05             	shl    ebp,0x5
c001c1c3:	01 ea                	add    edx,ebp
c001c1c5:	01 d0                	add    eax,edx
c001c1c7:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001c1cd:	83 fd 07             	cmp    ebp,0x7
c001c1d0:	75 c9                	jne    c001c19b <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c1d2:	05 40 02 00 00       	add    eax,0x240
c001c1d7:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001c1da:	83 fd ff             	cmp    ebp,0xffffffff
c001c1dd:	0f 8c 08 01 00 00    	jl     c001c2eb <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c001c1e3:	0f 84 b9 01 00 00    	je     c001c3a2 <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c001c1e9:	85 ed                	test   ebp,ebp
c001c1eb:	0f 84 a0 01 00 00    	je     c001c391 <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c001c1f1:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001c1f3:	75 a6                	jne    c001c19b <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c1f5:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c1fb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c1ff:	01 d0                	add    eax,edx
c001c201:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001c205:	83 ec 0c             	sub    esp,0xc
c001c208:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001c20e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c211:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c217:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001c21e:	50                   	push   eax
c001c21f:	e8 46 fe ff ff       	call   c001c06a <unblockTask(ThreadControlBlock*)>
c001c224:	83 c4 10             	add    esp,0x10
c001c227:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c22a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c22e:	89 f7                	mov    edi,esi
c001c230:	41                   	inc    ecx
c001c231:	83 f9 10             	cmp    ecx,0x10
c001c234:	0f 85 6b ff ff ff    	jne    c001c1a5 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001c23a:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001c240:	85 c0                	test   eax,eax
c001c242:	74 5d                	je     c001c2a1 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c244:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001c24a:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001c250:	74 4f                	je     c001c2a1 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c252:	83 ec 0c             	sub    esp,0xc
c001c255:	68 88 bb 02 c0       	push   0xc002bb88
c001c25a:	e8 51 94 00 00       	call   c00256b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c25f:	c7 04 24 88 bb 02 c0 	mov    DWORD PTR [esp],0xc002bb88
c001c266:	89 c7                	mov    edi,eax
c001c268:	e8 4b 94 00 00       	call   c00256b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c26d:	83 c4 10             	add    esp,0x10
c001c270:	84 c0                	test   al,al
c001c272:	0f 84 e4 00 00 00    	je     c001c35c <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001c278:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c27b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c281:	85 d2                	test   edx,edx
c001c283:	74 0f                	je     c001c294 <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c001c285:	83 ec 0c             	sub    esp,0xc
c001c288:	8b 02                	mov    eax,DWORD PTR [edx]
c001c28a:	52                   	push   edx
c001c28b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c28e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c291:	83 c4 10             	add    esp,0x10
c001c294:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001c29e:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001c2a1:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001c2a7:	85 db                	test   ebx,ebx
c001c2a9:	74 16                	je     c001c2c1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c001c2ab:	83 ec 0c             	sub    esp,0xc
c001c2ae:	53                   	push   ebx
c001c2af:	e8 58 55 ff ff       	call   c001180c <VAS::~VAS()>
c001c2b4:	58                   	pop    eax
c001c2b5:	5a                   	pop    edx
c001c2b6:	6a 10                	push   0x10
c001c2b8:	53                   	push   ebx
c001c2b9:	e8 d9 5e ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c001c2be:	83 c4 10             	add    esp,0x10
c001c2c1:	83 ec 0c             	sub    esp,0xc
c001c2c4:	68 51 88 02 c0       	push   0xc0028851
c001c2c9:	e8 a9 5f ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c2ce:	83 c4 10             	add    esp,0x10
c001c2d1:	83 ec 08             	sub    esp,0x8
c001c2d4:	68 3b 07 00 00       	push   0x73b
c001c2d9:	68 5f 88 02 c0       	push   0xc002885f
c001c2de:	e8 94 5f ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c2e3:	83 c4 2c             	add    esp,0x2c
c001c2e6:	5b                   	pop    ebx
c001c2e7:	5e                   	pop    esi
c001c2e8:	5f                   	pop    edi
c001c2e9:	5d                   	pop    ebp
c001c2ea:	c3                   	ret    
c001c2eb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c2ef:	83 ec 0c             	sub    esp,0xc
c001c2f2:	68 3c 8b 02 c0       	push   0xc0028b3c
c001c2f7:	e8 0b c8 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c001c2fc:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c2ff:	83 c4 10             	add    esp,0x10
c001c302:	89 f7                	mov    edi,esi
c001c304:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c308:	e9 8e fe ff ff       	jmp    c001c19b <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c30d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001c313:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001c319:	75 1c                	jne    c001c337 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c31b:	83 ec 0c             	sub    esp,0xc
c001c31e:	68 a4 8b 02 c0       	push   0xc0028ba4
c001c323:	e8 4f 5f ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c328:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001c32f:	e8 b4 fb ff ff       	call   c001bee8 <blockTask(TaskState)>
c001c334:	83 c4 10             	add    esp,0x10
c001c337:	83 ec 08             	sub    esp,0x8
c001c33a:	56                   	push   esi
c001c33b:	68 88 bb 02 c0       	push   0xc002bb88
c001c340:	e8 3d 94 00 00       	call   c0025782 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c345:	c7 04 24 88 bb 02 c0 	mov    DWORD PTR [esp],0xc002bb88
c001c34c:	e8 5f 93 00 00       	call   c00256b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c351:	83 c4 10             	add    esp,0x10
c001c354:	39 f8                	cmp    eax,edi
c001c356:	0f 84 1c ff ff ff    	je     c001c278 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c001c35c:	83 ec 0c             	sub    esp,0xc
c001c35f:	68 88 bb 02 c0       	push   0xc002bb88
c001c364:	e8 47 93 00 00       	call   c00256b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c369:	c7 04 24 88 bb 02 c0 	mov    DWORD PTR [esp],0xc002bb88
c001c370:	89 c6                	mov    esi,eax
c001c372:	e8 5d 93 00 00       	call   c00256d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c377:	83 c4 10             	add    esp,0x10
c001c37a:	39 f3                	cmp    ebx,esi
c001c37c:	74 b9                	je     c001c337 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c37e:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001c381:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c384:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001c38a:	75 ab                	jne    c001c337 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c38c:	e9 7c ff ff ff       	jmp    c001c30d <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001c391:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c395:	83 ec 0c             	sub    esp,0xc
c001c398:	68 70 8b 02 c0       	push   0xc0028b70
c001c39d:	e9 55 ff ff ff       	jmp    c001c2f7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001c3a2:	8b 36                	mov    esi,DWORD PTR [esi]
c001c3a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c3a8:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001c3ab:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c3ae:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001c3b4:	01 d7                	add    edi,edx
c001c3b6:	89 f8                	mov    eax,edi
c001c3b8:	e9 44 fe ff ff       	jmp    c001c201 <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c001c3bd <cleanerTaskFunction(void*)>:
c001c3bd:	53                   	push   ebx
c001c3be:	83 ec 08             	sub    esp,0x8
c001c3c1:	e8 96 f6 ff ff       	call   c001ba5c <unlockScheduler()>
c001c3c6:	e8 8f f6 ff ff       	call   c001ba5a <lockScheduler()>
c001c3cb:	80 3d 4c bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bb4c,0x0
c001c3d2:	0f 85 8e 00 00 00    	jne    c001c466 <cleanerTaskFunction(void*)+0xa9>
c001c3d8:	83 ec 0c             	sub    esp,0xc
c001c3db:	6a 02                	push   0x2
c001c3dd:	e8 c4 fa ff ff       	call   c001bea6 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001c3e2:	83 c4 10             	add    esp,0x10
c001c3e5:	c6 05 4c bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb4c,0x0
c001c3ec:	e8 90 f6 ff ff       	call   c001ba81 <lockStuff()>
c001c3f1:	e8 64 f6 ff ff       	call   c001ba5a <lockScheduler()>
c001c3f6:	83 ec 0c             	sub    esp,0xc
c001c3f9:	68 70 bb 02 c0       	push   0xc002bb70
c001c3fe:	e8 b5 92 00 00       	call   c00256b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c403:	83 c4 10             	add    esp,0x10
c001c406:	84 c0                	test   al,al
c001c408:	75 40                	jne    c001c44a <cleanerTaskFunction(void*)+0x8d>
c001c40a:	83 ec 0c             	sub    esp,0xc
c001c40d:	68 70 bb 02 c0       	push   0xc002bb70
c001c412:	e8 99 92 00 00       	call   c00256b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c417:	c7 04 24 70 bb 02 c0 	mov    DWORD PTR [esp],0xc002bb70
c001c41e:	89 c3                	mov    ebx,eax
c001c420:	e8 af 92 00 00       	call   c00256d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c425:	c7 04 24 75 88 02 c0 	mov    DWORD PTR [esp],0xc0028875
c001c42c:	e8 46 5e ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c431:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c434:	e8 e0 fc ff ff       	call   c001c119 <cleanupTerminatedTask(ThreadControlBlock*)>
c001c439:	c7 04 24 8e 88 02 c0 	mov    DWORD PTR [esp],0xc002888e
c001c440:	e8 32 5e ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c445:	83 c4 10             	add    esp,0x10
c001c448:	eb ac                	jmp    c001c3f6 <cleanerTaskFunction(void*)+0x39>
c001c44a:	e8 0d f6 ff ff       	call   c001ba5c <unlockScheduler()>
c001c44f:	e8 bf f9 ff ff       	call   c001be13 <unlockStuff()>
c001c454:	e8 01 f6 ff ff       	call   c001ba5a <lockScheduler()>
c001c459:	80 3d 4c bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bb4c,0x0
c001c460:	0f 84 72 ff ff ff    	je     c001c3d8 <cleanerTaskFunction(void*)+0x1b>
c001c466:	e8 f1 f5 ff ff       	call   c001ba5c <unlockScheduler()>
c001c46b:	e9 75 ff ff ff       	jmp    c001c3e5 <cleanerTaskFunction(void*)+0x28>

c001c470 <terminateTask(int)>:
c001c470:	83 ec 14             	sub    esp,0x14
c001c473:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c478:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c47b:	83 c0 0c             	add    eax,0xc
c001c47e:	50                   	push   eax
c001c47f:	68 cc 8b 02 c0       	push   0xc0028bcc
c001c484:	e8 ee 5d ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c489:	e8 f3 f5 ff ff       	call   c001ba81 <lockStuff()>
c001c48e:	e8 c7 f5 ff ff       	call   c001ba5a <lockScheduler()>
c001c493:	c7 04 24 a1 88 02 c0 	mov    DWORD PTR [esp],0xc00288a1
c001c49a:	e8 d8 5d ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c49f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c4a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4a8:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001c4ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4b0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c4b3:	5a                   	pop    edx
c001c4b4:	59                   	pop    ecx
c001c4b5:	50                   	push   eax
c001c4b6:	68 70 bb 02 c0       	push   0xc002bb70
c001c4bb:	e8 c2 92 00 00       	call   c0025782 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c4c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4c5:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001c4cc:	c7 04 24 bb 88 02 c0 	mov    DWORD PTR [esp],0xc00288bb
c001c4d3:	e8 9f 5d ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c4d8:	83 c4 10             	add    esp,0x10
c001c4db:	a1 48 bb 02 c0       	mov    eax,ds:0xc002bb48
c001c4e0:	85 c0                	test   eax,eax
c001c4e2:	74 5a                	je     c001c53e <terminateTask(int)+0xce>
c001c4e4:	83 ec 0c             	sub    esp,0xc
c001c4e7:	68 d5 88 02 c0       	push   0xc00288d5
c001c4ec:	e8 86 5d ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c4f1:	58                   	pop    eax
c001c4f2:	c6 05 4c bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb4c,0x1
c001c4f9:	ff 35 48 bb 02 c0    	push   DWORD PTR ds:0xc002bb48
c001c4ff:	e8 66 fb ff ff       	call   c001c06a <unblockTask(ThreadControlBlock*)>
c001c504:	c7 04 24 ef 88 02 c0 	mov    DWORD PTR [esp],0xc00288ef
c001c50b:	e8 67 5d ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c510:	83 c4 10             	add    esp,0x10
c001c513:	e8 44 f5 ff ff       	call   c001ba5c <unlockScheduler()>
c001c518:	e8 f6 f8 ff ff       	call   c001be13 <unlockStuff()>
c001c51d:	83 ec 0c             	sub    esp,0xc
c001c520:	68 27 89 02 c0       	push   0xc0028927
c001c525:	e8 4d 5d ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c52a:	83 c4 10             	add    esp,0x10
c001c52d:	e8 28 f5 ff ff       	call   c001ba5a <lockScheduler()>
c001c532:	e8 57 f8 ff ff       	call   c001bd8e <schedule()>
c001c537:	e8 20 f5 ff ff       	call   c001ba5c <unlockScheduler()>
c001c53c:	eb ef                	jmp    c001c52d <terminateTask(int)+0xbd>
c001c53e:	83 ec 0c             	sub    esp,0xc
c001c541:	68 09 89 02 c0       	push   0xc0028909
c001c546:	e8 2c 5d ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c54b:	83 c4 10             	add    esp,0x10
c001c54e:	eb c3                	jmp    c001c513 <terminateTask(int)+0xa3>

c001c550 <Thr::terminateFromIRQ(int)>:
c001c550:	83 ec 18             	sub    esp,0x18
c001c553:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c557:	e8 14 ff ff ff       	call   c001c470 <terminateTask(int)>

c001c55c <Semaphore::release()>:
c001c55c:	83 ec 0c             	sub    esp,0xc
c001c55f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c563:	e8 19 f5 ff ff       	call   c001ba81 <lockStuff()>
c001c568:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c56b:	85 d2                	test   edx,edx
c001c56d:	74 1a                	je     c001c589 <Semaphore::release()+0x2d>
c001c56f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001c572:	83 ec 0c             	sub    esp,0xc
c001c575:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c578:	52                   	push   edx
c001c579:	e8 ec fa ff ff       	call   c001c06a <unblockTask(ThreadControlBlock*)>
c001c57e:	83 c4 10             	add    esp,0x10
c001c581:	83 c4 0c             	add    esp,0xc
c001c584:	e9 8a f8 ff ff       	jmp    c001be13 <unlockStuff()>
c001c589:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001c58c:	83 c4 0c             	add    esp,0xc
c001c58f:	e9 7f f8 ff ff       	jmp    c001be13 <unlockStuff()>

c001c594 <__static_initialization_and_destruction_0(int, int)>:
c001c594:	83 ec 0c             	sub    esp,0xc
c001c597:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001c59c:	0f 85 88 00 00 00    	jne    c001c62a <__static_initialization_and_destruction_0(int, int)+0x96>
c001c5a2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001c5aa:	75 7e                	jne    c001c62a <__static_initialization_and_destruction_0(int, int)+0x96>
c001c5ac:	83 ec 0c             	sub    esp,0xc
c001c5af:	68 88 bb 02 c0       	push   0xc002bb88
c001c5b4:	e8 af 93 00 00       	call   c0025968 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c5b9:	83 c4 10             	add    esp,0x10
c001c5bc:	83 ec 04             	sub    esp,0x4
c001c5bf:	68 18 96 02 c0       	push   0xc0029618
c001c5c4:	68 88 bb 02 c0       	push   0xc002bb88
c001c5c9:	68 28 59 02 c0       	push   0xc0025928
c001c5ce:	e8 40 5b ff ff       	call   c0012113 <__cxa_atexit>
c001c5d3:	83 c4 10             	add    esp,0x10
c001c5d6:	83 ec 0c             	sub    esp,0xc
c001c5d9:	68 7c bb 02 c0       	push   0xc002bb7c
c001c5de:	e8 85 93 00 00       	call   c0025968 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c5e3:	83 c4 10             	add    esp,0x10
c001c5e6:	83 ec 04             	sub    esp,0x4
c001c5e9:	68 18 96 02 c0       	push   0xc0029618
c001c5ee:	68 7c bb 02 c0       	push   0xc002bb7c
c001c5f3:	68 28 59 02 c0       	push   0xc0025928
c001c5f8:	e8 16 5b ff ff       	call   c0012113 <__cxa_atexit>
c001c5fd:	83 c4 10             	add    esp,0x10
c001c600:	83 ec 0c             	sub    esp,0xc
c001c603:	68 70 bb 02 c0       	push   0xc002bb70
c001c608:	e8 5b 93 00 00       	call   c0025968 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c60d:	83 c4 10             	add    esp,0x10
c001c610:	83 ec 04             	sub    esp,0x4
c001c613:	68 18 96 02 c0       	push   0xc0029618
c001c618:	68 70 bb 02 c0       	push   0xc002bb70
c001c61d:	68 28 59 02 c0       	push   0xc0025928
c001c622:	e8 ec 5a ff ff       	call   c0012113 <__cxa_atexit>
c001c627:	83 c4 10             	add    esp,0x10
c001c62a:	90                   	nop
c001c62b:	83 c4 0c             	add    esp,0xc
c001c62e:	c3                   	ret    

c001c62f <_GLOBAL__sub_I_kernelProcess>:
c001c62f:	83 ec 0c             	sub    esp,0xc
c001c632:	83 ec 08             	sub    esp,0x8
c001c635:	68 ff ff 00 00       	push   0xffff
c001c63a:	6a 01                	push   0x1
c001c63c:	e8 53 ff ff ff       	call   c001c594 <__static_initialization_and_destruction_0(int, int)>
c001c641:	83 c4 10             	add    esp,0x10
c001c644:	83 c4 0c             	add    esp,0xc
c001c647:	c3                   	ret    

c001c648 <Vm::vm8086EntryPoint(void*)>:
c001c648:	83 ec 0c             	sub    esp,0xc
c001c64b:	e8 0c f4 ff ff       	call   c001ba5c <unlockScheduler()>
c001c650:	fb                   	sti    
c001c651:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c656:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001c65a:	52                   	push   edx
c001c65b:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001c65f:	52                   	push   edx
c001c660:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001c664:	52                   	push   edx
c001c665:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001c669:	50                   	push   eax
c001c66a:	e8 2a 3c fe ff       	call   c0000299 <goToVM86>
c001c66f:	83 c4 1c             	add    esp,0x1c
c001c672:	c3                   	ret    

c001c673 <Vm::inbv(unsigned short)>:
c001c673:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c677:	ec                   	in     al,dx
c001c678:	c3                   	ret    

c001c679 <Vm::outbv(unsigned short, unsigned char)>:
c001c679:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c67d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c681:	ee                   	out    dx,al
c001c682:	c3                   	ret    

c001c683 <Vm::realToLinear(unsigned short, unsigned short)>:
c001c683:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c688:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c68d:	c1 e0 04             	shl    eax,0x4
c001c690:	01 d0                	add    eax,edx
c001c692:	c3                   	ret    

c001c693 <Vm::getSegment(unsigned int)>:
c001c693:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c697:	c1 e8 10             	shr    eax,0x10
c001c69a:	c3                   	ret    

c001c69b <Vm::getOffset(unsigned int)>:
c001c69b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c69f:	c3                   	ret    

c001c6a0 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001c6a0:	55                   	push   ebp
c001c6a1:	57                   	push   edi
c001c6a2:	56                   	push   esi
c001c6a3:	53                   	push   ebx
c001c6a4:	83 ec 2c             	sub    esp,0x2c
c001c6a7:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001c6ab:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c6af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c6b3:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c6b7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c6bb:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001c6bf:	e8 96 f3 ff ff       	call   c001ba5a <lockScheduler()>
c001c6c4:	68 80 00 00 00       	push   0x80
c001c6c9:	6a 00                	push   0x0
c001c6cb:	68 48 c6 01 c0       	push   0xc001c648
c001c6d0:	55                   	push   ebp
c001c6d1:	e8 ae f4 ff ff       	call   c001bb84 <Process::createThread(void (*)(void*), void*, int)>
c001c6d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c6da:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001c6de:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001c6e2:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c001c6e6:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c001c6ea:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001c6ee:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001c6f5:	e8 8e 5a ff ff       	call   c0012188 <operator new(unsigned long)>
c001c6fa:	83 c4 0c             	add    esp,0xc
c001c6fd:	89 c3                	mov    ebx,eax
c001c6ff:	55                   	push   ebp
c001c700:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c704:	50                   	push   eax
c001c705:	e8 9c 60 ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c001c70a:	83 c4 0c             	add    esp,0xc
c001c70d:	8d 44 24 17          	lea    eax,[esp+0x17]
c001c711:	50                   	push   eax
c001c712:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c716:	50                   	push   eax
c001c717:	53                   	push   ebx
c001c718:	e8 99 63 ff ff       	call   c0012ab6 <File::stat(unsigned long long*, bool*)>
c001c71d:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c001c721:	83 c4 10             	add    esp,0x10
c001c724:	84 d2                	test   dl,dl
c001c726:	74 1c                	je     c001c744 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c001c728:	83 ec 0c             	sub    esp,0xc
c001c72b:	68 eb 8b 02 c0       	push   0xc0028beb
c001c730:	e8 d2 c3 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c001c735:	e8 22 f3 ff ff       	call   c001ba5c <unlockScheduler()>
c001c73a:	83 c4 10             	add    esp,0x10
c001c73d:	31 d2                	xor    edx,edx
c001c73f:	e9 81 00 00 00       	jmp    c001c7c5 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001c744:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c748:	51                   	push   ecx
c001c749:	51                   	push   ecx
c001c74a:	6a 01                	push   0x1
c001c74c:	53                   	push   ebx
c001c74d:	e8 b8 60 ff ff       	call   c001280a <File::open(FileOpenMode)>
c001c752:	83 c4 10             	add    esp,0x10
c001c755:	85 c0                	test   eax,eax
c001c757:	74 1b                	je     c001c774 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c001c759:	83 ec 0c             	sub    esp,0xc
c001c75c:	68 04 8c 02 c0       	push   0xc0028c04
c001c761:	e8 a1 c3 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c001c766:	e8 f1 f2 ff ff       	call   c001ba5c <unlockScheduler()>
c001c76b:	83 c4 10             	add    esp,0x10
c001c76e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001c772:	eb 51                	jmp    c001c7c5 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001c774:	83 ec 0c             	sub    esp,0xc
c001c777:	0f b7 ff             	movzx  edi,di
c001c77a:	6a 07                	push   0x7
c001c77c:	0f b7 f6             	movzx  esi,si
c001c77f:	68 00 01 00 00       	push   0x100
c001c784:	6a 00                	push   0x0
c001c786:	6a 00                	push   0x0
c001c788:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c001c78e:	e8 d1 54 ff ff       	call   c0011c64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c793:	83 c4 18             	add    esp,0x18
c001c796:	57                   	push   edi
c001c797:	56                   	push   esi
c001c798:	e8 e6 fe ff ff       	call   c001c683 <Vm::realToLinear(unsigned short, unsigned short)>
c001c79d:	5a                   	pop    edx
c001c79e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c7a0:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001c7a4:	51                   	push   ecx
c001c7a5:	50                   	push   eax
c001c7a6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c7aa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c7ae:	53                   	push   ebx
c001c7af:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c7b2:	83 c4 14             	add    esp,0x14
c001c7b5:	53                   	push   ebx
c001c7b6:	e8 ad 60 ff ff       	call   c0012868 <File::close()>
c001c7bb:	e8 9c f2 ff ff       	call   c001ba5c <unlockScheduler()>
c001c7c0:	83 c4 10             	add    esp,0x10
c001c7c3:	b2 01                	mov    dl,0x1
c001c7c5:	83 c4 2c             	add    esp,0x2c
c001c7c8:	88 d0                	mov    al,dl
c001c7ca:	5b                   	pop    ebx
c001c7cb:	5e                   	pop    esi
c001c7cc:	5f                   	pop    edi
c001c7cd:	5d                   	pop    ebp
c001c7ce:	c3                   	ret    

c001c7cf <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001c7cf:	57                   	push   edi
c001c7d0:	56                   	push   esi
c001c7d1:	53                   	push   ebx
c001c7d2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c7d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7da:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c7de:	83 e8 06             	sub    eax,0x6
c001c7e1:	0f b7 c0             	movzx  eax,ax
c001c7e4:	50                   	push   eax
c001c7e5:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001c7ea:	50                   	push   eax
c001c7eb:	e8 93 fe ff ff       	call   c001c683 <Vm::realToLinear(unsigned short, unsigned short)>
c001c7f0:	5a                   	pop    edx
c001c7f1:	5e                   	pop    esi
c001c7f2:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001c7f5:	8d 56 fa             	lea    edx,[esi-0x6]
c001c7f8:	81 e2 ff ff 00 00    	and    edx,0xffff
c001c7fe:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001c801:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001c804:	83 c2 02             	add    edx,0x2
c001c807:	66 89 10             	mov    WORD PTR [eax],dx
c001c80a:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001c80d:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001c811:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001c814:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001c818:	89 d6                	mov    esi,edx
c001c81a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001c820:	66 81 e6 ff fd       	and    si,0xfdff
c001c825:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001c829:	74 07                	je     c001c832 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001c82b:	89 d6                	mov    esi,edx
c001c82d:	66 81 ce 00 02       	or     si,0x200
c001c832:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001c836:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c83b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001c83f:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001c847:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001c84a:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001c852:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001c855:	5b                   	pop    ebx
c001c856:	5e                   	pop    esi
c001c857:	5f                   	pop    edi
c001c858:	c3                   	ret    

c001c859 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001c859:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c85e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c863:	c1 e0 04             	shl    eax,0x4
c001c866:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001c869:	c3                   	ret    

c001c86a <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001c86a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c86f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c874:	c1 e0 04             	shl    eax,0x4
c001c877:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001c87b:	c3                   	ret    

c001c87c <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001c87c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c881:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c886:	c1 e0 04             	shl    eax,0x4
c001c889:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001c88c:	c3                   	ret    

c001c88d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001c88d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c892:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c897:	c1 e0 04             	shl    eax,0x4
c001c89a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c89e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001c8a1:	c3                   	ret    

c001c8a2 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001c8a2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c8a7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c8ac:	c1 e0 04             	shl    eax,0x4
c001c8af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c8b3:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001c8b7:	c3                   	ret    

c001c8b8 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001c8b8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c8bd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c8c2:	c1 e0 04             	shl    eax,0x4
c001c8c5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c8c9:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001c8cc:	c3                   	ret    

c001c8cd <Vm::faultHandler(regs*)>:
c001c8cd:	55                   	push   ebp
c001c8ce:	57                   	push   edi
c001c8cf:	56                   	push   esi
c001c8d0:	53                   	push   ebx
c001c8d1:	83 ec 1c             	sub    esp,0x1c
c001c8d4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c8d8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001c8db:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001c8df:	0f b7 f0             	movzx  esi,ax
c001c8e2:	52                   	push   edx
c001c8e3:	0f b7 c0             	movzx  eax,ax
c001c8e6:	50                   	push   eax
c001c8e7:	e8 97 fd ff ff       	call   c001c683 <Vm::realToLinear(unsigned short, unsigned short)>
c001c8ec:	5a                   	pop    edx
c001c8ed:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001c8f0:	59                   	pop    ecx
c001c8f1:	89 c7                	mov    edi,eax
c001c8f3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001c8f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c8fa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c8ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c903:	0f b7 c5             	movzx  eax,bp
c001c906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c90a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001c90e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c912:	e8 6c fd ff ff       	call   c001c683 <Vm::realToLinear(unsigned short, unsigned short)>
c001c917:	5a                   	pop    edx
c001c918:	59                   	pop    ecx
c001c919:	b1 06                	mov    cl,0x6
c001c91b:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001c920:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001c925:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001c928:	80 fa 9d             	cmp    dl,0x9d
c001c92b:	0f 84 1d 02 00 00    	je     c001cb4e <Vm::faultHandler(regs*)+0x281>
c001c931:	0f 87 8e 00 00 00    	ja     c001c9c5 <Vm::faultHandler(regs*)+0xf8>
c001c937:	80 fa 66             	cmp    dl,0x66
c001c93a:	0f 84 89 01 00 00    	je     c001cac9 <Vm::faultHandler(regs*)+0x1fc>
c001c940:	77 44                	ja     c001c986 <Vm::faultHandler(regs*)+0xb9>
c001c942:	80 fa 36             	cmp    dl,0x36
c001c945:	0f 84 74 01 00 00    	je     c001cabf <Vm::faultHandler(regs*)+0x1f2>
c001c94b:	77 1a                	ja     c001c967 <Vm::faultHandler(regs*)+0x9a>
c001c94d:	80 fa 26             	cmp    dl,0x26
c001c950:	0f 84 4b 01 00 00    	je     c001caa1 <Vm::faultHandler(regs*)+0x1d4>
c001c956:	80 fa 2e             	cmp    dl,0x2e
c001c959:	0f 85 4a 05 00 00    	jne    c001cea9 <Vm::faultHandler(regs*)+0x5dc>
c001c95f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c962:	31 c9                	xor    ecx,ecx
c001c964:	47                   	inc    edi
c001c965:	eb be                	jmp    c001c925 <Vm::faultHandler(regs*)+0x58>
c001c967:	80 fa 64             	cmp    dl,0x64
c001c96a:	0f 84 3b 01 00 00    	je     c001caab <Vm::faultHandler(regs*)+0x1de>
c001c970:	0f 87 3f 01 00 00    	ja     c001cab5 <Vm::faultHandler(regs*)+0x1e8>
c001c976:	80 fa 3e             	cmp    dl,0x3e
c001c979:	0f 85 2a 05 00 00    	jne    c001cea9 <Vm::faultHandler(regs*)+0x5dc>
c001c97f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c982:	b1 01                	mov    cl,0x1
c001c984:	eb de                	jmp    c001c964 <Vm::faultHandler(regs*)+0x97>
c001c986:	80 fa 6d             	cmp    dl,0x6d
c001c989:	0f 84 bf 02 00 00    	je     c001cc4e <Vm::faultHandler(regs*)+0x381>
c001c98f:	77 17                	ja     c001c9a8 <Vm::faultHandler(regs*)+0xdb>
c001c991:	80 fa 67             	cmp    dl,0x67
c001c994:	0f 84 3c 01 00 00    	je     c001cad6 <Vm::faultHandler(regs*)+0x209>
c001c99a:	80 fa 6c             	cmp    dl,0x6c
c001c99d:	0f 84 5d 02 00 00    	je     c001cc00 <Vm::faultHandler(regs*)+0x333>
c001c9a3:	e9 01 05 00 00       	jmp    c001cea9 <Vm::faultHandler(regs*)+0x5dc>
c001c9a8:	80 fa 6f             	cmp    dl,0x6f
c001c9ab:	0f 84 8b 03 00 00    	je     c001cd3c <Vm::faultHandler(regs*)+0x46f>
c001c9b1:	0f 82 0f 03 00 00    	jb     c001ccc6 <Vm::faultHandler(regs*)+0x3f9>
c001c9b7:	80 fa 9c             	cmp    dl,0x9c
c001c9ba:	0f 84 23 01 00 00    	je     c001cae3 <Vm::faultHandler(regs*)+0x216>
c001c9c0:	e9 e4 04 00 00       	jmp    c001cea9 <Vm::faultHandler(regs*)+0x5dc>
c001c9c5:	80 fa ec             	cmp    dl,0xec
c001c9c8:	0f 84 7f 04 00 00    	je     c001ce4d <Vm::faultHandler(regs*)+0x580>
c001c9ce:	77 7b                	ja     c001ca4b <Vm::faultHandler(regs*)+0x17e>
c001c9d0:	80 fa e4             	cmp    dl,0xe4
c001c9d3:	0f 84 fe 03 00 00    	je     c001cdd7 <Vm::faultHandler(regs*)+0x50a>
c001c9d9:	77 53                	ja     c001ca2e <Vm::faultHandler(regs*)+0x161>
c001c9db:	80 fa cd             	cmp    dl,0xcd
c001c9de:	0f 84 cd 01 00 00    	je     c001cbb1 <Vm::faultHandler(regs*)+0x2e4>
c001c9e4:	80 fa cf             	cmp    dl,0xcf
c001c9e7:	0f 85 bc 04 00 00    	jne    c001cea9 <Vm::faultHandler(regs*)+0x5dc>
c001c9ed:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001c9f0:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001c9f3:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001c9f7:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001c9fa:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001c9fe:	81 ca 00 02 02 00    	or     edx,0x20200
c001ca04:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ca07:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001ca0b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ca11:	66 c1 e8 09          	shr    ax,0x9
c001ca15:	83 e0 01             	and    eax,0x1
c001ca18:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ca1b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ca1e:	83 c0 06             	add    eax,0x6
c001ca21:	25 ff ff 00 00       	and    eax,0xffff
c001ca26:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ca29:	e9 77 04 00 00       	jmp    c001cea5 <Vm::faultHandler(regs*)+0x5d8>
c001ca2e:	80 fa e6             	cmp    dl,0xe6
c001ca31:	0f 84 ea 03 00 00    	je     c001ce21 <Vm::faultHandler(regs*)+0x554>
c001ca37:	0f 82 b6 03 00 00    	jb     c001cdf3 <Vm::faultHandler(regs*)+0x526>
c001ca3d:	80 fa e7             	cmp    dl,0xe7
c001ca40:	0f 84 f2 03 00 00    	je     c001ce38 <Vm::faultHandler(regs*)+0x56b>
c001ca46:	e9 5e 04 00 00       	jmp    c001cea9 <Vm::faultHandler(regs*)+0x5dc>
c001ca4b:	80 fa ef             	cmp    dl,0xef
c001ca4e:	0f 84 3c 04 00 00    	je     c001ce90 <Vm::faultHandler(regs*)+0x5c3>
c001ca54:	77 28                	ja     c001ca7e <Vm::faultHandler(regs*)+0x1b1>
c001ca56:	80 fa ed             	cmp    dl,0xed
c001ca59:	0f 84 0a 04 00 00    	je     c001ce69 <Vm::faultHandler(regs*)+0x59c>
c001ca5f:	80 fa ee             	cmp    dl,0xee
c001ca62:	0f 85 41 04 00 00    	jne    c001cea9 <Vm::faultHandler(regs*)+0x5dc>
c001ca68:	50                   	push   eax
c001ca69:	50                   	push   eax
c001ca6a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ca6e:	50                   	push   eax
c001ca6f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ca73:	50                   	push   eax
c001ca74:	e8 00 fc ff ff       	call   c001c679 <Vm::outbv(unsigned short, unsigned char)>
c001ca79:	e9 0a 04 00 00       	jmp    c001ce88 <Vm::faultHandler(regs*)+0x5bb>
c001ca7e:	80 fa fa             	cmp    dl,0xfa
c001ca81:	0f 84 5d 01 00 00    	je     c001cbe4 <Vm::faultHandler(regs*)+0x317>
c001ca87:	80 fa fb             	cmp    dl,0xfb
c001ca8a:	0f 84 62 01 00 00    	je     c001cbf2 <Vm::faultHandler(regs*)+0x325>
c001ca90:	80 fa f3             	cmp    dl,0xf3
c001ca93:	0f 85 10 04 00 00    	jne    c001cea9 <Vm::faultHandler(regs*)+0x5dc>
c001ca99:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ca9c:	e9 c3 fe ff ff       	jmp    c001c964 <Vm::faultHandler(regs*)+0x97>
c001caa1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001caa4:	b1 02                	mov    cl,0x2
c001caa6:	e9 b9 fe ff ff       	jmp    c001c964 <Vm::faultHandler(regs*)+0x97>
c001caab:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001caae:	b1 03                	mov    cl,0x3
c001cab0:	e9 af fe ff ff       	jmp    c001c964 <Vm::faultHandler(regs*)+0x97>
c001cab5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cab8:	b1 04                	mov    cl,0x4
c001caba:	e9 a5 fe ff ff       	jmp    c001c964 <Vm::faultHandler(regs*)+0x97>
c001cabf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cac2:	b1 05                	mov    cl,0x5
c001cac4:	e9 9b fe ff ff       	jmp    c001c964 <Vm::faultHandler(regs*)+0x97>
c001cac9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cacc:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001cad1:	e9 8e fe ff ff       	jmp    c001c964 <Vm::faultHandler(regs*)+0x97>
c001cad6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cad9:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001cade:	e9 81 fe ff ff       	jmp    c001c964 <Vm::faultHandler(regs*)+0x97>
c001cae3:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001cae6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001caea:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001caef:	74 30                	je     c001cb21 <Vm::faultHandler(regs*)+0x254>
c001caf1:	83 e9 04             	sub    ecx,0x4
c001caf4:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001cafa:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001cb00:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001cb03:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001cb06:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001cb0c:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001cb10:	0f 84 8c 03 00 00    	je     c001cea2 <Vm::faultHandler(regs*)+0x5d5>
c001cb16:	80 ce 02             	or     dh,0x2
c001cb19:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001cb1c:	e9 81 03 00 00       	jmp    c001cea2 <Vm::faultHandler(regs*)+0x5d5>
c001cb21:	83 e9 02             	sub    ecx,0x2
c001cb24:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001cb2a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001cb2d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001cb31:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001cb37:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001cb3b:	74 05                	je     c001cb42 <Vm::faultHandler(regs*)+0x275>
c001cb3d:	80 ce 02             	or     dh,0x2
c001cb40:	eb 03                	jmp    c001cb45 <Vm::faultHandler(regs*)+0x278>
c001cb42:	80 e6 fd             	and    dh,0xfd
c001cb45:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001cb49:	e9 54 03 00 00       	jmp    c001cea2 <Vm::faultHandler(regs*)+0x5d5>
c001cb4e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cb53:	74 2a                	je     c001cb7f <Vm::faultHandler(regs*)+0x2b2>
c001cb55:	8b 10                	mov    edx,DWORD PTR [eax]
c001cb57:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001cb5d:	81 ca 00 02 02 00    	or     edx,0x20200
c001cb63:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001cb66:	8b 00                	mov    eax,DWORD PTR [eax]
c001cb68:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001cb6e:	c1 e8 09             	shr    eax,0x9
c001cb71:	83 e0 01             	and    eax,0x1
c001cb74:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001cb77:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001cb7a:	83 c0 04             	add    eax,0x4
c001cb7d:	eb 25                	jmp    c001cba4 <Vm::faultHandler(regs*)+0x2d7>
c001cb7f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001cb82:	81 ca 00 02 02 00    	or     edx,0x20200
c001cb88:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001cb8b:	66 8b 00             	mov    ax,WORD PTR [eax]
c001cb8e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001cb94:	66 c1 e8 09          	shr    ax,0x9
c001cb98:	83 e0 01             	and    eax,0x1
c001cb9b:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001cb9e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001cba1:	83 c0 02             	add    eax,0x2
c001cba4:	25 ff ff 00 00       	and    eax,0xffff
c001cba9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001cbac:	e9 f1 02 00 00       	jmp    c001cea2 <Vm::faultHandler(regs*)+0x5d5>
c001cbb1:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cbb5:	3c ff                	cmp    al,0xff
c001cbb7:	75 10                	jne    c001cbc9 <Vm::faultHandler(regs*)+0x2fc>
c001cbb9:	83 ec 0c             	sub    esp,0xc
c001cbbc:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001cbbf:	e8 8c f9 ff ff       	call   c001c550 <Thr::terminateFromIRQ(int)>
c001cbc4:	e9 c2 02 00 00       	jmp    c001ce8b <Vm::faultHandler(regs*)+0x5be>
c001cbc9:	83 ec 0c             	sub    esp,0xc
c001cbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cbd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbd4:	57                   	push   edi
c001cbd5:	50                   	push   eax
c001cbd6:	53                   	push   ebx
c001cbd7:	e8 f3 fb ff ff       	call   c001c7cf <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001cbdc:	83 c4 20             	add    esp,0x20
c001cbdf:	e9 c1 02 00 00       	jmp    c001cea5 <Vm::faultHandler(regs*)+0x5d8>
c001cbe4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cbe9:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001cbed:	e9 b0 02 00 00       	jmp    c001cea2 <Vm::faultHandler(regs*)+0x5d5>
c001cbf2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cbf7:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001cbfb:	e9 a2 02 00 00       	jmp    c001cea2 <Vm::faultHandler(regs*)+0x5d5>
c001cc00:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cc05:	74 0d                	je     c001cc14 <Vm::faultHandler(regs*)+0x347>
c001cc07:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001cc0e:	0f 87 e9 02 00 00    	ja     c001cefd <Vm::faultHandler(regs*)+0x630>
c001cc14:	83 ec 0c             	sub    esp,0xc
c001cc17:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001cc1a:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cc1e:	50                   	push   eax
c001cc1f:	e8 4f fa ff ff       	call   c001c673 <Vm::inbv(unsigned short)>
c001cc24:	83 c4 0c             	add    esp,0xc
c001cc27:	0f b6 c0             	movzx  eax,al
c001cc2a:	0f b7 c9             	movzx  ecx,cx
c001cc2d:	50                   	push   eax
c001cc2e:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001cc32:	50                   	push   eax
c001cc33:	51                   	push   ecx
c001cc34:	e8 54 fc ff ff       	call   c001c88d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001cc39:	83 c4 10             	add    esp,0x10
c001cc3c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cc3f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cc43:	74 03                	je     c001cc48 <Vm::faultHandler(regs*)+0x37b>
c001cc45:	48                   	dec    eax
c001cc46:	eb 01                	jmp    c001cc49 <Vm::faultHandler(regs*)+0x37c>
c001cc48:	40                   	inc    eax
c001cc49:	0f b7 c0             	movzx  eax,ax
c001cc4c:	eb 70                	jmp    c001ccbe <Vm::faultHandler(regs*)+0x3f1>
c001cc4e:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001cc51:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001cc54:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cc59:	74 0c                	je     c001cc67 <Vm::faultHandler(regs*)+0x39a>
c001cc5b:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001cc61:	0f 87 96 02 00 00    	ja     c001cefd <Vm::faultHandler(regs*)+0x630>
c001cc67:	0f b7 c9             	movzx  ecx,cx
c001cc6a:	0f b7 f6             	movzx  esi,si
c001cc6d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001cc70:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cc75:	74 20                	je     c001cc97 <Vm::faultHandler(regs*)+0x3ca>
c001cc77:	ed                   	in     eax,dx
c001cc78:	55                   	push   ebp
c001cc79:	50                   	push   eax
c001cc7a:	51                   	push   ecx
c001cc7b:	56                   	push   esi
c001cc7c:	e8 37 fc ff ff       	call   c001c8b8 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001cc81:	83 c4 10             	add    esp,0x10
c001cc84:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cc87:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cc8b:	74 05                	je     c001cc92 <Vm::faultHandler(regs*)+0x3c5>
c001cc8d:	83 e8 04             	sub    eax,0x4
c001cc90:	eb 27                	jmp    c001ccb9 <Vm::faultHandler(regs*)+0x3ec>
c001cc92:	83 c0 04             	add    eax,0x4
c001cc95:	eb 22                	jmp    c001ccb9 <Vm::faultHandler(regs*)+0x3ec>
c001cc97:	66 ed                	in     ax,dx
c001cc99:	0f b7 c0             	movzx  eax,ax
c001cc9c:	57                   	push   edi
c001cc9d:	50                   	push   eax
c001cc9e:	51                   	push   ecx
c001cc9f:	56                   	push   esi
c001cca0:	e8 fd fb ff ff       	call   c001c8a2 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001cca5:	83 c4 10             	add    esp,0x10
c001cca8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ccab:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ccaf:	74 05                	je     c001ccb6 <Vm::faultHandler(regs*)+0x3e9>
c001ccb1:	83 e8 02             	sub    eax,0x2
c001ccb4:	eb 03                	jmp    c001ccb9 <Vm::faultHandler(regs*)+0x3ec>
c001ccb6:	83 c0 02             	add    eax,0x2
c001ccb9:	25 ff ff 00 00       	and    eax,0xffff
c001ccbe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001ccc1:	e9 dc 01 00 00       	jmp    c001cea2 <Vm::faultHandler(regs*)+0x5d5>
c001ccc6:	49                   	dec    ecx
c001ccc7:	80 f9 05             	cmp    cl,0x5
c001ccca:	77 24                	ja     c001ccf0 <Vm::faultHandler(regs*)+0x423>
c001cccc:	0f b6 c9             	movzx  ecx,cl
c001cccf:	ff 24 8d 4c 8c 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd73b4]
c001ccd6:	0f b7 f5             	movzx  esi,bp
c001ccd9:	eb 15                	jmp    c001ccf0 <Vm::faultHandler(regs*)+0x423>
c001ccdb:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c001ccdf:	eb 0f                	jmp    c001ccf0 <Vm::faultHandler(regs*)+0x423>
c001cce1:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c001cce5:	eb 09                	jmp    c001ccf0 <Vm::faultHandler(regs*)+0x423>
c001cce7:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c001cceb:	eb 03                	jmp    c001ccf0 <Vm::faultHandler(regs*)+0x423>
c001cced:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c001ccf0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ccf3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ccf8:	74 0b                	je     c001cd05 <Vm::faultHandler(regs*)+0x438>
c001ccfa:	3d ff ff 00 00       	cmp    eax,0xffff
c001ccff:	0f 87 f8 01 00 00    	ja     c001cefd <Vm::faultHandler(regs*)+0x630>
c001cd05:	0f b7 c0             	movzx  eax,ax
c001cd08:	52                   	push   edx
c001cd09:	52                   	push   edx
c001cd0a:	50                   	push   eax
c001cd0b:	56                   	push   esi
c001cd0c:	e8 48 fb ff ff       	call   c001c859 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001cd11:	59                   	pop    ecx
c001cd12:	0f b6 c0             	movzx  eax,al
c001cd15:	5e                   	pop    esi
c001cd16:	50                   	push   eax
c001cd17:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cd1b:	50                   	push   eax
c001cd1c:	e8 58 f9 ff ff       	call   c001c679 <Vm::outbv(unsigned short, unsigned char)>
c001cd21:	83 c4 10             	add    esp,0x10
c001cd24:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cd27:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cd2b:	74 03                	je     c001cd30 <Vm::faultHandler(regs*)+0x463>
c001cd2d:	48                   	dec    eax
c001cd2e:	eb 01                	jmp    c001cd31 <Vm::faultHandler(regs*)+0x464>
c001cd30:	40                   	inc    eax
c001cd31:	0f b7 c0             	movzx  eax,ax
c001cd34:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001cd37:	e9 66 01 00 00       	jmp    c001cea2 <Vm::faultHandler(regs*)+0x5d5>
c001cd3c:	49                   	dec    ecx
c001cd3d:	80 f9 05             	cmp    cl,0x5
c001cd40:	77 1f                	ja     c001cd61 <Vm::faultHandler(regs*)+0x494>
c001cd42:	0f b6 c9             	movzx  ecx,cl
c001cd45:	ff 24 8d 64 8c 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd739c]
c001cd4c:	89 ee                	mov    esi,ebp
c001cd4e:	eb 11                	jmp    c001cd61 <Vm::faultHandler(regs*)+0x494>
c001cd50:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001cd53:	eb 0c                	jmp    c001cd61 <Vm::faultHandler(regs*)+0x494>
c001cd55:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001cd58:	eb 07                	jmp    c001cd61 <Vm::faultHandler(regs*)+0x494>
c001cd5a:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c001cd5d:	eb 02                	jmp    c001cd61 <Vm::faultHandler(regs*)+0x494>
c001cd5f:	8b 33                	mov    esi,DWORD PTR [ebx]
c001cd61:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001cd64:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cd69:	74 0c                	je     c001cd77 <Vm::faultHandler(regs*)+0x4aa>
c001cd6b:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001cd71:	0f 87 86 01 00 00    	ja     c001cefd <Vm::faultHandler(regs*)+0x630>
c001cd77:	0f b7 d6             	movzx  edx,si
c001cd7a:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001cd7d:	0f b7 c1             	movzx  eax,cx
c001cd80:	81 e7 00 04 00 00    	and    edi,0x400
c001cd86:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001cd89:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cd8e:	74 1d                	je     c001cdad <Vm::faultHandler(regs*)+0x4e0>
c001cd90:	55                   	push   ebp
c001cd91:	55                   	push   ebp
c001cd92:	50                   	push   eax
c001cd93:	52                   	push   edx
c001cd94:	e8 e3 fa ff ff       	call   c001c87c <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001cd99:	83 c4 10             	add    esp,0x10
c001cd9c:	89 f2                	mov    edx,esi
c001cd9e:	ef                   	out    dx,eax
c001cd9f:	85 ff                	test   edi,edi
c001cda1:	74 05                	je     c001cda8 <Vm::faultHandler(regs*)+0x4db>
c001cda3:	83 e9 04             	sub    ecx,0x4
c001cda6:	eb 21                	jmp    c001cdc9 <Vm::faultHandler(regs*)+0x4fc>
c001cda8:	83 c1 04             	add    ecx,0x4
c001cdab:	eb 1c                	jmp    c001cdc9 <Vm::faultHandler(regs*)+0x4fc>
c001cdad:	55                   	push   ebp
c001cdae:	55                   	push   ebp
c001cdaf:	50                   	push   eax
c001cdb0:	52                   	push   edx
c001cdb1:	e8 b4 fa ff ff       	call   c001c86a <Vm::readWordFromReal(unsigned short, unsigned short)>
c001cdb6:	83 c4 10             	add    esp,0x10
c001cdb9:	89 f2                	mov    edx,esi
c001cdbb:	66 ef                	out    dx,ax
c001cdbd:	85 ff                	test   edi,edi
c001cdbf:	74 05                	je     c001cdc6 <Vm::faultHandler(regs*)+0x4f9>
c001cdc1:	83 e9 02             	sub    ecx,0x2
c001cdc4:	eb 03                	jmp    c001cdc9 <Vm::faultHandler(regs*)+0x4fc>
c001cdc6:	83 c1 02             	add    ecx,0x2
c001cdc9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001cdcf:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c001cdd2:	e9 cb 00 00 00       	jmp    c001cea2 <Vm::faultHandler(regs*)+0x5d5>
c001cdd7:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001cdde:	83 ec 0c             	sub    esp,0xc
c001cde1:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cde5:	50                   	push   eax
c001cde6:	e8 88 f8 ff ff       	call   c001c673 <Vm::inbv(unsigned short)>
c001cdeb:	0f b6 c0             	movzx  eax,al
c001cdee:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001cdf1:	eb 3f                	jmp    c001ce32 <Vm::faultHandler(regs*)+0x565>
c001cdf3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cdf8:	74 07                	je     c001ce01 <Vm::faultHandler(regs*)+0x534>
c001cdfa:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001cdfe:	ed                   	in     eax,dx
c001cdff:	eb 14                	jmp    c001ce15 <Vm::faultHandler(regs*)+0x548>
c001ce01:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c001ce04:	66 31 c9             	xor    cx,cx
c001ce07:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c001ce0a:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001ce0e:	66 ed                	in     ax,dx
c001ce10:	0f b7 c0             	movzx  eax,ax
c001ce13:	09 c8                	or     eax,ecx
c001ce15:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ce18:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ce1c:	e9 84 00 00 00       	jmp    c001cea5 <Vm::faultHandler(regs*)+0x5d8>
c001ce21:	52                   	push   edx
c001ce22:	52                   	push   edx
c001ce23:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ce27:	50                   	push   eax
c001ce28:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001ce2c:	50                   	push   eax
c001ce2d:	e8 47 f8 ff ff       	call   c001c679 <Vm::outbv(unsigned short, unsigned char)>
c001ce32:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ce36:	eb 53                	jmp    c001ce8b <Vm::faultHandler(regs*)+0x5be>
c001ce38:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ce3b:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001ce3f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ce44:	74 03                	je     c001ce49 <Vm::faultHandler(regs*)+0x57c>
c001ce46:	ef                   	out    dx,eax
c001ce47:	eb cf                	jmp    c001ce18 <Vm::faultHandler(regs*)+0x54b>
c001ce49:	66 ef                	out    dx,ax
c001ce4b:	eb cb                	jmp    c001ce18 <Vm::faultHandler(regs*)+0x54b>
c001ce4d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ce54:	83 ec 0c             	sub    esp,0xc
c001ce57:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ce5b:	50                   	push   eax
c001ce5c:	e8 12 f8 ff ff       	call   c001c673 <Vm::inbv(unsigned short)>
c001ce61:	0f b6 c0             	movzx  eax,al
c001ce64:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ce67:	eb 1f                	jmp    c001ce88 <Vm::faultHandler(regs*)+0x5bb>
c001ce69:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ce6c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ce71:	74 03                	je     c001ce76 <Vm::faultHandler(regs*)+0x5a9>
c001ce73:	ed                   	in     eax,dx
c001ce74:	eb 0d                	jmp    c001ce83 <Vm::faultHandler(regs*)+0x5b6>
c001ce76:	66 ed                	in     ax,dx
c001ce78:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001ce7b:	0f b7 c0             	movzx  eax,ax
c001ce7e:	66 31 d2             	xor    dx,dx
c001ce81:	09 d0                	or     eax,edx
c001ce83:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ce86:	eb 1a                	jmp    c001cea2 <Vm::faultHandler(regs*)+0x5d5>
c001ce88:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ce8b:	83 c4 10             	add    esp,0x10
c001ce8e:	eb 15                	jmp    c001cea5 <Vm::faultHandler(regs*)+0x5d8>
c001ce90:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ce93:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ce96:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ce9b:	74 03                	je     c001cea0 <Vm::faultHandler(regs*)+0x5d3>
c001ce9d:	ef                   	out    dx,eax
c001ce9e:	eb 02                	jmp    c001cea2 <Vm::faultHandler(regs*)+0x5d5>
c001cea0:	66 ef                	out    dx,ax
c001cea2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cea5:	b0 01                	mov    al,0x1
c001cea7:	eb 56                	jmp    c001ceff <Vm::faultHandler(regs*)+0x632>
c001cea9:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c001cead:	50                   	push   eax
c001ceae:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c001ceb2:	50                   	push   eax
c001ceb3:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c001ceb7:	50                   	push   eax
c001ceb8:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c001cebc:	50                   	push   eax
c001cebd:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cec1:	50                   	push   eax
c001cec2:	52                   	push   edx
c001cec3:	52                   	push   edx
c001cec4:	68 1d 8c 02 c0       	push   0xc0028c1d
c001cec9:	e8 a9 53 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001cece:	83 c4 20             	add    esp,0x20
c001ced1:	83 ec 0c             	sub    esp,0xc
c001ced4:	6a 60                	push   0x60
c001ced6:	e8 98 f7 ff ff       	call   c001c673 <Vm::inbv(unsigned short)>
c001cedb:	83 c4 10             	add    esp,0x10
c001cede:	3c 1c                	cmp    al,0x1c
c001cee0:	74 04                	je     c001cee6 <Vm::faultHandler(regs*)+0x619>
c001cee2:	3c 5a                	cmp    al,0x5a
c001cee4:	75 eb                	jne    c001ced1 <Vm::faultHandler(regs*)+0x604>
c001cee6:	3c 5a                	cmp    al,0x5a
c001cee8:	74 04                	je     c001ceee <Vm::faultHandler(regs*)+0x621>
c001ceea:	3c 1c                	cmp    al,0x1c
c001ceec:	75 0f                	jne    c001cefd <Vm::faultHandler(regs*)+0x630>
c001ceee:	83 ec 0c             	sub    esp,0xc
c001cef1:	6a 60                	push   0x60
c001cef3:	e8 7b f7 ff ff       	call   c001c673 <Vm::inbv(unsigned short)>
c001cef8:	83 c4 10             	add    esp,0x10
c001cefb:	eb e9                	jmp    c001cee6 <Vm::faultHandler(regs*)+0x619>
c001cefd:	31 c0                	xor    eax,eax
c001ceff:	83 c4 1c             	add    esp,0x1c
c001cf02:	5b                   	pop    ebx
c001cf03:	5e                   	pop    esi
c001cf04:	5f                   	pop    edi
c001cf05:	5d                   	pop    ebp
c001cf06:	c3                   	ret    

c001cf07 <Vm::fpuInternalTo32(unsigned long long)>:
c001cf07:	57                   	push   edi
c001cf08:	56                   	push   esi
c001cf09:	53                   	push   ebx
c001cf0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf12:	89 d6                	mov    esi,edx
c001cf14:	89 d7                	mov    edi,edx
c001cf16:	89 c1                	mov    ecx,eax
c001cf18:	c1 ef 14             	shr    edi,0x14
c001cf1b:	89 d3                	mov    ebx,edx
c001cf1d:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001cf23:	31 d2                	xor    edx,edx
c001cf25:	89 f8                	mov    eax,edi
c001cf27:	81 e6 00 00 00 80    	and    esi,0x80000000
c001cf2d:	bf ff 00 00 00       	mov    edi,0xff
c001cf32:	05 80 fc ff ff       	add    eax,0xfffffc80
c001cf37:	83 d2 ff             	adc    edx,0xffffffff
c001cf3a:	39 c7                	cmp    edi,eax
c001cf3c:	bf 00 00 00 00       	mov    edi,0x0
c001cf41:	19 d7                	sbb    edi,edx
c001cf43:	72 15                	jb     c001cf5a <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001cf45:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001cf49:	c1 e0 17             	shl    eax,0x17
c001cf4c:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001cf52:	09 f1                	or     ecx,esi
c001cf54:	09 c1                	or     ecx,eax
c001cf56:	89 cf                	mov    edi,ecx
c001cf58:	eb 02                	jmp    c001cf5c <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001cf5a:	31 ff                	xor    edi,edi
c001cf5c:	89 f8                	mov    eax,edi
c001cf5e:	5b                   	pop    ebx
c001cf5f:	5e                   	pop    esi
c001cf60:	5f                   	pop    edi
c001cf61:	c3                   	ret    

c001cf62 <Vm::fpuInternalTo64(unsigned long long)>:
c001cf62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cf6a:	c3                   	ret    

c001cf6b <Vm::fpu32ToInternal(unsigned int)>:
c001cf6b:	57                   	push   edi
c001cf6c:	31 ff                	xor    edi,edi
c001cf6e:	56                   	push   esi
c001cf6f:	53                   	push   ebx
c001cf70:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cf74:	89 cb                	mov    ebx,ecx
c001cf76:	89 ce                	mov    esi,ecx
c001cf78:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001cf7e:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001cf84:	c1 e9 17             	shr    ecx,0x17
c001cf87:	89 f0                	mov    eax,esi
c001cf89:	0f b6 d1             	movzx  edx,cl
c001cf8c:	81 c2 80 03 00 00    	add    edx,0x380
c001cf92:	89 d1                	mov    ecx,edx
c001cf94:	89 fa                	mov    edx,edi
c001cf96:	c1 e1 14             	shl    ecx,0x14
c001cf99:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001cf9d:	c1 e0 1d             	shl    eax,0x1d
c001cfa0:	89 d7                	mov    edi,edx
c001cfa2:	89 c6                	mov    esi,eax
c001cfa4:	89 ca                	mov    edx,ecx
c001cfa6:	89 f0                	mov    eax,esi
c001cfa8:	09 fa                	or     edx,edi
c001cfaa:	09 da                	or     edx,ebx
c001cfac:	5b                   	pop    ebx
c001cfad:	5e                   	pop    esi
c001cfae:	5f                   	pop    edi
c001cfaf:	c3                   	ret    

c001cfb0 <Vm::fpu64ToInternal(unsigned long long)>:
c001cfb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cfb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cfb8:	c3                   	ret    

c001cfb9 <Vm::fpuFloatToLong(unsigned long long)>:
c001cfb9:	57                   	push   edi
c001cfba:	31 c0                	xor    eax,eax
c001cfbc:	56                   	push   esi
c001cfbd:	31 d2                	xor    edx,edx
c001cfbf:	53                   	push   ebx
c001cfc0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cfc4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cfc8:	89 d9                	mov    ecx,ebx
c001cfca:	c1 e9 14             	shr    ecx,0x14
c001cfcd:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001cfd3:	89 cf                	mov    edi,ecx
c001cfd5:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001cfdb:	78 33                	js     c001d010 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001cfdd:	89 d9                	mov    ecx,ebx
c001cfdf:	89 f0                	mov    eax,esi
c001cfe1:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001cfe7:	81 c9 00 00 10 00    	or     ecx,0x100000
c001cfed:	89 ca                	mov    edx,ecx
c001cfef:	b9 34 00 00 00       	mov    ecx,0x34
c001cff4:	29 f9                	sub    ecx,edi
c001cff6:	0f ad d0             	shrd   eax,edx,cl
c001cff9:	d3 fa                	sar    edx,cl
c001cffb:	f6 c1 20             	test   cl,0x20
c001cffe:	74 05                	je     c001d005 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001d000:	89 d0                	mov    eax,edx
c001d002:	c1 fa 1f             	sar    edx,0x1f
c001d005:	85 db                	test   ebx,ebx
c001d007:	79 07                	jns    c001d010 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001d009:	f7 d8                	neg    eax
c001d00b:	83 d2 00             	adc    edx,0x0
c001d00e:	f7 da                	neg    edx
c001d010:	5b                   	pop    ebx
c001d011:	5e                   	pop    esi
c001d012:	5f                   	pop    edi
c001d013:	c3                   	ret    

c001d014 <Vm::fpuULongToFloat(unsigned long long)>:
c001d014:	57                   	push   edi
c001d015:	31 c9                	xor    ecx,ecx
c001d017:	56                   	push   esi
c001d018:	53                   	push   ebx
c001d019:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d01d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d021:	0f ba e7 14          	bt     edi,0x14
c001d025:	72 07                	jb     c001d02e <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001d027:	01 f6                	add    esi,esi
c001d029:	11 ff                	adc    edi,edi
c001d02b:	41                   	inc    ecx
c001d02c:	eb f3                	jmp    c001d021 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001d02e:	89 fa                	mov    edx,edi
c001d030:	89 f0                	mov    eax,esi
c001d032:	bb 33 04 00 00       	mov    ebx,0x433
c001d037:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001d03d:	29 cb                	sub    ebx,ecx
c001d03f:	89 d9                	mov    ecx,ebx
c001d041:	5b                   	pop    ebx
c001d042:	c1 e1 14             	shl    ecx,0x14
c001d045:	5e                   	pop    esi
c001d046:	09 ca                	or     edx,ecx
c001d048:	5f                   	pop    edi
c001d049:	c3                   	ret    

c001d04a <Vm::fpuLongToFloat(long long)>:
c001d04a:	56                   	push   esi
c001d04b:	31 c0                	xor    eax,eax
c001d04d:	53                   	push   ebx
c001d04e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d052:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d056:	39 c8                	cmp    eax,ecx
c001d058:	19 d8                	sbb    eax,ebx
c001d05a:	7d 04                	jge    c001d060 <Vm::fpuLongToFloat(long long)+0x16>
c001d05c:	31 f6                	xor    esi,esi
c001d05e:	eb 0c                	jmp    c001d06c <Vm::fpuLongToFloat(long long)+0x22>
c001d060:	f7 d9                	neg    ecx
c001d062:	be 01 00 00 00       	mov    esi,0x1
c001d067:	83 d3 00             	adc    ebx,0x0
c001d06a:	f7 db                	neg    ebx
c001d06c:	31 c0                	xor    eax,eax
c001d06e:	0f ba e3 14          	bt     ebx,0x14
c001d072:	72 07                	jb     c001d07b <Vm::fpuLongToFloat(long long)+0x31>
c001d074:	01 c9                	add    ecx,ecx
c001d076:	11 db                	adc    ebx,ebx
c001d078:	40                   	inc    eax
c001d079:	eb f3                	jmp    c001d06e <Vm::fpuLongToFloat(long long)+0x24>
c001d07b:	ba 33 04 00 00       	mov    edx,0x433
c001d080:	29 c2                	sub    edx,eax
c001d082:	89 c8                	mov    eax,ecx
c001d084:	c1 e2 14             	shl    edx,0x14
c001d087:	89 d9                	mov    ecx,ebx
c001d089:	89 f3                	mov    ebx,esi
c001d08b:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001d091:	09 ca                	or     edx,ecx
c001d093:	84 db                	test   bl,bl
c001d095:	74 06                	je     c001d09d <Vm::fpuLongToFloat(long long)+0x53>
c001d097:	81 ca 00 00 00 80    	or     edx,0x80000000
c001d09d:	5b                   	pop    ebx
c001d09e:	5e                   	pop    esi
c001d09f:	c3                   	ret    

c001d0a0 <Vm::fpuGet0()>:
c001d0a0:	31 c0                	xor    eax,eax
c001d0a2:	31 d2                	xor    edx,edx
c001d0a4:	c3                   	ret    

c001d0a5 <Vm::fpuGet1()>:
c001d0a5:	b8 01 00 00 00       	mov    eax,0x1
c001d0aa:	31 d2                	xor    edx,edx
c001d0ac:	c3                   	ret    

c001d0ad <Vm::fpuGetPi()>:
c001d0ad:	b8 03 00 00 00       	mov    eax,0x3
c001d0b2:	31 d2                	xor    edx,edx
c001d0b4:	c3                   	ret    

c001d0b5 <Vm::fpuGetLog2E()>:
c001d0b5:	83 ec 18             	sub    esp,0x18
c001d0b8:	68 7c 8c 02 c0       	push   0xc0028c7c
c001d0bd:	e8 45 ba ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c001d0c2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d0c7:	31 d2                	xor    edx,edx
c001d0c9:	83 c4 1c             	add    esp,0x1c
c001d0cc:	c3                   	ret    

c001d0cd <Vm::fpuGetLogE2()>:
c001d0cd:	83 ec 18             	sub    esp,0x18
c001d0d0:	68 88 8c 02 c0       	push   0xc0028c88
c001d0d5:	e8 2d ba ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c001d0da:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d0df:	31 d2                	xor    edx,edx
c001d0e1:	83 c4 1c             	add    esp,0x1c
c001d0e4:	c3                   	ret    

c001d0e5 <Vm::fpuGetLog210()>:
c001d0e5:	83 ec 18             	sub    esp,0x18
c001d0e8:	68 94 8c 02 c0       	push   0xc0028c94
c001d0ed:	e8 15 ba ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c001d0f2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d0f7:	31 d2                	xor    edx,edx
c001d0f9:	83 c4 1c             	add    esp,0x1c
c001d0fc:	c3                   	ret    

c001d0fd <Vm::fpuGetLog102()>:
c001d0fd:	83 ec 18             	sub    esp,0x18
c001d100:	68 a1 8c 02 c0       	push   0xc0028ca1
c001d105:	e8 fd b9 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c001d10a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d10f:	31 d2                	xor    edx,edx
c001d111:	83 c4 1c             	add    esp,0x1c
c001d114:	c3                   	ret    

c001d115 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001d115:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d119:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001d11d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d121:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001d125:	0f 92 c0             	setb   al
c001d128:	c3                   	ret    

c001d129 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001d129:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d12d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d131:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001d135:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001d139:	09 c2                	or     edx,eax
c001d13b:	0f 94 c0             	sete   al
c001d13e:	c3                   	ret    

c001d13f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001d13f:	57                   	push   edi
c001d140:	56                   	push   esi
c001d141:	53                   	push   ebx
c001d142:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d146:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d14a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d14e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d152:	57                   	push   edi
c001d153:	56                   	push   esi
c001d154:	53                   	push   ebx
c001d155:	51                   	push   ecx
c001d156:	e8 ce ff ff ff       	call   c001d129 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001d15b:	83 c4 10             	add    esp,0x10
c001d15e:	88 c2                	mov    dl,al
c001d160:	31 c0                	xor    eax,eax
c001d162:	84 d2                	test   dl,dl
c001d164:	75 0c                	jne    c001d172 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001d166:	57                   	push   edi
c001d167:	56                   	push   esi
c001d168:	53                   	push   ebx
c001d169:	51                   	push   ecx
c001d16a:	e8 a6 ff ff ff       	call   c001d115 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001d16f:	83 c4 10             	add    esp,0x10
c001d172:	83 e0 01             	and    eax,0x1
c001d175:	5b                   	pop    ebx
c001d176:	88 c1                	mov    cl,al
c001d178:	83 e2 01             	and    edx,0x1
c001d17b:	a0 c1 bb 02 c0       	mov    al,ds:0xc002bbc1
c001d180:	c1 e2 06             	shl    edx,0x6
c001d183:	83 e0 ba             	and    eax,0xffffffba
c001d186:	5e                   	pop    esi
c001d187:	09 c8                	or     eax,ecx
c001d189:	5f                   	pop    edi
c001d18a:	09 d0                	or     eax,edx
c001d18c:	a2 c1 bb 02 c0       	mov    ds:0xc002bbc1,al
c001d191:	c3                   	ret    

c001d192 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001d192:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d196:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d19a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d19e:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001d1a2:	c3                   	ret    

c001d1a3 <Vm::fpuAbs(unsigned long long)>:
c001d1a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d1ab:	c3                   	ret    

c001d1ac <Vm::fpuChs(unsigned long long)>:
c001d1ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d1b4:	f7 d8                	neg    eax
c001d1b6:	83 d2 00             	adc    edx,0x0
c001d1b9:	f7 da                	neg    edx
c001d1bb:	c3                   	ret    

c001d1bc <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001d1bc:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001d1c0:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001d1c5:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001d1c9:	eb c7                	jmp    c001d192 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001d1cb <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001d1cb:	53                   	push   ebx
c001d1cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d1d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d1d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d1d8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d1dc:	0f af ca             	imul   ecx,edx
c001d1df:	0f af d8             	imul   ebx,eax
c001d1e2:	f7 e2                	mul    edx
c001d1e4:	01 d9                	add    ecx,ebx
c001d1e6:	5b                   	pop    ebx
c001d1e7:	01 ca                	add    edx,ecx
c001d1e9:	c3                   	ret    

c001d1ea <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001d1ea:	83 ec 0c             	sub    esp,0xc
c001d1ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1fd:	e8 9a 63 00 00       	call   c002359c <__udivdi3>
c001d202:	83 c4 1c             	add    esp,0x1c
c001d205:	c3                   	ret    

c001d206 <Vm::fpuSquare(unsigned long long)>:
c001d206:	50                   	push   eax
c001d207:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d20b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d20f:	52                   	push   edx
c001d210:	50                   	push   eax
c001d211:	52                   	push   edx
c001d212:	50                   	push   eax
c001d213:	e8 b3 ff ff ff       	call   c001d1cb <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d218:	83 c4 14             	add    esp,0x14
c001d21b:	c3                   	ret    

c001d21c <Vm::fpuGetReg(int)>:
c001d21c:	83 ec 0c             	sub    esp,0xc
c001d21f:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001d224:	76 10                	jbe    c001d236 <Vm::fpuGetReg(int)+0x1a>
c001d226:	83 ec 0c             	sub    esp,0xc
c001d229:	68 ae 8c 02 c0       	push   0xc0028cae
c001d22e:	e8 d4 b8 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c001d233:	83 c4 10             	add    esp,0x10
c001d236:	a0 c1 bb 02 c0       	mov    al,ds:0xc002bbc1
c001d23b:	b9 08 00 00 00       	mov    ecx,0x8
c001d240:	c0 e8 03             	shr    al,0x3
c001d243:	83 e0 07             	and    eax,0x7
c001d246:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d24a:	99                   	cdq    
c001d24b:	f7 f9                	idiv   ecx
c001d24d:	8b 04 d5 c4 bb 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd443c]
c001d254:	8b 14 d5 c8 bb 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd4438]
c001d25b:	83 c4 0c             	add    esp,0xc
c001d25e:	c3                   	ret    

c001d25f <Vm::fpuSetReg(int, unsigned long long)>:
c001d25f:	57                   	push   edi
c001d260:	56                   	push   esi
c001d261:	52                   	push   edx
c001d262:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d266:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001d26a:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001d26f:	76 10                	jbe    c001d281 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001d271:	83 ec 0c             	sub    esp,0xc
c001d274:	68 c1 8c 02 c0       	push   0xc0028cc1
c001d279:	e8 89 b8 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c001d27e:	83 c4 10             	add    esp,0x10
c001d281:	a0 c1 bb 02 c0       	mov    al,ds:0xc002bbc1
c001d286:	b9 08 00 00 00       	mov    ecx,0x8
c001d28b:	c0 e8 03             	shr    al,0x3
c001d28e:	83 e0 07             	and    eax,0x7
c001d291:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d295:	99                   	cdq    
c001d296:	f7 f9                	idiv   ecx
c001d298:	89 34 d5 c4 bb 02 c0 	mov    DWORD PTR [edx*8-0x3ffd443c],esi
c001d29f:	89 3c d5 c8 bb 02 c0 	mov    DWORD PTR [edx*8-0x3ffd4438],edi
c001d2a6:	58                   	pop    eax
c001d2a7:	5e                   	pop    esi
c001d2a8:	5f                   	pop    edi
c001d2a9:	c3                   	ret    

c001d2aa <Vm::fpuPush(unsigned long long)>:
c001d2aa:	a0 c1 bb 02 c0       	mov    al,ds:0xc002bbc1
c001d2af:	c0 e8 03             	shr    al,0x3
c001d2b2:	83 e0 07             	and    eax,0x7
c001d2b5:	83 c0 07             	add    eax,0x7
c001d2b8:	88 c2                	mov    dl,al
c001d2ba:	83 e0 07             	and    eax,0x7
c001d2bd:	83 e2 07             	and    edx,0x7
c001d2c0:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001d2c7:	8a 15 c1 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbc1
c001d2cd:	83 e2 c7             	and    edx,0xffffffc7
c001d2d0:	09 ca                	or     edx,ecx
c001d2d2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d2d6:	88 15 c1 bb 02 c0    	mov    BYTE PTR ds:0xc002bbc1,dl
c001d2dc:	89 0c c5 c8 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd4438],ecx
c001d2e3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d2e7:	89 14 c5 c4 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd443c],edx
c001d2ee:	a1 04 bc 02 c0       	mov    eax,ds:0xc002bc04
c001d2f3:	83 f8 08             	cmp    eax,0x8
c001d2f6:	75 08                	jne    c001d300 <Vm::fpuPush(unsigned long long)+0x56>
c001d2f8:	80 0d c0 bb 02 c0 40 	or     BYTE PTR ds:0xc002bbc0,0x40
c001d2ff:	c3                   	ret    
c001d300:	40                   	inc    eax
c001d301:	a3 04 bc 02 c0       	mov    ds:0xc002bc04,eax
c001d306:	c3                   	ret    

c001d307 <Vm::fpuPop()>:
c001d307:	8a 0d c1 bb 02 c0    	mov    cl,BYTE PTR ds:0xc002bbc1
c001d30d:	53                   	push   ebx
c001d30e:	c0 e9 03             	shr    cl,0x3
c001d311:	8a 1d c1 bb 02 c0    	mov    bl,BYTE PTR ds:0xc002bbc1
c001d317:	83 e1 07             	and    ecx,0x7
c001d31a:	83 e3 c7             	and    ebx,0xffffffc7
c001d31d:	8b 04 cd c4 bb 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd443c]
c001d324:	8b 14 cd c8 bb 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd4438]
c001d32b:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001d332:	83 e1 38             	and    ecx,0x38
c001d335:	09 d9                	or     ecx,ebx
c001d337:	88 0d c1 bb 02 c0    	mov    BYTE PTR ds:0xc002bbc1,cl
c001d33d:	8b 0d 04 bc 02 c0    	mov    ecx,DWORD PTR ds:0xc002bc04
c001d343:	85 c9                	test   ecx,ecx
c001d345:	74 09                	je     c001d350 <Vm::fpuPop()+0x49>
c001d347:	49                   	dec    ecx
c001d348:	89 0d 04 bc 02 c0    	mov    DWORD PTR ds:0xc002bc04,ecx
c001d34e:	eb 07                	jmp    c001d357 <Vm::fpuPop()+0x50>
c001d350:	80 0d c0 bb 02 c0 40 	or     BYTE PTR ds:0xc002bbc0,0x40
c001d357:	5b                   	pop    ebx
c001d358:	c3                   	ret    

c001d359 <Vm::x87Handler(regs*)>:
c001d359:	55                   	push   ebp
c001d35a:	57                   	push   edi
c001d35b:	56                   	push   esi
c001d35c:	53                   	push   ebx
c001d35d:	83 ec 1c             	sub    esp,0x1c
c001d360:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d364:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001d369:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001d36c:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001d374:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001d378:	50                   	push   eax
c001d379:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001d37d:	50                   	push   eax
c001d37e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d382:	50                   	push   eax
c001d383:	53                   	push   ebx
c001d384:	e8 83 b5 ff ff       	call   c001890c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001d389:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001d38c:	83 c4 10             	add    esp,0x10
c001d38f:	89 c6                	mov    esi,eax
c001d391:	80 fa d9             	cmp    dl,0xd9
c001d394:	0f 85 52 01 00 00    	jne    c001d4ec <Vm::x87Handler(regs*)+0x193>
c001d39a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d39e:	8d 50 20             	lea    edx,[eax+0x20]
c001d3a1:	80 fa 0e             	cmp    dl,0xe
c001d3a4:	0f 87 86 00 00 00    	ja     c001d430 <Vm::x87Handler(regs*)+0xd7>
c001d3aa:	0f b6 d2             	movzx  edx,dl
c001d3ad:	ff 24 95 d4 8c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd732c]
c001d3b4:	e8 e7 fc ff ff       	call   c001d0a0 <Vm::fpuGet0()>
c001d3b9:	eb 05                	jmp    c001d3c0 <Vm::x87Handler(regs*)+0x67>
c001d3bb:	e8 e5 fc ff ff       	call   c001d0a5 <Vm::fpuGet1()>
c001d3c0:	57                   	push   edi
c001d3c1:	57                   	push   edi
c001d3c2:	52                   	push   edx
c001d3c3:	50                   	push   eax
c001d3c4:	e8 e1 fe ff ff       	call   c001d2aa <Vm::fpuPush(unsigned long long)>
c001d3c9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d3cd:	83 c4 10             	add    esp,0x10
c001d3d0:	b0 01                	mov    al,0x1
c001d3d2:	e9 e3 09 00 00       	jmp    c001ddba <Vm::x87Handler(regs*)+0xa61>
c001d3d7:	83 ec 0c             	sub    esp,0xc
c001d3da:	6a 00                	push   0x0
c001d3dc:	e8 3b fe ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d3e1:	59                   	pop    ecx
c001d3e2:	5e                   	pop    esi
c001d3e3:	52                   	push   edx
c001d3e4:	50                   	push   eax
c001d3e5:	e8 c2 fd ff ff       	call   c001d1ac <Vm::fpuChs(unsigned long long)>
c001d3ea:	eb 13                	jmp    c001d3ff <Vm::x87Handler(regs*)+0xa6>
c001d3ec:	83 ec 0c             	sub    esp,0xc
c001d3ef:	6a 00                	push   0x0
c001d3f1:	e8 26 fe ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d3f6:	5f                   	pop    edi
c001d3f7:	5d                   	pop    ebp
c001d3f8:	52                   	push   edx
c001d3f9:	50                   	push   eax
c001d3fa:	e8 a4 fd ff ff       	call   c001d1a3 <Vm::fpuAbs(unsigned long long)>
c001d3ff:	83 c4 0c             	add    esp,0xc
c001d402:	52                   	push   edx
c001d403:	50                   	push   eax
c001d404:	6a 00                	push   0x0
c001d406:	e8 54 fe ff ff       	call   c001d25f <Vm::fpuSetReg(int, unsigned long long)>
c001d40b:	eb bc                	jmp    c001d3c9 <Vm::x87Handler(regs*)+0x70>
c001d40d:	e8 d3 fc ff ff       	call   c001d0e5 <Vm::fpuGetLog210()>
c001d412:	eb ac                	jmp    c001d3c0 <Vm::x87Handler(regs*)+0x67>
c001d414:	e8 9c fc ff ff       	call   c001d0b5 <Vm::fpuGetLog2E()>
c001d419:	eb a5                	jmp    c001d3c0 <Vm::x87Handler(regs*)+0x67>
c001d41b:	e8 8d fc ff ff       	call   c001d0ad <Vm::fpuGetPi()>
c001d420:	eb 9e                	jmp    c001d3c0 <Vm::x87Handler(regs*)+0x67>
c001d422:	e8 d6 fc ff ff       	call   c001d0fd <Vm::fpuGetLog102()>
c001d427:	eb 97                	jmp    c001d3c0 <Vm::x87Handler(regs*)+0x67>
c001d429:	e8 9f fc ff ff       	call   c001d0cd <Vm::fpuGetLogE2()>
c001d42e:	eb 90                	jmp    c001d3c0 <Vm::x87Handler(regs*)+0x67>
c001d430:	8d 50 40             	lea    edx,[eax+0x40]
c001d433:	80 fa 07             	cmp    dl,0x7
c001d436:	77 15                	ja     c001d44d <Vm::x87Handler(regs*)+0xf4>
c001d438:	83 ec 0c             	sub    esp,0xc
c001d43b:	2d c0 00 00 00       	sub    eax,0xc0
c001d440:	50                   	push   eax
c001d441:	e8 d6 fd ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d446:	59                   	pop    ecx
c001d447:	5e                   	pop    esi
c001d448:	e9 75 ff ff ff       	jmp    c001d3c2 <Vm::x87Handler(regs*)+0x69>
c001d44d:	8d 50 38             	lea    edx,[eax+0x38]
c001d450:	80 fa 07             	cmp    dl,0x7
c001d453:	77 3c                	ja     c001d491 <Vm::x87Handler(regs*)+0x138>
c001d455:	83 ec 0c             	sub    esp,0xc
c001d458:	2d c8 00 00 00       	sub    eax,0xc8
c001d45d:	50                   	push   eax
c001d45e:	e8 b9 fd ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d463:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d46a:	89 c6                	mov    esi,eax
c001d46c:	89 d7                	mov    edi,edx
c001d46e:	e8 a9 fd ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d473:	83 c4 0c             	add    esp,0xc
c001d476:	52                   	push   edx
c001d477:	50                   	push   eax
c001d478:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d47c:	2d c8 00 00 00       	sub    eax,0xc8
c001d481:	50                   	push   eax
c001d482:	e8 d8 fd ff ff       	call   c001d25f <Vm::fpuSetReg(int, unsigned long long)>
c001d487:	83 c4 0c             	add    esp,0xc
c001d48a:	57                   	push   edi
c001d48b:	56                   	push   esi
c001d48c:	e9 73 ff ff ff       	jmp    c001d404 <Vm::x87Handler(regs*)+0xab>
c001d491:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d495:	84 d2                	test   dl,dl
c001d497:	75 0f                	jne    c001d4a8 <Vm::x87Handler(regs*)+0x14f>
c001d499:	83 ec 0c             	sub    esp,0xc
c001d49c:	ff 36                	push   DWORD PTR [esi]
c001d49e:	e8 c8 fa ff ff       	call   c001cf6b <Vm::fpu32ToInternal(unsigned int)>
c001d4a3:	e9 bf 00 00 00       	jmp    c001d567 <Vm::x87Handler(regs*)+0x20e>
c001d4a8:	80 fa 03             	cmp    dl,0x3
c001d4ab:	75 13                	jne    c001d4c0 <Vm::x87Handler(regs*)+0x167>
c001d4ad:	e8 55 fe ff ff       	call   c001d307 <Vm::fpuPop()>
c001d4b2:	55                   	push   ebp
c001d4b3:	55                   	push   ebp
c001d4b4:	52                   	push   edx
c001d4b5:	50                   	push   eax
c001d4b6:	e8 4c fa ff ff       	call   c001cf07 <Vm::fpuInternalTo32(unsigned long long)>
c001d4bb:	e9 88 00 00 00       	jmp    c001d548 <Vm::x87Handler(regs*)+0x1ef>
c001d4c0:	80 fa 05             	cmp    dl,0x5
c001d4c3:	75 0e                	jne    c001d4d3 <Vm::x87Handler(regs*)+0x17a>
c001d4c5:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d4c8:	66 a3 c2 bb 02 c0    	mov    ds:0xc002bbc2,ax
c001d4ce:	e9 df 00 00 00       	jmp    c001d5b2 <Vm::x87Handler(regs*)+0x259>
c001d4d3:	31 c0                	xor    eax,eax
c001d4d5:	80 fa 07             	cmp    dl,0x7
c001d4d8:	0f 85 dc 08 00 00    	jne    c001ddba <Vm::x87Handler(regs*)+0xa61>
c001d4de:	66 a1 c2 bb 02 c0    	mov    ax,ds:0xc002bbc2
c001d4e4:	66 89 06             	mov    WORD PTR [esi],ax
c001d4e7:	e9 c6 00 00 00       	jmp    c001d5b2 <Vm::x87Handler(regs*)+0x259>
c001d4ec:	80 fa d8             	cmp    dl,0xd8
c001d4ef:	0f 84 c9 00 00 00    	je     c001d5be <Vm::x87Handler(regs*)+0x265>
c001d4f5:	80 fa dc             	cmp    dl,0xdc
c001d4f8:	0f 84 0d 02 00 00    	je     c001d70b <Vm::x87Handler(regs*)+0x3b2>
c001d4fe:	80 fa de             	cmp    dl,0xde
c001d501:	0f 84 cd 02 00 00    	je     c001d7d4 <Vm::x87Handler(regs*)+0x47b>
c001d507:	80 fa dd             	cmp    dl,0xdd
c001d50a:	0f 84 5f 04 00 00    	je     c001d96f <Vm::x87Handler(regs*)+0x616>
c001d510:	80 fa da             	cmp    dl,0xda
c001d513:	0f 84 24 05 00 00    	je     c001da3d <Vm::x87Handler(regs*)+0x6e4>
c001d519:	80 fa df             	cmp    dl,0xdf
c001d51c:	0f 84 68 05 00 00    	je     c001da8a <Vm::x87Handler(regs*)+0x731>
c001d522:	31 c0                	xor    eax,eax
c001d524:	80 fa db             	cmp    dl,0xdb
c001d527:	0f 85 8d 08 00 00    	jne    c001ddba <Vm::x87Handler(regs*)+0xa61>
c001d52d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d531:	80 fa 03             	cmp    dl,0x3
c001d534:	0f 85 70 06 00 00    	jne    c001dbaa <Vm::x87Handler(regs*)+0x851>
c001d53a:	e8 c8 fd ff ff       	call   c001d307 <Vm::fpuPop()>
c001d53f:	55                   	push   ebp
c001d540:	55                   	push   ebp
c001d541:	52                   	push   edx
c001d542:	50                   	push   eax
c001d543:	e8 71 fa ff ff       	call   c001cfb9 <Vm::fpuFloatToLong(unsigned long long)>
c001d548:	83 c4 10             	add    esp,0x10
c001d54b:	89 06                	mov    DWORD PTR [esi],eax
c001d54d:	eb 63                	jmp    c001d5b2 <Vm::x87Handler(regs*)+0x259>
c001d54f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d553:	84 d2                	test   dl,dl
c001d555:	0f 85 e6 05 00 00    	jne    c001db41 <Vm::x87Handler(regs*)+0x7e8>
c001d55b:	57                   	push   edi
c001d55c:	57                   	push   edi
c001d55d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001d560:	ff 36                	push   DWORD PTR [esi]
c001d562:	e8 49 fa ff ff       	call   c001cfb0 <Vm::fpu64ToInternal(unsigned long long)>
c001d567:	5e                   	pop    esi
c001d568:	5f                   	pop    edi
c001d569:	52                   	push   edx
c001d56a:	50                   	push   eax
c001d56b:	e8 3a fd ff ff       	call   c001d2aa <Vm::fpuPush(unsigned long long)>
c001d570:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d574:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001d577:	e9 51 fe ff ff       	jmp    c001d3cd <Vm::x87Handler(regs*)+0x74>
c001d57c:	80 fa 03             	cmp    dl,0x3
c001d57f:	0f 85 d7 06 00 00    	jne    c001dc5c <Vm::x87Handler(regs*)+0x903>
c001d585:	57                   	push   edi
c001d586:	57                   	push   edi
c001d587:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001d58a:	ff 36                	push   DWORD PTR [esi]
c001d58c:	e8 1f fa ff ff       	call   c001cfb0 <Vm::fpu64ToInternal(unsigned long long)>
c001d591:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d598:	89 c6                	mov    esi,eax
c001d59a:	89 d7                	mov    edi,edx
c001d59c:	e8 7b fc ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d5a1:	57                   	push   edi
c001d5a2:	56                   	push   esi
c001d5a3:	52                   	push   edx
c001d5a4:	50                   	push   eax
c001d5a5:	e8 95 fb ff ff       	call   c001d13f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d5aa:	83 c4 20             	add    esp,0x20
c001d5ad:	e8 55 fd ff ff       	call   c001d307 <Vm::fpuPop()>
c001d5b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d5b6:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001d5b9:	e9 12 fe ff ff       	jmp    c001d3d0 <Vm::x87Handler(regs*)+0x77>
c001d5be:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d5c2:	8d 50 40             	lea    edx,[eax+0x40]
c001d5c5:	80 fa 07             	cmp    dl,0x7
c001d5c8:	77 29                	ja     c001d5f3 <Vm::x87Handler(regs*)+0x29a>
c001d5ca:	83 ec 0c             	sub    esp,0xc
c001d5cd:	2d c0 00 00 00       	sub    eax,0xc0
c001d5d2:	50                   	push   eax
c001d5d3:	e8 44 fc ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d5d8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d5df:	89 c6                	mov    esi,eax
c001d5e1:	89 d7                	mov    edi,edx
c001d5e3:	e8 34 fc ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d5e8:	57                   	push   edi
c001d5e9:	56                   	push   esi
c001d5ea:	52                   	push   edx
c001d5eb:	50                   	push   eax
c001d5ec:	e8 a1 fb ff ff       	call   c001d192 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d5f1:	eb 2f                	jmp    c001d622 <Vm::x87Handler(regs*)+0x2c9>
c001d5f3:	8d 50 38             	lea    edx,[eax+0x38]
c001d5f6:	80 fa 07             	cmp    dl,0x7
c001d5f9:	77 2f                	ja     c001d62a <Vm::x87Handler(regs*)+0x2d1>
c001d5fb:	83 ec 0c             	sub    esp,0xc
c001d5fe:	2d c8 00 00 00       	sub    eax,0xc8
c001d603:	50                   	push   eax
c001d604:	e8 13 fc ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d609:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d610:	89 c6                	mov    esi,eax
c001d612:	89 d7                	mov    edi,edx
c001d614:	e8 03 fc ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d619:	57                   	push   edi
c001d61a:	56                   	push   esi
c001d61b:	52                   	push   edx
c001d61c:	50                   	push   eax
c001d61d:	e8 a9 fb ff ff       	call   c001d1cb <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d622:	83 c4 1c             	add    esp,0x1c
c001d625:	e9 d8 fd ff ff       	jmp    c001d402 <Vm::x87Handler(regs*)+0xa9>
c001d62a:	8d 50 30             	lea    edx,[eax+0x30]
c001d62d:	80 fa 07             	cmp    dl,0x7
c001d630:	77 0d                	ja     c001d63f <Vm::x87Handler(regs*)+0x2e6>
c001d632:	83 ec 0c             	sub    esp,0xc
c001d635:	2d d0 00 00 00       	sub    eax,0xd0
c001d63a:	e9 99 03 00 00       	jmp    c001d9d8 <Vm::x87Handler(regs*)+0x67f>
c001d63f:	8d 50 28             	lea    edx,[eax+0x28]
c001d642:	80 fa 07             	cmp    dl,0x7
c001d645:	77 0d                	ja     c001d654 <Vm::x87Handler(regs*)+0x2fb>
c001d647:	83 ec 0c             	sub    esp,0xc
c001d64a:	2d d8 00 00 00       	sub    eax,0xd8
c001d64f:	e9 c0 03 00 00       	jmp    c001da14 <Vm::x87Handler(regs*)+0x6bb>
c001d654:	8d 50 20             	lea    edx,[eax+0x20]
c001d657:	80 fa 07             	cmp    dl,0x7
c001d65a:	77 1b                	ja     c001d677 <Vm::x87Handler(regs*)+0x31e>
c001d65c:	83 ec 0c             	sub    esp,0xc
c001d65f:	2d e0 00 00 00       	sub    eax,0xe0
c001d664:	50                   	push   eax
c001d665:	e8 b2 fb ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d66a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d671:	89 c6                	mov    esi,eax
c001d673:	89 d7                	mov    edi,edx
c001d675:	eb 22                	jmp    c001d699 <Vm::x87Handler(regs*)+0x340>
c001d677:	8d 50 18             	lea    edx,[eax+0x18]
c001d67a:	80 fa 07             	cmp    dl,0x7
c001d67d:	77 2d                	ja     c001d6ac <Vm::x87Handler(regs*)+0x353>
c001d67f:	83 ec 0c             	sub    esp,0xc
c001d682:	6a 00                	push   0x0
c001d684:	e8 93 fb ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d689:	89 c6                	mov    esi,eax
c001d68b:	89 d7                	mov    edi,edx
c001d68d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d691:	2d e8 00 00 00       	sub    eax,0xe8
c001d696:	89 04 24             	mov    DWORD PTR [esp],eax
c001d699:	e8 7e fb ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d69e:	57                   	push   edi
c001d69f:	56                   	push   esi
c001d6a0:	52                   	push   edx
c001d6a1:	50                   	push   eax
c001d6a2:	e8 15 fb ff ff       	call   c001d1bc <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d6a7:	e9 76 ff ff ff       	jmp    c001d622 <Vm::x87Handler(regs*)+0x2c9>
c001d6ac:	8d 50 10             	lea    edx,[eax+0x10]
c001d6af:	80 fa 07             	cmp    dl,0x7
c001d6b2:	77 1b                	ja     c001d6cf <Vm::x87Handler(regs*)+0x376>
c001d6b4:	83 ec 0c             	sub    esp,0xc
c001d6b7:	2d f0 00 00 00       	sub    eax,0xf0
c001d6bc:	50                   	push   eax
c001d6bd:	e8 5a fb ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d6c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d6c9:	89 c6                	mov    esi,eax
c001d6cb:	89 d7                	mov    edi,edx
c001d6cd:	eb 22                	jmp    c001d6f1 <Vm::x87Handler(regs*)+0x398>
c001d6cf:	3c f7                	cmp    al,0xf7
c001d6d1:	0f 86 d1 03 00 00    	jbe    c001daa8 <Vm::x87Handler(regs*)+0x74f>
c001d6d7:	83 ec 0c             	sub    esp,0xc
c001d6da:	6a 00                	push   0x0
c001d6dc:	e8 3b fb ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d6e1:	89 c6                	mov    esi,eax
c001d6e3:	89 d7                	mov    edi,edx
c001d6e5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d6e9:	2d f8 00 00 00       	sub    eax,0xf8
c001d6ee:	89 04 24             	mov    DWORD PTR [esp],eax
c001d6f1:	e8 26 fb ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d6f6:	57                   	push   edi
c001d6f7:	56                   	push   esi
c001d6f8:	52                   	push   edx
c001d6f9:	50                   	push   eax
c001d6fa:	e8 eb fa ff ff       	call   c001d1ea <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001d6ff:	83 c4 1c             	add    esp,0x1c
c001d702:	52                   	push   edx
c001d703:	50                   	push   eax
c001d704:	6a 00                	push   0x0
c001d706:	e9 51 02 00 00       	jmp    c001d95c <Vm::x87Handler(regs*)+0x603>
c001d70b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d70f:	8d 50 40             	lea    edx,[eax+0x40]
c001d712:	80 fa 07             	cmp    dl,0x7
c001d715:	77 37                	ja     c001d74e <Vm::x87Handler(regs*)+0x3f5>
c001d717:	83 ec 0c             	sub    esp,0xc
c001d71a:	2d c0 00 00 00       	sub    eax,0xc0
c001d71f:	50                   	push   eax
c001d720:	e8 f7 fa ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d725:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d72c:	89 c6                	mov    esi,eax
c001d72e:	89 d7                	mov    edi,edx
c001d730:	e8 e7 fa ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d735:	57                   	push   edi
c001d736:	56                   	push   esi
c001d737:	52                   	push   edx
c001d738:	50                   	push   eax
c001d739:	e8 54 fa ff ff       	call   c001d192 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d73e:	83 c4 1c             	add    esp,0x1c
c001d741:	52                   	push   edx
c001d742:	50                   	push   eax
c001d743:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d747:	2d c0 00 00 00       	sub    eax,0xc0
c001d74c:	eb 3d                	jmp    c001d78b <Vm::x87Handler(regs*)+0x432>
c001d74e:	8d 50 38             	lea    edx,[eax+0x38]
c001d751:	80 fa 07             	cmp    dl,0x7
c001d754:	77 3b                	ja     c001d791 <Vm::x87Handler(regs*)+0x438>
c001d756:	83 ec 0c             	sub    esp,0xc
c001d759:	2d c8 00 00 00       	sub    eax,0xc8
c001d75e:	50                   	push   eax
c001d75f:	e8 b8 fa ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d764:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d76b:	89 c6                	mov    esi,eax
c001d76d:	89 d7                	mov    edi,edx
c001d76f:	e8 a8 fa ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d774:	57                   	push   edi
c001d775:	56                   	push   esi
c001d776:	52                   	push   edx
c001d777:	50                   	push   eax
c001d778:	e8 4e fa ff ff       	call   c001d1cb <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d77d:	83 c4 1c             	add    esp,0x1c
c001d780:	52                   	push   edx
c001d781:	50                   	push   eax
c001d782:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d786:	2d c8 00 00 00       	sub    eax,0xc8
c001d78b:	50                   	push   eax
c001d78c:	e9 75 fc ff ff       	jmp    c001d406 <Vm::x87Handler(regs*)+0xad>
c001d791:	83 c0 18             	add    eax,0x18
c001d794:	3c 07                	cmp    al,0x7
c001d796:	0f 87 3b 04 00 00    	ja     c001dbd7 <Vm::x87Handler(regs*)+0x87e>
c001d79c:	83 ec 0c             	sub    esp,0xc
c001d79f:	6a 00                	push   0x0
c001d7a1:	e8 76 fa ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d7a6:	89 c6                	mov    esi,eax
c001d7a8:	89 d7                	mov    edi,edx
c001d7aa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d7ae:	2d e8 00 00 00       	sub    eax,0xe8
c001d7b3:	89 04 24             	mov    DWORD PTR [esp],eax
c001d7b6:	e8 61 fa ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d7bb:	57                   	push   edi
c001d7bc:	56                   	push   esi
c001d7bd:	52                   	push   edx
c001d7be:	50                   	push   eax
c001d7bf:	e8 f8 f9 ff ff       	call   c001d1bc <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d7c4:	83 c4 1c             	add    esp,0x1c
c001d7c7:	52                   	push   edx
c001d7c8:	50                   	push   eax
c001d7c9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d7cd:	2d e8 00 00 00       	sub    eax,0xe8
c001d7d2:	eb b7                	jmp    c001d78b <Vm::x87Handler(regs*)+0x432>
c001d7d4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d7d8:	8d 50 40             	lea    edx,[eax+0x40]
c001d7db:	80 fa 07             	cmp    dl,0x7
c001d7de:	77 3a                	ja     c001d81a <Vm::x87Handler(regs*)+0x4c1>
c001d7e0:	83 ec 0c             	sub    esp,0xc
c001d7e3:	2d c0 00 00 00       	sub    eax,0xc0
c001d7e8:	50                   	push   eax
c001d7e9:	e8 2e fa ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d7ee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d7f5:	89 c6                	mov    esi,eax
c001d7f7:	89 d7                	mov    edi,edx
c001d7f9:	e8 1e fa ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d7fe:	57                   	push   edi
c001d7ff:	56                   	push   esi
c001d800:	52                   	push   edx
c001d801:	50                   	push   eax
c001d802:	e8 8b f9 ff ff       	call   c001d192 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d807:	83 c4 1c             	add    esp,0x1c
c001d80a:	52                   	push   edx
c001d80b:	50                   	push   eax
c001d80c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d810:	2d c0 00 00 00       	sub    eax,0xc0
c001d815:	e9 9e 01 00 00       	jmp    c001d9b8 <Vm::x87Handler(regs*)+0x65f>
c001d81a:	8d 50 20             	lea    edx,[eax+0x20]
c001d81d:	80 fa 07             	cmp    dl,0x7
c001d820:	77 3a                	ja     c001d85c <Vm::x87Handler(regs*)+0x503>
c001d822:	83 ec 0c             	sub    esp,0xc
c001d825:	2d e0 00 00 00       	sub    eax,0xe0
c001d82a:	50                   	push   eax
c001d82b:	e8 ec f9 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d830:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d837:	89 c6                	mov    esi,eax
c001d839:	89 d7                	mov    edi,edx
c001d83b:	e8 dc f9 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d840:	57                   	push   edi
c001d841:	56                   	push   esi
c001d842:	52                   	push   edx
c001d843:	50                   	push   eax
c001d844:	e8 73 f9 ff ff       	call   c001d1bc <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d849:	83 c4 1c             	add    esp,0x1c
c001d84c:	52                   	push   edx
c001d84d:	50                   	push   eax
c001d84e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d852:	2d e0 00 00 00       	sub    eax,0xe0
c001d857:	e9 5c 01 00 00       	jmp    c001d9b8 <Vm::x87Handler(regs*)+0x65f>
c001d85c:	8d 50 18             	lea    edx,[eax+0x18]
c001d85f:	80 fa 07             	cmp    dl,0x7
c001d862:	77 3b                	ja     c001d89f <Vm::x87Handler(regs*)+0x546>
c001d864:	83 ec 0c             	sub    esp,0xc
c001d867:	6a 00                	push   0x0
c001d869:	e8 ae f9 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d86e:	89 c6                	mov    esi,eax
c001d870:	89 d7                	mov    edi,edx
c001d872:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d876:	2d e8 00 00 00       	sub    eax,0xe8
c001d87b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d87e:	e8 99 f9 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d883:	57                   	push   edi
c001d884:	56                   	push   esi
c001d885:	52                   	push   edx
c001d886:	50                   	push   eax
c001d887:	e8 30 f9 ff ff       	call   c001d1bc <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d88c:	83 c4 1c             	add    esp,0x1c
c001d88f:	52                   	push   edx
c001d890:	50                   	push   eax
c001d891:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d895:	2d e8 00 00 00       	sub    eax,0xe8
c001d89a:	e9 19 01 00 00       	jmp    c001d9b8 <Vm::x87Handler(regs*)+0x65f>
c001d89f:	8d 50 38             	lea    edx,[eax+0x38]
c001d8a2:	80 fa 07             	cmp    dl,0x7
c001d8a5:	77 37                	ja     c001d8de <Vm::x87Handler(regs*)+0x585>
c001d8a7:	83 ec 0c             	sub    esp,0xc
c001d8aa:	2d c8 00 00 00       	sub    eax,0xc8
c001d8af:	50                   	push   eax
c001d8b0:	e8 67 f9 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d8b5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d8bc:	89 c6                	mov    esi,eax
c001d8be:	89 d7                	mov    edi,edx
c001d8c0:	e8 57 f9 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d8c5:	57                   	push   edi
c001d8c6:	56                   	push   esi
c001d8c7:	52                   	push   edx
c001d8c8:	50                   	push   eax
c001d8c9:	e8 fd f8 ff ff       	call   c001d1cb <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d8ce:	83 c4 1c             	add    esp,0x1c
c001d8d1:	52                   	push   edx
c001d8d2:	50                   	push   eax
c001d8d3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d8d7:	2d c8 00 00 00       	sub    eax,0xc8
c001d8dc:	eb 7d                	jmp    c001d95b <Vm::x87Handler(regs*)+0x602>
c001d8de:	3c f7                	cmp    al,0xf7
c001d8e0:	76 38                	jbe    c001d91a <Vm::x87Handler(regs*)+0x5c1>
c001d8e2:	83 ec 0c             	sub    esp,0xc
c001d8e5:	6a 00                	push   0x0
c001d8e7:	e8 30 f9 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d8ec:	89 c6                	mov    esi,eax
c001d8ee:	89 d7                	mov    edi,edx
c001d8f0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d8f4:	2d f8 00 00 00       	sub    eax,0xf8
c001d8f9:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8fc:	e8 1b f9 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d901:	57                   	push   edi
c001d902:	56                   	push   esi
c001d903:	52                   	push   edx
c001d904:	50                   	push   eax
c001d905:	e8 e0 f8 ff ff       	call   c001d1ea <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001d90a:	83 c4 1c             	add    esp,0x1c
c001d90d:	52                   	push   edx
c001d90e:	50                   	push   eax
c001d90f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d913:	2d f8 00 00 00       	sub    eax,0xf8
c001d918:	eb 41                	jmp    c001d95b <Vm::x87Handler(regs*)+0x602>
c001d91a:	8d 50 10             	lea    edx,[eax+0x10]
c001d91d:	80 fa 07             	cmp    dl,0x7
c001d920:	0f 87 5a 01 00 00    	ja     c001da80 <Vm::x87Handler(regs*)+0x727>
c001d926:	83 ec 0c             	sub    esp,0xc
c001d929:	2d f0 00 00 00       	sub    eax,0xf0
c001d92e:	50                   	push   eax
c001d92f:	e8 e8 f8 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d934:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d93b:	89 c6                	mov    esi,eax
c001d93d:	89 d7                	mov    edi,edx
c001d93f:	e8 d8 f8 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d944:	57                   	push   edi
c001d945:	56                   	push   esi
c001d946:	52                   	push   edx
c001d947:	50                   	push   eax
c001d948:	e8 9d f8 ff ff       	call   c001d1ea <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001d94d:	83 c4 1c             	add    esp,0x1c
c001d950:	52                   	push   edx
c001d951:	50                   	push   eax
c001d952:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d956:	2d f0 00 00 00       	sub    eax,0xf0
c001d95b:	50                   	push   eax
c001d95c:	e8 fe f8 ff ff       	call   c001d25f <Vm::fpuSetReg(int, unsigned long long)>
c001d961:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d965:	e8 9d f9 ff ff       	call   c001d307 <Vm::fpuPop()>
c001d96a:	e9 5e fa ff ff       	jmp    c001d3cd <Vm::x87Handler(regs*)+0x74>
c001d96f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d973:	8d 50 30             	lea    edx,[eax+0x30]
c001d976:	80 fa 07             	cmp    dl,0x7
c001d979:	77 1d                	ja     c001d998 <Vm::x87Handler(regs*)+0x63f>
c001d97b:	83 ec 0c             	sub    esp,0xc
c001d97e:	6a 00                	push   0x0
c001d980:	e8 97 f8 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d985:	83 c4 0c             	add    esp,0xc
c001d988:	52                   	push   edx
c001d989:	50                   	push   eax
c001d98a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d98e:	2d d0 00 00 00       	sub    eax,0xd0
c001d993:	e9 f3 fd ff ff       	jmp    c001d78b <Vm::x87Handler(regs*)+0x432>
c001d998:	8d 50 28             	lea    edx,[eax+0x28]
c001d99b:	80 fa 07             	cmp    dl,0x7
c001d99e:	77 28                	ja     c001d9c8 <Vm::x87Handler(regs*)+0x66f>
c001d9a0:	83 ec 0c             	sub    esp,0xc
c001d9a3:	6a 00                	push   0x0
c001d9a5:	e8 72 f8 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d9aa:	83 c4 0c             	add    esp,0xc
c001d9ad:	52                   	push   edx
c001d9ae:	50                   	push   eax
c001d9af:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d9b3:	2d d8 00 00 00       	sub    eax,0xd8
c001d9b8:	50                   	push   eax
c001d9b9:	e8 a1 f8 ff ff       	call   c001d25f <Vm::fpuSetReg(int, unsigned long long)>
c001d9be:	e8 44 f9 ff ff       	call   c001d307 <Vm::fpuPop()>
c001d9c3:	e9 01 fa ff ff       	jmp    c001d3c9 <Vm::x87Handler(regs*)+0x70>
c001d9c8:	8d 50 20             	lea    edx,[eax+0x20]
c001d9cb:	80 fa 07             	cmp    dl,0x7
c001d9ce:	77 30                	ja     c001da00 <Vm::x87Handler(regs*)+0x6a7>
c001d9d0:	83 ec 0c             	sub    esp,0xc
c001d9d3:	2d e0 00 00 00       	sub    eax,0xe0
c001d9d8:	50                   	push   eax
c001d9d9:	e8 3e f8 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d9de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d9e5:	89 c6                	mov    esi,eax
c001d9e7:	89 d7                	mov    edi,edx
c001d9e9:	e8 2e f8 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001d9ee:	57                   	push   edi
c001d9ef:	56                   	push   esi
c001d9f0:	52                   	push   edx
c001d9f1:	50                   	push   eax
c001d9f2:	e8 48 f7 ff ff       	call   c001d13f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d9f7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d9fb:	e9 54 02 00 00       	jmp    c001dc54 <Vm::x87Handler(regs*)+0x8fb>
c001da00:	8d 50 18             	lea    edx,[eax+0x18]
c001da03:	80 fa 07             	cmp    dl,0x7
c001da06:	0f 87 43 fb ff ff    	ja     c001d54f <Vm::x87Handler(regs*)+0x1f6>
c001da0c:	83 ec 0c             	sub    esp,0xc
c001da0f:	2d e8 00 00 00       	sub    eax,0xe8
c001da14:	50                   	push   eax
c001da15:	e8 02 f8 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001da1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001da21:	89 c6                	mov    esi,eax
c001da23:	89 d7                	mov    edi,edx
c001da25:	e8 f2 f7 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001da2a:	57                   	push   edi
c001da2b:	56                   	push   esi
c001da2c:	52                   	push   edx
c001da2d:	50                   	push   eax
c001da2e:	e8 0c f7 ff ff       	call   c001d13f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001da33:	83 c4 20             	add    esp,0x20
c001da36:	e8 cc f8 ff ff       	call   c001d307 <Vm::fpuPop()>
c001da3b:	eb 62                	jmp    c001da9f <Vm::x87Handler(regs*)+0x746>
c001da3d:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001da41:	0f 85 0f 01 00 00    	jne    c001db56 <Vm::x87Handler(regs*)+0x7fd>
c001da47:	83 ec 0c             	sub    esp,0xc
c001da4a:	6a 01                	push   0x1
c001da4c:	e8 cb f7 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001da51:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001da58:	89 c6                	mov    esi,eax
c001da5a:	89 d7                	mov    edi,edx
c001da5c:	e8 bb f7 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001da61:	57                   	push   edi
c001da62:	56                   	push   esi
c001da63:	52                   	push   edx
c001da64:	50                   	push   eax
c001da65:	e8 d5 f6 ff ff       	call   c001d13f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001da6a:	83 c4 20             	add    esp,0x20
c001da6d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001da71:	e8 91 f8 ff ff       	call   c001d307 <Vm::fpuPop()>
c001da76:	e8 8c f8 ff ff       	call   c001d307 <Vm::fpuPop()>
c001da7b:	e9 50 f9 ff ff       	jmp    c001d3d0 <Vm::x87Handler(regs*)+0x77>
c001da80:	3c d9                	cmp    al,0xd9
c001da82:	0f 85 b5 02 00 00    	jne    c001dd3d <Vm::x87Handler(regs*)+0x9e4>
c001da88:	eb bd                	jmp    c001da47 <Vm::x87Handler(regs*)+0x6ee>
c001da8a:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001da8e:	0f 85 ea 02 00 00    	jne    c001dd7e <Vm::x87Handler(regs*)+0xa25>
c001da94:	0f b7 05 c0 bb 02 c0 	movzx  eax,WORD PTR ds:0xc002bbc0
c001da9b:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001da9f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001daa3:	e9 28 f9 ff ff       	jmp    c001d3d0 <Vm::x87Handler(regs*)+0x77>
c001daa8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001daac:	84 d2                	test   dl,dl
c001daae:	75 0f                	jne    c001dabf <Vm::x87Handler(regs*)+0x766>
c001dab0:	83 ec 0c             	sub    esp,0xc
c001dab3:	ff 36                	push   DWORD PTR [esi]
c001dab5:	e8 b1 f4 ff ff       	call   c001cf6b <Vm::fpu32ToInternal(unsigned int)>
c001daba:	e9 2c 01 00 00       	jmp    c001dbeb <Vm::x87Handler(regs*)+0x892>
c001dabf:	80 fa 01             	cmp    dl,0x1
c001dac2:	75 0f                	jne    c001dad3 <Vm::x87Handler(regs*)+0x77a>
c001dac4:	83 ec 0c             	sub    esp,0xc
c001dac7:	ff 36                	push   DWORD PTR [esi]
c001dac9:	e8 9d f4 ff ff       	call   c001cf6b <Vm::fpu32ToInternal(unsigned int)>
c001dace:	e9 81 02 00 00       	jmp    c001dd54 <Vm::x87Handler(regs*)+0x9fb>
c001dad3:	80 fa 04             	cmp    dl,0x4
c001dad6:	75 0f                	jne    c001dae7 <Vm::x87Handler(regs*)+0x78e>
c001dad8:	83 ec 0c             	sub    esp,0xc
c001dadb:	ff 36                	push   DWORD PTR [esi]
c001dadd:	e8 89 f4 ff ff       	call   c001cf6b <Vm::fpu32ToInternal(unsigned int)>
c001dae2:	e9 86 01 00 00       	jmp    c001dc6d <Vm::x87Handler(regs*)+0x914>
c001dae7:	80 fa 05             	cmp    dl,0x5
c001daea:	75 1b                	jne    c001db07 <Vm::x87Handler(regs*)+0x7ae>
c001daec:	83 ec 0c             	sub    esp,0xc
c001daef:	6a 00                	push   0x0
c001daf1:	e8 26 f7 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001daf6:	89 c7                	mov    edi,eax
c001daf8:	89 d5                	mov    ebp,edx
c001dafa:	58                   	pop    eax
c001dafb:	ff 36                	push   DWORD PTR [esi]
c001dafd:	e8 69 f4 ff ff       	call   c001cf6b <Vm::fpu32ToInternal(unsigned int)>
c001db02:	e9 a3 01 00 00       	jmp    c001dcaa <Vm::x87Handler(regs*)+0x951>
c001db07:	80 fa 06             	cmp    dl,0x6
c001db0a:	75 0f                	jne    c001db1b <Vm::x87Handler(regs*)+0x7c2>
c001db0c:	83 ec 0c             	sub    esp,0xc
c001db0f:	ff 36                	push   DWORD PTR [esi]
c001db11:	e8 55 f4 ff ff       	call   c001cf6b <Vm::fpu32ToInternal(unsigned int)>
c001db16:	e9 ae 01 00 00       	jmp    c001dcc9 <Vm::x87Handler(regs*)+0x970>
c001db1b:	31 c0                	xor    eax,eax
c001db1d:	80 fa 07             	cmp    dl,0x7
c001db20:	0f 85 94 02 00 00    	jne    c001ddba <Vm::x87Handler(regs*)+0xa61>
c001db26:	83 ec 0c             	sub    esp,0xc
c001db29:	6a 00                	push   0x0
c001db2b:	e8 ec f6 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001db30:	89 c7                	mov    edi,eax
c001db32:	89 d5                	mov    ebp,edx
c001db34:	58                   	pop    eax
c001db35:	ff 36                	push   DWORD PTR [esi]
c001db37:	e8 2f f4 ff ff       	call   c001cf6b <Vm::fpu32ToInternal(unsigned int)>
c001db3c:	e9 cb 01 00 00       	jmp    c001dd0c <Vm::x87Handler(regs*)+0x9b3>
c001db41:	80 fa 03             	cmp    dl,0x3
c001db44:	0f 85 d3 01 00 00    	jne    c001dd1d <Vm::x87Handler(regs*)+0x9c4>
c001db4a:	e8 b8 f7 ff ff       	call   c001d307 <Vm::fpuPop()>
c001db4f:	51                   	push   ecx
c001db50:	51                   	push   ecx
c001db51:	e9 de 01 00 00       	jmp    c001dd34 <Vm::x87Handler(regs*)+0x9db>
c001db56:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001db5a:	80 fa 01             	cmp    dl,0x1
c001db5d:	75 09                	jne    c001db68 <Vm::x87Handler(regs*)+0x80f>
c001db5f:	57                   	push   edi
c001db60:	57                   	push   edi
c001db61:	8b 06                	mov    eax,DWORD PTR [esi]
c001db63:	e9 e3 01 00 00       	jmp    c001dd4b <Vm::x87Handler(regs*)+0x9f2>
c001db68:	80 fa 04             	cmp    dl,0x4
c001db6b:	75 12                	jne    c001db7f <Vm::x87Handler(regs*)+0x826>
c001db6d:	31 d2                	xor    edx,edx
c001db6f:	51                   	push   ecx
c001db70:	51                   	push   ecx
c001db71:	8b 06                	mov    eax,DWORD PTR [esi]
c001db73:	52                   	push   edx
c001db74:	50                   	push   eax
c001db75:	e8 d0 f4 ff ff       	call   c001d04a <Vm::fpuLongToFloat(long long)>
c001db7a:	e9 ee 00 00 00       	jmp    c001dc6d <Vm::x87Handler(regs*)+0x914>
c001db7f:	31 c0                	xor    eax,eax
c001db81:	80 fa 07             	cmp    dl,0x7
c001db84:	0f 85 30 02 00 00    	jne    c001ddba <Vm::x87Handler(regs*)+0xa61>
c001db8a:	83 ec 0c             	sub    esp,0xc
c001db8d:	6a 00                	push   0x0
c001db8f:	e8 88 f6 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001db94:	89 c7                	mov    edi,eax
c001db96:	89 d5                	mov    ebp,edx
c001db98:	58                   	pop    eax
c001db99:	8b 06                	mov    eax,DWORD PTR [esi]
c001db9b:	5a                   	pop    edx
c001db9c:	31 d2                	xor    edx,edx
c001db9e:	52                   	push   edx
c001db9f:	50                   	push   eax
c001dba0:	e8 a5 f4 ff ff       	call   c001d04a <Vm::fpuLongToFloat(long long)>
c001dba5:	e9 62 01 00 00       	jmp    c001dd0c <Vm::x87Handler(regs*)+0x9b3>
c001dbaa:	84 d2                	test   dl,dl
c001dbac:	75 0d                	jne    c001dbbb <Vm::x87Handler(regs*)+0x862>
c001dbae:	31 d2                	xor    edx,edx
c001dbb0:	55                   	push   ebp
c001dbb1:	55                   	push   ebp
c001dbb2:	8b 06                	mov    eax,DWORD PTR [esi]
c001dbb4:	52                   	push   edx
c001dbb5:	50                   	push   eax
c001dbb6:	e9 d3 01 00 00       	jmp    c001dd8e <Vm::x87Handler(regs*)+0xa35>
c001dbbb:	31 c0                	xor    eax,eax
c001dbbd:	80 fa 02             	cmp    dl,0x2
c001dbc0:	0f 85 f4 01 00 00    	jne    c001ddba <Vm::x87Handler(regs*)+0xa61>
c001dbc6:	83 ec 0c             	sub    esp,0xc
c001dbc9:	6a 00                	push   0x0
c001dbcb:	e8 4c f6 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001dbd0:	59                   	pop    ecx
c001dbd1:	5f                   	pop    edi
c001dbd2:	e9 6a f9 ff ff       	jmp    c001d541 <Vm::x87Handler(regs*)+0x1e8>
c001dbd7:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001dbdb:	84 d2                	test   dl,dl
c001dbdd:	75 2a                	jne    c001dc09 <Vm::x87Handler(regs*)+0x8b0>
c001dbdf:	50                   	push   eax
c001dbe0:	50                   	push   eax
c001dbe1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dbe4:	ff 36                	push   DWORD PTR [esi]
c001dbe6:	e8 c5 f3 ff ff       	call   c001cfb0 <Vm::fpu64ToInternal(unsigned long long)>
c001dbeb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dbf2:	89 c6                	mov    esi,eax
c001dbf4:	89 d7                	mov    edi,edx
c001dbf6:	e8 21 f6 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001dbfb:	57                   	push   edi
c001dbfc:	56                   	push   esi
c001dbfd:	52                   	push   edx
c001dbfe:	50                   	push   eax
c001dbff:	e8 8e f5 ff ff       	call   c001d192 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001dc04:	e9 64 01 00 00       	jmp    c001dd6d <Vm::x87Handler(regs*)+0xa14>
c001dc09:	80 fa 01             	cmp    dl,0x1
c001dc0c:	75 11                	jne    c001dc1f <Vm::x87Handler(regs*)+0x8c6>
c001dc0e:	50                   	push   eax
c001dc0f:	50                   	push   eax
c001dc10:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dc13:	ff 36                	push   DWORD PTR [esi]
c001dc15:	e8 96 f3 ff ff       	call   c001cfb0 <Vm::fpu64ToInternal(unsigned long long)>
c001dc1a:	e9 35 01 00 00       	jmp    c001dd54 <Vm::x87Handler(regs*)+0x9fb>
c001dc1f:	80 fa 02             	cmp    dl,0x2
c001dc22:	0f 85 54 f9 ff ff    	jne    c001d57c <Vm::x87Handler(regs*)+0x223>
c001dc28:	55                   	push   ebp
c001dc29:	55                   	push   ebp
c001dc2a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dc2d:	ff 36                	push   DWORD PTR [esi]
c001dc2f:	e8 7c f3 ff ff       	call   c001cfb0 <Vm::fpu64ToInternal(unsigned long long)>
c001dc34:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dc3b:	89 c6                	mov    esi,eax
c001dc3d:	89 d7                	mov    edi,edx
c001dc3f:	e8 d8 f5 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001dc44:	57                   	push   edi
c001dc45:	56                   	push   esi
c001dc46:	52                   	push   edx
c001dc47:	50                   	push   eax
c001dc48:	e8 f2 f4 ff ff       	call   c001d13f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001dc4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001dc51:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001dc54:	83 c4 20             	add    esp,0x20
c001dc57:	e9 74 f7 ff ff       	jmp    c001d3d0 <Vm::x87Handler(regs*)+0x77>
c001dc5c:	80 fa 04             	cmp    dl,0x4
c001dc5f:	75 2a                	jne    c001dc8b <Vm::x87Handler(regs*)+0x932>
c001dc61:	51                   	push   ecx
c001dc62:	51                   	push   ecx
c001dc63:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dc66:	ff 36                	push   DWORD PTR [esi]
c001dc68:	e8 43 f3 ff ff       	call   c001cfb0 <Vm::fpu64ToInternal(unsigned long long)>
c001dc6d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dc74:	89 c6                	mov    esi,eax
c001dc76:	89 d7                	mov    edi,edx
c001dc78:	e8 9f f5 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001dc7d:	57                   	push   edi
c001dc7e:	56                   	push   esi
c001dc7f:	52                   	push   edx
c001dc80:	50                   	push   eax
c001dc81:	e8 36 f5 ff ff       	call   c001d1bc <Vm::fpuSub(unsigned long long, unsigned long long)>
c001dc86:	e9 e2 00 00 00       	jmp    c001dd6d <Vm::x87Handler(regs*)+0xa14>
c001dc8b:	80 fa 05             	cmp    dl,0x5
c001dc8e:	75 28                	jne    c001dcb8 <Vm::x87Handler(regs*)+0x95f>
c001dc90:	83 ec 0c             	sub    esp,0xc
c001dc93:	6a 00                	push   0x0
c001dc95:	e8 82 f5 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001dc9a:	89 c7                	mov    edi,eax
c001dc9c:	89 d5                	mov    ebp,edx
c001dc9e:	58                   	pop    eax
c001dc9f:	5a                   	pop    edx
c001dca0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dca3:	ff 36                	push   DWORD PTR [esi]
c001dca5:	e8 06 f3 ff ff       	call   c001cfb0 <Vm::fpu64ToInternal(unsigned long long)>
c001dcaa:	83 c4 10             	add    esp,0x10
c001dcad:	55                   	push   ebp
c001dcae:	57                   	push   edi
c001dcaf:	52                   	push   edx
c001dcb0:	50                   	push   eax
c001dcb1:	e8 06 f5 ff ff       	call   c001d1bc <Vm::fpuSub(unsigned long long, unsigned long long)>
c001dcb6:	eb 60                	jmp    c001dd18 <Vm::x87Handler(regs*)+0x9bf>
c001dcb8:	80 fa 06             	cmp    dl,0x6
c001dcbb:	75 2a                	jne    c001dce7 <Vm::x87Handler(regs*)+0x98e>
c001dcbd:	51                   	push   ecx
c001dcbe:	51                   	push   ecx
c001dcbf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dcc2:	ff 36                	push   DWORD PTR [esi]
c001dcc4:	e8 e7 f2 ff ff       	call   c001cfb0 <Vm::fpu64ToInternal(unsigned long long)>
c001dcc9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dcd0:	89 c6                	mov    esi,eax
c001dcd2:	89 d7                	mov    edi,edx
c001dcd4:	e8 43 f5 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001dcd9:	57                   	push   edi
c001dcda:	56                   	push   esi
c001dcdb:	52                   	push   edx
c001dcdc:	50                   	push   eax
c001dcdd:	e8 08 f5 ff ff       	call   c001d1ea <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001dce2:	e9 86 00 00 00       	jmp    c001dd6d <Vm::x87Handler(regs*)+0xa14>
c001dce7:	31 c0                	xor    eax,eax
c001dce9:	80 fa 07             	cmp    dl,0x7
c001dcec:	0f 85 c8 00 00 00    	jne    c001ddba <Vm::x87Handler(regs*)+0xa61>
c001dcf2:	83 ec 0c             	sub    esp,0xc
c001dcf5:	6a 00                	push   0x0
c001dcf7:	e8 20 f5 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001dcfc:	89 c7                	mov    edi,eax
c001dcfe:	89 d5                	mov    ebp,edx
c001dd00:	58                   	pop    eax
c001dd01:	5a                   	pop    edx
c001dd02:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dd05:	ff 36                	push   DWORD PTR [esi]
c001dd07:	e8 a4 f2 ff ff       	call   c001cfb0 <Vm::fpu64ToInternal(unsigned long long)>
c001dd0c:	83 c4 10             	add    esp,0x10
c001dd0f:	55                   	push   ebp
c001dd10:	57                   	push   edi
c001dd11:	52                   	push   edx
c001dd12:	50                   	push   eax
c001dd13:	e8 d2 f4 ff ff       	call   c001d1ea <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001dd18:	83 c4 0c             	add    esp,0xc
c001dd1b:	eb 53                	jmp    c001dd70 <Vm::x87Handler(regs*)+0xa17>
c001dd1d:	31 c0                	xor    eax,eax
c001dd1f:	80 fa 02             	cmp    dl,0x2
c001dd22:	0f 85 92 00 00 00    	jne    c001ddba <Vm::x87Handler(regs*)+0xa61>
c001dd28:	83 ec 0c             	sub    esp,0xc
c001dd2b:	6a 00                	push   0x0
c001dd2d:	e8 ea f4 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001dd32:	59                   	pop    ecx
c001dd33:	5f                   	pop    edi
c001dd34:	52                   	push   edx
c001dd35:	50                   	push   eax
c001dd36:	e8 27 f2 ff ff       	call   c001cf62 <Vm::fpuInternalTo64(unsigned long long)>
c001dd3b:	eb 70                	jmp    c001ddad <Vm::x87Handler(regs*)+0xa54>
c001dd3d:	31 c0                	xor    eax,eax
c001dd3f:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001dd44:	75 74                	jne    c001ddba <Vm::x87Handler(regs*)+0xa61>
c001dd46:	50                   	push   eax
c001dd47:	50                   	push   eax
c001dd48:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001dd4b:	31 d2                	xor    edx,edx
c001dd4d:	52                   	push   edx
c001dd4e:	50                   	push   eax
c001dd4f:	e8 f6 f2 ff ff       	call   c001d04a <Vm::fpuLongToFloat(long long)>
c001dd54:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dd5b:	89 c6                	mov    esi,eax
c001dd5d:	89 d7                	mov    edi,edx
c001dd5f:	e8 b8 f4 ff ff       	call   c001d21c <Vm::fpuGetReg(int)>
c001dd64:	57                   	push   edi
c001dd65:	56                   	push   esi
c001dd66:	52                   	push   edx
c001dd67:	50                   	push   eax
c001dd68:	e8 5e f4 ff ff       	call   c001d1cb <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001dd6d:	83 c4 1c             	add    esp,0x1c
c001dd70:	52                   	push   edx
c001dd71:	50                   	push   eax
c001dd72:	6a 00                	push   0x0
c001dd74:	e8 e6 f4 ff ff       	call   c001d25f <Vm::fpuSetReg(int, unsigned long long)>
c001dd79:	e9 f2 f7 ff ff       	jmp    c001d570 <Vm::x87Handler(regs*)+0x217>
c001dd7e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001dd82:	80 fa 05             	cmp    dl,0x5
c001dd85:	75 11                	jne    c001dd98 <Vm::x87Handler(regs*)+0xa3f>
c001dd87:	55                   	push   ebp
c001dd88:	55                   	push   ebp
c001dd89:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dd8c:	ff 36                	push   DWORD PTR [esi]
c001dd8e:	e8 81 f2 ff ff       	call   c001d014 <Vm::fpuULongToFloat(unsigned long long)>
c001dd93:	e9 cf f7 ff ff       	jmp    c001d567 <Vm::x87Handler(regs*)+0x20e>
c001dd98:	31 c0                	xor    eax,eax
c001dd9a:	80 fa 07             	cmp    dl,0x7
c001dd9d:	75 1b                	jne    c001ddba <Vm::x87Handler(regs*)+0xa61>
c001dd9f:	e8 63 f5 ff ff       	call   c001d307 <Vm::fpuPop()>
c001dda4:	51                   	push   ecx
c001dda5:	51                   	push   ecx
c001dda6:	52                   	push   edx
c001dda7:	50                   	push   eax
c001dda8:	e8 0c f2 ff ff       	call   c001cfb9 <Vm::fpuFloatToLong(unsigned long long)>
c001ddad:	83 c4 10             	add    esp,0x10
c001ddb0:	89 06                	mov    DWORD PTR [esi],eax
c001ddb2:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001ddb5:	e9 f8 f7 ff ff       	jmp    c001d5b2 <Vm::x87Handler(regs*)+0x259>
c001ddba:	83 c4 1c             	add    esp,0x1c
c001ddbd:	5b                   	pop    ebx
c001ddbe:	5e                   	pop    esi
c001ddbf:	5f                   	pop    edi
c001ddc0:	5d                   	pop    ebp
c001ddc1:	c3                   	ret    

c001ddc2 <__static_initialization_and_destruction_0(int, int)>:
c001ddc2:	83 ec 0c             	sub    esp,0xc
c001ddc5:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ddca:	75 1a                	jne    c001dde6 <__static_initialization_and_destruction_0(int, int)+0x24>
c001ddcc:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ddd4:	75 10                	jne    c001dde6 <__static_initialization_and_destruction_0(int, int)+0x24>
c001ddd6:	83 ec 0c             	sub    esp,0xc
c001ddd9:	68 c0 bb 02 c0       	push   0xc002bbc0
c001ddde:	e8 e5 7b 00 00       	call   c00259c8 <Vm::_FPUState::_FPUState()>
c001dde3:	83 c4 10             	add    esp,0x10
c001dde6:	90                   	nop
c001dde7:	83 c4 0c             	add    esp,0xc
c001ddea:	c3                   	ret    

c001ddeb <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001ddeb:	83 ec 0c             	sub    esp,0xc
c001ddee:	83 ec 08             	sub    esp,0x8
c001ddf1:	68 ff ff 00 00       	push   0xffff
c001ddf6:	6a 01                	push   0x1
c001ddf8:	e8 c5 ff ff ff       	call   c001ddc2 <__static_initialization_and_destruction_0(int, int)>
c001ddfd:	83 c4 10             	add    esp,0x10
c001de00:	83 c4 0c             	add    esp,0xc
c001de03:	c3                   	ret    

c001de04 <FAT::getName()>:
c001de04:	b8 10 8d 02 c0       	mov    eax,0xc0028d10
c001de09:	c3                   	ret    

c001de0a <FAT::tell(void*, unsigned long long*)>:
c001de0a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001de0f:	75 06                	jne    c001de17 <FAT::tell(void*, unsigned long long*)+0xd>
c001de11:	b8 04 00 00 00       	mov    eax,0x4
c001de16:	c3                   	ret    
c001de17:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001de1c:	75 06                	jne    c001de24 <FAT::tell(void*, unsigned long long*)+0x1a>
c001de1e:	b8 04 00 00 00       	mov    eax,0x4
c001de23:	c3                   	ret    
c001de24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001de28:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001de2b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001de2e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001de32:	89 01                	mov    DWORD PTR [ecx],eax
c001de34:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001de37:	b8 00 00 00 00       	mov    eax,0x0
c001de3c:	c3                   	ret    
c001de3d:	90                   	nop

c001de3e <FAT::stat(void*, unsigned long long*)>:
c001de3e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001de43:	75 06                	jne    c001de4b <FAT::stat(void*, unsigned long long*)+0xd>
c001de45:	b8 04 00 00 00       	mov    eax,0x4
c001de4a:	c3                   	ret    
c001de4b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001de50:	75 06                	jne    c001de58 <FAT::stat(void*, unsigned long long*)+0x1a>
c001de52:	b8 04 00 00 00       	mov    eax,0x4
c001de57:	c3                   	ret    
c001de58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001de5c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001de5f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001de62:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001de66:	89 01                	mov    DWORD PTR [ecx],eax
c001de68:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001de6b:	b8 00 00 00 00       	mov    eax,0x0
c001de70:	c3                   	ret    
c001de71:	90                   	nop

c001de72 <FAT::~FAT()>:
c001de72:	83 ec 0c             	sub    esp,0xc
c001de75:	ba 94 8d 02 c0       	mov    edx,0xc0028d94
c001de7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de7e:	89 10                	mov    DWORD PTR [eax],edx
c001de80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de84:	83 ec 0c             	sub    esp,0xc
c001de87:	50                   	push   eax
c001de88:	e8 13 47 ff ff       	call   c00125a0 <Filesystem::~Filesystem()>
c001de8d:	83 c4 10             	add    esp,0x10
c001de90:	90                   	nop
c001de91:	83 c4 0c             	add    esp,0xc
c001de94:	c3                   	ret    
c001de95:	90                   	nop

c001de96 <FAT::~FAT()>:
c001de96:	83 ec 0c             	sub    esp,0xc
c001de99:	83 ec 0c             	sub    esp,0xc
c001de9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dea0:	e8 cd ff ff ff       	call   c001de72 <FAT::~FAT()>
c001dea5:	83 c4 10             	add    esp,0x10
c001dea8:	83 ec 08             	sub    esp,0x8
c001deab:	6a 08                	push   0x8
c001dead:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001deb1:	e8 e1 42 ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c001deb6:	83 c4 10             	add    esp,0x10
c001deb9:	83 c4 0c             	add    esp,0xc
c001debc:	c3                   	ret    
c001debd:	90                   	nop

c001debe <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001debe:	83 ec 1c             	sub    esp,0x1c
c001dec1:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001dec8:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001decd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ded1:	8b 04 85 40 bc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd43c0]
c001ded8:	83 f8 ff             	cmp    eax,0xffffffff
c001dedb:	75 34                	jne    c001df11 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001dedd:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001dee1:	88 c2                	mov    dl,al
c001dee3:	a1 20 bc 02 c0       	mov    eax,ds:0xc002bc20
c001dee8:	01 d0                	add    eax,edx
c001deea:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001deee:	8b 15 20 bc 02 c0    	mov    edx,DWORD PTR ds:0xc002bc20
c001def4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001def8:	89 14 85 40 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43c0],edx
c001deff:	a1 20 bc 02 c0       	mov    eax,ds:0xc002bc20
c001df04:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001df08:	89 14 85 c0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4340],edx
c001df0f:	eb 17                	jmp    c001df28 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001df11:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001df15:	88 c2                	mov    dl,al
c001df17:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001df1b:	8b 04 85 40 bc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd43c0]
c001df22:	01 d0                	add    eax,edx
c001df24:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001df28:	83 ec 04             	sub    esp,0x4
c001df2b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001df2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001df33:	8d 44 24 15          	lea    eax,[esp+0x15]
c001df37:	50                   	push   eax
c001df38:	e8 e5 8b fe ff       	call   c0006b22 <f_getlabel>
c001df3d:	83 c4 10             	add    esp,0x10
c001df40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001df44:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001df49:	75 07                	jne    c001df52 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001df4b:	b8 00 00 00 00       	mov    eax,0x0
c001df50:	eb 05                	jmp    c001df57 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001df52:	b8 01 00 00 00       	mov    eax,0x1
c001df57:	83 c4 1c             	add    esp,0x1c
c001df5a:	c3                   	ret    
c001df5b:	90                   	nop

c001df5c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001df5c:	57                   	push   edi
c001df5d:	83 ec 58             	sub    esp,0x58
c001df60:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001df68:	8d 54 24 10          	lea    edx,[esp+0x10]
c001df6c:	b9 0f 00 00 00       	mov    ecx,0xf
c001df71:	b8 00 00 00 00       	mov    eax,0x0
c001df76:	fc                   	cld    
c001df77:	89 d7                	mov    edi,edx
c001df79:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001df7b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001df7f:	8b 04 85 40 bc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd43c0]
c001df86:	83 f8 ff             	cmp    eax,0xffffffff
c001df89:	75 34                	jne    c001dfbf <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001df8b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001df8f:	88 c2                	mov    dl,al
c001df91:	a1 20 bc 02 c0       	mov    eax,ds:0xc002bc20
c001df96:	01 d0                	add    eax,edx
c001df98:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001df9c:	8b 15 20 bc 02 c0    	mov    edx,DWORD PTR ds:0xc002bc20
c001dfa2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001dfa6:	89 14 85 40 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43c0],edx
c001dfad:	a1 20 bc 02 c0       	mov    eax,ds:0xc002bc20
c001dfb2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001dfb6:	89 14 85 c0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4340],edx
c001dfbd:	eb 17                	jmp    c001dfd6 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001dfbf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001dfc3:	88 c2                	mov    dl,al
c001dfc5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001dfc9:	8b 04 85 40 bc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd43c0]
c001dfd0:	01 d0                	add    eax,edx
c001dfd2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dfd6:	83 ec 08             	sub    esp,0x8
c001dfd9:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001dfdd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dfe1:	50                   	push   eax
c001dfe2:	e8 34 28 fe ff       	call   c000081b <strcat>
c001dfe7:	83 c4 10             	add    esp,0x10
c001dfea:	83 ec 0c             	sub    esp,0xc
c001dfed:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dff1:	50                   	push   eax
c001dff2:	e8 19 8d fe ff       	call   c0006d10 <f_setlabel>
c001dff7:	83 c4 10             	add    esp,0x10
c001dffa:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dffe:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001e003:	75 07                	jne    c001e00c <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001e005:	b8 00 00 00 00       	mov    eax,0x0
c001e00a:	eb 05                	jmp    c001e011 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001e00c:	b8 01 00 00 00       	mov    eax,0x1
c001e011:	83 c4 58             	add    esp,0x58
c001e014:	5f                   	pop    edi
c001e015:	c3                   	ret    

c001e016 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001e016:	83 ec 2c             	sub    esp,0x2c
c001e019:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001e021:	83 ec 08             	sub    esp,0x8
c001e024:	68 34 8d 02 c0       	push   0xc0028d34
c001e029:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e02d:	e8 83 27 fe ff       	call   c00007b5 <strcmp>
c001e032:	83 c4 10             	add    esp,0x10
c001e035:	85 c0                	test   eax,eax
c001e037:	0f 94 c0             	sete   al
c001e03a:	84 c0                	test   al,al
c001e03c:	74 0d                	je     c001e04b <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001e03e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e046:	e9 a6 00 00 00       	jmp    c001e0f1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e04b:	83 ec 08             	sub    esp,0x8
c001e04e:	68 26 8d 02 c0       	push   0xc0028d26
c001e053:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e057:	e8 59 27 fe ff       	call   c00007b5 <strcmp>
c001e05c:	83 c4 10             	add    esp,0x10
c001e05f:	85 c0                	test   eax,eax
c001e061:	0f 94 c0             	sete   al
c001e064:	84 c0                	test   al,al
c001e066:	74 0a                	je     c001e072 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001e068:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e070:	eb 7f                	jmp    c001e0f1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e072:	83 ec 08             	sub    esp,0x8
c001e075:	68 2c 8d 02 c0       	push   0xc0028d2c
c001e07a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e07e:	e8 32 27 fe ff       	call   c00007b5 <strcmp>
c001e083:	83 c4 10             	add    esp,0x10
c001e086:	85 c0                	test   eax,eax
c001e088:	0f 94 c0             	sete   al
c001e08b:	84 c0                	test   al,al
c001e08d:	74 0a                	je     c001e099 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001e08f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e097:	eb 58                	jmp    c001e0f1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e099:	83 ec 08             	sub    esp,0x8
c001e09c:	68 4c 60 02 c0       	push   0xc002604c
c001e0a1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e0a5:	e8 0b 27 fe ff       	call   c00007b5 <strcmp>
c001e0aa:	83 c4 10             	add    esp,0x10
c001e0ad:	85 c0                	test   eax,eax
c001e0af:	0f 94 c0             	sete   al
c001e0b2:	84 c0                	test   al,al
c001e0b4:	74 0a                	je     c001e0c0 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001e0b6:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001e0be:	eb 31                	jmp    c001e0f1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e0c0:	83 ec 08             	sub    esp,0x8
c001e0c3:	68 32 8d 02 c0       	push   0xc0028d32
c001e0c8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e0cc:	e8 e4 26 fe ff       	call   c00007b5 <strcmp>
c001e0d1:	83 c4 10             	add    esp,0x10
c001e0d4:	85 c0                	test   eax,eax
c001e0d6:	0f 94 c0             	sete   al
c001e0d9:	84 c0                	test   al,al
c001e0db:	74 0a                	je     c001e0e7 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001e0dd:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001e0e5:	eb 0a                	jmp    c001e0f1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e0e7:	b8 08 00 00 00       	mov    eax,0x8
c001e0ec:	e9 04 01 00 00       	jmp    c001e1f5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e0f1:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001e0f8:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001e0fd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e101:	8b 04 85 40 bc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd43c0]
c001e108:	83 f8 ff             	cmp    eax,0xffffffff
c001e10b:	75 34                	jne    c001e141 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001e10d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e111:	88 c2                	mov    dl,al
c001e113:	a1 20 bc 02 c0       	mov    eax,ds:0xc002bc20
c001e118:	01 d0                	add    eax,edx
c001e11a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e11e:	8b 15 20 bc 02 c0    	mov    edx,DWORD PTR ds:0xc002bc20
c001e124:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e128:	89 14 85 40 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43c0],edx
c001e12f:	a1 20 bc 02 c0       	mov    eax,ds:0xc002bc20
c001e134:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e138:	89 14 85 c0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4340],edx
c001e13f:	eb 17                	jmp    c001e158 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001e141:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e145:	88 c2                	mov    dl,al
c001e147:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e14b:	8b 04 85 40 bc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd43c0]
c001e152:	01 d0                	add    eax,edx
c001e154:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e158:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e15c:	88 04 24             	mov    BYTE PTR [esp],al
c001e15f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e163:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e167:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001e16f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001e174:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e17c:	83 ec 0c             	sub    esp,0xc
c001e17f:	68 00 20 00 00       	push   0x2000
c001e184:	e8 e5 0f ff ff       	call   c000f16e <malloc>
c001e189:	83 c4 10             	add    esp,0x10
c001e18c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e190:	68 00 20 00 00       	push   0x2000
c001e195:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e199:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e19d:	50                   	push   eax
c001e19e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001e1a2:	50                   	push   eax
c001e1a3:	e8 b3 8f fe ff       	call   c000715b <f_mkfs>
c001e1a8:	83 c4 10             	add    esp,0x10
c001e1ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e1af:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e1b4:	75 07                	jne    c001e1bd <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001e1b6:	b8 00 00 00 00       	mov    eax,0x0
c001e1bb:	eb 38                	jmp    c001e1f5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e1bd:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001e1c2:	75 17                	jne    c001e1db <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001e1c4:	83 ec 0c             	sub    esp,0xc
c001e1c7:	68 64 8d 02 c0       	push   0xc0028d64
c001e1cc:	e8 a6 40 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001e1d1:	83 c4 10             	add    esp,0x10
c001e1d4:	b8 09 00 00 00       	mov    eax,0x9
c001e1d9:	eb 1a                	jmp    c001e1f5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e1db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1df:	83 ec 08             	sub    esp,0x8
c001e1e2:	50                   	push   eax
c001e1e3:	68 38 8d 02 c0       	push   0xc0028d38
c001e1e8:	e8 8a 40 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001e1ed:	83 c4 10             	add    esp,0x10
c001e1f0:	b8 01 00 00 00       	mov    eax,0x1
c001e1f5:	83 c4 2c             	add    esp,0x2c
c001e1f8:	c3                   	ret    
c001e1f9:	90                   	nop

c001e1fa <FAT::tryMount(LogicalDisk*, int)>:
c001e1fa:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001e200:	a1 20 bc 02 c0       	mov    eax,ds:0xc002bc20
c001e205:	83 f8 14             	cmp    eax,0x14
c001e208:	75 17                	jne    c001e221 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001e20a:	83 ec 0c             	sub    esp,0xc
c001e20d:	68 4a 8d 02 c0       	push   0xc0028d4a
c001e212:	e8 f0 a8 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c001e217:	83 c4 10             	add    esp,0x10
c001e21a:	b0 00                	mov    al,0x0
c001e21c:	e9 d7 01 00 00       	jmp    c001e3f8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e221:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001e228:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e22e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e234:	3d 00 02 00 00       	cmp    eax,0x200
c001e239:	74 07                	je     c001e242 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001e23b:	b0 00                	mov    al,0x0
c001e23d:	e9 b6 01 00 00       	jmp    c001e3f8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e242:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001e24a:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e251:	8b 04 85 40 bc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd43c0]
c001e258:	83 f8 ff             	cmp    eax,0xffffffff
c001e25b:	74 07                	je     c001e264 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001e25d:	b0 01                	mov    al,0x1
c001e25f:	e9 94 01 00 00       	jmp    c001e3f8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e264:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001e26e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001e276:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001e27d:	88 c2                	mov    dl,al
c001e27f:	a1 20 bc 02 c0       	mov    eax,ds:0xc002bc20
c001e284:	01 d0                	add    eax,edx
c001e286:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001e28d:	8b 15 20 bc 02 c0    	mov    edx,DWORD PTR ds:0xc002bc20
c001e293:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e29a:	89 14 85 40 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43c0],edx
c001e2a1:	a1 20 bc 02 c0       	mov    eax,ds:0xc002bc20
c001e2a6:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001e2ad:	89 14 85 c0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4340],edx
c001e2b4:	83 ec 0c             	sub    esp,0xc
c001e2b7:	68 54 02 00 00       	push   0x254
c001e2bc:	e8 ad 0e ff ff       	call   c000f16e <malloc>
c001e2c1:	83 c4 10             	add    esp,0x10
c001e2c4:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001e2cb:	83 ec 04             	sub    esp,0x4
c001e2ce:	6a 00                	push   0x0
c001e2d0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e2d7:	50                   	push   eax
c001e2d8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e2df:	e8 35 6a fe ff       	call   c0004d19 <f_mount>
c001e2e4:	83 c4 10             	add    esp,0x10
c001e2e7:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001e2ee:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001e2f6:	74 19                	je     c001e311 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001e2f8:	83 ec 0c             	sub    esp,0xc
c001e2fb:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e302:	e8 87 0e ff ff       	call   c000f18e <rfree>
c001e307:	83 c4 10             	add    esp,0x10
c001e30a:	b0 00                	mov    al,0x0
c001e30c:	e9 e7 00 00 00       	jmp    c001e3f8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e311:	83 ec 04             	sub    esp,0x4
c001e314:	68 00 01 00 00       	push   0x100
c001e319:	6a 00                	push   0x0
c001e31b:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e322:	50                   	push   eax
c001e323:	e8 9d 23 fe ff       	call   c00006c5 <memset>
c001e328:	83 c4 10             	add    esp,0x10
c001e32b:	83 ec 08             	sub    esp,0x8
c001e32e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e335:	50                   	push   eax
c001e336:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e33d:	50                   	push   eax
c001e33e:	e8 d8 24 fe ff       	call   c000081b <strcat>
c001e343:	83 c4 10             	add    esp,0x10
c001e346:	83 ec 08             	sub    esp,0x8
c001e349:	68 58 8d 02 c0       	push   0xc0028d58
c001e34e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e355:	50                   	push   eax
c001e356:	e8 c0 24 fe ff       	call   c000081b <strcat>
c001e35b:	83 c4 10             	add    esp,0x10
c001e35e:	83 ec 04             	sub    esp,0x4
c001e361:	6a 01                	push   0x1
c001e363:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001e36a:	50                   	push   eax
c001e36b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e36f:	50                   	push   eax
c001e370:	e8 06 6a fe ff       	call   c0004d7b <f_open>
c001e375:	83 c4 10             	add    esp,0x10
c001e378:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001e37f:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001e386:	85 c0                	test   eax,eax
c001e388:	74 0a                	je     c001e394 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001e38a:	78 2d                	js     c001e3b9 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e38c:	83 e8 04             	sub    eax,0x4
c001e38f:	83 f8 01             	cmp    eax,0x1
c001e392:	77 25                	ja     c001e3b9 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e394:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001e39c:	83 ec 0c             	sub    esp,0xc
c001e39f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e3a3:	50                   	push   eax
c001e3a4:	e8 24 75 fe ff       	call   c00058cd <f_close>
c001e3a9:	83 c4 10             	add    esp,0x10
c001e3ac:	90                   	nop
c001e3ad:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001e3b5:	74 3a                	je     c001e3f1 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001e3b7:	eb 2d                	jmp    c001e3e6 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001e3b9:	83 ec 0c             	sub    esp,0xc
c001e3bc:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e3c3:	e8 c6 0d ff ff       	call   c000f18e <rfree>
c001e3c8:	83 c4 10             	add    esp,0x10
c001e3cb:	83 ec 04             	sub    esp,0x4
c001e3ce:	6a 00                	push   0x0
c001e3d0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e3d7:	50                   	push   eax
c001e3d8:	6a 00                	push   0x0
c001e3da:	e8 3a 69 fe ff       	call   c0004d19 <f_mount>
c001e3df:	83 c4 10             	add    esp,0x10
c001e3e2:	b0 00                	mov    al,0x0
c001e3e4:	eb 12                	jmp    c001e3f8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e3e6:	a1 20 bc 02 c0       	mov    eax,ds:0xc002bc20
c001e3eb:	40                   	inc    eax
c001e3ec:	a3 20 bc 02 c0       	mov    ds:0xc002bc20,eax
c001e3f1:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001e3f8:	81 c4 6c 03 00 00    	add    esp,0x36c
c001e3fe:	c3                   	ret    
c001e3ff:	90                   	nop

c001e400 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001e400:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001e406:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001e40e:	74 0a                	je     c001e41a <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001e410:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001e418:	75 0a                	jne    c001e424 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001e41a:	b8 04 00 00 00       	mov    eax,0x4
c001e41f:	e9 db 00 00 00       	jmp    c001e4ff <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e424:	83 ec 08             	sub    esp,0x8
c001e427:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e42e:	50                   	push   eax
c001e42f:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001e436:	e8 9c 7a fe ff       	call   c0005ed7 <f_readdir>
c001e43b:	83 c4 10             	add    esp,0x10
c001e43e:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001e445:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001e44b:	83 ec 0c             	sub    esp,0xc
c001e44e:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001e455:	83 c0 1a             	add    eax,0x1a
c001e458:	50                   	push   eax
c001e459:	e8 84 22 fe ff       	call   c00006e2 <strlen>
c001e45e:	83 c4 10             	add    esp,0x10
c001e461:	ba 00 00 00 00       	mov    edx,0x0
c001e466:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e46a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e46e:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001e475:	0f b6 c0             	movzx  eax,al
c001e478:	83 e0 10             	and    eax,0x10
c001e47b:	74 07                	je     c001e484 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001e47d:	b8 02 00 00 00       	mov    eax,0x2
c001e482:	eb 05                	jmp    c001e489 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001e484:	b8 01 00 00 00       	mov    eax,0x1
c001e489:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e48d:	83 ec 08             	sub    esp,0x8
c001e490:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e497:	83 c0 1a             	add    eax,0x1a
c001e49a:	50                   	push   eax
c001e49b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e49f:	83 c0 10             	add    eax,0x10
c001e4a2:	50                   	push   eax
c001e4a3:	e8 bc 22 fe ff       	call   c0000764 <strcpy>
c001e4a8:	83 c4 10             	add    esp,0x10
c001e4ab:	83 ec 04             	sub    esp,0x4
c001e4ae:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001e4b5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e4b9:	50                   	push   eax
c001e4ba:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001e4c1:	e8 c9 21 fe ff       	call   c000068f <memcpy>
c001e4c6:	83 c4 10             	add    esp,0x10
c001e4c9:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001e4d0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001e4d6:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001e4dd:	84 c0                	test   al,al
c001e4df:	75 07                	jne    c001e4e8 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001e4e1:	b8 07 00 00 00       	mov    eax,0x7
c001e4e6:	eb 17                	jmp    c001e4ff <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e4e8:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001e4ef:	85 c0                	test   eax,eax
c001e4f1:	75 07                	jne    c001e4fa <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001e4f3:	b8 00 00 00 00       	mov    eax,0x0
c001e4f8:	eb 05                	jmp    c001e4ff <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e4fa:	b8 01 00 00 00       	mov    eax,0x1
c001e4ff:	81 c4 3c 02 00 00    	add    esp,0x23c
c001e505:	c3                   	ret    

c001e506 <FAT::read(void*, unsigned long, void*, int*)>:
c001e506:	83 ec 1c             	sub    esp,0x1c
c001e509:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e50e:	74 07                	je     c001e517 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001e510:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001e515:	75 07                	jne    c001e51e <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001e517:	b8 04 00 00 00       	mov    eax,0x4
c001e51c:	eb 3d                	jmp    c001e55b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001e51e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e522:	50                   	push   eax
c001e523:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e527:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e52b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e52f:	e8 83 6c fe ff       	call   c00051b7 <f_read>
c001e534:	83 c4 10             	add    esp,0x10
c001e537:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e53b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e53f:	89 c2                	mov    edx,eax
c001e541:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e545:	89 10                	mov    DWORD PTR [eax],edx
c001e547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e54b:	85 c0                	test   eax,eax
c001e54d:	75 07                	jne    c001e556 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001e54f:	b8 00 00 00 00       	mov    eax,0x0
c001e554:	eb 05                	jmp    c001e55b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001e556:	b8 01 00 00 00       	mov    eax,0x1
c001e55b:	83 c4 1c             	add    esp,0x1c
c001e55e:	c3                   	ret    
c001e55f:	90                   	nop

c001e560 <FAT::write(void*, unsigned long, void*, int*)>:
c001e560:	83 ec 1c             	sub    esp,0x1c
c001e563:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e568:	74 07                	je     c001e571 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001e56a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001e56f:	75 07                	jne    c001e578 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001e571:	b8 04 00 00 00       	mov    eax,0x4
c001e576:	eb 3d                	jmp    c001e5b5 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001e578:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e57c:	50                   	push   eax
c001e57d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e581:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e585:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e589:	e8 a9 6e fe ff       	call   c0005437 <f_write>
c001e58e:	83 c4 10             	add    esp,0x10
c001e591:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e595:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e599:	89 c2                	mov    edx,eax
c001e59b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e59f:	89 10                	mov    DWORD PTR [eax],edx
c001e5a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e5a5:	85 c0                	test   eax,eax
c001e5a7:	75 07                	jne    c001e5b0 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001e5a9:	b8 00 00 00 00       	mov    eax,0x0
c001e5ae:	eb 05                	jmp    c001e5b5 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001e5b0:	b8 01 00 00 00       	mov    eax,0x1
c001e5b5:	83 c4 1c             	add    esp,0x1c
c001e5b8:	c3                   	ret    
c001e5b9:	90                   	nop

c001e5ba <FAT::close(void*)>:
c001e5ba:	83 ec 1c             	sub    esp,0x1c
c001e5bd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e5c2:	75 07                	jne    c001e5cb <FAT::close(void*)+0x11>
c001e5c4:	b8 04 00 00 00       	mov    eax,0x4
c001e5c9:	eb 36                	jmp    c001e601 <FAT::close(void*)+0x47>
c001e5cb:	83 ec 0c             	sub    esp,0xc
c001e5ce:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e5d2:	e8 f6 72 fe ff       	call   c00058cd <f_close>
c001e5d7:	83 c4 10             	add    esp,0x10
c001e5da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e5de:	83 ec 0c             	sub    esp,0xc
c001e5e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e5e5:	e8 94 0b ff ff       	call   c000f17e <free>
c001e5ea:	83 c4 10             	add    esp,0x10
c001e5ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e5f1:	85 c0                	test   eax,eax
c001e5f3:	75 07                	jne    c001e5fc <FAT::close(void*)+0x42>
c001e5f5:	b8 00 00 00 00       	mov    eax,0x0
c001e5fa:	eb 05                	jmp    c001e601 <FAT::close(void*)+0x47>
c001e5fc:	b8 01 00 00 00       	mov    eax,0x1
c001e601:	83 c4 1c             	add    esp,0x1c
c001e604:	c3                   	ret    
c001e605:	90                   	nop

c001e606 <FAT::closeDir(void*)>:
c001e606:	83 ec 1c             	sub    esp,0x1c
c001e609:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e60e:	75 07                	jne    c001e617 <FAT::closeDir(void*)+0x11>
c001e610:	b8 04 00 00 00       	mov    eax,0x4
c001e615:	eb 36                	jmp    c001e64d <FAT::closeDir(void*)+0x47>
c001e617:	83 ec 0c             	sub    esp,0xc
c001e61a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e61e:	e8 92 78 fe ff       	call   c0005eb5 <f_closedir>
c001e623:	83 c4 10             	add    esp,0x10
c001e626:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e62a:	83 ec 0c             	sub    esp,0xc
c001e62d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e631:	e8 48 0b ff ff       	call   c000f17e <free>
c001e636:	83 c4 10             	add    esp,0x10
c001e639:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e63d:	85 c0                	test   eax,eax
c001e63f:	75 07                	jne    c001e648 <FAT::closeDir(void*)+0x42>
c001e641:	b8 00 00 00 00       	mov    eax,0x0
c001e646:	eb 05                	jmp    c001e64d <FAT::closeDir(void*)+0x47>
c001e648:	b8 01 00 00 00       	mov    eax,0x1
c001e64d:	83 c4 1c             	add    esp,0x1c
c001e650:	c3                   	ret    
c001e651:	90                   	nop

c001e652 <FAT::seek(void*, unsigned long long)>:
c001e652:	83 ec 2c             	sub    esp,0x2c
c001e655:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e659:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e65d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e661:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e665:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001e66a:	75 07                	jne    c001e673 <FAT::seek(void*, unsigned long long)+0x21>
c001e66c:	b8 04 00 00 00       	mov    eax,0x4
c001e671:	eb 2f                	jmp    c001e6a2 <FAT::seek(void*, unsigned long long)+0x50>
c001e673:	83 ec 04             	sub    esp,0x4
c001e676:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e67a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e67e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e682:	e8 75 72 fe ff       	call   c00058fc <f_lseek>
c001e687:	83 c4 10             	add    esp,0x10
c001e68a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e68e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e692:	85 c0                	test   eax,eax
c001e694:	75 07                	jne    c001e69d <FAT::seek(void*, unsigned long long)+0x4b>
c001e696:	b8 00 00 00 00       	mov    eax,0x0
c001e69b:	eb 05                	jmp    c001e6a2 <FAT::seek(void*, unsigned long long)+0x50>
c001e69d:	b8 01 00 00 00       	mov    eax,0x1
c001e6a2:	83 c4 2c             	add    esp,0x2c
c001e6a5:	c3                   	ret    

c001e6a6 <fatWrapperReadDisk>:
c001e6a6:	83 ec 1c             	sub    esp,0x1c
c001e6a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6ad:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e6b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e6b5:	89 04 24             	mov    DWORD PTR [esp],eax
c001e6b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e6bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e6c0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e6c5:	8b 04 85 80 ac 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5380]
c001e6cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e6d0:	83 ec 0c             	sub    esp,0xc
c001e6d3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e6d7:	52                   	push   edx
c001e6d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e6dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e6e0:	50                   	push   eax
c001e6e1:	e8 bc 71 ff ff       	call   c00158a2 <LogicalDisk::read(unsigned long long, int, void*)>
c001e6e6:	83 c4 20             	add    esp,0x20
c001e6e9:	83 c4 1c             	add    esp,0x1c
c001e6ec:	c3                   	ret    

c001e6ed <fatWrapperWriteDisk>:
c001e6ed:	83 ec 1c             	sub    esp,0x1c
c001e6f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6f4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e6f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e6fc:	89 04 24             	mov    DWORD PTR [esp],eax
c001e6ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e703:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e707:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e70c:	8b 04 85 80 ac 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5380]
c001e713:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e717:	83 ec 0c             	sub    esp,0xc
c001e71a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e71e:	52                   	push   edx
c001e71f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e723:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e727:	50                   	push   eax
c001e728:	e8 e1 71 ff ff       	call   c001590e <LogicalDisk::write(unsigned long long, int, void*)>
c001e72d:	83 c4 20             	add    esp,0x20
c001e730:	83 c4 1c             	add    esp,0x1c
c001e733:	c3                   	ret    

c001e734 <fatWrapperIoctl>:
c001e734:	53                   	push   ebx
c001e735:	83 ec 28             	sub    esp,0x28
c001e738:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e73c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e740:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001e744:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e748:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001e74d:	75 31                	jne    c001e780 <fatWrapperIoctl+0x4c>
c001e74f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e753:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e757:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e75c:	8b 04 85 80 ac 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5380]
c001e763:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e769:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e76f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e773:	66 89 02             	mov    WORD PTR [edx],ax
c001e776:	b8 00 00 00 00       	mov    eax,0x0
c001e77b:	e9 b2 00 00 00       	jmp    c001e832 <fatWrapperIoctl+0xfe>
c001e780:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001e785:	75 6a                	jne    c001e7f1 <fatWrapperIoctl+0xbd>
c001e787:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e78b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e78f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e794:	8b 04 85 80 ac 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5380]
c001e79b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e7a1:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001e7a7:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001e7ad:	89 c8                	mov    eax,ecx
c001e7af:	89 da                	mov    edx,ebx
c001e7b1:	0f a4 c2 0a          	shld   edx,eax,0xa
c001e7b5:	c1 e0 0a             	shl    eax,0xa
c001e7b8:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001e7bd:	8b 0c 8d 80 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5380]
c001e7c4:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001e7ca:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001e7d0:	89 cb                	mov    ebx,ecx
c001e7d2:	c1 fb 1f             	sar    ebx,0x1f
c001e7d5:	53                   	push   ebx
c001e7d6:	51                   	push   ecx
c001e7d7:	52                   	push   edx
c001e7d8:	50                   	push   eax
c001e7d9:	e8 be 4d 00 00       	call   c002359c <__udivdi3>
c001e7de:	83 c4 10             	add    esp,0x10
c001e7e1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001e7e5:	89 01                	mov    DWORD PTR [ecx],eax
c001e7e7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e7ea:	b8 00 00 00 00       	mov    eax,0x0
c001e7ef:	eb 41                	jmp    c001e832 <fatWrapperIoctl+0xfe>
c001e7f1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e7f6:	75 07                	jne    c001e7ff <fatWrapperIoctl+0xcb>
c001e7f8:	b8 00 00 00 00       	mov    eax,0x0
c001e7fd:	eb 33                	jmp    c001e832 <fatWrapperIoctl+0xfe>
c001e7ff:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001e804:	75 19                	jne    c001e81f <fatWrapperIoctl+0xeb>
c001e806:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e80a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e80e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e812:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e818:	b8 00 00 00 00       	mov    eax,0x0
c001e81d:	eb 13                	jmp    c001e832 <fatWrapperIoctl+0xfe>
c001e81f:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001e824:	75 07                	jne    c001e82d <fatWrapperIoctl+0xf9>
c001e826:	b8 00 00 00 00       	mov    eax,0x0
c001e82b:	eb 05                	jmp    c001e832 <fatWrapperIoctl+0xfe>
c001e82d:	b8 04 00 00 00       	mov    eax,0x4
c001e832:	83 c4 28             	add    esp,0x28
c001e835:	5b                   	pop    ebx
c001e836:	c3                   	ret    
c001e837:	90                   	nop

c001e838 <FAT::FAT()>:
c001e838:	83 ec 1c             	sub    esp,0x1c
c001e83b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e83f:	83 ec 0c             	sub    esp,0xc
c001e842:	50                   	push   eax
c001e843:	e8 34 3d ff ff       	call   c001257c <Filesystem::Filesystem()>
c001e848:	83 c4 10             	add    esp,0x10
c001e84b:	ba 94 8d 02 c0       	mov    edx,0xc0028d94
c001e850:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e854:	89 10                	mov    DWORD PTR [eax],edx
c001e856:	c7 05 20 bc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bc20,0x0
c001e860:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e868:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001e86d:	7f 15                	jg     c001e884 <FAT::FAT()+0x4c>
c001e86f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e873:	c7 04 85 40 bc 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd43c0],0xffffffff
c001e87e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e882:	eb e4                	jmp    c001e868 <FAT::FAT()+0x30>
c001e884:	90                   	nop
c001e885:	83 c4 1c             	add    esp,0x1c
c001e888:	c3                   	ret    
c001e889:	90                   	nop

c001e88a <FAT::fixFilepath(char*)>:
c001e88a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e88e:	8a 00                	mov    al,BYTE PTR [eax]
c001e890:	3c 40                	cmp    al,0x40
c001e892:	7e 2c                	jle    c001e8c0 <FAT::fixFilepath(char*)+0x36>
c001e894:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e898:	8a 00                	mov    al,BYTE PTR [eax]
c001e89a:	83 e8 41             	sub    eax,0x41
c001e89d:	88 c2                	mov    dl,al
c001e89f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8a3:	88 10                	mov    BYTE PTR [eax],dl
c001e8a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8a9:	8a 00                	mov    al,BYTE PTR [eax]
c001e8ab:	0f be c0             	movsx  eax,al
c001e8ae:	8b 04 85 40 bc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd43c0]
c001e8b5:	83 c0 30             	add    eax,0x30
c001e8b8:	88 c2                	mov    dl,al
c001e8ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8be:	88 10                	mov    BYTE PTR [eax],dl
c001e8c0:	90                   	nop
c001e8c1:	c3                   	ret    

c001e8c2 <FAT::open(char const*, void**, FileOpenMode)>:
c001e8c2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001e8c8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001e8d0:	74 0a                	je     c001e8dc <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001e8d2:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001e8da:	75 0a                	jne    c001e8e6 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001e8dc:	b8 04 00 00 00       	mov    eax,0x4
c001e8e1:	e9 fd 00 00 00       	jmp    c001e9e3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001e8e6:	83 ec 08             	sub    esp,0x8
c001e8e9:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e8f0:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e8f4:	50                   	push   eax
c001e8f5:	e8 6a 1e fe ff       	call   c0000764 <strcpy>
c001e8fa:	83 c4 10             	add    esp,0x10
c001e8fd:	83 ec 08             	sub    esp,0x8
c001e900:	8d 44 24 10          	lea    eax,[esp+0x10]
c001e904:	50                   	push   eax
c001e905:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e90c:	e8 79 ff ff ff       	call   c001e88a <FAT::fixFilepath(char*)>
c001e911:	83 c4 10             	add    esp,0x10
c001e914:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001e91c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e923:	83 e0 01             	and    eax,0x1
c001e926:	74 08                	je     c001e930 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001e928:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001e930:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e937:	83 e0 04             	and    eax,0x4
c001e93a:	74 10                	je     c001e94c <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001e93c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001e944:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001e94c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e953:	83 e0 02             	and    eax,0x2
c001e956:	74 08                	je     c001e960 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001e958:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001e960:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e967:	83 e0 08             	and    eax,0x8
c001e96a:	74 08                	je     c001e974 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001e96c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001e974:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e97b:	83 e0 10             	and    eax,0x10
c001e97e:	74 08                	je     c001e988 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001e980:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001e988:	83 ec 0c             	sub    esp,0xc
c001e98b:	68 50 02 00 00       	push   0x250
c001e990:	e8 d9 07 ff ff       	call   c000f16e <malloc>
c001e995:	83 c4 10             	add    esp,0x10
c001e998:	89 c2                	mov    edx,eax
c001e99a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e9a1:	89 10                	mov    DWORD PTR [eax],edx
c001e9a3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001e9ab:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9b4:	83 ec 04             	sub    esp,0x4
c001e9b7:	52                   	push   edx
c001e9b8:	8d 54 24 10          	lea    edx,[esp+0x10]
c001e9bc:	52                   	push   edx
c001e9bd:	50                   	push   eax
c001e9be:	e8 b8 63 fe ff       	call   c0004d7b <f_open>
c001e9c3:	83 c4 10             	add    esp,0x10
c001e9c6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001e9cd:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001e9d5:	74 07                	je     c001e9de <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001e9d7:	b8 01 00 00 00       	mov    eax,0x1
c001e9dc:	eb 05                	jmp    c001e9e3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001e9de:	b8 00 00 00 00       	mov    eax,0x0
c001e9e3:	81 c4 1c 01 00 00    	add    esp,0x11c
c001e9e9:	c3                   	ret    

c001e9ea <FAT::openDir(char const*, void**)>:
c001e9ea:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001e9f0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001e9f8:	74 0a                	je     c001ea04 <FAT::openDir(char const*, void**)+0x1a>
c001e9fa:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ea02:	75 07                	jne    c001ea0b <FAT::openDir(char const*, void**)+0x21>
c001ea04:	b8 04 00 00 00       	mov    eax,0x4
c001ea09:	eb 7d                	jmp    c001ea88 <FAT::openDir(char const*, void**)+0x9e>
c001ea0b:	83 ec 08             	sub    esp,0x8
c001ea0e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ea15:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ea19:	50                   	push   eax
c001ea1a:	e8 45 1d fe ff       	call   c0000764 <strcpy>
c001ea1f:	83 c4 10             	add    esp,0x10
c001ea22:	83 ec 08             	sub    esp,0x8
c001ea25:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ea29:	50                   	push   eax
c001ea2a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ea31:	e8 54 fe ff ff       	call   c001e88a <FAT::fixFilepath(char*)>
c001ea36:	83 c4 10             	add    esp,0x10
c001ea39:	83 ec 0c             	sub    esp,0xc
c001ea3c:	6a 4c                	push   0x4c
c001ea3e:	e8 2b 07 ff ff       	call   c000f16e <malloc>
c001ea43:	83 c4 10             	add    esp,0x10
c001ea46:	89 c2                	mov    edx,eax
c001ea48:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ea4f:	89 10                	mov    DWORD PTR [eax],edx
c001ea51:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ea58:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea5a:	83 ec 08             	sub    esp,0x8
c001ea5d:	8d 54 24 14          	lea    edx,[esp+0x14]
c001ea61:	52                   	push   edx
c001ea62:	50                   	push   eax
c001ea63:	e8 4b 73 fe ff       	call   c0005db3 <f_opendir>
c001ea68:	83 c4 10             	add    esp,0x10
c001ea6b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ea72:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001ea7a:	74 07                	je     c001ea83 <FAT::openDir(char const*, void**)+0x99>
c001ea7c:	b8 01 00 00 00       	mov    eax,0x1
c001ea81:	eb 05                	jmp    c001ea88 <FAT::openDir(char const*, void**)+0x9e>
c001ea83:	b8 00 00 00 00       	mov    eax,0x0
c001ea88:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ea8e:	c3                   	ret    
c001ea8f:	90                   	nop

c001ea90 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001ea90:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ea96:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001ea9e:	75 0a                	jne    c001eaaa <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001eaa0:	b8 04 00 00 00       	mov    eax,0x4
c001eaa5:	e9 c9 00 00 00       	jmp    c001eb73 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001eaaa:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001eab2:	75 0a                	jne    c001eabe <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001eab4:	b8 04 00 00 00       	mov    eax,0x4
c001eab9:	e9 b5 00 00 00       	jmp    c001eb73 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001eabe:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001eac6:	75 0a                	jne    c001ead2 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001eac8:	b8 04 00 00 00       	mov    eax,0x4
c001eacd:	e9 a1 00 00 00       	jmp    c001eb73 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ead2:	83 ec 08             	sub    esp,0x8
c001ead5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001eadc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001eae3:	50                   	push   eax
c001eae4:	e8 7b 1c fe ff       	call   c0000764 <strcpy>
c001eae9:	83 c4 10             	add    esp,0x10
c001eaec:	83 ec 08             	sub    esp,0x8
c001eaef:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001eaf6:	50                   	push   eax
c001eaf7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001eafe:	e8 87 fd ff ff       	call   c001e88a <FAT::fixFilepath(char*)>
c001eb03:	83 c4 10             	add    esp,0x10
c001eb06:	83 ec 08             	sub    esp,0x8
c001eb09:	8d 44 24 08          	lea    eax,[esp+0x8]
c001eb0d:	50                   	push   eax
c001eb0e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001eb15:	50                   	push   eax
c001eb16:	e8 57 74 fe ff       	call   c0005f72 <f_stat>
c001eb1b:	83 c4 10             	add    esp,0x10
c001eb1e:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001eb25:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001eb2c:	85 c0                	test   eax,eax
c001eb2e:	74 07                	je     c001eb37 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001eb30:	83 f8 04             	cmp    eax,0x4
c001eb33:	74 32                	je     c001eb67 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c001eb35:	eb 37                	jmp    c001eb6e <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c001eb37:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001eb3b:	0f b6 c0             	movzx  eax,al
c001eb3e:	83 e0 10             	and    eax,0x10
c001eb41:	0f 95 c2             	setne  dl
c001eb44:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001eb4b:	88 10                	mov    BYTE PTR [eax],dl
c001eb4d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001eb50:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eb54:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001eb5b:	89 01                	mov    DWORD PTR [ecx],eax
c001eb5d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001eb60:	b8 00 00 00 00       	mov    eax,0x0
c001eb65:	eb 0c                	jmp    c001eb73 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001eb67:	b8 02 00 00 00       	mov    eax,0x2
c001eb6c:	eb 05                	jmp    c001eb73 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001eb6e:	b8 01 00 00 00       	mov    eax,0x1
c001eb73:	81 c4 2c 02 00 00    	add    esp,0x22c
c001eb79:	c3                   	ret    

c001eb7a <FAT::unlink(char const*)>:
c001eb7a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001eb80:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001eb88:	75 07                	jne    c001eb91 <FAT::unlink(char const*)+0x17>
c001eb8a:	b8 04 00 00 00       	mov    eax,0x4
c001eb8f:	eb 5c                	jmp    c001ebed <FAT::unlink(char const*)+0x73>
c001eb91:	83 ec 08             	sub    esp,0x8
c001eb94:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001eb9b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001eb9f:	50                   	push   eax
c001eba0:	e8 bf 1b fe ff       	call   c0000764 <strcpy>
c001eba5:	83 c4 10             	add    esp,0x10
c001eba8:	83 ec 08             	sub    esp,0x8
c001ebab:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ebaf:	50                   	push   eax
c001ebb0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ebb7:	e8 ce fc ff ff       	call   c001e88a <FAT::fixFilepath(char*)>
c001ebbc:	83 c4 10             	add    esp,0x10
c001ebbf:	83 ec 0c             	sub    esp,0xc
c001ebc2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ebc6:	50                   	push   eax
c001ebc7:	e8 f8 76 fe ff       	call   c00062c4 <f_unlink>
c001ebcc:	83 c4 10             	add    esp,0x10
c001ebcf:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ebd6:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ebdd:	85 c0                	test   eax,eax
c001ebdf:	75 07                	jne    c001ebe8 <FAT::unlink(char const*)+0x6e>
c001ebe1:	b8 00 00 00 00       	mov    eax,0x0
c001ebe6:	eb 05                	jmp    c001ebed <FAT::unlink(char const*)+0x73>
c001ebe8:	b8 01 00 00 00       	mov    eax,0x1
c001ebed:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ebf3:	c3                   	ret    

c001ebf4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001ebf4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ebfa:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001ec01:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001ec08:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ec0c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ec10:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001ec18:	75 0a                	jne    c001ec24 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001ec1a:	b8 04 00 00 00       	mov    eax,0x4
c001ec1f:	e9 1c 01 00 00       	jmp    c001ed40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001ec24:	83 ec 08             	sub    esp,0x8
c001ec27:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ec2e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ec32:	50                   	push   eax
c001ec33:	e8 2c 1b fe ff       	call   c0000764 <strcpy>
c001ec38:	83 c4 10             	add    esp,0x10
c001ec3b:	83 ec 08             	sub    esp,0x8
c001ec3e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ec42:	50                   	push   eax
c001ec43:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ec4a:	e8 3b fc ff ff       	call   c001e88a <FAT::fixFilepath(char*)>
c001ec4f:	83 c4 10             	add    esp,0x10
c001ec52:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001ec5a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001ec62:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ec67:	83 e0 01             	and    eax,0x1
c001ec6a:	74 08                	je     c001ec74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001ec6c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001ec74:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ec79:	83 e0 02             	and    eax,0x2
c001ec7c:	74 08                	je     c001ec86 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001ec7e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001ec86:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ec8b:	83 e0 04             	and    eax,0x4
c001ec8e:	74 08                	je     c001ec98 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001ec90:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001ec98:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ec9d:	83 e0 08             	and    eax,0x8
c001eca0:	74 08                	je     c001ecaa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001eca2:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001ecaa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ecaf:	83 e0 01             	and    eax,0x1
c001ecb2:	74 08                	je     c001ecbc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001ecb4:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001ecbc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ecc1:	83 e0 02             	and    eax,0x2
c001ecc4:	74 08                	je     c001ecce <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001ecc6:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001ecce:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ecd3:	83 e0 04             	and    eax,0x4
c001ecd6:	74 08                	je     c001ece0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001ecd8:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001ece0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ece5:	83 e0 08             	and    eax,0x8
c001ece8:	74 08                	je     c001ecf2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001ecea:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001ecf2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ecf9:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001ed00:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001ed08:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001ed10:	83 ec 04             	sub    esp,0x4
c001ed13:	52                   	push   edx
c001ed14:	50                   	push   eax
c001ed15:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ed19:	50                   	push   eax
c001ed1a:	e8 47 7c fe ff       	call   c0006966 <f_chmod>
c001ed1f:	83 c4 10             	add    esp,0x10
c001ed22:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ed29:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ed30:	85 c0                	test   eax,eax
c001ed32:	75 07                	jne    c001ed3b <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001ed34:	b8 00 00 00 00       	mov    eax,0x0
c001ed39:	eb 05                	jmp    c001ed40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001ed3b:	b8 01 00 00 00       	mov    eax,0x1
c001ed40:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ed46:	c3                   	ret    
c001ed47:	90                   	nop

c001ed48 <FAT::rename(char const*, char const*)>:
c001ed48:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ed4e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001ed56:	74 0a                	je     c001ed62 <FAT::rename(char const*, char const*)+0x1a>
c001ed58:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001ed60:	75 0a                	jne    c001ed6c <FAT::rename(char const*, char const*)+0x24>
c001ed62:	b8 04 00 00 00       	mov    eax,0x4
c001ed67:	e9 98 00 00 00       	jmp    c001ee04 <FAT::rename(char const*, char const*)+0xbc>
c001ed6c:	83 ec 08             	sub    esp,0x8
c001ed6f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ed76:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ed7d:	50                   	push   eax
c001ed7e:	e8 e1 19 fe ff       	call   c0000764 <strcpy>
c001ed83:	83 c4 10             	add    esp,0x10
c001ed86:	83 ec 08             	sub    esp,0x8
c001ed89:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001ed90:	50                   	push   eax
c001ed91:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ed98:	e8 ed fa ff ff       	call   c001e88a <FAT::fixFilepath(char*)>
c001ed9d:	83 c4 10             	add    esp,0x10
c001eda0:	83 ec 08             	sub    esp,0x8
c001eda3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001edaa:	8d 44 24 18          	lea    eax,[esp+0x18]
c001edae:	50                   	push   eax
c001edaf:	e8 b0 19 fe ff       	call   c0000764 <strcpy>
c001edb4:	83 c4 10             	add    esp,0x10
c001edb7:	83 ec 08             	sub    esp,0x8
c001edba:	8d 44 24 14          	lea    eax,[esp+0x14]
c001edbe:	50                   	push   eax
c001edbf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001edc6:	e8 bf fa ff ff       	call   c001e88a <FAT::fixFilepath(char*)>
c001edcb:	83 c4 10             	add    esp,0x10
c001edce:	83 ec 08             	sub    esp,0x8
c001edd1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001edd5:	50                   	push   eax
c001edd6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001eddd:	50                   	push   eax
c001edde:	e8 90 78 fe ff       	call   c0006673 <f_rename>
c001ede3:	83 c4 10             	add    esp,0x10
c001ede6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001eded:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001edf4:	85 c0                	test   eax,eax
c001edf6:	75 07                	jne    c001edff <FAT::rename(char const*, char const*)+0xb7>
c001edf8:	b8 00 00 00 00       	mov    eax,0x0
c001edfd:	eb 05                	jmp    c001ee04 <FAT::rename(char const*, char const*)+0xbc>
c001edff:	b8 01 00 00 00       	mov    eax,0x1
c001ee04:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ee0a:	c3                   	ret    
c001ee0b:	90                   	nop

c001ee0c <FAT::mkdir(char const*)>:
c001ee0c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ee12:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ee1a:	75 07                	jne    c001ee23 <FAT::mkdir(char const*)+0x17>
c001ee1c:	b8 04 00 00 00       	mov    eax,0x4
c001ee21:	eb 5c                	jmp    c001ee7f <FAT::mkdir(char const*)+0x73>
c001ee23:	83 ec 08             	sub    esp,0x8
c001ee26:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ee2d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ee31:	50                   	push   eax
c001ee32:	e8 2d 19 fe ff       	call   c0000764 <strcpy>
c001ee37:	83 c4 10             	add    esp,0x10
c001ee3a:	83 ec 08             	sub    esp,0x8
c001ee3d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ee41:	50                   	push   eax
c001ee42:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ee49:	e8 3c fa ff ff       	call   c001e88a <FAT::fixFilepath(char*)>
c001ee4e:	83 c4 10             	add    esp,0x10
c001ee51:	83 ec 0c             	sub    esp,0xc
c001ee54:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ee58:	50                   	push   eax
c001ee59:	e8 e9 75 fe ff       	call   c0006447 <f_mkdir>
c001ee5e:	83 c4 10             	add    esp,0x10
c001ee61:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ee68:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ee6f:	85 c0                	test   eax,eax
c001ee71:	75 07                	jne    c001ee7a <FAT::mkdir(char const*)+0x6e>
c001ee73:	b8 00 00 00 00       	mov    eax,0x0
c001ee78:	eb 05                	jmp    c001ee7f <FAT::mkdir(char const*)+0x73>
c001ee7a:	b8 01 00 00 00       	mov    eax,0x1
c001ee7f:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ee85:	c3                   	ret    

c001ee86 <FAT::exists(char const*)>:
c001ee86:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ee8c:	83 ec 08             	sub    esp,0x8
c001ee8f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ee96:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ee9a:	50                   	push   eax
c001ee9b:	e8 c4 18 fe ff       	call   c0000764 <strcpy>
c001eea0:	83 c4 10             	add    esp,0x10
c001eea3:	83 ec 08             	sub    esp,0x8
c001eea6:	8d 44 24 08          	lea    eax,[esp+0x8]
c001eeaa:	50                   	push   eax
c001eeab:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001eeb2:	e8 d3 f9 ff ff       	call   c001e88a <FAT::fixFilepath(char*)>
c001eeb7:	83 c4 10             	add    esp,0x10
c001eeba:	83 ec 08             	sub    esp,0x8
c001eebd:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001eec4:	50                   	push   eax
c001eec5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eec9:	50                   	push   eax
c001eeca:	e8 a3 70 fe ff       	call   c0005f72 <f_stat>
c001eecf:	83 c4 10             	add    esp,0x10
c001eed2:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001eed9:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001eee0:	85 c0                	test   eax,eax
c001eee2:	75 04                	jne    c001eee8 <FAT::exists(char const*)+0x62>
c001eee4:	b0 01                	mov    al,0x1
c001eee6:	eb 02                	jmp    c001eeea <FAT::exists(char const*)+0x64>
c001eee8:	b0 00                	mov    al,0x0
c001eeea:	81 c4 2c 02 00 00    	add    esp,0x22c
c001eef0:	c3                   	ret    
c001eef1:	90                   	nop

c001eef2 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001eef2:	b8 08 00 00 00       	mov    eax,0x8
c001eef7:	c3                   	ret    

c001eef8 <ISO9660::seek(void*, unsigned long long)>:
c001eef8:	53                   	push   ebx
c001eef9:	b8 04 00 00 00       	mov    eax,0x4
c001eefe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ef02:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ef06:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ef0a:	85 d2                	test   edx,edx
c001ef0c:	74 17                	je     c001ef25 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001ef0e:	89 c8                	mov    eax,ecx
c001ef10:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001ef13:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001ef16:	b8 01 00 00 00       	mov    eax,0x1
c001ef1b:	73 08                	jae    c001ef25 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001ef1d:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001ef20:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001ef23:	31 c0                	xor    eax,eax
c001ef25:	5b                   	pop    ebx
c001ef26:	c3                   	ret    
c001ef27:	90                   	nop

c001ef28 <ISO9660::tell(void*, unsigned long long*)>:
c001ef28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ef2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef30:	85 d2                	test   edx,edx
c001ef32:	74 12                	je     c001ef46 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ef34:	85 c0                	test   eax,eax
c001ef36:	74 0e                	je     c001ef46 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ef38:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ef3b:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001ef3e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ef41:	89 10                	mov    DWORD PTR [eax],edx
c001ef43:	31 c0                	xor    eax,eax
c001ef45:	c3                   	ret    
c001ef46:	b8 04 00 00 00       	mov    eax,0x4
c001ef4b:	c3                   	ret    

c001ef4c <ISO9660::getName()>:
c001ef4c:	b8 f0 8d 02 c0       	mov    eax,0xc0028df0
c001ef51:	c3                   	ret    

c001ef52 <ISO9660::stat(void*, unsigned long long*)>:
c001ef52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ef56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef5a:	85 d2                	test   edx,edx
c001ef5c:	74 12                	je     c001ef70 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ef5e:	85 c0                	test   eax,eax
c001ef60:	74 0e                	je     c001ef70 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ef62:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001ef65:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001ef68:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ef6b:	89 10                	mov    DWORD PTR [eax],edx
c001ef6d:	31 c0                	xor    eax,eax
c001ef6f:	c3                   	ret    
c001ef70:	b8 04 00 00 00       	mov    eax,0x4
c001ef75:	c3                   	ret    

c001ef76 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001ef76:	b8 01 00 00 00       	mov    eax,0x1
c001ef7b:	c3                   	ret    

c001ef7c <ISO9660::unlink(char const*)>:
c001ef7c:	b8 01 00 00 00       	mov    eax,0x1
c001ef81:	c3                   	ret    

c001ef82 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ef82:	b8 01 00 00 00       	mov    eax,0x1
c001ef87:	c3                   	ret    

c001ef88 <ISO9660::rename(char const*, char const*)>:
c001ef88:	b8 01 00 00 00       	mov    eax,0x1
c001ef8d:	c3                   	ret    

c001ef8e <ISO9660::mkdir(char const*)>:
c001ef8e:	b8 01 00 00 00       	mov    eax,0x1
c001ef93:	c3                   	ret    

c001ef94 <ISO9660::close(void*)>:
c001ef94:	83 ec 0c             	sub    esp,0xc
c001ef97:	b8 04 00 00 00       	mov    eax,0x4
c001ef9c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001efa0:	85 d2                	test   edx,edx
c001efa2:	74 0e                	je     c001efb2 <ISO9660::close(void*)+0x1e>
c001efa4:	83 ec 0c             	sub    esp,0xc
c001efa7:	52                   	push   edx
c001efa8:	e8 d1 01 ff ff       	call   c000f17e <free>
c001efad:	83 c4 10             	add    esp,0x10
c001efb0:	31 c0                	xor    eax,eax
c001efb2:	83 c4 0c             	add    esp,0xc
c001efb5:	c3                   	ret    

c001efb6 <ISO9660::closeDir(void*)>:
c001efb6:	83 ec 0c             	sub    esp,0xc
c001efb9:	b8 04 00 00 00       	mov    eax,0x4
c001efbe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001efc2:	85 d2                	test   edx,edx
c001efc4:	74 0e                	je     c001efd4 <ISO9660::closeDir(void*)+0x1e>
c001efc6:	83 ec 0c             	sub    esp,0xc
c001efc9:	52                   	push   edx
c001efca:	e8 af 01 ff ff       	call   c000f17e <free>
c001efcf:	83 c4 10             	add    esp,0x10
c001efd2:	31 c0                	xor    eax,eax
c001efd4:	83 c4 0c             	add    esp,0xc
c001efd7:	c3                   	ret    

c001efd8 <ISO9660::~ISO9660()>:
c001efd8:	83 ec 0c             	sub    esp,0xc
c001efdb:	ba 44 8e 02 c0       	mov    edx,0xc0028e44
c001efe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe4:	89 10                	mov    DWORD PTR [eax],edx
c001efe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efea:	83 ec 0c             	sub    esp,0xc
c001efed:	50                   	push   eax
c001efee:	e8 ad 35 ff ff       	call   c00125a0 <Filesystem::~Filesystem()>
c001eff3:	83 c4 10             	add    esp,0x10
c001eff6:	90                   	nop
c001eff7:	83 c4 0c             	add    esp,0xc
c001effa:	c3                   	ret    
c001effb:	90                   	nop

c001effc <ISO9660::~ISO9660()>:
c001effc:	83 ec 0c             	sub    esp,0xc
c001efff:	83 ec 0c             	sub    esp,0xc
c001f002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f006:	e8 cd ff ff ff       	call   c001efd8 <ISO9660::~ISO9660()>
c001f00b:	83 c4 10             	add    esp,0x10
c001f00e:	83 ec 08             	sub    esp,0x8
c001f011:	6a 08                	push   0x8
c001f013:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f017:	e8 7b 31 ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c001f01c:	83 c4 10             	add    esp,0x10
c001f01f:	83 c4 0c             	add    esp,0xc
c001f022:	c3                   	ret    

c001f023 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001f023:	55                   	push   ebp
c001f024:	31 c9                	xor    ecx,ecx
c001f026:	57                   	push   edi
c001f027:	56                   	push   esi
c001f028:	53                   	push   ebx
c001f029:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001f02d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f031:	89 eb                	mov    ebx,ebp
c001f033:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001f037:	39 ce                	cmp    esi,ecx
c001f039:	7e 17                	jle    c001f052 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001f03b:	31 d2                	xor    edx,edx
c001f03d:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001f041:	7d 13                	jge    c001f056 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001f043:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f047:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001f04a:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001f04d:	75 0d                	jne    c001f05c <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001f04f:	42                   	inc    edx
c001f050:	eb eb                	jmp    c001f03d <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001f052:	31 c0                	xor    eax,eax
c001f054:	eb 0a                	jmp    c001f060 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001f056:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001f05a:	eb 04                	jmp    c001f060 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001f05c:	41                   	inc    ecx
c001f05d:	43                   	inc    ebx
c001f05e:	eb d7                	jmp    c001f037 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001f060:	5b                   	pop    ebx
c001f061:	5e                   	pop    esi
c001f062:	5f                   	pop    edi
c001f063:	5d                   	pop    ebp
c001f064:	c3                   	ret    

c001f065 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001f065:	56                   	push   esi
c001f066:	53                   	push   ebx
c001f067:	52                   	push   edx
c001f068:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f06c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f070:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f074:	39 0d 20 bd 02 c0    	cmp    DWORD PTR ds:0xc002bd20,ecx
c001f07a:	75 08                	jne    c001f084 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001f07c:	38 05 28 9c 02 c0    	cmp    BYTE PTR ds:0xc0029c28,al
c001f082:	74 2b                	je     c001f0af <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001f084:	83 ec 0c             	sub    esp,0xc
c001f087:	a2 28 9c 02 c0       	mov    ds:0xc0029c28,al
c001f08c:	68 40 bd 02 c0       	push   0xc002bd40
c001f091:	0f be c0             	movsx  eax,al
c001f094:	6a 01                	push   0x1
c001f096:	89 0d 20 bd 02 c0    	mov    DWORD PTR ds:0xc002bd20,ecx
c001f09c:	31 db                	xor    ebx,ebx
c001f09e:	53                   	push   ebx
c001f09f:	51                   	push   ecx
c001f0a0:	ff 34 85 7c ab 02 c0 	push   DWORD PTR [eax*4-0x3ffd5484]
c001f0a7:	e8 f6 67 ff ff       	call   c00158a2 <LogicalDisk::read(unsigned long long, int, void*)>
c001f0ac:	83 c4 20             	add    esp,0x20
c001f0af:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001f0b7:	c7 44 24 14 40 bd 02 c0 	mov    DWORD PTR [esp+0x14],0xc002bd40
c001f0bf:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001f0c3:	58                   	pop    eax
c001f0c4:	5b                   	pop    ebx
c001f0c5:	5e                   	pop    esi
c001f0c6:	e9 c4 15 fe ff       	jmp    c000068f <memcpy>
c001f0cb:	90                   	nop

c001f0cc <ISO9660::tryMount(LogicalDisk*, int)>:
c001f0cc:	81 ec 10 08 00 00    	sub    esp,0x810
c001f0d2:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001f0d9:	83 c0 41             	add    eax,0x41
c001f0dc:	0f be c0             	movsx  eax,al
c001f0df:	50                   	push   eax
c001f0e0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f0e4:	50                   	push   eax
c001f0e5:	6a 10                	push   0x10
c001f0e7:	e8 79 ff ff ff       	call   c001f065 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f0ec:	83 c4 10             	add    esp,0x10
c001f0ef:	31 c0                	xor    eax,eax
c001f0f1:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001f0f6:	75 1d                	jne    c001f115 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f0f8:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001f0fd:	75 16                	jne    c001f115 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f0ff:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001f104:	75 0f                	jne    c001f115 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f106:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001f10b:	75 08                	jne    c001f115 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f10d:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001f112:	0f 94 c0             	sete   al
c001f115:	81 c4 0c 08 00 00    	add    esp,0x80c
c001f11b:	c3                   	ret    

c001f11c <ISO9660::read(void*, unsigned long, void*, int*)>:
c001f11c:	55                   	push   ebp
c001f11d:	57                   	push   edi
c001f11e:	56                   	push   esi
c001f11f:	53                   	push   ebx
c001f120:	81 ec 34 08 00 00    	sub    esp,0x834
c001f126:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001f12d:	55                   	push   ebp
c001f12e:	68 0b 8e 02 c0       	push   0xc0028e0b
c001f133:	e8 3f 31 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001f138:	83 c4 10             	add    esp,0x10
c001f13b:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001f143:	0f 84 06 02 00 00    	je     c001f34f <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f149:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001f151:	0f 84 f8 01 00 00    	je     c001f34f <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f157:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f15e:	b8 01 00 00 00       	mov    eax,0x1
c001f163:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001f167:	0f 85 e7 01 00 00    	jne    c001f354 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f16d:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001f170:	31 d2                	xor    edx,edx
c001f172:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001f175:	89 e9                	mov    ecx,ebp
c001f177:	89 d3                	mov    ebx,edx
c001f179:	01 f1                	add    ecx,esi
c001f17b:	11 fb                	adc    ebx,edi
c001f17d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f181:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f185:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001f18c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001f18f:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001f192:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f196:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001f19a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f19e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f1a2:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001f1a6:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001f1aa:	72 19                	jb     c001f1c5 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001f1ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f1b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f1b8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001f1bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f1bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f1c3:	eb 13                	jmp    c001f1d8 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001f1c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f1c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f1cd:	29 f0                	sub    eax,esi
c001f1cf:	19 fa                	sbb    edx,edi
c001f1d1:	89 04 24             	mov    DWORD PTR [esp],eax
c001f1d4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f1d8:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001f1df:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001f1e2:	8b 00                	mov    eax,DWORD PTR [eax]
c001f1e4:	53                   	push   ebx
c001f1e5:	0f a4 c2 0b          	shld   edx,eax,0xb
c001f1e9:	c1 e0 0b             	shl    eax,0xb
c001f1ec:	01 c6                	add    esi,eax
c001f1ee:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f1f5:	11 d7                	adc    edi,edx
c001f1f7:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f1fb:	89 fa                	mov    edx,edi
c001f1fd:	50                   	push   eax
c001f1fe:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f202:	50                   	push   eax
c001f203:	89 f0                	mov    eax,esi
c001f205:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f209:	50                   	push   eax
c001f20a:	e8 56 fe ff ff       	call   c001f065 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f20f:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001f216:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f21a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f21d:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001f221:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001f227:	83 c4 10             	add    esp,0x10
c001f22a:	b8 00 08 00 00       	mov    eax,0x800
c001f22f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001f233:	29 d0                	sub    eax,edx
c001f235:	39 c1                	cmp    ecx,eax
c001f237:	83 db 00             	sbb    ebx,0x0
c001f23a:	7d 19                	jge    c001f255 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001f23c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001f241:	75 16                	jne    c001f259 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001f243:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f24a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f250:	e9 f6 00 00 00       	jmp    c001f34b <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001f255:	89 c5                	mov    ebp,eax
c001f257:	eb 03                	jmp    c001f25c <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001f259:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001f25c:	51                   	push   ecx
c001f25d:	55                   	push   ebp
c001f25e:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001f262:	50                   	push   eax
c001f263:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001f26a:	e8 20 14 fe ff       	call   c000068f <memcpy>
c001f26f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f273:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f277:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001f27e:	01 e8                	add    eax,ebp
c001f280:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f284:	89 e8                	mov    eax,ebp
c001f286:	99                   	cdq    
c001f287:	01 ee                	add    esi,ebp
c001f289:	11 d7                	adc    edi,edx
c001f28b:	29 e9                	sub    ecx,ebp
c001f28d:	19 d3                	sbb    ebx,edx
c001f28f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f293:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f297:	83 c4 10             	add    esp,0x10
c001f29a:	b8 ff 07 00 00       	mov    eax,0x7ff
c001f29f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001f2a2:	b8 00 00 00 00       	mov    eax,0x0
c001f2a7:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001f2ab:	7d 3f                	jge    c001f2ec <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001f2ad:	52                   	push   edx
c001f2ae:	89 fa                	mov    edx,edi
c001f2b0:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f2b7:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f2bb:	50                   	push   eax
c001f2bc:	89 f0                	mov    eax,esi
c001f2be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f2c2:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f2c6:	50                   	push   eax
c001f2c7:	e8 99 fd ff ff       	call   c001f065 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f2cc:	81 c6 00 08 00 00    	add    esi,0x800
c001f2d2:	83 d7 00             	adc    edi,0x0
c001f2d5:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001f2dd:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001f2e5:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001f2ea:	eb ab                	jmp    c001f297 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001f2ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2f0:	0b 04 24             	or     eax,DWORD PTR [esp]
c001f2f3:	74 34                	je     c001f329 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001f2f5:	89 fa                	mov    edx,edi
c001f2f7:	50                   	push   eax
c001f2f8:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f2ff:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f303:	50                   	push   eax
c001f304:	89 f0                	mov    eax,esi
c001f306:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f30a:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f30e:	55                   	push   ebp
c001f30f:	50                   	push   eax
c001f310:	e8 50 fd ff ff       	call   c001f065 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f315:	83 c4 0c             	add    esp,0xc
c001f318:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001f31c:	55                   	push   ebp
c001f31d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f321:	e8 69 13 fe ff       	call   c000068f <memcpy>
c001f326:	83 c4 10             	add    esp,0x10
c001f329:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f330:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f334:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f338:	89 38                	mov    DWORD PTR [eax],edi
c001f33a:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f341:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f345:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001f348:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f34b:	31 c0                	xor    eax,eax
c001f34d:	eb 05                	jmp    c001f354 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f34f:	b8 04 00 00 00       	mov    eax,0x4
c001f354:	81 c4 2c 08 00 00    	add    esp,0x82c
c001f35a:	5b                   	pop    ebx
c001f35b:	5e                   	pop    esi
c001f35c:	5f                   	pop    edi
c001f35d:	5d                   	pop    ebp
c001f35e:	c3                   	ret    
c001f35f:	90                   	nop

c001f360 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001f360:	55                   	push   ebp
c001f361:	57                   	push   edi
c001f362:	56                   	push   esi
c001f363:	53                   	push   ebx
c001f364:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001f36a:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001f371:	85 f6                	test   esi,esi
c001f373:	0f 84 64 02 00 00    	je     c001f5dd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f379:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001f381:	0f 84 56 02 00 00    	je     c001f5dd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f387:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001f38a:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001f38d:	75 0a                	jne    c001f399 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001f38f:	b8 07 00 00 00       	mov    eax,0x7
c001f394:	e9 49 02 00 00       	jmp    c001f5e2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001f399:	50                   	push   eax
c001f39a:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f39e:	50                   	push   eax
c001f39f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f3a6:	53                   	push   ebx
c001f3a7:	8b 06                	mov    eax,DWORD PTR [esi]
c001f3a9:	c1 e0 0b             	shl    eax,0xb
c001f3ac:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001f3af:	c1 e8 0b             	shr    eax,0xb
c001f3b2:	50                   	push   eax
c001f3b3:	e8 ad fc ff ff       	call   c001f065 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f3b8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f3bb:	83 c4 10             	add    esp,0x10
c001f3be:	89 c1                	mov    ecx,eax
c001f3c0:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001f3c3:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f3c9:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001f3cc:	84 db                	test   bl,bl
c001f3ce:	0f 85 90 00 00 00    	jne    c001f464 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001f3d4:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001f3da:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f3e0:	29 c7                	sub    edi,eax
c001f3e2:	89 fb                	mov    ebx,edi
c001f3e4:	c1 fb 1f             	sar    ebx,0x1f
c001f3e7:	01 f8                	add    eax,edi
c001f3e9:	11 da                	adc    edx,ebx
c001f3eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f3ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f3f3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001f3f6:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001f3f9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001f3fc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001f3ff:	89 04 24             	mov    DWORD PTR [esp],eax
c001f402:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f406:	89 d8                	mov    eax,ebx
c001f408:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f40b:	ba 00 00 00 00       	mov    edx,0x0
c001f410:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001f414:	b8 00 00 00 00       	mov    eax,0x0
c001f419:	73 0b                	jae    c001f426 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001f41b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f41e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f422:	29 f8                	sub    eax,edi
c001f424:	19 da                	sbb    edx,ebx
c001f426:	89 d3                	mov    ebx,edx
c001f428:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001f42b:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001f42e:	09 c3                	or     ebx,eax
c001f430:	0f 84 59 ff ff ff    	je     c001f38f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001f436:	55                   	push   ebp
c001f437:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f43b:	50                   	push   eax
c001f43c:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f443:	53                   	push   ebx
c001f444:	8b 06                	mov    eax,DWORD PTR [esi]
c001f446:	c1 e0 0b             	shl    eax,0xb
c001f449:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001f44d:	c1 e8 0b             	shr    eax,0xb
c001f450:	50                   	push   eax
c001f451:	e8 0f fc ff ff       	call   c001f065 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f456:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f459:	83 c4 10             	add    esp,0x10
c001f45c:	25 ff 07 00 00       	and    eax,0x7ff
c001f461:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001f464:	57                   	push   edi
c001f465:	6a 28                	push   0x28
c001f467:	6a 00                	push   0x0
c001f469:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f46d:	50                   	push   eax
c001f46e:	e8 52 12 fe ff       	call   c00006c5 <memset>
c001f473:	31 d2                	xor    edx,edx
c001f475:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001f478:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f47e:	89 f8                	mov    eax,edi
c001f480:	83 c0 21             	add    eax,0x21
c001f483:	83 d2 00             	adc    edx,0x0
c001f486:	89 c7                	mov    edi,eax
c001f488:	89 d5                	mov    ebp,edx
c001f48a:	83 c4 10             	add    esp,0x10
c001f48d:	31 c9                	xor    ecx,ecx
c001f48f:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001f496:	83 f9 28             	cmp    ecx,0x28
c001f499:	88 04 24             	mov    BYTE PTR [esp],al
c001f49c:	0f 94 c2             	sete   dl
c001f49f:	88 d0                	mov    al,dl
c001f4a1:	ba ff 07 00 00       	mov    edx,0x7ff
c001f4a6:	39 fa                	cmp    edx,edi
c001f4a8:	ba 00 00 00 00       	mov    edx,0x0
c001f4ad:	19 ea                	sbb    edx,ebp
c001f4af:	0f 92 c2             	setb   dl
c001f4b2:	09 c2                	or     edx,eax
c001f4b4:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001f4b8:	0f 94 c0             	sete   al
c001f4bb:	08 d0                	or     al,dl
c001f4bd:	75 16                	jne    c001f4d5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f4bf:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001f4c3:	74 10                	je     c001f4d5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f4c5:	8a 04 24             	mov    al,BYTE PTR [esp]
c001f4c8:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001f4cc:	41                   	inc    ecx
c001f4cd:	83 c7 01             	add    edi,0x1
c001f4d0:	83 d5 00             	adc    ebp,0x0
c001f4d3:	eb ba                	jmp    c001f48f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001f4d5:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001f4dc:	83 ec 0c             	sub    esp,0xc
c001f4df:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001f4e3:	57                   	push   edi
c001f4e4:	e8 f9 11 fe ff       	call   c00006e2 <strlen>
c001f4e9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001f4f1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001f4f5:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001f4fc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f4ff:	5a                   	pop    edx
c001f500:	25 ff 07 00 00       	and    eax,0x7ff
c001f505:	01 c8                	add    eax,ecx
c001f507:	59                   	pop    ecx
c001f508:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001f50e:	83 e0 02             	and    eax,0x2
c001f511:	3c 01                	cmp    al,0x1
c001f513:	19 c0                	sbb    eax,eax
c001f515:	83 c0 02             	add    eax,0x2
c001f518:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001f51c:	57                   	push   edi
c001f51d:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001f521:	50                   	push   eax
c001f522:	e8 3d 12 fe ff       	call   c0000764 <strcpy>
c001f527:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001f52b:	83 c4 10             	add    esp,0x10
c001f52e:	84 c0                	test   al,al
c001f530:	75 21                	jne    c001f553 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001f532:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001f53a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001f542:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001f54a:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001f551:	eb 28                	jmp    c001f57b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001f553:	fe c8                	dec    al
c001f555:	75 24                	jne    c001f57b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001f557:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001f55f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001f567:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001f56f:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001f576:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001f57b:	0f b6 fb             	movzx  edi,bl
c001f57e:	31 db                	xor    ebx,ebx
c001f580:	50                   	push   eax
c001f581:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001f588:	8d 44 24 48          	lea    eax,[esp+0x48]
c001f58c:	50                   	push   eax
c001f58d:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001f594:	e8 f6 10 fe ff       	call   c000068f <memcpy>
c001f599:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001f5a0:	89 f9                	mov    ecx,edi
c001f5a2:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001f5a8:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001f5ab:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001f5ae:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001f5b1:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001f5b4:	83 c4 10             	add    esp,0x10
c001f5b7:	39 c7                	cmp    edi,eax
c001f5b9:	89 df                	mov    edi,ebx
c001f5bb:	19 d7                	sbb    edi,edx
c001f5bd:	72 10                	jb     c001f5cf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001f5bf:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001f5c6:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001f5cd:	eb 0a                	jmp    c001f5d9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001f5cf:	29 c8                	sub    eax,ecx
c001f5d1:	19 da                	sbb    edx,ebx
c001f5d3:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001f5d6:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001f5d9:	31 c0                	xor    eax,eax
c001f5db:	eb 05                	jmp    c001f5e2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001f5dd:	b8 04 00 00 00       	mov    eax,0x4
c001f5e2:	81 c4 5c 09 00 00    	add    esp,0x95c
c001f5e8:	5b                   	pop    ebx
c001f5e9:	5e                   	pop    esi
c001f5ea:	5f                   	pop    edi
c001f5eb:	5d                   	pop    ebp
c001f5ec:	c3                   	ret    

c001f5ed <readRoot(unsigned int*, unsigned int*, char)>:
c001f5ed:	81 ec 40 08 00 00    	sub    esp,0x840
c001f5f3:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001f5fb:	50                   	push   eax
c001f5fc:	8d 44 24 38          	lea    eax,[esp+0x38]
c001f600:	50                   	push   eax
c001f601:	6a 10                	push   0x10
c001f603:	e8 5d fa ff ff       	call   c001f065 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f608:	83 c4 0c             	add    esp,0xc
c001f60b:	6a 22                	push   0x22
c001f60d:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001f614:	50                   	push   eax
c001f615:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001f619:	50                   	push   eax
c001f61a:	e8 70 10 fe ff       	call   c000068f <memcpy>
c001f61f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f626:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001f62a:	89 10                	mov    DWORD PTR [eax],edx
c001f62c:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001f633:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f637:	89 10                	mov    DWORD PTR [eax],edx
c001f639:	b0 01                	mov    al,0x1
c001f63b:	81 c4 4c 08 00 00    	add    esp,0x84c
c001f641:	c3                   	ret    

c001f642 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001f642:	55                   	push   ebp
c001f643:	57                   	push   edi
c001f644:	56                   	push   esi
c001f645:	53                   	push   ebx
c001f646:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f64c:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001f653:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001f65a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f65e:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001f662:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f666:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f66a:	75 03                	jne    c001f66f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001f66c:	83 c3 02             	add    ebx,0x2
c001f66f:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001f672:	75 03                	jne    c001f677 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001f674:	43                   	inc    ebx
c001f675:	eb f8                	jmp    c001f66f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001f677:	51                   	push   ecx
c001f678:	68 00 01 00 00       	push   0x100
c001f67d:	6a 00                	push   0x0
c001f67f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f683:	50                   	push   eax
c001f684:	e8 3c 10 fe ff       	call   c00006c5 <memset>
c001f689:	83 c4 10             	add    esp,0x10
c001f68c:	31 d2                	xor    edx,edx
c001f68e:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001f691:	84 c0                	test   al,al
c001f693:	74 21                	je     c001f6b6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001f695:	3c 2f                	cmp    al,0x2f
c001f697:	75 0b                	jne    c001f6a4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001f699:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001f69d:	bd 01 00 00 00       	mov    ebp,0x1
c001f6a2:	eb 14                	jmp    c001f6b8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001f6a4:	8d 48 9f             	lea    ecx,[eax-0x61]
c001f6a7:	80 f9 19             	cmp    cl,0x19
c001f6aa:	77 03                	ja     c001f6af <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001f6ac:	83 e8 20             	sub    eax,0x20
c001f6af:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001f6b3:	42                   	inc    edx
c001f6b4:	eb d8                	jmp    c001f68e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001f6b6:	31 ed                	xor    ebp,ebp
c001f6b8:	83 ec 0c             	sub    esp,0xc
c001f6bb:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001f6c2:	e8 a7 fa fe ff       	call   c000f16e <malloc>
c001f6c7:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001f6ce:	89 c6                	mov    esi,eax
c001f6d0:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001f6d6:	c1 ef 0b             	shr    edi,0xb
c001f6d9:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001f6e0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001f6e4:	83 c4 10             	add    esp,0x10
c001f6e7:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001f6ec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f6f0:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001f6f7:	74 28                	je     c001f721 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001f6f9:	52                   	push   edx
c001f6fa:	57                   	push   edi
c001f6fb:	50                   	push   eax
c001f6fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f700:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001f707:	e8 59 f9 ff ff       	call   c001f065 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f70c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f710:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001f717:	05 00 08 00 00       	add    eax,0x800
c001f71c:	83 c4 10             	add    esp,0x10
c001f71f:	eb cb                	jmp    c001f6ec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001f721:	83 ec 0c             	sub    esp,0xc
c001f724:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001f728:	57                   	push   edi
c001f729:	e8 b4 0f fe ff       	call   c00006e2 <strlen>
c001f72e:	50                   	push   eax
c001f72f:	57                   	push   edi
c001f730:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001f737:	56                   	push   esi
c001f738:	e8 e6 f8 ff ff       	call   c001f023 <__memmem(unsigned char*, int, unsigned char*, int)>
c001f73d:	83 c4 20             	add    esp,0x20
c001f740:	85 c0                	test   eax,eax
c001f742:	75 13                	jne    c001f757 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001f744:	83 ec 0c             	sub    esp,0xc
c001f747:	56                   	push   esi
c001f748:	e8 31 fa fe ff       	call   c000f17e <free>
c001f74d:	83 c4 10             	add    esp,0x10
c001f750:	31 c0                	xor    eax,eax
c001f752:	e9 b3 00 00 00       	jmp    c001f80a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001f757:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001f75b:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001f75f:	c1 e7 08             	shl    edi,0x8
c001f762:	c1 e2 10             	shl    edx,0x10
c001f765:	09 d7                	or     edi,edx
c001f767:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001f76b:	09 d7                	or     edi,edx
c001f76d:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001f771:	c1 e2 18             	shl    edx,0x18
c001f774:	09 d7                	or     edi,edx
c001f776:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001f77a:	89 d1                	mov    ecx,edx
c001f77c:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001f780:	c1 e1 08             	shl    ecx,0x8
c001f783:	c1 e2 10             	shl    edx,0x10
c001f786:	09 ca                	or     edx,ecx
c001f788:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001f78c:	09 ca                	or     edx,ecx
c001f78e:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001f792:	c1 e1 18             	shl    ecx,0x18
c001f795:	09 ca                	or     edx,ecx
c001f797:	89 e9                	mov    ecx,ebp
c001f799:	84 c9                	test   cl,cl
c001f79b:	74 3c                	je     c001f7d9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001f79d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f7a1:	83 ec 0c             	sub    esp,0xc
c001f7a4:	56                   	push   esi
c001f7a5:	e8 d4 f9 fe ff       	call   c000f17e <free>
c001f7aa:	83 c4 0c             	add    esp,0xc
c001f7ad:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f7b4:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001f7b9:	50                   	push   eax
c001f7ba:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f7c1:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f7c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f7cc:	52                   	push   edx
c001f7cd:	57                   	push   edi
c001f7ce:	53                   	push   ebx
c001f7cf:	e8 6e fe ff ff       	call   c001f642 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001f7d4:	83 c4 20             	add    esp,0x20
c001f7d7:	eb 31                	jmp    c001f80a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001f7d9:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001f7dc:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001f7e3:	d0 e8                	shr    al,1
c001f7e5:	89 3b                	mov    DWORD PTR [ebx],edi
c001f7e7:	83 e0 01             	and    eax,0x1
c001f7ea:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001f7f1:	83 ec 0c             	sub    esp,0xc
c001f7f4:	89 13                	mov    DWORD PTR [ebx],edx
c001f7f6:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001f7fd:	89 03                	mov    DWORD PTR [ebx],eax
c001f7ff:	56                   	push   esi
c001f800:	e8 79 f9 fe ff       	call   c000f17e <free>
c001f805:	83 c4 10             	add    esp,0x10
c001f808:	b0 01                	mov    al,0x1
c001f80a:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f810:	5b                   	pop    ebx
c001f811:	5e                   	pop    esi
c001f812:	5f                   	pop    edi
c001f813:	5d                   	pop    ebp
c001f814:	c3                   	ret    

c001f815 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001f815:	55                   	push   ebp
c001f816:	57                   	push   edi
c001f817:	56                   	push   esi
c001f818:	53                   	push   ebx
c001f819:	83 ec 20             	sub    esp,0x20
c001f81c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001f820:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001f824:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f828:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001f830:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f838:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001f83d:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001f843:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001f849:	57                   	push   edi
c001f84a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f84e:	50                   	push   eax
c001f84f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f853:	50                   	push   eax
c001f854:	e8 94 fd ff ff       	call   c001f5ed <readRoot(unsigned int*, unsigned int*, char)>
c001f859:	5a                   	pop    edx
c001f85a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f85e:	e8 7f 0e fe ff       	call   c00006e2 <strlen>
c001f863:	83 c4 10             	add    esp,0x10
c001f866:	83 f8 03             	cmp    eax,0x3
c001f869:	77 17                	ja     c001f882 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001f86b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f86f:	89 03                	mov    DWORD PTR [ebx],eax
c001f871:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f875:	89 06                	mov    DWORD PTR [esi],eax
c001f877:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001f87e:	b0 01                	mov    al,0x1
c001f880:	eb 19                	jmp    c001f89b <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001f882:	50                   	push   eax
c001f883:	55                   	push   ebp
c001f884:	57                   	push   edi
c001f885:	56                   	push   esi
c001f886:	53                   	push   ebx
c001f887:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001f88b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001f88f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f893:	e8 aa fd ff ff       	call   c001f642 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001f898:	83 c4 20             	add    esp,0x20
c001f89b:	83 c4 1c             	add    esp,0x1c
c001f89e:	5b                   	pop    ebx
c001f89f:	5e                   	pop    esi
c001f8a0:	5f                   	pop    edi
c001f8a1:	5d                   	pop    ebp
c001f8a2:	c3                   	ret    
c001f8a3:	90                   	nop

c001f8a4 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001f8a4:	57                   	push   edi
c001f8a5:	56                   	push   esi
c001f8a6:	53                   	push   ebx
c001f8a7:	83 ec 10             	sub    esp,0x10
c001f8aa:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001f8ae:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001f8b2:	85 ff                	test   edi,edi
c001f8b4:	74 7b                	je     c001f931 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001f8b6:	85 f6                	test   esi,esi
c001f8b8:	74 77                	je     c001f931 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001f8ba:	83 ec 0c             	sub    esp,0xc
c001f8bd:	6a 1c                	push   0x1c
c001f8bf:	e8 aa f8 fe ff       	call   c000f16e <malloc>
c001f8c4:	89 07                	mov    DWORD PTR [edi],eax
c001f8c6:	89 c3                	mov    ebx,eax
c001f8c8:	58                   	pop    eax
c001f8c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f8cd:	50                   	push   eax
c001f8ce:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001f8d1:	50                   	push   eax
c001f8d2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f8d6:	50                   	push   eax
c001f8d7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f8db:	50                   	push   eax
c001f8dc:	56                   	push   esi
c001f8dd:	e8 33 ff ff ff       	call   c001f815 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f8e2:	83 c4 20             	add    esp,0x20
c001f8e5:	84 c0                	test   al,al
c001f8e7:	74 07                	je     c001f8f0 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001f8e9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f8ee:	74 0b                	je     c001f8fb <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001f8f0:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001f8f4:	b8 01 00 00 00       	mov    eax,0x1
c001f8f9:	eb 3b                	jmp    c001f936 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001f8fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8ff:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001f903:	89 03                	mov    DWORD PTR [ebx],eax
c001f905:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001f90c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f910:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001f917:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f91e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f921:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f928:	8a 06                	mov    al,BYTE PTR [esi]
c001f92a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001f92d:	31 c0                	xor    eax,eax
c001f92f:	eb 05                	jmp    c001f936 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001f931:	b8 04 00 00 00       	mov    eax,0x4
c001f936:	83 c4 10             	add    esp,0x10
c001f939:	5b                   	pop    ebx
c001f93a:	5e                   	pop    esi
c001f93b:	5f                   	pop    edi
c001f93c:	c3                   	ret    
c001f93d:	90                   	nop

c001f93e <ISO9660::exists(char const*)>:
c001f93e:	83 ec 28             	sub    esp,0x28
c001f941:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f945:	8d 54 24 18          	lea    edx,[esp+0x18]
c001f949:	52                   	push   edx
c001f94a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001f94d:	52                   	push   edx
c001f94e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001f952:	52                   	push   edx
c001f953:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001f957:	52                   	push   edx
c001f958:	50                   	push   eax
c001f959:	e8 b7 fe ff ff       	call   c001f815 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f95e:	83 c4 3c             	add    esp,0x3c
c001f961:	c3                   	ret    

c001f962 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001f962:	56                   	push   esi
c001f963:	53                   	push   ebx
c001f964:	83 ec 14             	sub    esp,0x14
c001f967:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001f96b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001f96f:	85 db                	test   ebx,ebx
c001f971:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001f975:	0f 94 c2             	sete   dl
c001f978:	85 f6                	test   esi,esi
c001f97a:	0f 94 c0             	sete   al
c001f97d:	08 c2                	or     dl,al
c001f97f:	75 68                	jne    c001f9e9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001f981:	85 c9                	test   ecx,ecx
c001f983:	74 64                	je     c001f9e9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001f985:	83 ec 0c             	sub    esp,0xc
c001f988:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001f98b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f98f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001f995:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f99c:	50                   	push   eax
c001f99d:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001f9a0:	50                   	push   eax
c001f9a1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f9a5:	50                   	push   eax
c001f9a6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f9aa:	50                   	push   eax
c001f9ab:	51                   	push   ecx
c001f9ac:	e8 64 fe ff ff       	call   c001f815 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f9b1:	83 c4 20             	add    esp,0x20
c001f9b4:	ba 01 00 00 00       	mov    edx,0x1
c001f9b9:	84 c0                	test   al,al
c001f9bb:	74 31                	je     c001f9ee <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f9bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9c1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f9c8:	89 03                	mov    DWORD PTR [ebx],eax
c001f9ca:	ba 00 00 00 00       	mov    edx,0x0
c001f9cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f9d3:	85 c0                	test   eax,eax
c001f9d5:	0f 95 06             	setne  BYTE PTR [esi]
c001f9d8:	74 14                	je     c001f9ee <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f9da:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001f9e0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f9e7:	eb 05                	jmp    c001f9ee <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f9e9:	ba 04 00 00 00       	mov    edx,0x4
c001f9ee:	83 c4 14             	add    esp,0x14
c001f9f1:	89 d0                	mov    eax,edx
c001f9f3:	5b                   	pop    ebx
c001f9f4:	5e                   	pop    esi
c001f9f5:	c3                   	ret    

c001f9f6 <ISO9660::openDir(char const*, void**)>:
c001f9f6:	57                   	push   edi
c001f9f7:	56                   	push   esi
c001f9f8:	53                   	push   ebx
c001f9f9:	83 ec 10             	sub    esp,0x10
c001f9fc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001fa00:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001fa04:	85 ff                	test   edi,edi
c001fa06:	0f 84 95 00 00 00    	je     c001faa1 <ISO9660::openDir(char const*, void**)+0xab>
c001fa0c:	85 f6                	test   esi,esi
c001fa0e:	0f 84 8d 00 00 00    	je     c001faa1 <ISO9660::openDir(char const*, void**)+0xab>
c001fa14:	83 ec 0c             	sub    esp,0xc
c001fa17:	6a 1c                	push   0x1c
c001fa19:	e8 50 f7 fe ff       	call   c000f16e <malloc>
c001fa1e:	89 07                	mov    DWORD PTR [edi],eax
c001fa20:	89 c3                	mov    ebx,eax
c001fa22:	59                   	pop    ecx
c001fa23:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fa27:	50                   	push   eax
c001fa28:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001fa2b:	50                   	push   eax
c001fa2c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fa30:	50                   	push   eax
c001fa31:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fa35:	50                   	push   eax
c001fa36:	56                   	push   esi
c001fa37:	e8 d9 fd ff ff       	call   c001f815 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001fa3c:	83 c4 20             	add    esp,0x20
c001fa3f:	84 c0                	test   al,al
c001fa41:	74 07                	je     c001fa4a <ISO9660::openDir(char const*, void**)+0x54>
c001fa43:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fa48:	75 21                	jne    c001fa6b <ISO9660::openDir(char const*, void**)+0x75>
c001fa4a:	0f b6 c0             	movzx  eax,al
c001fa4d:	52                   	push   edx
c001fa4e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fa52:	50                   	push   eax
c001fa53:	68 1e 8e 02 c0       	push   0xc0028e1e
c001fa58:	e8 1a 28 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001fa5d:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001fa61:	83 c4 10             	add    esp,0x10
c001fa64:	b8 01 00 00 00       	mov    eax,0x1
c001fa69:	eb 3b                	jmp    c001faa6 <ISO9660::openDir(char const*, void**)+0xb0>
c001fa6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa6f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001fa73:	89 03                	mov    DWORD PTR [ebx],eax
c001fa75:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001fa7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa80:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001fa87:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fa8e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001fa91:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001fa98:	8a 06                	mov    al,BYTE PTR [esi]
c001fa9a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001fa9d:	31 c0                	xor    eax,eax
c001fa9f:	eb 05                	jmp    c001faa6 <ISO9660::openDir(char const*, void**)+0xb0>
c001faa1:	b8 04 00 00 00       	mov    eax,0x4
c001faa6:	83 c4 10             	add    esp,0x10
c001faa9:	5b                   	pop    ebx
c001faaa:	5e                   	pop    esi
c001faab:	5f                   	pop    edi
c001faac:	c3                   	ret    
c001faad:	90                   	nop

c001faae <ISO9660::ISO9660()>:
c001faae:	83 ec 0c             	sub    esp,0xc
c001fab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab5:	83 ec 0c             	sub    esp,0xc
c001fab8:	50                   	push   eax
c001fab9:	e8 be 2a ff ff       	call   c001257c <Filesystem::Filesystem()>
c001fabe:	83 c4 10             	add    esp,0x10
c001fac1:	ba 44 8e 02 c0       	mov    edx,0xc0028e44
c001fac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faca:	89 10                	mov    DWORD PTR [eax],edx
c001facc:	90                   	nop
c001facd:	83 c4 0c             	add    esp,0xc
c001fad0:	c3                   	ret    
c001fad1:	90                   	nop

c001fad2 <SoundChannel::~SoundChannel()>:
c001fad2:	83 ec 0c             	sub    esp,0xc
c001fad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001fadc:	83 ec 0c             	sub    esp,0xc
c001fadf:	50                   	push   eax
c001fae0:	e8 99 f6 fe ff       	call   c000f17e <free>
c001fae5:	83 c4 10             	add    esp,0x10
c001fae8:	90                   	nop
c001fae9:	83 c4 0c             	add    esp,0xc
c001faec:	c3                   	ret    
c001faed:	90                   	nop

c001faee <SoundChannel::setSpeed(float)>:
c001faee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faf2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001faf6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001faf9:	c3                   	ret    

c001fafa <SoundChannel::getSpeed()>:
c001fafa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fafe:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001fb01:	c3                   	ret    

c001fb02 <SoundChannel::setVolume(int)>:
c001fb02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb06:	83 f8 64             	cmp    eax,0x64
c001fb09:	7e 05                	jle    c001fb10 <SoundChannel::setVolume(int)+0xe>
c001fb0b:	b8 64 00 00 00       	mov    eax,0x64
c001fb10:	85 c0                	test   eax,eax
c001fb12:	79 02                	jns    c001fb16 <SoundChannel::setVolume(int)+0x14>
c001fb14:	31 c0                	xor    eax,eax
c001fb16:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fb1a:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001fb1d:	c3                   	ret    

c001fb1e <SoundChannel::getVolume()>:
c001fb1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb22:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001fb25:	c3                   	ret    

c001fb26 <SoundChannel::pause()>:
c001fb26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb2a:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001fb2e:	c3                   	ret    
c001fb2f:	90                   	nop

c001fb30 <SoundChannel::SoundChannel(int, int, int, int)>:
c001fb30:	83 ec 1c             	sub    esp,0x1c
c001fb33:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fb37:	e8 ea ff ff ff       	call   c001fb26 <SoundChannel::pause()>
c001fb3c:	83 c4 04             	add    esp,0x4
c001fb3f:	6a 50                	push   0x50
c001fb41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fb45:	e8 b8 ff ff ff       	call   c001fb02 <SoundChannel::setVolume(int)>
c001fb4a:	83 c4 08             	add    esp,0x8
c001fb4d:	a1 bc 8e 02 c0       	mov    eax,ds:0xc0028ebc
c001fb52:	50                   	push   eax
c001fb53:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fb57:	e8 92 ff ff ff       	call   c001faee <SoundChannel::setSpeed(float)>
c001fb5c:	83 c4 08             	add    esp,0x8
c001fb5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb63:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001fb67:	89 10                	mov    DWORD PTR [eax],edx
c001fb69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb6d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fb71:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb78:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001fb7c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb7f:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001fb84:	75 23                	jne    c001fba9 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c001fb86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb8a:	8b 10                	mov    edx,DWORD PTR [eax]
c001fb8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb93:	0f af c2             	imul   eax,edx
c001fb96:	85 c0                	test   eax,eax
c001fb98:	79 03                	jns    c001fb9d <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c001fb9a:	83 c0 03             	add    eax,0x3
c001fb9d:	c1 f8 02             	sar    eax,0x2
c001fba0:	05 a0 0f 00 00       	add    eax,0xfa0
c001fba5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001fba9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fbad:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fbb1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001fbb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fbb8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001fbbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fbc3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001fbca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fbce:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001fbd1:	c1 e0 02             	shl    eax,0x2
c001fbd4:	83 ec 0c             	sub    esp,0xc
c001fbd7:	50                   	push   eax
c001fbd8:	e8 91 f5 fe ff       	call   c000f16e <malloc>
c001fbdd:	83 c4 10             	add    esp,0x10
c001fbe0:	89 c2                	mov    edx,eax
c001fbe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fbe6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001fbe9:	83 ec 04             	sub    esp,0x4
c001fbec:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fbf0:	50                   	push   eax
c001fbf1:	6a 01                	push   0x1
c001fbf3:	6a 04                	push   0x4
c001fbf5:	e8 6d 8d fe ff       	call   c0008967 <src_new>
c001fbfa:	83 c4 10             	add    esp,0x10
c001fbfd:	89 c2                	mov    edx,eax
c001fbff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fc03:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001fc06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc0a:	85 c0                	test   eax,eax
c001fc0c:	74 10                	je     c001fc1e <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c001fc0e:	83 ec 0c             	sub    esp,0xc
c001fc11:	68 a0 8e 02 c0       	push   0xc0028ea0
c001fc16:	e8 ec 8e ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c001fc1b:	83 c4 10             	add    esp,0x10
c001fc1e:	a0 40 c9 02 c0       	mov    al,ds:0xc002c940
c001fc23:	83 f0 01             	xor    eax,0x1
c001fc26:	84 c0                	test   al,al
c001fc28:	74 57                	je     c001fc81 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c001fc2a:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c001fc2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fc33:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fc3b:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c001fc43:	7f 35                	jg     c001fc7a <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c001fc45:	83 ec 0c             	sub    esp,0xc
c001fc48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fc4c:	e8 76 42 00 00       	call   c0023ec7 <__floatsisf>
c001fc51:	83 c4 10             	add    esp,0x10
c001fc54:	8b 15 c0 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028ec0
c001fc5a:	83 ec 08             	sub    esp,0x8
c001fc5d:	52                   	push   edx
c001fc5e:	50                   	push   eax
c001fc5f:	e8 75 3e 00 00       	call   c0023ad9 <__mulsf3>
c001fc64:	83 c4 10             	add    esp,0x10
c001fc67:	89 c2                	mov    edx,eax
c001fc69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc6d:	89 14 85 40 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ac0],edx
c001fc74:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fc78:	eb c1                	jmp    c001fc3b <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c001fc7a:	c6 05 40 c9 02 c0 01 	mov    BYTE PTR ds:0xc002c940,0x1
c001fc81:	90                   	nop
c001fc82:	83 c4 1c             	add    esp,0x1c
c001fc85:	c3                   	ret    

c001fc86 <SoundChannel::play()>:
c001fc86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc8a:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001fc8e:	c3                   	ret    
c001fc8f:	90                   	nop

c001fc90 <SoundChannel::paused()>:
c001fc90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc94:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001fc97:	c3                   	ret    

c001fc98 <SoundChannel::getSampleRate()>:
c001fc98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc9c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc9e:	c3                   	ret    
c001fc9f:	90                   	nop

c001fca0 <SoundChannel::getBits()>:
c001fca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fca4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fca7:	c3                   	ret    

c001fca8 <SoundChannel::getBufferUsed()>:
c001fca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcac:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001fcaf:	c3                   	ret    

c001fcb0 <SoundChannel::getBufferSize()>:
c001fcb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcb4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001fcb7:	c3                   	ret    

c001fcb8 <SoundChannel::unbuffer(float*, int, int)>:
c001fcb8:	56                   	push   esi
c001fcb9:	53                   	push   ebx
c001fcba:	83 ec 40             	sub    esp,0x40
c001fcbd:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001fcc1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001fcc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fcc8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001fccb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001fccf:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001fcd3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001fcd7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fcdb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fcdf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001fce3:	e8 df 41 00 00       	call   c0023ec7 <__floatsisf>
c001fce8:	5a                   	pop    edx
c001fce9:	89 c6                	mov    esi,eax
c001fceb:	ff 33                	push   DWORD PTR [ebx]
c001fced:	e8 d5 41 00 00       	call   c0023ec7 <__floatsisf>
c001fcf2:	59                   	pop    ecx
c001fcf3:	5a                   	pop    edx
c001fcf4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001fcf7:	50                   	push   eax
c001fcf8:	e8 dc 3d 00 00       	call   c0023ad9 <__mulsf3>
c001fcfd:	59                   	pop    ecx
c001fcfe:	5a                   	pop    edx
c001fcff:	50                   	push   eax
c001fd00:	56                   	push   esi
c001fd01:	e8 96 3f 00 00       	call   c0023c9c <__divsf3>
c001fd06:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd09:	e8 89 54 00 00       	call   c0025197 <__extendsfdf2>
c001fd0e:	59                   	pop    ecx
c001fd0f:	5e                   	pop    esi
c001fd10:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001fd14:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001fd18:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001fd20:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fd24:	50                   	push   eax
c001fd25:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001fd28:	e8 b4 88 fe ff       	call   c00085e1 <src_process>
c001fd2d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001fd31:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001fd34:	83 c4 0c             	add    esp,0xc
c001fd37:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001fd3a:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001fd3d:	29 d0                	sub    eax,edx
c001fd3f:	c1 e0 02             	shl    eax,0x2
c001fd42:	50                   	push   eax
c001fd43:	8d 04 91             	lea    eax,[ecx+edx*4]
c001fd46:	50                   	push   eax
c001fd47:	51                   	push   ecx
c001fd48:	e8 0a 09 fe ff       	call   c0000657 <memmove>
c001fd4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fd51:	83 c4 44             	add    esp,0x44
c001fd54:	5b                   	pop    ebx
c001fd55:	5e                   	pop    esi
c001fd56:	c3                   	ret    
c001fd57:	90                   	nop

c001fd58 <SoundChannel::buffer8(unsigned char*, int)>:
c001fd58:	55                   	push   ebp
c001fd59:	57                   	push   edi
c001fd5a:	56                   	push   esi
c001fd5b:	53                   	push   ebx
c001fd5c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd60:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001fd64:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c001fd67:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fd6b:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c001fd6e:	74 7a                	je     c001fdea <SoundChannel::buffer8(unsigned char*, int)+0x92>
c001fd70:	85 ff                	test   edi,edi
c001fd72:	7e 76                	jle    c001fdea <SoundChannel::buffer8(unsigned char*, int)+0x92>
c001fd74:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c001fd78:	8d 70 01             	lea    esi,[eax+0x1]
c001fd7b:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c001fd7e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fd81:	8b 1c 9d 40 c5 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3ac0]
c001fd88:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c001fd8b:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c001fd8e:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c001fd91:	74 5e                	je     c001fdf1 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c001fd93:	83 ff 01             	cmp    edi,0x1
c001fd96:	74 4b                	je     c001fde3 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c001fd98:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001fd9c:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c001fd9f:	8d 70 01             	lea    esi,[eax+0x1]
c001fda2:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fda5:	8b 1c 9d 40 c5 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3ac0]
c001fdac:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c001fdaf:	b8 02 00 00 00       	mov    eax,0x2
c001fdb4:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001fdb7:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c001fdba:	75 23                	jne    c001fddf <SoundChannel::buffer8(unsigned char*, int)+0x87>
c001fdbc:	eb 27                	jmp    c001fde5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c001fdbe:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c001fdc3:	8d 71 01             	lea    esi,[ecx+0x1]
c001fdc6:	40                   	inc    eax
c001fdc7:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fdca:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c001fdcd:	8b 1c 9d 40 c5 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3ac0]
c001fdd4:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001fdd7:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001fdda:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c001fddd:	74 06                	je     c001fde5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c001fddf:	39 c7                	cmp    edi,eax
c001fde1:	75 db                	jne    c001fdbe <SoundChannel::buffer8(unsigned char*, int)+0x66>
c001fde3:	89 f8                	mov    eax,edi
c001fde5:	5b                   	pop    ebx
c001fde6:	5e                   	pop    esi
c001fde7:	5f                   	pop    edi
c001fde8:	5d                   	pop    ebp
c001fde9:	c3                   	ret    
c001fdea:	5b                   	pop    ebx
c001fdeb:	31 c0                	xor    eax,eax
c001fded:	5e                   	pop    esi
c001fdee:	5f                   	pop    edi
c001fdef:	5d                   	pop    ebp
c001fdf0:	c3                   	ret    
c001fdf1:	b8 01 00 00 00       	mov    eax,0x1
c001fdf6:	eb ed                	jmp    c001fde5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c001fdf8 <SoundDevice::SoundDevice(char const*)>:
c001fdf8:	83 ec 1c             	sub    esp,0x1c
c001fdfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fdff:	83 ec 08             	sub    esp,0x8
c001fe02:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fe06:	50                   	push   eax
c001fe07:	e8 66 3a ff ff       	call   c0013872 <Device::Device(char const*)>
c001fe0c:	83 c4 10             	add    esp,0x10
c001fe0f:	ba cc 8e 02 c0       	mov    edx,0xc0028ecc
c001fe14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe18:	89 10                	mov    DWORD PTR [eax],edx
c001fe1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe1e:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001fe28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe2c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001fe36:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fe3e:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001fe43:	7f 19                	jg     c001fe5e <SoundDevice::SoundDevice(char const*)+0x66>
c001fe45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fe4d:	83 c2 54             	add    edx,0x54
c001fe50:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001fe58:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fe5c:	eb e0                	jmp    c001fe3e <SoundDevice::SoundDevice(char const*)+0x46>
c001fe5e:	90                   	nop
c001fe5f:	83 c4 1c             	add    esp,0x1c
c001fe62:	c3                   	ret    
c001fe63:	90                   	nop

c001fe64 <SoundDevice::~SoundDevice()>:
c001fe64:	53                   	push   ebx
c001fe65:	83 ec 18             	sub    esp,0x18
c001fe68:	ba cc 8e 02 c0       	mov    edx,0xc0028ecc
c001fe6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe71:	89 10                	mov    DWORD PTR [eax],edx
c001fe73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fe7b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001fe80:	7f 46                	jg     c001fec8 <SoundDevice::~SoundDevice()+0x64>
c001fe82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe86:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fe8a:	83 c2 54             	add    edx,0x54
c001fe8d:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001fe91:	85 c0                	test   eax,eax
c001fe93:	74 2d                	je     c001fec2 <SoundDevice::~SoundDevice()+0x5e>
c001fe95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fe9d:	83 c2 54             	add    edx,0x54
c001fea0:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001fea4:	85 db                	test   ebx,ebx
c001fea6:	74 1a                	je     c001fec2 <SoundDevice::~SoundDevice()+0x5e>
c001fea8:	83 ec 0c             	sub    esp,0xc
c001feab:	53                   	push   ebx
c001feac:	e8 21 fc ff ff       	call   c001fad2 <SoundChannel::~SoundChannel()>
c001feb1:	83 c4 10             	add    esp,0x10
c001feb4:	83 ec 08             	sub    esp,0x8
c001feb7:	6a 2c                	push   0x2c
c001feb9:	53                   	push   ebx
c001feba:	e8 d8 22 ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c001febf:	83 c4 10             	add    esp,0x10
c001fec2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fec6:	eb b3                	jmp    c001fe7b <SoundDevice::~SoundDevice()+0x17>
c001fec8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fecc:	83 ec 0c             	sub    esp,0xc
c001fecf:	50                   	push   eax
c001fed0:	e8 4f 36 ff ff       	call   c0013524 <Device::~Device()>
c001fed5:	83 c4 10             	add    esp,0x10
c001fed8:	90                   	nop
c001fed9:	83 c4 18             	add    esp,0x18
c001fedc:	5b                   	pop    ebx
c001fedd:	c3                   	ret    

c001fede <SoundDevice::~SoundDevice()>:
c001fede:	83 ec 0c             	sub    esp,0xc
c001fee1:	83 ec 0c             	sub    esp,0xc
c001fee4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fee8:	e8 77 ff ff ff       	call   c001fe64 <SoundDevice::~SoundDevice()>
c001feed:	83 c4 10             	add    esp,0x10
c001fef0:	83 ec 08             	sub    esp,0x8
c001fef3:	68 e4 01 00 00       	push   0x1e4
c001fef8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fefc:	e8 96 22 ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c001ff01:	83 c4 10             	add    esp,0x10
c001ff04:	83 c4 0c             	add    esp,0xc
c001ff07:	c3                   	ret    

c001ff08 <SoundDevice::getFreeChannelNum()>:
c001ff08:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ff0c:	31 c0                	xor    eax,eax
c001ff0e:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001ff16:	74 09                	je     c001ff21 <SoundDevice::getFreeChannelNum()+0x19>
c001ff18:	40                   	inc    eax
c001ff19:	83 f8 20             	cmp    eax,0x20
c001ff1c:	75 f0                	jne    c001ff0e <SoundDevice::getFreeChannelNum()+0x6>
c001ff1e:	83 c8 ff             	or     eax,0xffffffff
c001ff21:	c3                   	ret    

c001ff22 <SoundDevice::addChannel(SoundChannel*)>:
c001ff22:	56                   	push   esi
c001ff23:	53                   	push   ebx
c001ff24:	51                   	push   ecx
c001ff25:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ff29:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ff2d:	53                   	push   ebx
c001ff2e:	e8 d5 ff ff ff       	call   c001ff08 <SoundDevice::getFreeChannelNum()>
c001ff33:	5a                   	pop    edx
c001ff34:	83 f8 ff             	cmp    eax,0xffffffff
c001ff37:	74 51                	je     c001ff8a <SoundDevice::addChannel(SoundChannel*)+0x68>
c001ff39:	85 f6                	test   esi,esi
c001ff3b:	74 4d                	je     c001ff8a <SoundDevice::addChannel(SoundChannel*)+0x68>
c001ff3d:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001ff44:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001ff4b:	75 30                	jne    c001ff7d <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001ff4d:	83 ec 0c             	sub    esp,0xc
c001ff50:	56                   	push   esi
c001ff51:	e8 42 fd ff ff       	call   c001fc98 <SoundChannel::getSampleRate()>
c001ff56:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001ff5c:	89 34 24             	mov    DWORD PTR [esp],esi
c001ff5f:	e8 3c fd ff ff       	call   c001fca0 <SoundChannel::getBits()>
c001ff64:	83 c4 0c             	add    esp,0xc
c001ff67:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001ff6d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ff6f:	50                   	push   eax
c001ff70:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001ff76:	53                   	push   ebx
c001ff77:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001ff7a:	83 c4 10             	add    esp,0x10
c001ff7d:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001ff83:	b8 01 00 00 00       	mov    eax,0x1
c001ff88:	eb 03                	jmp    c001ff8d <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001ff8a:	83 c8 ff             	or     eax,0xffffffff
c001ff8d:	5a                   	pop    edx
c001ff8e:	5b                   	pop    ebx
c001ff8f:	5e                   	pop    esi
c001ff90:	c3                   	ret    
c001ff91:	90                   	nop

c001ff92 <SoundDevice::removeChannel(int)>:
c001ff92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff9a:	83 fa 1f             	cmp    edx,0x1f
c001ff9d:	77 23                	ja     c001ffc2 <SoundDevice::removeChannel(int)+0x30>
c001ff9f:	8d 14 90             	lea    edx,[eax+edx*4]
c001ffa2:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001ffa9:	74 17                	je     c001ffc2 <SoundDevice::removeChannel(int)+0x30>
c001ffab:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001ffb5:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001ffbb:	75 05                	jne    c001ffc2 <SoundDevice::removeChannel(int)+0x30>
c001ffbd:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffbf:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001ffc2:	c3                   	ret    
c001ffc3:	90                   	nop

c001ffc4 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001ffc4:	57                   	push   edi
c001ffc5:	56                   	push   esi
c001ffc6:	53                   	push   ebx
c001ffc7:	31 db                	xor    ebx,ebx
c001ffc9:	83 ec 10             	sub    esp,0x10
c001ffcc:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ffd0:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001ffd4:	0f 8d cb 00 00 00    	jge    c00200a5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c001ffda:	83 ec 0c             	sub    esp,0xc
c001ffdd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ffe1:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c001ffe4:	e8 ae 51 00 00       	call   c0025197 <__extendsfdf2>
c001ffe9:	83 c4 10             	add    esp,0x10
c001ffec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fff0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fff4:	68 00 00 f0 3f       	push   0x3ff00000
c001fff9:	6a 00                	push   0x0
c001fffb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ffff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020003:	e8 1b 41 00 00       	call   c0024123 <__adddf3>
c0020008:	83 c4 10             	add    esp,0x10
c002000b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002000f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020013:	68 00 00 e0 3f       	push   0x3fe00000
c0020018:	6a 00                	push   0x0
c002001a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002001e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020022:	e8 79 47 00 00       	call   c00247a0 <__muldf3>
c0020027:	83 c4 10             	add    esp,0x10
c002002a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002002e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020032:	68 00 00 60 40       	push   0x40600000
c0020037:	6a 00                	push   0x0
c0020039:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002003d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020041:	e8 5a 47 00 00       	call   c00247a0 <__muldf3>
c0020046:	59                   	pop    ecx
c0020047:	5f                   	pop    edi
c0020048:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002004c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0020050:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020054:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020058:	e8 16 50 00 00       	call   c0025073 <__truncdfsf2>
c002005d:	5a                   	pop    edx
c002005e:	89 c7                	mov    edi,eax
c0020060:	59                   	pop    ecx
c0020061:	68 00 00 fe 42       	push   0x42fe0000
c0020066:	50                   	push   eax
c0020067:	e8 b1 40 00 00       	call   c002411d <__gesf2>
c002006c:	83 c4 10             	add    esp,0x10
c002006f:	85 c0                	test   eax,eax
c0020071:	78 06                	js     c0020079 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0020073:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0020077:	eb 26                	jmp    c002009f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0020079:	50                   	push   eax
c002007a:	50                   	push   eax
c002007b:	6a 00                	push   0x0
c002007d:	57                   	push   edi
c002007e:	e8 9e 40 00 00       	call   c0024121 <__lesf2>
c0020083:	83 c4 10             	add    esp,0x10
c0020086:	85 c0                	test   eax,eax
c0020088:	7f 06                	jg     c0020090 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002008a:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002008e:	eb 0f                	jmp    c002009f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0020090:	83 ec 0c             	sub    esp,0xc
c0020093:	57                   	push   edi
c0020094:	e8 93 51 00 00       	call   c002522c <lrintf>
c0020099:	83 c4 10             	add    esp,0x10
c002009c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002009f:	43                   	inc    ebx
c00200a0:	e9 2b ff ff ff       	jmp    c001ffd0 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00200a5:	83 c4 10             	add    esp,0x10
c00200a8:	5b                   	pop    ebx
c00200a9:	5e                   	pop    esi
c00200aa:	5f                   	pop    edi
c00200ab:	c3                   	ret    

c00200ac <SoundDevice::getAudio(int, float*, float*)>:
c00200ac:	55                   	push   ebp
c00200ad:	57                   	push   edi
c00200ae:	56                   	push   esi
c00200af:	53                   	push   ebx
c00200b0:	31 db                	xor    ebx,ebx
c00200b2:	83 ec 20             	sub    esp,0x20
c00200b5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00200b9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00200bd:	c1 e0 02             	shl    eax,0x2
c00200c0:	50                   	push   eax
c00200c1:	6a 00                	push   0x0
c00200c3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200c7:	e8 f9 05 fe ff       	call   c00006c5 <memset>
c00200cc:	83 c4 10             	add    esp,0x10
c00200cf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00200d3:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00200da:	85 c0                	test   eax,eax
c00200dc:	0f 84 d7 00 00 00    	je     c00201b9 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00200e2:	83 ec 0c             	sub    esp,0xc
c00200e5:	50                   	push   eax
c00200e6:	e8 a5 fb ff ff       	call   c001fc90 <SoundChannel::paused()>
c00200eb:	83 c4 10             	add    esp,0x10
c00200ee:	84 c0                	test   al,al
c00200f0:	0f 85 c3 00 00 00    	jne    c00201b9 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00200f6:	83 ec 0c             	sub    esp,0xc
c00200f9:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0020100:	e8 19 fa ff ff       	call   c001fb1e <SoundChannel::getVolume()>
c0020105:	83 c4 10             	add    esp,0x10
c0020108:	85 c0                	test   eax,eax
c002010a:	0f 84 a9 00 00 00    	je     c00201b9 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0020110:	83 ec 0c             	sub    esp,0xc
c0020113:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002011a:	e8 ff f9 ff ff       	call   c001fb1e <SoundChannel::getVolume()>
c002011f:	83 ec 0c             	sub    esp,0xc
c0020122:	50                   	push   eax
c0020123:	e8 9f 3d 00 00       	call   c0023ec7 <__floatsisf>
c0020128:	59                   	pop    ecx
c0020129:	5d                   	pop    ebp
c002012a:	31 ed                	xor    ebp,ebp
c002012c:	68 00 00 c8 42       	push   0x42c80000
c0020131:	50                   	push   eax
c0020132:	e8 65 3b 00 00       	call   c0023c9c <__divsf3>
c0020137:	83 c4 10             	add    esp,0x10
c002013a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002013e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0020142:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0020148:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002014c:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0020153:	e8 60 fb ff ff       	call   c001fcb8 <SoundChannel::unbuffer(float*, int, int)>
c0020158:	83 c4 20             	add    esp,0x20
c002015b:	89 c1                	mov    ecx,eax
c002015d:	39 cd                	cmp    ebp,ecx
c002015f:	7d 52                	jge    c00201b3 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0020161:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020165:	50                   	push   eax
c0020166:	50                   	push   eax
c0020167:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002016b:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002016e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020172:	e8 62 39 00 00       	call   c0023ad9 <__mulsf3>
c0020177:	5a                   	pop    edx
c0020178:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002017c:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0020182:	e8 40 3d 00 00       	call   c0023ec7 <__floatsisf>
c0020187:	59                   	pop    ecx
c0020188:	5a                   	pop    edx
c0020189:	50                   	push   eax
c002018a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002018e:	e8 09 3b 00 00       	call   c0023c9c <__divsf3>
c0020193:	59                   	pop    ecx
c0020194:	5a                   	pop    edx
c0020195:	50                   	push   eax
c0020196:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002019a:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002019d:	e8 14 36 00 00       	call   c00237b6 <__addsf3>
c00201a2:	83 c4 10             	add    esp,0x10
c00201a5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00201a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00201ad:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00201b0:	45                   	inc    ebp
c00201b1:	eb aa                	jmp    c002015d <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00201b3:	39 cf                	cmp    edi,ecx
c00201b5:	7e 02                	jle    c00201b9 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00201b7:	89 cf                	mov    edi,ecx
c00201b9:	43                   	inc    ebx
c00201ba:	83 fb 20             	cmp    ebx,0x20
c00201bd:	0f 85 10 ff ff ff    	jne    c00200d3 <SoundDevice::getAudio(int, float*, float*)+0x27>
c00201c3:	83 c4 1c             	add    esp,0x1c
c00201c6:	89 f8                	mov    eax,edi
c00201c8:	5b                   	pop    ebx
c00201c9:	5e                   	pop    esi
c00201ca:	5f                   	pop    edi
c00201cb:	5d                   	pop    ebp
c00201cc:	c3                   	ret    
c00201cd:	90                   	nop

c00201ce <PCI::open(int, int, void*)>:
c00201ce:	83 ec 18             	sub    esp,0x18
c00201d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00201d5:	8b 10                	mov    edx,DWORD PTR [eax]
c00201d7:	50                   	push   eax
c00201d8:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00201db:	31 c0                	xor    eax,eax
c00201dd:	83 c4 1c             	add    esp,0x1c
c00201e0:	c3                   	ret    
c00201e1:	90                   	nop

c00201e2 <PCI::close(int, int, void*)>:
c00201e2:	31 c0                	xor    eax,eax
c00201e4:	c3                   	ret    
c00201e5:	90                   	nop

c00201e6 <PCI::PCI()>:
c00201e6:	83 ec 0c             	sub    esp,0xc
c00201e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ed:	83 ec 08             	sub    esp,0x8
c00201f0:	68 fc 8e 02 c0       	push   0xc0028efc
c00201f5:	50                   	push   eax
c00201f6:	e8 03 2d ff ff       	call   c0012efe <Bus::Bus(char const*)>
c00201fb:	83 c4 10             	add    esp,0x10
c00201fe:	ba 88 8f 02 c0       	mov    edx,0xc0028f88
c0020203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020207:	89 10                	mov    DWORD PTR [eax],edx
c0020209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002020d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020213:	0f b6 d0             	movzx  edx,al
c0020216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002021a:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0020221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020225:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002022b:	0f b6 d0             	movzx  edx,al
c002022e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020232:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0020237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002023b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020241:	8d 50 01             	lea    edx,[eax+0x1]
c0020244:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020248:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002024e:	0f b6 d0             	movzx  edx,al
c0020251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020255:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020259:	83 c9 c0             	or     ecx,0xffffffc0
c002025c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020260:	90                   	nop
c0020261:	83 c4 0c             	add    esp,0xc
c0020264:	c3                   	ret    
c0020265:	90                   	nop

c0020266 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0020266:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002026a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002026f:	89 ca                	mov    edx,ecx
c0020271:	c1 e0 10             	shl    eax,0x10
c0020274:	81 e2 fc 00 00 00    	and    edx,0xfc
c002027a:	09 d0                	or     eax,edx
c002027c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0020281:	c1 e2 08             	shl    edx,0x8
c0020284:	09 d0                	or     eax,edx
c0020286:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c002028b:	c1 e2 0b             	shl    edx,0xb
c002028e:	09 d0                	or     eax,edx
c0020290:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020295:	0d 00 00 00 80       	or     eax,0x80000000
c002029a:	ef                   	out    dx,eax
c002029b:	ba fc 0c 00 00       	mov    edx,0xcfc
c00202a0:	ed                   	in     eax,dx
c00202a1:	83 e1 02             	and    ecx,0x2
c00202a4:	0f b6 c9             	movzx  ecx,cl
c00202a7:	c1 e1 03             	shl    ecx,0x3
c00202aa:	d3 e8                	shr    eax,cl
c00202ac:	c3                   	ret    
c00202ad:	90                   	nop

c00202ae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00202ae:	6a 00                	push   0x0
c00202b0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00202b5:	50                   	push   eax
c00202b6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00202bb:	50                   	push   eax
c00202bc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00202c1:	50                   	push   eax
c00202c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00202c6:	e8 9b ff ff ff       	call   c0020266 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00202cb:	83 c4 14             	add    esp,0x14
c00202ce:	c3                   	ret    
c00202cf:	90                   	nop

c00202d0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00202d0:	6a 0e                	push   0xe
c00202d2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00202d7:	50                   	push   eax
c00202d8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00202dd:	50                   	push   eax
c00202de:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00202e3:	50                   	push   eax
c00202e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00202e8:	e8 79 ff ff ff       	call   c0020266 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00202ed:	83 c4 14             	add    esp,0x14
c00202f0:	0f b6 c0             	movzx  eax,al
c00202f3:	c3                   	ret    

c00202f4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00202f4:	55                   	push   ebp
c00202f5:	57                   	push   edi
c00202f6:	56                   	push   esi
c00202f7:	53                   	push   ebx
c00202f8:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00202fd:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0020302:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0020307:	6a 0a                	push   0xa
c0020309:	56                   	push   esi
c002030a:	55                   	push   ebp
c002030b:	57                   	push   edi
c002030c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020310:	e8 51 ff ff ff       	call   c0020266 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020315:	6a 0a                	push   0xa
c0020317:	89 c3                	mov    ebx,eax
c0020319:	56                   	push   esi
c002031a:	0f b6 db             	movzx  ebx,bl
c002031d:	55                   	push   ebp
c002031e:	57                   	push   edi
c002031f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020323:	e8 3e ff ff ff       	call   c0020266 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020328:	83 c4 28             	add    esp,0x28
c002032b:	25 00 ff 00 00       	and    eax,0xff00
c0020330:	09 d8                	or     eax,ebx
c0020332:	5b                   	pop    ebx
c0020333:	5e                   	pop    esi
c0020334:	5f                   	pop    edi
c0020335:	5d                   	pop    ebp
c0020336:	c3                   	ret    
c0020337:	90                   	nop

c0020338 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0020338:	6a 08                	push   0x8
c002033a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002033f:	50                   	push   eax
c0020340:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020345:	50                   	push   eax
c0020346:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002034b:	50                   	push   eax
c002034c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020350:	e8 11 ff ff ff       	call   c0020266 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020355:	83 c4 14             	add    esp,0x14
c0020358:	0f b6 c4             	movzx  eax,ah
c002035b:	c3                   	ret    

c002035c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002035c:	6a 08                	push   0x8
c002035e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020363:	50                   	push   eax
c0020364:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020369:	50                   	push   eax
c002036a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002036f:	50                   	push   eax
c0020370:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020374:	e8 ed fe ff ff       	call   c0020266 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020379:	83 c4 14             	add    esp,0x14
c002037c:	c3                   	ret    
c002037d:	90                   	nop

c002037e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002037e:	6a 3c                	push   0x3c
c0020380:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020385:	50                   	push   eax
c0020386:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002038b:	50                   	push   eax
c002038c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020391:	50                   	push   eax
c0020392:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020396:	e8 cb fe ff ff       	call   c0020266 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002039b:	83 c4 14             	add    esp,0x14
c002039e:	c3                   	ret    
c002039f:	90                   	nop

c00203a0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00203a0:	6a 18                	push   0x18
c00203a2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00203a7:	50                   	push   eax
c00203a8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00203ad:	50                   	push   eax
c00203ae:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00203b3:	50                   	push   eax
c00203b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00203b8:	e8 a9 fe ff ff       	call   c0020266 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00203bd:	83 c4 14             	add    esp,0x14
c00203c0:	0f b6 c4             	movzx  eax,ah
c00203c3:	c3                   	ret    

c00203c4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00203c4:	55                   	push   ebp
c00203c5:	57                   	push   edi
c00203c6:	56                   	push   esi
c00203c7:	53                   	push   ebx
c00203c8:	50                   	push   eax
c00203c9:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00203cd:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00203d2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00203d7:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00203dc:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00203e3:	8d 43 12             	lea    eax,[ebx+0x12]
c00203e6:	83 c3 10             	add    ebx,0x10
c00203e9:	0f b6 c0             	movzx  eax,al
c00203ec:	0f b6 db             	movzx  ebx,bl
c00203ef:	50                   	push   eax
c00203f0:	51                   	push   ecx
c00203f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00203f5:	57                   	push   edi
c00203f6:	55                   	push   ebp
c00203f7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00203fb:	e8 66 fe ff ff       	call   c0020266 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020400:	53                   	push   ebx
c0020401:	89 c6                	mov    esi,eax
c0020403:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020407:	c1 e6 10             	shl    esi,0x10
c002040a:	51                   	push   ecx
c002040b:	57                   	push   edi
c002040c:	55                   	push   ebp
c002040d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020411:	e8 50 fe ff ff       	call   c0020266 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020416:	83 c4 2c             	add    esp,0x2c
c0020419:	0f b7 c0             	movzx  eax,ax
c002041c:	5b                   	pop    ebx
c002041d:	09 f0                	or     eax,esi
c002041f:	5e                   	pop    esi
c0020420:	5f                   	pop    edi
c0020421:	5d                   	pop    ebp
c0020422:	c3                   	ret    
c0020423:	90                   	nop

c0020424 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0020424:	53                   	push   ebx
c0020425:	ba f8 0c 00 00       	mov    edx,0xcf8
c002042a:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002042f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020433:	c1 e1 10             	shl    ecx,0x10
c0020436:	25 fc 00 00 00       	and    eax,0xfc
c002043b:	09 c1                	or     ecx,eax
c002043d:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020442:	c1 e0 08             	shl    eax,0x8
c0020445:	09 c1                	or     ecx,eax
c0020447:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c002044c:	c1 e0 0b             	shl    eax,0xb
c002044f:	09 c1                	or     ecx,eax
c0020451:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0020457:	89 c8                	mov    eax,ecx
c0020459:	ef                   	out    dx,eax
c002045a:	ba fc 0c 00 00       	mov    edx,0xcfc
c002045f:	ed                   	in     eax,dx
c0020460:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0020465:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c002046a:	74 0a                	je     c0020476 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c002046c:	0f b7 d8             	movzx  ebx,ax
c002046f:	89 d0                	mov    eax,edx
c0020471:	c1 e0 10             	shl    eax,0x10
c0020474:	eb 05                	jmp    c002047b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0020476:	66 31 c0             	xor    ax,ax
c0020479:	89 d3                	mov    ebx,edx
c002047b:	09 c3                	or     ebx,eax
c002047d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020482:	89 c8                	mov    eax,ecx
c0020484:	ef                   	out    dx,eax
c0020485:	ba fc 0c 00 00       	mov    edx,0xcfc
c002048a:	89 d8                	mov    eax,ebx
c002048c:	ef                   	out    dx,eax
c002048d:	5b                   	pop    ebx
c002048e:	c3                   	ret    
c002048f:	90                   	nop

c0020490 <PCI::checkBus(unsigned char)>:
c0020490:	56                   	push   esi
c0020491:	53                   	push   ebx
c0020492:	31 db                	xor    ebx,ebx
c0020494:	51                   	push   ecx
c0020495:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002049a:	52                   	push   edx
c002049b:	53                   	push   ebx
c002049c:	43                   	inc    ebx
c002049d:	56                   	push   esi
c002049e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204a2:	e8 29 03 00 00       	call   c00207d0 <PCI::checkDevice(unsigned char, unsigned char)>
c00204a7:	83 c4 10             	add    esp,0x10
c00204aa:	83 fb 20             	cmp    ebx,0x20
c00204ad:	75 eb                	jne    c002049a <PCI::checkBus(unsigned char)+0xa>
c00204af:	58                   	pop    eax
c00204b0:	5b                   	pop    ebx
c00204b1:	5e                   	pop    esi
c00204b2:	c3                   	ret    
c00204b3:	90                   	nop

c00204b4 <PCI::foundDevice(PCIDeviceInfo)>:
c00204b4:	55                   	push   ebp
c00204b5:	57                   	push   edi
c00204b6:	56                   	push   esi
c00204b7:	53                   	push   ebx
c00204b8:	83 ec 1c             	sub    esp,0x1c
c00204bb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00204bf:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00204c5:	0f 84 51 01 00 00    	je     c002061c <PCI::foundDevice(PCIDeviceInfo)+0x168>
c00204cb:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00204cf:	66 81 f9 06 04       	cmp    cx,0x406
c00204d4:	75 2c                	jne    c0020502 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00204d6:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00204db:	50                   	push   eax
c00204dc:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00204e1:	50                   	push   eax
c00204e2:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00204e7:	50                   	push   eax
c00204e8:	56                   	push   esi
c00204e9:	e8 b2 fe ff ff       	call   c00203a0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00204ee:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00204f2:	0f b6 c0             	movzx  eax,al
c00204f5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00204f9:	83 c4 2c             	add    esp,0x2c
c00204fc:	5b                   	pop    ebx
c00204fd:	5e                   	pop    esi
c00204fe:	5f                   	pop    edi
c00204ff:	5d                   	pop    ebp
c0020500:	eb 8e                	jmp    c0020490 <PCI::checkBus(unsigned char)>
c0020502:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020506:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c002050c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020510:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0020514:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0020518:	88 d3                	mov    bl,dl
c002051a:	85 c0                	test   eax,eax
c002051c:	74 33                	je     c0020551 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002051e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0020521:	85 d2                	test   edx,edx
c0020523:	74 28                	je     c002054d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020525:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c002052b:	31 ef                	xor    edi,ebp
c002052d:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0020533:	75 18                	jne    c002054d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020535:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020539:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c002053f:	75 0c                	jne    c002054d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020541:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0020547:	0f 84 cf 00 00 00    	je     c002061c <PCI::foundDevice(PCIDeviceInfo)+0x168>
c002054d:	8b 00                	mov    eax,DWORD PTR [eax]
c002054f:	eb c9                	jmp    c002051a <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0020551:	66 81 f9 01 06       	cmp    cx,0x601
c0020556:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c002055a:	75 18                	jne    c0020574 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c002055c:	83 ec 0c             	sub    esp,0xc
c002055f:	68 58 01 00 00       	push   0x158
c0020564:	e8 1f 1c ff ff       	call   c0012188 <operator new(unsigned long)>
c0020569:	59                   	pop    ecx
c002056a:	89 c5                	mov    ebp,eax
c002056c:	5f                   	pop    edi
c002056d:	68 04 8f 02 c0       	push   0xc0028f04
c0020572:	eb 7d                	jmp    c00205f1 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c0020574:	66 81 f9 01 01       	cmp    cx,0x101
c0020579:	75 60                	jne    c00205db <PCI::foundDevice(PCIDeviceInfo)+0x127>
c002057b:	83 ec 0c             	sub    esp,0xc
c002057e:	68 70 02 00 00       	push   0x270
c0020583:	e8 00 1c ff ff       	call   c0012188 <operator new(unsigned long)>
c0020588:	89 04 24             	mov    DWORD PTR [esp],eax
c002058b:	89 c5                	mov    ebp,eax
c002058d:	e8 02 03 00 00       	call   c0020894 <IDE::IDE()>
c0020592:	58                   	pop    eax
c0020593:	5a                   	pop    edx
c0020594:	55                   	push   ebp
c0020595:	56                   	push   esi
c0020596:	e8 e7 30 ff ff       	call   c0013682 <Device::addChild(Device*)>
c002059b:	83 ec 1c             	sub    esp,0x1c
c002059e:	b9 09 00 00 00       	mov    ecx,0x9
c00205a3:	fc                   	cld    
c00205a4:	89 e7                	mov    edi,esp
c00205a6:	89 de                	mov    esi,ebx
c00205a8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00205aa:	55                   	push   ebp
c00205ab:	e8 ac 2f ff ff       	call   c001355c <Device::preOpenPCI(PCIDeviceInfo)>
c00205b0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00205b3:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00205b7:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00205bf:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00205c7:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00205cf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00205d2:	83 c4 4c             	add    esp,0x4c
c00205d5:	5b                   	pop    ebx
c00205d6:	5e                   	pop    esi
c00205d7:	5f                   	pop    edi
c00205d8:	5d                   	pop    ebp
c00205d9:	ff e0                	jmp    eax
c00205db:	83 ec 0c             	sub    esp,0xc
c00205de:	68 58 01 00 00       	push   0x158
c00205e3:	e8 a0 1b ff ff       	call   c0012188 <operator new(unsigned long)>
c00205e8:	59                   	pop    ecx
c00205e9:	89 c5                	mov    ebp,eax
c00205eb:	5f                   	pop    edi
c00205ec:	68 23 8f 02 c0       	push   0xc0028f23
c00205f1:	55                   	push   ebp
c00205f2:	e8 77 33 ff ff       	call   c001396e <DriverlessDevice::DriverlessDevice(char const*)>
c00205f7:	58                   	pop    eax
c00205f8:	5a                   	pop    edx
c00205f9:	55                   	push   ebp
c00205fa:	56                   	push   esi
c00205fb:	e8 82 30 ff ff       	call   c0013682 <Device::addChild(Device*)>
c0020600:	b9 09 00 00 00       	mov    ecx,0x9
c0020605:	fc                   	cld    
c0020606:	89 df                	mov    edi,ebx
c0020608:	89 de                	mov    esi,ebx
c002060a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002060c:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0020610:	83 c4 2c             	add    esp,0x2c
c0020613:	5b                   	pop    ebx
c0020614:	5e                   	pop    esi
c0020615:	5f                   	pop    edi
c0020616:	5d                   	pop    ebp
c0020617:	e9 40 2f ff ff       	jmp    c001355c <Device::preOpenPCI(PCIDeviceInfo)>
c002061c:	83 c4 1c             	add    esp,0x1c
c002061f:	5b                   	pop    ebx
c0020620:	5e                   	pop    esi
c0020621:	5f                   	pop    edi
c0020622:	5d                   	pop    ebp
c0020623:	c3                   	ret    

c0020624 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0020624:	55                   	push   ebp
c0020625:	57                   	push   edi
c0020626:	56                   	push   esi
c0020627:	53                   	push   ebx
c0020628:	83 ec 5c             	sub    esp,0x5c
c002062b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c002062f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020633:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0020637:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c002063c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020640:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0020644:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0020649:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002064d:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0020652:	6a 0c                	push   0xc
c0020654:	55                   	push   ebp
c0020655:	53                   	push   ebx
c0020656:	57                   	push   edi
c0020657:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c002065e:	e8 03 fc ff ff       	call   c0020266 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020663:	55                   	push   ebp
c0020664:	53                   	push   ebx
c0020665:	57                   	push   edi
c0020666:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002066d:	e8 82 fc ff ff       	call   c00202f4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0020672:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0020677:	83 c4 24             	add    esp,0x24
c002067a:	55                   	push   ebp
c002067b:	53                   	push   ebx
c002067c:	57                   	push   edi
c002067d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0020681:	e8 f8 fc ff ff       	call   c002037e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0020686:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002068a:	6a 3c                	push   0x3c
c002068c:	55                   	push   ebp
c002068d:	53                   	push   ebx
c002068e:	57                   	push   edi
c002068f:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0020696:	e8 cb fb ff ff       	call   c0020266 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002069b:	0f b6 c4             	movzx  eax,ah
c002069e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00206a2:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00206a6:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c00206aa:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c00206af:	83 c4 24             	add    esp,0x24
c00206b2:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00206b8:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c00206bf:	74 6c                	je     c002072d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00206c1:	31 f6                	xor    esi,esi
c00206c3:	8b 15 88 a6 02 c0    	mov    edx,DWORD PTR ds:0xc002a688
c00206c9:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00206cf:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c00206d5:	7e 56                	jle    c002072d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00206d7:	8d 14 f2             	lea    edx,[edx+esi*8]
c00206da:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00206e1:	39 cb                	cmp    ebx,ecx
c00206e3:	75 45                	jne    c002072a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00206e5:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00206ec:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c00206f0:	75 38                	jne    c002072a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00206f2:	83 ec 0c             	sub    esp,0xc
c00206f5:	68 3d 8f 02 c0       	push   0xc0028f3d
c00206fa:	e8 78 1b ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00206ff:	8b 15 88 a6 02 c0    	mov    edx,DWORD PTR ds:0xc002a688
c0020705:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c002070b:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0020713:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0020717:	52                   	push   edx
c0020718:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002071c:	53                   	push   ebx
c002071d:	68 62 8f 02 c0       	push   0xc0028f62
c0020722:	e8 50 1b ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0020727:	83 c4 20             	add    esp,0x20
c002072a:	46                   	inc    esi
c002072b:	eb 96                	jmp    c00206c3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c002072d:	31 d2                	xor    edx,edx
c002072f:	83 ec 0c             	sub    esp,0xc
c0020732:	55                   	push   ebp
c0020733:	53                   	push   ebx
c0020734:	57                   	push   edi
c0020735:	52                   	push   edx
c0020736:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002073a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0020741:	e8 7e fc ff ff       	call   c00203c4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020746:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c002074a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002074e:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0020752:	42                   	inc    edx
c0020753:	83 c4 20             	add    esp,0x20
c0020756:	83 fa 06             	cmp    edx,0x6
c0020759:	75 d4                	jne    c002072f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c002075b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002075f:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0020763:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0020767:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c002076b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002076f:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0020773:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0020778:	86 e0                	xchg   al,ah
c002077a:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c002077f:	55                   	push   ebp
c0020780:	53                   	push   ebx
c0020781:	57                   	push   edi
c0020782:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0020786:	e8 ad fb ff ff       	call   c0020338 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002078b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002078f:	55                   	push   ebp
c0020790:	53                   	push   ebx
c0020791:	57                   	push   edi
c0020792:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0020799:	e8 10 fb ff ff       	call   c00202ae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002079e:	83 ec 0c             	sub    esp,0xc
c00207a1:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c00207a6:	b9 09 00 00 00       	mov    ecx,0x9
c00207ab:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c00207af:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c00207b3:	fc                   	cld    
c00207b4:	89 e7                	mov    edi,esp
c00207b6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00207b8:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00207bf:	e8 f0 fc ff ff       	call   c00204b4 <PCI::foundDevice(PCIDeviceInfo)>
c00207c4:	81 c4 8c 00 00 00    	add    esp,0x8c
c00207ca:	5b                   	pop    ebx
c00207cb:	5e                   	pop    esi
c00207cc:	5f                   	pop    edi
c00207cd:	5d                   	pop    ebp
c00207ce:	c3                   	ret    
c00207cf:	90                   	nop

c00207d0 <PCI::checkDevice(unsigned char, unsigned char)>:
c00207d0:	55                   	push   ebp
c00207d1:	57                   	push   edi
c00207d2:	56                   	push   esi
c00207d3:	53                   	push   ebx
c00207d4:	83 ec 0c             	sub    esp,0xc
c00207d7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00207db:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00207e0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00207e5:	6a 00                	push   0x0
c00207e7:	56                   	push   esi
c00207e8:	57                   	push   edi
c00207e9:	55                   	push   ebp
c00207ea:	e8 bf fa ff ff       	call   c00202ae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00207ef:	6a 00                	push   0x0
c00207f1:	56                   	push   esi
c00207f2:	57                   	push   edi
c00207f3:	55                   	push   ebp
c00207f4:	e8 2b fe ff ff       	call   c0020624 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00207f9:	83 c4 20             	add    esp,0x20
c00207fc:	6a 00                	push   0x0
c00207fe:	56                   	push   esi
c00207ff:	57                   	push   edi
c0020800:	55                   	push   ebp
c0020801:	e8 ca fa ff ff       	call   c00202d0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0020806:	83 c4 10             	add    esp,0x10
c0020809:	84 c0                	test   al,al
c002080b:	79 27                	jns    c0020834 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002080d:	bb 01 00 00 00       	mov    ebx,0x1
c0020812:	53                   	push   ebx
c0020813:	56                   	push   esi
c0020814:	57                   	push   edi
c0020815:	55                   	push   ebp
c0020816:	e8 93 fa ff ff       	call   c00202ae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002081b:	83 c4 10             	add    esp,0x10
c002081e:	66 40                	inc    ax
c0020820:	74 0c                	je     c002082e <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0020822:	53                   	push   ebx
c0020823:	56                   	push   esi
c0020824:	57                   	push   edi
c0020825:	55                   	push   ebp
c0020826:	e8 f9 fd ff ff       	call   c0020624 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002082b:	83 c4 10             	add    esp,0x10
c002082e:	43                   	inc    ebx
c002082f:	83 fb 08             	cmp    ebx,0x8
c0020832:	75 de                	jne    c0020812 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0020834:	83 c4 0c             	add    esp,0xc
c0020837:	5b                   	pop    ebx
c0020838:	5e                   	pop    esi
c0020839:	5f                   	pop    edi
c002083a:	5d                   	pop    ebp
c002083b:	c3                   	ret    

c002083c <PCI::detect()>:
c002083c:	56                   	push   esi
c002083d:	53                   	push   ebx
c002083e:	53                   	push   ebx
c002083f:	31 db                	xor    ebx,ebx
c0020841:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020845:	6a 00                	push   0x0
c0020847:	6a 00                	push   0x0
c0020849:	6a 00                	push   0x0
c002084b:	56                   	push   esi
c002084c:	e8 7f fa ff ff       	call   c00202d0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0020851:	83 c4 10             	add    esp,0x10
c0020854:	a8 80                	test   al,0x80
c0020856:	75 21                	jne    c0020879 <PCI::detect()+0x3d>
c0020858:	51                   	push   ecx
c0020859:	51                   	push   ecx
c002085a:	6a 00                	push   0x0
c002085c:	56                   	push   esi
c002085d:	e8 2e fc ff ff       	call   c0020490 <PCI::checkBus(unsigned char)>
c0020862:	83 c4 10             	add    esp,0x10
c0020865:	eb 24                	jmp    c002088b <PCI::detect()+0x4f>
c0020867:	52                   	push   edx
c0020868:	52                   	push   edx
c0020869:	53                   	push   ebx
c002086a:	43                   	inc    ebx
c002086b:	56                   	push   esi
c002086c:	e8 1f fc ff ff       	call   c0020490 <PCI::checkBus(unsigned char)>
c0020871:	83 c4 10             	add    esp,0x10
c0020874:	83 fb 08             	cmp    ebx,0x8
c0020877:	74 12                	je     c002088b <PCI::detect()+0x4f>
c0020879:	53                   	push   ebx
c002087a:	6a 00                	push   0x0
c002087c:	6a 00                	push   0x0
c002087e:	56                   	push   esi
c002087f:	e8 2a fa ff ff       	call   c00202ae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020884:	83 c4 10             	add    esp,0x10
c0020887:	66 40                	inc    ax
c0020889:	74 dc                	je     c0020867 <PCI::detect()+0x2b>
c002088b:	58                   	pop    eax
c002088c:	5b                   	pop    ebx
c002088d:	5e                   	pop    esi
c002088e:	c3                   	ret    
c002088f:	90                   	nop

c0020890 <IDE::close(int, int, void*)>:
c0020890:	83 c8 ff             	or     eax,0xffffffff
c0020893:	c3                   	ret    

c0020894 <IDE::IDE()>:
c0020894:	83 ec 0c             	sub    esp,0xc
c0020897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002089b:	83 ec 08             	sub    esp,0x8
c002089e:	68 ac 8f 02 c0       	push   0xc0028fac
c00208a3:	50                   	push   eax
c00208a4:	e8 5b 31 ff ff       	call   c0013a04 <HardDiskController::HardDiskController(char const*)>
c00208a9:	83 c4 10             	add    esp,0x10
c00208ac:	ba ec 91 02 c0       	mov    edx,0xc00291ec
c00208b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208b5:	89 10                	mov    DWORD PTR [eax],edx
c00208b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208bb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00208c2:	90                   	nop
c00208c3:	83 c4 0c             	add    esp,0xc
c00208c6:	c3                   	ret    
c00208c7:	90                   	nop

c00208c8 <IDE::prepareInterrupt(unsigned char)>:
c00208c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00208cd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00208d1:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00208d9:	c3                   	ret    

c00208da <selectDrive(unsigned char, unsigned char)>:
c00208da:	c3                   	ret    
c00208db:	90                   	nop

c00208dc <IDE::getBase(unsigned char)>:
c00208dc:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00208e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00208e5:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00208ed:	c3                   	ret    

c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00208ee:	55                   	push   ebp
c00208ef:	57                   	push   edi
c00208f0:	56                   	push   esi
c00208f1:	53                   	push   ebx
c00208f2:	83 ec 1c             	sub    esp,0x1c
c00208f5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00208f9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00208fd:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0020900:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0020904:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020908:	80 f9 03             	cmp    cl,0x3
c002090b:	77 51                	ja     c002095e <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c002090d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020911:	0f b6 f2             	movzx  esi,dl
c0020914:	0f b6 db             	movzx  ebx,bl
c0020917:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002091a:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c002091e:	83 ca 80             	or     edx,0xffffff80
c0020921:	0f b6 d2             	movzx  edx,dl
c0020924:	52                   	push   edx
c0020925:	6a 0c                	push   0xc
c0020927:	56                   	push   esi
c0020928:	57                   	push   edi
c0020929:	e8 c0 ff ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c002092e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0020933:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020937:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002093b:	ee                   	out    dx,al
c002093c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0020941:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0020945:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0020949:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002094d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0020955:	83 c4 2c             	add    esp,0x2c
c0020958:	5b                   	pop    ebx
c0020959:	5e                   	pop    esi
c002095a:	5f                   	pop    edi
c002095b:	5d                   	pop    ebp
c002095c:	eb 90                	jmp    c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c002095e:	80 fb 07             	cmp    bl,0x7
c0020961:	77 12                	ja     c0020975 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0020963:	0f b6 d2             	movzx  edx,dl
c0020966:	0f b6 db             	movzx  ebx,bl
c0020969:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0020971:	89 da                	mov    edx,ebx
c0020973:	eb 2f                	jmp    c00209a4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0020975:	80 fb 0d             	cmp    bl,0xd
c0020978:	77 13                	ja     c002098d <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002097a:	0f b6 d2             	movzx  edx,dl
c002097d:	0f b6 db             	movzx  ebx,bl
c0020980:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0020987:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002098b:	eb 17                	jmp    c00209a4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002098d:	80 fb 15             	cmp    bl,0x15
c0020990:	77 13                	ja     c00209a5 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0020992:	0f b6 d2             	movzx  edx,dl
c0020995:	0f b6 db             	movzx  ebx,bl
c0020998:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00209a0:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00209a4:	ee                   	out    dx,al
c00209a5:	83 c4 1c             	add    esp,0x1c
c00209a8:	5b                   	pop    ebx
c00209a9:	5e                   	pop    esi
c00209aa:	5f                   	pop    edi
c00209ab:	5d                   	pop    ebp
c00209ac:	c3                   	ret    
c00209ad:	90                   	nop

c00209ae <IDE::read(unsigned char, unsigned char)>:
c00209ae:	55                   	push   ebp
c00209af:	57                   	push   edi
c00209b0:	56                   	push   esi
c00209b1:	53                   	push   ebx
c00209b2:	83 ec 1c             	sub    esp,0x1c
c00209b5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00209b9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00209bd:	8d 43 f8             	lea    eax,[ebx-0x8]
c00209c0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00209c4:	3c 03                	cmp    al,0x3
c00209c6:	77 43                	ja     c0020a0b <IDE::read(unsigned char, unsigned char)+0x5d>
c00209c8:	0f b6 f2             	movzx  esi,dl
c00209cb:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00209ce:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00209d2:	83 c8 80             	or     eax,0xffffff80
c00209d5:	0f b6 c0             	movzx  eax,al
c00209d8:	50                   	push   eax
c00209d9:	6a 0c                	push   0xc
c00209db:	56                   	push   esi
c00209dc:	57                   	push   edi
c00209dd:	e8 0c ff ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c00209e2:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00209e7:	0f b6 c3             	movzx  eax,bl
c00209ea:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00209ee:	ec                   	in     al,dx
c00209ef:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00209f3:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00209f8:	52                   	push   edx
c00209f9:	6a 0c                	push   0xc
c00209fb:	56                   	push   esi
c00209fc:	57                   	push   edi
c00209fd:	e8 ec fe ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020a02:	83 c4 20             	add    esp,0x20
c0020a05:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0020a09:	eb 49                	jmp    c0020a54 <IDE::read(unsigned char, unsigned char)+0xa6>
c0020a0b:	80 fb 07             	cmp    bl,0x7
c0020a0e:	77 12                	ja     c0020a22 <IDE::read(unsigned char, unsigned char)+0x74>
c0020a10:	0f b6 d2             	movzx  edx,dl
c0020a13:	0f b6 c3             	movzx  eax,bl
c0020a16:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0020a1e:	89 c2                	mov    edx,eax
c0020a20:	eb 31                	jmp    c0020a53 <IDE::read(unsigned char, unsigned char)+0xa5>
c0020a22:	80 fb 0d             	cmp    bl,0xd
c0020a25:	77 13                	ja     c0020a3a <IDE::read(unsigned char, unsigned char)+0x8c>
c0020a27:	0f b6 d2             	movzx  edx,dl
c0020a2a:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0020a31:	0f b6 d3             	movzx  edx,bl
c0020a34:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0020a38:	eb 19                	jmp    c0020a53 <IDE::read(unsigned char, unsigned char)+0xa5>
c0020a3a:	31 c0                	xor    eax,eax
c0020a3c:	80 fb 15             	cmp    bl,0x15
c0020a3f:	77 13                	ja     c0020a54 <IDE::read(unsigned char, unsigned char)+0xa6>
c0020a41:	0f b6 d2             	movzx  edx,dl
c0020a44:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0020a4c:	0f b6 d3             	movzx  edx,bl
c0020a4f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0020a53:	ec                   	in     al,dx
c0020a54:	83 c4 1c             	add    esp,0x1c
c0020a57:	5b                   	pop    ebx
c0020a58:	5e                   	pop    esi
c0020a59:	5f                   	pop    edi
c0020a5a:	5d                   	pop    ebp
c0020a5b:	c3                   	ret    

c0020a5c <IDE::waitInterrupt(unsigned char)>:
c0020a5c:	55                   	push   ebp
c0020a5d:	57                   	push   edi
c0020a5e:	56                   	push   esi
c0020a5f:	53                   	push   ebx
c0020a60:	31 db                	xor    ebx,ebx
c0020a62:	83 ec 0c             	sub    esp,0xc
c0020a65:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0020a69:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0020a6e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0020a76:	89 e8                	mov    eax,ebp
c0020a78:	84 c0                	test   al,al
c0020a7a:	75 34                	jne    c0020ab0 <IDE::waitInterrupt(unsigned char)+0x54>
c0020a7c:	52                   	push   edx
c0020a7d:	6a 0c                	push   0xc
c0020a7f:	56                   	push   esi
c0020a80:	57                   	push   edi
c0020a81:	e8 28 ff ff ff       	call   c00209ae <IDE::read(unsigned char, unsigned char)>
c0020a86:	83 c4 10             	add    esp,0x10
c0020a89:	a8 01                	test   al,0x1
c0020a8b:	75 2b                	jne    c0020ab8 <IDE::waitInterrupt(unsigned char)+0x5c>
c0020a8d:	f6 c3 04             	test   bl,0x4
c0020a90:	75 16                	jne    c0020aa8 <IDE::waitInterrupt(unsigned char)+0x4c>
c0020a92:	83 fb 32             	cmp    ebx,0x32
c0020a95:	7e 11                	jle    c0020aa8 <IDE::waitInterrupt(unsigned char)+0x4c>
c0020a97:	50                   	push   eax
c0020a98:	50                   	push   eax
c0020a99:	6a 00                	push   0x0
c0020a9b:	68 80 96 98 00       	push   0x989680
c0020aa0:	e8 fd b4 ff ff       	call   c001bfa2 <nanoSleep(unsigned long long)>
c0020aa5:	83 c4 10             	add    esp,0x10
c0020aa8:	83 fb 3c             	cmp    ebx,0x3c
c0020aab:	74 0b                	je     c0020ab8 <IDE::waitInterrupt(unsigned char)+0x5c>
c0020aad:	43                   	inc    ebx
c0020aae:	eb be                	jmp    c0020a6e <IDE::waitInterrupt(unsigned char)+0x12>
c0020ab0:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0020ab8:	83 c4 0c             	add    esp,0xc
c0020abb:	89 e8                	mov    eax,ebp
c0020abd:	5b                   	pop    ebx
c0020abe:	5e                   	pop    esi
c0020abf:	5f                   	pop    edi
c0020ac0:	5d                   	pop    ebp
c0020ac1:	c3                   	ret    

c0020ac2 <ideChannel0IRQHandler(regs*, void*)>:
c0020ac2:	83 ec 10             	sub    esp,0x10
c0020ac5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020ac9:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0020ad0:	6a 07                	push   0x7
c0020ad2:	6a 00                	push   0x0
c0020ad4:	50                   	push   eax
c0020ad5:	e8 d4 fe ff ff       	call   c00209ae <IDE::read(unsigned char, unsigned char)>
c0020ada:	83 c4 1c             	add    esp,0x1c
c0020add:	c3                   	ret    

c0020ade <ideChannel1IRQHandler(regs*, void*)>:
c0020ade:	83 ec 10             	sub    esp,0x10
c0020ae1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020ae5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0020aec:	6a 07                	push   0x7
c0020aee:	6a 01                	push   0x1
c0020af0:	50                   	push   eax
c0020af1:	e8 b8 fe ff ff       	call   c00209ae <IDE::read(unsigned char, unsigned char)>
c0020af6:	83 c4 1c             	add    esp,0x1c
c0020af9:	c3                   	ret    

c0020afa <IDE::enableIRQs(unsigned char, bool)>:
c0020afa:	57                   	push   edi
c0020afb:	56                   	push   esi
c0020afc:	be 04 00 00 00       	mov    esi,0x4
c0020b01:	53                   	push   ebx
c0020b02:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0020b07:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020b0b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0020b10:	0f 94 c0             	sete   al
c0020b13:	d1 e0                	shl    eax,1
c0020b15:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0020b1c:	0f b6 c0             	movzx  eax,al
c0020b1f:	50                   	push   eax
c0020b20:	6a 0c                	push   0xc
c0020b22:	57                   	push   edi
c0020b23:	53                   	push   ebx
c0020b24:	e8 c5 fd ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020b29:	83 c4 10             	add    esp,0x10
c0020b2c:	50                   	push   eax
c0020b2d:	6a 0c                	push   0xc
c0020b2f:	57                   	push   edi
c0020b30:	53                   	push   ebx
c0020b31:	e8 78 fe ff ff       	call   c00209ae <IDE::read(unsigned char, unsigned char)>
c0020b36:	83 c4 10             	add    esp,0x10
c0020b39:	4e                   	dec    esi
c0020b3a:	75 f0                	jne    c0020b2c <IDE::enableIRQs(unsigned char, bool)+0x32>
c0020b3c:	5b                   	pop    ebx
c0020b3d:	5e                   	pop    esi
c0020b3e:	5f                   	pop    edi
c0020b3f:	c3                   	ret    

c0020b40 <IDE::open(int, int, void*)>:
c0020b40:	55                   	push   ebp
c0020b41:	57                   	push   edi
c0020b42:	56                   	push   esi
c0020b43:	53                   	push   ebx
c0020b44:	83 ec 1c             	sub    esp,0x1c
c0020b47:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0020b4b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0020b54:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0020b5d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0020b64:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0020b6b:	0f 85 b0 02 00 00    	jne    c0020e21 <IDE::open(int, int, void*)+0x2e1>
c0020b71:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0020b77:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0020b7b:	83 e0 7f             	and    eax,0x7f
c0020b7e:	3c 05                	cmp    al,0x5
c0020b80:	74 04                	je     c0020b86 <IDE::open(int, int, void*)+0x46>
c0020b82:	3c 0f                	cmp    al,0xf
c0020b84:	75 32                	jne    c0020bb8 <IDE::open(int, int, void*)+0x78>
c0020b86:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0020b8c:	83 e0 fc             	and    eax,0xfffffffc
c0020b8f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0020b96:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0020b9c:	83 e0 fc             	and    eax,0xfffffffc
c0020b9f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0020ba6:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0020bac:	83 e0 fc             	and    eax,0xfffffffc
c0020baf:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0020bb6:	eb 14                	jmp    c0020bcc <IDE::open(int, int, void*)+0x8c>
c0020bb8:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0020bc2:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0020bcc:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0020bd3:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0020bda:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020bde:	89 c6                	mov    esi,eax
c0020be0:	bf f8 0c 00 00       	mov    edi,0xcf8
c0020be5:	c1 e6 10             	shl    esi,0x10
c0020be8:	89 e8                	mov    eax,ebp
c0020bea:	89 fa                	mov    edx,edi
c0020bec:	c1 e0 0b             	shl    eax,0xb
c0020bef:	09 f0                	or     eax,esi
c0020bf1:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0020bf8:	c1 e6 08             	shl    esi,0x8
c0020bfb:	09 c6                	or     esi,eax
c0020bfd:	89 f0                	mov    eax,esi
c0020bff:	0d 08 00 00 80       	or     eax,0x80000008
c0020c04:	ef                   	out    dx,eax
c0020c05:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0020c0a:	89 ca                	mov    edx,ecx
c0020c0c:	ed                   	in     eax,dx
c0020c0d:	c1 e8 10             	shr    eax,0x10
c0020c10:	3d ff ff 00 00       	cmp    eax,0xffff
c0020c15:	0f 84 f5 00 00 00    	je     c0020d10 <IDE::open(int, int, void*)+0x1d0>
c0020c1b:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0020c21:	89 fa                	mov    edx,edi
c0020c23:	89 f0                	mov    eax,esi
c0020c25:	ef                   	out    dx,eax
c0020c26:	b0 fe                	mov    al,0xfe
c0020c28:	89 ca                	mov    edx,ecx
c0020c2a:	ee                   	out    dx,al
c0020c2b:	89 f0                	mov    eax,esi
c0020c2d:	89 fa                	mov    edx,edi
c0020c2f:	ef                   	out    dx,eax
c0020c30:	89 ca                	mov    edx,ecx
c0020c32:	ed                   	in     eax,dx
c0020c33:	3c fe                	cmp    al,0xfe
c0020c35:	0f 85 a9 00 00 00    	jne    c0020ce4 <IDE::open(int, int, void*)+0x1a4>
c0020c3b:	8b 15 88 a6 02 c0    	mov    edx,DWORD PTR ds:0xc002a688
c0020c41:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0020c48:	74 33                	je     c0020c7d <IDE::open(int, int, void*)+0x13d>
c0020c4a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0020c50:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0020c54:	40                   	inc    eax
c0020c55:	83 ec 0c             	sub    esp,0xc
c0020c58:	0f b6 c0             	movzx  eax,al
c0020c5b:	50                   	push   eax
c0020c5c:	55                   	push   ebp
c0020c5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020c61:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0020c67:	51                   	push   ecx
c0020c68:	e8 f9 62 ff ff       	call   c0016f66 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0020c6d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0020c72:	83 c4 1c             	add    esp,0x1c
c0020c75:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0020c7b:	eb 0a                	jmp    c0020c87 <IDE::open(int, int, void*)+0x147>
c0020c7d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0020c87:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0020c8e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0020c95:	c1 e1 10             	shl    ecx,0x10
c0020c98:	c1 e0 08             	shl    eax,0x8
c0020c9b:	bf f8 0c 00 00       	mov    edi,0xcf8
c0020ca0:	09 c1                	or     ecx,eax
c0020ca2:	89 fa                	mov    edx,edi
c0020ca4:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0020cab:	c1 e0 0b             	shl    eax,0xb
c0020cae:	09 c1                	or     ecx,eax
c0020cb0:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0020cb6:	89 c8                	mov    eax,ecx
c0020cb8:	ef                   	out    dx,eax
c0020cb9:	be fc 0c 00 00       	mov    esi,0xcfc
c0020cbe:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0020cc4:	89 f2                	mov    edx,esi
c0020cc6:	ee                   	out    dx,al
c0020cc7:	89 c8                	mov    eax,ecx
c0020cc9:	89 fa                	mov    edx,edi
c0020ccb:	ef                   	out    dx,eax
c0020ccc:	89 f2                	mov    edx,esi
c0020cce:	ed                   	in     eax,dx
c0020ccf:	0f b6 c0             	movzx  eax,al
c0020cd2:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0020cd8:	74 46                	je     c0020d20 <IDE::open(int, int, void*)+0x1e0>
c0020cda:	83 ec 0c             	sub    esp,0xc
c0020cdd:	68 c4 8f 02 c0       	push   0xc0028fc4
c0020ce2:	eb 34                	jmp    c0020d18 <IDE::open(int, int, void*)+0x1d8>
c0020ce4:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0020ced:	75 17                	jne    c0020d06 <IDE::open(int, int, void*)+0x1c6>
c0020cef:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0020cf4:	74 07                	je     c0020cfd <IDE::open(int, int, void*)+0x1bd>
c0020cf6:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0020cfb:	75 09                	jne    c0020d06 <IDE::open(int, int, void*)+0x1c6>
c0020cfd:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0020d04:	eb 1a                	jmp    c0020d20 <IDE::open(int, int, void*)+0x1e0>
c0020d06:	83 ec 0c             	sub    esp,0xc
c0020d09:	68 cc 8f 02 c0       	push   0xc0028fcc
c0020d0e:	eb 08                	jmp    c0020d18 <IDE::open(int, int, void*)+0x1d8>
c0020d10:	83 ec 0c             	sub    esp,0xc
c0020d13:	68 fd 8f 02 c0       	push   0xc0028ffd
c0020d18:	e8 ea 7d ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c0020d1d:	83 c4 10             	add    esp,0x10
c0020d20:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0020d27:	79 1a                	jns    c0020d43 <IDE::open(int, int, void*)+0x203>
c0020d29:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0020d2f:	83 e0 fc             	and    eax,0xfffffffc
c0020d32:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0020d39:	83 c0 08             	add    eax,0x8
c0020d3c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0020d43:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0020d49:	89 c2                	mov    edx,eax
c0020d4b:	83 e2 0f             	and    edx,0xf
c0020d4e:	66 83 fa 08          	cmp    dx,0x8
c0020d52:	75 0a                	jne    c0020d5e <IDE::open(int, int, void*)+0x21e>
c0020d54:	83 e8 02             	sub    eax,0x2
c0020d57:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0020d5e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0020d64:	89 c2                	mov    edx,eax
c0020d66:	83 e2 0f             	and    edx,0xf
c0020d69:	66 83 fa 08          	cmp    dx,0x8
c0020d6d:	75 0a                	jne    c0020d79 <IDE::open(int, int, void*)+0x239>
c0020d6f:	83 e8 02             	sub    eax,0x2
c0020d72:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0020d79:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0020d80:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0020d87:	89 d0                	mov    eax,edx
c0020d89:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020d8c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020d90:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0020d94:	8d 4a 01             	lea    ecx,[edx+0x1]
c0020d97:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020d9c:	0f b6 c9             	movzx  ecx,cl
c0020d9f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0020da6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0020da9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0020dad:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0020db1:	8d 50 02             	lea    edx,[eax+0x2]
c0020db4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0020db9:	0f b6 d2             	movzx  edx,dl
c0020dbc:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0020dc2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020dc5:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020dc9:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0020dcd:	8d 48 03             	lea    ecx,[eax+0x3]
c0020dd0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020dd5:	0f b6 c9             	movzx  ecx,cl
c0020dd8:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0020dde:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0020de1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0020de5:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0020de9:	8d 50 04             	lea    edx,[eax+0x4]
c0020dec:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0020df2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0020df7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0020dfe:	66 85 f6             	test   si,si
c0020e01:	74 3e                	je     c0020e41 <IDE::open(int, int, void*)+0x301>
c0020e03:	0f b6 d2             	movzx  edx,dl
c0020e06:	83 c0 05             	add    eax,0x5
c0020e09:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020e0c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020e10:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0020e14:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0020e1a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020e1f:	eb 20                	jmp    c0020e41 <IDE::open(int, int, void*)+0x301>
c0020e21:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0020e2b:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0020e35:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0020e3c:	e9 02 ff ff ff       	jmp    c0020d43 <IDE::open(int, int, void*)+0x203>
c0020e41:	52                   	push   edx
c0020e42:	52                   	push   edx
c0020e43:	6a 00                	push   0x0
c0020e45:	53                   	push   ebx
c0020e46:	e8 7d fa ff ff       	call   c00208c8 <IDE::prepareInterrupt(unsigned char)>
c0020e4b:	59                   	pop    ecx
c0020e4c:	5e                   	pop    esi
c0020e4d:	6a 01                	push   0x1
c0020e4f:	53                   	push   ebx
c0020e50:	e8 73 fa ff ff       	call   c00208c8 <IDE::prepareInterrupt(unsigned char)>
c0020e55:	83 c4 0c             	add    esp,0xc
c0020e58:	6a 00                	push   0x0
c0020e5a:	6a 00                	push   0x0
c0020e5c:	53                   	push   ebx
c0020e5d:	e8 98 fc ff ff       	call   c0020afa <IDE::enableIRQs(unsigned char, bool)>
c0020e62:	83 c4 0c             	add    esp,0xc
c0020e65:	6a 00                	push   0x0
c0020e67:	6a 01                	push   0x1
c0020e69:	53                   	push   ebx
c0020e6a:	e8 8b fc ff ff       	call   c0020afa <IDE::enableIRQs(unsigned char, bool)>
c0020e6f:	83 c4 10             	add    esp,0x10
c0020e72:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0020e79:	74 40                	je     c0020ebb <IDE::open(int, int, void*)+0x37b>
c0020e7b:	83 ec 0c             	sub    esp,0xc
c0020e7e:	68 27 90 02 c0       	push   0xc0029027
c0020e83:	e8 ef 13 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0020e88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020e8b:	6a 01                	push   0x1
c0020e8d:	68 c2 0a 02 c0       	push   0xc0020ac2
c0020e92:	6a 0e                	push   0xe
c0020e94:	53                   	push   ebx
c0020e95:	e8 3c 27 ff ff       	call   c00135d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020e9a:	83 c4 14             	add    esp,0x14
c0020e9d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0020ea3:	53                   	push   ebx
c0020ea4:	6a 01                	push   0x1
c0020ea6:	68 de 0a 02 c0       	push   0xc0020ade
c0020eab:	6a 0f                	push   0xf
c0020ead:	53                   	push   ebx
c0020eae:	e8 23 27 ff ff       	call   c00135d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020eb3:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0020eb9:	eb 4a                	jmp    c0020f05 <IDE::open(int, int, void*)+0x3c5>
c0020ebb:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0020ec5:	50                   	push   eax
c0020ec6:	6a 0f                	push   0xf
c0020ec8:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0020ece:	68 43 90 02 c0       	push   0xc0029043
c0020ed3:	e8 9f 13 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0020ed8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020edb:	6a 00                	push   0x0
c0020edd:	68 c2 0a 02 c0       	push   0xc0020ac2
c0020ee2:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0020ee8:	53                   	push   ebx
c0020ee9:	e8 e8 26 ff ff       	call   c00135d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020eee:	83 c4 14             	add    esp,0x14
c0020ef1:	53                   	push   ebx
c0020ef2:	6a 00                	push   0x0
c0020ef4:	68 de 0a 02 c0       	push   0xc0020ade
c0020ef9:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0020eff:	53                   	push   ebx
c0020f00:	e8 d1 26 ff ff       	call   c00135d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020f05:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020f07:	83 c4 20             	add    esp,0x20
c0020f0a:	83 ec 0c             	sub    esp,0xc
c0020f0d:	53                   	push   ebx
c0020f0e:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0020f11:	83 c4 0c             	add    esp,0xc
c0020f14:	6a 07                	push   0x7
c0020f16:	6a 00                	push   0x0
c0020f18:	53                   	push   ebx
c0020f19:	e8 90 fa ff ff       	call   c00209ae <IDE::read(unsigned char, unsigned char)>
c0020f1e:	83 c4 0c             	add    esp,0xc
c0020f21:	6a 07                	push   0x7
c0020f23:	6a 01                	push   0x1
c0020f25:	53                   	push   ebx
c0020f26:	e8 83 fa ff ff       	call   c00209ae <IDE::read(unsigned char, unsigned char)>
c0020f2b:	83 c4 0c             	add    esp,0xc
c0020f2e:	6a 01                	push   0x1
c0020f30:	6a 00                	push   0x0
c0020f32:	53                   	push   ebx
c0020f33:	e8 c2 fb ff ff       	call   c0020afa <IDE::enableIRQs(unsigned char, bool)>
c0020f38:	83 c4 0c             	add    esp,0xc
c0020f3b:	6a 01                	push   0x1
c0020f3d:	6a 01                	push   0x1
c0020f3f:	53                   	push   ebx
c0020f40:	e8 b5 fb ff ff       	call   c0020afa <IDE::enableIRQs(unsigned char, bool)>
c0020f45:	83 c4 2c             	add    esp,0x2c
c0020f48:	31 c0                	xor    eax,eax
c0020f4a:	5b                   	pop    ebx
c0020f4b:	5e                   	pop    esi
c0020f4c:	5f                   	pop    edi
c0020f4d:	5d                   	pop    ebp
c0020f4e:	c3                   	ret    
c0020f4f:	90                   	nop

c0020f50 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0020f50:	55                   	push   ebp
c0020f51:	57                   	push   edi
c0020f52:	56                   	push   esi
c0020f53:	53                   	push   ebx
c0020f54:	83 ec 1c             	sub    esp,0x1c
c0020f57:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f5b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020f5f:	8d 50 f8             	lea    edx,[eax-0x8]
c0020f62:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020f66:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0020f6a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020f6e:	80 fa 03             	cmp    dl,0x3
c0020f71:	77 5d                	ja     c0020fd0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0020f73:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020f77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020f7b:	0f b6 db             	movzx  ebx,bl
c0020f7e:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0020f81:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0020f85:	83 ca 80             	or     edx,0xffffff80
c0020f88:	0f b6 d2             	movzx  edx,dl
c0020f8b:	52                   	push   edx
c0020f8c:	6a 0c                	push   0xc
c0020f8e:	53                   	push   ebx
c0020f8f:	56                   	push   esi
c0020f90:	e8 59 f9 ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020f95:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0020f9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020f9e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020fa2:	0f b6 c0             	movzx  eax,al
c0020fa5:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0020fa9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0020fab:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0020fb0:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0020fb4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0020fb8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020fbc:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0020fc4:	83 c4 2c             	add    esp,0x2c
c0020fc7:	5b                   	pop    ebx
c0020fc8:	5e                   	pop    esi
c0020fc9:	5f                   	pop    edi
c0020fca:	5d                   	pop    ebp
c0020fcb:	e9 1e f9 ff ff       	jmp    c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020fd0:	3c 07                	cmp    al,0x7
c0020fd2:	77 10                	ja     c0020fe4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0020fd4:	0f b6 db             	movzx  ebx,bl
c0020fd7:	0f b6 d0             	movzx  edx,al
c0020fda:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0020fe2:	eb 2d                	jmp    c0021011 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0020fe4:	3c 0d                	cmp    al,0xd
c0020fe6:	77 13                	ja     c0020ffb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0020fe8:	0f b6 db             	movzx  ebx,bl
c0020feb:	0f b6 c0             	movzx  eax,al
c0020fee:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0020ff5:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0020ff9:	eb 16                	jmp    c0021011 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0020ffb:	3c 15                	cmp    al,0x15
c0020ffd:	77 14                	ja     c0021013 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0020fff:	0f b6 db             	movzx  ebx,bl
c0021002:	0f b6 c0             	movzx  eax,al
c0021005:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c002100d:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0021011:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0021013:	83 c4 1c             	add    esp,0x1c
c0021016:	5b                   	pop    ebx
c0021017:	5e                   	pop    esi
c0021018:	5f                   	pop    edi
c0021019:	5d                   	pop    ebp
c002101a:	c3                   	ret    
c002101b:	90                   	nop

c002101c <IDE::detect()>:
c002101c:	55                   	push   ebp
c002101d:	57                   	push   edi
c002101e:	56                   	push   esi
c002101f:	53                   	push   ebx
c0021020:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021026:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002102d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0021034:	0f 85 be 02 00 00    	jne    c00212f8 <IDE::detect()+0x2dc>
c002103a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0021041:	31 f6                	xor    esi,esi
c0021043:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002104b:	31 ed                	xor    ebp,ebp
c002104d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021051:	c1 e0 06             	shl    eax,0x6
c0021054:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002105c:	89 e8                	mov    eax,ebp
c002105e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021062:	c1 e0 04             	shl    eax,0x4
c0021065:	83 c8 a0             	or     eax,0xffffffa0
c0021068:	0f b6 c0             	movzx  eax,al
c002106b:	50                   	push   eax
c002106c:	6a 06                	push   0x6
c002106e:	56                   	push   esi
c002106f:	53                   	push   ebx
c0021070:	e8 79 f8 ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021075:	83 c4 0c             	add    esp,0xc
c0021078:	6a 0c                	push   0xc
c002107a:	56                   	push   esi
c002107b:	53                   	push   ebx
c002107c:	e8 2d f9 ff ff       	call   c00209ae <IDE::read(unsigned char, unsigned char)>
c0021081:	83 c4 0c             	add    esp,0xc
c0021084:	6a 0c                	push   0xc
c0021086:	56                   	push   esi
c0021087:	53                   	push   ebx
c0021088:	e8 21 f9 ff ff       	call   c00209ae <IDE::read(unsigned char, unsigned char)>
c002108d:	83 c4 0c             	add    esp,0xc
c0021090:	6a 0c                	push   0xc
c0021092:	56                   	push   esi
c0021093:	53                   	push   ebx
c0021094:	e8 15 f9 ff ff       	call   c00209ae <IDE::read(unsigned char, unsigned char)>
c0021099:	83 c4 0c             	add    esp,0xc
c002109c:	6a 0c                	push   0xc
c002109e:	56                   	push   esi
c002109f:	53                   	push   ebx
c00210a0:	e8 09 f9 ff ff       	call   c00209ae <IDE::read(unsigned char, unsigned char)>
c00210a5:	68 ec 00 00 00       	push   0xec
c00210aa:	6a 07                	push   0x7
c00210ac:	56                   	push   esi
c00210ad:	53                   	push   ebx
c00210ae:	e8 3b f8 ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c00210b3:	83 c4 1c             	add    esp,0x1c
c00210b6:	6a 0c                	push   0xc
c00210b8:	56                   	push   esi
c00210b9:	53                   	push   ebx
c00210ba:	e8 ef f8 ff ff       	call   c00209ae <IDE::read(unsigned char, unsigned char)>
c00210bf:	83 c4 0c             	add    esp,0xc
c00210c2:	6a 0c                	push   0xc
c00210c4:	56                   	push   esi
c00210c5:	53                   	push   ebx
c00210c6:	e8 e3 f8 ff ff       	call   c00209ae <IDE::read(unsigned char, unsigned char)>
c00210cb:	83 c4 0c             	add    esp,0xc
c00210ce:	6a 0c                	push   0xc
c00210d0:	56                   	push   esi
c00210d1:	53                   	push   ebx
c00210d2:	e8 d7 f8 ff ff       	call   c00209ae <IDE::read(unsigned char, unsigned char)>
c00210d7:	83 c4 0c             	add    esp,0xc
c00210da:	6a 0c                	push   0xc
c00210dc:	56                   	push   esi
c00210dd:	53                   	push   ebx
c00210de:	e8 cb f8 ff ff       	call   c00209ae <IDE::read(unsigned char, unsigned char)>
c00210e3:	83 c4 0c             	add    esp,0xc
c00210e6:	6a 0c                	push   0xc
c00210e8:	56                   	push   esi
c00210e9:	53                   	push   ebx
c00210ea:	e8 bf f8 ff ff       	call   c00209ae <IDE::read(unsigned char, unsigned char)>
c00210ef:	83 c4 10             	add    esp,0x10
c00210f2:	84 c0                	test   al,al
c00210f4:	0f 84 8b 01 00 00    	je     c0021285 <IDE::detect()+0x269>
c00210fa:	31 ff                	xor    edi,edi
c00210fc:	50                   	push   eax
c00210fd:	6a 0c                	push   0xc
c00210ff:	56                   	push   esi
c0021100:	53                   	push   ebx
c0021101:	e8 a8 f8 ff ff       	call   c00209ae <IDE::read(unsigned char, unsigned char)>
c0021106:	83 c4 10             	add    esp,0x10
c0021109:	a8 01                	test   al,0x1
c002110b:	0f 85 8e 01 00 00    	jne    c002129f <IDE::detect()+0x283>
c0021111:	84 c0                	test   al,al
c0021113:	78 04                	js     c0021119 <IDE::detect()+0xfd>
c0021115:	a8 08                	test   al,0x8
c0021117:	75 27                	jne    c0021140 <IDE::detect()+0x124>
c0021119:	47                   	inc    edi
c002111a:	81 ff 17 01 00 00    	cmp    edi,0x117
c0021120:	7e da                	jle    c00210fc <IDE::detect()+0xe0>
c0021122:	50                   	push   eax
c0021123:	50                   	push   eax
c0021124:	6a 00                	push   0x0
c0021126:	68 40 4b 4c 00       	push   0x4c4b40
c002112b:	e8 72 ae ff ff       	call   c001bfa2 <nanoSleep(unsigned long long)>
c0021130:	83 c4 10             	add    esp,0x10
c0021133:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0021139:	75 c1                	jne    c00210fc <IDE::detect()+0xe0>
c002113b:	e9 5f 01 00 00       	jmp    c002129f <IDE::detect()+0x283>
c0021140:	31 c9                	xor    ecx,ecx
c0021142:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0021146:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002114a:	83 ec 0c             	sub    esp,0xc
c002114d:	68 80 00 00 00       	push   0x80
c0021152:	57                   	push   edi
c0021153:	6a 00                	push   0x0
c0021155:	56                   	push   esi
c0021156:	53                   	push   ebx
c0021157:	e8 f4 fd ff ff       	call   c0020f50 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002115c:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0021161:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0021165:	89 d1                	mov    ecx,edx
c0021167:	c1 e0 06             	shl    eax,0x6
c002116a:	01 d8                	add    eax,ebx
c002116c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0021173:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002117a:	89 f2                	mov    edx,esi
c002117c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0021182:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0021186:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002118c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021190:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0021197:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002119f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00211a6:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00211ae:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00211b4:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00211bb:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00211c1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00211c5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00211c9:	83 c4 20             	add    esp,0x20
c00211cc:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00211cf:	83 c0 02             	add    eax,0x2
c00211d2:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00211d8:	83 c7 02             	add    edi,0x2
c00211db:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00211de:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00211e4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00211e8:	75 e2                	jne    c00211cc <IDE::detect()+0x1b0>
c00211ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211ee:	c1 e0 06             	shl    eax,0x6
c00211f1:	01 d8                	add    eax,ebx
c00211f3:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00211f9:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0021200:	66 c1 ea 09          	shr    dx,0x9
c0021204:	83 e2 01             	and    edx,0x1
c0021207:	84 c9                	test   cl,cl
c0021209:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002120f:	75 2f                	jne    c0021240 <IDE::detect()+0x224>
c0021211:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0021217:	85 c0                	test   eax,eax
c0021219:	74 66                	je     c0021281 <IDE::detect()+0x265>
c002121b:	50                   	push   eax
c002121c:	55                   	push   ebp
c002121d:	56                   	push   esi
c002121e:	68 5f 90 02 c0       	push   0xc002905f
c0021223:	e8 4f 10 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0021228:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002122f:	e8 54 0f ff ff       	call   c0012188 <operator new(unsigned long)>
c0021234:	89 c7                	mov    edi,eax
c0021236:	89 04 24             	mov    DWORD PTR [esp],eax
c0021239:	e8 e8 02 00 00       	call   c0021526 <ATA::ATA()>
c002123e:	eb 28                	jmp    c0021268 <IDE::detect()+0x24c>
c0021240:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0021246:	55                   	push   ebp
c0021247:	56                   	push   esi
c0021248:	68 8e 90 02 c0       	push   0xc002908e
c002124d:	e8 25 10 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0021252:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0021259:	e8 2a 0f ff ff       	call   c0012188 <operator new(unsigned long)>
c002125e:	89 c7                	mov    edi,eax
c0021260:	89 04 24             	mov    DWORD PTR [esp],eax
c0021263:	e8 ee 08 00 00       	call   c0021b56 <ATAPI::ATAPI()>
c0021268:	5a                   	pop    edx
c0021269:	59                   	pop    ecx
c002126a:	57                   	push   edi
c002126b:	53                   	push   ebx
c002126c:	e8 11 24 ff ff       	call   c0013682 <Device::addChild(Device*)>
c0021271:	8b 07                	mov    eax,DWORD PTR [edi]
c0021273:	53                   	push   ebx
c0021274:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021278:	6a 00                	push   0x0
c002127a:	57                   	push   edi
c002127b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002127e:	83 c4 20             	add    esp,0x20
c0021281:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0021285:	4d                   	dec    ebp
c0021286:	74 0a                	je     c0021292 <IDE::detect()+0x276>
c0021288:	bd 01 00 00 00       	mov    ebp,0x1
c002128d:	e9 bb fd ff ff       	jmp    c002104d <IDE::detect()+0x31>
c0021292:	4e                   	dec    esi
c0021293:	74 63                	je     c00212f8 <IDE::detect()+0x2dc>
c0021295:	be 01 00 00 00       	mov    esi,0x1
c002129a:	e9 ac fd ff ff       	jmp    c002104b <IDE::detect()+0x2f>
c002129f:	50                   	push   eax
c00212a0:	6a 04                	push   0x4
c00212a2:	56                   	push   esi
c00212a3:	53                   	push   ebx
c00212a4:	e8 05 f7 ff ff       	call   c00209ae <IDE::read(unsigned char, unsigned char)>
c00212a9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00212ad:	83 c4 0c             	add    esp,0xc
c00212b0:	6a 05                	push   0x5
c00212b2:	56                   	push   esi
c00212b3:	53                   	push   ebx
c00212b4:	e8 f5 f6 ff ff       	call   c00209ae <IDE::read(unsigned char, unsigned char)>
c00212b9:	83 c4 10             	add    esp,0x10
c00212bc:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00212c0:	80 fa 14             	cmp    dl,0x14
c00212c3:	75 04                	jne    c00212c9 <IDE::detect()+0x2ad>
c00212c5:	3c eb                	cmp    al,0xeb
c00212c7:	eb 07                	jmp    c00212d0 <IDE::detect()+0x2b4>
c00212c9:	3c 96                	cmp    al,0x96
c00212cb:	75 b8                	jne    c0021285 <IDE::detect()+0x269>
c00212cd:	80 fa 69             	cmp    dl,0x69
c00212d0:	75 b3                	jne    c0021285 <IDE::detect()+0x269>
c00212d2:	68 a1 00 00 00       	push   0xa1
c00212d7:	6a 07                	push   0x7
c00212d9:	56                   	push   esi
c00212da:	53                   	push   ebx
c00212db:	e8 0e f6 ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c00212e0:	5f                   	pop    edi
c00212e1:	58                   	pop    eax
c00212e2:	6a 00                	push   0x0
c00212e4:	68 40 42 0f 00       	push   0xf4240
c00212e9:	e8 b4 ac ff ff       	call   c001bfa2 <nanoSleep(unsigned long long)>
c00212ee:	83 c4 10             	add    esp,0x10
c00212f1:	b1 01                	mov    cl,0x1
c00212f3:	e9 4a fe ff ff       	jmp    c0021142 <IDE::detect()+0x126>
c00212f8:	81 c4 1c 02 00 00    	add    esp,0x21c
c00212fe:	5b                   	pop    ebx
c00212ff:	5e                   	pop    esi
c0021300:	5f                   	pop    edi
c0021301:	5d                   	pop    ebp
c0021302:	c3                   	ret    
c0021303:	90                   	nop

c0021304 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0021304:	55                   	push   ebp
c0021305:	57                   	push   edi
c0021306:	56                   	push   esi
c0021307:	53                   	push   ebx
c0021308:	83 ec 1c             	sub    esp,0x1c
c002130b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002130f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0021313:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021317:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c002131b:	88 c3                	mov    bl,al
c002131d:	84 c0                	test   al,al
c002131f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021323:	0f 84 67 01 00 00    	je     c0021490 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0021329:	83 ec 0c             	sub    esp,0xc
c002132c:	68 bf 90 02 c0       	push   0xc00290bf
c0021331:	e8 41 0f ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0021336:	83 c4 10             	add    esp,0x10
c0021339:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002133d:	3c 01                	cmp    al,0x1
c002133f:	75 17                	jne    c0021358 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0021341:	83 ec 0c             	sub    esp,0xc
c0021344:	b3 13                	mov    bl,0x13
c0021346:	68 cb 90 02 c0       	push   0xc00290cb
c002134b:	e8 27 0f ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0021350:	83 c4 10             	add    esp,0x10
c0021353:	e9 25 01 00 00       	jmp    c002147d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021358:	3c 02                	cmp    al,0x2
c002135a:	0f 85 ef 00 00 00    	jne    c002144f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0021360:	d1 e6                	shl    esi,1
c0021362:	09 ee                	or     esi,ebp
c0021364:	52                   	push   edx
c0021365:	89 f0                	mov    eax,esi
c0021367:	6a 01                	push   0x1
c0021369:	0f b6 f0             	movzx  esi,al
c002136c:	c1 e6 06             	shl    esi,0x6
c002136f:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0021377:	50                   	push   eax
c0021378:	57                   	push   edi
c0021379:	e8 30 f6 ff ff       	call   c00209ae <IDE::read(unsigned char, unsigned char)>
c002137e:	83 c4 10             	add    esp,0x10
c0021381:	89 c6                	mov    esi,eax
c0021383:	a8 01                	test   al,0x1
c0021385:	74 12                	je     c0021399 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0021387:	83 ec 0c             	sub    esp,0xc
c002138a:	b3 07                	mov    bl,0x7
c002138c:	68 e0 90 02 c0       	push   0xc00290e0
c0021391:	e8 e1 0e ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0021396:	83 c4 10             	add    esp,0x10
c0021399:	f7 c6 02 00 00 00    	test   esi,0x2
c002139f:	74 12                	je     c00213b3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c00213a1:	83 ec 0c             	sub    esp,0xc
c00213a4:	b3 03                	mov    bl,0x3
c00213a6:	68 fe 90 02 c0       	push   0xc00290fe
c00213ab:	e8 c7 0e ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00213b0:	83 c4 10             	add    esp,0x10
c00213b3:	f7 c6 04 00 00 00    	test   esi,0x4
c00213b9:	74 12                	je     c00213cd <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c00213bb:	83 ec 0c             	sub    esp,0xc
c00213be:	b3 14                	mov    bl,0x14
c00213c0:	68 1e 91 02 c0       	push   0xc002911e
c00213c5:	e8 ad 0e ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00213ca:	83 c4 10             	add    esp,0x10
c00213cd:	f7 c6 08 00 00 00    	test   esi,0x8
c00213d3:	74 12                	je     c00213e7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00213d5:	83 ec 0c             	sub    esp,0xc
c00213d8:	b3 03                	mov    bl,0x3
c00213da:	68 fe 90 02 c0       	push   0xc00290fe
c00213df:	e8 93 0e ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00213e4:	83 c4 10             	add    esp,0x10
c00213e7:	f7 c6 10 00 00 00    	test   esi,0x10
c00213ed:	74 12                	je     c0021401 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00213ef:	83 ec 0c             	sub    esp,0xc
c00213f2:	b3 15                	mov    bl,0x15
c00213f4:	68 36 91 02 c0       	push   0xc0029136
c00213f9:	e8 79 0e ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00213fe:	83 c4 10             	add    esp,0x10
c0021401:	f7 c6 20 00 00 00    	test   esi,0x20
c0021407:	74 12                	je     c002141b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0021409:	83 ec 0c             	sub    esp,0xc
c002140c:	b3 03                	mov    bl,0x3
c002140e:	68 fe 90 02 c0       	push   0xc00290fe
c0021413:	e8 5f 0e ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0021418:	83 c4 10             	add    esp,0x10
c002141b:	f7 c6 40 00 00 00    	test   esi,0x40
c0021421:	74 12                	je     c0021435 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0021423:	83 ec 0c             	sub    esp,0xc
c0021426:	b3 16                	mov    bl,0x16
c0021428:	68 50 91 02 c0       	push   0xc0029150
c002142d:	e8 45 0e ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0021432:	83 c4 10             	add    esp,0x10
c0021435:	89 f0                	mov    eax,esi
c0021437:	84 c0                	test   al,al
c0021439:	79 42                	jns    c002147d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002143b:	83 ec 0c             	sub    esp,0xc
c002143e:	b3 0d                	mov    bl,0xd
c0021440:	68 71 91 02 c0       	push   0xc0029171
c0021445:	e8 2d 0e ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c002144a:	83 c4 10             	add    esp,0x10
c002144d:	eb 2e                	jmp    c002147d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002144f:	3c 03                	cmp    al,0x3
c0021451:	75 14                	jne    c0021467 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0021453:	83 ec 0c             	sub    esp,0xc
c0021456:	b3 17                	mov    bl,0x17
c0021458:	68 85 91 02 c0       	push   0xc0029185
c002145d:	e8 15 0e ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0021462:	83 c4 10             	add    esp,0x10
c0021465:	eb 16                	jmp    c002147d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021467:	3c 04                	cmp    al,0x4
c0021469:	75 12                	jne    c002147d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002146b:	83 ec 0c             	sub    esp,0xc
c002146e:	b3 08                	mov    bl,0x8
c0021470:	68 9b 91 02 c0       	push   0xc002919b
c0021475:	e8 fd 0d ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c002147a:	83 c4 10             	add    esp,0x10
c002147d:	50                   	push   eax
c002147e:	50                   	push   eax
c002147f:	0f b6 c3             	movzx  eax,bl
c0021482:	50                   	push   eax
c0021483:	68 b3 91 02 c0       	push   0xc00291b3
c0021488:	e8 ea 0d ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c002148d:	83 c4 10             	add    esp,0x10
c0021490:	83 c4 1c             	add    esp,0x1c
c0021493:	88 d8                	mov    al,bl
c0021495:	5b                   	pop    ebx
c0021496:	5e                   	pop    esi
c0021497:	5f                   	pop    edi
c0021498:	5d                   	pop    ebp
c0021499:	c3                   	ret    

c002149a <IDE::polling(unsigned char, unsigned int)>:
c002149a:	57                   	push   edi
c002149b:	56                   	push   esi
c002149c:	53                   	push   ebx
c002149d:	bb 04 00 00 00       	mov    ebx,0x4
c00214a2:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00214a6:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00214ab:	52                   	push   edx
c00214ac:	6a 0c                	push   0xc
c00214ae:	56                   	push   esi
c00214af:	57                   	push   edi
c00214b0:	e8 f9 f4 ff ff       	call   c00209ae <IDE::read(unsigned char, unsigned char)>
c00214b5:	83 c4 10             	add    esp,0x10
c00214b8:	4b                   	dec    ebx
c00214b9:	75 f0                	jne    c00214ab <IDE::polling(unsigned char, unsigned int)+0x11>
c00214bb:	bb a0 86 01 00       	mov    ebx,0x186a0
c00214c0:	50                   	push   eax
c00214c1:	6a 0c                	push   0xc
c00214c3:	56                   	push   esi
c00214c4:	57                   	push   edi
c00214c5:	e8 e4 f4 ff ff       	call   c00209ae <IDE::read(unsigned char, unsigned char)>
c00214ca:	83 c4 10             	add    esp,0x10
c00214cd:	a8 01                	test   al,0x1
c00214cf:	74 12                	je     c00214e3 <IDE::polling(unsigned char, unsigned int)+0x49>
c00214d1:	83 ec 0c             	sub    esp,0xc
c00214d4:	68 cd 91 02 c0       	push   0xc00291cd
c00214d9:	e8 99 0d ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00214de:	83 c4 10             	add    esp,0x10
c00214e1:	eb 17                	jmp    c00214fa <IDE::polling(unsigned char, unsigned int)+0x60>
c00214e3:	a8 20                	test   al,0x20
c00214e5:	75 0f                	jne    c00214f6 <IDE::polling(unsigned char, unsigned int)+0x5c>
c00214e7:	4b                   	dec    ebx
c00214e8:	74 10                	je     c00214fa <IDE::polling(unsigned char, unsigned int)+0x60>
c00214ea:	84 c0                	test   al,al
c00214ec:	78 d2                	js     c00214c0 <IDE::polling(unsigned char, unsigned int)+0x26>
c00214ee:	a8 08                	test   al,0x8
c00214f0:	74 ce                	je     c00214c0 <IDE::polling(unsigned char, unsigned int)+0x26>
c00214f2:	31 c0                	xor    eax,eax
c00214f4:	eb 06                	jmp    c00214fc <IDE::polling(unsigned char, unsigned int)+0x62>
c00214f6:	b0 01                	mov    al,0x1
c00214f8:	eb 02                	jmp    c00214fc <IDE::polling(unsigned char, unsigned int)+0x62>
c00214fa:	b0 02                	mov    al,0x2
c00214fc:	5b                   	pop    ebx
c00214fd:	5e                   	pop    esi
c00214fe:	5f                   	pop    edi
c00214ff:	c3                   	ret    

c0021500 <ATA::close(int, int, void*)>:
c0021500:	83 ec 0c             	sub    esp,0xc
c0021503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021507:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002150d:	85 c0                	test   eax,eax
c002150f:	74 0c                	je     c002151d <ATA::close(int, int, void*)+0x1d>
c0021511:	83 ec 0c             	sub    esp,0xc
c0021514:	8b 10                	mov    edx,DWORD PTR [eax]
c0021516:	50                   	push   eax
c0021517:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002151a:	83 c4 10             	add    esp,0x10
c002151d:	31 c0                	xor    eax,eax
c002151f:	83 c4 0c             	add    esp,0xc
c0021522:	c3                   	ret    
c0021523:	90                   	nop

c0021524 <ATA::powerSaving(PowerSavingLevel)>:
c0021524:	c3                   	ret    
c0021525:	90                   	nop

c0021526 <ATA::ATA()>:
c0021526:	83 ec 0c             	sub    esp,0xc
c0021529:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002152d:	83 ec 04             	sub    esp,0x4
c0021530:	68 00 02 00 00       	push   0x200
c0021535:	68 10 92 02 c0       	push   0xc0029210
c002153a:	50                   	push   eax
c002153b:	e8 48 25 ff ff       	call   c0013a88 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021540:	83 c4 10             	add    esp,0x10
c0021543:	ba 3c 92 02 c0       	mov    edx,0xc002923c
c0021548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002154c:	89 10                	mov    DWORD PTR [eax],edx
c002154e:	90                   	nop
c002154f:	83 c4 0c             	add    esp,0xc
c0021552:	c3                   	ret    
c0021553:	90                   	nop

c0021554 <ATA::flush(bool)>:
c0021554:	53                   	push   ebx
c0021555:	83 ec 08             	sub    esp,0x8
c0021558:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c002155d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021561:	19 c0                	sbb    eax,eax
c0021563:	83 e0 fd             	and    eax,0xfffffffd
c0021566:	05 ea 00 00 00       	add    eax,0xea
c002156b:	50                   	push   eax
c002156c:	6a 07                	push   0x7
c002156e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021575:	50                   	push   eax
c0021576:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002157c:	e8 6d f3 ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021581:	83 c4 0c             	add    esp,0xc
c0021584:	6a 00                	push   0x0
c0021586:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002158d:	50                   	push   eax
c002158e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021594:	e8 01 ff ff ff       	call   c002149a <IDE::polling(unsigned char, unsigned int)>
c0021599:	83 c4 18             	add    esp,0x18
c002159c:	5b                   	pop    ebx
c002159d:	c3                   	ret    

c002159e <ATA::readyForCommand()>:
c002159e:	56                   	push   esi
c002159f:	53                   	push   ebx
c00215a0:	31 db                	xor    ebx,ebx
c00215a2:	50                   	push   eax
c00215a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00215a7:	50                   	push   eax
c00215a8:	6a 0c                	push   0xc
c00215aa:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00215b1:	50                   	push   eax
c00215b2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00215b8:	e8 f1 f3 ff ff       	call   c00209ae <IDE::read(unsigned char, unsigned char)>
c00215bd:	83 c4 10             	add    esp,0x10
c00215c0:	a8 88                	test   al,0x88
c00215c2:	74 23                	je     c00215e7 <ATA::readyForCommand()+0x49>
c00215c4:	43                   	inc    ebx
c00215c5:	83 fb 63             	cmp    ebx,0x63
c00215c8:	7e dd                	jle    c00215a7 <ATA::readyForCommand()+0x9>
c00215ca:	51                   	push   ecx
c00215cb:	51                   	push   ecx
c00215cc:	6a 00                	push   0x0
c00215ce:	68 40 42 0f 00       	push   0xf4240
c00215d3:	e8 ca a9 ff ff       	call   c001bfa2 <nanoSleep(unsigned long long)>
c00215d8:	83 c4 10             	add    esp,0x10
c00215db:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00215e1:	75 c4                	jne    c00215a7 <ATA::readyForCommand()+0x9>
c00215e3:	31 c0                	xor    eax,eax
c00215e5:	eb 02                	jmp    c00215e9 <ATA::readyForCommand()+0x4b>
c00215e7:	b0 01                	mov    al,0x1
c00215e9:	5a                   	pop    edx
c00215ea:	5b                   	pop    ebx
c00215eb:	5e                   	pop    esi
c00215ec:	c3                   	ret    
c00215ed:	90                   	nop

c00215ee <ATA::access(unsigned long long, int, void*, bool)>:
c00215ee:	55                   	push   ebp
c00215ef:	57                   	push   edi
c00215f0:	56                   	push   esi
c00215f1:	53                   	push   ebx
c00215f2:	83 ec 2c             	sub    esp,0x2c
c00215f5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00215f9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00215fd:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0021601:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021605:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0021609:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002160d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021611:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0021617:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002161b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0021621:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021625:	c1 e0 06             	shl    eax,0x6
c0021628:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0021630:	74 5d                	je     c002168f <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0021632:	89 fa                	mov    edx,edi
c0021634:	89 f0                	mov    eax,esi
c0021636:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002163a:	c1 ea 1c             	shr    edx,0x1c
c002163d:	89 d1                	mov    ecx,edx
c002163f:	09 c1                	or     ecx,eax
c0021641:	74 25                	je     c0021668 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0021643:	31 ed                	xor    ebp,ebp
c0021645:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002164c:	89 fa                	mov    edx,edi
c002164e:	89 f0                	mov    eax,esi
c0021650:	0f ad d0             	shrd   eax,edx,cl
c0021653:	d3 ea                	shr    edx,cl
c0021655:	f6 c1 20             	test   cl,0x20
c0021658:	74 02                	je     c002165c <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002165a:	89 d0                	mov    eax,edx
c002165c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0021660:	45                   	inc    ebp
c0021661:	83 fd 06             	cmp    ebp,0x6
c0021664:	75 df                	jne    c0021645 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0021666:	eb 76                	jmp    c00216de <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0021668:	89 f0                	mov    eax,esi
c002166a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002166f:	89 fa                	mov    edx,edi
c0021671:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0021678:	0f ac d0 10          	shrd   eax,edx,0x10
c002167c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0021681:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0021685:	c1 ee 18             	shr    esi,0x18
c0021688:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002168d:	eb 56                	jmp    c00216e5 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002168f:	6a 00                	push   0x0
c0021691:	6a 3f                	push   0x3f
c0021693:	57                   	push   edi
c0021694:	56                   	push   esi
c0021695:	e8 02 20 00 00       	call   c002369c <__umoddi3>
c002169a:	83 c4 10             	add    esp,0x10
c002169d:	40                   	inc    eax
c002169e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00216a2:	6a 00                	push   0x0
c00216a4:	68 f0 03 00 00       	push   0x3f0
c00216a9:	57                   	push   edi
c00216aa:	56                   	push   esi
c00216ab:	e8 ec 1e 00 00       	call   c002359c <__udivdi3>
c00216b0:	83 c4 10             	add    esp,0x10
c00216b3:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00216b8:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00216bf:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00216c4:	6a 00                	push   0x0
c00216c6:	6a 3f                	push   0x3f
c00216c8:	57                   	push   edi
c00216c9:	56                   	push   esi
c00216ca:	e8 cd 1e 00 00       	call   c002359c <__udivdi3>
c00216cf:	83 c4 10             	add    esp,0x10
c00216d2:	89 c6                	mov    esi,eax
c00216d4:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00216d9:	83 e6 0f             	and    esi,0xf
c00216dc:	eb 07                	jmp    c00216e5 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00216de:	31 f6                	xor    esi,esi
c00216e0:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00216e5:	bf 01 00 00 00       	mov    edi,0x1
c00216ea:	50                   	push   eax
c00216eb:	6a 00                	push   0x0
c00216ed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00216f4:	50                   	push   eax
c00216f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216f9:	e8 fc f3 ff ff       	call   c0020afa <IDE::enableIRQs(unsigned char, bool)>
c00216fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021701:	e8 98 fe ff ff       	call   c002159e <ATA::readyForCommand()>
c0021706:	83 c4 10             	add    esp,0x10
c0021709:	84 c0                	test   al,al
c002170b:	0f 84 50 02 00 00    	je     c0021961 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0021711:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0021717:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002171d:	c1 e0 04             	shl    eax,0x4
c0021720:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0021727:	09 c6                	or     esi,eax
c0021729:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c002172e:	75 05                	jne    c0021735 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0021730:	83 ce a0             	or     esi,0xffffffa0
c0021733:	eb 03                	jmp    c0021738 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0021735:	83 ce e0             	or     esi,0xffffffe0
c0021738:	89 f0                	mov    eax,esi
c002173a:	0f b6 f0             	movzx  esi,al
c002173d:	56                   	push   esi
c002173e:	6a 06                	push   0x6
c0021740:	51                   	push   ecx
c0021741:	52                   	push   edx
c0021742:	e8 a7 f1 ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021747:	83 c4 10             	add    esp,0x10
c002174a:	6a 00                	push   0x0
c002174c:	6a 01                	push   0x1
c002174e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021755:	50                   	push   eax
c0021756:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002175c:	e8 8d f1 ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021761:	83 c4 10             	add    esp,0x10
c0021764:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0021769:	75 6e                	jne    c00217d9 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002176b:	6a 00                	push   0x0
c002176d:	6a 08                	push   0x8
c002176f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021776:	50                   	push   eax
c0021777:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002177d:	e8 6c f1 ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021782:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0021787:	50                   	push   eax
c0021788:	6a 09                	push   0x9
c002178a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021791:	50                   	push   eax
c0021792:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021798:	e8 51 f1 ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c002179d:	83 c4 20             	add    esp,0x20
c00217a0:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00217a5:	50                   	push   eax
c00217a6:	6a 0a                	push   0xa
c00217a8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00217af:	50                   	push   eax
c00217b0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00217b6:	e8 33 f1 ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c00217bb:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00217c0:	50                   	push   eax
c00217c1:	6a 0b                	push   0xb
c00217c3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00217ca:	50                   	push   eax
c00217cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00217d1:	e8 18 f1 ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c00217d6:	83 c4 20             	add    esp,0x20
c00217d9:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00217de:	50                   	push   eax
c00217df:	6a 02                	push   0x2
c00217e1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00217e8:	50                   	push   eax
c00217e9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00217ef:	e8 fa f0 ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c00217f4:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00217f9:	50                   	push   eax
c00217fa:	6a 03                	push   0x3
c00217fc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021803:	50                   	push   eax
c0021804:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002180a:	e8 df f0 ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c002180f:	83 c4 20             	add    esp,0x20
c0021812:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0021817:	50                   	push   eax
c0021818:	6a 04                	push   0x4
c002181a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021821:	50                   	push   eax
c0021822:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021828:	e8 c1 f0 ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c002182d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0021832:	50                   	push   eax
c0021833:	6a 05                	push   0x5
c0021835:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002183c:	50                   	push   eax
c002183d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021843:	e8 a6 f0 ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021848:	83 c4 20             	add    esp,0x20
c002184b:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0021850:	0f 94 c0             	sete   al
c0021853:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0021858:	74 09                	je     c0021863 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002185a:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0021861:	eb 07                	jmp    c002186a <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0021863:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002186a:	0f b6 c0             	movzx  eax,al
c002186d:	50                   	push   eax
c002186e:	6a 07                	push   0x7
c0021870:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021877:	50                   	push   eax
c0021878:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002187e:	e8 6b f0 ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021883:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0021887:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002188b:	83 c4 10             	add    esp,0x10
c002188e:	85 f6                	test   esi,esi
c0021890:	0f 84 ac 00 00 00    	je     c0021942 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c0021896:	50                   	push   eax
c0021897:	6a 01                	push   0x1
c0021899:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00218a0:	50                   	push   eax
c00218a1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00218a7:	e8 ee fb ff ff       	call   c002149a <IDE::polling(unsigned char, unsigned int)>
c00218ac:	83 c4 10             	add    esp,0x10
c00218af:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00218b5:	84 c0                	test   al,al
c00218b7:	74 20                	je     c00218d9 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c00218b9:	0f b6 f8             	movzx  edi,al
c00218bc:	0f b6 d2             	movzx  edx,dl
c00218bf:	57                   	push   edi
c00218c0:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00218c7:	50                   	push   eax
c00218c8:	52                   	push   edx
c00218c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00218cf:	e8 30 fa ff ff       	call   c0021304 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00218d4:	e9 85 00 00 00       	jmp    c002195e <ATA::access(unsigned long long, int, void*, bool)+0x370>
c00218d9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00218de:	74 41                	je     c0021921 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c00218e0:	31 c9                	xor    ecx,ecx
c00218e2:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c00218e6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00218ea:	50                   	push   eax
c00218eb:	50                   	push   eax
c00218ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00218f3:	50                   	push   eax
c00218f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00218fa:	e8 dd ef ff ff       	call   c00208dc <IDE::getBase(unsigned char)>
c00218ff:	89 c2                	mov    edx,eax
c0021901:	89 e8                	mov    eax,ebp
c0021903:	66 ef                	out    dx,ax
c0021905:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021909:	83 c4 10             	add    esp,0x10
c002190c:	41                   	inc    ecx
c002190d:	81 f9 00 01 00 00    	cmp    ecx,0x100
c0021913:	75 cd                	jne    c00218e2 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c0021915:	4e                   	dec    esi
c0021916:	81 c7 00 02 00 00    	add    edi,0x200
c002191c:	e9 6d ff ff ff       	jmp    c002188e <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c0021921:	0f b6 d2             	movzx  edx,dl
c0021924:	51                   	push   ecx
c0021925:	51                   	push   ecx
c0021926:	52                   	push   edx
c0021927:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002192d:	e8 aa ef ff ff       	call   c00208dc <IDE::getBase(unsigned char)>
c0021932:	b9 00 01 00 00       	mov    ecx,0x100
c0021937:	89 c2                	mov    edx,eax
c0021939:	fc                   	cld    
c002193a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002193d:	83 c4 10             	add    esp,0x10
c0021940:	eb d3                	jmp    c0021915 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c0021942:	31 ff                	xor    edi,edi
c0021944:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0021949:	74 16                	je     c0021961 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c002194b:	50                   	push   eax
c002194c:	50                   	push   eax
c002194d:	31 c0                	xor    eax,eax
c002194f:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0021954:	0f 94 c0             	sete   al
c0021957:	50                   	push   eax
c0021958:	53                   	push   ebx
c0021959:	e8 f6 fb ff ff       	call   c0021554 <ATA::flush(bool)>
c002195e:	83 c4 10             	add    esp,0x10
c0021961:	83 c4 2c             	add    esp,0x2c
c0021964:	89 f8                	mov    eax,edi
c0021966:	5b                   	pop    ebx
c0021967:	5e                   	pop    esi
c0021968:	5f                   	pop    edi
c0021969:	5d                   	pop    ebp
c002196a:	c3                   	ret    
c002196b:	90                   	nop

c002196c <ATA::read(unsigned long long, int, void*)>:
c002196c:	57                   	push   edi
c002196d:	b8 04 00 00 00       	mov    eax,0x4
c0021972:	56                   	push   esi
c0021973:	53                   	push   ebx
c0021974:	83 ec 10             	sub    esp,0x10
c0021977:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002197b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002197f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0021982:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021986:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002198a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0021990:	77 3b                	ja     c00219cd <ATA::read(unsigned long long, int, void*)+0x61>
c0021992:	b8 06 00 00 00       	mov    eax,0x6
c0021997:	85 d2                	test   edx,edx
c0021999:	74 32                	je     c00219cd <ATA::read(unsigned long long, int, void*)+0x61>
c002199b:	50                   	push   eax
c002199c:	50                   	push   eax
c002199d:	6a 00                	push   0x0
c002199f:	52                   	push   edx
c00219a0:	53                   	push   ebx
c00219a1:	57                   	push   edi
c00219a2:	56                   	push   esi
c00219a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00219a7:	e8 42 fc ff ff       	call   c00215ee <ATA::access(unsigned long long, int, void*, bool)>
c00219ac:	83 c4 20             	add    esp,0x20
c00219af:	85 c0                	test   eax,eax
c00219b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00219b5:	75 11                	jne    c00219c8 <ATA::read(unsigned long long, int, void*)+0x5c>
c00219b7:	01 1d 48 c9 02 c0    	add    DWORD PTR ds:0xc002c948,ebx
c00219bd:	e8 88 e7 fe ff       	call   c001014a <VgaText::updateDiskUsage()>
c00219c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00219c6:	eb 05                	jmp    c00219cd <ATA::read(unsigned long long, int, void*)+0x61>
c00219c8:	b8 01 00 00 00       	mov    eax,0x1
c00219cd:	83 c4 10             	add    esp,0x10
c00219d0:	5b                   	pop    ebx
c00219d1:	5e                   	pop    esi
c00219d2:	5f                   	pop    edi
c00219d3:	c3                   	ret    

c00219d4 <ATA::write(unsigned long long, int, void*)>:
c00219d4:	57                   	push   edi
c00219d5:	b8 04 00 00 00       	mov    eax,0x4
c00219da:	56                   	push   esi
c00219db:	53                   	push   ebx
c00219dc:	83 ec 10             	sub    esp,0x10
c00219df:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00219e3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00219e7:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00219ea:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00219ee:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00219f2:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00219f8:	77 3b                	ja     c0021a35 <ATA::write(unsigned long long, int, void*)+0x61>
c00219fa:	b8 06 00 00 00       	mov    eax,0x6
c00219ff:	85 d2                	test   edx,edx
c0021a01:	74 32                	je     c0021a35 <ATA::write(unsigned long long, int, void*)+0x61>
c0021a03:	50                   	push   eax
c0021a04:	50                   	push   eax
c0021a05:	6a 01                	push   0x1
c0021a07:	52                   	push   edx
c0021a08:	53                   	push   ebx
c0021a09:	57                   	push   edi
c0021a0a:	56                   	push   esi
c0021a0b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021a0f:	e8 da fb ff ff       	call   c00215ee <ATA::access(unsigned long long, int, void*, bool)>
c0021a14:	83 c4 20             	add    esp,0x20
c0021a17:	85 c0                	test   eax,eax
c0021a19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021a1d:	75 11                	jne    c0021a30 <ATA::write(unsigned long long, int, void*)+0x5c>
c0021a1f:	01 1d 44 c9 02 c0    	add    DWORD PTR ds:0xc002c944,ebx
c0021a25:	e8 20 e7 fe ff       	call   c001014a <VgaText::updateDiskUsage()>
c0021a2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021a2e:	eb 05                	jmp    c0021a35 <ATA::write(unsigned long long, int, void*)+0x61>
c0021a30:	b8 01 00 00 00       	mov    eax,0x1
c0021a35:	83 c4 10             	add    esp,0x10
c0021a38:	5b                   	pop    ebx
c0021a39:	5e                   	pop    esi
c0021a3a:	5f                   	pop    edi
c0021a3b:	c3                   	ret    

c0021a3c <ATA::detectCHS()>:
c0021a3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021a40:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0021a46:	c1 e0 06             	shl    eax,0x6
c0021a49:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0021a4f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0021a59:	c7 44 24 04 1f 92 02 c0 	mov    DWORD PTR [esp+0x4],0xc002921f
c0021a61:	e9 a1 70 ff ff       	jmp    c0018b07 <Krnl::panic(char const*)>

c0021a66 <ATA::open(int, int, void*)>:
c0021a66:	53                   	push   ebx
c0021a67:	83 ec 08             	sub    esp,0x8
c0021a6a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021a6e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021a72:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021a76:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0021a7c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0021a82:	c1 e0 06             	shl    eax,0x6
c0021a85:	01 d0                	add    eax,edx
c0021a87:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0021a8e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0021a94:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0021a9b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0021aa5:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0021aab:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0021ab2:	75 0c                	jne    c0021ac0 <ATA::open(int, int, void*)+0x5a>
c0021ab4:	83 ec 0c             	sub    esp,0xc
c0021ab7:	53                   	push   ebx
c0021ab8:	e8 7f ff ff ff       	call   c0021a3c <ATA::detectCHS()>
c0021abd:	83 c4 10             	add    esp,0x10
c0021ac0:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0021ac6:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0021acc:	c1 e0 06             	shl    eax,0x6
c0021acf:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0021ad6:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0021ae0:	d1 e8                	shr    eax,1
c0021ae2:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0021ae8:	6a 04                	push   0x4
c0021aea:	6a 0c                	push   0xc
c0021aec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021af3:	50                   	push   eax
c0021af4:	52                   	push   edx
c0021af5:	e8 f4 ed ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021afa:	90                   	nop
c0021afb:	90                   	nop
c0021afc:	6a 00                	push   0x0
c0021afe:	6a 0c                	push   0xc
c0021b00:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021b07:	50                   	push   eax
c0021b08:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021b0e:	e8 db ed ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b13:	83 c4 14             	add    esp,0x14
c0021b16:	53                   	push   ebx
c0021b17:	e8 d4 1f ff ff       	call   c0013af0 <PhysicalDisk::startCache()>
c0021b1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021b1f:	e8 82 3f ff ff       	call   c0015aa6 <createPartitionsForDisk(PhysicalDisk*)>
c0021b24:	31 c0                	xor    eax,eax
c0021b26:	83 c4 18             	add    esp,0x18
c0021b29:	5b                   	pop    ebx
c0021b2a:	c3                   	ret    
c0021b2b:	90                   	nop

c0021b2c <ATAPI::write(unsigned long long, int, void*)>:
c0021b2c:	b8 03 00 00 00       	mov    eax,0x3
c0021b31:	c3                   	ret    

c0021b32 <ATAPI::close(int, int, void*)>:
c0021b32:	83 ec 0c             	sub    esp,0xc
c0021b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b39:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021b3f:	85 c0                	test   eax,eax
c0021b41:	74 0c                	je     c0021b4f <ATAPI::close(int, int, void*)+0x1d>
c0021b43:	83 ec 0c             	sub    esp,0xc
c0021b46:	8b 10                	mov    edx,DWORD PTR [eax]
c0021b48:	50                   	push   eax
c0021b49:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0021b4c:	83 c4 10             	add    esp,0x10
c0021b4f:	31 c0                	xor    eax,eax
c0021b51:	83 c4 0c             	add    esp,0xc
c0021b54:	c3                   	ret    
c0021b55:	90                   	nop

c0021b56 <ATAPI::ATAPI()>:
c0021b56:	83 ec 0c             	sub    esp,0xc
c0021b59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b5d:	83 ec 04             	sub    esp,0x4
c0021b60:	68 00 08 00 00       	push   0x800
c0021b65:	68 68 92 02 c0       	push   0xc0029268
c0021b6a:	50                   	push   eax
c0021b6b:	e8 18 1f ff ff       	call   c0013a88 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021b70:	83 c4 10             	add    esp,0x10
c0021b73:	ba a8 92 02 c0       	mov    edx,0xc00292a8
c0021b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b7c:	89 10                	mov    DWORD PTR [eax],edx
c0021b7e:	90                   	nop
c0021b7f:	83 c4 0c             	add    esp,0xc
c0021b82:	c3                   	ret    
c0021b83:	90                   	nop

c0021b84 <ATAPI::readyForCommand()>:
c0021b84:	56                   	push   esi
c0021b85:	53                   	push   ebx
c0021b86:	31 db                	xor    ebx,ebx
c0021b88:	50                   	push   eax
c0021b89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021b8d:	50                   	push   eax
c0021b8e:	6a 0c                	push   0xc
c0021b90:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0021b97:	50                   	push   eax
c0021b98:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0021b9e:	e8 0b ee ff ff       	call   c00209ae <IDE::read(unsigned char, unsigned char)>
c0021ba3:	83 c4 10             	add    esp,0x10
c0021ba6:	a8 88                	test   al,0x88
c0021ba8:	74 23                	je     c0021bcd <ATAPI::readyForCommand()+0x49>
c0021baa:	43                   	inc    ebx
c0021bab:	83 fb 63             	cmp    ebx,0x63
c0021bae:	7e dd                	jle    c0021b8d <ATAPI::readyForCommand()+0x9>
c0021bb0:	51                   	push   ecx
c0021bb1:	51                   	push   ecx
c0021bb2:	6a 00                	push   0x0
c0021bb4:	68 40 42 0f 00       	push   0xf4240
c0021bb9:	e8 e4 a3 ff ff       	call   c001bfa2 <nanoSleep(unsigned long long)>
c0021bbe:	83 c4 10             	add    esp,0x10
c0021bc1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0021bc7:	75 c4                	jne    c0021b8d <ATAPI::readyForCommand()+0x9>
c0021bc9:	31 c0                	xor    eax,eax
c0021bcb:	eb 02                	jmp    c0021bcf <ATAPI::readyForCommand()+0x4b>
c0021bcd:	b0 01                	mov    al,0x1
c0021bcf:	5a                   	pop    edx
c0021bd0:	5b                   	pop    ebx
c0021bd1:	5e                   	pop    esi
c0021bd2:	c3                   	ret    
c0021bd3:	90                   	nop

c0021bd4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0021bd4:	55                   	push   ebp
c0021bd5:	57                   	push   edi
c0021bd6:	56                   	push   esi
c0021bd7:	53                   	push   ebx
c0021bd8:	83 ec 20             	sub    esp,0x20
c0021bdb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021bdf:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0021be3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0021be7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021beb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021bef:	6a 01                	push   0x1
c0021bf1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021bf8:	50                   	push   eax
c0021bf9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021bff:	e8 f6 ee ff ff       	call   c0020afa <IDE::enableIRQs(unsigned char, bool)>
c0021c04:	5e                   	pop    esi
c0021c05:	58                   	pop    eax
c0021c06:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c0d:	50                   	push   eax
c0021c0e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c14:	e8 af ec ff ff       	call   c00208c8 <IDE::prepareInterrupt(unsigned char)>
c0021c19:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021c1c:	e8 63 ff ff ff       	call   c0021b84 <ATAPI::readyForCommand()>
c0021c21:	83 c4 10             	add    esp,0x10
c0021c24:	84 c0                	test   al,al
c0021c26:	75 0a                	jne    c0021c32 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0021c28:	bb 01 00 00 00       	mov    ebx,0x1
c0021c2d:	e9 57 02 00 00       	jmp    c0021e89 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021c32:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0021c38:	c1 e0 04             	shl    eax,0x4
c0021c3b:	0f b6 c0             	movzx  eax,al
c0021c3e:	50                   	push   eax
c0021c3f:	6a 06                	push   0x6
c0021c41:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c48:	50                   	push   eax
c0021c49:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c4f:	e8 9a ec ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021c54:	6a 00                	push   0x0
c0021c56:	6a 01                	push   0x1
c0021c58:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c5f:	50                   	push   eax
c0021c60:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c66:	e8 83 ec ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021c6b:	83 c4 20             	add    esp,0x20
c0021c6e:	0f b6 c3             	movzx  eax,bl
c0021c71:	0f b6 df             	movzx  ebx,bh
c0021c74:	50                   	push   eax
c0021c75:	6a 04                	push   0x4
c0021c77:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c7e:	50                   	push   eax
c0021c7f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c85:	e8 64 ec ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021c8a:	53                   	push   ebx
c0021c8b:	6a 05                	push   0x5
c0021c8d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c94:	50                   	push   eax
c0021c95:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c9b:	e8 4e ec ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021ca0:	83 c4 20             	add    esp,0x20
c0021ca3:	68 a0 00 00 00       	push   0xa0
c0021ca8:	6a 07                	push   0x7
c0021caa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021cb1:	50                   	push   eax
c0021cb2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021cb8:	e8 31 ec ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021cbd:	83 c4 0c             	add    esp,0xc
c0021cc0:	6a 01                	push   0x1
c0021cc2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021cc9:	50                   	push   eax
c0021cca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021cd0:	e8 c5 f7 ff ff       	call   c002149a <IDE::polling(unsigned char, unsigned int)>
c0021cd5:	83 c4 10             	add    esp,0x10
c0021cd8:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0021cde:	84 c0                	test   al,al
c0021ce0:	74 23                	je     c0021d05 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0021ce2:	0f b6 d8             	movzx  ebx,al
c0021ce5:	0f b6 d2             	movzx  edx,dl
c0021ce8:	53                   	push   ebx
c0021ce9:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0021cf0:	50                   	push   eax
c0021cf1:	52                   	push   edx
c0021cf2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021cf8:	e8 07 f6 ff ff       	call   c0021304 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0021cfd:	83 c4 10             	add    esp,0x10
c0021d00:	e9 84 01 00 00       	jmp    c0021e89 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021d05:	0f b6 d2             	movzx  edx,dl
c0021d08:	53                   	push   ebx
c0021d09:	53                   	push   ebx
c0021d0a:	52                   	push   edx
c0021d0b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021d11:	e8 c6 eb ff ff       	call   c00208dc <IDE::getBase(unsigned char)>
c0021d16:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0021d1a:	b9 06 00 00 00       	mov    ecx,0x6
c0021d1f:	89 c2                	mov    edx,eax
c0021d21:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0021d24:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0021d28:	83 c4 10             	add    esp,0x10
c0021d2b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021d31:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021d38:	85 db                	test   ebx,ebx
c0021d3a:	0f 84 ec 00 00 00    	je     c0021e2c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0021d40:	51                   	push   ecx
c0021d41:	51                   	push   ecx
c0021d42:	52                   	push   edx
c0021d43:	50                   	push   eax
c0021d44:	e8 13 ed ff ff       	call   c0020a5c <IDE::waitInterrupt(unsigned char)>
c0021d49:	83 c4 10             	add    esp,0x10
c0021d4c:	84 c0                	test   al,al
c0021d4e:	0f 84 d4 fe ff ff    	je     c0021c28 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0021d54:	56                   	push   esi
c0021d55:	56                   	push   esi
c0021d56:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021d5d:	50                   	push   eax
c0021d5e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021d64:	e8 5f eb ff ff       	call   c00208c8 <IDE::prepareInterrupt(unsigned char)>
c0021d69:	83 c4 0c             	add    esp,0xc
c0021d6c:	6a 04                	push   0x4
c0021d6e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021d75:	50                   	push   eax
c0021d76:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021d7c:	e8 2d ec ff ff       	call   c00209ae <IDE::read(unsigned char, unsigned char)>
c0021d81:	83 c4 0c             	add    esp,0xc
c0021d84:	89 c6                	mov    esi,eax
c0021d86:	6a 05                	push   0x5
c0021d88:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021d8f:	50                   	push   eax
c0021d90:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021d96:	e8 13 ec ff ff       	call   c00209ae <IDE::read(unsigned char, unsigned char)>
c0021d9b:	89 f1                	mov    ecx,esi
c0021d9d:	0f b6 c0             	movzx  eax,al
c0021da0:	0f b6 f1             	movzx  esi,cl
c0021da3:	c1 e0 08             	shl    eax,0x8
c0021da6:	09 c6                	or     esi,eax
c0021da8:	d1 fe                	sar    esi,1
c0021daa:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0021dae:	83 c4 10             	add    esp,0x10
c0021db1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0021db6:	74 41                	je     c0021df9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0021db8:	31 c9                	xor    ecx,ecx
c0021dba:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021dc0:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021dc7:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0021dcb:	75 0a                	jne    c0021dd7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0021dcd:	01 c9                	add    ecx,ecx
c0021dcf:	01 cd                	add    ebp,ecx
c0021dd1:	4b                   	dec    ebx
c0021dd2:	e9 54 ff ff ff       	jmp    c0021d2b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0021dd7:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0021ddc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021de0:	51                   	push   ecx
c0021de1:	51                   	push   ecx
c0021de2:	52                   	push   edx
c0021de3:	50                   	push   eax
c0021de4:	e8 f3 ea ff ff       	call   c00208dc <IDE::getBase(unsigned char)>
c0021de9:	89 c2                	mov    edx,eax
c0021deb:	89 f0                	mov    eax,esi
c0021ded:	66 ef                	out    dx,ax
c0021def:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021df3:	83 c4 10             	add    esp,0x10
c0021df6:	41                   	inc    ecx
c0021df7:	eb c1                	jmp    c0021dba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0021df9:	31 f6                	xor    esi,esi
c0021dfb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021e01:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021e08:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0021e0c:	75 06                	jne    c0021e14 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0021e0e:	01 f6                	add    esi,esi
c0021e10:	01 f5                	add    ebp,esi
c0021e12:	eb bd                	jmp    c0021dd1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0021e14:	51                   	push   ecx
c0021e15:	51                   	push   ecx
c0021e16:	52                   	push   edx
c0021e17:	50                   	push   eax
c0021e18:	e8 bf ea ff ff       	call   c00208dc <IDE::getBase(unsigned char)>
c0021e1d:	89 c2                	mov    edx,eax
c0021e1f:	66 ed                	in     ax,dx
c0021e21:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0021e26:	83 c4 10             	add    esp,0x10
c0021e29:	46                   	inc    esi
c0021e2a:	eb cf                	jmp    c0021dfb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0021e2c:	51                   	push   ecx
c0021e2d:	51                   	push   ecx
c0021e2e:	52                   	push   edx
c0021e2f:	50                   	push   eax
c0021e30:	e8 27 ec ff ff       	call   c0020a5c <IDE::waitInterrupt(unsigned char)>
c0021e35:	83 c4 10             	add    esp,0x10
c0021e38:	84 c0                	test   al,al
c0021e3a:	0f 84 e8 fd ff ff    	je     c0021c28 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0021e40:	bb a0 86 01 00       	mov    ebx,0x186a0
c0021e45:	52                   	push   edx
c0021e46:	52                   	push   edx
c0021e47:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021e4e:	50                   	push   eax
c0021e4f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021e55:	e8 6e ea ff ff       	call   c00208c8 <IDE::prepareInterrupt(unsigned char)>
c0021e5a:	83 c4 10             	add    esp,0x10
c0021e5d:	50                   	push   eax
c0021e5e:	50                   	push   eax
c0021e5f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021e66:	50                   	push   eax
c0021e67:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021e6d:	e8 6a ea ff ff       	call   c00208dc <IDE::getBase(unsigned char)>
c0021e72:	8d 50 07             	lea    edx,[eax+0x7]
c0021e75:	ec                   	in     al,dx
c0021e76:	83 c4 10             	add    esp,0x10
c0021e79:	a8 88                	test   al,0x88
c0021e7b:	74 0a                	je     c0021e87 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0021e7d:	4b                   	dec    ebx
c0021e7e:	75 dd                	jne    c0021e5d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0021e80:	bb 02 00 00 00       	mov    ebx,0x2
c0021e85:	eb 02                	jmp    c0021e89 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021e87:	31 db                	xor    ebx,ebx
c0021e89:	83 c4 1c             	add    esp,0x1c
c0021e8c:	89 d8                	mov    eax,ebx
c0021e8e:	5b                   	pop    ebx
c0021e8f:	5e                   	pop    esi
c0021e90:	5f                   	pop    edi
c0021e91:	5d                   	pop    ebp
c0021e92:	c3                   	ret    
c0021e93:	90                   	nop

c0021e94 <ATAPI::diskRemoved()>:
c0021e94:	83 ec 18             	sub    esp,0x18
c0021e97:	68 73 92 02 c0       	push   0xc0029273
c0021e9c:	e8 d6 03 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0021ea1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ea5:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0021eac:	83 c4 1c             	add    esp,0x1c
c0021eaf:	c3                   	ret    

c0021eb0 <ATAPI::eject()>:
c0021eb0:	57                   	push   edi
c0021eb1:	b9 03 00 00 00       	mov    ecx,0x3
c0021eb6:	53                   	push   ebx
c0021eb7:	83 ec 14             	sub    esp,0x14
c0021eba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021ebe:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021ec2:	fc                   	cld    
c0021ec3:	31 c0                	xor    eax,eax
c0021ec5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021ec7:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0021ecc:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0021ed1:	50                   	push   eax
c0021ed2:	50                   	push   eax
c0021ed3:	6a 00                	push   0x0
c0021ed5:	6a 00                	push   0x0
c0021ed7:	6a 00                	push   0x0
c0021ed9:	6a 02                	push   0x2
c0021edb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021edf:	50                   	push   eax
c0021ee0:	53                   	push   ebx
c0021ee1:	e8 ee fc ff ff       	call   c0021bd4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021ee6:	83 c4 14             	add    esp,0x14
c0021ee9:	53                   	push   ebx
c0021eea:	e8 a5 ff ff ff       	call   c0021e94 <ATAPI::diskRemoved()>
c0021eef:	83 c4 24             	add    esp,0x24
c0021ef2:	5b                   	pop    ebx
c0021ef3:	5f                   	pop    edi
c0021ef4:	c3                   	ret    
c0021ef5:	90                   	nop

c0021ef6 <ATAPI::diskInserted()>:
c0021ef6:	53                   	push   ebx
c0021ef7:	83 ec 14             	sub    esp,0x14
c0021efa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021efe:	68 89 92 02 c0       	push   0xc0029289
c0021f03:	e8 6f 03 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0021f08:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0021f0f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021f12:	e8 d9 1b ff ff       	call   c0013af0 <PhysicalDisk::startCache()>
c0021f17:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0021f1b:	83 c4 18             	add    esp,0x18
c0021f1e:	5b                   	pop    ebx
c0021f1f:	e9 82 3b ff ff       	jmp    c0015aa6 <createPartitionsForDisk(PhysicalDisk*)>

c0021f24 <ATAPI::detectMedia()>:
c0021f24:	56                   	push   esi
c0021f25:	53                   	push   ebx
c0021f26:	83 ec 28             	sub    esp,0x28
c0021f29:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021f2d:	6a 0c                	push   0xc
c0021f2f:	6a 00                	push   0x0
c0021f31:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0021f35:	56                   	push   esi
c0021f36:	e8 8a e7 fd ff       	call   c00006c5 <memset>
c0021f3b:	58                   	pop    eax
c0021f3c:	5a                   	pop    edx
c0021f3d:	6a 00                	push   0x0
c0021f3f:	6a 00                	push   0x0
c0021f41:	6a 00                	push   0x0
c0021f43:	6a 00                	push   0x0
c0021f45:	56                   	push   esi
c0021f46:	53                   	push   ebx
c0021f47:	e8 88 fc ff ff       	call   c0021bd4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021f4c:	83 c4 1c             	add    esp,0x1c
c0021f4f:	6a 0c                	push   0xc
c0021f51:	6a 00                	push   0x0
c0021f53:	56                   	push   esi
c0021f54:	e8 6c e7 fd ff       	call   c00006c5 <memset>
c0021f59:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0021f5e:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0021f63:	59                   	pop    ecx
c0021f64:	58                   	pop    eax
c0021f65:	6a 01                	push   0x1
c0021f67:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021f6b:	50                   	push   eax
c0021f6c:	6a 00                	push   0x0
c0021f6e:	6a 12                	push   0x12
c0021f70:	56                   	push   esi
c0021f71:	53                   	push   ebx
c0021f72:	e8 5d fc ff ff       	call   c0021bd4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021f77:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0021f7b:	83 c4 20             	add    esp,0x20
c0021f7e:	83 e0 7f             	and    eax,0x7f
c0021f81:	3c 70                	cmp    al,0x70
c0021f83:	74 15                	je     c0021f9a <ATAPI::detectMedia()+0x76>
c0021f85:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021f8c:	75 0c                	jne    c0021f9a <ATAPI::detectMedia()+0x76>
c0021f8e:	83 ec 0c             	sub    esp,0xc
c0021f91:	53                   	push   ebx
c0021f92:	e8 5f ff ff ff       	call   c0021ef6 <ATAPI::diskInserted()>
c0021f97:	83 c4 10             	add    esp,0x10
c0021f9a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021f9e:	83 e0 0f             	and    eax,0xf
c0021fa1:	3c 02                	cmp    al,0x2
c0021fa3:	75 1b                	jne    c0021fc0 <ATAPI::detectMedia()+0x9c>
c0021fa5:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0021faa:	75 2d                	jne    c0021fd9 <ATAPI::detectMedia()+0xb5>
c0021fac:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021fb3:	74 24                	je     c0021fd9 <ATAPI::detectMedia()+0xb5>
c0021fb5:	83 ec 0c             	sub    esp,0xc
c0021fb8:	53                   	push   ebx
c0021fb9:	e8 d6 fe ff ff       	call   c0021e94 <ATAPI::diskRemoved()>
c0021fbe:	eb 16                	jmp    c0021fd6 <ATAPI::detectMedia()+0xb2>
c0021fc0:	84 c0                	test   al,al
c0021fc2:	75 15                	jne    c0021fd9 <ATAPI::detectMedia()+0xb5>
c0021fc4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021fcb:	75 0c                	jne    c0021fd9 <ATAPI::detectMedia()+0xb5>
c0021fcd:	83 ec 0c             	sub    esp,0xc
c0021fd0:	53                   	push   ebx
c0021fd1:	e8 20 ff ff ff       	call   c0021ef6 <ATAPI::diskInserted()>
c0021fd6:	83 c4 10             	add    esp,0x10
c0021fd9:	83 c4 24             	add    esp,0x24
c0021fdc:	5b                   	pop    ebx
c0021fdd:	5e                   	pop    esi
c0021fde:	c3                   	ret    
c0021fdf:	90                   	nop

c0021fe0 <ATAPI::open(int, int, void*)>:
c0021fe0:	53                   	push   ebx
c0021fe1:	83 ec 08             	sub    esp,0x8
c0021fe4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021fe8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021fec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021ff0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0021ff6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0021ffc:	c1 e0 06             	shl    eax,0x6
c0021fff:	01 d0                	add    eax,edx
c0022001:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0022008:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002200e:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0022015:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002201f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0022025:	6a 04                	push   0x4
c0022027:	6a 0c                	push   0xc
c0022029:	51                   	push   ecx
c002202a:	52                   	push   edx
c002202b:	e8 be e8 ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022030:	90                   	nop
c0022031:	90                   	nop
c0022032:	6a 00                	push   0x0
c0022034:	6a 0c                	push   0xc
c0022036:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002203d:	50                   	push   eax
c002203e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022044:	e8 a5 e8 ff ff       	call   c00208ee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022049:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0022050:	83 c4 14             	add    esp,0x14
c0022053:	53                   	push   ebx
c0022054:	e8 cb fe ff ff       	call   c0021f24 <ATAPI::detectMedia()>
c0022059:	31 c0                	xor    eax,eax
c002205b:	83 c4 18             	add    esp,0x18
c002205e:	5b                   	pop    ebx
c002205f:	c3                   	ret    

c0022060 <ATAPI::read(unsigned long long, int, void*)>:
c0022060:	55                   	push   ebp
c0022061:	57                   	push   edi
c0022062:	56                   	push   esi
c0022063:	53                   	push   ebx
c0022064:	83 ec 1c             	sub    esp,0x1c
c0022067:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002206b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002206f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0022073:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002207a:	74 41                	je     c00220bd <ATAPI::read(unsigned long long, int, void*)+0x5d>
c002207c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0022080:	b9 03 00 00 00       	mov    ecx,0x3
c0022085:	fc                   	cld    
c0022086:	31 c0                	xor    eax,eax
c0022088:	86 fb                	xchg   bl,bh
c002208a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002208c:	c1 c3 10             	rol    ebx,0x10
c002208f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0022094:	89 e8                	mov    eax,ebp
c0022096:	86 fb                	xchg   bl,bh
c0022098:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002209c:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00220a0:	50                   	push   eax
c00220a1:	50                   	push   eax
c00220a2:	55                   	push   ebp
c00220a3:	c1 e5 0b             	shl    ebp,0xb
c00220a6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00220aa:	6a 00                	push   0x0
c00220ac:	55                   	push   ebp
c00220ad:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220b1:	50                   	push   eax
c00220b2:	56                   	push   esi
c00220b3:	e8 1c fb ff ff       	call   c0021bd4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00220b8:	83 c4 20             	add    esp,0x20
c00220bb:	eb 1a                	jmp    c00220d7 <ATAPI::read(unsigned long long, int, void*)+0x77>
c00220bd:	83 ec 0c             	sub    esp,0xc
c00220c0:	56                   	push   esi
c00220c1:	e8 5e fe ff ff       	call   c0021f24 <ATAPI::detectMedia()>
c00220c6:	83 c4 10             	add    esp,0x10
c00220c9:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00220d0:	75 aa                	jne    c002207c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00220d2:	b8 02 00 00 00       	mov    eax,0x2
c00220d7:	83 c4 1c             	add    esp,0x1c
c00220da:	5b                   	pop    ebx
c00220db:	5e                   	pop    esi
c00220dc:	5f                   	pop    edi
c00220dd:	5d                   	pop    ebp
c00220de:	c3                   	ret    
c00220df:	90                   	nop

c00220e0 <AVX::open(int, int, void*)>:
c00220e0:	83 ec 0c             	sub    esp,0xc
c00220e3:	e8 30 11 00 00       	call   c0023218 <avxInit>
c00220e8:	b8 00 00 00 00       	mov    eax,0x0
c00220ed:	83 c4 0c             	add    esp,0xc
c00220f0:	c3                   	ret    
c00220f1:	90                   	nop

c00220f2 <AVX::close(int, int, void*)>:
c00220f2:	83 ec 0c             	sub    esp,0xc
c00220f5:	e8 1f 11 00 00       	call   c0023219 <avxClose>
c00220fa:	b8 00 00 00 00       	mov    eax,0x0
c00220ff:	83 c4 0c             	add    esp,0xc
c0022102:	c3                   	ret    
c0022103:	90                   	nop

c0022104 <AVX::available()>:
c0022104:	83 ec 0c             	sub    esp,0xc
c0022107:	e8 04 11 00 00       	call   c0023210 <avxDetect>
c002210c:	85 c0                	test   eax,eax
c002210e:	0f 95 c0             	setne  al
c0022111:	83 c4 0c             	add    esp,0xc
c0022114:	c3                   	ret    
c0022115:	90                   	nop

c0022116 <AVX::save(void*)>:
c0022116:	83 ec 0c             	sub    esp,0xc
c0022119:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002211d:	83 ec 0c             	sub    esp,0xc
c0022120:	50                   	push   eax
c0022121:	e8 f0 10 00 00       	call   c0023216 <avxSave>
c0022126:	83 c4 10             	add    esp,0x10
c0022129:	90                   	nop
c002212a:	83 c4 0c             	add    esp,0xc
c002212d:	c3                   	ret    

c002212e <AVX::load(void*)>:
c002212e:	83 ec 0c             	sub    esp,0xc
c0022131:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022135:	83 ec 0c             	sub    esp,0xc
c0022138:	50                   	push   eax
c0022139:	e8 d9 10 00 00       	call   c0023217 <avxLoad>
c002213e:	83 c4 10             	add    esp,0x10
c0022141:	90                   	nop
c0022142:	83 c4 0c             	add    esp,0xc
c0022145:	c3                   	ret    

c0022146 <AVX::AVX()>:
c0022146:	83 ec 0c             	sub    esp,0xc
c0022149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002214d:	83 ec 08             	sub    esp,0x8
c0022150:	68 d4 92 02 c0       	push   0xc00292d4
c0022155:	50                   	push   eax
c0022156:	e8 0b 1a ff ff       	call   c0013b66 <FPU::FPU(char const*)>
c002215b:	83 c4 10             	add    esp,0x10
c002215e:	ba e4 92 02 c0       	mov    edx,0xc00292e4
c0022163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022167:	89 10                	mov    DWORD PTR [eax],edx
c0022169:	90                   	nop
c002216a:	83 c4 0c             	add    esp,0xc
c002216d:	c3                   	ret    

c002216e <MMX::available()>:
c002216e:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c0022173:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0022179:	83 e0 20             	and    eax,0x20
c002217c:	84 c0                	test   al,al
c002217e:	0f 95 c0             	setne  al
c0022181:	c3                   	ret    

c0022182 <MMX::open(int, int, void*)>:
c0022182:	83 ec 0c             	sub    esp,0xc
c0022185:	e8 02 11 00 00       	call   c002328c <x87Init>
c002218a:	b8 00 00 00 00       	mov    eax,0x0
c002218f:	83 c4 0c             	add    esp,0xc
c0022192:	c3                   	ret    
c0022193:	90                   	nop

c0022194 <MMX::close(int, int, void*)>:
c0022194:	83 ec 0c             	sub    esp,0xc
c0022197:	e8 0a 11 00 00       	call   c00232a6 <x87Close>
c002219c:	b8 00 00 00 00       	mov    eax,0x0
c00221a1:	83 c4 0c             	add    esp,0xc
c00221a4:	c3                   	ret    
c00221a5:	90                   	nop

c00221a6 <MMX::save(void*)>:
c00221a6:	83 ec 0c             	sub    esp,0xc
c00221a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00221ad:	83 ec 0c             	sub    esp,0xc
c00221b0:	50                   	push   eax
c00221b1:	e8 cb 10 00 00       	call   c0023281 <x87Save>
c00221b6:	83 c4 10             	add    esp,0x10
c00221b9:	90                   	nop
c00221ba:	83 c4 0c             	add    esp,0xc
c00221bd:	c3                   	ret    

c00221be <MMX::load(void*)>:
c00221be:	83 ec 0c             	sub    esp,0xc
c00221c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00221c5:	83 ec 0c             	sub    esp,0xc
c00221c8:	50                   	push   eax
c00221c9:	e8 b9 10 00 00       	call   c0023287 <x87Load>
c00221ce:	83 c4 10             	add    esp,0x10
c00221d1:	90                   	nop
c00221d2:	83 c4 0c             	add    esp,0xc
c00221d5:	c3                   	ret    

c00221d6 <MMX::MMX()>:
c00221d6:	83 ec 0c             	sub    esp,0xc
c00221d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221dd:	83 ec 08             	sub    esp,0x8
c00221e0:	68 14 93 02 c0       	push   0xc0029314
c00221e5:	50                   	push   eax
c00221e6:	e8 7b 19 ff ff       	call   c0013b66 <FPU::FPU(char const*)>
c00221eb:	83 c4 10             	add    esp,0x10
c00221ee:	ba 24 93 02 c0       	mov    edx,0xc0029324
c00221f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221f7:	89 10                	mov    DWORD PTR [eax],edx
c00221f9:	90                   	nop
c00221fa:	83 c4 0c             	add    esp,0xc
c00221fd:	c3                   	ret    

c00221fe <SSE::open(int, int, void*)>:
c00221fe:	83 ec 0c             	sub    esp,0xc
c0022201:	e8 41 10 00 00       	call   c0023247 <sseInit>
c0022206:	b8 00 00 00 00       	mov    eax,0x0
c002220b:	83 c4 0c             	add    esp,0xc
c002220e:	c3                   	ret    
c002220f:	90                   	nop

c0022210 <SSE::close(int, int, void*)>:
c0022210:	83 ec 0c             	sub    esp,0xc
c0022213:	e8 3f 10 00 00       	call   c0023257 <sseClose>
c0022218:	b8 00 00 00 00       	mov    eax,0x0
c002221d:	83 c4 0c             	add    esp,0xc
c0022220:	c3                   	ret    
c0022221:	90                   	nop

c0022222 <SSE::available()>:
c0022222:	83 ec 1c             	sub    esp,0x1c
c0022225:	e8 f6 0f 00 00       	call   c0023220 <sseDetect>
c002222a:	85 c0                	test   eax,eax
c002222c:	0f 95 c0             	setne  al
c002222f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022233:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022237:	83 c4 1c             	add    esp,0x1c
c002223a:	c3                   	ret    
c002223b:	90                   	nop

c002223c <SSE::save(void*)>:
c002223c:	83 ec 0c             	sub    esp,0xc
c002223f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022243:	83 ec 0c             	sub    esp,0xc
c0022246:	50                   	push   eax
c0022247:	e8 ef 0f 00 00       	call   c002323b <sseSave>
c002224c:	83 c4 10             	add    esp,0x10
c002224f:	90                   	nop
c0022250:	83 c4 0c             	add    esp,0xc
c0022253:	c3                   	ret    

c0022254 <SSE::load(void*)>:
c0022254:	83 ec 0c             	sub    esp,0xc
c0022257:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002225b:	83 ec 0c             	sub    esp,0xc
c002225e:	50                   	push   eax
c002225f:	e8 dd 0f 00 00       	call   c0023241 <sseLoad>
c0022264:	83 c4 10             	add    esp,0x10
c0022267:	90                   	nop
c0022268:	83 c4 0c             	add    esp,0xc
c002226b:	c3                   	ret    

c002226c <SSE::SSE()>:
c002226c:	83 ec 0c             	sub    esp,0xc
c002226f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022273:	83 ec 08             	sub    esp,0x8
c0022276:	68 54 93 02 c0       	push   0xc0029354
c002227b:	50                   	push   eax
c002227c:	e8 e5 18 ff ff       	call   c0013b66 <FPU::FPU(char const*)>
c0022281:	83 c4 10             	add    esp,0x10
c0022284:	ba 64 93 02 c0       	mov    edx,0xc0029364
c0022289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002228d:	89 10                	mov    DWORD PTR [eax],edx
c002228f:	90                   	nop
c0022290:	83 c4 0c             	add    esp,0xc
c0022293:	c3                   	ret    

c0022294 <x87::open(int, int, void*)>:
c0022294:	83 ec 0c             	sub    esp,0xc
c0022297:	e8 f0 0f 00 00       	call   c002328c <x87Init>
c002229c:	b8 00 00 00 00       	mov    eax,0x0
c00222a1:	83 c4 0c             	add    esp,0xc
c00222a4:	c3                   	ret    
c00222a5:	90                   	nop

c00222a6 <x87::close(int, int, void*)>:
c00222a6:	83 ec 0c             	sub    esp,0xc
c00222a9:	e8 f8 0f 00 00       	call   c00232a6 <x87Close>
c00222ae:	b8 00 00 00 00       	mov    eax,0x0
c00222b3:	83 c4 0c             	add    esp,0xc
c00222b6:	c3                   	ret    
c00222b7:	90                   	nop

c00222b8 <x87::available()>:
c00222b8:	83 ec 0c             	sub    esp,0xc
c00222bb:	e8 a6 0f 00 00       	call   c0023266 <x87Detect>
c00222c0:	85 c0                	test   eax,eax
c00222c2:	0f 95 c0             	setne  al
c00222c5:	83 c4 0c             	add    esp,0xc
c00222c8:	c3                   	ret    
c00222c9:	90                   	nop

c00222ca <x87::save(void*)>:
c00222ca:	83 ec 0c             	sub    esp,0xc
c00222cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00222d1:	83 ec 0c             	sub    esp,0xc
c00222d4:	50                   	push   eax
c00222d5:	e8 a7 0f 00 00       	call   c0023281 <x87Save>
c00222da:	83 c4 10             	add    esp,0x10
c00222dd:	90                   	nop
c00222de:	83 c4 0c             	add    esp,0xc
c00222e1:	c3                   	ret    

c00222e2 <x87::load(void*)>:
c00222e2:	83 ec 0c             	sub    esp,0xc
c00222e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00222e9:	83 ec 0c             	sub    esp,0xc
c00222ec:	50                   	push   eax
c00222ed:	e8 95 0f 00 00       	call   c0023287 <x87Load>
c00222f2:	83 c4 10             	add    esp,0x10
c00222f5:	90                   	nop
c00222f6:	83 c4 0c             	add    esp,0xc
c00222f9:	c3                   	ret    

c00222fa <x87::x87()>:
c00222fa:	83 ec 0c             	sub    esp,0xc
c00222fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022301:	83 ec 08             	sub    esp,0x8
c0022304:	68 94 93 02 c0       	push   0xc0029394
c0022309:	50                   	push   eax
c002230a:	e8 57 18 ff ff       	call   c0013b66 <FPU::FPU(char const*)>
c002230f:	83 c4 10             	add    esp,0x10
c0022312:	ba a4 93 02 c0       	mov    edx,0xc00293a4
c0022317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002231b:	89 10                	mov    DWORD PTR [eax],edx
c002231d:	90                   	nop
c002231e:	83 c4 0c             	add    esp,0xc
c0022321:	c3                   	ret    

c0022322 <APIC::disable()>:
c0022322:	90                   	nop
c0022323:	c3                   	ret    

c0022324 <APIC::close(int, int, void*)>:
c0022324:	55                   	push   ebp
c0022325:	89 e5                	mov    ebp,esp
c0022327:	83 ec 08             	sub    esp,0x8
c002232a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002232d:	8b 00                	mov    eax,DWORD PTR [eax]
c002232f:	83 c0 3c             	add    eax,0x3c
c0022332:	8b 00                	mov    eax,DWORD PTR [eax]
c0022334:	83 ec 0c             	sub    esp,0xc
c0022337:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002233a:	ff d0                	call   eax
c002233c:	83 c4 10             	add    esp,0x10
c002233f:	b8 00 00 00 00       	mov    eax,0x0
c0022344:	c9                   	leave  
c0022345:	c3                   	ret    

c0022346 <IOAPIC::close(int, int, void*)>:
c0022346:	b8 00 00 00 00       	mov    eax,0x0
c002234b:	c3                   	ret    

c002234c <APIC::io_wait()>:
c002234c:	eb 00                	jmp    c002234e <APIC::io_wait()+0x2>
c002234e:	eb 00                	jmp    c0022350 <APIC::io_wait()+0x4>
c0022350:	90                   	nop
c0022351:	c3                   	ret    

c0022352 <APIC::getBase()>:
c0022352:	55                   	push   ebp
c0022353:	89 e5                	mov    ebp,esp
c0022355:	83 ec 18             	sub    esp,0x18
c0022358:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c002235d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0022363:	83 e0 08             	and    eax,0x8
c0022366:	84 c0                	test   al,al
c0022368:	75 07                	jne    c0022371 <APIC::getBase()+0x1f>
c002236a:	b8 00 00 00 00       	mov    eax,0x0
c002236f:	eb 21                	jmp    c0022392 <APIC::getBase()+0x40>
c0022371:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c0022376:	83 ec 08             	sub    esp,0x8
c0022379:	6a 1b                	push   0x1b
c002237b:	50                   	push   eax
c002237c:	e8 8d c3 fe ff       	call   c000e70e <Computer::rdmsr(unsigned int)>
c0022381:	83 c4 10             	add    esp,0x10
c0022384:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0022387:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002238a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002238d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0022392:	c9                   	leave  
c0022393:	c3                   	ret    

c0022394 <APIC::eoi(unsigned char)>:
c0022394:	55                   	push   ebp
c0022395:	89 e5                	mov    ebp,esp
c0022397:	83 ec 28             	sub    esp,0x28
c002239a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002239d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00223a0:	83 ec 0c             	sub    esp,0xc
c00223a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00223a6:	e8 a7 ff ff ff       	call   c0022352 <APIC::getBase()>
c00223ab:	83 c4 10             	add    esp,0x10
c00223ae:	05 b0 00 00 00       	add    eax,0xb0
c00223b3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00223b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00223b9:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00223bf:	90                   	nop
c00223c0:	c9                   	leave  
c00223c1:	c3                   	ret    

c00223c2 <APIC::open(int, int, void*)>:
c00223c2:	55                   	push   ebp
c00223c3:	89 e5                	mov    ebp,esp
c00223c5:	57                   	push   edi
c00223c6:	56                   	push   esi
c00223c7:	53                   	push   ebx
c00223c8:	83 ec 2c             	sub    esp,0x2c
c00223cb:	83 ec 0c             	sub    esp,0xc
c00223ce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00223d1:	e8 7c ff ff ff       	call   c0022352 <APIC::getBase()>
c00223d6:	83 c4 10             	add    esp,0x10
c00223d9:	89 c2                	mov    edx,eax
c00223db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00223de:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00223e4:	0f b6 f8             	movzx  edi,al
c00223e7:	89 d0                	mov    eax,edx
c00223e9:	ba 00 00 00 00       	mov    edx,0x0
c00223ee:	89 c1                	mov    ecx,eax
c00223f0:	80 e5 ff             	and    ch,0xff
c00223f3:	89 cb                	mov    ebx,ecx
c00223f5:	0f b6 f2             	movzx  esi,dl
c00223f8:	89 d8                	mov    eax,ebx
c00223fa:	89 f2                	mov    edx,esi
c00223fc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00223ff:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022402:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022406:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002240a:	83 e0 00             	and    eax,0x0
c002240d:	09 d0                	or     eax,edx
c002240f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022413:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022416:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002241c:	8d 50 01             	lea    edx,[eax+0x1]
c002241f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022422:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022428:	0f b6 d0             	movzx  edx,al
c002242b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002242e:	83 c2 08             	add    edx,0x8
c0022431:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022435:	0f b6 c9             	movzx  ecx,cl
c0022438:	81 c9 00 00 01 00    	or     ecx,0x10000
c002243e:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022442:	83 ec 0c             	sub    esp,0xc
c0022445:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022448:	e8 05 ff ff ff       	call   c0022352 <APIC::getBase()>
c002244d:	83 c4 10             	add    esp,0x10
c0022450:	05 f0 00 00 00       	add    eax,0xf0
c0022455:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0022458:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002245b:	8b 00                	mov    eax,DWORD PTR [eax]
c002245d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0022460:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0022467:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002246e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022471:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022474:	89 10                	mov    DWORD PTR [eax],edx
c0022476:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002247d:	a1 30 af 02 c0       	mov    eax,ds:0xc002af30
c0022482:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0022485:	7d 7c                	jge    c0022503 <APIC::open(int, int, void*)+0x141>
c0022487:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002248a:	8b 04 85 40 af 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd50c0]
c0022491:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0022494:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0022497:	8b 04 85 40 af 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd50c0]
c002249e:	c1 e8 08             	shr    eax,0x8
c00224a1:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00224a5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00224a8:	8b 04 85 40 af 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd50c0]
c00224af:	c1 e8 18             	shr    eax,0x18
c00224b2:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00224b5:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00224b9:	75 40                	jne    c00224fb <APIC::open(int, int, void*)+0x139>
c00224bb:	83 ec 0c             	sub    esp,0xc
c00224be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00224c1:	e8 8c fe ff ff       	call   c0022352 <APIC::getBase()>
c00224c6:	83 c4 10             	add    esp,0x10
c00224c9:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00224cd:	75 07                	jne    c00224d6 <APIC::open(int, int, void*)+0x114>
c00224cf:	ba 60 03 00 00       	mov    edx,0x360
c00224d4:	eb 05                	jmp    c00224db <APIC::open(int, int, void*)+0x119>
c00224d6:	ba 50 03 00 00       	mov    edx,0x350
c00224db:	01 d0                	add    eax,edx
c00224dd:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00224e0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00224e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00224e5:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00224e8:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00224ef:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00224f3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00224f6:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00224f9:	89 10                	mov    DWORD PTR [eax],edx
c00224fb:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00224fe:	e9 7a ff ff ff       	jmp    c002247d <APIC::open(int, int, void*)+0xbb>
c0022503:	b8 00 00 00 00       	mov    eax,0x0
c0022508:	8d 65 f4             	lea    esp,[ebp-0xc]
c002250b:	5b                   	pop    ebx
c002250c:	5e                   	pop    esi
c002250d:	5f                   	pop    edi
c002250e:	5d                   	pop    ebp
c002250f:	c3                   	ret    

c0022510 <IOAPIC::IOAPIC()>:
c0022510:	83 ec 0c             	sub    esp,0xc
c0022513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022517:	83 ec 08             	sub    esp,0x8
c002251a:	68 d4 93 02 c0       	push   0xc00293d4
c002251f:	50                   	push   eax
c0022520:	e8 4d 13 ff ff       	call   c0013872 <Device::Device(char const*)>
c0022525:	83 c4 10             	add    esp,0x10
c0022528:	ba fc 94 02 c0       	mov    edx,0xc00294fc
c002252d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022531:	89 10                	mov    DWORD PTR [eax],edx
c0022533:	90                   	nop
c0022534:	83 c4 0c             	add    esp,0xc
c0022537:	c3                   	ret    

c0022538 <APIC::APIC()>:
c0022538:	53                   	push   ebx
c0022539:	83 ec 18             	sub    esp,0x18
c002253c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022540:	83 ec 08             	sub    esp,0x8
c0022543:	68 dc 93 02 c0       	push   0xc00293dc
c0022548:	50                   	push   eax
c0022549:	e8 7c 1a ff ff       	call   c0013fca <InterruptController::InterruptController(char const*)>
c002254e:	83 c4 10             	add    esp,0x10
c0022551:	ba b4 94 02 c0       	mov    edx,0xc00294b4
c0022556:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002255a:	89 10                	mov    DWORD PTR [eax],edx
c002255c:	a0 a0 c9 02 c0       	mov    al,ds:0xc002c9a0
c0022561:	83 f0 01             	xor    eax,0x1
c0022564:	84 c0                	test   al,al
c0022566:	0f 84 96 00 00 00    	je     c0022602 <APIC::APIC()+0xca>
c002256c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0022571:	a0 e0 af 02 c0       	mov    al,ds:0xc002afe0
c0022576:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002257a:	73 7f                	jae    c00225fb <APIC::APIC()+0xc3>
c002257c:	83 ec 0c             	sub    esp,0xc
c002257f:	68 68 01 00 00       	push   0x168
c0022584:	e8 ff fb fe ff       	call   c0012188 <operator new(unsigned long)>
c0022589:	83 c4 10             	add    esp,0x10
c002258c:	89 c3                	mov    ebx,eax
c002258e:	83 ec 0c             	sub    esp,0xc
c0022591:	53                   	push   ebx
c0022592:	e8 79 ff ff ff       	call   c0022510 <IOAPIC::IOAPIC()>
c0022597:	83 c4 10             	add    esp,0x10
c002259a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002259e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00225a3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00225a7:	89 14 85 80 c9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3680],edx
c00225ae:	a1 60 c9 02 c0       	mov    eax,ds:0xc002c960
c00225b3:	40                   	inc    eax
c00225b4:	a3 60 c9 02 c0       	mov    ds:0xc002c960,eax
c00225b9:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c00225be:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00225c4:	83 ec 08             	sub    esp,0x8
c00225c7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00225cb:	50                   	push   eax
c00225cc:	e8 b1 10 ff ff       	call   c0013682 <Device::addChild(Device*)>
c00225d1:	83 c4 10             	add    esp,0x10
c00225d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00225d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00225da:	83 c0 08             	add    eax,0x8
c00225dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00225df:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00225e4:	6a 00                	push   0x0
c00225e6:	6a 00                	push   0x0
c00225e8:	52                   	push   edx
c00225e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225ed:	ff d0                	call   eax
c00225ef:	83 c4 10             	add    esp,0x10
c00225f2:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00225f6:	e9 76 ff ff ff       	jmp    c0022571 <APIC::APIC()+0x39>
c00225fb:	c6 05 a0 c9 02 c0 01 	mov    BYTE PTR ds:0xc002c9a0,0x1
c0022602:	90                   	nop
c0022603:	83 c4 18             	add    esp,0x18
c0022606:	5b                   	pop    ebx
c0022607:	c3                   	ret    

c0022608 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0022608:	55                   	push   ebp
c0022609:	89 e5                	mov    ebp,esp
c002260b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002260e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022614:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0022617:	72 1d                	jb     c0022636 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0022619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002261c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0022622:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022625:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002262b:	01 d0                	add    eax,edx
c002262d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0022630:	73 04                	jae    c0022636 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0022632:	b0 01                	mov    al,0x1
c0022634:	eb 02                	jmp    c0022638 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0022636:	b0 00                	mov    al,0x0
c0022638:	5d                   	pop    ebp
c0022639:	c3                   	ret    

c002263a <IOAPIC::read(int)>:
c002263a:	55                   	push   ebp
c002263b:	89 e5                	mov    ebp,esp
c002263d:	83 ec 10             	sub    esp,0x10
c0022640:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022643:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022649:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002264c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002264f:	0f b6 d0             	movzx  edx,al
c0022652:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022655:	89 10                	mov    DWORD PTR [eax],edx
c0022657:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002265a:	83 c0 10             	add    eax,0x10
c002265d:	8b 00                	mov    eax,DWORD PTR [eax]
c002265f:	c9                   	leave  
c0022660:	c3                   	ret    
c0022661:	90                   	nop

c0022662 <IOAPIC::open(int, int, void*)>:
c0022662:	55                   	push   ebp
c0022663:	89 e5                	mov    ebp,esp
c0022665:	57                   	push   edi
c0022666:	56                   	push   esi
c0022667:	53                   	push   ebx
c0022668:	83 ec 0c             	sub    esp,0xc
c002266b:	83 ec 0c             	sub    esp,0xc
c002266e:	68 07 94 02 c0       	push   0xc0029407
c0022673:	e8 ff fb fe ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0022678:	83 c4 10             	add    esp,0x10
c002267b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002267e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022681:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022687:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002268a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022690:	8b 14 85 20 b0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4fe0]
c0022697:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002269a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00226a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00226a3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00226a9:	8b 14 85 a0 b0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4f60]
c00226b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00226b3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00226b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00226bc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00226c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00226c5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00226cb:	0f b6 f8             	movzx  edi,al
c00226ce:	89 d0                	mov    eax,edx
c00226d0:	ba 00 00 00 00       	mov    edx,0x0
c00226d5:	89 c1                	mov    ecx,eax
c00226d7:	80 e5 ff             	and    ch,0xff
c00226da:	89 cb                	mov    ebx,ecx
c00226dc:	0f b6 f2             	movzx  esi,dl
c00226df:	89 d8                	mov    eax,ebx
c00226e1:	89 f2                	mov    edx,esi
c00226e3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00226e6:	8d 5f 08             	lea    ebx,[edi+0x8]
c00226e9:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00226ed:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00226f1:	83 e0 00             	and    eax,0x0
c00226f4:	09 d0                	or     eax,edx
c00226f6:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00226fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00226fd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022703:	8d 50 01             	lea    edx,[eax+0x1]
c0022706:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022709:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002270f:	0f b6 d0             	movzx  edx,al
c0022712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022715:	83 c2 08             	add    edx,0x8
c0022718:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002271c:	0f b6 c9             	movzx  ecx,cl
c002271f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0022725:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022729:	83 ec 08             	sub    esp,0x8
c002272c:	6a 01                	push   0x1
c002272e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022731:	e8 04 ff ff ff       	call   c002263a <IOAPIC::read(int)>
c0022736:	83 c4 10             	add    esp,0x10
c0022739:	c1 f8 10             	sar    eax,0x10
c002273c:	0f b6 c0             	movzx  eax,al
c002273f:	8d 50 01             	lea    edx,[eax+0x1]
c0022742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022745:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002274b:	b8 00 00 00 00       	mov    eax,0x0
c0022750:	8d 65 f4             	lea    esp,[ebp-0xc]
c0022753:	5b                   	pop    ebx
c0022754:	5e                   	pop    esi
c0022755:	5f                   	pop    edi
c0022756:	5d                   	pop    ebp
c0022757:	c3                   	ret    

c0022758 <IOAPIC::write(int, int)>:
c0022758:	55                   	push   ebp
c0022759:	89 e5                	mov    ebp,esp
c002275b:	83 ec 10             	sub    esp,0x10
c002275e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022761:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022767:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002276a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002276d:	0f b6 d0             	movzx  edx,al
c0022770:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022773:	89 10                	mov    DWORD PTR [eax],edx
c0022775:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022778:	8d 50 10             	lea    edx,[eax+0x10]
c002277b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002277e:	89 02                	mov    DWORD PTR [edx],eax
c0022780:	90                   	nop
c0022781:	c9                   	leave  
c0022782:	c3                   	ret    
c0022783:	90                   	nop

c0022784 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0022784:	55                   	push   ebp
c0022785:	89 e5                	mov    ebp,esp
c0022787:	53                   	push   ebx
c0022788:	83 ec 2c             	sub    esp,0x2c
c002278b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002278e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0022791:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0022794:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0022797:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002279a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002279d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00227a0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00227a3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00227a6:	88 d8                	mov    al,bl
c00227a8:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00227ab:	88 c8                	mov    al,cl
c00227ad:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00227b0:	88 d0                	mov    al,dl
c00227b2:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00227b5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00227b9:	83 c0 08             	add    eax,0x8
c00227bc:	01 c0                	add    eax,eax
c00227be:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00227c1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00227c5:	83 c0 08             	add    eax,0x8
c00227c8:	01 c0                	add    eax,eax
c00227ca:	40                   	inc    eax
c00227cb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00227ce:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00227d1:	50                   	push   eax
c00227d2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00227d5:	e8 60 fe ff ff       	call   c002263a <IOAPIC::read(int)>
c00227da:	83 c4 08             	add    esp,0x8
c00227dd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00227e0:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00227e7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00227ea:	c1 e0 18             	shl    eax,0x18
c00227ed:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00227f0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00227f3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00227f6:	52                   	push   edx
c00227f7:	50                   	push   eax
c00227f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00227fb:	e8 58 ff ff ff       	call   c0022758 <IOAPIC::write(int, int)>
c0022800:	83 c4 0c             	add    esp,0xc
c0022803:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022806:	50                   	push   eax
c0022807:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002280a:	e8 2b fe ff ff       	call   c002263a <IOAPIC::read(int)>
c002280f:	83 c4 08             	add    esp,0x8
c0022812:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0022815:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002281c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0022823:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002282a:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002282e:	74 09                	je     c0022839 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0022830:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0022837:	eb 07                	jmp    c0022840 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0022839:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0022840:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0022844:	74 09                	je     c002284f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0022846:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002284d:	eb 07                	jmp    c0022856 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c002284f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0022856:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002285d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0022861:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0022864:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0022867:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002286a:	52                   	push   edx
c002286b:	50                   	push   eax
c002286c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002286f:	e8 e4 fe ff ff       	call   c0022758 <IOAPIC::write(int, int)>
c0022874:	83 c4 0c             	add    esp,0xc
c0022877:	90                   	nop
c0022878:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002287b:	c9                   	leave  
c002287c:	c3                   	ret    
c002287d:	90                   	nop

c002287e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002287e:	55                   	push   ebp
c002287f:	89 e5                	mov    ebp,esp
c0022881:	57                   	push   edi
c0022882:	56                   	push   esi
c0022883:	53                   	push   ebx
c0022884:	83 ec 2c             	sub    esp,0x2c
c0022887:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002288a:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002288d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0022891:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0022895:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0022899:	74 5a                	je     c00228f5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002289b:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002289f:	7f 44                	jg     c00228e5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00228a1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00228a4:	05 60 99 02 c0       	add    eax,0xc0029960
c00228a9:	8a 00                	mov    al,BYTE PTR [eax]
c00228ab:	0f b6 c0             	movzx  eax,al
c00228ae:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00228b1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00228b4:	66 8b 84 00 c0 af 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd5040]
c00228bc:	0f b7 c0             	movzx  eax,ax
c00228bf:	83 e0 02             	and    eax,0x2
c00228c2:	85 c0                	test   eax,eax
c00228c4:	74 04                	je     c00228ca <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00228c6:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00228ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00228cd:	66 8b 84 00 c0 af 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd5040]
c00228d5:	0f b7 c0             	movzx  eax,ax
c00228d8:	83 e0 08             	and    eax,0x8
c00228db:	85 c0                	test   eax,eax
c00228dd:	74 16                	je     c00228f5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00228df:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00228e3:	eb 10                	jmp    c00228f5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00228e5:	83 ec 0c             	sub    esp,0xc
c00228e8:	68 18 94 02 c0       	push   0xc0029418
c00228ed:	e8 15 62 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c00228f2:	83 c4 10             	add    esp,0x10
c00228f5:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00228f9:	a1 60 c9 02 c0       	mov    eax,ds:0xc002c960
c00228fe:	83 ec 08             	sub    esp,0x8
c0022901:	50                   	push   eax
c0022902:	68 50 94 02 c0       	push   0xc0029450
c0022907:	e8 6b f9 fe ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c002290c:	83 c4 10             	add    esp,0x10
c002290f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0022916:	a1 60 c9 02 c0       	mov    eax,ds:0xc002c960
c002291b:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c002291e:	7d 67                	jge    c0022987 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0022920:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022923:	8b 04 85 80 c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3680]
c002292a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002292d:	83 ec 08             	sub    esp,0x8
c0022930:	52                   	push   edx
c0022931:	50                   	push   eax
c0022932:	e8 d1 fc ff ff       	call   c0022608 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0022937:	83 c4 10             	add    esp,0x10
c002293a:	84 c0                	test   al,al
c002293c:	74 44                	je     c0022982 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c002293e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022941:	8b 1c 85 80 c9 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd3680]
c0022948:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002294c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002294f:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0022953:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022956:	83 c0 20             	add    eax,0x20
c0022959:	0f b6 f0             	movzx  esi,al
c002295c:	e8 1f 50 ff ff       	call   c0017980 <CPU::getNumber()>
c0022961:	99                   	cdq    
c0022962:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0022965:	0f b6 c9             	movzx  ecx,cl
c0022968:	83 ec 04             	sub    esp,0x4
c002296b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002296e:	57                   	push   edi
c002296f:	56                   	push   esi
c0022970:	52                   	push   edx
c0022971:	50                   	push   eax
c0022972:	51                   	push   ecx
c0022973:	53                   	push   ebx
c0022974:	e8 0b fe ff ff       	call   c0022784 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0022979:	83 c4 20             	add    esp,0x20
c002297c:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0022980:	eb 05                	jmp    c0022987 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0022982:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0022985:	eb 8f                	jmp    c0022916 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0022987:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c002298a:	83 f0 01             	xor    eax,0x1
c002298d:	84 c0                	test   al,al
c002298f:	74 10                	je     c00229a1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0022991:	83 ec 0c             	sub    esp,0xc
c0022994:	68 67 94 02 c0       	push   0xc0029467
c0022999:	e8 69 61 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c002299e:	83 c4 10             	add    esp,0x10
c00229a1:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00229a5:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00229ac:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00229b0:	7f 65                	jg     c0022a17 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00229b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00229b5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00229b8:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00229bf:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00229c2:	01 ca                	add    edx,ecx
c00229c4:	83 c2 54             	add    edx,0x54
c00229c7:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00229cb:	85 c0                	test   eax,eax
c00229cd:	75 43                	jne    c0022a12 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00229cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00229d2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00229d5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00229dc:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00229df:	01 ca                	add    edx,ecx
c00229e1:	8d 4a 54             	lea    ecx,[edx+0x54]
c00229e4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00229e7:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00229eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00229ee:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00229f1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00229f8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00229fb:	01 ca                	add    edx,ecx
c00229fd:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0022a03:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0022a06:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0022a0a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022a0d:	83 e8 20             	sub    eax,0x20
c0022a10:	eb 1a                	jmp    c0022a2c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0022a12:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0022a15:	eb 95                	jmp    c00229ac <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0022a17:	83 ec 0c             	sub    esp,0xc
c0022a1a:	68 74 94 02 c0       	push   0xc0029474
c0022a1f:	e8 e3 60 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c0022a24:	83 c4 10             	add    esp,0x10
c0022a27:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0022a2c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0022a2f:	5b                   	pop    ebx
c0022a30:	5e                   	pop    esi
c0022a31:	5f                   	pop    edi
c0022a32:	5d                   	pop    ebp
c0022a33:	c3                   	ret    

c0022a34 <PIC::disable()>:
c0022a34:	55                   	push   ebp
c0022a35:	89 e5                	mov    ebp,esp
c0022a37:	83 ec 10             	sub    esp,0x10
c0022a3a:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0022a40:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0022a44:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022a47:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0022a4b:	ee                   	out    dx,al
c0022a4c:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0022a52:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0022a56:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0022a59:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0022a5d:	ee                   	out    dx,al
c0022a5e:	90                   	nop
c0022a5f:	c9                   	leave  
c0022a60:	c3                   	ret    
c0022a61:	90                   	nop

c0022a62 <PIC::close(int, int, void*)>:
c0022a62:	55                   	push   ebp
c0022a63:	89 e5                	mov    ebp,esp
c0022a65:	83 ec 08             	sub    esp,0x8
c0022a68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022a6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a6d:	83 c0 3c             	add    eax,0x3c
c0022a70:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a72:	83 ec 0c             	sub    esp,0xc
c0022a75:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022a78:	ff d0                	call   eax
c0022a7a:	83 c4 10             	add    esp,0x10
c0022a7d:	b8 00 00 00 00       	mov    eax,0x0
c0022a82:	c9                   	leave  
c0022a83:	c3                   	ret    

c0022a84 <PIC::PIC()>:
c0022a84:	83 ec 0c             	sub    esp,0xc
c0022a87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a8b:	83 ec 08             	sub    esp,0x8
c0022a8e:	68 20 95 02 c0       	push   0xc0029520
c0022a93:	50                   	push   eax
c0022a94:	e8 31 15 ff ff       	call   c0013fca <InterruptController::InterruptController(char const*)>
c0022a99:	83 c4 10             	add    esp,0x10
c0022a9c:	ba 4c 95 02 c0       	mov    edx,0xc002954c
c0022aa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aa5:	89 10                	mov    DWORD PTR [eax],edx
c0022aa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aab:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022ab1:	0f b6 d0             	movzx  edx,al
c0022ab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ab8:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0022abf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ac3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022ac9:	0f b6 d0             	movzx  edx,al
c0022acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ad0:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0022ad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ad9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022adf:	8d 50 01             	lea    edx,[eax+0x1]
c0022ae2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022ae6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022aec:	0f b6 d0             	movzx  edx,al
c0022aef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022af3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022af7:	83 e1 3f             	and    ecx,0x3f
c0022afa:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b02:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022b08:	0f b6 d0             	movzx  edx,al
c0022b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b0f:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0022b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b1a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022b20:	0f b6 d0             	movzx  edx,al
c0022b23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b27:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0022b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b30:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022b36:	8d 50 01             	lea    edx,[eax+0x1]
c0022b39:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022b3d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022b43:	0f b6 d0             	movzx  edx,al
c0022b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b4a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022b4e:	83 e1 3f             	and    ecx,0x3f
c0022b51:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022b55:	90                   	nop
c0022b56:	83 c4 0c             	add    esp,0xc
c0022b59:	c3                   	ret    

c0022b5a <PIC::ioWait()>:
c0022b5a:	eb 00                	jmp    c0022b5c <PIC::ioWait()+0x2>
c0022b5c:	eb 00                	jmp    c0022b5e <PIC::ioWait()+0x4>
c0022b5e:	90                   	nop
c0022b5f:	c3                   	ret    

c0022b60 <PIC::getIRQReg(int)>:
c0022b60:	55                   	push   ebp
c0022b61:	89 e5                	mov    ebp,esp
c0022b63:	83 ec 10             	sub    esp,0x10
c0022b66:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022b69:	0f b6 c0             	movzx  eax,al
c0022b6c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022b72:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0022b75:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022b78:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022b7c:	ee                   	out    dx,al
c0022b7d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022b80:	0f b6 c0             	movzx  eax,al
c0022b83:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0022b89:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0022b8c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022b8f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022b93:	ee                   	out    dx,al
c0022b94:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0022b9a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0022b9e:	89 c2                	mov    edx,eax
c0022ba0:	ec                   	in     al,dx
c0022ba1:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0022ba4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022ba7:	0f b6 c0             	movzx  eax,al
c0022baa:	c1 e0 08             	shl    eax,0x8
c0022bad:	89 c1                	mov    ecx,eax
c0022baf:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0022bb5:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0022bb9:	89 c2                	mov    edx,eax
c0022bbb:	ec                   	in     al,dx
c0022bbc:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0022bbf:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0022bc2:	0f b6 c0             	movzx  eax,al
c0022bc5:	09 c8                	or     eax,ecx
c0022bc7:	c9                   	leave  
c0022bc8:	c3                   	ret    
c0022bc9:	90                   	nop

c0022bca <PIC::eoi(unsigned char)>:
c0022bca:	55                   	push   ebp
c0022bcb:	89 e5                	mov    ebp,esp
c0022bcd:	83 ec 14             	sub    esp,0x14
c0022bd0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022bd3:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0022bd6:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0022bda:	75 1e                	jne    c0022bfa <PIC::eoi(unsigned char)+0x30>
c0022bdc:	6a 0b                	push   0xb
c0022bde:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022be1:	e8 7a ff ff ff       	call   c0022b60 <PIC::getIRQReg(int)>
c0022be6:	83 c4 08             	add    esp,0x8
c0022be9:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0022bed:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0022bf1:	25 80 00 00 00       	and    eax,0x80
c0022bf6:	85 c0                	test   eax,eax
c0022bf8:	74 5f                	je     c0022c59 <PIC::eoi(unsigned char)+0x8f>
c0022bfa:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0022bfe:	75 2d                	jne    c0022c2d <PIC::eoi(unsigned char)+0x63>
c0022c00:	6a 0b                	push   0xb
c0022c02:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022c05:	e8 56 ff ff ff       	call   c0022b60 <PIC::getIRQReg(int)>
c0022c0a:	83 c4 08             	add    esp,0x8
c0022c0d:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0022c11:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022c14:	66 85 c0             	test   ax,ax
c0022c17:	78 14                	js     c0022c2d <PIC::eoi(unsigned char)+0x63>
c0022c19:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0022c1f:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0022c23:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022c26:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0022c2a:	ee                   	out    dx,al
c0022c2b:	eb 2d                	jmp    c0022c5a <PIC::eoi(unsigned char)+0x90>
c0022c2d:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0022c31:	76 12                	jbe    c0022c45 <PIC::eoi(unsigned char)+0x7b>
c0022c33:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0022c39:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0022c3d:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022c40:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022c44:	ee                   	out    dx,al
c0022c45:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022c4b:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0022c4f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022c52:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022c56:	ee                   	out    dx,al
c0022c57:	eb 01                	jmp    c0022c5a <PIC::eoi(unsigned char)+0x90>
c0022c59:	90                   	nop
c0022c5a:	c9                   	leave  
c0022c5b:	c3                   	ret    

c0022c5c <PIC::remap()>:
c0022c5c:	55                   	push   ebp
c0022c5d:	89 e5                	mov    ebp,esp
c0022c5f:	83 ec 48             	sub    esp,0x48
c0022c62:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0022c69:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0022c70:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0022c76:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0022c79:	89 c2                	mov    edx,eax
c0022c7b:	ec                   	in     al,dx
c0022c7c:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0022c7f:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0022c82:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0022c85:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0022c8b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0022c8e:	89 c2                	mov    edx,eax
c0022c90:	ec                   	in     al,dx
c0022c91:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0022c94:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0022c97:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0022c9a:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0022ca0:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0022ca4:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0022ca7:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0022caa:	ee                   	out    dx,al
c0022cab:	83 ec 0c             	sub    esp,0xc
c0022cae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022cb1:	e8 a4 fe ff ff       	call   c0022b5a <PIC::ioWait()>
c0022cb6:	83 c4 10             	add    esp,0x10
c0022cb9:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0022cbf:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0022cc3:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0022cc6:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0022cc9:	ee                   	out    dx,al
c0022cca:	83 ec 0c             	sub    esp,0xc
c0022ccd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022cd0:	e8 85 fe ff ff       	call   c0022b5a <PIC::ioWait()>
c0022cd5:	83 c4 10             	add    esp,0x10
c0022cd8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0022cdb:	0f b6 c0             	movzx  eax,al
c0022cde:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0022ce4:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0022ce7:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0022cea:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0022ced:	ee                   	out    dx,al
c0022cee:	83 ec 0c             	sub    esp,0xc
c0022cf1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022cf4:	e8 61 fe ff ff       	call   c0022b5a <PIC::ioWait()>
c0022cf9:	83 c4 10             	add    esp,0x10
c0022cfc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022cff:	0f b6 c0             	movzx  eax,al
c0022d02:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0022d08:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0022d0b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0022d0e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0022d11:	ee                   	out    dx,al
c0022d12:	83 ec 0c             	sub    esp,0xc
c0022d15:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022d18:	e8 3d fe ff ff       	call   c0022b5a <PIC::ioWait()>
c0022d1d:	83 c4 10             	add    esp,0x10
c0022d20:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0022d26:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0022d2a:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0022d2d:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0022d30:	ee                   	out    dx,al
c0022d31:	83 ec 0c             	sub    esp,0xc
c0022d34:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022d37:	e8 1e fe ff ff       	call   c0022b5a <PIC::ioWait()>
c0022d3c:	83 c4 10             	add    esp,0x10
c0022d3f:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0022d45:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0022d49:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0022d4c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022d4f:	ee                   	out    dx,al
c0022d50:	83 ec 0c             	sub    esp,0xc
c0022d53:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022d56:	e8 ff fd ff ff       	call   c0022b5a <PIC::ioWait()>
c0022d5b:	83 c4 10             	add    esp,0x10
c0022d5e:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0022d64:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0022d68:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0022d6b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0022d6e:	ee                   	out    dx,al
c0022d6f:	83 ec 0c             	sub    esp,0xc
c0022d72:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022d75:	e8 e0 fd ff ff       	call   c0022b5a <PIC::ioWait()>
c0022d7a:	83 c4 10             	add    esp,0x10
c0022d7d:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0022d83:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0022d87:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0022d8a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0022d8d:	ee                   	out    dx,al
c0022d8e:	83 ec 0c             	sub    esp,0xc
c0022d91:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022d94:	e8 c1 fd ff ff       	call   c0022b5a <PIC::ioWait()>
c0022d99:	83 c4 10             	add    esp,0x10
c0022d9c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0022da0:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0022da6:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0022da9:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0022dac:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0022daf:	ee                   	out    dx,al
c0022db0:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0022db4:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0022dba:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0022dbd:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0022dc0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0022dc3:	ee                   	out    dx,al
c0022dc4:	90                   	nop
c0022dc5:	c9                   	leave  
c0022dc6:	c3                   	ret    
c0022dc7:	90                   	nop

c0022dc8 <PIC::open(int, int, void*)>:
c0022dc8:	55                   	push   ebp
c0022dc9:	89 e5                	mov    ebp,esp
c0022dcb:	83 ec 18             	sub    esp,0x18
c0022dce:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0022dd4:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0022dd8:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022ddb:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022ddf:	ee                   	out    dx,al
c0022de0:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0022de6:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0022dea:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022ded:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022df1:	ee                   	out    dx,al
c0022df2:	83 ec 0c             	sub    esp,0xc
c0022df5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022df8:	e8 5f fe ff ff       	call   c0022c5c <PIC::remap()>
c0022dfd:	83 c4 10             	add    esp,0x10
c0022e00:	b8 00 00 00 00       	mov    eax,0x0
c0022e05:	c9                   	leave  
c0022e06:	c3                   	ret    
c0022e07:	90                   	nop

c0022e08 <APICTimer::close(int, int, void*)>:
c0022e08:	b8 00 00 00 00       	mov    eax,0x0
c0022e0d:	c3                   	ret    

c0022e0e <apicTimerHandler(regs*, void*)>:
c0022e0e:	83 ec 0c             	sub    esp,0xc
c0022e11:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022e15:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e17:	99                   	cdq    
c0022e18:	52                   	push   edx
c0022e19:	50                   	push   eax
c0022e1a:	6a 00                	push   0x0
c0022e1c:	68 00 ca 9a 3b       	push   0x3b9aca00
c0022e21:	e8 76 07 00 00       	call   c002359c <__udivdi3>
c0022e26:	83 c4 10             	add    esp,0x10
c0022e29:	83 ec 08             	sub    esp,0x8
c0022e2c:	52                   	push   edx
c0022e2d:	50                   	push   eax
c0022e2e:	e8 94 2f ff ff       	call   c0015dc7 <timerHandler(unsigned long long)>
c0022e33:	83 c4 10             	add    esp,0x10
c0022e36:	90                   	nop
c0022e37:	83 c4 0c             	add    esp,0xc
c0022e3a:	c3                   	ret    
c0022e3b:	90                   	nop

c0022e3c <APICTimer::write(int)>:
c0022e3c:	53                   	push   ebx
c0022e3d:	83 ec 28             	sub    esp,0x28
c0022e40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022e44:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022e48:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022e4e:	e8 31 4b ff ff       	call   c0017984 <CPU::current()>
c0022e53:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022e59:	83 ec 0c             	sub    esp,0xc
c0022e5c:	50                   	push   eax
c0022e5d:	e8 f0 f4 ff ff       	call   c0022352 <APIC::getBase()>
c0022e62:	83 c4 10             	add    esp,0x10
c0022e65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022e69:	a1 f0 ac 02 c0       	mov    eax,ds:0xc002acf0
c0022e6e:	8b 15 f4 ac 02 c0    	mov    edx,DWORD PTR ds:0xc002acf4
c0022e74:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022e78:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022e7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022e80:	05 e0 03 00 00       	add    eax,0x3e0
c0022e85:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022e8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022e8f:	05 80 03 00 00       	add    eax,0x380
c0022e94:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0022e9a:	fb                   	sti    
c0022e9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e9f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022ea3:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0022ea8:	83 d2 00             	adc    edx,0x0
c0022eab:	89 c1                	mov    ecx,eax
c0022ead:	89 d3                	mov    ebx,edx
c0022eaf:	a1 f0 ac 02 c0       	mov    eax,ds:0xc002acf0
c0022eb4:	8b 15 f4 ac 02 c0    	mov    edx,DWORD PTR ds:0xc002acf4
c0022eba:	39 c8                	cmp    eax,ecx
c0022ebc:	89 d0                	mov    eax,edx
c0022ebe:	19 d8                	sbb    eax,ebx
c0022ec0:	73 02                	jae    c0022ec4 <APICTimer::write(int)+0x88>
c0022ec2:	eb d7                	jmp    c0022e9b <APICTimer::write(int)+0x5f>
c0022ec4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022ec8:	05 20 03 00 00       	add    eax,0x320
c0022ecd:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0022ed3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022ed7:	05 90 03 00 00       	add    eax,0x390
c0022edc:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ede:	f7 d0                	not    eax
c0022ee0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022ee4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022ee8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022eec:	ba 00 00 00 00       	mov    edx,0x0
c0022ef1:	f7 f3                	div    ebx
c0022ef3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022ef7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022efb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022f01:	0d 00 00 02 00       	or     eax,0x20000
c0022f06:	89 c2                	mov    edx,eax
c0022f08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f0c:	05 20 03 00 00       	add    eax,0x320
c0022f11:	89 10                	mov    DWORD PTR [eax],edx
c0022f13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f17:	05 e0 03 00 00       	add    eax,0x3e0
c0022f1c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022f22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f26:	05 80 03 00 00       	add    eax,0x380
c0022f2b:	89 c2                	mov    edx,eax
c0022f2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022f31:	89 02                	mov    DWORD PTR [edx],eax
c0022f33:	90                   	nop
c0022f34:	83 c4 28             	add    esp,0x28
c0022f37:	5b                   	pop    ebx
c0022f38:	c3                   	ret    
c0022f39:	90                   	nop

c0022f3a <APICTimer::open(int, int, void*)>:
c0022f3a:	57                   	push   edi
c0022f3b:	56                   	push   esi
c0022f3c:	53                   	push   ebx
c0022f3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f41:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f43:	83 c0 24             	add    eax,0x24
c0022f46:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f48:	83 ec 08             	sub    esp,0x8
c0022f4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f53:	ff d0                	call   eax
c0022f55:	83 c4 10             	add    esp,0x10
c0022f58:	e8 27 4a ff ff       	call   c0017984 <CPU::current()>
c0022f5d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022f63:	83 ec 0c             	sub    esp,0xc
c0022f66:	50                   	push   eax
c0022f67:	e8 e6 f3 ff ff       	call   c0022352 <APIC::getBase()>
c0022f6c:	83 c4 10             	add    esp,0x10
c0022f6f:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0022f75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f79:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022f7f:	0f b6 f8             	movzx  edi,al
c0022f82:	89 d0                	mov    eax,edx
c0022f84:	ba 00 00 00 00       	mov    edx,0x0
c0022f89:	89 c1                	mov    ecx,eax
c0022f8b:	80 e5 ff             	and    ch,0xff
c0022f8e:	89 cb                	mov    ebx,ecx
c0022f90:	0f b6 f2             	movzx  esi,dl
c0022f93:	89 d8                	mov    eax,ebx
c0022f95:	89 f2                	mov    edx,esi
c0022f97:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022f9b:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022f9e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022fa2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022fa6:	83 e0 00             	and    eax,0x0
c0022fa9:	09 d0                	or     eax,edx
c0022fab:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022faf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fb3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022fb9:	8d 50 01             	lea    edx,[eax+0x1]
c0022fbc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022fc0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022fc6:	0f b6 d0             	movzx  edx,al
c0022fc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fcd:	83 c2 08             	add    edx,0x8
c0022fd0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022fd4:	0f b6 c9             	movzx  ecx,cl
c0022fd7:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022fdd:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022fe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fe5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022fe9:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022fef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ff3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022ff7:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0022ffd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023001:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023007:	83 ec 0c             	sub    esp,0xc
c002300a:	51                   	push   ecx
c002300b:	6a 01                	push   0x1
c002300d:	68 0e 2e 02 c0       	push   0xc0022e0e
c0023012:	52                   	push   edx
c0023013:	50                   	push   eax
c0023014:	e8 bd 05 ff ff       	call   c00135d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023019:	83 c4 20             	add    esp,0x20
c002301c:	89 c2                	mov    edx,eax
c002301e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023022:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0023028:	b8 00 00 00 00       	mov    eax,0x0
c002302d:	5b                   	pop    ebx
c002302e:	5e                   	pop    esi
c002302f:	5f                   	pop    edi
c0023030:	c3                   	ret    
c0023031:	90                   	nop

c0023032 <APICTimer::APICTimer()>:
c0023032:	83 ec 0c             	sub    esp,0xc
c0023035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023039:	83 ec 08             	sub    esp,0x8
c002303c:	68 8c 95 02 c0       	push   0xc002958c
c0023041:	50                   	push   eax
c0023042:	e8 f1 2c ff ff       	call   c0015d38 <Timer::Timer(char const*)>
c0023047:	83 c4 10             	add    esp,0x10
c002304a:	ba a0 95 02 c0       	mov    edx,0xc00295a0
c002304f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023053:	89 10                	mov    DWORD PTR [eax],edx
c0023055:	90                   	nop
c0023056:	83 c4 0c             	add    esp,0xc
c0023059:	c3                   	ret    

c002305a <PIT::write(int)>:
c002305a:	83 ec 10             	sub    esp,0x10
c002305d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023061:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0023065:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002306b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002306f:	a3 a4 c9 02 c0       	mov    ds:0xc002c9a4,eax
c0023074:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0023079:	99                   	cdq    
c002307a:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002307e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023082:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0023089:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002308e:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0023092:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0023097:	ee                   	out    dx,al
c0023098:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002309c:	0f b6 c0             	movzx  eax,al
c002309f:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00230a6:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00230aa:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00230ae:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00230b3:	ee                   	out    dx,al
c00230b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230b8:	c1 f8 08             	sar    eax,0x8
c00230bb:	0f b6 c0             	movzx  eax,al
c00230be:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00230c5:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00230c9:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00230cd:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00230d2:	ee                   	out    dx,al
c00230d3:	90                   	nop
c00230d4:	83 c4 10             	add    esp,0x10
c00230d7:	c3                   	ret    

c00230d8 <pitHandler(regs*, void*)>:
c00230d8:	83 ec 0c             	sub    esp,0xc
c00230db:	a1 a4 c9 02 c0       	mov    eax,ds:0xc002c9a4
c00230e0:	99                   	cdq    
c00230e1:	52                   	push   edx
c00230e2:	50                   	push   eax
c00230e3:	6a 00                	push   0x0
c00230e5:	68 00 ca 9a 3b       	push   0x3b9aca00
c00230ea:	e8 ad 04 00 00       	call   c002359c <__udivdi3>
c00230ef:	83 c4 10             	add    esp,0x10
c00230f2:	83 ec 08             	sub    esp,0x8
c00230f5:	52                   	push   edx
c00230f6:	50                   	push   eax
c00230f7:	e8 cb 2c ff ff       	call   c0015dc7 <timerHandler(unsigned long long)>
c00230fc:	83 c4 10             	add    esp,0x10
c00230ff:	90                   	nop
c0023100:	83 c4 0c             	add    esp,0xc
c0023103:	c3                   	ret    

c0023104 <PIT::open(int, int, void*)>:
c0023104:	83 ec 0c             	sub    esp,0xc
c0023107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002310b:	8b 00                	mov    eax,DWORD PTR [eax]
c002310d:	83 c0 24             	add    eax,0x24
c0023110:	8b 00                	mov    eax,DWORD PTR [eax]
c0023112:	83 ec 08             	sub    esp,0x8
c0023115:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023119:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002311d:	ff d0                	call   eax
c002311f:	83 c4 10             	add    esp,0x10
c0023122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023126:	83 ec 0c             	sub    esp,0xc
c0023129:	6a 00                	push   0x0
c002312b:	6a 01                	push   0x1
c002312d:	68 d8 30 02 c0       	push   0xc00230d8
c0023132:	6a 00                	push   0x0
c0023134:	50                   	push   eax
c0023135:	e8 9c 04 ff ff       	call   c00135d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002313a:	83 c4 20             	add    esp,0x20
c002313d:	89 c2                	mov    edx,eax
c002313f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023143:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0023149:	b8 00 00 00 00       	mov    eax,0x0
c002314e:	83 c4 0c             	add    esp,0xc
c0023151:	c3                   	ret    

c0023152 <PIT::close(int, int, void*)>:
c0023152:	83 ec 0c             	sub    esp,0xc
c0023155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023159:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0023163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023167:	6a 01                	push   0x1
c0023169:	68 d8 30 02 c0       	push   0xc00230d8
c002316e:	6a 00                	push   0x0
c0023170:	50                   	push   eax
c0023171:	e8 be 04 ff ff       	call   c0013634 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0023176:	83 c4 10             	add    esp,0x10
c0023179:	b8 00 00 00 00       	mov    eax,0x0
c002317e:	83 c4 0c             	add    esp,0xc
c0023181:	c3                   	ret    

c0023182 <PIT::PIT()>:
c0023182:	83 ec 0c             	sub    esp,0xc
c0023185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023189:	83 ec 08             	sub    esp,0x8
c002318c:	68 c8 95 02 c0       	push   0xc00295c8
c0023191:	50                   	push   eax
c0023192:	e8 a1 2b ff ff       	call   c0015d38 <Timer::Timer(char const*)>
c0023197:	83 c4 10             	add    esp,0x10
c002319a:	ba f0 95 02 c0       	mov    edx,0xc00295f0
c002319f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231a3:	89 10                	mov    DWORD PTR [eax],edx
c00231a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231a9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00231af:	0f b6 d0             	movzx  edx,al
c00231b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231b6:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00231bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231c1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00231c7:	0f b6 d0             	movzx  edx,al
c00231ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231ce:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00231d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231d7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00231dd:	8d 50 01             	lea    edx,[eax+0x1]
c00231e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00231e4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00231ea:	0f b6 d0             	movzx  edx,al
c00231ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231f1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00231f5:	83 e1 3f             	and    ecx,0x3f
c00231f8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00231fc:	90                   	nop
c00231fd:	83 c4 0c             	add    esp,0xc
c0023200:	c3                   	ret    
c0023201:	66 90                	xchg   ax,ax
c0023203:	66 90                	xchg   ax,ax
c0023205:	66 90                	xchg   ax,ax
c0023207:	66 90                	xchg   ax,ax
c0023209:	66 90                	xchg   ax,ax
c002320b:	66 90                	xchg   ax,ax
c002320d:	66 90                	xchg   ax,ax
c002320f:	90                   	nop

c0023210 <avxDetect>:
c0023210:	b8 00 00 00 00       	mov    eax,0x0
c0023215:	c3                   	ret    

c0023216 <avxSave>:
c0023216:	c3                   	ret    

c0023217 <avxLoad>:
c0023217:	c3                   	ret    

c0023218 <avxInit>:
c0023218:	c3                   	ret    

c0023219 <avxClose>:
c0023219:	c3                   	ret    
c002321a:	66 90                	xchg   ax,ax
c002321c:	66 90                	xchg   ax,ax
c002321e:	66 90                	xchg   ax,ax

c0023220 <sseDetect>:
c0023220:	b8 01 00 00 00       	mov    eax,0x1
c0023225:	0f a2                	cpuid  
c0023227:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002322d:	74 06                	je     c0023235 <sseDetect.noSSE>
c002322f:	b8 01 00 00 00       	mov    eax,0x1
c0023234:	c3                   	ret    

c0023235 <sseDetect.noSSE>:
c0023235:	b8 00 00 00 00       	mov    eax,0x0
c002323a:	c3                   	ret    

c002323b <sseSave>:
c002323b:	0f ae 44 24 08       	fxsave [esp+0x8]
c0023240:	c3                   	ret    

c0023241 <sseLoad>:
c0023241:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0023246:	c3                   	ret    

c0023247 <sseInit>:
c0023247:	e8 40 00 00 00       	call   c002328c <x87Init>
c002324c:	0f 20 e0             	mov    eax,cr4
c002324f:	66 0d 00 06          	or     ax,0x600
c0023253:	0f 22 e0             	mov    cr4,eax
c0023256:	c3                   	ret    

c0023257 <sseClose>:
c0023257:	c3                   	ret    
c0023258:	66 90                	xchg   ax,ax
c002325a:	66 90                	xchg   ax,ax
c002325c:	66 90                	xchg   ax,ax
c002325e:	66 90                	xchg   ax,ax

c0023260 <value_37F>:
c0023260:	7f 03                	jg     c0023265 <value_37A+0x1>

c0023262 <value_37E>:
c0023262:	7e 03                	jle    c0023267 <x87Detect+0x1>

c0023264 <value_37A>:
c0023264:	7a 03                	jp     c0023269 <x87Detect+0x3>

c0023266 <x87Detect>:
c0023266:	b8 01 00 00 00       	mov    eax,0x1
c002326b:	0f a2                	cpuid  
c002326d:	f7 c2 01 00 00 00    	test   edx,0x1
c0023273:	74 06                	je     c002327b <x87Detect.nox87>
c0023275:	b8 01 00 00 00       	mov    eax,0x1
c002327a:	c3                   	ret    

c002327b <x87Detect.nox87>:
c002327b:	b8 00 00 00 00       	mov    eax,0x0
c0023280:	c3                   	ret    

c0023281 <x87Save>:
c0023281:	9b dd 74 24 08       	fsave  [esp+0x8]
c0023286:	c3                   	ret    

c0023287 <x87Load>:
c0023287:	dd 64 24 08          	frstor [esp+0x8]
c002328b:	c3                   	ret    

c002328c <x87Init>:
c002328c:	9b db e3             	finit  
c002328f:	0f 20 c0             	mov    eax,cr0
c0023292:	66 25 fb ff          	and    ax,0xfffb
c0023296:	66 0d 22 00          	or     ax,0x22
c002329a:	0f 22 c0             	mov    cr0,eax
c002329d:	0f 06                	clts   
c002329f:	d9 2d 64 32 02 c0    	fldcw  WORD PTR ds:0xc0023264
c00232a5:	c3                   	ret    

c00232a6 <x87Close>:
c00232a6:	c3                   	ret    
c00232a7:	90                   	nop

c00232a8 <__do_global_ctors_aux>:
c00232a8:	a1 d8 5d 02 c0       	mov    eax,ds:0xc0025dd8
c00232ad:	83 f8 ff             	cmp    eax,0xffffffff
c00232b0:	74 1a                	je     c00232cc <__do_global_ctors_aux+0x24>
c00232b2:	55                   	push   ebp
c00232b3:	89 e5                	mov    ebp,esp
c00232b5:	53                   	push   ebx
c00232b6:	52                   	push   edx
c00232b7:	bb d8 5d 02 c0       	mov    ebx,0xc0025dd8
c00232bc:	ff d0                	call   eax
c00232be:	83 eb 04             	sub    ebx,0x4
c00232c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00232c3:	83 f8 ff             	cmp    eax,0xffffffff
c00232c6:	75 f4                	jne    c00232bc <__do_global_ctors_aux+0x14>
c00232c8:	58                   	pop    eax
c00232c9:	5b                   	pop    ebx
c00232ca:	5d                   	pop    ebp
c00232cb:	c3                   	ret    
c00232cc:	c3                   	ret    
c00232cd:	66 90                	xchg   ax,ax
c00232cf:	90                   	nop

c00232d0 <__divdi3>:
c00232d0:	55                   	push   ebp
c00232d1:	57                   	push   edi
c00232d2:	56                   	push   esi
c00232d3:	53                   	push   ebx
c00232d4:	83 ec 1c             	sub    esp,0x1c
c00232d7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00232db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00232df:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00232e2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00232e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00232ea:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00232ee:	85 db                	test   ebx,ebx
c00232f0:	0f 88 8e 00 00 00    	js     c0023384 <__divdi3+0xb4>
c00232f6:	89 dd                	mov    ebp,ebx
c00232f8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023300:	89 d3                	mov    ebx,edx
c0023302:	85 d2                	test   edx,edx
c0023304:	79 0d                	jns    c0023313 <__divdi3+0x43>
c0023306:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002330a:	f7 d8                	neg    eax
c002330c:	83 d2 00             	adc    edx,0x0
c002330f:	f7 da                	neg    edx
c0023311:	89 d3                	mov    ebx,edx
c0023313:	89 c7                	mov    edi,eax
c0023315:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0023318:	85 db                	test   ebx,ebx
c002331a:	75 48                	jne    c0023364 <__divdi3+0x94>
c002331c:	39 ef                	cmp    edi,ebp
c002331e:	76 24                	jbe    c0023344 <__divdi3+0x74>
c0023320:	89 ea                	mov    edx,ebp
c0023322:	f7 f7                	div    edi
c0023324:	89 c1                	mov    ecx,eax
c0023326:	31 f6                	xor    esi,esi
c0023328:	89 c8                	mov    eax,ecx
c002332a:	89 f2                	mov    edx,esi
c002332c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023330:	85 c9                	test   ecx,ecx
c0023332:	74 07                	je     c002333b <__divdi3+0x6b>
c0023334:	f7 d8                	neg    eax
c0023336:	83 d2 00             	adc    edx,0x0
c0023339:	f7 da                	neg    edx
c002333b:	83 c4 1c             	add    esp,0x1c
c002333e:	5b                   	pop    ebx
c002333f:	5e                   	pop    esi
c0023340:	5f                   	pop    edi
c0023341:	5d                   	pop    ebp
c0023342:	c3                   	ret    
c0023343:	90                   	nop
c0023344:	85 ff                	test   edi,edi
c0023346:	75 0b                	jne    c0023353 <__divdi3+0x83>
c0023348:	b8 01 00 00 00       	mov    eax,0x1
c002334d:	31 d2                	xor    edx,edx
c002334f:	f7 f3                	div    ebx
c0023351:	89 c7                	mov    edi,eax
c0023353:	31 d2                	xor    edx,edx
c0023355:	89 e8                	mov    eax,ebp
c0023357:	f7 f7                	div    edi
c0023359:	89 c6                	mov    esi,eax
c002335b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002335e:	f7 f7                	div    edi
c0023360:	89 c1                	mov    ecx,eax
c0023362:	eb c4                	jmp    c0023328 <__divdi3+0x58>
c0023364:	39 eb                	cmp    ebx,ebp
c0023366:	77 3c                	ja     c00233a4 <__divdi3+0xd4>
c0023368:	0f bd f3             	bsr    esi,ebx
c002336b:	83 f6 1f             	xor    esi,0x1f
c002336e:	75 40                	jne    c00233b0 <__divdi3+0xe0>
c0023370:	39 eb                	cmp    ebx,ebp
c0023372:	72 09                	jb     c002337d <__divdi3+0xad>
c0023374:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0023377:	0f 87 97 00 00 00    	ja     c0023414 <__divdi3+0x144>
c002337d:	b9 01 00 00 00       	mov    ecx,0x1
c0023382:	eb a4                	jmp    c0023328 <__divdi3+0x58>
c0023384:	f7 d9                	neg    ecx
c0023386:	83 d3 00             	adc    ebx,0x0
c0023389:	f7 db                	neg    ebx
c002338b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002338e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0023392:	89 dd                	mov    ebp,ebx
c0023394:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002339c:	e9 5f ff ff ff       	jmp    c0023300 <__divdi3+0x30>
c00233a1:	8d 76 00             	lea    esi,[esi+0x0]
c00233a4:	31 f6                	xor    esi,esi
c00233a6:	31 c9                	xor    ecx,ecx
c00233a8:	e9 7b ff ff ff       	jmp    c0023328 <__divdi3+0x58>
c00233ad:	8d 76 00             	lea    esi,[esi+0x0]
c00233b0:	b8 20 00 00 00       	mov    eax,0x20
c00233b5:	29 f0                	sub    eax,esi
c00233b7:	89 f1                	mov    ecx,esi
c00233b9:	d3 e3                	shl    ebx,cl
c00233bb:	89 fa                	mov    edx,edi
c00233bd:	88 c1                	mov    cl,al
c00233bf:	d3 ea                	shr    edx,cl
c00233c1:	09 da                	or     edx,ebx
c00233c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00233c7:	89 f1                	mov    ecx,esi
c00233c9:	d3 e7                	shl    edi,cl
c00233cb:	89 eb                	mov    ebx,ebp
c00233cd:	88 c1                	mov    cl,al
c00233cf:	d3 eb                	shr    ebx,cl
c00233d1:	89 f1                	mov    ecx,esi
c00233d3:	d3 e5                	shl    ebp,cl
c00233d5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00233d8:	88 c1                	mov    cl,al
c00233da:	d3 ea                	shr    edx,cl
c00233dc:	09 d5                	or     ebp,edx
c00233de:	89 e8                	mov    eax,ebp
c00233e0:	89 da                	mov    edx,ebx
c00233e2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00233e6:	89 d3                	mov    ebx,edx
c00233e8:	89 c5                	mov    ebp,eax
c00233ea:	f7 e7                	mul    edi
c00233ec:	39 d3                	cmp    ebx,edx
c00233ee:	72 18                	jb     c0023408 <__divdi3+0x138>
c00233f0:	74 0a                	je     c00233fc <__divdi3+0x12c>
c00233f2:	89 e9                	mov    ecx,ebp
c00233f4:	31 f6                	xor    esi,esi
c00233f6:	e9 2d ff ff ff       	jmp    c0023328 <__divdi3+0x58>
c00233fb:	90                   	nop
c00233fc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00233ff:	89 f1                	mov    ecx,esi
c0023401:	d3 e7                	shl    edi,cl
c0023403:	39 c7                	cmp    edi,eax
c0023405:	73 eb                	jae    c00233f2 <__divdi3+0x122>
c0023407:	90                   	nop
c0023408:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002340b:	31 f6                	xor    esi,esi
c002340d:	e9 16 ff ff ff       	jmp    c0023328 <__divdi3+0x58>
c0023412:	66 90                	xchg   ax,ax
c0023414:	31 c9                	xor    ecx,ecx
c0023416:	e9 0d ff ff ff       	jmp    c0023328 <__divdi3+0x58>
c002341b:	90                   	nop

c002341c <__moddi3>:
c002341c:	55                   	push   ebp
c002341d:	57                   	push   edi
c002341e:	56                   	push   esi
c002341f:	53                   	push   ebx
c0023420:	83 ec 2c             	sub    esp,0x2c
c0023423:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023427:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002342b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002342f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0023433:	85 db                	test   ebx,ebx
c0023435:	0f 88 85 00 00 00    	js     c00234c0 <__moddi3+0xa4>
c002343b:	89 de                	mov    esi,ebx
c002343d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0023445:	89 d7                	mov    edi,edx
c0023447:	85 d2                	test   edx,edx
c0023449:	79 09                	jns    c0023454 <__moddi3+0x38>
c002344b:	f7 d8                	neg    eax
c002344d:	83 d2 00             	adc    edx,0x0
c0023450:	f7 da                	neg    edx
c0023452:	89 d7                	mov    edi,edx
c0023454:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023458:	89 cd                	mov    ebp,ecx
c002345a:	85 ff                	test   edi,edi
c002345c:	75 52                	jne    c00234b0 <__moddi3+0x94>
c002345e:	89 c3                	mov    ebx,eax
c0023460:	39 f0                	cmp    eax,esi
c0023462:	76 24                	jbe    c0023488 <__moddi3+0x6c>
c0023464:	89 c8                	mov    eax,ecx
c0023466:	89 f2                	mov    edx,esi
c0023468:	f7 f3                	div    ebx
c002346a:	89 d6                	mov    esi,edx
c002346c:	89 f0                	mov    eax,esi
c002346e:	31 d2                	xor    edx,edx
c0023470:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023474:	85 c9                	test   ecx,ecx
c0023476:	74 07                	je     c002347f <__moddi3+0x63>
c0023478:	f7 d8                	neg    eax
c002347a:	83 d2 00             	adc    edx,0x0
c002347d:	f7 da                	neg    edx
c002347f:	83 c4 2c             	add    esp,0x2c
c0023482:	5b                   	pop    ebx
c0023483:	5e                   	pop    esi
c0023484:	5f                   	pop    edi
c0023485:	5d                   	pop    ebp
c0023486:	c3                   	ret    
c0023487:	90                   	nop
c0023488:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002348c:	85 db                	test   ebx,ebx
c002348e:	75 0d                	jne    c002349d <__moddi3+0x81>
c0023490:	b8 01 00 00 00       	mov    eax,0x1
c0023495:	31 d2                	xor    edx,edx
c0023497:	f7 f7                	div    edi
c0023499:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002349d:	89 f0                	mov    eax,esi
c002349f:	31 d2                	xor    edx,edx
c00234a1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00234a5:	f7 f7                	div    edi
c00234a7:	89 e8                	mov    eax,ebp
c00234a9:	f7 f7                	div    edi
c00234ab:	89 d6                	mov    esi,edx
c00234ad:	eb bd                	jmp    c002346c <__moddi3+0x50>
c00234af:	90                   	nop
c00234b0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00234b4:	39 f7                	cmp    edi,esi
c00234b6:	76 20                	jbe    c00234d8 <__moddi3+0xbc>
c00234b8:	89 c8                	mov    eax,ecx
c00234ba:	89 f2                	mov    edx,esi
c00234bc:	eb b2                	jmp    c0023470 <__moddi3+0x54>
c00234be:	66 90                	xchg   ax,ax
c00234c0:	f7 d9                	neg    ecx
c00234c2:	83 d3 00             	adc    ebx,0x0
c00234c5:	f7 db                	neg    ebx
c00234c7:	89 de                	mov    esi,ebx
c00234c9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00234d1:	e9 6f ff ff ff       	jmp    c0023445 <__moddi3+0x29>
c00234d6:	66 90                	xchg   ax,ax
c00234d8:	0f bd c7             	bsr    eax,edi
c00234db:	83 f0 1f             	xor    eax,0x1f
c00234de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00234e2:	75 24                	jne    c0023508 <__moddi3+0xec>
c00234e4:	39 f7                	cmp    edi,esi
c00234e6:	72 06                	jb     c00234ee <__moddi3+0xd2>
c00234e8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00234ec:	77 0c                	ja     c00234fa <__moddi3+0xde>
c00234ee:	89 e9                	mov    ecx,ebp
c00234f0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00234f4:	19 fe                	sbb    esi,edi
c00234f6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00234fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00234fe:	89 f2                	mov    edx,esi
c0023500:	e9 6b ff ff ff       	jmp    c0023470 <__moddi3+0x54>
c0023505:	8d 76 00             	lea    esi,[esi+0x0]
c0023508:	b8 20 00 00 00       	mov    eax,0x20
c002350d:	89 c2                	mov    edx,eax
c002350f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023513:	29 da                	sub    edx,ebx
c0023515:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023519:	88 d9                	mov    cl,bl
c002351b:	d3 e7                	shl    edi,cl
c002351d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023521:	88 d1                	mov    cl,dl
c0023523:	d3 e8                	shr    eax,cl
c0023525:	09 c7                	or     edi,eax
c0023527:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002352b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002352f:	89 d8                	mov    eax,ebx
c0023531:	88 d9                	mov    cl,bl
c0023533:	d3 e7                	shl    edi,cl
c0023535:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0023539:	89 f3                	mov    ebx,esi
c002353b:	88 d1                	mov    cl,dl
c002353d:	d3 eb                	shr    ebx,cl
c002353f:	89 c7                	mov    edi,eax
c0023541:	88 c1                	mov    cl,al
c0023543:	d3 e6                	shl    esi,cl
c0023545:	89 e8                	mov    eax,ebp
c0023547:	88 d1                	mov    cl,dl
c0023549:	d3 e8                	shr    eax,cl
c002354b:	09 f0                	or     eax,esi
c002354d:	89 f9                	mov    ecx,edi
c002354f:	d3 e5                	shl    ebp,cl
c0023551:	89 da                	mov    edx,ebx
c0023553:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0023557:	89 d3                	mov    ebx,edx
c0023559:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002355d:	89 c6                	mov    esi,eax
c002355f:	89 d1                	mov    ecx,edx
c0023561:	39 d3                	cmp    ebx,edx
c0023563:	72 27                	jb     c002358c <__moddi3+0x170>
c0023565:	74 21                	je     c0023588 <__moddi3+0x16c>
c0023567:	29 f5                	sub    ebp,esi
c0023569:	19 cb                	sbb    ebx,ecx
c002356b:	89 de                	mov    esi,ebx
c002356d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0023571:	d3 e6                	shl    esi,cl
c0023573:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0023577:	89 f9                	mov    ecx,edi
c0023579:	d3 ed                	shr    ebp,cl
c002357b:	09 ee                	or     esi,ebp
c002357d:	89 f0                	mov    eax,esi
c002357f:	d3 eb                	shr    ebx,cl
c0023581:	89 da                	mov    edx,ebx
c0023583:	e9 e8 fe ff ff       	jmp    c0023470 <__moddi3+0x54>
c0023588:	39 c5                	cmp    ebp,eax
c002358a:	73 db                	jae    c0023567 <__moddi3+0x14b>
c002358c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0023590:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0023594:	89 d1                	mov    ecx,edx
c0023596:	89 c6                	mov    esi,eax
c0023598:	eb cd                	jmp    c0023567 <__moddi3+0x14b>
c002359a:	66 90                	xchg   ax,ax

c002359c <__udivdi3>:
c002359c:	55                   	push   ebp
c002359d:	57                   	push   edi
c002359e:	56                   	push   esi
c002359f:	53                   	push   ebx
c00235a0:	83 ec 1c             	sub    esp,0x1c
c00235a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00235a7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00235ab:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00235af:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00235b3:	85 d2                	test   edx,edx
c00235b5:	75 41                	jne    c00235f8 <__udivdi3+0x5c>
c00235b7:	39 f7                	cmp    edi,esi
c00235b9:	76 15                	jbe    c00235d0 <__udivdi3+0x34>
c00235bb:	89 e8                	mov    eax,ebp
c00235bd:	89 f2                	mov    edx,esi
c00235bf:	f7 f7                	div    edi
c00235c1:	31 db                	xor    ebx,ebx
c00235c3:	89 da                	mov    edx,ebx
c00235c5:	83 c4 1c             	add    esp,0x1c
c00235c8:	5b                   	pop    ebx
c00235c9:	5e                   	pop    esi
c00235ca:	5f                   	pop    edi
c00235cb:	5d                   	pop    ebp
c00235cc:	c3                   	ret    
c00235cd:	8d 76 00             	lea    esi,[esi+0x0]
c00235d0:	89 f9                	mov    ecx,edi
c00235d2:	85 ff                	test   edi,edi
c00235d4:	75 0b                	jne    c00235e1 <__udivdi3+0x45>
c00235d6:	b8 01 00 00 00       	mov    eax,0x1
c00235db:	31 d2                	xor    edx,edx
c00235dd:	f7 f7                	div    edi
c00235df:	89 c1                	mov    ecx,eax
c00235e1:	31 d2                	xor    edx,edx
c00235e3:	89 f0                	mov    eax,esi
c00235e5:	f7 f1                	div    ecx
c00235e7:	89 c3                	mov    ebx,eax
c00235e9:	89 e8                	mov    eax,ebp
c00235eb:	f7 f1                	div    ecx
c00235ed:	89 da                	mov    edx,ebx
c00235ef:	83 c4 1c             	add    esp,0x1c
c00235f2:	5b                   	pop    ebx
c00235f3:	5e                   	pop    esi
c00235f4:	5f                   	pop    edi
c00235f5:	5d                   	pop    ebp
c00235f6:	c3                   	ret    
c00235f7:	90                   	nop
c00235f8:	39 f2                	cmp    edx,esi
c00235fa:	77 1c                	ja     c0023618 <__udivdi3+0x7c>
c00235fc:	0f bd da             	bsr    ebx,edx
c00235ff:	83 f3 1f             	xor    ebx,0x1f
c0023602:	75 24                	jne    c0023628 <__udivdi3+0x8c>
c0023604:	39 f2                	cmp    edx,esi
c0023606:	72 08                	jb     c0023610 <__udivdi3+0x74>
c0023608:	39 ef                	cmp    edi,ebp
c002360a:	0f 87 84 00 00 00    	ja     c0023694 <__udivdi3+0xf8>
c0023610:	b8 01 00 00 00       	mov    eax,0x1
c0023615:	eb ac                	jmp    c00235c3 <__udivdi3+0x27>
c0023617:	90                   	nop
c0023618:	31 db                	xor    ebx,ebx
c002361a:	31 c0                	xor    eax,eax
c002361c:	89 da                	mov    edx,ebx
c002361e:	83 c4 1c             	add    esp,0x1c
c0023621:	5b                   	pop    ebx
c0023622:	5e                   	pop    esi
c0023623:	5f                   	pop    edi
c0023624:	5d                   	pop    ebp
c0023625:	c3                   	ret    
c0023626:	66 90                	xchg   ax,ax
c0023628:	b8 20 00 00 00       	mov    eax,0x20
c002362d:	29 d8                	sub    eax,ebx
c002362f:	88 d9                	mov    cl,bl
c0023631:	d3 e2                	shl    edx,cl
c0023633:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0023637:	89 fa                	mov    edx,edi
c0023639:	88 c1                	mov    cl,al
c002363b:	d3 ea                	shr    edx,cl
c002363d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023641:	09 d1                	or     ecx,edx
c0023643:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023647:	88 d9                	mov    cl,bl
c0023649:	d3 e7                	shl    edi,cl
c002364b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002364f:	89 f7                	mov    edi,esi
c0023651:	88 c1                	mov    cl,al
c0023653:	d3 ef                	shr    edi,cl
c0023655:	88 d9                	mov    cl,bl
c0023657:	d3 e6                	shl    esi,cl
c0023659:	89 ea                	mov    edx,ebp
c002365b:	88 c1                	mov    cl,al
c002365d:	d3 ea                	shr    edx,cl
c002365f:	09 d6                	or     esi,edx
c0023661:	89 f0                	mov    eax,esi
c0023663:	89 fa                	mov    edx,edi
c0023665:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023669:	89 d7                	mov    edi,edx
c002366b:	89 c6                	mov    esi,eax
c002366d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023671:	39 d7                	cmp    edi,edx
c0023673:	72 13                	jb     c0023688 <__udivdi3+0xec>
c0023675:	74 09                	je     c0023680 <__udivdi3+0xe4>
c0023677:	89 f0                	mov    eax,esi
c0023679:	31 db                	xor    ebx,ebx
c002367b:	e9 43 ff ff ff       	jmp    c00235c3 <__udivdi3+0x27>
c0023680:	88 d9                	mov    cl,bl
c0023682:	d3 e5                	shl    ebp,cl
c0023684:	39 c5                	cmp    ebp,eax
c0023686:	73 ef                	jae    c0023677 <__udivdi3+0xdb>
c0023688:	8d 46 ff             	lea    eax,[esi-0x1]
c002368b:	31 db                	xor    ebx,ebx
c002368d:	e9 31 ff ff ff       	jmp    c00235c3 <__udivdi3+0x27>
c0023692:	66 90                	xchg   ax,ax
c0023694:	31 c0                	xor    eax,eax
c0023696:	e9 28 ff ff ff       	jmp    c00235c3 <__udivdi3+0x27>
c002369b:	90                   	nop

c002369c <__umoddi3>:
c002369c:	55                   	push   ebp
c002369d:	57                   	push   edi
c002369e:	56                   	push   esi
c002369f:	53                   	push   ebx
c00236a0:	83 ec 1c             	sub    esp,0x1c
c00236a3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00236a7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00236ab:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00236af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00236b3:	89 da                	mov    edx,ebx
c00236b5:	85 c0                	test   eax,eax
c00236b7:	75 37                	jne    c00236f0 <__umoddi3+0x54>
c00236b9:	39 df                	cmp    edi,ebx
c00236bb:	76 13                	jbe    c00236d0 <__umoddi3+0x34>
c00236bd:	89 f0                	mov    eax,esi
c00236bf:	f7 f7                	div    edi
c00236c1:	89 d0                	mov    eax,edx
c00236c3:	31 d2                	xor    edx,edx
c00236c5:	83 c4 1c             	add    esp,0x1c
c00236c8:	5b                   	pop    ebx
c00236c9:	5e                   	pop    esi
c00236ca:	5f                   	pop    edi
c00236cb:	5d                   	pop    ebp
c00236cc:	c3                   	ret    
c00236cd:	8d 76 00             	lea    esi,[esi+0x0]
c00236d0:	89 fd                	mov    ebp,edi
c00236d2:	85 ff                	test   edi,edi
c00236d4:	75 0b                	jne    c00236e1 <__umoddi3+0x45>
c00236d6:	b8 01 00 00 00       	mov    eax,0x1
c00236db:	31 d2                	xor    edx,edx
c00236dd:	f7 f7                	div    edi
c00236df:	89 c5                	mov    ebp,eax
c00236e1:	89 d8                	mov    eax,ebx
c00236e3:	31 d2                	xor    edx,edx
c00236e5:	f7 f5                	div    ebp
c00236e7:	89 f0                	mov    eax,esi
c00236e9:	f7 f5                	div    ebp
c00236eb:	89 d0                	mov    eax,edx
c00236ed:	eb d4                	jmp    c00236c3 <__umoddi3+0x27>
c00236ef:	90                   	nop
c00236f0:	89 f1                	mov    ecx,esi
c00236f2:	39 d8                	cmp    eax,ebx
c00236f4:	76 0a                	jbe    c0023700 <__umoddi3+0x64>
c00236f6:	89 f0                	mov    eax,esi
c00236f8:	83 c4 1c             	add    esp,0x1c
c00236fb:	5b                   	pop    ebx
c00236fc:	5e                   	pop    esi
c00236fd:	5f                   	pop    edi
c00236fe:	5d                   	pop    ebp
c00236ff:	c3                   	ret    
c0023700:	0f bd e8             	bsr    ebp,eax
c0023703:	83 f5 1f             	xor    ebp,0x1f
c0023706:	75 1c                	jne    c0023724 <__umoddi3+0x88>
c0023708:	39 d8                	cmp    eax,ebx
c002370a:	72 04                	jb     c0023710 <__umoddi3+0x74>
c002370c:	39 f7                	cmp    edi,esi
c002370e:	77 08                	ja     c0023718 <__umoddi3+0x7c>
c0023710:	89 da                	mov    edx,ebx
c0023712:	29 fe                	sub    esi,edi
c0023714:	19 c2                	sbb    edx,eax
c0023716:	89 f1                	mov    ecx,esi
c0023718:	89 c8                	mov    eax,ecx
c002371a:	83 c4 1c             	add    esp,0x1c
c002371d:	5b                   	pop    ebx
c002371e:	5e                   	pop    esi
c002371f:	5f                   	pop    edi
c0023720:	5d                   	pop    ebp
c0023721:	c3                   	ret    
c0023722:	66 90                	xchg   ax,ax
c0023724:	ba 20 00 00 00       	mov    edx,0x20
c0023729:	29 ea                	sub    edx,ebp
c002372b:	89 e9                	mov    ecx,ebp
c002372d:	d3 e0                	shl    eax,cl
c002372f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023733:	89 f8                	mov    eax,edi
c0023735:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0023739:	88 d1                	mov    cl,dl
c002373b:	d3 e8                	shr    eax,cl
c002373d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023741:	09 c1                	or     ecx,eax
c0023743:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023747:	89 e9                	mov    ecx,ebp
c0023749:	d3 e7                	shl    edi,cl
c002374b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002374f:	89 d8                	mov    eax,ebx
c0023751:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023755:	88 d1                	mov    cl,dl
c0023757:	d3 e8                	shr    eax,cl
c0023759:	89 c7                	mov    edi,eax
c002375b:	89 e9                	mov    ecx,ebp
c002375d:	d3 e3                	shl    ebx,cl
c002375f:	89 f0                	mov    eax,esi
c0023761:	88 d1                	mov    cl,dl
c0023763:	d3 e8                	shr    eax,cl
c0023765:	09 d8                	or     eax,ebx
c0023767:	89 e9                	mov    ecx,ebp
c0023769:	d3 e6                	shl    esi,cl
c002376b:	89 f3                	mov    ebx,esi
c002376d:	89 fa                	mov    edx,edi
c002376f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023773:	89 d1                	mov    ecx,edx
c0023775:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023779:	89 c6                	mov    esi,eax
c002377b:	89 d7                	mov    edi,edx
c002377d:	39 d1                	cmp    ecx,edx
c002377f:	72 27                	jb     c00237a8 <__umoddi3+0x10c>
c0023781:	74 21                	je     c00237a4 <__umoddi3+0x108>
c0023783:	89 ca                	mov    edx,ecx
c0023785:	29 f3                	sub    ebx,esi
c0023787:	19 fa                	sbb    edx,edi
c0023789:	89 d0                	mov    eax,edx
c002378b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002378f:	d3 e0                	shl    eax,cl
c0023791:	89 e9                	mov    ecx,ebp
c0023793:	d3 eb                	shr    ebx,cl
c0023795:	09 d8                	or     eax,ebx
c0023797:	d3 ea                	shr    edx,cl
c0023799:	83 c4 1c             	add    esp,0x1c
c002379c:	5b                   	pop    ebx
c002379d:	5e                   	pop    esi
c002379e:	5f                   	pop    edi
c002379f:	5d                   	pop    ebp
c00237a0:	c3                   	ret    
c00237a1:	8d 76 00             	lea    esi,[esi+0x0]
c00237a4:	39 c3                	cmp    ebx,eax
c00237a6:	73 db                	jae    c0023783 <__umoddi3+0xe7>
c00237a8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00237ac:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00237b0:	89 d7                	mov    edi,edx
c00237b2:	89 c6                	mov    esi,eax
c00237b4:	eb cd                	jmp    c0023783 <__umoddi3+0xe7>

c00237b6 <__addsf3>:
c00237b6:	55                   	push   ebp
c00237b7:	89 e5                	mov    ebp,esp
c00237b9:	57                   	push   edi
c00237ba:	56                   	push   esi
c00237bb:	53                   	push   ebx
c00237bc:	83 ec 08             	sub    esp,0x8
c00237bf:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00237c2:	89 fa                	mov    edx,edi
c00237c4:	89 f8                	mov    eax,edi
c00237c6:	c1 f8 17             	sar    eax,0x17
c00237c9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00237cc:	c1 e2 08             	shl    edx,0x8
c00237cf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00237d5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00237d8:	89 de                	mov    esi,ebx
c00237da:	c1 fe 17             	sar    esi,0x17
c00237dd:	c1 e3 08             	shl    ebx,0x8
c00237e0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00237e6:	31 f0                	xor    eax,esi
c00237e8:	0f 88 3b 01 00 00    	js     c0023929 <__addsf3+0x173>
c00237ee:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00237f1:	29 f1                	sub    ecx,esi
c00237f3:	85 c9                	test   ecx,ecx
c00237f5:	7e 54                	jle    c002384b <__addsf3+0x95>
c00237f7:	89 f0                	mov    eax,esi
c00237f9:	84 c0                	test   al,al
c00237fb:	75 10                	jne    c002380d <__addsf3+0x57>
c00237fd:	85 db                	test   ebx,ebx
c00237ff:	0f 84 aa 02 00 00    	je     c0023aaf <__addsf3+0x2f9>
c0023805:	49                   	dec    ecx
c0023806:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0023809:	74 38                	je     c0023843 <__addsf3+0x8d>
c002380b:	eb 13                	jmp    c0023820 <__addsf3+0x6a>
c002380d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023810:	f7 d0                	not    eax
c0023812:	84 c0                	test   al,al
c0023814:	0f 84 95 02 00 00    	je     c0023aaf <__addsf3+0x2f9>
c002381a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023820:	83 f9 1f             	cmp    ecx,0x1f
c0023823:	0f 8f 86 02 00 00    	jg     c0023aaf <__addsf3+0x2f9>
c0023829:	89 de                	mov    esi,ebx
c002382b:	d3 ee                	shr    esi,cl
c002382d:	b8 20 00 00 00       	mov    eax,0x20
c0023832:	29 c8                	sub    eax,ecx
c0023834:	89 c1                	mov    ecx,eax
c0023836:	d3 e3                	shl    ebx,cl
c0023838:	31 c0                	xor    eax,eax
c002383a:	85 db                	test   ebx,ebx
c002383c:	0f 95 c0             	setne  al
c002383f:	09 f0                	or     eax,esi
c0023841:	01 d0                	add    eax,edx
c0023843:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023846:	e9 b6 00 00 00       	jmp    c0023901 <__addsf3+0x14b>
c002384b:	74 5c                	je     c00238a9 <__addsf3+0xf3>
c002384d:	89 f1                	mov    ecx,esi
c002384f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0023852:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023855:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0023859:	75 14                	jne    c002386f <__addsf3+0xb9>
c002385b:	85 d2                	test   edx,edx
c002385d:	0f 84 4c 02 00 00    	je     c0023aaf <__addsf3+0x2f9>
c0023863:	49                   	dec    ecx
c0023864:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0023867:	0f 84 94 00 00 00    	je     c0023901 <__addsf3+0x14b>
c002386d:	eb 12                	jmp    c0023881 <__addsf3+0xcb>
c002386f:	89 f0                	mov    eax,esi
c0023871:	f7 d0                	not    eax
c0023873:	84 c0                	test   al,al
c0023875:	0f 84 34 02 00 00    	je     c0023aaf <__addsf3+0x2f9>
c002387b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023881:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023884:	83 f9 1f             	cmp    ecx,0x1f
c0023887:	0f 8f 22 02 00 00    	jg     c0023aaf <__addsf3+0x2f9>
c002388d:	89 d7                	mov    edi,edx
c002388f:	d3 ef                	shr    edi,cl
c0023891:	b8 20 00 00 00       	mov    eax,0x20
c0023896:	29 c8                	sub    eax,ecx
c0023898:	89 c1                	mov    ecx,eax
c002389a:	d3 e2                	shl    edx,cl
c002389c:	31 c0                	xor    eax,eax
c002389e:	85 d2                	test   edx,edx
c00238a0:	0f 95 c0             	setne  al
c00238a3:	09 f8                	or     eax,edi
c00238a5:	01 d8                	add    eax,ebx
c00238a7:	eb 58                	jmp    c0023901 <__addsf3+0x14b>
c00238a9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00238ac:	8d 70 01             	lea    esi,[eax+0x1]
c00238af:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00238b5:	75 32                	jne    c00238e9 <__addsf3+0x133>
c00238b7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00238bb:	75 1f                	jne    c00238dc <__addsf3+0x126>
c00238bd:	85 d2                	test   edx,edx
c00238bf:	0f 84 e0 01 00 00    	je     c0023aa5 <__addsf3+0x2ef>
c00238c5:	85 db                	test   ebx,ebx
c00238c7:	0f 84 e2 01 00 00    	je     c0023aaf <__addsf3+0x2f9>
c00238cd:	89 d0                	mov    eax,edx
c00238cf:	01 d8                	add    eax,ebx
c00238d1:	0f 89 a9 01 00 00    	jns    c0023a80 <__addsf3+0x2ca>
c00238d7:	e9 9d 01 00 00       	jmp    c0023a79 <__addsf3+0x2c3>
c00238dc:	85 d2                	test   edx,edx
c00238de:	0f 85 cb 01 00 00    	jne    c0023aaf <__addsf3+0x2f9>
c00238e4:	e9 bc 01 00 00       	jmp    c0023aa5 <__addsf3+0x2ef>
c00238e9:	31 c0                	xor    eax,eax
c00238eb:	89 f1                	mov    ecx,esi
c00238ed:	f7 d1                	not    ecx
c00238ef:	84 c9                	test   cl,cl
c00238f1:	0f 84 90 01 00 00    	je     c0023a87 <__addsf3+0x2d1>
c00238f7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00238fa:	d1 e8                	shr    eax,1
c00238fc:	e9 86 01 00 00       	jmp    c0023a87 <__addsf3+0x2d1>
c0023901:	85 c0                	test   eax,eax
c0023903:	0f 89 7e 01 00 00    	jns    c0023a87 <__addsf3+0x2d1>
c0023909:	46                   	inc    esi
c002390a:	89 f2                	mov    edx,esi
c002390c:	f7 d2                	not    edx
c002390e:	84 d2                	test   dl,dl
c0023910:	0f 84 6f 01 00 00    	je     c0023a85 <__addsf3+0x2cf>
c0023916:	89 c2                	mov    edx,eax
c0023918:	83 e2 01             	and    edx,0x1
c002391b:	d1 e8                	shr    eax,1
c002391d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0023922:	09 d0                	or     eax,edx
c0023924:	e9 5e 01 00 00       	jmp    c0023a87 <__addsf3+0x2d1>
c0023929:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c002392d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0023930:	89 f0                	mov    eax,esi
c0023932:	0f b6 c0             	movzx  eax,al
c0023935:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0023938:	29 c1                	sub    ecx,eax
c002393a:	85 c9                	test   ecx,ecx
c002393c:	7e 55                	jle    c0023993 <__addsf3+0x1dd>
c002393e:	85 c0                	test   eax,eax
c0023940:	75 11                	jne    c0023953 <__addsf3+0x19d>
c0023942:	85 db                	test   ebx,ebx
c0023944:	0f 84 65 01 00 00    	je     c0023aaf <__addsf3+0x2f9>
c002394a:	49                   	dec    ecx
c002394b:	75 19                	jne    c0023966 <__addsf3+0x1b0>
c002394d:	89 d0                	mov    eax,edx
c002394f:	29 d8                	sub    eax,ebx
c0023951:	eb 38                	jmp    c002398b <__addsf3+0x1d5>
c0023953:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023956:	f7 d0                	not    eax
c0023958:	84 c0                	test   al,al
c002395a:	0f 84 4f 01 00 00    	je     c0023aaf <__addsf3+0x2f9>
c0023960:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023966:	83 f9 1f             	cmp    ecx,0x1f
c0023969:	0f 8f 40 01 00 00    	jg     c0023aaf <__addsf3+0x2f9>
c002396f:	89 de                	mov    esi,ebx
c0023971:	d3 ee                	shr    esi,cl
c0023973:	b8 20 00 00 00       	mov    eax,0x20
c0023978:	29 c8                	sub    eax,ecx
c002397a:	89 c1                	mov    ecx,eax
c002397c:	d3 e3                	shl    ebx,cl
c002397e:	31 c0                	xor    eax,eax
c0023980:	85 db                	test   ebx,ebx
c0023982:	0f 95 c0             	setne  al
c0023985:	09 f0                	or     eax,esi
c0023987:	29 c2                	sub    edx,eax
c0023989:	89 d0                	mov    eax,edx
c002398b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002398e:	e9 af 00 00 00       	jmp    c0023a42 <__addsf3+0x28c>
c0023993:	74 5c                	je     c00239f1 <__addsf3+0x23b>
c0023995:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0023998:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002399b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002399f:	75 14                	jne    c00239b5 <__addsf3+0x1ff>
c00239a1:	85 d2                	test   edx,edx
c00239a3:	0f 84 06 01 00 00    	je     c0023aaf <__addsf3+0x2f9>
c00239a9:	48                   	dec    eax
c00239aa:	75 1b                	jne    c00239c7 <__addsf3+0x211>
c00239ac:	89 d8                	mov    eax,ebx
c00239ae:	29 d0                	sub    eax,edx
c00239b0:	e9 8d 00 00 00       	jmp    c0023a42 <__addsf3+0x28c>
c00239b5:	89 f1                	mov    ecx,esi
c00239b7:	f7 d1                	not    ecx
c00239b9:	84 c9                	test   cl,cl
c00239bb:	0f 84 ee 00 00 00    	je     c0023aaf <__addsf3+0x2f9>
c00239c1:	81 ca 00 00 00 80    	or     edx,0x80000000
c00239c7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00239ca:	83 f8 1f             	cmp    eax,0x1f
c00239cd:	0f 8f dc 00 00 00    	jg     c0023aaf <__addsf3+0x2f9>
c00239d3:	89 d7                	mov    edi,edx
c00239d5:	88 c1                	mov    cl,al
c00239d7:	d3 ef                	shr    edi,cl
c00239d9:	b9 20 00 00 00       	mov    ecx,0x20
c00239de:	29 c1                	sub    ecx,eax
c00239e0:	d3 e2                	shl    edx,cl
c00239e2:	31 c0                	xor    eax,eax
c00239e4:	85 d2                	test   edx,edx
c00239e6:	0f 95 c0             	setne  al
c00239e9:	09 f8                	or     eax,edi
c00239eb:	29 c3                	sub    ebx,eax
c00239ed:	89 d8                	mov    eax,ebx
c00239ef:	eb 51                	jmp    c0023a42 <__addsf3+0x28c>
c00239f1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00239f4:	40                   	inc    eax
c00239f5:	a8 fe                	test   al,0xfe
c00239f7:	75 3d                	jne    c0023a36 <__addsf3+0x280>
c00239f9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00239fd:	0f 85 a7 00 00 00    	jne    c0023aaa <__addsf3+0x2f4>
c0023a03:	85 d2                	test   edx,edx
c0023a05:	75 12                	jne    c0023a19 <__addsf3+0x263>
c0023a07:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023a0a:	85 db                	test   ebx,ebx
c0023a0c:	0f 85 9d 00 00 00    	jne    c0023aaf <__addsf3+0x2f9>
c0023a12:	31 ff                	xor    edi,edi
c0023a14:	e9 96 00 00 00       	jmp    c0023aaf <__addsf3+0x2f9>
c0023a19:	85 db                	test   ebx,ebx
c0023a1b:	0f 84 8e 00 00 00    	je     c0023aaf <__addsf3+0x2f9>
c0023a21:	89 d0                	mov    eax,edx
c0023a23:	29 d8                	sub    eax,ebx
c0023a25:	79 06                	jns    c0023a2d <__addsf3+0x277>
c0023a27:	89 d8                	mov    eax,ebx
c0023a29:	29 d0                	sub    eax,edx
c0023a2b:	eb 5a                	jmp    c0023a87 <__addsf3+0x2d1>
c0023a2d:	bf 00 00 00 00       	mov    edi,0x0
c0023a32:	74 7b                	je     c0023aaf <__addsf3+0x2f9>
c0023a34:	eb 4a                	jmp    c0023a80 <__addsf3+0x2ca>
c0023a36:	89 d0                	mov    eax,edx
c0023a38:	29 d8                	sub    eax,ebx
c0023a3a:	79 12                	jns    c0023a4e <__addsf3+0x298>
c0023a3c:	89 d8                	mov    eax,ebx
c0023a3e:	29 d0                	sub    eax,edx
c0023a40:	eb 09                	jmp    c0023a4b <__addsf3+0x295>
c0023a42:	85 c0                	test   eax,eax
c0023a44:	79 41                	jns    c0023a87 <__addsf3+0x2d1>
c0023a46:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023a4b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0023a4e:	31 f6                	xor    esi,esi
c0023a50:	85 c0                	test   eax,eax
c0023a52:	74 33                	je     c0023a87 <__addsf3+0x2d1>
c0023a54:	0f bd c8             	bsr    ecx,eax
c0023a57:	83 f1 1f             	xor    ecx,0x1f
c0023a5a:	d3 e0                	shl    eax,cl
c0023a5c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0023a60:	39 ca                	cmp    edx,ecx
c0023a62:	7f 10                	jg     c0023a74 <__addsf3+0x2be>
c0023a64:	29 d1                	sub    ecx,edx
c0023a66:	41                   	inc    ecx
c0023a67:	d3 e8                	shr    eax,cl
c0023a69:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023a6c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0023a72:	eb 13                	jmp    c0023a87 <__addsf3+0x2d1>
c0023a74:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023a77:	29 ce                	sub    esi,ecx
c0023a79:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023a7e:	eb 07                	jmp    c0023a87 <__addsf3+0x2d1>
c0023a80:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023a83:	eb 02                	jmp    c0023a87 <__addsf3+0x2d1>
c0023a85:	31 c0                	xor    eax,eax
c0023a87:	89 c2                	mov    edx,eax
c0023a89:	c1 ea 08             	shr    edx,0x8
c0023a8c:	a8 7f                	test   al,0x7f
c0023a8e:	0f 95 c1             	setne  cl
c0023a91:	09 d1                	or     ecx,edx
c0023a93:	83 e1 01             	and    ecx,0x1
c0023a96:	c1 e8 07             	shr    eax,0x7
c0023a99:	21 c8                	and    eax,ecx
c0023a9b:	c1 e6 17             	shl    esi,0x17
c0023a9e:	09 d6                	or     esi,edx
c0023aa0:	8d 3c 30             	lea    edi,[eax+esi*1]
c0023aa3:	eb 0a                	jmp    c0023aaf <__addsf3+0x2f9>
c0023aa5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023aa8:	eb 05                	jmp    c0023aaf <__addsf3+0x2f9>
c0023aaa:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0023aaf:	89 f8                	mov    eax,edi
c0023ab1:	5a                   	pop    edx
c0023ab2:	59                   	pop    ecx
c0023ab3:	5b                   	pop    ebx
c0023ab4:	5e                   	pop    esi
c0023ab5:	5f                   	pop    edi
c0023ab6:	5d                   	pop    ebp
c0023ab7:	c3                   	ret    

c0023ab8 <__subsf3>:
c0023ab8:	55                   	push   ebp
c0023ab9:	89 e5                	mov    ebp,esp
c0023abb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023abe:	05 00 00 00 80       	add    eax,0x80000000
c0023ac3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0023ac6:	5d                   	pop    ebp
c0023ac7:	e9 ea fc ff ff       	jmp    c00237b6 <__addsf3>

c0023acc <__negsf2>:
c0023acc:	55                   	push   ebp
c0023acd:	89 e5                	mov    ebp,esp
c0023acf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023ad2:	05 00 00 00 80       	add    eax,0x80000000
c0023ad7:	5d                   	pop    ebp
c0023ad8:	c3                   	ret    

c0023ad9 <__mulsf3>:
c0023ad9:	55                   	push   ebp
c0023ada:	89 e5                	mov    ebp,esp
c0023adc:	57                   	push   edi
c0023add:	56                   	push   esi
c0023ade:	53                   	push   ebx
c0023adf:	83 ec 1c             	sub    esp,0x1c
c0023ae2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0023ae5:	89 f0                	mov    eax,esi
c0023ae7:	89 f1                	mov    ecx,esi
c0023ae9:	c1 f9 17             	sar    ecx,0x17
c0023aec:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0023aef:	c1 e0 08             	shl    eax,0x8
c0023af2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023af7:	89 c1                	mov    ecx,eax
c0023af9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023afc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023aff:	89 c7                	mov    edi,eax
c0023b01:	c1 ff 17             	sar    edi,0x17
c0023b04:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0023b08:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0023b0b:	89 f8                	mov    eax,edi
c0023b0d:	0f b6 c0             	movzx  eax,al
c0023b10:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0023b13:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0023b17:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0023b1a:	42                   	inc    edx
c0023b1b:	80 e2 fe             	and    dl,0xfe
c0023b1e:	75 7b                	jne    c0023b9b <__mulsf3+0xc2>
c0023b20:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0023b24:	74 54                	je     c0023b7a <__mulsf3+0xa1>
c0023b26:	85 c9                	test   ecx,ecx
c0023b28:	0f 85 64 01 00 00    	jne    c0023c92 <__mulsf3+0x1b9>
c0023b2e:	8d 57 01             	lea    edx,[edi+0x1]
c0023b31:	80 e2 fe             	and    dl,0xfe
c0023b34:	75 1f                	jne    c0023b55 <__mulsf3+0x7c>
c0023b36:	85 c0                	test   eax,eax
c0023b38:	b8 00 00 00 00       	mov    eax,0x0
c0023b3d:	74 29                	je     c0023b68 <__mulsf3+0x8f>
c0023b3f:	53                   	push   ebx
c0023b40:	53                   	push   ebx
c0023b41:	50                   	push   eax
c0023b42:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023b45:	e8 96 05 00 00       	call   c00240e0 <__nesf2>
c0023b4a:	83 c4 10             	add    esp,0x10
c0023b4d:	85 c0                	test   eax,eax
c0023b4f:	0f 85 3a 01 00 00    	jne    c0023c8f <__mulsf3+0x1b6>
c0023b55:	85 ff                	test   edi,edi
c0023b57:	0f 89 35 01 00 00    	jns    c0023c92 <__mulsf3+0x1b9>
c0023b5d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0023b63:	e9 2a 01 00 00       	jmp    c0023c92 <__mulsf3+0x1b9>
c0023b68:	51                   	push   ecx
c0023b69:	51                   	push   ecx
c0023b6a:	50                   	push   eax
c0023b6b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023b6e:	e8 6d 05 00 00       	call   c00240e0 <__nesf2>
c0023b73:	83 c4 10             	add    esp,0x10
c0023b76:	85 c0                	test   eax,eax
c0023b78:	eb 15                	jmp    c0023b8f <__mulsf3+0xb6>
c0023b7a:	85 c9                	test   ecx,ecx
c0023b7c:	74 0b                	je     c0023b89 <__mulsf3+0xb0>
c0023b7e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0023b81:	01 c9                	add    ecx,ecx
c0023b83:	78 16                	js     c0023b9b <__mulsf3+0xc2>
c0023b85:	89 d3                	mov    ebx,edx
c0023b87:	eb f5                	jmp    c0023b7e <__mulsf3+0xa5>
c0023b89:	89 f8                	mov    eax,edi
c0023b8b:	f7 d0                	not    eax
c0023b8d:	84 c0                	test   al,al
c0023b8f:	75 c4                	jne    c0023b55 <__mulsf3+0x7c>
c0023b91:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0023b96:	e9 f7 00 00 00       	jmp    c0023c92 <__mulsf3+0x1b9>
c0023b9b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0023b9e:	c1 e6 08             	shl    esi,0x8
c0023ba1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0023ba7:	8d 57 01             	lea    edx,[edi+0x1]
c0023baa:	80 e2 fe             	and    dl,0xfe
c0023bad:	75 63                	jne    c0023c12 <__mulsf3+0x139>
c0023baf:	85 c0                	test   eax,eax
c0023bb1:	74 2f                	je     c0023be2 <__mulsf3+0x109>
c0023bb3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0023bb7:	0f 89 d2 00 00 00    	jns    c0023c8f <__mulsf3+0x1b6>
c0023bbd:	52                   	push   edx
c0023bbe:	52                   	push   edx
c0023bbf:	6a 00                	push   0x0
c0023bc1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023bc4:	e8 dc 04 00 00       	call   c00240a5 <__eqsf2>
c0023bc9:	83 c4 10             	add    esp,0x10
c0023bcc:	85 c0                	test   eax,eax
c0023bce:	0f 85 bb 00 00 00    	jne    c0023c8f <__mulsf3+0x1b6>
c0023bd4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023bd7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0023bdd:	e9 b0 00 00 00       	jmp    c0023c92 <__mulsf3+0x1b9>
c0023be2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0023be5:	50                   	push   eax
c0023be6:	50                   	push   eax
c0023be7:	6a 00                	push   0x0
c0023be9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023bec:	e8 b4 04 00 00       	call   c00240a5 <__eqsf2>
c0023bf1:	83 c4 10             	add    esp,0x10
c0023bf4:	85 c0                	test   eax,eax
c0023bf6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0023bf9:	75 0c                	jne    c0023c07 <__mulsf3+0x12e>
c0023bfb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0023bff:	0f 89 8a 00 00 00    	jns    c0023c8f <__mulsf3+0x1b6>
c0023c05:	eb cd                	jmp    c0023bd4 <__mulsf3+0xfb>
c0023c07:	8d 43 ff             	lea    eax,[ebx-0x1]
c0023c0a:	01 f6                	add    esi,esi
c0023c0c:	78 04                	js     c0023c12 <__mulsf3+0x139>
c0023c0e:	89 c3                	mov    ebx,eax
c0023c10:	eb f5                	jmp    c0023c07 <__mulsf3+0x12e>
c0023c12:	89 c8                	mov    eax,ecx
c0023c14:	0d 00 00 00 80       	or     eax,0x80000000
c0023c19:	81 ce 00 00 00 80    	or     esi,0x80000000
c0023c1f:	f7 e6                	mul    esi
c0023c21:	85 c0                	test   eax,eax
c0023c23:	0f 95 c0             	setne  al
c0023c26:	0f b6 c0             	movzx  eax,al
c0023c29:	09 c2                	or     edx,eax
c0023c2b:	78 03                	js     c0023c30 <__mulsf3+0x157>
c0023c2d:	01 d2                	add    edx,edx
c0023c2f:	4b                   	dec    ebx
c0023c30:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0023c36:	7f 22                	jg     c0023c5a <__mulsf3+0x181>
c0023c38:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0023c3e:	85 db                	test   ebx,ebx
c0023c40:	7f 23                	jg     c0023c65 <__mulsf3+0x18c>
c0023c42:	83 fb e9             	cmp    ebx,0xffffffe9
c0023c45:	7c 1a                	jl     c0023c61 <__mulsf3+0x188>
c0023c47:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023c4d:	b9 01 00 00 00       	mov    ecx,0x1
c0023c52:	29 d9                	sub    ecx,ebx
c0023c54:	d3 ea                	shr    edx,cl
c0023c56:	31 db                	xor    ebx,ebx
c0023c58:	eb 0b                	jmp    c0023c65 <__mulsf3+0x18c>
c0023c5a:	bb ff 00 00 00       	mov    ebx,0xff
c0023c5f:	eb 02                	jmp    c0023c63 <__mulsf3+0x18a>
c0023c61:	31 db                	xor    ebx,ebx
c0023c63:	31 d2                	xor    edx,edx
c0023c65:	89 d0                	mov    eax,edx
c0023c67:	c1 e8 08             	shr    eax,0x8
c0023c6a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0023c6d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0023c73:	09 fb                	or     ebx,edi
c0023c75:	c1 e3 17             	shl    ebx,0x17
c0023c78:	09 c3                	or     ebx,eax
c0023c7a:	f6 c2 7f             	test   dl,0x7f
c0023c7d:	0f 95 c1             	setne  cl
c0023c80:	09 c8                	or     eax,ecx
c0023c82:	83 e0 01             	and    eax,0x1
c0023c85:	c1 ea 07             	shr    edx,0x7
c0023c88:	21 c2                	and    edx,eax
c0023c8a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0023c8d:	eb 03                	jmp    c0023c92 <__mulsf3+0x1b9>
c0023c8f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0023c92:	89 f0                	mov    eax,esi
c0023c94:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023c97:	5b                   	pop    ebx
c0023c98:	5e                   	pop    esi
c0023c99:	5f                   	pop    edi
c0023c9a:	5d                   	pop    ebp
c0023c9b:	c3                   	ret    

c0023c9c <__divsf3>:
c0023c9c:	55                   	push   ebp
c0023c9d:	89 e5                	mov    ebp,esp
c0023c9f:	57                   	push   edi
c0023ca0:	56                   	push   esi
c0023ca1:	53                   	push   ebx
c0023ca2:	83 ec 1c             	sub    esp,0x1c
c0023ca5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0023ca8:	89 d8                	mov    eax,ebx
c0023caa:	89 d9                	mov    ecx,ebx
c0023cac:	c1 f9 17             	sar    ecx,0x17
c0023caf:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0023cb2:	c1 e0 08             	shl    eax,0x8
c0023cb5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023cba:	89 c1                	mov    ecx,eax
c0023cbc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023cbf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023cc2:	89 c7                	mov    edi,eax
c0023cc4:	c1 ff 17             	sar    edi,0x17
c0023cc7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0023ccb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0023cce:	89 f8                	mov    eax,edi
c0023cd0:	0f b6 c0             	movzx  eax,al
c0023cd3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0023cd6:	29 c6                	sub    esi,eax
c0023cd8:	83 c6 7f             	add    esi,0x7f
c0023cdb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0023cde:	42                   	inc    edx
c0023cdf:	80 e2 fe             	and    dl,0xfe
c0023ce2:	0f 85 9c 00 00 00    	jne    c0023d84 <__divsf3+0xe8>
c0023ce8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0023cec:	74 33                	je     c0023d21 <__divsf3+0x85>
c0023cee:	85 c9                	test   ecx,ecx
c0023cf0:	0f 85 c7 01 00 00    	jne    c0023ebd <__divsf3+0x221>
c0023cf6:	8d 57 01             	lea    edx,[edi+0x1]
c0023cf9:	80 e2 fe             	and    dl,0xfe
c0023cfc:	75 2f                	jne    c0023d2d <__divsf3+0x91>
c0023cfe:	85 c0                	test   eax,eax
c0023d00:	74 2b                	je     c0023d2d <__divsf3+0x91>
c0023d02:	51                   	push   ecx
c0023d03:	51                   	push   ecx
c0023d04:	6a 00                	push   0x0
c0023d06:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023d09:	e8 d2 03 00 00       	call   c00240e0 <__nesf2>
c0023d0e:	83 c4 10             	add    esp,0x10
c0023d11:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023d14:	85 c0                	test   eax,eax
c0023d16:	0f 85 a1 01 00 00    	jne    c0023ebd <__divsf3+0x221>
c0023d1c:	e9 92 01 00 00       	jmp    c0023eb3 <__divsf3+0x217>
c0023d21:	85 c9                	test   ecx,ecx
c0023d23:	75 1b                	jne    c0023d40 <__divsf3+0xa4>
c0023d25:	8d 57 01             	lea    edx,[edi+0x1]
c0023d28:	80 e2 fe             	and    dl,0xfe
c0023d2b:	74 1e                	je     c0023d4b <__divsf3+0xaf>
c0023d2d:	85 ff                	test   edi,edi
c0023d2f:	0f 89 88 01 00 00    	jns    c0023ebd <__divsf3+0x221>
c0023d35:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0023d3b:	e9 7d 01 00 00       	jmp    c0023ebd <__divsf3+0x221>
c0023d40:	8d 56 ff             	lea    edx,[esi-0x1]
c0023d43:	01 c9                	add    ecx,ecx
c0023d45:	78 3d                	js     c0023d84 <__divsf3+0xe8>
c0023d47:	89 d6                	mov    esi,edx
c0023d49:	eb f5                	jmp    c0023d40 <__divsf3+0xa4>
c0023d4b:	85 c0                	test   eax,eax
c0023d4d:	b8 00 00 00 00       	mov    eax,0x0
c0023d52:	74 18                	je     c0023d6c <__divsf3+0xd0>
c0023d54:	52                   	push   edx
c0023d55:	52                   	push   edx
c0023d56:	50                   	push   eax
c0023d57:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023d5a:	e8 81 03 00 00       	call   c00240e0 <__nesf2>
c0023d5f:	83 c4 10             	add    esp,0x10
c0023d62:	85 c0                	test   eax,eax
c0023d64:	0f 85 50 01 00 00    	jne    c0023eba <__divsf3+0x21e>
c0023d6a:	eb c1                	jmp    c0023d2d <__divsf3+0x91>
c0023d6c:	56                   	push   esi
c0023d6d:	56                   	push   esi
c0023d6e:	50                   	push   eax
c0023d6f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023d72:	e8 69 03 00 00       	call   c00240e0 <__nesf2>
c0023d77:	83 c4 10             	add    esp,0x10
c0023d7a:	85 c0                	test   eax,eax
c0023d7c:	0f 84 31 01 00 00    	je     c0023eb3 <__divsf3+0x217>
c0023d82:	eb a9                	jmp    c0023d2d <__divsf3+0x91>
c0023d84:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0023d87:	c1 e3 08             	shl    ebx,0x8
c0023d8a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0023d90:	8d 57 01             	lea    edx,[edi+0x1]
c0023d93:	80 e2 fe             	and    dl,0xfe
c0023d96:	75 71                	jne    c0023e09 <__divsf3+0x16d>
c0023d98:	85 c0                	test   eax,eax
c0023d9a:	ba 00 00 00 00       	mov    edx,0x0
c0023d9f:	74 2f                	je     c0023dd0 <__divsf3+0x134>
c0023da1:	51                   	push   ecx
c0023da2:	51                   	push   ecx
c0023da3:	52                   	push   edx
c0023da4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023da7:	e8 f9 02 00 00       	call   c00240a5 <__eqsf2>
c0023dac:	83 c4 10             	add    esp,0x10
c0023daf:	85 c0                	test   eax,eax
c0023db1:	0f 85 03 01 00 00    	jne    c0023eba <__divsf3+0x21e>
c0023db7:	31 d2                	xor    edx,edx
c0023db9:	89 d3                	mov    ebx,edx
c0023dbb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0023dbe:	31 f8                	xor    eax,edi
c0023dc0:	0f 89 f7 00 00 00    	jns    c0023ebd <__divsf3+0x221>
c0023dc6:	bb 00 00 00 80       	mov    ebx,0x80000000
c0023dcb:	e9 ed 00 00 00       	jmp    c0023ebd <__divsf3+0x221>
c0023dd0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0023dd3:	50                   	push   eax
c0023dd4:	50                   	push   eax
c0023dd5:	52                   	push   edx
c0023dd6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023dd9:	e8 c7 02 00 00       	call   c00240a5 <__eqsf2>
c0023dde:	83 c4 10             	add    esp,0x10
c0023de1:	85 c0                	test   eax,eax
c0023de3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0023de6:	75 16                	jne    c0023dfe <__divsf3+0x162>
c0023de8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0023deb:	31 fb                	xor    ebx,edi
c0023ded:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0023df3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0023df9:	e9 bf 00 00 00       	jmp    c0023ebd <__divsf3+0x221>
c0023dfe:	8d 46 01             	lea    eax,[esi+0x1]
c0023e01:	01 db                	add    ebx,ebx
c0023e03:	78 04                	js     c0023e09 <__divsf3+0x16d>
c0023e05:	89 c6                	mov    esi,eax
c0023e07:	eb f5                	jmp    c0023dfe <__divsf3+0x162>
c0023e09:	89 c8                	mov    eax,ecx
c0023e0b:	0d 00 00 00 80       	or     eax,0x80000000
c0023e10:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023e16:	31 d2                	xor    edx,edx
c0023e18:	39 d8                	cmp    eax,ebx
c0023e1a:	72 07                	jb     c0023e23 <__divsf3+0x187>
c0023e1c:	29 d8                	sub    eax,ebx
c0023e1e:	ba 01 00 00 00       	mov    edx,0x1
c0023e23:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0023e2a:	01 d2                	add    edx,edx
c0023e2c:	89 c1                	mov    ecx,eax
c0023e2e:	01 c0                	add    eax,eax
c0023e30:	85 c9                	test   ecx,ecx
c0023e32:	78 04                	js     c0023e38 <__divsf3+0x19c>
c0023e34:	39 c3                	cmp    ebx,eax
c0023e36:	77 05                	ja     c0023e3d <__divsf3+0x1a1>
c0023e38:	29 d8                	sub    eax,ebx
c0023e3a:	83 ca 01             	or     edx,0x1
c0023e3d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0023e40:	75 e8                	jne    c0023e2a <__divsf3+0x18e>
c0023e42:	85 c0                	test   eax,eax
c0023e44:	0f 95 c0             	setne  al
c0023e47:	0f b6 c0             	movzx  eax,al
c0023e4a:	c1 e2 06             	shl    edx,0x6
c0023e4d:	09 c2                	or     edx,eax
c0023e4f:	78 03                	js     c0023e54 <__divsf3+0x1b8>
c0023e51:	01 d2                	add    edx,edx
c0023e53:	4e                   	dec    esi
c0023e54:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0023e5a:	7f 22                	jg     c0023e7e <__divsf3+0x1e2>
c0023e5c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0023e62:	85 f6                	test   esi,esi
c0023e64:	7f 23                	jg     c0023e89 <__divsf3+0x1ed>
c0023e66:	83 fe e9             	cmp    esi,0xffffffe9
c0023e69:	7c 1a                	jl     c0023e85 <__divsf3+0x1e9>
c0023e6b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023e71:	b9 01 00 00 00       	mov    ecx,0x1
c0023e76:	29 f1                	sub    ecx,esi
c0023e78:	d3 ea                	shr    edx,cl
c0023e7a:	31 f6                	xor    esi,esi
c0023e7c:	eb 0b                	jmp    c0023e89 <__divsf3+0x1ed>
c0023e7e:	be ff 00 00 00       	mov    esi,0xff
c0023e83:	eb 02                	jmp    c0023e87 <__divsf3+0x1eb>
c0023e85:	31 f6                	xor    esi,esi
c0023e87:	31 d2                	xor    edx,edx
c0023e89:	89 d0                	mov    eax,edx
c0023e8b:	c1 e8 08             	shr    eax,0x8
c0023e8e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0023e91:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0023e97:	09 fe                	or     esi,edi
c0023e99:	c1 e6 17             	shl    esi,0x17
c0023e9c:	09 c6                	or     esi,eax
c0023e9e:	f6 c2 7f             	test   dl,0x7f
c0023ea1:	0f 95 c1             	setne  cl
c0023ea4:	09 c8                	or     eax,ecx
c0023ea6:	83 e0 01             	and    eax,0x1
c0023ea9:	c1 ea 07             	shr    edx,0x7
c0023eac:	21 c2                	and    edx,eax
c0023eae:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0023eb1:	eb 0a                	jmp    c0023ebd <__divsf3+0x221>
c0023eb3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0023eb8:	eb 03                	jmp    c0023ebd <__divsf3+0x221>
c0023eba:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023ebd:	89 d8                	mov    eax,ebx
c0023ebf:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023ec2:	5b                   	pop    ebx
c0023ec3:	5e                   	pop    esi
c0023ec4:	5f                   	pop    edi
c0023ec5:	5d                   	pop    ebp
c0023ec6:	c3                   	ret    

c0023ec7 <__floatsisf>:
c0023ec7:	55                   	push   ebp
c0023ec8:	89 e5                	mov    ebp,esp
c0023eca:	53                   	push   ebx
c0023ecb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023ece:	85 d2                	test   edx,edx
c0023ed0:	7e 2b                	jle    c0023efd <__floatsisf+0x36>
c0023ed2:	0f bd ca             	bsr    ecx,edx
c0023ed5:	83 f1 1f             	xor    ecx,0x1f
c0023ed8:	d3 e2                	shl    edx,cl
c0023eda:	89 d0                	mov    eax,edx
c0023edc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023ee1:	89 c3                	mov    ebx,eax
c0023ee3:	c1 eb 08             	shr    ebx,0x8
c0023ee6:	80 e2 7f             	and    dl,0x7f
c0023ee9:	0f 95 c2             	setne  dl
c0023eec:	09 da                	or     edx,ebx
c0023eee:	83 e2 01             	and    edx,0x1
c0023ef1:	c1 e8 07             	shr    eax,0x7
c0023ef4:	21 c2                	and    edx,eax
c0023ef6:	b8 9e 00 00 00       	mov    eax,0x9e
c0023efb:	eb 32                	jmp    c0023f2f <__floatsisf+0x68>
c0023efd:	b8 00 00 00 00       	mov    eax,0x0
c0023f02:	74 34                	je     c0023f38 <__floatsisf+0x71>
c0023f04:	f7 da                	neg    edx
c0023f06:	0f bd ca             	bsr    ecx,edx
c0023f09:	83 f1 1f             	xor    ecx,0x1f
c0023f0c:	d3 e2                	shl    edx,cl
c0023f0e:	89 d0                	mov    eax,edx
c0023f10:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023f15:	89 c3                	mov    ebx,eax
c0023f17:	c1 eb 08             	shr    ebx,0x8
c0023f1a:	80 e2 7f             	and    dl,0x7f
c0023f1d:	0f 95 c2             	setne  dl
c0023f20:	09 da                	or     edx,ebx
c0023f22:	83 e2 01             	and    edx,0x1
c0023f25:	c1 e8 07             	shr    eax,0x7
c0023f28:	21 c2                	and    edx,eax
c0023f2a:	b8 9e 01 00 00       	mov    eax,0x19e
c0023f2f:	29 c8                	sub    eax,ecx
c0023f31:	c1 e0 17             	shl    eax,0x17
c0023f34:	09 d8                	or     eax,ebx
c0023f36:	01 d0                	add    eax,edx
c0023f38:	5b                   	pop    ebx
c0023f39:	5d                   	pop    ebp
c0023f3a:	c3                   	ret    

c0023f3b <__floatunsisf>:
c0023f3b:	55                   	push   ebp
c0023f3c:	89 e5                	mov    ebp,esp
c0023f3e:	53                   	push   ebx
c0023f3f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023f42:	31 c0                	xor    eax,eax
c0023f44:	85 d2                	test   edx,edx
c0023f46:	74 32                	je     c0023f7a <__floatunsisf+0x3f>
c0023f48:	0f bd ca             	bsr    ecx,edx
c0023f4b:	83 f1 1f             	xor    ecx,0x1f
c0023f4e:	d3 e2                	shl    edx,cl
c0023f50:	89 d0                	mov    eax,edx
c0023f52:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023f57:	89 c3                	mov    ebx,eax
c0023f59:	c1 eb 08             	shr    ebx,0x8
c0023f5c:	80 e2 7f             	and    dl,0x7f
c0023f5f:	0f 95 c2             	setne  dl
c0023f62:	09 da                	or     edx,ebx
c0023f64:	83 e2 01             	and    edx,0x1
c0023f67:	c1 e8 07             	shr    eax,0x7
c0023f6a:	21 c2                	and    edx,eax
c0023f6c:	b8 9e 00 00 00       	mov    eax,0x9e
c0023f71:	29 c8                	sub    eax,ecx
c0023f73:	c1 e0 17             	shl    eax,0x17
c0023f76:	09 d8                	or     eax,ebx
c0023f78:	01 d0                	add    eax,edx
c0023f7a:	5b                   	pop    ebx
c0023f7b:	5d                   	pop    ebp
c0023f7c:	c3                   	ret    

c0023f7d <__fixsfsi>:
c0023f7d:	55                   	push   ebp
c0023f7e:	89 e5                	mov    ebp,esp
c0023f80:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023f83:	89 d1                	mov    ecx,edx
c0023f85:	c1 e1 08             	shl    ecx,0x8
c0023f88:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0023f8e:	c1 fa 17             	sar    edx,0x17
c0023f91:	78 1c                	js     c0023faf <__fixsfsi+0x32>
c0023f93:	83 ea 7f             	sub    edx,0x7f
c0023f96:	31 c0                	xor    eax,eax
c0023f98:	83 fa 1e             	cmp    edx,0x1e
c0023f9b:	77 40                	ja     c0023fdd <__fixsfsi+0x60>
c0023f9d:	89 c8                	mov    eax,ecx
c0023f9f:	0d 00 00 00 80       	or     eax,0x80000000
c0023fa4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023fa9:	29 d1                	sub    ecx,edx
c0023fab:	d3 e8                	shr    eax,cl
c0023fad:	eb 2e                	jmp    c0023fdd <__fixsfsi+0x60>
c0023faf:	31 c0                	xor    eax,eax
c0023fb1:	81 c2 81 00 00 00    	add    edx,0x81
c0023fb7:	78 24                	js     c0023fdd <__fixsfsi+0x60>
c0023fb9:	83 fa 1e             	cmp    edx,0x1e
c0023fbc:	7e 09                	jle    c0023fc7 <__fixsfsi+0x4a>
c0023fbe:	83 fa 1f             	cmp    edx,0x1f
c0023fc1:	75 18                	jne    c0023fdb <__fixsfsi+0x5e>
c0023fc3:	85 c9                	test   ecx,ecx
c0023fc5:	75 14                	jne    c0023fdb <__fixsfsi+0x5e>
c0023fc7:	89 c8                	mov    eax,ecx
c0023fc9:	0d 00 00 00 80       	or     eax,0x80000000
c0023fce:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023fd3:	29 d1                	sub    ecx,edx
c0023fd5:	d3 e8                	shr    eax,cl
c0023fd7:	f7 d8                	neg    eax
c0023fd9:	eb 02                	jmp    c0023fdd <__fixsfsi+0x60>
c0023fdb:	31 c0                	xor    eax,eax
c0023fdd:	5d                   	pop    ebp
c0023fde:	c3                   	ret    

c0023fdf <__fixunssfsi>:
c0023fdf:	55                   	push   ebp
c0023fe0:	89 e5                	mov    ebp,esp
c0023fe2:	53                   	push   ebx
c0023fe3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023fe6:	89 d3                	mov    ebx,edx
c0023fe8:	c1 fb 17             	sar    ebx,0x17
c0023feb:	83 eb 7f             	sub    ebx,0x7f
c0023fee:	31 c0                	xor    eax,eax
c0023ff0:	83 fb 1f             	cmp    ebx,0x1f
c0023ff3:	77 18                	ja     c002400d <__fixunssfsi+0x2e>
c0023ff5:	89 d0                	mov    eax,edx
c0023ff7:	c1 e0 08             	shl    eax,0x8
c0023ffa:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023fff:	0d 00 00 00 80       	or     eax,0x80000000
c0024004:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024009:	29 d9                	sub    ecx,ebx
c002400b:	d3 e8                	shr    eax,cl
c002400d:	5b                   	pop    ebx
c002400e:	5d                   	pop    ebp
c002400f:	c3                   	ret    

c0024010 <__cmpsf2>:
c0024010:	55                   	push   ebp
c0024011:	89 e5                	mov    ebp,esp
c0024013:	57                   	push   edi
c0024014:	56                   	push   esi
c0024015:	53                   	push   ebx
c0024016:	83 ec 24             	sub    esp,0x24
c0024019:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002401c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002401f:	e8 4f 10 00 00       	call   c0025073 <__truncdfsf2>
c0024024:	5a                   	pop    edx
c0024025:	59                   	pop    ecx
c0024026:	89 c3                	mov    ebx,eax
c0024028:	c1 e8 17             	shr    eax,0x17
c002402b:	0f b6 f0             	movzx  esi,al
c002402e:	89 d8                	mov    eax,ebx
c0024030:	c1 e8 1f             	shr    eax,0x1f
c0024033:	31 c6                	xor    esi,eax
c0024035:	c1 e3 08             	shl    ebx,0x8
c0024038:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002403b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002403e:	e8 30 10 00 00       	call   c0025073 <__truncdfsf2>
c0024043:	83 c4 10             	add    esp,0x10
c0024046:	89 c1                	mov    ecx,eax
c0024048:	c1 e9 17             	shr    ecx,0x17
c002404b:	0f b6 c9             	movzx  ecx,cl
c002404e:	89 c7                	mov    edi,eax
c0024050:	c1 ef 1f             	shr    edi,0x1f
c0024053:	89 ca                	mov    edx,ecx
c0024055:	31 fa                	xor    edx,edi
c0024057:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002405a:	c1 e0 08             	shl    eax,0x8
c002405d:	89 c2                	mov    edx,eax
c002405f:	89 d8                	mov    eax,ebx
c0024061:	09 d0                	or     eax,edx
c0024063:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0024068:	09 f0                	or     eax,esi
c002406a:	75 08                	jne    c0024074 <__cmpsf2+0x64>
c002406c:	31 c0                	xor    eax,eax
c002406e:	39 f9                	cmp    ecx,edi
c0024070:	75 0c                	jne    c002407e <__cmpsf2+0x6e>
c0024072:	eb 29                	jmp    c002409d <__cmpsf2+0x8d>
c0024074:	b8 01 00 00 00       	mov    eax,0x1
c0024079:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002407c:	7f 1f                	jg     c002409d <__cmpsf2+0x8d>
c002407e:	83 c8 ff             	or     eax,0xffffffff
c0024081:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0024084:	7c 17                	jl     c002409d <__cmpsf2+0x8d>
c0024086:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002408c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0024092:	b8 01 00 00 00       	mov    eax,0x1
c0024097:	39 d3                	cmp    ebx,edx
c0024099:	77 02                	ja     c002409d <__cmpsf2+0x8d>
c002409b:	19 c0                	sbb    eax,eax
c002409d:	8d 65 f4             	lea    esp,[ebp-0xc]
c00240a0:	5b                   	pop    ebx
c00240a1:	5e                   	pop    esi
c00240a2:	5f                   	pop    edi
c00240a3:	5d                   	pop    ebp
c00240a4:	c3                   	ret    

c00240a5 <__eqsf2>:
c00240a5:	55                   	push   ebp
c00240a6:	89 e5                	mov    ebp,esp
c00240a8:	83 ec 24             	sub    esp,0x24
c00240ab:	6a 01                	push   0x1
c00240ad:	83 ec 0c             	sub    esp,0xc
c00240b0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00240b3:	e8 df 10 00 00       	call   c0025197 <__extendsfdf2>
c00240b8:	83 c4 10             	add    esp,0x10
c00240bb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00240be:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00240c1:	52                   	push   edx
c00240c2:	50                   	push   eax
c00240c3:	50                   	push   eax
c00240c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00240c7:	e8 cb 10 00 00       	call   c0025197 <__extendsfdf2>
c00240cc:	59                   	pop    ecx
c00240cd:	59                   	pop    ecx
c00240ce:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00240d1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00240d4:	52                   	push   edx
c00240d5:	50                   	push   eax
c00240d6:	e8 35 ff ff ff       	call   c0024010 <__cmpsf2>
c00240db:	83 c4 20             	add    esp,0x20
c00240de:	c9                   	leave  
c00240df:	c3                   	ret    

c00240e0 <__nesf2>:
c00240e0:	eb c3                	jmp    c00240a5 <__eqsf2>

c00240e2 <__gtsf2>:
c00240e2:	55                   	push   ebp
c00240e3:	89 e5                	mov    ebp,esp
c00240e5:	83 ec 24             	sub    esp,0x24
c00240e8:	6a ff                	push   0xffffffff
c00240ea:	83 ec 0c             	sub    esp,0xc
c00240ed:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00240f0:	e8 a2 10 00 00       	call   c0025197 <__extendsfdf2>
c00240f5:	83 c4 10             	add    esp,0x10
c00240f8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00240fb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00240fe:	52                   	push   edx
c00240ff:	50                   	push   eax
c0024100:	50                   	push   eax
c0024101:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024104:	e8 8e 10 00 00       	call   c0025197 <__extendsfdf2>
c0024109:	59                   	pop    ecx
c002410a:	59                   	pop    ecx
c002410b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002410e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0024111:	52                   	push   edx
c0024112:	50                   	push   eax
c0024113:	e8 f8 fe ff ff       	call   c0024010 <__cmpsf2>
c0024118:	83 c4 20             	add    esp,0x20
c002411b:	c9                   	leave  
c002411c:	c3                   	ret    

c002411d <__gesf2>:
c002411d:	eb c3                	jmp    c00240e2 <__gtsf2>

c002411f <__ltsf2>:
c002411f:	eb 84                	jmp    c00240a5 <__eqsf2>

c0024121 <__lesf2>:
c0024121:	eb 82                	jmp    c00240a5 <__eqsf2>

c0024123 <__adddf3>:
c0024123:	55                   	push   ebp
c0024124:	89 e5                	mov    ebp,esp
c0024126:	57                   	push   edi
c0024127:	56                   	push   esi
c0024128:	53                   	push   ebx
c0024129:	83 ec 24             	sub    esp,0x24
c002412c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002412f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024132:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024135:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024138:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002413b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002413e:	89 c8                	mov    eax,ecx
c0024140:	89 ce                	mov    esi,ecx
c0024142:	c1 fe 14             	sar    esi,0x14
c0024145:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0024148:	89 fb                	mov    ebx,edi
c002414a:	89 fa                	mov    edx,edi
c002414c:	c1 e2 0b             	shl    edx,0xb
c002414f:	c1 e0 0b             	shl    eax,0xb
c0024152:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024157:	c1 eb 15             	shr    ebx,0x15
c002415a:	09 d8                	or     eax,ebx
c002415c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002415f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0024162:	c1 fe 14             	sar    esi,0x14
c0024165:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0024168:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002416b:	89 f3                	mov    ebx,esi
c002416d:	c1 e3 0b             	shl    ebx,0xb
c0024170:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0024173:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0024176:	c1 e3 0b             	shl    ebx,0xb
c0024179:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002417f:	c1 ee 15             	shr    esi,0x15
c0024182:	09 f3                	or     ebx,esi
c0024184:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0024187:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002418a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002418d:	0f 88 5f 02 00 00    	js     c00243f2 <__adddf3+0x2cf>
c0024193:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0024196:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0024199:	85 db                	test   ebx,ebx
c002419b:	0f 8e c7 00 00 00    	jle    c0024268 <__adddf3+0x145>
c00241a1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00241a8:	75 1a                	jne    c00241c4 <__adddf3+0xa1>
c00241aa:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00241ad:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00241b0:	0f 84 b2 05 00 00    	je     c0024768 <__adddf3+0x645>
c00241b6:	4b                   	dec    ebx
c00241b7:	75 23                	jne    c00241dc <__adddf3+0xb9>
c00241b9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00241bc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00241bf:	e9 99 00 00 00       	jmp    c002425d <__adddf3+0x13a>
c00241c4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00241c7:	f7 d6                	not    esi
c00241c9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00241cf:	0f 84 93 05 00 00    	je     c0024768 <__adddf3+0x645>
c00241d5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00241dc:	83 fb 1f             	cmp    ebx,0x1f
c00241df:	7e 42                	jle    c0024223 <__adddf3+0x100>
c00241e1:	83 fb 3f             	cmp    ebx,0x3f
c00241e4:	0f 8f 7e 05 00 00    	jg     c0024768 <__adddf3+0x645>
c00241ea:	83 e3 1f             	and    ebx,0x1f
c00241ed:	89 d9                	mov    ecx,ebx
c00241ef:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00241f2:	d3 ef                	shr    edi,cl
c00241f4:	31 db                	xor    ebx,ebx
c00241f6:	85 c9                	test   ecx,ecx
c00241f8:	74 15                	je     c002420f <__adddf3+0xec>
c00241fa:	be 20 00 00 00       	mov    esi,0x20
c00241ff:	29 ce                	sub    esi,ecx
c0024201:	89 f1                	mov    ecx,esi
c0024203:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024206:	d3 e6                	shl    esi,cl
c0024208:	31 db                	xor    ebx,ebx
c002420a:	85 f6                	test   esi,esi
c002420c:	0f 95 c3             	setne  bl
c002420f:	31 c9                	xor    ecx,ecx
c0024211:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0024215:	0f 95 c1             	setne  cl
c0024218:	09 cf                	or     edi,ecx
c002421a:	09 fb                	or     ebx,edi
c002421c:	01 da                	add    edx,ebx
c002421e:	83 d0 00             	adc    eax,0x0
c0024221:	eb 3a                	jmp    c002425d <__adddf3+0x13a>
c0024223:	bf 20 00 00 00       	mov    edi,0x20
c0024228:	29 df                	sub    edi,ebx
c002422a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002422d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024230:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0024233:	d3 e6                	shl    esi,cl
c0024235:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024238:	88 d9                	mov    cl,bl
c002423a:	d3 ef                	shr    edi,cl
c002423c:	09 fe                	or     esi,edi
c002423e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024241:	88 d9                	mov    cl,bl
c0024243:	d3 ef                	shr    edi,cl
c0024245:	89 fb                	mov    ebx,edi
c0024247:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002424a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002424d:	d3 e7                	shl    edi,cl
c002424f:	85 ff                	test   edi,edi
c0024251:	0f 95 c1             	setne  cl
c0024254:	0f b6 c9             	movzx  ecx,cl
c0024257:	09 ce                	or     esi,ecx
c0024259:	01 f2                	add    edx,esi
c002425b:	11 d8                	adc    eax,ebx
c002425d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024260:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024263:	e9 52 01 00 00       	jmp    c00243ba <__adddf3+0x297>
c0024268:	0f 84 d5 00 00 00    	je     c0024343 <__adddf3+0x220>
c002426e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024271:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0024274:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024277:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002427a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0024281:	75 20                	jne    c00242a3 <__adddf3+0x180>
c0024283:	89 d6                	mov    esi,edx
c0024285:	09 c6                	or     esi,eax
c0024287:	0f 84 db 04 00 00    	je     c0024768 <__adddf3+0x645>
c002428d:	4b                   	dec    ebx
c002428e:	75 29                	jne    c00242b9 <__adddf3+0x196>
c0024290:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024293:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024296:	01 d1                	add    ecx,edx
c0024298:	11 c6                	adc    esi,eax
c002429a:	89 f0                	mov    eax,esi
c002429c:	89 ca                	mov    edx,ecx
c002429e:	e9 17 01 00 00       	jmp    c00243ba <__adddf3+0x297>
c00242a3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00242a6:	f7 d6                	not    esi
c00242a8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00242ae:	0f 84 b4 04 00 00    	je     c0024768 <__adddf3+0x645>
c00242b4:	0d 00 00 00 80       	or     eax,0x80000000
c00242b9:	83 fb 1f             	cmp    ebx,0x1f
c00242bc:	7e 48                	jle    c0024306 <__adddf3+0x1e3>
c00242be:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00242c1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00242c4:	83 fb 3f             	cmp    ebx,0x3f
c00242c7:	0f 8f 9b 04 00 00    	jg     c0024768 <__adddf3+0x645>
c00242cd:	83 e3 1f             	and    ebx,0x1f
c00242d0:	89 d9                	mov    ecx,ebx
c00242d2:	89 c7                	mov    edi,eax
c00242d4:	d3 ef                	shr    edi,cl
c00242d6:	31 db                	xor    ebx,ebx
c00242d8:	85 c9                	test   ecx,ecx
c00242da:	74 12                	je     c00242ee <__adddf3+0x1cb>
c00242dc:	be 20 00 00 00       	mov    esi,0x20
c00242e1:	29 ce                	sub    esi,ecx
c00242e3:	89 f1                	mov    ecx,esi
c00242e5:	d3 e0                	shl    eax,cl
c00242e7:	31 db                	xor    ebx,ebx
c00242e9:	85 c0                	test   eax,eax
c00242eb:	0f 95 c3             	setne  bl
c00242ee:	31 c0                	xor    eax,eax
c00242f0:	85 d2                	test   edx,edx
c00242f2:	0f 95 c0             	setne  al
c00242f5:	09 c7                	or     edi,eax
c00242f7:	09 fb                	or     ebx,edi
c00242f9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00242fc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00242ff:	01 da                	add    edx,ebx
c0024301:	83 d6 00             	adc    esi,0x0
c0024304:	eb 39                	jmp    c002433f <__adddf3+0x21c>
c0024306:	be 20 00 00 00       	mov    esi,0x20
c002430b:	29 de                	sub    esi,ebx
c002430d:	89 c7                	mov    edi,eax
c002430f:	89 f1                	mov    ecx,esi
c0024311:	d3 e7                	shl    edi,cl
c0024313:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0024316:	89 d7                	mov    edi,edx
c0024318:	88 d9                	mov    cl,bl
c002431a:	d3 ef                	shr    edi,cl
c002431c:	89 f9                	mov    ecx,edi
c002431e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024321:	09 cf                	or     edi,ecx
c0024323:	88 d9                	mov    cl,bl
c0024325:	d3 e8                	shr    eax,cl
c0024327:	89 f1                	mov    ecx,esi
c0024329:	d3 e2                	shl    edx,cl
c002432b:	85 d2                	test   edx,edx
c002432d:	0f 95 c2             	setne  dl
c0024330:	0f b6 d2             	movzx  edx,dl
c0024333:	09 d7                	or     edi,edx
c0024335:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024338:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002433b:	01 fa                	add    edx,edi
c002433d:	11 c6                	adc    esi,eax
c002433f:	89 f0                	mov    eax,esi
c0024341:	eb 77                	jmp    c00243ba <__adddf3+0x297>
c0024343:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024346:	46                   	inc    esi
c0024347:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002434a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0024350:	75 41                	jne    c0024393 <__adddf3+0x270>
c0024352:	89 d3                	mov    ebx,edx
c0024354:	09 c3                	or     ebx,eax
c0024356:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002435d:	75 27                	jne    c0024386 <__adddf3+0x263>
c002435f:	85 db                	test   ebx,ebx
c0024361:	0f 84 fb 03 00 00    	je     c0024762 <__adddf3+0x63f>
c0024367:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002436a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002436d:	0f 84 f5 03 00 00    	je     c0024768 <__adddf3+0x645>
c0024373:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0024376:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0024379:	85 c0                	test   eax,eax
c002437b:	0f 89 91 03 00 00    	jns    c0024712 <__adddf3+0x5ef>
c0024381:	e9 85 03 00 00       	jmp    c002470b <__adddf3+0x5e8>
c0024386:	85 db                	test   ebx,ebx
c0024388:	0f 85 da 03 00 00    	jne    c0024768 <__adddf3+0x645>
c002438e:	e9 cf 03 00 00       	jmp    c0024762 <__adddf3+0x63f>
c0024393:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0024396:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0024399:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002439c:	f7 d1                	not    ecx
c002439e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00243a4:	0f 84 70 03 00 00    	je     c002471a <__adddf3+0x5f7>
c00243aa:	d1 ea                	shr    edx,1
c00243ac:	89 c1                	mov    ecx,eax
c00243ae:	c1 e1 1f             	shl    ecx,0x1f
c00243b1:	09 ca                	or     edx,ecx
c00243b3:	d1 e8                	shr    eax,1
c00243b5:	e9 6f 03 00 00       	jmp    c0024729 <__adddf3+0x606>
c00243ba:	85 c0                	test   eax,eax
c00243bc:	0f 89 67 03 00 00    	jns    c0024729 <__adddf3+0x606>
c00243c2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00243c5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00243c8:	f7 d1                	not    ecx
c00243ca:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00243d0:	0f 84 44 03 00 00    	je     c002471a <__adddf3+0x5f7>
c00243d6:	89 d1                	mov    ecx,edx
c00243d8:	d1 e9                	shr    ecx,1
c00243da:	83 e2 01             	and    edx,0x1
c00243dd:	09 ca                	or     edx,ecx
c00243df:	89 c1                	mov    ecx,eax
c00243e1:	c1 e1 1f             	shl    ecx,0x1f
c00243e4:	09 ca                	or     edx,ecx
c00243e6:	d1 e8                	shr    eax,1
c00243e8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00243ed:	e9 37 03 00 00       	jmp    c0024729 <__adddf3+0x606>
c00243f2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00243f5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00243fb:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00243fe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024401:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024407:	29 de                	sub    esi,ebx
c0024409:	85 f6                	test   esi,esi
c002440b:	0f 8e bd 00 00 00    	jle    c00244ce <__adddf3+0x3ab>
c0024411:	85 db                	test   ebx,ebx
c0024413:	75 17                	jne    c002442c <__adddf3+0x309>
c0024415:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0024418:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002441b:	0f 84 47 03 00 00    	je     c0024768 <__adddf3+0x645>
c0024421:	4e                   	dec    esi
c0024422:	75 20                	jne    c0024444 <__adddf3+0x321>
c0024424:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0024427:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002442a:	eb 5b                	jmp    c0024487 <__adddf3+0x364>
c002442c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002442f:	f7 d3                	not    ebx
c0024431:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024437:	0f 84 2b 03 00 00    	je     c0024768 <__adddf3+0x645>
c002443d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0024444:	83 fe 1f             	cmp    esi,0x1f
c0024447:	7e 49                	jle    c0024492 <__adddf3+0x36f>
c0024449:	83 fe 3f             	cmp    esi,0x3f
c002444c:	0f 8f 16 03 00 00    	jg     c0024768 <__adddf3+0x645>
c0024452:	83 e6 1f             	and    esi,0x1f
c0024455:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024458:	89 f1                	mov    ecx,esi
c002445a:	d3 ef                	shr    edi,cl
c002445c:	31 db                	xor    ebx,ebx
c002445e:	85 f6                	test   esi,esi
c0024460:	74 13                	je     c0024475 <__adddf3+0x352>
c0024462:	b9 20 00 00 00       	mov    ecx,0x20
c0024467:	29 f1                	sub    ecx,esi
c0024469:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002446c:	d3 e6                	shl    esi,cl
c002446e:	31 db                	xor    ebx,ebx
c0024470:	85 f6                	test   esi,esi
c0024472:	0f 95 c3             	setne  bl
c0024475:	31 c9                	xor    ecx,ecx
c0024477:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002447b:	0f 95 c1             	setne  cl
c002447e:	09 cf                	or     edi,ecx
c0024480:	09 fb                	or     ebx,edi
c0024482:	29 da                	sub    edx,ebx
c0024484:	83 d8 00             	sbb    eax,0x0
c0024487:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002448a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002448d:	e9 aa 01 00 00       	jmp    c002463c <__adddf3+0x519>
c0024492:	bf 20 00 00 00       	mov    edi,0x20
c0024497:	29 f7                	sub    edi,esi
c0024499:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002449c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002449f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00244a2:	d3 e3                	shl    ebx,cl
c00244a4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00244a7:	89 f1                	mov    ecx,esi
c00244a9:	d3 ef                	shr    edi,cl
c00244ab:	09 fb                	or     ebx,edi
c00244ad:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00244b0:	89 f1                	mov    ecx,esi
c00244b2:	d3 ef                	shr    edi,cl
c00244b4:	89 fe                	mov    esi,edi
c00244b6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00244b9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00244bc:	d3 e7                	shl    edi,cl
c00244be:	85 ff                	test   edi,edi
c00244c0:	0f 95 c1             	setne  cl
c00244c3:	0f b6 c9             	movzx  ecx,cl
c00244c6:	09 cb                	or     ebx,ecx
c00244c8:	29 da                	sub    edx,ebx
c00244ca:	19 f0                	sbb    eax,esi
c00244cc:	eb b9                	jmp    c0024487 <__adddf3+0x364>
c00244ce:	0f 84 cd 00 00 00    	je     c00245a1 <__adddf3+0x47e>
c00244d4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00244d7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00244da:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00244dd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00244e1:	75 1b                	jne    c00244fe <__adddf3+0x3db>
c00244e3:	89 d6                	mov    esi,edx
c00244e5:	09 c6                	or     esi,eax
c00244e7:	0f 84 7b 02 00 00    	je     c0024768 <__adddf3+0x645>
c00244ed:	4b                   	dec    ebx
c00244ee:	75 24                	jne    c0024514 <__adddf3+0x3f1>
c00244f0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00244f3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00244f6:	29 d1                	sub    ecx,edx
c00244f8:	19 c6                	sbb    esi,eax
c00244fa:	89 ca                	mov    edx,ecx
c00244fc:	eb 61                	jmp    c002455f <__adddf3+0x43c>
c00244fe:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0024501:	f7 d6                	not    esi
c0024503:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0024509:	0f 84 59 02 00 00    	je     c0024768 <__adddf3+0x645>
c002450f:	0d 00 00 00 80       	or     eax,0x80000000
c0024514:	83 fb 1f             	cmp    ebx,0x1f
c0024517:	7e 4d                	jle    c0024566 <__adddf3+0x443>
c0024519:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002451c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002451f:	83 fb 3f             	cmp    ebx,0x3f
c0024522:	0f 8f 40 02 00 00    	jg     c0024768 <__adddf3+0x645>
c0024528:	83 e3 1f             	and    ebx,0x1f
c002452b:	89 d9                	mov    ecx,ebx
c002452d:	89 c7                	mov    edi,eax
c002452f:	d3 ef                	shr    edi,cl
c0024531:	31 db                	xor    ebx,ebx
c0024533:	85 c9                	test   ecx,ecx
c0024535:	74 12                	je     c0024549 <__adddf3+0x426>
c0024537:	be 20 00 00 00       	mov    esi,0x20
c002453c:	29 ce                	sub    esi,ecx
c002453e:	89 f1                	mov    ecx,esi
c0024540:	d3 e0                	shl    eax,cl
c0024542:	31 db                	xor    ebx,ebx
c0024544:	85 c0                	test   eax,eax
c0024546:	0f 95 c3             	setne  bl
c0024549:	31 c0                	xor    eax,eax
c002454b:	85 d2                	test   edx,edx
c002454d:	0f 95 c0             	setne  al
c0024550:	09 c7                	or     edi,eax
c0024552:	09 fb                	or     ebx,edi
c0024554:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024557:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002455a:	29 da                	sub    edx,ebx
c002455c:	83 de 00             	sbb    esi,0x0
c002455f:	89 f0                	mov    eax,esi
c0024561:	e9 d6 00 00 00       	jmp    c002463c <__adddf3+0x519>
c0024566:	be 20 00 00 00       	mov    esi,0x20
c002456b:	29 de                	sub    esi,ebx
c002456d:	89 c7                	mov    edi,eax
c002456f:	89 f1                	mov    ecx,esi
c0024571:	d3 e7                	shl    edi,cl
c0024573:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0024576:	89 d7                	mov    edi,edx
c0024578:	88 d9                	mov    cl,bl
c002457a:	d3 ef                	shr    edi,cl
c002457c:	89 f9                	mov    ecx,edi
c002457e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024581:	09 cf                	or     edi,ecx
c0024583:	88 d9                	mov    cl,bl
c0024585:	d3 e8                	shr    eax,cl
c0024587:	89 f1                	mov    ecx,esi
c0024589:	d3 e2                	shl    edx,cl
c002458b:	85 d2                	test   edx,edx
c002458d:	0f 95 c2             	setne  dl
c0024590:	0f b6 d2             	movzx  edx,dl
c0024593:	09 d7                	or     edi,edx
c0024595:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024598:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002459b:	29 fa                	sub    edx,edi
c002459d:	19 c6                	sbb    esi,eax
c002459f:	eb be                	jmp    c002455f <__adddf3+0x43c>
c00245a1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00245a4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00245a7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00245ad:	75 6a                	jne    c0024619 <__adddf3+0x4f6>
c00245af:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00245b3:	75 58                	jne    c002460d <__adddf3+0x4ea>
c00245b5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00245b8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00245bb:	89 d6                	mov    esi,edx
c00245bd:	09 c6                	or     esi,eax
c00245bf:	75 17                	jne    c00245d8 <__adddf3+0x4b5>
c00245c1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00245c4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00245c7:	85 db                	test   ebx,ebx
c00245c9:	0f 85 99 01 00 00    	jne    c0024768 <__adddf3+0x645>
c00245cf:	31 ff                	xor    edi,edi
c00245d1:	31 c9                	xor    ecx,ecx
c00245d3:	e9 90 01 00 00       	jmp    c0024768 <__adddf3+0x645>
c00245d8:	85 db                	test   ebx,ebx
c00245da:	0f 84 88 01 00 00    	je     c0024768 <__adddf3+0x645>
c00245e0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00245e3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00245e6:	85 c0                	test   eax,eax
c00245e8:	79 10                	jns    c00245fa <__adddf3+0x4d7>
c00245ea:	31 c9                	xor    ecx,ecx
c00245ec:	f7 da                	neg    edx
c00245ee:	0f 95 c1             	setne  cl
c00245f1:	01 c8                	add    eax,ecx
c00245f3:	f7 d8                	neg    eax
c00245f5:	e9 2f 01 00 00       	jmp    c0024729 <__adddf3+0x606>
c00245fa:	31 ff                	xor    edi,edi
c00245fc:	31 c9                	xor    ecx,ecx
c00245fe:	89 c3                	mov    ebx,eax
c0024600:	09 d3                	or     ebx,edx
c0024602:	0f 84 60 01 00 00    	je     c0024768 <__adddf3+0x645>
c0024608:	e9 05 01 00 00       	jmp    c0024712 <__adddf3+0x5ef>
c002460d:	31 ff                	xor    edi,edi
c002460f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0024614:	e9 4f 01 00 00       	jmp    c0024768 <__adddf3+0x645>
c0024619:	89 c1                	mov    ecx,eax
c002461b:	89 d0                	mov    eax,edx
c002461d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0024620:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0024623:	89 ca                	mov    edx,ecx
c0024625:	85 c9                	test   ecx,ecx
c0024627:	79 2c                	jns    c0024655 <__adddf3+0x532>
c0024629:	31 c9                	xor    ecx,ecx
c002462b:	f7 d8                	neg    eax
c002462d:	0f 95 c1             	setne  cl
c0024630:	01 ca                	add    edx,ecx
c0024632:	f7 da                	neg    edx
c0024634:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0024637:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002463a:	eb 19                	jmp    c0024655 <__adddf3+0x532>
c002463c:	85 c0                	test   eax,eax
c002463e:	0f 89 e5 00 00 00    	jns    c0024729 <__adddf3+0x606>
c0024644:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024649:	89 c1                	mov    ecx,eax
c002464b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002464e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0024651:	89 d0                	mov    eax,edx
c0024653:	89 ca                	mov    edx,ecx
c0024655:	85 d2                	test   edx,edx
c0024657:	74 59                	je     c00246b2 <__adddf3+0x58f>
c0024659:	0f bd da             	bsr    ebx,edx
c002465c:	83 f3 1f             	xor    ebx,0x1f
c002465f:	88 d9                	mov    cl,bl
c0024661:	d3 e2                	shl    edx,cl
c0024663:	bf 20 00 00 00       	mov    edi,0x20
c0024668:	89 f9                	mov    ecx,edi
c002466a:	29 d9                	sub    ecx,ebx
c002466c:	89 c6                	mov    esi,eax
c002466e:	d3 ee                	shr    esi,cl
c0024670:	09 d6                	or     esi,edx
c0024672:	88 d9                	mov    cl,bl
c0024674:	d3 e0                	shl    eax,cl
c0024676:	89 c2                	mov    edx,eax
c0024678:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002467b:	25 ff 07 00 00       	and    eax,0x7ff
c0024680:	39 d8                	cmp    eax,ebx
c0024682:	7f 22                	jg     c00246a6 <__adddf3+0x583>
c0024684:	29 c3                	sub    ebx,eax
c0024686:	43                   	inc    ebx
c0024687:	88 d9                	mov    cl,bl
c0024689:	d3 ea                	shr    edx,cl
c002468b:	29 df                	sub    edi,ebx
c002468d:	89 f9                	mov    ecx,edi
c002468f:	89 f0                	mov    eax,esi
c0024691:	d3 e0                	shl    eax,cl
c0024693:	09 c2                	or     edx,eax
c0024695:	89 f0                	mov    eax,esi
c0024697:	88 d9                	mov    cl,bl
c0024699:	d3 e8                	shr    eax,cl
c002469b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002469e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00246a4:	eb 6f                	jmp    c0024715 <__adddf3+0x5f2>
c00246a6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00246a9:	29 d8                	sub    eax,ebx
c00246ab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00246ae:	89 f0                	mov    eax,esi
c00246b0:	eb 59                	jmp    c002470b <__adddf3+0x5e8>
c00246b2:	85 c0                	test   eax,eax
c00246b4:	74 6a                	je     c0024720 <__adddf3+0x5fd>
c00246b6:	0f bd c8             	bsr    ecx,eax
c00246b9:	83 f1 1f             	xor    ecx,0x1f
c00246bc:	d3 e0                	shl    eax,cl
c00246be:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00246c1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00246c7:	83 c1 20             	add    ecx,0x20
c00246ca:	39 cb                	cmp    ebx,ecx
c00246cc:	7f 35                	jg     c0024703 <__adddf3+0x5e0>
c00246ce:	29 d9                	sub    ecx,ebx
c00246d0:	8d 71 01             	lea    esi,[ecx+0x1]
c00246d3:	83 fe 1f             	cmp    esi,0x1f
c00246d6:	7e 09                	jle    c00246e1 <__adddf3+0x5be>
c00246d8:	83 e9 1f             	sub    ecx,0x1f
c00246db:	d3 e8                	shr    eax,cl
c00246dd:	89 c3                	mov    ebx,eax
c00246df:	eb 11                	jmp    c00246f2 <__adddf3+0x5cf>
c00246e1:	b9 20 00 00 00       	mov    ecx,0x20
c00246e6:	29 f1                	sub    ecx,esi
c00246e8:	89 c3                	mov    ebx,eax
c00246ea:	d3 e3                	shl    ebx,cl
c00246ec:	89 f1                	mov    ecx,esi
c00246ee:	d3 e8                	shr    eax,cl
c00246f0:	89 c2                	mov    edx,eax
c00246f2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00246f5:	25 00 f8 ff ff       	and    eax,0xfffff800
c00246fa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00246fd:	89 d0                	mov    eax,edx
c00246ff:	89 da                	mov    edx,ebx
c0024701:	eb 26                	jmp    c0024729 <__adddf3+0x606>
c0024703:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024706:	29 cf                	sub    edi,ecx
c0024708:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002470b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024710:	eb 17                	jmp    c0024729 <__adddf3+0x606>
c0024712:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024715:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024718:	eb 0f                	jmp    c0024729 <__adddf3+0x606>
c002471a:	31 d2                	xor    edx,edx
c002471c:	31 c0                	xor    eax,eax
c002471e:	eb 09                	jmp    c0024729 <__adddf3+0x606>
c0024720:	89 c2                	mov    edx,eax
c0024722:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0024729:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002472c:	c1 e1 14             	shl    ecx,0x14
c002472f:	89 c3                	mov    ebx,eax
c0024731:	c1 eb 0b             	shr    ebx,0xb
c0024734:	09 d9                	or     ecx,ebx
c0024736:	89 d3                	mov    ebx,edx
c0024738:	c1 eb 0b             	shr    ebx,0xb
c002473b:	c1 e0 15             	shl    eax,0x15
c002473e:	09 d8                	or     eax,ebx
c0024740:	89 c7                	mov    edi,eax
c0024742:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0024748:	0f 95 c0             	setne  al
c002474b:	89 c6                	mov    esi,eax
c002474d:	09 f3                	or     ebx,esi
c002474f:	83 e3 01             	and    ebx,0x1
c0024752:	c1 ea 0a             	shr    edx,0xa
c0024755:	21 da                	and    edx,ebx
c0024757:	89 f8                	mov    eax,edi
c0024759:	01 d0                	add    eax,edx
c002475b:	83 d1 00             	adc    ecx,0x0
c002475e:	89 c7                	mov    edi,eax
c0024760:	eb 06                	jmp    c0024768 <__adddf3+0x645>
c0024762:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024765:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024768:	89 f8                	mov    eax,edi
c002476a:	89 ca                	mov    edx,ecx
c002476c:	83 c4 24             	add    esp,0x24
c002476f:	5b                   	pop    ebx
c0024770:	5e                   	pop    esi
c0024771:	5f                   	pop    edi
c0024772:	5d                   	pop    ebp
c0024773:	c3                   	ret    

c0024774 <__subdf3>:
c0024774:	55                   	push   ebp
c0024775:	89 e5                	mov    ebp,esp
c0024777:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002477a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002477d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0024783:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0024786:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0024789:	5d                   	pop    ebp
c002478a:	e9 94 f9 ff ff       	jmp    c0024123 <__adddf3>

c002478f <__negdf2>:
c002478f:	55                   	push   ebp
c0024790:	89 e5                	mov    ebp,esp
c0024792:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024795:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024798:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002479e:	5d                   	pop    ebp
c002479f:	c3                   	ret    

c00247a0 <__muldf3>:
c00247a0:	55                   	push   ebp
c00247a1:	89 e5                	mov    ebp,esp
c00247a3:	57                   	push   edi
c00247a4:	56                   	push   esi
c00247a5:	53                   	push   ebx
c00247a6:	83 ec 24             	sub    esp,0x24
c00247a9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00247ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00247af:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00247b2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00247b5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00247b8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00247bb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00247be:	89 c8                	mov    eax,ecx
c00247c0:	c1 f8 14             	sar    eax,0x14
c00247c3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00247c6:	89 f8                	mov    eax,edi
c00247c8:	89 fb                	mov    ebx,edi
c00247ca:	c1 e3 0b             	shl    ebx,0xb
c00247cd:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00247d0:	c1 e1 0b             	shl    ecx,0xb
c00247d3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00247d9:	c1 e8 15             	shr    eax,0x15
c00247dc:	09 c1                	or     ecx,eax
c00247de:	89 d6                	mov    esi,edx
c00247e0:	89 d0                	mov    eax,edx
c00247e2:	c1 f8 14             	sar    eax,0x14
c00247e5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00247e8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00247eb:	89 c3                	mov    ebx,eax
c00247ed:	c1 e3 0b             	shl    ebx,0xb
c00247f0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00247f3:	c1 e6 0b             	shl    esi,0xb
c00247f6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00247fc:	c1 e8 15             	shr    eax,0x15
c00247ff:	09 c6                	or     esi,eax
c0024801:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024804:	25 ff 07 00 00       	and    eax,0x7ff
c0024809:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002480c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002480f:	25 ff 07 00 00       	and    eax,0x7ff
c0024814:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0024817:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002481a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002481d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0024824:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024827:	40                   	inc    eax
c0024828:	a9 fe 07 00 00       	test   eax,0x7fe
c002482d:	0f 85 8d 00 00 00    	jne    c00248c0 <__muldf3+0x120>
c0024833:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024836:	09 c8                	or     eax,ecx
c0024838:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c002483c:	74 44                	je     c0024882 <__muldf3+0xe2>
c002483e:	85 c0                	test   eax,eax
c0024840:	0f 85 31 02 00 00    	jne    c0024a77 <__muldf3+0x2d7>
c0024846:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024849:	40                   	inc    eax
c002484a:	a9 fe 07 00 00       	test   eax,0x7fe
c002484f:	75 13                	jne    c0024864 <__muldf3+0xc4>
c0024851:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024854:	09 f1                	or     ecx,esi
c0024856:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002485a:	74 22                	je     c002487e <__muldf3+0xde>
c002485c:	85 c9                	test   ecx,ecx
c002485e:	0f 85 0d 02 00 00    	jne    c0024a71 <__muldf3+0x2d1>
c0024864:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0024868:	0f 89 09 02 00 00    	jns    c0024a77 <__muldf3+0x2d7>
c002486e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024871:	05 00 00 00 80       	add    eax,0x80000000
c0024876:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024879:	e9 f9 01 00 00       	jmp    c0024a77 <__muldf3+0x2d7>
c002487e:	85 c9                	test   ecx,ecx
c0024880:	eb 2e                	jmp    c00248b0 <__muldf3+0x110>
c0024882:	85 c0                	test   eax,eax
c0024884:	74 20                	je     c00248a6 <__muldf3+0x106>
c0024886:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0024889:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002488c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002488f:	c1 ef 1f             	shr    edi,0x1f
c0024892:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0024895:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0024898:	8d 43 ff             	lea    eax,[ebx-0x1]
c002489b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002489e:	09 f9                	or     ecx,edi
c00248a0:	78 1e                	js     c00248c0 <__muldf3+0x120>
c00248a2:	89 c3                	mov    ebx,eax
c00248a4:	eb e0                	jmp    c0024886 <__muldf3+0xe6>
c00248a6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00248a9:	f7 d0                	not    eax
c00248ab:	a9 ff 07 00 00       	test   eax,0x7ff
c00248b0:	75 b2                	jne    c0024864 <__muldf3+0xc4>
c00248b2:	31 ff                	xor    edi,edi
c00248b4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00248bb:	e9 b7 01 00 00       	jmp    c0024a77 <__muldf3+0x2d7>
c00248c0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00248c3:	40                   	inc    eax
c00248c4:	a9 fe 07 00 00       	test   eax,0x7fe
c00248c9:	75 57                	jne    c0024922 <__muldf3+0x182>
c00248cb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00248ce:	09 f0                	or     eax,esi
c00248d0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00248d4:	74 23                	je     c00248f9 <__muldf3+0x159>
c00248d6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00248da:	0f 89 91 01 00 00    	jns    c0024a71 <__muldf3+0x2d1>
c00248e0:	85 c0                	test   eax,eax
c00248e2:	0f 85 89 01 00 00    	jne    c0024a71 <__muldf3+0x2d1>
c00248e8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00248eb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00248f1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00248f4:	e9 7e 01 00 00       	jmp    c0024a77 <__muldf3+0x2d7>
c00248f9:	85 c0                	test   eax,eax
c00248fb:	75 0c                	jne    c0024909 <__muldf3+0x169>
c00248fd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0024901:	0f 89 6a 01 00 00    	jns    c0024a71 <__muldf3+0x2d1>
c0024907:	eb df                	jmp    c00248e8 <__muldf3+0x148>
c0024909:	01 f6                	add    esi,esi
c002490b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002490e:	c1 ea 1f             	shr    edx,0x1f
c0024911:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024914:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0024917:	8d 43 ff             	lea    eax,[ebx-0x1]
c002491a:	09 d6                	or     esi,edx
c002491c:	78 04                	js     c0024922 <__muldf3+0x182>
c002491e:	89 c3                	mov    ebx,eax
c0024920:	eb e7                	jmp    c0024909 <__muldf3+0x169>
c0024922:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0024928:	81 ce 00 00 00 80    	or     esi,0x80000000
c002492e:	89 c8                	mov    eax,ecx
c0024930:	f7 e6                	mul    esi
c0024932:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0024935:	89 c7                	mov    edi,eax
c0024937:	89 c8                	mov    eax,ecx
c0024939:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c002493c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c002493f:	89 c1                	mov    ecx,eax
c0024941:	89 f0                	mov    eax,esi
c0024943:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0024946:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0024949:	89 c6                	mov    esi,eax
c002494b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002494e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0024951:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0024954:	31 c0                	xor    eax,eax
c0024956:	01 f1                	add    ecx,esi
c0024958:	0f 92 c0             	setb   al
c002495b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002495e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0024961:	83 d6 00             	adc    esi,0x0
c0024964:	01 c7                	add    edi,eax
c0024966:	83 d6 00             	adc    esi,0x0
c0024969:	01 ca                	add    edx,ecx
c002496b:	0f 92 c1             	setb   cl
c002496e:	0f b6 c9             	movzx  ecx,cl
c0024971:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0024974:	83 d6 00             	adc    esi,0x0
c0024977:	01 cf                	add    edi,ecx
c0024979:	83 d6 00             	adc    esi,0x0
c002497c:	31 c9                	xor    ecx,ecx
c002497e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0024981:	0f 95 c1             	setne  cl
c0024984:	09 cf                	or     edi,ecx
c0024986:	85 f6                	test   esi,esi
c0024988:	78 0c                	js     c0024996 <__muldf3+0x1f6>
c002498a:	01 f6                	add    esi,esi
c002498c:	89 f8                	mov    eax,edi
c002498e:	c1 e8 1f             	shr    eax,0x1f
c0024991:	09 c6                	or     esi,eax
c0024993:	01 ff                	add    edi,edi
c0024995:	4b                   	dec    ebx
c0024996:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c002499c:	0f 8f 85 00 00 00    	jg     c0024a27 <__muldf3+0x287>
c00249a2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00249a8:	85 db                	test   ebx,ebx
c00249aa:	0f 8f 84 00 00 00    	jg     c0024a34 <__muldf3+0x294>
c00249b0:	83 fb cc             	cmp    ebx,0xffffffcc
c00249b3:	7c 79                	jl     c0024a2e <__muldf3+0x28e>
c00249b5:	ba 01 00 00 00       	mov    edx,0x1
c00249ba:	29 da                	sub    edx,ebx
c00249bc:	81 ce 00 00 00 80    	or     esi,0x80000000
c00249c2:	83 fa 1f             	cmp    edx,0x1f
c00249c5:	7e 30                	jle    c00249f7 <__muldf3+0x257>
c00249c7:	83 fa 20             	cmp    edx,0x20
c00249ca:	75 0b                	jne    c00249d7 <__muldf3+0x237>
c00249cc:	31 c0                	xor    eax,eax
c00249ce:	85 ff                	test   edi,edi
c00249d0:	0f 95 c0             	setne  al
c00249d3:	89 c7                	mov    edi,eax
c00249d5:	eb 1a                	jmp    c00249f1 <__muldf3+0x251>
c00249d7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00249da:	89 f0                	mov    eax,esi
c00249dc:	d3 e0                	shl    eax,cl
c00249de:	09 f8                	or     eax,edi
c00249e0:	0f 95 c0             	setne  al
c00249e3:	0f b6 c0             	movzx  eax,al
c00249e6:	89 c7                	mov    edi,eax
c00249e8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00249ed:	29 d9                	sub    ecx,ebx
c00249ef:	d3 ee                	shr    esi,cl
c00249f1:	09 f7                	or     edi,esi
c00249f3:	31 db                	xor    ebx,ebx
c00249f5:	eb 3b                	jmp    c0024a32 <__muldf3+0x292>
c00249f7:	83 c3 1f             	add    ebx,0x1f
c00249fa:	89 f0                	mov    eax,esi
c00249fc:	88 d9                	mov    cl,bl
c00249fe:	d3 e0                	shl    eax,cl
c0024a00:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024a03:	89 f8                	mov    eax,edi
c0024a05:	88 d1                	mov    cl,dl
c0024a07:	d3 e8                	shr    eax,cl
c0024a09:	89 c1                	mov    ecx,eax
c0024a0b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024a0e:	09 c8                	or     eax,ecx
c0024a10:	88 d9                	mov    cl,bl
c0024a12:	d3 e7                	shl    edi,cl
c0024a14:	31 db                	xor    ebx,ebx
c0024a16:	85 ff                	test   edi,edi
c0024a18:	0f 95 c3             	setne  bl
c0024a1b:	89 df                	mov    edi,ebx
c0024a1d:	09 c7                	or     edi,eax
c0024a1f:	88 d1                	mov    cl,dl
c0024a21:	d3 ee                	shr    esi,cl
c0024a23:	31 db                	xor    ebx,ebx
c0024a25:	eb 0d                	jmp    c0024a34 <__muldf3+0x294>
c0024a27:	bb ff 07 00 00       	mov    ebx,0x7ff
c0024a2c:	eb 02                	jmp    c0024a30 <__muldf3+0x290>
c0024a2e:	31 db                	xor    ebx,ebx
c0024a30:	31 ff                	xor    edi,edi
c0024a32:	31 f6                	xor    esi,esi
c0024a34:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024a37:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0024a3a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0024a3f:	09 c3                	or     ebx,eax
c0024a41:	c1 e3 14             	shl    ebx,0x14
c0024a44:	89 f0                	mov    eax,esi
c0024a46:	c1 e8 0b             	shr    eax,0xb
c0024a49:	09 c3                	or     ebx,eax
c0024a4b:	89 f8                	mov    eax,edi
c0024a4d:	c1 e8 0b             	shr    eax,0xb
c0024a50:	c1 e6 15             	shl    esi,0x15
c0024a53:	09 c6                	or     esi,eax
c0024a55:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0024a5b:	0f 95 c1             	setne  cl
c0024a5e:	09 c8                	or     eax,ecx
c0024a60:	83 e0 01             	and    eax,0x1
c0024a63:	c1 ef 0a             	shr    edi,0xa
c0024a66:	21 c7                	and    edi,eax
c0024a68:	01 f7                	add    edi,esi
c0024a6a:	83 d3 00             	adc    ebx,0x0
c0024a6d:	89 da                	mov    edx,ebx
c0024a6f:	eb 03                	jmp    c0024a74 <__muldf3+0x2d4>
c0024a71:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0024a74:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0024a77:	89 f8                	mov    eax,edi
c0024a79:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024a7c:	83 c4 24             	add    esp,0x24
c0024a7f:	5b                   	pop    ebx
c0024a80:	5e                   	pop    esi
c0024a81:	5f                   	pop    edi
c0024a82:	5d                   	pop    ebp
c0024a83:	c3                   	ret    

c0024a84 <__divdf3>:
c0024a84:	55                   	push   ebp
c0024a85:	89 e5                	mov    ebp,esp
c0024a87:	57                   	push   edi
c0024a88:	56                   	push   esi
c0024a89:	53                   	push   ebx
c0024a8a:	83 ec 2c             	sub    esp,0x2c
c0024a8d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0024a90:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024a93:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024a96:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0024a99:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0024a9c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024a9f:	89 ce                	mov    esi,ecx
c0024aa1:	89 c8                	mov    eax,ecx
c0024aa3:	c1 f8 14             	sar    eax,0x14
c0024aa6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024aa9:	89 f8                	mov    eax,edi
c0024aab:	89 fb                	mov    ebx,edi
c0024aad:	c1 e3 0b             	shl    ebx,0xb
c0024ab0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0024ab3:	c1 e6 0b             	shl    esi,0xb
c0024ab6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0024abc:	c1 e8 15             	shr    eax,0x15
c0024abf:	09 c6                	or     esi,eax
c0024ac1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0024ac4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024ac7:	89 c2                	mov    edx,eax
c0024ac9:	c1 fa 14             	sar    edx,0x14
c0024acc:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0024acf:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0024ad2:	89 de                	mov    esi,ebx
c0024ad4:	c1 e6 0b             	shl    esi,0xb
c0024ad7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0024ada:	c1 e0 0b             	shl    eax,0xb
c0024add:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024ae2:	c1 eb 15             	shr    ebx,0x15
c0024ae5:	09 d8                	or     eax,ebx
c0024ae7:	89 c2                	mov    edx,eax
c0024ae9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024aec:	25 ff 07 00 00       	and    eax,0x7ff
c0024af1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0024af4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0024af7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024afd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0024b00:	29 d8                	sub    eax,ebx
c0024b02:	05 ff 03 00 00       	add    eax,0x3ff
c0024b07:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0024b0a:	46                   	inc    esi
c0024b0b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0024b11:	0f 85 a5 00 00 00    	jne    c0024bbc <__divdf3+0x138>
c0024b17:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0024b1a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0024b1d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0024b21:	74 2a                	je     c0024b4d <__divdf3+0xc9>
c0024b23:	85 f6                	test   esi,esi
c0024b25:	0f 85 cc 02 00 00    	jne    c0024df7 <__divdf3+0x373>
c0024b2b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024b2e:	40                   	inc    eax
c0024b2f:	a9 fe 07 00 00       	test   eax,0x7fe
c0024b34:	75 26                	jne    c0024b5c <__divdf3+0xd8>
c0024b36:	85 db                	test   ebx,ebx
c0024b38:	74 22                	je     c0024b5c <__divdf3+0xd8>
c0024b3a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024b3d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024b40:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024b43:	09 d0                	or     eax,edx
c0024b45:	0f 85 ac 02 00 00    	jne    c0024df7 <__divdf3+0x373>
c0024b4b:	eb 63                	jmp    c0024bb0 <__divdf3+0x12c>
c0024b4d:	85 f6                	test   esi,esi
c0024b4f:	75 22                	jne    c0024b73 <__divdf3+0xef>
c0024b51:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024b54:	40                   	inc    eax
c0024b55:	a9 fe 07 00 00       	test   eax,0x7fe
c0024b5a:	74 36                	je     c0024b92 <__divdf3+0x10e>
c0024b5c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0024b60:	0f 89 91 02 00 00    	jns    c0024df7 <__divdf3+0x373>
c0024b66:	89 f8                	mov    eax,edi
c0024b68:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0024b6e:	e9 80 02 00 00       	jmp    c0024df3 <__divdf3+0x36f>
c0024b73:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0024b76:	01 f6                	add    esi,esi
c0024b78:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0024b7b:	c1 ef 1f             	shr    edi,0x1f
c0024b7e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024b81:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0024b84:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024b87:	09 f7                	or     edi,esi
c0024b89:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0024b8c:	78 2e                	js     c0024bbc <__divdf3+0x138>
c0024b8e:	89 c8                	mov    eax,ecx
c0024b90:	eb e1                	jmp    c0024b73 <__divdf3+0xef>
c0024b92:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024b95:	09 d0                	or     eax,edx
c0024b97:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0024b9b:	74 0f                	je     c0024bac <__divdf3+0x128>
c0024b9d:	85 c0                	test   eax,eax
c0024b9f:	74 bb                	je     c0024b5c <__divdf3+0xd8>
c0024ba1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024ba4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024ba7:	e9 4b 02 00 00       	jmp    c0024df7 <__divdf3+0x373>
c0024bac:	85 c0                	test   eax,eax
c0024bae:	75 ac                	jne    c0024b5c <__divdf3+0xd8>
c0024bb0:	31 ff                	xor    edi,edi
c0024bb2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0024bb7:	e9 3b 02 00 00       	jmp    c0024df7 <__divdf3+0x373>
c0024bbc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024bbf:	8d 4f 01             	lea    ecx,[edi+0x1]
c0024bc2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0024bc8:	75 6b                	jne    c0024c35 <__divdf3+0x1b1>
c0024bca:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024bcd:	09 d6                	or     esi,edx
c0024bcf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0024bd3:	74 28                	je     c0024bfd <__divdf3+0x179>
c0024bd5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024bd8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024bdb:	85 f6                	test   esi,esi
c0024bdd:	0f 85 14 02 00 00    	jne    c0024df7 <__divdf3+0x373>
c0024be3:	31 ff                	xor    edi,edi
c0024be5:	31 c9                	xor    ecx,ecx
c0024be7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024bea:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0024bed:	0f 89 04 02 00 00    	jns    c0024df7 <__divdf3+0x373>
c0024bf3:	b9 00 00 00 80       	mov    ecx,0x80000000
c0024bf8:	e9 fa 01 00 00       	jmp    c0024df7 <__divdf3+0x373>
c0024bfd:	85 f6                	test   esi,esi
c0024bff:	75 1b                	jne    c0024c1c <__divdf3+0x198>
c0024c01:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024c04:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0024c07:	25 00 00 00 80       	and    eax,0x80000000
c0024c0c:	31 c9                	xor    ecx,ecx
c0024c0e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0024c13:	89 cf                	mov    edi,ecx
c0024c15:	89 c1                	mov    ecx,eax
c0024c17:	e9 db 01 00 00       	jmp    c0024df7 <__divdf3+0x373>
c0024c1c:	01 d2                	add    edx,edx
c0024c1e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0024c21:	c1 eb 1f             	shr    ebx,0x1f
c0024c24:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024c27:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0024c2a:	8d 48 01             	lea    ecx,[eax+0x1]
c0024c2d:	09 da                	or     edx,ebx
c0024c2f:	78 04                	js     c0024c35 <__divdf3+0x1b1>
c0024c31:	89 c8                	mov    eax,ecx
c0024c33:	eb e7                	jmp    c0024c1c <__divdf3+0x198>
c0024c35:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0024c38:	81 ce 00 00 00 80    	or     esi,0x80000000
c0024c3e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024c44:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0024c47:	39 d6                	cmp    esi,edx
c0024c49:	77 0d                	ja     c0024c58 <__divdf3+0x1d4>
c0024c4b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024c4e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0024c51:	72 1b                	jb     c0024c6e <__divdf3+0x1ea>
c0024c53:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0024c56:	75 16                	jne    c0024c6e <__divdf3+0x1ea>
c0024c58:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024c5b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0024c5e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0024c61:	83 de 00             	sbb    esi,0x0
c0024c64:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0024c67:	ba 01 00 00 00       	mov    edx,0x1
c0024c6c:	eb 02                	jmp    c0024c70 <__divdf3+0x1ec>
c0024c6e:	31 d2                	xor    edx,edx
c0024c70:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0024c77:	31 ff                	xor    edi,edi
c0024c79:	01 ff                	add    edi,edi
c0024c7b:	89 d1                	mov    ecx,edx
c0024c7d:	c1 e9 1f             	shr    ecx,0x1f
c0024c80:	09 cf                	or     edi,ecx
c0024c82:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0024c85:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0024c88:	89 da                	mov    edx,ebx
c0024c8a:	89 f3                	mov    ebx,esi
c0024c8c:	8d 34 36             	lea    esi,[esi+esi*1]
c0024c8f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024c92:	c1 e9 1f             	shr    ecx,0x1f
c0024c95:	09 ce                	or     esi,ecx
c0024c97:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024c9a:	01 c9                	add    ecx,ecx
c0024c9c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0024c9f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0024ca2:	85 db                	test   ebx,ebx
c0024ca4:	78 29                	js     c0024ccf <__divdf3+0x24b>
c0024ca6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0024ca9:	72 07                	jb     c0024cb2 <__divdf3+0x22e>
c0024cab:	75 3c                	jne    c0024ce9 <__divdf3+0x265>
c0024cad:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024cb0:	77 37                	ja     c0024ce9 <__divdf3+0x265>
c0024cb2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024cb5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0024cb8:	31 d2                	xor    edx,edx
c0024cba:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0024cbd:	0f 97 c2             	seta   dl
c0024cc0:	29 d6                	sub    esi,edx
c0024cc2:	89 d9                	mov    ecx,ebx
c0024cc4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0024cc7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0024cca:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024ccd:	eb 17                	jmp    c0024ce6 <__divdf3+0x262>
c0024ccf:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024cd2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024cd5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024cd8:	0f 97 c1             	seta   cl
c0024cdb:	0f b6 c9             	movzx  ecx,cl
c0024cde:	29 ce                	sub    esi,ecx
c0024ce0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0024ce3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0024ce6:	83 ca 01             	or     edx,0x1
c0024ce9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0024cec:	75 8b                	jne    c0024c79 <__divdf3+0x1f5>
c0024cee:	c1 e7 09             	shl    edi,0x9
c0024cf1:	89 d1                	mov    ecx,edx
c0024cf3:	c1 e9 17             	shr    ecx,0x17
c0024cf6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024cf9:	09 f3                	or     ebx,esi
c0024cfb:	0f 95 c3             	setne  bl
c0024cfe:	0f b6 db             	movzx  ebx,bl
c0024d01:	c1 e2 09             	shl    edx,0x9
c0024d04:	09 d3                	or     ebx,edx
c0024d06:	89 ca                	mov    edx,ecx
c0024d08:	09 fa                	or     edx,edi
c0024d0a:	78 0c                	js     c0024d18 <__divdf3+0x294>
c0024d0c:	01 d2                	add    edx,edx
c0024d0e:	89 d9                	mov    ecx,ebx
c0024d10:	c1 e9 1f             	shr    ecx,0x1f
c0024d13:	09 ca                	or     edx,ecx
c0024d15:	01 db                	add    ebx,ebx
c0024d17:	48                   	dec    eax
c0024d18:	3d fe 07 00 00       	cmp    eax,0x7fe
c0024d1d:	0f 8f 83 00 00 00    	jg     c0024da6 <__divdf3+0x322>
c0024d23:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024d29:	85 c0                	test   eax,eax
c0024d2b:	0f 8f 82 00 00 00    	jg     c0024db3 <__divdf3+0x32f>
c0024d31:	83 f8 cc             	cmp    eax,0xffffffcc
c0024d34:	7c 77                	jl     c0024dad <__divdf3+0x329>
c0024d36:	be 01 00 00 00       	mov    esi,0x1
c0024d3b:	29 c6                	sub    esi,eax
c0024d3d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024d43:	83 fe 1f             	cmp    esi,0x1f
c0024d46:	7e 2f                	jle    c0024d77 <__divdf3+0x2f3>
c0024d48:	83 fe 20             	cmp    esi,0x20
c0024d4b:	75 0a                	jne    c0024d57 <__divdf3+0x2d3>
c0024d4d:	85 db                	test   ebx,ebx
c0024d4f:	0f 95 c3             	setne  bl
c0024d52:	0f b6 db             	movzx  ebx,bl
c0024d55:	eb 1a                	jmp    c0024d71 <__divdf3+0x2ed>
c0024d57:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0024d5a:	89 d7                	mov    edi,edx
c0024d5c:	d3 e7                	shl    edi,cl
c0024d5e:	89 f9                	mov    ecx,edi
c0024d60:	09 d9                	or     ecx,ebx
c0024d62:	0f 95 c3             	setne  bl
c0024d65:	0f b6 db             	movzx  ebx,bl
c0024d68:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0024d6d:	29 c1                	sub    ecx,eax
c0024d6f:	d3 ea                	shr    edx,cl
c0024d71:	09 d3                	or     ebx,edx
c0024d73:	31 c0                	xor    eax,eax
c0024d75:	eb 3a                	jmp    c0024db1 <__divdf3+0x32d>
c0024d77:	83 c0 1f             	add    eax,0x1f
c0024d7a:	89 d7                	mov    edi,edx
c0024d7c:	88 c1                	mov    cl,al
c0024d7e:	d3 e7                	shl    edi,cl
c0024d80:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024d83:	89 df                	mov    edi,ebx
c0024d85:	89 f1                	mov    ecx,esi
c0024d87:	d3 ef                	shr    edi,cl
c0024d89:	89 f9                	mov    ecx,edi
c0024d8b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0024d8e:	09 cf                	or     edi,ecx
c0024d90:	88 c1                	mov    cl,al
c0024d92:	d3 e3                	shl    ebx,cl
c0024d94:	85 db                	test   ebx,ebx
c0024d96:	0f 95 c3             	setne  bl
c0024d99:	0f b6 db             	movzx  ebx,bl
c0024d9c:	09 fb                	or     ebx,edi
c0024d9e:	89 f1                	mov    ecx,esi
c0024da0:	d3 ea                	shr    edx,cl
c0024da2:	31 c0                	xor    eax,eax
c0024da4:	eb 0d                	jmp    c0024db3 <__divdf3+0x32f>
c0024da6:	b8 ff 07 00 00       	mov    eax,0x7ff
c0024dab:	eb 02                	jmp    c0024daf <__divdf3+0x32b>
c0024dad:	31 c0                	xor    eax,eax
c0024daf:	31 db                	xor    ebx,ebx
c0024db1:	31 d2                	xor    edx,edx
c0024db3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0024db6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0024db9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0024dbf:	09 c8                	or     eax,ecx
c0024dc1:	c1 e0 14             	shl    eax,0x14
c0024dc4:	89 d1                	mov    ecx,edx
c0024dc6:	c1 e9 0b             	shr    ecx,0xb
c0024dc9:	09 c8                	or     eax,ecx
c0024dcb:	89 c6                	mov    esi,eax
c0024dcd:	89 d9                	mov    ecx,ebx
c0024dcf:	c1 e9 0b             	shr    ecx,0xb
c0024dd2:	c1 e2 15             	shl    edx,0x15
c0024dd5:	09 ca                	or     edx,ecx
c0024dd7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0024ddd:	0f 95 c0             	setne  al
c0024de0:	09 c1                	or     ecx,eax
c0024de2:	83 e1 01             	and    ecx,0x1
c0024de5:	c1 eb 0a             	shr    ebx,0xa
c0024de8:	21 cb                	and    ebx,ecx
c0024dea:	01 d3                	add    ebx,edx
c0024dec:	89 d8                	mov    eax,ebx
c0024dee:	83 d6 00             	adc    esi,0x0
c0024df1:	89 f2                	mov    edx,esi
c0024df3:	89 c7                	mov    edi,eax
c0024df5:	89 d1                	mov    ecx,edx
c0024df7:	89 f8                	mov    eax,edi
c0024df9:	89 ca                	mov    edx,ecx
c0024dfb:	83 c4 2c             	add    esp,0x2c
c0024dfe:	5b                   	pop    ebx
c0024dff:	5e                   	pop    esi
c0024e00:	5f                   	pop    edi
c0024e01:	5d                   	pop    ebp
c0024e02:	c3                   	ret    

c0024e03 <__floatsidf>:
c0024e03:	55                   	push   ebp
c0024e04:	89 e5                	mov    ebp,esp
c0024e06:	56                   	push   esi
c0024e07:	53                   	push   ebx
c0024e08:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024e0b:	85 db                	test   ebx,ebx
c0024e0d:	7e 15                	jle    c0024e24 <__floatsidf+0x21>
c0024e0f:	0f bd cb             	bsr    ecx,ebx
c0024e12:	83 f1 1f             	xor    ecx,0x1f
c0024e15:	d3 e3                	shl    ebx,cl
c0024e17:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024e1d:	b8 1e 04 00 00       	mov    eax,0x41e
c0024e22:	eb 21                	jmp    c0024e45 <__floatsidf+0x42>
c0024e24:	b8 00 00 00 00       	mov    eax,0x0
c0024e29:	ba 00 00 00 00       	mov    edx,0x0
c0024e2e:	74 2a                	je     c0024e5a <__floatsidf+0x57>
c0024e30:	f7 db                	neg    ebx
c0024e32:	0f bd cb             	bsr    ecx,ebx
c0024e35:	83 f1 1f             	xor    ecx,0x1f
c0024e38:	d3 e3                	shl    ebx,cl
c0024e3a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024e40:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0024e45:	29 c8                	sub    eax,ecx
c0024e47:	c1 e0 14             	shl    eax,0x14
c0024e4a:	89 c1                	mov    ecx,eax
c0024e4c:	89 de                	mov    esi,ebx
c0024e4e:	c1 ee 0b             	shr    esi,0xb
c0024e51:	09 f1                	or     ecx,esi
c0024e53:	89 ca                	mov    edx,ecx
c0024e55:	c1 e3 15             	shl    ebx,0x15
c0024e58:	89 d8                	mov    eax,ebx
c0024e5a:	5b                   	pop    ebx
c0024e5b:	5e                   	pop    esi
c0024e5c:	5d                   	pop    ebp
c0024e5d:	c3                   	ret    

c0024e5e <__floatunsidf>:
c0024e5e:	55                   	push   ebp
c0024e5f:	89 e5                	mov    ebp,esp
c0024e61:	56                   	push   esi
c0024e62:	53                   	push   ebx
c0024e63:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024e66:	85 db                	test   ebx,ebx
c0024e68:	74 2a                	je     c0024e94 <__floatunsidf+0x36>
c0024e6a:	0f bd cb             	bsr    ecx,ebx
c0024e6d:	83 f1 1f             	xor    ecx,0x1f
c0024e70:	d3 e3                	shl    ebx,cl
c0024e72:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024e78:	b8 1e 04 00 00       	mov    eax,0x41e
c0024e7d:	29 c8                	sub    eax,ecx
c0024e7f:	c1 e0 14             	shl    eax,0x14
c0024e82:	89 c1                	mov    ecx,eax
c0024e84:	89 de                	mov    esi,ebx
c0024e86:	c1 ee 0b             	shr    esi,0xb
c0024e89:	09 f1                	or     ecx,esi
c0024e8b:	89 ca                	mov    edx,ecx
c0024e8d:	c1 e3 15             	shl    ebx,0x15
c0024e90:	89 d8                	mov    eax,ebx
c0024e92:	eb 04                	jmp    c0024e98 <__floatunsidf+0x3a>
c0024e94:	31 c0                	xor    eax,eax
c0024e96:	31 d2                	xor    edx,edx
c0024e98:	5b                   	pop    ebx
c0024e99:	5e                   	pop    esi
c0024e9a:	5d                   	pop    ebp
c0024e9b:	c3                   	ret    

c0024e9c <__fixdfsi>:
c0024e9c:	55                   	push   ebp
c0024e9d:	89 e5                	mov    ebp,esp
c0024e9f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024ea2:	89 d1                	mov    ecx,edx
c0024ea4:	c1 e1 0b             	shl    ecx,0xb
c0024ea7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024ead:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024eb0:	c1 e8 15             	shr    eax,0x15
c0024eb3:	09 c1                	or     ecx,eax
c0024eb5:	c1 fa 14             	sar    edx,0x14
c0024eb8:	78 1f                	js     c0024ed9 <__fixdfsi+0x3d>
c0024eba:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0024ec0:	31 c0                	xor    eax,eax
c0024ec2:	83 fa 1e             	cmp    edx,0x1e
c0024ec5:	77 40                	ja     c0024f07 <__fixdfsi+0x6b>
c0024ec7:	89 c8                	mov    eax,ecx
c0024ec9:	0d 00 00 00 80       	or     eax,0x80000000
c0024ece:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024ed3:	29 d1                	sub    ecx,edx
c0024ed5:	d3 e8                	shr    eax,cl
c0024ed7:	eb 2e                	jmp    c0024f07 <__fixdfsi+0x6b>
c0024ed9:	31 c0                	xor    eax,eax
c0024edb:	81 c2 01 04 00 00    	add    edx,0x401
c0024ee1:	78 24                	js     c0024f07 <__fixdfsi+0x6b>
c0024ee3:	83 fa 1e             	cmp    edx,0x1e
c0024ee6:	7e 09                	jle    c0024ef1 <__fixdfsi+0x55>
c0024ee8:	83 fa 1f             	cmp    edx,0x1f
c0024eeb:	75 18                	jne    c0024f05 <__fixdfsi+0x69>
c0024eed:	85 c9                	test   ecx,ecx
c0024eef:	75 14                	jne    c0024f05 <__fixdfsi+0x69>
c0024ef1:	89 c8                	mov    eax,ecx
c0024ef3:	0d 00 00 00 80       	or     eax,0x80000000
c0024ef8:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024efd:	29 d1                	sub    ecx,edx
c0024eff:	d3 e8                	shr    eax,cl
c0024f01:	f7 d8                	neg    eax
c0024f03:	eb 02                	jmp    c0024f07 <__fixdfsi+0x6b>
c0024f05:	31 c0                	xor    eax,eax
c0024f07:	5d                   	pop    ebp
c0024f08:	c3                   	ret    

c0024f09 <__fixunsdfsi>:
c0024f09:	55                   	push   ebp
c0024f0a:	89 e5                	mov    ebp,esp
c0024f0c:	53                   	push   ebx
c0024f0d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024f10:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024f13:	89 d3                	mov    ebx,edx
c0024f15:	c1 fb 14             	sar    ebx,0x14
c0024f18:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0024f1e:	31 c0                	xor    eax,eax
c0024f20:	83 fb 1f             	cmp    ebx,0x1f
c0024f23:	77 1d                	ja     c0024f42 <__fixunsdfsi+0x39>
c0024f25:	89 d0                	mov    eax,edx
c0024f27:	c1 e0 0b             	shl    eax,0xb
c0024f2a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024f2f:	c1 e9 15             	shr    ecx,0x15
c0024f32:	09 c8                	or     eax,ecx
c0024f34:	0d 00 00 00 80       	or     eax,0x80000000
c0024f39:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024f3e:	29 d9                	sub    ecx,ebx
c0024f40:	d3 e8                	shr    eax,cl
c0024f42:	5b                   	pop    ebx
c0024f43:	5d                   	pop    ebp
c0024f44:	c3                   	ret    

c0024f45 <__cmpdf2>:
c0024f45:	55                   	push   ebp
c0024f46:	89 e5                	mov    ebp,esp
c0024f48:	57                   	push   edi
c0024f49:	56                   	push   esi
c0024f4a:	53                   	push   ebx
c0024f4b:	83 ec 0c             	sub    esp,0xc
c0024f4e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0024f51:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024f54:	89 ca                	mov    edx,ecx
c0024f56:	c1 ea 14             	shr    edx,0x14
c0024f59:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0024f5f:	89 cb                	mov    ebx,ecx
c0024f61:	c1 fb 1f             	sar    ebx,0x1f
c0024f64:	31 da                	xor    edx,ebx
c0024f66:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024f69:	89 df                	mov    edi,ebx
c0024f6b:	c1 e7 0b             	shl    edi,0xb
c0024f6e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024f71:	c1 e1 0b             	shl    ecx,0xb
c0024f74:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024f7a:	c1 eb 15             	shr    ebx,0x15
c0024f7d:	09 d9                	or     ecx,ebx
c0024f7f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0024f82:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0024f85:	89 ce                	mov    esi,ecx
c0024f87:	c1 ee 14             	shr    esi,0x14
c0024f8a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0024f90:	89 cb                	mov    ebx,ecx
c0024f92:	c1 fb 1f             	sar    ebx,0x1f
c0024f95:	31 de                	xor    esi,ebx
c0024f97:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0024f9a:	89 df                	mov    edi,ebx
c0024f9c:	c1 e7 0b             	shl    edi,0xb
c0024f9f:	c1 e1 0b             	shl    ecx,0xb
c0024fa2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024fa8:	c1 eb 15             	shr    ebx,0x15
c0024fab:	09 d9                	or     ecx,ebx
c0024fad:	89 d3                	mov    ebx,edx
c0024faf:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0024fb5:	43                   	inc    ebx
c0024fb6:	83 fb 01             	cmp    ebx,0x1
c0024fb9:	77 08                	ja     c0024fc3 <__cmpdf2+0x7e>
c0024fbb:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024fbe:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0024fc1:	75 68                	jne    c002502b <__cmpdf2+0xe6>
c0024fc3:	89 f3                	mov    ebx,esi
c0024fc5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0024fcb:	43                   	inc    ebx
c0024fcc:	83 fb 01             	cmp    ebx,0x1
c0024fcf:	77 06                	ja     c0024fd7 <__cmpdf2+0x92>
c0024fd1:	89 fb                	mov    ebx,edi
c0024fd3:	09 cb                	or     ebx,ecx
c0024fd5:	75 54                	jne    c002502b <__cmpdf2+0xe6>
c0024fd7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024fda:	09 f8                	or     eax,edi
c0024fdc:	09 c8                	or     eax,ecx
c0024fde:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0024fe1:	75 12                	jne    c0024ff5 <__cmpdf2+0xb0>
c0024fe3:	8d 42 01             	lea    eax,[edx+0x1]
c0024fe6:	83 f8 01             	cmp    eax,0x1
c0024fe9:	77 0a                	ja     c0024ff5 <__cmpdf2+0xb0>
c0024feb:	8d 5e 01             	lea    ebx,[esi+0x1]
c0024fee:	31 c0                	xor    eax,eax
c0024ff0:	83 fb 01             	cmp    ebx,0x1
c0024ff3:	76 36                	jbe    c002502b <__cmpdf2+0xe6>
c0024ff5:	b8 01 00 00 00       	mov    eax,0x1
c0024ffa:	39 f2                	cmp    edx,esi
c0024ffc:	7f 2d                	jg     c002502b <__cmpdf2+0xe6>
c0024ffe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025003:	7c 26                	jl     c002502b <__cmpdf2+0xe6>
c0025005:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0025008:	77 07                	ja     c0025011 <__cmpdf2+0xcc>
c002500a:	72 16                	jb     c0025022 <__cmpdf2+0xdd>
c002500c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002500f:	76 0a                	jbe    c002501b <__cmpdf2+0xd6>
c0025011:	89 d0                	mov    eax,edx
c0025013:	c1 f8 1f             	sar    eax,0x1f
c0025016:	83 c8 01             	or     eax,0x1
c0025019:	eb 10                	jmp    c002502b <__cmpdf2+0xe6>
c002501b:	b8 00 00 00 00       	mov    eax,0x0
c0025020:	73 09                	jae    c002502b <__cmpdf2+0xe6>
c0025022:	89 d0                	mov    eax,edx
c0025024:	c1 f8 1f             	sar    eax,0x1f
c0025027:	83 e0 02             	and    eax,0x2
c002502a:	48                   	dec    eax
c002502b:	83 c4 0c             	add    esp,0xc
c002502e:	5b                   	pop    ebx
c002502f:	5e                   	pop    esi
c0025030:	5f                   	pop    edi
c0025031:	5d                   	pop    ebp
c0025032:	c3                   	ret    

c0025033 <__eqdf2>:
c0025033:	55                   	push   ebp
c0025034:	89 e5                	mov    ebp,esp
c0025036:	50                   	push   eax
c0025037:	6a 01                	push   0x1
c0025039:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002503c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002503f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025042:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025045:	e8 fb fe ff ff       	call   c0024f45 <__cmpdf2>
c002504a:	83 c4 18             	add    esp,0x18
c002504d:	c9                   	leave  
c002504e:	c3                   	ret    

c002504f <__nedf2>:
c002504f:	eb e2                	jmp    c0025033 <__eqdf2>

c0025051 <__gtdf2>:
c0025051:	55                   	push   ebp
c0025052:	89 e5                	mov    ebp,esp
c0025054:	50                   	push   eax
c0025055:	6a ff                	push   0xffffffff
c0025057:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002505a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002505d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025060:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025063:	e8 dd fe ff ff       	call   c0024f45 <__cmpdf2>
c0025068:	83 c4 18             	add    esp,0x18
c002506b:	c9                   	leave  
c002506c:	c3                   	ret    

c002506d <__gedf2>:
c002506d:	eb e2                	jmp    c0025051 <__gtdf2>

c002506f <__ltdf2>:
c002506f:	eb c2                	jmp    c0025033 <__eqdf2>

c0025071 <__ledf2>:
c0025071:	eb c0                	jmp    c0025033 <__eqdf2>

c0025073 <__truncdfsf2>:
c0025073:	55                   	push   ebp
c0025074:	89 e5                	mov    ebp,esp
c0025076:	57                   	push   edi
c0025077:	56                   	push   esi
c0025078:	53                   	push   ebx
c0025079:	83 ec 0c             	sub    esp,0xc
c002507c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002507f:	89 d1                	mov    ecx,edx
c0025081:	c1 f9 14             	sar    ecx,0x14
c0025084:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025087:	89 df                	mov    edi,ebx
c0025089:	c1 e7 0b             	shl    edi,0xb
c002508c:	89 d0                	mov    eax,edx
c002508e:	c1 e0 0b             	shl    eax,0xb
c0025091:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0025096:	c1 eb 15             	shr    ebx,0x15
c0025099:	09 d8                	or     eax,ebx
c002509b:	89 cb                	mov    ebx,ecx
c002509d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00250a3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00250a9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00250af:	0f 86 9e 00 00 00    	jbe    c0025153 <__truncdfsf2+0xe0>
c00250b5:	85 db                	test   ebx,ebx
c00250b7:	75 0a                	jne    c00250c3 <__truncdfsf2+0x50>
c00250b9:	c1 fa 17             	sar    edx,0x17
c00250bc:	30 d2                	xor    dl,dl
c00250be:	e9 84 00 00 00       	jmp    c0025147 <__truncdfsf2+0xd4>
c00250c3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00250c9:	83 fe 83             	cmp    esi,0xffffff83
c00250cc:	7d 4b                	jge    c0025119 <__truncdfsf2+0xa6>
c00250ce:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00250d3:	29 f1                	sub    ecx,esi
c00250d5:	83 f9 1f             	cmp    ecx,0x1f
c00250d8:	7f 6b                	jg     c0025145 <__truncdfsf2+0xd2>
c00250da:	0d 00 00 00 80       	or     eax,0x80000000
c00250df:	89 c3                	mov    ebx,eax
c00250e1:	d3 eb                	shr    ebx,cl
c00250e3:	be 01 00 00 00       	mov    esi,0x1
c00250e8:	d3 e6                	shl    esi,cl
c00250ea:	4e                   	dec    esi
c00250eb:	21 f0                	and    eax,esi
c00250ed:	09 f8                	or     eax,edi
c00250ef:	0f 95 c0             	setne  al
c00250f2:	0f b6 c0             	movzx  eax,al
c00250f5:	09 c3                	or     ebx,eax
c00250f7:	89 d9                	mov    ecx,ebx
c00250f9:	c1 e9 08             	shr    ecx,0x8
c00250fc:	f6 c3 7f             	test   bl,0x7f
c00250ff:	0f 95 c0             	setne  al
c0025102:	09 c8                	or     eax,ecx
c0025104:	83 e0 01             	and    eax,0x1
c0025107:	c1 eb 07             	shr    ebx,0x7
c002510a:	21 c3                	and    ebx,eax
c002510c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0025112:	09 d1                	or     ecx,edx
c0025114:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0025117:	eb 76                	jmp    c002518f <__truncdfsf2+0x11c>
c0025119:	83 c6 80             	add    esi,0xffffff80
c002511c:	7e 1d                	jle    c002513b <__truncdfsf2+0xc8>
c002511e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0025124:	75 0b                	jne    c0025131 <__truncdfsf2+0xbe>
c0025126:	09 f8                	or     eax,edi
c0025128:	74 09                	je     c0025133 <__truncdfsf2+0xc0>
c002512a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002512f:	eb 02                	jmp    c0025133 <__truncdfsf2+0xc0>
c0025131:	31 c0                	xor    eax,eax
c0025133:	c1 fa 17             	sar    edx,0x17
c0025136:	80 ca ff             	or     dl,0xff
c0025139:	eb 0e                	jmp    c0025149 <__truncdfsf2+0xd6>
c002513b:	c1 fa 1f             	sar    edx,0x1f
c002513e:	c1 e2 08             	shl    edx,0x8
c0025141:	09 ca                	or     edx,ecx
c0025143:	eb 04                	jmp    c0025149 <__truncdfsf2+0xd6>
c0025145:	31 d2                	xor    edx,edx
c0025147:	31 c0                	xor    eax,eax
c0025149:	c1 e2 17             	shl    edx,0x17
c002514c:	c1 e8 08             	shr    eax,0x8
c002514f:	09 d0                	or     eax,edx
c0025151:	eb 3c                	jmp    c002518f <__truncdfsf2+0x11c>
c0025153:	81 e9 80 03 00 00    	sub    ecx,0x380
c0025159:	89 ca                	mov    edx,ecx
c002515b:	c1 fa 0b             	sar    edx,0xb
c002515e:	c1 e2 08             	shl    edx,0x8
c0025161:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0025164:	31 db                	xor    ebx,ebx
c0025166:	85 ff                	test   edi,edi
c0025168:	0f 95 c3             	setne  bl
c002516b:	09 d8                	or     eax,ebx
c002516d:	89 c3                	mov    ebx,eax
c002516f:	c1 eb 08             	shr    ebx,0x8
c0025172:	a8 7f                	test   al,0x7f
c0025174:	0f 95 c2             	setne  dl
c0025177:	89 d6                	mov    esi,edx
c0025179:	09 de                	or     esi,ebx
c002517b:	83 e6 01             	and    esi,0x1
c002517e:	c1 e8 07             	shr    eax,0x7
c0025181:	21 f0                	and    eax,esi
c0025183:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025186:	09 ca                	or     edx,ecx
c0025188:	c1 e2 17             	shl    edx,0x17
c002518b:	09 da                	or     edx,ebx
c002518d:	01 d0                	add    eax,edx
c002518f:	83 c4 0c             	add    esp,0xc
c0025192:	5b                   	pop    ebx
c0025193:	5e                   	pop    esi
c0025194:	5f                   	pop    edi
c0025195:	5d                   	pop    ebp
c0025196:	c3                   	ret    

c0025197 <__extendsfdf2>:
c0025197:	55                   	push   ebp
c0025198:	89 e5                	mov    ebp,esp
c002519a:	57                   	push   edi
c002519b:	56                   	push   esi
c002519c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002519f:	89 d1                	mov    ecx,edx
c00251a1:	c1 f9 17             	sar    ecx,0x17
c00251a4:	c1 e2 08             	shl    edx,0x8
c00251a7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00251ad:	89 c8                	mov    eax,ecx
c00251af:	80 e4 f8             	and    ah,0xf8
c00251b2:	8d 71 01             	lea    esi,[ecx+0x1]
c00251b5:	81 e6 fe 00 00 00    	and    esi,0xfe
c00251bb:	75 27                	jne    c00251e4 <__extendsfdf2+0x4d>
c00251bd:	81 e1 ff 00 00 00    	and    ecx,0xff
c00251c3:	75 18                	jne    c00251dd <__extendsfdf2+0x46>
c00251c5:	85 d2                	test   edx,edx
c00251c7:	74 20                	je     c00251e9 <__extendsfdf2+0x52>
c00251c9:	41                   	inc    ecx
c00251ca:	01 d2                	add    edx,edx
c00251cc:	79 fb                	jns    c00251c9 <__extendsfdf2+0x32>
c00251ce:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00251d4:	29 c8                	sub    eax,ecx
c00251d6:	05 81 03 00 00       	add    eax,0x381
c00251db:	eb 0c                	jmp    c00251e9 <__extendsfdf2+0x52>
c00251dd:	05 00 07 00 00       	add    eax,0x700
c00251e2:	eb 05                	jmp    c00251e9 <__extendsfdf2+0x52>
c00251e4:	05 80 03 00 00       	add    eax,0x380
c00251e9:	c1 e0 14             	shl    eax,0x14
c00251ec:	89 c1                	mov    ecx,eax
c00251ee:	89 d0                	mov    eax,edx
c00251f0:	c1 e8 0b             	shr    eax,0xb
c00251f3:	09 c1                	or     ecx,eax
c00251f5:	c1 e2 15             	shl    edx,0x15
c00251f8:	89 d0                	mov    eax,edx
c00251fa:	89 ca                	mov    edx,ecx
c00251fc:	5e                   	pop    esi
c00251fd:	5f                   	pop    edi
c00251fe:	5d                   	pop    ebp
c00251ff:	c3                   	ret    

c0025200 <fabs>:
c0025200:	83 ec 0c             	sub    esp,0xc
c0025203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025207:	89 04 24             	mov    DWORD PTR [esp],eax
c002520a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002520e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025213:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0025217:	dd 04 24             	fld    QWORD PTR [esp]
c002521a:	83 c4 0c             	add    esp,0xc
c002521d:	c3                   	ret    
c002521e:	66 90                	xchg   ax,ax

c0025220 <lrint>:
c0025220:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0025224:	83 ec 04             	sub    esp,0x4
c0025227:	db 1c 24             	fistp  DWORD PTR [esp]
c002522a:	58                   	pop    eax
c002522b:	c3                   	ret    

c002522c <lrintf>:
c002522c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0025230:	83 ec 04             	sub    esp,0x4
c0025233:	db 1c 24             	fistp  DWORD PTR [esp]
c0025236:	58                   	pop    eax
c0025237:	c3                   	ret    

Disassembly of section .init:

c0025238 <_init>:
c0025238:	55                   	push   ebp
c0025239:	89 e5                	mov    ebp,esp
c002523b:	e8 d8 ae fd ff       	call   c0000118 <frame_dummy>
c0025240:	e8 63 e0 ff ff       	call   c00232a8 <__do_global_ctors_aux>
c0025245:	5d                   	pop    ebp
c0025246:	c3                   	ret    

Disassembly of section .fini:

c0025247 <_fini>:
c0025247:	55                   	push   ebp
c0025248:	89 e5                	mov    ebp,esp
c002524a:	e8 59 ae fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002524f:	5d                   	pop    ebp
c0025250:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0025252 <Computer::~Computer()>:
c0025252:	83 ec 0c             	sub    esp,0xc
c0025255:	ba 30 6d 02 c0       	mov    edx,0xc0026d30
c002525a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002525e:	89 10                	mov    DWORD PTR [eax],edx
c0025260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025264:	83 ec 0c             	sub    esp,0xc
c0025267:	50                   	push   eax
c0025268:	e8 b7 e2 fe ff       	call   c0013524 <Device::~Device()>
c002526d:	83 c4 10             	add    esp,0x10
c0025270:	90                   	nop
c0025271:	83 c4 0c             	add    esp,0xc
c0025274:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0025276 <Computer::~Computer()>:
c0025276:	83 ec 0c             	sub    esp,0xc
c0025279:	83 ec 0c             	sub    esp,0xc
c002527c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025280:	e8 cd ff ff ff       	call   c0025252 <Computer::~Computer()>
c0025285:	83 c4 10             	add    esp,0x10
c0025288:	83 ec 08             	sub    esp,0x8
c002528b:	68 ec 01 00 00       	push   0x1ec
c0025290:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025294:	e8 fe ce fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0025299:	83 c4 10             	add    esp,0x10
c002529c:	83 c4 0c             	add    esp,0xc
c002529f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00252a0 <idleCommon()>:
c00252a0:	83 ec 0c             	sub    esp,0xc
c00252a3:	e8 b2 67 ff ff       	call   c001ba5a <lockScheduler()>
c00252a8:	e8 e1 6a ff ff       	call   c001bd8e <schedule()>
c00252ad:	83 c4 0c             	add    esp,0xc
c00252b0:	e9 a7 67 ff ff       	jmp    c001ba5c <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c00252b5 <CPU::readCR3()>:
c00252b5:	83 ec 10             	sub    esp,0x10
c00252b8:	0f 20 d8             	mov    eax,cr3
c00252bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00252bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00252c3:	83 c4 10             	add    esp,0x10
c00252c6:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c00252c7 <CPU::writeCR3(unsigned long)>:
c00252c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00252cb:	0f 22 d8             	mov    cr3,eax
c00252ce:	90                   	nop
c00252cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00252d0 <LinkedList<UnixFile>::~LinkedList()>:
c00252d0:	90                   	nop
c00252d1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00252d2 <LinkedList<UnixFile>::LinkedList()>:
c00252d2:	83 ec 0c             	sub    esp,0xc
c00252d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00252df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00252ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252ee:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00252f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00252ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025303:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002530a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002530e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025315:	83 ec 0c             	sub    esp,0xc
c0025318:	68 a6 6f 02 c0       	push   0xc0026fa6
c002531d:	e8 55 cf fe ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0025322:	83 c4 10             	add    esp,0x10
c0025325:	90                   	nop
c0025326:	83 c4 0c             	add    esp,0xc
c0025329:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002532a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002532a:	83 ec 0c             	sub    esp,0xc
c002532d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0025332:	75 10                	jne    c0025344 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0025334:	83 ec 0c             	sub    esp,0xc
c0025337:	68 c0 6f 02 c0       	push   0xc0026fc0
c002533c:	e8 c6 37 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c0025341:	83 c4 10             	add    esp,0x10
c0025344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025348:	8b 00                	mov    eax,DWORD PTR [eax]
c002534a:	85 c0                	test   eax,eax
c002534c:	74 34                	je     c0025382 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002534e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025352:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025355:	85 c0                	test   eax,eax
c0025357:	74 29                	je     c0025382 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0025359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002535d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025360:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025364:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002536b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002536f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025376:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025379:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025380:	eb 65                	jmp    c00253e7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025386:	8b 00                	mov    eax,DWORD PTR [eax]
c0025388:	85 c0                	test   eax,eax
c002538a:	75 4b                	jne    c00253d7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002538c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025390:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025393:	85 c0                	test   eax,eax
c0025395:	75 40                	jne    c00253d7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0025397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002539b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002539f:	89 10                	mov    DWORD PTR [eax],edx
c00253a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00253a9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00253ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00253b3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00253ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253be:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00253c1:	85 c0                	test   eax,eax
c00253c3:	74 22                	je     c00253e7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00253c5:	83 ec 0c             	sub    esp,0xc
c00253c8:	68 e2 6f 02 c0       	push   0xc0026fe2
c00253cd:	e8 35 37 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c00253d2:	83 c4 10             	add    esp,0x10
c00253d5:	eb 10                	jmp    c00253e7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00253d7:	83 ec 0c             	sub    esp,0xc
c00253da:	68 ec 6f 02 c0       	push   0xc0026fec
c00253df:	e8 23 37 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c00253e4:	83 c4 10             	add    esp,0x10
c00253e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00253ee:	8d 50 01             	lea    edx,[eax+0x1]
c00253f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253f5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00253f8:	90                   	nop
c00253f9:	83 c4 0c             	add    esp,0xc
c00253fc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00253fe <LinkedList<UnixFile>::getFirstElement()>:
c00253fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025402:	8b 00                	mov    eax,DWORD PTR [eax]
c0025404:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0025406 <LinkedList<UnixFile>::removeFirst()>:
c0025406:	83 ec 0c             	sub    esp,0xc
c0025409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002540d:	8b 00                	mov    eax,DWORD PTR [eax]
c002540f:	85 c0                	test   eax,eax
c0025411:	75 12                	jne    c0025425 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0025413:	83 ec 0c             	sub    esp,0xc
c0025416:	68 f8 6f 02 c0       	push   0xc0026ff8
c002541b:	e8 e7 36 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c0025420:	83 c4 10             	add    esp,0x10
c0025423:	eb 7e                	jmp    c00254a3 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0025425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025429:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002542c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002542f:	85 c0                	test   eax,eax
c0025431:	74 10                	je     c0025443 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0025433:	83 ec 0c             	sub    esp,0xc
c0025436:	68 43 70 02 c0       	push   0xc0027043
c002543b:	e8 c7 36 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c0025440:	83 c4 10             	add    esp,0x10
c0025443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025447:	8b 00                	mov    eax,DWORD PTR [eax]
c0025449:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002544c:	85 c0                	test   eax,eax
c002544e:	75 33                	jne    c0025483 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0025450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025454:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002545a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002545e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025469:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002546c:	83 f8 01             	cmp    eax,0x1
c002546f:	74 21                	je     c0025492 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025471:	83 ec 0c             	sub    esp,0xc
c0025474:	68 1c 70 02 c0       	push   0xc002701c
c0025479:	e8 89 36 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c002547e:	83 c4 10             	add    esp,0x10
c0025481:	eb 0f                	jmp    c0025492 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025487:	8b 00                	mov    eax,DWORD PTR [eax]
c0025489:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002548c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025490:	89 10                	mov    DWORD PTR [eax],edx
c0025492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025496:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025499:	8d 50 ff             	lea    edx,[eax-0x1]
c002549c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254a0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00254a3:	83 c4 0c             	add    esp,0xc
c00254a6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00254a8 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00254a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00254ac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00254af:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00254b0 <DriverlessDevice::~DriverlessDevice()>:
c00254b0:	ba c4 76 02 c0       	mov    edx,0xc00276c4
c00254b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00254b9:	89 10                	mov    DWORD PTR [eax],edx
c00254bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00254bf:	50                   	push   eax
c00254c0:	e8 5f e0 fe ff       	call   c0013524 <Device::~Device()>
c00254c5:	83 c4 04             	add    esp,0x4
c00254c8:	90                   	nop
c00254c9:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00254ca <DriverlessDevice::~DriverlessDevice()>:
c00254ca:	83 ec 0c             	sub    esp,0xc
c00254cd:	83 ec 0c             	sub    esp,0xc
c00254d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00254d4:	e8 d7 ff ff ff       	call   c00254b0 <DriverlessDevice::~DriverlessDevice()>
c00254d9:	83 c4 10             	add    esp,0x10
c00254dc:	83 ec 08             	sub    esp,0x8
c00254df:	68 58 01 00 00       	push   0x158
c00254e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00254e8:	e8 aa cc fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c00254ed:	83 c4 10             	add    esp,0x10
c00254f0:	83 c4 0c             	add    esp,0xc
c00254f3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00254f4 <LinkedList<Device>::addElement(Device*)>:
c00254f4:	83 ec 0c             	sub    esp,0xc
c00254f7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00254fc:	75 10                	jne    c002550e <LinkedList<Device>::addElement(Device*)+0x1a>
c00254fe:	83 ec 0c             	sub    esp,0xc
c0025501:	68 c0 6f 02 c0       	push   0xc0026fc0
c0025506:	e8 fc 35 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c002550b:	83 c4 10             	add    esp,0x10
c002550e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025512:	8b 00                	mov    eax,DWORD PTR [eax]
c0025514:	85 c0                	test   eax,eax
c0025516:	74 3a                	je     c0025552 <LinkedList<Device>::addElement(Device*)+0x5e>
c0025518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002551c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002551f:	85 c0                	test   eax,eax
c0025521:	74 2f                	je     c0025552 <LinkedList<Device>::addElement(Device*)+0x5e>
c0025523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025527:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002552a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002552e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0025534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025538:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002553c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002553f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025543:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025546:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0025550:	eb 68                	jmp    c00255ba <LinkedList<Device>::addElement(Device*)+0xc6>
c0025552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025556:	8b 00                	mov    eax,DWORD PTR [eax]
c0025558:	85 c0                	test   eax,eax
c002555a:	75 4e                	jne    c00255aa <LinkedList<Device>::addElement(Device*)+0xb6>
c002555c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025560:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025563:	85 c0                	test   eax,eax
c0025565:	75 43                	jne    c00255aa <LinkedList<Device>::addElement(Device*)+0xb6>
c0025567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002556b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002556f:	89 10                	mov    DWORD PTR [eax],edx
c0025571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025575:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025579:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002557c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025580:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025583:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002558d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025591:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025594:	85 c0                	test   eax,eax
c0025596:	74 22                	je     c00255ba <LinkedList<Device>::addElement(Device*)+0xc6>
c0025598:	83 ec 0c             	sub    esp,0xc
c002559b:	68 e2 6f 02 c0       	push   0xc0026fe2
c00255a0:	e8 62 35 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c00255a5:	83 c4 10             	add    esp,0x10
c00255a8:	eb 10                	jmp    c00255ba <LinkedList<Device>::addElement(Device*)+0xc6>
c00255aa:	83 ec 0c             	sub    esp,0xc
c00255ad:	68 ec 6f 02 c0       	push   0xc0026fec
c00255b2:	e8 50 35 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c00255b7:	83 c4 10             	add    esp,0x10
c00255ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255be:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00255c1:	8d 50 01             	lea    edx,[eax+0x1]
c00255c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255c8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00255cb:	90                   	nop
c00255cc:	83 c4 0c             	add    esp,0xc
c00255cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00255d0 <LinkedList<Device>::LinkedList()>:
c00255d0:	83 ec 0c             	sub    esp,0xc
c00255d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00255dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00255e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255ec:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00255f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255f7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00255fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025601:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002560c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025613:	83 ec 0c             	sub    esp,0xc
c0025616:	68 a6 6f 02 c0       	push   0xc0026fa6
c002561b:	e8 57 cc fe ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0025620:	83 c4 10             	add    esp,0x10
c0025623:	90                   	nop
c0025624:	83 c4 0c             	add    esp,0xc
c0025627:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c0025628 <CPU::readCR0()>:
c0025628:	83 ec 10             	sub    esp,0x10
c002562b:	0f 20 c0             	mov    eax,cr0
c002562e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025632:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025636:	83 c4 10             	add    esp,0x10
c0025639:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c002563a <CPU::writeCR0(unsigned long)>:
c002563a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002563e:	0f 22 c0             	mov    cr0,eax
c0025641:	90                   	nop
c0025642:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c0025643 <CPU::readDR0()>:
c0025643:	83 ec 10             	sub    esp,0x10
c0025646:	0f 21 c0             	mov    eax,db0
c0025649:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002564d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025651:	83 c4 10             	add    esp,0x10
c0025654:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c0025655 <CPU::readDR1()>:
c0025655:	83 ec 10             	sub    esp,0x10
c0025658:	0f 21 c8             	mov    eax,db1
c002565b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002565f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025663:	83 c4 10             	add    esp,0x10
c0025666:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c0025667 <CPU::readDR2()>:
c0025667:	83 ec 10             	sub    esp,0x10
c002566a:	0f 21 d0             	mov    eax,db2
c002566d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025671:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025675:	83 c4 10             	add    esp,0x10
c0025678:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c0025679 <CPU::readDR3()>:
c0025679:	83 ec 10             	sub    esp,0x10
c002567c:	0f 21 d8             	mov    eax,db3
c002567f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025683:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025687:	83 c4 10             	add    esp,0x10
c002568a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c002568b <CPU::readDR6()>:
c002568b:	83 ec 10             	sub    esp,0x10
c002568e:	0f 21 f0             	mov    eax,db6
c0025691:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025695:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025699:	83 c4 10             	add    esp,0x10
c002569c:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c002569d <CPU::readDR7()>:
c002569d:	83 ec 10             	sub    esp,0x10
c00256a0:	0f 21 f8             	mov    eax,db7
c00256a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00256a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00256ab:	83 c4 10             	add    esp,0x10
c00256ae:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00256b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00256b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00256b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00256b6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00256b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00256b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00256bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00256be:	85 c0                	test   eax,eax
c00256c0:	75 0e                	jne    c00256d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00256c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00256c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00256c9:	85 c0                	test   eax,eax
c00256cb:	75 03                	jne    c00256d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00256cd:	b0 01                	mov    al,0x1
c00256cf:	c3                   	ret    
c00256d0:	b0 00                	mov    al,0x0
c00256d2:	90                   	nop
c00256d3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00256d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00256d4:	83 ec 0c             	sub    esp,0xc
c00256d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256db:	8b 00                	mov    eax,DWORD PTR [eax]
c00256dd:	85 c0                	test   eax,eax
c00256df:	75 15                	jne    c00256f6 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00256e1:	83 ec 0c             	sub    esp,0xc
c00256e4:	68 f8 6f 02 c0       	push   0xc0026ff8
c00256e9:	e8 19 34 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c00256ee:	83 c4 10             	add    esp,0x10
c00256f1:	e9 88 00 00 00       	jmp    c002577e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00256f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00256fd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025700:	85 c0                	test   eax,eax
c0025702:	0f 95 c0             	setne  al
c0025705:	84 c0                	test   al,al
c0025707:	74 10                	je     c0025719 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0025709:	83 ec 0c             	sub    esp,0xc
c002570c:	68 43 70 02 c0       	push   0xc0027043
c0025711:	e8 f1 33 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c0025716:	83 c4 10             	add    esp,0x10
c0025719:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002571d:	8b 00                	mov    eax,DWORD PTR [eax]
c002571f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025722:	85 c0                	test   eax,eax
c0025724:	0f 94 c0             	sete   al
c0025727:	84 c0                	test   al,al
c0025729:	74 33                	je     c002575e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c002572b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002572f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025739:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025744:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025747:	83 f8 01             	cmp    eax,0x1
c002574a:	74 21                	je     c002576d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002574c:	83 ec 0c             	sub    esp,0xc
c002574f:	68 1c 70 02 c0       	push   0xc002701c
c0025754:	e8 ae 33 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c0025759:	83 c4 10             	add    esp,0x10
c002575c:	eb 0f                	jmp    c002576d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002575e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025762:	8b 00                	mov    eax,DWORD PTR [eax]
c0025764:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002576b:	89 10                	mov    DWORD PTR [eax],edx
c002576d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025771:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025774:	8d 50 ff             	lea    edx,[eax-0x1]
c0025777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002577b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002577e:	83 c4 0c             	add    esp,0xc
c0025781:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0025782 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0025782:	83 ec 0c             	sub    esp,0xc
c0025785:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002578a:	75 10                	jne    c002579c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002578c:	83 ec 0c             	sub    esp,0xc
c002578f:	68 c0 6f 02 c0       	push   0xc0026fc0
c0025794:	e8 6e 33 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c0025799:	83 c4 10             	add    esp,0x10
c002579c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00257a2:	85 c0                	test   eax,eax
c00257a4:	74 34                	je     c00257da <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00257a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00257ad:	85 c0                	test   eax,eax
c00257af:	74 29                	je     c00257da <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00257b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00257b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00257bc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00257bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00257c7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00257ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00257d1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00257d8:	eb 65                	jmp    c002583f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00257da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257de:	8b 00                	mov    eax,DWORD PTR [eax]
c00257e0:	85 c0                	test   eax,eax
c00257e2:	75 4b                	jne    c002582f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00257e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00257eb:	85 c0                	test   eax,eax
c00257ed:	75 40                	jne    c002582f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00257ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257f3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00257f7:	89 10                	mov    DWORD PTR [eax],edx
c00257f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025801:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025808:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002580b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025816:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025819:	85 c0                	test   eax,eax
c002581b:	74 22                	je     c002583f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002581d:	83 ec 0c             	sub    esp,0xc
c0025820:	68 e2 6f 02 c0       	push   0xc0026fe2
c0025825:	e8 dd 32 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c002582a:	83 c4 10             	add    esp,0x10
c002582d:	eb 10                	jmp    c002583f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002582f:	83 ec 0c             	sub    esp,0xc
c0025832:	68 ec 6f 02 c0       	push   0xc0026fec
c0025837:	e8 cb 32 ff ff       	call   c0018b07 <Krnl::panic(char const*)>
c002583c:	83 c4 10             	add    esp,0x10
c002583f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025843:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025846:	8d 50 01             	lea    edx,[eax+0x1]
c0025849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002584d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025850:	90                   	nop
c0025851:	83 c4 0c             	add    esp,0xc
c0025854:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0025856 <ACPI::~ACPI()>:
c0025856:	83 ec 0c             	sub    esp,0xc
c0025859:	ba 90 7e 02 c0       	mov    edx,0xc0027e90
c002585e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025862:	89 10                	mov    DWORD PTR [eax],edx
c0025864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025868:	83 ec 0c             	sub    esp,0xc
c002586b:	50                   	push   eax
c002586c:	e8 b3 dc fe ff       	call   c0013524 <Device::~Device()>
c0025871:	83 c4 10             	add    esp,0x10
c0025874:	90                   	nop
c0025875:	83 c4 0c             	add    esp,0xc
c0025878:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002587a <ACPI::~ACPI()>:
c002587a:	83 ec 0c             	sub    esp,0xc
c002587d:	83 ec 0c             	sub    esp,0xc
c0025880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025884:	e8 cd ff ff ff       	call   c0025856 <ACPI::~ACPI()>
c0025889:	83 c4 10             	add    esp,0x10
c002588c:	83 ec 08             	sub    esp,0x8
c002588f:	68 68 22 00 00       	push   0x2268
c0025894:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025898:	e8 fa c8 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c002589d:	83 c4 10             	add    esp,0x10
c00258a0:	83 c4 0c             	add    esp,0xc
c00258a3:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00258a4 <CPU::~CPU()>:
c00258a4:	83 ec 0c             	sub    esp,0xc
c00258a7:	ba 80 82 02 c0       	mov    edx,0xc0028280
c00258ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258b0:	89 10                	mov    DWORD PTR [eax],edx
c00258b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258b6:	83 ec 0c             	sub    esp,0xc
c00258b9:	50                   	push   eax
c00258ba:	e8 65 dc fe ff       	call   c0013524 <Device::~Device()>
c00258bf:	83 c4 10             	add    esp,0x10
c00258c2:	90                   	nop
c00258c3:	83 c4 0c             	add    esp,0xc
c00258c6:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00258c8 <CPU::~CPU()>:
c00258c8:	83 ec 0c             	sub    esp,0xc
c00258cb:	83 ec 0c             	sub    esp,0xc
c00258ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00258d2:	e8 cd ff ff ff       	call   c00258a4 <CPU::~CPU()>
c00258d7:	83 c4 10             	add    esp,0x10
c00258da:	83 ec 08             	sub    esp,0x8
c00258dd:	68 98 11 00 00       	push   0x1198
c00258e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00258e6:	e8 ac c8 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c00258eb:	83 c4 10             	add    esp,0x10
c00258ee:	83 c4 0c             	add    esp,0xc
c00258f1:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c00258f2 <CPU::readCR4()>:
c00258f2:	83 ec 10             	sub    esp,0x10
c00258f5:	0f 20 e0             	mov    eax,cr4
c00258f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00258fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025900:	83 c4 10             	add    esp,0x10
c0025903:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c0025904 <CPU::writeDR7(unsigned long)>:
c0025904:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025908:	0f 23 f8             	mov    db7,eax
c002590b:	90                   	nop
c002590c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c002590d <CPU::writeCR4(unsigned long)>:
c002590d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025911:	0f 22 e0             	mov    cr4,eax
c0025914:	90                   	nop
c0025915:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c0025916 <CPU::readCR2()>:
c0025916:	83 ec 10             	sub    esp,0x10
c0025919:	0f 20 d0             	mov    eax,cr2
c002591c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025920:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025924:	83 c4 10             	add    esp,0x10
c0025927:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0025928 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0025928:	90                   	nop
c0025929:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002592a <ThreadControlBlock::ThreadControlBlock()>:
c002592a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002592e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025935:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025939:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0025940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025944:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002594b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002594f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0025956:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002595a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c002595e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025962:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0025966:	90                   	nop
c0025967:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0025968 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0025968:	83 ec 0c             	sub    esp,0xc
c002596b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002596f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025979:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025984:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002598b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002598f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025999:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00259a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259a4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00259ab:	83 ec 0c             	sub    esp,0xc
c00259ae:	68 a6 6f 02 c0       	push   0xc0026fa6
c00259b3:	e8 bf c8 fe ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00259b8:	83 c4 10             	add    esp,0x10
c00259bb:	90                   	nop
c00259bc:	83 c4 0c             	add    esp,0xc
c00259bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00259c0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00259c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00259c4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00259c7:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00259c8 <Vm::_FPUState::_FPUState()>:
c00259c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00259cc:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00259d3:	90                   	nop
c00259d4:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00259d6 <PCI::~PCI()>:
c00259d6:	83 ec 0c             	sub    esp,0xc
c00259d9:	ba 88 8f 02 c0       	mov    edx,0xc0028f88
c00259de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259e2:	89 10                	mov    DWORD PTR [eax],edx
c00259e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259e8:	83 ec 0c             	sub    esp,0xc
c00259eb:	50                   	push   eax
c00259ec:	e8 43 d5 fe ff       	call   c0012f34 <Bus::~Bus()>
c00259f1:	83 c4 10             	add    esp,0x10
c00259f4:	90                   	nop
c00259f5:	83 c4 0c             	add    esp,0xc
c00259f8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00259fa <PCI::~PCI()>:
c00259fa:	83 ec 0c             	sub    esp,0xc
c00259fd:	83 ec 0c             	sub    esp,0xc
c0025a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a04:	e8 cd ff ff ff       	call   c00259d6 <PCI::~PCI()>
c0025a09:	83 c4 10             	add    esp,0x10
c0025a0c:	83 ec 08             	sub    esp,0x8
c0025a0f:	68 58 01 00 00       	push   0x158
c0025a14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a18:	e8 7a c7 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0025a1d:	83 c4 10             	add    esp,0x10
c0025a20:	83 c4 0c             	add    esp,0xc
c0025a23:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0025a24 <IDE::~IDE()>:
c0025a24:	83 ec 0c             	sub    esp,0xc
c0025a27:	ba ec 91 02 c0       	mov    edx,0xc00291ec
c0025a2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a30:	89 10                	mov    DWORD PTR [eax],edx
c0025a32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a36:	83 ec 0c             	sub    esp,0xc
c0025a39:	50                   	push   eax
c0025a3a:	e8 fb df fe ff       	call   c0013a3a <HardDiskController::~HardDiskController()>
c0025a3f:	83 c4 10             	add    esp,0x10
c0025a42:	90                   	nop
c0025a43:	83 c4 0c             	add    esp,0xc
c0025a46:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0025a48 <IDE::~IDE()>:
c0025a48:	83 ec 0c             	sub    esp,0xc
c0025a4b:	83 ec 0c             	sub    esp,0xc
c0025a4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a52:	e8 cd ff ff ff       	call   c0025a24 <IDE::~IDE()>
c0025a57:	83 c4 10             	add    esp,0x10
c0025a5a:	83 ec 08             	sub    esp,0x8
c0025a5d:	68 70 02 00 00       	push   0x270
c0025a62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a66:	e8 2c c7 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0025a6b:	83 c4 10             	add    esp,0x10
c0025a6e:	83 c4 0c             	add    esp,0xc
c0025a71:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0025a72 <ATA::~ATA()>:
c0025a72:	83 ec 0c             	sub    esp,0xc
c0025a75:	ba 3c 92 02 c0       	mov    edx,0xc002923c
c0025a7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a7e:	89 10                	mov    DWORD PTR [eax],edx
c0025a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a84:	83 ec 0c             	sub    esp,0xc
c0025a87:	50                   	push   eax
c0025a88:	e8 8b e0 fe ff       	call   c0013b18 <PhysicalDisk::~PhysicalDisk()>
c0025a8d:	83 c4 10             	add    esp,0x10
c0025a90:	90                   	nop
c0025a91:	83 c4 0c             	add    esp,0xc
c0025a94:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0025a96 <ATA::~ATA()>:
c0025a96:	83 ec 0c             	sub    esp,0xc
c0025a99:	83 ec 0c             	sub    esp,0xc
c0025a9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025aa0:	e8 cd ff ff ff       	call   c0025a72 <ATA::~ATA()>
c0025aa5:	83 c4 10             	add    esp,0x10
c0025aa8:	83 ec 08             	sub    esp,0x8
c0025aab:	68 7c 01 00 00       	push   0x17c
c0025ab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ab4:	e8 de c6 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0025ab9:	83 c4 10             	add    esp,0x10
c0025abc:	83 c4 0c             	add    esp,0xc
c0025abf:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0025ac0 <ATAPI::~ATAPI()>:
c0025ac0:	83 ec 0c             	sub    esp,0xc
c0025ac3:	ba a8 92 02 c0       	mov    edx,0xc00292a8
c0025ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025acc:	89 10                	mov    DWORD PTR [eax],edx
c0025ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ad2:	83 ec 0c             	sub    esp,0xc
c0025ad5:	50                   	push   eax
c0025ad6:	e8 3d e0 fe ff       	call   c0013b18 <PhysicalDisk::~PhysicalDisk()>
c0025adb:	83 c4 10             	add    esp,0x10
c0025ade:	90                   	nop
c0025adf:	83 c4 0c             	add    esp,0xc
c0025ae2:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0025ae4 <ATAPI::~ATAPI()>:
c0025ae4:	83 ec 0c             	sub    esp,0xc
c0025ae7:	83 ec 0c             	sub    esp,0xc
c0025aea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025aee:	e8 cd ff ff ff       	call   c0025ac0 <ATAPI::~ATAPI()>
c0025af3:	83 c4 10             	add    esp,0x10
c0025af6:	83 ec 08             	sub    esp,0x8
c0025af9:	68 80 01 00 00       	push   0x180
c0025afe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b02:	e8 90 c6 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0025b07:	83 c4 10             	add    esp,0x10
c0025b0a:	83 c4 0c             	add    esp,0xc
c0025b0d:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0025b0e <AVX::~AVX()>:
c0025b0e:	83 ec 0c             	sub    esp,0xc
c0025b11:	ba e4 92 02 c0       	mov    edx,0xc00292e4
c0025b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b1a:	89 10                	mov    DWORD PTR [eax],edx
c0025b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b20:	83 ec 0c             	sub    esp,0xc
c0025b23:	50                   	push   eax
c0025b24:	e8 73 e0 fe ff       	call   c0013b9c <FPU::~FPU()>
c0025b29:	83 c4 10             	add    esp,0x10
c0025b2c:	90                   	nop
c0025b2d:	83 c4 0c             	add    esp,0xc
c0025b30:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0025b32 <AVX::~AVX()>:
c0025b32:	83 ec 0c             	sub    esp,0xc
c0025b35:	83 ec 0c             	sub    esp,0xc
c0025b38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b3c:	e8 cd ff ff ff       	call   c0025b0e <AVX::~AVX()>
c0025b41:	83 c4 10             	add    esp,0x10
c0025b44:	83 ec 08             	sub    esp,0x8
c0025b47:	68 58 01 00 00       	push   0x158
c0025b4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b50:	e8 42 c6 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0025b55:	83 c4 10             	add    esp,0x10
c0025b58:	83 c4 0c             	add    esp,0xc
c0025b5b:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0025b5c <MMX::~MMX()>:
c0025b5c:	83 ec 0c             	sub    esp,0xc
c0025b5f:	ba 24 93 02 c0       	mov    edx,0xc0029324
c0025b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b68:	89 10                	mov    DWORD PTR [eax],edx
c0025b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b6e:	83 ec 0c             	sub    esp,0xc
c0025b71:	50                   	push   eax
c0025b72:	e8 25 e0 fe ff       	call   c0013b9c <FPU::~FPU()>
c0025b77:	83 c4 10             	add    esp,0x10
c0025b7a:	90                   	nop
c0025b7b:	83 c4 0c             	add    esp,0xc
c0025b7e:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0025b80 <MMX::~MMX()>:
c0025b80:	83 ec 0c             	sub    esp,0xc
c0025b83:	83 ec 0c             	sub    esp,0xc
c0025b86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b8a:	e8 cd ff ff ff       	call   c0025b5c <MMX::~MMX()>
c0025b8f:	83 c4 10             	add    esp,0x10
c0025b92:	83 ec 08             	sub    esp,0x8
c0025b95:	68 58 01 00 00       	push   0x158
c0025b9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b9e:	e8 f4 c5 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0025ba3:	83 c4 10             	add    esp,0x10
c0025ba6:	83 c4 0c             	add    esp,0xc
c0025ba9:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0025baa <SSE::~SSE()>:
c0025baa:	83 ec 0c             	sub    esp,0xc
c0025bad:	ba 64 93 02 c0       	mov    edx,0xc0029364
c0025bb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bb6:	89 10                	mov    DWORD PTR [eax],edx
c0025bb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bbc:	83 ec 0c             	sub    esp,0xc
c0025bbf:	50                   	push   eax
c0025bc0:	e8 d7 df fe ff       	call   c0013b9c <FPU::~FPU()>
c0025bc5:	83 c4 10             	add    esp,0x10
c0025bc8:	90                   	nop
c0025bc9:	83 c4 0c             	add    esp,0xc
c0025bcc:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0025bce <SSE::~SSE()>:
c0025bce:	83 ec 0c             	sub    esp,0xc
c0025bd1:	83 ec 0c             	sub    esp,0xc
c0025bd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025bd8:	e8 cd ff ff ff       	call   c0025baa <SSE::~SSE()>
c0025bdd:	83 c4 10             	add    esp,0x10
c0025be0:	83 ec 08             	sub    esp,0x8
c0025be3:	68 58 01 00 00       	push   0x158
c0025be8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025bec:	e8 a6 c5 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0025bf1:	83 c4 10             	add    esp,0x10
c0025bf4:	83 c4 0c             	add    esp,0xc
c0025bf7:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0025bf8 <x87::~x87()>:
c0025bf8:	83 ec 0c             	sub    esp,0xc
c0025bfb:	ba a4 93 02 c0       	mov    edx,0xc00293a4
c0025c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c04:	89 10                	mov    DWORD PTR [eax],edx
c0025c06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c0a:	83 ec 0c             	sub    esp,0xc
c0025c0d:	50                   	push   eax
c0025c0e:	e8 89 df fe ff       	call   c0013b9c <FPU::~FPU()>
c0025c13:	83 c4 10             	add    esp,0x10
c0025c16:	90                   	nop
c0025c17:	83 c4 0c             	add    esp,0xc
c0025c1a:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0025c1c <x87::~x87()>:
c0025c1c:	83 ec 0c             	sub    esp,0xc
c0025c1f:	83 ec 0c             	sub    esp,0xc
c0025c22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025c26:	e8 cd ff ff ff       	call   c0025bf8 <x87::~x87()>
c0025c2b:	83 c4 10             	add    esp,0x10
c0025c2e:	83 ec 08             	sub    esp,0x8
c0025c31:	68 58 01 00 00       	push   0x158
c0025c36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025c3a:	e8 58 c5 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0025c3f:	83 c4 10             	add    esp,0x10
c0025c42:	83 c4 0c             	add    esp,0xc
c0025c45:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0025c46 <IOAPIC::~IOAPIC()>:
c0025c46:	83 ec 0c             	sub    esp,0xc
c0025c49:	ba fc 94 02 c0       	mov    edx,0xc00294fc
c0025c4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c52:	89 10                	mov    DWORD PTR [eax],edx
c0025c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c58:	83 ec 0c             	sub    esp,0xc
c0025c5b:	50                   	push   eax
c0025c5c:	e8 c3 d8 fe ff       	call   c0013524 <Device::~Device()>
c0025c61:	83 c4 10             	add    esp,0x10
c0025c64:	90                   	nop
c0025c65:	83 c4 0c             	add    esp,0xc
c0025c68:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0025c6a <IOAPIC::~IOAPIC()>:
c0025c6a:	83 ec 0c             	sub    esp,0xc
c0025c6d:	83 ec 0c             	sub    esp,0xc
c0025c70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025c74:	e8 cd ff ff ff       	call   c0025c46 <IOAPIC::~IOAPIC()>
c0025c79:	83 c4 10             	add    esp,0x10
c0025c7c:	83 ec 08             	sub    esp,0x8
c0025c7f:	68 68 01 00 00       	push   0x168
c0025c84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025c88:	e8 0a c5 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0025c8d:	83 c4 10             	add    esp,0x10
c0025c90:	83 c4 0c             	add    esp,0xc
c0025c93:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0025c94 <APIC::~APIC()>:
c0025c94:	83 ec 0c             	sub    esp,0xc
c0025c97:	ba b4 94 02 c0       	mov    edx,0xc00294b4
c0025c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ca0:	89 10                	mov    DWORD PTR [eax],edx
c0025ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ca6:	83 ec 0c             	sub    esp,0xc
c0025ca9:	50                   	push   eax
c0025caa:	e8 c1 e3 fe ff       	call   c0014070 <InterruptController::~InterruptController()>
c0025caf:	83 c4 10             	add    esp,0x10
c0025cb2:	90                   	nop
c0025cb3:	83 c4 0c             	add    esp,0xc
c0025cb6:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0025cb8 <APIC::~APIC()>:
c0025cb8:	83 ec 0c             	sub    esp,0xc
c0025cbb:	83 ec 0c             	sub    esp,0xc
c0025cbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025cc2:	e8 cd ff ff ff       	call   c0025c94 <APIC::~APIC()>
c0025cc7:	83 c4 10             	add    esp,0x10
c0025cca:	83 ec 08             	sub    esp,0x8
c0025ccd:	68 58 21 00 00       	push   0x2158
c0025cd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025cd6:	e8 bc c4 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0025cdb:	83 c4 10             	add    esp,0x10
c0025cde:	83 c4 0c             	add    esp,0xc
c0025ce1:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0025ce2 <PIC::~PIC()>:
c0025ce2:	83 ec 0c             	sub    esp,0xc
c0025ce5:	ba 4c 95 02 c0       	mov    edx,0xc002954c
c0025cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cee:	89 10                	mov    DWORD PTR [eax],edx
c0025cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cf4:	83 ec 0c             	sub    esp,0xc
c0025cf7:	50                   	push   eax
c0025cf8:	e8 73 e3 fe ff       	call   c0014070 <InterruptController::~InterruptController()>
c0025cfd:	83 c4 10             	add    esp,0x10
c0025d00:	90                   	nop
c0025d01:	83 c4 0c             	add    esp,0xc
c0025d04:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0025d06 <PIC::~PIC()>:
c0025d06:	83 ec 0c             	sub    esp,0xc
c0025d09:	83 ec 0c             	sub    esp,0xc
c0025d0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025d10:	e8 cd ff ff ff       	call   c0025ce2 <PIC::~PIC()>
c0025d15:	83 c4 10             	add    esp,0x10
c0025d18:	83 ec 08             	sub    esp,0x8
c0025d1b:	68 58 21 00 00       	push   0x2158
c0025d20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025d24:	e8 6e c4 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0025d29:	83 c4 10             	add    esp,0x10
c0025d2c:	83 c4 0c             	add    esp,0xc
c0025d2f:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0025d30 <APICTimer::~APICTimer()>:
c0025d30:	83 ec 0c             	sub    esp,0xc
c0025d33:	ba a0 95 02 c0       	mov    edx,0xc00295a0
c0025d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d3c:	89 10                	mov    DWORD PTR [eax],edx
c0025d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d42:	83 ec 0c             	sub    esp,0xc
c0025d45:	50                   	push   eax
c0025d46:	e8 23 00 ff ff       	call   c0015d6e <Timer::~Timer()>
c0025d4b:	83 c4 10             	add    esp,0x10
c0025d4e:	90                   	nop
c0025d4f:	83 c4 0c             	add    esp,0xc
c0025d52:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0025d54 <APICTimer::~APICTimer()>:
c0025d54:	83 ec 0c             	sub    esp,0xc
c0025d57:	83 ec 0c             	sub    esp,0xc
c0025d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025d5e:	e8 cd ff ff ff       	call   c0025d30 <APICTimer::~APICTimer()>
c0025d63:	83 c4 10             	add    esp,0x10
c0025d66:	83 ec 08             	sub    esp,0x8
c0025d69:	68 60 01 00 00       	push   0x160
c0025d6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025d72:	e8 20 c4 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0025d77:	83 c4 10             	add    esp,0x10
c0025d7a:	83 c4 0c             	add    esp,0xc
c0025d7d:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0025d7e <PIT::~PIT()>:
c0025d7e:	83 ec 0c             	sub    esp,0xc
c0025d81:	ba f0 95 02 c0       	mov    edx,0xc00295f0
c0025d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d8a:	89 10                	mov    DWORD PTR [eax],edx
c0025d8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d90:	83 ec 0c             	sub    esp,0xc
c0025d93:	50                   	push   eax
c0025d94:	e8 d5 ff fe ff       	call   c0015d6e <Timer::~Timer()>
c0025d99:	83 c4 10             	add    esp,0x10
c0025d9c:	90                   	nop
c0025d9d:	83 c4 0c             	add    esp,0xc
c0025da0:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0025da2 <PIT::~PIT()>:
c0025da2:	83 ec 0c             	sub    esp,0xc
c0025da5:	83 ec 0c             	sub    esp,0xc
c0025da8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025dac:	e8 cd ff ff ff       	call   c0025d7e <PIT::~PIT()>
c0025db1:	83 c4 10             	add    esp,0x10
c0025db4:	83 ec 08             	sub    esp,0x8
c0025db7:	68 5c 01 00 00       	push   0x15c
c0025dbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025dc0:	e8 d2 c3 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0025dc5:	83 c4 10             	add    esp,0x10
c0025dc8:	83 c4 0c             	add    esp,0xc
c0025dcb:	c3                   	ret    
