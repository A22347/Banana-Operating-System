
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 23 6e 00 00       	call   c0006e43 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 e5 ca 01 00       	call   c001cb0a <_init>
c0000025:	c3                   	ret    
c0000026:	bb b6 d5 01 c0       	mov    ebx,0xc001d5b6
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb c4 d5 01 c0    	cmp    ebx,0xc001d5c4
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 01 02 c0       	mov    eax,0xc00201d8
c0000049:	3d d8 01 02 c0       	cmp    eax,0xc00201d8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 01 02 c0       	push   0xc00201d8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 01 02 c0       	mov    eax,0xc00201d8
c0000075:	2d d8 01 02 c0       	sub    eax,0xc00201d8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 01 02 c0       	push   0xc00201d8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 60 03 02 c0 00 	cmp    BYTE PTR ds:0xc0020360,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb cc d5 01 c0       	mov    ebx,0xc001d5cc
c00000bb:	81 eb c8 d5 01 c0    	sub    ebx,0xc001d5c8
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be c8 d5 01 c0       	mov    esi,0xc001d5c8
c00000ca:	a1 64 03 02 c0       	mov    eax,ds:0xc0020364
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 64 03 02 c0       	mov    ds:0xc0020364,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 64 03 02 c0       	mov    eax,ds:0xc0020364
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 01 02 c0       	push   0xc00201d8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 60 03 02 c0 01 	mov    BYTE PTR ds:0xc0020360,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 68 03 02 c0       	push   0xc0020368
c000012c:	68 d8 01 02 c0       	push   0xc00201d8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 44 22 01 00       	call   c0012514 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 34 96 00 00       	call   c000991c <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 22 22 01 00       	call   c0012514 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 e3 26 01 00       	call   c00129f4 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 26 2d 01 00       	call   c0013040 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 b0 07 02 c0 	lgdtd  ds:0xc00207b0
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 88 59 00 00       	jmp    c0005d2a <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax

c00003a4 <memcmp>:
c00003a4:	56                   	push   esi
c00003a5:	53                   	push   ebx
c00003a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003b2:	85 f6                	test   esi,esi
c00003b4:	74 1d                	je     c00003d3 <memcmp+0x2f>
c00003b6:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b8:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003bb:	38 cb                	cmp    bl,cl
c00003bd:	75 19                	jne    c00003d8 <memcmp+0x34>
c00003bf:	01 c6                	add    esi,eax
c00003c1:	eb 0a                	jmp    c00003cd <memcmp+0x29>
c00003c3:	90                   	nop
c00003c4:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c6:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003c9:	38 d9                	cmp    cl,bl
c00003cb:	75 0b                	jne    c00003d8 <memcmp+0x34>
c00003cd:	40                   	inc    eax
c00003ce:	42                   	inc    edx
c00003cf:	39 f0                	cmp    eax,esi
c00003d1:	75 f1                	jne    c00003c4 <memcmp+0x20>
c00003d3:	31 c0                	xor    eax,eax
c00003d5:	5b                   	pop    ebx
c00003d6:	5e                   	pop    esi
c00003d7:	c3                   	ret    
c00003d8:	0f b6 c1             	movzx  eax,cl
c00003db:	29 d8                	sub    eax,ebx
c00003dd:	5b                   	pop    ebx
c00003de:	5e                   	pop    esi
c00003df:	c3                   	ret    

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 80 00 00 00    	jae    c0000478 <memmove+0x98>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	74 74                	je     c0000470 <memmove+0x90>
c00003fc:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003ff:	8d 75 04             	lea    esi,[ebp+0x4]
c0000402:	39 cd                	cmp    ebp,ecx
c0000404:	0f 93 c1             	setae  cl
c0000407:	39 f3                	cmp    ebx,esi
c0000409:	0f 93 c0             	setae  al
c000040c:	89 c6                	mov    esi,eax
c000040e:	09 ce                	or     esi,ecx
c0000410:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000413:	89 f0                	mov    eax,esi
c0000415:	83 f9 0c             	cmp    ecx,0xc
c0000418:	0f 97 c1             	seta   cl
c000041b:	84 c8                	test   al,cl
c000041d:	74 75                	je     c0000494 <memmove+0xb4>
c000041f:	89 e9                	mov    ecx,ebp
c0000421:	09 d9                	or     ecx,ebx
c0000423:	83 e1 03             	and    ecx,0x3
c0000426:	75 6c                	jne    c0000494 <memmove+0xb4>
c0000428:	89 d7                	mov    edi,edx
c000042a:	89 d9                	mov    ecx,ebx
c000042c:	83 e7 fc             	and    edi,0xfffffffc
c000042f:	89 ee                	mov    esi,ebp
c0000431:	01 df                	add    edi,ebx
c0000433:	90                   	nop
c0000434:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000436:	83 c6 04             	add    esi,0x4
c0000439:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000043c:	83 c1 04             	add    ecx,0x4
c000043f:	39 f9                	cmp    ecx,edi
c0000441:	75 f1                	jne    c0000434 <memmove+0x54>
c0000443:	89 d1                	mov    ecx,edx
c0000445:	89 d7                	mov    edi,edx
c0000447:	83 e1 fc             	and    ecx,0xfffffffc
c000044a:	29 cf                	sub    edi,ecx
c000044c:	01 cb                	add    ebx,ecx
c000044e:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000452:	39 ca                	cmp    edx,ecx
c0000454:	74 1a                	je     c0000470 <memmove+0x90>
c0000456:	8a 03                	mov    al,BYTE PTR [ebx]
c0000458:	83 ff 01             	cmp    edi,0x1
c000045b:	88 06                	mov    BYTE PTR [esi],al
c000045d:	74 11                	je     c0000470 <memmove+0x90>
c000045f:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000462:	83 ff 02             	cmp    edi,0x2
c0000465:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000468:	74 06                	je     c0000470 <memmove+0x90>
c000046a:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c000046d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000470:	5b                   	pop    ebx
c0000471:	89 e8                	mov    eax,ebp
c0000473:	5e                   	pop    esi
c0000474:	5f                   	pop    edi
c0000475:	5d                   	pop    ebp
c0000476:	c3                   	ret    
c0000477:	90                   	nop
c0000478:	76 f6                	jbe    c0000470 <memmove+0x90>
c000047a:	85 d2                	test   edx,edx
c000047c:	74 f2                	je     c0000470 <memmove+0x90>
c000047e:	4b                   	dec    ebx
c000047f:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000482:	66 90                	xchg   ax,ax
c0000484:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000487:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000048a:	4a                   	dec    edx
c000048b:	75 f7                	jne    c0000484 <memmove+0xa4>
c000048d:	5b                   	pop    ebx
c000048e:	89 e8                	mov    eax,ebp
c0000490:	5e                   	pop    esi
c0000491:	5f                   	pop    edi
c0000492:	5d                   	pop    ebp
c0000493:	c3                   	ret    
c0000494:	01 ea                	add    edx,ebp
c0000496:	89 e9                	mov    ecx,ebp
c0000498:	8a 03                	mov    al,BYTE PTR [ebx]
c000049a:	41                   	inc    ecx
c000049b:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000049e:	43                   	inc    ebx
c000049f:	39 d1                	cmp    ecx,edx
c00004a1:	75 f5                	jne    c0000498 <memmove+0xb8>
c00004a3:	eb cb                	jmp    c0000470 <memmove+0x90>
c00004a5:	8d 76 00             	lea    esi,[esi+0x0]

c00004a8 <memset>:
c00004a8:	57                   	push   edi
c00004a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00004ad:	85 c9                	test   ecx,ecx
c00004af:	74 0b                	je     c00004bc <memset+0x14>
c00004b1:	fc                   	cld    
c00004b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00004b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00004ba:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00004bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00004c0:	5f                   	pop    edi
c00004c1:	c3                   	ret    
c00004c2:	66 90                	xchg   ax,ax

c00004c4 <strlen>:
c00004c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00004c8:	31 c0                	xor    eax,eax
c00004ca:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00004cd:	74 09                	je     c00004d8 <strlen+0x14>
c00004cf:	90                   	nop
c00004d0:	40                   	inc    eax
c00004d1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00004d5:	75 f9                	jne    c00004d0 <strlen+0xc>
c00004d7:	c3                   	ret    
c00004d8:	c3                   	ret    
c00004d9:	8d 76 00             	lea    esi,[esi+0x0]

c00004dc <strpbrk>:
c00004dc:	57                   	push   edi
c00004dd:	56                   	push   esi
c00004de:	53                   	push   ebx
c00004df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004e3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00004e7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00004e9:	84 db                	test   bl,bl
c00004eb:	74 21                	je     c000050e <strpbrk+0x32>
c00004ed:	8a 07                	mov    al,BYTE PTR [edi]
c00004ef:	84 c0                	test   al,al
c00004f1:	74 14                	je     c0000507 <strpbrk+0x2b>
c00004f3:	38 d8                	cmp    al,bl
c00004f5:	74 19                	je     c0000510 <strpbrk+0x34>
c00004f7:	89 fa                	mov    edx,edi
c00004f9:	eb 05                	jmp    c0000500 <strpbrk+0x24>
c00004fb:	90                   	nop
c00004fc:	38 d9                	cmp    cl,bl
c00004fe:	74 10                	je     c0000510 <strpbrk+0x34>
c0000500:	42                   	inc    edx
c0000501:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000503:	84 c9                	test   cl,cl
c0000505:	75 f5                	jne    c00004fc <strpbrk+0x20>
c0000507:	46                   	inc    esi
c0000508:	8a 1e                	mov    bl,BYTE PTR [esi]
c000050a:	84 db                	test   bl,bl
c000050c:	75 e1                	jne    c00004ef <strpbrk+0x13>
c000050e:	31 f6                	xor    esi,esi
c0000510:	89 f0                	mov    eax,esi
c0000512:	5b                   	pop    ebx
c0000513:	5e                   	pop    esi
c0000514:	5f                   	pop    edi
c0000515:	c3                   	ret    
c0000516:	66 90                	xchg   ax,ax

c0000518 <strtok>:
c0000518:	56                   	push   esi
c0000519:	53                   	push   ebx
c000051a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000051e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000522:	85 db                	test   ebx,ebx
c0000524:	75 07                	jne    c000052d <strtok+0x15>
c0000526:	eb 2c                	jmp    c0000554 <strtok+0x3c>
c0000528:	43                   	inc    ebx
c0000529:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000052d:	56                   	push   esi
c000052e:	53                   	push   ebx
c000052f:	e8 a8 ff ff ff       	call   c00004dc <strpbrk>
c0000534:	5a                   	pop    edx
c0000535:	a3 80 03 02 c0       	mov    ds:0xc0020380,eax
c000053a:	59                   	pop    ecx
c000053b:	39 d8                	cmp    eax,ebx
c000053d:	74 e9                	je     c0000528 <strtok+0x10>
c000053f:	85 c0                	test   eax,eax
c0000541:	74 1b                	je     c000055e <strtok+0x46>
c0000543:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000546:	8d 50 01             	lea    edx,[eax+0x1]
c0000549:	89 d8                	mov    eax,ebx
c000054b:	89 15 80 03 02 c0    	mov    DWORD PTR ds:0xc0020380,edx
c0000551:	5b                   	pop    ebx
c0000552:	5e                   	pop    esi
c0000553:	c3                   	ret    
c0000554:	8b 1d 80 03 02 c0    	mov    ebx,DWORD PTR ds:0xc0020380
c000055a:	85 db                	test   ebx,ebx
c000055c:	75 cf                	jne    c000052d <strtok+0x15>
c000055e:	31 c0                	xor    eax,eax
c0000560:	5b                   	pop    ebx
c0000561:	5e                   	pop    esi
c0000562:	c3                   	ret    
c0000563:	90                   	nop

c0000564 <strcpy>:
c0000564:	53                   	push   ebx
c0000565:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000569:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000056d:	89 c3                	mov    ebx,eax
c000056f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000571:	84 d2                	test   dl,dl
c0000573:	74 0d                	je     c0000582 <strcpy+0x1e>
c0000575:	8d 76 00             	lea    esi,[esi+0x0]
c0000578:	88 13                	mov    BYTE PTR [ebx],dl
c000057a:	41                   	inc    ecx
c000057b:	43                   	inc    ebx
c000057c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000057e:	84 d2                	test   dl,dl
c0000580:	75 f6                	jne    c0000578 <strcpy+0x14>
c0000582:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000585:	5b                   	pop    ebx
c0000586:	c3                   	ret    
c0000587:	90                   	nop

c0000588 <strncpy>:
c0000588:	55                   	push   ebp
c0000589:	57                   	push   edi
c000058a:	56                   	push   esi
c000058b:	53                   	push   ebx
c000058c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000590:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000594:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000598:	85 c0                	test   eax,eax
c000059a:	74 39                	je     c00005d5 <strncpy+0x4d>
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	8d 48 ff             	lea    ecx,[eax-0x1]
c00005a1:	8d 55 01             	lea    edx,[ebp+0x1]
c00005a4:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00005a7:	84 db                	test   bl,bl
c00005a9:	74 31                	je     c00005dc <strncpy+0x54>
c00005ab:	85 c9                	test   ecx,ecx
c00005ad:	74 26                	je     c00005d5 <strncpy+0x4d>
c00005af:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c00005b2:	8d 48 fe             	lea    ecx,[eax-0x2]
c00005b5:	8d 55 02             	lea    edx,[ebp+0x2]
c00005b8:	8d 46 02             	lea    eax,[esi+0x2]
c00005bb:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c00005be:	84 db                	test   bl,bl
c00005c0:	75 0f                	jne    c00005d1 <strncpy+0x49>
c00005c2:	eb 18                	jmp    c00005dc <strncpy+0x54>
c00005c4:	40                   	inc    eax
c00005c5:	42                   	inc    edx
c00005c6:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00005c9:	49                   	dec    ecx
c00005ca:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00005cd:	84 db                	test   bl,bl
c00005cf:	74 0b                	je     c00005dc <strncpy+0x54>
c00005d1:	85 c9                	test   ecx,ecx
c00005d3:	75 ef                	jne    c00005c4 <strncpy+0x3c>
c00005d5:	5b                   	pop    ebx
c00005d6:	89 e8                	mov    eax,ebp
c00005d8:	5e                   	pop    esi
c00005d9:	5f                   	pop    edi
c00005da:	5d                   	pop    ebp
c00005db:	c3                   	ret    
c00005dc:	85 c9                	test   ecx,ecx
c00005de:	74 f5                	je     c00005d5 <strncpy+0x4d>
c00005e0:	fc                   	cld    
c00005e1:	31 c0                	xor    eax,eax
c00005e3:	89 d7                	mov    edi,edx
c00005e5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00005e7:	89 e8                	mov    eax,ebp
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	5f                   	pop    edi
c00005ec:	5d                   	pop    ebp
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strcmp>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00005f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00005fa:	8a 16                	mov    dl,BYTE PTR [esi]
c00005fc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00005ff:	38 d1                	cmp    cl,dl
c0000601:	75 1d                	jne    c0000620 <strcmp+0x30>
c0000603:	84 c9                	test   cl,cl
c0000605:	74 21                	je     c0000628 <strcmp+0x38>
c0000607:	b8 01 00 00 00       	mov    eax,0x1
c000060c:	eb 07                	jmp    c0000615 <strcmp+0x25>
c000060e:	66 90                	xchg   ax,ax
c0000610:	40                   	inc    eax
c0000611:	84 d2                	test   dl,dl
c0000613:	74 13                	je     c0000628 <strcmp+0x38>
c0000615:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000618:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c000061c:	38 ca                	cmp    dl,cl
c000061e:	74 f0                	je     c0000610 <strcmp+0x20>
c0000620:	0f b6 c2             	movzx  eax,dl
c0000623:	5b                   	pop    ebx
c0000624:	29 c8                	sub    eax,ecx
c0000626:	5e                   	pop    esi
c0000627:	c3                   	ret    
c0000628:	31 c0                	xor    eax,eax
c000062a:	5b                   	pop    ebx
c000062b:	5e                   	pop    esi
c000062c:	c3                   	ret    
c000062d:	8d 76 00             	lea    esi,[esi+0x0]

c0000630 <strchr>:
c0000630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000634:	8a 10                	mov    dl,BYTE PTR [eax]
c0000636:	84 d2                	test   dl,dl
c0000638:	74 15                	je     c000064f <strchr+0x1f>
c000063a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000063e:	38 ca                	cmp    dl,cl
c0000640:	75 06                	jne    c0000648 <strchr+0x18>
c0000642:	eb 0e                	jmp    c0000652 <strchr+0x22>
c0000644:	38 ca                	cmp    dl,cl
c0000646:	74 09                	je     c0000651 <strchr+0x21>
c0000648:	40                   	inc    eax
c0000649:	8a 10                	mov    dl,BYTE PTR [eax]
c000064b:	84 d2                	test   dl,dl
c000064d:	75 f5                	jne    c0000644 <strchr+0x14>
c000064f:	31 c0                	xor    eax,eax
c0000651:	c3                   	ret    
c0000652:	c3                   	ret    
c0000653:	90                   	nop

c0000654 <strncmp>:
c0000654:	57                   	push   edi
c0000655:	56                   	push   esi
c0000656:	53                   	push   ebx
c0000657:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000065b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000065f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000663:	85 ff                	test   edi,edi
c0000665:	74 28                	je     c000068f <strncmp+0x3b>
c0000667:	8a 16                	mov    dl,BYTE PTR [esi]
c0000669:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000066c:	38 d1                	cmp    cl,dl
c000066e:	75 28                	jne    c0000698 <strncmp+0x44>
c0000670:	8d 46 01             	lea    eax,[esi+0x1]
c0000673:	84 c9                	test   cl,cl
c0000675:	74 18                	je     c000068f <strncmp+0x3b>
c0000677:	01 fe                	add    esi,edi
c0000679:	eb 0f                	jmp    c000068a <strncmp+0x36>
c000067b:	90                   	nop
c000067c:	8a 10                	mov    dl,BYTE PTR [eax]
c000067e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000681:	38 ca                	cmp    dl,cl
c0000683:	75 13                	jne    c0000698 <strncmp+0x44>
c0000685:	40                   	inc    eax
c0000686:	84 d2                	test   dl,dl
c0000688:	74 05                	je     c000068f <strncmp+0x3b>
c000068a:	43                   	inc    ebx
c000068b:	39 c6                	cmp    esi,eax
c000068d:	75 ed                	jne    c000067c <strncmp+0x28>
c000068f:	5b                   	pop    ebx
c0000690:	31 c0                	xor    eax,eax
c0000692:	5e                   	pop    esi
c0000693:	5f                   	pop    edi
c0000694:	c3                   	ret    
c0000695:	8d 76 00             	lea    esi,[esi+0x0]
c0000698:	5b                   	pop    ebx
c0000699:	0f b6 c2             	movzx  eax,dl
c000069c:	5e                   	pop    esi
c000069d:	29 c8                	sub    eax,ecx
c000069f:	5f                   	pop    edi
c00006a0:	c3                   	ret    
c00006a1:	8d 76 00             	lea    esi,[esi+0x0]

c00006a4 <strcat>:
c00006a4:	56                   	push   esi
c00006a5:	53                   	push   ebx
c00006a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006aa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006ae:	89 c3                	mov    ebx,eax
c00006b0:	eb 04                	jmp    c00006b6 <strcat+0x12>
c00006b2:	66 90                	xchg   ax,ax
c00006b4:	89 d3                	mov    ebx,edx
c00006b6:	8d 53 01             	lea    edx,[ebx+0x1]
c00006b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00006bd:	75 f5                	jne    c00006b4 <strcat+0x10>
c00006bf:	31 d2                	xor    edx,edx
c00006c1:	8d 76 00             	lea    esi,[esi+0x0]
c00006c4:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00006c7:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00006ca:	42                   	inc    edx
c00006cb:	84 c9                	test   cl,cl
c00006cd:	75 f5                	jne    c00006c4 <strcat+0x20>
c00006cf:	5b                   	pop    ebx
c00006d0:	5e                   	pop    esi
c00006d1:	c3                   	ret    
c00006d2:	66 90                	xchg   ax,ax

c00006d4 <strncat>:
c00006d4:	56                   	push   esi
c00006d5:	53                   	push   ebx
c00006d6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006e2:	85 f6                	test   esi,esi
c00006e4:	74 1e                	je     c0000704 <strncat+0x30>
c00006e6:	89 c2                	mov    edx,eax
c00006e8:	42                   	inc    edx
c00006e9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00006ed:	75 f9                	jne    c00006e8 <strncat+0x14>
c00006ef:	01 ce                	add    esi,ecx
c00006f1:	eb 06                	jmp    c00006f9 <strncat+0x25>
c00006f3:	90                   	nop
c00006f4:	39 f1                	cmp    ecx,esi
c00006f6:	74 10                	je     c0000708 <strncat+0x34>
c00006f8:	42                   	inc    edx
c00006f9:	41                   	inc    ecx
c00006fa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006fd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000700:	84 db                	test   bl,bl
c0000702:	75 f0                	jne    c00006f4 <strncat+0x20>
c0000704:	5b                   	pop    ebx
c0000705:	5e                   	pop    esi
c0000706:	c3                   	ret    
c0000707:	90                   	nop
c0000708:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000070b:	5b                   	pop    ebx
c000070c:	5e                   	pop    esi
c000070d:	c3                   	ret    
c000070e:	66 90                	xchg   ax,ax

c0000710 <strstr>:
c0000710:	57                   	push   edi
c0000711:	56                   	push   esi
c0000712:	53                   	push   ebx
c0000713:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000717:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000071b:	57                   	push   edi
c000071c:	e8 a3 fd ff ff       	call   c00004c4 <strlen>
c0000721:	59                   	pop    ecx
c0000722:	85 c0                	test   eax,eax
c0000724:	74 2a                	je     c0000750 <strstr+0x40>
c0000726:	89 c6                	mov    esi,eax
c0000728:	eb 12                	jmp    c000073c <strstr+0x2c>
c000072a:	66 90                	xchg   ax,ax
c000072c:	56                   	push   esi
c000072d:	57                   	push   edi
c000072e:	53                   	push   ebx
c000072f:	e8 70 fc ff ff       	call   c00003a4 <memcmp>
c0000734:	83 c4 0c             	add    esp,0xc
c0000737:	85 c0                	test   eax,eax
c0000739:	74 15                	je     c0000750 <strstr+0x40>
c000073b:	43                   	inc    ebx
c000073c:	53                   	push   ebx
c000073d:	e8 82 fd ff ff       	call   c00004c4 <strlen>
c0000742:	5a                   	pop    edx
c0000743:	39 f0                	cmp    eax,esi
c0000745:	73 e5                	jae    c000072c <strstr+0x1c>
c0000747:	5b                   	pop    ebx
c0000748:	31 c0                	xor    eax,eax
c000074a:	5e                   	pop    esi
c000074b:	5f                   	pop    edi
c000074c:	c3                   	ret    
c000074d:	8d 76 00             	lea    esi,[esi+0x0]
c0000750:	89 d8                	mov    eax,ebx
c0000752:	5b                   	pop    ebx
c0000753:	5e                   	pop    esi
c0000754:	5f                   	pop    edi
c0000755:	c3                   	ret    
c0000756:	66 90                	xchg   ax,ax

c0000758 <toupper>:
c0000758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000075c:	0f b6 d0             	movzx  edx,al
c000075f:	f6 82 e0 d5 01 c0 02 	test   BYTE PTR [edx-0x3ffe2a20],0x2
c0000766:	74 03                	je     c000076b <toupper+0x13>
c0000768:	83 e8 20             	sub    eax,0x20
c000076b:	c3                   	ret    

c000076c <tolower>:
c000076c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000770:	0f b6 d0             	movzx  edx,al
c0000773:	f6 82 e0 d5 01 c0 01 	test   BYTE PTR [edx-0x3ffe2a20],0x1
c000077a:	74 03                	je     c000077f <tolower+0x13>
c000077c:	83 c0 20             	add    eax,0x20
c000077f:	c3                   	ret    

c0000780 <simple_strtoul>:
c0000780:	55                   	push   ebp
c0000781:	57                   	push   edi
c0000782:	56                   	push   esi
c0000783:	53                   	push   ebx
c0000784:	83 ec 08             	sub    esp,0x8
c0000787:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000078b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000078f:	90                   	nop
c0000790:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000793:	f6 82 e0 d5 01 c0 08 	test   BYTE PTR [edx-0x3ffe2a20],0x8
c000079a:	75 05                	jne    c00007a1 <simple_strtoul+0x21>
c000079c:	80 fa 09             	cmp    dl,0x9
c000079f:	75 03                	jne    c00007a4 <simple_strtoul+0x24>
c00007a1:	41                   	inc    ecx
c00007a2:	eb ec                	jmp    c0000790 <simple_strtoul+0x10>
c00007a4:	80 fa 2d             	cmp    dl,0x2d
c00007a7:	0f 84 1b 01 00 00    	je     c00008c8 <simple_strtoul+0x148>
c00007ad:	80 fa 2b             	cmp    dl,0x2b
c00007b0:	0f 84 c2 00 00 00    	je     c0000878 <simple_strtoul+0xf8>
c00007b6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00007be:	85 f6                	test   esi,esi
c00007c0:	0f 85 c3 00 00 00    	jne    c0000889 <simple_strtoul+0x109>
c00007c6:	8a 11                	mov    dl,BYTE PTR [ecx]
c00007c8:	80 fa 30             	cmp    dl,0x30
c00007cb:	0f 84 47 01 00 00    	je     c0000918 <simple_strtoul+0x198>
c00007d1:	be 0a 00 00 00       	mov    esi,0xa
c00007d6:	84 d2                	test   dl,dl
c00007d8:	0f 84 6f 01 00 00    	je     c000094d <simple_strtoul+0x1cd>
c00007de:	31 ed                	xor    ebp,ebp
c00007e0:	31 ff                	xor    edi,edi
c00007e2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00007e9:	eb 2b                	jmp    c0000816 <simple_strtoul+0x96>
c00007eb:	90                   	nop
c00007ec:	83 eb 30             	sub    ebx,0x30
c00007ef:	39 f3                	cmp    ebx,esi
c00007f1:	73 4d                	jae    c0000840 <simple_strtoul+0xc0>
c00007f3:	31 d2                	xor    edx,edx
c00007f5:	89 d8                	mov    eax,ebx
c00007f7:	f7 d0                	not    eax
c00007f9:	f7 f6                	div    esi
c00007fb:	39 f8                	cmp    eax,edi
c00007fd:	0f 82 b1 00 00 00    	jb     c00008b4 <simple_strtoul+0x134>
c0000803:	0f af fe             	imul   edi,esi
c0000806:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000080d:	01 df                	add    edi,ebx
c000080f:	41                   	inc    ecx
c0000810:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 2a                	je     c0000840 <simple_strtoul+0xc0>
c0000816:	0f b6 da             	movzx  ebx,dl
c0000819:	f6 83 e0 d5 01 c0 04 	test   BYTE PTR [ebx-0x3ffe2a20],0x4
c0000820:	75 ca                	jne    c00007ec <simple_strtoul+0x6c>
c0000822:	0f be d2             	movsx  edx,dl
c0000825:	52                   	push   edx
c0000826:	e8 2d ff ff ff       	call   c0000758 <toupper>
c000082b:	5b                   	pop    ebx
c000082c:	0f b6 d0             	movzx  edx,al
c000082f:	f6 82 e0 d5 01 c0 01 	test   BYTE PTR [edx-0x3ffe2a20],0x1
c0000836:	74 08                	je     c0000840 <simple_strtoul+0xc0>
c0000838:	8d 58 c9             	lea    ebx,[eax-0x37]
c000083b:	39 f3                	cmp    ebx,esi
c000083d:	72 b4                	jb     c00007f3 <simple_strtoul+0x73>
c000083f:	90                   	nop
c0000840:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000844:	85 c0                	test   eax,eax
c0000846:	74 14                	je     c000085c <simple_strtoul+0xdc>
c0000848:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000084b:	09 f8                	or     eax,edi
c000084d:	75 71                	jne    c00008c0 <simple_strtoul+0x140>
c000084f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000853:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000857:	31 ff                	xor    edi,edi
c0000859:	89 30                	mov    DWORD PTR [eax],esi
c000085b:	90                   	nop
c000085c:	4d                   	dec    ebp
c000085d:	75 05                	jne    c0000864 <simple_strtoul+0xe4>
c000085f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000864:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000869:	75 02                	jne    c000086d <simple_strtoul+0xed>
c000086b:	f7 df                	neg    edi
c000086d:	83 c4 08             	add    esp,0x8
c0000870:	89 f8                	mov    eax,edi
c0000872:	5b                   	pop    ebx
c0000873:	5e                   	pop    esi
c0000874:	5f                   	pop    edi
c0000875:	5d                   	pop    ebp
c0000876:	c3                   	ret    
c0000877:	90                   	nop
c0000878:	41                   	inc    ecx
c0000879:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000881:	85 f6                	test   esi,esi
c0000883:	0f 84 3d ff ff ff    	je     c00007c6 <simple_strtoul+0x46>
c0000889:	8d 46 fe             	lea    eax,[esi-0x2]
c000088c:	83 f8 22             	cmp    eax,0x22
c000088f:	77 6a                	ja     c00008fb <simple_strtoul+0x17b>
c0000891:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000893:	83 fe 08             	cmp    esi,0x8
c0000896:	0f 84 a2 00 00 00    	je     c000093e <simple_strtoul+0x1be>
c000089c:	83 fe 10             	cmp    esi,0x10
c000089f:	0f 85 31 ff ff ff    	jne    c00007d6 <simple_strtoul+0x56>
c00008a5:	80 fa 30             	cmp    dl,0x30
c00008a8:	74 2c                	je     c00008d6 <simple_strtoul+0x156>
c00008aa:	be 10 00 00 00       	mov    esi,0x10
c00008af:	e9 22 ff ff ff       	jmp    c00007d6 <simple_strtoul+0x56>
c00008b4:	bd 01 00 00 00       	mov    ebp,0x1
c00008b9:	31 ff                	xor    edi,edi
c00008bb:	e9 4f ff ff ff       	jmp    c000080f <simple_strtoul+0x8f>
c00008c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00008c4:	89 08                	mov    DWORD PTR [eax],ecx
c00008c6:	eb 94                	jmp    c000085c <simple_strtoul+0xdc>
c00008c8:	41                   	inc    ecx
c00008c9:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008d1:	e9 e8 fe ff ff       	jmp    c00007be <simple_strtoul+0x3e>
c00008d6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008da:	88 04 24             	mov    BYTE PTR [esp],al
c00008dd:	50                   	push   eax
c00008de:	e8 89 fe ff ff       	call   c000076c <tolower>
c00008e3:	5e                   	pop    esi
c00008e4:	83 f8 78             	cmp    eax,0x78
c00008e7:	0f 84 84 00 00 00    	je     c0000971 <simple_strtoul+0x1f1>
c00008ed:	41                   	inc    ecx
c00008ee:	be 10 00 00 00       	mov    esi,0x10
c00008f3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c00008f6:	e9 db fe ff ff       	jmp    c00007d6 <simple_strtoul+0x56>
c00008fb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00008ff:	85 ff                	test   edi,edi
c0000901:	74 5c                	je     c000095f <simple_strtoul+0x1df>
c0000903:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000907:	85 c9                	test   ecx,ecx
c0000909:	75 4e                	jne    c0000959 <simple_strtoul+0x1d9>
c000090b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000911:	31 ff                	xor    edi,edi
c0000913:	e9 4c ff ff ff       	jmp    c0000864 <simple_strtoul+0xe4>
c0000918:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000091c:	88 04 24             	mov    BYTE PTR [esp],al
c000091f:	50                   	push   eax
c0000920:	e8 47 fe ff ff       	call   c000076c <tolower>
c0000925:	5d                   	pop    ebp
c0000926:	83 f8 78             	cmp    eax,0x78
c0000929:	74 3b                	je     c0000966 <simple_strtoul+0x1e6>
c000092b:	41                   	inc    ecx
c000092c:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000092f:	80 fa 30             	cmp    dl,0x30
c0000932:	74 13                	je     c0000947 <simple_strtoul+0x1c7>
c0000934:	be 08 00 00 00       	mov    esi,0x8
c0000939:	e9 98 fe ff ff       	jmp    c00007d6 <simple_strtoul+0x56>
c000093e:	80 fa 30             	cmp    dl,0x30
c0000941:	0f 85 8f fe ff ff    	jne    c00007d6 <simple_strtoul+0x56>
c0000947:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c000094a:	41                   	inc    ecx
c000094b:	eb e7                	jmp    c0000934 <simple_strtoul+0x1b4>
c000094d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000951:	85 d2                	test   edx,edx
c0000953:	74 0a                	je     c000095f <simple_strtoul+0x1df>
c0000955:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000959:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000095d:	89 30                	mov    DWORD PTR [eax],esi
c000095f:	31 ff                	xor    edi,edi
c0000961:	e9 fe fe ff ff       	jmp    c0000864 <simple_strtoul+0xe4>
c0000966:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000969:	83 c1 02             	add    ecx,0x2
c000096c:	e9 34 ff ff ff       	jmp    c00008a5 <simple_strtoul+0x125>
c0000971:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000974:	be 10 00 00 00       	mov    esi,0x10
c0000979:	83 c1 02             	add    ecx,0x2
c000097c:	e9 55 fe ff ff       	jmp    c00007d6 <simple_strtoul+0x56>

c0000981 <largebin_index>:
c0000981:	89 c2                	mov    edx,eax
c0000983:	c1 ea 08             	shr    edx,0x8
c0000986:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000098c:	77 10                	ja     c000099e <largebin_index+0x1d>
c000098e:	0f bd d2             	bsr    edx,edx
c0000991:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000994:	d3 e8                	shr    eax,cl
c0000996:	83 e0 03             	and    eax,0x3
c0000999:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c000099d:	c3                   	ret    
c000099e:	b8 5f 00 00 00       	mov    eax,0x5f
c00009a3:	c3                   	ret    

c00009a4 <malloc_init_state>:
c00009a4:	53                   	push   ebx
c00009a5:	8d 50 34             	lea    edx,[eax+0x34]
c00009a8:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009ae:	89 d1                	mov    ecx,edx
c00009b0:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009b3:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009b6:	83 c2 08             	add    edx,0x8
c00009b9:	39 da                	cmp    edx,ebx
c00009bb:	75 f3                	jne    c00009b0 <malloc_init_state+0xc>
c00009bd:	8b 10                	mov    edx,DWORD PTR [eax]
c00009bf:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009c9:	83 e2 03             	and    edx,0x3
c00009cc:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009d6:	83 ca 48             	or     edx,0x48
c00009d9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009e3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009ed:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009f4:	89 10                	mov    DWORD PTR [eax],edx
c00009f6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c00009f9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a03:	5b                   	pop    ebx
c0000a04:	c3                   	ret    

c0000a05 <malloc_consolidate>:
c0000a05:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a07:	85 d2                	test   edx,edx
c0000a09:	0f 84 d8 00 00 00    	je     c0000ae7 <malloc_consolidate+0xe2>
c0000a0f:	55                   	push   ebp
c0000a10:	83 e2 fd             	and    edx,0xfffffffd
c0000a13:	57                   	push   edi
c0000a14:	89 c5                	mov    ebp,eax
c0000a16:	56                   	push   esi
c0000a17:	8d 78 34             	lea    edi,[eax+0x34]
c0000a1a:	53                   	push   ebx
c0000a1b:	83 ec 10             	sub    esp,0x10
c0000a1e:	89 10                	mov    DWORD PTR [eax],edx
c0000a20:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a24:	c1 ea 03             	shr    edx,0x3
c0000a27:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a2b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a2f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a32:	85 d2                	test   edx,edx
c0000a34:	0f 84 98 00 00 00    	je     c0000ad2 <malloc_consolidate+0xcd>
c0000a3a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a41:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a44:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a47:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a4b:	89 f9                	mov    ecx,edi
c0000a4d:	83 e1 fe             	and    ecx,0xfffffffe
c0000a50:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a53:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a56:	83 e3 fc             	and    ebx,0xfffffffc
c0000a59:	83 e7 01             	and    edi,0x1
c0000a5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a5f:	75 14                	jne    c0000a75 <malloc_consolidate+0x70>
c0000a61:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a63:	29 fa                	sub    edx,edi
c0000a65:	01 f9                	add    ecx,edi
c0000a67:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a6a:	89 fb                	mov    ebx,edi
c0000a6c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a6f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a72:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a75:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a78:	74 40                	je     c0000aba <malloc_consolidate+0xb5>
c0000a7a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a7d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a80:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a84:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a87:	83 e7 01             	and    edi,0x1
c0000a8a:	75 0e                	jne    c0000a9a <malloc_consolidate+0x95>
c0000a8c:	01 d9                	add    ecx,ebx
c0000a8e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a91:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000a97:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000a9a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000a9d:	89 ce                	mov    esi,ecx
c0000a9f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000aa2:	83 ce 01             	or     esi,0x1
c0000aa5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000aa8:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000aab:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000aae:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000ab2:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ab5:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ab8:	eb 0c                	jmp    c0000ac6 <malloc_consolidate+0xc1>
c0000aba:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000abd:	83 c9 01             	or     ecx,0x1
c0000ac0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ac3:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ac6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000aca:	85 d2                	test   edx,edx
c0000acc:	0f 85 6f ff ff ff    	jne    c0000a41 <malloc_consolidate+0x3c>
c0000ad2:	83 c5 04             	add    ebp,0x4
c0000ad5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ad9:	0f 85 50 ff ff ff    	jne    c0000a2f <malloc_consolidate+0x2a>
c0000adf:	83 c4 10             	add    esp,0x10
c0000ae2:	5b                   	pop    ebx
c0000ae3:	5e                   	pop    esi
c0000ae4:	5f                   	pop    edi
c0000ae5:	5d                   	pop    ebp
c0000ae6:	c3                   	ret    
c0000ae7:	e9 b8 fe ff ff       	jmp    c00009a4 <malloc_init_state>

c0000aec <dlfree>:
c0000aec:	57                   	push   edi
c0000aed:	56                   	push   esi
c0000aee:	53                   	push   ebx
c0000aef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000af3:	85 db                	test   ebx,ebx
c0000af5:	0f 84 e2 00 00 00    	je     c0000bdd <dlfree+0xf1>
c0000afb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000afe:	8b 0d a0 03 02 c0    	mov    ecx,DWORD PTR ds:0xc00203a0
c0000b04:	89 f0                	mov    eax,esi
c0000b06:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b09:	83 e0 fc             	and    eax,0xfffffffc
c0000b0c:	39 c1                	cmp    ecx,eax
c0000b0e:	72 24                	jb     c0000b34 <dlfree+0x48>
c0000b10:	83 c9 03             	or     ecx,0x3
c0000b13:	c1 e8 03             	shr    eax,0x3
c0000b16:	89 0d a0 03 02 c0    	mov    DWORD PTR ds:0xc00203a0,ecx
c0000b1c:	83 e8 02             	sub    eax,0x2
c0000b1f:	8b 0c 85 a4 03 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdfc5c]
c0000b26:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b28:	89 14 85 a4 03 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfc5c],edx
c0000b2f:	e9 a9 00 00 00       	jmp    c0000bdd <dlfree+0xf1>
c0000b34:	83 e6 02             	and    esi,0x2
c0000b37:	0f 85 a0 00 00 00    	jne    c0000bdd <dlfree+0xf1>
c0000b3d:	83 c9 01             	or     ecx,0x1
c0000b40:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b43:	89 0d a0 03 02 c0    	mov    DWORD PTR ds:0xc00203a0,ecx
c0000b49:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b4c:	83 e1 fc             	and    ecx,0xfffffffc
c0000b4f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b53:	75 13                	jne    c0000b68 <dlfree+0x7c>
c0000b55:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b58:	29 da                	sub    edx,ebx
c0000b5a:	01 d8                	add    eax,ebx
c0000b5c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b5f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b62:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b65:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b68:	39 35 cc 03 02 c0    	cmp    DWORD PTR ds:0xc00203cc,esi
c0000b6e:	74 40                	je     c0000bb0 <dlfree+0xc4>
c0000b70:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b74:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b77:	80 e3 01             	and    bl,0x1
c0000b7a:	75 0e                	jne    c0000b8a <dlfree+0x9e>
c0000b7c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b7f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b82:	01 c8                	add    eax,ecx
c0000b84:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b87:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b8a:	8b 0d dc 03 02 c0    	mov    ecx,DWORD PTR ds:0xc00203dc
c0000b90:	c7 42 0c d4 03 02 c0 	mov    DWORD PTR [edx+0xc],0xc00203d4
c0000b97:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000b9a:	89 15 dc 03 02 c0    	mov    DWORD PTR ds:0xc00203dc,edx
c0000ba0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ba3:	89 c1                	mov    ecx,eax
c0000ba5:	83 c9 01             	or     ecx,0x1
c0000ba8:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bab:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bae:	eb 10                	jmp    c0000bc0 <dlfree+0xd4>
c0000bb0:	01 c8                	add    eax,ecx
c0000bb2:	89 c1                	mov    ecx,eax
c0000bb4:	83 c9 01             	or     ecx,0x1
c0000bb7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bba:	89 15 cc 03 02 c0    	mov    DWORD PTR ds:0xc00203cc,edx
c0000bc0:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bc5:	76 16                	jbe    c0000bdd <dlfree+0xf1>
c0000bc7:	f6 05 a0 03 02 c0 02 	test   BYTE PTR ds:0xc00203a0,0x2
c0000bce:	74 0d                	je     c0000bdd <dlfree+0xf1>
c0000bd0:	5b                   	pop    ebx
c0000bd1:	b8 a0 03 02 c0       	mov    eax,0xc00203a0
c0000bd6:	5e                   	pop    esi
c0000bd7:	5f                   	pop    edi
c0000bd8:	e9 28 fe ff ff       	jmp    c0000a05 <malloc_consolidate>
c0000bdd:	5b                   	pop    ebx
c0000bde:	5e                   	pop    esi
c0000bdf:	5f                   	pop    edi
c0000be0:	c3                   	ret    

c0000be1 <sYSMALLOc>:
c0000be1:	55                   	push   ebp
c0000be2:	57                   	push   edi
c0000be3:	56                   	push   esi
c0000be4:	53                   	push   ebx
c0000be5:	89 d3                	mov    ebx,edx
c0000be7:	83 ec 2c             	sub    esp,0x2c
c0000bea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000bee:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000bf4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000bf7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000bfa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000bfe:	74 1f                	je     c0000c1f <sYSMALLOc+0x3e>
c0000c00:	89 d8                	mov    eax,ebx
c0000c02:	e8 fe fd ff ff       	call   c0000a05 <malloc_consolidate>
c0000c07:	83 ec 0c             	sub    esp,0xc
c0000c0a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c0e:	83 e8 07             	sub    eax,0x7
c0000c11:	50                   	push   eax
c0000c12:	e8 30 02 00 00       	call   c0000e47 <dlmalloc>
c0000c17:	83 c4 10             	add    esp,0x10
c0000c1a:	e9 20 02 00 00       	jmp    c0000e3f <sYSMALLOc+0x25e>
c0000c1f:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c22:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c28:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c2b:	83 e0 fc             	and    eax,0xfffffffc
c0000c2e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000c32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c36:	83 c0 10             	add    eax,0x10
c0000c39:	01 c1                	add    ecx,eax
c0000c3b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000c3f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c46:	74 04                	je     c0000c4c <sYSMALLOc+0x6b>
c0000c48:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000c4c:	f7 da                	neg    edx
c0000c4e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000c52:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000c56:	21 d1                	and    ecx,edx
c0000c58:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000c5c:	7f 07                	jg     c0000c65 <sYSMALLOc+0x84>
c0000c5e:	31 c0                	xor    eax,eax
c0000c60:	e9 da 01 00 00       	jmp    c0000e3f <sYSMALLOc+0x25e>
c0000c65:	83 ec 0c             	sub    esp,0xc
c0000c68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c6c:	e8 e3 5f 00 00       	call   c0006c54 <sbrk>
c0000c71:	83 c4 10             	add    esp,0x10
c0000c74:	89 c6                	mov    esi,eax
c0000c76:	83 f8 ff             	cmp    eax,0xffffffff
c0000c79:	74 e3                	je     c0000c5e <sYSMALLOc+0x7d>
c0000c7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c7f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000c83:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000c86:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000c8c:	39 f1                	cmp    ecx,esi
c0000c8e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000c94:	75 13                	jne    c0000ca9 <sYSMALLOc+0xc8>
c0000c96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c9a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000c9e:	83 c8 01             	or     eax,0x1
c0000ca1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ca4:	e9 3e 01 00 00       	jmp    c0000de7 <sYSMALLOc+0x206>
c0000ca9:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000caf:	88 d0                	mov    al,dl
c0000cb1:	83 e0 01             	and    eax,0x1
c0000cb4:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000cb9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000cbd:	0f 95 c0             	setne  al
c0000cc0:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000cc4:	39 f1                	cmp    ecx,esi
c0000cc6:	76 12                	jbe    c0000cda <sYSMALLOc+0xf9>
c0000cc8:	84 c0                	test   al,al
c0000cca:	74 0e                	je     c0000cda <sYSMALLOc+0xf9>
c0000ccc:	83 e2 fe             	and    edx,0xfffffffe
c0000ccf:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000cd5:	e9 83 00 00 00       	jmp    c0000d5d <sYSMALLOc+0x17c>
c0000cda:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000cdf:	74 7c                	je     c0000d5d <sYSMALLOc+0x17c>
c0000ce1:	84 c0                	test   al,al
c0000ce3:	74 0c                	je     c0000cf1 <sYSMALLOc+0x110>
c0000ce5:	89 f0                	mov    eax,esi
c0000ce7:	29 c8                	sub    eax,ecx
c0000ce9:	01 e8                	add    eax,ebp
c0000ceb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000cf1:	89 f2                	mov    edx,esi
c0000cf3:	83 e2 07             	and    edx,0x7
c0000cf6:	74 0c                	je     c0000d04 <sYSMALLOc+0x123>
c0000cf8:	b8 08 00 00 00       	mov    eax,0x8
c0000cfd:	29 d0                	sub    eax,edx
c0000cff:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d02:	eb 04                	jmp    c0000d08 <sYSMALLOc+0x127>
c0000d04:	89 f5                	mov    ebp,esi
c0000d06:	31 c0                	xor    eax,eax
c0000d08:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d0c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d14:	01 c1                	add    ecx,eax
c0000d16:	83 ec 0c             	sub    esp,0xc
c0000d19:	01 f1                	add    ecx,esi
c0000d1b:	01 ca                	add    edx,ecx
c0000d1d:	29 c8                	sub    eax,ecx
c0000d1f:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d23:	01 c2                	add    edx,eax
c0000d25:	52                   	push   edx
c0000d26:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d2a:	e8 25 5f 00 00       	call   c0006c54 <sbrk>
c0000d2f:	83 c4 10             	add    esp,0x10
c0000d32:	83 f8 ff             	cmp    eax,0xffffffff
c0000d35:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d39:	75 0f                	jne    c0000d4a <sYSMALLOc+0x169>
c0000d3b:	83 ec 0c             	sub    esp,0xc
c0000d3e:	6a 00                	push   0x0
c0000d40:	e8 0f 5f 00 00       	call   c0006c54 <sbrk>
c0000d45:	83 c4 10             	add    esp,0x10
c0000d48:	eb 30                	jmp    c0000d7a <sYSMALLOc+0x199>
c0000d4a:	39 c6                	cmp    esi,eax
c0000d4c:	76 33                	jbe    c0000d81 <sYSMALLOc+0x1a0>
c0000d4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d52:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000d59:	01 f0                	add    eax,esi
c0000d5b:	eb 1d                	jmp    c0000d7a <sYSMALLOc+0x199>
c0000d5d:	83 ec 0c             	sub    esp,0xc
c0000d60:	89 f5                	mov    ebp,esi
c0000d62:	6a 00                	push   0x0
c0000d64:	e8 eb 5e 00 00       	call   c0006c54 <sbrk>
c0000d69:	89 c2                	mov    edx,eax
c0000d6b:	29 f2                	sub    edx,esi
c0000d6d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000d71:	83 c4 10             	add    esp,0x10
c0000d74:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d7a:	31 d2                	xor    edx,edx
c0000d7c:	83 f8 ff             	cmp    eax,0xffffffff
c0000d7f:	74 66                	je     c0000de7 <sYSMALLOc+0x206>
c0000d81:	29 e8                	sub    eax,ebp
c0000d83:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000d86:	01 d0                	add    eax,edx
c0000d88:	83 c8 01             	or     eax,0x1
c0000d8b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000d8e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d94:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d99:	74 4c                	je     c0000de7 <sYSMALLOc+0x206>
c0000d9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d9f:	83 e8 0c             	sub    eax,0xc
c0000da2:	83 e0 f8             	and    eax,0xfffffff8
c0000da5:	89 c2                	mov    edx,eax
c0000da7:	83 ca 01             	or     edx,0x1
c0000daa:	83 f8 0f             	cmp    eax,0xf
c0000dad:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000db0:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000db8:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000dc0:	76 25                	jbe    c0000de7 <sYSMALLOc+0x206>
c0000dc2:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dc8:	83 ec 0c             	sub    esp,0xc
c0000dcb:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000dd5:	83 c7 08             	add    edi,0x8
c0000dd8:	57                   	push   edi
c0000dd9:	e8 0e fd ff ff       	call   c0000aec <dlfree>
c0000dde:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000ded:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df3:	73 06                	jae    c0000dfb <sYSMALLOc+0x21a>
c0000df5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000dfb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e01:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e07:	73 06                	jae    c0000e0f <sYSMALLOc+0x22e>
c0000e09:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e0f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e12:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e15:	83 e2 fc             	and    edx,0xfffffffc
c0000e18:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e1c:	0f 82 3c fe ff ff    	jb     c0000c5e <sYSMALLOc+0x7d>
c0000e22:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e26:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e29:	29 fa                	sub    edx,edi
c0000e2b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2e:	83 ca 01             	or     edx,0x1
c0000e31:	89 fb                	mov    ebx,edi
c0000e33:	83 c0 08             	add    eax,0x8
c0000e36:	83 cb 01             	or     ebx,0x1
c0000e39:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e3c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e3f:	83 c4 2c             	add    esp,0x2c
c0000e42:	5b                   	pop    ebx
c0000e43:	5e                   	pop    esi
c0000e44:	5f                   	pop    edi
c0000e45:	5d                   	pop    ebp
c0000e46:	c3                   	ret    

c0000e47 <dlmalloc>:
c0000e47:	55                   	push   ebp
c0000e48:	57                   	push   edi
c0000e49:	56                   	push   esi
c0000e4a:	53                   	push   ebx
c0000e4b:	83 ec 1c             	sub    esp,0x1c
c0000e4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e52:	83 f8 df             	cmp    eax,0xffffffdf
c0000e55:	0f 87 70 03 00 00    	ja     c00011cb <dlmalloc+0x384>
c0000e5b:	83 c0 0b             	add    eax,0xb
c0000e5e:	be 10 00 00 00       	mov    esi,0x10
c0000e63:	83 f8 0f             	cmp    eax,0xf
c0000e66:	76 05                	jbe    c0000e6d <dlmalloc+0x26>
c0000e68:	83 e0 f8             	and    eax,0xfffffff8
c0000e6b:	89 c6                	mov    esi,eax
c0000e6d:	8b 3d a0 03 02 c0    	mov    edi,DWORD PTR ds:0xc00203a0
c0000e73:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e79:	75 17                	jne    c0000e92 <dlmalloc+0x4b>
c0000e7b:	85 ff                	test   edi,edi
c0000e7d:	0f 85 05 03 00 00    	jne    c0001188 <dlmalloc+0x341>
c0000e83:	b8 a0 03 02 c0       	mov    eax,0xc00203a0
c0000e88:	e8 78 fb ff ff       	call   c0000a05 <malloc_consolidate>
c0000e8d:	e9 f6 02 00 00       	jmp    c0001188 <dlmalloc+0x341>
c0000e92:	39 f7                	cmp    edi,esi
c0000e94:	72 1f                	jb     c0000eb5 <dlmalloc+0x6e>
c0000e96:	89 f2                	mov    edx,esi
c0000e98:	c1 ea 03             	shr    edx,0x3
c0000e9b:	83 ea 02             	sub    edx,0x2
c0000e9e:	8b 04 95 a4 03 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfc5c]
c0000ea5:	85 c0                	test   eax,eax
c0000ea7:	74 0c                	je     c0000eb5 <dlmalloc+0x6e>
c0000ea9:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000eac:	89 0c 95 a4 03 02 c0 	mov    DWORD PTR [edx*4-0x3ffdfc5c],ecx
c0000eb3:	eb 30                	jmp    c0000ee5 <dlmalloc+0x9e>
c0000eb5:	89 f0                	mov    eax,esi
c0000eb7:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000ebd:	77 2e                	ja     c0000eed <dlmalloc+0xa6>
c0000ebf:	c1 e8 03             	shr    eax,0x3
c0000ec2:	8d 14 c5 d4 03 02 c0 	lea    edx,[eax*8-0x3ffdfc2c]
c0000ec9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ecd:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000ed0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000ed3:	39 c3                	cmp    ebx,eax
c0000ed5:	74 2e                	je     c0000f05 <dlmalloc+0xbe>
c0000ed7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000eda:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000edf:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ee2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000ee5:	83 c0 08             	add    eax,0x8
c0000ee8:	e9 e0 02 00 00       	jmp    c00011cd <dlmalloc+0x386>
c0000eed:	e8 8f fa ff ff       	call   c0000981 <largebin_index>
c0000ef2:	83 e7 02             	and    edi,0x2
c0000ef5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef9:	74 0a                	je     c0000f05 <dlmalloc+0xbe>
c0000efb:	b8 a0 03 02 c0       	mov    eax,0xc00203a0
c0000f00:	e8 00 fb ff ff       	call   c0000a05 <malloc_consolidate>
c0000f05:	8d 46 10             	lea    eax,[esi+0x10]
c0000f08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f0c:	8b 1d e0 03 02 c0    	mov    ebx,DWORD PTR ds:0xc00203e0
c0000f12:	81 fb d4 03 02 c0    	cmp    ebx,0xc00203d4
c0000f18:	0f 84 13 01 00 00    	je     c0001031 <dlmalloc+0x1ea>
c0000f1e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f21:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f24:	83 e7 fc             	and    edi,0xfffffffc
c0000f27:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2d:	77 4c                	ja     c0000f7b <dlmalloc+0x134>
c0000f2f:	3d d4 03 02 c0       	cmp    eax,0xc00203d4
c0000f34:	75 45                	jne    c0000f7b <dlmalloc+0x134>
c0000f36:	39 1d d0 03 02 c0    	cmp    DWORD PTR ds:0xc00203d0,ebx
c0000f3c:	75 3d                	jne    c0000f7b <dlmalloc+0x134>
c0000f3e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f42:	73 37                	jae    c0000f7b <dlmalloc+0x134>
c0000f44:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f47:	89 fa                	mov    edx,edi
c0000f49:	a3 dc 03 02 c0       	mov    ds:0xc00203dc,eax
c0000f4e:	a3 e0 03 02 c0       	mov    ds:0xc00203e0,eax
c0000f53:	a3 d0 03 02 c0       	mov    ds:0xc00203d0,eax
c0000f58:	29 f2                	sub    edx,esi
c0000f5a:	c7 40 08 d4 03 02 c0 	mov    DWORD PTR [eax+0x8],0xc00203d4
c0000f61:	c7 40 0c d4 03 02 c0 	mov    DWORD PTR [eax+0xc],0xc00203d4
c0000f68:	83 ce 01             	or     esi,0x1
c0000f6b:	89 d1                	mov    ecx,edx
c0000f6d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f70:	83 c9 01             	or     ecx,0x1
c0000f73:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f76:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f79:	eb 15                	jmp    c0000f90 <dlmalloc+0x149>
c0000f7b:	a3 e0 03 02 c0       	mov    ds:0xc00203e0,eax
c0000f80:	39 fe                	cmp    esi,edi
c0000f82:	c7 40 08 d4 03 02 c0 	mov    DWORD PTR [eax+0x8],0xc00203d4
c0000f89:	75 0d                	jne    c0000f98 <dlmalloc+0x151>
c0000f8b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f90:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f93:	e9 35 02 00 00       	jmp    c00011cd <dlmalloc+0x386>
c0000f98:	89 f8                	mov    eax,edi
c0000f9a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000fa0:	77 19                	ja     c0000fbb <dlmalloc+0x174>
c0000fa2:	c1 e8 03             	shr    eax,0x3
c0000fa5:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fa8:	83 c2 0d             	add    edx,0xd
c0000fab:	8d 2c 95 98 03 02 c0 	lea    ebp,[edx*4-0x3ffdfc68]
c0000fb2:	8b 14 95 a0 03 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdfc60]
c0000fb9:	eb 46                	jmp    c0001001 <dlmalloc+0x1ba>
c0000fbb:	e8 c1 f9 ff ff       	call   c0000981 <largebin_index>
c0000fc0:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fc3:	83 c2 0d             	add    edx,0xd
c0000fc6:	8d 0c 95 a0 03 02 c0 	lea    ecx,[edx*4-0x3ffdfc60]
c0000fcd:	8b 14 95 a0 03 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdfc60]
c0000fd4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fd7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fdb:	89 d5                	mov    ebp,edx
c0000fdd:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000fe1:	74 1e                	je     c0001001 <dlmalloc+0x1ba>
c0000fe3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000fe6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000fe9:	77 12                	ja     c0000ffd <dlmalloc+0x1b6>
c0000feb:	83 cf 01             	or     edi,0x1
c0000fee:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000ff1:	76 05                	jbe    c0000ff8 <dlmalloc+0x1b1>
c0000ff3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000ff6:	eb f6                	jmp    c0000fee <dlmalloc+0x1a7>
c0000ff8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000ffb:	eb 04                	jmp    c0001001 <dlmalloc+0x1ba>
c0000ffd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001001:	89 c7                	mov    edi,eax
c0001003:	88 c1                	mov    cl,al
c0001005:	c1 ff 05             	sar    edi,0x5
c0001008:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000100c:	bf 01 00 00 00       	mov    edi,0x1
c0001011:	d3 e7                	shl    edi,cl
c0001013:	89 f8                	mov    eax,edi
c0001015:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001019:	09 04 bd d4 06 02 c0 	or     DWORD PTR [edi*4-0x3ffdf92c],eax
c0001020:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001023:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001026:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001029:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000102c:	e9 db fe ff ff       	jmp    c0000f0c <dlmalloc+0xc5>
c0001031:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001037:	76 78                	jbe    c00010b1 <dlmalloc+0x26a>
c0001039:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000103d:	8d 04 c5 d4 03 02 c0 	lea    eax,[eax*8-0x3ffdfc2c]
c0001044:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001047:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000104a:	39 ca                	cmp    edx,ecx
c000104c:	74 63                	je     c00010b1 <dlmalloc+0x26a>
c000104e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001051:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001054:	83 e3 fc             	and    ebx,0xfffffffc
c0001057:	39 de                	cmp    esi,ebx
c0001059:	77 52                	ja     c00010ad <dlmalloc+0x266>
c000105b:	89 df                	mov    edi,ebx
c000105d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001060:	29 f7                	sub    edi,esi
c0001062:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001065:	01 d3                	add    ebx,edx
c0001067:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000106a:	83 ff 0f             	cmp    edi,0xf
c000106d:	8d 42 08             	lea    eax,[edx+0x8]
c0001070:	77 09                	ja     c000107b <dlmalloc+0x234>
c0001072:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001076:	e9 52 01 00 00       	jmp    c00011cd <dlmalloc+0x386>
c000107b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000107e:	83 ce 01             	or     esi,0x1
c0001081:	89 0d dc 03 02 c0    	mov    DWORD PTR ds:0xc00203dc,ecx
c0001087:	89 0d e0 03 02 c0    	mov    DWORD PTR ds:0xc00203e0,ecx
c000108d:	c7 41 08 d4 03 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00203d4
c0001094:	c7 41 0c d4 03 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00203d4
c000109b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000109e:	89 fa                	mov    edx,edi
c00010a0:	83 ca 01             	or     edx,0x1
c00010a3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a6:	89 3b                	mov    DWORD PTR [ebx],edi
c00010a8:	e9 20 01 00 00       	jmp    c00011cd <dlmalloc+0x386>
c00010ad:	89 c2                	mov    edx,eax
c00010af:	eb 99                	jmp    c000104a <dlmalloc+0x203>
c00010b1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010b5:	b8 01 00 00 00       	mov    eax,0x1
c00010ba:	41                   	inc    ecx
c00010bb:	89 cb                	mov    ebx,ecx
c00010bd:	8d 14 cd cc 03 02 c0 	lea    edx,[ecx*8-0x3ffdfc34]
c00010c4:	c1 eb 05             	shr    ebx,0x5
c00010c7:	d3 e0                	shl    eax,cl
c00010c9:	8b 3c 9d d4 06 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdf92c]
c00010d0:	39 f8                	cmp    eax,edi
c00010d2:	77 04                	ja     c00010d8 <dlmalloc+0x291>
c00010d4:	85 c0                	test   eax,eax
c00010d6:	75 26                	jne    c00010fe <dlmalloc+0x2b7>
c00010d8:	43                   	inc    ebx
c00010d9:	83 fb 02             	cmp    ebx,0x2
c00010dc:	0f 87 a6 00 00 00    	ja     c0001188 <dlmalloc+0x341>
c00010e2:	8b 3c 9d d4 06 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdf92c]
c00010e9:	85 ff                	test   edi,edi
c00010eb:	74 eb                	je     c00010d8 <dlmalloc+0x291>
c00010ed:	89 d8                	mov    eax,ebx
c00010ef:	c1 e0 06             	shl    eax,0x6
c00010f2:	8d 14 85 cc 03 02 c0 	lea    edx,[eax*4-0x3ffdfc34]
c00010f9:	b8 01 00 00 00       	mov    eax,0x1
c00010fe:	85 f8                	test   eax,edi
c0001100:	75 07                	jne    c0001109 <dlmalloc+0x2c2>
c0001102:	83 c2 08             	add    edx,0x8
c0001105:	01 c0                	add    eax,eax
c0001107:	eb f5                	jmp    c00010fe <dlmalloc+0x2b7>
c0001109:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000110c:	39 ca                	cmp    edx,ecx
c000110e:	75 14                	jne    c0001124 <dlmalloc+0x2dd>
c0001110:	89 c1                	mov    ecx,eax
c0001112:	83 c2 08             	add    edx,0x8
c0001115:	f7 d1                	not    ecx
c0001117:	01 c0                	add    eax,eax
c0001119:	21 cf                	and    edi,ecx
c000111b:	89 3c 9d d4 06 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdf92c],edi
c0001122:	eb ac                	jmp    c00010d0 <dlmalloc+0x289>
c0001124:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001127:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000112a:	83 e0 fc             	and    eax,0xfffffffc
c000112d:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001130:	89 c3                	mov    ebx,eax
c0001132:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001135:	29 f3                	sub    ebx,esi
c0001137:	8d 14 01             	lea    edx,[ecx+eax*1]
c000113a:	83 fb 0f             	cmp    ebx,0xf
c000113d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001140:	77 09                	ja     c000114b <dlmalloc+0x304>
c0001142:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001146:	e9 82 00 00 00       	jmp    c00011cd <dlmalloc+0x386>
c000114b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000114e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001154:	89 3d dc 03 02 c0    	mov    DWORD PTR ds:0xc00203dc,edi
c000115a:	89 3d e0 03 02 c0    	mov    DWORD PTR ds:0xc00203e0,edi
c0001160:	c7 47 08 d4 03 02 c0 	mov    DWORD PTR [edi+0x8],0xc00203d4
c0001167:	c7 47 0c d4 03 02 c0 	mov    DWORD PTR [edi+0xc],0xc00203d4
c000116e:	77 06                	ja     c0001176 <dlmalloc+0x32f>
c0001170:	89 3d d0 03 02 c0    	mov    DWORD PTR ds:0xc00203d0,edi
c0001176:	83 ce 01             	or     esi,0x1
c0001179:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000117c:	89 d9                	mov    ecx,ebx
c000117e:	83 c9 01             	or     ecx,0x1
c0001181:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001184:	89 1a                	mov    DWORD PTR [edx],ebx
c0001186:	eb 45                	jmp    c00011cd <dlmalloc+0x386>
c0001188:	a1 cc 03 02 c0       	mov    eax,ds:0xc00203cc
c000118d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001190:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001193:	83 e2 fc             	and    edx,0xfffffffc
c0001196:	39 d1                	cmp    ecx,edx
c0001198:	77 1e                	ja     c00011b8 <dlmalloc+0x371>
c000119a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000119d:	89 f3                	mov    ebx,esi
c000119f:	89 0d cc 03 02 c0    	mov    DWORD PTR ds:0xc00203cc,ecx
c00011a5:	83 cb 01             	or     ebx,0x1
c00011a8:	29 f2                	sub    edx,esi
c00011aa:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011ad:	83 ca 01             	or     edx,0x1
c00011b0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011b3:	e9 2d fd ff ff       	jmp    c0000ee5 <dlmalloc+0x9e>
c00011b8:	83 c4 1c             	add    esp,0x1c
c00011bb:	89 f0                	mov    eax,esi
c00011bd:	5b                   	pop    ebx
c00011be:	ba a0 03 02 c0       	mov    edx,0xc00203a0
c00011c3:	5e                   	pop    esi
c00011c4:	5f                   	pop    edi
c00011c5:	5d                   	pop    ebp
c00011c6:	e9 16 fa ff ff       	jmp    c0000be1 <sYSMALLOc>
c00011cb:	31 c0                	xor    eax,eax
c00011cd:	83 c4 1c             	add    esp,0x1c
c00011d0:	5b                   	pop    ebx
c00011d1:	5e                   	pop    esi
c00011d2:	5f                   	pop    edi
c00011d3:	5d                   	pop    ebp
c00011d4:	c3                   	ret    

c00011d5 <iALLOc>:
c00011d5:	55                   	push   ebp
c00011d6:	89 c5                	mov    ebp,eax
c00011d8:	57                   	push   edi
c00011d9:	56                   	push   esi
c00011da:	53                   	push   ebx
c00011db:	83 ec 2c             	sub    esp,0x2c
c00011de:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011e2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011ea:	83 3d a0 03 02 c0 00 	cmp    DWORD PTR ds:0xc00203a0,0x0
c00011f1:	75 12                	jne    c0001205 <iALLOc+0x30>
c00011f3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00011f7:	b8 a0 03 02 c0       	mov    eax,0xc00203a0
c00011fc:	e8 04 f8 ff ff       	call   c0000a05 <malloc_consolidate>
c0001201:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001205:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000120a:	74 12                	je     c000121e <iALLOc+0x49>
c000120c:	85 ed                	test   ebp,ebp
c000120e:	0f 84 64 01 00 00    	je     c0001378 <iALLOc+0x1a3>
c0001214:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000121c:	eb 33                	jmp    c0001251 <iALLOc+0x7c>
c000121e:	85 ed                	test   ebp,ebp
c0001220:	75 14                	jne    c0001236 <iALLOc+0x61>
c0001222:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000122a:	83 c4 2c             	add    esp,0x2c
c000122d:	5b                   	pop    ebx
c000122e:	5e                   	pop    esi
c000122f:	5f                   	pop    edi
c0001230:	5d                   	pop    ebp
c0001231:	e9 11 fc ff ff       	jmp    c0000e47 <dlmalloc>
c0001236:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000123d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001245:	83 f8 0f             	cmp    eax,0xf
c0001248:	76 07                	jbe    c0001251 <iALLOc+0x7c>
c000124a:	83 e0 f8             	and    eax,0xfffffff8
c000124d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001251:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001256:	75 09                	jne    c0001261 <iALLOc+0x8c>
c0001258:	89 d0                	mov    eax,edx
c000125a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000125d:	31 f6                	xor    esi,esi
c000125f:	eb 3b                	jmp    c000129c <iALLOc+0xc7>
c0001261:	8b 02                	mov    eax,DWORD PTR [edx]
c0001263:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000126b:	83 c0 0b             	add    eax,0xb
c000126e:	83 f8 0f             	cmp    eax,0xf
c0001271:	76 07                	jbe    c000127a <iALLOc+0xa5>
c0001273:	83 e0 f8             	and    eax,0xfffffff8
c0001276:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000127a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000127e:	0f af f5             	imul   esi,ebp
c0001281:	eb 25                	jmp    c00012a8 <iALLOc+0xd3>
c0001283:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001285:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001288:	bb 10 00 00 00       	mov    ebx,0x10
c000128d:	83 f9 0f             	cmp    ecx,0xf
c0001290:	76 05                	jbe    c0001297 <iALLOc+0xc2>
c0001292:	83 e1 f8             	and    ecx,0xfffffff8
c0001295:	89 cb                	mov    ebx,ecx
c0001297:	01 de                	add    esi,ebx
c0001299:	83 c0 04             	add    eax,0x4
c000129c:	39 c7                	cmp    edi,eax
c000129e:	75 e3                	jne    c0001283 <iALLOc+0xae>
c00012a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012ac:	8b 1d f4 06 02 c0    	mov    ebx,DWORD PTR ds:0xc00206f4
c00012b2:	83 ec 0c             	sub    esp,0xc
c00012b5:	c7 05 f4 06 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00206f4,0x0
c00012bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012c3:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012c7:	50                   	push   eax
c00012c8:	e8 7a fb ff ff       	call   c0000e47 <dlmalloc>
c00012cd:	83 c4 10             	add    esp,0x10
c00012d0:	89 1d f4 06 02 c0    	mov    DWORD PTR ds:0xc00206f4,ebx
c00012d6:	85 c0                	test   eax,eax
c00012d8:	0f 84 92 00 00 00    	je     c0001370 <iALLOc+0x19b>
c00012de:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012e1:	8d 78 f8             	lea    edi,[eax-0x8]
c00012e4:	83 e3 fc             	and    ebx,0xfffffffc
c00012e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012eb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012f0:	74 1e                	je     c0001310 <iALLOc+0x13b>
c00012f2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00012f6:	89 d9                	mov    ecx,ebx
c00012f8:	52                   	push   edx
c00012f9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00012fd:	83 e9 04             	sub    ecx,0x4
c0001300:	51                   	push   ecx
c0001301:	6a 00                	push   0x0
c0001303:	50                   	push   eax
c0001304:	e8 9f f1 ff ff       	call   c00004a8 <memset>
c0001309:	83 c4 10             	add    esp,0x10
c000130c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001310:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001315:	75 14                	jne    c000132b <iALLOc+0x156>
c0001317:	8d 04 37             	lea    eax,[edi+esi*1]
c000131a:	29 f3                	sub    ebx,esi
c000131c:	8d 48 08             	lea    ecx,[eax+0x8]
c000131f:	83 cb 01             	or     ebx,0x1
c0001322:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001326:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001329:	89 f3                	mov    ebx,esi
c000132b:	31 c0                	xor    eax,eax
c000132d:	4d                   	dec    ebp
c000132e:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001331:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001335:	39 c5                	cmp    ebp,eax
c0001337:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000133a:	74 2c                	je     c0001368 <iALLOc+0x193>
c000133c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001340:	85 c9                	test   ecx,ecx
c0001342:	75 15                	jne    c0001359 <iALLOc+0x184>
c0001344:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001347:	8d 71 0b             	lea    esi,[ecx+0xb]
c000134a:	b9 10 00 00 00       	mov    ecx,0x10
c000134f:	83 fe 0f             	cmp    esi,0xf
c0001352:	76 05                	jbe    c0001359 <iALLOc+0x184>
c0001354:	83 e6 f8             	and    esi,0xfffffff8
c0001357:	89 f1                	mov    ecx,esi
c0001359:	89 ce                	mov    esi,ecx
c000135b:	29 cb                	sub    ebx,ecx
c000135d:	83 ce 01             	or     esi,0x1
c0001360:	40                   	inc    eax
c0001361:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001364:	01 cf                	add    edi,ecx
c0001366:	eb c6                	jmp    c000132e <iALLOc+0x159>
c0001368:	83 cb 01             	or     ebx,0x1
c000136b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000136e:	eb 08                	jmp    c0001378 <iALLOc+0x1a3>
c0001370:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001378:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000137c:	83 c4 2c             	add    esp,0x2c
c000137f:	5b                   	pop    ebx
c0001380:	5e                   	pop    esi
c0001381:	5f                   	pop    edi
c0001382:	5d                   	pop    ebp
c0001383:	c3                   	ret    

c0001384 <dlrealloc>:
c0001384:	55                   	push   ebp
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 1c             	sub    esp,0x1c
c000138b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000138f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001393:	85 db                	test   ebx,ebx
c0001395:	75 10                	jne    c00013a7 <dlrealloc+0x23>
c0001397:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000139b:	83 c4 1c             	add    esp,0x1c
c000139e:	5b                   	pop    ebx
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 a0 fa ff ff       	jmp    c0000e47 <dlmalloc>
c00013a7:	83 f8 df             	cmp    eax,0xffffffdf
c00013aa:	76 07                	jbe    c00013b3 <dlrealloc+0x2f>
c00013ac:	31 db                	xor    ebx,ebx
c00013ae:	e9 6a 01 00 00       	jmp    c000151d <dlrealloc+0x199>
c00013b3:	83 c0 0b             	add    eax,0xb
c00013b6:	bd 10 00 00 00       	mov    ebp,0x10
c00013bb:	83 f8 0f             	cmp    eax,0xf
c00013be:	76 05                	jbe    c00013c5 <dlrealloc+0x41>
c00013c0:	83 e0 f8             	and    eax,0xfffffff8
c00013c3:	89 c5                	mov    ebp,eax
c00013c5:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013c8:	8d 7b f8             	lea    edi,[ebx-0x8]
c00013cb:	89 c6                	mov    esi,eax
c00013cd:	83 e6 fc             	and    esi,0xfffffffc
c00013d0:	a8 02                	test   al,0x2
c00013d2:	75 d8                	jne    c00013ac <dlrealloc+0x28>
c00013d4:	39 f5                	cmp    ebp,esi
c00013d6:	0f 86 04 01 00 00    	jbe    c00014e0 <dlrealloc+0x15c>
c00013dc:	8d 14 37             	lea    edx,[edi+esi*1]
c00013df:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013e2:	39 15 cc 03 02 c0    	cmp    DWORD PTR ds:0xc00203cc,edx
c00013e8:	75 33                	jne    c000141d <dlrealloc+0x99>
c00013ea:	83 e1 fc             	and    ecx,0xfffffffc
c00013ed:	01 f1                	add    ecx,esi
c00013ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f3:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00013f6:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013fa:	77 49                	ja     c0001445 <dlrealloc+0xc1>
c00013fc:	01 ef                	add    edi,ebp
c00013fe:	83 e0 01             	and    eax,0x1
c0001401:	09 e8                	or     eax,ebp
c0001403:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001406:	89 3d cc 03 02 c0    	mov    DWORD PTR ds:0xc00203cc,edi
c000140c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001410:	29 e8                	sub    eax,ebp
c0001412:	83 c8 01             	or     eax,0x1
c0001415:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001418:	e9 00 01 00 00       	jmp    c000151d <dlrealloc+0x199>
c000141d:	89 c8                	mov    eax,ecx
c000141f:	83 e0 fe             	and    eax,0xfffffffe
c0001422:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001427:	75 1c                	jne    c0001445 <dlrealloc+0xc1>
c0001429:	83 e1 fc             	and    ecx,0xfffffffc
c000142c:	01 f1                	add    ecx,esi
c000142e:	39 cd                	cmp    ebp,ecx
c0001430:	77 13                	ja     c0001445 <dlrealloc+0xc1>
c0001432:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001435:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001438:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000143b:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000143e:	89 ce                	mov    esi,ecx
c0001440:	e9 9b 00 00 00       	jmp    c00014e0 <dlrealloc+0x15c>
c0001445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001449:	8d 45 f9             	lea    eax,[ebp-0x7]
c000144c:	83 ec 0c             	sub    esp,0xc
c000144f:	50                   	push   eax
c0001450:	e8 f2 f9 ff ff       	call   c0000e47 <dlmalloc>
c0001455:	83 c4 10             	add    esp,0x10
c0001458:	85 c0                	test   eax,eax
c000145a:	0f 84 4c ff ff ff    	je     c00013ac <dlrealloc+0x28>
c0001460:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001463:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001467:	39 ca                	cmp    edx,ecx
c0001469:	75 0a                	jne    c0001475 <dlrealloc+0xf1>
c000146b:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000146e:	83 e0 fc             	and    eax,0xfffffffc
c0001471:	01 c6                	add    esi,eax
c0001473:	eb 6b                	jmp    c00014e0 <dlrealloc+0x15c>
c0001475:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001478:	83 f9 27             	cmp    ecx,0x27
c000147b:	76 08                	jbe    c0001485 <dlrealloc+0x101>
c000147d:	89 de                	mov    esi,ebx
c000147f:	89 c7                	mov    edi,eax
c0001481:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001483:	eb 43                	jmp    c00014c8 <dlrealloc+0x144>
c0001485:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001487:	83 f9 13             	cmp    ecx,0x13
c000148a:	89 10                	mov    DWORD PTR [eax],edx
c000148c:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000148f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001492:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001495:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001498:	76 2e                	jbe    c00014c8 <dlrealloc+0x144>
c000149a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000149d:	83 f9 1b             	cmp    ecx,0x1b
c00014a0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00014a3:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00014a6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00014a9:	76 1d                	jbe    c00014c8 <dlrealloc+0x144>
c00014ab:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00014ae:	83 f9 23             	cmp    ecx,0x23
c00014b1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00014b4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00014b7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00014ba:	76 0c                	jbe    c00014c8 <dlrealloc+0x144>
c00014bc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00014bf:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00014c2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00014c5:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00014c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014cc:	83 ec 0c             	sub    esp,0xc
c00014cf:	53                   	push   ebx
c00014d0:	e8 17 f6 ff ff       	call   c0000aec <dlfree>
c00014d5:	83 c4 10             	add    esp,0x10
c00014d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014dc:	89 c3                	mov    ebx,eax
c00014de:	eb 3d                	jmp    c000151d <dlrealloc+0x199>
c00014e0:	89 f2                	mov    edx,esi
c00014e2:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014e5:	29 ea                	sub    edx,ebp
c00014e7:	83 e1 01             	and    ecx,0x1
c00014ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00014ed:	83 fa 0f             	cmp    edx,0xf
c00014f0:	77 0b                	ja     c00014fd <dlrealloc+0x179>
c00014f2:	09 ce                	or     esi,ecx
c00014f4:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00014f7:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00014fb:	eb 20                	jmp    c000151d <dlrealloc+0x199>
c00014fd:	01 ef                	add    edi,ebp
c00014ff:	83 ec 0c             	sub    esp,0xc
c0001502:	09 cd                	or     ebp,ecx
c0001504:	83 ca 01             	or     edx,0x1
c0001507:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000150a:	83 c7 08             	add    edi,0x8
c000150d:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001510:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001514:	57                   	push   edi
c0001515:	e8 d2 f5 ff ff       	call   c0000aec <dlfree>
c000151a:	83 c4 10             	add    esp,0x10
c000151d:	83 c4 1c             	add    esp,0x1c
c0001520:	89 d8                	mov    eax,ebx
c0001522:	5b                   	pop    ebx
c0001523:	5e                   	pop    esi
c0001524:	5f                   	pop    edi
c0001525:	5d                   	pop    ebp
c0001526:	c3                   	ret    

c0001527 <dlmemalign>:
c0001527:	55                   	push   ebp
c0001528:	57                   	push   edi
c0001529:	56                   	push   esi
c000152a:	53                   	push   ebx
c000152b:	83 ec 0c             	sub    esp,0xc
c000152e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001532:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001536:	83 fa 08             	cmp    edx,0x8
c0001539:	77 10                	ja     c000154b <dlmemalign+0x24>
c000153b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000153f:	83 c4 0c             	add    esp,0xc
c0001542:	5b                   	pop    ebx
c0001543:	5e                   	pop    esi
c0001544:	5f                   	pop    edi
c0001545:	5d                   	pop    ebp
c0001546:	e9 fc f8 ff ff       	jmp    c0000e47 <dlmalloc>
c000154b:	bf 10 00 00 00       	mov    edi,0x10
c0001550:	83 fa 0f             	cmp    edx,0xf
c0001553:	76 13                	jbe    c0001568 <dlmemalign+0x41>
c0001555:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001558:	85 d1                	test   ecx,edx
c000155a:	75 04                	jne    c0001560 <dlmemalign+0x39>
c000155c:	89 d7                	mov    edi,edx
c000155e:	eb 08                	jmp    c0001568 <dlmemalign+0x41>
c0001560:	39 d7                	cmp    edi,edx
c0001562:	73 04                	jae    c0001568 <dlmemalign+0x41>
c0001564:	01 ff                	add    edi,edi
c0001566:	eb f8                	jmp    c0001560 <dlmemalign+0x39>
c0001568:	83 f8 df             	cmp    eax,0xffffffdf
c000156b:	76 07                	jbe    c0001574 <dlmemalign+0x4d>
c000156d:	31 c0                	xor    eax,eax
c000156f:	e9 ce 00 00 00       	jmp    c0001642 <dlmemalign+0x11b>
c0001574:	83 c0 0b             	add    eax,0xb
c0001577:	bd 10 00 00 00       	mov    ebp,0x10
c000157c:	83 f8 0f             	cmp    eax,0xf
c000157f:	76 05                	jbe    c0001586 <dlmemalign+0x5f>
c0001581:	83 e0 f8             	and    eax,0xfffffff8
c0001584:	89 c5                	mov    ebp,eax
c0001586:	83 ec 0c             	sub    esp,0xc
c0001589:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000158d:	50                   	push   eax
c000158e:	e8 b4 f8 ff ff       	call   c0000e47 <dlmalloc>
c0001593:	83 c4 10             	add    esp,0x10
c0001596:	89 c1                	mov    ecx,eax
c0001598:	85 c0                	test   eax,eax
c000159a:	74 d1                	je     c000156d <dlmemalign+0x46>
c000159c:	31 d2                	xor    edx,edx
c000159e:	8d 70 f8             	lea    esi,[eax-0x8]
c00015a1:	f7 f7                	div    edi
c00015a3:	85 d2                	test   edx,edx
c00015a5:	74 62                	je     c0001609 <dlmemalign+0xe2>
c00015a7:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015ab:	89 f8                	mov    eax,edi
c00015ad:	f7 d8                	neg    eax
c00015af:	21 c3                	and    ebx,eax
c00015b1:	83 eb 08             	sub    ebx,0x8
c00015b4:	89 d8                	mov    eax,ebx
c00015b6:	29 f0                	sub    eax,esi
c00015b8:	83 f8 0f             	cmp    eax,0xf
c00015bb:	77 02                	ja     c00015bf <dlmemalign+0x98>
c00015bd:	01 fb                	add    ebx,edi
c00015bf:	89 d8                	mov    eax,ebx
c00015c1:	29 f0                	sub    eax,esi
c00015c3:	89 c6                	mov    esi,eax
c00015c5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015c8:	89 c2                	mov    edx,eax
c00015ca:	83 e2 fc             	and    edx,0xfffffffc
c00015cd:	29 f2                	sub    edx,esi
c00015cf:	a8 02                	test   al,0x2
c00015d1:	74 10                	je     c00015e3 <dlmemalign+0xbc>
c00015d3:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015d6:	83 ca 02             	or     edx,0x2
c00015d9:	8d 43 08             	lea    eax,[ebx+0x8]
c00015dc:	89 33                	mov    DWORD PTR [ebx],esi
c00015de:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015e1:	eb 5f                	jmp    c0001642 <dlmemalign+0x11b>
c00015e3:	83 ec 0c             	sub    esp,0xc
c00015e6:	89 d0                	mov    eax,edx
c00015e8:	83 c8 01             	or     eax,0x1
c00015eb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00015ee:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00015f3:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015f6:	83 e0 01             	and    eax,0x1
c00015f9:	09 f0                	or     eax,esi
c00015fb:	89 de                	mov    esi,ebx
c00015fd:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001600:	51                   	push   ecx
c0001601:	e8 e6 f4 ff ff       	call   c0000aec <dlfree>
c0001606:	83 c4 10             	add    esp,0x10
c0001609:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000160c:	a8 02                	test   al,0x2
c000160e:	75 2f                	jne    c000163f <dlmemalign+0x118>
c0001610:	83 e0 fc             	and    eax,0xfffffffc
c0001613:	8d 55 10             	lea    edx,[ebp+0x10]
c0001616:	39 c2                	cmp    edx,eax
c0001618:	73 25                	jae    c000163f <dlmemalign+0x118>
c000161a:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000161d:	83 ec 0c             	sub    esp,0xc
c0001620:	29 e8                	sub    eax,ebp
c0001622:	83 c2 08             	add    edx,0x8
c0001625:	83 c8 01             	or     eax,0x1
c0001628:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000162b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000162e:	83 e0 01             	and    eax,0x1
c0001631:	09 c5                	or     ebp,eax
c0001633:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001636:	52                   	push   edx
c0001637:	e8 b0 f4 ff ff       	call   c0000aec <dlfree>
c000163c:	83 c4 10             	add    esp,0x10
c000163f:	8d 46 08             	lea    eax,[esi+0x8]
c0001642:	83 c4 0c             	add    esp,0xc
c0001645:	5b                   	pop    ebx
c0001646:	5e                   	pop    esi
c0001647:	5f                   	pop    edi
c0001648:	5d                   	pop    ebp
c0001649:	c3                   	ret    

c000164a <dlcalloc>:
c000164a:	53                   	push   ebx
c000164b:	83 ec 14             	sub    esp,0x14
c000164e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001652:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001657:	50                   	push   eax
c0001658:	e8 ea f7 ff ff       	call   c0000e47 <dlmalloc>
c000165d:	83 c4 10             	add    esp,0x10
c0001660:	89 c3                	mov    ebx,eax
c0001662:	85 c0                	test   eax,eax
c0001664:	74 77                	je     c00016dd <dlcalloc+0x93>
c0001666:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001669:	89 d0                	mov    eax,edx
c000166b:	83 e0 fc             	and    eax,0xfffffffc
c000166e:	80 e2 02             	and    dl,0x2
c0001671:	75 5a                	jne    c00016cd <dlcalloc+0x83>
c0001673:	83 e8 04             	sub    eax,0x4
c0001676:	83 f8 27             	cmp    eax,0x27
c0001679:	76 03                	jbe    c000167e <dlcalloc+0x34>
c000167b:	51                   	push   ecx
c000167c:	eb 53                	jmp    c00016d1 <dlcalloc+0x87>
c000167e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001684:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000168b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001692:	83 f8 13             	cmp    eax,0x13
c0001695:	76 46                	jbe    c00016dd <dlcalloc+0x93>
c0001697:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000169e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016a5:	83 f8 1b             	cmp    eax,0x1b
c00016a8:	76 33                	jbe    c00016dd <dlcalloc+0x93>
c00016aa:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016b1:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016b8:	83 f8 23             	cmp    eax,0x23
c00016bb:	76 20                	jbe    c00016dd <dlcalloc+0x93>
c00016bd:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016c4:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016cb:	eb 10                	jmp    c00016dd <dlcalloc+0x93>
c00016cd:	83 e8 08             	sub    eax,0x8
c00016d0:	52                   	push   edx
c00016d1:	50                   	push   eax
c00016d2:	6a 00                	push   0x0
c00016d4:	53                   	push   ebx
c00016d5:	e8 ce ed ff ff       	call   c00004a8 <memset>
c00016da:	83 c4 10             	add    esp,0x10
c00016dd:	89 d8                	mov    eax,ebx
c00016df:	83 c4 08             	add    esp,0x8
c00016e2:	5b                   	pop    ebx
c00016e3:	c3                   	ret    

c00016e4 <dlcfree>:
c00016e4:	e9 03 f4 ff ff       	jmp    c0000aec <dlfree>

c00016e9 <dlindependent_calloc>:
c00016e9:	83 ec 28             	sub    esp,0x28
c00016ec:	b9 03 00 00 00       	mov    ecx,0x3
c00016f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00016f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00016f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00016fd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001701:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001705:	e8 cb fa ff ff       	call   c00011d5 <iALLOc>
c000170a:	83 c4 2c             	add    esp,0x2c
c000170d:	c3                   	ret    

c000170e <dlindependent_comalloc>:
c000170e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001716:	31 c9                	xor    ecx,ecx
c0001718:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000171c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001720:	e9 b0 fa ff ff       	jmp    c00011d5 <iALLOc>

c0001725 <dlvalloc>:
c0001725:	83 ec 0c             	sub    esp,0xc
c0001728:	83 3d a0 03 02 c0 00 	cmp    DWORD PTR ds:0xc00203a0,0x0
c000172f:	75 0a                	jne    c000173b <dlvalloc+0x16>
c0001731:	b8 a0 03 02 c0       	mov    eax,0xc00203a0
c0001736:	e8 ca f2 ff ff       	call   c0000a05 <malloc_consolidate>
c000173b:	50                   	push   eax
c000173c:	50                   	push   eax
c000173d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001741:	ff 35 fc 06 02 c0    	push   DWORD PTR ds:0xc00206fc
c0001747:	e8 db fd ff ff       	call   c0001527 <dlmemalign>
c000174c:	83 c4 1c             	add    esp,0x1c
c000174f:	c3                   	ret    

c0001750 <dlpvalloc>:
c0001750:	83 ec 0c             	sub    esp,0xc
c0001753:	83 3d a0 03 02 c0 00 	cmp    DWORD PTR ds:0xc00203a0,0x0
c000175a:	75 0a                	jne    c0001766 <dlpvalloc+0x16>
c000175c:	b8 a0 03 02 c0       	mov    eax,0xc00203a0
c0001761:	e8 9f f2 ff ff       	call   c0000a05 <malloc_consolidate>
c0001766:	a1 fc 06 02 c0       	mov    eax,ds:0xc00206fc
c000176b:	89 c1                	mov    ecx,eax
c000176d:	52                   	push   edx
c000176e:	f7 d9                	neg    ecx
c0001770:	52                   	push   edx
c0001771:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001775:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001779:	21 ca                	and    edx,ecx
c000177b:	52                   	push   edx
c000177c:	50                   	push   eax
c000177d:	e8 a5 fd ff ff       	call   c0001527 <dlmemalign>
c0001782:	83 c4 1c             	add    esp,0x1c
c0001785:	c3                   	ret    

c0001786 <dlmalloc_trim>:
c0001786:	b8 a0 03 02 c0       	mov    eax,0xc00203a0
c000178b:	e8 75 f2 ff ff       	call   c0000a05 <malloc_consolidate>
c0001790:	31 c0                	xor    eax,eax
c0001792:	c3                   	ret    

c0001793 <dlmalloc_usable_size>:
c0001793:	53                   	push   ebx
c0001794:	31 c0                	xor    eax,eax
c0001796:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000179a:	85 c9                	test   ecx,ecx
c000179c:	74 24                	je     c00017c2 <dlmalloc_usable_size+0x2f>
c000179e:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017a1:	f6 c2 02             	test   dl,0x2
c00017a4:	74 08                	je     c00017ae <dlmalloc_usable_size+0x1b>
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	8d 42 f8             	lea    eax,[edx-0x8]
c00017ac:	eb 14                	jmp    c00017c2 <dlmalloc_usable_size+0x2f>
c00017ae:	89 d3                	mov    ebx,edx
c00017b0:	31 c0                	xor    eax,eax
c00017b2:	83 e3 fe             	and    ebx,0xfffffffe
c00017b5:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017ba:	74 06                	je     c00017c2 <dlmalloc_usable_size+0x2f>
c00017bc:	83 e2 fc             	and    edx,0xfffffffc
c00017bf:	8d 42 fc             	lea    eax,[edx-0x4]
c00017c2:	5b                   	pop    ebx
c00017c3:	c3                   	ret    

c00017c4 <dlmallinfo>:
c00017c4:	55                   	push   ebp
c00017c5:	57                   	push   edi
c00017c6:	56                   	push   esi
c00017c7:	53                   	push   ebx
c00017c8:	83 ec 08             	sub    esp,0x8
c00017cb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017cf:	83 3d cc 03 02 c0 00 	cmp    DWORD PTR ds:0xc00203cc,0x0
c00017d6:	75 0a                	jne    c00017e2 <dlmallinfo+0x1e>
c00017d8:	b8 a0 03 02 c0       	mov    eax,0xc00203a0
c00017dd:	e8 23 f2 ff ff       	call   c0000a05 <malloc_consolidate>
c00017e2:	a1 cc 03 02 c0       	mov    eax,ds:0xc00203cc
c00017e7:	31 ed                	xor    ebp,ebp
c00017e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00017ec:	31 c9                	xor    ecx,ecx
c00017ee:	83 e0 fc             	and    eax,0xfffffffc
c00017f1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00017f5:	31 c0                	xor    eax,eax
c00017f7:	8b 14 85 a4 03 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdfc5c]
c00017fe:	85 d2                	test   edx,edx
c0001800:	74 0e                	je     c0001810 <dlmallinfo+0x4c>
c0001802:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001805:	45                   	inc    ebp
c0001806:	83 e6 fc             	and    esi,0xfffffffc
c0001809:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000180c:	01 f1                	add    ecx,esi
c000180e:	eb ee                	jmp    c00017fe <dlmallinfo+0x3a>
c0001810:	40                   	inc    eax
c0001811:	83 f8 0a             	cmp    eax,0xa
c0001814:	75 e1                	jne    c00017f7 <dlmallinfo+0x33>
c0001816:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000181a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001821:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001824:	b8 d4 03 02 c0       	mov    eax,0xc00203d4
c0001829:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c000182c:	39 f0                	cmp    eax,esi
c000182e:	74 10                	je     c0001840 <dlmallinfo+0x7c>
c0001830:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001833:	ff 04 24             	inc    DWORD PTR [esp]
c0001836:	83 e7 fc             	and    edi,0xfffffffc
c0001839:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000183c:	01 fa                	add    edx,edi
c000183e:	eb ec                	jmp    c000182c <dlmallinfo+0x68>
c0001840:	83 c0 08             	add    eax,0x8
c0001843:	3d cc 06 02 c0       	cmp    eax,0xc00206cc
c0001848:	75 df                	jne    c0001829 <dlmallinfo+0x65>
c000184a:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000184d:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001850:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001853:	a1 08 07 02 c0       	mov    eax,ds:0xc0020708
c0001858:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000185b:	89 03                	mov    DWORD PTR [ebx],eax
c000185d:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001860:	8b 35 f0 06 02 c0    	mov    esi,DWORD PTR ds:0xc00206f0
c0001866:	29 d0                	sub    eax,edx
c0001868:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000186b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000186e:	8b 35 04 07 02 c0    	mov    esi,DWORD PTR ds:0xc0020704
c0001874:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001878:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000187b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000187e:	8b 35 14 07 02 c0    	mov    esi,DWORD PTR ds:0xc0020714
c0001884:	89 d8                	mov    eax,ebx
c0001886:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001889:	83 c4 08             	add    esp,0x8
c000188c:	5b                   	pop    ebx
c000188d:	5e                   	pop    esi
c000188e:	5f                   	pop    edi
c000188f:	5d                   	pop    ebp
c0001890:	c2 04 00             	ret    0x4

c0001893 <dlmalloc_stats>:
c0001893:	83 ec 30             	sub    esp,0x30
c0001896:	8d 44 24 08          	lea    eax,[esp+0x8]
c000189a:	50                   	push   eax
c000189b:	e8 24 ff ff ff       	call   c00017c4 <dlmallinfo>
c00018a0:	83 c4 30             	add    esp,0x30
c00018a3:	c3                   	ret    

c00018a4 <dlmallopt>:
c00018a4:	56                   	push   esi
c00018a5:	b8 a0 03 02 c0       	mov    eax,0xc00203a0
c00018aa:	53                   	push   ebx
c00018ab:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018b3:	e8 4d f1 ff ff       	call   c0000a05 <malloc_consolidate>
c00018b8:	8d 46 04             	lea    eax,[esi+0x4]
c00018bb:	83 f8 05             	cmp    eax,0x5
c00018be:	77 67                	ja     c0001927 <dlmallopt+0x83>
c00018c0:	ff 24 85 e4 d6 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe291c]
c00018c7:	83 fb 50             	cmp    ebx,0x50
c00018ca:	77 5b                	ja     c0001927 <dlmallopt+0x83>
c00018cc:	ba 08 00 00 00       	mov    edx,0x8
c00018d1:	85 db                	test   ebx,ebx
c00018d3:	74 12                	je     c00018e7 <dlmallopt+0x43>
c00018d5:	83 c3 0b             	add    ebx,0xb
c00018d8:	ba 10 00 00 00       	mov    edx,0x10
c00018dd:	83 fb 0f             	cmp    ebx,0xf
c00018e0:	76 05                	jbe    c00018e7 <dlmallopt+0x43>
c00018e2:	89 da                	mov    edx,ebx
c00018e4:	83 e2 f8             	and    edx,0xfffffff8
c00018e7:	a1 a0 03 02 c0       	mov    eax,ds:0xc00203a0
c00018ec:	83 e0 03             	and    eax,0x3
c00018ef:	09 d0                	or     eax,edx
c00018f1:	a3 a0 03 02 c0       	mov    ds:0xc00203a0,eax
c00018f6:	eb 31                	jmp    c0001929 <dlmallopt+0x85>
c00018f8:	89 1d e4 06 02 c0    	mov    DWORD PTR ds:0xc00206e4,ebx
c00018fe:	eb 06                	jmp    c0001906 <dlmallopt+0x62>
c0001900:	89 1d e8 06 02 c0    	mov    DWORD PTR ds:0xc00206e8,ebx
c0001906:	be 01 00 00 00       	mov    esi,0x1
c000190b:	eb 1c                	jmp    c0001929 <dlmallopt+0x85>
c000190d:	89 1d ec 06 02 c0    	mov    DWORD PTR ds:0xc00206ec,ebx
c0001913:	eb f1                	jmp    c0001906 <dlmallopt+0x62>
c0001915:	31 f6                	xor    esi,esi
c0001917:	85 db                	test   ebx,ebx
c0001919:	75 0e                	jne    c0001929 <dlmallopt+0x85>
c000191b:	c7 05 f4 06 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00206f4,0x0
c0001925:	eb df                	jmp    c0001906 <dlmallopt+0x62>
c0001927:	31 f6                	xor    esi,esi
c0001929:	89 f0                	mov    eax,esi
c000192b:	5b                   	pop    ebx
c000192c:	5e                   	pop    esi
c000192d:	c3                   	ret    

c000192e <disk_status>:
c000192e:	31 c0                	xor    eax,eax
c0001930:	c3                   	ret    

c0001931 <disk_initialize>:
c0001931:	31 c0                	xor    eax,eax
c0001933:	c3                   	ret    

c0001934 <disk_read>:
c0001934:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001939:	0f b6 04 85 40 3e 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc1c0]
c0001941:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001945:	e9 ba 58 01 00       	jmp    c0017204 <fatWrapperReadDisk>

c000194a <disk_write>:
c000194a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000194f:	0f b6 04 85 40 3e 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc1c0]
c0001957:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000195b:	e9 e4 58 01 00       	jmp    c0017244 <fatWrapperWriteDisk>

c0001960 <disk_ioctl>:
c0001960:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001965:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001969:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000196e:	0f b6 04 85 40 3e 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc1c0]
c0001976:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000197a:	e9 05 59 01 00       	jmp    c0017284 <fatWrapperIoctl>

c000197f <ld_word>:
c000197f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001983:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001986:	c1 e2 08             	shl    edx,0x8
c0001989:	09 d0                	or     eax,edx
c000198b:	c3                   	ret    

c000198c <ld_dword>:
c000198c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001990:	89 d1                	mov    ecx,edx
c0001992:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001996:	c1 e1 08             	shl    ecx,0x8
c0001999:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000199c:	09 ca                	or     edx,ecx
c000199e:	c1 e2 08             	shl    edx,0x8
c00019a1:	09 d0                	or     eax,edx
c00019a3:	c3                   	ret    

c00019a4 <st_word>:
c00019a4:	66 89 10             	mov    WORD PTR [eax],dx
c00019a7:	c3                   	ret    

c00019a8 <st_dword>:
c00019a8:	89 10                	mov    DWORD PTR [eax],edx
c00019aa:	c3                   	ret    

c00019ab <mem_cpy>:
c00019ab:	85 c9                	test   ecx,ecx
c00019ad:	74 10                	je     c00019bf <mem_cpy+0x14>
c00019af:	57                   	push   edi
c00019b0:	01 c1                	add    ecx,eax
c00019b2:	56                   	push   esi
c00019b3:	89 c7                	mov    edi,eax
c00019b5:	89 d6                	mov    esi,edx
c00019b7:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00019b8:	39 f9                	cmp    ecx,edi
c00019ba:	75 fb                	jne    c00019b7 <mem_cpy+0xc>
c00019bc:	5e                   	pop    esi
c00019bd:	5f                   	pop    edi
c00019be:	c3                   	ret    
c00019bf:	c3                   	ret    

c00019c0 <mem_set>:
c00019c0:	01 c1                	add    ecx,eax
c00019c2:	40                   	inc    eax
c00019c3:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c00019c6:	39 c8                	cmp    eax,ecx
c00019c8:	75 f8                	jne    c00019c2 <mem_set+0x2>
c00019ca:	c3                   	ret    

c00019cb <mem_cmp>:
c00019cb:	57                   	push   edi
c00019cc:	56                   	push   esi
c00019cd:	89 c6                	mov    esi,eax
c00019cf:	53                   	push   ebx
c00019d0:	46                   	inc    esi
c00019d1:	42                   	inc    edx
c00019d2:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c00019d6:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c00019da:	29 fb                	sub    ebx,edi
c00019dc:	89 cf                	mov    edi,ecx
c00019de:	29 f7                	sub    edi,esi
c00019e0:	01 c7                	add    edi,eax
c00019e2:	74 04                	je     c00019e8 <mem_cmp+0x1d>
c00019e4:	85 db                	test   ebx,ebx
c00019e6:	74 e8                	je     c00019d0 <mem_cmp+0x5>
c00019e8:	89 d8                	mov    eax,ebx
c00019ea:	5b                   	pop    ebx
c00019eb:	5e                   	pop    esi
c00019ec:	5f                   	pop    edi
c00019ed:	c3                   	ret    

c00019ee <chk_chr>:
c00019ee:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00019f1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00019f4:	74 07                	je     c00019fd <chk_chr+0xf>
c00019f6:	39 d1                	cmp    ecx,edx
c00019f8:	74 03                	je     c00019fd <chk_chr+0xf>
c00019fa:	40                   	inc    eax
c00019fb:	eb f1                	jmp    c00019ee <chk_chr>
c00019fd:	89 c8                	mov    eax,ecx
c00019ff:	c3                   	ret    

c0001a00 <dbc_1st>:
c0001a00:	31 c0                	xor    eax,eax
c0001a02:	c3                   	ret    

c0001a03 <dbc_2nd>:
c0001a03:	31 c0                	xor    eax,eax
c0001a05:	c3                   	ret    

c0001a06 <tchar2uni>:
c0001a06:	57                   	push   edi
c0001a07:	89 c7                	mov    edi,eax
c0001a09:	56                   	push   esi
c0001a0a:	53                   	push   ebx
c0001a0b:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a0d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a0f:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a12:	84 c9                	test   cl,cl
c0001a14:	78 0a                	js     c0001a20 <tchar2uni+0x1a>
c0001a16:	0f b6 d1             	movzx  edx,cl
c0001a19:	89 f3                	mov    ebx,esi
c0001a1b:	e9 9f 00 00 00       	jmp    c0001abf <tchar2uni+0xb9>
c0001a20:	88 ca                	mov    dl,cl
c0001a22:	83 e2 e0             	and    edx,0xffffffe0
c0001a25:	80 fa c0             	cmp    dl,0xc0
c0001a28:	75 0c                	jne    c0001a36 <tchar2uni+0x30>
c0001a2a:	89 ca                	mov    edx,ecx
c0001a2c:	b9 01 00 00 00       	mov    ecx,0x1
c0001a31:	83 e2 1f             	and    edx,0x1f
c0001a34:	eb 2e                	jmp    c0001a64 <tchar2uni+0x5e>
c0001a36:	88 ca                	mov    dl,cl
c0001a38:	83 e2 f0             	and    edx,0xfffffff0
c0001a3b:	80 fa e0             	cmp    dl,0xe0
c0001a3e:	75 0c                	jne    c0001a4c <tchar2uni+0x46>
c0001a40:	89 ca                	mov    edx,ecx
c0001a42:	b9 02 00 00 00       	mov    ecx,0x2
c0001a47:	83 e2 0f             	and    edx,0xf
c0001a4a:	eb 18                	jmp    c0001a64 <tchar2uni+0x5e>
c0001a4c:	88 ca                	mov    dl,cl
c0001a4e:	83 e2 f8             	and    edx,0xfffffff8
c0001a51:	88 d0                	mov    al,dl
c0001a53:	83 ca ff             	or     edx,0xffffffff
c0001a56:	3c f0                	cmp    al,0xf0
c0001a58:	75 6c                	jne    c0001ac6 <tchar2uni+0xc0>
c0001a5a:	89 ca                	mov    edx,ecx
c0001a5c:	b9 03 00 00 00       	mov    ecx,0x3
c0001a61:	83 e2 07             	and    edx,0x7
c0001a64:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001a68:	46                   	inc    esi
c0001a69:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001a6c:	88 c8                	mov    al,cl
c0001a6e:	83 e0 c0             	and    eax,0xffffffc0
c0001a71:	3c 80                	cmp    al,0x80
c0001a73:	75 4e                	jne    c0001ac3 <tchar2uni+0xbd>
c0001a75:	c1 e2 06             	shl    edx,0x6
c0001a78:	83 e1 3f             	and    ecx,0x3f
c0001a7b:	09 ca                	or     edx,ecx
c0001a7d:	39 de                	cmp    esi,ebx
c0001a7f:	75 e7                	jne    c0001a68 <tchar2uni+0x62>
c0001a81:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001a84:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001a8a:	77 37                	ja     c0001ac3 <tchar2uni+0xbd>
c0001a8c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001a92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001a98:	76 29                	jbe    c0001ac3 <tchar2uni+0xbd>
c0001a9a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001aa0:	76 1d                	jbe    c0001abf <tchar2uni+0xb9>
c0001aa2:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001aa8:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001aae:	c1 e1 06             	shl    ecx,0x6
c0001ab1:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ab7:	09 ca                	or     edx,ecx
c0001ab9:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001abf:	89 1f                	mov    DWORD PTR [edi],ebx
c0001ac1:	eb 03                	jmp    c0001ac6 <tchar2uni+0xc0>
c0001ac3:	83 ca ff             	or     edx,0xffffffff
c0001ac6:	5b                   	pop    ebx
c0001ac7:	89 d0                	mov    eax,edx
c0001ac9:	5e                   	pop    esi
c0001aca:	5f                   	pop    edi
c0001acb:	c3                   	ret    

c0001acc <put_utf>:
c0001acc:	53                   	push   ebx
c0001acd:	83 f8 7f             	cmp    eax,0x7f
c0001ad0:	89 c3                	mov    ebx,eax
c0001ad2:	b0 00                	mov    al,0x0
c0001ad4:	77 11                	ja     c0001ae7 <put_utf+0x1b>
c0001ad6:	85 c9                	test   ecx,ecx
c0001ad8:	0f 84 e5 00 00 00    	je     c0001bc3 <put_utf+0xf7>
c0001ade:	88 1a                	mov    BYTE PTR [edx],bl
c0001ae0:	b0 01                	mov    al,0x1
c0001ae2:	e9 dc 00 00 00       	jmp    c0001bc3 <put_utf+0xf7>
c0001ae7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001aed:	77 23                	ja     c0001b12 <put_utf+0x46>
c0001aef:	83 f9 01             	cmp    ecx,0x1
c0001af2:	0f 86 cb 00 00 00    	jbe    c0001bc3 <put_utf+0xf7>
c0001af8:	89 d8                	mov    eax,ebx
c0001afa:	83 e3 3f             	and    ebx,0x3f
c0001afd:	c1 e8 06             	shr    eax,0x6
c0001b00:	83 cb 80             	or     ebx,0xffffff80
c0001b03:	83 c8 c0             	or     eax,0xffffffc0
c0001b06:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b09:	88 02                	mov    BYTE PTR [edx],al
c0001b0b:	b0 02                	mov    al,0x2
c0001b0d:	e9 b1 00 00 00       	jmp    c0001bc3 <put_utf+0xf7>
c0001b12:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b18:	77 40                	ja     c0001b5a <put_utf+0x8e>
c0001b1a:	83 f9 02             	cmp    ecx,0x2
c0001b1d:	0f 86 a0 00 00 00    	jbe    c0001bc3 <put_utf+0xf7>
c0001b23:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b29:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b2f:	0f 86 8e 00 00 00    	jbe    c0001bc3 <put_utf+0xf7>
c0001b35:	89 d8                	mov    eax,ebx
c0001b37:	c1 e8 0c             	shr    eax,0xc
c0001b3a:	83 c8 e0             	or     eax,0xffffffe0
c0001b3d:	88 02                	mov    BYTE PTR [edx],al
c0001b3f:	89 d8                	mov    eax,ebx
c0001b41:	83 e3 3f             	and    ebx,0x3f
c0001b44:	c1 e8 06             	shr    eax,0x6
c0001b47:	83 cb 80             	or     ebx,0xffffff80
c0001b4a:	83 e0 3f             	and    eax,0x3f
c0001b4d:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001b50:	83 c8 80             	or     eax,0xffffff80
c0001b53:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001b56:	b0 03                	mov    al,0x3
c0001b58:	eb 69                	jmp    c0001bc3 <put_utf+0xf7>
c0001b5a:	83 f9 03             	cmp    ecx,0x3
c0001b5d:	76 64                	jbe    c0001bc3 <put_utf+0xf7>
c0001b5f:	89 d9                	mov    ecx,ebx
c0001b61:	0f b7 c3             	movzx  eax,bx
c0001b64:	66 31 c9             	xor    cx,cx
c0001b67:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001b6d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001b73:	c1 e9 06             	shr    ecx,0x6
c0001b76:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001b7c:	77 43                	ja     c0001bc1 <put_utf+0xf5>
c0001b7e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001b84:	77 3b                	ja     c0001bc1 <put_utf+0xf5>
c0001b86:	09 cb                	or     ebx,ecx
c0001b88:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001b8e:	89 d8                	mov    eax,ebx
c0001b90:	c1 e8 12             	shr    eax,0x12
c0001b93:	83 c8 f0             	or     eax,0xfffffff0
c0001b96:	88 02                	mov    BYTE PTR [edx],al
c0001b98:	89 d8                	mov    eax,ebx
c0001b9a:	c1 e8 0c             	shr    eax,0xc
c0001b9d:	83 e0 3f             	and    eax,0x3f
c0001ba0:	83 c8 80             	or     eax,0xffffff80
c0001ba3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ba6:	89 d8                	mov    eax,ebx
c0001ba8:	83 e3 3f             	and    ebx,0x3f
c0001bab:	c1 e8 06             	shr    eax,0x6
c0001bae:	83 cb 80             	or     ebx,0xffffff80
c0001bb1:	83 e0 3f             	and    eax,0x3f
c0001bb4:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001bb7:	83 c8 80             	or     eax,0xffffff80
c0001bba:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001bbd:	b0 04                	mov    al,0x4
c0001bbf:	eb 02                	jmp    c0001bc3 <put_utf+0xf7>
c0001bc1:	31 c0                	xor    eax,eax
c0001bc3:	5b                   	pop    ebx
c0001bc4:	c3                   	ret    

c0001bc5 <clst2sect>:
c0001bc5:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001bc8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001bcb:	83 ea 02             	sub    edx,0x2
c0001bce:	39 ca                	cmp    edx,ecx
c0001bd0:	76 0d                	jbe    c0001bdf <clst2sect+0x1a>
c0001bd2:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001bd6:	0f af d1             	imul   edx,ecx
c0001bd9:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001bdc:	89 d0                	mov    eax,edx
c0001bde:	c3                   	ret    
c0001bdf:	31 c0                	xor    eax,eax
c0001be1:	c3                   	ret    

c0001be2 <clmt_clust>:
c0001be2:	56                   	push   esi
c0001be3:	c1 ea 09             	shr    edx,0x9
c0001be6:	53                   	push   ebx
c0001be7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0001bea:	8b 00                	mov    eax,DWORD PTR [eax]
c0001bec:	8d 5e 04             	lea    ebx,[esi+0x4]
c0001bef:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001bf3:	89 d0                	mov    eax,edx
c0001bf5:	31 d2                	xor    edx,edx
c0001bf7:	f7 f6                	div    esi
c0001bf9:	89 c1                	mov    ecx,eax
c0001bfb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001bfd:	85 c0                	test   eax,eax
c0001bff:	74 10                	je     c0001c11 <clmt_clust+0x2f>
c0001c01:	39 c1                	cmp    ecx,eax
c0001c03:	72 07                	jb     c0001c0c <clmt_clust+0x2a>
c0001c05:	29 c1                	sub    ecx,eax
c0001c07:	83 c3 08             	add    ebx,0x8
c0001c0a:	eb ef                	jmp    c0001bfb <clmt_clust+0x19>
c0001c0c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001c0f:	01 c8                	add    eax,ecx
c0001c11:	5b                   	pop    ebx
c0001c12:	5e                   	pop    esi
c0001c13:	c3                   	ret    

c0001c14 <pick_lfn>:
c0001c14:	55                   	push   ebp
c0001c15:	57                   	push   edi
c0001c16:	56                   	push   esi
c0001c17:	89 d6                	mov    esi,edx
c0001c19:	53                   	push   ebx
c0001c1a:	89 c3                	mov    ebx,eax
c0001c1c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001c1f:	e8 5b fd ff ff       	call   c000197f <ld_word>
c0001c24:	66 85 c0             	test   ax,ax
c0001c27:	74 04                	je     c0001c2d <pick_lfn+0x19>
c0001c29:	31 c0                	xor    eax,eax
c0001c2b:	eb 5c                	jmp    c0001c89 <pick_lfn+0x75>
c0001c2d:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001c30:	bd 01 00 00 00       	mov    ebp,0x1
c0001c35:	83 e1 bf             	and    ecx,0xffffffbf
c0001c38:	31 ff                	xor    edi,edi
c0001c3a:	49                   	dec    ecx
c0001c3b:	6b c9 0d             	imul   ecx,ecx,0xd
c0001c3e:	0f b6 87 40 d8 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe27c0]
c0001c45:	01 f0                	add    eax,esi
c0001c47:	e8 33 fd ff ff       	call   c000197f <ld_word>
c0001c4c:	66 85 ed             	test   bp,bp
c0001c4f:	74 11                	je     c0001c62 <pick_lfn+0x4e>
c0001c51:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001c57:	77 d0                	ja     c0001c29 <pick_lfn+0x15>
c0001c59:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001c5d:	89 c5                	mov    ebp,eax
c0001c5f:	41                   	inc    ecx
c0001c60:	eb 04                	jmp    c0001c66 <pick_lfn+0x52>
c0001c62:	66 40                	inc    ax
c0001c64:	75 c3                	jne    c0001c29 <pick_lfn+0x15>
c0001c66:	47                   	inc    edi
c0001c67:	83 ff 0d             	cmp    edi,0xd
c0001c6a:	75 d2                	jne    c0001c3e <pick_lfn+0x2a>
c0001c6c:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001c6f:	74 13                	je     c0001c84 <pick_lfn+0x70>
c0001c71:	66 85 ed             	test   bp,bp
c0001c74:	74 0e                	je     c0001c84 <pick_lfn+0x70>
c0001c76:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001c7c:	77 ab                	ja     c0001c29 <pick_lfn+0x15>
c0001c7e:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001c84:	b8 01 00 00 00       	mov    eax,0x1
c0001c89:	5b                   	pop    ebx
c0001c8a:	5e                   	pop    esi
c0001c8b:	5f                   	pop    edi
c0001c8c:	5d                   	pop    ebp
c0001c8d:	c3                   	ret    

c0001c8e <put_lfn>:
c0001c8e:	55                   	push   ebp
c0001c8f:	31 ed                	xor    ebp,ebp
c0001c91:	57                   	push   edi
c0001c92:	89 d7                	mov    edi,edx
c0001c94:	56                   	push   esi
c0001c95:	31 f6                	xor    esi,esi
c0001c97:	53                   	push   ebx
c0001c98:	83 ec 08             	sub    esp,0x8
c0001c9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0001c9e:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ca2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ca6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001cac:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001caf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001cb2:	31 d2                	xor    edx,edx
c0001cb4:	e8 eb fc ff ff       	call   c00019a4 <st_word>
c0001cb9:	0f b6 d9             	movzx  ebx,cl
c0001cbc:	4b                   	dec    ebx
c0001cbd:	6b db 0d             	imul   ebx,ebx,0xd
c0001cc0:	66 83 fe ff          	cmp    si,0xffff
c0001cc4:	74 08                	je     c0001cce <put_lfn+0x40>
c0001cc6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001cc9:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001ccd:	43                   	inc    ebx
c0001cce:	0f b6 85 40 d8 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe27c0]
c0001cd5:	0f b7 d6             	movzx  edx,si
c0001cd8:	01 f8                	add    eax,edi
c0001cda:	e8 c5 fc ff ff       	call   c00019a4 <st_word>
c0001cdf:	66 85 f6             	test   si,si
c0001ce2:	75 03                	jne    c0001ce7 <put_lfn+0x59>
c0001ce4:	83 ce ff             	or     esi,0xffffffff
c0001ce7:	45                   	inc    ebp
c0001ce8:	83 fd 0d             	cmp    ebp,0xd
c0001ceb:	75 d3                	jne    c0001cc0 <put_lfn+0x32>
c0001ced:	66 46                	inc    si
c0001cef:	74 0a                	je     c0001cfb <put_lfn+0x6d>
c0001cf1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001cf4:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001cf9:	75 09                	jne    c0001d04 <put_lfn+0x76>
c0001cfb:	88 c8                	mov    al,cl
c0001cfd:	83 c8 40             	or     eax,0x40
c0001d00:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001d04:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001d08:	88 07                	mov    BYTE PTR [edi],al
c0001d0a:	83 c4 08             	add    esp,0x8
c0001d0d:	5b                   	pop    ebx
c0001d0e:	5e                   	pop    esi
c0001d0f:	5f                   	pop    edi
c0001d10:	5d                   	pop    ebp
c0001d11:	c3                   	ret    

c0001d12 <gen_numname>:
c0001d12:	57                   	push   edi
c0001d13:	89 cf                	mov    edi,ecx
c0001d15:	56                   	push   esi
c0001d16:	b9 0b 00 00 00       	mov    ecx,0xb
c0001d1b:	53                   	push   ebx
c0001d1c:	89 c6                	mov    esi,eax
c0001d1e:	83 ec 10             	sub    esp,0x10
c0001d21:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001d25:	e8 81 fc ff ff       	call   c00019ab <mem_cpy>
c0001d2a:	83 fb 05             	cmp    ebx,0x5
c0001d2d:	76 2d                	jbe    c0001d5c <gen_numname+0x4a>
c0001d2f:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001d32:	66 85 c0             	test   ax,ax
c0001d35:	74 25                	je     c0001d5c <gen_numname+0x4a>
c0001d37:	83 c7 02             	add    edi,0x2
c0001d3a:	ba 10 00 00 00       	mov    edx,0x10
c0001d3f:	01 db                	add    ebx,ebx
c0001d41:	89 c1                	mov    ecx,eax
c0001d43:	66 d1 e8             	shr    ax,1
c0001d46:	83 e1 01             	and    ecx,0x1
c0001d49:	01 cb                	add    ebx,ecx
c0001d4b:	0f ba e3 10          	bt     ebx,0x10
c0001d4f:	73 06                	jae    c0001d57 <gen_numname+0x45>
c0001d51:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001d57:	4a                   	dec    edx
c0001d58:	75 e5                	jne    c0001d3f <gen_numname+0x2d>
c0001d5a:	eb d3                	jmp    c0001d2f <gen_numname+0x1d>
c0001d5c:	b8 07 00 00 00       	mov    eax,0x7
c0001d61:	88 d9                	mov    cl,bl
c0001d63:	83 e1 0f             	and    ecx,0xf
c0001d66:	8d 51 30             	lea    edx,[ecx+0x30]
c0001d69:	80 fa 39             	cmp    dl,0x39
c0001d6c:	76 03                	jbe    c0001d71 <gen_numname+0x5f>
c0001d6e:	8d 51 37             	lea    edx,[ecx+0x37]
c0001d71:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001d74:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001d78:	89 da                	mov    edx,ebx
c0001d7a:	c1 ea 04             	shr    edx,0x4
c0001d7d:	83 fb 0f             	cmp    ebx,0xf
c0001d80:	76 06                	jbe    c0001d88 <gen_numname+0x76>
c0001d82:	89 c8                	mov    eax,ecx
c0001d84:	89 d3                	mov    ebx,edx
c0001d86:	eb d9                	jmp    c0001d61 <gen_numname+0x4f>
c0001d88:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001d8d:	31 d2                	xor    edx,edx
c0001d8f:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001d92:	8d 04 16             	lea    eax,[esi+edx*1]
c0001d95:	39 ca                	cmp    edx,ecx
c0001d97:	73 18                	jae    c0001db1 <gen_numname+0x9f>
c0001d99:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d9c:	3c 20                	cmp    al,0x20
c0001d9e:	74 11                	je     c0001db1 <gen_numname+0x9f>
c0001da0:	e8 5b fc ff ff       	call   c0001a00 <dbc_1st>
c0001da5:	85 c0                	test   eax,eax
c0001da7:	74 05                	je     c0001dae <gen_numname+0x9c>
c0001da9:	39 d3                	cmp    ebx,edx
c0001dab:	74 04                	je     c0001db1 <gen_numname+0x9f>
c0001dad:	42                   	inc    edx
c0001dae:	42                   	inc    edx
c0001daf:	eb e1                	jmp    c0001d92 <gen_numname+0x80>
c0001db1:	b0 20                	mov    al,0x20
c0001db3:	83 f9 07             	cmp    ecx,0x7
c0001db6:	77 05                	ja     c0001dbd <gen_numname+0xab>
c0001db8:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001dbc:	41                   	inc    ecx
c0001dbd:	42                   	inc    edx
c0001dbe:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001dc2:	83 fa 07             	cmp    edx,0x7
c0001dc5:	76 ea                	jbe    c0001db1 <gen_numname+0x9f>
c0001dc7:	83 c4 10             	add    esp,0x10
c0001dca:	5b                   	pop    ebx
c0001dcb:	5e                   	pop    esi
c0001dcc:	5f                   	pop    edi
c0001dcd:	c3                   	ret    

c0001dce <sum_sfn>:
c0001dce:	31 c9                	xor    ecx,ecx
c0001dd0:	31 d2                	xor    edx,edx
c0001dd2:	d0 ca                	ror    dl,1
c0001dd4:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001dd7:	41                   	inc    ecx
c0001dd8:	83 f9 0b             	cmp    ecx,0xb
c0001ddb:	75 f5                	jne    c0001dd2 <sum_sfn+0x4>
c0001ddd:	88 d0                	mov    al,dl
c0001ddf:	c3                   	ret    

c0001de0 <get_ldnumber>:
c0001de0:	8b 10                	mov    edx,DWORD PTR [eax]
c0001de2:	85 d2                	test   edx,edx
c0001de4:	74 14                	je     c0001dfa <get_ldnumber+0x1a>
c0001de6:	56                   	push   esi
c0001de7:	53                   	push   ebx
c0001de8:	89 d3                	mov    ebx,edx
c0001dea:	43                   	inc    ebx
c0001deb:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001dee:	80 f9 1f             	cmp    cl,0x1f
c0001df1:	76 0d                	jbe    c0001e00 <get_ldnumber+0x20>
c0001df3:	80 f9 3a             	cmp    cl,0x3a
c0001df6:	75 f2                	jne    c0001dea <get_ldnumber+0xa>
c0001df8:	eb 0a                	jmp    c0001e04 <get_ldnumber+0x24>
c0001dfa:	83 c9 ff             	or     ecx,0xffffffff
c0001dfd:	89 c8                	mov    eax,ecx
c0001dff:	c3                   	ret    
c0001e00:	31 c9                	xor    ecx,ecx
c0001e02:	eb 24                	jmp    c0001e28 <get_ldnumber+0x48>
c0001e04:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001e07:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001e0a:	80 f9 09             	cmp    cl,0x9
c0001e0d:	77 16                	ja     c0001e25 <get_ldnumber+0x45>
c0001e0f:	83 c2 02             	add    edx,0x2
c0001e12:	83 c9 ff             	or     ecx,0xffffffff
c0001e15:	39 d3                	cmp    ebx,edx
c0001e17:	75 0f                	jne    c0001e28 <get_ldnumber+0x48>
c0001e19:	89 f2                	mov    edx,esi
c0001e1b:	89 18                	mov    DWORD PTR [eax],ebx
c0001e1d:	0f be ca             	movsx  ecx,dl
c0001e20:	83 e9 30             	sub    ecx,0x30
c0001e23:	eb 03                	jmp    c0001e28 <get_ldnumber+0x48>
c0001e25:	83 c9 ff             	or     ecx,0xffffffff
c0001e28:	89 c8                	mov    eax,ecx
c0001e2a:	5b                   	pop    ebx
c0001e2b:	5e                   	pop    esi
c0001e2c:	c3                   	ret    

c0001e2d <validate>:
c0001e2d:	56                   	push   esi
c0001e2e:	53                   	push   ebx
c0001e2f:	89 d6                	mov    esi,edx
c0001e31:	51                   	push   ecx
c0001e32:	85 c0                	test   eax,eax
c0001e34:	75 09                	jne    c0001e3f <validate+0x12>
c0001e36:	b8 09 00 00 00       	mov    eax,0x9
c0001e3b:	31 c9                	xor    ecx,ecx
c0001e3d:	eb 2f                	jmp    c0001e6e <validate+0x41>
c0001e3f:	89 c3                	mov    ebx,eax
c0001e41:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e43:	85 c0                	test   eax,eax
c0001e45:	74 ef                	je     c0001e36 <validate+0x9>
c0001e47:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001e4a:	74 ea                	je     c0001e36 <validate+0x9>
c0001e4c:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0001e50:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0001e54:	75 e0                	jne    c0001e36 <validate+0x9>
c0001e56:	83 ec 0c             	sub    esp,0xc
c0001e59:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0001e5d:	50                   	push   eax
c0001e5e:	e8 cb fa ff ff       	call   c000192e <disk_status>
c0001e63:	83 c4 10             	add    esp,0x10
c0001e66:	a8 01                	test   al,0x1
c0001e68:	75 cc                	jne    c0001e36 <validate+0x9>
c0001e6a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0001e6c:	31 c0                	xor    eax,eax
c0001e6e:	89 0e                	mov    DWORD PTR [esi],ecx
c0001e70:	5a                   	pop    edx
c0001e71:	5b                   	pop    ebx
c0001e72:	5e                   	pop    esi
c0001e73:	c3                   	ret    

c0001e74 <sync_window>:
c0001e74:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0001e78:	74 58                	je     c0001ed2 <sync_window+0x5e>
c0001e7a:	56                   	push   esi
c0001e7b:	53                   	push   ebx
c0001e7c:	8d 70 34             	lea    esi,[eax+0x34]
c0001e7f:	51                   	push   ecx
c0001e80:	89 c3                	mov    ebx,eax
c0001e82:	6a 01                	push   0x1
c0001e84:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0001e87:	56                   	push   esi
c0001e88:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0001e8c:	50                   	push   eax
c0001e8d:	e8 b8 fa ff ff       	call   c000194a <disk_write>
c0001e92:	83 c4 10             	add    esp,0x10
c0001e95:	ba 01 00 00 00       	mov    edx,0x1
c0001e9a:	85 c0                	test   eax,eax
c0001e9c:	75 2e                	jne    c0001ecc <sync_window+0x58>
c0001e9e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0001ea1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001ea4:	89 c1                	mov    ecx,eax
c0001ea6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0001eaa:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0001ead:	39 d1                	cmp    ecx,edx
c0001eaf:	73 19                	jae    c0001eca <sync_window+0x56>
c0001eb1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0001eb5:	75 13                	jne    c0001eca <sync_window+0x56>
c0001eb7:	6a 01                	push   0x1
c0001eb9:	01 d0                	add    eax,edx
c0001ebb:	50                   	push   eax
c0001ebc:	56                   	push   esi
c0001ebd:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0001ec1:	50                   	push   eax
c0001ec2:	e8 83 fa ff ff       	call   c000194a <disk_write>
c0001ec7:	83 c4 10             	add    esp,0x10
c0001eca:	31 d2                	xor    edx,edx
c0001ecc:	89 d0                	mov    eax,edx
c0001ece:	5a                   	pop    edx
c0001ecf:	5b                   	pop    ebx
c0001ed0:	5e                   	pop    esi
c0001ed1:	c3                   	ret    
c0001ed2:	31 d2                	xor    edx,edx
c0001ed4:	89 d0                	mov    eax,edx
c0001ed6:	c3                   	ret    

c0001ed7 <move_window>:
c0001ed7:	57                   	push   edi
c0001ed8:	56                   	push   esi
c0001ed9:	31 f6                	xor    esi,esi
c0001edb:	53                   	push   ebx
c0001edc:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0001edf:	74 32                	je     c0001f13 <move_window+0x3c>
c0001ee1:	89 c3                	mov    ebx,eax
c0001ee3:	89 d7                	mov    edi,edx
c0001ee5:	e8 8a ff ff ff       	call   c0001e74 <sync_window>
c0001eea:	89 c6                	mov    esi,eax
c0001eec:	85 c0                	test   eax,eax
c0001eee:	75 23                	jne    c0001f13 <move_window+0x3c>
c0001ef0:	6a 01                	push   0x1
c0001ef2:	8d 43 34             	lea    eax,[ebx+0x34]
c0001ef5:	57                   	push   edi
c0001ef6:	50                   	push   eax
c0001ef7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0001efb:	50                   	push   eax
c0001efc:	e8 33 fa ff ff       	call   c0001934 <disk_read>
c0001f01:	83 c4 10             	add    esp,0x10
c0001f04:	85 c0                	test   eax,eax
c0001f06:	74 08                	je     c0001f10 <move_window+0x39>
c0001f08:	be 01 00 00 00       	mov    esi,0x1
c0001f0d:	83 cf ff             	or     edi,0xffffffff
c0001f10:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0001f13:	89 f0                	mov    eax,esi
c0001f15:	5b                   	pop    ebx
c0001f16:	5e                   	pop    esi
c0001f17:	5f                   	pop    edi
c0001f18:	c3                   	ret    

c0001f19 <check_fs>:
c0001f19:	53                   	push   ebx
c0001f1a:	89 c3                	mov    ebx,eax
c0001f1c:	83 ec 08             	sub    esp,0x8
c0001f1f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0001f23:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0001f2a:	e8 a8 ff ff ff       	call   c0001ed7 <move_window>
c0001f2f:	ba 04 00 00 00       	mov    edx,0x4
c0001f34:	85 c0                	test   eax,eax
c0001f36:	75 68                	jne    c0001fa0 <check_fs+0x87>
c0001f38:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0001f3e:	e8 3c fa ff ff       	call   c000197f <ld_word>
c0001f43:	ba 03 00 00 00       	mov    edx,0x3
c0001f48:	66 3d 55 aa          	cmp    ax,0xaa55
c0001f4c:	75 52                	jne    c0001fa0 <check_fs+0x87>
c0001f4e:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c0001f51:	8d 50 18             	lea    edx,[eax+0x18]
c0001f54:	80 fa 01             	cmp    dl,0x1
c0001f57:	76 09                	jbe    c0001f62 <check_fs+0x49>
c0001f59:	ba 02 00 00 00       	mov    edx,0x2
c0001f5e:	3c eb                	cmp    al,0xeb
c0001f60:	75 3e                	jne    c0001fa0 <check_fs+0x87>
c0001f62:	ba 18 f8 01 c0       	mov    edx,0xc001f818
c0001f67:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0001f6a:	b9 03 00 00 00       	mov    ecx,0x3
c0001f6f:	e8 57 fa ff ff       	call   c00019cb <mem_cmp>
c0001f74:	31 d2                	xor    edx,edx
c0001f76:	85 c0                	test   eax,eax
c0001f78:	74 26                	je     c0001fa0 <check_fs+0x87>
c0001f7a:	ba fc d6 01 c0       	mov    edx,0xc001d6fc
c0001f7f:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0001f85:	b9 05 00 00 00       	mov    ecx,0x5
c0001f8a:	e8 3c fa ff ff       	call   c00019cb <mem_cmp>
c0001f8f:	31 d2                	xor    edx,edx
c0001f91:	85 c0                	test   eax,eax
c0001f93:	74 0b                	je     c0001fa0 <check_fs+0x87>
c0001f95:	31 d2                	xor    edx,edx
c0001f97:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0001f9b:	0f 95 c2             	setne  dl
c0001f9e:	01 d2                	add    edx,edx
c0001fa0:	89 d0                	mov    eax,edx
c0001fa2:	83 c4 08             	add    esp,0x8
c0001fa5:	5b                   	pop    ebx
c0001fa6:	c3                   	ret    

c0001fa7 <find_volume>:
c0001fa7:	55                   	push   ebp
c0001fa8:	57                   	push   edi
c0001fa9:	56                   	push   esi
c0001faa:	89 c6                	mov    esi,eax
c0001fac:	53                   	push   ebx
c0001fad:	89 d3                	mov    ebx,edx
c0001faf:	83 ec 2c             	sub    esp,0x2c
c0001fb2:	31 d2                	xor    edx,edx
c0001fb4:	e8 60 ff ff ff       	call   c0001f19 <check_fs>
c0001fb9:	83 f8 02             	cmp    eax,0x2
c0001fbc:	74 06                	je     c0001fc4 <find_volume+0x1d>
c0001fbe:	77 62                	ja     c0002022 <find_volume+0x7b>
c0001fc0:	85 db                	test   ebx,ebx
c0001fc2:	74 5e                	je     c0002022 <find_volume+0x7b>
c0001fc4:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0001fc8:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0001fce:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0001fd4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fd8:	89 cf                	mov    edi,ecx
c0001fda:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001fde:	89 e8                	mov    eax,ebp
c0001fe0:	83 c5 10             	add    ebp,0x10
c0001fe3:	e8 a4 f9 ff ff       	call   c000198c <ld_dword>
c0001fe8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001fec:	89 01                	mov    DWORD PTR [ecx],eax
c0001fee:	83 c1 04             	add    ecx,0x4
c0001ff1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0001ff5:	75 e3                	jne    c0001fda <find_volume+0x33>
c0001ff7:	31 ed                	xor    ebp,ebp
c0001ff9:	85 db                	test   ebx,ebx
c0001ffb:	74 03                	je     c0002000 <find_volume+0x59>
c0001ffd:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002000:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002003:	b8 03 00 00 00       	mov    eax,0x3
c0002008:	85 d2                	test   edx,edx
c000200a:	74 0c                	je     c0002018 <find_volume+0x71>
c000200c:	89 f0                	mov    eax,esi
c000200e:	e8 06 ff ff ff       	call   c0001f19 <check_fs>
c0002013:	83 f8 01             	cmp    eax,0x1
c0002016:	76 0a                	jbe    c0002022 <find_volume+0x7b>
c0002018:	85 db                	test   ebx,ebx
c000201a:	75 06                	jne    c0002022 <find_volume+0x7b>
c000201c:	45                   	inc    ebp
c000201d:	83 fd 03             	cmp    ebp,0x3
c0002020:	76 de                	jbe    c0002000 <find_volume+0x59>
c0002022:	83 c4 2c             	add    esp,0x2c
c0002025:	5b                   	pop    ebx
c0002026:	5e                   	pop    esi
c0002027:	5f                   	pop    edi
c0002028:	5d                   	pop    ebp
c0002029:	c3                   	ret    

c000202a <mount_volume>:
c000202a:	55                   	push   ebp
c000202b:	89 d5                	mov    ebp,edx
c000202d:	57                   	push   edi
c000202e:	89 cf                	mov    edi,ecx
c0002030:	56                   	push   esi
c0002031:	53                   	push   ebx
c0002032:	bb 0b 00 00 00       	mov    ebx,0xb
c0002037:	83 ec 2c             	sub    esp,0x2c
c000203a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002040:	e8 9b fd ff ff       	call   c0001de0 <get_ldnumber>
c0002045:	85 c0                	test   eax,eax
c0002047:	0f 88 d5 02 00 00    	js     c0002322 <mount_volume+0x2f8>
c000204d:	8b 34 85 40 07 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdf8c0]
c0002054:	89 c2                	mov    edx,eax
c0002056:	bb 0c 00 00 00       	mov    ebx,0xc
c000205b:	85 f6                	test   esi,esi
c000205d:	0f 84 bf 02 00 00    	je     c0002322 <mount_volume+0x2f8>
c0002063:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c0002066:	83 e7 fe             	and    edi,0xfffffffe
c0002069:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000206c:	74 3a                	je     c00020a8 <mount_volume+0x7e>
c000206e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002072:	83 ec 0c             	sub    esp,0xc
c0002075:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002079:	50                   	push   eax
c000207a:	e8 af f8 ff ff       	call   c000192e <disk_status>
c000207f:	83 c4 10             	add    esp,0x10
c0002082:	a8 01                	test   al,0x1
c0002084:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002088:	75 1e                	jne    c00020a8 <mount_volume+0x7e>
c000208a:	31 db                	xor    ebx,ebx
c000208c:	89 f9                	mov    ecx,edi
c000208e:	84 c9                	test   cl,cl
c0002090:	0f 84 8c 02 00 00    	je     c0002322 <mount_volume+0x2f8>
c0002096:	a8 04                	test   al,0x4
c0002098:	0f 84 84 02 00 00    	je     c0002322 <mount_volume+0x2f8>
c000209e:	bb 0a 00 00 00       	mov    ebx,0xa
c00020a3:	e9 7a 02 00 00       	jmp    c0002322 <mount_volume+0x2f8>
c00020a8:	83 ec 0c             	sub    esp,0xc
c00020ab:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00020ae:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c00020b1:	0f b6 c2             	movzx  eax,dl
c00020b4:	bb 03 00 00 00       	mov    ebx,0x3
c00020b9:	50                   	push   eax
c00020ba:	e8 72 f8 ff ff       	call   c0001931 <disk_initialize>
c00020bf:	83 c4 10             	add    esp,0x10
c00020c2:	a8 01                	test   al,0x1
c00020c4:	0f 85 58 02 00 00    	jne    c0002322 <mount_volume+0x2f8>
c00020ca:	89 f9                	mov    ecx,edi
c00020cc:	84 c9                	test   cl,cl
c00020ce:	74 04                	je     c00020d4 <mount_volume+0xaa>
c00020d0:	a8 04                	test   al,0x4
c00020d2:	75 ca                	jne    c000209e <mount_volume+0x74>
c00020d4:	31 d2                	xor    edx,edx
c00020d6:	89 f0                	mov    eax,esi
c00020d8:	bb 01 00 00 00       	mov    ebx,0x1
c00020dd:	e8 c5 fe ff ff       	call   c0001fa7 <find_volume>
c00020e2:	83 f8 04             	cmp    eax,0x4
c00020e5:	0f 84 37 02 00 00    	je     c0002322 <mount_volume+0x2f8>
c00020eb:	83 f8 01             	cmp    eax,0x1
c00020ee:	76 0a                	jbe    c00020fa <mount_volume+0xd0>
c00020f0:	bb 0d 00 00 00       	mov    ebx,0xd
c00020f5:	e9 28 02 00 00       	jmp    c0002322 <mount_volume+0x2f8>
c00020fa:	8d 46 3f             	lea    eax,[esi+0x3f]
c00020fd:	e8 7d f8 ff ff       	call   c000197f <ld_word>
c0002102:	66 3d 00 02          	cmp    ax,0x200
c0002106:	75 e8                	jne    c00020f0 <mount_volume+0xc6>
c0002108:	8d 46 4a             	lea    eax,[esi+0x4a]
c000210b:	e8 6f f8 ff ff       	call   c000197f <ld_word>
c0002110:	0f b7 c0             	movzx  eax,ax
c0002113:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002117:	85 c0                	test   eax,eax
c0002119:	75 0c                	jne    c0002127 <mount_volume+0xfd>
c000211b:	8d 46 58             	lea    eax,[esi+0x58]
c000211e:	e8 69 f8 ff ff       	call   c000198c <ld_dword>
c0002123:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002127:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000212a:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000212d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002131:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002135:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002138:	89 e8                	mov    eax,ebp
c000213a:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000213d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0002140:	3c 01                	cmp    al,0x1
c0002142:	77 ac                	ja     c00020f0 <mount_volume+0xc6>
c0002144:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c0002148:	89 c3                	mov    ebx,eax
c000214a:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c000214e:	66 85 c0             	test   ax,ax
c0002151:	74 9d                	je     c00020f0 <mount_volume+0xc6>
c0002153:	8d 40 ff             	lea    eax,[eax-0x1]
c0002156:	85 d8                	test   eax,ebx
c0002158:	75 96                	jne    c00020f0 <mount_volume+0xc6>
c000215a:	8d 46 45             	lea    eax,[esi+0x45]
c000215d:	e8 1d f8 ff ff       	call   c000197f <ld_word>
c0002162:	89 c7                	mov    edi,eax
c0002164:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002168:	a8 0f                	test   al,0xf
c000216a:	75 84                	jne    c00020f0 <mount_volume+0xc6>
c000216c:	8d 46 47             	lea    eax,[esi+0x47]
c000216f:	e8 0b f8 ff ff       	call   c000197f <ld_word>
c0002174:	0f b7 d0             	movzx  edx,ax
c0002177:	85 d2                	test   edx,edx
c0002179:	75 0a                	jne    c0002185 <mount_volume+0x15b>
c000217b:	8d 46 54             	lea    eax,[esi+0x54]
c000217e:	e8 09 f8 ff ff       	call   c000198c <ld_dword>
c0002183:	89 c2                	mov    edx,eax
c0002185:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002189:	8d 46 42             	lea    eax,[esi+0x42]
c000218c:	e8 ee f7 ff ff       	call   c000197f <ld_word>
c0002191:	66 85 c0             	test   ax,ax
c0002194:	0f 84 56 ff ff ff    	je     c00020f0 <mount_volume+0xc6>
c000219a:	89 e9                	mov    ecx,ebp
c000219c:	0f b7 c0             	movzx  eax,ax
c000219f:	0f b6 e9             	movzx  ebp,cl
c00021a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00021a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021aa:	89 f8                	mov    eax,edi
c00021ac:	0f af cd             	imul   ecx,ebp
c00021af:	66 c1 e8 04          	shr    ax,0x4
c00021b3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00021b7:	0f b7 c0             	movzx  eax,ax
c00021ba:	01 c8                	add    eax,ecx
c00021bc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021c0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00021c4:	39 c2                	cmp    edx,eax
c00021c6:	0f 82 24 ff ff ff    	jb     c00020f0 <mount_volume+0xc6>
c00021cc:	29 c2                	sub    edx,eax
c00021ce:	89 d5                	mov    ebp,edx
c00021d0:	89 d0                	mov    eax,edx
c00021d2:	31 d2                	xor    edx,edx
c00021d4:	f7 f3                	div    ebx
c00021d6:	39 dd                	cmp    ebp,ebx
c00021d8:	0f 82 12 ff ff ff    	jb     c00020f0 <mount_volume+0xc6>
c00021de:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00021e3:	0f 87 07 ff ff ff    	ja     c00020f0 <mount_volume+0xc6>
c00021e9:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00021ee:	0f 86 1f 01 00 00    	jbe    c0002313 <mount_volume+0x2e9>
c00021f4:	bb 03 00 00 00       	mov    ebx,0x3
c00021f9:	8d 68 02             	lea    ebp,[eax+0x2]
c00021fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002204:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002208:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000220b:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000220e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002212:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002215:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002219:	83 fb 03             	cmp    ebx,0x3
c000221c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000221f:	75 21                	jne    c0002242 <mount_volume+0x218>
c0002221:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002224:	e8 56 f7 ff ff       	call   c000197f <ld_word>
c0002229:	66 09 c7             	or     di,ax
c000222c:	0f 85 be fe ff ff    	jne    c00020f0 <mount_volume+0xc6>
c0002232:	8d 46 60             	lea    eax,[esi+0x60]
c0002235:	c1 e5 02             	shl    ebp,0x2
c0002238:	e8 4f f7 ff ff       	call   c000198c <ld_dword>
c000223d:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002240:	eb 22                	jmp    c0002264 <mount_volume+0x23a>
c0002242:	66 85 ff             	test   di,di
c0002245:	0f 84 a5 fe ff ff    	je     c00020f0 <mount_volume+0xc6>
c000224b:	01 c8                	add    eax,ecx
c000224d:	83 fb 02             	cmp    ebx,0x2
c0002250:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002253:	75 04                	jne    c0002259 <mount_volume+0x22f>
c0002255:	01 ed                	add    ebp,ebp
c0002257:	eb 0b                	jmp    c0002264 <mount_volume+0x23a>
c0002259:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000225d:	83 e5 01             	and    ebp,0x1
c0002260:	d1 e8                	shr    eax,1
c0002262:	01 c5                	add    ebp,eax
c0002264:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000226a:	c1 ed 09             	shr    ebp,0x9
c000226d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002271:	0f 87 79 fe ff ff    	ja     c00020f0 <mount_volume+0xc6>
c0002277:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c000227e:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002285:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002289:	83 fb 03             	cmp    ebx,0x3
c000228c:	75 6e                	jne    c00022fc <mount_volume+0x2d2>
c000228e:	8d 46 64             	lea    eax,[esi+0x64]
c0002291:	e8 e9 f6 ff ff       	call   c000197f <ld_word>
c0002296:	66 48                	dec    ax
c0002298:	75 62                	jne    c00022fc <mount_volume+0x2d2>
c000229a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000229e:	89 f0                	mov    eax,esi
c00022a0:	42                   	inc    edx
c00022a1:	e8 31 fc ff ff       	call   c0001ed7 <move_window>
c00022a6:	85 c0                	test   eax,eax
c00022a8:	75 52                	jne    c00022fc <mount_volume+0x2d2>
c00022aa:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00022ae:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00022b4:	e8 c6 f6 ff ff       	call   c000197f <ld_word>
c00022b9:	66 3d 55 aa          	cmp    ax,0xaa55
c00022bd:	75 3d                	jne    c00022fc <mount_volume+0x2d2>
c00022bf:	8d 46 34             	lea    eax,[esi+0x34]
c00022c2:	e8 c5 f6 ff ff       	call   c000198c <ld_dword>
c00022c7:	3d 52 52 61 41       	cmp    eax,0x41615252
c00022cc:	75 2e                	jne    c00022fc <mount_volume+0x2d2>
c00022ce:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c00022d4:	e8 b3 f6 ff ff       	call   c000198c <ld_dword>
c00022d9:	3d 72 72 41 61       	cmp    eax,0x61417272
c00022de:	75 1c                	jne    c00022fc <mount_volume+0x2d2>
c00022e0:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c00022e6:	e8 a1 f6 ff ff       	call   c000198c <ld_dword>
c00022eb:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00022ee:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c00022f4:	e8 93 f6 ff ff       	call   c000198c <ld_dword>
c00022f9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00022fc:	66 a1 20 07 02 c0    	mov    ax,ds:0xc0020720
c0002302:	88 1e                	mov    BYTE PTR [esi],bl
c0002304:	40                   	inc    eax
c0002305:	31 db                	xor    ebx,ebx
c0002307:	66 a3 20 07 02 c0    	mov    ds:0xc0020720,ax
c000230d:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002311:	eb 0f                	jmp    c0002322 <mount_volume+0x2f8>
c0002313:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002318:	19 db                	sbb    ebx,ebx
c000231a:	83 c3 02             	add    ebx,0x2
c000231d:	e9 d7 fe ff ff       	jmp    c00021f9 <mount_volume+0x1cf>
c0002322:	83 c4 2c             	add    esp,0x2c
c0002325:	89 d8                	mov    eax,ebx
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	5f                   	pop    edi
c000232a:	5d                   	pop    ebp
c000232b:	c3                   	ret    

c000232c <put_fat>:
c000232c:	55                   	push   ebp
c000232d:	bd 02 00 00 00       	mov    ebp,0x2
c0002332:	57                   	push   edi
c0002333:	56                   	push   esi
c0002334:	53                   	push   ebx
c0002335:	83 ec 1c             	sub    esp,0x1c
c0002338:	83 fa 01             	cmp    edx,0x1
c000233b:	0f 86 31 01 00 00    	jbe    c0002472 <put_fat+0x146>
c0002341:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002344:	0f 86 28 01 00 00    	jbe    c0002472 <put_fat+0x146>
c000234a:	89 c6                	mov    esi,eax
c000234c:	89 cf                	mov    edi,ecx
c000234e:	8a 00                	mov    al,BYTE PTR [eax]
c0002350:	89 d3                	mov    ebx,edx
c0002352:	3c 02                	cmp    al,0x2
c0002354:	0f 84 ac 00 00 00    	je     c0002406 <put_fat+0xda>
c000235a:	3c 03                	cmp    al,0x3
c000235c:	0f 84 d1 00 00 00    	je     c0002433 <put_fat+0x107>
c0002362:	fe c8                	dec    al
c0002364:	0f 85 08 01 00 00    	jne    c0002472 <put_fat+0x146>
c000236a:	89 d1                	mov    ecx,edx
c000236c:	89 f0                	mov    eax,esi
c000236e:	d1 e9                	shr    ecx,1
c0002370:	01 d1                	add    ecx,edx
c0002372:	89 ca                	mov    edx,ecx
c0002374:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002378:	c1 ea 09             	shr    edx,0x9
c000237b:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000237e:	e8 54 fb ff ff       	call   c0001ed7 <move_window>
c0002383:	89 c5                	mov    ebp,eax
c0002385:	85 c0                	test   eax,eax
c0002387:	0f 85 e5 00 00 00    	jne    c0002472 <put_fat+0x146>
c000238d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002391:	8d 46 34             	lea    eax,[esi+0x34]
c0002394:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002398:	8d 41 01             	lea    eax,[ecx+0x1]
c000239b:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00023a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023a5:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00023a9:	89 f8                	mov    eax,edi
c00023ab:	83 e3 01             	and    ebx,0x1
c00023ae:	74 0c                	je     c00023bc <put_fat+0x90>
c00023b0:	8a 11                	mov    dl,BYTE PTR [ecx]
c00023b2:	89 f8                	mov    eax,edi
c00023b4:	83 e2 0f             	and    edx,0xf
c00023b7:	c1 e0 04             	shl    eax,0x4
c00023ba:	09 d0                	or     eax,edx
c00023bc:	88 01                	mov    BYTE PTR [ecx],al
c00023be:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023c2:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00023c6:	c1 ea 09             	shr    edx,0x9
c00023c9:	89 f0                	mov    eax,esi
c00023cb:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00023ce:	e8 04 fb ff ff       	call   c0001ed7 <move_window>
c00023d3:	89 c5                	mov    ebp,eax
c00023d5:	85 c0                	test   eax,eax
c00023d7:	0f 85 95 00 00 00    	jne    c0002472 <put_fat+0x146>
c00023dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00023e1:	25 ff 01 00 00       	and    eax,0x1ff
c00023e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00023ea:	85 db                	test   ebx,ebx
c00023ec:	74 07                	je     c00023f5 <put_fat+0xc9>
c00023ee:	c1 ef 04             	shr    edi,0x4
c00023f1:	89 f9                	mov    ecx,edi
c00023f3:	eb 0d                	jmp    c0002402 <put_fat+0xd6>
c00023f5:	8a 08                	mov    cl,BYTE PTR [eax]
c00023f7:	c1 ef 08             	shr    edi,0x8
c00023fa:	83 e1 f0             	and    ecx,0xfffffff0
c00023fd:	83 e7 0f             	and    edi,0xf
c0002400:	09 f9                	or     ecx,edi
c0002402:	88 08                	mov    BYTE PTR [eax],cl
c0002404:	eb 27                	jmp    c000242d <put_fat+0x101>
c0002406:	c1 ea 08             	shr    edx,0x8
c0002409:	89 f0                	mov    eax,esi
c000240b:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000240e:	e8 c4 fa ff ff       	call   c0001ed7 <move_window>
c0002413:	89 c5                	mov    ebp,eax
c0002415:	85 c0                	test   eax,eax
c0002417:	75 59                	jne    c0002472 <put_fat+0x146>
c0002419:	01 db                	add    ebx,ebx
c000241b:	0f b7 d7             	movzx  edx,di
c000241e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002424:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002428:	e8 77 f5 ff ff       	call   c00019a4 <st_word>
c000242d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002431:	eb 3f                	jmp    c0002472 <put_fat+0x146>
c0002433:	c1 ea 07             	shr    edx,0x7
c0002436:	89 f0                	mov    eax,esi
c0002438:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000243b:	e8 97 fa ff ff       	call   c0001ed7 <move_window>
c0002440:	89 c5                	mov    ebp,eax
c0002442:	85 c0                	test   eax,eax
c0002444:	75 2c                	jne    c0002472 <put_fat+0x146>
c0002446:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c000244c:	c1 e3 02             	shl    ebx,0x2
c000244f:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002455:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002459:	89 d8                	mov    eax,ebx
c000245b:	e8 2c f5 ff ff       	call   c000198c <ld_dword>
c0002460:	25 00 00 00 f0       	and    eax,0xf0000000
c0002465:	09 f8                	or     eax,edi
c0002467:	89 c2                	mov    edx,eax
c0002469:	89 d8                	mov    eax,ebx
c000246b:	e8 38 f5 ff ff       	call   c00019a8 <st_dword>
c0002470:	eb bb                	jmp    c000242d <put_fat+0x101>
c0002472:	83 c4 1c             	add    esp,0x1c
c0002475:	89 e8                	mov    eax,ebp
c0002477:	5b                   	pop    ebx
c0002478:	5e                   	pop    esi
c0002479:	5f                   	pop    edi
c000247a:	5d                   	pop    ebp
c000247b:	c3                   	ret    

c000247c <dir_clear>:
c000247c:	55                   	push   ebp
c000247d:	57                   	push   edi
c000247e:	56                   	push   esi
c000247f:	89 c6                	mov    esi,eax
c0002481:	53                   	push   ebx
c0002482:	83 ec 1c             	sub    esp,0x1c
c0002485:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002489:	e8 e6 f9 ff ff       	call   c0001e74 <sync_window>
c000248e:	85 c0                	test   eax,eax
c0002490:	0f 85 c0 00 00 00    	jne    c0002556 <dir_clear+0xda>
c0002496:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000249a:	89 f0                	mov    eax,esi
c000249c:	e8 24 f7 ff ff       	call   c0001bc5 <clst2sect>
c00024a1:	31 d2                	xor    edx,edx
c00024a3:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c00024a6:	89 c5                	mov    ebp,eax
c00024a8:	b9 00 02 00 00       	mov    ecx,0x200
c00024ad:	8d 46 34             	lea    eax,[esi+0x34]
c00024b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024b4:	e8 07 f5 ff ff       	call   c00019c0 <mem_set>
c00024b9:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00024bd:	c1 e3 09             	shl    ebx,0x9
c00024c0:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00024c6:	76 1b                	jbe    c00024e3 <dir_clear+0x67>
c00024c8:	bb 00 80 00 00       	mov    ebx,0x8000
c00024cd:	eb 14                	jmp    c00024e3 <dir_clear+0x67>
c00024cf:	83 ec 0c             	sub    esp,0xc
c00024d2:	53                   	push   ebx
c00024d3:	e8 1c 35 00 00       	call   c00059f4 <ff_memalloc>
c00024d8:	83 c4 10             	add    esp,0x10
c00024db:	89 c7                	mov    edi,eax
c00024dd:	85 c0                	test   eax,eax
c00024df:	75 7c                	jne    c000255d <dir_clear+0xe1>
c00024e1:	d1 eb                	shr    ebx,1
c00024e3:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00024e9:	77 e4                	ja     c00024cf <dir_clear+0x53>
c00024eb:	31 db                	xor    ebx,ebx
c00024ed:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00024f1:	39 d8                	cmp    eax,ebx
c00024f3:	76 53                	jbe    c0002548 <dir_clear+0xcc>
c00024f5:	6a 01                	push   0x1
c00024f7:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00024fa:	50                   	push   eax
c00024fb:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002503:	50                   	push   eax
c0002504:	e8 41 f4 ff ff       	call   c000194a <disk_write>
c0002509:	83 c4 10             	add    esp,0x10
c000250c:	85 c0                	test   eax,eax
c000250e:	75 38                	jne    c0002548 <dir_clear+0xcc>
c0002510:	43                   	inc    ebx
c0002511:	eb da                	jmp    c00024ed <dir_clear+0x71>
c0002513:	52                   	push   edx
c0002514:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002517:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000251b:	50                   	push   eax
c000251c:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002520:	57                   	push   edi
c0002521:	50                   	push   eax
c0002522:	e8 23 f4 ff ff       	call   c000194a <disk_write>
c0002527:	83 c4 10             	add    esp,0x10
c000252a:	85 c0                	test   eax,eax
c000252c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002530:	75 0a                	jne    c000253c <dir_clear+0xc0>
c0002532:	01 d3                	add    ebx,edx
c0002534:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002538:	39 d8                	cmp    eax,ebx
c000253a:	77 d7                	ja     c0002513 <dir_clear+0x97>
c000253c:	83 ec 0c             	sub    esp,0xc
c000253f:	57                   	push   edi
c0002540:	e8 c7 34 00 00       	call   c0005a0c <ff_memfree>
c0002545:	83 c4 10             	add    esp,0x10
c0002548:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000254c:	39 d8                	cmp    eax,ebx
c000254e:	0f 95 c0             	setne  al
c0002551:	0f b6 c0             	movzx  eax,al
c0002554:	eb 19                	jmp    c000256f <dir_clear+0xf3>
c0002556:	b8 01 00 00 00       	mov    eax,0x1
c000255b:	eb 12                	jmp    c000256f <dir_clear+0xf3>
c000255d:	89 d9                	mov    ecx,ebx
c000255f:	31 d2                	xor    edx,edx
c0002561:	e8 5a f4 ff ff       	call   c00019c0 <mem_set>
c0002566:	89 da                	mov    edx,ebx
c0002568:	31 db                	xor    ebx,ebx
c000256a:	c1 ea 09             	shr    edx,0x9
c000256d:	eb c5                	jmp    c0002534 <dir_clear+0xb8>
c000256f:	83 c4 1c             	add    esp,0x1c
c0002572:	5b                   	pop    ebx
c0002573:	5e                   	pop    esi
c0002574:	5f                   	pop    edi
c0002575:	5d                   	pop    ebp
c0002576:	c3                   	ret    

c0002577 <create_name>:
c0002577:	55                   	push   ebp
c0002578:	89 d5                	mov    ebp,edx
c000257a:	57                   	push   edi
c000257b:	89 c7                	mov    edi,eax
c000257d:	56                   	push   esi
c000257e:	31 f6                	xor    esi,esi
c0002580:	53                   	push   ebx
c0002581:	83 ec 3c             	sub    esp,0x3c
c0002584:	8b 02                	mov    eax,DWORD PTR [edx]
c0002586:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000258a:	8b 07                	mov    eax,DWORD PTR [edi]
c000258c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000258f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002593:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002597:	e8 6a f4 ff ff       	call   c0001a06 <tchar2uni>
c000259c:	89 c3                	mov    ebx,eax
c000259e:	83 f8 ff             	cmp    eax,0xffffffff
c00025a1:	75 0a                	jne    c00025ad <create_name+0x36>
c00025a3:	b8 06 00 00 00       	mov    eax,0x6
c00025a8:	e9 9e 02 00 00       	jmp    c000284b <create_name+0x2d4>
c00025ad:	3d ff ff 00 00       	cmp    eax,0xffff
c00025b2:	76 0c                	jbe    c00025c0 <create_name+0x49>
c00025b4:	c1 e8 10             	shr    eax,0x10
c00025b7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025bb:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c00025bf:	46                   	inc    esi
c00025c0:	66 83 fb 1f          	cmp    bx,0x1f
c00025c4:	76 4f                	jbe    c0002615 <create_name+0x9e>
c00025c6:	66 83 fb 5c          	cmp    bx,0x5c
c00025ca:	74 35                	je     c0002601 <create_name+0x8a>
c00025cc:	66 83 fb 2f          	cmp    bx,0x2f
c00025d0:	74 2f                	je     c0002601 <create_name+0x8a>
c00025d2:	66 83 fb 7f          	cmp    bx,0x7f
c00025d6:	77 11                	ja     c00025e9 <create_name+0x72>
c00025d8:	0f b7 d3             	movzx  edx,bx
c00025db:	b8 02 d7 01 c0       	mov    eax,0xc001d702
c00025e0:	e8 09 f4 ff ff       	call   c00019ee <chk_chr>
c00025e5:	85 c0                	test   eax,eax
c00025e7:	75 ba                	jne    c00025a3 <create_name+0x2c>
c00025e9:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00025ef:	77 b2                	ja     c00025a3 <create_name+0x2c>
c00025f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025f5:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c00025f9:	46                   	inc    esi
c00025fa:	eb 97                	jmp    c0002593 <create_name+0x1c>
c00025fc:	40                   	inc    eax
c00025fd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002601:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002605:	8a 10                	mov    dl,BYTE PTR [eax]
c0002607:	80 fa 2f             	cmp    dl,0x2f
c000260a:	74 f0                	je     c00025fc <create_name+0x85>
c000260c:	80 fa 5c             	cmp    dl,0x5c
c000260f:	74 eb                	je     c00025fc <create_name+0x85>
c0002611:	31 db                	xor    ebx,ebx
c0002613:	eb 02                	jmp    c0002617 <create_name+0xa0>
c0002615:	b3 04                	mov    bl,0x4
c0002617:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000261b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000261e:	85 f6                	test   esi,esi
c0002620:	74 18                	je     c000263a <create_name+0xc3>
c0002622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002626:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000262b:	66 83 f8 20          	cmp    ax,0x20
c000262f:	74 06                	je     c0002637 <create_name+0xc0>
c0002631:	66 83 f8 2e          	cmp    ax,0x2e
c0002635:	75 03                	jne    c000263a <create_name+0xc3>
c0002637:	4e                   	dec    esi
c0002638:	eb e4                	jmp    c000261e <create_name+0xa7>
c000263a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000263e:	31 ed                	xor    ebp,ebp
c0002640:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002646:	85 f6                	test   esi,esi
c0002648:	0f 84 55 ff ff ff    	je     c00025a3 <create_name+0x2c>
c000264e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002652:	8d 55 01             	lea    edx,[ebp+0x1]
c0002655:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0002659:	66 83 f8 20          	cmp    ax,0x20
c000265d:	75 04                	jne    c0002663 <create_name+0xec>
c000265f:	89 d5                	mov    ebp,edx
c0002661:	eb eb                	jmp    c000264e <create_name+0xd7>
c0002663:	85 ed                	test   ebp,ebp
c0002665:	75 06                	jne    c000266d <create_name+0xf6>
c0002667:	66 83 f8 2e          	cmp    ax,0x2e
c000266b:	75 08                	jne    c0002675 <create_name+0xfe>
c000266d:	83 cb 03             	or     ebx,0x3
c0002670:	eb 03                	jmp    c0002675 <create_name+0xfe>
c0002672:	4e                   	dec    esi
c0002673:	74 0c                	je     c0002681 <create_name+0x10a>
c0002675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002679:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c000267f:	75 f1                	jne    c0002672 <create_name+0xfb>
c0002681:	b9 0b 00 00 00       	mov    ecx,0xb
c0002686:	8d 47 20             	lea    eax,[edi+0x20]
c0002689:	ba 20 00 00 00       	mov    edx,0x20
c000268e:	e8 2d f3 ff ff       	call   c00019c0 <mem_set>
c0002693:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000269b:	31 c9                	xor    ecx,ecx
c000269d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00026a2:	8d 45 01             	lea    eax,[ebp+0x1]
c00026a5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00026a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026ad:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c00026b1:	66 85 ed             	test   bp,bp
c00026b4:	0f 84 30 01 00 00    	je     c00027ea <create_name+0x273>
c00026ba:	66 83 fd 20          	cmp    bp,0x20
c00026be:	74 10                	je     c00026d0 <create_name+0x159>
c00026c0:	66 83 fd 2e          	cmp    bp,0x2e
c00026c4:	75 13                	jne    c00026d9 <create_name+0x162>
c00026c6:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c00026ca:	0f 84 6b 01 00 00    	je     c000283b <create_name+0x2c4>
c00026d0:	83 cb 03             	or     ebx,0x3
c00026d3:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00026d7:	eb c9                	jmp    c00026a2 <create_name+0x12b>
c00026d9:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c00026dd:	73 0b                	jae    c00026ea <create_name+0x173>
c00026df:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c00026e3:	75 47                	jne    c000272c <create_name+0x1b5>
c00026e5:	e9 51 01 00 00       	jmp    c000283b <create_name+0x2c4>
c00026ea:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c00026ef:	75 10                	jne    c0002701 <create_name+0x18a>
c00026f1:	83 cb 03             	or     ebx,0x3
c00026f4:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c00026fc:	e9 e9 00 00 00       	jmp    c00027ea <create_name+0x273>
c0002701:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002705:	74 0d                	je     c0002714 <create_name+0x19d>
c0002707:	83 cb 03             	or     ebx,0x3
c000270a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c000270e:	0f 87 d6 00 00 00    	ja     c00027ea <create_name+0x273>
c0002714:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002719:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000271d:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002725:	b9 08 00 00 00       	mov    ecx,0x8
c000272a:	eb a7                	jmp    c00026d3 <create_name+0x15c>
c000272c:	66 83 fd 7f          	cmp    bp,0x7f
c0002730:	76 68                	jbe    c000279a <create_name+0x223>
c0002732:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002736:	88 da                	mov    dl,bl
c0002738:	83 ca 02             	or     edx,0x2
c000273b:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c000273f:	50                   	push   eax
c0002740:	50                   	push   eax
c0002741:	68 b5 01 00 00       	push   0x1b5
c0002746:	55                   	push   ebp
c0002747:	e8 d8 32 00 00       	call   c0005a24 <ff_uni2oem>
c000274c:	83 c4 10             	add    esp,0x10
c000274f:	89 c5                	mov    ebp,eax
c0002751:	a8 80                	test   al,0x80
c0002753:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002757:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000275b:	74 0c                	je     c0002769 <create_name+0x1f2>
c000275d:	83 e5 7f             	and    ebp,0x7f
c0002760:	0f b6 ad c0 d7 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe2840]
c0002767:	eb 2a                	jmp    c0002793 <create_name+0x21c>
c0002769:	66 3d ff 00          	cmp    ax,0xff
c000276d:	76 24                	jbe    c0002793 <create_name+0x21c>
c000276f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002773:	48                   	dec    eax
c0002774:	39 c8                	cmp    eax,ecx
c0002776:	77 0c                	ja     c0002784 <create_name+0x20d>
c0002778:	83 cb 03             	or     ebx,0x3
c000277b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000277f:	e9 4f ff ff ff       	jmp    c00026d3 <create_name+0x15c>
c0002784:	89 e8                	mov    eax,ebp
c0002786:	88 d3                	mov    bl,dl
c0002788:	66 c1 e8 08          	shr    ax,0x8
c000278c:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002790:	41                   	inc    ecx
c0002791:	eb 4b                	jmp    c00027de <create_name+0x267>
c0002793:	88 d3                	mov    bl,dl
c0002795:	66 85 ed             	test   bp,bp
c0002798:	74 19                	je     c00027b3 <create_name+0x23c>
c000279a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000279e:	0f b7 d5             	movzx  edx,bp
c00027a1:	b8 0b d7 01 c0       	mov    eax,0xc001d70b
c00027a6:	e8 43 f2 ff ff       	call   c00019ee <chk_chr>
c00027ab:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00027af:	85 c0                	test   eax,eax
c00027b1:	74 0a                	je     c00027bd <create_name+0x246>
c00027b3:	83 cb 03             	or     ebx,0x3
c00027b6:	bd 5f 00 00 00       	mov    ebp,0x5f
c00027bb:	eb 21                	jmp    c00027de <create_name+0x267>
c00027bd:	8d 45 bf             	lea    eax,[ebp-0x41]
c00027c0:	66 83 f8 19          	cmp    ax,0x19
c00027c4:	77 07                	ja     c00027cd <create_name+0x256>
c00027c6:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c00027cb:	eb 11                	jmp    c00027de <create_name+0x267>
c00027cd:	8d 45 9f             	lea    eax,[ebp-0x61]
c00027d0:	66 83 f8 19          	cmp    ax,0x19
c00027d4:	77 08                	ja     c00027de <create_name+0x267>
c00027d6:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c00027db:	83 ed 20             	sub    ebp,0x20
c00027de:	89 e8                	mov    eax,ebp
c00027e0:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c00027e4:	41                   	inc    ecx
c00027e5:	e9 e9 fe ff ff       	jmp    c00026d3 <create_name+0x15c>
c00027ea:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c00027ee:	75 04                	jne    c00027f4 <create_name+0x27d>
c00027f0:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c00027f4:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c00027f9:	75 05                	jne    c0002800 <create_name+0x289>
c00027fb:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002800:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002804:	83 e0 0c             	and    eax,0xc
c0002807:	3c 0c                	cmp    al,0xc
c0002809:	74 0b                	je     c0002816 <create_name+0x29f>
c000280b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000280f:	83 e0 03             	and    eax,0x3
c0002812:	3c 03                	cmp    al,0x3
c0002814:	75 05                	jne    c000281b <create_name+0x2a4>
c0002816:	83 cb 02             	or     ebx,0x2
c0002819:	eb 19                	jmp    c0002834 <create_name+0x2bd>
c000281b:	f6 c3 02             	test   bl,0x2
c000281e:	75 14                	jne    c0002834 <create_name+0x2bd>
c0002820:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002825:	74 03                	je     c000282a <create_name+0x2b3>
c0002827:	83 cb 10             	or     ebx,0x10
c000282a:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c000282f:	74 03                	je     c0002834 <create_name+0x2bd>
c0002831:	83 cb 08             	or     ebx,0x8
c0002834:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002837:	31 c0                	xor    eax,eax
c0002839:	eb 10                	jmp    c000284b <create_name+0x2d4>
c000283b:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002840:	0f 85 ce fe ff ff    	jne    c0002714 <create_name+0x19d>
c0002846:	e9 a6 fe ff ff       	jmp    c00026f1 <create_name+0x17a>
c000284b:	83 c4 3c             	add    esp,0x3c
c000284e:	5b                   	pop    ebx
c000284f:	5e                   	pop    esi
c0002850:	5f                   	pop    edi
c0002851:	5d                   	pop    ebp
c0002852:	c3                   	ret    

c0002853 <cmp_lfn>:
c0002853:	55                   	push   ebp
c0002854:	57                   	push   edi
c0002855:	89 d7                	mov    edi,edx
c0002857:	56                   	push   esi
c0002858:	53                   	push   ebx
c0002859:	83 ec 1c             	sub    esp,0x1c
c000285c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002860:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002863:	e8 17 f1 ff ff       	call   c000197f <ld_word>
c0002868:	66 85 c0             	test   ax,ax
c000286b:	74 07                	je     c0002874 <cmp_lfn+0x21>
c000286d:	31 c0                	xor    eax,eax
c000286f:	e9 9a 00 00 00       	jmp    c000290e <cmp_lfn+0xbb>
c0002874:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002876:	bd 01 00 00 00       	mov    ebp,0x1
c000287b:	83 e3 3f             	and    ebx,0x3f
c000287e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002886:	4b                   	dec    ebx
c0002887:	6b db 0d             	imul   ebx,ebx,0xd
c000288a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000288e:	0f b6 80 40 d8 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe27c0]
c0002895:	01 f8                	add    eax,edi
c0002897:	e8 e3 f0 ff ff       	call   c000197f <ld_word>
c000289c:	66 85 ed             	test   bp,bp
c000289f:	89 c6                	mov    esi,eax
c00028a1:	74 3c                	je     c00028df <cmp_lfn+0x8c>
c00028a3:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00028a9:	77 c2                	ja     c000286d <cmp_lfn+0x1a>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	0f b7 c0             	movzx  eax,ax
c00028b1:	50                   	push   eax
c00028b2:	e8 79 32 00 00       	call   c0005b30 <ff_wtoupper>
c00028b7:	89 c5                	mov    ebp,eax
c00028b9:	8d 43 01             	lea    eax,[ebx+0x1]
c00028bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00028c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028c4:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00028c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00028cb:	e8 60 32 00 00       	call   c0005b30 <ff_wtoupper>
c00028d0:	83 c4 10             	add    esp,0x10
c00028d3:	39 c5                	cmp    ebp,eax
c00028d5:	75 96                	jne    c000286d <cmp_lfn+0x1a>
c00028d7:	89 f5                	mov    ebp,esi
c00028d9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00028dd:	eb 04                	jmp    c00028e3 <cmp_lfn+0x90>
c00028df:	66 46                	inc    si
c00028e1:	75 8a                	jne    c000286d <cmp_lfn+0x1a>
c00028e3:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00028e7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00028ec:	75 9c                	jne    c000288a <cmp_lfn+0x37>
c00028ee:	f6 07 40             	test   BYTE PTR [edi],0x40
c00028f1:	74 16                	je     c0002909 <cmp_lfn+0xb6>
c00028f3:	66 85 ed             	test   bp,bp
c00028f6:	74 11                	je     c0002909 <cmp_lfn+0xb6>
c00028f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028fc:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002901:	0f 94 c0             	sete   al
c0002904:	0f b6 c0             	movzx  eax,al
c0002907:	eb 05                	jmp    c000290e <cmp_lfn+0xbb>
c0002909:	b8 01 00 00 00       	mov    eax,0x1
c000290e:	83 c4 1c             	add    esp,0x1c
c0002911:	5b                   	pop    ebx
c0002912:	5e                   	pop    esi
c0002913:	5f                   	pop    edi
c0002914:	5d                   	pop    ebp
c0002915:	c3                   	ret    

c0002916 <sync_fs>:
c0002916:	56                   	push   esi
c0002917:	53                   	push   ebx
c0002918:	53                   	push   ebx
c0002919:	89 c3                	mov    ebx,eax
c000291b:	e8 54 f5 ff ff       	call   c0001e74 <sync_window>
c0002920:	85 c0                	test   eax,eax
c0002922:	0f 85 9a 00 00 00    	jne    c00029c2 <sync_fs+0xac>
c0002928:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000292b:	75 7b                	jne    c00029a8 <sync_fs+0x92>
c000292d:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002931:	75 75                	jne    c00029a8 <sync_fs+0x92>
c0002933:	b9 00 02 00 00       	mov    ecx,0x200
c0002938:	8d 73 34             	lea    esi,[ebx+0x34]
c000293b:	31 d2                	xor    edx,edx
c000293d:	89 f0                	mov    eax,esi
c000293f:	e8 7c f0 ff ff       	call   c00019c0 <mem_set>
c0002944:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000294a:	ba 55 aa 00 00       	mov    edx,0xaa55
c000294f:	e8 50 f0 ff ff       	call   c00019a4 <st_word>
c0002954:	ba 52 52 61 41       	mov    edx,0x41615252
c0002959:	89 f0                	mov    eax,esi
c000295b:	e8 48 f0 ff ff       	call   c00019a8 <st_dword>
c0002960:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002966:	ba 72 72 41 61       	mov    edx,0x61417272
c000296b:	e8 38 f0 ff ff       	call   c00019a8 <st_dword>
c0002970:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002973:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002979:	e8 2a f0 ff ff       	call   c00019a8 <st_dword>
c000297e:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002981:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002987:	e8 1c f0 ff ff       	call   c00019a8 <st_dword>
c000298c:	6a 01                	push   0x1
c000298e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002991:	40                   	inc    eax
c0002992:	50                   	push   eax
c0002993:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002996:	56                   	push   esi
c0002997:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000299b:	50                   	push   eax
c000299c:	e8 a9 ef ff ff       	call   c000194a <disk_write>
c00029a1:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00029a5:	83 c4 10             	add    esp,0x10
c00029a8:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00029ac:	51                   	push   ecx
c00029ad:	6a 00                	push   0x0
c00029af:	6a 00                	push   0x0
c00029b1:	50                   	push   eax
c00029b2:	e8 a9 ef ff ff       	call   c0001960 <disk_ioctl>
c00029b7:	83 c4 10             	add    esp,0x10
c00029ba:	85 c0                	test   eax,eax
c00029bc:	0f 95 c0             	setne  al
c00029bf:	0f b6 c0             	movzx  eax,al
c00029c2:	5a                   	pop    edx
c00029c3:	5b                   	pop    ebx
c00029c4:	5e                   	pop    esi
c00029c5:	c3                   	ret    

c00029c6 <create_partition>:
c00029c6:	55                   	push   ebp
c00029c7:	0f b6 c0             	movzx  eax,al
c00029ca:	57                   	push   edi
c00029cb:	56                   	push   esi
c00029cc:	53                   	push   ebx
c00029cd:	83 ec 40             	sub    esp,0x40
c00029d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029d4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00029d8:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00029dc:	8d 44 24 30          	lea    eax,[esp+0x30]
c00029e0:	50                   	push   eax
c00029e1:	6a 01                	push   0x1
c00029e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00029e7:	e8 74 ef ff ff       	call   c0001960 <disk_ioctl>
c00029ec:	83 c4 10             	add    esp,0x10
c00029ef:	85 c0                	test   eax,eax
c00029f1:	0f 85 6a 01 00 00    	jne    c0002b61 <create_partition+0x19b>
c00029f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00029fb:	b9 05 00 00 00       	mov    ecx,0x5
c0002a00:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002a04:	be 08 00 00 00       	mov    esi,0x8
c0002a09:	89 f0                	mov    eax,esi
c0002a0b:	31 d2                	xor    edx,edx
c0002a0d:	0f b6 d8             	movzx  ebx,al
c0002a10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a14:	f7 f3                	div    ebx
c0002a16:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002a1b:	76 0a                	jbe    c0002a27 <create_partition+0x61>
c0002a1d:	d1 e6                	shl    esi,1
c0002a1f:	49                   	dec    ecx
c0002a20:	75 e7                	jne    c0002a09 <create_partition+0x43>
c0002a22:	be ff ff ff ff       	mov    esi,0xffffffff
c0002a27:	b9 00 02 00 00       	mov    ecx,0x200
c0002a2c:	31 d2                	xor    edx,edx
c0002a2e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002a32:	e8 89 ef ff ff       	call   c00019c0 <mem_set>
c0002a37:	b9 64 00 00 00       	mov    ecx,0x64
c0002a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a40:	31 d2                	xor    edx,edx
c0002a42:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a4a:	f7 f1                	div    ecx
c0002a4c:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002a51:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002a55:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002a59:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002a5f:	89 f0                	mov    eax,esi
c0002a61:	0f b6 c0             	movzx  eax,al
c0002a64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002a68:	85 c9                	test   ecx,ecx
c0002a6a:	75 34                	jne    c0002aa0 <create_partition+0xda>
c0002a6c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002a70:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002a75:	05 fe 01 00 00       	add    eax,0x1fe
c0002a7a:	e8 25 ef ff ff       	call   c00019a4 <st_word>
c0002a7f:	6a 01                	push   0x1
c0002a81:	6a 00                	push   0x0
c0002a83:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002a87:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002a8b:	e8 ba ee ff ff       	call   c000194a <disk_write>
c0002a90:	83 c4 10             	add    esp,0x10
c0002a93:	85 c0                	test   eax,eax
c0002a95:	0f 95 c0             	setne  al
c0002a98:	0f b6 c0             	movzx  eax,al
c0002a9b:	e9 c6 00 00 00       	jmp    c0002b66 <create_partition+0x1a0>
c0002aa0:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002aa4:	76 c6                	jbe    c0002a6c <create_partition+0xa6>
c0002aa6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002aaa:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002aae:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002ab1:	83 fe 64             	cmp    esi,0x64
c0002ab4:	77 0d                	ja     c0002ac3 <create_partition+0xfd>
c0002ab6:	74 07                	je     c0002abf <create_partition+0xf9>
c0002ab8:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002abd:	eb 04                	jmp    c0002ac3 <create_partition+0xfd>
c0002abf:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002ac3:	31 c0                	xor    eax,eax
c0002ac5:	89 f2                	mov    edx,esi
c0002ac7:	01 ca                	add    edx,ecx
c0002ac9:	0f 92 c0             	setb   al
c0002acc:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002ad0:	77 04                	ja     c0002ad6 <create_partition+0x110>
c0002ad2:	85 c0                	test   eax,eax
c0002ad4:	74 08                	je     c0002ade <create_partition+0x118>
c0002ad6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002ada:	29 ce                	sub    esi,ecx
c0002adc:	eb 04                	jmp    c0002ae2 <create_partition+0x11c>
c0002ade:	85 f6                	test   esi,esi
c0002ae0:	74 8a                	je     c0002a6c <create_partition+0xa6>
c0002ae2:	89 ca                	mov    edx,ecx
c0002ae4:	89 d8                	mov    eax,ebx
c0002ae6:	bf 3f 00 00 00       	mov    edi,0x3f
c0002aeb:	e8 b8 ee ff ff       	call   c00019a8 <st_dword>
c0002af0:	8d 43 04             	lea    eax,[ebx+0x4]
c0002af3:	89 f2                	mov    edx,esi
c0002af5:	83 c3 10             	add    ebx,0x10
c0002af8:	e8 ab ee ff ff       	call   c00019a8 <st_dword>
c0002afd:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002b01:	31 d2                	xor    edx,edx
c0002b03:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002b06:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b0a:	89 c8                	mov    eax,ecx
c0002b0c:	01 f1                	add    ecx,esi
c0002b0e:	f7 f7                	div    edi
c0002b10:	89 d5                	mov    ebp,edx
c0002b12:	31 d2                	xor    edx,edx
c0002b14:	45                   	inc    ebp
c0002b15:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002b19:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002b1c:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002b1f:	89 c2                	mov    edx,eax
c0002b21:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002b24:	c1 ea 02             	shr    edx,0x2
c0002b27:	83 e2 c0             	and    edx,0xffffffc0
c0002b2a:	09 ea                	or     edx,ebp
c0002b2c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002b2f:	31 d2                	xor    edx,edx
c0002b31:	f7 f7                	div    edi
c0002b33:	89 d6                	mov    esi,edx
c0002b35:	31 d2                	xor    edx,edx
c0002b37:	46                   	inc    esi
c0002b38:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002b3c:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002b3f:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002b42:	89 c7                	mov    edi,eax
c0002b44:	c1 ef 02             	shr    edi,0x2
c0002b47:	83 e7 c0             	and    edi,0xffffffc0
c0002b4a:	09 fe                	or     esi,edi
c0002b4c:	89 f2                	mov    edx,esi
c0002b4e:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002b51:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002b56:	0f 85 0c ff ff ff    	jne    c0002a68 <create_partition+0xa2>
c0002b5c:	e9 0b ff ff ff       	jmp    c0002a6c <create_partition+0xa6>
c0002b61:	b8 01 00 00 00       	mov    eax,0x1
c0002b66:	83 c4 3c             	add    esp,0x3c
c0002b69:	5b                   	pop    ebx
c0002b6a:	5e                   	pop    esi
c0002b6b:	5f                   	pop    edi
c0002b6c:	5d                   	pop    ebp
c0002b6d:	c3                   	ret    

c0002b6e <get_fileinfo>:
c0002b6e:	55                   	push   ebp
c0002b6f:	57                   	push   edi
c0002b70:	56                   	push   esi
c0002b71:	53                   	push   ebx
c0002b72:	83 ec 1c             	sub    esp,0x1c
c0002b75:	8b 30                	mov    esi,DWORD PTR [eax]
c0002b77:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002b7b:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002b7f:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002b83:	0f 84 c1 01 00 00    	je     c0002d4a <get_fileinfo+0x1dc>
c0002b89:	89 d3                	mov    ebx,edx
c0002b8b:	89 c6                	mov    esi,eax
c0002b8d:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002b91:	74 6a                	je     c0002bfd <get_fileinfo+0x8f>
c0002b93:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b9b:	31 ed                	xor    ebp,ebp
c0002b9d:	31 ff                	xor    edi,edi
c0002b9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ba3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002ba7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002baa:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002bae:	66 85 d2             	test   dx,dx
c0002bb1:	74 3e                	je     c0002bf1 <get_fileinfo+0x83>
c0002bb3:	66 85 ed             	test   bp,bp
c0002bb6:	75 0c                	jne    c0002bc4 <get_fileinfo+0x56>
c0002bb8:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002bbe:	66 3d ff 07          	cmp    ax,0x7ff
c0002bc2:	76 22                	jbe    c0002be6 <get_fileinfo+0x78>
c0002bc4:	b9 ff 00 00 00       	mov    ecx,0xff
c0002bc9:	89 e8                	mov    eax,ebp
c0002bcb:	29 f9                	sub    ecx,edi
c0002bcd:	c1 e0 10             	shl    eax,0x10
c0002bd0:	09 d0                	or     eax,edx
c0002bd2:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002bd6:	e8 f1 ee ff ff       	call   c0001acc <put_utf>
c0002bdb:	84 c0                	test   al,al
c0002bdd:	74 10                	je     c0002bef <get_fileinfo+0x81>
c0002bdf:	0f b6 c0             	movzx  eax,al
c0002be2:	31 d2                	xor    edx,edx
c0002be4:	01 c7                	add    edi,eax
c0002be6:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002beb:	89 d5                	mov    ebp,edx
c0002bed:	eb b0                	jmp    c0002b9f <get_fileinfo+0x31>
c0002bef:	31 ff                	xor    edi,edi
c0002bf1:	66 85 ed             	test   bp,bp
c0002bf4:	74 02                	je     c0002bf8 <get_fileinfo+0x8a>
c0002bf6:	31 ff                	xor    edi,edi
c0002bf8:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002bfd:	31 ff                	xor    edi,edi
c0002bff:	31 c9                	xor    ecx,ecx
c0002c01:	83 f9 0a             	cmp    ecx,0xa
c0002c04:	0f 87 ad 00 00 00    	ja     c0002cb7 <get_fileinfo+0x149>
c0002c0a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002c0d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002c10:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002c14:	66 83 fa 20          	cmp    dx,0x20
c0002c18:	0f 84 92 00 00 00    	je     c0002cb0 <get_fileinfo+0x142>
c0002c1e:	66 83 fa 05          	cmp    dx,0x5
c0002c22:	75 05                	jne    c0002c29 <get_fileinfo+0xbb>
c0002c24:	ba e5 00 00 00       	mov    edx,0xe5
c0002c29:	83 ff 0b             	cmp    edi,0xb
c0002c2c:	77 0b                	ja     c0002c39 <get_fileinfo+0xcb>
c0002c2e:	83 fd 09             	cmp    ebp,0x9
c0002c31:	75 06                	jne    c0002c39 <get_fileinfo+0xcb>
c0002c33:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002c38:	47                   	inc    edi
c0002c39:	0f b7 c2             	movzx  eax,dx
c0002c3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c40:	e8 bb ed ff ff       	call   c0001a00 <dbc_1st>
c0002c45:	85 c0                	test   eax,eax
c0002c47:	74 2f                	je     c0002c78 <get_fileinfo+0x10a>
c0002c49:	83 fd 08             	cmp    ebp,0x8
c0002c4c:	74 2a                	je     c0002c78 <get_fileinfo+0x10a>
c0002c4e:	83 fd 0b             	cmp    ebp,0xb
c0002c51:	74 25                	je     c0002c78 <get_fileinfo+0x10a>
c0002c53:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002c56:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002c5a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002c5e:	e8 a0 ed ff ff       	call   c0001a03 <dbc_2nd>
c0002c63:	85 c0                	test   eax,eax
c0002c65:	74 11                	je     c0002c78 <get_fileinfo+0x10a>
c0002c67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c6b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002c70:	c1 e2 08             	shl    edx,0x8
c0002c73:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002c76:	09 c2                	or     edx,eax
c0002c78:	0f b7 d2             	movzx  edx,dx
c0002c7b:	50                   	push   eax
c0002c7c:	50                   	push   eax
c0002c7d:	68 b5 01 00 00       	push   0x1b5
c0002c82:	52                   	push   edx
c0002c83:	e8 34 2e 00 00       	call   c0005abc <ff_oem2uni>
c0002c88:	83 c4 10             	add    esp,0x10
c0002c8b:	66 85 c0             	test   ax,ax
c0002c8e:	75 04                	jne    c0002c94 <get_fileinfo+0x126>
c0002c90:	31 ff                	xor    edi,edi
c0002c92:	eb 23                	jmp    c0002cb7 <get_fileinfo+0x149>
c0002c94:	b9 0c 00 00 00       	mov    ecx,0xc
c0002c99:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0002c9d:	29 f9                	sub    ecx,edi
c0002c9f:	0f b7 c0             	movzx  eax,ax
c0002ca2:	e8 25 ee ff ff       	call   c0001acc <put_utf>
c0002ca7:	84 c0                	test   al,al
c0002ca9:	74 e5                	je     c0002c90 <get_fileinfo+0x122>
c0002cab:	0f b6 c0             	movzx  eax,al
c0002cae:	01 c7                	add    edi,eax
c0002cb0:	89 e9                	mov    ecx,ebp
c0002cb2:	e9 4a ff ff ff       	jmp    c0002c01 <get_fileinfo+0x93>
c0002cb7:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0002cbc:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0002cc0:	75 54                	jne    c0002d16 <get_fileinfo+0x1a8>
c0002cc2:	85 ff                	test   edi,edi
c0002cc4:	75 0b                	jne    c0002cd1 <get_fileinfo+0x163>
c0002cc6:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0002cca:	ba 01 00 00 00       	mov    edx,0x1
c0002ccf:	eb 33                	jmp    c0002d04 <get_fileinfo+0x196>
c0002cd1:	b1 08                	mov    cl,0x8
c0002cd3:	31 d2                	xor    edx,edx
c0002cd5:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0002cdb:	84 c0                	test   al,al
c0002cdd:	74 25                	je     c0002d04 <get_fileinfo+0x196>
c0002cdf:	66 83 f8 2e          	cmp    ax,0x2e
c0002ce3:	74 16                	je     c0002cfb <get_fileinfo+0x18d>
c0002ce5:	8d 78 bf             	lea    edi,[eax-0x41]
c0002ce8:	66 83 ff 19          	cmp    di,0x19
c0002cec:	77 0f                	ja     c0002cfd <get_fileinfo+0x18f>
c0002cee:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c0002cf1:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0002cf4:	74 07                	je     c0002cfd <get_fileinfo+0x18f>
c0002cf6:	83 c0 20             	add    eax,0x20
c0002cf9:	eb 02                	jmp    c0002cfd <get_fileinfo+0x18f>
c0002cfb:	b1 10                	mov    cl,0x10
c0002cfd:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0002d01:	42                   	inc    edx
c0002d02:	eb d1                	jmp    c0002cd5 <get_fileinfo+0x167>
c0002d04:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0002d09:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002d0c:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0002d10:	75 04                	jne    c0002d16 <get_fileinfo+0x1a8>
c0002d12:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0002d16:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002d19:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0002d1c:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0002d1f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002d22:	83 c0 1c             	add    eax,0x1c
c0002d25:	e8 62 ec ff ff       	call   c000198c <ld_dword>
c0002d2a:	89 03                	mov    DWORD PTR [ebx],eax
c0002d2c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002d2f:	83 c0 16             	add    eax,0x16
c0002d32:	e8 48 ec ff ff       	call   c000197f <ld_word>
c0002d37:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0002d3b:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002d3e:	83 c0 18             	add    eax,0x18
c0002d41:	e8 39 ec ff ff       	call   c000197f <ld_word>
c0002d46:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0002d4a:	83 c4 1c             	add    esp,0x1c
c0002d4d:	5b                   	pop    ebx
c0002d4e:	5e                   	pop    esi
c0002d4f:	5f                   	pop    edi
c0002d50:	5d                   	pop    ebp
c0002d51:	c3                   	ret    

c0002d52 <ld_clust.isra.0>:
c0002d52:	56                   	push   esi
c0002d53:	89 c6                	mov    esi,eax
c0002d55:	53                   	push   ebx
c0002d56:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002d59:	89 d3                	mov    ebx,edx
c0002d5b:	e8 1f ec ff ff       	call   c000197f <ld_word>
c0002d60:	0f b7 c8             	movzx  ecx,ax
c0002d63:	89 f0                	mov    eax,esi
c0002d65:	3c 03                	cmp    al,0x3
c0002d67:	75 0d                	jne    c0002d76 <ld_clust.isra.0+0x24>
c0002d69:	8d 43 14             	lea    eax,[ebx+0x14]
c0002d6c:	e8 0e ec ff ff       	call   c000197f <ld_word>
c0002d71:	c1 e0 10             	shl    eax,0x10
c0002d74:	09 c1                	or     ecx,eax
c0002d76:	89 c8                	mov    eax,ecx
c0002d78:	5b                   	pop    ebx
c0002d79:	5e                   	pop    esi
c0002d7a:	c3                   	ret    

c0002d7b <st_clust.isra.1>:
c0002d7b:	56                   	push   esi
c0002d7c:	89 c6                	mov    esi,eax
c0002d7e:	53                   	push   ebx
c0002d7f:	89 d3                	mov    ebx,edx
c0002d81:	0f b7 d1             	movzx  edx,cx
c0002d84:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0002d87:	e8 18 ec ff ff       	call   c00019a4 <st_word>
c0002d8c:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0002d8f:	75 0f                	jne    c0002da0 <st_clust.isra.1+0x25>
c0002d91:	c1 e9 10             	shr    ecx,0x10
c0002d94:	8d 43 14             	lea    eax,[ebx+0x14]
c0002d97:	89 ca                	mov    edx,ecx
c0002d99:	5b                   	pop    ebx
c0002d9a:	5e                   	pop    esi
c0002d9b:	e9 04 ec ff ff       	jmp    c00019a4 <st_word>
c0002da0:	5b                   	pop    ebx
c0002da1:	5e                   	pop    esi
c0002da2:	c3                   	ret    

c0002da3 <get_fat.isra.2>:
c0002da3:	b9 01 00 00 00       	mov    ecx,0x1
c0002da8:	83 fa 01             	cmp    edx,0x1
c0002dab:	0f 86 f1 00 00 00    	jbe    c0002ea2 <get_fat.isra.2+0xff>
c0002db1:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0002db4:	0f 83 e8 00 00 00    	jae    c0002ea2 <get_fat.isra.2+0xff>
c0002dba:	55                   	push   ebp
c0002dbb:	57                   	push   edi
c0002dbc:	89 c7                	mov    edi,eax
c0002dbe:	56                   	push   esi
c0002dbf:	89 d6                	mov    esi,edx
c0002dc1:	53                   	push   ebx
c0002dc2:	83 ec 0c             	sub    esp,0xc
c0002dc5:	8a 00                	mov    al,BYTE PTR [eax]
c0002dc7:	3c 02                	cmp    al,0x2
c0002dc9:	74 78                	je     c0002e43 <get_fat.isra.2+0xa0>
c0002dcb:	3c 03                	cmp    al,0x3
c0002dcd:	0f 84 97 00 00 00    	je     c0002e6a <get_fat.isra.2+0xc7>
c0002dd3:	fe c8                	dec    al
c0002dd5:	0f 85 bd 00 00 00    	jne    c0002e98 <get_fat.isra.2+0xf5>
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	89 f8                	mov    eax,edi
c0002ddf:	d1 eb                	shr    ebx,1
c0002de1:	01 d3                	add    ebx,edx
c0002de3:	89 da                	mov    edx,ebx
c0002de5:	c1 ea 09             	shr    edx,0x9
c0002de8:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002deb:	e8 e7 f0 ff ff       	call   c0001ed7 <move_window>
c0002df0:	85 c0                	test   eax,eax
c0002df2:	74 08                	je     c0002dfc <get_fat.isra.2+0x59>
c0002df4:	83 c9 ff             	or     ecx,0xffffffff
c0002df7:	e9 9c 00 00 00       	jmp    c0002e98 <get_fat.isra.2+0xf5>
c0002dfc:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002dff:	89 f8                	mov    eax,edi
c0002e01:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e07:	89 ea                	mov    edx,ebp
c0002e09:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0002e0d:	c1 ea 09             	shr    edx,0x9
c0002e10:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002e13:	e8 bf f0 ff ff       	call   c0001ed7 <move_window>
c0002e18:	85 c0                	test   eax,eax
c0002e1a:	75 d8                	jne    c0002df4 <get_fat.isra.2+0x51>
c0002e1c:	0f b6 c3             	movzx  eax,bl
c0002e1f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e25:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0002e2a:	c1 e3 08             	shl    ebx,0x8
c0002e2d:	09 c3                	or     ebx,eax
c0002e2f:	89 d9                	mov    ecx,ebx
c0002e31:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e37:	83 e6 01             	and    esi,0x1
c0002e3a:	74 5c                	je     c0002e98 <get_fat.isra.2+0xf5>
c0002e3c:	89 d9                	mov    ecx,ebx
c0002e3e:	c1 e9 04             	shr    ecx,0x4
c0002e41:	eb 55                	jmp    c0002e98 <get_fat.isra.2+0xf5>
c0002e43:	c1 ea 08             	shr    edx,0x8
c0002e46:	89 f8                	mov    eax,edi
c0002e48:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002e4b:	e8 87 f0 ff ff       	call   c0001ed7 <move_window>
c0002e50:	85 c0                	test   eax,eax
c0002e52:	75 a0                	jne    c0002df4 <get_fat.isra.2+0x51>
c0002e54:	01 f6                	add    esi,esi
c0002e56:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e5c:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0002e60:	e8 1a eb ff ff       	call   c000197f <ld_word>
c0002e65:	0f b7 c8             	movzx  ecx,ax
c0002e68:	eb 2e                	jmp    c0002e98 <get_fat.isra.2+0xf5>
c0002e6a:	c1 ea 07             	shr    edx,0x7
c0002e6d:	89 f8                	mov    eax,edi
c0002e6f:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002e72:	e8 60 f0 ff ff       	call   c0001ed7 <move_window>
c0002e77:	85 c0                	test   eax,eax
c0002e79:	0f 85 75 ff ff ff    	jne    c0002df4 <get_fat.isra.2+0x51>
c0002e7f:	c1 e6 02             	shl    esi,0x2
c0002e82:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e88:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0002e8c:	e8 fb ea ff ff       	call   c000198c <ld_dword>
c0002e91:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e96:	89 c1                	mov    ecx,eax
c0002e98:	83 c4 0c             	add    esp,0xc
c0002e9b:	89 c8                	mov    eax,ecx
c0002e9d:	5b                   	pop    ebx
c0002e9e:	5e                   	pop    esi
c0002e9f:	5f                   	pop    edi
c0002ea0:	5d                   	pop    ebp
c0002ea1:	c3                   	ret    
c0002ea2:	89 c8                	mov    eax,ecx
c0002ea4:	c3                   	ret    

c0002ea5 <dir_sdi>:
c0002ea5:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0002eab:	0f 87 b6 00 00 00    	ja     c0002f67 <dir_sdi+0xc2>
c0002eb1:	55                   	push   ebp
c0002eb2:	57                   	push   edi
c0002eb3:	56                   	push   esi
c0002eb4:	53                   	push   ebx
c0002eb5:	89 d3                	mov    ebx,edx
c0002eb7:	83 ec 1c             	sub    esp,0x1c
c0002eba:	f6 c2 1f             	test   dl,0x1f
c0002ebd:	74 0a                	je     c0002ec9 <dir_sdi+0x24>
c0002ebf:	b8 02 00 00 00       	mov    eax,0x2
c0002ec4:	e9 96 00 00 00       	jmp    c0002f5f <dir_sdi+0xba>
c0002ec9:	89 c6                	mov    esi,eax
c0002ecb:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ecd:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0002ed0:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0002ed3:	85 c9                	test   ecx,ecx
c0002ed5:	75 23                	jne    c0002efa <dir_sdi+0x55>
c0002ed7:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002eda:	76 07                	jbe    c0002ee3 <dir_sdi+0x3e>
c0002edc:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0002edf:	85 c0                	test   eax,eax
c0002ee1:	75 15                	jne    c0002ef8 <dir_sdi+0x53>
c0002ee3:	89 da                	mov    edx,ebx
c0002ee5:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002ee9:	c1 ea 05             	shr    edx,0x5
c0002eec:	39 c2                	cmp    edx,eax
c0002eee:	73 cf                	jae    c0002ebf <dir_sdi+0x1a>
c0002ef0:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0002ef3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0002ef6:	eb 3d                	jmp    c0002f35 <dir_sdi+0x90>
c0002ef8:	89 c1                	mov    ecx,eax
c0002efa:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002efe:	c1 e5 09             	shl    ebp,0x9
c0002f01:	89 ca                	mov    edx,ecx
c0002f03:	39 eb                	cmp    ebx,ebp
c0002f05:	72 1c                	jb     c0002f23 <dir_sdi+0x7e>
c0002f07:	8b 06                	mov    eax,DWORD PTR [esi]
c0002f09:	e8 95 fe ff ff       	call   c0002da3 <get_fat.isra.2>
c0002f0e:	89 c1                	mov    ecx,eax
c0002f10:	83 f8 ff             	cmp    eax,0xffffffff
c0002f13:	74 45                	je     c0002f5a <dir_sdi+0xb5>
c0002f15:	83 f8 01             	cmp    eax,0x1
c0002f18:	76 a5                	jbe    c0002ebf <dir_sdi+0x1a>
c0002f1a:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0002f1d:	76 a0                	jbe    c0002ebf <dir_sdi+0x1a>
c0002f1f:	29 eb                	sub    ebx,ebp
c0002f21:	eb de                	jmp    c0002f01 <dir_sdi+0x5c>
c0002f23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002f27:	89 f8                	mov    eax,edi
c0002f29:	e8 97 ec ff ff       	call   c0001bc5 <clst2sect>
c0002f2e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f32:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0002f35:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0002f38:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0002f3b:	85 d2                	test   edx,edx
c0002f3d:	74 80                	je     c0002ebf <dir_sdi+0x1a>
c0002f3f:	89 d8                	mov    eax,ebx
c0002f41:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f47:	c1 e8 09             	shr    eax,0x9
c0002f4a:	01 d0                	add    eax,edx
c0002f4c:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0002f4f:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c0002f53:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002f56:	31 c0                	xor    eax,eax
c0002f58:	eb 05                	jmp    c0002f5f <dir_sdi+0xba>
c0002f5a:	b8 01 00 00 00       	mov    eax,0x1
c0002f5f:	83 c4 1c             	add    esp,0x1c
c0002f62:	5b                   	pop    ebx
c0002f63:	5e                   	pop    esi
c0002f64:	5f                   	pop    edi
c0002f65:	5d                   	pop    ebp
c0002f66:	c3                   	ret    
c0002f67:	b8 02 00 00 00       	mov    eax,0x2
c0002f6c:	c3                   	ret    

c0002f6d <create_chain>:
c0002f6d:	55                   	push   ebp
c0002f6e:	89 c5                	mov    ebp,eax
c0002f70:	57                   	push   edi
c0002f71:	89 d7                	mov    edi,edx
c0002f73:	56                   	push   esi
c0002f74:	53                   	push   ebx
c0002f75:	83 ec 1c             	sub    esp,0x1c
c0002f78:	85 d2                	test   edx,edx
c0002f7a:	8b 30                	mov    esi,DWORD PTR [eax]
c0002f7c:	75 0e                	jne    c0002f8c <create_chain+0x1f>
c0002f7e:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0002f81:	85 c9                	test   ecx,ecx
c0002f83:	74 34                	je     c0002fb9 <create_chain+0x4c>
c0002f85:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0002f88:	77 34                	ja     c0002fbe <create_chain+0x51>
c0002f8a:	eb 2d                	jmp    c0002fb9 <create_chain+0x4c>
c0002f8c:	89 f0                	mov    eax,esi
c0002f8e:	e8 10 fe ff ff       	call   c0002da3 <get_fat.isra.2>
c0002f93:	89 c3                	mov    ebx,eax
c0002f95:	83 f8 01             	cmp    eax,0x1
c0002f98:	77 0a                	ja     c0002fa4 <create_chain+0x37>
c0002f9a:	bb 01 00 00 00       	mov    ebx,0x1
c0002f9f:	e9 f9 00 00 00       	jmp    c000309d <create_chain+0x130>
c0002fa4:	83 f8 ff             	cmp    eax,0xffffffff
c0002fa7:	0f 84 ed 00 00 00    	je     c000309a <create_chain+0x12d>
c0002fad:	89 f9                	mov    ecx,edi
c0002faf:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0002fb2:	76 0a                	jbe    c0002fbe <create_chain+0x51>
c0002fb4:	e9 e4 00 00 00       	jmp    c000309d <create_chain+0x130>
c0002fb9:	b9 01 00 00 00       	mov    ecx,0x1
c0002fbe:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0002fc2:	75 07                	jne    c0002fcb <create_chain+0x5e>
c0002fc4:	31 db                	xor    ebx,ebx
c0002fc6:	e9 d2 00 00 00       	jmp    c000309d <create_chain+0x130>
c0002fcb:	39 f9                	cmp    ecx,edi
c0002fcd:	75 46                	jne    c0003015 <create_chain+0xa8>
c0002fcf:	8d 59 01             	lea    ebx,[ecx+0x1]
c0002fd2:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0002fd5:	77 05                	ja     c0002fdc <create_chain+0x6f>
c0002fd7:	bb 02 00 00 00       	mov    ebx,0x2
c0002fdc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002fe0:	89 da                	mov    edx,ebx
c0002fe2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002fe5:	e8 b9 fd ff ff       	call   c0002da3 <get_fat.isra.2>
c0002fea:	83 f8 01             	cmp    eax,0x1
c0002fed:	74 ab                	je     c0002f9a <create_chain+0x2d>
c0002fef:	83 f8 ff             	cmp    eax,0xffffffff
c0002ff2:	0f 84 a2 00 00 00    	je     c000309a <create_chain+0x12d>
c0002ff8:	85 c0                	test   eax,eax
c0002ffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002ffe:	74 11                	je     c0003011 <create_chain+0xa4>
c0003000:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003003:	83 f8 01             	cmp    eax,0x1
c0003006:	76 0d                	jbe    c0003015 <create_chain+0xa8>
c0003008:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000300b:	73 08                	jae    c0003015 <create_chain+0xa8>
c000300d:	89 c1                	mov    ecx,eax
c000300f:	eb 04                	jmp    c0003015 <create_chain+0xa8>
c0003011:	85 db                	test   ebx,ebx
c0003013:	75 3d                	jne    c0003052 <create_chain+0xe5>
c0003015:	89 cb                	mov    ebx,ecx
c0003017:	43                   	inc    ebx
c0003018:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000301b:	77 0a                	ja     c0003027 <create_chain+0xba>
c000301d:	83 f9 01             	cmp    ecx,0x1
c0003020:	76 a2                	jbe    c0002fc4 <create_chain+0x57>
c0003022:	bb 02 00 00 00       	mov    ebx,0x2
c0003027:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000302b:	89 da                	mov    edx,ebx
c000302d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003030:	e8 6e fd ff ff       	call   c0002da3 <get_fat.isra.2>
c0003035:	85 c0                	test   eax,eax
c0003037:	74 19                	je     c0003052 <create_chain+0xe5>
c0003039:	83 f8 01             	cmp    eax,0x1
c000303c:	0f 84 58 ff ff ff    	je     c0002f9a <create_chain+0x2d>
c0003042:	40                   	inc    eax
c0003043:	74 55                	je     c000309a <create_chain+0x12d>
c0003045:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003049:	39 cb                	cmp    ebx,ecx
c000304b:	75 ca                	jne    c0003017 <create_chain+0xaa>
c000304d:	e9 72 ff ff ff       	jmp    c0002fc4 <create_chain+0x57>
c0003052:	83 c9 ff             	or     ecx,0xffffffff
c0003055:	89 da                	mov    edx,ebx
c0003057:	89 f0                	mov    eax,esi
c0003059:	e8 ce f2 ff ff       	call   c000232c <put_fat>
c000305e:	85 c0                	test   eax,eax
c0003060:	75 31                	jne    c0003093 <create_chain+0x126>
c0003062:	85 ff                	test   edi,edi
c0003064:	75 16                	jne    c000307c <create_chain+0x10f>
c0003066:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003069:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c000306c:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c000306f:	8d 57 fe             	lea    edx,[edi-0x2]
c0003072:	39 d0                	cmp    eax,edx
c0003074:	77 17                	ja     c000308d <create_chain+0x120>
c0003076:	48                   	dec    eax
c0003077:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000307a:	eb 11                	jmp    c000308d <create_chain+0x120>
c000307c:	89 d9                	mov    ecx,ebx
c000307e:	89 fa                	mov    edx,edi
c0003080:	89 f0                	mov    eax,esi
c0003082:	e8 a5 f2 ff ff       	call   c000232c <put_fat>
c0003087:	85 c0                	test   eax,eax
c0003089:	74 db                	je     c0003066 <create_chain+0xf9>
c000308b:	eb 06                	jmp    c0003093 <create_chain+0x126>
c000308d:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003091:	eb 0a                	jmp    c000309d <create_chain+0x130>
c0003093:	48                   	dec    eax
c0003094:	0f 85 00 ff ff ff    	jne    c0002f9a <create_chain+0x2d>
c000309a:	83 cb ff             	or     ebx,0xffffffff
c000309d:	83 c4 1c             	add    esp,0x1c
c00030a0:	89 d8                	mov    eax,ebx
c00030a2:	5b                   	pop    ebx
c00030a3:	5e                   	pop    esi
c00030a4:	5f                   	pop    edi
c00030a5:	5d                   	pop    ebp
c00030a6:	c3                   	ret    

c00030a7 <remove_chain>:
c00030a7:	55                   	push   ebp
c00030a8:	57                   	push   edi
c00030a9:	56                   	push   esi
c00030aa:	89 d6                	mov    esi,edx
c00030ac:	53                   	push   ebx
c00030ad:	83 ec 0c             	sub    esp,0xc
c00030b0:	83 fa 01             	cmp    edx,0x1
c00030b3:	8b 18                	mov    ebx,DWORD PTR [eax]
c00030b5:	76 65                	jbe    c000311c <remove_chain+0x75>
c00030b7:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c00030ba:	76 60                	jbe    c000311c <remove_chain+0x75>
c00030bc:	89 c5                	mov    ebp,eax
c00030be:	89 ca                	mov    edx,ecx
c00030c0:	85 c9                	test   ecx,ecx
c00030c2:	74 0e                	je     c00030d2 <remove_chain+0x2b>
c00030c4:	83 c9 ff             	or     ecx,0xffffffff
c00030c7:	89 d8                	mov    eax,ebx
c00030c9:	e8 5e f2 ff ff       	call   c000232c <put_fat>
c00030ce:	85 c0                	test   eax,eax
c00030d0:	75 56                	jne    c0003128 <remove_chain+0x81>
c00030d2:	89 f2                	mov    edx,esi
c00030d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00030d7:	e8 c7 fc ff ff       	call   c0002da3 <get_fat.isra.2>
c00030dc:	89 c7                	mov    edi,eax
c00030de:	85 c0                	test   eax,eax
c00030e0:	75 04                	jne    c00030e6 <remove_chain+0x3f>
c00030e2:	31 c0                	xor    eax,eax
c00030e4:	eb 42                	jmp    c0003128 <remove_chain+0x81>
c00030e6:	83 f8 01             	cmp    eax,0x1
c00030e9:	74 31                	je     c000311c <remove_chain+0x75>
c00030eb:	83 f8 ff             	cmp    eax,0xffffffff
c00030ee:	74 33                	je     c0003123 <remove_chain+0x7c>
c00030f0:	31 c9                	xor    ecx,ecx
c00030f2:	89 f2                	mov    edx,esi
c00030f4:	89 d8                	mov    eax,ebx
c00030f6:	e8 31 f2 ff ff       	call   c000232c <put_fat>
c00030fb:	85 c0                	test   eax,eax
c00030fd:	75 29                	jne    c0003128 <remove_chain+0x81>
c00030ff:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003102:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003105:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003108:	39 c8                	cmp    eax,ecx
c000310a:	73 08                	jae    c0003114 <remove_chain+0x6d>
c000310c:	40                   	inc    eax
c000310d:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003111:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003114:	89 fe                	mov    esi,edi
c0003116:	39 fa                	cmp    edx,edi
c0003118:	77 b8                	ja     c00030d2 <remove_chain+0x2b>
c000311a:	eb c6                	jmp    c00030e2 <remove_chain+0x3b>
c000311c:	b8 02 00 00 00       	mov    eax,0x2
c0003121:	eb 05                	jmp    c0003128 <remove_chain+0x81>
c0003123:	b8 01 00 00 00       	mov    eax,0x1
c0003128:	83 c4 0c             	add    esp,0xc
c000312b:	5b                   	pop    ebx
c000312c:	5e                   	pop    esi
c000312d:	5f                   	pop    edi
c000312e:	5d                   	pop    ebp
c000312f:	c3                   	ret    

c0003130 <dir_next>:
c0003130:	55                   	push   ebp
c0003131:	57                   	push   edi
c0003132:	56                   	push   esi
c0003133:	53                   	push   ebx
c0003134:	83 ec 1c             	sub    esp,0x1c
c0003137:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000313a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000313c:	83 c7 20             	add    edi,0x20
c000313f:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c0003145:	76 07                	jbe    c000314e <dir_next+0x1e>
c0003147:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000314e:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003151:	b9 04 00 00 00       	mov    ecx,0x4
c0003156:	85 f6                	test   esi,esi
c0003158:	0f 84 cd 00 00 00    	je     c000322b <dir_next+0xfb>
c000315e:	89 c3                	mov    ebx,eax
c0003160:	89 d1                	mov    ecx,edx
c0003162:	89 f8                	mov    eax,edi
c0003164:	25 ff 01 00 00       	and    eax,0x1ff
c0003169:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000316d:	0f 85 a8 00 00 00    	jne    c000321b <dir_next+0xeb>
c0003173:	46                   	inc    esi
c0003174:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003177:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c000317a:	85 d2                	test   edx,edx
c000317c:	75 22                	jne    c00031a0 <dir_next+0x70>
c000317e:	89 fa                	mov    edx,edi
c0003180:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003184:	c1 ea 05             	shr    edx,0x5
c0003187:	39 c2                	cmp    edx,eax
c0003189:	0f 82 8c 00 00 00    	jb     c000321b <dir_next+0xeb>
c000318f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003196:	b9 04 00 00 00       	mov    ecx,0x4
c000319b:	e9 8b 00 00 00       	jmp    c000322b <dir_next+0xfb>
c00031a0:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00031a4:	89 fe                	mov    esi,edi
c00031a6:	48                   	dec    eax
c00031a7:	c1 ee 09             	shr    esi,0x9
c00031aa:	85 f0                	test   eax,esi
c00031ac:	75 6d                	jne    c000321b <dir_next+0xeb>
c00031ae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00031b2:	89 e8                	mov    eax,ebp
c00031b4:	e8 ea fb ff ff       	call   c0002da3 <get_fat.isra.2>
c00031b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00031bd:	89 c6                	mov    esi,eax
c00031bf:	83 f8 01             	cmp    eax,0x1
c00031c2:	77 07                	ja     c00031cb <dir_next+0x9b>
c00031c4:	b9 02 00 00 00       	mov    ecx,0x2
c00031c9:	eb 60                	jmp    c000322b <dir_next+0xfb>
c00031cb:	83 f8 ff             	cmp    eax,0xffffffff
c00031ce:	75 07                	jne    c00031d7 <dir_next+0xa7>
c00031d0:	b9 01 00 00 00       	mov    ecx,0x1
c00031d5:	eb 54                	jmp    c000322b <dir_next+0xfb>
c00031d7:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00031da:	77 30                	ja     c000320c <dir_next+0xdc>
c00031dc:	85 c9                	test   ecx,ecx
c00031de:	74 af                	je     c000318f <dir_next+0x5f>
c00031e0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00031e3:	89 d8                	mov    eax,ebx
c00031e5:	e8 83 fd ff ff       	call   c0002f6d <create_chain>
c00031ea:	b9 07 00 00 00       	mov    ecx,0x7
c00031ef:	89 c6                	mov    esi,eax
c00031f1:	85 c0                	test   eax,eax
c00031f3:	74 36                	je     c000322b <dir_next+0xfb>
c00031f5:	83 f8 01             	cmp    eax,0x1
c00031f8:	74 ca                	je     c00031c4 <dir_next+0x94>
c00031fa:	83 f8 ff             	cmp    eax,0xffffffff
c00031fd:	74 d1                	je     c00031d0 <dir_next+0xa0>
c00031ff:	89 c2                	mov    edx,eax
c0003201:	89 e8                	mov    eax,ebp
c0003203:	e8 74 f2 ff ff       	call   c000247c <dir_clear>
c0003208:	85 c0                	test   eax,eax
c000320a:	75 c4                	jne    c00031d0 <dir_next+0xa0>
c000320c:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000320f:	89 f2                	mov    edx,esi
c0003211:	89 e8                	mov    eax,ebp
c0003213:	e8 ad e9 ff ff       	call   c0001bc5 <clst2sect>
c0003218:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000321b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000321f:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003222:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003226:	31 c9                	xor    ecx,ecx
c0003228:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000322b:	83 c4 1c             	add    esp,0x1c
c000322e:	89 c8                	mov    eax,ecx
c0003230:	5b                   	pop    ebx
c0003231:	5e                   	pop    esi
c0003232:	5f                   	pop    edi
c0003233:	5d                   	pop    ebp
c0003234:	c3                   	ret    

c0003235 <dir_alloc>:
c0003235:	55                   	push   ebp
c0003236:	89 c5                	mov    ebp,eax
c0003238:	57                   	push   edi
c0003239:	89 d7                	mov    edi,edx
c000323b:	56                   	push   esi
c000323c:	31 d2                	xor    edx,edx
c000323e:	53                   	push   ebx
c000323f:	83 ec 0c             	sub    esp,0xc
c0003242:	8b 30                	mov    esi,DWORD PTR [eax]
c0003244:	e8 5c fc ff ff       	call   c0002ea5 <dir_sdi>
c0003249:	85 c0                	test   eax,eax
c000324b:	75 37                	jne    c0003284 <dir_alloc+0x4f>
c000324d:	31 db                	xor    ebx,ebx
c000324f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003252:	89 f0                	mov    eax,esi
c0003254:	e8 7e ec ff ff       	call   c0001ed7 <move_window>
c0003259:	85 c0                	test   eax,eax
c000325b:	75 27                	jne    c0003284 <dir_alloc+0x4f>
c000325d:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003260:	8a 12                	mov    dl,BYTE PTR [edx]
c0003262:	84 d2                	test   dl,dl
c0003264:	74 05                	je     c000326b <dir_alloc+0x36>
c0003266:	80 fa e5             	cmp    dl,0xe5
c0003269:	75 07                	jne    c0003272 <dir_alloc+0x3d>
c000326b:	43                   	inc    ebx
c000326c:	39 fb                	cmp    ebx,edi
c000326e:	75 04                	jne    c0003274 <dir_alloc+0x3f>
c0003270:	eb 1c                	jmp    c000328e <dir_alloc+0x59>
c0003272:	31 db                	xor    ebx,ebx
c0003274:	ba 01 00 00 00       	mov    edx,0x1
c0003279:	89 e8                	mov    eax,ebp
c000327b:	e8 b0 fe ff ff       	call   c0003130 <dir_next>
c0003280:	85 c0                	test   eax,eax
c0003282:	74 cb                	je     c000324f <dir_alloc+0x1a>
c0003284:	83 f8 04             	cmp    eax,0x4
c0003287:	75 05                	jne    c000328e <dir_alloc+0x59>
c0003289:	b8 07 00 00 00       	mov    eax,0x7
c000328e:	83 c4 0c             	add    esp,0xc
c0003291:	5b                   	pop    ebx
c0003292:	5e                   	pop    esi
c0003293:	5f                   	pop    edi
c0003294:	5d                   	pop    ebp
c0003295:	c3                   	ret    

c0003296 <dir_read>:
c0003296:	55                   	push   ebp
c0003297:	57                   	push   edi
c0003298:	bf ff ff ff ff       	mov    edi,0xffffffff
c000329d:	56                   	push   esi
c000329e:	be 04 00 00 00       	mov    esi,0x4
c00032a3:	53                   	push   ebx
c00032a4:	89 c3                	mov    ebx,eax
c00032a6:	83 ec 1c             	sub    esp,0x1c
c00032a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032ad:	8b 28                	mov    ebp,DWORD PTR [eax]
c00032af:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00032b4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00032b7:	85 d2                	test   edx,edx
c00032b9:	0f 84 d8 00 00 00    	je     c0003397 <dir_read+0x101>
c00032bf:	89 e8                	mov    eax,ebp
c00032c1:	e8 11 ec ff ff       	call   c0001ed7 <move_window>
c00032c6:	89 c6                	mov    esi,eax
c00032c8:	85 c0                	test   eax,eax
c00032ca:	0f 85 d2 00 00 00    	jne    c00033a2 <dir_read+0x10c>
c00032d0:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00032d3:	8a 0a                	mov    cl,BYTE PTR [edx]
c00032d5:	84 c9                	test   cl,cl
c00032d7:	0f 84 c0 00 00 00    	je     c000339d <dir_read+0x107>
c00032dd:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c00032e0:	83 e0 3f             	and    eax,0x3f
c00032e3:	80 f9 2e             	cmp    cl,0x2e
c00032e6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00032ea:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00032ed:	0f 84 8a 00 00 00    	je     c000337d <dir_read+0xe7>
c00032f3:	80 f9 e5             	cmp    cl,0xe5
c00032f6:	0f 84 81 00 00 00    	je     c000337d <dir_read+0xe7>
c00032fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003300:	83 e0 1f             	and    eax,0x1f
c0003303:	83 f8 08             	cmp    eax,0x8
c0003306:	0f 94 c0             	sete   al
c0003309:	0f b6 c0             	movzx  eax,al
c000330c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003310:	75 6b                	jne    c000337d <dir_read+0xe7>
c0003312:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003317:	75 44                	jne    c000335d <dir_read+0xc7>
c0003319:	f6 c1 40             	test   cl,0x40
c000331c:	74 12                	je     c0003330 <dir_read+0x9a>
c000331e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003321:	83 e1 bf             	and    ecx,0xffffffbf
c0003324:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003328:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000332b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000332e:	eb 06                	jmp    c0003336 <dir_read+0xa0>
c0003330:	89 f8                	mov    eax,edi
c0003332:	38 c8                	cmp    al,cl
c0003334:	75 47                	jne    c000337d <dir_read+0xe7>
c0003336:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000333a:	bf ff ff ff ff       	mov    edi,0xffffffff
c000333f:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003342:	75 3e                	jne    c0003382 <dir_read+0xec>
c0003344:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003348:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000334b:	e8 c4 e8 ff ff       	call   c0001c14 <pick_lfn>
c0003350:	85 c0                	test   eax,eax
c0003352:	74 2e                	je     c0003382 <dir_read+0xec>
c0003354:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003358:	8d 79 ff             	lea    edi,[ecx-0x1]
c000335b:	eb 25                	jmp    c0003382 <dir_read+0xec>
c000335d:	89 f8                	mov    eax,edi
c000335f:	84 c0                	test   al,al
c0003361:	75 11                	jne    c0003374 <dir_read+0xde>
c0003363:	89 d0                	mov    eax,edx
c0003365:	e8 64 ea ff ff       	call   c0001dce <sum_sfn>
c000336a:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c000336e:	75 04                	jne    c0003374 <dir_read+0xde>
c0003370:	31 f6                	xor    esi,esi
c0003372:	eb 35                	jmp    c00033a9 <dir_read+0x113>
c0003374:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000337b:	eb 2c                	jmp    c00033a9 <dir_read+0x113>
c000337d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003382:	31 d2                	xor    edx,edx
c0003384:	89 d8                	mov    eax,ebx
c0003386:	e8 a5 fd ff ff       	call   c0003130 <dir_next>
c000338b:	89 c6                	mov    esi,eax
c000338d:	85 c0                	test   eax,eax
c000338f:	0f 84 1f ff ff ff    	je     c00032b4 <dir_read+0x1e>
c0003395:	eb 0b                	jmp    c00033a2 <dir_read+0x10c>
c0003397:	85 f6                	test   esi,esi
c0003399:	74 d5                	je     c0003370 <dir_read+0xda>
c000339b:	eb 05                	jmp    c00033a2 <dir_read+0x10c>
c000339d:	be 04 00 00 00       	mov    esi,0x4
c00033a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00033a9:	83 c4 1c             	add    esp,0x1c
c00033ac:	89 f0                	mov    eax,esi
c00033ae:	5b                   	pop    ebx
c00033af:	5e                   	pop    esi
c00033b0:	5f                   	pop    edi
c00033b1:	5d                   	pop    ebp
c00033b2:	c3                   	ret    

c00033b3 <dir_remove>:
c00033b3:	57                   	push   edi
c00033b4:	56                   	push   esi
c00033b5:	53                   	push   ebx
c00033b6:	89 c3                	mov    ebx,eax
c00033b8:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00033bb:	8b 30                	mov    esi,DWORD PTR [eax]
c00033bd:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00033c0:	83 fa ff             	cmp    edx,0xffffffff
c00033c3:	74 09                	je     c00033ce <dir_remove+0x1b>
c00033c5:	e8 db fa ff ff       	call   c0002ea5 <dir_sdi>
c00033ca:	85 c0                	test   eax,eax
c00033cc:	75 34                	jne    c0003402 <dir_remove+0x4f>
c00033ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00033d1:	89 f0                	mov    eax,esi
c00033d3:	e8 ff ea ff ff       	call   c0001ed7 <move_window>
c00033d8:	85 c0                	test   eax,eax
c00033da:	75 1c                	jne    c00033f8 <dir_remove+0x45>
c00033dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00033df:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00033e2:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00033e6:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00033e9:	73 17                	jae    c0003402 <dir_remove+0x4f>
c00033eb:	31 d2                	xor    edx,edx
c00033ed:	89 d8                	mov    eax,ebx
c00033ef:	e8 3c fd ff ff       	call   c0003130 <dir_next>
c00033f4:	85 c0                	test   eax,eax
c00033f6:	74 d6                	je     c00033ce <dir_remove+0x1b>
c00033f8:	83 f8 04             	cmp    eax,0x4
c00033fb:	75 05                	jne    c0003402 <dir_remove+0x4f>
c00033fd:	b8 02 00 00 00       	mov    eax,0x2
c0003402:	5b                   	pop    ebx
c0003403:	5e                   	pop    esi
c0003404:	5f                   	pop    edi
c0003405:	c3                   	ret    

c0003406 <dir_find>:
c0003406:	55                   	push   ebp
c0003407:	31 d2                	xor    edx,edx
c0003409:	57                   	push   edi
c000340a:	56                   	push   esi
c000340b:	53                   	push   ebx
c000340c:	89 c3                	mov    ebx,eax
c000340e:	83 ec 1c             	sub    esp,0x1c
c0003411:	8b 00                	mov    eax,DWORD PTR [eax]
c0003413:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003417:	89 d8                	mov    eax,ebx
c0003419:	e8 87 fa ff ff       	call   c0002ea5 <dir_sdi>
c000341e:	89 c6                	mov    esi,eax
c0003420:	85 c0                	test   eax,eax
c0003422:	0f 85 02 01 00 00    	jne    c000352a <dir_find+0x124>
c0003428:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000342f:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c0003434:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003439:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000343c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003440:	e8 92 ea ff ff       	call   c0001ed7 <move_window>
c0003445:	89 c6                	mov    esi,eax
c0003447:	85 c0                	test   eax,eax
c0003449:	0f 85 db 00 00 00    	jne    c000352a <dir_find+0x124>
c000344f:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003452:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003455:	84 c9                	test   cl,cl
c0003457:	0f 84 c8 00 00 00    	je     c0003525 <dir_find+0x11f>
c000345d:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003460:	88 d0                	mov    al,dl
c0003462:	83 e0 3f             	and    eax,0x3f
c0003465:	80 f9 e5             	cmp    cl,0xe5
c0003468:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000346b:	0f 84 93 00 00 00    	je     c0003504 <dir_find+0xfe>
c0003471:	80 e2 08             	and    dl,0x8
c0003474:	74 0a                	je     c0003480 <dir_find+0x7a>
c0003476:	3c 0f                	cmp    al,0xf
c0003478:	0f 85 86 00 00 00    	jne    c0003504 <dir_find+0xfe>
c000347e:	eb 04                	jmp    c0003484 <dir_find+0x7e>
c0003480:	3c 0f                	cmp    al,0xf
c0003482:	75 54                	jne    c00034d8 <dir_find+0xd2>
c0003484:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003488:	0f 85 82 00 00 00    	jne    c0003510 <dir_find+0x10a>
c000348e:	f6 c1 40             	test   cl,0x40
c0003491:	74 12                	je     c00034a5 <dir_find+0x9f>
c0003493:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003496:	83 e1 bf             	and    ecx,0xffffffbf
c0003499:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000349d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034a0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00034a3:	eb 06                	jmp    c00034ab <dir_find+0xa5>
c00034a5:	89 f8                	mov    eax,edi
c00034a7:	38 c8                	cmp    al,cl
c00034a9:	75 60                	jne    c000350b <dir_find+0x105>
c00034ab:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c00034af:	bf ff ff ff ff       	mov    edi,0xffffffff
c00034b4:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c00034b7:	75 57                	jne    c0003510 <dir_find+0x10a>
c00034b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00034bd:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00034c1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00034c4:	89 ea                	mov    edx,ebp
c00034c6:	e8 88 f3 ff ff       	call   c0002853 <cmp_lfn>
c00034cb:	85 c0                	test   eax,eax
c00034cd:	74 41                	je     c0003510 <dir_find+0x10a>
c00034cf:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00034d3:	8d 79 ff             	lea    edi,[ecx-0x1]
c00034d6:	eb 38                	jmp    c0003510 <dir_find+0x10a>
c00034d8:	89 f8                	mov    eax,edi
c00034da:	84 c0                	test   al,al
c00034dc:	75 0d                	jne    c00034eb <dir_find+0xe5>
c00034de:	89 e8                	mov    eax,ebp
c00034e0:	e8 e9 e8 ff ff       	call   c0001dce <sum_sfn>
c00034e5:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c00034e9:	74 3f                	je     c000352a <dir_find+0x124>
c00034eb:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00034ef:	75 13                	jne    c0003504 <dir_find+0xfe>
c00034f1:	8d 53 20             	lea    edx,[ebx+0x20]
c00034f4:	b9 0b 00 00 00       	mov    ecx,0xb
c00034f9:	89 e8                	mov    eax,ebp
c00034fb:	e8 cb e4 ff ff       	call   c00019cb <mem_cmp>
c0003500:	85 c0                	test   eax,eax
c0003502:	74 26                	je     c000352a <dir_find+0x124>
c0003504:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000350b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003510:	31 d2                	xor    edx,edx
c0003512:	89 d8                	mov    eax,ebx
c0003514:	e8 17 fc ff ff       	call   c0003130 <dir_next>
c0003519:	89 c6                	mov    esi,eax
c000351b:	85 c0                	test   eax,eax
c000351d:	0f 84 16 ff ff ff    	je     c0003439 <dir_find+0x33>
c0003523:	eb 05                	jmp    c000352a <dir_find+0x124>
c0003525:	be 04 00 00 00       	mov    esi,0x4
c000352a:	83 c4 1c             	add    esp,0x1c
c000352d:	89 f0                	mov    eax,esi
c000352f:	5b                   	pop    ebx
c0003530:	5e                   	pop    esi
c0003531:	5f                   	pop    edi
c0003532:	5d                   	pop    ebp
c0003533:	c3                   	ret    

c0003534 <follow_path>:
c0003534:	56                   	push   esi
c0003535:	53                   	push   ebx
c0003536:	89 c3                	mov    ebx,eax
c0003538:	83 ec 14             	sub    esp,0x14
c000353b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000353f:	8b 30                	mov    esi,DWORD PTR [eax]
c0003541:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003545:	8a 10                	mov    dl,BYTE PTR [eax]
c0003547:	80 fa 5c             	cmp    dl,0x5c
c000354a:	75 07                	jne    c0003553 <follow_path+0x1f>
c000354c:	40                   	inc    eax
c000354d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003551:	eb ee                	jmp    c0003541 <follow_path+0xd>
c0003553:	80 fa 2f             	cmp    dl,0x2f
c0003556:	74 f4                	je     c000354c <follow_path+0x18>
c0003558:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000355f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003562:	77 3e                	ja     c00035a2 <follow_path+0x6e>
c0003564:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003568:	31 d2                	xor    edx,edx
c000356a:	89 d8                	mov    eax,ebx
c000356c:	e8 34 f9 ff ff       	call   c0002ea5 <dir_sdi>
c0003571:	eb 4f                	jmp    c00035c2 <follow_path+0x8e>
c0003573:	89 d8                	mov    eax,ebx
c0003575:	e8 8c fe ff ff       	call   c0003406 <dir_find>
c000357a:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c000357d:	85 c0                	test   eax,eax
c000357f:	75 32                	jne    c00035b3 <follow_path+0x7f>
c0003581:	80 e2 04             	and    dl,0x4
c0003584:	75 3c                	jne    c00035c2 <follow_path+0x8e>
c0003586:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000358a:	74 31                	je     c00035bd <follow_path+0x89>
c000358c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000358f:	25 ff 01 00 00       	and    eax,0x1ff
c0003594:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003598:	8a 06                	mov    al,BYTE PTR [esi]
c000359a:	e8 b3 f7 ff ff       	call   c0002d52 <ld_clust.isra.0>
c000359f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00035a2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00035a6:	89 d8                	mov    eax,ebx
c00035a8:	e8 ca ef ff ff       	call   c0002577 <create_name>
c00035ad:	85 c0                	test   eax,eax
c00035af:	74 c2                	je     c0003573 <follow_path+0x3f>
c00035b1:	eb 0f                	jmp    c00035c2 <follow_path+0x8e>
c00035b3:	83 f8 04             	cmp    eax,0x4
c00035b6:	75 0a                	jne    c00035c2 <follow_path+0x8e>
c00035b8:	80 e2 04             	and    dl,0x4
c00035bb:	75 05                	jne    c00035c2 <follow_path+0x8e>
c00035bd:	b8 05 00 00 00       	mov    eax,0x5
c00035c2:	83 c4 14             	add    esp,0x14
c00035c5:	5b                   	pop    ebx
c00035c6:	5e                   	pop    esi
c00035c7:	c3                   	ret    

c00035c8 <dir_register>:
c00035c8:	55                   	push   ebp
c00035c9:	57                   	push   edi
c00035ca:	56                   	push   esi
c00035cb:	be 06 00 00 00       	mov    esi,0x6
c00035d0:	53                   	push   ebx
c00035d1:	83 ec 2c             	sub    esp,0x2c
c00035d4:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c00035d8:	0f 85 66 01 00 00    	jne    c0003744 <dir_register+0x17c>
c00035de:	8b 38                	mov    edi,DWORD PTR [eax]
c00035e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00035e8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c00035eb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035ef:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c00035f4:	74 06                	je     c00035fc <dir_register+0x34>
c00035f6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00035fa:	eb ef                	jmp    c00035eb <dir_register+0x23>
c00035fc:	89 c3                	mov    ebx,eax
c00035fe:	b9 0c 00 00 00       	mov    ecx,0xc
c0003603:	8d 40 20             	lea    eax,[eax+0x20]
c0003606:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000360a:	89 c2                	mov    edx,eax
c000360c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003610:	e8 96 e3 ff ff       	call   c00019ab <mem_cpy>
c0003615:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c000361a:	74 48                	je     c0003664 <dir_register+0x9c>
c000361c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003620:	bd 01 00 00 00       	mov    ebp,0x1
c0003625:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003628:	55                   	push   ebp
c0003629:	8d 54 24 18          	lea    edx,[esp+0x18]
c000362d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003631:	e8 dc e6 ff ff       	call   c0001d12 <gen_numname>
c0003636:	58                   	pop    eax
c0003637:	89 d8                	mov    eax,ebx
c0003639:	e8 c8 fd ff ff       	call   c0003406 <dir_find>
c000363e:	89 c6                	mov    esi,eax
c0003640:	85 c0                	test   eax,eax
c0003642:	75 10                	jne    c0003654 <dir_register+0x8c>
c0003644:	45                   	inc    ebp
c0003645:	83 fd 64             	cmp    ebp,0x64
c0003648:	75 db                	jne    c0003625 <dir_register+0x5d>
c000364a:	be 07 00 00 00       	mov    esi,0x7
c000364f:	e9 f0 00 00 00       	jmp    c0003744 <dir_register+0x17c>
c0003654:	83 f8 04             	cmp    eax,0x4
c0003657:	0f 85 e7 00 00 00    	jne    c0003744 <dir_register+0x17c>
c000365d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003661:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003664:	bd 01 00 00 00       	mov    ebp,0x1
c0003669:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000366e:	74 13                	je     c0003683 <dir_register+0xbb>
c0003670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003674:	b9 0d 00 00 00       	mov    ecx,0xd
c0003679:	83 c0 0c             	add    eax,0xc
c000367c:	31 d2                	xor    edx,edx
c000367e:	f7 f1                	div    ecx
c0003680:	8d 68 01             	lea    ebp,[eax+0x1]
c0003683:	89 ea                	mov    edx,ebp
c0003685:	89 d8                	mov    eax,ebx
c0003687:	e8 a9 fb ff ff       	call   c0003235 <dir_alloc>
c000368c:	89 c6                	mov    esi,eax
c000368e:	85 c0                	test   eax,eax
c0003690:	0f 85 ae 00 00 00    	jne    c0003744 <dir_register+0x17c>
c0003696:	4d                   	dec    ebp
c0003697:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000369b:	74 67                	je     c0003704 <dir_register+0x13c>
c000369d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00036a0:	89 e8                	mov    eax,ebp
c00036a2:	c1 e0 05             	shl    eax,0x5
c00036a5:	29 c2                	sub    edx,eax
c00036a7:	89 d8                	mov    eax,ebx
c00036a9:	e8 f7 f7 ff ff       	call   c0002ea5 <dir_sdi>
c00036ae:	89 c6                	mov    esi,eax
c00036b0:	85 c0                	test   eax,eax
c00036b2:	0f 85 8c 00 00 00    	jne    c0003744 <dir_register+0x17c>
c00036b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036bc:	e8 0d e7 ff ff       	call   c0001dce <sum_sfn>
c00036c1:	0f b6 e8             	movzx  ebp,al
c00036c4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00036c7:	89 f8                	mov    eax,edi
c00036c9:	e8 09 e8 ff ff       	call   c0001ed7 <move_window>
c00036ce:	89 c6                	mov    esi,eax
c00036d0:	85 c0                	test   eax,eax
c00036d2:	75 70                	jne    c0003744 <dir_register+0x17c>
c00036d4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00036d9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00036dc:	83 ec 0c             	sub    esp,0xc
c00036df:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00036e2:	55                   	push   ebp
c00036e3:	e8 a6 e5 ff ff       	call   c0001c8e <put_lfn>
c00036e8:	31 d2                	xor    edx,edx
c00036ea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c00036ee:	89 d8                	mov    eax,ebx
c00036f0:	e8 3b fa ff ff       	call   c0003130 <dir_next>
c00036f5:	83 c4 10             	add    esp,0x10
c00036f8:	89 c6                	mov    esi,eax
c00036fa:	85 c0                	test   eax,eax
c00036fc:	75 46                	jne    c0003744 <dir_register+0x17c>
c00036fe:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003702:	75 c0                	jne    c00036c4 <dir_register+0xfc>
c0003704:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003707:	89 f8                	mov    eax,edi
c0003709:	e8 c9 e7 ff ff       	call   c0001ed7 <move_window>
c000370e:	89 c6                	mov    esi,eax
c0003710:	85 c0                	test   eax,eax
c0003712:	75 30                	jne    c0003744 <dir_register+0x17c>
c0003714:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003717:	b9 20 00 00 00       	mov    ecx,0x20
c000371c:	31 d2                	xor    edx,edx
c000371e:	e8 9d e2 ff ff       	call   c00019c0 <mem_set>
c0003723:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003726:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000372a:	b9 0b 00 00 00       	mov    ecx,0xb
c000372f:	e8 77 e2 ff ff       	call   c00019ab <mem_cpy>
c0003734:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003737:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000373a:	83 e0 18             	and    eax,0x18
c000373d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003740:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003744:	83 c4 2c             	add    esp,0x2c
c0003747:	89 f0                	mov    eax,esi
c0003749:	5b                   	pop    ebx
c000374a:	5e                   	pop    esi
c000374b:	5f                   	pop    edi
c000374c:	5d                   	pop    ebp
c000374d:	c3                   	ret    

c000374e <f_mount>:
c000374e:	53                   	push   ebx
c000374f:	83 ec 18             	sub    esp,0x18
c0003752:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003756:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000375a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000375e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003762:	e8 79 e6 ff ff       	call   c0001de0 <get_ldnumber>
c0003767:	89 c2                	mov    edx,eax
c0003769:	b8 0b 00 00 00       	mov    eax,0xb
c000376e:	85 d2                	test   edx,edx
c0003770:	78 39                	js     c00037ab <f_mount+0x5d>
c0003772:	8b 04 95 40 07 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf8c0]
c0003779:	85 c0                	test   eax,eax
c000377b:	74 03                	je     c0003780 <f_mount+0x32>
c000377d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003780:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003784:	85 c0                	test   eax,eax
c0003786:	74 03                	je     c000378b <f_mount+0x3d>
c0003788:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000378b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000378f:	89 04 95 40 07 02 c0 	mov    DWORD PTR [edx*4-0x3ffdf8c0],eax
c0003796:	31 c0                	xor    eax,eax
c0003798:	84 db                	test   bl,bl
c000379a:	74 0f                	je     c00037ab <f_mount+0x5d>
c000379c:	31 c9                	xor    ecx,ecx
c000379e:	8d 54 24 20          	lea    edx,[esp+0x20]
c00037a2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00037a6:	e8 7f e8 ff ff       	call   c000202a <mount_volume>
c00037ab:	83 c4 18             	add    esp,0x18
c00037ae:	5b                   	pop    ebx
c00037af:	c3                   	ret    

c00037b0 <f_open>:
c00037b0:	55                   	push   ebp
c00037b1:	b8 09 00 00 00       	mov    eax,0x9
c00037b6:	57                   	push   edi
c00037b7:	56                   	push   esi
c00037b8:	53                   	push   ebx
c00037b9:	83 ec 5c             	sub    esp,0x5c
c00037bc:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00037c0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00037c4:	85 db                	test   ebx,ebx
c00037c6:	0f 84 ae 02 00 00    	je     c0003a7a <f_open+0x2ca>
c00037cc:	89 fe                	mov    esi,edi
c00037ce:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00037d2:	83 e6 3f             	and    esi,0x3f
c00037d5:	89 f0                	mov    eax,esi
c00037d7:	0f b6 c8             	movzx  ecx,al
c00037da:	8d 44 24 74          	lea    eax,[esp+0x74]
c00037de:	e8 47 e8 ff ff       	call   c000202a <mount_volume>
c00037e3:	85 c0                	test   eax,eax
c00037e5:	0f 85 89 02 00 00    	jne    c0003a74 <f_open+0x2c4>
c00037eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00037ef:	83 ec 0c             	sub    esp,0xc
c00037f2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00037f6:	68 00 02 00 00       	push   0x200
c00037fb:	e8 f4 21 00 00       	call   c00059f4 <ff_memalloc>
c0003800:	83 c4 10             	add    esp,0x10
c0003803:	89 c5                	mov    ebp,eax
c0003805:	b8 11 00 00 00       	mov    eax,0x11
c000380a:	85 ed                	test   ebp,ebp
c000380c:	0f 84 68 02 00 00    	je     c0003a7a <f_open+0x2ca>
c0003812:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003816:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000381a:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c000381d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003821:	e8 0e fd ff ff       	call   c0003534 <follow_path>
c0003826:	85 c0                	test   eax,eax
c0003828:	75 0c                	jne    c0003836 <f_open+0x86>
c000382a:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000382f:	79 05                	jns    c0003836 <f_open+0x86>
c0003831:	b8 06 00 00 00       	mov    eax,0x6
c0003836:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000383c:	0f 84 de 00 00 00    	je     c0003920 <f_open+0x170>
c0003842:	85 c0                	test   eax,eax
c0003844:	74 1e                	je     c0003864 <f_open+0xb4>
c0003846:	83 f8 04             	cmp    eax,0x4
c0003849:	0f 85 0d 02 00 00    	jne    c0003a5c <f_open+0x2ac>
c000384f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003853:	83 ce 08             	or     esi,0x8
c0003856:	e8 6d fd ff ff       	call   c00035c8 <dir_register>
c000385b:	85 c0                	test   eax,eax
c000385d:	74 2f                	je     c000388e <f_open+0xde>
c000385f:	e9 f8 01 00 00       	jmp    c0003a5c <f_open+0x2ac>
c0003864:	b8 07 00 00 00       	mov    eax,0x7
c0003869:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c000386e:	0f 85 e8 01 00 00    	jne    c0003a5c <f_open+0x2ac>
c0003874:	b8 08 00 00 00       	mov    eax,0x8
c0003879:	f7 c7 04 00 00 00    	test   edi,0x4
c000387f:	0f 85 d7 01 00 00    	jne    c0003a5c <f_open+0x2ac>
c0003885:	83 e7 08             	and    edi,0x8
c0003888:	0f 84 bf 00 00 00    	je     c000394d <f_open+0x19d>
c000388e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003892:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003896:	89 ca                	mov    edx,ecx
c0003898:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000389c:	8a 00                	mov    al,BYTE PTR [eax]
c000389e:	e8 af f4 ff ff       	call   c0002d52 <ld_clust.isra.0>
c00038a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00038a7:	89 c7                	mov    edi,eax
c00038a9:	ba 00 00 21 50       	mov    edx,0x50210000
c00038ae:	8d 41 0e             	lea    eax,[ecx+0xe]
c00038b1:	e8 f2 e0 ff ff       	call   c00019a8 <st_dword>
c00038b6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00038ba:	31 c9                	xor    ecx,ecx
c00038bc:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c00038c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00038c4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00038c8:	e8 ae f4 ff ff       	call   c0002d7b <st_clust.isra.1>
c00038cd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00038d1:	31 d2                	xor    edx,edx
c00038d3:	83 c0 1c             	add    eax,0x1c
c00038d6:	e8 cd e0 ff ff       	call   c00019a8 <st_dword>
c00038db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00038df:	85 ff                	test   edi,edi
c00038e1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00038e5:	74 66                	je     c000394d <f_open+0x19d>
c00038e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00038eb:	31 c9                	xor    ecx,ecx
c00038ed:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00038f0:	89 fa                	mov    edx,edi
c00038f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038f6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00038fa:	e8 a8 f7 ff ff       	call   c00030a7 <remove_chain>
c00038ff:	85 c0                	test   eax,eax
c0003901:	0f 85 55 01 00 00    	jne    c0003a5c <f_open+0x2ac>
c0003907:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000390b:	4f                   	dec    edi
c000390c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003910:	e8 c2 e5 ff ff       	call   c0001ed7 <move_window>
c0003915:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003919:	85 c0                	test   eax,eax
c000391b:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c000391e:	eb 27                	jmp    c0003947 <f_open+0x197>
c0003920:	85 c0                	test   eax,eax
c0003922:	0f 85 34 01 00 00    	jne    c0003a5c <f_open+0x2ac>
c0003928:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c000392c:	b8 04 00 00 00       	mov    eax,0x4
c0003931:	f6 c2 10             	test   dl,0x10
c0003934:	0f 85 22 01 00 00    	jne    c0003a5c <f_open+0x2ac>
c000393a:	83 e7 02             	and    edi,0x2
c000393d:	74 0e                	je     c000394d <f_open+0x19d>
c000393f:	b8 07 00 00 00       	mov    eax,0x7
c0003944:	80 e2 01             	and    dl,0x1
c0003947:	0f 85 0f 01 00 00    	jne    c0003a5c <f_open+0x2ac>
c000394d:	f7 c6 08 00 00 00    	test   esi,0x8
c0003953:	74 03                	je     c0003958 <f_open+0x1a8>
c0003955:	83 ce 40             	or     esi,0x40
c0003958:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000395c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003960:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003963:	89 fa                	mov    edx,edi
c0003965:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003969:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000396c:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000396f:	8a 01                	mov    al,BYTE PTR [ecx]
c0003971:	e8 dc f3 ff ff       	call   c0002d52 <ld_clust.isra.0>
c0003976:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003979:	8d 47 1c             	lea    eax,[edi+0x1c]
c000397c:	e8 0b e0 ff ff       	call   c000198c <ld_dword>
c0003981:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003985:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003988:	89 0b                	mov    DWORD PTR [ebx],ecx
c000398a:	c7 43 28 00 00 00 00 	mov    DWORD PTR [ebx+0x28],0x0
c0003991:	31 d2                	xor    edx,edx
c0003993:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003997:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000399b:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000399f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00039a6:	89 f0                	mov    eax,esi
c00039a8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00039af:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00039b2:	b9 00 02 00 00       	mov    ecx,0x200
c00039b7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00039ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039be:	e8 fd df ff ff       	call   c00019c0 <mem_set>
c00039c3:	83 e6 20             	and    esi,0x20
c00039c6:	75 07                	jne    c00039cf <f_open+0x21f>
c00039c8:	31 c0                	xor    eax,eax
c00039ca:	e9 8d 00 00 00       	jmp    c0003a5c <f_open+0x2ac>
c00039cf:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00039d2:	85 ff                	test   edi,edi
c00039d4:	74 f2                	je     c00039c8 <f_open+0x218>
c00039d6:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c00039d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00039dd:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00039e0:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c00039e4:	c1 e6 09             	shl    esi,0x9
c00039e7:	39 fe                	cmp    esi,edi
c00039e9:	73 1c                	jae    c0003a07 <f_open+0x257>
c00039eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00039ed:	29 f7                	sub    edi,esi
c00039ef:	e8 af f3 ff ff       	call   c0002da3 <get_fat.isra.2>
c00039f4:	89 c2                	mov    edx,eax
c00039f6:	83 f8 01             	cmp    eax,0x1
c00039f9:	76 10                	jbe    c0003a0b <f_open+0x25b>
c00039fb:	83 f8 ff             	cmp    eax,0xffffffff
c00039fe:	75 e7                	jne    c00039e7 <f_open+0x237>
c0003a00:	b8 01 00 00 00       	mov    eax,0x1
c0003a05:	eb 09                	jmp    c0003a10 <f_open+0x260>
c0003a07:	31 c0                	xor    eax,eax
c0003a09:	eb 05                	jmp    c0003a10 <f_open+0x260>
c0003a0b:	b8 02 00 00 00       	mov    eax,0x2
c0003a10:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003a13:	85 c0                	test   eax,eax
c0003a15:	75 45                	jne    c0003a5c <f_open+0x2ac>
c0003a17:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003a1d:	74 a9                	je     c00039c8 <f_open+0x218>
c0003a1f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003a23:	89 f0                	mov    eax,esi
c0003a25:	e8 9b e1 ff ff       	call   c0001bc5 <clst2sect>
c0003a2a:	89 c2                	mov    edx,eax
c0003a2c:	b8 02 00 00 00       	mov    eax,0x2
c0003a31:	85 d2                	test   edx,edx
c0003a33:	74 27                	je     c0003a5c <f_open+0x2ac>
c0003a35:	89 f9                	mov    ecx,edi
c0003a37:	c1 e9 09             	shr    ecx,0x9
c0003a3a:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003a3d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003a40:	6a 01                	push   0x1
c0003a42:	50                   	push   eax
c0003a43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003a47:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003a4b:	50                   	push   eax
c0003a4c:	e8 e3 de ff ff       	call   c0001934 <disk_read>
c0003a51:	83 c4 10             	add    esp,0x10
c0003a54:	85 c0                	test   eax,eax
c0003a56:	0f 95 c0             	setne  al
c0003a59:	0f b6 c0             	movzx  eax,al
c0003a5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a60:	83 ec 0c             	sub    esp,0xc
c0003a63:	55                   	push   ebp
c0003a64:	e8 a3 1f 00 00       	call   c0005a0c <ff_memfree>
c0003a69:	83 c4 10             	add    esp,0x10
c0003a6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a70:	85 c0                	test   eax,eax
c0003a72:	74 06                	je     c0003a7a <f_open+0x2ca>
c0003a74:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003a7a:	83 c4 5c             	add    esp,0x5c
c0003a7d:	5b                   	pop    ebx
c0003a7e:	5e                   	pop    esi
c0003a7f:	5f                   	pop    edi
c0003a80:	5d                   	pop    ebp
c0003a81:	c3                   	ret    

c0003a82 <f_read>:
c0003a82:	55                   	push   ebp
c0003a83:	57                   	push   edi
c0003a84:	56                   	push   esi
c0003a85:	53                   	push   ebx
c0003a86:	83 ec 2c             	sub    esp,0x2c
c0003a89:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003a8d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003a91:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003a97:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003a9b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003a9f:	89 d8                	mov    eax,ebx
c0003aa1:	e8 87 e3 ff ff       	call   c0001e2d <validate>
c0003aa6:	89 c5                	mov    ebp,eax
c0003aa8:	85 c0                	test   eax,eax
c0003aaa:	0f 85 d6 01 00 00    	jne    c0003c86 <f_read+0x204>
c0003ab0:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003ab4:	85 ed                	test   ebp,ebp
c0003ab6:	0f 85 ca 01 00 00    	jne    c0003c86 <f_read+0x204>
c0003abc:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003ac0:	0f 84 bb 01 00 00    	je     c0003c81 <f_read+0x1ff>
c0003ac6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003ac9:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003acc:	89 c7                	mov    edi,eax
c0003ace:	39 f0                	cmp    eax,esi
c0003ad0:	0f 86 ad 00 00 00    	jbe    c0003b83 <f_read+0x101>
c0003ad6:	89 f7                	mov    edi,esi
c0003ad8:	e9 a6 00 00 00       	jmp    c0003b83 <f_read+0x101>
c0003add:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003ae0:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003ae6:	0f 85 6a 01 00 00    	jne    c0003c56 <f_read+0x1d4>
c0003aec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003af0:	89 d1                	mov    ecx,edx
c0003af2:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003af6:	c1 e9 09             	shr    ecx,0x9
c0003af9:	48                   	dec    eax
c0003afa:	21 c8                	and    eax,ecx
c0003afc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003b00:	0f 84 8a 00 00 00    	je     c0003b90 <f_read+0x10e>
c0003b06:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003b0a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b0d:	89 c8                	mov    eax,ecx
c0003b0f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003b13:	e8 ad e0 ff ff       	call   c0001bc5 <clst2sect>
c0003b18:	85 c0                	test   eax,eax
c0003b1a:	0f 84 97 00 00 00    	je     c0003bb7 <f_read+0x135>
c0003b20:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003b24:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003b28:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003b2c:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003b32:	0f 86 cc 00 00 00    	jbe    c0003c04 <f_read+0x182>
c0003b38:	89 fe                	mov    esi,edi
c0003b3a:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003b3e:	c1 ee 09             	shr    esi,0x9
c0003b41:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003b45:	01 f2                	add    edx,esi
c0003b47:	39 c2                	cmp    edx,eax
c0003b49:	76 06                	jbe    c0003b51 <f_read+0xcf>
c0003b4b:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003b4f:	89 c6                	mov    esi,eax
c0003b51:	56                   	push   esi
c0003b52:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003b56:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003b5a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003b5e:	50                   	push   eax
c0003b5f:	e8 d0 dd ff ff       	call   c0001934 <disk_read>
c0003b64:	83 c4 10             	add    esp,0x10
c0003b67:	85 c0                	test   eax,eax
c0003b69:	75 5f                	jne    c0003bca <f_read+0x148>
c0003b6b:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003b6f:	78 6f                	js     c0003be0 <f_read+0x15e>
c0003b71:	c1 e6 09             	shl    esi,0x9
c0003b74:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003b78:	29 f7                	sub    edi,esi
c0003b7a:	01 30                	add    DWORD PTR [eax],esi
c0003b7c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003b80:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003b83:	85 ff                	test   edi,edi
c0003b85:	0f 85 52 ff ff ff    	jne    c0003add <f_read+0x5b>
c0003b8b:	e9 f6 00 00 00       	jmp    c0003c86 <f_read+0x204>
c0003b90:	85 d2                	test   edx,edx
c0003b92:	75 05                	jne    c0003b99 <f_read+0x117>
c0003b94:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003b97:	eb 19                	jmp    c0003bb2 <f_read+0x130>
c0003b99:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0003b9d:	74 09                	je     c0003ba8 <f_read+0x126>
c0003b9f:	89 d8                	mov    eax,ebx
c0003ba1:	e8 3c e0 ff ff       	call   c0001be2 <clmt_clust>
c0003ba6:	eb 0a                	jmp    c0003bb2 <f_read+0x130>
c0003ba8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bab:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003bad:	e8 f1 f1 ff ff       	call   c0002da3 <get_fat.isra.2>
c0003bb2:	83 f8 01             	cmp    eax,0x1
c0003bb5:	77 0e                	ja     c0003bc5 <f_read+0x143>
c0003bb7:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003bbb:	bd 02 00 00 00       	mov    ebp,0x2
c0003bc0:	e9 c1 00 00 00       	jmp    c0003c86 <f_read+0x204>
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0e                	jne    c0003bd8 <f_read+0x156>
c0003bca:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003bce:	bd 01 00 00 00       	mov    ebp,0x1
c0003bd3:	e9 ae 00 00 00       	jmp    c0003c86 <f_read+0x204>
c0003bd8:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003bdb:	e9 26 ff ff ff       	jmp    c0003b06 <f_read+0x84>
c0003be0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003be3:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003be7:	39 f0                	cmp    eax,esi
c0003be9:	73 86                	jae    c0003b71 <f_read+0xef>
c0003beb:	c1 e0 09             	shl    eax,0x9
c0003bee:	8d 53 2c             	lea    edx,[ebx+0x2c]
c0003bf1:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003bf5:	b9 00 02 00 00       	mov    ecx,0x200
c0003bfa:	e8 ac dd ff ff       	call   c00019ab <mem_cpy>
c0003bff:	e9 6d ff ff ff       	jmp    c0003b71 <f_read+0xef>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003c0b:	74 42                	je     c0003c4f <f_read+0x1cd>
c0003c0d:	8d 73 2c             	lea    esi,[ebx+0x2c]
c0003c10:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003c14:	79 19                	jns    c0003c2f <f_read+0x1ad>
c0003c16:	6a 01                	push   0x1
c0003c18:	50                   	push   eax
c0003c19:	56                   	push   esi
c0003c1a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003c1e:	50                   	push   eax
c0003c1f:	e8 26 dd ff ff       	call   c000194a <disk_write>
c0003c24:	83 c4 10             	add    esp,0x10
c0003c27:	85 c0                	test   eax,eax
c0003c29:	75 9f                	jne    c0003bca <f_read+0x148>
c0003c2b:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003c2f:	6a 01                	push   0x1
c0003c31:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003c35:	56                   	push   esi
c0003c36:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003c3a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003c3e:	50                   	push   eax
c0003c3f:	e8 f0 dc ff ff       	call   c0001934 <disk_read>
c0003c44:	83 c4 10             	add    esp,0x10
c0003c47:	85 c0                	test   eax,eax
c0003c49:	0f 85 7b ff ff ff    	jne    c0003bca <f_read+0x148>
c0003c4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003c53:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003c56:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003c59:	ba 00 02 00 00       	mov    edx,0x200
c0003c5e:	25 ff 01 00 00       	and    eax,0x1ff
c0003c63:	89 fe                	mov    esi,edi
c0003c65:	29 c2                	sub    edx,eax
c0003c67:	39 d7                	cmp    edi,edx
c0003c69:	76 02                	jbe    c0003c6d <f_read+0x1eb>
c0003c6b:	89 d6                	mov    esi,edx
c0003c6d:	8d 54 03 2c          	lea    edx,[ebx+eax*1+0x2c]
c0003c71:	89 f1                	mov    ecx,esi
c0003c73:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003c77:	e8 2f dd ff ff       	call   c00019ab <mem_cpy>
c0003c7c:	e9 f3 fe ff ff       	jmp    c0003b74 <f_read+0xf2>
c0003c81:	bd 07 00 00 00       	mov    ebp,0x7
c0003c86:	83 c4 2c             	add    esp,0x2c
c0003c89:	89 e8                	mov    eax,ebp
c0003c8b:	5b                   	pop    ebx
c0003c8c:	5e                   	pop    esi
c0003c8d:	5f                   	pop    edi
c0003c8e:	5d                   	pop    ebp
c0003c8f:	c3                   	ret    

c0003c90 <f_write>:
c0003c90:	55                   	push   ebp
c0003c91:	57                   	push   edi
c0003c92:	56                   	push   esi
c0003c93:	53                   	push   ebx
c0003c94:	83 ec 2c             	sub    esp,0x2c
c0003c97:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003c9b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003c9f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ca5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ca9:	89 d8                	mov    eax,ebx
c0003cab:	e8 7d e1 ff ff       	call   c0001e2d <validate>
c0003cb0:	89 c5                	mov    ebp,eax
c0003cb2:	85 c0                	test   eax,eax
c0003cb4:	0f 85 0f 02 00 00    	jne    c0003ec9 <f_write+0x239>
c0003cba:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003cbe:	85 ed                	test   ebp,ebp
c0003cc0:	0f 85 03 02 00 00    	jne    c0003ec9 <f_write+0x239>
c0003cc6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0003cca:	0f 84 f4 01 00 00    	je     c0003ec4 <f_write+0x234>
c0003cd0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003cd3:	89 c7                	mov    edi,eax
c0003cd5:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0003cd9:	0f 83 ea 00 00 00    	jae    c0003dc9 <f_write+0x139>
c0003cdf:	f7 d0                	not    eax
c0003ce1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0003ce5:	e9 df 00 00 00       	jmp    c0003dc9 <f_write+0x139>
c0003cea:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003ced:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003cf3:	0f 85 9a 01 00 00    	jne    c0003e93 <f_write+0x203>
c0003cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cfd:	89 d1                	mov    ecx,edx
c0003cff:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003d03:	c1 e9 09             	shr    ecx,0x9
c0003d06:	48                   	dec    eax
c0003d07:	21 c8                	and    eax,ecx
c0003d09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003d0d:	0f 84 c3 00 00 00    	je     c0003dd6 <f_write+0x146>
c0003d13:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003d17:	0f 88 27 01 00 00    	js     c0003e44 <f_write+0x1b4>
c0003d1d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d21:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d24:	89 c8                	mov    eax,ecx
c0003d26:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003d2a:	e8 96 de ff ff       	call   c0001bc5 <clst2sect>
c0003d2f:	85 c0                	test   eax,eax
c0003d31:	0f 84 d7 00 00 00    	je     c0003e0e <f_write+0x17e>
c0003d37:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0003d3b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003d3f:	01 c7                	add    edi,eax
c0003d41:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0003d49:	0f 86 1c 01 00 00    	jbe    c0003e6b <f_write+0x1db>
c0003d4f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003d53:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003d57:	c1 ee 09             	shr    esi,0x9
c0003d5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d5e:	01 f2                	add    edx,esi
c0003d60:	39 c2                	cmp    edx,eax
c0003d62:	76 06                	jbe    c0003d6a <f_write+0xda>
c0003d64:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003d68:	89 c6                	mov    esi,eax
c0003d6a:	56                   	push   esi
c0003d6b:	57                   	push   edi
c0003d6c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003d70:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003d74:	50                   	push   eax
c0003d75:	e8 d0 db ff ff       	call   c000194a <disk_write>
c0003d7a:	83 c4 10             	add    esp,0x10
c0003d7d:	85 c0                	test   eax,eax
c0003d7f:	0f 85 9c 00 00 00    	jne    c0003e21 <f_write+0x191>
c0003d85:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d88:	29 fa                	sub    edx,edi
c0003d8a:	39 f2                	cmp    edx,esi
c0003d8c:	73 18                	jae    c0003da6 <f_write+0x116>
c0003d8e:	c1 e2 09             	shl    edx,0x9
c0003d91:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0003d94:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0003d98:	b9 00 02 00 00       	mov    ecx,0x200
c0003d9d:	e8 09 dc ff ff       	call   c00019ab <mem_cpy>
c0003da2:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003da6:	c1 e6 09             	shl    esi,0x9
c0003da9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0003dad:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003db1:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003db5:	01 30                	add    DWORD PTR [eax],esi
c0003db7:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0003dba:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003dbd:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003dc0:	39 f0                	cmp    eax,esi
c0003dc2:	73 02                	jae    c0003dc6 <f_write+0x136>
c0003dc4:	89 f0                	mov    eax,esi
c0003dc6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003dc9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0003dce:	0f 85 16 ff ff ff    	jne    c0003cea <f_write+0x5a>
c0003dd4:	eb 2a                	jmp    c0003e00 <f_write+0x170>
c0003dd6:	85 d2                	test   edx,edx
c0003dd8:	75 09                	jne    c0003de3 <f_write+0x153>
c0003dda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003ddd:	85 c0                	test   eax,eax
c0003ddf:	75 28                	jne    c0003e09 <f_write+0x179>
c0003de1:	eb 12                	jmp    c0003df5 <f_write+0x165>
c0003de3:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0003de7:	74 09                	je     c0003df2 <f_write+0x162>
c0003de9:	89 d8                	mov    eax,ebx
c0003deb:	e8 f2 dd ff ff       	call   c0001be2 <clmt_clust>
c0003df0:	eb 0a                	jmp    c0003dfc <f_write+0x16c>
c0003df2:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003df5:	89 d8                	mov    eax,ebx
c0003df7:	e8 71 f1 ff ff       	call   c0002f6d <create_chain>
c0003dfc:	85 c0                	test   eax,eax
c0003dfe:	75 09                	jne    c0003e09 <f_write+0x179>
c0003e00:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0003e04:	e9 c0 00 00 00       	jmp    c0003ec9 <f_write+0x239>
c0003e09:	83 f8 01             	cmp    eax,0x1
c0003e0c:	75 0e                	jne    c0003e1c <f_write+0x18c>
c0003e0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003e12:	bd 02 00 00 00       	mov    ebp,0x2
c0003e17:	e9 ad 00 00 00       	jmp    c0003ec9 <f_write+0x239>
c0003e1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003e1f:	75 0e                	jne    c0003e2f <f_write+0x19f>
c0003e21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003e25:	bd 01 00 00 00       	mov    ebp,0x1
c0003e2a:	e9 9a 00 00 00       	jmp    c0003ec9 <f_write+0x239>
c0003e2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003e32:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003e36:	0f 85 d7 fe ff ff    	jne    c0003d13 <f_write+0x83>
c0003e3c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e3f:	e9 cf fe ff ff       	jmp    c0003d13 <f_write+0x83>
c0003e44:	6a 01                	push   0x1
c0003e46:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0003e49:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0003e4c:	50                   	push   eax
c0003e4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003e51:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003e55:	50                   	push   eax
c0003e56:	e8 ef da ff ff       	call   c000194a <disk_write>
c0003e5b:	83 c4 10             	add    esp,0x10
c0003e5e:	85 c0                	test   eax,eax
c0003e60:	75 bf                	jne    c0003e21 <f_write+0x191>
c0003e62:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003e66:	e9 b2 fe ff ff       	jmp    c0003d1d <f_write+0x8d>
c0003e6b:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c0003e6e:	74 20                	je     c0003e90 <f_write+0x200>
c0003e70:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003e73:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0003e76:	76 18                	jbe    c0003e90 <f_write+0x200>
c0003e78:	6a 01                	push   0x1
c0003e7a:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0003e7d:	57                   	push   edi
c0003e7e:	50                   	push   eax
c0003e7f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003e83:	50                   	push   eax
c0003e84:	e8 ab da ff ff       	call   c0001934 <disk_read>
c0003e89:	83 c4 10             	add    esp,0x10
c0003e8c:	85 c0                	test   eax,eax
c0003e8e:	75 91                	jne    c0003e21 <f_write+0x191>
c0003e90:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0003e93:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003e96:	ba 00 02 00 00       	mov    edx,0x200
c0003e9b:	25 ff 01 00 00       	and    eax,0x1ff
c0003ea0:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003ea4:	29 c2                	sub    edx,eax
c0003ea6:	39 d6                	cmp    esi,edx
c0003ea8:	76 02                	jbe    c0003eac <f_write+0x21c>
c0003eaa:	89 d6                	mov    esi,edx
c0003eac:	8d 44 03 2c          	lea    eax,[ebx+eax*1+0x2c]
c0003eb0:	89 f1                	mov    ecx,esi
c0003eb2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0003eb6:	e8 f0 da ff ff       	call   c00019ab <mem_cpy>
c0003ebb:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0003ebf:	e9 e5 fe ff ff       	jmp    c0003da9 <f_write+0x119>
c0003ec4:	bd 07 00 00 00       	mov    ebp,0x7
c0003ec9:	83 c4 2c             	add    esp,0x2c
c0003ecc:	89 e8                	mov    eax,ebp
c0003ece:	5b                   	pop    ebx
c0003ecf:	5e                   	pop    esi
c0003ed0:	5f                   	pop    edi
c0003ed1:	5d                   	pop    ebp
c0003ed2:	c3                   	ret    

c0003ed3 <f_sync>:
c0003ed3:	56                   	push   esi
c0003ed4:	53                   	push   ebx
c0003ed5:	83 ec 14             	sub    esp,0x14
c0003ed8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0003edc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003ee0:	89 d8                	mov    eax,ebx
c0003ee2:	e8 46 df ff ff       	call   c0001e2d <validate>
c0003ee7:	85 c0                	test   eax,eax
c0003ee9:	0f 85 93 00 00 00    	jne    c0003f82 <f_sync+0xaf>
c0003eef:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0003ef2:	f6 c2 40             	test   dl,0x40
c0003ef5:	0f 84 87 00 00 00    	je     c0003f82 <f_sync+0xaf>
c0003efb:	84 d2                	test   dl,dl
c0003efd:	79 29                	jns    c0003f28 <f_sync+0x55>
c0003eff:	6a 01                	push   0x1
c0003f01:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0003f04:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0003f07:	50                   	push   eax
c0003f08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003f0c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f10:	50                   	push   eax
c0003f11:	e8 34 da ff ff       	call   c000194a <disk_write>
c0003f16:	83 c4 10             	add    esp,0x10
c0003f19:	89 c2                	mov    edx,eax
c0003f1b:	b8 01 00 00 00       	mov    eax,0x1
c0003f20:	85 d2                	test   edx,edx
c0003f22:	75 5e                	jne    c0003f82 <f_sync+0xaf>
c0003f24:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f28:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0003f2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f2f:	e8 a3 df ff ff       	call   c0001ed7 <move_window>
c0003f34:	85 c0                	test   eax,eax
c0003f36:	75 4a                	jne    c0003f82 <f_sync+0xaf>
c0003f38:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0003f3b:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0003f3f:	89 f2                	mov    edx,esi
c0003f41:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0003f44:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f46:	e8 30 ee ff ff       	call   c0002d7b <st_clust.isra.1>
c0003f4b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0003f4e:	8d 46 1c             	lea    eax,[esi+0x1c]
c0003f51:	e8 52 da ff ff       	call   c00019a8 <st_dword>
c0003f56:	8d 46 16             	lea    eax,[esi+0x16]
c0003f59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f5e:	e8 45 da ff ff       	call   c00019a8 <st_dword>
c0003f63:	8d 46 12             	lea    eax,[esi+0x12]
c0003f66:	31 d2                	xor    edx,edx
c0003f68:	e8 37 da ff ff       	call   c00019a4 <st_word>
c0003f6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f71:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f79:	e8 98 e9 ff ff       	call   c0002916 <sync_fs>
c0003f7e:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c0003f82:	83 c4 14             	add    esp,0x14
c0003f85:	5b                   	pop    ebx
c0003f86:	5e                   	pop    esi
c0003f87:	c3                   	ret    

c0003f88 <f_close>:
c0003f88:	53                   	push   ebx
c0003f89:	83 ec 24             	sub    esp,0x24
c0003f8c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0003f90:	53                   	push   ebx
c0003f91:	e8 3d ff ff ff       	call   c0003ed3 <f_sync>
c0003f96:	83 c4 10             	add    esp,0x10
c0003f99:	85 c0                	test   eax,eax
c0003f9b:	75 15                	jne    c0003fb2 <f_close+0x2a>
c0003f9d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003fa1:	89 d8                	mov    eax,ebx
c0003fa3:	e8 85 de ff ff       	call   c0001e2d <validate>
c0003fa8:	85 c0                	test   eax,eax
c0003faa:	75 06                	jne    c0003fb2 <f_close+0x2a>
c0003fac:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003fb2:	83 c4 18             	add    esp,0x18
c0003fb5:	5b                   	pop    ebx
c0003fb6:	c3                   	ret    

c0003fb7 <f_lseek>:
c0003fb7:	55                   	push   ebp
c0003fb8:	57                   	push   edi
c0003fb9:	56                   	push   esi
c0003fba:	53                   	push   ebx
c0003fbb:	83 ec 2c             	sub    esp,0x2c
c0003fbe:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003fc2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0003fc6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003fca:	89 d8                	mov    eax,ebx
c0003fcc:	e8 5c de ff ff       	call   c0001e2d <validate>
c0003fd1:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd4:	85 c0                	test   eax,eax
c0003fd6:	0f 85 ba 02 00 00    	jne    c0004296 <f_lseek+0x2df>
c0003fdc:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003fe0:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fe3:	85 c0                	test   eax,eax
c0003fe5:	0f 85 ab 02 00 00    	jne    c0004296 <f_lseek+0x2df>
c0003feb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003fee:	85 c0                	test   eax,eax
c0003ff0:	0f 84 36 01 00 00    	je     c000412c <f_lseek+0x175>
c0003ff6:	83 fe ff             	cmp    esi,0xffffffff
c0003ff9:	0f 85 a3 00 00 00    	jne    c00040a2 <f_lseek+0xeb>
c0003fff:	8d 78 04             	lea    edi,[eax+0x4]
c0004002:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004005:	8b 00                	mov    eax,DWORD PTR [eax]
c0004007:	be 02 00 00 00       	mov    esi,0x2
c000400c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004010:	85 c9                	test   ecx,ecx
c0004012:	74 74                	je     c0004088 <f_lseek+0xd1>
c0004014:	89 cd                	mov    ebp,ecx
c0004016:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000401e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004022:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0004026:	89 ea                	mov    edx,ebp
c0004028:	8b 03                	mov    eax,DWORD PTR [ebx]
c000402a:	e8 74 ed ff ff       	call   c0002da3 <get_fat.isra.2>
c000402f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004033:	83 f8 01             	cmp    eax,0x1
c0004036:	77 10                	ja     c0004048 <f_lseek+0x91>
c0004038:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000403c:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0004043:	e9 4e 02 00 00       	jmp    c0004296 <f_lseek+0x2df>
c0004048:	83 f8 ff             	cmp    eax,0xffffffff
c000404b:	75 10                	jne    c000405d <f_lseek+0xa6>
c000404d:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004051:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004058:	e9 39 02 00 00       	jmp    c0004296 <f_lseek+0x2df>
c000405d:	8d 55 01             	lea    edx,[ebp+0x1]
c0004060:	89 c5                	mov    ebp,eax
c0004062:	39 c2                	cmp    edx,eax
c0004064:	74 b8                	je     c000401e <f_lseek+0x67>
c0004066:	83 c6 02             	add    esi,0x2
c0004069:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000406d:	72 0c                	jb     c000407b <f_lseek+0xc4>
c000406f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004073:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0004076:	89 17                	mov    DWORD PTR [edi],edx
c0004078:	83 c7 08             	add    edi,0x8
c000407b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000407f:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004082:	76 04                	jbe    c0004088 <f_lseek+0xd1>
c0004084:	89 c1                	mov    ecx,eax
c0004086:	eb 8c                	jmp    c0004014 <f_lseek+0x5d>
c0004088:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000408b:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c000408f:	89 30                	mov    DWORD PTR [eax],esi
c0004091:	0f 87 f8 01 00 00    	ja     c000428f <f_lseek+0x2d8>
c0004097:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c000409d:	e9 f4 01 00 00       	jmp    c0004296 <f_lseek+0x2df>
c00040a2:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00040a5:	39 f5                	cmp    ebp,esi
c00040a7:	76 02                	jbe    c00040ab <f_lseek+0xf4>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c00040ae:	85 ed                	test   ebp,ebp
c00040b0:	0f 84 e0 01 00 00    	je     c0004296 <f_lseek+0x2df>
c00040b6:	8d 75 ff             	lea    esi,[ebp-0x1]
c00040b9:	89 d8                	mov    eax,ebx
c00040bb:	89 f2                	mov    edx,esi
c00040bd:	e8 20 db ff ff       	call   c0001be2 <clmt_clust>
c00040c2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00040c6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00040c9:	89 c2                	mov    edx,eax
c00040cb:	89 f8                	mov    eax,edi
c00040cd:	e8 f3 da ff ff       	call   c0001bc5 <clst2sect>
c00040d2:	85 c0                	test   eax,eax
c00040d4:	0f 84 5e ff ff ff    	je     c0004038 <f_lseek+0x81>
c00040da:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00040e0:	0f 84 b0 01 00 00    	je     c0004296 <f_lseek+0x2df>
c00040e6:	c1 ee 09             	shr    esi,0x9
c00040e9:	0f b7 57 0a          	movzx  edx,WORD PTR [edi+0xa]
c00040ed:	4a                   	dec    edx
c00040ee:	21 d6                	and    esi,edx
c00040f0:	01 c6                	add    esi,eax
c00040f2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040f5:	39 f0                	cmp    eax,esi
c00040f7:	0f 84 99 01 00 00    	je     c0004296 <f_lseek+0x2df>
c00040fd:	8d 6b 2c             	lea    ebp,[ebx+0x2c]
c0004100:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004104:	79 1d                	jns    c0004123 <f_lseek+0x16c>
c0004106:	6a 01                	push   0x1
c0004108:	50                   	push   eax
c0004109:	55                   	push   ebp
c000410a:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000410e:	50                   	push   eax
c000410f:	e8 36 d8 ff ff       	call   c000194a <disk_write>
c0004114:	83 c4 10             	add    esp,0x10
c0004117:	85 c0                	test   eax,eax
c0004119:	0f 85 2e ff ff ff    	jne    c000404d <f_lseek+0x96>
c000411f:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004123:	6a 01                	push   0x1
c0004125:	56                   	push   esi
c0004126:	55                   	push   ebp
c0004127:	e9 45 01 00 00       	jmp    c0004271 <f_lseek+0x2ba>
c000412c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000412f:	39 f0                	cmp    eax,esi
c0004131:	73 08                	jae    c000413b <f_lseek+0x184>
c0004133:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004137:	75 02                	jne    c000413b <f_lseek+0x184>
c0004139:	89 c6                	mov    esi,eax
c000413b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000413e:	85 f6                	test   esi,esi
c0004140:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004147:	75 07                	jne    c0004150 <f_lseek+0x199>
c0004149:	31 f6                	xor    esi,esi
c000414b:	e9 d6 00 00 00       	jmp    c0004226 <f_lseek+0x26f>
c0004150:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004154:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c0004158:	c1 e7 09             	shl    edi,0x9
c000415b:	85 c9                	test   ecx,ecx
c000415d:	74 24                	je     c0004183 <f_lseek+0x1cc>
c000415f:	49                   	dec    ecx
c0004160:	31 d2                	xor    edx,edx
c0004162:	8d 46 ff             	lea    eax,[esi-0x1]
c0004165:	f7 f7                	div    edi
c0004167:	31 d2                	xor    edx,edx
c0004169:	89 c5                	mov    ebp,eax
c000416b:	89 c8                	mov    eax,ecx
c000416d:	f7 f7                	div    edi
c000416f:	39 c5                	cmp    ebp,eax
c0004171:	72 10                	jb     c0004183 <f_lseek+0x1cc>
c0004173:	89 f8                	mov    eax,edi
c0004175:	f7 d8                	neg    eax
c0004177:	21 c1                	and    ecx,eax
c0004179:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000417c:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c000417f:	29 ce                	sub    esi,ecx
c0004181:	eb 28                	jmp    c00041ab <f_lseek+0x1f4>
c0004183:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004186:	85 c0                	test   eax,eax
c0004188:	75 1e                	jne    c00041a8 <f_lseek+0x1f1>
c000418a:	31 d2                	xor    edx,edx
c000418c:	89 d8                	mov    eax,ebx
c000418e:	e8 da ed ff ff       	call   c0002f6d <create_chain>
c0004193:	83 f8 01             	cmp    eax,0x1
c0004196:	0f 84 9c fe ff ff    	je     c0004038 <f_lseek+0x81>
c000419c:	83 f8 ff             	cmp    eax,0xffffffff
c000419f:	0f 84 a8 fe ff ff    	je     c000404d <f_lseek+0x96>
c00041a5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00041a8:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00041ab:	85 c0                	test   eax,eax
c00041ad:	74 9a                	je     c0004149 <f_lseek+0x192>
c00041af:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00041b2:	39 fe                	cmp    esi,edi
c00041b4:	76 49                	jbe    c00041ff <f_lseek+0x248>
c00041b6:	01 fa                	add    edx,edi
c00041b8:	29 fe                	sub    esi,edi
c00041ba:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00041bd:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00041c1:	89 c2                	mov    edx,eax
c00041c3:	74 0d                	je     c00041d2 <f_lseek+0x21b>
c00041c5:	89 d8                	mov    eax,ebx
c00041c7:	e8 a1 ed ff ff       	call   c0002f6d <create_chain>
c00041cc:	85 c0                	test   eax,eax
c00041ce:	75 09                	jne    c00041d9 <f_lseek+0x222>
c00041d0:	eb 2b                	jmp    c00041fd <f_lseek+0x246>
c00041d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d4:	e8 ca eb ff ff       	call   c0002da3 <get_fat.isra.2>
c00041d9:	83 f8 ff             	cmp    eax,0xffffffff
c00041dc:	0f 84 6b fe ff ff    	je     c000404d <f_lseek+0x96>
c00041e2:	83 f8 01             	cmp    eax,0x1
c00041e5:	0f 86 4d fe ff ff    	jbe    c0004038 <f_lseek+0x81>
c00041eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041ef:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c00041f2:	0f 86 40 fe ff ff    	jbe    c0004038 <f_lseek+0x81>
c00041f8:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00041fb:	eb b2                	jmp    c00041af <f_lseek+0x1f8>
c00041fd:	31 f6                	xor    esi,esi
c00041ff:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004202:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004208:	0f 84 3b ff ff ff    	je     c0004149 <f_lseek+0x192>
c000420e:	89 c2                	mov    edx,eax
c0004210:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004214:	e8 ac d9 ff ff       	call   c0001bc5 <clst2sect>
c0004219:	85 c0                	test   eax,eax
c000421b:	0f 84 17 fe ff ff    	je     c0004038 <f_lseek+0x81>
c0004221:	c1 ee 09             	shr    esi,0x9
c0004224:	01 c6                	add    esi,eax
c0004226:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004229:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000422c:	76 07                	jbe    c0004235 <f_lseek+0x27e>
c000422e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004231:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004235:	a9 ff 01 00 00       	test   eax,0x1ff
c000423a:	74 5a                	je     c0004296 <f_lseek+0x2df>
c000423c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000423f:	39 f0                	cmp    eax,esi
c0004241:	74 53                	je     c0004296 <f_lseek+0x2df>
c0004243:	8d 7b 2c             	lea    edi,[ebx+0x2c]
c0004246:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000424a:	79 21                	jns    c000426d <f_lseek+0x2b6>
c000424c:	6a 01                	push   0x1
c000424e:	50                   	push   eax
c000424f:	57                   	push   edi
c0004250:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 ec d6 ff ff       	call   c000194a <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	85 c0                	test   eax,eax
c0004263:	0f 85 e4 fd ff ff    	jne    c000404d <f_lseek+0x96>
c0004269:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000426d:	6a 01                	push   0x1
c000426f:	56                   	push   esi
c0004270:	57                   	push   edi
c0004271:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004275:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004279:	50                   	push   eax
c000427a:	e8 b5 d6 ff ff       	call   c0001934 <disk_read>
c000427f:	83 c4 10             	add    esp,0x10
c0004282:	85 c0                	test   eax,eax
c0004284:	0f 85 c3 fd ff ff    	jne    c000404d <f_lseek+0x96>
c000428a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000428d:	eb 07                	jmp    c0004296 <f_lseek+0x2df>
c000428f:	c7 04 24 11 00 00 00 	mov    DWORD PTR [esp],0x11
c0004296:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004299:	83 c4 2c             	add    esp,0x2c
c000429c:	5b                   	pop    ebx
c000429d:	5e                   	pop    esi
c000429e:	5f                   	pop    edi
c000429f:	5d                   	pop    ebp
c00042a0:	c3                   	ret    

c00042a1 <f_opendir>:
c00042a1:	56                   	push   esi
c00042a2:	b8 09 00 00 00       	mov    eax,0x9
c00042a7:	53                   	push   ebx
c00042a8:	83 ec 24             	sub    esp,0x24
c00042ab:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00042af:	85 db                	test   ebx,ebx
c00042b1:	0f 84 af 00 00 00    	je     c0004366 <f_opendir+0xc5>
c00042b7:	31 c9                	xor    ecx,ecx
c00042b9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00042bd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00042c1:	e8 64 dd ff ff       	call   c000202a <mount_volume>
c00042c6:	85 c0                	test   eax,eax
c00042c8:	0f 85 92 00 00 00    	jne    c0004360 <f_opendir+0xbf>
c00042ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00042d2:	83 ec 0c             	sub    esp,0xc
c00042d5:	89 03                	mov    DWORD PTR [ebx],eax
c00042d7:	68 00 02 00 00       	push   0x200
c00042dc:	e8 13 17 00 00       	call   c00059f4 <ff_memalloc>
c00042e1:	83 c4 10             	add    esp,0x10
c00042e4:	89 c6                	mov    esi,eax
c00042e6:	b8 11 00 00 00       	mov    eax,0x11
c00042eb:	85 f6                	test   esi,esi
c00042ed:	74 77                	je     c0004366 <f_opendir+0xc5>
c00042ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00042f3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00042f7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00042fa:	89 d8                	mov    eax,ebx
c00042fc:	e8 33 f2 ff ff       	call   c0003534 <follow_path>
c0004301:	85 c0                	test   eax,eax
c0004303:	75 37                	jne    c000433c <f_opendir+0x9b>
c0004305:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c0004309:	78 1c                	js     c0004327 <f_opendir+0x86>
c000430b:	b8 05 00 00 00       	mov    eax,0x5
c0004310:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004314:	74 26                	je     c000433c <f_opendir+0x9b>
c0004316:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004319:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000431d:	8a 00                	mov    al,BYTE PTR [eax]
c000431f:	e8 2e ea ff ff       	call   c0002d52 <ld_clust.isra.0>
c0004324:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004327:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000432b:	31 d2                	xor    edx,edx
c000432d:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004331:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004335:	89 d8                	mov    eax,ebx
c0004337:	e8 69 eb ff ff       	call   c0002ea5 <dir_sdi>
c000433c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004340:	83 ec 0c             	sub    esp,0xc
c0004343:	56                   	push   esi
c0004344:	e8 c3 16 00 00       	call   c0005a0c <ff_memfree>
c0004349:	83 c4 10             	add    esp,0x10
c000434c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004350:	83 f8 04             	cmp    eax,0x4
c0004353:	74 06                	je     c000435b <f_opendir+0xba>
c0004355:	85 c0                	test   eax,eax
c0004357:	74 0d                	je     c0004366 <f_opendir+0xc5>
c0004359:	eb 05                	jmp    c0004360 <f_opendir+0xbf>
c000435b:	b8 05 00 00 00       	mov    eax,0x5
c0004360:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004366:	83 c4 24             	add    esp,0x24
c0004369:	5b                   	pop    ebx
c000436a:	5e                   	pop    esi
c000436b:	c3                   	ret    

c000436c <f_closedir>:
c000436c:	53                   	push   ebx
c000436d:	83 ec 18             	sub    esp,0x18
c0004370:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004374:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004378:	89 d8                	mov    eax,ebx
c000437a:	e8 ae da ff ff       	call   c0001e2d <validate>
c000437f:	85 c0                	test   eax,eax
c0004381:	75 06                	jne    c0004389 <f_closedir+0x1d>
c0004383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004389:	83 c4 18             	add    esp,0x18
c000438c:	5b                   	pop    ebx
c000438d:	c3                   	ret    

c000438e <f_readdir>:
c000438e:	57                   	push   edi
c000438f:	56                   	push   esi
c0004390:	53                   	push   ebx
c0004391:	83 ec 20             	sub    esp,0x20
c0004394:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004398:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000439c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00043a0:	89 d8                	mov    eax,ebx
c00043a2:	e8 86 da ff ff       	call   c0001e2d <validate>
c00043a7:	85 c0                	test   eax,eax
c00043a9:	75 6e                	jne    c0004419 <f_readdir+0x8b>
c00043ab:	85 ff                	test   edi,edi
c00043ad:	75 0b                	jne    c00043ba <f_readdir+0x2c>
c00043af:	31 d2                	xor    edx,edx
c00043b1:	89 d8                	mov    eax,ebx
c00043b3:	e8 ed ea ff ff       	call   c0002ea5 <dir_sdi>
c00043b8:	eb 5f                	jmp    c0004419 <f_readdir+0x8b>
c00043ba:	83 ec 0c             	sub    esp,0xc
c00043bd:	68 00 02 00 00       	push   0x200
c00043c2:	e8 2d 16 00 00       	call   c00059f4 <ff_memalloc>
c00043c7:	83 c4 10             	add    esp,0x10
c00043ca:	89 c6                	mov    esi,eax
c00043cc:	b8 11 00 00 00       	mov    eax,0x11
c00043d1:	85 f6                	test   esi,esi
c00043d3:	74 44                	je     c0004419 <f_readdir+0x8b>
c00043d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00043d9:	31 d2                	xor    edx,edx
c00043db:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00043de:	89 d8                	mov    eax,ebx
c00043e0:	e8 b1 ee ff ff       	call   c0003296 <dir_read>
c00043e5:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00043ea:	75 19                	jne    c0004405 <f_readdir+0x77>
c00043ec:	89 fa                	mov    edx,edi
c00043ee:	89 d8                	mov    eax,ebx
c00043f0:	e8 79 e7 ff ff       	call   c0002b6e <get_fileinfo>
c00043f5:	31 d2                	xor    edx,edx
c00043f7:	89 d8                	mov    eax,ebx
c00043f9:	e8 32 ed ff ff       	call   c0003130 <dir_next>
c00043fe:	83 f8 04             	cmp    eax,0x4
c0004401:	75 02                	jne    c0004405 <f_readdir+0x77>
c0004403:	31 c0                	xor    eax,eax
c0004405:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004409:	83 ec 0c             	sub    esp,0xc
c000440c:	56                   	push   esi
c000440d:	e8 fa 15 00 00       	call   c0005a0c <ff_memfree>
c0004412:	83 c4 10             	add    esp,0x10
c0004415:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004419:	83 c4 20             	add    esp,0x20
c000441c:	5b                   	pop    ebx
c000441d:	5e                   	pop    esi
c000441e:	5f                   	pop    edi
c000441f:	c3                   	ret    

c0004420 <f_stat>:
c0004420:	57                   	push   edi
c0004421:	31 c9                	xor    ecx,ecx
c0004423:	56                   	push   esi
c0004424:	53                   	push   ebx
c0004425:	83 ec 30             	sub    esp,0x30
c0004428:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000442c:	89 e2                	mov    edx,esp
c000442e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004432:	e8 f3 db ff ff       	call   c000202a <mount_volume>
c0004437:	89 c3                	mov    ebx,eax
c0004439:	85 c0                	test   eax,eax
c000443b:	75 59                	jne    c0004496 <f_stat+0x76>
c000443d:	83 ec 0c             	sub    esp,0xc
c0004440:	bb 11 00 00 00       	mov    ebx,0x11
c0004445:	68 00 02 00 00       	push   0x200
c000444a:	e8 a5 15 00 00       	call   c00059f4 <ff_memalloc>
c000444f:	83 c4 10             	add    esp,0x10
c0004452:	89 c6                	mov    esi,eax
c0004454:	85 c0                	test   eax,eax
c0004456:	74 3e                	je     c0004496 <f_stat+0x76>
c0004458:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000445b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000445f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004462:	89 e0                	mov    eax,esp
c0004464:	e8 cb f0 ff ff       	call   c0003534 <follow_path>
c0004469:	89 c3                	mov    ebx,eax
c000446b:	85 c0                	test   eax,eax
c000446d:	75 1b                	jne    c000448a <f_stat+0x6a>
c000446f:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004474:	78 0f                	js     c0004485 <f_stat+0x65>
c0004476:	85 ff                	test   edi,edi
c0004478:	74 10                	je     c000448a <f_stat+0x6a>
c000447a:	89 fa                	mov    edx,edi
c000447c:	89 e0                	mov    eax,esp
c000447e:	e8 eb e6 ff ff       	call   c0002b6e <get_fileinfo>
c0004483:	eb 05                	jmp    c000448a <f_stat+0x6a>
c0004485:	bb 06 00 00 00       	mov    ebx,0x6
c000448a:	83 ec 0c             	sub    esp,0xc
c000448d:	56                   	push   esi
c000448e:	e8 79 15 00 00       	call   c0005a0c <ff_memfree>
c0004493:	83 c4 10             	add    esp,0x10
c0004496:	83 c4 30             	add    esp,0x30
c0004499:	89 d8                	mov    eax,ebx
c000449b:	5b                   	pop    ebx
c000449c:	5e                   	pop    esi
c000449d:	5f                   	pop    edi
c000449e:	c3                   	ret    

c000449f <f_getfree>:
c000449f:	55                   	push   ebp
c00044a0:	31 c9                	xor    ecx,ecx
c00044a2:	57                   	push   edi
c00044a3:	56                   	push   esi
c00044a4:	53                   	push   ebx
c00044a5:	83 ec 2c             	sub    esp,0x2c
c00044a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044ac:	8d 44 24 40          	lea    eax,[esp+0x40]
c00044b0:	e8 75 db ff ff       	call   c000202a <mount_volume>
c00044b5:	89 c7                	mov    edi,eax
c00044b7:	85 c0                	test   eax,eax
c00044b9:	0f 85 d8 00 00 00    	jne    c0004597 <f_getfree+0xf8>
c00044bf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00044c3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00044c7:	89 30                	mov    DWORD PTR [eax],esi
c00044c9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00044cc:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00044cf:	8d 55 fe             	lea    edx,[ebp-0x2]
c00044d2:	39 d0                	cmp    eax,edx
c00044d4:	77 0b                	ja     c00044e1 <f_getfree+0x42>
c00044d6:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00044da:	89 01                	mov    DWORD PTR [ecx],eax
c00044dc:	e9 b6 00 00 00       	jmp    c0004597 <f_getfree+0xf8>
c00044e1:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00044e4:	75 29                	jne    c000450f <f_getfree+0x70>
c00044e6:	bd 02 00 00 00       	mov    ebp,0x2
c00044eb:	31 db                	xor    ebx,ebx
c00044ed:	89 ea                	mov    edx,ebp
c00044ef:	89 f0                	mov    eax,esi
c00044f1:	e8 ad e8 ff ff       	call   c0002da3 <get_fat.isra.2>
c00044f6:	83 f8 ff             	cmp    eax,0xffffffff
c00044f9:	74 7b                	je     c0004576 <f_getfree+0xd7>
c00044fb:	83 f8 01             	cmp    eax,0x1
c00044fe:	74 7d                	je     c000457d <f_getfree+0xde>
c0004500:	83 d3 00             	adc    ebx,0x0
c0004503:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004507:	45                   	inc    ebp
c0004508:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c000450b:	77 e0                	ja     c00044ed <f_getfree+0x4e>
c000450d:	eb 77                	jmp    c0004586 <f_getfree+0xe7>
c000450f:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004512:	31 db                	xor    ebx,ebx
c0004514:	31 f6                	xor    esi,esi
c0004516:	85 f6                	test   esi,esi
c0004518:	75 18                	jne    c0004532 <f_getfree+0x93>
c000451a:	8d 42 01             	lea    eax,[edx+0x1]
c000451d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004521:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004525:	e8 ad d9 ff ff       	call   c0001ed7 <move_window>
c000452a:	85 c0                	test   eax,eax
c000452c:	75 56                	jne    c0004584 <f_getfree+0xe5>
c000452e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004532:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004536:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000453a:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c000453e:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004541:	75 11                	jne    c0004554 <f_getfree+0xb5>
c0004543:	e8 37 d4 ff ff       	call   c000197f <ld_word>
c0004548:	66 83 f8 01          	cmp    ax,0x1
c000454c:	83 d3 00             	adc    ebx,0x0
c000454f:	83 c6 02             	add    esi,0x2
c0004552:	eb 13                	jmp    c0004567 <f_getfree+0xc8>
c0004554:	e8 33 d4 ff ff       	call   c000198c <ld_dword>
c0004559:	25 ff ff ff 0f       	and    eax,0xfffffff
c000455e:	83 f8 01             	cmp    eax,0x1
c0004561:	83 d3 00             	adc    ebx,0x0
c0004564:	83 c6 04             	add    esi,0x4
c0004567:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000456d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004571:	4d                   	dec    ebp
c0004572:	75 a2                	jne    c0004516 <f_getfree+0x77>
c0004574:	eb 10                	jmp    c0004586 <f_getfree+0xe7>
c0004576:	bf 01 00 00 00       	mov    edi,0x1
c000457b:	eb 09                	jmp    c0004586 <f_getfree+0xe7>
c000457d:	bf 02 00 00 00       	mov    edi,0x2
c0004582:	eb 02                	jmp    c0004586 <f_getfree+0xe7>
c0004584:	89 c7                	mov    edi,eax
c0004586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000458a:	89 18                	mov    DWORD PTR [eax],ebx
c000458c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004590:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004593:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0004597:	83 c4 2c             	add    esp,0x2c
c000459a:	89 f8                	mov    eax,edi
c000459c:	5b                   	pop    ebx
c000459d:	5e                   	pop    esi
c000459e:	5f                   	pop    edi
c000459f:	5d                   	pop    ebp
c00045a0:	c3                   	ret    

c00045a1 <f_truncate>:
c00045a1:	56                   	push   esi
c00045a2:	53                   	push   ebx
c00045a3:	83 ec 14             	sub    esp,0x14
c00045a6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00045aa:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00045ae:	89 d8                	mov    eax,ebx
c00045b0:	e8 78 d8 ff ff       	call   c0001e2d <validate>
c00045b5:	89 c6                	mov    esi,eax
c00045b7:	85 c0                	test   eax,eax
c00045b9:	0f 85 be 00 00 00    	jne    c000467d <f_truncate+0xdc>
c00045bf:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00045c3:	85 f6                	test   esi,esi
c00045c5:	0f 85 b2 00 00 00    	jne    c000467d <f_truncate+0xdc>
c00045cb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00045cf:	0f 84 a3 00 00 00    	je     c0004678 <f_truncate+0xd7>
c00045d5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045d8:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045db:	0f 83 9c 00 00 00    	jae    c000467d <f_truncate+0xdc>
c00045e1:	85 c0                	test   eax,eax
c00045e3:	75 15                	jne    c00045fa <f_truncate+0x59>
c00045e5:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00045e8:	31 c9                	xor    ecx,ecx
c00045ea:	89 d8                	mov    eax,ebx
c00045ec:	e8 b6 ea ff ff       	call   c00030a7 <remove_chain>
c00045f1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00045f8:	eb 35                	jmp    c000462f <f_truncate+0x8e>
c00045fa:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045ff:	e8 9f e7 ff ff       	call   c0002da3 <get_fat.isra.2>
c0004604:	89 c2                	mov    edx,eax
c0004606:	b8 01 00 00 00       	mov    eax,0x1
c000460b:	83 fa ff             	cmp    edx,0xffffffff
c000460e:	74 1f                	je     c000462f <f_truncate+0x8e>
c0004610:	b8 02 00 00 00       	mov    eax,0x2
c0004615:	83 fa 01             	cmp    edx,0x1
c0004618:	74 15                	je     c000462f <f_truncate+0x8e>
c000461a:	31 c0                	xor    eax,eax
c000461c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004620:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004623:	76 0a                	jbe    c000462f <f_truncate+0x8e>
c0004625:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004628:	89 d8                	mov    eax,ebx
c000462a:	e8 78 ea ff ff       	call   c00030a7 <remove_chain>
c000462f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004632:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004635:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004638:	83 ca 40             	or     edx,0x40
c000463b:	85 c0                	test   eax,eax
c000463d:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004640:	75 2f                	jne    c0004671 <f_truncate+0xd0>
c0004642:	84 d2                	test   dl,dl
c0004644:	79 37                	jns    c000467d <f_truncate+0xdc>
c0004646:	6a 01                	push   0x1
c0004648:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000464b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000464e:	50                   	push   eax
c000464f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004653:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004657:	50                   	push   eax
c0004658:	e8 ed d2 ff ff       	call   c000194a <disk_write>
c000465d:	83 c4 10             	add    esp,0x10
c0004660:	85 c0                	test   eax,eax
c0004662:	75 08                	jne    c000466c <f_truncate+0xcb>
c0004664:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004668:	31 f6                	xor    esi,esi
c000466a:	eb 11                	jmp    c000467d <f_truncate+0xdc>
c000466c:	b8 01 00 00 00       	mov    eax,0x1
c0004671:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004674:	89 c6                	mov    esi,eax
c0004676:	eb 05                	jmp    c000467d <f_truncate+0xdc>
c0004678:	be 07 00 00 00       	mov    esi,0x7
c000467d:	89 f0                	mov    eax,esi
c000467f:	83 c4 14             	add    esp,0x14
c0004682:	5b                   	pop    ebx
c0004683:	5e                   	pop    esi
c0004684:	c3                   	ret    

c0004685 <f_unlink>:
c0004685:	55                   	push   ebp
c0004686:	b9 02 00 00 00       	mov    ecx,0x2
c000468b:	57                   	push   edi
c000468c:	56                   	push   esi
c000468d:	53                   	push   ebx
c000468e:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004694:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004698:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c000469f:	e8 86 d9 ff ff       	call   c000202a <mount_volume>
c00046a4:	85 c0                	test   eax,eax
c00046a6:	0f 85 f0 00 00 00    	jne    c000479c <f_unlink+0x117>
c00046ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b0:	83 ec 0c             	sub    esp,0xc
c00046b3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00046b7:	68 00 02 00 00       	push   0x200
c00046bc:	e8 33 13 00 00       	call   c00059f4 <ff_memalloc>
c00046c1:	83 c4 10             	add    esp,0x10
c00046c4:	89 c3                	mov    ebx,eax
c00046c6:	b8 11 00 00 00       	mov    eax,0x11
c00046cb:	85 db                	test   ebx,ebx
c00046cd:	0f 84 c9 00 00 00    	je     c000479c <f_unlink+0x117>
c00046d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046d7:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00046de:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00046e1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00046e5:	e8 4a ee ff ff       	call   c0003534 <follow_path>
c00046ea:	85 c0                	test   eax,eax
c00046ec:	0f 85 96 00 00 00    	jne    c0004788 <f_unlink+0x103>
c00046f2:	b8 06 00 00 00       	mov    eax,0x6
c00046f7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00046fc:	0f 88 86 00 00 00    	js     c0004788 <f_unlink+0x103>
c0004702:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004707:	f7 c5 01 00 00 00    	test   ebp,0x1
c000470d:	74 07                	je     c0004716 <f_unlink+0x91>
c000470f:	b8 07 00 00 00       	mov    eax,0x7
c0004714:	eb 72                	jmp    c0004788 <f_unlink+0x103>
c0004716:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000471a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000471e:	8a 07                	mov    al,BYTE PTR [edi]
c0004720:	e8 2d e6 ff ff       	call   c0002d52 <ld_clust.isra.0>
c0004725:	83 e5 10             	and    ebp,0x10
c0004728:	89 c6                	mov    esi,eax
c000472a:	75 0f                	jne    c000473b <f_unlink+0xb6>
c000472c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004730:	e8 7e ec ff ff       	call   c00033b3 <dir_remove>
c0004735:	85 c0                	test   eax,eax
c0004737:	74 2f                	je     c0004768 <f_unlink+0xe3>
c0004739:	eb 4d                	jmp    c0004788 <f_unlink+0x103>
c000473b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000473f:	31 d2                	xor    edx,edx
c0004741:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004745:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004749:	e8 57 e7 ff ff       	call   c0002ea5 <dir_sdi>
c000474e:	85 c0                	test   eax,eax
c0004750:	75 36                	jne    c0004788 <f_unlink+0x103>
c0004752:	31 d2                	xor    edx,edx
c0004754:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004758:	e8 39 eb ff ff       	call   c0003296 <dir_read>
c000475d:	85 c0                	test   eax,eax
c000475f:	74 ae                	je     c000470f <f_unlink+0x8a>
c0004761:	83 f8 04             	cmp    eax,0x4
c0004764:	75 22                	jne    c0004788 <f_unlink+0x103>
c0004766:	eb c4                	jmp    c000472c <f_unlink+0xa7>
c0004768:	85 f6                	test   esi,esi
c000476a:	75 0b                	jne    c0004777 <f_unlink+0xf2>
c000476c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004770:	e8 a1 e1 ff ff       	call   c0002916 <sync_fs>
c0004775:	eb 11                	jmp    c0004788 <f_unlink+0x103>
c0004777:	31 c9                	xor    ecx,ecx
c0004779:	89 f2                	mov    edx,esi
c000477b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000477f:	e8 23 e9 ff ff       	call   c00030a7 <remove_chain>
c0004784:	85 c0                	test   eax,eax
c0004786:	74 e4                	je     c000476c <f_unlink+0xe7>
c0004788:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000478c:	83 ec 0c             	sub    esp,0xc
c000478f:	53                   	push   ebx
c0004790:	e8 77 12 00 00       	call   c0005a0c <ff_memfree>
c0004795:	83 c4 10             	add    esp,0x10
c0004798:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000479c:	81 c4 8c 00 00 00    	add    esp,0x8c
c00047a2:	5b                   	pop    ebx
c00047a3:	5e                   	pop    esi
c00047a4:	5f                   	pop    edi
c00047a5:	5d                   	pop    ebp
c00047a6:	c3                   	ret    

c00047a7 <f_mkdir>:
c00047a7:	57                   	push   edi
c00047a8:	b9 02 00 00 00       	mov    ecx,0x2
c00047ad:	56                   	push   esi
c00047ae:	53                   	push   ebx
c00047af:	83 ec 50             	sub    esp,0x50
c00047b2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b6:	8d 44 24 60          	lea    eax,[esp+0x60]
c00047ba:	e8 6b d8 ff ff       	call   c000202a <mount_volume>
c00047bf:	89 c3                	mov    ebx,eax
c00047c1:	85 c0                	test   eax,eax
c00047c3:	0f 85 70 01 00 00    	jne    c0004939 <f_mkdir+0x192>
c00047c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047cd:	bb 11 00 00 00       	mov    ebx,0x11
c00047d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047d6:	83 ec 0c             	sub    esp,0xc
c00047d9:	68 00 02 00 00       	push   0x200
c00047de:	e8 11 12 00 00       	call   c00059f4 <ff_memalloc>
c00047e3:	83 c4 10             	add    esp,0x10
c00047e6:	89 c7                	mov    edi,eax
c00047e8:	85 c0                	test   eax,eax
c00047ea:	0f 84 49 01 00 00    	je     c0004939 <f_mkdir+0x192>
c00047f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047f4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00047f8:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00047fb:	8d 44 24 20          	lea    eax,[esp+0x20]
c00047ff:	e8 30 ed ff ff       	call   c0003534 <follow_path>
c0004804:	89 c3                	mov    ebx,eax
c0004806:	85 c0                	test   eax,eax
c0004808:	74 3e                	je     c0004848 <f_mkdir+0xa1>
c000480a:	83 f8 04             	cmp    eax,0x4
c000480d:	75 3e                	jne    c000484d <f_mkdir+0xa6>
c000480f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004813:	31 d2                	xor    edx,edx
c0004815:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004819:	8d 44 24 10          	lea    eax,[esp+0x10]
c000481d:	e8 4b e7 ff ff       	call   c0002f6d <create_chain>
c0004822:	89 c6                	mov    esi,eax
c0004824:	85 c0                	test   eax,eax
c0004826:	74 0c                	je     c0004834 <f_mkdir+0x8d>
c0004828:	bb 02 00 00 00       	mov    ebx,0x2
c000482d:	83 f8 01             	cmp    eax,0x1
c0004830:	74 07                	je     c0004839 <f_mkdir+0x92>
c0004832:	eb 2a                	jmp    c000485e <f_mkdir+0xb7>
c0004834:	bb 07 00 00 00       	mov    ebx,0x7
c0004839:	31 c9                	xor    ecx,ecx
c000483b:	89 f2                	mov    edx,esi
c000483d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004841:	e8 61 e8 ff ff       	call   c00030a7 <remove_chain>
c0004846:	eb 05                	jmp    c000484d <f_mkdir+0xa6>
c0004848:	bb 08 00 00 00       	mov    ebx,0x8
c000484d:	83 ec 0c             	sub    esp,0xc
c0004850:	57                   	push   edi
c0004851:	e8 b6 11 00 00       	call   c0005a0c <ff_memfree>
c0004856:	83 c4 10             	add    esp,0x10
c0004859:	e9 db 00 00 00       	jmp    c0004939 <f_mkdir+0x192>
c000485e:	bb 01 00 00 00       	mov    ebx,0x1
c0004863:	83 f8 ff             	cmp    eax,0xffffffff
c0004866:	74 d1                	je     c0004839 <f_mkdir+0x92>
c0004868:	89 f2                	mov    edx,esi
c000486a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000486e:	e8 09 dc ff ff       	call   c000247c <dir_clear>
c0004873:	89 c3                	mov    ebx,eax
c0004875:	85 c0                	test   eax,eax
c0004877:	75 c0                	jne    c0004839 <f_mkdir+0x92>
c0004879:	b9 0b 00 00 00       	mov    ecx,0xb
c000487e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004882:	ba 20 00 00 00       	mov    edx,0x20
c0004887:	83 c0 34             	add    eax,0x34
c000488a:	e8 31 d1 ff ff       	call   c00019c0 <mem_set>
c000488f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004893:	ba 00 00 21 50       	mov    edx,0x50210000
c0004898:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c000489c:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c00048a0:	83 c0 4a             	add    eax,0x4a
c00048a3:	e8 00 d1 ff ff       	call   c00019a8 <st_dword>
c00048a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048ac:	89 f1                	mov    ecx,esi
c00048ae:	8d 50 34             	lea    edx,[eax+0x34]
c00048b1:	e8 c5 e4 ff ff       	call   c0002d7b <st_clust.isra.1>
c00048b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048ba:	b9 20 00 00 00       	mov    ecx,0x20
c00048bf:	8d 50 34             	lea    edx,[eax+0x34]
c00048c2:	83 c0 54             	add    eax,0x54
c00048c5:	e8 e1 d0 ff ff       	call   c00019ab <mem_cpy>
c00048ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048ce:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00048d2:	8d 50 54             	lea    edx,[eax+0x54]
c00048d5:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c00048d9:	e8 9d e4 ff ff       	call   c0002d7b <st_clust.isra.1>
c00048de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048e2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 d9 ec ff ff       	call   c00035c8 <dir_register>
c00048ef:	89 c3                	mov    ebx,eax
c00048f1:	85 c0                	test   eax,eax
c00048f3:	0f 85 40 ff ff ff    	jne    c0004839 <f_mkdir+0x92>
c00048f9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00048fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004902:	83 c0 16             	add    eax,0x16
c0004905:	e8 9e d0 ff ff       	call   c00019a8 <st_dword>
c000490a:	89 f1                	mov    ecx,esi
c000490c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004910:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004914:	e8 62 e4 ff ff       	call   c0002d7b <st_clust.isra.1>
c0004919:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000491d:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004921:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004925:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004929:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000492d:	e8 e4 df ff ff       	call   c0002916 <sync_fs>
c0004932:	89 c3                	mov    ebx,eax
c0004934:	e9 14 ff ff ff       	jmp    c000484d <f_mkdir+0xa6>
c0004939:	83 c4 50             	add    esp,0x50
c000493c:	89 d8                	mov    eax,ebx
c000493e:	5b                   	pop    ebx
c000493f:	5e                   	pop    esi
c0004940:	5f                   	pop    edi
c0004941:	c3                   	ret    

c0004942 <f_rename>:
c0004942:	57                   	push   edi
c0004943:	56                   	push   esi
c0004944:	53                   	push   ebx
c0004945:	81 ec a0 00 00 00    	sub    esp,0xa0
c000494b:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004952:	e8 89 d4 ff ff       	call   c0001de0 <get_ldnumber>
c0004957:	b9 02 00 00 00       	mov    ecx,0x2
c000495c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004960:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004967:	e8 be d6 ff ff       	call   c000202a <mount_volume>
c000496c:	85 c0                	test   eax,eax
c000496e:	0f 85 7a 01 00 00    	jne    c0004aee <f_rename+0x1ac>
c0004974:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004978:	83 ec 0c             	sub    esp,0xc
c000497b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000497f:	68 00 02 00 00       	push   0x200
c0004984:	e8 6b 10 00 00       	call   c00059f4 <ff_memalloc>
c0004989:	83 c4 10             	add    esp,0x10
c000498c:	89 c6                	mov    esi,eax
c000498e:	b8 11 00 00 00       	mov    eax,0x11
c0004993:	85 f6                	test   esi,esi
c0004995:	0f 84 53 01 00 00    	je     c0004aee <f_rename+0x1ac>
c000499b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000499f:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c00049a6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049a9:	8d 44 24 40          	lea    eax,[esp+0x40]
c00049ad:	e8 82 eb ff ff       	call   c0003534 <follow_path>
c00049b2:	85 c0                	test   eax,eax
c00049b4:	0f 85 20 01 00 00    	jne    c0004ada <f_rename+0x198>
c00049ba:	b8 06 00 00 00       	mov    eax,0x6
c00049bf:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c00049c4:	0f 85 10 01 00 00    	jne    c0004ada <f_rename+0x198>
c00049ca:	b9 20 00 00 00       	mov    ecx,0x20
c00049cf:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049d3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00049d7:	e8 cf cf ff ff       	call   c00019ab <mem_cpy>
c00049dc:	b9 30 00 00 00       	mov    ecx,0x30
c00049e1:	8d 54 24 40          	lea    edx,[esp+0x40]
c00049e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00049e9:	e8 bd cf ff ff       	call   c00019ab <mem_cpy>
c00049ee:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c00049f5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00049f9:	e8 36 eb ff ff       	call   c0003534 <follow_path>
c00049fe:	85 c0                	test   eax,eax
c0004a00:	75 20                	jne    c0004a22 <f_rename+0xe0>
c0004a02:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004a06:	b8 08 00 00 00       	mov    eax,0x8
c0004a0b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004a0f:	0f 85 c5 00 00 00    	jne    c0004ada <f_rename+0x198>
c0004a15:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004a19:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004a20:	eb 03                	jmp    c0004a25 <f_rename+0xe3>
c0004a22:	83 f8 04             	cmp    eax,0x4
c0004a25:	0f 85 af 00 00 00    	jne    c0004ada <f_rename+0x198>
c0004a2b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004a2f:	e8 94 eb ff ff       	call   c00035c8 <dir_register>
c0004a34:	85 c0                	test   eax,eax
c0004a36:	0f 85 9e 00 00 00    	jne    c0004ada <f_rename+0x198>
c0004a3c:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004a43:	b9 13 00 00 00       	mov    ecx,0x13
c0004a48:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004a4b:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004a4f:	e8 57 cf ff ff       	call   c00019ab <mem_cpy>
c0004a54:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004a58:	a8 10                	test   al,0x10
c0004a5a:	75 03                	jne    c0004a5f <f_rename+0x11d>
c0004a5c:	83 c8 20             	or     eax,0x20
c0004a5f:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004a62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a66:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004a6a:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004a6e:	74 54                	je     c0004ac4 <f_rename+0x182>
c0004a70:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004a74:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004a78:	74 4a                	je     c0004ac4 <f_rename+0x182>
c0004a7a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a7e:	89 da                	mov    edx,ebx
c0004a80:	8a 07                	mov    al,BYTE PTR [edi]
c0004a82:	e8 cb e2 ff ff       	call   c0002d52 <ld_clust.isra.0>
c0004a87:	89 c2                	mov    edx,eax
c0004a89:	89 f8                	mov    eax,edi
c0004a8b:	e8 35 d1 ff ff       	call   c0001bc5 <clst2sect>
c0004a90:	89 c2                	mov    edx,eax
c0004a92:	b8 02 00 00 00       	mov    eax,0x2
c0004a97:	85 d2                	test   edx,edx
c0004a99:	74 3f                	je     c0004ada <f_rename+0x198>
c0004a9b:	89 f8                	mov    eax,edi
c0004a9d:	e8 35 d4 ff ff       	call   c0001ed7 <move_window>
c0004aa2:	85 c0                	test   eax,eax
c0004aa4:	75 34                	jne    c0004ada <f_rename+0x198>
c0004aa6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004aaa:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004aae:	75 14                	jne    c0004ac4 <f_rename+0x182>
c0004ab0:	8d 50 54             	lea    edx,[eax+0x54]
c0004ab3:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004ab7:	e8 bf e2 ff ff       	call   c0002d7b <st_clust.isra.1>
c0004abc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ac0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ac4:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ac8:	e8 e6 e8 ff ff       	call   c00033b3 <dir_remove>
c0004acd:	85 c0                	test   eax,eax
c0004acf:	75 09                	jne    c0004ada <f_rename+0x198>
c0004ad1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ad5:	e8 3c de ff ff       	call   c0002916 <sync_fs>
c0004ada:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ade:	83 ec 0c             	sub    esp,0xc
c0004ae1:	56                   	push   esi
c0004ae2:	e8 25 0f 00 00       	call   c0005a0c <ff_memfree>
c0004ae7:	83 c4 10             	add    esp,0x10
c0004aea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aee:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004af4:	5b                   	pop    ebx
c0004af5:	5e                   	pop    esi
c0004af6:	5f                   	pop    edi
c0004af7:	c3                   	ret    

c0004af8 <f_chmod>:
c0004af8:	57                   	push   edi
c0004af9:	b9 02 00 00 00       	mov    ecx,0x2
c0004afe:	56                   	push   esi
c0004aff:	53                   	push   ebx
c0004b00:	83 ec 50             	sub    esp,0x50
c0004b03:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004b07:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004b0b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b0f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b13:	e8 12 d5 ff ff       	call   c000202a <mount_volume>
c0004b18:	85 c0                	test   eax,eax
c0004b1a:	75 7e                	jne    c0004b9a <f_chmod+0xa2>
c0004b1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b20:	83 ec 0c             	sub    esp,0xc
c0004b23:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b27:	68 00 02 00 00       	push   0x200
c0004b2c:	e8 c3 0e 00 00       	call   c00059f4 <ff_memalloc>
c0004b31:	83 c4 10             	add    esp,0x10
c0004b34:	89 c6                	mov    esi,eax
c0004b36:	b8 11 00 00 00       	mov    eax,0x11
c0004b3b:	85 f6                	test   esi,esi
c0004b3d:	74 5b                	je     c0004b9a <f_chmod+0xa2>
c0004b3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b43:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b47:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004b4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b4e:	e8 e1 e9 ff ff       	call   c0003534 <follow_path>
c0004b53:	85 c0                	test   eax,eax
c0004b55:	75 2f                	jne    c0004b86 <f_chmod+0x8e>
c0004b57:	b8 06 00 00 00       	mov    eax,0x6
c0004b5c:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004b61:	75 23                	jne    c0004b86 <f_chmod+0x8e>
c0004b63:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b67:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004b6a:	21 fb                	and    ebx,edi
c0004b6c:	83 e3 27             	and    ebx,0x27
c0004b6f:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004b72:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004b75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b79:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b81:	e8 90 dd ff ff       	call   c0002916 <sync_fs>
c0004b86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b8a:	83 ec 0c             	sub    esp,0xc
c0004b8d:	56                   	push   esi
c0004b8e:	e8 79 0e 00 00       	call   c0005a0c <ff_memfree>
c0004b93:	83 c4 10             	add    esp,0x10
c0004b96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b9a:	83 c4 50             	add    esp,0x50
c0004b9d:	5b                   	pop    ebx
c0004b9e:	5e                   	pop    esi
c0004b9f:	5f                   	pop    edi
c0004ba0:	c3                   	ret    

c0004ba1 <f_utime>:
c0004ba1:	56                   	push   esi
c0004ba2:	b9 02 00 00 00       	mov    ecx,0x2
c0004ba7:	53                   	push   ebx
c0004ba8:	83 ec 54             	sub    esp,0x54
c0004bab:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004baf:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004bb7:	e8 6e d4 ff ff       	call   c000202a <mount_volume>
c0004bbc:	85 c0                	test   eax,eax
c0004bbe:	0f 85 85 00 00 00    	jne    c0004c49 <f_utime+0xa8>
c0004bc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bc8:	83 ec 0c             	sub    esp,0xc
c0004bcb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004bcf:	68 00 02 00 00       	push   0x200
c0004bd4:	e8 1b 0e 00 00       	call   c00059f4 <ff_memalloc>
c0004bd9:	83 c4 10             	add    esp,0x10
c0004bdc:	89 c3                	mov    ebx,eax
c0004bde:	b8 11 00 00 00       	mov    eax,0x11
c0004be3:	85 db                	test   ebx,ebx
c0004be5:	74 62                	je     c0004c49 <f_utime+0xa8>
c0004be7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004beb:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004bef:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004bf2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bf6:	e8 39 e9 ff ff       	call   c0003534 <follow_path>
c0004bfb:	85 c0                	test   eax,eax
c0004bfd:	75 36                	jne    c0004c35 <f_utime+0x94>
c0004bff:	b8 06 00 00 00       	mov    eax,0x6
c0004c04:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004c09:	75 2a                	jne    c0004c35 <f_utime+0x94>
c0004c0b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004c0f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004c13:	c1 e2 10             	shl    edx,0x10
c0004c16:	09 c2                	or     edx,eax
c0004c18:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c1c:	83 c0 16             	add    eax,0x16
c0004c1f:	e8 84 cd ff ff       	call   c00019a8 <st_dword>
c0004c24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c28:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c30:	e8 e1 dc ff ff       	call   c0002916 <sync_fs>
c0004c35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c39:	83 ec 0c             	sub    esp,0xc
c0004c3c:	53                   	push   ebx
c0004c3d:	e8 ca 0d 00 00       	call   c0005a0c <ff_memfree>
c0004c42:	83 c4 10             	add    esp,0x10
c0004c45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c49:	83 c4 54             	add    esp,0x54
c0004c4c:	5b                   	pop    ebx
c0004c4d:	5e                   	pop    esi
c0004c4e:	c3                   	ret    

c0004c4f <f_getlabel>:
c0004c4f:	55                   	push   ebp
c0004c50:	31 c9                	xor    ecx,ecx
c0004c52:	57                   	push   edi
c0004c53:	56                   	push   esi
c0004c54:	53                   	push   ebx
c0004c55:	83 ec 5c             	sub    esp,0x5c
c0004c58:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c60:	e8 c5 d3 ff ff       	call   c000202a <mount_volume>
c0004c65:	89 c6                	mov    esi,eax
c0004c67:	85 c0                	test   eax,eax
c0004c69:	0f 85 27 01 00 00    	jne    c0004d96 <f_getlabel+0x147>
c0004c6f:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004c74:	0f 84 d1 00 00 00    	je     c0004d4b <f_getlabel+0xfc>
c0004c7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c7e:	31 d2                	xor    edx,edx
c0004c80:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004c84:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004c8c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c90:	e8 10 e2 ff ff       	call   c0002ea5 <dir_sdi>
c0004c95:	85 c0                	test   eax,eax
c0004c97:	0f 85 a2 00 00 00    	jne    c0004d3f <f_getlabel+0xf0>
c0004c9d:	ba 01 00 00 00       	mov    edx,0x1
c0004ca2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ca6:	e8 eb e5 ff ff       	call   c0003296 <dir_read>
c0004cab:	85 c0                	test   eax,eax
c0004cad:	0f 85 8c 00 00 00    	jne    c0004d3f <f_getlabel+0xf0>
c0004cb3:	31 db                	xor    ebx,ebx
c0004cb5:	31 c9                	xor    ecx,ecx
c0004cb7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004cbb:	8d 79 01             	lea    edi,[ecx+0x1]
c0004cbe:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004cc3:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004cc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ccc:	e8 2f cd ff ff       	call   c0001a00 <dbc_1st>
c0004cd1:	85 c0                	test   eax,eax
c0004cd3:	74 16                	je     c0004ceb <f_getlabel+0x9c>
c0004cd5:	83 ff 0b             	cmp    edi,0xb
c0004cd8:	74 11                	je     c0004ceb <f_getlabel+0x9c>
c0004cda:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004cdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ce3:	8d 79 02             	lea    edi,[ecx+0x2]
c0004ce6:	c1 e0 08             	shl    eax,0x8
c0004ce9:	09 c2                	or     edx,eax
c0004ceb:	0f b7 d2             	movzx  edx,dx
c0004cee:	50                   	push   eax
c0004cef:	50                   	push   eax
c0004cf0:	68 b5 01 00 00       	push   0x1b5
c0004cf5:	52                   	push   edx
c0004cf6:	e8 c1 0d 00 00       	call   c0005abc <ff_oem2uni>
c0004cfb:	83 c4 10             	add    esp,0x10
c0004cfe:	66 85 c0             	test   ax,ax
c0004d01:	74 25                	je     c0004d28 <f_getlabel+0xd9>
c0004d03:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004d07:	0f b7 c0             	movzx  eax,ax
c0004d0a:	01 da                	add    edx,ebx
c0004d0c:	b9 04 00 00 00       	mov    ecx,0x4
c0004d11:	e8 b6 cd ff ff       	call   c0001acc <put_utf>
c0004d16:	84 c0                	test   al,al
c0004d18:	74 0e                	je     c0004d28 <f_getlabel+0xd9>
c0004d1a:	0f b6 c0             	movzx  eax,al
c0004d1d:	01 c3                	add    ebx,eax
c0004d1f:	83 ff 0b             	cmp    edi,0xb
c0004d22:	74 06                	je     c0004d2a <f_getlabel+0xdb>
c0004d24:	89 f9                	mov    ecx,edi
c0004d26:	eb 8f                	jmp    c0004cb7 <f_getlabel+0x68>
c0004d28:	31 db                	xor    ebx,ebx
c0004d2a:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004d2e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004d31:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004d35:	74 14                	je     c0004d4b <f_getlabel+0xfc>
c0004d37:	4b                   	dec    ebx
c0004d38:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004d3b:	74 f1                	je     c0004d2e <f_getlabel+0xdf>
c0004d3d:	eb 0c                	jmp    c0004d4b <f_getlabel+0xfc>
c0004d3f:	83 f8 04             	cmp    eax,0x4
c0004d42:	75 50                	jne    c0004d94 <f_getlabel+0x145>
c0004d44:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004d48:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d4b:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004d50:	74 44                	je     c0004d96 <f_getlabel+0x147>
c0004d52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d56:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004d59:	e8 79 d1 ff ff       	call   c0001ed7 <move_window>
c0004d5e:	89 c6                	mov    esi,eax
c0004d60:	85 c0                	test   eax,eax
c0004d62:	75 32                	jne    c0004d96 <f_getlabel+0x147>
c0004d64:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004d68:	b8 43 00 00 00       	mov    eax,0x43
c0004d6d:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004d6f:	80 f9 03             	cmp    cl,0x3
c0004d72:	74 0f                	je     c0004d83 <f_getlabel+0x134>
c0004d74:	31 c0                	xor    eax,eax
c0004d76:	80 f9 04             	cmp    cl,0x4
c0004d79:	0f 94 c0             	sete   al
c0004d7c:	48                   	dec    eax
c0004d7d:	83 e0 c3             	and    eax,0xffffffc3
c0004d80:	83 c0 64             	add    eax,0x64
c0004d83:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004d87:	e8 00 cc ff ff       	call   c000198c <ld_dword>
c0004d8c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004d90:	89 07                	mov    DWORD PTR [edi],eax
c0004d92:	eb 02                	jmp    c0004d96 <f_getlabel+0x147>
c0004d94:	89 c6                	mov    esi,eax
c0004d96:	83 c4 5c             	add    esp,0x5c
c0004d99:	89 f0                	mov    eax,esi
c0004d9b:	5b                   	pop    ebx
c0004d9c:	5e                   	pop    esi
c0004d9d:	5f                   	pop    edi
c0004d9e:	5d                   	pop    ebp
c0004d9f:	c3                   	ret    

c0004da0 <f_setlabel>:
c0004da0:	56                   	push   esi
c0004da1:	b9 02 00 00 00       	mov    ecx,0x2
c0004da6:	53                   	push   ebx
c0004da7:	83 ec 54             	sub    esp,0x54
c0004daa:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004dae:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004db2:	e8 73 d2 ff ff       	call   c000202a <mount_volume>
c0004db7:	89 c6                	mov    esi,eax
c0004db9:	85 c0                	test   eax,eax
c0004dbb:	0f 85 67 01 00 00    	jne    c0004f28 <f_setlabel+0x188>
c0004dc1:	b9 0b 00 00 00       	mov    ecx,0xb
c0004dc6:	ba 20 00 00 00       	mov    edx,0x20
c0004dcb:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004dcf:	31 db                	xor    ebx,ebx
c0004dd1:	e8 ea cb ff ff       	call   c00019c0 <mem_set>
c0004dd6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004dda:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004ddd:	76 5b                	jbe    c0004e3a <f_setlabel+0x9a>
c0004ddf:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004de3:	e8 1e cc ff ff       	call   c0001a06 <tchar2uni>
c0004de8:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ded:	76 0a                	jbe    c0004df9 <f_setlabel+0x59>
c0004def:	be 06 00 00 00       	mov    esi,0x6
c0004df4:	e9 2f 01 00 00       	jmp    c0004f28 <f_setlabel+0x188>
c0004df9:	83 ec 0c             	sub    esp,0xc
c0004dfc:	50                   	push   eax
c0004dfd:	e8 2e 0d 00 00       	call   c0005b30 <ff_wtoupper>
c0004e02:	5a                   	pop    edx
c0004e03:	59                   	pop    ecx
c0004e04:	68 b5 01 00 00       	push   0x1b5
c0004e09:	50                   	push   eax
c0004e0a:	e8 15 0c 00 00       	call   c0005a24 <ff_uni2oem>
c0004e0f:	83 c4 10             	add    esp,0x10
c0004e12:	89 c6                	mov    esi,eax
c0004e14:	66 85 c0             	test   ax,ax
c0004e17:	74 d6                	je     c0004def <f_setlabel+0x4f>
c0004e19:	0f b7 d0             	movzx  edx,ax
c0004e1c:	b8 90 d7 01 c0       	mov    eax,0xc001d790
c0004e21:	e8 c8 cb ff ff       	call   c00019ee <chk_chr>
c0004e26:	85 c0                	test   eax,eax
c0004e28:	75 c5                	jne    c0004def <f_setlabel+0x4f>
c0004e2a:	66 81 fe ff 00       	cmp    si,0xff
c0004e2f:	0f 87 c9 00 00 00    	ja     c0004efe <f_setlabel+0x15e>
c0004e35:	e9 e4 00 00 00       	jmp    c0004f1e <f_setlabel+0x17e>
c0004e3a:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0004e3f:	74 ae                	je     c0004def <f_setlabel+0x4f>
c0004e41:	85 db                	test   ebx,ebx
c0004e43:	74 0e                	je     c0004e53 <f_setlabel+0xb3>
c0004e45:	8d 43 ff             	lea    eax,[ebx-0x1]
c0004e48:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0004e4d:	75 04                	jne    c0004e53 <f_setlabel+0xb3>
c0004e4f:	89 c3                	mov    ebx,eax
c0004e51:	eb ee                	jmp    c0004e41 <f_setlabel+0xa1>
c0004e53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004e57:	31 d2                	xor    edx,edx
c0004e59:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e5d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e65:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e69:	e8 37 e0 ff ff       	call   c0002ea5 <dir_sdi>
c0004e6e:	89 c6                	mov    esi,eax
c0004e70:	85 c0                	test   eax,eax
c0004e72:	0f 85 b0 00 00 00    	jne    c0004f28 <f_setlabel+0x188>
c0004e78:	ba 01 00 00 00       	mov    edx,0x1
c0004e7d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e81:	e8 10 e4 ff ff       	call   c0003296 <dir_read>
c0004e86:	85 c0                	test   eax,eax
c0004e88:	75 18                	jne    c0004ea2 <f_setlabel+0x102>
c0004e8a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e8e:	85 db                	test   ebx,ebx
c0004e90:	74 0b                	je     c0004e9d <f_setlabel+0xfd>
c0004e92:	b9 0b 00 00 00       	mov    ecx,0xb
c0004e97:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0004e9b:	eb 47                	jmp    c0004ee4 <f_setlabel+0x144>
c0004e9d:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0004ea0:	eb 47                	jmp    c0004ee9 <f_setlabel+0x149>
c0004ea2:	83 f8 04             	cmp    eax,0x4
c0004ea5:	75 53                	jne    c0004efa <f_setlabel+0x15a>
c0004ea7:	85 db                	test   ebx,ebx
c0004ea9:	74 7d                	je     c0004f28 <f_setlabel+0x188>
c0004eab:	ba 01 00 00 00       	mov    edx,0x1
c0004eb0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eb4:	e8 7c e3 ff ff       	call   c0003235 <dir_alloc>
c0004eb9:	89 c6                	mov    esi,eax
c0004ebb:	85 c0                	test   eax,eax
c0004ebd:	75 69                	jne    c0004f28 <f_setlabel+0x188>
c0004ebf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ec4:	31 d2                	xor    edx,edx
c0004ec6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004eca:	e8 f1 ca ff ff       	call   c00019c0 <mem_set>
c0004ecf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ed3:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ed8:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0004edc:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	e8 c2 ca ff ff       	call   c00019ab <mem_cpy>
c0004ee9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004eed:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ef1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004ef5:	e8 1c da ff ff       	call   c0002916 <sync_fs>
c0004efa:	89 c6                	mov    esi,eax
c0004efc:	eb 2a                	jmp    c0004f28 <f_setlabel+0x188>
c0004efe:	83 fb 09             	cmp    ebx,0x9
c0004f01:	0f 87 e8 fe ff ff    	ja     c0004def <f_setlabel+0x4f>
c0004f07:	89 f0                	mov    eax,esi
c0004f09:	66 c1 e8 08          	shr    ax,0x8
c0004f0d:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0004f11:	43                   	inc    ebx
c0004f12:	89 f0                	mov    eax,esi
c0004f14:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0004f18:	43                   	inc    ebx
c0004f19:	e9 b8 fe ff ff       	jmp    c0004dd6 <f_setlabel+0x36>
c0004f1e:	83 fb 0a             	cmp    ebx,0xa
c0004f21:	76 ef                	jbe    c0004f12 <f_setlabel+0x172>
c0004f23:	e9 c7 fe ff ff       	jmp    c0004def <f_setlabel+0x4f>
c0004f28:	89 f0                	mov    eax,esi
c0004f2a:	83 c4 54             	add    esp,0x54
c0004f2d:	5b                   	pop    ebx
c0004f2e:	5e                   	pop    esi
c0004f2f:	c3                   	ret    

c0004f30 <f_expand>:
c0004f30:	55                   	push   ebp
c0004f31:	57                   	push   edi
c0004f32:	56                   	push   esi
c0004f33:	53                   	push   ebx
c0004f34:	83 ec 2c             	sub    esp,0x2c
c0004f37:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004f3b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004f3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f43:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f47:	89 d8                	mov    eax,ebx
c0004f49:	e8 df ce ff ff       	call   c0001e2d <validate>
c0004f4e:	89 c6                	mov    esi,eax
c0004f50:	85 c0                	test   eax,eax
c0004f52:	0f 85 2e 01 00 00    	jne    c0005086 <f_expand+0x156>
c0004f58:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004f5c:	85 f6                	test   esi,esi
c0004f5e:	0f 85 22 01 00 00    	jne    c0005086 <f_expand+0x156>
c0004f64:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0004f69:	75 0a                	jne    c0004f75 <f_expand+0x45>
c0004f6b:	be 07 00 00 00       	mov    esi,0x7
c0004f70:	e9 11 01 00 00       	jmp    c0005086 <f_expand+0x156>
c0004f75:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0004f79:	75 f0                	jne    c0004f6b <f_expand+0x3b>
c0004f7b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004f7f:	74 ea                	je     c0004f6b <f_expand+0x3b>
c0004f81:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004f85:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0004f89:	c1 e1 09             	shl    ecx,0x9
c0004f8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004f8f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0004f93:	0f 95 c0             	setne  al
c0004f96:	31 d2                	xor    edx,edx
c0004f98:	0f b6 c0             	movzx  eax,al
c0004f9b:	89 c7                	mov    edi,eax
c0004f9d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004fa1:	f7 f1                	div    ecx
c0004fa3:	01 f8                	add    eax,edi
c0004fa5:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0004fa8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004fac:	83 ff 01             	cmp    edi,0x1
c0004faf:	76 05                	jbe    c0004fb6 <f_expand+0x86>
c0004fb1:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0004fb4:	77 05                	ja     c0004fbb <f_expand+0x8b>
c0004fb6:	bf 02 00 00 00       	mov    edi,0x2
c0004fbb:	89 3c 24             	mov    DWORD PTR [esp],edi
c0004fbe:	89 fd                	mov    ebp,edi
c0004fc0:	31 c9                	xor    ecx,ecx
c0004fc2:	89 ea                	mov    edx,ebp
c0004fc4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004fc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004fca:	45                   	inc    ebp
c0004fcb:	e8 d3 dd ff ff       	call   c0002da3 <get_fat.isra.2>
c0004fd0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004fd4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004fd8:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0004fdb:	77 05                	ja     c0004fe2 <f_expand+0xb2>
c0004fdd:	bd 02 00 00 00       	mov    ebp,0x2
c0004fe2:	83 f8 01             	cmp    eax,0x1
c0004fe5:	74 20                	je     c0005007 <f_expand+0xd7>
c0004fe7:	83 f8 ff             	cmp    eax,0xffffffff
c0004fea:	74 22                	je     c000500e <f_expand+0xde>
c0004fec:	85 c0                	test   eax,eax
c0004fee:	75 09                	jne    c0004ff9 <f_expand+0xc9>
c0004ff0:	41                   	inc    ecx
c0004ff1:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0004ff5:	75 07                	jne    c0004ffe <f_expand+0xce>
c0004ff7:	eb 1c                	jmp    c0005015 <f_expand+0xe5>
c0004ff9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0004ffc:	31 c9                	xor    ecx,ecx
c0004ffe:	39 fd                	cmp    ebp,edi
c0005000:	75 c0                	jne    c0004fc2 <f_expand+0x92>
c0005002:	e9 64 ff ff ff       	jmp    c0004f6b <f_expand+0x3b>
c0005007:	be 02 00 00 00       	mov    esi,0x2
c000500c:	eb 78                	jmp    c0005086 <f_expand+0x156>
c000500e:	be 01 00 00 00       	mov    esi,0x1
c0005013:	eb 71                	jmp    c0005086 <f_expand+0x156>
c0005015:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000501a:	74 2b                	je     c0005047 <f_expand+0x117>
c000501c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000501f:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005023:	85 ed                	test   ebp,ebp
c0005025:	74 24                	je     c000504b <f_expand+0x11b>
c0005027:	83 c9 ff             	or     ecx,0xffffffff
c000502a:	83 fd 01             	cmp    ebp,0x1
c000502d:	74 03                	je     c0005032 <f_expand+0x102>
c000502f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005032:	89 fa                	mov    edx,edi
c0005034:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005038:	e8 ef d2 ff ff       	call   c000232c <put_fat>
c000503d:	85 c0                	test   eax,eax
c000503f:	75 43                	jne    c0005084 <f_expand+0x154>
c0005041:	89 f8                	mov    eax,edi
c0005043:	4d                   	dec    ebp
c0005044:	47                   	inc    edi
c0005045:	eb dc                	jmp    c0005023 <f_expand+0xf3>
c0005047:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000504a:	48                   	dec    eax
c000504b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000504f:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005054:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005057:	74 2d                	je     c0005086 <f_expand+0x156>
c0005059:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000505d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005060:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005063:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005067:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000506a:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000506d:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005070:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005073:	39 c8                	cmp    eax,ecx
c0005075:	77 0f                	ja     c0005086 <f_expand+0x156>
c0005077:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000507b:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c000507f:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005082:	eb 02                	jmp    c0005086 <f_expand+0x156>
c0005084:	89 c6                	mov    esi,eax
c0005086:	83 c4 2c             	add    esp,0x2c
c0005089:	89 f0                	mov    eax,esi
c000508b:	5b                   	pop    ebx
c000508c:	5e                   	pop    esi
c000508d:	5f                   	pop    edi
c000508e:	5d                   	pop    ebp
c000508f:	c3                   	ret    

c0005090 <f_forward>:
c0005090:	55                   	push   ebp
c0005091:	57                   	push   edi
c0005092:	56                   	push   esi
c0005093:	53                   	push   ebx
c0005094:	83 ec 2c             	sub    esp,0x2c
c0005097:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000509b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000509f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00050a5:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00050a9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00050ad:	89 d8                	mov    eax,ebx
c00050af:	e8 79 cd ff ff       	call   c0001e2d <validate>
c00050b4:	89 c5                	mov    ebp,eax
c00050b6:	85 c0                	test   eax,eax
c00050b8:	0f 85 56 01 00 00    	jne    c0005214 <f_forward+0x184>
c00050be:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00050c2:	85 ed                	test   ebp,ebp
c00050c4:	0f 85 4a 01 00 00    	jne    c0005214 <f_forward+0x184>
c00050ca:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c00050ce:	0f 84 3b 01 00 00    	je     c000520f <f_forward+0x17f>
c00050d4:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00050d7:	2b 7b 14             	sub    edi,DWORD PTR [ebx+0x14]
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	0f 86 a0 00 00 00    	jbe    c0005182 <f_forward+0xf2>
c00050e2:	89 f7                	mov    edi,esi
c00050e4:	e9 99 00 00 00       	jmp    c0005182 <f_forward+0xf2>
c00050e9:	50                   	push   eax
c00050ea:	50                   	push   eax
c00050eb:	6a 00                	push   0x0
c00050ed:	6a 00                	push   0x0
c00050ef:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00050f3:	83 c4 10             	add    esp,0x10
c00050f6:	85 c0                	test   eax,eax
c00050f8:	0f 84 16 01 00 00    	je     c0005214 <f_forward+0x184>
c00050fe:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0005101:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005105:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0005109:	89 d0                	mov    eax,edx
c000510b:	4e                   	dec    esi
c000510c:	c1 e8 09             	shr    eax,0x9
c000510f:	21 c6                	and    esi,eax
c0005111:	89 d0                	mov    eax,edx
c0005113:	25 ff 01 00 00       	and    eax,0x1ff
c0005118:	09 f0                	or     eax,esi
c000511a:	74 73                	je     c000518f <f_forward+0xff>
c000511c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005120:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0005123:	89 c8                	mov    eax,ecx
c0005125:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005129:	e8 97 ca ff ff       	call   c0001bc5 <clst2sect>
c000512e:	85 c0                	test   eax,eax
c0005130:	74 75                	je     c00051a7 <f_forward+0x117>
c0005132:	01 f0                	add    eax,esi
c0005134:	8d 73 2c             	lea    esi,[ebx+0x2c]
c0005137:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000513b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000513e:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005142:	0f 85 82 00 00 00    	jne    c00051ca <f_forward+0x13a>
c0005148:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000514c:	ba 00 02 00 00       	mov    edx,0x200
c0005151:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005154:	89 f9                	mov    ecx,edi
c0005156:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0005159:	25 ff 01 00 00       	and    eax,0x1ff
c000515e:	29 c2                	sub    edx,eax
c0005160:	39 d7                	cmp    edi,edx
c0005162:	76 02                	jbe    c0005166 <f_forward+0xd6>
c0005164:	89 d1                	mov    ecx,edx
c0005166:	01 f0                	add    eax,esi
c0005168:	52                   	push   edx
c0005169:	52                   	push   edx
c000516a:	51                   	push   ecx
c000516b:	50                   	push   eax
c000516c:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0005170:	83 c4 10             	add    esp,0x10
c0005173:	85 c0                	test   eax,eax
c0005175:	74 30                	je     c00051a7 <f_forward+0x117>
c0005177:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000517a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000517e:	29 c7                	sub    edi,eax
c0005180:	01 01                	add    DWORD PTR [ecx],eax
c0005182:	85 ff                	test   edi,edi
c0005184:	0f 85 5f ff ff ff    	jne    c00050e9 <f_forward+0x59>
c000518a:	e9 85 00 00 00       	jmp    c0005214 <f_forward+0x184>
c000518f:	85 d2                	test   edx,edx
c0005191:	75 05                	jne    c0005198 <f_forward+0x108>
c0005193:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005196:	eb 0a                	jmp    c00051a2 <f_forward+0x112>
c0005198:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000519b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000519d:	e8 01 dc ff ff       	call   c0002da3 <get_fat.isra.2>
c00051a2:	83 f8 01             	cmp    eax,0x1
c00051a5:	77 0b                	ja     c00051b2 <f_forward+0x122>
c00051a7:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00051ab:	bd 02 00 00 00       	mov    ebp,0x2
c00051b0:	eb 62                	jmp    c0005214 <f_forward+0x184>
c00051b2:	83 f8 ff             	cmp    eax,0xffffffff
c00051b5:	75 0b                	jne    c00051c2 <f_forward+0x132>
c00051b7:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00051bb:	bd 01 00 00 00       	mov    ebp,0x1
c00051c0:	eb 52                	jmp    c0005214 <f_forward+0x184>
c00051c2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00051c5:	e9 52 ff ff ff       	jmp    c000511c <f_forward+0x8c>
c00051ca:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c00051ce:	79 1d                	jns    c00051ed <f_forward+0x15d>
c00051d0:	6a 01                	push   0x1
c00051d2:	50                   	push   eax
c00051d3:	56                   	push   esi
c00051d4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00051d8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051dc:	50                   	push   eax
c00051dd:	e8 68 c7 ff ff       	call   c000194a <disk_write>
c00051e2:	83 c4 10             	add    esp,0x10
c00051e5:	85 c0                	test   eax,eax
c00051e7:	75 ce                	jne    c00051b7 <f_forward+0x127>
c00051e9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00051ed:	6a 01                	push   0x1
c00051ef:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00051f3:	56                   	push   esi
c00051f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00051f8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00051fc:	50                   	push   eax
c00051fd:	e8 32 c7 ff ff       	call   c0001934 <disk_read>
c0005202:	83 c4 10             	add    esp,0x10
c0005205:	85 c0                	test   eax,eax
c0005207:	0f 84 3b ff ff ff    	je     c0005148 <f_forward+0xb8>
c000520d:	eb a8                	jmp    c00051b7 <f_forward+0x127>
c000520f:	bd 07 00 00 00       	mov    ebp,0x7
c0005214:	83 c4 2c             	add    esp,0x2c
c0005217:	89 e8                	mov    eax,ebp
c0005219:	5b                   	pop    ebx
c000521a:	5e                   	pop    esi
c000521b:	5f                   	pop    edi
c000521c:	5d                   	pop    ebp
c000521d:	c3                   	ret    

c000521e <f_mkfs>:
c000521e:	55                   	push   ebp
c000521f:	57                   	push   edi
c0005220:	bf 0b 00 00 00       	mov    edi,0xb
c0005225:	56                   	push   esi
c0005226:	53                   	push   ebx
c0005227:	83 ec 4c             	sub    esp,0x4c
c000522a:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c000522e:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c0005232:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005236:	e8 a5 cb ff ff       	call   c0001de0 <get_ldnumber>
c000523b:	85 c0                	test   eax,eax
c000523d:	0f 88 a6 07 00 00    	js     c00059e9 <f_mkfs+0x7cb>
c0005243:	8b 14 85 40 07 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdf8c0]
c000524a:	85 d2                	test   edx,edx
c000524c:	74 03                	je     c0005251 <f_mkfs+0x33>
c000524e:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005251:	85 db                	test   ebx,ebx
c0005253:	75 05                	jne    c000525a <f_mkfs+0x3c>
c0005255:	bb 80 d7 01 c0       	mov    ebx,0xc001d780
c000525a:	83 ec 0c             	sub    esp,0xc
c000525d:	0f b6 c0             	movzx  eax,al
c0005260:	bf 03 00 00 00       	mov    edi,0x3
c0005265:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005269:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000526d:	e8 bf c6 ff ff       	call   c0001931 <disk_initialize>
c0005272:	83 c4 10             	add    esp,0x10
c0005275:	a8 01                	test   al,0x1
c0005277:	0f 85 6c 07 00 00    	jne    c00059e9 <f_mkfs+0x7cb>
c000527d:	bf 0a 00 00 00       	mov    edi,0xa
c0005282:	a8 04                	test   al,0x4
c0005284:	0f 85 5f 07 00 00    	jne    c00059e9 <f_mkfs+0x7cb>
c000528a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000528d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005291:	85 c0                	test   eax,eax
c0005293:	75 20                	jne    c00052b5 <f_mkfs+0x97>
c0005295:	51                   	push   ecx
c0005296:	8d 44 24 34          	lea    eax,[esp+0x34]
c000529a:	50                   	push   eax
c000529b:	6a 03                	push   0x3
c000529d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052a1:	e8 ba c6 ff ff       	call   c0001960 <disk_ioctl>
c00052a6:	83 c4 10             	add    esp,0x10
c00052a9:	85 c0                	test   eax,eax
c00052ab:	74 08                	je     c00052b5 <f_mkfs+0x97>
c00052ad:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c00052b5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00052b9:	8d 42 ff             	lea    eax,[edx-0x1]
c00052bc:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00052c1:	77 04                	ja     c00052c7 <f_mkfs+0xa9>
c00052c3:	85 c2                	test   edx,eax
c00052c5:	74 08                	je     c00052cf <f_mkfs+0xb1>
c00052c7:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c00052cf:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00052d2:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00052d6:	48                   	dec    eax
c00052d7:	3c 01                	cmp    al,0x1
c00052d9:	76 05                	jbe    c00052e0 <f_mkfs+0xc2>
c00052db:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c00052e0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00052e7:	48                   	dec    eax
c00052e8:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00052ed:	77 07                	ja     c00052f6 <f_mkfs+0xd8>
c00052ef:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c00052f4:	74 08                	je     c00052fe <f_mkfs+0xe0>
c00052f6:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c00052fe:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005301:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005307:	77 07                	ja     c0005310 <f_mkfs+0xf2>
c0005309:	8d 47 ff             	lea    eax,[edi-0x1]
c000530c:	85 f8                	test   eax,edi
c000530e:	74 02                	je     c0005312 <f_mkfs+0xf4>
c0005310:	31 ff                	xor    edi,edi
c0005312:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c000531a:	77 0a                	ja     c0005326 <f_mkfs+0x108>
c000531c:	bf 11 00 00 00       	mov    edi,0x11
c0005321:	e9 c3 06 00 00       	jmp    c00059e9 <f_mkfs+0x7cb>
c0005326:	8a 1b                	mov    bl,BYTE PTR [ebx]
c0005328:	89 ee                	mov    esi,ebp
c000532a:	85 ed                	test   ebp,ebp
c000532c:	75 1b                	jne    c0005349 <f_mkfs+0x12b>
c000532e:	83 ec 0c             	sub    esp,0xc
c0005331:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0005335:	25 00 fe ff ff       	and    eax,0xfffffe00
c000533a:	50                   	push   eax
c000533b:	e8 b4 06 00 00       	call   c00059f4 <ff_memalloc>
c0005340:	83 c4 10             	add    esp,0x10
c0005343:	89 c6                	mov    esi,eax
c0005345:	85 c0                	test   eax,eax
c0005347:	74 d3                	je     c000531c <f_mkfs+0xfe>
c0005349:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0005351:	52                   	push   edx
c0005352:	8d 44 24 38          	lea    eax,[esp+0x38]
c0005356:	50                   	push   eax
c0005357:	6a 01                	push   0x1
c0005359:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000535d:	e8 fe c5 ff ff       	call   c0001960 <disk_ioctl>
c0005362:	83 c4 10             	add    esp,0x10
c0005365:	85 c0                	test   eax,eax
c0005367:	0f 85 25 06 00 00    	jne    c0005992 <f_mkfs+0x774>
c000536d:	88 d8                	mov    al,bl
c000536f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0005377:	24 08                	and    al,0x8
c0005379:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000537d:	75 18                	jne    c0005397 <f_mkfs+0x179>
c000537f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005383:	83 f8 3f             	cmp    eax,0x3f
c0005386:	76 0f                	jbe    c0005397 <f_mkfs+0x179>
c0005388:	83 e8 3f             	sub    eax,0x3f
c000538b:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c0005393:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005397:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000539b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000539f:	83 f8 7f             	cmp    eax,0x7f
c00053a2:	0f 86 52 02 00 00    	jbe    c00055fa <f_mkfs+0x3dc>
c00053a8:	b9 80 00 00 00       	mov    ecx,0x80
c00053ad:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00053b3:	77 05                	ja     c00053ba <f_mkfs+0x19c>
c00053b5:	89 f9                	mov    ecx,edi
c00053b7:	c1 e9 09             	shr    ecx,0x9
c00053ba:	88 d8                	mov    al,bl
c00053bc:	83 e0 01             	and    eax,0x1
c00053bf:	80 e3 02             	and    bl,0x2
c00053c2:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c00053c6:	74 0a                	je     c00053d2 <f_mkfs+0x1b4>
c00053c8:	84 c0                	test   al,al
c00053ca:	0f 84 4c 01 00 00    	je     c000551c <f_mkfs+0x2fe>
c00053d0:	eb 38                	jmp    c000540a <f_mkfs+0x1ec>
c00053d2:	bf 13 00 00 00       	mov    edi,0x13
c00053d7:	84 c0                	test   al,al
c00053d9:	75 2f                	jne    c000540a <f_mkfs+0x1ec>
c00053db:	e9 c9 05 00 00       	jmp    c00059a9 <f_mkfs+0x78b>
c00053e0:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00053e5:	0f 85 08 02 00 00    	jne    c00055f3 <f_mkfs+0x3d5>
c00053eb:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00053f0:	0f 86 e1 01 00 00    	jbe    c00055d7 <f_mkfs+0x3b9>
c00053f6:	85 c9                	test   ecx,ecx
c00053f8:	0f 85 bd 05 00 00    	jne    c00059bb <f_mkfs+0x79d>
c00053fe:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005401:	83 f9 40             	cmp    ecx,0x40
c0005404:	0f 87 c1 05 00 00    	ja     c00059cb <f_mkfs+0x7ad>
c000540a:	89 cf                	mov    edi,ecx
c000540c:	85 c9                	test   ecx,ecx
c000540e:	75 1d                	jne    c000542d <f_mkfs+0x20f>
c0005410:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0005414:	ba 60 d7 01 c0       	mov    edx,0xc001d760
c0005419:	c1 eb 0c             	shr    ebx,0xc
c000541c:	bf 01 00 00 00       	mov    edi,0x1
c0005421:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0005424:	66 85 c0             	test   ax,ax
c0005427:	0f 85 5f 01 00 00    	jne    c000558c <f_mkfs+0x36e>
c000542d:	31 d2                	xor    edx,edx
c000542f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005433:	f7 f7                	div    edi
c0005435:	3d f5 0f 00 00       	cmp    eax,0xff5
c000543a:	0f 86 5e 01 00 00    	jbe    c000559e <f_mkfs+0x380>
c0005440:	83 c0 02             	add    eax,0x2
c0005443:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c0005448:	01 c0                	add    eax,eax
c000544a:	05 ff 01 00 00       	add    eax,0x1ff
c000544f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005457:	c1 e8 09             	shr    eax,0x9
c000545a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000545e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005462:	c1 e0 05             	shl    eax,0x5
c0005465:	c1 e8 09             	shr    eax,0x9
c0005468:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000546c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0005471:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005475:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005479:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c000547d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005485:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c000548a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000548e:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005492:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005496:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000549a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000549e:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c00054a2:	f7 d8                	neg    eax
c00054a4:	21 c3                	and    ebx,eax
c00054a6:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c00054aa:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00054af:	0f 85 fc 00 00 00    	jne    c00055b1 <f_mkfs+0x393>
c00054b5:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c00054b9:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c00054bd:	89 f8                	mov    eax,edi
c00054bf:	c1 e0 04             	shl    eax,0x4
c00054c2:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00054c6:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00054ca:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00054ce:	0f 82 26 01 00 00    	jb     c00055fa <f_mkfs+0x3dc>
c00054d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00054dc:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00054e0:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c00054e5:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c00054e9:	29 d0                	sub    eax,edx
c00054eb:	31 d2                	xor    edx,edx
c00054ed:	f7 f7                	div    edi
c00054ef:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00054f4:	89 c3                	mov    ebx,eax
c00054f6:	0f 85 e4 fe ff ff    	jne    c00053e0 <f_mkfs+0x1c2>
c00054fc:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005501:	0f 87 02 01 00 00    	ja     c0005609 <f_mkfs+0x3eb>
c0005507:	85 c9                	test   ecx,ecx
c0005509:	0f 85 eb 00 00 00    	jne    c00055fa <f_mkfs+0x3dc>
c000550f:	83 ff 01             	cmp    edi,0x1
c0005512:	0f 86 e2 00 00 00    	jbe    c00055fa <f_mkfs+0x3dc>
c0005518:	89 f9                	mov    ecx,edi
c000551a:	d1 e9                	shr    ecx,1
c000551c:	89 cb                	mov    ebx,ecx
c000551e:	85 c9                	test   ecx,ecx
c0005520:	75 26                	jne    c0005548 <f_mkfs+0x32a>
c0005522:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0005526:	ba 70 d7 01 c0       	mov    edx,0xc001d770
c000552b:	c1 eb 11             	shr    ebx,0x11
c000552e:	b9 01 00 00 00       	mov    ecx,0x1
c0005533:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0005536:	66 85 c0             	test   ax,ax
c0005539:	74 0b                	je     c0005546 <f_mkfs+0x328>
c000553b:	83 c2 02             	add    edx,0x2
c000553e:	39 d8                	cmp    eax,ebx
c0005540:	77 04                	ja     c0005546 <f_mkfs+0x328>
c0005542:	01 c9                	add    ecx,ecx
c0005544:	eb ed                	jmp    c0005533 <f_mkfs+0x315>
c0005546:	31 db                	xor    ebx,ebx
c0005548:	31 d2                	xor    edx,edx
c000554a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554e:	f7 f1                	div    ecx
c0005550:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005557:	2d f6 ff 00 00       	sub    eax,0xfff6
c000555c:	c1 ea 09             	shr    edx,0x9
c000555f:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005564:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0005568:	0f 87 8c 00 00 00    	ja     c00055fa <f_mkfs+0x3dc>
c000556e:	89 cf                	mov    edi,ecx
c0005570:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005578:	89 d9                	mov    ecx,ebx
c000557a:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c0005582:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c0005587:	e9 e0 fe ff ff       	jmp    c000546c <f_mkfs+0x24e>
c000558c:	83 c2 02             	add    edx,0x2
c000558f:	39 d8                	cmp    eax,ebx
c0005591:	0f 87 96 fe ff ff    	ja     c000542d <f_mkfs+0x20f>
c0005597:	01 ff                	add    edi,edi
c0005599:	e9 83 fe ff ff       	jmp    c0005421 <f_mkfs+0x203>
c000559e:	8d 04 40             	lea    eax,[eax+eax*2]
c00055a1:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00055a6:	40                   	inc    eax
c00055a7:	d1 e8                	shr    eax,1
c00055a9:	83 c0 03             	add    eax,0x3
c00055ac:	e9 99 fe ff ff       	jmp    c000544a <f_mkfs+0x22c>
c00055b1:	31 d2                	xor    edx,edx
c00055b3:	89 d8                	mov    eax,ebx
c00055b5:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c00055b9:	85 d2                	test   edx,edx
c00055bb:	74 09                	je     c00055c6 <f_mkfs+0x3a8>
c00055bd:	4b                   	dec    ebx
c00055be:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00055c2:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00055c6:	89 d8                	mov    eax,ebx
c00055c8:	31 d2                	xor    edx,edx
c00055ca:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c00055ce:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c00055d2:	e9 e6 fe ff ff       	jmp    c00054bd <f_mkfs+0x29f>
c00055d7:	3d f5 0f 00 00       	cmp    eax,0xff5
c00055dc:	77 2b                	ja     c0005609 <f_mkfs+0x3eb>
c00055de:	85 c9                	test   ecx,ecx
c00055e0:	75 18                	jne    c00055fa <f_mkfs+0x3dc>
c00055e2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00055e5:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00055eb:	0f 86 19 fe ff ff    	jbe    c000540a <f_mkfs+0x1ec>
c00055f1:	eb 07                	jmp    c00055fa <f_mkfs+0x3dc>
c00055f3:	3d f5 0f 00 00       	cmp    eax,0xff5
c00055f8:	76 0a                	jbe    c0005604 <f_mkfs+0x3e6>
c00055fa:	bf 0e 00 00 00       	mov    edi,0xe
c00055ff:	e9 a5 03 00 00       	jmp    c00059a9 <f_mkfs+0x78b>
c0005604:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005609:	31 d2                	xor    edx,edx
c000560b:	b9 00 02 00 00       	mov    ecx,0x200
c0005610:	89 f0                	mov    eax,esi
c0005612:	e8 a9 c3 ff ff       	call   c00019c0 <mem_set>
c0005617:	b9 0b 00 00 00       	mov    ecx,0xb
c000561c:	ba 12 d7 01 c0       	mov    edx,0xc001d712
c0005621:	89 f0                	mov    eax,esi
c0005623:	e8 83 c3 ff ff       	call   c00019ab <mem_cpy>
c0005628:	8d 46 0b             	lea    eax,[esi+0xb]
c000562b:	ba 00 02 00 00       	mov    edx,0x200
c0005630:	e8 6f c3 ff ff       	call   c00019a4 <st_word>
c0005635:	89 f8                	mov    eax,edi
c0005637:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c000563c:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c000563f:	8d 46 0e             	lea    eax,[esi+0xe]
c0005642:	e8 5d c3 ff ff       	call   c00019a4 <st_word>
c0005647:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c000564b:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005650:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c0005653:	75 08                	jne    c000565d <f_mkfs+0x43f>
c0005655:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000565d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005661:	8d 46 11             	lea    eax,[esi+0x11]
c0005664:	e8 3b c3 ff ff       	call   c00019a4 <st_word>
c0005669:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000566d:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005673:	77 0a                	ja     c000567f <f_mkfs+0x461>
c0005675:	8d 46 13             	lea    eax,[esi+0x13]
c0005678:	e8 27 c3 ff ff       	call   c00019a4 <st_word>
c000567d:	eb 08                	jmp    c0005687 <f_mkfs+0x469>
c000567f:	8d 46 20             	lea    eax,[esi+0x20]
c0005682:	e8 21 c3 ff ff       	call   c00019a8 <st_dword>
c0005687:	8d 46 18             	lea    eax,[esi+0x18]
c000568a:	ba 3f 00 00 00       	mov    edx,0x3f
c000568f:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c0005693:	e8 0c c3 ff ff       	call   c00019a4 <st_word>
c0005698:	8d 46 1a             	lea    eax,[esi+0x1a]
c000569b:	ba ff 00 00 00       	mov    edx,0xff
c00056a0:	e8 ff c2 ff ff       	call   c00019a4 <st_word>
c00056a5:	8d 46 1c             	lea    eax,[esi+0x1c]
c00056a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00056ac:	e8 f7 c2 ff ff       	call   c00019a8 <st_dword>
c00056b1:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056b6:	75 57                	jne    c000570f <f_mkfs+0x4f1>
c00056b8:	8d 46 43             	lea    eax,[esi+0x43]
c00056bb:	ba 00 00 21 50       	mov    edx,0x50210000
c00056c0:	e8 e3 c2 ff ff       	call   c00019a8 <st_dword>
c00056c5:	8d 46 24             	lea    eax,[esi+0x24]
c00056c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00056cc:	e8 d7 c2 ff ff       	call   c00019a8 <st_dword>
c00056d1:	8d 46 2c             	lea    eax,[esi+0x2c]
c00056d4:	ba 02 00 00 00       	mov    edx,0x2
c00056d9:	e8 ca c2 ff ff       	call   c00019a8 <st_dword>
c00056de:	8d 46 30             	lea    eax,[esi+0x30]
c00056e1:	ba 01 00 00 00       	mov    edx,0x1
c00056e6:	e8 b9 c2 ff ff       	call   c00019a4 <st_word>
c00056eb:	8d 46 32             	lea    eax,[esi+0x32]
c00056ee:	ba 06 00 00 00       	mov    edx,0x6
c00056f3:	e8 ac c2 ff ff       	call   c00019a4 <st_word>
c00056f8:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c00056fc:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005700:	8d 46 47             	lea    eax,[esi+0x47]
c0005703:	b9 13 00 00 00       	mov    ecx,0x13
c0005708:	ba 1e d7 01 c0       	mov    edx,0xc001d71e
c000570d:	eb 2f                	jmp    c000573e <f_mkfs+0x520>
c000570f:	8d 46 27             	lea    eax,[esi+0x27]
c0005712:	ba 00 00 21 50       	mov    edx,0x50210000
c0005717:	e8 8c c2 ff ff       	call   c00019a8 <st_dword>
c000571c:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005721:	8d 46 16             	lea    eax,[esi+0x16]
c0005724:	e8 7b c2 ff ff       	call   c00019a4 <st_word>
c0005729:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c000572d:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c0005731:	8d 46 2b             	lea    eax,[esi+0x2b]
c0005734:	b9 13 00 00 00       	mov    ecx,0x13
c0005739:	ba 32 d7 01 c0       	mov    edx,0xc001d732
c000573e:	e8 68 c2 ff ff       	call   c00019ab <mem_cpy>
c0005743:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c0005749:	ba 55 aa 00 00       	mov    edx,0xaa55
c000574e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005752:	e8 4d c2 ff ff       	call   c00019a4 <st_word>
c0005757:	6a 01                	push   0x1
c0005759:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000575d:	56                   	push   esi
c000575e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005762:	e8 e3 c1 ff ff       	call   c000194a <disk_write>
c0005767:	83 c4 10             	add    esp,0x10
c000576a:	85 c0                	test   eax,eax
c000576c:	0f 85 20 02 00 00    	jne    c0005992 <f_mkfs+0x774>
c0005772:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005777:	0f 85 98 00 00 00    	jne    c0005815 <f_mkfs+0x5f7>
c000577d:	6a 01                	push   0x1
c000577f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005783:	83 c0 06             	add    eax,0x6
c0005786:	50                   	push   eax
c0005787:	56                   	push   esi
c0005788:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000578c:	e8 b9 c1 ff ff       	call   c000194a <disk_write>
c0005791:	b9 00 02 00 00       	mov    ecx,0x200
c0005796:	31 d2                	xor    edx,edx
c0005798:	89 f0                	mov    eax,esi
c000579a:	e8 21 c2 ff ff       	call   c00019c0 <mem_set>
c000579f:	ba 52 52 61 41       	mov    edx,0x41615252
c00057a4:	89 f0                	mov    eax,esi
c00057a6:	e8 fd c1 ff ff       	call   c00019a8 <st_dword>
c00057ab:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c00057b1:	ba 72 72 41 61       	mov    edx,0x61417272
c00057b6:	e8 ed c1 ff ff       	call   c00019a8 <st_dword>
c00057bb:	8d 53 ff             	lea    edx,[ebx-0x1]
c00057be:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c00057c4:	e8 df c1 ff ff       	call   c00019a8 <st_dword>
c00057c9:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c00057cf:	ba 02 00 00 00       	mov    edx,0x2
c00057d4:	e8 cf c1 ff ff       	call   c00019a8 <st_dword>
c00057d9:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057de:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057e4:	e8 bb c1 ff ff       	call   c00019a4 <st_word>
c00057e9:	6a 01                	push   0x1
c00057eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00057ef:	83 c0 07             	add    eax,0x7
c00057f2:	50                   	push   eax
c00057f3:	56                   	push   esi
c00057f4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00057f8:	e8 4d c1 ff ff       	call   c000194a <disk_write>
c00057fd:	83 c4 20             	add    esp,0x20
c0005800:	6a 01                	push   0x1
c0005802:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005806:	40                   	inc    eax
c0005807:	50                   	push   eax
c0005808:	56                   	push   esi
c0005809:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000580d:	e8 38 c1 ff ff       	call   c000194a <disk_write>
c0005812:	83 c4 10             	add    esp,0x10
c0005815:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005819:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000581d:	c1 e8 09             	shr    eax,0x9
c0005820:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005826:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000582a:	31 d2                	xor    edx,edx
c000582c:	31 db                	xor    ebx,ebx
c000582e:	89 f0                	mov    eax,esi
c0005830:	e8 8b c1 ff ff       	call   c00019c0 <mem_set>
c0005835:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c000583a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005842:	0f 94 c3             	sete   bl
c0005845:	4b                   	dec    ebx
c0005846:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000584c:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0005852:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005857:	75 21                	jne    c000587a <f_mkfs+0x65c>
c0005859:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000585e:	89 f0                	mov    eax,esi
c0005860:	e8 43 c1 ff ff       	call   c00019a8 <st_dword>
c0005865:	8d 46 04             	lea    eax,[esi+0x4]
c0005868:	83 ca ff             	or     edx,0xffffffff
c000586b:	e8 38 c1 ff ff       	call   c00019a8 <st_dword>
c0005870:	8d 46 08             	lea    eax,[esi+0x8]
c0005873:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005878:	eb 04                	jmp    c000587e <f_mkfs+0x660>
c000587a:	89 da                	mov    edx,ebx
c000587c:	89 f0                	mov    eax,esi
c000587e:	e8 25 c1 ff ff       	call   c00019a8 <st_dword>
c0005883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005887:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000588b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000588f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005893:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005897:	76 08                	jbe    c00058a1 <f_mkfs+0x683>
c0005899:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000589d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00058a1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00058a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00058a9:	56                   	push   esi
c00058aa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00058ae:	e8 97 c0 ff ff       	call   c000194a <disk_write>
c00058b3:	83 c4 10             	add    esp,0x10
c00058b6:	85 c0                	test   eax,eax
c00058b8:	0f 85 d4 00 00 00    	jne    c0005992 <f_mkfs+0x774>
c00058be:	b9 00 02 00 00       	mov    ecx,0x200
c00058c3:	31 d2                	xor    edx,edx
c00058c5:	89 f0                	mov    eax,esi
c00058c7:	e8 f4 c0 ff ff       	call   c00019c0 <mem_set>
c00058cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00058d0:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c00058d4:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c00058d8:	75 b1                	jne    c000588b <f_mkfs+0x66d>
c00058da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058de:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00058e6:	40                   	inc    eax
c00058e7:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00058eb:	0f 87 61 ff ff ff    	ja     c0005852 <f_mkfs+0x634>
c00058f1:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058f6:	74 04                	je     c00058fc <f_mkfs+0x6de>
c00058f8:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00058fc:	89 fb                	mov    ebx,edi
c00058fe:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005902:	76 04                	jbe    c0005908 <f_mkfs+0x6ea>
c0005904:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0005908:	53                   	push   ebx
c0005909:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000590d:	56                   	push   esi
c000590e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005912:	e8 33 c0 ff ff       	call   c000194a <disk_write>
c0005917:	83 c4 10             	add    esp,0x10
c000591a:	85 c0                	test   eax,eax
c000591c:	75 74                	jne    c0005992 <f_mkfs+0x774>
c000591e:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005922:	29 df                	sub    edi,ebx
c0005924:	75 d6                	jne    c00058fc <f_mkfs+0x6de>
c0005926:	b1 0c                	mov    cl,0xc
c0005928:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000592d:	74 18                	je     c0005947 <f_mkfs+0x729>
c000592f:	b1 06                	mov    cl,0x6
c0005931:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c0005939:	77 0c                	ja     c0005947 <f_mkfs+0x729>
c000593b:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c0005940:	0f 94 c1             	sete   cl
c0005943:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0005947:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c000594c:	75 2d                	jne    c000597b <f_mkfs+0x75d>
c000594e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005952:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000595a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000595e:	0f b6 c9             	movzx  ecx,cl
c0005961:	83 ec 0c             	sub    esp,0xc
c0005964:	56                   	push   esi
c0005965:	8d 54 24 48          	lea    edx,[esp+0x48]
c0005969:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000596d:	e8 54 d0 ff ff       	call   c00029c6 <create_partition>
c0005972:	83 c4 10             	add    esp,0x10
c0005975:	89 c7                	mov    edi,eax
c0005977:	85 c0                	test   eax,eax
c0005979:	75 2e                	jne    c00059a9 <f_mkfs+0x78b>
c000597b:	31 ff                	xor    edi,edi
c000597d:	50                   	push   eax
c000597e:	6a 00                	push   0x0
c0005980:	6a 00                	push   0x0
c0005982:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005986:	e8 d5 bf ff ff       	call   c0001960 <disk_ioctl>
c000598b:	83 c4 10             	add    esp,0x10
c000598e:	85 c0                	test   eax,eax
c0005990:	74 17                	je     c00059a9 <f_mkfs+0x78b>
c0005992:	85 ed                	test   ebp,ebp
c0005994:	75 0c                	jne    c00059a2 <f_mkfs+0x784>
c0005996:	83 ec 0c             	sub    esp,0xc
c0005999:	56                   	push   esi
c000599a:	e8 6d 00 00 00       	call   c0005a0c <ff_memfree>
c000599f:	83 c4 10             	add    esp,0x10
c00059a2:	bf 01 00 00 00       	mov    edi,0x1
c00059a7:	eb 40                	jmp    c00059e9 <f_mkfs+0x7cb>
c00059a9:	85 ed                	test   ebp,ebp
c00059ab:	75 3c                	jne    c00059e9 <f_mkfs+0x7cb>
c00059ad:	83 ec 0c             	sub    esp,0xc
c00059b0:	56                   	push   esi
c00059b1:	e8 56 00 00 00       	call   c0005a0c <ff_memfree>
c00059b6:	83 c4 10             	add    esp,0x10
c00059b9:	eb 2e                	jmp    c00059e9 <f_mkfs+0x7cb>
c00059bb:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c00059c0:	0f 85 56 fb ff ff    	jne    c000551c <f_mkfs+0x2fe>
c00059c6:	e9 2f fc ff ff       	jmp    c00055fa <f_mkfs+0x3dc>
c00059cb:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c00059d0:	0f 85 4c fb ff ff    	jne    c0005522 <f_mkfs+0x304>
c00059d6:	89 cf                	mov    edi,ecx
c00059d8:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059de:	0f 86 49 fa ff ff    	jbe    c000542d <f_mkfs+0x20f>
c00059e4:	e9 11 fc ff ff       	jmp    c00055fa <f_mkfs+0x3dc>
c00059e9:	83 c4 4c             	add    esp,0x4c
c00059ec:	89 f8                	mov    eax,edi
c00059ee:	5b                   	pop    ebx
c00059ef:	5e                   	pop    esi
c00059f0:	5f                   	pop    edi
c00059f1:	5d                   	pop    ebp
c00059f2:	c3                   	ret    
c00059f3:	90                   	nop

c00059f4 <ff_memalloc>:
c00059f4:	83 ec 0c             	sub    esp,0xc
c00059f7:	83 ec 0c             	sub    esp,0xc
c00059fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00059fe:	e8 7a 13 00 00       	call   c0006d7d <malloc>
c0005a03:	83 c4 10             	add    esp,0x10
c0005a06:	83 c4 0c             	add    esp,0xc
c0005a09:	c3                   	ret    
c0005a0a:	66 90                	xchg   ax,ax

c0005a0c <ff_memfree>:
c0005a0c:	83 ec 0c             	sub    esp,0xc
c0005a0f:	83 ec 0c             	sub    esp,0xc
c0005a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a16:	e8 72 13 00 00       	call   c0006d8d <free>
c0005a1b:	83 c4 10             	add    esp,0x10
c0005a1e:	90                   	nop
c0005a1f:	83 c4 0c             	add    esp,0xc
c0005a22:	c3                   	ret    
c0005a23:	90                   	nop

c0005a24 <ff_uni2oem>:
c0005a24:	83 ec 14             	sub    esp,0x14
c0005a27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005a2b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005a2f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005a36:	c7 44 24 0c 60 db 01 c0 	mov    DWORD PTR [esp+0xc],0xc001db60
c0005a3e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005a43:	77 0b                	ja     c0005a50 <ff_uni2oem+0x2c>
c0005a45:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a49:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005a4e:	eb 60                	jmp    c0005ab0 <ff_uni2oem+0x8c>
c0005a50:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005a58:	77 56                	ja     c0005ab0 <ff_uni2oem+0x8c>
c0005a5a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005a60:	75 4e                	jne    c0005ab0 <ff_uni2oem+0x8c>
c0005a62:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005a69:	eb 0d                	jmp    c0005a78 <ff_uni2oem+0x54>
c0005a6b:	90                   	nop
c0005a6c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005a71:	40                   	inc    eax
c0005a72:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005a77:	90                   	nop
c0005a78:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005a7e:	77 1c                	ja     c0005a9c <ff_uni2oem+0x78>
c0005a80:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005a85:	01 c0                	add    eax,eax
c0005a87:	89 c2                	mov    edx,eax
c0005a89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a8d:	01 d0                	add    eax,edx
c0005a8f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005a92:	0f b7 c0             	movzx  eax,ax
c0005a95:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005a99:	75 d1                	jne    c0005a6c <ff_uni2oem+0x48>
c0005a9b:	90                   	nop
c0005a9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005aa1:	83 e8 80             	sub    eax,0xffffff80
c0005aa4:	25 ff 00 00 00       	and    eax,0xff
c0005aa9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aae:	66 90                	xchg   ax,ax
c0005ab0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ab5:	83 c4 14             	add    esp,0x14
c0005ab8:	c3                   	ret    
c0005ab9:	8d 76 00             	lea    esi,[esi+0x0]

c0005abc <ff_oem2uni>:
c0005abc:	83 ec 18             	sub    esp,0x18
c0005abf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005ac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ac7:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005acc:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005ad0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ad7:	c7 44 24 10 60 db 01 c0 	mov    DWORD PTR [esp+0x10],0xc001db60
c0005adf:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005ae5:	77 0d                	ja     c0005af4 <ff_oem2uni+0x38>
c0005ae7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005aeb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005af0:	eb 32                	jmp    c0005b24 <ff_oem2uni+0x68>
c0005af2:	66 90                	xchg   ax,ax
c0005af4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005afa:	75 28                	jne    c0005b24 <ff_oem2uni+0x68>
c0005afc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b03:	77 1f                	ja     c0005b24 <ff_oem2uni+0x68>
c0005b05:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005b0a:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b0f:	01 c0                	add    eax,eax
c0005b11:	89 c2                	mov    edx,eax
c0005b13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b17:	01 d0                	add    eax,edx
c0005b19:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b1c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b21:	8d 76 00             	lea    esi,[esi+0x0]
c0005b24:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005b29:	83 c4 18             	add    esp,0x18
c0005b2c:	c3                   	ret    
c0005b2d:	8d 76 00             	lea    esi,[esi+0x0]

c0005b30 <ff_wtoupper>:
c0005b30:	83 ec 10             	sub    esp,0x10
c0005b33:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005b3b:	0f 87 4f 01 00 00    	ja     c0005c90 <ff_wtoupper+0x160>
c0005b41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b45:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005b4a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005b51:	77 09                	ja     c0005b5c <ff_wtoupper+0x2c>
c0005b53:	b8 60 d9 01 c0       	mov    eax,0xc001d960
c0005b58:	eb 0a                	jmp    c0005b64 <ff_wtoupper+0x34>
c0005b5a:	66 90                	xchg   ax,ax
c0005b5c:	b8 a0 d8 01 c0       	mov    eax,0xc001d8a0
c0005b61:	8d 76 00             	lea    esi,[esi+0x0]
c0005b64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005b68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b6c:	8d 50 02             	lea    edx,[eax+0x2]
c0005b6f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b73:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b76:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005b7b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005b81:	0f 84 fd 00 00 00    	je     c0005c84 <ff_wtoupper+0x154>
c0005b87:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005b8c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005b91:	0f 82 ed 00 00 00    	jb     c0005c84 <ff_wtoupper+0x154>
c0005b97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b9b:	8d 50 02             	lea    edx,[eax+0x2]
c0005b9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ba2:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba5:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005baa:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005baf:	66 c1 e8 08          	shr    ax,0x8
c0005bb3:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005bb8:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005bbf:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005bc4:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005bc9:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005bce:	01 ca                	add    edx,ecx
c0005bd0:	39 d0                	cmp    eax,edx
c0005bd2:	0f 8d 8c 00 00 00    	jge    c0005c64 <ff_wtoupper+0x134>
c0005bd8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005bdd:	83 f8 08             	cmp    eax,0x8
c0005be0:	0f 87 9a 00 00 00    	ja     c0005c80 <ff_wtoupper+0x150>
c0005be6:	8b 04 85 60 d8 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe27a0]
c0005bed:	ff e0                	jmp    eax
c0005bef:	90                   	nop
c0005bf0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005bf5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005bfa:	29 c2                	sub    edx,eax
c0005bfc:	89 d0                	mov    eax,edx
c0005bfe:	01 c0                	add    eax,eax
c0005c00:	89 c2                	mov    edx,eax
c0005c02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c06:	01 d0                	add    eax,edx
c0005c08:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c0b:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005c10:	eb 4e                	jmp    c0005c60 <ff_wtoupper+0x130>
c0005c12:	66 90                	xchg   ax,ax
c0005c14:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c19:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005c1d:	83 e0 01             	and    eax,0x1
c0005c20:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005c25:	eb 39                	jmp    c0005c60 <ff_wtoupper+0x130>
c0005c27:	90                   	nop
c0005c28:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005c2e:	eb 30                	jmp    c0005c60 <ff_wtoupper+0x130>
c0005c30:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005c36:	eb 28                	jmp    c0005c60 <ff_wtoupper+0x130>
c0005c38:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005c3e:	eb 20                	jmp    c0005c60 <ff_wtoupper+0x130>
c0005c40:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005c46:	eb 18                	jmp    c0005c60 <ff_wtoupper+0x130>
c0005c48:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005c4e:	eb 10                	jmp    c0005c60 <ff_wtoupper+0x130>
c0005c50:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005c56:	eb 08                	jmp    c0005c60 <ff_wtoupper+0x130>
c0005c58:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005c5f:	90                   	nop
c0005c60:	eb 1e                	jmp    c0005c80 <ff_wtoupper+0x150>
c0005c62:	66 90                	xchg   ax,ax
c0005c64:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005c6a:	0f 85 f8 fe ff ff    	jne    c0005b68 <ff_wtoupper+0x38>
c0005c70:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005c75:	01 c0                	add    eax,eax
c0005c77:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005c7b:	e9 e8 fe ff ff       	jmp    c0005b68 <ff_wtoupper+0x38>
c0005c80:	90                   	nop
c0005c81:	8d 76 00             	lea    esi,[esi+0x0]
c0005c84:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005c89:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005c8d:	8d 76 00             	lea    esi,[esi+0x0]
c0005c90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005c94:	83 c4 10             	add    esp,0x10
c0005c97:	c3                   	ret    

c0005c98 <CPU::current()>:
c0005c98:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c0005c9d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0005ca3:	c3                   	ret    

c0005ca4 <operator new(unsigned long)>:
c0005ca4:	e9 d4 10 00 00       	jmp    c0006d7d <malloc>

c0005ca9 <operator delete(void*)>:
c0005ca9:	e9 ef 10 00 00       	jmp    c0006d9d <rfree>

c0005cae <disableIRQs()>:
c0005cae:	fa                   	cli    
c0005caf:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c0005cb5:	c3                   	ret    

c0005cb6 <enableIRQs()>:
c0005cb6:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0005cbb:	48                   	dec    eax
c0005cbc:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c0005cc1:	75 01                	jne    c0005cc4 <enableIRQs()+0xe>
c0005cc3:	fb                   	sti    
c0005cc4:	c3                   	ret    

c0005cc5 <lockScheduler()>:
c0005cc5:	fa                   	cli    
c0005cc6:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c0005ccc:	c3                   	ret    

c0005ccd <unlockScheduler()>:
c0005ccd:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0005cd2:	48                   	dec    eax
c0005cd3:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c0005cd8:	75 01                	jne    c0005cdb <unlockScheduler()+0xe>
c0005cda:	fb                   	sti    
c0005cdb:	c3                   	ret    

c0005cdc <lockStuff()>:
c0005cdc:	fa                   	cli    
c0005cdd:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c0005ce3:	ff 05 84 3c 02 c0    	inc    DWORD PTR ds:0xc0023c84
c0005ce9:	c3                   	ret    

c0005cea <unlockStuff()>:
c0005cea:	83 ec 0c             	sub    esp,0xc
c0005ced:	a1 84 3c 02 c0       	mov    eax,ds:0xc0023c84
c0005cf2:	48                   	dec    eax
c0005cf3:	a3 84 3c 02 c0       	mov    ds:0xc0023c84,eax
c0005cf8:	75 18                	jne    c0005d12 <unlockStuff()+0x28>
c0005cfa:	83 3d 80 3c 02 c0 00 	cmp    DWORD PTR ds:0xc0023c80,0x0
c0005d01:	74 0f                	je     c0005d12 <unlockStuff()+0x28>
c0005d03:	c7 05 80 3c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023c80,0x0
c0005d0d:	e8 4e cf 00 00       	call   c0012c60 <schedule()>
c0005d12:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0005d17:	48                   	dec    eax
c0005d18:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c0005d1d:	75 01                	jne    c0005d20 <unlockStuff()+0x36>
c0005d1f:	fb                   	sti    
c0005d20:	83 c4 0c             	add    esp,0xc
c0005d23:	c3                   	ret    

c0005d24 <Virt::getAKernelVAS()>:
c0005d24:	a1 94 08 02 c0       	mov    eax,ds:0xc0020894
c0005d29:	c3                   	ret    

c0005d2a <__not_memcpy>:
c0005d2a:	57                   	push   edi
c0005d2b:	56                   	push   esi
c0005d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005d38:	89 c7                	mov    edi,eax
c0005d3a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0005d3c:	5e                   	pop    esi
c0005d3d:	5f                   	pop    edi
c0005d3e:	c3                   	ret    
c0005d3f:	90                   	nop

c0005d40 <Krnl::resolveCompatibilitySymbol(char*)>:
c0005d40:	83 ec 0c             	sub    esp,0xc
c0005d43:	83 ec 08             	sub    esp,0x8
c0005d46:	68 60 dc 01 c0       	push   0xc001dc60
c0005d4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005d4f:	e8 9c a8 ff ff       	call   c00005f0 <strcmp>
c0005d54:	83 c4 10             	add    esp,0x10
c0005d57:	85 c0                	test   eax,eax
c0005d59:	0f 94 c0             	sete   al
c0005d5c:	84 c0                	test   al,al
c0005d5e:	74 0c                	je     c0005d6c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0005d60:	b8 a8 07 02 c0       	mov    eax,0xc00207a8
c0005d65:	e9 ea 00 00 00       	jmp    c0005e54 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005d6a:	66 90                	xchg   ax,ax
c0005d6c:	83 ec 08             	sub    esp,0x8
c0005d6f:	68 69 dc 01 c0       	push   0xc001dc69
c0005d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005d78:	e8 73 a8 ff ff       	call   c00005f0 <strcmp>
c0005d7d:	83 c4 10             	add    esp,0x10
c0005d80:	85 c0                	test   eax,eax
c0005d82:	0f 94 c0             	sete   al
c0005d85:	84 c0                	test   al,al
c0005d87:	74 0b                	je     c0005d94 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0005d89:	b8 f0 c8 01 c0       	mov    eax,0xc001c8f0
c0005d8e:	e9 c1 00 00 00       	jmp    c0005e54 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005d93:	90                   	nop
c0005d94:	83 ec 08             	sub    esp,0x8
c0005d97:	68 73 dc 01 c0       	push   0xc001dc73
c0005d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005da0:	e8 4b a8 ff ff       	call   c00005f0 <strcmp>
c0005da5:	83 c4 10             	add    esp,0x10
c0005da8:	85 c0                	test   eax,eax
c0005daa:	0f 94 c0             	sete   al
c0005dad:	84 c0                	test   al,al
c0005daf:	74 0b                	je     c0005dbc <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0005db1:	b8 24 c6 01 c0       	mov    eax,0xc001c624
c0005db6:	e9 99 00 00 00       	jmp    c0005e54 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005dbb:	90                   	nop
c0005dbc:	83 ec 08             	sub    esp,0x8
c0005dbf:	68 7c dc 01 c0       	push   0xc001dc7c
c0005dc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005dc8:	e8 23 a8 ff ff       	call   c00005f0 <strcmp>
c0005dcd:	83 c4 10             	add    esp,0x10
c0005dd0:	85 c0                	test   eax,eax
c0005dd2:	0f 94 c0             	sete   al
c0005dd5:	84 c0                	test   al,al
c0005dd7:	74 07                	je     c0005de0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c0005dd9:	b8 f0 c9 01 c0       	mov    eax,0xc001c9f0
c0005dde:	eb 74                	jmp    c0005e54 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005de0:	83 ec 08             	sub    esp,0x8
c0005de3:	68 86 dc 01 c0       	push   0xc001dc86
c0005de8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005dec:	e8 ff a7 ff ff       	call   c00005f0 <strcmp>
c0005df1:	83 c4 10             	add    esp,0x10
c0005df4:	85 c0                	test   eax,eax
c0005df6:	0f 94 c0             	sete   al
c0005df9:	84 c0                	test   al,al
c0005dfb:	74 07                	je     c0005e04 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c0005dfd:	b8 70 c7 01 c0       	mov    eax,0xc001c770
c0005e02:	eb 50                	jmp    c0005e54 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005e04:	83 ec 08             	sub    esp,0x8
c0005e07:	68 8f dc 01 c0       	push   0xc001dc8f
c0005e0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e10:	e8 db a7 ff ff       	call   c00005f0 <strcmp>
c0005e15:	83 c4 10             	add    esp,0x10
c0005e18:	85 c0                	test   eax,eax
c0005e1a:	0f 94 c0             	sete   al
c0005e1d:	84 c0                	test   al,al
c0005e1f:	74 07                	je     c0005e28 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0005e21:	b8 ac 07 02 c0       	mov    eax,0xc00207ac
c0005e26:	eb 2c                	jmp    c0005e54 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005e28:	83 ec 08             	sub    esp,0x8
c0005e2b:	68 9c dc 01 c0       	push   0xc001dc9c
c0005e30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e34:	e8 b7 a7 ff ff       	call   c00005f0 <strcmp>
c0005e39:	83 c4 10             	add    esp,0x10
c0005e3c:	85 c0                	test   eax,eax
c0005e3e:	0f 94 c0             	sete   al
c0005e41:	84 c0                	test   al,al
c0005e43:	74 07                	je     c0005e4c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0005e45:	b8 ad 07 02 c0       	mov    eax,0xc00207ad
c0005e4a:	eb 08                	jmp    c0005e54 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005e4c:	b8 00 00 00 00       	mov    eax,0x0
c0005e51:	8d 76 00             	lea    esi,[esi+0x0]
c0005e54:	83 c4 0c             	add    esp,0xc
c0005e57:	c3                   	ret    

c0005e58 <Computer::close(int, int, void*)>:
c0005e58:	57                   	push   edi
c0005e59:	56                   	push   esi
c0005e5a:	53                   	push   ebx
c0005e5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0005e5f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0005e63:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0005e67:	83 ec 0c             	sub    esp,0xc
c0005e6a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0005e70:	e8 d3 51 00 00       	call   c000b048 <Device::closeAll()>
c0005e75:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0005e7b:	83 c4 10             	add    esp,0x10
c0005e7e:	8b 10                	mov    edx,DWORD PTR [eax]
c0005e80:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0005e84:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0005e8c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0005e90:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005e94:	5b                   	pop    ebx
c0005e95:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0005e98:	5e                   	pop    esi
c0005e99:	5f                   	pop    edi
c0005e9a:	ff e0                	jmp    eax

c0005e9c <Krnl::firstTask()>:
c0005e9c:	53                   	push   ebx
c0005e9d:	83 ec 14             	sub    esp,0x14
c0005ea0:	fb                   	sti    
c0005ea1:	68 a9 dc 01 c0       	push   0xc001dca9
c0005ea6:	e8 2c 0f 00 00       	call   c0006dd7 <Krnl::setBootMessage(char const*)>
c0005eab:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0005eb2:	e8 c6 0e 00 00       	call   c0006d7d <malloc>
c0005eb7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ebe:	89 c3                	mov    ebx,eax
c0005ec0:	ff 35 b0 3c 02 c0    	push   DWORD PTR ds:0xc0023cb0
c0005ec6:	68 c2 dc 01 c0       	push   0xc001dcc2
c0005ecb:	6a 01                	push   0x1
c0005ecd:	50                   	push   eax
c0005ece:	e8 69 c9 00 00       	call   c001283c <Process::Process(bool, char const*, Process*, char**)>
c0005ed3:	83 c4 20             	add    esp,0x20
c0005ed6:	68 ff 00 00 00       	push   0xff
c0005edb:	6a 00                	push   0x0
c0005edd:	68 d5 67 00 c0       	push   0xc00067d5
c0005ee2:	53                   	push   ebx
c0005ee3:	e8 5c cb 00 00       	call   c0012a44 <Process::createThread(void (*)(void*), void*, int)>
c0005ee8:	6a 7a                	push   0x7a
c0005eea:	6a 00                	push   0x0
c0005eec:	68 88 34 01 c0       	push   0xc0013488
c0005ef1:	ff 35 b0 3c 02 c0    	push   DWORD PTR ds:0xc0023cb0
c0005ef7:	e8 48 cb 00 00       	call   c0012a44 <Process::createThread(void (*)(void*), void*, int)>
c0005efc:	83 c4 14             	add    esp,0x14
c0005eff:	a3 68 3c 02 c0       	mov    ds:0xc0023c68,eax
c0005f04:	68 c0 dd 01 c0       	push   0xc001ddc0
c0005f09:	c6 05 ad 07 02 c0 01 	mov    BYTE PTR ds:0xc00207ad,0x1
c0005f10:	e8 c2 0e 00 00       	call   c0006dd7 <Krnl::setBootMessage(char const*)>
c0005f15:	e8 49 d9 00 00       	call   c0013863 <Vm::initialise8086()>
c0005f1a:	e8 7f 3f 00 00       	call   c0009e9e <Fs::initVFS()>
c0005f1f:	c7 04 24 cf dc 01 c0 	mov    DWORD PTR [esp],0xc001dccf
c0005f26:	e8 ac 0e 00 00       	call   c0006dd7 <Krnl::setBootMessage(char const*)>
c0005f2b:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c0005f30:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0005f36:	8b 10                	mov    edx,DWORD PTR [eax]
c0005f38:	6a 00                	push   0x0
c0005f3a:	6a 00                	push   0x0
c0005f3c:	6a 00                	push   0x0
c0005f3e:	50                   	push   eax
c0005f3f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0005f42:	83 c4 14             	add    esp,0x14
c0005f45:	68 c0 dd 01 c0       	push   0xc001ddc0
c0005f4a:	e8 88 0e 00 00       	call   c0006dd7 <Krnl::setBootMessage(char const*)>
c0005f4f:	e8 86 b1 00 00       	call   c00110da <Sys::loadSyscalls()>
c0005f54:	e8 7b 97 00 00       	call   c000f6d4 <Krnl::loadSystemEnv()>
c0005f59:	e8 b9 9b 00 00       	call   c000fb17 <Krnl::setupPowerManager()>
c0005f5e:	83 c4 0c             	add    esp,0xc
c0005f61:	6a 3a                	push   0x3a
c0005f63:	68 e9 dc 01 c0       	push   0xc001dce9
c0005f68:	68 f2 dc 01 c0       	push   0xc001dcf2
c0005f6d:	e8 cf a0 00 00       	call   c0010041 <Reg::readIntWithDefault(char*, char*, int)>
c0005f72:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f75:	e8 26 4a 00 00       	call   c000a9a0 <User::loadClockSettings(int)>
c0005f7a:	c7 04 24 e4 dd 01 c0 	mov    DWORD PTR [esp],0xc001dde4
c0005f81:	e8 51 0e 00 00       	call   c0006dd7 <Krnl::setBootMessage(char const*)>
c0005f86:	58                   	pop    eax
c0005f87:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c0005f8c:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0005f92:	e8 af 50 00 00       	call   c000b046 <Device::loadDriversForAll()>
c0005f97:	c7 04 24 fa dc 01 c0 	mov    DWORD PTR [esp],0xc001dcfa
c0005f9e:	e8 34 0e 00 00       	call   c0006dd7 <Krnl::setBootMessage(char const*)>
c0005fa3:	e8 b2 92 00 00       	call   c000f25a <Krnl::startCPUs()>
c0005fa8:	c7 04 24 14 dd 01 c0 	mov    DWORD PTR [esp],0xc001dd14
c0005faf:	e8 23 0e 00 00       	call   c0006dd7 <Krnl::setBootMessage(char const*)>
c0005fb4:	5a                   	pop    edx
c0005fb5:	8b 1d a8 07 02 c0    	mov    ebx,DWORD PTR ds:0xc00207a8
c0005fbb:	59                   	pop    ecx
c0005fbc:	6a 01                	push   0x1
c0005fbe:	68 25 dd 01 c0       	push   0xc001dd25
c0005fc3:	e8 ba c2 00 00       	call   c0012282 <Thr::loadDLL(char const*, bool)>
c0005fc8:	5a                   	pop    edx
c0005fc9:	59                   	pop    ecx
c0005fca:	53                   	push   ebx
c0005fcb:	50                   	push   eax
c0005fcc:	e8 e2 c4 00 00       	call   c00124b3 <Thr::executeDLL(unsigned long, void*)>
c0005fd1:	83 c4 10             	add    esp,0x10
c0005fd4:	83 ec 0c             	sub    esp,0xc
c0005fd7:	6a 02                	push   0x2
c0005fd9:	e8 7a ce 00 00       	call   c0012e58 <blockTask(TaskState)>
c0005fde:	83 c4 10             	add    esp,0x10
c0005fe1:	eb f1                	jmp    c0005fd4 <Krnl::firstTask()+0x138>
c0005fe3:	90                   	nop

c0005fe4 <Computer::Computer()>:
c0005fe4:	83 ec 0c             	sub    esp,0xc
c0005fe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005feb:	83 ec 08             	sub    esp,0x8
c0005fee:	68 41 dd 01 c0       	push   0xc001dd41
c0005ff3:	50                   	push   eax
c0005ff4:	e8 c9 50 00 00       	call   c000b0c2 <Device::Device(char const*)>
c0005ff9:	83 c4 10             	add    esp,0x10
c0005ffc:	ba 30 de 01 c0       	mov    edx,0xc001de30
c0006001:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006005:	89 10                	mov    DWORD PTR [eax],edx
c0006007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000600b:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006019:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006027:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000602d:	83 ca 04             	or     edx,0x4
c0006030:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0006036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000603a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006040:	0f b6 d0             	movzx  edx,al
c0006043:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006047:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000604e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006052:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006058:	0f b6 d0             	movzx  edx,al
c000605b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000605f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006068:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000606e:	8d 50 01             	lea    edx,[eax+0x1]
c0006071:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006075:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000607b:	0f b6 d0             	movzx  edx,al
c000607e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006082:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006086:	83 e1 3f             	and    ecx,0x3f
c0006089:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000608d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006091:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006097:	0f b6 d0             	movzx  edx,al
c000609a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000609e:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c00060a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060a9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00060af:	0f b6 d0             	movzx  edx,al
c00060b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060b6:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c00060bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060bf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00060c5:	8d 50 01             	lea    edx,[eax+0x1]
c00060c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00060cc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00060d2:	0f b6 d0             	movzx  edx,al
c00060d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060d9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00060dd:	83 e1 3f             	and    ecx,0x3f
c00060e0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00060e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060e8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00060ee:	0f b6 d0             	movzx  edx,al
c00060f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060f5:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c00060fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006100:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006106:	0f b6 d0             	movzx  edx,al
c0006109:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000610d:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0006112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006116:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000611c:	8d 50 01             	lea    edx,[eax+0x1]
c000611f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006123:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006129:	0f b6 d0             	movzx  edx,al
c000612c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006130:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006134:	83 e1 3f             	and    ecx,0x3f
c0006137:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000613b:	90                   	nop
c000613c:	83 c4 0c             	add    esp,0xc
c000613f:	c3                   	ret    

c0006140 <Computer::setBootMessage(char const*)>:
c0006140:	c3                   	ret    
c0006141:	90                   	nop

c0006142 <Computer::detectFeatures()>:
c0006142:	55                   	push   ebp
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	53                   	push   ebx
c0006146:	83 ec 1c             	sub    esp,0x1c
c0006149:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000614d:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0006157:	e8 bd a0 ff ff       	call   c0000219 <detectCPUID>
c000615c:	85 c0                	test   eax,eax
c000615e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0006164:	0f 95 c2             	setne  dl
c0006167:	83 e0 fd             	and    eax,0xfffffffd
c000616a:	d1 e2                	shl    edx,1
c000616c:	09 d0                	or     eax,edx
c000616e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0006174:	a8 02                	test   al,0x2
c0006176:	75 46                	jne    c00061be <Computer::detectFeatures()+0x7c>
c0006178:	f6 05 c1 07 02 c0 04 	test   BYTE PTR ds:0xc00207c1,0x4
c000617f:	74 07                	je     c0006188 <Computer::detectFeatures()+0x46>
c0006181:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0006188:	e8 29 64 01 00       	call   c001c5b6 <x87Detect>
c000618d:	83 e0 01             	and    eax,0x1
c0006190:	c1 e0 04             	shl    eax,0x4
c0006193:	88 c2                	mov    dl,al
c0006195:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000619b:	83 e0 ef             	and    eax,0xffffffef
c000619e:	09 d0                	or     eax,edx
c00061a0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c00061a6:	a8 10                	test   al,0x10
c00061a8:	0f 85 2a 01 00 00    	jne    c00062d8 <Computer::detectFeatures()+0x196>
c00061ae:	84 c0                	test   al,al
c00061b0:	0f 88 45 01 00 00    	js     c00062fb <Computer::detectFeatures()+0x1b9>
c00061b6:	83 c4 1c             	add    esp,0x1c
c00061b9:	5b                   	pop    ebx
c00061ba:	5e                   	pop    esi
c00061bb:	5f                   	pop    edi
c00061bc:	5d                   	pop    ebp
c00061bd:	c3                   	ret    
c00061be:	83 ec 0c             	sub    esp,0xc
c00061c1:	6a 20                	push   0x20
c00061c3:	e8 1c 84 00 00       	call   c000e5e4 <CPU::cpuidCheckEDX(unsigned int)>
c00061c8:	83 e0 01             	and    eax,0x1
c00061cb:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00061d2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c00061d8:	83 e0 f7             	and    eax,0xfffffff7
c00061db:	09 d0                	or     eax,edx
c00061dd:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c00061e3:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c00061ea:	e8 f5 83 00 00       	call   c000e5e4 <CPU::cpuidCheckEDX(unsigned int)>
c00061ef:	83 e0 01             	and    eax,0x1
c00061f2:	88 c2                	mov    dl,al
c00061f4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c00061fa:	83 e0 fe             	and    eax,0xfffffffe
c00061fd:	09 d0                	or     eax,edx
c00061ff:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0006205:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000620c:	e8 d3 83 00 00       	call   c000e5e4 <CPU::cpuidCheckEDX(unsigned int)>
c0006211:	c1 e0 07             	shl    eax,0x7
c0006214:	88 c2                	mov    dl,al
c0006216:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000621c:	83 e0 7f             	and    eax,0x7f
c000621f:	09 d0                	or     eax,edx
c0006221:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0006227:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000622e:	e8 b1 83 00 00       	call   c000e5e4 <CPU::cpuidCheckEDX(unsigned int)>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	83 e0 01             	and    eax,0x1
c0006239:	c1 e0 05             	shl    eax,0x5
c000623c:	88 c2                	mov    dl,al
c000623e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0006244:	83 e0 df             	and    eax,0xffffffdf
c0006247:	09 d0                	or     eax,edx
c0006249:	f7 05 c0 07 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00207c0,0x401
c0006253:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0006259:	0f 84 c2 00 00 00    	je     c0006321 <Computer::detectFeatures()+0x1df>
c000625f:	83 e0 fe             	and    eax,0xfffffffe
c0006262:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0006268:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000626e:	88 c2                	mov    dl,al
c0006270:	83 e2 09             	and    edx,0x9
c0006273:	fe ca                	dec    dl
c0006275:	75 09                	jne    c0006280 <Computer::detectFeatures()+0x13e>
c0006277:	83 e0 fe             	and    eax,0xfffffffe
c000627a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0006280:	83 ec 0c             	sub    esp,0xc
c0006283:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006287:	50                   	push   eax
c0006288:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000628c:	55                   	push   ebp
c000628d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006291:	57                   	push   edi
c0006292:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006296:	56                   	push   esi
c0006297:	68 00 00 00 80       	push   0x80000000
c000629c:	e8 bf 82 00 00       	call   c000e560 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00062a1:	83 c4 20             	add    esp,0x20
c00062a4:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c00062ab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00062af:	0f 86 c3 fe ff ff    	jbe    c0006178 <Computer::detectFeatures()+0x36>
c00062b5:	83 ec 0c             	sub    esp,0xc
c00062b8:	50                   	push   eax
c00062b9:	55                   	push   ebp
c00062ba:	57                   	push   edi
c00062bb:	56                   	push   esi
c00062bc:	68 01 00 00 80       	push   0x80000001
c00062c1:	e8 9a 82 00 00       	call   c000e560 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00062c6:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c00062d0:	83 c4 20             	add    esp,0x20
c00062d3:	e9 a0 fe ff ff       	jmp    c0006178 <Computer::detectFeatures()+0x36>
c00062d8:	e8 93 62 01 00       	call   c001c570 <absolutelyNoChanceInHell>
c00062dd:	88 c2                	mov    dl,al
c00062df:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c00062e5:	c1 e2 07             	shl    edx,0x7
c00062e8:	83 e0 7f             	and    eax,0x7f
c00062eb:	09 d0                	or     eax,edx
c00062ed:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c00062f3:	84 c0                	test   al,al
c00062f5:	0f 89 bb fe ff ff    	jns    c00061b6 <Computer::detectFeatures()+0x74>
c00062fb:	e8 f0 5f 01 00       	call   c001c2f0 <avxDetect>
c0006300:	83 e0 01             	and    eax,0x1
c0006303:	c1 e0 05             	shl    eax,0x5
c0006306:	88 c2                	mov    dl,al
c0006308:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000630e:	83 e0 df             	and    eax,0xffffffdf
c0006311:	09 d0                	or     eax,edx
c0006313:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0006319:	83 c4 1c             	add    esp,0x1c
c000631c:	5b                   	pop    ebx
c000631d:	5e                   	pop    esi
c000631e:	5f                   	pop    edi
c000631f:	5d                   	pop    ebp
c0006320:	c3                   	ret    
c0006321:	83 ec 0c             	sub    esp,0xc
c0006324:	68 00 02 00 00       	push   0x200
c0006329:	e8 b6 82 00 00       	call   c000e5e4 <CPU::cpuidCheckEDX(unsigned int)>
c000632e:	83 c4 10             	add    esp,0x10
c0006331:	83 e0 01             	and    eax,0x1
c0006334:	88 c2                	mov    dl,al
c0006336:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000633c:	83 e0 fe             	and    eax,0xfffffffe
c000633f:	09 d0                	or     eax,edx
c0006341:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0006347:	e9 1c ff ff ff       	jmp    c0006268 <Computer::detectFeatures()+0x126>

c000634c <Computer::displayFeatures()>:
c000634c:	c3                   	ret    
c000634d:	90                   	nop

c000634e <Computer::rdmsr(unsigned int)>:
c000634e:	83 ec 0c             	sub    esp,0xc
c0006351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006355:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000635c:	74 0a                	je     c0006368 <Computer::rdmsr(unsigned int)+0x1a>
c000635e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006362:	0f 32                	rdmsr  
c0006364:	83 c4 0c             	add    esp,0xc
c0006367:	c3                   	ret    
c0006368:	83 ec 0c             	sub    esp,0xc
c000636b:	68 4a dd 01 c0       	push   0xc001dd4a
c0006370:	e8 68 94 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c0006375:	83 c4 10             	add    esp,0x10
c0006378:	eb e4                	jmp    c000635e <Computer::rdmsr(unsigned int)+0x10>

c000637a <Computer::wrmsr(unsigned int, unsigned long long)>:
c000637a:	57                   	push   edi
c000637b:	56                   	push   esi
c000637c:	52                   	push   edx
c000637d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006381:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006385:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006389:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0006390:	74 0e                	je     c00063a0 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006392:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006396:	89 f0                	mov    eax,esi
c0006398:	89 fa                	mov    edx,edi
c000639a:	0f 30                	wrmsr  
c000639c:	58                   	pop    eax
c000639d:	5e                   	pop    esi
c000639e:	5f                   	pop    edi
c000639f:	c3                   	ret    
c00063a0:	83 ec 0c             	sub    esp,0xc
c00063a3:	68 50 dd 01 c0       	push   0xc001dd50
c00063a8:	e8 30 94 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c00063ad:	83 c4 10             	add    esp,0x10
c00063b0:	eb e0                	jmp    c0006392 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00063b2 <Computer::shutdown()>:
c00063b2:	83 ec 0c             	sub    esp,0xc
c00063b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00063b9:	8b 10                	mov    edx,DWORD PTR [eax]
c00063bb:	6a 00                	push   0x0
c00063bd:	6a 00                	push   0x0
c00063bf:	6a 00                	push   0x0
c00063c1:	50                   	push   eax
c00063c2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00063c5:	83 c4 1c             	add    esp,0x1c
c00063c8:	c3                   	ret    
c00063c9:	90                   	nop

c00063ca <Computer::restart()>:
c00063ca:	83 ec 0c             	sub    esp,0xc
c00063cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00063d1:	8b 10                	mov    edx,DWORD PTR [eax]
c00063d3:	6a 00                	push   0x0
c00063d5:	6a 00                	push   0x0
c00063d7:	6a 01                	push   0x1
c00063d9:	50                   	push   eax
c00063da:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00063dd:	83 c4 1c             	add    esp,0x1c
c00063e0:	c3                   	ret    
c00063e1:	90                   	nop

c00063e2 <Computer::sleep()>:
c00063e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00063e6:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00063ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00063f0:	e9 67 7c 00 00       	jmp    c000e05c <ACPI::sleep()>
c00063f5:	90                   	nop

c00063f6 <Computer::nmiEnabled()>:
c00063f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00063fa:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006400:	c3                   	ret    
c0006401:	90                   	nop

c0006402 <Computer::readCMOS(unsigned char)>:
c0006402:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006406:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000640d:	19 c0                	sbb    eax,eax
c000640f:	83 e0 80             	and    eax,0xffffff80
c0006412:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006416:	e6 70                	out    0x70,al
c0006418:	e4 71                	in     al,0x71
c000641a:	c3                   	ret    
c000641b:	90                   	nop

c000641c <Computer::enableNMI(bool)>:
c000641c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006424:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000642a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006432:	eb ce                	jmp    c0006402 <Computer::readCMOS(unsigned char)>

c0006434 <Computer::open(int, int, void*)>:
c0006434:	56                   	push   esi
c0006435:	53                   	push   ebx
c0006436:	83 ec 10             	sub    esp,0x10
c0006439:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000643d:	f6 05 c0 07 02 c0 04 	test   BYTE PTR ds:0xc00207c0,0x4
c0006444:	68 56 dd 01 c0       	push   0xc001dd56
c0006449:	0f 94 05 e0 00 02 c0 	sete   BYTE PTR ds:0xc00200e0
c0006450:	e8 82 09 00 00       	call   c0006dd7 <Krnl::setBootMessage(char const*)>
c0006455:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000645c:	e8 1c 09 00 00       	call   c0006d7d <malloc>
c0006461:	89 04 24             	mov    DWORD PTR [esp],eax
c0006464:	89 c6                	mov    esi,eax
c0006466:	e8 95 77 00 00       	call   c000dc00 <ACPI::ACPI()>
c000646b:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c0006471:	58                   	pop    eax
c0006472:	5a                   	pop    edx
c0006473:	56                   	push   esi
c0006474:	53                   	push   ebx
c0006475:	e8 b0 4a 00 00       	call   c000af2a <Device::addChild(Device*)>
c000647a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000647d:	e8 c0 fc ff ff       	call   c0006142 <Computer::detectFeatures()>
c0006482:	59                   	pop    ecx
c0006483:	5e                   	pop    esi
c0006484:	6a 01                	push   0x1
c0006486:	53                   	push   ebx
c0006487:	e8 90 ff ff ff       	call   c000641c <Computer::enableNMI(bool)>
c000648c:	c7 04 24 fa dc 01 c0 	mov    DWORD PTR [esp],0xc001dcfa
c0006493:	e8 3f 09 00 00       	call   c0006dd7 <Krnl::setBootMessage(char const*)>
c0006498:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c000649f:	e8 d9 08 00 00       	call   c0006d7d <malloc>
c00064a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00064a7:	89 c6                	mov    esi,eax
c00064a9:	e8 ee 81 00 00       	call   c000e69c <CPU::CPU()>
c00064ae:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00064b4:	58                   	pop    eax
c00064b5:	5a                   	pop    edx
c00064b6:	56                   	push   esi
c00064b7:	53                   	push   ebx
c00064b8:	e8 6d 4a 00 00       	call   c000af2a <Device::addChild(Device*)>
c00064bd:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00064c3:	8b 10                	mov    edx,DWORD PTR [eax]
c00064c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00064c9:	6a 00                	push   0x0
c00064cb:	6a 00                	push   0x0
c00064cd:	50                   	push   eax
c00064ce:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00064d1:	83 c4 14             	add    esp,0x14
c00064d4:	68 04 de 01 c0       	push   0xc001de04
c00064d9:	e8 f9 08 00 00       	call   c0006dd7 <Krnl::setBootMessage(char const*)>
c00064de:	e8 08 f4 00 00       	call   c00158eb <Hal::initialiseCoprocessor()>
c00064e3:	c7 04 24 6e dd 01 c0 	mov    DWORD PTR [esp],0xc001dd6e
c00064ea:	e8 e8 08 00 00       	call   c0006dd7 <Krnl::setBootMessage(char const*)>
c00064ef:	c7 04 24 9c 5e 00 c0 	mov    DWORD PTR [esp],0xc0005e9c
c00064f6:	e8 5d c6 00 00       	call   c0012b58 <setupMultitasking(void (*)())>
c00064fb:	83 c4 14             	add    esp,0x14
c00064fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006503:	5b                   	pop    ebx
c0006504:	5e                   	pop    esi
c0006505:	c3                   	ret    

c0006506 <Computer::disableNMI()>:
c0006506:	6a 00                	push   0x0
c0006508:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000650c:	e8 0b ff ff ff       	call   c000641c <Computer::enableNMI(bool)>
c0006511:	58                   	pop    eax
c0006512:	5a                   	pop    edx
c0006513:	c3                   	ret    

c0006514 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006514:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006518:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000651f:	19 c0                	sbb    eax,eax
c0006521:	83 e0 80             	and    eax,0xffffff80
c0006524:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006528:	e6 70                	out    0x70,al
c000652a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000652e:	e6 71                	out    0x71,al
c0006530:	c3                   	ret    
c0006531:	90                   	nop

c0006532 <Computer::handleNMI()>:
c0006532:	56                   	push   esi
c0006533:	53                   	push   ebx
c0006534:	83 ec 10             	sub    esp,0x10
c0006537:	e4 92                	in     al,0x92
c0006539:	89 c6                	mov    esi,eax
c000653b:	e4 61                	in     al,0x61
c000653d:	68 89 dd 01 c0       	push   0xc001dd89
c0006542:	88 c3                	mov    bl,al
c0006544:	e8 be 35 00 00       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c0006549:	83 c4 10             	add    esp,0x10
c000654c:	83 e6 10             	and    esi,0x10
c000654f:	75 0d                	jne    c000655e <Computer::handleNMI()+0x2c>
c0006551:	f6 c3 40             	test   bl,0x40
c0006554:	75 1d                	jne    c0006573 <Computer::handleNMI()+0x41>
c0006556:	84 db                	test   bl,bl
c0006558:	78 2d                	js     c0006587 <Computer::handleNMI()+0x55>
c000655a:	58                   	pop    eax
c000655b:	5b                   	pop    ebx
c000655c:	5e                   	pop    esi
c000655d:	c3                   	ret    
c000655e:	83 ec 0c             	sub    esp,0xc
c0006561:	68 9a dd 01 c0       	push   0xc001dd9a
c0006566:	e8 72 92 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c000656b:	83 c4 10             	add    esp,0x10
c000656e:	f6 c3 40             	test   bl,0x40
c0006571:	74 e3                	je     c0006556 <Computer::handleNMI()+0x24>
c0006573:	83 ec 0c             	sub    esp,0xc
c0006576:	68 a7 dd 01 c0       	push   0xc001dda7
c000657b:	e8 5d 92 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c0006580:	83 c4 10             	add    esp,0x10
c0006583:	84 db                	test   bl,bl
c0006585:	79 d3                	jns    c000655a <Computer::handleNMI()+0x28>
c0006587:	c7 44 24 10 b1 dd 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ddb1
c000658f:	5a                   	pop    edx
c0006590:	5b                   	pop    ebx
c0006591:	5e                   	pop    esi
c0006592:	e9 46 92 00 00       	jmp    c000f7dd <Krnl::panic(char const*)>
c0006597:	90                   	nop

c0006598 <Computer::setDiskActivityLight(int, bool)>:
c0006598:	56                   	push   esi
c0006599:	53                   	push   ebx
c000659a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000659e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00065a3:	77 1b                	ja     c00065c0 <Computer::setDiskActivityLight(int, bool)+0x28>
c00065a5:	e4 92                	in     al,0x92
c00065a7:	bb 40 00 00 00       	mov    ebx,0x40
c00065ac:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00065b0:	89 da                	mov    edx,ebx
c00065b2:	d3 e2                	shl    edx,cl
c00065b4:	89 f1                	mov    ecx,esi
c00065b6:	f7 d2                	not    edx
c00065b8:	d3 e3                	shl    ebx,cl
c00065ba:	21 d0                	and    eax,edx
c00065bc:	09 d8                	or     eax,ebx
c00065be:	e6 92                	out    0x92,al
c00065c0:	5b                   	pop    ebx
c00065c1:	5e                   	pop    esi
c00065c2:	c3                   	ret    
c00065c3:	90                   	nop

c00065c4 <GDTEntry::setBase(unsigned int)>:
c00065c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00065cc:	89 c1                	mov    ecx,eax
c00065ce:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00065d2:	c1 e9 10             	shr    ecx,0x10
c00065d5:	c1 e8 18             	shr    eax,0x18
c00065d8:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00065db:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00065de:	c3                   	ret    
c00065df:	90                   	nop

c00065e0 <GDTEntry::setLimit(unsigned int)>:
c00065e0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00065e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065e8:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00065eb:	66 89 01             	mov    WORD PTR [ecx],ax
c00065ee:	83 e2 f0             	and    edx,0xfffffff0
c00065f1:	c1 e8 10             	shr    eax,0x10
c00065f4:	83 e0 0f             	and    eax,0xf
c00065f7:	09 d0                	or     eax,edx
c00065f9:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00065fc:	c3                   	ret    
c00065fd:	90                   	nop

c00065fe <GDT::GDT()>:
c00065fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006602:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000660c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006612:	90                   	nop
c0006613:	c3                   	ret    

c0006614 <GDT::addEntry(GDTEntry)>:
c0006614:	53                   	push   ebx
c0006615:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006619:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000661d:	8b 02                	mov    eax,DWORD PTR [edx]
c000661f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006623:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0006627:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000662b:	8d 48 01             	lea    ecx,[eax+0x1]
c000662e:	c1 e0 03             	shl    eax,0x3
c0006631:	89 0a                	mov    DWORD PTR [edx],ecx
c0006633:	5b                   	pop    ebx
c0006634:	c3                   	ret    
c0006635:	90                   	nop

c0006636 <GDT::getNumberOfEntries()>:
c0006636:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000663a:	8b 00                	mov    eax,DWORD PTR [eax]
c000663c:	c3                   	ret    
c000663d:	90                   	nop

c000663e <GDT::flush()>:
c000663e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006642:	8b 10                	mov    edx,DWORD PTR [eax]
c0006644:	83 c0 04             	add    eax,0x4
c0006647:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000664e:	a3 b2 07 02 c0       	mov    ds:0xc00207b2,eax
c0006653:	66 89 15 b0 07 02 c0 	mov    WORD PTR ds:0xc00207b0,dx
c000665a:	e9 1e 9d ff ff       	jmp    c000037d <loadGDT>
c000665f:	90                   	nop

c0006660 <GDT::setup()>:
c0006660:	57                   	push   edi
c0006661:	56                   	push   esi
c0006662:	53                   	push   ebx
c0006663:	83 ec 40             	sub    esp,0x40
c0006666:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000666a:	6a 00                	push   0x0
c000666c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0006670:	56                   	push   esi
c0006671:	e8 4e ff ff ff       	call   c00065c4 <GDTEntry::setBase(unsigned int)>
c0006676:	6a 00                	push   0x0
c0006678:	56                   	push   esi
c0006679:	e8 62 ff ff ff       	call   c00065e0 <GDTEntry::setLimit(unsigned int)>
c000667e:	81 64 24 3c ff 00 0f ff 	and    DWORD PTR [esp+0x3c],0xff0f00ff
c0006686:	6a 00                	push   0x0
c0006688:	8d 74 24 44          	lea    esi,[esp+0x44]
c000668c:	56                   	push   esi
c000668d:	e8 32 ff ff ff       	call   c00065c4 <GDTEntry::setBase(unsigned int)>
c0006692:	68 ff ff ff 00       	push   0xffffff
c0006697:	56                   	push   esi
c0006698:	e8 43 ff ff ff       	call   c00065e0 <GDTEntry::setLimit(unsigned int)>
c000669d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00066a1:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00066a6:	0d 00 9a c0 00       	or     eax,0xc09a00
c00066ab:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00066af:	83 c4 20             	add    esp,0x20
c00066b2:	6a 00                	push   0x0
c00066b4:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00066b8:	56                   	push   esi
c00066b9:	e8 06 ff ff ff       	call   c00065c4 <GDTEntry::setBase(unsigned int)>
c00066be:	68 ff ff ff 00       	push   0xffffff
c00066c3:	56                   	push   esi
c00066c4:	e8 17 ff ff ff       	call   c00065e0 <GDTEntry::setLimit(unsigned int)>
c00066c9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00066cd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00066d1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00066d5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00066d9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00066dd:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00066e2:	0d 00 92 c0 00       	or     eax,0xc09200
c00066e7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00066eb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00066ef:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00066f3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00066f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00066fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00066ff:	89 fa                	mov    edx,edi
c0006701:	80 cc 60             	or     ah,0x60
c0006704:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c000670a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000670e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0006712:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006716:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000671a:	80 cc 60             	or     ah,0x60
c000671d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0006721:	89 f8                	mov    eax,edi
c0006723:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0006728:	09 d0                	or     eax,edx
c000672a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000672e:	89 c7                	mov    edi,eax
c0006730:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006734:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0006738:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000673c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006740:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0006746:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000674a:	25 ff ff 00 ff       	and    eax,0xff00ffff
c000674f:	09 d0                	or     eax,edx
c0006751:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0006755:	83 c4 0c             	add    esp,0xc
c0006758:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000675c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0006760:	53                   	push   ebx
c0006761:	e8 ae fe ff ff       	call   c0006614 <GDT::addEntry(GDTEntry)>
c0006766:	83 c4 0c             	add    esp,0xc
c0006769:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000676d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0006771:	53                   	push   ebx
c0006772:	e8 9d fe ff ff       	call   c0006614 <GDT::addEntry(GDTEntry)>
c0006777:	83 c4 0c             	add    esp,0xc
c000677a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000677e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006782:	53                   	push   ebx
c0006783:	e8 8c fe ff ff       	call   c0006614 <GDT::addEntry(GDTEntry)>
c0006788:	83 c4 0c             	add    esp,0xc
c000678b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000678f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006793:	53                   	push   ebx
c0006794:	e8 7b fe ff ff       	call   c0006614 <GDT::addEntry(GDTEntry)>
c0006799:	83 c4 0c             	add    esp,0xc
c000679c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00067a0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00067a4:	53                   	push   ebx
c00067a5:	e8 6a fe ff ff       	call   c0006614 <GDT::addEntry(GDTEntry)>
c00067aa:	83 c4 0c             	add    esp,0xc
c00067ad:	57                   	push   edi
c00067ae:	56                   	push   esi
c00067af:	53                   	push   ebx
c00067b0:	e8 5f fe ff ff       	call   c0006614 <GDT::addEntry(GDTEntry)>
c00067b5:	83 c4 0c             	add    esp,0xc
c00067b8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00067bc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00067c0:	53                   	push   ebx
c00067c1:	e8 4e fe ff ff       	call   c0006614 <GDT::addEntry(GDTEntry)>
c00067c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00067c9:	e8 70 fe ff ff       	call   c000663e <GDT::flush()>
c00067ce:	83 c4 50             	add    esp,0x50
c00067d1:	5b                   	pop    ebx
c00067d2:	5e                   	pop    esi
c00067d3:	5f                   	pop    edi
c00067d4:	c3                   	ret    

c00067d5 <idleFunction(void*)>:
c00067d5:	83 ec 0c             	sub    esp,0xc
c00067d8:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c00067dd:	48                   	dec    eax
c00067de:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c00067e3:	75 01                	jne    c00067e6 <idleFunction(void*)+0x11>
c00067e5:	fb                   	sti    
c00067e6:	f4                   	hlt    
c00067e7:	e8 86 63 01 00       	call   c001cb72 <idleCommon()>
c00067ec:	eb f8                	jmp    c00067e6 <idleFunction(void*)+0x11>
c00067ee:	66 90                	xchg   ax,ax

c00067f0 <IDTEntry::IDTEntry(bool)>:
c00067f0:	83 ec 04             	sub    esp,0x4
c00067f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00067f7:	88 04 24             	mov    BYTE PTR [esp],al
c00067fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067fe:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0006804:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006808:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000680c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006810:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0006813:	83 e2 f0             	and    edx,0xfffffff0
c0006816:	83 ca 0e             	or     edx,0xe
c0006819:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000681c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006820:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0006823:	83 e2 ef             	and    edx,0xffffffef
c0006826:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0006829:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000682d:	74 05                	je     c0006834 <IDTEntry::IDTEntry(bool)+0x44>
c000682f:	b2 03                	mov    dl,0x3
c0006831:	eb 05                	jmp    c0006838 <IDTEntry::IDTEntry(bool)+0x48>
c0006833:	90                   	nop
c0006834:	b2 00                	mov    dl,0x0
c0006836:	66 90                	xchg   ax,ax
c0006838:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683c:	83 e2 03             	and    edx,0x3
c000683f:	88 d1                	mov    cl,dl
c0006841:	c1 e1 05             	shl    ecx,0x5
c0006844:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0006847:	83 e2 9f             	and    edx,0xffffff9f
c000684a:	09 ca                	or     edx,ecx
c000684c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000684f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006853:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0006856:	83 ca 80             	or     edx,0xffffff80
c0006859:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000685c:	90                   	nop
c000685d:	83 c4 04             	add    esp,0x4
c0006860:	c3                   	ret    
c0006861:	90                   	nop

c0006862 <IDTEntry::setOffset(unsigned int)>:
c0006862:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006866:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686a:	66 89 02             	mov    WORD PTR [edx],ax
c000686d:	c1 e8 10             	shr    eax,0x10
c0006870:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0006874:	c3                   	ret    
c0006875:	90                   	nop
c0006876:	66 90                	xchg   ax,ax

c0006878 <IDT::IDT()>:
c0006878:	90                   	nop
c0006879:	c3                   	ret    

c000687a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000687a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000687e:	83 c0 30             	add    eax,0x30
c0006881:	c3                   	ret    

c0006882 <IDT::addEntry(IDTEntry, int)>:
c0006882:	53                   	push   ebx
c0006883:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000688b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000688f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006893:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0006896:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000689a:	5b                   	pop    ebx
c000689b:	c3                   	ret    

c000689c <IDT::addEntry(int, void (*)(), bool)>:
c000689c:	53                   	push   ebx
c000689d:	83 ec 10             	sub    esp,0x10
c00068a0:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00068a5:	50                   	push   eax
c00068a6:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00068aa:	53                   	push   ebx
c00068ab:	e8 40 ff ff ff       	call   c00067f0 <IDTEntry::IDTEntry(bool)>
c00068b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00068b4:	53                   	push   ebx
c00068b5:	e8 a8 ff ff ff       	call   c0006862 <IDTEntry::setOffset(unsigned int)>
c00068ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00068be:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00068c2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00068c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00068ca:	e8 b3 ff ff ff       	call   c0006882 <IDT::addEntry(IDTEntry, int)>
c00068cf:	83 c4 30             	add    esp,0x30
c00068d2:	5b                   	pop    ebx
c00068d3:	c3                   	ret    

c00068d4 <IDT::flush()>:
c00068d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00068d8:	66 c7 05 b8 07 02 c0 ff 07 	mov    WORD PTR ds:0xc00207b8,0x7ff
c00068e1:	a3 ba 07 02 c0       	mov    ds:0xc00207ba,eax
c00068e6:	0f 01 1d b8 07 02 c0 	lidtd  ds:0xc00207b8
c00068ed:	c3                   	ret    

c00068ee <IDT::setup()>:
c00068ee:	57                   	push   edi
c00068ef:	56                   	push   esi
c00068f0:	53                   	push   ebx
c00068f1:	83 ec 10             	sub    esp,0x10
c00068f4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068f8:	6a 00                	push   0x0
c00068fa:	68 80 c3 01 c0       	push   0xc001c380
c00068ff:	6a 00                	push   0x0
c0006901:	53                   	push   ebx
c0006902:	e8 95 ff ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006907:	6a 00                	push   0x0
c0006909:	68 90 c3 01 c0       	push   0xc001c390
c000690e:	6a 01                	push   0x1
c0006910:	53                   	push   ebx
c0006911:	e8 86 ff ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006916:	83 c4 20             	add    esp,0x20
c0006919:	6a 00                	push   0x0
c000691b:	68 9a c3 01 c0       	push   0xc001c39a
c0006920:	6a 02                	push   0x2
c0006922:	53                   	push   ebx
c0006923:	e8 74 ff ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006928:	6a 00                	push   0x0
c000692a:	68 a4 c3 01 c0       	push   0xc001c3a4
c000692f:	6a 03                	push   0x3
c0006931:	53                   	push   ebx
c0006932:	e8 65 ff ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006937:	83 c4 20             	add    esp,0x20
c000693a:	6a 00                	push   0x0
c000693c:	68 ae c3 01 c0       	push   0xc001c3ae
c0006941:	6a 04                	push   0x4
c0006943:	53                   	push   ebx
c0006944:	e8 53 ff ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006949:	6a 00                	push   0x0
c000694b:	68 b8 c3 01 c0       	push   0xc001c3b8
c0006950:	6a 05                	push   0x5
c0006952:	53                   	push   ebx
c0006953:	e8 44 ff ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006958:	83 c4 20             	add    esp,0x20
c000695b:	6a 00                	push   0x0
c000695d:	68 c2 c3 01 c0       	push   0xc001c3c2
c0006962:	6a 06                	push   0x6
c0006964:	53                   	push   ebx
c0006965:	e8 32 ff ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c000696a:	6a 00                	push   0x0
c000696c:	68 cc c3 01 c0       	push   0xc001c3cc
c0006971:	6a 07                	push   0x7
c0006973:	53                   	push   ebx
c0006974:	e8 23 ff ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006979:	83 c4 20             	add    esp,0x20
c000697c:	6a 00                	push   0x0
c000697e:	68 d6 c3 01 c0       	push   0xc001c3d6
c0006983:	6a 08                	push   0x8
c0006985:	53                   	push   ebx
c0006986:	e8 11 ff ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c000698b:	6a 00                	push   0x0
c000698d:	68 de c3 01 c0       	push   0xc001c3de
c0006992:	6a 09                	push   0x9
c0006994:	53                   	push   ebx
c0006995:	e8 02 ff ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c000699a:	83 c4 20             	add    esp,0x20
c000699d:	6a 00                	push   0x0
c000699f:	68 e8 c3 01 c0       	push   0xc001c3e8
c00069a4:	6a 0a                	push   0xa
c00069a6:	53                   	push   ebx
c00069a7:	e8 f0 fe ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c00069ac:	6a 00                	push   0x0
c00069ae:	68 f0 c3 01 c0       	push   0xc001c3f0
c00069b3:	6a 0b                	push   0xb
c00069b5:	53                   	push   ebx
c00069b6:	e8 e1 fe ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c00069bb:	83 c4 20             	add    esp,0x20
c00069be:	6a 00                	push   0x0
c00069c0:	68 f8 c3 01 c0       	push   0xc001c3f8
c00069c5:	6a 0c                	push   0xc
c00069c7:	53                   	push   ebx
c00069c8:	e8 cf fe ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c00069cd:	6a 00                	push   0x0
c00069cf:	68 00 c4 01 c0       	push   0xc001c400
c00069d4:	6a 0d                	push   0xd
c00069d6:	53                   	push   ebx
c00069d7:	e8 c0 fe ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c00069dc:	83 c4 20             	add    esp,0x20
c00069df:	6a 00                	push   0x0
c00069e1:	68 08 c4 01 c0       	push   0xc001c408
c00069e6:	6a 0e                	push   0xe
c00069e8:	53                   	push   ebx
c00069e9:	e8 ae fe ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c00069ee:	6a 00                	push   0x0
c00069f0:	68 10 c4 01 c0       	push   0xc001c410
c00069f5:	6a 0f                	push   0xf
c00069f7:	53                   	push   ebx
c00069f8:	e8 9f fe ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c00069fd:	83 c4 20             	add    esp,0x20
c0006a00:	6a 00                	push   0x0
c0006a02:	68 1a c4 01 c0       	push   0xc001c41a
c0006a07:	6a 10                	push   0x10
c0006a09:	53                   	push   ebx
c0006a0a:	e8 8d fe ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006a0f:	6a 00                	push   0x0
c0006a11:	68 24 c4 01 c0       	push   0xc001c424
c0006a16:	6a 11                	push   0x11
c0006a18:	53                   	push   ebx
c0006a19:	e8 7e fe ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006a1e:	83 c4 20             	add    esp,0x20
c0006a21:	6a 00                	push   0x0
c0006a23:	68 2e c4 01 c0       	push   0xc001c42e
c0006a28:	6a 12                	push   0x12
c0006a2a:	53                   	push   ebx
c0006a2b:	e8 6c fe ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006a30:	6a 01                	push   0x1
c0006a32:	68 c8 c4 01 c0       	push   0xc001c4c8
c0006a37:	6a 60                	push   0x60
c0006a39:	53                   	push   ebx
c0006a3a:	e8 5d fe ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006a3f:	83 c4 20             	add    esp,0x20
c0006a42:	6a 00                	push   0x0
c0006a44:	68 cf c4 01 c0       	push   0xc001c4cf
c0006a49:	6a 20                	push   0x20
c0006a4b:	53                   	push   ebx
c0006a4c:	e8 4b fe ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006a51:	6a 00                	push   0x0
c0006a53:	68 ba c4 01 c0       	push   0xc001c4ba
c0006a58:	6a 21                	push   0x21
c0006a5a:	53                   	push   ebx
c0006a5b:	e8 3c fe ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006a60:	83 c4 20             	add    esp,0x20
c0006a63:	6a 00                	push   0x0
c0006a65:	68 c1 c4 01 c0       	push   0xc001c4c1
c0006a6a:	6a 22                	push   0x22
c0006a6c:	53                   	push   ebx
c0006a6d:	e8 2a fe ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006a72:	6a 00                	push   0x0
c0006a74:	68 38 c4 01 c0       	push   0xc001c438
c0006a79:	6a 23                	push   0x23
c0006a7b:	53                   	push   ebx
c0006a7c:	e8 1b fe ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006a81:	83 c4 20             	add    esp,0x20
c0006a84:	6a 00                	push   0x0
c0006a86:	68 42 c4 01 c0       	push   0xc001c442
c0006a8b:	6a 24                	push   0x24
c0006a8d:	53                   	push   ebx
c0006a8e:	e8 09 fe ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006a93:	6a 00                	push   0x0
c0006a95:	68 4c c4 01 c0       	push   0xc001c44c
c0006a9a:	6a 25                	push   0x25
c0006a9c:	53                   	push   ebx
c0006a9d:	e8 fa fd ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006aa2:	83 c4 20             	add    esp,0x20
c0006aa5:	6a 00                	push   0x0
c0006aa7:	68 56 c4 01 c0       	push   0xc001c456
c0006aac:	6a 26                	push   0x26
c0006aae:	53                   	push   ebx
c0006aaf:	e8 e8 fd ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006ab4:	6a 00                	push   0x0
c0006ab6:	68 60 c4 01 c0       	push   0xc001c460
c0006abb:	6a 27                	push   0x27
c0006abd:	53                   	push   ebx
c0006abe:	e8 d9 fd ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006ac3:	83 c4 20             	add    esp,0x20
c0006ac6:	6a 00                	push   0x0
c0006ac8:	68 6a c4 01 c0       	push   0xc001c46a
c0006acd:	6a 28                	push   0x28
c0006acf:	53                   	push   ebx
c0006ad0:	e8 c7 fd ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006ad5:	6a 00                	push   0x0
c0006ad7:	68 74 c4 01 c0       	push   0xc001c474
c0006adc:	6a 29                	push   0x29
c0006ade:	53                   	push   ebx
c0006adf:	e8 b8 fd ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006ae4:	83 c4 20             	add    esp,0x20
c0006ae7:	6a 00                	push   0x0
c0006ae9:	68 7e c4 01 c0       	push   0xc001c47e
c0006aee:	6a 2a                	push   0x2a
c0006af0:	53                   	push   ebx
c0006af1:	e8 a6 fd ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006af6:	6a 00                	push   0x0
c0006af8:	68 88 c4 01 c0       	push   0xc001c488
c0006afd:	6a 2b                	push   0x2b
c0006aff:	53                   	push   ebx
c0006b00:	e8 97 fd ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006b05:	83 c4 20             	add    esp,0x20
c0006b08:	6a 00                	push   0x0
c0006b0a:	68 92 c4 01 c0       	push   0xc001c492
c0006b0f:	6a 2c                	push   0x2c
c0006b11:	53                   	push   ebx
c0006b12:	e8 85 fd ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006b17:	6a 00                	push   0x0
c0006b19:	68 9c c4 01 c0       	push   0xc001c49c
c0006b1e:	6a 2d                	push   0x2d
c0006b20:	53                   	push   ebx
c0006b21:	e8 76 fd ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006b26:	83 c4 20             	add    esp,0x20
c0006b29:	6a 00                	push   0x0
c0006b2b:	68 a6 c4 01 c0       	push   0xc001c4a6
c0006b30:	6a 2e                	push   0x2e
c0006b32:	53                   	push   ebx
c0006b33:	e8 64 fd ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006b38:	6a 00                	push   0x0
c0006b3a:	68 b0 c4 01 c0       	push   0xc001c4b0
c0006b3f:	6a 2f                	push   0x2f
c0006b41:	53                   	push   ebx
c0006b42:	e8 55 fd ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006b47:	83 c4 20             	add    esp,0x20
c0006b4a:	6a 00                	push   0x0
c0006b4c:	68 06 c5 01 c0       	push   0xc001c506
c0006b51:	6a 30                	push   0x30
c0006b53:	53                   	push   ebx
c0006b54:	e8 43 fd ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006b59:	6a 00                	push   0x0
c0006b5b:	68 10 c5 01 c0       	push   0xc001c510
c0006b60:	6a 31                	push   0x31
c0006b62:	53                   	push   ebx
c0006b63:	e8 34 fd ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006b68:	83 c4 20             	add    esp,0x20
c0006b6b:	6a 00                	push   0x0
c0006b6d:	68 1a c5 01 c0       	push   0xc001c51a
c0006b72:	6a 32                	push   0x32
c0006b74:	53                   	push   ebx
c0006b75:	e8 22 fd ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006b7a:	6a 00                	push   0x0
c0006b7c:	68 24 c5 01 c0       	push   0xc001c524
c0006b81:	6a 33                	push   0x33
c0006b83:	53                   	push   ebx
c0006b84:	e8 13 fd ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006b89:	83 c4 20             	add    esp,0x20
c0006b8c:	6a 00                	push   0x0
c0006b8e:	68 2e c5 01 c0       	push   0xc001c52e
c0006b93:	6a 34                	push   0x34
c0006b95:	53                   	push   ebx
c0006b96:	e8 01 fd ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006b9b:	6a 00                	push   0x0
c0006b9d:	68 38 c5 01 c0       	push   0xc001c538
c0006ba2:	6a 35                	push   0x35
c0006ba4:	53                   	push   ebx
c0006ba5:	e8 f2 fc ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006baa:	83 c4 20             	add    esp,0x20
c0006bad:	6a 00                	push   0x0
c0006baf:	68 42 c5 01 c0       	push   0xc001c542
c0006bb4:	6a 36                	push   0x36
c0006bb6:	53                   	push   ebx
c0006bb7:	e8 e0 fc ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006bbc:	6a 00                	push   0x0
c0006bbe:	68 4c c5 01 c0       	push   0xc001c54c
c0006bc3:	6a 37                	push   0x37
c0006bc5:	53                   	push   ebx
c0006bc6:	e8 d1 fc ff ff       	call   c000689c <IDT::addEntry(int, void (*)(), bool)>
c0006bcb:	83 c4 1c             	add    esp,0x1c
c0006bce:	6a 03                	push   0x3
c0006bd0:	6a 02                	push   0x2
c0006bd2:	ff 35 94 08 02 c0    	push   DWORD PTR ds:0xc0020894
c0006bd8:	e8 1f 24 00 00       	call   c0008ffc <VAS::allocatePages(int, int)>
c0006bdd:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0006be4:	89 c6                	mov    esi,eax
c0006be6:	e8 92 01 00 00       	call   c0006d7d <malloc>
c0006beb:	81 c6 00 20 00 00    	add    esi,0x2000
c0006bf1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006bf4:	89 c7                	mov    edi,eax
c0006bf6:	e8 ed 15 00 00       	call   c00081e8 <TSS::TSS()>
c0006bfb:	83 c4 0c             	add    esp,0xc
c0006bfe:	68 d6 c3 01 c0       	push   0xc001c3d6
c0006c03:	56                   	push   esi
c0006c04:	57                   	push   edi
c0006c05:	e8 22 16 00 00       	call   c000822c <TSS::setup(unsigned long, unsigned long)>
c0006c0a:	89 c6                	mov    esi,eax
c0006c0c:	58                   	pop    eax
c0006c0d:	5a                   	pop    edx
c0006c0e:	6a 00                	push   0x0
c0006c10:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c14:	50                   	push   eax
c0006c15:	e8 d6 fb ff ff       	call   c00067f0 <IDTEntry::IDTEntry(bool)>
c0006c1a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006c1e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0006c23:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0006c2a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0006c30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006c34:	80 ce 05             	or     dh,0x5
c0006c37:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0006c3a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006c3e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006c42:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0006c45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006c48:	e8 87 fc ff ff       	call   c00068d4 <IDT::flush()>
c0006c4d:	83 c4 20             	add    esp,0x20
c0006c50:	5b                   	pop    ebx
c0006c51:	5e                   	pop    esi
c0006c52:	5f                   	pop    edi
c0006c53:	c3                   	ret    

c0006c54 <sbrk>:
c0006c54:	55                   	push   ebp
c0006c55:	57                   	push   edi
c0006c56:	56                   	push   esi
c0006c57:	53                   	push   ebx
c0006c58:	83 ec 1c             	sub    esp,0x1c
c0006c5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0006c5f:	85 c0                	test   eax,eax
c0006c61:	74 5f                	je     c0006cc2 <sbrk+0x6e>
c0006c63:	78 64                	js     c0006cc9 <sbrk+0x75>
c0006c65:	8b 15 6c ff 01 c0    	mov    edx,DWORD PTR ds:0xc001ff6c
c0006c6b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006c6f:	05 ff 0f 00 00       	add    eax,0xfff
c0006c74:	89 c5                	mov    ebp,eax
c0006c76:	78 69                	js     c0006ce1 <sbrk+0x8d>
c0006c78:	c1 fd 0c             	sar    ebp,0xc
c0006c7b:	bb 00 00 00 00       	mov    ebx,0x0
c0006c80:	8b 35 94 08 02 c0    	mov    esi,DWORD PTR ds:0xc0020894
c0006c86:	8b 3d 6c ff 01 c0    	mov    edi,DWORD PTR ds:0xc001ff6c
c0006c8c:	e8 b3 04 00 00       	call   c0007144 <Phys::allocatePage()>
c0006c91:	68 01 04 00 00       	push   0x401
c0006c96:	57                   	push   edi
c0006c97:	50                   	push   eax
c0006c98:	56                   	push   esi
c0006c99:	e8 5a 22 00 00       	call   c0008ef8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0006c9e:	81 05 6c ff 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001ff6c,0x1000
c0006ca8:	43                   	inc    ebx
c0006ca9:	83 c4 10             	add    esp,0x10
c0006cac:	39 dd                	cmp    ebp,ebx
c0006cae:	75 d0                	jne    c0006c80 <sbrk+0x2c>
c0006cb0:	0f 20 d8             	mov    eax,cr3
c0006cb3:	0f 22 d8             	mov    cr3,eax
c0006cb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cba:	83 c4 1c             	add    esp,0x1c
c0006cbd:	5b                   	pop    ebx
c0006cbe:	5e                   	pop    esi
c0006cbf:	5f                   	pop    edi
c0006cc0:	5d                   	pop    ebp
c0006cc1:	c3                   	ret    
c0006cc2:	a1 6c ff 01 c0       	mov    eax,ds:0xc001ff6c
c0006cc7:	eb f1                	jmp    c0006cba <sbrk+0x66>
c0006cc9:	83 ec 08             	sub    esp,0x8
c0006ccc:	50                   	push   eax
c0006ccd:	68 54 de 01 c0       	push   0xc001de54
c0006cd2:	e8 30 2e 00 00       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c0006cd7:	83 c4 10             	add    esp,0x10
c0006cda:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006cdf:	eb d9                	jmp    c0006cba <sbrk+0x66>
c0006ce1:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0006ce7:	eb 8f                	jmp    c0006c78 <sbrk+0x24>

c0006ce9 <mmap>:
c0006ce9:	83 ec 18             	sub    esp,0x18
c0006cec:	68 84 de 01 c0       	push   0xc001de84
c0006cf1:	e8 e7 8a 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c0006cf6:	b8 00 00 00 00       	mov    eax,0x0
c0006cfb:	83 c4 1c             	add    esp,0x1c
c0006cfe:	c3                   	ret    

c0006cff <munmap>:
c0006cff:	83 ec 18             	sub    esp,0x18
c0006d02:	68 89 de 01 c0       	push   0xc001de89
c0006d07:	e8 d1 8a 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c0006d0c:	b8 00 00 00 00       	mov    eax,0x0
c0006d11:	83 c4 1c             	add    esp,0x1c
c0006d14:	c3                   	ret    

c0006d15 <liballoc_lock()>:
c0006d15:	fa                   	cli    
c0006d16:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c0006d1c:	b8 00 00 00 00       	mov    eax,0x0
c0006d21:	c3                   	ret    

c0006d22 <liballoc_unlock()>:
c0006d22:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0006d27:	48                   	dec    eax
c0006d28:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c0006d2d:	75 01                	jne    c0006d30 <liballoc_unlock()+0xe>
c0006d2f:	fb                   	sti    
c0006d30:	b8 00 00 00 00       	mov    eax,0x0
c0006d35:	c3                   	ret    

c0006d36 <liballoc_alloc(int)>:
c0006d36:	83 ec 10             	sub    esp,0x10
c0006d39:	6a 01                	push   0x1
c0006d3b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006d3f:	ff 35 94 08 02 c0    	push   DWORD PTR ds:0xc0020894
c0006d45:	e8 b2 22 00 00       	call   c0008ffc <VAS::allocatePages(int, int)>
c0006d4a:	83 c4 1c             	add    esp,0x1c
c0006d4d:	c3                   	ret    

c0006d4e <liballoc_free(void*, int)>:
c0006d4e:	83 ec 14             	sub    esp,0x14
c0006d51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006d55:	ff 35 94 08 02 c0    	push   DWORD PTR ds:0xc0020894
c0006d5b:	e8 5c 1f 00 00       	call   c0008cbc <VAS::freeAllocatedPages(unsigned long)>
c0006d60:	b8 00 00 00 00       	mov    eax,0x0
c0006d65:	83 c4 1c             	add    esp,0x1c
c0006d68:	c3                   	ret    

c0006d69 <realloc>:
c0006d69:	83 ec 14             	sub    esp,0x14
c0006d6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006d70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006d74:	e8 0b a6 ff ff       	call   c0001384 <dlrealloc>
c0006d79:	83 c4 1c             	add    esp,0x1c
c0006d7c:	c3                   	ret    

c0006d7d <malloc>:
c0006d7d:	83 ec 18             	sub    esp,0x18
c0006d80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006d84:	e8 be a0 ff ff       	call   c0000e47 <dlmalloc>
c0006d89:	83 c4 1c             	add    esp,0x1c
c0006d8c:	c3                   	ret    

c0006d8d <free>:
c0006d8d:	83 ec 18             	sub    esp,0x18
c0006d90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006d94:	e8 53 9d ff ff       	call   c0000aec <dlfree>
c0006d99:	83 c4 1c             	add    esp,0x1c
c0006d9c:	c3                   	ret    

c0006d9d <rfree>:
c0006d9d:	83 ec 18             	sub    esp,0x18
c0006da0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006da4:	e8 43 9d ff ff       	call   c0000aec <dlfree>
c0006da9:	83 c4 1c             	add    esp,0x1c
c0006dac:	c3                   	ret    

c0006dad <calloc>:
c0006dad:	56                   	push   esi
c0006dae:	53                   	push   ebx
c0006daf:	83 ec 10             	sub    esp,0x10
c0006db2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006db6:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0006dbb:	53                   	push   ebx
c0006dbc:	e8 bc ff ff ff       	call   c0006d7d <malloc>
c0006dc1:	89 c6                	mov    esi,eax
c0006dc3:	83 c4 0c             	add    esp,0xc
c0006dc6:	53                   	push   ebx
c0006dc7:	6a 00                	push   0x0
c0006dc9:	50                   	push   eax
c0006dca:	e8 d9 96 ff ff       	call   c00004a8 <memset>
c0006dcf:	89 f0                	mov    eax,esi
c0006dd1:	83 c4 14             	add    esp,0x14
c0006dd4:	5b                   	pop    ebx
c0006dd5:	5e                   	pop    esi
c0006dd6:	c3                   	ret    

c0006dd7 <Krnl::setBootMessage(char const*)>:
c0006dd7:	57                   	push   edi
c0006dd8:	56                   	push   esi
c0006dd9:	53                   	push   ebx
c0006dda:	81 ec a4 00 00 00    	sub    esp,0xa4
c0006de0:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0006de7:	68 9e 00 00 00       	push   0x9e
c0006dec:	6a 00                	push   0x0
c0006dee:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0006df2:	56                   	push   esi
c0006df3:	e8 b0 96 ff ff       	call   c00004a8 <memset>
c0006df8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006dfb:	e8 c4 96 ff ff       	call   c00004c4 <strlen>
c0006e00:	ba 50 00 00 00       	mov    edx,0x50
c0006e05:	83 c4 10             	add    esp,0x10
c0006e08:	29 c2                	sub    edx,eax
c0006e0a:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0006e0e:	d1 ea                	shr    edx,1
c0006e10:	84 c0                	test   al,al
c0006e12:	74 19                	je     c0006e2d <Krnl::setBootMessage(char const*)+0x56>
c0006e14:	01 d2                	add    edx,edx
c0006e16:	43                   	inc    ebx
c0006e17:	01 f2                	add    edx,esi
c0006e19:	80 cc 0f             	or     ah,0xf
c0006e1c:	83 c2 02             	add    edx,0x2
c0006e1f:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0006e23:	43                   	inc    ebx
c0006e24:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0006e29:	84 c0                	test   al,al
c0006e2b:	75 ec                	jne    c0006e19 <Krnl::setBootMessage(char const*)+0x42>
c0006e2d:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0006e32:	b9 9e 00 00 00       	mov    ecx,0x9e
c0006e37:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006e39:	81 c4 a0 00 00 00    	add    esp,0xa0
c0006e3f:	5b                   	pop    ebx
c0006e40:	5e                   	pop    esi
c0006e41:	5f                   	pop    edi
c0006e42:	c3                   	ret    

c0006e43 <kernel_main>:
c0006e43:	55                   	push   ebp
c0006e44:	57                   	push   edi
c0006e45:	bf f9 03 00 00       	mov    edi,0x3f9
c0006e4a:	56                   	push   esi
c0006e4b:	89 fa                	mov    edx,edi
c0006e4d:	53                   	push   ebx
c0006e4e:	31 f6                	xor    esi,esi
c0006e50:	83 ec 38             	sub    esp,0x38
c0006e53:	a1 00 05 00 00       	mov    eax,ds:0x500
c0006e58:	a3 c0 07 02 c0       	mov    ds:0xc00207c0,eax
c0006e5d:	89 f0                	mov    eax,esi
c0006e5f:	ee                   	out    dx,al
c0006e60:	bb fb 03 00 00       	mov    ebx,0x3fb
c0006e65:	b0 80                	mov    al,0x80
c0006e67:	89 da                	mov    edx,ebx
c0006e69:	ee                   	out    dx,al
c0006e6a:	b1 03                	mov    cl,0x3
c0006e6c:	ba f8 03 00 00       	mov    edx,0x3f8
c0006e71:	88 c8                	mov    al,cl
c0006e73:	ee                   	out    dx,al
c0006e74:	89 f0                	mov    eax,esi
c0006e76:	89 fa                	mov    edx,edi
c0006e78:	ee                   	out    dx,al
c0006e79:	88 c8                	mov    al,cl
c0006e7b:	89 da                	mov    edx,ebx
c0006e7d:	ee                   	out    dx,al
c0006e7e:	b0 c7                	mov    al,0xc7
c0006e80:	ba fa 03 00 00       	mov    edx,0x3fa
c0006e85:	ee                   	out    dx,al
c0006e86:	b0 0b                	mov    al,0xb
c0006e88:	ba fc 03 00 00       	mov    edx,0x3fc
c0006e8d:	ee                   	out    dx,al
c0006e8e:	68 90 de 01 c0       	push   0xc001de90
c0006e93:	e8 6f 2c 00 00       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c0006e98:	0f be 05 80 ff 01 c0 	movsx  eax,BYTE PTR ds:0xc001ff80
c0006e9f:	83 c4 10             	add    esp,0x10
c0006ea2:	84 c0                	test   al,al
c0006ea4:	74 5c                	je     c0006f02 <kernel_main+0xbf>
c0006ea6:	31 db                	xor    ebx,ebx
c0006ea8:	bd 0a 00 00 00       	mov    ebp,0xa
c0006ead:	bf 05 00 00 00       	mov    edi,0x5
c0006eb2:	31 f6                	xor    esi,esi
c0006eb4:	eb 14                	jmp    c0006eca <kernel_main+0x87>
c0006eb6:	47                   	inc    edi
c0006eb7:	bd 0a 00 00 00       	mov    ebp,0xa
c0006ebc:	31 f6                	xor    esi,esi
c0006ebe:	43                   	inc    ebx
c0006ebf:	0f be 83 80 ff 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe0080]
c0006ec6:	84 c0                	test   al,al
c0006ec8:	74 38                	je     c0006f02 <kernel_main+0xbf>
c0006eca:	80 be b6 ff 01 c0 db 	cmp    BYTE PTR [esi-0x3ffe004a],0xdb
c0006ed1:	0f 84 97 00 00 00    	je     c0006f6e <kernel_main+0x12b>
c0006ed7:	3c 0d                	cmp    al,0xd
c0006ed9:	74 e3                	je     c0006ebe <kernel_main+0x7b>
c0006edb:	3c 0a                	cmp    al,0xa
c0006edd:	74 d7                	je     c0006eb6 <kernel_main+0x73>
c0006edf:	83 ec 0c             	sub    esp,0xc
c0006ee2:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0006ee6:	57                   	push   edi
c0006ee7:	43                   	inc    ebx
c0006ee8:	52                   	push   edx
c0006ee9:	46                   	inc    esi
c0006eea:	6a 00                	push   0x0
c0006eec:	6a 0e                	push   0xe
c0006eee:	50                   	push   eax
c0006eef:	e8 14 f7 00 00       	call   c0016608 <Hal::consoleWriteCharacter(char, int, int, int, int)>
c0006ef4:	83 c4 20             	add    esp,0x20
c0006ef7:	0f be 83 80 ff 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe0080]
c0006efe:	84 c0                	test   al,al
c0006f00:	75 c8                	jne    c0006eca <kernel_main+0x87>
c0006f02:	83 ec 0c             	sub    esp,0xc
c0006f05:	a1 24 05 00 00       	mov    eax,ds:0x524
c0006f0a:	05 ff 0f 00 00       	add    eax,0xfff
c0006f0f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0006f14:	50                   	push   eax
c0006f15:	e8 7b 03 00 00       	call   c0007295 <Phys::physicalMemorySetup(unsigned int)>
c0006f1a:	e8 45 1b 00 00       	call   c0008a64 <Virt::virtualMemorySetup()>
c0006f1f:	58                   	pop    eax
c0006f20:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0006f24:	53                   	push   ebx
c0006f25:	e8 fa 26 00 00       	call   c0009624 <VAS::VAS()>
c0006f2a:	89 1d 94 08 02 c0    	mov    DWORD PTR ds:0xc0020894,ebx
c0006f30:	e8 eb 90 ff ff       	call   c0000020 <callGlobalConstructors>
c0006f35:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c0006f3c:	e8 3c fe ff ff       	call   c0006d7d <malloc>
c0006f41:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f44:	89 c6                	mov    esi,eax
c0006f46:	e8 99 f0 ff ff       	call   c0005fe4 <Computer::Computer()>
c0006f4b:	6a 00                	push   0x0
c0006f4d:	89 35 a8 07 02 c0    	mov    DWORD PTR ds:0xc00207a8,esi
c0006f53:	6a 00                	push   0x0
c0006f55:	6a 00                	push   0x0
c0006f57:	56                   	push   esi
c0006f58:	e8 d7 f4 ff ff       	call   c0006434 <Computer::open(int, int, void*)>
c0006f5d:	83 c4 14             	add    esp,0x14
c0006f60:	53                   	push   ebx
c0006f61:	e8 2e 1e 00 00       	call   c0008d94 <VAS::~VAS()>
c0006f66:	83 c4 3c             	add    esp,0x3c
c0006f69:	5b                   	pop    ebx
c0006f6a:	5e                   	pop    esi
c0006f6b:	5f                   	pop    edi
c0006f6c:	5d                   	pop    ebp
c0006f6d:	c3                   	ret    
c0006f6e:	0f b6 96 b5 ff 01 c0 	movzx  edx,BYTE PTR [esi-0x3ffe004b]
c0006f75:	83 e2 fe             	and    edx,0xfffffffe
c0006f78:	81 fa ba 00 00 00    	cmp    edx,0xba
c0006f7e:	0f 85 53 ff ff ff    	jne    c0006ed7 <kernel_main+0x94>
c0006f84:	45                   	inc    ebp
c0006f85:	e9 4d ff ff ff       	jmp    c0006ed7 <kernel_main+0x94>

c0006f8a <Phys::allocateDMA(unsigned long)>:
c0006f8a:	55                   	push   ebp
c0006f8b:	31 ed                	xor    ebp,ebp
c0006f8d:	57                   	push   edi
c0006f8e:	56                   	push   esi
c0006f8f:	53                   	push   ebx
c0006f90:	31 db                	xor    ebx,ebx
c0006f92:	83 ec 1c             	sub    esp,0x1c
c0006f95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0006f99:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0006fa1:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0006fa7:	31 c0                	xor    eax,eax
c0006fa9:	c1 ef 0c             	shr    edi,0xc
c0006fac:	eb 19                	jmp    c0006fc7 <Phys::allocateDMA(unsigned long)+0x3d>
c0006fae:	85 c0                	test   eax,eax
c0006fb0:	75 06                	jne    c0006fb8 <Phys::allocateDMA(unsigned long)+0x2e>
c0006fb2:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0006fb6:	89 dd                	mov    ebp,ebx
c0006fb8:	8d 70 01             	lea    esi,[eax+0x1]
c0006fbb:	39 f7                	cmp    edi,esi
c0006fbd:	74 33                	je     c0006ff2 <Phys::allocateDMA(unsigned long)+0x68>
c0006fbf:	89 f0                	mov    eax,esi
c0006fc1:	43                   	inc    ebx
c0006fc2:	83 fb 0f             	cmp    ebx,0xf
c0006fc5:	7f 11                	jg     c0006fd8 <Phys::allocateDMA(unsigned long)+0x4e>
c0006fc7:	80 bb dc 07 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdf824],0x0
c0006fce:	74 de                	je     c0006fae <Phys::allocateDMA(unsigned long)+0x24>
c0006fd0:	31 c0                	xor    eax,eax
c0006fd2:	43                   	inc    ebx
c0006fd3:	83 fb 0f             	cmp    ebx,0xf
c0006fd6:	7e ef                	jle    c0006fc7 <Phys::allocateDMA(unsigned long)+0x3d>
c0006fd8:	83 ec 0c             	sub    esp,0xc
c0006fdb:	68 a8 de 01 c0       	push   0xc001dea8
c0006fe0:	e8 f8 87 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c0006fe5:	83 c4 10             	add    esp,0x10
c0006fe8:	31 c0                	xor    eax,eax
c0006fea:	83 c4 1c             	add    esp,0x1c
c0006fed:	5b                   	pop    ebx
c0006fee:	5e                   	pop    esi
c0006fef:	5f                   	pop    edi
c0006ff0:	5d                   	pop    ebp
c0006ff1:	c3                   	ret    
c0006ff2:	89 e9                	mov    ecx,ebp
c0006ff4:	c1 f9 04             	sar    ecx,0x4
c0006ff7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006ffb:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0006fff:	89 ca                	mov    edx,ecx
c0007001:	4a                   	dec    edx
c0007002:	79 03                	jns    c0007007 <Phys::allocateDMA(unsigned long)+0x7d>
c0007004:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007007:	c1 fa 04             	sar    edx,0x4
c000700a:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000700e:	74 08                	je     c0007018 <Phys::allocateDMA(unsigned long)+0x8e>
c0007010:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007014:	31 c0                	xor    eax,eax
c0007016:	eb ba                	jmp    c0006fd2 <Phys::allocateDMA(unsigned long)+0x48>
c0007018:	85 f6                	test   esi,esi
c000701a:	74 15                	je     c0007031 <Phys::allocateDMA(unsigned long)+0xa7>
c000701c:	8d 95 dc 07 02 c0    	lea    edx,[ebp-0x3ffdf824]
c0007022:	8d 84 05 dd 07 02 c0 	lea    eax,[ebp+eax*1-0x3ffdf823]
c0007029:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000702c:	42                   	inc    edx
c000702d:	39 d0                	cmp    eax,edx
c000702f:	75 f8                	jne    c0007029 <Phys::allocateDMA(unsigned long)+0x9f>
c0007031:	01 3d d4 07 02 c0    	add    DWORD PTR ds:0xc00207d4,edi
c0007037:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000703b:	85 c0                	test   eax,eax
c000703d:	74 17                	je     c0007056 <Phys::allocateDMA(unsigned long)+0xcc>
c000703f:	83 ec 0c             	sub    esp,0xc
c0007042:	68 a8 de 01 c0       	push   0xc001dea8
c0007047:	e8 91 87 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c000704c:	83 c4 10             	add    esp,0x10
c000704f:	89 f0                	mov    eax,esi
c0007051:	e9 6b ff ff ff       	jmp    c0006fc1 <Phys::allocateDMA(unsigned long)+0x37>
c0007056:	c1 e5 0c             	shl    ebp,0xc
c0007059:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000705f:	eb 89                	jmp    c0006fea <Phys::allocateDMA(unsigned long)+0x60>

c0007061 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007061:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007065:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000706b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000706f:	c1 ea 0c             	shr    edx,0xc
c0007072:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007077:	29 15 d4 07 02 c0    	sub    DWORD PTR ds:0xc00207d4,edx
c000707d:	c1 e8 0c             	shr    eax,0xc
c0007080:	85 d2                	test   edx,edx
c0007082:	74 0f                	je     c0007093 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0007084:	05 dc 07 02 c0       	add    eax,0xc00207dc
c0007089:	01 c2                	add    edx,eax
c000708b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000708e:	40                   	inc    eax
c000708f:	39 d0                	cmp    eax,edx
c0007091:	75 f8                	jne    c000708b <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0007093:	c3                   	ret    

c0007094 <Phys::setPageState(unsigned long, bool)>:
c0007094:	56                   	push   esi
c0007095:	ba 01 00 00 00       	mov    edx,0x1
c000709a:	53                   	push   ebx
c000709b:	8b 35 c4 00 02 c0    	mov    esi,DWORD PTR ds:0xc00200c4
c00070a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00070a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00070a9:	89 c8                	mov    eax,ecx
c00070ab:	83 e1 07             	and    ecx,0x7
c00070ae:	c1 e8 03             	shr    eax,0x3
c00070b1:	d3 e3                	shl    ebx,cl
c00070b3:	01 c6                	add    esi,eax
c00070b5:	d3 e2                	shl    edx,cl
c00070b7:	f7 d2                	not    edx
c00070b9:	20 16                	and    BYTE PTR [esi],dl
c00070bb:	03 05 c4 00 02 c0    	add    eax,DWORD PTR ds:0xc00200c4
c00070c1:	08 18                	or     BYTE PTR [eax],bl
c00070c3:	5b                   	pop    ebx
c00070c4:	5e                   	pop    esi
c00070c5:	c3                   	ret    

c00070c6 <Phys::getPageState(unsigned long)>:
c00070c6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00070ca:	8b 15 c4 00 02 c0    	mov    edx,DWORD PTR ds:0xc00200c4
c00070d0:	89 c8                	mov    eax,ecx
c00070d2:	83 e1 07             	and    ecx,0x7
c00070d5:	c1 e8 03             	shr    eax,0x3
c00070d8:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c00070dc:	d3 f8                	sar    eax,cl
c00070de:	83 e0 01             	and    eax,0x1
c00070e1:	c3                   	ret    

c00070e2 <Phys::freePage(unsigned long)>:
c00070e2:	53                   	push   ebx
c00070e3:	83 ec 08             	sub    esp,0x8
c00070e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070ea:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c00070f0:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00070f6:	76 3a                	jbe    c0007132 <Phys::freePage(unsigned long)+0x50>
c00070f8:	c1 e8 0c             	shr    eax,0xc
c00070fb:	50                   	push   eax
c00070fc:	89 c3                	mov    ebx,eax
c00070fe:	e8 c3 ff ff ff       	call   c00070c6 <Phys::getPageState(unsigned long)>
c0007103:	5a                   	pop    edx
c0007104:	84 c0                	test   al,al
c0007106:	74 19                	je     c0007121 <Phys::freePage(unsigned long)+0x3f>
c0007108:	83 ec 08             	sub    esp,0x8
c000710b:	ff 0d d4 07 02 c0    	dec    DWORD PTR ds:0xc00207d4
c0007111:	6a 00                	push   0x0
c0007113:	53                   	push   ebx
c0007114:	e8 7b ff ff ff       	call   c0007094 <Phys::setPageState(unsigned long, bool)>
c0007119:	83 c4 10             	add    esp,0x10
c000711c:	83 c4 08             	add    esp,0x8
c000711f:	5b                   	pop    ebx
c0007120:	c3                   	ret    
c0007121:	c7 44 24 10 4d df 01 c0 	mov    DWORD PTR [esp+0x10],0xc001df4d
c0007129:	83 c4 08             	add    esp,0x8
c000712c:	5b                   	pop    ebx
c000712d:	e9 ab 86 00 00       	jmp    c000f7dd <Krnl::panic(char const*)>
c0007132:	68 00 10 00 00       	push   0x1000
c0007137:	50                   	push   eax
c0007138:	e8 24 ff ff ff       	call   c0007061 <Phys::freeDMA(unsigned long, unsigned long)>
c000713d:	59                   	pop    ecx
c000713e:	5b                   	pop    ebx
c000713f:	83 c4 08             	add    esp,0x8
c0007142:	5b                   	pop    ebx
c0007143:	c3                   	ret    

c0007144 <Phys::allocatePage()>:
c0007144:	56                   	push   esi
c0007145:	53                   	push   ebx
c0007146:	83 ec 14             	sub    esp,0x14
c0007149:	8b 35 c8 07 02 c0    	mov    esi,DWORD PTR ds:0xc00207c8
c000714f:	89 f3                	mov    ebx,esi
c0007151:	eb 0a                	jmp    c000715d <Phys::allocatePage()+0x19>
c0007153:	89 1d c8 07 02 c0    	mov    DWORD PTR ds:0xc00207c8,ebx
c0007159:	39 de                	cmp    esi,ebx
c000715b:	74 24                	je     c0007181 <Phys::allocatePage()+0x3d>
c000715d:	53                   	push   ebx
c000715e:	e8 63 ff ff ff       	call   c00070c6 <Phys::getPageState(unsigned long)>
c0007163:	5a                   	pop    edx
c0007164:	84 c0                	test   al,al
c0007166:	74 5e                	je     c00071c6 <Phys::allocatePage()+0x82>
c0007168:	43                   	inc    ebx
c0007169:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000716f:	75 e2                	jne    c0007153 <Phys::allocatePage()+0xf>
c0007171:	31 db                	xor    ebx,ebx
c0007173:	c7 05 c8 07 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00207c8,0x0
c000717d:	39 de                	cmp    esi,ebx
c000717f:	75 dc                	jne    c000715d <Phys::allocatePage()+0x19>
c0007181:	83 ec 0c             	sub    esp,0xc
c0007184:	80 35 ec 07 02 c0 01 	xor    BYTE PTR ds:0xc00207ec,0x1
c000718b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007190:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007193:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0007199:	e8 a0 26 00 00       	call   c000983e <VAS::scanForEviction()>
c000719e:	83 c4 10             	add    esp,0x10
c00071a1:	85 c0                	test   eax,eax
c00071a3:	75 3f                	jne    c00071e4 <Phys::allocatePage()+0xa0>
c00071a5:	83 ec 0c             	sub    esp,0xc
c00071a8:	68 d0 de 01 c0       	push   0xc001ded0
c00071ad:	e8 2b 86 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c00071b2:	83 c4 10             	add    esp,0x10
c00071b5:	8b 1d c8 07 02 c0    	mov    ebx,DWORD PTR ds:0xc00207c8
c00071bb:	53                   	push   ebx
c00071bc:	e8 05 ff ff ff       	call   c00070c6 <Phys::getPageState(unsigned long)>
c00071c1:	5a                   	pop    edx
c00071c2:	84 c0                	test   al,al
c00071c4:	75 a2                	jne    c0007168 <Phys::allocatePage()+0x24>
c00071c6:	6a 01                	push   0x1
c00071c8:	53                   	push   ebx
c00071c9:	e8 c6 fe ff ff       	call   c0007094 <Phys::setPageState(unsigned long, bool)>
c00071ce:	a1 c8 07 02 c0       	mov    eax,ds:0xc00207c8
c00071d3:	5a                   	pop    edx
c00071d4:	ff 05 d4 07 02 c0    	inc    DWORD PTR ds:0xc00207d4
c00071da:	c1 e0 0c             	shl    eax,0xc
c00071dd:	59                   	pop    ecx
c00071de:	83 c4 14             	add    esp,0x14
c00071e1:	5b                   	pop    ebx
c00071e2:	5e                   	pop    esi
c00071e3:	c3                   	ret    
c00071e4:	83 ec 08             	sub    esp,0x8
c00071e7:	89 c2                	mov    edx,eax
c00071e9:	6a 01                	push   0x1
c00071eb:	c1 ea 0c             	shr    edx,0xc
c00071ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00071f2:	52                   	push   edx
c00071f3:	e8 9c fe ff ff       	call   c0007094 <Phys::setPageState(unsigned long, bool)>
c00071f8:	83 c4 10             	add    esp,0x10
c00071fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00071ff:	eb dd                	jmp    c00071de <Phys::allocatePage()+0x9a>

c0007201 <Phys::allocateContiguousPages(int)>:
c0007201:	57                   	push   edi
c0007202:	56                   	push   esi
c0007203:	53                   	push   ebx
c0007204:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007208:	fa                   	cli    
c0007209:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c000720f:	31 db                	xor    ebx,ebx
c0007211:	85 db                	test   ebx,ebx
c0007213:	75 11                	jne    c0007226 <Phys::allocateContiguousPages(int)+0x25>
c0007215:	e8 2a ff ff ff       	call   c0007144 <Phys::allocatePage()>
c000721a:	83 fe 01             	cmp    esi,0x1
c000721d:	89 c7                	mov    edi,eax
c000721f:	74 21                	je     c0007242 <Phys::allocateContiguousPages(int)+0x41>
c0007221:	bb 01 00 00 00       	mov    ebx,0x1
c0007226:	e8 19 ff ff ff       	call   c0007144 <Phys::allocatePage()>
c000722b:	89 da                	mov    edx,ebx
c000722d:	c1 e2 0c             	shl    edx,0xc
c0007230:	01 fa                	add    edx,edi
c0007232:	39 c2                	cmp    edx,eax
c0007234:	74 20                	je     c0007256 <Phys::allocateContiguousPages(int)+0x55>
c0007236:	bb 01 00 00 00       	mov    ebx,0x1
c000723b:	89 c7                	mov    edi,eax
c000723d:	83 fe 01             	cmp    esi,0x1
c0007240:	75 e4                	jne    c0007226 <Phys::allocateContiguousPages(int)+0x25>
c0007242:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0007247:	48                   	dec    eax
c0007248:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c000724d:	75 01                	jne    c0007250 <Phys::allocateContiguousPages(int)+0x4f>
c000724f:	fb                   	sti    
c0007250:	89 f8                	mov    eax,edi
c0007252:	5b                   	pop    ebx
c0007253:	5e                   	pop    esi
c0007254:	5f                   	pop    edi
c0007255:	c3                   	ret    
c0007256:	43                   	inc    ebx
c0007257:	39 f3                	cmp    ebx,esi
c0007259:	75 b6                	jne    c0007211 <Phys::allocateContiguousPages(int)+0x10>
c000725b:	eb e5                	jmp    c0007242 <Phys::allocateContiguousPages(int)+0x41>

c000725d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000725d:	56                   	push   esi
c000725e:	53                   	push   ebx
c000725f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007263:	39 1d cc 07 02 c0    	cmp    DWORD PTR ds:0xc00207cc,ebx
c0007269:	73 06                	jae    c0007271 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000726b:	89 1d cc 07 02 c0    	mov    DWORD PTR ds:0xc00207cc,ebx
c0007271:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007275:	c1 eb 0c             	shr    ebx,0xc
c0007278:	c1 e8 0c             	shr    eax,0xc
c000727b:	39 d8                	cmp    eax,ebx
c000727d:	73 13                	jae    c0007292 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000727f:	6a 00                	push   0x0
c0007281:	8d 70 01             	lea    esi,[eax+0x1]
c0007284:	50                   	push   eax
c0007285:	e8 0a fe ff ff       	call   c0007094 <Phys::setPageState(unsigned long, bool)>
c000728a:	5a                   	pop    edx
c000728b:	89 f0                	mov    eax,esi
c000728d:	59                   	pop    ecx
c000728e:	39 f3                	cmp    ebx,esi
c0007290:	75 ed                	jne    c000727f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007292:	5b                   	pop    ebx
c0007293:	5e                   	pop    esi
c0007294:	c3                   	ret    

c0007295 <Phys::physicalMemorySetup(unsigned int)>:
c0007295:	55                   	push   ebp
c0007296:	57                   	push   edi
c0007297:	56                   	push   esi
c0007298:	53                   	push   ebx
c0007299:	31 db                	xor    ebx,ebx
c000729b:	83 ec 40             	sub    esp,0x40
c000729e:	6a 10                	push   0x10
c00072a0:	6a 00                	push   0x0
c00072a2:	68 dc 07 02 c0       	push   0xc00207dc
c00072a7:	e8 fc 91 ff ff       	call   c00004a8 <memset>
c00072ac:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00072b0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00072b5:	05 00 10 00 00       	add    eax,0x1000
c00072ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00072be:	5a                   	pop    edx
c00072bf:	59                   	pop    ecx
c00072c0:	50                   	push   eax
c00072c1:	68 63 df 01 c0       	push   0xc001df63
c00072c6:	e8 3c 28 00 00       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c00072cb:	83 c4 10             	add    esp,0x10
c00072ce:	83 ec 08             	sub    esp,0x8
c00072d1:	6a 01                	push   0x1
c00072d3:	53                   	push   ebx
c00072d4:	43                   	inc    ebx
c00072d5:	e8 ba fd ff ff       	call   c0007094 <Phys::setPageState(unsigned long, bool)>
c00072da:	83 c4 10             	add    esp,0x10
c00072dd:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00072e3:	75 e9                	jne    c00072ce <Phys::physicalMemorySetup(unsigned int)+0x39>
c00072e5:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00072ec:	66 85 c0             	test   ax,ax
c00072ef:	0f 84 8e 01 00 00    	je     c0007483 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c00072f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00072f9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007301:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007305:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000730a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000730e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007316:	eb 15                	jmp    c000732d <Phys::physicalMemorySetup(unsigned int)+0x98>
c0007318:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000731c:	83 c3 18             	add    ebx,0x18
c000731f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007323:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007327:	0f 84 66 01 00 00    	je     c0007493 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000732d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007330:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007333:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007336:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000733a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000733e:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007340:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007343:	01 f0                	add    eax,esi
c0007345:	55                   	push   ebp
c0007346:	11 fa                	adc    edx,edi
c0007348:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000734c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007350:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007354:	56                   	push   esi
c0007355:	68 00 df 01 c0       	push   0xc001df00
c000735a:	e8 a8 27 00 00       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c000735f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007363:	83 c4 10             	add    esp,0x10
c0007366:	09 f8                	or     eax,edi
c0007368:	0f 85 25 01 00 00    	jne    c0007493 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000736e:	4d                   	dec    ebp
c000736f:	75 a7                	jne    c0007318 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0007371:	ba 00 00 08 00       	mov    edx,0x80000
c0007376:	89 c1                	mov    ecx,eax
c0007378:	39 f2                	cmp    edx,esi
c000737a:	19 f9                	sbb    ecx,edi
c000737c:	0f 82 a7 00 00 00    	jb     c0007429 <Phys::physicalMemorySetup(unsigned int)+0x194>
c0007382:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007386:	89 c1                	mov    ecx,eax
c0007388:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000738c:	0f 83 97 00 00 00    	jae    c0007429 <Phys::physicalMemorySetup(unsigned int)+0x194>
c0007392:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007397:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000739b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000739f:	39 fa                	cmp    edx,edi
c00073a1:	19 e8                	sbb    eax,ebp
c00073a3:	0f 82 9a 01 00 00    	jb     c0007543 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c00073a9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00073ad:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00073b1:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00073b7:	ba ff 1f 00 00       	mov    edx,0x1fff
c00073bc:	83 d5 ff             	adc    ebp,0xffffffff
c00073bf:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00073c3:	31 c0                	xor    eax,eax
c00073c5:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00073c9:	39 fa                	cmp    edx,edi
c00073cb:	89 c1                	mov    ecx,eax
c00073cd:	19 e9                	sbb    ecx,ebp
c00073cf:	0f 83 43 ff ff ff    	jae    c0007318 <Phys::physicalMemorySetup(unsigned int)+0x83>
c00073d5:	be 00 00 08 00       	mov    esi,0x80000
c00073da:	51                   	push   ecx
c00073db:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00073df:	57                   	push   edi
c00073e0:	56                   	push   esi
c00073e1:	68 24 df 01 c0       	push   0xc001df24
c00073e6:	e8 1c 27 00 00       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c00073eb:	5d                   	pop    ebp
c00073ec:	58                   	pop    eax
c00073ed:	57                   	push   edi
c00073ee:	56                   	push   esi
c00073ef:	e8 69 fe ff ff       	call   c000725d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00073f4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00073f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00073fc:	83 c4 0c             	add    esp,0xc
c00073ff:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007403:	03 05 d8 07 02 c0    	add    eax,DWORD PTR ds:0xc00207d8
c0007409:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007410:	a3 d8 07 02 c0       	mov    ds:0xc00207d8,eax
c0007415:	52                   	push   edx
c0007416:	50                   	push   eax
c0007417:	68 89 df 01 c0       	push   0xc001df89
c000741c:	e8 e6 26 00 00       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c0007421:	83 c4 10             	add    esp,0x10
c0007424:	e9 ef fe ff ff       	jmp    c0007318 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0007429:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000742d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007431:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007435:	39 ea                	cmp    edx,ebp
c0007437:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000743b:	0f 82 d7 fe ff ff    	jb     c0007318 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0007441:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007446:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000744a:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000744e:	0f 83 c4 fe ff ff    	jae    c0007318 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0007454:	39 ee                	cmp    esi,ebp
c0007456:	89 f8                	mov    eax,edi
c0007458:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000745c:	0f 83 78 ff ff ff    	jae    c00073da <Phys::physicalMemorySetup(unsigned int)+0x145>
c0007462:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007466:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000746a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000746e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007472:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007476:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000747a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000747e:	e9 57 ff ff ff       	jmp    c00073da <Phys::physicalMemorySetup(unsigned int)+0x145>
c0007483:	83 ec 0c             	sub    esp,0xc
c0007486:	68 7b df 01 c0       	push   0xc001df7b
c000748b:	e8 4d 83 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c0007490:	83 c4 10             	add    esp,0x10
c0007493:	83 ec 08             	sub    esp,0x8
c0007496:	bb 60 00 00 00       	mov    ebx,0x60
c000749b:	6a 00                	push   0x0
c000749d:	6a 06                	push   0x6
c000749f:	e8 f0 fb ff ff       	call   c0007094 <Phys::setPageState(unsigned long, bool)>
c00074a4:	58                   	pop    eax
c00074a5:	5a                   	pop    edx
c00074a6:	6a 00                	push   0x0
c00074a8:	6a 07                	push   0x7
c00074aa:	e8 e5 fb ff ff       	call   c0007094 <Phys::setPageState(unsigned long, bool)>
c00074af:	83 05 d8 07 02 c0 02 	add    DWORD PTR ds:0xc00207d8,0x2
c00074b6:	83 c4 10             	add    esp,0x10
c00074b9:	83 ec 08             	sub    esp,0x8
c00074bc:	6a 00                	push   0x0
c00074be:	53                   	push   ebx
c00074bf:	43                   	inc    ebx
c00074c0:	e8 cf fb ff ff       	call   c0007094 <Phys::setPageState(unsigned long, bool)>
c00074c5:	83 c4 10             	add    esp,0x10
c00074c8:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00074ce:	75 e9                	jne    c00074b9 <Phys::physicalMemorySetup(unsigned int)+0x224>
c00074d0:	a1 d8 07 02 c0       	mov    eax,ds:0xc00207d8
c00074d5:	bb 40 01 00 00       	mov    ebx,0x140
c00074da:	83 c0 20             	add    eax,0x20
c00074dd:	a3 d8 07 02 c0       	mov    ds:0xc00207d8,eax
c00074e2:	eb 22                	jmp    c0007506 <Phys::physicalMemorySetup(unsigned int)+0x271>
c00074e4:	83 ec 08             	sub    esp,0x8
c00074e7:	6a 00                	push   0x0
c00074e9:	53                   	push   ebx
c00074ea:	43                   	inc    ebx
c00074eb:	e8 a4 fb ff ff       	call   c0007094 <Phys::setPageState(unsigned long, bool)>
c00074f0:	a1 d8 07 02 c0       	mov    eax,ds:0xc00207d8
c00074f5:	83 c4 10             	add    esp,0x10
c00074f8:	40                   	inc    eax
c00074f9:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00074ff:	a3 d8 07 02 c0       	mov    ds:0xc00207d8,eax
c0007504:	74 07                	je     c000750d <Phys::physicalMemorySetup(unsigned int)+0x278>
c0007506:	3d ff 03 00 00       	cmp    eax,0x3ff
c000750b:	7e d7                	jle    c00074e4 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000750d:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007512:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007517:	7f 22                	jg     c000753b <Phys::physicalMemorySetup(unsigned int)+0x2a6>
c0007519:	83 ec 08             	sub    esp,0x8
c000751c:	6a 00                	push   0x0
c000751e:	53                   	push   ebx
c000751f:	43                   	inc    ebx
c0007520:	e8 6f fb ff ff       	call   c0007094 <Phys::setPageState(unsigned long, bool)>
c0007525:	a1 d8 07 02 c0       	mov    eax,ds:0xc00207d8
c000752a:	83 c4 10             	add    esp,0x10
c000752d:	40                   	inc    eax
c000752e:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007534:	a3 d8 07 02 c0       	mov    ds:0xc00207d8,eax
c0007539:	75 d7                	jne    c0007512 <Phys::physicalMemorySetup(unsigned int)+0x27d>
c000753b:	83 c4 3c             	add    esp,0x3c
c000753e:	5b                   	pop    ebx
c000753f:	5e                   	pop    esi
c0007540:	5f                   	pop    edi
c0007541:	5d                   	pop    ebp
c0007542:	c3                   	ret    
c0007543:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000754b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007553:	e9 51 fe ff ff       	jmp    c00073a9 <Phys::physicalMemorySetup(unsigned int)+0x114>

c0007558 <Pipe::isAtty()>:
c0007558:	31 c0                	xor    eax,eax
c000755a:	c3                   	ret    
c000755b:	90                   	nop

c000755c <Pipe::~Pipe()>:
c000755c:	83 ec 0c             	sub    esp,0xc
c000755f:	ba e8 df 01 c0       	mov    edx,0xc001dfe8
c0007564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007568:	89 10                	mov    DWORD PTR [eax],edx
c000756a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000756e:	83 ec 0c             	sub    esp,0xc
c0007571:	50                   	push   eax
c0007572:	e8 cd 10 00 00       	call   c0008644 <UnixFile::~UnixFile()>
c0007577:	83 c4 10             	add    esp,0x10
c000757a:	90                   	nop
c000757b:	83 c4 0c             	add    esp,0xc
c000757e:	c3                   	ret    
c000757f:	90                   	nop

c0007580 <Pipe::~Pipe()>:
c0007580:	83 ec 0c             	sub    esp,0xc
c0007583:	83 ec 0c             	sub    esp,0xc
c0007586:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000758a:	e8 cd ff ff ff       	call   c000755c <Pipe::~Pipe()>
c000758f:	83 c4 10             	add    esp,0x10
c0007592:	83 ec 08             	sub    esp,0x8
c0007595:	6a 20                	push   0x20
c0007597:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000759b:	e8 86 24 00 00       	call   c0009a26 <operator delete(void*, unsigned long)>
c00075a0:	83 c4 10             	add    esp,0x10
c00075a3:	83 c4 0c             	add    esp,0xc
c00075a6:	c3                   	ret    
c00075a7:	90                   	nop

c00075a8 <Pipe::write(unsigned long long, void*, int*)>:
c00075a8:	55                   	push   ebp
c00075a9:	57                   	push   edi
c00075aa:	56                   	push   esi
c00075ab:	53                   	push   ebx
c00075ac:	83 ec 1c             	sub    esp,0x1c
c00075af:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00075b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00075b7:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00075ba:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00075be:	89 04 24             	mov    DWORD PTR [esp],eax
c00075c1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00075c5:	89 d8                	mov    eax,ebx
c00075c7:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00075ca:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00075ce:	89 d6                	mov    esi,edx
c00075d0:	89 d7                	mov    edi,edx
c00075d2:	c1 ff 1f             	sar    edi,0x1f
c00075d5:	03 34 24             	add    esi,DWORD PTR [esp]
c00075d8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00075dc:	c1 f8 1f             	sar    eax,0x1f
c00075df:	39 f3                	cmp    ebx,esi
c00075e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00075e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075e9:	19 f8                	sbb    eax,edi
c00075eb:	b8 01 00 00 00       	mov    eax,0x1
c00075f0:	72 6e                	jb     c0007660 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00075f2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00075f5:	01 d0                	add    eax,edx
c00075f7:	99                   	cdq    
c00075f8:	f7 fb                	idiv   ebx
c00075fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075fe:	29 d3                	sub    ebx,edx
c0007600:	89 d7                	mov    edi,edx
c0007602:	89 de                	mov    esi,ebx
c0007604:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007607:	c1 fb 1f             	sar    ebx,0x1f
c000760a:	39 f2                	cmp    edx,esi
c000760c:	19 d8                	sbb    eax,ebx
c000760e:	b8 00 00 00 00       	mov    eax,0x0
c0007613:	72 04                	jb     c0007619 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007615:	89 d0                	mov    eax,edx
c0007617:	29 f0                	sub    eax,esi
c0007619:	89 d3                	mov    ebx,edx
c000761b:	29 c3                	sub    ebx,eax
c000761d:	74 0b                	je     c000762a <Pipe::write(unsigned long long, void*, int*)+0x82>
c000761f:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007622:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007626:	89 d9                	mov    ecx,ebx
c0007628:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000762a:	85 c0                	test   eax,eax
c000762c:	74 0d                	je     c000763b <Pipe::write(unsigned long long, void*, int*)+0x93>
c000762e:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007632:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007635:	89 de                	mov    esi,ebx
c0007637:	89 c1                	mov    ecx,eax
c0007639:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000763b:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000763e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007643:	75 10                	jne    c0007655 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007645:	83 ec 0c             	sub    esp,0xc
c0007648:	68 a5 df 01 c0       	push   0xc001dfa5
c000764d:	e8 8b 81 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007659:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000765c:	89 08                	mov    DWORD PTR [eax],ecx
c000765e:	31 c0                	xor    eax,eax
c0007660:	83 c4 1c             	add    esp,0x1c
c0007663:	5b                   	pop    ebx
c0007664:	5e                   	pop    esi
c0007665:	5f                   	pop    edi
c0007666:	5d                   	pop    ebp
c0007667:	c3                   	ret    

c0007668 <Pipe::read(unsigned long long, void*, int*)>:
c0007668:	55                   	push   ebp
c0007669:	57                   	push   edi
c000766a:	56                   	push   esi
c000766b:	53                   	push   ebx
c000766c:	83 ec 1c             	sub    esp,0x1c
c000766f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007673:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007677:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000767b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000767e:	89 c8                	mov    eax,ecx
c0007680:	99                   	cdq    
c0007681:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007685:	74 24                	je     c00076ab <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007687:	39 f9                	cmp    ecx,edi
c0007689:	89 d1                	mov    ecx,edx
c000768b:	19 f1                	sbb    ecx,esi
c000768d:	73 1c                	jae    c00076ab <Pipe::read(unsigned long long, void*, int*)+0x43>
c000768f:	fa                   	cli    
c0007690:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c0007696:	e8 c5 b5 00 00       	call   c0012c60 <schedule()>
c000769b:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c00076a0:	48                   	dec    eax
c00076a1:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c00076a6:	75 d3                	jne    c000767b <Pipe::read(unsigned long long, void*, int*)+0x13>
c00076a8:	fb                   	sti    
c00076a9:	eb d0                	jmp    c000767b <Pipe::read(unsigned long long, void*, int*)+0x13>
c00076ab:	39 f8                	cmp    eax,edi
c00076ad:	89 d1                	mov    ecx,edx
c00076af:	89 3c 24             	mov    DWORD PTR [esp],edi
c00076b2:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00076b6:	19 f1                	sbb    ecx,esi
c00076b8:	73 07                	jae    c00076c1 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00076ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00076bd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00076c1:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00076c4:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00076c7:	29 f7                	sub    edi,esi
c00076c9:	89 f8                	mov    eax,edi
c00076cb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00076cf:	99                   	cdq    
c00076d0:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00076d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00076d7:	19 d0                	sbb    eax,edx
c00076d9:	73 07                	jae    c00076e2 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00076db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00076e2:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00076e5:	89 ea                	mov    edx,ebp
c00076e7:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00076eb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00076f0:	74 0d                	je     c00076ff <Pipe::read(unsigned long long, void*, int*)+0x97>
c00076f2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00076f5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00076f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00076fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00076ff:	85 d2                	test   edx,edx
c0007701:	74 11                	je     c0007714 <Pipe::read(unsigned long long, void*, int*)+0xac>
c0007703:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007707:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000770a:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000770e:	89 d1                	mov    ecx,edx
c0007710:	89 c7                	mov    edi,eax
c0007712:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007714:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0007717:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000771a:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000771d:	99                   	cdq    
c000771e:	89 f7                	mov    edi,esi
c0007720:	03 04 24             	add    eax,DWORD PTR [esp]
c0007723:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0007727:	c1 ff 1f             	sar    edi,0x1f
c000772a:	57                   	push   edi
c000772b:	56                   	push   esi
c000772c:	52                   	push   edx
c000772d:	50                   	push   eax
c000772e:	e8 bd 52 01 00       	call   c001c9f0 <__umoddi3>
c0007733:	83 c4 10             	add    esp,0x10
c0007736:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0007739:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000773e:	75 10                	jne    c0007750 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0007740:	83 ec 0c             	sub    esp,0xc
c0007743:	68 c2 df 01 c0       	push   0xc001dfc2
c0007748:	e8 90 80 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c000774d:	83 c4 10             	add    esp,0x10
c0007750:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007754:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007757:	89 10                	mov    DWORD PTR [eax],edx
c0007759:	83 c4 1c             	add    esp,0x1c
c000775c:	31 c0                	xor    eax,eax
c000775e:	5b                   	pop    ebx
c000775f:	5e                   	pop    esi
c0007760:	5f                   	pop    edi
c0007761:	5d                   	pop    ebp
c0007762:	c3                   	ret    
c0007763:	90                   	nop

c0007764 <Pipe::Pipe(int)>:
c0007764:	83 ec 0c             	sub    esp,0xc
c0007767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000776b:	83 ec 08             	sub    esp,0x8
c000776e:	6a 00                	push   0x0
c0007770:	50                   	push   eax
c0007771:	e8 ec 0c 00 00       	call   c0008462 <UnixFile::UnixFile(int)>
c0007776:	83 c4 10             	add    esp,0x10
c0007779:	ba e8 df 01 c0       	mov    edx,0xc001dfe8
c000777e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007782:	89 10                	mov    DWORD PTR [eax],edx
c0007784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007788:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000778c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000778f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007793:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000779a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000779e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00077a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00077a9:	83 ec 0c             	sub    esp,0xc
c00077ac:	50                   	push   eax
c00077ad:	e8 cb f5 ff ff       	call   c0006d7d <malloc>
c00077b2:	83 c4 10             	add    esp,0x10
c00077b5:	89 c2                	mov    edx,eax
c00077b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00077bb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00077be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00077c2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00077c6:	90                   	nop
c00077c7:	83 c4 0c             	add    esp,0xc
c00077ca:	c3                   	ret    
c00077cb:	90                   	nop

c00077cc <VgaText::isAtty()>:
c00077cc:	b0 01                	mov    al,0x1
c00077ce:	c3                   	ret    
c00077cf:	90                   	nop

c00077d0 <VgaText::~VgaText()>:
c00077d0:	83 ec 0c             	sub    esp,0xc
c00077d3:	ba 70 e0 01 c0       	mov    edx,0xc001e070
c00077d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00077dc:	89 10                	mov    DWORD PTR [eax],edx
c00077de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00077e2:	83 ec 0c             	sub    esp,0xc
c00077e5:	50                   	push   eax
c00077e6:	e8 59 0e 00 00       	call   c0008644 <UnixFile::~UnixFile()>
c00077eb:	83 c4 10             	add    esp,0x10
c00077ee:	90                   	nop
c00077ef:	83 c4 0c             	add    esp,0xc
c00077f2:	c3                   	ret    
c00077f3:	90                   	nop

c00077f4 <VgaText::~VgaText()>:
c00077f4:	83 ec 0c             	sub    esp,0xc
c00077f7:	83 ec 0c             	sub    esp,0xc
c00077fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077fe:	e8 cd ff ff ff       	call   c00077d0 <VgaText::~VgaText()>
c0007803:	83 c4 10             	add    esp,0x10
c0007806:	83 ec 08             	sub    esp,0x8
c0007809:	68 34 01 00 00       	push   0x134
c000780e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007812:	e8 0f 22 00 00       	call   c0009a26 <operator delete(void*, unsigned long)>
c0007817:	83 c4 10             	add    esp,0x10
c000781a:	83 c4 0c             	add    esp,0xc
c000781d:	c3                   	ret    

c000781e <VgaText::read(unsigned long long, void*, int*)>:
c000781e:	83 ec 10             	sub    esp,0x10
c0007821:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007825:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007829:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000782d:	e8 eb 44 00 00       	call   c000bd1d <readKeyboard(VgaText*, char*, unsigned long)>
c0007832:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007836:	89 02                	mov    DWORD PTR [edx],eax
c0007838:	31 c0                	xor    eax,eax
c000783a:	83 c4 1c             	add    esp,0x1c
c000783d:	c3                   	ret    

c000783e <setTerminalScrollLock(bool)>:
c000783e:	c3                   	ret    

c000783f <doTerminalCycle()>:
c000783f:	c3                   	ret    

c0007840 <addToTerminalCycle(VgaText*)>:
c0007840:	c3                   	ret    

c0007841 <scrollTerminalScrollLock(int)>:
c0007841:	c3                   	ret    

c0007842 <VgaText::updateTitle()>:
c0007842:	c3                   	ret    
c0007843:	90                   	nop

c0007844 <VgaText::load()>:
c0007844:	c3                   	ret    
c0007845:	90                   	nop

c0007846 <VgaText::updateCursor()>:
c0007846:	83 ec 14             	sub    esp,0x14
c0007849:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000784d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0007850:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0007853:	e8 14 ee 00 00       	call   c001666c <Hal::consoleCursorUpdate(int, int)>
c0007858:	83 c4 1c             	add    esp,0x1c
c000785b:	c3                   	ret    

c000785c <VgaText::doANSI_SGR(int)>:
c000785c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007860:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007864:	85 d2                	test   edx,edx
c0007866:	75 0b                	jne    c0007873 <VgaText::doANSI_SGR(int)+0x17>
c0007868:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000786b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000786e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0007871:	eb 59                	jmp    c00078cc <VgaText::doANSI_SGR(int)+0x70>
c0007873:	83 fa 07             	cmp    edx,0x7
c0007876:	75 0b                	jne    c0007883 <VgaText::doANSI_SGR(int)+0x27>
c0007878:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000787b:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000787e:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0007881:	eb 49                	jmp    c00078cc <VgaText::doANSI_SGR(int)+0x70>
c0007883:	83 fa 1b             	cmp    edx,0x1b
c0007886:	74 e0                	je     c0007868 <VgaText::doANSI_SGR(int)+0xc>
c0007888:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000788b:	83 f9 07             	cmp    ecx,0x7
c000788e:	77 09                	ja     c0007899 <VgaText::doANSI_SGR(int)+0x3d>
c0007890:	8b 14 8d 00 01 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdff00]
c0007897:	eb 20                	jmp    c00078b9 <VgaText::doANSI_SGR(int)+0x5d>
c0007899:	8d 4a d8             	lea    ecx,[edx-0x28]
c000789c:	83 f9 07             	cmp    ecx,0x7
c000789f:	77 09                	ja     c00078aa <VgaText::doANSI_SGR(int)+0x4e>
c00078a1:	8b 14 8d 00 01 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdff00]
c00078a8:	eb 22                	jmp    c00078cc <VgaText::doANSI_SGR(int)+0x70>
c00078aa:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00078ad:	83 f9 07             	cmp    ecx,0x7
c00078b0:	77 0b                	ja     c00078bd <VgaText::doANSI_SGR(int)+0x61>
c00078b2:	8b 14 95 b8 ff 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0048]
c00078b9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00078bc:	c3                   	ret    
c00078bd:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00078c0:	83 f9 07             	cmp    ecx,0x7
c00078c3:	77 0a                	ja     c00078cf <VgaText::doANSI_SGR(int)+0x73>
c00078c5:	8b 14 95 90 ff 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0070]
c00078cc:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00078cf:	c3                   	ret    

c00078d0 <VgaText::setDefaultBgColour(VgaColour)>:
c00078d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00078d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00078d8:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00078db:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00078de:	c3                   	ret    
c00078df:	90                   	nop

c00078e0 <VgaText::setDefaultFgColour(VgaColour)>:
c00078e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00078e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00078e8:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00078eb:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00078ee:	c3                   	ret    
c00078ef:	90                   	nop

c00078f0 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00078f0:	53                   	push   ebx
c00078f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00078f5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00078f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00078fd:	51                   	push   ecx
c00078fe:	e8 cd ff ff ff       	call   c00078d0 <VgaText::setDefaultBgColour(VgaColour)>
c0007903:	58                   	pop    eax
c0007904:	5a                   	pop    edx
c0007905:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0007909:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000790d:	5b                   	pop    ebx
c000790e:	eb d0                	jmp    c00078e0 <VgaText::setDefaultFgColour(VgaColour)>

c0007910 <VgaText::setTitleTextColour(VgaColour)>:
c0007910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007914:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007918:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000791b:	c3                   	ret    

c000791c <VgaText::setTitleColour(VgaColour)>:
c000791c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007920:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007924:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0007927:	c3                   	ret    

c0007928 <VgaText::setTitle(char*)>:
c0007928:	c3                   	ret    
c0007929:	90                   	nop

c000792a <VgaText::combineColours(unsigned char, unsigned char)>:
c000792a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000792e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0007933:	83 e0 0f             	and    eax,0xf
c0007936:	c1 e2 04             	shl    edx,0x4
c0007939:	09 d0                	or     eax,edx
c000793b:	c3                   	ret    

c000793c <VgaText::scrollScreen()>:
c000793c:	55                   	push   ebp
c000793d:	b9 01 00 00 00       	mov    ecx,0x1
c0007942:	57                   	push   edi
c0007943:	56                   	push   esi
c0007944:	53                   	push   ebx
c0007945:	83 ec 0c             	sub    esp,0xc
c0007948:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000794c:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0007952:	31 ff                	xor    edi,edi
c0007954:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007957:	83 f9 18             	cmp    ecx,0x18
c000795a:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000795d:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0007964:	75 27                	jne    c000798d <VgaText::scrollScreen()+0x51>
c0007966:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0007969:	01 f5                	add    ebp,esi
c000796b:	f7 c7 01 00 00 00    	test   edi,0x1
c0007971:	74 16                	je     c0007989 <VgaText::scrollScreen()+0x4d>
c0007973:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0007977:	50                   	push   eax
c0007978:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000797c:	50                   	push   eax
c000797d:	e8 a8 ff ff ff       	call   c000792a <VgaText::combineColours(unsigned char, unsigned char)>
c0007982:	5a                   	pop    edx
c0007983:	5a                   	pop    edx
c0007984:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0007987:	eb 04                	jmp    c000798d <VgaText::scrollScreen()+0x51>
c0007989:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000798d:	47                   	inc    edi
c000798e:	46                   	inc    esi
c000798f:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0007995:	75 bd                	jne    c0007954 <VgaText::scrollScreen()+0x18>
c0007997:	41                   	inc    ecx
c0007998:	83 f9 19             	cmp    ecx,0x19
c000799b:	75 af                	jne    c000794c <VgaText::scrollScreen()+0x10>
c000799d:	39 1d f4 07 02 c0    	cmp    DWORD PTR ds:0xc00207f4,ebx
c00079a3:	75 1f                	jne    c00079c4 <VgaText::scrollScreen()+0x88>
c00079a5:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00079a9:	74 05                	je     c00079b0 <VgaText::scrollScreen()+0x74>
c00079ab:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00079ae:	eb 14                	jmp    c00079c4 <VgaText::scrollScreen()+0x88>
c00079b0:	50                   	push   eax
c00079b1:	50                   	push   eax
c00079b2:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00079b6:	50                   	push   eax
c00079b7:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00079bb:	50                   	push   eax
c00079bc:	e8 3f eb 00 00       	call   c0016500 <Hal::consoleScroll(int, int)>
c00079c1:	83 c4 10             	add    esp,0x10
c00079c4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00079c8:	83 c4 0c             	add    esp,0xc
c00079cb:	5b                   	pop    ebx
c00079cc:	5e                   	pop    esi
c00079cd:	5f                   	pop    edi
c00079ce:	5d                   	pop    ebp
c00079cf:	e9 72 fe ff ff       	jmp    c0007846 <VgaText::updateCursor()>

c00079d4 <VgaText::combineCharAndColour(char, unsigned char)>:
c00079d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00079d9:	c1 e0 08             	shl    eax,0x8
c00079dc:	89 c2                	mov    edx,eax
c00079de:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00079e3:	09 d0                	or     eax,edx
c00079e5:	c3                   	ret    

c00079e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00079e6:	55                   	push   ebp
c00079e7:	57                   	push   edi
c00079e8:	56                   	push   esi
c00079e9:	53                   	push   ebx
c00079ea:	83 ec 1c             	sub    esp,0x1c
c00079ed:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00079f1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00079f5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00079f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00079fd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0007a01:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0007a05:	0f b6 c3             	movzx  eax,bl
c0007a08:	50                   	push   eax
c0007a09:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0007a0e:	50                   	push   eax
c0007a0f:	e8 16 ff ff ff       	call   c000792a <VgaText::combineColours(unsigned char, unsigned char)>
c0007a14:	5a                   	pop    edx
c0007a15:	0f b6 c0             	movzx  eax,al
c0007a18:	59                   	pop    ecx
c0007a19:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0007a1e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007a22:	50                   	push   eax
c0007a23:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007a27:	e8 a8 ff ff ff       	call   c00079d4 <VgaText::combineCharAndColour(char, unsigned char)>
c0007a2c:	5a                   	pop    edx
c0007a2d:	66 6b d7 50          	imul   dx,di,0x50
c0007a31:	59                   	pop    ecx
c0007a32:	01 f2                	add    edx,esi
c0007a34:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0007a37:	0f b7 d2             	movzx  edx,dx
c0007a3a:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0007a3e:	39 2d f4 07 02 c0    	cmp    DWORD PTR ds:0xc00207f4,ebp
c0007a44:	75 28                	jne    c0007a6e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c0007a46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a4a:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0007a4e:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0007a52:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0007a56:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007a5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007a62:	83 c4 1c             	add    esp,0x1c
c0007a65:	5b                   	pop    ebx
c0007a66:	5e                   	pop    esi
c0007a67:	5f                   	pop    edi
c0007a68:	5d                   	pop    ebp
c0007a69:	e9 9a eb 00 00       	jmp    c0016608 <Hal::consoleWriteCharacter(char, int, int, int, int)>
c0007a6e:	83 c4 1c             	add    esp,0x1c
c0007a71:	5b                   	pop    ebx
c0007a72:	5e                   	pop    esi
c0007a73:	5f                   	pop    edi
c0007a74:	5d                   	pop    ebp
c0007a75:	c3                   	ret    

c0007a76 <VgaText::getCursorX()>:
c0007a76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a7a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0007a7d:	c3                   	ret    

c0007a7e <VgaText::getCursorY()>:
c0007a7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a82:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0007a85:	c3                   	ret    

c0007a86 <VgaText::setCursor(int, int)>:
c0007a86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007a8e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007a95:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007a98:	e9 a9 fd ff ff       	jmp    c0007846 <VgaText::updateCursor()>

c0007a9d <setActiveTerminal(VgaText*)>:
c0007a9d:	53                   	push   ebx
c0007a9e:	83 ec 08             	sub    esp,0x8
c0007aa1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007aa5:	85 db                	test   ebx,ebx
c0007aa7:	75 11                	jne    c0007aba <setActiveTerminal(VgaText*)+0x1d>
c0007aa9:	c7 44 24 10 fc df 01 c0 	mov    DWORD PTR [esp+0x10],0xc001dffc
c0007ab1:	83 c4 08             	add    esp,0x8
c0007ab4:	5b                   	pop    ebx
c0007ab5:	e9 23 7d 00 00       	jmp    c000f7dd <Krnl::panic(char const*)>
c0007aba:	a1 f4 07 02 c0       	mov    eax,ds:0xc00207f4
c0007abf:	85 c0                	test   eax,eax
c0007ac1:	74 0c                	je     c0007acf <setActiveTerminal(VgaText*)+0x32>
c0007ac3:	83 ec 0c             	sub    esp,0xc
c0007ac6:	50                   	push   eax
c0007ac7:	e8 7a fd ff ff       	call   c0007846 <VgaText::updateCursor()>
c0007acc:	83 c4 10             	add    esp,0x10
c0007acf:	89 1d f4 07 02 c0    	mov    DWORD PTR ds:0xc00207f4,ebx
c0007ad5:	50                   	push   eax
c0007ad6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007ad9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007adc:	53                   	push   ebx
c0007add:	e8 a4 ff ff ff       	call   c0007a86 <VgaText::setCursor(int, int)>
c0007ae2:	83 c4 18             	add    esp,0x18
c0007ae5:	5b                   	pop    ebx
c0007ae6:	c3                   	ret    
c0007ae7:	90                   	nop

c0007ae8 <VgaText::clearScreen()>:
c0007ae8:	57                   	push   edi
c0007ae9:	56                   	push   esi
c0007aea:	31 f6                	xor    esi,esi
c0007aec:	53                   	push   ebx
c0007aed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007af1:	52                   	push   edx
c0007af2:	6a 00                	push   0x0
c0007af4:	6a 00                	push   0x0
c0007af6:	53                   	push   ebx
c0007af7:	e8 8a ff ff ff       	call   c0007a86 <VgaText::setCursor(int, int)>
c0007afc:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0007b03:	83 c4 10             	add    esp,0x10
c0007b06:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0007b09:	7e 20                	jle    c0007b2b <VgaText::clearScreen()+0x43>
c0007b0b:	31 ff                	xor    edi,edi
c0007b0d:	50                   	push   eax
c0007b0e:	50                   	push   eax
c0007b0f:	56                   	push   esi
c0007b10:	57                   	push   edi
c0007b11:	47                   	inc    edi
c0007b12:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007b15:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007b18:	6a 20                	push   0x20
c0007b1a:	53                   	push   ebx
c0007b1b:	e8 c6 fe ff ff       	call   c00079e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007b20:	83 c4 20             	add    esp,0x20
c0007b23:	83 ff 50             	cmp    edi,0x50
c0007b26:	75 e5                	jne    c0007b0d <VgaText::clearScreen()+0x25>
c0007b28:	46                   	inc    esi
c0007b29:	eb db                	jmp    c0007b06 <VgaText::clearScreen()+0x1e>
c0007b2b:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0007b32:	5b                   	pop    ebx
c0007b33:	5e                   	pop    esi
c0007b34:	5f                   	pop    edi
c0007b35:	c3                   	ret    

c0007b36 <VgaText::setCursorX(int)>:
c0007b36:	83 ec 10             	sub    esp,0x10
c0007b39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007b3d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0007b40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007b44:	50                   	push   eax
c0007b45:	e8 3c ff ff ff       	call   c0007a86 <VgaText::setCursor(int, int)>
c0007b4a:	83 c4 1c             	add    esp,0x1c
c0007b4d:	c3                   	ret    

c0007b4e <VgaText::setCursorY(int)>:
c0007b4e:	83 ec 10             	sub    esp,0x10
c0007b51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007b55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007b59:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0007b5c:	50                   	push   eax
c0007b5d:	e8 24 ff ff ff       	call   c0007a86 <VgaText::setCursor(int, int)>
c0007b62:	83 c4 1c             	add    esp,0x1c
c0007b65:	c3                   	ret    

c0007b66 <VgaText::incrementCursor(bool)>:
c0007b66:	56                   	push   esi
c0007b67:	53                   	push   ebx
c0007b68:	51                   	push   ecx
c0007b69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007b6d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007b71:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0007b74:	40                   	inc    eax
c0007b75:	83 f8 50             	cmp    eax,0x50
c0007b78:	74 05                	je     c0007b7f <VgaText::incrementCursor(bool)+0x19>
c0007b7a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0007b7d:	eb 24                	jmp    c0007ba3 <VgaText::incrementCursor(bool)+0x3d>
c0007b7f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0007b82:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007b89:	8d 50 01             	lea    edx,[eax+0x1]
c0007b8c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0007b8f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0007b92:	75 0f                	jne    c0007ba3 <VgaText::incrementCursor(bool)+0x3d>
c0007b94:	83 ec 0c             	sub    esp,0xc
c0007b97:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0007b9a:	53                   	push   ebx
c0007b9b:	e8 9c fd ff ff       	call   c000793c <VgaText::scrollScreen()>
c0007ba0:	83 c4 10             	add    esp,0x10
c0007ba3:	89 f0                	mov    eax,esi
c0007ba5:	84 c0                	test   al,al
c0007ba7:	74 0c                	je     c0007bb5 <VgaText::incrementCursor(bool)+0x4f>
c0007ba9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bad:	5a                   	pop    edx
c0007bae:	5b                   	pop    ebx
c0007baf:	5e                   	pop    esi
c0007bb0:	e9 91 fc ff ff       	jmp    c0007846 <VgaText::updateCursor()>
c0007bb5:	58                   	pop    eax
c0007bb6:	5b                   	pop    ebx
c0007bb7:	5e                   	pop    esi
c0007bb8:	c3                   	ret    
c0007bb9:	90                   	nop

c0007bba <VgaText::decrementCursor(bool)>:
c0007bba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007bbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007bc2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0007bc5:	85 c0                	test   eax,eax
c0007bc7:	74 04                	je     c0007bcd <VgaText::decrementCursor(bool)+0x13>
c0007bc9:	48                   	dec    eax
c0007bca:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0007bcd:	84 c9                	test   cl,cl
c0007bcf:	74 09                	je     c0007bda <VgaText::decrementCursor(bool)+0x20>
c0007bd1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007bd5:	e9 6c fc ff ff       	jmp    c0007846 <VgaText::updateCursor()>
c0007bda:	c3                   	ret    
c0007bdb:	90                   	nop

c0007bdc <VgaText::putchar(char, VgaColour, VgaColour)>:
c0007bdc:	53                   	push   ebx
c0007bdd:	83 ec 08             	sub    esp,0x8
c0007be0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007be4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007be8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007bec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007bf0:	3c 07                	cmp    al,0x7
c0007bf2:	75 21                	jne    c0007c15 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c0007bf4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0007bfc:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0007c04:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0007c0c:	83 c4 08             	add    esp,0x8
c0007c0f:	5b                   	pop    ebx
c0007c10:	e9 32 2d 00 00       	jmp    c000a947 <Krnl::beep(int, int, bool)>
c0007c15:	3c 0d                	cmp    al,0xd
c0007c17:	75 09                	jne    c0007c22 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0007c19:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007c20:	eb 2c                	jmp    c0007c4e <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0007c22:	3c 0a                	cmp    al,0xa
c0007c24:	75 31                	jne    c0007c57 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0007c26:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0007c29:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007c30:	8d 50 01             	lea    edx,[eax+0x1]
c0007c33:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0007c36:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0007c39:	75 0f                	jne    c0007c4a <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0007c3b:	83 ec 0c             	sub    esp,0xc
c0007c3e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0007c41:	53                   	push   ebx
c0007c42:	e8 f5 fc ff ff       	call   c000793c <VgaText::scrollScreen()>
c0007c47:	83 c4 10             	add    esp,0x10
c0007c4a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c4e:	83 c4 08             	add    esp,0x8
c0007c51:	5b                   	pop    ebx
c0007c52:	e9 ef fb ff ff       	jmp    c0007846 <VgaText::updateCursor()>
c0007c57:	3c 08                	cmp    al,0x8
c0007c59:	75 25                	jne    c0007c80 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0007c5b:	50                   	push   eax
c0007c5c:	50                   	push   eax
c0007c5d:	6a 01                	push   0x1
c0007c5f:	53                   	push   ebx
c0007c60:	e8 55 ff ff ff       	call   c0007bba <VgaText::decrementCursor(bool)>
c0007c65:	5a                   	pop    edx
c0007c66:	59                   	pop    ecx
c0007c67:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007c6a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007c6d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007c70:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007c73:	6a 20                	push   0x20
c0007c75:	53                   	push   ebx
c0007c76:	e8 6b fd ff ff       	call   c00079e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007c7b:	83 c4 28             	add    esp,0x28
c0007c7e:	5b                   	pop    ebx
c0007c7f:	c3                   	ret    
c0007c80:	83 ec 08             	sub    esp,0x8
c0007c83:	0f be c0             	movsx  eax,al
c0007c86:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007c89:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007c8c:	51                   	push   ecx
c0007c8d:	52                   	push   edx
c0007c8e:	50                   	push   eax
c0007c8f:	53                   	push   ebx
c0007c90:	e8 51 fd ff ff       	call   c00079e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007c95:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0007c99:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0007ca1:	83 c4 28             	add    esp,0x28
c0007ca4:	5b                   	pop    ebx
c0007ca5:	e9 bc fe ff ff       	jmp    c0007b66 <VgaText::incrementCursor(bool)>

c0007caa <VgaText::putchar(char)>:
c0007caa:	56                   	push   esi
c0007cab:	53                   	push   ebx
c0007cac:	83 ec 14             	sub    esp,0x14
c0007caf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007cb3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007cb7:	3c 5b                	cmp    al,0x5b
c0007cb9:	75 18                	jne    c0007cd3 <VgaText::putchar(char)+0x29>
c0007cbb:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0007cbf:	74 1f                	je     c0007ce0 <VgaText::putchar(char)+0x36>
c0007cc1:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0007cc7:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0007cce:	e9 bd 00 00 00       	jmp    c0007d90 <VgaText::putchar(char)+0xe6>
c0007cd3:	3c 1b                	cmp    al,0x1b
c0007cd5:	75 09                	jne    c0007ce0 <VgaText::putchar(char)+0x36>
c0007cd7:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0007cdb:	e9 b0 00 00 00       	jmp    c0007d90 <VgaText::putchar(char)+0xe6>
c0007ce0:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0007ce3:	84 c9                	test   cl,cl
c0007ce5:	0f 84 92 00 00 00    	je     c0007d7d <VgaText::putchar(char)+0xd3>
c0007ceb:	8d 50 c0             	lea    edx,[eax-0x40]
c0007cee:	80 fa 3e             	cmp    dl,0x3e
c0007cf1:	77 76                	ja     c0007d69 <VgaText::putchar(char)+0xbf>
c0007cf3:	3c 6d                	cmp    al,0x6d
c0007cf5:	75 47                	jne    c0007d3e <VgaText::putchar(char)+0x94>
c0007cf7:	31 f6                	xor    esi,esi
c0007cf9:	31 d2                	xor    edx,edx
c0007cfb:	31 c0                	xor    eax,eax
c0007cfd:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0007d00:	7e 2d                	jle    c0007d2f <VgaText::putchar(char)+0x85>
c0007d02:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0007d07:	80 fa 3b             	cmp    dl,0x3b
c0007d0a:	75 17                	jne    c0007d23 <VgaText::putchar(char)+0x79>
c0007d0c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0007d10:	50                   	push   eax
c0007d11:	53                   	push   ebx
c0007d12:	e8 45 fb ff ff       	call   c000785c <VgaText::doANSI_SGR(int)>
c0007d17:	59                   	pop    ecx
c0007d18:	31 d2                	xor    edx,edx
c0007d1a:	58                   	pop    eax
c0007d1b:	31 c0                	xor    eax,eax
c0007d1d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0007d21:	eb 09                	jmp    c0007d2c <VgaText::putchar(char)+0x82>
c0007d23:	6b c0 0a             	imul   eax,eax,0xa
c0007d26:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0007d2a:	88 ca                	mov    dl,cl
c0007d2c:	46                   	inc    esi
c0007d2d:	eb ce                	jmp    c0007cfd <VgaText::putchar(char)+0x53>
c0007d2f:	84 d2                	test   dl,dl
c0007d31:	74 2e                	je     c0007d61 <VgaText::putchar(char)+0xb7>
c0007d33:	50                   	push   eax
c0007d34:	53                   	push   ebx
c0007d35:	e8 22 fb ff ff       	call   c000785c <VgaText::doANSI_SGR(int)>
c0007d3a:	58                   	pop    eax
c0007d3b:	5a                   	pop    edx
c0007d3c:	eb 23                	jmp    c0007d61 <VgaText::putchar(char)+0xb7>
c0007d3e:	3c 4a                	cmp    al,0x4a
c0007d40:	75 1f                	jne    c0007d61 <VgaText::putchar(char)+0xb7>
c0007d42:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0007d46:	75 19                	jne    c0007d61 <VgaText::putchar(char)+0xb7>
c0007d48:	83 ec 0c             	sub    esp,0xc
c0007d4b:	53                   	push   ebx
c0007d4c:	e8 97 fd ff ff       	call   c0007ae8 <VgaText::clearScreen()>
c0007d51:	83 c4 0c             	add    esp,0xc
c0007d54:	6a 00                	push   0x0
c0007d56:	6a 00                	push   0x0
c0007d58:	53                   	push   ebx
c0007d59:	e8 28 fd ff ff       	call   c0007a86 <VgaText::setCursor(int, int)>
c0007d5e:	83 c4 10             	add    esp,0x10
c0007d61:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0007d67:	eb 27                	jmp    c0007d90 <VgaText::putchar(char)+0xe6>
c0007d69:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0007d6c:	83 fa 0e             	cmp    edx,0xe
c0007d6f:	7f 1f                	jg     c0007d90 <VgaText::putchar(char)+0xe6>
c0007d71:	8d 4a 01             	lea    ecx,[edx+0x1]
c0007d74:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0007d77:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0007d7b:	eb 13                	jmp    c0007d90 <VgaText::putchar(char)+0xe6>
c0007d7d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007d80:	0f be c0             	movsx  eax,al
c0007d83:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007d86:	50                   	push   eax
c0007d87:	53                   	push   ebx
c0007d88:	e8 4f fe ff ff       	call   c0007bdc <VgaText::putchar(char, VgaColour, VgaColour)>
c0007d8d:	83 c4 10             	add    esp,0x10
c0007d90:	83 c4 14             	add    esp,0x14
c0007d93:	5b                   	pop    ebx
c0007d94:	5e                   	pop    esi
c0007d95:	c3                   	ret    

c0007d96 <VgaText::putx(unsigned int)>:
c0007d96:	57                   	push   edi
c0007d97:	b9 11 00 00 00       	mov    ecx,0x11
c0007d9c:	56                   	push   esi
c0007d9d:	be 0a e0 01 c0       	mov    esi,0xc001e00a
c0007da2:	53                   	push   ebx
c0007da3:	83 ec 20             	sub    esp,0x20
c0007da6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0007daa:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0007dae:	fc                   	cld    
c0007daf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007db1:	be 08 00 00 00       	mov    esi,0x8
c0007db6:	50                   	push   eax
c0007db7:	50                   	push   eax
c0007db8:	89 d8                	mov    eax,ebx
c0007dba:	c1 e3 04             	shl    ebx,0x4
c0007dbd:	c1 e8 1c             	shr    eax,0x1c
c0007dc0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0007dc5:	50                   	push   eax
c0007dc6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dca:	e8 db fe ff ff       	call   c0007caa <VgaText::putchar(char)>
c0007dcf:	83 c4 10             	add    esp,0x10
c0007dd2:	4e                   	dec    esi
c0007dd3:	75 e1                	jne    c0007db6 <VgaText::putx(unsigned int)+0x20>
c0007dd5:	83 c4 20             	add    esp,0x20
c0007dd8:	5b                   	pop    ebx
c0007dd9:	5e                   	pop    esi
c0007dda:	5f                   	pop    edi
c0007ddb:	c3                   	ret    

c0007ddc <VgaText::puts(char const*)>:
c0007ddc:	53                   	push   ebx
c0007ddd:	83 ec 08             	sub    esp,0x8
c0007de0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0007de4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0007de7:	84 c0                	test   al,al
c0007de9:	74 12                	je     c0007dfd <VgaText::puts(char const*)+0x21>
c0007deb:	43                   	inc    ebx
c0007dec:	51                   	push   ecx
c0007ded:	51                   	push   ecx
c0007dee:	50                   	push   eax
c0007def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007df3:	e8 b2 fe ff ff       	call   c0007caa <VgaText::putchar(char)>
c0007df8:	83 c4 10             	add    esp,0x10
c0007dfb:	eb e7                	jmp    c0007de4 <VgaText::puts(char const*)+0x8>
c0007dfd:	83 c4 08             	add    esp,0x8
c0007e00:	5b                   	pop    ebx
c0007e01:	c3                   	ret    

c0007e02 <VgaText::write(unsigned long long, void*, int*)>:
c0007e02:	55                   	push   ebp
c0007e03:	57                   	push   edi
c0007e04:	56                   	push   esi
c0007e05:	53                   	push   ebx
c0007e06:	83 ec 0c             	sub    esp,0xc
c0007e09:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0007e0d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0007e11:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0007e15:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0007e1c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0007e1f:	39 eb                	cmp    ebx,ebp
c0007e21:	74 13                	je     c0007e36 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0007e23:	43                   	inc    ebx
c0007e24:	50                   	push   eax
c0007e25:	50                   	push   eax
c0007e26:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0007e2a:	50                   	push   eax
c0007e2b:	56                   	push   esi
c0007e2c:	e8 79 fe ff ff       	call   c0007caa <VgaText::putchar(char)>
c0007e31:	83 c4 10             	add    esp,0x10
c0007e34:	eb e9                	jmp    c0007e1f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0007e36:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0007e3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007e41:	89 38                	mov    DWORD PTR [eax],edi
c0007e43:	83 c4 0c             	add    esp,0xc
c0007e46:	31 c0                	xor    eax,eax
c0007e48:	5b                   	pop    ebx
c0007e49:	5e                   	pop    esi
c0007e4a:	5f                   	pop    edi
c0007e4b:	5d                   	pop    ebp
c0007e4c:	c3                   	ret    
c0007e4d:	90                   	nop

c0007e4e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0007e4e:	55                   	push   ebp
c0007e4f:	57                   	push   edi
c0007e50:	56                   	push   esi
c0007e51:	53                   	push   ebx
c0007e52:	83 ec 0c             	sub    esp,0xc
c0007e55:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007e59:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0007e5e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0007e65:	50                   	push   eax
c0007e66:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0007e6b:	50                   	push   eax
c0007e6c:	e8 b9 fa ff ff       	call   c000792a <VgaText::combineColours(unsigned char, unsigned char)>
c0007e71:	5a                   	pop    edx
c0007e72:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007e77:	59                   	pop    ecx
c0007e78:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007e7b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0007e7f:	0f b7 f6             	movzx  esi,si
c0007e82:	0f b6 e8             	movzx  ebp,al
c0007e85:	01 f6                	add    esi,esi
c0007e87:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007e8a:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0007e8d:	84 c0                	test   al,al
c0007e8f:	0f 84 ef 00 00 00    	je     c0007f84 <VgaText::puts(char const*, VgaColour, VgaColour)+0x136>
c0007e95:	3c 0d                	cmp    al,0xd
c0007e97:	75 0c                	jne    c0007ea5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0007e99:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007ea0:	e9 d9 00 00 00       	jmp    c0007f7e <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c0007ea5:	3c 0a                	cmp    al,0xa
c0007ea7:	75 45                	jne    c0007eee <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0007ea9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0007eac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007eb3:	8d 48 01             	lea    ecx,[eax+0x1]
c0007eb6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0007eb9:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0007ebc:	75 0f                	jne    c0007ecd <VgaText::puts(char const*, VgaColour, VgaColour)+0x7f>
c0007ebe:	83 ec 0c             	sub    esp,0xc
c0007ec1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0007ec4:	53                   	push   ebx
c0007ec5:	e8 72 fa ff ff       	call   c000793c <VgaText::scrollScreen()>
c0007eca:	83 c4 10             	add    esp,0x10
c0007ecd:	83 ec 0c             	sub    esp,0xc
c0007ed0:	53                   	push   ebx
c0007ed1:	e8 70 f9 ff ff       	call   c0007846 <VgaText::updateCursor()>
c0007ed6:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007edb:	83 c4 10             	add    esp,0x10
c0007ede:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007ee1:	0f b7 f6             	movzx  esi,si
c0007ee4:	01 f6                	add    esi,esi
c0007ee6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007ee9:	e9 90 00 00 00       	jmp    c0007f7e <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c0007eee:	3c 08                	cmp    al,0x8
c0007ef0:	75 35                	jne    c0007f27 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0007ef2:	51                   	push   ecx
c0007ef3:	51                   	push   ecx
c0007ef4:	6a 01                	push   0x1
c0007ef6:	53                   	push   ebx
c0007ef7:	e8 be fc ff ff       	call   c0007bba <VgaText::decrementCursor(bool)>
c0007efc:	5e                   	pop    esi
c0007efd:	58                   	pop    eax
c0007efe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007f01:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007f04:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007f07:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007f0a:	6a 20                	push   0x20
c0007f0c:	53                   	push   ebx
c0007f0d:	e8 d4 fa ff ff       	call   c00079e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007f12:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007f17:	83 c4 20             	add    esp,0x20
c0007f1a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007f1d:	0f b7 f6             	movzx  esi,si
c0007f20:	01 f6                	add    esi,esi
c0007f22:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007f25:	eb 57                	jmp    c0007f7e <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c0007f27:	52                   	push   edx
c0007f28:	52                   	push   edx
c0007f29:	55                   	push   ebp
c0007f2a:	50                   	push   eax
c0007f2b:	e8 a4 fa ff ff       	call   c00079d4 <VgaText::combineCharAndColour(char, unsigned char)>
c0007f30:	83 c4 10             	add    esp,0x10
c0007f33:	66 89 06             	mov    WORD PTR [esi],ax
c0007f36:	39 1d f4 07 02 c0    	cmp    DWORD PTR ds:0xc00207f4,ebx
c0007f3c:	75 1d                	jne    c0007f5b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0007f3e:	83 ec 0c             	sub    esp,0xc
c0007f41:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007f44:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007f47:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0007f4b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0007f4f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0007f52:	50                   	push   eax
c0007f53:	e8 b0 e6 00 00       	call   c0016608 <Hal::consoleWriteCharacter(char, int, int, int, int)>
c0007f58:	83 c4 20             	add    esp,0x20
c0007f5b:	83 c6 02             	add    esi,0x2
c0007f5e:	50                   	push   eax
c0007f5f:	50                   	push   eax
c0007f60:	6a 00                	push   0x0
c0007f62:	53                   	push   ebx
c0007f63:	e8 fe fb ff ff       	call   c0007b66 <VgaText::incrementCursor(bool)>
c0007f68:	83 c4 10             	add    esp,0x10
c0007f6b:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0007f6f:	75 0d                	jne    c0007f7e <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c0007f71:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007f76:	0f b7 f6             	movzx  esi,si
c0007f79:	01 f6                	add    esi,esi
c0007f7b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007f7e:	47                   	inc    edi
c0007f7f:	e9 06 ff ff ff       	jmp    c0007e8a <VgaText::puts(char const*, VgaColour, VgaColour)+0x3c>
c0007f84:	83 ec 0c             	sub    esp,0xc
c0007f87:	53                   	push   ebx
c0007f88:	e8 b9 f8 ff ff       	call   c0007846 <VgaText::updateCursor()>
c0007f8d:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0007f94:	83 c4 1c             	add    esp,0x1c
c0007f97:	5b                   	pop    ebx
c0007f98:	5e                   	pop    esi
c0007f99:	5f                   	pop    edi
c0007f9a:	5d                   	pop    ebp
c0007f9b:	c3                   	ret    

c0007f9c <VgaText::VgaText(char const*)>:
c0007f9c:	56                   	push   esi
c0007f9d:	53                   	push   ebx
c0007f9e:	83 ec 04             	sub    esp,0x4
c0007fa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fa5:	83 ec 08             	sub    esp,0x8
c0007fa8:	6a 00                	push   0x0
c0007faa:	50                   	push   eax
c0007fab:	e8 b2 04 00 00       	call   c0008462 <UnixFile::UnixFile(int)>
c0007fb0:	83 c4 10             	add    esp,0x10
c0007fb3:	ba 70 e0 01 c0       	mov    edx,0xc001e070
c0007fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fbc:	89 10                	mov    DWORD PTR [eax],edx
c0007fbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fc2:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0007fc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fcd:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0007fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fd8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0007fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fe0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0007fe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fe8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0007fef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ff3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0007ffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ffe:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008009:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008014:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c000801b:	83 ec 0c             	sub    esp,0xc
c000801e:	6a 01                	push   0x1
c0008020:	e8 80 08 00 00       	call   c00088a5 <Virt::allocateKernelVirtualPages(int)>
c0008025:	83 c4 10             	add    esp,0x10
c0008028:	89 c2                	mov    edx,eax
c000802a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000802e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008031:	8b 1d 94 08 02 c0    	mov    ebx,DWORD PTR ds:0xc0020894
c0008037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000803b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000803e:	89 c6                	mov    esi,eax
c0008040:	e8 ff f0 ff ff       	call   c0007144 <Phys::allocatePage()>
c0008045:	68 05 0c 00 00       	push   0xc05
c000804a:	56                   	push   esi
c000804b:	50                   	push   eax
c000804c:	53                   	push   ebx
c000804d:	e8 a6 0e 00 00       	call   c0008ef8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008052:	83 c4 10             	add    esp,0x10
c0008055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008059:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000805c:	83 ec 04             	sub    esp,0x4
c000805f:	68 a0 0f 00 00       	push   0xfa0
c0008064:	6a 00                	push   0x0
c0008066:	50                   	push   eax
c0008067:	e8 3c 84 ff ff       	call   c00004a8 <memset>
c000806c:	83 c4 10             	add    esp,0x10
c000806f:	83 ec 04             	sub    esp,0x4
c0008072:	6a 00                	push   0x0
c0008074:	6a 07                	push   0x7
c0008076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000807a:	e8 71 f8 ff ff       	call   c00078f0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000807f:	83 c4 10             	add    esp,0x10
c0008082:	83 ec 04             	sub    esp,0x4
c0008085:	6a 00                	push   0x0
c0008087:	6a 00                	push   0x0
c0008089:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000808d:	e8 f4 f9 ff ff       	call   c0007a86 <VgaText::setCursor(int, int)>
c0008092:	83 c4 10             	add    esp,0x10
c0008095:	83 ec 0c             	sub    esp,0xc
c0008098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000809c:	e8 47 fa ff ff       	call   c0007ae8 <VgaText::clearScreen()>
c00080a1:	83 c4 10             	add    esp,0x10
c00080a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080a8:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00080ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080b0:	05 82 00 00 00       	add    eax,0x82
c00080b5:	83 ec 04             	sub    esp,0x4
c00080b8:	6a 30                	push   0x30
c00080ba:	6a 00                	push   0x0
c00080bc:	50                   	push   eax
c00080bd:	e8 e6 83 ff ff       	call   c00004a8 <memset>
c00080c2:	83 c4 10             	add    esp,0x10
c00080c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080c9:	05 b2 00 00 00       	add    eax,0xb2
c00080ce:	83 ec 04             	sub    esp,0x4
c00080d1:	68 80 00 00 00       	push   0x80
c00080d6:	6a 00                	push   0x0
c00080d8:	50                   	push   eax
c00080d9:	e8 ca 83 ff ff       	call   c00004a8 <memset>
c00080de:	83 c4 10             	add    esp,0x10
c00080e1:	90                   	nop
c00080e2:	83 c4 04             	add    esp,0x4
c00080e5:	5b                   	pop    ebx
c00080e6:	5e                   	pop    esi
c00080e7:	c3                   	ret    

c00080e8 <VgaText::receiveKey(unsigned char)>:
c00080e8:	57                   	push   edi
c00080e9:	56                   	push   esi
c00080ea:	53                   	push   ebx
c00080eb:	83 ec 10             	sub    esp,0x10
c00080ee:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00080f2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00080f6:	84 db                	test   bl,bl
c00080f8:	0f 84 ba 00 00 00    	je     c00081b8 <VgaText::receiveKey(unsigned char)+0xd0>
c00080fe:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c0008104:	80 fb 08             	cmp    bl,0x8
c0008107:	75 2c                	jne    c0008135 <VgaText::receiveKey(unsigned char)+0x4d>
c0008109:	83 ec 0c             	sub    esp,0xc
c000810c:	57                   	push   edi
c000810d:	e8 b2 83 ff ff       	call   c00004c4 <strlen>
c0008112:	83 c4 10             	add    esp,0x10
c0008115:	85 c0                	test   eax,eax
c0008117:	74 41                	je     c000815a <VgaText::receiveKey(unsigned char)+0x72>
c0008119:	50                   	push   eax
c000811a:	50                   	push   eax
c000811b:	6a 08                	push   0x8
c000811d:	56                   	push   esi
c000811e:	e8 87 fb ff ff       	call   c0007caa <VgaText::putchar(char)>
c0008123:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008126:	e8 99 83 ff ff       	call   c00004c4 <strlen>
c000812b:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0008133:	eb 22                	jmp    c0008157 <VgaText::receiveKey(unsigned char)+0x6f>
c0008135:	0f be c3             	movsx  eax,bl
c0008138:	52                   	push   edx
c0008139:	52                   	push   edx
c000813a:	50                   	push   eax
c000813b:	56                   	push   esi
c000813c:	e8 69 fb ff ff       	call   c0007caa <VgaText::putchar(char)>
c0008141:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0008145:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000814a:	59                   	pop    ecx
c000814b:	58                   	pop    eax
c000814c:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008150:	50                   	push   eax
c0008151:	57                   	push   edi
c0008152:	e8 4d 85 ff ff       	call   c00006a4 <strcat>
c0008157:	83 c4 10             	add    esp,0x10
c000815a:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0008161:	75 05                	jne    c0008168 <VgaText::receiveKey(unsigned char)+0x80>
c0008163:	80 fb 0a             	cmp    bl,0xa
c0008166:	75 50                	jne    c00081b8 <VgaText::receiveKey(unsigned char)+0xd0>
c0008168:	83 ec 0c             	sub    esp,0xc
c000816b:	81 c6 b2 00 00 00    	add    esi,0xb2
c0008171:	56                   	push   esi
c0008172:	e8 4d 83 ff ff       	call   c00004c4 <strlen>
c0008177:	89 3c 24             	mov    DWORD PTR [esp],edi
c000817a:	89 c3                	mov    ebx,eax
c000817c:	e8 43 83 ff ff       	call   c00004c4 <strlen>
c0008181:	83 c4 10             	add    esp,0x10
c0008184:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c0008188:	3d 80 00 00 00       	cmp    eax,0x80
c000818d:	76 10                	jbe    c000819f <VgaText::receiveKey(unsigned char)+0xb7>
c000818f:	83 ec 0c             	sub    esp,0xc
c0008192:	68 1b e0 01 c0       	push   0xc001e01b
c0008197:	e8 41 76 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c000819c:	83 c4 10             	add    esp,0x10
c000819f:	50                   	push   eax
c00081a0:	50                   	push   eax
c00081a1:	57                   	push   edi
c00081a2:	56                   	push   esi
c00081a3:	e8 fc 84 ff ff       	call   c00006a4 <strcat>
c00081a8:	83 c4 0c             	add    esp,0xc
c00081ab:	6a 30                	push   0x30
c00081ad:	6a 00                	push   0x0
c00081af:	57                   	push   edi
c00081b0:	e8 f3 82 ff ff       	call   c00004a8 <memset>
c00081b5:	83 c4 10             	add    esp,0x10
c00081b8:	83 c4 10             	add    esp,0x10
c00081bb:	5b                   	pop    ebx
c00081bc:	5e                   	pop    esi
c00081bd:	5f                   	pop    edi
c00081be:	c3                   	ret    
c00081bf:	90                   	nop

c00081c0 <VgaText::doUpdate()>:
c00081c0:	c3                   	ret    

c00081c1 <newTerminal(char*)>:
c00081c1:	83 ec 28             	sub    esp,0x28
c00081c4:	68 34 01 00 00       	push   0x134
c00081c9:	e8 af eb ff ff       	call   c0006d7d <malloc>
c00081ce:	5a                   	pop    edx
c00081cf:	59                   	pop    ecx
c00081d0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081d4:	50                   	push   eax
c00081d5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00081d9:	e8 be fd ff ff       	call   c0007f9c <VgaText::VgaText(char const*)>
c00081de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081e2:	83 c4 2c             	add    esp,0x2c
c00081e5:	c3                   	ret    
c00081e6:	66 90                	xchg   ax,ax

c00081e8 <TSS::TSS()>:
c00081e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00081f3:	90                   	nop
c00081f4:	c3                   	ret    
c00081f5:	90                   	nop
c00081f6:	66 90                	xchg   ax,ax

c00081f8 <TSS::setESP(unsigned long)>:
c00081f8:	55                   	push   ebp
c00081f9:	89 e5                	mov    ebp,esp
c00081fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00081fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008201:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008204:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008207:	90                   	nop
c0008208:	5d                   	pop    ebp
c0008209:	c3                   	ret    
c000820a:	66 90                	xchg   ax,ax

c000820c <TSS::flush()>:
c000820c:	55                   	push   ebp
c000820d:	89 e5                	mov    ebp,esp
c000820f:	83 ec 10             	sub    esp,0x10
c0008212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008215:	8b 00                	mov    eax,DWORD PTR [eax]
c0008217:	83 c8 03             	or     eax,0x3
c000821a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000821e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008222:	66 89 d0             	mov    ax,dx
c0008225:	0f 00 d8             	ltr    ax
c0008228:	90                   	nop
c0008229:	c9                   	leave  
c000822a:	c3                   	ret    
c000822b:	90                   	nop

c000822c <TSS::setup(unsigned long, unsigned long)>:
c000822c:	55                   	push   ebp
c000822d:	89 e5                	mov    ebp,esp
c000822f:	83 ec 18             	sub    esp,0x18
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	6a 68                	push   0x68
c0008237:	e8 41 eb ff ff       	call   c0006d7d <malloc>
c000823c:	83 c4 10             	add    esp,0x10
c000823f:	89 c2                	mov    edx,eax
c0008241:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008244:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008247:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000824a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000824d:	83 ec 04             	sub    esp,0x4
c0008250:	6a 68                	push   0x68
c0008252:	6a 00                	push   0x0
c0008254:	50                   	push   eax
c0008255:	e8 4e 82 ff ff       	call   c00004a8 <memset>
c000825a:	83 c4 10             	add    esp,0x10
c000825d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008260:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008263:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008269:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000826c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000826f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008275:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008278:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000827b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000827e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008281:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008284:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008287:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000828d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008290:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008293:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008299:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000829c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000829f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00082a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00082a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00082ab:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00082b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00082b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00082b7:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00082bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00082c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00082c3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00082c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00082cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00082cf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00082d2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00082d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00082d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00082db:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00082de:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00082e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00082e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00082e7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00082ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00082f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00082f4:	0f 20 da             	mov    edx,cr3
c00082f7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00082fa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00082fd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008300:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008303:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008306:	83 ec 08             	sub    esp,0x8
c0008309:	50                   	push   eax
c000830a:	8d 45 ec             	lea    eax,[ebp-0x14]
c000830d:	50                   	push   eax
c000830e:	e8 b1 e2 ff ff       	call   c00065c4 <GDTEntry::setBase(unsigned int)>
c0008313:	83 c4 10             	add    esp,0x10
c0008316:	83 ec 08             	sub    esp,0x8
c0008319:	6a 68                	push   0x68
c000831b:	8d 45 ec             	lea    eax,[ebp-0x14]
c000831e:	50                   	push   eax
c000831f:	e8 bc e2 ff ff       	call   c00065e0 <GDTEntry::setLimit(unsigned int)>
c0008324:	83 c4 10             	add    esp,0x10
c0008327:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000832b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000832e:	83 e0 0f             	and    eax,0xf
c0008331:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008334:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008337:	83 c8 40             	or     eax,0x40
c000833a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000833d:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c0008342:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008348:	05 78 01 00 00       	add    eax,0x178
c000834d:	83 ec 04             	sub    esp,0x4
c0008350:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008353:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008356:	50                   	push   eax
c0008357:	e8 b8 e2 ff ff       	call   c0006614 <GDT::addEntry(GDTEntry)>
c000835c:	83 c4 10             	add    esp,0x10
c000835f:	89 c2                	mov    edx,eax
c0008361:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008364:	89 10                	mov    DWORD PTR [eax],edx
c0008366:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c000836b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008371:	05 78 01 00 00       	add    eax,0x178
c0008376:	83 ec 0c             	sub    esp,0xc
c0008379:	50                   	push   eax
c000837a:	e8 bf e2 ff ff       	call   c000663e <GDT::flush()>
c000837f:	83 c4 10             	add    esp,0x10
c0008382:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008385:	8b 00                	mov    eax,DWORD PTR [eax]
c0008387:	c9                   	leave  
c0008388:	c3                   	ret    
c0008389:	90                   	nop

c000838a <ReservedFilename::read(unsigned long long, void*, int*)>:
c000838a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000838e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008392:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008395:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000839a:	75 08                	jne    c00083a4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000839c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00083a2:	eb 38                	jmp    c00083dc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00083a4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00083a9:	75 17                	jne    c00083c2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00083ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00083b0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00083b3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00083b9:	8b 10                	mov    edx,DWORD PTR [eax]
c00083bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00083bf:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00083c2:	89 c1                	mov    ecx,eax
c00083c4:	83 e1 fd             	and    ecx,0xfffffffd
c00083c7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00083cd:	74 cd                	je     c000839c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00083cf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00083d4:	83 e0 ef             	and    eax,0xffffffef
c00083d7:	83 f8 08             	cmp    eax,0x8
c00083da:	76 c0                	jbe    c000839c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00083dc:	31 c0                	xor    eax,eax
c00083de:	c3                   	ret    
c00083df:	90                   	nop

c00083e0 <ReservedFilename::isAtty()>:
c00083e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083e4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00083e7:	31 c0                	xor    eax,eax
c00083e9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00083ef:	74 09                	je     c00083fa <ReservedFilename::isAtty()+0x1a>
c00083f1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00083f7:	0f 94 c0             	sete   al
c00083fa:	c3                   	ret    
c00083fb:	90                   	nop

c00083fc <ReservedFilename::write(unsigned long long, void*, int*)>:
c00083fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008400:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008404:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008407:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000840b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008410:	75 08                	jne    c000841a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008412:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008418:	eb 3d                	jmp    c0008457 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000841a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000841f:	75 17                	jne    c0008438 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008421:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008426:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008429:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000842f:	8b 10                	mov    edx,DWORD PTR [eax]
c0008431:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008435:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008438:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000843d:	75 04                	jne    c0008443 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000843f:	89 0a                	mov    DWORD PTR [edx],ecx
c0008441:	eb 14                	jmp    c0008457 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008443:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008448:	74 c8                	je     c0008412 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000844a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000844f:	83 e0 ef             	and    eax,0xffffffef
c0008452:	83 f8 08             	cmp    eax,0x8
c0008455:	76 bb                	jbe    c0008412 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008457:	31 c0                	xor    eax,eax
c0008459:	c3                   	ret    

c000845a <UnixFile::getFileDescriptor()>:
c000845a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000845e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008461:	c3                   	ret    

c0008462 <UnixFile::UnixFile(int)>:
c0008462:	53                   	push   ebx
c0008463:	83 ec 28             	sub    esp,0x28
c0008466:	ba 38 e1 01 c0       	mov    edx,0xc001e138
c000846b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000846f:	89 10                	mov    DWORD PTR [eax],edx
c0008471:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008479:	0f 8f 8c 01 00 00    	jg     c000860b <UnixFile::UnixFile(int)+0x1a9>
c000847f:	a1 40 01 02 c0       	mov    eax,ds:0xc0020140
c0008484:	8d 50 01             	lea    edx,[eax+0x1]
c0008487:	89 15 40 01 02 c0    	mov    DWORD PTR ds:0xc0020140,edx
c000848d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008491:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008494:	83 ec 08             	sub    esp,0x8
c0008497:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000849b:	68 78 08 02 c0       	push   0xc0020878
c00084a0:	e8 33 47 01 00       	call   c001cbd8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00084a5:	83 c4 10             	add    esp,0x10
c00084a8:	a0 74 08 02 c0       	mov    al,ds:0xc0020874
c00084ad:	83 f0 01             	xor    eax,0x1
c00084b0:	84 c0                	test   al,al
c00084b2:	0f 84 54 01 00 00    	je     c000860c <UnixFile::UnixFile(int)+0x1aa>
c00084b8:	c6 05 74 08 02 c0 01 	mov    BYTE PTR ds:0xc0020874,0x1
c00084bf:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00084c7:	83 ec 0c             	sub    esp,0xc
c00084ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084ce:	e8 aa e8 ff ff       	call   c0006d7d <malloc>
c00084d3:	83 c4 10             	add    esp,0x10
c00084d6:	89 c3                	mov    ebx,eax
c00084d8:	83 ec 08             	sub    esp,0x8
c00084db:	68 03 ff ff 0f       	push   0xfffff03
c00084e0:	53                   	push   ebx
c00084e1:	e8 2c 01 00 00       	call   c0008612 <ReservedFilename::ReservedFilename(int)>
c00084e6:	83 c4 10             	add    esp,0x10
c00084e9:	89 1d 6c 08 02 c0    	mov    DWORD PTR ds:0xc002086c,ebx
c00084ef:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00084f7:	83 ec 0c             	sub    esp,0xc
c00084fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084fe:	e8 7a e8 ff ff       	call   c0006d7d <malloc>
c0008503:	83 c4 10             	add    esp,0x10
c0008506:	89 c3                	mov    ebx,eax
c0008508:	83 ec 08             	sub    esp,0x8
c000850b:	68 01 ff ff 0f       	push   0xfffff01
c0008510:	53                   	push   ebx
c0008511:	e8 fc 00 00 00       	call   c0008612 <ReservedFilename::ReservedFilename(int)>
c0008516:	83 c4 10             	add    esp,0x10
c0008519:	89 1d 70 08 02 c0    	mov    DWORD PTR ds:0xc0020870,ebx
c000851f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008527:	83 ec 0c             	sub    esp,0xc
c000852a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000852e:	e8 4a e8 ff ff       	call   c0006d7d <malloc>
c0008533:	83 c4 10             	add    esp,0x10
c0008536:	89 c3                	mov    ebx,eax
c0008538:	83 ec 08             	sub    esp,0x8
c000853b:	68 00 ff ff 0f       	push   0xfffff00
c0008540:	53                   	push   ebx
c0008541:	e8 cc 00 00 00       	call   c0008612 <ReservedFilename::ReservedFilename(int)>
c0008546:	83 c4 10             	add    esp,0x10
c0008549:	89 1d 64 08 02 c0    	mov    DWORD PTR ds:0xc0020864,ebx
c000854f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008557:	83 ec 0c             	sub    esp,0xc
c000855a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000855e:	e8 1a e8 ff ff       	call   c0006d7d <malloc>
c0008563:	83 c4 10             	add    esp,0x10
c0008566:	89 c3                	mov    ebx,eax
c0008568:	83 ec 08             	sub    esp,0x8
c000856b:	68 02 ff ff 0f       	push   0xfffff02
c0008570:	53                   	push   ebx
c0008571:	e8 9c 00 00 00       	call   c0008612 <ReservedFilename::ReservedFilename(int)>
c0008576:	83 c4 10             	add    esp,0x10
c0008579:	89 1d 68 08 02 c0    	mov    DWORD PTR ds:0xc0020868,ebx
c000857f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008587:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000858c:	7f 7e                	jg     c000860c <UnixFile::UnixFile(int)+0x1aa>
c000858e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008596:	83 ec 0c             	sub    esp,0xc
c0008599:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000859d:	e8 db e7 ff ff       	call   c0006d7d <malloc>
c00085a2:	83 c4 10             	add    esp,0x10
c00085a5:	89 c3                	mov    ebx,eax
c00085a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085ab:	05 10 ff ff 0f       	add    eax,0xfffff10
c00085b0:	83 ec 08             	sub    esp,0x8
c00085b3:	50                   	push   eax
c00085b4:	53                   	push   ebx
c00085b5:	e8 58 00 00 00       	call   c0008612 <ReservedFilename::ReservedFilename(int)>
c00085ba:	83 c4 10             	add    esp,0x10
c00085bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085c1:	89 1c 85 40 08 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf7c0],ebx
c00085c8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00085d0:	83 ec 0c             	sub    esp,0xc
c00085d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d7:	e8 a1 e7 ff ff       	call   c0006d7d <malloc>
c00085dc:	83 c4 10             	add    esp,0x10
c00085df:	89 c3                	mov    ebx,eax
c00085e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085e5:	05 20 ff ff 0f       	add    eax,0xfffff20
c00085ea:	83 ec 08             	sub    esp,0x8
c00085ed:	50                   	push   eax
c00085ee:	53                   	push   ebx
c00085ef:	e8 1e 00 00 00       	call   c0008612 <ReservedFilename::ReservedFilename(int)>
c00085f4:	83 c4 10             	add    esp,0x10
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	89 1c 85 00 08 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf800],ebx
c0008602:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008606:	e9 7c ff ff ff       	jmp    c0008587 <UnixFile::UnixFile(int)+0x125>
c000860b:	90                   	nop
c000860c:	83 c4 28             	add    esp,0x28
c000860f:	5b                   	pop    ebx
c0008610:	c3                   	ret    
c0008611:	90                   	nop

c0008612 <ReservedFilename::ReservedFilename(int)>:
c0008612:	83 ec 0c             	sub    esp,0xc
c0008615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008619:	83 ec 08             	sub    esp,0x8
c000861c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008620:	50                   	push   eax
c0008621:	e8 3c fe ff ff       	call   c0008462 <UnixFile::UnixFile(int)>
c0008626:	83 c4 10             	add    esp,0x10
c0008629:	ba 54 e1 01 c0       	mov    edx,0xc001e154
c000862e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008632:	89 10                	mov    DWORD PTR [eax],edx
c0008634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008638:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000863c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000863f:	90                   	nop
c0008640:	83 c4 0c             	add    esp,0xc
c0008643:	c3                   	ret    

c0008644 <UnixFile::~UnixFile()>:
c0008644:	83 ec 1c             	sub    esp,0x1c
c0008647:	ba 38 e1 01 c0       	mov    edx,0xc001e138
c000864c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008650:	89 10                	mov    DWORD PTR [eax],edx
c0008652:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008656:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008659:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000865e:	7f 73                	jg     c00086d3 <UnixFile::~UnixFile()+0x8f>
c0008660:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008668:	83 ec 0c             	sub    esp,0xc
c000866b:	68 78 08 02 c0       	push   0xc0020878
c0008670:	e8 37 46 01 00       	call   c001ccac <LinkedList<UnixFile>::getFirstElement()>
c0008675:	83 c4 10             	add    esp,0x10
c0008678:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000867c:	83 ec 0c             	sub    esp,0xc
c000867f:	68 78 08 02 c0       	push   0xc0020878
c0008684:	e8 2b 46 01 00       	call   c001ccb4 <LinkedList<UnixFile>::removeFirst()>
c0008689:	83 c4 10             	add    esp,0x10
c000868c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008690:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0008694:	74 40                	je     c00086d6 <UnixFile::~UnixFile()+0x92>
c0008696:	83 ec 08             	sub    esp,0x8
c0008699:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000869d:	68 78 08 02 c0       	push   0xc0020878
c00086a2:	e8 31 45 01 00       	call   c001cbd8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00086a7:	83 c4 10             	add    esp,0x10
c00086aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086ae:	8d 50 01             	lea    edx,[eax+0x1]
c00086b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00086b5:	3d 88 13 00 00       	cmp    eax,0x1388
c00086ba:	0f 94 c0             	sete   al
c00086bd:	84 c0                	test   al,al
c00086bf:	74 a7                	je     c0008668 <UnixFile::~UnixFile()+0x24>
c00086c1:	83 ec 0c             	sub    esp,0xc
c00086c4:	68 10 e1 01 c0       	push   0xc001e110
c00086c9:	e8 0f 71 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c00086ce:	83 c4 10             	add    esp,0x10
c00086d1:	eb 95                	jmp    c0008668 <UnixFile::~UnixFile()+0x24>
c00086d3:	90                   	nop
c00086d4:	eb 01                	jmp    c00086d7 <UnixFile::~UnixFile()+0x93>
c00086d6:	90                   	nop
c00086d7:	90                   	nop
c00086d8:	83 c4 1c             	add    esp,0x1c
c00086db:	c3                   	ret    

c00086dc <UnixFile::~UnixFile()>:
c00086dc:	83 ec 0c             	sub    esp,0xc
c00086df:	83 ec 0c             	sub    esp,0xc
c00086e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00086e6:	e8 59 ff ff ff       	call   c0008644 <UnixFile::~UnixFile()>
c00086eb:	83 c4 10             	add    esp,0x10
c00086ee:	83 ec 08             	sub    esp,0x8
c00086f1:	6a 0c                	push   0xc
c00086f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00086f7:	e8 2a 13 00 00       	call   c0009a26 <operator delete(void*, unsigned long)>
c00086fc:	83 c4 10             	add    esp,0x10
c00086ff:	83 c4 0c             	add    esp,0xc
c0008702:	c3                   	ret    
c0008703:	90                   	nop

c0008704 <ReservedFilename::~ReservedFilename()>:
c0008704:	83 ec 0c             	sub    esp,0xc
c0008707:	ba 54 e1 01 c0       	mov    edx,0xc001e154
c000870c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008710:	89 10                	mov    DWORD PTR [eax],edx
c0008712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008716:	83 ec 0c             	sub    esp,0xc
c0008719:	50                   	push   eax
c000871a:	e8 25 ff ff ff       	call   c0008644 <UnixFile::~UnixFile()>
c000871f:	83 c4 10             	add    esp,0x10
c0008722:	90                   	nop
c0008723:	83 c4 0c             	add    esp,0xc
c0008726:	c3                   	ret    
c0008727:	90                   	nop

c0008728 <ReservedFilename::~ReservedFilename()>:
c0008728:	83 ec 0c             	sub    esp,0xc
c000872b:	83 ec 0c             	sub    esp,0xc
c000872e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008732:	e8 cd ff ff ff       	call   c0008704 <ReservedFilename::~ReservedFilename()>
c0008737:	83 c4 10             	add    esp,0x10
c000873a:	83 ec 08             	sub    esp,0x8
c000873d:	6a 0c                	push   0xc
c000873f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008743:	e8 de 12 00 00       	call   c0009a26 <operator delete(void*, unsigned long)>
c0008748:	83 c4 10             	add    esp,0x10
c000874b:	83 c4 0c             	add    esp,0xc
c000874e:	c3                   	ret    

c000874f <getFromFileDescriptor(int)>:
c000874f:	53                   	push   ebx
c0008750:	83 ec 08             	sub    esp,0x8
c0008753:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008757:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000875d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0008763:	7f 2c                	jg     c0008791 <getFromFileDescriptor(int)+0x42>
c0008765:	83 ec 0c             	sub    esp,0xc
c0008768:	68 78 08 02 c0       	push   0xc0020878
c000876d:	e8 3a 45 01 00       	call   c001ccac <LinkedList<UnixFile>::getFirstElement()>
c0008772:	83 c4 10             	add    esp,0x10
c0008775:	85 c0                	test   eax,eax
c0008777:	75 04                	jne    c000877d <getFromFileDescriptor(int)+0x2e>
c0008779:	31 c0                	xor    eax,eax
c000877b:	eb 6e                	jmp    c00087eb <getFromFileDescriptor(int)+0x9c>
c000877d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0008780:	74 69                	je     c00087eb <getFromFileDescriptor(int)+0x9c>
c0008782:	52                   	push   edx
c0008783:	52                   	push   edx
c0008784:	50                   	push   eax
c0008785:	68 78 08 02 c0       	push   0xc0020878
c000878a:	e8 c7 45 01 00       	call   c001cd56 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000878f:	eb e1                	jmp    c0008772 <getFromFileDescriptor(int)+0x23>
c0008791:	a1 6c 08 02 c0       	mov    eax,ds:0xc002086c
c0008796:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000879c:	74 4d                	je     c00087eb <getFromFileDescriptor(int)+0x9c>
c000879e:	a1 70 08 02 c0       	mov    eax,ds:0xc0020870
c00087a3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00087a9:	74 40                	je     c00087eb <getFromFileDescriptor(int)+0x9c>
c00087ab:	a1 68 08 02 c0       	mov    eax,ds:0xc0020868
c00087b0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00087b6:	74 33                	je     c00087eb <getFromFileDescriptor(int)+0x9c>
c00087b8:	a1 64 08 02 c0       	mov    eax,ds:0xc0020864
c00087bd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00087c3:	74 26                	je     c00087eb <getFromFileDescriptor(int)+0x9c>
c00087c5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00087cb:	83 f8 08             	cmp    eax,0x8
c00087ce:	77 09                	ja     c00087d9 <getFromFileDescriptor(int)+0x8a>
c00087d0:	8b 04 85 40 08 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf7c0]
c00087d7:	eb 12                	jmp    c00087eb <getFromFileDescriptor(int)+0x9c>
c00087d9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00087df:	83 fb 08             	cmp    ebx,0x8
c00087e2:	77 95                	ja     c0008779 <getFromFileDescriptor(int)+0x2a>
c00087e4:	8b 04 9d 00 08 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdf800]
c00087eb:	83 c4 08             	add    esp,0x8
c00087ee:	5b                   	pop    ebx
c00087ef:	c3                   	ret    

c00087f0 <__static_initialization_and_destruction_0(int, int)>:
c00087f0:	83 ec 0c             	sub    esp,0xc
c00087f3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00087f8:	75 34                	jne    c000882e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00087fa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008802:	75 2a                	jne    c000882e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0008804:	83 ec 0c             	sub    esp,0xc
c0008807:	68 78 08 02 c0       	push   0xc0020878
c000880c:	e8 85 43 01 00       	call   c001cb96 <LinkedList<UnixFile>::LinkedList()>
c0008811:	83 c4 10             	add    esp,0x10
c0008814:	83 ec 04             	sub    esp,0x4
c0008817:	68 68 ff 01 c0       	push   0xc001ff68
c000881c:	68 78 08 02 c0       	push   0xc0020878
c0008821:	68 94 cb 01 c0       	push   0xc001cb94
c0008826:	e8 ab 11 00 00       	call   c00099d6 <__cxa_atexit>
c000882b:	83 c4 10             	add    esp,0x10
c000882e:	90                   	nop
c000882f:	83 c4 0c             	add    esp,0xc
c0008832:	c3                   	ret    

c0008833 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0008833:	83 ec 0c             	sub    esp,0xc
c0008836:	83 ec 08             	sub    esp,0x8
c0008839:	68 ff ff 00 00       	push   0xffff
c000883e:	6a 01                	push   0x1
c0008840:	e8 ab ff ff ff       	call   c00087f0 <__static_initialization_and_destruction_0(int, int)>
c0008845:	83 c4 10             	add    esp,0x10
c0008848:	83 c4 0c             	add    esp,0xc
c000884b:	c3                   	ret    

c000884c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000884c:	53                   	push   ebx
c000884d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008851:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008855:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000885b:	89 c8                	mov    eax,ecx
c000885d:	d1 e8                	shr    eax,1
c000885f:	03 05 48 01 02 c0    	add    eax,DWORD PTR ds:0xc0020148
c0008865:	83 e1 01             	and    ecx,0x1
c0008868:	8a 10                	mov    dl,BYTE PTR [eax]
c000886a:	75 09                	jne    c0008875 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000886c:	83 e2 f0             	and    edx,0xfffffff0
c000886f:	09 da                	or     edx,ebx
c0008871:	88 10                	mov    BYTE PTR [eax],dl
c0008873:	5b                   	pop    ebx
c0008874:	c3                   	ret    
c0008875:	c1 e3 04             	shl    ebx,0x4
c0008878:	83 e2 0f             	and    edx,0xf
c000887b:	09 da                	or     edx,ebx
c000887d:	88 10                	mov    BYTE PTR [eax],dl
c000887f:	5b                   	pop    ebx
c0008880:	c3                   	ret    

c0008881 <Virt::getPageState(unsigned long)>:
c0008881:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008885:	8b 0d 48 01 02 c0    	mov    ecx,DWORD PTR ds:0xc0020148
c000888b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0008891:	89 d0                	mov    eax,edx
c0008893:	d1 e8                	shr    eax,1
c0008895:	83 e2 01             	and    edx,0x1
c0008898:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000889b:	75 04                	jne    c00088a1 <Virt::getPageState(unsigned long)+0x20>
c000889d:	83 e0 0f             	and    eax,0xf
c00088a0:	c3                   	ret    
c00088a1:	c0 e8 04             	shr    al,0x4
c00088a4:	c3                   	ret    

c00088a5 <Virt::allocateKernelVirtualPages(int)>:
c00088a5:	55                   	push   ebp
c00088a6:	31 ed                	xor    ebp,ebp
c00088a8:	57                   	push   edi
c00088a9:	56                   	push   esi
c00088aa:	53                   	push   ebx
c00088ab:	31 db                	xor    ebx,ebx
c00088ad:	83 ec 1c             	sub    esp,0x1c
c00088b0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00088b4:	8b 3d 44 01 02 c0    	mov    edi,DWORD PTR ds:0xc0020144
c00088ba:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00088bf:	57                   	push   edi
c00088c0:	e8 bc ff ff ff       	call   c0008881 <Virt::getPageState(unsigned long)>
c00088c5:	5a                   	pop    edx
c00088c6:	84 c0                	test   al,al
c00088c8:	75 3a                	jne    c0008904 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00088ca:	85 db                	test   ebx,ebx
c00088cc:	75 02                	jne    c00088d0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00088ce:	89 fd                	mov    ebp,edi
c00088d0:	43                   	inc    ebx
c00088d1:	39 f3                	cmp    ebx,esi
c00088d3:	74 5a                	je     c000892f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00088d5:	47                   	inc    edi
c00088d6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00088dc:	76 31                	jbe    c000890f <Virt::allocateKernelVirtualPages(int)+0x6a>
c00088de:	c7 05 44 01 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0020144,0xc8000
c00088e8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00088ed:	75 28                	jne    c0008917 <Virt::allocateKernelVirtualPages(int)+0x72>
c00088ef:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00088f4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00088f9:	57                   	push   edi
c00088fa:	e8 82 ff ff ff       	call   c0008881 <Virt::getPageState(unsigned long)>
c00088ff:	5a                   	pop    edx
c0008900:	84 c0                	test   al,al
c0008902:	74 c6                	je     c00088ca <Virt::allocateKernelVirtualPages(int)+0x25>
c0008904:	31 db                	xor    ebx,ebx
c0008906:	47                   	inc    edi
c0008907:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000890d:	77 cf                	ja     c00088de <Virt::allocateKernelVirtualPages(int)+0x39>
c000890f:	89 3d 44 01 02 c0    	mov    DWORD PTR ds:0xc0020144,edi
c0008915:	eb a8                	jmp    c00088bf <Virt::allocateKernelVirtualPages(int)+0x1a>
c0008917:	83 ec 0c             	sub    esp,0xc
c000891a:	68 68 e1 01 c0       	push   0xc001e168
c000891f:	e8 b9 6e 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c0008924:	8b 3d 44 01 02 c0    	mov    edi,DWORD PTR ds:0xc0020144
c000892a:	83 c4 10             	add    esp,0x10
c000892d:	eb 90                	jmp    c00088bf <Virt::allocateKernelVirtualPages(int)+0x1a>
c000892f:	89 2d 44 01 02 c0    	mov    DWORD PTR ds:0xc0020144,ebp
c0008935:	4b                   	dec    ebx
c0008936:	74 5f                	je     c0008997 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0008938:	85 f6                	test   esi,esi
c000893a:	74 3d                	je     c0008979 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000893c:	89 e8                	mov    eax,ebp
c000893e:	31 db                	xor    ebx,ebx
c0008940:	8d 7e ff             	lea    edi,[esi-0x1]
c0008943:	eb 14                	jmp    c0008959 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0008945:	6a 01                	push   0x1
c0008947:	43                   	inc    ebx
c0008948:	50                   	push   eax
c0008949:	e8 fe fe ff ff       	call   c000884c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000894e:	58                   	pop    eax
c000894f:	39 f3                	cmp    ebx,esi
c0008951:	5a                   	pop    edx
c0008952:	74 25                	je     c0008979 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0008954:	a1 44 01 02 c0       	mov    eax,ds:0xc0020144
c0008959:	8d 50 01             	lea    edx,[eax+0x1]
c000895c:	85 db                	test   ebx,ebx
c000895e:	89 15 44 01 02 c0    	mov    DWORD PTR ds:0xc0020144,edx
c0008964:	74 20                	je     c0008986 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0008966:	39 df                	cmp    edi,ebx
c0008968:	75 db                	jne    c0008945 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000896a:	6a 03                	push   0x3
c000896c:	43                   	inc    ebx
c000896d:	50                   	push   eax
c000896e:	e8 d9 fe ff ff       	call   c000884c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008973:	59                   	pop    ecx
c0008974:	39 f3                	cmp    ebx,esi
c0008976:	58                   	pop    eax
c0008977:	75 db                	jne    c0008954 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0008979:	83 c4 1c             	add    esp,0x1c
c000897c:	89 e8                	mov    eax,ebp
c000897e:	5b                   	pop    ebx
c000897f:	c1 e0 0c             	shl    eax,0xc
c0008982:	5e                   	pop    esi
c0008983:	5f                   	pop    edi
c0008984:	5d                   	pop    ebp
c0008985:	c3                   	ret    
c0008986:	6a 02                	push   0x2
c0008988:	bb 01 00 00 00       	mov    ebx,0x1
c000898d:	50                   	push   eax
c000898e:	e8 b9 fe ff ff       	call   c000884c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008993:	58                   	pop    eax
c0008994:	5a                   	pop    edx
c0008995:	eb bd                	jmp    c0008954 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0008997:	6a 04                	push   0x4
c0008999:	8d 45 01             	lea    eax,[ebp+0x1]
c000899c:	55                   	push   ebp
c000899d:	a3 44 01 02 c0       	mov    ds:0xc0020144,eax
c00089a2:	e8 a5 fe ff ff       	call   c000884c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00089a7:	59                   	pop    ecx
c00089a8:	89 e8                	mov    eax,ebp
c00089aa:	5b                   	pop    ebx
c00089ab:	c1 e0 0c             	shl    eax,0xc
c00089ae:	83 c4 1c             	add    esp,0x1c
c00089b1:	5b                   	pop    ebx
c00089b2:	5e                   	pop    esi
c00089b3:	5f                   	pop    edi
c00089b4:	5d                   	pop    ebp
c00089b5:	c3                   	ret    

c00089b6 <Virt::freeSwapfilePage(unsigned long)>:
c00089b6:	53                   	push   ebx
c00089b7:	8b 15 90 08 02 c0    	mov    edx,DWORD PTR ds:0xc0020890
c00089bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00089c1:	b8 01 00 00 00       	mov    eax,0x1
c00089c6:	89 cb                	mov    ebx,ecx
c00089c8:	d3 e0                	shl    eax,cl
c00089ca:	c1 eb 05             	shr    ebx,0x5
c00089cd:	f7 d0                	not    eax
c00089cf:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00089d2:	5b                   	pop    ebx
c00089d3:	c3                   	ret    

c00089d4 <Virt::swapIDToSector(unsigned long)>:
c00089d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00089d8:	0f af 05 4c 01 02 c0 	imul   eax,DWORD PTR ds:0xc002014c
c00089df:	03 05 54 01 02 c0    	add    eax,DWORD PTR ds:0xc0020154
c00089e5:	c3                   	ret    

c00089e6 <Virt::allocateSwapfilePage()>:
c00089e6:	55                   	push   ebp
c00089e7:	31 d2                	xor    edx,edx
c00089e9:	57                   	push   edi
c00089ea:	56                   	push   esi
c00089eb:	53                   	push   ebx
c00089ec:	83 ec 0c             	sub    esp,0xc
c00089ef:	8b 0d 4c 01 02 c0    	mov    ecx,DWORD PTR ds:0xc002014c
c00089f5:	a1 50 01 02 c0       	mov    eax,ds:0xc0020150
c00089fa:	f7 f1                	div    ecx
c00089fc:	39 0d 50 01 02 c0    	cmp    DWORD PTR ds:0xc0020150,ecx
c0008a02:	72 2d                	jb     c0008a31 <Virt::allocateSwapfilePage()+0x4b>
c0008a04:	8b 35 90 08 02 c0    	mov    esi,DWORD PTR ds:0xc0020890
c0008a0a:	8b 16                	mov    edx,DWORD PTR [esi]
c0008a0c:	f6 c2 01             	test   dl,0x1
c0008a0f:	74 3c                	je     c0008a4d <Virt::allocateSwapfilePage()+0x67>
c0008a11:	31 c9                	xor    ecx,ecx
c0008a13:	bf 01 00 00 00       	mov    edi,0x1
c0008a18:	eb 12                	jmp    c0008a2c <Virt::allocateSwapfilePage()+0x46>
c0008a1a:	89 fd                	mov    ebp,edi
c0008a1c:	89 ca                	mov    edx,ecx
c0008a1e:	d3 e5                	shl    ebp,cl
c0008a20:	c1 ea 05             	shr    edx,0x5
c0008a23:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0008a26:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008a28:	85 ea                	test   edx,ebp
c0008a2a:	74 2a                	je     c0008a56 <Virt::allocateSwapfilePage()+0x70>
c0008a2c:	41                   	inc    ecx
c0008a2d:	39 c8                	cmp    eax,ecx
c0008a2f:	77 e9                	ja     c0008a1a <Virt::allocateSwapfilePage()+0x34>
c0008a31:	83 ec 0c             	sub    esp,0xc
c0008a34:	68 cf e2 01 c0       	push   0xc001e2cf
c0008a39:	e8 9f 6d 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c0008a3e:	83 c4 10             	add    esp,0x10
c0008a41:	31 c9                	xor    ecx,ecx
c0008a43:	83 c4 0c             	add    esp,0xc
c0008a46:	89 c8                	mov    eax,ecx
c0008a48:	5b                   	pop    ebx
c0008a49:	5e                   	pop    esi
c0008a4a:	5f                   	pop    edi
c0008a4b:	5d                   	pop    ebp
c0008a4c:	c3                   	ret    
c0008a4d:	89 f3                	mov    ebx,esi
c0008a4f:	bd 01 00 00 00       	mov    ebp,0x1
c0008a54:	31 c9                	xor    ecx,ecx
c0008a56:	09 ea                	or     edx,ebp
c0008a58:	89 c8                	mov    eax,ecx
c0008a5a:	89 13                	mov    DWORD PTR [ebx],edx
c0008a5c:	83 c4 0c             	add    esp,0xc
c0008a5f:	5b                   	pop    ebx
c0008a60:	5e                   	pop    esi
c0008a61:	5f                   	pop    edi
c0008a62:	5d                   	pop    ebp
c0008a63:	c3                   	ret    

c0008a64 <Virt::virtualMemorySetup()>:
c0008a64:	53                   	push   ebx
c0008a65:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0008a6a:	6a 0f                	push   0xf
c0008a6c:	53                   	push   ebx
c0008a6d:	43                   	inc    ebx
c0008a6e:	e8 d9 fd ff ff       	call   c000884c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008a73:	58                   	pop    eax
c0008a74:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0008a7a:	5a                   	pop    edx
c0008a7b:	75 ed                	jne    c0008a6a <Virt::virtualMemorySetup()+0x6>
c0008a7d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0008a82:	6a 00                	push   0x0
c0008a84:	53                   	push   ebx
c0008a85:	43                   	inc    ebx
c0008a86:	e8 c1 fd ff ff       	call   c000884c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008a8b:	59                   	pop    ecx
c0008a8c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0008a92:	58                   	pop    eax
c0008a93:	75 ed                	jne    c0008a82 <Virt::virtualMemorySetup()+0x1e>
c0008a95:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0008a9a:	6a 0f                	push   0xf
c0008a9c:	53                   	push   ebx
c0008a9d:	43                   	inc    ebx
c0008a9e:	e8 a9 fd ff ff       	call   c000884c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008aa3:	58                   	pop    eax
c0008aa4:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0008aaa:	5a                   	pop    edx
c0008aab:	75 ed                	jne    c0008a9a <Virt::virtualMemorySetup()+0x36>
c0008aad:	5b                   	pop    ebx
c0008aae:	c3                   	ret    

c0008aaf <Virt::setupPageSwapping(int)>:
c0008aaf:	53                   	push   ebx
c0008ab0:	83 ec 0c             	sub    esp,0xc
c0008ab3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ab7:	a1 28 2d 02 c0       	mov    eax,ds:0xc0022d28
c0008abc:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0008ac2:	8b 10                	mov    edx,DWORD PTR [eax]
c0008ac4:	53                   	push   ebx
c0008ac5:	c1 e3 0b             	shl    ebx,0xb
c0008ac8:	68 e6 e2 01 c0       	push   0xc001e2e6
c0008acd:	50                   	push   eax
c0008ace:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0008ad1:	89 1d 50 01 02 c0    	mov    DWORD PTR ds:0xc0020150,ebx
c0008ad7:	c6 05 58 01 02 c0 43 	mov    BYTE PTR ds:0xc0020158,0x43
c0008ade:	c1 eb 08             	shr    ebx,0x8
c0008ae1:	a3 54 01 02 c0       	mov    ds:0xc0020154,eax
c0008ae6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008ae9:	c7 05 4c 01 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002014c,0x8
c0008af3:	e8 85 e2 ff ff       	call   c0006d7d <malloc>
c0008af8:	83 c4 0c             	add    esp,0xc
c0008afb:	89 c1                	mov    ecx,eax
c0008afd:	a3 90 08 02 c0       	mov    ds:0xc0020890,eax
c0008b02:	31 d2                	xor    edx,edx
c0008b04:	a1 50 01 02 c0       	mov    eax,ds:0xc0020150
c0008b09:	f7 35 4c 01 02 c0    	div    DWORD PTR ds:0xc002014c
c0008b0f:	c1 e8 05             	shr    eax,0x5
c0008b12:	50                   	push   eax
c0008b13:	6a 00                	push   0x0
c0008b15:	51                   	push   ecx
c0008b16:	e8 8d 79 ff ff       	call   c00004a8 <memset>
c0008b1b:	83 c4 18             	add    esp,0x18
c0008b1e:	5b                   	pop    ebx
c0008b1f:	c3                   	ret    

c0008b20 <VAS::VAS(VAS*)>:
c0008b20:	83 ec 0c             	sub    esp,0xc
c0008b23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b27:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b32:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0008b39:	83 ec 0c             	sub    esp,0xc
c0008b3c:	68 88 e1 01 c0       	push   0xc001e188
c0008b41:	e8 97 6c 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c0008b46:	83 c4 10             	add    esp,0x10
c0008b49:	90                   	nop
c0008b4a:	83 c4 0c             	add    esp,0xc
c0008b4d:	c3                   	ret    

c0008b4e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0008b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b52:	89 c2                	mov    edx,eax
c0008b54:	c1 e8 0a             	shr    eax,0xa
c0008b57:	c1 ea 16             	shr    edx,0x16
c0008b5a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0008b5f:	19 c9                	sbb    ecx,ecx
c0008b61:	c1 e2 0c             	shl    edx,0xc
c0008b64:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0008b6a:	25 fc 0f 00 00       	and    eax,0xffc
c0008b6f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0008b76:	01 d0                	add    eax,edx
c0008b78:	c3                   	ret    
c0008b79:	90                   	nop

c0008b7a <VAS::getPageTableEntry(unsigned long)>:
c0008b7a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008b7e:	89 ca                	mov    edx,ecx
c0008b80:	c1 e9 0a             	shr    ecx,0xa
c0008b83:	c1 ea 16             	shr    edx,0x16
c0008b86:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0008b8c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0008b92:	c1 e0 0c             	shl    eax,0xc
c0008b95:	8d 04 08             	lea    eax,[eax+ecx*1]
c0008b98:	c3                   	ret    

c0008b99 <Virt::freeKernelVirtualPages(unsigned long)>:
c0008b99:	57                   	push   edi
c0008b9a:	56                   	push   esi
c0008b9b:	be 01 00 00 00       	mov    esi,0x1
c0008ba0:	53                   	push   ebx
c0008ba1:	83 ec 10             	sub    esp,0x10
c0008ba4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008ba8:	c1 eb 0c             	shr    ebx,0xc
c0008bab:	eb 3f                	jmp    c0008bec <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0008bad:	83 ec 08             	sub    esp,0x8
c0008bb0:	57                   	push   edi
c0008bb1:	ff 35 94 08 02 c0    	push   DWORD PTR ds:0xc0020894
c0008bb7:	e8 be ff ff ff       	call   c0008b7a <VAS::getPageTableEntry(unsigned long)>
c0008bbc:	83 c4 10             	add    esp,0x10
c0008bbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bc1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0008bc5:	f6 c4 04             	test   ah,0x4
c0008bc8:	75 5f                	jne    c0008c29 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0008bca:	80 fa 04             	cmp    dl,0x4
c0008bcd:	74 78                	je     c0008c47 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0008bcf:	80 fa 02             	cmp    dl,0x2
c0008bd2:	0f 84 88 00 00 00    	je     c0008c60 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0008bd8:	80 fa 03             	cmp    dl,0x3
c0008bdb:	0f 84 ad 00 00 00    	je     c0008c8e <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0008be1:	fe ca                	dec    dl
c0008be3:	0f 84 92 00 00 00    	je     c0008c7b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0008be9:	43                   	inc    ebx
c0008bea:	31 f6                	xor    esi,esi
c0008bec:	53                   	push   ebx
c0008bed:	89 df                	mov    edi,ebx
c0008bef:	e8 8d fc ff ff       	call   c0008881 <Virt::getPageState(unsigned long)>
c0008bf4:	c1 e7 0c             	shl    edi,0xc
c0008bf7:	59                   	pop    ecx
c0008bf8:	84 c0                	test   al,al
c0008bfa:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008bfe:	75 ad                	jne    c0008bad <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0008c00:	83 ec 0c             	sub    esp,0xc
c0008c03:	68 fd e2 01 c0       	push   0xc001e2fd
c0008c08:	e8 d0 6b 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c0008c0d:	58                   	pop    eax
c0008c0e:	5a                   	pop    edx
c0008c0f:	57                   	push   edi
c0008c10:	ff 35 94 08 02 c0    	push   DWORD PTR ds:0xc0020894
c0008c16:	e8 5f ff ff ff       	call   c0008b7a <VAS::getPageTableEntry(unsigned long)>
c0008c1b:	83 c4 10             	add    esp,0x10
c0008c1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c20:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0008c24:	f6 c4 04             	test   ah,0x4
c0008c27:	74 c0                	je     c0008be9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008c29:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0008c2d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 a7 e4 ff ff       	call   c00070e2 <Phys::freePage(unsigned long)>
c0008c3b:	83 c4 10             	add    esp,0x10
c0008c3e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0008c42:	80 fa 04             	cmp    dl,0x4
c0008c45:	75 88                	jne    c0008bcf <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0008c47:	89 f0                	mov    eax,esi
c0008c49:	84 c0                	test   al,al
c0008c4b:	75 47                	jne    c0008c94 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0008c4d:	c7 44 24 20 ac e1 01 c0 	mov    DWORD PTR [esp+0x20],0xc001e1ac
c0008c55:	83 c4 10             	add    esp,0x10
c0008c58:	5b                   	pop    ebx
c0008c59:	5e                   	pop    esi
c0008c5a:	5f                   	pop    edi
c0008c5b:	e9 7d 6b 00 00       	jmp    c000f7dd <Krnl::panic(char const*)>
c0008c60:	89 f0                	mov    eax,esi
c0008c62:	84 c0                	test   al,al
c0008c64:	75 15                	jne    c0008c7b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0008c66:	83 ec 0c             	sub    esp,0xc
c0008c69:	68 19 e3 01 c0       	push   0xc001e319
c0008c6e:	e8 6a 6b 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	e9 6e ff ff ff       	jmp    c0008be9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008c7b:	83 ec 08             	sub    esp,0x8
c0008c7e:	6a 00                	push   0x0
c0008c80:	53                   	push   ebx
c0008c81:	e8 c6 fb ff ff       	call   c000884c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	e9 5b ff ff ff       	jmp    c0008be9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008c8e:	89 f0                	mov    eax,esi
c0008c90:	84 c0                	test   al,al
c0008c92:	75 15                	jne    c0008ca9 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0008c94:	83 ec 08             	sub    esp,0x8
c0008c97:	6a 00                	push   0x0
c0008c99:	53                   	push   ebx
c0008c9a:	e8 ad fb ff ff       	call   c000884c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008c9f:	83 c4 10             	add    esp,0x10
c0008ca2:	83 c4 10             	add    esp,0x10
c0008ca5:	5b                   	pop    ebx
c0008ca6:	5e                   	pop    esi
c0008ca7:	5f                   	pop    edi
c0008ca8:	c3                   	ret    
c0008ca9:	c7 44 24 20 35 e3 01 c0 	mov    DWORD PTR [esp+0x20],0xc001e335
c0008cb1:	83 c4 10             	add    esp,0x10
c0008cb4:	5b                   	pop    ebx
c0008cb5:	5e                   	pop    esi
c0008cb6:	5f                   	pop    edi
c0008cb7:	e9 21 6b 00 00       	jmp    c000f7dd <Krnl::panic(char const*)>

c0008cbc <VAS::freeAllocatedPages(unsigned long)>:
c0008cbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008cc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008cc4:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0008cc8:	74 09                	je     c0008cd3 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0008cca:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008cce:	e9 c6 fe ff ff       	jmp    c0008b99 <Virt::freeKernelVirtualPages(unsigned long)>
c0008cd3:	c7 44 24 04 d0 e1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e1d0
c0008cdb:	e9 27 0e 00 00       	jmp    c0009b07 <Dbg::kprintf(char const*, ...)>

c0008ce0 <VAS::virtualToPhysical(unsigned long)>:
c0008ce0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0008ce4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0008ce8:	e8 8d fe ff ff       	call   c0008b7a <VAS::getPageTableEntry(unsigned long)>
c0008ced:	5a                   	pop    edx
c0008cee:	8b 00                	mov    eax,DWORD PTR [eax]
c0008cf0:	59                   	pop    ecx
c0008cf1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008cf6:	c3                   	ret    
c0008cf7:	90                   	nop

c0008cf8 <VAS::reflagRange(unsigned long, int, int, int)>:
c0008cf8:	55                   	push   ebp
c0008cf9:	57                   	push   edi
c0008cfa:	56                   	push   esi
c0008cfb:	53                   	push   ebx
c0008cfc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008d00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0008d04:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008d08:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0008d0c:	85 db                	test   ebx,ebx
c0008d0e:	7e 22                	jle    c0008d32 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0008d10:	c1 e3 0c             	shl    ebx,0xc
c0008d13:	01 f3                	add    ebx,esi
c0008d15:	56                   	push   esi
c0008d16:	81 c6 00 10 00 00    	add    esi,0x1000
c0008d1c:	55                   	push   ebp
c0008d1d:	e8 58 fe ff ff       	call   c0008b7a <VAS::getPageTableEntry(unsigned long)>
c0008d22:	5a                   	pop    edx
c0008d23:	59                   	pop    ecx
c0008d24:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008d26:	21 f9                	and    ecx,edi
c0008d28:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0008d2c:	39 f3                	cmp    ebx,esi
c0008d2e:	89 08                	mov    DWORD PTR [eax],ecx
c0008d30:	75 e3                	jne    c0008d15 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0008d32:	5b                   	pop    ebx
c0008d33:	5e                   	pop    esi
c0008d34:	5f                   	pop    edi
c0008d35:	5d                   	pop    ebp
c0008d36:	c3                   	ret    
c0008d37:	90                   	nop

c0008d38 <VAS::setToWriteCombining(unsigned long, int)>:
c0008d38:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c0008d3d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d43:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0008d4a:	75 01                	jne    c0008d4d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0008d4c:	c3                   	ret    
c0008d4d:	68 80 00 00 00       	push   0x80
c0008d52:	6a ff                	push   0xffffffff
c0008d54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d60:	e8 93 ff ff ff       	call   c0008cf8 <VAS::reflagRange(unsigned long, int, int, int)>
c0008d65:	83 c4 14             	add    esp,0x14
c0008d68:	c3                   	ret    
c0008d69:	90                   	nop

c0008d6a <VAS::mapOtherVASIn(bool, VAS*)>:
c0008d6a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0008d6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d73:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0008d76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d7a:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0008d7d:	19 c0                	sbb    eax,eax
c0008d7f:	83 ca 03             	or     edx,0x3
c0008d82:	83 e0 fc             	and    eax,0xfffffffc
c0008d85:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0008d8c:	0f 20 d8             	mov    eax,cr3
c0008d8f:	0f 22 d8             	mov    cr3,eax
c0008d92:	c3                   	ret    
c0008d93:	90                   	nop

c0008d94 <VAS::~VAS()>:
c0008d94:	83 ec 2c             	sub    esp,0x2c
c0008d97:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008d9f:	fa                   	cli    
c0008da0:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0008da5:	40                   	inc    eax
c0008da6:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c0008dab:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0008db0:	8b 00                	mov    eax,DWORD PTR [eax]
c0008db2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008db5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0008dbb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008dbf:	6a 01                	push   0x1
c0008dc1:	50                   	push   eax
c0008dc2:	e8 a3 ff ff ff       	call   c0008d6a <VAS::mapOtherVASIn(bool, VAS*)>
c0008dc7:	83 c4 0c             	add    esp,0xc
c0008dca:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008dd2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0008dda:	0f 8f d4 00 00 00    	jg     c0008eb4 <VAS::~VAS()+0x120>
c0008de0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008de4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008de7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008deb:	c1 e2 02             	shl    edx,0x2
c0008dee:	01 d0                	add    eax,edx
c0008df0:	8b 00                	mov    eax,DWORD PTR [eax]
c0008df2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008df6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008dfa:	83 e0 01             	and    eax,0x1
c0008dfd:	0f 84 a8 00 00 00    	je     c0008eab <VAS::~VAS()+0x117>
c0008e03:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0008e0b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0008e13:	7f 72                	jg     c0008e87 <VAS::~VAS()+0xf3>
c0008e15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e19:	c1 e0 0a             	shl    eax,0xa
c0008e1c:	89 c2                	mov    edx,eax
c0008e1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008e22:	01 d0                	add    eax,edx
c0008e24:	c1 e0 0c             	shl    eax,0xc
c0008e27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e2b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0008e30:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e32:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e35:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0008e3b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008e3f:	6a 01                	push   0x1
c0008e41:	50                   	push   eax
c0008e42:	e8 07 fd ff ff       	call   c0008b4e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0008e47:	83 c4 0c             	add    esp,0xc
c0008e4a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008e52:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e54:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e5c:	25 01 04 00 00       	and    eax,0x401
c0008e61:	3d 01 04 00 00       	cmp    eax,0x401
c0008e66:	75 19                	jne    c0008e81 <VAS::~VAS()+0xed>
c0008e68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e6c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008e71:	83 ec 0c             	sub    esp,0xc
c0008e74:	50                   	push   eax
c0008e75:	e8 68 e2 ff ff       	call   c00070e2 <Phys::freePage(unsigned long)>
c0008e7a:	83 c4 10             	add    esp,0x10
c0008e7d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008e81:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0008e85:	eb 84                	jmp    c0008e0b <VAS::~VAS()+0x77>
c0008e87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e8b:	25 00 04 00 00       	and    eax,0x400
c0008e90:	74 19                	je     c0008eab <VAS::~VAS()+0x117>
c0008e92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e96:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008e9b:	83 ec 0c             	sub    esp,0xc
c0008e9e:	50                   	push   eax
c0008e9f:	e8 3e e2 ff ff       	call   c00070e2 <Phys::freePage(unsigned long)>
c0008ea4:	83 c4 10             	add    esp,0x10
c0008ea7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008eab:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0008eaf:	e9 1e ff ff ff       	jmp    c0008dd2 <VAS::~VAS()+0x3e>
c0008eb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008eb8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008ebb:	83 ec 0c             	sub    esp,0xc
c0008ebe:	50                   	push   eax
c0008ebf:	e8 d5 fc ff ff       	call   c0008b99 <Virt::freeKernelVirtualPages(unsigned long)>
c0008ec4:	83 c4 10             	add    esp,0x10
c0008ec7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008ecb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008ece:	83 ec 0c             	sub    esp,0xc
c0008ed1:	50                   	push   eax
c0008ed2:	e8 0b e2 ff ff       	call   c00070e2 <Phys::freePage(unsigned long)>
c0008ed7:	83 c4 10             	add    esp,0x10
c0008eda:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008ede:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0008ee3:	48                   	dec    eax
c0008ee4:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c0008ee9:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0008eee:	85 c0                	test   eax,eax
c0008ef0:	75 01                	jne    c0008ef3 <VAS::~VAS()+0x15f>
c0008ef2:	fb                   	sti    
c0008ef3:	90                   	nop
c0008ef4:	83 c4 2c             	add    esp,0x2c
c0008ef7:	c3                   	ret    

c0008ef8 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0008ef8:	55                   	push   ebp
c0008ef9:	57                   	push   edi
c0008efa:	56                   	push   esi
c0008efb:	53                   	push   ebx
c0008efc:	83 ec 1c             	sub    esp,0x1c
c0008eff:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0008f03:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0008f07:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0008f0d:	77 0b                	ja     c0008f1a <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0008f0f:	0f 20 d8             	mov    eax,cr3
c0008f12:	0f 20 d8             	mov    eax,cr3
c0008f15:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0008f18:	75 47                	jne    c0008f61 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0008f1a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008f1e:	09 d8                	or     eax,ebx
c0008f20:	a9 ff 0f 00 00       	test   eax,0xfff
c0008f25:	75 57                	jne    c0008f7e <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0008f27:	89 de                	mov    esi,ebx
c0008f29:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0008f2c:	c1 ee 16             	shr    esi,0x16
c0008f2f:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0008f36:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0008f3a:	74 54                	je     c0008f90 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0008f3c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008f40:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0008f46:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0008f4a:	c1 e6 0c             	shl    esi,0xc
c0008f4d:	c1 eb 0a             	shr    ebx,0xa
c0008f50:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0008f56:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0008f59:	83 c4 1c             	add    esp,0x1c
c0008f5c:	5b                   	pop    ebx
c0008f5d:	5e                   	pop    esi
c0008f5e:	5f                   	pop    edi
c0008f5f:	5d                   	pop    ebp
c0008f60:	c3                   	ret    
c0008f61:	83 ec 0c             	sub    esp,0xc
c0008f64:	68 f4 e1 01 c0       	push   0xc001e1f4
c0008f69:	e8 99 0b 00 00       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c0008f6e:	83 c4 10             	add    esp,0x10
c0008f71:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008f75:	09 d8                	or     eax,ebx
c0008f77:	a9 ff 0f 00 00       	test   eax,0xfff
c0008f7c:	74 a9                	je     c0008f27 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0008f7e:	83 ec 0c             	sub    esp,0xc
c0008f81:	68 5c e2 01 c0       	push   0xc001e25c
c0008f86:	e8 52 68 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c0008f8b:	83 c4 10             	add    esp,0x10
c0008f8e:	eb 97                	jmp    c0008f27 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0008f90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f94:	e8 ab e1 ff ff       	call   c0007144 <Phys::allocatePage()>
c0008f99:	83 ec 0c             	sub    esp,0xc
c0008f9c:	89 c5                	mov    ebp,eax
c0008f9e:	8b 0d 94 08 02 c0    	mov    ecx,DWORD PTR ds:0xc0020894
c0008fa4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0008fa8:	6a 01                	push   0x1
c0008faa:	e8 f6 f8 ff ff       	call   c00088a5 <Virt::allocateKernelVirtualPages(int)>
c0008faf:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0008fb6:	6a 01                	push   0x1
c0008fb8:	50                   	push   eax
c0008fb9:	55                   	push   ebp
c0008fba:	81 cd 07 04 00 00    	or     ebp,0x407
c0008fc0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008fc4:	51                   	push   ecx
c0008fc5:	e8 26 02 00 00       	call   c00091f0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0008fca:	83 c4 1c             	add    esp,0x1c
c0008fcd:	68 00 10 00 00       	push   0x1000
c0008fd2:	6a 00                	push   0x0
c0008fd4:	50                   	push   eax
c0008fd5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008fd9:	e8 ca 74 ff ff       	call   c00004a8 <memset>
c0008fde:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0008fe2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0008fe5:	e8 af fb ff ff       	call   c0008b99 <Virt::freeKernelVirtualPages(unsigned long)>
c0008fea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008fee:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0008ff1:	83 c4 10             	add    esp,0x10
c0008ff4:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0008ff7:	e9 40 ff ff ff       	jmp    c0008f3c <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0008ffc <VAS::allocatePages(int, int)>:
c0008ffc:	55                   	push   ebp
c0008ffd:	57                   	push   edi
c0008ffe:	56                   	push   esi
c0008fff:	53                   	push   ebx
c0009000:	83 ec 1c             	sub    esp,0x1c
c0009003:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009007:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c000900c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009012:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009018:	83 e0 01             	and    eax,0x1
c000901b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000901f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009023:	0f 85 cc 00 00 00    	jne    c00090f5 <VAS::allocatePages(int, int)+0xf9>
c0009029:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000902c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009030:	85 c0                	test   eax,eax
c0009032:	0f 84 a1 00 00 00    	je     c00090d9 <VAS::allocatePages(int, int)+0xdd>
c0009038:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000903c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009040:	c1 e6 0c             	shl    esi,0xc
c0009043:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009047:	85 c0                	test   eax,eax
c0009049:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000904c:	7e 33                	jle    c0009081 <VAS::allocatePages(int, int)+0x85>
c000904e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009052:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009056:	81 cd 00 04 00 00    	or     ebp,0x400
c000905c:	e8 e3 e0 ff ff       	call   c0007144 <Phys::allocatePage()>
c0009061:	55                   	push   ebp
c0009062:	53                   	push   ebx
c0009063:	50                   	push   eax
c0009064:	57                   	push   edi
c0009065:	e8 8e fe ff ff       	call   c0008ef8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000906a:	83 c4 10             	add    esp,0x10
c000906d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009072:	74 03                	je     c0009077 <VAS::allocatePages(int, int)+0x7b>
c0009074:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009077:	81 c3 00 10 00 00    	add    ebx,0x1000
c000907d:	39 de                	cmp    esi,ebx
c000907f:	75 db                	jne    c000905c <VAS::allocatePages(int, int)+0x60>
c0009081:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009086:	75 12                	jne    c000909a <VAS::allocatePages(int, int)+0x9e>
c0009088:	0f 20 d8             	mov    eax,cr3
c000908b:	0f 22 d8             	mov    cr3,eax
c000908e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009092:	83 c4 1c             	add    esp,0x1c
c0009095:	5b                   	pop    ebx
c0009096:	5e                   	pop    esi
c0009097:	5f                   	pop    edi
c0009098:	5d                   	pop    ebp
c0009099:	c3                   	ret    
c000909a:	c1 ee 0a             	shr    esi,0xa
c000909d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00090a1:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00090a7:	c1 eb 0a             	shr    ebx,0xa
c00090aa:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00090b0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00090b6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00090bc:	39 c3                	cmp    ebx,eax
c00090be:	77 ce                	ja     c000908e <VAS::allocatePages(int, int)+0x92>
c00090c0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00090c3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00090c9:	39 d8                	cmp    eax,ebx
c00090cb:	73 f3                	jae    c00090c0 <VAS::allocatePages(int, int)+0xc4>
c00090cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00090d1:	83 c4 1c             	add    esp,0x1c
c00090d4:	5b                   	pop    ebx
c00090d5:	5e                   	pop    esi
c00090d6:	5f                   	pop    edi
c00090d7:	5d                   	pop    ebp
c00090d8:	c3                   	ret    
c00090d9:	83 ec 0c             	sub    esp,0xc
c00090dc:	68 80 e2 01 c0       	push   0xc001e280
c00090e1:	e8 f7 66 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c00090e6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00090e9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00090ed:	83 c4 10             	add    esp,0x10
c00090f0:	e9 43 ff ff ff       	jmp    c0009038 <VAS::allocatePages(int, int)+0x3c>
c00090f5:	83 ec 0c             	sub    esp,0xc
c00090f8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00090fc:	e8 a4 f7 ff ff       	call   c00088a5 <Virt::allocateKernelVirtualPages(int)>
c0009101:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009105:	83 c4 10             	add    esp,0x10
c0009108:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000910d:	0f 87 9b 00 00 00    	ja     c00091ae <VAS::allocatePages(int, int)+0x1b2>
c0009113:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009117:	85 d2                	test   edx,edx
c0009119:	7e 3c                	jle    c0009157 <VAS::allocatePages(int, int)+0x15b>
c000911b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000911f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009123:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009127:	c1 e5 0c             	shl    ebp,0xc
c000912a:	81 ce 00 04 00 00    	or     esi,0x400
c0009130:	01 dd                	add    ebp,ebx
c0009132:	e8 0d e0 ff ff       	call   c0007144 <Phys::allocatePage()>
c0009137:	56                   	push   esi
c0009138:	53                   	push   ebx
c0009139:	50                   	push   eax
c000913a:	57                   	push   edi
c000913b:	e8 b8 fd ff ff       	call   c0008ef8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009140:	83 c4 10             	add    esp,0x10
c0009143:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009148:	74 03                	je     c000914d <VAS::allocatePages(int, int)+0x151>
c000914a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000914d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009153:	39 dd                	cmp    ebp,ebx
c0009155:	75 db                	jne    c0009132 <VAS::allocatePages(int, int)+0x136>
c0009157:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000915c:	0f 84 26 ff ff ff    	je     c0009088 <VAS::allocatePages(int, int)+0x8c>
c0009162:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009166:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000916a:	89 d3                	mov    ebx,edx
c000916c:	c1 e0 0c             	shl    eax,0xc
c000916f:	c1 eb 0a             	shr    ebx,0xa
c0009172:	01 d0                	add    eax,edx
c0009174:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000917a:	c1 e8 0a             	shr    eax,0xa
c000917d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009183:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009188:	2d 00 00 40 00       	sub    eax,0x400000
c000918d:	39 c3                	cmp    ebx,eax
c000918f:	0f 87 f9 fe ff ff    	ja     c000908e <VAS::allocatePages(int, int)+0x92>
c0009195:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009198:	81 c3 00 10 00 00    	add    ebx,0x1000
c000919e:	39 d8                	cmp    eax,ebx
c00091a0:	73 f3                	jae    c0009195 <VAS::allocatePages(int, int)+0x199>
c00091a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00091a6:	83 c4 1c             	add    esp,0x1c
c00091a9:	5b                   	pop    ebx
c00091aa:	5e                   	pop    esi
c00091ab:	5f                   	pop    edi
c00091ac:	5d                   	pop    ebp
c00091ad:	c3                   	ret    
c00091ae:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c00091b3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00091b9:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c00091c0:	0f 84 4d ff ff ff    	je     c0009113 <VAS::allocatePages(int, int)+0x117>
c00091c6:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00091ce:	e9 40 ff ff ff       	jmp    c0009113 <VAS::allocatePages(int, int)+0x117>
c00091d3:	90                   	nop

c00091d4 <VAS::setCPUSpecific(unsigned long)>:
c00091d4:	83 ec 0c             	sub    esp,0xc
c00091d7:	6a 05                	push   0x5
c00091d9:	68 00 00 40 c2       	push   0xc2400000
c00091de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091e6:	e8 0d fd ff ff       	call   c0008ef8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00091eb:	83 c4 1c             	add    esp,0x1c
c00091ee:	c3                   	ret    
c00091ef:	90                   	nop

c00091f0 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00091f0:	55                   	push   ebp
c00091f1:	57                   	push   edi
c00091f2:	56                   	push   esi
c00091f3:	53                   	push   ebx
c00091f4:	83 ec 1c             	sub    esp,0x1c
c00091f7:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c00091fc:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009200:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009206:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000920a:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009210:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009214:	83 e0 01             	and    eax,0x1
c0009217:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000921b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000921f:	85 c0                	test   eax,eax
c0009221:	7e 39                	jle    c000925c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009223:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009227:	89 f3                	mov    ebx,esi
c0009229:	c1 e0 0c             	shl    eax,0xc
c000922c:	01 f0                	add    eax,esi
c000922e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009232:	55                   	push   ebp
c0009233:	53                   	push   ebx
c0009234:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009238:	29 f0                	sub    eax,esi
c000923a:	01 d8                	add    eax,ebx
c000923c:	50                   	push   eax
c000923d:	57                   	push   edi
c000923e:	e8 b5 fc ff ff       	call   c0008ef8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009243:	83 c4 10             	add    esp,0x10
c0009246:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000924b:	74 03                	je     c0009250 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000924d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009250:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009256:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000925a:	75 d6                	jne    c0009232 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000925c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009261:	75 10                	jne    c0009273 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009263:	0f 20 d8             	mov    eax,cr3
c0009266:	0f 22 d8             	mov    cr3,eax
c0009269:	83 c4 1c             	add    esp,0x1c
c000926c:	89 f0                	mov    eax,esi
c000926e:	5b                   	pop    ebx
c000926f:	5e                   	pop    esi
c0009270:	5f                   	pop    edi
c0009271:	5d                   	pop    ebp
c0009272:	c3                   	ret    
c0009273:	89 f3                	mov    ebx,esi
c0009275:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009279:	c1 eb 0a             	shr    ebx,0xa
c000927c:	c1 e0 0c             	shl    eax,0xc
c000927f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009285:	01 f0                	add    eax,esi
c0009287:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000928d:	c1 e8 0a             	shr    eax,0xa
c0009290:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009295:	2d 00 00 40 00       	sub    eax,0x400000
c000929a:	39 c3                	cmp    ebx,eax
c000929c:	77 cb                	ja     c0009269 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000929e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00092a1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00092a7:	39 d8                	cmp    eax,ebx
c00092a9:	73 f3                	jae    c000929e <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00092ab:	83 c4 1c             	add    esp,0x1c
c00092ae:	89 f0                	mov    eax,esi
c00092b0:	5b                   	pop    ebx
c00092b1:	5e                   	pop    esi
c00092b2:	5f                   	pop    edi
c00092b3:	5d                   	pop    ebp
c00092b4:	c3                   	ret    
c00092b5:	90                   	nop

c00092b6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00092b6:	55                   	push   ebp
c00092b7:	57                   	push   edi
c00092b8:	56                   	push   esi
c00092b9:	53                   	push   ebx
c00092ba:	83 ec 1c             	sub    esp,0x1c
c00092bd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00092c1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00092c5:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00092c9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00092cd:	a9 ff 0f 00 00       	test   eax,0xfff
c00092d2:	75 4a                	jne    c000931e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00092d4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00092d8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00092db:	c1 eb 16             	shr    ebx,0x16
c00092de:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00092e5:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00092e9:	74 4d                	je     c0009338 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00092eb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00092ef:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00092f3:	c1 e8 0a             	shr    eax,0xa
c00092f6:	80 fa 01             	cmp    dl,0x1
c00092f9:	19 d2                	sbb    edx,edx
c00092fb:	c1 e3 0c             	shl    ebx,0xc
c00092fe:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009302:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009308:	25 fc 0f 00 00       	and    eax,0xffc
c000930d:	01 d8                	add    eax,ebx
c000930f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009316:	83 c4 1c             	add    esp,0x1c
c0009319:	5b                   	pop    ebx
c000931a:	5e                   	pop    esi
c000931b:	5f                   	pop    edi
c000931c:	5d                   	pop    ebp
c000931d:	c3                   	ret    
c000931e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009322:	83 ec 0c             	sub    esp,0xc
c0009325:	68 ac e2 01 c0       	push   0xc001e2ac
c000932a:	e8 ae 64 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c000932f:	83 c4 10             	add    esp,0x10
c0009332:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009336:	eb 9c                	jmp    c00092d4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009338:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000933c:	e8 03 de ff ff       	call   c0007144 <Phys::allocatePage()>
c0009341:	83 ec 0c             	sub    esp,0xc
c0009344:	89 c5                	mov    ebp,eax
c0009346:	8b 0d 94 08 02 c0    	mov    ecx,DWORD PTR ds:0xc0020894
c000934c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009350:	6a 01                	push   0x1
c0009352:	e8 4e f5 ff ff       	call   c00088a5 <Virt::allocateKernelVirtualPages(int)>
c0009357:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000935e:	6a 01                	push   0x1
c0009360:	50                   	push   eax
c0009361:	55                   	push   ebp
c0009362:	81 cd 07 04 00 00    	or     ebp,0x407
c0009368:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000936c:	51                   	push   ecx
c000936d:	e8 7e fe ff ff       	call   c00091f0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009372:	83 c4 1c             	add    esp,0x1c
c0009375:	68 00 10 00 00       	push   0x1000
c000937a:	6a 00                	push   0x0
c000937c:	50                   	push   eax
c000937d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009381:	e8 22 71 ff ff       	call   c00004a8 <memset>
c0009386:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000938a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000938d:	e8 07 f8 ff ff       	call   c0008b99 <Virt::freeKernelVirtualPages(unsigned long)>
c0009392:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009395:	83 c4 10             	add    esp,0x10
c0009398:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000939b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000939f:	e9 47 ff ff ff       	jmp    c00092eb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c00093a4 <VAS::VAS(bool)>:
c00093a4:	53                   	push   ebx
c00093a5:	83 ec 28             	sub    esp,0x28
c00093a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00093ac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00093b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00093bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00093c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093ca:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00093ce:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00093d1:	e8 6e dd ff ff       	call   c0007144 <Phys::allocatePage()>
c00093d6:	89 c2                	mov    edx,eax
c00093d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093dc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00093df:	8b 1d 94 08 02 c0    	mov    ebx,DWORD PTR ds:0xc0020894
c00093e5:	83 ec 0c             	sub    esp,0xc
c00093e8:	6a 01                	push   0x1
c00093ea:	e8 b6 f4 ff ff       	call   c00088a5 <Virt::allocateKernelVirtualPages(int)>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	89 c2                	mov    edx,eax
c00093f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00093fb:	83 ec 0c             	sub    esp,0xc
c00093fe:	6a 03                	push   0x3
c0009400:	6a 01                	push   0x1
c0009402:	52                   	push   edx
c0009403:	50                   	push   eax
c0009404:	53                   	push   ebx
c0009405:	e8 e6 fd ff ff       	call   c00091f0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000940a:	83 c4 20             	add    esp,0x20
c000940d:	89 c2                	mov    edx,eax
c000940f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009413:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009416:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000941e:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009426:	7f 1c                	jg     c0009444 <VAS::VAS(bool)+0xa0>
c0009428:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000942c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000942f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009433:	c1 e2 02             	shl    edx,0x2
c0009436:	01 d0                	add    eax,edx
c0009438:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000943e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009442:	eb da                	jmp    c000941e <VAS::VAS(bool)+0x7a>
c0009444:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000944c:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009454:	7f 7a                	jg     c00094d0 <VAS::VAS(bool)+0x12c>
c0009456:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000945a:	2d 00 02 00 00       	sub    eax,0x200
c000945f:	c1 e0 0c             	shl    eax,0xc
c0009462:	83 c8 03             	or     eax,0x3
c0009465:	89 c2                	mov    edx,eax
c0009467:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c000946c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009472:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009478:	83 e0 10             	and    eax,0x10
c000947b:	84 c0                	test   al,al
c000947d:	74 07                	je     c0009486 <VAS::VAS(bool)+0xe2>
c000947f:	b8 00 01 00 00       	mov    eax,0x100
c0009484:	eb 05                	jmp    c000948b <VAS::VAS(bool)+0xe7>
c0009486:	b8 00 00 00 00       	mov    eax,0x0
c000948b:	09 d0                	or     eax,edx
c000948d:	89 c1                	mov    ecx,eax
c000948f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009493:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009496:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000949a:	c1 e2 02             	shl    edx,0x2
c000949d:	01 d0                	add    eax,edx
c000949f:	89 ca                	mov    edx,ecx
c00094a1:	89 10                	mov    DWORD PTR [eax],edx
c00094a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00094a7:	2d 40 03 00 00       	sub    eax,0x340
c00094ac:	83 f8 7f             	cmp    eax,0x7f
c00094af:	77 16                	ja     c00094c7 <VAS::VAS(bool)+0x123>
c00094b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094b5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00094b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00094bc:	c1 e2 02             	shl    edx,0x2
c00094bf:	01 d0                	add    eax,edx
c00094c1:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00094c7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00094cb:	e9 7c ff ff ff       	jmp    c000944c <VAS::VAS(bool)+0xa8>
c00094d0:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c00094d5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00094db:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c00094e1:	83 e0 10             	and    eax,0x10
c00094e4:	84 c0                	test   al,al
c00094e6:	74 07                	je     c00094ef <VAS::VAS(bool)+0x14b>
c00094e8:	b8 03 41 00 00       	mov    eax,0x4103
c00094ed:	eb 05                	jmp    c00094f4 <VAS::VAS(bool)+0x150>
c00094ef:	b8 03 40 00 00       	mov    eax,0x4003
c00094f4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00094f8:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00094fb:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009501:	89 02                	mov    DWORD PTR [edx],eax
c0009503:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c0009508:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000950e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009514:	83 ec 08             	sub    esp,0x8
c0009517:	50                   	push   eax
c0009518:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000951c:	e8 b3 fc ff ff       	call   c00091d4 <VAS::setCPUSpecific(unsigned long)>
c0009521:	83 c4 10             	add    esp,0x10
c0009524:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009528:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000952b:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c0009530:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009536:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000953c:	83 e0 10             	and    eax,0x10
c000953f:	84 c0                	test   al,al
c0009541:	74 07                	je     c000954a <VAS::VAS(bool)+0x1a6>
c0009543:	b8 00 01 00 00       	mov    eax,0x100
c0009548:	eb 05                	jmp    c000954f <VAS::VAS(bool)+0x1ab>
c000954a:	b8 00 00 00 00       	mov    eax,0x0
c000954f:	09 c2                	or     edx,eax
c0009551:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009555:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009558:	05 fc 0f 00 00       	add    eax,0xffc
c000955d:	83 ca 03             	or     edx,0x3
c0009560:	89 10                	mov    DWORD PTR [eax],edx
c0009562:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c0009567:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000956d:	83 ec 0c             	sub    esp,0xc
c0009570:	50                   	push   eax
c0009571:	e8 48 1c 00 00       	call   c000b1be <Device::getName()>
c0009576:	83 c4 10             	add    esp,0x10
c0009579:	83 ec 08             	sub    esp,0x8
c000957c:	68 4f e3 01 c0       	push   0xc001e34f
c0009581:	50                   	push   eax
c0009582:	e8 69 70 ff ff       	call   c00005f0 <strcmp>
c0009587:	83 c4 10             	add    esp,0x10
c000958a:	85 c0                	test   eax,eax
c000958c:	0f 94 c0             	sete   al
c000958f:	84 c0                	test   al,al
c0009591:	0f 84 87 00 00 00    	je     c000961e <VAS::VAS(bool)+0x27a>
c0009597:	fa                   	cli    
c0009598:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c000959d:	40                   	inc    eax
c000959e:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c00095a3:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c00095a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00095ae:	05 7c 09 00 00       	add    eax,0x97c
c00095b3:	83 ec 0c             	sub    esp,0xc
c00095b6:	50                   	push   eax
c00095b7:	e8 be d2 ff ff       	call   c000687a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00095bc:	83 c4 10             	add    esp,0x10
c00095bf:	25 00 f0 ff ff       	and    eax,0xfffff000
c00095c4:	89 c3                	mov    ebx,eax
c00095c6:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c00095cb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00095d1:	05 7c 09 00 00       	add    eax,0x97c
c00095d6:	83 ec 0c             	sub    esp,0xc
c00095d9:	50                   	push   eax
c00095da:	e8 9b d2 ff ff       	call   c000687a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	83 ec 08             	sub    esp,0x8
c00095e5:	50                   	push   eax
c00095e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00095ea:	e8 8b f5 ff ff       	call   c0008b7a <VAS::getPageTableEntry(unsigned long)>
c00095ef:	83 c4 10             	add    esp,0x10
c00095f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00095f4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00095f9:	6a 11                	push   0x11
c00095fb:	53                   	push   ebx
c00095fc:	50                   	push   eax
c00095fd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009601:	e8 f2 f8 ff ff       	call   c0008ef8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009606:	83 c4 10             	add    esp,0x10
c0009609:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c000960e:	48                   	dec    eax
c000960f:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c0009614:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0009619:	85 c0                	test   eax,eax
c000961b:	75 01                	jne    c000961e <VAS::VAS(bool)+0x27a>
c000961d:	fb                   	sti    
c000961e:	90                   	nop
c000961f:	83 c4 28             	add    esp,0x28
c0009622:	5b                   	pop    ebx
c0009623:	c3                   	ret    

c0009624 <VAS::VAS()>:
c0009624:	53                   	push   ebx
c0009625:	83 ec 18             	sub    esp,0x18
c0009628:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000962c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009633:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009637:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000963e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009642:	a3 94 08 02 c0       	mov    ds:0xc0020894,eax
c0009647:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000964b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000964f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009653:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009656:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000965a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009661:	c7 44 24 0c 14 00 00 00 	mov    DWORD PTR [esp+0xc],0x14
c0009669:	83 ec 0c             	sub    esp,0xc
c000966c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009670:	e8 08 d7 ff ff       	call   c0006d7d <malloc>
c0009675:	83 c4 10             	add    esp,0x10
c0009678:	89 c3                	mov    ebx,eax
c000967a:	83 ec 08             	sub    esp,0x8
c000967d:	6a 01                	push   0x1
c000967f:	53                   	push   ebx
c0009680:	e8 1f fd ff ff       	call   c00093a4 <VAS::VAS(bool)>
c0009685:	83 c4 10             	add    esp,0x10
c0009688:	89 1d 8c 08 02 c0    	mov    DWORD PTR ds:0xc002088c,ebx
c000968e:	90                   	nop
c000968f:	83 c4 18             	add    esp,0x18
c0009692:	5b                   	pop    ebx
c0009693:	c3                   	ret    

c0009694 <VAS::evict(unsigned long)>:
c0009694:	55                   	push   ebp
c0009695:	57                   	push   edi
c0009696:	56                   	push   esi
c0009697:	53                   	push   ebx
c0009698:	83 ec 1c             	sub    esp,0x1c
c000969b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000969f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00096a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00096a7:	e8 3a f3 ff ff       	call   c00089e6 <Virt::allocateSwapfilePage()>
c00096ac:	89 c7                	mov    edi,eax
c00096ae:	a1 4c 01 02 c0       	mov    eax,ds:0xc002014c
c00096b3:	85 c0                	test   eax,eax
c00096b5:	7e 3d                	jle    c00096f4 <VAS::evict(unsigned long)+0x60>
c00096b7:	89 ee                	mov    esi,ebp
c00096b9:	31 db                	xor    ebx,ebx
c00096bb:	83 ec 0c             	sub    esp,0xc
c00096be:	57                   	push   edi
c00096bf:	e8 10 f3 ff ff       	call   c00089d4 <Virt::swapIDToSector(unsigned long)>
c00096c4:	89 34 24             	mov    DWORD PTR [esp],esi
c00096c7:	01 d8                	add    eax,ebx
c00096c9:	6a 01                	push   0x1
c00096cb:	31 d2                	xor    edx,edx
c00096cd:	43                   	inc    ebx
c00096ce:	52                   	push   edx
c00096cf:	81 c6 00 02 00 00    	add    esi,0x200
c00096d5:	50                   	push   eax
c00096d6:	0f be 05 58 01 02 c0 	movsx  eax,BYTE PTR ds:0xc0020158
c00096dd:	ff 34 85 1c 2c 02 c0 	push   DWORD PTR [eax*4-0x3ffdd3e4]
c00096e4:	e8 2d 2b 00 00       	call   c000c216 <LogicalDisk::write(unsigned long long, int, void*)>
c00096e9:	83 c4 20             	add    esp,0x20
c00096ec:	39 1d 4c 01 02 c0    	cmp    DWORD PTR ds:0xc002014c,ebx
c00096f2:	7f c7                	jg     c00096bb <VAS::evict(unsigned long)+0x27>
c00096f4:	83 ec 08             	sub    esp,0x8
c00096f7:	c1 e7 0b             	shl    edi,0xb
c00096fa:	55                   	push   ebp
c00096fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00096ff:	e8 76 f4 ff ff       	call   c0008b7a <VAS::getPageTableEntry(unsigned long)>
c0009704:	8b 10                	mov    edx,DWORD PTR [eax]
c0009706:	89 d1                	mov    ecx,edx
c0009708:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000970e:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0009714:	09 cf                	or     edi,ecx
c0009716:	89 38                	mov    DWORD PTR [eax],edi
c0009718:	89 14 24             	mov    DWORD PTR [esp],edx
c000971b:	ff 05 88 08 02 c0    	inc    DWORD PTR ds:0xc0020888
c0009721:	e8 bc d9 ff ff       	call   c00070e2 <Phys::freePage(unsigned long)>
c0009726:	0f 20 d8             	mov    eax,cr3
c0009729:	0f 22 d8             	mov    cr3,eax
c000972c:	a1 84 08 02 c0       	mov    eax,ds:0xc0020884
c0009731:	c7 44 24 40 5d e3 01 c0 	mov    DWORD PTR [esp+0x40],0xc001e35d
c0009739:	8d 50 01             	lea    edx,[eax+0x1]
c000973c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009740:	89 15 84 08 02 c0    	mov    DWORD PTR ds:0xc0020884,edx
c0009746:	83 c4 2c             	add    esp,0x2c
c0009749:	5b                   	pop    ebx
c000974a:	5e                   	pop    esi
c000974b:	5f                   	pop    edi
c000974c:	5d                   	pop    ebp
c000974d:	e9 b5 03 00 00       	jmp    c0009b07 <Dbg::kprintf(char const*, ...)>

c0009752 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0009752:	55                   	push   ebp
c0009753:	57                   	push   edi
c0009754:	56                   	push   esi
c0009755:	53                   	push   ebx
c0009756:	83 ec 14             	sub    esp,0x14
c0009759:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000975d:	53                   	push   ebx
c000975e:	68 6e e3 01 c0       	push   0xc001e36e
c0009763:	e8 9f 03 00 00       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c0009768:	83 c4 10             	add    esp,0x10
c000976b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009771:	74 20                	je     c0009793 <VAS::tryLoadBackOffDisk(unsigned long)+0x41>
c0009773:	83 ec 08             	sub    esp,0x8
c0009776:	53                   	push   ebx
c0009777:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000977b:	e8 fa f3 ff ff       	call   c0008b7a <VAS::getPageTableEntry(unsigned long)>
c0009780:	83 c4 10             	add    esp,0x10
c0009783:	89 c6                	mov    esi,eax
c0009785:	85 c0                	test   eax,eax
c0009787:	74 0a                	je     c0009793 <VAS::tryLoadBackOffDisk(unsigned long)+0x41>
c0009789:	8b 28                	mov    ebp,DWORD PTR [eax]
c000978b:	f7 c5 01 00 00 00    	test   ebp,0x1
c0009791:	74 0a                	je     c000979d <VAS::tryLoadBackOffDisk(unsigned long)+0x4b>
c0009793:	31 c0                	xor    eax,eax
c0009795:	83 c4 0c             	add    esp,0xc
c0009798:	5b                   	pop    ebx
c0009799:	5e                   	pop    esi
c000979a:	5f                   	pop    edi
c000979b:	5d                   	pop    ebp
c000979c:	c3                   	ret    
c000979d:	e8 a2 d9 ff ff       	call   c0007144 <Phys::allocatePage()>
c00097a2:	c1 ed 0b             	shr    ebp,0xb
c00097a5:	8b 16                	mov    edx,DWORD PTR [esi]
c00097a7:	81 e2 ff 0f 00 00    	and    edx,0xfff
c00097ad:	09 c2                	or     edx,eax
c00097af:	81 ca 01 08 00 00    	or     edx,0x801
c00097b5:	89 16                	mov    DWORD PTR [esi],edx
c00097b7:	8b 0d 4c 01 02 c0    	mov    ecx,DWORD PTR ds:0xc002014c
c00097bd:	85 c9                	test   ecx,ecx
c00097bf:	7e 3d                	jle    c00097fe <VAS::tryLoadBackOffDisk(unsigned long)+0xac>
c00097c1:	89 df                	mov    edi,ebx
c00097c3:	31 f6                	xor    esi,esi
c00097c5:	83 ec 0c             	sub    esp,0xc
c00097c8:	55                   	push   ebp
c00097c9:	e8 06 f2 ff ff       	call   c00089d4 <Virt::swapIDToSector(unsigned long)>
c00097ce:	89 3c 24             	mov    DWORD PTR [esp],edi
c00097d1:	01 f0                	add    eax,esi
c00097d3:	6a 01                	push   0x1
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	46                   	inc    esi
c00097d8:	52                   	push   edx
c00097d9:	81 c7 00 02 00 00    	add    edi,0x200
c00097df:	50                   	push   eax
c00097e0:	0f be 05 58 01 02 c0 	movsx  eax,BYTE PTR ds:0xc0020158
c00097e7:	ff 34 85 1c 2c 02 c0 	push   DWORD PTR [eax*4-0x3ffdd3e4]
c00097ee:	e8 b7 29 00 00       	call   c000c1aa <LogicalDisk::read(unsigned long long, int, void*)>
c00097f3:	83 c4 20             	add    esp,0x20
c00097f6:	39 35 4c 01 02 c0    	cmp    DWORD PTR ds:0xc002014c,esi
c00097fc:	7f c7                	jg     c00097c5 <VAS::tryLoadBackOffDisk(unsigned long)+0x73>
c00097fe:	a1 88 08 02 c0       	mov    eax,ds:0xc0020888
c0009803:	48                   	dec    eax
c0009804:	52                   	push   edx
c0009805:	a3 88 08 02 c0       	mov    ds:0xc0020888,eax
c000980a:	50                   	push   eax
c000980b:	53                   	push   ebx
c000980c:	68 81 e3 01 c0       	push   0xc001e381
c0009811:	e8 f1 02 00 00       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c0009816:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009819:	e8 98 f1 ff ff       	call   c00089b6 <Virt::freeSwapfilePage(unsigned long)>
c000981e:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0009823:	83 c4 10             	add    esp,0x10
c0009826:	48                   	dec    eax
c0009827:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c000982c:	85 c0                	test   eax,eax
c000982e:	75 01                	jne    c0009831 <VAS::tryLoadBackOffDisk(unsigned long)+0xdf>
c0009830:	fb                   	sti    
c0009831:	0f 20 d8             	mov    eax,cr3
c0009834:	0f 22 d8             	mov    cr3,eax
c0009837:	b0 01                	mov    al,0x1
c0009839:	e9 57 ff ff ff       	jmp    c0009795 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>

c000983e <VAS::scanForEviction()>:
c000983e:	57                   	push   edi
c000983f:	31 ff                	xor    edi,edi
c0009841:	56                   	push   esi
c0009842:	53                   	push   ebx
c0009843:	83 ec 10             	sub    esp,0x10
c0009846:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000984a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000984d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0009853:	75 0e                	jne    c0009863 <VAS::scanForEviction()+0x25>
c0009855:	89 da                	mov    edx,ebx
c0009857:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000985a:	c1 ea 16             	shr    edx,0x16
c000985d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0009861:	74 4e                	je     c00098b1 <VAS::scanForEviction()+0x73>
c0009863:	53                   	push   ebx
c0009864:	56                   	push   esi
c0009865:	e8 10 f3 ff ff       	call   c0008b7a <VAS::getPageTableEntry(unsigned long)>
c000986a:	5a                   	pop    edx
c000986b:	8b 10                	mov    edx,DWORD PTR [eax]
c000986d:	59                   	pop    ecx
c000986e:	89 d1                	mov    ecx,edx
c0009870:	81 e1 01 08 00 00    	and    ecx,0x801
c0009876:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000987c:	74 3e                	je     c00098bc <VAS::scanForEviction()+0x7e>
c000987e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009884:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000988a:	76 2b                	jbe    c00098b7 <VAS::scanForEviction()+0x79>
c000988c:	47                   	inc    edi
c000988d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0009894:	83 ff 03             	cmp    edi,0x3
c0009897:	74 32                	je     c00098cb <VAS::scanForEviction()+0x8d>
c0009899:	31 db                	xor    ebx,ebx
c000989b:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00098a1:	75 c0                	jne    c0009863 <VAS::scanForEviction()+0x25>
c00098a3:	89 da                	mov    edx,ebx
c00098a5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00098a8:	c1 ea 16             	shr    edx,0x16
c00098ab:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00098af:	75 b2                	jne    c0009863 <VAS::scanForEviction()+0x25>
c00098b1:	81 c3 00 00 40 00    	add    ebx,0x400000
c00098b7:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00098ba:	eb 91                	jmp    c000984d <VAS::scanForEviction()+0xf>
c00098bc:	f6 c2 20             	test   dl,0x20
c00098bf:	74 13                	je     c00098d4 <VAS::scanForEviction()+0x96>
c00098c1:	83 e2 df             	and    edx,0xffffffdf
c00098c4:	89 10                	mov    DWORD PTR [eax],edx
c00098c6:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00098c9:	eb b3                	jmp    c000987e <VAS::scanForEviction()+0x40>
c00098cb:	83 c4 10             	add    esp,0x10
c00098ce:	31 c0                	xor    eax,eax
c00098d0:	5b                   	pop    ebx
c00098d1:	5e                   	pop    esi
c00098d2:	5f                   	pop    edi
c00098d3:	c3                   	ret    
c00098d4:	83 ec 08             	sub    esp,0x8
c00098d7:	89 d0                	mov    eax,edx
c00098d9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00098e2:	53                   	push   ebx
c00098e3:	68 96 e3 01 c0       	push   0xc001e396
c00098e8:	e8 1a 02 00 00       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c00098ed:	58                   	pop    eax
c00098ee:	5a                   	pop    edx
c00098ef:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00098f2:	56                   	push   esi
c00098f3:	e8 9c fd ff ff       	call   c0009694 <VAS::evict(unsigned long)>
c00098f8:	59                   	pop    ecx
c00098f9:	5b                   	pop    ebx
c00098fa:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00098fd:	68 aa e3 01 c0       	push   0xc001e3aa
c0009902:	e8 00 02 00 00       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c0009907:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000990e:	83 c4 10             	add    esp,0x10
c0009911:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009915:	83 c4 10             	add    esp,0x10
c0009918:	5b                   	pop    ebx
c0009919:	5e                   	pop    esi
c000991a:	5f                   	pop    edi
c000991b:	c3                   	ret    

c000991c <mapVASFirstTime>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	53                   	push   ebx
c0009920:	83 ec 0c             	sub    esp,0xc
c0009923:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009928:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000992b:	4a                   	dec    edx
c000992c:	0f 84 8c 00 00 00    	je     c00099be <mapVASFirstTime+0xa2>
c0009932:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0009935:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0009938:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000993d:	c1 e5 15             	shl    ebp,0x15
c0009940:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0009945:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000994b:	29 eb                	sub    ebx,ebp
c000994d:	29 ef                	sub    edi,ebp
c000994f:	e8 f0 d7 ff ff       	call   c0007144 <Phys::allocatePage()>
c0009954:	83 ec 0c             	sub    esp,0xc
c0009957:	68 03 04 00 00       	push   0x403
c000995c:	6a 01                	push   0x1
c000995e:	53                   	push   ebx
c000995f:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0009965:	50                   	push   eax
c0009966:	56                   	push   esi
c0009967:	e8 84 f8 ff ff       	call   c00091f0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000996c:	83 c4 20             	add    esp,0x20
c000996f:	39 fb                	cmp    ebx,edi
c0009971:	75 dc                	jne    c000994f <mapVASFirstTime+0x33>
c0009973:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0009978:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000997d:	29 eb                	sub    ebx,ebp
c000997f:	29 ef                	sub    edi,ebp
c0009981:	e8 be d7 ff ff       	call   c0007144 <Phys::allocatePage()>
c0009986:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000998a:	19 d2                	sbb    edx,edx
c000998c:	83 ec 0c             	sub    esp,0xc
c000998f:	83 e2 04             	and    edx,0x4
c0009992:	81 c2 03 04 00 00    	add    edx,0x403
c0009998:	52                   	push   edx
c0009999:	6a 01                	push   0x1
c000999b:	53                   	push   ebx
c000999c:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00099a2:	50                   	push   eax
c00099a3:	56                   	push   esi
c00099a4:	e8 47 f8 ff ff       	call   c00091f0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00099a9:	83 c4 20             	add    esp,0x20
c00099ac:	39 df                	cmp    edi,ebx
c00099ae:	75 d1                	jne    c0009981 <mapVASFirstTime+0x65>
c00099b0:	0f 20 d8             	mov    eax,cr3
c00099b3:	0f 22 d8             	mov    cr3,eax
c00099b6:	83 c4 0c             	add    esp,0xc
c00099b9:	5b                   	pop    ebx
c00099ba:	5e                   	pop    esi
c00099bb:	5f                   	pop    edi
c00099bc:	5d                   	pop    ebp
c00099bd:	c3                   	ret    
c00099be:	83 ec 0c             	sub    esp,0xc
c00099c1:	68 bd e3 01 c0       	push   0xc001e3bd
c00099c6:	e8 3c 01 00 00       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c00099cb:	83 c4 10             	add    esp,0x10
c00099ce:	83 c4 0c             	add    esp,0xc
c00099d1:	5b                   	pop    ebx
c00099d2:	5e                   	pop    esi
c00099d3:	5f                   	pop    edi
c00099d4:	5d                   	pop    ebp
c00099d5:	c3                   	ret    

c00099d6 <__cxa_atexit>:
c00099d6:	31 c0                	xor    eax,eax
c00099d8:	c3                   	ret    

c00099d9 <__cxa_finalize>:
c00099d9:	c3                   	ret    

c00099da <__stack_chk_fail>:
c00099da:	55                   	push   ebp
c00099db:	89 e5                	mov    ebp,esp
c00099dd:	83 ec 10             	sub    esp,0x10
c00099e0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00099e3:	68 d6 e3 01 c0       	push   0xc001e3d6
c00099e8:	e8 1a 01 00 00       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c00099ed:	58                   	pop    eax
c00099ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00099f1:	5a                   	pop    edx
c00099f2:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00099f5:	68 d6 e3 01 c0       	push   0xc001e3d6
c00099fa:	e8 08 01 00 00       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c00099ff:	c7 04 24 de e3 01 c0 	mov    DWORD PTR [esp],0xc001e3de
c0009a06:	e8 d2 5d 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c0009a0b:	83 c4 10             	add    esp,0x10
c0009a0e:	c9                   	leave  
c0009a0f:	c3                   	ret    

c0009a10 <__cxa_pure_virtual>:
c0009a10:	83 ec 18             	sub    esp,0x18
c0009a13:	68 f6 e3 01 c0       	push   0xc001e3f6
c0009a18:	e8 c0 5d 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c0009a1d:	83 c4 1c             	add    esp,0x1c
c0009a20:	c3                   	ret    

c0009a21 <operator new[](unsigned long)>:
c0009a21:	e9 57 d3 ff ff       	jmp    c0006d7d <malloc>

c0009a26 <operator delete(void*, unsigned long)>:
c0009a26:	e9 72 d3 ff ff       	jmp    c0006d9d <rfree>

c0009a2b <operator delete[](void*)>:
c0009a2b:	e9 6d d3 ff ff       	jmp    c0006d9d <rfree>

c0009a30 <operator delete[](void*, unsigned long)>:
c0009a30:	e9 68 d3 ff ff       	jmp    c0006d9d <rfree>

c0009a35 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0009a35:	55                   	push   ebp
c0009a36:	b9 11 00 00 00       	mov    ecx,0x11
c0009a3b:	57                   	push   edi
c0009a3c:	56                   	push   esi
c0009a3d:	be 0a e0 01 c0       	mov    esi,0xc001e00a
c0009a42:	53                   	push   ebx
c0009a43:	83 ec 20             	sub    esp,0x20
c0009a46:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009a4a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009a4e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0009a52:	fc                   	cld    
c0009a53:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009a55:	89 ee                	mov    esi,ebp
c0009a57:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0009a5b:	eb 02                	jmp    c0009a5f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c0009a5d:	89 c6                	mov    esi,eax
c0009a5f:	31 d2                	xor    edx,edx
c0009a61:	41                   	inc    ecx
c0009a62:	89 f0                	mov    eax,esi
c0009a64:	f7 f3                	div    ebx
c0009a66:	39 de                	cmp    esi,ebx
c0009a68:	73 f3                	jae    c0009a5d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c0009a6a:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0009a6d:	eb 02                	jmp    c0009a71 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c0009a6f:	89 c5                	mov    ebp,eax
c0009a71:	31 d2                	xor    edx,edx
c0009a73:	49                   	dec    ecx
c0009a74:	89 e8                	mov    eax,ebp
c0009a76:	f7 f3                	div    ebx
c0009a78:	39 dd                	cmp    ebp,ebx
c0009a7a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0009a7e:	88 11                	mov    BYTE PTR [ecx],dl
c0009a80:	73 ed                	jae    c0009a6f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c0009a82:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a86:	83 c4 20             	add    esp,0x20
c0009a89:	5b                   	pop    ebx
c0009a8a:	5e                   	pop    esi
c0009a8b:	5f                   	pop    edi
c0009a8c:	5d                   	pop    ebp
c0009a8d:	c3                   	ret    

c0009a8e <Dbg::logc(char)>:
c0009a8e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009a92:	f6 05 c0 07 02 c0 10 	test   BYTE PTR ds:0xc00207c0,0x10
c0009a99:	75 12                	jne    c0009aad <Dbg::logc(char)+0x1f>
c0009a9b:	ba fd 03 00 00       	mov    edx,0x3fd
c0009aa0:	ec                   	in     al,dx
c0009aa1:	a8 20                	test   al,0x20
c0009aa3:	74 fb                	je     c0009aa0 <Dbg::logc(char)+0x12>
c0009aa5:	ba f8 03 00 00       	mov    edx,0x3f8
c0009aaa:	88 c8                	mov    al,cl
c0009aac:	ee                   	out    dx,al
c0009aad:	c3                   	ret    

c0009aae <Dbg::logs(char*)>:
c0009aae:	53                   	push   ebx
c0009aaf:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009ab3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0009ab6:	84 c0                	test   al,al
c0009ab8:	74 0f                	je     c0009ac9 <Dbg::logs(char*)+0x1b>
c0009aba:	50                   	push   eax
c0009abb:	43                   	inc    ebx
c0009abc:	e8 cd ff ff ff       	call   c0009a8e <Dbg::logc(char)>
c0009ac1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0009ac4:	5a                   	pop    edx
c0009ac5:	84 c0                	test   al,al
c0009ac7:	75 f1                	jne    c0009aba <Dbg::logs(char*)+0xc>
c0009ac9:	5b                   	pop    ebx
c0009aca:	c3                   	ret    

c0009acb <Dbg::logWriteInt(unsigned int)>:
c0009acb:	83 ec 10             	sub    esp,0x10
c0009ace:	6a 0a                	push   0xa
c0009ad0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0009ad4:	50                   	push   eax
c0009ad5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ad9:	e8 57 ff ff ff       	call   c0009a35 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0009ade:	50                   	push   eax
c0009adf:	e8 ca ff ff ff       	call   c0009aae <Dbg::logs(char*)>
c0009ae4:	83 c4 20             	add    esp,0x20
c0009ae7:	c3                   	ret    

c0009ae8 <Dbg::logWriteIntBase(unsigned int, int)>:
c0009ae8:	83 ec 10             	sub    esp,0x10
c0009aeb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009aef:	8d 44 24 08          	lea    eax,[esp+0x8]
c0009af3:	50                   	push   eax
c0009af4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009af8:	e8 38 ff ff ff       	call   c0009a35 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0009afd:	50                   	push   eax
c0009afe:	e8 ab ff ff ff       	call   c0009aae <Dbg::logs(char*)>
c0009b03:	83 c4 20             	add    esp,0x20
c0009b06:	c3                   	ret    

c0009b07 <Dbg::kprintf(char const*, ...)>:
c0009b07:	55                   	push   ebp
c0009b08:	57                   	push   edi
c0009b09:	56                   	push   esi
c0009b0a:	53                   	push   ebx
c0009b0b:	83 ec 0c             	sub    esp,0xc
c0009b0e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009b12:	f6 05 c0 07 02 c0 10 	test   BYTE PTR ds:0xc00207c0,0x10
c0009b19:	74 08                	je     c0009b23 <Dbg::kprintf(char const*, ...)+0x1c>
c0009b1b:	83 c4 0c             	add    esp,0xc
c0009b1e:	5b                   	pop    ebx
c0009b1f:	5e                   	pop    esi
c0009b20:	5f                   	pop    edi
c0009b21:	5d                   	pop    ebp
c0009b22:	c3                   	ret    
c0009b23:	8d 44 24 24          	lea    eax,[esp+0x24]
c0009b27:	31 db                	xor    ebx,ebx
c0009b29:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b2d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0009b30:	84 c0                	test   al,al
c0009b32:	74 e7                	je     c0009b1b <Dbg::kprintf(char const*, ...)+0x14>
c0009b34:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0009b37:	3c 25                	cmp    al,0x25
c0009b39:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0009b3c:	75 44                	jne    c0009b82 <Dbg::kprintf(char const*, ...)+0x7b>
c0009b3e:	83 c3 02             	add    ebx,0x2
c0009b41:	8a 07                	mov    al,BYTE PTR [edi]
c0009b43:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0009b46:	83 e8 25             	sub    eax,0x25
c0009b49:	3c 53                	cmp    al,0x53
c0009b4b:	0f 87 c9 00 00 00    	ja     c0009c1a <Dbg::kprintf(char const*, ...)+0x113>
c0009b51:	0f b6 c0             	movzx  eax,al
c0009b54:	ff 24 85 0c e4 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1bf4]
c0009b5b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009b5f:	89 c8                	mov    eax,ecx
c0009b61:	83 c1 04             	add    ecx,0x4
c0009b64:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0009b68:	ff 30                	push   DWORD PTR [eax]
c0009b6a:	e8 5c ff ff ff       	call   c0009acb <Dbg::logWriteInt(unsigned int)>
c0009b6f:	5f                   	pop    edi
c0009b70:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0009b74:	84 c0                	test   al,al
c0009b76:	74 a3                	je     c0009b1b <Dbg::kprintf(char const*, ...)+0x14>
c0009b78:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0009b7b:	3c 25                	cmp    al,0x25
c0009b7d:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0009b80:	74 bc                	je     c0009b3e <Dbg::kprintf(char const*, ...)+0x37>
c0009b82:	50                   	push   eax
c0009b83:	89 eb                	mov    ebx,ebp
c0009b85:	e8 04 ff ff ff       	call   c0009a8e <Dbg::logc(char)>
c0009b8a:	89 fd                	mov    ebp,edi
c0009b8c:	58                   	pop    eax
c0009b8d:	eb e1                	jmp    c0009b70 <Dbg::kprintf(char const*, ...)+0x69>
c0009b8f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009b93:	89 c8                	mov    eax,ecx
c0009b95:	83 c1 04             	add    ecx,0x4
c0009b98:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0009b9c:	ff 30                	push   DWORD PTR [eax]
c0009b9e:	e8 0b ff ff ff       	call   c0009aae <Dbg::logs(char*)>
c0009ba3:	58                   	pop    eax
c0009ba4:	eb ca                	jmp    c0009b70 <Dbg::kprintf(char const*, ...)+0x69>
c0009ba6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009baa:	89 d0                	mov    eax,edx
c0009bac:	83 c2 04             	add    edx,0x4
c0009baf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009bb3:	ff 30                	push   DWORD PTR [eax]
c0009bb5:	e8 11 ff ff ff       	call   c0009acb <Dbg::logWriteInt(unsigned int)>
c0009bba:	58                   	pop    eax
c0009bbb:	eb b3                	jmp    c0009b70 <Dbg::kprintf(char const*, ...)+0x69>
c0009bbd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009bc1:	89 d0                	mov    eax,edx
c0009bc3:	83 c2 04             	add    edx,0x4
c0009bc6:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0009bc9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009bcd:	50                   	push   eax
c0009bce:	e8 bb fe ff ff       	call   c0009a8e <Dbg::logc(char)>
c0009bd3:	58                   	pop    eax
c0009bd4:	eb 9a                	jmp    c0009b70 <Dbg::kprintf(char const*, ...)+0x69>
c0009bd6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009bda:	89 c8                	mov    eax,ecx
c0009bdc:	83 c1 04             	add    ecx,0x4
c0009bdf:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0009be3:	6a 10                	push   0x10
c0009be5:	ff 30                	push   DWORD PTR [eax]
c0009be7:	e8 fc fe ff ff       	call   c0009ae8 <Dbg::logWriteIntBase(unsigned int, int)>
c0009bec:	59                   	pop    ecx
c0009bed:	5f                   	pop    edi
c0009bee:	eb 80                	jmp    c0009b70 <Dbg::kprintf(char const*, ...)+0x69>
c0009bf0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009bf4:	89 d0                	mov    eax,edx
c0009bf6:	83 c2 08             	add    edx,0x8
c0009bf9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009bfd:	6a 10                	push   0x10
c0009bff:	ff 30                	push   DWORD PTR [eax]
c0009c01:	e8 e2 fe ff ff       	call   c0009ae8 <Dbg::logWriteIntBase(unsigned int, int)>
c0009c06:	58                   	pop    eax
c0009c07:	5a                   	pop    edx
c0009c08:	e9 63 ff ff ff       	jmp    c0009b70 <Dbg::kprintf(char const*, ...)+0x69>
c0009c0d:	6a 25                	push   0x25
c0009c0f:	e8 7a fe ff ff       	call   c0009a8e <Dbg::logc(char)>
c0009c14:	58                   	pop    eax
c0009c15:	e9 56 ff ff ff       	jmp    c0009b70 <Dbg::kprintf(char const*, ...)+0x69>
c0009c1a:	6a 25                	push   0x25
c0009c1c:	e8 6d fe ff ff       	call   c0009a8e <Dbg::logc(char)>
c0009c21:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0009c24:	50                   	push   eax
c0009c25:	e8 64 fe ff ff       	call   c0009a8e <Dbg::logc(char)>
c0009c2a:	5a                   	pop    edx
c0009c2b:	59                   	pop    ecx
c0009c2c:	e9 3f ff ff ff       	jmp    c0009b70 <Dbg::kprintf(char const*, ...)+0x69>
c0009c31:	90                   	nop

c0009c32 <File::read(unsigned long long, void*, int*)>:
c0009c32:	53                   	push   ebx
c0009c33:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009c37:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009c3b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0009c42:	3c 19                	cmp    al,0x19
c0009c44:	77 35                	ja     c0009c7b <File::read(unsigned long long, void*, int*)+0x49>
c0009c46:	8b 04 85 20 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd2e0]
c0009c4d:	85 c0                	test   eax,eax
c0009c4f:	74 2a                	je     c0009c7b <File::read(unsigned long long, void*, int*)+0x49>
c0009c51:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009c57:	85 c0                	test   eax,eax
c0009c59:	74 20                	je     c0009c7b <File::read(unsigned long long, void*, int*)+0x49>
c0009c5b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009c5f:	74 21                	je     c0009c82 <File::read(unsigned long long, void*, int*)+0x50>
c0009c61:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009c63:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009c67:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0009c6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c75:	5b                   	pop    ebx
c0009c76:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0009c79:	ff e0                	jmp    eax
c0009c7b:	b8 0b 00 00 00       	mov    eax,0xb
c0009c80:	eb 05                	jmp    c0009c87 <File::read(unsigned long long, void*, int*)+0x55>
c0009c82:	b8 05 00 00 00       	mov    eax,0x5
c0009c87:	5b                   	pop    ebx
c0009c88:	c3                   	ret    
c0009c89:	90                   	nop

c0009c8a <File::write(unsigned long long, void*, int*)>:
c0009c8a:	53                   	push   ebx
c0009c8b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009c8f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009c93:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0009c9a:	3c 19                	cmp    al,0x19
c0009c9c:	77 35                	ja     c0009cd3 <File::write(unsigned long long, void*, int*)+0x49>
c0009c9e:	8b 04 85 20 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd2e0]
c0009ca5:	85 c0                	test   eax,eax
c0009ca7:	74 2a                	je     c0009cd3 <File::write(unsigned long long, void*, int*)+0x49>
c0009ca9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009caf:	85 c0                	test   eax,eax
c0009cb1:	74 20                	je     c0009cd3 <File::write(unsigned long long, void*, int*)+0x49>
c0009cb3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009cb7:	74 21                	je     c0009cda <File::write(unsigned long long, void*, int*)+0x50>
c0009cb9:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009cbb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009cbf:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0009cc5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cc9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ccd:	5b                   	pop    ebx
c0009cce:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0009cd1:	ff e0                	jmp    eax
c0009cd3:	b8 0b 00 00 00       	mov    eax,0xb
c0009cd8:	eb 05                	jmp    c0009cdf <File::write(unsigned long long, void*, int*)+0x55>
c0009cda:	b8 05 00 00 00       	mov    eax,0x5
c0009cdf:	5b                   	pop    ebx
c0009ce0:	c3                   	ret    
c0009ce1:	90                   	nop

c0009ce2 <Directory::read(unsigned long long, void*, int*)>:
c0009ce2:	53                   	push   ebx
c0009ce3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ce7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ceb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0009cf2:	3c 19                	cmp    al,0x19
c0009cf4:	77 35                	ja     c0009d2b <Directory::read(unsigned long long, void*, int*)+0x49>
c0009cf6:	8b 04 85 20 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd2e0]
c0009cfd:	85 c0                	test   eax,eax
c0009cff:	74 2a                	je     c0009d2b <Directory::read(unsigned long long, void*, int*)+0x49>
c0009d01:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009d07:	85 c0                	test   eax,eax
c0009d09:	74 20                	je     c0009d2b <Directory::read(unsigned long long, void*, int*)+0x49>
c0009d0b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009d0f:	74 21                	je     c0009d32 <Directory::read(unsigned long long, void*, int*)+0x50>
c0009d11:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009d13:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009d17:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0009d1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d25:	5b                   	pop    ebx
c0009d26:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0009d29:	ff e0                	jmp    eax
c0009d2b:	b8 0b 00 00 00       	mov    eax,0xb
c0009d30:	eb 05                	jmp    c0009d37 <Directory::read(unsigned long long, void*, int*)+0x55>
c0009d32:	b8 05 00 00 00       	mov    eax,0x5
c0009d37:	5b                   	pop    ebx
c0009d38:	c3                   	ret    
c0009d39:	90                   	nop

c0009d3a <Directory::write(unsigned long long, void*, int*)>:
c0009d3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009d3e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0009d45:	b8 0b 00 00 00       	mov    eax,0xb
c0009d4a:	80 fa 19             	cmp    dl,0x19
c0009d4d:	77 18                	ja     c0009d67 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0009d4f:	8b 14 95 20 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd2e0]
c0009d56:	85 d2                	test   edx,edx
c0009d58:	74 0d                	je     c0009d67 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0009d5a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0009d61:	19 c0                	sbb    eax,eax
c0009d63:	83 e0 0a             	and    eax,0xa
c0009d66:	40                   	inc    eax
c0009d67:	c3                   	ret    

c0009d68 <File::isAtty()>:
c0009d68:	31 c0                	xor    eax,eax
c0009d6a:	c3                   	ret    
c0009d6b:	90                   	nop

c0009d6c <Directory::isAtty()>:
c0009d6c:	31 c0                	xor    eax,eax
c0009d6e:	c3                   	ret    
c0009d6f:	90                   	nop

c0009d70 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0009d70:	b8 0a 00 00 00       	mov    eax,0xa
c0009d75:	c3                   	ret    

c0009d76 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0009d76:	b8 0a 00 00 00       	mov    eax,0xa
c0009d7b:	c3                   	ret    

c0009d7c <Filesystem::allocateSwapfile(char const*, int)>:
c0009d7c:	31 c0                	xor    eax,eax
c0009d7e:	31 d2                	xor    edx,edx
c0009d80:	c3                   	ret    
c0009d81:	90                   	nop

c0009d82 <File::~File()>:
c0009d82:	83 ec 0c             	sub    esp,0xc
c0009d85:	ba cc e5 01 c0       	mov    edx,0xc001e5cc
c0009d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d8e:	89 10                	mov    DWORD PTR [eax],edx
c0009d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d94:	83 ec 0c             	sub    esp,0xc
c0009d97:	50                   	push   eax
c0009d98:	e8 a7 e8 ff ff       	call   c0008644 <UnixFile::~UnixFile()>
c0009d9d:	83 c4 10             	add    esp,0x10
c0009da0:	90                   	nop
c0009da1:	83 c4 0c             	add    esp,0xc
c0009da4:	c3                   	ret    
c0009da5:	90                   	nop

c0009da6 <File::~File()>:
c0009da6:	83 ec 0c             	sub    esp,0xc
c0009da9:	83 ec 0c             	sub    esp,0xc
c0009dac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009db0:	e8 cd ff ff ff       	call   c0009d82 <File::~File()>
c0009db5:	83 c4 10             	add    esp,0x10
c0009db8:	83 ec 08             	sub    esp,0x8
c0009dbb:	68 14 01 00 00       	push   0x114
c0009dc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dc4:	e8 5d fc ff ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c0009dc9:	83 c4 10             	add    esp,0x10
c0009dcc:	83 c4 0c             	add    esp,0xc
c0009dcf:	c3                   	ret    

c0009dd0 <Directory::~Directory()>:
c0009dd0:	83 ec 0c             	sub    esp,0xc
c0009dd3:	ba e8 e5 01 c0       	mov    edx,0xc001e5e8
c0009dd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ddc:	89 10                	mov    DWORD PTR [eax],edx
c0009dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009de2:	83 ec 0c             	sub    esp,0xc
c0009de5:	50                   	push   eax
c0009de6:	e8 59 e8 ff ff       	call   c0008644 <UnixFile::~UnixFile()>
c0009deb:	83 c4 10             	add    esp,0x10
c0009dee:	90                   	nop
c0009def:	83 c4 0c             	add    esp,0xc
c0009df2:	c3                   	ret    
c0009df3:	90                   	nop

c0009df4 <Directory::~Directory()>:
c0009df4:	83 ec 0c             	sub    esp,0xc
c0009df7:	83 ec 0c             	sub    esp,0xc
c0009dfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dfe:	e8 cd ff ff ff       	call   c0009dd0 <Directory::~Directory()>
c0009e03:	83 c4 10             	add    esp,0x10
c0009e06:	83 ec 08             	sub    esp,0x8
c0009e09:	68 14 01 00 00       	push   0x114
c0009e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e12:	e8 0f fc ff ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c0009e17:	83 c4 10             	add    esp,0x10
c0009e1a:	83 c4 0c             	add    esp,0xc
c0009e1d:	c3                   	ret    

c0009e1e <Filesystem::Filesystem()>:
c0009e1e:	ba 64 e5 01 c0       	mov    edx,0xc001e564
c0009e23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009e27:	89 10                	mov    DWORD PTR [eax],edx
c0009e29:	8b 15 98 08 02 c0    	mov    edx,DWORD PTR ds:0xc0020898
c0009e2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009e33:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009e36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009e3a:	a3 98 08 02 c0       	mov    ds:0xc0020898,eax
c0009e3f:	90                   	nop
c0009e40:	c3                   	ret    
c0009e41:	90                   	nop

c0009e42 <Filesystem::~Filesystem()>:
c0009e42:	ba 64 e5 01 c0       	mov    edx,0xc001e564
c0009e47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009e4b:	89 10                	mov    DWORD PTR [eax],edx
c0009e4d:	90                   	nop
c0009e4e:	c3                   	ret    
c0009e4f:	90                   	nop

c0009e50 <Filesystem::~Filesystem()>:
c0009e50:	83 ec 0c             	sub    esp,0xc
c0009e53:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009e57:	e8 e6 ff ff ff       	call   c0009e42 <Filesystem::~Filesystem()>
c0009e5c:	83 c4 04             	add    esp,0x4
c0009e5f:	83 ec 08             	sub    esp,0x8
c0009e62:	6a 08                	push   0x8
c0009e64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e68:	e8 b9 fb ff ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c0009e6d:	83 c4 10             	add    esp,0x10
c0009e70:	83 c4 0c             	add    esp,0xc
c0009e73:	c3                   	ret    

c0009e74 <Fs::getcwd(Process*, char*, int)>:
c0009e74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009e78:	31 c0                	xor    eax,eax
c0009e7a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0009e7d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0009e81:	7d 15                	jge    c0009e98 <Fs::getcwd(Process*, char*, int)+0x24>
c0009e83:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009e87:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0009e8e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0009e91:	84 c9                	test   cl,cl
c0009e93:	74 06                	je     c0009e9b <Fs::getcwd(Process*, char*, int)+0x27>
c0009e95:	40                   	inc    eax
c0009e96:	eb e2                	jmp    c0009e7a <Fs::getcwd(Process*, char*, int)+0x6>
c0009e98:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0009e9b:	31 c0                	xor    eax,eax
c0009e9d:	c3                   	ret    

c0009e9e <Fs::initVFS()>:
c0009e9e:	83 ec 18             	sub    esp,0x18
c0009ea1:	6a 08                	push   0x8
c0009ea3:	e8 d5 ce ff ff       	call   c0006d7d <malloc>
c0009ea8:	89 04 24             	mov    DWORD PTR [esp],eax
c0009eab:	e8 e0 d4 00 00       	call   c0017390 <FAT::FAT()>
c0009eb0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009eb7:	e8 c1 ce ff ff       	call   c0006d7d <malloc>
c0009ebc:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ebf:	e8 60 e7 00 00       	call   c0018624 <ISO9660::ISO9660()>
c0009ec4:	83 c4 1c             	add    esp,0x1c
c0009ec7:	c3                   	ret    

c0009ec8 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0009ec8:	55                   	push   ebp
c0009ec9:	57                   	push   edi
c0009eca:	56                   	push   esi
c0009ecb:	53                   	push   ebx
c0009ecc:	81 ec 10 04 00 00    	sub    esp,0x410
c0009ed2:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0009ed9:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0009ee0:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0009ee7:	68 00 04 00 00       	push   0x400
c0009eec:	6a 00                	push   0x0
c0009eee:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0009ef2:	56                   	push   esi
c0009ef3:	e8 b0 65 ff ff       	call   c00004a8 <memset>
c0009ef8:	83 c4 10             	add    esp,0x10
c0009efb:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0009eff:	75 0b                	jne    c0009f0c <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0009f01:	50                   	push   eax
c0009f02:	50                   	push   eax
c0009f03:	57                   	push   edi
c0009f04:	56                   	push   esi
c0009f05:	e8 5a 66 ff ff       	call   c0000564 <strcpy>
c0009f0a:	eb 41                	jmp    c0009f4d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0009f0c:	8a 07                	mov    al,BYTE PTR [edi]
c0009f0e:	3c 5c                	cmp    al,0x5c
c0009f10:	74 04                	je     c0009f16 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0009f12:	3c 2f                	cmp    al,0x2f
c0009f14:	75 18                	jne    c0009f2e <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0009f16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0009f19:	3c 60                	cmp    al,0x60
c0009f1b:	7e 03                	jle    c0009f20 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0009f1d:	83 e8 20             	sub    eax,0x20
c0009f20:	88 04 24             	mov    BYTE PTR [esp],al
c0009f23:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0009f2a:	50                   	push   eax
c0009f2b:	50                   	push   eax
c0009f2c:	eb 18                	jmp    c0009f46 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0009f2e:	50                   	push   eax
c0009f2f:	50                   	push   eax
c0009f30:	55                   	push   ebp
c0009f31:	56                   	push   esi
c0009f32:	e8 2d 66 ff ff       	call   c0000564 <strcpy>
c0009f37:	5a                   	pop    edx
c0009f38:	59                   	pop    ecx
c0009f39:	68 83 f3 01 c0       	push   0xc001f383
c0009f3e:	56                   	push   esi
c0009f3f:	e8 60 67 ff ff       	call   c00006a4 <strcat>
c0009f44:	5d                   	pop    ebp
c0009f45:	58                   	pop    eax
c0009f46:	57                   	push   edi
c0009f47:	56                   	push   esi
c0009f48:	e8 57 67 ff ff       	call   c00006a4 <strcat>
c0009f4d:	83 c4 10             	add    esp,0x10
c0009f50:	8a 04 24             	mov    al,BYTE PTR [esp]
c0009f53:	3c 60                	cmp    al,0x60
c0009f55:	7e 03                	jle    c0009f5a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0009f57:	83 e8 20             	sub    eax,0x20
c0009f5a:	88 04 24             	mov    BYTE PTR [esp],al
c0009f5d:	88 03                	mov    BYTE PTR [ebx],al
c0009f5f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0009f66:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0009f6c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0009f70:	bf 03 00 00 00       	mov    edi,0x3
c0009f75:	b8 03 00 00 00       	mov    eax,0x3
c0009f7a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0009f7d:	84 d2                	test   dl,dl
c0009f7f:	0f 84 91 00 00 00    	je     c000a016 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0009f85:	8d 4f 01             	lea    ecx,[edi+0x1]
c0009f88:	80 fa 5c             	cmp    dl,0x5c
c0009f8b:	74 05                	je     c0009f92 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0009f8d:	80 fa 2f             	cmp    dl,0x2f
c0009f90:	75 12                	jne    c0009fa4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0009f92:	89 c5                	mov    ebp,eax
c0009f94:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0009f99:	74 09                	je     c0009fa4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0009f9b:	40                   	inc    eax
c0009f9c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0009fa0:	89 cf                	mov    edi,ecx
c0009fa2:	eb d6                	jmp    c0009f7a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0009fa4:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0009fa9:	75 5b                	jne    c000a006 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0009fab:	80 fa 2e             	cmp    dl,0x2e
c0009fae:	75 56                	jne    c000a006 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0009fb0:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0009fb4:	74 19                	je     c0009fcf <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0009fb6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0009fbb:	74 53                	je     c000a010 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0009fbd:	89 f9                	mov    ecx,edi
c0009fbf:	41                   	inc    ecx
c0009fc0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0009fc3:	80 fa 2f             	cmp    dl,0x2f
c0009fc6:	74 f7                	je     c0009fbf <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0009fc8:	80 fa 5c             	cmp    dl,0x5c
c0009fcb:	74 f2                	je     c0009fbf <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0009fcd:	eb d1                	jmp    c0009fa0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009fcf:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0009fd4:	74 3a                	je     c000a010 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0009fd6:	83 f8 03             	cmp    eax,0x3
c0009fd9:	74 c5                	je     c0009fa0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009fdb:	41                   	inc    ecx
c0009fdc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0009fdf:	80 fa 2f             	cmp    dl,0x2f
c0009fe2:	74 f7                	je     c0009fdb <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0009fe4:	80 fa 5c             	cmp    dl,0x5c
c0009fe7:	74 f2                	je     c0009fdb <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0009fe9:	48                   	dec    eax
c0009fea:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0009fee:	75 06                	jne    c0009ff6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0009ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009ff4:	eb f3                	jmp    c0009fe9 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0009ff6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0009ffa:	74 07                	je     c000a003 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0009ffc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a000:	48                   	dec    eax
c000a001:	eb f3                	jmp    c0009ff6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a003:	40                   	inc    eax
c000a004:	eb 9a                	jmp    c0009fa0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a006:	80 fa 2f             	cmp    dl,0x2f
c000a009:	74 95                	je     c0009fa0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a00b:	80 fa 5c             	cmp    dl,0x5c
c000a00e:	74 90                	je     c0009fa0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a010:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000a013:	40                   	inc    eax
c000a014:	eb 8a                	jmp    c0009fa0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a016:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a01a:	83 ec 0c             	sub    esp,0xc
c000a01d:	53                   	push   ebx
c000a01e:	e8 a1 64 ff ff       	call   c00004c4 <strlen>
c000a023:	83 c4 10             	add    esp,0x10
c000a026:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000a02b:	75 26                	jne    c000a053 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000a02d:	83 ec 0c             	sub    esp,0xc
c000a030:	53                   	push   ebx
c000a031:	e8 8e 64 ff ff       	call   c00004c4 <strlen>
c000a036:	83 c4 10             	add    esp,0x10
c000a039:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000a03e:	74 26                	je     c000a066 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000a040:	83 ec 0c             	sub    esp,0xc
c000a043:	53                   	push   ebx
c000a044:	e8 7b 64 ff ff       	call   c00004c4 <strlen>
c000a049:	83 c4 10             	add    esp,0x10
c000a04c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000a051:	eb c7                	jmp    c000a01a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000a053:	83 ec 0c             	sub    esp,0xc
c000a056:	53                   	push   ebx
c000a057:	e8 68 64 ff ff       	call   c00004c4 <strlen>
c000a05c:	83 c4 10             	add    esp,0x10
c000a05f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000a064:	74 c7                	je     c000a02d <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000a066:	81 c4 0c 04 00 00    	add    esp,0x40c
c000a06c:	5b                   	pop    ebx
c000a06d:	5e                   	pop    esi
c000a06e:	5f                   	pop    edi
c000a06f:	5d                   	pop    ebp
c000a070:	c3                   	ret    
c000a071:	90                   	nop

c000a072 <File::File(char const*, Process*)>:
c000a072:	83 ec 0c             	sub    esp,0xc
c000a075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a079:	83 ec 08             	sub    esp,0x8
c000a07c:	6a 00                	push   0x0
c000a07e:	50                   	push   eax
c000a07f:	e8 de e3 ff ff       	call   c0008462 <UnixFile::UnixFile(int)>
c000a084:	83 c4 10             	add    esp,0x10
c000a087:	ba cc e5 01 c0       	mov    edx,0xc001e5cc
c000a08c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a090:	89 10                	mov    DWORD PTR [eax],edx
c000a092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a096:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000a09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0a0:	83 c0 0d             	add    eax,0xd
c000a0a3:	83 ec 04             	sub    esp,0x4
c000a0a6:	52                   	push   edx
c000a0a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ab:	50                   	push   eax
c000a0ac:	e8 17 fe ff ff       	call   c0009ec8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000a0b1:	83 c4 10             	add    esp,0x10
c000a0b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0b8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000a0bb:	8d 50 bf             	lea    edx,[eax-0x41]
c000a0be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0c2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000a0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0cc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000a0d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0d4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a0da:	0f b6 c0             	movzx  eax,al
c000a0dd:	8b 04 85 20 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd2e0]
c000a0e4:	85 c0                	test   eax,eax
c000a0e6:	74 3e                	je     c000a126 <File::File(char const*, Process*)+0xb4>
c000a0e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0ec:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a0f2:	0f b6 c0             	movzx  eax,al
c000a0f5:	8b 04 85 20 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd2e0]
c000a0fc:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a102:	85 c0                	test   eax,eax
c000a104:	75 20                	jne    c000a126 <File::File(char const*, Process*)+0xb4>
c000a106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a10a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a110:	0f b6 c0             	movzx  eax,al
c000a113:	8b 04 85 20 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd2e0]
c000a11a:	83 ec 0c             	sub    esp,0xc
c000a11d:	50                   	push   eax
c000a11e:	e8 c5 1f 00 00       	call   c000c0e8 <LogicalDisk::mount()>
c000a123:	83 c4 10             	add    esp,0x10
c000a126:	90                   	nop
c000a127:	83 c4 0c             	add    esp,0xc
c000a12a:	c3                   	ret    
c000a12b:	90                   	nop

c000a12c <File::open(FileOpenMode)>:
c000a12c:	53                   	push   ebx
c000a12d:	b8 0b 00 00 00       	mov    eax,0xb
c000a132:	83 ec 08             	sub    esp,0x8
c000a135:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a139:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000a140:	80 fa 19             	cmp    dl,0x19
c000a143:	77 40                	ja     c000a185 <File::open(FileOpenMode)+0x59>
c000a145:	8b 14 95 20 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd2e0]
c000a14c:	85 d2                	test   edx,edx
c000a14e:	74 35                	je     c000a185 <File::open(FileOpenMode)+0x59>
c000a150:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a156:	85 d2                	test   edx,edx
c000a158:	74 2b                	je     c000a185 <File::open(FileOpenMode)+0x59>
c000a15a:	b8 06 00 00 00       	mov    eax,0x6
c000a15f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000a163:	75 20                	jne    c000a185 <File::open(FileOpenMode)+0x59>
c000a165:	8b 02                	mov    eax,DWORD PTR [edx]
c000a167:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000a16d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a171:	51                   	push   ecx
c000a172:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000a175:	51                   	push   ecx
c000a176:	52                   	push   edx
c000a177:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000a17a:	83 c4 10             	add    esp,0x10
c000a17d:	85 c0                	test   eax,eax
c000a17f:	75 04                	jne    c000a185 <File::open(FileOpenMode)+0x59>
c000a181:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000a185:	83 c4 08             	add    esp,0x8
c000a188:	5b                   	pop    ebx
c000a189:	c3                   	ret    

c000a18a <File::close()>:
c000a18a:	53                   	push   ebx
c000a18b:	b8 0b 00 00 00       	mov    eax,0xb
c000a190:	83 ec 08             	sub    esp,0x8
c000a193:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a197:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a19e:	80 fa 19             	cmp    dl,0x19
c000a1a1:	77 41                	ja     c000a1e4 <File::close()+0x5a>
c000a1a3:	8b 1c 95 20 2d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd2e0]
c000a1aa:	85 db                	test   ebx,ebx
c000a1ac:	74 36                	je     c000a1e4 <File::close()+0x5a>
c000a1ae:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000a1b5:	74 2d                	je     c000a1e4 <File::close()+0x5a>
c000a1b7:	b8 05 00 00 00       	mov    eax,0x5
c000a1bc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000a1c0:	74 22                	je     c000a1e4 <File::close()+0x5a>
c000a1c2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000a1c6:	8b 04 95 20 2d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd2e0]
c000a1cd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a1d3:	53                   	push   ebx
c000a1d4:	53                   	push   ebx
c000a1d5:	8b 10                	mov    edx,DWORD PTR [eax]
c000a1d7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000a1dd:	50                   	push   eax
c000a1de:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000a1e1:	83 c4 10             	add    esp,0x10
c000a1e4:	83 c4 08             	add    esp,0x8
c000a1e7:	5b                   	pop    ebx
c000a1e8:	c3                   	ret    
c000a1e9:	90                   	nop

c000a1ea <File::seek(unsigned long long)>:
c000a1ea:	56                   	push   esi
c000a1eb:	53                   	push   ebx
c000a1ec:	b8 0b 00 00 00       	mov    eax,0xb
c000a1f1:	51                   	push   ecx
c000a1f2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a1f6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a1fa:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000a201:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a205:	80 fa 19             	cmp    dl,0x19
c000a208:	77 31                	ja     c000a23b <File::seek(unsigned long long)+0x51>
c000a20a:	8b 14 95 20 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd2e0]
c000a211:	85 d2                	test   edx,edx
c000a213:	74 26                	je     c000a23b <File::seek(unsigned long long)+0x51>
c000a215:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a21b:	85 d2                	test   edx,edx
c000a21d:	74 1c                	je     c000a23b <File::seek(unsigned long long)+0x51>
c000a21f:	b8 05 00 00 00       	mov    eax,0x5
c000a224:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000a228:	74 11                	je     c000a23b <File::seek(unsigned long long)+0x51>
c000a22a:	8b 02                	mov    eax,DWORD PTR [edx]
c000a22c:	53                   	push   ebx
c000a22d:	51                   	push   ecx
c000a22e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000a234:	52                   	push   edx
c000a235:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	5a                   	pop    edx
c000a23c:	5b                   	pop    ebx
c000a23d:	5e                   	pop    esi
c000a23e:	c3                   	ret    
c000a23f:	90                   	nop

c000a240 <File::tell(unsigned long long*)>:
c000a240:	83 ec 0c             	sub    esp,0xc
c000a243:	b8 0b 00 00 00       	mov    eax,0xb
c000a248:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a24c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a253:	80 fa 19             	cmp    dl,0x19
c000a256:	77 34                	ja     c000a28c <File::tell(unsigned long long*)+0x4c>
c000a258:	8b 14 95 20 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd2e0]
c000a25f:	85 d2                	test   edx,edx
c000a261:	74 29                	je     c000a28c <File::tell(unsigned long long*)+0x4c>
c000a263:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a269:	85 d2                	test   edx,edx
c000a26b:	74 1f                	je     c000a28c <File::tell(unsigned long long*)+0x4c>
c000a26d:	b8 05 00 00 00       	mov    eax,0x5
c000a272:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000a276:	74 14                	je     c000a28c <File::tell(unsigned long long*)+0x4c>
c000a278:	50                   	push   eax
c000a279:	8b 02                	mov    eax,DWORD PTR [edx]
c000a27b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a27f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000a285:	52                   	push   edx
c000a286:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000a289:	83 c4 10             	add    esp,0x10
c000a28c:	83 c4 0c             	add    esp,0xc
c000a28f:	c3                   	ret    

c000a290 <File::rewind()>:
c000a290:	83 ec 10             	sub    esp,0x10
c000a293:	6a 00                	push   0x0
c000a295:	6a 00                	push   0x0
c000a297:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a29b:	e8 4a ff ff ff       	call   c000a1ea <File::seek(unsigned long long)>
c000a2a0:	83 c4 1c             	add    esp,0x1c
c000a2a3:	c3                   	ret    

c000a2a4 <File::unlink()>:
c000a2a4:	83 ec 0c             	sub    esp,0xc
c000a2a7:	b8 0b 00 00 00       	mov    eax,0xb
c000a2ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a2b0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a2b7:	80 f9 19             	cmp    cl,0x19
c000a2ba:	77 2f                	ja     c000a2eb <File::unlink()+0x47>
c000a2bc:	8b 0c 8d 20 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd2e0]
c000a2c3:	85 c9                	test   ecx,ecx
c000a2c5:	74 24                	je     c000a2eb <File::unlink()+0x47>
c000a2c7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a2cd:	85 c9                	test   ecx,ecx
c000a2cf:	74 1a                	je     c000a2eb <File::unlink()+0x47>
c000a2d1:	b8 06 00 00 00       	mov    eax,0x6
c000a2d6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a2da:	75 0f                	jne    c000a2eb <File::unlink()+0x47>
c000a2dc:	83 c2 0d             	add    edx,0xd
c000a2df:	50                   	push   eax
c000a2e0:	50                   	push   eax
c000a2e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a2e3:	52                   	push   edx
c000a2e4:	51                   	push   ecx
c000a2e5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000a2e8:	83 c4 10             	add    esp,0x10
c000a2eb:	83 c4 0c             	add    esp,0xc
c000a2ee:	c3                   	ret    
c000a2ef:	90                   	nop

c000a2f0 <File::rename(char const*)>:
c000a2f0:	83 ec 0c             	sub    esp,0xc
c000a2f3:	b8 0b 00 00 00       	mov    eax,0xb
c000a2f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a2fc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a303:	80 f9 19             	cmp    cl,0x19
c000a306:	77 32                	ja     c000a33a <File::rename(char const*)+0x4a>
c000a308:	8b 0c 8d 20 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd2e0]
c000a30f:	85 c9                	test   ecx,ecx
c000a311:	74 27                	je     c000a33a <File::rename(char const*)+0x4a>
c000a313:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a319:	85 c9                	test   ecx,ecx
c000a31b:	74 1d                	je     c000a33a <File::rename(char const*)+0x4a>
c000a31d:	b8 06 00 00 00       	mov    eax,0x6
c000a322:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a326:	75 12                	jne    c000a33a <File::rename(char const*)+0x4a>
c000a328:	83 c2 0d             	add    edx,0xd
c000a32b:	50                   	push   eax
c000a32c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a32e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a332:	52                   	push   edx
c000a333:	51                   	push   ecx
c000a334:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000a337:	83 c4 10             	add    esp,0x10
c000a33a:	83 c4 0c             	add    esp,0xc
c000a33d:	c3                   	ret    

c000a33e <File::chfatattr(unsigned char, unsigned char)>:
c000a33e:	57                   	push   edi
c000a33f:	b8 0b 00 00 00       	mov    eax,0xb
c000a344:	56                   	push   esi
c000a345:	53                   	push   ebx
c000a346:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a34a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a34e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a355:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000a359:	80 f9 19             	cmp    cl,0x19
c000a35c:	77 37                	ja     c000a395 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a35e:	8b 0c 8d 20 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd2e0]
c000a365:	85 c9                	test   ecx,ecx
c000a367:	74 2c                	je     c000a395 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a369:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a36f:	85 c9                	test   ecx,ecx
c000a371:	74 22                	je     c000a395 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a373:	b8 06 00 00 00       	mov    eax,0x6
c000a378:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a37c:	75 17                	jne    c000a395 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a37e:	8b 39                	mov    edi,DWORD PTR [ecx]
c000a380:	89 f0                	mov    eax,esi
c000a382:	83 c2 0d             	add    edx,0xd
c000a385:	0f b6 f0             	movzx  esi,al
c000a388:	0f b6 db             	movzx  ebx,bl
c000a38b:	56                   	push   esi
c000a38c:	53                   	push   ebx
c000a38d:	52                   	push   edx
c000a38e:	51                   	push   ecx
c000a38f:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000a392:	83 c4 10             	add    esp,0x10
c000a395:	5b                   	pop    ebx
c000a396:	5e                   	pop    esi
c000a397:	5f                   	pop    edi
c000a398:	c3                   	ret    
c000a399:	90                   	nop

c000a39a <File::exists()>:
c000a39a:	83 ec 0c             	sub    esp,0xc
c000a39d:	31 c0                	xor    eax,eax
c000a39f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a3a3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a3aa:	80 f9 19             	cmp    cl,0x19
c000a3ad:	77 24                	ja     c000a3d3 <File::exists()+0x39>
c000a3af:	8b 0c 8d 20 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd2e0]
c000a3b6:	85 c9                	test   ecx,ecx
c000a3b8:	74 19                	je     c000a3d3 <File::exists()+0x39>
c000a3ba:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a3c0:	85 c9                	test   ecx,ecx
c000a3c2:	74 0f                	je     c000a3d3 <File::exists()+0x39>
c000a3c4:	83 c2 0d             	add    edx,0xd
c000a3c7:	50                   	push   eax
c000a3c8:	50                   	push   eax
c000a3c9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a3cb:	52                   	push   edx
c000a3cc:	51                   	push   ecx
c000a3cd:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000a3d0:	83 c4 10             	add    esp,0x10
c000a3d3:	83 c4 0c             	add    esp,0xc
c000a3d6:	c3                   	ret    
c000a3d7:	90                   	nop

c000a3d8 <File::stat(unsigned long long*, bool*)>:
c000a3d8:	56                   	push   esi
c000a3d9:	53                   	push   ebx
c000a3da:	50                   	push   eax
c000a3db:	b8 0b 00 00 00       	mov    eax,0xb
c000a3e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a3e4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a3e8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a3ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a3f3:	80 f9 19             	cmp    cl,0x19
c000a3f6:	77 3d                	ja     c000a435 <File::stat(unsigned long long*, bool*)+0x5d>
c000a3f8:	8b 0c 8d 20 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd2e0]
c000a3ff:	85 c9                	test   ecx,ecx
c000a401:	74 32                	je     c000a435 <File::stat(unsigned long long*, bool*)+0x5d>
c000a403:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a409:	85 c9                	test   ecx,ecx
c000a40b:	74 28                	je     c000a435 <File::stat(unsigned long long*, bool*)+0x5d>
c000a40d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a40f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a413:	74 13                	je     c000a428 <File::stat(unsigned long long*, bool*)+0x50>
c000a415:	83 ec 04             	sub    esp,0x4
c000a418:	56                   	push   esi
c000a419:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000a41f:	51                   	push   ecx
c000a420:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000a423:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a426:	eb 0a                	jmp    c000a432 <File::stat(unsigned long long*, bool*)+0x5a>
c000a428:	53                   	push   ebx
c000a429:	83 c2 0d             	add    edx,0xd
c000a42c:	56                   	push   esi
c000a42d:	52                   	push   edx
c000a42e:	51                   	push   ecx
c000a42f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000a432:	83 c4 10             	add    esp,0x10
c000a435:	5a                   	pop    edx
c000a436:	5b                   	pop    ebx
c000a437:	5e                   	pop    esi
c000a438:	c3                   	ret    

c000a439 <Fs::setcwd(Process*, char*)>:
c000a439:	55                   	push   ebp
c000a43a:	57                   	push   edi
c000a43b:	56                   	push   esi
c000a43c:	53                   	push   ebx
c000a43d:	81 ec 20 02 00 00    	sub    esp,0x220
c000a443:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000a44a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000a450:	57                   	push   edi
c000a451:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000a458:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000a45c:	56                   	push   esi
c000a45d:	e8 66 fa ff ff       	call   c0009ec8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000a462:	89 34 24             	mov    DWORD PTR [esp],esi
c000a465:	e8 5a 60 ff ff       	call   c00004c4 <strlen>
c000a46a:	83 c4 10             	add    esp,0x10
c000a46d:	83 f8 02             	cmp    eax,0x2
c000a470:	77 15                	ja     c000a487 <Fs::setcwd(Process*, char*)+0x4e>
c000a472:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000a477:	83 eb 41             	sub    ebx,0x41
c000a47a:	8b 04 9d 20 2d 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd2e0]
c000a481:	85 c0                	test   eax,eax
c000a483:	75 1c                	jne    c000a4a1 <Fs::setcwd(Process*, char*)+0x68>
c000a485:	eb 2f                	jmp    c000a4b6 <Fs::setcwd(Process*, char*)+0x7d>
c000a487:	83 ec 0c             	sub    esp,0xc
c000a48a:	56                   	push   esi
c000a48b:	e8 34 60 ff ff       	call   c00004c4 <strlen>
c000a490:	83 c4 10             	add    esp,0x10
c000a493:	83 f8 03             	cmp    eax,0x3
c000a496:	75 57                	jne    c000a4ef <Fs::setcwd(Process*, char*)+0xb6>
c000a498:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000a49d:	75 50                	jne    c000a4ef <Fs::setcwd(Process*, char*)+0xb6>
c000a49f:	eb d1                	jmp    c000a472 <Fs::setcwd(Process*, char*)+0x39>
c000a4a1:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000a4a8:	75 0c                	jne    c000a4b6 <Fs::setcwd(Process*, char*)+0x7d>
c000a4aa:	83 ec 0c             	sub    esp,0xc
c000a4ad:	50                   	push   eax
c000a4ae:	e8 35 1c 00 00       	call   c000c0e8 <LogicalDisk::mount()>
c000a4b3:	83 c4 10             	add    esp,0x10
c000a4b6:	b8 03 00 00 00       	mov    eax,0x3
c000a4bb:	83 fb 19             	cmp    ebx,0x19
c000a4be:	0f 87 c6 00 00 00    	ja     c000a58a <Fs::setcwd(Process*, char*)+0x151>
c000a4c4:	8b 14 9d 20 2d 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdd2e0]
c000a4cb:	b8 05 00 00 00       	mov    eax,0x5
c000a4d0:	85 d2                	test   edx,edx
c000a4d2:	0f 84 b2 00 00 00    	je     c000a58a <Fs::setcwd(Process*, char*)+0x151>
c000a4d8:	b8 06 00 00 00       	mov    eax,0x6
c000a4dd:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000a4e4:	0f 85 92 00 00 00    	jne    c000a57c <Fs::setcwd(Process*, char*)+0x143>
c000a4ea:	e9 9b 00 00 00       	jmp    c000a58a <Fs::setcwd(Process*, char*)+0x151>
c000a4ef:	83 ec 0c             	sub    esp,0xc
c000a4f2:	68 14 01 00 00       	push   0x114
c000a4f7:	e8 81 c8 ff ff       	call   c0006d7d <malloc>
c000a4fc:	83 c4 0c             	add    esp,0xc
c000a4ff:	89 c3                	mov    ebx,eax
c000a501:	55                   	push   ebp
c000a502:	56                   	push   esi
c000a503:	50                   	push   eax
c000a504:	e8 69 fb ff ff       	call   c000a072 <File::File(char const*, Process*)>
c000a509:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a50e:	83 c4 0c             	add    esp,0xc
c000a511:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000a515:	50                   	push   eax
c000a516:	8d 44 24 10          	lea    eax,[esp+0x10]
c000a51a:	50                   	push   eax
c000a51b:	53                   	push   ebx
c000a51c:	e8 b7 fe ff ff       	call   c000a3d8 <File::stat(unsigned long long*, bool*)>
c000a521:	83 c4 10             	add    esp,0x10
c000a524:	83 f8 02             	cmp    eax,0x2
c000a527:	74 04                	je     c000a52d <Fs::setcwd(Process*, char*)+0xf4>
c000a529:	85 c0                	test   eax,eax
c000a52b:	74 1c                	je     c000a549 <Fs::setcwd(Process*, char*)+0x110>
c000a52d:	b8 01 00 00 00       	mov    eax,0x1
c000a532:	85 db                	test   ebx,ebx
c000a534:	74 54                	je     c000a58a <Fs::setcwd(Process*, char*)+0x151>
c000a536:	83 ec 0c             	sub    esp,0xc
c000a539:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a53b:	53                   	push   ebx
c000a53c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a53f:	83 c4 10             	add    esp,0x10
c000a542:	b8 01 00 00 00       	mov    eax,0x1
c000a547:	eb 41                	jmp    c000a58a <Fs::setcwd(Process*, char*)+0x151>
c000a549:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000a54e:	75 1c                	jne    c000a56c <Fs::setcwd(Process*, char*)+0x133>
c000a550:	b8 02 00 00 00       	mov    eax,0x2
c000a555:	85 db                	test   ebx,ebx
c000a557:	74 31                	je     c000a58a <Fs::setcwd(Process*, char*)+0x151>
c000a559:	83 ec 0c             	sub    esp,0xc
c000a55c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a55e:	53                   	push   ebx
c000a55f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a562:	83 c4 10             	add    esp,0x10
c000a565:	b8 02 00 00 00       	mov    eax,0x2
c000a56a:	eb 1e                	jmp    c000a58a <Fs::setcwd(Process*, char*)+0x151>
c000a56c:	85 db                	test   ebx,ebx
c000a56e:	74 0c                	je     c000a57c <Fs::setcwd(Process*, char*)+0x143>
c000a570:	83 ec 0c             	sub    esp,0xc
c000a573:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a575:	53                   	push   ebx
c000a576:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a579:	83 c4 10             	add    esp,0x10
c000a57c:	50                   	push   eax
c000a57d:	50                   	push   eax
c000a57e:	56                   	push   esi
c000a57f:	57                   	push   edi
c000a580:	e8 df 5f ff ff       	call   c0000564 <strcpy>
c000a585:	83 c4 10             	add    esp,0x10
c000a588:	31 c0                	xor    eax,eax
c000a58a:	81 c4 1c 02 00 00    	add    esp,0x21c
c000a590:	5b                   	pop    ebx
c000a591:	5e                   	pop    esi
c000a592:	5f                   	pop    edi
c000a593:	5d                   	pop    ebp
c000a594:	c3                   	ret    
c000a595:	90                   	nop

c000a596 <Directory::Directory(char const*, Process*)>:
c000a596:	83 ec 0c             	sub    esp,0xc
c000a599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a59d:	83 ec 08             	sub    esp,0x8
c000a5a0:	6a 00                	push   0x0
c000a5a2:	50                   	push   eax
c000a5a3:	e8 ba de ff ff       	call   c0008462 <UnixFile::UnixFile(int)>
c000a5a8:	83 c4 10             	add    esp,0x10
c000a5ab:	ba e8 e5 01 c0       	mov    edx,0xc001e5e8
c000a5b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a5b4:	89 10                	mov    DWORD PTR [eax],edx
c000a5b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a5ba:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000a5c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a5c4:	83 c0 0d             	add    eax,0xd
c000a5c7:	83 ec 04             	sub    esp,0x4
c000a5ca:	52                   	push   edx
c000a5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a5cf:	50                   	push   eax
c000a5d0:	e8 f3 f8 ff ff       	call   c0009ec8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000a5d5:	83 c4 10             	add    esp,0x10
c000a5d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a5dc:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000a5df:	8d 50 bf             	lea    edx,[eax-0x41]
c000a5e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a5e6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000a5ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a5f0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000a5f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a5f8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a5fe:	0f b6 c0             	movzx  eax,al
c000a601:	8b 04 85 20 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd2e0]
c000a608:	85 c0                	test   eax,eax
c000a60a:	74 3e                	je     c000a64a <Directory::Directory(char const*, Process*)+0xb4>
c000a60c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a610:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a616:	0f b6 c0             	movzx  eax,al
c000a619:	8b 04 85 20 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd2e0]
c000a620:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a626:	85 c0                	test   eax,eax
c000a628:	75 20                	jne    c000a64a <Directory::Directory(char const*, Process*)+0xb4>
c000a62a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a62e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a634:	0f b6 c0             	movzx  eax,al
c000a637:	8b 04 85 20 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd2e0]
c000a63e:	83 ec 0c             	sub    esp,0xc
c000a641:	50                   	push   eax
c000a642:	e8 a1 1a 00 00       	call   c000c0e8 <LogicalDisk::mount()>
c000a647:	83 c4 10             	add    esp,0x10
c000a64a:	90                   	nop
c000a64b:	83 c4 0c             	add    esp,0xc
c000a64e:	c3                   	ret    
c000a64f:	90                   	nop

c000a650 <Directory::open()>:
c000a650:	53                   	push   ebx
c000a651:	b8 0b 00 00 00       	mov    eax,0xb
c000a656:	83 ec 08             	sub    esp,0x8
c000a659:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a65d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000a664:	80 fa 19             	cmp    dl,0x19
c000a667:	77 3d                	ja     c000a6a6 <Directory::open()+0x56>
c000a669:	8b 14 95 20 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd2e0]
c000a670:	85 d2                	test   edx,edx
c000a672:	74 32                	je     c000a6a6 <Directory::open()+0x56>
c000a674:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a67a:	85 d2                	test   edx,edx
c000a67c:	74 28                	je     c000a6a6 <Directory::open()+0x56>
c000a67e:	b8 06 00 00 00       	mov    eax,0x6
c000a683:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000a687:	75 1d                	jne    c000a6a6 <Directory::open()+0x56>
c000a689:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000a68f:	50                   	push   eax
c000a690:	8b 02                	mov    eax,DWORD PTR [edx]
c000a692:	51                   	push   ecx
c000a693:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000a696:	51                   	push   ecx
c000a697:	52                   	push   edx
c000a698:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000a69b:	83 c4 10             	add    esp,0x10
c000a69e:	85 c0                	test   eax,eax
c000a6a0:	75 04                	jne    c000a6a6 <Directory::open()+0x56>
c000a6a2:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000a6a6:	83 c4 08             	add    esp,0x8
c000a6a9:	5b                   	pop    ebx
c000a6aa:	c3                   	ret    
c000a6ab:	90                   	nop

c000a6ac <Directory::close()>:
c000a6ac:	53                   	push   ebx
c000a6ad:	b8 0b 00 00 00       	mov    eax,0xb
c000a6b2:	83 ec 08             	sub    esp,0x8
c000a6b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a6b9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a6c0:	80 fa 19             	cmp    dl,0x19
c000a6c3:	77 41                	ja     c000a706 <Directory::close()+0x5a>
c000a6c5:	8b 1c 95 20 2d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd2e0]
c000a6cc:	85 db                	test   ebx,ebx
c000a6ce:	74 36                	je     c000a706 <Directory::close()+0x5a>
c000a6d0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000a6d7:	74 2d                	je     c000a706 <Directory::close()+0x5a>
c000a6d9:	b8 05 00 00 00       	mov    eax,0x5
c000a6de:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000a6e2:	74 22                	je     c000a706 <Directory::close()+0x5a>
c000a6e4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000a6e8:	8b 04 95 20 2d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd2e0]
c000a6ef:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a6f5:	53                   	push   ebx
c000a6f6:	53                   	push   ebx
c000a6f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a6f9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000a6ff:	50                   	push   eax
c000a700:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000a703:	83 c4 10             	add    esp,0x10
c000a706:	83 c4 08             	add    esp,0x8
c000a709:	5b                   	pop    ebx
c000a70a:	c3                   	ret    
c000a70b:	90                   	nop

c000a70c <Directory::unlink()>:
c000a70c:	83 ec 0c             	sub    esp,0xc
c000a70f:	b8 0b 00 00 00       	mov    eax,0xb
c000a714:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a718:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a71f:	80 f9 19             	cmp    cl,0x19
c000a722:	77 2f                	ja     c000a753 <Directory::unlink()+0x47>
c000a724:	8b 0c 8d 20 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd2e0]
c000a72b:	85 c9                	test   ecx,ecx
c000a72d:	74 24                	je     c000a753 <Directory::unlink()+0x47>
c000a72f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a735:	85 c9                	test   ecx,ecx
c000a737:	74 1a                	je     c000a753 <Directory::unlink()+0x47>
c000a739:	b8 06 00 00 00       	mov    eax,0x6
c000a73e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a742:	75 0f                	jne    c000a753 <Directory::unlink()+0x47>
c000a744:	83 c2 0d             	add    edx,0xd
c000a747:	50                   	push   eax
c000a748:	50                   	push   eax
c000a749:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a74b:	52                   	push   edx
c000a74c:	51                   	push   ecx
c000a74d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000a750:	83 c4 10             	add    esp,0x10
c000a753:	83 c4 0c             	add    esp,0xc
c000a756:	c3                   	ret    
c000a757:	90                   	nop

c000a758 <Directory::rename(char const*)>:
c000a758:	83 ec 0c             	sub    esp,0xc
c000a75b:	b8 0b 00 00 00       	mov    eax,0xb
c000a760:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a764:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a76b:	80 f9 19             	cmp    cl,0x19
c000a76e:	77 32                	ja     c000a7a2 <Directory::rename(char const*)+0x4a>
c000a770:	8b 0c 8d 20 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd2e0]
c000a777:	85 c9                	test   ecx,ecx
c000a779:	74 27                	je     c000a7a2 <Directory::rename(char const*)+0x4a>
c000a77b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a781:	85 c9                	test   ecx,ecx
c000a783:	74 1d                	je     c000a7a2 <Directory::rename(char const*)+0x4a>
c000a785:	b8 06 00 00 00       	mov    eax,0x6
c000a78a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a78e:	75 12                	jne    c000a7a2 <Directory::rename(char const*)+0x4a>
c000a790:	83 c2 0d             	add    edx,0xd
c000a793:	50                   	push   eax
c000a794:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a796:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a79a:	52                   	push   edx
c000a79b:	51                   	push   ecx
c000a79c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000a79f:	83 c4 10             	add    esp,0x10
c000a7a2:	83 c4 0c             	add    esp,0xc
c000a7a5:	c3                   	ret    

c000a7a6 <Directory::exists()>:
c000a7a6:	83 ec 0c             	sub    esp,0xc
c000a7a9:	31 c0                	xor    eax,eax
c000a7ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a7af:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a7b6:	80 f9 19             	cmp    cl,0x19
c000a7b9:	77 24                	ja     c000a7df <Directory::exists()+0x39>
c000a7bb:	8b 0c 8d 20 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd2e0]
c000a7c2:	85 c9                	test   ecx,ecx
c000a7c4:	74 19                	je     c000a7df <Directory::exists()+0x39>
c000a7c6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a7cc:	85 c9                	test   ecx,ecx
c000a7ce:	74 0f                	je     c000a7df <Directory::exists()+0x39>
c000a7d0:	83 c2 0d             	add    edx,0xd
c000a7d3:	50                   	push   eax
c000a7d4:	50                   	push   eax
c000a7d5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a7d7:	52                   	push   edx
c000a7d8:	51                   	push   ecx
c000a7d9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000a7dc:	83 c4 10             	add    esp,0x10
c000a7df:	83 c4 0c             	add    esp,0xc
c000a7e2:	c3                   	ret    
c000a7e3:	90                   	nop

c000a7e4 <Directory::read(dirent*)>:
c000a7e4:	83 ec 1c             	sub    esp,0x1c
c000a7e7:	b8 0b 00 00 00       	mov    eax,0xb
c000a7ec:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a7f0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a7f7:	80 fa 19             	cmp    dl,0x19
c000a7fa:	77 30                	ja     c000a82c <Directory::read(dirent*)+0x48>
c000a7fc:	8b 14 95 20 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd2e0]
c000a803:	85 d2                	test   edx,edx
c000a805:	74 25                	je     c000a82c <Directory::read(dirent*)+0x48>
c000a807:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000a80e:	74 1c                	je     c000a82c <Directory::read(dirent*)+0x48>
c000a810:	83 ec 0c             	sub    esp,0xc
c000a813:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a815:	8d 54 24 18          	lea    edx,[esp+0x18]
c000a819:	52                   	push   edx
c000a81a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a81e:	6a 00                	push   0x0
c000a820:	68 10 01 00 00       	push   0x110
c000a825:	51                   	push   ecx
c000a826:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000a829:	83 c4 20             	add    esp,0x20
c000a82c:	83 c4 1c             	add    esp,0x1c
c000a82f:	c3                   	ret    

c000a830 <Directory::create()>:
c000a830:	83 ec 0c             	sub    esp,0xc
c000a833:	b8 0b 00 00 00       	mov    eax,0xb
c000a838:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a83c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a843:	80 f9 19             	cmp    cl,0x19
c000a846:	77 2f                	ja     c000a877 <Directory::create()+0x47>
c000a848:	8b 0c 8d 20 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd2e0]
c000a84f:	85 c9                	test   ecx,ecx
c000a851:	74 24                	je     c000a877 <Directory::create()+0x47>
c000a853:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a859:	85 c9                	test   ecx,ecx
c000a85b:	74 1a                	je     c000a877 <Directory::create()+0x47>
c000a85d:	b8 06 00 00 00       	mov    eax,0x6
c000a862:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a866:	75 0f                	jne    c000a877 <Directory::create()+0x47>
c000a868:	83 c2 0d             	add    edx,0xd
c000a86b:	50                   	push   eax
c000a86c:	50                   	push   eax
c000a86d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a86f:	52                   	push   edx
c000a870:	51                   	push   ecx
c000a871:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000a874:	83 c4 10             	add    esp,0x10
c000a877:	83 c4 0c             	add    esp,0xc
c000a87a:	c3                   	ret    
c000a87b:	90                   	nop

c000a87c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000a87c:	b8 0a 00 00 00       	mov    eax,0xa
c000a881:	c3                   	ret    
c000a882:	66 90                	xchg   ax,ax

c000a884 <Bus::Bus(char const*)>:
c000a884:	83 ec 0c             	sub    esp,0xc
c000a887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a88b:	83 ec 08             	sub    esp,0x8
c000a88e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a892:	50                   	push   eax
c000a893:	e8 2a 08 00 00       	call   c000b0c2 <Device::Device(char const*)>
c000a898:	83 c4 10             	add    esp,0x10
c000a89b:	ba 04 e6 01 c0       	mov    edx,0xc001e604
c000a8a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8a4:	89 10                	mov    DWORD PTR [eax],edx
c000a8a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8aa:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000a8b4:	90                   	nop
c000a8b5:	83 c4 0c             	add    esp,0xc
c000a8b8:	c3                   	ret    
c000a8b9:	90                   	nop
c000a8ba:	66 90                	xchg   ax,ax

c000a8bc <Bus::~Bus()>:
c000a8bc:	83 ec 0c             	sub    esp,0xc
c000a8bf:	ba 04 e6 01 c0       	mov    edx,0xc001e604
c000a8c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8c8:	89 10                	mov    DWORD PTR [eax],edx
c000a8ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8ce:	83 ec 0c             	sub    esp,0xc
c000a8d1:	50                   	push   eax
c000a8d2:	e8 55 05 00 00       	call   c000ae2c <Device::~Device()>
c000a8d7:	83 c4 10             	add    esp,0x10
c000a8da:	90                   	nop
c000a8db:	83 c4 0c             	add    esp,0xc
c000a8de:	c3                   	ret    
c000a8df:	90                   	nop

c000a8e0 <Bus::~Bus()>:
c000a8e0:	83 ec 0c             	sub    esp,0xc
c000a8e3:	83 ec 0c             	sub    esp,0xc
c000a8e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ea:	e8 cd ff ff ff       	call   c000a8bc <Bus::~Bus()>
c000a8ef:	83 c4 10             	add    esp,0x10
c000a8f2:	83 ec 08             	sub    esp,0x8
c000a8f5:	68 58 01 00 00       	push   0x158
c000a8fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8fe:	e8 23 f1 ff ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c000a903:	83 c4 10             	add    esp,0x10
c000a906:	83 c4 0c             	add    esp,0xc
c000a909:	c3                   	ret    

c000a90a <beepThread(void*)>:
c000a90a:	83 ec 0c             	sub    esp,0xc
c000a90d:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c000a912:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a916:	48                   	dec    eax
c000a917:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c000a91c:	75 01                	jne    c000a91f <beepThread(void*)+0x15>
c000a91e:	fb                   	sti    
c000a91f:	83 ec 0c             	sub    esp,0xc
c000a922:	6b c2 0a             	imul   eax,edx,0xa
c000a925:	50                   	push   eax
c000a926:	e8 2d 86 00 00       	call   c0012f58 <milliTenthSleep(unsigned int)>
c000a92b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000a932:	e8 30 b2 00 00       	call   c0015b67 <Hal::makeBeep(int)>
c000a937:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000a93f:	83 c4 1c             	add    esp,0x1c
c000a942:	e9 11 85 00 00       	jmp    c0012e58 <blockTask(TaskState)>

c000a947 <Krnl::beep(int, int, bool)>:
c000a947:	56                   	push   esi
c000a948:	53                   	push   ebx
c000a949:	83 ec 10             	sub    esp,0x10
c000a94c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a950:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a958:	e8 0a b2 00 00       	call   c0015b67 <Hal::makeBeep(int)>
c000a95d:	83 c4 10             	add    esp,0x10
c000a960:	89 f0                	mov    eax,esi
c000a962:	84 c0                	test   al,al
c000a964:	74 1e                	je     c000a984 <Krnl::beep(int, int, bool)+0x3d>
c000a966:	83 ec 0c             	sub    esp,0xc
c000a969:	6b db 0a             	imul   ebx,ebx,0xa
c000a96c:	53                   	push   ebx
c000a96d:	e8 e6 85 00 00       	call   c0012f58 <milliTenthSleep(unsigned int)>
c000a972:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000a97a:	83 c4 14             	add    esp,0x14
c000a97d:	5b                   	pop    ebx
c000a97e:	5e                   	pop    esi
c000a97f:	e9 e3 b1 00 00       	jmp    c0015b67 <Hal::makeBeep(int)>
c000a984:	68 e6 00 00 00       	push   0xe6
c000a989:	53                   	push   ebx
c000a98a:	68 0a a9 00 c0       	push   0xc000a90a
c000a98f:	ff 35 b0 3c 02 c0    	push   DWORD PTR ds:0xc0023cb0
c000a995:	e8 aa 80 00 00       	call   c0012a44 <Process::createThread(void (*)(void*), void*, int)>
c000a99a:	83 c4 14             	add    esp,0x14
c000a99d:	5b                   	pop    ebx
c000a99e:	5e                   	pop    esi
c000a99f:	c3                   	ret    

c000a9a0 <User::loadClockSettings(int)>:
c000a9a0:	53                   	push   ebx
c000a9a1:	83 ec 14             	sub    esp,0x14
c000a9a4:	68 14 01 00 00       	push   0x114
c000a9a9:	e8 cf c3 ff ff       	call   c0006d7d <malloc>
c000a9ae:	83 c4 0c             	add    esp,0xc
c000a9b1:	89 c3                	mov    ebx,eax
c000a9b3:	ff 35 b0 3c 02 c0    	push   DWORD PTR ds:0xc0023cb0
c000a9b9:	68 28 e6 01 c0       	push   0xc001e628
c000a9be:	50                   	push   eax
c000a9bf:	e8 ae f6 ff ff       	call   c000a072 <File::File(char const*, Process*)>
c000a9c4:	58                   	pop    eax
c000a9c5:	5a                   	pop    edx
c000a9c6:	6a 01                	push   0x1
c000a9c8:	53                   	push   ebx
c000a9c9:	e8 5e f7 ff ff       	call   c000a12c <File::open(FileOpenMode)>
c000a9ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a9d1:	e8 b4 f7 ff ff       	call   c000a18a <File::close()>
c000a9d6:	83 c4 10             	add    esp,0x10
c000a9d9:	85 db                	test   ebx,ebx
c000a9db:	74 0f                	je     c000a9ec <User::loadClockSettings(int)+0x4c>
c000a9dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a9df:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a9e3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000a9e6:	83 c4 08             	add    esp,0x8
c000a9e9:	5b                   	pop    ebx
c000a9ea:	ff e0                	jmp    eax
c000a9ec:	83 c4 08             	add    esp,0x8
c000a9ef:	5b                   	pop    ebx
c000a9f0:	c3                   	ret    
c000a9f1:	90                   	nop

c000a9f2 <Clock::Clock(char const*)>:
c000a9f2:	83 ec 0c             	sub    esp,0xc
c000a9f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9f9:	83 ec 08             	sub    esp,0x8
c000a9fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa00:	50                   	push   eax
c000aa01:	e8 bc 06 00 00       	call   c000b0c2 <Device::Device(char const*)>
c000aa06:	83 c4 10             	add    esp,0x10
c000aa09:	ba 50 e6 01 c0       	mov    edx,0xc001e650
c000aa0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa12:	89 10                	mov    DWORD PTR [eax],edx
c000aa14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa18:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000aa22:	90                   	nop
c000aa23:	83 c4 0c             	add    esp,0xc
c000aa26:	c3                   	ret    
c000aa27:	90                   	nop

c000aa28 <Clock::~Clock()>:
c000aa28:	83 ec 0c             	sub    esp,0xc
c000aa2b:	ba 50 e6 01 c0       	mov    edx,0xc001e650
c000aa30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa34:	89 10                	mov    DWORD PTR [eax],edx
c000aa36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa3a:	83 ec 0c             	sub    esp,0xc
c000aa3d:	50                   	push   eax
c000aa3e:	e8 e9 03 00 00       	call   c000ae2c <Device::~Device()>
c000aa43:	83 c4 10             	add    esp,0x10
c000aa46:	90                   	nop
c000aa47:	83 c4 0c             	add    esp,0xc
c000aa4a:	c3                   	ret    
c000aa4b:	90                   	nop

c000aa4c <Clock::~Clock()>:
c000aa4c:	83 ec 0c             	sub    esp,0xc
c000aa4f:	83 ec 0c             	sub    esp,0xc
c000aa52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa56:	e8 cd ff ff ff       	call   c000aa28 <Clock::~Clock()>
c000aa5b:	83 c4 10             	add    esp,0x10
c000aa5e:	83 ec 08             	sub    esp,0x8
c000aa61:	68 58 01 00 00       	push   0x158
c000aa66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa6a:	e8 b7 ef ff ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c000aa6f:	83 c4 10             	add    esp,0x10
c000aa72:	83 c4 0c             	add    esp,0xc
c000aa75:	c3                   	ret    

c000aa76 <Clock::timeInSecondsLocal()>:
c000aa76:	53                   	push   ebx
c000aa77:	83 ec 14             	sub    esp,0x14
c000aa7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa7e:	8b 10                	mov    edx,DWORD PTR [eax]
c000aa80:	50                   	push   eax
c000aa81:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000aa84:	0f b6 0d 9c 08 02 c0 	movzx  ecx,BYTE PTR ds:0xc002089c
c000aa8b:	03 0d a0 08 02 c0    	add    ecx,DWORD PTR ds:0xc00208a0
c000aa91:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000aa97:	89 cb                	mov    ebx,ecx
c000aa99:	c1 fb 1f             	sar    ebx,0x1f
c000aa9c:	01 c8                	add    eax,ecx
c000aa9e:	11 da                	adc    edx,ebx
c000aaa0:	83 c4 10             	add    esp,0x10
c000aaa3:	31 c9                	xor    ecx,ecx
c000aaa5:	80 3d 9d 08 02 c0 00 	cmp    BYTE PTR ds:0xc002089d,0x0
c000aaac:	74 05                	je     c000aab3 <Clock::timeInSecondsLocal()+0x3d>
c000aaae:	b9 08 07 00 00       	mov    ecx,0x708
c000aab3:	31 db                	xor    ebx,ebx
c000aab5:	01 c8                	add    eax,ecx
c000aab7:	11 da                	adc    edx,ebx
c000aab9:	83 c4 08             	add    esp,0x8
c000aabc:	5b                   	pop    ebx
c000aabd:	c3                   	ret    

c000aabe <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000aabe:	57                   	push   edi
c000aabf:	56                   	push   esi
c000aac0:	53                   	push   ebx
c000aac1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aac5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000aac9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000aacb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000aacf:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000aad2:	0f b6 05 9c 08 02 c0 	movzx  eax,BYTE PTR ds:0xc002089c
c000aad9:	03 05 a0 08 02 c0    	add    eax,DWORD PTR ds:0xc00208a0
c000aadf:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000aae5:	99                   	cdq    
c000aae6:	29 c6                	sub    esi,eax
c000aae8:	19 d7                	sbb    edi,edx
c000aaea:	89 f0                	mov    eax,esi
c000aaec:	89 fa                	mov    edx,edi
c000aaee:	31 f6                	xor    esi,esi
c000aaf0:	80 3d 9d 08 02 c0 00 	cmp    BYTE PTR ds:0xc002089d,0x0
c000aaf7:	74 05                	je     c000aafe <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000aaf9:	be 08 07 00 00       	mov    esi,0x708
c000aafe:	31 ff                	xor    edi,edi
c000ab00:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000ab04:	29 f0                	sub    eax,esi
c000ab06:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ab0a:	19 fa                	sbb    edx,edi
c000ab0c:	89 d8                	mov    eax,ebx
c000ab0e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ab12:	5b                   	pop    ebx
c000ab13:	5e                   	pop    esi
c000ab14:	5f                   	pop    edi
c000ab15:	ff e0                	jmp    eax

c000ab17 <datetimeToSeconds(datetime_t)>:
c000ab17:	55                   	push   ebp
c000ab18:	57                   	push   edi
c000ab19:	56                   	push   esi
c000ab1a:	53                   	push   ebx
c000ab1b:	83 ec 14             	sub    esp,0x14
c000ab1e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ab22:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ab26:	89 d3                	mov    ebx,edx
c000ab28:	0f b6 c6             	movzx  eax,dh
c000ab2b:	c1 eb 10             	shr    ebx,0x10
c000ab2e:	48                   	dec    eax
c000ab2f:	66 81 eb 6c 07       	sub    bx,0x76c
c000ab34:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000ab38:	0f b6 f5             	movzx  esi,ch
c000ab3b:	89 cf                	mov    edi,ecx
c000ab3d:	6b f6 3c             	imul   esi,esi,0x3c
c000ab40:	c1 ef 10             	shr    edi,0x10
c000ab43:	0f b6 c9             	movzx  ecx,cl
c000ab46:	89 f8                	mov    eax,edi
c000ab48:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000ab4e:	0f b6 f8             	movzx  edi,al
c000ab51:	0f b6 d2             	movzx  edx,dl
c000ab54:	01 fe                	add    esi,edi
c000ab56:	01 f1                	add    ecx,esi
c000ab58:	0f b7 f3             	movzx  esi,bx
c000ab5b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ab5f:	c1 f9 1f             	sar    ecx,0x1f
c000ab62:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000ab67:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ab6b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000ab70:	8b 0c 8d a0 e6 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe1960]
c000ab77:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000ab7b:	76 29                	jbe    c000aba6 <datetimeToSeconds(datetime_t)+0x8f>
c000ab7d:	f6 c3 03             	test   bl,0x3
c000ab80:	75 24                	jne    c000aba6 <datetimeToSeconds(datetime_t)+0x8f>
c000ab82:	31 d2                	xor    edx,edx
c000ab84:	bf 64 00 00 00       	mov    edi,0x64
c000ab89:	89 d8                	mov    eax,ebx
c000ab8b:	66 f7 f7             	div    di
c000ab8e:	66 85 d2             	test   dx,dx
c000ab91:	75 12                	jne    c000aba5 <datetimeToSeconds(datetime_t)+0x8e>
c000ab93:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000ab99:	bf 90 01 00 00       	mov    edi,0x190
c000ab9e:	99                   	cdq    
c000ab9f:	f7 ff                	idiv   edi
c000aba1:	85 d2                	test   edx,edx
c000aba3:	75 01                	jne    c000aba6 <datetimeToSeconds(datetime_t)+0x8f>
c000aba5:	41                   	inc    ecx
c000aba6:	66 83 fb 46          	cmp    bx,0x46
c000abaa:	76 45                	jbe    c000abf1 <datetimeToSeconds(datetime_t)+0xda>
c000abac:	bb 46 00 00 00       	mov    ebx,0x46
c000abb1:	bf 64 00 00 00       	mov    edi,0x64
c000abb6:	bd 90 01 00 00       	mov    ebp,0x190
c000abbb:	b8 6d 01 00 00       	mov    eax,0x16d
c000abc0:	f6 c3 03             	test   bl,0x3
c000abc3:	75 23                	jne    c000abe8 <datetimeToSeconds(datetime_t)+0xd1>
c000abc5:	89 d8                	mov    eax,ebx
c000abc7:	99                   	cdq    
c000abc8:	f7 ff                	idiv   edi
c000abca:	b8 6e 01 00 00       	mov    eax,0x16e
c000abcf:	85 d2                	test   edx,edx
c000abd1:	75 15                	jne    c000abe8 <datetimeToSeconds(datetime_t)+0xd1>
c000abd3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000abd9:	99                   	cdq    
c000abda:	f7 fd                	idiv   ebp
c000abdc:	83 fa 01             	cmp    edx,0x1
c000abdf:	19 c0                	sbb    eax,eax
c000abe1:	f7 d0                	not    eax
c000abe3:	05 6e 01 00 00       	add    eax,0x16e
c000abe8:	01 c1                	add    ecx,eax
c000abea:	43                   	inc    ebx
c000abeb:	39 f3                	cmp    ebx,esi
c000abed:	7c cc                	jl     c000abbb <datetimeToSeconds(datetime_t)+0xa4>
c000abef:	eb 35                	jmp    c000ac26 <datetimeToSeconds(datetime_t)+0x10f>
c000abf1:	74 33                	je     c000ac26 <datetimeToSeconds(datetime_t)+0x10f>
c000abf3:	b8 45 00 00 00       	mov    eax,0x45
c000abf8:	89 c2                	mov    edx,eax
c000abfa:	83 e2 03             	and    edx,0x3
c000abfd:	39 f0                	cmp    eax,esi
c000abff:	7e 0f                	jle    c000ac10 <datetimeToSeconds(datetime_t)+0xf9>
c000ac01:	83 fa 01             	cmp    edx,0x1
c000ac04:	19 d2                	sbb    edx,edx
c000ac06:	48                   	dec    eax
c000ac07:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000ac0e:	eb e8                	jmp    c000abf8 <datetimeToSeconds(datetime_t)+0xe1>
c000ac10:	b8 6d 01 00 00       	mov    eax,0x16d
c000ac15:	85 d2                	test   edx,edx
c000ac17:	75 0b                	jne    c000ac24 <datetimeToSeconds(datetime_t)+0x10d>
c000ac19:	66 83 fb 01          	cmp    bx,0x1
c000ac1d:	19 c0                	sbb    eax,eax
c000ac1f:	05 6e 01 00 00       	add    eax,0x16e
c000ac24:	29 c1                	sub    ecx,eax
c000ac26:	b8 80 51 01 00       	mov    eax,0x15180
c000ac2b:	f7 e9                	imul   ecx
c000ac2d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ac31:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ac35:	83 c4 14             	add    esp,0x14
c000ac38:	5b                   	pop    ebx
c000ac39:	5e                   	pop    esi
c000ac3a:	5f                   	pop    edi
c000ac3b:	5d                   	pop    ebp
c000ac3c:	c3                   	ret    
c000ac3d:	90                   	nop

c000ac3e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000ac3e:	57                   	push   edi
c000ac3f:	56                   	push   esi
c000ac40:	53                   	push   ebx
c000ac41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ac45:	8b 06                	mov    eax,DWORD PTR [esi]
c000ac47:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000ac4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac52:	e8 c0 fe ff ff       	call   c000ab17 <datetimeToSeconds(datetime_t)>
c000ac57:	59                   	pop    ecx
c000ac58:	0f b6 0d 9c 08 02 c0 	movzx  ecx,BYTE PTR ds:0xc002089c
c000ac5f:	5b                   	pop    ebx
c000ac60:	03 0d a0 08 02 c0    	add    ecx,DWORD PTR ds:0xc00208a0
c000ac66:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000ac6c:	89 cb                	mov    ebx,ecx
c000ac6e:	c1 fb 1f             	sar    ebx,0x1f
c000ac71:	29 c8                	sub    eax,ecx
c000ac73:	19 da                	sbb    edx,ebx
c000ac75:	31 c9                	xor    ecx,ecx
c000ac77:	80 3d 9d 08 02 c0 00 	cmp    BYTE PTR ds:0xc002089d,0x0
c000ac7e:	74 05                	je     c000ac85 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000ac80:	b9 08 07 00 00       	mov    ecx,0x708
c000ac85:	31 db                	xor    ebx,ebx
c000ac87:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000ac8b:	29 c8                	sub    eax,ecx
c000ac8d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ac91:	19 da                	sbb    edx,ebx
c000ac93:	89 f8                	mov    eax,edi
c000ac95:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ac99:	5b                   	pop    ebx
c000ac9a:	5e                   	pop    esi
c000ac9b:	5f                   	pop    edi
c000ac9c:	ff e0                	jmp    eax

c000ac9e <secondsToDatetime(unsigned long long)>:
c000ac9e:	55                   	push   ebp
c000ac9f:	57                   	push   edi
c000aca0:	56                   	push   esi
c000aca1:	53                   	push   ebx
c000aca2:	83 ec 1c             	sub    esp,0x1c
c000aca5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000aca9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000acad:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000acb1:	6a 00                	push   0x0
c000acb3:	68 80 51 01 00       	push   0x15180
c000acb8:	55                   	push   ebp
c000acb9:	57                   	push   edi
c000acba:	e8 31 1c 01 00       	call   c001c8f0 <__udivdi3>
c000acbf:	83 c4 10             	add    esp,0x10
c000acc2:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000acc8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000accc:	6a 00                	push   0x0
c000acce:	68 80 51 01 00       	push   0x15180
c000acd3:	55                   	push   ebp
c000acd4:	57                   	push   edi
c000acd5:	bf 10 0e 00 00       	mov    edi,0xe10
c000acda:	e8 11 1d 01 00       	call   c001c9f0 <__umoddi3>
c000acdf:	83 c4 10             	add    esp,0x10
c000ace2:	99                   	cdq    
c000ace3:	f7 ff                	idiv   edi
c000ace5:	bf 3c 00 00 00       	mov    edi,0x3c
c000acea:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000aced:	89 d0                	mov    eax,edx
c000acef:	99                   	cdq    
c000acf0:	f7 ff                	idiv   edi
c000acf2:	85 db                	test   ebx,ebx
c000acf4:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000acf7:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000acfa:	79 11                	jns    c000ad0d <secondsToDatetime(unsigned long long)+0x6f>
c000acfc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ad00:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000ad06:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000ad0b:	eb 07                	jmp    c000ad14 <secondsToDatetime(unsigned long long)+0x76>
c000ad0d:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000ad12:	89 d8                	mov    eax,ebx
c000ad14:	bf b4 05 00 00       	mov    edi,0x5b4
c000ad19:	99                   	cdq    
c000ad1a:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000ad1f:	f7 f9                	idiv   ecx
c000ad21:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000ad26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad2a:	31 d2                	xor    edx,edx
c000ad2c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000ad34:	01 c3                	add    ebx,eax
c000ad36:	89 d8                	mov    eax,ebx
c000ad38:	f7 f1                	div    ecx
c000ad3a:	31 d2                	xor    edx,edx
c000ad3c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000ad3f:	89 d8                	mov    eax,ebx
c000ad41:	f7 f7                	div    edi
c000ad43:	31 d2                	xor    edx,edx
c000ad45:	29 c1                	sub    ecx,eax
c000ad47:	89 d8                	mov    eax,ebx
c000ad49:	f7 f5                	div    ebp
c000ad4b:	bd 6d 01 00 00       	mov    ebp,0x16d
c000ad50:	29 c1                	sub    ecx,eax
c000ad52:	31 d2                	xor    edx,edx
c000ad54:	89 c8                	mov    eax,ecx
c000ad56:	f7 f5                	div    ebp
c000ad58:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000ad5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ad61:	31 d2                	xor    edx,edx
c000ad63:	89 c8                	mov    eax,ecx
c000ad65:	f7 f5                	div    ebp
c000ad67:	31 d2                	xor    edx,edx
c000ad69:	01 c3                	add    ebx,eax
c000ad6b:	89 c8                	mov    eax,ecx
c000ad6d:	f7 f7                	div    edi
c000ad6f:	bf 99 00 00 00       	mov    edi,0x99
c000ad74:	29 c3                	sub    ebx,eax
c000ad76:	31 d2                	xor    edx,edx
c000ad78:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000ad80:	29 c3                	sub    ebx,eax
c000ad82:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ad85:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000ad88:	bb 05 00 00 00       	mov    ebx,0x5
c000ad8d:	83 c1 02             	add    ecx,0x2
c000ad90:	89 c8                	mov    eax,ecx
c000ad92:	f7 f7                	div    edi
c000ad94:	31 d2                	xor    edx,edx
c000ad96:	89 c7                	mov    edi,eax
c000ad98:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000ad9e:	83 c0 02             	add    eax,0x2
c000ada1:	f7 f3                	div    ebx
c000ada3:	89 eb                	mov    ebx,ebp
c000ada5:	29 c3                	sub    ebx,eax
c000ada7:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000adad:	88 1e                	mov    BYTE PTR [esi],bl
c000adaf:	19 c0                	sbb    eax,eax
c000adb1:	31 d2                	xor    edx,edx
c000adb3:	83 e0 0c             	and    eax,0xc
c000adb6:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000adba:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000adc2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000adc6:	83 f9 01             	cmp    ecx,0x1
c000adc9:	0f 96 c2             	setbe  dl
c000adcc:	41                   	inc    ecx
c000adcd:	01 d0                	add    eax,edx
c000adcf:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000add2:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000add6:	83 c4 1c             	add    esp,0x1c
c000add9:	89 f0                	mov    eax,esi
c000addb:	5b                   	pop    ebx
c000addc:	5e                   	pop    esi
c000addd:	5f                   	pop    edi
c000adde:	5d                   	pop    ebp
c000addf:	c2 04 00             	ret    0x4

c000ade2 <Clock::timeInDatetimeLocal()>:
c000ade2:	53                   	push   ebx
c000ade3:	83 ec 14             	sub    esp,0x14
c000ade6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000adea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000adee:	e8 83 fc ff ff       	call   c000aa76 <Clock::timeInSecondsLocal()>
c000adf3:	83 c4 0c             	add    esp,0xc
c000adf6:	52                   	push   edx
c000adf7:	50                   	push   eax
c000adf8:	53                   	push   ebx
c000adf9:	e8 a0 fe ff ff       	call   c000ac9e <secondsToDatetime(unsigned long long)>
c000adfe:	89 d8                	mov    eax,ebx
c000ae00:	83 c4 14             	add    esp,0x14
c000ae03:	5b                   	pop    ebx
c000ae04:	c2 04 00             	ret    0x4
c000ae07:	90                   	nop

c000ae08 <Device::hibernate()>:
c000ae08:	c3                   	ret    
c000ae09:	90                   	nop

c000ae0a <Device::wake()>:
c000ae0a:	c3                   	ret    
c000ae0b:	90                   	nop

c000ae0c <Device::detect()>:
c000ae0c:	c3                   	ret    
c000ae0d:	90                   	nop

c000ae0e <Device::disableLegacy()>:
c000ae0e:	c3                   	ret    
c000ae0f:	90                   	nop

c000ae10 <Device::powerSaving(PowerSavingLevel)>:
c000ae10:	c3                   	ret    
c000ae11:	90                   	nop

c000ae12 <DriverlessDevice::close(int, int, void*)>:
c000ae12:	31 c0                	xor    eax,eax
c000ae14:	c3                   	ret    
c000ae15:	90                   	nop

c000ae16 <DriverlessDevice::detect()>:
c000ae16:	c3                   	ret    
c000ae17:	90                   	nop

c000ae18 <DriverlessDevice::open(int, int, void*)>:
c000ae18:	83 ec 18             	sub    esp,0x18
c000ae1b:	68 d0 e6 01 c0       	push   0xc001e6d0
c000ae20:	e8 b8 49 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c000ae25:	83 c8 ff             	or     eax,0xffffffff
c000ae28:	83 c4 1c             	add    esp,0x1c
c000ae2b:	c3                   	ret    

c000ae2c <Device::~Device()>:
c000ae2c:	ba 30 e7 01 c0       	mov    edx,0xc001e730
c000ae31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae35:	89 10                	mov    DWORD PTR [eax],edx
c000ae37:	90                   	nop
c000ae38:	c3                   	ret    
c000ae39:	90                   	nop

c000ae3a <Device::~Device()>:
c000ae3a:	83 ec 0c             	sub    esp,0xc
c000ae3d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ae41:	e8 e6 ff ff ff       	call   c000ae2c <Device::~Device()>
c000ae46:	83 c4 04             	add    esp,0x4
c000ae49:	83 ec 08             	sub    esp,0x8
c000ae4c:	68 58 01 00 00       	push   0x158
c000ae51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae55:	e8 cc eb ff ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c000ae5a:	83 c4 10             	add    esp,0x10
c000ae5d:	83 c4 0c             	add    esp,0xc
c000ae60:	c3                   	ret    
c000ae61:	90                   	nop

c000ae62 <Device::findAndLoadDriver()>:
c000ae62:	c7 44 24 04 ee e6 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e6ee
c000ae6a:	e9 98 ec ff ff       	jmp    c0009b07 <Dbg::kprintf(char const*, ...)>
c000ae6f:	90                   	nop

c000ae70 <Device::preOpenPCI(PCIDeviceInfo)>:
c000ae70:	57                   	push   edi
c000ae71:	b9 09 00 00 00       	mov    ecx,0x9
c000ae76:	56                   	push   esi
c000ae77:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ae7b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000ae7f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000ae89:	81 c7 18 01 00 00    	add    edi,0x118
c000ae8f:	fc                   	cld    
c000ae90:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ae92:	5e                   	pop    esi
c000ae93:	5f                   	pop    edi
c000ae94:	c3                   	ret    
c000ae95:	90                   	nop

c000ae96 <Device::preOpenACPI(void*, char*, char*)>:
c000ae96:	57                   	push   edi
c000ae97:	b9 1e 00 00 00       	mov    ecx,0x1e
c000ae9c:	56                   	push   esi
c000ae9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aea1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aea5:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000aeaf:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000aeb5:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000aebb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000aebf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aec1:	b9 0e 00 00 00       	mov    ecx,0xe
c000aec6:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000aecc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000aed0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aed2:	5e                   	pop    esi
c000aed3:	5f                   	pop    edi
c000aed4:	c3                   	ret    
c000aed5:	90                   	nop

c000aed6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000aed6:	53                   	push   ebx
c000aed7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aedb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aedf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aee7:	0f b6 c0             	movzx  eax,al
c000aeea:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000aeee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aef2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000aef6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000aefa:	5b                   	pop    ebx
c000aefb:	e9 a4 05 00 00       	jmp    c000b4a4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000af00 <Device::getParent()>:
c000af00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af04:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000af0a:	c3                   	ret    
c000af0b:	90                   	nop

c000af0c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000af0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af14:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000af19:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000af1d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000af21:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000af25:	e9 d9 06 00 00       	jmp    c000b603 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000af2a <Device::addChild(Device*)>:
c000af2a:	53                   	push   ebx
c000af2b:	83 ec 08             	sub    esp,0x8
c000af2e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000af32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af36:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000af3c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000af42:	8b 13                	mov    edx,DWORD PTR [ebx]
c000af44:	85 d2                	test   edx,edx
c000af46:	74 04                	je     c000af4c <Device::addChild(Device*)+0x22>
c000af48:	89 d3                	mov    ebx,edx
c000af4a:	eb f6                	jmp    c000af42 <Device::addChild(Device*)+0x18>
c000af4c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000af4f:	83 ec 0c             	sub    esp,0xc
c000af52:	6a 08                	push   0x8
c000af54:	e8 24 be ff ff       	call   c0006d7d <malloc>
c000af59:	89 03                	mov    DWORD PTR [ebx],eax
c000af5b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000af61:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000af68:	83 c4 18             	add    esp,0x18
c000af6b:	5b                   	pop    ebx
c000af6c:	c3                   	ret    
c000af6d:	90                   	nop

c000af6e <Device::removeAllChildren()>:
c000af6e:	56                   	push   esi
c000af6f:	53                   	push   ebx
c000af70:	52                   	push   edx
c000af71:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000af75:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000af7b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000af7e:	74 17                	je     c000af97 <Device::removeAllChildren()+0x29>
c000af80:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000af83:	85 c0                	test   eax,eax
c000af85:	74 0c                	je     c000af93 <Device::removeAllChildren()+0x25>
c000af87:	83 ec 0c             	sub    esp,0xc
c000af8a:	8b 10                	mov    edx,DWORD PTR [eax]
c000af8c:	50                   	push   eax
c000af8d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000af90:	83 c4 10             	add    esp,0x10
c000af93:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000af95:	eb e4                	jmp    c000af7b <Device::removeAllChildren()+0xd>
c000af97:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000af9d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000afa3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000afa9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000afb0:	58                   	pop    eax
c000afb1:	5b                   	pop    ebx
c000afb2:	5e                   	pop    esi
c000afb3:	c3                   	ret    

c000afb4 <Device::hibernateAll()>:
c000afb4:	53                   	push   ebx
c000afb5:	83 ec 14             	sub    esp,0x14
c000afb8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000afbc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afbe:	53                   	push   ebx
c000afbf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000afc2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000afc8:	83 c4 10             	add    esp,0x10
c000afcb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000afce:	74 0f                	je     c000afdf <Device::hibernateAll()+0x2b>
c000afd0:	83 ec 0c             	sub    esp,0xc
c000afd3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000afd6:	e8 d9 ff ff ff       	call   c000afb4 <Device::hibernateAll()>
c000afdb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000afdd:	eb e9                	jmp    c000afc8 <Device::hibernateAll()+0x14>
c000afdf:	83 c4 08             	add    esp,0x8
c000afe2:	5b                   	pop    ebx
c000afe3:	c3                   	ret    

c000afe4 <Device::wakeAll()>:
c000afe4:	53                   	push   ebx
c000afe5:	83 ec 14             	sub    esp,0x14
c000afe8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000afec:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afee:	53                   	push   ebx
c000afef:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000aff2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000aff8:	83 c4 10             	add    esp,0x10
c000affb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000affe:	74 0f                	je     c000b00f <Device::wakeAll()+0x2b>
c000b000:	83 ec 0c             	sub    esp,0xc
c000b003:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b006:	e8 d9 ff ff ff       	call   c000afe4 <Device::wakeAll()>
c000b00b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b00d:	eb e9                	jmp    c000aff8 <Device::wakeAll()+0x14>
c000b00f:	83 c4 08             	add    esp,0x8
c000b012:	5b                   	pop    ebx
c000b013:	c3                   	ret    

c000b014 <Device::detectAll()>:
c000b014:	53                   	push   ebx
c000b015:	83 ec 14             	sub    esp,0x14
c000b018:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b01c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b01e:	53                   	push   ebx
c000b01f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000b022:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b028:	83 c4 10             	add    esp,0x10
c000b02b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b02e:	74 0f                	je     c000b03f <Device::detectAll()+0x2b>
c000b030:	83 ec 0c             	sub    esp,0xc
c000b033:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b036:	e8 d9 ff ff ff       	call   c000b014 <Device::detectAll()>
c000b03b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b03d:	eb e9                	jmp    c000b028 <Device::detectAll()+0x14>
c000b03f:	83 c4 08             	add    esp,0x8
c000b042:	5b                   	pop    ebx
c000b043:	c3                   	ret    

c000b044 <Device::disableLegacyAll()>:
c000b044:	c3                   	ret    
c000b045:	90                   	nop

c000b046 <Device::loadDriversForAll()>:
c000b046:	c3                   	ret    
c000b047:	90                   	nop

c000b048 <Device::closeAll()>:
c000b048:	53                   	push   ebx
c000b049:	83 ec 08             	sub    esp,0x8
c000b04c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b050:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b052:	6a 00                	push   0x0
c000b054:	6a 00                	push   0x0
c000b056:	6a 00                	push   0x0
c000b058:	53                   	push   ebx
c000b059:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b05c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b062:	83 c4 10             	add    esp,0x10
c000b065:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b068:	74 0f                	je     c000b079 <Device::closeAll()+0x31>
c000b06a:	83 ec 0c             	sub    esp,0xc
c000b06d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b070:	e8 d3 ff ff ff       	call   c000b048 <Device::closeAll()>
c000b075:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b077:	eb e9                	jmp    c000b062 <Device::closeAll()+0x1a>
c000b079:	83 c4 08             	add    esp,0x8
c000b07c:	5b                   	pop    ebx
c000b07d:	c3                   	ret    

c000b07e <Device::powerSavingAll(PowerSavingLevel)>:
c000b07e:	56                   	push   esi
c000b07f:	53                   	push   ebx
c000b080:	83 ec 0c             	sub    esp,0xc
c000b083:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b087:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000b08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b08d:	56                   	push   esi
c000b08e:	53                   	push   ebx
c000b08f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000b092:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b098:	83 c4 10             	add    esp,0x10
c000b09b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b09e:	74 0f                	je     c000b0af <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000b0a0:	52                   	push   edx
c000b0a1:	52                   	push   edx
c000b0a2:	56                   	push   esi
c000b0a3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b0a6:	e8 d3 ff ff ff       	call   c000b07e <Device::powerSavingAll(PowerSavingLevel)>
c000b0ab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b0ad:	eb e9                	jmp    c000b098 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000b0af:	58                   	pop    eax
c000b0b0:	5b                   	pop    ebx
c000b0b1:	5e                   	pop    esi
c000b0b2:	c3                   	ret    
c000b0b3:	90                   	nop

c000b0b4 <Device::setName(char const*)>:
c000b0b4:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000b0bc:	e9 a3 54 ff ff       	jmp    c0000564 <strcpy>
c000b0c1:	90                   	nop

c000b0c2 <Device::Device(char const*)>:
c000b0c2:	83 ec 1c             	sub    esp,0x1c
c000b0c5:	ba 30 e7 01 c0       	mov    edx,0xc001e730
c000b0ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b0ce:	89 10                	mov    DWORD PTR [eax],edx
c000b0d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b0d4:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000b0de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b0e2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000b0ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b0f0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000b0fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b0fe:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000b108:	83 ec 08             	sub    esp,0x8
c000b10b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b10f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b113:	e8 9c ff ff ff       	call   c000b0b4 <Device::setName(char const*)>
c000b118:	83 c4 10             	add    esp,0x10
c000b11b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000b123:	83 ec 0c             	sub    esp,0xc
c000b126:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b12a:	e8 4e bc ff ff       	call   c0006d7d <malloc>
c000b12f:	83 c4 10             	add    esp,0x10
c000b132:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b138:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b13f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b143:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000b149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b14d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000b153:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b159:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b15d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000b163:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b16a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b16e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000b175:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b179:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000b180:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b184:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000b18e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b192:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000b19c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b1a0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000b1aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b1ae:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000b1b8:	90                   	nop
c000b1b9:	83 c4 1c             	add    esp,0x1c
c000b1bc:	c3                   	ret    
c000b1bd:	90                   	nop

c000b1be <Device::getName()>:
c000b1be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1c2:	05 d0 00 00 00       	add    eax,0xd0
c000b1c7:	c3                   	ret    

c000b1c8 <DriverlessDevice::DriverlessDevice(char const*)>:
c000b1c8:	83 ec 0c             	sub    esp,0xc
c000b1cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1cf:	83 ec 08             	sub    esp,0x8
c000b1d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1d6:	50                   	push   eax
c000b1d7:	e8 e6 fe ff ff       	call   c000b0c2 <Device::Device(char const*)>
c000b1dc:	83 c4 10             	add    esp,0x10
c000b1df:	ba 5c e7 01 c0       	mov    edx,0xc001e75c
c000b1e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1e8:	89 10                	mov    DWORD PTR [eax],edx
c000b1ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1ee:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000b1f8:	90                   	nop
c000b1f9:	83 c4 0c             	add    esp,0xc
c000b1fc:	c3                   	ret    
c000b1fd:	90                   	nop

c000b1fe <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000b1fe:	57                   	push   edi
c000b1ff:	56                   	push   esi
c000b200:	53                   	push   ebx
c000b201:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b205:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b209:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b20d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000b213:	75 0c                	jne    c000b221 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000b215:	52                   	push   edx
c000b216:	52                   	push   edx
c000b217:	53                   	push   ebx
c000b218:	56                   	push   esi
c000b219:	e8 84 1b 01 00       	call   c001cda2 <LinkedList<Device>::addElement(Device*)>
c000b21e:	83 c4 10             	add    esp,0x10
c000b221:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b227:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b22a:	74 12                	je     c000b23e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000b22c:	50                   	push   eax
c000b22d:	57                   	push   edi
c000b22e:	56                   	push   esi
c000b22f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b232:	e8 c7 ff ff ff       	call   c000b1fe <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000b237:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b239:	83 c4 10             	add    esp,0x10
c000b23c:	eb e9                	jmp    c000b227 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000b23e:	5b                   	pop    ebx
c000b23f:	5e                   	pop    esi
c000b240:	5f                   	pop    edi
c000b241:	c3                   	ret    

c000b242 <getDevicesOfType(DeviceType)>:
c000b242:	53                   	push   ebx
c000b243:	83 ec 14             	sub    esp,0x14
c000b246:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b24a:	53                   	push   ebx
c000b24b:	e8 2e 1c 01 00       	call   c001ce7e <LinkedList<Device>::LinkedList()>
c000b250:	83 c4 0c             	add    esp,0xc
c000b253:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b257:	53                   	push   ebx
c000b258:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c000b25e:	e8 9b ff ff ff       	call   c000b1fe <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000b263:	89 d8                	mov    eax,ebx
c000b265:	83 c4 18             	add    esp,0x18
c000b268:	5b                   	pop    ebx
c000b269:	c2 04 00             	ret    0x4

c000b26c <HardDiskController::HardDiskController(char const*)>:
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b273:	83 ec 08             	sub    esp,0x8
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	50                   	push   eax
c000b27b:	e8 42 fe ff ff       	call   c000b0c2 <Device::Device(char const*)>
c000b280:	83 c4 10             	add    esp,0x10
c000b283:	ba 88 e7 01 c0       	mov    edx,0xc001e788
c000b288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b28c:	89 10                	mov    DWORD PTR [eax],edx
c000b28e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b292:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000b29c:	90                   	nop
c000b29d:	83 c4 0c             	add    esp,0xc
c000b2a0:	c3                   	ret    
c000b2a1:	90                   	nop
c000b2a2:	66 90                	xchg   ax,ax

c000b2a4 <HardDiskController::~HardDiskController()>:
c000b2a4:	83 ec 0c             	sub    esp,0xc
c000b2a7:	ba 88 e7 01 c0       	mov    edx,0xc001e788
c000b2ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2b0:	89 10                	mov    DWORD PTR [eax],edx
c000b2b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2b6:	83 ec 0c             	sub    esp,0xc
c000b2b9:	50                   	push   eax
c000b2ba:	e8 6d fb ff ff       	call   c000ae2c <Device::~Device()>
c000b2bf:	83 c4 10             	add    esp,0x10
c000b2c2:	90                   	nop
c000b2c3:	83 c4 0c             	add    esp,0xc
c000b2c6:	c3                   	ret    
c000b2c7:	90                   	nop

c000b2c8 <HardDiskController::~HardDiskController()>:
c000b2c8:	83 ec 0c             	sub    esp,0xc
c000b2cb:	83 ec 0c             	sub    esp,0xc
c000b2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2d2:	e8 cd ff ff ff       	call   c000b2a4 <HardDiskController::~HardDiskController()>
c000b2d7:	83 c4 10             	add    esp,0x10
c000b2da:	83 ec 08             	sub    esp,0x8
c000b2dd:	68 58 01 00 00       	push   0x158
c000b2e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2e6:	e8 3b e7 ff ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c000b2eb:	83 c4 10             	add    esp,0x10
c000b2ee:	83 c4 0c             	add    esp,0xc
c000b2f1:	c3                   	ret    

c000b2f2 <PhysicalDisk::eject()>:
c000b2f2:	83 c8 ff             	or     eax,0xffffffff
c000b2f5:	c3                   	ret    

c000b2f6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000b2f6:	83 ec 0c             	sub    esp,0xc
c000b2f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2fd:	83 ec 08             	sub    esp,0x8
c000b300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b304:	50                   	push   eax
c000b305:	e8 b8 fd ff ff       	call   c000b0c2 <Device::Device(char const*)>
c000b30a:	83 c4 10             	add    esp,0x10
c000b30d:	ba b4 e7 01 c0       	mov    edx,0xc001e7b4
c000b312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b316:	89 10                	mov    DWORD PTR [eax],edx
c000b318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b31c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000b323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b327:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000b32e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b332:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000b33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b340:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b344:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000b34a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b34e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000b358:	90                   	nop
c000b359:	83 c4 0c             	add    esp,0xc
c000b35c:	c3                   	ret    
c000b35d:	90                   	nop

c000b35e <PhysicalDisk::startCache()>:
c000b35e:	56                   	push   esi
c000b35f:	53                   	push   ebx
c000b360:	83 ec 10             	sub    esp,0x10
c000b363:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b367:	6a 44                	push   0x44
c000b369:	e8 0f ba ff ff       	call   c0006d7d <malloc>
c000b36e:	89 c6                	mov    esi,eax
c000b370:	58                   	pop    eax
c000b371:	5a                   	pop    edx
c000b372:	53                   	push   ebx
c000b373:	56                   	push   esi
c000b374:	e8 87 15 00 00       	call   c000c900 <VCache::VCache(PhysicalDisk*)>
c000b379:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000b37f:	83 c4 14             	add    esp,0x14
c000b382:	5b                   	pop    ebx
c000b383:	5e                   	pop    esi
c000b384:	c3                   	ret    
c000b385:	90                   	nop

c000b386 <PhysicalDisk::~PhysicalDisk()>:
c000b386:	83 ec 0c             	sub    esp,0xc
c000b389:	ba b4 e7 01 c0       	mov    edx,0xc001e7b4
c000b38e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b392:	89 10                	mov    DWORD PTR [eax],edx
c000b394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b398:	83 ec 0c             	sub    esp,0xc
c000b39b:	50                   	push   eax
c000b39c:	e8 8b fa ff ff       	call   c000ae2c <Device::~Device()>
c000b3a1:	83 c4 10             	add    esp,0x10
c000b3a4:	90                   	nop
c000b3a5:	83 c4 0c             	add    esp,0xc
c000b3a8:	c3                   	ret    
c000b3a9:	90                   	nop

c000b3aa <PhysicalDisk::~PhysicalDisk()>:
c000b3aa:	83 ec 0c             	sub    esp,0xc
c000b3ad:	83 ec 0c             	sub    esp,0xc
c000b3b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b4:	e8 cd ff ff ff       	call   c000b386 <PhysicalDisk::~PhysicalDisk()>
c000b3b9:	83 c4 10             	add    esp,0x10
c000b3bc:	83 ec 08             	sub    esp,0x8
c000b3bf:	68 6c 01 00 00       	push   0x16c
c000b3c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3c8:	e8 59 e6 ff ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c000b3cd:	83 c4 10             	add    esp,0x10
c000b3d0:	83 c4 0c             	add    esp,0xc
c000b3d3:	c3                   	ret    

c000b3d4 <int_handler>:
c000b3d4:	55                   	push   ebp
c000b3d5:	57                   	push   edi
c000b3d6:	56                   	push   esi
c000b3d7:	53                   	push   ebx
c000b3d8:	83 ec 0c             	sub    esp,0xc
c000b3db:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000b3df:	80 3d 44 32 02 c0 00 	cmp    BYTE PTR ds:0xc0023244,0x0
c000b3e6:	74 0b                	je     c000b3f3 <int_handler+0x1f>
c000b3e8:	fa                   	cli    
c000b3e9:	f4                   	hlt    
c000b3ea:	80 3d 44 32 02 c0 00 	cmp    BYTE PTR ds:0xc0023244,0x0
c000b3f1:	75 f5                	jne    c000b3e8 <int_handler+0x14>
c000b3f3:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000b3f6:	8d 46 e0             	lea    eax,[esi-0x20]
c000b3f9:	83 f8 17             	cmp    eax,0x17
c000b3fc:	76 3e                	jbe    c000b43c <int_handler+0x68>
c000b3fe:	c1 e6 04             	shl    esi,0x4
c000b401:	31 db                	xor    ebx,ebx
c000b403:	8d ae c0 18 02 c0    	lea    ebp,[esi-0x3ffde740]
c000b409:	81 c6 c0 08 02 c0    	add    esi,0xc00208c0
c000b40f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000b413:	85 c0                	test   eax,eax
c000b415:	74 13                	je     c000b42a <int_handler+0x56>
c000b417:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000b41a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000b41e:	74 2a                	je     c000b44a <int_handler+0x76>
c000b420:	83 ec 08             	sub    esp,0x8
c000b423:	52                   	push   edx
c000b424:	57                   	push   edi
c000b425:	ff d0                	call   eax
c000b427:	83 c4 10             	add    esp,0x10
c000b42a:	43                   	inc    ebx
c000b42b:	83 fb 04             	cmp    ebx,0x4
c000b42e:	75 df                	jne    c000b40f <int_handler+0x3b>
c000b430:	83 c4 0c             	add    esp,0xc
c000b433:	31 c0                	xor    eax,eax
c000b435:	5b                   	pop    ebx
c000b436:	31 d2                	xor    edx,edx
c000b438:	5e                   	pop    esi
c000b439:	5f                   	pop    edi
c000b43a:	5d                   	pop    ebp
c000b43b:	c3                   	ret    
c000b43c:	83 ec 0c             	sub    esp,0xc
c000b43f:	50                   	push   eax
c000b440:	e8 5f a7 00 00       	call   c0015ba4 <Hal::endOfInterrupt(int)>
c000b445:	83 c4 10             	add    esp,0x10
c000b448:	eb b4                	jmp    c000b3fe <int_handler+0x2a>
c000b44a:	83 ec 08             	sub    esp,0x8
c000b44d:	52                   	push   edx
c000b44e:	57                   	push   edi
c000b44f:	ff d0                	call   eax
c000b451:	83 c4 10             	add    esp,0x10
c000b454:	83 c4 0c             	add    esp,0xc
c000b457:	5b                   	pop    ebx
c000b458:	5e                   	pop    esi
c000b459:	5f                   	pop    edi
c000b45a:	5d                   	pop    ebp
c000b45b:	c3                   	ret    

c000b45c <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000b45c:	56                   	push   esi
c000b45d:	31 c0                	xor    eax,eax
c000b45f:	53                   	push   ebx
c000b460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b464:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b468:	89 ca                	mov    edx,ecx
c000b46a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b46e:	c1 e2 04             	shl    edx,0x4
c000b471:	83 bc 82 c0 18 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffde740],0x0
c000b479:	74 15                	je     c000b490 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000b47b:	40                   	inc    eax
c000b47c:	83 f8 04             	cmp    eax,0x4
c000b47f:	75 f0                	jne    c000b471 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000b481:	c7 44 24 0c e4 e7 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e7e4
c000b489:	5b                   	pop    ebx
c000b48a:	5e                   	pop    esi
c000b48b:	e9 4d 43 00 00       	jmp    c000f7dd <Krnl::panic(char const*)>
c000b490:	8d 04 88             	lea    eax,[eax+ecx*4]
c000b493:	89 1c 85 c0 18 02 c0 	mov    DWORD PTR [eax*4-0x3ffde740],ebx
c000b49a:	89 34 85 c0 08 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf740],esi
c000b4a1:	5b                   	pop    ebx
c000b4a2:	5e                   	pop    esi
c000b4a3:	c3                   	ret    

c000b4a4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b4a4:	57                   	push   edi
c000b4a5:	8b 15 a8 07 02 c0    	mov    edx,DWORD PTR ds:0xc00207a8
c000b4ab:	56                   	push   esi
c000b4ac:	53                   	push   ebx
c000b4ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b4b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b4b5:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000b4bc:	74 55                	je     c000b513 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6f>
c000b4be:	89 c7                	mov    edi,eax
c000b4c0:	84 c0                	test   al,al
c000b4c2:	74 1e                	je     c000b4e2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c000b4c4:	83 fe 0f             	cmp    esi,0xf
c000b4c7:	0f 8f cc 00 00 00    	jg     c000b599 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf5>
c000b4cd:	0f b6 b6 60 01 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdfea0]
c000b4d4:	66 8b bc 36 60 30 02 c0 	mov    di,WORD PTR [esi+esi*1-0x3ffdcfa0]
c000b4dc:	66 d1 ef             	shr    di,1
c000b4df:	83 e7 01             	and    edi,0x1
c000b4e2:	83 ec 08             	sub    esp,0x8
c000b4e5:	31 db                	xor    ebx,ebx
c000b4e7:	ff 35 e0 46 02 c0    	push   DWORD PTR ds:0xc00246e0
c000b4ed:	68 f1 e7 01 c0       	push   0xc001e7f1
c000b4f2:	e8 10 e6 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c000b4f7:	83 c4 10             	add    esp,0x10
c000b4fa:	a1 e0 46 02 c0       	mov    eax,ds:0xc00246e0
c000b4ff:	85 c0                	test   eax,eax
c000b501:	7f 51                	jg     c000b554 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb0>
c000b503:	83 ec 0c             	sub    esp,0xc
c000b506:	68 08 e8 01 c0       	push   0xc001e808
c000b50b:	e8 cd 42 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c000b510:	83 c4 10             	add    esp,0x10
c000b513:	8d 4e 20             	lea    ecx,[esi+0x20]
c000b516:	31 d2                	xor    edx,edx
c000b518:	89 c8                	mov    eax,ecx
c000b51a:	c1 e0 04             	shl    eax,0x4
c000b51d:	8b 9c 90 c0 18 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffde740]
c000b524:	85 db                	test   ebx,ebx
c000b526:	0f 84 84 00 00 00    	je     c000b5b0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10c>
c000b52c:	42                   	inc    edx
c000b52d:	83 fa 04             	cmp    edx,0x4
c000b530:	75 eb                	jne    c000b51d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c000b532:	83 ec 0c             	sub    esp,0xc
c000b535:	68 5c e8 01 c0       	push   0xc001e85c
c000b53a:	e8 9e 42 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c000b53f:	83 c4 10             	add    esp,0x10
c000b542:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b547:	5b                   	pop    ebx
c000b548:	5e                   	pop    esi
c000b549:	5f                   	pop    edi
c000b54a:	c3                   	ret    
c000b54b:	43                   	inc    ebx
c000b54c:	39 1d e0 46 02 c0    	cmp    DWORD PTR ds:0xc00246e0,ebx
c000b552:	7e af                	jle    c000b503 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c000b554:	83 ec 08             	sub    esp,0x8
c000b557:	56                   	push   esi
c000b558:	ff 34 9d 00 47 02 c0 	push   DWORD PTR [ebx*4-0x3ffdb900]
c000b55f:	e8 8c 08 01 00       	call   c001bdf0 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000b564:	83 c4 10             	add    esp,0x10
c000b567:	84 c0                	test   al,al
c000b569:	74 e0                	je     c000b54b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa7>
c000b56b:	50                   	push   eax
c000b56c:	89 f8                	mov    eax,edi
c000b56e:	0f b6 f8             	movzx  edi,al
c000b571:	8d 46 20             	lea    eax,[esi+0x20]
c000b574:	57                   	push   edi
c000b575:	0f b6 c0             	movzx  eax,al
c000b578:	6a 00                	push   0x0
c000b57a:	50                   	push   eax
c000b57b:	89 f0                	mov    eax,esi
c000b57d:	6a 00                	push   0x0
c000b57f:	0f b6 c0             	movzx  eax,al
c000b582:	6a 00                	push   0x0
c000b584:	50                   	push   eax
c000b585:	ff 34 9d 00 47 02 c0 	push   DWORD PTR [ebx*4-0x3ffdb900]
c000b58c:	e8 c9 09 01 00       	call   c001bf5a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000b591:	83 c4 20             	add    esp,0x20
c000b594:	e9 7a ff ff ff       	jmp    c000b513 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6f>
c000b599:	83 ec 0c             	sub    esp,0xc
c000b59c:	31 ff                	xor    edi,edi
c000b59e:	68 24 e8 01 c0       	push   0xc001e824
c000b5a3:	e8 35 42 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c000b5a8:	83 c4 10             	add    esp,0x10
c000b5ab:	e9 32 ff ff ff       	jmp    c000b4e2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c000b5b0:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b5b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b5b7:	89 14 85 c0 18 02 c0 	mov    DWORD PTR [eax*4-0x3ffde740],edx
c000b5be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b5c2:	5b                   	pop    ebx
c000b5c3:	89 14 85 c0 08 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf740],edx
c000b5ca:	89 f0                	mov    eax,esi
c000b5cc:	5e                   	pop    esi
c000b5cd:	5f                   	pop    edi
c000b5ce:	c3                   	ret    

c000b5cf <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000b5cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5d3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b5d7:	c1 e0 04             	shl    eax,0x4
c000b5da:	8d 50 10             	lea    edx,[eax+0x10]
c000b5dd:	39 88 c0 18 02 c0    	cmp    DWORD PTR [eax-0x3ffde740],ecx
c000b5e3:	74 08                	je     c000b5ed <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000b5e5:	83 c0 04             	add    eax,0x4
c000b5e8:	39 d0                	cmp    eax,edx
c000b5ea:	75 f1                	jne    c000b5dd <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000b5ec:	c3                   	ret    
c000b5ed:	c7 80 c0 18 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde740],0x0
c000b5f7:	c7 80 c0 08 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf740],0x0
c000b601:	eb e2                	jmp    c000b5e5 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000b603 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b603:	53                   	push   ebx
c000b604:	83 ec 08             	sub    esp,0x8
c000b607:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b60b:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000b610:	74 0e                	je     c000b620 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000b612:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c000b617:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c000b61e:	75 37                	jne    c000b657 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000b620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b624:	83 c0 20             	add    eax,0x20
c000b627:	c1 e0 04             	shl    eax,0x4
c000b62a:	8d 50 10             	lea    edx,[eax+0x10]
c000b62d:	39 98 c0 18 02 c0    	cmp    DWORD PTR [eax-0x3ffde740],ebx
c000b633:	74 0c                	je     c000b641 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000b635:	83 c0 04             	add    eax,0x4
c000b638:	39 d0                	cmp    eax,edx
c000b63a:	75 f1                	jne    c000b62d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000b63c:	83 c4 08             	add    esp,0x8
c000b63f:	5b                   	pop    ebx
c000b640:	c3                   	ret    
c000b641:	c7 80 c0 18 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde740],0x0
c000b64b:	c7 80 c0 08 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf740],0x0
c000b655:	eb de                	jmp    c000b635 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000b657:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000b65c:	7f 11                	jg     c000b66f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000b65e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b662:	0f b6 80 60 01 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfea0]
c000b669:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b66d:	eb b1                	jmp    c000b620 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000b66f:	83 ec 0c             	sub    esp,0xc
c000b672:	68 15 e8 01 c0       	push   0xc001e815
c000b677:	e8 61 41 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c000b67c:	83 c4 10             	add    esp,0x10
c000b67f:	eb 9f                	jmp    c000b620 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000b681 <setupINTS()>:
c000b681:	31 c0                	xor    eax,eax
c000b683:	c7 80 c0 18 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde740],0x0
c000b68d:	c7 80 c0 08 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf740],0x0
c000b697:	c7 80 c4 18 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde73c],0x0
c000b6a1:	c7 80 c4 08 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf73c],0x0
c000b6ab:	c7 80 c8 18 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde738],0x0
c000b6b5:	c7 80 c8 08 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf738],0x0
c000b6bf:	c7 80 cc 18 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde734],0x0
c000b6c9:	c7 80 cc 08 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf734],0x0
c000b6d3:	83 c0 10             	add    eax,0x10
c000b6d6:	3d 00 10 00 00       	cmp    eax,0x1000
c000b6db:	75 a6                	jne    c000b683 <setupINTS()+0x2>
c000b6dd:	c3                   	ret    

c000b6de <convertLegacyIRQNumber(int)>:
c000b6de:	83 ec 0c             	sub    esp,0xc
c000b6e1:	8b 15 a8 07 02 c0    	mov    edx,DWORD PTR ds:0xc00207a8
c000b6e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6eb:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000b6f2:	74 0c                	je     c000b700 <convertLegacyIRQNumber(int)+0x22>
c000b6f4:	83 f8 0f             	cmp    eax,0xf
c000b6f7:	7f 0b                	jg     c000b704 <convertLegacyIRQNumber(int)+0x26>
c000b6f9:	0f b6 80 60 01 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfea0]
c000b700:	83 c4 0c             	add    esp,0xc
c000b703:	c3                   	ret    
c000b704:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b708:	83 ec 0c             	sub    esp,0xc
c000b70b:	68 24 e8 01 c0       	push   0xc001e824
c000b710:	e8 c8 40 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c000b715:	83 c4 10             	add    esp,0x10
c000b718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b71c:	83 c4 0c             	add    esp,0xc
c000b71f:	c3                   	ret    

c000b720 <startGUI(void*)>:
c000b720:	55                   	push   ebp
c000b721:	89 e5                	mov    ebp,esp
c000b723:	53                   	push   ebx
c000b724:	83 ec 04             	sub    esp,0x4
c000b727:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c000b72c:	48                   	dec    eax
c000b72d:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c000b732:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c000b737:	85 c0                	test   eax,eax
c000b739:	75 01                	jne    c000b73c <startGUI(void*)+0x1c>
c000b73b:	fb                   	sti    
c000b73c:	8b 1d a8 07 02 c0    	mov    ebx,DWORD PTR ds:0xc00207a8
c000b742:	83 ec 08             	sub    esp,0x8
c000b745:	6a 01                	push   0x1
c000b747:	68 81 e8 01 c0       	push   0xc001e881
c000b74c:	e8 31 6b 00 00       	call   c0012282 <Thr::loadDLL(char const*, bool)>
c000b751:	83 c4 10             	add    esp,0x10
c000b754:	83 ec 08             	sub    esp,0x8
c000b757:	53                   	push   ebx
c000b758:	50                   	push   eax
c000b759:	e8 55 6d 00 00       	call   c00124b3 <Thr::executeDLL(unsigned long, void*)>
c000b75e:	83 c4 10             	add    esp,0x10
c000b761:	8b 1d a8 07 02 c0    	mov    ebx,DWORD PTR ds:0xc00207a8
c000b767:	83 ec 08             	sub    esp,0x8
c000b76a:	6a 01                	push   0x1
c000b76c:	68 9b e8 01 c0       	push   0xc001e89b
c000b771:	e8 0c 6b 00 00       	call   c0012282 <Thr::loadDLL(char const*, bool)>
c000b776:	83 c4 10             	add    esp,0x10
c000b779:	83 ec 08             	sub    esp,0x8
c000b77c:	53                   	push   ebx
c000b77d:	50                   	push   eax
c000b77e:	e8 30 6d 00 00       	call   c00124b3 <Thr::executeDLL(unsigned long, void*)>
c000b783:	83 c4 10             	add    esp,0x10
c000b786:	90                   	nop
c000b787:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000b78a:	c9                   	leave  
c000b78b:	c3                   	ret    

c000b78c <startGUIVESA(void*)>:
c000b78c:	55                   	push   ebp
c000b78d:	89 e5                	mov    ebp,esp
c000b78f:	53                   	push   ebx
c000b790:	83 ec 04             	sub    esp,0x4
c000b793:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c000b798:	48                   	dec    eax
c000b799:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c000b79e:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c000b7a3:	85 c0                	test   eax,eax
c000b7a5:	75 01                	jne    c000b7a8 <startGUIVESA(void*)+0x1c>
c000b7a7:	fb                   	sti    
c000b7a8:	8b 1d a8 07 02 c0    	mov    ebx,DWORD PTR ds:0xc00207a8
c000b7ae:	83 ec 08             	sub    esp,0x8
c000b7b1:	6a 01                	push   0x1
c000b7b3:	68 b9 e8 01 c0       	push   0xc001e8b9
c000b7b8:	e8 c5 6a 00 00       	call   c0012282 <Thr::loadDLL(char const*, bool)>
c000b7bd:	83 c4 10             	add    esp,0x10
c000b7c0:	83 ec 08             	sub    esp,0x8
c000b7c3:	53                   	push   ebx
c000b7c4:	50                   	push   eax
c000b7c5:	e8 e9 6c 00 00       	call   c00124b3 <Thr::executeDLL(unsigned long, void*)>
c000b7ca:	83 c4 10             	add    esp,0x10
c000b7cd:	8b 1d a8 07 02 c0    	mov    ebx,DWORD PTR ds:0xc00207a8
c000b7d3:	83 ec 08             	sub    esp,0x8
c000b7d6:	6a 01                	push   0x1
c000b7d8:	68 9b e8 01 c0       	push   0xc001e89b
c000b7dd:	e8 a0 6a 00 00       	call   c0012282 <Thr::loadDLL(char const*, bool)>
c000b7e2:	83 c4 10             	add    esp,0x10
c000b7e5:	83 ec 08             	sub    esp,0x8
c000b7e8:	53                   	push   ebx
c000b7e9:	50                   	push   eax
c000b7ea:	e8 c4 6c 00 00       	call   c00124b3 <Thr::executeDLL(unsigned long, void*)>
c000b7ef:	83 c4 10             	add    esp,0x10
c000b7f2:	90                   	nop
c000b7f3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000b7f6:	c9                   	leave  
c000b7f7:	c3                   	ret    

c000b7f8 <sendKeyToTerminal(unsigned char)>:
c000b7f8:	55                   	push   ebp
c000b7f9:	89 e5                	mov    ebp,esp
c000b7fb:	83 ec 28             	sub    esp,0x28
c000b7fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b801:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000b804:	a1 f4 07 02 c0       	mov    eax,ds:0xc00207f4
c000b809:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000b80d:	83 ec 08             	sub    esp,0x8
c000b810:	52                   	push   edx
c000b811:	50                   	push   eax
c000b812:	e8 d1 c8 ff ff       	call   c00080e8 <VgaText::receiveKey(unsigned char)>
c000b817:	83 c4 10             	add    esp,0x10
c000b81a:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000b81e:	0f 85 8f 00 00 00    	jne    c000b8b3 <sendKeyToTerminal(unsigned char)+0xbb>
c000b824:	fa                   	cli    
c000b825:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c000b82a:	40                   	inc    eax
c000b82b:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c000b830:	a1 84 3c 02 c0       	mov    eax,ds:0xc0023c84
c000b835:	40                   	inc    eax
c000b836:	a3 84 3c 02 c0       	mov    ds:0xc0023c84,eax
c000b83b:	a1 c0 28 02 c0       	mov    eax,ds:0xc00228c0
c000b840:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000b843:	c7 05 c0 28 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00228c0,0x0
c000b84d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000b851:	74 1f                	je     c000b872 <sendKeyToTerminal(unsigned char)+0x7a>
c000b853:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000b856:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000b859:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000b85c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b85f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000b862:	83 ec 0c             	sub    esp,0xc
c000b865:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b868:	e8 af 78 00 00       	call   c001311c <unblockTask(ThreadControlBlock*)>
c000b86d:	83 c4 10             	add    esp,0x10
c000b870:	eb db                	jmp    c000b84d <sendKeyToTerminal(unsigned char)+0x55>
c000b872:	a1 84 3c 02 c0       	mov    eax,ds:0xc0023c84
c000b877:	48                   	dec    eax
c000b878:	a3 84 3c 02 c0       	mov    ds:0xc0023c84,eax
c000b87d:	a1 84 3c 02 c0       	mov    eax,ds:0xc0023c84
c000b882:	85 c0                	test   eax,eax
c000b884:	75 18                	jne    c000b89e <sendKeyToTerminal(unsigned char)+0xa6>
c000b886:	a1 80 3c 02 c0       	mov    eax,ds:0xc0023c80
c000b88b:	85 c0                	test   eax,eax
c000b88d:	74 0f                	je     c000b89e <sendKeyToTerminal(unsigned char)+0xa6>
c000b88f:	c7 05 80 3c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023c80,0x0
c000b899:	e8 c2 73 00 00       	call   c0012c60 <schedule()>
c000b89e:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c000b8a3:	48                   	dec    eax
c000b8a4:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c000b8a9:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c000b8ae:	85 c0                	test   eax,eax
c000b8b0:	75 01                	jne    c000b8b3 <sendKeyToTerminal(unsigned char)+0xbb>
c000b8b2:	fb                   	sti    
c000b8b3:	90                   	nop
c000b8b4:	c9                   	leave  
c000b8b5:	c3                   	ret    

c000b8b6 <sendKeyboardToken(KeyboardToken)>:
c000b8b6:	55                   	push   ebp
c000b8b7:	89 e5                	mov    ebp,esp
c000b8b9:	83 ec 18             	sub    esp,0x18
c000b8bc:	e8 e1 41 00 00       	call   c000faa2 <Krnl::userIOReceived()>
c000b8c1:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000b8c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8c7:	0f b7 c0             	movzx  eax,ax
c000b8ca:	83 f2 01             	xor    edx,0x1
c000b8cd:	88 90 e0 28 02 c0    	mov    BYTE PTR [eax-0x3ffdd720],dl
c000b8d3:	a1 c8 28 02 c0       	mov    eax,ds:0xc00228c8
c000b8d8:	85 c0                	test   eax,eax
c000b8da:	74 24                	je     c000b900 <sendKeyboardToken(KeyboardToken)+0x4a>
c000b8dc:	8b 0d c8 28 02 c0    	mov    ecx,DWORD PTR ds:0xc00228c8
c000b8e2:	83 ec 04             	sub    esp,0x4
c000b8e5:	68 e0 28 02 c0       	push   0xc00228e0
c000b8ea:	83 ec 08             	sub    esp,0x8
c000b8ed:	89 e2                	mov    edx,esp
c000b8ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8f2:	89 02                	mov    DWORD PTR [edx],eax
c000b8f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b8f7:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000b8fb:	ff d1                	call   ecx
c000b8fd:	83 c4 10             	add    esp,0x10
c000b900:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000b904:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000b907:	a0 e8 2c 02 c0       	mov    al,ds:0xc0022ce8
c000b90c:	38 c2                	cmp    dl,al
c000b90e:	74 1c                	je     c000b92c <sendKeyboardToken(KeyboardToken)+0x76>
c000b910:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000b913:	a2 e8 2c 02 c0       	mov    ds:0xc0022ce8,al
c000b918:	a0 e8 2c 02 c0       	mov    al,ds:0xc0022ce8
c000b91d:	0f b6 c0             	movzx  eax,al
c000b920:	83 ec 0c             	sub    esp,0xc
c000b923:	50                   	push   eax
c000b924:	e8 15 bf ff ff       	call   c000783e <setTerminalScrollLock(bool)>
c000b929:	83 c4 10             	add    esp,0x10
c000b92c:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000b92f:	84 c0                	test   al,al
c000b931:	0f 84 ae 00 00 00    	je     c000b9e5 <sendKeyboardToken(KeyboardToken)+0x12f>
c000b937:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b93a:	66 3d 10 03          	cmp    ax,0x310
c000b93e:	75 06                	jne    c000b946 <sendKeyboardToken(KeyboardToken)+0x90>
c000b940:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000b946:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b949:	66 3d 11 03          	cmp    ax,0x311
c000b94d:	75 06                	jne    c000b955 <sendKeyboardToken(KeyboardToken)+0x9f>
c000b94f:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000b955:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b958:	66 3d 12 03          	cmp    ax,0x312
c000b95c:	75 06                	jne    c000b964 <sendKeyboardToken(KeyboardToken)+0xae>
c000b95e:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000b964:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b967:	66 3d 13 03          	cmp    ax,0x313
c000b96b:	75 06                	jne    c000b973 <sendKeyboardToken(KeyboardToken)+0xbd>
c000b96d:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000b973:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b976:	66 3d 14 03          	cmp    ax,0x314
c000b97a:	75 06                	jne    c000b982 <sendKeyboardToken(KeyboardToken)+0xcc>
c000b97c:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000b982:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b985:	66 3d 15 03          	cmp    ax,0x315
c000b989:	75 06                	jne    c000b991 <sendKeyboardToken(KeyboardToken)+0xdb>
c000b98b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000b991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b994:	66 3d 16 03          	cmp    ax,0x316
c000b998:	75 06                	jne    c000b9a0 <sendKeyboardToken(KeyboardToken)+0xea>
c000b99a:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000b9a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b9a3:	66 3d 17 03          	cmp    ax,0x317
c000b9a7:	75 06                	jne    c000b9af <sendKeyboardToken(KeyboardToken)+0xf9>
c000b9a9:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000b9af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b9b2:	66 3d 18 03          	cmp    ax,0x318
c000b9b6:	75 06                	jne    c000b9be <sendKeyboardToken(KeyboardToken)+0x108>
c000b9b8:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000b9be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b9c1:	66 3d 19 03          	cmp    ax,0x319
c000b9c5:	75 06                	jne    c000b9cd <sendKeyboardToken(KeyboardToken)+0x117>
c000b9c7:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000b9cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b9d0:	66 3d 1a 03          	cmp    ax,0x31a
c000b9d4:	0f 85 c9 00 00 00    	jne    c000baa3 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000b9da:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000b9e0:	e9 be 00 00 00       	jmp    c000baa3 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000b9e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b9e8:	66 3d 10 03          	cmp    ax,0x310
c000b9ec:	75 0a                	jne    c000b9f8 <sendKeyboardToken(KeyboardToken)+0x142>
c000b9ee:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000b9f4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b9f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b9fb:	66 3d 11 03          	cmp    ax,0x311
c000b9ff:	75 0a                	jne    c000ba0b <sendKeyboardToken(KeyboardToken)+0x155>
c000ba01:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000ba07:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ba0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba0e:	66 3d 12 03          	cmp    ax,0x312
c000ba12:	75 0a                	jne    c000ba1e <sendKeyboardToken(KeyboardToken)+0x168>
c000ba14:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000ba1a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ba1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba21:	66 3d 13 03          	cmp    ax,0x313
c000ba25:	75 0a                	jne    c000ba31 <sendKeyboardToken(KeyboardToken)+0x17b>
c000ba27:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000ba2d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ba31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba34:	66 3d 14 03          	cmp    ax,0x314
c000ba38:	75 0a                	jne    c000ba44 <sendKeyboardToken(KeyboardToken)+0x18e>
c000ba3a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000ba40:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ba44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba47:	66 3d 15 03          	cmp    ax,0x315
c000ba4b:	75 0a                	jne    c000ba57 <sendKeyboardToken(KeyboardToken)+0x1a1>
c000ba4d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000ba53:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ba57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba5a:	66 3d 16 03          	cmp    ax,0x316
c000ba5e:	75 0a                	jne    c000ba6a <sendKeyboardToken(KeyboardToken)+0x1b4>
c000ba60:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000ba66:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ba6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba6d:	66 3d 17 03          	cmp    ax,0x317
c000ba71:	75 0a                	jne    c000ba7d <sendKeyboardToken(KeyboardToken)+0x1c7>
c000ba73:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000ba79:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ba7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba80:	66 3d 18 03          	cmp    ax,0x318
c000ba84:	75 0a                	jne    c000ba90 <sendKeyboardToken(KeyboardToken)+0x1da>
c000ba86:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000ba8c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ba90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba93:	66 3d 19 03          	cmp    ax,0x319
c000ba97:	75 0a                	jne    c000baa3 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000ba99:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000ba9f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000baa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000baa6:	66 3d 00 02          	cmp    ax,0x200
c000baaa:	75 2c                	jne    c000bad8 <sendKeyboardToken(KeyboardToken)+0x222>
c000baac:	a0 e0 2c 02 c0       	mov    al,ds:0xc0022ce0
c000bab1:	83 f0 01             	xor    eax,0x1
c000bab4:	84 c0                	test   al,al
c000bab6:	74 20                	je     c000bad8 <sendKeyboardToken(KeyboardToken)+0x222>
c000bab8:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c000babd:	6a 01                	push   0x1
c000babf:	6a 00                	push   0x0
c000bac1:	68 20 b7 00 c0       	push   0xc000b720
c000bac6:	50                   	push   eax
c000bac7:	e8 78 6f 00 00       	call   c0012a44 <Process::createThread(void (*)(void*), void*, int)>
c000bacc:	83 c4 10             	add    esp,0x10
c000bacf:	c6 05 e0 2c 02 c0 01 	mov    BYTE PTR ds:0xc0022ce0,0x1
c000bad6:	eb 33                	jmp    c000bb0b <sendKeyboardToken(KeyboardToken)+0x255>
c000bad8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000badb:	66 3d 01 02          	cmp    ax,0x201
c000badf:	75 2a                	jne    c000bb0b <sendKeyboardToken(KeyboardToken)+0x255>
c000bae1:	a0 e0 2c 02 c0       	mov    al,ds:0xc0022ce0
c000bae6:	83 f0 01             	xor    eax,0x1
c000bae9:	84 c0                	test   al,al
c000baeb:	74 1e                	je     c000bb0b <sendKeyboardToken(KeyboardToken)+0x255>
c000baed:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c000baf2:	6a 01                	push   0x1
c000baf4:	6a 00                	push   0x0
c000baf6:	68 8c b7 00 c0       	push   0xc000b78c
c000bafb:	50                   	push   eax
c000bafc:	e8 43 6f 00 00       	call   c0012a44 <Process::createThread(void (*)(void*), void*, int)>
c000bb01:	83 c4 10             	add    esp,0x10
c000bb04:	c6 05 e0 2c 02 c0 01 	mov    BYTE PTR ds:0xc0022ce0,0x1
c000bb0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bb0e:	66 3d 1d 03          	cmp    ax,0x31d
c000bb12:	75 06                	jne    c000bb1a <sendKeyboardToken(KeyboardToken)+0x264>
c000bb14:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000bb1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bb1d:	66 3d 1c 03          	cmp    ax,0x31c
c000bb21:	75 06                	jne    c000bb29 <sendKeyboardToken(KeyboardToken)+0x273>
c000bb23:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000bb29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bb2c:	66 3d 1b 03          	cmp    ax,0x31b
c000bb30:	75 06                	jne    c000bb38 <sendKeyboardToken(KeyboardToken)+0x282>
c000bb32:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000bb38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bb3b:	66 3d 1e 03          	cmp    ax,0x31e
c000bb3f:	75 06                	jne    c000bb47 <sendKeyboardToken(KeyboardToken)+0x291>
c000bb41:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000bb47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bb4a:	66 3d 1f 03          	cmp    ax,0x31f
c000bb4e:	75 06                	jne    c000bb56 <sendKeyboardToken(KeyboardToken)+0x2a0>
c000bb50:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000bb56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bb59:	66 3d 1a 03          	cmp    ax,0x31a
c000bb5d:	75 06                	jne    c000bb65 <sendKeyboardToken(KeyboardToken)+0x2af>
c000bb5f:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000bb65:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000bb69:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000bb6c:	83 f0 01             	xor    eax,0x1
c000bb6f:	84 c0                	test   al,al
c000bb71:	74 77                	je     c000bbea <sendKeyboardToken(KeyboardToken)+0x334>
c000bb73:	a0 e1 29 02 c0       	mov    al,ds:0xc00229e1
c000bb78:	84 c0                	test   al,al
c000bb7a:	74 41                	je     c000bbbd <sendKeyboardToken(KeyboardToken)+0x307>
c000bb7c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000bb80:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000bb84:	74 2b                	je     c000bbb1 <sendKeyboardToken(KeyboardToken)+0x2fb>
c000bb86:	8b 15 e4 2c 02 c0    	mov    edx,DWORD PTR ds:0xc0022ce4
c000bb8c:	89 d0                	mov    eax,edx
c000bb8e:	c1 e0 02             	shl    eax,0x2
c000bb91:	01 d0                	add    eax,edx
c000bb93:	01 c0                	add    eax,eax
c000bb95:	a3 e4 2c 02 c0       	mov    ds:0xc0022ce4,eax
c000bb9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bb9d:	0f b7 c0             	movzx  eax,ax
c000bba0:	8d 50 d0             	lea    edx,[eax-0x30]
c000bba3:	a1 e4 2c 02 c0       	mov    eax,ds:0xc0022ce4
c000bba8:	01 d0                	add    eax,edx
c000bbaa:	a3 e4 2c 02 c0       	mov    ds:0xc0022ce4,eax
c000bbaf:	eb 6d                	jmp    c000bc1e <sendKeyboardToken(KeyboardToken)+0x368>
c000bbb1:	c7 05 e4 2c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ce4,0x0
c000bbbb:	eb 61                	jmp    c000bc1e <sendKeyboardToken(KeyboardToken)+0x368>
c000bbbd:	a1 e4 2c 02 c0       	mov    eax,ds:0xc0022ce4
c000bbc2:	85 c0                	test   eax,eax
c000bbc4:	74 18                	je     c000bbde <sendKeyboardToken(KeyboardToken)+0x328>
c000bbc6:	a1 e4 2c 02 c0       	mov    eax,ds:0xc0022ce4
c000bbcb:	0f b6 c0             	movzx  eax,al
c000bbce:	83 ec 0c             	sub    esp,0xc
c000bbd1:	50                   	push   eax
c000bbd2:	e8 21 fc ff ff       	call   c000b7f8 <sendKeyToTerminal(unsigned char)>
c000bbd7:	83 c4 10             	add    esp,0x10
c000bbda:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000bbde:	c7 05 e4 2c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ce4,0x0
c000bbe8:	eb 34                	jmp    c000bc1e <sendKeyboardToken(KeyboardToken)+0x368>
c000bbea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bbed:	66 3d 01 01          	cmp    ax,0x101
c000bbf1:	75 2b                	jne    c000bc1e <sendKeyboardToken(KeyboardToken)+0x368>
c000bbf3:	a1 e4 2c 02 c0       	mov    eax,ds:0xc0022ce4
c000bbf8:	85 c0                	test   eax,eax
c000bbfa:	74 18                	je     c000bc14 <sendKeyboardToken(KeyboardToken)+0x35e>
c000bbfc:	a1 e4 2c 02 c0       	mov    eax,ds:0xc0022ce4
c000bc01:	0f b6 c0             	movzx  eax,al
c000bc04:	83 ec 0c             	sub    esp,0xc
c000bc07:	50                   	push   eax
c000bc08:	e8 eb fb ff ff       	call   c000b7f8 <sendKeyToTerminal(unsigned char)>
c000bc0d:	83 c4 10             	add    esp,0x10
c000bc10:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000bc14:	c7 05 e4 2c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ce4,0x0
c000bc1e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000bc21:	83 f0 01             	xor    eax,0x1
c000bc24:	84 c0                	test   al,al
c000bc26:	74 4c                	je     c000bc74 <sendKeyboardToken(KeyboardToken)+0x3be>
c000bc28:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000bc2b:	83 f0 01             	xor    eax,0x1
c000bc2e:	84 c0                	test   al,al
c000bc30:	74 42                	je     c000bc74 <sendKeyboardToken(KeyboardToken)+0x3be>
c000bc32:	a0 e0 29 02 c0       	mov    al,ds:0xc00229e0
c000bc37:	83 f0 01             	xor    eax,0x1
c000bc3a:	84 c0                	test   al,al
c000bc3c:	74 36                	je     c000bc74 <sendKeyboardToken(KeyboardToken)+0x3be>
c000bc3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bc41:	66 83 f8 1f          	cmp    ax,0x1f
c000bc45:	76 09                	jbe    c000bc50 <sendKeyboardToken(KeyboardToken)+0x39a>
c000bc47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bc4a:	66 83 f8 7e          	cmp    ax,0x7e
c000bc4e:	76 12                	jbe    c000bc62 <sendKeyboardToken(KeyboardToken)+0x3ac>
c000bc50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bc53:	66 83 f8 0a          	cmp    ax,0xa
c000bc57:	74 09                	je     c000bc62 <sendKeyboardToken(KeyboardToken)+0x3ac>
c000bc59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bc5c:	66 83 f8 08          	cmp    ax,0x8
c000bc60:	75 12                	jne    c000bc74 <sendKeyboardToken(KeyboardToken)+0x3be>
c000bc62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bc65:	0f b6 c0             	movzx  eax,al
c000bc68:	83 ec 0c             	sub    esp,0xc
c000bc6b:	50                   	push   eax
c000bc6c:	e8 87 fb ff ff       	call   c000b7f8 <sendKeyToTerminal(unsigned char)>
c000bc71:	83 c4 10             	add    esp,0x10
c000bc74:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000bc77:	83 f0 01             	xor    eax,0x1
c000bc7a:	84 c0                	test   al,al
c000bc7c:	74 4f                	je     c000bccd <sendKeyboardToken(KeyboardToken)+0x417>
c000bc7e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000bc81:	83 f0 01             	xor    eax,0x1
c000bc84:	84 c0                	test   al,al
c000bc86:	74 45                	je     c000bccd <sendKeyboardToken(KeyboardToken)+0x417>
c000bc88:	a0 e0 29 02 c0       	mov    al,ds:0xc00229e0
c000bc8d:	84 c0                	test   al,al
c000bc8f:	74 3c                	je     c000bccd <sendKeyboardToken(KeyboardToken)+0x417>
c000bc91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bc94:	66 83 f8 3f          	cmp    ax,0x3f
c000bc98:	76 33                	jbe    c000bccd <sendKeyboardToken(KeyboardToken)+0x417>
c000bc9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bc9d:	66 83 f8 7f          	cmp    ax,0x7f
c000bca1:	77 2a                	ja     c000bccd <sendKeyboardToken(KeyboardToken)+0x417>
c000bca3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bca6:	88 c2                	mov    dl,al
c000bca8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bcab:	66 83 f8 5f          	cmp    ax,0x5f
c000bcaf:	76 04                	jbe    c000bcb5 <sendKeyboardToken(KeyboardToken)+0x3ff>
c000bcb1:	b0 20                	mov    al,0x20
c000bcb3:	eb 02                	jmp    c000bcb7 <sendKeyboardToken(KeyboardToken)+0x401>
c000bcb5:	b0 00                	mov    al,0x0
c000bcb7:	29 c2                	sub    edx,eax
c000bcb9:	88 d0                	mov    al,dl
c000bcbb:	83 e8 40             	sub    eax,0x40
c000bcbe:	0f b6 c0             	movzx  eax,al
c000bcc1:	83 ec 0c             	sub    esp,0xc
c000bcc4:	50                   	push   eax
c000bcc5:	e8 2e fb ff ff       	call   c000b7f8 <sendKeyToTerminal(unsigned char)>
c000bcca:	83 c4 10             	add    esp,0x10
c000bccd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bcd0:	66 3d 00 03          	cmp    ax,0x300
c000bcd4:	75 0f                	jne    c000bce5 <sendKeyboardToken(KeyboardToken)+0x42f>
c000bcd6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000bcd9:	83 f0 01             	xor    eax,0x1
c000bcdc:	84 c0                	test   al,al
c000bcde:	74 05                	je     c000bce5 <sendKeyboardToken(KeyboardToken)+0x42f>
c000bce0:	e8 5a bb ff ff       	call   c000783f <doTerminalCycle()>
c000bce5:	90                   	nop
c000bce6:	c9                   	leave  
c000bce7:	c3                   	ret    

c000bce8 <clearInternalKeybuffer(VgaText*)>:
c000bce8:	55                   	push   ebp
c000bce9:	89 e5                	mov    ebp,esp
c000bceb:	83 ec 08             	sub    esp,0x8
c000bcee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bcf1:	05 b2 00 00 00       	add    eax,0xb2
c000bcf6:	83 ec 0c             	sub    esp,0xc
c000bcf9:	50                   	push   eax
c000bcfa:	e8 c5 47 ff ff       	call   c00004c4 <strlen>
c000bcff:	83 c4 10             	add    esp,0x10
c000bd02:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bd05:	81 c2 b2 00 00 00    	add    edx,0xb2
c000bd0b:	83 ec 04             	sub    esp,0x4
c000bd0e:	50                   	push   eax
c000bd0f:	6a 00                	push   0x0
c000bd11:	52                   	push   edx
c000bd12:	e8 91 47 ff ff       	call   c00004a8 <memset>
c000bd17:	83 c4 10             	add    esp,0x10
c000bd1a:	90                   	nop
c000bd1b:	c9                   	leave  
c000bd1c:	c3                   	ret    

c000bd1d <readKeyboard(VgaText*, char*, unsigned long)>:
c000bd1d:	55                   	push   ebp
c000bd1e:	89 e5                	mov    ebp,esp
c000bd20:	83 ec 18             	sub    esp,0x18
c000bd23:	a1 c8 28 02 c0       	mov    eax,ds:0xc00228c8
c000bd28:	85 c0                	test   eax,eax
c000bd2a:	74 2a                	je     c000bd56 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000bd2c:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000bd32:	8b 0d c8 28 02 c0    	mov    ecx,DWORD PTR ds:0xc00228c8
c000bd38:	83 ec 04             	sub    esp,0x4
c000bd3b:	68 e0 28 02 c0       	push   0xc00228e0
c000bd40:	83 ec 08             	sub    esp,0x8
c000bd43:	89 e2                	mov    edx,esp
c000bd45:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000bd48:	89 02                	mov    DWORD PTR [edx],eax
c000bd4a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000bd4d:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000bd51:	ff d1                	call   ecx
c000bd53:	83 c4 10             	add    esp,0x10
c000bd56:	fb                   	sti    
c000bd57:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000bd5e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000bd62:	0f 84 a1 00 00 00    	je     c000be09 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000bd68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bd6b:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000bd71:	84 c0                	test   al,al
c000bd73:	75 28                	jne    c000bd9d <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000bd75:	fa                   	cli    
c000bd76:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c000bd7b:	40                   	inc    eax
c000bd7c:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c000bd81:	e8 da 6e 00 00       	call   c0012c60 <schedule()>
c000bd86:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c000bd8b:	48                   	dec    eax
c000bd8c:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c000bd91:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c000bd96:	85 c0                	test   eax,eax
c000bd98:	75 ce                	jne    c000bd68 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000bd9a:	fb                   	sti    
c000bd9b:	eb cb                	jmp    c000bd68 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000bd9d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000bda0:	8d 50 01             	lea    edx,[eax+0x1]
c000bda3:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000bda6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bda9:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000bdaf:	88 10                	mov    BYTE PTR [eax],dl
c000bdb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bdb4:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000bdba:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000bdbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bdc0:	05 b2 00 00 00       	add    eax,0xb2
c000bdc5:	83 ec 0c             	sub    esp,0xc
c000bdc8:	50                   	push   eax
c000bdc9:	e8 f6 46 ff ff       	call   c00004c4 <strlen>
c000bdce:	83 c4 10             	add    esp,0x10
c000bdd1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bdd4:	81 c2 b2 00 00 00    	add    edx,0xb2
c000bdda:	8d 4a 01             	lea    ecx,[edx+0x1]
c000bddd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bde0:	81 c2 b2 00 00 00    	add    edx,0xb2
c000bde6:	83 ec 04             	sub    esp,0x4
c000bde9:	50                   	push   eax
c000bdea:	51                   	push   ecx
c000bdeb:	52                   	push   edx
c000bdec:	e8 ef 45 ff ff       	call   c00003e0 <memmove>
c000bdf1:	83 c4 10             	add    esp,0x10
c000bdf4:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000bdf7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000bdfa:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000bdfe:	0f 85 5a ff ff ff    	jne    c000bd5e <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000be04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000be07:	eb 03                	jmp    c000be0c <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000be09:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000be0c:	c9                   	leave  
c000be0d:	c3                   	ret    

c000be0e <Keyboard::Keyboard(char const*)>:
c000be0e:	83 ec 0c             	sub    esp,0xc
c000be11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be15:	83 ec 08             	sub    esp,0x8
c000be18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be1c:	50                   	push   eax
c000be1d:	e8 a0 f2 ff ff       	call   c000b0c2 <Device::Device(char const*)>
c000be22:	83 c4 10             	add    esp,0x10
c000be25:	ba dc e8 01 c0       	mov    edx,0xc001e8dc
c000be2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be2e:	89 10                	mov    DWORD PTR [eax],edx
c000be30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be34:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000be3e:	c6 05 c4 28 02 c0 01 	mov    BYTE PTR ds:0xc00228c4,0x1
c000be45:	90                   	nop
c000be46:	83 c4 0c             	add    esp,0xc
c000be49:	c3                   	ret    

c000be4a <Keyboard::~Keyboard()>:
c000be4a:	83 ec 0c             	sub    esp,0xc
c000be4d:	ba dc e8 01 c0       	mov    edx,0xc001e8dc
c000be52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be56:	89 10                	mov    DWORD PTR [eax],edx
c000be58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be5c:	83 ec 0c             	sub    esp,0xc
c000be5f:	50                   	push   eax
c000be60:	e8 c7 ef ff ff       	call   c000ae2c <Device::~Device()>
c000be65:	83 c4 10             	add    esp,0x10
c000be68:	90                   	nop
c000be69:	83 c4 0c             	add    esp,0xc
c000be6c:	c3                   	ret    
c000be6d:	90                   	nop

c000be6e <Keyboard::~Keyboard()>:
c000be6e:	83 ec 0c             	sub    esp,0xc
c000be71:	83 ec 0c             	sub    esp,0xc
c000be74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be78:	e8 cd ff ff ff       	call   c000be4a <Keyboard::~Keyboard()>
c000be7d:	83 c4 10             	add    esp,0x10
c000be80:	83 ec 08             	sub    esp,0x8
c000be83:	68 5c 01 00 00       	push   0x15c
c000be88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be8c:	e8 95 db ff ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c000be91:	83 c4 10             	add    esp,0x10
c000be94:	83 c4 0c             	add    esp,0xc
c000be97:	c3                   	ret    

c000be98 <LogicalDisk::close(int, int, void*)>:
c000be98:	83 c8 ff             	or     eax,0xffffffff
c000be9b:	c3                   	ret    

c000be9c <LogicalDisk::~LogicalDisk()>:
c000be9c:	83 ec 0c             	sub    esp,0xc
c000be9f:	ba 54 e9 01 c0       	mov    edx,0xc001e954
c000bea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bea8:	89 10                	mov    DWORD PTR [eax],edx
c000beaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beae:	83 ec 0c             	sub    esp,0xc
c000beb1:	50                   	push   eax
c000beb2:	e8 75 ef ff ff       	call   c000ae2c <Device::~Device()>
c000beb7:	83 c4 10             	add    esp,0x10
c000beba:	90                   	nop
c000bebb:	83 c4 0c             	add    esp,0xc
c000bebe:	c3                   	ret    
c000bebf:	90                   	nop

c000bec0 <LogicalDisk::~LogicalDisk()>:
c000bec0:	83 ec 0c             	sub    esp,0xc
c000bec3:	83 ec 0c             	sub    esp,0xc
c000bec6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000beca:	e8 cd ff ff ff       	call   c000be9c <LogicalDisk::~LogicalDisk()>
c000becf:	83 c4 10             	add    esp,0x10
c000bed2:	83 ec 08             	sub    esp,0x8
c000bed5:	68 74 01 00 00       	push   0x174
c000beda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bede:	e8 43 db ff ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c000bee3:	83 c4 10             	add    esp,0x10
c000bee6:	83 c4 0c             	add    esp,0xc
c000bee9:	c3                   	ret    

c000beea <LogicalDisk::open(int, int, void*)>:
c000beea:	83 ec 18             	sub    esp,0x18
c000beed:	68 08 e9 01 c0       	push   0xc001e908
c000bef2:	e8 e6 38 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c000bef7:	83 c8 ff             	or     eax,0xffffffff
c000befa:	83 c4 1c             	add    esp,0x1c
c000befd:	c3                   	ret    

c000befe <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000befe:	53                   	push   ebx
c000beff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bf03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf0b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000bf11:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000bf17:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000bf1d:	77 10                	ja     c000bf2f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000bf1f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000bf25:	89 d3                	mov    ebx,edx
c000bf27:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000bf2d:	72 05                	jb     c000bf34 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000bf2f:	83 c8 ff             	or     eax,0xffffffff
c000bf32:	89 c2                	mov    edx,eax
c000bf34:	5b                   	pop    ebx
c000bf35:	c3                   	ret    

c000bf36 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000bf36:	56                   	push   esi
c000bf37:	83 c8 ff             	or     eax,0xffffffff
c000bf3a:	53                   	push   ebx
c000bf3b:	89 c2                	mov    edx,eax
c000bf3d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bf41:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bf45:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bf49:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000bf4f:	77 27                	ja     c000bf78 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000bf51:	89 d8                	mov    eax,ebx
c000bf53:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000bf59:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000bf5f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf64:	89 c2                	mov    edx,eax
c000bf66:	73 10                	jae    c000bf78 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000bf68:	89 c8                	mov    eax,ecx
c000bf6a:	89 da                	mov    edx,ebx
c000bf6c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000bf72:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000bf78:	5b                   	pop    ebx
c000bf79:	5e                   	pop    esi
c000bf7a:	c3                   	ret    
c000bf7b:	90                   	nop

c000bf7c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000bf7c:	83 ec 1c             	sub    esp,0x1c
c000bf7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bf83:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bf8f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf93:	89 04 24             	mov    DWORD PTR [esp],eax
c000bf96:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf9a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bf9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfa2:	83 ec 08             	sub    esp,0x8
c000bfa5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa9:	50                   	push   eax
c000bfaa:	e8 13 f1 ff ff       	call   c000b0c2 <Device::Device(char const*)>
c000bfaf:	83 c4 10             	add    esp,0x10
c000bfb2:	ba 54 e9 01 c0       	mov    edx,0xc001e954
c000bfb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfbb:	89 10                	mov    DWORD PTR [eax],edx
c000bfbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfc1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bfc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfcc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bfd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfd7:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000bfe1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000bfe5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bfe9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bfed:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000bff3:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000bff9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000bffd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c000:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c004:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000c00a:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000c010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c014:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c018:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000c01e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c022:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000c02c:	90                   	nop
c000c02d:	83 c4 1c             	add    esp,0x1c
c000c030:	c3                   	ret    
c000c031:	90                   	nop

c000c032 <LogicalDisk::assignDriveLetter()>:
c000c032:	55                   	push   ebp
c000c033:	57                   	push   edi
c000c034:	56                   	push   esi
c000c035:	53                   	push   ebx
c000c036:	83 ec 14             	sub    esp,0x14
c000c039:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c03d:	8b 3d 00 2d 02 c0    	mov    edi,DWORD PTR ds:0xc0022d00
c000c043:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000c049:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c04d:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000c053:	8b 3d 04 2d 02 c0    	mov    edi,DWORD PTR ds:0xc0022d04
c000c059:	3c 01                	cmp    al,0x1
c000c05b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000c05f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000c063:	19 c0                	sbb    eax,eax
c000c065:	83 e0 02             	and    eax,0x2
c000c068:	83 c0 41             	add    eax,0x41
c000c06b:	0f be e8             	movsx  ebp,al
c000c06e:	3c 43                	cmp    al,0x43
c000c070:	75 10                	jne    c000c082 <LogicalDisk::assignDriveLetter()+0x50>
c000c072:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000c079:	75 5d                	jne    c000c0d8 <LogicalDisk::assignDriveLetter()+0xa6>
c000c07b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000c080:	75 56                	jne    c000c0d8 <LogicalDisk::assignDriveLetter()+0xa6>
c000c082:	8d 75 bf             	lea    esi,[ebp-0x41]
c000c085:	ba 01 00 00 00       	mov    edx,0x1
c000c08a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000c08e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000c092:	d3 e2                	shl    edx,cl
c000c094:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c098:	89 d7                	mov    edi,edx
c000c09a:	89 d6                	mov    esi,edx
c000c09c:	c1 ff 1f             	sar    edi,0x1f
c000c09f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000c0a3:	21 f9                	and    ecx,edi
c000c0a5:	09 d1                	or     ecx,edx
c000c0a7:	75 2f                	jne    c000c0d8 <LogicalDisk::assignDriveLetter()+0xa6>
c000c0a9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000c0ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c0b1:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000c0b7:	09 f2                	or     edx,esi
c000c0b9:	89 15 00 2d 02 c0    	mov    DWORD PTR ds:0xc0022d00,edx
c000c0bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c0c3:	09 fa                	or     edx,edi
c000c0c5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000c0c9:	89 15 04 2d 02 c0    	mov    DWORD PTR ds:0xc0022d04,edx
c000c0cf:	89 1c bd 20 2d 02 c0 	mov    DWORD PTR [edi*4-0x3ffdd2e0],ebx
c000c0d6:	eb 08                	jmp    c000c0e0 <LogicalDisk::assignDriveLetter()+0xae>
c000c0d8:	45                   	inc    ebp
c000c0d9:	40                   	inc    eax
c000c0da:	3c 5b                	cmp    al,0x5b
c000c0dc:	75 90                	jne    c000c06e <LogicalDisk::assignDriveLetter()+0x3c>
c000c0de:	31 c0                	xor    eax,eax
c000c0e0:	83 c4 14             	add    esp,0x14
c000c0e3:	5b                   	pop    ebx
c000c0e4:	5e                   	pop    esi
c000c0e5:	5f                   	pop    edi
c000c0e6:	5d                   	pop    ebp
c000c0e7:	c3                   	ret    

c000c0e8 <LogicalDisk::mount()>:
c000c0e8:	56                   	push   esi
c000c0e9:	53                   	push   ebx
c000c0ea:	53                   	push   ebx
c000c0eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c0ef:	8b 1d 98 08 02 c0    	mov    ebx,DWORD PTR ds:0xc0020898
c000c0f5:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000c0ff:	85 db                	test   ebx,ebx
c000c101:	74 27                	je     c000c12a <LogicalDisk::mount()+0x42>
c000c103:	51                   	push   ecx
c000c104:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000c10b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c10d:	83 e8 41             	sub    eax,0x41
c000c110:	50                   	push   eax
c000c111:	56                   	push   esi
c000c112:	53                   	push   ebx
c000c113:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c116:	83 c4 10             	add    esp,0x10
c000c119:	84 c0                	test   al,al
c000c11b:	74 08                	je     c000c125 <LogicalDisk::mount()+0x3d>
c000c11d:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000c123:	eb 07                	jmp    c000c12c <LogicalDisk::mount()+0x44>
c000c125:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000c128:	eb d5                	jmp    c000c0ff <LogicalDisk::mount()+0x17>
c000c12a:	31 c0                	xor    eax,eax
c000c12c:	5a                   	pop    edx
c000c12d:	5b                   	pop    ebx
c000c12e:	5e                   	pop    esi
c000c12f:	c3                   	ret    

c000c130 <LogicalDisk::unmount()>:
c000c130:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c134:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000c13e:	c3                   	ret    
c000c13f:	90                   	nop

c000c140 <LogicalDisk::eject()>:
c000c140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c144:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c14a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c14c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c150:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000c153:	90                   	nop

c000c154 <LogicalDisk::unassignDriveLetter()>:
c000c154:	57                   	push   edi
c000c155:	56                   	push   esi
c000c156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c15a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000c161:	84 c9                	test   cl,cl
c000c163:	75 0f                	jne    c000c174 <LogicalDisk::unassignDriveLetter()+0x20>
c000c165:	c7 44 24 0c 2c e9 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e92c
c000c16d:	5e                   	pop    esi
c000c16e:	5f                   	pop    edi
c000c16f:	e9 69 36 00 00       	jmp    c000f7dd <Krnl::panic(char const*)>
c000c174:	83 e9 41             	sub    ecx,0x41
c000c177:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000c17e:	b8 01 00 00 00       	mov    eax,0x1
c000c183:	c7 04 8d 20 2d 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdd2e0],0x0
c000c18e:	d3 e0                	shl    eax,cl
c000c190:	89 c7                	mov    edi,eax
c000c192:	f7 d0                	not    eax
c000c194:	c1 ff 1f             	sar    edi,0x1f
c000c197:	21 05 00 2d 02 c0    	and    DWORD PTR ds:0xc0022d00,eax
c000c19d:	89 fe                	mov    esi,edi
c000c19f:	f7 d6                	not    esi
c000c1a1:	21 35 04 2d 02 c0    	and    DWORD PTR ds:0xc0022d04,esi
c000c1a7:	5e                   	pop    esi
c000c1a8:	5f                   	pop    edi
c000c1a9:	c3                   	ret    

c000c1aa <LogicalDisk::read(unsigned long long, int, void*)>:
c000c1aa:	57                   	push   edi
c000c1ab:	56                   	push   esi
c000c1ac:	53                   	push   ebx
c000c1ad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c1b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c1b5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c1b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c1bd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c1c3:	77 41                	ja     c000c206 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000c1c5:	99                   	cdq    
c000c1c6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000c1cc:	01 c8                	add    eax,ecx
c000c1ce:	11 da                	adc    edx,ebx
c000c1d0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000c1d6:	19 d7                	sbb    edi,edx
c000c1d8:	72 33                	jb     c000c20d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000c1da:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000c1e0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000c1e6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c1ea:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000c1ee:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000c1f4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c1fa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c1fe:	5b                   	pop    ebx
c000c1ff:	5e                   	pop    esi
c000c200:	5f                   	pop    edi
c000c201:	e9 34 0a 00 00       	jmp    c000cc3a <VCache::read(unsigned long long, int, void*)>
c000c206:	b8 05 00 00 00       	mov    eax,0x5
c000c20b:	eb 05                	jmp    c000c212 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000c20d:	b8 07 00 00 00       	mov    eax,0x7
c000c212:	5b                   	pop    ebx
c000c213:	5e                   	pop    esi
c000c214:	5f                   	pop    edi
c000c215:	c3                   	ret    

c000c216 <LogicalDisk::write(unsigned long long, int, void*)>:
c000c216:	57                   	push   edi
c000c217:	56                   	push   esi
c000c218:	53                   	push   ebx
c000c219:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c21d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c221:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c225:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c229:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c22f:	77 41                	ja     c000c272 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000c231:	99                   	cdq    
c000c232:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000c238:	01 c8                	add    eax,ecx
c000c23a:	11 da                	adc    edx,ebx
c000c23c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000c242:	19 d7                	sbb    edi,edx
c000c244:	72 33                	jb     c000c279 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000c246:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000c24c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000c252:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c256:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000c25a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000c260:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c266:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c26a:	5b                   	pop    ebx
c000c26b:	5e                   	pop    esi
c000c26c:	5f                   	pop    edi
c000c26d:	e9 ce 08 00 00       	jmp    c000cb40 <VCache::write(unsigned long long, int, void*)>
c000c272:	b8 05 00 00 00       	mov    eax,0x5
c000c277:	eb 05                	jmp    c000c27e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000c279:	b8 07 00 00 00       	mov    eax,0x7
c000c27e:	5b                   	pop    ebx
c000c27f:	5e                   	pop    esi
c000c280:	5f                   	pop    edi
c000c281:	c3                   	ret    
c000c282:	66 90                	xchg   ax,ax

c000c284 <Mouse::Mouse(char const*)>:
c000c284:	83 ec 0c             	sub    esp,0xc
c000c287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c28b:	83 ec 08             	sub    esp,0x8
c000c28e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c292:	50                   	push   eax
c000c293:	e8 2a ee ff ff       	call   c000b0c2 <Device::Device(char const*)>
c000c298:	83 c4 10             	add    esp,0x10
c000c29b:	ba 80 e9 01 c0       	mov    edx,0xc001e980
c000c2a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2a4:	89 10                	mov    DWORD PTR [eax],edx
c000c2a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2aa:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000c2b4:	90                   	nop
c000c2b5:	83 c4 0c             	add    esp,0xc
c000c2b8:	c3                   	ret    
c000c2b9:	90                   	nop
c000c2ba:	66 90                	xchg   ax,ax

c000c2bc <Mouse::~Mouse()>:
c000c2bc:	83 ec 0c             	sub    esp,0xc
c000c2bf:	ba 80 e9 01 c0       	mov    edx,0xc001e980
c000c2c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2c8:	89 10                	mov    DWORD PTR [eax],edx
c000c2ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2ce:	83 ec 0c             	sub    esp,0xc
c000c2d1:	50                   	push   eax
c000c2d2:	e8 55 eb ff ff       	call   c000ae2c <Device::~Device()>
c000c2d7:	83 c4 10             	add    esp,0x10
c000c2da:	90                   	nop
c000c2db:	83 c4 0c             	add    esp,0xc
c000c2de:	c3                   	ret    
c000c2df:	90                   	nop

c000c2e0 <Mouse::~Mouse()>:
c000c2e0:	83 ec 0c             	sub    esp,0xc
c000c2e3:	83 ec 0c             	sub    esp,0xc
c000c2e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2ea:	e8 cd ff ff ff       	call   c000c2bc <Mouse::~Mouse()>
c000c2ef:	83 c4 10             	add    esp,0x10
c000c2f2:	83 ec 08             	sub    esp,0x8
c000c2f5:	68 58 01 00 00       	push   0x158
c000c2fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2fe:	e8 23 d7 ff ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c000c303:	83 c4 10             	add    esp,0x10
c000c306:	83 c4 0c             	add    esp,0xc
c000c309:	c3                   	ret    

c000c30a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000c30a:	55                   	push   ebp
c000c30b:	57                   	push   edi
c000c30c:	56                   	push   esi
c000c30d:	53                   	push   ebx
c000c30e:	81 ec 28 01 00 00    	sub    esp,0x128
c000c314:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000c31b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000c322:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000c329:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000c330:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c334:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c338:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000c33f:	e8 7a ee ff ff       	call   c000b1be <Device::getName()>
c000c344:	5a                   	pop    edx
c000c345:	59                   	pop    ecx
c000c346:	50                   	push   eax
c000c347:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000c34b:	55                   	push   ebp
c000c34c:	e8 13 42 ff ff       	call   c0000564 <strcpy>
c000c351:	5b                   	pop    ebx
c000c352:	58                   	pop    eax
c000c353:	68 a4 e9 01 c0       	push   0xc001e9a4
c000c358:	55                   	push   ebp
c000c359:	e8 46 43 ff ff       	call   c00006a4 <strcat>
c000c35e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000c365:	e8 13 aa ff ff       	call   c0006d7d <malloc>
c000c36a:	83 c4 0c             	add    esp,0xc
c000c36d:	89 c3                	mov    ebx,eax
c000c36f:	57                   	push   edi
c000c370:	56                   	push   esi
c000c371:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c375:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c379:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000c380:	55                   	push   ebp
c000c381:	50                   	push   eax
c000c382:	e8 f5 fb ff ff       	call   c000bf7c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000c387:	83 c4 14             	add    esp,0x14
c000c38a:	53                   	push   ebx
c000c38b:	e8 a2 fc ff ff       	call   c000c032 <LogicalDisk::assignDriveLetter()>
c000c390:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c393:	e8 50 fd ff ff       	call   c000c0e8 <LogicalDisk::mount()>
c000c398:	58                   	pop    eax
c000c399:	5a                   	pop    edx
c000c39a:	53                   	push   ebx
c000c39b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000c3a2:	e8 83 eb ff ff       	call   c000af2a <Device::addChild(Device*)>
c000c3a7:	81 c4 2c 01 00 00    	add    esp,0x12c
c000c3ad:	5b                   	pop    ebx
c000c3ae:	5e                   	pop    esi
c000c3af:	5f                   	pop    edi
c000c3b0:	5d                   	pop    ebp
c000c3b1:	c3                   	ret    

c000c3b2 <createPartitionsForDisk(PhysicalDisk*)>:
c000c3b2:	55                   	push   ebp
c000c3b3:	57                   	push   edi
c000c3b4:	56                   	push   esi
c000c3b5:	53                   	push   ebx
c000c3b6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000c3bc:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000c3c3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000c3c9:	3d 00 02 00 00       	cmp    eax,0x200
c000c3ce:	74 27                	je     c000c3f7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000c3d0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000c3d6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000c3dc:	83 ec 10             	sub    esp,0x10
c000c3df:	0f a4 f7 0a          	shld   edi,esi,0xa
c000c3e3:	99                   	cdq    
c000c3e4:	c1 e6 0a             	shl    esi,0xa
c000c3e7:	52                   	push   edx
c000c3e8:	89 fd                	mov    ebp,edi
c000c3ea:	50                   	push   eax
c000c3eb:	55                   	push   ebp
c000c3ec:	56                   	push   esi
c000c3ed:	e8 fe 04 01 00       	call   c001c8f0 <__udivdi3>
c000c3f2:	e9 b1 00 00 00       	jmp    c000c4a8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000c3f7:	83 ec 0c             	sub    esp,0xc
c000c3fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c3fc:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000c400:	56                   	push   esi
c000c401:	6a 01                	push   0x1
c000c403:	6a 00                	push   0x0
c000c405:	6a 00                	push   0x0
c000c407:	53                   	push   ebx
c000c408:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000c40b:	83 c4 20             	add    esp,0x20
c000c40e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000c416:	75 0a                	jne    c000c422 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000c418:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000c420:	74 2c                	je     c000c44e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000c422:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c428:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c42e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c434:	83 ec 10             	sub    esp,0x10
c000c437:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c43b:	89 f7                	mov    edi,esi
c000c43d:	c1 e0 0a             	shl    eax,0xa
c000c440:	c1 ff 1f             	sar    edi,0x1f
c000c443:	57                   	push   edi
c000c444:	56                   	push   esi
c000c445:	52                   	push   edx
c000c446:	50                   	push   eax
c000c447:	e8 a4 04 01 00       	call   c001c8f0 <__udivdi3>
c000c44c:	eb 5a                	jmp    c000c4a8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000c44e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000c455:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000c45c:	83 e1 7f             	and    ecx,0x7f
c000c45f:	83 e0 7f             	and    eax,0x7f
c000c462:	01 c1                	add    ecx,eax
c000c464:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000c46b:	83 e0 7f             	and    eax,0x7f
c000c46e:	01 c1                	add    ecx,eax
c000c470:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000c477:	83 e0 7f             	and    eax,0x7f
c000c47a:	00 c1                	add    cl,al
c000c47c:	74 41                	je     c000c4bf <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000c47e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c484:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c48a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c490:	83 ec 10             	sub    esp,0x10
c000c493:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c497:	89 f7                	mov    edi,esi
c000c499:	c1 e0 0a             	shl    eax,0xa
c000c49c:	c1 ff 1f             	sar    edi,0x1f
c000c49f:	57                   	push   edi
c000c4a0:	56                   	push   esi
c000c4a1:	52                   	push   edx
c000c4a2:	50                   	push   eax
c000c4a3:	e8 48 04 01 00       	call   c001c8f0 <__udivdi3>
c000c4a8:	83 c4 14             	add    esp,0x14
c000c4ab:	52                   	push   edx
c000c4ac:	50                   	push   eax
c000c4ad:	6a 00                	push   0x0
c000c4af:	6a 00                	push   0x0
c000c4b1:	53                   	push   ebx
c000c4b2:	e8 53 fe ff ff       	call   c000c30a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000c4b7:	83 c4 20             	add    esp,0x20
c000c4ba:	e9 79 01 00 00       	jmp    c000c638 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000c4bf:	89 f0                	mov    eax,esi
c000c4c1:	31 f6                	xor    esi,esi
c000c4c3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000c4ca:	75 02                	jne    c000c4ce <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000c4cc:	89 f1                	mov    ecx,esi
c000c4ce:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000c4d5:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000c4dc:	c1 e2 08             	shl    edx,0x8
c000c4df:	c1 e7 10             	shl    edi,0x10
c000c4e2:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000c4ea:	09 fa                	or     edx,edi
c000c4ec:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000c4f4:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000c4fb:	83 c0 10             	add    eax,0x10
c000c4fe:	09 fa                	or     edx,edi
c000c500:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000c507:	c1 e7 18             	shl    edi,0x18
c000c50a:	09 fa                	or     edx,edi
c000c50c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000c513:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000c517:	c1 e7 10             	shl    edi,0x10
c000c51a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000c521:	c1 e2 08             	shl    edx,0x8
c000c524:	09 fa                	or     edx,edi
c000c526:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000c52d:	09 fa                	or     edx,edi
c000c52f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000c536:	c1 e7 18             	shl    edi,0x18
c000c539:	09 fa                	or     edx,edi
c000c53b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000c53f:	46                   	inc    esi
c000c540:	83 fe 04             	cmp    esi,0x4
c000c543:	0f 85 7a ff ff ff    	jne    c000c4c3 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000c549:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c54d:	83 f0 01             	xor    eax,0x1
c000c550:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c554:	75 57                	jne    c000c5ad <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000c556:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c55a:	83 f0 01             	xor    eax,0x1
c000c55d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c561:	75 4a                	jne    c000c5ad <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000c563:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000c567:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000c56f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c577:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c57d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c583:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c589:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c58d:	89 f7                	mov    edi,esi
c000c58f:	c1 e0 0a             	shl    eax,0xa
c000c592:	c1 ff 1f             	sar    edi,0x1f
c000c595:	57                   	push   edi
c000c596:	56                   	push   esi
c000c597:	52                   	push   edx
c000c598:	50                   	push   eax
c000c599:	e8 52 03 01 00       	call   c001c8f0 <__udivdi3>
c000c59e:	83 c4 10             	add    esp,0x10
c000c5a1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c5a5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c5a9:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000c5ad:	84 c9                	test   cl,cl
c000c5af:	74 53                	je     c000c604 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000c5b1:	0f b6 c9             	movzx  ecx,cl
c000c5b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c5bc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c5c0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c5c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c5c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c5cc:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000c5d0:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000c5d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c5e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c5e4:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000c5e8:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000c5ec:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000c5f0:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000c5f4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c5f8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c5fc:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000c600:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000c604:	31 ed                	xor    ebp,ebp
c000c606:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000c60a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000c60e:	89 f8                	mov    eax,edi
c000c610:	09 f0                	or     eax,esi
c000c612:	74 1e                	je     c000c632 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000c614:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000c618:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000c61c:	89 d1                	mov    ecx,edx
c000c61e:	09 c1                	or     ecx,eax
c000c620:	74 10                	je     c000c632 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000c622:	83 ec 0c             	sub    esp,0xc
c000c625:	57                   	push   edi
c000c626:	56                   	push   esi
c000c627:	52                   	push   edx
c000c628:	50                   	push   eax
c000c629:	53                   	push   ebx
c000c62a:	e8 db fc ff ff       	call   c000c30a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000c62f:	83 c4 20             	add    esp,0x20
c000c632:	45                   	inc    ebp
c000c633:	83 fd 04             	cmp    ebp,0x4
c000c636:	75 ce                	jne    c000c606 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000c638:	81 c4 5c 02 00 00    	add    esp,0x25c
c000c63e:	5b                   	pop    ebx
c000c63f:	5e                   	pop    esi
c000c640:	5f                   	pop    edi
c000c641:	5d                   	pop    ebp
c000c642:	c3                   	ret    
c000c643:	90                   	nop

c000c644 <Serial::Serial(char const*)>:
c000c644:	83 ec 0c             	sub    esp,0xc
c000c647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c64b:	83 ec 08             	sub    esp,0x8
c000c64e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c652:	50                   	push   eax
c000c653:	e8 6a ea ff ff       	call   c000b0c2 <Device::Device(char const*)>
c000c658:	83 c4 10             	add    esp,0x10
c000c65b:	ba b8 e9 01 c0       	mov    edx,0xc001e9b8
c000c660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c664:	89 10                	mov    DWORD PTR [eax],edx
c000c666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c66a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000c674:	90                   	nop
c000c675:	83 c4 0c             	add    esp,0xc
c000c678:	c3                   	ret    
c000c679:	90                   	nop
c000c67a:	66 90                	xchg   ax,ax

c000c67c <Serial::~Serial()>:
c000c67c:	83 ec 0c             	sub    esp,0xc
c000c67f:	ba b8 e9 01 c0       	mov    edx,0xc001e9b8
c000c684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c688:	89 10                	mov    DWORD PTR [eax],edx
c000c68a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c68e:	83 ec 0c             	sub    esp,0xc
c000c691:	50                   	push   eax
c000c692:	e8 95 e7 ff ff       	call   c000ae2c <Device::~Device()>
c000c697:	83 c4 10             	add    esp,0x10
c000c69a:	90                   	nop
c000c69b:	83 c4 0c             	add    esp,0xc
c000c69e:	c3                   	ret    
c000c69f:	90                   	nop

c000c6a0 <Serial::~Serial()>:
c000c6a0:	83 ec 0c             	sub    esp,0xc
c000c6a3:	83 ec 0c             	sub    esp,0xc
c000c6a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6aa:	e8 cd ff ff ff       	call   c000c67c <Serial::~Serial()>
c000c6af:	83 c4 10             	add    esp,0x10
c000c6b2:	83 ec 08             	sub    esp,0x8
c000c6b5:	68 58 01 00 00       	push   0x158
c000c6ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6be:	e8 63 d3 ff ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c000c6c3:	83 c4 10             	add    esp,0x10
c000c6c6:	83 c4 0c             	add    esp,0xc
c000c6c9:	c3                   	ret    
c000c6ca:	66 90                	xchg   ax,ax

c000c6cc <Timer::Timer(char const*)>:
c000c6cc:	83 ec 0c             	sub    esp,0xc
c000c6cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6d3:	83 ec 08             	sub    esp,0x8
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	50                   	push   eax
c000c6db:	e8 e2 e9 ff ff       	call   c000b0c2 <Device::Device(char const*)>
c000c6e0:	83 c4 10             	add    esp,0x10
c000c6e3:	ba fc e9 01 c0       	mov    edx,0xc001e9fc
c000c6e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6ec:	89 10                	mov    DWORD PTR [eax],edx
c000c6ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6f2:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000c6fc:	90                   	nop
c000c6fd:	83 c4 0c             	add    esp,0xc
c000c700:	c3                   	ret    
c000c701:	90                   	nop
c000c702:	66 90                	xchg   ax,ax

c000c704 <Timer::~Timer()>:
c000c704:	83 ec 0c             	sub    esp,0xc
c000c707:	ba fc e9 01 c0       	mov    edx,0xc001e9fc
c000c70c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c710:	89 10                	mov    DWORD PTR [eax],edx
c000c712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c716:	83 ec 0c             	sub    esp,0xc
c000c719:	50                   	push   eax
c000c71a:	e8 0d e7 ff ff       	call   c000ae2c <Device::~Device()>
c000c71f:	83 c4 10             	add    esp,0x10
c000c722:	90                   	nop
c000c723:	83 c4 0c             	add    esp,0xc
c000c726:	c3                   	ret    
c000c727:	90                   	nop

c000c728 <Timer::~Timer()>:
c000c728:	83 ec 0c             	sub    esp,0xc
c000c72b:	83 ec 0c             	sub    esp,0xc
c000c72e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c732:	e8 cd ff ff ff       	call   c000c704 <Timer::~Timer()>
c000c737:	83 c4 10             	add    esp,0x10
c000c73a:	83 ec 08             	sub    esp,0x8
c000c73d:	68 5c 01 00 00       	push   0x15c
c000c742:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c746:	e8 db d2 ff ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c000c74b:	83 c4 10             	add    esp,0x10
c000c74e:	83 c4 0c             	add    esp,0xc
c000c751:	c3                   	ret    

c000c752 <Timer::read()>:
c000c752:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c756:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c75c:	c3                   	ret    

c000c75d <setupTimer(int)>:
c000c75d:	53                   	push   ebx
c000c75e:	83 ec 14             	sub    esp,0x14
c000c761:	68 5c 01 00 00       	push   0x15c
c000c766:	e8 12 a6 ff ff       	call   c0006d7d <malloc>
c000c76b:	89 04 24             	mov    DWORD PTR [esp],eax
c000c76e:	89 c3                	mov    ebx,eax
c000c770:	e8 f3 fa 00 00       	call   c001c268 <PIT::PIT()>
c000c775:	58                   	pop    eax
c000c776:	5a                   	pop    edx
c000c777:	53                   	push   ebx
c000c778:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c000c77e:	e8 a7 e7 ff ff       	call   c000af2a <Device::addChild(Device*)>
c000c783:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c785:	6a 00                	push   0x0
c000c787:	6a 00                	push   0x0
c000c789:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c78d:	53                   	push   ebx
c000c78e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c791:	89 d8                	mov    eax,ebx
c000c793:	83 c4 28             	add    esp,0x28
c000c796:	5b                   	pop    ebx
c000c797:	c3                   	ret    

c000c798 <timerHandler(unsigned int)>:
c000c798:	56                   	push   esi
c000c799:	53                   	push   ebx
c000c79a:	51                   	push   ecx
c000c79b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c79f:	01 05 8c 2d 02 c0    	add    DWORD PTR ds:0xc0022d8c,eax
c000c7a5:	80 3d ad 07 02 c0 00 	cmp    BYTE PTR ds:0xc00207ad,0x0
c000c7ac:	0f 84 4a 01 00 00    	je     c000c8fc <timerHandler(unsigned int)+0x164>
c000c7b2:	fa                   	cli    
c000c7b3:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c000c7b9:	83 ec 0c             	sub    esp,0xc
c000c7bc:	ff 05 84 3c 02 c0    	inc    DWORD PTR ds:0xc0023c84
c000c7c2:	68 98 3c 02 c0       	push   0xc0023c98
c000c7c7:	e8 f4 06 01 00       	call   c001cec0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000c7cc:	83 c4 10             	add    esp,0x10
c000c7cf:	84 c0                	test   al,al
c000c7d1:	0f 85 a1 00 00 00    	jne    c000c878 <timerHandler(unsigned int)+0xe0>
c000c7d7:	83 ec 0c             	sub    esp,0xc
c000c7da:	68 98 3c 02 c0       	push   0xc0023c98
c000c7df:	e8 f8 06 01 00       	call   c001cedc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c7e4:	83 c4 10             	add    esp,0x10
c000c7e7:	89 c6                	mov    esi,eax
c000c7e9:	8d 76 00             	lea    esi,[esi+0x0]
c000c7ec:	83 ec 0c             	sub    esp,0xc
c000c7ef:	68 98 3c 02 c0       	push   0xc0023c98
c000c7f4:	e8 e3 06 01 00       	call   c001cedc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c7f9:	c7 04 24 98 3c 02 c0 	mov    DWORD PTR [esp],0xc0023c98
c000c800:	89 c3                	mov    ebx,eax
c000c802:	e8 dd 06 01 00       	call   c001cee4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000c807:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000c80a:	83 c4 10             	add    esp,0x10
c000c80d:	3b 05 8c 2d 02 c0    	cmp    eax,DWORD PTR ds:0xc0022d8c
c000c813:	77 23                	ja     c000c838 <timerHandler(unsigned int)+0xa0>
c000c815:	83 ec 0c             	sub    esp,0xc
c000c818:	53                   	push   ebx
c000c819:	e8 fe 68 00 00       	call   c001311c <unblockTask(ThreadControlBlock*)>
c000c81e:	83 c4 10             	add    esp,0x10
c000c821:	39 de                	cmp    esi,ebx
c000c823:	75 27                	jne    c000c84c <timerHandler(unsigned int)+0xb4>
c000c825:	83 ec 0c             	sub    esp,0xc
c000c828:	68 98 3c 02 c0       	push   0xc0023c98
c000c82d:	e8 aa 06 01 00       	call   c001cedc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c832:	89 c6                	mov    esi,eax
c000c834:	eb 12                	jmp    c000c848 <timerHandler(unsigned int)+0xb0>
c000c836:	66 90                	xchg   ax,ax
c000c838:	52                   	push   edx
c000c839:	52                   	push   edx
c000c83a:	53                   	push   ebx
c000c83b:	68 98 3c 02 c0       	push   0xc0023c98
c000c840:	e8 57 07 01 00       	call   c001cf9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000c845:	8d 76 00             	lea    esi,[esi+0x0]
c000c848:	83 c4 10             	add    esp,0x10
c000c84b:	90                   	nop
c000c84c:	83 ec 0c             	sub    esp,0xc
c000c84f:	68 98 3c 02 c0       	push   0xc0023c98
c000c854:	e8 67 06 01 00       	call   c001cec0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000c859:	83 c4 10             	add    esp,0x10
c000c85c:	84 c0                	test   al,al
c000c85e:	75 18                	jne    c000c878 <timerHandler(unsigned int)+0xe0>
c000c860:	83 ec 0c             	sub    esp,0xc
c000c863:	68 98 3c 02 c0       	push   0xc0023c98
c000c868:	e8 6f 06 01 00       	call   c001cedc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c86d:	83 c4 10             	add    esp,0x10
c000c870:	39 f0                	cmp    eax,esi
c000c872:	0f 85 74 ff ff ff    	jne    c000c7ec <timerHandler(unsigned int)+0x54>
c000c878:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c87d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000c881:	74 41                	je     c000c8c4 <timerHandler(unsigned int)+0x12c>
c000c883:	80 3d ac 07 02 c0 00 	cmp    BYTE PTR ds:0xc00207ac,0x0
c000c88a:	74 38                	je     c000c8c4 <timerHandler(unsigned int)+0x12c>
c000c88c:	fa                   	cli    
c000c88d:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c000c893:	a1 8c 2d 02 c0       	mov    eax,ds:0xc0022d8c
c000c898:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000c89e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000c8a1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000c8a7:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000c8aa:	72 08                	jb     c000c8b4 <timerHandler(unsigned int)+0x11c>
c000c8ac:	e8 af 63 00 00       	call   c0012c60 <schedule()>
c000c8b1:	8d 76 00             	lea    esi,[esi+0x0]
c000c8b4:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c000c8b9:	48                   	dec    eax
c000c8ba:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c000c8bf:	75 03                	jne    c000c8c4 <timerHandler(unsigned int)+0x12c>
c000c8c1:	fb                   	sti    
c000c8c2:	66 90                	xchg   ax,ax
c000c8c4:	a1 84 3c 02 c0       	mov    eax,ds:0xc0023c84
c000c8c9:	48                   	dec    eax
c000c8ca:	a3 84 3c 02 c0       	mov    ds:0xc0023c84,eax
c000c8cf:	75 1b                	jne    c000c8ec <timerHandler(unsigned int)+0x154>
c000c8d1:	83 3d 80 3c 02 c0 00 	cmp    DWORD PTR ds:0xc0023c80,0x0
c000c8d8:	74 12                	je     c000c8ec <timerHandler(unsigned int)+0x154>
c000c8da:	c7 05 80 3c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023c80,0x0
c000c8e4:	e8 77 63 00 00       	call   c0012c60 <schedule()>
c000c8e9:	8d 76 00             	lea    esi,[esi+0x0]
c000c8ec:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c000c8f1:	48                   	dec    eax
c000c8f2:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c000c8f7:	75 03                	jne    c000c8fc <timerHandler(unsigned int)+0x164>
c000c8f9:	fb                   	sti    
c000c8fa:	66 90                	xchg   ax,ax
c000c8fc:	58                   	pop    eax
c000c8fd:	5b                   	pop    ebx
c000c8fe:	5e                   	pop    esi
c000c8ff:	c3                   	ret    

c000c900 <VCache::VCache(PhysicalDisk*)>:
c000c900:	53                   	push   ebx
c000c901:	83 ec 18             	sub    esp,0x18
c000c904:	ba 2c ea 01 c0       	mov    edx,0xc001ea2c
c000c909:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c90d:	89 10                	mov    DWORD PTR [eax],edx
c000c90f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c913:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000c91a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c91e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000c925:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c929:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000c930:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000c937:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c93b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000c942:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000c949:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c94d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000c954:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c958:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000c95c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c960:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000c967:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000c96e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c972:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000c976:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c97a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000c97e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c982:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000c986:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c98a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000c991:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000c999:	83 ec 0c             	sub    esp,0xc
c000c99c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c9a0:	e8 d8 a3 ff ff       	call   c0006d7d <malloc>
c000c9a5:	83 c4 10             	add    esp,0x10
c000c9a8:	89 c3                	mov    ebx,eax
c000c9aa:	83 ec 0c             	sub    esp,0xc
c000c9ad:	53                   	push   ebx
c000c9ae:	e8 7d 60 00 00       	call   c0012a30 <Mutex::Mutex()>
c000c9b3:	83 c4 10             	add    esp,0x10
c000c9b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ba:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000c9bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9c1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c9c5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000c9c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9cc:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000c9d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c9d7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000c9dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9e1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c9e4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c9e8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000c9ee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c9f8:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000c9fb:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000c9fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca02:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000ca06:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ca0a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ca10:	05 00 01 00 00       	add    eax,0x100
c000ca15:	c1 e0 04             	shl    eax,0x4
c000ca18:	83 ec 0c             	sub    esp,0xc
c000ca1b:	50                   	push   eax
c000ca1c:	e8 5c a3 ff ff       	call   c0006d7d <malloc>
c000ca21:	83 c4 10             	add    esp,0x10
c000ca24:	89 c2                	mov    edx,eax
c000ca26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca2a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ca2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca31:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000ca38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca3c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000ca40:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ca44:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ca4a:	c1 e0 06             	shl    eax,0x6
c000ca4d:	83 ec 0c             	sub    esp,0xc
c000ca50:	50                   	push   eax
c000ca51:	e8 27 a3 ff ff       	call   c0006d7d <malloc>
c000ca56:	83 c4 10             	add    esp,0x10
c000ca59:	89 c2                	mov    edx,eax
c000ca5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca5f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ca62:	90                   	nop
c000ca63:	83 c4 18             	add    esp,0x18
c000ca66:	5b                   	pop    ebx
c000ca67:	c3                   	ret    

c000ca68 <VCache::invalidateReadBuffer()>:
c000ca68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca6c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000ca72:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000ca76:	c3                   	ret    
c000ca77:	90                   	nop

c000ca78 <VCache::writeWriteBuffer()>:
c000ca78:	53                   	push   ebx
c000ca79:	83 ec 08             	sub    esp,0x8
c000ca7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ca80:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ca84:	74 1e                	je     c000caa4 <VCache::writeWriteBuffer()+0x2c>
c000ca86:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ca89:	83 ec 0c             	sub    esp,0xc
c000ca8c:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca8e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000ca91:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000ca94:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000ca97:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ca9a:	50                   	push   eax
c000ca9b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	8d 76 00             	lea    esi,[esi+0x0]
c000caa4:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000caab:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000cab2:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000cab6:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000cabd:	83 c4 08             	add    esp,0x8
c000cac0:	5b                   	pop    ebx
c000cac1:	c3                   	ret    
c000cac2:	66 90                	xchg   ax,ax

c000cac4 <VCache::~VCache()>:
c000cac4:	83 ec 0c             	sub    esp,0xc
c000cac7:	ba 2c ea 01 c0       	mov    edx,0xc001ea2c
c000cacc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cad0:	89 10                	mov    DWORD PTR [eax],edx
c000cad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cad6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000cad9:	84 c0                	test   al,al
c000cadb:	74 0f                	je     c000caec <VCache::~VCache()+0x28>
c000cadd:	83 ec 0c             	sub    esp,0xc
c000cae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cae4:	e8 8f ff ff ff       	call   c000ca78 <VCache::writeWriteBuffer()>
c000cae9:	83 c4 10             	add    esp,0x10
c000caec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caf0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000caf3:	83 ec 0c             	sub    esp,0xc
c000caf6:	50                   	push   eax
c000caf7:	e8 91 a2 ff ff       	call   c0006d8d <free>
c000cafc:	83 c4 10             	add    esp,0x10
c000caff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb03:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	50                   	push   eax
c000cb0a:	e8 7e a2 ff ff       	call   c0006d8d <free>
c000cb0f:	83 c4 10             	add    esp,0x10
c000cb12:	90                   	nop
c000cb13:	83 c4 0c             	add    esp,0xc
c000cb16:	c3                   	ret    
c000cb17:	90                   	nop

c000cb18 <VCache::~VCache()>:
c000cb18:	83 ec 0c             	sub    esp,0xc
c000cb1b:	83 ec 0c             	sub    esp,0xc
c000cb1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb22:	e8 9d ff ff ff       	call   c000cac4 <VCache::~VCache()>
c000cb27:	83 c4 10             	add    esp,0x10
c000cb2a:	83 ec 08             	sub    esp,0x8
c000cb2d:	6a 44                	push   0x44
c000cb2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb33:	e8 ee ce ff ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c000cb38:	83 c4 10             	add    esp,0x10
c000cb3b:	83 c4 0c             	add    esp,0xc
c000cb3e:	c3                   	ret    
c000cb3f:	90                   	nop

c000cb40 <VCache::write(unsigned long long, int, void*)>:
c000cb40:	55                   	push   ebp
c000cb41:	31 c0                	xor    eax,eax
c000cb43:	57                   	push   edi
c000cb44:	56                   	push   esi
c000cb45:	53                   	push   ebx
c000cb46:	83 ec 0c             	sub    esp,0xc
c000cb49:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000cb4d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000cb51:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000cb55:	8d 76 00             	lea    esi,[esi+0x0]
c000cb58:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c000cb5c:	7d 1a                	jge    c000cb78 <VCache::write(unsigned long long, int, void*)+0x38>
c000cb5e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000cb61:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000cb67:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cb6b:	0f af c8             	imul   ecx,eax
c000cb6e:	01 ca                	add    edx,ecx
c000cb70:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000cb72:	40                   	inc    eax
c000cb73:	eb e3                	jmp    c000cb58 <VCache::write(unsigned long long, int, void*)+0x18>
c000cb75:	8d 76 00             	lea    esi,[esi+0x0]
c000cb78:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000cb7c:	74 0a                	je     c000cb88 <VCache::write(unsigned long long, int, void*)+0x48>
c000cb7e:	53                   	push   ebx
c000cb7f:	e8 e4 fe ff ff       	call   c000ca68 <VCache::invalidateReadBuffer()>
c000cb84:	58                   	pop    eax
c000cb85:	8d 76 00             	lea    esi,[esi+0x0]
c000cb88:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000cb8c:	74 5e                	je     c000cbec <VCache::write(unsigned long long, int, void*)+0xac>
c000cb8e:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000cb91:	89 e8                	mov    eax,ebp
c000cb93:	99                   	cdq    
c000cb94:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000cb97:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000cb9a:	89 c1                	mov    ecx,eax
c000cb9c:	89 d0                	mov    eax,edx
c000cb9e:	31 f1                	xor    ecx,esi
c000cba0:	31 f8                	xor    eax,edi
c000cba2:	09 c1                	or     ecx,eax
c000cba4:	75 3a                	jne    c000cbe0 <VCache::write(unsigned long long, int, void*)+0xa0>
c000cba6:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c000cbab:	75 33                	jne    c000cbe0 <VCache::write(unsigned long long, int, void*)+0xa0>
c000cbad:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cbb0:	89 ef                	mov    edi,ebp
c000cbb2:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000cbb8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cbbc:	0f af f9             	imul   edi,ecx
c000cbbf:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000cbc2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cbc4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000cbc7:	40                   	inc    eax
c000cbc8:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000cbcb:	83 f8 40             	cmp    eax,0x40
c000cbce:	75 60                	jne    c000cc30 <VCache::write(unsigned long long, int, void*)+0xf0>
c000cbd0:	83 ec 0c             	sub    esp,0xc
c000cbd3:	53                   	push   ebx
c000cbd4:	e8 9f fe ff ff       	call   c000ca78 <VCache::writeWriteBuffer()>
c000cbd9:	83 c4 10             	add    esp,0x10
c000cbdc:	eb 52                	jmp    c000cc30 <VCache::write(unsigned long long, int, void*)+0xf0>
c000cbde:	66 90                	xchg   ax,ax
c000cbe0:	83 ec 0c             	sub    esp,0xc
c000cbe3:	53                   	push   ebx
c000cbe4:	e8 8f fe ff ff       	call   c000ca78 <VCache::writeWriteBuffer()>
c000cbe9:	83 c4 10             	add    esp,0x10
c000cbec:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cbef:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c000cbf4:	7f 22                	jg     c000cc18 <VCache::write(unsigned long long, int, void*)+0xd8>
c000cbf6:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000cbf9:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000cbfc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cc00:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000cc04:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000cc07:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000cc0a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000cc10:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cc14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cc16:	eb 18                	jmp    c000cc30 <VCache::write(unsigned long long, int, void*)+0xf0>
c000cc18:	83 ec 0c             	sub    esp,0xc
c000cc1b:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc25:	57                   	push   edi
c000cc26:	56                   	push   esi
c000cc27:	50                   	push   eax
c000cc28:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000cc2b:	83 c4 20             	add    esp,0x20
c000cc2e:	66 90                	xchg   ax,ax
c000cc30:	83 c4 0c             	add    esp,0xc
c000cc33:	31 c0                	xor    eax,eax
c000cc35:	5b                   	pop    ebx
c000cc36:	5e                   	pop    esi
c000cc37:	5f                   	pop    edi
c000cc38:	5d                   	pop    ebp
c000cc39:	c3                   	ret    

c000cc3a <VCache::read(unsigned long long, int, void*)>:
c000cc3a:	55                   	push   ebp
c000cc3b:	31 c0                	xor    eax,eax
c000cc3d:	57                   	push   edi
c000cc3e:	56                   	push   esi
c000cc3f:	53                   	push   ebx
c000cc40:	83 ec 1c             	sub    esp,0x1c
c000cc43:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000cc47:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000cc4b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000cc4f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000cc53:	90                   	nop
c000cc54:	39 e8                	cmp    eax,ebp
c000cc56:	7d 18                	jge    c000cc70 <VCache::read(unsigned long long, int, void*)+0x36>
c000cc58:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000cc5b:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000cc61:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000cc65:	0f af c8             	imul   ecx,eax
c000cc68:	01 ca                	add    edx,ecx
c000cc6a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000cc6c:	40                   	inc    eax
c000cc6d:	eb e5                	jmp    c000cc54 <VCache::read(unsigned long long, int, void*)+0x1a>
c000cc6f:	90                   	nop
c000cc70:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000cc74:	74 0e                	je     c000cc84 <VCache::read(unsigned long long, int, void*)+0x4a>
c000cc76:	83 ec 0c             	sub    esp,0xc
c000cc79:	53                   	push   ebx
c000cc7a:	e8 f9 fd ff ff       	call   c000ca78 <VCache::writeWriteBuffer()>
c000cc7f:	83 c4 10             	add    esp,0x10
c000cc82:	66 90                	xchg   ax,ax
c000cc84:	83 fd 01             	cmp    ebp,0x1
c000cc87:	0f 85 87 00 00 00    	jne    c000cd14 <VCache::read(unsigned long long, int, void*)+0xda>
c000cc8d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cc90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cc94:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000cc9b:	75 77                	jne    c000cd14 <VCache::read(unsigned long long, int, void*)+0xda>
c000cc9d:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000cca0:	89 e9                	mov    ecx,ebp
c000cca2:	f7 d9                	neg    ecx
c000cca4:	89 c8                	mov    eax,ecx
c000cca6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ccaa:	c1 f8 1f             	sar    eax,0x1f
c000ccad:	21 f1                	and    ecx,esi
c000ccaf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ccb3:	89 c8                	mov    eax,ecx
c000ccb5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ccb9:	21 f9                	and    ecx,edi
c000ccbb:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ccbf:	89 ca                	mov    edx,ecx
c000ccc1:	74 0d                	je     c000ccd0 <VCache::read(unsigned long long, int, void*)+0x96>
c000ccc3:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000ccc6:	75 08                	jne    c000ccd0 <VCache::read(unsigned long long, int, void*)+0x96>
c000ccc8:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000cccb:	74 27                	je     c000ccf4 <VCache::read(unsigned long long, int, void*)+0xba>
c000cccd:	8d 76 00             	lea    esi,[esi+0x0]
c000ccd0:	83 ec 0c             	sub    esp,0xc
c000ccd3:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000ccd7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ccdb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000ccde:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cce1:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000cce3:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000cce6:	55                   	push   ebp
c000cce7:	52                   	push   edx
c000cce8:	50                   	push   eax
c000cce9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cced:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000ccf0:	83 c4 20             	add    esp,0x20
c000ccf3:	90                   	nop
c000ccf4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ccf7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ccfb:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000cd01:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000cd04:	48                   	dec    eax
c000cd05:	21 c6                	and    esi,eax
c000cd07:	0f af f1             	imul   esi,ecx
c000cd0a:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000cd0d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cd0f:	eb 23                	jmp    c000cd34 <VCache::read(unsigned long long, int, void*)+0xfa>
c000cd11:	8d 76 00             	lea    esi,[esi+0x0]
c000cd14:	83 ec 0c             	sub    esp,0xc
c000cd17:	53                   	push   ebx
c000cd18:	e8 4b fd ff ff       	call   c000ca68 <VCache::invalidateReadBuffer()>
c000cd1d:	5a                   	pop    edx
c000cd1e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cd21:	8b 10                	mov    edx,DWORD PTR [eax]
c000cd23:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cd27:	55                   	push   ebp
c000cd28:	57                   	push   edi
c000cd29:	56                   	push   esi
c000cd2a:	50                   	push   eax
c000cd2b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000cd2e:	83 c4 20             	add    esp,0x20
c000cd31:	8d 76 00             	lea    esi,[esi+0x0]
c000cd34:	83 c4 1c             	add    esp,0x1c
c000cd37:	31 c0                	xor    eax,eax
c000cd39:	5b                   	pop    ebx
c000cd3a:	5e                   	pop    esi
c000cd3b:	5f                   	pop    edi
c000cd3c:	5d                   	pop    ebp
c000cd3d:	c3                   	ret    

c000cd3e <Video::putrect(int, int, int, int, unsigned int)>:
c000cd3e:	55                   	push   ebp
c000cd3f:	57                   	push   edi
c000cd40:	56                   	push   esi
c000cd41:	53                   	push   ebx
c000cd42:	83 ec 1c             	sub    esp,0x1c
c000cd45:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000cd49:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cd4d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000cd51:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000cd55:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cd59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cd5d:	01 df                	add    edi,ebx
c000cd5f:	39 fb                	cmp    ebx,edi
c000cd61:	7d 1f                	jge    c000cd82 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000cd63:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cd67:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000cd6b:	7d 12                	jge    c000cd7f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000cd6d:	8b 16                	mov    edx,DWORD PTR [esi]
c000cd6f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000cd73:	53                   	push   ebx
c000cd74:	55                   	push   ebp
c000cd75:	45                   	inc    ebp
c000cd76:	56                   	push   esi
c000cd77:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000cd7a:	83 c4 10             	add    esp,0x10
c000cd7d:	eb e8                	jmp    c000cd67 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000cd7f:	43                   	inc    ebx
c000cd80:	eb dd                	jmp    c000cd5f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000cd82:	83 c4 1c             	add    esp,0x1c
c000cd85:	5b                   	pop    ebx
c000cd86:	5e                   	pop    esi
c000cd87:	5f                   	pop    edi
c000cd88:	5d                   	pop    ebp
c000cd89:	c3                   	ret    

c000cd8a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000cd8a:	55                   	push   ebp
c000cd8b:	57                   	push   edi
c000cd8c:	31 ff                	xor    edi,edi
c000cd8e:	56                   	push   esi
c000cd8f:	53                   	push   ebx
c000cd90:	83 ec 1c             	sub    esp,0x1c
c000cd93:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000cd97:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000cd9b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000cda2:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000cda7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdab:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000cdaf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000cdb3:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000cdb6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cdba:	01 f9                	add    ecx,edi
c000cdbc:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000cdc0:	7d 2f                	jge    c000cdf1 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000cdc2:	31 f6                	xor    esi,esi
c000cdc4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000cdc8:	01 f2                	add    edx,esi
c000cdca:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000cdce:	7d 1a                	jge    c000cdea <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000cdd0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cdd3:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000cdd6:	46                   	inc    esi
c000cdd7:	51                   	push   ecx
c000cdd8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cddc:	52                   	push   edx
c000cddd:	55                   	push   ebp
c000cdde:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000cde1:	83 c4 10             	add    esp,0x10
c000cde4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cde8:	eb da                	jmp    c000cdc4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000cdea:	47                   	inc    edi
c000cdeb:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000cdef:	eb c5                	jmp    c000cdb6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000cdf1:	83 c4 1c             	add    esp,0x1c
c000cdf4:	5b                   	pop    ebx
c000cdf5:	5e                   	pop    esi
c000cdf6:	5f                   	pop    edi
c000cdf7:	5d                   	pop    ebp
c000cdf8:	c3                   	ret    
c000cdf9:	90                   	nop

c000cdfa <Video::blit(unsigned int*, int, int, int, int)>:
c000cdfa:	55                   	push   ebp
c000cdfb:	57                   	push   edi
c000cdfc:	56                   	push   esi
c000cdfd:	53                   	push   ebx
c000cdfe:	83 ec 1c             	sub    esp,0x1c
c000ce01:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce05:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ce09:	85 c0                	test   eax,eax
c000ce0b:	79 02                	jns    c000ce0f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000ce0d:	31 c0                	xor    eax,eax
c000ce0f:	c1 e0 02             	shl    eax,0x2
c000ce12:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ce16:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ce1a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ce1e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000ce22:	39 d8                	cmp    eax,ebx
c000ce24:	7e 49                	jle    c000ce6f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000ce26:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ce2c:	7c 41                	jl     c000ce6f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000ce2e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ce32:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ce36:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ce3a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000ce3e:	39 f9                	cmp    ecx,edi
c000ce40:	7e 22                	jle    c000ce64 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000ce42:	83 c5 04             	add    ebp,0x4
c000ce45:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ce4b:	7c 14                	jl     c000ce61 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000ce4d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ce4f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000ce52:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ce56:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ce5a:	56                   	push   esi
c000ce5b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ce5e:	83 c4 10             	add    esp,0x10
c000ce61:	47                   	inc    edi
c000ce62:	eb d2                	jmp    c000ce36 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000ce64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ce68:	43                   	inc    ebx
c000ce69:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ce6d:	eb ab                	jmp    c000ce1a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000ce6f:	83 c4 1c             	add    esp,0x1c
c000ce72:	5b                   	pop    ebx
c000ce73:	5e                   	pop    esi
c000ce74:	5f                   	pop    edi
c000ce75:	5d                   	pop    ebp
c000ce76:	c3                   	ret    
c000ce77:	90                   	nop

c000ce78 <Video::clearScreen(unsigned int)>:
c000ce78:	57                   	push   edi
c000ce79:	56                   	push   esi
c000ce7a:	53                   	push   ebx
c000ce7b:	31 db                	xor    ebx,ebx
c000ce7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ce81:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ce87:	7e 1f                	jle    c000cea8 <Video::clearScreen(unsigned int)+0x30>
c000ce89:	31 ff                	xor    edi,edi
c000ce8b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ce91:	7e 12                	jle    c000cea5 <Video::clearScreen(unsigned int)+0x2d>
c000ce93:	8b 06                	mov    eax,DWORD PTR [esi]
c000ce95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce99:	53                   	push   ebx
c000ce9a:	57                   	push   edi
c000ce9b:	47                   	inc    edi
c000ce9c:	56                   	push   esi
c000ce9d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000cea0:	83 c4 10             	add    esp,0x10
c000cea3:	eb e6                	jmp    c000ce8b <Video::clearScreen(unsigned int)+0x13>
c000cea5:	43                   	inc    ebx
c000cea6:	eb d9                	jmp    c000ce81 <Video::clearScreen(unsigned int)+0x9>
c000cea8:	5b                   	pop    ebx
c000cea9:	5e                   	pop    esi
c000ceaa:	5f                   	pop    edi
c000ceab:	c3                   	ret    

c000ceac <Video::putpixel(int, int, unsigned int)>:
c000ceac:	c7 44 24 04 34 ea 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ea34
c000ceb4:	e9 24 29 00 00       	jmp    c000f7dd <Krnl::panic(char const*)>
c000ceb9:	90                   	nop

c000ceba <Video::Video(char const*)>:
c000ceba:	83 ec 0c             	sub    esp,0xc
c000cebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cec1:	83 ec 08             	sub    esp,0x8
c000cec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cec8:	50                   	push   eax
c000cec9:	e8 f4 e1 ff ff       	call   c000b0c2 <Device::Device(char const*)>
c000cece:	83 c4 10             	add    esp,0x10
c000ced1:	ba a4 ea 01 c0       	mov    edx,0xc001eaa4
c000ced6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceda:	89 10                	mov    DWORD PTR [eax],edx
c000cedc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cee0:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ceea:	90                   	nop
c000ceeb:	83 c4 0c             	add    esp,0xc
c000ceee:	c3                   	ret    
c000ceef:	90                   	nop

c000cef0 <Video::~Video()>:
c000cef0:	83 ec 0c             	sub    esp,0xc
c000cef3:	ba a4 ea 01 c0       	mov    edx,0xc001eaa4
c000cef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cefc:	89 10                	mov    DWORD PTR [eax],edx
c000cefe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf02:	83 ec 0c             	sub    esp,0xc
c000cf05:	50                   	push   eax
c000cf06:	e8 21 df ff ff       	call   c000ae2c <Device::~Device()>
c000cf0b:	83 c4 10             	add    esp,0x10
c000cf0e:	90                   	nop
c000cf0f:	83 c4 0c             	add    esp,0xc
c000cf12:	c3                   	ret    
c000cf13:	90                   	nop

c000cf14 <Video::~Video()>:
c000cf14:	83 ec 0c             	sub    esp,0xc
c000cf17:	83 ec 0c             	sub    esp,0xc
c000cf1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1e:	e8 cd ff ff ff       	call   c000cef0 <Video::~Video()>
c000cf23:	83 c4 10             	add    esp,0x10
c000cf26:	83 ec 08             	sub    esp,0x8
c000cf29:	68 64 01 00 00       	push   0x164
c000cf2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf32:	e8 ef ca ff ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c000cf37:	83 c4 10             	add    esp,0x10
c000cf3a:	83 c4 0c             	add    esp,0xc
c000cf3d:	c3                   	ret    

c000cf3e <Video::isMonochrome()>:
c000cf3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf42:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000cf48:	c3                   	ret    
c000cf49:	90                   	nop

c000cf4a <Video::getWidth()>:
c000cf4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf4e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cf54:	c3                   	ret    
c000cf55:	90                   	nop

c000cf56 <Video::getHeight()>:
c000cf56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf5a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000cf60:	c3                   	ret    
c000cf61:	90                   	nop

c000cf62 <Video::drawCursor(int, int, unsigned char*, int)>:
c000cf62:	55                   	push   ebp
c000cf63:	57                   	push   edi
c000cf64:	56                   	push   esi
c000cf65:	53                   	push   ebx
c000cf66:	83 ec 2c             	sub    esp,0x2c
c000cf69:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000cf6d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000cf71:	83 f8 01             	cmp    eax,0x1
c000cf74:	19 c9                	sbb    ecx,ecx
c000cf76:	31 db                	xor    ebx,ebx
c000cf78:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000cf7c:	89 cd                	mov    ebp,ecx
c000cf7e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000cf86:	f7 d5                	not    ebp
c000cf88:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000cf8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000cf92:	01 d8                	add    eax,ebx
c000cf94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cf98:	56                   	push   esi
c000cf99:	e8 b8 ff ff ff       	call   c000cf56 <Video::getHeight()>
c000cf9e:	59                   	pop    ecx
c000cf9f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000cfa3:	7e 70                	jle    c000d015 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000cfa5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000cfa9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000cfad:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000cfb0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cfb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000cfb8:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000cfbf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cfc3:	89 f8                	mov    eax,edi
c000cfc5:	83 c0 20             	add    eax,0x20
c000cfc8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cfcc:	56                   	push   esi
c000cfcd:	e8 78 ff ff ff       	call   c000cf4a <Video::getWidth()>
c000cfd2:	5a                   	pop    edx
c000cfd3:	39 c7                	cmp    edi,eax
c000cfd5:	7d 34                	jge    c000d00b <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000cfd7:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000cfdc:	74 05                	je     c000cfe3 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000cfde:	8b 06                	mov    eax,DWORD PTR [esi]
c000cfe0:	55                   	push   ebp
c000cfe1:	eb 0d                	jmp    c000cff0 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000cfe3:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000cfe8:	74 12                	je     c000cffc <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000cfea:	8b 06                	mov    eax,DWORD PTR [esi]
c000cfec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cff0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cff4:	57                   	push   edi
c000cff5:	56                   	push   esi
c000cff6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000cff9:	83 c4 10             	add    esp,0x10
c000cffc:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000d000:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000d004:	47                   	inc    edi
c000d005:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000d009:	75 c1                	jne    c000cfcc <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000d00b:	43                   	inc    ebx
c000d00c:	83 fb 20             	cmp    ebx,0x20
c000d00f:	0f 85 79 ff ff ff    	jne    c000cf8e <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000d015:	83 c4 2c             	add    esp,0x2c
c000d018:	5b                   	pop    ebx
c000d019:	5e                   	pop    esi
c000d01a:	5f                   	pop    edi
c000d01b:	5d                   	pop    ebp
c000d01c:	c3                   	ret    
c000d01d:	90                   	nop

c000d01e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000d01e:	55                   	push   ebp
c000d01f:	57                   	push   edi
c000d020:	56                   	push   esi
c000d021:	53                   	push   ebx
c000d022:	83 ec 28             	sub    esp,0x28
c000d025:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d029:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000d02d:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000d031:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000d035:	c1 e6 08             	shl    esi,0x8
c000d038:	01 c6                	add    esi,eax
c000d03a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000d03e:	c1 e0 08             	shl    eax,0x8
c000d041:	01 d0                	add    eax,edx
c000d043:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d047:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d04b:	0f af c6             	imul   eax,esi
c000d04e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000d055:	50                   	push   eax
c000d056:	e8 22 9d ff ff       	call   c0006d7d <malloc>
c000d05b:	83 c4 10             	add    esp,0x10
c000d05e:	89 c7                	mov    edi,eax
c000d060:	85 c0                	test   eax,eax
c000d062:	75 10                	jne    c000d074 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000d064:	83 ec 0c             	sub    esp,0xc
c000d067:	68 55 ea 01 c0       	push   0xc001ea55
c000d06c:	e8 6c 27 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c000d071:	83 c4 10             	add    esp,0x10
c000d074:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000d077:	ba 12 00 00 00       	mov    edx,0x12
c000d07c:	84 c0                	test   al,al
c000d07e:	74 11                	je     c000d091 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000d080:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000d084:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000d088:	c1 fa 03             	sar    edx,0x3
c000d08b:	0f af d1             	imul   edx,ecx
c000d08e:	83 c2 12             	add    edx,0x12
c000d091:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000d095:	74 04                	je     c000d09b <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000d097:	85 f6                	test   esi,esi
c000d099:	75 12                	jne    c000d0ad <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000d09b:	83 ec 0c             	sub    esp,0xc
c000d09e:	68 65 ea 01 c0       	push   0xc001ea65
c000d0a3:	e8 5f ca ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c000d0a8:	e9 b8 00 00 00       	jmp    c000d165 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000d0ad:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000d0b1:	80 f9 02             	cmp    cl,0x2
c000d0b4:	0f 85 96 00 00 00    	jne    c000d150 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000d0ba:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000d0bf:	75 0e                	jne    c000d0cf <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000d0c1:	84 c0                	test   al,al
c000d0c3:	75 0a                	jne    c000d0cf <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000d0c5:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000d0c8:	83 e8 18             	sub    eax,0x18
c000d0cb:	a8 f7                	test   al,0xf7
c000d0cd:	74 0a                	je     c000d0d9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000d0cf:	83 ec 0c             	sub    esp,0xc
c000d0d2:	68 7a ea 01 c0       	push   0xc001ea7a
c000d0d7:	eb 7f                	jmp    c000d158 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000d0d9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000d0e1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000d0e9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000d0ed:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d0f5:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000d0f9:	75 0c                	jne    c000d107 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000d0fb:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000d100:	c1 e0 18             	shl    eax,0x18
c000d103:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d107:	45                   	inc    ebp
c000d108:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000d10d:	c1 e1 10             	shl    ecx,0x10
c000d110:	89 c8                	mov    eax,ecx
c000d112:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000d117:	c1 e1 08             	shl    ecx,0x8
c000d11a:	09 c1                	or     ecx,eax
c000d11c:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000d120:	09 c1                	or     ecx,eax
c000d122:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000d126:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000d12a:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000d12e:	c1 f8 03             	sar    eax,0x3
c000d131:	01 c2                	add    edx,eax
c000d133:	89 e8                	mov    eax,ebp
c000d135:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000d139:	39 c6                	cmp    esi,eax
c000d13b:	7f b0                	jg     c000d0ed <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000d13d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000d141:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d145:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000d148:	7e 22                	jle    c000d16c <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000d14a:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000d14e:	eb 99                	jmp    c000d0e9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000d150:	50                   	push   eax
c000d151:	50                   	push   eax
c000d152:	51                   	push   ecx
c000d153:	68 88 ea 01 c0       	push   0xc001ea88
c000d158:	e8 aa c9 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c000d15d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d160:	e8 28 9c ff ff       	call   c0006d8d <free>
c000d165:	83 c4 10             	add    esp,0x10
c000d168:	31 ff                	xor    edi,edi
c000d16a:	eb 0f                	jmp    c000d17b <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000d16c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d170:	89 30                	mov    DWORD PTR [eax],esi
c000d172:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d176:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d179:	89 30                	mov    DWORD PTR [eax],esi
c000d17b:	83 c4 1c             	add    esp,0x1c
c000d17e:	89 f8                	mov    eax,edi
c000d180:	5b                   	pop    ebx
c000d181:	5e                   	pop    esi
c000d182:	5f                   	pop    edi
c000d183:	5d                   	pop    ebp
c000d184:	c3                   	ret    
c000d185:	90                   	nop

c000d186 <Video::putTGA(int, int, unsigned char*, int)>:
c000d186:	55                   	push   ebp
c000d187:	57                   	push   edi
c000d188:	56                   	push   esi
c000d189:	53                   	push   ebx
c000d18a:	83 ec 28             	sub    esp,0x28
c000d18d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000d191:	8d 44 24 18          	lea    eax,[esp+0x18]
c000d195:	50                   	push   eax
c000d196:	8d 44 24 18          	lea    eax,[esp+0x18]
c000d19a:	50                   	push   eax
c000d19b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d19f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d1a3:	56                   	push   esi
c000d1a4:	e8 75 fe ff ff       	call   c000d01e <Video::tgaParse(unsigned char*, int, int*, int*)>
c000d1a9:	83 c4 20             	add    esp,0x20
c000d1ac:	85 c0                	test   eax,eax
c000d1ae:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d1b2:	74 35                	je     c000d1e9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000d1b4:	89 c7                	mov    edi,eax
c000d1b6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d1ba:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000d1be:	39 d8                	cmp    eax,ebx
c000d1c0:	7e 27                	jle    c000d1e9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000d1c2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d1c6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d1ca:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000d1ce:	39 e8                	cmp    eax,ebp
c000d1d0:	7e 14                	jle    c000d1e6 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000d1d2:	8b 06                	mov    eax,DWORD PTR [esi]
c000d1d4:	83 c7 04             	add    edi,0x4
c000d1d7:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000d1da:	53                   	push   ebx
c000d1db:	55                   	push   ebp
c000d1dc:	45                   	inc    ebp
c000d1dd:	56                   	push   esi
c000d1de:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d1e1:	83 c4 10             	add    esp,0x10
c000d1e4:	eb e0                	jmp    c000d1c6 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000d1e6:	43                   	inc    ebx
c000d1e7:	eb cd                	jmp    c000d1b6 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000d1e9:	83 c4 1c             	add    esp,0x1c
c000d1ec:	5b                   	pop    ebx
c000d1ed:	5e                   	pop    esi
c000d1ee:	5f                   	pop    edi
c000d1ef:	5d                   	pop    ebp
c000d1f0:	c3                   	ret    
c000d1f1:	66 90                	xchg   ax,ax
c000d1f3:	90                   	nop

c000d1f4 <ACPI::close(int, int, void*)>:
c000d1f4:	83 ec 1c             	sub    esp,0x1c
c000d1f7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000d1ff:	74 0b                	je     c000d20c <ACPI::close(int, int, void*)+0x18>
c000d201:	b8 00 00 00 00       	mov    eax,0x0
c000d206:	e9 99 00 00 00       	jmp    c000d2a4 <ACPI::close(int, int, void*)+0xb0>
c000d20b:	90                   	nop
c000d20c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000d211:	75 29                	jne    c000d23c <ACPI::close(int, int, void*)+0x48>
c000d213:	a1 a8 2d 02 c0       	mov    eax,ds:0xc0022da8
c000d218:	85 c0                	test   eax,eax
c000d21a:	74 08                	je     c000d224 <ACPI::close(int, int, void*)+0x30>
c000d21c:	a1 a8 2d 02 c0       	mov    eax,ds:0xc0022da8
c000d221:	ff d0                	call   eax
c000d223:	90                   	nop
c000d224:	83 ec 0c             	sub    esp,0xc
c000d227:	68 e4 ea 01 c0       	push   0xc001eae4
c000d22c:	e8 ac 25 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c000d231:	83 c4 10             	add    esp,0x10
c000d234:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d239:	eb 69                	jmp    c000d2a4 <ACPI::close(int, int, void*)+0xb0>
c000d23b:	90                   	nop
c000d23c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000d241:	75 59                	jne    c000d29c <ACPI::close(int, int, void*)+0xa8>
c000d243:	a1 a4 2d 02 c0       	mov    eax,ds:0xc0022da4
c000d248:	85 c0                	test   eax,eax
c000d24a:	74 08                	je     c000d254 <ACPI::close(int, int, void*)+0x60>
c000d24c:	a1 a4 2d 02 c0       	mov    eax,ds:0xc0022da4
c000d251:	ff d0                	call   eax
c000d253:	90                   	nop
c000d254:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000d259:	8d 76 00             	lea    esi,[esi+0x0]
c000d25c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000d261:	83 e0 02             	and    eax,0x2
c000d264:	74 1e                	je     c000d284 <ACPI::close(int, int, void*)+0x90>
c000d266:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000d26d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d271:	89 c2                	mov    edx,eax
c000d273:	ec                   	in     al,dx
c000d274:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000d278:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000d27c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000d280:	eb da                	jmp    c000d25c <ACPI::close(int, int, void*)+0x68>
c000d282:	66 90                	xchg   ax,ax
c000d284:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000d28b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000d290:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000d294:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d298:	ee                   	out    dx,al
c000d299:	8d 76 00             	lea    esi,[esi+0x0]
c000d29c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d2a1:	8d 76 00             	lea    esi,[esi+0x0]
c000d2a4:	83 c4 1c             	add    esp,0x1c
c000d2a7:	c3                   	ret    

c000d2a8 <findRSDP()>:
c000d2a8:	83 ec 1c             	sub    esp,0x1c
c000d2ab:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c000d2b0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d2b6:	83 e0 04             	and    eax,0x4
c000d2b9:	84 c0                	test   al,al
c000d2bb:	75 07                	jne    c000d2c4 <findRSDP()+0x1c>
c000d2bd:	b8 00 00 00 00       	mov    eax,0x0
c000d2c2:	eb 70                	jmp    c000d334 <findRSDP()+0x8c>
c000d2c4:	a1 d8 07 02 c0       	mov    eax,ds:0xc00207d8
c000d2c9:	3d ff 07 00 00       	cmp    eax,0x7ff
c000d2ce:	7f 1c                	jg     c000d2ec <findRSDP()+0x44>
c000d2d0:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c000d2d5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d2db:	83 e2 fb             	and    edx,0xfffffffb
c000d2de:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d2e4:	b8 00 00 00 00       	mov    eax,0x0
c000d2e9:	eb 49                	jmp    c000d334 <findRSDP()+0x8c>
c000d2eb:	90                   	nop
c000d2ec:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000d2f4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000d2fc:	77 2e                	ja     c000d32c <findRSDP()+0x84>
c000d2fe:	83 ec 04             	sub    esp,0x4
c000d301:	6a 08                	push   0x8
c000d303:	68 7f eb 01 c0       	push   0xc001eb7f
c000d308:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d30c:	e8 93 30 ff ff       	call   c00003a4 <memcmp>
c000d311:	83 c4 10             	add    esp,0x10
c000d314:	85 c0                	test   eax,eax
c000d316:	0f 94 c0             	sete   al
c000d319:	84 c0                	test   al,al
c000d31b:	74 07                	je     c000d324 <findRSDP()+0x7c>
c000d31d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d321:	eb 11                	jmp    c000d334 <findRSDP()+0x8c>
c000d323:	90                   	nop
c000d324:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000d329:	eb c9                	jmp    c000d2f4 <findRSDP()+0x4c>
c000d32b:	90                   	nop
c000d32c:	b8 00 00 00 00       	mov    eax,0x0
c000d331:	8d 76 00             	lea    esi,[esi+0x0]
c000d334:	83 c4 1c             	add    esp,0x1c
c000d337:	c3                   	ret    

c000d338 <loadACPITables(unsigned char*)>:
c000d338:	57                   	push   edi
c000d339:	56                   	push   esi
c000d33a:	53                   	push   ebx
c000d33b:	83 ec 60             	sub    esp,0x60
c000d33e:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c000d343:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d349:	83 e0 04             	and    eax,0x4
c000d34c:	84 c0                	test   al,al
c000d34e:	0f 84 3c 02 00 00    	je     c000d590 <loadACPITables(unsigned char*)+0x258>
c000d354:	a0 c0 2f 02 c0       	mov    al,ds:0xc0022fc0
c000d359:	84 c0                	test   al,al
c000d35b:	74 77                	je     c000d3d4 <loadACPITables(unsigned char*)+0x9c>
c000d35d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d361:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d365:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d369:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d36c:	83 e8 24             	sub    eax,0x24
c000d36f:	c1 e8 03             	shr    eax,0x3
c000d372:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d376:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000d37e:	66 90                	xchg   ax,ax
c000d380:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000d384:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000d388:	0f 8d b6 00 00 00    	jge    c000d444 <loadACPITables(unsigned char*)+0x10c>
c000d38e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d392:	83 c0 24             	add    eax,0x24
c000d395:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d399:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d39d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d3a1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000d3a5:	c1 e0 03             	shl    eax,0x3
c000d3a8:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000d3ac:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d3b0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d3b3:	8b 00                	mov    eax,DWORD PTR [eax]
c000d3b5:	89 c1                	mov    ecx,eax
c000d3b7:	a1 ac 2d 02 c0       	mov    eax,ds:0xc0022dac
c000d3bc:	8d 50 01             	lea    edx,[eax+0x1]
c000d3bf:	89 15 ac 2d 02 c0    	mov    DWORD PTR ds:0xc0022dac,edx
c000d3c5:	89 ca                	mov    edx,ecx
c000d3c7:	89 14 c5 c4 2d 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd23c],edx
c000d3ce:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000d3d2:	eb ac                	jmp    c000d380 <loadACPITables(unsigned char*)+0x48>
c000d3d4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d3d8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d3dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d3e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d3e3:	83 e8 24             	sub    eax,0x24
c000d3e6:	c1 e8 02             	shr    eax,0x2
c000d3e9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000d3ed:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000d3f5:	8d 76 00             	lea    esi,[esi+0x0]
c000d3f8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d3fc:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000d400:	7d 42                	jge    c000d444 <loadACPITables(unsigned char*)+0x10c>
c000d402:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d406:	83 c0 24             	add    eax,0x24
c000d409:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d40d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d411:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d415:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d419:	c1 e0 02             	shl    eax,0x2
c000d41c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d420:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d424:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d426:	a1 ac 2d 02 c0       	mov    eax,ds:0xc0022dac
c000d42b:	8d 50 01             	lea    edx,[eax+0x1]
c000d42e:	89 15 ac 2d 02 c0    	mov    DWORD PTR ds:0xc0022dac,edx
c000d434:	89 ca                	mov    edx,ecx
c000d436:	89 14 c5 c4 2d 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd23c],edx
c000d43d:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000d441:	eb b5                	jmp    c000d3f8 <loadACPITables(unsigned char*)+0xc0>
c000d443:	90                   	nop
c000d444:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000d44c:	a1 ac 2d 02 c0       	mov    eax,ds:0xc0022dac
c000d451:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000d455:	0f 8d 39 01 00 00    	jge    c000d594 <loadACPITables(unsigned char*)+0x25c>
c000d45b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d45f:	8b 04 c5 c4 2d 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd23c]
c000d466:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d46a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d46e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d472:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d476:	25 ff 0f 00 00       	and    eax,0xfff
c000d47b:	89 c6                	mov    esi,eax
c000d47d:	8b 1d 94 08 02 c0    	mov    ebx,DWORD PTR ds:0xc0020894
c000d483:	83 ec 0c             	sub    esp,0xc
c000d486:	6a 01                	push   0x1
c000d488:	e8 18 b4 ff ff       	call   c00088a5 <Virt::allocateKernelVirtualPages(int)>
c000d48d:	83 c4 10             	add    esp,0x10
c000d490:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d494:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d49a:	83 ec 0c             	sub    esp,0xc
c000d49d:	6a 01                	push   0x1
c000d49f:	6a 01                	push   0x1
c000d4a1:	50                   	push   eax
c000d4a2:	52                   	push   edx
c000d4a3:	53                   	push   ebx
c000d4a4:	e8 47 bd ff ff       	call   c00091f0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d4a9:	83 c4 20             	add    esp,0x20
c000d4ac:	09 f0                	or     eax,esi
c000d4ae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d4b2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d4b6:	c1 e0 03             	shl    eax,0x3
c000d4b9:	05 c0 2d 02 c0       	add    eax,0xc0022dc0
c000d4be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d4c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d4c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4ca:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000d4d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d4d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d4da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d4de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d4e2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d4e6:	89 c6                	mov    esi,eax
c000d4e8:	89 d7                	mov    edi,edx
c000d4ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d4ec:	89 c8                	mov    eax,ecx
c000d4ee:	89 fa                	mov    edx,edi
c000d4f0:	89 f3                	mov    ebx,esi
c000d4f2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000d4f6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000d4fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d4fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d502:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d505:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d509:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d50d:	05 00 10 00 00       	add    eax,0x1000
c000d512:	c1 e8 0c             	shr    eax,0xc
c000d515:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d519:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d51d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d521:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d525:	25 ff 0f 00 00       	and    eax,0xfff
c000d52a:	89 c6                	mov    esi,eax
c000d52c:	8b 1d 94 08 02 c0    	mov    ebx,DWORD PTR ds:0xc0020894
c000d532:	83 ec 0c             	sub    esp,0xc
c000d535:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000d539:	e8 67 b3 ff ff       	call   c00088a5 <Virt::allocateKernelVirtualPages(int)>
c000d53e:	83 c4 10             	add    esp,0x10
c000d541:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d545:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d54b:	83 ec 0c             	sub    esp,0xc
c000d54e:	6a 01                	push   0x1
c000d550:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d554:	50                   	push   eax
c000d555:	52                   	push   edx
c000d556:	53                   	push   ebx
c000d557:	e8 94 bc ff ff       	call   c00091f0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d55c:	83 c4 20             	add    esp,0x20
c000d55f:	09 f0                	or     eax,esi
c000d561:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d565:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d569:	83 ec 0c             	sub    esp,0xc
c000d56c:	50                   	push   eax
c000d56d:	e8 27 b6 ff ff       	call   c0008b99 <Virt::freeKernelVirtualPages(unsigned long)>
c000d572:	83 c4 10             	add    esp,0x10
c000d575:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d579:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000d57d:	89 14 c5 c4 2d 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd23c],edx
c000d584:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000d588:	e9 bf fe ff ff       	jmp    c000d44c <loadACPITables(unsigned char*)+0x114>
c000d58d:	8d 76 00             	lea    esi,[esi+0x0]
c000d590:	90                   	nop
c000d591:	8d 76 00             	lea    esi,[esi+0x0]
c000d594:	83 c4 60             	add    esp,0x60
c000d597:	5b                   	pop    ebx
c000d598:	5e                   	pop    esi
c000d599:	5f                   	pop    edi
c000d59a:	c3                   	ret    
c000d59b:	90                   	nop

c000d59c <findRSDT(unsigned char*)>:
c000d59c:	57                   	push   edi
c000d59d:	56                   	push   esi
c000d59e:	53                   	push   ebx
c000d59f:	83 ec 50             	sub    esp,0x50
c000d5a2:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c000d5a7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d5ad:	83 e0 04             	and    eax,0x4
c000d5b0:	84 c0                	test   al,al
c000d5b2:	75 0c                	jne    c000d5c0 <findRSDT(unsigned char*)+0x24>
c000d5b4:	b8 00 00 00 00       	mov    eax,0x0
c000d5b9:	e9 26 01 00 00       	jmp    c000d6e4 <findRSDT(unsigned char*)+0x148>
c000d5be:	66 90                	xchg   ax,ax
c000d5c0:	89 e0                	mov    eax,esp
c000d5c2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000d5c6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d5ce:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000d5d6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d5da:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d5de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d5e2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000d5e6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000d5ea:	89 c6                	mov    esi,eax
c000d5ec:	89 d7                	mov    edi,edx
c000d5ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d5f0:	89 c8                	mov    eax,ecx
c000d5f2:	89 fa                	mov    edx,edi
c000d5f4:	89 f3                	mov    ebx,esi
c000d5f6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000d5fa:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d5fe:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d602:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d606:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000d60a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000d612:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d616:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d61a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d61e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d622:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d626:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d62a:	25 ff 0f 00 00       	and    eax,0xfff
c000d62f:	89 c6                	mov    esi,eax
c000d631:	8b 1d 94 08 02 c0    	mov    ebx,DWORD PTR ds:0xc0020894
c000d637:	83 ec 0c             	sub    esp,0xc
c000d63a:	6a 02                	push   0x2
c000d63c:	e8 64 b2 ff ff       	call   c00088a5 <Virt::allocateKernelVirtualPages(int)>
c000d641:	83 c4 10             	add    esp,0x10
c000d644:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000d648:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d64e:	83 ec 0c             	sub    esp,0xc
c000d651:	6a 01                	push   0x1
c000d653:	6a 02                	push   0x2
c000d655:	50                   	push   eax
c000d656:	52                   	push   edx
c000d657:	53                   	push   ebx
c000d658:	e8 93 bb ff ff       	call   c00091f0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d65d:	83 c4 20             	add    esp,0x20
c000d660:	09 f0                	or     eax,esi
c000d662:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d666:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d66a:	25 ff 0f 00 00       	and    eax,0xfff
c000d66f:	89 c6                	mov    esi,eax
c000d671:	8b 1d 94 08 02 c0    	mov    ebx,DWORD PTR ds:0xc0020894
c000d677:	83 ec 0c             	sub    esp,0xc
c000d67a:	6a 02                	push   0x2
c000d67c:	e8 24 b2 ff ff       	call   c00088a5 <Virt::allocateKernelVirtualPages(int)>
c000d681:	83 c4 10             	add    esp,0x10
c000d684:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000d688:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d68e:	83 ec 0c             	sub    esp,0xc
c000d691:	6a 01                	push   0x1
c000d693:	6a 02                	push   0x2
c000d695:	50                   	push   eax
c000d696:	52                   	push   edx
c000d697:	53                   	push   ebx
c000d698:	e8 53 bb ff ff       	call   c00091f0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d69d:	83 c4 20             	add    esp,0x20
c000d6a0:	09 f0                	or     eax,esi
c000d6a2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d6a6:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000d6ab:	75 13                	jne    c000d6c0 <findRSDT(unsigned char*)+0x124>
c000d6ad:	c6 05 c0 2f 02 c0 00 	mov    BYTE PTR ds:0xc0022fc0,0x0
c000d6b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d6b8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d6bc:	eb 22                	jmp    c000d6e0 <findRSDT(unsigned char*)+0x144>
c000d6be:	66 90                	xchg   ax,ax
c000d6c0:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000d6c5:	75 11                	jne    c000d6d8 <findRSDT(unsigned char*)+0x13c>
c000d6c7:	c6 05 c0 2f 02 c0 01 	mov    BYTE PTR ds:0xc0022fc0,0x1
c000d6ce:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d6d2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d6d6:	eb 08                	jmp    c000d6e0 <findRSDT(unsigned char*)+0x144>
c000d6d8:	b8 00 00 00 00       	mov    eax,0x0
c000d6dd:	eb 05                	jmp    c000d6e4 <findRSDT(unsigned char*)+0x148>
c000d6df:	90                   	nop
c000d6e0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d6e4:	83 c4 50             	add    esp,0x50
c000d6e7:	5b                   	pop    ebx
c000d6e8:	5e                   	pop    esi
c000d6e9:	5f                   	pop    edi
c000d6ea:	c3                   	ret    
c000d6eb:	90                   	nop

c000d6ec <findDataTable(unsigned char*, char*)>:
c000d6ec:	83 ec 1c             	sub    esp,0x1c
c000d6ef:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c000d6f4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d6fa:	83 e0 04             	and    eax,0x4
c000d6fd:	84 c0                	test   al,al
c000d6ff:	75 07                	jne    c000d708 <findDataTable(unsigned char*, char*)+0x1c>
c000d701:	b8 00 00 00 00       	mov    eax,0x0
c000d706:	eb 58                	jmp    c000d760 <findDataTable(unsigned char*, char*)+0x74>
c000d708:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000d710:	a1 ac 2d 02 c0       	mov    eax,ds:0xc0022dac
c000d715:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000d719:	7d 3d                	jge    c000d758 <findDataTable(unsigned char*, char*)+0x6c>
c000d71b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d71f:	c1 e0 03             	shl    eax,0x3
c000d722:	05 c0 2d 02 c0       	add    eax,0xc0022dc0
c000d727:	83 ec 04             	sub    esp,0x4
c000d72a:	6a 04                	push   0x4
c000d72c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d730:	50                   	push   eax
c000d731:	e8 6e 2c ff ff       	call   c00003a4 <memcmp>
c000d736:	83 c4 10             	add    esp,0x10
c000d739:	85 c0                	test   eax,eax
c000d73b:	0f 94 c0             	sete   al
c000d73e:	84 c0                	test   al,al
c000d740:	74 0e                	je     c000d750 <findDataTable(unsigned char*, char*)+0x64>
c000d742:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d746:	8b 04 c5 c4 2d 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd23c]
c000d74d:	eb 11                	jmp    c000d760 <findDataTable(unsigned char*, char*)+0x74>
c000d74f:	90                   	nop
c000d750:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000d754:	eb ba                	jmp    c000d710 <findDataTable(unsigned char*, char*)+0x24>
c000d756:	66 90                	xchg   ax,ax
c000d758:	b8 00 00 00 00       	mov    eax,0x0
c000d75d:	8d 76 00             	lea    esi,[esi+0x0]
c000d760:	83 c4 1c             	add    esp,0x1c
c000d763:	c3                   	ret    

c000d764 <scanMADT()>:
c000d764:	53                   	push   ebx
c000d765:	83 ec 38             	sub    esp,0x38
c000d768:	a1 c0 07 02 c0       	mov    eax,ds:0xc00207c0
c000d76d:	25 00 04 00 00       	and    eax,0x400
c000d772:	74 14                	je     c000d788 <scanMADT()+0x24>
c000d774:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c000d779:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d77f:	83 e2 fb             	and    edx,0xfffffffb
c000d782:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d788:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c000d78d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d793:	83 e0 04             	and    eax,0x4
c000d796:	84 c0                	test   al,al
c000d798:	0f 84 52 04 00 00    	je     c000dbf0 <scanMADT()+0x48c>
c000d79e:	e8 05 fb ff ff       	call   c000d2a8 <findRSDP()>
c000d7a3:	a3 cc 2f 02 c0       	mov    ds:0xc0022fcc,eax
c000d7a8:	a1 cc 2f 02 c0       	mov    eax,ds:0xc0022fcc
c000d7ad:	85 c0                	test   eax,eax
c000d7af:	75 1b                	jne    c000d7cc <scanMADT()+0x68>
c000d7b1:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c000d7b6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d7bc:	83 e2 fb             	and    edx,0xfffffffb
c000d7bf:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d7c5:	e9 2e 04 00 00       	jmp    c000dbf8 <scanMADT()+0x494>
c000d7ca:	66 90                	xchg   ax,ax
c000d7cc:	a1 cc 2f 02 c0       	mov    eax,ds:0xc0022fcc
c000d7d1:	83 ec 0c             	sub    esp,0xc
c000d7d4:	50                   	push   eax
c000d7d5:	e8 c2 fd ff ff       	call   c000d59c <findRSDT(unsigned char*)>
c000d7da:	83 c4 10             	add    esp,0x10
c000d7dd:	a3 c8 2f 02 c0       	mov    ds:0xc0022fc8,eax
c000d7e2:	a1 c8 2f 02 c0       	mov    eax,ds:0xc0022fc8
c000d7e7:	85 c0                	test   eax,eax
c000d7e9:	75 19                	jne    c000d804 <scanMADT()+0xa0>
c000d7eb:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c000d7f0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d7f6:	83 e2 fb             	and    edx,0xfffffffb
c000d7f9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d7ff:	e9 f4 03 00 00       	jmp    c000dbf8 <scanMADT()+0x494>
c000d804:	a1 c8 2f 02 c0       	mov    eax,ds:0xc0022fc8
c000d809:	83 ec 0c             	sub    esp,0xc
c000d80c:	50                   	push   eax
c000d80d:	e8 26 fb ff ff       	call   c000d338 <loadACPITables(unsigned char*)>
c000d812:	83 c4 10             	add    esp,0x10
c000d815:	a1 c8 2f 02 c0       	mov    eax,ds:0xc0022fc8
c000d81a:	83 ec 08             	sub    esp,0x8
c000d81d:	68 88 eb 01 c0       	push   0xc001eb88
c000d822:	50                   	push   eax
c000d823:	e8 c4 fe ff ff       	call   c000d6ec <findDataTable(unsigned char*, char*)>
c000d828:	83 c4 10             	add    esp,0x10
c000d82b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d82f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000d834:	75 1a                	jne    c000d850 <scanMADT()+0xec>
c000d836:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c000d83b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d841:	83 e2 fe             	and    edx,0xfffffffe
c000d844:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d84a:	e9 a9 03 00 00       	jmp    c000dbf8 <scanMADT()+0x494>
c000d84f:	90                   	nop
c000d850:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000d858:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d85c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d85f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000d863:	0f 87 8f 03 00 00    	ja     c000dbf8 <scanMADT()+0x494>
c000d869:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000d871:	0f 87 81 03 00 00    	ja     c000dbf8 <scanMADT()+0x494>
c000d877:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d87b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d87f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d883:	8d 50 01             	lea    edx,[eax+0x1]
c000d886:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d88a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d88e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d892:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000d896:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d89a:	8d 50 01             	lea    edx,[eax+0x1]
c000d89d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d8a5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d8a9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000d8ad:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000d8b2:	0f 86 3c 03 00 00    	jbe    c000dbf4 <scanMADT()+0x490>
c000d8b8:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000d8bd:	75 59                	jne    c000d918 <scanMADT()+0x1b4>
c000d8bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8c3:	8d 50 01             	lea    edx,[eax+0x1]
c000d8c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8ca:	8a 15 c0 31 02 c0    	mov    dl,BYTE PTR ds:0xc00231c0
c000d8d0:	0f b6 d2             	movzx  edx,dl
c000d8d3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d8d7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d8db:	88 82 00 32 02 c0    	mov    BYTE PTR [edx-0x3ffdce00],al
c000d8e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8e5:	8d 50 01             	lea    edx,[eax+0x1]
c000d8e8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8ec:	8a 15 c0 31 02 c0    	mov    dl,BYTE PTR ds:0xc00231c0
c000d8f2:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d8f5:	88 0d c0 31 02 c0    	mov    BYTE PTR ds:0xc00231c0,cl
c000d8fb:	0f b6 d2             	movzx  edx,dl
c000d8fe:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d902:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d906:	88 82 e0 31 02 c0    	mov    BYTE PTR [edx-0x3ffdce20],al
c000d90c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d911:	e9 c6 02 00 00       	jmp    c000dbdc <scanMADT()+0x478>
c000d916:	66 90                	xchg   ax,ax
c000d918:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000d91d:	0f 85 15 01 00 00    	jne    c000da38 <scanMADT()+0x2d4>
c000d923:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d927:	8d 50 01             	lea    edx,[eax+0x1]
c000d92a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d92e:	8a 15 80 30 02 c0    	mov    dl,BYTE PTR ds:0xc0023080
c000d934:	0f b6 d2             	movzx  edx,dl
c000d937:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d93b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d93f:	88 82 a0 30 02 c0    	mov    BYTE PTR [edx-0x3ffdcf60],al
c000d945:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000d949:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d94d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d951:	01 d0                	add    eax,edx
c000d953:	83 c0 2c             	add    eax,0x2c
c000d956:	8a 00                	mov    al,BYTE PTR [eax]
c000d958:	0f b6 d0             	movzx  edx,al
c000d95b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d95f:	8d 48 01             	lea    ecx,[eax+0x1]
c000d962:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d966:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d96a:	0f b6 c0             	movzx  eax,al
c000d96d:	c1 e0 08             	shl    eax,0x8
c000d970:	89 d1                	mov    ecx,edx
c000d972:	09 c1                	or     ecx,eax
c000d974:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d978:	8d 50 02             	lea    edx,[eax+0x2]
c000d97b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d97f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d983:	0f b6 c0             	movzx  eax,al
c000d986:	c1 e0 10             	shl    eax,0x10
c000d989:	09 c1                	or     ecx,eax
c000d98b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d98f:	8d 50 03             	lea    edx,[eax+0x3]
c000d992:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d996:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d99a:	0f b6 c0             	movzx  eax,al
c000d99d:	c1 e0 18             	shl    eax,0x18
c000d9a0:	09 c1                	or     ecx,eax
c000d9a2:	89 ca                	mov    edx,ecx
c000d9a4:	a0 80 30 02 c0       	mov    al,ds:0xc0023080
c000d9a9:	0f b6 c0             	movzx  eax,al
c000d9ac:	89 14 85 c0 30 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcf40],edx
c000d9b3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d9b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d9bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d9c0:	01 d0                	add    eax,edx
c000d9c2:	83 c0 2c             	add    eax,0x2c
c000d9c5:	8a 00                	mov    al,BYTE PTR [eax]
c000d9c7:	0f b6 d0             	movzx  edx,al
c000d9ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d9ce:	8d 48 01             	lea    ecx,[eax+0x1]
c000d9d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d9d5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d9d9:	0f b6 c0             	movzx  eax,al
c000d9dc:	c1 e0 08             	shl    eax,0x8
c000d9df:	89 d1                	mov    ecx,edx
c000d9e1:	09 c1                	or     ecx,eax
c000d9e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d9e7:	8d 50 02             	lea    edx,[eax+0x2]
c000d9ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d9ee:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d9f2:	0f b6 c0             	movzx  eax,al
c000d9f5:	c1 e0 10             	shl    eax,0x10
c000d9f8:	09 c1                	or     ecx,eax
c000d9fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d9fe:	8d 50 03             	lea    edx,[eax+0x3]
c000da01:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000da05:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000da09:	0f b6 c0             	movzx  eax,al
c000da0c:	c1 e0 18             	shl    eax,0x18
c000da0f:	09 c1                	or     ecx,eax
c000da11:	89 ca                	mov    edx,ecx
c000da13:	a0 80 30 02 c0       	mov    al,ds:0xc0023080
c000da18:	0f b6 c0             	movzx  eax,al
c000da1b:	89 14 85 40 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcec0],edx
c000da22:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000da27:	a0 80 30 02 c0       	mov    al,ds:0xc0023080
c000da2c:	40                   	inc    eax
c000da2d:	a2 80 30 02 c0       	mov    ds:0xc0023080,al
c000da32:	e9 a5 01 00 00       	jmp    c000dbdc <scanMADT()+0x478>
c000da37:	90                   	nop
c000da38:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000da3d:	0f 85 e9 00 00 00    	jne    c000db2c <scanMADT()+0x3c8>
c000da43:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000da47:	8d 50 01             	lea    edx,[eax+0x1]
c000da4a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da4e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000da52:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000da56:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000da5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000da5e:	8d 50 01             	lea    edx,[eax+0x1]
c000da61:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da65:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000da69:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000da6d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000da71:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000da75:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000da79:	01 d0                	add    eax,edx
c000da7b:	83 c0 2c             	add    eax,0x2c
c000da7e:	8a 00                	mov    al,BYTE PTR [eax]
c000da80:	0f b6 d0             	movzx  edx,al
c000da83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000da87:	8d 48 01             	lea    ecx,[eax+0x1]
c000da8a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000da8e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000da92:	0f b6 c0             	movzx  eax,al
c000da95:	c1 e0 08             	shl    eax,0x8
c000da98:	89 d1                	mov    ecx,edx
c000da9a:	09 c1                	or     ecx,eax
c000da9c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000daa0:	8d 50 02             	lea    edx,[eax+0x2]
c000daa3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000daa7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000daab:	0f b6 c0             	movzx  eax,al
c000daae:	c1 e0 10             	shl    eax,0x10
c000dab1:	09 c1                	or     ecx,eax
c000dab3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000dab7:	8d 50 03             	lea    edx,[eax+0x3]
c000daba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dabe:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000dac2:	0f b6 c0             	movzx  eax,al
c000dac5:	c1 e0 18             	shl    eax,0x18
c000dac8:	09 c8                	or     eax,ecx
c000daca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dace:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000dad3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dad7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000dadb:	01 d0                	add    eax,edx
c000dadd:	83 c0 2c             	add    eax,0x2c
c000dae0:	8a 00                	mov    al,BYTE PTR [eax]
c000dae2:	0f b6 c0             	movzx  eax,al
c000dae5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000dae9:	8d 4a 01             	lea    ecx,[edx+0x1]
c000daec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000daf0:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000daf4:	0f b6 d2             	movzx  edx,dl
c000daf7:	c1 e2 08             	shl    edx,0x8
c000dafa:	09 d0                	or     eax,edx
c000dafc:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000db01:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000db06:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000db0b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000db0f:	88 90 60 01 02 c0    	mov    BYTE PTR [eax-0x3ffdfea0],dl
c000db15:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000db1a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000db1f:	66 89 84 12 60 30 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdcfa0],ax
c000db27:	e9 b0 00 00 00       	jmp    c000dbdc <scanMADT()+0x478>
c000db2c:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000db31:	0f 85 99 00 00 00    	jne    c000dbd0 <scanMADT()+0x46c>
c000db37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000db3b:	8d 50 01             	lea    edx,[eax+0x1]
c000db3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000db42:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000db46:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000db4a:	0f b6 c0             	movzx  eax,al
c000db4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000db51:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000db55:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000db59:	01 d0                	add    eax,edx
c000db5b:	83 c0 2c             	add    eax,0x2c
c000db5e:	8a 00                	mov    al,BYTE PTR [eax]
c000db60:	0f b6 d0             	movzx  edx,al
c000db63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000db67:	8d 48 01             	lea    ecx,[eax+0x1]
c000db6a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000db6e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000db72:	0f b6 c0             	movzx  eax,al
c000db75:	c1 e0 08             	shl    eax,0x8
c000db78:	09 d0                	or     eax,edx
c000db7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db7e:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000db83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000db87:	8d 50 01             	lea    edx,[eax+0x1]
c000db8a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000db8e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000db92:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000db96:	0f b6 c0             	movzx  eax,al
c000db99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dba1:	c1 e0 08             	shl    eax,0x8
c000dba4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000dba8:	89 c1                	mov    ecx,eax
c000dbaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dbae:	c1 e0 18             	shl    eax,0x18
c000dbb1:	89 c3                	mov    ebx,eax
c000dbb3:	a1 d0 2f 02 c0       	mov    eax,ds:0xc0022fd0
c000dbb8:	8d 50 01             	lea    edx,[eax+0x1]
c000dbbb:	89 15 d0 2f 02 c0    	mov    DWORD PTR ds:0xc0022fd0,edx
c000dbc1:	09 d9                	or     ecx,ebx
c000dbc3:	89 ca                	mov    edx,ecx
c000dbc5:	89 14 85 e0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd020],edx
c000dbcc:	eb 0e                	jmp    c000dbdc <scanMADT()+0x478>
c000dbce:	66 90                	xchg   ax,ax
c000dbd0:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000dbd5:	75 05                	jne    c000dbdc <scanMADT()+0x478>
c000dbd7:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000dbdc:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000dbe1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dbe5:	01 d0                	add    eax,edx
c000dbe7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000dbeb:	e9 68 fc ff ff       	jmp    c000d858 <scanMADT()+0xf4>
c000dbf0:	90                   	nop
c000dbf1:	eb 05                	jmp    c000dbf8 <scanMADT()+0x494>
c000dbf3:	90                   	nop
c000dbf4:	90                   	nop
c000dbf5:	8d 76 00             	lea    esi,[esi+0x0]
c000dbf8:	83 c4 38             	add    esp,0x38
c000dbfb:	5b                   	pop    ebx
c000dbfc:	c3                   	ret    
c000dbfd:	90                   	nop
c000dbfe:	66 90                	xchg   ax,ax

c000dc00 <ACPI::ACPI()>:
c000dc00:	83 ec 0c             	sub    esp,0xc
c000dc03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc07:	83 ec 08             	sub    esp,0x8
c000dc0a:	68 8d eb 01 c0       	push   0xc001eb8d
c000dc0f:	50                   	push   eax
c000dc10:	e8 ad d4 ff ff       	call   c000b0c2 <Device::Device(char const*)>
c000dc15:	83 c4 10             	add    esp,0x10
c000dc18:	ba c4 ec 01 c0       	mov    edx,0xc001ecc4
c000dc1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc21:	89 10                	mov    DWORD PTR [eax],edx
c000dc23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc27:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000dc2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc32:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000dc3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc40:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000dc4a:	e8 15 fb ff ff       	call   c000d764 <scanMADT()>
c000dc4f:	90                   	nop
c000dc50:	83 c4 0c             	add    esp,0xc
c000dc53:	c3                   	ret    

c000dc54 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000dc54:	83 ec 2c             	sub    esp,0x2c
c000dc57:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000dc5b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dc5f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000dc63:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000dc67:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000dc6c:	88 d0                	mov    al,dl
c000dc6e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000dc72:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000dc77:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000dc7f:	90                   	nop
c000dc80:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc84:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dc8a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000dc8e:	0f 8d 9c 00 00 00    	jge    c000dd30 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000dc94:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc98:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dc9c:	83 c2 2a             	add    edx,0x2a
c000dc9f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000dca3:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000dca8:	75 7a                	jne    c000dd24 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000dcaa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dcae:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dcb2:	83 c2 2a             	add    edx,0x2a
c000dcb5:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000dcb9:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000dcbd:	75 65                	jne    c000dd24 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000dcbf:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000dcc4:	74 3a                	je     c000dd00 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000dcc6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dcca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dcce:	83 c2 2a             	add    edx,0x2a
c000dcd1:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000dcd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dcd9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dcdc:	39 c2                	cmp    edx,eax
c000dcde:	74 10                	je     c000dcf0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000dce0:	83 ec 0c             	sub    esp,0xc
c000dce3:	68 08 eb 01 c0       	push   0xc001eb08
c000dce8:	e8 f0 1a 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c000dced:	83 c4 10             	add    esp,0x10
c000dcf0:	83 ec 0c             	sub    esp,0xc
c000dcf3:	68 92 eb 01 c0       	push   0xc001eb92
c000dcf8:	e8 e0 1a 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c000dcfd:	83 c4 10             	add    esp,0x10
c000dd00:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000dd04:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dd08:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dd0c:	83 c2 2a             	add    edx,0x2a
c000dd0f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000dd13:	8b 02                	mov    eax,DWORD PTR [edx]
c000dd15:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000dd18:	89 01                	mov    DWORD PTR [ecx],eax
c000dd1a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000dd1d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dd22:	66 90                	xchg   ax,ax
c000dd24:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000dd28:	e9 53 ff ff ff       	jmp    c000dc80 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000dd2d:	8d 76 00             	lea    esi,[esi+0x0]
c000dd30:	90                   	nop
c000dd31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dd35:	83 c4 2c             	add    esp,0x2c
c000dd38:	c2 04 00             	ret    0x4
c000dd3b:	90                   	nop

c000dd3c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000dd3c:	83 ec 1c             	sub    esp,0x1c
c000dd3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dd43:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dd47:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000dd4b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000dd50:	88 c8                	mov    al,cl
c000dd52:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000dd56:	88 d0                	mov    al,dl
c000dd58:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000dd5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd60:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000dd66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd6a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000dd6d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000dd71:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000dd75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd79:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dd7f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dd83:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000dd86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd8a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000dd8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd93:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000dd99:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000dd9d:	8d 48 01             	lea    ecx,[eax+0x1]
c000dda0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dda4:	83 c2 2a             	add    edx,0x2a
c000dda7:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ddab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddaf:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ddb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddb9:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ddbc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ddc0:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ddc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddc8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ddce:	8d 50 01             	lea    edx,[eax+0x1]
c000ddd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddd5:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000dddb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dddf:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dde5:	3d 00 02 00 00       	cmp    eax,0x200
c000ddea:	75 10                	jne    c000ddfc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000ddec:	83 ec 0c             	sub    esp,0xc
c000ddef:	68 a1 eb 01 c0       	push   0xc001eba1
c000ddf4:	e8 e4 19 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c000ddf9:	83 c4 10             	add    esp,0x10
c000ddfc:	90                   	nop
c000ddfd:	83 c4 1c             	add    esp,0x1c
c000de00:	c3                   	ret    
c000de01:	90                   	nop
c000de02:	66 90                	xchg   ax,ax

c000de04 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000de04:	b8 00 00 00 00       	mov    eax,0x0
c000de09:	c3                   	ret    
c000de0a:	66 90                	xchg   ax,ax

c000de0c <ACPI::detectPCI()>:
c000de0c:	53                   	push   ebx
c000de0d:	83 ec 28             	sub    esp,0x28
c000de10:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000de15:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000de1a:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c000de1f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000de25:	83 e0 04             	and    eax,0x4
c000de28:	84 c0                	test   al,al
c000de2a:	74 2c                	je     c000de58 <ACPI::detectPCI()+0x4c>
c000de2c:	a1 c8 2f 02 c0       	mov    eax,ds:0xc0022fc8
c000de31:	83 ec 08             	sub    esp,0x8
c000de34:	68 be eb 01 c0       	push   0xc001ebbe
c000de39:	50                   	push   eax
c000de3a:	e8 ad f8 ff ff       	call   c000d6ec <findDataTable(unsigned char*, char*)>
c000de3f:	83 c4 10             	add    esp,0x10
c000de42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de46:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000de4b:	74 0b                	je     c000de58 <ACPI::detectPCI()+0x4c>
c000de4d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000de52:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000de57:	90                   	nop
c000de58:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000de60:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de64:	8a 00                	mov    al,BYTE PTR [eax]
c000de66:	3c 01                	cmp    al,0x1
c000de68:	75 0e                	jne    c000de78 <ACPI::detectPCI()+0x6c>
c000de6a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000de6f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000de74:	eb 2a                	jmp    c000dea0 <ACPI::detectPCI()+0x94>
c000de76:	66 90                	xchg   ax,ax
c000de78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de7c:	8a 00                	mov    al,BYTE PTR [eax]
c000de7e:	3c 02                	cmp    al,0x2
c000de80:	75 1e                	jne    c000dea0 <ACPI::detectPCI()+0x94>
c000de82:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000de87:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000de8c:	74 12                	je     c000dea0 <ACPI::detectPCI()+0x94>
c000de8e:	83 ec 0c             	sub    esp,0xc
c000de91:	68 38 eb 01 c0       	push   0xc001eb38
c000de96:	e8 42 19 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c000de9b:	83 c4 10             	add    esp,0x10
c000de9e:	66 90                	xchg   ax,ax
c000dea0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000dea4:	83 f0 01             	xor    eax,0x1
c000dea7:	84 c0                	test   al,al
c000dea9:	74 41                	je     c000deec <ACPI::detectPCI()+0xe0>
c000deab:	e8 a0 22 ff ff       	call   c0000150 <manualPCIProbe>
c000deb0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000deb4:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000deb9:	75 0d                	jne    c000dec8 <ACPI::detectPCI()+0xbc>
c000debb:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dec0:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000dec5:	eb 25                	jmp    c000deec <ACPI::detectPCI()+0xe0>
c000dec7:	90                   	nop
c000dec8:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000decd:	75 1d                	jne    c000deec <ACPI::detectPCI()+0xe0>
c000decf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ded4:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ded9:	74 11                	je     c000deec <ACPI::detectPCI()+0xe0>
c000dedb:	83 ec 0c             	sub    esp,0xc
c000dede:	68 38 eb 01 c0       	push   0xc001eb38
c000dee3:	e8 f5 18 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c000dee8:	83 c4 10             	add    esp,0x10
c000deeb:	90                   	nop
c000deec:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000def1:	0f 84 85 00 00 00    	je     c000df7c <ACPI::detectPCI()+0x170>
c000def7:	83 ec 0c             	sub    esp,0xc
c000defa:	68 c3 eb 01 c0       	push   0xc001ebc3
c000deff:	e8 d3 8e ff ff       	call   c0006dd7 <Krnl::setBootMessage(char const*)>
c000df04:	83 c4 10             	add    esp,0x10
c000df07:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000df0f:	83 ec 0c             	sub    esp,0xc
c000df12:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000df16:	e8 62 8e ff ff       	call   c0006d7d <malloc>
c000df1b:	83 c4 10             	add    esp,0x10
c000df1e:	89 c3                	mov    ebx,eax
c000df20:	83 ec 0c             	sub    esp,0xc
c000df23:	53                   	push   ebx
c000df24:	e8 25 ad 00 00       	call   c0018c4e <PCI::PCI()>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000df30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df34:	83 ec 08             	sub    esp,0x8
c000df37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df3b:	50                   	push   eax
c000df3c:	e8 e9 cf ff ff       	call   c000af2a <Device::addChild(Device*)>
c000df41:	83 c4 10             	add    esp,0x10
c000df44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df48:	8b 00                	mov    eax,DWORD PTR [eax]
c000df4a:	83 c0 08             	add    eax,0x8
c000df4d:	8b 00                	mov    eax,DWORD PTR [eax]
c000df4f:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000df54:	74 0a                	je     c000df60 <ACPI::detectPCI()+0x154>
c000df56:	ba 01 00 00 00       	mov    edx,0x1
c000df5b:	eb 0b                	jmp    c000df68 <ACPI::detectPCI()+0x15c>
c000df5d:	8d 76 00             	lea    esi,[esi+0x0]
c000df60:	ba 02 00 00 00       	mov    edx,0x2
c000df65:	8d 76 00             	lea    esi,[esi+0x0]
c000df68:	6a 00                	push   0x0
c000df6a:	6a 00                	push   0x0
c000df6c:	52                   	push   edx
c000df6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df71:	ff d0                	call   eax
c000df73:	83 c4 10             	add    esp,0x10
c000df76:	e9 91 00 00 00       	jmp    c000e00c <ACPI::detectPCI()+0x200>
c000df7b:	90                   	nop
c000df7c:	83 ec 0c             	sub    esp,0xc
c000df7f:	68 db eb 01 c0       	push   0xc001ebdb
c000df84:	e8 4e 8e ff ff       	call   c0006dd7 <Krnl::setBootMessage(char const*)>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000df93:	83 ec 0c             	sub    esp,0xc
c000df96:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df9a:	e8 de 8d ff ff       	call   c0006d7d <malloc>
c000df9f:	83 c4 10             	add    esp,0x10
c000dfa2:	89 c3                	mov    ebx,eax
c000dfa4:	83 ec 0c             	sub    esp,0xc
c000dfa7:	53                   	push   ebx
c000dfa8:	e8 c7 b7 00 00       	call   c0019774 <IDE::IDE()>
c000dfad:	83 c4 10             	add    esp,0x10
c000dfb0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000dfb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dfb8:	83 ec 08             	sub    esp,0x8
c000dfbb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dfbf:	50                   	push   eax
c000dfc0:	e8 65 cf ff ff       	call   c000af2a <Device::addChild(Device*)>
c000dfc5:	83 c4 10             	add    esp,0x10
c000dfc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dfcc:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000dfd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dfda:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000dfe3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dfe7:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000dff0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dff4:	8b 00                	mov    eax,DWORD PTR [eax]
c000dff6:	83 c0 08             	add    eax,0x8
c000dff9:	8b 00                	mov    eax,DWORD PTR [eax]
c000dffb:	6a 00                	push   0x0
c000dffd:	6a 00                	push   0x0
c000dfff:	6a 00                	push   0x0
c000e001:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e005:	ff d0                	call   eax
c000e007:	83 c4 10             	add    esp,0x10
c000e00a:	66 90                	xchg   ax,ax
c000e00c:	90                   	nop
c000e00d:	83 c4 28             	add    esp,0x28
c000e010:	5b                   	pop    ebx
c000e011:	c3                   	ret    
c000e012:	66 90                	xchg   ax,ax

c000e014 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000e014:	83 ec 1c             	sub    esp,0x1c
c000e017:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e01b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000e01e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e022:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c000e027:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000e02c:	83 ec 08             	sub    esp,0x8
c000e02f:	52                   	push   edx
c000e030:	50                   	push   eax
c000e031:	e8 cc 83 ff ff       	call   c0006402 <Computer::readCMOS(unsigned char)>
c000e036:	83 c4 10             	add    esp,0x10
c000e039:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000e03d:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c000e042:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000e047:	83 ec 04             	sub    esp,0x4
c000e04a:	6a 01                	push   0x1
c000e04c:	52                   	push   edx
c000e04d:	50                   	push   eax
c000e04e:	e8 c1 84 ff ff       	call   c0006514 <Computer::writeCMOS(unsigned char, unsigned char)>
c000e053:	83 c4 10             	add    esp,0x10
c000e056:	90                   	nop
c000e057:	83 c4 1c             	add    esp,0x1c
c000e05a:	c3                   	ret    
c000e05b:	90                   	nop

c000e05c <ACPI::sleep()>:
c000e05c:	83 ec 0c             	sub    esp,0xc
c000e05f:	a1 a0 2d 02 c0       	mov    eax,ds:0xc0022da0
c000e064:	85 c0                	test   eax,eax
c000e066:	74 08                	je     c000e070 <ACPI::sleep()+0x14>
c000e068:	a1 a0 2d 02 c0       	mov    eax,ds:0xc0022da0
c000e06d:	ff d0                	call   eax
c000e06f:	90                   	nop
c000e070:	90                   	nop
c000e071:	83 c4 0c             	add    esp,0xc
c000e074:	c3                   	ret    
c000e075:	90                   	nop
c000e076:	66 90                	xchg   ax,ax

c000e078 <ACPI::open(int, int, void*)>:
c000e078:	57                   	push   edi
c000e079:	56                   	push   esi
c000e07a:	53                   	push   ebx
c000e07b:	81 ec 70 01 00 00    	sub    esp,0x170
c000e081:	83 ec 0c             	sub    esp,0xc
c000e084:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000e08b:	e8 7c fd ff ff       	call   c000de0c <ACPI::detectPCI()>
c000e090:	83 c4 10             	add    esp,0x10
c000e093:	83 ec 0c             	sub    esp,0xc
c000e096:	68 60 eb 01 c0       	push   0xc001eb60
c000e09b:	e8 37 8d ff ff       	call   c0006dd7 <Krnl::setBootMessage(char const*)>
c000e0a0:	83 c4 10             	add    esp,0x10
c000e0a3:	83 ec 0c             	sub    esp,0xc
c000e0a6:	68 f0 eb 01 c0       	push   0xc001ebf0
c000e0ab:	e8 5b 37 00 00       	call   c001180b <Thr::loadKernelSymbolTable(char const*)>
c000e0b0:	83 c4 10             	add    esp,0x10
c000e0b3:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000e0bb:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000e0c6:	83 ec 0c             	sub    esp,0xc
c000e0c9:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000e0d0:	e8 a8 8c ff ff       	call   c0006d7d <malloc>
c000e0d5:	83 c4 10             	add    esp,0x10
c000e0d8:	89 c3                	mov    ebx,eax
c000e0da:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c000e0df:	83 ec 04             	sub    esp,0x4
c000e0e2:	50                   	push   eax
c000e0e3:	68 0e ec 01 c0       	push   0xc001ec0e
c000e0e8:	53                   	push   ebx
c000e0e9:	e8 84 bf ff ff       	call   c000a072 <File::File(char const*, Process*)>
c000e0ee:	83 c4 10             	add    esp,0x10
c000e0f1:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000e0f8:	83 ec 08             	sub    esp,0x8
c000e0fb:	6a 01                	push   0x1
c000e0fd:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000e104:	e8 23 c0 ff ff       	call   c000a12c <File::open(FileOpenMode)>
c000e109:	83 c4 10             	add    esp,0x10
c000e10c:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000e113:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000e11b:	75 17                	jne    c000e134 <ACPI::open(int, int, void*)+0xbc>
c000e11d:	83 ec 0c             	sub    esp,0xc
c000e120:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000e127:	e8 5e c0 ff ff       	call   c000a18a <File::close()>
c000e12c:	83 c4 10             	add    esp,0x10
c000e12f:	eb 0b                	jmp    c000e13c <ACPI::open(int, int, void*)+0xc4>
c000e131:	8d 76 00             	lea    esi,[esi+0x0]
c000e134:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000e13c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000e144:	74 1e                	je     c000e164 <ACPI::open(int, int, void*)+0xec>
c000e146:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000e14d:	8b 00                	mov    eax,DWORD PTR [eax]
c000e14f:	83 c0 08             	add    eax,0x8
c000e152:	8b 00                	mov    eax,DWORD PTR [eax]
c000e154:	83 ec 0c             	sub    esp,0xc
c000e157:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000e15e:	ff d0                	call   eax
c000e160:	83 c4 10             	add    esp,0x10
c000e163:	90                   	nop
c000e164:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000e16b:	83 f0 01             	xor    eax,0x1
c000e16e:	84 c0                	test   al,al
c000e170:	74 42                	je     c000e1b4 <ACPI::open(int, int, void*)+0x13c>
c000e172:	83 ec 0c             	sub    esp,0xc
c000e175:	68 2c ec 01 c0       	push   0xc001ec2c
c000e17a:	e8 58 8c ff ff       	call   c0006dd7 <Krnl::setBootMessage(char const*)>
c000e17f:	83 c4 10             	add    esp,0x10
c000e182:	83 ec 04             	sub    esp,0x4
c000e185:	6a 0c                	push   0xc
c000e187:	68 47 ec 01 c0       	push   0xc001ec47
c000e18c:	68 58 ec 01 c0       	push   0xc001ec58
c000e191:	e8 ab 1e 00 00       	call   c0010041 <Reg::readIntWithDefault(char*, char*, int)>
c000e196:	83 c4 10             	add    esp,0x10
c000e199:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000e1a0:	83 ec 0c             	sub    esp,0xc
c000e1a3:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000e1aa:	e8 00 a9 ff ff       	call   c0008aaf <Virt::setupPageSwapping(int)>
c000e1af:	83 c4 10             	add    esp,0x10
c000e1b2:	66 90                	xchg   ax,ax
c000e1b4:	83 ec 0c             	sub    esp,0xc
c000e1b7:	68 cf dc 01 c0       	push   0xc001dccf
c000e1bc:	e8 16 8c ff ff       	call   c0006dd7 <Krnl::setBootMessage(char const*)>
c000e1c1:	83 c4 10             	add    esp,0x10
c000e1c4:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000e1cb:	83 ec 08             	sub    esp,0x8
c000e1ce:	6a 12                	push   0x12
c000e1d0:	50                   	push   eax
c000e1d1:	e8 6c d0 ff ff       	call   c000b242 <getDevicesOfType(DeviceType)>
c000e1d6:	83 c4 0c             	add    esp,0xc
c000e1d9:	8d 76 00             	lea    esi,[esi+0x0]
c000e1dc:	83 ec 0c             	sub    esp,0xc
c000e1df:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e1e6:	50                   	push   eax
c000e1e7:	e8 e0 ee 00 00       	call   c001d0cc <LinkedList<Device>::isEmpty()>
c000e1ec:	83 c4 10             	add    esp,0x10
c000e1ef:	83 f0 01             	xor    eax,0x1
c000e1f2:	84 c0                	test   al,al
c000e1f4:	0f 84 46 01 00 00    	je     c000e340 <ACPI::open(int, int, void*)+0x2c8>
c000e1fa:	83 ec 0c             	sub    esp,0xc
c000e1fd:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e204:	50                   	push   eax
c000e205:	e8 de ee 00 00       	call   c001d0e8 <LinkedList<Device>::getFirstElement()>
c000e20a:	83 c4 10             	add    esp,0x10
c000e20d:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000e214:	83 ec 0c             	sub    esp,0xc
c000e217:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e21e:	50                   	push   eax
c000e21f:	e8 cc ee 00 00       	call   c001d0f0 <LinkedList<Device>::removeFirst()>
c000e224:	83 c4 10             	add    esp,0x10
c000e227:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000e22e:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000e235:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000e23c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e240:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000e246:	ba 09 00 00 00       	mov    edx,0x9
c000e24b:	fc                   	cld    
c000e24c:	89 c7                	mov    edi,eax
c000e24e:	89 de                	mov    esi,ebx
c000e250:	89 d1                	mov    ecx,edx
c000e252:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e254:	83 ec 08             	sub    esp,0x8
c000e257:	8d 44 24 38          	lea    eax,[esp+0x38]
c000e25b:	50                   	push   eax
c000e25c:	83 ec 24             	sub    esp,0x24
c000e25f:	89 e0                	mov    eax,esp
c000e261:	89 c3                	mov    ebx,eax
c000e263:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000e267:	ba 09 00 00 00       	mov    edx,0x9
c000e26c:	89 df                	mov    edi,ebx
c000e26e:	89 c6                	mov    esi,eax
c000e270:	89 d1                	mov    ecx,edx
c000e272:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e274:	e8 b3 ae 00 00       	call   c001912c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000e279:	83 c4 30             	add    esp,0x30
c000e27c:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000e283:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000e28b:	0f 84 4b ff ff ff    	je     c000e1dc <ACPI::open(int, int, void*)+0x164>
c000e291:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e2a6:	e8 d2 8a ff ff       	call   c0006d7d <malloc>
c000e2ab:	83 c4 10             	add    esp,0x10
c000e2ae:	89 c3                	mov    ebx,eax
c000e2b0:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c000e2b5:	83 ec 04             	sub    esp,0x4
c000e2b8:	50                   	push   eax
c000e2b9:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000e2c0:	53                   	push   ebx
c000e2c1:	e8 ac bd ff ff       	call   c000a072 <File::File(char const*, Process*)>
c000e2c6:	83 c4 10             	add    esp,0x10
c000e2c9:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000e2d0:	83 ec 0c             	sub    esp,0xc
c000e2d3:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000e2da:	e8 bb c0 ff ff       	call   c000a39a <File::exists()>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	84 c0                	test   al,al
c000e2e4:	74 2a                	je     c000e310 <ACPI::open(int, int, void*)+0x298>
c000e2e6:	83 ec 08             	sub    esp,0x8
c000e2e9:	6a 01                	push   0x1
c000e2eb:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000e2f2:	e8 8b 3f 00 00       	call   c0012282 <Thr::loadDLL(char const*, bool)>
c000e2f7:	83 c4 10             	add    esp,0x10
c000e2fa:	83 ec 08             	sub    esp,0x8
c000e2fd:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000e304:	50                   	push   eax
c000e305:	e8 a9 41 00 00       	call   c00124b3 <Thr::executeDLL(unsigned long, void*)>
c000e30a:	83 c4 10             	add    esp,0x10
c000e30d:	8d 76 00             	lea    esi,[esi+0x0]
c000e310:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000e318:	0f 84 be fe ff ff    	je     c000e1dc <ACPI::open(int, int, void*)+0x164>
c000e31e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000e325:	8b 00                	mov    eax,DWORD PTR [eax]
c000e327:	83 c0 08             	add    eax,0x8
c000e32a:	8b 00                	mov    eax,DWORD PTR [eax]
c000e32c:	83 ec 0c             	sub    esp,0xc
c000e32f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000e336:	ff d0                	call   eax
c000e338:	83 c4 10             	add    esp,0x10
c000e33b:	e9 9c fe ff ff       	jmp    c000e1dc <ACPI::open(int, int, void*)+0x164>
c000e340:	83 ec 0c             	sub    esp,0xc
c000e343:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e34a:	50                   	push   eax
c000e34b:	e8 78 ed 00 00       	call   c001d0c8 <LinkedList<Device>::~LinkedList()>
c000e350:	83 c4 10             	add    esp,0x10
c000e353:	8b 1d a8 07 02 c0    	mov    ebx,DWORD PTR ds:0xc00207a8
c000e359:	83 ec 08             	sub    esp,0x8
c000e35c:	6a 01                	push   0x1
c000e35e:	68 5f ec 01 c0       	push   0xc001ec5f
c000e363:	e8 1a 3f 00 00       	call   c0012282 <Thr::loadDLL(char const*, bool)>
c000e368:	83 c4 10             	add    esp,0x10
c000e36b:	83 ec 08             	sub    esp,0x8
c000e36e:	53                   	push   ebx
c000e36f:	50                   	push   eax
c000e370:	e8 3e 41 00 00       	call   c00124b3 <Thr::executeDLL(unsigned long, void*)>
c000e375:	83 c4 10             	add    esp,0x10
c000e378:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c000e37d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000e383:	83 e0 04             	and    eax,0x4
c000e386:	84 c0                	test   al,al
c000e388:	0f 84 16 01 00 00    	je     c000e4a4 <ACPI::open(int, int, void*)+0x42c>
c000e38e:	83 ec 0c             	sub    esp,0xc
c000e391:	68 7c ec 01 c0       	push   0xc001ec7c
c000e396:	e8 3c 8a ff ff       	call   c0006dd7 <Krnl::setBootMessage(char const*)>
c000e39b:	83 c4 10             	add    esp,0x10
c000e39e:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000e3a9:	83 ec 0c             	sub    esp,0xc
c000e3ac:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000e3b3:	e8 c5 89 ff ff       	call   c0006d7d <malloc>
c000e3b8:	83 c4 10             	add    esp,0x10
c000e3bb:	89 c3                	mov    ebx,eax
c000e3bd:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c000e3c2:	83 ec 04             	sub    esp,0x4
c000e3c5:	50                   	push   eax
c000e3c6:	68 99 ec 01 c0       	push   0xc001ec99
c000e3cb:	53                   	push   ebx
c000e3cc:	e8 a1 bc ff ff       	call   c000a072 <File::File(char const*, Process*)>
c000e3d1:	83 c4 10             	add    esp,0x10
c000e3d4:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000e3db:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e3e3:	74 1b                	je     c000e400 <ACPI::open(int, int, void*)+0x388>
c000e3e5:	83 ec 0c             	sub    esp,0xc
c000e3e8:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000e3ef:	e8 a6 bf ff ff       	call   c000a39a <File::exists()>
c000e3f4:	83 c4 10             	add    esp,0x10
c000e3f7:	84 c0                	test   al,al
c000e3f9:	74 05                	je     c000e400 <ACPI::open(int, int, void*)+0x388>
c000e3fb:	b0 01                	mov    al,0x1
c000e3fd:	eb 05                	jmp    c000e404 <ACPI::open(int, int, void*)+0x38c>
c000e3ff:	90                   	nop
c000e400:	b0 00                	mov    al,0x0
c000e402:	66 90                	xchg   ax,ax
c000e404:	84 c0                	test   al,al
c000e406:	74 28                	je     c000e430 <ACPI::open(int, int, void*)+0x3b8>
c000e408:	83 ec 08             	sub    esp,0x8
c000e40b:	6a 01                	push   0x1
c000e40d:	68 99 ec 01 c0       	push   0xc001ec99
c000e412:	e8 6b 3e 00 00       	call   c0012282 <Thr::loadDLL(char const*, bool)>
c000e417:	83 c4 10             	add    esp,0x10
c000e41a:	83 ec 08             	sub    esp,0x8
c000e41d:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000e424:	50                   	push   eax
c000e425:	e8 89 40 00 00       	call   c00124b3 <Thr::executeDLL(unsigned long, void*)>
c000e42a:	83 c4 10             	add    esp,0x10
c000e42d:	8d 76 00             	lea    esi,[esi+0x0]
c000e430:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e438:	74 2a                	je     c000e464 <ACPI::open(int, int, void*)+0x3ec>
c000e43a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e442:	74 20                	je     c000e464 <ACPI::open(int, int, void*)+0x3ec>
c000e444:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000e44b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e44d:	83 c0 08             	add    eax,0x8
c000e450:	8b 00                	mov    eax,DWORD PTR [eax]
c000e452:	83 ec 0c             	sub    esp,0xc
c000e455:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000e45c:	ff d0                	call   eax
c000e45e:	83 c4 10             	add    esp,0x10
c000e461:	8d 76 00             	lea    esi,[esi+0x0]
c000e464:	a1 c8 2f 02 c0       	mov    eax,ds:0xc0022fc8
c000e469:	83 ec 08             	sub    esp,0x8
c000e46c:	68 b6 ec 01 c0       	push   0xc001ecb6
c000e471:	50                   	push   eax
c000e472:	e8 75 f2 ff ff       	call   c000d6ec <findDataTable(unsigned char*, char*)>
c000e477:	83 c4 10             	add    esp,0x10
c000e47a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000e481:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000e489:	74 19                	je     c000e4a4 <ACPI::open(int, int, void*)+0x42c>
c000e48b:	83 ec 08             	sub    esp,0x8
c000e48e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000e495:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000e49c:	e8 73 fb ff ff       	call   c000e014 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000e4a1:	83 c4 10             	add    esp,0x10
c000e4a4:	b8 00 00 00 00       	mov    eax,0x0
c000e4a9:	81 c4 70 01 00 00    	add    esp,0x170
c000e4af:	5b                   	pop    ebx
c000e4b0:	5e                   	pop    esi
c000e4b1:	5f                   	pop    edi
c000e4b2:	c3                   	ret    
c000e4b3:	90                   	nop

c000e4b4 <CPU::close(int, int, void*)>:
c000e4b4:	31 c0                	xor    eax,eax
c000e4b6:	c3                   	ret    
c000e4b7:	90                   	nop

c000e4b8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000e4b8:	60                   	pusha  
c000e4b9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e4bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e4c1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e4c5:	9c                   	pushf  
c000e4c6:	fa                   	cli    
c000e4c7:	0f 09                	wbinvd 
c000e4c9:	0f 30                	wrmsr  
c000e4cb:	9d                   	popf   
c000e4cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e4d0:	89 02                	mov    DWORD PTR [edx],eax
c000e4d2:	61                   	popa   
c000e4d3:	c3                   	ret    

c000e4d4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000e4d4:	60                   	pusha  
c000e4d5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e4d9:	9c                   	pushf  
c000e4da:	fa                   	cli    
c000e4db:	0f 09                	wbinvd 
c000e4dd:	31 c0                	xor    eax,eax
c000e4df:	31 d2                	xor    edx,edx
c000e4e1:	0f 32                	rdmsr  
c000e4e3:	9d                   	popf   
c000e4e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e4e8:	89 02                	mov    DWORD PTR [edx],eax
c000e4ea:	61                   	popa   
c000e4eb:	c3                   	ret    

c000e4ec <CPU::AMD_K6_writeback(int, int, int)>:
c000e4ec:	56                   	push   esi
c000e4ed:	53                   	push   ebx
c000e4ee:	83 ec 10             	sub    esp,0x10
c000e4f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4f5:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000e4fa:	75 5d                	jne    c000e559 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e4fc:	83 f8 08             	cmp    eax,0x8
c000e4ff:	75 09                	jne    c000e50a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000e501:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000e506:	7e 13                	jle    c000e51b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000e508:	eb 30                	jmp    c000e53a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000e50a:	83 f8 06             	cmp    eax,0x6
c000e50d:	7c 4a                	jl     c000e559 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e50f:	83 f8 07             	cmp    eax,0x7
c000e512:	7e 07                	jle    c000e51b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000e514:	83 f8 09             	cmp    eax,0x9
c000e517:	74 21                	je     c000e53a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000e519:	eb 3e                	jmp    c000e559 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e51b:	89 e6                	mov    esi,esp
c000e51d:	8b 1d cc 07 02 c0    	mov    ebx,DWORD PTR ds:0xc00207cc
c000e523:	56                   	push   esi
c000e524:	c1 eb 15             	shr    ebx,0x15
c000e527:	68 82 00 00 c0       	push   0xc0000082
c000e52c:	83 e3 7e             	and    ebx,0x7e
c000e52f:	e8 a0 ff ff ff       	call   c000e4d4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000e534:	56                   	push   esi
c000e535:	6a 00                	push   0x0
c000e537:	53                   	push   ebx
c000e538:	eb 12                	jmp    c000e54c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000e53a:	89 e3                	mov    ebx,esp
c000e53c:	53                   	push   ebx
c000e53d:	68 82 00 00 c0       	push   0xc0000082
c000e542:	e8 8d ff ff ff       	call   c000e4d4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000e547:	53                   	push   ebx
c000e548:	6a 00                	push   0x0
c000e54a:	6a 00                	push   0x0
c000e54c:	68 82 00 00 c0       	push   0xc0000082
c000e551:	e8 62 ff ff ff       	call   c000e4b8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000e556:	83 c4 18             	add    esp,0x18
c000e559:	83 c4 10             	add    esp,0x10
c000e55c:	5b                   	pop    ebx
c000e55d:	5e                   	pop    esi
c000e55e:	c3                   	ret    
c000e55f:	90                   	nop

c000e560 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000e560:	55                   	push   ebp
c000e561:	57                   	push   edi
c000e562:	56                   	push   esi
c000e563:	53                   	push   ebx
c000e564:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e568:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e56c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e570:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000e574:	39 05 70 01 02 c0    	cmp    DWORD PTR ds:0xc0020170,eax
c000e57a:	75 23                	jne    c000e59f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000e57c:	a1 2c 32 02 c0       	mov    eax,ds:0xc002322c
c000e581:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e585:	89 06                	mov    DWORD PTR [esi],eax
c000e587:	a1 28 32 02 c0       	mov    eax,ds:0xc0023228
c000e58c:	89 07                	mov    DWORD PTR [edi],eax
c000e58e:	a1 24 32 02 c0       	mov    eax,ds:0xc0023224
c000e593:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e596:	a1 20 32 02 c0       	mov    eax,ds:0xc0023220
c000e59b:	89 02                	mov    DWORD PTR [edx],eax
c000e59d:	eb 3f                	jmp    c000e5de <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000e59f:	31 c9                	xor    ecx,ecx
c000e5a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e5a5:	0f a2                	cpuid  
c000e5a7:	89 06                	mov    DWORD PTR [esi],eax
c000e5a9:	89 1f                	mov    DWORD PTR [edi],ebx
c000e5ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e5af:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000e5b2:	89 10                	mov    DWORD PTR [eax],edx
c000e5b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e5b8:	a3 70 01 02 c0       	mov    ds:0xc0020170,eax
c000e5bd:	8b 06                	mov    eax,DWORD PTR [esi]
c000e5bf:	a3 2c 32 02 c0       	mov    ds:0xc002322c,eax
c000e5c4:	8b 07                	mov    eax,DWORD PTR [edi]
c000e5c6:	a3 28 32 02 c0       	mov    ds:0xc0023228,eax
c000e5cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e5ce:	a3 24 32 02 c0       	mov    ds:0xc0023224,eax
c000e5d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e5d7:	8b 00                	mov    eax,DWORD PTR [eax]
c000e5d9:	a3 20 32 02 c0       	mov    ds:0xc0023220,eax
c000e5de:	5b                   	pop    ebx
c000e5df:	5e                   	pop    esi
c000e5e0:	5f                   	pop    edi
c000e5e1:	5d                   	pop    ebp
c000e5e2:	c3                   	ret    
c000e5e3:	90                   	nop

c000e5e4 <CPU::cpuidCheckEDX(unsigned int)>:
c000e5e4:	83 ec 10             	sub    esp,0x10
c000e5e7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5eb:	50                   	push   eax
c000e5ec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5f0:	50                   	push   eax
c000e5f1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5f5:	50                   	push   eax
c000e5f6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5fa:	50                   	push   eax
c000e5fb:	6a 01                	push   0x1
c000e5fd:	e8 5e ff ff ff       	call   c000e560 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e602:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e606:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000e60a:	0f 95 c0             	setne  al
c000e60d:	83 c4 24             	add    esp,0x24
c000e610:	c3                   	ret    
c000e611:	90                   	nop

c000e612 <CPU::cpuidCheckECX(unsigned int)>:
c000e612:	83 ec 10             	sub    esp,0x10
c000e615:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e619:	50                   	push   eax
c000e61a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e61e:	50                   	push   eax
c000e61f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e623:	50                   	push   eax
c000e624:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e628:	50                   	push   eax
c000e629:	6a 01                	push   0x1
c000e62b:	e8 30 ff ff ff       	call   c000e560 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e630:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e634:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000e638:	0f 95 c0             	setne  al
c000e63b:	83 c4 24             	add    esp,0x24
c000e63e:	c3                   	ret    
c000e63f:	90                   	nop

c000e640 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000e640:	83 ec 10             	sub    esp,0x10
c000e643:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e647:	50                   	push   eax
c000e648:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e64c:	50                   	push   eax
c000e64d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e651:	50                   	push   eax
c000e652:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e656:	50                   	push   eax
c000e657:	6a 07                	push   0x7
c000e659:	e8 02 ff ff ff       	call   c000e560 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e65e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e662:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000e666:	0f 95 c0             	setne  al
c000e669:	83 c4 24             	add    esp,0x24
c000e66c:	c3                   	ret    
c000e66d:	90                   	nop

c000e66e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000e66e:	83 ec 10             	sub    esp,0x10
c000e671:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e675:	50                   	push   eax
c000e676:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e67a:	50                   	push   eax
c000e67b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e67f:	50                   	push   eax
c000e680:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e684:	50                   	push   eax
c000e685:	6a 07                	push   0x7
c000e687:	e8 d4 fe ff ff       	call   c000e560 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e68c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e690:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000e694:	0f 95 c0             	setne  al
c000e697:	83 c4 24             	add    esp,0x24
c000e69a:	c3                   	ret    
c000e69b:	90                   	nop

c000e69c <CPU::CPU()>:
c000e69c:	83 ec 0c             	sub    esp,0xc
c000e69f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6a3:	83 ec 08             	sub    esp,0x8
c000e6a6:	68 d9 ed 01 c0       	push   0xc001edd9
c000e6ab:	50                   	push   eax
c000e6ac:	e8 11 ca ff ff       	call   c000b0c2 <Device::Device(char const*)>
c000e6b1:	83 c4 10             	add    esp,0x10
c000e6b4:	ba 60 ee 01 c0       	mov    edx,0xc001ee60
c000e6b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6bd:	89 10                	mov    DWORD PTR [eax],edx
c000e6bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6c3:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000e6cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6d1:	05 78 01 00 00       	add    eax,0x178
c000e6d6:	83 ec 0c             	sub    esp,0xc
c000e6d9:	50                   	push   eax
c000e6da:	e8 1f 7f ff ff       	call   c00065fe <GDT::GDT()>
c000e6df:	83 c4 10             	add    esp,0x10
c000e6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6e6:	05 7c 09 00 00       	add    eax,0x97c
c000e6eb:	83 ec 0c             	sub    esp,0xc
c000e6ee:	50                   	push   eax
c000e6ef:	e8 84 81 ff ff       	call   c0006878 <IDT::IDT()>
c000e6f4:	83 c4 10             	add    esp,0x10
c000e6f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6fb:	05 7c 11 00 00       	add    eax,0x117c
c000e700:	83 ec 0c             	sub    esp,0xc
c000e703:	50                   	push   eax
c000e704:	e8 df 9a ff ff       	call   c00081e8 <TSS::TSS()>
c000e709:	83 c4 10             	add    esp,0x10
c000e70c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e710:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000e717:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e71b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000e725:	90                   	nop
c000e726:	83 c4 0c             	add    esp,0xc
c000e729:	c3                   	ret    

c000e72a <CPU::displayFeatures()>:
c000e72a:	c3                   	ret    
c000e72b:	90                   	nop

c000e72c <CPU::detectFeatures()>:
c000e72c:	55                   	push   ebp
c000e72d:	57                   	push   edi
c000e72e:	56                   	push   esi
c000e72f:	53                   	push   ebx
c000e730:	83 ec 30             	sub    esp,0x30
c000e733:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e737:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000e741:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000e748:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000e74e:	6a 0d                	push   0xd
c000e750:	6a 00                	push   0x0
c000e752:	55                   	push   ebp
c000e753:	e8 50 1d ff ff       	call   c00004a8 <memset>
c000e758:	83 c4 10             	add    esp,0x10
c000e75b:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c000e760:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c000e767:	0f 84 e8 05 00 00    	je     c000ed55 <CPU::detectFeatures()+0x629>
c000e76d:	83 ec 0c             	sub    esp,0xc
c000e770:	89 ef                	mov    edi,ebp
c000e772:	6a 10                	push   0x10
c000e774:	e8 6b fe ff ff       	call   c000e5e4 <CPU::cpuidCheckEDX(unsigned int)>
c000e779:	83 e0 01             	and    eax,0x1
c000e77c:	8d 14 00             	lea    edx,[eax+eax*1]
c000e77f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e785:	83 e0 fd             	and    eax,0xfffffffd
c000e788:	09 d0                	or     eax,edx
c000e78a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e790:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000e797:	e8 48 fe ff ff       	call   c000e5e4 <CPU::cpuidCheckEDX(unsigned int)>
c000e79c:	83 e0 01             	and    eax,0x1
c000e79f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e7a6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e7ac:	83 e0 fb             	and    eax,0xfffffffb
c000e7af:	09 d0                	or     eax,edx
c000e7b1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e7b7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000e7be:	e8 21 fe ff ff       	call   c000e5e4 <CPU::cpuidCheckEDX(unsigned int)>
c000e7c3:	83 e0 01             	and    eax,0x1
c000e7c6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e7cd:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e7d3:	83 e0 f7             	and    eax,0xfffffff7
c000e7d6:	09 d0                	or     eax,edx
c000e7d8:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e7de:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000e7e5:	e8 fa fd ff ff       	call   c000e5e4 <CPU::cpuidCheckEDX(unsigned int)>
c000e7ea:	83 e0 01             	and    eax,0x1
c000e7ed:	c1 e0 04             	shl    eax,0x4
c000e7f0:	88 c2                	mov    dl,al
c000e7f2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e7f8:	83 e0 ef             	and    eax,0xffffffef
c000e7fb:	09 d0                	or     eax,edx
c000e7fd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e803:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000e80a:	e8 d5 fd ff ff       	call   c000e5e4 <CPU::cpuidCheckEDX(unsigned int)>
c000e80f:	83 e0 01             	and    eax,0x1
c000e812:	c1 e0 05             	shl    eax,0x5
c000e815:	88 c2                	mov    dl,al
c000e817:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e81d:	83 e0 df             	and    eax,0xffffffdf
c000e820:	09 d0                	or     eax,edx
c000e822:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e828:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000e82f:	e8 b0 fd ff ff       	call   c000e5e4 <CPU::cpuidCheckEDX(unsigned int)>
c000e834:	83 e0 01             	and    eax,0x1
c000e837:	8d 14 00             	lea    edx,[eax+eax*1]
c000e83a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000e840:	83 e0 fd             	and    eax,0xfffffffd
c000e843:	09 d0                	or     eax,edx
c000e845:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000e84b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000e852:	e8 8d fd ff ff       	call   c000e5e4 <CPU::cpuidCheckEDX(unsigned int)>
c000e857:	83 e0 01             	and    eax,0x1
c000e85a:	c1 e0 06             	shl    eax,0x6
c000e85d:	88 c2                	mov    dl,al
c000e85f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000e865:	83 e0 bf             	and    eax,0xffffffbf
c000e868:	09 d0                	or     eax,edx
c000e86a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000e870:	58                   	pop    eax
c000e871:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e875:	50                   	push   eax
c000e876:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e87a:	50                   	push   eax
c000e87b:	8d 74 24 28          	lea    esi,[esp+0x28]
c000e87f:	56                   	push   esi
c000e880:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e884:	50                   	push   eax
c000e885:	6a 00                	push   0x0
c000e887:	e8 d4 fc ff ff       	call   c000e560 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e88c:	b8 04 00 00 00       	mov    eax,0x4
c000e891:	89 c1                	mov    ecx,eax
c000e893:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e895:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000e89b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000e89f:	89 c1                	mov    ecx,eax
c000e8a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8a3:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000e8a9:	8d 74 24 38          	lea    esi,[esp+0x38]
c000e8ad:	89 c1                	mov    ecx,eax
c000e8af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8b1:	83 c4 18             	add    esp,0x18
c000e8b4:	68 e8 ec 01 c0       	push   0xc001ece8
c000e8b9:	55                   	push   ebp
c000e8ba:	e8 31 1d ff ff       	call   c00005f0 <strcmp>
c000e8bf:	83 c4 10             	add    esp,0x10
c000e8c2:	85 c0                	test   eax,eax
c000e8c4:	75 0f                	jne    c000e8d5 <CPU::detectFeatures()+0x1a9>
c000e8c6:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000e8d0:	e9 22 02 00 00       	jmp    c000eaf7 <CPU::detectFeatures()+0x3cb>
c000e8d5:	50                   	push   eax
c000e8d6:	50                   	push   eax
c000e8d7:	68 f5 ec 01 c0       	push   0xc001ecf5
c000e8dc:	55                   	push   ebp
c000e8dd:	e8 0e 1d ff ff       	call   c00005f0 <strcmp>
c000e8e2:	83 c4 10             	add    esp,0x10
c000e8e5:	85 c0                	test   eax,eax
c000e8e7:	74 dd                	je     c000e8c6 <CPU::detectFeatures()+0x19a>
c000e8e9:	50                   	push   eax
c000e8ea:	50                   	push   eax
c000e8eb:	68 02 ed 01 c0       	push   0xc001ed02
c000e8f0:	55                   	push   ebp
c000e8f1:	e8 fa 1c ff ff       	call   c00005f0 <strcmp>
c000e8f6:	83 c4 10             	add    esp,0x10
c000e8f9:	85 c0                	test   eax,eax
c000e8fb:	74 2a                	je     c000e927 <CPU::detectFeatures()+0x1fb>
c000e8fd:	50                   	push   eax
c000e8fe:	50                   	push   eax
c000e8ff:	68 0f ed 01 c0       	push   0xc001ed0f
c000e904:	55                   	push   ebp
c000e905:	e8 e6 1c ff ff       	call   c00005f0 <strcmp>
c000e90a:	83 c4 10             	add    esp,0x10
c000e90d:	85 c0                	test   eax,eax
c000e90f:	74 16                	je     c000e927 <CPU::detectFeatures()+0x1fb>
c000e911:	50                   	push   eax
c000e912:	50                   	push   eax
c000e913:	68 1c ed 01 c0       	push   0xc001ed1c
c000e918:	55                   	push   ebp
c000e919:	e8 d2 1c ff ff       	call   c00005f0 <strcmp>
c000e91e:	83 c4 10             	add    esp,0x10
c000e921:	85 c0                	test   eax,eax
c000e923:	74 48                	je     c000e96d <CPU::detectFeatures()+0x241>
c000e925:	eb 0f                	jmp    c000e936 <CPU::detectFeatures()+0x20a>
c000e927:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000e931:	e9 c1 01 00 00       	jmp    c000eaf7 <CPU::detectFeatures()+0x3cb>
c000e936:	50                   	push   eax
c000e937:	50                   	push   eax
c000e938:	68 29 ed 01 c0       	push   0xc001ed29
c000e93d:	55                   	push   ebp
c000e93e:	e8 ad 1c ff ff       	call   c00005f0 <strcmp>
c000e943:	83 c4 10             	add    esp,0x10
c000e946:	85 c0                	test   eax,eax
c000e948:	74 23                	je     c000e96d <CPU::detectFeatures()+0x241>
c000e94a:	57                   	push   edi
c000e94b:	57                   	push   edi
c000e94c:	68 36 ed 01 c0       	push   0xc001ed36
c000e951:	55                   	push   ebp
c000e952:	e8 99 1c ff ff       	call   c00005f0 <strcmp>
c000e957:	83 c4 10             	add    esp,0x10
c000e95a:	85 c0                	test   eax,eax
c000e95c:	75 1e                	jne    c000e97c <CPU::detectFeatures()+0x250>
c000e95e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000e968:	e9 8a 01 00 00       	jmp    c000eaf7 <CPU::detectFeatures()+0x3cb>
c000e96d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000e977:	e9 7b 01 00 00       	jmp    c000eaf7 <CPU::detectFeatures()+0x3cb>
c000e97c:	56                   	push   esi
c000e97d:	56                   	push   esi
c000e97e:	68 43 ed 01 c0       	push   0xc001ed43
c000e983:	55                   	push   ebp
c000e984:	e8 67 1c ff ff       	call   c00005f0 <strcmp>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	85 c0                	test   eax,eax
c000e98e:	75 0f                	jne    c000e99f <CPU::detectFeatures()+0x273>
c000e990:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000e99a:	e9 58 01 00 00       	jmp    c000eaf7 <CPU::detectFeatures()+0x3cb>
c000e99f:	51                   	push   ecx
c000e9a0:	51                   	push   ecx
c000e9a1:	68 02 ed 01 c0       	push   0xc001ed02
c000e9a6:	55                   	push   ebp
c000e9a7:	e8 44 1c ff ff       	call   c00005f0 <strcmp>
c000e9ac:	83 c4 10             	add    esp,0x10
c000e9af:	85 c0                	test   eax,eax
c000e9b1:	75 0f                	jne    c000e9c2 <CPU::detectFeatures()+0x296>
c000e9b3:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000e9bd:	e9 35 01 00 00       	jmp    c000eaf7 <CPU::detectFeatures()+0x3cb>
c000e9c2:	52                   	push   edx
c000e9c3:	52                   	push   edx
c000e9c4:	68 50 ed 01 c0       	push   0xc001ed50
c000e9c9:	55                   	push   ebp
c000e9ca:	e8 21 1c ff ff       	call   c00005f0 <strcmp>
c000e9cf:	83 c4 10             	add    esp,0x10
c000e9d2:	85 c0                	test   eax,eax
c000e9d4:	75 0f                	jne    c000e9e5 <CPU::detectFeatures()+0x2b9>
c000e9d6:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000e9e0:	e9 12 01 00 00       	jmp    c000eaf7 <CPU::detectFeatures()+0x3cb>
c000e9e5:	50                   	push   eax
c000e9e6:	50                   	push   eax
c000e9e7:	68 5d ed 01 c0       	push   0xc001ed5d
c000e9ec:	55                   	push   ebp
c000e9ed:	e8 fe 1b ff ff       	call   c00005f0 <strcmp>
c000e9f2:	83 c4 10             	add    esp,0x10
c000e9f5:	85 c0                	test   eax,eax
c000e9f7:	75 0f                	jne    c000ea08 <CPU::detectFeatures()+0x2dc>
c000e9f9:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000ea03:	e9 ef 00 00 00       	jmp    c000eaf7 <CPU::detectFeatures()+0x3cb>
c000ea08:	50                   	push   eax
c000ea09:	50                   	push   eax
c000ea0a:	68 6a ed 01 c0       	push   0xc001ed6a
c000ea0f:	55                   	push   ebp
c000ea10:	e8 db 1b ff ff       	call   c00005f0 <strcmp>
c000ea15:	83 c4 10             	add    esp,0x10
c000ea18:	85 c0                	test   eax,eax
c000ea1a:	75 0f                	jne    c000ea2b <CPU::detectFeatures()+0x2ff>
c000ea1c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000ea26:	e9 cc 00 00 00       	jmp    c000eaf7 <CPU::detectFeatures()+0x3cb>
c000ea2b:	50                   	push   eax
c000ea2c:	50                   	push   eax
c000ea2d:	68 77 ed 01 c0       	push   0xc001ed77
c000ea32:	55                   	push   ebp
c000ea33:	e8 b8 1b ff ff       	call   c00005f0 <strcmp>
c000ea38:	83 c4 10             	add    esp,0x10
c000ea3b:	85 c0                	test   eax,eax
c000ea3d:	75 0f                	jne    c000ea4e <CPU::detectFeatures()+0x322>
c000ea3f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000ea49:	e9 a9 00 00 00       	jmp    c000eaf7 <CPU::detectFeatures()+0x3cb>
c000ea4e:	50                   	push   eax
c000ea4f:	50                   	push   eax
c000ea50:	68 84 ed 01 c0       	push   0xc001ed84
c000ea55:	55                   	push   ebp
c000ea56:	e8 95 1b ff ff       	call   c00005f0 <strcmp>
c000ea5b:	83 c4 10             	add    esp,0x10
c000ea5e:	85 c0                	test   eax,eax
c000ea60:	75 0f                	jne    c000ea71 <CPU::detectFeatures()+0x345>
c000ea62:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000ea6c:	e9 86 00 00 00       	jmp    c000eaf7 <CPU::detectFeatures()+0x3cb>
c000ea71:	50                   	push   eax
c000ea72:	50                   	push   eax
c000ea73:	68 91 ed 01 c0       	push   0xc001ed91
c000ea78:	55                   	push   ebp
c000ea79:	e8 72 1b ff ff       	call   c00005f0 <strcmp>
c000ea7e:	83 c4 10             	add    esp,0x10
c000ea81:	85 c0                	test   eax,eax
c000ea83:	75 0c                	jne    c000ea91 <CPU::detectFeatures()+0x365>
c000ea85:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000ea8f:	eb 66                	jmp    c000eaf7 <CPU::detectFeatures()+0x3cb>
c000ea91:	50                   	push   eax
c000ea92:	50                   	push   eax
c000ea93:	68 9e ed 01 c0       	push   0xc001ed9e
c000ea98:	55                   	push   ebp
c000ea99:	e8 52 1b ff ff       	call   c00005f0 <strcmp>
c000ea9e:	83 c4 10             	add    esp,0x10
c000eaa1:	85 c0                	test   eax,eax
c000eaa3:	75 0c                	jne    c000eab1 <CPU::detectFeatures()+0x385>
c000eaa5:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000eaaf:	eb 46                	jmp    c000eaf7 <CPU::detectFeatures()+0x3cb>
c000eab1:	57                   	push   edi
c000eab2:	57                   	push   edi
c000eab3:	68 ab ed 01 c0       	push   0xc001edab
c000eab8:	55                   	push   ebp
c000eab9:	e8 32 1b ff ff       	call   c00005f0 <strcmp>
c000eabe:	83 c4 10             	add    esp,0x10
c000eac1:	85 c0                	test   eax,eax
c000eac3:	74 e0                	je     c000eaa5 <CPU::detectFeatures()+0x379>
c000eac5:	56                   	push   esi
c000eac6:	56                   	push   esi
c000eac7:	68 b8 ed 01 c0       	push   0xc001edb8
c000eacc:	55                   	push   ebp
c000eacd:	e8 1e 1b ff ff       	call   c00005f0 <strcmp>
c000ead2:	83 c4 10             	add    esp,0x10
c000ead5:	85 c0                	test   eax,eax
c000ead7:	74 cc                	je     c000eaa5 <CPU::detectFeatures()+0x379>
c000ead9:	51                   	push   ecx
c000eada:	51                   	push   ecx
c000eadb:	68 c5 ed 01 c0       	push   0xc001edc5
c000eae0:	55                   	push   ebp
c000eae1:	e8 0a 1b ff ff       	call   c00005f0 <strcmp>
c000eae6:	83 c4 10             	add    esp,0x10
c000eae9:	85 c0                	test   eax,eax
c000eaeb:	74 b8                	je     c000eaa5 <CPU::detectFeatures()+0x379>
c000eaed:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000eaf7:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000eafc:	0f 86 be 00 00 00    	jbe    c000ebc0 <CPU::detectFeatures()+0x494>
c000eb02:	83 ec 0c             	sub    esp,0xc
c000eb05:	68 80 00 00 00       	push   0x80
c000eb0a:	e8 31 fb ff ff       	call   c000e640 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000eb0f:	83 e0 01             	and    eax,0x1
c000eb12:	c1 e0 06             	shl    eax,0x6
c000eb15:	88 c2                	mov    dl,al
c000eb17:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000eb1d:	83 e0 bf             	and    eax,0xffffffbf
c000eb20:	09 d0                	or     eax,edx
c000eb22:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000eb28:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000eb2f:	e8 0c fb ff ff       	call   c000e640 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000eb34:	83 e0 01             	and    eax,0x1
c000eb37:	c1 e0 04             	shl    eax,0x4
c000eb3a:	88 c2                	mov    dl,al
c000eb3c:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000eb42:	83 e0 ef             	and    eax,0xffffffef
c000eb45:	09 d0                	or     eax,edx
c000eb47:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000eb4d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000eb54:	e8 e7 fa ff ff       	call   c000e640 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000eb59:	c1 e0 07             	shl    eax,0x7
c000eb5c:	88 c2                	mov    dl,al
c000eb5e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000eb64:	83 e0 7f             	and    eax,0x7f
c000eb67:	09 d0                	or     eax,edx
c000eb69:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000eb6f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000eb76:	e8 f3 fa ff ff       	call   c000e66e <CPU::cpuidCheckExtendedECX(unsigned int)>
c000eb7b:	83 e0 01             	and    eax,0x1
c000eb7e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000eb85:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000eb8b:	83 e0 f7             	and    eax,0xfffffff7
c000eb8e:	09 d0                	or     eax,edx
c000eb90:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000eb96:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000eb9d:	e8 cc fa ff ff       	call   c000e66e <CPU::cpuidCheckExtendedECX(unsigned int)>
c000eba2:	83 c4 10             	add    esp,0x10
c000eba5:	83 e0 01             	and    eax,0x1
c000eba8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ebaf:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ebb5:	83 e0 fb             	and    eax,0xfffffffb
c000ebb8:	09 d0                	or     eax,edx
c000ebba:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ebc0:	83 ec 0c             	sub    esp,0xc
c000ebc3:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ebc7:	50                   	push   eax
c000ebc8:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ebcc:	50                   	push   eax
c000ebcd:	8d 74 24 28          	lea    esi,[esp+0x28]
c000ebd1:	56                   	push   esi
c000ebd2:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ebd6:	50                   	push   eax
c000ebd7:	6a 01                	push   0x1
c000ebd9:	e8 82 f9 ff ff       	call   c000e560 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ebde:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ebe2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000ebe8:	88 ca                	mov    dl,cl
c000ebea:	83 e0 f0             	and    eax,0xfffffff0
c000ebed:	83 e2 0f             	and    edx,0xf
c000ebf0:	09 d0                	or     eax,edx
c000ebf2:	88 ca                	mov    dl,cl
c000ebf4:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000ebfa:	c0 ea 04             	shr    dl,0x4
c000ebfd:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000ec01:	0f b6 c2             	movzx  eax,dl
c000ec04:	83 c4 20             	add    esp,0x20
c000ec07:	c1 e0 06             	shl    eax,0x6
c000ec0a:	89 c7                	mov    edi,eax
c000ec0c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ec12:	66 25 3f c0          	and    ax,0xc03f
c000ec16:	09 f8                	or     eax,edi
c000ec18:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000ec1f:	89 c8                	mov    eax,ecx
c000ec21:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000ec28:	c1 e8 08             	shr    eax,0x8
c000ec2b:	83 e5 3f             	and    ebp,0x3f
c000ec2e:	83 e0 0f             	and    eax,0xf
c000ec31:	89 c7                	mov    edi,eax
c000ec33:	c1 e7 06             	shl    edi,0x6
c000ec36:	09 ef                	or     edi,ebp
c000ec38:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000ec3f:	89 fa                	mov    edx,edi
c000ec41:	83 e5 c0             	and    ebp,0xffffffc0
c000ec44:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000ec4a:	88 c2                	mov    dl,al
c000ec4c:	c0 ea 02             	shr    dl,0x2
c000ec4f:	89 d7                	mov    edi,edx
c000ec51:	09 ef                	or     edi,ebp
c000ec53:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000ec59:	89 fa                	mov    edx,edi
c000ec5b:	83 e5 cf             	and    ebp,0xffffffcf
c000ec5e:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000ec64:	89 cf                	mov    edi,ecx
c000ec66:	c1 ef 0c             	shr    edi,0xc
c000ec69:	83 e7 03             	and    edi,0x3
c000ec6c:	c1 e7 04             	shl    edi,0x4
c000ec6f:	09 ef                	or     edi,ebp
c000ec71:	3c 06                	cmp    al,0x6
c000ec73:	89 fa                	mov    edx,edi
c000ec75:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000ec7b:	74 04                	je     c000ec81 <CPU::detectFeatures()+0x555>
c000ec7d:	3c 0f                	cmp    al,0xf
c000ec7f:	75 5c                	jne    c000ecdd <CPU::detectFeatures()+0x5b1>
c000ec81:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000ec85:	89 cf                	mov    edi,ecx
c000ec87:	c1 ef 10             	shr    edi,0x10
c000ec8a:	c1 e7 04             	shl    edi,0x4
c000ec8d:	09 fa                	or     edx,edi
c000ec8f:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000ec95:	0f b6 d2             	movzx  edx,dl
c000ec98:	66 81 e7 3f c0       	and    di,0xc03f
c000ec9d:	c1 e2 06             	shl    edx,0x6
c000eca0:	09 fa                	or     edx,edi
c000eca2:	3c 0f                	cmp    al,0xf
c000eca4:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000ecab:	75 30                	jne    c000ecdd <CPU::detectFeatures()+0x5b1>
c000ecad:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000ecb3:	c1 e9 14             	shr    ecx,0x14
c000ecb6:	83 e0 3f             	and    eax,0x3f
c000ecb9:	83 c1 0f             	add    ecx,0xf
c000ecbc:	88 ca                	mov    dl,cl
c000ecbe:	c0 e9 02             	shr    cl,0x2
c000ecc1:	c1 e2 06             	shl    edx,0x6
c000ecc4:	09 d0                	or     eax,edx
c000ecc6:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000eccc:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000ecd2:	83 e0 c0             	and    eax,0xffffffc0
c000ecd5:	09 c1                	or     ecx,eax
c000ecd7:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000ecdd:	83 ec 0c             	sub    esp,0xc
c000ece0:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000ece7:	8d 44 24 28          	lea    eax,[esp+0x28]
c000eceb:	50                   	push   eax
c000ecec:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000ecf0:	55                   	push   ebp
c000ecf1:	56                   	push   esi
c000ecf2:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000ecf6:	57                   	push   edi
c000ecf7:	68 00 00 00 80       	push   0x80000000
c000ecfc:	e8 5f f8 ff ff       	call   c000e560 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ed01:	83 c4 20             	add    esp,0x20
c000ed04:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000ed0c:	76 22                	jbe    c000ed30 <CPU::detectFeatures()+0x604>
c000ed0e:	83 ec 0c             	sub    esp,0xc
c000ed11:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ed15:	50                   	push   eax
c000ed16:	55                   	push   ebp
c000ed17:	56                   	push   esi
c000ed18:	57                   	push   edi
c000ed19:	68 01 00 00 80       	push   0x80000001
c000ed1e:	e8 3d f8 ff ff       	call   c000e560 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ed23:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000ed2d:	83 c4 20             	add    esp,0x20
c000ed30:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c000ed36:	8d 50 ff             	lea    edx,[eax-0x1]
c000ed39:	83 fa 03             	cmp    edx,0x3
c000ed3c:	76 7e                	jbe    c000edbc <CPU::detectFeatures()+0x690>
c000ed3e:	83 f8 06             	cmp    eax,0x6
c000ed41:	74 79                	je     c000edbc <CPU::detectFeatures()+0x690>
c000ed43:	52                   	push   edx
c000ed44:	52                   	push   edx
c000ed45:	68 d1 ed 01 c0       	push   0xc001edd1
c000ed4a:	53                   	push   ebx
c000ed4b:	e8 64 c3 ff ff       	call   c000b0b4 <Device::setName(char const*)>
c000ed50:	83 c4 10             	add    esp,0x10
c000ed53:	eb 67                	jmp    c000edbc <CPU::detectFeatures()+0x690>
c000ed55:	50                   	push   eax
c000ed56:	50                   	push   eax
c000ed57:	68 36 ed 01 c0       	push   0xc001ed36
c000ed5c:	55                   	push   ebp
c000ed5d:	e8 02 18 ff ff       	call   c0000564 <strcpy>
c000ed62:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000ed6c:	e8 72 14 ff ff       	call   c00001e3 <is486>
c000ed71:	83 c4 10             	add    esp,0x10
c000ed74:	85 c0                	test   eax,eax
c000ed76:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000ed7c:	74 1d                	je     c000ed9b <CPU::detectFeatures()+0x66f>
c000ed7e:	83 c8 07             	or     eax,0x7
c000ed81:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000ed87:	0f 20 c0             	mov    eax,cr0
c000ed8a:	83 e0 14             	and    eax,0x14
c000ed8d:	83 f8 04             	cmp    eax,0x4
c000ed90:	75 0e                	jne    c000eda0 <CPU::detectFeatures()+0x674>
c000ed92:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000ed99:	eb 21                	jmp    c000edbc <CPU::detectFeatures()+0x690>
c000ed9b:	83 e0 f8             	and    eax,0xfffffff8
c000ed9e:	eb e1                	jmp    c000ed81 <CPU::detectFeatures()+0x655>
c000eda0:	e8 19 14 ff ff       	call   c00001be <hasLegacyFPU>
c000eda5:	83 e0 01             	and    eax,0x1
c000eda8:	8d 14 00             	lea    edx,[eax+eax*1]
c000edab:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000edb1:	83 e0 fd             	and    eax,0xfffffffd
c000edb4:	09 d0                	or     eax,edx
c000edb6:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000edbc:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000edc3:	74 0e                	je     c000edd3 <CPU::detectFeatures()+0x6a7>
c000edc5:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c000edca:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c000edd1:	eb 20                	jmp    c000edf3 <CPU::detectFeatures()+0x6c7>
c000edd3:	e8 e6 13 ff ff       	call   c00001be <hasLegacyFPU>
c000edd8:	83 e0 01             	and    eax,0x1
c000eddb:	8d 14 00             	lea    edx,[eax+eax*1]
c000edde:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ede4:	83 e0 fd             	and    eax,0xfffffffd
c000ede7:	09 d0                	or     eax,edx
c000ede9:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000edef:	a8 02                	test   al,0x2
c000edf1:	75 d2                	jne    c000edc5 <CPU::detectFeatures()+0x699>
c000edf3:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000edfa:	83 c4 2c             	add    esp,0x2c
c000edfd:	5b                   	pop    ebx
c000edfe:	5e                   	pop    esi
c000edff:	5f                   	pop    edi
c000ee00:	5d                   	pop    ebp
c000ee01:	c3                   	ret    

c000ee02 <CPU::setupSMEP()>:
c000ee02:	0f 20 e0             	mov    eax,cr4
c000ee05:	0d 00 00 10 00       	or     eax,0x100000
c000ee0a:	0f 22 e0             	mov    cr4,eax
c000ee0d:	c3                   	ret    

c000ee0e <CPU::setupUMIP()>:
c000ee0e:	0f 20 e0             	mov    eax,cr4
c000ee11:	80 cc 08             	or     ah,0x8
c000ee14:	0f 22 e0             	mov    cr4,eax
c000ee17:	c3                   	ret    

c000ee18 <CPU::setupTSC()>:
c000ee18:	0f 20 e0             	mov    eax,cr4
c000ee1b:	83 c8 04             	or     eax,0x4
c000ee1e:	0f 22 e0             	mov    cr4,eax
c000ee21:	c3                   	ret    

c000ee22 <CPU::setupLargePages()>:
c000ee22:	0f 20 e0             	mov    eax,cr4
c000ee25:	83 c8 10             	or     eax,0x10
c000ee28:	0f 22 e0             	mov    cr4,eax
c000ee2b:	c3                   	ret    

c000ee2c <CPU::setupPAT()>:
c000ee2c:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c000ee31:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee38:	74 2c                	je     c000ee66 <CPU::setupPAT()+0x3a>
c000ee3a:	53                   	push   ebx
c000ee3b:	83 ec 10             	sub    esp,0x10
c000ee3e:	68 77 02 00 00       	push   0x277
c000ee43:	50                   	push   eax
c000ee44:	e8 05 75 ff ff       	call   c000634e <Computer::rdmsr(unsigned int)>
c000ee49:	83 e2 f8             	and    edx,0xfffffff8
c000ee4c:	83 ca 01             	or     edx,0x1
c000ee4f:	52                   	push   edx
c000ee50:	50                   	push   eax
c000ee51:	68 77 02 00 00       	push   0x277
c000ee56:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c000ee5c:	e8 19 75 ff ff       	call   c000637a <Computer::wrmsr(unsigned int, unsigned long long)>
c000ee61:	83 c4 28             	add    esp,0x28
c000ee64:	5b                   	pop    ebx
c000ee65:	c3                   	ret    
c000ee66:	c3                   	ret    
c000ee67:	90                   	nop

c000ee68 <CPU::setupMTRR()>:
c000ee68:	c3                   	ret    
c000ee69:	90                   	nop

c000ee6a <CPU::setupGlobalPages()>:
c000ee6a:	0f 20 e0             	mov    eax,cr4
c000ee6d:	0c 80                	or     al,0x80
c000ee6f:	0f 22 e0             	mov    cr4,eax
c000ee72:	c3                   	ret    
c000ee73:	90                   	nop

c000ee74 <CPU::allowUsermodeDataAccess()>:
c000ee74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee78:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ee7f:	74 03                	je     c000ee84 <CPU::allowUsermodeDataAccess()+0x10>
c000ee81:	0f 01 cb             	stac   
c000ee84:	c3                   	ret    
c000ee85:	90                   	nop

c000ee86 <CPU::prohibitUsermodeDataAccess()>:
c000ee86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee8a:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ee91:	74 03                	je     c000ee96 <CPU::prohibitUsermodeDataAccess()+0x10>
c000ee93:	0f 01 ca             	clac   
c000ee96:	c3                   	ret    
c000ee97:	90                   	nop

c000ee98 <CPU::setupSMAP()>:
c000ee98:	0f 20 e0             	mov    eax,cr4
c000ee9b:	0d 00 00 20 00       	or     eax,0x200000
c000eea0:	0f 22 e0             	mov    cr4,eax
c000eea3:	eb e1                	jmp    c000ee86 <CPU::prohibitUsermodeDataAccess()>
c000eea5:	90                   	nop

c000eea6 <CPU::setupFeatures()>:
c000eea6:	53                   	push   ebx
c000eea7:	83 ec 08             	sub    esp,0x8
c000eeaa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eeae:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000eeb5:	74 18                	je     c000eecf <CPU::setupFeatures()+0x29>
c000eeb7:	83 ec 0c             	sub    esp,0xc
c000eeba:	68 dd ed 01 c0       	push   0xc001eddd
c000eebf:	e8 43 ac ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 42 ff ff ff       	call   c000ee0e <CPU::setupUMIP()>
c000eecc:	83 c4 10             	add    esp,0x10
c000eecf:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000eed6:	74 18                	je     c000eef0 <CPU::setupFeatures()+0x4a>
c000eed8:	83 ec 0c             	sub    esp,0xc
c000eedb:	68 e7 ed 01 c0       	push   0xc001ede7
c000eee0:	e8 22 ac ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c000eee5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eee8:	e8 2b ff ff ff       	call   c000ee18 <CPU::setupTSC()>
c000eeed:	83 c4 10             	add    esp,0x10
c000eef0:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000eef7:	74 18                	je     c000ef11 <CPU::setupFeatures()+0x6b>
c000eef9:	83 ec 0c             	sub    esp,0xc
c000eefc:	68 f0 ed 01 c0       	push   0xc001edf0
c000ef01:	e8 01 ac ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c000ef06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef09:	e8 14 ff ff ff       	call   c000ee22 <CPU::setupLargePages()>
c000ef0e:	83 c4 10             	add    esp,0x10
c000ef11:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000ef18:	74 18                	je     c000ef32 <CPU::setupFeatures()+0x8c>
c000ef1a:	83 ec 0c             	sub    esp,0xc
c000ef1d:	68 f9 ed 01 c0       	push   0xc001edf9
c000ef22:	e8 e0 ab ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c000ef27:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef2a:	e8 3b ff ff ff       	call   c000ee6a <CPU::setupGlobalPages()>
c000ef2f:	83 c4 10             	add    esp,0x10
c000ef32:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000ef39:	74 18                	je     c000ef53 <CPU::setupFeatures()+0xad>
c000ef3b:	83 ec 0c             	sub    esp,0xc
c000ef3e:	68 0b ee 01 c0       	push   0xc001ee0b
c000ef43:	e8 bf ab ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c000ef48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef4b:	e8 dc fe ff ff       	call   c000ee2c <CPU::setupPAT()>
c000ef50:	83 c4 10             	add    esp,0x10
c000ef53:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000ef5a:	74 11                	je     c000ef6d <CPU::setupFeatures()+0xc7>
c000ef5c:	c7 44 24 10 14 ee 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ee14
c000ef64:	83 c4 08             	add    esp,0x8
c000ef67:	5b                   	pop    ebx
c000ef68:	e9 9a ab ff ff       	jmp    c0009b07 <Dbg::kprintf(char const*, ...)>
c000ef6d:	83 c4 08             	add    esp,0x8
c000ef70:	5b                   	pop    ebx
c000ef71:	c3                   	ret    

c000ef72 <CPU::open(int, int, void*)>:
c000ef72:	57                   	push   edi
c000ef73:	56                   	push   esi
c000ef74:	53                   	push   ebx
c000ef75:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef79:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ef7d:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000ef83:	83 ec 0c             	sub    esp,0xc
c000ef86:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000ef8c:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000ef92:	50                   	push   eax
c000ef93:	e8 c8 76 ff ff       	call   c0006660 <GDT::setup()>
c000ef98:	83 c4 0c             	add    esp,0xc
c000ef9b:	6a 00                	push   0x0
c000ef9d:	68 ef be ad de       	push   0xdeadbeef
c000efa2:	57                   	push   edi
c000efa3:	e8 84 92 ff ff       	call   c000822c <TSS::setup(unsigned long, unsigned long)>
c000efa8:	89 3c 24             	mov    DWORD PTR [esp],edi
c000efab:	e8 5c 92 ff ff       	call   c000820c <TSS::flush()>
c000efb0:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000efb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000efb9:	e8 30 79 ff ff       	call   c00068ee <IDT::setup()>
c000efbe:	b8 00 04 00 00       	mov    eax,0x400
c000efc3:	0f 23 f8             	mov    db7,eax
c000efc6:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000efd0:	e8 6f 81 ff ff       	call   c0007144 <Phys::allocatePage()>
c000efd5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000efdb:	89 30                	mov    DWORD PTR [eax],esi
c000efdd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000efe3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000efe6:	58                   	pop    eax
c000efe7:	5a                   	pop    edx
c000efe8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000efee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eff2:	e8 dd a1 ff ff       	call   c00091d4 <VAS::setCPUSpecific(unsigned long)>
c000eff7:	c7 04 24 1e ee 01 c0 	mov    DWORD PTR [esp],0xc001ee1e
c000effe:	e8 d4 7d ff ff       	call   c0006dd7 <Krnl::setBootMessage(char const*)>
c000f003:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f006:	e8 21 f7 ff ff       	call   c000e72c <CPU::detectFeatures()>
c000f00b:	c7 04 24 41 ee 01 c0 	mov    DWORD PTR [esp],0xc001ee41
c000f012:	e8 c0 7d ff ff       	call   c0006dd7 <Krnl::setBootMessage(char const*)>
c000f017:	e8 82 69 00 00       	call   c001599e <Hal::initialise()>
c000f01c:	a1 c0 07 02 c0       	mov    eax,ds:0xc00207c0
c000f021:	83 e0 10             	and    eax,0x10
c000f024:	83 f8 01             	cmp    eax,0x1
c000f027:	19 c0                	sbb    eax,eax
c000f029:	83 e0 46             	and    eax,0x46
c000f02c:	83 c0 1e             	add    eax,0x1e
c000f02f:	89 04 24             	mov    DWORD PTR [esp],eax
c000f032:	e8 26 d7 ff ff       	call   c000c75d <setupTimer(int)>
c000f037:	83 c4 10             	add    esp,0x10
c000f03a:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000f040:	f6 05 c0 07 02 c0 20 	test   BYTE PTR ds:0xc00207c0,0x20
c000f047:	74 0c                	je     c000f055 <CPU::open(int, int, void*)+0xe3>
c000f049:	83 ec 0c             	sub    esp,0xc
c000f04c:	53                   	push   ebx
c000f04d:	e8 54 fe ff ff       	call   c000eea6 <CPU::setupFeatures()>
c000f052:	83 c4 10             	add    esp,0x10
c000f055:	5b                   	pop    ebx
c000f056:	31 c0                	xor    eax,eax
c000f058:	5e                   	pop    esi
c000f059:	5f                   	pop    edi
c000f05a:	c3                   	ret    
c000f05b:	90                   	nop

c000f05c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c000f05c:	57                   	push   edi
c000f05d:	56                   	push   esi
c000f05e:	53                   	push   ebx
c000f05f:	51                   	push   ecx
c000f060:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f064:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c000f067:	0f 02 c0             	lar    eax,ax
c000f06a:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c000f06d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000f071:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c000f074:	88 ca                	mov    dl,cl
c000f076:	c0 ea 06             	shr    dl,0x6
c000f079:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c000f07d:	89 ca                	mov    edx,ecx
c000f07f:	66 c1 ea 03          	shr    dx,0x3
c000f083:	83 e2 07             	and    edx,0x7
c000f086:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c000f08b:	88 17                	mov    BYTE PTR [edi],dl
c000f08d:	0f 84 a6 01 00 00    	je     c000f239 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c000f093:	83 e1 07             	and    ecx,0x7
c000f096:	80 f9 04             	cmp    cl,0x4
c000f099:	0f 84 98 00 00 00    	je     c000f137 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c000f09f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c000f0a4:	0f 95 c0             	setne  al
c000f0a7:	80 f9 05             	cmp    cl,0x5
c000f0aa:	0f 95 c2             	setne  dl
c000f0ad:	08 c2                	or     dl,al
c000f0af:	74 79                	je     c000f12a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c000f0b1:	84 c9                	test   cl,cl
c000f0b3:	75 05                	jne    c000f0ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c000f0b5:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c000f0b8:	eb 3c                	jmp    c000f0f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c000f0ba:	80 f9 01             	cmp    cl,0x1
c000f0bd:	75 05                	jne    c000f0c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c000f0bf:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c000f0c2:	eb 32                	jmp    c000f0f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c000f0c4:	80 f9 02             	cmp    cl,0x2
c000f0c7:	75 05                	jne    c000f0ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c000f0c9:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000f0cc:	eb 28                	jmp    c000f0f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c000f0ce:	31 c0                	xor    eax,eax
c000f0d0:	80 f9 03             	cmp    cl,0x3
c000f0d3:	75 05                	jne    c000f0da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c000f0d5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000f0d8:	eb 1c                	jmp    c000f0f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c000f0da:	80 f9 05             	cmp    cl,0x5
c000f0dd:	75 05                	jne    c000f0e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c000f0df:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000f0e2:	eb 12                	jmp    c000f0f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c000f0e4:	80 f9 06             	cmp    cl,0x6
c000f0e7:	75 05                	jne    c000f0ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c000f0e9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000f0ec:	eb 08                	jmp    c000f0f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c000f0ee:	80 f9 07             	cmp    cl,0x7
c000f0f1:	75 03                	jne    c000f0f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c000f0f3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000f0f6:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c000f0fb:	75 10                	jne    c000f10d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c000f0fd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c000f101:	b9 03 00 00 00       	mov    ecx,0x3
c000f106:	01 d0                	add    eax,edx
c000f108:	e9 37 01 00 00       	jmp    c000f244 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c000f10d:	b9 02 00 00 00       	mov    ecx,0x2
c000f112:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c000f117:	0f 85 27 01 00 00    	jne    c000f244 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c000f11d:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c000f120:	b9 06 00 00 00       	mov    ecx,0x6
c000f125:	e9 1a 01 00 00       	jmp    c000f244 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c000f12a:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c000f12d:	b9 06 00 00 00       	mov    ecx,0x6
c000f132:	e9 0f 01 00 00       	jmp    c000f246 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c000f137:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c000f13a:	88 ca                	mov    dl,cl
c000f13c:	c0 ea 06             	shr    dl,0x6
c000f13f:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c000f143:	89 ca                	mov    edx,ecx
c000f145:	66 c1 ea 03          	shr    dx,0x3
c000f149:	83 e2 07             	and    edx,0x7
c000f14c:	80 e1 07             	and    cl,0x7
c000f14f:	75 05                	jne    c000f156 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c000f151:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c000f154:	eb 4c                	jmp    c000f1a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c000f156:	80 f9 01             	cmp    cl,0x1
c000f159:	75 05                	jne    c000f160 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c000f15b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c000f15e:	eb 42                	jmp    c000f1a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c000f160:	80 f9 02             	cmp    cl,0x2
c000f163:	75 05                	jne    c000f16a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c000f165:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c000f168:	eb 38                	jmp    c000f1a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c000f16a:	80 f9 03             	cmp    cl,0x3
c000f16d:	75 05                	jne    c000f174 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c000f16f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c000f172:	eb 2e                	jmp    c000f1a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c000f174:	80 f9 04             	cmp    cl,0x4
c000f177:	75 12                	jne    c000f18b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c000f179:	f6 c4 60             	test   ah,0x60
c000f17c:	75 08                	jne    c000f186 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c000f17e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000f181:	8d 78 14             	lea    edi,[eax+0x14]
c000f184:	eb 1c                	jmp    c000f1a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c000f186:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c000f189:	eb 17                	jmp    c000f1a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c000f18b:	80 f9 05             	cmp    cl,0x5
c000f18e:	75 05                	jne    c000f195 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c000f190:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c000f193:	eb 0d                	jmp    c000f1a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c000f195:	80 f9 06             	cmp    cl,0x6
c000f198:	75 05                	jne    c000f19f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c000f19a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000f19d:	eb 03                	jmp    c000f1a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c000f19f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c000f1a2:	84 d2                	test   dl,dl
c000f1a4:	75 05                	jne    c000f1ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c000f1a6:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c000f1a9:	eb 3c                	jmp    c000f1e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c000f1ab:	80 fa 01             	cmp    dl,0x1
c000f1ae:	75 05                	jne    c000f1b5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c000f1b0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c000f1b3:	eb 32                	jmp    c000f1e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c000f1b5:	80 fa 02             	cmp    dl,0x2
c000f1b8:	75 05                	jne    c000f1bf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c000f1ba:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000f1bd:	eb 28                	jmp    c000f1e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c000f1bf:	80 fa 03             	cmp    dl,0x3
c000f1c2:	75 05                	jne    c000f1c9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c000f1c4:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000f1c7:	eb 1e                	jmp    c000f1e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c000f1c9:	31 c0                	xor    eax,eax
c000f1cb:	80 fa 04             	cmp    dl,0x4
c000f1ce:	74 17                	je     c000f1e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c000f1d0:	80 fa 05             	cmp    dl,0x5
c000f1d3:	75 05                	jne    c000f1da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c000f1d5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000f1d8:	eb 0d                	jmp    c000f1e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c000f1da:	80 fa 06             	cmp    dl,0x6
c000f1dd:	75 05                	jne    c000f1e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c000f1df:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000f1e2:	eb 03                	jmp    c000f1e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c000f1e4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000f1e7:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c000f1ec:	0f 94 c2             	sete   dl
c000f1ef:	80 f9 05             	cmp    cl,0x5
c000f1f2:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c000f1f6:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c000f1fb:	d3 e0                	shl    eax,cl
c000f1fd:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c000f201:	74 0a                	je     c000f20d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c000f203:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c000f206:	b9 07 00 00 00       	mov    ecx,0x7
c000f20b:	eb 37                	jmp    c000f244 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c000f20d:	01 f8                	add    eax,edi
c000f20f:	b9 03 00 00 00       	mov    ecx,0x3
c000f214:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c000f219:	74 2b                	je     c000f246 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c000f21b:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c000f220:	75 0d                	jne    c000f22f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c000f222:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c000f226:	01 c8                	add    eax,ecx
c000f228:	b9 04 00 00 00       	mov    ecx,0x4
c000f22d:	eb 17                	jmp    c000f246 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c000f22f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c000f232:	b9 07 00 00 00       	mov    ecx,0x7
c000f237:	eb 0d                	jmp    c000f246 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c000f239:	b9 02 00 00 00       	mov    ecx,0x2
c000f23e:	b2 01                	mov    dl,0x1
c000f240:	31 c0                	xor    eax,eax
c000f242:	eb 02                	jmp    c000f246 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c000f244:	31 d2                	xor    edx,edx
c000f246:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f24a:	89 0b                	mov    DWORD PTR [ebx],ecx
c000f24c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000f250:	88 11                	mov    BYTE PTR [ecx],dl
c000f252:	5a                   	pop    edx
c000f253:	5b                   	pop    ebx
c000f254:	5e                   	pop    esi
c000f255:	5f                   	pop    edi
c000f256:	c3                   	ret    

c000f257 <Krnl::smpEntry()>:
c000f257:	eb fe                	jmp    c000f257 <Krnl::smpEntry()>

c000f259 <Krnl::startCPU(int)>:
c000f259:	c3                   	ret    

c000f25a <Krnl::startCPUs()>:
c000f25a:	c3                   	ret    
c000f25b:	90                   	nop

c000f25c <EnvVarContainer::getEnv(char const*)>:
c000f25c:	57                   	push   edi
c000f25d:	56                   	push   esi
c000f25e:	53                   	push   ebx
c000f25f:	31 db                	xor    ebx,ebx
c000f261:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f265:	39 1e                	cmp    DWORD PTR [esi],ebx
c000f267:	7e 2b                	jle    c000f294 <EnvVarContainer::getEnv(char const*)+0x38>
c000f269:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000f270:	50                   	push   eax
c000f271:	50                   	push   eax
c000f272:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000f275:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000f278:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f27c:	e8 6f 13 ff ff       	call   c00005f0 <strcmp>
c000f281:	83 c4 10             	add    esp,0x10
c000f284:	85 c0                	test   eax,eax
c000f286:	75 09                	jne    c000f291 <EnvVarContainer::getEnv(char const*)+0x35>
c000f288:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000f28b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000f28f:	eb 05                	jmp    c000f296 <EnvVarContainer::getEnv(char const*)+0x3a>
c000f291:	43                   	inc    ebx
c000f292:	eb d1                	jmp    c000f265 <EnvVarContainer::getEnv(char const*)+0x9>
c000f294:	31 c0                	xor    eax,eax
c000f296:	5b                   	pop    ebx
c000f297:	5e                   	pop    esi
c000f298:	5f                   	pop    edi
c000f299:	c3                   	ret    

c000f29a <EnvVarContainer::setEnv(char const*, char const*)>:
c000f29a:	55                   	push   ebp
c000f29b:	57                   	push   edi
c000f29c:	56                   	push   esi
c000f29d:	53                   	push   ebx
c000f29e:	83 ec 28             	sub    esp,0x28
c000f2a1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000f2a5:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f2a9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000f2ad:	56                   	push   esi
c000f2ae:	e8 11 12 ff ff       	call   c00004c4 <strlen>
c000f2b3:	40                   	inc    eax
c000f2b4:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2b7:	e8 c1 7a ff ff       	call   c0006d7d <malloc>
c000f2bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f2bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f2c3:	e8 fc 11 ff ff       	call   c00004c4 <strlen>
c000f2c8:	40                   	inc    eax
c000f2c9:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2cc:	e8 ac 7a ff ff       	call   c0006d7d <malloc>
c000f2d1:	89 34 24             	mov    DWORD PTR [esp],esi
c000f2d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f2d8:	e8 e7 11 ff ff       	call   c00004c4 <strlen>
c000f2dd:	83 c4 0c             	add    esp,0xc
c000f2e0:	40                   	inc    eax
c000f2e1:	50                   	push   eax
c000f2e2:	6a 00                	push   0x0
c000f2e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f2e8:	e8 bb 11 ff ff       	call   c00004a8 <memset>
c000f2ed:	89 34 24             	mov    DWORD PTR [esp],esi
c000f2f0:	e8 cf 11 ff ff       	call   c00004c4 <strlen>
c000f2f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000f2f9:	8d 48 01             	lea    ecx,[eax+0x1]
c000f2fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f301:	89 de                	mov    esi,ebx
c000f303:	e8 bc 11 ff ff       	call   c00004c4 <strlen>
c000f308:	83 c4 0c             	add    esp,0xc
c000f30b:	40                   	inc    eax
c000f30c:	50                   	push   eax
c000f30d:	6a 00                	push   0x0
c000f30f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f313:	e8 90 11 ff ff       	call   c00004a8 <memset>
c000f318:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f31b:	e8 a4 11 ff ff       	call   c00004c4 <strlen>
c000f320:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f324:	8d 48 01             	lea    ecx,[eax+0x1]
c000f327:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f329:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f32c:	40                   	inc    eax
c000f32d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f330:	c1 e0 03             	shl    eax,0x3
c000f333:	5a                   	pop    edx
c000f334:	59                   	pop    ecx
c000f335:	50                   	push   eax
c000f336:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000f339:	e8 2b 7a ff ff       	call   c0006d69 <realloc>
c000f33e:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f342:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000f345:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000f348:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000f34c:	b9 08 00 00 00       	mov    ecx,0x8
c000f351:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f353:	83 c4 2c             	add    esp,0x2c
c000f356:	5b                   	pop    ebx
c000f357:	5e                   	pop    esi
c000f358:	5f                   	pop    edi
c000f359:	5d                   	pop    ebp
c000f35a:	c3                   	ret    
c000f35b:	90                   	nop

c000f35c <EnvVarContainer::deleteEnv(char const*)>:
c000f35c:	c3                   	ret    
c000f35d:	90                   	nop

c000f35e <EnvVarContainer::loadFrom(char const*, char const*)>:
c000f35e:	55                   	push   ebp
c000f35f:	57                   	push   edi
c000f360:	56                   	push   esi
c000f361:	53                   	push   ebx
c000f362:	81 ec 38 01 00 00    	sub    esp,0x138
c000f368:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000f36f:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000f376:	68 14 01 00 00       	push   0x114
c000f37b:	e8 fd 79 ff ff       	call   c0006d7d <malloc>
c000f380:	83 c4 0c             	add    esp,0xc
c000f383:	89 c3                	mov    ebx,eax
c000f385:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f388:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f38f:	50                   	push   eax
c000f390:	e8 dd ac ff ff       	call   c000a072 <File::File(char const*, Process*)>
c000f395:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f398:	e8 fd af ff ff       	call   c000a39a <File::exists()>
c000f39d:	83 c4 10             	add    esp,0x10
c000f3a0:	84 c0                	test   al,al
c000f3a2:	75 31                	jne    c000f3d5 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000f3a4:	50                   	push   eax
c000f3a5:	50                   	push   eax
c000f3a6:	6a 12                	push   0x12
c000f3a8:	53                   	push   ebx
c000f3a9:	e8 7e ad ff ff       	call   c000a12c <File::open(FileOpenMode)>
c000f3ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f3b0:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000f3b3:	89 34 24             	mov    DWORD PTR [esp],esi
c000f3b6:	e8 09 11 ff ff       	call   c00004c4 <strlen>
c000f3bb:	5a                   	pop    edx
c000f3bc:	31 d2                	xor    edx,edx
c000f3be:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000f3c2:	51                   	push   ecx
c000f3c3:	56                   	push   esi
c000f3c4:	52                   	push   edx
c000f3c5:	50                   	push   eax
c000f3c6:	53                   	push   ebx
c000f3c7:	ff d7                	call   edi
c000f3c9:	83 c4 14             	add    esp,0x14
c000f3cc:	53                   	push   ebx
c000f3cd:	e8 b8 ad ff ff       	call   c000a18a <File::close()>
c000f3d2:	83 c4 10             	add    esp,0x10
c000f3d5:	56                   	push   esi
c000f3d6:	31 f6                	xor    esi,esi
c000f3d8:	68 00 01 00 00       	push   0x100
c000f3dd:	6a 00                	push   0x0
c000f3df:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000f3e3:	50                   	push   eax
c000f3e4:	e8 bf 10 ff ff       	call   c00004a8 <memset>
c000f3e9:	5f                   	pop    edi
c000f3ea:	58                   	pop    eax
c000f3eb:	6a 01                	push   0x1
c000f3ed:	53                   	push   ebx
c000f3ee:	e8 39 ad ff ff       	call   c000a12c <File::open(FileOpenMode)>
c000f3f3:	83 c4 10             	add    esp,0x10
c000f3f6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f3fe:	83 ec 0c             	sub    esp,0xc
c000f401:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f403:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000f407:	51                   	push   ecx
c000f408:	8d 54 24 23          	lea    edx,[esp+0x23]
c000f40c:	52                   	push   edx
c000f40d:	6a 00                	push   0x0
c000f40f:	6a 01                	push   0x1
c000f411:	53                   	push   ebx
c000f412:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000f415:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000f419:	83 c4 20             	add    esp,0x20
c000f41c:	3c 0d                	cmp    al,0xd
c000f41e:	0f 84 09 01 00 00    	je     c000f52d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f424:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000f429:	0f 84 ef 00 00 00    	je     c000f51e <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000f42f:	3c 0a                	cmp    al,0xa
c000f431:	74 13                	je     c000f446 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000f433:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000f438:	74 0c                	je     c000f446 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000f43a:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000f440:	0f 8e d8 00 00 00    	jle    c000f51e <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000f446:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f44a:	83 ec 0c             	sub    esp,0xc
c000f44d:	8d 78 01             	lea    edi,[eax+0x1]
c000f450:	57                   	push   edi
c000f451:	e8 27 79 ff ff       	call   c0006d7d <malloc>
c000f456:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000f45a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f45e:	8d 56 04             	lea    edx,[esi+0x4]
c000f461:	89 14 24             	mov    DWORD PTR [esp],edx
c000f464:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f468:	e8 10 79 ff ff       	call   c0006d7d <malloc>
c000f46d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f471:	83 c4 0c             	add    esp,0xc
c000f474:	57                   	push   edi
c000f475:	6a 00                	push   0x0
c000f477:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f47b:	e8 28 10 ff ff       	call   c00004a8 <memset>
c000f480:	8d 74 24 30          	lea    esi,[esp+0x30]
c000f484:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000f488:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f48c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f48e:	83 c4 0c             	add    esp,0xc
c000f491:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f495:	52                   	push   edx
c000f496:	6a 00                	push   0x0
c000f498:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f49c:	e8 07 10 ff ff       	call   c00004a8 <memset>
c000f4a1:	8d 74 24 30          	lea    esi,[esp+0x30]
c000f4a5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000f4a9:	89 34 24             	mov    DWORD PTR [esp],esi
c000f4ac:	e8 13 10 ff ff       	call   c00004c4 <strlen>
c000f4b1:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000f4b5:	89 c1                	mov    ecx,eax
c000f4b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f4b9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f4bc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000f4bf:	40                   	inc    eax
c000f4c0:	83 c4 10             	add    esp,0x10
c000f4c3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f4c6:	85 d2                	test   edx,edx
c000f4c8:	75 0c                	jne    c000f4d6 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000f4ca:	83 ec 0c             	sub    esp,0xc
c000f4cd:	6a 08                	push   0x8
c000f4cf:	e8 a9 78 ff ff       	call   c0006d7d <malloc>
c000f4d4:	eb 0c                	jmp    c000f4e2 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000f4d6:	c1 e0 03             	shl    eax,0x3
c000f4d9:	51                   	push   ecx
c000f4da:	51                   	push   ecx
c000f4db:	50                   	push   eax
c000f4dc:	52                   	push   edx
c000f4dd:	e8 87 78 ff ff       	call   c0006d69 <realloc>
c000f4e2:	83 c4 10             	add    esp,0x10
c000f4e5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000f4e8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000f4eb:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000f4ee:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f4f2:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000f4f6:	b9 08 00 00 00       	mov    ecx,0x8
c000f4fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f4fd:	31 f6                	xor    esi,esi
c000f4ff:	50                   	push   eax
c000f500:	68 00 01 00 00       	push   0x100
c000f505:	6a 00                	push   0x0
c000f507:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000f50b:	50                   	push   eax
c000f50c:	e8 97 0f ff ff       	call   c00004a8 <memset>
c000f511:	83 c4 10             	add    esp,0x10
c000f514:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f51c:	eb 0f                	jmp    c000f52d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f51e:	3c 3d                	cmp    al,0x3d
c000f520:	74 07                	je     c000f529 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000f522:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000f526:	46                   	inc    esi
c000f527:	eb 04                	jmp    c000f52d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f529:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000f52d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000f532:	0f 85 c6 fe ff ff    	jne    c000f3fe <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000f538:	81 c4 2c 01 00 00    	add    esp,0x12c
c000f53e:	5b                   	pop    ebx
c000f53f:	5e                   	pop    esi
c000f540:	5f                   	pop    edi
c000f541:	5d                   	pop    ebp
c000f542:	c3                   	ret    
c000f543:	90                   	nop

c000f544 <EnvVarContainer::__loadSystem()>:
c000f544:	83 ec 10             	sub    esp,0x10
c000f547:	68 80 01 02 c0       	push   0xc0020180
c000f54c:	68 84 ee 01 c0       	push   0xc001ee84
c000f551:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f555:	e8 04 fe ff ff       	call   c000f35e <EnvVarContainer::loadFrom(char const*, char const*)>
c000f55a:	83 c4 1c             	add    esp,0x1c
c000f55d:	c3                   	ret    

c000f55e <EnvVarContainer::__loadUser()>:
c000f55e:	c3                   	ret    
c000f55f:	90                   	nop

c000f560 <EnvVarContainer::EnvVarContainer(Process*)>:
c000f560:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f564:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f56a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f56e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f572:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000f575:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f579:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f580:	90                   	nop
c000f581:	c3                   	ret    

c000f582 <EnvVarContainer::~EnvVarContainer()>:
c000f582:	83 ec 0c             	sub    esp,0xc
c000f585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f589:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f58c:	85 c0                	test   eax,eax
c000f58e:	74 1d                	je     c000f5ad <EnvVarContainer::~EnvVarContainer()+0x2b>
c000f590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f594:	8b 00                	mov    eax,DWORD PTR [eax]
c000f596:	85 c0                	test   eax,eax
c000f598:	74 13                	je     c000f5ad <EnvVarContainer::~EnvVarContainer()+0x2b>
c000f59a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f59e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f5a1:	83 ec 0c             	sub    esp,0xc
c000f5a4:	50                   	push   eax
c000f5a5:	e8 e3 77 ff ff       	call   c0006d8d <free>
c000f5aa:	83 c4 10             	add    esp,0x10
c000f5ad:	90                   	nop
c000f5ae:	83 c4 0c             	add    esp,0xc
c000f5b1:	c3                   	ret    

c000f5b2 <Krnl::getEnv(Process*, char const*)>:
c000f5b2:	53                   	push   ebx
c000f5b3:	83 ec 08             	sub    esp,0x8
c000f5b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f5ba:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f5be:	39 05 b0 3c 02 c0    	cmp    DWORD PTR ds:0xc0023cb0,eax
c000f5c4:	74 04                	je     c000f5ca <Krnl::getEnv(Process*, char const*)+0x18>
c000f5c6:	85 c0                	test   eax,eax
c000f5c8:	75 0b                	jne    c000f5d5 <Krnl::getEnv(Process*, char const*)+0x23>
c000f5ca:	a1 34 32 02 c0       	mov    eax,ds:0xc0023234
c000f5cf:	85 c0                	test   eax,eax
c000f5d1:	75 19                	jne    c000f5ec <Krnl::getEnv(Process*, char const*)+0x3a>
c000f5d3:	eb 27                	jmp    c000f5fc <Krnl::getEnv(Process*, char const*)+0x4a>
c000f5d5:	52                   	push   edx
c000f5d6:	52                   	push   edx
c000f5d7:	53                   	push   ebx
c000f5d8:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000f5de:	e8 79 fc ff ff       	call   c000f25c <EnvVarContainer::getEnv(char const*)>
c000f5e3:	83 c4 10             	add    esp,0x10
c000f5e6:	85 c0                	test   eax,eax
c000f5e8:	75 28                	jne    c000f612 <Krnl::getEnv(Process*, char const*)+0x60>
c000f5ea:	eb de                	jmp    c000f5ca <Krnl::getEnv(Process*, char const*)+0x18>
c000f5ec:	52                   	push   edx
c000f5ed:	52                   	push   edx
c000f5ee:	53                   	push   ebx
c000f5ef:	50                   	push   eax
c000f5f0:	e8 67 fc ff ff       	call   c000f25c <EnvVarContainer::getEnv(char const*)>
c000f5f5:	83 c4 10             	add    esp,0x10
c000f5f8:	85 c0                	test   eax,eax
c000f5fa:	75 16                	jne    c000f612 <Krnl::getEnv(Process*, char const*)+0x60>
c000f5fc:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000f600:	a1 38 32 02 c0       	mov    eax,ds:0xc0023238
c000f605:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f609:	83 c4 08             	add    esp,0x8
c000f60c:	5b                   	pop    ebx
c000f60d:	e9 4a fc ff ff       	jmp    c000f25c <EnvVarContainer::getEnv(char const*)>
c000f612:	83 c4 08             	add    esp,0x8
c000f615:	5b                   	pop    ebx
c000f616:	c3                   	ret    

c000f617 <Krnl::setEnvSystem(char const*, char const*)>:
c000f617:	83 ec 10             	sub    esp,0x10
c000f61a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f61e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f622:	ff 35 38 32 02 c0    	push   DWORD PTR ds:0xc0023238
c000f628:	e8 6d fc ff ff       	call   c000f29a <EnvVarContainer::setEnv(char const*, char const*)>
c000f62d:	83 c4 1c             	add    esp,0x1c
c000f630:	c3                   	ret    

c000f631 <Krnl::setEnvUser(char const*, char const*)>:
c000f631:	a1 34 32 02 c0       	mov    eax,ds:0xc0023234
c000f636:	85 c0                	test   eax,eax
c000f638:	74 15                	je     c000f64f <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000f63a:	83 ec 10             	sub    esp,0x10
c000f63d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f641:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f645:	50                   	push   eax
c000f646:	e8 4f fc ff ff       	call   c000f29a <EnvVarContainer::setEnv(char const*, char const*)>
c000f64b:	83 c4 1c             	add    esp,0x1c
c000f64e:	c3                   	ret    
c000f64f:	c3                   	ret    

c000f650 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000f650:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f654:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000f65a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f65e:	e9 37 fc ff ff       	jmp    c000f29a <EnvVarContainer::setEnv(char const*, char const*)>

c000f663 <Krnl::deleteEnvSystem(char const*)>:
c000f663:	c3                   	ret    

c000f664 <Krnl::deleteEnvUser(char const*)>:
c000f664:	c3                   	ret    

c000f665 <Krnl::deleteEnvProcess(Process*, char const*)>:
c000f665:	c3                   	ret    

c000f666 <Krnl::newProcessEnv(Process*)>:
c000f666:	83 ec 28             	sub    esp,0x28
c000f669:	6a 0c                	push   0xc
c000f66b:	e8 0d 77 ff ff       	call   c0006d7d <malloc>
c000f670:	5a                   	pop    edx
c000f671:	59                   	pop    ecx
c000f672:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f676:	50                   	push   eax
c000f677:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f67b:	e8 e0 fe ff ff       	call   c000f560 <EnvVarContainer::EnvVarContainer(Process*)>
c000f680:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f684:	83 c4 2c             	add    esp,0x2c
c000f687:	c3                   	ret    

c000f688 <Krnl::copyProcessEnv(Process*, Process*)>:
c000f688:	57                   	push   edi
c000f689:	56                   	push   esi
c000f68a:	53                   	push   ebx
c000f68b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f68f:	83 ec 0c             	sub    esp,0xc
c000f692:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000f698:	6a 0c                	push   0xc
c000f69a:	e8 de 76 ff ff       	call   c0006d7d <malloc>
c000f69f:	89 c3                	mov    ebx,eax
c000f6a1:	58                   	pop    eax
c000f6a2:	5a                   	pop    edx
c000f6a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6a7:	53                   	push   ebx
c000f6a8:	e8 b3 fe ff ff       	call   c000f560 <EnvVarContainer::EnvVarContainer(Process*)>
c000f6ad:	8b 07                	mov    eax,DWORD PTR [edi]
c000f6af:	89 03                	mov    DWORD PTR [ebx],eax
c000f6b1:	c1 e0 03             	shl    eax,0x3
c000f6b4:	89 04 24             	mov    DWORD PTR [esp],eax
c000f6b7:	e8 c1 76 ff ff       	call   c0006d7d <malloc>
c000f6bc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000f6bf:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000f6c1:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000f6c4:	c1 e1 03             	shl    ecx,0x3
c000f6c7:	89 c7                	mov    edi,eax
c000f6c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f6cb:	83 c4 10             	add    esp,0x10
c000f6ce:	89 d8                	mov    eax,ebx
c000f6d0:	5b                   	pop    ebx
c000f6d1:	5e                   	pop    esi
c000f6d2:	5f                   	pop    edi
c000f6d3:	c3                   	ret    

c000f6d4 <Krnl::loadSystemEnv()>:
c000f6d4:	53                   	push   ebx
c000f6d5:	83 ec 14             	sub    esp,0x14
c000f6d8:	6a 0c                	push   0xc
c000f6da:	e8 9e 76 ff ff       	call   c0006d7d <malloc>
c000f6df:	89 c3                	mov    ebx,eax
c000f6e1:	58                   	pop    eax
c000f6e2:	5a                   	pop    edx
c000f6e3:	ff 35 b0 3c 02 c0    	push   DWORD PTR ds:0xc0023cb0
c000f6e9:	53                   	push   ebx
c000f6ea:	e8 71 fe ff ff       	call   c000f560 <EnvVarContainer::EnvVarContainer(Process*)>
c000f6ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6f2:	89 1d 38 32 02 c0    	mov    DWORD PTR ds:0xc0023238,ebx
c000f6f8:	e8 47 fe ff ff       	call   c000f544 <EnvVarContainer::__loadSystem()>
c000f6fd:	83 c4 18             	add    esp,0x18
c000f700:	5b                   	pop    ebx
c000f701:	c3                   	ret    

c000f702 <Krnl::loadUserEnv()>:
c000f702:	53                   	push   ebx
c000f703:	83 ec 14             	sub    esp,0x14
c000f706:	6a 0c                	push   0xc
c000f708:	e8 70 76 ff ff       	call   c0006d7d <malloc>
c000f70d:	89 c3                	mov    ebx,eax
c000f70f:	58                   	pop    eax
c000f710:	5a                   	pop    edx
c000f711:	ff 35 b0 3c 02 c0    	push   DWORD PTR ds:0xc0023cb0
c000f717:	53                   	push   ebx
c000f718:	e8 43 fe ff ff       	call   c000f560 <EnvVarContainer::EnvVarContainer(Process*)>
c000f71d:	89 1d 34 32 02 c0    	mov    DWORD PTR ds:0xc0023234,ebx
c000f723:	83 c4 18             	add    esp,0x18
c000f726:	5b                   	pop    ebx
c000f727:	c3                   	ret    

c000f728 <Krnl::flushEnv()>:
c000f728:	c3                   	ret    

c000f729 <Krnl::getProcessTotalEnvCount(Process*)>:
c000f729:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f72d:	8b 15 34 32 02 c0    	mov    edx,DWORD PTR ds:0xc0023234
c000f733:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000f739:	a1 38 32 02 c0       	mov    eax,ds:0xc0023238
c000f73e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f740:	03 01                	add    eax,DWORD PTR [ecx]
c000f742:	85 d2                	test   edx,edx
c000f744:	74 02                	je     c000f748 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c000f746:	03 02                	add    eax,DWORD PTR [edx]
c000f748:	c3                   	ret    

c000f749 <Krnl::getProcessEnvPair(Process*, int)>:
c000f749:	57                   	push   edi
c000f74a:	56                   	push   esi
c000f74b:	8b 35 34 32 02 c0    	mov    esi,DWORD PTR ds:0xc0023234
c000f751:	53                   	push   ebx
c000f752:	85 f6                	test   esi,esi
c000f754:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f758:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f75c:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000f762:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f766:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f768:	75 16                	jne    c000f780 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c000f76a:	39 c2                	cmp    edx,eax
c000f76c:	7c 16                	jl     c000f784 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c000f76e:	8b 0d 38 32 02 c0    	mov    ecx,DWORD PTR ds:0xc0023238
c000f774:	8b 31                	mov    esi,DWORD PTR [ecx]
c000f776:	01 c6                	add    esi,eax
c000f778:	39 d6                	cmp    esi,edx
c000f77a:	7e 3c                	jle    c000f7b8 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c000f77c:	29 c2                	sub    edx,eax
c000f77e:	eb 04                	jmp    c000f784 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c000f780:	39 c2                	cmp    edx,eax
c000f782:	7d 05                	jge    c000f789 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c000f784:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000f787:	eb 20                	jmp    c000f7a9 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c000f789:	8b 3e                	mov    edi,DWORD PTR [esi]
c000f78b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000f78e:	39 d1                	cmp    ecx,edx
c000f790:	7e 04                	jle    c000f796 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c000f792:	29 c2                	sub    edx,eax
c000f794:	eb 10                	jmp    c000f7a6 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c000f796:	8b 35 38 32 02 c0    	mov    esi,DWORD PTR ds:0xc0023238
c000f79c:	03 0e                	add    ecx,DWORD PTR [esi]
c000f79e:	39 d1                	cmp    ecx,edx
c000f7a0:	7e 16                	jle    c000f7b8 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c000f7a2:	29 c2                	sub    edx,eax
c000f7a4:	29 fa                	sub    edx,edi
c000f7a6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000f7a9:	8d 14 d0             	lea    edx,[eax+edx*8]
c000f7ac:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7ae:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f7b1:	89 03                	mov    DWORD PTR [ebx],eax
c000f7b3:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000f7b6:	eb 1d                	jmp    c000f7d5 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c000f7b8:	83 ec 0c             	sub    esp,0xc
c000f7bb:	68 a6 ee 01 c0       	push   0xc001eea6
c000f7c0:	e8 18 00 00 00       	call   c000f7dd <Krnl::panic(char const*)>
c000f7c5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000f7cb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000f7d2:	83 c4 10             	add    esp,0x10
c000f7d5:	89 d8                	mov    eax,ebx
c000f7d7:	5b                   	pop    ebx
c000f7d8:	5e                   	pop    esi
c000f7d9:	5f                   	pop    edi
c000f7da:	c2 04 00             	ret    0x4

c000f7dd <Krnl::panic(char const*)>:
c000f7dd:	53                   	push   ebx
c000f7de:	83 ec 10             	sub    esp,0x10
c000f7e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f7e5:	fa                   	cli    
c000f7e6:	c6 05 44 32 02 c0 01 	mov    BYTE PTR ds:0xc0023244,0x1
c000f7ed:	53                   	push   ebx
c000f7ee:	68 c0 ee 01 c0       	push   0xc001eec0
c000f7f3:	e8 0f a3 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c000f7f8:	83 c4 0c             	add    esp,0xc
c000f7fb:	6a 01                	push   0x1
c000f7fd:	6a 0f                	push   0xf
c000f7ff:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000f805:	e8 e6 80 ff ff       	call   c00078f0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f80a:	59                   	pop    ecx
c000f80b:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000f811:	e8 d2 82 ff ff       	call   c0007ae8 <VgaText::clearScreen()>
c000f816:	58                   	pop    eax
c000f817:	5a                   	pop    edx
c000f818:	68 17 ef 01 c0       	push   0xc001ef17
c000f81d:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000f823:	e8 00 81 ff ff       	call   c0007928 <VgaText::setTitle(char*)>
c000f828:	83 c4 0c             	add    esp,0xc
c000f82b:	6a 01                	push   0x1
c000f82d:	6a 0f                	push   0xf
c000f82f:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000f835:	e8 b6 80 ff ff       	call   c00078f0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f83a:	59                   	pop    ecx
c000f83b:	58                   	pop    eax
c000f83c:	68 d9 ee 01 c0       	push   0xc001eed9
c000f841:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000f847:	e8 90 85 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c000f84c:	58                   	pop    eax
c000f84d:	5a                   	pop    edx
c000f84e:	68 60 ef 01 c0       	push   0xc001ef60
c000f853:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000f859:	e8 7e 85 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c000f85e:	59                   	pop    ecx
c000f85f:	58                   	pop    eax
c000f860:	68 f5 ee 01 c0       	push   0xc001eef5
c000f865:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000f86b:	e8 6c 85 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c000f870:	58                   	pop    eax
c000f871:	5a                   	pop    edx
c000f872:	53                   	push   ebx
c000f873:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000f879:	e8 5e 85 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c000f87e:	59                   	pop    ecx
c000f87f:	5b                   	pop    ebx
c000f880:	68 15 ef 01 c0       	push   0xc001ef15
c000f885:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000f88b:	e8 4c 85 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c000f890:	58                   	pop    eax
c000f891:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f895:	e8 97 29 00 00       	call   c0012231 <Thr::getDriverNameFromAddress(unsigned long)>
c000f89a:	83 c4 10             	add    esp,0x10
c000f89d:	85 c0                	test   eax,eax
c000f89f:	0f 84 4e 01 00 00    	je     c000f9f3 <Krnl::panic(char const*)+0x216>
c000f8a5:	83 ec 08             	sub    esp,0x8
c000f8a8:	89 c3                	mov    ebx,eax
c000f8aa:	68 9c ef 01 c0       	push   0xc001ef9c
c000f8af:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000f8b5:	e8 22 85 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c000f8ba:	59                   	pop    ecx
c000f8bb:	58                   	pop    eax
c000f8bc:	68 f5 ee 01 c0       	push   0xc001eef5
c000f8c1:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000f8c7:	e8 10 85 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c000f8cc:	58                   	pop    eax
c000f8cd:	5a                   	pop    edx
c000f8ce:	53                   	push   ebx
c000f8cf:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000f8d5:	e8 02 85 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c000f8da:	83 c4 10             	add    esp,0x10
c000f8dd:	83 ec 08             	sub    esp,0x8
c000f8e0:	68 14 ef 01 c0       	push   0xc001ef14
c000f8e5:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000f8eb:	e8 ec 84 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c000f8f0:	58                   	pop    eax
c000f8f1:	5a                   	pop    edx
c000f8f2:	68 f4 ef 01 c0       	push   0xc001eff4
c000f8f7:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000f8fd:	e8 da 84 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c000f902:	59                   	pop    ecx
c000f903:	5b                   	pop    ebx
c000f904:	68 34 f0 01 c0       	push   0xc001f034
c000f909:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000f90f:	e8 c8 84 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c000f914:	58                   	pop    eax
c000f915:	5a                   	pop    edx
c000f916:	68 00 ef 01 c0       	push   0xc001ef00
c000f91b:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000f921:	e8 b6 84 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c000f926:	59                   	pop    ecx
c000f927:	5b                   	pop    ebx
c000f928:	68 78 f0 01 c0       	push   0xc001f078
c000f92d:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000f933:	e8 a4 84 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c000f938:	58                   	pop    eax
c000f939:	5a                   	pop    edx
c000f93a:	68 18 ef 01 c0       	push   0xc001ef18
c000f93f:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000f945:	e8 92 84 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c000f94a:	0f 20 c0             	mov    eax,cr0
c000f94d:	59                   	pop    ecx
c000f94e:	5b                   	pop    ebx
c000f94f:	50                   	push   eax
c000f950:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000f956:	e8 3b 84 ff ff       	call   c0007d96 <VgaText::putx(unsigned int)>
c000f95b:	58                   	pop    eax
c000f95c:	5a                   	pop    edx
c000f95d:	68 22 ef 01 c0       	push   0xc001ef22
c000f962:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000f968:	e8 6f 84 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c000f96d:	0f 20 d0             	mov    eax,cr2
c000f970:	59                   	pop    ecx
c000f971:	5b                   	pop    ebx
c000f972:	50                   	push   eax
c000f973:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000f979:	e8 18 84 ff ff       	call   c0007d96 <VgaText::putx(unsigned int)>
c000f97e:	58                   	pop    eax
c000f97f:	5a                   	pop    edx
c000f980:	68 2c ef 01 c0       	push   0xc001ef2c
c000f985:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000f98b:	e8 4c 84 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c000f990:	0f 20 d8             	mov    eax,cr3
c000f993:	59                   	pop    ecx
c000f994:	5b                   	pop    ebx
c000f995:	50                   	push   eax
c000f996:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000f99c:	e8 f5 83 ff ff       	call   c0007d96 <VgaText::putx(unsigned int)>
c000f9a1:	58                   	pop    eax
c000f9a2:	5a                   	pop    edx
c000f9a3:	68 3f ef 01 c0       	push   0xc001ef3f
c000f9a8:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000f9ae:	e8 29 84 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c000f9b3:	0f 20 e0             	mov    eax,cr4
c000f9b6:	59                   	pop    ecx
c000f9b7:	5b                   	pop    ebx
c000f9b8:	50                   	push   eax
c000f9b9:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000f9bf:	e8 d2 83 ff ff       	call   c0007d96 <VgaText::putx(unsigned int)>
c000f9c4:	58                   	pop    eax
c000f9c5:	5a                   	pop    edx
c000f9c6:	68 49 ef 01 c0       	push   0xc001ef49
c000f9cb:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000f9d1:	e8 06 84 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c000f9d6:	83 c4 10             	add    esp,0x10
c000f9d9:	b2 fe                	mov    dl,0xfe
c000f9db:	e4 60                	in     al,0x60
c000f9dd:	3c 1c                	cmp    al,0x1c
c000f9df:	74 04                	je     c000f9e5 <Krnl::panic(char const*)+0x208>
c000f9e1:	3c 5a                	cmp    al,0x5a
c000f9e3:	75 f6                	jne    c000f9db <Krnl::panic(char const*)+0x1fe>
c000f9e5:	e4 64                	in     al,0x64
c000f9e7:	a8 02                	test   al,0x2
c000f9e9:	75 fa                	jne    c000f9e5 <Krnl::panic(char const*)+0x208>
c000f9eb:	88 d0                	mov    al,dl
c000f9ed:	e6 64                	out    0x64,al
c000f9ef:	fa                   	cli    
c000f9f0:	f4                   	hlt    
c000f9f1:	eb e8                	jmp    c000f9db <Krnl::panic(char const*)+0x1fe>
c000f9f3:	51                   	push   ecx
c000f9f4:	51                   	push   ecx
c000f9f5:	68 c8 ef 01 c0       	push   0xc001efc8
c000f9fa:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000fa00:	e8 d7 83 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c000fa05:	5b                   	pop    ebx
c000fa06:	58                   	pop    eax
c000fa07:	68 f5 ee 01 c0       	push   0xc001eef5
c000fa0c:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000fa12:	e8 c5 83 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c000fa17:	58                   	pop    eax
c000fa18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fa1d:	5a                   	pop    edx
c000fa1e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fa21:	83 c0 0c             	add    eax,0xc
c000fa24:	50                   	push   eax
c000fa25:	ff 35 f4 07 02 c0    	push   DWORD PTR ds:0xc00207f4
c000fa2b:	e8 ac 83 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c000fa30:	83 c4 10             	add    esp,0x10
c000fa33:	e9 a5 fe ff ff       	jmp    c000f8dd <Krnl::panic(char const*)+0x100>

c000fa38 <Krnl::powerThread(void*)>:
c000fa38:	53                   	push   ebx
c000fa39:	83 ec 08             	sub    esp,0x8
c000fa3c:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c000fa41:	48                   	dec    eax
c000fa42:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c000fa47:	75 01                	jne    c000fa4a <Krnl::powerThread(void*)+0x12>
c000fa49:	fb                   	sti    
c000fa4a:	83 ec 0c             	sub    esp,0xc
c000fa4d:	8b 1d 94 32 02 c0    	mov    ebx,DWORD PTR ds:0xc0023294
c000fa53:	6a 0a                	push   0xa
c000fa55:	c6 05 60 32 02 c0 00 	mov    BYTE PTR ds:0xc0023260,0x0
c000fa5c:	e8 07 35 00 00       	call   c0012f68 <sleep(unsigned int)>
c000fa61:	a1 a4 32 02 c0       	mov    eax,ds:0xc00232a4
c000fa66:	83 c4 10             	add    esp,0x10
c000fa69:	83 c0 0a             	add    eax,0xa
c000fa6c:	85 db                	test   ebx,ebx
c000fa6e:	a3 a4 32 02 c0       	mov    ds:0xc00232a4,eax
c000fa73:	74 d5                	je     c000fa4a <Krnl::powerThread(void*)+0x12>
c000fa75:	39 d8                	cmp    eax,ebx
c000fa77:	7e d1                	jle    c000fa4a <Krnl::powerThread(void*)+0x12>
c000fa79:	83 ec 0c             	sub    esp,0xc
c000fa7c:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c000fa82:	e8 5b 69 ff ff       	call   c00063e2 <Computer::sleep()>
c000fa87:	83 c4 10             	add    esp,0x10
c000fa8a:	eb be                	jmp    c000fa4a <Krnl::powerThread(void*)+0x12>

c000fa8c <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c000fa8c:	57                   	push   edi
c000fa8d:	b9 09 00 00 00       	mov    ecx,0x9
c000fa92:	56                   	push   esi
c000fa93:	bf 80 32 02 c0       	mov    edi,0xc0023280
c000fa98:	fc                   	cld    
c000fa99:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000fa9d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fa9f:	5e                   	pop    esi
c000faa0:	5f                   	pop    edi
c000faa1:	c3                   	ret    

c000faa2 <Krnl::userIOReceived()>:
c000faa2:	c7 05 a4 32 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00232a4,0x0
c000faac:	c3                   	ret    

c000faad <Krnl::handlePowerButton()>:
c000faad:	83 ec 0c             	sub    esp,0xc
c000fab0:	a1 80 32 02 c0       	mov    eax,ds:0xc0023280
c000fab5:	83 f8 02             	cmp    eax,0x2
c000fab8:	75 10                	jne    c000faca <Krnl::handlePowerButton()+0x1d>
c000faba:	83 ec 0c             	sub    esp,0xc
c000fabd:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c000fac3:	e8 ea 68 ff ff       	call   c00063b2 <Computer::shutdown()>
c000fac8:	eb 11                	jmp    c000fadb <Krnl::handlePowerButton()+0x2e>
c000faca:	48                   	dec    eax
c000facb:	75 11                	jne    c000fade <Krnl::handlePowerButton()+0x31>
c000facd:	83 ec 0c             	sub    esp,0xc
c000fad0:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c000fad6:	e8 07 69 ff ff       	call   c00063e2 <Computer::sleep()>
c000fadb:	83 c4 10             	add    esp,0x10
c000fade:	83 c4 0c             	add    esp,0xc
c000fae1:	c3                   	ret    

c000fae2 <Krnl::handleSleepButton()>:
c000fae2:	83 ec 0c             	sub    esp,0xc
c000fae5:	a1 84 32 02 c0       	mov    eax,ds:0xc0023284
c000faea:	83 f8 02             	cmp    eax,0x2
c000faed:	75 10                	jne    c000faff <Krnl::handleSleepButton()+0x1d>
c000faef:	83 ec 0c             	sub    esp,0xc
c000faf2:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c000faf8:	e8 b5 68 ff ff       	call   c00063b2 <Computer::shutdown()>
c000fafd:	eb 11                	jmp    c000fb10 <Krnl::handleSleepButton()+0x2e>
c000faff:	48                   	dec    eax
c000fb00:	75 11                	jne    c000fb13 <Krnl::handleSleepButton()+0x31>
c000fb02:	83 ec 0c             	sub    esp,0xc
c000fb05:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c000fb0b:	e8 d2 68 ff ff       	call   c00063e2 <Computer::sleep()>
c000fb10:	83 c4 10             	add    esp,0x10
c000fb13:	83 c4 0c             	add    esp,0xc
c000fb16:	c3                   	ret    

c000fb17 <Krnl::setupPowerManager()>:
c000fb17:	83 ec 0c             	sub    esp,0xc
c000fb1a:	c7 05 a4 32 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00232a4,0x0
c000fb24:	68 f0 00 00 00       	push   0xf0
c000fb29:	c6 05 60 32 02 c0 00 	mov    BYTE PTR ds:0xc0023260,0x0
c000fb30:	6a 00                	push   0x0
c000fb32:	68 38 fa 00 c0       	push   0xc000fa38
c000fb37:	ff 35 b0 3c 02 c0    	push   DWORD PTR ds:0xc0023cb0
c000fb3d:	e8 02 2f 00 00       	call   c0012a44 <Process::createThread(void (*)(void*), void*, int)>
c000fb42:	c7 05 80 32 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0023280,0x2
c000fb4c:	c7 05 84 32 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023284,0x1
c000fb56:	c7 05 88 32 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0023288,0x3
c000fb60:	c7 05 8c 32 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002328c,0x0
c000fb6a:	c7 05 98 32 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023298,0x0
c000fb74:	c7 05 90 32 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023290,0x0
c000fb7e:	c7 05 9c 32 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002329c,0x0
c000fb88:	c7 05 94 32 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023294,0x3c
c000fb92:	c7 05 a0 32 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00232a0,0x3c
c000fb9c:	83 c4 1c             	add    esp,0x1c
c000fb9f:	c3                   	ret    

c000fba0 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c000fba0:	55                   	push   ebp
c000fba1:	57                   	push   edi
c000fba2:	56                   	push   esi
c000fba3:	53                   	push   ebx
c000fba4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000fbaa:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c000fbb1:	8a 1e                	mov    bl,BYTE PTR [esi]
c000fbb3:	8d 6e 01             	lea    ebp,[esi+0x1]
c000fbb6:	80 fb 40             	cmp    bl,0x40
c000fbb9:	75 1b                	jne    c000fbd6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c000fbbb:	8a 16                	mov    dl,BYTE PTR [esi]
c000fbbd:	84 d2                	test   dl,dl
c000fbbf:	0f 84 f1 00 00 00    	je     c000fcb6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000fbc5:	8d 46 01             	lea    eax,[esi+0x1]
c000fbc8:	80 fa 3a             	cmp    dl,0x3a
c000fbcb:	74 04                	je     c000fbd1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c000fbcd:	89 c6                	mov    esi,eax
c000fbcf:	eb ea                	jmp    c000fbbb <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c000fbd1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000fbd4:	89 c6                	mov    esi,eax
c000fbd6:	50                   	push   eax
c000fbd7:	6a 40                	push   0x40
c000fbd9:	6a 00                	push   0x0
c000fbdb:	8d 44 24 24          	lea    eax,[esp+0x24]
c000fbdf:	50                   	push   eax
c000fbe0:	e8 c3 08 ff ff       	call   c00004a8 <memset>
c000fbe5:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c000fbec:	31 c0                	xor    eax,eax
c000fbee:	83 c4 10             	add    esp,0x10
c000fbf1:	8a 0f                	mov    cl,BYTE PTR [edi]
c000fbf3:	84 c9                	test   cl,cl
c000fbf5:	0f 84 bb 00 00 00    	je     c000fcb6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000fbfb:	3d c7 00 00 00       	cmp    eax,0xc7
c000fc00:	0f 8f b0 00 00 00    	jg     c000fcb6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000fc06:	80 f9 0a             	cmp    cl,0xa
c000fc09:	0f 85 98 00 00 00    	jne    c000fca7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c000fc0f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c000fc14:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c000fc18:	a8 df                	test   al,0xdf
c000fc1a:	0f 94 c1             	sete   cl
c000fc1d:	3c 23                	cmp    al,0x23
c000fc1f:	0f 94 c2             	sete   dl
c000fc22:	08 d1                	or     cl,dl
c000fc24:	75 4a                	jne    c000fc70 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000fc26:	8d 50 f7             	lea    edx,[eax-0x9]
c000fc29:	80 fa 01             	cmp    dl,0x1
c000fc2c:	76 42                	jbe    c000fc70 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000fc2e:	3c 5b                	cmp    al,0x5b
c000fc30:	75 42                	jne    c000fc74 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c000fc32:	80 fb 40             	cmp    bl,0x40
c000fc35:	75 39                	jne    c000fc70 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000fc37:	83 ec 0c             	sub    esp,0xc
c000fc3a:	8d 54 24 65          	lea    edx,[esp+0x65]
c000fc3e:	52                   	push   edx
c000fc3f:	e8 80 08 ff ff       	call   c00004c4 <strlen>
c000fc44:	83 c4 10             	add    esp,0x10
c000fc47:	83 f8 3f             	cmp    eax,0x3f
c000fc4a:	77 6a                	ja     c000fcb6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000fc4c:	50                   	push   eax
c000fc4d:	50                   	push   eax
c000fc4e:	8d 54 24 61          	lea    edx,[esp+0x61]
c000fc52:	52                   	push   edx
c000fc53:	8d 54 24 24          	lea    edx,[esp+0x24]
c000fc57:	52                   	push   edx
c000fc58:	e8 07 09 ff ff       	call   c0000564 <strcpy>
c000fc5d:	58                   	pop    eax
c000fc5e:	8d 54 24 24          	lea    edx,[esp+0x24]
c000fc62:	52                   	push   edx
c000fc63:	e8 5c 08 ff ff       	call   c00004c4 <strlen>
c000fc68:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c000fc6d:	83 c4 10             	add    esp,0x10
c000fc70:	31 d2                	xor    edx,edx
c000fc72:	eb 3a                	jmp    c000fcae <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c000fc74:	80 fb 40             	cmp    bl,0x40
c000fc77:	74 06                	je     c000fc7f <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c000fc79:	8d 44 24 58          	lea    eax,[esp+0x58]
c000fc7d:	eb 20                	jmp    c000fc9f <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c000fc7f:	50                   	push   eax
c000fc80:	50                   	push   eax
c000fc81:	55                   	push   ebp
c000fc82:	8d 44 24 24          	lea    eax,[esp+0x24]
c000fc86:	50                   	push   eax
c000fc87:	e8 64 09 ff ff       	call   c00005f0 <strcmp>
c000fc8c:	83 c4 10             	add    esp,0x10
c000fc8f:	85 c0                	test   eax,eax
c000fc91:	75 dd                	jne    c000fc70 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000fc93:	eb e4                	jmp    c000fc79 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c000fc95:	8d 50 01             	lea    edx,[eax+0x1]
c000fc98:	80 f9 3d             	cmp    cl,0x3d
c000fc9b:	74 1d                	je     c000fcba <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c000fc9d:	89 d0                	mov    eax,edx
c000fc9f:	8a 08                	mov    cl,BYTE PTR [eax]
c000fca1:	84 c9                	test   cl,cl
c000fca3:	75 f0                	jne    c000fc95 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c000fca5:	eb 0f                	jmp    c000fcb6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000fca7:	8d 50 01             	lea    edx,[eax+0x1]
c000fcaa:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c000fcae:	47                   	inc    edi
c000fcaf:	89 d0                	mov    eax,edx
c000fcb1:	e9 3b ff ff ff       	jmp    c000fbf1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c000fcb6:	31 c0                	xor    eax,eax
c000fcb8:	eb 33                	jmp    c000fced <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c000fcba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fcbe:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fcc1:	50                   	push   eax
c000fcc2:	50                   	push   eax
c000fcc3:	8d 44 24 60          	lea    eax,[esp+0x60]
c000fcc7:	50                   	push   eax
c000fcc8:	56                   	push   esi
c000fcc9:	e8 22 09 ff ff       	call   c00005f0 <strcmp>
c000fcce:	83 c4 10             	add    esp,0x10
c000fcd1:	85 c0                	test   eax,eax
c000fcd3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fcd7:	75 97                	jne    c000fc70 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000fcd9:	51                   	push   ecx
c000fcda:	51                   	push   ecx
c000fcdb:	52                   	push   edx
c000fcdc:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c000fce3:	e8 7c 08 ff ff       	call   c0000564 <strcpy>
c000fce8:	83 c4 10             	add    esp,0x10
c000fceb:	b0 01                	mov    al,0x1
c000fced:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fcf3:	5b                   	pop    ebx
c000fcf4:	5e                   	pop    esi
c000fcf5:	5f                   	pop    edi
c000fcf6:	5d                   	pop    ebp
c000fcf7:	c3                   	ret    

c000fcf8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c000fcf8:	57                   	push   edi
c000fcf9:	56                   	push   esi
c000fcfa:	53                   	push   ebx
c000fcfb:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000fd01:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c000fd08:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c000fd0f:	53                   	push   ebx
c000fd10:	e8 af 07 ff ff       	call   c00004c4 <strlen>
c000fd15:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd18:	89 c7                	mov    edi,eax
c000fd1a:	e8 a5 07 ff ff       	call   c00004c4 <strlen>
c000fd1f:	83 c4 10             	add    esp,0x10
c000fd22:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c000fd26:	3d ff 00 00 00       	cmp    eax,0xff
c000fd2b:	0f 87 d3 00 00 00    	ja     c000fe04 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c000fd31:	57                   	push   edi
c000fd32:	57                   	push   edi
c000fd33:	56                   	push   esi
c000fd34:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000fd38:	56                   	push   esi
c000fd39:	e8 26 08 ff ff       	call   c0000564 <strcpy>
c000fd3e:	58                   	pop    eax
c000fd3f:	5a                   	pop    edx
c000fd40:	68 83 f3 01 c0       	push   0xc001f383
c000fd45:	56                   	push   esi
c000fd46:	e8 59 09 ff ff       	call   c00006a4 <strcat>
c000fd4b:	59                   	pop    ecx
c000fd4c:	5f                   	pop    edi
c000fd4d:	53                   	push   ebx
c000fd4e:	56                   	push   esi
c000fd4f:	e8 50 09 ff ff       	call   c00006a4 <strcat>
c000fd54:	58                   	pop    eax
c000fd55:	5a                   	pop    edx
c000fd56:	68 9e f0 01 c0       	push   0xc001f09e
c000fd5b:	56                   	push   esi
c000fd5c:	e8 43 09 ff ff       	call   c00006a4 <strcat>
c000fd61:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000fd68:	e8 10 70 ff ff       	call   c0006d7d <malloc>
c000fd6d:	83 c4 0c             	add    esp,0xc
c000fd70:	89 c3                	mov    ebx,eax
c000fd72:	ff 35 b0 3c 02 c0    	push   DWORD PTR ds:0xc0023cb0
c000fd78:	56                   	push   esi
c000fd79:	50                   	push   eax
c000fd7a:	e8 f3 a2 ff ff       	call   c000a072 <File::File(char const*, Process*)>
c000fd7f:	83 c4 10             	add    esp,0x10
c000fd82:	85 db                	test   ebx,ebx
c000fd84:	74 7e                	je     c000fe04 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c000fd86:	51                   	push   ecx
c000fd87:	51                   	push   ecx
c000fd88:	6a 01                	push   0x1
c000fd8a:	53                   	push   ebx
c000fd8b:	e8 9c a3 ff ff       	call   c000a12c <File::open(FileOpenMode)>
c000fd90:	83 c4 10             	add    esp,0x10
c000fd93:	85 c0                	test   eax,eax
c000fd95:	74 08                	je     c000fd9f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c000fd97:	83 ec 0c             	sub    esp,0xc
c000fd9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fd9c:	53                   	push   ebx
c000fd9d:	eb 5f                	jmp    c000fdfe <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c000fd9f:	52                   	push   edx
c000fda0:	8d 44 24 17          	lea    eax,[esp+0x17]
c000fda4:	50                   	push   eax
c000fda5:	8d 44 24 20          	lea    eax,[esp+0x20]
c000fda9:	50                   	push   eax
c000fdaa:	53                   	push   ebx
c000fdab:	e8 28 a6 ff ff       	call   c000a3d8 <File::stat(unsigned long long*, bool*)>
c000fdb0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fdb4:	83 c4 10             	add    esp,0x10
c000fdb7:	89 c1                	mov    ecx,eax
c000fdb9:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c000fdbd:	74 31                	je     c000fdf0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c000fdbf:	83 ec 0c             	sub    esp,0xc
c000fdc2:	50                   	push   eax
c000fdc3:	e8 b5 6f ff ff       	call   c0006d7d <malloc>
c000fdc8:	89 c6                	mov    esi,eax
c000fdca:	58                   	pop    eax
c000fdcb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fdcd:	8d 54 24 20          	lea    edx,[esp+0x20]
c000fdd1:	52                   	push   edx
c000fdd2:	56                   	push   esi
c000fdd3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000fdd7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000fddb:	53                   	push   ebx
c000fddc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fddf:	83 c4 20             	add    esp,0x20
c000fde2:	85 c0                	test   eax,eax
c000fde4:	75 0a                	jne    c000fdf0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c000fde6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fdea:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000fdee:	74 18                	je     c000fe08 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c000fdf0:	83 ec 0c             	sub    esp,0xc
c000fdf3:	53                   	push   ebx
c000fdf4:	e8 91 a3 ff ff       	call   c000a18a <File::close()>
c000fdf9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fdfb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fdfe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fe01:	83 c4 10             	add    esp,0x10
c000fe04:	31 c0                	xor    eax,eax
c000fe06:	eb 3b                	jmp    c000fe43 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c000fe08:	83 ec 0c             	sub    esp,0xc
c000fe0b:	53                   	push   ebx
c000fe0c:	e8 79 a3 ff ff       	call   c000a18a <File::close()>
c000fe11:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fe13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe16:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fe19:	83 c4 0c             	add    esp,0xc
c000fe1c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c000fe23:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c000fe2a:	56                   	push   esi
c000fe2b:	e8 70 fd ff ff       	call   c000fba0 <Reg::findLineFromLoadedData(char*, char*, char*)>
c000fe30:	89 34 24             	mov    DWORD PTR [esp],esi
c000fe33:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000fe37:	e8 51 6f ff ff       	call   c0006d8d <free>
c000fe3c:	83 c4 10             	add    esp,0x10
c000fe3f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fe43:	81 c4 20 01 00 00    	add    esp,0x120
c000fe49:	5b                   	pop    ebx
c000fe4a:	5e                   	pop    esi
c000fe4b:	5f                   	pop    edi
c000fe4c:	c3                   	ret    

c000fe4d <Reg::getLine(char*, char*, char*)>:
c000fe4d:	57                   	push   edi
c000fe4e:	56                   	push   esi
c000fe4f:	53                   	push   ebx
c000fe50:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe54:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fe58:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fe5c:	57                   	push   edi
c000fe5d:	56                   	push   esi
c000fe5e:	53                   	push   ebx
c000fe5f:	68 a3 f0 01 c0       	push   0xc001f0a3
c000fe64:	e8 8f fe ff ff       	call   c000fcf8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c000fe69:	83 c4 10             	add    esp,0x10
c000fe6c:	84 c0                	test   al,al
c000fe6e:	75 10                	jne    c000fe80 <Reg::getLine(char*, char*, char*)+0x33>
c000fe70:	57                   	push   edi
c000fe71:	56                   	push   esi
c000fe72:	53                   	push   ebx
c000fe73:	68 c8 f0 01 c0       	push   0xc001f0c8
c000fe78:	e8 7b fe ff ff       	call   c000fcf8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c000fe7d:	83 c4 10             	add    esp,0x10
c000fe80:	5b                   	pop    ebx
c000fe81:	5e                   	pop    esi
c000fe82:	5f                   	pop    edi
c000fe83:	c3                   	ret    

c000fe84 <Reg::readInt(char*, char*, int*)>:
c000fe84:	55                   	push   ebp
c000fe85:	57                   	push   edi
c000fe86:	56                   	push   esi
c000fe87:	53                   	push   ebx
c000fe88:	81 ec f0 00 00 00    	sub    esp,0xf0
c000fe8e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000fe92:	57                   	push   edi
c000fe93:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c000fe9a:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c000fea1:	e8 a7 ff ff ff       	call   c000fe4d <Reg::getLine(char*, char*, char*)>
c000fea6:	83 c4 10             	add    esp,0x10
c000fea9:	84 c0                	test   al,al
c000feab:	0f 84 b3 00 00 00    	je     c000ff64 <Reg::readInt(char*, char*, int*)+0xe0>
c000feb1:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c000feb5:	80 fa 2b             	cmp    dl,0x2b
c000feb8:	74 0c                	je     c000fec6 <Reg::readInt(char*, char*, int*)+0x42>
c000feba:	80 fa 2d             	cmp    dl,0x2d
c000febd:	75 0e                	jne    c000fecd <Reg::readInt(char*, char*, int*)+0x49>
c000febf:	ba 01 00 00 00       	mov    edx,0x1
c000fec4:	eb 0b                	jmp    c000fed1 <Reg::readInt(char*, char*, int*)+0x4d>
c000fec6:	ba 01 00 00 00       	mov    edx,0x1
c000fecb:	eb 02                	jmp    c000fecf <Reg::readInt(char*, char*, int*)+0x4b>
c000fecd:	31 d2                	xor    edx,edx
c000fecf:	31 c0                	xor    eax,eax
c000fed1:	be 0a 00 00 00       	mov    esi,0xa
c000fed6:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c000fedb:	75 20                	jne    c000fefd <Reg::readInt(char*, char*, int*)+0x79>
c000fedd:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c000fee1:	80 f9 78             	cmp    cl,0x78
c000fee4:	75 0a                	jne    c000fef0 <Reg::readInt(char*, char*, int*)+0x6c>
c000fee6:	83 c2 02             	add    edx,0x2
c000fee9:	be 10 00 00 00       	mov    esi,0x10
c000feee:	eb 0d                	jmp    c000fefd <Reg::readInt(char*, char*, int*)+0x79>
c000fef0:	80 f9 62             	cmp    cl,0x62
c000fef3:	75 08                	jne    c000fefd <Reg::readInt(char*, char*, int*)+0x79>
c000fef5:	83 c2 02             	add    edx,0x2
c000fef8:	be 02 00 00 00       	mov    esi,0x2
c000fefd:	01 d7                	add    edi,edx
c000feff:	31 d2                	xor    edx,edx
c000ff01:	8a 1f                	mov    bl,BYTE PTR [edi]
c000ff03:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c000ff07:	80 fb 0d             	cmp    bl,0xd
c000ff0a:	0f 94 c3             	sete   bl
c000ff0d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ff12:	0f 94 c1             	sete   cl
c000ff15:	08 cb                	or     bl,cl
c000ff17:	75 3a                	jne    c000ff53 <Reg::readInt(char*, char*, int*)+0xcf>
c000ff19:	0f af d6             	imul   edx,esi
c000ff1c:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c000ff21:	83 fe 10             	cmp    esi,0x10
c000ff24:	75 26                	jne    c000ff4c <Reg::readInt(char*, char*, int*)+0xc8>
c000ff26:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000ff2a:	8d 69 bf             	lea    ebp,[ecx-0x41]
c000ff2d:	89 e9                	mov    ecx,ebp
c000ff2f:	80 f9 05             	cmp    cl,0x5
c000ff32:	77 06                	ja     c000ff3a <Reg::readInt(char*, char*, int*)+0xb6>
c000ff34:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c000ff38:	eb 16                	jmp    c000ff50 <Reg::readInt(char*, char*, int*)+0xcc>
c000ff3a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000ff3e:	83 e9 61             	sub    ecx,0x61
c000ff41:	80 f9 05             	cmp    cl,0x5
c000ff44:	77 06                	ja     c000ff4c <Reg::readInt(char*, char*, int*)+0xc8>
c000ff46:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c000ff4a:	eb 04                	jmp    c000ff50 <Reg::readInt(char*, char*, int*)+0xcc>
c000ff4c:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c000ff50:	47                   	inc    edi
c000ff51:	eb ae                	jmp    c000ff01 <Reg::readInt(char*, char*, int*)+0x7d>
c000ff53:	84 c0                	test   al,al
c000ff55:	74 02                	je     c000ff59 <Reg::readInt(char*, char*, int*)+0xd5>
c000ff57:	f7 da                	neg    edx
c000ff59:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c000ff60:	89 10                	mov    DWORD PTR [eax],edx
c000ff62:	88 d8                	mov    al,bl
c000ff64:	81 c4 ec 00 00 00    	add    esp,0xec
c000ff6a:	5b                   	pop    ebx
c000ff6b:	5e                   	pop    esi
c000ff6c:	5f                   	pop    edi
c000ff6d:	5d                   	pop    ebp
c000ff6e:	c3                   	ret    

c000ff6f <Reg::readString(char*, char*, char*, int)>:
c000ff6f:	57                   	push   edi
c000ff70:	56                   	push   esi
c000ff71:	53                   	push   ebx
c000ff72:	81 ec d4 00 00 00    	sub    esp,0xd4
c000ff78:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c000ff7f:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000ff83:	57                   	push   edi
c000ff84:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c000ff8b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c000ff92:	e8 b6 fe ff ff       	call   c000fe4d <Reg::getLine(char*, char*, char*)>
c000ff97:	83 c4 10             	add    esp,0x10
c000ff9a:	89 c6                	mov    esi,eax
c000ff9c:	84 c0                	test   al,al
c000ff9e:	74 44                	je     c000ffe4 <Reg::readString(char*, char*, char*, int)+0x75>
c000ffa0:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c000ffa7:	31 c0                	xor    eax,eax
c000ffa9:	4a                   	dec    edx
c000ffaa:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c000ffad:	84 c9                	test   cl,cl
c000ffaf:	74 0f                	je     c000ffc0 <Reg::readString(char*, char*, char*, int)+0x51>
c000ffb1:	39 c2                	cmp    edx,eax
c000ffb3:	7e 0b                	jle    c000ffc0 <Reg::readString(char*, char*, char*, int)+0x51>
c000ffb5:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000ffb8:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c000ffbd:	40                   	inc    eax
c000ffbe:	eb ea                	jmp    c000ffaa <Reg::readString(char*, char*, char*, int)+0x3b>
c000ffc0:	83 ec 0c             	sub    esp,0xc
c000ffc3:	53                   	push   ebx
c000ffc4:	e8 fb 04 ff ff       	call   c00004c4 <strlen>
c000ffc9:	83 c4 10             	add    esp,0x10
c000ffcc:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c000ffd1:	75 11                	jne    c000ffe4 <Reg::readString(char*, char*, char*, int)+0x75>
c000ffd3:	83 ec 0c             	sub    esp,0xc
c000ffd6:	53                   	push   ebx
c000ffd7:	e8 e8 04 ff ff       	call   c00004c4 <strlen>
c000ffdc:	83 c4 10             	add    esp,0x10
c000ffdf:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000ffe4:	81 c4 d0 00 00 00    	add    esp,0xd0
c000ffea:	89 f0                	mov    eax,esi
c000ffec:	5b                   	pop    ebx
c000ffed:	5e                   	pop    esi
c000ffee:	5f                   	pop    edi
c000ffef:	c3                   	ret    

c000fff0 <Reg::readBool(char*, char*, bool*)>:
c000fff0:	83 ec 20             	sub    esp,0x20
c000fff3:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fff7:	50                   	push   eax
c000fff8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fffc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010000:	e8 7f fe ff ff       	call   c000fe84 <Reg::readInt(char*, char*, int*)>
c0010005:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001000a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001000e:	0f 95 02             	setne  BYTE PTR [edx]
c0010011:	83 c4 2c             	add    esp,0x2c
c0010014:	c3                   	ret    

c0010015 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0010015:	53                   	push   ebx
c0010016:	83 ec 1c             	sub    esp,0x1c
c0010019:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001001d:	8d 44 24 13          	lea    eax,[esp+0x13]
c0010021:	50                   	push   eax
c0010022:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010026:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001002a:	e8 c1 ff ff ff       	call   c000fff0 <Reg::readBool(char*, char*, bool*)>
c001002f:	83 c4 10             	add    esp,0x10
c0010032:	84 c0                	test   al,al
c0010034:	74 04                	je     c001003a <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0010036:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001003a:	88 d8                	mov    al,bl
c001003c:	83 c4 18             	add    esp,0x18
c001003f:	5b                   	pop    ebx
c0010040:	c3                   	ret    

c0010041 <Reg::readIntWithDefault(char*, char*, int)>:
c0010041:	53                   	push   ebx
c0010042:	83 ec 1c             	sub    esp,0x1c
c0010045:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010049:	8d 44 24 10          	lea    eax,[esp+0x10]
c001004d:	50                   	push   eax
c001004e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010052:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010056:	e8 29 fe ff ff       	call   c000fe84 <Reg::readInt(char*, char*, int*)>
c001005b:	83 c4 10             	add    esp,0x10
c001005e:	84 c0                	test   al,al
c0010060:	74 04                	je     c0010066 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0010062:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010066:	89 d8                	mov    eax,ebx
c0010068:	83 c4 18             	add    esp,0x18
c001006b:	5b                   	pop    ebx
c001006c:	c3                   	ret    

c001006d <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001006d:	57                   	push   edi
c001006e:	56                   	push   esi
c001006f:	56                   	push   esi
c0010070:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010074:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0010078:	56                   	push   esi
c0010079:	57                   	push   edi
c001007a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001007e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010082:	e8 e8 fe ff ff       	call   c000ff6f <Reg::readString(char*, char*, char*, int)>
c0010087:	83 c4 10             	add    esp,0x10
c001008a:	84 c0                	test   al,al
c001008c:	75 1a                	jne    c00100a8 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001008e:	51                   	push   ecx
c001008f:	56                   	push   esi
c0010090:	6a 00                	push   0x0
c0010092:	57                   	push   edi
c0010093:	e8 10 04 ff ff       	call   c00004a8 <memset>
c0010098:	8d 4e ff             	lea    ecx,[esi-0x1]
c001009b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001009f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00100a1:	83 c4 10             	add    esp,0x10
c00100a4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00100a8:	89 f8                	mov    eax,edi
c00100aa:	5a                   	pop    edx
c00100ab:	5e                   	pop    esi
c00100ac:	5f                   	pop    edi
c00100ad:	c3                   	ret    

c00100ae <Sys::eject(regs*)>:
c00100ae:	83 ec 0c             	sub    esp,0xc
c00100b1:	83 ca ff             	or     edx,0xffffffff
c00100b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100b8:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00100bb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00100c0:	83 e9 41             	sub    ecx,0x41
c00100c3:	83 f9 19             	cmp    ecx,0x19
c00100c6:	77 18                	ja     c00100e0 <Sys::eject(regs*)+0x32>
c00100c8:	8b 0c 8d 20 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd2e0]
c00100cf:	85 c9                	test   ecx,ecx
c00100d1:	74 0d                	je     c00100e0 <Sys::eject(regs*)+0x32>
c00100d3:	83 ec 0c             	sub    esp,0xc
c00100d6:	51                   	push   ecx
c00100d7:	e8 64 c0 ff ff       	call   c000c140 <LogicalDisk::eject()>
c00100dc:	83 c4 10             	add    esp,0x10
c00100df:	99                   	cdq    
c00100e0:	83 c4 0c             	add    esp,0xc
c00100e3:	c3                   	ret    

c00100e4 <Sys::exit(regs*)>:
c00100e4:	83 ec 18             	sub    esp,0x18
c00100e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100eb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00100ee:	e8 85 34 00 00       	call   c0013578 <terminateTask(int)>
c00100f3:	83 c8 ff             	or     eax,0xffffffff
c00100f6:	83 c4 1c             	add    esp,0x1c
c00100f9:	89 c2                	mov    edx,eax
c00100fb:	c3                   	ret    

c00100fc <Sys::getCwd(regs*)>:
c00100fc:	83 ec 10             	sub    esp,0x10
c00100ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010103:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0010106:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010109:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001010e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010111:	e8 5e 9d ff ff       	call   c0009e74 <Fs::getcwd(Process*, char*, int)>
c0010116:	83 c4 1c             	add    esp,0x1c
c0010119:	99                   	cdq    
c001011a:	c3                   	ret    

c001011b <Sys::getPID(regs*)>:
c001011b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010120:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010123:	8b 00                	mov    eax,DWORD PTR [eax]
c0010125:	99                   	cdq    
c0010126:	c3                   	ret    

c0010127 <Sys::getRAMData(regs*)>:
c0010127:	8b 0d d8 07 02 c0    	mov    ecx,DWORD PTR ds:0xc00207d8
c001012d:	69 05 d4 07 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc00207d4,0xc8
c0010137:	99                   	cdq    
c0010138:	f7 f9                	idiv   ecx
c001013a:	c1 e0 18             	shl    eax,0x18
c001013d:	09 c8                	or     eax,ecx
c001013f:	99                   	cdq    
c0010140:	c3                   	ret    

c0010141 <Sys::getVGAPtr(regs*)>:
c0010141:	55                   	push   ebp
c0010142:	57                   	push   edi
c0010143:	56                   	push   esi
c0010144:	53                   	push   ebx
c0010145:	83 ec 18             	sub    esp,0x18
c0010148:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001014c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001014f:	e8 28 2f 00 00       	call   c001307c <Thr::processFromPID(int)>
c0010154:	83 c4 10             	add    esp,0x10
c0010157:	89 c1                	mov    ecx,eax
c0010159:	b8 01 00 00 00       	mov    eax,0x1
c001015e:	85 c9                	test   ecx,ecx
c0010160:	74 57                	je     c00101b9 <Sys::getVGAPtr(regs*)+0x78>
c0010162:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0010168:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c001016c:	74 0c                	je     c001017a <Sys::getVGAPtr(regs*)+0x39>
c001016e:	83 ec 0c             	sub    esp,0xc
c0010171:	55                   	push   ebp
c0010172:	e8 26 79 ff ff       	call   c0007a9d <setActiveTerminal(VgaText*)>
c0010177:	83 c4 10             	add    esp,0x10
c001017a:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001017d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010180:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0010185:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010187:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001018a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001018d:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0010193:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010196:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0010199:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001019f:	50                   	push   eax
c00101a0:	50                   	push   eax
c00101a1:	68 e3 f0 01 c0       	push   0xc001f0e3
c00101a6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00101a9:	05 a8 0f 00 00       	add    eax,0xfa8
c00101ae:	50                   	push   eax
c00101af:	e8 b0 03 ff ff       	call   c0000564 <strcpy>
c00101b4:	83 c4 10             	add    esp,0x10
c00101b7:	31 c0                	xor    eax,eax
c00101b9:	83 c4 0c             	add    esp,0xc
c00101bc:	31 d2                	xor    edx,edx
c00101be:	5b                   	pop    ebx
c00101bf:	5e                   	pop    esi
c00101c0:	5f                   	pop    edi
c00101c1:	5d                   	pop    ebp
c00101c2:	c3                   	ret    

c00101c3 <Sys::loadDLL(regs*)>:
c00101c3:	56                   	push   esi
c00101c4:	53                   	push   ebx
c00101c5:	31 d2                	xor    edx,edx
c00101c7:	51                   	push   ecx
c00101c8:	b8 01 00 00 00       	mov    eax,0x1
c00101cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101d1:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00101d5:	0f 84 8c 00 00 00    	je     c0010267 <Sys::loadDLL(regs*)+0xa4>
c00101db:	83 ec 0c             	sub    esp,0xc
c00101de:	68 14 01 00 00       	push   0x114
c00101e3:	e8 95 6b ff ff       	call   c0006d7d <malloc>
c00101e8:	83 c4 0c             	add    esp,0xc
c00101eb:	89 c3                	mov    ebx,eax
c00101ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00101f2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00101f5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00101f8:	53                   	push   ebx
c00101f9:	e8 74 9e ff ff       	call   c000a072 <File::File(char const*, Process*)>
c00101fe:	83 c4 10             	add    esp,0x10
c0010201:	31 d2                	xor    edx,edx
c0010203:	b8 02 00 00 00       	mov    eax,0x2
c0010208:	85 db                	test   ebx,ebx
c001020a:	74 5b                	je     c0010267 <Sys::loadDLL(regs*)+0xa4>
c001020c:	83 ec 0c             	sub    esp,0xc
c001020f:	53                   	push   ebx
c0010210:	e8 85 a1 ff ff       	call   c000a39a <File::exists()>
c0010215:	83 c4 10             	add    esp,0x10
c0010218:	84 c0                	test   al,al
c001021a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001021c:	75 11                	jne    c001022f <Sys::loadDLL(regs*)+0x6c>
c001021e:	83 ec 0c             	sub    esp,0xc
c0010221:	53                   	push   ebx
c0010222:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010225:	83 c4 10             	add    esp,0x10
c0010228:	b8 03 00 00 00       	mov    eax,0x3
c001022d:	eb 36                	jmp    c0010265 <Sys::loadDLL(regs*)+0xa2>
c001022f:	83 ec 0c             	sub    esp,0xc
c0010232:	53                   	push   ebx
c0010233:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010236:	58                   	pop    eax
c0010237:	5a                   	pop    edx
c0010238:	6a 00                	push   0x0
c001023a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001023d:	e8 40 20 00 00       	call   c0012282 <Thr::loadDLL(char const*, bool)>
c0010242:	83 c4 10             	add    esp,0x10
c0010245:	89 c1                	mov    ecx,eax
c0010247:	31 d2                	xor    edx,edx
c0010249:	b8 04 00 00 00       	mov    eax,0x4
c001024e:	85 c9                	test   ecx,ecx
c0010250:	74 15                	je     c0010267 <Sys::loadDLL(regs*)+0xa4>
c0010252:	53                   	push   ebx
c0010253:	53                   	push   ebx
c0010254:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c001025a:	51                   	push   ecx
c001025b:	e8 53 22 00 00       	call   c00124b3 <Thr::executeDLL(unsigned long, void*)>
c0010260:	83 c4 10             	add    esp,0x10
c0010263:	31 c0                	xor    eax,eax
c0010265:	31 d2                	xor    edx,edx
c0010267:	59                   	pop    ecx
c0010268:	5b                   	pop    ebx
c0010269:	5e                   	pop    esi
c001026a:	c3                   	ret    

c001026b <Sys::read(regs*)>:
c001026b:	57                   	push   edi
c001026c:	56                   	push   esi
c001026d:	53                   	push   ebx
c001026e:	83 ec 10             	sub    esp,0x10
c0010271:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010275:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010278:	83 f8 02             	cmp    eax,0x2
c001027b:	77 10                	ja     c001028d <Sys::read(regs*)+0x22>
c001027d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010282:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010285:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001028b:	eb 0e                	jmp    c001029b <Sys::read(regs*)+0x30>
c001028d:	83 ec 0c             	sub    esp,0xc
c0010290:	50                   	push   eax
c0010291:	e8 b9 84 ff ff       	call   c000874f <getFromFileDescriptor(int)>
c0010296:	83 c4 10             	add    esp,0x10
c0010299:	89 c1                	mov    ecx,eax
c001029b:	83 c8 ff             	or     eax,0xffffffff
c001029e:	85 c9                	test   ecx,ecx
c00102a0:	89 c2                	mov    edx,eax
c00102a2:	74 28                	je     c00102cc <Sys::read(regs*)+0x61>
c00102a4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102ac:	31 ff                	xor    edi,edi
c00102ae:	83 ec 0c             	sub    esp,0xc
c00102b1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00102b3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00102b7:	52                   	push   edx
c00102b8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00102bb:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00102be:	57                   	push   edi
c00102bf:	56                   	push   esi
c00102c0:	51                   	push   ecx
c00102c1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00102c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00102c8:	83 c4 20             	add    esp,0x20
c00102cb:	99                   	cdq    
c00102cc:	83 c4 10             	add    esp,0x10
c00102cf:	5b                   	pop    ebx
c00102d0:	5e                   	pop    esi
c00102d1:	5f                   	pop    edi
c00102d2:	c3                   	ret    

c00102d3 <Sys::sbrk(regs*)>:
c00102d3:	56                   	push   esi
c00102d4:	53                   	push   ebx
c00102d5:	50                   	push   eax
c00102d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00102db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00102df:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00102e2:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00102e5:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00102eb:	85 db                	test   ebx,ebx
c00102ed:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00102f0:	74 02                	je     c00102f4 <Sys::sbrk(regs*)+0x21>
c00102f2:	79 06                	jns    c00102fa <Sys::sbrk(regs*)+0x27>
c00102f4:	89 f0                	mov    eax,esi
c00102f6:	31 d2                	xor    edx,edx
c00102f8:	eb 2a                	jmp    c0010324 <Sys::sbrk(regs*)+0x51>
c00102fa:	83 c8 ff             	or     eax,0xffffffff
c00102fd:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0010303:	89 c2                	mov    edx,eax
c0010305:	77 1d                	ja     c0010324 <Sys::sbrk(regs*)+0x51>
c0010307:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001030d:	50                   	push   eax
c001030e:	c1 ea 0c             	shr    edx,0xc
c0010311:	68 07 0c 00 00       	push   0xc07
c0010316:	52                   	push   edx
c0010317:	51                   	push   ecx
c0010318:	e8 df 8c ff ff       	call   c0008ffc <VAS::allocatePages(int, int)>
c001031d:	89 f0                	mov    eax,esi
c001031f:	31 d2                	xor    edx,edx
c0010321:	83 c4 10             	add    esp,0x10
c0010324:	59                   	pop    ecx
c0010325:	5b                   	pop    ebx
c0010326:	5e                   	pop    esi
c0010327:	c3                   	ret    

c0010328 <Sys::setCwd(regs*)>:
c0010328:	83 ec 14             	sub    esp,0x14
c001032b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001032f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010332:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010337:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001033a:	e8 fa a0 ff ff       	call   c000a439 <Fs::setcwd(Process*, char*)>
c001033f:	83 c4 1c             	add    esp,0x1c
c0010342:	99                   	cdq    
c0010343:	c3                   	ret    

c0010344 <Sys::setTime(regs*)>:
c0010344:	55                   	push   ebp
c0010345:	31 c9                	xor    ecx,ecx
c0010347:	57                   	push   edi
c0010348:	bd 0c 00 00 00       	mov    ebp,0xc
c001034d:	56                   	push   esi
c001034e:	53                   	push   ebx
c001034f:	31 db                	xor    ebx,ebx
c0010351:	83 ec 10             	sub    esp,0x10
c0010354:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010358:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001035b:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001035e:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0010361:	89 c2                	mov    edx,eax
c0010363:	66 81 ef 6c 07       	sub    di,0x76c
c0010368:	83 e2 1f             	and    edx,0x1f
c001036b:	c1 e7 10             	shl    edi,0x10
c001036e:	42                   	inc    edx
c001036f:	c1 e8 05             	shr    eax,0x5
c0010372:	88 d1                	mov    cl,dl
c0010374:	31 d2                	xor    edx,edx
c0010376:	f7 f5                	div    ebp
c0010378:	89 dd                	mov    ebp,ebx
c001037a:	88 d5                	mov    ch,dl
c001037c:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0010382:	0f b7 c1             	movzx  eax,cx
c0010385:	31 d2                	xor    edx,edx
c0010387:	09 f8                	or     eax,edi
c0010389:	bf 3c 00 00 00       	mov    edi,0x3c
c001038e:	89 c1                	mov    ecx,eax
c0010390:	89 f0                	mov    eax,esi
c0010392:	f7 f7                	div    edi
c0010394:	c1 e2 10             	shl    edx,0x10
c0010397:	09 d5                	or     ebp,edx
c0010399:	31 d2                	xor    edx,edx
c001039b:	89 eb                	mov    ebx,ebp
c001039d:	f7 f7                	div    edi
c001039f:	bf 10 0e 00 00       	mov    edi,0xe10
c00103a4:	88 d7                	mov    bh,dl
c00103a6:	89 f0                	mov    eax,esi
c00103a8:	31 d2                	xor    edx,edx
c00103aa:	f7 f7                	div    edi
c00103ac:	bf 18 00 00 00       	mov    edi,0x18
c00103b1:	31 d2                	xor    edx,edx
c00103b3:	f7 f7                	div    edi
c00103b5:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c00103ba:	88 d3                	mov    bl,dl
c00103bc:	53                   	push   ebx
c00103bd:	51                   	push   ecx
c00103be:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00103c4:	e8 75 a8 ff ff       	call   c000ac3e <Clock::setTimeInDatetimeLocal(datetime_t)>
c00103c9:	83 c4 1c             	add    esp,0x1c
c00103cc:	83 f0 01             	xor    eax,0x1
c00103cf:	5b                   	pop    ebx
c00103d0:	0f b6 c0             	movzx  eax,al
c00103d3:	5e                   	pop    esi
c00103d4:	31 d2                	xor    edx,edx
c00103d6:	5f                   	pop    edi
c00103d7:	5d                   	pop    ebp
c00103d8:	c3                   	ret    

c00103d9 <Sys::timezone(regs*)>:
c00103d9:	53                   	push   ebx
c00103da:	83 ec 08             	sub    esp,0x8
c00103dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103e1:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00103e5:	75 17                	jne    c00103fe <Sys::timezone(regs*)+0x25>
c00103e7:	83 ec 0c             	sub    esp,0xc
c00103ea:	68 ed f0 01 c0       	push   0xc001f0ed
c00103ef:	e8 13 97 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c00103f4:	83 c8 ff             	or     eax,0xffffffff
c00103f7:	83 c4 10             	add    esp,0x10
c00103fa:	89 c2                	mov    edx,eax
c00103fc:	eb 20                	jmp    c001041e <Sys::timezone(regs*)+0x45>
c00103fe:	83 ec 0c             	sub    esp,0xc
c0010401:	68 02 f1 01 c0       	push   0xc001f102
c0010406:	e8 fc 96 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c001040b:	58                   	pop    eax
c001040c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001040f:	e8 8c a5 ff ff       	call   c000a9a0 <User::loadClockSettings(int)>
c0010414:	83 c4 10             	add    esp,0x10
c0010417:	b8 01 00 00 00       	mov    eax,0x1
c001041c:	31 d2                	xor    edx,edx
c001041e:	83 c4 08             	add    esp,0x8
c0010421:	5b                   	pop    ebx
c0010422:	c3                   	ret    

c0010423 <Sys::write(regs*)>:
c0010423:	57                   	push   edi
c0010424:	56                   	push   esi
c0010425:	53                   	push   ebx
c0010426:	83 ec 10             	sub    esp,0x10
c0010429:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001042d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010430:	83 f8 02             	cmp    eax,0x2
c0010433:	77 10                	ja     c0010445 <Sys::write(regs*)+0x22>
c0010435:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001043a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001043d:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0010443:	eb 0e                	jmp    c0010453 <Sys::write(regs*)+0x30>
c0010445:	83 ec 0c             	sub    esp,0xc
c0010448:	50                   	push   eax
c0010449:	e8 01 83 ff ff       	call   c000874f <getFromFileDescriptor(int)>
c001044e:	83 c4 10             	add    esp,0x10
c0010451:	89 c1                	mov    ecx,eax
c0010453:	83 c8 ff             	or     eax,0xffffffff
c0010456:	85 c9                	test   ecx,ecx
c0010458:	89 c2                	mov    edx,eax
c001045a:	74 28                	je     c0010484 <Sys::write(regs*)+0x61>
c001045c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010464:	31 ff                	xor    edi,edi
c0010466:	83 ec 0c             	sub    esp,0xc
c0010469:	8b 01                	mov    eax,DWORD PTR [ecx]
c001046b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001046f:	52                   	push   edx
c0010470:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010473:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0010476:	57                   	push   edi
c0010477:	56                   	push   esi
c0010478:	51                   	push   ecx
c0010479:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001047c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010480:	83 c4 20             	add    esp,0x20
c0010483:	99                   	cdq    
c0010484:	83 c4 10             	add    esp,0x10
c0010487:	5b                   	pop    ebx
c0010488:	5e                   	pop    esi
c0010489:	5f                   	pop    edi
c001048a:	c3                   	ret    

c001048b <Sys::wsbe(regs*)>:
c001048b:	57                   	push   edi
c001048c:	b9 0b 00 00 00       	mov    ecx,0xb
c0010491:	56                   	push   esi
c0010492:	be 41 f1 01 c0       	mov    esi,0xc001f141
c0010497:	53                   	push   ebx
c0010498:	83 ec 30             	sub    esp,0x30
c001049b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001049f:	fc                   	cld    
c00104a0:	83 ec 0c             	sub    esp,0xc
c00104a3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00104a5:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00104a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00104ae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00104b1:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00104b7:	8b 06                	mov    eax,DWORD PTR [esi]
c00104b9:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00104bc:	57                   	push   edi
c00104bd:	e8 02 00 ff ff       	call   c00004c4 <strlen>
c00104c2:	5a                   	pop    edx
c00104c3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00104c7:	52                   	push   edx
c00104c8:	31 d2                	xor    edx,edx
c00104ca:	57                   	push   edi
c00104cb:	52                   	push   edx
c00104cc:	50                   	push   eax
c00104cd:	56                   	push   esi
c00104ce:	ff d3                	call   ebx
c00104d0:	83 c4 14             	add    esp,0x14
c00104d3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00104d7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00104da:	e8 99 30 00 00       	call   c0013578 <terminateTask(int)>
c00104df:	83 c4 40             	add    esp,0x40
c00104e2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00104e7:	5b                   	pop    ebx
c00104e8:	31 d2                	xor    edx,edx
c00104ea:	5e                   	pop    esi
c00104eb:	5f                   	pop    edi
c00104ec:	c3                   	ret    

c00104ed <Sys::yield(regs*)>:
c00104ed:	83 ec 0c             	sub    esp,0xc
c00104f0:	fa                   	cli    
c00104f1:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c00104f7:	e8 64 27 00 00       	call   c0012c60 <schedule()>
c00104fc:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0010501:	48                   	dec    eax
c0010502:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c0010507:	75 01                	jne    c001050a <Sys::yield(regs*)+0x1d>
c0010509:	fb                   	sti    
c001050a:	31 c0                	xor    eax,eax
c001050c:	31 d2                	xor    edx,edx
c001050e:	83 c4 0c             	add    esp,0xc
c0010511:	c3                   	ret    

c0010512 <sysCallSeekDir(regs*)>:
c0010512:	31 c0                	xor    eax,eax
c0010514:	31 d2                	xor    edx,edx
c0010516:	c3                   	ret    

c0010517 <sysCallTellDir(regs*)>:
c0010517:	31 c0                	xor    eax,eax
c0010519:	31 d2                	xor    edx,edx
c001051b:	c3                   	ret    

c001051c <sysCallVerify(regs*)>:
c001051c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010520:	31 d2                	xor    edx,edx
c0010522:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010525:	c3                   	ret    

c0010526 <sysCallGetArgc(regs*)>:
c0010526:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001052b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001052e:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010534:	99                   	cdq    
c0010535:	c3                   	ret    

c0010536 <sysCallTTYName(regs*)>:
c0010536:	b8 01 00 00 00       	mov    eax,0x1
c001053b:	31 d2                	xor    edx,edx
c001053d:	c3                   	ret    

c001053e <sysFormatDisk(regs*)>:
c001053e:	56                   	push   esi
c001053f:	53                   	push   ebx
c0010540:	53                   	push   ebx
c0010541:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010545:	8b 1d 98 08 02 c0    	mov    ebx,DWORD PTR ds:0xc0020898
c001054b:	eb 25                	jmp    c0010572 <sysFormatDisk(regs*)+0x34>
c001054d:	83 ec 0c             	sub    esp,0xc
c0010550:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010553:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010555:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0010558:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001055b:	50                   	push   eax
c001055c:	ff 34 85 20 2d 02 c0 	push   DWORD PTR [eax*4-0x3ffdd2e0]
c0010563:	53                   	push   ebx
c0010564:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010567:	83 c4 20             	add    esp,0x20
c001056a:	83 f8 08             	cmp    eax,0x8
c001056d:	75 12                	jne    c0010581 <sysFormatDisk(regs*)+0x43>
c001056f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010572:	85 db                	test   ebx,ebx
c0010574:	75 d7                	jne    c001054d <sysFormatDisk(regs*)+0xf>
c0010576:	59                   	pop    ecx
c0010577:	b8 03 00 00 00       	mov    eax,0x3
c001057c:	31 d2                	xor    edx,edx
c001057e:	5b                   	pop    ebx
c001057f:	5e                   	pop    esi
c0010580:	c3                   	ret    
c0010581:	85 c0                	test   eax,eax
c0010583:	74 1b                	je     c00105a0 <sysFormatDisk(regs*)+0x62>
c0010585:	83 f8 09             	cmp    eax,0x9
c0010588:	74 0b                	je     c0010595 <sysFormatDisk(regs*)+0x57>
c001058a:	59                   	pop    ecx
c001058b:	b8 02 00 00 00       	mov    eax,0x2
c0010590:	31 d2                	xor    edx,edx
c0010592:	5b                   	pop    ebx
c0010593:	5e                   	pop    esi
c0010594:	c3                   	ret    
c0010595:	59                   	pop    ecx
c0010596:	b8 01 00 00 00       	mov    eax,0x1
c001059b:	31 d2                	xor    edx,edx
c001059d:	5b                   	pop    ebx
c001059e:	5e                   	pop    esi
c001059f:	c3                   	ret    
c00105a0:	59                   	pop    ecx
c00105a1:	31 c0                	xor    eax,eax
c00105a3:	31 d2                	xor    edx,edx
c00105a5:	5b                   	pop    ebx
c00105a6:	5e                   	pop    esi
c00105a7:	c3                   	ret    

c00105a8 <sysSetDiskVolumeLabel(regs*)>:
c00105a8:	56                   	push   esi
c00105a9:	53                   	push   ebx
c00105aa:	53                   	push   ebx
c00105ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00105af:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00105b2:	83 f8 19             	cmp    eax,0x19
c00105b5:	77 2d                	ja     c00105e4 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00105b7:	8b 0c 85 20 2d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd2e0]
c00105be:	85 c9                	test   ecx,ecx
c00105c0:	74 22                	je     c00105e4 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00105c2:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00105c5:	85 db                	test   ebx,ebx
c00105c7:	74 1b                	je     c00105e4 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00105c9:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00105cf:	85 d2                	test   edx,edx
c00105d1:	74 11                	je     c00105e4 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00105d3:	8b 32                	mov    esi,DWORD PTR [edx]
c00105d5:	53                   	push   ebx
c00105d6:	50                   	push   eax
c00105d7:	51                   	push   ecx
c00105d8:	52                   	push   edx
c00105d9:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00105dc:	83 c4 10             	add    esp,0x10
c00105df:	99                   	cdq    
c00105e0:	59                   	pop    ecx
c00105e1:	5b                   	pop    ebx
c00105e2:	5e                   	pop    esi
c00105e3:	c3                   	ret    
c00105e4:	59                   	pop    ecx
c00105e5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00105ea:	ba ff ff ff ff       	mov    edx,0xffffffff
c00105ef:	5b                   	pop    ebx
c00105f0:	5e                   	pop    esi
c00105f1:	c3                   	ret    

c00105f2 <sysGetDiskVolumeLabel(regs*)>:
c00105f2:	57                   	push   edi
c00105f3:	56                   	push   esi
c00105f4:	53                   	push   ebx
c00105f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105f9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00105fc:	83 fa 19             	cmp    edx,0x19
c00105ff:	77 38                	ja     c0010639 <sysGetDiskVolumeLabel(regs*)+0x47>
c0010601:	8b 0c 95 20 2d 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdd2e0]
c0010608:	85 c9                	test   ecx,ecx
c001060a:	74 2d                	je     c0010639 <sysGetDiskVolumeLabel(regs*)+0x47>
c001060c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001060f:	85 db                	test   ebx,ebx
c0010611:	74 26                	je     c0010639 <sysGetDiskVolumeLabel(regs*)+0x47>
c0010613:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010616:	85 f6                	test   esi,esi
c0010618:	74 1f                	je     c0010639 <sysGetDiskVolumeLabel(regs*)+0x47>
c001061a:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0010620:	85 c0                	test   eax,eax
c0010622:	74 15                	je     c0010639 <sysGetDiskVolumeLabel(regs*)+0x47>
c0010624:	83 ec 0c             	sub    esp,0xc
c0010627:	8b 38                	mov    edi,DWORD PTR [eax]
c0010629:	56                   	push   esi
c001062a:	53                   	push   ebx
c001062b:	52                   	push   edx
c001062c:	51                   	push   ecx
c001062d:	50                   	push   eax
c001062e:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010631:	83 c4 20             	add    esp,0x20
c0010634:	99                   	cdq    
c0010635:	5b                   	pop    ebx
c0010636:	5e                   	pop    esi
c0010637:	5f                   	pop    edi
c0010638:	c3                   	ret    
c0010639:	5b                   	pop    ebx
c001063a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001063f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010644:	5e                   	pop    esi
c0010645:	5f                   	pop    edi
c0010646:	c3                   	ret    

c0010647 <sysShutdown(regs*)>:
c0010647:	83 ec 0c             	sub    esp,0xc
c001064a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001064e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010651:	85 c0                	test   eax,eax
c0010653:	74 18                	je     c001066d <sysShutdown(regs*)+0x26>
c0010655:	83 f8 01             	cmp    eax,0x1
c0010658:	74 38                	je     c0010692 <sysShutdown(regs*)+0x4b>
c001065a:	83 f8 02             	cmp    eax,0x2
c001065d:	74 24                	je     c0010683 <sysShutdown(regs*)+0x3c>
c001065f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010664:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010669:	83 c4 0c             	add    esp,0xc
c001066c:	c3                   	ret    
c001066d:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c0010672:	8b 10                	mov    edx,DWORD PTR [eax]
c0010674:	6a 00                	push   0x0
c0010676:	6a 00                	push   0x0
c0010678:	6a 00                	push   0x0
c001067a:	50                   	push   eax
c001067b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001067e:	83 c4 10             	add    esp,0x10
c0010681:	eb dc                	jmp    c001065f <sysShutdown(regs*)+0x18>
c0010683:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c0010688:	8b 10                	mov    edx,DWORD PTR [eax]
c001068a:	6a 00                	push   0x0
c001068c:	6a 00                	push   0x0
c001068e:	6a 01                	push   0x1
c0010690:	eb e8                	jmp    c001067a <sysShutdown(regs*)+0x33>
c0010692:	a1 a0 2d 02 c0       	mov    eax,ds:0xc0022da0
c0010697:	85 c0                	test   eax,eax
c0010699:	74 02                	je     c001069d <sysShutdown(regs*)+0x56>
c001069b:	ff d0                	call   eax
c001069d:	31 c0                	xor    eax,eax
c001069f:	31 d2                	xor    edx,edx
c00106a1:	83 c4 0c             	add    esp,0xc
c00106a4:	c3                   	ret    

c00106a5 <sysCallRealpath(regs*)>:
c00106a5:	83 ec 0c             	sub    esp,0xc
c00106a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ac:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00106af:	85 d2                	test   edx,edx
c00106b1:	74 07                	je     c00106ba <sysCallRealpath(regs*)+0x15>
c00106b3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00106b6:	85 c0                	test   eax,eax
c00106b8:	75 0b                	jne    c00106c5 <sysCallRealpath(regs*)+0x20>
c00106ba:	b8 01 00 00 00       	mov    eax,0x1
c00106bf:	31 d2                	xor    edx,edx
c00106c1:	83 c4 0c             	add    esp,0xc
c00106c4:	c3                   	ret    
c00106c5:	51                   	push   ecx
c00106c6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00106cc:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00106cf:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00106d5:	51                   	push   ecx
c00106d6:	52                   	push   edx
c00106d7:	50                   	push   eax
c00106d8:	e8 eb 97 ff ff       	call   c0009ec8 <Fs::standardiseFiles(char*, char const*, char const*)>
c00106dd:	83 c4 10             	add    esp,0x10
c00106e0:	31 c0                	xor    eax,eax
c00106e2:	31 d2                	xor    edx,edx
c00106e4:	83 c4 0c             	add    esp,0xc
c00106e7:	c3                   	ret    

c00106e8 <sysCallReadDir(regs*)>:
c00106e8:	53                   	push   ebx
c00106e9:	83 ec 18             	sub    esp,0x18
c00106ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00106f0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00106f3:	83 f8 02             	cmp    eax,0x2
c00106f6:	76 60                	jbe    c0010758 <sysCallReadDir(regs*)+0x70>
c00106f8:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00106ff:	77 48                	ja     c0010749 <sysCallReadDir(regs*)+0x61>
c0010701:	83 ec 0c             	sub    esp,0xc
c0010704:	50                   	push   eax
c0010705:	e8 45 80 ff ff       	call   c000874f <getFromFileDescriptor(int)>
c001070a:	83 c4 10             	add    esp,0x10
c001070d:	85 c0                	test   eax,eax
c001070f:	74 38                	je     c0010749 <sysCallReadDir(regs*)+0x61>
c0010711:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010719:	83 ec 0c             	sub    esp,0xc
c001071c:	8b 10                	mov    edx,DWORD PTR [eax]
c001071e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010722:	51                   	push   ecx
c0010723:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010726:	6a 00                	push   0x0
c0010728:	68 10 01 00 00       	push   0x110
c001072d:	50                   	push   eax
c001072e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010731:	83 c4 20             	add    esp,0x20
c0010734:	85 c0                	test   eax,eax
c0010736:	74 29                	je     c0010761 <sysCallReadDir(regs*)+0x79>
c0010738:	83 f8 07             	cmp    eax,0x7
c001073b:	74 1b                	je     c0010758 <sysCallReadDir(regs*)+0x70>
c001073d:	b8 02 00 00 00       	mov    eax,0x2
c0010742:	31 d2                	xor    edx,edx
c0010744:	83 c4 18             	add    esp,0x18
c0010747:	5b                   	pop    ebx
c0010748:	c3                   	ret    
c0010749:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001074e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010753:	83 c4 18             	add    esp,0x18
c0010756:	5b                   	pop    ebx
c0010757:	c3                   	ret    
c0010758:	b8 01 00 00 00       	mov    eax,0x1
c001075d:	31 d2                	xor    edx,edx
c001075f:	eb e3                	jmp    c0010744 <sysCallReadDir(regs*)+0x5c>
c0010761:	31 c0                	xor    eax,eax
c0010763:	31 d2                	xor    edx,edx
c0010765:	eb dd                	jmp    c0010744 <sysCallReadDir(regs*)+0x5c>

c0010767 <sysCallIsATTY(regs*)>:
c0010767:	83 ec 0c             	sub    esp,0xc
c001076a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001076e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010771:	83 f8 02             	cmp    eax,0x2
c0010774:	76 07                	jbe    c001077d <sysCallIsATTY(regs*)+0x16>
c0010776:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001077b:	75 26                	jne    c00107a3 <sysCallIsATTY(regs*)+0x3c>
c001077d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010782:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010785:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001078b:	85 c0                	test   eax,eax
c001078d:	74 24                	je     c00107b3 <sysCallIsATTY(regs*)+0x4c>
c001078f:	83 ec 0c             	sub    esp,0xc
c0010792:	8b 10                	mov    edx,DWORD PTR [eax]
c0010794:	50                   	push   eax
c0010795:	ff 12                	call   DWORD PTR [edx]
c0010797:	31 d2                	xor    edx,edx
c0010799:	0f b6 c0             	movzx  eax,al
c001079c:	83 c4 10             	add    esp,0x10
c001079f:	83 c4 0c             	add    esp,0xc
c00107a2:	c3                   	ret    
c00107a3:	83 ec 0c             	sub    esp,0xc
c00107a6:	50                   	push   eax
c00107a7:	e8 a3 7f ff ff       	call   c000874f <getFromFileDescriptor(int)>
c00107ac:	83 c4 10             	add    esp,0x10
c00107af:	85 c0                	test   eax,eax
c00107b1:	75 dc                	jne    c001078f <sysCallIsATTY(regs*)+0x28>
c00107b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00107b8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00107bd:	83 c4 0c             	add    esp,0xc
c00107c0:	c3                   	ret    

c00107c1 <sysCallSeek(regs*)>:
c00107c1:	53                   	push   ebx
c00107c2:	83 ec 08             	sub    esp,0x8
c00107c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107c9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00107cc:	8d 50 fd             	lea    edx,[eax-0x3]
c00107cf:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00107d5:	77 32                	ja     c0010809 <sysCallSeek(regs*)+0x48>
c00107d7:	83 ec 0c             	sub    esp,0xc
c00107da:	50                   	push   eax
c00107db:	e8 6f 7f ff ff       	call   c000874f <getFromFileDescriptor(int)>
c00107e0:	83 c4 0c             	add    esp,0xc
c00107e3:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00107e6:	31 db                	xor    ebx,ebx
c00107e8:	53                   	push   ebx
c00107e9:	51                   	push   ecx
c00107ea:	50                   	push   eax
c00107eb:	e8 fa 99 ff ff       	call   c000a1ea <File::seek(unsigned long long)>
c00107f0:	83 c4 10             	add    esp,0x10
c00107f3:	85 c0                	test   eax,eax
c00107f5:	0f 95 c0             	setne  al
c00107f8:	31 d2                	xor    edx,edx
c00107fa:	0f b6 c0             	movzx  eax,al
c00107fd:	f7 d8                	neg    eax
c00107ff:	83 d2 00             	adc    edx,0x0
c0010802:	83 c4 08             	add    esp,0x8
c0010805:	f7 da                	neg    edx
c0010807:	5b                   	pop    ebx
c0010808:	c3                   	ret    
c0010809:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001080e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010813:	83 c4 08             	add    esp,0x8
c0010816:	5b                   	pop    ebx
c0010817:	c3                   	ret    

c0010818 <sysCallTell(regs*)>:
c0010818:	53                   	push   ebx
c0010819:	83 ec 08             	sub    esp,0x8
c001081c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010820:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010823:	83 f8 02             	cmp    eax,0x2
c0010826:	76 4d                	jbe    c0010875 <sysCallTell(regs*)+0x5d>
c0010828:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001082d:	76 19                	jbe    c0010848 <sysCallTell(regs*)+0x30>
c001082f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010832:	31 d2                	xor    edx,edx
c0010834:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001083a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010841:	31 c0                	xor    eax,eax
c0010843:	83 c4 08             	add    esp,0x8
c0010846:	5b                   	pop    ebx
c0010847:	c3                   	ret    
c0010848:	83 ec 0c             	sub    esp,0xc
c001084b:	50                   	push   eax
c001084c:	e8 fe 7e ff ff       	call   c000874f <getFromFileDescriptor(int)>
c0010851:	5a                   	pop    edx
c0010852:	59                   	pop    ecx
c0010853:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010856:	50                   	push   eax
c0010857:	e8 e4 99 ff ff       	call   c000a240 <File::tell(unsigned long long*)>
c001085c:	83 c4 10             	add    esp,0x10
c001085f:	85 c0                	test   eax,eax
c0010861:	0f 95 c0             	setne  al
c0010864:	31 d2                	xor    edx,edx
c0010866:	0f b6 c0             	movzx  eax,al
c0010869:	f7 d8                	neg    eax
c001086b:	83 d2 00             	adc    edx,0x0
c001086e:	83 c4 08             	add    esp,0x8
c0010871:	f7 da                	neg    edx
c0010873:	5b                   	pop    ebx
c0010874:	c3                   	ret    
c0010875:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001087a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001087f:	83 c4 08             	add    esp,0x8
c0010882:	5b                   	pop    ebx
c0010883:	c3                   	ret    

c0010884 <sysCallSize(regs*)>:
c0010884:	53                   	push   ebx
c0010885:	83 ec 18             	sub    esp,0x18
c0010888:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001088c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001088f:	83 f8 02             	cmp    eax,0x2
c0010892:	76 53                	jbe    c00108e7 <sysCallSize(regs*)+0x63>
c0010894:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010899:	76 19                	jbe    c00108b4 <sysCallSize(regs*)+0x30>
c001089b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001089e:	31 d2                	xor    edx,edx
c00108a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00108a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00108ad:	31 c0                	xor    eax,eax
c00108af:	83 c4 18             	add    esp,0x18
c00108b2:	5b                   	pop    ebx
c00108b3:	c3                   	ret    
c00108b4:	83 ec 0c             	sub    esp,0xc
c00108b7:	50                   	push   eax
c00108b8:	e8 92 7e ff ff       	call   c000874f <getFromFileDescriptor(int)>
c00108bd:	83 c4 0c             	add    esp,0xc
c00108c0:	8d 54 24 13          	lea    edx,[esp+0x13]
c00108c4:	52                   	push   edx
c00108c5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00108c8:	50                   	push   eax
c00108c9:	e8 0a 9b ff ff       	call   c000a3d8 <File::stat(unsigned long long*, bool*)>
c00108ce:	83 c4 10             	add    esp,0x10
c00108d1:	85 c0                	test   eax,eax
c00108d3:	0f 95 c0             	setne  al
c00108d6:	31 d2                	xor    edx,edx
c00108d8:	0f b6 c0             	movzx  eax,al
c00108db:	f7 d8                	neg    eax
c00108dd:	83 d2 00             	adc    edx,0x0
c00108e0:	83 c4 18             	add    esp,0x18
c00108e3:	f7 da                	neg    edx
c00108e5:	5b                   	pop    ebx
c00108e6:	c3                   	ret    
c00108e7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00108ec:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108f1:	83 c4 18             	add    esp,0x18
c00108f4:	5b                   	pop    ebx
c00108f5:	c3                   	ret    

c00108f6 <sysCallSizeFromFilename(regs*)>:
c00108f6:	57                   	push   edi
c00108f7:	56                   	push   esi
c00108f8:	53                   	push   ebx
c00108f9:	83 ec 20             	sub    esp,0x20
c00108fc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010900:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010903:	83 fb 02             	cmp    ebx,0x2
c0010906:	0f 86 88 00 00 00    	jbe    c0010994 <sysCallSizeFromFilename(regs*)+0x9e>
c001090c:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010912:	76 1b                	jbe    c001092f <sysCallSizeFromFilename(regs*)+0x39>
c0010914:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010917:	31 d2                	xor    edx,edx
c0010919:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001091f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010926:	83 c4 20             	add    esp,0x20
c0010929:	31 c0                	xor    eax,eax
c001092b:	5b                   	pop    ebx
c001092c:	5e                   	pop    esi
c001092d:	5f                   	pop    edi
c001092e:	c3                   	ret    
c001092f:	83 ec 0c             	sub    esp,0xc
c0010932:	68 14 01 00 00       	push   0x114
c0010937:	e8 41 64 ff ff       	call   c0006d7d <malloc>
c001093c:	83 c4 0c             	add    esp,0xc
c001093f:	89 c7                	mov    edi,eax
c0010941:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010946:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010949:	53                   	push   ebx
c001094a:	57                   	push   edi
c001094b:	e8 22 97 ff ff       	call   c000a072 <File::File(char const*, Process*)>
c0010950:	83 c4 0c             	add    esp,0xc
c0010953:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010957:	50                   	push   eax
c0010958:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001095b:	57                   	push   edi
c001095c:	e8 77 9a ff ff       	call   c000a3d8 <File::stat(unsigned long long*, bool*)>
c0010961:	83 c4 10             	add    esp,0x10
c0010964:	85 ff                	test   edi,edi
c0010966:	74 14                	je     c001097c <sysCallSizeFromFilename(regs*)+0x86>
c0010968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001096c:	8b 17                	mov    edx,DWORD PTR [edi]
c001096e:	83 ec 0c             	sub    esp,0xc
c0010971:	57                   	push   edi
c0010972:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010975:	83 c4 10             	add    esp,0x10
c0010978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001097c:	85 c0                	test   eax,eax
c001097e:	0f 95 c0             	setne  al
c0010981:	31 d2                	xor    edx,edx
c0010983:	0f b6 c0             	movzx  eax,al
c0010986:	f7 d8                	neg    eax
c0010988:	83 d2 00             	adc    edx,0x0
c001098b:	83 c4 20             	add    esp,0x20
c001098e:	f7 da                	neg    edx
c0010990:	5b                   	pop    ebx
c0010991:	5e                   	pop    esi
c0010992:	5f                   	pop    edi
c0010993:	c3                   	ret    
c0010994:	83 c4 20             	add    esp,0x20
c0010997:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001099c:	5b                   	pop    ebx
c001099d:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109a2:	5e                   	pop    esi
c00109a3:	5f                   	pop    edi
c00109a4:	c3                   	ret    

c00109a5 <sysCallClose(regs*)>:
c00109a5:	53                   	push   ebx
c00109a6:	83 ec 08             	sub    esp,0x8
c00109a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ad:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00109b0:	83 f8 02             	cmp    eax,0x2
c00109b3:	76 41                	jbe    c00109f6 <sysCallClose(regs*)+0x51>
c00109b5:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00109bb:	83 fa 01             	cmp    edx,0x1
c00109be:	76 2d                	jbe    c00109ed <sysCallClose(regs*)+0x48>
c00109c0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00109c5:	77 2f                	ja     c00109f6 <sysCallClose(regs*)+0x51>
c00109c7:	83 ec 0c             	sub    esp,0xc
c00109ca:	50                   	push   eax
c00109cb:	e8 7f 7d ff ff       	call   c000874f <getFromFileDescriptor(int)>
c00109d0:	89 c3                	mov    ebx,eax
c00109d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00109d5:	e8 b0 97 ff ff       	call   c000a18a <File::close()>
c00109da:	83 c4 10             	add    esp,0x10
c00109dd:	85 db                	test   ebx,ebx
c00109df:	74 0c                	je     c00109ed <sysCallClose(regs*)+0x48>
c00109e1:	83 ec 0c             	sub    esp,0xc
c00109e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00109e6:	53                   	push   ebx
c00109e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00109ea:	83 c4 10             	add    esp,0x10
c00109ed:	31 c0                	xor    eax,eax
c00109ef:	31 d2                	xor    edx,edx
c00109f1:	83 c4 08             	add    esp,0x8
c00109f4:	5b                   	pop    ebx
c00109f5:	c3                   	ret    
c00109f6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109fb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a00:	83 c4 08             	add    esp,0x8
c0010a03:	5b                   	pop    ebx
c0010a04:	c3                   	ret    

c0010a05 <sysCallOpenDir(regs*)>:
c0010a05:	56                   	push   esi
c0010a06:	53                   	push   ebx
c0010a07:	53                   	push   ebx
c0010a08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a0c:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0010a0f:	85 f6                	test   esi,esi
c0010a11:	74 59                	je     c0010a6c <sysCallOpenDir(regs*)+0x67>
c0010a13:	83 ec 0c             	sub    esp,0xc
c0010a16:	68 14 01 00 00       	push   0x114
c0010a1b:	e8 5d 63 ff ff       	call   c0006d7d <malloc>
c0010a20:	83 c4 0c             	add    esp,0xc
c0010a23:	89 c6                	mov    esi,eax
c0010a25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a2a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010a2d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010a30:	56                   	push   esi
c0010a31:	e8 60 9b ff ff       	call   c000a596 <Directory::Directory(char const*, Process*)>
c0010a36:	83 c4 10             	add    esp,0x10
c0010a39:	85 f6                	test   esi,esi
c0010a3b:	74 2f                	je     c0010a6c <sysCallOpenDir(regs*)+0x67>
c0010a3d:	83 ec 0c             	sub    esp,0xc
c0010a40:	56                   	push   esi
c0010a41:	e8 0a 9c ff ff       	call   c000a650 <Directory::open()>
c0010a46:	83 c4 10             	add    esp,0x10
c0010a49:	85 c0                	test   eax,eax
c0010a4b:	75 1f                	jne    c0010a6c <sysCallOpenDir(regs*)+0x67>
c0010a4d:	83 ec 0c             	sub    esp,0xc
c0010a50:	56                   	push   esi
c0010a51:	e8 04 7a ff ff       	call   c000845a <UnixFile::getFileDescriptor()>
c0010a56:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010a59:	83 c4 10             	add    esp,0x10
c0010a5c:	89 02                	mov    DWORD PTR [edx],eax
c0010a5e:	c1 f8 1f             	sar    eax,0x1f
c0010a61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010a64:	31 c0                	xor    eax,eax
c0010a66:	59                   	pop    ecx
c0010a67:	31 d2                	xor    edx,edx
c0010a69:	5b                   	pop    ebx
c0010a6a:	5e                   	pop    esi
c0010a6b:	c3                   	ret    
c0010a6c:	59                   	pop    ecx
c0010a6d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a72:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a77:	5b                   	pop    ebx
c0010a78:	5e                   	pop    esi
c0010a79:	c3                   	ret    

c0010a7a <sysCallCloseDir(regs*)>:
c0010a7a:	53                   	push   ebx
c0010a7b:	83 ec 08             	sub    esp,0x8
c0010a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a82:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010a85:	8d 50 fd             	lea    edx,[eax-0x3]
c0010a88:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010a8e:	77 2f                	ja     c0010abf <sysCallCloseDir(regs*)+0x45>
c0010a90:	83 ec 0c             	sub    esp,0xc
c0010a93:	50                   	push   eax
c0010a94:	e8 b6 7c ff ff       	call   c000874f <getFromFileDescriptor(int)>
c0010a99:	89 c3                	mov    ebx,eax
c0010a9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a9e:	e8 09 9c ff ff       	call   c000a6ac <Directory::close()>
c0010aa3:	83 c4 10             	add    esp,0x10
c0010aa6:	85 db                	test   ebx,ebx
c0010aa8:	74 0c                	je     c0010ab6 <sysCallCloseDir(regs*)+0x3c>
c0010aaa:	83 ec 0c             	sub    esp,0xc
c0010aad:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010aaf:	53                   	push   ebx
c0010ab0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010ab3:	83 c4 10             	add    esp,0x10
c0010ab6:	31 c0                	xor    eax,eax
c0010ab8:	31 d2                	xor    edx,edx
c0010aba:	83 c4 08             	add    esp,0x8
c0010abd:	5b                   	pop    ebx
c0010abe:	c3                   	ret    
c0010abf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ac4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ac9:	83 c4 08             	add    esp,0x8
c0010acc:	5b                   	pop    ebx
c0010acd:	c3                   	ret    

c0010ace <sysCallMakeDir(regs*)>:
c0010ace:	56                   	push   esi
c0010acf:	53                   	push   ebx
c0010ad0:	83 ec 10             	sub    esp,0x10
c0010ad3:	68 14 01 00 00       	push   0x114
c0010ad8:	e8 a0 62 ff ff       	call   c0006d7d <malloc>
c0010add:	83 c4 0c             	add    esp,0xc
c0010ae0:	89 c3                	mov    ebx,eax
c0010ae2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ae7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010aea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010aee:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0010af1:	53                   	push   ebx
c0010af2:	e8 9f 9a ff ff       	call   c000a596 <Directory::Directory(char const*, Process*)>
c0010af7:	83 c4 10             	add    esp,0x10
c0010afa:	85 db                	test   ebx,ebx
c0010afc:	74 32                	je     c0010b30 <sysCallMakeDir(regs*)+0x62>
c0010afe:	83 ec 0c             	sub    esp,0xc
c0010b01:	53                   	push   ebx
c0010b02:	e8 29 9d ff ff       	call   c000a830 <Directory::create()>
c0010b07:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b0a:	89 c6                	mov    esi,eax
c0010b0c:	e8 9b 9b ff ff       	call   c000a6ac <Directory::close()>
c0010b11:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010b13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b16:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010b19:	83 c4 10             	add    esp,0x10
c0010b1c:	31 c0                	xor    eax,eax
c0010b1e:	59                   	pop    ecx
c0010b1f:	85 f6                	test   esi,esi
c0010b21:	5b                   	pop    ebx
c0010b22:	0f 95 c0             	setne  al
c0010b25:	5e                   	pop    esi
c0010b26:	31 d2                	xor    edx,edx
c0010b28:	f7 d8                	neg    eax
c0010b2a:	83 d2 00             	adc    edx,0x0
c0010b2d:	f7 da                	neg    edx
c0010b2f:	c3                   	ret    
c0010b30:	59                   	pop    ecx
c0010b31:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b36:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b3b:	5b                   	pop    ebx
c0010b3c:	5e                   	pop    esi
c0010b3d:	c3                   	ret    

c0010b3e <sysCallWait(regs*)>:
c0010b3e:	83 ec 10             	sub    esp,0x10
c0010b41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b45:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0010b48:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0010b4b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010b4e:	e8 35 23 00 00       	call   c0012e88 <waitTask(int, int*, int)>
c0010b53:	83 c4 1c             	add    esp,0x1c
c0010b56:	99                   	cdq    
c0010b57:	c3                   	ret    

c0010b58 <sysCallNotImpl(regs*)>:
c0010b58:	83 ec 18             	sub    esp,0x18
c0010b5b:	68 6d f1 01 c0       	push   0xc001f16d
c0010b60:	e8 78 ec ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0010b65:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b6a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b6f:	83 c4 1c             	add    esp,0x1c
c0010b72:	c3                   	ret    

c0010b73 <sysPanic(regs*)>:
c0010b73:	83 ec 18             	sub    esp,0x18
c0010b76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010b7a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0010b7d:	e8 5b ec ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0010b82:	b8 01 00 00 00       	mov    eax,0x1
c0010b87:	31 d2                	xor    edx,edx
c0010b89:	83 c4 1c             	add    esp,0x1c
c0010b8c:	c3                   	ret    

c0010b8d <sysCallRmdir(regs*)>:
c0010b8d:	56                   	push   esi
c0010b8e:	53                   	push   ebx
c0010b8f:	83 ec 20             	sub    esp,0x20
c0010b92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010b96:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010b99:	68 14 01 00 00       	push   0x114
c0010b9e:	e8 da 61 ff ff       	call   c0006d7d <malloc>
c0010ba3:	83 c4 0c             	add    esp,0xc
c0010ba6:	89 c3                	mov    ebx,eax
c0010ba8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010bad:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010bb0:	56                   	push   esi
c0010bb1:	53                   	push   ebx
c0010bb2:	e8 bb 94 ff ff       	call   c000a072 <File::File(char const*, Process*)>
c0010bb7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bba:	e8 e5 96 ff ff       	call   c000a2a4 <File::unlink()>
c0010bbf:	83 c4 10             	add    esp,0x10
c0010bc2:	85 db                	test   ebx,ebx
c0010bc4:	74 14                	je     c0010bda <sysCallRmdir(regs*)+0x4d>
c0010bc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010bca:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010bcc:	83 ec 0c             	sub    esp,0xc
c0010bcf:	53                   	push   ebx
c0010bd0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010bd3:	83 c4 10             	add    esp,0x10
c0010bd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bda:	85 c0                	test   eax,eax
c0010bdc:	0f 95 c0             	setne  al
c0010bdf:	31 d2                	xor    edx,edx
c0010be1:	0f b6 c0             	movzx  eax,al
c0010be4:	f7 d8                	neg    eax
c0010be6:	83 d2 00             	adc    edx,0x0
c0010be9:	83 c4 14             	add    esp,0x14
c0010bec:	f7 da                	neg    edx
c0010bee:	5b                   	pop    ebx
c0010bef:	5e                   	pop    esi
c0010bf0:	c3                   	ret    

c0010bf1 <sysCallUnlink(regs*)>:
c0010bf1:	56                   	push   esi
c0010bf2:	53                   	push   ebx
c0010bf3:	83 ec 20             	sub    esp,0x20
c0010bf6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010bfa:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010bfd:	68 14 01 00 00       	push   0x114
c0010c02:	e8 76 61 ff ff       	call   c0006d7d <malloc>
c0010c07:	83 c4 0c             	add    esp,0xc
c0010c0a:	89 c3                	mov    ebx,eax
c0010c0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c11:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010c14:	56                   	push   esi
c0010c15:	53                   	push   ebx
c0010c16:	e8 57 94 ff ff       	call   c000a072 <File::File(char const*, Process*)>
c0010c1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c1e:	e8 81 96 ff ff       	call   c000a2a4 <File::unlink()>
c0010c23:	83 c4 10             	add    esp,0x10
c0010c26:	85 db                	test   ebx,ebx
c0010c28:	74 14                	je     c0010c3e <sysCallUnlink(regs*)+0x4d>
c0010c2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c2e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010c30:	83 ec 0c             	sub    esp,0xc
c0010c33:	53                   	push   ebx
c0010c34:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010c37:	83 c4 10             	add    esp,0x10
c0010c3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c3e:	85 c0                	test   eax,eax
c0010c40:	0f 95 c0             	setne  al
c0010c43:	31 d2                	xor    edx,edx
c0010c45:	0f b6 c0             	movzx  eax,al
c0010c48:	f7 d8                	neg    eax
c0010c4a:	83 d2 00             	adc    edx,0x0
c0010c4d:	83 c4 14             	add    esp,0x14
c0010c50:	f7 da                	neg    edx
c0010c52:	5b                   	pop    ebx
c0010c53:	5e                   	pop    esi
c0010c54:	c3                   	ret    

c0010c55 <sysCallGetArgv(regs*)>:
c0010c55:	83 ec 0c             	sub    esp,0xc
c0010c58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010c5c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010c5f:	85 c0                	test   eax,eax
c0010c61:	78 2b                	js     c0010c8e <sysCallGetArgv(regs*)+0x39>
c0010c63:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010c69:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010c6c:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010c72:	7d 1a                	jge    c0010c8e <sysCallGetArgv(regs*)+0x39>
c0010c74:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010c7b:	85 c0                	test   eax,eax
c0010c7d:	74 17                	je     c0010c96 <sysCallGetArgv(regs*)+0x41>
c0010c7f:	83 ec 08             	sub    esp,0x8
c0010c82:	50                   	push   eax
c0010c83:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0010c86:	e8 d9 f8 fe ff       	call   c0000564 <strcpy>
c0010c8b:	83 c4 10             	add    esp,0x10
c0010c8e:	31 c0                	xor    eax,eax
c0010c90:	31 d2                	xor    edx,edx
c0010c92:	83 c4 0c             	add    esp,0xc
c0010c95:	c3                   	ret    
c0010c96:	b8 01 00 00 00       	mov    eax,0x1
c0010c9b:	31 d2                	xor    edx,edx
c0010c9d:	83 c4 0c             	add    esp,0xc
c0010ca0:	c3                   	ret    

c0010ca1 <sysCallUSleep(regs*)>:
c0010ca1:	83 ec 1c             	sub    esp,0x1c
c0010ca4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010ca8:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010cab:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010cae:	6a 00                	push   0x0
c0010cb0:	6a 64                	push   0x64
c0010cb2:	52                   	push   edx
c0010cb3:	50                   	push   eax
c0010cb4:	e8 37 bc 00 00       	call   c001c8f0 <__udivdi3>
c0010cb9:	83 c4 14             	add    esp,0x14
c0010cbc:	50                   	push   eax
c0010cbd:	e8 96 22 00 00       	call   c0012f58 <milliTenthSleep(unsigned int)>
c0010cc2:	31 c0                	xor    eax,eax
c0010cc4:	31 d2                	xor    edx,edx
c0010cc6:	83 c4 1c             	add    esp,0x1c
c0010cc9:	c3                   	ret    

c0010cca <sysCallSpawn(regs*)>:
c0010cca:	56                   	push   esi
c0010ccb:	53                   	push   ebx
c0010ccc:	50                   	push   eax
c0010ccd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cd1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cd4:	85 c0                	test   eax,eax
c0010cd6:	75 08                	jne    c0010ce0 <sysCallSpawn(regs*)+0x16>
c0010cd8:	59                   	pop    ecx
c0010cd9:	31 c0                	xor    eax,eax
c0010cdb:	31 d2                	xor    edx,edx
c0010cdd:	5b                   	pop    ebx
c0010cde:	5e                   	pop    esi
c0010cdf:	c3                   	ret    
c0010ce0:	83 ec 0c             	sub    esp,0xc
c0010ce3:	68 1f 07 00 00       	push   0x71f
c0010ce8:	e8 90 60 ff ff       	call   c0006d7d <malloc>
c0010ced:	83 c4 10             	add    esp,0x10
c0010cf0:	89 c6                	mov    esi,eax
c0010cf2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010cf5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010cf8:	85 c0                	test   eax,eax
c0010cfa:	75 32                	jne    c0010d2e <sysCallSpawn(regs*)+0x64>
c0010cfc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d01:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d04:	52                   	push   edx
c0010d05:	50                   	push   eax
c0010d06:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010d09:	56                   	push   esi
c0010d0a:	e8 41 19 00 00       	call   c0012650 <Process::Process(char const*, Process*, char**)>
c0010d0f:	83 c4 10             	add    esp,0x10
c0010d12:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0010d19:	75 bd                	jne    c0010cd8 <sysCallSpawn(regs*)+0xe>
c0010d1b:	83 ec 0c             	sub    esp,0xc
c0010d1e:	56                   	push   esi
c0010d1f:	e8 18 1e 00 00       	call   c0012b3c <Process::createUserThread()>
c0010d24:	8b 06                	mov    eax,DWORD PTR [esi]
c0010d26:	83 c4 10             	add    esp,0x10
c0010d29:	99                   	cdq    
c0010d2a:	59                   	pop    ecx
c0010d2b:	5b                   	pop    ebx
c0010d2c:	5e                   	pop    esi
c0010d2d:	c3                   	ret    
c0010d2e:	31 c0                	xor    eax,eax
c0010d30:	eb d2                	jmp    c0010d04 <sysCallSpawn(regs*)+0x3a>

c0010d32 <sysCallGetEnv(regs*)>:
c0010d32:	57                   	push   edi
c0010d33:	56                   	push   esi
c0010d34:	53                   	push   ebx
c0010d35:	83 ec 1c             	sub    esp,0x1c
c0010d38:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010d3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d41:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010d44:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010d47:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010d4a:	e8 da e9 ff ff       	call   c000f729 <Krnl::getProcessTotalEnvCount(Process*)>
c0010d4f:	83 c4 10             	add    esp,0x10
c0010d52:	39 c7                	cmp    edi,eax
c0010d54:	7c 14                	jl     c0010d6a <sysCallGetEnv(regs*)+0x38>
c0010d56:	85 f6                	test   esi,esi
c0010d58:	75 0b                	jne    c0010d65 <sysCallGetEnv(regs*)+0x33>
c0010d5a:	83 c4 10             	add    esp,0x10
c0010d5d:	31 c0                	xor    eax,eax
c0010d5f:	5b                   	pop    ebx
c0010d60:	31 d2                	xor    edx,edx
c0010d62:	5e                   	pop    esi
c0010d63:	5f                   	pop    edi
c0010d64:	c3                   	ret    
c0010d65:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010d68:	eb f0                	jmp    c0010d5a <sysCallGetEnv(regs*)+0x28>
c0010d6a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0010d6e:	52                   	push   edx
c0010d6f:	57                   	push   edi
c0010d70:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010d76:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0010d79:	50                   	push   eax
c0010d7a:	e8 ca e9 ff ff       	call   c000f749 <Krnl::getProcessEnvPair(Process*, int)>
c0010d7f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010d82:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d86:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010d8a:	83 c4 0c             	add    esp,0xc
c0010d8d:	85 c9                	test   ecx,ecx
c0010d8f:	75 23                	jne    c0010db4 <sysCallGetEnv(regs*)+0x82>
c0010d91:	83 ec 0c             	sub    esp,0xc
c0010d94:	50                   	push   eax
c0010d95:	e8 2a f7 fe ff       	call   c00004c4 <strlen>
c0010d9a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010d9d:	89 c3                	mov    ebx,eax
c0010d9f:	e8 20 f7 fe ff       	call   c00004c4 <strlen>
c0010da4:	83 c4 10             	add    esp,0x10
c0010da7:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010dab:	83 c4 10             	add    esp,0x10
c0010dae:	31 d2                	xor    edx,edx
c0010db0:	5b                   	pop    ebx
c0010db1:	5e                   	pop    esi
c0010db2:	5f                   	pop    edi
c0010db3:	c3                   	ret    
c0010db4:	83 ec 08             	sub    esp,0x8
c0010db7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010dba:	50                   	push   eax
c0010dbb:	56                   	push   esi
c0010dbc:	e8 a3 f7 fe ff       	call   c0000564 <strcpy>
c0010dc1:	58                   	pop    eax
c0010dc2:	5a                   	pop    edx
c0010dc3:	68 87 f1 01 c0       	push   0xc001f187
c0010dc8:	56                   	push   esi
c0010dc9:	e8 d6 f8 fe ff       	call   c00006a4 <strcat>
c0010dce:	59                   	pop    ecx
c0010dcf:	5b                   	pop    ebx
c0010dd0:	57                   	push   edi
c0010dd1:	56                   	push   esi
c0010dd2:	e8 cd f8 fe ff       	call   c00006a4 <strcat>
c0010dd7:	83 c4 10             	add    esp,0x10
c0010dda:	e9 7b ff ff ff       	jmp    c0010d5a <sysCallGetEnv(regs*)+0x28>

c0010ddf <sysSetFatAttrib(regs*)>:
c0010ddf:	57                   	push   edi
c0010de0:	56                   	push   esi
c0010de1:	53                   	push   ebx
c0010de2:	83 ec 1c             	sub    esp,0x1c
c0010de5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0010de9:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010dec:	68 14 01 00 00       	push   0x114
c0010df1:	e8 87 5f ff ff       	call   c0006d7d <malloc>
c0010df6:	83 c4 0c             	add    esp,0xc
c0010df9:	89 c3                	mov    ebx,eax
c0010dfb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e00:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010e03:	57                   	push   edi
c0010e04:	53                   	push   ebx
c0010e05:	e8 68 92 ff ff       	call   c000a072 <File::File(char const*, Process*)>
c0010e0a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010e0d:	83 c4 0c             	add    esp,0xc
c0010e10:	0f b6 d4             	movzx  edx,ah
c0010e13:	0f b6 c0             	movzx  eax,al
c0010e16:	52                   	push   edx
c0010e17:	50                   	push   eax
c0010e18:	53                   	push   ebx
c0010e19:	e8 20 95 ff ff       	call   c000a33e <File::chfatattr(unsigned char, unsigned char)>
c0010e1e:	83 c4 10             	add    esp,0x10
c0010e21:	85 db                	test   ebx,ebx
c0010e23:	74 14                	je     c0010e39 <sysSetFatAttrib(regs*)+0x5a>
c0010e25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e29:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010e2b:	83 ec 0c             	sub    esp,0xc
c0010e2e:	53                   	push   ebx
c0010e2f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010e32:	83 c4 10             	add    esp,0x10
c0010e35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e39:	85 c0                	test   eax,eax
c0010e3b:	0f 95 c0             	setne  al
c0010e3e:	31 d2                	xor    edx,edx
c0010e40:	0f b6 c0             	movzx  eax,al
c0010e43:	f7 d8                	neg    eax
c0010e45:	83 d2 00             	adc    edx,0x0
c0010e48:	83 c4 10             	add    esp,0x10
c0010e4b:	f7 da                	neg    edx
c0010e4d:	5b                   	pop    ebx
c0010e4e:	5e                   	pop    esi
c0010e4f:	5f                   	pop    edi
c0010e50:	c3                   	ret    

c0010e51 <sysPipe(regs*)>:
c0010e51:	57                   	push   edi
c0010e52:	56                   	push   esi
c0010e53:	53                   	push   ebx
c0010e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e58:	83 ec 0c             	sub    esp,0xc
c0010e5b:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010e5e:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010e61:	6a 20                	push   0x20
c0010e63:	e8 15 5f ff ff       	call   c0006d7d <malloc>
c0010e68:	89 c3                	mov    ebx,eax
c0010e6a:	58                   	pop    eax
c0010e6b:	5a                   	pop    edx
c0010e6c:	68 00 50 00 00       	push   0x5000
c0010e71:	53                   	push   ebx
c0010e72:	e8 ed 68 ff ff       	call   c0007764 <Pipe::Pipe(int)>
c0010e77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e7a:	e8 db 75 ff ff       	call   c000845a <UnixFile::getFileDescriptor()>
c0010e7f:	89 07                	mov    DWORD PTR [edi],eax
c0010e81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e84:	e8 d1 75 ff ff       	call   c000845a <UnixFile::getFileDescriptor()>
c0010e89:	83 c4 10             	add    esp,0x10
c0010e8c:	89 06                	mov    DWORD PTR [esi],eax
c0010e8e:	31 d2                	xor    edx,edx
c0010e90:	5b                   	pop    ebx
c0010e91:	31 c0                	xor    eax,eax
c0010e93:	5e                   	pop    esi
c0010e94:	5f                   	pop    edi
c0010e95:	c3                   	ret    

c0010e96 <sysGetUnixTime(regs*)>:
c0010e96:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c0010e9b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010ea1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010ea5:	e9 cc 9b ff ff       	jmp    c000aa76 <Clock::timeInSecondsLocal()>

c0010eaa <string_ends_with(char const*, char const*)>:
c0010eaa:	57                   	push   edi
c0010eab:	56                   	push   esi
c0010eac:	53                   	push   ebx
c0010ead:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010eb1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0010eb5:	83 ec 0c             	sub    esp,0xc
c0010eb8:	53                   	push   ebx
c0010eb9:	e8 06 f6 fe ff       	call   c00004c4 <strlen>
c0010ebe:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ec1:	89 c6                	mov    esi,eax
c0010ec3:	e8 fc f5 fe ff       	call   c00004c4 <strlen>
c0010ec8:	83 c4 10             	add    esp,0x10
c0010ecb:	39 c6                	cmp    esi,eax
c0010ecd:	7d 06                	jge    c0010ed5 <string_ends_with(char const*, char const*)+0x2b>
c0010ecf:	5b                   	pop    ebx
c0010ed0:	31 c0                	xor    eax,eax
c0010ed2:	5e                   	pop    esi
c0010ed3:	5f                   	pop    edi
c0010ed4:	c3                   	ret    
c0010ed5:	83 ec 08             	sub    esp,0x8
c0010ed8:	29 c6                	sub    esi,eax
c0010eda:	57                   	push   edi
c0010edb:	01 f3                	add    ebx,esi
c0010edd:	53                   	push   ebx
c0010ede:	e8 0d f7 fe ff       	call   c00005f0 <strcmp>
c0010ee3:	83 c4 10             	add    esp,0x10
c0010ee6:	85 c0                	test   eax,eax
c0010ee8:	5b                   	pop    ebx
c0010ee9:	0f 94 c0             	sete   al
c0010eec:	5e                   	pop    esi
c0010eed:	0f b6 c0             	movzx  eax,al
c0010ef0:	5f                   	pop    edi
c0010ef1:	c3                   	ret    

c0010ef2 <sysCallOpen(regs*)>:
c0010ef2:	56                   	push   esi
c0010ef3:	53                   	push   ebx
c0010ef4:	81 ec 04 01 00 00    	sub    esp,0x104
c0010efa:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010f01:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010f04:	85 c9                	test   ecx,ecx
c0010f06:	0f 84 ad 01 00 00    	je     c00110b9 <sysCallOpen(regs*)+0x1c7>
c0010f0c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010f0f:	85 c0                	test   eax,eax
c0010f11:	0f 84 a2 01 00 00    	je     c00110b9 <sysCallOpen(regs*)+0x1c7>
c0010f17:	52                   	push   edx
c0010f18:	68 89 f1 01 c0       	push   0xc001f189
c0010f1d:	50                   	push   eax
c0010f1e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010f22:	56                   	push   esi
c0010f23:	e8 a0 8f ff ff       	call   c0009ec8 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010f28:	89 34 24             	mov    DWORD PTR [esp],esi
c0010f2b:	e8 94 f5 fe ff       	call   c00004c4 <strlen>
c0010f30:	83 c4 10             	add    esp,0x10
c0010f33:	48                   	dec    eax
c0010f34:	74 1d                	je     c0010f53 <sysCallOpen(regs*)+0x61>
c0010f36:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0010f39:	eb 0f                	jmp    c0010f4a <sysCallOpen(regs*)+0x58>
c0010f3b:	80 fa 3a             	cmp    dl,0x3a
c0010f3e:	74 0f                	je     c0010f4f <sysCallOpen(regs*)+0x5d>
c0010f40:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010f44:	48                   	dec    eax
c0010f45:	74 0c                	je     c0010f53 <sysCallOpen(regs*)+0x61>
c0010f47:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0010f4a:	80 fa 2e             	cmp    dl,0x2e
c0010f4d:	75 ec                	jne    c0010f3b <sysCallOpen(regs*)+0x49>
c0010f4f:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010f53:	83 ec 08             	sub    esp,0x8
c0010f56:	68 8d f1 01 c0       	push   0xc001f18d
c0010f5b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010f5e:	e8 47 ff ff ff       	call   c0010eaa <string_ends_with(char const*, char const*)>
c0010f63:	83 c4 10             	add    esp,0x10
c0010f66:	85 c0                	test   eax,eax
c0010f68:	74 1d                	je     c0010f87 <sysCallOpen(regs*)+0x95>
c0010f6a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f6d:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010f73:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010f7a:	81 c4 04 01 00 00    	add    esp,0x104
c0010f80:	31 c0                	xor    eax,eax
c0010f82:	31 d2                	xor    edx,edx
c0010f84:	5b                   	pop    ebx
c0010f85:	5e                   	pop    esi
c0010f86:	c3                   	ret    
c0010f87:	83 ec 08             	sub    esp,0x8
c0010f8a:	68 92 f1 01 c0       	push   0xc001f192
c0010f8f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010f92:	e8 13 ff ff ff       	call   c0010eaa <string_ends_with(char const*, char const*)>
c0010f97:	83 c4 10             	add    esp,0x10
c0010f9a:	85 c0                	test   eax,eax
c0010f9c:	75 cc                	jne    c0010f6a <sysCallOpen(regs*)+0x78>
c0010f9e:	83 ec 08             	sub    esp,0x8
c0010fa1:	68 8e f1 01 c0       	push   0xc001f18e
c0010fa6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010fa9:	e8 42 f6 fe ff       	call   c00005f0 <strcmp>
c0010fae:	83 c4 10             	add    esp,0x10
c0010fb1:	85 c0                	test   eax,eax
c0010fb3:	74 b5                	je     c0010f6a <sysCallOpen(regs*)+0x78>
c0010fb5:	83 ec 08             	sub    esp,0x8
c0010fb8:	68 8d f1 01 c0       	push   0xc001f18d
c0010fbd:	56                   	push   esi
c0010fbe:	e8 e7 fe ff ff       	call   c0010eaa <string_ends_with(char const*, char const*)>
c0010fc3:	83 c4 10             	add    esp,0x10
c0010fc6:	85 c0                	test   eax,eax
c0010fc8:	75 a0                	jne    c0010f6a <sysCallOpen(regs*)+0x78>
c0010fca:	83 ec 08             	sub    esp,0x8
c0010fcd:	68 97 f1 01 c0       	push   0xc001f197
c0010fd2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010fd5:	e8 d0 fe ff ff       	call   c0010eaa <string_ends_with(char const*, char const*)>
c0010fda:	83 c4 10             	add    esp,0x10
c0010fdd:	85 c0                	test   eax,eax
c0010fdf:	0f 85 e7 00 00 00    	jne    c00110cc <sysCallOpen(regs*)+0x1da>
c0010fe5:	83 ec 08             	sub    esp,0x8
c0010fe8:	68 9c f1 01 c0       	push   0xc001f19c
c0010fed:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010ff0:	e8 b5 fe ff ff       	call   c0010eaa <string_ends_with(char const*, char const*)>
c0010ff5:	83 c4 10             	add    esp,0x10
c0010ff8:	85 c0                	test   eax,eax
c0010ffa:	0f 85 cc 00 00 00    	jne    c00110cc <sysCallOpen(regs*)+0x1da>
c0011000:	83 ec 08             	sub    esp,0x8
c0011003:	68 98 f1 01 c0       	push   0xc001f198
c0011008:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001100b:	e8 e0 f5 fe ff       	call   c00005f0 <strcmp>
c0011010:	83 c4 10             	add    esp,0x10
c0011013:	85 c0                	test   eax,eax
c0011015:	0f 84 b1 00 00 00    	je     c00110cc <sysCallOpen(regs*)+0x1da>
c001101b:	83 ec 08             	sub    esp,0x8
c001101e:	68 97 f1 01 c0       	push   0xc001f197
c0011023:	56                   	push   esi
c0011024:	e8 81 fe ff ff       	call   c0010eaa <string_ends_with(char const*, char const*)>
c0011029:	83 c4 10             	add    esp,0x10
c001102c:	85 c0                	test   eax,eax
c001102e:	0f 85 98 00 00 00    	jne    c00110cc <sysCallOpen(regs*)+0x1da>
c0011034:	83 ec 0c             	sub    esp,0xc
c0011037:	68 14 01 00 00       	push   0x114
c001103c:	e8 3c 5d ff ff       	call   c0006d7d <malloc>
c0011041:	83 c4 0c             	add    esp,0xc
c0011044:	89 c6                	mov    esi,eax
c0011046:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001104b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001104e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011051:	56                   	push   esi
c0011052:	e8 1b 90 ff ff       	call   c000a072 <File::File(char const*, Process*)>
c0011057:	83 c4 10             	add    esp,0x10
c001105a:	85 f6                	test   esi,esi
c001105c:	74 5b                	je     c00110b9 <sysCallOpen(regs*)+0x1c7>
c001105e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011061:	0f b6 c2             	movzx  eax,dl
c0011064:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011067:	89 d0                	mov    eax,edx
c0011069:	83 e0 01             	and    eax,0x1
c001106c:	f6 c2 02             	test   dl,0x2
c001106f:	74 03                	je     c0011074 <sysCallOpen(regs*)+0x182>
c0011071:	83 c8 02             	or     eax,0x2
c0011074:	f6 c2 04             	test   dl,0x4
c0011077:	74 03                	je     c001107c <sysCallOpen(regs*)+0x18a>
c0011079:	83 c8 04             	or     eax,0x4
c001107c:	f6 c2 08             	test   dl,0x8
c001107f:	74 03                	je     c0011084 <sysCallOpen(regs*)+0x192>
c0011081:	83 c8 0a             	or     eax,0xa
c0011084:	83 e2 10             	and    edx,0x10
c0011087:	74 03                	je     c001108c <sysCallOpen(regs*)+0x19a>
c0011089:	83 c8 12             	or     eax,0x12
c001108c:	83 ec 08             	sub    esp,0x8
c001108f:	50                   	push   eax
c0011090:	56                   	push   esi
c0011091:	e8 96 90 ff ff       	call   c000a12c <File::open(FileOpenMode)>
c0011096:	83 c4 10             	add    esp,0x10
c0011099:	85 c0                	test   eax,eax
c001109b:	75 1c                	jne    c00110b9 <sysCallOpen(regs*)+0x1c7>
c001109d:	83 ec 0c             	sub    esp,0xc
c00110a0:	56                   	push   esi
c00110a1:	e8 b4 73 ff ff       	call   c000845a <UnixFile::getFileDescriptor()>
c00110a6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00110a9:	83 c4 10             	add    esp,0x10
c00110ac:	89 02                	mov    DWORD PTR [edx],eax
c00110ae:	c1 f8 1f             	sar    eax,0x1f
c00110b1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00110b4:	e9 c1 fe ff ff       	jmp    c0010f7a <sysCallOpen(regs*)+0x88>
c00110b9:	81 c4 04 01 00 00    	add    esp,0x104
c00110bf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00110c4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00110c9:	5b                   	pop    ebx
c00110ca:	5e                   	pop    esi
c00110cb:	c3                   	ret    
c00110cc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00110cf:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00110d5:	e9 99 fe ff ff       	jmp    c0010f73 <sysCallOpen(regs*)+0x81>

c00110da <Sys::loadSyscalls()>:
c00110da:	c7 05 c0 32 02 c0 ed 04 01 c0 	mov    DWORD PTR ds:0xc00232c0,0xc00104ed
c00110e4:	c7 05 c4 32 02 c0 e4 00 01 c0 	mov    DWORD PTR ds:0xc00232c4,0xc00100e4
c00110ee:	c7 05 c8 32 02 c0 d3 02 01 c0 	mov    DWORD PTR ds:0xc00232c8,0xc00102d3
c00110f8:	c7 05 cc 32 02 c0 23 04 01 c0 	mov    DWORD PTR ds:0xc00232cc,0xc0010423
c0011102:	c7 05 d0 32 02 c0 6b 02 01 c0 	mov    DWORD PTR ds:0xc00232d0,0xc001026b
c001110c:	c7 05 d4 32 02 c0 1b 01 01 c0 	mov    DWORD PTR ds:0xc00232d4,0xc001011b
c0011116:	c7 05 d8 32 02 c0 fc 00 01 c0 	mov    DWORD PTR ds:0xc00232d8,0xc00100fc
c0011120:	c7 05 dc 32 02 c0 28 03 01 c0 	mov    DWORD PTR ds:0xc00232dc,0xc0010328
c001112a:	c7 05 e4 32 02 c0 a5 09 01 c0 	mov    DWORD PTR ds:0xc00232e4,0xc00109a5
c0011134:	c7 05 e0 32 02 c0 f2 0e 01 c0 	mov    DWORD PTR ds:0xc00232e0,0xc0010ef2
c001113e:	c7 05 e8 32 02 c0 05 0a 01 c0 	mov    DWORD PTR ds:0xc00232e8,0xc0010a05
c0011148:	c7 05 ec 32 02 c0 e8 06 01 c0 	mov    DWORD PTR ds:0xc00232ec,0xc00106e8
c0011152:	c7 05 f0 32 02 c0 12 05 01 c0 	mov    DWORD PTR ds:0xc00232f0,0xc0010512
c001115c:	c7 05 f4 32 02 c0 17 05 01 c0 	mov    DWORD PTR ds:0xc00232f4,0xc0010517
c0011166:	c7 05 f8 32 02 c0 ce 0a 01 c0 	mov    DWORD PTR ds:0xc00232f8,0xc0010ace
c0011170:	c7 05 fc 32 02 c0 7a 0a 01 c0 	mov    DWORD PTR ds:0xc00232fc,0xc0010a7a
c001117a:	c7 05 00 33 02 c0 c1 07 01 c0 	mov    DWORD PTR ds:0xc0023300,0xc00107c1
c0011184:	c7 05 04 33 02 c0 18 08 01 c0 	mov    DWORD PTR ds:0xc0023304,0xc0010818
c001118e:	c7 05 08 33 02 c0 84 08 01 c0 	mov    DWORD PTR ds:0xc0023308,0xc0010884
c0011198:	c7 05 0c 33 02 c0 1c 05 01 c0 	mov    DWORD PTR ds:0xc002330c,0xc001051c
c00111a2:	c7 05 10 33 02 c0 3e 0b 01 c0 	mov    DWORD PTR ds:0xc0023310,0xc0010b3e
c00111ac:	c7 05 14 33 02 c0 58 0b 01 c0 	mov    DWORD PTR ds:0xc0023314,0xc0010b58
c00111b6:	c7 05 18 33 02 c0 58 0b 01 c0 	mov    DWORD PTR ds:0xc0023318,0xc0010b58
c00111c0:	c7 05 1c 33 02 c0 8d 0b 01 c0 	mov    DWORD PTR ds:0xc002331c,0xc0010b8d
c00111ca:	c7 05 20 33 02 c0 f1 0b 01 c0 	mov    DWORD PTR ds:0xc0023320,0xc0010bf1
c00111d4:	c7 05 24 33 02 c0 26 05 01 c0 	mov    DWORD PTR ds:0xc0023324,0xc0010526
c00111de:	c7 05 28 33 02 c0 55 0c 01 c0 	mov    DWORD PTR ds:0xc0023328,0xc0010c55
c00111e8:	c7 05 2c 33 02 c0 a5 06 01 c0 	mov    DWORD PTR ds:0xc002332c,0xc00106a5
c00111f2:	c7 05 30 33 02 c0 36 05 01 c0 	mov    DWORD PTR ds:0xc0023330,0xc0010536
c00111fc:	c7 05 34 33 02 c0 67 07 01 c0 	mov    DWORD PTR ds:0xc0023334,0xc0010767
c0011206:	c7 05 38 33 02 c0 a1 0c 01 c0 	mov    DWORD PTR ds:0xc0023338,0xc0010ca1
c0011210:	c7 05 3c 33 02 c0 f6 08 01 c0 	mov    DWORD PTR ds:0xc002333c,0xc00108f6
c001121a:	c7 05 40 33 02 c0 ca 0c 01 c0 	mov    DWORD PTR ds:0xc0023340,0xc0010cca
c0011224:	c7 05 44 33 02 c0 32 0d 01 c0 	mov    DWORD PTR ds:0xc0023344,0xc0010d32
c001122e:	c7 05 4c 33 02 c0 3e 05 01 c0 	mov    DWORD PTR ds:0xc002334c,0xc001053e
c0011238:	c7 05 50 33 02 c0 a8 05 01 c0 	mov    DWORD PTR ds:0xc0023350,0xc00105a8
c0011242:	c7 05 54 33 02 c0 f2 05 01 c0 	mov    DWORD PTR ds:0xc0023354,0xc00105f2
c001124c:	c7 05 58 33 02 c0 df 0d 01 c0 	mov    DWORD PTR ds:0xc0023358,0xc0010ddf
c0011256:	c7 05 5c 33 02 c0 73 0b 01 c0 	mov    DWORD PTR ds:0xc002335c,0xc0010b73
c0011260:	c7 05 60 33 02 c0 47 06 01 c0 	mov    DWORD PTR ds:0xc0023360,0xc0010647
c001126a:	c7 05 64 33 02 c0 51 0e 01 c0 	mov    DWORD PTR ds:0xc0023364,0xc0010e51
c0011274:	c7 05 68 33 02 c0 96 0e 01 c0 	mov    DWORD PTR ds:0xc0023368,0xc0010e96
c001127e:	c7 05 6c 33 02 c0 c3 01 01 c0 	mov    DWORD PTR ds:0xc002336c,0xc00101c3
c0011288:	c7 05 70 33 02 c0 44 03 01 c0 	mov    DWORD PTR ds:0xc0023370,0xc0010344
c0011292:	c7 05 74 33 02 c0 d9 03 01 c0 	mov    DWORD PTR ds:0xc0023374,0xc00103d9
c001129c:	c7 05 78 33 02 c0 ae 00 01 c0 	mov    DWORD PTR ds:0xc0023378,0xc00100ae
c00112a6:	c7 05 7c 33 02 c0 8b 04 01 c0 	mov    DWORD PTR ds:0xc002337c,0xc001048b
c00112b0:	c7 05 80 33 02 c0 27 01 01 c0 	mov    DWORD PTR ds:0xc0023380,0xc0010127
c00112ba:	c7 05 84 33 02 c0 41 01 01 c0 	mov    DWORD PTR ds:0xc0023384,0xc0010141
c00112c4:	c3                   	ret    

c00112c5 <Sys::systemCall(regs*, void*)>:
c00112c5:	53                   	push   ebx
c00112c6:	83 ec 08             	sub    esp,0x8
c00112c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00112cd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00112d0:	83 f8 7f             	cmp    eax,0x7f
c00112d3:	77 16                	ja     c00112eb <Sys::systemCall(regs*, void*)+0x26>
c00112d5:	8b 14 85 c0 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcd40]
c00112dc:	85 d2                	test   edx,edx
c00112de:	74 0b                	je     c00112eb <Sys::systemCall(regs*, void*)+0x26>
c00112e0:	83 ec 0c             	sub    esp,0xc
c00112e3:	53                   	push   ebx
c00112e4:	ff d2                	call   edx
c00112e6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00112e9:	eb 0d                	jmp    c00112f8 <Sys::systemCall(regs*, void*)+0x33>
c00112eb:	52                   	push   edx
c00112ec:	52                   	push   edx
c00112ed:	50                   	push   eax
c00112ee:	68 a1 f1 01 c0       	push   0xc001f1a1
c00112f3:	e8 0f 88 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c00112f8:	83 c4 10             	add    esp,0x10
c00112fb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011300:	31 d2                	xor    edx,edx
c0011302:	83 c4 08             	add    esp,0x8
c0011305:	5b                   	pop    ebx
c0011306:	c3                   	ret    

c0011307 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011307:	55                   	push   ebp
c0011308:	57                   	push   edi
c0011309:	56                   	push   esi
c001130a:	53                   	push   ebx
c001130b:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011311:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011319:	0f 95 c2             	setne  dl
c001131c:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011324:	0f 94 c0             	sete   al
c0011327:	84 c2                	test   dl,al
c0011329:	74 34                	je     c001135f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c001132b:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011336:	74 27                	je     c001135f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011338:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001133f:	05 00 10 00 00       	add    eax,0x1000
c0011344:	89 c1                	mov    ecx,eax
c0011346:	25 00 f0 ff ff       	and    eax,0xfffff000
c001134b:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011351:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011358:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c001135f:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011366:	83 ec 0c             	sub    esp,0xc
c0011369:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001136f:	6a 01                	push   0x1
c0011371:	e8 2f 75 ff ff       	call   c00088a5 <Virt::allocateKernelVirtualPages(int)>
c0011376:	83 c4 10             	add    esp,0x10
c0011379:	89 c3                	mov    ebx,eax
c001137b:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011381:	0f 86 25 01 00 00    	jbe    c00114ac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011387:	c1 ee 0c             	shr    esi,0xc
c001138a:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011391:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011395:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001139d:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00113a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00113a8:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00113af:	29 ef                	sub    edi,ebp
c00113b1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00113b5:	0f 83 f8 00 00 00    	jae    c00114b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c00113bb:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00113c1:	76 05                	jbe    c00113c8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c00113c3:	bf 00 10 00 00       	mov    edi,0x1000
c00113c8:	83 ec 0c             	sub    esp,0xc
c00113cb:	31 d2                	xor    edx,edx
c00113cd:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00113d4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00113d6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00113da:	50                   	push   eax
c00113db:	8d 74 24 30          	lea    esi,[esp+0x30]
c00113df:	56                   	push   esi
c00113e0:	52                   	push   edx
c00113e1:	57                   	push   edi
c00113e2:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00113e9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00113ec:	83 c4 20             	add    esp,0x20
c00113ef:	85 c0                	test   eax,eax
c00113f1:	75 06                	jne    c00113f9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c00113f3:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00113f7:	74 13                	je     c001140c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c00113f9:	83 ec 0c             	sub    esp,0xc
c00113fc:	53                   	push   ebx
c00113fd:	e8 97 77 ff ff       	call   c0008b99 <Virt::freeKernelVirtualPages(unsigned long)>
c0011402:	83 c4 10             	add    esp,0x10
c0011405:	31 c0                	xor    eax,eax
c0011407:	e9 7c 01 00 00       	jmp    c0011588 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c001140c:	fa                   	cli    
c001140d:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c0011413:	e8 2c 5d ff ff       	call   c0007144 <Phys::allocatePage()>
c0011418:	6a 07                	push   0x7
c001141a:	89 c7                	mov    edi,eax
c001141c:	53                   	push   ebx
c001141d:	50                   	push   eax
c001141e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011423:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011426:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001142c:	e8 c7 7a ff ff       	call   c0008ef8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011431:	83 c4 0c             	add    esp,0xc
c0011434:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001143b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011441:	6a 00                	push   0x0
c0011443:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011448:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001144b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011451:	e8 14 79 ff ff       	call   c0008d6a <VAS::mapOtherVASIn(bool, VAS*)>
c0011456:	58                   	pop    eax
c0011457:	5a                   	pop    edx
c0011458:	68 07 0c 00 00       	push   0xc07
c001145d:	55                   	push   ebp
c001145e:	57                   	push   edi
c001145f:	89 df                	mov    edi,ebx
c0011461:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011468:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001146e:	6a 00                	push   0x0
c0011470:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011475:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011478:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001147e:	e8 33 7e ff ff       	call   c00092b6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011483:	b9 00 10 00 00       	mov    ecx,0x1000
c0011488:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001148a:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c001148f:	83 c4 20             	add    esp,0x20
c0011492:	48                   	dec    eax
c0011493:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c0011498:	85 c0                	test   eax,eax
c001149a:	75 01                	jne    c001149d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c001149c:	fb                   	sti    
c001149d:	81 c5 00 10 00 00    	add    ebp,0x1000
c00114a3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00114a7:	e9 f1 fe ff ff       	jmp    c001139d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c00114ac:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00114b3:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00114ba:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00114c0:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00114c6:	0f 86 ae 00 00 00    	jbe    c001157a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c00114cc:	fa                   	cli    
c00114cd:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c00114d3:	c1 ee 0c             	shr    esi,0xc
c00114d6:	51                   	push   ecx
c00114d7:	31 ff                	xor    edi,edi
c00114d9:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00114e0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00114e6:	6a 00                	push   0x0
c00114e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114ed:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00114f0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00114f6:	e8 6f 78 ff ff       	call   c0008d6a <VAS::mapOtherVASIn(bool, VAS*)>
c00114fb:	83 c4 10             	add    esp,0x10
c00114fe:	e8 41 5c ff ff       	call   c0007144 <Phys::allocatePage()>
c0011503:	47                   	inc    edi
c0011504:	6a 07                	push   0x7
c0011506:	53                   	push   ebx
c0011507:	50                   	push   eax
c0011508:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001150c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011512:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0011515:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c001151b:	e8 d8 79 ff ff       	call   c0008ef8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011520:	58                   	pop    eax
c0011521:	5a                   	pop    edx
c0011522:	68 07 0c 00 00       	push   0xc07
c0011527:	55                   	push   ebp
c0011528:	81 c5 00 10 00 00    	add    ebp,0x1000
c001152e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011532:	50                   	push   eax
c0011533:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001153a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011540:	6a 00                	push   0x0
c0011542:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011547:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001154a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011550:	e8 61 7d ff ff       	call   c00092b6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011555:	83 c4 1c             	add    esp,0x1c
c0011558:	68 00 10 00 00       	push   0x1000
c001155d:	6a 00                	push   0x0
c001155f:	53                   	push   ebx
c0011560:	e8 43 ef fe ff       	call   c00004a8 <memset>
c0011565:	83 c4 10             	add    esp,0x10
c0011568:	39 fe                	cmp    esi,edi
c001156a:	77 92                	ja     c00114fe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c001156c:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0011571:	48                   	dec    eax
c0011572:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c0011577:	75 01                	jne    c001157a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011579:	fb                   	sti    
c001157a:	83 ec 0c             	sub    esp,0xc
c001157d:	53                   	push   ebx
c001157e:	e8 16 76 ff ff       	call   c0008b99 <Virt::freeKernelVirtualPages(unsigned long)>
c0011583:	83 c4 10             	add    esp,0x10
c0011586:	b0 01                	mov    al,0x1
c0011588:	81 c4 2c 10 00 00    	add    esp,0x102c
c001158e:	5b                   	pop    ebx
c001158f:	5e                   	pop    esi
c0011590:	5f                   	pop    edi
c0011591:	5d                   	pop    ebp
c0011592:	c3                   	ret    

c0011593 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0011593:	55                   	push   ebp
c0011594:	57                   	push   edi
c0011595:	56                   	push   esi
c0011596:	53                   	push   ebx
c0011597:	83 ec 48             	sub    esp,0x48
c001159a:	68 14 01 00 00       	push   0x114
c001159f:	e8 d9 57 ff ff       	call   c0006d7d <malloc>
c00115a4:	83 c4 0c             	add    esp,0xc
c00115a7:	89 c6                	mov    esi,eax
c00115a9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00115ad:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00115b1:	50                   	push   eax
c00115b2:	e8 bb 8a ff ff       	call   c000a072 <File::File(char const*, Process*)>
c00115b7:	58                   	pop    eax
c00115b8:	5a                   	pop    edx
c00115b9:	6a 01                	push   0x1
c00115bb:	56                   	push   esi
c00115bc:	e8 6b 8b ff ff       	call   c000a12c <File::open(FileOpenMode)>
c00115c1:	83 c4 10             	add    esp,0x10
c00115c4:	85 c0                	test   eax,eax
c00115c6:	0f 85 47 01 00 00    	jne    c0011713 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00115cc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00115d4:	83 ec 0c             	sub    esp,0xc
c00115d7:	6a 34                	push   0x34
c00115d9:	e8 9f 57 ff ff       	call   c0006d7d <malloc>
c00115de:	89 c3                	mov    ebx,eax
c00115e0:	58                   	pop    eax
c00115e1:	8b 06                	mov    eax,DWORD PTR [esi]
c00115e3:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00115e7:	57                   	push   edi
c00115e8:	53                   	push   ebx
c00115e9:	6a 00                	push   0x0
c00115eb:	6a 34                	push   0x34
c00115ed:	56                   	push   esi
c00115ee:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00115f1:	83 c4 20             	add    esp,0x20
c00115f4:	85 c0                	test   eax,eax
c00115f6:	0f 85 17 01 00 00    	jne    c0011713 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00115fc:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0011602:	0f 85 0b 01 00 00    	jne    c0011713 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011608:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001160b:	85 c0                	test   eax,eax
c001160d:	0f 84 00 01 00 00    	je     c0011713 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011613:	31 d2                	xor    edx,edx
c0011615:	55                   	push   ebp
c0011616:	52                   	push   edx
c0011617:	50                   	push   eax
c0011618:	56                   	push   esi
c0011619:	e8 cc 8b ff ff       	call   c000a1ea <File::seek(unsigned long long)>
c001161e:	83 c4 10             	add    esp,0x10
c0011621:	85 c0                	test   eax,eax
c0011623:	0f 85 ea 00 00 00    	jne    c0011713 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011629:	83 ec 0c             	sub    esp,0xc
c001162c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001162f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011633:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011637:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001163b:	0f af c2             	imul   eax,edx
c001163e:	50                   	push   eax
c001163f:	e8 39 57 ff ff       	call   c0006d7d <malloc>
c0011644:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011646:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001164a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001164d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011651:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011655:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011659:	0f af c2             	imul   eax,edx
c001165c:	99                   	cdq    
c001165d:	52                   	push   edx
c001165e:	50                   	push   eax
c001165f:	56                   	push   esi
c0011660:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011663:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0011666:	83 c4 20             	add    esp,0x20
c0011669:	85 c0                	test   eax,eax
c001166b:	0f 84 a2 00 00 00    	je     c0011713 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011671:	31 d2                	xor    edx,edx
c0011673:	51                   	push   ecx
c0011674:	52                   	push   edx
c0011675:	50                   	push   eax
c0011676:	56                   	push   esi
c0011677:	e8 6e 8b ff ff       	call   c000a1ea <File::seek(unsigned long long)>
c001167c:	83 c4 10             	add    esp,0x10
c001167f:	85 c0                	test   eax,eax
c0011681:	0f 85 8c 00 00 00    	jne    c0011713 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011687:	83 ec 0c             	sub    esp,0xc
c001168a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001168e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0011692:	31 ed                	xor    ebp,ebp
c0011694:	0f af c2             	imul   eax,edx
c0011697:	50                   	push   eax
c0011698:	e8 e0 56 ff ff       	call   c0006d7d <malloc>
c001169d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001169f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00116a3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00116a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116aa:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00116ae:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00116b2:	0f af c2             	imul   eax,edx
c00116b5:	99                   	cdq    
c00116b6:	52                   	push   edx
c00116b7:	50                   	push   eax
c00116b8:	56                   	push   esi
c00116b9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00116bc:	83 c4 20             	add    esp,0x20
c00116bf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00116c7:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00116cb:	0f 86 80 00 00 00    	jbe    c0011751 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00116d1:	0f b7 fd             	movzx  edi,bp
c00116d4:	c1 e7 05             	shl    edi,0x5
c00116d7:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00116db:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00116de:	75 6b                	jne    c001174b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00116e0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00116e3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00116e7:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00116ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00116ee:	52                   	push   edx
c00116ef:	31 d2                	xor    edx,edx
c00116f1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00116f4:	52                   	push   edx
c00116f5:	50                   	push   eax
c00116f6:	56                   	push   esi
c00116f7:	e8 ee 8a ff ff       	call   c000a1ea <File::seek(unsigned long long)>
c00116fc:	83 c4 10             	add    esp,0x10
c00116ff:	85 c0                	test   eax,eax
c0011701:	74 17                	je     c001171a <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0011703:	83 ec 0c             	sub    esp,0xc
c0011706:	68 b5 f1 01 c0       	push   0xc001f1b5
c001170b:	e8 f7 83 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c0011710:	83 c4 10             	add    esp,0x10
c0011713:	31 c0                	xor    eax,eax
c0011715:	e9 87 00 00 00       	jmp    c00117a1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001171a:	83 ec 0c             	sub    esp,0xc
c001171d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0011720:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0011723:	50                   	push   eax
c0011724:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011728:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001172c:	56                   	push   esi
c001172d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0011731:	e8 d1 fb ff ff       	call   c0011307 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0011736:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001173a:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001173e:	83 c4 20             	add    esp,0x20
c0011741:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0011745:	73 04                	jae    c001174b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011747:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001174b:	45                   	inc    ebp
c001174c:	e9 76 ff ff ff       	jmp    c00116c7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0011751:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0011755:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001175d:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0011763:	83 ec 0c             	sub    esp,0xc
c0011766:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c001176c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011771:	05 00 10 00 00       	add    eax,0x1000
c0011776:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011779:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001177d:	e8 0b 56 ff ff       	call   c0006d8d <free>
c0011782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011785:	e8 03 56 ff ff       	call   c0006d8d <free>
c001178a:	58                   	pop    eax
c001178b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001178f:	e8 f9 55 ff ff       	call   c0006d8d <free>
c0011794:	89 34 24             	mov    DWORD PTR [esp],esi
c0011797:	e8 ee 89 ff ff       	call   c000a18a <File::close()>
c001179c:	83 c4 10             	add    esp,0x10
c001179f:	b0 01                	mov    al,0x1
c00117a1:	83 c4 3c             	add    esp,0x3c
c00117a4:	5b                   	pop    ebx
c00117a5:	5e                   	pop    esi
c00117a6:	5f                   	pop    edi
c00117a7:	5d                   	pop    ebp
c00117a8:	c3                   	ret    

c00117a9 <Thr::runtimeReferenceHelper()>:
c00117a9:	83 ec 18             	sub    esp,0x18
c00117ac:	68 bd f1 01 c0       	push   0xc001f1bd
c00117b1:	e8 51 83 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c00117b6:	fa                   	cli    
c00117b7:	83 c4 10             	add    esp,0x10
c00117ba:	eb fe                	jmp    c00117ba <Thr::runtimeReferenceHelper()+0x11>

c00117bc <Thr::getAddressOfKernelSymbol(char const*)>:
c00117bc:	57                   	push   edi
c00117bd:	56                   	push   esi
c00117be:	53                   	push   ebx
c00117bf:	31 db                	xor    ebx,ebx
c00117c1:	39 1d 60 3c 02 c0    	cmp    DWORD PTR ds:0xc0023c60,ebx
c00117c7:	7e 3c                	jle    c0011805 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00117c9:	8b 34 9d e0 3b 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc420]
c00117d0:	31 ff                	xor    edi,edi
c00117d2:	39 3c 9d e0 3a 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdc520],edi
c00117d9:	7e 27                	jle    c0011802 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00117db:	50                   	push   eax
c00117dc:	50                   	push   eax
c00117dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117e1:	8b 06                	mov    eax,DWORD PTR [esi]
c00117e3:	03 04 9d 60 3b 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc4a0]
c00117ea:	50                   	push   eax
c00117eb:	e8 00 ee fe ff       	call   c00005f0 <strcmp>
c00117f0:	83 c4 10             	add    esp,0x10
c00117f3:	85 c0                	test   eax,eax
c00117f5:	75 05                	jne    c00117fc <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00117f7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00117fa:	eb 0b                	jmp    c0011807 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00117fc:	83 c6 10             	add    esi,0x10
c00117ff:	47                   	inc    edi
c0011800:	eb d0                	jmp    c00117d2 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0011802:	43                   	inc    ebx
c0011803:	eb bc                	jmp    c00117c1 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0011805:	31 c0                	xor    eax,eax
c0011807:	5b                   	pop    ebx
c0011808:	5e                   	pop    esi
c0011809:	5f                   	pop    edi
c001180a:	c3                   	ret    

c001180b <Thr::loadKernelSymbolTable(char const*)>:
c001180b:	55                   	push   ebp
c001180c:	57                   	push   edi
c001180d:	56                   	push   esi
c001180e:	53                   	push   ebx
c001180f:	83 ec 68             	sub    esp,0x68
c0011812:	8b 35 b0 3c 02 c0    	mov    esi,DWORD PTR ds:0xc0023cb0
c0011818:	68 14 01 00 00       	push   0x114
c001181d:	e8 5b 55 ff ff       	call   c0006d7d <malloc>
c0011822:	83 c4 0c             	add    esp,0xc
c0011825:	89 c3                	mov    ebx,eax
c0011827:	56                   	push   esi
c0011828:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001182c:	50                   	push   eax
c001182d:	e8 40 88 ff ff       	call   c000a072 <File::File(char const*, Process*)>
c0011832:	5e                   	pop    esi
c0011833:	5f                   	pop    edi
c0011834:	6a 01                	push   0x1
c0011836:	53                   	push   ebx
c0011837:	e8 f0 88 ff ff       	call   c000a12c <File::open(FileOpenMode)>
c001183c:	83 c4 10             	add    esp,0x10
c001183f:	85 c0                	test   eax,eax
c0011841:	74 0a                	je     c001184d <Thr::loadKernelSymbolTable(char const*)+0x42>
c0011843:	83 ec 0c             	sub    esp,0xc
c0011846:	68 df f1 01 c0       	push   0xc001f1df
c001184b:	eb 34                	jmp    c0011881 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001184d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0011855:	83 ec 0c             	sub    esp,0xc
c0011858:	6a 34                	push   0x34
c001185a:	e8 1e 55 ff ff       	call   c0006d7d <malloc>
c001185f:	59                   	pop    ecx
c0011860:	89 c7                	mov    edi,eax
c0011862:	8d 74 24 34          	lea    esi,[esp+0x34]
c0011866:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011868:	56                   	push   esi
c0011869:	57                   	push   edi
c001186a:	6a 00                	push   0x0
c001186c:	6a 34                	push   0x34
c001186e:	53                   	push   ebx
c001186f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011872:	83 c4 20             	add    esp,0x20
c0011875:	85 c0                	test   eax,eax
c0011877:	74 17                	je     c0011890 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0011879:	83 ec 0c             	sub    esp,0xc
c001187c:	68 f6 f1 01 c0       	push   0xc001f1f6
c0011881:	e8 57 df ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0011886:	83 c4 10             	add    esp,0x10
c0011889:	31 c0                	xor    eax,eax
c001188b:	e9 31 02 00 00       	jmp    c0011ac1 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0011890:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0011896:	75 e1                	jne    c0011879 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011898:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001189b:	85 c0                	test   eax,eax
c001189d:	74 da                	je     c0011879 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001189f:	52                   	push   edx
c00118a0:	31 d2                	xor    edx,edx
c00118a2:	52                   	push   edx
c00118a3:	50                   	push   eax
c00118a4:	53                   	push   ebx
c00118a5:	e8 40 89 ff ff       	call   c000a1ea <File::seek(unsigned long long)>
c00118aa:	83 c4 10             	add    esp,0x10
c00118ad:	85 c0                	test   eax,eax
c00118af:	75 c8                	jne    c0011879 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00118b1:	83 ec 0c             	sub    esp,0xc
c00118b4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00118b8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00118bc:	31 ed                	xor    ebp,ebp
c00118be:	0f af c2             	imul   eax,edx
c00118c1:	50                   	push   eax
c00118c2:	e8 b6 54 ff ff       	call   c0006d7d <malloc>
c00118c7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00118c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00118cd:	89 34 24             	mov    DWORD PTR [esp],esi
c00118d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00118d4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00118d8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00118dc:	0f af c2             	imul   eax,edx
c00118df:	99                   	cdq    
c00118e0:	52                   	push   edx
c00118e1:	50                   	push   eax
c00118e2:	53                   	push   ebx
c00118e3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00118e6:	83 c4 20             	add    esp,0x20
c00118e9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00118f1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00118f9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011901:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011909:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001190d:	0f 86 aa 00 00 00    	jbe    c00119bd <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0011913:	0f b7 f5             	movzx  esi,bp
c0011916:	6b f6 28             	imul   esi,esi,0x28
c0011919:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001191d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0011920:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011924:	50                   	push   eax
c0011925:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011929:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001192d:	8b 16                	mov    edx,DWORD PTR [esi]
c001192f:	6b c0 28             	imul   eax,eax,0x28
c0011932:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0011936:	89 d0                	mov    eax,edx
c0011938:	31 d2                	xor    edx,edx
c001193a:	52                   	push   edx
c001193b:	50                   	push   eax
c001193c:	53                   	push   ebx
c001193d:	e8 a8 88 ff ff       	call   c000a1ea <File::seek(unsigned long long)>
c0011942:	83 c4 0c             	add    esp,0xc
c0011945:	6a 20                	push   0x20
c0011947:	6a 00                	push   0x0
c0011949:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001194d:	52                   	push   edx
c001194e:	e8 55 eb fe ff       	call   c00004a8 <memset>
c0011953:	58                   	pop    eax
c0011954:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011956:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001195a:	51                   	push   ecx
c001195b:	8d 54 24 40          	lea    edx,[esp+0x40]
c001195f:	52                   	push   edx
c0011960:	6a 00                	push   0x0
c0011962:	6a 1f                	push   0x1f
c0011964:	53                   	push   ebx
c0011965:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011968:	83 c4 18             	add    esp,0x18
c001196b:	68 0d f2 01 c0       	push   0xc001f20d
c0011970:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0011974:	52                   	push   edx
c0011975:	e8 76 ec fe ff       	call   c00005f0 <strcmp>
c001197a:	83 c4 10             	add    esp,0x10
c001197d:	85 c0                	test   eax,eax
c001197f:	75 0f                	jne    c0011990 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0011981:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011984:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011988:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001198c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011990:	50                   	push   eax
c0011991:	50                   	push   eax
c0011992:	68 15 f2 01 c0       	push   0xc001f215
c0011997:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001199b:	50                   	push   eax
c001199c:	e8 4f ec fe ff       	call   c00005f0 <strcmp>
c00119a1:	83 c4 10             	add    esp,0x10
c00119a4:	85 c0                	test   eax,eax
c00119a6:	75 0f                	jne    c00119b7 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00119a8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00119ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00119af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00119b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00119b7:	45                   	inc    ebp
c00119b8:	e9 4c ff ff ff       	jmp    c0011909 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00119bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00119c2:	75 10                	jne    c00119d4 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00119c4:	83 ec 0c             	sub    esp,0xc
c00119c7:	68 1d f2 01 c0       	push   0xc001f21d
c00119cc:	e8 0c de ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c00119d1:	83 c4 10             	add    esp,0x10
c00119d4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00119d9:	75 10                	jne    c00119eb <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00119db:	83 ec 0c             	sub    esp,0xc
c00119de:	68 1d f2 01 c0       	push   0xc001f21d
c00119e3:	e8 f5 dd ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c00119e8:	83 c4 10             	add    esp,0x10
c00119eb:	31 d2                	xor    edx,edx
c00119ed:	50                   	push   eax
c00119ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119f2:	52                   	push   edx
c00119f3:	50                   	push   eax
c00119f4:	53                   	push   ebx
c00119f5:	e8 f0 87 ff ff       	call   c000a1ea <File::seek(unsigned long long)>
c00119fa:	5a                   	pop    edx
c00119fb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00119ff:	e8 79 53 ff ff       	call   c0006d7d <malloc>
c0011a04:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011a08:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011a0c:	31 c9                	xor    ecx,ecx
c0011a0e:	5e                   	pop    esi
c0011a0f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011a11:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0011a15:	55                   	push   ebp
c0011a16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a1a:	51                   	push   ecx
c0011a1b:	52                   	push   edx
c0011a1c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0011a20:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0011a24:	53                   	push   ebx
c0011a25:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011a28:	83 c4 14             	add    esp,0x14
c0011a2b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011a2f:	e8 49 53 ff ff       	call   c0006d7d <malloc>
c0011a34:	89 c6                	mov    esi,eax
c0011a36:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011a38:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011a3b:	56                   	push   esi
c0011a3c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0011a40:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011a44:	51                   	push   ecx
c0011a45:	52                   	push   edx
c0011a46:	53                   	push   ebx
c0011a47:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011a4a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011a4e:	8b 15 60 3c 02 c0    	mov    edx,DWORD PTR ds:0xc0023c60
c0011a54:	83 c4 1c             	add    esp,0x1c
c0011a57:	c1 e8 04             	shr    eax,0x4
c0011a5a:	89 04 95 e0 3a 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc520],eax
c0011a61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011a65:	31 d2                	xor    edx,edx
c0011a67:	52                   	push   edx
c0011a68:	50                   	push   eax
c0011a69:	53                   	push   ebx
c0011a6a:	e8 7b 87 ff ff       	call   c000a1ea <File::seek(unsigned long long)>
c0011a6f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0011a71:	31 d2                	xor    edx,edx
c0011a73:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011a76:	56                   	push   esi
c0011a77:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011a7b:	52                   	push   edx
c0011a7c:	50                   	push   eax
c0011a7d:	53                   	push   ebx
c0011a7e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011a81:	83 c4 14             	add    esp,0x14
c0011a84:	53                   	push   ebx
c0011a85:	e8 00 87 ff ff       	call   c000a18a <File::close()>
c0011a8a:	5d                   	pop    ebp
c0011a8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011a8f:	e8 f9 52 ff ff       	call   c0006d8d <free>
c0011a94:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011a97:	e8 f1 52 ff ff       	call   c0006d8d <free>
c0011a9c:	a1 60 3c 02 c0       	mov    eax,ds:0xc0023c60
c0011aa1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0011aa5:	8d 50 01             	lea    edx,[eax+0x1]
c0011aa8:	89 0c 85 e0 3b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc420],ecx
c0011aaf:	89 34 85 60 3b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc4a0],esi
c0011ab6:	89 15 60 3c 02 c0    	mov    DWORD PTR ds:0xc0023c60,edx
c0011abc:	83 c4 10             	add    esp,0x10
c0011abf:	b0 01                	mov    al,0x1
c0011ac1:	83 c4 5c             	add    esp,0x5c
c0011ac4:	5b                   	pop    ebx
c0011ac5:	5e                   	pop    esi
c0011ac6:	5f                   	pop    edi
c0011ac7:	5d                   	pop    ebp
c0011ac8:	c3                   	ret    

c0011ac9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0011ac9:	55                   	push   ebp
c0011aca:	57                   	push   edi
c0011acb:	56                   	push   esi
c0011acc:	53                   	push   ebx
c0011acd:	81 ec 68 03 00 00    	sub    esp,0x368
c0011ad3:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0011ada:	8b 1d b0 3c 02 c0    	mov    ebx,DWORD PTR ds:0xc0023cb0
c0011ae0:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0011ae4:	68 14 01 00 00       	push   0x114
c0011ae9:	e8 8f 52 ff ff       	call   c0006d7d <malloc>
c0011aee:	83 c4 0c             	add    esp,0xc
c0011af1:	89 c5                	mov    ebp,eax
c0011af3:	53                   	push   ebx
c0011af4:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0011afb:	50                   	push   eax
c0011afc:	e8 71 85 ff ff       	call   c000a072 <File::File(char const*, Process*)>
c0011b01:	5e                   	pop    esi
c0011b02:	5f                   	pop    edi
c0011b03:	6a 01                	push   0x1
c0011b05:	55                   	push   ebp
c0011b06:	e8 21 86 ff ff       	call   c000a12c <File::open(FileOpenMode)>
c0011b0b:	83 c4 10             	add    esp,0x10
c0011b0e:	85 c0                	test   eax,eax
c0011b10:	0f 85 a7 06 00 00    	jne    c00121bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011b16:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0011b1e:	83 ec 0c             	sub    esp,0xc
c0011b21:	6a 34                	push   0x34
c0011b23:	e8 55 52 ff ff       	call   c0006d7d <malloc>
c0011b28:	5b                   	pop    ebx
c0011b29:	89 c7                	mov    edi,eax
c0011b2b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0011b2f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011b32:	53                   	push   ebx
c0011b33:	57                   	push   edi
c0011b34:	6a 00                	push   0x0
c0011b36:	6a 34                	push   0x34
c0011b38:	55                   	push   ebp
c0011b39:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011b3c:	83 c4 20             	add    esp,0x20
c0011b3f:	85 c0                	test   eax,eax
c0011b41:	0f 85 76 06 00 00    	jne    c00121bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011b47:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0011b4d:	0f 85 6a 06 00 00    	jne    c00121bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011b53:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0011b56:	85 c0                	test   eax,eax
c0011b58:	0f 84 5f 06 00 00    	je     c00121bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011b5e:	31 d2                	xor    edx,edx
c0011b60:	51                   	push   ecx
c0011b61:	52                   	push   edx
c0011b62:	50                   	push   eax
c0011b63:	55                   	push   ebp
c0011b64:	e8 81 86 ff ff       	call   c000a1ea <File::seek(unsigned long long)>
c0011b69:	83 c4 10             	add    esp,0x10
c0011b6c:	85 c0                	test   eax,eax
c0011b6e:	0f 85 49 06 00 00    	jne    c00121bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011b74:	83 ec 0c             	sub    esp,0xc
c0011b77:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0011b7a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011b7e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011b82:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011b86:	0f af c2             	imul   eax,edx
c0011b89:	50                   	push   eax
c0011b8a:	e8 ee 51 ff ff       	call   c0006d7d <malloc>
c0011b8f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011b92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011b96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011b99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011b9d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011ba1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011ba5:	0f af c2             	imul   eax,edx
c0011ba8:	99                   	cdq    
c0011ba9:	52                   	push   edx
c0011baa:	50                   	push   eax
c0011bab:	55                   	push   ebp
c0011bac:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011baf:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0011bb2:	83 c4 20             	add    esp,0x20
c0011bb5:	85 c0                	test   eax,eax
c0011bb7:	0f 84 00 06 00 00    	je     c00121bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011bbd:	52                   	push   edx
c0011bbe:	31 d2                	xor    edx,edx
c0011bc0:	52                   	push   edx
c0011bc1:	50                   	push   eax
c0011bc2:	55                   	push   ebp
c0011bc3:	e8 22 86 ff ff       	call   c000a1ea <File::seek(unsigned long long)>
c0011bc8:	83 c4 10             	add    esp,0x10
c0011bcb:	85 c0                	test   eax,eax
c0011bcd:	0f 85 ea 05 00 00    	jne    c00121bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011bd3:	83 ec 0c             	sub    esp,0xc
c0011bd6:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0011bda:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0011bde:	31 f6                	xor    esi,esi
c0011be0:	0f af c2             	imul   eax,edx
c0011be3:	50                   	push   eax
c0011be4:	e8 94 51 ff ff       	call   c0006d7d <malloc>
c0011be9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011bec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011bf0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011bf3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011bf7:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0011bfb:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0011bff:	0f af c2             	imul   eax,edx
c0011c02:	99                   	cdq    
c0011c03:	52                   	push   edx
c0011c04:	50                   	push   eax
c0011c05:	55                   	push   ebp
c0011c06:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011c09:	83 c4 20             	add    esp,0x20
c0011c0c:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0011c10:	0f 86 8a 00 00 00    	jbe    c0011ca0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0011c16:	0f b7 de             	movzx  ebx,si
c0011c19:	c1 e3 05             	shl    ebx,0x5
c0011c1c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0011c20:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0011c23:	75 75                	jne    c0011c9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0011c25:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011c28:	31 d2                	xor    edx,edx
c0011c2a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c2e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0011c31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c35:	50                   	push   eax
c0011c36:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0011c39:	52                   	push   edx
c0011c3a:	50                   	push   eax
c0011c3b:	55                   	push   ebp
c0011c3c:	e8 a9 85 ff ff       	call   c000a1ea <File::seek(unsigned long long)>
c0011c41:	83 c4 10             	add    esp,0x10
c0011c44:	85 c0                	test   eax,eax
c0011c46:	0f 85 71 05 00 00    	jne    c00121bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011c4c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0011c53:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011c56:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0011c5a:	31 d2                	xor    edx,edx
c0011c5c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0011c60:	83 ec 0c             	sub    esp,0xc
c0011c63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011c67:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011c6e:	50                   	push   eax
c0011c6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011c73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011c77:	52                   	push   edx
c0011c78:	50                   	push   eax
c0011c79:	55                   	push   ebp
c0011c7a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011c7d:	83 c4 1c             	add    esp,0x1c
c0011c80:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0011c83:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0011c86:	50                   	push   eax
c0011c87:	6a 00                	push   0x0
c0011c89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c8d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0011c91:	50                   	push   eax
c0011c92:	e8 11 e8 fe ff       	call   c00004a8 <memset>
c0011c97:	83 c4 10             	add    esp,0x10
c0011c9a:	46                   	inc    esi
c0011c9b:	e9 6c ff ff ff       	jmp    c0011c0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0011ca0:	53                   	push   ebx
c0011ca1:	31 db                	xor    ebx,ebx
c0011ca3:	68 00 01 00 00       	push   0x100
c0011ca8:	6a 00                	push   0x0
c0011caa:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0011cae:	50                   	push   eax
c0011caf:	e8 f4 e7 fe ff       	call   c00004a8 <memset>
c0011cb4:	83 c4 0c             	add    esp,0xc
c0011cb7:	68 00 01 00 00       	push   0x100
c0011cbc:	6a 00                	push   0x0
c0011cbe:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0011cc5:	50                   	push   eax
c0011cc6:	e8 dd e7 fe ff       	call   c00004a8 <memset>
c0011ccb:	83 c4 10             	add    esp,0x10
c0011cce:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011cd6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0011cde:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0011ce6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011cee:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011cf6:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0011cfa:	0f 86 30 01 00 00    	jbe    c0011e30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0011d00:	0f b7 f3             	movzx  esi,bx
c0011d03:	6b f6 28             	imul   esi,esi,0x28
c0011d06:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0011d0a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0011d0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d11:	52                   	push   edx
c0011d12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011d16:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0011d1a:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d1c:	6b d2 28             	imul   edx,edx,0x28
c0011d1f:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0011d23:	31 d2                	xor    edx,edx
c0011d25:	52                   	push   edx
c0011d26:	50                   	push   eax
c0011d27:	55                   	push   ebp
c0011d28:	e8 bd 84 ff ff       	call   c000a1ea <File::seek(unsigned long long)>
c0011d2d:	83 c4 0c             	add    esp,0xc
c0011d30:	6a 20                	push   0x20
c0011d32:	6a 00                	push   0x0
c0011d34:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0011d3b:	51                   	push   ecx
c0011d3c:	e8 67 e7 fe ff       	call   c00004a8 <memset>
c0011d41:	59                   	pop    ecx
c0011d42:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011d45:	8d 54 24 58          	lea    edx,[esp+0x58]
c0011d49:	52                   	push   edx
c0011d4a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0011d51:	51                   	push   ecx
c0011d52:	6a 00                	push   0x0
c0011d54:	6a 1f                	push   0x1f
c0011d56:	55                   	push   ebp
c0011d57:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011d5a:	83 c4 1c             	add    esp,0x1c
c0011d5d:	6a 09                	push   0x9
c0011d5f:	68 37 f2 01 c0       	push   0xc001f237
c0011d64:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0011d6b:	51                   	push   ecx
c0011d6c:	e8 33 e6 fe ff       	call   c00003a4 <memcmp>
c0011d71:	83 c4 10             	add    esp,0x10
c0011d74:	85 c0                	test   eax,eax
c0011d76:	75 21                	jne    c0011d99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0011d78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011d80:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0011d84:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011d88:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011d8b:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0011d92:	89 d0                	mov    eax,edx
c0011d94:	40                   	inc    eax
c0011d95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011d99:	50                   	push   eax
c0011d9a:	6a 09                	push   0x9
c0011d9c:	68 41 f2 01 c0       	push   0xc001f241
c0011da1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011da8:	50                   	push   eax
c0011da9:	e8 f6 e5 fe ff       	call   c00003a4 <memcmp>
c0011dae:	83 c4 10             	add    esp,0x10
c0011db1:	85 c0                	test   eax,eax
c0011db3:	75 21                	jne    c0011dd6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0011db5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011db9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011dbd:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0011dc1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011dc5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011dc8:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0011dcf:	89 d0                	mov    eax,edx
c0011dd1:	40                   	inc    eax
c0011dd2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011dd6:	50                   	push   eax
c0011dd7:	50                   	push   eax
c0011dd8:	68 0d f2 01 c0       	push   0xc001f20d
c0011ddd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011de4:	50                   	push   eax
c0011de5:	e8 06 e8 fe ff       	call   c00005f0 <strcmp>
c0011dea:	83 c4 10             	add    esp,0x10
c0011ded:	85 c0                	test   eax,eax
c0011def:	75 0f                	jne    c0011e00 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0011df1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011df4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e00:	50                   	push   eax
c0011e01:	50                   	push   eax
c0011e02:	68 15 f2 01 c0       	push   0xc001f215
c0011e07:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011e0e:	50                   	push   eax
c0011e0f:	e8 dc e7 fe ff       	call   c00005f0 <strcmp>
c0011e14:	83 c4 10             	add    esp,0x10
c0011e17:	85 c0                	test   eax,eax
c0011e19:	75 0f                	jne    c0011e2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0011e1b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011e1e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e26:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011e2a:	43                   	inc    ebx
c0011e2b:	e9 c6 fe ff ff       	jmp    c0011cf6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0011e30:	31 d2                	xor    edx,edx
c0011e32:	50                   	push   eax
c0011e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011e37:	52                   	push   edx
c0011e38:	50                   	push   eax
c0011e39:	55                   	push   ebp
c0011e3a:	e8 ab 83 ff ff       	call   c000a1ea <File::seek(unsigned long long)>
c0011e3f:	58                   	pop    eax
c0011e40:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e44:	e8 34 4f ff ff       	call   c0006d7d <malloc>
c0011e49:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011e4c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011e50:	31 d2                	xor    edx,edx
c0011e52:	58                   	pop    eax
c0011e53:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0011e57:	53                   	push   ebx
c0011e58:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011e5c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e60:	52                   	push   edx
c0011e61:	50                   	push   eax
c0011e62:	55                   	push   ebp
c0011e63:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011e66:	83 c4 14             	add    esp,0x14
c0011e69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011e6d:	e8 0b 4f ff ff       	call   c0006d7d <malloc>
c0011e72:	31 d2                	xor    edx,edx
c0011e74:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011e78:	83 c4 0c             	add    esp,0xc
c0011e7b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e7f:	52                   	push   edx
c0011e80:	50                   	push   eax
c0011e81:	55                   	push   ebp
c0011e82:	e8 63 83 ff ff       	call   c000a1ea <File::seek(unsigned long long)>
c0011e87:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011e8a:	31 d2                	xor    edx,edx
c0011e8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011e8f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011e93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e97:	52                   	push   edx
c0011e98:	50                   	push   eax
c0011e99:	55                   	push   ebp
c0011e9a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011e9d:	83 c4 20             	add    esp,0x20
c0011ea0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011ea8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011eac:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0011eb0:	0f 84 0b 03 00 00    	je     c00121c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0011eb6:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0011ebd:	31 d2                	xor    edx,edx
c0011ebf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ec3:	c1 e8 03             	shr    eax,0x3
c0011ec6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011eca:	51                   	push   ecx
c0011ecb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ecf:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0011ed3:	52                   	push   edx
c0011ed4:	50                   	push   eax
c0011ed5:	55                   	push   ebp
c0011ed6:	e8 0f 83 ff ff       	call   c000a1ea <File::seek(unsigned long long)>
c0011edb:	5b                   	pop    ebx
c0011edc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ee0:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0011ee7:	e8 91 4e ff ff       	call   c0006d7d <malloc>
c0011eec:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011eef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011ef3:	31 d2                	xor    edx,edx
c0011ef5:	5e                   	pop    esi
c0011ef6:	8d 44 24 58          	lea    eax,[esp+0x58]
c0011efa:	50                   	push   eax
c0011efb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011eff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f03:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0011f0a:	52                   	push   edx
c0011f0b:	50                   	push   eax
c0011f0c:	55                   	push   ebp
c0011f0d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011f10:	83 c4 20             	add    esp,0x20
c0011f13:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0011f1b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011f1f:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0011f23:	0f 8d 7c 02 00 00    	jge    c00121a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0011f29:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f31:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0011f36:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0011f39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011f3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f41:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0011f45:	89 d8                	mov    eax,ebx
c0011f47:	c1 e8 08             	shr    eax,0x8
c0011f4a:	89 c6                	mov    esi,eax
c0011f4c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011f50:	c1 e6 04             	shl    esi,0x4
c0011f53:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0011f57:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0011f5a:	85 d2                	test   edx,edx
c0011f5c:	0f 85 bf 00 00 00    	jne    c0012021 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011f62:	83 ec 0c             	sub    esp,0xc
c0011f65:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011f69:	03 06                	add    eax,DWORD PTR [esi]
c0011f6b:	50                   	push   eax
c0011f6c:	e8 4b f8 ff ff       	call   c00117bc <Thr::getAddressOfKernelSymbol(char const*)>
c0011f71:	83 c4 10             	add    esp,0x10
c0011f74:	89 c2                	mov    edx,eax
c0011f76:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0011f7b:	85 c0                	test   eax,eax
c0011f7d:	0f 85 9e 00 00 00    	jne    c0012021 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011f83:	83 ec 0c             	sub    esp,0xc
c0011f86:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011f8a:	03 06                	add    eax,DWORD PTR [esi]
c0011f8c:	50                   	push   eax
c0011f8d:	e8 ae 3d ff ff       	call   c0005d40 <Krnl::resolveCompatibilitySymbol(char*)>
c0011f92:	83 c4 10             	add    esp,0x10
c0011f95:	89 c2                	mov    edx,eax
c0011f97:	85 c0                	test   eax,eax
c0011f99:	0f 85 82 00 00 00    	jne    c0012021 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011f9f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011fa3:	50                   	push   eax
c0011fa4:	50                   	push   eax
c0011fa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fa9:	03 06                	add    eax,DWORD PTR [esi]
c0011fab:	50                   	push   eax
c0011fac:	68 4b f2 01 c0       	push   0xc001f24b
c0011fb1:	e8 51 7b ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c0011fb6:	58                   	pop    eax
c0011fb7:	5a                   	pop    edx
c0011fb8:	68 65 f2 01 c0       	push   0xc001f265
c0011fbd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011fc4:	50                   	push   eax
c0011fc5:	e8 9a e5 fe ff       	call   c0000564 <strcpy>
c0011fca:	59                   	pop    ecx
c0011fcb:	58                   	pop    eax
c0011fcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fd0:	03 06                	add    eax,DWORD PTR [esi]
c0011fd2:	50                   	push   eax
c0011fd3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011fda:	50                   	push   eax
c0011fdb:	e8 c4 e6 fe ff       	call   c00006a4 <strcat>
c0011fe0:	58                   	pop    eax
c0011fe1:	5a                   	pop    edx
c0011fe2:	68 fb f2 01 c0       	push   0xc001f2fb
c0011fe7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011fee:	50                   	push   eax
c0011fef:	e8 b0 e6 fe ff       	call   c00006a4 <strcat>
c0011ff4:	83 c4 10             	add    esp,0x10
c0011ff7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011ffc:	0f 84 5d 01 00 00    	je     c001215f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012002:	83 ec 0c             	sub    esp,0xc
c0012005:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001200c:	50                   	push   eax
c001200d:	e8 cb d7 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0012012:	83 c4 10             	add    esp,0x10
c0012015:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012019:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001201d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012021:	80 fb 01             	cmp    bl,0x1
c0012024:	0f 85 88 00 00 00    	jne    c00120b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001202a:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012031:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012035:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012039:	01 ce                	add    esi,ecx
c001203b:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012041:	0f 94 c0             	sete   al
c0012044:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001204a:	0f 94 c3             	sete   bl
c001204d:	09 c3                	or     ebx,eax
c001204f:	8b 06                	mov    eax,DWORD PTR [esi]
c0012051:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012056:	74 41                	je     c0012099 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012058:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001205b:	84 db                	test   bl,bl
c001205d:	75 15                	jne    c0012074 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001205f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012063:	66 83 f8 0c          	cmp    ax,0xc
c0012067:	76 05                	jbe    c001206e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012069:	b8 0c 00 00 00       	mov    eax,0xc
c001206e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012072:	76 37                	jbe    c00120ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012074:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012078:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001207d:	0f 84 dc 00 00 00    	je     c001215f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012083:	83 ec 0c             	sub    esp,0xc
c0012086:	68 7c f2 01 c0       	push   0xc001f27c
c001208b:	e8 4d d7 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0012090:	83 c4 10             	add    esp,0x10
c0012093:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012097:	eb 12                	jmp    c00120ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012099:	01 c1                	add    ecx,eax
c001209b:	84 db                	test   bl,bl
c001209d:	75 0c                	jne    c00120ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001209f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00120a3:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00120a7:	77 02                	ja     c00120ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00120a9:	01 d1                	add    ecx,edx
c00120ab:	89 0e                	mov    DWORD PTR [esi],ecx
c00120ad:	e9 ea 00 00 00       	jmp    c001219c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00120b2:	80 fb 02             	cmp    bl,0x2
c00120b5:	75 7c                	jne    c0012133 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00120b7:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00120be:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c00120c2:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c00120c6:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00120cc:	74 20                	je     c00120ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00120ce:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00120d4:	74 18                	je     c00120ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00120d6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00120da:	b9 0a 00 00 00       	mov    ecx,0xa
c00120df:	66 83 f8 0e          	cmp    ax,0xe
c00120e3:	77 03                	ja     c00120e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c00120e5:	8d 48 fc             	lea    ecx,[eax-0x4]
c00120e8:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c00120ec:	76 1f                	jbe    c001210d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c00120ee:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00120f2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00120f7:	74 66                	je     c001215f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00120f9:	83 ec 0c             	sub    esp,0xc
c00120fc:	68 98 f2 01 c0       	push   0xc001f298
c0012101:	e8 d7 d6 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0012106:	83 c4 10             	add    esp,0x10
c0012109:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001210d:	8b 06                	mov    eax,DWORD PTR [esi]
c001210f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012114:	74 13                	je     c0012129 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012116:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001211a:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012121:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012125:	01 c8                	add    eax,ecx
c0012127:	eb 04                	jmp    c001212d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012129:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001212d:	01 c2                	add    edx,eax
c001212f:	89 16                	mov    DWORD PTR [esi],edx
c0012131:	eb 69                	jmp    c001219c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012133:	0f b6 db             	movzx  ebx,bl
c0012136:	50                   	push   eax
c0012137:	50                   	push   eax
c0012138:	53                   	push   ebx
c0012139:	68 b4 f2 01 c0       	push   0xc001f2b4
c001213e:	e8 c4 79 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c0012143:	83 c4 10             	add    esp,0x10
c0012146:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001214b:	74 12                	je     c001215f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001214d:	83 ec 0c             	sub    esp,0xc
c0012150:	68 bf f2 01 c0       	push   0xc001f2bf
c0012155:	e8 83 d6 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c001215a:	83 c4 10             	add    esp,0x10
c001215d:	eb 3d                	jmp    c001219c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001215f:	83 ec 0c             	sub    esp,0xc
c0012162:	55                   	push   ebp
c0012163:	e8 22 80 ff ff       	call   c000a18a <File::close()>
c0012168:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001216b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001216e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012171:	59                   	pop    ecx
c0012172:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012176:	e8 12 4c ff ff       	call   c0006d8d <free>
c001217b:	5b                   	pop    ebx
c001217c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012180:	e8 08 4c ff ff       	call   c0006d8d <free>
c0012185:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012188:	e8 00 4c ff ff       	call   c0006d8d <free>
c001218d:	5e                   	pop    esi
c001218e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012192:	e8 f6 4b ff ff       	call   c0006d8d <free>
c0012197:	83 c4 10             	add    esp,0x10
c001219a:	eb 21                	jmp    c00121bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001219c:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00121a0:	e9 76 fd ff ff       	jmp    c0011f1b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c00121a5:	83 ec 0c             	sub    esp,0xc
c00121a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00121ac:	e8 dc 4b ff ff       	call   c0006d8d <free>
c00121b1:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00121b5:	83 c4 10             	add    esp,0x10
c00121b8:	e9 eb fc ff ff       	jmp    c0011ea8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c00121bd:	31 c0                	xor    eax,eax
c00121bf:	eb 33                	jmp    c00121f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c00121c1:	83 ec 0c             	sub    esp,0xc
c00121c4:	55                   	push   ebp
c00121c5:	e8 c0 7f ff ff       	call   c000a18a <File::close()>
c00121ca:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00121cd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00121d0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00121d3:	58                   	pop    eax
c00121d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121d8:	e8 b0 4b ff ff       	call   c0006d8d <free>
c00121dd:	89 3c 24             	mov    DWORD PTR [esp],edi
c00121e0:	e8 a8 4b ff ff       	call   c0006d8d <free>
c00121e5:	5a                   	pop    edx
c00121e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00121ea:	e8 9e 4b ff ff       	call   c0006d8d <free>
c00121ef:	83 c4 10             	add    esp,0x10
c00121f2:	b0 01                	mov    al,0x1
c00121f4:	81 c4 5c 03 00 00    	add    esp,0x35c
c00121fa:	5b                   	pop    ebx
c00121fb:	5e                   	pop    esi
c00121fc:	5f                   	pop    edi
c00121fd:	5d                   	pop    ebp
c00121fe:	c3                   	ret    

c00121ff <Thr::getDriverBaseFromAddress(unsigned long)>:
c00121ff:	56                   	push   esi
c0012200:	31 d2                	xor    edx,edx
c0012202:	53                   	push   ebx
c0012203:	8b 1d c0 34 02 c0    	mov    ebx,DWORD PTR ds:0xc00234c0
c0012209:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001220d:	39 d3                	cmp    ebx,edx
c001220f:	7e 1b                	jle    c001222c <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012211:	8b 04 95 e0 36 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc920]
c0012218:	39 c8                	cmp    eax,ecx
c001221a:	77 0d                	ja     c0012229 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001221c:	8b 34 95 e0 34 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdcb20]
c0012223:	01 c6                	add    esi,eax
c0012225:	39 ce                	cmp    esi,ecx
c0012227:	77 05                	ja     c001222e <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012229:	42                   	inc    edx
c001222a:	eb e1                	jmp    c001220d <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001222c:	31 c0                	xor    eax,eax
c001222e:	5b                   	pop    ebx
c001222f:	5e                   	pop    esi
c0012230:	c3                   	ret    

c0012231 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012231:	53                   	push   ebx
c0012232:	31 c0                	xor    eax,eax
c0012234:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012238:	8b 1d c0 34 02 c0    	mov    ebx,DWORD PTR ds:0xc00234c0
c001223e:	39 c3                	cmp    ebx,eax
c0012240:	7e 22                	jle    c0012264 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012242:	8b 14 85 e0 36 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc920]
c0012249:	39 ca                	cmp    edx,ecx
c001224b:	77 14                	ja     c0012261 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001224d:	03 14 85 e0 34 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdcb20]
c0012254:	39 ca                	cmp    edx,ecx
c0012256:	76 09                	jbe    c0012261 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012258:	8b 04 85 e0 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc720]
c001225f:	eb 05                	jmp    c0012266 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012261:	40                   	inc    eax
c0012262:	eb da                	jmp    c001223e <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012264:	31 c0                	xor    eax,eax
c0012266:	5b                   	pop    ebx
c0012267:	c3                   	ret    

c0012268 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012268:	53                   	push   ebx
c0012269:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001226d:	53                   	push   ebx
c001226e:	e8 8c ff ff ff       	call   c00121ff <Thr::getDriverBaseFromAddress(unsigned long)>
c0012273:	5a                   	pop    edx
c0012274:	31 d2                	xor    edx,edx
c0012276:	85 c0                	test   eax,eax
c0012278:	74 04                	je     c001227e <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001227a:	89 da                	mov    edx,ebx
c001227c:	29 c2                	sub    edx,eax
c001227e:	89 d0                	mov    eax,edx
c0012280:	5b                   	pop    ebx
c0012281:	c3                   	ret    

c0012282 <Thr::loadDLL(char const*, bool)>:
c0012282:	55                   	push   ebp
c0012283:	57                   	push   edi
c0012284:	56                   	push   esi
c0012285:	53                   	push   ebx
c0012286:	81 ec 34 01 00 00    	sub    esp,0x134
c001228c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012293:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001229a:	56                   	push   esi
c001229b:	68 d7 f2 01 c0       	push   0xc001f2d7
c00122a0:	e8 62 78 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c00122a5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00122ac:	e8 cc 4a ff ff       	call   c0006d7d <malloc>
c00122b1:	83 c4 0c             	add    esp,0xc
c00122b4:	89 c3                	mov    ebx,eax
c00122b6:	ff 35 b0 3c 02 c0    	push   DWORD PTR ds:0xc0023cb0
c00122bc:	56                   	push   esi
c00122bd:	50                   	push   eax
c00122be:	e8 af 7d ff ff       	call   c000a072 <File::File(char const*, Process*)>
c00122c3:	83 c4 10             	add    esp,0x10
c00122c6:	85 db                	test   ebx,ebx
c00122c8:	75 3c                	jne    c0012306 <Thr::loadDLL(char const*, bool)+0x84>
c00122ca:	89 f8                	mov    eax,edi
c00122cc:	84 c0                	test   al,al
c00122ce:	0f 84 d2 01 00 00    	je     c00124a6 <Thr::loadDLL(char const*, bool)+0x224>
c00122d4:	55                   	push   ebp
c00122d5:	55                   	push   ebp
c00122d6:	68 e8 f2 01 c0       	push   0xc001f2e8
c00122db:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00122df:	55                   	push   ebp
c00122e0:	e8 7f e2 fe ff       	call   c0000564 <strcpy>
c00122e5:	58                   	pop    eax
c00122e6:	5a                   	pop    edx
c00122e7:	56                   	push   esi
c00122e8:	55                   	push   ebp
c00122e9:	e8 b6 e3 fe ff       	call   c00006a4 <strcat>
c00122ee:	59                   	pop    ecx
c00122ef:	58                   	pop    eax
c00122f0:	68 fb f2 01 c0       	push   0xc001f2fb
c00122f5:	55                   	push   ebp
c00122f6:	e8 a9 e3 fe ff       	call   c00006a4 <strcat>
c00122fb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00122fe:	e8 da d4 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0012303:	83 c4 10             	add    esp,0x10
c0012306:	51                   	push   ecx
c0012307:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001230b:	50                   	push   eax
c001230c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012310:	50                   	push   eax
c0012311:	53                   	push   ebx
c0012312:	e8 c1 80 ff ff       	call   c000a3d8 <File::stat(unsigned long long*, bool*)>
c0012317:	83 c4 10             	add    esp,0x10
c001231a:	85 db                	test   ebx,ebx
c001231c:	74 0c                	je     c001232a <Thr::loadDLL(char const*, bool)+0xa8>
c001231e:	83 ec 0c             	sub    esp,0xc
c0012321:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012323:	53                   	push   ebx
c0012324:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012327:	83 c4 10             	add    esp,0x10
c001232a:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001232f:	75 0a                	jne    c001233b <Thr::loadDLL(char const*, bool)+0xb9>
c0012331:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012335:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012339:	75 3c                	jne    c0012377 <Thr::loadDLL(char const*, bool)+0xf5>
c001233b:	89 f8                	mov    eax,edi
c001233d:	84 c0                	test   al,al
c001233f:	0f 84 49 01 00 00    	je     c001248e <Thr::loadDLL(char const*, bool)+0x20c>
c0012345:	51                   	push   ecx
c0012346:	51                   	push   ecx
c0012347:	68 e8 f2 01 c0       	push   0xc001f2e8
c001234c:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012350:	53                   	push   ebx
c0012351:	e8 0e e2 fe ff       	call   c0000564 <strcpy>
c0012356:	5d                   	pop    ebp
c0012357:	58                   	pop    eax
c0012358:	56                   	push   esi
c0012359:	53                   	push   ebx
c001235a:	e8 45 e3 fe ff       	call   c00006a4 <strcat>
c001235f:	58                   	pop    eax
c0012360:	5a                   	pop    edx
c0012361:	68 fb f2 01 c0       	push   0xc001f2fb
c0012366:	53                   	push   ebx
c0012367:	e8 38 e3 fe ff       	call   c00006a4 <strcat>
c001236c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001236f:	e8 69 d4 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0012374:	83 c4 10             	add    esp,0x10
c0012377:	52                   	push   edx
c0012378:	6a 03                	push   0x3
c001237a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001237e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012382:	05 ff 0f 00 00       	add    eax,0xfff
c0012387:	83 d2 00             	adc    edx,0x0
c001238a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001238e:	50                   	push   eax
c001238f:	ff 35 94 08 02 c0    	push   DWORD PTR ds:0xc0020894
c0012395:	e8 62 6c ff ff       	call   c0008ffc <VAS::allocatePages(int, int)>
c001239a:	59                   	pop    ecx
c001239b:	89 c3                	mov    ebx,eax
c001239d:	5d                   	pop    ebp
c001239e:	50                   	push   eax
c001239f:	68 6e df 01 c0       	push   0xc001df6e
c00123a4:	e8 5e 77 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c00123a9:	89 34 24             	mov    DWORD PTR [esp],esi
c00123ac:	e8 13 e1 fe ff       	call   c00004c4 <strlen>
c00123b1:	8b 2d c0 34 02 c0    	mov    ebp,DWORD PTR ds:0xc00234c0
c00123b7:	40                   	inc    eax
c00123b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00123bb:	e8 bd 49 ff ff       	call   c0006d7d <malloc>
c00123c0:	89 04 ad e0 38 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdc720],eax
c00123c7:	58                   	pop    eax
c00123c8:	a1 c0 34 02 c0       	mov    eax,ds:0xc00234c0
c00123cd:	5a                   	pop    edx
c00123ce:	56                   	push   esi
c00123cf:	ff 34 85 e0 38 02 c0 	push   DWORD PTR [eax*4-0x3ffdc720]
c00123d6:	e8 89 e1 fe ff       	call   c0000564 <strcpy>
c00123db:	a1 c0 34 02 c0       	mov    eax,ds:0xc00234c0
c00123e0:	8d 50 01             	lea    edx,[eax+0x1]
c00123e3:	89 1c 85 e0 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc920],ebx
c00123ea:	89 15 c0 34 02 c0    	mov    DWORD PTR ds:0xc00234c0,edx
c00123f0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00123f4:	83 c4 0c             	add    esp,0xc
c00123f7:	89 14 85 e0 34 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcb20],edx
c00123fe:	6a 01                	push   0x1
c0012400:	53                   	push   ebx
c0012401:	56                   	push   esi
c0012402:	e8 c2 f6 ff ff       	call   c0011ac9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012407:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001240b:	83 c4 10             	add    esp,0x10
c001240e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012413:	0f 85 89 00 00 00    	jne    c00124a2 <Thr::loadDLL(char const*, bool)+0x220>
c0012419:	89 f8                	mov    eax,edi
c001241b:	84 c0                	test   al,al
c001241d:	74 73                	je     c0012492 <Thr::loadDLL(char const*, bool)+0x210>
c001241f:	83 ec 0c             	sub    esp,0xc
c0012422:	68 fd f2 01 c0       	push   0xc001f2fd
c0012427:	e8 b1 d3 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c001242c:	83 c4 10             	add    esp,0x10
c001242f:	eb 61                	jmp    c0012492 <Thr::loadDLL(char const*, bool)+0x210>
c0012431:	50                   	push   eax
c0012432:	50                   	push   eax
c0012433:	89 e8                	mov    eax,ebp
c0012435:	c1 e0 0c             	shl    eax,0xc
c0012438:	01 d8                	add    eax,ebx
c001243a:	50                   	push   eax
c001243b:	ff 35 94 08 02 c0    	push   DWORD PTR ds:0xc0020894
c0012441:	e8 34 67 ff ff       	call   c0008b7a <VAS::getPageTableEntry(unsigned long)>
c0012446:	83 c4 10             	add    esp,0x10
c0012449:	8b 00                	mov    eax,DWORD PTR [eax]
c001244b:	a8 60                	test   al,0x60
c001244d:	75 11                	jne    c0012460 <Thr::loadDLL(char const*, bool)+0x1de>
c001244f:	83 ec 0c             	sub    esp,0xc
c0012452:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012457:	50                   	push   eax
c0012458:	e8 85 4c ff ff       	call   c00070e2 <Phys::freePage(unsigned long)>
c001245d:	83 c4 10             	add    esp,0x10
c0012460:	45                   	inc    ebp
c0012461:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012465:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012469:	05 ff 0f 00 00       	add    eax,0xfff
c001246e:	bf 00 00 00 00       	mov    edi,0x0
c0012473:	83 d2 00             	adc    edx,0x0
c0012476:	0f ac d0 0c          	shrd   eax,edx,0xc
c001247a:	c1 ea 0c             	shr    edx,0xc
c001247d:	39 c5                	cmp    ebp,eax
c001247f:	89 d1                	mov    ecx,edx
c0012481:	89 f8                	mov    eax,edi
c0012483:	19 c8                	sbb    eax,ecx
c0012485:	72 aa                	jb     c0012431 <Thr::loadDLL(char const*, bool)+0x1af>
c0012487:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001248c:	75 18                	jne    c00124a6 <Thr::loadDLL(char const*, bool)+0x224>
c001248e:	31 db                	xor    ebx,ebx
c0012490:	eb 14                	jmp    c00124a6 <Thr::loadDLL(char const*, bool)+0x224>
c0012492:	83 ec 0c             	sub    esp,0xc
c0012495:	68 1c f3 01 c0       	push   0xc001f31c
c001249a:	e8 3e d3 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c001249f:	83 c4 10             	add    esp,0x10
c00124a2:	31 ed                	xor    ebp,ebp
c00124a4:	eb bb                	jmp    c0012461 <Thr::loadDLL(char const*, bool)+0x1df>
c00124a6:	81 c4 2c 01 00 00    	add    esp,0x12c
c00124ac:	89 d8                	mov    eax,ebx
c00124ae:	5b                   	pop    ebx
c00124af:	5e                   	pop    esi
c00124b0:	5f                   	pop    edi
c00124b1:	5d                   	pop    ebp
c00124b2:	c3                   	ret    

c00124b3 <Thr::executeDLL(unsigned long, void*)>:
c00124b3:	56                   	push   esi
c00124b4:	53                   	push   ebx
c00124b5:	52                   	push   edx
c00124b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00124ba:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00124be:	85 db                	test   ebx,ebx
c00124c0:	75 10                	jne    c00124d2 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00124c2:	83 ec 0c             	sub    esp,0xc
c00124c5:	68 38 f3 01 c0       	push   0xc001f338
c00124ca:	e8 0e d3 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c00124cf:	83 c4 10             	add    esp,0x10
c00124d2:	50                   	push   eax
c00124d3:	50                   	push   eax
c00124d4:	53                   	push   ebx
c00124d5:	68 62 f3 01 c0       	push   0xc001f362
c00124da:	e8 28 76 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c00124df:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00124e3:	89 d8                	mov    eax,ebx
c00124e5:	83 c4 14             	add    esp,0x14
c00124e8:	5b                   	pop    ebx
c00124e9:	5e                   	pop    esi
c00124ea:	ff e0                	jmp    eax

c00124ec <userModeEntryPoint(void*)>:
c00124ec:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c00124f1:	48                   	dec    eax
c00124f2:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c00124f7:	75 03                	jne    c00124fc <userModeEntryPoint(void*)+0x10>
c00124f9:	fb                   	sti    
c00124fa:	66 90                	xchg   ax,ax
c00124fc:	fb                   	sti    
c00124fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012502:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012505:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001250b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001250f:	e9 4b dd fe ff       	jmp    c000025f <goToUsermode>

c0012514 <changeTSS>:
c0012514:	83 ec 14             	sub    esp,0x14
c0012517:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001251c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001251f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0012524:	c1 e2 15             	shl    edx,0x15
c0012527:	29 d0                	sub    eax,edx
c0012529:	50                   	push   eax
c001252a:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c001252f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012535:	05 7c 11 00 00       	add    eax,0x117c
c001253a:	50                   	push   eax
c001253b:	e8 b8 5c ff ff       	call   c00081f8 <TSS::setESP(unsigned long)>
c0012540:	83 c4 1c             	add    esp,0x1c
c0012543:	c3                   	ret    

c0012544 <switchToThread(ThreadControlBlock*)>:
c0012544:	57                   	push   edi
c0012545:	a1 84 3c 02 c0       	mov    eax,ds:0xc0023c84
c001254a:	56                   	push   esi
c001254b:	85 c0                	test   eax,eax
c001254d:	53                   	push   ebx
c001254e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012552:	0f 85 88 00 00 00    	jne    c00125e0 <switchToThread(ThreadControlBlock*)+0x9c>
c0012558:	8a 43 40             	mov    al,BYTE PTR [ebx+0x40]
c001255b:	3c ff                	cmp    al,0xff
c001255d:	74 7d                	je     c00125dc <switchToThread(ThreadControlBlock*)+0x98>
c001255f:	0f b6 d0             	movzx  edx,al
c0012562:	b8 00 04 00 00       	mov    eax,0x400
c0012567:	29 d0                	sub    eax,edx
c0012569:	d1 f8                	sar    eax,1
c001256b:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c001256e:	66 90                	xchg   ax,ax
c0012570:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0012573:	ff 15 78 3d 02 c0    	call   DWORD PTR ds:0xc0023d78
c0012579:	a3 c8 3c 02 c0       	mov    ds:0xc0023cc8,eax
c001257e:	89 15 cc 3c 02 c0    	mov    DWORD PTR ds:0xc0023ccc,edx
c0012584:	89 c6                	mov    esi,eax
c0012586:	89 d7                	mov    edi,edx
c0012588:	2b 35 b8 3c 02 c0    	sub    esi,DWORD PTR ds:0xc0023cb8
c001258e:	a3 b8 3c 02 c0       	mov    ds:0xc0023cb8,eax
c0012593:	1b 3d bc 3c 02 c0    	sbb    edi,DWORD PTR ds:0xc0023cbc
c0012599:	89 35 c0 3c 02 c0    	mov    DWORD PTR ds:0xc0023cc0,esi
c001259f:	89 3d c4 3c 02 c0    	mov    DWORD PTR ds:0xc0023cc4,edi
c00125a5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00125ab:	89 15 bc 3c 02 c0    	mov    DWORD PTR ds:0xc0023cbc,edx
c00125b1:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00125b4:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00125b7:	01 c6                	add    esi,eax
c00125b9:	11 d7                	adc    edi,edx
c00125bb:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00125be:	83 ec 0c             	sub    esp,0xc
c00125c1:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00125c4:	53                   	push   ebx
c00125c5:	e8 cd dc fe ff       	call   c0000297 <switchToThreadASM>
c00125ca:	0f 20 c0             	mov    eax,cr0
c00125cd:	83 c8 08             	or     eax,0x8
c00125d0:	0f 22 c0             	mov    cr0,eax
c00125d3:	83 c4 10             	add    esp,0x10
c00125d6:	5b                   	pop    ebx
c00125d7:	5e                   	pop    esi
c00125d8:	5f                   	pop    edi
c00125d9:	c3                   	ret    
c00125da:	66 90                	xchg   ax,ax
c00125dc:	31 c0                	xor    eax,eax
c00125de:	eb 90                	jmp    c0012570 <switchToThread(ThreadControlBlock*)+0x2c>
c00125e0:	5b                   	pop    ebx
c00125e1:	c7 05 80 3c 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023c80,0x1
c00125eb:	5e                   	pop    esi
c00125ec:	5f                   	pop    edi
c00125ed:	c3                   	ret    
c00125ee:	66 90                	xchg   ax,ax

c00125f0 <Process::addArgs(char**)>:
c00125f0:	57                   	push   edi
c00125f1:	56                   	push   esi
c00125f2:	53                   	push   ebx
c00125f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00125f7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00125fb:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0012605:	85 ff                	test   edi,edi
c0012607:	74 43                	je     c001264c <Process::addArgs(char**)+0x5c>
c0012609:	8b 07                	mov    eax,DWORD PTR [edi]
c001260b:	85 c0                	test   eax,eax
c001260d:	74 3d                	je     c001264c <Process::addArgs(char**)+0x5c>
c001260f:	31 db                	xor    ebx,ebx
c0012611:	8d 76 00             	lea    esi,[esi+0x0]
c0012614:	83 ec 0c             	sub    esp,0xc
c0012617:	50                   	push   eax
c0012618:	e8 a7 de fe ff       	call   c00004c4 <strlen>
c001261d:	40                   	inc    eax
c001261e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012621:	e8 57 47 ff ff       	call   c0006d7d <malloc>
c0012626:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001262d:	5a                   	pop    edx
c001262e:	59                   	pop    ecx
c001262f:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0012632:	43                   	inc    ebx
c0012633:	50                   	push   eax
c0012634:	e8 2b df fe ff       	call   c0000564 <strcpy>
c0012639:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c001263f:	83 c4 10             	add    esp,0x10
c0012642:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0012645:	85 c0                	test   eax,eax
c0012647:	75 cb                	jne    c0012614 <Process::addArgs(char**)+0x24>
c0012649:	8d 76 00             	lea    esi,[esi+0x0]
c001264c:	5b                   	pop    ebx
c001264d:	5e                   	pop    esi
c001264e:	5f                   	pop    edi
c001264f:	c3                   	ret    

c0012650 <Process::Process(char const*, Process*, char**)>:
c0012650:	56                   	push   esi
c0012651:	53                   	push   ebx
c0012652:	83 ec 14             	sub    esp,0x14
c0012655:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012659:	05 0c 02 00 00       	add    eax,0x20c
c001265e:	bb 07 00 00 00       	mov    ebx,0x7
c0012663:	89 c6                	mov    esi,eax
c0012665:	8d 76 00             	lea    esi,[esi+0x0]
c0012668:	85 db                	test   ebx,ebx
c001266a:	78 14                	js     c0012680 <Process::Process(char const*, Process*, char**)+0x30>
c001266c:	83 ec 0c             	sub    esp,0xc
c001266f:	56                   	push   esi
c0012670:	e8 87 ab 00 00       	call   c001d1fc <ThreadControlBlock::ThreadControlBlock()>
c0012675:	83 c4 10             	add    esp,0x10
c0012678:	83 c6 5f             	add    esi,0x5f
c001267b:	4b                   	dec    ebx
c001267c:	eb ea                	jmp    c0012668 <Process::Process(char const*, Process*, char**)+0x18>
c001267e:	66 90                	xchg   ax,ax
c0012680:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012684:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001268b:	83 ec 0c             	sub    esp,0xc
c001268e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012692:	e8 cf cf ff ff       	call   c000f666 <Krnl::newProcessEnv(Process*)>
c0012697:	83 c4 10             	add    esp,0x10
c001269a:	89 c2                	mov    edx,eax
c001269c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126a0:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00126a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126aa:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00126b3:	a1 d0 01 02 c0       	mov    eax,ds:0xc00201d0
c00126b8:	8d 50 01             	lea    edx,[eax+0x1]
c00126bb:	89 15 d0 01 02 c0    	mov    DWORD PTR ds:0xc00201d0,edx
c00126c1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00126c5:	89 02                	mov    DWORD PTR [edx],eax
c00126c7:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00126cf:	83 ec 0c             	sub    esp,0xc
c00126d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00126d6:	e8 a2 46 ff ff       	call   c0006d7d <malloc>
c00126db:	83 c4 10             	add    esp,0x10
c00126de:	89 c3                	mov    ebx,eax
c00126e0:	83 ec 08             	sub    esp,0x8
c00126e3:	6a 00                	push   0x0
c00126e5:	53                   	push   ebx
c00126e6:	e8 b9 6c ff ff       	call   c00093a4 <VAS::VAS(bool)>
c00126eb:	83 c4 10             	add    esp,0x10
c00126ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126f2:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00126f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126fc:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012706:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001270a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001270e:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0012714:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012718:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001271e:	85 c0                	test   eax,eax
c0012720:	74 42                	je     c0012764 <Process::Process(char const*, Process*, char**)+0x114>
c0012722:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012726:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001272c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0012732:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012736:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001273c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012740:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012746:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001274c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012750:	05 0c 01 00 00       	add    eax,0x10c
c0012755:	83 ec 08             	sub    esp,0x8
c0012758:	52                   	push   edx
c0012759:	50                   	push   eax
c001275a:	e8 05 de fe ff       	call   c0000564 <strcpy>
c001275f:	83 c4 10             	add    esp,0x10
c0012762:	eb 64                	jmp    c00127c8 <Process::Process(char const*, Process*, char**)+0x178>
c0012764:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c001276c:	83 ec 0c             	sub    esp,0xc
c001276f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012773:	e8 05 46 ff ff       	call   c0006d7d <malloc>
c0012778:	83 c4 10             	add    esp,0x10
c001277b:	89 c3                	mov    ebx,eax
c001277d:	83 ec 08             	sub    esp,0x8
c0012780:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012784:	53                   	push   ebx
c0012785:	e8 12 58 ff ff       	call   c0007f9c <VgaText::VgaText(char const*)>
c001278a:	83 c4 10             	add    esp,0x10
c001278d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012791:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0012797:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001279b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00127a1:	83 ec 0c             	sub    esp,0xc
c00127a4:	50                   	push   eax
c00127a5:	e8 96 50 ff ff       	call   c0007840 <addToTerminalCycle(VgaText*)>
c00127aa:	83 c4 10             	add    esp,0x10
c00127ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127b1:	05 0c 01 00 00       	add    eax,0x10c
c00127b6:	83 ec 08             	sub    esp,0x8
c00127b9:	68 81 f3 01 c0       	push   0xc001f381
c00127be:	50                   	push   eax
c00127bf:	e8 a0 dd fe ff       	call   c0000564 <strcpy>
c00127c4:	83 c4 10             	add    esp,0x10
c00127c7:	90                   	nop
c00127c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127cc:	83 c0 0c             	add    eax,0xc
c00127cf:	83 ec 08             	sub    esp,0x8
c00127d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00127d6:	50                   	push   eax
c00127d7:	e8 88 dd fe ff       	call   c0000564 <strcpy>
c00127dc:	83 c4 10             	add    esp,0x10
c00127df:	83 ec 08             	sub    esp,0x8
c00127e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00127e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00127ea:	e8 01 fe ff ff       	call   c00125f0 <Process::addArgs(char**)>
c00127ef:	83 c4 10             	add    esp,0x10
c00127f2:	83 ec 08             	sub    esp,0x8
c00127f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00127f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00127fd:	e8 91 ed ff ff       	call   c0011593 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0012802:	83 c4 10             	add    esp,0x10
c0012805:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012809:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001280d:	83 f0 01             	xor    eax,0x1
c0012810:	88 c2                	mov    dl,al
c0012812:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012816:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c001281c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0012821:	83 ec 08             	sub    esp,0x8
c0012824:	50                   	push   eax
c0012825:	68 d8 f3 01 c0       	push   0xc001f3d8
c001282a:	e8 d8 72 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c001282f:	83 c4 10             	add    esp,0x10
c0012832:	90                   	nop
c0012833:	83 c4 14             	add    esp,0x14
c0012836:	5b                   	pop    ebx
c0012837:	5e                   	pop    esi
c0012838:	c3                   	ret    
c0012839:	90                   	nop
c001283a:	66 90                	xchg   ax,ax

c001283c <Process::Process(bool, char const*, Process*, char**)>:
c001283c:	56                   	push   esi
c001283d:	53                   	push   ebx
c001283e:	83 ec 24             	sub    esp,0x24
c0012841:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012845:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012849:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001284d:	05 0c 02 00 00       	add    eax,0x20c
c0012852:	bb 07 00 00 00       	mov    ebx,0x7
c0012857:	89 c6                	mov    esi,eax
c0012859:	8d 76 00             	lea    esi,[esi+0x0]
c001285c:	85 db                	test   ebx,ebx
c001285e:	78 14                	js     c0012874 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0012860:	83 ec 0c             	sub    esp,0xc
c0012863:	56                   	push   esi
c0012864:	e8 93 a9 00 00       	call   c001d1fc <ThreadControlBlock::ThreadControlBlock()>
c0012869:	83 c4 10             	add    esp,0x10
c001286c:	83 c6 5f             	add    esi,0x5f
c001286f:	4b                   	dec    ebx
c0012870:	eb ea                	jmp    c001285c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0012872:	66 90                	xchg   ax,ax
c0012874:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012878:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001287f:	83 ec 0c             	sub    esp,0xc
c0012882:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012886:	e8 db cd ff ff       	call   c000f666 <Krnl::newProcessEnv(Process*)>
c001288b:	83 c4 10             	add    esp,0x10
c001288e:	89 c2                	mov    edx,eax
c0012890:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012894:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001289a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001289e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00128a7:	a1 d0 01 02 c0       	mov    eax,ds:0xc00201d0
c00128ac:	8d 50 01             	lea    edx,[eax+0x1]
c00128af:	89 15 d0 01 02 c0    	mov    DWORD PTR ds:0xc00201d0,edx
c00128b5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00128b9:	89 02                	mov    DWORD PTR [edx],eax
c00128bb:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00128c3:	83 ec 0c             	sub    esp,0xc
c00128c6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00128ca:	e8 ae 44 ff ff       	call   c0006d7d <malloc>
c00128cf:	83 c4 10             	add    esp,0x10
c00128d2:	89 c3                	mov    ebx,eax
c00128d4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00128d9:	83 ec 08             	sub    esp,0x8
c00128dc:	50                   	push   eax
c00128dd:	53                   	push   ebx
c00128de:	e8 c1 6a ff ff       	call   c00093a4 <VAS::VAS(bool)>
c00128e3:	83 c4 10             	add    esp,0x10
c00128e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128ea:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00128f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128f4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00128fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012902:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012906:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001290c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012910:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012916:	85 c0                	test   eax,eax
c0012918:	74 42                	je     c001295c <Process::Process(bool, char const*, Process*, char**)+0x120>
c001291a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001291e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012924:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001292a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001292e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012934:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012938:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001293e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012944:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012948:	05 0c 01 00 00       	add    eax,0x10c
c001294d:	83 ec 08             	sub    esp,0x8
c0012950:	52                   	push   edx
c0012951:	50                   	push   eax
c0012952:	e8 0d dc fe ff       	call   c0000564 <strcpy>
c0012957:	83 c4 10             	add    esp,0x10
c001295a:	eb 64                	jmp    c00129c0 <Process::Process(bool, char const*, Process*, char**)+0x184>
c001295c:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c0012964:	83 ec 0c             	sub    esp,0xc
c0012967:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001296b:	e8 0d 44 ff ff       	call   c0006d7d <malloc>
c0012970:	83 c4 10             	add    esp,0x10
c0012973:	89 c3                	mov    ebx,eax
c0012975:	83 ec 08             	sub    esp,0x8
c0012978:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001297c:	53                   	push   ebx
c001297d:	e8 1a 56 ff ff       	call   c0007f9c <VgaText::VgaText(char const*)>
c0012982:	83 c4 10             	add    esp,0x10
c0012985:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012989:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001298f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012993:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012999:	83 ec 0c             	sub    esp,0xc
c001299c:	50                   	push   eax
c001299d:	e8 9e 4e ff ff       	call   c0007840 <addToTerminalCycle(VgaText*)>
c00129a2:	83 c4 10             	add    esp,0x10
c00129a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129a9:	05 0c 01 00 00       	add    eax,0x10c
c00129ae:	83 ec 08             	sub    esp,0x8
c00129b1:	68 81 f3 01 c0       	push   0xc001f381
c00129b6:	50                   	push   eax
c00129b7:	e8 a8 db fe ff       	call   c0000564 <strcpy>
c00129bc:	83 c4 10             	add    esp,0x10
c00129bf:	90                   	nop
c00129c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129c4:	83 c0 0c             	add    eax,0xc
c00129c7:	83 ec 08             	sub    esp,0x8
c00129ca:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00129ce:	50                   	push   eax
c00129cf:	e8 90 db fe ff       	call   c0000564 <strcpy>
c00129d4:	83 c4 10             	add    esp,0x10
c00129d7:	83 ec 08             	sub    esp,0x8
c00129da:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00129de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00129e2:	e8 09 fc ff ff       	call   c00125f0 <Process::addArgs(char**)>
c00129e7:	83 c4 10             	add    esp,0x10
c00129ea:	90                   	nop
c00129eb:	83 c4 24             	add    esp,0x24
c00129ee:	5b                   	pop    ebx
c00129ef:	5e                   	pop    esi
c00129f0:	c3                   	ret    
c00129f1:	8d 76 00             	lea    esi,[esi+0x0]

c00129f4 <taskStartupFunction>:
c00129f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00129f9:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00129fc:	c3                   	ret    
c00129fd:	90                   	nop
c00129fe:	66 90                	xchg   ax,ax

c0012a00 <Semaphore::Semaphore(int)>:
c0012a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a08:	89 10                	mov    DWORD PTR [eax],edx
c0012a0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a0e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0012a15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a19:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012a20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a24:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012a2b:	90                   	nop
c0012a2c:	c3                   	ret    
c0012a2d:	90                   	nop
c0012a2e:	66 90                	xchg   ax,ax

c0012a30 <Mutex::Mutex()>:
c0012a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a34:	6a 01                	push   0x1
c0012a36:	50                   	push   eax
c0012a37:	e8 c4 ff ff ff       	call   c0012a00 <Semaphore::Semaphore(int)>
c0012a3c:	83 c4 08             	add    esp,0x8
c0012a3f:	90                   	nop
c0012a40:	c3                   	ret    
c0012a41:	90                   	nop
c0012a42:	66 90                	xchg   ax,ax

c0012a44 <Process::createThread(void (*)(void*), void*, int)>:
c0012a44:	57                   	push   edi
c0012a45:	31 c9                	xor    ecx,ecx
c0012a47:	56                   	push   esi
c0012a48:	53                   	push   ebx
c0012a49:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012a4d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0012a54:	89 f2                	mov    edx,esi
c0012a56:	66 90                	xchg   ax,ax
c0012a58:	0f b7 c2             	movzx  eax,dx
c0012a5b:	83 e2 01             	and    edx,0x1
c0012a5e:	74 14                	je     c0012a74 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0012a60:	d1 f8                	sar    eax,1
c0012a62:	41                   	inc    ecx
c0012a63:	89 c2                	mov    edx,eax
c0012a65:	83 f9 10             	cmp    ecx,0x10
c0012a68:	75 ee                	jne    c0012a58 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0012a6a:	31 db                	xor    ebx,ebx
c0012a6c:	89 d8                	mov    eax,ebx
c0012a6e:	5b                   	pop    ebx
c0012a6f:	5e                   	pop    esi
c0012a70:	5f                   	pop    edi
c0012a71:	c3                   	ret    
c0012a72:	66 90                	xchg   ax,ax
c0012a74:	b8 01 00 00 00       	mov    eax,0x1
c0012a79:	d3 e0                	shl    eax,cl
c0012a7b:	09 c6                	or     esi,eax
c0012a7d:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0012a80:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0012a87:	01 c0                	add    eax,eax
c0012a89:	01 c8                	add    eax,ecx
c0012a8b:	8d 04 80             	lea    eax,[eax+eax*4]
c0012a8e:	01 d8                	add    eax,ebx
c0012a90:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0012a97:	75 0b                	jne    c0012aa4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0012a99:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0012aa3:	90                   	nop
c0012aa4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0012aaa:	83 ec 08             	sub    esp,0x8
c0012aad:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012ab0:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0012ab3:	01 c0                	add    eax,eax
c0012ab5:	01 c8                	add    eax,ecx
c0012ab7:	8d 3c 80             	lea    edi,[eax+eax*4]
c0012aba:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0012abd:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0012ac3:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0012ac9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012acd:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0012ad3:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0012ad9:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0012ae0:	89 ca                	mov    edx,ecx
c0012ae2:	f7 da                	neg    edx
c0012ae4:	c1 e2 15             	shl    edx,0x15
c0012ae7:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0012aed:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0012af3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012af7:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0012b01:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0012b07:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012b0b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0012b11:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0012b1b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0012b25:	53                   	push   ebx
c0012b26:	68 a4 3c 02 c0       	push   0xc0023ca4
c0012b2b:	e8 6c a4 00 00       	call   c001cf9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012b30:	83 c4 10             	add    esp,0x10
c0012b33:	89 d8                	mov    eax,ebx
c0012b35:	5b                   	pop    ebx
c0012b36:	5e                   	pop    esi
c0012b37:	5f                   	pop    edi
c0012b38:	c3                   	ret    
c0012b39:	90                   	nop
c0012b3a:	66 90                	xchg   ax,ax

c0012b3c <Process::createUserThread()>:
c0012b3c:	83 ec 0c             	sub    esp,0xc
c0012b3f:	68 80 00 00 00       	push   0x80
c0012b44:	6a 00                	push   0x0
c0012b46:	68 ec 24 01 c0       	push   0xc00124ec
c0012b4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b4f:	e8 f0 fe ff ff       	call   c0012a44 <Process::createThread(void (*)(void*), void*, int)>
c0012b54:	83 c4 1c             	add    esp,0x1c
c0012b57:	c3                   	ret    

c0012b58 <setupMultitasking(void (*)())>:
c0012b58:	56                   	push   esi
c0012b59:	53                   	push   ebx
c0012b5a:	51                   	push   ecx
c0012b5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012b5f:	eb 13                	jmp    c0012b74 <setupMultitasking(void (*)())+0x1c>
c0012b61:	8d 76 00             	lea    esi,[esi+0x0]
c0012b64:	83 ec 0c             	sub    esp,0xc
c0012b67:	68 a4 3c 02 c0       	push   0xc0023ca4
c0012b6c:	e8 73 a3 00 00       	call   c001cee4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012b71:	83 c4 10             	add    esp,0x10
c0012b74:	83 ec 0c             	sub    esp,0xc
c0012b77:	68 a4 3c 02 c0       	push   0xc0023ca4
c0012b7c:	e8 3f a3 00 00       	call   c001cec0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012b81:	83 c4 10             	add    esp,0x10
c0012b84:	84 c0                	test   al,al
c0012b86:	74 dc                	je     c0012b64 <setupMultitasking(void (*)())+0xc>
c0012b88:	83 ec 0c             	sub    esp,0xc
c0012b8b:	68 1f 07 00 00       	push   0x71f
c0012b90:	e8 e8 41 ff ff       	call   c0006d7d <malloc>
c0012b95:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0012b9c:	89 c3                	mov    ebx,eax
c0012b9e:	6a 00                	push   0x0
c0012ba0:	68 85 f3 01 c0       	push   0xc001f385
c0012ba5:	6a 01                	push   0x1
c0012ba7:	50                   	push   eax
c0012ba8:	e8 8f fc ff ff       	call   c001283c <Process::Process(bool, char const*, Process*, char**)>
c0012bad:	83 c4 14             	add    esp,0x14
c0012bb0:	89 1d b0 3c 02 c0    	mov    DWORD PTR ds:0xc0023cb0,ebx
c0012bb6:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0012bbc:	e8 dc 4e ff ff       	call   c0007a9d <setActiveTerminal(VgaText*)>
c0012bc1:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0012bc9:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0012bd3:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0012bd9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012bdc:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0012be6:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0012bec:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0012bf2:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0012bfc:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0012c06:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0012c10:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0012c16:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0012c20:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0012c26:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0012c30:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0012c36:	58                   	pop    eax
c0012c37:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0012c3d:	5a                   	pop    edx
c0012c3e:	68 81 f3 01 c0       	push   0xc001f381
c0012c43:	50                   	push   eax
c0012c44:	e8 1b d9 fe ff       	call   c0000564 <strcpy>
c0012c49:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0012c50:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012c54:	83 c4 14             	add    esp,0x14
c0012c57:	5b                   	pop    ebx
c0012c58:	5e                   	pop    esi
c0012c59:	e9 2b d6 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0012c5e:	66 90                	xchg   ax,ax

c0012c60 <schedule()>:
c0012c60:	a1 84 3c 02 c0       	mov    eax,ds:0xc0023c84
c0012c65:	85 c0                	test   eax,eax
c0012c67:	74 0b                	je     c0012c74 <schedule()+0x14>
c0012c69:	c7 05 80 3c 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023c80,0x1
c0012c73:	c3                   	ret    
c0012c74:	53                   	push   ebx
c0012c75:	83 ec 14             	sub    esp,0x14
c0012c78:	68 a4 3c 02 c0       	push   0xc0023ca4
c0012c7d:	e8 3e a2 00 00       	call   c001cec0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012c82:	83 c4 10             	add    esp,0x10
c0012c85:	84 c0                	test   al,al
c0012c87:	75 3b                	jne    c0012cc4 <schedule()+0x64>
c0012c89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c8e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0012c91:	4a                   	dec    edx
c0012c92:	74 38                	je     c0012ccc <schedule()+0x6c>
c0012c94:	83 ec 0c             	sub    esp,0xc
c0012c97:	68 a4 3c 02 c0       	push   0xc0023ca4
c0012c9c:	e8 3b a2 00 00       	call   c001cedc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012ca1:	c7 04 24 a4 3c 02 c0 	mov    DWORD PTR [esp],0xc0023ca4
c0012ca8:	89 c3                	mov    ebx,eax
c0012caa:	e8 35 a2 00 00       	call   c001cee4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012caf:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0012cb6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012cb9:	e8 86 f8 ff ff       	call   c0012544 <switchToThread(ThreadControlBlock*)>
c0012cbe:	83 c4 10             	add    esp,0x10
c0012cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0012cc4:	83 c4 08             	add    esp,0x8
c0012cc7:	5b                   	pop    ebx
c0012cc8:	c3                   	ret    
c0012cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0012ccc:	83 ec 08             	sub    esp,0x8
c0012ccf:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0012cd6:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0012cdc:	68 a4 3c 02 c0       	push   0xc0023ca4
c0012ce1:	e8 b6 a2 00 00       	call   c001cf9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012ce6:	83 c4 10             	add    esp,0x10
c0012ce9:	eb a9                	jmp    c0012c94 <schedule()+0x34>
c0012ceb:	90                   	nop

c0012cec <Semaphore::tryAcquire()>:
c0012cec:	53                   	push   ebx
c0012ced:	83 ec 08             	sub    esp,0x8
c0012cf0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012cf4:	fa                   	cli    
c0012cf5:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0012cfa:	8d 50 01             	lea    edx,[eax+0x1]
c0012cfd:	89 15 88 3c 02 c0    	mov    DWORD PTR ds:0xc0023c88,edx
c0012d03:	8b 15 84 3c 02 c0    	mov    edx,DWORD PTR ds:0xc0023c84
c0012d09:	8d 5a 01             	lea    ebx,[edx+0x1]
c0012d0c:	89 1d 84 3c 02 c0    	mov    DWORD PTR ds:0xc0023c84,ebx
c0012d12:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0012d15:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0012d17:	7c 33                	jl     c0012d4c <Semaphore::tryAcquire()+0x60>
c0012d19:	89 15 84 3c 02 c0    	mov    DWORD PTR ds:0xc0023c84,edx
c0012d1f:	85 d2                	test   edx,edx
c0012d21:	75 0d                	jne    c0012d30 <Semaphore::tryAcquire()+0x44>
c0012d23:	8b 15 80 3c 02 c0    	mov    edx,DWORD PTR ds:0xc0023c80
c0012d29:	85 d2                	test   edx,edx
c0012d2b:	75 6b                	jne    c0012d98 <Semaphore::tryAcquire()+0xac>
c0012d2d:	8d 76 00             	lea    esi,[esi+0x0]
c0012d30:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c0012d35:	85 c0                	test   eax,eax
c0012d37:	74 0b                	je     c0012d44 <Semaphore::tryAcquire()+0x58>
c0012d39:	8d 76 00             	lea    esi,[esi+0x0]
c0012d3c:	31 c0                	xor    eax,eax
c0012d3e:	83 c4 08             	add    esp,0x8
c0012d41:	5b                   	pop    ebx
c0012d42:	c3                   	ret    
c0012d43:	90                   	nop
c0012d44:	fb                   	sti    
c0012d45:	83 c4 08             	add    esp,0x8
c0012d48:	5b                   	pop    ebx
c0012d49:	c3                   	ret    
c0012d4a:	66 90                	xchg   ax,ax
c0012d4c:	43                   	inc    ebx
c0012d4d:	89 15 84 3c 02 c0    	mov    DWORD PTR ds:0xc0023c84,edx
c0012d53:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0012d56:	85 d2                	test   edx,edx
c0012d58:	75 22                	jne    c0012d7c <Semaphore::tryAcquire()+0x90>
c0012d5a:	8b 0d 80 3c 02 c0    	mov    ecx,DWORD PTR ds:0xc0023c80
c0012d60:	85 c9                	test   ecx,ecx
c0012d62:	74 18                	je     c0012d7c <Semaphore::tryAcquire()+0x90>
c0012d64:	c7 05 80 3c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023c80,0x0
c0012d6e:	e8 ed fe ff ff       	call   c0012c60 <schedule()>
c0012d73:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0012d78:	48                   	dec    eax
c0012d79:	8d 76 00             	lea    esi,[esi+0x0]
c0012d7c:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c0012d81:	85 c0                	test   eax,eax
c0012d83:	75 0b                	jne    c0012d90 <Semaphore::tryAcquire()+0xa4>
c0012d85:	fb                   	sti    
c0012d86:	b0 01                	mov    al,0x1
c0012d88:	83 c4 08             	add    esp,0x8
c0012d8b:	5b                   	pop    ebx
c0012d8c:	c3                   	ret    
c0012d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0012d90:	b0 01                	mov    al,0x1
c0012d92:	83 c4 08             	add    esp,0x8
c0012d95:	5b                   	pop    ebx
c0012d96:	c3                   	ret    
c0012d97:	90                   	nop
c0012d98:	c7 05 80 3c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023c80,0x0
c0012da2:	e8 b9 fe ff ff       	call   c0012c60 <schedule()>
c0012da7:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0012dac:	48                   	dec    eax
c0012dad:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c0012db2:	85 c0                	test   eax,eax
c0012db4:	75 86                	jne    c0012d3c <Semaphore::tryAcquire()+0x50>
c0012db6:	eb 8c                	jmp    c0012d44 <Semaphore::tryAcquire()+0x58>

c0012db8 <Semaphore::assertLocked(char const*)>:
c0012db8:	83 ec 0c             	sub    esp,0xc
c0012dbb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012dbf:	fa                   	cli    
c0012dc0:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c0012dc6:	a1 84 3c 02 c0       	mov    eax,ds:0xc0023c84
c0012dcb:	8d 48 01             	lea    ecx,[eax+0x1]
c0012dce:	89 0d 84 3c 02 c0    	mov    DWORD PTR ds:0xc0023c84,ecx
c0012dd4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0012dd6:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0012dd9:	7c 29                	jl     c0012e04 <Semaphore::assertLocked(char const*)+0x4c>
c0012ddb:	90                   	nop
c0012ddc:	a3 84 3c 02 c0       	mov    ds:0xc0023c84,eax
c0012de1:	85 c0                	test   eax,eax
c0012de3:	75 0b                	jne    c0012df0 <Semaphore::assertLocked(char const*)+0x38>
c0012de5:	a1 80 3c 02 c0       	mov    eax,ds:0xc0023c80
c0012dea:	85 c0                	test   eax,eax
c0012dec:	75 2e                	jne    c0012e1c <Semaphore::assertLocked(char const*)+0x64>
c0012dee:	66 90                	xchg   ax,ax
c0012df0:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0012df5:	48                   	dec    eax
c0012df6:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c0012dfb:	75 03                	jne    c0012e00 <Semaphore::assertLocked(char const*)+0x48>
c0012dfd:	fb                   	sti    
c0012dfe:	66 90                	xchg   ax,ax
c0012e00:	83 c4 0c             	add    esp,0xc
c0012e03:	c3                   	ret    
c0012e04:	83 ec 0c             	sub    esp,0xc
c0012e07:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012e0b:	e8 cd c9 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0012e10:	a1 84 3c 02 c0       	mov    eax,ds:0xc0023c84
c0012e15:	83 c4 10             	add    esp,0x10
c0012e18:	48                   	dec    eax
c0012e19:	eb c1                	jmp    c0012ddc <Semaphore::assertLocked(char const*)+0x24>
c0012e1b:	90                   	nop
c0012e1c:	c7 05 80 3c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023c80,0x0
c0012e26:	e8 35 fe ff ff       	call   c0012c60 <schedule()>
c0012e2b:	eb c3                	jmp    c0012df0 <Semaphore::assertLocked(char const*)+0x38>
c0012e2d:	8d 76 00             	lea    esi,[esi+0x0]

c0012e30 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0012e30:	83 ec 0c             	sub    esp,0xc
c0012e33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e3c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012e3f:	e8 1c fe ff ff       	call   c0012c60 <schedule()>
c0012e44:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0012e49:	48                   	dec    eax
c0012e4a:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c0012e4f:	75 03                	jne    c0012e54 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0012e51:	fb                   	sti    
c0012e52:	66 90                	xchg   ax,ax
c0012e54:	83 c4 0c             	add    esp,0xc
c0012e57:	c3                   	ret    

c0012e58 <blockTask(TaskState)>:
c0012e58:	83 ec 0c             	sub    esp,0xc
c0012e5b:	fa                   	cli    
c0012e5c:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c0012e62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e66:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e6b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012e6e:	e8 ed fd ff ff       	call   c0012c60 <schedule()>
c0012e73:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0012e78:	48                   	dec    eax
c0012e79:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c0012e7e:	75 04                	jne    c0012e84 <blockTask(TaskState)+0x2c>
c0012e80:	fb                   	sti    
c0012e81:	8d 76 00             	lea    esi,[esi+0x0]
c0012e84:	83 c4 0c             	add    esp,0xc
c0012e87:	c3                   	ret    

c0012e88 <waitTask(int, int*, int)>:
c0012e88:	83 ec 18             	sub    esp,0x18
c0012e8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012e94:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0012e97:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012e9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ea0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0012ea3:	6a 07                	push   0x7
c0012ea5:	e8 ae ff ff ff       	call   c0012e58 <blockTask(TaskState)>
c0012eaa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012eaf:	83 c4 10             	add    esp,0x10
c0012eb2:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0012eb5:	85 d2                	test   edx,edx
c0012eb7:	74 0b                	je     c0012ec4 <waitTask(int, int*, int)+0x3c>
c0012eb9:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0012ebc:	89 02                	mov    DWORD PTR [edx],eax
c0012ebe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ec3:	90                   	nop
c0012ec4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0012ec7:	83 c4 0c             	add    esp,0xc
c0012eca:	c3                   	ret    
c0012ecb:	90                   	nop

c0012ecc <milliTenthSleepUntil(unsigned int)>:
c0012ecc:	83 ec 0c             	sub    esp,0xc
c0012ecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ed3:	39 05 8c 2d 02 c0    	cmp    DWORD PTR ds:0xc0022d8c,eax
c0012ed9:	76 05                	jbe    c0012ee0 <milliTenthSleepUntil(unsigned int)+0x14>
c0012edb:	90                   	nop
c0012edc:	83 c4 0c             	add    esp,0xc
c0012edf:	c3                   	ret    
c0012ee0:	fa                   	cli    
c0012ee1:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c0012ee7:	83 ec 08             	sub    esp,0x8
c0012eea:	ff 05 84 3c 02 c0    	inc    DWORD PTR ds:0xc0023c84
c0012ef0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012ef6:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0012ef9:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0012eff:	68 98 3c 02 c0       	push   0xc0023c98
c0012f04:	e8 93 a0 00 00       	call   c001cf9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012f09:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012f10:	e8 43 ff ff ff       	call   c0012e58 <blockTask(TaskState)>
c0012f15:	a1 84 3c 02 c0       	mov    eax,ds:0xc0023c84
c0012f1a:	83 c4 10             	add    esp,0x10
c0012f1d:	48                   	dec    eax
c0012f1e:	a3 84 3c 02 c0       	mov    ds:0xc0023c84,eax
c0012f23:	85 c0                	test   eax,eax
c0012f25:	75 09                	jne    c0012f30 <milliTenthSleepUntil(unsigned int)+0x64>
c0012f27:	a1 80 3c 02 c0       	mov    eax,ds:0xc0023c80
c0012f2c:	85 c0                	test   eax,eax
c0012f2e:	75 14                	jne    c0012f44 <milliTenthSleepUntil(unsigned int)+0x78>
c0012f30:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0012f35:	48                   	dec    eax
c0012f36:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c0012f3b:	75 9f                	jne    c0012edc <milliTenthSleepUntil(unsigned int)+0x10>
c0012f3d:	fb                   	sti    
c0012f3e:	83 c4 0c             	add    esp,0xc
c0012f41:	c3                   	ret    
c0012f42:	66 90                	xchg   ax,ax
c0012f44:	c7 05 80 3c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023c80,0x0
c0012f4e:	e8 0d fd ff ff       	call   c0012c60 <schedule()>
c0012f53:	eb db                	jmp    c0012f30 <milliTenthSleepUntil(unsigned int)+0x64>
c0012f55:	8d 76 00             	lea    esi,[esi+0x0]

c0012f58 <milliTenthSleep(unsigned int)>:
c0012f58:	a1 8c 2d 02 c0       	mov    eax,ds:0xc0022d8c
c0012f5d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0012f61:	e9 66 ff ff ff       	jmp    c0012ecc <milliTenthSleepUntil(unsigned int)>
c0012f66:	66 90                	xchg   ax,ax

c0012f68 <sleep(unsigned int)>:
c0012f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f6c:	8d 04 80             	lea    eax,[eax+eax*4]
c0012f6f:	8d 04 80             	lea    eax,[eax+eax*4]
c0012f72:	8d 04 80             	lea    eax,[eax+eax*4]
c0012f75:	8d 04 80             	lea    eax,[eax+eax*4]
c0012f78:	c1 e0 04             	shl    eax,0x4
c0012f7b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f7f:	eb d7                	jmp    c0012f58 <milliTenthSleep(unsigned int)>
c0012f81:	90                   	nop
c0012f82:	66 90                	xchg   ax,ax

c0012f84 <Semaphore::acquire()>:
c0012f84:	83 ec 0c             	sub    esp,0xc
c0012f87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f8b:	fa                   	cli    
c0012f8c:	a1 84 3c 02 c0       	mov    eax,ds:0xc0023c84
c0012f91:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c0012f97:	8d 48 01             	lea    ecx,[eax+0x1]
c0012f9a:	89 0d 84 3c 02 c0    	mov    DWORD PTR ds:0xc0023c84,ecx
c0012fa0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0012fa3:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0012fa5:	7d 2d                	jge    c0012fd4 <Semaphore::acquire()+0x50>
c0012fa7:	41                   	inc    ecx
c0012fa8:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0012fab:	90                   	nop
c0012fac:	a3 84 3c 02 c0       	mov    ds:0xc0023c84,eax
c0012fb1:	85 c0                	test   eax,eax
c0012fb3:	75 0b                	jne    c0012fc0 <Semaphore::acquire()+0x3c>
c0012fb5:	a1 80 3c 02 c0       	mov    eax,ds:0xc0023c80
c0012fba:	85 c0                	test   eax,eax
c0012fbc:	75 62                	jne    c0013020 <Semaphore::acquire()+0x9c>
c0012fbe:	66 90                	xchg   ax,ax
c0012fc0:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0012fc5:	48                   	dec    eax
c0012fc6:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c0012fcb:	75 03                	jne    c0012fd0 <Semaphore::acquire()+0x4c>
c0012fcd:	fb                   	sti    
c0012fce:	66 90                	xchg   ax,ax
c0012fd0:	83 c4 0c             	add    esp,0xc
c0012fd3:	c3                   	ret    
c0012fd4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012fd9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0012fe0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0012fe3:	85 c9                	test   ecx,ecx
c0012fe5:	74 4d                	je     c0013034 <Semaphore::acquire()+0xb0>
c0012fe7:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0012fea:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012ff0:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0012ff3:	90                   	nop
c0012ff4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ff9:	83 ec 0c             	sub    esp,0xc
c0012ffc:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0012fff:	68 00 f4 01 c0       	push   0xc001f400
c0013004:	e8 fe 6a ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c0013009:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013010:	e8 43 fe ff ff       	call   c0012e58 <blockTask(TaskState)>
c0013015:	a1 84 3c 02 c0       	mov    eax,ds:0xc0023c84
c001301a:	83 c4 10             	add    esp,0x10
c001301d:	48                   	dec    eax
c001301e:	eb 8c                	jmp    c0012fac <Semaphore::acquire()+0x28>
c0013020:	c7 05 80 3c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023c80,0x0
c001302a:	e8 31 fc ff ff       	call   c0012c60 <schedule()>
c001302f:	eb 8f                	jmp    c0012fc0 <Semaphore::acquire()+0x3c>
c0013031:	8d 76 00             	lea    esi,[esi+0x0]
c0013034:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013039:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001303c:	eb b6                	jmp    c0012ff4 <Semaphore::acquire()+0x70>
c001303e:	66 90                	xchg   ax,ax

c0013040 <taskReturned>:
c0013040:	83 ec 18             	sub    esp,0x18
c0013043:	68 20 f4 01 c0       	push   0xc001f420
c0013048:	e8 90 c7 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c001304d:	83 c4 10             	add    esp,0x10
c0013050:	83 ec 0c             	sub    esp,0xc
c0013053:	6a 02                	push   0x2
c0013055:	e8 fe fd ff ff       	call   c0012e58 <blockTask(TaskState)>
c001305a:	fa                   	cli    
c001305b:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c0013061:	e8 fa fb ff ff       	call   c0012c60 <schedule()>
c0013066:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c001306b:	83 c4 10             	add    esp,0x10
c001306e:	48                   	dec    eax
c001306f:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c0013074:	85 c0                	test   eax,eax
c0013076:	75 d8                	jne    c0013050 <taskReturned+0x10>
c0013078:	fb                   	sti    
c0013079:	eb d5                	jmp    c0013050 <taskReturned+0x10>
c001307b:	90                   	nop

c001307c <Thr::processFromPID(int)>:
c001307c:	57                   	push   edi
c001307d:	56                   	push   esi
c001307e:	53                   	push   ebx
c001307f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013083:	fa                   	cli    
c0013084:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c001308a:	83 ec 0c             	sub    esp,0xc
c001308d:	68 a4 3c 02 c0       	push   0xc0023ca4
c0013092:	e8 45 9e 00 00       	call   c001cedc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013097:	83 c4 10             	add    esp,0x10
c001309a:	89 c7                	mov    edi,eax
c001309c:	eb 16                	jmp    c00130b4 <Thr::processFromPID(int)+0x38>
c001309e:	66 90                	xchg   ax,ax
c00130a0:	83 ec 0c             	sub    esp,0xc
c00130a3:	68 a4 3c 02 c0       	push   0xc0023ca4
c00130a8:	e8 2f 9e 00 00       	call   c001cedc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00130ad:	83 c4 10             	add    esp,0x10
c00130b0:	39 f8                	cmp    eax,edi
c00130b2:	74 4c                	je     c0013100 <Thr::processFromPID(int)+0x84>
c00130b4:	83 ec 0c             	sub    esp,0xc
c00130b7:	68 a4 3c 02 c0       	push   0xc0023ca4
c00130bc:	e8 1b 9e 00 00       	call   c001cedc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00130c1:	c7 04 24 a4 3c 02 c0 	mov    DWORD PTR [esp],0xc0023ca4
c00130c8:	89 c3                	mov    ebx,eax
c00130ca:	e8 15 9e 00 00       	call   c001cee4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00130cf:	58                   	pop    eax
c00130d0:	5a                   	pop    edx
c00130d1:	53                   	push   ebx
c00130d2:	68 a4 3c 02 c0       	push   0xc0023ca4
c00130d7:	e8 c0 9e 00 00       	call   c001cf9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00130dc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00130df:	83 c4 10             	add    esp,0x10
c00130e2:	39 30                	cmp    DWORD PTR [eax],esi
c00130e4:	75 ba                	jne    c00130a0 <Thr::processFromPID(int)+0x24>
c00130e6:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c00130eb:	48                   	dec    eax
c00130ec:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c00130f1:	74 09                	je     c00130fc <Thr::processFromPID(int)+0x80>
c00130f3:	90                   	nop
c00130f4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00130f7:	5b                   	pop    ebx
c00130f8:	5e                   	pop    esi
c00130f9:	5f                   	pop    edi
c00130fa:	c3                   	ret    
c00130fb:	90                   	nop
c00130fc:	fb                   	sti    
c00130fd:	eb f5                	jmp    c00130f4 <Thr::processFromPID(int)+0x78>
c00130ff:	90                   	nop
c0013100:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0013105:	48                   	dec    eax
c0013106:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c001310b:	75 07                	jne    c0013114 <Thr::processFromPID(int)+0x98>
c001310d:	fb                   	sti    
c001310e:	5b                   	pop    ebx
c001310f:	5e                   	pop    esi
c0013110:	5f                   	pop    edi
c0013111:	c3                   	ret    
c0013112:	66 90                	xchg   ax,ax
c0013114:	5b                   	pop    ebx
c0013115:	31 c0                	xor    eax,eax
c0013117:	5e                   	pop    esi
c0013118:	5f                   	pop    edi
c0013119:	c3                   	ret    
c001311a:	66 90                	xchg   ax,ax

c001311c <unblockTask(ThreadControlBlock*)>:
c001311c:	53                   	push   ebx
c001311d:	83 ec 08             	sub    esp,0x8
c0013120:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013124:	fa                   	cli    
c0013125:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c001312b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001312e:	85 c0                	test   eax,eax
c0013130:	74 66                	je     c0013198 <unblockTask(ThreadControlBlock*)+0x7c>
c0013132:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013135:	48                   	dec    eax
c0013136:	74 38                	je     c0013170 <unblockTask(ThreadControlBlock*)+0x54>
c0013138:	83 ec 0c             	sub    esp,0xc
c001313b:	68 a4 3c 02 c0       	push   0xc0023ca4
c0013140:	e8 97 9d 00 00       	call   c001cedc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013145:	83 c4 10             	add    esp,0x10
c0013148:	85 c0                	test   eax,eax
c001314a:	75 1c                	jne    c0013168 <unblockTask(ThreadControlBlock*)+0x4c>
c001314c:	eb 5e                	jmp    c00131ac <unblockTask(ThreadControlBlock*)+0x90>
c001314e:	66 90                	xchg   ax,ax
c0013150:	83 ec 08             	sub    esp,0x8
c0013153:	50                   	push   eax
c0013154:	68 a4 3c 02 c0       	push   0xc0023ca4
c0013159:	e8 2e a1 00 00       	call   c001d28c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001315e:	83 c4 10             	add    esp,0x10
c0013161:	85 c0                	test   eax,eax
c0013163:	74 47                	je     c00131ac <unblockTask(ThreadControlBlock*)+0x90>
c0013165:	8d 76 00             	lea    esi,[esi+0x0]
c0013168:	39 c3                	cmp    ebx,eax
c001316a:	75 e4                	jne    c0013150 <unblockTask(ThreadControlBlock*)+0x34>
c001316c:	eb 12                	jmp    c0013180 <unblockTask(ThreadControlBlock*)+0x64>
c001316e:	66 90                	xchg   ax,ax
c0013170:	83 ec 0c             	sub    esp,0xc
c0013173:	68 a3 f3 01 c0       	push   0xc001f3a3
c0013178:	e8 8a 69 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c001317d:	83 c4 10             	add    esp,0x10
c0013180:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0013185:	48                   	dec    eax
c0013186:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c001318b:	75 03                	jne    c0013190 <unblockTask(ThreadControlBlock*)+0x74>
c001318d:	fb                   	sti    
c001318e:	66 90                	xchg   ax,ax
c0013190:	83 c4 08             	add    esp,0x8
c0013193:	5b                   	pop    ebx
c0013194:	c3                   	ret    
c0013195:	8d 76 00             	lea    esi,[esi+0x0]
c0013198:	83 ec 0c             	sub    esp,0xc
c001319b:	68 8c f3 01 c0       	push   0xc001f38c
c00131a0:	e8 62 69 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c00131a5:	83 c4 10             	add    esp,0x10
c00131a8:	eb d6                	jmp    c0013180 <unblockTask(ThreadControlBlock*)+0x64>
c00131aa:	66 90                	xchg   ax,ax
c00131ac:	83 ec 08             	sub    esp,0x8
c00131af:	53                   	push   ebx
c00131b0:	68 a4 3c 02 c0       	push   0xc0023ca4
c00131b5:	e8 e2 9d 00 00       	call   c001cf9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00131ba:	83 c4 10             	add    esp,0x10
c00131bd:	eb c1                	jmp    c0013180 <unblockTask(ThreadControlBlock*)+0x64>
c00131bf:	90                   	nop

c00131c0 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00131c0:	55                   	push   ebp
c00131c1:	57                   	push   edi
c00131c2:	56                   	push   esi
c00131c3:	53                   	push   ebx
c00131c4:	83 ec 1c             	sub    esp,0x1c
c00131c7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00131cb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00131ce:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c00131d4:	85 ff                	test   edi,edi
c00131d6:	7e 24                	jle    c00131fc <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c00131d8:	31 f6                	xor    esi,esi
c00131da:	66 90                	xchg   ax,ax
c00131dc:	83 ec 0c             	sub    esp,0xc
c00131df:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c00131e6:	46                   	inc    esi
c00131e7:	e8 a1 3b ff ff       	call   c0006d8d <free>
c00131ec:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00131ef:	83 c4 10             	add    esp,0x10
c00131f2:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00131f8:	7f e2                	jg     c00131dc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00131fa:	66 90                	xchg   ax,ax
c00131fc:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013206:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001320b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001320e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013211:	d3 c0                	rol    eax,cl
c0013213:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c001321a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001321d:	89 f7                	mov    edi,esi
c001321f:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013227:	0f 85 73 01 00 00    	jne    c00133a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c001322d:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013233:	85 ed                	test   ebp,ebp
c0013235:	74 1d                	je     c0013254 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013237:	83 ec 0c             	sub    esp,0xc
c001323a:	55                   	push   ebp
c001323b:	e8 42 c3 ff ff       	call   c000f582 <EnvVarContainer::~EnvVarContainer()>
c0013240:	59                   	pop    ecx
c0013241:	5e                   	pop    esi
c0013242:	6a 0c                	push   0xc
c0013244:	55                   	push   ebp
c0013245:	e8 dc 67 ff ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c001324a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001324d:	83 c4 10             	add    esp,0x10
c0013250:	89 f7                	mov    edi,esi
c0013252:	66 90                	xchg   ax,ax
c0013254:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001325a:	85 c0                	test   eax,eax
c001325c:	0f 84 b2 00 00 00    	je     c0013314 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0013262:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013265:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013269:	31 c9                	xor    ecx,ecx
c001326b:	eb 17                	jmp    c0013284 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c001326d:	8d 76 00             	lea    esi,[esi+0x0]
c0013270:	41                   	inc    ecx
c0013271:	83 f9 10             	cmp    ecx,0x10
c0013274:	0f 84 9a 00 00 00    	je     c0013314 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c001327a:	66 90                	xchg   ax,ax
c001327c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013282:	66 90                	xchg   ax,ax
c0013284:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001328b:	d3 fa                	sar    edx,cl
c001328d:	83 e2 01             	and    edx,0x1
c0013290:	74 de                	je     c0013270 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013292:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013295:	01 d2                	add    edx,edx
c0013297:	01 ca                	add    edx,ecx
c0013299:	8d 14 92             	lea    edx,[edx+edx*4]
c001329c:	01 d0                	add    eax,edx
c001329e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00132a4:	83 fd 07             	cmp    ebp,0x7
c00132a7:	75 c7                	jne    c0013270 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00132a9:	05 40 02 00 00       	add    eax,0x240
c00132ae:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00132b1:	83 fd ff             	cmp    ebp,0xffffffff
c00132b4:	0f 8c ee 00 00 00    	jl     c00133a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c00132ba:	0f 84 ac 01 00 00    	je     c001346c <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c00132c0:	85 ed                	test   ebp,ebp
c00132c2:	0f 84 90 01 00 00    	je     c0013458 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c00132c8:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00132ca:	75 a4                	jne    c0013270 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00132cc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00132d2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00132d6:	01 d0                	add    eax,edx
c00132d8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00132dc:	83 ec 0c             	sub    esp,0xc
c00132df:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00132e5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00132e8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00132ee:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00132f5:	50                   	push   eax
c00132f6:	e8 21 fe ff ff       	call   c001311c <unblockTask(ThreadControlBlock*)>
c00132fb:	83 c4 10             	add    esp,0x10
c00132fe:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013301:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013305:	89 f7                	mov    edi,esi
c0013307:	41                   	inc    ecx
c0013308:	83 f9 10             	cmp    ecx,0x10
c001330b:	0f 85 6b ff ff ff    	jne    c001327c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013311:	8d 76 00             	lea    esi,[esi+0x0]
c0013314:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001331a:	85 c0                	test   eax,eax
c001331c:	74 62                	je     c0013380 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c001331e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013324:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001332a:	74 54                	je     c0013380 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c001332c:	83 ec 0c             	sub    esp,0xc
c001332f:	68 a4 3c 02 c0       	push   0xc0023ca4
c0013334:	e8 a3 9b 00 00       	call   c001cedc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013339:	c7 04 24 a4 3c 02 c0 	mov    DWORD PTR [esp],0xc0023ca4
c0013340:	89 c7                	mov    edi,eax
c0013342:	e8 79 9b 00 00       	call   c001cec0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013347:	83 c4 10             	add    esp,0x10
c001334a:	84 c0                	test   al,al
c001334c:	0f 84 ce 00 00 00    	je     c0013420 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0013352:	66 90                	xchg   ax,ax
c0013354:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013357:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001335d:	85 d2                	test   edx,edx
c001335f:	74 0f                	je     c0013370 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0013361:	83 ec 0c             	sub    esp,0xc
c0013364:	8b 02                	mov    eax,DWORD PTR [edx]
c0013366:	52                   	push   edx
c0013367:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001336a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001336d:	83 c4 10             	add    esp,0x10
c0013370:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001337a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001337d:	8d 76 00             	lea    esi,[esi+0x0]
c0013380:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013386:	85 db                	test   ebx,ebx
c0013388:	74 16                	je     c00133a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c001338a:	83 ec 0c             	sub    esp,0xc
c001338d:	53                   	push   ebx
c001338e:	e8 01 5a ff ff       	call   c0008d94 <VAS::~VAS()>
c0013393:	58                   	pop    eax
c0013394:	5a                   	pop    edx
c0013395:	6a 14                	push   0x14
c0013397:	53                   	push   ebx
c0013398:	e8 89 66 ff ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c001339d:	83 c4 10             	add    esp,0x10
c00133a0:	83 c4 1c             	add    esp,0x1c
c00133a3:	5b                   	pop    ebx
c00133a4:	5e                   	pop    esi
c00133a5:	5f                   	pop    edi
c00133a6:	5d                   	pop    ebp
c00133a7:	c3                   	ret    
c00133a8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00133ac:	83 ec 0c             	sub    esp,0xc
c00133af:	68 54 f4 01 c0       	push   0xc001f454
c00133b4:	e8 24 c4 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c00133b9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00133bc:	83 c4 10             	add    esp,0x10
c00133bf:	89 f7                	mov    edi,esi
c00133c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00133c5:	e9 a6 fe ff ff       	jmp    c0013270 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00133ca:	66 90                	xchg   ax,ax
c00133cc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00133d2:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00133d8:	75 1e                	jne    c00133f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00133da:	83 ec 0c             	sub    esp,0xc
c00133dd:	68 bc f4 01 c0       	push   0xc001f4bc
c00133e2:	e8 20 67 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c00133e7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00133ee:	e8 65 fa ff ff       	call   c0012e58 <blockTask(TaskState)>
c00133f3:	83 c4 10             	add    esp,0x10
c00133f6:	66 90                	xchg   ax,ax
c00133f8:	83 ec 08             	sub    esp,0x8
c00133fb:	56                   	push   esi
c00133fc:	68 a4 3c 02 c0       	push   0xc0023ca4
c0013401:	e8 96 9b 00 00       	call   c001cf9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013406:	c7 04 24 a4 3c 02 c0 	mov    DWORD PTR [esp],0xc0023ca4
c001340d:	e8 ca 9a 00 00       	call   c001cedc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013412:	83 c4 10             	add    esp,0x10
c0013415:	39 f8                	cmp    eax,edi
c0013417:	0f 84 37 ff ff ff    	je     c0013354 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c001341d:	8d 76 00             	lea    esi,[esi+0x0]
c0013420:	83 ec 0c             	sub    esp,0xc
c0013423:	68 a4 3c 02 c0       	push   0xc0023ca4
c0013428:	e8 af 9a 00 00       	call   c001cedc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001342d:	c7 04 24 a4 3c 02 c0 	mov    DWORD PTR [esp],0xc0023ca4
c0013434:	89 c6                	mov    esi,eax
c0013436:	e8 a9 9a 00 00       	call   c001cee4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001343b:	83 c4 10             	add    esp,0x10
c001343e:	39 f3                	cmp    ebx,esi
c0013440:	74 b6                	je     c00133f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0013442:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013445:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013448:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001344e:	75 a8                	jne    c00133f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0013450:	e9 77 ff ff ff       	jmp    c00133cc <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0013455:	8d 76 00             	lea    esi,[esi+0x0]
c0013458:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001345c:	83 ec 0c             	sub    esp,0xc
c001345f:	68 88 f4 01 c0       	push   0xc001f488
c0013464:	e9 4b ff ff ff       	jmp    c00133b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0013469:	8d 76 00             	lea    esi,[esi+0x0]
c001346c:	8b 36                	mov    esi,DWORD PTR [esi]
c001346e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013472:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0013475:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013478:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001347e:	01 d7                	add    edi,edx
c0013480:	89 f8                	mov    eax,edi
c0013482:	e9 51 fe ff ff       	jmp    c00132d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0013487:	90                   	nop

c0013488 <cleanerTaskFunction(void*)>:
c0013488:	53                   	push   ebx
c0013489:	83 ec 08             	sub    esp,0x8
c001348c:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0013491:	48                   	dec    eax
c0013492:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c0013497:	75 03                	jne    c001349c <cleanerTaskFunction(void*)+0x14>
c0013499:	fb                   	sti    
c001349a:	66 90                	xchg   ax,ax
c001349c:	fa                   	cli    
c001349d:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c00134a2:	80 3d 6c 3c 02 c0 00 	cmp    BYTE PTR ds:0xc0023c6c,0x0
c00134a9:	8d 50 01             	lea    edx,[eax+0x1]
c00134ac:	89 15 88 3c 02 c0    	mov    DWORD PTR ds:0xc0023c88,edx
c00134b2:	0f 84 ac 00 00 00    	je     c0013564 <cleanerTaskFunction(void*)+0xdc>
c00134b8:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c00134bd:	85 c0                	test   eax,eax
c00134bf:	75 03                	jne    c00134c4 <cleanerTaskFunction(void*)+0x3c>
c00134c1:	fb                   	sti    
c00134c2:	66 90                	xchg   ax,ax
c00134c4:	c6 05 6c 3c 02 c0 00 	mov    BYTE PTR ds:0xc0023c6c,0x0
c00134cb:	fa                   	cli    
c00134cc:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c00134d2:	ff 05 84 3c 02 c0    	inc    DWORD PTR ds:0xc0023c84
c00134d8:	fa                   	cli    
c00134d9:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c00134df:	eb 2b                	jmp    c001350c <cleanerTaskFunction(void*)+0x84>
c00134e1:	8d 76 00             	lea    esi,[esi+0x0]
c00134e4:	83 ec 0c             	sub    esp,0xc
c00134e7:	68 8c 3c 02 c0       	push   0xc0023c8c
c00134ec:	e8 eb 99 00 00       	call   c001cedc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00134f1:	c7 04 24 8c 3c 02 c0 	mov    DWORD PTR [esp],0xc0023c8c
c00134f8:	89 c3                	mov    ebx,eax
c00134fa:	e8 e5 99 00 00       	call   c001cee4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00134ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013502:	e8 b9 fc ff ff       	call   c00131c0 <cleanupTerminatedTask(ThreadControlBlock*)>
c0013507:	83 c4 10             	add    esp,0x10
c001350a:	66 90                	xchg   ax,ax
c001350c:	83 ec 0c             	sub    esp,0xc
c001350f:	68 8c 3c 02 c0       	push   0xc0023c8c
c0013514:	e8 a7 99 00 00       	call   c001cec0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013519:	83 c4 10             	add    esp,0x10
c001351c:	84 c0                	test   al,al
c001351e:	74 c4                	je     c00134e4 <cleanerTaskFunction(void*)+0x5c>
c0013520:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0013525:	48                   	dec    eax
c0013526:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c001352b:	75 03                	jne    c0013530 <cleanerTaskFunction(void*)+0xa8>
c001352d:	fb                   	sti    
c001352e:	66 90                	xchg   ax,ax
c0013530:	a1 84 3c 02 c0       	mov    eax,ds:0xc0023c84
c0013535:	48                   	dec    eax
c0013536:	a3 84 3c 02 c0       	mov    ds:0xc0023c84,eax
c001353b:	0f 85 4b ff ff ff    	jne    c001348c <cleanerTaskFunction(void*)+0x4>
c0013541:	a1 80 3c 02 c0       	mov    eax,ds:0xc0023c80
c0013546:	85 c0                	test   eax,eax
c0013548:	0f 84 3e ff ff ff    	je     c001348c <cleanerTaskFunction(void*)+0x4>
c001354e:	c7 05 80 3c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023c80,0x0
c0013558:	e8 03 f7 ff ff       	call   c0012c60 <schedule()>
c001355d:	e9 2a ff ff ff       	jmp    c001348c <cleanerTaskFunction(void*)+0x4>
c0013562:	66 90                	xchg   ax,ax
c0013564:	83 ec 0c             	sub    esp,0xc
c0013567:	6a 02                	push   0x2
c0013569:	e8 c2 f8 ff ff       	call   c0012e30 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001356e:	83 c4 10             	add    esp,0x10
c0013571:	e9 4e ff ff ff       	jmp    c00134c4 <cleanerTaskFunction(void*)+0x3c>
c0013576:	66 90                	xchg   ax,ax

c0013578 <terminateTask(int)>:
c0013578:	83 ec 14             	sub    esp,0x14
c001357b:	fa                   	cli    
c001357c:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c0013582:	ff 05 84 3c 02 c0    	inc    DWORD PTR ds:0xc0023c84
c0013588:	fa                   	cli    
c0013589:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c001358f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013593:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013598:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001359b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135a0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00135a3:	50                   	push   eax
c00135a4:	68 8c 3c 02 c0       	push   0xc0023c8c
c00135a9:	e8 ee 99 00 00       	call   c001cf9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00135ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135b3:	83 c4 10             	add    esp,0x10
c00135b6:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00135bd:	a1 68 3c 02 c0       	mov    eax,ds:0xc0023c68
c00135c2:	85 c0                	test   eax,eax
c00135c4:	74 5e                	je     c0013624 <terminateTask(int)+0xac>
c00135c6:	83 ec 0c             	sub    esp,0xc
c00135c9:	c6 05 6c 3c 02 c0 01 	mov    BYTE PTR ds:0xc0023c6c,0x1
c00135d0:	50                   	push   eax
c00135d1:	e8 46 fb ff ff       	call   c001311c <unblockTask(ThreadControlBlock*)>
c00135d6:	83 c4 10             	add    esp,0x10
c00135d9:	8d 76 00             	lea    esi,[esi+0x0]
c00135dc:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c00135e1:	48                   	dec    eax
c00135e2:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c00135e7:	75 03                	jne    c00135ec <terminateTask(int)+0x74>
c00135e9:	fb                   	sti    
c00135ea:	66 90                	xchg   ax,ax
c00135ec:	a1 84 3c 02 c0       	mov    eax,ds:0xc0023c84
c00135f1:	48                   	dec    eax
c00135f2:	a3 84 3c 02 c0       	mov    ds:0xc0023c84,eax
c00135f7:	75 0b                	jne    c0013604 <terminateTask(int)+0x8c>
c00135f9:	83 3d 80 3c 02 c0 00 	cmp    DWORD PTR ds:0xc0023c80,0x0
c0013600:	75 36                	jne    c0013638 <terminateTask(int)+0xc0>
c0013602:	66 90                	xchg   ax,ax
c0013604:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0013609:	48                   	dec    eax
c001360a:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c001360f:	75 03                	jne    c0013614 <terminateTask(int)+0x9c>
c0013611:	fb                   	sti    
c0013612:	66 90                	xchg   ax,ax
c0013614:	fa                   	cli    
c0013615:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c001361b:	90                   	nop
c001361c:	e8 3f f6 ff ff       	call   c0012c60 <schedule()>
c0013621:	eb e1                	jmp    c0013604 <terminateTask(int)+0x8c>
c0013623:	90                   	nop
c0013624:	83 ec 0c             	sub    esp,0xc
c0013627:	68 ba f3 01 c0       	push   0xc001f3ba
c001362c:	e8 d6 64 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c0013631:	83 c4 10             	add    esp,0x10
c0013634:	eb a6                	jmp    c00135dc <terminateTask(int)+0x64>
c0013636:	66 90                	xchg   ax,ax
c0013638:	c7 05 80 3c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023c80,0x0
c0013642:	eb d8                	jmp    c001361c <terminateTask(int)+0xa4>

c0013644 <Thr::terminateFromIRQ(int)>:
c0013644:	83 ec 18             	sub    esp,0x18
c0013647:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001364b:	e8 28 ff ff ff       	call   c0013578 <terminateTask(int)>

c0013650 <Semaphore::release()>:
c0013650:	83 ec 0c             	sub    esp,0xc
c0013653:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013657:	fa                   	cli    
c0013658:	a1 84 3c 02 c0       	mov    eax,ds:0xc0023c84
c001365d:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c0013663:	8d 48 01             	lea    ecx,[eax+0x1]
c0013666:	89 0d 84 3c 02 c0    	mov    DWORD PTR ds:0xc0023c84,ecx
c001366c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001366f:	85 c9                	test   ecx,ecx
c0013671:	74 41                	je     c00136b4 <Semaphore::release()+0x64>
c0013673:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0013676:	83 ec 0c             	sub    esp,0xc
c0013679:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001367c:	51                   	push   ecx
c001367d:	e8 9a fa ff ff       	call   c001311c <unblockTask(ThreadControlBlock*)>
c0013682:	a1 84 3c 02 c0       	mov    eax,ds:0xc0023c84
c0013687:	83 c4 10             	add    esp,0x10
c001368a:	48                   	dec    eax
c001368b:	90                   	nop
c001368c:	a3 84 3c 02 c0       	mov    ds:0xc0023c84,eax
c0013691:	85 c0                	test   eax,eax
c0013693:	75 0b                	jne    c00136a0 <Semaphore::release()+0x50>
c0013695:	a1 80 3c 02 c0       	mov    eax,ds:0xc0023c80
c001369a:	85 c0                	test   eax,eax
c001369c:	75 1e                	jne    c00136bc <Semaphore::release()+0x6c>
c001369e:	66 90                	xchg   ax,ax
c00136a0:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c00136a5:	48                   	dec    eax
c00136a6:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c00136ab:	75 03                	jne    c00136b0 <Semaphore::release()+0x60>
c00136ad:	fb                   	sti    
c00136ae:	66 90                	xchg   ax,ax
c00136b0:	83 c4 0c             	add    esp,0xc
c00136b3:	c3                   	ret    
c00136b4:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00136b7:	eb d3                	jmp    c001368c <Semaphore::release()+0x3c>
c00136b9:	8d 76 00             	lea    esi,[esi+0x0]
c00136bc:	c7 05 80 3c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023c80,0x0
c00136c6:	e8 95 f5 ff ff       	call   c0012c60 <schedule()>
c00136cb:	eb d3                	jmp    c00136a0 <Semaphore::release()+0x50>
c00136cd:	8d 76 00             	lea    esi,[esi+0x0]

c00136d0 <__static_initialization_and_destruction_0(int, int)>:
c00136d0:	83 ec 0c             	sub    esp,0xc
c00136d3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00136d8:	0f 85 8e 00 00 00    	jne    c001376c <__static_initialization_and_destruction_0(int, int)+0x9c>
c00136de:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00136e6:	0f 85 80 00 00 00    	jne    c001376c <__static_initialization_and_destruction_0(int, int)+0x9c>
c00136ec:	83 ec 0c             	sub    esp,0xc
c00136ef:	68 a4 3c 02 c0       	push   0xc0023ca4
c00136f4:	e8 4f 9b 00 00       	call   c001d248 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00136f9:	83 c4 10             	add    esp,0x10
c00136fc:	83 ec 04             	sub    esp,0x4
c00136ff:	68 68 ff 01 c0       	push   0xc001ff68
c0013704:	68 a4 3c 02 c0       	push   0xc0023ca4
c0013709:	68 f8 d1 01 c0       	push   0xc001d1f8
c001370e:	e8 c3 62 ff ff       	call   c00099d6 <__cxa_atexit>
c0013713:	83 c4 10             	add    esp,0x10
c0013716:	83 ec 0c             	sub    esp,0xc
c0013719:	68 98 3c 02 c0       	push   0xc0023c98
c001371e:	e8 25 9b 00 00       	call   c001d248 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013723:	83 c4 10             	add    esp,0x10
c0013726:	83 ec 04             	sub    esp,0x4
c0013729:	68 68 ff 01 c0       	push   0xc001ff68
c001372e:	68 98 3c 02 c0       	push   0xc0023c98
c0013733:	68 f8 d1 01 c0       	push   0xc001d1f8
c0013738:	e8 99 62 ff ff       	call   c00099d6 <__cxa_atexit>
c001373d:	83 c4 10             	add    esp,0x10
c0013740:	83 ec 0c             	sub    esp,0xc
c0013743:	68 8c 3c 02 c0       	push   0xc0023c8c
c0013748:	e8 fb 9a 00 00       	call   c001d248 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001374d:	83 c4 10             	add    esp,0x10
c0013750:	83 ec 04             	sub    esp,0x4
c0013753:	68 68 ff 01 c0       	push   0xc001ff68
c0013758:	68 8c 3c 02 c0       	push   0xc0023c8c
c001375d:	68 f8 d1 01 c0       	push   0xc001d1f8
c0013762:	e8 6f 62 ff ff       	call   c00099d6 <__cxa_atexit>
c0013767:	83 c4 10             	add    esp,0x10
c001376a:	66 90                	xchg   ax,ax
c001376c:	90                   	nop
c001376d:	83 c4 0c             	add    esp,0xc
c0013770:	c3                   	ret    
c0013771:	8d 76 00             	lea    esi,[esi+0x0]

c0013774 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0013774:	83 ec 0c             	sub    esp,0xc
c0013777:	83 ec 08             	sub    esp,0x8
c001377a:	68 ff ff 00 00       	push   0xffff
c001377f:	6a 01                	push   0x1
c0013781:	e8 4a ff ff ff       	call   c00136d0 <__static_initialization_and_destruction_0(int, int)>
c0013786:	83 c4 10             	add    esp,0x10
c0013789:	83 c4 0c             	add    esp,0xc
c001378c:	c3                   	ret    

c001378d <Vm::inbv(unsigned short)>:
c001378d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013791:	66 81 fa fe fe       	cmp    dx,0xfefe
c0013796:	75 06                	jne    c001379e <Vm::inbv(unsigned short)+0x11>
c0013798:	a0 ec 3c 02 c0       	mov    al,ds:0xc0023cec
c001379d:	c3                   	ret    
c001379e:	ec                   	in     al,dx
c001379f:	c3                   	ret    

c00137a0 <Vm::outbv(unsigned short, unsigned char)>:
c00137a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00137a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00137a8:	66 81 fa fe fe       	cmp    dx,0xfefe
c00137ad:	75 25                	jne    c00137d4 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00137af:	8b 0d ec 3c 02 c0    	mov    ecx,DWORD PTR ds:0xc0023cec
c00137b5:	8d 51 01             	lea    edx,[ecx+0x1]
c00137b8:	88 81 00 3d 02 c0    	mov    BYTE PTR [ecx-0x3ffdc300],al
c00137be:	89 15 ec 3c 02 c0    	mov    DWORD PTR ds:0xc0023cec,edx
c00137c4:	83 fa 20             	cmp    edx,0x20
c00137c7:	75 0c                	jne    c00137d5 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00137c9:	c7 05 ec 3c 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0023cec,0x1f
c00137d3:	c3                   	ret    
c00137d4:	ee                   	out    dx,al
c00137d5:	c3                   	ret    

c00137d6 <Vm::realToLinear(unsigned short, unsigned short)>:
c00137d6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00137db:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00137e0:	c1 e0 04             	shl    eax,0x4
c00137e3:	01 d0                	add    eax,edx
c00137e5:	c3                   	ret    

c00137e6 <Vm::getSegment(unsigned int)>:
c00137e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137ea:	c1 e8 10             	shr    eax,0x10
c00137ed:	c3                   	ret    

c00137ee <Vm::getOffset(unsigned int)>:
c00137ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137f2:	c3                   	ret    

c00137f3 <Vm::mainloop2()>:
c00137f3:	83 ec 18             	sub    esp,0x18
c00137f6:	fa                   	cli    
c00137f7:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c00137fd:	6a 02                	push   0x2
c00137ff:	c6 05 e5 3c 02 c0 01 	mov    BYTE PTR ds:0xc0023ce5,0x1
c0013806:	e8 25 f6 ff ff       	call   c0012e30 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001380b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013810:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0013814:	52                   	push   edx
c0013815:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0013819:	52                   	push   edx
c001381a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001381e:	52                   	push   edx
c001381f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0013823:	50                   	push   eax
c0013824:	e8 06 ca fe ff       	call   c000022f <goToVM86>
c0013829:	83 c4 2c             	add    esp,0x2c
c001382c:	c3                   	ret    

c001382d <Vm::mainVm8086Loop(void*)>:
c001382d:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0013832:	48                   	dec    eax
c0013833:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c0013838:	75 01                	jne    c001383b <Vm::mainVm8086Loop(void*)+0xe>
c001383a:	fb                   	sti    
c001383b:	eb b6                	jmp    c00137f3 <Vm::mainloop2()>

c001383d <Vm::mainloop3(unsigned long)>:
c001383d:	83 ec 18             	sub    esp,0x18
c0013840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013844:	fa                   	cli    
c0013845:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c001384b:	6a 02                	push   0x2
c001384d:	c6 05 e4 3c 02 c0 01 	mov    BYTE PTR ds:0xc0023ce4,0x1
c0013854:	a3 e0 3c 02 c0       	mov    ds:0xc0023ce0,eax
c0013859:	e8 d2 f5 ff ff       	call   c0012e30 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001385e:	83 c4 1c             	add    esp,0x1c
c0013861:	eb 90                	jmp    c00137f3 <Vm::mainloop2()>

c0013863 <Vm::initialise8086()>:
c0013863:	83 ec 0c             	sub    esp,0xc
c0013866:	68 80 00 00 00       	push   0x80
c001386b:	6a 00                	push   0x0
c001386d:	68 2d 38 01 c0       	push   0xc001382d
c0013872:	ff 35 b0 3c 02 c0    	push   DWORD PTR ds:0xc0023cb0
c0013878:	e8 c7 f1 ff ff       	call   c0012a44 <Process::createThread(void (*)(void*), void*, int)>
c001387d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0013884:	a3 e8 3c 02 c0       	mov    ds:0xc0023ce8,eax
c0013889:	68 00 01 00 00       	push   0x100
c001388e:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c0013893:	6a 00                	push   0x0
c0013895:	6a 00                	push   0x0
c0013897:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001389d:	e8 4e 59 ff ff       	call   c00091f0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00138a2:	83 c4 2c             	add    esp,0x2c
c00138a5:	c3                   	ret    

c00138a6 <Vm::finish8086()>:
c00138a6:	53                   	push   ebx
c00138a7:	83 ec 08             	sub    esp,0x8
c00138aa:	fa                   	cli    
c00138ab:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c00138b1:	80 3d e4 3c 02 c0 00 	cmp    BYTE PTR ds:0xc0023ce4,0x0
c00138b8:	75 15                	jne    c00138cf <Vm::finish8086()+0x29>
c00138ba:	e8 a1 f3 ff ff       	call   c0012c60 <schedule()>
c00138bf:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c00138c4:	48                   	dec    eax
c00138c5:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c00138ca:	75 de                	jne    c00138aa <Vm::finish8086()+0x4>
c00138cc:	fb                   	sti    
c00138cd:	eb db                	jmp    c00138aa <Vm::finish8086()+0x4>
c00138cf:	83 ec 0c             	sub    esp,0xc
c00138d2:	8b 1d e0 3c 02 c0    	mov    ebx,DWORD PTR ds:0xc0023ce0
c00138d8:	ff 35 e8 3c 02 c0    	push   DWORD PTR ds:0xc0023ce8
c00138de:	c6 05 e4 3c 02 c0 00 	mov    BYTE PTR ds:0xc0023ce4,0x0
c00138e5:	e8 32 f8 ff ff       	call   c001311c <unblockTask(ThreadControlBlock*)>
c00138ea:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c00138ef:	83 c4 10             	add    esp,0x10
c00138f2:	8d 50 ff             	lea    edx,[eax-0x1]
c00138f5:	89 15 88 3c 02 c0    	mov    DWORD PTR ds:0xc0023c88,edx
c00138fb:	85 d2                	test   edx,edx
c00138fd:	75 01                	jne    c0013900 <Vm::finish8086()+0x5a>
c00138ff:	fb                   	sti    
c0013900:	89 d8                	mov    eax,ebx
c0013902:	83 c4 08             	add    esp,0x8
c0013905:	5b                   	pop    ebx
c0013906:	c3                   	ret    

c0013907 <Vm::getOutput8086(unsigned char*)>:
c0013907:	57                   	push   edi
c0013908:	8b 0d ec 3c 02 c0    	mov    ecx,DWORD PTR ds:0xc0023cec
c001390e:	56                   	push   esi
c001390f:	be 00 3d 02 c0       	mov    esi,0xc0023d00
c0013914:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013918:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001391a:	a1 ec 3c 02 c0       	mov    eax,ds:0xc0023cec
c001391f:	5e                   	pop    esi
c0013920:	c7 05 ec 3c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023cec,0x0
c001392a:	5f                   	pop    edi
c001392b:	c3                   	ret    

c001392c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001392c:	55                   	push   ebp
c001392d:	57                   	push   edi
c001392e:	56                   	push   esi
c001392f:	53                   	push   ebx
c0013930:	83 ec 0c             	sub    esp,0xc
c0013933:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013937:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001393b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001393f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0013943:	fa                   	cli    
c0013944:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c001394a:	80 3d e5 3c 02 c0 00 	cmp    BYTE PTR ds:0xc0023ce5,0x0
c0013951:	75 15                	jne    c0013968 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0013953:	e8 08 f3 ff ff       	call   c0012c60 <schedule()>
c0013958:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c001395d:	48                   	dec    eax
c001395e:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c0013963:	75 de                	jne    c0013943 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0013965:	fb                   	sti    
c0013966:	eb db                	jmp    c0013943 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0013968:	a1 e8 3c 02 c0       	mov    eax,ds:0xc0023ce8
c001396d:	c7 05 ec 3c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023cec,0x0
c0013977:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001397b:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001397f:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0013983:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0013987:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001398b:	0f b7 ff             	movzx  edi,di
c001398e:	0f b7 f6             	movzx  esi,si
c0013991:	50                   	push   eax
c0013992:	6a 20                	push   0x20
c0013994:	6a 00                	push   0x0
c0013996:	68 00 3d 02 c0       	push   0xc0023d00
c001399b:	e8 08 cb fe ff       	call   c00004a8 <memset>
c00139a0:	5a                   	pop    edx
c00139a1:	59                   	pop    ecx
c00139a2:	57                   	push   edi
c00139a3:	56                   	push   esi
c00139a4:	e8 2d fe ff ff       	call   c00137d6 <Vm::realToLinear(unsigned short, unsigned short)>
c00139a9:	83 c4 10             	add    esp,0x10
c00139ac:	89 c7                	mov    edi,eax
c00139ae:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00139b2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00139b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00139b8:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c00139bd:	c6 05 e5 3c 02 c0 00 	mov    BYTE PTR ds:0xc0023ce5,0x0
c00139c4:	48                   	dec    eax
c00139c5:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c00139ca:	75 01                	jne    c00139cd <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00139cc:	fb                   	sti    
c00139cd:	83 ec 0c             	sub    esp,0xc
c00139d0:	ff 35 e8 3c 02 c0    	push   DWORD PTR ds:0xc0023ce8
c00139d6:	e8 41 f7 ff ff       	call   c001311c <unblockTask(ThreadControlBlock*)>
c00139db:	83 c4 1c             	add    esp,0x1c
c00139de:	b0 01                	mov    al,0x1
c00139e0:	5b                   	pop    ebx
c00139e1:	5e                   	pop    esi
c00139e2:	5f                   	pop    edi
c00139e3:	5d                   	pop    ebp
c00139e4:	c3                   	ret    

c00139e5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00139e5:	55                   	push   ebp
c00139e6:	57                   	push   edi
c00139e7:	56                   	push   esi
c00139e8:	53                   	push   ebx
c00139e9:	83 ec 2c             	sub    esp,0x2c
c00139ec:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00139f0:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00139f4:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00139f8:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00139fc:	fa                   	cli    
c00139fd:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c0013a03:	0f b6 35 e5 3c 02 c0 	movzx  esi,BYTE PTR ds:0xc0023ce5
c0013a0a:	89 f0                	mov    eax,esi
c0013a0c:	84 c0                	test   al,al
c0013a0e:	75 1d                	jne    c0013a2d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0013a10:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013a14:	e8 47 f2 ff ff       	call   c0012c60 <schedule()>
c0013a19:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0013a1e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013a22:	48                   	dec    eax
c0013a23:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c0013a28:	75 d2                	jne    c00139fc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0013a2a:	fb                   	sti    
c0013a2b:	eb cf                	jmp    c00139fc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0013a2d:	a1 e8 3c 02 c0       	mov    eax,ds:0xc0023ce8
c0013a32:	c7 05 ec 3c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023cec,0x0
c0013a3c:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0013a40:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0013a44:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0013a48:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0013a4c:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0013a50:	50                   	push   eax
c0013a51:	6a 20                	push   0x20
c0013a53:	6a 00                	push   0x0
c0013a55:	68 00 3d 02 c0       	push   0xc0023d00
c0013a5a:	e8 49 ca fe ff       	call   c00004a8 <memset>
c0013a5f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013a66:	e8 12 33 ff ff       	call   c0006d7d <malloc>
c0013a6b:	83 c4 0c             	add    esp,0xc
c0013a6e:	89 c3                	mov    ebx,eax
c0013a70:	ff 35 b0 3c 02 c0    	push   DWORD PTR ds:0xc0023cb0
c0013a76:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013a7a:	50                   	push   eax
c0013a7b:	e8 f2 65 ff ff       	call   c000a072 <File::File(char const*, Process*)>
c0013a80:	83 c4 10             	add    esp,0x10
c0013a83:	85 db                	test   ebx,ebx
c0013a85:	75 0a                	jne    c0013a91 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0013a87:	83 ec 0c             	sub    esp,0xc
c0013a8a:	68 e4 f4 01 c0       	push   0xc001f4e4
c0013a8f:	eb 3e                	jmp    c0013acf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0013a91:	50                   	push   eax
c0013a92:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013a96:	50                   	push   eax
c0013a97:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013a9b:	50                   	push   eax
c0013a9c:	53                   	push   ebx
c0013a9d:	e8 36 69 ff ff       	call   c000a3d8 <File::stat(unsigned long long*, bool*)>
c0013aa2:	83 c4 10             	add    esp,0x10
c0013aa5:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013aaa:	74 0a                	je     c0013ab6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0013aac:	83 ec 0c             	sub    esp,0xc
c0013aaf:	68 f8 f4 01 c0       	push   0xc001f4f8
c0013ab4:	eb 19                	jmp    c0013acf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0013ab6:	51                   	push   ecx
c0013ab7:	51                   	push   ecx
c0013ab8:	6a 01                	push   0x1
c0013aba:	53                   	push   ebx
c0013abb:	e8 6c 66 ff ff       	call   c000a12c <File::open(FileOpenMode)>
c0013ac0:	83 c4 10             	add    esp,0x10
c0013ac3:	85 c0                	test   eax,eax
c0013ac5:	74 24                	je     c0013aeb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0013ac7:	83 ec 0c             	sub    esp,0xc
c0013aca:	68 11 f5 01 c0       	push   0xc001f511
c0013acf:	e8 09 bd ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0013ad4:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0013ad9:	83 c4 10             	add    esp,0x10
c0013adc:	48                   	dec    eax
c0013add:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c0013ae2:	85 c0                	test   eax,eax
c0013ae4:	75 01                	jne    c0013ae7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0013ae6:	fb                   	sti    
c0013ae7:	31 f6                	xor    esi,esi
c0013ae9:	eb 58                	jmp    c0013b43 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0013aeb:	0f b7 ed             	movzx  ebp,bp
c0013aee:	50                   	push   eax
c0013aef:	0f b7 ff             	movzx  edi,di
c0013af2:	50                   	push   eax
c0013af3:	55                   	push   ebp
c0013af4:	57                   	push   edi
c0013af5:	e8 dc fc ff ff       	call   c00137d6 <Vm::realToLinear(unsigned short, unsigned short)>
c0013afa:	5a                   	pop    edx
c0013afb:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013afd:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013b01:	51                   	push   ecx
c0013b02:	50                   	push   eax
c0013b03:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013b07:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013b0b:	53                   	push   ebx
c0013b0c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0013b0f:	83 c4 14             	add    esp,0x14
c0013b12:	53                   	push   ebx
c0013b13:	e8 72 66 ff ff       	call   c000a18a <File::close()>
c0013b18:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c0013b1d:	83 c4 10             	add    esp,0x10
c0013b20:	48                   	dec    eax
c0013b21:	c6 05 e5 3c 02 c0 00 	mov    BYTE PTR ds:0xc0023ce5,0x0
c0013b28:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c0013b2d:	85 c0                	test   eax,eax
c0013b2f:	75 01                	jne    c0013b32 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0013b31:	fb                   	sti    
c0013b32:	83 ec 0c             	sub    esp,0xc
c0013b35:	ff 35 e8 3c 02 c0    	push   DWORD PTR ds:0xc0023ce8
c0013b3b:	e8 dc f5 ff ff       	call   c001311c <unblockTask(ThreadControlBlock*)>
c0013b40:	83 c4 10             	add    esp,0x10
c0013b43:	83 c4 2c             	add    esp,0x2c
c0013b46:	89 f0                	mov    eax,esi
c0013b48:	5b                   	pop    ebx
c0013b49:	5e                   	pop    esi
c0013b4a:	5f                   	pop    edi
c0013b4b:	5d                   	pop    ebp
c0013b4c:	c3                   	ret    

c0013b4d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0013b4d:	57                   	push   edi
c0013b4e:	56                   	push   esi
c0013b4f:	53                   	push   ebx
c0013b50:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013b54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b58:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013b5c:	83 e8 06             	sub    eax,0x6
c0013b5f:	0f b7 c0             	movzx  eax,ax
c0013b62:	50                   	push   eax
c0013b63:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0013b68:	50                   	push   eax
c0013b69:	e8 68 fc ff ff       	call   c00137d6 <Vm::realToLinear(unsigned short, unsigned short)>
c0013b6e:	5a                   	pop    edx
c0013b6f:	5e                   	pop    esi
c0013b70:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0013b73:	8d 56 fa             	lea    edx,[esi-0x6]
c0013b76:	81 e2 ff ff 00 00    	and    edx,0xffff
c0013b7c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0013b7f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0013b82:	83 c2 02             	add    edx,0x2
c0013b85:	66 89 10             	mov    WORD PTR [eax],dx
c0013b88:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0013b8b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0013b8f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0013b92:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0013b96:	89 d6                	mov    esi,edx
c0013b98:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0013b9e:	66 81 e6 ff fd       	and    si,0xfdff
c0013ba3:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0013ba7:	74 07                	je     c0013bb0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0013ba9:	89 d6                	mov    esi,edx
c0013bab:	66 81 ce 00 02       	or     si,0x200
c0013bb0:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0013bb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bb9:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0013bbd:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0013bc5:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0013bc8:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0013bd0:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0013bd3:	5b                   	pop    ebx
c0013bd4:	5e                   	pop    esi
c0013bd5:	5f                   	pop    edi
c0013bd6:	c3                   	ret    

c0013bd7 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0013bd7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013bdc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013be1:	c1 e0 04             	shl    eax,0x4
c0013be4:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0013be7:	c3                   	ret    

c0013be8 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0013be8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013bed:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013bf2:	c1 e0 04             	shl    eax,0x4
c0013bf5:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0013bf9:	c3                   	ret    

c0013bfa <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0013bfa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013bff:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013c04:	c1 e0 04             	shl    eax,0x4
c0013c07:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0013c0a:	c3                   	ret    

c0013c0b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0013c0b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013c10:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013c15:	c1 e0 04             	shl    eax,0x4
c0013c18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c1c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0013c1f:	c3                   	ret    

c0013c20 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0013c20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013c25:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013c2a:	c1 e0 04             	shl    eax,0x4
c0013c2d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c31:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0013c35:	c3                   	ret    

c0013c36 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0013c36:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013c3b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013c40:	c1 e0 04             	shl    eax,0x4
c0013c43:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c47:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0013c4a:	c3                   	ret    

c0013c4b <Vm::faultHandler(regs*)>:
c0013c4b:	55                   	push   ebp
c0013c4c:	57                   	push   edi
c0013c4d:	56                   	push   esi
c0013c4e:	53                   	push   ebx
c0013c4f:	83 ec 1c             	sub    esp,0x1c
c0013c52:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013c56:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c59:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0013c5d:	0f b7 f8             	movzx  edi,ax
c0013c60:	52                   	push   edx
c0013c61:	0f b7 c0             	movzx  eax,ax
c0013c64:	50                   	push   eax
c0013c65:	e8 6c fb ff ff       	call   c00137d6 <Vm::realToLinear(unsigned short, unsigned short)>
c0013c6a:	5a                   	pop    edx
c0013c6b:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0013c6e:	59                   	pop    ecx
c0013c6f:	89 c1                	mov    ecx,eax
c0013c71:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c78:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013c7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013c81:	0f b7 c5             	movzx  eax,bp
c0013c84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013c88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0013c8c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013c90:	e8 41 fb ff ff       	call   c00137d6 <Vm::realToLinear(unsigned short, unsigned short)>
c0013c95:	5e                   	pop    esi
c0013c96:	be 06 00 00 00       	mov    esi,0x6
c0013c9b:	5a                   	pop    edx
c0013c9c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0013ca1:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0013ca6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0013ca9:	80 fa 9d             	cmp    dl,0x9d
c0013cac:	0f 84 2c 02 00 00    	je     c0013ede <Vm::faultHandler(regs*)+0x293>
c0013cb2:	0f 87 91 00 00 00    	ja     c0013d49 <Vm::faultHandler(regs*)+0xfe>
c0013cb8:	80 fa 66             	cmp    dl,0x66
c0013cbb:	0f 84 98 01 00 00    	je     c0013e59 <Vm::faultHandler(regs*)+0x20e>
c0013cc1:	77 47                	ja     c0013d0a <Vm::faultHandler(regs*)+0xbf>
c0013cc3:	80 fa 36             	cmp    dl,0x36
c0013cc6:	0f 84 80 01 00 00    	je     c0013e4c <Vm::faultHandler(regs*)+0x201>
c0013ccc:	77 1a                	ja     c0013ce8 <Vm::faultHandler(regs*)+0x9d>
c0013cce:	80 fa 26             	cmp    dl,0x26
c0013cd1:	0f 84 4e 01 00 00    	je     c0013e25 <Vm::faultHandler(regs*)+0x1da>
c0013cd7:	80 fa 2e             	cmp    dl,0x2e
c0013cda:	0f 85 e2 05 00 00    	jne    c00142c2 <Vm::faultHandler(regs*)+0x677>
c0013ce0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013ce3:	31 f6                	xor    esi,esi
c0013ce5:	41                   	inc    ecx
c0013ce6:	eb be                	jmp    c0013ca6 <Vm::faultHandler(regs*)+0x5b>
c0013ce8:	80 fa 64             	cmp    dl,0x64
c0013ceb:	0f 84 41 01 00 00    	je     c0013e32 <Vm::faultHandler(regs*)+0x1e7>
c0013cf1:	0f 87 48 01 00 00    	ja     c0013e3f <Vm::faultHandler(regs*)+0x1f4>
c0013cf7:	80 fa 3e             	cmp    dl,0x3e
c0013cfa:	0f 85 c2 05 00 00    	jne    c00142c2 <Vm::faultHandler(regs*)+0x677>
c0013d00:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013d03:	be 01 00 00 00       	mov    esi,0x1
c0013d08:	eb db                	jmp    c0013ce5 <Vm::faultHandler(regs*)+0x9a>
c0013d0a:	80 fa 6d             	cmp    dl,0x6d
c0013d0d:	0f 84 ec 02 00 00    	je     c0013fff <Vm::faultHandler(regs*)+0x3b4>
c0013d13:	77 17                	ja     c0013d2c <Vm::faultHandler(regs*)+0xe1>
c0013d15:	80 fa 67             	cmp    dl,0x67
c0013d18:	0f 84 48 01 00 00    	je     c0013e66 <Vm::faultHandler(regs*)+0x21b>
c0013d1e:	80 fa 6c             	cmp    dl,0x6c
c0013d21:	0f 84 69 02 00 00    	je     c0013f90 <Vm::faultHandler(regs*)+0x345>
c0013d27:	e9 96 05 00 00       	jmp    c00142c2 <Vm::faultHandler(regs*)+0x677>
c0013d2c:	80 fa 6f             	cmp    dl,0x6f
c0013d2f:	0f 84 f4 03 00 00    	je     c0014129 <Vm::faultHandler(regs*)+0x4de>
c0013d35:	0f 82 59 03 00 00    	jb     c0014094 <Vm::faultHandler(regs*)+0x449>
c0013d3b:	80 fa 9c             	cmp    dl,0x9c
c0013d3e:	0f 84 2f 01 00 00    	je     c0013e73 <Vm::faultHandler(regs*)+0x228>
c0013d44:	e9 79 05 00 00       	jmp    c00142c2 <Vm::faultHandler(regs*)+0x677>
c0013d49:	80 fa ec             	cmp    dl,0xec
c0013d4c:	0f 84 14 05 00 00    	je     c0014266 <Vm::faultHandler(regs*)+0x61b>
c0013d52:	77 7b                	ja     c0013dcf <Vm::faultHandler(regs*)+0x184>
c0013d54:	80 fa e4             	cmp    dl,0xe4
c0013d57:	0f 84 93 04 00 00    	je     c00141f0 <Vm::faultHandler(regs*)+0x5a5>
c0013d5d:	77 53                	ja     c0013db2 <Vm::faultHandler(regs*)+0x167>
c0013d5f:	80 fa cd             	cmp    dl,0xcd
c0013d62:	0f 84 d9 01 00 00    	je     c0013f41 <Vm::faultHandler(regs*)+0x2f6>
c0013d68:	80 fa cf             	cmp    dl,0xcf
c0013d6b:	0f 85 51 05 00 00    	jne    c00142c2 <Vm::faultHandler(regs*)+0x677>
c0013d71:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0013d74:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0013d77:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0013d7b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0013d7e:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0013d82:	81 ca 00 02 02 00    	or     edx,0x20200
c0013d88:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0013d8b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0013d8f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013d95:	66 c1 e8 09          	shr    ax,0x9
c0013d99:	83 e0 01             	and    eax,0x1
c0013d9c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0013d9f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013da2:	83 c0 06             	add    eax,0x6
c0013da5:	25 ff ff 00 00       	and    eax,0xffff
c0013daa:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0013dad:	e9 0c 05 00 00       	jmp    c00142be <Vm::faultHandler(regs*)+0x673>
c0013db2:	80 fa e6             	cmp    dl,0xe6
c0013db5:	0f 84 7f 04 00 00    	je     c001423a <Vm::faultHandler(regs*)+0x5ef>
c0013dbb:	0f 82 4b 04 00 00    	jb     c001420c <Vm::faultHandler(regs*)+0x5c1>
c0013dc1:	80 fa e7             	cmp    dl,0xe7
c0013dc4:	0f 84 87 04 00 00    	je     c0014251 <Vm::faultHandler(regs*)+0x606>
c0013dca:	e9 f3 04 00 00       	jmp    c00142c2 <Vm::faultHandler(regs*)+0x677>
c0013dcf:	80 fa ef             	cmp    dl,0xef
c0013dd2:	0f 84 d1 04 00 00    	je     c00142a9 <Vm::faultHandler(regs*)+0x65e>
c0013dd8:	77 28                	ja     c0013e02 <Vm::faultHandler(regs*)+0x1b7>
c0013dda:	80 fa ed             	cmp    dl,0xed
c0013ddd:	0f 84 9f 04 00 00    	je     c0014282 <Vm::faultHandler(regs*)+0x637>
c0013de3:	80 fa ee             	cmp    dl,0xee
c0013de6:	0f 85 d6 04 00 00    	jne    c00142c2 <Vm::faultHandler(regs*)+0x677>
c0013dec:	50                   	push   eax
c0013ded:	50                   	push   eax
c0013dee:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0013df2:	50                   	push   eax
c0013df3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013df7:	50                   	push   eax
c0013df8:	e8 a3 f9 ff ff       	call   c00137a0 <Vm::outbv(unsigned short, unsigned char)>
c0013dfd:	e9 9f 04 00 00       	jmp    c00142a1 <Vm::faultHandler(regs*)+0x656>
c0013e02:	80 fa fa             	cmp    dl,0xfa
c0013e05:	0f 84 69 01 00 00    	je     c0013f74 <Vm::faultHandler(regs*)+0x329>
c0013e0b:	80 fa fb             	cmp    dl,0xfb
c0013e0e:	0f 84 6e 01 00 00    	je     c0013f82 <Vm::faultHandler(regs*)+0x337>
c0013e14:	80 fa f3             	cmp    dl,0xf3
c0013e17:	0f 85 a5 04 00 00    	jne    c00142c2 <Vm::faultHandler(regs*)+0x677>
c0013e1d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013e20:	e9 c0 fe ff ff       	jmp    c0013ce5 <Vm::faultHandler(regs*)+0x9a>
c0013e25:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013e28:	be 02 00 00 00       	mov    esi,0x2
c0013e2d:	e9 b3 fe ff ff       	jmp    c0013ce5 <Vm::faultHandler(regs*)+0x9a>
c0013e32:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013e35:	be 03 00 00 00       	mov    esi,0x3
c0013e3a:	e9 a6 fe ff ff       	jmp    c0013ce5 <Vm::faultHandler(regs*)+0x9a>
c0013e3f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013e42:	be 04 00 00 00       	mov    esi,0x4
c0013e47:	e9 99 fe ff ff       	jmp    c0013ce5 <Vm::faultHandler(regs*)+0x9a>
c0013e4c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013e4f:	be 05 00 00 00       	mov    esi,0x5
c0013e54:	e9 8c fe ff ff       	jmp    c0013ce5 <Vm::faultHandler(regs*)+0x9a>
c0013e59:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013e5c:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0013e61:	e9 7f fe ff ff       	jmp    c0013ce5 <Vm::faultHandler(regs*)+0x9a>
c0013e66:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013e69:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0013e6e:	e9 72 fe ff ff       	jmp    c0013ce5 <Vm::faultHandler(regs*)+0x9a>
c0013e73:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0013e76:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013e7a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013e7f:	74 30                	je     c0013eb1 <Vm::faultHandler(regs*)+0x266>
c0013e81:	83 e9 04             	sub    ecx,0x4
c0013e84:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0013e8a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0013e90:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0013e93:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0013e96:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013e9c:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0013ea0:	0f 84 15 04 00 00    	je     c00142bb <Vm::faultHandler(regs*)+0x670>
c0013ea6:	80 ce 02             	or     dh,0x2
c0013ea9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0013eac:	e9 0a 04 00 00       	jmp    c00142bb <Vm::faultHandler(regs*)+0x670>
c0013eb1:	83 e9 02             	sub    ecx,0x2
c0013eb4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0013eba:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0013ebd:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0013ec1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013ec7:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0013ecb:	74 05                	je     c0013ed2 <Vm::faultHandler(regs*)+0x287>
c0013ecd:	80 ce 02             	or     dh,0x2
c0013ed0:	eb 03                	jmp    c0013ed5 <Vm::faultHandler(regs*)+0x28a>
c0013ed2:	80 e6 fd             	and    dh,0xfd
c0013ed5:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0013ed9:	e9 dd 03 00 00       	jmp    c00142bb <Vm::faultHandler(regs*)+0x670>
c0013ede:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013ee3:	74 2a                	je     c0013f0f <Vm::faultHandler(regs*)+0x2c4>
c0013ee5:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ee7:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0013eed:	81 ca 00 02 02 00    	or     edx,0x20200
c0013ef3:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0013ef6:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ef8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013efe:	c1 e8 09             	shr    eax,0x9
c0013f01:	83 e0 01             	and    eax,0x1
c0013f04:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0013f07:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013f0a:	83 c0 04             	add    eax,0x4
c0013f0d:	eb 25                	jmp    c0013f34 <Vm::faultHandler(regs*)+0x2e9>
c0013f0f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0013f12:	81 ca 00 02 02 00    	or     edx,0x20200
c0013f18:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0013f1b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013f1e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013f24:	66 c1 e8 09          	shr    ax,0x9
c0013f28:	83 e0 01             	and    eax,0x1
c0013f2b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0013f2e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013f31:	83 c0 02             	add    eax,0x2
c0013f34:	25 ff ff 00 00       	and    eax,0xffff
c0013f39:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0013f3c:	e9 7a 03 00 00       	jmp    c00142bb <Vm::faultHandler(regs*)+0x670>
c0013f41:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013f45:	3c ee                	cmp    al,0xee
c0013f47:	75 10                	jne    c0013f59 <Vm::faultHandler(regs*)+0x30e>
c0013f49:	83 ec 0c             	sub    esp,0xc
c0013f4c:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0013f4f:	e8 e9 f8 ff ff       	call   c001383d <Vm::mainloop3(unsigned long)>
c0013f54:	e9 4b 03 00 00       	jmp    c00142a4 <Vm::faultHandler(regs*)+0x659>
c0013f59:	83 ec 0c             	sub    esp,0xc
c0013f5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013f60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f64:	51                   	push   ecx
c0013f65:	50                   	push   eax
c0013f66:	53                   	push   ebx
c0013f67:	e8 e1 fb ff ff       	call   c0013b4d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0013f6c:	83 c4 20             	add    esp,0x20
c0013f6f:	e9 4a 03 00 00       	jmp    c00142be <Vm::faultHandler(regs*)+0x673>
c0013f74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f79:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0013f7d:	e9 39 03 00 00       	jmp    c00142bb <Vm::faultHandler(regs*)+0x670>
c0013f82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f87:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0013f8b:	e9 2b 03 00 00       	jmp    c00142bb <Vm::faultHandler(regs*)+0x670>
c0013f90:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0013f93:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013f98:	74 2b                	je     c0013fc5 <Vm::faultHandler(regs*)+0x37a>
c0013f9a:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0013fa1:	76 22                	jbe    c0013fc5 <Vm::faultHandler(regs*)+0x37a>
c0013fa3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013fa7:	50                   	push   eax
c0013fa8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013fac:	50                   	push   eax
c0013fad:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013fb1:	50                   	push   eax
c0013fb2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013fb6:	50                   	push   eax
c0013fb7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013fbb:	50                   	push   eax
c0013fbc:	6a 6c                	push   0x6c
c0013fbe:	6a 6c                	push   0x6c
c0013fc0:	e9 b9 01 00 00       	jmp    c001417e <Vm::faultHandler(regs*)+0x533>
c0013fc5:	83 ec 0c             	sub    esp,0xc
c0013fc8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013fcc:	0f b7 f6             	movzx  esi,si
c0013fcf:	50                   	push   eax
c0013fd0:	e8 b8 f7 ff ff       	call   c001378d <Vm::inbv(unsigned short)>
c0013fd5:	83 c4 0c             	add    esp,0xc
c0013fd8:	0f b6 c0             	movzx  eax,al
c0013fdb:	50                   	push   eax
c0013fdc:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0013fe0:	50                   	push   eax
c0013fe1:	56                   	push   esi
c0013fe2:	e8 24 fc ff ff       	call   c0013c0b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0013fe7:	83 c4 10             	add    esp,0x10
c0013fea:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013fed:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013ff1:	74 03                	je     c0013ff6 <Vm::faultHandler(regs*)+0x3ab>
c0013ff3:	48                   	dec    eax
c0013ff4:	eb 01                	jmp    c0013ff7 <Vm::faultHandler(regs*)+0x3ac>
c0013ff6:	40                   	inc    eax
c0013ff7:	0f b7 c0             	movzx  eax,ax
c0013ffa:	e9 8d 00 00 00       	jmp    c001408c <Vm::faultHandler(regs*)+0x441>
c0013fff:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014002:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014005:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001400a:	74 29                	je     c0014035 <Vm::faultHandler(regs*)+0x3ea>
c001400c:	3d ff ff 00 00       	cmp    eax,0xffff
c0014011:	76 22                	jbe    c0014035 <Vm::faultHandler(regs*)+0x3ea>
c0014013:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014017:	50                   	push   eax
c0014018:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001401c:	50                   	push   eax
c001401d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014021:	50                   	push   eax
c0014022:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014026:	50                   	push   eax
c0014027:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001402b:	50                   	push   eax
c001402c:	6a 6d                	push   0x6d
c001402e:	6a 6d                	push   0x6d
c0014030:	e9 49 01 00 00       	jmp    c001417e <Vm::faultHandler(regs*)+0x533>
c0014035:	0f b7 c8             	movzx  ecx,ax
c0014038:	0f b7 f6             	movzx  esi,si
c001403b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001403e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014043:	74 20                	je     c0014065 <Vm::faultHandler(regs*)+0x41a>
c0014045:	ed                   	in     eax,dx
c0014046:	55                   	push   ebp
c0014047:	50                   	push   eax
c0014048:	51                   	push   ecx
c0014049:	56                   	push   esi
c001404a:	e8 e7 fb ff ff       	call   c0013c36 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001404f:	83 c4 10             	add    esp,0x10
c0014052:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014055:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014059:	74 05                	je     c0014060 <Vm::faultHandler(regs*)+0x415>
c001405b:	83 e8 04             	sub    eax,0x4
c001405e:	eb 27                	jmp    c0014087 <Vm::faultHandler(regs*)+0x43c>
c0014060:	83 c0 04             	add    eax,0x4
c0014063:	eb 22                	jmp    c0014087 <Vm::faultHandler(regs*)+0x43c>
c0014065:	66 ed                	in     ax,dx
c0014067:	0f b7 c0             	movzx  eax,ax
c001406a:	57                   	push   edi
c001406b:	50                   	push   eax
c001406c:	51                   	push   ecx
c001406d:	56                   	push   esi
c001406e:	e8 ad fb ff ff       	call   c0013c20 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014073:	83 c4 10             	add    esp,0x10
c0014076:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014079:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001407d:	74 05                	je     c0014084 <Vm::faultHandler(regs*)+0x439>
c001407f:	83 e8 02             	sub    eax,0x2
c0014082:	eb 03                	jmp    c0014087 <Vm::faultHandler(regs*)+0x43c>
c0014084:	83 c0 02             	add    eax,0x2
c0014087:	25 ff ff 00 00       	and    eax,0xffff
c001408c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001408f:	e9 27 02 00 00       	jmp    c00142bb <Vm::faultHandler(regs*)+0x670>
c0014094:	8d 46 ff             	lea    eax,[esi-0x1]
c0014097:	3c 05                	cmp    al,0x5
c0014099:	77 24                	ja     c00140bf <Vm::faultHandler(regs*)+0x474>
c001409b:	0f b6 c0             	movzx  eax,al
c001409e:	ff 24 85 84 f5 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0a7c]
c00140a5:	0f b7 fd             	movzx  edi,bp
c00140a8:	eb 15                	jmp    c00140bf <Vm::faultHandler(regs*)+0x474>
c00140aa:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00140ae:	eb 0f                	jmp    c00140bf <Vm::faultHandler(regs*)+0x474>
c00140b0:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00140b4:	eb 09                	jmp    c00140bf <Vm::faultHandler(regs*)+0x474>
c00140b6:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00140ba:	eb 03                	jmp    c00140bf <Vm::faultHandler(regs*)+0x474>
c00140bc:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00140bf:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00140c2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00140c7:	74 29                	je     c00140f2 <Vm::faultHandler(regs*)+0x4a7>
c00140c9:	3d ff ff 00 00       	cmp    eax,0xffff
c00140ce:	76 22                	jbe    c00140f2 <Vm::faultHandler(regs*)+0x4a7>
c00140d0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00140d4:	50                   	push   eax
c00140d5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00140d9:	50                   	push   eax
c00140da:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00140de:	50                   	push   eax
c00140df:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00140e3:	50                   	push   eax
c00140e4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00140e8:	50                   	push   eax
c00140e9:	6a 6e                	push   0x6e
c00140eb:	6a 6e                	push   0x6e
c00140ed:	e9 8c 00 00 00       	jmp    c001417e <Vm::faultHandler(regs*)+0x533>
c00140f2:	0f b7 c0             	movzx  eax,ax
c00140f5:	52                   	push   edx
c00140f6:	52                   	push   edx
c00140f7:	50                   	push   eax
c00140f8:	57                   	push   edi
c00140f9:	e8 d9 fa ff ff       	call   c0013bd7 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00140fe:	59                   	pop    ecx
c00140ff:	0f b6 c0             	movzx  eax,al
c0014102:	5e                   	pop    esi
c0014103:	50                   	push   eax
c0014104:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014108:	50                   	push   eax
c0014109:	e8 92 f6 ff ff       	call   c00137a0 <Vm::outbv(unsigned short, unsigned char)>
c001410e:	83 c4 10             	add    esp,0x10
c0014111:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014114:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014118:	74 03                	je     c001411d <Vm::faultHandler(regs*)+0x4d2>
c001411a:	48                   	dec    eax
c001411b:	eb 01                	jmp    c001411e <Vm::faultHandler(regs*)+0x4d3>
c001411d:	40                   	inc    eax
c001411e:	0f b7 c0             	movzx  eax,ax
c0014121:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014124:	e9 92 01 00 00       	jmp    c00142bb <Vm::faultHandler(regs*)+0x670>
c0014129:	8d 46 ff             	lea    eax,[esi-0x1]
c001412c:	3c 05                	cmp    al,0x5
c001412e:	77 1f                	ja     c001414f <Vm::faultHandler(regs*)+0x504>
c0014130:	0f b6 c0             	movzx  eax,al
c0014133:	ff 24 85 9c f5 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0a64]
c001413a:	89 ef                	mov    edi,ebp
c001413c:	eb 11                	jmp    c001414f <Vm::faultHandler(regs*)+0x504>
c001413e:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014141:	eb 0c                	jmp    c001414f <Vm::faultHandler(regs*)+0x504>
c0014143:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014146:	eb 07                	jmp    c001414f <Vm::faultHandler(regs*)+0x504>
c0014148:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001414b:	eb 02                	jmp    c001414f <Vm::faultHandler(regs*)+0x504>
c001414d:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001414f:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014152:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014157:	74 37                	je     c0014190 <Vm::faultHandler(regs*)+0x545>
c0014159:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001415f:	76 2f                	jbe    c0014190 <Vm::faultHandler(regs*)+0x545>
c0014161:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014165:	50                   	push   eax
c0014166:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001416a:	50                   	push   eax
c001416b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001416f:	50                   	push   eax
c0014170:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014174:	50                   	push   eax
c0014175:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014179:	50                   	push   eax
c001417a:	6a 6f                	push   0x6f
c001417c:	6a 6f                	push   0x6f
c001417e:	68 2a f5 01 c0       	push   0xc001f52a
c0014183:	e8 7f 59 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c0014188:	83 c4 20             	add    esp,0x20
c001418b:	e9 86 01 00 00       	jmp    c0014316 <Vm::faultHandler(regs*)+0x6cb>
c0014190:	0f b7 d7             	movzx  edx,di
c0014193:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014196:	0f b7 c6             	movzx  eax,si
c0014199:	81 e1 00 04 00 00    	and    ecx,0x400
c001419f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00141a2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00141a7:	74 1d                	je     c00141c6 <Vm::faultHandler(regs*)+0x57b>
c00141a9:	55                   	push   ebp
c00141aa:	55                   	push   ebp
c00141ab:	50                   	push   eax
c00141ac:	52                   	push   edx
c00141ad:	e8 48 fa ff ff       	call   c0013bfa <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00141b2:	83 c4 10             	add    esp,0x10
c00141b5:	89 fa                	mov    edx,edi
c00141b7:	ef                   	out    dx,eax
c00141b8:	85 c9                	test   ecx,ecx
c00141ba:	74 05                	je     c00141c1 <Vm::faultHandler(regs*)+0x576>
c00141bc:	83 ee 04             	sub    esi,0x4
c00141bf:	eb 21                	jmp    c00141e2 <Vm::faultHandler(regs*)+0x597>
c00141c1:	83 c6 04             	add    esi,0x4
c00141c4:	eb 1c                	jmp    c00141e2 <Vm::faultHandler(regs*)+0x597>
c00141c6:	55                   	push   ebp
c00141c7:	55                   	push   ebp
c00141c8:	50                   	push   eax
c00141c9:	52                   	push   edx
c00141ca:	e8 19 fa ff ff       	call   c0013be8 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00141cf:	83 c4 10             	add    esp,0x10
c00141d2:	89 fa                	mov    edx,edi
c00141d4:	66 ef                	out    dx,ax
c00141d6:	85 c9                	test   ecx,ecx
c00141d8:	74 05                	je     c00141df <Vm::faultHandler(regs*)+0x594>
c00141da:	83 ee 02             	sub    esi,0x2
c00141dd:	eb 03                	jmp    c00141e2 <Vm::faultHandler(regs*)+0x597>
c00141df:	83 c6 02             	add    esi,0x2
c00141e2:	81 e6 ff ff 00 00    	and    esi,0xffff
c00141e8:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00141eb:	e9 cb 00 00 00       	jmp    c00142bb <Vm::faultHandler(regs*)+0x670>
c00141f0:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00141f7:	83 ec 0c             	sub    esp,0xc
c00141fa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00141fe:	50                   	push   eax
c00141ff:	e8 89 f5 ff ff       	call   c001378d <Vm::inbv(unsigned short)>
c0014204:	0f b6 c0             	movzx  eax,al
c0014207:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001420a:	eb 3f                	jmp    c001424b <Vm::faultHandler(regs*)+0x600>
c001420c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014211:	74 07                	je     c001421a <Vm::faultHandler(regs*)+0x5cf>
c0014213:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014217:	ed                   	in     eax,dx
c0014218:	eb 14                	jmp    c001422e <Vm::faultHandler(regs*)+0x5e3>
c001421a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001421d:	66 31 f6             	xor    si,si
c0014220:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014223:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014227:	66 ed                	in     ax,dx
c0014229:	0f b7 c0             	movzx  eax,ax
c001422c:	09 f0                	or     eax,esi
c001422e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014231:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014235:	e9 84 00 00 00       	jmp    c00142be <Vm::faultHandler(regs*)+0x673>
c001423a:	52                   	push   edx
c001423b:	52                   	push   edx
c001423c:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014240:	50                   	push   eax
c0014241:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014245:	50                   	push   eax
c0014246:	e8 55 f5 ff ff       	call   c00137a0 <Vm::outbv(unsigned short, unsigned char)>
c001424b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001424f:	eb 53                	jmp    c00142a4 <Vm::faultHandler(regs*)+0x659>
c0014251:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014254:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014258:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001425d:	74 03                	je     c0014262 <Vm::faultHandler(regs*)+0x617>
c001425f:	ef                   	out    dx,eax
c0014260:	eb cf                	jmp    c0014231 <Vm::faultHandler(regs*)+0x5e6>
c0014262:	66 ef                	out    dx,ax
c0014264:	eb cb                	jmp    c0014231 <Vm::faultHandler(regs*)+0x5e6>
c0014266:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001426d:	83 ec 0c             	sub    esp,0xc
c0014270:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014274:	50                   	push   eax
c0014275:	e8 13 f5 ff ff       	call   c001378d <Vm::inbv(unsigned short)>
c001427a:	0f b6 c0             	movzx  eax,al
c001427d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014280:	eb 1f                	jmp    c00142a1 <Vm::faultHandler(regs*)+0x656>
c0014282:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014285:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001428a:	74 03                	je     c001428f <Vm::faultHandler(regs*)+0x644>
c001428c:	ed                   	in     eax,dx
c001428d:	eb 0d                	jmp    c001429c <Vm::faultHandler(regs*)+0x651>
c001428f:	66 ed                	in     ax,dx
c0014291:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014294:	0f b7 c0             	movzx  eax,ax
c0014297:	66 31 d2             	xor    dx,dx
c001429a:	09 d0                	or     eax,edx
c001429c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001429f:	eb 1a                	jmp    c00142bb <Vm::faultHandler(regs*)+0x670>
c00142a1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00142a4:	83 c4 10             	add    esp,0x10
c00142a7:	eb 15                	jmp    c00142be <Vm::faultHandler(regs*)+0x673>
c00142a9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00142ac:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00142af:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00142b4:	74 03                	je     c00142b9 <Vm::faultHandler(regs*)+0x66e>
c00142b6:	ef                   	out    dx,eax
c00142b7:	eb 02                	jmp    c00142bb <Vm::faultHandler(regs*)+0x670>
c00142b9:	66 ef                	out    dx,ax
c00142bb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00142be:	b0 01                	mov    al,0x1
c00142c0:	eb 56                	jmp    c0014318 <Vm::faultHandler(regs*)+0x6cd>
c00142c2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00142c6:	50                   	push   eax
c00142c7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00142cb:	50                   	push   eax
c00142cc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00142d0:	50                   	push   eax
c00142d1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00142d5:	50                   	push   eax
c00142d6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00142da:	50                   	push   eax
c00142db:	52                   	push   edx
c00142dc:	52                   	push   edx
c00142dd:	68 57 f5 01 c0       	push   0xc001f557
c00142e2:	e8 20 58 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c00142e7:	83 c4 20             	add    esp,0x20
c00142ea:	83 ec 0c             	sub    esp,0xc
c00142ed:	6a 60                	push   0x60
c00142ef:	e8 99 f4 ff ff       	call   c001378d <Vm::inbv(unsigned short)>
c00142f4:	83 c4 10             	add    esp,0x10
c00142f7:	3c 1c                	cmp    al,0x1c
c00142f9:	74 04                	je     c00142ff <Vm::faultHandler(regs*)+0x6b4>
c00142fb:	3c 5a                	cmp    al,0x5a
c00142fd:	75 eb                	jne    c00142ea <Vm::faultHandler(regs*)+0x69f>
c00142ff:	3c 5a                	cmp    al,0x5a
c0014301:	74 04                	je     c0014307 <Vm::faultHandler(regs*)+0x6bc>
c0014303:	3c 1c                	cmp    al,0x1c
c0014305:	75 0f                	jne    c0014316 <Vm::faultHandler(regs*)+0x6cb>
c0014307:	83 ec 0c             	sub    esp,0xc
c001430a:	6a 60                	push   0x60
c001430c:	e8 7c f4 ff ff       	call   c001378d <Vm::inbv(unsigned short)>
c0014311:	83 c4 10             	add    esp,0x10
c0014314:	eb e9                	jmp    c00142ff <Vm::faultHandler(regs*)+0x6b4>
c0014316:	31 c0                	xor    eax,eax
c0014318:	83 c4 1c             	add    esp,0x1c
c001431b:	5b                   	pop    ebx
c001431c:	5e                   	pop    esi
c001431d:	5f                   	pop    edi
c001431e:	5d                   	pop    ebp
c001431f:	c3                   	ret    

c0014320 <Vm::fpuInternalTo32(unsigned long long)>:
c0014320:	57                   	push   edi
c0014321:	56                   	push   esi
c0014322:	53                   	push   ebx
c0014323:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001432b:	89 d6                	mov    esi,edx
c001432d:	89 d7                	mov    edi,edx
c001432f:	89 c1                	mov    ecx,eax
c0014331:	c1 ef 14             	shr    edi,0x14
c0014334:	89 d3                	mov    ebx,edx
c0014336:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001433c:	31 d2                	xor    edx,edx
c001433e:	89 f8                	mov    eax,edi
c0014340:	81 e6 00 00 00 80    	and    esi,0x80000000
c0014346:	bf ff 00 00 00       	mov    edi,0xff
c001434b:	05 80 fc ff ff       	add    eax,0xfffffc80
c0014350:	83 d2 ff             	adc    edx,0xffffffff
c0014353:	39 c7                	cmp    edi,eax
c0014355:	bf 00 00 00 00       	mov    edi,0x0
c001435a:	19 d7                	sbb    edi,edx
c001435c:	72 16                	jb     c0014374 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c001435e:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0014362:	c1 e0 17             	shl    eax,0x17
c0014365:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001436b:	09 f1                	or     ecx,esi
c001436d:	09 c1                	or     ecx,eax
c001436f:	89 cf                	mov    edi,ecx
c0014371:	eb 05                	jmp    c0014378 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0014373:	90                   	nop
c0014374:	31 ff                	xor    edi,edi
c0014376:	66 90                	xchg   ax,ax
c0014378:	89 f8                	mov    eax,edi
c001437a:	5b                   	pop    ebx
c001437b:	5e                   	pop    esi
c001437c:	5f                   	pop    edi
c001437d:	c3                   	ret    

c001437e <Vm::fpuInternalTo64(unsigned long long)>:
c001437e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014382:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014386:	c3                   	ret    

c0014387 <Vm::fpu32ToInternal(unsigned int)>:
c0014387:	57                   	push   edi
c0014388:	31 ff                	xor    edi,edi
c001438a:	56                   	push   esi
c001438b:	53                   	push   ebx
c001438c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014390:	89 cb                	mov    ebx,ecx
c0014392:	89 ce                	mov    esi,ecx
c0014394:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001439a:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c00143a0:	c1 e9 17             	shr    ecx,0x17
c00143a3:	89 f0                	mov    eax,esi
c00143a5:	0f b6 d1             	movzx  edx,cl
c00143a8:	81 c2 80 03 00 00    	add    edx,0x380
c00143ae:	89 d1                	mov    ecx,edx
c00143b0:	89 fa                	mov    edx,edi
c00143b2:	c1 e1 14             	shl    ecx,0x14
c00143b5:	0f a4 c2 1d          	shld   edx,eax,0x1d
c00143b9:	c1 e0 1d             	shl    eax,0x1d
c00143bc:	89 d7                	mov    edi,edx
c00143be:	89 c6                	mov    esi,eax
c00143c0:	89 ca                	mov    edx,ecx
c00143c2:	89 f0                	mov    eax,esi
c00143c4:	09 fa                	or     edx,edi
c00143c6:	09 da                	or     edx,ebx
c00143c8:	5b                   	pop    ebx
c00143c9:	5e                   	pop    esi
c00143ca:	5f                   	pop    edi
c00143cb:	c3                   	ret    

c00143cc <Vm::fpu64ToInternal(unsigned long long)>:
c00143cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00143d4:	c3                   	ret    

c00143d5 <Vm::fpuFloatToLong(unsigned long long)>:
c00143d5:	57                   	push   edi
c00143d6:	31 c0                	xor    eax,eax
c00143d8:	56                   	push   esi
c00143d9:	31 d2                	xor    edx,edx
c00143db:	53                   	push   ebx
c00143dc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00143e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143e4:	89 d9                	mov    ecx,ebx
c00143e6:	c1 e9 14             	shr    ecx,0x14
c00143e9:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00143ef:	89 cf                	mov    edi,ecx
c00143f1:	81 ef ff 03 00 00    	sub    edi,0x3ff
c00143f7:	78 37                	js     c0014430 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c00143f9:	89 d9                	mov    ecx,ebx
c00143fb:	89 f0                	mov    eax,esi
c00143fd:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0014403:	81 c9 00 00 10 00    	or     ecx,0x100000
c0014409:	89 ca                	mov    edx,ecx
c001440b:	b9 34 00 00 00       	mov    ecx,0x34
c0014410:	29 f9                	sub    ecx,edi
c0014412:	0f ad d0             	shrd   eax,edx,cl
c0014415:	d3 fa                	sar    edx,cl
c0014417:	f6 c1 20             	test   cl,0x20
c001441a:	74 08                	je     c0014424 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c001441c:	89 d0                	mov    eax,edx
c001441e:	c1 fa 1f             	sar    edx,0x1f
c0014421:	8d 76 00             	lea    esi,[esi+0x0]
c0014424:	85 db                	test   ebx,ebx
c0014426:	79 08                	jns    c0014430 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0014428:	f7 d8                	neg    eax
c001442a:	83 d2 00             	adc    edx,0x0
c001442d:	f7 da                	neg    edx
c001442f:	90                   	nop
c0014430:	5b                   	pop    ebx
c0014431:	5e                   	pop    esi
c0014432:	5f                   	pop    edi
c0014433:	c3                   	ret    

c0014434 <Vm::fpuULongToFloat(unsigned long long)>:
c0014434:	57                   	push   edi
c0014435:	31 c9                	xor    ecx,ecx
c0014437:	56                   	push   esi
c0014438:	53                   	push   ebx
c0014439:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001443d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0014441:	8d 76 00             	lea    esi,[esi+0x0]
c0014444:	0f ba e7 14          	bt     edi,0x14
c0014448:	72 0a                	jb     c0014454 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c001444a:	01 f6                	add    esi,esi
c001444c:	11 ff                	adc    edi,edi
c001444e:	41                   	inc    ecx
c001444f:	eb f3                	jmp    c0014444 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0014451:	8d 76 00             	lea    esi,[esi+0x0]
c0014454:	89 fa                	mov    edx,edi
c0014456:	89 f0                	mov    eax,esi
c0014458:	bb 33 04 00 00       	mov    ebx,0x433
c001445d:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0014463:	29 cb                	sub    ebx,ecx
c0014465:	89 d9                	mov    ecx,ebx
c0014467:	5b                   	pop    ebx
c0014468:	c1 e1 14             	shl    ecx,0x14
c001446b:	5e                   	pop    esi
c001446c:	09 ca                	or     edx,ecx
c001446e:	5f                   	pop    edi
c001446f:	c3                   	ret    

c0014470 <Vm::fpuLongToFloat(long long)>:
c0014470:	56                   	push   esi
c0014471:	31 c0                	xor    eax,eax
c0014473:	53                   	push   ebx
c0014474:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014478:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001447c:	39 c8                	cmp    eax,ecx
c001447e:	19 d8                	sbb    eax,ebx
c0014480:	7d 06                	jge    c0014488 <Vm::fpuLongToFloat(long long)+0x18>
c0014482:	31 f6                	xor    esi,esi
c0014484:	eb 0e                	jmp    c0014494 <Vm::fpuLongToFloat(long long)+0x24>
c0014486:	66 90                	xchg   ax,ax
c0014488:	f7 d9                	neg    ecx
c001448a:	be 01 00 00 00       	mov    esi,0x1
c001448f:	83 d3 00             	adc    ebx,0x0
c0014492:	f7 db                	neg    ebx
c0014494:	31 c0                	xor    eax,eax
c0014496:	66 90                	xchg   ax,ax
c0014498:	0f ba e3 14          	bt     ebx,0x14
c001449c:	72 0a                	jb     c00144a8 <Vm::fpuLongToFloat(long long)+0x38>
c001449e:	01 c9                	add    ecx,ecx
c00144a0:	11 db                	adc    ebx,ebx
c00144a2:	40                   	inc    eax
c00144a3:	eb f3                	jmp    c0014498 <Vm::fpuLongToFloat(long long)+0x28>
c00144a5:	8d 76 00             	lea    esi,[esi+0x0]
c00144a8:	ba 33 04 00 00       	mov    edx,0x433
c00144ad:	29 c2                	sub    edx,eax
c00144af:	89 c8                	mov    eax,ecx
c00144b1:	c1 e2 14             	shl    edx,0x14
c00144b4:	89 d9                	mov    ecx,ebx
c00144b6:	89 f3                	mov    ebx,esi
c00144b8:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c00144be:	09 ca                	or     edx,ecx
c00144c0:	84 db                	test   bl,bl
c00144c2:	74 08                	je     c00144cc <Vm::fpuLongToFloat(long long)+0x5c>
c00144c4:	81 ca 00 00 00 80    	or     edx,0x80000000
c00144ca:	66 90                	xchg   ax,ax
c00144cc:	5b                   	pop    ebx
c00144cd:	5e                   	pop    esi
c00144ce:	c3                   	ret    

c00144cf <Vm::fpuGet0()>:
c00144cf:	31 c0                	xor    eax,eax
c00144d1:	31 d2                	xor    edx,edx
c00144d3:	c3                   	ret    

c00144d4 <Vm::fpuGet1()>:
c00144d4:	b8 01 00 00 00       	mov    eax,0x1
c00144d9:	31 d2                	xor    edx,edx
c00144db:	c3                   	ret    

c00144dc <Vm::fpuGetPi()>:
c00144dc:	b8 03 00 00 00       	mov    eax,0x3
c00144e1:	31 d2                	xor    edx,edx
c00144e3:	c3                   	ret    

c00144e4 <Vm::fpuGetLog2E()>:
c00144e4:	83 ec 18             	sub    esp,0x18
c00144e7:	68 b4 f5 01 c0       	push   0xc001f5b4
c00144ec:	e8 ec b2 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c00144f1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00144f6:	31 d2                	xor    edx,edx
c00144f8:	83 c4 1c             	add    esp,0x1c
c00144fb:	c3                   	ret    

c00144fc <Vm::fpuGetLogE2()>:
c00144fc:	83 ec 18             	sub    esp,0x18
c00144ff:	68 c0 f5 01 c0       	push   0xc001f5c0
c0014504:	e8 d4 b2 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0014509:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001450e:	31 d2                	xor    edx,edx
c0014510:	83 c4 1c             	add    esp,0x1c
c0014513:	c3                   	ret    

c0014514 <Vm::fpuGetLog210()>:
c0014514:	83 ec 18             	sub    esp,0x18
c0014517:	68 cc f5 01 c0       	push   0xc001f5cc
c001451c:	e8 bc b2 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0014521:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014526:	31 d2                	xor    edx,edx
c0014528:	83 c4 1c             	add    esp,0x1c
c001452b:	c3                   	ret    

c001452c <Vm::fpuGetLog102()>:
c001452c:	83 ec 18             	sub    esp,0x18
c001452f:	68 d9 f5 01 c0       	push   0xc001f5d9
c0014534:	e8 a4 b2 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0014539:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001453e:	31 d2                	xor    edx,edx
c0014540:	83 c4 1c             	add    esp,0x1c
c0014543:	c3                   	ret    

c0014544 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0014544:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014548:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001454c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014550:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0014554:	0f 92 c0             	setb   al
c0014557:	c3                   	ret    

c0014558 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0014558:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001455c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014560:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0014564:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0014568:	09 c2                	or     edx,eax
c001456a:	0f 94 c0             	sete   al
c001456d:	c3                   	ret    

c001456e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001456e:	57                   	push   edi
c001456f:	56                   	push   esi
c0014570:	53                   	push   ebx
c0014571:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014575:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014579:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001457d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014581:	57                   	push   edi
c0014582:	56                   	push   esi
c0014583:	53                   	push   ebx
c0014584:	51                   	push   ecx
c0014585:	e8 ce ff ff ff       	call   c0014558 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001458a:	83 c4 10             	add    esp,0x10
c001458d:	88 c2                	mov    dl,al
c001458f:	31 c0                	xor    eax,eax
c0014591:	84 d2                	test   dl,dl
c0014593:	75 0f                	jne    c00145a4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0014595:	57                   	push   edi
c0014596:	56                   	push   esi
c0014597:	53                   	push   ebx
c0014598:	51                   	push   ecx
c0014599:	e8 a6 ff ff ff       	call   c0014544 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001459e:	83 c4 10             	add    esp,0x10
c00145a1:	8d 76 00             	lea    esi,[esi+0x0]
c00145a4:	83 e0 01             	and    eax,0x1
c00145a7:	5b                   	pop    ebx
c00145a8:	88 c1                	mov    cl,al
c00145aa:	83 e2 01             	and    edx,0x1
c00145ad:	a0 21 3d 02 c0       	mov    al,ds:0xc0023d21
c00145b2:	c1 e2 06             	shl    edx,0x6
c00145b5:	83 e0 ba             	and    eax,0xffffffba
c00145b8:	5e                   	pop    esi
c00145b9:	09 c8                	or     eax,ecx
c00145bb:	5f                   	pop    edi
c00145bc:	09 d0                	or     eax,edx
c00145be:	a2 21 3d 02 c0       	mov    ds:0xc0023d21,al
c00145c3:	c3                   	ret    

c00145c4 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c00145c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00145c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00145cc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00145d0:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c00145d4:	c3                   	ret    

c00145d5 <Vm::fpuAbs(unsigned long long)>:
c00145d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00145dd:	c3                   	ret    

c00145de <Vm::fpuChs(unsigned long long)>:
c00145de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00145e6:	f7 d8                	neg    eax
c00145e8:	83 d2 00             	adc    edx,0x0
c00145eb:	f7 da                	neg    edx
c00145ed:	c3                   	ret    

c00145ee <Vm::fpuSub(unsigned long long, unsigned long long)>:
c00145ee:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c00145f2:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c00145f7:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c00145fb:	eb c7                	jmp    c00145c4 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c00145fd <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c00145fd:	53                   	push   ebx
c00145fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014602:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014606:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001460a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001460e:	0f af ca             	imul   ecx,edx
c0014611:	0f af d8             	imul   ebx,eax
c0014614:	f7 e2                	mul    edx
c0014616:	01 d9                	add    ecx,ebx
c0014618:	5b                   	pop    ebx
c0014619:	01 ca                	add    edx,ecx
c001461b:	c3                   	ret    

c001461c <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001461c:	83 ec 0c             	sub    esp,0xc
c001461f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014623:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014627:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001462b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001462f:	e8 bc 82 00 00       	call   c001c8f0 <__udivdi3>
c0014634:	83 c4 1c             	add    esp,0x1c
c0014637:	c3                   	ret    

c0014638 <Vm::fpuSquare(unsigned long long)>:
c0014638:	50                   	push   eax
c0014639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001463d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014641:	52                   	push   edx
c0014642:	50                   	push   eax
c0014643:	52                   	push   edx
c0014644:	50                   	push   eax
c0014645:	e8 b3 ff ff ff       	call   c00145fd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001464a:	83 c4 14             	add    esp,0x14
c001464d:	c3                   	ret    

c001464e <Vm::fpuGetReg(int)>:
c001464e:	83 ec 0c             	sub    esp,0xc
c0014651:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0014656:	76 10                	jbe    c0014668 <Vm::fpuGetReg(int)+0x1a>
c0014658:	83 ec 0c             	sub    esp,0xc
c001465b:	68 e6 f5 01 c0       	push   0xc001f5e6
c0014660:	e8 78 b1 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0014665:	83 c4 10             	add    esp,0x10
c0014668:	a0 21 3d 02 c0       	mov    al,ds:0xc0023d21
c001466d:	b9 08 00 00 00       	mov    ecx,0x8
c0014672:	c0 e8 03             	shr    al,0x3
c0014675:	83 e0 07             	and    eax,0x7
c0014678:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001467c:	99                   	cdq    
c001467d:	f7 f9                	idiv   ecx
c001467f:	8b 04 d5 24 3d 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffdc2dc]
c0014686:	8b 14 d5 28 3d 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffdc2d8]
c001468d:	83 c4 0c             	add    esp,0xc
c0014690:	c3                   	ret    

c0014691 <Vm::fpuSetReg(int, unsigned long long)>:
c0014691:	57                   	push   edi
c0014692:	56                   	push   esi
c0014693:	52                   	push   edx
c0014694:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014698:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001469c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c00146a1:	76 11                	jbe    c00146b4 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c00146a3:	83 ec 0c             	sub    esp,0xc
c00146a6:	68 f9 f5 01 c0       	push   0xc001f5f9
c00146ab:	e8 2d b1 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c00146b0:	83 c4 10             	add    esp,0x10
c00146b3:	90                   	nop
c00146b4:	a0 21 3d 02 c0       	mov    al,ds:0xc0023d21
c00146b9:	b9 08 00 00 00       	mov    ecx,0x8
c00146be:	c0 e8 03             	shr    al,0x3
c00146c1:	83 e0 07             	and    eax,0x7
c00146c4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00146c8:	99                   	cdq    
c00146c9:	f7 f9                	idiv   ecx
c00146cb:	89 34 d5 24 3d 02 c0 	mov    DWORD PTR [edx*8-0x3ffdc2dc],esi
c00146d2:	89 3c d5 28 3d 02 c0 	mov    DWORD PTR [edx*8-0x3ffdc2d8],edi
c00146d9:	58                   	pop    eax
c00146da:	5e                   	pop    esi
c00146db:	5f                   	pop    edi
c00146dc:	c3                   	ret    

c00146dd <Vm::fpuPush(unsigned long long)>:
c00146dd:	a0 21 3d 02 c0       	mov    al,ds:0xc0023d21
c00146e2:	c0 e8 03             	shr    al,0x3
c00146e5:	83 e0 07             	and    eax,0x7
c00146e8:	83 c0 07             	add    eax,0x7
c00146eb:	88 c2                	mov    dl,al
c00146ed:	83 e0 07             	and    eax,0x7
c00146f0:	83 e2 07             	and    edx,0x7
c00146f3:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c00146fa:	8a 15 21 3d 02 c0    	mov    dl,BYTE PTR ds:0xc0023d21
c0014700:	83 e2 c7             	and    edx,0xffffffc7
c0014703:	09 ca                	or     edx,ecx
c0014705:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014709:	88 15 21 3d 02 c0    	mov    BYTE PTR ds:0xc0023d21,dl
c001470f:	89 0c c5 28 3d 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc2d8],ecx
c0014716:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001471a:	89 14 c5 24 3d 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc2dc],edx
c0014721:	a1 64 3d 02 c0       	mov    eax,ds:0xc0023d64
c0014726:	83 f8 08             	cmp    eax,0x8
c0014729:	75 09                	jne    c0014734 <Vm::fpuPush(unsigned long long)+0x57>
c001472b:	80 0d 20 3d 02 c0 40 	or     BYTE PTR ds:0xc0023d20,0x40
c0014732:	c3                   	ret    
c0014733:	90                   	nop
c0014734:	40                   	inc    eax
c0014735:	a3 64 3d 02 c0       	mov    ds:0xc0023d64,eax
c001473a:	c3                   	ret    

c001473b <Vm::fpuPop()>:
c001473b:	8a 0d 21 3d 02 c0    	mov    cl,BYTE PTR ds:0xc0023d21
c0014741:	53                   	push   ebx
c0014742:	c0 e9 03             	shr    cl,0x3
c0014745:	8a 1d 21 3d 02 c0    	mov    bl,BYTE PTR ds:0xc0023d21
c001474b:	83 e1 07             	and    ecx,0x7
c001474e:	83 e3 c7             	and    ebx,0xffffffc7
c0014751:	8b 04 cd 24 3d 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffdc2dc]
c0014758:	8b 14 cd 28 3d 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffdc2d8]
c001475f:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c0014766:	83 e1 38             	and    ecx,0x38
c0014769:	09 d9                	or     ecx,ebx
c001476b:	88 0d 21 3d 02 c0    	mov    BYTE PTR ds:0xc0023d21,cl
c0014771:	8b 0d 64 3d 02 c0    	mov    ecx,DWORD PTR ds:0xc0023d64
c0014777:	85 c9                	test   ecx,ecx
c0014779:	74 09                	je     c0014784 <Vm::fpuPop()+0x49>
c001477b:	49                   	dec    ecx
c001477c:	89 0d 64 3d 02 c0    	mov    DWORD PTR ds:0xc0023d64,ecx
c0014782:	eb 08                	jmp    c001478c <Vm::fpuPop()+0x51>
c0014784:	80 0d 20 3d 02 c0 40 	or     BYTE PTR ds:0xc0023d20,0x40
c001478b:	90                   	nop
c001478c:	5b                   	pop    ebx
c001478d:	c3                   	ret    

c001478e <Vm::x87Handler(regs*)>:
c001478e:	55                   	push   ebp
c001478f:	57                   	push   edi
c0014790:	56                   	push   esi
c0014791:	53                   	push   ebx
c0014792:	83 ec 1c             	sub    esp,0x1c
c0014795:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014799:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001479e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00147a1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00147a9:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00147ad:	50                   	push   eax
c00147ae:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00147b2:	50                   	push   eax
c00147b3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00147b7:	50                   	push   eax
c00147b8:	53                   	push   ebx
c00147b9:	e8 9e a8 ff ff       	call   c000f05c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00147be:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c00147c1:	83 c4 10             	add    esp,0x10
c00147c4:	89 c6                	mov    esi,eax
c00147c6:	80 fa d9             	cmp    dl,0xd9
c00147c9:	0f 85 79 01 00 00    	jne    c0014948 <Vm::x87Handler(regs*)+0x1ba>
c00147cf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00147d3:	8d 50 20             	lea    edx,[eax+0x20]
c00147d6:	80 fa 0e             	cmp    dl,0xe
c00147d9:	0f 87 a5 00 00 00    	ja     c0014884 <Vm::x87Handler(regs*)+0xf6>
c00147df:	0f b6 d2             	movzx  edx,dl
c00147e2:	ff 24 95 0c f6 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe09f4]
c00147e9:	8d 76 00             	lea    esi,[esi+0x0]
c00147ec:	e8 de fc ff ff       	call   c00144cf <Vm::fpuGet0()>
c00147f1:	eb 09                	jmp    c00147fc <Vm::x87Handler(regs*)+0x6e>
c00147f3:	90                   	nop
c00147f4:	e8 db fc ff ff       	call   c00144d4 <Vm::fpuGet1()>
c00147f9:	8d 76 00             	lea    esi,[esi+0x0]
c00147fc:	57                   	push   edi
c00147fd:	57                   	push   edi
c00147fe:	66 90                	xchg   ax,ax
c0014800:	52                   	push   edx
c0014801:	50                   	push   eax
c0014802:	e8 d6 fe ff ff       	call   c00146dd <Vm::fpuPush(unsigned long long)>
c0014807:	90                   	nop
c0014808:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001480c:	83 c4 10             	add    esp,0x10
c001480f:	90                   	nop
c0014810:	b0 01                	mov    al,0x1
c0014812:	e9 89 0a 00 00       	jmp    c00152a0 <Vm::x87Handler(regs*)+0xb12>
c0014817:	90                   	nop
c0014818:	83 ec 0c             	sub    esp,0xc
c001481b:	6a 00                	push   0x0
c001481d:	e8 2c fe ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014822:	59                   	pop    ecx
c0014823:	5e                   	pop    esi
c0014824:	52                   	push   edx
c0014825:	50                   	push   eax
c0014826:	e8 b3 fd ff ff       	call   c00145de <Vm::fpuChs(unsigned long long)>
c001482b:	eb 17                	jmp    c0014844 <Vm::x87Handler(regs*)+0xb6>
c001482d:	8d 76 00             	lea    esi,[esi+0x0]
c0014830:	83 ec 0c             	sub    esp,0xc
c0014833:	6a 00                	push   0x0
c0014835:	e8 14 fe ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c001483a:	5f                   	pop    edi
c001483b:	5d                   	pop    ebp
c001483c:	52                   	push   edx
c001483d:	50                   	push   eax
c001483e:	e8 92 fd ff ff       	call   c00145d5 <Vm::fpuAbs(unsigned long long)>
c0014843:	90                   	nop
c0014844:	83 c4 0c             	add    esp,0xc
c0014847:	90                   	nop
c0014848:	52                   	push   edx
c0014849:	50                   	push   eax
c001484a:	66 90                	xchg   ax,ax
c001484c:	6a 00                	push   0x0
c001484e:	66 90                	xchg   ax,ax
c0014850:	e8 3c fe ff ff       	call   c0014691 <Vm::fpuSetReg(int, unsigned long long)>
c0014855:	eb b1                	jmp    c0014808 <Vm::x87Handler(regs*)+0x7a>
c0014857:	90                   	nop
c0014858:	e8 b7 fc ff ff       	call   c0014514 <Vm::fpuGetLog210()>
c001485d:	eb 9d                	jmp    c00147fc <Vm::x87Handler(regs*)+0x6e>
c001485f:	90                   	nop
c0014860:	e8 7f fc ff ff       	call   c00144e4 <Vm::fpuGetLog2E()>
c0014865:	eb 95                	jmp    c00147fc <Vm::x87Handler(regs*)+0x6e>
c0014867:	90                   	nop
c0014868:	e8 6f fc ff ff       	call   c00144dc <Vm::fpuGetPi()>
c001486d:	eb 8d                	jmp    c00147fc <Vm::x87Handler(regs*)+0x6e>
c001486f:	90                   	nop
c0014870:	e8 b7 fc ff ff       	call   c001452c <Vm::fpuGetLog102()>
c0014875:	eb 85                	jmp    c00147fc <Vm::x87Handler(regs*)+0x6e>
c0014877:	90                   	nop
c0014878:	e8 7f fc ff ff       	call   c00144fc <Vm::fpuGetLogE2()>
c001487d:	e9 7a ff ff ff       	jmp    c00147fc <Vm::x87Handler(regs*)+0x6e>
c0014882:	66 90                	xchg   ax,ax
c0014884:	8d 50 40             	lea    edx,[eax+0x40]
c0014887:	80 fa 07             	cmp    dl,0x7
c001488a:	77 18                	ja     c00148a4 <Vm::x87Handler(regs*)+0x116>
c001488c:	83 ec 0c             	sub    esp,0xc
c001488f:	2d c0 00 00 00       	sub    eax,0xc0
c0014894:	50                   	push   eax
c0014895:	e8 b4 fd ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c001489a:	59                   	pop    ecx
c001489b:	5e                   	pop    esi
c001489c:	e9 5f ff ff ff       	jmp    c0014800 <Vm::x87Handler(regs*)+0x72>
c00148a1:	8d 76 00             	lea    esi,[esi+0x0]
c00148a4:	8d 50 38             	lea    edx,[eax+0x38]
c00148a7:	80 fa 07             	cmp    dl,0x7
c00148aa:	77 3c                	ja     c00148e8 <Vm::x87Handler(regs*)+0x15a>
c00148ac:	83 ec 0c             	sub    esp,0xc
c00148af:	2d c8 00 00 00       	sub    eax,0xc8
c00148b4:	50                   	push   eax
c00148b5:	e8 94 fd ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c00148ba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00148c1:	89 c6                	mov    esi,eax
c00148c3:	89 d7                	mov    edi,edx
c00148c5:	e8 84 fd ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c00148ca:	83 c4 0c             	add    esp,0xc
c00148cd:	52                   	push   edx
c00148ce:	50                   	push   eax
c00148cf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00148d3:	2d c8 00 00 00       	sub    eax,0xc8
c00148d8:	50                   	push   eax
c00148d9:	e8 b3 fd ff ff       	call   c0014691 <Vm::fpuSetReg(int, unsigned long long)>
c00148de:	83 c4 0c             	add    esp,0xc
c00148e1:	57                   	push   edi
c00148e2:	56                   	push   esi
c00148e3:	e9 64 ff ff ff       	jmp    c001484c <Vm::x87Handler(regs*)+0xbe>
c00148e8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00148ec:	84 d2                	test   dl,dl
c00148ee:	75 10                	jne    c0014900 <Vm::x87Handler(regs*)+0x172>
c00148f0:	83 ec 0c             	sub    esp,0xc
c00148f3:	ff 36                	push   DWORD PTR [esi]
c00148f5:	e8 8d fa ff ff       	call   c0014387 <Vm::fpu32ToInternal(unsigned int)>
c00148fa:	e9 c9 00 00 00       	jmp    c00149c8 <Vm::x87Handler(regs*)+0x23a>
c00148ff:	90                   	nop
c0014900:	80 fa 03             	cmp    dl,0x3
c0014903:	75 13                	jne    c0014918 <Vm::x87Handler(regs*)+0x18a>
c0014905:	e8 31 fe ff ff       	call   c001473b <Vm::fpuPop()>
c001490a:	55                   	push   ebp
c001490b:	55                   	push   ebp
c001490c:	52                   	push   edx
c001490d:	50                   	push   eax
c001490e:	e8 0d fa ff ff       	call   c0014320 <Vm::fpuInternalTo32(unsigned long long)>
c0014913:	e9 90 00 00 00       	jmp    c00149a8 <Vm::x87Handler(regs*)+0x21a>
c0014918:	80 fa 05             	cmp    dl,0x5
c001491b:	75 0f                	jne    c001492c <Vm::x87Handler(regs*)+0x19e>
c001491d:	66 8b 06             	mov    ax,WORD PTR [esi]
c0014920:	66 a3 22 3d 02 c0    	mov    ds:0xc0023d22,ax
c0014926:	e9 ed 00 00 00       	jmp    c0014a18 <Vm::x87Handler(regs*)+0x28a>
c001492b:	90                   	nop
c001492c:	31 c0                	xor    eax,eax
c001492e:	80 fa 07             	cmp    dl,0x7
c0014931:	0f 85 69 09 00 00    	jne    c00152a0 <Vm::x87Handler(regs*)+0xb12>
c0014937:	66 a1 22 3d 02 c0    	mov    ax,ds:0xc0023d22
c001493d:	66 89 06             	mov    WORD PTR [esi],ax
c0014940:	e9 d3 00 00 00       	jmp    c0014a18 <Vm::x87Handler(regs*)+0x28a>
c0014945:	8d 76 00             	lea    esi,[esi+0x0]
c0014948:	80 fa d8             	cmp    dl,0xd8
c001494b:	0f 84 d3 00 00 00    	je     c0014a24 <Vm::x87Handler(regs*)+0x296>
c0014951:	80 fa dc             	cmp    dl,0xdc
c0014954:	0f 84 2a 02 00 00    	je     c0014b84 <Vm::x87Handler(regs*)+0x3f6>
c001495a:	80 fa de             	cmp    dl,0xde
c001495d:	0f 84 f1 02 00 00    	je     c0014c54 <Vm::x87Handler(regs*)+0x4c6>
c0014963:	80 fa dd             	cmp    dl,0xdd
c0014966:	0f 84 94 04 00 00    	je     c0014e00 <Vm::x87Handler(regs*)+0x672>
c001496c:	80 fa da             	cmp    dl,0xda
c001496f:	0f 84 5f 05 00 00    	je     c0014ed4 <Vm::x87Handler(regs*)+0x746>
c0014975:	80 fa df             	cmp    dl,0xdf
c0014978:	0f 84 aa 05 00 00    	je     c0014f28 <Vm::x87Handler(regs*)+0x79a>
c001497e:	31 c0                	xor    eax,eax
c0014980:	80 fa db             	cmp    dl,0xdb
c0014983:	0f 85 17 09 00 00    	jne    c00152a0 <Vm::x87Handler(regs*)+0xb12>
c0014989:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001498d:	80 fa 03             	cmp    dl,0x3
c0014990:	0f 85 c2 06 00 00    	jne    c0015058 <Vm::x87Handler(regs*)+0x8ca>
c0014996:	e8 a0 fd ff ff       	call   c001473b <Vm::fpuPop()>
c001499b:	55                   	push   ebp
c001499c:	55                   	push   ebp
c001499d:	8d 76 00             	lea    esi,[esi+0x0]
c00149a0:	52                   	push   edx
c00149a1:	50                   	push   eax
c00149a2:	e8 2e fa ff ff       	call   c00143d5 <Vm::fpuFloatToLong(unsigned long long)>
c00149a7:	90                   	nop
c00149a8:	83 c4 10             	add    esp,0x10
c00149ab:	89 06                	mov    DWORD PTR [esi],eax
c00149ad:	eb 69                	jmp    c0014a18 <Vm::x87Handler(regs*)+0x28a>
c00149af:	90                   	nop
c00149b0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00149b4:	84 d2                	test   dl,dl
c00149b6:	0f 85 2c 06 00 00    	jne    c0014fe8 <Vm::x87Handler(regs*)+0x85a>
c00149bc:	57                   	push   edi
c00149bd:	57                   	push   edi
c00149be:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00149c1:	ff 36                	push   DWORD PTR [esi]
c00149c3:	e8 04 fa ff ff       	call   c00143cc <Vm::fpu64ToInternal(unsigned long long)>
c00149c8:	5e                   	pop    esi
c00149c9:	5f                   	pop    edi
c00149ca:	52                   	push   edx
c00149cb:	50                   	push   eax
c00149cc:	e8 0c fd ff ff       	call   c00146dd <Vm::fpuPush(unsigned long long)>
c00149d1:	8d 76 00             	lea    esi,[esi+0x0]
c00149d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149d8:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00149db:	e9 2c fe ff ff       	jmp    c001480c <Vm::x87Handler(regs*)+0x7e>
c00149e0:	80 fa 03             	cmp    dl,0x3
c00149e3:	0f 85 2b 07 00 00    	jne    c0015114 <Vm::x87Handler(regs*)+0x986>
c00149e9:	57                   	push   edi
c00149ea:	57                   	push   edi
c00149eb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00149ee:	ff 36                	push   DWORD PTR [esi]
c00149f0:	e8 d7 f9 ff ff       	call   c00143cc <Vm::fpu64ToInternal(unsigned long long)>
c00149f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00149fc:	89 c6                	mov    esi,eax
c00149fe:	89 d7                	mov    edi,edx
c0014a00:	e8 49 fc ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014a05:	57                   	push   edi
c0014a06:	56                   	push   esi
c0014a07:	52                   	push   edx
c0014a08:	50                   	push   eax
c0014a09:	e8 60 fb ff ff       	call   c001456e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0014a0e:	83 c4 20             	add    esp,0x20
c0014a11:	e8 25 fd ff ff       	call   c001473b <Vm::fpuPop()>
c0014a16:	66 90                	xchg   ax,ax
c0014a18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a1c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0014a1f:	e9 ec fd ff ff       	jmp    c0014810 <Vm::x87Handler(regs*)+0x82>
c0014a24:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014a28:	8d 50 40             	lea    edx,[eax+0x40]
c0014a2b:	80 fa 07             	cmp    dl,0x7
c0014a2e:	77 2c                	ja     c0014a5c <Vm::x87Handler(regs*)+0x2ce>
c0014a30:	83 ec 0c             	sub    esp,0xc
c0014a33:	2d c0 00 00 00       	sub    eax,0xc0
c0014a38:	50                   	push   eax
c0014a39:	e8 10 fc ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014a3e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014a45:	89 c6                	mov    esi,eax
c0014a47:	89 d7                	mov    edi,edx
c0014a49:	e8 00 fc ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014a4e:	57                   	push   edi
c0014a4f:	56                   	push   esi
c0014a50:	52                   	push   edx
c0014a51:	50                   	push   eax
c0014a52:	e8 6d fb ff ff       	call   c00145c4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0014a57:	eb 33                	jmp    c0014a8c <Vm::x87Handler(regs*)+0x2fe>
c0014a59:	8d 76 00             	lea    esi,[esi+0x0]
c0014a5c:	8d 50 38             	lea    edx,[eax+0x38]
c0014a5f:	80 fa 07             	cmp    dl,0x7
c0014a62:	77 30                	ja     c0014a94 <Vm::x87Handler(regs*)+0x306>
c0014a64:	83 ec 0c             	sub    esp,0xc
c0014a67:	2d c8 00 00 00       	sub    eax,0xc8
c0014a6c:	50                   	push   eax
c0014a6d:	e8 dc fb ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014a72:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014a79:	89 c6                	mov    esi,eax
c0014a7b:	89 d7                	mov    edi,edx
c0014a7d:	e8 cc fb ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014a82:	57                   	push   edi
c0014a83:	56                   	push   esi
c0014a84:	52                   	push   edx
c0014a85:	50                   	push   eax
c0014a86:	e8 72 fb ff ff       	call   c00145fd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0014a8b:	90                   	nop
c0014a8c:	83 c4 1c             	add    esp,0x1c
c0014a8f:	e9 b4 fd ff ff       	jmp    c0014848 <Vm::x87Handler(regs*)+0xba>
c0014a94:	8d 50 30             	lea    edx,[eax+0x30]
c0014a97:	80 fa 07             	cmp    dl,0x7
c0014a9a:	77 10                	ja     c0014aac <Vm::x87Handler(regs*)+0x31e>
c0014a9c:	83 ec 0c             	sub    esp,0xc
c0014a9f:	2d d0 00 00 00       	sub    eax,0xd0
c0014aa4:	e9 c3 03 00 00       	jmp    c0014e6c <Vm::x87Handler(regs*)+0x6de>
c0014aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0014aac:	8d 50 28             	lea    edx,[eax+0x28]
c0014aaf:	80 fa 07             	cmp    dl,0x7
c0014ab2:	77 10                	ja     c0014ac4 <Vm::x87Handler(regs*)+0x336>
c0014ab4:	83 ec 0c             	sub    esp,0xc
c0014ab7:	2d d8 00 00 00       	sub    eax,0xd8
c0014abc:	e9 e7 03 00 00       	jmp    c0014ea8 <Vm::x87Handler(regs*)+0x71a>
c0014ac1:	8d 76 00             	lea    esi,[esi+0x0]
c0014ac4:	8d 50 20             	lea    edx,[eax+0x20]
c0014ac7:	80 fa 07             	cmp    dl,0x7
c0014aca:	77 1c                	ja     c0014ae8 <Vm::x87Handler(regs*)+0x35a>
c0014acc:	83 ec 0c             	sub    esp,0xc
c0014acf:	2d e0 00 00 00       	sub    eax,0xe0
c0014ad4:	50                   	push   eax
c0014ad5:	e8 74 fb ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014ada:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014ae1:	89 c6                	mov    esi,eax
c0014ae3:	89 d7                	mov    edi,edx
c0014ae5:	eb 25                	jmp    c0014b0c <Vm::x87Handler(regs*)+0x37e>
c0014ae7:	90                   	nop
c0014ae8:	8d 50 18             	lea    edx,[eax+0x18]
c0014aeb:	80 fa 07             	cmp    dl,0x7
c0014aee:	77 30                	ja     c0014b20 <Vm::x87Handler(regs*)+0x392>
c0014af0:	83 ec 0c             	sub    esp,0xc
c0014af3:	6a 00                	push   0x0
c0014af5:	e8 54 fb ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014afa:	89 c6                	mov    esi,eax
c0014afc:	89 d7                	mov    edi,edx
c0014afe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014b02:	2d e8 00 00 00       	sub    eax,0xe8
c0014b07:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b0a:	66 90                	xchg   ax,ax
c0014b0c:	e8 3d fb ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014b11:	57                   	push   edi
c0014b12:	56                   	push   esi
c0014b13:	52                   	push   edx
c0014b14:	50                   	push   eax
c0014b15:	e8 d4 fa ff ff       	call   c00145ee <Vm::fpuSub(unsigned long long, unsigned long long)>
c0014b1a:	e9 6d ff ff ff       	jmp    c0014a8c <Vm::x87Handler(regs*)+0x2fe>
c0014b1f:	90                   	nop
c0014b20:	8d 50 10             	lea    edx,[eax+0x10]
c0014b23:	80 fa 07             	cmp    dl,0x7
c0014b26:	77 1c                	ja     c0014b44 <Vm::x87Handler(regs*)+0x3b6>
c0014b28:	83 ec 0c             	sub    esp,0xc
c0014b2b:	2d f0 00 00 00       	sub    eax,0xf0
c0014b30:	50                   	push   eax
c0014b31:	e8 18 fb ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014b36:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014b3d:	89 c6                	mov    esi,eax
c0014b3f:	89 d7                	mov    edi,edx
c0014b41:	eb 25                	jmp    c0014b68 <Vm::x87Handler(regs*)+0x3da>
c0014b43:	90                   	nop
c0014b44:	3c f7                	cmp    al,0xf7
c0014b46:	0f 86 00 04 00 00    	jbe    c0014f4c <Vm::x87Handler(regs*)+0x7be>
c0014b4c:	83 ec 0c             	sub    esp,0xc
c0014b4f:	6a 00                	push   0x0
c0014b51:	e8 f8 fa ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014b56:	89 c6                	mov    esi,eax
c0014b58:	89 d7                	mov    edi,edx
c0014b5a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014b5e:	2d f8 00 00 00       	sub    eax,0xf8
c0014b63:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b66:	66 90                	xchg   ax,ax
c0014b68:	e8 e1 fa ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014b6d:	57                   	push   edi
c0014b6e:	56                   	push   esi
c0014b6f:	52                   	push   edx
c0014b70:	50                   	push   eax
c0014b71:	e8 a6 fa ff ff       	call   c001461c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0014b76:	83 c4 1c             	add    esp,0x1c
c0014b79:	52                   	push   edx
c0014b7a:	50                   	push   eax
c0014b7b:	6a 00                	push   0x0
c0014b7d:	e9 6a 02 00 00       	jmp    c0014dec <Vm::x87Handler(regs*)+0x65e>
c0014b82:	66 90                	xchg   ax,ax
c0014b84:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014b88:	8d 50 40             	lea    edx,[eax+0x40]
c0014b8b:	80 fa 07             	cmp    dl,0x7
c0014b8e:	77 38                	ja     c0014bc8 <Vm::x87Handler(regs*)+0x43a>
c0014b90:	83 ec 0c             	sub    esp,0xc
c0014b93:	2d c0 00 00 00       	sub    eax,0xc0
c0014b98:	50                   	push   eax
c0014b99:	e8 b0 fa ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014b9e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014ba5:	89 c6                	mov    esi,eax
c0014ba7:	89 d7                	mov    edi,edx
c0014ba9:	e8 a0 fa ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014bae:	57                   	push   edi
c0014baf:	56                   	push   esi
c0014bb0:	52                   	push   edx
c0014bb1:	50                   	push   eax
c0014bb2:	e8 0d fa ff ff       	call   c00145c4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0014bb7:	83 c4 1c             	add    esp,0x1c
c0014bba:	52                   	push   edx
c0014bbb:	50                   	push   eax
c0014bbc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014bc0:	2d c0 00 00 00       	sub    eax,0xc0
c0014bc5:	eb 41                	jmp    c0014c08 <Vm::x87Handler(regs*)+0x47a>
c0014bc7:	90                   	nop
c0014bc8:	8d 50 38             	lea    edx,[eax+0x38]
c0014bcb:	80 fa 07             	cmp    dl,0x7
c0014bce:	77 40                	ja     c0014c10 <Vm::x87Handler(regs*)+0x482>
c0014bd0:	83 ec 0c             	sub    esp,0xc
c0014bd3:	2d c8 00 00 00       	sub    eax,0xc8
c0014bd8:	50                   	push   eax
c0014bd9:	e8 70 fa ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014bde:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014be5:	89 c6                	mov    esi,eax
c0014be7:	89 d7                	mov    edi,edx
c0014be9:	e8 60 fa ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014bee:	57                   	push   edi
c0014bef:	56                   	push   esi
c0014bf0:	52                   	push   edx
c0014bf1:	50                   	push   eax
c0014bf2:	e8 06 fa ff ff       	call   c00145fd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0014bf7:	83 c4 1c             	add    esp,0x1c
c0014bfa:	52                   	push   edx
c0014bfb:	50                   	push   eax
c0014bfc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014c00:	2d c8 00 00 00       	sub    eax,0xc8
c0014c05:	8d 76 00             	lea    esi,[esi+0x0]
c0014c08:	50                   	push   eax
c0014c09:	e9 42 fc ff ff       	jmp    c0014850 <Vm::x87Handler(regs*)+0xc2>
c0014c0e:	66 90                	xchg   ax,ax
c0014c10:	83 c0 18             	add    eax,0x18
c0014c13:	3c 07                	cmp    al,0x7
c0014c15:	0f 87 6d 04 00 00    	ja     c0015088 <Vm::x87Handler(regs*)+0x8fa>
c0014c1b:	83 ec 0c             	sub    esp,0xc
c0014c1e:	6a 00                	push   0x0
c0014c20:	e8 29 fa ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014c25:	89 c6                	mov    esi,eax
c0014c27:	89 d7                	mov    edi,edx
c0014c29:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014c2d:	2d e8 00 00 00       	sub    eax,0xe8
c0014c32:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c35:	e8 14 fa ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014c3a:	57                   	push   edi
c0014c3b:	56                   	push   esi
c0014c3c:	52                   	push   edx
c0014c3d:	50                   	push   eax
c0014c3e:	e8 ab f9 ff ff       	call   c00145ee <Vm::fpuSub(unsigned long long, unsigned long long)>
c0014c43:	83 c4 1c             	add    esp,0x1c
c0014c46:	52                   	push   edx
c0014c47:	50                   	push   eax
c0014c48:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014c4c:	2d e8 00 00 00       	sub    eax,0xe8
c0014c51:	eb b5                	jmp    c0014c08 <Vm::x87Handler(regs*)+0x47a>
c0014c53:	90                   	nop
c0014c54:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014c58:	8d 50 40             	lea    edx,[eax+0x40]
c0014c5b:	80 fa 07             	cmp    dl,0x7
c0014c5e:	77 3c                	ja     c0014c9c <Vm::x87Handler(regs*)+0x50e>
c0014c60:	83 ec 0c             	sub    esp,0xc
c0014c63:	2d c0 00 00 00       	sub    eax,0xc0
c0014c68:	50                   	push   eax
c0014c69:	e8 e0 f9 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014c6e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014c75:	89 c6                	mov    esi,eax
c0014c77:	89 d7                	mov    edi,edx
c0014c79:	e8 d0 f9 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014c7e:	57                   	push   edi
c0014c7f:	56                   	push   esi
c0014c80:	52                   	push   edx
c0014c81:	50                   	push   eax
c0014c82:	e8 3d f9 ff ff       	call   c00145c4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0014c87:	83 c4 1c             	add    esp,0x1c
c0014c8a:	52                   	push   edx
c0014c8b:	50                   	push   eax
c0014c8c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014c90:	2d c0 00 00 00       	sub    eax,0xc0
c0014c95:	e9 b2 01 00 00       	jmp    c0014e4c <Vm::x87Handler(regs*)+0x6be>
c0014c9a:	66 90                	xchg   ax,ax
c0014c9c:	8d 50 20             	lea    edx,[eax+0x20]
c0014c9f:	80 fa 07             	cmp    dl,0x7
c0014ca2:	77 3c                	ja     c0014ce0 <Vm::x87Handler(regs*)+0x552>
c0014ca4:	83 ec 0c             	sub    esp,0xc
c0014ca7:	2d e0 00 00 00       	sub    eax,0xe0
c0014cac:	50                   	push   eax
c0014cad:	e8 9c f9 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014cb2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014cb9:	89 c6                	mov    esi,eax
c0014cbb:	89 d7                	mov    edi,edx
c0014cbd:	e8 8c f9 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014cc2:	57                   	push   edi
c0014cc3:	56                   	push   esi
c0014cc4:	52                   	push   edx
c0014cc5:	50                   	push   eax
c0014cc6:	e8 23 f9 ff ff       	call   c00145ee <Vm::fpuSub(unsigned long long, unsigned long long)>
c0014ccb:	83 c4 1c             	add    esp,0x1c
c0014cce:	52                   	push   edx
c0014ccf:	50                   	push   eax
c0014cd0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014cd4:	2d e0 00 00 00       	sub    eax,0xe0
c0014cd9:	e9 6e 01 00 00       	jmp    c0014e4c <Vm::x87Handler(regs*)+0x6be>
c0014cde:	66 90                	xchg   ax,ax
c0014ce0:	8d 50 18             	lea    edx,[eax+0x18]
c0014ce3:	80 fa 07             	cmp    dl,0x7
c0014ce6:	77 3c                	ja     c0014d24 <Vm::x87Handler(regs*)+0x596>
c0014ce8:	83 ec 0c             	sub    esp,0xc
c0014ceb:	6a 00                	push   0x0
c0014ced:	e8 5c f9 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014cf2:	89 c6                	mov    esi,eax
c0014cf4:	89 d7                	mov    edi,edx
c0014cf6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014cfa:	2d e8 00 00 00       	sub    eax,0xe8
c0014cff:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d02:	e8 47 f9 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014d07:	57                   	push   edi
c0014d08:	56                   	push   esi
c0014d09:	52                   	push   edx
c0014d0a:	50                   	push   eax
c0014d0b:	e8 de f8 ff ff       	call   c00145ee <Vm::fpuSub(unsigned long long, unsigned long long)>
c0014d10:	83 c4 1c             	add    esp,0x1c
c0014d13:	52                   	push   edx
c0014d14:	50                   	push   eax
c0014d15:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014d19:	2d e8 00 00 00       	sub    eax,0xe8
c0014d1e:	e9 29 01 00 00       	jmp    c0014e4c <Vm::x87Handler(regs*)+0x6be>
c0014d23:	90                   	nop
c0014d24:	8d 50 38             	lea    edx,[eax+0x38]
c0014d27:	80 fa 07             	cmp    dl,0x7
c0014d2a:	77 3c                	ja     c0014d68 <Vm::x87Handler(regs*)+0x5da>
c0014d2c:	83 ec 0c             	sub    esp,0xc
c0014d2f:	2d c8 00 00 00       	sub    eax,0xc8
c0014d34:	50                   	push   eax
c0014d35:	e8 14 f9 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014d3a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014d41:	89 c6                	mov    esi,eax
c0014d43:	89 d7                	mov    edi,edx
c0014d45:	e8 04 f9 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014d4a:	57                   	push   edi
c0014d4b:	56                   	push   esi
c0014d4c:	52                   	push   edx
c0014d4d:	50                   	push   eax
c0014d4e:	e8 aa f8 ff ff       	call   c00145fd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0014d53:	83 c4 1c             	add    esp,0x1c
c0014d56:	52                   	push   edx
c0014d57:	50                   	push   eax
c0014d58:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014d5c:	2d c8 00 00 00       	sub    eax,0xc8
c0014d61:	e9 82 00 00 00       	jmp    c0014de8 <Vm::x87Handler(regs*)+0x65a>
c0014d66:	66 90                	xchg   ax,ax
c0014d68:	3c f7                	cmp    al,0xf7
c0014d6a:	76 38                	jbe    c0014da4 <Vm::x87Handler(regs*)+0x616>
c0014d6c:	83 ec 0c             	sub    esp,0xc
c0014d6f:	6a 00                	push   0x0
c0014d71:	e8 d8 f8 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014d76:	89 c6                	mov    esi,eax
c0014d78:	89 d7                	mov    edi,edx
c0014d7a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014d7e:	2d f8 00 00 00       	sub    eax,0xf8
c0014d83:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d86:	e8 c3 f8 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014d8b:	57                   	push   edi
c0014d8c:	56                   	push   esi
c0014d8d:	52                   	push   edx
c0014d8e:	50                   	push   eax
c0014d8f:	e8 88 f8 ff ff       	call   c001461c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0014d94:	83 c4 1c             	add    esp,0x1c
c0014d97:	52                   	push   edx
c0014d98:	50                   	push   eax
c0014d99:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014d9d:	2d f8 00 00 00       	sub    eax,0xf8
c0014da2:	eb 44                	jmp    c0014de8 <Vm::x87Handler(regs*)+0x65a>
c0014da4:	8d 50 10             	lea    edx,[eax+0x10]
c0014da7:	80 fa 07             	cmp    dl,0x7
c0014daa:	0f 87 6c 01 00 00    	ja     c0014f1c <Vm::x87Handler(regs*)+0x78e>
c0014db0:	83 ec 0c             	sub    esp,0xc
c0014db3:	2d f0 00 00 00       	sub    eax,0xf0
c0014db8:	50                   	push   eax
c0014db9:	e8 90 f8 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014dbe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014dc5:	89 c6                	mov    esi,eax
c0014dc7:	89 d7                	mov    edi,edx
c0014dc9:	e8 80 f8 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014dce:	57                   	push   edi
c0014dcf:	56                   	push   esi
c0014dd0:	52                   	push   edx
c0014dd1:	50                   	push   eax
c0014dd2:	e8 45 f8 ff ff       	call   c001461c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0014dd7:	83 c4 1c             	add    esp,0x1c
c0014dda:	52                   	push   edx
c0014ddb:	50                   	push   eax
c0014ddc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014de0:	2d f0 00 00 00       	sub    eax,0xf0
c0014de5:	8d 76 00             	lea    esi,[esi+0x0]
c0014de8:	50                   	push   eax
c0014de9:	8d 76 00             	lea    esi,[esi+0x0]
c0014dec:	e8 a0 f8 ff ff       	call   c0014691 <Vm::fpuSetReg(int, unsigned long long)>
c0014df1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014df5:	e8 41 f9 ff ff       	call   c001473b <Vm::fpuPop()>
c0014dfa:	e9 0d fa ff ff       	jmp    c001480c <Vm::x87Handler(regs*)+0x7e>
c0014dff:	90                   	nop
c0014e00:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014e04:	8d 50 30             	lea    edx,[eax+0x30]
c0014e07:	80 fa 07             	cmp    dl,0x7
c0014e0a:	77 20                	ja     c0014e2c <Vm::x87Handler(regs*)+0x69e>
c0014e0c:	83 ec 0c             	sub    esp,0xc
c0014e0f:	6a 00                	push   0x0
c0014e11:	e8 38 f8 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014e16:	83 c4 0c             	add    esp,0xc
c0014e19:	52                   	push   edx
c0014e1a:	50                   	push   eax
c0014e1b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014e1f:	2d d0 00 00 00       	sub    eax,0xd0
c0014e24:	e9 df fd ff ff       	jmp    c0014c08 <Vm::x87Handler(regs*)+0x47a>
c0014e29:	8d 76 00             	lea    esi,[esi+0x0]
c0014e2c:	8d 50 28             	lea    edx,[eax+0x28]
c0014e2f:	80 fa 07             	cmp    dl,0x7
c0014e32:	77 28                	ja     c0014e5c <Vm::x87Handler(regs*)+0x6ce>
c0014e34:	83 ec 0c             	sub    esp,0xc
c0014e37:	6a 00                	push   0x0
c0014e39:	e8 10 f8 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014e3e:	83 c4 0c             	add    esp,0xc
c0014e41:	52                   	push   edx
c0014e42:	50                   	push   eax
c0014e43:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0014e47:	2d d8 00 00 00       	sub    eax,0xd8
c0014e4c:	50                   	push   eax
c0014e4d:	e8 3f f8 ff ff       	call   c0014691 <Vm::fpuSetReg(int, unsigned long long)>
c0014e52:	e8 e4 f8 ff ff       	call   c001473b <Vm::fpuPop()>
c0014e57:	e9 ac f9 ff ff       	jmp    c0014808 <Vm::x87Handler(regs*)+0x7a>
c0014e5c:	8d 50 20             	lea    edx,[eax+0x20]
c0014e5f:	80 fa 07             	cmp    dl,0x7
c0014e62:	77 30                	ja     c0014e94 <Vm::x87Handler(regs*)+0x706>
c0014e64:	83 ec 0c             	sub    esp,0xc
c0014e67:	2d e0 00 00 00       	sub    eax,0xe0
c0014e6c:	50                   	push   eax
c0014e6d:	e8 dc f7 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014e72:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014e79:	89 c6                	mov    esi,eax
c0014e7b:	89 d7                	mov    edi,edx
c0014e7d:	e8 cc f7 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014e82:	57                   	push   edi
c0014e83:	56                   	push   esi
c0014e84:	52                   	push   edx
c0014e85:	50                   	push   eax
c0014e86:	e8 e3 f6 ff ff       	call   c001456e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0014e8b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014e8f:	e9 78 02 00 00       	jmp    c001510c <Vm::x87Handler(regs*)+0x97e>
c0014e94:	8d 50 18             	lea    edx,[eax+0x18]
c0014e97:	80 fa 07             	cmp    dl,0x7
c0014e9a:	0f 87 10 fb ff ff    	ja     c00149b0 <Vm::x87Handler(regs*)+0x222>
c0014ea0:	83 ec 0c             	sub    esp,0xc
c0014ea3:	2d e8 00 00 00       	sub    eax,0xe8
c0014ea8:	50                   	push   eax
c0014ea9:	e8 a0 f7 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014eae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014eb5:	89 c6                	mov    esi,eax
c0014eb7:	89 d7                	mov    edi,edx
c0014eb9:	e8 90 f7 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014ebe:	57                   	push   edi
c0014ebf:	56                   	push   esi
c0014ec0:	52                   	push   edx
c0014ec1:	50                   	push   eax
c0014ec2:	e8 a7 f6 ff ff       	call   c001456e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0014ec7:	83 c4 20             	add    esp,0x20
c0014eca:	e8 6c f8 ff ff       	call   c001473b <Vm::fpuPop()>
c0014ecf:	eb 6f                	jmp    c0014f40 <Vm::x87Handler(regs*)+0x7b2>
c0014ed1:	8d 76 00             	lea    esi,[esi+0x0]
c0014ed4:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0014ed8:	0f 85 22 01 00 00    	jne    c0015000 <Vm::x87Handler(regs*)+0x872>
c0014ede:	66 90                	xchg   ax,ax
c0014ee0:	83 ec 0c             	sub    esp,0xc
c0014ee3:	6a 01                	push   0x1
c0014ee5:	e8 64 f7 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014eea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014ef1:	89 c6                	mov    esi,eax
c0014ef3:	89 d7                	mov    edi,edx
c0014ef5:	e8 54 f7 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014efa:	57                   	push   edi
c0014efb:	56                   	push   esi
c0014efc:	52                   	push   edx
c0014efd:	50                   	push   eax
c0014efe:	e8 6b f6 ff ff       	call   c001456e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0014f03:	83 c4 20             	add    esp,0x20
c0014f06:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014f0a:	e8 2c f8 ff ff       	call   c001473b <Vm::fpuPop()>
c0014f0f:	e8 27 f8 ff ff       	call   c001473b <Vm::fpuPop()>
c0014f14:	e9 f7 f8 ff ff       	jmp    c0014810 <Vm::x87Handler(regs*)+0x82>
c0014f19:	8d 76 00             	lea    esi,[esi+0x0]
c0014f1c:	3c d9                	cmp    al,0xd9
c0014f1e:	0f 85 e8 02 00 00    	jne    c001520c <Vm::x87Handler(regs*)+0xa7e>
c0014f24:	eb ba                	jmp    c0014ee0 <Vm::x87Handler(regs*)+0x752>
c0014f26:	66 90                	xchg   ax,ax
c0014f28:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0014f2c:	0f 85 2a 03 00 00    	jne    c001525c <Vm::x87Handler(regs*)+0xace>
c0014f32:	0f b7 05 20 3d 02 c0 	movzx  eax,WORD PTR ds:0xc0023d20
c0014f39:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0014f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0014f40:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014f44:	e9 c7 f8 ff ff       	jmp    c0014810 <Vm::x87Handler(regs*)+0x82>
c0014f49:	8d 76 00             	lea    esi,[esi+0x0]
c0014f4c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0014f50:	84 d2                	test   dl,dl
c0014f52:	75 10                	jne    c0014f64 <Vm::x87Handler(regs*)+0x7d6>
c0014f54:	83 ec 0c             	sub    esp,0xc
c0014f57:	ff 36                	push   DWORD PTR [esi]
c0014f59:	e8 29 f4 ff ff       	call   c0014387 <Vm::fpu32ToInternal(unsigned int)>
c0014f5e:	e9 39 01 00 00       	jmp    c001509c <Vm::x87Handler(regs*)+0x90e>
c0014f63:	90                   	nop
c0014f64:	80 fa 01             	cmp    dl,0x1
c0014f67:	75 0f                	jne    c0014f78 <Vm::x87Handler(regs*)+0x7ea>
c0014f69:	83 ec 0c             	sub    esp,0xc
c0014f6c:	ff 36                	push   DWORD PTR [esi]
c0014f6e:	e8 14 f4 ff ff       	call   c0014387 <Vm::fpu32ToInternal(unsigned int)>
c0014f73:	e9 b4 02 00 00       	jmp    c001522c <Vm::x87Handler(regs*)+0xa9e>
c0014f78:	80 fa 04             	cmp    dl,0x4
c0014f7b:	75 0f                	jne    c0014f8c <Vm::x87Handler(regs*)+0x7fe>
c0014f7d:	83 ec 0c             	sub    esp,0xc
c0014f80:	ff 36                	push   DWORD PTR [esi]
c0014f82:	e8 00 f4 ff ff       	call   c0014387 <Vm::fpu32ToInternal(unsigned int)>
c0014f87:	e9 9c 01 00 00       	jmp    c0015128 <Vm::x87Handler(regs*)+0x99a>
c0014f8c:	80 fa 05             	cmp    dl,0x5
c0014f8f:	75 1b                	jne    c0014fac <Vm::x87Handler(regs*)+0x81e>
c0014f91:	83 ec 0c             	sub    esp,0xc
c0014f94:	6a 00                	push   0x0
c0014f96:	e8 b3 f6 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014f9b:	89 c7                	mov    edi,eax
c0014f9d:	89 d5                	mov    ebp,edx
c0014f9f:	58                   	pop    eax
c0014fa0:	ff 36                	push   DWORD PTR [esi]
c0014fa2:	e8 e0 f3 ff ff       	call   c0014387 <Vm::fpu32ToInternal(unsigned int)>
c0014fa7:	e9 bc 01 00 00       	jmp    c0015168 <Vm::x87Handler(regs*)+0x9da>
c0014fac:	80 fa 06             	cmp    dl,0x6
c0014faf:	75 0f                	jne    c0014fc0 <Vm::x87Handler(regs*)+0x832>
c0014fb1:	83 ec 0c             	sub    esp,0xc
c0014fb4:	ff 36                	push   DWORD PTR [esi]
c0014fb6:	e8 cc f3 ff ff       	call   c0014387 <Vm::fpu32ToInternal(unsigned int)>
c0014fbb:	e9 cc 01 00 00       	jmp    c001518c <Vm::x87Handler(regs*)+0x9fe>
c0014fc0:	31 c0                	xor    eax,eax
c0014fc2:	80 fa 07             	cmp    dl,0x7
c0014fc5:	0f 85 d5 02 00 00    	jne    c00152a0 <Vm::x87Handler(regs*)+0xb12>
c0014fcb:	83 ec 0c             	sub    esp,0xc
c0014fce:	6a 00                	push   0x0
c0014fd0:	e8 79 f6 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0014fd5:	89 c7                	mov    edi,eax
c0014fd7:	89 d5                	mov    ebp,edx
c0014fd9:	58                   	pop    eax
c0014fda:	ff 36                	push   DWORD PTR [esi]
c0014fdc:	e8 a6 f3 ff ff       	call   c0014387 <Vm::fpu32ToInternal(unsigned int)>
c0014fe1:	e9 ee 01 00 00       	jmp    c00151d4 <Vm::x87Handler(regs*)+0xa46>
c0014fe6:	66 90                	xchg   ax,ax
c0014fe8:	80 fa 03             	cmp    dl,0x3
c0014feb:	0f 85 f7 01 00 00    	jne    c00151e8 <Vm::x87Handler(regs*)+0xa5a>
c0014ff1:	e8 45 f7 ff ff       	call   c001473b <Vm::fpuPop()>
c0014ff6:	51                   	push   ecx
c0014ff7:	51                   	push   ecx
c0014ff8:	e9 03 02 00 00       	jmp    c0015200 <Vm::x87Handler(regs*)+0xa72>
c0014ffd:	8d 76 00             	lea    esi,[esi+0x0]
c0015000:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0015004:	80 fa 01             	cmp    dl,0x1
c0015007:	75 0b                	jne    c0015014 <Vm::x87Handler(regs*)+0x886>
c0015009:	57                   	push   edi
c001500a:	57                   	push   edi
c001500b:	8b 06                	mov    eax,DWORD PTR [esi]
c001500d:	e9 0e 02 00 00       	jmp    c0015220 <Vm::x87Handler(regs*)+0xa92>
c0015012:	66 90                	xchg   ax,ax
c0015014:	80 fa 04             	cmp    dl,0x4
c0015017:	75 13                	jne    c001502c <Vm::x87Handler(regs*)+0x89e>
c0015019:	31 d2                	xor    edx,edx
c001501b:	51                   	push   ecx
c001501c:	51                   	push   ecx
c001501d:	8b 06                	mov    eax,DWORD PTR [esi]
c001501f:	52                   	push   edx
c0015020:	50                   	push   eax
c0015021:	e8 4a f4 ff ff       	call   c0014470 <Vm::fpuLongToFloat(long long)>
c0015026:	e9 fd 00 00 00       	jmp    c0015128 <Vm::x87Handler(regs*)+0x99a>
c001502b:	90                   	nop
c001502c:	31 c0                	xor    eax,eax
c001502e:	80 fa 07             	cmp    dl,0x7
c0015031:	0f 85 69 02 00 00    	jne    c00152a0 <Vm::x87Handler(regs*)+0xb12>
c0015037:	83 ec 0c             	sub    esp,0xc
c001503a:	6a 00                	push   0x0
c001503c:	e8 0d f6 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0015041:	89 c7                	mov    edi,eax
c0015043:	89 d5                	mov    ebp,edx
c0015045:	58                   	pop    eax
c0015046:	8b 06                	mov    eax,DWORD PTR [esi]
c0015048:	5a                   	pop    edx
c0015049:	31 d2                	xor    edx,edx
c001504b:	52                   	push   edx
c001504c:	50                   	push   eax
c001504d:	e8 1e f4 ff ff       	call   c0014470 <Vm::fpuLongToFloat(long long)>
c0015052:	e9 7d 01 00 00       	jmp    c00151d4 <Vm::x87Handler(regs*)+0xa46>
c0015057:	90                   	nop
c0015058:	84 d2                	test   dl,dl
c001505a:	75 10                	jne    c001506c <Vm::x87Handler(regs*)+0x8de>
c001505c:	31 d2                	xor    edx,edx
c001505e:	55                   	push   ebp
c001505f:	55                   	push   ebp
c0015060:	8b 06                	mov    eax,DWORD PTR [esi]
c0015062:	52                   	push   edx
c0015063:	50                   	push   eax
c0015064:	e9 03 02 00 00       	jmp    c001526c <Vm::x87Handler(regs*)+0xade>
c0015069:	8d 76 00             	lea    esi,[esi+0x0]
c001506c:	31 c0                	xor    eax,eax
c001506e:	80 fa 02             	cmp    dl,0x2
c0015071:	0f 85 29 02 00 00    	jne    c00152a0 <Vm::x87Handler(regs*)+0xb12>
c0015077:	83 ec 0c             	sub    esp,0xc
c001507a:	6a 00                	push   0x0
c001507c:	e8 cd f5 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0015081:	59                   	pop    ecx
c0015082:	5f                   	pop    edi
c0015083:	e9 18 f9 ff ff       	jmp    c00149a0 <Vm::x87Handler(regs*)+0x212>
c0015088:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001508c:	84 d2                	test   dl,dl
c001508e:	75 2c                	jne    c00150bc <Vm::x87Handler(regs*)+0x92e>
c0015090:	50                   	push   eax
c0015091:	50                   	push   eax
c0015092:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0015095:	ff 36                	push   DWORD PTR [esi]
c0015097:	e8 30 f3 ff ff       	call   c00143cc <Vm::fpu64ToInternal(unsigned long long)>
c001509c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00150a3:	89 c6                	mov    esi,eax
c00150a5:	89 d7                	mov    edi,edx
c00150a7:	e8 a2 f5 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c00150ac:	57                   	push   edi
c00150ad:	56                   	push   esi
c00150ae:	52                   	push   edx
c00150af:	50                   	push   eax
c00150b0:	e8 0f f5 ff ff       	call   c00145c4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00150b5:	e9 8e 01 00 00       	jmp    c0015248 <Vm::x87Handler(regs*)+0xaba>
c00150ba:	66 90                	xchg   ax,ax
c00150bc:	80 fa 01             	cmp    dl,0x1
c00150bf:	75 13                	jne    c00150d4 <Vm::x87Handler(regs*)+0x946>
c00150c1:	50                   	push   eax
c00150c2:	50                   	push   eax
c00150c3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00150c6:	ff 36                	push   DWORD PTR [esi]
c00150c8:	e8 ff f2 ff ff       	call   c00143cc <Vm::fpu64ToInternal(unsigned long long)>
c00150cd:	e9 5a 01 00 00       	jmp    c001522c <Vm::x87Handler(regs*)+0xa9e>
c00150d2:	66 90                	xchg   ax,ax
c00150d4:	80 fa 02             	cmp    dl,0x2
c00150d7:	0f 85 03 f9 ff ff    	jne    c00149e0 <Vm::x87Handler(regs*)+0x252>
c00150dd:	55                   	push   ebp
c00150de:	55                   	push   ebp
c00150df:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00150e2:	ff 36                	push   DWORD PTR [esi]
c00150e4:	e8 e3 f2 ff ff       	call   c00143cc <Vm::fpu64ToInternal(unsigned long long)>
c00150e9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00150f0:	89 c6                	mov    esi,eax
c00150f2:	89 d7                	mov    edi,edx
c00150f4:	e8 55 f5 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c00150f9:	57                   	push   edi
c00150fa:	56                   	push   esi
c00150fb:	52                   	push   edx
c00150fc:	50                   	push   eax
c00150fd:	e8 6c f4 ff ff       	call   c001456e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0015102:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015106:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0015109:	8d 76 00             	lea    esi,[esi+0x0]
c001510c:	83 c4 20             	add    esp,0x20
c001510f:	e9 fc f6 ff ff       	jmp    c0014810 <Vm::x87Handler(regs*)+0x82>
c0015114:	80 fa 04             	cmp    dl,0x4
c0015117:	75 2f                	jne    c0015148 <Vm::x87Handler(regs*)+0x9ba>
c0015119:	51                   	push   ecx
c001511a:	51                   	push   ecx
c001511b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001511e:	ff 36                	push   DWORD PTR [esi]
c0015120:	e8 a7 f2 ff ff       	call   c00143cc <Vm::fpu64ToInternal(unsigned long long)>
c0015125:	8d 76 00             	lea    esi,[esi+0x0]
c0015128:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001512f:	89 c6                	mov    esi,eax
c0015131:	89 d7                	mov    edi,edx
c0015133:	e8 16 f5 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0015138:	57                   	push   edi
c0015139:	56                   	push   esi
c001513a:	52                   	push   edx
c001513b:	50                   	push   eax
c001513c:	e8 ad f4 ff ff       	call   c00145ee <Vm::fpuSub(unsigned long long, unsigned long long)>
c0015141:	e9 02 01 00 00       	jmp    c0015248 <Vm::x87Handler(regs*)+0xaba>
c0015146:	66 90                	xchg   ax,ax
c0015148:	80 fa 05             	cmp    dl,0x5
c001514b:	75 2b                	jne    c0015178 <Vm::x87Handler(regs*)+0x9ea>
c001514d:	83 ec 0c             	sub    esp,0xc
c0015150:	6a 00                	push   0x0
c0015152:	e8 f7 f4 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c0015157:	89 c7                	mov    edi,eax
c0015159:	89 d5                	mov    ebp,edx
c001515b:	58                   	pop    eax
c001515c:	5a                   	pop    edx
c001515d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0015160:	ff 36                	push   DWORD PTR [esi]
c0015162:	e8 65 f2 ff ff       	call   c00143cc <Vm::fpu64ToInternal(unsigned long long)>
c0015167:	90                   	nop
c0015168:	83 c4 10             	add    esp,0x10
c001516b:	55                   	push   ebp
c001516c:	57                   	push   edi
c001516d:	52                   	push   edx
c001516e:	50                   	push   eax
c001516f:	e8 7a f4 ff ff       	call   c00145ee <Vm::fpuSub(unsigned long long, unsigned long long)>
c0015174:	eb 6a                	jmp    c00151e0 <Vm::x87Handler(regs*)+0xa52>
c0015176:	66 90                	xchg   ax,ax
c0015178:	80 fa 06             	cmp    dl,0x6
c001517b:	75 2f                	jne    c00151ac <Vm::x87Handler(regs*)+0xa1e>
c001517d:	51                   	push   ecx
c001517e:	51                   	push   ecx
c001517f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0015182:	ff 36                	push   DWORD PTR [esi]
c0015184:	e8 43 f2 ff ff       	call   c00143cc <Vm::fpu64ToInternal(unsigned long long)>
c0015189:	8d 76 00             	lea    esi,[esi+0x0]
c001518c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015193:	89 c6                	mov    esi,eax
c0015195:	89 d7                	mov    edi,edx
c0015197:	e8 b2 f4 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c001519c:	57                   	push   edi
c001519d:	56                   	push   esi
c001519e:	52                   	push   edx
c001519f:	50                   	push   eax
c00151a0:	e8 77 f4 ff ff       	call   c001461c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00151a5:	e9 9e 00 00 00       	jmp    c0015248 <Vm::x87Handler(regs*)+0xaba>
c00151aa:	66 90                	xchg   ax,ax
c00151ac:	31 c0                	xor    eax,eax
c00151ae:	80 fa 07             	cmp    dl,0x7
c00151b1:	0f 85 e9 00 00 00    	jne    c00152a0 <Vm::x87Handler(regs*)+0xb12>
c00151b7:	83 ec 0c             	sub    esp,0xc
c00151ba:	6a 00                	push   0x0
c00151bc:	e8 8d f4 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c00151c1:	89 c7                	mov    edi,eax
c00151c3:	89 d5                	mov    ebp,edx
c00151c5:	58                   	pop    eax
c00151c6:	5a                   	pop    edx
c00151c7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00151ca:	ff 36                	push   DWORD PTR [esi]
c00151cc:	e8 fb f1 ff ff       	call   c00143cc <Vm::fpu64ToInternal(unsigned long long)>
c00151d1:	8d 76 00             	lea    esi,[esi+0x0]
c00151d4:	83 c4 10             	add    esp,0x10
c00151d7:	55                   	push   ebp
c00151d8:	57                   	push   edi
c00151d9:	52                   	push   edx
c00151da:	50                   	push   eax
c00151db:	e8 3c f4 ff ff       	call   c001461c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00151e0:	83 c4 0c             	add    esp,0xc
c00151e3:	eb 67                	jmp    c001524c <Vm::x87Handler(regs*)+0xabe>
c00151e5:	8d 76 00             	lea    esi,[esi+0x0]
c00151e8:	31 c0                	xor    eax,eax
c00151ea:	80 fa 02             	cmp    dl,0x2
c00151ed:	0f 85 ad 00 00 00    	jne    c00152a0 <Vm::x87Handler(regs*)+0xb12>
c00151f3:	83 ec 0c             	sub    esp,0xc
c00151f6:	6a 00                	push   0x0
c00151f8:	e8 51 f4 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c00151fd:	59                   	pop    ecx
c00151fe:	5f                   	pop    edi
c00151ff:	90                   	nop
c0015200:	52                   	push   edx
c0015201:	50                   	push   eax
c0015202:	e8 77 f1 ff ff       	call   c001437e <Vm::fpuInternalTo64(unsigned long long)>
c0015207:	e9 84 00 00 00       	jmp    c0015290 <Vm::x87Handler(regs*)+0xb02>
c001520c:	31 c0                	xor    eax,eax
c001520e:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0015213:	0f 85 87 00 00 00    	jne    c00152a0 <Vm::x87Handler(regs*)+0xb12>
c0015219:	50                   	push   eax
c001521a:	50                   	push   eax
c001521b:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001521e:	66 90                	xchg   ax,ax
c0015220:	31 d2                	xor    edx,edx
c0015222:	52                   	push   edx
c0015223:	50                   	push   eax
c0015224:	e8 47 f2 ff ff       	call   c0014470 <Vm::fpuLongToFloat(long long)>
c0015229:	8d 76 00             	lea    esi,[esi+0x0]
c001522c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015233:	89 c6                	mov    esi,eax
c0015235:	89 d7                	mov    edi,edx
c0015237:	e8 12 f4 ff ff       	call   c001464e <Vm::fpuGetReg(int)>
c001523c:	57                   	push   edi
c001523d:	56                   	push   esi
c001523e:	52                   	push   edx
c001523f:	50                   	push   eax
c0015240:	e8 b8 f3 ff ff       	call   c00145fd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0015245:	8d 76 00             	lea    esi,[esi+0x0]
c0015248:	83 c4 1c             	add    esp,0x1c
c001524b:	90                   	nop
c001524c:	52                   	push   edx
c001524d:	50                   	push   eax
c001524e:	6a 00                	push   0x0
c0015250:	e8 3c f4 ff ff       	call   c0014691 <Vm::fpuSetReg(int, unsigned long long)>
c0015255:	e9 7a f7 ff ff       	jmp    c00149d4 <Vm::x87Handler(regs*)+0x246>
c001525a:	66 90                	xchg   ax,ax
c001525c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0015260:	80 fa 05             	cmp    dl,0x5
c0015263:	75 13                	jne    c0015278 <Vm::x87Handler(regs*)+0xaea>
c0015265:	55                   	push   ebp
c0015266:	55                   	push   ebp
c0015267:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001526a:	ff 36                	push   DWORD PTR [esi]
c001526c:	e8 c3 f1 ff ff       	call   c0014434 <Vm::fpuULongToFloat(unsigned long long)>
c0015271:	e9 52 f7 ff ff       	jmp    c00149c8 <Vm::x87Handler(regs*)+0x23a>
c0015276:	66 90                	xchg   ax,ax
c0015278:	31 c0                	xor    eax,eax
c001527a:	80 fa 07             	cmp    dl,0x7
c001527d:	75 21                	jne    c00152a0 <Vm::x87Handler(regs*)+0xb12>
c001527f:	e8 b7 f4 ff ff       	call   c001473b <Vm::fpuPop()>
c0015284:	51                   	push   ecx
c0015285:	51                   	push   ecx
c0015286:	52                   	push   edx
c0015287:	50                   	push   eax
c0015288:	e8 48 f1 ff ff       	call   c00143d5 <Vm::fpuFloatToLong(unsigned long long)>
c001528d:	8d 76 00             	lea    esi,[esi+0x0]
c0015290:	83 c4 10             	add    esp,0x10
c0015293:	89 06                	mov    DWORD PTR [esi],eax
c0015295:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0015298:	e9 7b f7 ff ff       	jmp    c0014a18 <Vm::x87Handler(regs*)+0x28a>
c001529d:	8d 76 00             	lea    esi,[esi+0x0]
c00152a0:	83 c4 1c             	add    esp,0x1c
c00152a3:	5b                   	pop    ebx
c00152a4:	5e                   	pop    esi
c00152a5:	5f                   	pop    edi
c00152a6:	5d                   	pop    ebp
c00152a7:	c3                   	ret    

c00152a8 <__static_initialization_and_destruction_0(int, int)>:
c00152a8:	83 ec 0c             	sub    esp,0xc
c00152ab:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00152b0:	75 1a                	jne    c00152cc <__static_initialization_and_destruction_0(int, int)+0x24>
c00152b2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00152ba:	75 10                	jne    c00152cc <__static_initialization_and_destruction_0(int, int)+0x24>
c00152bc:	83 ec 0c             	sub    esp,0xc
c00152bf:	68 20 3d 02 c0       	push   0xc0023d20
c00152c4:	e8 cb 7f 00 00       	call   c001d294 <Vm::_FPUState::_FPUState()>
c00152c9:	83 c4 10             	add    esp,0x10
c00152cc:	90                   	nop
c00152cd:	83 c4 0c             	add    esp,0xc
c00152d0:	c3                   	ret    
c00152d1:	8d 76 00             	lea    esi,[esi+0x0]

c00152d4 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00152d4:	83 ec 0c             	sub    esp,0xc
c00152d7:	83 ec 08             	sub    esp,0x8
c00152da:	68 ff ff 00 00       	push   0xffff
c00152df:	6a 01                	push   0x1
c00152e1:	e8 c2 ff ff ff       	call   c00152a8 <__static_initialization_and_destruction_0(int, int)>
c00152e6:	83 c4 10             	add    esp,0x10
c00152e9:	83 c4 0c             	add    esp,0xc
c00152ec:	c3                   	ret    

c00152ed <Hal::noCopro(unsigned long)>:
c00152ed:	c3                   	ret    

c00152ee <Hal::noTSC()>:
c00152ee:	31 c0                	xor    eax,eax
c00152f0:	31 d2                	xor    edx,edx
c00152f2:	c3                   	ret    

c00152f3 <Hal::readTSC()>:
c00152f3:	0f 31                	rdtsc  
c00152f5:	c3                   	ret    

c00152f6 <nmiHandler(regs*, void*)>:
c00152f6:	83 ec 0c             	sub    esp,0xc
c00152f9:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c00152fe:	83 ec 0c             	sub    esp,0xc
c0015301:	50                   	push   eax
c0015302:	e8 2b 12 ff ff       	call   c0006532 <Computer::handleNMI()>
c0015307:	83 c4 10             	add    esp,0x10
c001530a:	90                   	nop
c001530b:	83 c4 0c             	add    esp,0xc
c001530e:	c3                   	ret    

c001530f <doubleFault(regs*, void*)>:
c001530f:	55                   	push   ebp
c0015310:	89 e5                	mov    ebp,esp
c0015312:	83 ec 08             	sub    esp,0x8
c0015315:	83 ec 0c             	sub    esp,0xc
c0015318:	68 48 f6 01 c0       	push   0xc001f648
c001531d:	e8 bb a4 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0015322:	83 c4 10             	add    esp,0x10
c0015325:	90                   	nop
c0015326:	c9                   	leave  
c0015327:	c3                   	ret    

c0015328 <displayDebugInfo(regs*)>:
c0015328:	83 ec 1c             	sub    esp,0x1c
c001532b:	0f 20 c0             	mov    eax,cr0
c001532e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015332:	0f 20 d0             	mov    eax,cr2
c0015335:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015339:	0f 20 d8             	mov    eax,cr3
c001533c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015340:	0f 20 e0             	mov    eax,cr4
c0015343:	89 04 24             	mov    DWORD PTR [esp],eax
c0015346:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001534a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001534d:	83 ec 08             	sub    esp,0x8
c0015350:	50                   	push   eax
c0015351:	68 64 f6 01 c0       	push   0xc001f664
c0015356:	e8 ac 47 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c001535b:	83 c4 10             	add    esp,0x10
c001535e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015362:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015365:	83 ec 08             	sub    esp,0x8
c0015368:	50                   	push   eax
c0015369:	68 55 f6 01 c0       	push   0xc001f655
c001536e:	e8 94 47 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c0015373:	83 c4 10             	add    esp,0x10
c0015376:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001537a:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001537d:	83 ec 08             	sub    esp,0x8
c0015380:	50                   	push   eax
c0015381:	68 60 f6 01 c0       	push   0xc001f660
c0015386:	e8 7c 47 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c001538b:	83 c4 10             	add    esp,0x10
c001538e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015392:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015395:	83 ec 08             	sub    esp,0x8
c0015398:	50                   	push   eax
c0015399:	68 6f f6 01 c0       	push   0xc001f66f
c001539e:	e8 64 47 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c00153a3:	83 c4 10             	add    esp,0x10
c00153a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153aa:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00153ad:	83 ec 08             	sub    esp,0x8
c00153b0:	50                   	push   eax
c00153b1:	68 7a f6 01 c0       	push   0xc001f67a
c00153b6:	e8 4c 47 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c00153bb:	83 c4 10             	add    esp,0x10
c00153be:	83 ec 08             	sub    esp,0x8
c00153c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00153c5:	68 85 f6 01 c0       	push   0xc001f685
c00153ca:	e8 38 47 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c00153cf:	83 c4 10             	add    esp,0x10
c00153d2:	83 ec 08             	sub    esp,0x8
c00153d5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00153d9:	68 90 f6 01 c0       	push   0xc001f690
c00153de:	e8 24 47 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c00153e3:	83 c4 10             	add    esp,0x10
c00153e6:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c00153eb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153f1:	83 ec 0c             	sub    esp,0xc
c00153f4:	50                   	push   eax
c00153f5:	e8 a3 26 ff ff       	call   c0007a9d <setActiveTerminal(VgaText*)>
c00153fa:	83 c4 10             	add    esp,0x10
c00153fd:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c0015402:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015408:	83 ec 08             	sub    esp,0x8
c001540b:	68 9b f6 01 c0       	push   0xc001f69b
c0015410:	50                   	push   eax
c0015411:	e8 c6 29 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c0015416:	83 c4 10             	add    esp,0x10
c0015419:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c001541e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015424:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0015429:	8b 12                	mov    edx,DWORD PTR [edx]
c001542b:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001542e:	83 c2 0c             	add    edx,0xc
c0015431:	83 ec 08             	sub    esp,0x8
c0015434:	52                   	push   edx
c0015435:	50                   	push   eax
c0015436:	e8 a1 29 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c001543b:	83 c4 10             	add    esp,0x10
c001543e:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c0015443:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015449:	83 ec 08             	sub    esp,0x8
c001544c:	68 a4 f6 01 c0       	push   0xc001f6a4
c0015451:	50                   	push   eax
c0015452:	e8 85 29 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c0015457:	83 c4 10             	add    esp,0x10
c001545a:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c001545f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015465:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015469:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001546c:	83 ec 08             	sub    esp,0x8
c001546f:	52                   	push   edx
c0015470:	50                   	push   eax
c0015471:	e8 20 29 ff ff       	call   c0007d96 <VgaText::putx(unsigned int)>
c0015476:	83 c4 10             	add    esp,0x10
c0015479:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c001547e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015484:	83 ec 08             	sub    esp,0x8
c0015487:	68 ac f6 01 c0       	push   0xc001f6ac
c001548c:	50                   	push   eax
c001548d:	e8 4a 29 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c0015492:	83 c4 10             	add    esp,0x10
c0015495:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c001549a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00154a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00154a4:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00154a7:	83 ec 08             	sub    esp,0x8
c00154aa:	52                   	push   edx
c00154ab:	50                   	push   eax
c00154ac:	e8 e5 28 ff ff       	call   c0007d96 <VgaText::putx(unsigned int)>
c00154b1:	83 c4 10             	add    esp,0x10
c00154b4:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c00154b9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00154bf:	83 ec 08             	sub    esp,0x8
c00154c2:	68 b4 f6 01 c0       	push   0xc001f6b4
c00154c7:	50                   	push   eax
c00154c8:	e8 0f 29 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c00154cd:	83 c4 10             	add    esp,0x10
c00154d0:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c00154d5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00154db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00154df:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00154e2:	83 ec 08             	sub    esp,0x8
c00154e5:	52                   	push   edx
c00154e6:	50                   	push   eax
c00154e7:	e8 aa 28 ff ff       	call   c0007d96 <VgaText::putx(unsigned int)>
c00154ec:	83 c4 10             	add    esp,0x10
c00154ef:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c00154f4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00154fa:	83 ec 08             	sub    esp,0x8
c00154fd:	68 bc f6 01 c0       	push   0xc001f6bc
c0015502:	50                   	push   eax
c0015503:	e8 d4 28 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c0015508:	83 c4 10             	add    esp,0x10
c001550b:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c0015510:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015516:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001551a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001551d:	83 ec 08             	sub    esp,0x8
c0015520:	52                   	push   edx
c0015521:	50                   	push   eax
c0015522:	e8 6f 28 ff ff       	call   c0007d96 <VgaText::putx(unsigned int)>
c0015527:	83 c4 10             	add    esp,0x10
c001552a:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c001552f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015535:	83 ec 08             	sub    esp,0x8
c0015538:	68 c4 f6 01 c0       	push   0xc001f6c4
c001553d:	50                   	push   eax
c001553e:	e8 99 28 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c0015543:	83 c4 10             	add    esp,0x10
c0015546:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c001554b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015551:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015555:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0015558:	83 ec 08             	sub    esp,0x8
c001555b:	52                   	push   edx
c001555c:	50                   	push   eax
c001555d:	e8 34 28 ff ff       	call   c0007d96 <VgaText::putx(unsigned int)>
c0015562:	83 c4 10             	add    esp,0x10
c0015565:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c001556a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015570:	83 ec 08             	sub    esp,0x8
c0015573:	68 cc f6 01 c0       	push   0xc001f6cc
c0015578:	50                   	push   eax
c0015579:	e8 5e 28 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c001557e:	83 c4 10             	add    esp,0x10
c0015581:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c0015586:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001558c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015590:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015593:	83 ec 08             	sub    esp,0x8
c0015596:	52                   	push   edx
c0015597:	50                   	push   eax
c0015598:	e8 f9 27 ff ff       	call   c0007d96 <VgaText::putx(unsigned int)>
c001559d:	83 c4 10             	add    esp,0x10
c00155a0:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c00155a5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00155ab:	83 ec 08             	sub    esp,0x8
c00155ae:	68 d4 f6 01 c0       	push   0xc001f6d4
c00155b3:	50                   	push   eax
c00155b4:	e8 23 28 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c00155b9:	83 c4 10             	add    esp,0x10
c00155bc:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c00155c1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00155c7:	83 ec 08             	sub    esp,0x8
c00155ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00155ce:	50                   	push   eax
c00155cf:	e8 c2 27 ff ff       	call   c0007d96 <VgaText::putx(unsigned int)>
c00155d4:	83 c4 10             	add    esp,0x10
c00155d7:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c00155dc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00155e2:	83 ec 08             	sub    esp,0x8
c00155e5:	68 dd f6 01 c0       	push   0xc001f6dd
c00155ea:	50                   	push   eax
c00155eb:	e8 ec 27 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c00155f0:	83 c4 10             	add    esp,0x10
c00155f3:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c00155f8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00155fe:	83 ec 08             	sub    esp,0x8
c0015601:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015605:	50                   	push   eax
c0015606:	e8 8b 27 ff ff       	call   c0007d96 <VgaText::putx(unsigned int)>
c001560b:	83 c4 10             	add    esp,0x10
c001560e:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c0015613:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015619:	83 ec 08             	sub    esp,0x8
c001561c:	68 e5 f6 01 c0       	push   0xc001f6e5
c0015621:	50                   	push   eax
c0015622:	e8 b5 27 ff ff       	call   c0007ddc <VgaText::puts(char const*)>
c0015627:	83 c4 10             	add    esp,0x10
c001562a:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c001562f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015635:	83 ec 08             	sub    esp,0x8
c0015638:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001563c:	50                   	push   eax
c001563d:	e8 54 27 ff ff       	call   c0007d96 <VgaText::putx(unsigned int)>
c0015642:	83 c4 10             	add    esp,0x10
c0015645:	fa                   	cli    
c0015646:	f4                   	hlt    
c0015647:	eb fe                	jmp    c0015647 <displayDebugInfo(regs*)+0x31f>

c0015649 <displayProgramFault(char const*)>:
c0015649:	83 ec 0c             	sub    esp,0xc
c001564c:	83 ec 0c             	sub    esp,0xc
c001564f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015653:	e8 af 44 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c0015658:	83 c4 10             	add    esp,0x10
c001565b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015660:	8b 00                	mov    eax,DWORD PTR [eax]
c0015662:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015665:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001566b:	85 c0                	test   eax,eax
c001566d:	74 21                	je     c0015690 <displayProgramFault(char const*)+0x47>
c001566f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015674:	8b 00                	mov    eax,DWORD PTR [eax]
c0015676:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015679:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001567f:	6a 04                	push   0x4
c0015681:	6a 0f                	push   0xf
c0015683:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015687:	50                   	push   eax
c0015688:	e8 c1 27 ff ff       	call   c0007e4e <VgaText::puts(char const*, VgaColour, VgaColour)>
c001568d:	83 c4 10             	add    esp,0x10
c0015690:	90                   	nop
c0015691:	83 c4 0c             	add    esp,0xc
c0015694:	c3                   	ret    

c0015695 <gpFault(regs*, void*)>:
c0015695:	83 ec 1c             	sub    esp,0x1c
c0015698:	c7 05 7c 3d 02 c0 4b 3c 01 c0 	mov    DWORD PTR ds:0xc0023d7c,0xc0013c4b
c00156a2:	a1 7c 3d 02 c0       	mov    eax,ds:0xc0023d7c
c00156a7:	85 c0                	test   eax,eax
c00156a9:	74 1c                	je     c00156c7 <gpFault(regs*, void*)+0x32>
c00156ab:	a1 7c 3d 02 c0       	mov    eax,ds:0xc0023d7c
c00156b0:	83 ec 0c             	sub    esp,0xc
c00156b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00156b7:	ff d0                	call   eax
c00156b9:	83 c4 10             	add    esp,0x10
c00156bc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00156c0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00156c5:	75 2e                	jne    c00156f5 <gpFault(regs*, void*)+0x60>
c00156c7:	83 ec 0c             	sub    esp,0xc
c00156ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00156ce:	e8 55 fc ff ff       	call   c0015328 <displayDebugInfo(regs*)>
c00156d3:	83 c4 10             	add    esp,0x10
c00156d6:	83 ec 0c             	sub    esp,0xc
c00156d9:	68 ed f6 01 c0       	push   0xc001f6ed
c00156de:	e8 66 ff ff ff       	call   c0015649 <displayProgramFault(char const*)>
c00156e3:	83 c4 10             	add    esp,0x10
c00156e6:	83 ec 0c             	sub    esp,0xc
c00156e9:	6a 00                	push   0x0
c00156eb:	e8 54 df ff ff       	call   c0013644 <Thr::terminateFromIRQ(int)>
c00156f0:	83 c4 10             	add    esp,0x10
c00156f3:	eb 01                	jmp    c00156f6 <gpFault(regs*, void*)+0x61>
c00156f5:	90                   	nop
c00156f6:	83 c4 1c             	add    esp,0x1c
c00156f9:	c3                   	ret    

c00156fa <pgFault(regs*, void*)>:
c00156fa:	83 ec 1c             	sub    esp,0x1c
c00156fd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015702:	8b 00                	mov    eax,DWORD PTR [eax]
c0015704:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015707:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001570d:	0f 20 d2             	mov    edx,cr2
c0015710:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015714:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015718:	83 ec 08             	sub    esp,0x8
c001571b:	52                   	push   edx
c001571c:	50                   	push   eax
c001571d:	e8 30 40 ff ff       	call   c0009752 <VAS::tryLoadBackOffDisk(unsigned long)>
c0015722:	83 c4 10             	add    esp,0x10
c0015725:	84 c0                	test   al,al
c0015727:	75 2e                	jne    c0015757 <pgFault(regs*, void*)+0x5d>
c0015729:	83 ec 0c             	sub    esp,0xc
c001572c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015730:	e8 f3 fb ff ff       	call   c0015328 <displayDebugInfo(regs*)>
c0015735:	83 c4 10             	add    esp,0x10
c0015738:	83 ec 0c             	sub    esp,0xc
c001573b:	68 06 f7 01 c0       	push   0xc001f706
c0015740:	e8 04 ff ff ff       	call   c0015649 <displayProgramFault(char const*)>
c0015745:	83 c4 10             	add    esp,0x10
c0015748:	83 ec 0c             	sub    esp,0xc
c001574b:	6a 00                	push   0x0
c001574d:	e8 f2 de ff ff       	call   c0013644 <Thr::terminateFromIRQ(int)>
c0015752:	83 c4 10             	add    esp,0x10
c0015755:	eb 01                	jmp    c0015758 <pgFault(regs*, void*)+0x5e>
c0015757:	90                   	nop
c0015758:	83 c4 1c             	add    esp,0x1c
c001575b:	c3                   	ret    

c001575c <otherISRHandler(regs*, void*)>:
c001575c:	83 ec 0c             	sub    esp,0xc
c001575f:	83 ec 0c             	sub    esp,0xc
c0015762:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015766:	e8 bd fb ff ff       	call   c0015328 <displayDebugInfo(regs*)>
c001576b:	83 c4 10             	add    esp,0x10
c001576e:	83 ec 0c             	sub    esp,0xc
c0015771:	68 58 f7 01 c0       	push   0xc001f758
c0015776:	e8 ce fe ff ff       	call   c0015649 <displayProgramFault(char const*)>
c001577b:	83 c4 10             	add    esp,0x10
c001577e:	83 ec 0c             	sub    esp,0xc
c0015781:	6a 00                	push   0x0
c0015783:	e8 bc de ff ff       	call   c0013644 <Thr::terminateFromIRQ(int)>
c0015788:	83 c4 10             	add    esp,0x10
c001578b:	90                   	nop
c001578c:	83 c4 0c             	add    esp,0xc
c001578f:	c3                   	ret    

c0015790 <opcodeFault(regs*, void*)>:
c0015790:	55                   	push   ebp
c0015791:	89 e5                	mov    ebp,esp
c0015793:	83 ec 08             	sub    esp,0x8
c0015796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015799:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001579c:	83 ec 08             	sub    esp,0x8
c001579f:	50                   	push   eax
c00157a0:	68 11 f7 01 c0       	push   0xc001f711
c00157a5:	e8 5d 43 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c00157aa:	83 c4 10             	add    esp,0x10
c00157ad:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c00157b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00157b8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00157be:	84 c0                	test   al,al
c00157c0:	74 21                	je     c00157e3 <opcodeFault(regs*, void*)+0x53>
c00157c2:	83 ec 0c             	sub    esp,0xc
c00157c5:	68 80 f7 01 c0       	push   0xc001f780
c00157ca:	e8 38 43 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c00157cf:	83 c4 10             	add    esp,0x10
c00157d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157d8:	8d 50 19             	lea    edx,[eax+0x19]
c00157db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157de:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00157e1:	eb 2b                	jmp    c001580e <opcodeFault(regs*, void*)+0x7e>
c00157e3:	83 ec 0c             	sub    esp,0xc
c00157e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00157e9:	e8 3a fb ff ff       	call   c0015328 <displayDebugInfo(regs*)>
c00157ee:	83 c4 10             	add    esp,0x10
c00157f1:	83 ec 0c             	sub    esp,0xc
c00157f4:	68 1f f7 01 c0       	push   0xc001f71f
c00157f9:	e8 4b fe ff ff       	call   c0015649 <displayProgramFault(char const*)>
c00157fe:	83 c4 10             	add    esp,0x10
c0015801:	83 ec 0c             	sub    esp,0xc
c0015804:	6a 00                	push   0x0
c0015806:	e8 39 de ff ff       	call   c0013644 <Thr::terminateFromIRQ(int)>
c001580b:	83 c4 10             	add    esp,0x10
c001580e:	c9                   	leave  
c001580f:	c3                   	ret    

c0015810 <i386SaveCoprocessor(void*)>:
c0015810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015814:	83 c0 3f             	add    eax,0x3f
c0015817:	83 e0 c0             	and    eax,0xffffffc0
c001581a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001581e:	ff 25 74 3d 02 c0    	jmp    DWORD PTR ds:0xc0023d74

c0015824 <i386LoadCoprocessor(void*)>:
c0015824:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015828:	83 c0 3f             	add    eax,0x3f
c001582b:	83 e0 c0             	and    eax,0xffffffc0
c001582e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015832:	ff 25 70 3d 02 c0    	jmp    DWORD PTR ds:0xc0023d70

c0015838 <x87EmulHandler(regs*, void*)>:
c0015838:	53                   	push   ebx
c0015839:	83 ec 08             	sub    esp,0x8
c001583c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015841:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015845:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0015849:	74 10                	je     c001585b <x87EmulHandler(regs*, void*)+0x23>
c001584b:	83 ec 0c             	sub    esp,0xc
c001584e:	68 2c f7 01 c0       	push   0xc001f72c
c0015853:	e8 85 9f ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0015858:	83 c4 10             	add    esp,0x10
c001585b:	0f 20 c0             	mov    eax,cr0
c001585e:	a8 08                	test   al,0x8
c0015860:	74 56                	je     c00158b8 <x87EmulHandler(regs*, void*)+0x80>
c0015862:	0f 06                	clts   
c0015864:	a1 6c 3d 02 c0       	mov    eax,ds:0xc0023d6c
c0015869:	85 c0                	test   eax,eax
c001586b:	74 0e                	je     c001587b <x87EmulHandler(regs*, void*)+0x43>
c001586d:	83 ec 0c             	sub    esp,0xc
c0015870:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015873:	e8 98 ff ff ff       	call   c0015810 <i386SaveCoprocessor(void*)>
c0015878:	83 c4 10             	add    esp,0x10
c001587b:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0015881:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0015885:	75 12                	jne    c0015899 <x87EmulHandler(regs*, void*)+0x61>
c0015887:	83 ec 0c             	sub    esp,0xc
c001588a:	68 40 02 00 00       	push   0x240
c001588f:	e8 e9 14 ff ff       	call   c0006d7d <malloc>
c0015894:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0015897:	eb 10                	jmp    c00158a9 <x87EmulHandler(regs*, void*)+0x71>
c0015899:	83 ec 0c             	sub    esp,0xc
c001589c:	a1 6c 3d 02 c0       	mov    eax,ds:0xc0023d6c
c00158a1:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00158a4:	e8 7b ff ff ff       	call   c0015824 <i386LoadCoprocessor(void*)>
c00158a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158ae:	83 c4 10             	add    esp,0x10
c00158b1:	a3 6c 3d 02 c0       	mov    ds:0xc0023d6c,eax
c00158b6:	eb 2e                	jmp    c00158e6 <x87EmulHandler(regs*, void*)+0xae>
c00158b8:	83 ec 0c             	sub    esp,0xc
c00158bb:	53                   	push   ebx
c00158bc:	e8 cd ee ff ff       	call   c001478e <Vm::x87Handler(regs*)>
c00158c1:	83 c4 10             	add    esp,0x10
c00158c4:	84 c0                	test   al,al
c00158c6:	75 1e                	jne    c00158e6 <x87EmulHandler(regs*, void*)+0xae>
c00158c8:	83 ec 0c             	sub    esp,0xc
c00158cb:	68 40 f7 01 c0       	push   0xc001f740
c00158d0:	e8 32 42 ff ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c00158d5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00158dd:	83 c4 18             	add    esp,0x18
c00158e0:	5b                   	pop    ebx
c00158e1:	e9 5e dd ff ff       	jmp    c0013644 <Thr::terminateFromIRQ(int)>
c00158e6:	83 c4 08             	add    esp,0x8
c00158e9:	5b                   	pop    ebx
c00158ea:	c3                   	ret    

c00158eb <Hal::initialiseCoprocessor()>:
c00158eb:	83 ec 10             	sub    esp,0x10
c00158ee:	c7 05 6c 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d6c,0x0
c00158f8:	6a 00                	push   0x0
c00158fa:	68 38 58 01 c0       	push   0xc0015838
c00158ff:	6a 07                	push   0x7
c0015901:	e8 56 5b ff ff       	call   c000b45c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015906:	e8 e5 69 00 00       	call   c001c2f0 <avxDetect>
c001590b:	83 c4 10             	add    esp,0x10
c001590e:	85 c0                	test   eax,eax
c0015910:	74 1c                	je     c001592e <Hal::initialiseCoprocessor()+0x43>
c0015912:	c7 05 74 3d 02 c0 1a c3 01 c0 	mov    DWORD PTR ds:0xc0023d74,0xc001c31a
c001591c:	c7 05 70 3d 02 c0 2b c3 01 c0 	mov    DWORD PTR ds:0xc0023d70,0xc001c32b
c0015926:	83 c4 0c             	add    esp,0xc
c0015929:	e9 0e 6a 00 00       	jmp    c001c33c <avxInit>
c001592e:	e8 3d 6c 00 00       	call   c001c570 <absolutelyNoChanceInHell>
c0015933:	85 c0                	test   eax,eax
c0015935:	74 1c                	je     c0015953 <Hal::initialiseCoprocessor()+0x68>
c0015937:	c7 05 74 3d 02 c0 88 c5 01 c0 	mov    DWORD PTR ds:0xc0023d74,0xc001c588
c0015941:	c7 05 70 3d 02 c0 90 c5 01 c0 	mov    DWORD PTR ds:0xc0023d70,0xc001c590
c001594b:	83 c4 0c             	add    esp,0xc
c001594e:	e9 45 6c 00 00       	jmp    c001c598 <sseInit>
c0015953:	e8 5e 6c 00 00       	call   c001c5b6 <x87Detect>
c0015958:	85 c0                	test   eax,eax
c001595a:	74 1c                	je     c0015978 <Hal::initialiseCoprocessor()+0x8d>
c001595c:	c7 05 74 3d 02 c0 d1 c5 01 c0 	mov    DWORD PTR ds:0xc0023d74,0xc001c5d1
c0015966:	c7 05 70 3d 02 c0 d8 c5 01 c0 	mov    DWORD PTR ds:0xc0023d70,0xc001c5d8
c0015970:	83 c4 0c             	add    esp,0xc
c0015973:	e9 67 6c 00 00       	jmp    c001c5df <x87Init>
c0015978:	c7 05 74 3d 02 c0 ed 52 01 c0 	mov    DWORD PTR ds:0xc0023d74,0xc00152ed
c0015982:	c7 05 70 3d 02 c0 ed 52 01 c0 	mov    DWORD PTR ds:0xc0023d70,0xc00152ed
c001598c:	0f 20 c0             	mov    eax,cr0
c001598f:	83 c8 04             	or     eax,0x4
c0015992:	0f 22 c0             	mov    cr0,eax
c0015995:	83 c4 0c             	add    esp,0xc
c0015998:	c3                   	ret    

c0015999 <Hal::panic(char const*)>:
c0015999:	e9 3f 9e ff ff       	jmp    c000f7dd <Krnl::panic(char const*)>

c001599e <Hal::initialise()>:
c001599e:	53                   	push   ebx
c001599f:	83 ec 08             	sub    esp,0x8
c00159a2:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c00159a7:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00159ad:	b8 ee 52 01 c0       	mov    eax,0xc00152ee
c00159b2:	f6 82 8c 11 00 00 02 	test   BYTE PTR [edx+0x118c],0x2
c00159b9:	74 05                	je     c00159c0 <Hal::initialise()+0x22>
c00159bb:	b8 f3 52 01 c0       	mov    eax,0xc00152f3
c00159c0:	a3 78 3d 02 c0       	mov    ds:0xc0023d78,eax
c00159c5:	e8 b7 5c ff ff       	call   c000b681 <setupINTS()>
c00159ca:	80 3d 80 30 02 c0 00 	cmp    BYTE PTR ds:0xc0023080,0x0
c00159d1:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c00159d6:	75 07                	jne    c00159df <Hal::initialise()+0x41>
c00159d8:	80 a0 e8 01 00 00 fe 	and    BYTE PTR [eax+0x1e8],0xfe
c00159df:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00159e5:	83 e0 01             	and    eax,0x1
c00159e8:	a2 68 3d 02 c0       	mov    ds:0xc0023d68,al
c00159ed:	e8 9e 02 00 00       	call   c0015c90 <picOpen()>
c00159f2:	80 3d 68 3d 02 c0 00 	cmp    BYTE PTR ds:0xc0023d68,0x0
c00159f9:	74 0a                	je     c0015a05 <Hal::initialise()+0x67>
c00159fb:	e8 e0 01 00 00       	call   c0015be0 <picDisable()>
c0015a00:	e8 91 62 00 00       	call   c001bc96 <apicOpen()>
c0015a05:	bb 0f 00 00 00       	mov    ebx,0xf
c0015a0a:	50                   	push   eax
c0015a0b:	6a 00                	push   0x0
c0015a0d:	68 5c 57 01 c0       	push   0xc001575c
c0015a12:	6a 00                	push   0x0
c0015a14:	e8 43 5a ff ff       	call   c000b45c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015a19:	83 c4 0c             	add    esp,0xc
c0015a1c:	6a 00                	push   0x0
c0015a1e:	68 5c 57 01 c0       	push   0xc001575c
c0015a23:	6a 01                	push   0x1
c0015a25:	e8 32 5a ff ff       	call   c000b45c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015a2a:	83 c4 0c             	add    esp,0xc
c0015a2d:	6a 00                	push   0x0
c0015a2f:	68 f6 52 01 c0       	push   0xc00152f6
c0015a34:	6a 02                	push   0x2
c0015a36:	e8 21 5a ff ff       	call   c000b45c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015a3b:	83 c4 0c             	add    esp,0xc
c0015a3e:	6a 00                	push   0x0
c0015a40:	68 5c 57 01 c0       	push   0xc001575c
c0015a45:	6a 03                	push   0x3
c0015a47:	e8 10 5a ff ff       	call   c000b45c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015a4c:	83 c4 0c             	add    esp,0xc
c0015a4f:	6a 00                	push   0x0
c0015a51:	68 5c 57 01 c0       	push   0xc001575c
c0015a56:	6a 04                	push   0x4
c0015a58:	e8 ff 59 ff ff       	call   c000b45c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015a5d:	83 c4 0c             	add    esp,0xc
c0015a60:	6a 00                	push   0x0
c0015a62:	68 5c 57 01 c0       	push   0xc001575c
c0015a67:	6a 05                	push   0x5
c0015a69:	e8 ee 59 ff ff       	call   c000b45c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015a6e:	83 c4 0c             	add    esp,0xc
c0015a71:	6a 00                	push   0x0
c0015a73:	68 90 57 01 c0       	push   0xc0015790
c0015a78:	6a 06                	push   0x6
c0015a7a:	e8 dd 59 ff ff       	call   c000b45c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015a7f:	83 c4 0c             	add    esp,0xc
c0015a82:	6a 00                	push   0x0
c0015a84:	68 0f 53 01 c0       	push   0xc001530f
c0015a89:	6a 08                	push   0x8
c0015a8b:	e8 cc 59 ff ff       	call   c000b45c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015a90:	83 c4 0c             	add    esp,0xc
c0015a93:	6a 00                	push   0x0
c0015a95:	68 5c 57 01 c0       	push   0xc001575c
c0015a9a:	6a 09                	push   0x9
c0015a9c:	e8 bb 59 ff ff       	call   c000b45c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015aa1:	83 c4 0c             	add    esp,0xc
c0015aa4:	6a 00                	push   0x0
c0015aa6:	68 5c 57 01 c0       	push   0xc001575c
c0015aab:	6a 0a                	push   0xa
c0015aad:	e8 aa 59 ff ff       	call   c000b45c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015ab2:	83 c4 0c             	add    esp,0xc
c0015ab5:	6a 00                	push   0x0
c0015ab7:	68 5c 57 01 c0       	push   0xc001575c
c0015abc:	6a 0b                	push   0xb
c0015abe:	e8 99 59 ff ff       	call   c000b45c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015ac3:	83 c4 0c             	add    esp,0xc
c0015ac6:	6a 00                	push   0x0
c0015ac8:	68 95 56 01 c0       	push   0xc0015695
c0015acd:	6a 0d                	push   0xd
c0015acf:	e8 88 59 ff ff       	call   c000b45c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015ad4:	83 c4 0c             	add    esp,0xc
c0015ad7:	6a 00                	push   0x0
c0015ad9:	68 fa 56 01 c0       	push   0xc00156fa
c0015ade:	6a 0e                	push   0xe
c0015ae0:	e8 77 59 ff ff       	call   c000b45c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015ae5:	83 c4 10             	add    esp,0x10
c0015ae8:	50                   	push   eax
c0015ae9:	6a 00                	push   0x0
c0015aeb:	68 5c 57 01 c0       	push   0xc001575c
c0015af0:	53                   	push   ebx
c0015af1:	43                   	inc    ebx
c0015af2:	e8 65 59 ff ff       	call   c000b45c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015af7:	83 c4 10             	add    esp,0x10
c0015afa:	83 fb 1e             	cmp    ebx,0x1e
c0015afd:	75 e9                	jne    c0015ae8 <Hal::initialise()+0x14a>
c0015aff:	50                   	push   eax
c0015b00:	6a 00                	push   0x0
c0015b02:	68 c5 12 01 c0       	push   0xc00112c5
c0015b07:	6a 60                	push   0x60
c0015b09:	e8 4e 59 ff ff       	call   c000b45c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015b0e:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c0015b13:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0015b1d:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0015b24:	e8 54 12 ff ff       	call   c0006d7d <malloc>
c0015b29:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b2c:	89 c3                	mov    ebx,eax
c0015b2e:	e8 15 09 00 00       	call   c0016448 <RTC::RTC()>
c0015b33:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0015b3d:	5a                   	pop    edx
c0015b3e:	59                   	pop    ecx
c0015b3f:	53                   	push   ebx
c0015b40:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c0015b46:	e8 df 53 ff ff       	call   c000af2a <Device::addChild(Device*)>
c0015b4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b4d:	6a 00                	push   0x0
c0015b4f:	6a 00                	push   0x0
c0015b51:	6a 00                	push   0x0
c0015b53:	53                   	push   ebx
c0015b54:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b57:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c0015b5c:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0015b62:	83 c4 28             	add    esp,0x28
c0015b65:	5b                   	pop    ebx
c0015b66:	c3                   	ret    

c0015b67 <Hal::makeBeep(int)>:
c0015b67:	53                   	push   ebx
c0015b68:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015b6c:	85 db                	test   ebx,ebx
c0015b6e:	75 07                	jne    c0015b77 <Hal::makeBeep(int)+0x10>
c0015b70:	e4 61                	in     al,0x61
c0015b72:	83 e0 fc             	and    eax,0xfffffffc
c0015b75:	eb 26                	jmp    c0015b9d <Hal::makeBeep(int)+0x36>
c0015b77:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0015b7c:	99                   	cdq    
c0015b7d:	f7 fb                	idiv   ebx
c0015b7f:	89 c1                	mov    ecx,eax
c0015b81:	b0 b6                	mov    al,0xb6
c0015b83:	e6 43                	out    0x43,al
c0015b85:	88 c8                	mov    al,cl
c0015b87:	e6 42                	out    0x42,al
c0015b89:	89 c8                	mov    eax,ecx
c0015b8b:	c1 e8 08             	shr    eax,0x8
c0015b8e:	e6 42                	out    0x42,al
c0015b90:	e4 61                	in     al,0x61
c0015b92:	88 c2                	mov    dl,al
c0015b94:	83 ca 03             	or     edx,0x3
c0015b97:	38 c2                	cmp    dl,al
c0015b99:	74 04                	je     c0015b9f <Hal::makeBeep(int)+0x38>
c0015b9b:	88 d0                	mov    al,dl
c0015b9d:	e6 61                	out    0x61,al
c0015b9f:	5b                   	pop    ebx
c0015ba0:	c3                   	ret    

c0015ba1 <Hal::getRand()>:
c0015ba1:	31 c0                	xor    eax,eax
c0015ba3:	c3                   	ret    

c0015ba4 <Hal::endOfInterrupt(int)>:
c0015ba4:	80 3d 68 3d 02 c0 00 	cmp    BYTE PTR ds:0xc0023d68,0x0
c0015bab:	74 23                	je     c0015bd0 <Hal::endOfInterrupt(int)+0x2c>
c0015bad:	83 ec 14             	sub    esp,0x14
c0015bb0:	6a 1b                	push   0x1b
c0015bb2:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c0015bb8:	e8 91 07 ff ff       	call   c000634e <Computer::rdmsr(unsigned int)>
c0015bbd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015bc2:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0015bcc:	83 c4 1c             	add    esp,0x1c
c0015bcf:	c3                   	ret    
c0015bd0:	e9 3f 02 00 00       	jmp    c0015e14 <picEOI(int)>
c0015bd5:	66 90                	xchg   ax,ax
c0015bd7:	90                   	nop

c0015bd8 <picIoWait()>:
c0015bd8:	eb 00                	jmp    c0015bda <picIoWait()+0x2>
c0015bda:	eb 00                	jmp    c0015bdc <picIoWait()+0x4>
c0015bdc:	90                   	nop
c0015bdd:	c3                   	ret    
c0015bde:	66 90                	xchg   ax,ax

c0015be0 <picDisable()>:
c0015be0:	83 ec 10             	sub    esp,0x10
c0015be3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0015bea:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0015bef:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015bf3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015bf8:	ee                   	out    dx,al
c0015bf9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015c00:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015c05:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015c09:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0015c0e:	ee                   	out    dx,al
c0015c0f:	90                   	nop
c0015c10:	83 c4 10             	add    esp,0x10
c0015c13:	c3                   	ret    

c0015c14 <picGetIRQReg(int)>:
c0015c14:	83 ec 10             	sub    esp,0x10
c0015c17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c1b:	0f b6 c0             	movzx  eax,al
c0015c1e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015c25:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015c29:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015c2d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015c32:	ee                   	out    dx,al
c0015c33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c37:	0f b6 c0             	movzx  eax,al
c0015c3a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015c41:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015c45:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015c49:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015c4e:	ee                   	out    dx,al
c0015c4f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0015c56:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015c5b:	89 c2                	mov    edx,eax
c0015c5d:	ec                   	in     al,dx
c0015c5e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015c62:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015c66:	0f b6 c0             	movzx  eax,al
c0015c69:	c1 e0 08             	shl    eax,0x8
c0015c6c:	89 c1                	mov    ecx,eax
c0015c6e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0015c75:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015c7a:	89 c2                	mov    edx,eax
c0015c7c:	ec                   	in     al,dx
c0015c7d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015c81:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015c85:	0f b6 c0             	movzx  eax,al
c0015c88:	09 c8                	or     eax,ecx
c0015c8a:	83 c4 10             	add    esp,0x10
c0015c8d:	c3                   	ret    
c0015c8e:	66 90                	xchg   ax,ax

c0015c90 <picOpen()>:
c0015c90:	83 ec 50             	sub    esp,0x50
c0015c93:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015c9a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015c9f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015ca3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ca7:	ee                   	out    dx,al
c0015ca8:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015caf:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015cb4:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015cb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015cbc:	ee                   	out    dx,al
c0015cbd:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015cc5:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015ccd:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015cd4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015cd8:	89 c2                	mov    edx,eax
c0015cda:	ec                   	in     al,dx
c0015cdb:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015cdf:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015ce3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015ce7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015cee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015cf2:	89 c2                	mov    edx,eax
c0015cf4:	ec                   	in     al,dx
c0015cf5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015cf9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015cfd:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015d01:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015d08:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015d0d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015d11:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015d15:	ee                   	out    dx,al
c0015d16:	e8 bd fe ff ff       	call   c0015bd8 <picIoWait()>
c0015d1b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015d22:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015d27:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015d2b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015d2f:	ee                   	out    dx,al
c0015d30:	e8 a3 fe ff ff       	call   c0015bd8 <picIoWait()>
c0015d35:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015d39:	0f b6 c0             	movzx  eax,al
c0015d3c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015d43:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015d47:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015d4b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015d4f:	ee                   	out    dx,al
c0015d50:	e8 83 fe ff ff       	call   c0015bd8 <picIoWait()>
c0015d55:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015d59:	0f b6 c0             	movzx  eax,al
c0015d5c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015d63:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015d67:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015d6b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015d6f:	ee                   	out    dx,al
c0015d70:	e8 63 fe ff ff       	call   c0015bd8 <picIoWait()>
c0015d75:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015d7c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015d81:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015d85:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015d89:	ee                   	out    dx,al
c0015d8a:	e8 49 fe ff ff       	call   c0015bd8 <picIoWait()>
c0015d8f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015d96:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015d9b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015d9f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015da3:	ee                   	out    dx,al
c0015da4:	e8 2f fe ff ff       	call   c0015bd8 <picIoWait()>
c0015da9:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015db0:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015db5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015db9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015dbd:	ee                   	out    dx,al
c0015dbe:	e8 15 fe ff ff       	call   c0015bd8 <picIoWait()>
c0015dc3:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015dca:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015dcf:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015dd3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015dd7:	ee                   	out    dx,al
c0015dd8:	e8 fb fd ff ff       	call   c0015bd8 <picIoWait()>
c0015ddd:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0015de2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015de9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015ded:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015df1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015df5:	ee                   	out    dx,al
c0015df6:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0015dfb:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015e02:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015e06:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015e0a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015e0e:	ee                   	out    dx,al
c0015e0f:	90                   	nop
c0015e10:	83 c4 50             	add    esp,0x50
c0015e13:	c3                   	ret    

c0015e14 <picEOI(int)>:
c0015e14:	83 ec 10             	sub    esp,0x10
c0015e17:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015e1c:	75 1e                	jne    c0015e3c <picEOI(int)+0x28>
c0015e1e:	6a 0b                	push   0xb
c0015e20:	e8 ef fd ff ff       	call   c0015c14 <picGetIRQReg(int)>
c0015e25:	83 c4 04             	add    esp,0x4
c0015e28:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015e2d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0015e32:	25 80 00 00 00       	and    eax,0x80
c0015e37:	74 73                	je     c0015eac <picEOI(int)+0x98>
c0015e39:	8d 76 00             	lea    esi,[esi+0x0]
c0015e3c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015e41:	75 31                	jne    c0015e74 <picEOI(int)+0x60>
c0015e43:	6a 0b                	push   0xb
c0015e45:	e8 ca fd ff ff       	call   c0015c14 <picGetIRQReg(int)>
c0015e4a:	83 c4 04             	add    esp,0x4
c0015e4d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015e52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e56:	66 85 c0             	test   ax,ax
c0015e59:	78 19                	js     c0015e74 <picEOI(int)+0x60>
c0015e5b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015e62:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015e67:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015e6b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015e70:	ee                   	out    dx,al
c0015e71:	eb 3d                	jmp    c0015eb0 <picEOI(int)+0x9c>
c0015e73:	90                   	nop
c0015e74:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015e79:	7e 19                	jle    c0015e94 <picEOI(int)+0x80>
c0015e7b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015e82:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015e87:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015e8b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015e90:	ee                   	out    dx,al
c0015e91:	8d 76 00             	lea    esi,[esi+0x0]
c0015e94:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015e9b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015ea0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015ea4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015ea9:	ee                   	out    dx,al
c0015eaa:	eb 04                	jmp    c0015eb0 <picEOI(int)+0x9c>
c0015eac:	90                   	nop
c0015ead:	8d 76 00             	lea    esi,[esi+0x0]
c0015eb0:	83 c4 10             	add    esp,0x10
c0015eb3:	c3                   	ret    

c0015eb4 <RTC::open(int, int, void*)>:
c0015eb4:	31 c0                	xor    eax,eax
c0015eb6:	c3                   	ret    
c0015eb7:	90                   	nop

c0015eb8 <RTC::close(int, int, void*)>:
c0015eb8:	31 c0                	xor    eax,eax
c0015eba:	c3                   	ret    
c0015ebb:	90                   	nop

c0015ebc <RTC::timeInSecondsUTC()>:
c0015ebc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ec0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015ec6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015ecc:	c3                   	ret    
c0015ecd:	90                   	nop

c0015ece <RTC::timeInDatetimeUTC()>:
c0015ece:	53                   	push   ebx
c0015ecf:	83 ec 14             	sub    esp,0x14
c0015ed2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015ed6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015eda:	8b 10                	mov    edx,DWORD PTR [eax]
c0015edc:	50                   	push   eax
c0015edd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015ee0:	83 c4 0c             	add    esp,0xc
c0015ee3:	52                   	push   edx
c0015ee4:	50                   	push   eax
c0015ee5:	53                   	push   ebx
c0015ee6:	e8 b3 4d ff ff       	call   c000ac9e <secondsToDatetime(unsigned long long)>
c0015eeb:	89 d8                	mov    eax,ebx
c0015eed:	83 c4 14             	add    esp,0x14
c0015ef0:	5b                   	pop    ebx
c0015ef1:	c2 04 00             	ret    0x4

c0015ef4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015ef4:	56                   	push   esi
c0015ef5:	53                   	push   ebx
c0015ef6:	83 ec 14             	sub    esp,0x14
c0015ef9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015efd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015eff:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015f02:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015f06:	52                   	push   edx
c0015f07:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015f0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015f0f:	50                   	push   eax
c0015f10:	e8 89 4d ff ff       	call   c000ac9e <secondsToDatetime(unsigned long long)>
c0015f15:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015f19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015f1d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015f21:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015f25:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015f29:	89 f0                	mov    eax,esi
c0015f2b:	83 c4 20             	add    esp,0x20
c0015f2e:	5b                   	pop    ebx
c0015f2f:	5e                   	pop    esi
c0015f30:	ff e0                	jmp    eax

c0015f32 <RTC::~RTC()>:
c0015f32:	83 ec 0c             	sub    esp,0xc
c0015f35:	ba c0 f7 01 c0       	mov    edx,0xc001f7c0
c0015f3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f3e:	89 10                	mov    DWORD PTR [eax],edx
c0015f40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f44:	83 ec 0c             	sub    esp,0xc
c0015f47:	50                   	push   eax
c0015f48:	e8 db 4a ff ff       	call   c000aa28 <Clock::~Clock()>
c0015f4d:	83 c4 10             	add    esp,0x10
c0015f50:	90                   	nop
c0015f51:	83 c4 0c             	add    esp,0xc
c0015f54:	c3                   	ret    
c0015f55:	90                   	nop

c0015f56 <RTC::~RTC()>:
c0015f56:	83 ec 0c             	sub    esp,0xc
c0015f59:	83 ec 0c             	sub    esp,0xc
c0015f5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f60:	e8 cd ff ff ff       	call   c0015f32 <RTC::~RTC()>
c0015f65:	83 c4 10             	add    esp,0x10
c0015f68:	83 ec 08             	sub    esp,0x8
c0015f6b:	68 60 01 00 00       	push   0x160
c0015f70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f74:	e8 ad 3a ff ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c0015f79:	83 c4 10             	add    esp,0x10
c0015f7c:	83 c4 0c             	add    esp,0xc
c0015f7f:	c3                   	ret    

c0015f80 <RTC::get_update_in_progress_flag()>:
c0015f80:	83 ec 14             	sub    esp,0x14
c0015f83:	6a 0a                	push   0xa
c0015f85:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c0015f8b:	e8 72 04 ff ff       	call   c0006402 <Computer::readCMOS(unsigned char)>
c0015f90:	83 c4 1c             	add    esp,0x1c
c0015f93:	c0 e8 07             	shr    al,0x7
c0015f96:	c3                   	ret    
c0015f97:	90                   	nop

c0015f98 <RTC::completeRTCRefresh()>:
c0015f98:	55                   	push   ebp
c0015f99:	57                   	push   edi
c0015f9a:	56                   	push   esi
c0015f9b:	53                   	push   ebx
c0015f9c:	83 ec 2c             	sub    esp,0x2c
c0015f9f:	8b 1d 8c 2d 02 c0    	mov    ebx,DWORD PTR ds:0xc0022d8c
c0015fa5:	83 ec 0c             	sub    esp,0xc
c0015fa8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015fac:	e8 cf ff ff ff       	call   c0015f80 <RTC::get_update_in_progress_flag()>
c0015fb1:	83 c4 10             	add    esp,0x10
c0015fb4:	84 c0                	test   al,al
c0015fb6:	74 0e                	je     c0015fc6 <RTC::completeRTCRefresh()+0x2e>
c0015fb8:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015fbe:	3b 05 8c 2d 02 c0    	cmp    eax,DWORD PTR ds:0xc0022d8c
c0015fc4:	73 df                	jae    c0015fa5 <RTC::completeRTCRefresh()+0xd>
c0015fc6:	55                   	push   ebp
c0015fc7:	55                   	push   ebp
c0015fc8:	6a 00                	push   0x0
c0015fca:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c0015fd0:	e8 2d 04 ff ff       	call   c0006402 <Computer::readCMOS(unsigned char)>
c0015fd5:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015fd9:	58                   	pop    eax
c0015fda:	5a                   	pop    edx
c0015fdb:	6a 02                	push   0x2
c0015fdd:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c0015fe3:	e8 1a 04 ff ff       	call   c0006402 <Computer::readCMOS(unsigned char)>
c0015fe8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015fec:	59                   	pop    ecx
c0015fed:	5b                   	pop    ebx
c0015fee:	6a 04                	push   0x4
c0015ff0:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c0015ff6:	e8 07 04 ff ff       	call   c0006402 <Computer::readCMOS(unsigned char)>
c0015ffb:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015fff:	5e                   	pop    esi
c0016000:	5f                   	pop    edi
c0016001:	6a 07                	push   0x7
c0016003:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c0016009:	e8 f4 03 ff ff       	call   c0006402 <Computer::readCMOS(unsigned char)>
c001600e:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0016012:	5d                   	pop    ebp
c0016013:	58                   	pop    eax
c0016014:	6a 08                	push   0x8
c0016016:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c001601c:	e8 e1 03 ff ff       	call   c0006402 <Computer::readCMOS(unsigned char)>
c0016021:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0016025:	58                   	pop    eax
c0016026:	5a                   	pop    edx
c0016027:	6a 09                	push   0x9
c0016029:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c001602f:	e8 ce 03 ff ff       	call   c0006402 <Computer::readCMOS(unsigned char)>
c0016034:	83 c4 10             	add    esp,0x10
c0016037:	0f b6 e8             	movzx  ebp,al
c001603a:	8b 1d 8c 2d 02 c0    	mov    ebx,DWORD PTR ds:0xc0022d8c
c0016040:	83 ec 0c             	sub    esp,0xc
c0016043:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016047:	e8 34 ff ff ff       	call   c0015f80 <RTC::get_update_in_progress_flag()>
c001604c:	83 c4 10             	add    esp,0x10
c001604f:	84 c0                	test   al,al
c0016051:	74 0e                	je     c0016061 <RTC::completeRTCRefresh()+0xc9>
c0016053:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0016059:	3b 05 8c 2d 02 c0    	cmp    eax,DWORD PTR ds:0xc0022d8c
c001605f:	73 df                	jae    c0016040 <RTC::completeRTCRefresh()+0xa8>
c0016061:	50                   	push   eax
c0016062:	50                   	push   eax
c0016063:	6a 00                	push   0x0
c0016065:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c001606b:	e8 92 03 ff ff       	call   c0006402 <Computer::readCMOS(unsigned char)>
c0016070:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0016074:	58                   	pop    eax
c0016075:	5a                   	pop    edx
c0016076:	6a 02                	push   0x2
c0016078:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c001607e:	e8 7f 03 ff ff       	call   c0006402 <Computer::readCMOS(unsigned char)>
c0016083:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016087:	59                   	pop    ecx
c0016088:	5b                   	pop    ebx
c0016089:	6a 04                	push   0x4
c001608b:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c0016091:	e8 6c 03 ff ff       	call   c0006402 <Computer::readCMOS(unsigned char)>
c0016096:	5e                   	pop    esi
c0016097:	88 c3                	mov    bl,al
c0016099:	5f                   	pop    edi
c001609a:	6a 07                	push   0x7
c001609c:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c00160a2:	e8 5b 03 ff ff       	call   c0006402 <Computer::readCMOS(unsigned char)>
c00160a7:	89 c6                	mov    esi,eax
c00160a9:	58                   	pop    eax
c00160aa:	5a                   	pop    edx
c00160ab:	6a 08                	push   0x8
c00160ad:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c00160b3:	e8 4a 03 ff ff       	call   c0006402 <Computer::readCMOS(unsigned char)>
c00160b8:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00160bc:	59                   	pop    ecx
c00160bd:	5f                   	pop    edi
c00160be:	6a 09                	push   0x9
c00160c0:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c00160c6:	e8 37 03 ff ff       	call   c0006402 <Computer::readCMOS(unsigned char)>
c00160cb:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00160cf:	0f b6 f8             	movzx  edi,al
c00160d2:	83 c4 10             	add    esp,0x10
c00160d5:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c00160d9:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00160dd:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c00160e1:	89 f1                	mov    ecx,esi
c00160e3:	0f 94 c0             	sete   al
c00160e6:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c00160ea:	0f 94 c2             	sete   dl
c00160ed:	21 d0                	and    eax,edx
c00160ef:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c00160f3:	0f 94 c2             	sete   dl
c00160f6:	21 c2                	and    edx,eax
c00160f8:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c00160fc:	0f 94 c0             	sete   al
c00160ff:	21 d0                	and    eax,edx
c0016101:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0016105:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0016109:	0f 94 c1             	sete   cl
c001610c:	84 c8                	test   al,cl
c001610e:	75 29                	jne    c0016139 <RTC::completeRTCRefresh()+0x1a1>
c0016110:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0016114:	89 fd                	mov    ebp,edi
c0016116:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001611a:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c001611e:	89 f0                	mov    eax,esi
c0016120:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0016124:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016128:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001612c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0016130:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016134:	e9 01 ff ff ff       	jmp    c001603a <RTC::completeRTCRefresh()+0xa2>
c0016139:	39 fd                	cmp    ebp,edi
c001613b:	75 d3                	jne    c0016110 <RTC::completeRTCRefresh()+0x178>
c001613d:	55                   	push   ebp
c001613e:	55                   	push   ebp
c001613f:	6a 0b                	push   0xb
c0016141:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c0016147:	e8 b6 02 ff ff       	call   c0006402 <Computer::readCMOS(unsigned char)>
c001614c:	83 c4 10             	add    esp,0x10
c001614f:	89 c5                	mov    ebp,eax
c0016151:	a8 04                	test   al,0x4
c0016153:	75 78                	jne    c00161cd <RTC::completeRTCRefresh()+0x235>
c0016155:	b1 0a                	mov    cl,0xa
c0016157:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c001615b:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001615f:	83 e2 0f             	and    edx,0xf
c0016162:	c0 e8 04             	shr    al,0x4
c0016165:	c1 ef 04             	shr    edi,0x4
c0016168:	f6 e1                	mul    cl
c001616a:	6b ff 0a             	imul   edi,edi,0xa
c001616d:	01 d0                	add    eax,edx
c001616f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0016173:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0016177:	83 e2 0f             	and    edx,0xf
c001617a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001617e:	c0 e8 04             	shr    al,0x4
c0016181:	f6 e1                	mul    cl
c0016183:	01 d0                	add    eax,edx
c0016185:	88 da                	mov    dl,bl
c0016187:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001618b:	83 e2 0f             	and    edx,0xf
c001618e:	88 d8                	mov    al,bl
c0016190:	83 e3 80             	and    ebx,0xffffff80
c0016193:	c0 e8 04             	shr    al,0x4
c0016196:	83 e0 07             	and    eax,0x7
c0016199:	f6 e1                	mul    cl
c001619b:	01 d0                	add    eax,edx
c001619d:	89 f2                	mov    edx,esi
c001619f:	09 c3                	or     ebx,eax
c00161a1:	83 e2 0f             	and    edx,0xf
c00161a4:	89 f0                	mov    eax,esi
c00161a6:	c0 e8 04             	shr    al,0x4
c00161a9:	f6 e1                	mul    cl
c00161ab:	8d 34 02             	lea    esi,[edx+eax*1]
c00161ae:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c00161b2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00161b6:	83 e2 0f             	and    edx,0xf
c00161b9:	c0 e8 04             	shr    al,0x4
c00161bc:	f6 e1                	mul    cl
c00161be:	01 d0                	add    eax,edx
c00161c0:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00161c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00161c8:	83 e0 0f             	and    eax,0xf
c00161cb:	01 c7                	add    edi,eax
c00161cd:	83 e5 02             	and    ebp,0x2
c00161d0:	75 14                	jne    c00161e6 <RTC::completeRTCRefresh()+0x24e>
c00161d2:	84 db                	test   bl,bl
c00161d4:	79 10                	jns    c00161e6 <RTC::completeRTCRefresh()+0x24e>
c00161d6:	83 e3 7f             	and    ebx,0x7f
c00161d9:	b9 18 00 00 00       	mov    ecx,0x18
c00161de:	8d 43 0c             	lea    eax,[ebx+0xc]
c00161e1:	99                   	cdq    
c00161e2:	f7 f9                	idiv   ecx
c00161e4:	88 d3                	mov    bl,dl
c00161e6:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c00161ec:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c00161f2:	77 06                	ja     c00161fa <RTC::completeRTCRefresh()+0x262>
c00161f4:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c00161fa:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c00161ff:	31 d2                	xor    edx,edx
c0016201:	c1 e1 10             	shl    ecx,0x10
c0016204:	89 d7                	mov    edi,edx
c0016206:	c1 e5 10             	shl    ebp,0x10
c0016209:	31 c0                	xor    eax,eax
c001620b:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0016211:	09 cf                	or     edi,ecx
c0016213:	89 fa                	mov    edx,edi
c0016215:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0016219:	88 da                	mov    dl,bl
c001621b:	89 f3                	mov    ebx,esi
c001621d:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0016221:	88 d8                	mov    al,bl
c0016223:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0016227:	0f b7 c8             	movzx  ecx,ax
c001622a:	09 e9                	or     ecx,ebp
c001622c:	89 c8                	mov    eax,ecx
c001622e:	51                   	push   ecx
c001622f:	51                   	push   ecx
c0016230:	52                   	push   edx
c0016231:	50                   	push   eax
c0016232:	e8 e0 48 ff ff       	call   c000ab17 <datetimeToSeconds(datetime_t)>
c0016237:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001623b:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0016241:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0016247:	83 c4 3c             	add    esp,0x3c
c001624a:	5b                   	pop    ebx
c001624b:	5e                   	pop    esi
c001624c:	5f                   	pop    edi
c001624d:	5d                   	pop    ebp
c001624e:	c3                   	ret    
c001624f:	90                   	nop

c0016250 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0016250:	55                   	push   ebp
c0016251:	57                   	push   edi
c0016252:	56                   	push   esi
c0016253:	53                   	push   ebx
c0016254:	83 ec 30             	sub    esp,0x30
c0016257:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001625b:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c001625f:	6a 00                	push   0x0
c0016261:	6a 00                	push   0x0
c0016263:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c0016269:	e8 a6 02 ff ff       	call   c0006514 <Computer::writeCMOS(unsigned char, unsigned char)>
c001626e:	83 c4 0c             	add    esp,0xc
c0016271:	6a 00                	push   0x0
c0016273:	6a 02                	push   0x2
c0016275:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c001627b:	e8 94 02 ff ff       	call   c0006514 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016280:	31 d2                	xor    edx,edx
c0016282:	89 f9                	mov    ecx,edi
c0016284:	89 f8                	mov    eax,edi
c0016286:	c1 e9 10             	shr    ecx,0x10
c0016289:	0f b6 c4             	movzx  eax,ah
c001628c:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0016290:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0016294:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016298:	b9 64 00 00 00       	mov    ecx,0x64
c001629d:	89 f0                	mov    eax,esi
c001629f:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00162a3:	89 f0                	mov    eax,esi
c00162a5:	0f b6 c4             	movzx  eax,ah
c00162a8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00162ac:	89 f0                	mov    eax,esi
c00162ae:	c1 e8 10             	shr    eax,0x10
c00162b1:	66 f7 f1             	div    cx
c00162b4:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c00162b9:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c00162be:	59                   	pop    ecx
c00162bf:	5b                   	pop    ebx
c00162c0:	89 fb                	mov    ebx,edi
c00162c2:	6a 0b                	push   0xb
c00162c4:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c00162ca:	e8 33 01 ff ff       	call   c0006402 <Computer::readCMOS(unsigned char)>
c00162cf:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c00162d3:	83 c4 10             	add    esp,0x10
c00162d6:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c00162db:	75 74                	jne    c0016351 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c00162dd:	b2 0a                	mov    dl,0xa
c00162df:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00162e3:	0f b6 c1             	movzx  eax,cl
c00162e6:	f6 f2                	div    dl
c00162e8:	88 c3                	mov    bl,al
c00162ea:	88 e0                	mov    al,ah
c00162ec:	c1 e3 04             	shl    ebx,0x4
c00162ef:	09 c3                	or     ebx,eax
c00162f1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00162f6:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c00162fa:	f6 f2                	div    dl
c00162fc:	88 c1                	mov    cl,al
c00162fe:	88 e0                	mov    al,ah
c0016300:	c1 e1 04             	shl    ecx,0x4
c0016303:	09 c1                	or     ecx,eax
c0016305:	89 f8                	mov    eax,edi
c0016307:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001630b:	0f b6 c0             	movzx  eax,al
c001630e:	f6 f2                	div    dl
c0016310:	88 c3                	mov    bl,al
c0016312:	88 e0                	mov    al,ah
c0016314:	c1 e3 04             	shl    ebx,0x4
c0016317:	09 c3                	or     ebx,eax
c0016319:	89 f0                	mov    eax,esi
c001631b:	0f b6 c0             	movzx  eax,al
c001631e:	f6 f2                	div    dl
c0016320:	88 c1                	mov    cl,al
c0016322:	88 e0                	mov    al,ah
c0016324:	c1 e1 04             	shl    ecx,0x4
c0016327:	09 c1                	or     ecx,eax
c0016329:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001632e:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0016332:	f6 f2                	div    dl
c0016334:	88 c1                	mov    cl,al
c0016336:	88 e0                	mov    al,ah
c0016338:	c1 e1 04             	shl    ecx,0x4
c001633b:	09 c1                	or     ecx,eax
c001633d:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0016342:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0016346:	f6 f2                	div    dl
c0016348:	89 c5                	mov    ebp,eax
c001634a:	88 e0                	mov    al,ah
c001634c:	c1 e5 04             	shl    ebp,0x4
c001634f:	09 c5                	or     ebp,eax
c0016351:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0016356:	75 17                	jne    c001636f <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016358:	80 fb 0b             	cmp    bl,0xb
c001635b:	76 0c                	jbe    c0016369 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c001635d:	80 eb 0c             	sub    bl,0xc
c0016360:	75 02                	jne    c0016364 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0016362:	b3 0c                	mov    bl,0xc
c0016364:	83 cb 80             	or     ebx,0xffffff80
c0016367:	eb 06                	jmp    c001636f <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016369:	84 db                	test   bl,bl
c001636b:	75 02                	jne    c001636f <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c001636d:	b3 0c                	mov    bl,0xc
c001636f:	0f b6 db             	movzx  ebx,bl
c0016372:	50                   	push   eax
c0016373:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0016378:	50                   	push   eax
c0016379:	6a 00                	push   0x0
c001637b:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c0016381:	e8 8e 01 ff ff       	call   c0006514 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016386:	83 c4 0c             	add    esp,0xc
c0016389:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001638e:	50                   	push   eax
c001638f:	6a 02                	push   0x2
c0016391:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c0016397:	e8 78 01 ff ff       	call   c0006514 <Computer::writeCMOS(unsigned char, unsigned char)>
c001639c:	83 c4 0c             	add    esp,0xc
c001639f:	53                   	push   ebx
c00163a0:	6a 04                	push   0x4
c00163a2:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c00163a8:	e8 67 01 ff ff       	call   c0006514 <Computer::writeCMOS(unsigned char, unsigned char)>
c00163ad:	83 c4 0c             	add    esp,0xc
c00163b0:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00163b5:	50                   	push   eax
c00163b6:	6a 07                	push   0x7
c00163b8:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c00163be:	e8 51 01 ff ff       	call   c0006514 <Computer::writeCMOS(unsigned char, unsigned char)>
c00163c3:	83 c4 0c             	add    esp,0xc
c00163c6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00163cb:	50                   	push   eax
c00163cc:	6a 08                	push   0x8
c00163ce:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c00163d4:	e8 3b 01 ff ff       	call   c0006514 <Computer::writeCMOS(unsigned char, unsigned char)>
c00163d9:	83 c4 0c             	add    esp,0xc
c00163dc:	89 e8                	mov    eax,ebp
c00163de:	0f b6 e8             	movzx  ebp,al
c00163e1:	55                   	push   ebp
c00163e2:	6a 09                	push   0x9
c00163e4:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c00163ea:	e8 25 01 ff ff       	call   c0006514 <Computer::writeCMOS(unsigned char, unsigned char)>
c00163ef:	5a                   	pop    edx
c00163f0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00163f4:	e8 9f fb ff ff       	call   c0015f98 <RTC::completeRTCRefresh()>
c00163f9:	83 c4 3c             	add    esp,0x3c
c00163fc:	b0 01                	mov    al,0x1
c00163fe:	5b                   	pop    ebx
c00163ff:	5e                   	pop    esi
c0016400:	5f                   	pop    edi
c0016401:	5d                   	pop    ebp
c0016402:	c3                   	ret    

c0016403 <rtcIRQHandler(regs*, void*)>:
c0016403:	53                   	push   ebx
c0016404:	83 ec 10             	sub    esp,0x10
c0016407:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001640b:	6a 0c                	push   0xc
c001640d:	ff 35 a8 07 02 c0    	push   DWORD PTR ds:0xc00207a8
c0016413:	e8 ea ff fe ff       	call   c0006402 <Computer::readCMOS(unsigned char)>
c0016418:	83 c4 10             	add    esp,0x10
c001641b:	84 c0                	test   al,al
c001641d:	79 24                	jns    c0016443 <rtcIRQHandler(regs*, void*)+0x40>
c001641f:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0016426:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001642d:	66 ff 05 80 3d 02 c0 	inc    WORD PTR ds:0xc0023d80
c0016434:	75 0d                	jne    c0016443 <rtcIRQHandler(regs*, void*)+0x40>
c0016436:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001643a:	83 c4 08             	add    esp,0x8
c001643d:	5b                   	pop    ebx
c001643e:	e9 55 fb ff ff       	jmp    c0015f98 <RTC::completeRTCRefresh()>
c0016443:	83 c4 08             	add    esp,0x8
c0016446:	5b                   	pop    ebx
c0016447:	c3                   	ret    

c0016448 <RTC::RTC()>:
c0016448:	83 ec 1c             	sub    esp,0x1c
c001644b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001644f:	83 ec 08             	sub    esp,0x8
c0016452:	68 a3 f7 01 c0       	push   0xc001f7a3
c0016457:	50                   	push   eax
c0016458:	e8 95 45 ff ff       	call   c000a9f2 <Clock::Clock(char const*)>
c001645d:	83 c4 10             	add    esp,0x10
c0016460:	ba c0 f7 01 c0       	mov    edx,0xc001f7c0
c0016465:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016469:	89 10                	mov    DWORD PTR [eax],edx
c001646b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001646f:	83 ec 0c             	sub    esp,0xc
c0016472:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016476:	6a 01                	push   0x1
c0016478:	68 03 64 01 c0       	push   0xc0016403
c001647d:	6a 08                	push   0x8
c001647f:	50                   	push   eax
c0016480:	e8 51 4a ff ff       	call   c000aed6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0016485:	83 c4 20             	add    esp,0x20
c0016488:	89 c2                	mov    edx,eax
c001648a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001648e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0016494:	fa                   	cli    
c0016495:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c001649a:	40                   	inc    eax
c001649b:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c00164a0:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c00164a5:	83 ec 08             	sub    esp,0x8
c00164a8:	6a 0b                	push   0xb
c00164aa:	50                   	push   eax
c00164ab:	e8 52 ff fe ff       	call   c0006402 <Computer::readCMOS(unsigned char)>
c00164b0:	83 c4 10             	add    esp,0x10
c00164b3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00164b7:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c00164bc:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00164c0:	83 ca 10             	or     edx,0x10
c00164c3:	0f b6 d2             	movzx  edx,dl
c00164c6:	83 ec 04             	sub    esp,0x4
c00164c9:	52                   	push   edx
c00164ca:	6a 0b                	push   0xb
c00164cc:	50                   	push   eax
c00164cd:	e8 42 00 ff ff       	call   c0006514 <Computer::writeCMOS(unsigned char, unsigned char)>
c00164d2:	83 c4 10             	add    esp,0x10
c00164d5:	83 ec 0c             	sub    esp,0xc
c00164d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00164dc:	e8 b7 fa ff ff       	call   c0015f98 <RTC::completeRTCRefresh()>
c00164e1:	83 c4 10             	add    esp,0x10
c00164e4:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c00164e9:	48                   	dec    eax
c00164ea:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c00164ef:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c00164f4:	85 c0                	test   eax,eax
c00164f6:	75 01                	jne    c00164f9 <RTC::RTC()+0xb1>
c00164f8:	fb                   	sti    
c00164f9:	90                   	nop
c00164fa:	83 c4 1c             	add    esp,0x1c
c00164fd:	c3                   	ret    
c00164fe:	66 90                	xchg   ax,ax

c0016500 <Hal::consoleScroll(int, int)>:
c0016500:	83 ec 10             	sub    esp,0x10
c0016503:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001650b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0016513:	90                   	nop
c0016514:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016519:	0f 8f e1 00 00 00    	jg     c0016600 <Hal::consoleScroll(int, int)+0x100>
c001651f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016527:	90                   	nop
c0016528:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0016530:	0f 8f be 00 00 00    	jg     c00165f4 <Hal::consoleScroll(int, int)+0xf4>
c0016536:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001653a:	89 d0                	mov    eax,edx
c001653c:	c1 e0 02             	shl    eax,0x2
c001653f:	01 d0                	add    eax,edx
c0016541:	c1 e0 05             	shl    eax,0x5
c0016544:	89 c2                	mov    edx,eax
c0016546:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001654a:	01 d0                	add    eax,edx
c001654c:	89 c2                	mov    edx,eax
c001654e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016552:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0016555:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016559:	89 d0                	mov    eax,edx
c001655b:	c1 e0 02             	shl    eax,0x2
c001655e:	01 d0                	add    eax,edx
c0016560:	c1 e0 05             	shl    eax,0x5
c0016563:	89 c2                	mov    edx,eax
c0016565:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016569:	01 d0                	add    eax,edx
c001656b:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0016571:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016575:	01 c2                	add    edx,eax
c0016577:	8a 01                	mov    al,BYTE PTR [ecx]
c0016579:	88 02                	mov    BYTE PTR [edx],al
c001657b:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016580:	75 66                	jne    c00165e8 <Hal::consoleScroll(int, int)+0xe8>
c0016582:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016586:	83 e0 01             	and    eax,0x1
c0016589:	74 39                	je     c00165c4 <Hal::consoleScroll(int, int)+0xc4>
c001658b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001658f:	83 e0 0f             	and    eax,0xf
c0016592:	88 c2                	mov    dl,al
c0016594:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016598:	c1 e0 04             	shl    eax,0x4
c001659b:	88 d1                	mov    cl,dl
c001659d:	09 c1                	or     ecx,eax
c001659f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165a3:	89 d0                	mov    eax,edx
c00165a5:	c1 e0 02             	shl    eax,0x2
c00165a8:	01 d0                	add    eax,edx
c00165aa:	c1 e0 05             	shl    eax,0x5
c00165ad:	89 c2                	mov    edx,eax
c00165af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165b3:	01 d0                	add    eax,edx
c00165b5:	89 c2                	mov    edx,eax
c00165b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00165bb:	01 d0                	add    eax,edx
c00165bd:	88 ca                	mov    dl,cl
c00165bf:	88 10                	mov    BYTE PTR [eax],dl
c00165c1:	eb 25                	jmp    c00165e8 <Hal::consoleScroll(int, int)+0xe8>
c00165c3:	90                   	nop
c00165c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165c8:	89 d0                	mov    eax,edx
c00165ca:	c1 e0 02             	shl    eax,0x2
c00165cd:	01 d0                	add    eax,edx
c00165cf:	c1 e0 05             	shl    eax,0x5
c00165d2:	89 c2                	mov    edx,eax
c00165d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165d8:	01 d0                	add    eax,edx
c00165da:	89 c2                	mov    edx,eax
c00165dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00165e0:	01 d0                	add    eax,edx
c00165e2:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00165e5:	8d 76 00             	lea    esi,[esi+0x0]
c00165e8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00165ec:	e9 37 ff ff ff       	jmp    c0016528 <Hal::consoleScroll(int, int)+0x28>
c00165f1:	8d 76 00             	lea    esi,[esi+0x0]
c00165f4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00165f8:	e9 17 ff ff ff       	jmp    c0016514 <Hal::consoleScroll(int, int)+0x14>
c00165fd:	8d 76 00             	lea    esi,[esi+0x0]
c0016600:	90                   	nop
c0016601:	83 c4 10             	add    esp,0x10
c0016604:	c3                   	ret    
c0016605:	8d 76 00             	lea    esi,[esi+0x0]

c0016608 <Hal::consoleWriteCharacter(char, int, int, int, int)>:
c0016608:	83 ec 14             	sub    esp,0x14
c001660b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001660f:	88 04 24             	mov    BYTE PTR [esp],al
c0016612:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016615:	0f b6 c0             	movzx  eax,al
c0016618:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001661c:	89 d1                	mov    ecx,edx
c001661e:	83 e1 0f             	and    ecx,0xf
c0016621:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016625:	c1 e2 04             	shl    edx,0x4
c0016628:	0f b6 d2             	movzx  edx,dl
c001662b:	09 ca                	or     edx,ecx
c001662d:	c1 e2 08             	shl    edx,0x8
c0016630:	09 d0                	or     eax,edx
c0016632:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0016637:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001663f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016643:	89 d0                	mov    eax,edx
c0016645:	c1 e0 02             	shl    eax,0x2
c0016648:	01 d0                	add    eax,edx
c001664a:	c1 e0 04             	shl    eax,0x4
c001664d:	89 c2                	mov    edx,eax
c001664f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016653:	01 d0                	add    eax,edx
c0016655:	01 c0                	add    eax,eax
c0016657:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001665b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001665f:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016664:	66 89 02             	mov    WORD PTR [edx],ax
c0016667:	90                   	nop
c0016668:	83 c4 14             	add    esp,0x14
c001666b:	c3                   	ret    

c001666c <Hal::consoleCursorUpdate(int, int)>:
c001666c:	83 ec 20             	sub    esp,0x20
c001666f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016673:	89 c2                	mov    edx,eax
c0016675:	89 d0                	mov    eax,edx
c0016677:	c1 e0 02             	shl    eax,0x2
c001667a:	01 d0                	add    eax,edx
c001667c:	c1 e0 04             	shl    eax,0x4
c001667f:	89 c2                	mov    edx,eax
c0016681:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016685:	01 d0                	add    eax,edx
c0016687:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001668c:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0016693:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0016698:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001669c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00166a0:	ee                   	out    dx,al
c00166a1:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00166a6:	0f b6 c0             	movzx  eax,al
c00166a9:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00166b0:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00166b4:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00166b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00166bc:	ee                   	out    dx,al
c00166bd:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00166c4:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00166c9:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00166cd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00166d1:	ee                   	out    dx,al
c00166d2:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00166d7:	66 c1 e8 08          	shr    ax,0x8
c00166db:	0f b6 c0             	movzx  eax,al
c00166de:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00166e5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00166e9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00166ed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00166f1:	ee                   	out    dx,al
c00166f2:	90                   	nop
c00166f3:	83 c4 20             	add    esp,0x20
c00166f6:	c3                   	ret    
c00166f7:	90                   	nop

c00166f8 <FAT::getName()>:
c00166f8:	b8 f4 f7 01 c0       	mov    eax,0xc001f7f4
c00166fd:	c3                   	ret    
c00166fe:	66 90                	xchg   ax,ax

c0016700 <FAT::tell(void*, unsigned long long*)>:
c0016700:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016705:	75 09                	jne    c0016710 <FAT::tell(void*, unsigned long long*)+0x10>
c0016707:	b8 04 00 00 00       	mov    eax,0x4
c001670c:	c3                   	ret    
c001670d:	8d 76 00             	lea    esi,[esi+0x0]
c0016710:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016715:	75 09                	jne    c0016720 <FAT::tell(void*, unsigned long long*)+0x20>
c0016717:	b8 04 00 00 00       	mov    eax,0x4
c001671c:	c3                   	ret    
c001671d:	8d 76 00             	lea    esi,[esi+0x0]
c0016720:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016724:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0016727:	ba 00 00 00 00       	mov    edx,0x0
c001672c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016730:	89 01                	mov    DWORD PTR [ecx],eax
c0016732:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016735:	b8 00 00 00 00       	mov    eax,0x0
c001673a:	c3                   	ret    
c001673b:	90                   	nop

c001673c <FAT::stat(void*, unsigned long long*)>:
c001673c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016741:	75 09                	jne    c001674c <FAT::stat(void*, unsigned long long*)+0x10>
c0016743:	b8 04 00 00 00       	mov    eax,0x4
c0016748:	c3                   	ret    
c0016749:	8d 76 00             	lea    esi,[esi+0x0]
c001674c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016751:	75 09                	jne    c001675c <FAT::stat(void*, unsigned long long*)+0x20>
c0016753:	b8 04 00 00 00       	mov    eax,0x4
c0016758:	c3                   	ret    
c0016759:	8d 76 00             	lea    esi,[esi+0x0]
c001675c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016760:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0016763:	ba 00 00 00 00       	mov    edx,0x0
c0016768:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001676c:	89 01                	mov    DWORD PTR [ecx],eax
c001676e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016771:	b8 00 00 00 00       	mov    eax,0x0
c0016776:	c3                   	ret    
c0016777:	90                   	nop

c0016778 <FAT::~FAT()>:
c0016778:	83 ec 0c             	sub    esp,0xc
c001677b:	ba 40 f8 01 c0       	mov    edx,0xc001f840
c0016780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016784:	89 10                	mov    DWORD PTR [eax],edx
c0016786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001678a:	83 ec 0c             	sub    esp,0xc
c001678d:	50                   	push   eax
c001678e:	e8 af 36 ff ff       	call   c0009e42 <Filesystem::~Filesystem()>
c0016793:	83 c4 10             	add    esp,0x10
c0016796:	90                   	nop
c0016797:	83 c4 0c             	add    esp,0xc
c001679a:	c3                   	ret    
c001679b:	90                   	nop

c001679c <FAT::~FAT()>:
c001679c:	83 ec 0c             	sub    esp,0xc
c001679f:	83 ec 0c             	sub    esp,0xc
c00167a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167a6:	e8 cd ff ff ff       	call   c0016778 <FAT::~FAT()>
c00167ab:	83 c4 10             	add    esp,0x10
c00167ae:	83 ec 08             	sub    esp,0x8
c00167b1:	6a 08                	push   0x8
c00167b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167b7:	e8 6a 32 ff ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c00167bc:	83 c4 10             	add    esp,0x10
c00167bf:	83 c4 0c             	add    esp,0xc
c00167c2:	c3                   	ret    
c00167c3:	90                   	nop

c00167c4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00167c4:	83 ec 1c             	sub    esp,0x1c
c00167c7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00167ce:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00167d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00167d7:	8b 04 85 c0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc240]
c00167de:	83 f8 ff             	cmp    eax,0xffffffff
c00167e1:	75 35                	jne    c0016818 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00167e3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00167e7:	88 c2                	mov    dl,al
c00167e9:	a1 a0 3d 02 c0       	mov    eax,ds:0xc0023da0
c00167ee:	01 d0                	add    eax,edx
c00167f0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00167f4:	8b 15 a0 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023da0
c00167fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00167fe:	89 14 85 c0 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc240],edx
c0016805:	a1 a0 3d 02 c0       	mov    eax,ds:0xc0023da0
c001680a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001680e:	89 14 85 40 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc1c0],edx
c0016815:	eb 19                	jmp    c0016830 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0016817:	90                   	nop
c0016818:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001681c:	88 c2                	mov    dl,al
c001681e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016822:	8b 04 85 c0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc240]
c0016829:	01 d0                	add    eax,edx
c001682b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001682f:	90                   	nop
c0016830:	83 ec 04             	sub    esp,0x4
c0016833:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016837:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001683b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001683f:	50                   	push   eax
c0016840:	e8 0a e4 fe ff       	call   c0004c4f <f_getlabel>
c0016845:	83 c4 10             	add    esp,0x10
c0016848:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001684c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016851:	75 09                	jne    c001685c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0016853:	b8 00 00 00 00       	mov    eax,0x0
c0016858:	eb 0a                	jmp    c0016864 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001685a:	66 90                	xchg   ax,ax
c001685c:	b8 01 00 00 00       	mov    eax,0x1
c0016861:	8d 76 00             	lea    esi,[esi+0x0]
c0016864:	83 c4 1c             	add    esp,0x1c
c0016867:	c3                   	ret    

c0016868 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0016868:	57                   	push   edi
c0016869:	83 ec 58             	sub    esp,0x58
c001686c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0016874:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016878:	b9 0f 00 00 00       	mov    ecx,0xf
c001687d:	b8 00 00 00 00       	mov    eax,0x0
c0016882:	fc                   	cld    
c0016883:	89 d7                	mov    edi,edx
c0016885:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0016887:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001688b:	8b 04 85 c0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc240]
c0016892:	83 f8 ff             	cmp    eax,0xffffffff
c0016895:	75 35                	jne    c00168cc <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0016897:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001689b:	88 c2                	mov    dl,al
c001689d:	a1 a0 3d 02 c0       	mov    eax,ds:0xc0023da0
c00168a2:	01 d0                	add    eax,edx
c00168a4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00168a8:	8b 15 a0 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023da0
c00168ae:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00168b2:	89 14 85 c0 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc240],edx
c00168b9:	a1 a0 3d 02 c0       	mov    eax,ds:0xc0023da0
c00168be:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00168c2:	89 14 85 40 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc1c0],edx
c00168c9:	eb 19                	jmp    c00168e4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00168cb:	90                   	nop
c00168cc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00168d0:	88 c2                	mov    dl,al
c00168d2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00168d6:	8b 04 85 c0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc240]
c00168dd:	01 d0                	add    eax,edx
c00168df:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00168e3:	90                   	nop
c00168e4:	83 ec 08             	sub    esp,0x8
c00168e7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00168eb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00168ef:	50                   	push   eax
c00168f0:	e8 af 9d fe ff       	call   c00006a4 <strcat>
c00168f5:	83 c4 10             	add    esp,0x10
c00168f8:	83 ec 0c             	sub    esp,0xc
c00168fb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00168ff:	50                   	push   eax
c0016900:	e8 9b e4 fe ff       	call   c0004da0 <f_setlabel>
c0016905:	83 c4 10             	add    esp,0x10
c0016908:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001690c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0016911:	75 09                	jne    c001691c <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0016913:	b8 00 00 00 00       	mov    eax,0x0
c0016918:	eb 0a                	jmp    c0016924 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001691a:	66 90                	xchg   ax,ax
c001691c:	b8 01 00 00 00       	mov    eax,0x1
c0016921:	8d 76 00             	lea    esi,[esi+0x0]
c0016924:	83 c4 58             	add    esp,0x58
c0016927:	5f                   	pop    edi
c0016928:	c3                   	ret    
c0016929:	90                   	nop
c001692a:	66 90                	xchg   ax,ax

c001692c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001692c:	83 ec 2c             	sub    esp,0x2c
c001692f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016937:	83 ec 08             	sub    esp,0x8
c001693a:	68 18 f8 01 c0       	push   0xc001f818
c001693f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016943:	e8 a8 9c fe ff       	call   c00005f0 <strcmp>
c0016948:	83 c4 10             	add    esp,0x10
c001694b:	85 c0                	test   eax,eax
c001694d:	0f 94 c0             	sete   al
c0016950:	84 c0                	test   al,al
c0016952:	74 10                	je     c0016964 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0016954:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001695c:	e9 b3 00 00 00       	jmp    c0016a14 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016961:	8d 76 00             	lea    esi,[esi+0x0]
c0016964:	83 ec 08             	sub    esp,0x8
c0016967:	68 0a f8 01 c0       	push   0xc001f80a
c001696c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016970:	e8 7b 9c fe ff       	call   c00005f0 <strcmp>
c0016975:	83 c4 10             	add    esp,0x10
c0016978:	85 c0                	test   eax,eax
c001697a:	0f 94 c0             	sete   al
c001697d:	84 c0                	test   al,al
c001697f:	74 0f                	je     c0016990 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0016981:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016989:	e9 86 00 00 00       	jmp    c0016a14 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001698e:	66 90                	xchg   ax,ax
c0016990:	83 ec 08             	sub    esp,0x8
c0016993:	68 10 f8 01 c0       	push   0xc001f810
c0016998:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001699c:	e8 4f 9c fe ff       	call   c00005f0 <strcmp>
c00169a1:	83 c4 10             	add    esp,0x10
c00169a4:	85 c0                	test   eax,eax
c00169a6:	0f 94 c0             	sete   al
c00169a9:	84 c0                	test   al,al
c00169ab:	74 0b                	je     c00169b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c00169ad:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00169b5:	eb 5d                	jmp    c0016a14 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00169b7:	90                   	nop
c00169b8:	83 ec 08             	sub    esp,0x8
c00169bb:	68 fc d6 01 c0       	push   0xc001d6fc
c00169c0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00169c4:	e8 27 9c fe ff       	call   c00005f0 <strcmp>
c00169c9:	83 c4 10             	add    esp,0x10
c00169cc:	85 c0                	test   eax,eax
c00169ce:	0f 94 c0             	sete   al
c00169d1:	84 c0                	test   al,al
c00169d3:	74 0b                	je     c00169e0 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c00169d5:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00169dd:	eb 35                	jmp    c0016a14 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00169df:	90                   	nop
c00169e0:	83 ec 08             	sub    esp,0x8
c00169e3:	68 16 f8 01 c0       	push   0xc001f816
c00169e8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00169ec:	e8 ff 9b fe ff       	call   c00005f0 <strcmp>
c00169f1:	83 c4 10             	add    esp,0x10
c00169f4:	85 c0                	test   eax,eax
c00169f6:	0f 94 c0             	sete   al
c00169f9:	84 c0                	test   al,al
c00169fb:	74 0b                	je     c0016a08 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c00169fd:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0016a05:	eb 0d                	jmp    c0016a14 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016a07:	90                   	nop
c0016a08:	b8 08 00 00 00       	mov    eax,0x8
c0016a0d:	e9 ea 00 00 00       	jmp    c0016afc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016a12:	66 90                	xchg   ax,ax
c0016a14:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0016a1b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016a20:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016a24:	8b 04 85 c0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc240]
c0016a2b:	83 f8 ff             	cmp    eax,0xffffffff
c0016a2e:	75 34                	jne    c0016a64 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0016a30:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016a34:	88 c2                	mov    dl,al
c0016a36:	a1 a0 3d 02 c0       	mov    eax,ds:0xc0023da0
c0016a3b:	01 d0                	add    eax,edx
c0016a3d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016a41:	8b 15 a0 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023da0
c0016a47:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016a4b:	89 14 85 c0 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc240],edx
c0016a52:	a1 a0 3d 02 c0       	mov    eax,ds:0xc0023da0
c0016a57:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016a5b:	89 14 85 40 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc1c0],edx
c0016a62:	eb 18                	jmp    c0016a7c <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0016a64:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016a68:	88 c2                	mov    dl,al
c0016a6a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016a6e:	8b 04 85 c0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc240]
c0016a75:	01 d0                	add    eax,edx
c0016a77:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016a7b:	90                   	nop
c0016a7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a80:	88 04 24             	mov    BYTE PTR [esp],al
c0016a83:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016a87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a8b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016a93:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016a98:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016aa0:	83 ec 0c             	sub    esp,0xc
c0016aa3:	68 00 20 00 00       	push   0x2000
c0016aa8:	e8 d0 02 ff ff       	call   c0006d7d <malloc>
c0016aad:	83 c4 10             	add    esp,0x10
c0016ab0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016ab4:	68 00 20 00 00       	push   0x2000
c0016ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016abd:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016ac1:	50                   	push   eax
c0016ac2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0016ac6:	50                   	push   eax
c0016ac7:	e8 52 e7 fe ff       	call   c000521e <f_mkfs>
c0016acc:	83 c4 10             	add    esp,0x10
c0016acf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ad3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016ad8:	75 0a                	jne    c0016ae4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c0016ada:	b8 00 00 00 00       	mov    eax,0x0
c0016adf:	eb 1b                	jmp    c0016afc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016ae1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ae4:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0016ae9:	75 09                	jne    c0016af4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0016aeb:	b8 09 00 00 00       	mov    eax,0x9
c0016af0:	eb 0a                	jmp    c0016afc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016af2:	66 90                	xchg   ax,ax
c0016af4:	b8 01 00 00 00       	mov    eax,0x1
c0016af9:	8d 76 00             	lea    esi,[esi+0x0]
c0016afc:	83 c4 2c             	add    esp,0x2c
c0016aff:	c3                   	ret    

c0016b00 <FAT::tryMount(LogicalDisk*, int)>:
c0016b00:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0016b06:	a1 a0 3d 02 c0       	mov    eax,ds:0xc0023da0
c0016b0b:	83 f8 14             	cmp    eax,0x14
c0016b0e:	75 18                	jne    c0016b28 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0016b10:	83 ec 0c             	sub    esp,0xc
c0016b13:	68 1c f8 01 c0       	push   0xc001f81c
c0016b18:	e8 c0 8c ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0016b1d:	83 c4 10             	add    esp,0x10
c0016b20:	b0 00                	mov    al,0x0
c0016b22:	e9 e9 01 00 00       	jmp    c0016d10 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016b27:	90                   	nop
c0016b28:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0016b2f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016b35:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016b3b:	3d 00 02 00 00       	cmp    eax,0x200
c0016b40:	74 0a                	je     c0016b4c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0016b42:	b0 00                	mov    al,0x0
c0016b44:	e9 c7 01 00 00       	jmp    c0016d10 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016b49:	8d 76 00             	lea    esi,[esi+0x0]
c0016b4c:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0016b54:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016b5b:	8b 04 85 c0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc240]
c0016b62:	83 f8 ff             	cmp    eax,0xffffffff
c0016b65:	74 09                	je     c0016b70 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0016b67:	b0 01                	mov    al,0x1
c0016b69:	e9 a2 01 00 00       	jmp    c0016d10 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016b6e:	66 90                	xchg   ax,ax
c0016b70:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0016b7a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0016b82:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016b89:	88 c2                	mov    dl,al
c0016b8b:	a1 a0 3d 02 c0       	mov    eax,ds:0xc0023da0
c0016b90:	01 d0                	add    eax,edx
c0016b92:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016b99:	8b 15 a0 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023da0
c0016b9f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016ba6:	89 14 85 c0 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc240],edx
c0016bad:	a1 a0 3d 02 c0       	mov    eax,ds:0xc0023da0
c0016bb2:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016bb9:	89 14 85 40 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc1c0],edx
c0016bc0:	83 ec 0c             	sub    esp,0xc
c0016bc3:	68 34 02 00 00       	push   0x234
c0016bc8:	e8 b0 01 ff ff       	call   c0006d7d <malloc>
c0016bcd:	83 c4 10             	add    esp,0x10
c0016bd0:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0016bd7:	83 ec 04             	sub    esp,0x4
c0016bda:	6a 00                	push   0x0
c0016bdc:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016be3:	50                   	push   eax
c0016be4:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016beb:	e8 5e cb fe ff       	call   c000374e <f_mount>
c0016bf0:	83 c4 10             	add    esp,0x10
c0016bf3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016bfa:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0016c02:	74 1c                	je     c0016c20 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016c04:	83 ec 0c             	sub    esp,0xc
c0016c07:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016c0e:	e8 8a 01 ff ff       	call   c0006d9d <rfree>
c0016c13:	83 c4 10             	add    esp,0x10
c0016c16:	b0 00                	mov    al,0x0
c0016c18:	e9 f3 00 00 00       	jmp    c0016d10 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0016c20:	83 ec 04             	sub    esp,0x4
c0016c23:	68 00 01 00 00       	push   0x100
c0016c28:	6a 00                	push   0x0
c0016c2a:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016c31:	50                   	push   eax
c0016c32:	e8 71 98 fe ff       	call   c00004a8 <memset>
c0016c37:	83 c4 10             	add    esp,0x10
c0016c3a:	83 ec 08             	sub    esp,0x8
c0016c3d:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016c44:	50                   	push   eax
c0016c45:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016c4c:	50                   	push   eax
c0016c4d:	e8 52 9a fe ff       	call   c00006a4 <strcat>
c0016c52:	83 c4 10             	add    esp,0x10
c0016c55:	83 ec 08             	sub    esp,0x8
c0016c58:	68 2a f8 01 c0       	push   0xc001f82a
c0016c5d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016c64:	50                   	push   eax
c0016c65:	e8 3a 9a fe ff       	call   c00006a4 <strcat>
c0016c6a:	83 c4 10             	add    esp,0x10
c0016c6d:	83 ec 04             	sub    esp,0x4
c0016c70:	6a 01                	push   0x1
c0016c72:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016c79:	50                   	push   eax
c0016c7a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016c7e:	50                   	push   eax
c0016c7f:	e8 2c cb fe ff       	call   c00037b0 <f_open>
c0016c84:	83 c4 10             	add    esp,0x10
c0016c87:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016c8e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016c95:	85 c0                	test   eax,eax
c0016c97:	74 0b                	je     c0016ca4 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016c99:	78 31                	js     c0016ccc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016c9b:	83 e8 04             	sub    eax,0x4
c0016c9e:	83 f8 01             	cmp    eax,0x1
c0016ca1:	77 29                	ja     c0016ccc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016ca3:	90                   	nop
c0016ca4:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016cac:	83 ec 0c             	sub    esp,0xc
c0016caf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016cb3:	50                   	push   eax
c0016cb4:	e8 cf d2 fe ff       	call   c0003f88 <f_close>
c0016cb9:	83 c4 10             	add    esp,0x10
c0016cbc:	90                   	nop
c0016cbd:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016cc5:	74 41                	je     c0016d08 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016cc7:	eb 33                	jmp    c0016cfc <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0016ccc:	83 ec 0c             	sub    esp,0xc
c0016ccf:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016cd6:	e8 c2 00 ff ff       	call   c0006d9d <rfree>
c0016cdb:	83 c4 10             	add    esp,0x10
c0016cde:	83 ec 04             	sub    esp,0x4
c0016ce1:	6a 00                	push   0x0
c0016ce3:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016cea:	50                   	push   eax
c0016ceb:	6a 00                	push   0x0
c0016ced:	e8 5c ca fe ff       	call   c000374e <f_mount>
c0016cf2:	83 c4 10             	add    esp,0x10
c0016cf5:	b0 00                	mov    al,0x0
c0016cf7:	eb 17                	jmp    c0016d10 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016cf9:	8d 76 00             	lea    esi,[esi+0x0]
c0016cfc:	a1 a0 3d 02 c0       	mov    eax,ds:0xc0023da0
c0016d01:	40                   	inc    eax
c0016d02:	a3 a0 3d 02 c0       	mov    ds:0xc0023da0,eax
c0016d07:	90                   	nop
c0016d08:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016d0f:	90                   	nop
c0016d10:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016d16:	c3                   	ret    
c0016d17:	90                   	nop

c0016d18 <FAT::allocateSwapfile(char const*, int)>:
c0016d18:	55                   	push   ebp
c0016d19:	57                   	push   edi
c0016d1a:	56                   	push   esi
c0016d1b:	53                   	push   ebx
c0016d1c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016d22:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016d2d:	83 ec 0c             	sub    esp,0xc
c0016d30:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016d37:	e8 41 00 ff ff       	call   c0006d7d <malloc>
c0016d3c:	83 c4 10             	add    esp,0x10
c0016d3f:	89 c7                	mov    edi,eax
c0016d41:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c0016d46:	83 ec 04             	sub    esp,0x4
c0016d49:	50                   	push   eax
c0016d4a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016d51:	57                   	push   edi
c0016d52:	e8 1b 33 ff ff       	call   c000a072 <File::File(char const*, Process*)>
c0016d57:	83 c4 10             	add    esp,0x10
c0016d5a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016d61:	83 ec 04             	sub    esp,0x4
c0016d64:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016d68:	50                   	push   eax
c0016d69:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d6d:	50                   	push   eax
c0016d6e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016d75:	e8 5e 36 ff ff       	call   c000a3d8 <File::stat(unsigned long long*, bool*)>
c0016d7a:	83 c4 10             	add    esp,0x10
c0016d7d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016d84:	c1 e0 14             	shl    eax,0x14
c0016d87:	89 c7                	mov    edi,eax
c0016d89:	89 c5                	mov    ebp,eax
c0016d8b:	c1 fd 1f             	sar    ebp,0x1f
c0016d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016d96:	89 f9                	mov    ecx,edi
c0016d98:	31 c1                	xor    ecx,eax
c0016d9a:	89 cb                	mov    ebx,ecx
c0016d9c:	89 e9                	mov    ecx,ebp
c0016d9e:	31 d1                	xor    ecx,edx
c0016da0:	89 ce                	mov    esi,ecx
c0016da2:	89 f0                	mov    eax,esi
c0016da4:	09 d8                	or     eax,ebx
c0016da6:	0f 84 9c 00 00 00    	je     c0016e48 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016dac:	83 ec 0c             	sub    esp,0xc
c0016daf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016db6:	e8 e9 34 ff ff       	call   c000a2a4 <File::unlink()>
c0016dbb:	83 c4 10             	add    esp,0x10
c0016dbe:	83 ec 08             	sub    esp,0x8
c0016dc1:	6a 12                	push   0x12
c0016dc3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016dca:	e8 5d 33 ff ff       	call   c000a12c <File::open(FileOpenMode)>
c0016dcf:	83 c4 10             	add    esp,0x10
c0016dd2:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016dd9:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016ddf:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016de6:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016ded:	c1 e0 14             	shl    eax,0x14
c0016df0:	83 ec 04             	sub    esp,0x4
c0016df3:	6a 01                	push   0x1
c0016df5:	50                   	push   eax
c0016df6:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016dfd:	e8 2e e1 fe ff       	call   c0004f30 <f_expand>
c0016e02:	83 c4 10             	add    esp,0x10
c0016e05:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016e0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0016e0e:	83 c0 10             	add    eax,0x10
c0016e11:	8b 00                	mov    eax,DWORD PTR [eax]
c0016e13:	83 ec 0c             	sub    esp,0xc
c0016e16:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016e1a:	52                   	push   edx
c0016e1b:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016e1f:	52                   	push   edx
c0016e20:	6a 00                	push   0x0
c0016e22:	68 00 04 00 00       	push   0x400
c0016e27:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016e2e:	ff d0                	call   eax
c0016e30:	83 c4 20             	add    esp,0x20
c0016e33:	83 ec 0c             	sub    esp,0xc
c0016e36:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016e3d:	e8 48 33 ff ff       	call   c000a18a <File::close()>
c0016e42:	83 c4 10             	add    esp,0x10
c0016e45:	8d 76 00             	lea    esi,[esi+0x0]
c0016e48:	83 ec 08             	sub    esp,0x8
c0016e4b:	6a 01                	push   0x1
c0016e4d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016e54:	e8 d3 32 ff ff       	call   c000a12c <File::open(FileOpenMode)>
c0016e59:	83 c4 10             	add    esp,0x10
c0016e5c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016e63:	8b 00                	mov    eax,DWORD PTR [eax]
c0016e65:	83 c0 0c             	add    eax,0xc
c0016e68:	8b 00                	mov    eax,DWORD PTR [eax]
c0016e6a:	83 ec 0c             	sub    esp,0xc
c0016e6d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016e71:	52                   	push   edx
c0016e72:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016e76:	52                   	push   edx
c0016e77:	6a 00                	push   0x0
c0016e79:	6a 04                	push   0x4
c0016e7b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016e82:	ff d0                	call   eax
c0016e84:	83 c4 20             	add    esp,0x20
c0016e87:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016e8e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016e94:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016e9b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016ea2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016ea5:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016eac:	83 ec 0c             	sub    esp,0xc
c0016eaf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016eb6:	e8 cf 32 ff ff       	call   c000a18a <File::close()>
c0016ebb:	83 c4 10             	add    esp,0x10
c0016ebe:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016ec5:	ba 00 00 00 00       	mov    edx,0x0
c0016eca:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016ed0:	5b                   	pop    ebx
c0016ed1:	5e                   	pop    esi
c0016ed2:	5f                   	pop    edi
c0016ed3:	5d                   	pop    ebp
c0016ed4:	c3                   	ret    
c0016ed5:	90                   	nop
c0016ed6:	66 90                	xchg   ax,ax

c0016ed8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016ed8:	57                   	push   edi
c0016ed9:	56                   	push   esi
c0016eda:	53                   	push   ebx
c0016edb:	81 ec 50 02 00 00    	sub    esp,0x250
c0016ee1:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016ee9:	74 0d                	je     c0016ef8 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016eeb:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016ef3:	75 0f                	jne    c0016f04 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ef8:	b8 04 00 00 00       	mov    eax,0x4
c0016efd:	e9 36 01 00 00       	jmp    c0017038 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016f02:	66 90                	xchg   ax,ax
c0016f04:	83 ec 08             	sub    esp,0x8
c0016f07:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016f0e:	50                   	push   eax
c0016f0f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016f16:	e8 73 d4 fe ff       	call   c000438e <f_readdir>
c0016f1b:	83 c4 10             	add    esp,0x10
c0016f1e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016f25:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016f2c:	83 ec 0c             	sub    esp,0xc
c0016f2f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016f36:	83 c0 16             	add    eax,0x16
c0016f39:	50                   	push   eax
c0016f3a:	e8 85 95 fe ff       	call   c00004c4 <strlen>
c0016f3f:	83 c4 10             	add    esp,0x10
c0016f42:	ba 00 00 00 00       	mov    edx,0x0
c0016f47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f4b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016f4f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016f56:	0f b6 c0             	movzx  eax,al
c0016f59:	83 e0 10             	and    eax,0x10
c0016f5c:	74 0a                	je     c0016f68 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016f5e:	b8 02 00 00 00       	mov    eax,0x2
c0016f63:	eb 0b                	jmp    c0016f70 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016f65:	8d 76 00             	lea    esi,[esi+0x0]
c0016f68:	b8 01 00 00 00       	mov    eax,0x1
c0016f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f70:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016f74:	83 ec 08             	sub    esp,0x8
c0016f77:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016f7e:	83 c0 16             	add    eax,0x16
c0016f81:	50                   	push   eax
c0016f82:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016f86:	83 c0 10             	add    eax,0x10
c0016f89:	50                   	push   eax
c0016f8a:	e8 d5 95 fe ff       	call   c0000564 <strcpy>
c0016f8f:	83 c4 10             	add    esp,0x10
c0016f92:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016f99:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016fa0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016fa4:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016fab:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016fb2:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016fb9:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016fc0:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016fc7:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016fce:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016fd5:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016fdc:	89 c6                	mov    esi,eax
c0016fde:	89 d7                	mov    edi,edx
c0016fe0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016fe2:	89 c8                	mov    eax,ecx
c0016fe4:	89 fa                	mov    edx,edi
c0016fe6:	89 f3                	mov    ebx,esi
c0016fe8:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016fef:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016ff6:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016ffd:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0017004:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001700a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0017011:	84 c0                	test   al,al
c0017013:	75 07                	jne    c001701c <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0017015:	b8 07 00 00 00       	mov    eax,0x7
c001701a:	eb 1c                	jmp    c0017038 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001701c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0017023:	85 c0                	test   eax,eax
c0017025:	75 09                	jne    c0017030 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0017027:	b8 00 00 00 00       	mov    eax,0x0
c001702c:	eb 0a                	jmp    c0017038 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001702e:	66 90                	xchg   ax,ax
c0017030:	b8 01 00 00 00       	mov    eax,0x1
c0017035:	8d 76 00             	lea    esi,[esi+0x0]
c0017038:	81 c4 50 02 00 00    	add    esp,0x250
c001703e:	5b                   	pop    ebx
c001703f:	5e                   	pop    esi
c0017040:	5f                   	pop    edi
c0017041:	c3                   	ret    
c0017042:	66 90                	xchg   ax,ax

c0017044 <FAT::read(void*, unsigned long, void*, int*)>:
c0017044:	83 ec 1c             	sub    esp,0x1c
c0017047:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001704c:	74 0a                	je     c0017058 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001704e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0017053:	75 0b                	jne    c0017060 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0017055:	8d 76 00             	lea    esi,[esi+0x0]
c0017058:	b8 04 00 00 00       	mov    eax,0x4
c001705d:	eb 41                	jmp    c00170a0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001705f:	90                   	nop
c0017060:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017064:	50                   	push   eax
c0017065:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017069:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001706d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017071:	e8 0c ca fe ff       	call   c0003a82 <f_read>
c0017076:	83 c4 10             	add    esp,0x10
c0017079:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001707d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017081:	89 c2                	mov    edx,eax
c0017083:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017087:	89 10                	mov    DWORD PTR [eax],edx
c0017089:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001708d:	85 c0                	test   eax,eax
c001708f:	75 07                	jne    c0017098 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0017091:	b8 00 00 00 00       	mov    eax,0x0
c0017096:	eb 08                	jmp    c00170a0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0017098:	b8 01 00 00 00       	mov    eax,0x1
c001709d:	8d 76 00             	lea    esi,[esi+0x0]
c00170a0:	83 c4 1c             	add    esp,0x1c
c00170a3:	c3                   	ret    

c00170a4 <FAT::write(void*, unsigned long, void*, int*)>:
c00170a4:	83 ec 1c             	sub    esp,0x1c
c00170a7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00170ac:	74 0a                	je     c00170b8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00170ae:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00170b3:	75 0b                	jne    c00170c0 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00170b5:	8d 76 00             	lea    esi,[esi+0x0]
c00170b8:	b8 04 00 00 00       	mov    eax,0x4
c00170bd:	eb 41                	jmp    c0017100 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00170bf:	90                   	nop
c00170c0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00170c4:	50                   	push   eax
c00170c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00170c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00170cd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170d1:	e8 ba cb fe ff       	call   c0003c90 <f_write>
c00170d6:	83 c4 10             	add    esp,0x10
c00170d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00170dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00170e1:	89 c2                	mov    edx,eax
c00170e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00170e7:	89 10                	mov    DWORD PTR [eax],edx
c00170e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170ed:	85 c0                	test   eax,eax
c00170ef:	75 07                	jne    c00170f8 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00170f1:	b8 00 00 00 00       	mov    eax,0x0
c00170f6:	eb 08                	jmp    c0017100 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00170f8:	b8 01 00 00 00       	mov    eax,0x1
c00170fd:	8d 76 00             	lea    esi,[esi+0x0]
c0017100:	83 c4 1c             	add    esp,0x1c
c0017103:	c3                   	ret    

c0017104 <FAT::close(void*)>:
c0017104:	83 ec 1c             	sub    esp,0x1c
c0017107:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001710c:	75 0a                	jne    c0017118 <FAT::close(void*)+0x14>
c001710e:	b8 04 00 00 00       	mov    eax,0x4
c0017113:	eb 3f                	jmp    c0017154 <FAT::close(void*)+0x50>
c0017115:	8d 76 00             	lea    esi,[esi+0x0]
c0017118:	83 ec 0c             	sub    esp,0xc
c001711b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001711f:	e8 64 ce fe ff       	call   c0003f88 <f_close>
c0017124:	83 c4 10             	add    esp,0x10
c0017127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001712b:	83 ec 0c             	sub    esp,0xc
c001712e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017132:	e8 56 fc fe ff       	call   c0006d8d <free>
c0017137:	83 c4 10             	add    esp,0x10
c001713a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001713e:	85 c0                	test   eax,eax
c0017140:	75 0a                	jne    c001714c <FAT::close(void*)+0x48>
c0017142:	b8 00 00 00 00       	mov    eax,0x0
c0017147:	eb 0b                	jmp    c0017154 <FAT::close(void*)+0x50>
c0017149:	8d 76 00             	lea    esi,[esi+0x0]
c001714c:	b8 01 00 00 00       	mov    eax,0x1
c0017151:	8d 76 00             	lea    esi,[esi+0x0]
c0017154:	83 c4 1c             	add    esp,0x1c
c0017157:	c3                   	ret    

c0017158 <FAT::closeDir(void*)>:
c0017158:	83 ec 1c             	sub    esp,0x1c
c001715b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017160:	75 0a                	jne    c001716c <FAT::closeDir(void*)+0x14>
c0017162:	b8 04 00 00 00       	mov    eax,0x4
c0017167:	eb 3f                	jmp    c00171a8 <FAT::closeDir(void*)+0x50>
c0017169:	8d 76 00             	lea    esi,[esi+0x0]
c001716c:	83 ec 0c             	sub    esp,0xc
c001716f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017173:	e8 f4 d1 fe ff       	call   c000436c <f_closedir>
c0017178:	83 c4 10             	add    esp,0x10
c001717b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001717f:	83 ec 0c             	sub    esp,0xc
c0017182:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017186:	e8 02 fc fe ff       	call   c0006d8d <free>
c001718b:	83 c4 10             	add    esp,0x10
c001718e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017192:	85 c0                	test   eax,eax
c0017194:	75 0a                	jne    c00171a0 <FAT::closeDir(void*)+0x48>
c0017196:	b8 00 00 00 00       	mov    eax,0x0
c001719b:	eb 0b                	jmp    c00171a8 <FAT::closeDir(void*)+0x50>
c001719d:	8d 76 00             	lea    esi,[esi+0x0]
c00171a0:	b8 01 00 00 00       	mov    eax,0x1
c00171a5:	8d 76 00             	lea    esi,[esi+0x0]
c00171a8:	83 c4 1c             	add    esp,0x1c
c00171ab:	c3                   	ret    

c00171ac <FAT::seek(void*, unsigned long long)>:
c00171ac:	83 ec 2c             	sub    esp,0x2c
c00171af:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00171b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00171b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00171bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171bf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00171c4:	75 0a                	jne    c00171d0 <FAT::seek(void*, unsigned long long)+0x24>
c00171c6:	b8 04 00 00 00       	mov    eax,0x4
c00171cb:	eb 33                	jmp    c0017200 <FAT::seek(void*, unsigned long long)+0x54>
c00171cd:	8d 76 00             	lea    esi,[esi+0x0]
c00171d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171d4:	83 ec 08             	sub    esp,0x8
c00171d7:	50                   	push   eax
c00171d8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00171dc:	e8 d6 cd fe ff       	call   c0003fb7 <f_lseek>
c00171e1:	83 c4 10             	add    esp,0x10
c00171e4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00171e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00171ec:	85 c0                	test   eax,eax
c00171ee:	75 08                	jne    c00171f8 <FAT::seek(void*, unsigned long long)+0x4c>
c00171f0:	b8 00 00 00 00       	mov    eax,0x0
c00171f5:	eb 09                	jmp    c0017200 <FAT::seek(void*, unsigned long long)+0x54>
c00171f7:	90                   	nop
c00171f8:	b8 01 00 00 00       	mov    eax,0x1
c00171fd:	8d 76 00             	lea    esi,[esi+0x0]
c0017200:	83 c4 2c             	add    esp,0x2c
c0017203:	c3                   	ret    

c0017204 <fatWrapperReadDisk>:
c0017204:	53                   	push   ebx
c0017205:	83 ec 18             	sub    esp,0x18
c0017208:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001720c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017210:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017215:	8b 0c 85 20 2d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd2e0]
c001721c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017220:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017224:	ba 00 00 00 00       	mov    edx,0x0
c0017229:	83 ec 0c             	sub    esp,0xc
c001722c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017230:	53                   	push   ebx
c0017231:	52                   	push   edx
c0017232:	50                   	push   eax
c0017233:	51                   	push   ecx
c0017234:	e8 71 4f ff ff       	call   c000c1aa <LogicalDisk::read(unsigned long long, int, void*)>
c0017239:	83 c4 20             	add    esp,0x20
c001723c:	83 c4 18             	add    esp,0x18
c001723f:	5b                   	pop    ebx
c0017240:	c3                   	ret    
c0017241:	8d 76 00             	lea    esi,[esi+0x0]

c0017244 <fatWrapperWriteDisk>:
c0017244:	53                   	push   ebx
c0017245:	83 ec 18             	sub    esp,0x18
c0017248:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001724c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017250:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017255:	8b 0c 85 20 2d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd2e0]
c001725c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017260:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017264:	ba 00 00 00 00       	mov    edx,0x0
c0017269:	83 ec 0c             	sub    esp,0xc
c001726c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017270:	53                   	push   ebx
c0017271:	52                   	push   edx
c0017272:	50                   	push   eax
c0017273:	51                   	push   ecx
c0017274:	e8 9d 4f ff ff       	call   c000c216 <LogicalDisk::write(unsigned long long, int, void*)>
c0017279:	83 c4 20             	add    esp,0x20
c001727c:	83 c4 18             	add    esp,0x18
c001727f:	5b                   	pop    ebx
c0017280:	c3                   	ret    
c0017281:	8d 76 00             	lea    esi,[esi+0x0]

c0017284 <fatWrapperIoctl>:
c0017284:	53                   	push   ebx
c0017285:	83 ec 28             	sub    esp,0x28
c0017288:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001728c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017290:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017294:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017298:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001729d:	75 31                	jne    c00172d0 <fatWrapperIoctl+0x4c>
c001729f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00172a3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00172a7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00172ac:	8b 04 85 20 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd2e0]
c00172b3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00172b9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00172bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00172c3:	66 89 02             	mov    WORD PTR [edx],ax
c00172c6:	b8 00 00 00 00       	mov    eax,0x0
c00172cb:	e9 b8 00 00 00       	jmp    c0017388 <fatWrapperIoctl+0x104>
c00172d0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00172d5:	75 69                	jne    c0017340 <fatWrapperIoctl+0xbc>
c00172d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00172db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00172df:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00172e4:	8b 04 85 20 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd2e0]
c00172eb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00172f1:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00172f7:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00172fd:	89 c8                	mov    eax,ecx
c00172ff:	89 da                	mov    edx,ebx
c0017301:	0f a4 c2 0a          	shld   edx,eax,0xa
c0017305:	c1 e0 0a             	shl    eax,0xa
c0017308:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001730d:	8b 0c 8d 20 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd2e0]
c0017314:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001731a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0017320:	89 cb                	mov    ebx,ecx
c0017322:	c1 fb 1f             	sar    ebx,0x1f
c0017325:	53                   	push   ebx
c0017326:	51                   	push   ecx
c0017327:	52                   	push   edx
c0017328:	50                   	push   eax
c0017329:	e8 c2 55 00 00       	call   c001c8f0 <__udivdi3>
c001732e:	83 c4 10             	add    esp,0x10
c0017331:	89 c2                	mov    edx,eax
c0017333:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017337:	89 10                	mov    DWORD PTR [eax],edx
c0017339:	b8 00 00 00 00       	mov    eax,0x0
c001733e:	eb 48                	jmp    c0017388 <fatWrapperIoctl+0x104>
c0017340:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0017345:	75 09                	jne    c0017350 <fatWrapperIoctl+0xcc>
c0017347:	b8 00 00 00 00       	mov    eax,0x0
c001734c:	eb 3a                	jmp    c0017388 <fatWrapperIoctl+0x104>
c001734e:	66 90                	xchg   ax,ax
c0017350:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0017355:	75 19                	jne    c0017370 <fatWrapperIoctl+0xec>
c0017357:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001735b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001735f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017363:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0017369:	b8 00 00 00 00       	mov    eax,0x0
c001736e:	eb 18                	jmp    c0017388 <fatWrapperIoctl+0x104>
c0017370:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0017375:	75 09                	jne    c0017380 <fatWrapperIoctl+0xfc>
c0017377:	b8 00 00 00 00       	mov    eax,0x0
c001737c:	eb 0a                	jmp    c0017388 <fatWrapperIoctl+0x104>
c001737e:	66 90                	xchg   ax,ax
c0017380:	b8 04 00 00 00       	mov    eax,0x4
c0017385:	8d 76 00             	lea    esi,[esi+0x0]
c0017388:	83 c4 28             	add    esp,0x28
c001738b:	5b                   	pop    ebx
c001738c:	c3                   	ret    
c001738d:	90                   	nop
c001738e:	66 90                	xchg   ax,ax

c0017390 <FAT::FAT()>:
c0017390:	83 ec 1c             	sub    esp,0x1c
c0017393:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017397:	83 ec 0c             	sub    esp,0xc
c001739a:	50                   	push   eax
c001739b:	e8 7e 2a ff ff       	call   c0009e1e <Filesystem::Filesystem()>
c00173a0:	83 c4 10             	add    esp,0x10
c00173a3:	ba 40 f8 01 c0       	mov    edx,0xc001f840
c00173a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173ac:	89 10                	mov    DWORD PTR [eax],edx
c00173ae:	c7 05 a0 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023da0,0x0
c00173b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00173c0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00173c5:	7f 15                	jg     c00173dc <FAT::FAT()+0x4c>
c00173c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00173cb:	c7 04 85 c0 3d 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc240],0xffffffff
c00173d6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00173da:	eb e4                	jmp    c00173c0 <FAT::FAT()+0x30>
c00173dc:	90                   	nop
c00173dd:	83 c4 1c             	add    esp,0x1c
c00173e0:	c3                   	ret    
c00173e1:	90                   	nop
c00173e2:	66 90                	xchg   ax,ax

c00173e4 <FAT::fixFilepath(char*)>:
c00173e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00173e8:	8a 00                	mov    al,BYTE PTR [eax]
c00173ea:	3c 40                	cmp    al,0x40
c00173ec:	7e 2e                	jle    c001741c <FAT::fixFilepath(char*)+0x38>
c00173ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00173f2:	8a 00                	mov    al,BYTE PTR [eax]
c00173f4:	83 e8 41             	sub    eax,0x41
c00173f7:	88 c2                	mov    dl,al
c00173f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00173fd:	88 10                	mov    BYTE PTR [eax],dl
c00173ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017403:	8a 00                	mov    al,BYTE PTR [eax]
c0017405:	0f be c0             	movsx  eax,al
c0017408:	8b 04 85 c0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc240]
c001740f:	83 c0 30             	add    eax,0x30
c0017412:	88 c2                	mov    dl,al
c0017414:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017418:	88 10                	mov    BYTE PTR [eax],dl
c001741a:	66 90                	xchg   ax,ax
c001741c:	90                   	nop
c001741d:	c3                   	ret    
c001741e:	66 90                	xchg   ax,ax

c0017420 <FAT::open(char const*, void**, FileOpenMode)>:
c0017420:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017426:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001742e:	74 0c                	je     c001743c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0017430:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017438:	75 0e                	jne    c0017448 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001743a:	66 90                	xchg   ax,ax
c001743c:	b8 04 00 00 00       	mov    eax,0x4
c0017441:	e9 06 01 00 00       	jmp    c001754c <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c0017446:	66 90                	xchg   ax,ax
c0017448:	83 ec 08             	sub    esp,0x8
c001744b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017452:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017456:	50                   	push   eax
c0017457:	e8 08 91 fe ff       	call   c0000564 <strcpy>
c001745c:	83 c4 10             	add    esp,0x10
c001745f:	83 ec 08             	sub    esp,0x8
c0017462:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017466:	50                   	push   eax
c0017467:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001746e:	e8 71 ff ff ff       	call   c00173e4 <FAT::fixFilepath(char*)>
c0017473:	83 c4 10             	add    esp,0x10
c0017476:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001747e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017485:	83 e0 01             	and    eax,0x1
c0017488:	74 0a                	je     c0017494 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001748a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0017492:	66 90                	xchg   ax,ax
c0017494:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001749b:	83 e0 04             	and    eax,0x4
c001749e:	74 10                	je     c00174b0 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c00174a0:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00174a8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00174b0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00174b7:	83 e0 02             	and    eax,0x2
c00174ba:	74 08                	je     c00174c4 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c00174bc:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00174c4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00174cb:	83 e0 08             	and    eax,0x8
c00174ce:	74 08                	je     c00174d8 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c00174d0:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00174d8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00174df:	83 e0 10             	and    eax,0x10
c00174e2:	74 08                	je     c00174ec <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00174e4:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00174ec:	83 ec 0c             	sub    esp,0xc
c00174ef:	68 28 02 00 00       	push   0x228
c00174f4:	e8 84 f8 fe ff       	call   c0006d7d <malloc>
c00174f9:	83 c4 10             	add    esp,0x10
c00174fc:	89 c2                	mov    edx,eax
c00174fe:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017505:	89 10                	mov    DWORD PTR [eax],edx
c0017507:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001750f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017516:	8b 00                	mov    eax,DWORD PTR [eax]
c0017518:	83 ec 04             	sub    esp,0x4
c001751b:	52                   	push   edx
c001751c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017520:	52                   	push   edx
c0017521:	50                   	push   eax
c0017522:	e8 89 c2 fe ff       	call   c00037b0 <f_open>
c0017527:	83 c4 10             	add    esp,0x10
c001752a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0017531:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0017539:	74 09                	je     c0017544 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001753b:	b8 01 00 00 00       	mov    eax,0x1
c0017540:	eb 0a                	jmp    c001754c <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c0017542:	66 90                	xchg   ax,ax
c0017544:	b8 00 00 00 00       	mov    eax,0x0
c0017549:	8d 76 00             	lea    esi,[esi+0x0]
c001754c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017552:	c3                   	ret    
c0017553:	90                   	nop

c0017554 <FAT::openDir(char const*, void**)>:
c0017554:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001755a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017562:	74 0c                	je     c0017570 <FAT::openDir(char const*, void**)+0x1c>
c0017564:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001756c:	75 0e                	jne    c001757c <FAT::openDir(char const*, void**)+0x28>
c001756e:	66 90                	xchg   ax,ax
c0017570:	b8 04 00 00 00       	mov    eax,0x4
c0017575:	e9 82 00 00 00       	jmp    c00175fc <FAT::openDir(char const*, void**)+0xa8>
c001757a:	66 90                	xchg   ax,ax
c001757c:	83 ec 08             	sub    esp,0x8
c001757f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017586:	8d 44 24 18          	lea    eax,[esp+0x18]
c001758a:	50                   	push   eax
c001758b:	e8 d4 8f fe ff       	call   c0000564 <strcpy>
c0017590:	83 c4 10             	add    esp,0x10
c0017593:	83 ec 08             	sub    esp,0x8
c0017596:	8d 44 24 14          	lea    eax,[esp+0x14]
c001759a:	50                   	push   eax
c001759b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00175a2:	e8 3d fe ff ff       	call   c00173e4 <FAT::fixFilepath(char*)>
c00175a7:	83 c4 10             	add    esp,0x10
c00175aa:	83 ec 0c             	sub    esp,0xc
c00175ad:	6a 30                	push   0x30
c00175af:	e8 c9 f7 fe ff       	call   c0006d7d <malloc>
c00175b4:	83 c4 10             	add    esp,0x10
c00175b7:	89 c2                	mov    edx,eax
c00175b9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00175c0:	89 10                	mov    DWORD PTR [eax],edx
c00175c2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00175c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00175cb:	83 ec 08             	sub    esp,0x8
c00175ce:	8d 54 24 14          	lea    edx,[esp+0x14]
c00175d2:	52                   	push   edx
c00175d3:	50                   	push   eax
c00175d4:	e8 c8 cc fe ff       	call   c00042a1 <f_opendir>
c00175d9:	83 c4 10             	add    esp,0x10
c00175dc:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00175e3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00175eb:	74 07                	je     c00175f4 <FAT::openDir(char const*, void**)+0xa0>
c00175ed:	b8 01 00 00 00       	mov    eax,0x1
c00175f2:	eb 08                	jmp    c00175fc <FAT::openDir(char const*, void**)+0xa8>
c00175f4:	b8 00 00 00 00       	mov    eax,0x0
c00175f9:	8d 76 00             	lea    esi,[esi+0x0]
c00175fc:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017602:	c3                   	ret    
c0017603:	90                   	nop

c0017604 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0017604:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001760a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0017612:	75 0c                	jne    c0017620 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0017614:	b8 04 00 00 00       	mov    eax,0x4
c0017619:	e9 d6 00 00 00       	jmp    c00176f4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001761e:	66 90                	xchg   ax,ax
c0017620:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0017628:	75 0a                	jne    c0017634 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001762a:	b8 04 00 00 00       	mov    eax,0x4
c001762f:	e9 c0 00 00 00       	jmp    c00176f4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017634:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001763c:	75 0a                	jne    c0017648 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001763e:	b8 04 00 00 00       	mov    eax,0x4
c0017643:	e9 ac 00 00 00       	jmp    c00176f4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017648:	83 ec 08             	sub    esp,0x8
c001764b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017652:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017659:	50                   	push   eax
c001765a:	e8 05 8f fe ff       	call   c0000564 <strcpy>
c001765f:	83 c4 10             	add    esp,0x10
c0017662:	83 ec 08             	sub    esp,0x8
c0017665:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001766c:	50                   	push   eax
c001766d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017674:	e8 6b fd ff ff       	call   c00173e4 <FAT::fixFilepath(char*)>
c0017679:	83 c4 10             	add    esp,0x10
c001767c:	83 ec 08             	sub    esp,0x8
c001767f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017683:	50                   	push   eax
c0017684:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001768b:	50                   	push   eax
c001768c:	e8 8f cd fe ff       	call   c0004420 <f_stat>
c0017691:	83 c4 10             	add    esp,0x10
c0017694:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001769b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00176a2:	85 c0                	test   eax,eax
c00176a4:	74 0a                	je     c00176b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c00176a6:	83 f8 04             	cmp    eax,0x4
c00176a9:	74 39                	je     c00176e4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c00176ab:	eb 3f                	jmp    c00176ec <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c00176ad:	8d 76 00             	lea    esi,[esi+0x0]
c00176b0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00176b4:	0f b6 c0             	movzx  eax,al
c00176b7:	83 e0 10             	and    eax,0x10
c00176ba:	0f 95 c2             	setne  dl
c00176bd:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00176c4:	88 10                	mov    BYTE PTR [eax],dl
c00176c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00176ca:	ba 00 00 00 00       	mov    edx,0x0
c00176cf:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00176d6:	89 01                	mov    DWORD PTR [ecx],eax
c00176d8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00176db:	b8 00 00 00 00       	mov    eax,0x0
c00176e0:	eb 12                	jmp    c00176f4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00176e2:	66 90                	xchg   ax,ax
c00176e4:	b8 02 00 00 00       	mov    eax,0x2
c00176e9:	eb 09                	jmp    c00176f4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00176eb:	90                   	nop
c00176ec:	b8 01 00 00 00       	mov    eax,0x1
c00176f1:	8d 76 00             	lea    esi,[esi+0x0]
c00176f4:	81 c4 2c 02 00 00    	add    esp,0x22c
c00176fa:	c3                   	ret    
c00176fb:	90                   	nop

c00176fc <FAT::unlink(char const*)>:
c00176fc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017702:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001770a:	75 08                	jne    c0017714 <FAT::unlink(char const*)+0x18>
c001770c:	b8 04 00 00 00       	mov    eax,0x4
c0017711:	eb 61                	jmp    c0017774 <FAT::unlink(char const*)+0x78>
c0017713:	90                   	nop
c0017714:	83 ec 08             	sub    esp,0x8
c0017717:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001771e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017722:	50                   	push   eax
c0017723:	e8 3c 8e fe ff       	call   c0000564 <strcpy>
c0017728:	83 c4 10             	add    esp,0x10
c001772b:	83 ec 08             	sub    esp,0x8
c001772e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017732:	50                   	push   eax
c0017733:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001773a:	e8 a5 fc ff ff       	call   c00173e4 <FAT::fixFilepath(char*)>
c001773f:	83 c4 10             	add    esp,0x10
c0017742:	83 ec 0c             	sub    esp,0xc
c0017745:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017749:	50                   	push   eax
c001774a:	e8 36 cf fe ff       	call   c0004685 <f_unlink>
c001774f:	83 c4 10             	add    esp,0x10
c0017752:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017759:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017760:	85 c0                	test   eax,eax
c0017762:	75 08                	jne    c001776c <FAT::unlink(char const*)+0x70>
c0017764:	b8 00 00 00 00       	mov    eax,0x0
c0017769:	eb 09                	jmp    c0017774 <FAT::unlink(char const*)+0x78>
c001776b:	90                   	nop
c001776c:	b8 01 00 00 00       	mov    eax,0x1
c0017771:	8d 76 00             	lea    esi,[esi+0x0]
c0017774:	81 c4 1c 01 00 00    	add    esp,0x11c
c001777a:	c3                   	ret    
c001777b:	90                   	nop

c001777c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001777c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017782:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0017789:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0017790:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017794:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017798:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00177a0:	75 0a                	jne    c00177ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00177a2:	b8 04 00 00 00       	mov    eax,0x4
c00177a7:	e9 30 01 00 00       	jmp    c00178dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c00177ac:	83 ec 08             	sub    esp,0x8
c00177af:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00177b6:	8d 44 24 24          	lea    eax,[esp+0x24]
c00177ba:	50                   	push   eax
c00177bb:	e8 a4 8d fe ff       	call   c0000564 <strcpy>
c00177c0:	83 c4 10             	add    esp,0x10
c00177c3:	83 ec 08             	sub    esp,0x8
c00177c6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00177ca:	50                   	push   eax
c00177cb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00177d2:	e8 0d fc ff ff       	call   c00173e4 <FAT::fixFilepath(char*)>
c00177d7:	83 c4 10             	add    esp,0x10
c00177da:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00177e2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00177ea:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00177ef:	83 e0 01             	and    eax,0x1
c00177f2:	74 08                	je     c00177fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00177f4:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00177fc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017801:	83 e0 02             	and    eax,0x2
c0017804:	74 0a                	je     c0017810 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c0017806:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001780e:	66 90                	xchg   ax,ax
c0017810:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017815:	83 e0 04             	and    eax,0x4
c0017818:	74 0a                	je     c0017824 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001781a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0017822:	66 90                	xchg   ax,ax
c0017824:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017829:	83 e0 08             	and    eax,0x8
c001782c:	74 0a                	je     c0017838 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001782e:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0017836:	66 90                	xchg   ax,ax
c0017838:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001783d:	83 e0 01             	and    eax,0x1
c0017840:	74 0a                	je     c001784c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c0017842:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001784a:	66 90                	xchg   ax,ax
c001784c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017851:	83 e0 02             	and    eax,0x2
c0017854:	74 0a                	je     c0017860 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0017856:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001785e:	66 90                	xchg   ax,ax
c0017860:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017865:	83 e0 04             	and    eax,0x4
c0017868:	74 0a                	je     c0017874 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001786a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0017872:	66 90                	xchg   ax,ax
c0017874:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017879:	83 e0 08             	and    eax,0x8
c001787c:	74 0a                	je     c0017888 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001787e:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0017886:	66 90                	xchg   ax,ax
c0017888:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001788f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0017896:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001789e:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00178a6:	83 ec 04             	sub    esp,0x4
c00178a9:	52                   	push   edx
c00178aa:	50                   	push   eax
c00178ab:	8d 44 24 24          	lea    eax,[esp+0x24]
c00178af:	50                   	push   eax
c00178b0:	e8 43 d2 fe ff       	call   c0004af8 <f_chmod>
c00178b5:	83 c4 10             	add    esp,0x10
c00178b8:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00178bf:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00178c6:	85 c0                	test   eax,eax
c00178c8:	75 0a                	jne    c00178d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c00178ca:	b8 00 00 00 00       	mov    eax,0x0
c00178cf:	eb 0b                	jmp    c00178dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c00178d1:	8d 76 00             	lea    esi,[esi+0x0]
c00178d4:	b8 01 00 00 00       	mov    eax,0x1
c00178d9:	8d 76 00             	lea    esi,[esi+0x0]
c00178dc:	81 c4 2c 01 00 00    	add    esp,0x12c
c00178e2:	c3                   	ret    
c00178e3:	90                   	nop

c00178e4 <FAT::rename(char const*, char const*)>:
c00178e4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00178ea:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00178f2:	74 0c                	je     c0017900 <FAT::rename(char const*, char const*)+0x1c>
c00178f4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00178fc:	75 0e                	jne    c001790c <FAT::rename(char const*, char const*)+0x28>
c00178fe:	66 90                	xchg   ax,ax
c0017900:	b8 04 00 00 00       	mov    eax,0x4
c0017905:	e9 9e 00 00 00       	jmp    c00179a8 <FAT::rename(char const*, char const*)+0xc4>
c001790a:	66 90                	xchg   ax,ax
c001790c:	83 ec 08             	sub    esp,0x8
c001790f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017916:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001791d:	50                   	push   eax
c001791e:	e8 41 8c fe ff       	call   c0000564 <strcpy>
c0017923:	83 c4 10             	add    esp,0x10
c0017926:	83 ec 08             	sub    esp,0x8
c0017929:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0017930:	50                   	push   eax
c0017931:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017938:	e8 a7 fa ff ff       	call   c00173e4 <FAT::fixFilepath(char*)>
c001793d:	83 c4 10             	add    esp,0x10
c0017940:	83 ec 08             	sub    esp,0x8
c0017943:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001794a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001794e:	50                   	push   eax
c001794f:	e8 10 8c fe ff       	call   c0000564 <strcpy>
c0017954:	83 c4 10             	add    esp,0x10
c0017957:	83 ec 08             	sub    esp,0x8
c001795a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001795e:	50                   	push   eax
c001795f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017966:	e8 79 fa ff ff       	call   c00173e4 <FAT::fixFilepath(char*)>
c001796b:	83 c4 10             	add    esp,0x10
c001796e:	83 ec 08             	sub    esp,0x8
c0017971:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017975:	50                   	push   eax
c0017976:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001797d:	50                   	push   eax
c001797e:	e8 bf cf fe ff       	call   c0004942 <f_rename>
c0017983:	83 c4 10             	add    esp,0x10
c0017986:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001798d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0017994:	85 c0                	test   eax,eax
c0017996:	75 08                	jne    c00179a0 <FAT::rename(char const*, char const*)+0xbc>
c0017998:	b8 00 00 00 00       	mov    eax,0x0
c001799d:	eb 09                	jmp    c00179a8 <FAT::rename(char const*, char const*)+0xc4>
c001799f:	90                   	nop
c00179a0:	b8 01 00 00 00       	mov    eax,0x1
c00179a5:	8d 76 00             	lea    esi,[esi+0x0]
c00179a8:	81 c4 1c 02 00 00    	add    esp,0x21c
c00179ae:	c3                   	ret    
c00179af:	90                   	nop

c00179b0 <FAT::mkdir(char const*)>:
c00179b0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00179b6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00179be:	75 08                	jne    c00179c8 <FAT::mkdir(char const*)+0x18>
c00179c0:	b8 04 00 00 00       	mov    eax,0x4
c00179c5:	eb 61                	jmp    c0017a28 <FAT::mkdir(char const*)+0x78>
c00179c7:	90                   	nop
c00179c8:	83 ec 08             	sub    esp,0x8
c00179cb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00179d2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00179d6:	50                   	push   eax
c00179d7:	e8 88 8b fe ff       	call   c0000564 <strcpy>
c00179dc:	83 c4 10             	add    esp,0x10
c00179df:	83 ec 08             	sub    esp,0x8
c00179e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00179e6:	50                   	push   eax
c00179e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00179ee:	e8 f1 f9 ff ff       	call   c00173e4 <FAT::fixFilepath(char*)>
c00179f3:	83 c4 10             	add    esp,0x10
c00179f6:	83 ec 0c             	sub    esp,0xc
c00179f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00179fd:	50                   	push   eax
c00179fe:	e8 a4 cd fe ff       	call   c00047a7 <f_mkdir>
c0017a03:	83 c4 10             	add    esp,0x10
c0017a06:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017a0d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017a14:	85 c0                	test   eax,eax
c0017a16:	75 08                	jne    c0017a20 <FAT::mkdir(char const*)+0x70>
c0017a18:	b8 00 00 00 00       	mov    eax,0x0
c0017a1d:	eb 09                	jmp    c0017a28 <FAT::mkdir(char const*)+0x78>
c0017a1f:	90                   	nop
c0017a20:	b8 01 00 00 00       	mov    eax,0x1
c0017a25:	8d 76 00             	lea    esi,[esi+0x0]
c0017a28:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017a2e:	c3                   	ret    
c0017a2f:	90                   	nop

c0017a30 <FAT::exists(char const*)>:
c0017a30:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0017a36:	83 ec 08             	sub    esp,0x8
c0017a39:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017a40:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017a44:	50                   	push   eax
c0017a45:	e8 1a 8b fe ff       	call   c0000564 <strcpy>
c0017a4a:	83 c4 10             	add    esp,0x10
c0017a4d:	83 ec 08             	sub    esp,0x8
c0017a50:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017a54:	50                   	push   eax
c0017a55:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017a5c:	e8 83 f9 ff ff       	call   c00173e4 <FAT::fixFilepath(char*)>
c0017a61:	83 c4 10             	add    esp,0x10
c0017a64:	83 ec 08             	sub    esp,0x8
c0017a67:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0017a6e:	50                   	push   eax
c0017a6f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017a73:	50                   	push   eax
c0017a74:	e8 a7 c9 fe ff       	call   c0004420 <f_stat>
c0017a79:	83 c4 10             	add    esp,0x10
c0017a7c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017a83:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017a8a:	85 c0                	test   eax,eax
c0017a8c:	75 06                	jne    c0017a94 <FAT::exists(char const*)+0x64>
c0017a8e:	b0 01                	mov    al,0x1
c0017a90:	eb 06                	jmp    c0017a98 <FAT::exists(char const*)+0x68>
c0017a92:	66 90                	xchg   ax,ax
c0017a94:	b0 00                	mov    al,0x0
c0017a96:	66 90                	xchg   ax,ax
c0017a98:	81 c4 2c 02 00 00    	add    esp,0x22c
c0017a9e:	c3                   	ret    
c0017a9f:	90                   	nop

c0017aa0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0017aa0:	b8 08 00 00 00       	mov    eax,0x8
c0017aa5:	c3                   	ret    

c0017aa6 <ISO9660::seek(void*, unsigned long long)>:
c0017aa6:	53                   	push   ebx
c0017aa7:	b8 04 00 00 00       	mov    eax,0x4
c0017aac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ab0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017ab4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017ab8:	85 d2                	test   edx,edx
c0017aba:	74 17                	je     c0017ad3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0017abc:	89 c8                	mov    eax,ecx
c0017abe:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0017ac1:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0017ac4:	b8 01 00 00 00       	mov    eax,0x1
c0017ac9:	73 08                	jae    c0017ad3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0017acb:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0017ace:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0017ad1:	31 c0                	xor    eax,eax
c0017ad3:	5b                   	pop    ebx
c0017ad4:	c3                   	ret    
c0017ad5:	90                   	nop

c0017ad6 <ISO9660::tell(void*, unsigned long long*)>:
c0017ad6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017ada:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ade:	85 d2                	test   edx,edx
c0017ae0:	74 12                	je     c0017af4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0017ae2:	85 c0                	test   eax,eax
c0017ae4:	74 0e                	je     c0017af4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0017ae6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017ae9:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0017aec:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0017aef:	89 10                	mov    DWORD PTR [eax],edx
c0017af1:	31 c0                	xor    eax,eax
c0017af3:	c3                   	ret    
c0017af4:	b8 04 00 00 00       	mov    eax,0x4
c0017af9:	c3                   	ret    

c0017afa <ISO9660::getName()>:
c0017afa:	b8 a0 f8 01 c0       	mov    eax,0xc001f8a0
c0017aff:	c3                   	ret    

c0017b00 <ISO9660::stat(void*, unsigned long long*)>:
c0017b00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017b04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b08:	85 d2                	test   edx,edx
c0017b0a:	74 12                	je     c0017b1e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0017b0c:	85 c0                	test   eax,eax
c0017b0e:	74 0e                	je     c0017b1e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0017b10:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0017b13:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0017b16:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0017b19:	89 10                	mov    DWORD PTR [eax],edx
c0017b1b:	31 c0                	xor    eax,eax
c0017b1d:	c3                   	ret    
c0017b1e:	b8 04 00 00 00       	mov    eax,0x4
c0017b23:	c3                   	ret    

c0017b24 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0017b24:	b8 01 00 00 00       	mov    eax,0x1
c0017b29:	c3                   	ret    

c0017b2a <ISO9660::unlink(char const*)>:
c0017b2a:	b8 01 00 00 00       	mov    eax,0x1
c0017b2f:	c3                   	ret    

c0017b30 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0017b30:	b8 01 00 00 00       	mov    eax,0x1
c0017b35:	c3                   	ret    

c0017b36 <ISO9660::rename(char const*, char const*)>:
c0017b36:	b8 01 00 00 00       	mov    eax,0x1
c0017b3b:	c3                   	ret    

c0017b3c <ISO9660::mkdir(char const*)>:
c0017b3c:	b8 01 00 00 00       	mov    eax,0x1
c0017b41:	c3                   	ret    

c0017b42 <ISO9660::close(void*)>:
c0017b42:	83 ec 0c             	sub    esp,0xc
c0017b45:	b8 04 00 00 00       	mov    eax,0x4
c0017b4a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017b4e:	85 d2                	test   edx,edx
c0017b50:	74 0e                	je     c0017b60 <ISO9660::close(void*)+0x1e>
c0017b52:	83 ec 0c             	sub    esp,0xc
c0017b55:	52                   	push   edx
c0017b56:	e8 32 f2 fe ff       	call   c0006d8d <free>
c0017b5b:	83 c4 10             	add    esp,0x10
c0017b5e:	31 c0                	xor    eax,eax
c0017b60:	83 c4 0c             	add    esp,0xc
c0017b63:	c3                   	ret    

c0017b64 <ISO9660::closeDir(void*)>:
c0017b64:	83 ec 0c             	sub    esp,0xc
c0017b67:	b8 04 00 00 00       	mov    eax,0x4
c0017b6c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017b70:	85 d2                	test   edx,edx
c0017b72:	74 0e                	je     c0017b82 <ISO9660::closeDir(void*)+0x1e>
c0017b74:	83 ec 0c             	sub    esp,0xc
c0017b77:	52                   	push   edx
c0017b78:	e8 10 f2 fe ff       	call   c0006d8d <free>
c0017b7d:	83 c4 10             	add    esp,0x10
c0017b80:	31 c0                	xor    eax,eax
c0017b82:	83 c4 0c             	add    esp,0xc
c0017b85:	c3                   	ret    

c0017b86 <ISO9660::~ISO9660()>:
c0017b86:	83 ec 0c             	sub    esp,0xc
c0017b89:	ba c4 f8 01 c0       	mov    edx,0xc001f8c4
c0017b8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b92:	89 10                	mov    DWORD PTR [eax],edx
c0017b94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b98:	83 ec 0c             	sub    esp,0xc
c0017b9b:	50                   	push   eax
c0017b9c:	e8 a1 22 ff ff       	call   c0009e42 <Filesystem::~Filesystem()>
c0017ba1:	83 c4 10             	add    esp,0x10
c0017ba4:	90                   	nop
c0017ba5:	83 c4 0c             	add    esp,0xc
c0017ba8:	c3                   	ret    
c0017ba9:	90                   	nop

c0017baa <ISO9660::~ISO9660()>:
c0017baa:	83 ec 0c             	sub    esp,0xc
c0017bad:	83 ec 0c             	sub    esp,0xc
c0017bb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017bb4:	e8 cd ff ff ff       	call   c0017b86 <ISO9660::~ISO9660()>
c0017bb9:	83 c4 10             	add    esp,0x10
c0017bbc:	83 ec 08             	sub    esp,0x8
c0017bbf:	6a 08                	push   0x8
c0017bc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017bc5:	e8 5c 1e ff ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c0017bca:	83 c4 10             	add    esp,0x10
c0017bcd:	83 c4 0c             	add    esp,0xc
c0017bd0:	c3                   	ret    

c0017bd1 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0017bd1:	55                   	push   ebp
c0017bd2:	31 c9                	xor    ecx,ecx
c0017bd4:	57                   	push   edi
c0017bd5:	56                   	push   esi
c0017bd6:	53                   	push   ebx
c0017bd7:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0017bdb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017bdf:	89 eb                	mov    ebx,ebp
c0017be1:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0017be5:	39 ce                	cmp    esi,ecx
c0017be7:	7e 17                	jle    c0017c00 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0017be9:	31 d2                	xor    edx,edx
c0017beb:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0017bef:	7d 13                	jge    c0017c04 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0017bf1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017bf5:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0017bf8:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0017bfb:	75 0d                	jne    c0017c0a <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0017bfd:	42                   	inc    edx
c0017bfe:	eb eb                	jmp    c0017beb <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0017c00:	31 c0                	xor    eax,eax
c0017c02:	eb 0a                	jmp    c0017c0e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0017c04:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0017c08:	eb 04                	jmp    c0017c0e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0017c0a:	41                   	inc    ecx
c0017c0b:	43                   	inc    ebx
c0017c0c:	eb d7                	jmp    c0017be5 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0017c0e:	5b                   	pop    ebx
c0017c0f:	5e                   	pop    esi
c0017c10:	5f                   	pop    edi
c0017c11:	5d                   	pop    ebp
c0017c12:	c3                   	ret    

c0017c13 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017c13:	57                   	push   edi
c0017c14:	56                   	push   esi
c0017c15:	53                   	push   ebx
c0017c16:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017c1a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017c1e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c22:	39 35 a0 3e 02 c0    	cmp    DWORD PTR ds:0xc0023ea0,esi
c0017c28:	75 08                	jne    c0017c32 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017c2a:	38 1d d4 01 02 c0    	cmp    BYTE PTR ds:0xc00201d4,bl
c0017c30:	74 4a                	je     c0017c7c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017c32:	83 ec 0c             	sub    esp,0xc
c0017c35:	31 d2                	xor    edx,edx
c0017c37:	68 c0 3e 02 c0       	push   0xc0023ec0
c0017c3c:	0f be c3             	movsx  eax,bl
c0017c3f:	6a 01                	push   0x1
c0017c41:	52                   	push   edx
c0017c42:	56                   	push   esi
c0017c43:	ff 34 85 1c 2c 02 c0 	push   DWORD PTR [eax*4-0x3ffdd3e4]
c0017c4a:	e8 5b 45 ff ff       	call   c000c1aa <LogicalDisk::read(unsigned long long, int, void*)>
c0017c4f:	83 c4 20             	add    esp,0x20
c0017c52:	85 c0                	test   eax,eax
c0017c54:	75 0e                	jne    c0017c64 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017c56:	89 35 a0 3e 02 c0    	mov    DWORD PTR ds:0xc0023ea0,esi
c0017c5c:	88 1d d4 01 02 c0    	mov    BYTE PTR ds:0xc00201d4,bl
c0017c62:	eb 18                	jmp    c0017c7c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017c64:	50                   	push   eax
c0017c65:	68 00 08 00 00       	push   0x800
c0017c6a:	6a 00                	push   0x0
c0017c6c:	57                   	push   edi
c0017c6d:	e8 36 88 fe ff       	call   c00004a8 <memset>
c0017c72:	83 c4 10             	add    esp,0x10
c0017c75:	b8 01 00 00 00       	mov    eax,0x1
c0017c7a:	eb 0e                	jmp    c0017c8a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017c7c:	be c0 3e 02 c0       	mov    esi,0xc0023ec0
c0017c81:	b9 00 08 00 00       	mov    ecx,0x800
c0017c86:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017c88:	31 c0                	xor    eax,eax
c0017c8a:	5b                   	pop    ebx
c0017c8b:	5e                   	pop    esi
c0017c8c:	5f                   	pop    edi
c0017c8d:	c3                   	ret    

c0017c8e <ISO9660::tryMount(LogicalDisk*, int)>:
c0017c8e:	81 ec 10 08 00 00    	sub    esp,0x810
c0017c94:	c7 05 a0 3e 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0023ea0,0xdeadbeef
c0017c9e:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017ca5:	83 c0 41             	add    eax,0x41
c0017ca8:	0f be c0             	movsx  eax,al
c0017cab:	50                   	push   eax
c0017cac:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017cb0:	50                   	push   eax
c0017cb1:	6a 10                	push   0x10
c0017cb3:	e8 5b ff ff ff       	call   c0017c13 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017cb8:	83 c4 10             	add    esp,0x10
c0017cbb:	31 d2                	xor    edx,edx
c0017cbd:	85 c0                	test   eax,eax
c0017cbf:	75 24                	jne    c0017ce5 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0017cc1:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017cc6:	75 1d                	jne    c0017ce5 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0017cc8:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017ccd:	75 16                	jne    c0017ce5 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0017ccf:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017cd4:	75 0f                	jne    c0017ce5 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0017cd6:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017cdb:	75 08                	jne    c0017ce5 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0017cdd:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017ce2:	0f 94 c2             	sete   dl
c0017ce5:	88 d0                	mov    al,dl
c0017ce7:	81 c4 0c 08 00 00    	add    esp,0x80c
c0017ced:	c3                   	ret    

c0017cee <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017cee:	55                   	push   ebp
c0017cef:	57                   	push   edi
c0017cf0:	56                   	push   esi
c0017cf1:	53                   	push   ebx
c0017cf2:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0017cf8:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0017cff:	85 ed                	test   ebp,ebp
c0017d01:	0f 84 da 01 00 00    	je     c0017ee1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0017d07:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0017d0f:	0f 84 cc 01 00 00    	je     c0017ee1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0017d15:	b8 01 00 00 00       	mov    eax,0x1
c0017d1a:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0017d1e:	0f 85 c2 01 00 00    	jne    c0017ee6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0017d24:	31 d2                	xor    edx,edx
c0017d26:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0017d2d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0017d30:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0017d33:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017d36:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d39:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0017d3d:	01 c8                	add    eax,ecx
c0017d3f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0017d42:	11 da                	adc    edx,ebx
c0017d44:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0017d48:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0017d4c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0017d50:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0017d54:	19 d7                	sbb    edi,edx
c0017d56:	72 11                	jb     c0017d69 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0017d58:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0017d5b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0017d5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017d67:	eb 0c                	jmp    c0017d75 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0017d69:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0017d6d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0017d71:	29 ce                	sub    esi,ecx
c0017d73:	19 df                	sbb    edi,ebx
c0017d75:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017d78:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0017d7b:	0f a4 c2 0b          	shld   edx,eax,0xb
c0017d7f:	c1 e0 0b             	shl    eax,0xb
c0017d82:	01 c8                	add    eax,ecx
c0017d84:	11 da                	adc    edx,ebx
c0017d86:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d89:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0017d8d:	51                   	push   ecx
c0017d8e:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0017d92:	50                   	push   eax
c0017d93:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0017d97:	53                   	push   ebx
c0017d98:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017d9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017da0:	0f ac d0 0b          	shrd   eax,edx,0xb
c0017da4:	50                   	push   eax
c0017da5:	e8 69 fe ff ff       	call   c0017c13 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017daa:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0017dad:	b8 00 08 00 00       	mov    eax,0x800
c0017db2:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0017db8:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0017dbc:	29 d0                	sub    eax,edx
c0017dbe:	83 c4 10             	add    esp,0x10
c0017dc1:	89 f9                	mov    ecx,edi
c0017dc3:	39 c6                	cmp    esi,eax
c0017dc5:	83 d9 00             	sbb    ecx,0x0
c0017dc8:	7d 1b                	jge    c0017de5 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0017dca:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017dcf:	75 12                	jne    c0017de3 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0017dd1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0017dd8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0017dde:	e9 fa 00 00 00       	jmp    c0017edd <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0017de3:	89 f0                	mov    eax,esi
c0017de5:	01 d3                	add    ebx,edx
c0017de7:	31 d2                	xor    edx,edx
c0017de9:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0017ded:	39 c2                	cmp    edx,eax
c0017def:	7d 14                	jge    c0017e05 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0017df1:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0017df8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0017dfc:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0017dff:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0017e02:	42                   	inc    edx
c0017e03:	eb e8                	jmp    c0017ded <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0017e05:	89 c2                	mov    edx,eax
c0017e07:	85 c0                	test   eax,eax
c0017e09:	79 02                	jns    c0017e0d <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0017e0b:	31 d2                	xor    edx,edx
c0017e0d:	01 c2                	add    edx,eax
c0017e0f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017e12:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0017e19:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0017e1d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0017e21:	99                   	cdq    
c0017e22:	01 c1                	add    ecx,eax
c0017e24:	11 d3                	adc    ebx,edx
c0017e26:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0017e2a:	29 c6                	sub    esi,eax
c0017e2c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0017e30:	19 d7                	sbb    edi,edx
c0017e32:	89 34 24             	mov    DWORD PTR [esp],esi
c0017e35:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0017e39:	b8 ff 07 00 00       	mov    eax,0x7ff
c0017e3e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0017e41:	b8 00 00 00 00       	mov    eax,0x0
c0017e46:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0017e4a:	7d 43                	jge    c0017e8f <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0017e4c:	52                   	push   edx
c0017e4d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0017e51:	50                   	push   eax
c0017e52:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017e56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e5a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017e5e:	0f ac d0 0b          	shrd   eax,edx,0xb
c0017e62:	50                   	push   eax
c0017e63:	e8 ab fd ff ff       	call   c0017c13 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017e68:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0017e70:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0017e75:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0017e7d:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0017e85:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0017e8a:	83 c4 10             	add    esp,0x10
c0017e8d:	eb aa                	jmp    c0017e39 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0017e8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e93:	0b 04 24             	or     eax,DWORD PTR [esp]
c0017e96:	74 2a                	je     c0017ec2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0017e98:	50                   	push   eax
c0017e99:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0017e9d:	50                   	push   eax
c0017e9e:	8d 74 24 28          	lea    esi,[esp+0x28]
c0017ea2:	56                   	push   esi
c0017ea3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017ea7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017eab:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0017eaf:	51                   	push   ecx
c0017eb0:	e8 5e fd ff ff       	call   c0017c13 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017eb5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0017eb9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017ebd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017ebf:	83 c4 10             	add    esp,0x10
c0017ec2:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0017ec9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017ecd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ed1:	89 18                	mov    DWORD PTR [eax],ebx
c0017ed3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ed7:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0017eda:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0017edd:	31 c0                	xor    eax,eax
c0017edf:	eb 05                	jmp    c0017ee6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0017ee1:	b8 04 00 00 00       	mov    eax,0x4
c0017ee6:	81 c4 2c 08 00 00    	add    esp,0x82c
c0017eec:	5b                   	pop    ebx
c0017eed:	5e                   	pop    esi
c0017eee:	5f                   	pop    edi
c0017eef:	5d                   	pop    ebp
c0017ef0:	c3                   	ret    
c0017ef1:	90                   	nop

c0017ef2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017ef2:	55                   	push   ebp
c0017ef3:	57                   	push   edi
c0017ef4:	56                   	push   esi
c0017ef5:	53                   	push   ebx
c0017ef6:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0017efc:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0017f03:	85 ed                	test   ebp,ebp
c0017f05:	0f 84 51 02 00 00    	je     c001815c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0017f0b:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0017f13:	0f 84 43 02 00 00    	je     c001815c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0017f19:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017f1c:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0017f1f:	75 0a                	jne    c0017f2b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0017f21:	b8 07 00 00 00       	mov    eax,0x7
c0017f26:	e9 36 02 00 00       	jmp    c0018161 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0017f2b:	50                   	push   eax
c0017f2c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0017f30:	50                   	push   eax
c0017f31:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0017f38:	53                   	push   ebx
c0017f39:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017f3c:	c1 e0 0b             	shl    eax,0xb
c0017f3f:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0017f42:	c1 e8 0b             	shr    eax,0xb
c0017f45:	50                   	push   eax
c0017f46:	e8 c8 fc ff ff       	call   c0017c13 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017f4b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017f4e:	83 c4 10             	add    esp,0x10
c0017f51:	89 c1                	mov    ecx,eax
c0017f53:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0017f56:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0017f5c:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0017f5f:	84 db                	test   bl,bl
c0017f61:	0f 85 8b 00 00 00    	jne    c0017ff2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0017f67:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0017f6d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0017f70:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0017f76:	29 c6                	sub    esi,eax
c0017f78:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0017f7c:	89 f3                	mov    ebx,esi
c0017f7e:	89 f1                	mov    ecx,esi
c0017f80:	c1 fb 1f             	sar    ebx,0x1f
c0017f83:	01 f0                	add    eax,esi
c0017f85:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0017f88:	11 da                	adc    edx,ebx
c0017f8a:	89 04 24             	mov    DWORD PTR [esp],eax
c0017f8d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0017f91:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0017f94:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0017f97:	89 d8                	mov    eax,ebx
c0017f99:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0017f9d:	ba 00 00 00 00       	mov    edx,0x0
c0017fa2:	19 f8                	sbb    eax,edi
c0017fa4:	b8 00 00 00 00       	mov    eax,0x0
c0017fa9:	73 08                	jae    c0017fb3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0017fab:	89 f0                	mov    eax,esi
c0017fad:	89 fa                	mov    edx,edi
c0017faf:	29 c8                	sub    eax,ecx
c0017fb1:	19 da                	sbb    edx,ebx
c0017fb3:	89 d7                	mov    edi,edx
c0017fb5:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0017fb8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0017fbb:	09 c7                	or     edi,eax
c0017fbd:	0f 84 5e ff ff ff    	je     c0017f21 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0017fc3:	57                   	push   edi
c0017fc4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0017fc8:	50                   	push   eax
c0017fc9:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0017fd0:	53                   	push   ebx
c0017fd1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017fd4:	c1 e0 0b             	shl    eax,0xb
c0017fd7:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017fdb:	c1 e8 0b             	shr    eax,0xb
c0017fde:	50                   	push   eax
c0017fdf:	e8 2f fc ff ff       	call   c0017c13 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017fe4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017fe7:	83 c4 10             	add    esp,0x10
c0017fea:	25 ff 07 00 00       	and    eax,0x7ff
c0017fef:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0017ff2:	31 ff                	xor    edi,edi
c0017ff4:	56                   	push   esi
c0017ff5:	6a 28                	push   0x28
c0017ff7:	6a 00                	push   0x0
c0017ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017ffd:	50                   	push   eax
c0017ffe:	e8 a5 84 fe ff       	call   c00004a8 <memset>
c0018003:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018006:	25 ff 07 00 00       	and    eax,0x7ff
c001800b:	89 c6                	mov    esi,eax
c001800d:	83 c6 21             	add    esi,0x21
c0018010:	83 d7 00             	adc    edi,0x0
c0018013:	83 c4 10             	add    esp,0x10
c0018016:	31 c9                	xor    ecx,ecx
c0018018:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001801f:	83 f9 28             	cmp    ecx,0x28
c0018022:	88 04 24             	mov    BYTE PTR [esp],al
c0018025:	0f 94 c2             	sete   dl
c0018028:	88 d0                	mov    al,dl
c001802a:	ba ff 07 00 00       	mov    edx,0x7ff
c001802f:	39 f2                	cmp    edx,esi
c0018031:	ba 00 00 00 00       	mov    edx,0x0
c0018036:	19 fa                	sbb    edx,edi
c0018038:	0f 92 c2             	setb   dl
c001803b:	09 c2                	or     edx,eax
c001803d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0018041:	0f 94 c0             	sete   al
c0018044:	08 d0                	or     al,dl
c0018046:	75 16                	jne    c001805e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0018048:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001804c:	74 10                	je     c001805e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001804e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018051:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0018055:	41                   	inc    ecx
c0018056:	83 c6 01             	add    esi,0x1
c0018059:	83 d7 00             	adc    edi,0x0
c001805c:	eb ba                	jmp    c0018018 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001805e:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0018065:	83 ec 0c             	sub    esp,0xc
c0018068:	8d 74 24 24          	lea    esi,[esp+0x24]
c001806c:	56                   	push   esi
c001806d:	e8 52 84 fe ff       	call   c00004c4 <strlen>
c0018072:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0018079:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001807d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0018085:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018088:	5a                   	pop    edx
c0018089:	25 ff 07 00 00       	and    eax,0x7ff
c001808e:	59                   	pop    ecx
c001808f:	01 f8                	add    eax,edi
c0018091:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0018097:	83 e0 02             	and    eax,0x2
c001809a:	3c 01                	cmp    al,0x1
c001809c:	19 c0                	sbb    eax,eax
c001809e:	83 c0 02             	add    eax,0x2
c00180a1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00180a5:	56                   	push   esi
c00180a6:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00180aa:	50                   	push   eax
c00180ab:	e8 b4 84 fe ff       	call   c0000564 <strcpy>
c00180b0:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00180b4:	83 c4 10             	add    esp,0x10
c00180b7:	84 c0                	test   al,al
c00180b9:	75 21                	jne    c00180dc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c00180bb:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c00180c3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00180cb:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00180d3:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c00180da:	eb 28                	jmp    c0018104 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00180dc:	fe c8                	dec    al
c00180de:	75 24                	jne    c0018104 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00180e0:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c00180e8:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00180f0:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00180f8:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c00180ff:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0018104:	8d 74 24 40          	lea    esi,[esp+0x40]
c0018108:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001810f:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0018116:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018118:	0f b6 f3             	movzx  esi,bl
c001811b:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0018122:	31 db                	xor    ebx,ebx
c0018124:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001812a:	89 df                	mov    edi,ebx
c001812c:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001812f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018132:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0018135:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0018138:	39 c6                	cmp    esi,eax
c001813a:	19 d7                	sbb    edi,edx
c001813c:	72 10                	jb     c001814e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001813e:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0018145:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001814c:	eb 0a                	jmp    c0018158 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001814e:	29 f0                	sub    eax,esi
c0018150:	19 da                	sbb    edx,ebx
c0018152:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0018155:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0018158:	31 c0                	xor    eax,eax
c001815a:	eb 05                	jmp    c0018161 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001815c:	b8 04 00 00 00       	mov    eax,0x4
c0018161:	81 c4 5c 09 00 00    	add    esp,0x95c
c0018167:	5b                   	pop    ebx
c0018168:	5e                   	pop    esi
c0018169:	5f                   	pop    edi
c001816a:	5d                   	pop    ebp
c001816b:	c3                   	ret    

c001816c <readRoot(unsigned int*, unsigned int*, char)>:
c001816c:	57                   	push   edi
c001816d:	56                   	push   esi
c001816e:	81 ec 38 08 00 00    	sub    esp,0x838
c0018174:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001817c:	50                   	push   eax
c001817d:	8d 44 24 38          	lea    eax,[esp+0x38]
c0018181:	50                   	push   eax
c0018182:	6a 10                	push   0x10
c0018184:	e8 8a fa ff ff       	call   c0017c13 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0018189:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0018190:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0018194:	b9 22 00 00 00       	mov    ecx,0x22
c0018199:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001819b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00181a2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00181a6:	89 10                	mov    DWORD PTR [eax],edx
c00181a8:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00181af:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181b3:	89 10                	mov    DWORD PTR [eax],edx
c00181b5:	81 c4 44 08 00 00    	add    esp,0x844
c00181bb:	b0 01                	mov    al,0x1
c00181bd:	5e                   	pop    esi
c00181be:	5f                   	pop    edi
c00181bf:	c3                   	ret    

c00181c0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c00181c0:	55                   	push   ebp
c00181c1:	57                   	push   edi
c00181c2:	56                   	push   esi
c00181c3:	53                   	push   ebx
c00181c4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00181ca:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00181d1:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00181d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00181dc:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c00181e0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00181e4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00181e8:	75 03                	jne    c00181ed <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00181ea:	83 c3 02             	add    ebx,0x2
c00181ed:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c00181f0:	75 03                	jne    c00181f5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c00181f2:	43                   	inc    ebx
c00181f3:	eb f8                	jmp    c00181ed <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00181f5:	52                   	push   edx
c00181f6:	68 00 01 00 00       	push   0x100
c00181fb:	6a 00                	push   0x0
c00181fd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018201:	50                   	push   eax
c0018202:	e8 a1 82 fe ff       	call   c00004a8 <memset>
c0018207:	83 c4 10             	add    esp,0x10
c001820a:	31 d2                	xor    edx,edx
c001820c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001820f:	84 c0                	test   al,al
c0018211:	74 21                	je     c0018234 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0018213:	3c 2f                	cmp    al,0x2f
c0018215:	75 0b                	jne    c0018222 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0018217:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001821b:	bd 01 00 00 00       	mov    ebp,0x1
c0018220:	eb 14                	jmp    c0018236 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0018222:	8d 48 9f             	lea    ecx,[eax-0x61]
c0018225:	80 f9 19             	cmp    cl,0x19
c0018228:	77 03                	ja     c001822d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001822a:	83 e8 20             	sub    eax,0x20
c001822d:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0018231:	42                   	inc    edx
c0018232:	eb d8                	jmp    c001820c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0018234:	31 ed                	xor    ebp,ebp
c0018236:	83 ec 0c             	sub    esp,0xc
c0018239:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0018240:	e8 38 eb fe ff       	call   c0006d7d <malloc>
c0018245:	89 c6                	mov    esi,eax
c0018247:	89 c2                	mov    edx,eax
c0018249:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018250:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0018256:	c1 ef 0b             	shr    edi,0xb
c0018259:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0018260:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0018264:	83 c4 10             	add    esp,0x10
c0018267:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001826c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018270:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c0018277:	74 29                	je     c00182a2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c0018279:	50                   	push   eax
c001827a:	57                   	push   edi
c001827b:	52                   	push   edx
c001827c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0018280:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0018287:	e8 87 f9 ff ff       	call   c0017c13 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001828c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018290:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0018297:	81 c2 00 08 00 00    	add    edx,0x800
c001829d:	83 c4 10             	add    esp,0x10
c00182a0:	eb ca                	jmp    c001826c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c00182a2:	83 ec 0c             	sub    esp,0xc
c00182a5:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00182a9:	57                   	push   edi
c00182aa:	e8 15 82 fe ff       	call   c00004c4 <strlen>
c00182af:	50                   	push   eax
c00182b0:	57                   	push   edi
c00182b1:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00182b8:	56                   	push   esi
c00182b9:	e8 13 f9 ff ff       	call   c0017bd1 <__memmem(unsigned char*, int, unsigned char*, int)>
c00182be:	83 c4 20             	add    esp,0x20
c00182c1:	85 c0                	test   eax,eax
c00182c3:	75 13                	jne    c00182d8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c00182c5:	83 ec 0c             	sub    esp,0xc
c00182c8:	56                   	push   esi
c00182c9:	e8 bf ea fe ff       	call   c0006d8d <free>
c00182ce:	83 c4 10             	add    esp,0x10
c00182d1:	31 c0                	xor    eax,eax
c00182d3:	e9 b3 00 00 00       	jmp    c001838b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c00182d8:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c00182dc:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c00182e0:	c1 e7 08             	shl    edi,0x8
c00182e3:	c1 e2 10             	shl    edx,0x10
c00182e6:	09 d7                	or     edi,edx
c00182e8:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c00182ec:	09 d7                	or     edi,edx
c00182ee:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00182f2:	c1 e2 18             	shl    edx,0x18
c00182f5:	09 d7                	or     edi,edx
c00182f7:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00182fb:	89 d1                	mov    ecx,edx
c00182fd:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0018301:	c1 e1 08             	shl    ecx,0x8
c0018304:	c1 e2 10             	shl    edx,0x10
c0018307:	09 ca                	or     edx,ecx
c0018309:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001830d:	09 ca                	or     edx,ecx
c001830f:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0018313:	c1 e1 18             	shl    ecx,0x18
c0018316:	09 ca                	or     edx,ecx
c0018318:	89 e9                	mov    ecx,ebp
c001831a:	84 c9                	test   cl,cl
c001831c:	74 3c                	je     c001835a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001831e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018322:	83 ec 0c             	sub    esp,0xc
c0018325:	56                   	push   esi
c0018326:	e8 62 ea fe ff       	call   c0006d8d <free>
c001832b:	83 c4 0c             	add    esp,0xc
c001832e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018335:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001833a:	50                   	push   eax
c001833b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018342:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018349:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001834d:	52                   	push   edx
c001834e:	57                   	push   edi
c001834f:	53                   	push   ebx
c0018350:	e8 6b fe ff ff       	call   c00181c0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0018355:	83 c4 20             	add    esp,0x20
c0018358:	eb 31                	jmp    c001838b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001835a:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001835d:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0018364:	d0 e8                	shr    al,1
c0018366:	89 3b                	mov    DWORD PTR [ebx],edi
c0018368:	83 e0 01             	and    eax,0x1
c001836b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0018372:	83 ec 0c             	sub    esp,0xc
c0018375:	89 13                	mov    DWORD PTR [ebx],edx
c0018377:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001837e:	89 03                	mov    DWORD PTR [ebx],eax
c0018380:	56                   	push   esi
c0018381:	e8 07 ea fe ff       	call   c0006d8d <free>
c0018386:	83 c4 10             	add    esp,0x10
c0018389:	b0 01                	mov    al,0x1
c001838b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018391:	5b                   	pop    ebx
c0018392:	5e                   	pop    esi
c0018393:	5f                   	pop    edi
c0018394:	5d                   	pop    ebp
c0018395:	c3                   	ret    

c0018396 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0018396:	55                   	push   ebp
c0018397:	57                   	push   edi
c0018398:	56                   	push   esi
c0018399:	53                   	push   ebx
c001839a:	83 ec 20             	sub    esp,0x20
c001839d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00183a1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00183a5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00183a9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00183b1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00183b9:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00183be:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00183c4:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00183ca:	57                   	push   edi
c00183cb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00183cf:	50                   	push   eax
c00183d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00183d4:	50                   	push   eax
c00183d5:	e8 92 fd ff ff       	call   c001816c <readRoot(unsigned int*, unsigned int*, char)>
c00183da:	5a                   	pop    edx
c00183db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00183df:	e8 e0 80 fe ff       	call   c00004c4 <strlen>
c00183e4:	83 c4 10             	add    esp,0x10
c00183e7:	83 f8 03             	cmp    eax,0x3
c00183ea:	77 17                	ja     c0018403 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00183ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00183f0:	89 03                	mov    DWORD PTR [ebx],eax
c00183f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00183f6:	89 06                	mov    DWORD PTR [esi],eax
c00183f8:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00183ff:	b0 01                	mov    al,0x1
c0018401:	eb 19                	jmp    c001841c <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0018403:	50                   	push   eax
c0018404:	55                   	push   ebp
c0018405:	57                   	push   edi
c0018406:	56                   	push   esi
c0018407:	53                   	push   ebx
c0018408:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001840c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018410:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018414:	e8 a7 fd ff ff       	call   c00181c0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0018419:	83 c4 20             	add    esp,0x20
c001841c:	83 c4 1c             	add    esp,0x1c
c001841f:	5b                   	pop    ebx
c0018420:	5e                   	pop    esi
c0018421:	5f                   	pop    edi
c0018422:	5d                   	pop    ebp
c0018423:	c3                   	ret    

c0018424 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0018424:	57                   	push   edi
c0018425:	56                   	push   esi
c0018426:	53                   	push   ebx
c0018427:	83 ec 10             	sub    esp,0x10
c001842a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001842e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0018432:	85 ff                	test   edi,edi
c0018434:	0f 84 8b 00 00 00    	je     c00184c5 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001843a:	85 f6                	test   esi,esi
c001843c:	0f 84 83 00 00 00    	je     c00184c5 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0018442:	b8 03 00 00 00       	mov    eax,0x3
c0018447:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001844c:	75 7c                	jne    c00184ca <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001844e:	83 ec 0c             	sub    esp,0xc
c0018451:	6a 1c                	push   0x1c
c0018453:	e8 25 e9 fe ff       	call   c0006d7d <malloc>
c0018458:	89 07                	mov    DWORD PTR [edi],eax
c001845a:	89 c3                	mov    ebx,eax
c001845c:	58                   	pop    eax
c001845d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018461:	50                   	push   eax
c0018462:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0018465:	50                   	push   eax
c0018466:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001846a:	50                   	push   eax
c001846b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001846f:	50                   	push   eax
c0018470:	56                   	push   esi
c0018471:	e8 20 ff ff ff       	call   c0018396 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0018476:	83 c4 20             	add    esp,0x20
c0018479:	84 c0                	test   al,al
c001847b:	74 07                	je     c0018484 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001847d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018482:	74 0b                	je     c001848f <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c0018484:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0018488:	b8 01 00 00 00       	mov    eax,0x1
c001848d:	eb 3b                	jmp    c00184ca <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001848f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018493:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0018497:	89 03                	mov    DWORD PTR [ebx],eax
c0018499:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00184a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00184a4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00184ab:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00184b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00184b5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00184bc:	8a 06                	mov    al,BYTE PTR [esi]
c00184be:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00184c1:	31 c0                	xor    eax,eax
c00184c3:	eb 05                	jmp    c00184ca <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00184c5:	b8 04 00 00 00       	mov    eax,0x4
c00184ca:	83 c4 10             	add    esp,0x10
c00184cd:	5b                   	pop    ebx
c00184ce:	5e                   	pop    esi
c00184cf:	5f                   	pop    edi
c00184d0:	c3                   	ret    
c00184d1:	90                   	nop

c00184d2 <ISO9660::exists(char const*)>:
c00184d2:	83 ec 28             	sub    esp,0x28
c00184d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184d9:	8d 54 24 18          	lea    edx,[esp+0x18]
c00184dd:	52                   	push   edx
c00184de:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00184e1:	52                   	push   edx
c00184e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00184e6:	52                   	push   edx
c00184e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00184eb:	52                   	push   edx
c00184ec:	50                   	push   eax
c00184ed:	e8 a4 fe ff ff       	call   c0018396 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00184f2:	83 c4 3c             	add    esp,0x3c
c00184f5:	c3                   	ret    

c00184f6 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00184f6:	56                   	push   esi
c00184f7:	53                   	push   ebx
c00184f8:	83 ec 14             	sub    esp,0x14
c00184fb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00184ff:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018503:	85 db                	test   ebx,ebx
c0018505:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0018509:	0f 94 c2             	sete   dl
c001850c:	85 f6                	test   esi,esi
c001850e:	0f 94 c0             	sete   al
c0018511:	08 c2                	or     dl,al
c0018513:	75 68                	jne    c001857d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0018515:	85 c9                	test   ecx,ecx
c0018517:	74 64                	je     c001857d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0018519:	83 ec 0c             	sub    esp,0xc
c001851c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001851f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018523:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0018529:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0018530:	50                   	push   eax
c0018531:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0018534:	50                   	push   eax
c0018535:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018539:	50                   	push   eax
c001853a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001853e:	50                   	push   eax
c001853f:	51                   	push   ecx
c0018540:	e8 51 fe ff ff       	call   c0018396 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0018545:	83 c4 20             	add    esp,0x20
c0018548:	ba 01 00 00 00       	mov    edx,0x1
c001854d:	84 c0                	test   al,al
c001854f:	74 31                	je     c0018582 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0018551:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018555:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001855c:	89 03                	mov    DWORD PTR [ebx],eax
c001855e:	ba 00 00 00 00       	mov    edx,0x0
c0018563:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018567:	85 c0                	test   eax,eax
c0018569:	0f 95 06             	setne  BYTE PTR [esi]
c001856c:	74 14                	je     c0018582 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001856e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0018574:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001857b:	eb 05                	jmp    c0018582 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001857d:	ba 04 00 00 00       	mov    edx,0x4
c0018582:	83 c4 14             	add    esp,0x14
c0018585:	89 d0                	mov    eax,edx
c0018587:	5b                   	pop    ebx
c0018588:	5e                   	pop    esi
c0018589:	c3                   	ret    

c001858a <ISO9660::openDir(char const*, void**)>:
c001858a:	57                   	push   edi
c001858b:	56                   	push   esi
c001858c:	53                   	push   ebx
c001858d:	83 ec 10             	sub    esp,0x10
c0018590:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0018594:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0018598:	85 ff                	test   edi,edi
c001859a:	74 7b                	je     c0018617 <ISO9660::openDir(char const*, void**)+0x8d>
c001859c:	85 f6                	test   esi,esi
c001859e:	74 77                	je     c0018617 <ISO9660::openDir(char const*, void**)+0x8d>
c00185a0:	83 ec 0c             	sub    esp,0xc
c00185a3:	6a 1c                	push   0x1c
c00185a5:	e8 d3 e7 fe ff       	call   c0006d7d <malloc>
c00185aa:	89 07                	mov    DWORD PTR [edi],eax
c00185ac:	89 c3                	mov    ebx,eax
c00185ae:	58                   	pop    eax
c00185af:	8d 44 24 18          	lea    eax,[esp+0x18]
c00185b3:	50                   	push   eax
c00185b4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00185b7:	50                   	push   eax
c00185b8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00185bc:	50                   	push   eax
c00185bd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00185c1:	50                   	push   eax
c00185c2:	56                   	push   esi
c00185c3:	e8 ce fd ff ff       	call   c0018396 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00185c8:	83 c4 20             	add    esp,0x20
c00185cb:	84 c0                	test   al,al
c00185cd:	74 07                	je     c00185d6 <ISO9660::openDir(char const*, void**)+0x4c>
c00185cf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00185d4:	75 0b                	jne    c00185e1 <ISO9660::openDir(char const*, void**)+0x57>
c00185d6:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00185da:	b8 01 00 00 00       	mov    eax,0x1
c00185df:	eb 3b                	jmp    c001861c <ISO9660::openDir(char const*, void**)+0x92>
c00185e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00185e5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00185e9:	89 03                	mov    DWORD PTR [ebx],eax
c00185eb:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00185f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00185f6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00185fd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0018604:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0018607:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001860e:	8a 06                	mov    al,BYTE PTR [esi]
c0018610:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0018613:	31 c0                	xor    eax,eax
c0018615:	eb 05                	jmp    c001861c <ISO9660::openDir(char const*, void**)+0x92>
c0018617:	b8 04 00 00 00       	mov    eax,0x4
c001861c:	83 c4 10             	add    esp,0x10
c001861f:	5b                   	pop    ebx
c0018620:	5e                   	pop    esi
c0018621:	5f                   	pop    edi
c0018622:	c3                   	ret    
c0018623:	90                   	nop

c0018624 <ISO9660::ISO9660()>:
c0018624:	83 ec 0c             	sub    esp,0xc
c0018627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001862b:	83 ec 0c             	sub    esp,0xc
c001862e:	50                   	push   eax
c001862f:	e8 ea 17 ff ff       	call   c0009e1e <Filesystem::Filesystem()>
c0018634:	83 c4 10             	add    esp,0x10
c0018637:	ba c4 f8 01 c0       	mov    edx,0xc001f8c4
c001863c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018640:	89 10                	mov    DWORD PTR [eax],edx
c0018642:	90                   	nop
c0018643:	83 c4 0c             	add    esp,0xc
c0018646:	c3                   	ret    
c0018647:	90                   	nop

c0018648 <SoundCard::beginPlayback()>:
c0018648:	c7 44 24 04 24 f9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f924
c0018650:	e9 88 71 ff ff       	jmp    c000f7dd <Krnl::panic(char const*)>
c0018655:	90                   	nop

c0018656 <SoundCard::stopPlayback()>:
c0018656:	c7 44 24 04 24 f9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f924
c001865e:	e9 7a 71 ff ff       	jmp    c000f7dd <Krnl::panic(char const*)>
c0018663:	90                   	nop

c0018664 <SoundCard::SoundCard(char const*)>:
c0018664:	83 ec 1c             	sub    esp,0x1c
c0018667:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001866b:	83 ec 08             	sub    esp,0x8
c001866e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018672:	50                   	push   eax
c0018673:	e8 4a 2a ff ff       	call   c000b0c2 <Device::Device(char const*)>
c0018678:	83 c4 10             	add    esp,0x10
c001867b:	ba 70 f9 01 c0       	mov    edx,0xc001f970
c0018680:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018684:	89 10                	mov    DWORD PTR [eax],edx
c0018686:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001868a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0018691:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018695:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001869f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186a3:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c00186ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186b1:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c00186bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186bf:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00186c9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00186d1:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00186d6:	7f 19                	jg     c00186f1 <SoundCard::SoundCard(char const*)+0x8d>
c00186d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00186e0:	83 c2 54             	add    edx,0x54
c00186e3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00186eb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00186ef:	eb e0                	jmp    c00186d1 <SoundCard::SoundCard(char const*)+0x6d>
c00186f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186f5:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00186fc:	90                   	nop
c00186fd:	83 c4 1c             	add    esp,0x1c
c0018700:	c3                   	ret    
c0018701:	90                   	nop

c0018702 <SoundCard::~SoundCard()>:
c0018702:	83 ec 0c             	sub    esp,0xc
c0018705:	ba 70 f9 01 c0       	mov    edx,0xc001f970
c001870a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001870e:	89 10                	mov    DWORD PTR [eax],edx
c0018710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018714:	83 ec 0c             	sub    esp,0xc
c0018717:	50                   	push   eax
c0018718:	e8 0f 27 ff ff       	call   c000ae2c <Device::~Device()>
c001871d:	83 c4 10             	add    esp,0x10
c0018720:	90                   	nop
c0018721:	83 c4 0c             	add    esp,0xc
c0018724:	c3                   	ret    
c0018725:	90                   	nop

c0018726 <SoundCard::~SoundCard()>:
c0018726:	83 ec 0c             	sub    esp,0xc
c0018729:	83 ec 0c             	sub    esp,0xc
c001872c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018730:	e8 cd ff ff ff       	call   c0018702 <SoundCard::~SoundCard()>
c0018735:	83 c4 10             	add    esp,0x10
c0018738:	83 ec 08             	sub    esp,0x8
c001873b:	68 e8 01 00 00       	push   0x1e8
c0018740:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018744:	e8 dd 12 ff ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c0018749:	83 c4 10             	add    esp,0x10
c001874c:	83 c4 0c             	add    esp,0xc
c001874f:	c3                   	ret    

c0018750 <SoundCard::configureRates(int, int, int)>:
c0018750:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018754:	31 c0                	xor    eax,eax
c0018756:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001875d:	75 20                	jne    c001877f <SoundCard::configureRates(int, int, int)+0x2f>
c001875f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018763:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0018769:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001876d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0018773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018777:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001877d:	b0 01                	mov    al,0x1
c001877f:	c3                   	ret    

c0018780 <SoundCard::getSamples16(int, short*)>:
c0018780:	55                   	push   ebp
c0018781:	57                   	push   edi
c0018782:	31 ff                	xor    edi,edi
c0018784:	56                   	push   esi
c0018785:	53                   	push   ebx
c0018786:	31 db                	xor    ebx,ebx
c0018788:	83 ec 10             	sub    esp,0x10
c001878b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001878f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0018793:	8d 04 36             	lea    eax,[esi+esi*1]
c0018796:	50                   	push   eax
c0018797:	6a 00                	push   0x0
c0018799:	55                   	push   ebp
c001879a:	e8 09 7d fe ff       	call   c00004a8 <memset>
c001879f:	83 c4 10             	add    esp,0x10
c00187a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187a6:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c00187ad:	85 c0                	test   eax,eax
c00187af:	74 1b                	je     c00187cc <SoundCard::getSamples16(int, short*)+0x4c>
c00187b1:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00187b5:	75 15                	jne    c00187cc <SoundCard::getSamples16(int, short*)+0x4c>
c00187b7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00187bb:	55                   	push   ebp
c00187bc:	56                   	push   esi
c00187bd:	50                   	push   eax
c00187be:	e8 ed 02 00 00       	call   c0018ab0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c00187c3:	83 c4 10             	add    esp,0x10
c00187c6:	39 c7                	cmp    edi,eax
c00187c8:	7d 02                	jge    c00187cc <SoundCard::getSamples16(int, short*)+0x4c>
c00187ca:	89 c7                	mov    edi,eax
c00187cc:	43                   	inc    ebx
c00187cd:	83 fb 20             	cmp    ebx,0x20
c00187d0:	75 d0                	jne    c00187a2 <SoundCard::getSamples16(int, short*)+0x22>
c00187d2:	83 c4 0c             	add    esp,0xc
c00187d5:	89 f8                	mov    eax,edi
c00187d7:	5b                   	pop    ebx
c00187d8:	5e                   	pop    esi
c00187d9:	5f                   	pop    edi
c00187da:	5d                   	pop    ebp
c00187db:	c3                   	ret    

c00187dc <SoundCard::getSamples32(int, int*)>:
c00187dc:	55                   	push   ebp
c00187dd:	57                   	push   edi
c00187de:	31 ff                	xor    edi,edi
c00187e0:	56                   	push   esi
c00187e1:	31 f6                	xor    esi,esi
c00187e3:	53                   	push   ebx
c00187e4:	83 ec 10             	sub    esp,0x10
c00187e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00187eb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00187ef:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00187f3:	c1 e0 02             	shl    eax,0x2
c00187f6:	50                   	push   eax
c00187f7:	6a 00                	push   0x0
c00187f9:	55                   	push   ebp
c00187fa:	e8 a9 7c fe ff       	call   c00004a8 <memset>
c00187ff:	83 c4 10             	add    esp,0x10
c0018802:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0018809:	85 c0                	test   eax,eax
c001880b:	74 1b                	je     c0018828 <SoundCard::getSamples32(int, int*)+0x4c>
c001880d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018811:	75 15                	jne    c0018828 <SoundCard::getSamples32(int, int*)+0x4c>
c0018813:	53                   	push   ebx
c0018814:	55                   	push   ebp
c0018815:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018819:	50                   	push   eax
c001881a:	e8 55 03 00 00       	call   c0018b74 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001881f:	83 c4 10             	add    esp,0x10
c0018822:	39 c6                	cmp    esi,eax
c0018824:	7d 02                	jge    c0018828 <SoundCard::getSamples32(int, int*)+0x4c>
c0018826:	89 c6                	mov    esi,eax
c0018828:	47                   	inc    edi
c0018829:	83 ff 20             	cmp    edi,0x20
c001882c:	75 d4                	jne    c0018802 <SoundCard::getSamples32(int, int*)+0x26>
c001882e:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0018834:	85 f6                	test   esi,esi
c0018836:	75 0f                	jne    c0018847 <SoundCard::getSamples32(int, int*)+0x6b>
c0018838:	84 c0                	test   al,al
c001883a:	74 1b                	je     c0018857 <SoundCard::getSamples32(int, int*)+0x7b>
c001883c:	83 ec 0c             	sub    esp,0xc
c001883f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018841:	53                   	push   ebx
c0018842:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0018845:	eb 0d                	jmp    c0018854 <SoundCard::getSamples32(int, int*)+0x78>
c0018847:	84 c0                	test   al,al
c0018849:	75 0c                	jne    c0018857 <SoundCard::getSamples32(int, int*)+0x7b>
c001884b:	83 ec 0c             	sub    esp,0xc
c001884e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018850:	53                   	push   ebx
c0018851:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0018854:	83 c4 10             	add    esp,0x10
c0018857:	83 c4 0c             	add    esp,0xc
c001885a:	89 f0                	mov    eax,esi
c001885c:	5b                   	pop    ebx
c001885d:	5e                   	pop    esi
c001885e:	5f                   	pop    edi
c001885f:	5d                   	pop    ebp
c0018860:	c3                   	ret    
c0018861:	90                   	nop

c0018862 <SoundCard::addChannel(SoundPort*)>:
c0018862:	83 ec 0c             	sub    esp,0xc
c0018865:	31 c0                	xor    eax,eax
c0018867:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001886b:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0018873:	74 1b                	je     c0018890 <SoundCard::addChannel(SoundPort*)+0x2e>
c0018875:	40                   	inc    eax
c0018876:	83 f8 20             	cmp    eax,0x20
c0018879:	75 f0                	jne    c001886b <SoundCard::addChannel(SoundPort*)+0x9>
c001887b:	83 ec 0c             	sub    esp,0xc
c001887e:	68 49 f9 01 c0       	push   0xc001f949
c0018883:	e8 55 6f ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0018888:	83 c4 10             	add    esp,0x10
c001888b:	83 c8 ff             	or     eax,0xffffffff
c001888e:	eb 0b                	jmp    c001889b <SoundCard::addChannel(SoundPort*)+0x39>
c0018890:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018894:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001889b:	83 c4 0c             	add    esp,0xc
c001889e:	c3                   	ret    
c001889f:	90                   	nop

c00188a0 <SoundCard::removeChannel(int)>:
c00188a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00188a8:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c00188b3:	c3                   	ret    

c00188b4 <SoundPort::SoundPort(int, int, int, int)>:
c00188b4:	83 ec 0c             	sub    esp,0xc
c00188b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188bb:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00188c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188c6:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00188ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00188d2:	89 10                	mov    DWORD PTR [eax],edx
c00188d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00188dc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00188df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00188e7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00188ea:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00188ef:	75 13                	jne    c0018904 <SoundPort::SoundPort(int, int, int, int)+0x50>
c00188f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00188f7:	05 a0 0f 00 00       	add    eax,0xfa0
c00188fc:	01 c0                	add    eax,eax
c00188fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018902:	66 90                	xchg   ax,ax
c0018904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018908:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001890c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001890f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018913:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001891a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001891e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018921:	c1 e0 02             	shl    eax,0x2
c0018924:	83 ec 0c             	sub    esp,0xc
c0018927:	50                   	push   eax
c0018928:	e8 50 e4 fe ff       	call   c0006d7d <malloc>
c001892d:	83 c4 10             	add    esp,0x10
c0018930:	89 c2                	mov    edx,eax
c0018932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018936:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018939:	90                   	nop
c001893a:	83 c4 0c             	add    esp,0xc
c001893d:	c3                   	ret    
c001893e:	66 90                	xchg   ax,ax

c0018940 <SoundPort::~SoundPort()>:
c0018940:	83 ec 0c             	sub    esp,0xc
c0018943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018947:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001894a:	85 c0                	test   eax,eax
c001894c:	74 1e                	je     c001896c <SoundPort::~SoundPort()+0x2c>
c001894e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018952:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018955:	83 ec 0c             	sub    esp,0xc
c0018958:	50                   	push   eax
c0018959:	e8 2f e4 fe ff       	call   c0006d8d <free>
c001895e:	83 c4 10             	add    esp,0x10
c0018961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018965:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001896c:	90                   	nop
c001896d:	83 c4 0c             	add    esp,0xc
c0018970:	c3                   	ret    
c0018971:	90                   	nop
c0018972:	66 90                	xchg   ax,ax

c0018974 <SoundPort::unpause()>:
c0018974:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018978:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001897c:	c3                   	ret    
c001897d:	90                   	nop
c001897e:	66 90                	xchg   ax,ax

c0018980 <SoundPort::pause()>:
c0018980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018984:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018988:	c3                   	ret    
c0018989:	90                   	nop
c001898a:	66 90                	xchg   ax,ax

c001898c <SoundPort::getBufferUsed()>:
c001898c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018990:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018993:	c3                   	ret    

c0018994 <SoundPort::getBufferSize()>:
c0018994:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018998:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001899b:	c3                   	ret    

c001899c <SoundPort::buffer16(short*, int)>:
c001899c:	55                   	push   ebp
c001899d:	57                   	push   edi
c001899e:	56                   	push   esi
c001899f:	53                   	push   ebx
c00189a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00189a4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00189a8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00189ab:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c00189ae:	74 68                	je     c0018a18 <SoundPort::buffer16(short*, int)+0x7c>
c00189b0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00189b4:	85 c9                	test   ecx,ecx
c00189b6:	7e 60                	jle    c0018a18 <SoundPort::buffer16(short*, int)+0x7c>
c00189b8:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c00189bc:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00189bf:	c1 e1 0f             	shl    ecx,0xf
c00189c2:	8d 70 01             	lea    esi,[eax+0x1]
c00189c5:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00189c8:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c00189cb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00189ce:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00189d1:	74 4d                	je     c0018a20 <SoundPort::buffer16(short*, int)+0x84>
c00189d3:	31 f6                	xor    esi,esi
c00189d5:	eb 21                	jmp    c00189f8 <SoundPort::buffer16(short*, int)+0x5c>
c00189d7:	90                   	nop
c00189d8:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c00189dd:	8d 79 01             	lea    edi,[ecx+0x1]
c00189e0:	c1 e3 0f             	shl    ebx,0xf
c00189e3:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c00189e6:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c00189e9:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00189ec:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00189ef:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00189f2:	74 1c                	je     c0018a10 <SoundPort::buffer16(short*, int)+0x74>
c00189f4:	89 c6                	mov    esi,eax
c00189f6:	66 90                	xchg   ax,ax
c00189f8:	8d 46 01             	lea    eax,[esi+0x1]
c00189fb:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00189ff:	75 d7                	jne    c00189d8 <SoundPort::buffer16(short*, int)+0x3c>
c0018a01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018a05:	8d 76 00             	lea    esi,[esi+0x0]
c0018a08:	5b                   	pop    ebx
c0018a09:	5e                   	pop    esi
c0018a0a:	5f                   	pop    edi
c0018a0b:	5d                   	pop    ebp
c0018a0c:	c3                   	ret    
c0018a0d:	8d 76 00             	lea    esi,[esi+0x0]
c0018a10:	5b                   	pop    ebx
c0018a11:	8d 46 02             	lea    eax,[esi+0x2]
c0018a14:	5e                   	pop    esi
c0018a15:	5f                   	pop    edi
c0018a16:	5d                   	pop    ebp
c0018a17:	c3                   	ret    
c0018a18:	5b                   	pop    ebx
c0018a19:	31 c0                	xor    eax,eax
c0018a1b:	5e                   	pop    esi
c0018a1c:	5f                   	pop    edi
c0018a1d:	5d                   	pop    ebp
c0018a1e:	c3                   	ret    
c0018a1f:	90                   	nop
c0018a20:	b8 01 00 00 00       	mov    eax,0x1
c0018a25:	eb e1                	jmp    c0018a08 <SoundPort::buffer16(short*, int)+0x6c>
c0018a27:	90                   	nop

c0018a28 <SoundPort::buffer32(int*, int)>:
c0018a28:	55                   	push   ebp
c0018a29:	57                   	push   edi
c0018a2a:	56                   	push   esi
c0018a2b:	53                   	push   ebx
c0018a2c:	51                   	push   ecx
c0018a2d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a35:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018a38:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018a3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a3f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018a42:	74 5c                	je     c0018aa0 <SoundPort::buffer32(int*, int)+0x78>
c0018a44:	85 c0                	test   eax,eax
c0018a46:	7e 58                	jle    c0018aa0 <SoundPort::buffer32(int*, int)+0x78>
c0018a48:	8d 71 01             	lea    esi,[ecx+0x1]
c0018a4b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0018a4e:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018a51:	8b 37                	mov    esi,DWORD PTR [edi]
c0018a53:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0018a56:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018a59:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018a5c:	74 4a                	je     c0018aa8 <SoundPort::buffer32(int*, int)+0x80>
c0018a5e:	31 f6                	xor    esi,esi
c0018a60:	eb 1e                	jmp    c0018a80 <SoundPort::buffer32(int*, int)+0x58>
c0018a62:	66 90                	xchg   ax,ax
c0018a64:	8d 69 01             	lea    ebp,[ecx+0x1]
c0018a67:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0018a6a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0018a6d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018a70:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0018a74:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018a77:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018a7a:	74 18                	je     c0018a94 <SoundPort::buffer32(int*, int)+0x6c>
c0018a7c:	89 de                	mov    esi,ebx
c0018a7e:	66 90                	xchg   ax,ax
c0018a80:	8d 5e 01             	lea    ebx,[esi+0x1]
c0018a83:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0018a86:	75 dc                	jne    c0018a64 <SoundPort::buffer32(int*, int)+0x3c>
c0018a88:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018a8b:	90                   	nop
c0018a8c:	5a                   	pop    edx
c0018a8d:	5b                   	pop    ebx
c0018a8e:	5e                   	pop    esi
c0018a8f:	5f                   	pop    edi
c0018a90:	5d                   	pop    ebp
c0018a91:	c3                   	ret    
c0018a92:	66 90                	xchg   ax,ax
c0018a94:	5a                   	pop    edx
c0018a95:	8d 46 02             	lea    eax,[esi+0x2]
c0018a98:	5b                   	pop    ebx
c0018a99:	5e                   	pop    esi
c0018a9a:	5f                   	pop    edi
c0018a9b:	5d                   	pop    ebp
c0018a9c:	c3                   	ret    
c0018a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0018aa0:	5a                   	pop    edx
c0018aa1:	31 c0                	xor    eax,eax
c0018aa3:	5b                   	pop    ebx
c0018aa4:	5e                   	pop    esi
c0018aa5:	5f                   	pop    edi
c0018aa6:	5d                   	pop    ebp
c0018aa7:	c3                   	ret    
c0018aa8:	b8 01 00 00 00       	mov    eax,0x1
c0018aad:	eb dd                	jmp    c0018a8c <SoundPort::buffer32(int*, int)+0x64>
c0018aaf:	90                   	nop

c0018ab0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0018ab0:	57                   	push   edi
c0018ab1:	56                   	push   esi
c0018ab2:	53                   	push   ebx
c0018ab3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018ab7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0018abb:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0018ac1:	39 03                	cmp    DWORD PTR [ebx],eax
c0018ac3:	74 13                	je     c0018ad8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0018ac5:	83 ec 0c             	sub    esp,0xc
c0018ac8:	68 9c f9 01 c0       	push   0xc001f99c
c0018acd:	e8 0b 6d ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0018ad2:	83 c4 10             	add    esp,0x10
c0018ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ad8:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0018ade:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0018ae1:	74 11                	je     c0018af4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0018ae3:	83 ec 0c             	sub    esp,0xc
c0018ae6:	68 db f9 01 c0       	push   0xc001f9db
c0018aeb:	e8 ed 6c ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0018af0:	83 c4 10             	add    esp,0x10
c0018af3:	90                   	nop
c0018af4:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0018afa:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0018afd:	74 11                	je     c0018b10 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0018aff:	83 ec 0c             	sub    esp,0xc
c0018b02:	68 db f9 01 c0       	push   0xc001f9db
c0018b07:	e8 d1 6c ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0018b0c:	83 c4 10             	add    esp,0x10
c0018b0f:	90                   	nop
c0018b10:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0018b13:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0018b17:	7e 07                	jle    c0018b20 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0018b19:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0018b20:	85 f6                	test   esi,esi
c0018b22:	7e 2c                	jle    c0018b50 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0018b24:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018b28:	8d 3c 36             	lea    edi,[esi+esi*1]
c0018b2b:	31 c9                	xor    ecx,ecx
c0018b2d:	01 d7                	add    edi,edx
c0018b2f:	90                   	nop
c0018b30:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0018b33:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0018b36:	85 c0                	test   eax,eax
c0018b38:	79 06                	jns    c0018b40 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0018b3a:	05 ff 7f 00 00       	add    eax,0x7fff
c0018b3f:	90                   	nop
c0018b40:	c1 f8 0f             	sar    eax,0xf
c0018b43:	83 c1 04             	add    ecx,0x4
c0018b46:	66 01 02             	add    WORD PTR [edx],ax
c0018b49:	83 c2 02             	add    edx,0x2
c0018b4c:	39 d7                	cmp    edi,edx
c0018b4e:	75 e0                	jne    c0018b30 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0018b50:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0018b53:	50                   	push   eax
c0018b54:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018b57:	29 f0                	sub    eax,esi
c0018b59:	c1 e0 02             	shl    eax,0x2
c0018b5c:	50                   	push   eax
c0018b5d:	8d 04 b2             	lea    eax,[edx+esi*4]
c0018b60:	50                   	push   eax
c0018b61:	52                   	push   edx
c0018b62:	e8 79 78 fe ff       	call   c00003e0 <memmove>
c0018b67:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0018b6a:	83 c4 10             	add    esp,0x10
c0018b6d:	89 f0                	mov    eax,esi
c0018b6f:	5b                   	pop    ebx
c0018b70:	5e                   	pop    esi
c0018b71:	5f                   	pop    edi
c0018b72:	c3                   	ret    
c0018b73:	90                   	nop

c0018b74 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0018b74:	57                   	push   edi
c0018b75:	56                   	push   esi
c0018b76:	53                   	push   ebx
c0018b77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018b7b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018b7f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018b83:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0018b89:	39 06                	cmp    DWORD PTR [esi],eax
c0018b8b:	74 13                	je     c0018ba0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0018b8d:	83 ec 0c             	sub    esp,0xc
c0018b90:	68 bc f9 01 c0       	push   0xc001f9bc
c0018b95:	e8 43 6c ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0018b9a:	83 c4 10             	add    esp,0x10
c0018b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0018ba0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0018ba6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0018ba9:	74 11                	je     c0018bbc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0018bab:	83 ec 0c             	sub    esp,0xc
c0018bae:	68 f7 f9 01 c0       	push   0xc001f9f7
c0018bb3:	e8 25 6c ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0018bb8:	83 c4 10             	add    esp,0x10
c0018bbb:	90                   	nop
c0018bbc:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0018bc2:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0018bc5:	74 11                	je     c0018bd8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0018bc7:	83 ec 0c             	sub    esp,0xc
c0018bca:	68 f7 f9 01 c0       	push   0xc001f9f7
c0018bcf:	e8 09 6c ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0018bd4:	83 c4 10             	add    esp,0x10
c0018bd7:	90                   	nop
c0018bd8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0018bdb:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0018bdf:	7e 07                	jle    c0018be8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0018be1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018be5:	8d 76 00             	lea    esi,[esi+0x0]
c0018be8:	85 ff                	test   edi,edi
c0018bea:	7e 1c                	jle    c0018c08 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0018bec:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0018bf3:	31 c0                	xor    eax,eax
c0018bf5:	8d 76 00             	lea    esi,[esi+0x0]
c0018bf8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0018bfb:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0018bfe:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0018c01:	83 c0 04             	add    eax,0x4
c0018c04:	39 c1                	cmp    ecx,eax
c0018c06:	75 f0                	jne    c0018bf8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0018c08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0018c0b:	50                   	push   eax
c0018c0c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018c0f:	29 f8                	sub    eax,edi
c0018c11:	c1 e0 02             	shl    eax,0x2
c0018c14:	50                   	push   eax
c0018c15:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018c18:	50                   	push   eax
c0018c19:	52                   	push   edx
c0018c1a:	e8 c1 77 fe ff       	call   c00003e0 <memmove>
c0018c1f:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0018c22:	83 c4 10             	add    esp,0x10
c0018c25:	89 f8                	mov    eax,edi
c0018c27:	5b                   	pop    ebx
c0018c28:	5e                   	pop    esi
c0018c29:	5f                   	pop    edi
c0018c2a:	c3                   	ret    
c0018c2b:	90                   	nop

c0018c2c <PCI::open(int, int, void*)>:
c0018c2c:	83 ec 18             	sub    esp,0x18
c0018c2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c33:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018c37:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018c3d:	8b 10                	mov    edx,DWORD PTR [eax]
c0018c3f:	50                   	push   eax
c0018c40:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0018c43:	31 c0                	xor    eax,eax
c0018c45:	83 c4 1c             	add    esp,0x1c
c0018c48:	c3                   	ret    
c0018c49:	90                   	nop

c0018c4a <PCI::close(int, int, void*)>:
c0018c4a:	31 c0                	xor    eax,eax
c0018c4c:	c3                   	ret    
c0018c4d:	90                   	nop

c0018c4e <PCI::PCI()>:
c0018c4e:	83 ec 0c             	sub    esp,0xc
c0018c51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c55:	83 ec 08             	sub    esp,0x8
c0018c58:	68 13 fa 01 c0       	push   0xc001fa13
c0018c5d:	50                   	push   eax
c0018c5e:	e8 21 1c ff ff       	call   c000a884 <Bus::Bus(char const*)>
c0018c63:	83 c4 10             	add    esp,0x10
c0018c66:	ba bc fa 01 c0       	mov    edx,0xc001fabc
c0018c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c6f:	89 10                	mov    DWORD PTR [eax],edx
c0018c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c75:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0018c7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c83:	a3 c0 46 02 c0       	mov    ds:0xc00246c0,eax
c0018c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018c92:	0f b6 d0             	movzx  edx,al
c0018c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c99:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0018ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ca4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018caa:	0f b6 d0             	movzx  edx,al
c0018cad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cb1:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0018cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cba:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018cc0:	8d 50 01             	lea    edx,[eax+0x1]
c0018cc3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018cc7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0018ccd:	0f b6 d0             	movzx  edx,al
c0018cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cd4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0018cd8:	83 c9 c0             	or     ecx,0xffffffc0
c0018cdb:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0018cdf:	90                   	nop
c0018ce0:	83 c4 0c             	add    esp,0xc
c0018ce3:	c3                   	ret    

c0018ce4 <PCI::readBAR8(unsigned int, int)>:
c0018ce4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018ce8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018cec:	f6 c2 01             	test   dl,0x1
c0018cef:	74 07                	je     c0018cf8 <PCI::readBAR8(unsigned int, int)+0x14>
c0018cf1:	83 e2 fc             	and    edx,0xfffffffc
c0018cf4:	01 c2                	add    edx,eax
c0018cf6:	ec                   	in     al,dx
c0018cf7:	c3                   	ret    
c0018cf8:	83 e2 f0             	and    edx,0xfffffff0
c0018cfb:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0018cfe:	c3                   	ret    
c0018cff:	90                   	nop

c0018d00 <PCI::readBAR16(unsigned int, int)>:
c0018d00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018d04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018d08:	f6 c2 01             	test   dl,0x1
c0018d0b:	74 08                	je     c0018d15 <PCI::readBAR16(unsigned int, int)+0x15>
c0018d0d:	83 e2 fc             	and    edx,0xfffffffc
c0018d10:	01 c2                	add    edx,eax
c0018d12:	66 ed                	in     ax,dx
c0018d14:	c3                   	ret    
c0018d15:	83 e2 f0             	and    edx,0xfffffff0
c0018d18:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0018d1c:	c3                   	ret    
c0018d1d:	90                   	nop

c0018d1e <PCI::readBAR32(unsigned int, int)>:
c0018d1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018d22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018d26:	f6 c2 01             	test   dl,0x1
c0018d29:	74 07                	je     c0018d32 <PCI::readBAR32(unsigned int, int)+0x14>
c0018d2b:	83 e2 fc             	and    edx,0xfffffffc
c0018d2e:	01 c2                	add    edx,eax
c0018d30:	ed                   	in     eax,dx
c0018d31:	c3                   	ret    
c0018d32:	83 e2 f0             	and    edx,0xfffffff0
c0018d35:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0018d38:	c3                   	ret    
c0018d39:	90                   	nop

c0018d3a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0018d3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018d3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018d42:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018d46:	f6 c2 01             	test   dl,0x1
c0018d49:	74 07                	je     c0018d52 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0018d4b:	83 e2 fc             	and    edx,0xfffffffc
c0018d4e:	01 ca                	add    edx,ecx
c0018d50:	ee                   	out    dx,al
c0018d51:	c3                   	ret    
c0018d52:	83 e2 f0             	and    edx,0xfffffff0
c0018d55:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0018d58:	c3                   	ret    
c0018d59:	90                   	nop

c0018d5a <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0018d5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018d5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018d62:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018d66:	f6 c2 01             	test   dl,0x1
c0018d69:	74 08                	je     c0018d73 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0018d6b:	83 e2 fc             	and    edx,0xfffffffc
c0018d6e:	01 ca                	add    edx,ecx
c0018d70:	66 ef                	out    dx,ax
c0018d72:	c3                   	ret    
c0018d73:	83 e2 f0             	and    edx,0xfffffff0
c0018d76:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0018d7a:	c3                   	ret    
c0018d7b:	90                   	nop

c0018d7c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0018d7c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018d80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018d84:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018d88:	f6 c2 01             	test   dl,0x1
c0018d8b:	74 07                	je     c0018d94 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0018d8d:	83 e2 fc             	and    edx,0xfffffffc
c0018d90:	01 ca                	add    edx,ecx
c0018d92:	ef                   	out    dx,eax
c0018d93:	c3                   	ret    
c0018d94:	83 e2 f0             	and    edx,0xfffffff0
c0018d97:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0018d9a:	c3                   	ret    
c0018d9b:	90                   	nop

c0018d9c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018d9c:	55                   	push   ebp
c0018d9d:	57                   	push   edi
c0018d9e:	56                   	push   esi
c0018d9f:	53                   	push   ebx
c0018da0:	83 ec 0c             	sub    esp,0xc
c0018da3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018da7:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0018dab:	89 f0                	mov    eax,esi
c0018dad:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0018db1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018db5:	3c 07                	cmp    al,0x7
c0018db7:	76 10                	jbe    c0018dc9 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0018db9:	83 ec 0c             	sub    esp,0xc
c0018dbc:	68 1b fa 01 c0       	push   0xc001fa1b
c0018dc1:	e8 17 6a ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0018dc6:	83 c4 10             	add    esp,0x10
c0018dc9:	80 fb 0f             	cmp    bl,0xf
c0018dcc:	76 10                	jbe    c0018dde <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0018dce:	83 ec 0c             	sub    esp,0xc
c0018dd1:	68 4b fa 01 c0       	push   0xc001fa4b
c0018dd6:	e8 02 6a ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0018ddb:	83 c4 10             	add    esp,0x10
c0018dde:	8d 04 36             	lea    eax,[esi+esi*1]
c0018de1:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018de6:	83 c8 f0             	or     eax,0xfffffff0
c0018de9:	ee                   	out    dx,al
c0018dea:	ba fa 0c 00 00       	mov    edx,0xcfa
c0018def:	89 e8                	mov    eax,ebp
c0018df1:	ee                   	out    dx,al
c0018df2:	83 c4 0c             	add    esp,0xc
c0018df5:	89 d8                	mov    eax,ebx
c0018df7:	66 81 e7 fc 00       	and    di,0xfc
c0018dfc:	5b                   	pop    ebx
c0018dfd:	c1 e0 08             	shl    eax,0x8
c0018e00:	5e                   	pop    esi
c0018e01:	09 f8                	or     eax,edi
c0018e03:	5f                   	pop    edi
c0018e04:	66 0d 00 c0          	or     ax,0xc000
c0018e08:	5d                   	pop    ebp
c0018e09:	c3                   	ret    

c0018e0a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018e0a:	57                   	push   edi
c0018e0b:	56                   	push   esi
c0018e0c:	53                   	push   ebx
c0018e0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018e11:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018e15:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0018e1b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018e1f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018e23:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018e27:	83 ff 01             	cmp    edi,0x1
c0018e2a:	75 3e                	jne    c0018e6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0018e2c:	89 de                	mov    esi,ebx
c0018e2e:	0f b6 c0             	movzx  eax,al
c0018e31:	81 e6 fc 00 00 00    	and    esi,0xfc
c0018e37:	c1 e0 10             	shl    eax,0x10
c0018e3a:	0f b6 c9             	movzx  ecx,cl
c0018e3d:	09 f0                	or     eax,esi
c0018e3f:	c1 e1 08             	shl    ecx,0x8
c0018e42:	0f b6 d2             	movzx  edx,dl
c0018e45:	09 c8                	or     eax,ecx
c0018e47:	c1 e2 0b             	shl    edx,0xb
c0018e4a:	09 d0                	or     eax,edx
c0018e4c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018e51:	0d 00 00 00 80       	or     eax,0x80000000
c0018e56:	ef                   	out    dx,eax
c0018e57:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018e5c:	ed                   	in     eax,dx
c0018e5d:	83 e3 02             	and    ebx,0x2
c0018e60:	0f b6 cb             	movzx  ecx,bl
c0018e63:	c1 e1 03             	shl    ecx,0x3
c0018e66:	d3 e8                	shr    eax,cl
c0018e68:	eb 43                	jmp    c0018ead <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018e6a:	83 ff 02             	cmp    edi,0x2
c0018e6d:	75 2c                	jne    c0018e9b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0018e6f:	83 ec 0c             	sub    esp,0xc
c0018e72:	0f b6 c9             	movzx  ecx,cl
c0018e75:	0f b6 d2             	movzx  edx,dl
c0018e78:	0f b6 fb             	movzx  edi,bl
c0018e7b:	0f b6 c0             	movzx  eax,al
c0018e7e:	57                   	push   edi
c0018e7f:	51                   	push   ecx
c0018e80:	52                   	push   edx
c0018e81:	50                   	push   eax
c0018e82:	56                   	push   esi
c0018e83:	e8 14 ff ff ff       	call   c0018d9c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e88:	89 c2                	mov    edx,eax
c0018e8a:	ed                   	in     eax,dx
c0018e8b:	83 e3 02             	and    ebx,0x2
c0018e8e:	83 c4 20             	add    esp,0x20
c0018e91:	0f b6 cb             	movzx  ecx,bl
c0018e94:	c1 e1 03             	shl    ecx,0x3
c0018e97:	d3 e8                	shr    eax,cl
c0018e99:	eb 12                	jmp    c0018ead <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018e9b:	83 ec 0c             	sub    esp,0xc
c0018e9e:	68 7b fa 01 c0       	push   0xc001fa7b
c0018ea3:	e8 35 69 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0018ea8:	83 c4 10             	add    esp,0x10
c0018eab:	31 c0                	xor    eax,eax
c0018ead:	5b                   	pop    ebx
c0018eae:	5e                   	pop    esi
c0018eaf:	5f                   	pop    edi
c0018eb0:	c3                   	ret    
c0018eb1:	90                   	nop

c0018eb2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0018eb2:	83 ec 18             	sub    esp,0x18
c0018eb5:	6a 00                	push   0x0
c0018eb7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018ebc:	50                   	push   eax
c0018ebd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018ec2:	50                   	push   eax
c0018ec3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018ec8:	50                   	push   eax
c0018ec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018ecd:	e8 38 ff ff ff       	call   c0018e0a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ed2:	83 c4 2c             	add    esp,0x2c
c0018ed5:	c3                   	ret    

c0018ed6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0018ed6:	83 ec 18             	sub    esp,0x18
c0018ed9:	6a 0e                	push   0xe
c0018edb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018ee0:	50                   	push   eax
c0018ee1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018ee6:	50                   	push   eax
c0018ee7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018eec:	50                   	push   eax
c0018eed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018ef1:	e8 14 ff ff ff       	call   c0018e0a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ef6:	83 c4 2c             	add    esp,0x2c
c0018ef9:	0f b6 c0             	movzx  eax,al
c0018efc:	c3                   	ret    
c0018efd:	90                   	nop

c0018efe <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0018efe:	55                   	push   ebp
c0018eff:	57                   	push   edi
c0018f00:	56                   	push   esi
c0018f01:	53                   	push   ebx
c0018f02:	83 ec 18             	sub    esp,0x18
c0018f05:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0018f0a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0018f0f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018f14:	6a 0a                	push   0xa
c0018f16:	56                   	push   esi
c0018f17:	55                   	push   ebp
c0018f18:	57                   	push   edi
c0018f19:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018f1d:	e8 e8 fe ff ff       	call   c0018e0a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f22:	83 c4 14             	add    esp,0x14
c0018f25:	89 c3                	mov    ebx,eax
c0018f27:	6a 0a                	push   0xa
c0018f29:	0f b6 db             	movzx  ebx,bl
c0018f2c:	56                   	push   esi
c0018f2d:	55                   	push   ebp
c0018f2e:	57                   	push   edi
c0018f2f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018f33:	e8 d2 fe ff ff       	call   c0018e0a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f38:	83 c4 2c             	add    esp,0x2c
c0018f3b:	25 00 ff 00 00       	and    eax,0xff00
c0018f40:	09 d8                	or     eax,ebx
c0018f42:	5b                   	pop    ebx
c0018f43:	5e                   	pop    esi
c0018f44:	5f                   	pop    edi
c0018f45:	5d                   	pop    ebp
c0018f46:	c3                   	ret    
c0018f47:	90                   	nop

c0018f48 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0018f48:	83 ec 18             	sub    esp,0x18
c0018f4b:	6a 08                	push   0x8
c0018f4d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018f52:	50                   	push   eax
c0018f53:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018f58:	50                   	push   eax
c0018f59:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018f5e:	50                   	push   eax
c0018f5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018f63:	e8 a2 fe ff ff       	call   c0018e0a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f68:	83 c4 2c             	add    esp,0x2c
c0018f6b:	0f b6 c4             	movzx  eax,ah
c0018f6e:	c3                   	ret    
c0018f6f:	90                   	nop

c0018f70 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0018f70:	83 ec 18             	sub    esp,0x18
c0018f73:	6a 08                	push   0x8
c0018f75:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018f7a:	50                   	push   eax
c0018f7b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018f80:	50                   	push   eax
c0018f81:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018f86:	50                   	push   eax
c0018f87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018f8b:	e8 7a fe ff ff       	call   c0018e0a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f90:	83 c4 2c             	add    esp,0x2c
c0018f93:	c3                   	ret    

c0018f94 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0018f94:	83 ec 18             	sub    esp,0x18
c0018f97:	6a 3c                	push   0x3c
c0018f99:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018f9e:	50                   	push   eax
c0018f9f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018fa4:	50                   	push   eax
c0018fa5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018faa:	50                   	push   eax
c0018fab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018faf:	e8 56 fe ff ff       	call   c0018e0a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018fb4:	83 c4 2c             	add    esp,0x2c
c0018fb7:	c3                   	ret    

c0018fb8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0018fb8:	83 ec 18             	sub    esp,0x18
c0018fbb:	6a 18                	push   0x18
c0018fbd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018fc2:	50                   	push   eax
c0018fc3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018fc8:	50                   	push   eax
c0018fc9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018fce:	50                   	push   eax
c0018fcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018fd3:	e8 32 fe ff ff       	call   c0018e0a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018fd8:	83 c4 2c             	add    esp,0x2c
c0018fdb:	0f b6 c4             	movzx  eax,ah
c0018fde:	c3                   	ret    
c0018fdf:	90                   	nop

c0018fe0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018fe0:	55                   	push   ebp
c0018fe1:	57                   	push   edi
c0018fe2:	56                   	push   esi
c0018fe3:	53                   	push   ebx
c0018fe4:	83 ec 28             	sub    esp,0x28
c0018fe7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0018feb:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0018ff0:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0018ff5:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0018ffa:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0019001:	8d 43 12             	lea    eax,[ebx+0x12]
c0019004:	83 c3 10             	add    ebx,0x10
c0019007:	0f b6 c0             	movzx  eax,al
c001900a:	0f b6 db             	movzx  ebx,bl
c001900d:	50                   	push   eax
c001900e:	51                   	push   ecx
c001900f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0019013:	57                   	push   edi
c0019014:	55                   	push   ebp
c0019015:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019019:	e8 ec fd ff ff       	call   c0018e0a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001901e:	83 c4 14             	add    esp,0x14
c0019021:	89 c6                	mov    esi,eax
c0019023:	53                   	push   ebx
c0019024:	c1 e6 10             	shl    esi,0x10
c0019027:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001902b:	51                   	push   ecx
c001902c:	57                   	push   edi
c001902d:	55                   	push   ebp
c001902e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019032:	e8 d3 fd ff ff       	call   c0018e0a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019037:	83 c4 3c             	add    esp,0x3c
c001903a:	0f b7 c0             	movzx  eax,ax
c001903d:	5b                   	pop    ebx
c001903e:	09 f0                	or     eax,esi
c0019040:	5e                   	pop    esi
c0019041:	5f                   	pop    edi
c0019042:	5d                   	pop    ebp
c0019043:	c3                   	ret    

c0019044 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0019044:	55                   	push   ebp
c0019045:	57                   	push   edi
c0019046:	56                   	push   esi
c0019047:	53                   	push   ebx
c0019048:	83 ec 0c             	sub    esp,0xc
c001904b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001904f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019053:	89 f5                	mov    ebp,esi
c0019055:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001905b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001905f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019063:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019067:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001906b:	83 f9 01             	cmp    ecx,0x1
c001906e:	75 5d                	jne    c00190cd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0019070:	0f b6 c8             	movzx  ecx,al
c0019073:	0f b6 d2             	movzx  edx,dl
c0019076:	c1 e1 10             	shl    ecx,0x10
c0019079:	c1 e2 0b             	shl    edx,0xb
c001907c:	89 f0                	mov    eax,esi
c001907e:	25 fc 00 00 00       	and    eax,0xfc
c0019083:	09 c1                	or     ecx,eax
c0019085:	89 e8                	mov    eax,ebp
c0019087:	0f b6 c0             	movzx  eax,al
c001908a:	c1 e0 08             	shl    eax,0x8
c001908d:	09 c1                	or     ecx,eax
c001908f:	09 d1                	or     ecx,edx
c0019091:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019096:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001909c:	89 c8                	mov    eax,ecx
c001909e:	ef                   	out    dx,eax
c001909f:	ba fc 0c 00 00       	mov    edx,0xcfc
c00190a4:	ed                   	in     eax,dx
c00190a5:	0f b7 db             	movzx  ebx,bx
c00190a8:	83 e6 02             	and    esi,0x2
c00190ab:	74 0a                	je     c00190b7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00190ad:	0f b7 d0             	movzx  edx,ax
c00190b0:	c1 e3 10             	shl    ebx,0x10
c00190b3:	09 d3                	or     ebx,edx
c00190b5:	eb 05                	jmp    c00190bc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00190b7:	66 31 c0             	xor    ax,ax
c00190ba:	09 c3                	or     ebx,eax
c00190bc:	ba f8 0c 00 00       	mov    edx,0xcf8
c00190c1:	89 c8                	mov    eax,ecx
c00190c3:	ef                   	out    dx,eax
c00190c4:	ba fc 0c 00 00       	mov    edx,0xcfc
c00190c9:	89 d8                	mov    eax,ebx
c00190cb:	eb 41                	jmp    c001910e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00190cd:	83 f9 02             	cmp    ecx,0x2
c00190d0:	75 45                	jne    c0019117 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00190d2:	83 ec 0c             	sub    esp,0xc
c00190d5:	0f b6 d2             	movzx  edx,dl
c00190d8:	89 f1                	mov    ecx,esi
c00190da:	0f b6 c0             	movzx  eax,al
c00190dd:	0f b6 f1             	movzx  esi,cl
c00190e0:	89 e9                	mov    ecx,ebp
c00190e2:	56                   	push   esi
c00190e3:	0f b6 c9             	movzx  ecx,cl
c00190e6:	51                   	push   ecx
c00190e7:	52                   	push   edx
c00190e8:	50                   	push   eax
c00190e9:	57                   	push   edi
c00190ea:	e8 ad fc ff ff       	call   c0018d9c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00190ef:	89 c2                	mov    edx,eax
c00190f1:	ed                   	in     eax,dx
c00190f2:	83 c4 20             	add    esp,0x20
c00190f5:	0f b7 db             	movzx  ebx,bx
c00190f8:	f6 c2 02             	test   dl,0x2
c00190fb:	74 0c                	je     c0019109 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00190fd:	0f b7 c8             	movzx  ecx,ax
c0019100:	89 d8                	mov    eax,ebx
c0019102:	c1 e0 10             	shl    eax,0x10
c0019105:	09 c8                	or     eax,ecx
c0019107:	eb 05                	jmp    c001910e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0019109:	66 31 c0             	xor    ax,ax
c001910c:	09 d8                	or     eax,ebx
c001910e:	ef                   	out    dx,eax
c001910f:	83 c4 0c             	add    esp,0xc
c0019112:	5b                   	pop    ebx
c0019113:	5e                   	pop    esi
c0019114:	5f                   	pop    edi
c0019115:	5d                   	pop    ebp
c0019116:	c3                   	ret    
c0019117:	c7 44 24 20 7b fa 01 c0 	mov    DWORD PTR [esp+0x20],0xc001fa7b
c001911f:	83 c4 0c             	add    esp,0xc
c0019122:	5b                   	pop    ebx
c0019123:	5e                   	pop    esi
c0019124:	5f                   	pop    edi
c0019125:	5d                   	pop    ebp
c0019126:	e9 b2 66 ff ff       	jmp    c000f7dd <Krnl::panic(char const*)>
c001912b:	90                   	nop

c001912c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001912c:	55                   	push   ebp
c001912d:	57                   	push   edi
c001912e:	56                   	push   esi
c001912f:	53                   	push   ebx
c0019130:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019136:	80 3d cc 46 02 c0 00 	cmp    BYTE PTR ds:0xc00246cc,0x0
c001913d:	0f 85 84 00 00 00    	jne    c00191c7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0019143:	83 ec 0c             	sub    esp,0xc
c0019146:	68 14 01 00 00       	push   0x114
c001914b:	e8 2d dc fe ff       	call   c0006d7d <malloc>
c0019150:	83 c4 0c             	add    esp,0xc
c0019153:	89 c3                	mov    ebx,eax
c0019155:	ff 35 b0 3c 02 c0    	push   DWORD PTR ds:0xc0023cb0
c001915b:	68 81 fa 01 c0       	push   0xc001fa81
c0019160:	50                   	push   eax
c0019161:	e8 0c 0f ff ff       	call   c000a072 <File::File(char const*, Process*)>
c0019166:	5a                   	pop    edx
c0019167:	59                   	pop    ecx
c0019168:	6a 01                	push   0x1
c001916a:	53                   	push   ebx
c001916b:	e8 bc 0f ff ff       	call   c000a12c <File::open(FileOpenMode)>
c0019170:	83 c4 0c             	add    esp,0xc
c0019173:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0019177:	50                   	push   eax
c0019178:	8d 44 24 28          	lea    eax,[esp+0x28]
c001917c:	50                   	push   eax
c001917d:	53                   	push   ebx
c001917e:	e8 55 12 ff ff       	call   c000a3d8 <File::stat(unsigned long long*, bool*)>
c0019183:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019187:	40                   	inc    eax
c0019188:	89 04 24             	mov    DWORD PTR [esp],eax
c001918b:	e8 ed db fe ff       	call   c0006d7d <malloc>
c0019190:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019194:	a3 c8 46 02 c0       	mov    ds:0xc00246c8,eax
c0019199:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001919d:	5e                   	pop    esi
c001919e:	8b 13                	mov    edx,DWORD PTR [ebx]
c00191a0:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00191a4:	51                   	push   ecx
c00191a5:	50                   	push   eax
c00191a6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00191aa:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00191ae:	53                   	push   ebx
c00191af:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00191b2:	83 c4 14             	add    esp,0x14
c00191b5:	53                   	push   ebx
c00191b6:	e8 cf 0f ff ff       	call   c000a18a <File::close()>
c00191bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00191bf:	83 c4 10             	add    esp,0x10
c00191c2:	a3 c4 46 02 c0       	mov    ds:0xc00246c4,eax
c00191c7:	a1 c4 46 02 c0       	mov    eax,ds:0xc00246c4
c00191cc:	8b 15 c8 46 02 c0    	mov    edx,DWORD PTR ds:0xc00246c8
c00191d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00191d5:	31 ff                	xor    edi,edi
c00191d7:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c00191df:	31 f6                	xor    esi,esi
c00191e1:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00191e6:	31 db                	xor    ebx,ebx
c00191e8:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c00191f0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00191f5:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c00191fc:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0019200:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0019207:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001920b:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001920e:	0f 8e 6b 01 00 00    	jle    c001937f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0019214:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0019217:	d4 40                	aam    0x40
c0019219:	d5 39                	aad    0x39
c001921b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001921f:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0019223:	d4 40                	aam    0x40
c0019225:	d5 39                	aad    0x39
c0019227:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001922b:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c001922f:	d4 40                	aam    0x40
c0019231:	d5 39                	aad    0x39
c0019233:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0019237:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c001923b:	d4 40                	aam    0x40
c001923d:	d5 39                	aad    0x39
c001923f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019243:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0019247:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001924b:	3c 56                	cmp    al,0x56
c001924d:	74 45                	je     c0019294 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c001924f:	d4 40                	aam    0x40
c0019251:	d5 39                	aad    0x39
c0019253:	8d 48 d0             	lea    ecx,[eax-0x30]
c0019256:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c001925a:	0f b6 c9             	movzx  ecx,cl
c001925d:	c1 e1 04             	shl    ecx,0x4
c0019260:	d4 40                	aam    0x40
c0019262:	d5 39                	aad    0x39
c0019264:	8d 58 d0             	lea    ebx,[eax-0x30]
c0019267:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c001926b:	0f b6 db             	movzx  ebx,bl
c001926e:	09 cb                	or     ebx,ecx
c0019270:	c1 e3 04             	shl    ebx,0x4
c0019273:	d4 40                	aam    0x40
c0019275:	d5 39                	aad    0x39
c0019277:	8d 48 d0             	lea    ecx,[eax-0x30]
c001927a:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c001927e:	0f b6 c9             	movzx  ecx,cl
c0019281:	09 cb                	or     ebx,ecx
c0019283:	c1 e3 04             	shl    ebx,0x4
c0019286:	89 d9                	mov    ecx,ebx
c0019288:	d4 40                	aam    0x40
c001928a:	d5 39                	aad    0x39
c001928c:	8d 58 d0             	lea    ebx,[eax-0x30]
c001928f:	0f b6 db             	movzx  ebx,bl
c0019292:	09 cb                	or     ebx,ecx
c0019294:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0019298:	80 f9 44             	cmp    cl,0x44
c001929b:	74 47                	je     c00192e4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c001929d:	88 c8                	mov    al,cl
c001929f:	d4 40                	aam    0x40
c00192a1:	d5 39                	aad    0x39
c00192a3:	83 e8 30             	sub    eax,0x30
c00192a6:	0f b6 e8             	movzx  ebp,al
c00192a9:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c00192ad:	c1 e5 04             	shl    ebp,0x4
c00192b0:	d4 40                	aam    0x40
c00192b2:	d5 39                	aad    0x39
c00192b4:	83 e8 30             	sub    eax,0x30
c00192b7:	0f b6 f0             	movzx  esi,al
c00192ba:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c00192be:	09 ee                	or     esi,ebp
c00192c0:	c1 e6 04             	shl    esi,0x4
c00192c3:	d4 40                	aam    0x40
c00192c5:	d5 39                	aad    0x39
c00192c7:	83 e8 30             	sub    eax,0x30
c00192ca:	0f b6 e8             	movzx  ebp,al
c00192cd:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c00192d1:	09 ee                	or     esi,ebp
c00192d3:	c1 e6 04             	shl    esi,0x4
c00192d6:	89 f5                	mov    ebp,esi
c00192d8:	d4 40                	aam    0x40
c00192da:	d5 39                	aad    0x39
c00192dc:	83 e8 30             	sub    eax,0x30
c00192df:	0f b6 f0             	movzx  esi,al
c00192e2:	09 ee                	or     esi,ebp
c00192e4:	83 c7 10             	add    edi,0x10
c00192e7:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c00192eb:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00192ee:	3c 0a                	cmp    al,0xa
c00192f0:	74 09                	je     c00192fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c00192f2:	45                   	inc    ebp
c00192f3:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00192f6:	75 16                	jne    c001930e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c00192f8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00192fb:	3c 0a                	cmp    al,0xa
c00192fd:	0f 94 c0             	sete   al
c0019300:	0f b6 c0             	movzx  eax,al
c0019303:	01 c7                	add    edi,eax
c0019305:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c001930a:	75 0c                	jne    c0019318 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c001930c:	eb 15                	jmp    c0019323 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c001930e:	47                   	inc    edi
c001930f:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0019312:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0019316:	eb d3                	jmp    c00192eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0019318:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c001931d:	0f 85 e8 fe ff ff    	jne    c001920b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0019323:	80 f9 44             	cmp    cl,0x44
c0019326:	74 0b                	je     c0019333 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0019328:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c001932d:	0f 85 d8 fe ff ff    	jne    c001920b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0019333:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0019337:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001933b:	c1 e1 04             	shl    ecx,0x4
c001933e:	83 e8 30             	sub    eax,0x30
c0019341:	09 c8                	or     eax,ecx
c0019343:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0019347:	0f 85 be fe ff ff    	jne    c001920b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001934d:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0019351:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019355:	c1 e1 04             	shl    ecx,0x4
c0019358:	83 e8 30             	sub    eax,0x30
c001935b:	09 c8                	or     eax,ecx
c001935d:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0019361:	0f 85 a4 fe ff ff    	jne    c001920b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0019367:	50                   	push   eax
c0019368:	50                   	push   eax
c0019369:	8d 44 24 28          	lea    eax,[esp+0x28]
c001936d:	50                   	push   eax
c001936e:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0019375:	e8 ea 71 fe ff       	call   c0000564 <strcpy>
c001937a:	83 c4 10             	add    esp,0x10
c001937d:	eb 15                	jmp    c0019394 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c001937f:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0019386:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0019391:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0019394:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001939b:	81 c4 2c 01 00 00    	add    esp,0x12c
c00193a1:	5b                   	pop    ebx
c00193a2:	5e                   	pop    esi
c00193a3:	5f                   	pop    edi
c00193a4:	5d                   	pop    ebp
c00193a5:	c3                   	ret    

c00193a6 <PCI::checkBus(unsigned char)>:
c00193a6:	56                   	push   esi
c00193a7:	53                   	push   ebx
c00193a8:	31 db                	xor    ebx,ebx
c00193aa:	51                   	push   ecx
c00193ab:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00193b0:	52                   	push   edx
c00193b1:	53                   	push   ebx
c00193b2:	43                   	inc    ebx
c00193b3:	56                   	push   esi
c00193b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00193b8:	e8 f3 02 00 00       	call   c00196b0 <PCI::checkDevice(unsigned char, unsigned char)>
c00193bd:	83 c4 10             	add    esp,0x10
c00193c0:	83 fb 20             	cmp    ebx,0x20
c00193c3:	75 eb                	jne    c00193b0 <PCI::checkBus(unsigned char)+0xa>
c00193c5:	58                   	pop    eax
c00193c6:	5b                   	pop    ebx
c00193c7:	5e                   	pop    esi
c00193c8:	c3                   	ret    
c00193c9:	90                   	nop

c00193ca <PCI::foundDevice(PCIDeviceInfo)>:
c00193ca:	55                   	push   ebp
c00193cb:	57                   	push   edi
c00193cc:	56                   	push   esi
c00193cd:	53                   	push   ebx
c00193ce:	83 ec 1c             	sub    esp,0x1c
c00193d1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00193d5:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00193db:	0f 84 52 01 00 00    	je     c0019533 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00193e1:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00193e5:	66 81 f9 06 04       	cmp    cx,0x406
c00193ea:	75 2c                	jne    c0019418 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00193ec:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00193f1:	50                   	push   eax
c00193f2:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00193f7:	50                   	push   eax
c00193f8:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00193fd:	50                   	push   eax
c00193fe:	56                   	push   esi
c00193ff:	e8 b4 fb ff ff       	call   c0018fb8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0019404:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0019408:	0f b6 c0             	movzx  eax,al
c001940b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001940f:	83 c4 2c             	add    esp,0x2c
c0019412:	5b                   	pop    ebx
c0019413:	5e                   	pop    esi
c0019414:	5f                   	pop    edi
c0019415:	5d                   	pop    ebp
c0019416:	eb 8e                	jmp    c00193a6 <PCI::checkBus(unsigned char)>
c0019418:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001941c:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0019422:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019426:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001942a:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001942e:	88 d3                	mov    bl,dl
c0019430:	85 c0                	test   eax,eax
c0019432:	74 33                	je     c0019467 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0019434:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0019437:	85 d2                	test   edx,edx
c0019439:	74 28                	je     c0019463 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001943b:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0019441:	31 ef                	xor    edi,ebp
c0019443:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0019449:	75 18                	jne    c0019463 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001944b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001944f:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0019455:	75 0c                	jne    c0019463 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0019457:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001945d:	0f 84 d0 00 00 00    	je     c0019533 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0019463:	8b 00                	mov    eax,DWORD PTR [eax]
c0019465:	eb c9                	jmp    c0019430 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0019467:	66 81 f9 01 06       	cmp    cx,0x601
c001946c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0019470:	75 19                	jne    c001948b <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0019472:	83 ec 0c             	sub    esp,0xc
c0019475:	68 64 01 00 00       	push   0x164
c001947a:	e8 fe d8 fe ff       	call   c0006d7d <malloc>
c001947f:	89 c5                	mov    ebp,eax
c0019481:	89 04 24             	mov    DWORD PTR [esp],eax
c0019484:	e8 37 0e 00 00       	call   c001a2c0 <SATABus::SATABus()>
c0019489:	eb 1e                	jmp    c00194a9 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001948b:	66 81 f9 01 01       	cmp    cx,0x101
c0019490:	75 60                	jne    c00194f2 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0019492:	83 ec 0c             	sub    esp,0xc
c0019495:	68 70 02 00 00       	push   0x270
c001949a:	e8 de d8 fe ff       	call   c0006d7d <malloc>
c001949f:	89 c5                	mov    ebp,eax
c00194a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00194a4:	e8 cb 02 00 00       	call   c0019774 <IDE::IDE()>
c00194a9:	58                   	pop    eax
c00194aa:	5a                   	pop    edx
c00194ab:	55                   	push   ebp
c00194ac:	56                   	push   esi
c00194ad:	e8 78 1a ff ff       	call   c000af2a <Device::addChild(Device*)>
c00194b2:	83 ec 1c             	sub    esp,0x1c
c00194b5:	b9 09 00 00 00       	mov    ecx,0x9
c00194ba:	fc                   	cld    
c00194bb:	89 e7                	mov    edi,esp
c00194bd:	89 de                	mov    esi,ebx
c00194bf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00194c1:	55                   	push   ebp
c00194c2:	e8 a9 19 ff ff       	call   c000ae70 <Device::preOpenPCI(PCIDeviceInfo)>
c00194c7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00194ca:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00194ce:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00194d6:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00194de:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00194e6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00194e9:	83 c4 4c             	add    esp,0x4c
c00194ec:	5b                   	pop    ebx
c00194ed:	5e                   	pop    esi
c00194ee:	5f                   	pop    edi
c00194ef:	5d                   	pop    ebp
c00194f0:	ff e0                	jmp    eax
c00194f2:	83 ec 0c             	sub    esp,0xc
c00194f5:	68 58 01 00 00       	push   0x158
c00194fa:	e8 7e d8 fe ff       	call   c0006d7d <malloc>
c00194ff:	89 c5                	mov    ebp,eax
c0019501:	58                   	pop    eax
c0019502:	5a                   	pop    edx
c0019503:	68 9a fa 01 c0       	push   0xc001fa9a
c0019508:	55                   	push   ebp
c0019509:	e8 ba 1c ff ff       	call   c000b1c8 <DriverlessDevice::DriverlessDevice(char const*)>
c001950e:	59                   	pop    ecx
c001950f:	5f                   	pop    edi
c0019510:	55                   	push   ebp
c0019511:	56                   	push   esi
c0019512:	e8 13 1a ff ff       	call   c000af2a <Device::addChild(Device*)>
c0019517:	b9 09 00 00 00       	mov    ecx,0x9
c001951c:	fc                   	cld    
c001951d:	89 df                	mov    edi,ebx
c001951f:	89 de                	mov    esi,ebx
c0019521:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0019523:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0019527:	83 c4 2c             	add    esp,0x2c
c001952a:	5b                   	pop    ebx
c001952b:	5e                   	pop    esi
c001952c:	5f                   	pop    edi
c001952d:	5d                   	pop    ebp
c001952e:	e9 3d 19 ff ff       	jmp    c000ae70 <Device::preOpenPCI(PCIDeviceInfo)>
c0019533:	83 c4 1c             	add    esp,0x1c
c0019536:	5b                   	pop    ebx
c0019537:	5e                   	pop    esi
c0019538:	5f                   	pop    edi
c0019539:	5d                   	pop    ebp
c001953a:	c3                   	ret    
c001953b:	90                   	nop

c001953c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001953c:	55                   	push   ebp
c001953d:	57                   	push   edi
c001953e:	56                   	push   esi
c001953f:	53                   	push   ebx
c0019540:	83 ec 68             	sub    esp,0x68
c0019543:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0019547:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001954e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019552:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019559:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001955e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019562:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019569:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c001956e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0019572:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0019577:	6a 0c                	push   0xc
c0019579:	57                   	push   edi
c001957a:	53                   	push   ebx
c001957b:	56                   	push   esi
c001957c:	55                   	push   ebp
c001957d:	e8 88 f8 ff ff       	call   c0018e0a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019582:	83 c4 20             	add    esp,0x20
c0019585:	57                   	push   edi
c0019586:	53                   	push   ebx
c0019587:	56                   	push   esi
c0019588:	55                   	push   ebp
c0019589:	e8 70 f9 ff ff       	call   c0018efe <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001958e:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0019593:	57                   	push   edi
c0019594:	53                   	push   ebx
c0019595:	56                   	push   esi
c0019596:	55                   	push   ebp
c0019597:	e8 f8 f9 ff ff       	call   c0018f94 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001959c:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00195a0:	83 c4 14             	add    esp,0x14
c00195a3:	6a 3c                	push   0x3c
c00195a5:	57                   	push   edi
c00195a6:	53                   	push   ebx
c00195a7:	56                   	push   esi
c00195a8:	55                   	push   ebp
c00195a9:	e8 5c f8 ff ff       	call   c0018e0a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00195ae:	0f b6 c4             	movzx  eax,ah
c00195b1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00195b5:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c00195b9:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c00195bd:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c00195c2:	8b 90 e4 01 00 00    	mov    edx,DWORD PTR [eax+0x1e4]
c00195c8:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c00195ce:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00195d2:	83 c4 20             	add    esp,0x20
c00195d5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00195da:	74 30                	je     c001960c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c00195dc:	31 c0                	xor    eax,eax
c00195de:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00195e2:	7e 28                	jle    c001960c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c00195e4:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c00195ec:	39 cb                	cmp    ebx,ecx
c00195ee:	75 19                	jne    c0019609 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c00195f0:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c00195f8:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00195fc:	75 0b                	jne    c0019609 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c00195fe:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0019605:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0019609:	40                   	inc    eax
c001960a:	eb d2                	jmp    c00195de <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001960c:	31 d2                	xor    edx,edx
c001960e:	83 ec 0c             	sub    esp,0xc
c0019611:	57                   	push   edi
c0019612:	53                   	push   ebx
c0019613:	56                   	push   esi
c0019614:	52                   	push   edx
c0019615:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0019619:	55                   	push   ebp
c001961a:	e8 c1 f9 ff ff       	call   c0018fe0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001961f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019623:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0019627:	42                   	inc    edx
c0019628:	83 c4 20             	add    esp,0x20
c001962b:	83 fa 06             	cmp    edx,0x6
c001962e:	75 de                	jne    c001960e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0019630:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0019635:	83 ec 0c             	sub    esp,0xc
c0019638:	86 e0                	xchg   al,ah
c001963a:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001963f:	6a 02                	push   0x2
c0019641:	57                   	push   edi
c0019642:	53                   	push   ebx
c0019643:	56                   	push   esi
c0019644:	55                   	push   ebp
c0019645:	e8 c0 f7 ff ff       	call   c0018e0a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001964a:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001964f:	83 c4 20             	add    esp,0x20
c0019652:	57                   	push   edi
c0019653:	53                   	push   ebx
c0019654:	56                   	push   esi
c0019655:	55                   	push   ebp
c0019656:	e8 ed f8 ff ff       	call   c0018f48 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001965b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001965f:	57                   	push   edi
c0019660:	53                   	push   ebx
c0019661:	56                   	push   esi
c0019662:	55                   	push   ebp
c0019663:	e8 4a f8 ff ff       	call   c0018eb2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019668:	b9 09 00 00 00       	mov    ecx,0x9
c001966d:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0019672:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0019676:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001967a:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001967e:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0019682:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0019686:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001968a:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001968e:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0019692:	83 ec 0c             	sub    esp,0xc
c0019695:	fc                   	cld    
c0019696:	89 e7                	mov    edi,esp
c0019698:	8d 74 24 58          	lea    esi,[esp+0x58]
c001969c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001969e:	55                   	push   ebp
c001969f:	e8 26 fd ff ff       	call   c00193ca <PCI::foundDevice(PCIDeviceInfo)>
c00196a4:	81 c4 8c 00 00 00    	add    esp,0x8c
c00196aa:	5b                   	pop    ebx
c00196ab:	5e                   	pop    esi
c00196ac:	5f                   	pop    edi
c00196ad:	5d                   	pop    ebp
c00196ae:	c3                   	ret    
c00196af:	90                   	nop

c00196b0 <PCI::checkDevice(unsigned char, unsigned char)>:
c00196b0:	55                   	push   ebp
c00196b1:	57                   	push   edi
c00196b2:	56                   	push   esi
c00196b3:	53                   	push   ebx
c00196b4:	83 ec 0c             	sub    esp,0xc
c00196b7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00196bb:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00196c0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00196c5:	6a 00                	push   0x0
c00196c7:	56                   	push   esi
c00196c8:	57                   	push   edi
c00196c9:	55                   	push   ebp
c00196ca:	e8 e3 f7 ff ff       	call   c0018eb2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00196cf:	6a 00                	push   0x0
c00196d1:	56                   	push   esi
c00196d2:	57                   	push   edi
c00196d3:	55                   	push   ebp
c00196d4:	e8 63 fe ff ff       	call   c001953c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00196d9:	83 c4 20             	add    esp,0x20
c00196dc:	6a 00                	push   0x0
c00196de:	56                   	push   esi
c00196df:	57                   	push   edi
c00196e0:	55                   	push   ebp
c00196e1:	e8 f0 f7 ff ff       	call   c0018ed6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00196e6:	83 c4 10             	add    esp,0x10
c00196e9:	84 c0                	test   al,al
c00196eb:	79 27                	jns    c0019714 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00196ed:	bb 01 00 00 00       	mov    ebx,0x1
c00196f2:	53                   	push   ebx
c00196f3:	56                   	push   esi
c00196f4:	57                   	push   edi
c00196f5:	55                   	push   ebp
c00196f6:	e8 b7 f7 ff ff       	call   c0018eb2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00196fb:	83 c4 10             	add    esp,0x10
c00196fe:	66 40                	inc    ax
c0019700:	74 0c                	je     c001970e <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0019702:	53                   	push   ebx
c0019703:	56                   	push   esi
c0019704:	57                   	push   edi
c0019705:	55                   	push   ebp
c0019706:	e8 31 fe ff ff       	call   c001953c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001970b:	83 c4 10             	add    esp,0x10
c001970e:	43                   	inc    ebx
c001970f:	83 fb 08             	cmp    ebx,0x8
c0019712:	75 de                	jne    c00196f2 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0019714:	83 c4 0c             	add    esp,0xc
c0019717:	5b                   	pop    ebx
c0019718:	5e                   	pop    esi
c0019719:	5f                   	pop    edi
c001971a:	5d                   	pop    ebp
c001971b:	c3                   	ret    

c001971c <PCI::detect()>:
c001971c:	56                   	push   esi
c001971d:	53                   	push   ebx
c001971e:	53                   	push   ebx
c001971f:	31 db                	xor    ebx,ebx
c0019721:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019725:	6a 00                	push   0x0
c0019727:	6a 00                	push   0x0
c0019729:	6a 00                	push   0x0
c001972b:	56                   	push   esi
c001972c:	e8 a5 f7 ff ff       	call   c0018ed6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0019731:	83 c4 10             	add    esp,0x10
c0019734:	a8 80                	test   al,0x80
c0019736:	75 21                	jne    c0019759 <PCI::detect()+0x3d>
c0019738:	51                   	push   ecx
c0019739:	51                   	push   ecx
c001973a:	6a 00                	push   0x0
c001973c:	56                   	push   esi
c001973d:	e8 64 fc ff ff       	call   c00193a6 <PCI::checkBus(unsigned char)>
c0019742:	83 c4 10             	add    esp,0x10
c0019745:	eb 24                	jmp    c001976b <PCI::detect()+0x4f>
c0019747:	52                   	push   edx
c0019748:	52                   	push   edx
c0019749:	53                   	push   ebx
c001974a:	43                   	inc    ebx
c001974b:	56                   	push   esi
c001974c:	e8 55 fc ff ff       	call   c00193a6 <PCI::checkBus(unsigned char)>
c0019751:	83 c4 10             	add    esp,0x10
c0019754:	83 fb 08             	cmp    ebx,0x8
c0019757:	74 12                	je     c001976b <PCI::detect()+0x4f>
c0019759:	53                   	push   ebx
c001975a:	6a 00                	push   0x0
c001975c:	6a 00                	push   0x0
c001975e:	56                   	push   esi
c001975f:	e8 4e f7 ff ff       	call   c0018eb2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019764:	83 c4 10             	add    esp,0x10
c0019767:	66 40                	inc    ax
c0019769:	74 dc                	je     c0019747 <PCI::detect()+0x2b>
c001976b:	58                   	pop    eax
c001976c:	5b                   	pop    ebx
c001976d:	5e                   	pop    esi
c001976e:	c3                   	ret    
c001976f:	90                   	nop

c0019770 <IDE::close(int, int, void*)>:
c0019770:	83 c8 ff             	or     eax,0xffffffff
c0019773:	c3                   	ret    

c0019774 <IDE::IDE()>:
c0019774:	83 ec 0c             	sub    esp,0xc
c0019777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001977b:	83 ec 08             	sub    esp,0x8
c001977e:	68 e0 fa 01 c0       	push   0xc001fae0
c0019783:	50                   	push   eax
c0019784:	e8 e3 1a ff ff       	call   c000b26c <HardDiskController::HardDiskController(char const*)>
c0019789:	83 c4 10             	add    esp,0x10
c001978c:	ba 70 fb 01 c0       	mov    edx,0xc001fb70
c0019791:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019795:	89 10                	mov    DWORD PTR [eax],edx
c0019797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001979b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00197a2:	90                   	nop
c00197a3:	83 c4 0c             	add    esp,0xc
c00197a6:	c3                   	ret    
c00197a7:	90                   	nop

c00197a8 <IDE::prepareInterrupt(unsigned char)>:
c00197a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00197ad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00197b1:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00197b9:	c3                   	ret    

c00197ba <selectDrive(unsigned char, unsigned char)>:
c00197ba:	c3                   	ret    
c00197bb:	90                   	nop

c00197bc <IDE::getBase(unsigned char)>:
c00197bc:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00197c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00197c5:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00197cd:	c3                   	ret    

c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00197ce:	55                   	push   ebp
c00197cf:	57                   	push   edi
c00197d0:	56                   	push   esi
c00197d1:	53                   	push   ebx
c00197d2:	83 ec 1c             	sub    esp,0x1c
c00197d5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00197d9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00197dd:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00197e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00197e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00197e8:	80 f9 03             	cmp    cl,0x3
c00197eb:	77 51                	ja     c001983e <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00197ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00197f1:	0f b6 f2             	movzx  esi,dl
c00197f4:	0f b6 db             	movzx  ebx,bl
c00197f7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00197fa:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00197fe:	83 ca 80             	or     edx,0xffffff80
c0019801:	0f b6 d2             	movzx  edx,dl
c0019804:	52                   	push   edx
c0019805:	6a 0c                	push   0xc
c0019807:	56                   	push   esi
c0019808:	57                   	push   edi
c0019809:	e8 c0 ff ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001980e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0019813:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019817:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001981b:	ee                   	out    dx,al
c001981c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0019821:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0019825:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0019829:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001982d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019835:	83 c4 2c             	add    esp,0x2c
c0019838:	5b                   	pop    ebx
c0019839:	5e                   	pop    esi
c001983a:	5f                   	pop    edi
c001983b:	5d                   	pop    ebp
c001983c:	eb 90                	jmp    c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001983e:	80 fb 07             	cmp    bl,0x7
c0019841:	77 12                	ja     c0019855 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0019843:	0f b6 d2             	movzx  edx,dl
c0019846:	0f b6 db             	movzx  ebx,bl
c0019849:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0019851:	89 da                	mov    edx,ebx
c0019853:	eb 2f                	jmp    c0019884 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019855:	80 fb 0d             	cmp    bl,0xd
c0019858:	77 13                	ja     c001986d <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001985a:	0f b6 d2             	movzx  edx,dl
c001985d:	0f b6 db             	movzx  ebx,bl
c0019860:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0019867:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001986b:	eb 17                	jmp    c0019884 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001986d:	80 fb 15             	cmp    bl,0x15
c0019870:	77 13                	ja     c0019885 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0019872:	0f b6 d2             	movzx  edx,dl
c0019875:	0f b6 db             	movzx  ebx,bl
c0019878:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0019880:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0019884:	ee                   	out    dx,al
c0019885:	83 c4 1c             	add    esp,0x1c
c0019888:	5b                   	pop    ebx
c0019889:	5e                   	pop    esi
c001988a:	5f                   	pop    edi
c001988b:	5d                   	pop    ebp
c001988c:	c3                   	ret    
c001988d:	90                   	nop

c001988e <IDE::read(unsigned char, unsigned char)>:
c001988e:	55                   	push   ebp
c001988f:	57                   	push   edi
c0019890:	56                   	push   esi
c0019891:	53                   	push   ebx
c0019892:	83 ec 1c             	sub    esp,0x1c
c0019895:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0019899:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001989d:	8d 43 f8             	lea    eax,[ebx-0x8]
c00198a0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00198a4:	3c 03                	cmp    al,0x3
c00198a6:	77 43                	ja     c00198eb <IDE::read(unsigned char, unsigned char)+0x5d>
c00198a8:	0f b6 f2             	movzx  esi,dl
c00198ab:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00198ae:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00198b2:	83 c8 80             	or     eax,0xffffff80
c00198b5:	0f b6 c0             	movzx  eax,al
c00198b8:	50                   	push   eax
c00198b9:	6a 0c                	push   0xc
c00198bb:	56                   	push   esi
c00198bc:	57                   	push   edi
c00198bd:	e8 0c ff ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00198c2:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00198c7:	0f b6 c3             	movzx  eax,bl
c00198ca:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00198ce:	ec                   	in     al,dx
c00198cf:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00198d3:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00198d8:	52                   	push   edx
c00198d9:	6a 0c                	push   0xc
c00198db:	56                   	push   esi
c00198dc:	57                   	push   edi
c00198dd:	e8 ec fe ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00198e2:	83 c4 20             	add    esp,0x20
c00198e5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00198e9:	eb 49                	jmp    c0019934 <IDE::read(unsigned char, unsigned char)+0xa6>
c00198eb:	80 fb 07             	cmp    bl,0x7
c00198ee:	77 12                	ja     c0019902 <IDE::read(unsigned char, unsigned char)+0x74>
c00198f0:	0f b6 d2             	movzx  edx,dl
c00198f3:	0f b6 c3             	movzx  eax,bl
c00198f6:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00198fe:	89 c2                	mov    edx,eax
c0019900:	eb 31                	jmp    c0019933 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019902:	80 fb 0d             	cmp    bl,0xd
c0019905:	77 13                	ja     c001991a <IDE::read(unsigned char, unsigned char)+0x8c>
c0019907:	0f b6 d2             	movzx  edx,dl
c001990a:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0019911:	0f b6 d3             	movzx  edx,bl
c0019914:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0019918:	eb 19                	jmp    c0019933 <IDE::read(unsigned char, unsigned char)+0xa5>
c001991a:	31 c0                	xor    eax,eax
c001991c:	80 fb 15             	cmp    bl,0x15
c001991f:	77 13                	ja     c0019934 <IDE::read(unsigned char, unsigned char)+0xa6>
c0019921:	0f b6 d2             	movzx  edx,dl
c0019924:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001992c:	0f b6 d3             	movzx  edx,bl
c001992f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0019933:	ec                   	in     al,dx
c0019934:	83 c4 1c             	add    esp,0x1c
c0019937:	5b                   	pop    ebx
c0019938:	5e                   	pop    esi
c0019939:	5f                   	pop    edi
c001993a:	5d                   	pop    ebp
c001993b:	c3                   	ret    

c001993c <IDE::waitInterrupt(unsigned char)>:
c001993c:	55                   	push   ebp
c001993d:	57                   	push   edi
c001993e:	56                   	push   esi
c001993f:	53                   	push   ebx
c0019940:	31 db                	xor    ebx,ebx
c0019942:	83 ec 0c             	sub    esp,0xc
c0019945:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019949:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001994e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0019956:	89 e8                	mov    eax,ebp
c0019958:	84 c0                	test   al,al
c001995a:	75 30                	jne    c001998c <IDE::waitInterrupt(unsigned char)+0x50>
c001995c:	50                   	push   eax
c001995d:	6a 0c                	push   0xc
c001995f:	56                   	push   esi
c0019960:	57                   	push   edi
c0019961:	e8 28 ff ff ff       	call   c001988e <IDE::read(unsigned char, unsigned char)>
c0019966:	83 c4 10             	add    esp,0x10
c0019969:	a8 01                	test   al,0x1
c001996b:	75 27                	jne    c0019994 <IDE::waitInterrupt(unsigned char)+0x58>
c001996d:	f6 c3 04             	test   bl,0x4
c0019970:	75 12                	jne    c0019984 <IDE::waitInterrupt(unsigned char)+0x48>
c0019972:	83 fb 32             	cmp    ebx,0x32
c0019975:	7e 0d                	jle    c0019984 <IDE::waitInterrupt(unsigned char)+0x48>
c0019977:	83 ec 0c             	sub    esp,0xc
c001997a:	6a 64                	push   0x64
c001997c:	e8 d7 95 ff ff       	call   c0012f58 <milliTenthSleep(unsigned int)>
c0019981:	83 c4 10             	add    esp,0x10
c0019984:	83 fb 3c             	cmp    ebx,0x3c
c0019987:	74 0b                	je     c0019994 <IDE::waitInterrupt(unsigned char)+0x58>
c0019989:	43                   	inc    ebx
c001998a:	eb c2                	jmp    c001994e <IDE::waitInterrupt(unsigned char)+0x12>
c001998c:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0019994:	83 c4 0c             	add    esp,0xc
c0019997:	89 e8                	mov    eax,ebp
c0019999:	5b                   	pop    ebx
c001999a:	5e                   	pop    esi
c001999b:	5f                   	pop    edi
c001999c:	5d                   	pop    ebp
c001999d:	c3                   	ret    

c001999e <ideChannel0IRQHandler(regs*, void*)>:
c001999e:	83 ec 10             	sub    esp,0x10
c00199a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00199a5:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00199ac:	6a 07                	push   0x7
c00199ae:	6a 00                	push   0x0
c00199b0:	50                   	push   eax
c00199b1:	e8 d8 fe ff ff       	call   c001988e <IDE::read(unsigned char, unsigned char)>
c00199b6:	83 c4 1c             	add    esp,0x1c
c00199b9:	c3                   	ret    

c00199ba <ideChannel1IRQHandler(regs*, void*)>:
c00199ba:	83 ec 10             	sub    esp,0x10
c00199bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00199c1:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00199c8:	6a 07                	push   0x7
c00199ca:	6a 01                	push   0x1
c00199cc:	50                   	push   eax
c00199cd:	e8 bc fe ff ff       	call   c001988e <IDE::read(unsigned char, unsigned char)>
c00199d2:	83 c4 1c             	add    esp,0x1c
c00199d5:	c3                   	ret    

c00199d6 <IDE::enableIRQs(unsigned char, bool)>:
c00199d6:	57                   	push   edi
c00199d7:	56                   	push   esi
c00199d8:	be 04 00 00 00       	mov    esi,0x4
c00199dd:	53                   	push   ebx
c00199de:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00199e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00199e7:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00199ec:	0f 94 c0             	sete   al
c00199ef:	d1 e0                	shl    eax,1
c00199f1:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00199f8:	0f b6 c0             	movzx  eax,al
c00199fb:	50                   	push   eax
c00199fc:	6a 0c                	push   0xc
c00199fe:	57                   	push   edi
c00199ff:	53                   	push   ebx
c0019a00:	e8 c9 fd ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a05:	83 c4 10             	add    esp,0x10
c0019a08:	50                   	push   eax
c0019a09:	6a 0c                	push   0xc
c0019a0b:	57                   	push   edi
c0019a0c:	53                   	push   ebx
c0019a0d:	e8 7c fe ff ff       	call   c001988e <IDE::read(unsigned char, unsigned char)>
c0019a12:	83 c4 10             	add    esp,0x10
c0019a15:	4e                   	dec    esi
c0019a16:	75 f0                	jne    c0019a08 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0019a18:	5b                   	pop    ebx
c0019a19:	5e                   	pop    esi
c0019a1a:	5f                   	pop    edi
c0019a1b:	c3                   	ret    

c0019a1c <IDE::open(int, int, void*)>:
c0019a1c:	55                   	push   ebp
c0019a1d:	57                   	push   edi
c0019a1e:	56                   	push   esi
c0019a1f:	53                   	push   ebx
c0019a20:	83 ec 1c             	sub    esp,0x1c
c0019a23:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019a27:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0019a30:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0019a39:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0019a40:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0019a47:	0f 85 b0 02 00 00    	jne    c0019cfd <IDE::open(int, int, void*)+0x2e1>
c0019a4d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0019a53:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0019a57:	83 e0 7f             	and    eax,0x7f
c0019a5a:	3c 05                	cmp    al,0x5
c0019a5c:	74 04                	je     c0019a62 <IDE::open(int, int, void*)+0x46>
c0019a5e:	3c 0f                	cmp    al,0xf
c0019a60:	75 32                	jne    c0019a94 <IDE::open(int, int, void*)+0x78>
c0019a62:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0019a68:	83 e0 fc             	and    eax,0xfffffffc
c0019a6b:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019a72:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0019a78:	83 e0 fc             	and    eax,0xfffffffc
c0019a7b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019a82:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0019a88:	83 e0 fc             	and    eax,0xfffffffc
c0019a8b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019a92:	eb 14                	jmp    c0019aa8 <IDE::open(int, int, void*)+0x8c>
c0019a94:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0019a9e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0019aa8:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0019aaf:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0019ab6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019aba:	89 c6                	mov    esi,eax
c0019abc:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019ac1:	c1 e6 10             	shl    esi,0x10
c0019ac4:	89 e8                	mov    eax,ebp
c0019ac6:	89 fa                	mov    edx,edi
c0019ac8:	c1 e0 0b             	shl    eax,0xb
c0019acb:	09 f0                	or     eax,esi
c0019acd:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0019ad4:	c1 e6 08             	shl    esi,0x8
c0019ad7:	09 c6                	or     esi,eax
c0019ad9:	89 f0                	mov    eax,esi
c0019adb:	0d 08 00 00 80       	or     eax,0x80000008
c0019ae0:	ef                   	out    dx,eax
c0019ae1:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0019ae6:	89 ca                	mov    edx,ecx
c0019ae8:	ed                   	in     eax,dx
c0019ae9:	c1 e8 10             	shr    eax,0x10
c0019aec:	3d ff ff 00 00       	cmp    eax,0xffff
c0019af1:	0f 84 f5 00 00 00    	je     c0019bec <IDE::open(int, int, void*)+0x1d0>
c0019af7:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0019afd:	89 fa                	mov    edx,edi
c0019aff:	89 f0                	mov    eax,esi
c0019b01:	ef                   	out    dx,eax
c0019b02:	b0 fe                	mov    al,0xfe
c0019b04:	89 ca                	mov    edx,ecx
c0019b06:	ee                   	out    dx,al
c0019b07:	89 f0                	mov    eax,esi
c0019b09:	89 fa                	mov    edx,edi
c0019b0b:	ef                   	out    dx,eax
c0019b0c:	89 ca                	mov    edx,ecx
c0019b0e:	ed                   	in     eax,dx
c0019b0f:	3c fe                	cmp    al,0xfe
c0019b11:	0f 85 a9 00 00 00    	jne    c0019bc0 <IDE::open(int, int, void*)+0x1a4>
c0019b17:	8b 15 a8 07 02 c0    	mov    edx,DWORD PTR ds:0xc00207a8
c0019b1d:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0019b24:	74 33                	je     c0019b59 <IDE::open(int, int, void*)+0x13d>
c0019b26:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0019b2c:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0019b30:	40                   	inc    eax
c0019b31:	83 ec 0c             	sub    esp,0xc
c0019b34:	0f b6 c0             	movzx  eax,al
c0019b37:	50                   	push   eax
c0019b38:	55                   	push   ebp
c0019b39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b3d:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0019b43:	51                   	push   ecx
c0019b44:	e8 0b 41 ff ff       	call   c000dc54 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0019b49:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0019b4e:	83 c4 1c             	add    esp,0x1c
c0019b51:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019b57:	eb 0a                	jmp    c0019b63 <IDE::open(int, int, void*)+0x147>
c0019b59:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0019b63:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0019b6a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0019b71:	c1 e1 10             	shl    ecx,0x10
c0019b74:	c1 e0 08             	shl    eax,0x8
c0019b77:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019b7c:	09 c1                	or     ecx,eax
c0019b7e:	89 fa                	mov    edx,edi
c0019b80:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0019b87:	c1 e0 0b             	shl    eax,0xb
c0019b8a:	09 c1                	or     ecx,eax
c0019b8c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0019b92:	89 c8                	mov    eax,ecx
c0019b94:	ef                   	out    dx,eax
c0019b95:	be fc 0c 00 00       	mov    esi,0xcfc
c0019b9a:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0019ba0:	89 f2                	mov    edx,esi
c0019ba2:	ee                   	out    dx,al
c0019ba3:	89 c8                	mov    eax,ecx
c0019ba5:	89 fa                	mov    edx,edi
c0019ba7:	ef                   	out    dx,eax
c0019ba8:	89 f2                	mov    edx,esi
c0019baa:	ed                   	in     eax,dx
c0019bab:	0f b6 c0             	movzx  eax,al
c0019bae:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0019bb4:	74 46                	je     c0019bfc <IDE::open(int, int, void*)+0x1e0>
c0019bb6:	83 ec 0c             	sub    esp,0xc
c0019bb9:	68 f8 fa 01 c0       	push   0xc001faf8
c0019bbe:	eb 34                	jmp    c0019bf4 <IDE::open(int, int, void*)+0x1d8>
c0019bc0:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0019bc9:	75 17                	jne    c0019be2 <IDE::open(int, int, void*)+0x1c6>
c0019bcb:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0019bd0:	74 07                	je     c0019bd9 <IDE::open(int, int, void*)+0x1bd>
c0019bd2:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0019bd7:	75 09                	jne    c0019be2 <IDE::open(int, int, void*)+0x1c6>
c0019bd9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019be0:	eb 1a                	jmp    c0019bfc <IDE::open(int, int, void*)+0x1e0>
c0019be2:	83 ec 0c             	sub    esp,0xc
c0019be5:	68 00 fb 01 c0       	push   0xc001fb00
c0019bea:	eb 08                	jmp    c0019bf4 <IDE::open(int, int, void*)+0x1d8>
c0019bec:	83 ec 0c             	sub    esp,0xc
c0019bef:	68 31 fb 01 c0       	push   0xc001fb31
c0019bf4:	e8 e4 5b ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c0019bf9:	83 c4 10             	add    esp,0x10
c0019bfc:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0019c03:	79 1a                	jns    c0019c1f <IDE::open(int, int, void*)+0x203>
c0019c05:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0019c0b:	83 e0 fc             	and    eax,0xfffffffc
c0019c0e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0019c15:	83 c0 08             	add    eax,0x8
c0019c18:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0019c1f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019c25:	89 c2                	mov    edx,eax
c0019c27:	83 e2 0f             	and    edx,0xf
c0019c2a:	66 83 fa 08          	cmp    dx,0x8
c0019c2e:	75 0a                	jne    c0019c3a <IDE::open(int, int, void*)+0x21e>
c0019c30:	83 e8 02             	sub    eax,0x2
c0019c33:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019c3a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0019c40:	89 c2                	mov    edx,eax
c0019c42:	83 e2 0f             	and    edx,0xf
c0019c45:	66 83 fa 08          	cmp    dx,0x8
c0019c49:	75 0a                	jne    c0019c55 <IDE::open(int, int, void*)+0x239>
c0019c4b:	83 e8 02             	sub    eax,0x2
c0019c4e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019c55:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019c5c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0019c63:	89 d0                	mov    eax,edx
c0019c65:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019c68:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019c6c:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0019c70:	8d 4a 01             	lea    ecx,[edx+0x1]
c0019c73:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019c78:	0f b6 c9             	movzx  ecx,cl
c0019c7b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0019c82:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019c85:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019c89:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0019c8d:	8d 50 02             	lea    edx,[eax+0x2]
c0019c90:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019c95:	0f b6 d2             	movzx  edx,dl
c0019c98:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0019c9e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019ca1:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019ca5:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0019ca9:	8d 48 03             	lea    ecx,[eax+0x3]
c0019cac:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019cb1:	0f b6 c9             	movzx  ecx,cl
c0019cb4:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0019cba:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019cbd:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019cc1:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0019cc5:	8d 50 04             	lea    edx,[eax+0x4]
c0019cc8:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0019cce:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019cd3:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0019cda:	66 85 f6             	test   si,si
c0019cdd:	74 5b                	je     c0019d3a <IDE::open(int, int, void*)+0x31e>
c0019cdf:	0f b6 d2             	movzx  edx,dl
c0019ce2:	83 c0 05             	add    eax,0x5
c0019ce5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019ce8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019cec:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0019cf0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019cf6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019cfb:	eb 3d                	jmp    c0019d3a <IDE::open(int, int, void*)+0x31e>
c0019cfd:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0019d03:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019d0a:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019d11:	66 05 06 02          	add    ax,0x206
c0019d15:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019d1c:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0019d23:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019d2a:	66 05 06 02          	add    ax,0x206
c0019d2e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019d35:	e9 e5 fe ff ff       	jmp    c0019c1f <IDE::open(int, int, void*)+0x203>
c0019d3a:	50                   	push   eax
c0019d3b:	50                   	push   eax
c0019d3c:	6a 00                	push   0x0
c0019d3e:	53                   	push   ebx
c0019d3f:	e8 64 fa ff ff       	call   c00197a8 <IDE::prepareInterrupt(unsigned char)>
c0019d44:	5a                   	pop    edx
c0019d45:	59                   	pop    ecx
c0019d46:	6a 01                	push   0x1
c0019d48:	53                   	push   ebx
c0019d49:	e8 5a fa ff ff       	call   c00197a8 <IDE::prepareInterrupt(unsigned char)>
c0019d4e:	83 c4 0c             	add    esp,0xc
c0019d51:	6a 00                	push   0x0
c0019d53:	6a 00                	push   0x0
c0019d55:	53                   	push   ebx
c0019d56:	e8 7b fc ff ff       	call   c00199d6 <IDE::enableIRQs(unsigned char, bool)>
c0019d5b:	83 c4 0c             	add    esp,0xc
c0019d5e:	6a 00                	push   0x0
c0019d60:	6a 01                	push   0x1
c0019d62:	53                   	push   ebx
c0019d63:	e8 6e fc ff ff       	call   c00199d6 <IDE::enableIRQs(unsigned char, bool)>
c0019d68:	83 c4 10             	add    esp,0x10
c0019d6b:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0019d72:	74 34                	je     c0019da8 <IDE::open(int, int, void*)+0x38c>
c0019d74:	83 ec 0c             	sub    esp,0xc
c0019d77:	53                   	push   ebx
c0019d78:	6a 01                	push   0x1
c0019d7a:	68 9e 99 01 c0       	push   0xc001999e
c0019d7f:	6a 0e                	push   0xe
c0019d81:	53                   	push   ebx
c0019d82:	e8 4f 11 ff ff       	call   c000aed6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019d87:	83 c4 14             	add    esp,0x14
c0019d8a:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019d90:	53                   	push   ebx
c0019d91:	6a 01                	push   0x1
c0019d93:	68 ba 99 01 c0       	push   0xc00199ba
c0019d98:	6a 0f                	push   0xf
c0019d9a:	53                   	push   ebx
c0019d9b:	e8 36 11 ff ff       	call   c000aed6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019da0:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0019da6:	eb 38                	jmp    c0019de0 <IDE::open(int, int, void*)+0x3c4>
c0019da8:	83 ec 0c             	sub    esp,0xc
c0019dab:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0019db5:	53                   	push   ebx
c0019db6:	6a 00                	push   0x0
c0019db8:	68 9e 99 01 c0       	push   0xc001999e
c0019dbd:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0019dc3:	53                   	push   ebx
c0019dc4:	e8 0d 11 ff ff       	call   c000aed6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019dc9:	83 c4 14             	add    esp,0x14
c0019dcc:	53                   	push   ebx
c0019dcd:	6a 00                	push   0x0
c0019dcf:	68 ba 99 01 c0       	push   0xc00199ba
c0019dd4:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0019dda:	53                   	push   ebx
c0019ddb:	e8 f6 10 ff ff       	call   c000aed6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019de0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019de2:	83 c4 20             	add    esp,0x20
c0019de5:	83 ec 0c             	sub    esp,0xc
c0019de8:	53                   	push   ebx
c0019de9:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0019dec:	83 c4 0c             	add    esp,0xc
c0019def:	6a 07                	push   0x7
c0019df1:	6a 00                	push   0x0
c0019df3:	53                   	push   ebx
c0019df4:	e8 95 fa ff ff       	call   c001988e <IDE::read(unsigned char, unsigned char)>
c0019df9:	83 c4 0c             	add    esp,0xc
c0019dfc:	6a 07                	push   0x7
c0019dfe:	6a 01                	push   0x1
c0019e00:	53                   	push   ebx
c0019e01:	e8 88 fa ff ff       	call   c001988e <IDE::read(unsigned char, unsigned char)>
c0019e06:	83 c4 0c             	add    esp,0xc
c0019e09:	6a 01                	push   0x1
c0019e0b:	6a 00                	push   0x0
c0019e0d:	53                   	push   ebx
c0019e0e:	e8 c3 fb ff ff       	call   c00199d6 <IDE::enableIRQs(unsigned char, bool)>
c0019e13:	83 c4 0c             	add    esp,0xc
c0019e16:	6a 01                	push   0x1
c0019e18:	6a 01                	push   0x1
c0019e1a:	53                   	push   ebx
c0019e1b:	e8 b6 fb ff ff       	call   c00199d6 <IDE::enableIRQs(unsigned char, bool)>
c0019e20:	83 c4 2c             	add    esp,0x2c
c0019e23:	31 c0                	xor    eax,eax
c0019e25:	5b                   	pop    ebx
c0019e26:	5e                   	pop    esi
c0019e27:	5f                   	pop    edi
c0019e28:	5d                   	pop    ebp
c0019e29:	c3                   	ret    

c0019e2a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0019e2a:	55                   	push   ebp
c0019e2b:	57                   	push   edi
c0019e2c:	56                   	push   esi
c0019e2d:	53                   	push   ebx
c0019e2e:	83 ec 1c             	sub    esp,0x1c
c0019e31:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019e35:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019e39:	8d 50 f8             	lea    edx,[eax-0x8]
c0019e3c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019e40:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0019e44:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019e48:	80 fa 03             	cmp    dl,0x3
c0019e4b:	77 5d                	ja     c0019eaa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019e4d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019e51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019e55:	0f b6 db             	movzx  ebx,bl
c0019e58:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0019e5b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0019e5f:	83 ca 80             	or     edx,0xffffff80
c0019e62:	0f b6 d2             	movzx  edx,dl
c0019e65:	52                   	push   edx
c0019e66:	6a 0c                	push   0xc
c0019e68:	53                   	push   ebx
c0019e69:	56                   	push   esi
c0019e6a:	e8 5f f9 ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019e6f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0019e74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e78:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019e7c:	0f b6 c0             	movzx  eax,al
c0019e7f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0019e83:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019e85:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0019e8a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0019e8e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0019e92:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019e96:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019e9e:	83 c4 2c             	add    esp,0x2c
c0019ea1:	5b                   	pop    ebx
c0019ea2:	5e                   	pop    esi
c0019ea3:	5f                   	pop    edi
c0019ea4:	5d                   	pop    ebp
c0019ea5:	e9 24 f9 ff ff       	jmp    c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019eaa:	3c 07                	cmp    al,0x7
c0019eac:	77 10                	ja     c0019ebe <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0019eae:	0f b6 db             	movzx  ebx,bl
c0019eb1:	0f b6 d0             	movzx  edx,al
c0019eb4:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0019ebc:	eb 2d                	jmp    c0019eeb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019ebe:	3c 0d                	cmp    al,0xd
c0019ec0:	77 13                	ja     c0019ed5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0019ec2:	0f b6 db             	movzx  ebx,bl
c0019ec5:	0f b6 c0             	movzx  eax,al
c0019ec8:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0019ecf:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0019ed3:	eb 16                	jmp    c0019eeb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019ed5:	3c 15                	cmp    al,0x15
c0019ed7:	77 14                	ja     c0019eed <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0019ed9:	0f b6 db             	movzx  ebx,bl
c0019edc:	0f b6 c0             	movzx  eax,al
c0019edf:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0019ee7:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0019eeb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019eed:	83 c4 1c             	add    esp,0x1c
c0019ef0:	5b                   	pop    ebx
c0019ef1:	5e                   	pop    esi
c0019ef2:	5f                   	pop    edi
c0019ef3:	5d                   	pop    ebp
c0019ef4:	c3                   	ret    
c0019ef5:	90                   	nop

c0019ef6 <IDE::detect()>:
c0019ef6:	55                   	push   ebp
c0019ef7:	57                   	push   edi
c0019ef8:	56                   	push   esi
c0019ef9:	53                   	push   ebx
c0019efa:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019f00:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0019f07:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0019f0e:	0f 85 97 02 00 00    	jne    c001a1ab <IDE::detect()+0x2b5>
c0019f14:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0019f1b:	31 f6                	xor    esi,esi
c0019f1d:	31 ed                	xor    ebp,ebp
c0019f1f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019f27:	89 e8                	mov    eax,ebp
c0019f29:	c1 e0 06             	shl    eax,0x6
c0019f2c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0019f34:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019f38:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019f3c:	c1 e0 04             	shl    eax,0x4
c0019f3f:	83 c8 a0             	or     eax,0xffffffa0
c0019f42:	0f b6 c0             	movzx  eax,al
c0019f45:	50                   	push   eax
c0019f46:	6a 06                	push   0x6
c0019f48:	56                   	push   esi
c0019f49:	53                   	push   ebx
c0019f4a:	e8 7f f8 ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019f4f:	83 c4 0c             	add    esp,0xc
c0019f52:	6a 0c                	push   0xc
c0019f54:	56                   	push   esi
c0019f55:	53                   	push   ebx
c0019f56:	e8 33 f9 ff ff       	call   c001988e <IDE::read(unsigned char, unsigned char)>
c0019f5b:	83 c4 0c             	add    esp,0xc
c0019f5e:	6a 0c                	push   0xc
c0019f60:	56                   	push   esi
c0019f61:	53                   	push   ebx
c0019f62:	e8 27 f9 ff ff       	call   c001988e <IDE::read(unsigned char, unsigned char)>
c0019f67:	83 c4 0c             	add    esp,0xc
c0019f6a:	6a 0c                	push   0xc
c0019f6c:	56                   	push   esi
c0019f6d:	53                   	push   ebx
c0019f6e:	e8 1b f9 ff ff       	call   c001988e <IDE::read(unsigned char, unsigned char)>
c0019f73:	83 c4 0c             	add    esp,0xc
c0019f76:	6a 0c                	push   0xc
c0019f78:	56                   	push   esi
c0019f79:	53                   	push   ebx
c0019f7a:	e8 0f f9 ff ff       	call   c001988e <IDE::read(unsigned char, unsigned char)>
c0019f7f:	68 ec 00 00 00       	push   0xec
c0019f84:	6a 07                	push   0x7
c0019f86:	56                   	push   esi
c0019f87:	53                   	push   ebx
c0019f88:	e8 41 f8 ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019f8d:	83 c4 1c             	add    esp,0x1c
c0019f90:	6a 0c                	push   0xc
c0019f92:	56                   	push   esi
c0019f93:	53                   	push   ebx
c0019f94:	e8 f5 f8 ff ff       	call   c001988e <IDE::read(unsigned char, unsigned char)>
c0019f99:	83 c4 0c             	add    esp,0xc
c0019f9c:	6a 0c                	push   0xc
c0019f9e:	56                   	push   esi
c0019f9f:	53                   	push   ebx
c0019fa0:	e8 e9 f8 ff ff       	call   c001988e <IDE::read(unsigned char, unsigned char)>
c0019fa5:	83 c4 0c             	add    esp,0xc
c0019fa8:	6a 0c                	push   0xc
c0019faa:	56                   	push   esi
c0019fab:	53                   	push   ebx
c0019fac:	e8 dd f8 ff ff       	call   c001988e <IDE::read(unsigned char, unsigned char)>
c0019fb1:	83 c4 0c             	add    esp,0xc
c0019fb4:	6a 0c                	push   0xc
c0019fb6:	56                   	push   esi
c0019fb7:	53                   	push   ebx
c0019fb8:	e8 d1 f8 ff ff       	call   c001988e <IDE::read(unsigned char, unsigned char)>
c0019fbd:	83 c4 0c             	add    esp,0xc
c0019fc0:	6a 0c                	push   0xc
c0019fc2:	56                   	push   esi
c0019fc3:	53                   	push   ebx
c0019fc4:	e8 c5 f8 ff ff       	call   c001988e <IDE::read(unsigned char, unsigned char)>
c0019fc9:	83 c4 10             	add    esp,0x10
c0019fcc:	84 c0                	test   al,al
c0019fce:	0f 84 5f 01 00 00    	je     c001a133 <IDE::detect()+0x23d>
c0019fd4:	31 ff                	xor    edi,edi
c0019fd6:	50                   	push   eax
c0019fd7:	6a 0c                	push   0xc
c0019fd9:	56                   	push   esi
c0019fda:	53                   	push   ebx
c0019fdb:	e8 ae f8 ff ff       	call   c001988e <IDE::read(unsigned char, unsigned char)>
c0019fe0:	83 c4 10             	add    esp,0x10
c0019fe3:	a8 01                	test   al,0x1
c0019fe5:	0f 85 69 01 00 00    	jne    c001a154 <IDE::detect()+0x25e>
c0019feb:	84 c0                	test   al,al
c0019fed:	78 04                	js     c0019ff3 <IDE::detect()+0xfd>
c0019fef:	a8 08                	test   al,0x8
c0019ff1:	75 23                	jne    c001a016 <IDE::detect()+0x120>
c0019ff3:	47                   	inc    edi
c0019ff4:	81 ff 17 01 00 00    	cmp    edi,0x117
c0019ffa:	7e da                	jle    c0019fd6 <IDE::detect()+0xe0>
c0019ffc:	83 ec 0c             	sub    esp,0xc
c0019fff:	6a 32                	push   0x32
c001a001:	e8 52 8f ff ff       	call   c0012f58 <milliTenthSleep(unsigned int)>
c001a006:	83 c4 10             	add    esp,0x10
c001a009:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001a00f:	75 c5                	jne    c0019fd6 <IDE::detect()+0xe0>
c001a011:	e9 3e 01 00 00       	jmp    c001a154 <IDE::detect()+0x25e>
c001a016:	31 c9                	xor    ecx,ecx
c001a018:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001a01c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001a020:	83 ec 0c             	sub    esp,0xc
c001a023:	68 80 00 00 00       	push   0x80
c001a028:	57                   	push   edi
c001a029:	6a 00                	push   0x0
c001a02b:	56                   	push   esi
c001a02c:	53                   	push   ebx
c001a02d:	e8 f8 fd ff ff       	call   c0019e2a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001a032:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001a037:	89 e8                	mov    eax,ebp
c001a039:	89 d1                	mov    ecx,edx
c001a03b:	c1 e0 06             	shl    eax,0x6
c001a03e:	01 d8                	add    eax,ebx
c001a040:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001a047:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001a04e:	89 f2                	mov    edx,esi
c001a050:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001a056:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001a05a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001a060:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a064:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001a06b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001a073:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001a07a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001a082:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001a088:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001a08f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001a095:	8d 54 24 58          	lea    edx,[esp+0x58]
c001a099:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001a09d:	83 c4 20             	add    esp,0x20
c001a0a0:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001a0a3:	83 c0 02             	add    eax,0x2
c001a0a6:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001a0ac:	83 c7 02             	add    edi,0x2
c001a0af:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001a0b2:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001a0b8:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001a0bc:	75 e2                	jne    c001a0a0 <IDE::detect()+0x1aa>
c001a0be:	89 e8                	mov    eax,ebp
c001a0c0:	c1 e0 06             	shl    eax,0x6
c001a0c3:	01 d8                	add    eax,ebx
c001a0c5:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001a0cb:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001a0d2:	66 c1 ea 09          	shr    dx,0x9
c001a0d6:	83 e2 01             	and    edx,0x1
c001a0d9:	84 c9                	test   cl,cl
c001a0db:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001a0e1:	75 22                	jne    c001a105 <IDE::detect()+0x20f>
c001a0e3:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001a0ea:	74 46                	je     c001a132 <IDE::detect()+0x23c>
c001a0ec:	83 ec 0c             	sub    esp,0xc
c001a0ef:	68 7c 01 00 00       	push   0x17c
c001a0f4:	e8 84 cc fe ff       	call   c0006d7d <malloc>
c001a0f9:	89 c7                	mov    edi,eax
c001a0fb:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0fe:	e8 fd 04 00 00       	call   c001a600 <ATA::ATA()>
c001a103:	eb 17                	jmp    c001a11c <IDE::detect()+0x226>
c001a105:	83 ec 0c             	sub    esp,0xc
c001a108:	68 84 01 00 00       	push   0x184
c001a10d:	e8 6b cc fe ff       	call   c0006d7d <malloc>
c001a112:	89 c7                	mov    edi,eax
c001a114:	89 04 24             	mov    DWORD PTR [esp],eax
c001a117:	e8 dc 0a 00 00       	call   c001abf8 <ATAPI::ATAPI()>
c001a11c:	5a                   	pop    edx
c001a11d:	59                   	pop    ecx
c001a11e:	57                   	push   edi
c001a11f:	53                   	push   ebx
c001a120:	e8 05 0e ff ff       	call   c000af2a <Device::addChild(Device*)>
c001a125:	8b 07                	mov    eax,DWORD PTR [edi]
c001a127:	53                   	push   ebx
c001a128:	55                   	push   ebp
c001a129:	6a 00                	push   0x0
c001a12b:	57                   	push   edi
c001a12c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a12f:	83 c4 20             	add    esp,0x20
c001a132:	45                   	inc    ebp
c001a133:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001a138:	74 0d                	je     c001a147 <IDE::detect()+0x251>
c001a13a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001a142:	e9 e0 fd ff ff       	jmp    c0019f27 <IDE::detect()+0x31>
c001a147:	4e                   	dec    esi
c001a148:	74 61                	je     c001a1ab <IDE::detect()+0x2b5>
c001a14a:	be 01 00 00 00       	mov    esi,0x1
c001a14f:	e9 cb fd ff ff       	jmp    c0019f1f <IDE::detect()+0x29>
c001a154:	50                   	push   eax
c001a155:	6a 04                	push   0x4
c001a157:	56                   	push   esi
c001a158:	53                   	push   ebx
c001a159:	e8 30 f7 ff ff       	call   c001988e <IDE::read(unsigned char, unsigned char)>
c001a15e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a162:	83 c4 0c             	add    esp,0xc
c001a165:	6a 05                	push   0x5
c001a167:	56                   	push   esi
c001a168:	53                   	push   ebx
c001a169:	e8 20 f7 ff ff       	call   c001988e <IDE::read(unsigned char, unsigned char)>
c001a16e:	83 c4 10             	add    esp,0x10
c001a171:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001a175:	80 fa 14             	cmp    dl,0x14
c001a178:	75 04                	jne    c001a17e <IDE::detect()+0x288>
c001a17a:	3c eb                	cmp    al,0xeb
c001a17c:	eb 07                	jmp    c001a185 <IDE::detect()+0x28f>
c001a17e:	3c 96                	cmp    al,0x96
c001a180:	75 b1                	jne    c001a133 <IDE::detect()+0x23d>
c001a182:	80 fa 69             	cmp    dl,0x69
c001a185:	75 ac                	jne    c001a133 <IDE::detect()+0x23d>
c001a187:	68 a1 00 00 00       	push   0xa1
c001a18c:	6a 07                	push   0x7
c001a18e:	56                   	push   esi
c001a18f:	53                   	push   ebx
c001a190:	e8 39 f6 ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a195:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001a19c:	e8 b7 8d ff ff       	call   c0012f58 <milliTenthSleep(unsigned int)>
c001a1a1:	83 c4 10             	add    esp,0x10
c001a1a4:	b1 01                	mov    cl,0x1
c001a1a6:	e9 6d fe ff ff       	jmp    c001a018 <IDE::detect()+0x122>
c001a1ab:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a1b1:	5b                   	pop    ebx
c001a1b2:	5e                   	pop    esi
c001a1b3:	5f                   	pop    edi
c001a1b4:	5d                   	pop    ebp
c001a1b5:	c3                   	ret    

c001a1b6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001a1b6:	55                   	push   ebp
c001a1b7:	57                   	push   edi
c001a1b8:	56                   	push   esi
c001a1b9:	53                   	push   ebx
c001a1ba:	83 ec 1c             	sub    esp,0x1c
c001a1bd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a1c1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a1c5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a1c9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001a1cd:	88 c3                	mov    bl,al
c001a1cf:	84 c0                	test   al,al
c001a1d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a1d5:	0f 84 81 00 00 00    	je     c001a25c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001a1db:	83 ec 0c             	sub    esp,0xc
c001a1de:	68 5b fb 01 c0       	push   0xc001fb5b
c001a1e3:	e8 1f f9 fe ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c001a1e8:	83 c4 10             	add    esp,0x10
c001a1eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a1ef:	3c 01                	cmp    al,0x1
c001a1f1:	74 63                	je     c001a256 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001a1f3:	3c 02                	cmp    al,0x2
c001a1f5:	75 53                	jne    c001a24a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001a1f7:	d1 e6                	shl    esi,1
c001a1f9:	09 ee                	or     esi,ebp
c001a1fb:	50                   	push   eax
c001a1fc:	89 f0                	mov    eax,esi
c001a1fe:	6a 01                	push   0x1
c001a200:	0f b6 f0             	movzx  esi,al
c001a203:	c1 e6 06             	shl    esi,0x6
c001a206:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001a20e:	50                   	push   eax
c001a20f:	57                   	push   edi
c001a210:	e8 79 f6 ff ff       	call   c001988e <IDE::read(unsigned char, unsigned char)>
c001a215:	83 c4 10             	add    esp,0x10
c001a218:	a8 01                	test   al,0x1
c001a21a:	74 02                	je     c001a21e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001a21c:	b3 07                	mov    bl,0x7
c001a21e:	a8 02                	test   al,0x2
c001a220:	74 02                	je     c001a224 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001a222:	b3 03                	mov    bl,0x3
c001a224:	a8 04                	test   al,0x4
c001a226:	74 02                	je     c001a22a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001a228:	b3 14                	mov    bl,0x14
c001a22a:	a8 08                	test   al,0x8
c001a22c:	74 02                	je     c001a230 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001a22e:	b3 03                	mov    bl,0x3
c001a230:	a8 10                	test   al,0x10
c001a232:	74 02                	je     c001a236 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001a234:	b3 15                	mov    bl,0x15
c001a236:	a8 20                	test   al,0x20
c001a238:	74 02                	je     c001a23c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001a23a:	b3 03                	mov    bl,0x3
c001a23c:	a8 40                	test   al,0x40
c001a23e:	74 02                	je     c001a242 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001a240:	b3 16                	mov    bl,0x16
c001a242:	84 c0                	test   al,al
c001a244:	79 16                	jns    c001a25c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001a246:	b3 0d                	mov    bl,0xd
c001a248:	eb 12                	jmp    c001a25c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001a24a:	3c 03                	cmp    al,0x3
c001a24c:	74 0c                	je     c001a25a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001a24e:	3c 04                	cmp    al,0x4
c001a250:	75 0a                	jne    c001a25c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001a252:	b3 08                	mov    bl,0x8
c001a254:	eb 06                	jmp    c001a25c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001a256:	b3 13                	mov    bl,0x13
c001a258:	eb 02                	jmp    c001a25c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001a25a:	b3 17                	mov    bl,0x17
c001a25c:	83 c4 1c             	add    esp,0x1c
c001a25f:	88 d8                	mov    al,bl
c001a261:	5b                   	pop    ebx
c001a262:	5e                   	pop    esi
c001a263:	5f                   	pop    edi
c001a264:	5d                   	pop    ebp
c001a265:	c3                   	ret    

c001a266 <IDE::polling(unsigned char, unsigned int)>:
c001a266:	57                   	push   edi
c001a267:	56                   	push   esi
c001a268:	53                   	push   ebx
c001a269:	bb 04 00 00 00       	mov    ebx,0x4
c001a26e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001a272:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001a277:	52                   	push   edx
c001a278:	6a 0c                	push   0xc
c001a27a:	56                   	push   esi
c001a27b:	57                   	push   edi
c001a27c:	e8 0d f6 ff ff       	call   c001988e <IDE::read(unsigned char, unsigned char)>
c001a281:	83 c4 10             	add    esp,0x10
c001a284:	4b                   	dec    ebx
c001a285:	75 f0                	jne    c001a277 <IDE::polling(unsigned char, unsigned int)+0x11>
c001a287:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a28c:	50                   	push   eax
c001a28d:	6a 0c                	push   0xc
c001a28f:	56                   	push   esi
c001a290:	57                   	push   edi
c001a291:	e8 f8 f5 ff ff       	call   c001988e <IDE::read(unsigned char, unsigned char)>
c001a296:	83 c4 10             	add    esp,0x10
c001a299:	a8 01                	test   al,0x1
c001a29b:	75 17                	jne    c001a2b4 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001a29d:	a8 20                	test   al,0x20
c001a29f:	75 0f                	jne    c001a2b0 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001a2a1:	4b                   	dec    ebx
c001a2a2:	74 10                	je     c001a2b4 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001a2a4:	84 c0                	test   al,al
c001a2a6:	78 e4                	js     c001a28c <IDE::polling(unsigned char, unsigned int)+0x26>
c001a2a8:	a8 08                	test   al,0x8
c001a2aa:	74 e0                	je     c001a28c <IDE::polling(unsigned char, unsigned int)+0x26>
c001a2ac:	31 c0                	xor    eax,eax
c001a2ae:	eb 06                	jmp    c001a2b6 <IDE::polling(unsigned char, unsigned int)+0x50>
c001a2b0:	b0 01                	mov    al,0x1
c001a2b2:	eb 02                	jmp    c001a2b6 <IDE::polling(unsigned char, unsigned int)+0x50>
c001a2b4:	b0 02                	mov    al,0x2
c001a2b6:	5b                   	pop    ebx
c001a2b7:	5e                   	pop    esi
c001a2b8:	5f                   	pop    edi
c001a2b9:	c3                   	ret    

c001a2ba <SATABus::close(int, int, void*)>:
c001a2ba:	31 c0                	xor    eax,eax
c001a2bc:	c3                   	ret    
c001a2bd:	90                   	nop

c001a2be <SATABus::detect()>:
c001a2be:	c3                   	ret    
c001a2bf:	90                   	nop

c001a2c0 <SATABus::SATABus()>:
c001a2c0:	83 ec 0c             	sub    esp,0xc
c001a2c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2c7:	83 ec 08             	sub    esp,0x8
c001a2ca:	68 94 fb 01 c0       	push   0xc001fb94
c001a2cf:	50                   	push   eax
c001a2d0:	e8 97 0f ff ff       	call   c000b26c <HardDiskController::HardDiskController(char const*)>
c001a2d5:	83 c4 10             	add    esp,0x10
c001a2d8:	ba c0 fb 01 c0       	mov    edx,0xc001fbc0
c001a2dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2e1:	89 10                	mov    DWORD PTR [eax],edx
c001a2e3:	83 ec 0c             	sub    esp,0xc
c001a2e6:	6a 50                	push   0x50
c001a2e8:	e8 14 cf fe ff       	call   c0007201 <Phys::allocateContiguousPages(int)>
c001a2ed:	83 c4 10             	add    esp,0x10
c001a2f0:	89 c2                	mov    edx,eax
c001a2f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2f6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001a2fc:	83 ec 0c             	sub    esp,0xc
c001a2ff:	6a 50                	push   0x50
c001a301:	e8 9f e5 fe ff       	call   c00088a5 <Virt::allocateKernelVirtualPages(int)>
c001a306:	83 c4 10             	add    esp,0x10
c001a309:	89 c2                	mov    edx,eax
c001a30b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a30f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001a315:	a1 94 08 02 c0       	mov    eax,ds:0xc0020894
c001a31a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a31e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001a324:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a328:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001a32e:	83 ec 0c             	sub    esp,0xc
c001a331:	6a 03                	push   0x3
c001a333:	6a 50                	push   0x50
c001a335:	51                   	push   ecx
c001a336:	52                   	push   edx
c001a337:	50                   	push   eax
c001a338:	e8 b3 ee fe ff       	call   c00091f0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001a33d:	83 c4 20             	add    esp,0x20
c001a340:	90                   	nop
c001a341:	83 c4 0c             	add    esp,0xc
c001a344:	c3                   	ret    
c001a345:	90                   	nop

c001a346 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001a346:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a34a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001a34d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a350:	09 c2                	or     edx,eax
c001a352:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a356:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a35c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a35e:	31 c0                	xor    eax,eax
c001a360:	c1 e9 08             	shr    ecx,0x8
c001a363:	83 e1 0f             	and    ecx,0xf
c001a366:	39 c8                	cmp    eax,ecx
c001a368:	74 0a                	je     c001a374 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001a36a:	f6 c2 01             	test   dl,0x1
c001a36d:	74 08                	je     c001a377 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001a36f:	d1 ea                	shr    edx,1
c001a371:	40                   	inc    eax
c001a372:	eb f2                	jmp    c001a366 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001a374:	83 c8 ff             	or     eax,0xffffffff
c001a377:	c3                   	ret    

c001a378 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001a378:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a37c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001a37f:	89 c2                	mov    edx,eax
c001a381:	c1 ea 08             	shr    edx,0x8
c001a384:	83 e2 0f             	and    edx,0xf
c001a387:	fe ca                	dec    dl
c001a389:	75 31                	jne    c001a3bc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001a38b:	83 e0 0f             	and    eax,0xf
c001a38e:	3c 03                	cmp    al,0x3
c001a390:	75 2a                	jne    c001a3bc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001a392:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001a395:	b8 02 00 00 00       	mov    eax,0x2
c001a39a:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001a3a0:	74 1c                	je     c001a3be <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001a3a2:	b8 04 00 00 00       	mov    eax,0x4
c001a3a7:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001a3ad:	74 0f                	je     c001a3be <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001a3af:	31 c0                	xor    eax,eax
c001a3b1:	83 fa 03             	cmp    edx,0x3
c001a3b4:	0f 94 c0             	sete   al
c001a3b7:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001a3bb:	c3                   	ret    
c001a3bc:	31 c0                	xor    eax,eax
c001a3be:	c3                   	ret    
c001a3bf:	90                   	nop

c001a3c0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001a3c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3c4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001a3c7:	0f ba e2 0f          	bt     edx,0xf
c001a3cb:	72 f7                	jb     c001a3c4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001a3cd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001a3d0:	83 ca 10             	or     edx,0x10
c001a3d3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001a3d6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001a3d9:	83 ca 01             	or     edx,0x1
c001a3dc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001a3df:	c3                   	ret    

c001a3e0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001a3e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3e4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001a3e7:	83 e2 fe             	and    edx,0xfffffffe
c001a3ea:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001a3ed:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001a3f0:	83 e2 ef             	and    edx,0xffffffef
c001a3f3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001a3f6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001a3f9:	0f ba e2 0e          	bt     edx,0xe
c001a3fd:	72 f7                	jb     c001a3f6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001a3ff:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001a402:	0f ba e2 0f          	bt     edx,0xf
c001a406:	72 ee                	jb     c001a3f6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001a408:	c3                   	ret    
c001a409:	90                   	nop

c001a40a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001a40a:	55                   	push   ebp
c001a40b:	57                   	push   edi
c001a40c:	56                   	push   esi
c001a40d:	53                   	push   ebx
c001a40e:	83 ec 1c             	sub    esp,0x1c
c001a411:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a415:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a419:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001a41d:	53                   	push   ebx
c001a41e:	89 fd                	mov    ebp,edi
c001a420:	56                   	push   esi
c001a421:	c1 e5 0a             	shl    ebp,0xa
c001a424:	e8 b7 ff ff ff       	call   c001a3e0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001a429:	83 ec 0c             	sub    esp,0xc
c001a42c:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001a432:	01 e8                	add    eax,ebp
c001a434:	89 03                	mov    DWORD PTR [ebx],eax
c001a436:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a438:	68 00 04 00 00       	push   0x400
c001a43d:	6a 00                	push   0x0
c001a43f:	50                   	push   eax
c001a440:	e8 63 60 fe ff       	call   c00004a8 <memset>
c001a445:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001a44b:	89 fa                	mov    edx,edi
c001a44d:	01 e8                	add    eax,ebp
c001a44f:	c1 e7 0d             	shl    edi,0xd
c001a452:	89 03                	mov    DWORD PTR [ebx],eax
c001a454:	c1 e2 08             	shl    edx,0x8
c001a457:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a45e:	81 c2 00 80 00 00    	add    edx,0x8000
c001a464:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001a468:	89 d0                	mov    eax,edx
c001a46a:	83 c4 1c             	add    esp,0x1c
c001a46d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001a473:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a476:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001a479:	68 00 01 00 00       	push   0x100
c001a47e:	6a 00                	push   0x0
c001a480:	50                   	push   eax
c001a481:	e8 22 60 fe ff       	call   c00004a8 <memset>
c001a486:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a48a:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001a490:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001a496:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a49a:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001a49d:	83 c4 10             	add    esp,0x10
c001a4a0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a4a7:	31 ff                	xor    edi,edi
c001a4a9:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001a4af:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001a4b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4b9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001a4bf:	83 c5 20             	add    ebp,0x20
c001a4c2:	01 f8                	add    eax,edi
c001a4c4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001a4c7:	52                   	push   edx
c001a4c8:	68 00 01 00 00       	push   0x100
c001a4cd:	6a 00                	push   0x0
c001a4cf:	50                   	push   eax
c001a4d0:	e8 d3 5f fe ff       	call   c00004a8 <memset>
c001a4d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4d9:	83 c4 10             	add    esp,0x10
c001a4dc:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001a4e2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001a4e9:	01 f8                	add    eax,edi
c001a4eb:	81 c7 00 01 00 00    	add    edi,0x100
c001a4f1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001a4f4:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001a4fa:	75 b3                	jne    c001a4af <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001a4fc:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001a500:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001a504:	83 c4 1c             	add    esp,0x1c
c001a507:	5b                   	pop    ebx
c001a508:	5e                   	pop    esi
c001a509:	5f                   	pop    edi
c001a50a:	5d                   	pop    ebp
c001a50b:	e9 b0 fe ff ff       	jmp    c001a3c0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001a510 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001a510:	55                   	push   ebp
c001a511:	57                   	push   edi
c001a512:	56                   	push   esi
c001a513:	53                   	push   ebx
c001a514:	31 db                	xor    ebx,ebx
c001a516:	83 ec 0c             	sub    esp,0xc
c001a519:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a51d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a521:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001a524:	f7 c7 01 00 00 00    	test   edi,0x1
c001a52a:	74 7a                	je     c001a5a6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001a52c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001a530:	89 d8                	mov    eax,ebx
c001a532:	c1 e0 07             	shl    eax,0x7
c001a535:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001a53c:	55                   	push   ebp
c001a53d:	56                   	push   esi
c001a53e:	e8 35 fe ff ff       	call   c001a378 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001a543:	5a                   	pop    edx
c001a544:	83 f8 01             	cmp    eax,0x1
c001a547:	59                   	pop    ecx
c001a548:	75 21                	jne    c001a56b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001a54a:	50                   	push   eax
c001a54b:	53                   	push   ebx
c001a54c:	55                   	push   ebp
c001a54d:	56                   	push   esi
c001a54e:	e8 b7 fe ff ff       	call   c001a40a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001a553:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001a55a:	e8 1e c8 fe ff       	call   c0006d7d <malloc>
c001a55f:	89 c5                	mov    ebp,eax
c001a561:	89 04 24             	mov    DWORD PTR [esp],eax
c001a564:	e8 49 0d 00 00       	call   c001b2b2 <SATA::SATA()>
c001a569:	eb 24                	jmp    c001a58f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001a56b:	83 f8 04             	cmp    eax,0x4
c001a56e:	75 36                	jne    c001a5a6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001a570:	51                   	push   ecx
c001a571:	53                   	push   ebx
c001a572:	55                   	push   ebp
c001a573:	56                   	push   esi
c001a574:	e8 91 fe ff ff       	call   c001a40a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001a579:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001a580:	e8 f8 c7 fe ff       	call   c0006d7d <malloc>
c001a585:	89 c5                	mov    ebp,eax
c001a587:	89 04 24             	mov    DWORD PTR [esp],eax
c001a58a:	e8 7f 10 00 00       	call   c001b60e <SATAPI::SATAPI()>
c001a58f:	58                   	pop    eax
c001a590:	5a                   	pop    edx
c001a591:	55                   	push   ebp
c001a592:	56                   	push   esi
c001a593:	e8 92 09 ff ff       	call   c000af2a <Device::addChild(Device*)>
c001a598:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a59b:	56                   	push   esi
c001a59c:	6a 00                	push   0x0
c001a59e:	53                   	push   ebx
c001a59f:	55                   	push   ebp
c001a5a0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a5a3:	83 c4 20             	add    esp,0x20
c001a5a6:	d1 ef                	shr    edi,1
c001a5a8:	43                   	inc    ebx
c001a5a9:	83 fb 20             	cmp    ebx,0x20
c001a5ac:	0f 85 72 ff ff ff    	jne    c001a524 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001a5b2:	83 c4 0c             	add    esp,0xc
c001a5b5:	5b                   	pop    ebx
c001a5b6:	5e                   	pop    esi
c001a5b7:	5f                   	pop    edi
c001a5b8:	5d                   	pop    ebp
c001a5b9:	c3                   	ret    

c001a5ba <SATABus::open(int, int, void*)>:
c001a5ba:	83 ec 14             	sub    esp,0x14
c001a5bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a5c1:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001a5c7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001a5cd:	52                   	push   edx
c001a5ce:	50                   	push   eax
c001a5cf:	e8 3c ff ff ff       	call   c001a510 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001a5d4:	31 c0                	xor    eax,eax
c001a5d6:	83 c4 1c             	add    esp,0x1c
c001a5d9:	c3                   	ret    

c001a5da <ATA::close(int, int, void*)>:
c001a5da:	83 ec 0c             	sub    esp,0xc
c001a5dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5e1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a5e7:	85 c0                	test   eax,eax
c001a5e9:	74 0c                	je     c001a5f7 <ATA::close(int, int, void*)+0x1d>
c001a5eb:	83 ec 0c             	sub    esp,0xc
c001a5ee:	8b 10                	mov    edx,DWORD PTR [eax]
c001a5f0:	50                   	push   eax
c001a5f1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a5f4:	83 c4 10             	add    esp,0x10
c001a5f7:	31 c0                	xor    eax,eax
c001a5f9:	83 c4 0c             	add    esp,0xc
c001a5fc:	c3                   	ret    
c001a5fd:	90                   	nop

c001a5fe <ATA::powerSaving(PowerSavingLevel)>:
c001a5fe:	c3                   	ret    
c001a5ff:	90                   	nop

c001a600 <ATA::ATA()>:
c001a600:	83 ec 0c             	sub    esp,0xc
c001a603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a607:	83 ec 04             	sub    esp,0x4
c001a60a:	68 00 02 00 00       	push   0x200
c001a60f:	68 8d fc 01 c0       	push   0xc001fc8d
c001a614:	50                   	push   eax
c001a615:	e8 dc 0c ff ff       	call   c000b2f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a61a:	83 c4 10             	add    esp,0x10
c001a61d:	ba 00 fc 01 c0       	mov    edx,0xc001fc00
c001a622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a626:	89 10                	mov    DWORD PTR [eax],edx
c001a628:	90                   	nop
c001a629:	83 c4 0c             	add    esp,0xc
c001a62c:	c3                   	ret    
c001a62d:	90                   	nop

c001a62e <ATA::flush(bool)>:
c001a62e:	53                   	push   ebx
c001a62f:	83 ec 08             	sub    esp,0x8
c001a632:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001a637:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a63b:	19 c0                	sbb    eax,eax
c001a63d:	83 e0 fd             	and    eax,0xfffffffd
c001a640:	05 ea 00 00 00       	add    eax,0xea
c001a645:	50                   	push   eax
c001a646:	6a 07                	push   0x7
c001a648:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a64f:	50                   	push   eax
c001a650:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a656:	e8 73 f1 ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a65b:	83 c4 0c             	add    esp,0xc
c001a65e:	6a 00                	push   0x0
c001a660:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a667:	50                   	push   eax
c001a668:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a66e:	e8 f3 fb ff ff       	call   c001a266 <IDE::polling(unsigned char, unsigned int)>
c001a673:	83 c4 18             	add    esp,0x18
c001a676:	5b                   	pop    ebx
c001a677:	c3                   	ret    

c001a678 <ATA::readyForCommand()>:
c001a678:	56                   	push   esi
c001a679:	53                   	push   ebx
c001a67a:	53                   	push   ebx
c001a67b:	31 db                	xor    ebx,ebx
c001a67d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a681:	51                   	push   ecx
c001a682:	6a 0c                	push   0xc
c001a684:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a68b:	50                   	push   eax
c001a68c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a692:	e8 f7 f1 ff ff       	call   c001988e <IDE::read(unsigned char, unsigned char)>
c001a697:	83 c4 10             	add    esp,0x10
c001a69a:	a8 88                	test   al,0x88
c001a69c:	74 1f                	je     c001a6bd <ATA::readyForCommand()+0x45>
c001a69e:	43                   	inc    ebx
c001a69f:	83 fb 63             	cmp    ebx,0x63
c001a6a2:	7e dd                	jle    c001a681 <ATA::readyForCommand()+0x9>
c001a6a4:	83 ec 0c             	sub    esp,0xc
c001a6a7:	6a 0a                	push   0xa
c001a6a9:	e8 aa 88 ff ff       	call   c0012f58 <milliTenthSleep(unsigned int)>
c001a6ae:	83 c4 10             	add    esp,0x10
c001a6b1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001a6b7:	75 c8                	jne    c001a681 <ATA::readyForCommand()+0x9>
c001a6b9:	31 c0                	xor    eax,eax
c001a6bb:	eb 02                	jmp    c001a6bf <ATA::readyForCommand()+0x47>
c001a6bd:	b0 01                	mov    al,0x1
c001a6bf:	5a                   	pop    edx
c001a6c0:	5b                   	pop    ebx
c001a6c1:	5e                   	pop    esi
c001a6c2:	c3                   	ret    
c001a6c3:	90                   	nop

c001a6c4 <ATA::access(unsigned long long, int, void*, bool)>:
c001a6c4:	55                   	push   ebp
c001a6c5:	57                   	push   edi
c001a6c6:	56                   	push   esi
c001a6c7:	53                   	push   ebx
c001a6c8:	83 ec 2c             	sub    esp,0x2c
c001a6cb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a6cf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a6d3:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a6d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a6db:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001a6df:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a6e3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a6e7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001a6ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a6f1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a6f7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a6fb:	c1 e0 06             	shl    eax,0x6
c001a6fe:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001a706:	74 5d                	je     c001a765 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001a708:	89 fa                	mov    edx,edi
c001a70a:	89 f0                	mov    eax,esi
c001a70c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001a710:	c1 ea 1c             	shr    edx,0x1c
c001a713:	89 d1                	mov    ecx,edx
c001a715:	09 c1                	or     ecx,eax
c001a717:	74 25                	je     c001a73e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001a719:	31 ed                	xor    ebp,ebp
c001a71b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001a722:	89 fa                	mov    edx,edi
c001a724:	89 f0                	mov    eax,esi
c001a726:	0f ad d0             	shrd   eax,edx,cl
c001a729:	d3 ea                	shr    edx,cl
c001a72b:	f6 c1 20             	test   cl,0x20
c001a72e:	74 02                	je     c001a732 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001a730:	89 d0                	mov    eax,edx
c001a732:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001a736:	45                   	inc    ebp
c001a737:	83 fd 06             	cmp    ebp,0x6
c001a73a:	75 df                	jne    c001a71b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001a73c:	eb 76                	jmp    c001a7b4 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001a73e:	89 f0                	mov    eax,esi
c001a740:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001a745:	89 fa                	mov    edx,edi
c001a747:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a74e:	0f ac d0 10          	shrd   eax,edx,0x10
c001a752:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a757:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a75b:	c1 ee 18             	shr    esi,0x18
c001a75e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001a763:	eb 56                	jmp    c001a7bb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a765:	6a 00                	push   0x0
c001a767:	6a 3f                	push   0x3f
c001a769:	57                   	push   edi
c001a76a:	56                   	push   esi
c001a76b:	e8 80 22 00 00       	call   c001c9f0 <__umoddi3>
c001a770:	83 c4 10             	add    esp,0x10
c001a773:	40                   	inc    eax
c001a774:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a778:	6a 00                	push   0x0
c001a77a:	68 f0 03 00 00       	push   0x3f0
c001a77f:	57                   	push   edi
c001a780:	56                   	push   esi
c001a781:	e8 6a 21 00 00       	call   c001c8f0 <__udivdi3>
c001a786:	83 c4 10             	add    esp,0x10
c001a789:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001a78e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a795:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a79a:	6a 00                	push   0x0
c001a79c:	6a 3f                	push   0x3f
c001a79e:	57                   	push   edi
c001a79f:	56                   	push   esi
c001a7a0:	e8 4b 21 00 00       	call   c001c8f0 <__udivdi3>
c001a7a5:	83 c4 10             	add    esp,0x10
c001a7a8:	89 c6                	mov    esi,eax
c001a7aa:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a7af:	83 e6 0f             	and    esi,0xf
c001a7b2:	eb 07                	jmp    c001a7bb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a7b4:	31 f6                	xor    esi,esi
c001a7b6:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a7bb:	bf 01 00 00 00       	mov    edi,0x1
c001a7c0:	50                   	push   eax
c001a7c1:	6a 00                	push   0x0
c001a7c3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a7ca:	50                   	push   eax
c001a7cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a7cf:	e8 02 f2 ff ff       	call   c00199d6 <IDE::enableIRQs(unsigned char, bool)>
c001a7d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a7d7:	e8 9c fe ff ff       	call   c001a678 <ATA::readyForCommand()>
c001a7dc:	83 c4 10             	add    esp,0x10
c001a7df:	84 c0                	test   al,al
c001a7e1:	0f 84 4e 02 00 00    	je     c001aa35 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a7e7:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a7ed:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a7f3:	c1 e0 04             	shl    eax,0x4
c001a7f6:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a7fd:	09 c6                	or     esi,eax
c001a7ff:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a804:	75 05                	jne    c001a80b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a806:	83 ce a0             	or     esi,0xffffffa0
c001a809:	eb 03                	jmp    c001a80e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a80b:	83 ce e0             	or     esi,0xffffffe0
c001a80e:	89 f0                	mov    eax,esi
c001a810:	0f b6 f0             	movzx  esi,al
c001a813:	56                   	push   esi
c001a814:	6a 06                	push   0x6
c001a816:	51                   	push   ecx
c001a817:	52                   	push   edx
c001a818:	e8 b1 ef ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a81d:	83 c4 10             	add    esp,0x10
c001a820:	6a 00                	push   0x0
c001a822:	6a 01                	push   0x1
c001a824:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a82b:	50                   	push   eax
c001a82c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a832:	e8 97 ef ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a837:	83 c4 10             	add    esp,0x10
c001a83a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a83f:	75 6e                	jne    c001a8af <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a841:	6a 00                	push   0x0
c001a843:	6a 08                	push   0x8
c001a845:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a84c:	50                   	push   eax
c001a84d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a853:	e8 76 ef ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a858:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a85d:	50                   	push   eax
c001a85e:	6a 09                	push   0x9
c001a860:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a867:	50                   	push   eax
c001a868:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a86e:	e8 5b ef ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a873:	83 c4 20             	add    esp,0x20
c001a876:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a87b:	50                   	push   eax
c001a87c:	6a 0a                	push   0xa
c001a87e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a885:	50                   	push   eax
c001a886:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a88c:	e8 3d ef ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a891:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a896:	50                   	push   eax
c001a897:	6a 0b                	push   0xb
c001a899:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a8a0:	50                   	push   eax
c001a8a1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a8a7:	e8 22 ef ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a8ac:	83 c4 20             	add    esp,0x20
c001a8af:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a8b4:	50                   	push   eax
c001a8b5:	6a 02                	push   0x2
c001a8b7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a8be:	50                   	push   eax
c001a8bf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a8c5:	e8 04 ef ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a8ca:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a8cf:	50                   	push   eax
c001a8d0:	6a 03                	push   0x3
c001a8d2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a8d9:	50                   	push   eax
c001a8da:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a8e0:	e8 e9 ee ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a8e5:	83 c4 20             	add    esp,0x20
c001a8e8:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a8ed:	50                   	push   eax
c001a8ee:	6a 04                	push   0x4
c001a8f0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a8f7:	50                   	push   eax
c001a8f8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a8fe:	e8 cb ee ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a903:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a908:	50                   	push   eax
c001a909:	6a 05                	push   0x5
c001a90b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a912:	50                   	push   eax
c001a913:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a919:	e8 b0 ee ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a91e:	83 c4 20             	add    esp,0x20
c001a921:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a926:	0f 94 c0             	sete   al
c001a929:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a92e:	74 09                	je     c001a939 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a930:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a937:	eb 07                	jmp    c001a940 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a939:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a940:	0f b6 c0             	movzx  eax,al
c001a943:	50                   	push   eax
c001a944:	6a 07                	push   0x7
c001a946:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a94d:	50                   	push   eax
c001a94e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a954:	e8 75 ee ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a959:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a95d:	83 c4 10             	add    esp,0x10
c001a960:	85 f6                	test   esi,esi
c001a962:	0f 84 ae 00 00 00    	je     c001aa16 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a968:	50                   	push   eax
c001a969:	6a 01                	push   0x1
c001a96b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a972:	50                   	push   eax
c001a973:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a979:	e8 e8 f8 ff ff       	call   c001a266 <IDE::polling(unsigned char, unsigned int)>
c001a97e:	83 c4 10             	add    esp,0x10
c001a981:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a987:	84 c0                	test   al,al
c001a989:	74 20                	je     c001a9ab <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a98b:	0f b6 f8             	movzx  edi,al
c001a98e:	0f b6 d2             	movzx  edx,dl
c001a991:	57                   	push   edi
c001a992:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a999:	50                   	push   eax
c001a99a:	52                   	push   edx
c001a99b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a9a1:	e8 10 f8 ff ff       	call   c001a1b6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a9a6:	e9 87 00 00 00       	jmp    c001aa32 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a9ab:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a9b0:	74 33                	je     c001a9e5 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a9b2:	31 ed                	xor    ebp,ebp
c001a9b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a9b8:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a9bc:	50                   	push   eax
c001a9bd:	50                   	push   eax
c001a9be:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a9c5:	50                   	push   eax
c001a9c6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a9cc:	e8 eb ed ff ff       	call   c00197bc <IDE::getBase(unsigned char)>
c001a9d1:	89 c2                	mov    edx,eax
c001a9d3:	89 f8                	mov    eax,edi
c001a9d5:	66 ef                	out    dx,ax
c001a9d7:	45                   	inc    ebp
c001a9d8:	83 c4 10             	add    esp,0x10
c001a9db:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a9e1:	75 d1                	jne    c001a9b4 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a9e3:	eb 23                	jmp    c001aa08 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a9e5:	0f b6 d2             	movzx  edx,dl
c001a9e8:	51                   	push   ecx
c001a9e9:	51                   	push   ecx
c001a9ea:	52                   	push   edx
c001a9eb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a9f1:	e8 c6 ed ff ff       	call   c00197bc <IDE::getBase(unsigned char)>
c001a9f6:	b9 00 01 00 00       	mov    ecx,0x100
c001a9fb:	89 c2                	mov    edx,eax
c001a9fd:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001aa01:	fc                   	cld    
c001aa02:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001aa05:	83 c4 10             	add    esp,0x10
c001aa08:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001aa10:	4e                   	dec    esi
c001aa11:	e9 4a ff ff ff       	jmp    c001a960 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001aa16:	31 ff                	xor    edi,edi
c001aa18:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001aa1d:	74 16                	je     c001aa35 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001aa1f:	50                   	push   eax
c001aa20:	50                   	push   eax
c001aa21:	31 c0                	xor    eax,eax
c001aa23:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001aa28:	0f 94 c0             	sete   al
c001aa2b:	50                   	push   eax
c001aa2c:	53                   	push   ebx
c001aa2d:	e8 fc fb ff ff       	call   c001a62e <ATA::flush(bool)>
c001aa32:	83 c4 10             	add    esp,0x10
c001aa35:	83 c4 2c             	add    esp,0x2c
c001aa38:	89 f8                	mov    eax,edi
c001aa3a:	5b                   	pop    ebx
c001aa3b:	5e                   	pop    esi
c001aa3c:	5f                   	pop    edi
c001aa3d:	5d                   	pop    ebp
c001aa3e:	c3                   	ret    
c001aa3f:	90                   	nop

c001aa40 <ATA::read(unsigned long long, int, void*)>:
c001aa40:	57                   	push   edi
c001aa41:	b8 04 00 00 00       	mov    eax,0x4
c001aa46:	56                   	push   esi
c001aa47:	53                   	push   ebx
c001aa48:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aa4c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001aa50:	8d 7a ff             	lea    edi,[edx-0x1]
c001aa53:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aa57:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001aa5b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001aa61:	77 25                	ja     c001aa88 <ATA::read(unsigned long long, int, void*)+0x48>
c001aa63:	b8 06 00 00 00       	mov    eax,0x6
c001aa68:	85 f6                	test   esi,esi
c001aa6a:	74 1c                	je     c001aa88 <ATA::read(unsigned long long, int, void*)+0x48>
c001aa6c:	50                   	push   eax
c001aa6d:	50                   	push   eax
c001aa6e:	6a 00                	push   0x0
c001aa70:	56                   	push   esi
c001aa71:	52                   	push   edx
c001aa72:	53                   	push   ebx
c001aa73:	51                   	push   ecx
c001aa74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa78:	e8 47 fc ff ff       	call   c001a6c4 <ATA::access(unsigned long long, int, void*, bool)>
c001aa7d:	83 c4 20             	add    esp,0x20
c001aa80:	85 c0                	test   eax,eax
c001aa82:	0f 95 c0             	setne  al
c001aa85:	0f b6 c0             	movzx  eax,al
c001aa88:	5b                   	pop    ebx
c001aa89:	5e                   	pop    esi
c001aa8a:	5f                   	pop    edi
c001aa8b:	c3                   	ret    

c001aa8c <ATA::write(unsigned long long, int, void*)>:
c001aa8c:	57                   	push   edi
c001aa8d:	b8 04 00 00 00       	mov    eax,0x4
c001aa92:	56                   	push   esi
c001aa93:	53                   	push   ebx
c001aa94:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aa98:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001aa9c:	8d 7a ff             	lea    edi,[edx-0x1]
c001aa9f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aaa3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001aaa7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001aaad:	77 25                	ja     c001aad4 <ATA::write(unsigned long long, int, void*)+0x48>
c001aaaf:	b8 06 00 00 00       	mov    eax,0x6
c001aab4:	85 f6                	test   esi,esi
c001aab6:	74 1c                	je     c001aad4 <ATA::write(unsigned long long, int, void*)+0x48>
c001aab8:	50                   	push   eax
c001aab9:	50                   	push   eax
c001aaba:	6a 01                	push   0x1
c001aabc:	56                   	push   esi
c001aabd:	52                   	push   edx
c001aabe:	53                   	push   ebx
c001aabf:	51                   	push   ecx
c001aac0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aac4:	e8 fb fb ff ff       	call   c001a6c4 <ATA::access(unsigned long long, int, void*, bool)>
c001aac9:	83 c4 20             	add    esp,0x20
c001aacc:	85 c0                	test   eax,eax
c001aace:	0f 95 c0             	setne  al
c001aad1:	0f b6 c0             	movzx  eax,al
c001aad4:	5b                   	pop    ebx
c001aad5:	5e                   	pop    esi
c001aad6:	5f                   	pop    edi
c001aad7:	c3                   	ret    

c001aad8 <ATA::detectCHS()>:
c001aad8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aadc:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001aae2:	c1 e0 06             	shl    eax,0x6
c001aae5:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001aaeb:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001aaf5:	c7 44 24 04 e4 fb 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fbe4
c001aafd:	e9 db 4c ff ff       	jmp    c000f7dd <Krnl::panic(char const*)>

c001ab02 <ATA::open(int, int, void*)>:
c001ab02:	53                   	push   ebx
c001ab03:	83 ec 08             	sub    esp,0x8
c001ab06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab0a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ab0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab12:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ab18:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ab1e:	c1 e0 06             	shl    eax,0x6
c001ab21:	01 d0                	add    eax,edx
c001ab23:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001ab2a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001ab30:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001ab37:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ab41:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001ab47:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ab4e:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001ab55:	75 0c                	jne    c001ab63 <ATA::open(int, int, void*)+0x61>
c001ab57:	83 ec 0c             	sub    esp,0xc
c001ab5a:	53                   	push   ebx
c001ab5b:	e8 78 ff ff ff       	call   c001aad8 <ATA::detectCHS()>
c001ab60:	83 c4 10             	add    esp,0x10
c001ab63:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ab69:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ab6f:	c1 e0 06             	shl    eax,0x6
c001ab72:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001ab79:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ab83:	d1 e8                	shr    eax,1
c001ab85:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001ab8b:	6a 04                	push   0x4
c001ab8d:	6a 0c                	push   0xc
c001ab8f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ab96:	50                   	push   eax
c001ab97:	52                   	push   edx
c001ab98:	e8 31 ec ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ab9d:	90                   	nop
c001ab9e:	90                   	nop
c001ab9f:	6a 00                	push   0x0
c001aba1:	6a 0c                	push   0xc
c001aba3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001abaa:	50                   	push   eax
c001abab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001abb1:	e8 18 ec ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001abb6:	83 c4 14             	add    esp,0x14
c001abb9:	53                   	push   ebx
c001abba:	e8 9f 07 ff ff       	call   c000b35e <PhysicalDisk::startCache()>
c001abbf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001abc2:	e8 eb 17 ff ff       	call   c000c3b2 <createPartitionsForDisk(PhysicalDisk*)>
c001abc7:	31 c0                	xor    eax,eax
c001abc9:	83 c4 18             	add    esp,0x18
c001abcc:	5b                   	pop    ebx
c001abcd:	c3                   	ret    

c001abce <ATAPI::write(unsigned long long, int, void*)>:
c001abce:	b8 03 00 00 00       	mov    eax,0x3
c001abd3:	c3                   	ret    

c001abd4 <ATAPI::close(int, int, void*)>:
c001abd4:	83 ec 0c             	sub    esp,0xc
c001abd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abdb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001abe1:	85 c0                	test   eax,eax
c001abe3:	74 0c                	je     c001abf1 <ATAPI::close(int, int, void*)+0x1d>
c001abe5:	83 ec 0c             	sub    esp,0xc
c001abe8:	8b 10                	mov    edx,DWORD PTR [eax]
c001abea:	50                   	push   eax
c001abeb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001abee:	83 c4 10             	add    esp,0x10
c001abf1:	31 c0                	xor    eax,eax
c001abf3:	83 c4 0c             	add    esp,0xc
c001abf6:	c3                   	ret    
c001abf7:	90                   	nop

c001abf8 <ATAPI::ATAPI()>:
c001abf8:	83 ec 0c             	sub    esp,0xc
c001abfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abff:	83 ec 04             	sub    esp,0x4
c001ac02:	68 00 08 00 00       	push   0x800
c001ac07:	68 2d fd 01 c0       	push   0xc001fd2d
c001ac0c:	50                   	push   eax
c001ac0d:	e8 e4 06 ff ff       	call   c000b2f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ac12:	83 c4 10             	add    esp,0x10
c001ac15:	ba 48 fc 01 c0       	mov    edx,0xc001fc48
c001ac1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac1e:	89 10                	mov    DWORD PTR [eax],edx
c001ac20:	90                   	nop
c001ac21:	83 c4 0c             	add    esp,0xc
c001ac24:	c3                   	ret    
c001ac25:	90                   	nop

c001ac26 <ATAPI::readyForCommand()>:
c001ac26:	56                   	push   esi
c001ac27:	53                   	push   ebx
c001ac28:	53                   	push   ebx
c001ac29:	31 db                	xor    ebx,ebx
c001ac2b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ac2f:	51                   	push   ecx
c001ac30:	6a 0c                	push   0xc
c001ac32:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ac39:	50                   	push   eax
c001ac3a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ac40:	e8 49 ec ff ff       	call   c001988e <IDE::read(unsigned char, unsigned char)>
c001ac45:	83 c4 10             	add    esp,0x10
c001ac48:	a8 88                	test   al,0x88
c001ac4a:	74 25                	je     c001ac71 <ATAPI::readyForCommand()+0x4b>
c001ac4c:	43                   	inc    ebx
c001ac4d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001ac53:	7e da                	jle    c001ac2f <ATAPI::readyForCommand()+0x9>
c001ac55:	83 ec 0c             	sub    esp,0xc
c001ac58:	68 5e 01 00 00       	push   0x15e
c001ac5d:	e8 f6 82 ff ff       	call   c0012f58 <milliTenthSleep(unsigned int)>
c001ac62:	83 c4 10             	add    esp,0x10
c001ac65:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001ac6b:	75 c2                	jne    c001ac2f <ATAPI::readyForCommand()+0x9>
c001ac6d:	31 c0                	xor    eax,eax
c001ac6f:	eb 02                	jmp    c001ac73 <ATAPI::readyForCommand()+0x4d>
c001ac71:	b0 01                	mov    al,0x1
c001ac73:	5a                   	pop    edx
c001ac74:	5b                   	pop    ebx
c001ac75:	5e                   	pop    esi
c001ac76:	c3                   	ret    
c001ac77:	90                   	nop

c001ac78 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001ac78:	55                   	push   ebp
c001ac79:	57                   	push   edi
c001ac7a:	56                   	push   esi
c001ac7b:	53                   	push   ebx
c001ac7c:	83 ec 20             	sub    esp,0x20
c001ac7f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ac83:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ac87:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ac8b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ac8f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ac93:	6a 01                	push   0x1
c001ac95:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ac9c:	50                   	push   eax
c001ac9d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aca3:	e8 2e ed ff ff       	call   c00199d6 <IDE::enableIRQs(unsigned char, bool)>
c001aca8:	5e                   	pop    esi
c001aca9:	58                   	pop    eax
c001acaa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001acb1:	50                   	push   eax
c001acb2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001acb8:	e8 eb ea ff ff       	call   c00197a8 <IDE::prepareInterrupt(unsigned char)>
c001acbd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001acc0:	e8 61 ff ff ff       	call   c001ac26 <ATAPI::readyForCommand()>
c001acc5:	83 c4 10             	add    esp,0x10
c001acc8:	84 c0                	test   al,al
c001acca:	75 0a                	jne    c001acd6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001accc:	bb 01 00 00 00       	mov    ebx,0x1
c001acd1:	e9 57 02 00 00       	jmp    c001af2d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001acd6:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001acdc:	c1 e0 04             	shl    eax,0x4
c001acdf:	0f b6 c0             	movzx  eax,al
c001ace2:	50                   	push   eax
c001ace3:	6a 06                	push   0x6
c001ace5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001acec:	50                   	push   eax
c001aced:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001acf3:	e8 d6 ea ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001acf8:	6a 00                	push   0x0
c001acfa:	6a 01                	push   0x1
c001acfc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ad03:	50                   	push   eax
c001ad04:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ad0a:	e8 bf ea ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad0f:	83 c4 20             	add    esp,0x20
c001ad12:	0f b6 c3             	movzx  eax,bl
c001ad15:	0f b6 df             	movzx  ebx,bh
c001ad18:	50                   	push   eax
c001ad19:	6a 04                	push   0x4
c001ad1b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ad22:	50                   	push   eax
c001ad23:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ad29:	e8 a0 ea ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad2e:	53                   	push   ebx
c001ad2f:	6a 05                	push   0x5
c001ad31:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ad38:	50                   	push   eax
c001ad39:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ad3f:	e8 8a ea ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad44:	83 c4 20             	add    esp,0x20
c001ad47:	68 a0 00 00 00       	push   0xa0
c001ad4c:	6a 07                	push   0x7
c001ad4e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ad55:	50                   	push   eax
c001ad56:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ad5c:	e8 6d ea ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad61:	83 c4 0c             	add    esp,0xc
c001ad64:	6a 01                	push   0x1
c001ad66:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ad6d:	50                   	push   eax
c001ad6e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ad74:	e8 ed f4 ff ff       	call   c001a266 <IDE::polling(unsigned char, unsigned int)>
c001ad79:	83 c4 10             	add    esp,0x10
c001ad7c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001ad82:	84 c0                	test   al,al
c001ad84:	74 23                	je     c001ada9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001ad86:	0f b6 d8             	movzx  ebx,al
c001ad89:	0f b6 d2             	movzx  edx,dl
c001ad8c:	53                   	push   ebx
c001ad8d:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001ad94:	50                   	push   eax
c001ad95:	52                   	push   edx
c001ad96:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ad9c:	e8 15 f4 ff ff       	call   c001a1b6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ada1:	83 c4 10             	add    esp,0x10
c001ada4:	e9 84 01 00 00       	jmp    c001af2d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ada9:	0f b6 d2             	movzx  edx,dl
c001adac:	53                   	push   ebx
c001adad:	53                   	push   ebx
c001adae:	52                   	push   edx
c001adaf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001adb5:	e8 02 ea ff ff       	call   c00197bc <IDE::getBase(unsigned char)>
c001adba:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001adbe:	b9 06 00 00 00       	mov    ecx,0x6
c001adc3:	89 c2                	mov    edx,eax
c001adc5:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001adc8:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001adcc:	83 c4 10             	add    esp,0x10
c001adcf:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001add5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001addc:	85 db                	test   ebx,ebx
c001adde:	0f 84 ec 00 00 00    	je     c001aed0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001ade4:	51                   	push   ecx
c001ade5:	51                   	push   ecx
c001ade6:	52                   	push   edx
c001ade7:	50                   	push   eax
c001ade8:	e8 4f eb ff ff       	call   c001993c <IDE::waitInterrupt(unsigned char)>
c001aded:	83 c4 10             	add    esp,0x10
c001adf0:	84 c0                	test   al,al
c001adf2:	0f 84 d4 fe ff ff    	je     c001accc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001adf8:	56                   	push   esi
c001adf9:	56                   	push   esi
c001adfa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ae01:	50                   	push   eax
c001ae02:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ae08:	e8 9b e9 ff ff       	call   c00197a8 <IDE::prepareInterrupt(unsigned char)>
c001ae0d:	83 c4 0c             	add    esp,0xc
c001ae10:	6a 04                	push   0x4
c001ae12:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ae19:	50                   	push   eax
c001ae1a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ae20:	e8 69 ea ff ff       	call   c001988e <IDE::read(unsigned char, unsigned char)>
c001ae25:	83 c4 0c             	add    esp,0xc
c001ae28:	89 c6                	mov    esi,eax
c001ae2a:	6a 05                	push   0x5
c001ae2c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ae33:	50                   	push   eax
c001ae34:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ae3a:	e8 4f ea ff ff       	call   c001988e <IDE::read(unsigned char, unsigned char)>
c001ae3f:	89 f1                	mov    ecx,esi
c001ae41:	0f b6 c0             	movzx  eax,al
c001ae44:	0f b6 f1             	movzx  esi,cl
c001ae47:	c1 e0 08             	shl    eax,0x8
c001ae4a:	09 c6                	or     esi,eax
c001ae4c:	d1 fe                	sar    esi,1
c001ae4e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ae52:	83 c4 10             	add    esp,0x10
c001ae55:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ae5a:	74 41                	je     c001ae9d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ae5c:	31 c9                	xor    ecx,ecx
c001ae5e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ae64:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ae6b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ae6f:	75 0a                	jne    c001ae7b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001ae71:	01 c9                	add    ecx,ecx
c001ae73:	01 cd                	add    ebp,ecx
c001ae75:	4b                   	dec    ebx
c001ae76:	e9 54 ff ff ff       	jmp    c001adcf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001ae7b:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001ae80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ae84:	51                   	push   ecx
c001ae85:	51                   	push   ecx
c001ae86:	52                   	push   edx
c001ae87:	50                   	push   eax
c001ae88:	e8 2f e9 ff ff       	call   c00197bc <IDE::getBase(unsigned char)>
c001ae8d:	89 c2                	mov    edx,eax
c001ae8f:	89 f0                	mov    eax,esi
c001ae91:	66 ef                	out    dx,ax
c001ae93:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ae97:	83 c4 10             	add    esp,0x10
c001ae9a:	41                   	inc    ecx
c001ae9b:	eb c1                	jmp    c001ae5e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001ae9d:	31 f6                	xor    esi,esi
c001ae9f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001aea5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001aeac:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001aeb0:	75 06                	jne    c001aeb8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001aeb2:	01 f6                	add    esi,esi
c001aeb4:	01 f5                	add    ebp,esi
c001aeb6:	eb bd                	jmp    c001ae75 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001aeb8:	51                   	push   ecx
c001aeb9:	51                   	push   ecx
c001aeba:	52                   	push   edx
c001aebb:	50                   	push   eax
c001aebc:	e8 fb e8 ff ff       	call   c00197bc <IDE::getBase(unsigned char)>
c001aec1:	89 c2                	mov    edx,eax
c001aec3:	66 ed                	in     ax,dx
c001aec5:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001aeca:	83 c4 10             	add    esp,0x10
c001aecd:	46                   	inc    esi
c001aece:	eb cf                	jmp    c001ae9f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001aed0:	51                   	push   ecx
c001aed1:	51                   	push   ecx
c001aed2:	52                   	push   edx
c001aed3:	50                   	push   eax
c001aed4:	e8 63 ea ff ff       	call   c001993c <IDE::waitInterrupt(unsigned char)>
c001aed9:	83 c4 10             	add    esp,0x10
c001aedc:	84 c0                	test   al,al
c001aede:	0f 84 e8 fd ff ff    	je     c001accc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001aee4:	bb a0 86 01 00       	mov    ebx,0x186a0
c001aee9:	52                   	push   edx
c001aeea:	52                   	push   edx
c001aeeb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001aef2:	50                   	push   eax
c001aef3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aef9:	e8 aa e8 ff ff       	call   c00197a8 <IDE::prepareInterrupt(unsigned char)>
c001aefe:	83 c4 10             	add    esp,0x10
c001af01:	50                   	push   eax
c001af02:	50                   	push   eax
c001af03:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001af0a:	50                   	push   eax
c001af0b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001af11:	e8 a6 e8 ff ff       	call   c00197bc <IDE::getBase(unsigned char)>
c001af16:	8d 50 07             	lea    edx,[eax+0x7]
c001af19:	ec                   	in     al,dx
c001af1a:	83 c4 10             	add    esp,0x10
c001af1d:	a8 88                	test   al,0x88
c001af1f:	74 0a                	je     c001af2b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001af21:	4b                   	dec    ebx
c001af22:	75 dd                	jne    c001af01 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001af24:	bb 02 00 00 00       	mov    ebx,0x2
c001af29:	eb 02                	jmp    c001af2d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001af2b:	31 db                	xor    ebx,ebx
c001af2d:	83 c4 1c             	add    esp,0x1c
c001af30:	89 d8                	mov    eax,ebx
c001af32:	5b                   	pop    ebx
c001af33:	5e                   	pop    esi
c001af34:	5f                   	pop    edi
c001af35:	5d                   	pop    ebp
c001af36:	c3                   	ret    
c001af37:	90                   	nop

c001af38 <ATAPI::diskRemoved()>:
c001af38:	53                   	push   ebx
c001af39:	83 ec 14             	sub    esp,0x14
c001af3c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001af40:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001af47:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001af4d:	e8 de 11 ff ff       	call   c000c130 <LogicalDisk::unmount()>
c001af52:	58                   	pop    eax
c001af53:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001af59:	e8 1a 1b ff ff       	call   c000ca78 <VCache::writeWriteBuffer()>
c001af5e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001af64:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001af68:	83 c4 18             	add    esp,0x18
c001af6b:	5b                   	pop    ebx
c001af6c:	e9 f7 1a ff ff       	jmp    c000ca68 <VCache::invalidateReadBuffer()>
c001af71:	90                   	nop

c001af72 <ATAPI::eject()>:
c001af72:	57                   	push   edi
c001af73:	b9 03 00 00 00       	mov    ecx,0x3
c001af78:	53                   	push   ebx
c001af79:	83 ec 14             	sub    esp,0x14
c001af7c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af80:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001af84:	fc                   	cld    
c001af85:	31 c0                	xor    eax,eax
c001af87:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001af89:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001af8e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001af93:	50                   	push   eax
c001af94:	50                   	push   eax
c001af95:	6a 00                	push   0x0
c001af97:	6a 00                	push   0x0
c001af99:	6a 00                	push   0x0
c001af9b:	6a 02                	push   0x2
c001af9d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001afa1:	50                   	push   eax
c001afa2:	53                   	push   ebx
c001afa3:	e8 d0 fc ff ff       	call   c001ac78 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001afa8:	83 c4 14             	add    esp,0x14
c001afab:	53                   	push   ebx
c001afac:	e8 87 ff ff ff       	call   c001af38 <ATAPI::diskRemoved()>
c001afb1:	83 c4 24             	add    esp,0x24
c001afb4:	31 c0                	xor    eax,eax
c001afb6:	5b                   	pop    ebx
c001afb7:	5f                   	pop    edi
c001afb8:	c3                   	ret    
c001afb9:	90                   	nop

c001afba <ATAPI::diskInserted()>:
c001afba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afbe:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001afc5:	c3                   	ret    

c001afc6 <ATAPI::detectMedia()>:
c001afc6:	56                   	push   esi
c001afc7:	53                   	push   ebx
c001afc8:	83 ec 28             	sub    esp,0x28
c001afcb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001afcf:	6a 0c                	push   0xc
c001afd1:	6a 00                	push   0x0
c001afd3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001afd7:	56                   	push   esi
c001afd8:	e8 cb 54 fe ff       	call   c00004a8 <memset>
c001afdd:	58                   	pop    eax
c001afde:	5a                   	pop    edx
c001afdf:	6a 00                	push   0x0
c001afe1:	6a 00                	push   0x0
c001afe3:	6a 00                	push   0x0
c001afe5:	6a 00                	push   0x0
c001afe7:	56                   	push   esi
c001afe8:	53                   	push   ebx
c001afe9:	e8 8a fc ff ff       	call   c001ac78 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001afee:	83 c4 1c             	add    esp,0x1c
c001aff1:	6a 0c                	push   0xc
c001aff3:	6a 00                	push   0x0
c001aff5:	56                   	push   esi
c001aff6:	e8 ad 54 fe ff       	call   c00004a8 <memset>
c001affb:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001b000:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001b005:	59                   	pop    ecx
c001b006:	58                   	pop    eax
c001b007:	6a 01                	push   0x1
c001b009:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001b00d:	50                   	push   eax
c001b00e:	6a 00                	push   0x0
c001b010:	6a 12                	push   0x12
c001b012:	56                   	push   esi
c001b013:	53                   	push   ebx
c001b014:	e8 5f fc ff ff       	call   c001ac78 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001b019:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001b01d:	83 c4 20             	add    esp,0x20
c001b020:	83 e0 7f             	and    eax,0x7f
c001b023:	3c 70                	cmp    al,0x70
c001b025:	74 15                	je     c001b03c <ATAPI::detectMedia()+0x76>
c001b027:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001b02e:	75 0c                	jne    c001b03c <ATAPI::detectMedia()+0x76>
c001b030:	83 ec 0c             	sub    esp,0xc
c001b033:	53                   	push   ebx
c001b034:	e8 81 ff ff ff       	call   c001afba <ATAPI::diskInserted()>
c001b039:	83 c4 10             	add    esp,0x10
c001b03c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b040:	83 e0 0f             	and    eax,0xf
c001b043:	3c 02                	cmp    al,0x2
c001b045:	75 1b                	jne    c001b062 <ATAPI::detectMedia()+0x9c>
c001b047:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001b04c:	75 2d                	jne    c001b07b <ATAPI::detectMedia()+0xb5>
c001b04e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001b055:	74 24                	je     c001b07b <ATAPI::detectMedia()+0xb5>
c001b057:	83 ec 0c             	sub    esp,0xc
c001b05a:	53                   	push   ebx
c001b05b:	e8 d8 fe ff ff       	call   c001af38 <ATAPI::diskRemoved()>
c001b060:	eb 16                	jmp    c001b078 <ATAPI::detectMedia()+0xb2>
c001b062:	84 c0                	test   al,al
c001b064:	75 15                	jne    c001b07b <ATAPI::detectMedia()+0xb5>
c001b066:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001b06d:	75 0c                	jne    c001b07b <ATAPI::detectMedia()+0xb5>
c001b06f:	83 ec 0c             	sub    esp,0xc
c001b072:	53                   	push   ebx
c001b073:	e8 42 ff ff ff       	call   c001afba <ATAPI::diskInserted()>
c001b078:	83 c4 10             	add    esp,0x10
c001b07b:	83 c4 24             	add    esp,0x24
c001b07e:	5b                   	pop    ebx
c001b07f:	5e                   	pop    esi
c001b080:	c3                   	ret    
c001b081:	90                   	nop

c001b082 <ATAPI::open(int, int, void*)>:
c001b082:	56                   	push   esi
c001b083:	53                   	push   ebx
c001b084:	50                   	push   eax
c001b085:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b089:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b08d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b091:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001b097:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001b09d:	c1 e0 06             	shl    eax,0x6
c001b0a0:	01 d0                	add    eax,edx
c001b0a2:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001b0a9:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001b0af:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001b0b6:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b0c0:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001b0c6:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b0cd:	6a 04                	push   0x4
c001b0cf:	6a 0c                	push   0xc
c001b0d1:	51                   	push   ecx
c001b0d2:	52                   	push   edx
c001b0d3:	e8 f6 e6 ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b0d8:	90                   	nop
c001b0d9:	90                   	nop
c001b0da:	6a 00                	push   0x0
c001b0dc:	6a 0c                	push   0xc
c001b0de:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b0e5:	50                   	push   eax
c001b0e6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b0ec:	e8 dd e6 ff ff       	call   c00197ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b0f1:	83 c4 14             	add    esp,0x14
c001b0f4:	68 74 01 00 00       	push   0x174
c001b0f9:	e8 7f bc fe ff       	call   c0006d7d <malloc>
c001b0fe:	83 c4 0c             	add    esp,0xc
c001b101:	89 c6                	mov    esi,eax
c001b103:	6a 00                	push   0x0
c001b105:	68 ff ff ff 7f       	push   0x7fffffff
c001b10a:	6a 00                	push   0x0
c001b10c:	6a 00                	push   0x0
c001b10e:	53                   	push   ebx
c001b10f:	68 16 fe 01 c0       	push   0xc001fe16
c001b114:	50                   	push   eax
c001b115:	e8 62 0e ff ff       	call   c000bf7c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b11a:	83 c4 14             	add    esp,0x14
c001b11d:	56                   	push   esi
c001b11e:	e8 0f 0f ff ff       	call   c000c032 <LogicalDisk::assignDriveLetter()>
c001b123:	5a                   	pop    edx
c001b124:	0f be c0             	movsx  eax,al
c001b127:	59                   	pop    ecx
c001b128:	50                   	push   eax
c001b129:	68 30 fc 01 c0       	push   0xc001fc30
c001b12e:	e8 d4 e9 fe ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c001b133:	58                   	pop    eax
c001b134:	5a                   	pop    edx
c001b135:	56                   	push   esi
c001b136:	53                   	push   ebx
c001b137:	e8 ee fd fe ff       	call   c000af2a <Device::addChild(Device*)>
c001b13c:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001b142:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b145:	e8 14 02 ff ff       	call   c000b35e <PhysicalDisk::startCache()>
c001b14a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001b151:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b154:	e8 6d fe ff ff       	call   c001afc6 <ATAPI::detectMedia()>
c001b159:	83 c4 14             	add    esp,0x14
c001b15c:	31 c0                	xor    eax,eax
c001b15e:	5b                   	pop    ebx
c001b15f:	5e                   	pop    esi
c001b160:	c3                   	ret    
c001b161:	90                   	nop

c001b162 <ATAPI::read(unsigned long long, int, void*)>:
c001b162:	55                   	push   ebp
c001b163:	57                   	push   edi
c001b164:	56                   	push   esi
c001b165:	53                   	push   ebx
c001b166:	83 ec 1c             	sub    esp,0x1c
c001b169:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b16d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b171:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001b175:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001b17c:	74 41                	je     c001b1bf <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001b17e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b182:	b9 03 00 00 00       	mov    ecx,0x3
c001b187:	fc                   	cld    
c001b188:	31 c0                	xor    eax,eax
c001b18a:	86 fb                	xchg   bl,bh
c001b18c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b18e:	c1 c3 10             	rol    ebx,0x10
c001b191:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001b196:	89 e8                	mov    eax,ebp
c001b198:	86 fb                	xchg   bl,bh
c001b19a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001b19e:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001b1a2:	50                   	push   eax
c001b1a3:	50                   	push   eax
c001b1a4:	55                   	push   ebp
c001b1a5:	c1 e5 0b             	shl    ebp,0xb
c001b1a8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b1ac:	6a 00                	push   0x0
c001b1ae:	55                   	push   ebp
c001b1af:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b1b3:	50                   	push   eax
c001b1b4:	56                   	push   esi
c001b1b5:	e8 be fa ff ff       	call   c001ac78 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001b1ba:	83 c4 20             	add    esp,0x20
c001b1bd:	eb 1a                	jmp    c001b1d9 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001b1bf:	83 ec 0c             	sub    esp,0xc
c001b1c2:	56                   	push   esi
c001b1c3:	e8 fe fd ff ff       	call   c001afc6 <ATAPI::detectMedia()>
c001b1c8:	83 c4 10             	add    esp,0x10
c001b1cb:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001b1d2:	75 aa                	jne    c001b17e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001b1d4:	b8 02 00 00 00       	mov    eax,0x2
c001b1d9:	83 c4 1c             	add    esp,0x1c
c001b1dc:	5b                   	pop    ebx
c001b1dd:	5e                   	pop    esi
c001b1de:	5f                   	pop    edi
c001b1df:	5d                   	pop    ebp
c001b1e0:	c3                   	ret    
c001b1e1:	90                   	nop

c001b1e2 <SATA::close(int, int, void*)>:
c001b1e2:	83 ec 0c             	sub    esp,0xc
c001b1e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1e9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b1ef:	85 c0                	test   eax,eax
c001b1f1:	74 0c                	je     c001b1ff <SATA::close(int, int, void*)+0x1d>
c001b1f3:	83 ec 0c             	sub    esp,0xc
c001b1f6:	8b 10                	mov    edx,DWORD PTR [eax]
c001b1f8:	50                   	push   eax
c001b1f9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b1fc:	83 c4 10             	add    esp,0x10
c001b1ff:	31 c0                	xor    eax,eax
c001b201:	83 c4 0c             	add    esp,0xc
c001b204:	c3                   	ret    
c001b205:	90                   	nop

c001b206 <SATA::powerSaving(PowerSavingLevel)>:
c001b206:	c3                   	ret    
c001b207:	90                   	nop

c001b208 <SATA::open(int, int, void*)>:
c001b208:	56                   	push   esi
c001b209:	53                   	push   ebx
c001b20a:	50                   	push   eax
c001b20b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b20f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b213:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001b21d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b223:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b22d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b231:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b23b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b241:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001b248:	e8 f7 be fe ff       	call   c0007144 <Phys::allocatePage()>
c001b24d:	89 c6                	mov    esi,eax
c001b24f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001b255:	81 c6 00 10 00 00    	add    esi,0x1000
c001b25b:	e8 e4 be fe ff       	call   c0007144 <Phys::allocatePage()>
c001b260:	39 c6                	cmp    esi,eax
c001b262:	74 10                	je     c001b274 <SATA::open(int, int, void*)+0x6c>
c001b264:	83 ec 0c             	sub    esp,0xc
c001b267:	68 78 fc 01 c0       	push   0xc001fc78
c001b26c:	e8 6c 45 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c001b271:	83 c4 10             	add    esp,0x10
c001b274:	83 ec 0c             	sub    esp,0xc
c001b277:	6a 02                	push   0x2
c001b279:	e8 27 d6 fe ff       	call   c00088a5 <Virt::allocateKernelVirtualPages(int)>
c001b27e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001b284:	6a 03                	push   0x3
c001b286:	50                   	push   eax
c001b287:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001b28d:	ff 35 94 08 02 c0    	push   DWORD PTR ds:0xc0020894
c001b293:	e8 60 dc fe ff       	call   c0008ef8 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b298:	83 c4 14             	add    esp,0x14
c001b29b:	53                   	push   ebx
c001b29c:	e8 bd 00 ff ff       	call   c000b35e <PhysicalDisk::startCache()>
c001b2a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b2a4:	e8 09 11 ff ff       	call   c000c3b2 <createPartitionsForDisk(PhysicalDisk*)>
c001b2a9:	83 c4 14             	add    esp,0x14
c001b2ac:	31 c0                	xor    eax,eax
c001b2ae:	5b                   	pop    ebx
c001b2af:	5e                   	pop    esi
c001b2b0:	c3                   	ret    
c001b2b1:	90                   	nop

c001b2b2 <SATA::SATA()>:
c001b2b2:	83 ec 0c             	sub    esp,0xc
c001b2b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2b9:	83 ec 04             	sub    esp,0x4
c001b2bc:	68 00 02 00 00       	push   0x200
c001b2c1:	68 8c fc 01 c0       	push   0xc001fc8c
c001b2c6:	50                   	push   eax
c001b2c7:	e8 2a 00 ff ff       	call   c000b2f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b2cc:	83 c4 10             	add    esp,0x10
c001b2cf:	ba fc fc 01 c0       	mov    edx,0xc001fcfc
c001b2d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2d8:	89 10                	mov    DWORD PTR [eax],edx
c001b2da:	90                   	nop
c001b2db:	83 c4 0c             	add    esp,0xc
c001b2de:	c3                   	ret    
c001b2df:	90                   	nop

c001b2e0 <SATA::access(unsigned long long, int, void*, bool)>:
c001b2e0:	55                   	push   ebp
c001b2e1:	57                   	push   edi
c001b2e2:	56                   	push   esi
c001b2e3:	53                   	push   ebx
c001b2e4:	83 ec 2c             	sub    esp,0x2c
c001b2e7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001b2eb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001b2ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b2f3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b2f7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001b2fb:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001b300:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b304:	7e 10                	jle    c001b316 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001b306:	83 ec 0c             	sub    esp,0xc
c001b309:	68 9c fc 01 c0       	push   0xc001fc9c
c001b30e:	e8 ca 44 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c001b313:	83 c4 10             	add    esp,0x10
c001b316:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001b31c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001b322:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b328:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b32c:	89 d0                	mov    eax,edx
c001b32e:	c1 e0 07             	shl    eax,0x7
c001b331:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001b335:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001b33f:	51                   	push   ecx
c001b340:	8d 42 02             	lea    eax,[edx+0x2]
c001b343:	51                   	push   ecx
c001b344:	c1 e0 07             	shl    eax,0x7
c001b347:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001b34b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001b34f:	50                   	push   eax
c001b350:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001b356:	e8 eb ef ff ff       	call   c001a346 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001b35b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b35f:	83 c4 10             	add    esp,0x10
c001b362:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001b367:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b36b:	0f 84 4f 01 00 00    	je     c001b4c0 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001b371:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b375:	c1 e0 09             	shl    eax,0x9
c001b378:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001b37d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b381:	74 0e                	je     c001b391 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001b383:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001b389:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001b38d:	89 c1                	mov    ecx,eax
c001b38f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b391:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001b395:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001b39b:	8d 42 02             	lea    eax,[edx+0x2]
c001b39e:	c1 e0 07             	shl    eax,0x7
c001b3a1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001b3a5:	8b 00                	mov    eax,DWORD PTR [eax]
c001b3a7:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001b3ad:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001b3b3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b3b7:	c1 e1 05             	shl    ecx,0x5
c001b3ba:	01 c8                	add    eax,ecx
c001b3bc:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001b3c0:	83 e1 01             	and    ecx,0x1
c001b3c3:	89 ce                	mov    esi,ecx
c001b3c5:	8a 08                	mov    cl,BYTE PTR [eax]
c001b3c7:	c1 e6 06             	shl    esi,0x6
c001b3ca:	83 e1 bf             	and    ecx,0xffffffbf
c001b3cd:	09 f1                	or     ecx,esi
c001b3cf:	88 08                	mov    BYTE PTR [eax],cl
c001b3d1:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b3d3:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001b3d9:	81 c9 05 00 01 00    	or     ecx,0x10005
c001b3df:	89 08                	mov    DWORD PTR [eax],ecx
c001b3e1:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001b3e7:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001b3ed:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001b3f3:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001b3f6:	50                   	push   eax
c001b3f7:	68 90 00 00 00       	push   0x90
c001b3fc:	6a 00                	push   0x0
c001b3fe:	56                   	push   esi
c001b3ff:	e8 a4 50 fe ff       	call   c00004a8 <memset>
c001b404:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001b40a:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001b40e:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001b414:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001b418:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b41c:	83 c4 10             	add    esp,0x10
c001b41f:	48                   	dec    eax
c001b420:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b425:	89 c1                	mov    ecx,eax
c001b427:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001b42d:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b432:	09 c8                	or     eax,ecx
c001b434:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001b43a:	66 8b 06             	mov    ax,WORD PTR [esi]
c001b43d:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001b444:	66 25 00 7f          	and    ax,0x7f00
c001b448:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b44c:	66 0d 27 80          	or     ax,0x8027
c001b450:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001b455:	66 89 06             	mov    WORD PTR [esi],ax
c001b458:	19 c0                	sbb    eax,eax
c001b45a:	83 e0 f0             	and    eax,0xfffffff0
c001b45d:	83 c0 35             	add    eax,0x35
c001b460:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001b463:	89 e8                	mov    eax,ebp
c001b465:	c1 e8 10             	shr    eax,0x10
c001b468:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001b46b:	89 e8                	mov    eax,ebp
c001b46d:	c1 e8 18             	shr    eax,0x18
c001b470:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001b473:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001b477:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001b47a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b47e:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001b481:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b485:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001b489:	89 d6                	mov    esi,edx
c001b48b:	31 c0                	xor    eax,eax
c001b48d:	c1 e6 07             	shl    esi,0x7
c001b490:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001b494:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001b49a:	80 e1 88             	and    cl,0x88
c001b49d:	74 0a                	je     c001b4a9 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001b49f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b4a4:	74 0a                	je     c001b4b0 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001b4a6:	40                   	inc    eax
c001b4a7:	eb eb                	jmp    c001b494 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001b4a9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b4ae:	75 17                	jne    c001b4c7 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001b4b0:	83 ec 0c             	sub    esp,0xc
c001b4b3:	68 d5 fc 01 c0       	push   0xc001fcd5
c001b4b8:	e8 4a e6 fe ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c001b4bd:	83 c4 10             	add    esp,0x10
c001b4c0:	b8 01 00 00 00       	mov    eax,0x1
c001b4c5:	eb 5d                	jmp    c001b524 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001b4c7:	b8 01 00 00 00       	mov    eax,0x1
c001b4cc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b4d0:	c1 e2 07             	shl    edx,0x7
c001b4d3:	d3 e0                	shl    eax,cl
c001b4d5:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001b4d9:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001b4df:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001b4e5:	85 c8                	test   eax,ecx
c001b4e7:	74 16                	je     c001b4ff <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001b4e9:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001b4ef:	0f ba e1 1e          	bt     ecx,0x1e
c001b4f3:	73 ea                	jae    c001b4df <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001b4f5:	83 ec 0c             	sub    esp,0xc
c001b4f8:	68 e3 fc 01 c0       	push   0xc001fce3
c001b4fd:	eb b9                	jmp    c001b4b8 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001b4ff:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001b505:	0f ba e0 1e          	bt     eax,0x1e
c001b509:	72 b5                	jb     c001b4c0 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001b50b:	31 c0                	xor    eax,eax
c001b50d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001b512:	75 10                	jne    c001b524 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001b514:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001b51a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001b51e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b522:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b524:	83 c4 2c             	add    esp,0x2c
c001b527:	5b                   	pop    ebx
c001b528:	5e                   	pop    esi
c001b529:	5f                   	pop    edi
c001b52a:	5d                   	pop    ebp
c001b52b:	c3                   	ret    

c001b52c <SATA::read(unsigned long long, int, void*)>:
c001b52c:	57                   	push   edi
c001b52d:	b8 04 00 00 00       	mov    eax,0x4
c001b532:	56                   	push   esi
c001b533:	53                   	push   ebx
c001b534:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b538:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b53c:	8d 7a ff             	lea    edi,[edx-0x1]
c001b53f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b543:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b547:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001b54d:	77 25                	ja     c001b574 <SATA::read(unsigned long long, int, void*)+0x48>
c001b54f:	b8 06 00 00 00       	mov    eax,0x6
c001b554:	85 f6                	test   esi,esi
c001b556:	74 1c                	je     c001b574 <SATA::read(unsigned long long, int, void*)+0x48>
c001b558:	50                   	push   eax
c001b559:	50                   	push   eax
c001b55a:	6a 00                	push   0x0
c001b55c:	56                   	push   esi
c001b55d:	52                   	push   edx
c001b55e:	53                   	push   ebx
c001b55f:	51                   	push   ecx
c001b560:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b564:	e8 77 fd ff ff       	call   c001b2e0 <SATA::access(unsigned long long, int, void*, bool)>
c001b569:	83 c4 20             	add    esp,0x20
c001b56c:	85 c0                	test   eax,eax
c001b56e:	0f 95 c0             	setne  al
c001b571:	0f b6 c0             	movzx  eax,al
c001b574:	5b                   	pop    ebx
c001b575:	5e                   	pop    esi
c001b576:	5f                   	pop    edi
c001b577:	c3                   	ret    

c001b578 <SATA::write(unsigned long long, int, void*)>:
c001b578:	55                   	push   ebp
c001b579:	b8 04 00 00 00       	mov    eax,0x4
c001b57e:	57                   	push   edi
c001b57f:	56                   	push   esi
c001b580:	53                   	push   ebx
c001b581:	83 ec 0c             	sub    esp,0xc
c001b584:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b588:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b58c:	8d 73 ff             	lea    esi,[ebx-0x1]
c001b58f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001b593:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b597:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001b59d:	77 3d                	ja     c001b5dc <SATA::write(unsigned long long, int, void*)+0x64>
c001b59f:	b8 06 00 00 00       	mov    eax,0x6
c001b5a4:	85 ed                	test   ebp,ebp
c001b5a6:	74 34                	je     c001b5dc <SATA::write(unsigned long long, int, void*)+0x64>
c001b5a8:	c1 e3 09             	shl    ebx,0x9
c001b5ab:	01 eb                	add    ebx,ebp
c001b5ad:	89 d6                	mov    esi,edx
c001b5af:	89 cf                	mov    edi,ecx
c001b5b1:	83 c6 01             	add    esi,0x1
c001b5b4:	83 d7 00             	adc    edi,0x0
c001b5b7:	50                   	push   eax
c001b5b8:	50                   	push   eax
c001b5b9:	6a 01                	push   0x1
c001b5bb:	55                   	push   ebp
c001b5bc:	81 c5 00 02 00 00    	add    ebp,0x200
c001b5c2:	6a 01                	push   0x1
c001b5c4:	51                   	push   ecx
c001b5c5:	52                   	push   edx
c001b5c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b5ca:	e8 11 fd ff ff       	call   c001b2e0 <SATA::access(unsigned long long, int, void*, bool)>
c001b5cf:	83 c4 20             	add    esp,0x20
c001b5d2:	89 f2                	mov    edx,esi
c001b5d4:	89 f9                	mov    ecx,edi
c001b5d6:	39 dd                	cmp    ebp,ebx
c001b5d8:	75 d3                	jne    c001b5ad <SATA::write(unsigned long long, int, void*)+0x35>
c001b5da:	31 c0                	xor    eax,eax
c001b5dc:	83 c4 0c             	add    esp,0xc
c001b5df:	5b                   	pop    ebx
c001b5e0:	5e                   	pop    esi
c001b5e1:	5f                   	pop    edi
c001b5e2:	5d                   	pop    ebp
c001b5e3:	c3                   	ret    

c001b5e4 <SATAPI::write(unsigned long long, int, void*)>:
c001b5e4:	b8 03 00 00 00       	mov    eax,0x3
c001b5e9:	c3                   	ret    

c001b5ea <SATAPI::close(int, int, void*)>:
c001b5ea:	83 ec 0c             	sub    esp,0xc
c001b5ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5f1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b5f7:	85 c0                	test   eax,eax
c001b5f9:	74 0c                	je     c001b607 <SATAPI::close(int, int, void*)+0x1d>
c001b5fb:	83 ec 0c             	sub    esp,0xc
c001b5fe:	8b 10                	mov    edx,DWORD PTR [eax]
c001b600:	50                   	push   eax
c001b601:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b604:	83 c4 10             	add    esp,0x10
c001b607:	31 c0                	xor    eax,eax
c001b609:	83 c4 0c             	add    esp,0xc
c001b60c:	c3                   	ret    
c001b60d:	90                   	nop

c001b60e <SATAPI::SATAPI()>:
c001b60e:	83 ec 0c             	sub    esp,0xc
c001b611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b615:	83 ec 04             	sub    esp,0x4
c001b618:	68 00 08 00 00       	push   0x800
c001b61d:	68 2c fd 01 c0       	push   0xc001fd2c
c001b622:	50                   	push   eax
c001b623:	e8 ce fc fe ff       	call   c000b2f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b628:	83 c4 10             	add    esp,0x10
c001b62b:	ba 68 fe 01 c0       	mov    edx,0xc001fe68
c001b630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b634:	89 10                	mov    DWORD PTR [eax],edx
c001b636:	90                   	nop
c001b637:	83 c4 0c             	add    esp,0xc
c001b63a:	c3                   	ret    
c001b63b:	90                   	nop

c001b63c <SATAPI::diskRemoved()>:
c001b63c:	c3                   	ret    
c001b63d:	90                   	nop

c001b63e <SATAPI::diskInserted()>:
c001b63e:	83 ec 18             	sub    esp,0x18
c001b641:	68 38 fd 01 c0       	push   0xc001fd38
c001b646:	e8 bc e4 fe ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c001b64b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b64f:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001b656:	83 c4 1c             	add    esp,0x1c
c001b659:	c3                   	ret    

c001b65a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001b65a:	55                   	push   ebp
c001b65b:	57                   	push   edi
c001b65c:	56                   	push   esi
c001b65d:	53                   	push   ebx
c001b65e:	83 ec 38             	sub    esp,0x38
c001b661:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001b665:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001b669:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001b66d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b671:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b675:	68 50 fd 01 c0       	push   0xc001fd50
c001b67a:	e8 88 e4 fe ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c001b67f:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001b685:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b68b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b68f:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001b695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b699:	c1 e0 07             	shl    eax,0x7
c001b69c:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001b6a0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b6a4:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001b6ae:	5a                   	pop    edx
c001b6af:	59                   	pop    ecx
c001b6b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b6b4:	8d 58 02             	lea    ebx,[eax+0x2]
c001b6b7:	c1 e3 07             	shl    ebx,0x7
c001b6ba:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001b6be:	53                   	push   ebx
c001b6bf:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b6c5:	e8 7c ec ff ff       	call   c001a346 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001b6ca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b6ce:	83 c4 10             	add    esp,0x10
c001b6d1:	b8 01 00 00 00       	mov    eax,0x1
c001b6d6:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001b6db:	0f 84 ff 01 00 00    	je     c001b8e0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001b6e1:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b6e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6e9:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001b6ef:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001b6f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b6f9:	c1 e1 05             	shl    ecx,0x5
c001b6fc:	01 c8                	add    eax,ecx
c001b6fe:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b700:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001b706:	81 c9 25 00 01 00    	or     ecx,0x10025
c001b70c:	89 08                	mov    DWORD PTR [eax],ecx
c001b70e:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b714:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001b71a:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001b720:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001b723:	8d 7b 40             	lea    edi,[ebx+0x40]
c001b726:	50                   	push   eax
c001b727:	68 90 00 00 00       	push   0x90
c001b72c:	6a 00                	push   0x0
c001b72e:	53                   	push   ebx
c001b72f:	e8 74 4d fe ff       	call   c00004a8 <memset>
c001b734:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001b738:	b9 0c 00 00 00       	mov    ecx,0xc
c001b73d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b73f:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001b745:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001b749:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001b74f:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001b753:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b757:	48                   	dec    eax
c001b758:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b75d:	89 c1                	mov    ecx,eax
c001b75f:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b765:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b76a:	09 c8                	or     eax,ecx
c001b76c:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b772:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b775:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b77c:	66 25 00 7f          	and    ax,0x7f00
c001b780:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b784:	66 0d 27 80          	or     ax,0x8027
c001b788:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b78c:	66 89 03             	mov    WORD PTR [ebx],ax
c001b78f:	89 d0                	mov    eax,edx
c001b791:	c1 ea 18             	shr    edx,0x18
c001b794:	c1 e8 10             	shr    eax,0x10
c001b797:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b79a:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b79d:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b7a1:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b7a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b7a8:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b7ab:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b7af:	83 c4 10             	add    esp,0x10
c001b7b2:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b7b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b7ba:	31 c0                	xor    eax,eax
c001b7bc:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b7c2:	80 e1 88             	and    cl,0x88
c001b7c5:	74 0a                	je     c001b7d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001b7c7:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b7cc:	74 0a                	je     c001b7d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001b7ce:	40                   	inc    eax
c001b7cf:	eb eb                	jmp    c001b7bc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001b7d1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b7d6:	75 0a                	jne    c001b7e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001b7d8:	83 ec 0c             	sub    esp,0xc
c001b7db:	68 6a fd 01 c0       	push   0xc001fd6a
c001b7e0:	eb 43                	jmp    c001b825 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001b7e2:	be 01 00 00 00       	mov    esi,0x1
c001b7e7:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b7eb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b7ef:	d3 e6                	shl    esi,cl
c001b7f1:	c1 e7 07             	shl    edi,0x7
c001b7f4:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b7fa:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c001b7ff:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b803:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b809:	85 c6                	test   esi,eax
c001b80b:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b811:	0f 84 96 00 00 00    	je     c001b8ad <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c001b817:	0f ba e0 1e          	bt     eax,0x1e
c001b81b:	73 1a                	jae    c001b837 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1dd>
c001b81d:	83 ec 0c             	sub    esp,0xc
c001b820:	68 7f fd 01 c0       	push   0xc001fd7f
c001b825:	e8 dd e2 fe ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c001b82a:	83 c4 10             	add    esp,0x10
c001b82d:	b8 01 00 00 00       	mov    eax,0x1
c001b832:	e9 a9 00 00 00       	jmp    c001b8e0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001b837:	83 fb 0d             	cmp    ebx,0xd
c001b83a:	77 12                	ja     c001b84e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c001b83c:	83 ec 0c             	sub    esp,0xc
c001b83f:	68 c8 00 00 00       	push   0xc8
c001b844:	e8 0f 77 ff ff       	call   c0012f58 <milliTenthSleep(unsigned int)>
c001b849:	83 c4 10             	add    esp,0x10
c001b84c:	eb 2a                	jmp    c001b878 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c001b84e:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c001b854:	83 f8 0d             	cmp    eax,0xd
c001b857:	77 0a                	ja     c001b863 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x209>
c001b859:	83 ec 0c             	sub    esp,0xc
c001b85c:	68 58 02 00 00       	push   0x258
c001b861:	eb 28                	jmp    c001b88b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c001b863:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c001b869:	83 f8 0d             	cmp    eax,0xd
c001b86c:	77 0a                	ja     c001b878 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c001b86e:	83 ec 0c             	sub    esp,0xc
c001b871:	68 dc 05 00 00       	push   0x5dc
c001b876:	eb 13                	jmp    c001b88b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c001b878:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c001b87e:	83 f8 0d             	cmp    eax,0xd
c001b881:	77 10                	ja     c001b893 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x239>
c001b883:	83 ec 0c             	sub    esp,0xc
c001b886:	68 c4 09 00 00       	push   0x9c4
c001b88b:	e8 c8 76 ff ff       	call   c0012f58 <milliTenthSleep(unsigned int)>
c001b890:	83 c4 10             	add    esp,0x10
c001b893:	43                   	inc    ebx
c001b894:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c001b89a:	0f 85 63 ff ff ff    	jne    c001b803 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a9>
c001b8a0:	83 ec 0c             	sub    esp,0xc
c001b8a3:	68 92 fd 01 c0       	push   0xc001fd92
c001b8a8:	e9 78 ff ff ff       	jmp    c001b825 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001b8ad:	0f ba e0 1e          	bt     eax,0x1e
c001b8b1:	73 0d                	jae    c001b8c0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001b8b3:	83 ec 0c             	sub    esp,0xc
c001b8b6:	68 a6 fd 01 c0       	push   0xc001fda6
c001b8bb:	e9 65 ff ff ff       	jmp    c001b825 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001b8c0:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b8c5:	74 17                	je     c001b8de <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c001b8c7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b8cc:	74 10                	je     c001b8de <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c001b8ce:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b8d4:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b8d8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b8dc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b8de:	31 c0                	xor    eax,eax
c001b8e0:	83 c4 2c             	add    esp,0x2c
c001b8e3:	5b                   	pop    ebx
c001b8e4:	5e                   	pop    esi
c001b8e5:	5f                   	pop    edi
c001b8e6:	5d                   	pop    ebp
c001b8e7:	c3                   	ret    

c001b8e8 <SATAPI::eject()>:
c001b8e8:	57                   	push   edi
c001b8e9:	b9 03 00 00 00       	mov    ecx,0x3
c001b8ee:	83 ec 18             	sub    esp,0x18
c001b8f1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b8f5:	fc                   	cld    
c001b8f6:	31 c0                	xor    eax,eax
c001b8f8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b8fa:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b8ff:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b904:	50                   	push   eax
c001b905:	6a 00                	push   0x0
c001b907:	6a 00                	push   0x0
c001b909:	6a 00                	push   0x0
c001b90b:	6a 00                	push   0x0
c001b90d:	6a 02                	push   0x2
c001b90f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b913:	50                   	push   eax
c001b914:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b918:	e8 3d fd ff ff       	call   c001b65a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b91d:	31 c0                	xor    eax,eax
c001b91f:	83 c4 38             	add    esp,0x38
c001b922:	5f                   	pop    edi
c001b923:	c3                   	ret    

c001b924 <SATAPI::detectMedia()>:
c001b924:	56                   	push   esi
c001b925:	53                   	push   ebx
c001b926:	83 ec 30             	sub    esp,0x30
c001b929:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001b92d:	68 bb fd 01 c0       	push   0xc001fdbb
c001b932:	e8 d0 e1 fe ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c001b937:	83 c4 0c             	add    esp,0xc
c001b93a:	6a 0c                	push   0xc
c001b93c:	6a 00                	push   0x0
c001b93e:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001b942:	56                   	push   esi
c001b943:	e8 60 4b fe ff       	call   c00004a8 <memset>
c001b948:	83 c4 0c             	add    esp,0xc
c001b94b:	6a 00                	push   0x0
c001b94d:	6a 00                	push   0x0
c001b94f:	6a 00                	push   0x0
c001b951:	6a 00                	push   0x0
c001b953:	6a 00                	push   0x0
c001b955:	56                   	push   esi
c001b956:	53                   	push   ebx
c001b957:	e8 fe fc ff ff       	call   c001b65a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b95c:	83 c4 20             	add    esp,0x20
c001b95f:	48                   	dec    eax
c001b960:	74 34                	je     c001b996 <SATAPI::detectMedia()+0x72>
c001b962:	50                   	push   eax
c001b963:	6a 0c                	push   0xc
c001b965:	6a 00                	push   0x0
c001b967:	56                   	push   esi
c001b968:	e8 3b 4b fe ff       	call   c00004a8 <memset>
c001b96d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001b972:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001b977:	83 c4 0c             	add    esp,0xc
c001b97a:	6a 01                	push   0x1
c001b97c:	8d 44 24 16          	lea    eax,[esp+0x16]
c001b980:	50                   	push   eax
c001b981:	6a 00                	push   0x0
c001b983:	6a 00                	push   0x0
c001b985:	6a 12                	push   0x12
c001b987:	56                   	push   esi
c001b988:	53                   	push   ebx
c001b989:	e8 cc fc ff ff       	call   c001b65a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b98e:	83 c4 20             	add    esp,0x20
c001b991:	48                   	dec    eax
c001b992:	75 39                	jne    c001b9cd <SATAPI::detectMedia()+0xa9>
c001b994:	eb 1e                	jmp    c001b9b4 <SATAPI::detectMedia()+0x90>
c001b996:	83 ec 0c             	sub    esp,0xc
c001b999:	68 cf fd 01 c0       	push   0xc001fdcf
c001b99e:	e8 64 e1 fe ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c001b9a3:	83 c4 10             	add    esp,0x10
c001b9a6:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001b9ad:	74 b3                	je     c001b962 <SATAPI::detectMedia()+0x3e>
c001b9af:	e9 93 00 00 00       	jmp    c001ba47 <SATAPI::detectMedia()+0x123>
c001b9b4:	83 ec 0c             	sub    esp,0xc
c001b9b7:	68 d9 fd 01 c0       	push   0xc001fdd9
c001b9bc:	e8 46 e1 fe ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c001b9c1:	83 c4 10             	add    esp,0x10
c001b9c4:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001b9cb:	75 7a                	jne    c001ba47 <SATAPI::detectMedia()+0x123>
c001b9cd:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001b9d1:	83 e0 7f             	and    eax,0x7f
c001b9d4:	3c 70                	cmp    al,0x70
c001b9d6:	74 25                	je     c001b9fd <SATAPI::detectMedia()+0xd9>
c001b9d8:	83 ec 0c             	sub    esp,0xc
c001b9db:	68 e3 fd 01 c0       	push   0xc001fde3
c001b9e0:	e8 22 e1 fe ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c001b9e5:	83 c4 10             	add    esp,0x10
c001b9e8:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001b9ef:	75 0c                	jne    c001b9fd <SATAPI::detectMedia()+0xd9>
c001b9f1:	83 ec 0c             	sub    esp,0xc
c001b9f4:	53                   	push   ebx
c001b9f5:	e8 44 fc ff ff       	call   c001b63e <SATAPI::diskInserted()>
c001b9fa:	83 c4 10             	add    esp,0x10
c001b9fd:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ba01:	83 e0 0f             	and    eax,0xf
c001ba04:	3c 02                	cmp    al,0x2
c001ba06:	75 16                	jne    c001ba1e <SATAPI::detectMedia()+0xfa>
c001ba08:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001ba0d:	75 38                	jne    c001ba47 <SATAPI::detectMedia()+0x123>
c001ba0f:	83 ec 0c             	sub    esp,0xc
c001ba12:	68 ec fd 01 c0       	push   0xc001fdec
c001ba17:	e8 eb e0 fe ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c001ba1c:	eb 26                	jmp    c001ba44 <SATAPI::detectMedia()+0x120>
c001ba1e:	84 c0                	test   al,al
c001ba20:	75 25                	jne    c001ba47 <SATAPI::detectMedia()+0x123>
c001ba22:	83 ec 0c             	sub    esp,0xc
c001ba25:	68 f5 fd 01 c0       	push   0xc001fdf5
c001ba2a:	e8 d8 e0 fe ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c001ba2f:	83 c4 10             	add    esp,0x10
c001ba32:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001ba39:	75 0c                	jne    c001ba47 <SATAPI::detectMedia()+0x123>
c001ba3b:	83 ec 0c             	sub    esp,0xc
c001ba3e:	53                   	push   ebx
c001ba3f:	e8 fa fb ff ff       	call   c001b63e <SATAPI::diskInserted()>
c001ba44:	83 c4 10             	add    esp,0x10
c001ba47:	83 c4 24             	add    esp,0x24
c001ba4a:	5b                   	pop    ebx
c001ba4b:	5e                   	pop    esi
c001ba4c:	c3                   	ret    
c001ba4d:	90                   	nop

c001ba4e <SATAPI::open(int, int, void*)>:
c001ba4e:	56                   	push   esi
c001ba4f:	53                   	push   ebx
c001ba50:	51                   	push   ecx
c001ba51:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ba59:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ba63:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ba69:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ba73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba77:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ba81:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ba87:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ba8e:	e8 b1 b6 fe ff       	call   c0007144 <Phys::allocatePage()>
c001ba93:	89 c6                	mov    esi,eax
c001ba95:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001ba9b:	81 c6 00 10 00 00    	add    esi,0x1000
c001baa1:	e8 9e b6 fe ff       	call   c0007144 <Phys::allocatePage()>
c001baa6:	39 c6                	cmp    esi,eax
c001baa8:	74 10                	je     c001baba <SATAPI::open(int, int, void*)+0x6c>
c001baaa:	83 ec 0c             	sub    esp,0xc
c001baad:	68 ff fd 01 c0       	push   0xc001fdff
c001bab2:	e8 26 3d ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c001bab7:	83 c4 10             	add    esp,0x10
c001baba:	83 ec 0c             	sub    esp,0xc
c001babd:	6a 02                	push   0x2
c001babf:	e8 e1 cd fe ff       	call   c00088a5 <Virt::allocateKernelVirtualPages(int)>
c001bac4:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001baca:	6a 03                	push   0x3
c001bacc:	50                   	push   eax
c001bacd:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001bad3:	ff 35 94 08 02 c0    	push   DWORD PTR ds:0xc0020894
c001bad9:	e8 1a d4 fe ff       	call   c0008ef8 <VAS::mapPage(unsigned long, unsigned long, int)>
c001bade:	83 c4 14             	add    esp,0x14
c001bae1:	68 74 01 00 00       	push   0x174
c001bae6:	e8 92 b2 fe ff       	call   c0006d7d <malloc>
c001baeb:	83 c4 0c             	add    esp,0xc
c001baee:	89 c6                	mov    esi,eax
c001baf0:	6a 00                	push   0x0
c001baf2:	68 ff ff ff 7f       	push   0x7fffffff
c001baf7:	6a 00                	push   0x0
c001baf9:	6a 00                	push   0x0
c001bafb:	53                   	push   ebx
c001bafc:	68 15 fe 01 c0       	push   0xc001fe15
c001bb01:	50                   	push   eax
c001bb02:	e8 75 04 ff ff       	call   c000bf7c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001bb07:	83 c4 14             	add    esp,0x14
c001bb0a:	56                   	push   esi
c001bb0b:	e8 22 05 ff ff       	call   c000c032 <LogicalDisk::assignDriveLetter()>
c001bb10:	5a                   	pop    edx
c001bb11:	0f be c0             	movsx  eax,al
c001bb14:	59                   	pop    ecx
c001bb15:	50                   	push   eax
c001bb16:	68 30 fc 01 c0       	push   0xc001fc30
c001bb1b:	e8 e7 df fe ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c001bb20:	58                   	pop    eax
c001bb21:	5a                   	pop    edx
c001bb22:	56                   	push   esi
c001bb23:	53                   	push   ebx
c001bb24:	e8 01 f4 fe ff       	call   c000af2a <Device::addChild(Device*)>
c001bb29:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001bb2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb32:	e8 27 f8 fe ff       	call   c000b35e <PhysicalDisk::startCache()>
c001bb37:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001bb3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb41:	e8 de fd ff ff       	call   c001b924 <SATAPI::detectMedia()>
c001bb46:	83 c4 14             	add    esp,0x14
c001bb49:	31 c0                	xor    eax,eax
c001bb4b:	5b                   	pop    ebx
c001bb4c:	5e                   	pop    esi
c001bb4d:	c3                   	ret    

c001bb4e <SATAPI::read(unsigned long long, int, void*)>:
c001bb4e:	55                   	push   ebp
c001bb4f:	57                   	push   edi
c001bb50:	56                   	push   esi
c001bb51:	53                   	push   ebx
c001bb52:	83 ec 48             	sub    esp,0x48
c001bb55:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001bb59:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c001bb5d:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c001bb61:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001bb65:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bb69:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001bb6d:	68 23 fe 01 c0       	push   0xc001fe23
c001bb72:	e8 90 df fe ff       	call   c0009b07 <Dbg::kprintf(char const*, ...)>
c001bb77:	83 c4 10             	add    esp,0x10
c001bb7a:	83 fb 04             	cmp    ebx,0x4
c001bb7d:	7e 10                	jle    c001bb8f <SATAPI::read(unsigned long long, int, void*)+0x41>
c001bb7f:	83 ec 0c             	sub    esp,0xc
c001bb82:	68 34 fe 01 c0       	push   0xc001fe34
c001bb87:	e8 51 3c ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c001bb8c:	83 c4 10             	add    esp,0x10
c001bb8f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c001bb93:	31 ed                	xor    ebp,ebp
c001bb95:	b9 03 00 00 00       	mov    ecx,0x3
c001bb9a:	fc                   	cld    
c001bb9b:	89 e8                	mov    eax,ebp
c001bb9d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001bb9f:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c001bba4:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c001bba9:	50                   	push   eax
c001bbaa:	6a 00                	push   0x0
c001bbac:	6a 00                	push   0x0
c001bbae:	6a 00                	push   0x0
c001bbb0:	6a 00                	push   0x0
c001bbb2:	6a 02                	push   0x2
c001bbb4:	8d 44 24 30          	lea    eax,[esp+0x30]
c001bbb8:	50                   	push   eax
c001bbb9:	56                   	push   esi
c001bbba:	e8 9b fa ff ff       	call   c001b65a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001bbbf:	8d 7c 24 44          	lea    edi,[esp+0x44]
c001bbc3:	89 e8                	mov    eax,ebp
c001bbc5:	b9 03 00 00 00       	mov    ecx,0x3
c001bbca:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001bbcc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bbd0:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c001bbd4:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c001bbd9:	86 e0                	xchg   al,ah
c001bbdb:	c1 c0 10             	rol    eax,0x10
c001bbde:	86 e0                	xchg   al,ah
c001bbe0:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c001bbe4:	83 c4 1c             	add    esp,0x1c
c001bbe7:	53                   	push   ebx
c001bbe8:	c1 e3 0b             	shl    ebx,0xb
c001bbeb:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001bbef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bbf3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bbf7:	53                   	push   ebx
c001bbf8:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001bbfc:	50                   	push   eax
c001bbfd:	56                   	push   esi
c001bbfe:	e8 57 fa ff ff       	call   c001b65a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001bc03:	83 c4 20             	add    esp,0x20
c001bc06:	85 c0                	test   eax,eax
c001bc08:	74 14                	je     c001bc1e <SATAPI::read(unsigned long long, int, void*)+0xd0>
c001bc0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bc0e:	83 ec 0c             	sub    esp,0xc
c001bc11:	56                   	push   esi
c001bc12:	e8 0d fd ff ff       	call   c001b924 <SATAPI::detectMedia()>
c001bc17:	83 c4 10             	add    esp,0x10
c001bc1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc1e:	83 c4 3c             	add    esp,0x3c
c001bc21:	5b                   	pop    ebx
c001bc22:	5e                   	pop    esi
c001bc23:	5f                   	pop    edi
c001bc24:	5d                   	pop    ebp
c001bc25:	c3                   	ret    

c001bc26 <IOAPIC::close(int, int, void*)>:
c001bc26:	b8 00 00 00 00       	mov    eax,0x0
c001bc2b:	c3                   	ret    

c001bc2c <apicGetBase()>:
c001bc2c:	55                   	push   ebp
c001bc2d:	89 e5                	mov    ebp,esp
c001bc2f:	83 ec 18             	sub    esp,0x18
c001bc32:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c001bc37:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001bc3d:	83 e0 08             	and    eax,0x8
c001bc40:	84 c0                	test   al,al
c001bc42:	75 07                	jne    c001bc4b <apicGetBase()+0x1f>
c001bc44:	b8 00 00 00 00       	mov    eax,0x0
c001bc49:	eb 21                	jmp    c001bc6c <apicGetBase()+0x40>
c001bc4b:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c001bc50:	83 ec 08             	sub    esp,0x8
c001bc53:	6a 1b                	push   0x1b
c001bc55:	50                   	push   eax
c001bc56:	e8 f3 a6 fe ff       	call   c000634e <Computer::rdmsr(unsigned int)>
c001bc5b:	83 c4 10             	add    esp,0x10
c001bc5e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bc61:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001bc64:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bc67:	25 00 f0 ff ff       	and    eax,0xfffff000
c001bc6c:	c9                   	leave  
c001bc6d:	c3                   	ret    

c001bc6e <IOAPIC::IOAPIC()>:
c001bc6e:	83 ec 0c             	sub    esp,0xc
c001bc71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc75:	83 ec 08             	sub    esp,0x8
c001bc78:	68 98 fe 01 c0       	push   0xc001fe98
c001bc7d:	50                   	push   eax
c001bc7e:	e8 3f f4 fe ff       	call   c000b0c2 <Device::Device(char const*)>
c001bc83:	83 c4 10             	add    esp,0x10
c001bc86:	ba a8 fe 01 c0       	mov    edx,0xc001fea8
c001bc8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc8f:	89 10                	mov    DWORD PTR [eax],edx
c001bc91:	90                   	nop
c001bc92:	83 c4 0c             	add    esp,0xc
c001bc95:	c3                   	ret    

c001bc96 <apicOpen()>:
c001bc96:	55                   	push   ebp
c001bc97:	89 e5                	mov    ebp,esp
c001bc99:	53                   	push   ebx
c001bc9a:	83 ec 34             	sub    esp,0x34
c001bc9d:	a0 20 47 02 c0       	mov    al,ds:0xc0024720
c001bca2:	83 f0 01             	xor    eax,0x1
c001bca5:	84 c0                	test   al,al
c001bca7:	0f 84 91 00 00 00    	je     c001bd3e <apicOpen()+0xa8>
c001bcad:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001bcb1:	a0 80 30 02 c0       	mov    al,ds:0xc0023080
c001bcb6:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001bcb9:	73 7c                	jae    c001bd37 <apicOpen()+0xa1>
c001bcbb:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001bcc2:	83 ec 0c             	sub    esp,0xc
c001bcc5:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001bcc8:	e8 b0 b0 fe ff       	call   c0006d7d <malloc>
c001bccd:	83 c4 10             	add    esp,0x10
c001bcd0:	89 c3                	mov    ebx,eax
c001bcd2:	83 ec 0c             	sub    esp,0xc
c001bcd5:	53                   	push   ebx
c001bcd6:	e8 93 ff ff ff       	call   c001bc6e <IOAPIC::IOAPIC()>
c001bcdb:	83 c4 10             	add    esp,0x10
c001bcde:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001bce1:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001bce5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001bce8:	89 14 85 00 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb900],edx
c001bcef:	a1 e0 46 02 c0       	mov    eax,ds:0xc00246e0
c001bcf4:	40                   	inc    eax
c001bcf5:	a3 e0 46 02 c0       	mov    ds:0xc00246e0,eax
c001bcfa:	a1 a8 07 02 c0       	mov    eax,ds:0xc00207a8
c001bcff:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001bd05:	83 ec 08             	sub    esp,0x8
c001bd08:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001bd0b:	50                   	push   eax
c001bd0c:	e8 19 f2 fe ff       	call   c000af2a <Device::addChild(Device*)>
c001bd11:	83 c4 10             	add    esp,0x10
c001bd14:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001bd17:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd19:	83 c0 08             	add    eax,0x8
c001bd1c:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd1e:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001bd22:	6a 00                	push   0x0
c001bd24:	6a 00                	push   0x0
c001bd26:	52                   	push   edx
c001bd27:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001bd2a:	ff d0                	call   eax
c001bd2c:	83 c4 10             	add    esp,0x10
c001bd2f:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001bd32:	e9 7a ff ff ff       	jmp    c001bcb1 <apicOpen()+0x1b>
c001bd37:	c6 05 20 47 02 c0 01 	mov    BYTE PTR ds:0xc0024720,0x1
c001bd3e:	e8 e9 fe ff ff       	call   c001bc2c <apicGetBase()>
c001bd43:	05 f0 00 00 00       	add    eax,0xf0
c001bd48:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001bd4b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001bd4e:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd50:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001bd53:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001bd5a:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001bd61:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001bd64:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001bd67:	89 10                	mov    DWORD PTR [eax],edx
c001bd69:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001bd70:	a1 d0 2f 02 c0       	mov    eax,ds:0xc0022fd0
c001bd75:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001bd78:	7d 70                	jge    c001bdea <apicOpen()+0x154>
c001bd7a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bd7d:	8b 04 85 e0 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd020]
c001bd84:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001bd87:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bd8a:	8b 04 85 e0 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd020]
c001bd91:	c1 e8 08             	shr    eax,0x8
c001bd94:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001bd98:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bd9b:	8b 04 85 e0 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd020]
c001bda2:	c1 e8 18             	shr    eax,0x18
c001bda5:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001bda8:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001bdac:	75 37                	jne    c001bde5 <apicOpen()+0x14f>
c001bdae:	e8 79 fe ff ff       	call   c001bc2c <apicGetBase()>
c001bdb3:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001bdb7:	75 07                	jne    c001bdc0 <apicOpen()+0x12a>
c001bdb9:	ba 60 03 00 00       	mov    edx,0x360
c001bdbe:	eb 05                	jmp    c001bdc5 <apicOpen()+0x12f>
c001bdc0:	ba 50 03 00 00       	mov    edx,0x350
c001bdc5:	01 d0                	add    eax,edx
c001bdc7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001bdca:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001bdcd:	8b 00                	mov    eax,DWORD PTR [eax]
c001bdcf:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001bdd2:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001bdd9:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001bddd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001bde0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001bde3:	89 10                	mov    DWORD PTR [eax],edx
c001bde5:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001bde8:	eb 86                	jmp    c001bd70 <apicOpen()+0xda>
c001bdea:	90                   	nop
c001bdeb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001bdee:	c9                   	leave  
c001bdef:	c3                   	ret    

c001bdf0 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001bdf0:	55                   	push   ebp
c001bdf1:	89 e5                	mov    ebp,esp
c001bdf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdf6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001bdfc:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001bdff:	72 1d                	jb     c001be1e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001be01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be04:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001be0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be0d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001be13:	01 d0                	add    eax,edx
c001be15:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001be18:	73 04                	jae    c001be1e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001be1a:	b0 01                	mov    al,0x1
c001be1c:	eb 02                	jmp    c001be20 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001be1e:	b0 00                	mov    al,0x0
c001be20:	5d                   	pop    ebp
c001be21:	c3                   	ret    

c001be22 <IOAPIC::read(int)>:
c001be22:	55                   	push   ebp
c001be23:	89 e5                	mov    ebp,esp
c001be25:	83 ec 10             	sub    esp,0x10
c001be28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be2b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001be31:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001be34:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001be37:	0f b6 d0             	movzx  edx,al
c001be3a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001be3d:	89 10                	mov    DWORD PTR [eax],edx
c001be3f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001be42:	83 c0 10             	add    eax,0x10
c001be45:	8b 00                	mov    eax,DWORD PTR [eax]
c001be47:	c9                   	leave  
c001be48:	c3                   	ret    
c001be49:	90                   	nop

c001be4a <IOAPIC::open(int, int, void*)>:
c001be4a:	55                   	push   ebp
c001be4b:	89 e5                	mov    ebp,esp
c001be4d:	57                   	push   edi
c001be4e:	56                   	push   esi
c001be4f:	53                   	push   ebx
c001be50:	83 ec 04             	sub    esp,0x4
c001be53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be56:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001be59:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001be5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be62:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001be68:	8b 14 85 c0 30 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcf40]
c001be6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be72:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001be78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be7b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001be81:	8b 14 85 40 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcec0]
c001be88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be8b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001be91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be94:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001be9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be9d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001bea3:	0f b6 f0             	movzx  esi,al
c001bea6:	89 d0                	mov    eax,edx
c001bea8:	ba 00 00 00 00       	mov    edx,0x0
c001bead:	89 c7                	mov    edi,eax
c001beaf:	83 e7 ff             	and    edi,0xffffffff
c001beb2:	89 f9                	mov    ecx,edi
c001beb4:	0f b6 da             	movzx  ebx,dl
c001beb7:	89 c8                	mov    eax,ecx
c001beb9:	89 da                	mov    edx,ebx
c001bebb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001bebe:	8d 5e 08             	lea    ebx,[esi+0x8]
c001bec1:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001bec5:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001bec9:	83 e0 00             	and    eax,0x0
c001becc:	09 d0                	or     eax,edx
c001bece:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001bed2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bed5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001bedb:	8d 50 01             	lea    edx,[eax+0x1]
c001bede:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001bee1:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001bee7:	0f b6 d0             	movzx  edx,al
c001beea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001beed:	83 c2 08             	add    edx,0x8
c001bef0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001bef4:	0f b6 c9             	movzx  ecx,cl
c001bef7:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001befd:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001bf01:	6a 01                	push   0x1
c001bf03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bf06:	e8 17 ff ff ff       	call   c001be22 <IOAPIC::read(int)>
c001bf0b:	83 c4 08             	add    esp,0x8
c001bf0e:	c1 f8 10             	sar    eax,0x10
c001bf11:	0f b6 c0             	movzx  eax,al
c001bf14:	8d 50 01             	lea    edx,[eax+0x1]
c001bf17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf1a:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001bf20:	b8 00 00 00 00       	mov    eax,0x0
c001bf25:	8d 65 f4             	lea    esp,[ebp-0xc]
c001bf28:	5b                   	pop    ebx
c001bf29:	5e                   	pop    esi
c001bf2a:	5f                   	pop    edi
c001bf2b:	5d                   	pop    ebp
c001bf2c:	c3                   	ret    
c001bf2d:	90                   	nop

c001bf2e <IOAPIC::write(int, int)>:
c001bf2e:	55                   	push   ebp
c001bf2f:	89 e5                	mov    ebp,esp
c001bf31:	83 ec 10             	sub    esp,0x10
c001bf34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf37:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bf3d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001bf40:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bf43:	0f b6 d0             	movzx  edx,al
c001bf46:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001bf49:	89 10                	mov    DWORD PTR [eax],edx
c001bf4b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001bf4e:	8d 50 10             	lea    edx,[eax+0x10]
c001bf51:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bf54:	89 02                	mov    DWORD PTR [edx],eax
c001bf56:	90                   	nop
c001bf57:	c9                   	leave  
c001bf58:	c3                   	ret    
c001bf59:	90                   	nop

c001bf5a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001bf5a:	55                   	push   ebp
c001bf5b:	89 e5                	mov    ebp,esp
c001bf5d:	53                   	push   ebx
c001bf5e:	83 ec 2c             	sub    esp,0x2c
c001bf61:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bf64:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001bf67:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001bf6a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001bf6d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001bf70:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bf73:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001bf76:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001bf79:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001bf7c:	88 d8                	mov    al,bl
c001bf7e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001bf81:	88 c8                	mov    al,cl
c001bf83:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001bf86:	88 d0                	mov    al,dl
c001bf88:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001bf8b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bf8f:	83 c0 08             	add    eax,0x8
c001bf92:	01 c0                	add    eax,eax
c001bf94:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bf97:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bf9b:	83 c0 08             	add    eax,0x8
c001bf9e:	01 c0                	add    eax,eax
c001bfa0:	40                   	inc    eax
c001bfa1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001bfa4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001bfa7:	50                   	push   eax
c001bfa8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bfab:	e8 72 fe ff ff       	call   c001be22 <IOAPIC::read(int)>
c001bfb0:	83 c4 08             	add    esp,0x8
c001bfb3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001bfb6:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001bfbd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001bfc0:	c1 e0 18             	shl    eax,0x18
c001bfc3:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001bfc6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001bfc9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001bfcc:	52                   	push   edx
c001bfcd:	50                   	push   eax
c001bfce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bfd1:	e8 58 ff ff ff       	call   c001bf2e <IOAPIC::write(int, int)>
c001bfd6:	83 c4 0c             	add    esp,0xc
c001bfd9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bfdc:	50                   	push   eax
c001bfdd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bfe0:	e8 3d fe ff ff       	call   c001be22 <IOAPIC::read(int)>
c001bfe5:	83 c4 08             	add    esp,0x8
c001bfe8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bfeb:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001bff2:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001bff9:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001c000:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001c004:	74 09                	je     c001c00f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c001c006:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001c00d:	eb 07                	jmp    c001c016 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c001c00f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001c016:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001c01a:	74 09                	je     c001c025 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c001c01c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001c023:	eb 07                	jmp    c001c02c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c001c025:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001c02c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001c033:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001c037:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001c03a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001c03d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001c040:	52                   	push   edx
c001c041:	50                   	push   eax
c001c042:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001c045:	e8 e4 fe ff ff       	call   c001bf2e <IOAPIC::write(int, int)>
c001c04a:	83 c4 0c             	add    esp,0xc
c001c04d:	90                   	nop
c001c04e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001c051:	c9                   	leave  
c001c052:	c3                   	ret    
c001c053:	90                   	nop

c001c054 <APICTimer::close(int, int, void*)>:
c001c054:	b8 00 00 00 00       	mov    eax,0x0
c001c059:	c3                   	ret    
c001c05a:	66 90                	xchg   ax,ax

c001c05c <apicTimerHandler(regs*, void*)>:
c001c05c:	83 ec 0c             	sub    esp,0xc
c001c05f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c063:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c065:	b8 10 27 00 00       	mov    eax,0x2710
c001c06a:	ba 00 00 00 00       	mov    edx,0x0
c001c06f:	f7 f1                	div    ecx
c001c071:	83 ec 0c             	sub    esp,0xc
c001c074:	50                   	push   eax
c001c075:	e8 1e 07 ff ff       	call   c000c798 <timerHandler(unsigned int)>
c001c07a:	83 c4 10             	add    esp,0x10
c001c07d:	90                   	nop
c001c07e:	83 c4 0c             	add    esp,0xc
c001c081:	c3                   	ret    
c001c082:	66 90                	xchg   ax,ax

c001c084 <APICTimer::open(int, int, void*)>:
c001c084:	83 ec 0c             	sub    esp,0xc
c001c087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c08b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c08d:	83 c0 24             	add    eax,0x24
c001c090:	8b 00                	mov    eax,DWORD PTR [eax]
c001c092:	83 ec 08             	sub    esp,0x8
c001c095:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c099:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c09d:	ff d0                	call   eax
c001c09f:	83 c4 10             	add    esp,0x10
c001c0a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0a6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c0aa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c0b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c0b8:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001c0be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c0c2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c0c8:	83 ec 0c             	sub    esp,0xc
c001c0cb:	51                   	push   ecx
c001c0cc:	6a 01                	push   0x1
c001c0ce:	68 5c c0 01 c0       	push   0xc001c05c
c001c0d3:	52                   	push   edx
c001c0d4:	50                   	push   eax
c001c0d5:	e8 fc ed fe ff       	call   c000aed6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c0da:	83 c4 20             	add    esp,0x20
c001c0dd:	89 c2                	mov    edx,eax
c001c0df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0e3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001c0e9:	b8 00 00 00 00       	mov    eax,0x0
c001c0ee:	83 c4 0c             	add    esp,0xc
c001c0f1:	c3                   	ret    
c001c0f2:	66 90                	xchg   ax,ax

c001c0f4 <APICTimer::write(int)>:
c001c0f4:	83 ec 0c             	sub    esp,0xc
c001c0f7:	83 ec 0c             	sub    esp,0xc
c001c0fa:	68 cc fe 01 c0       	push   0xc001fecc
c001c0ff:	e8 d9 36 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c001c104:	83 c4 10             	add    esp,0x10
c001c107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c10b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c10f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c115:	90                   	nop
c001c116:	83 c4 0c             	add    esp,0xc
c001c119:	c3                   	ret    
c001c11a:	66 90                	xchg   ax,ax

c001c11c <APICTimer::APICTimer()>:
c001c11c:	83 ec 0c             	sub    esp,0xc
c001c11f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c123:	83 ec 08             	sub    esp,0x8
c001c126:	68 dc fe 01 c0       	push   0xc001fedc
c001c12b:	50                   	push   eax
c001c12c:	e8 9b 05 ff ff       	call   c000c6cc <Timer::Timer(char const*)>
c001c131:	83 c4 10             	add    esp,0x10
c001c134:	ba f0 fe 01 c0       	mov    edx,0xc001fef0
c001c139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c13d:	89 10                	mov    DWORD PTR [eax],edx
c001c13f:	90                   	nop
c001c140:	83 c4 0c             	add    esp,0xc
c001c143:	c3                   	ret    

c001c144 <PIT::write(int)>:
c001c144:	83 ec 10             	sub    esp,0x10
c001c147:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c14b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c14f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c159:	a3 24 47 02 c0       	mov    ds:0xc0024724,eax
c001c15e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001c163:	99                   	cdq    
c001c164:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001c168:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c16c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001c173:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001c178:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001c17c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001c181:	ee                   	out    dx,al
c001c182:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c186:	0f b6 c0             	movzx  eax,al
c001c189:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001c190:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001c194:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001c198:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001c19d:	ee                   	out    dx,al
c001c19e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1a2:	c1 f8 08             	sar    eax,0x8
c001c1a5:	0f b6 c0             	movzx  eax,al
c001c1a8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001c1af:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001c1b3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001c1b7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001c1bc:	ee                   	out    dx,al
c001c1bd:	90                   	nop
c001c1be:	83 c4 10             	add    esp,0x10
c001c1c1:	c3                   	ret    
c001c1c2:	66 90                	xchg   ax,ax

c001c1c4 <pitHandler(regs*, void*)>:
c001c1c4:	83 ec 0c             	sub    esp,0xc
c001c1c7:	8b 0d 24 47 02 c0    	mov    ecx,DWORD PTR ds:0xc0024724
c001c1cd:	b8 10 27 00 00       	mov    eax,0x2710
c001c1d2:	99                   	cdq    
c001c1d3:	f7 f9                	idiv   ecx
c001c1d5:	83 ec 0c             	sub    esp,0xc
c001c1d8:	50                   	push   eax
c001c1d9:	e8 ba 05 ff ff       	call   c000c798 <timerHandler(unsigned int)>
c001c1de:	83 c4 10             	add    esp,0x10
c001c1e1:	90                   	nop
c001c1e2:	83 c4 0c             	add    esp,0xc
c001c1e5:	c3                   	ret    
c001c1e6:	66 90                	xchg   ax,ax

c001c1e8 <PIT::open(int, int, void*)>:
c001c1e8:	83 ec 0c             	sub    esp,0xc
c001c1eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1ef:	8b 00                	mov    eax,DWORD PTR [eax]
c001c1f1:	83 c0 24             	add    eax,0x24
c001c1f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c1f6:	83 ec 08             	sub    esp,0x8
c001c1f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c201:	ff d0                	call   eax
c001c203:	83 c4 10             	add    esp,0x10
c001c206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c20a:	83 ec 0c             	sub    esp,0xc
c001c20d:	6a 00                	push   0x0
c001c20f:	6a 01                	push   0x1
c001c211:	68 c4 c1 01 c0       	push   0xc001c1c4
c001c216:	6a 00                	push   0x0
c001c218:	50                   	push   eax
c001c219:	e8 b8 ec fe ff       	call   c000aed6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c21e:	83 c4 20             	add    esp,0x20
c001c221:	89 c2                	mov    edx,eax
c001c223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c227:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001c22d:	b8 00 00 00 00       	mov    eax,0x0
c001c232:	83 c4 0c             	add    esp,0xc
c001c235:	c3                   	ret    
c001c236:	66 90                	xchg   ax,ax

c001c238 <PIT::close(int, int, void*)>:
c001c238:	83 ec 0c             	sub    esp,0xc
c001c23b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c23f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001c249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c24d:	6a 01                	push   0x1
c001c24f:	68 c4 c1 01 c0       	push   0xc001c1c4
c001c254:	6a 00                	push   0x0
c001c256:	50                   	push   eax
c001c257:	e8 b0 ec fe ff       	call   c000af0c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001c25c:	83 c4 10             	add    esp,0x10
c001c25f:	b8 00 00 00 00       	mov    eax,0x0
c001c264:	83 c4 0c             	add    esp,0xc
c001c267:	c3                   	ret    

c001c268 <PIT::PIT()>:
c001c268:	83 ec 0c             	sub    esp,0xc
c001c26b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c26f:	83 ec 08             	sub    esp,0x8
c001c272:	68 18 ff 01 c0       	push   0xc001ff18
c001c277:	50                   	push   eax
c001c278:	e8 4f 04 ff ff       	call   c000c6cc <Timer::Timer(char const*)>
c001c27d:	83 c4 10             	add    esp,0x10
c001c280:	ba 40 ff 01 c0       	mov    edx,0xc001ff40
c001c285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c289:	89 10                	mov    DWORD PTR [eax],edx
c001c28b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c28f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c295:	0f b6 d0             	movzx  edx,al
c001c298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c29c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001c2a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2a7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c2ad:	0f b6 d0             	movzx  edx,al
c001c2b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2b4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001c2b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2bd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c2c3:	8d 50 01             	lea    edx,[eax+0x1]
c001c2c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c2ca:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001c2d0:	0f b6 d0             	movzx  edx,al
c001c2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2d7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c2db:	83 e1 3f             	and    ecx,0x3f
c001c2de:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c2e2:	90                   	nop
c001c2e3:	83 c4 0c             	add    esp,0xc
c001c2e6:	c3                   	ret    
c001c2e7:	66 90                	xchg   ax,ax
c001c2e9:	66 90                	xchg   ax,ax
c001c2eb:	66 90                	xchg   ax,ax
c001c2ed:	66 90                	xchg   ax,ax
c001c2ef:	90                   	nop

c001c2f0 <avxDetect>:
c001c2f0:	b8 01 00 00 00       	mov    eax,0x1
c001c2f5:	0f a2                	cpuid  
c001c2f7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001c2fd:	74 15                	je     c001c314 <avxDetect.noAVX>
c001c2ff:	b8 01 00 00 00       	mov    eax,0x1
c001c304:	0f a2                	cpuid  
c001c306:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001c30c:	74 06                	je     c001c314 <avxDetect.noAVX>
c001c30e:	b8 01 00 00 00       	mov    eax,0x1
c001c313:	c3                   	ret    

c001c314 <avxDetect.noAVX>:
c001c314:	b8 00 00 00 00       	mov    eax,0x0
c001c319:	c3                   	ret    

c001c31a <avxSave>:
c001c31a:	53                   	push   ebx
c001c31b:	52                   	push   edx
c001c31c:	31 c0                	xor    eax,eax
c001c31e:	48                   	dec    eax
c001c31f:	89 c2                	mov    edx,eax
c001c321:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c325:	0f ae 23             	xsave  [ebx]
c001c328:	5a                   	pop    edx
c001c329:	5b                   	pop    ebx
c001c32a:	c3                   	ret    

c001c32b <avxLoad>:
c001c32b:	53                   	push   ebx
c001c32c:	52                   	push   edx
c001c32d:	31 c0                	xor    eax,eax
c001c32f:	48                   	dec    eax
c001c330:	89 c2                	mov    edx,eax
c001c332:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c336:	0f ae 2b             	xrstor [ebx]
c001c339:	5a                   	pop    edx
c001c33a:	5b                   	pop    ebx
c001c33b:	c3                   	ret    

c001c33c <avxInit>:
c001c33c:	e8 57 02 00 00       	call   c001c598 <sseInit>
c001c341:	50                   	push   eax
c001c342:	51                   	push   ecx
c001c343:	0f 20 e0             	mov    eax,cr4
c001c346:	0d 00 00 04 00       	or     eax,0x40000
c001c34b:	0f 22 e0             	mov    cr4,eax
c001c34e:	31 c9                	xor    ecx,ecx
c001c350:	0f 01 d0             	xgetbv 
c001c353:	0d 07 00 00 00       	or     eax,0x7
c001c358:	0f 01 d1             	xsetbv 
c001c35b:	59                   	pop    ecx
c001c35c:	58                   	pop    eax
c001c35d:	c3                   	ret    

c001c35e <avxClose>:
c001c35e:	c3                   	ret    

c001c35f <wouldSheSayYes>:
c001c35f:	c3                   	ret    
c001c360:	49                   	dec    ecx
c001c361:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001c365:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001c369:	75 20                	jne    c001c38b <isr0+0xb>
c001c36b:	4e                   	dec    esi
c001c36c:	79 61                	jns    c001c3cf <isr7+0x3>
c001c36e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001c373:	66 90                	xchg   ax,ax
c001c375:	66 90                	xchg   ax,ax
c001c377:	66 90                	xchg   ax,ax
c001c379:	66 90                	xchg   ax,ax
c001c37b:	66 90                	xchg   ax,ax
c001c37d:	66 90                	xchg   ax,ax
c001c37f:	90                   	nop

c001c380 <isr0>:
c001c380:	fa                   	cli    
c001c381:	68 00 00 00 00       	push   0x0
c001c386:	68 00 00 00 00       	push   0x0
c001c38b:	e9 44 01 00 00       	jmp    c001c4d4 <int_common_stub>

c001c390 <isr1>:
c001c390:	fa                   	cli    
c001c391:	6a 00                	push   0x0
c001c393:	6a 01                	push   0x1
c001c395:	e9 3a 01 00 00       	jmp    c001c4d4 <int_common_stub>

c001c39a <isr2>:
c001c39a:	fa                   	cli    
c001c39b:	6a 00                	push   0x0
c001c39d:	6a 02                	push   0x2
c001c39f:	e9 30 01 00 00       	jmp    c001c4d4 <int_common_stub>

c001c3a4 <isr3>:
c001c3a4:	fa                   	cli    
c001c3a5:	6a 00                	push   0x0
c001c3a7:	6a 03                	push   0x3
c001c3a9:	e9 26 01 00 00       	jmp    c001c4d4 <int_common_stub>

c001c3ae <isr4>:
c001c3ae:	fa                   	cli    
c001c3af:	6a 00                	push   0x0
c001c3b1:	6a 04                	push   0x4
c001c3b3:	e9 1c 01 00 00       	jmp    c001c4d4 <int_common_stub>

c001c3b8 <isr5>:
c001c3b8:	fa                   	cli    
c001c3b9:	6a 00                	push   0x0
c001c3bb:	6a 05                	push   0x5
c001c3bd:	e9 12 01 00 00       	jmp    c001c4d4 <int_common_stub>

c001c3c2 <isr6>:
c001c3c2:	fa                   	cli    
c001c3c3:	6a 00                	push   0x0
c001c3c5:	6a 06                	push   0x6
c001c3c7:	e9 08 01 00 00       	jmp    c001c4d4 <int_common_stub>

c001c3cc <isr7>:
c001c3cc:	fa                   	cli    
c001c3cd:	6a 00                	push   0x0
c001c3cf:	6a 07                	push   0x7
c001c3d1:	e9 fe 00 00 00       	jmp    c001c4d4 <int_common_stub>

c001c3d6 <isr8>:
c001c3d6:	fa                   	cli    
c001c3d7:	6a 08                	push   0x8
c001c3d9:	e9 f6 00 00 00       	jmp    c001c4d4 <int_common_stub>

c001c3de <isr9>:
c001c3de:	fa                   	cli    
c001c3df:	6a 00                	push   0x0
c001c3e1:	6a 09                	push   0x9
c001c3e3:	e9 ec 00 00 00       	jmp    c001c4d4 <int_common_stub>

c001c3e8 <isr10>:
c001c3e8:	fa                   	cli    
c001c3e9:	6a 0a                	push   0xa
c001c3eb:	e9 e4 00 00 00       	jmp    c001c4d4 <int_common_stub>

c001c3f0 <isr11>:
c001c3f0:	fa                   	cli    
c001c3f1:	6a 0b                	push   0xb
c001c3f3:	e9 dc 00 00 00       	jmp    c001c4d4 <int_common_stub>

c001c3f8 <isr12>:
c001c3f8:	fa                   	cli    
c001c3f9:	6a 0c                	push   0xc
c001c3fb:	e9 d4 00 00 00       	jmp    c001c4d4 <int_common_stub>

c001c400 <isr13>:
c001c400:	fa                   	cli    
c001c401:	6a 0d                	push   0xd
c001c403:	e9 cc 00 00 00       	jmp    c001c4d4 <int_common_stub>

c001c408 <isr14>:
c001c408:	fa                   	cli    
c001c409:	6a 0e                	push   0xe
c001c40b:	e9 c4 00 00 00       	jmp    c001c4d4 <int_common_stub>

c001c410 <isr15>:
c001c410:	fa                   	cli    
c001c411:	6a 00                	push   0x0
c001c413:	6a 0f                	push   0xf
c001c415:	e9 ba 00 00 00       	jmp    c001c4d4 <int_common_stub>

c001c41a <isr16>:
c001c41a:	fa                   	cli    
c001c41b:	6a 00                	push   0x0
c001c41d:	6a 10                	push   0x10
c001c41f:	e9 b0 00 00 00       	jmp    c001c4d4 <int_common_stub>

c001c424 <isr17>:
c001c424:	fa                   	cli    
c001c425:	6a 00                	push   0x0
c001c427:	6a 11                	push   0x11
c001c429:	e9 a6 00 00 00       	jmp    c001c4d4 <int_common_stub>

c001c42e <isr18>:
c001c42e:	fa                   	cli    
c001c42f:	6a 00                	push   0x0
c001c431:	6a 12                	push   0x12
c001c433:	e9 9c 00 00 00       	jmp    c001c4d4 <int_common_stub>

c001c438 <irq3>:
c001c438:	fa                   	cli    
c001c439:	6a 00                	push   0x0
c001c43b:	6a 23                	push   0x23
c001c43d:	e9 92 00 00 00       	jmp    c001c4d4 <int_common_stub>

c001c442 <irq4>:
c001c442:	fa                   	cli    
c001c443:	6a 00                	push   0x0
c001c445:	6a 24                	push   0x24
c001c447:	e9 88 00 00 00       	jmp    c001c4d4 <int_common_stub>

c001c44c <irq5>:
c001c44c:	fa                   	cli    
c001c44d:	6a 00                	push   0x0
c001c44f:	6a 25                	push   0x25
c001c451:	e9 7e 00 00 00       	jmp    c001c4d4 <int_common_stub>

c001c456 <irq6>:
c001c456:	fa                   	cli    
c001c457:	6a 00                	push   0x0
c001c459:	6a 26                	push   0x26
c001c45b:	e9 74 00 00 00       	jmp    c001c4d4 <int_common_stub>

c001c460 <irq7>:
c001c460:	fa                   	cli    
c001c461:	6a 00                	push   0x0
c001c463:	6a 27                	push   0x27
c001c465:	e9 6a 00 00 00       	jmp    c001c4d4 <int_common_stub>

c001c46a <irq8>:
c001c46a:	fa                   	cli    
c001c46b:	6a 00                	push   0x0
c001c46d:	6a 28                	push   0x28
c001c46f:	e9 60 00 00 00       	jmp    c001c4d4 <int_common_stub>

c001c474 <irq9>:
c001c474:	fa                   	cli    
c001c475:	6a 00                	push   0x0
c001c477:	6a 29                	push   0x29
c001c479:	e9 56 00 00 00       	jmp    c001c4d4 <int_common_stub>

c001c47e <irq10>:
c001c47e:	fa                   	cli    
c001c47f:	6a 00                	push   0x0
c001c481:	6a 2a                	push   0x2a
c001c483:	e9 4c 00 00 00       	jmp    c001c4d4 <int_common_stub>

c001c488 <irq11>:
c001c488:	fa                   	cli    
c001c489:	6a 00                	push   0x0
c001c48b:	6a 2b                	push   0x2b
c001c48d:	e9 42 00 00 00       	jmp    c001c4d4 <int_common_stub>

c001c492 <irq12>:
c001c492:	fa                   	cli    
c001c493:	6a 00                	push   0x0
c001c495:	6a 2c                	push   0x2c
c001c497:	e9 38 00 00 00       	jmp    c001c4d4 <int_common_stub>

c001c49c <irq13>:
c001c49c:	fa                   	cli    
c001c49d:	6a 00                	push   0x0
c001c49f:	6a 2d                	push   0x2d
c001c4a1:	e9 2e 00 00 00       	jmp    c001c4d4 <int_common_stub>

c001c4a6 <irq14>:
c001c4a6:	fa                   	cli    
c001c4a7:	6a 00                	push   0x0
c001c4a9:	6a 2e                	push   0x2e
c001c4ab:	e9 24 00 00 00       	jmp    c001c4d4 <int_common_stub>

c001c4b0 <irq15>:
c001c4b0:	fa                   	cli    
c001c4b1:	6a 00                	push   0x0
c001c4b3:	6a 2f                	push   0x2f
c001c4b5:	e9 1a 00 00 00       	jmp    c001c4d4 <int_common_stub>

c001c4ba <irq1>:
c001c4ba:	fa                   	cli    
c001c4bb:	6a 00                	push   0x0
c001c4bd:	6a 21                	push   0x21
c001c4bf:	eb 13                	jmp    c001c4d4 <int_common_stub>

c001c4c1 <irq2>:
c001c4c1:	fa                   	cli    
c001c4c2:	6a 00                	push   0x0
c001c4c4:	6a 22                	push   0x22
c001c4c6:	eb 0c                	jmp    c001c4d4 <int_common_stub>

c001c4c8 <isr96>:
c001c4c8:	6a 00                	push   0x0
c001c4ca:	6a 60                	push   0x60
c001c4cc:	fb                   	sti    
c001c4cd:	eb 05                	jmp    c001c4d4 <int_common_stub>

c001c4cf <irq0>:
c001c4cf:	fa                   	cli    
c001c4d0:	6a 00                	push   0x0
c001c4d2:	6a 20                	push   0x20

c001c4d4 <int_common_stub>:
c001c4d4:	60                   	pusha  
c001c4d5:	1e                   	push   ds
c001c4d6:	06                   	push   es
c001c4d7:	0f a0                	push   fs
c001c4d9:	0f a8                	push   gs
c001c4db:	66 b8 10 00          	mov    ax,0x10
c001c4df:	66 8e d8             	mov    ds,ax
c001c4e2:	66 8e c0             	mov    es,ax
c001c4e5:	66 8e e0             	mov    fs,ax
c001c4e8:	66 8e e8             	mov    gs,ax
c001c4eb:	54                   	push   esp
c001c4ec:	fc                   	cld    
c001c4ed:	e8 e2 ee fe ff       	call   c000b3d4 <int_handler>
c001c4f2:	81 c4 04 00 00 00    	add    esp,0x4
c001c4f8:	0f a9                	pop    gs
c001c4fa:	0f a1                	pop    fs
c001c4fc:	07                   	pop    es
c001c4fd:	1f                   	pop    ds
c001c4fe:	61                   	popa   
c001c4ff:	81 c4 08 00 00 00    	add    esp,0x8
c001c505:	cf                   	iret   

c001c506 <irq16>:
c001c506:	fa                   	cli    
c001c507:	6a 00                	push   0x0
c001c509:	6a 30                	push   0x30
c001c50b:	e9 c4 ff ff ff       	jmp    c001c4d4 <int_common_stub>

c001c510 <irq17>:
c001c510:	fa                   	cli    
c001c511:	6a 00                	push   0x0
c001c513:	6a 31                	push   0x31
c001c515:	e9 ba ff ff ff       	jmp    c001c4d4 <int_common_stub>

c001c51a <irq18>:
c001c51a:	fa                   	cli    
c001c51b:	6a 00                	push   0x0
c001c51d:	6a 32                	push   0x32
c001c51f:	e9 b0 ff ff ff       	jmp    c001c4d4 <int_common_stub>

c001c524 <irq19>:
c001c524:	fa                   	cli    
c001c525:	6a 00                	push   0x0
c001c527:	6a 33                	push   0x33
c001c529:	e9 a6 ff ff ff       	jmp    c001c4d4 <int_common_stub>

c001c52e <irq20>:
c001c52e:	fa                   	cli    
c001c52f:	6a 00                	push   0x0
c001c531:	6a 34                	push   0x34
c001c533:	e9 9c ff ff ff       	jmp    c001c4d4 <int_common_stub>

c001c538 <irq21>:
c001c538:	fa                   	cli    
c001c539:	6a 00                	push   0x0
c001c53b:	6a 35                	push   0x35
c001c53d:	e9 92 ff ff ff       	jmp    c001c4d4 <int_common_stub>

c001c542 <irq22>:
c001c542:	fa                   	cli    
c001c543:	6a 00                	push   0x0
c001c545:	6a 36                	push   0x36
c001c547:	e9 88 ff ff ff       	jmp    c001c4d4 <int_common_stub>

c001c54c <irq23>:
c001c54c:	fa                   	cli    
c001c54d:	6a 00                	push   0x0
c001c54f:	6a 37                	push   0x37
c001c551:	e9 7e ff ff ff       	jmp    c001c4d4 <int_common_stub>
c001c556:	66 90                	xchg   ax,ax
c001c558:	66 90                	xchg   ax,ax
c001c55a:	66 90                	xchg   ax,ax
c001c55c:	66 90                	xchg   ax,ax
c001c55e:	66 90                	xchg   ax,ax

c001c560 <i386GetRDRAND>:
c001c560:	b9 64 00 00 00       	mov    ecx,0x64

c001c565 <retry>:
c001c565:	0f c7 f0             	rdrand eax
c001c568:	72 05                	jb     c001c56f <retry.done>
c001c56a:	e2 f9                	loop   c001c565 <retry>

c001c56c <retry.fail>:
c001c56c:	31 c0                	xor    eax,eax
c001c56e:	c3                   	ret    

c001c56f <retry.done>:
c001c56f:	c3                   	ret    

c001c570 <absolutelyNoChanceInHell>:
c001c570:	b8 01 00 00 00       	mov    eax,0x1
c001c575:	0f a2                	cpuid  
c001c577:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001c57d:	74 06                	je     c001c585 <sseDetect.noSSE>
c001c57f:	b8 01 00 00 00       	mov    eax,0x1
c001c584:	c3                   	ret    

c001c585 <sseDetect.noSSE>:
c001c585:	31 c0                	xor    eax,eax
c001c587:	c3                   	ret    

c001c588 <sseSave>:
c001c588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c58c:	0f ae 00             	fxsave [eax]
c001c58f:	c3                   	ret    

c001c590 <sseLoad>:
c001c590:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c594:	0f ae 08             	fxrstor [eax]
c001c597:	c3                   	ret    

c001c598 <sseInit>:
c001c598:	e8 42 00 00 00       	call   c001c5df <x87Init>
c001c59d:	0f 20 e0             	mov    eax,cr4
c001c5a0:	66 0d 00 06          	or     ax,0x600
c001c5a4:	0f 22 e0             	mov    cr4,eax
c001c5a7:	c3                   	ret    

c001c5a8 <sseClose>:
c001c5a8:	c3                   	ret    
c001c5a9:	66 90                	xchg   ax,ax
c001c5ab:	66 90                	xchg   ax,ax
c001c5ad:	66 90                	xchg   ax,ax
c001c5af:	90                   	nop

c001c5b0 <value_37F>:
c001c5b0:	7f 03                	jg     c001c5b5 <value_37A+0x1>

c001c5b2 <value_37E>:
c001c5b2:	7e 03                	jle    c001c5b7 <x87Detect+0x1>

c001c5b4 <value_37A>:
c001c5b4:	7a 03                	jp     c001c5b9 <x87Detect+0x3>

c001c5b6 <x87Detect>:
c001c5b6:	b8 01 00 00 00       	mov    eax,0x1
c001c5bb:	0f a2                	cpuid  
c001c5bd:	f7 c2 01 00 00 00    	test   edx,0x1
c001c5c3:	74 06                	je     c001c5cb <x87Detect.nox87>
c001c5c5:	b8 01 00 00 00       	mov    eax,0x1
c001c5ca:	c3                   	ret    

c001c5cb <x87Detect.nox87>:
c001c5cb:	b8 00 00 00 00       	mov    eax,0x0
c001c5d0:	c3                   	ret    

c001c5d1 <x87Save>:
c001c5d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5d5:	dd 30                	fnsave [eax]
c001c5d7:	c3                   	ret    

c001c5d8 <x87Load>:
c001c5d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5dc:	dd 20                	frstor [eax]
c001c5de:	c3                   	ret    

c001c5df <x87Init>:
c001c5df:	0f 20 c0             	mov    eax,cr0
c001c5e2:	66 25 fb ff          	and    ax,0xfffb
c001c5e6:	66 0d 22 00          	or     ax,0x22
c001c5ea:	0f 22 c0             	mov    cr0,eax
c001c5ed:	db e3                	fninit 
c001c5ef:	0f 06                	clts   
c001c5f1:	d9 2d b4 c5 01 c0    	fldcw  WORD PTR ds:0xc001c5b4
c001c5f7:	c3                   	ret    

c001c5f8 <x87Close>:
c001c5f8:	c3                   	ret    
c001c5f9:	66 90                	xchg   ax,ax
c001c5fb:	90                   	nop

c001c5fc <__do_global_ctors_aux>:
c001c5fc:	a1 c0 d5 01 c0       	mov    eax,ds:0xc001d5c0
c001c601:	83 f8 ff             	cmp    eax,0xffffffff
c001c604:	74 1a                	je     c001c620 <__do_global_ctors_aux+0x24>
c001c606:	55                   	push   ebp
c001c607:	89 e5                	mov    ebp,esp
c001c609:	53                   	push   ebx
c001c60a:	52                   	push   edx
c001c60b:	bb c0 d5 01 c0       	mov    ebx,0xc001d5c0
c001c610:	ff d0                	call   eax
c001c612:	83 eb 04             	sub    ebx,0x4
c001c615:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c617:	83 f8 ff             	cmp    eax,0xffffffff
c001c61a:	75 f4                	jne    c001c610 <__do_global_ctors_aux+0x14>
c001c61c:	58                   	pop    eax
c001c61d:	5b                   	pop    ebx
c001c61e:	5d                   	pop    ebp
c001c61f:	c3                   	ret    
c001c620:	c3                   	ret    
c001c621:	66 90                	xchg   ax,ax
c001c623:	90                   	nop

c001c624 <__divdi3>:
c001c624:	55                   	push   ebp
c001c625:	57                   	push   edi
c001c626:	56                   	push   esi
c001c627:	53                   	push   ebx
c001c628:	83 ec 1c             	sub    esp,0x1c
c001c62b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c62f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c633:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001c636:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001c63a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c63e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c642:	85 db                	test   ebx,ebx
c001c644:	0f 88 8e 00 00 00    	js     c001c6d8 <__divdi3+0xb4>
c001c64a:	89 dd                	mov    ebp,ebx
c001c64c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c654:	89 d3                	mov    ebx,edx
c001c656:	85 d2                	test   edx,edx
c001c658:	79 0d                	jns    c001c667 <__divdi3+0x43>
c001c65a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001c65e:	f7 d8                	neg    eax
c001c660:	83 d2 00             	adc    edx,0x0
c001c663:	f7 da                	neg    edx
c001c665:	89 d3                	mov    ebx,edx
c001c667:	89 c7                	mov    edi,eax
c001c669:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c66c:	85 db                	test   ebx,ebx
c001c66e:	75 48                	jne    c001c6b8 <__divdi3+0x94>
c001c670:	39 ef                	cmp    edi,ebp
c001c672:	76 24                	jbe    c001c698 <__divdi3+0x74>
c001c674:	89 ea                	mov    edx,ebp
c001c676:	f7 f7                	div    edi
c001c678:	89 c1                	mov    ecx,eax
c001c67a:	31 f6                	xor    esi,esi
c001c67c:	89 c8                	mov    eax,ecx
c001c67e:	89 f2                	mov    edx,esi
c001c680:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c684:	85 c9                	test   ecx,ecx
c001c686:	74 07                	je     c001c68f <__divdi3+0x6b>
c001c688:	f7 d8                	neg    eax
c001c68a:	83 d2 00             	adc    edx,0x0
c001c68d:	f7 da                	neg    edx
c001c68f:	83 c4 1c             	add    esp,0x1c
c001c692:	5b                   	pop    ebx
c001c693:	5e                   	pop    esi
c001c694:	5f                   	pop    edi
c001c695:	5d                   	pop    ebp
c001c696:	c3                   	ret    
c001c697:	90                   	nop
c001c698:	85 ff                	test   edi,edi
c001c69a:	75 0b                	jne    c001c6a7 <__divdi3+0x83>
c001c69c:	b8 01 00 00 00       	mov    eax,0x1
c001c6a1:	31 d2                	xor    edx,edx
c001c6a3:	f7 f3                	div    ebx
c001c6a5:	89 c7                	mov    edi,eax
c001c6a7:	31 d2                	xor    edx,edx
c001c6a9:	89 e8                	mov    eax,ebp
c001c6ab:	f7 f7                	div    edi
c001c6ad:	89 c6                	mov    esi,eax
c001c6af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c6b2:	f7 f7                	div    edi
c001c6b4:	89 c1                	mov    ecx,eax
c001c6b6:	eb c4                	jmp    c001c67c <__divdi3+0x58>
c001c6b8:	39 eb                	cmp    ebx,ebp
c001c6ba:	77 3c                	ja     c001c6f8 <__divdi3+0xd4>
c001c6bc:	0f bd f3             	bsr    esi,ebx
c001c6bf:	83 f6 1f             	xor    esi,0x1f
c001c6c2:	75 40                	jne    c001c704 <__divdi3+0xe0>
c001c6c4:	39 eb                	cmp    ebx,ebp
c001c6c6:	72 09                	jb     c001c6d1 <__divdi3+0xad>
c001c6c8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001c6cb:	0f 87 97 00 00 00    	ja     c001c768 <__divdi3+0x144>
c001c6d1:	b9 01 00 00 00       	mov    ecx,0x1
c001c6d6:	eb a4                	jmp    c001c67c <__divdi3+0x58>
c001c6d8:	f7 d9                	neg    ecx
c001c6da:	83 d3 00             	adc    ebx,0x0
c001c6dd:	f7 db                	neg    ebx
c001c6df:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001c6e2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001c6e6:	89 dd                	mov    ebp,ebx
c001c6e8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001c6f0:	e9 5f ff ff ff       	jmp    c001c654 <__divdi3+0x30>
c001c6f5:	8d 76 00             	lea    esi,[esi+0x0]
c001c6f8:	31 f6                	xor    esi,esi
c001c6fa:	31 c9                	xor    ecx,ecx
c001c6fc:	e9 7b ff ff ff       	jmp    c001c67c <__divdi3+0x58>
c001c701:	8d 76 00             	lea    esi,[esi+0x0]
c001c704:	b8 20 00 00 00       	mov    eax,0x20
c001c709:	29 f0                	sub    eax,esi
c001c70b:	89 f1                	mov    ecx,esi
c001c70d:	d3 e3                	shl    ebx,cl
c001c70f:	89 fa                	mov    edx,edi
c001c711:	88 c1                	mov    cl,al
c001c713:	d3 ea                	shr    edx,cl
c001c715:	09 da                	or     edx,ebx
c001c717:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c71b:	89 f1                	mov    ecx,esi
c001c71d:	d3 e7                	shl    edi,cl
c001c71f:	89 eb                	mov    ebx,ebp
c001c721:	88 c1                	mov    cl,al
c001c723:	d3 eb                	shr    ebx,cl
c001c725:	89 f1                	mov    ecx,esi
c001c727:	d3 e5                	shl    ebp,cl
c001c729:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001c72c:	88 c1                	mov    cl,al
c001c72e:	d3 ea                	shr    edx,cl
c001c730:	09 d5                	or     ebp,edx
c001c732:	89 e8                	mov    eax,ebp
c001c734:	89 da                	mov    edx,ebx
c001c736:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001c73a:	89 d3                	mov    ebx,edx
c001c73c:	89 c5                	mov    ebp,eax
c001c73e:	f7 e7                	mul    edi
c001c740:	39 d3                	cmp    ebx,edx
c001c742:	72 18                	jb     c001c75c <__divdi3+0x138>
c001c744:	74 0a                	je     c001c750 <__divdi3+0x12c>
c001c746:	89 e9                	mov    ecx,ebp
c001c748:	31 f6                	xor    esi,esi
c001c74a:	e9 2d ff ff ff       	jmp    c001c67c <__divdi3+0x58>
c001c74f:	90                   	nop
c001c750:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001c753:	89 f1                	mov    ecx,esi
c001c755:	d3 e7                	shl    edi,cl
c001c757:	39 c7                	cmp    edi,eax
c001c759:	73 eb                	jae    c001c746 <__divdi3+0x122>
c001c75b:	90                   	nop
c001c75c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001c75f:	31 f6                	xor    esi,esi
c001c761:	e9 16 ff ff ff       	jmp    c001c67c <__divdi3+0x58>
c001c766:	66 90                	xchg   ax,ax
c001c768:	31 c9                	xor    ecx,ecx
c001c76a:	e9 0d ff ff ff       	jmp    c001c67c <__divdi3+0x58>
c001c76f:	90                   	nop

c001c770 <__moddi3>:
c001c770:	55                   	push   ebp
c001c771:	57                   	push   edi
c001c772:	56                   	push   esi
c001c773:	53                   	push   ebx
c001c774:	83 ec 2c             	sub    esp,0x2c
c001c777:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c77b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001c77f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c783:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001c787:	85 db                	test   ebx,ebx
c001c789:	0f 88 85 00 00 00    	js     c001c814 <__moddi3+0xa4>
c001c78f:	89 de                	mov    esi,ebx
c001c791:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c799:	89 d7                	mov    edi,edx
c001c79b:	85 d2                	test   edx,edx
c001c79d:	79 09                	jns    c001c7a8 <__moddi3+0x38>
c001c79f:	f7 d8                	neg    eax
c001c7a1:	83 d2 00             	adc    edx,0x0
c001c7a4:	f7 da                	neg    edx
c001c7a6:	89 d7                	mov    edi,edx
c001c7a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7ac:	89 cd                	mov    ebp,ecx
c001c7ae:	85 ff                	test   edi,edi
c001c7b0:	75 52                	jne    c001c804 <__moddi3+0x94>
c001c7b2:	89 c3                	mov    ebx,eax
c001c7b4:	39 f0                	cmp    eax,esi
c001c7b6:	76 24                	jbe    c001c7dc <__moddi3+0x6c>
c001c7b8:	89 c8                	mov    eax,ecx
c001c7ba:	89 f2                	mov    edx,esi
c001c7bc:	f7 f3                	div    ebx
c001c7be:	89 d6                	mov    esi,edx
c001c7c0:	89 f0                	mov    eax,esi
c001c7c2:	31 d2                	xor    edx,edx
c001c7c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c7c8:	85 c9                	test   ecx,ecx
c001c7ca:	74 07                	je     c001c7d3 <__moddi3+0x63>
c001c7cc:	f7 d8                	neg    eax
c001c7ce:	83 d2 00             	adc    edx,0x0
c001c7d1:	f7 da                	neg    edx
c001c7d3:	83 c4 2c             	add    esp,0x2c
c001c7d6:	5b                   	pop    ebx
c001c7d7:	5e                   	pop    esi
c001c7d8:	5f                   	pop    edi
c001c7d9:	5d                   	pop    ebp
c001c7da:	c3                   	ret    
c001c7db:	90                   	nop
c001c7dc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c7e0:	85 db                	test   ebx,ebx
c001c7e2:	75 0d                	jne    c001c7f1 <__moddi3+0x81>
c001c7e4:	b8 01 00 00 00       	mov    eax,0x1
c001c7e9:	31 d2                	xor    edx,edx
c001c7eb:	f7 f7                	div    edi
c001c7ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7f1:	89 f0                	mov    eax,esi
c001c7f3:	31 d2                	xor    edx,edx
c001c7f5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c7f9:	f7 f7                	div    edi
c001c7fb:	89 e8                	mov    eax,ebp
c001c7fd:	f7 f7                	div    edi
c001c7ff:	89 d6                	mov    esi,edx
c001c801:	eb bd                	jmp    c001c7c0 <__moddi3+0x50>
c001c803:	90                   	nop
c001c804:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c808:	39 f7                	cmp    edi,esi
c001c80a:	76 20                	jbe    c001c82c <__moddi3+0xbc>
c001c80c:	89 c8                	mov    eax,ecx
c001c80e:	89 f2                	mov    edx,esi
c001c810:	eb b2                	jmp    c001c7c4 <__moddi3+0x54>
c001c812:	66 90                	xchg   ax,ax
c001c814:	f7 d9                	neg    ecx
c001c816:	83 d3 00             	adc    ebx,0x0
c001c819:	f7 db                	neg    ebx
c001c81b:	89 de                	mov    esi,ebx
c001c81d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c825:	e9 6f ff ff ff       	jmp    c001c799 <__moddi3+0x29>
c001c82a:	66 90                	xchg   ax,ax
c001c82c:	0f bd c7             	bsr    eax,edi
c001c82f:	83 f0 1f             	xor    eax,0x1f
c001c832:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c836:	75 24                	jne    c001c85c <__moddi3+0xec>
c001c838:	39 f7                	cmp    edi,esi
c001c83a:	72 06                	jb     c001c842 <__moddi3+0xd2>
c001c83c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c840:	77 0c                	ja     c001c84e <__moddi3+0xde>
c001c842:	89 e9                	mov    ecx,ebp
c001c844:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c848:	19 fe                	sbb    esi,edi
c001c84a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c84e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c852:	89 f2                	mov    edx,esi
c001c854:	e9 6b ff ff ff       	jmp    c001c7c4 <__moddi3+0x54>
c001c859:	8d 76 00             	lea    esi,[esi+0x0]
c001c85c:	b8 20 00 00 00       	mov    eax,0x20
c001c861:	89 c2                	mov    edx,eax
c001c863:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c867:	29 da                	sub    edx,ebx
c001c869:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c86d:	88 d9                	mov    cl,bl
c001c86f:	d3 e7                	shl    edi,cl
c001c871:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c875:	88 d1                	mov    cl,dl
c001c877:	d3 e8                	shr    eax,cl
c001c879:	09 c7                	or     edi,eax
c001c87b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c87f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c883:	89 d8                	mov    eax,ebx
c001c885:	88 d9                	mov    cl,bl
c001c887:	d3 e7                	shl    edi,cl
c001c889:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c88d:	89 f3                	mov    ebx,esi
c001c88f:	88 d1                	mov    cl,dl
c001c891:	d3 eb                	shr    ebx,cl
c001c893:	89 c7                	mov    edi,eax
c001c895:	88 c1                	mov    cl,al
c001c897:	d3 e6                	shl    esi,cl
c001c899:	89 e8                	mov    eax,ebp
c001c89b:	88 d1                	mov    cl,dl
c001c89d:	d3 e8                	shr    eax,cl
c001c89f:	09 f0                	or     eax,esi
c001c8a1:	89 f9                	mov    ecx,edi
c001c8a3:	d3 e5                	shl    ebp,cl
c001c8a5:	89 da                	mov    edx,ebx
c001c8a7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c8ab:	89 d3                	mov    ebx,edx
c001c8ad:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c8b1:	89 c6                	mov    esi,eax
c001c8b3:	89 d1                	mov    ecx,edx
c001c8b5:	39 d3                	cmp    ebx,edx
c001c8b7:	72 27                	jb     c001c8e0 <__moddi3+0x170>
c001c8b9:	74 21                	je     c001c8dc <__moddi3+0x16c>
c001c8bb:	29 f5                	sub    ebp,esi
c001c8bd:	19 cb                	sbb    ebx,ecx
c001c8bf:	89 de                	mov    esi,ebx
c001c8c1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c8c5:	d3 e6                	shl    esi,cl
c001c8c7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c8cb:	89 f9                	mov    ecx,edi
c001c8cd:	d3 ed                	shr    ebp,cl
c001c8cf:	09 ee                	or     esi,ebp
c001c8d1:	89 f0                	mov    eax,esi
c001c8d3:	d3 eb                	shr    ebx,cl
c001c8d5:	89 da                	mov    edx,ebx
c001c8d7:	e9 e8 fe ff ff       	jmp    c001c7c4 <__moddi3+0x54>
c001c8dc:	39 c5                	cmp    ebp,eax
c001c8de:	73 db                	jae    c001c8bb <__moddi3+0x14b>
c001c8e0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c8e4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c8e8:	89 d1                	mov    ecx,edx
c001c8ea:	89 c6                	mov    esi,eax
c001c8ec:	eb cd                	jmp    c001c8bb <__moddi3+0x14b>
c001c8ee:	66 90                	xchg   ax,ax

c001c8f0 <__udivdi3>:
c001c8f0:	55                   	push   ebp
c001c8f1:	57                   	push   edi
c001c8f2:	56                   	push   esi
c001c8f3:	53                   	push   ebx
c001c8f4:	83 ec 1c             	sub    esp,0x1c
c001c8f7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c8fb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c8ff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c903:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c907:	85 d2                	test   edx,edx
c001c909:	75 41                	jne    c001c94c <__udivdi3+0x5c>
c001c90b:	39 f7                	cmp    edi,esi
c001c90d:	76 15                	jbe    c001c924 <__udivdi3+0x34>
c001c90f:	89 e8                	mov    eax,ebp
c001c911:	89 f2                	mov    edx,esi
c001c913:	f7 f7                	div    edi
c001c915:	31 db                	xor    ebx,ebx
c001c917:	89 da                	mov    edx,ebx
c001c919:	83 c4 1c             	add    esp,0x1c
c001c91c:	5b                   	pop    ebx
c001c91d:	5e                   	pop    esi
c001c91e:	5f                   	pop    edi
c001c91f:	5d                   	pop    ebp
c001c920:	c3                   	ret    
c001c921:	8d 76 00             	lea    esi,[esi+0x0]
c001c924:	89 f9                	mov    ecx,edi
c001c926:	85 ff                	test   edi,edi
c001c928:	75 0b                	jne    c001c935 <__udivdi3+0x45>
c001c92a:	b8 01 00 00 00       	mov    eax,0x1
c001c92f:	31 d2                	xor    edx,edx
c001c931:	f7 f7                	div    edi
c001c933:	89 c1                	mov    ecx,eax
c001c935:	31 d2                	xor    edx,edx
c001c937:	89 f0                	mov    eax,esi
c001c939:	f7 f1                	div    ecx
c001c93b:	89 c3                	mov    ebx,eax
c001c93d:	89 e8                	mov    eax,ebp
c001c93f:	f7 f1                	div    ecx
c001c941:	89 da                	mov    edx,ebx
c001c943:	83 c4 1c             	add    esp,0x1c
c001c946:	5b                   	pop    ebx
c001c947:	5e                   	pop    esi
c001c948:	5f                   	pop    edi
c001c949:	5d                   	pop    ebp
c001c94a:	c3                   	ret    
c001c94b:	90                   	nop
c001c94c:	39 f2                	cmp    edx,esi
c001c94e:	77 1c                	ja     c001c96c <__udivdi3+0x7c>
c001c950:	0f bd da             	bsr    ebx,edx
c001c953:	83 f3 1f             	xor    ebx,0x1f
c001c956:	75 24                	jne    c001c97c <__udivdi3+0x8c>
c001c958:	39 f2                	cmp    edx,esi
c001c95a:	72 08                	jb     c001c964 <__udivdi3+0x74>
c001c95c:	39 ef                	cmp    edi,ebp
c001c95e:	0f 87 84 00 00 00    	ja     c001c9e8 <__udivdi3+0xf8>
c001c964:	b8 01 00 00 00       	mov    eax,0x1
c001c969:	eb ac                	jmp    c001c917 <__udivdi3+0x27>
c001c96b:	90                   	nop
c001c96c:	31 db                	xor    ebx,ebx
c001c96e:	31 c0                	xor    eax,eax
c001c970:	89 da                	mov    edx,ebx
c001c972:	83 c4 1c             	add    esp,0x1c
c001c975:	5b                   	pop    ebx
c001c976:	5e                   	pop    esi
c001c977:	5f                   	pop    edi
c001c978:	5d                   	pop    ebp
c001c979:	c3                   	ret    
c001c97a:	66 90                	xchg   ax,ax
c001c97c:	b8 20 00 00 00       	mov    eax,0x20
c001c981:	29 d8                	sub    eax,ebx
c001c983:	88 d9                	mov    cl,bl
c001c985:	d3 e2                	shl    edx,cl
c001c987:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c98b:	89 fa                	mov    edx,edi
c001c98d:	88 c1                	mov    cl,al
c001c98f:	d3 ea                	shr    edx,cl
c001c991:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c995:	09 d1                	or     ecx,edx
c001c997:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c99b:	88 d9                	mov    cl,bl
c001c99d:	d3 e7                	shl    edi,cl
c001c99f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c9a3:	89 f7                	mov    edi,esi
c001c9a5:	88 c1                	mov    cl,al
c001c9a7:	d3 ef                	shr    edi,cl
c001c9a9:	88 d9                	mov    cl,bl
c001c9ab:	d3 e6                	shl    esi,cl
c001c9ad:	89 ea                	mov    edx,ebp
c001c9af:	88 c1                	mov    cl,al
c001c9b1:	d3 ea                	shr    edx,cl
c001c9b3:	09 d6                	or     esi,edx
c001c9b5:	89 f0                	mov    eax,esi
c001c9b7:	89 fa                	mov    edx,edi
c001c9b9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c9bd:	89 d7                	mov    edi,edx
c001c9bf:	89 c6                	mov    esi,eax
c001c9c1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c9c5:	39 d7                	cmp    edi,edx
c001c9c7:	72 13                	jb     c001c9dc <__udivdi3+0xec>
c001c9c9:	74 09                	je     c001c9d4 <__udivdi3+0xe4>
c001c9cb:	89 f0                	mov    eax,esi
c001c9cd:	31 db                	xor    ebx,ebx
c001c9cf:	e9 43 ff ff ff       	jmp    c001c917 <__udivdi3+0x27>
c001c9d4:	88 d9                	mov    cl,bl
c001c9d6:	d3 e5                	shl    ebp,cl
c001c9d8:	39 c5                	cmp    ebp,eax
c001c9da:	73 ef                	jae    c001c9cb <__udivdi3+0xdb>
c001c9dc:	8d 46 ff             	lea    eax,[esi-0x1]
c001c9df:	31 db                	xor    ebx,ebx
c001c9e1:	e9 31 ff ff ff       	jmp    c001c917 <__udivdi3+0x27>
c001c9e6:	66 90                	xchg   ax,ax
c001c9e8:	31 c0                	xor    eax,eax
c001c9ea:	e9 28 ff ff ff       	jmp    c001c917 <__udivdi3+0x27>
c001c9ef:	90                   	nop

c001c9f0 <__umoddi3>:
c001c9f0:	55                   	push   ebp
c001c9f1:	57                   	push   edi
c001c9f2:	56                   	push   esi
c001c9f3:	53                   	push   ebx
c001c9f4:	83 ec 1c             	sub    esp,0x1c
c001c9f7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c9fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c9ff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001ca03:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ca07:	89 da                	mov    edx,ebx
c001ca09:	85 c0                	test   eax,eax
c001ca0b:	75 37                	jne    c001ca44 <__umoddi3+0x54>
c001ca0d:	39 df                	cmp    edi,ebx
c001ca0f:	76 13                	jbe    c001ca24 <__umoddi3+0x34>
c001ca11:	89 f0                	mov    eax,esi
c001ca13:	f7 f7                	div    edi
c001ca15:	89 d0                	mov    eax,edx
c001ca17:	31 d2                	xor    edx,edx
c001ca19:	83 c4 1c             	add    esp,0x1c
c001ca1c:	5b                   	pop    ebx
c001ca1d:	5e                   	pop    esi
c001ca1e:	5f                   	pop    edi
c001ca1f:	5d                   	pop    ebp
c001ca20:	c3                   	ret    
c001ca21:	8d 76 00             	lea    esi,[esi+0x0]
c001ca24:	89 fd                	mov    ebp,edi
c001ca26:	85 ff                	test   edi,edi
c001ca28:	75 0b                	jne    c001ca35 <__umoddi3+0x45>
c001ca2a:	b8 01 00 00 00       	mov    eax,0x1
c001ca2f:	31 d2                	xor    edx,edx
c001ca31:	f7 f7                	div    edi
c001ca33:	89 c5                	mov    ebp,eax
c001ca35:	89 d8                	mov    eax,ebx
c001ca37:	31 d2                	xor    edx,edx
c001ca39:	f7 f5                	div    ebp
c001ca3b:	89 f0                	mov    eax,esi
c001ca3d:	f7 f5                	div    ebp
c001ca3f:	89 d0                	mov    eax,edx
c001ca41:	eb d4                	jmp    c001ca17 <__umoddi3+0x27>
c001ca43:	90                   	nop
c001ca44:	89 f1                	mov    ecx,esi
c001ca46:	39 d8                	cmp    eax,ebx
c001ca48:	76 0a                	jbe    c001ca54 <__umoddi3+0x64>
c001ca4a:	89 f0                	mov    eax,esi
c001ca4c:	83 c4 1c             	add    esp,0x1c
c001ca4f:	5b                   	pop    ebx
c001ca50:	5e                   	pop    esi
c001ca51:	5f                   	pop    edi
c001ca52:	5d                   	pop    ebp
c001ca53:	c3                   	ret    
c001ca54:	0f bd e8             	bsr    ebp,eax
c001ca57:	83 f5 1f             	xor    ebp,0x1f
c001ca5a:	75 1c                	jne    c001ca78 <__umoddi3+0x88>
c001ca5c:	39 d8                	cmp    eax,ebx
c001ca5e:	72 04                	jb     c001ca64 <__umoddi3+0x74>
c001ca60:	39 f7                	cmp    edi,esi
c001ca62:	77 08                	ja     c001ca6c <__umoddi3+0x7c>
c001ca64:	89 da                	mov    edx,ebx
c001ca66:	29 fe                	sub    esi,edi
c001ca68:	19 c2                	sbb    edx,eax
c001ca6a:	89 f1                	mov    ecx,esi
c001ca6c:	89 c8                	mov    eax,ecx
c001ca6e:	83 c4 1c             	add    esp,0x1c
c001ca71:	5b                   	pop    ebx
c001ca72:	5e                   	pop    esi
c001ca73:	5f                   	pop    edi
c001ca74:	5d                   	pop    ebp
c001ca75:	c3                   	ret    
c001ca76:	66 90                	xchg   ax,ax
c001ca78:	ba 20 00 00 00       	mov    edx,0x20
c001ca7d:	29 ea                	sub    edx,ebp
c001ca7f:	89 e9                	mov    ecx,ebp
c001ca81:	d3 e0                	shl    eax,cl
c001ca83:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ca87:	89 f8                	mov    eax,edi
c001ca89:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ca8d:	88 d1                	mov    cl,dl
c001ca8f:	d3 e8                	shr    eax,cl
c001ca91:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ca95:	09 c1                	or     ecx,eax
c001ca97:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ca9b:	89 e9                	mov    ecx,ebp
c001ca9d:	d3 e7                	shl    edi,cl
c001ca9f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001caa3:	89 d8                	mov    eax,ebx
c001caa5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001caa9:	88 d1                	mov    cl,dl
c001caab:	d3 e8                	shr    eax,cl
c001caad:	89 c7                	mov    edi,eax
c001caaf:	89 e9                	mov    ecx,ebp
c001cab1:	d3 e3                	shl    ebx,cl
c001cab3:	89 f0                	mov    eax,esi
c001cab5:	88 d1                	mov    cl,dl
c001cab7:	d3 e8                	shr    eax,cl
c001cab9:	09 d8                	or     eax,ebx
c001cabb:	89 e9                	mov    ecx,ebp
c001cabd:	d3 e6                	shl    esi,cl
c001cabf:	89 f3                	mov    ebx,esi
c001cac1:	89 fa                	mov    edx,edi
c001cac3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001cac7:	89 d1                	mov    ecx,edx
c001cac9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001cacd:	89 c6                	mov    esi,eax
c001cacf:	89 d7                	mov    edi,edx
c001cad1:	39 d1                	cmp    ecx,edx
c001cad3:	72 27                	jb     c001cafc <__umoddi3+0x10c>
c001cad5:	74 21                	je     c001caf8 <__umoddi3+0x108>
c001cad7:	89 ca                	mov    edx,ecx
c001cad9:	29 f3                	sub    ebx,esi
c001cadb:	19 fa                	sbb    edx,edi
c001cadd:	89 d0                	mov    eax,edx
c001cadf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001cae3:	d3 e0                	shl    eax,cl
c001cae5:	89 e9                	mov    ecx,ebp
c001cae7:	d3 eb                	shr    ebx,cl
c001cae9:	09 d8                	or     eax,ebx
c001caeb:	d3 ea                	shr    edx,cl
c001caed:	83 c4 1c             	add    esp,0x1c
c001caf0:	5b                   	pop    ebx
c001caf1:	5e                   	pop    esi
c001caf2:	5f                   	pop    edi
c001caf3:	5d                   	pop    ebp
c001caf4:	c3                   	ret    
c001caf5:	8d 76 00             	lea    esi,[esi+0x0]
c001caf8:	39 c3                	cmp    ebx,eax
c001cafa:	73 db                	jae    c001cad7 <__umoddi3+0xe7>
c001cafc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001cb00:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001cb04:	89 d7                	mov    edi,edx
c001cb06:	89 c6                	mov    esi,eax
c001cb08:	eb cd                	jmp    c001cad7 <__umoddi3+0xe7>

Disassembly of section .init:

c001cb0a <_init>:
c001cb0a:	55                   	push   ebp
c001cb0b:	89 e5                	mov    ebp,esp
c001cb0d:	e8 06 36 fe ff       	call   c0000118 <frame_dummy>
c001cb12:	e8 e5 fa ff ff       	call   c001c5fc <__do_global_ctors_aux>
c001cb17:	5d                   	pop    ebp
c001cb18:	c3                   	ret    

Disassembly of section .fini:

c001cb19 <_fini>:
c001cb19:	55                   	push   ebp
c001cb1a:	89 e5                	mov    ebp,esp
c001cb1c:	e8 87 35 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001cb21:	5d                   	pop    ebp
c001cb22:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001cb24 <Computer::~Computer()>:
c001cb24:	83 ec 0c             	sub    esp,0xc
c001cb27:	ba 30 de 01 c0       	mov    edx,0xc001de30
c001cb2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb30:	89 10                	mov    DWORD PTR [eax],edx
c001cb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb36:	83 ec 0c             	sub    esp,0xc
c001cb39:	50                   	push   eax
c001cb3a:	e8 ed e2 fe ff       	call   c000ae2c <Device::~Device()>
c001cb3f:	83 c4 10             	add    esp,0x10
c001cb42:	90                   	nop
c001cb43:	83 c4 0c             	add    esp,0xc
c001cb46:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001cb48 <Computer::~Computer()>:
c001cb48:	83 ec 0c             	sub    esp,0xc
c001cb4b:	83 ec 0c             	sub    esp,0xc
c001cb4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb52:	e8 cd ff ff ff       	call   c001cb24 <Computer::~Computer()>
c001cb57:	83 c4 10             	add    esp,0x10
c001cb5a:	83 ec 08             	sub    esp,0x8
c001cb5d:	68 ec 01 00 00       	push   0x1ec
c001cb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb66:	e8 bb ce fe ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c001cb6b:	83 c4 10             	add    esp,0x10
c001cb6e:	83 c4 0c             	add    esp,0xc
c001cb71:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001cb72 <idleCommon()>:
c001cb72:	83 ec 0c             	sub    esp,0xc
c001cb75:	fa                   	cli    
c001cb76:	ff 05 88 3c 02 c0    	inc    DWORD PTR ds:0xc0023c88
c001cb7c:	e8 df 60 ff ff       	call   c0012c60 <schedule()>
c001cb81:	a1 88 3c 02 c0       	mov    eax,ds:0xc0023c88
c001cb86:	48                   	dec    eax
c001cb87:	a3 88 3c 02 c0       	mov    ds:0xc0023c88,eax
c001cb8c:	75 01                	jne    c001cb8f <idleCommon()+0x1d>
c001cb8e:	fb                   	sti    
c001cb8f:	83 c4 0c             	add    esp,0xc
c001cb92:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001cb94 <LinkedList<UnixFile>::~LinkedList()>:
c001cb94:	90                   	nop
c001cb95:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001cb96 <LinkedList<UnixFile>::LinkedList()>:
c001cb96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb9a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cba4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cbab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbaf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cbb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cbc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbc4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cbcb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbcf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cbd6:	90                   	nop
c001cbd7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001cbd8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001cbd8:	83 ec 0c             	sub    esp,0xc
c001cbdb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001cbe0:	75 10                	jne    c001cbf2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001cbe2:	83 ec 0c             	sub    esp,0xc
c001cbe5:	68 84 e0 01 c0       	push   0xc001e084
c001cbea:	e8 ee 2b ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c001cbef:	83 c4 10             	add    esp,0x10
c001cbf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbf6:	8b 00                	mov    eax,DWORD PTR [eax]
c001cbf8:	85 c0                	test   eax,eax
c001cbfa:	74 34                	je     c001cc30 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001cbfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cc03:	85 c0                	test   eax,eax
c001cc05:	74 29                	je     c001cc30 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001cc07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc0b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cc0e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cc12:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cc15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc19:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cc1d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cc20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cc27:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cc2e:	eb 65                	jmp    c001cc95 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001cc30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc34:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc36:	85 c0                	test   eax,eax
c001cc38:	75 4b                	jne    c001cc85 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001cc3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cc41:	85 c0                	test   eax,eax
c001cc43:	75 40                	jne    c001cc85 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001cc45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cc4d:	89 10                	mov    DWORD PTR [eax],edx
c001cc4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc53:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cc57:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cc5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cc61:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cc68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc6c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cc6f:	85 c0                	test   eax,eax
c001cc71:	74 22                	je     c001cc95 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001cc73:	83 ec 0c             	sub    esp,0xc
c001cc76:	68 a6 e0 01 c0       	push   0xc001e0a6
c001cc7b:	e8 5d 2b ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c001cc80:	83 c4 10             	add    esp,0x10
c001cc83:	eb 10                	jmp    c001cc95 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001cc85:	83 ec 0c             	sub    esp,0xc
c001cc88:	68 b0 e0 01 c0       	push   0xc001e0b0
c001cc8d:	e8 4b 2b ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c001cc92:	83 c4 10             	add    esp,0x10
c001cc95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc99:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cc9c:	8d 50 01             	lea    edx,[eax+0x1]
c001cc9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cca3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cca6:	90                   	nop
c001cca7:	83 c4 0c             	add    esp,0xc
c001ccaa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001ccac <LinkedList<UnixFile>::getFirstElement()>:
c001ccac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ccb0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ccb2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001ccb4 <LinkedList<UnixFile>::removeFirst()>:
c001ccb4:	83 ec 0c             	sub    esp,0xc
c001ccb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccbb:	8b 00                	mov    eax,DWORD PTR [eax]
c001ccbd:	85 c0                	test   eax,eax
c001ccbf:	75 12                	jne    c001ccd3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ccc1:	83 ec 0c             	sub    esp,0xc
c001ccc4:	68 bc e0 01 c0       	push   0xc001e0bc
c001ccc9:	e8 0f 2b ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c001ccce:	83 c4 10             	add    esp,0x10
c001ccd1:	eb 7e                	jmp    c001cd51 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ccd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccd7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ccda:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ccdd:	85 c0                	test   eax,eax
c001ccdf:	74 10                	je     c001ccf1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001cce1:	83 ec 0c             	sub    esp,0xc
c001cce4:	68 07 e1 01 c0       	push   0xc001e107
c001cce9:	e8 ef 2a ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c001ccee:	83 c4 10             	add    esp,0x10
c001ccf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccf5:	8b 00                	mov    eax,DWORD PTR [eax]
c001ccf7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ccfa:	85 c0                	test   eax,eax
c001ccfc:	75 33                	jne    c001cd31 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ccfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd02:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cd08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cd13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd17:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cd1a:	83 f8 01             	cmp    eax,0x1
c001cd1d:	74 21                	je     c001cd40 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001cd1f:	83 ec 0c             	sub    esp,0xc
c001cd22:	68 e0 e0 01 c0       	push   0xc001e0e0
c001cd27:	e8 b1 2a ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c001cd2c:	83 c4 10             	add    esp,0x10
c001cd2f:	eb 0f                	jmp    c001cd40 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001cd31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd35:	8b 00                	mov    eax,DWORD PTR [eax]
c001cd37:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001cd3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd3e:	89 10                	mov    DWORD PTR [eax],edx
c001cd40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cd47:	8d 50 ff             	lea    edx,[eax-0x1]
c001cd4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd4e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cd51:	83 c4 0c             	add    esp,0xc
c001cd54:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001cd56 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001cd56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd5a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cd5d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001cd5e <DriverlessDevice::~DriverlessDevice()>:
c001cd5e:	ba 5c e7 01 c0       	mov    edx,0xc001e75c
c001cd63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd67:	89 10                	mov    DWORD PTR [eax],edx
c001cd69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd6d:	50                   	push   eax
c001cd6e:	e8 b9 e0 fe ff       	call   c000ae2c <Device::~Device()>
c001cd73:	83 c4 04             	add    esp,0x4
c001cd76:	90                   	nop
c001cd77:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001cd78 <DriverlessDevice::~DriverlessDevice()>:
c001cd78:	83 ec 0c             	sub    esp,0xc
c001cd7b:	83 ec 0c             	sub    esp,0xc
c001cd7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd82:	e8 d7 ff ff ff       	call   c001cd5e <DriverlessDevice::~DriverlessDevice()>
c001cd87:	83 c4 10             	add    esp,0x10
c001cd8a:	83 ec 08             	sub    esp,0x8
c001cd8d:	68 58 01 00 00       	push   0x158
c001cd92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd96:	e8 8b cc fe ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c001cd9b:	83 c4 10             	add    esp,0x10
c001cd9e:	83 c4 0c             	add    esp,0xc
c001cda1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001cda2 <LinkedList<Device>::addElement(Device*)>:
c001cda2:	83 ec 0c             	sub    esp,0xc
c001cda5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001cdaa:	75 10                	jne    c001cdbc <LinkedList<Device>::addElement(Device*)+0x1a>
c001cdac:	83 ec 0c             	sub    esp,0xc
c001cdaf:	68 84 e0 01 c0       	push   0xc001e084
c001cdb4:	e8 24 2a ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c001cdb9:	83 c4 10             	add    esp,0x10
c001cdbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001cdc2:	85 c0                	test   eax,eax
c001cdc4:	74 3a                	je     c001ce00 <LinkedList<Device>::addElement(Device*)+0x5e>
c001cdc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cdcd:	85 c0                	test   eax,eax
c001cdcf:	74 2f                	je     c001ce00 <LinkedList<Device>::addElement(Device*)+0x5e>
c001cdd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdd5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cdd8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cddc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001cde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cde6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cdea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdf1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cdf4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001cdfe:	eb 68                	jmp    c001ce68 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ce00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce04:	8b 00                	mov    eax,DWORD PTR [eax]
c001ce06:	85 c0                	test   eax,eax
c001ce08:	75 4e                	jne    c001ce58 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ce0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ce11:	85 c0                	test   eax,eax
c001ce13:	75 43                	jne    c001ce58 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ce15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce19:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce1d:	89 10                	mov    DWORD PTR [eax],edx
c001ce1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ce2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ce31:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ce3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce3f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ce42:	85 c0                	test   eax,eax
c001ce44:	74 22                	je     c001ce68 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ce46:	83 ec 0c             	sub    esp,0xc
c001ce49:	68 a6 e0 01 c0       	push   0xc001e0a6
c001ce4e:	e8 8a 29 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c001ce53:	83 c4 10             	add    esp,0x10
c001ce56:	eb 10                	jmp    c001ce68 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ce58:	83 ec 0c             	sub    esp,0xc
c001ce5b:	68 b0 e0 01 c0       	push   0xc001e0b0
c001ce60:	e8 78 29 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c001ce65:	83 c4 10             	add    esp,0x10
c001ce68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce6c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ce6f:	8d 50 01             	lea    edx,[eax+0x1]
c001ce72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce76:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ce79:	90                   	nop
c001ce7a:	83 c4 0c             	add    esp,0xc
c001ce7d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ce7e <LinkedList<Device>::LinkedList()>:
c001ce7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce82:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ce88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ce93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce97:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ce9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cea2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cea8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ceac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ceb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ceb7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cebe:	90                   	nop
c001cebf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001cec0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001cec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cec4:	8b 00                	mov    eax,DWORD PTR [eax]
c001cec6:	85 c0                	test   eax,eax
c001cec8:	75 0e                	jne    c001ced8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ceca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cece:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ced1:	85 c0                	test   eax,eax
c001ced3:	75 03                	jne    c001ced8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ced5:	b0 01                	mov    al,0x1
c001ced7:	c3                   	ret    
c001ced8:	b0 00                	mov    al,0x0
c001ceda:	90                   	nop
c001cedb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001cedc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001cedc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cee0:	8b 00                	mov    eax,DWORD PTR [eax]
c001cee2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001cee4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001cee4:	83 ec 0c             	sub    esp,0xc
c001cee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceeb:	8b 00                	mov    eax,DWORD PTR [eax]
c001ceed:	85 c0                	test   eax,eax
c001ceef:	75 17                	jne    c001cf08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001cef1:	83 ec 0c             	sub    esp,0xc
c001cef4:	68 bc e0 01 c0       	push   0xc001e0bc
c001cef9:	e8 df 28 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c001cefe:	83 c4 10             	add    esp,0x10
c001cf01:	e9 92 00 00 00       	jmp    c001cf98 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001cf06:	66 90                	xchg   ax,ax
c001cf08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cf0f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cf12:	85 c0                	test   eax,eax
c001cf14:	0f 95 c0             	setne  al
c001cf17:	84 c0                	test   al,al
c001cf19:	74 11                	je     c001cf2c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001cf1b:	83 ec 0c             	sub    esp,0xc
c001cf1e:	68 07 e1 01 c0       	push   0xc001e107
c001cf23:	e8 b5 28 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c001cf28:	83 c4 10             	add    esp,0x10
c001cf2b:	90                   	nop
c001cf2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf30:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf32:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cf35:	85 c0                	test   eax,eax
c001cf37:	0f 94 c0             	sete   al
c001cf3a:	84 c0                	test   al,al
c001cf3c:	74 36                	je     c001cf74 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001cf3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cf48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cf53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cf5a:	83 f8 01             	cmp    eax,0x1
c001cf5d:	74 25                	je     c001cf84 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001cf5f:	83 ec 0c             	sub    esp,0xc
c001cf62:	68 e0 e0 01 c0       	push   0xc001e0e0
c001cf67:	e8 71 28 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c001cf6c:	83 c4 10             	add    esp,0x10
c001cf6f:	eb 13                	jmp    c001cf84 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001cf71:	8d 76 00             	lea    esi,[esi+0x0]
c001cf74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf78:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf7a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001cf7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf81:	89 10                	mov    DWORD PTR [eax],edx
c001cf83:	90                   	nop
c001cf84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf88:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cf8b:	8d 50 ff             	lea    edx,[eax-0x1]
c001cf8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf92:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cf95:	8d 76 00             	lea    esi,[esi+0x0]
c001cf98:	83 c4 0c             	add    esp,0xc
c001cf9b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001cf9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001cf9c:	83 ec 0c             	sub    esp,0xc
c001cf9f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001cfa4:	75 12                	jne    c001cfb8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001cfa6:	83 ec 0c             	sub    esp,0xc
c001cfa9:	68 84 e0 01 c0       	push   0xc001e084
c001cfae:	e8 2a 28 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c001cfb3:	83 c4 10             	add    esp,0x10
c001cfb6:	66 90                	xchg   ax,ax
c001cfb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfbc:	8b 00                	mov    eax,DWORD PTR [eax]
c001cfbe:	85 c0                	test   eax,eax
c001cfc0:	74 36                	je     c001cff8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001cfc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cfc9:	85 c0                	test   eax,eax
c001cfcb:	74 2b                	je     c001cff8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001cfcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cfd4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cfd8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001cfdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfdf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cfe3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cfe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cfed:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cff4:	eb 6a                	jmp    c001d060 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001cff6:	66 90                	xchg   ax,ax
c001cff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cffc:	8b 00                	mov    eax,DWORD PTR [eax]
c001cffe:	85 c0                	test   eax,eax
c001d000:	75 4e                	jne    c001d050 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001d002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d006:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d009:	85 c0                	test   eax,eax
c001d00b:	75 43                	jne    c001d050 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001d00d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d011:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d015:	89 10                	mov    DWORD PTR [eax],edx
c001d017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d01b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d01f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d026:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d029:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001d030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d034:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d037:	85 c0                	test   eax,eax
c001d039:	74 25                	je     c001d060 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001d03b:	83 ec 0c             	sub    esp,0xc
c001d03e:	68 a6 e0 01 c0       	push   0xc001e0a6
c001d043:	e8 95 27 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c001d048:	83 c4 10             	add    esp,0x10
c001d04b:	eb 13                	jmp    c001d060 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001d04d:	8d 76 00             	lea    esi,[esi+0x0]
c001d050:	83 ec 0c             	sub    esp,0xc
c001d053:	68 b0 e0 01 c0       	push   0xc001e0b0
c001d058:	e8 80 27 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c001d05d:	83 c4 10             	add    esp,0x10
c001d060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d064:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d067:	8d 50 01             	lea    edx,[eax+0x1]
c001d06a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d06e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d071:	90                   	nop
c001d072:	83 c4 0c             	add    esp,0xc
c001d075:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001d078 <ACPI::~ACPI()>:
c001d078:	83 ec 0c             	sub    esp,0xc
c001d07b:	ba c4 ec 01 c0       	mov    edx,0xc001ecc4
c001d080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d084:	89 10                	mov    DWORD PTR [eax],edx
c001d086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d08a:	83 ec 0c             	sub    esp,0xc
c001d08d:	50                   	push   eax
c001d08e:	e8 99 dd fe ff       	call   c000ae2c <Device::~Device()>
c001d093:	83 c4 10             	add    esp,0x10
c001d096:	90                   	nop
c001d097:	83 c4 0c             	add    esp,0xc
c001d09a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001d09c <ACPI::~ACPI()>:
c001d09c:	83 ec 0c             	sub    esp,0xc
c001d09f:	83 ec 0c             	sub    esp,0xc
c001d0a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0a6:	e8 cd ff ff ff       	call   c001d078 <ACPI::~ACPI()>
c001d0ab:	83 c4 10             	add    esp,0x10
c001d0ae:	83 ec 08             	sub    esp,0x8
c001d0b1:	68 64 12 00 00       	push   0x1264
c001d0b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0ba:	e8 67 c9 fe ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c001d0bf:	83 c4 10             	add    esp,0x10
c001d0c2:	83 c4 0c             	add    esp,0xc
c001d0c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001d0c8 <LinkedList<Device>::~LinkedList()>:
c001d0c8:	90                   	nop
c001d0c9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001d0cc <LinkedList<Device>::isEmpty()>:
c001d0cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001d0d2:	85 c0                	test   eax,eax
c001d0d4:	75 0e                	jne    c001d0e4 <LinkedList<Device>::isEmpty()+0x18>
c001d0d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d0dd:	85 c0                	test   eax,eax
c001d0df:	75 03                	jne    c001d0e4 <LinkedList<Device>::isEmpty()+0x18>
c001d0e1:	b0 01                	mov    al,0x1
c001d0e3:	c3                   	ret    
c001d0e4:	b0 00                	mov    al,0x0
c001d0e6:	90                   	nop
c001d0e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001d0e8 <LinkedList<Device>::getFirstElement()>:
c001d0e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001d0ee:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001d0f0 <LinkedList<Device>::removeFirst()>:
c001d0f0:	83 ec 0c             	sub    esp,0xc
c001d0f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0f7:	8b 00                	mov    eax,DWORD PTR [eax]
c001d0f9:	85 c0                	test   eax,eax
c001d0fb:	75 17                	jne    c001d114 <LinkedList<Device>::removeFirst()+0x24>
c001d0fd:	83 ec 0c             	sub    esp,0xc
c001d100:	68 bc e0 01 c0       	push   0xc001e0bc
c001d105:	e8 d3 26 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c001d10a:	83 c4 10             	add    esp,0x10
c001d10d:	e9 92 00 00 00       	jmp    c001d1a4 <LinkedList<Device>::removeFirst()+0xb4>
c001d112:	66 90                	xchg   ax,ax
c001d114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d118:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d11b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001d121:	85 c0                	test   eax,eax
c001d123:	74 13                	je     c001d138 <LinkedList<Device>::removeFirst()+0x48>
c001d125:	83 ec 0c             	sub    esp,0xc
c001d128:	68 07 e1 01 c0       	push   0xc001e107
c001d12d:	e8 ab 26 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c001d132:	83 c4 10             	add    esp,0x10
c001d135:	8d 76 00             	lea    esi,[esi+0x0]
c001d138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d13c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d13e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001d144:	85 c0                	test   eax,eax
c001d146:	75 34                	jne    c001d17c <LinkedList<Device>::removeFirst()+0x8c>
c001d148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d14c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001d152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d156:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d15d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d161:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d164:	83 f8 01             	cmp    eax,0x1
c001d167:	74 27                	je     c001d190 <LinkedList<Device>::removeFirst()+0xa0>
c001d169:	83 ec 0c             	sub    esp,0xc
c001d16c:	68 e0 e0 01 c0       	push   0xc001e0e0
c001d171:	e8 67 26 ff ff       	call   c000f7dd <Krnl::panic(char const*)>
c001d176:	83 c4 10             	add    esp,0x10
c001d179:	eb 15                	jmp    c001d190 <LinkedList<Device>::removeFirst()+0xa0>
c001d17b:	90                   	nop
c001d17c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d180:	8b 00                	mov    eax,DWORD PTR [eax]
c001d182:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001d188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d18c:	89 10                	mov    DWORD PTR [eax],edx
c001d18e:	66 90                	xchg   ax,ax
c001d190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d194:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d197:	8d 50 ff             	lea    edx,[eax-0x1]
c001d19a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d19e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d1a1:	8d 76 00             	lea    esi,[esi+0x0]
c001d1a4:	83 c4 0c             	add    esp,0xc
c001d1a7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001d1a8 <CPU::~CPU()>:
c001d1a8:	83 ec 0c             	sub    esp,0xc
c001d1ab:	ba 60 ee 01 c0       	mov    edx,0xc001ee60
c001d1b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1b4:	89 10                	mov    DWORD PTR [eax],edx
c001d1b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1ba:	83 ec 0c             	sub    esp,0xc
c001d1bd:	50                   	push   eax
c001d1be:	e8 69 dc fe ff       	call   c000ae2c <Device::~Device()>
c001d1c3:	83 c4 10             	add    esp,0x10
c001d1c6:	90                   	nop
c001d1c7:	83 c4 0c             	add    esp,0xc
c001d1ca:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001d1cc <CPU::~CPU()>:
c001d1cc:	83 ec 0c             	sub    esp,0xc
c001d1cf:	83 ec 0c             	sub    esp,0xc
c001d1d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1d6:	e8 cd ff ff ff       	call   c001d1a8 <CPU::~CPU()>
c001d1db:	83 c4 10             	add    esp,0x10
c001d1de:	83 ec 08             	sub    esp,0x8
c001d1e1:	68 94 11 00 00       	push   0x1194
c001d1e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1ea:	e8 37 c8 fe ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c001d1ef:	83 c4 10             	add    esp,0x10
c001d1f2:	83 c4 0c             	add    esp,0xc
c001d1f5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001d1f8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001d1f8:	90                   	nop
c001d1f9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001d1fc <ThreadControlBlock::ThreadControlBlock()>:
c001d1fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d200:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001d207:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d20b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001d212:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d216:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001d21d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d221:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001d228:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d22c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001d233:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d237:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001d23b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d23f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001d243:	90                   	nop
c001d244:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001d248 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001d248:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d24c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001d252:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d256:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d25d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d261:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d268:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d26c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001d272:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d276:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d27d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d281:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d288:	90                   	nop
c001d289:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001d28c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001d28c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d290:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001d293:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c001d294 <Vm::_FPUState::_FPUState()>:
c001d294:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d298:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c001d29f:	90                   	nop
c001d2a0:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001d2a2 <PCI::~PCI()>:
c001d2a2:	83 ec 0c             	sub    esp,0xc
c001d2a5:	ba bc fa 01 c0       	mov    edx,0xc001fabc
c001d2aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2ae:	89 10                	mov    DWORD PTR [eax],edx
c001d2b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2b4:	83 ec 0c             	sub    esp,0xc
c001d2b7:	50                   	push   eax
c001d2b8:	e8 ff d5 fe ff       	call   c000a8bc <Bus::~Bus()>
c001d2bd:	83 c4 10             	add    esp,0x10
c001d2c0:	90                   	nop
c001d2c1:	83 c4 0c             	add    esp,0xc
c001d2c4:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001d2c6 <PCI::~PCI()>:
c001d2c6:	83 ec 0c             	sub    esp,0xc
c001d2c9:	83 ec 0c             	sub    esp,0xc
c001d2cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2d0:	e8 cd ff ff ff       	call   c001d2a2 <PCI::~PCI()>
c001d2d5:	83 c4 10             	add    esp,0x10
c001d2d8:	83 ec 08             	sub    esp,0x8
c001d2db:	68 5c 01 00 00       	push   0x15c
c001d2e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2e4:	e8 3d c7 fe ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c001d2e9:	83 c4 10             	add    esp,0x10
c001d2ec:	83 c4 0c             	add    esp,0xc
c001d2ef:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001d2f0 <IDE::~IDE()>:
c001d2f0:	83 ec 0c             	sub    esp,0xc
c001d2f3:	ba 70 fb 01 c0       	mov    edx,0xc001fb70
c001d2f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2fc:	89 10                	mov    DWORD PTR [eax],edx
c001d2fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d302:	83 ec 0c             	sub    esp,0xc
c001d305:	50                   	push   eax
c001d306:	e8 99 df fe ff       	call   c000b2a4 <HardDiskController::~HardDiskController()>
c001d30b:	83 c4 10             	add    esp,0x10
c001d30e:	90                   	nop
c001d30f:	83 c4 0c             	add    esp,0xc
c001d312:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001d314 <IDE::~IDE()>:
c001d314:	83 ec 0c             	sub    esp,0xc
c001d317:	83 ec 0c             	sub    esp,0xc
c001d31a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d31e:	e8 cd ff ff ff       	call   c001d2f0 <IDE::~IDE()>
c001d323:	83 c4 10             	add    esp,0x10
c001d326:	83 ec 08             	sub    esp,0x8
c001d329:	68 70 02 00 00       	push   0x270
c001d32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d332:	e8 ef c6 fe ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c001d337:	83 c4 10             	add    esp,0x10
c001d33a:	83 c4 0c             	add    esp,0xc
c001d33d:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001d33e <SATABus::~SATABus()>:
c001d33e:	83 ec 0c             	sub    esp,0xc
c001d341:	ba c0 fb 01 c0       	mov    edx,0xc001fbc0
c001d346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d34a:	89 10                	mov    DWORD PTR [eax],edx
c001d34c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d350:	83 ec 0c             	sub    esp,0xc
c001d353:	50                   	push   eax
c001d354:	e8 4b df fe ff       	call   c000b2a4 <HardDiskController::~HardDiskController()>
c001d359:	83 c4 10             	add    esp,0x10
c001d35c:	90                   	nop
c001d35d:	83 c4 0c             	add    esp,0xc
c001d360:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001d362 <SATABus::~SATABus()>:
c001d362:	83 ec 0c             	sub    esp,0xc
c001d365:	83 ec 0c             	sub    esp,0xc
c001d368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d36c:	e8 cd ff ff ff       	call   c001d33e <SATABus::~SATABus()>
c001d371:	83 c4 10             	add    esp,0x10
c001d374:	83 ec 08             	sub    esp,0x8
c001d377:	68 64 01 00 00       	push   0x164
c001d37c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d380:	e8 a1 c6 fe ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c001d385:	83 c4 10             	add    esp,0x10
c001d388:	83 c4 0c             	add    esp,0xc
c001d38b:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001d38c <ATA::~ATA()>:
c001d38c:	83 ec 0c             	sub    esp,0xc
c001d38f:	ba 00 fc 01 c0       	mov    edx,0xc001fc00
c001d394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d398:	89 10                	mov    DWORD PTR [eax],edx
c001d39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d39e:	83 ec 0c             	sub    esp,0xc
c001d3a1:	50                   	push   eax
c001d3a2:	e8 df df fe ff       	call   c000b386 <PhysicalDisk::~PhysicalDisk()>
c001d3a7:	83 c4 10             	add    esp,0x10
c001d3aa:	90                   	nop
c001d3ab:	83 c4 0c             	add    esp,0xc
c001d3ae:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001d3b0 <ATA::~ATA()>:
c001d3b0:	83 ec 0c             	sub    esp,0xc
c001d3b3:	83 ec 0c             	sub    esp,0xc
c001d3b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3ba:	e8 cd ff ff ff       	call   c001d38c <ATA::~ATA()>
c001d3bf:	83 c4 10             	add    esp,0x10
c001d3c2:	83 ec 08             	sub    esp,0x8
c001d3c5:	68 7c 01 00 00       	push   0x17c
c001d3ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3ce:	e8 53 c6 fe ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c001d3d3:	83 c4 10             	add    esp,0x10
c001d3d6:	83 c4 0c             	add    esp,0xc
c001d3d9:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001d3da <ATAPI::~ATAPI()>:
c001d3da:	83 ec 0c             	sub    esp,0xc
c001d3dd:	ba 48 fc 01 c0       	mov    edx,0xc001fc48
c001d3e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3e6:	89 10                	mov    DWORD PTR [eax],edx
c001d3e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3ec:	83 ec 0c             	sub    esp,0xc
c001d3ef:	50                   	push   eax
c001d3f0:	e8 91 df fe ff       	call   c000b386 <PhysicalDisk::~PhysicalDisk()>
c001d3f5:	83 c4 10             	add    esp,0x10
c001d3f8:	90                   	nop
c001d3f9:	83 c4 0c             	add    esp,0xc
c001d3fc:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001d3fe <ATAPI::~ATAPI()>:
c001d3fe:	83 ec 0c             	sub    esp,0xc
c001d401:	83 ec 0c             	sub    esp,0xc
c001d404:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d408:	e8 cd ff ff ff       	call   c001d3da <ATAPI::~ATAPI()>
c001d40d:	83 c4 10             	add    esp,0x10
c001d410:	83 ec 08             	sub    esp,0x8
c001d413:	68 84 01 00 00       	push   0x184
c001d418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d41c:	e8 05 c6 fe ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c001d421:	83 c4 10             	add    esp,0x10
c001d424:	83 c4 0c             	add    esp,0xc
c001d427:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001d428 <SATA::~SATA()>:
c001d428:	83 ec 0c             	sub    esp,0xc
c001d42b:	ba fc fc 01 c0       	mov    edx,0xc001fcfc
c001d430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d434:	89 10                	mov    DWORD PTR [eax],edx
c001d436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d43a:	83 ec 0c             	sub    esp,0xc
c001d43d:	50                   	push   eax
c001d43e:	e8 43 df fe ff       	call   c000b386 <PhysicalDisk::~PhysicalDisk()>
c001d443:	83 c4 10             	add    esp,0x10
c001d446:	90                   	nop
c001d447:	83 c4 0c             	add    esp,0xc
c001d44a:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001d44c <SATA::~SATA()>:
c001d44c:	83 ec 0c             	sub    esp,0xc
c001d44f:	83 ec 0c             	sub    esp,0xc
c001d452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d456:	e8 cd ff ff ff       	call   c001d428 <SATA::~SATA()>
c001d45b:	83 c4 10             	add    esp,0x10
c001d45e:	83 ec 08             	sub    esp,0x8
c001d461:	68 7c 01 00 00       	push   0x17c
c001d466:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d46a:	e8 b7 c5 fe ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c001d46f:	83 c4 10             	add    esp,0x10
c001d472:	83 c4 0c             	add    esp,0xc
c001d475:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001d476 <SATAPI::~SATAPI()>:
c001d476:	83 ec 0c             	sub    esp,0xc
c001d479:	ba 68 fe 01 c0       	mov    edx,0xc001fe68
c001d47e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d482:	89 10                	mov    DWORD PTR [eax],edx
c001d484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d488:	83 ec 0c             	sub    esp,0xc
c001d48b:	50                   	push   eax
c001d48c:	e8 f5 de fe ff       	call   c000b386 <PhysicalDisk::~PhysicalDisk()>
c001d491:	83 c4 10             	add    esp,0x10
c001d494:	90                   	nop
c001d495:	83 c4 0c             	add    esp,0xc
c001d498:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001d49a <SATAPI::~SATAPI()>:
c001d49a:	83 ec 0c             	sub    esp,0xc
c001d49d:	83 ec 0c             	sub    esp,0xc
c001d4a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4a4:	e8 cd ff ff ff       	call   c001d476 <SATAPI::~SATAPI()>
c001d4a9:	83 c4 10             	add    esp,0x10
c001d4ac:	83 ec 08             	sub    esp,0x8
c001d4af:	68 84 01 00 00       	push   0x184
c001d4b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4b8:	e8 69 c5 fe ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c001d4bd:	83 c4 10             	add    esp,0x10
c001d4c0:	83 c4 0c             	add    esp,0xc
c001d4c3:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001d4c4 <IOAPIC::~IOAPIC()>:
c001d4c4:	83 ec 0c             	sub    esp,0xc
c001d4c7:	ba a8 fe 01 c0       	mov    edx,0xc001fea8
c001d4cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4d0:	89 10                	mov    DWORD PTR [eax],edx
c001d4d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4d6:	83 ec 0c             	sub    esp,0xc
c001d4d9:	50                   	push   eax
c001d4da:	e8 4d d9 fe ff       	call   c000ae2c <Device::~Device()>
c001d4df:	83 c4 10             	add    esp,0x10
c001d4e2:	90                   	nop
c001d4e3:	83 c4 0c             	add    esp,0xc
c001d4e6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001d4e8 <IOAPIC::~IOAPIC()>:
c001d4e8:	83 ec 0c             	sub    esp,0xc
c001d4eb:	83 ec 0c             	sub    esp,0xc
c001d4ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4f2:	e8 cd ff ff ff       	call   c001d4c4 <IOAPIC::~IOAPIC()>
c001d4f7:	83 c4 10             	add    esp,0x10
c001d4fa:	83 ec 08             	sub    esp,0x8
c001d4fd:	68 68 01 00 00       	push   0x168
c001d502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d506:	e8 1b c5 fe ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c001d50b:	83 c4 10             	add    esp,0x10
c001d50e:	83 c4 0c             	add    esp,0xc
c001d511:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001d514 <APICTimer::~APICTimer()>:
c001d514:	83 ec 0c             	sub    esp,0xc
c001d517:	ba f0 fe 01 c0       	mov    edx,0xc001fef0
c001d51c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d520:	89 10                	mov    DWORD PTR [eax],edx
c001d522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d526:	83 ec 0c             	sub    esp,0xc
c001d529:	50                   	push   eax
c001d52a:	e8 d5 f1 fe ff       	call   c000c704 <Timer::~Timer()>
c001d52f:	83 c4 10             	add    esp,0x10
c001d532:	90                   	nop
c001d533:	83 c4 0c             	add    esp,0xc
c001d536:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001d538 <APICTimer::~APICTimer()>:
c001d538:	83 ec 0c             	sub    esp,0xc
c001d53b:	83 ec 0c             	sub    esp,0xc
c001d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d542:	e8 cd ff ff ff       	call   c001d514 <APICTimer::~APICTimer()>
c001d547:	83 c4 10             	add    esp,0x10
c001d54a:	83 ec 08             	sub    esp,0x8
c001d54d:	68 60 01 00 00       	push   0x160
c001d552:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d556:	e8 cb c4 fe ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c001d55b:	83 c4 10             	add    esp,0x10
c001d55e:	83 c4 0c             	add    esp,0xc
c001d561:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001d564 <PIT::~PIT()>:
c001d564:	83 ec 0c             	sub    esp,0xc
c001d567:	ba 40 ff 01 c0       	mov    edx,0xc001ff40
c001d56c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d570:	89 10                	mov    DWORD PTR [eax],edx
c001d572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d576:	83 ec 0c             	sub    esp,0xc
c001d579:	50                   	push   eax
c001d57a:	e8 85 f1 fe ff       	call   c000c704 <Timer::~Timer()>
c001d57f:	83 c4 10             	add    esp,0x10
c001d582:	90                   	nop
c001d583:	83 c4 0c             	add    esp,0xc
c001d586:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001d588 <PIT::~PIT()>:
c001d588:	83 ec 0c             	sub    esp,0xc
c001d58b:	83 ec 0c             	sub    esp,0xc
c001d58e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d592:	e8 cd ff ff ff       	call   c001d564 <PIT::~PIT()>
c001d597:	83 c4 10             	add    esp,0x10
c001d59a:	83 ec 08             	sub    esp,0x8
c001d59d:	68 5c 01 00 00       	push   0x15c
c001d5a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5a6:	e8 7b c4 fe ff       	call   c0009a26 <operator delete(void*, unsigned long)>
c001d5ab:	83 c4 10             	add    esp,0x10
c001d5ae:	83 c4 0c             	add    esp,0xc
c001d5b1:	c3                   	ret    
