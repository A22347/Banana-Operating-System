
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 b5 9a 00 00       	call   c0009ad5 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 79 29 02 00       	call   c002299e <_init>
c0000025:	c3                   	ret    
c0000026:	bb 22 36 02 c0       	mov    ebx,0xc0023622
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 30 36 02 c0    	cmp    ebx,0xc0023630
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 78 7a 02 c0       	mov    eax,0xc0027a78
c0000049:	3d 78 7a 02 c0       	cmp    eax,0xc0027a78
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 78 7a 02 c0       	push   0xc0027a78
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 78 7a 02 c0       	mov    eax,0xc0027a78
c0000075:	2d 78 7a 02 c0       	sub    eax,0xc0027a78
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 78 7a 02 c0       	push   0xc0027a78
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 00 7c 02 c0 00 	cmp    BYTE PTR ds:0xc0027c00,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 38 36 02 c0       	mov    ebx,0xc0023638
c00000bb:	81 eb 34 36 02 c0    	sub    ebx,0xc0023634
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 34 36 02 c0       	mov    esi,0xc0023634
c00000ca:	a1 04 7c 02 c0       	mov    eax,ds:0xc0027c04
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 04 7c 02 c0       	mov    ds:0xc0027c04,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 04 7c 02 c0       	mov    eax,ds:0xc0027c04
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 78 7a 02 c0       	push   0xc0027a78
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 00 7c 02 c0 01 	mov    BYTE PTR ds:0xc0027c00,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 08 7c 02 c0       	push   0xc0027c08
c000012c:	68 78 7a 02 c0       	push   0xc0027a78
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 f4 7c 01 00       	call   c0017fcc <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 7c c7 00 00       	call   c000ca6c <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 d2 7c 01 00       	call   c0017fcc <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 9b 81 01 00       	call   c00184b4 <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 de 87 01 00       	call   c0018b00 <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 50 80 02 c0 	lgdtd  ds:0xc0028050
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 02 e6 00 00       	call   c000eb19 <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 7a 83 00 00       	jmp    c00088fa <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 20 7c 02 c0       	mov    ds:0xc0027c20,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 20 7c 02 c0    	mov    DWORD PTR ds:0xc0027c20,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d 20 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027c20
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 40 36 02 c0 02 	test   BYTE PTR [edx-0x3ffdc9c0],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 40 36 02 c0 01 	test   BYTE PTR [edx-0x3ffdc9c0],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 40 36 02 c0 08 	test   BYTE PTR [edx-0x3ffdc9c0],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 40 36 02 c0 04 	test   BYTE PTR [ebx-0x3ffdc9c0],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 40 36 02 c0 01 	test   BYTE PTR [edx-0x3ffdc9c0],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d 40 7c 02 c0    	mov    ecx,DWORD PTR ds:0xc0027c40
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d 40 7c 02 c0    	mov    DWORD PTR ds:0xc0027c40,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 44 7c 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd83bc]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 44 7c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd83bc],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d 40 7c 02 c0    	mov    DWORD PTR ds:0xc0027c40,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 6c 7c 02 c0    	cmp    DWORD PTR ds:0xc0027c6c,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d 7c 7c 02 c0    	mov    ecx,DWORD PTR ds:0xc0027c7c
c0000d6c:	c7 42 0c 74 7c 02 c0 	mov    DWORD PTR [edx+0xc],0xc0027c74
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 7c 7c 02 c0    	mov    DWORD PTR ds:0xc0027c7c,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 6c 7c 02 c0    	mov    DWORD PTR ds:0xc0027c6c,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 40 7c 02 c0 02 	test   BYTE PTR ds:0xc0027c40,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 40 7c 02 c0       	mov    eax,0xc0027c40
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 8b 8a 00 00       	call   c00098d8 <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 cd 89 00 00       	call   c00098d8 <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 b7 89 00 00       	call   c00098d8 <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 93 89 00 00       	call   c00098d8 <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d 40 7c 02 c0    	mov    edi,DWORD PTR ds:0xc0027c40
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 40 7c 02 c0       	mov    eax,0xc0027c40
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 44 7c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd83bc]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 44 7c 02 c0 	mov    DWORD PTR [edx*4-0x3ffd83bc],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 74 7c 02 c0 	lea    edx,[eax*8-0x3ffd838c]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 40 7c 02 c0       	mov    eax,0xc0027c40
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d 80 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027c80
c00010ee:	81 fb 74 7c 02 c0    	cmp    ebx,0xc0027c74
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d 74 7c 02 c0       	cmp    eax,0xc0027c74
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d 70 7c 02 c0    	cmp    DWORD PTR ds:0xc0027c70,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 7c 7c 02 c0       	mov    ds:0xc0027c7c,eax
c000112a:	a3 80 7c 02 c0       	mov    ds:0xc0027c80,eax
c000112f:	a3 70 7c 02 c0       	mov    ds:0xc0027c70,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 74 7c 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027c74
c000113d:	c7 40 0c 74 7c 02 c0 	mov    DWORD PTR [eax+0xc],0xc0027c74
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 80 7c 02 c0       	mov    ds:0xc0027c80,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 74 7c 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027c74
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 38 7c 02 c0 	lea    ebp,[edx*4-0x3ffd83c8]
c000118e:	8b 14 95 40 7c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd83c0]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 40 7c 02 c0 	lea    ecx,[edx*4-0x3ffd83c0]
c00011a9:	8b 14 95 40 7c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd83c0]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd 74 7f 02 c0 	or     DWORD PTR [edi*4-0x3ffd808c],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 74 7c 02 c0 	lea    eax,[eax*8-0x3ffd838c]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d 7c 7c 02 c0    	mov    DWORD PTR ds:0xc0027c7c,ecx
c0001263:	89 0d 80 7c 02 c0    	mov    DWORD PTR ds:0xc0027c80,ecx
c0001269:	c7 41 08 74 7c 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0027c74
c0001270:	c7 41 0c 74 7c 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0027c74
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd 6c 7c 02 c0 	lea    edx,[ecx*8-0x3ffd8394]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d 74 7f 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd808c]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d 74 7f 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd808c]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 6c 7c 02 c0 	lea    edx,[eax*4-0x3ffd8394]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d 74 7f 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd808c],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d 7c 7c 02 c0    	mov    DWORD PTR ds:0xc0027c7c,edi
c0001336:	89 3d 80 7c 02 c0    	mov    DWORD PTR ds:0xc0027c80,edi
c000133c:	c7 47 08 74 7c 02 c0 	mov    DWORD PTR [edi+0x8],0xc0027c74
c0001343:	c7 47 0c 74 7c 02 c0 	mov    DWORD PTR [edi+0xc],0xc0027c74
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d 70 7c 02 c0    	mov    DWORD PTR ds:0xc0027c70,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 6c 7c 02 c0       	mov    eax,ds:0xc0027c6c
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d 6c 7c 02 c0    	mov    DWORD PTR ds:0xc0027c6c,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba 40 7c 02 c0       	mov    edx,0xc0027c40
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d 40 7c 02 c0 00 	cmp    DWORD PTR ds:0xc0027c40,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 40 7c 02 c0       	mov    eax,0xc0027c40
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d 94 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f94
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 94 7f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027f94,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d 94 7f 02 c0    	mov    DWORD PTR ds:0xc0027f94,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 6c 7c 02 c0    	cmp    DWORD PTR ds:0xc0027c6c,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d 6c 7c 02 c0    	mov    DWORD PTR ds:0xc0027c6c,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d 40 7c 02 c0 00 	cmp    DWORD PTR ds:0xc0027c40,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 40 7c 02 c0       	mov    eax,0xc0027c40
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 9c 7f 02 c0    	push   DWORD PTR ds:0xc0027f9c
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d 40 7c 02 c0 00 	cmp    DWORD PTR ds:0xc0027c40,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 40 7c 02 c0       	mov    eax,0xc0027c40
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 9c 7f 02 c0       	mov    eax,ds:0xc0027f9c
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 40 7c 02 c0       	mov    eax,0xc0027c40
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d 6c 7c 02 c0 00 	cmp    DWORD PTR ds:0xc0027c6c,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 40 7c 02 c0       	mov    eax,0xc0027c40
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 6c 7c 02 c0       	mov    eax,ds:0xc0027c6c
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 44 7c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd83bc]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 74 7c 02 c0       	mov    eax,0xc0027c74
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d 6c 7f 02 c0       	cmp    eax,0xc0027f6c
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 a8 7f 02 c0       	mov    eax,ds:0xc0027fa8
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 90 7f 02 c0    	mov    esi,DWORD PTR ds:0xc0027f90
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 a4 7f 02 c0    	mov    esi,DWORD PTR ds:0xc0027fa4
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 b4 7f 02 c0    	mov    esi,DWORD PTR ds:0xc0027fb4
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 40 7c 02 c0       	mov    eax,0xc0027c40
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 44 37 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdc8bc]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 40 7c 02 c0       	mov    eax,ds:0xc0027c40
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 40 7c 02 c0       	mov    ds:0xc0027c40,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d 84 7f 02 c0    	mov    DWORD PTR ds:0xc0027f84,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d 88 7f 02 c0    	mov    DWORD PTR ds:0xc0027f88,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d 8c 7f 02 c0    	mov    DWORD PTR ds:0xc0027f8c,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 94 7f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027f94,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 00 97 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6900]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 de 9c 01 00       	jmp    c001b804 <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 00 97 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6900]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 10 9d 01 00       	jmp    c001b84c <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 00 97 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6900]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 39 9d 01 00       	jmp    c001b894 <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 46 09 02 00       	call   c0022784 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 60 38 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdc7a0]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 60 38 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdc7a0]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba 60 37 02 c0       	mov    edx,0xc0023760
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba 80 38 02 c0       	mov    edx,0xc0023880
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba b0 63 02 c0       	mov    edx,0xc00263b0
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba 8c 38 02 c0       	mov    edx,0xc002388c
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba 70 38 02 c0       	mov    edx,0xc0023870
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 e0 7f 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd8020]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 c0 7f 02 c0    	mov    ax,ds:0xc0027fc0
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 c0 7f 02 c0    	mov    ds:0xc0027fc0,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 43 f7 01 00       	call   c0022784 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 ff 4f 00 00       	call   c00085dc <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 92 38 02 c0       	mov    eax,0xc0023892
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 81 48 00 00       	call   c00085f4 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad e0 37 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdc820]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 9b 38 02 c0       	mov    eax,0xc002389b
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 67 48 00 00       	call   c0008700 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 60 38 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc7a0]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 43 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 2a 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 57 46 00 00       	call   c0008700 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 44 46 00 00       	call   c0008700 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 0e e1 01 00       	call   c0022784 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba 70 38 02 c0       	mov    edx,0xc0023870
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba 60 37 02 c0       	mov    edx,0xc0023760
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba 70 37 02 c0       	mov    edx,0xc0023770
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 87 3a 00 00       	call   c000868c <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 e0 7f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8020]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 e0 7f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8020],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2c 33 00 00       	call   c00085dc <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 67 2c 00 00       	call   c00085dc <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 d5 ca 01 00       	call   c0022784 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 bb ca 01 00       	call   c0022784 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 3a 26 00 00       	call   c00085dc <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 68 25 00 00       	call   c00085dc <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d7 24 00 00       	call   c00085dc <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 95 20 00 00       	call   c00085dc <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c7 1f 00 00       	call   c00085dc <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 78 1b 00 00       	call   c00085dc <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 96 1a 00 00       	call   c00085dc <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b7 19 00 00       	call   c00085dc <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 44 19 00 00       	call   c000868c <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 b7 37 02 c0       	mov    eax,0xc00237b7
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 e0 17 00 00       	call   c0008700 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c7 16 00 00       	call   c00085f4 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 b0 37 02 c0       	mov    eax,0xc00237b0
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 54 b6 01 00       	call   c0022784 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 e0 7f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8020]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be a0 37 02 c0       	mov    esi,0xc00237a0
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 c8 af 01 00       	call   c0022784 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 18 0e 00 00       	call   c0008700 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 ec 0d 00 00       	call   c0008700 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba 80 38 02 c0       	mov    edx,0xc0023880
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba 80 37 02 c0       	mov    edx,0xc0023780
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba 90 37 02 c0       	mov    edx,0xc0023790
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba a2 38 02 c0       	mov    edx,0xc00238a2
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba ae 38 02 c0       	mov    edx,0xc00238ae
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba c2 38 02 c0       	mov    edx,0xc00238c2
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 77 00 00 00       	call   c00085dc <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 5a 00 00 00       	call   c00085dc <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 3c 14 00 00       	call   c0009a0f <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    
c00085da:	66 90                	xchg   ax,ax

c00085dc <ff_memfree>:
c00085dc:	83 ec 0c             	sub    esp,0xc
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e6:	e8 34 14 00 00       	call   c0009a1f <free>
c00085eb:	83 c4 10             	add    esp,0x10
c00085ee:	90                   	nop
c00085ef:	83 c4 0c             	add    esp,0xc
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <ff_uni2oem>:
c00085f4:	83 ec 14             	sub    esp,0x14
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008606:	c7 44 24 0c e0 3b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023be0
c000860e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008613:	77 0b                	ja     c0008620 <ff_uni2oem+0x2c>
c0008615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008619:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861e:	eb 60                	jmp    c0008680 <ff_uni2oem+0x8c>
c0008620:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008628:	77 56                	ja     c0008680 <ff_uni2oem+0x8c>
c000862a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008630:	75 4e                	jne    c0008680 <ff_uni2oem+0x8c>
c0008632:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008639:	eb 0d                	jmp    c0008648 <ff_uni2oem+0x54>
c000863b:	90                   	nop
c000863c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008641:	40                   	inc    eax
c0008642:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008647:	90                   	nop
c0008648:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864e:	77 1c                	ja     c000866c <ff_uni2oem+0x78>
c0008650:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008655:	01 c0                	add    eax,eax
c0008657:	89 c2                	mov    edx,eax
c0008659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865d:	01 d0                	add    eax,edx
c000865f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008662:	0f b7 c0             	movzx  eax,ax
c0008665:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008669:	75 d1                	jne    c000863c <ff_uni2oem+0x48>
c000866b:	90                   	nop
c000866c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008671:	83 e8 80             	sub    eax,0xffffff80
c0008674:	25 ff 00 00 00       	and    eax,0xff
c0008679:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867e:	66 90                	xchg   ax,ax
c0008680:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008685:	83 c4 14             	add    esp,0x14
c0008688:	c3                   	ret    
c0008689:	8d 76 00             	lea    esi,[esi+0x0]

c000868c <ff_oem2uni>:
c000868c:	83 ec 18             	sub    esp,0x18
c000868f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008697:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000869c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086a0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a7:	c7 44 24 10 e0 3b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023be0
c00086af:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086b5:	77 0d                	ja     c00086c4 <ff_oem2uni+0x38>
c00086b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086c0:	eb 32                	jmp    c00086f4 <ff_oem2uni+0x68>
c00086c2:	66 90                	xchg   ax,ax
c00086c4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086ca:	75 28                	jne    c00086f4 <ff_oem2uni+0x68>
c00086cc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086d3:	77 1f                	ja     c00086f4 <ff_oem2uni+0x68>
c00086d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086da:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086df:	01 c0                	add    eax,eax
c00086e1:	89 c2                	mov    edx,eax
c00086e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086e7:	01 d0                	add    eax,edx
c00086e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086f1:	8d 76 00             	lea    esi,[esi+0x0]
c00086f4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f9:	83 c4 18             	add    esp,0x18
c00086fc:	c3                   	ret    
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]

c0008700 <ff_wtoupper>:
c0008700:	83 ec 10             	sub    esp,0x10
c0008703:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000870b:	0f 87 4f 01 00 00    	ja     c0008860 <ff_wtoupper+0x160>
c0008711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008715:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000871a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008721:	77 09                	ja     c000872c <ff_wtoupper+0x2c>
c0008723:	b8 e0 39 02 c0       	mov    eax,0xc00239e0
c0008728:	eb 0a                	jmp    c0008734 <ff_wtoupper+0x34>
c000872a:	66 90                	xchg   ax,ax
c000872c:	b8 20 39 02 c0       	mov    eax,0xc0023920
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873c:	8d 50 02             	lea    edx,[eax+0x2]
c000873f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008743:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008746:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000874b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008751:	0f 84 fd 00 00 00    	je     c0008854 <ff_wtoupper+0x154>
c0008757:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000875c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008761:	0f 82 ed 00 00 00    	jb     c0008854 <ff_wtoupper+0x154>
c0008767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000876b:	8d 50 02             	lea    edx,[eax+0x2]
c000876e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008772:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008775:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000877a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000877f:	66 c1 e8 08          	shr    ax,0x8
c0008783:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008788:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000878f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008794:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008799:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000879e:	01 ca                	add    edx,ecx
c00087a0:	39 d0                	cmp    eax,edx
c00087a2:	0f 8d 8c 00 00 00    	jge    c0008834 <ff_wtoupper+0x134>
c00087a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087ad:	83 f8 08             	cmp    eax,0x8
c00087b0:	0f 87 9a 00 00 00    	ja     c0008850 <ff_wtoupper+0x150>
c00087b6:	8b 04 85 e0 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc720]
c00087bd:	ff e0                	jmp    eax
c00087bf:	90                   	nop
c00087c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087c5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ca:	29 c2                	sub    edx,eax
c00087cc:	89 d0                	mov    eax,edx
c00087ce:	01 c0                	add    eax,eax
c00087d0:	89 c2                	mov    edx,eax
c00087d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d6:	01 d0                	add    eax,edx
c00087d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087db:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087e0:	eb 4e                	jmp    c0008830 <ff_wtoupper+0x130>
c00087e2:	66 90                	xchg   ax,ax
c00087e4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087ed:	83 e0 01             	and    eax,0x1
c00087f0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087f5:	eb 39                	jmp    c0008830 <ff_wtoupper+0x130>
c00087f7:	90                   	nop
c00087f8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087fe:	eb 30                	jmp    c0008830 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008806:	eb 28                	jmp    c0008830 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000880e:	eb 20                	jmp    c0008830 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008816:	eb 18                	jmp    c0008830 <ff_wtoupper+0x130>
c0008818:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000881e:	eb 10                	jmp    c0008830 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008826:	eb 08                	jmp    c0008830 <ff_wtoupper+0x130>
c0008828:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000882f:	90                   	nop
c0008830:	eb 1e                	jmp    c0008850 <ff_wtoupper+0x150>
c0008832:	66 90                	xchg   ax,ax
c0008834:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000883a:	0f 85 f8 fe ff ff    	jne    c0008738 <ff_wtoupper+0x38>
c0008840:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008845:	01 c0                	add    eax,eax
c0008847:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000884b:	e9 e8 fe ff ff       	jmp    c0008738 <ff_wtoupper+0x38>
c0008850:	90                   	nop
c0008851:	8d 76 00             	lea    esi,[esi+0x0]
c0008854:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000885d:	8d 76 00             	lea    esi,[esi+0x0]
c0008860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c3                   	ret    

c0008868 <CPU::current()>:
c0008868:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c000886d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008873:	c3                   	ret    

c0008874 <operator new(unsigned long)>:
c0008874:	e9 96 11 00 00       	jmp    c0009a0f <malloc>

c0008879 <operator delete(void*)>:
c0008879:	e9 b1 11 00 00       	jmp    c0009a2f <rfree>

c000887e <disableIRQs()>:
c000887e:	fa                   	cli    
c000887f:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c0008885:	c3                   	ret    

c0008886 <enableIRQs()>:
c0008886:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000888b:	48                   	dec    eax
c000888c:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c0008891:	75 01                	jne    c0008894 <enableIRQs()+0xe>
c0008893:	fb                   	sti    
c0008894:	c3                   	ret    

c0008895 <lockScheduler()>:
c0008895:	fa                   	cli    
c0008896:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c000889c:	c3                   	ret    

c000889d <unlockScheduler()>:
c000889d:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c00088a2:	48                   	dec    eax
c00088a3:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c00088a8:	75 01                	jne    c00088ab <unlockScheduler()+0xe>
c00088aa:	fb                   	sti    
c00088ab:	c3                   	ret    

c00088ac <lockStuff()>:
c00088ac:	fa                   	cli    
c00088ad:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c00088b3:	ff 05 64 95 02 c0    	inc    DWORD PTR ds:0xc0029564
c00088b9:	c3                   	ret    

c00088ba <unlockStuff()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c00088c2:	48                   	dec    eax
c00088c3:	a3 64 95 02 c0       	mov    ds:0xc0029564,eax
c00088c8:	75 18                	jne    c00088e2 <unlockStuff()+0x28>
c00088ca:	83 3d 60 95 02 c0 00 	cmp    DWORD PTR ds:0xc0029560,0x0
c00088d1:	74 0f                	je     c00088e2 <unlockStuff()+0x28>
c00088d3:	c7 05 60 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029560,0x0
c00088dd:	e8 3e fe 00 00       	call   c0018720 <schedule()>
c00088e2:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c00088e7:	48                   	dec    eax
c00088e8:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c00088ed:	75 01                	jne    c00088f0 <unlockStuff()+0x36>
c00088ef:	fb                   	sti    
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	c3                   	ret    

c00088f4 <Virt::getAKernelVAS()>:
c00088f4:	a1 70 81 02 c0       	mov    eax,ds:0xc0028170
c00088f9:	c3                   	ret    

c00088fa <__not_memcpy>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008904:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008908:	89 c7                	mov    edi,eax
c000890a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	68 e0 3c 02 c0       	push   0xc0023ce0
c000891b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891f:	e8 a8 7e ff ff       	call   c00007cc <strcmp>
c0008924:	83 c4 10             	add    esp,0x10
c0008927:	85 c0                	test   eax,eax
c0008929:	0f 94 c0             	sete   al
c000892c:	84 c0                	test   al,al
c000892e:	74 0c                	je     c000893c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008930:	b8 48 80 02 c0       	mov    eax,0xc0028048
c0008935:	e9 ea 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000893a:	66 90                	xchg   ax,ax
c000893c:	83 ec 08             	sub    esp,0x8
c000893f:	68 e9 3c 02 c0       	push   0xc0023ce9
c0008944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008948:	e8 7f 7e ff ff       	call   c00007cc <strcmp>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	85 c0                	test   eax,eax
c0008952:	0f 94 c0             	sete   al
c0008955:	84 c0                	test   al,al
c0008957:	74 0b                	je     c0008964 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008959:	b8 84 27 02 c0       	mov    eax,0xc0022784
c000895e:	e9 c1 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008963:	90                   	nop
c0008964:	83 ec 08             	sub    esp,0x8
c0008967:	68 f3 3c 02 c0       	push   0xc0023cf3
c000896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008970:	e8 57 7e ff ff       	call   c00007cc <strcmp>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	0f 94 c0             	sete   al
c000897d:	84 c0                	test   al,al
c000897f:	74 0b                	je     c000898c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008981:	b8 b8 24 02 c0       	mov    eax,0xc00224b8
c0008986:	e9 99 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000898b:	90                   	nop
c000898c:	83 ec 08             	sub    esp,0x8
c000898f:	68 fc 3c 02 c0       	push   0xc0023cfc
c0008994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008998:	e8 2f 7e ff ff       	call   c00007cc <strcmp>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	0f 94 c0             	sete   al
c00089a5:	84 c0                	test   al,al
c00089a7:	74 07                	je     c00089b0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a9:	b8 84 28 02 c0       	mov    eax,0xc0022884
c00089ae:	eb 74                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089b0:	83 ec 08             	sub    esp,0x8
c00089b3:	68 06 3d 02 c0       	push   0xc0023d06
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 0b 7e ff ff       	call   c00007cc <strcmp>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	85 c0                	test   eax,eax
c00089c6:	0f 94 c0             	sete   al
c00089c9:	84 c0                	test   al,al
c00089cb:	74 07                	je     c00089d4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089cd:	b8 04 26 02 c0       	mov    eax,0xc0022604
c00089d2:	eb 50                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089d4:	83 ec 08             	sub    esp,0x8
c00089d7:	68 0f 3d 02 c0       	push   0xc0023d0f
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 e7 7d ff ff       	call   c00007cc <strcmp>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	0f 94 c0             	sete   al
c00089ed:	84 c0                	test   al,al
c00089ef:	74 07                	je     c00089f8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089f1:	b8 4c 80 02 c0       	mov    eax,0xc002804c
c00089f6:	eb 2c                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	68 1c 3d 02 c0       	push   0xc0023d1c
c0008a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a04:	e8 c3 7d ff ff       	call   c00007cc <strcmp>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	85 c0                	test   eax,eax
c0008a0e:	0f 94 c0             	sete   al
c0008a11:	84 c0                	test   al,al
c0008a13:	74 07                	je     c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a15:	b8 4d 80 02 c0       	mov    eax,0xc002804d
c0008a1a:	eb 08                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a1c:	b8 00 00 00 00       	mov    eax,0x0
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 0c             	add    esp,0xc
c0008a27:	c3                   	ret    

c0008a28 <Computer::close(int, int, void*)>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a37:	83 ec 0c             	sub    esp,0xc
c0008a3a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a40:	e8 83 59 00 00       	call   c000e3c8 <Device::closeAll()>
c0008a45:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a50:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a54:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a64:	5b                   	pop    ebx
c0008a65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a68:	5e                   	pop    esi
c0008a69:	5f                   	pop    edi
c0008a6a:	ff e0                	jmp    eax

c0008a6c <Krnl::firstTask()>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	68 29 3d 02 c0       	push   0xc0023d29
c0008a75:	e8 ef 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008a7a:	fb                   	sti    
c0008a7b:	c7 04 24 40 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d40
c0008a82:	e8 e2 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008a87:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a8e:	e8 7c 0f 00 00       	call   c0009a0f <malloc>
c0008a93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a9a:	89 c3                	mov    ebx,eax
c0008a9c:	ff 35 90 95 02 c0    	push   DWORD PTR ds:0xc0029590
c0008aa2:	68 59 3d 02 c0       	push   0xc0023d59
c0008aa7:	6a 01                	push   0x1
c0008aa9:	50                   	push   eax
c0008aaa:	e8 4d f8 00 00       	call   c00182fc <Process::Process(bool, char const*, Process*, char**)>
c0008aaf:	83 c4 20             	add    esp,0x20
c0008ab2:	68 ff 00 00 00       	push   0xff
c0008ab7:	6a 00                	push   0x0
c0008ab9:	68 07 94 00 c0       	push   0xc0009407
c0008abe:	53                   	push   ebx
c0008abf:	e8 40 fa 00 00       	call   c0018504 <Process::createThread(void (*)(void*), void*, int)>
c0008ac4:	6a 7a                	push   0x7a
c0008ac6:	6a 00                	push   0x0
c0008ac8:	68 48 8f 01 c0       	push   0xc0018f48
c0008acd:	ff 35 90 95 02 c0    	push   DWORD PTR ds:0xc0029590
c0008ad3:	e8 2c fa 00 00       	call   c0018504 <Process::createThread(void (*)(void*), void*, int)>
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	a3 48 95 02 c0       	mov    ds:0xc0029548,eax
c0008ae0:	68 00 3f 02 c0       	push   0xc0023f00
c0008ae5:	c6 05 4d 80 02 c0 01 	mov    BYTE PTR ds:0xc002804d,0x1
c0008aec:	e8 78 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008af1:	e8 2d 08 01 00       	call   c0019323 <Vm::initialise8086()>
c0008af6:	e8 9b 45 00 00       	call   c000d096 <Fs::initVFS()>
c0008afb:	c7 04 24 66 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d66
c0008b02:	e8 62 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b07:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0008b0c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	6a 00                	push   0x0
c0008b1a:	50                   	push   eax
c0008b1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b1e:	83 c4 14             	add    esp,0x14
c0008b21:	68 00 3f 02 c0       	push   0xc0023f00
c0008b26:	e8 3e 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b2b:	e8 3a e0 00 00       	call   c0016b6a <Sys::loadSyscalls()>
c0008b30:	e8 7d bd 00 00       	call   c00148b2 <Krnl::loadSystemEnv()>
c0008b35:	e8 28 c3 00 00       	call   c0014e62 <Krnl::setupPowerManager()>
c0008b3a:	83 c4 0c             	add    esp,0xc
c0008b3d:	6a 3a                	push   0x3a
c0008b3f:	68 80 3d 02 c0       	push   0xc0023d80
c0008b44:	68 89 3d 02 c0       	push   0xc0023d89
c0008b49:	e8 df cd 00 00       	call   c001592d <Reg::readIntWithDefault(char*, char*, int)>
c0008b4e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b51:	e8 2a 51 00 00       	call   c000dc80 <User::loadClockSettings(int)>
c0008b56:	c7 04 24 24 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f24
c0008b5d:	e8 07 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b62:	58                   	pop    eax
c0008b63:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0008b68:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b6e:	e8 15 58 00 00       	call   c000e388 <Device::loadDriversForAll()>
c0008b73:	c7 04 24 91 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d91
c0008b7a:	e8 ea 0e 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b7f:	e8 96 b8 00 00       	call   c001441a <Krnl::startCPUs()>
c0008b84:	c7 04 24 ab 3d 02 c0 	mov    DWORD PTR [esp],0xc0023dab
c0008b8b:	e8 d9 0e 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b90:	5a                   	pop    edx
c0008b91:	8b 1d 48 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028048
c0008b97:	59                   	pop    ecx
c0008b98:	6a 01                	push   0x1
c0008b9a:	68 bc 3d 02 c0       	push   0xc0023dbc
c0008b9f:	e8 96 f1 00 00       	call   c0017d3a <Thr::loadDLL(char const*, bool)>
c0008ba4:	5a                   	pop    edx
c0008ba5:	59                   	pop    ecx
c0008ba6:	53                   	push   ebx
c0008ba7:	50                   	push   eax
c0008ba8:	e8 be f3 00 00       	call   c0017f6b <Thr::executeDLL(unsigned long, void*)>
c0008bad:	83 c4 10             	add    esp,0x10
c0008bb0:	83 ec 0c             	sub    esp,0xc
c0008bb3:	6a 02                	push   0x2
c0008bb5:	e8 5e fd 00 00       	call   c0018918 <blockTask(TaskState)>
c0008bba:	83 c4 10             	add    esp,0x10
c0008bbd:	eb f1                	jmp    c0008bb0 <Krnl::firstTask()+0x144>
c0008bbf:	90                   	nop

c0008bc0 <Computer::Computer()>:
c0008bc0:	83 ec 0c             	sub    esp,0xc
c0008bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc7:	83 ec 08             	sub    esp,0x8
c0008bca:	68 d8 3d 02 c0       	push   0xc0023dd8
c0008bcf:	50                   	push   eax
c0008bd0:	e8 6d 58 00 00       	call   c000e442 <Device::Device(char const*)>
c0008bd5:	83 c4 10             	add    esp,0x10
c0008bd8:	ba d4 3f 02 c0       	mov    edx,0xc0023fd4
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	89 10                	mov    DWORD PTR [eax],edx
c0008be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf5:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c03:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c09:	83 ca 04             	or     edx,0x4
c0008c0c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c16:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c1c:	0f b6 d0             	movzx  edx,al
c0008c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c23:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c2e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c34:	0f b6 d0             	movzx  edx,al
c0008c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c44:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c4a:	8d 50 01             	lea    edx,[eax+0x1]
c0008c4d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c51:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c57:	0f b6 d0             	movzx  edx,al
c0008c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c5e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c62:	83 e1 3f             	and    ecx,0x3f
c0008c65:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c73:	0f b6 d0             	movzx  edx,al
c0008c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7a:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c85:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c8b:	0f b6 d0             	movzx  edx,al
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ca1:	8d 50 01             	lea    edx,[eax+0x1]
c0008ca4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cae:	0f b6 d0             	movzx  edx,al
c0008cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb9:	83 e1 3f             	and    ecx,0x3f
c0008cbc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cca:	0f b6 d0             	movzx  edx,al
c0008ccd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd1:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cdc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ce2:	0f b6 d0             	movzx  edx,al
c0008ce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf8:	8d 50 01             	lea    edx,[eax+0x1]
c0008cfb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cff:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008d05:	0f b6 d0             	movzx  edx,al
c0008d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d10:	83 e1 3f             	and    ecx,0x3f
c0008d13:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d17:	90                   	nop
c0008d18:	83 c4 0c             	add    esp,0xc
c0008d1b:	c3                   	ret    

c0008d1c <Computer::setBootMessage(char const*)>:
c0008d1c:	c3                   	ret    
c0008d1d:	90                   	nop

c0008d1e <Computer::detectFeatures()>:
c0008d1e:	55                   	push   ebp
c0008d1f:	57                   	push   edi
c0008d20:	56                   	push   esi
c0008d21:	53                   	push   ebx
c0008d22:	83 ec 1c             	sub    esp,0x1c
c0008d25:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d29:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d33:	e8 e1 74 ff ff       	call   c0000219 <detectCPUID>
c0008d38:	85 c0                	test   eax,eax
c0008d3a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d40:	0f 95 c2             	setne  dl
c0008d43:	83 e0 fd             	and    eax,0xfffffffd
c0008d46:	d1 e2                	shl    edx,1
c0008d48:	09 d0                	or     eax,edx
c0008d4a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d50:	a8 02                	test   al,0x2
c0008d52:	75 46                	jne    c0008d9a <Computer::detectFeatures()+0x7c>
c0008d54:	f6 05 61 80 02 c0 04 	test   BYTE PTR ds:0xc0028061,0x4
c0008d5b:	74 07                	je     c0008d64 <Computer::detectFeatures()+0x46>
c0008d5d:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d64:	e8 dd 96 01 00       	call   c0022446 <x87Detect>
c0008d69:	83 e0 01             	and    eax,0x1
c0008d6c:	c1 e0 04             	shl    eax,0x4
c0008d6f:	88 c2                	mov    dl,al
c0008d71:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d77:	83 e0 ef             	and    eax,0xffffffef
c0008d7a:	09 d0                	or     eax,edx
c0008d7c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d82:	a8 10                	test   al,0x10
c0008d84:	0f 85 2a 01 00 00    	jne    c0008eb4 <Computer::detectFeatures()+0x196>
c0008d8a:	84 c0                	test   al,al
c0008d8c:	0f 88 45 01 00 00    	js     c0008ed7 <Computer::detectFeatures()+0x1b9>
c0008d92:	83 c4 1c             	add    esp,0x1c
c0008d95:	5b                   	pop    ebx
c0008d96:	5e                   	pop    esi
c0008d97:	5f                   	pop    edi
c0008d98:	5d                   	pop    ebp
c0008d99:	c3                   	ret    
c0008d9a:	83 ec 0c             	sub    esp,0xc
c0008d9d:	6a 20                	push   0x20
c0008d9f:	e8 1a a5 00 00       	call   c00132be <CPU::cpuidCheckEDX(unsigned int)>
c0008da4:	83 e0 01             	and    eax,0x1
c0008da7:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008dae:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008db4:	83 e0 f7             	and    eax,0xfffffff7
c0008db7:	09 d0                	or     eax,edx
c0008db9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008dbf:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dc6:	e8 f3 a4 00 00       	call   c00132be <CPU::cpuidCheckEDX(unsigned int)>
c0008dcb:	83 e0 01             	and    eax,0x1
c0008dce:	88 c2                	mov    dl,al
c0008dd0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd6:	83 e0 fe             	and    eax,0xfffffffe
c0008dd9:	09 d0                	or     eax,edx
c0008ddb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008de1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de8:	e8 d1 a4 00 00       	call   c00132be <CPU::cpuidCheckEDX(unsigned int)>
c0008ded:	c1 e0 07             	shl    eax,0x7
c0008df0:	88 c2                	mov    dl,al
c0008df2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df8:	83 e0 7f             	and    eax,0x7f
c0008dfb:	09 d0                	or     eax,edx
c0008dfd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008e03:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e0a:	e8 af a4 00 00       	call   c00132be <CPU::cpuidCheckEDX(unsigned int)>
c0008e0f:	83 c4 10             	add    esp,0x10
c0008e12:	83 e0 01             	and    eax,0x1
c0008e15:	c1 e0 05             	shl    eax,0x5
c0008e18:	88 c2                	mov    dl,al
c0008e1a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e20:	83 e0 df             	and    eax,0xffffffdf
c0008e23:	09 d0                	or     eax,edx
c0008e25:	f7 05 60 80 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0028060,0x401
c0008e2f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e35:	0f 84 c2 00 00 00    	je     c0008efd <Computer::detectFeatures()+0x1df>
c0008e3b:	83 e0 fe             	and    eax,0xfffffffe
c0008e3e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e44:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e4a:	88 c2                	mov    dl,al
c0008e4c:	83 e2 09             	and    edx,0x9
c0008e4f:	fe ca                	dec    dl
c0008e51:	75 09                	jne    c0008e5c <Computer::detectFeatures()+0x13e>
c0008e53:	83 e0 fe             	and    eax,0xfffffffe
c0008e56:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e5c:	83 ec 0c             	sub    esp,0xc
c0008e5f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e63:	50                   	push   eax
c0008e64:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e68:	55                   	push   ebp
c0008e69:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e6d:	57                   	push   edi
c0008e6e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e72:	56                   	push   esi
c0008e73:	68 00 00 00 80       	push   0x80000000
c0008e78:	e8 bd a3 00 00       	call   c001323a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e7d:	83 c4 20             	add    esp,0x20
c0008e80:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e8b:	0f 86 c3 fe ff ff    	jbe    c0008d54 <Computer::detectFeatures()+0x36>
c0008e91:	83 ec 0c             	sub    esp,0xc
c0008e94:	50                   	push   eax
c0008e95:	55                   	push   ebp
c0008e96:	57                   	push   edi
c0008e97:	56                   	push   esi
c0008e98:	68 01 00 00 80       	push   0x80000001
c0008e9d:	e8 98 a3 00 00       	call   c001323a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008ea2:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008eac:	83 c4 20             	add    esp,0x20
c0008eaf:	e9 a0 fe ff ff       	jmp    c0008d54 <Computer::detectFeatures()+0x36>
c0008eb4:	e8 47 95 01 00       	call   c0022400 <absolutelyNoChanceInHell>
c0008eb9:	88 c2                	mov    dl,al
c0008ebb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ec1:	c1 e2 07             	shl    edx,0x7
c0008ec4:	83 e0 7f             	and    eax,0x7f
c0008ec7:	09 d0                	or     eax,edx
c0008ec9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ecf:	84 c0                	test   al,al
c0008ed1:	0f 89 bb fe ff ff    	jns    c0008d92 <Computer::detectFeatures()+0x74>
c0008ed7:	e8 04 95 01 00       	call   c00223e0 <avxDetect>
c0008edc:	83 e0 01             	and    eax,0x1
c0008edf:	c1 e0 05             	shl    eax,0x5
c0008ee2:	88 c2                	mov    dl,al
c0008ee4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008eea:	83 e0 df             	and    eax,0xffffffdf
c0008eed:	09 d0                	or     eax,edx
c0008eef:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ef5:	83 c4 1c             	add    esp,0x1c
c0008ef8:	5b                   	pop    ebx
c0008ef9:	5e                   	pop    esi
c0008efa:	5f                   	pop    edi
c0008efb:	5d                   	pop    ebp
c0008efc:	c3                   	ret    
c0008efd:	83 ec 0c             	sub    esp,0xc
c0008f00:	68 00 02 00 00       	push   0x200
c0008f05:	e8 b4 a3 00 00       	call   c00132be <CPU::cpuidCheckEDX(unsigned int)>
c0008f0a:	83 c4 10             	add    esp,0x10
c0008f0d:	83 e0 01             	and    eax,0x1
c0008f10:	88 c2                	mov    dl,al
c0008f12:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f18:	83 e0 fe             	and    eax,0xfffffffe
c0008f1b:	09 d0                	or     eax,edx
c0008f1d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f23:	e9 1c ff ff ff       	jmp    c0008e44 <Computer::detectFeatures()+0x126>

c0008f28 <Computer::displayFeatures()>:
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <Computer::rdmsr(unsigned int)>:
c0008f2a:	83 ec 0c             	sub    esp,0xc
c0008f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f31:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f38:	74 0a                	je     c0008f44 <Computer::rdmsr(unsigned int)+0x1a>
c0008f3a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f3e:	0f 32                	rdmsr  
c0008f40:	83 c4 0c             	add    esp,0xc
c0008f43:	c3                   	ret    
c0008f44:	83 ec 0c             	sub    esp,0xc
c0008f47:	68 e1 3d 02 c0       	push   0xc0023de1
c0008f4c:	e8 6a ba 00 00       	call   c00149bb <Krnl::panic(char const*)>
c0008f51:	83 c4 10             	add    esp,0x10
c0008f54:	eb e4                	jmp    c0008f3a <Computer::rdmsr(unsigned int)+0x10>

c0008f56 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008f56:	57                   	push   edi
c0008f57:	56                   	push   esi
c0008f58:	52                   	push   edx
c0008f59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f5d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008f61:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008f65:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f6c:	74 0e                	je     c0008f7c <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008f6e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f72:	89 f0                	mov    eax,esi
c0008f74:	89 fa                	mov    edx,edi
c0008f76:	0f 30                	wrmsr  
c0008f78:	58                   	pop    eax
c0008f79:	5e                   	pop    esi
c0008f7a:	5f                   	pop    edi
c0008f7b:	c3                   	ret    
c0008f7c:	83 ec 0c             	sub    esp,0xc
c0008f7f:	68 e7 3d 02 c0       	push   0xc0023de7
c0008f84:	e8 32 ba 00 00       	call   c00149bb <Krnl::panic(char const*)>
c0008f89:	83 c4 10             	add    esp,0x10
c0008f8c:	eb e0                	jmp    c0008f6e <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008f8e <Computer::shutdown()>:
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f95:	8b 10                	mov    edx,DWORD PTR [eax]
c0008f97:	6a 00                	push   0x0
c0008f99:	6a 00                	push   0x0
c0008f9b:	6a 00                	push   0x0
c0008f9d:	50                   	push   eax
c0008f9e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008fa1:	83 c4 1c             	add    esp,0x1c
c0008fa4:	c3                   	ret    
c0008fa5:	90                   	nop

c0008fa6 <Computer::restart()>:
c0008fa6:	83 ec 0c             	sub    esp,0xc
c0008fa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fad:	8b 10                	mov    edx,DWORD PTR [eax]
c0008faf:	6a 00                	push   0x0
c0008fb1:	6a 00                	push   0x0
c0008fb3:	6a 01                	push   0x1
c0008fb5:	50                   	push   eax
c0008fb6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008fb9:	83 c4 1c             	add    esp,0x1c
c0008fbc:	c3                   	ret    
c0008fbd:	90                   	nop

c0008fbe <Computer::sleep()>:
c0008fbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fc2:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fcc:	e9 bb 98 00 00       	jmp    c001288c <ACPI::sleep()>
c0008fd1:	90                   	nop

c0008fd2 <Computer::nmiEnabled()>:
c0008fd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fd6:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008fdc:	c3                   	ret    
c0008fdd:	90                   	nop

c0008fde <Computer::readCMOS(unsigned char)>:
c0008fde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fe2:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008fe9:	19 c0                	sbb    eax,eax
c0008feb:	83 e0 80             	and    eax,0xffffff80
c0008fee:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008ff2:	e6 70                	out    0x70,al
c0008ff4:	e4 71                	in     al,0x71
c0008ff6:	c3                   	ret    
c0008ff7:	90                   	nop

c0008ff8 <Computer::enableNMI(bool)>:
c0008ff8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008ffc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009000:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0009006:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000900e:	eb ce                	jmp    c0008fde <Computer::readCMOS(unsigned char)>

c0009010 <Computer::open(int, int, void*)>:
c0009010:	56                   	push   esi
c0009011:	53                   	push   ebx
c0009012:	83 ec 10             	sub    esp,0x10
c0009015:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009019:	68 44 3f 02 c0       	push   0xc0023f44
c000901e:	e8 46 0a 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009023:	58                   	pop    eax
c0009024:	f6 05 60 80 02 c0 04 	test   BYTE PTR ds:0xc0028060,0x4
c000902b:	5a                   	pop    edx
c000902c:	0f 94 05 20 74 02 c0 	sete   BYTE PTR ds:0xc0027420
c0009033:	68 58 01 00 00       	push   0x158
c0009038:	68 ed 3d 02 c0       	push   0xc0023ded
c000903d:	e8 bd 3c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009042:	59                   	pop    ecx
c0009043:	5e                   	pop    esi
c0009044:	68 14 01 00 00       	push   0x114
c0009049:	68 03 3e 02 c0       	push   0xc0023e03
c000904e:	e8 ac 3c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009053:	58                   	pop    eax
c0009054:	5a                   	pop    edx
c0009055:	6a 14                	push   0x14
c0009057:	68 17 3e 02 c0       	push   0xc0023e17
c000905c:	e8 9e 3c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009061:	59                   	pop    ecx
c0009062:	5e                   	pop    esi
c0009063:	68 1f 07 00 00       	push   0x71f
c0009068:	68 2a 3e 02 c0       	push   0xc0023e2a
c000906d:	e8 8d 3c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009072:	58                   	pop    eax
c0009073:	5a                   	pop    edx
c0009074:	6a 5f                	push   0x5f
c0009076:	68 41 3e 02 c0       	push   0xc0023e41
c000907b:	e8 7f 3c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009080:	c7 04 24 57 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e57
c0009087:	e8 73 3c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000908c:	c7 04 24 69 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e69
c0009093:	e8 d1 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009098:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000909f:	e8 6b 09 00 00       	call   c0009a0f <malloc>
c00090a4:	89 c6                	mov    esi,eax
c00090a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00090a9:	e8 96 90 00 00       	call   c0012144 <ACPI::ACPI()>
c00090ae:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c00090b4:	c7 04 24 83 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e83
c00090bb:	e8 a9 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090c0:	59                   	pop    ecx
c00090c1:	5e                   	pop    esi
c00090c2:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c00090c8:	53                   	push   ebx
c00090c9:	e8 70 51 00 00       	call   c000e23e <Device::addChild(Device*)>
c00090ce:	c7 04 24 68 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f68
c00090d5:	e8 8f 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00090dd:	e8 3c fc ff ff       	call   c0008d1e <Computer::detectFeatures()>
c00090e2:	c7 04 24 88 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f88
c00090e9:	e8 7b 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090ee:	c7 04 24 9d 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e9d
c00090f5:	e8 6f 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090fa:	58                   	pop    eax
c00090fb:	5a                   	pop    edx
c00090fc:	6a 01                	push   0x1
c00090fe:	53                   	push   ebx
c00090ff:	e8 f4 fe ff ff       	call   c0008ff8 <Computer::enableNMI(bool)>
c0009104:	c7 04 24 91 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d91
c000910b:	e8 59 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009110:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c0009117:	e8 f3 08 00 00       	call   c0009a0f <malloc>
c000911c:	89 04 24             	mov    DWORD PTR [esp],eax
c000911f:	89 c6                	mov    esi,eax
c0009121:	e8 50 a2 00 00       	call   c0013376 <CPU::CPU()>
c0009126:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000912c:	59                   	pop    ecx
c000912d:	58                   	pop    eax
c000912e:	56                   	push   esi
c000912f:	53                   	push   ebx
c0009130:	e8 09 51 00 00       	call   c000e23e <Device::addChild(Device*)>
c0009135:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000913b:	8b 10                	mov    edx,DWORD PTR [eax]
c000913d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009141:	6a 00                	push   0x0
c0009143:	6a 00                	push   0x0
c0009145:	50                   	push   eax
c0009146:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0009149:	83 c4 14             	add    esp,0x14
c000914c:	68 a8 3f 02 c0       	push   0xc0023fa8
c0009151:	e8 13 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009156:	e8 7f 56 00 00       	call   c000e7da <setupFPU()>
c000915b:	83 c4 10             	add    esp,0x10
c000915e:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0009164:	85 c0                	test   eax,eax
c0009166:	74 1f                	je     c0009187 <Computer::open(int, int, void*)+0x177>
c0009168:	83 ec 08             	sub    esp,0x8
c000916b:	50                   	push   eax
c000916c:	53                   	push   ebx
c000916d:	e8 cc 50 00 00       	call   c000e23e <Device::addChild(Device*)>
c0009172:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c0009178:	8b 10                	mov    edx,DWORD PTR [eax]
c000917a:	6a 00                	push   0x0
c000917c:	6a 00                	push   0x0
c000917e:	6a 00                	push   0x0
c0009180:	50                   	push   eax
c0009181:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0009184:	83 c4 20             	add    esp,0x20
c0009187:	83 ec 0c             	sub    esp,0xc
c000918a:	68 ae 3e 02 c0       	push   0xc0023eae
c000918f:	e8 d5 08 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009194:	c7 04 24 6c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a6c
c000919b:	e8 78 f4 00 00       	call   c0018618 <setupMultitasking(void (*)())>
c00091a0:	83 c4 14             	add    esp,0x14
c00091a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00091a8:	5b                   	pop    ebx
c00091a9:	5e                   	pop    esi
c00091aa:	c3                   	ret    
c00091ab:	90                   	nop

c00091ac <Computer::disableNMI()>:
c00091ac:	6a 00                	push   0x0
c00091ae:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00091b2:	e8 41 fe ff ff       	call   c0008ff8 <Computer::enableNMI(bool)>
c00091b7:	58                   	pop    eax
c00091b8:	5a                   	pop    edx
c00091b9:	c3                   	ret    

c00091ba <Computer::writeCMOS(unsigned char, unsigned char)>:
c00091ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091be:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00091c5:	19 c0                	sbb    eax,eax
c00091c7:	83 e0 80             	and    eax,0xffffff80
c00091ca:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00091ce:	e6 70                	out    0x70,al
c00091d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00091d4:	e6 71                	out    0x71,al
c00091d6:	c3                   	ret    
c00091d7:	90                   	nop

c00091d8 <Computer::handleNMI()>:
c00091d8:	56                   	push   esi
c00091d9:	53                   	push   ebx
c00091da:	83 ec 10             	sub    esp,0x10
c00091dd:	e4 92                	in     al,0x92
c00091df:	89 c6                	mov    esi,eax
c00091e1:	e4 61                	in     al,0x61
c00091e3:	68 c9 3e 02 c0       	push   0xc0023ec9
c00091e8:	88 c3                	mov    bl,al
c00091ea:	e8 10 3b 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00091ef:	83 c4 10             	add    esp,0x10
c00091f2:	83 e6 10             	and    esi,0x10
c00091f5:	75 0d                	jne    c0009204 <Computer::handleNMI()+0x2c>
c00091f7:	f6 c3 40             	test   bl,0x40
c00091fa:	75 1d                	jne    c0009219 <Computer::handleNMI()+0x41>
c00091fc:	84 db                	test   bl,bl
c00091fe:	78 2d                	js     c000922d <Computer::handleNMI()+0x55>
c0009200:	58                   	pop    eax
c0009201:	5b                   	pop    ebx
c0009202:	5e                   	pop    esi
c0009203:	c3                   	ret    
c0009204:	83 ec 0c             	sub    esp,0xc
c0009207:	68 da 3e 02 c0       	push   0xc0023eda
c000920c:	e8 aa b7 00 00       	call   c00149bb <Krnl::panic(char const*)>
c0009211:	83 c4 10             	add    esp,0x10
c0009214:	f6 c3 40             	test   bl,0x40
c0009217:	74 e3                	je     c00091fc <Computer::handleNMI()+0x24>
c0009219:	83 ec 0c             	sub    esp,0xc
c000921c:	68 e7 3e 02 c0       	push   0xc0023ee7
c0009221:	e8 95 b7 00 00       	call   c00149bb <Krnl::panic(char const*)>
c0009226:	83 c4 10             	add    esp,0x10
c0009229:	84 db                	test   bl,bl
c000922b:	79 d3                	jns    c0009200 <Computer::handleNMI()+0x28>
c000922d:	c7 44 24 10 f1 3e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023ef1
c0009235:	5a                   	pop    edx
c0009236:	5b                   	pop    ebx
c0009237:	5e                   	pop    esi
c0009238:	e9 7e b7 00 00       	jmp    c00149bb <Krnl::panic(char const*)>
c000923d:	90                   	nop

c000923e <Computer::setDiskActivityLight(int, bool)>:
c000923e:	56                   	push   esi
c000923f:	53                   	push   ebx
c0009240:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009244:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009249:	77 1b                	ja     c0009266 <Computer::setDiskActivityLight(int, bool)+0x28>
c000924b:	e4 92                	in     al,0x92
c000924d:	bb 40 00 00 00       	mov    ebx,0x40
c0009252:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0009256:	89 da                	mov    edx,ebx
c0009258:	d3 e2                	shl    edx,cl
c000925a:	89 f1                	mov    ecx,esi
c000925c:	f7 d2                	not    edx
c000925e:	d3 e3                	shl    ebx,cl
c0009260:	21 d0                	and    eax,edx
c0009262:	09 d8                	or     eax,ebx
c0009264:	e6 92                	out    0x92,al
c0009266:	5b                   	pop    ebx
c0009267:	5e                   	pop    esi
c0009268:	c3                   	ret    
c0009269:	90                   	nop

c000926a <GDTEntry::setBase(unsigned int)>:
c000926a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000926e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009272:	89 c1                	mov    ecx,eax
c0009274:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0009278:	c1 e9 10             	shr    ecx,0x10
c000927b:	c1 e8 18             	shr    eax,0x18
c000927e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0009281:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0009284:	c3                   	ret    
c0009285:	90                   	nop

c0009286 <GDTEntry::setLimit(unsigned int)>:
c0009286:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000928a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000928e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0009291:	66 89 01             	mov    WORD PTR [ecx],ax
c0009294:	83 e2 f0             	and    edx,0xfffffff0
c0009297:	c1 e8 10             	shr    eax,0x10
c000929a:	83 e0 0f             	and    eax,0xf
c000929d:	09 d0                	or     eax,edx
c000929f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00092a2:	c3                   	ret    
c00092a3:	90                   	nop

c00092a4 <GDT::GDT()>:
c00092a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092a8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00092ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00092b8:	90                   	nop
c00092b9:	c3                   	ret    

c00092ba <GDT::addEntry(GDTEntry)>:
c00092ba:	53                   	push   ebx
c00092bb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00092bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00092c3:	8b 02                	mov    eax,DWORD PTR [edx]
c00092c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00092c9:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00092cd:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00092d1:	8d 48 01             	lea    ecx,[eax+0x1]
c00092d4:	c1 e0 03             	shl    eax,0x3
c00092d7:	89 0a                	mov    DWORD PTR [edx],ecx
c00092d9:	5b                   	pop    ebx
c00092da:	c3                   	ret    
c00092db:	90                   	nop

c00092dc <GDT::getNumberOfEntries()>:
c00092dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00092e2:	c3                   	ret    
c00092e3:	90                   	nop

c00092e4 <GDT::flush()>:
c00092e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092e8:	8b 10                	mov    edx,DWORD PTR [eax]
c00092ea:	83 c0 04             	add    eax,0x4
c00092ed:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00092f4:	a3 52 80 02 c0       	mov    ds:0xc0028052,eax
c00092f9:	66 89 15 50 80 02 c0 	mov    WORD PTR ds:0xc0028050,dx
c0009300:	e9 80 70 ff ff       	jmp    c0000385 <loadGDT>
c0009305:	90                   	nop

c0009306 <GDT::setup()>:
c0009306:	55                   	push   ebp
c0009307:	57                   	push   edi
c0009308:	56                   	push   esi
c0009309:	53                   	push   ebx
c000930a:	83 ec 3c             	sub    esp,0x3c
c000930d:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0009311:	6a 00                	push   0x0
c0009313:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0009317:	53                   	push   ebx
c0009318:	e8 4d ff ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c000931d:	6a 00                	push   0x0
c000931f:	53                   	push   ebx
c0009320:	e8 61 ff ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c0009325:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000932d:	6a 00                	push   0x0
c000932f:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0009333:	53                   	push   ebx
c0009334:	e8 31 ff ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c0009339:	68 ff ff ff 00       	push   0xffffff
c000933e:	53                   	push   ebx
c000933f:	e8 42 ff ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c0009344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009348:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000934d:	0d 00 9a c0 00       	or     eax,0xc09a00
c0009352:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009356:	83 c4 20             	add    esp,0x20
c0009359:	6a 00                	push   0x0
c000935b:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000935f:	53                   	push   ebx
c0009360:	e8 05 ff ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c0009365:	68 ff ff ff 00       	push   0xffffff
c000936a:	53                   	push   ebx
c000936b:	e8 16 ff ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c0009370:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0009374:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009378:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000937c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009380:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009384:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009389:	0d 00 92 c0 00       	or     eax,0xc09200
c000938e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009392:	89 d8                	mov    eax,ebx
c0009394:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009398:	80 cc 60             	or     ah,0x60
c000939b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000939f:	83 c4 0c             	add    esp,0xc
c00093a2:	89 f8                	mov    eax,edi
c00093a4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00093a8:	80 cc 60             	or     ah,0x60
c00093ab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00093af:	89 c7                	mov    edi,eax
c00093b1:	55                   	push   ebp
c00093b2:	e8 03 ff ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093b7:	83 c4 0c             	add    esp,0xc
c00093ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00093be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00093c2:	55                   	push   ebp
c00093c3:	e8 f2 fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093c8:	83 c4 0c             	add    esp,0xc
c00093cb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00093cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00093d3:	55                   	push   ebp
c00093d4:	e8 e1 fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093d9:	83 c4 0c             	add    esp,0xc
c00093dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00093e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00093e4:	53                   	push   ebx
c00093e5:	51                   	push   ecx
c00093e6:	55                   	push   ebp
c00093e7:	e8 ce fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093ec:	83 c4 0c             	add    esp,0xc
c00093ef:	57                   	push   edi
c00093f0:	56                   	push   esi
c00093f1:	55                   	push   ebp
c00093f2:	e8 c3 fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093f7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093fa:	e8 e5 fe ff ff       	call   c00092e4 <GDT::flush()>
c00093ff:	83 c4 4c             	add    esp,0x4c
c0009402:	5b                   	pop    ebx
c0009403:	5e                   	pop    esi
c0009404:	5f                   	pop    edi
c0009405:	5d                   	pop    ebp
c0009406:	c3                   	ret    

c0009407 <idleFunction(void*)>:
c0009407:	53                   	push   ebx
c0009408:	83 ec 08             	sub    esp,0x8
c000940b:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c0009410:	48                   	dec    eax
c0009411:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c0009416:	75 01                	jne    c0009419 <idleFunction(void*)+0x12>
c0009418:	fb                   	sti    
c0009419:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c000941e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0009424:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000942b:	74 3c                	je     c0009469 <idleFunction(void*)+0x62>
c000942d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0009434:	74 33                	je     c0009469 <idleFunction(void*)+0x62>
c0009436:	31 db                	xor    ebx,ebx
c0009438:	52                   	push   edx
c0009439:	52                   	push   edx
c000943a:	68 e1 00 00 00       	push   0xe1
c000943f:	50                   	push   eax
c0009440:	e8 e5 fa ff ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c0009445:	53                   	push   ebx
c0009446:	83 e0 02             	and    eax,0x2
c0009449:	50                   	push   eax
c000944a:	68 e1 00 00 00       	push   0xe1
c000944f:	ff 35 48 80 02 c0    	push   DWORD PTR ds:0xc0028048
c0009455:	e8 fc fa ff ff       	call   c0008f56 <Computer::wrmsr(unsigned int, unsigned long long)>
c000945a:	83 c4 20             	add    esp,0x20
c000945d:	e8 52 6d ff ff       	call   c00001b4 <doTPAUSE>
c0009462:	e8 9f 95 01 00       	call   c0022a06 <idleCommon()>
c0009467:	eb f4                	jmp    c000945d <idleFunction(void*)+0x56>
c0009469:	fb                   	sti    
c000946a:	f4                   	hlt    
c000946b:	e8 96 95 01 00       	call   c0022a06 <idleCommon()>
c0009470:	eb f7                	jmp    c0009469 <idleFunction(void*)+0x62>
c0009472:	66 90                	xchg   ax,ax

c0009474 <IDTEntry::IDTEntry(bool)>:
c0009474:	83 ec 04             	sub    esp,0x4
c0009477:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000947b:	88 04 24             	mov    BYTE PTR [esp],al
c000947e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009482:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0009488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000948c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009494:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009497:	83 e2 f0             	and    edx,0xfffffff0
c000949a:	83 ca 0e             	or     edx,0xe
c000949d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094a4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00094a7:	83 e2 ef             	and    edx,0xffffffef
c00094aa:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094ad:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00094b1:	74 05                	je     c00094b8 <IDTEntry::IDTEntry(bool)+0x44>
c00094b3:	b2 03                	mov    dl,0x3
c00094b5:	eb 05                	jmp    c00094bc <IDTEntry::IDTEntry(bool)+0x48>
c00094b7:	90                   	nop
c00094b8:	b2 00                	mov    dl,0x0
c00094ba:	66 90                	xchg   ax,ax
c00094bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094c0:	83 e2 03             	and    edx,0x3
c00094c3:	88 d1                	mov    cl,dl
c00094c5:	c1 e1 05             	shl    ecx,0x5
c00094c8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00094cb:	83 e2 9f             	and    edx,0xffffff9f
c00094ce:	09 ca                	or     edx,ecx
c00094d0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094d7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00094da:	83 ca 80             	or     edx,0xffffff80
c00094dd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094e0:	90                   	nop
c00094e1:	83 c4 04             	add    esp,0x4
c00094e4:	c3                   	ret    
c00094e5:	90                   	nop

c00094e6 <IDTEntry::setOffset(unsigned int)>:
c00094e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00094ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094ee:	66 89 02             	mov    WORD PTR [edx],ax
c00094f1:	c1 e8 10             	shr    eax,0x10
c00094f4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00094f8:	c3                   	ret    
c00094f9:	90                   	nop
c00094fa:	66 90                	xchg   ax,ax

c00094fc <IDT::IDT()>:
c00094fc:	90                   	nop
c00094fd:	c3                   	ret    

c00094fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00094fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009502:	83 c0 30             	add    eax,0x30
c0009505:	c3                   	ret    

c0009506 <IDT::addEntry(IDTEntry, int)>:
c0009506:	53                   	push   ebx
c0009507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000950b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000950f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009513:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009517:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000951a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000951e:	5b                   	pop    ebx
c000951f:	c3                   	ret    

c0009520 <IDT::addEntry(int, void (*)(), bool)>:
c0009520:	53                   	push   ebx
c0009521:	83 ec 10             	sub    esp,0x10
c0009524:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0009529:	50                   	push   eax
c000952a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000952e:	53                   	push   ebx
c000952f:	e8 40 ff ff ff       	call   c0009474 <IDTEntry::IDTEntry(bool)>
c0009534:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009538:	53                   	push   ebx
c0009539:	e8 a8 ff ff ff       	call   c00094e6 <IDTEntry::setOffset(unsigned int)>
c000953e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009542:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009546:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000954a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000954e:	e8 b3 ff ff ff       	call   c0009506 <IDT::addEntry(IDTEntry, int)>
c0009553:	83 c4 30             	add    esp,0x30
c0009556:	5b                   	pop    ebx
c0009557:	c3                   	ret    

c0009558 <IDT::flush()>:
c0009558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000955c:	66 c7 05 58 80 02 c0 ff 07 	mov    WORD PTR ds:0xc0028058,0x7ff
c0009565:	a3 5a 80 02 c0       	mov    ds:0xc002805a,eax
c000956a:	0f 01 1d 58 80 02 c0 	lidtd  ds:0xc0028058
c0009571:	c3                   	ret    

c0009572 <IDT::setup()>:
c0009572:	57                   	push   edi
c0009573:	56                   	push   esi
c0009574:	53                   	push   ebx
c0009575:	83 ec 10             	sub    esp,0x10
c0009578:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000957c:	6a 00                	push   0x0
c000957e:	68 a5 03 00 c0       	push   0xc00003a5
c0009583:	6a 00                	push   0x0
c0009585:	53                   	push   ebx
c0009586:	e8 95 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000958b:	6a 00                	push   0x0
c000958d:	68 b5 03 00 c0       	push   0xc00003b5
c0009592:	6a 01                	push   0x1
c0009594:	53                   	push   ebx
c0009595:	e8 86 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000959a:	83 c4 20             	add    esp,0x20
c000959d:	6a 00                	push   0x0
c000959f:	68 bf 03 00 c0       	push   0xc00003bf
c00095a4:	6a 02                	push   0x2
c00095a6:	53                   	push   ebx
c00095a7:	e8 74 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095ac:	6a 00                	push   0x0
c00095ae:	68 c9 03 00 c0       	push   0xc00003c9
c00095b3:	6a 03                	push   0x3
c00095b5:	53                   	push   ebx
c00095b6:	e8 65 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095bb:	83 c4 20             	add    esp,0x20
c00095be:	6a 00                	push   0x0
c00095c0:	68 d3 03 00 c0       	push   0xc00003d3
c00095c5:	6a 04                	push   0x4
c00095c7:	53                   	push   ebx
c00095c8:	e8 53 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095cd:	6a 00                	push   0x0
c00095cf:	68 dd 03 00 c0       	push   0xc00003dd
c00095d4:	6a 05                	push   0x5
c00095d6:	53                   	push   ebx
c00095d7:	e8 44 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095dc:	83 c4 20             	add    esp,0x20
c00095df:	6a 00                	push   0x0
c00095e1:	68 e7 03 00 c0       	push   0xc00003e7
c00095e6:	6a 06                	push   0x6
c00095e8:	53                   	push   ebx
c00095e9:	e8 32 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095ee:	6a 00                	push   0x0
c00095f0:	68 f1 03 00 c0       	push   0xc00003f1
c00095f5:	6a 07                	push   0x7
c00095f7:	53                   	push   ebx
c00095f8:	e8 23 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095fd:	83 c4 20             	add    esp,0x20
c0009600:	6a 00                	push   0x0
c0009602:	68 fb 03 00 c0       	push   0xc00003fb
c0009607:	6a 08                	push   0x8
c0009609:	53                   	push   ebx
c000960a:	e8 11 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000960f:	6a 00                	push   0x0
c0009611:	68 03 04 00 c0       	push   0xc0000403
c0009616:	6a 09                	push   0x9
c0009618:	53                   	push   ebx
c0009619:	e8 02 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000961e:	83 c4 20             	add    esp,0x20
c0009621:	6a 00                	push   0x0
c0009623:	68 0d 04 00 c0       	push   0xc000040d
c0009628:	6a 0a                	push   0xa
c000962a:	53                   	push   ebx
c000962b:	e8 f0 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009630:	6a 00                	push   0x0
c0009632:	68 15 04 00 c0       	push   0xc0000415
c0009637:	6a 0b                	push   0xb
c0009639:	53                   	push   ebx
c000963a:	e8 e1 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000963f:	83 c4 20             	add    esp,0x20
c0009642:	6a 00                	push   0x0
c0009644:	68 1d 04 00 c0       	push   0xc000041d
c0009649:	6a 0c                	push   0xc
c000964b:	53                   	push   ebx
c000964c:	e8 cf fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009651:	6a 00                	push   0x0
c0009653:	68 25 04 00 c0       	push   0xc0000425
c0009658:	6a 0d                	push   0xd
c000965a:	53                   	push   ebx
c000965b:	e8 c0 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009660:	83 c4 20             	add    esp,0x20
c0009663:	6a 00                	push   0x0
c0009665:	68 2d 04 00 c0       	push   0xc000042d
c000966a:	6a 0e                	push   0xe
c000966c:	53                   	push   ebx
c000966d:	e8 ae fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009672:	6a 00                	push   0x0
c0009674:	68 35 04 00 c0       	push   0xc0000435
c0009679:	6a 0f                	push   0xf
c000967b:	53                   	push   ebx
c000967c:	e8 9f fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009681:	83 c4 20             	add    esp,0x20
c0009684:	6a 00                	push   0x0
c0009686:	68 3f 04 00 c0       	push   0xc000043f
c000968b:	6a 10                	push   0x10
c000968d:	53                   	push   ebx
c000968e:	e8 8d fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009693:	6a 00                	push   0x0
c0009695:	68 49 04 00 c0       	push   0xc0000449
c000969a:	6a 11                	push   0x11
c000969c:	53                   	push   ebx
c000969d:	e8 7e fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096a2:	83 c4 20             	add    esp,0x20
c00096a5:	6a 00                	push   0x0
c00096a7:	68 53 04 00 c0       	push   0xc0000453
c00096ac:	6a 12                	push   0x12
c00096ae:	53                   	push   ebx
c00096af:	e8 6c fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096b4:	6a 01                	push   0x1
c00096b6:	68 ed 04 00 c0       	push   0xc00004ed
c00096bb:	6a 60                	push   0x60
c00096bd:	53                   	push   ebx
c00096be:	e8 5d fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096c3:	83 c4 20             	add    esp,0x20
c00096c6:	6a 00                	push   0x0
c00096c8:	68 f4 04 00 c0       	push   0xc00004f4
c00096cd:	6a 20                	push   0x20
c00096cf:	53                   	push   ebx
c00096d0:	e8 4b fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096d5:	6a 00                	push   0x0
c00096d7:	68 df 04 00 c0       	push   0xc00004df
c00096dc:	6a 21                	push   0x21
c00096de:	53                   	push   ebx
c00096df:	e8 3c fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096e4:	83 c4 20             	add    esp,0x20
c00096e7:	6a 00                	push   0x0
c00096e9:	68 e6 04 00 c0       	push   0xc00004e6
c00096ee:	6a 22                	push   0x22
c00096f0:	53                   	push   ebx
c00096f1:	e8 2a fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096f6:	6a 00                	push   0x0
c00096f8:	68 5d 04 00 c0       	push   0xc000045d
c00096fd:	6a 23                	push   0x23
c00096ff:	53                   	push   ebx
c0009700:	e8 1b fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009705:	83 c4 20             	add    esp,0x20
c0009708:	6a 00                	push   0x0
c000970a:	68 67 04 00 c0       	push   0xc0000467
c000970f:	6a 24                	push   0x24
c0009711:	53                   	push   ebx
c0009712:	e8 09 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009717:	6a 00                	push   0x0
c0009719:	68 71 04 00 c0       	push   0xc0000471
c000971e:	6a 25                	push   0x25
c0009720:	53                   	push   ebx
c0009721:	e8 fa fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009726:	83 c4 20             	add    esp,0x20
c0009729:	6a 00                	push   0x0
c000972b:	68 7b 04 00 c0       	push   0xc000047b
c0009730:	6a 26                	push   0x26
c0009732:	53                   	push   ebx
c0009733:	e8 e8 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009738:	6a 00                	push   0x0
c000973a:	68 85 04 00 c0       	push   0xc0000485
c000973f:	6a 27                	push   0x27
c0009741:	53                   	push   ebx
c0009742:	e8 d9 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009747:	83 c4 20             	add    esp,0x20
c000974a:	6a 00                	push   0x0
c000974c:	68 8f 04 00 c0       	push   0xc000048f
c0009751:	6a 28                	push   0x28
c0009753:	53                   	push   ebx
c0009754:	e8 c7 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009759:	6a 00                	push   0x0
c000975b:	68 99 04 00 c0       	push   0xc0000499
c0009760:	6a 29                	push   0x29
c0009762:	53                   	push   ebx
c0009763:	e8 b8 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009768:	83 c4 20             	add    esp,0x20
c000976b:	6a 00                	push   0x0
c000976d:	68 a3 04 00 c0       	push   0xc00004a3
c0009772:	6a 2a                	push   0x2a
c0009774:	53                   	push   ebx
c0009775:	e8 a6 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000977a:	6a 00                	push   0x0
c000977c:	68 ad 04 00 c0       	push   0xc00004ad
c0009781:	6a 2b                	push   0x2b
c0009783:	53                   	push   ebx
c0009784:	e8 97 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009789:	83 c4 20             	add    esp,0x20
c000978c:	6a 00                	push   0x0
c000978e:	68 b7 04 00 c0       	push   0xc00004b7
c0009793:	6a 2c                	push   0x2c
c0009795:	53                   	push   ebx
c0009796:	e8 85 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000979b:	6a 00                	push   0x0
c000979d:	68 c1 04 00 c0       	push   0xc00004c1
c00097a2:	6a 2d                	push   0x2d
c00097a4:	53                   	push   ebx
c00097a5:	e8 76 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097aa:	83 c4 20             	add    esp,0x20
c00097ad:	6a 00                	push   0x0
c00097af:	68 cb 04 00 c0       	push   0xc00004cb
c00097b4:	6a 2e                	push   0x2e
c00097b6:	53                   	push   ebx
c00097b7:	e8 64 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097bc:	6a 00                	push   0x0
c00097be:	68 d5 04 00 c0       	push   0xc00004d5
c00097c3:	6a 2f                	push   0x2f
c00097c5:	53                   	push   ebx
c00097c6:	e8 55 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097cb:	83 c4 20             	add    esp,0x20
c00097ce:	6a 00                	push   0x0
c00097d0:	68 2b 05 00 c0       	push   0xc000052b
c00097d5:	6a 30                	push   0x30
c00097d7:	53                   	push   ebx
c00097d8:	e8 43 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097dd:	6a 00                	push   0x0
c00097df:	68 35 05 00 c0       	push   0xc0000535
c00097e4:	6a 31                	push   0x31
c00097e6:	53                   	push   ebx
c00097e7:	e8 34 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097ec:	83 c4 20             	add    esp,0x20
c00097ef:	6a 00                	push   0x0
c00097f1:	68 3f 05 00 c0       	push   0xc000053f
c00097f6:	6a 32                	push   0x32
c00097f8:	53                   	push   ebx
c00097f9:	e8 22 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097fe:	6a 00                	push   0x0
c0009800:	68 49 05 00 c0       	push   0xc0000549
c0009805:	6a 33                	push   0x33
c0009807:	53                   	push   ebx
c0009808:	e8 13 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000980d:	83 c4 20             	add    esp,0x20
c0009810:	6a 00                	push   0x0
c0009812:	68 53 05 00 c0       	push   0xc0000553
c0009817:	6a 34                	push   0x34
c0009819:	53                   	push   ebx
c000981a:	e8 01 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000981f:	6a 00                	push   0x0
c0009821:	68 5d 05 00 c0       	push   0xc000055d
c0009826:	6a 35                	push   0x35
c0009828:	53                   	push   ebx
c0009829:	e8 f2 fc ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000982e:	83 c4 20             	add    esp,0x20
c0009831:	6a 00                	push   0x0
c0009833:	68 67 05 00 c0       	push   0xc0000567
c0009838:	6a 36                	push   0x36
c000983a:	53                   	push   ebx
c000983b:	e8 e0 fc ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009840:	6a 00                	push   0x0
c0009842:	68 71 05 00 c0       	push   0xc0000571
c0009847:	6a 37                	push   0x37
c0009849:	53                   	push   ebx
c000984a:	e8 d1 fc ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000984f:	83 c4 1c             	add    esp,0x1c
c0009852:	6a 03                	push   0x3
c0009854:	6a 02                	push   0x2
c0009856:	ff 35 70 81 02 c0    	push   DWORD PTR ds:0xc0028170
c000985c:	e8 21 29 00 00       	call   c000c182 <VAS::allocatePages(int, int)>
c0009861:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009868:	89 c6                	mov    esi,eax
c000986a:	e8 a0 01 00 00       	call   c0009a0f <malloc>
c000986f:	81 c6 00 20 00 00    	add    esi,0x2000
c0009875:	89 04 24             	mov    DWORD PTR [esp],eax
c0009878:	89 c7                	mov    edi,eax
c000987a:	e8 9d 1a 00 00       	call   c000b31c <TSS::TSS()>
c000987f:	83 c4 0c             	add    esp,0xc
c0009882:	68 fb 03 00 c0       	push   0xc00003fb
c0009887:	56                   	push   esi
c0009888:	57                   	push   edi
c0009889:	e8 d2 1a 00 00       	call   c000b360 <TSS::setup(unsigned long, unsigned long)>
c000988e:	89 c6                	mov    esi,eax
c0009890:	58                   	pop    eax
c0009891:	5a                   	pop    edx
c0009892:	6a 00                	push   0x0
c0009894:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009898:	50                   	push   eax
c0009899:	e8 d6 fb ff ff       	call   c0009474 <IDTEntry::IDTEntry(bool)>
c000989e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00098a2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00098a7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00098ae:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00098b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00098b8:	80 ce 05             	or     dh,0x5
c00098bb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c00098be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00098c6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00098c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00098cc:	e8 87 fc ff ff       	call   c0009558 <IDT::flush()>
c00098d1:	83 c4 20             	add    esp,0x20
c00098d4:	5b                   	pop    ebx
c00098d5:	5e                   	pop    esi
c00098d6:	5f                   	pop    edi
c00098d7:	c3                   	ret    

c00098d8 <sbrk>:
c00098d8:	55                   	push   ebp
c00098d9:	57                   	push   edi
c00098da:	56                   	push   esi
c00098db:	53                   	push   ebx
c00098dc:	83 ec 24             	sub    esp,0x24
c00098df:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00098e3:	53                   	push   ebx
c00098e4:	68 f8 3f 02 c0       	push   0xc0023ff8
c00098e9:	e8 11 34 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00098ee:	83 c4 10             	add    esp,0x10
c00098f1:	85 db                	test   ebx,ebx
c00098f3:	74 5f                	je     c0009954 <sbrk+0x7c>
c00098f5:	78 64                	js     c000995b <sbrk+0x83>
c00098f7:	a1 b0 72 02 c0       	mov    eax,ds:0xc00272b0
c00098fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009900:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009906:	89 dd                	mov    ebp,ebx
c0009908:	78 69                	js     c0009973 <sbrk+0x9b>
c000990a:	c1 fd 0c             	sar    ebp,0xc
c000990d:	bb 00 00 00 00       	mov    ebx,0x0
c0009912:	8b 35 70 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028170
c0009918:	8b 3d b0 72 02 c0    	mov    edi,DWORD PTR ds:0xc00272b0
c000991e:	e8 a3 07 00 00       	call   c000a0c6 <Phys::allocatePage()>
c0009923:	68 01 04 00 00       	push   0x401
c0009928:	57                   	push   edi
c0009929:	50                   	push   eax
c000992a:	56                   	push   esi
c000992b:	e8 50 27 00 00       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009930:	81 05 b0 72 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00272b0,0x1000
c000993a:	43                   	inc    ebx
c000993b:	83 c4 10             	add    esp,0x10
c000993e:	39 dd                	cmp    ebp,ebx
c0009940:	75 d0                	jne    c0009912 <sbrk+0x3a>
c0009942:	0f 20 d8             	mov    eax,cr3
c0009945:	0f 22 d8             	mov    cr3,eax
c0009948:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000994c:	83 c4 1c             	add    esp,0x1c
c000994f:	5b                   	pop    ebx
c0009950:	5e                   	pop    esi
c0009951:	5f                   	pop    edi
c0009952:	5d                   	pop    ebp
c0009953:	c3                   	ret    
c0009954:	a1 b0 72 02 c0       	mov    eax,ds:0xc00272b0
c0009959:	eb f1                	jmp    c000994c <sbrk+0x74>
c000995b:	83 ec 08             	sub    esp,0x8
c000995e:	53                   	push   ebx
c000995f:	68 24 40 02 c0       	push   0xc0024024
c0009964:	e8 96 33 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009969:	83 c4 10             	add    esp,0x10
c000996c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009971:	eb d9                	jmp    c000994c <sbrk+0x74>
c0009973:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009979:	eb 8f                	jmp    c000990a <sbrk+0x32>

c000997b <mmap>:
c000997b:	83 ec 18             	sub    esp,0x18
c000997e:	68 16 40 02 c0       	push   0xc0024016
c0009983:	e8 33 b0 00 00       	call   c00149bb <Krnl::panic(char const*)>
c0009988:	b8 00 00 00 00       	mov    eax,0x0
c000998d:	83 c4 1c             	add    esp,0x1c
c0009990:	c3                   	ret    

c0009991 <munmap>:
c0009991:	83 ec 18             	sub    esp,0x18
c0009994:	68 1b 40 02 c0       	push   0xc002401b
c0009999:	e8 1d b0 00 00       	call   c00149bb <Krnl::panic(char const*)>
c000999e:	b8 00 00 00 00       	mov    eax,0x0
c00099a3:	83 c4 1c             	add    esp,0x1c
c00099a6:	c3                   	ret    

c00099a7 <liballoc_lock()>:
c00099a7:	fa                   	cli    
c00099a8:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c00099ae:	b8 00 00 00 00       	mov    eax,0x0
c00099b3:	c3                   	ret    

c00099b4 <liballoc_unlock()>:
c00099b4:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c00099b9:	48                   	dec    eax
c00099ba:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c00099bf:	75 01                	jne    c00099c2 <liballoc_unlock()+0xe>
c00099c1:	fb                   	sti    
c00099c2:	b8 00 00 00 00       	mov    eax,0x0
c00099c7:	c3                   	ret    

c00099c8 <liballoc_alloc(int)>:
c00099c8:	83 ec 10             	sub    esp,0x10
c00099cb:	6a 01                	push   0x1
c00099cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00099d1:	ff 35 70 81 02 c0    	push   DWORD PTR ds:0xc0028170
c00099d7:	e8 a6 27 00 00       	call   c000c182 <VAS::allocatePages(int, int)>
c00099dc:	83 c4 1c             	add    esp,0x1c
c00099df:	c3                   	ret    

c00099e0 <liballoc_free(void*, int)>:
c00099e0:	83 ec 14             	sub    esp,0x14
c00099e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00099e7:	ff 35 70 81 02 c0    	push   DWORD PTR ds:0xc0028170
c00099ed:	e8 3a 24 00 00       	call   c000be2c <VAS::freeAllocatedPages(unsigned long)>
c00099f2:	b8 00 00 00 00       	mov    eax,0x0
c00099f7:	83 c4 1c             	add    esp,0x1c
c00099fa:	c3                   	ret    

c00099fb <realloc>:
c00099fb:	83 ec 14             	sub    esp,0x14
c00099fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a06:	e8 55 7b ff ff       	call   c0001560 <dlrealloc>
c0009a0b:	83 c4 1c             	add    esp,0x1c
c0009a0e:	c3                   	ret    

c0009a0f <malloc>:
c0009a0f:	83 ec 18             	sub    esp,0x18
c0009a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a16:	e8 08 76 ff ff       	call   c0001023 <dlmalloc>
c0009a1b:	83 c4 1c             	add    esp,0x1c
c0009a1e:	c3                   	ret    

c0009a1f <free>:
c0009a1f:	83 ec 18             	sub    esp,0x18
c0009a22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a26:	e8 9d 72 ff ff       	call   c0000cc8 <dlfree>
c0009a2b:	83 c4 1c             	add    esp,0x1c
c0009a2e:	c3                   	ret    

c0009a2f <rfree>:
c0009a2f:	83 ec 18             	sub    esp,0x18
c0009a32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a36:	e8 8d 72 ff ff       	call   c0000cc8 <dlfree>
c0009a3b:	83 c4 1c             	add    esp,0x1c
c0009a3e:	c3                   	ret    

c0009a3f <calloc>:
c0009a3f:	56                   	push   esi
c0009a40:	53                   	push   ebx
c0009a41:	83 ec 10             	sub    esp,0x10
c0009a44:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009a48:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009a4d:	53                   	push   ebx
c0009a4e:	e8 bc ff ff ff       	call   c0009a0f <malloc>
c0009a53:	89 c6                	mov    esi,eax
c0009a55:	83 c4 0c             	add    esp,0xc
c0009a58:	53                   	push   ebx
c0009a59:	6a 00                	push   0x0
c0009a5b:	50                   	push   eax
c0009a5c:	e8 23 6c ff ff       	call   c0000684 <memset>
c0009a61:	89 f0                	mov    eax,esi
c0009a63:	83 c4 14             	add    esp,0x14
c0009a66:	5b                   	pop    ebx
c0009a67:	5e                   	pop    esi
c0009a68:	c3                   	ret    

c0009a69 <Krnl::setBootMessage(char const*)>:
c0009a69:	57                   	push   edi
c0009a6a:	56                   	push   esi
c0009a6b:	53                   	push   ebx
c0009a6c:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009a72:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009a79:	68 9e 00 00 00       	push   0x9e
c0009a7e:	6a 00                	push   0x0
c0009a80:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009a84:	56                   	push   esi
c0009a85:	e8 fa 6b ff ff       	call   c0000684 <memset>
c0009a8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009a8d:	e8 0e 6c ff ff       	call   c00006a0 <strlen>
c0009a92:	ba 50 00 00 00       	mov    edx,0x50
c0009a97:	83 c4 10             	add    esp,0x10
c0009a9a:	29 c2                	sub    edx,eax
c0009a9c:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009aa0:	d1 ea                	shr    edx,1
c0009aa2:	84 c0                	test   al,al
c0009aa4:	74 19                	je     c0009abf <Krnl::setBootMessage(char const*)+0x56>
c0009aa6:	01 d2                	add    edx,edx
c0009aa8:	43                   	inc    ebx
c0009aa9:	01 f2                	add    edx,esi
c0009aab:	80 cc 0f             	or     ah,0xf
c0009aae:	83 c2 02             	add    edx,0x2
c0009ab1:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009ab5:	43                   	inc    ebx
c0009ab6:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009abb:	84 c0                	test   al,al
c0009abd:	75 ec                	jne    c0009aab <Krnl::setBootMessage(char const*)+0x42>
c0009abf:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009ac4:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009ac9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009acb:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009ad1:	5b                   	pop    ebx
c0009ad2:	5e                   	pop    esi
c0009ad3:	5f                   	pop    edi
c0009ad4:	c3                   	ret    

c0009ad5 <kernel_main>:
c0009ad5:	57                   	push   edi
c0009ad6:	56                   	push   esi
c0009ad7:	53                   	push   ebx
c0009ad8:	83 ec 20             	sub    esp,0x20
c0009adb:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009ae0:	a3 60 80 02 c0       	mov    ds:0xc0028060,eax
c0009ae5:	f6 c4 08             	test   ah,0x8
c0009ae8:	0f 85 7a 03 00 00    	jne    c0009e68 <kernel_main+0x393>
c0009aee:	31 f6                	xor    esi,esi
c0009af0:	bf f9 03 00 00       	mov    edi,0x3f9
c0009af5:	89 f0                	mov    eax,esi
c0009af7:	89 fa                	mov    edx,edi
c0009af9:	ee                   	out    dx,al
c0009afa:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009aff:	b0 80                	mov    al,0x80
c0009b01:	89 da                	mov    edx,ebx
c0009b03:	ee                   	out    dx,al
c0009b04:	b1 03                	mov    cl,0x3
c0009b06:	ba f8 03 00 00       	mov    edx,0x3f8
c0009b0b:	88 c8                	mov    al,cl
c0009b0d:	ee                   	out    dx,al
c0009b0e:	89 f0                	mov    eax,esi
c0009b10:	89 fa                	mov    edx,edi
c0009b12:	ee                   	out    dx,al
c0009b13:	88 c8                	mov    al,cl
c0009b15:	89 da                	mov    edx,ebx
c0009b17:	ee                   	out    dx,al
c0009b18:	b0 c7                	mov    al,0xc7
c0009b1a:	ba fa 03 00 00       	mov    edx,0x3fa
c0009b1f:	ee                   	out    dx,al
c0009b20:	b0 0b                	mov    al,0xb
c0009b22:	ba fc 03 00 00       	mov    edx,0x3fc
c0009b27:	ee                   	out    dx,al
c0009b28:	83 ec 0c             	sub    esp,0xc
c0009b2b:	68 54 40 02 c0       	push   0xc0024054
c0009b30:	e8 ca 31 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009b35:	83 c4 10             	add    esp,0x10
c0009b38:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c0009b3f:	0f 85 eb 02 00 00    	jne    c0009e30 <kernel_main+0x35b>
c0009b45:	e8 d2 0c 00 00       	call   c000a81c <installVgaTextImplementation()>
c0009b4a:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c0009b51:	0f 85 94 02 00 00    	jne    c0009deb <kernel_main+0x316>
c0009b57:	0f b6 05 c0 72 02 c0 	movzx  eax,BYTE PTR ds:0xc00272c0
c0009b5e:	84 c0                	test   al,al
c0009b60:	74 7b                	je     c0009bdd <kernel_main+0x108>
c0009b62:	31 db                	xor    ebx,ebx
c0009b64:	bf 0a 00 00 00       	mov    edi,0xa
c0009b69:	be 05 00 00 00       	mov    esi,0x5
c0009b6e:	31 c9                	xor    ecx,ecx
c0009b70:	eb 2a                	jmp    c0009b9c <kernel_main+0xc7>
c0009b72:	3c 0d                	cmp    al,0xd
c0009b74:	74 1a                	je     c0009b90 <kernel_main+0xbb>
c0009b76:	3c 0a                	cmp    al,0xa
c0009b78:	74 40                	je     c0009bba <kernel_main+0xe5>
c0009b7a:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009b7d:	80 cc 0e             	or     ah,0xe
c0009b80:	c1 e2 04             	shl    edx,0x4
c0009b83:	01 ca                	add    edx,ecx
c0009b85:	41                   	inc    ecx
c0009b86:	01 fa                	add    edx,edi
c0009b88:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009b90:	43                   	inc    ebx
c0009b91:	0f b6 83 c0 72 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8d40]
c0009b98:	84 c0                	test   al,al
c0009b9a:	74 32                	je     c0009bce <kernel_main+0xf9>
c0009b9c:	80 b9 f6 72 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd8d0a],0xdb
c0009ba3:	75 cd                	jne    c0009b72 <kernel_main+0x9d>
c0009ba5:	0f b6 91 f5 72 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd8d0b]
c0009bac:	83 e2 fe             	and    edx,0xfffffffe
c0009baf:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009bb5:	75 bb                	jne    c0009b72 <kernel_main+0x9d>
c0009bb7:	47                   	inc    edi
c0009bb8:	eb b8                	jmp    c0009b72 <kernel_main+0x9d>
c0009bba:	43                   	inc    ebx
c0009bbb:	46                   	inc    esi
c0009bbc:	31 c9                	xor    ecx,ecx
c0009bbe:	0f b6 83 c0 72 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8d40]
c0009bc5:	bf 0a 00 00 00       	mov    edi,0xa
c0009bca:	84 c0                	test   al,al
c0009bcc:	75 ce                	jne    c0009b9c <kernel_main+0xc7>
c0009bce:	8b 15 60 80 02 c0    	mov    edx,DWORD PTR ds:0xc0028060
c0009bd4:	80 e6 08             	and    dh,0x8
c0009bd7:	0f 85 bf 00 00 00    	jne    c0009c9c <kernel_main+0x1c7>
c0009bdd:	83 ec 0c             	sub    esp,0xc
c0009be0:	68 f0 40 02 c0       	push   0xc00240f0
c0009be5:	e8 7f fe ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009bea:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009bef:	05 ff 0f 00 00       	add    eax,0xfff
c0009bf4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009bf9:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bfc:	e8 44 06 00 00       	call   c000a245 <Phys::physicalMemorySetup(unsigned int)>
c0009c01:	83 c4 10             	add    esp,0x10
c0009c04:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c0009c0b:	0f 85 a2 01 00 00    	jne    c0009db3 <kernel_main+0x2de>
c0009c11:	e8 82 1f 00 00       	call   c000bb98 <Virt::virtualMemorySetup()>
c0009c16:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c0009c1d:	0f 85 58 01 00 00    	jne    c0009d7b <kernel_main+0x2a6>
c0009c23:	83 ec 0c             	sub    esp,0xc
c0009c26:	8d 74 24 18          	lea    esi,[esp+0x18]
c0009c2a:	56                   	push   esi
c0009c2b:	e8 24 20 00 00       	call   c000bc54 <VAS::VAS()>
c0009c30:	83 c4 10             	add    esp,0x10
c0009c33:	89 35 70 81 02 c0    	mov    DWORD PTR ds:0xc0028170,esi
c0009c39:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c0009c40:	0f 85 fd 00 00 00    	jne    c0009d43 <kernel_main+0x26e>
c0009c46:	e8 d5 63 ff ff       	call   c0000020 <callGlobalConstructors>
c0009c4b:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c0009c52:	0f 85 b3 00 00 00    	jne    c0009d0b <kernel_main+0x236>
c0009c58:	83 ec 0c             	sub    esp,0xc
c0009c5b:	68 ec 01 00 00       	push   0x1ec
c0009c60:	e8 aa fd ff ff       	call   c0009a0f <malloc>
c0009c65:	89 c3                	mov    ebx,eax
c0009c67:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c6a:	e8 51 ef ff ff       	call   c0008bc0 <Computer::Computer()>
c0009c6f:	83 c4 10             	add    esp,0x10
c0009c72:	89 1d 48 80 02 c0    	mov    DWORD PTR ds:0xc0028048,ebx
c0009c78:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c0009c7f:	75 53                	jne    c0009cd4 <kernel_main+0x1ff>
c0009c81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009c83:	6a 00                	push   0x0
c0009c85:	6a 00                	push   0x0
c0009c87:	6a 00                	push   0x0
c0009c89:	53                   	push   ebx
c0009c8a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009c8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0009c90:	e8 6f 22 00 00       	call   c000bf04 <VAS::~VAS()>
c0009c95:	83 c4 30             	add    esp,0x30
c0009c98:	5b                   	pop    ebx
c0009c99:	5e                   	pop    esi
c0009c9a:	5f                   	pop    edi
c0009c9b:	c3                   	ret    
c0009c9c:	83 ec 0c             	sub    esp,0xc
c0009c9f:	68 9f 40 02 c0       	push   0xc002409f
c0009ca4:	e8 c0 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009ca9:	83 c4 10             	add    esp,0x10
c0009cac:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c0009cb3:	0f 85 24 ff ff ff    	jne    c0009bdd <kernel_main+0x108>
c0009cb9:	eb 04                	jmp    c0009cbf <kernel_main+0x1ea>
c0009cbb:	3c 1c                	cmp    al,0x1c
c0009cbd:	74 06                	je     c0009cc5 <kernel_main+0x1f0>
c0009cbf:	e4 60                	in     al,0x60
c0009cc1:	3c 5a                	cmp    al,0x5a
c0009cc3:	75 f6                	jne    c0009cbb <kernel_main+0x1e6>
c0009cc5:	e4 60                	in     al,0x60
c0009cc7:	3c 5a                	cmp    al,0x5a
c0009cc9:	74 fa                	je     c0009cc5 <kernel_main+0x1f0>
c0009ccb:	3c 1c                	cmp    al,0x1c
c0009ccd:	74 f6                	je     c0009cc5 <kernel_main+0x1f0>
c0009ccf:	e9 09 ff ff ff       	jmp    c0009bdd <kernel_main+0x108>
c0009cd4:	83 ec 0c             	sub    esp,0xc
c0009cd7:	68 de 40 02 c0       	push   0xc00240de
c0009cdc:	e8 88 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c0009ceb:	74 0c                	je     c0009cf9 <kernel_main+0x224>
c0009ced:	8b 1d 48 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028048
c0009cf3:	eb 8c                	jmp    c0009c81 <kernel_main+0x1ac>
c0009cf5:	3c 1c                	cmp    al,0x1c
c0009cf7:	74 06                	je     c0009cff <kernel_main+0x22a>
c0009cf9:	e4 60                	in     al,0x60
c0009cfb:	3c 5a                	cmp    al,0x5a
c0009cfd:	75 f6                	jne    c0009cf5 <kernel_main+0x220>
c0009cff:	e4 60                	in     al,0x60
c0009d01:	3c 5a                	cmp    al,0x5a
c0009d03:	74 fa                	je     c0009cff <kernel_main+0x22a>
c0009d05:	3c 1c                	cmp    al,0x1c
c0009d07:	74 f6                	je     c0009cff <kernel_main+0x22a>
c0009d09:	eb e2                	jmp    c0009ced <kernel_main+0x218>
c0009d0b:	83 ec 0c             	sub    esp,0xc
c0009d0e:	68 cb 40 02 c0       	push   0xc00240cb
c0009d13:	e8 51 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009d18:	83 c4 10             	add    esp,0x10
c0009d1b:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c0009d22:	0f 85 30 ff ff ff    	jne    c0009c58 <kernel_main+0x183>
c0009d28:	eb 04                	jmp    c0009d2e <kernel_main+0x259>
c0009d2a:	3c 1c                	cmp    al,0x1c
c0009d2c:	74 06                	je     c0009d34 <kernel_main+0x25f>
c0009d2e:	e4 60                	in     al,0x60
c0009d30:	3c 5a                	cmp    al,0x5a
c0009d32:	75 f6                	jne    c0009d2a <kernel_main+0x255>
c0009d34:	e4 60                	in     al,0x60
c0009d36:	3c 5a                	cmp    al,0x5a
c0009d38:	74 fa                	je     c0009d34 <kernel_main+0x25f>
c0009d3a:	3c 1c                	cmp    al,0x1c
c0009d3c:	74 f6                	je     c0009d34 <kernel_main+0x25f>
c0009d3e:	e9 15 ff ff ff       	jmp    c0009c58 <kernel_main+0x183>
c0009d43:	83 ec 0c             	sub    esp,0xc
c0009d46:	68 c1 40 02 c0       	push   0xc00240c1
c0009d4b:	e8 19 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009d50:	83 c4 10             	add    esp,0x10
c0009d53:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c0009d5a:	0f 85 e6 fe ff ff    	jne    c0009c46 <kernel_main+0x171>
c0009d60:	eb 04                	jmp    c0009d66 <kernel_main+0x291>
c0009d62:	3c 1c                	cmp    al,0x1c
c0009d64:	74 06                	je     c0009d6c <kernel_main+0x297>
c0009d66:	e4 60                	in     al,0x60
c0009d68:	3c 5a                	cmp    al,0x5a
c0009d6a:	75 f6                	jne    c0009d62 <kernel_main+0x28d>
c0009d6c:	e4 60                	in     al,0x60
c0009d6e:	3c 5a                	cmp    al,0x5a
c0009d70:	74 fa                	je     c0009d6c <kernel_main+0x297>
c0009d72:	3c 1c                	cmp    al,0x1c
c0009d74:	74 f6                	je     c0009d6c <kernel_main+0x297>
c0009d76:	e9 cb fe ff ff       	jmp    c0009c46 <kernel_main+0x171>
c0009d7b:	83 ec 0c             	sub    esp,0xc
c0009d7e:	68 b6 40 02 c0       	push   0xc00240b6
c0009d83:	e8 e1 fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009d88:	83 c4 10             	add    esp,0x10
c0009d8b:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c0009d92:	0f 85 8b fe ff ff    	jne    c0009c23 <kernel_main+0x14e>
c0009d98:	eb 04                	jmp    c0009d9e <kernel_main+0x2c9>
c0009d9a:	3c 1c                	cmp    al,0x1c
c0009d9c:	74 06                	je     c0009da4 <kernel_main+0x2cf>
c0009d9e:	e4 60                	in     al,0x60
c0009da0:	3c 5a                	cmp    al,0x5a
c0009da2:	75 f6                	jne    c0009d9a <kernel_main+0x2c5>
c0009da4:	e4 60                	in     al,0x60
c0009da6:	3c 5a                	cmp    al,0x5a
c0009da8:	74 fa                	je     c0009da4 <kernel_main+0x2cf>
c0009daa:	3c 1c                	cmp    al,0x1c
c0009dac:	74 f6                	je     c0009da4 <kernel_main+0x2cf>
c0009dae:	e9 70 fe ff ff       	jmp    c0009c23 <kernel_main+0x14e>
c0009db3:	83 ec 0c             	sub    esp,0xc
c0009db6:	68 ab 40 02 c0       	push   0xc00240ab
c0009dbb:	e8 a9 fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009dc0:	83 c4 10             	add    esp,0x10
c0009dc3:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c0009dca:	0f 85 41 fe ff ff    	jne    c0009c11 <kernel_main+0x13c>
c0009dd0:	eb 04                	jmp    c0009dd6 <kernel_main+0x301>
c0009dd2:	3c 1c                	cmp    al,0x1c
c0009dd4:	74 06                	je     c0009ddc <kernel_main+0x307>
c0009dd6:	e4 60                	in     al,0x60
c0009dd8:	3c 5a                	cmp    al,0x5a
c0009dda:	75 f6                	jne    c0009dd2 <kernel_main+0x2fd>
c0009ddc:	e4 60                	in     al,0x60
c0009dde:	3c 5a                	cmp    al,0x5a
c0009de0:	74 fa                	je     c0009ddc <kernel_main+0x307>
c0009de2:	3c 1c                	cmp    al,0x1c
c0009de4:	74 f6                	je     c0009ddc <kernel_main+0x307>
c0009de6:	e9 26 fe ff ff       	jmp    c0009c11 <kernel_main+0x13c>
c0009deb:	83 ec 0c             	sub    esp,0xc
c0009dee:	68 8d 40 02 c0       	push   0xc002408d
c0009df3:	e8 71 fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009df8:	8b 15 60 80 02 c0    	mov    edx,DWORD PTR ds:0xc0028060
c0009dfe:	83 c4 10             	add    esp,0x10
c0009e01:	f6 c2 80             	test   dl,0x80
c0009e04:	74 18                	je     c0009e1e <kernel_main+0x349>
c0009e06:	0f b6 05 c0 72 02 c0 	movzx  eax,BYTE PTR ds:0xc00272c0
c0009e0d:	84 c0                	test   al,al
c0009e0f:	0f 85 4d fd ff ff    	jne    c0009b62 <kernel_main+0x8d>
c0009e15:	e9 ba fd ff ff       	jmp    c0009bd4 <kernel_main+0xff>
c0009e1a:	3c 1c                	cmp    al,0x1c
c0009e1c:	74 06                	je     c0009e24 <kernel_main+0x34f>
c0009e1e:	e4 60                	in     al,0x60
c0009e20:	3c 5a                	cmp    al,0x5a
c0009e22:	75 f6                	jne    c0009e1a <kernel_main+0x345>
c0009e24:	e4 60                	in     al,0x60
c0009e26:	3c 5a                	cmp    al,0x5a
c0009e28:	74 fa                	je     c0009e24 <kernel_main+0x34f>
c0009e2a:	3c 1c                	cmp    al,0x1c
c0009e2c:	74 f6                	je     c0009e24 <kernel_main+0x34f>
c0009e2e:	eb d6                	jmp    c0009e06 <kernel_main+0x331>
c0009e30:	83 ec 0c             	sub    esp,0xc
c0009e33:	68 7e 40 02 c0       	push   0xc002407e
c0009e38:	e8 2c fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009e3d:	83 c4 10             	add    esp,0x10
c0009e40:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c0009e47:	0f 85 f8 fc ff ff    	jne    c0009b45 <kernel_main+0x70>
c0009e4d:	eb 04                	jmp    c0009e53 <kernel_main+0x37e>
c0009e4f:	3c 1c                	cmp    al,0x1c
c0009e51:	74 06                	je     c0009e59 <kernel_main+0x384>
c0009e53:	e4 60                	in     al,0x60
c0009e55:	3c 5a                	cmp    al,0x5a
c0009e57:	75 f6                	jne    c0009e4f <kernel_main+0x37a>
c0009e59:	e4 60                	in     al,0x60
c0009e5b:	3c 5a                	cmp    al,0x5a
c0009e5d:	74 fa                	je     c0009e59 <kernel_main+0x384>
c0009e5f:	3c 1c                	cmp    al,0x1c
c0009e61:	74 f6                	je     c0009e59 <kernel_main+0x384>
c0009e63:	e9 dd fc ff ff       	jmp    c0009b45 <kernel_main+0x70>
c0009e68:	83 ec 0c             	sub    esp,0xc
c0009e6b:	68 6b 40 02 c0       	push   0xc002406b
c0009e70:	e8 f4 fb ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009e75:	83 c4 10             	add    esp,0x10
c0009e78:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c0009e7f:	0f 85 69 fc ff ff    	jne    c0009aee <kernel_main+0x19>
c0009e85:	eb 04                	jmp    c0009e8b <kernel_main+0x3b6>
c0009e87:	3c 1c                	cmp    al,0x1c
c0009e89:	74 06                	je     c0009e91 <kernel_main+0x3bc>
c0009e8b:	e4 60                	in     al,0x60
c0009e8d:	3c 5a                	cmp    al,0x5a
c0009e8f:	75 f6                	jne    c0009e87 <kernel_main+0x3b2>
c0009e91:	e4 60                	in     al,0x60
c0009e93:	3c 5a                	cmp    al,0x5a
c0009e95:	74 fa                	je     c0009e91 <kernel_main+0x3bc>
c0009e97:	3c 1c                	cmp    al,0x1c
c0009e99:	74 f6                	je     c0009e91 <kernel_main+0x3bc>
c0009e9b:	e9 4e fc ff ff       	jmp    c0009aee <kernel_main+0x19>

c0009ea0 <Phys::allocateDMA(unsigned long)>:
c0009ea0:	55                   	push   ebp
c0009ea1:	31 ed                	xor    ebp,ebp
c0009ea3:	57                   	push   edi
c0009ea4:	56                   	push   esi
c0009ea5:	53                   	push   ebx
c0009ea6:	31 db                	xor    ebx,ebx
c0009ea8:	83 ec 28             	sub    esp,0x28
c0009eab:	68 0f 41 02 c0       	push   0xc002410f
c0009eb0:	e8 4a 2e 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009eb5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009eb9:	83 c4 10             	add    esp,0x10
c0009ebc:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0009ec2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009eca:	c1 ef 0c             	shr    edi,0xc
c0009ecd:	31 c0                	xor    eax,eax
c0009ecf:	eb 19                	jmp    c0009eea <Phys::allocateDMA(unsigned long)+0x4a>
c0009ed1:	85 c0                	test   eax,eax
c0009ed3:	75 06                	jne    c0009edb <Phys::allocateDMA(unsigned long)+0x3b>
c0009ed5:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009ed9:	89 dd                	mov    ebp,ebx
c0009edb:	8d 70 01             	lea    esi,[eax+0x1]
c0009ede:	39 f7                	cmp    edi,esi
c0009ee0:	74 3f                	je     c0009f21 <Phys::allocateDMA(unsigned long)+0x81>
c0009ee2:	89 f0                	mov    eax,esi
c0009ee4:	43                   	inc    ebx
c0009ee5:	83 fb 0f             	cmp    ebx,0xf
c0009ee8:	7f 11                	jg     c0009efb <Phys::allocateDMA(unsigned long)+0x5b>
c0009eea:	80 bb 7c 80 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd7f84],0x0
c0009ef1:	74 de                	je     c0009ed1 <Phys::allocateDMA(unsigned long)+0x31>
c0009ef3:	31 c0                	xor    eax,eax
c0009ef5:	43                   	inc    ebx
c0009ef6:	83 fb 0f             	cmp    ebx,0xf
c0009ef9:	7e ef                	jle    c0009eea <Phys::allocateDMA(unsigned long)+0x4a>
c0009efb:	83 ec 0c             	sub    esp,0xc
c0009efe:	68 02 6f 02 c0       	push   0xc0026f02
c0009f03:	e8 f7 2d 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009f08:	c7 04 24 f8 41 02 c0 	mov    DWORD PTR [esp],0xc00241f8
c0009f0f:	e8 a7 aa 00 00       	call   c00149bb <Krnl::panic(char const*)>
c0009f14:	83 c4 10             	add    esp,0x10
c0009f17:	31 c0                	xor    eax,eax
c0009f19:	83 c4 1c             	add    esp,0x1c
c0009f1c:	5b                   	pop    ebx
c0009f1d:	5e                   	pop    esi
c0009f1e:	5f                   	pop    edi
c0009f1f:	5d                   	pop    ebp
c0009f20:	c3                   	ret    
c0009f21:	89 e9                	mov    ecx,ebp
c0009f23:	c1 f9 04             	sar    ecx,0x4
c0009f26:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009f2a:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0009f2e:	89 ca                	mov    edx,ecx
c0009f30:	4a                   	dec    edx
c0009f31:	79 03                	jns    c0009f36 <Phys::allocateDMA(unsigned long)+0x96>
c0009f33:	8d 51 0e             	lea    edx,[ecx+0xe]
c0009f36:	c1 fa 04             	sar    edx,0x4
c0009f39:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0009f3d:	74 08                	je     c0009f47 <Phys::allocateDMA(unsigned long)+0xa7>
c0009f3f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f43:	31 c0                	xor    eax,eax
c0009f45:	eb ae                	jmp    c0009ef5 <Phys::allocateDMA(unsigned long)+0x55>
c0009f47:	85 f6                	test   esi,esi
c0009f49:	74 15                	je     c0009f60 <Phys::allocateDMA(unsigned long)+0xc0>
c0009f4b:	8d 95 7c 80 02 c0    	lea    edx,[ebp-0x3ffd7f84]
c0009f51:	8d 84 05 7d 80 02 c0 	lea    eax,[ebp+eax*1-0x3ffd7f83]
c0009f58:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009f5b:	42                   	inc    edx
c0009f5c:	39 d0                	cmp    eax,edx
c0009f5e:	75 f8                	jne    c0009f58 <Phys::allocateDMA(unsigned long)+0xb8>
c0009f60:	83 ec 0c             	sub    esp,0xc
c0009f63:	01 3d 74 80 02 c0    	add    DWORD PTR ds:0xc0028074,edi
c0009f69:	68 28 41 02 c0       	push   0xc0024128
c0009f6e:	e8 8c 2d 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009f73:	83 c4 10             	add    esp,0x10
c0009f76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f7a:	85 c0                	test   eax,eax
c0009f7c:	74 23                	je     c0009fa1 <Phys::allocateDMA(unsigned long)+0x101>
c0009f7e:	83 ec 0c             	sub    esp,0xc
c0009f81:	68 e0 6e 02 c0       	push   0xc0026ee0
c0009f86:	e8 74 2d 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009f8b:	c7 04 24 f8 41 02 c0 	mov    DWORD PTR [esp],0xc00241f8
c0009f92:	e8 24 aa 00 00       	call   c00149bb <Krnl::panic(char const*)>
c0009f97:	83 c4 10             	add    esp,0x10
c0009f9a:	89 f0                	mov    eax,esi
c0009f9c:	e9 43 ff ff ff       	jmp    c0009ee4 <Phys::allocateDMA(unsigned long)+0x44>
c0009fa1:	c1 e5 0c             	shl    ebp,0xc
c0009fa4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0009faa:	e9 6a ff ff ff       	jmp    c0009f19 <Phys::allocateDMA(unsigned long)+0x79>

c0009faf <Phys::freeDMA(unsigned long, unsigned long)>:
c0009faf:	83 ec 18             	sub    esp,0x18
c0009fb2:	68 3f 41 02 c0       	push   0xc002413f
c0009fb7:	e8 43 2d 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009fbc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009fc0:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0009fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009fca:	c1 ea 0c             	shr    edx,0xc
c0009fcd:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0009fd2:	29 15 74 80 02 c0    	sub    DWORD PTR ds:0xc0028074,edx
c0009fd8:	c1 e8 0c             	shr    eax,0xc
c0009fdb:	83 c4 10             	add    esp,0x10
c0009fde:	85 d2                	test   edx,edx
c0009fe0:	74 0f                	je     c0009ff1 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c0009fe2:	05 7c 80 02 c0       	add    eax,0xc002807c
c0009fe7:	01 c2                	add    edx,eax
c0009fe9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009fec:	40                   	inc    eax
c0009fed:	39 d0                	cmp    eax,edx
c0009fef:	75 f8                	jne    c0009fe9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0009ff1:	83 c4 0c             	add    esp,0xc
c0009ff4:	c3                   	ret    

c0009ff5 <Phys::setPageState(unsigned long, bool)>:
c0009ff5:	56                   	push   esi
c0009ff6:	ba 01 00 00 00       	mov    edx,0x1
c0009ffb:	53                   	push   ebx
c0009ffc:	8b 35 04 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027404
c000a002:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a006:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a00a:	89 c8                	mov    eax,ecx
c000a00c:	83 e1 07             	and    ecx,0x7
c000a00f:	c1 e8 03             	shr    eax,0x3
c000a012:	d3 e3                	shl    ebx,cl
c000a014:	01 c6                	add    esi,eax
c000a016:	d3 e2                	shl    edx,cl
c000a018:	f7 d2                	not    edx
c000a01a:	20 16                	and    BYTE PTR [esi],dl
c000a01c:	03 05 04 74 02 c0    	add    eax,DWORD PTR ds:0xc0027404
c000a022:	08 18                	or     BYTE PTR [eax],bl
c000a024:	5b                   	pop    ebx
c000a025:	5e                   	pop    esi
c000a026:	c3                   	ret    

c000a027 <Phys::getPageState(unsigned long)>:
c000a027:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a02b:	8b 15 04 74 02 c0    	mov    edx,DWORD PTR ds:0xc0027404
c000a031:	89 c8                	mov    eax,ecx
c000a033:	83 e1 07             	and    ecx,0x7
c000a036:	c1 e8 03             	shr    eax,0x3
c000a039:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000a03d:	d3 f8                	sar    eax,cl
c000a03f:	83 e0 01             	and    eax,0x1
c000a042:	c3                   	ret    

c000a043 <Phys::freePage(unsigned long)>:
c000a043:	53                   	push   ebx
c000a044:	83 ec 10             	sub    esp,0x10
c000a047:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a04b:	53                   	push   ebx
c000a04c:	68 55 41 02 c0       	push   0xc0024155
c000a051:	e8 a9 2c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a056:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a05c:	83 c4 10             	add    esp,0x10
c000a05f:	3d ff ff 00 00       	cmp    eax,0xffff
c000a064:	76 3d                	jbe    c000a0a3 <Phys::freePage(unsigned long)+0x60>
c000a066:	83 ec 0c             	sub    esp,0xc
c000a069:	c1 eb 0c             	shr    ebx,0xc
c000a06c:	53                   	push   ebx
c000a06d:	e8 b5 ff ff ff       	call   c000a027 <Phys::getPageState(unsigned long)>
c000a072:	83 c4 10             	add    esp,0x10
c000a075:	84 c0                	test   al,al
c000a077:	74 19                	je     c000a092 <Phys::freePage(unsigned long)+0x4f>
c000a079:	83 ec 08             	sub    esp,0x8
c000a07c:	ff 0d 74 80 02 c0    	dec    DWORD PTR ds:0xc0028074
c000a082:	6a 00                	push   0x0
c000a084:	53                   	push   ebx
c000a085:	e8 6b ff ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a08a:	83 c4 10             	add    esp,0x10
c000a08d:	83 c4 08             	add    esp,0x8
c000a090:	5b                   	pop    ebx
c000a091:	c3                   	ret    
c000a092:	c7 44 24 10 7f 41 02 c0 	mov    DWORD PTR [esp+0x10],0xc002417f
c000a09a:	83 c4 08             	add    esp,0x8
c000a09d:	5b                   	pop    ebx
c000a09e:	e9 18 a9 00 00       	jmp    c00149bb <Krnl::panic(char const*)>
c000a0a3:	83 ec 08             	sub    esp,0x8
c000a0a6:	53                   	push   ebx
c000a0a7:	68 68 41 02 c0       	push   0xc0024168
c000a0ac:	e8 4e 2c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a0b1:	58                   	pop    eax
c000a0b2:	5a                   	pop    edx
c000a0b3:	68 00 10 00 00       	push   0x1000
c000a0b8:	53                   	push   ebx
c000a0b9:	e8 f1 fe ff ff       	call   c0009faf <Phys::freeDMA(unsigned long, unsigned long)>
c000a0be:	83 c4 10             	add    esp,0x10
c000a0c1:	83 c4 08             	add    esp,0x8
c000a0c4:	5b                   	pop    ebx
c000a0c5:	c3                   	ret    

c000a0c6 <Phys::allocatePage()>:
c000a0c6:	56                   	push   esi
c000a0c7:	53                   	push   ebx
c000a0c8:	83 ec 14             	sub    esp,0x14
c000a0cb:	8b 35 68 80 02 c0    	mov    esi,DWORD PTR ds:0xc0028068
c000a0d1:	89 f3                	mov    ebx,esi
c000a0d3:	eb 0a                	jmp    c000a0df <Phys::allocatePage()+0x19>
c000a0d5:	89 1d 68 80 02 c0    	mov    DWORD PTR ds:0xc0028068,ebx
c000a0db:	39 de                	cmp    esi,ebx
c000a0dd:	74 24                	je     c000a103 <Phys::allocatePage()+0x3d>
c000a0df:	53                   	push   ebx
c000a0e0:	e8 42 ff ff ff       	call   c000a027 <Phys::getPageState(unsigned long)>
c000a0e5:	5a                   	pop    edx
c000a0e6:	84 c0                	test   al,al
c000a0e8:	74 69                	je     c000a153 <Phys::allocatePage()+0x8d>
c000a0ea:	43                   	inc    ebx
c000a0eb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a0f1:	75 e2                	jne    c000a0d5 <Phys::allocatePage()+0xf>
c000a0f3:	31 db                	xor    ebx,ebx
c000a0f5:	c7 05 68 80 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028068,0x0
c000a0ff:	39 de                	cmp    esi,ebx
c000a101:	75 dc                	jne    c000a0df <Phys::allocatePage()+0x19>
c000a103:	83 ec 0c             	sub    esp,0xc
c000a106:	80 35 8c 80 02 c0 01 	xor    BYTE PTR ds:0xc002808c,0x1
c000a10d:	68 20 42 02 c0       	push   0xc0024220
c000a112:	e8 e8 2b 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a117:	58                   	pop    eax
c000a118:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a11d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a120:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a126:	e8 63 28 00 00       	call   c000c98e <VAS::scanForEviction()>
c000a12b:	83 c4 10             	add    esp,0x10
c000a12e:	85 c0                	test   eax,eax
c000a130:	75 62                	jne    c000a194 <Phys::allocatePage()+0xce>
c000a132:	83 ec 0c             	sub    esp,0xc
c000a135:	68 44 42 02 c0       	push   0xc0024244
c000a13a:	e8 7c a8 00 00       	call   c00149bb <Krnl::panic(char const*)>
c000a13f:	83 c4 10             	add    esp,0x10
c000a142:	8b 1d 68 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028068
c000a148:	53                   	push   ebx
c000a149:	e8 d9 fe ff ff       	call   c000a027 <Phys::getPageState(unsigned long)>
c000a14e:	5a                   	pop    edx
c000a14f:	84 c0                	test   al,al
c000a151:	75 97                	jne    c000a0ea <Phys::allocatePage()+0x24>
c000a153:	6a 01                	push   0x1
c000a155:	53                   	push   ebx
c000a156:	e8 9a fe ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a15b:	5a                   	pop    edx
c000a15c:	a1 74 80 02 c0       	mov    eax,ds:0xc0028074
c000a161:	59                   	pop    ecx
c000a162:	40                   	inc    eax
c000a163:	8b 15 68 80 02 c0    	mov    edx,DWORD PTR ds:0xc0028068
c000a169:	a3 74 80 02 c0       	mov    ds:0xc0028074,eax
c000a16e:	c1 e2 0c             	shl    edx,0xc
c000a171:	52                   	push   edx
c000a172:	ff 35 78 80 02 c0    	push   DWORD PTR ds:0xc0028078
c000a178:	50                   	push   eax
c000a179:	68 95 41 02 c0       	push   0xc0024195
c000a17e:	e8 7c 2b 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a183:	a1 68 80 02 c0       	mov    eax,ds:0xc0028068
c000a188:	83 c4 10             	add    esp,0x10
c000a18b:	c1 e0 0c             	shl    eax,0xc
c000a18e:	83 c4 14             	add    esp,0x14
c000a191:	5b                   	pop    ebx
c000a192:	5e                   	pop    esi
c000a193:	c3                   	ret    
c000a194:	83 ec 08             	sub    esp,0x8
c000a197:	89 c2                	mov    edx,eax
c000a199:	6a 01                	push   0x1
c000a19b:	c1 ea 0c             	shr    edx,0xc
c000a19e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1a2:	52                   	push   edx
c000a1a3:	e8 4d fe ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a1a8:	83 c4 10             	add    esp,0x10
c000a1ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1af:	eb dd                	jmp    c000a18e <Phys::allocatePage()+0xc8>

c000a1b1 <Phys::allocateContiguousPages(int)>:
c000a1b1:	57                   	push   edi
c000a1b2:	56                   	push   esi
c000a1b3:	53                   	push   ebx
c000a1b4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a1b8:	fa                   	cli    
c000a1b9:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c000a1bf:	31 db                	xor    ebx,ebx
c000a1c1:	85 db                	test   ebx,ebx
c000a1c3:	75 11                	jne    c000a1d6 <Phys::allocateContiguousPages(int)+0x25>
c000a1c5:	e8 fc fe ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000a1ca:	83 fe 01             	cmp    esi,0x1
c000a1cd:	89 c7                	mov    edi,eax
c000a1cf:	74 21                	je     c000a1f2 <Phys::allocateContiguousPages(int)+0x41>
c000a1d1:	bb 01 00 00 00       	mov    ebx,0x1
c000a1d6:	e8 eb fe ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000a1db:	89 da                	mov    edx,ebx
c000a1dd:	c1 e2 0c             	shl    edx,0xc
c000a1e0:	01 fa                	add    edx,edi
c000a1e2:	39 c2                	cmp    edx,eax
c000a1e4:	74 20                	je     c000a206 <Phys::allocateContiguousPages(int)+0x55>
c000a1e6:	bb 01 00 00 00       	mov    ebx,0x1
c000a1eb:	89 c7                	mov    edi,eax
c000a1ed:	83 fe 01             	cmp    esi,0x1
c000a1f0:	75 e4                	jne    c000a1d6 <Phys::allocateContiguousPages(int)+0x25>
c000a1f2:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000a1f7:	48                   	dec    eax
c000a1f8:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c000a1fd:	75 01                	jne    c000a200 <Phys::allocateContiguousPages(int)+0x4f>
c000a1ff:	fb                   	sti    
c000a200:	89 f8                	mov    eax,edi
c000a202:	5b                   	pop    ebx
c000a203:	5e                   	pop    esi
c000a204:	5f                   	pop    edi
c000a205:	c3                   	ret    
c000a206:	43                   	inc    ebx
c000a207:	39 f3                	cmp    ebx,esi
c000a209:	75 b6                	jne    c000a1c1 <Phys::allocateContiguousPages(int)+0x10>
c000a20b:	eb e5                	jmp    c000a1f2 <Phys::allocateContiguousPages(int)+0x41>

c000a20d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a20d:	56                   	push   esi
c000a20e:	53                   	push   ebx
c000a20f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a213:	39 1d 6c 80 02 c0    	cmp    DWORD PTR ds:0xc002806c,ebx
c000a219:	73 06                	jae    c000a221 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a21b:	89 1d 6c 80 02 c0    	mov    DWORD PTR ds:0xc002806c,ebx
c000a221:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a225:	c1 eb 0c             	shr    ebx,0xc
c000a228:	c1 e8 0c             	shr    eax,0xc
c000a22b:	39 d8                	cmp    eax,ebx
c000a22d:	73 13                	jae    c000a242 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a22f:	6a 00                	push   0x0
c000a231:	8d 70 01             	lea    esi,[eax+0x1]
c000a234:	50                   	push   eax
c000a235:	e8 bb fd ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a23a:	5a                   	pop    edx
c000a23b:	89 f0                	mov    eax,esi
c000a23d:	59                   	pop    ecx
c000a23e:	39 f3                	cmp    ebx,esi
c000a240:	75 ed                	jne    c000a22f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a242:	5b                   	pop    ebx
c000a243:	5e                   	pop    esi
c000a244:	c3                   	ret    

c000a245 <Phys::physicalMemorySetup(unsigned int)>:
c000a245:	55                   	push   ebp
c000a246:	57                   	push   edi
c000a247:	56                   	push   esi
c000a248:	53                   	push   ebx
c000a249:	31 db                	xor    ebx,ebx
c000a24b:	83 ec 40             	sub    esp,0x40
c000a24e:	6a 10                	push   0x10
c000a250:	6a 00                	push   0x0
c000a252:	68 7c 80 02 c0       	push   0xc002807c
c000a257:	e8 28 64 ff ff       	call   c0000684 <memset>
c000a25c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a260:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a265:	05 00 10 00 00       	add    eax,0x1000
c000a26a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a26e:	5a                   	pop    edx
c000a26f:	59                   	pop    ecx
c000a270:	50                   	push   eax
c000a271:	68 b3 41 02 c0       	push   0xc00241b3
c000a276:	e8 84 2a 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	83 ec 08             	sub    esp,0x8
c000a281:	6a 01                	push   0x1
c000a283:	53                   	push   ebx
c000a284:	43                   	inc    ebx
c000a285:	e8 6b fd ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a28a:	83 c4 10             	add    esp,0x10
c000a28d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a293:	75 e9                	jne    c000a27e <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a295:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a29c:	66 85 c0             	test   ax,ax
c000a29f:	0f 84 8e 01 00 00    	je     c000a433 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a2a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a2a9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a2b1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a2b5:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a2ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a2be:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a2c6:	eb 15                	jmp    c000a2dd <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a2c8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a2cc:	83 c3 18             	add    ebx,0x18
c000a2cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a2d3:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a2d7:	0f 84 66 01 00 00    	je     c000a443 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a2dd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a2e0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a2e3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a2e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a2ea:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a2ee:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a2f0:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a2f3:	01 f0                	add    eax,esi
c000a2f5:	55                   	push   ebp
c000a2f6:	11 fa                	adc    edx,edi
c000a2f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2fc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a300:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a304:	56                   	push   esi
c000a305:	68 74 42 02 c0       	push   0xc0024274
c000a30a:	e8 f0 29 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a30f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a313:	83 c4 10             	add    esp,0x10
c000a316:	09 f8                	or     eax,edi
c000a318:	0f 85 25 01 00 00    	jne    c000a443 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a31e:	4d                   	dec    ebp
c000a31f:	75 a7                	jne    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a321:	ba 00 00 08 00       	mov    edx,0x80000
c000a326:	89 c1                	mov    ecx,eax
c000a328:	39 f2                	cmp    edx,esi
c000a32a:	19 f9                	sbb    ecx,edi
c000a32c:	0f 82 a7 00 00 00    	jb     c000a3d9 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a332:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a336:	89 c1                	mov    ecx,eax
c000a338:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a33c:	0f 83 97 00 00 00    	jae    c000a3d9 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a342:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a347:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a34b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a34f:	39 fa                	cmp    edx,edi
c000a351:	19 e8                	sbb    eax,ebp
c000a353:	0f 82 a5 01 00 00    	jb     c000a4fe <Phys::physicalMemorySetup(unsigned int)+0x2b9>
c000a359:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a35d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a361:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a367:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a36c:	83 d5 ff             	adc    ebp,0xffffffff
c000a36f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a373:	31 c0                	xor    eax,eax
c000a375:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a379:	39 fa                	cmp    edx,edi
c000a37b:	89 c1                	mov    ecx,eax
c000a37d:	19 e9                	sbb    ecx,ebp
c000a37f:	0f 83 43 ff ff ff    	jae    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a385:	be 00 00 08 00       	mov    esi,0x80000
c000a38a:	57                   	push   edi
c000a38b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a38f:	57                   	push   edi
c000a390:	56                   	push   esi
c000a391:	68 98 42 02 c0       	push   0xc0024298
c000a396:	e8 64 29 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a39b:	5d                   	pop    ebp
c000a39c:	58                   	pop    eax
c000a39d:	57                   	push   edi
c000a39e:	56                   	push   esi
c000a39f:	e8 69 fe ff ff       	call   c000a20d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a3a4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a3a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a3ac:	83 c4 0c             	add    esp,0xc
c000a3af:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a3b3:	03 05 78 80 02 c0    	add    eax,DWORD PTR ds:0xc0028078
c000a3b9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a3c0:	a3 78 80 02 c0       	mov    ds:0xc0028078,eax
c000a3c5:	52                   	push   edx
c000a3c6:	50                   	push   eax
c000a3c7:	68 d9 41 02 c0       	push   0xc00241d9
c000a3cc:	e8 2e 29 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a3d1:	83 c4 10             	add    esp,0x10
c000a3d4:	e9 ef fe ff ff       	jmp    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a3d9:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a3dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a3e1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a3e5:	39 ea                	cmp    edx,ebp
c000a3e7:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a3eb:	0f 82 d7 fe ff ff    	jb     c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a3f1:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a3f6:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a3fa:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a3fe:	0f 83 c4 fe ff ff    	jae    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a404:	39 ee                	cmp    esi,ebp
c000a406:	89 f8                	mov    eax,edi
c000a408:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a40c:	0f 83 78 ff ff ff    	jae    c000a38a <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a412:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a416:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a41a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a41e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a422:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a426:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a42a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a42e:	e9 57 ff ff ff       	jmp    c000a38a <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a433:	83 ec 0c             	sub    esp,0xc
c000a436:	68 cb 41 02 c0       	push   0xc00241cb
c000a43b:	e8 7b a5 00 00       	call   c00149bb <Krnl::panic(char const*)>
c000a440:	83 c4 10             	add    esp,0x10
c000a443:	83 ec 08             	sub    esp,0x8
c000a446:	6a 00                	push   0x0
c000a448:	6a 05                	push   0x5
c000a44a:	e8 a6 fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a44f:	58                   	pop    eax
c000a450:	5a                   	pop    edx
c000a451:	6a 00                	push   0x0
c000a453:	6a 06                	push   0x6
c000a455:	e8 9b fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a45a:	59                   	pop    ecx
c000a45b:	5b                   	pop    ebx
c000a45c:	bb 60 00 00 00       	mov    ebx,0x60
c000a461:	6a 00                	push   0x0
c000a463:	6a 07                	push   0x7
c000a465:	e8 8b fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a46a:	83 05 78 80 02 c0 03 	add    DWORD PTR ds:0xc0028078,0x3
c000a471:	83 c4 10             	add    esp,0x10
c000a474:	83 ec 08             	sub    esp,0x8
c000a477:	6a 00                	push   0x0
c000a479:	53                   	push   ebx
c000a47a:	43                   	inc    ebx
c000a47b:	e8 75 fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a480:	83 c4 10             	add    esp,0x10
c000a483:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a489:	75 e9                	jne    c000a474 <Phys::physicalMemorySetup(unsigned int)+0x22f>
c000a48b:	a1 78 80 02 c0       	mov    eax,ds:0xc0028078
c000a490:	bb 40 01 00 00       	mov    ebx,0x140
c000a495:	83 c0 20             	add    eax,0x20
c000a498:	a3 78 80 02 c0       	mov    ds:0xc0028078,eax
c000a49d:	eb 22                	jmp    c000a4c1 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000a49f:	83 ec 08             	sub    esp,0x8
c000a4a2:	6a 00                	push   0x0
c000a4a4:	53                   	push   ebx
c000a4a5:	43                   	inc    ebx
c000a4a6:	e8 4a fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a4ab:	a1 78 80 02 c0       	mov    eax,ds:0xc0028078
c000a4b0:	83 c4 10             	add    esp,0x10
c000a4b3:	40                   	inc    eax
c000a4b4:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a4ba:	a3 78 80 02 c0       	mov    ds:0xc0028078,eax
c000a4bf:	74 07                	je     c000a4c8 <Phys::physicalMemorySetup(unsigned int)+0x283>
c000a4c1:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a4c6:	7e d7                	jle    c000a49f <Phys::physicalMemorySetup(unsigned int)+0x25a>
c000a4c8:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a4cd:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a4d2:	7f 22                	jg     c000a4f6 <Phys::physicalMemorySetup(unsigned int)+0x2b1>
c000a4d4:	83 ec 08             	sub    esp,0x8
c000a4d7:	6a 00                	push   0x0
c000a4d9:	53                   	push   ebx
c000a4da:	43                   	inc    ebx
c000a4db:	e8 15 fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a4e0:	a1 78 80 02 c0       	mov    eax,ds:0xc0028078
c000a4e5:	83 c4 10             	add    esp,0x10
c000a4e8:	40                   	inc    eax
c000a4e9:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a4ef:	a3 78 80 02 c0       	mov    ds:0xc0028078,eax
c000a4f4:	75 d7                	jne    c000a4cd <Phys::physicalMemorySetup(unsigned int)+0x288>
c000a4f6:	83 c4 3c             	add    esp,0x3c
c000a4f9:	5b                   	pop    ebx
c000a4fa:	5e                   	pop    esi
c000a4fb:	5f                   	pop    edi
c000a4fc:	5d                   	pop    ebp
c000a4fd:	c3                   	ret    
c000a4fe:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a506:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a50e:	e9 46 fe ff ff       	jmp    c000a359 <Phys::physicalMemorySetup(unsigned int)+0x114>
c000a513:	90                   	nop

c000a514 <Pipe::isAtty()>:
c000a514:	31 c0                	xor    eax,eax
c000a516:	c3                   	ret    
c000a517:	90                   	nop

c000a518 <Pipe::~Pipe()>:
c000a518:	83 ec 0c             	sub    esp,0xc
c000a51b:	ba 04 43 02 c0       	mov    edx,0xc0024304
c000a520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a524:	89 10                	mov    DWORD PTR [eax],edx
c000a526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a52a:	83 ec 0c             	sub    esp,0xc
c000a52d:	50                   	push   eax
c000a52e:	e8 45 12 00 00       	call   c000b778 <UnixFile::~UnixFile()>
c000a533:	83 c4 10             	add    esp,0x10
c000a536:	90                   	nop
c000a537:	83 c4 0c             	add    esp,0xc
c000a53a:	c3                   	ret    
c000a53b:	90                   	nop

c000a53c <Pipe::~Pipe()>:
c000a53c:	83 ec 0c             	sub    esp,0xc
c000a53f:	83 ec 0c             	sub    esp,0xc
c000a542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a546:	e8 cd ff ff ff       	call   c000a518 <Pipe::~Pipe()>
c000a54b:	83 c4 10             	add    esp,0x10
c000a54e:	83 ec 08             	sub    esp,0x8
c000a551:	6a 20                	push   0x20
c000a553:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a557:	e8 c2 26 00 00       	call   c000cc1e <operator delete(void*, unsigned long)>
c000a55c:	83 c4 10             	add    esp,0x10
c000a55f:	83 c4 0c             	add    esp,0xc
c000a562:	c3                   	ret    
c000a563:	90                   	nop

c000a564 <Pipe::read(unsigned long long, void*, int*)>:
c000a564:	55                   	push   ebp
c000a565:	57                   	push   edi
c000a566:	56                   	push   esi
c000a567:	53                   	push   ebx
c000a568:	83 ec 1c             	sub    esp,0x1c
c000a56b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a56f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a573:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a577:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a57a:	89 c8                	mov    eax,ecx
c000a57c:	99                   	cdq    
c000a57d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a581:	74 24                	je     c000a5a7 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a583:	39 f9                	cmp    ecx,edi
c000a585:	89 d1                	mov    ecx,edx
c000a587:	19 f1                	sbb    ecx,esi
c000a589:	73 1c                	jae    c000a5a7 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a58b:	fa                   	cli    
c000a58c:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c000a592:	e8 89 e1 00 00       	call   c0018720 <schedule()>
c000a597:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000a59c:	48                   	dec    eax
c000a59d:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c000a5a2:	75 d3                	jne    c000a577 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a5a4:	fb                   	sti    
c000a5a5:	eb d0                	jmp    c000a577 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a5a7:	39 f8                	cmp    eax,edi
c000a5a9:	89 d1                	mov    ecx,edx
c000a5ab:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a5ae:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a5b2:	19 f1                	sbb    ecx,esi
c000a5b4:	73 07                	jae    c000a5bd <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a5b6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5bd:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a5c0:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a5c3:	29 f7                	sub    edi,esi
c000a5c5:	89 f8                	mov    eax,edi
c000a5c7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a5cb:	99                   	cdq    
c000a5cc:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a5cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a5d3:	19 d0                	sbb    eax,edx
c000a5d5:	73 07                	jae    c000a5de <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a5d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a5da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a5de:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a5e1:	89 ea                	mov    edx,ebp
c000a5e3:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a5e7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a5ec:	74 0d                	je     c000a5fb <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a5ee:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a5f1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a5f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a5f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a5fb:	85 d2                	test   edx,edx
c000a5fd:	74 11                	je     c000a610 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a5ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a603:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a606:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a60a:	89 d1                	mov    ecx,edx
c000a60c:	89 c7                	mov    edi,eax
c000a60e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a610:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a613:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a616:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a619:	99                   	cdq    
c000a61a:	89 f7                	mov    edi,esi
c000a61c:	03 04 24             	add    eax,DWORD PTR [esp]
c000a61f:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a623:	c1 ff 1f             	sar    edi,0x1f
c000a626:	57                   	push   edi
c000a627:	56                   	push   esi
c000a628:	52                   	push   edx
c000a629:	50                   	push   eax
c000a62a:	e8 55 82 01 00       	call   c0022884 <__umoddi3>
c000a62f:	83 c4 10             	add    esp,0x10
c000a632:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a635:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a63a:	75 10                	jne    c000a64c <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a63c:	83 ec 0c             	sub    esp,0xc
c000a63f:	68 c1 42 02 c0       	push   0xc00242c1
c000a644:	e8 72 a3 00 00       	call   c00149bb <Krnl::panic(char const*)>
c000a649:	83 c4 10             	add    esp,0x10
c000a64c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a650:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a653:	89 10                	mov    DWORD PTR [eax],edx
c000a655:	83 c4 1c             	add    esp,0x1c
c000a658:	31 c0                	xor    eax,eax
c000a65a:	5b                   	pop    ebx
c000a65b:	5e                   	pop    esi
c000a65c:	5f                   	pop    edi
c000a65d:	5d                   	pop    ebp
c000a65e:	c3                   	ret    
c000a65f:	90                   	nop

c000a660 <Pipe::write(unsigned long long, void*, int*)>:
c000a660:	55                   	push   ebp
c000a661:	57                   	push   edi
c000a662:	56                   	push   esi
c000a663:	53                   	push   ebx
c000a664:	83 ec 1c             	sub    esp,0x1c
c000a667:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a66b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a66f:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a672:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a676:	89 04 24             	mov    DWORD PTR [esp],eax
c000a679:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a67d:	89 d8                	mov    eax,ebx
c000a67f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a682:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a686:	89 d6                	mov    esi,edx
c000a688:	89 d7                	mov    edi,edx
c000a68a:	c1 ff 1f             	sar    edi,0x1f
c000a68d:	03 34 24             	add    esi,DWORD PTR [esp]
c000a690:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a694:	c1 f8 1f             	sar    eax,0x1f
c000a697:	39 f3                	cmp    ebx,esi
c000a699:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a69d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6a1:	19 f8                	sbb    eax,edi
c000a6a3:	b8 01 00 00 00       	mov    eax,0x1
c000a6a8:	72 6e                	jb     c000a718 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a6aa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a6ad:	01 d0                	add    eax,edx
c000a6af:	99                   	cdq    
c000a6b0:	f7 fb                	idiv   ebx
c000a6b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6b6:	29 d3                	sub    ebx,edx
c000a6b8:	89 d7                	mov    edi,edx
c000a6ba:	89 de                	mov    esi,ebx
c000a6bc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a6bf:	c1 fb 1f             	sar    ebx,0x1f
c000a6c2:	39 f2                	cmp    edx,esi
c000a6c4:	19 d8                	sbb    eax,ebx
c000a6c6:	b8 00 00 00 00       	mov    eax,0x0
c000a6cb:	72 04                	jb     c000a6d1 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a6cd:	89 d0                	mov    eax,edx
c000a6cf:	29 f0                	sub    eax,esi
c000a6d1:	89 d3                	mov    ebx,edx
c000a6d3:	29 c3                	sub    ebx,eax
c000a6d5:	74 0b                	je     c000a6e2 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a6d7:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a6da:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a6de:	89 d9                	mov    ecx,ebx
c000a6e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a6e2:	85 c0                	test   eax,eax
c000a6e4:	74 0d                	je     c000a6f3 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a6e6:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a6ea:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a6ed:	89 de                	mov    esi,ebx
c000a6ef:	89 c1                	mov    ecx,eax
c000a6f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a6f3:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a6f6:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a6fb:	75 10                	jne    c000a70d <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a6fd:	83 ec 0c             	sub    esp,0xc
c000a700:	68 dd 42 02 c0       	push   0xc00242dd
c000a705:	e8 b1 a2 00 00       	call   c00149bb <Krnl::panic(char const*)>
c000a70a:	83 c4 10             	add    esp,0x10
c000a70d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a711:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a714:	89 08                	mov    DWORD PTR [eax],ecx
c000a716:	31 c0                	xor    eax,eax
c000a718:	83 c4 1c             	add    esp,0x1c
c000a71b:	5b                   	pop    ebx
c000a71c:	5e                   	pop    esi
c000a71d:	5f                   	pop    edi
c000a71e:	5d                   	pop    ebp
c000a71f:	c3                   	ret    

c000a720 <Pipe::Pipe(int)>:
c000a720:	83 ec 0c             	sub    esp,0xc
c000a723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a727:	83 ec 08             	sub    esp,0x8
c000a72a:	6a 00                	push   0x0
c000a72c:	50                   	push   eax
c000a72d:	e8 64 0e 00 00       	call   c000b596 <UnixFile::UnixFile(int)>
c000a732:	83 c4 10             	add    esp,0x10
c000a735:	ba 04 43 02 c0       	mov    edx,0xc0024304
c000a73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a73e:	89 10                	mov    DWORD PTR [eax],edx
c000a740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a744:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a748:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a74b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a74f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a75a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a761:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a765:	83 ec 0c             	sub    esp,0xc
c000a768:	50                   	push   eax
c000a769:	e8 a1 f2 ff ff       	call   c0009a0f <malloc>
c000a76e:	83 c4 10             	add    esp,0x10
c000a771:	89 c2                	mov    edx,eax
c000a773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a777:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a77e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a782:	90                   	nop
c000a783:	83 c4 0c             	add    esp,0xc
c000a786:	c3                   	ret    
c000a787:	90                   	nop

c000a788 <VgaText::isAtty()>:
c000a788:	b0 01                	mov    al,0x1
c000a78a:	c3                   	ret    
c000a78b:	90                   	nop

c000a78c <VgaText::~VgaText()>:
c000a78c:	83 ec 0c             	sub    esp,0xc
c000a78f:	ba 8c 43 02 c0       	mov    edx,0xc002438c
c000a794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a798:	89 10                	mov    DWORD PTR [eax],edx
c000a79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a79e:	83 ec 0c             	sub    esp,0xc
c000a7a1:	50                   	push   eax
c000a7a2:	e8 d1 0f 00 00       	call   c000b778 <UnixFile::~UnixFile()>
c000a7a7:	83 c4 10             	add    esp,0x10
c000a7aa:	90                   	nop
c000a7ab:	83 c4 0c             	add    esp,0xc
c000a7ae:	c3                   	ret    
c000a7af:	90                   	nop

c000a7b0 <VgaText::~VgaText()>:
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	83 ec 0c             	sub    esp,0xc
c000a7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ba:	e8 cd ff ff ff       	call   c000a78c <VgaText::~VgaText()>
c000a7bf:	83 c4 10             	add    esp,0x10
c000a7c2:	83 ec 08             	sub    esp,0x8
c000a7c5:	68 c4 02 00 00       	push   0x2c4
c000a7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ce:	e8 4b 24 00 00       	call   c000cc1e <operator delete(void*, unsigned long)>
c000a7d3:	83 c4 10             	add    esp,0x10
c000a7d6:	83 c4 0c             	add    esp,0xc
c000a7d9:	c3                   	ret    

c000a7da <VgaText::read(unsigned long long, void*, int*)>:
c000a7da:	83 ec 10             	sub    esp,0x10
c000a7dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a7e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a7e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7e9:	e8 9d 58 00 00       	call   c001008b <readKeyboard(VgaText*, char*, unsigned long)>
c000a7ee:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a7f2:	89 02                	mov    DWORD PTR [edx],eax
c000a7f4:	31 c0                	xor    eax,eax
c000a7f6:	83 c4 1c             	add    esp,0x1c
c000a7f9:	c3                   	ret    

c000a7fa <setTerminalScrollLock(bool)>:
c000a7fa:	c3                   	ret    

c000a7fb <addToTerminalCycle(VgaText*)>:
c000a7fb:	8b 15 c0 80 02 c0    	mov    edx,DWORD PTR ds:0xc00280c0
c000a801:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a805:	85 d2                	test   edx,edx
c000a807:	75 09                	jne    c000a812 <addToTerminalCycle(VgaText*)+0x17>
c000a809:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a80c:	a3 c0 80 02 c0       	mov    ds:0xc00280c0,eax
c000a811:	c3                   	ret    
c000a812:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a815:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a818:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a81b:	c3                   	ret    

c000a81c <installVgaTextImplementation()>:
c000a81c:	83 ec 10             	sub    esp,0x10
c000a81f:	6a 20                	push   0x20
c000a821:	6a 00                	push   0x0
c000a823:	68 a0 80 02 c0       	push   0xc00280a0
c000a828:	e8 57 5e ff ff       	call   c0000684 <memset>
c000a82d:	83 c4 1c             	add    esp,0x1c
c000a830:	c3                   	ret    

c000a831 <scrollTerminalScrollLock(int)>:
c000a831:	c3                   	ret    

c000a832 <VgaText::updateTitle()>:
c000a832:	53                   	push   ebx
c000a833:	31 c0                	xor    eax,eax
c000a835:	83 ec 58             	sub    esp,0x58
c000a838:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000a83c:	89 e1                	mov    ecx,esp
c000a83e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000a842:	40                   	inc    eax
c000a843:	83 f8 50             	cmp    eax,0x50
c000a846:	75 f6                	jne    c000a83e <VgaText::updateTitle()+0xc>
c000a848:	31 c0                	xor    eax,eax
c000a84a:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000a851:	84 db                	test   bl,bl
c000a853:	74 06                	je     c000a85b <VgaText::updateTitle()+0x29>
c000a855:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000a858:	40                   	inc    eax
c000a859:	eb ef                	jmp    c000a84a <VgaText::updateTitle()+0x18>
c000a85b:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000a85e:	85 c0                	test   eax,eax
c000a860:	74 09                	je     c000a86b <VgaText::updateTitle()+0x39>
c000a862:	53                   	push   ebx
c000a863:	53                   	push   ebx
c000a864:	51                   	push   ecx
c000a865:	52                   	push   edx
c000a866:	ff d0                	call   eax
c000a868:	83 c4 10             	add    esp,0x10
c000a86b:	83 c4 58             	add    esp,0x58
c000a86e:	5b                   	pop    ebx
c000a86f:	c3                   	ret    

c000a870 <VgaText::load()>:
c000a870:	53                   	push   ebx
c000a871:	31 c0                	xor    eax,eax
c000a873:	83 ec 58             	sub    esp,0x58
c000a876:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a87a:	89 e2                	mov    edx,esp
c000a87c:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000a880:	40                   	inc    eax
c000a881:	83 f8 50             	cmp    eax,0x50
c000a884:	75 f6                	jne    c000a87c <VgaText::load()+0xc>
c000a886:	31 c0                	xor    eax,eax
c000a888:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000a88f:	84 c9                	test   cl,cl
c000a891:	74 06                	je     c000a899 <VgaText::load()+0x29>
c000a893:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a896:	40                   	inc    eax
c000a897:	eb ef                	jmp    c000a888 <VgaText::load()+0x18>
c000a899:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000a89c:	85 c0                	test   eax,eax
c000a89e:	74 09                	je     c000a8a9 <VgaText::load()+0x39>
c000a8a0:	51                   	push   ecx
c000a8a1:	51                   	push   ecx
c000a8a2:	52                   	push   edx
c000a8a3:	53                   	push   ebx
c000a8a4:	ff d0                	call   eax
c000a8a6:	83 c4 10             	add    esp,0x10
c000a8a9:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000a8ac:	85 c0                	test   eax,eax
c000a8ae:	74 09                	je     c000a8b9 <VgaText::load()+0x49>
c000a8b0:	83 ec 0c             	sub    esp,0xc
c000a8b3:	53                   	push   ebx
c000a8b4:	ff d0                	call   eax
c000a8b6:	83 c4 10             	add    esp,0x10
c000a8b9:	83 c4 58             	add    esp,0x58
c000a8bc:	5b                   	pop    ebx
c000a8bd:	c3                   	ret    

c000a8be <VgaText::updateCursor()>:
c000a8be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8c2:	39 05 c4 80 02 c0    	cmp    DWORD PTR ds:0xc00280c4,eax
c000a8c8:	75 09                	jne    c000a8d3 <VgaText::updateCursor()+0x15>
c000a8ca:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000a8cd:	85 c0                	test   eax,eax
c000a8cf:	74 02                	je     c000a8d3 <VgaText::updateCursor()+0x15>
c000a8d1:	ff e0                	jmp    eax
c000a8d3:	c3                   	ret    

c000a8d4 <VgaText::doANSI_SGR(int)>:
c000a8d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a8d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8dc:	85 d2                	test   edx,edx
c000a8de:	75 0b                	jne    c000a8eb <VgaText::doANSI_SGR(int)+0x17>
c000a8e0:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a8e3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a8e6:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a8e9:	eb 59                	jmp    c000a944 <VgaText::doANSI_SGR(int)+0x70>
c000a8eb:	83 fa 07             	cmp    edx,0x7
c000a8ee:	75 0b                	jne    c000a8fb <VgaText::doANSI_SGR(int)+0x27>
c000a8f0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a8f3:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a8f6:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a8f9:	eb 49                	jmp    c000a944 <VgaText::doANSI_SGR(int)+0x70>
c000a8fb:	83 fa 1b             	cmp    edx,0x1b
c000a8fe:	74 e0                	je     c000a8e0 <VgaText::doANSI_SGR(int)+0xc>
c000a900:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a903:	83 f9 07             	cmp    ecx,0x7
c000a906:	77 09                	ja     c000a911 <VgaText::doANSI_SGR(int)+0x3d>
c000a908:	8b 14 8d 40 74 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8bc0]
c000a90f:	eb 20                	jmp    c000a931 <VgaText::doANSI_SGR(int)+0x5d>
c000a911:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a914:	83 f9 07             	cmp    ecx,0x7
c000a917:	77 09                	ja     c000a922 <VgaText::doANSI_SGR(int)+0x4e>
c000a919:	8b 14 8d 40 74 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8bc0]
c000a920:	eb 22                	jmp    c000a944 <VgaText::doANSI_SGR(int)+0x70>
c000a922:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a925:	83 f9 07             	cmp    ecx,0x7
c000a928:	77 0b                	ja     c000a935 <VgaText::doANSI_SGR(int)+0x61>
c000a92a:	8b 14 95 f8 72 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8d08]
c000a931:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a934:	c3                   	ret    
c000a935:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a938:	83 f9 07             	cmp    ecx,0x7
c000a93b:	77 0a                	ja     c000a947 <VgaText::doANSI_SGR(int)+0x73>
c000a93d:	8b 14 95 d0 72 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8d30]
c000a944:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a947:	c3                   	ret    

c000a948 <VgaText::setDefaultBgColour(VgaColour)>:
c000a948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a94c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a950:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a953:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a956:	c3                   	ret    
c000a957:	90                   	nop

c000a958 <VgaText::setDefaultFgColour(VgaColour)>:
c000a958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a95c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a960:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a963:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a966:	c3                   	ret    
c000a967:	90                   	nop

c000a968 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a968:	53                   	push   ebx
c000a969:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a96d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a971:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a975:	51                   	push   ecx
c000a976:	e8 cd ff ff ff       	call   c000a948 <VgaText::setDefaultBgColour(VgaColour)>
c000a97b:	58                   	pop    eax
c000a97c:	5a                   	pop    edx
c000a97d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a981:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a985:	5b                   	pop    ebx
c000a986:	eb d0                	jmp    c000a958 <VgaText::setDefaultFgColour(VgaColour)>

c000a988 <VgaText::setTitleTextColour(VgaColour)>:
c000a988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a98c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a990:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a993:	e9 9a fe ff ff       	jmp    c000a832 <VgaText::updateTitle()>

c000a998 <VgaText::setTitleColour(VgaColour)>:
c000a998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a99c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a9a0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a9a3:	e9 8a fe ff ff       	jmp    c000a832 <VgaText::updateTitle()>

c000a9a8 <VgaText::setTitle(char*)>:
c000a9a8:	53                   	push   ebx
c000a9a9:	83 ec 10             	sub    esp,0x10
c000a9ac:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a9b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a9b4:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000a9ba:	50                   	push   eax
c000a9bb:	e8 80 5d ff ff       	call   c0000740 <strcpy>
c000a9c0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a9c4:	83 c4 18             	add    esp,0x18
c000a9c7:	5b                   	pop    ebx
c000a9c8:	e9 65 fe ff ff       	jmp    c000a832 <VgaText::updateTitle()>
c000a9cd:	90                   	nop

c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>:
c000a9ce:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a9d2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a9d7:	83 e0 0f             	and    eax,0xf
c000a9da:	c1 e2 04             	shl    edx,0x4
c000a9dd:	09 d0                	or     eax,edx
c000a9df:	c3                   	ret    

c000a9e0 <VgaText::scrollScreen()>:
c000a9e0:	55                   	push   ebp
c000a9e1:	b9 01 00 00 00       	mov    ecx,0x1
c000a9e6:	57                   	push   edi
c000a9e7:	56                   	push   esi
c000a9e8:	53                   	push   ebx
c000a9e9:	83 ec 0c             	sub    esp,0xc
c000a9ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a9f0:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a9f6:	31 ff                	xor    edi,edi
c000a9f8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a9fb:	83 f9 17             	cmp    ecx,0x17
c000a9fe:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000aa01:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000aa08:	75 27                	jne    c000aa31 <VgaText::scrollScreen()+0x51>
c000aa0a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000aa0d:	01 f5                	add    ebp,esi
c000aa0f:	f7 c7 01 00 00 00    	test   edi,0x1
c000aa15:	74 16                	je     c000aa2d <VgaText::scrollScreen()+0x4d>
c000aa17:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000aa1b:	50                   	push   eax
c000aa1c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000aa20:	50                   	push   eax
c000aa21:	e8 a8 ff ff ff       	call   c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>
c000aa26:	5a                   	pop    edx
c000aa27:	5a                   	pop    edx
c000aa28:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000aa2b:	eb 04                	jmp    c000aa31 <VgaText::scrollScreen()+0x51>
c000aa2d:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000aa31:	47                   	inc    edi
c000aa32:	46                   	inc    esi
c000aa33:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000aa39:	75 bd                	jne    c000a9f8 <VgaText::scrollScreen()+0x18>
c000aa3b:	41                   	inc    ecx
c000aa3c:	83 f9 18             	cmp    ecx,0x18
c000aa3f:	75 af                	jne    c000a9f0 <VgaText::scrollScreen()+0x10>
c000aa41:	39 1d c4 80 02 c0    	cmp    DWORD PTR ds:0xc00280c4,ebx
c000aa47:	75 1b                	jne    c000aa64 <VgaText::scrollScreen()+0x84>
c000aa49:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000aa4d:	74 05                	je     c000aa54 <VgaText::scrollScreen()+0x74>
c000aa4f:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000aa52:	eb 10                	jmp    c000aa64 <VgaText::scrollScreen()+0x84>
c000aa54:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000aa57:	85 c0                	test   eax,eax
c000aa59:	74 09                	je     c000aa64 <VgaText::scrollScreen()+0x84>
c000aa5b:	83 ec 0c             	sub    esp,0xc
c000aa5e:	53                   	push   ebx
c000aa5f:	ff d0                	call   eax
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000aa68:	83 c4 0c             	add    esp,0xc
c000aa6b:	5b                   	pop    ebx
c000aa6c:	5e                   	pop    esi
c000aa6d:	5f                   	pop    edi
c000aa6e:	5d                   	pop    ebp
c000aa6f:	e9 4a fe ff ff       	jmp    c000a8be <VgaText::updateCursor()>

c000aa74 <VgaText::combineCharAndColour(char, unsigned char)>:
c000aa74:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000aa79:	c1 e0 08             	shl    eax,0x8
c000aa7c:	89 c2                	mov    edx,eax
c000aa7e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000aa83:	09 d0                	or     eax,edx
c000aa85:	c3                   	ret    

c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000aa86:	56                   	push   esi
c000aa87:	53                   	push   ebx
c000aa88:	51                   	push   ecx
c000aa89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aa8d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000aa92:	50                   	push   eax
c000aa93:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000aa98:	50                   	push   eax
c000aa99:	e8 30 ff ff ff       	call   c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>
c000aa9e:	5b                   	pop    ebx
c000aa9f:	0f b6 c0             	movzx  eax,al
c000aaa2:	5e                   	pop    esi
c000aaa3:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000aaa8:	50                   	push   eax
c000aaa9:	53                   	push   ebx
c000aaaa:	e8 c5 ff ff ff       	call   c000aa74 <VgaText::combineCharAndColour(char, unsigned char)>
c000aaaf:	5a                   	pop    edx
c000aab0:	5e                   	pop    esi
c000aab1:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000aab4:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000aaba:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000aabe:	0f b7 d2             	movzx  edx,dx
c000aac1:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000aac5:	39 0d c4 80 02 c0    	cmp    DWORD PTR ds:0xc00280c4,ecx
c000aacb:	75 10                	jne    c000aadd <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aacd:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000aad0:	85 c0                	test   eax,eax
c000aad2:	74 09                	je     c000aadd <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aad4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000aad8:	5a                   	pop    edx
c000aad9:	5b                   	pop    ebx
c000aada:	5e                   	pop    esi
c000aadb:	ff e0                	jmp    eax
c000aadd:	58                   	pop    eax
c000aade:	5b                   	pop    ebx
c000aadf:	5e                   	pop    esi
c000aae0:	c3                   	ret    
c000aae1:	90                   	nop

c000aae2 <VgaText::getCursorX()>:
c000aae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aae6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000aae9:	c3                   	ret    

c000aaea <VgaText::getCursorY()>:
c000aaea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aaee:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000aaf1:	c3                   	ret    

c000aaf2 <VgaText::setCursor(int, int)>:
c000aaf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aaf6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aafa:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000aafd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ab01:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ab04:	e9 b5 fd ff ff       	jmp    c000a8be <VgaText::updateCursor()>

c000ab09 <setActiveTerminal(VgaText*)>:
c000ab09:	53                   	push   ebx
c000ab0a:	83 ec 08             	sub    esp,0x8
c000ab0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab11:	85 db                	test   ebx,ebx
c000ab13:	75 11                	jne    c000ab26 <setActiveTerminal(VgaText*)+0x1d>
c000ab15:	c7 44 24 10 18 43 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024318
c000ab1d:	83 c4 08             	add    esp,0x8
c000ab20:	5b                   	pop    ebx
c000ab21:	e9 95 9e 00 00       	jmp    c00149bb <Krnl::panic(char const*)>
c000ab26:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c000ab2b:	85 c0                	test   eax,eax
c000ab2d:	74 0c                	je     c000ab3b <setActiveTerminal(VgaText*)+0x32>
c000ab2f:	83 ec 0c             	sub    esp,0xc
c000ab32:	50                   	push   eax
c000ab33:	e8 86 fd ff ff       	call   c000a8be <VgaText::updateCursor()>
c000ab38:	83 c4 10             	add    esp,0x10
c000ab3b:	89 1d c4 80 02 c0    	mov    DWORD PTR ds:0xc00280c4,ebx
c000ab41:	51                   	push   ecx
c000ab42:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ab45:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ab48:	53                   	push   ebx
c000ab49:	e8 a4 ff ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000ab4e:	83 c4 10             	add    esp,0x10
c000ab51:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ab55:	75 07                	jne    c000ab5e <setActiveTerminal(VgaText*)+0x55>
c000ab57:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000ab5e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab62:	83 c4 08             	add    esp,0x8
c000ab65:	5b                   	pop    ebx
c000ab66:	e9 05 fd ff ff       	jmp    c000a870 <VgaText::load()>

c000ab6b <doTerminalCycle()>:
c000ab6b:	83 ec 18             	sub    esp,0x18
c000ab6e:	a1 c0 80 02 c0       	mov    eax,ds:0xc00280c0
c000ab73:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000ab76:	50                   	push   eax
c000ab77:	a3 c0 80 02 c0       	mov    ds:0xc00280c0,eax
c000ab7c:	e8 88 ff ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c000ab81:	83 c4 1c             	add    esp,0x1c
c000ab84:	c3                   	ret    
c000ab85:	90                   	nop

c000ab86 <VgaText::setCursorX(int)>:
c000ab86:	83 ec 10             	sub    esp,0x10
c000ab89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ab8d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000ab90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab94:	50                   	push   eax
c000ab95:	e8 58 ff ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000ab9a:	83 c4 1c             	add    esp,0x1c
c000ab9d:	c3                   	ret    

c000ab9e <VgaText::setCursorY(int)>:
c000ab9e:	83 ec 10             	sub    esp,0x10
c000aba1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aba5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aba9:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000abac:	50                   	push   eax
c000abad:	e8 40 ff ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000abb2:	83 c4 1c             	add    esp,0x1c
c000abb5:	c3                   	ret    

c000abb6 <VgaText::incrementCursor(bool)>:
c000abb6:	56                   	push   esi
c000abb7:	53                   	push   ebx
c000abb8:	51                   	push   ecx
c000abb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000abbd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000abc1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000abc4:	40                   	inc    eax
c000abc5:	83 f8 50             	cmp    eax,0x50
c000abc8:	74 05                	je     c000abcf <VgaText::incrementCursor(bool)+0x19>
c000abca:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000abcd:	eb 24                	jmp    c000abf3 <VgaText::incrementCursor(bool)+0x3d>
c000abcf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000abd2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000abd9:	8d 50 01             	lea    edx,[eax+0x1]
c000abdc:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000abdf:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000abe2:	75 0f                	jne    c000abf3 <VgaText::incrementCursor(bool)+0x3d>
c000abe4:	83 ec 0c             	sub    esp,0xc
c000abe7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000abea:	53                   	push   ebx
c000abeb:	e8 f0 fd ff ff       	call   c000a9e0 <VgaText::scrollScreen()>
c000abf0:	83 c4 10             	add    esp,0x10
c000abf3:	89 f0                	mov    eax,esi
c000abf5:	84 c0                	test   al,al
c000abf7:	74 0c                	je     c000ac05 <VgaText::incrementCursor(bool)+0x4f>
c000abf9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000abfd:	5a                   	pop    edx
c000abfe:	5b                   	pop    ebx
c000abff:	5e                   	pop    esi
c000ac00:	e9 b9 fc ff ff       	jmp    c000a8be <VgaText::updateCursor()>
c000ac05:	58                   	pop    eax
c000ac06:	5b                   	pop    ebx
c000ac07:	5e                   	pop    esi
c000ac08:	c3                   	ret    
c000ac09:	90                   	nop

c000ac0a <VgaText::decrementCursor(bool)>:
c000ac0a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ac0e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ac12:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000ac15:	85 c0                	test   eax,eax
c000ac17:	74 04                	je     c000ac1d <VgaText::decrementCursor(bool)+0x13>
c000ac19:	48                   	dec    eax
c000ac1a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000ac1d:	84 c9                	test   cl,cl
c000ac1f:	74 09                	je     c000ac2a <VgaText::decrementCursor(bool)+0x20>
c000ac21:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac25:	e9 94 fc ff ff       	jmp    c000a8be <VgaText::updateCursor()>
c000ac2a:	c3                   	ret    
c000ac2b:	90                   	nop

c000ac2c <VgaText::putchar(char, VgaColour, VgaColour)>:
c000ac2c:	53                   	push   ebx
c000ac2d:	83 ec 08             	sub    esp,0x8
c000ac30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac34:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ac38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ac3c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ac40:	3c 07                	cmp    al,0x7
c000ac42:	75 2a                	jne    c000ac6e <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000ac44:	a1 78 81 02 c0       	mov    eax,ds:0xc0028178
c000ac49:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ac51:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000ac59:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000ac61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac65:	83 c4 08             	add    esp,0x8
c000ac68:	5b                   	pop    ebx
c000ac69:	e9 a4 2f 00 00       	jmp    c000dc12 <Buzzer::beep(int, int, bool)>
c000ac6e:	3c 0d                	cmp    al,0xd
c000ac70:	75 09                	jne    c000ac7b <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000ac72:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ac79:	eb 2c                	jmp    c000aca7 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000ac7b:	3c 0a                	cmp    al,0xa
c000ac7d:	75 31                	jne    c000acb0 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000ac7f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac82:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ac89:	8d 50 01             	lea    edx,[eax+0x1]
c000ac8c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000ac8f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000ac92:	75 0f                	jne    c000aca3 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000ac94:	83 ec 0c             	sub    esp,0xc
c000ac97:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ac9a:	53                   	push   ebx
c000ac9b:	e8 40 fd ff ff       	call   c000a9e0 <VgaText::scrollScreen()>
c000aca0:	83 c4 10             	add    esp,0x10
c000aca3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aca7:	83 c4 08             	add    esp,0x8
c000acaa:	5b                   	pop    ebx
c000acab:	e9 0e fc ff ff       	jmp    c000a8be <VgaText::updateCursor()>
c000acb0:	3c 08                	cmp    al,0x8
c000acb2:	75 25                	jne    c000acd9 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000acb4:	50                   	push   eax
c000acb5:	50                   	push   eax
c000acb6:	6a 01                	push   0x1
c000acb8:	53                   	push   ebx
c000acb9:	e8 4c ff ff ff       	call   c000ac0a <VgaText::decrementCursor(bool)>
c000acbe:	5a                   	pop    edx
c000acbf:	59                   	pop    ecx
c000acc0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000acc3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000acc6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000acc9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000accc:	6a 20                	push   0x20
c000acce:	53                   	push   ebx
c000accf:	e8 b2 fd ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000acd4:	83 c4 28             	add    esp,0x28
c000acd7:	5b                   	pop    ebx
c000acd8:	c3                   	ret    
c000acd9:	83 ec 08             	sub    esp,0x8
c000acdc:	0f be c0             	movsx  eax,al
c000acdf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ace2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ace5:	51                   	push   ecx
c000ace6:	52                   	push   edx
c000ace7:	50                   	push   eax
c000ace8:	53                   	push   ebx
c000ace9:	e8 98 fd ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000acee:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000acf2:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000acfa:	83 c4 28             	add    esp,0x28
c000acfd:	5b                   	pop    ebx
c000acfe:	e9 b3 fe ff ff       	jmp    c000abb6 <VgaText::incrementCursor(bool)>
c000ad03:	90                   	nop

c000ad04 <VgaText::doUpdate()>:
c000ad04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad08:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000ad0b:	85 c0                	test   eax,eax
c000ad0d:	74 02                	je     c000ad11 <VgaText::doUpdate()+0xd>
c000ad0f:	ff e0                	jmp    eax
c000ad11:	c3                   	ret    

c000ad12 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000ad12:	55                   	push   ebp
c000ad13:	31 ed                	xor    ebp,ebp
c000ad15:	57                   	push   edi
c000ad16:	56                   	push   esi
c000ad17:	53                   	push   ebx
c000ad18:	83 ec 1c             	sub    esp,0x1c
c000ad1b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ad1f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000ad24:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000ad2b:	50                   	push   eax
c000ad2c:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000ad31:	50                   	push   eax
c000ad32:	e8 97 fc ff ff       	call   c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>
c000ad37:	59                   	pop    ecx
c000ad38:	0f b6 c0             	movzx  eax,al
c000ad3b:	5e                   	pop    esi
c000ad3c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ad41:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ad45:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ad48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ad4c:	0f b7 f6             	movzx  esi,si
c000ad4f:	01 f6                	add    esi,esi
c000ad51:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ad54:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ad57:	84 c0                	test   al,al
c000ad59:	0f 84 fd 00 00 00    	je     c000ae5c <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000ad5f:	3c 0d                	cmp    al,0xd
c000ad61:	75 0c                	jne    c000ad6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000ad63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ad6a:	e9 e7 00 00 00       	jmp    c000ae56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000ad6f:	3c 0a                	cmp    al,0xa
c000ad71:	75 47                	jne    c000adba <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000ad73:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ad76:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ad7d:	8d 48 01             	lea    ecx,[eax+0x1]
c000ad80:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000ad83:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000ad86:	75 0f                	jne    c000ad97 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000ad88:	83 ec 0c             	sub    esp,0xc
c000ad8b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ad8e:	53                   	push   ebx
c000ad8f:	e8 4c fc ff ff       	call   c000a9e0 <VgaText::scrollScreen()>
c000ad94:	83 c4 10             	add    esp,0x10
c000ad97:	83 ec 0c             	sub    esp,0xc
c000ad9a:	31 ed                	xor    ebp,ebp
c000ad9c:	53                   	push   ebx
c000ad9d:	e8 1c fb ff ff       	call   c000a8be <VgaText::updateCursor()>
c000ada2:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ada7:	83 c4 10             	add    esp,0x10
c000adaa:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000adad:	0f b7 f6             	movzx  esi,si
c000adb0:	01 f6                	add    esi,esi
c000adb2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000adb5:	e9 9c 00 00 00       	jmp    c000ae56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000adba:	3c 08                	cmp    al,0x8
c000adbc:	75 35                	jne    c000adf3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000adbe:	56                   	push   esi
c000adbf:	56                   	push   esi
c000adc0:	6a 01                	push   0x1
c000adc2:	53                   	push   ebx
c000adc3:	e8 42 fe ff ff       	call   c000ac0a <VgaText::decrementCursor(bool)>
c000adc8:	58                   	pop    eax
c000adc9:	5a                   	pop    edx
c000adca:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000adcd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000add0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000add3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000add6:	6a 20                	push   0x20
c000add8:	53                   	push   ebx
c000add9:	e8 a8 fc ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000adde:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ade3:	83 c4 20             	add    esp,0x20
c000ade6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ade9:	0f b7 f6             	movzx  esi,si
c000adec:	01 f6                	add    esi,esi
c000adee:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000adf1:	eb 63                	jmp    c000ae56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000adf3:	51                   	push   ecx
c000adf4:	51                   	push   ecx
c000adf5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adf9:	50                   	push   eax
c000adfa:	e8 75 fc ff ff       	call   c000aa74 <VgaText::combineCharAndColour(char, unsigned char)>
c000adff:	83 c4 10             	add    esp,0x10
c000ae02:	66 89 06             	mov    WORD PTR [esi],ax
c000ae05:	39 1d c4 80 02 c0    	cmp    DWORD PTR ds:0xc00280c4,ebx
c000ae0b:	75 21                	jne    c000ae2e <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ae0d:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000ae10:	85 c0                	test   eax,eax
c000ae12:	74 1a                	je     c000ae2e <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ae14:	52                   	push   edx
c000ae15:	52                   	push   edx
c000ae16:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ae19:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ae1c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae20:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae24:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000ae27:	51                   	push   ecx
c000ae28:	53                   	push   ebx
c000ae29:	ff d0                	call   eax
c000ae2b:	83 c4 20             	add    esp,0x20
c000ae2e:	83 c6 02             	add    esi,0x2
c000ae31:	50                   	push   eax
c000ae32:	50                   	push   eax
c000ae33:	6a 00                	push   0x0
c000ae35:	53                   	push   ebx
c000ae36:	e8 7b fd ff ff       	call   c000abb6 <VgaText::incrementCursor(bool)>
c000ae3b:	83 c4 10             	add    esp,0x10
c000ae3e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000ae42:	75 0d                	jne    c000ae51 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000ae44:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ae49:	0f b7 f6             	movzx  esi,si
c000ae4c:	01 f6                	add    esi,esi
c000ae4e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ae51:	bd 01 00 00 00       	mov    ebp,0x1
c000ae56:	47                   	inc    edi
c000ae57:	e9 f8 fe ff ff       	jmp    c000ad54 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000ae5c:	83 ec 0c             	sub    esp,0xc
c000ae5f:	53                   	push   ebx
c000ae60:	e8 59 fa ff ff       	call   c000a8be <VgaText::updateCursor()>
c000ae65:	83 c4 10             	add    esp,0x10
c000ae68:	89 e8                	mov    eax,ebp
c000ae6a:	84 c0                	test   al,al
c000ae6c:	74 0c                	je     c000ae7a <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000ae6e:	83 ec 0c             	sub    esp,0xc
c000ae71:	53                   	push   ebx
c000ae72:	e8 8d fe ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ae81:	83 c4 1c             	add    esp,0x1c
c000ae84:	5b                   	pop    ebx
c000ae85:	5e                   	pop    esi
c000ae86:	5f                   	pop    edi
c000ae87:	5d                   	pop    ebp
c000ae88:	c3                   	ret    
c000ae89:	90                   	nop

c000ae8a <VgaText::clearScreen()>:
c000ae8a:	57                   	push   edi
c000ae8b:	56                   	push   esi
c000ae8c:	31 f6                	xor    esi,esi
c000ae8e:	53                   	push   ebx
c000ae8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae93:	52                   	push   edx
c000ae94:	6a 00                	push   0x0
c000ae96:	6a 00                	push   0x0
c000ae98:	53                   	push   ebx
c000ae99:	e8 54 fc ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000ae9e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000aea5:	83 c4 10             	add    esp,0x10
c000aea8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000aeab:	7e 20                	jle    c000aecd <VgaText::clearScreen()+0x43>
c000aead:	31 ff                	xor    edi,edi
c000aeaf:	50                   	push   eax
c000aeb0:	50                   	push   eax
c000aeb1:	56                   	push   esi
c000aeb2:	57                   	push   edi
c000aeb3:	47                   	inc    edi
c000aeb4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000aeb7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000aeba:	6a 20                	push   0x20
c000aebc:	53                   	push   ebx
c000aebd:	e8 c4 fb ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aec2:	83 c4 20             	add    esp,0x20
c000aec5:	83 ff 50             	cmp    edi,0x50
c000aec8:	75 e5                	jne    c000aeaf <VgaText::clearScreen()+0x25>
c000aeca:	46                   	inc    esi
c000aecb:	eb db                	jmp    c000aea8 <VgaText::clearScreen()+0x1e>
c000aecd:	83 ec 0c             	sub    esp,0xc
c000aed0:	53                   	push   ebx
c000aed1:	e8 2e fe ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000aed6:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000aedd:	83 c4 10             	add    esp,0x10
c000aee0:	5b                   	pop    ebx
c000aee1:	5e                   	pop    esi
c000aee2:	5f                   	pop    edi
c000aee3:	c3                   	ret    

c000aee4 <VgaText::putchar(char)>:
c000aee4:	56                   	push   esi
c000aee5:	53                   	push   ebx
c000aee6:	83 ec 14             	sub    esp,0x14
c000aee9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aeed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000aef1:	3c 5b                	cmp    al,0x5b
c000aef3:	75 18                	jne    c000af0d <VgaText::putchar(char)+0x29>
c000aef5:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000aef9:	74 1f                	je     c000af1a <VgaText::putchar(char)+0x36>
c000aefb:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000af01:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000af08:	e9 bd 00 00 00       	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000af0d:	3c 1b                	cmp    al,0x1b
c000af0f:	75 09                	jne    c000af1a <VgaText::putchar(char)+0x36>
c000af11:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000af15:	e9 b0 00 00 00       	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000af1a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000af1d:	84 c9                	test   cl,cl
c000af1f:	0f 84 92 00 00 00    	je     c000afb7 <VgaText::putchar(char)+0xd3>
c000af25:	8d 50 c0             	lea    edx,[eax-0x40]
c000af28:	80 fa 3e             	cmp    dl,0x3e
c000af2b:	77 76                	ja     c000afa3 <VgaText::putchar(char)+0xbf>
c000af2d:	3c 6d                	cmp    al,0x6d
c000af2f:	75 47                	jne    c000af78 <VgaText::putchar(char)+0x94>
c000af31:	31 f6                	xor    esi,esi
c000af33:	31 d2                	xor    edx,edx
c000af35:	31 c0                	xor    eax,eax
c000af37:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000af3a:	7e 2d                	jle    c000af69 <VgaText::putchar(char)+0x85>
c000af3c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000af41:	80 fa 3b             	cmp    dl,0x3b
c000af44:	75 17                	jne    c000af5d <VgaText::putchar(char)+0x79>
c000af46:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000af4a:	50                   	push   eax
c000af4b:	53                   	push   ebx
c000af4c:	e8 83 f9 ff ff       	call   c000a8d4 <VgaText::doANSI_SGR(int)>
c000af51:	59                   	pop    ecx
c000af52:	31 d2                	xor    edx,edx
c000af54:	58                   	pop    eax
c000af55:	31 c0                	xor    eax,eax
c000af57:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000af5b:	eb 09                	jmp    c000af66 <VgaText::putchar(char)+0x82>
c000af5d:	6b c0 0a             	imul   eax,eax,0xa
c000af60:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000af64:	88 ca                	mov    dl,cl
c000af66:	46                   	inc    esi
c000af67:	eb ce                	jmp    c000af37 <VgaText::putchar(char)+0x53>
c000af69:	84 d2                	test   dl,dl
c000af6b:	74 2e                	je     c000af9b <VgaText::putchar(char)+0xb7>
c000af6d:	50                   	push   eax
c000af6e:	53                   	push   ebx
c000af6f:	e8 60 f9 ff ff       	call   c000a8d4 <VgaText::doANSI_SGR(int)>
c000af74:	58                   	pop    eax
c000af75:	5a                   	pop    edx
c000af76:	eb 23                	jmp    c000af9b <VgaText::putchar(char)+0xb7>
c000af78:	3c 4a                	cmp    al,0x4a
c000af7a:	75 1f                	jne    c000af9b <VgaText::putchar(char)+0xb7>
c000af7c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000af80:	75 19                	jne    c000af9b <VgaText::putchar(char)+0xb7>
c000af82:	83 ec 0c             	sub    esp,0xc
c000af85:	53                   	push   ebx
c000af86:	e8 ff fe ff ff       	call   c000ae8a <VgaText::clearScreen()>
c000af8b:	83 c4 0c             	add    esp,0xc
c000af8e:	6a 00                	push   0x0
c000af90:	6a 00                	push   0x0
c000af92:	53                   	push   ebx
c000af93:	e8 5a fb ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000af98:	83 c4 10             	add    esp,0x10
c000af9b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000afa1:	eb 27                	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000afa3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000afa6:	83 fa 0e             	cmp    edx,0xe
c000afa9:	7f 1f                	jg     c000afca <VgaText::putchar(char)+0xe6>
c000afab:	8d 4a 01             	lea    ecx,[edx+0x1]
c000afae:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000afb1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000afb5:	eb 13                	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000afb7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000afba:	0f be c0             	movsx  eax,al
c000afbd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000afc0:	50                   	push   eax
c000afc1:	53                   	push   ebx
c000afc2:	e8 65 fc ff ff       	call   c000ac2c <VgaText::putchar(char, VgaColour, VgaColour)>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	83 c4 14             	add    esp,0x14
c000afcd:	5b                   	pop    ebx
c000afce:	5e                   	pop    esi
c000afcf:	c3                   	ret    

c000afd0 <VgaText::putx(unsigned int)>:
c000afd0:	57                   	push   edi
c000afd1:	b9 11 00 00 00       	mov    ecx,0x11
c000afd6:	56                   	push   esi
c000afd7:	be 26 43 02 c0       	mov    esi,0xc0024326
c000afdc:	53                   	push   ebx
c000afdd:	83 ec 20             	sub    esp,0x20
c000afe0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000afe4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000afe8:	fc                   	cld    
c000afe9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000afeb:	be 08 00 00 00       	mov    esi,0x8
c000aff0:	50                   	push   eax
c000aff1:	50                   	push   eax
c000aff2:	89 d8                	mov    eax,ebx
c000aff4:	c1 e3 04             	shl    ebx,0x4
c000aff7:	c1 e8 1c             	shr    eax,0x1c
c000affa:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000afff:	50                   	push   eax
c000b000:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b004:	e8 db fe ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b009:	83 c4 10             	add    esp,0x10
c000b00c:	4e                   	dec    esi
c000b00d:	75 e1                	jne    c000aff0 <VgaText::putx(unsigned int)+0x20>
c000b00f:	83 c4 20             	add    esp,0x20
c000b012:	5b                   	pop    ebx
c000b013:	5e                   	pop    esi
c000b014:	5f                   	pop    edi
c000b015:	c3                   	ret    

c000b016 <VgaText::puts(char const*)>:
c000b016:	53                   	push   ebx
c000b017:	83 ec 08             	sub    esp,0x8
c000b01a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b01e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b021:	84 c0                	test   al,al
c000b023:	74 12                	je     c000b037 <VgaText::puts(char const*)+0x21>
c000b025:	43                   	inc    ebx
c000b026:	51                   	push   ecx
c000b027:	51                   	push   ecx
c000b028:	50                   	push   eax
c000b029:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b02d:	e8 b2 fe ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b032:	83 c4 10             	add    esp,0x10
c000b035:	eb e7                	jmp    c000b01e <VgaText::puts(char const*)+0x8>
c000b037:	83 c4 08             	add    esp,0x8
c000b03a:	5b                   	pop    ebx
c000b03b:	c3                   	ret    

c000b03c <VgaText::VgaText(char const*)>:
c000b03c:	57                   	push   edi
c000b03d:	56                   	push   esi
c000b03e:	53                   	push   ebx
c000b03f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b043:	83 ec 08             	sub    esp,0x8
c000b046:	6a 00                	push   0x0
c000b048:	50                   	push   eax
c000b049:	e8 48 05 00 00       	call   c000b596 <UnixFile::UnixFile(int)>
c000b04e:	83 c4 10             	add    esp,0x10
c000b051:	ba 8c 43 02 c0       	mov    edx,0xc002438c
c000b056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b05a:	89 10                	mov    DWORD PTR [eax],edx
c000b05c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b060:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b06b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b076:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b07a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b07e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b086:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b08d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b091:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b09c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b0a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a7:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b0ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0b2:	8d 50 60             	lea    edx,[eax+0x60]
c000b0b5:	bb a0 80 02 c0       	mov    ebx,0xc00280a0
c000b0ba:	b8 08 00 00 00       	mov    eax,0x8
c000b0bf:	fc                   	cld    
c000b0c0:	89 d7                	mov    edi,edx
c000b0c2:	89 de                	mov    esi,ebx
c000b0c4:	89 c1                	mov    ecx,eax
c000b0c6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0cc:	05 82 00 00 00       	add    eax,0x82
c000b0d1:	83 ec 08             	sub    esp,0x8
c000b0d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0d8:	50                   	push   eax
c000b0d9:	e8 62 56 ff ff       	call   c0000740 <strcpy>
c000b0de:	83 c4 10             	add    esp,0x10
c000b0e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0e5:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b0ec:	83 ec 0c             	sub    esp,0xc
c000b0ef:	6a 01                	push   0x1
c000b0f1:	e8 e3 08 00 00       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c000b0f6:	83 c4 10             	add    esp,0x10
c000b0f9:	89 c2                	mov    edx,eax
c000b0fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0ff:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b102:	8b 1d 70 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028170
c000b108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b10c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b10f:	89 c6                	mov    esi,eax
c000b111:	e8 b0 ef ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000b116:	68 05 0c 00 00       	push   0xc05
c000b11b:	56                   	push   esi
c000b11c:	50                   	push   eax
c000b11d:	53                   	push   ebx
c000b11e:	e8 5d 0f 00 00       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b123:	83 c4 10             	add    esp,0x10
c000b126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b12a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b12d:	83 ec 04             	sub    esp,0x4
c000b130:	68 00 0f 00 00       	push   0xf00
c000b135:	6a 00                	push   0x0
c000b137:	50                   	push   eax
c000b138:	e8 47 55 ff ff       	call   c0000684 <memset>
c000b13d:	83 c4 10             	add    esp,0x10
c000b140:	83 ec 04             	sub    esp,0x4
c000b143:	6a 00                	push   0x0
c000b145:	6a 07                	push   0x7
c000b147:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b14b:	e8 18 f8 ff ff       	call   c000a968 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	83 ec 04             	sub    esp,0x4
c000b156:	6a 00                	push   0x0
c000b158:	6a 00                	push   0x0
c000b15a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b15e:	e8 8f f9 ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000b163:	83 c4 10             	add    esp,0x10
c000b166:	83 ec 0c             	sub    esp,0xc
c000b169:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b16d:	e8 18 fd ff ff       	call   c000ae8a <VgaText::clearScreen()>
c000b172:	83 c4 10             	add    esp,0x10
c000b175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b179:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b17d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b181:	05 02 01 00 00       	add    eax,0x102
c000b186:	83 ec 04             	sub    esp,0x4
c000b189:	68 96 00 00 00       	push   0x96
c000b18e:	6a 00                	push   0x0
c000b190:	50                   	push   eax
c000b191:	e8 ee 54 ff ff       	call   c0000684 <memset>
c000b196:	83 c4 10             	add    esp,0x10
c000b199:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b19d:	05 98 01 00 00       	add    eax,0x198
c000b1a2:	83 ec 04             	sub    esp,0x4
c000b1a5:	68 2c 01 00 00       	push   0x12c
c000b1aa:	6a 00                	push   0x0
c000b1ac:	50                   	push   eax
c000b1ad:	e8 d2 54 ff ff       	call   c0000684 <memset>
c000b1b2:	83 c4 10             	add    esp,0x10
c000b1b5:	90                   	nop
c000b1b6:	5b                   	pop    ebx
c000b1b7:	5e                   	pop    esi
c000b1b8:	5f                   	pop    edi
c000b1b9:	c3                   	ret    

c000b1ba <VgaText::receiveKey(unsigned char)>:
c000b1ba:	55                   	push   ebp
c000b1bb:	57                   	push   edi
c000b1bc:	56                   	push   esi
c000b1bd:	53                   	push   ebx
c000b1be:	83 ec 1c             	sub    esp,0x1c
c000b1c1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b1c5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b1c9:	84 db                	test   bl,bl
c000b1cb:	0f 84 c9 00 00 00    	je     c000b29a <VgaText::receiveKey(unsigned char)+0xe0>
c000b1d1:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b1d7:	80 fb 08             	cmp    bl,0x8
c000b1da:	75 2c                	jne    c000b208 <VgaText::receiveKey(unsigned char)+0x4e>
c000b1dc:	83 ec 0c             	sub    esp,0xc
c000b1df:	57                   	push   edi
c000b1e0:	e8 bb 54 ff ff       	call   c00006a0 <strlen>
c000b1e5:	83 c4 10             	add    esp,0x10
c000b1e8:	85 c0                	test   eax,eax
c000b1ea:	74 41                	je     c000b22d <VgaText::receiveKey(unsigned char)+0x73>
c000b1ec:	50                   	push   eax
c000b1ed:	50                   	push   eax
c000b1ee:	6a 08                	push   0x8
c000b1f0:	56                   	push   esi
c000b1f1:	e8 ee fc ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b1f6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b1f9:	e8 a2 54 ff ff       	call   c00006a0 <strlen>
c000b1fe:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b206:	eb 22                	jmp    c000b22a <VgaText::receiveKey(unsigned char)+0x70>
c000b208:	0f be c3             	movsx  eax,bl
c000b20b:	52                   	push   edx
c000b20c:	52                   	push   edx
c000b20d:	50                   	push   eax
c000b20e:	56                   	push   esi
c000b20f:	e8 d0 fc ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b214:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b218:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b21d:	59                   	pop    ecx
c000b21e:	5d                   	pop    ebp
c000b21f:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b223:	50                   	push   eax
c000b224:	57                   	push   edi
c000b225:	e8 56 56 ff ff       	call   c0000880 <strcat>
c000b22a:	83 c4 10             	add    esp,0x10
c000b22d:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b234:	75 05                	jne    c000b23b <VgaText::receiveKey(unsigned char)+0x81>
c000b236:	80 fb 0a             	cmp    bl,0xa
c000b239:	75 53                	jne    c000b28e <VgaText::receiveKey(unsigned char)+0xd4>
c000b23b:	83 ec 0c             	sub    esp,0xc
c000b23e:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c000b244:	53                   	push   ebx
c000b245:	e8 56 54 ff ff       	call   c00006a0 <strlen>
c000b24a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b24d:	89 c5                	mov    ebp,eax
c000b24f:	e8 4c 54 ff ff       	call   c00006a0 <strlen>
c000b254:	83 c4 10             	add    esp,0x10
c000b257:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b25b:	3d 2c 01 00 00       	cmp    eax,0x12c
c000b260:	76 10                	jbe    c000b272 <VgaText::receiveKey(unsigned char)+0xb8>
c000b262:	83 ec 0c             	sub    esp,0xc
c000b265:	68 37 43 02 c0       	push   0xc0024337
c000b26a:	e8 4c 97 00 00       	call   c00149bb <Krnl::panic(char const*)>
c000b26f:	83 c4 10             	add    esp,0x10
c000b272:	50                   	push   eax
c000b273:	50                   	push   eax
c000b274:	57                   	push   edi
c000b275:	53                   	push   ebx
c000b276:	e8 05 56 ff ff       	call   c0000880 <strcat>
c000b27b:	83 c4 0c             	add    esp,0xc
c000b27e:	68 96 00 00 00       	push   0x96
c000b283:	6a 00                	push   0x0
c000b285:	57                   	push   edi
c000b286:	e8 f9 53 ff ff       	call   c0000684 <memset>
c000b28b:	83 c4 10             	add    esp,0x10
c000b28e:	83 ec 0c             	sub    esp,0xc
c000b291:	56                   	push   esi
c000b292:	e8 6d fa ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000b297:	83 c4 10             	add    esp,0x10
c000b29a:	83 c4 1c             	add    esp,0x1c
c000b29d:	5b                   	pop    ebx
c000b29e:	5e                   	pop    esi
c000b29f:	5f                   	pop    edi
c000b2a0:	5d                   	pop    ebp
c000b2a1:	c3                   	ret    

c000b2a2 <VgaText::write(unsigned long long, void*, int*)>:
c000b2a2:	55                   	push   ebp
c000b2a3:	57                   	push   edi
c000b2a4:	56                   	push   esi
c000b2a5:	53                   	push   ebx
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b2ad:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b2b1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b2b5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b2bc:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b2bf:	39 eb                	cmp    ebx,ebp
c000b2c1:	74 13                	je     c000b2d6 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b2c3:	43                   	inc    ebx
c000b2c4:	50                   	push   eax
c000b2c5:	50                   	push   eax
c000b2c6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b2ca:	50                   	push   eax
c000b2cb:	56                   	push   esi
c000b2cc:	e8 13 fc ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b2d1:	83 c4 10             	add    esp,0x10
c000b2d4:	eb e9                	jmp    c000b2bf <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b2d6:	83 ec 0c             	sub    esp,0xc
c000b2d9:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b2e0:	56                   	push   esi
c000b2e1:	e8 1e fa ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000b2e6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b2ea:	89 38                	mov    DWORD PTR [eax],edi
c000b2ec:	83 c4 1c             	add    esp,0x1c
c000b2ef:	31 c0                	xor    eax,eax
c000b2f1:	5b                   	pop    ebx
c000b2f2:	5e                   	pop    esi
c000b2f3:	5f                   	pop    edi
c000b2f4:	5d                   	pop    ebp
c000b2f5:	c3                   	ret    

c000b2f6 <newTerminal(char*)>:
c000b2f6:	83 ec 28             	sub    esp,0x28
c000b2f9:	68 c4 02 00 00       	push   0x2c4
c000b2fe:	e8 0c e7 ff ff       	call   c0009a0f <malloc>
c000b303:	5a                   	pop    edx
c000b304:	59                   	pop    ecx
c000b305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b309:	50                   	push   eax
c000b30a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b30e:	e8 29 fd ff ff       	call   c000b03c <VgaText::VgaText(char const*)>
c000b313:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b317:	83 c4 2c             	add    esp,0x2c
c000b31a:	c3                   	ret    
c000b31b:	90                   	nop

c000b31c <TSS::TSS()>:
c000b31c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b320:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b327:	90                   	nop
c000b328:	c3                   	ret    
c000b329:	90                   	nop
c000b32a:	66 90                	xchg   ax,ax

c000b32c <TSS::setESP(unsigned long)>:
c000b32c:	55                   	push   ebp
c000b32d:	89 e5                	mov    ebp,esp
c000b32f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b332:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b335:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b338:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b33b:	90                   	nop
c000b33c:	5d                   	pop    ebp
c000b33d:	c3                   	ret    
c000b33e:	66 90                	xchg   ax,ax

c000b340 <TSS::flush()>:
c000b340:	55                   	push   ebp
c000b341:	89 e5                	mov    ebp,esp
c000b343:	83 ec 10             	sub    esp,0x10
c000b346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b349:	8b 00                	mov    eax,DWORD PTR [eax]
c000b34b:	83 c8 03             	or     eax,0x3
c000b34e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b352:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b356:	66 89 d0             	mov    ax,dx
c000b359:	0f 00 d8             	ltr    ax
c000b35c:	90                   	nop
c000b35d:	c9                   	leave  
c000b35e:	c3                   	ret    
c000b35f:	90                   	nop

c000b360 <TSS::setup(unsigned long, unsigned long)>:
c000b360:	55                   	push   ebp
c000b361:	89 e5                	mov    ebp,esp
c000b363:	83 ec 18             	sub    esp,0x18
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	6a 68                	push   0x68
c000b36b:	e8 9f e6 ff ff       	call   c0009a0f <malloc>
c000b370:	83 c4 10             	add    esp,0x10
c000b373:	89 c2                	mov    edx,eax
c000b375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b378:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b37b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b37e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b381:	83 ec 04             	sub    esp,0x4
c000b384:	6a 68                	push   0x68
c000b386:	6a 00                	push   0x0
c000b388:	50                   	push   eax
c000b389:	e8 f6 52 ff ff       	call   c0000684 <memset>
c000b38e:	83 c4 10             	add    esp,0x10
c000b391:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b394:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b397:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b39d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3a3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b3a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3af:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b3b2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b3b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3bb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b3c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3c7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b3cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3d3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b3d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3df:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b3e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3eb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b3f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3f7:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b3fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b400:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b403:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b406:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b409:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b40c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b40f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b412:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b415:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b418:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b41b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b422:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b425:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b428:	0f 20 da             	mov    edx,cr3
c000b42b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b42e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b431:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b434:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b437:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b43a:	83 ec 08             	sub    esp,0x8
c000b43d:	50                   	push   eax
c000b43e:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b441:	50                   	push   eax
c000b442:	e8 23 de ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c000b447:	83 c4 10             	add    esp,0x10
c000b44a:	83 ec 08             	sub    esp,0x8
c000b44d:	6a 68                	push   0x68
c000b44f:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b452:	50                   	push   eax
c000b453:	e8 2e de ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c000b458:	83 c4 10             	add    esp,0x10
c000b45b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b45f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b462:	83 e0 0f             	and    eax,0xf
c000b465:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b468:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b46b:	83 c8 40             	or     eax,0x40
c000b46e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b471:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c000b476:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b47c:	05 78 01 00 00       	add    eax,0x178
c000b481:	83 ec 04             	sub    esp,0x4
c000b484:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b487:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b48a:	50                   	push   eax
c000b48b:	e8 2a de ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c000b490:	83 c4 10             	add    esp,0x10
c000b493:	89 c2                	mov    edx,eax
c000b495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b498:	89 10                	mov    DWORD PTR [eax],edx
c000b49a:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c000b49f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b4a5:	05 78 01 00 00       	add    eax,0x178
c000b4aa:	83 ec 0c             	sub    esp,0xc
c000b4ad:	50                   	push   eax
c000b4ae:	e8 31 de ff ff       	call   c00092e4 <GDT::flush()>
c000b4b3:	83 c4 10             	add    esp,0x10
c000b4b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b4b9:	8b 00                	mov    eax,DWORD PTR [eax]
c000b4bb:	c9                   	leave  
c000b4bc:	c3                   	ret    
c000b4bd:	90                   	nop

c000b4be <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b4be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b4c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4c9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b4ce:	75 08                	jne    c000b4d8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b4d0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b4d6:	eb 38                	jmp    c000b510 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b4d8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b4dd:	75 17                	jne    c000b4f6 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b4df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b4e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b4e7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b4ed:	8b 10                	mov    edx,DWORD PTR [eax]
c000b4ef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b4f3:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b4f6:	89 c1                	mov    ecx,eax
c000b4f8:	83 e1 fd             	and    ecx,0xfffffffd
c000b4fb:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b501:	74 cd                	je     c000b4d0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b503:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b508:	83 e0 ef             	and    eax,0xffffffef
c000b50b:	83 f8 08             	cmp    eax,0x8
c000b50e:	76 c0                	jbe    c000b4d0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b510:	31 c0                	xor    eax,eax
c000b512:	c3                   	ret    
c000b513:	90                   	nop

c000b514 <ReservedFilename::isAtty()>:
c000b514:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b518:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b51b:	31 c0                	xor    eax,eax
c000b51d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b523:	74 09                	je     c000b52e <ReservedFilename::isAtty()+0x1a>
c000b525:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b52b:	0f 94 c0             	sete   al
c000b52e:	c3                   	ret    
c000b52f:	90                   	nop

c000b530 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b530:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b534:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b538:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b53b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b53f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b544:	75 08                	jne    c000b54e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b546:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b54c:	eb 3d                	jmp    c000b58b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b54e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b553:	75 17                	jne    c000b56c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b555:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b55a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b55d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b563:	8b 10                	mov    edx,DWORD PTR [eax]
c000b565:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b569:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b56c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b571:	75 04                	jne    c000b577 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b573:	89 0a                	mov    DWORD PTR [edx],ecx
c000b575:	eb 14                	jmp    c000b58b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b577:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b57c:	74 c8                	je     c000b546 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b57e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b583:	83 e0 ef             	and    eax,0xffffffef
c000b586:	83 f8 08             	cmp    eax,0x8
c000b589:	76 bb                	jbe    c000b546 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b58b:	31 c0                	xor    eax,eax
c000b58d:	c3                   	ret    

c000b58e <UnixFile::getFileDescriptor()>:
c000b58e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b592:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b595:	c3                   	ret    

c000b596 <UnixFile::UnixFile(int)>:
c000b596:	53                   	push   ebx
c000b597:	83 ec 28             	sub    esp,0x28
c000b59a:	ba 54 44 02 c0       	mov    edx,0xc0024454
c000b59f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5a3:	89 10                	mov    DWORD PTR [eax],edx
c000b5a5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b5ad:	0f 8f 8c 01 00 00    	jg     c000b73f <UnixFile::UnixFile(int)+0x1a9>
c000b5b3:	a1 80 74 02 c0       	mov    eax,ds:0xc0027480
c000b5b8:	8d 50 01             	lea    edx,[eax+0x1]
c000b5bb:	89 15 80 74 02 c0    	mov    DWORD PTR ds:0xc0027480,edx
c000b5c1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b5c5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b5c8:	83 ec 08             	sub    esp,0x8
c000b5cb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b5cf:	68 58 81 02 c0       	push   0xc0028158
c000b5d4:	e8 93 74 01 00       	call   c0022a6c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b5d9:	83 c4 10             	add    esp,0x10
c000b5dc:	a0 54 81 02 c0       	mov    al,ds:0xc0028154
c000b5e1:	83 f0 01             	xor    eax,0x1
c000b5e4:	84 c0                	test   al,al
c000b5e6:	0f 84 54 01 00 00    	je     c000b740 <UnixFile::UnixFile(int)+0x1aa>
c000b5ec:	c6 05 54 81 02 c0 01 	mov    BYTE PTR ds:0xc0028154,0x1
c000b5f3:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b5fb:	83 ec 0c             	sub    esp,0xc
c000b5fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b602:	e8 08 e4 ff ff       	call   c0009a0f <malloc>
c000b607:	83 c4 10             	add    esp,0x10
c000b60a:	89 c3                	mov    ebx,eax
c000b60c:	83 ec 08             	sub    esp,0x8
c000b60f:	68 03 ff ff 0f       	push   0xfffff03
c000b614:	53                   	push   ebx
c000b615:	e8 2c 01 00 00       	call   c000b746 <ReservedFilename::ReservedFilename(int)>
c000b61a:	83 c4 10             	add    esp,0x10
c000b61d:	89 1d 4c 81 02 c0    	mov    DWORD PTR ds:0xc002814c,ebx
c000b623:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b62b:	83 ec 0c             	sub    esp,0xc
c000b62e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b632:	e8 d8 e3 ff ff       	call   c0009a0f <malloc>
c000b637:	83 c4 10             	add    esp,0x10
c000b63a:	89 c3                	mov    ebx,eax
c000b63c:	83 ec 08             	sub    esp,0x8
c000b63f:	68 01 ff ff 0f       	push   0xfffff01
c000b644:	53                   	push   ebx
c000b645:	e8 fc 00 00 00       	call   c000b746 <ReservedFilename::ReservedFilename(int)>
c000b64a:	83 c4 10             	add    esp,0x10
c000b64d:	89 1d 50 81 02 c0    	mov    DWORD PTR ds:0xc0028150,ebx
c000b653:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b65b:	83 ec 0c             	sub    esp,0xc
c000b65e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b662:	e8 a8 e3 ff ff       	call   c0009a0f <malloc>
c000b667:	83 c4 10             	add    esp,0x10
c000b66a:	89 c3                	mov    ebx,eax
c000b66c:	83 ec 08             	sub    esp,0x8
c000b66f:	68 00 ff ff 0f       	push   0xfffff00
c000b674:	53                   	push   ebx
c000b675:	e8 cc 00 00 00       	call   c000b746 <ReservedFilename::ReservedFilename(int)>
c000b67a:	83 c4 10             	add    esp,0x10
c000b67d:	89 1d 44 81 02 c0    	mov    DWORD PTR ds:0xc0028144,ebx
c000b683:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b68b:	83 ec 0c             	sub    esp,0xc
c000b68e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b692:	e8 78 e3 ff ff       	call   c0009a0f <malloc>
c000b697:	83 c4 10             	add    esp,0x10
c000b69a:	89 c3                	mov    ebx,eax
c000b69c:	83 ec 08             	sub    esp,0x8
c000b69f:	68 02 ff ff 0f       	push   0xfffff02
c000b6a4:	53                   	push   ebx
c000b6a5:	e8 9c 00 00 00       	call   c000b746 <ReservedFilename::ReservedFilename(int)>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	89 1d 48 81 02 c0    	mov    DWORD PTR ds:0xc0028148,ebx
c000b6b3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b6bb:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b6c0:	7f 7e                	jg     c000b740 <UnixFile::UnixFile(int)+0x1aa>
c000b6c2:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b6ca:	83 ec 0c             	sub    esp,0xc
c000b6cd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b6d1:	e8 39 e3 ff ff       	call   c0009a0f <malloc>
c000b6d6:	83 c4 10             	add    esp,0x10
c000b6d9:	89 c3                	mov    ebx,eax
c000b6db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6df:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b6e4:	83 ec 08             	sub    esp,0x8
c000b6e7:	50                   	push   eax
c000b6e8:	53                   	push   ebx
c000b6e9:	e8 58 00 00 00       	call   c000b746 <ReservedFilename::ReservedFilename(int)>
c000b6ee:	83 c4 10             	add    esp,0x10
c000b6f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6f5:	89 1c 85 20 81 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7ee0],ebx
c000b6fc:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b704:	83 ec 0c             	sub    esp,0xc
c000b707:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b70b:	e8 ff e2 ff ff       	call   c0009a0f <malloc>
c000b710:	83 c4 10             	add    esp,0x10
c000b713:	89 c3                	mov    ebx,eax
c000b715:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b719:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b71e:	83 ec 08             	sub    esp,0x8
c000b721:	50                   	push   eax
c000b722:	53                   	push   ebx
c000b723:	e8 1e 00 00 00       	call   c000b746 <ReservedFilename::ReservedFilename(int)>
c000b728:	83 c4 10             	add    esp,0x10
c000b72b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b72f:	89 1c 85 e0 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f20],ebx
c000b736:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b73a:	e9 7c ff ff ff       	jmp    c000b6bb <UnixFile::UnixFile(int)+0x125>
c000b73f:	90                   	nop
c000b740:	83 c4 28             	add    esp,0x28
c000b743:	5b                   	pop    ebx
c000b744:	c3                   	ret    
c000b745:	90                   	nop

c000b746 <ReservedFilename::ReservedFilename(int)>:
c000b746:	83 ec 0c             	sub    esp,0xc
c000b749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b74d:	83 ec 08             	sub    esp,0x8
c000b750:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b754:	50                   	push   eax
c000b755:	e8 3c fe ff ff       	call   c000b596 <UnixFile::UnixFile(int)>
c000b75a:	83 c4 10             	add    esp,0x10
c000b75d:	ba 70 44 02 c0       	mov    edx,0xc0024470
c000b762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b766:	89 10                	mov    DWORD PTR [eax],edx
c000b768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b76c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b770:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b773:	90                   	nop
c000b774:	83 c4 0c             	add    esp,0xc
c000b777:	c3                   	ret    

c000b778 <UnixFile::~UnixFile()>:
c000b778:	83 ec 1c             	sub    esp,0x1c
c000b77b:	ba 54 44 02 c0       	mov    edx,0xc0024454
c000b780:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b784:	89 10                	mov    DWORD PTR [eax],edx
c000b786:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b78a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b78d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b792:	7f 73                	jg     c000b807 <UnixFile::~UnixFile()+0x8f>
c000b794:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b79c:	83 ec 0c             	sub    esp,0xc
c000b79f:	68 58 81 02 c0       	push   0xc0028158
c000b7a4:	e8 97 73 01 00       	call   c0022b40 <LinkedList<UnixFile>::getFirstElement()>
c000b7a9:	83 c4 10             	add    esp,0x10
c000b7ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7b0:	83 ec 0c             	sub    esp,0xc
c000b7b3:	68 58 81 02 c0       	push   0xc0028158
c000b7b8:	e8 8b 73 01 00       	call   c0022b48 <LinkedList<UnixFile>::removeFirst()>
c000b7bd:	83 c4 10             	add    esp,0x10
c000b7c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7c4:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b7c8:	74 40                	je     c000b80a <UnixFile::~UnixFile()+0x92>
c000b7ca:	83 ec 08             	sub    esp,0x8
c000b7cd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b7d1:	68 58 81 02 c0       	push   0xc0028158
c000b7d6:	e8 91 72 01 00       	call   c0022a6c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b7db:	83 c4 10             	add    esp,0x10
c000b7de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b7e2:	8d 50 01             	lea    edx,[eax+0x1]
c000b7e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7e9:	3d 88 13 00 00       	cmp    eax,0x1388
c000b7ee:	0f 94 c0             	sete   al
c000b7f1:	84 c0                	test   al,al
c000b7f3:	74 a7                	je     c000b79c <UnixFile::~UnixFile()+0x24>
c000b7f5:	83 ec 0c             	sub    esp,0xc
c000b7f8:	68 2c 44 02 c0       	push   0xc002442c
c000b7fd:	e8 b9 91 00 00       	call   c00149bb <Krnl::panic(char const*)>
c000b802:	83 c4 10             	add    esp,0x10
c000b805:	eb 95                	jmp    c000b79c <UnixFile::~UnixFile()+0x24>
c000b807:	90                   	nop
c000b808:	eb 01                	jmp    c000b80b <UnixFile::~UnixFile()+0x93>
c000b80a:	90                   	nop
c000b80b:	90                   	nop
c000b80c:	83 c4 1c             	add    esp,0x1c
c000b80f:	c3                   	ret    

c000b810 <UnixFile::~UnixFile()>:
c000b810:	83 ec 0c             	sub    esp,0xc
c000b813:	83 ec 0c             	sub    esp,0xc
c000b816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b81a:	e8 59 ff ff ff       	call   c000b778 <UnixFile::~UnixFile()>
c000b81f:	83 c4 10             	add    esp,0x10
c000b822:	83 ec 08             	sub    esp,0x8
c000b825:	6a 0c                	push   0xc
c000b827:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b82b:	e8 ee 13 00 00       	call   c000cc1e <operator delete(void*, unsigned long)>
c000b830:	83 c4 10             	add    esp,0x10
c000b833:	83 c4 0c             	add    esp,0xc
c000b836:	c3                   	ret    
c000b837:	90                   	nop

c000b838 <ReservedFilename::~ReservedFilename()>:
c000b838:	83 ec 0c             	sub    esp,0xc
c000b83b:	ba 70 44 02 c0       	mov    edx,0xc0024470
c000b840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b844:	89 10                	mov    DWORD PTR [eax],edx
c000b846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b84a:	83 ec 0c             	sub    esp,0xc
c000b84d:	50                   	push   eax
c000b84e:	e8 25 ff ff ff       	call   c000b778 <UnixFile::~UnixFile()>
c000b853:	83 c4 10             	add    esp,0x10
c000b856:	90                   	nop
c000b857:	83 c4 0c             	add    esp,0xc
c000b85a:	c3                   	ret    
c000b85b:	90                   	nop

c000b85c <ReservedFilename::~ReservedFilename()>:
c000b85c:	83 ec 0c             	sub    esp,0xc
c000b85f:	83 ec 0c             	sub    esp,0xc
c000b862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b866:	e8 cd ff ff ff       	call   c000b838 <ReservedFilename::~ReservedFilename()>
c000b86b:	83 c4 10             	add    esp,0x10
c000b86e:	83 ec 08             	sub    esp,0x8
c000b871:	6a 0c                	push   0xc
c000b873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b877:	e8 a2 13 00 00       	call   c000cc1e <operator delete(void*, unsigned long)>
c000b87c:	83 c4 10             	add    esp,0x10
c000b87f:	83 c4 0c             	add    esp,0xc
c000b882:	c3                   	ret    

c000b883 <getFromFileDescriptor(int)>:
c000b883:	53                   	push   ebx
c000b884:	83 ec 08             	sub    esp,0x8
c000b887:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b88b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b891:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b897:	7f 2c                	jg     c000b8c5 <getFromFileDescriptor(int)+0x42>
c000b899:	83 ec 0c             	sub    esp,0xc
c000b89c:	68 58 81 02 c0       	push   0xc0028158
c000b8a1:	e8 9a 72 01 00       	call   c0022b40 <LinkedList<UnixFile>::getFirstElement()>
c000b8a6:	83 c4 10             	add    esp,0x10
c000b8a9:	85 c0                	test   eax,eax
c000b8ab:	75 04                	jne    c000b8b1 <getFromFileDescriptor(int)+0x2e>
c000b8ad:	31 c0                	xor    eax,eax
c000b8af:	eb 6e                	jmp    c000b91f <getFromFileDescriptor(int)+0x9c>
c000b8b1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b8b4:	74 69                	je     c000b91f <getFromFileDescriptor(int)+0x9c>
c000b8b6:	52                   	push   edx
c000b8b7:	52                   	push   edx
c000b8b8:	50                   	push   eax
c000b8b9:	68 58 81 02 c0       	push   0xc0028158
c000b8be:	e8 27 73 01 00       	call   c0022bea <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b8c3:	eb e1                	jmp    c000b8a6 <getFromFileDescriptor(int)+0x23>
c000b8c5:	a1 4c 81 02 c0       	mov    eax,ds:0xc002814c
c000b8ca:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b8d0:	74 4d                	je     c000b91f <getFromFileDescriptor(int)+0x9c>
c000b8d2:	a1 50 81 02 c0       	mov    eax,ds:0xc0028150
c000b8d7:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b8dd:	74 40                	je     c000b91f <getFromFileDescriptor(int)+0x9c>
c000b8df:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c000b8e4:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b8ea:	74 33                	je     c000b91f <getFromFileDescriptor(int)+0x9c>
c000b8ec:	a1 44 81 02 c0       	mov    eax,ds:0xc0028144
c000b8f1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b8f7:	74 26                	je     c000b91f <getFromFileDescriptor(int)+0x9c>
c000b8f9:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b8ff:	83 f8 08             	cmp    eax,0x8
c000b902:	77 09                	ja     c000b90d <getFromFileDescriptor(int)+0x8a>
c000b904:	8b 04 85 20 81 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ee0]
c000b90b:	eb 12                	jmp    c000b91f <getFromFileDescriptor(int)+0x9c>
c000b90d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b913:	83 fb 08             	cmp    ebx,0x8
c000b916:	77 95                	ja     c000b8ad <getFromFileDescriptor(int)+0x2a>
c000b918:	8b 04 9d e0 80 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7f20]
c000b91f:	83 c4 08             	add    esp,0x8
c000b922:	5b                   	pop    ebx
c000b923:	c3                   	ret    

c000b924 <__static_initialization_and_destruction_0(int, int)>:
c000b924:	83 ec 0c             	sub    esp,0xc
c000b927:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b92c:	75 34                	jne    c000b962 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b92e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b936:	75 2a                	jne    c000b962 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b938:	83 ec 0c             	sub    esp,0xc
c000b93b:	68 58 81 02 c0       	push   0xc0028158
c000b940:	e8 e5 70 01 00       	call   c0022a2a <LinkedList<UnixFile>::LinkedList()>
c000b945:	83 c4 10             	add    esp,0x10
c000b948:	83 ec 04             	sub    esp,0x4
c000b94b:	68 ac 72 02 c0       	push   0xc00272ac
c000b950:	68 58 81 02 c0       	push   0xc0028158
c000b955:	68 28 2a 02 c0       	push   0xc0022a28
c000b95a:	e8 39 12 00 00       	call   c000cb98 <__cxa_atexit>
c000b95f:	83 c4 10             	add    esp,0x10
c000b962:	90                   	nop
c000b963:	83 c4 0c             	add    esp,0xc
c000b966:	c3                   	ret    

c000b967 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b967:	83 ec 0c             	sub    esp,0xc
c000b96a:	83 ec 08             	sub    esp,0x8
c000b96d:	68 ff ff 00 00       	push   0xffff
c000b972:	6a 01                	push   0x1
c000b974:	e8 ab ff ff ff       	call   c000b924 <__static_initialization_and_destruction_0(int, int)>
c000b979:	83 c4 10             	add    esp,0x10
c000b97c:	83 c4 0c             	add    esp,0xc
c000b97f:	c3                   	ret    

c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b980:	53                   	push   ebx
c000b981:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b985:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b989:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b98f:	89 c8                	mov    eax,ecx
c000b991:	d1 e8                	shr    eax,1
c000b993:	03 05 88 74 02 c0    	add    eax,DWORD PTR ds:0xc0027488
c000b999:	83 e1 01             	and    ecx,0x1
c000b99c:	8a 10                	mov    dl,BYTE PTR [eax]
c000b99e:	75 09                	jne    c000b9a9 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b9a0:	83 e2 f0             	and    edx,0xfffffff0
c000b9a3:	09 da                	or     edx,ebx
c000b9a5:	88 10                	mov    BYTE PTR [eax],dl
c000b9a7:	5b                   	pop    ebx
c000b9a8:	c3                   	ret    
c000b9a9:	c1 e3 04             	shl    ebx,0x4
c000b9ac:	83 e2 0f             	and    edx,0xf
c000b9af:	09 da                	or     edx,ebx
c000b9b1:	88 10                	mov    BYTE PTR [eax],dl
c000b9b3:	5b                   	pop    ebx
c000b9b4:	c3                   	ret    

c000b9b5 <Virt::getPageState(unsigned long)>:
c000b9b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9b9:	8b 0d 88 74 02 c0    	mov    ecx,DWORD PTR ds:0xc0027488
c000b9bf:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b9c5:	89 d0                	mov    eax,edx
c000b9c7:	d1 e8                	shr    eax,1
c000b9c9:	83 e2 01             	and    edx,0x1
c000b9cc:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b9cf:	75 04                	jne    c000b9d5 <Virt::getPageState(unsigned long)+0x20>
c000b9d1:	83 e0 0f             	and    eax,0xf
c000b9d4:	c3                   	ret    
c000b9d5:	c0 e8 04             	shr    al,0x4
c000b9d8:	c3                   	ret    

c000b9d9 <Virt::allocateKernelVirtualPages(int)>:
c000b9d9:	55                   	push   ebp
c000b9da:	31 ed                	xor    ebp,ebp
c000b9dc:	57                   	push   edi
c000b9dd:	56                   	push   esi
c000b9de:	53                   	push   ebx
c000b9df:	31 db                	xor    ebx,ebx
c000b9e1:	83 ec 1c             	sub    esp,0x1c
c000b9e4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b9e8:	8b 3d 84 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027484
c000b9ee:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b9f3:	57                   	push   edi
c000b9f4:	e8 bc ff ff ff       	call   c000b9b5 <Virt::getPageState(unsigned long)>
c000b9f9:	5a                   	pop    edx
c000b9fa:	84 c0                	test   al,al
c000b9fc:	75 3a                	jne    c000ba38 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b9fe:	85 db                	test   ebx,ebx
c000ba00:	75 02                	jne    c000ba04 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000ba02:	89 fd                	mov    ebp,edi
c000ba04:	43                   	inc    ebx
c000ba05:	39 f3                	cmp    ebx,esi
c000ba07:	74 5a                	je     c000ba63 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000ba09:	47                   	inc    edi
c000ba0a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000ba10:	76 31                	jbe    c000ba43 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000ba12:	c7 05 84 74 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0027484,0xc8000
c000ba1c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ba21:	75 28                	jne    c000ba4b <Virt::allocateKernelVirtualPages(int)+0x72>
c000ba23:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000ba28:	bf 00 80 0c 00       	mov    edi,0xc8000
c000ba2d:	57                   	push   edi
c000ba2e:	e8 82 ff ff ff       	call   c000b9b5 <Virt::getPageState(unsigned long)>
c000ba33:	5a                   	pop    edx
c000ba34:	84 c0                	test   al,al
c000ba36:	74 c6                	je     c000b9fe <Virt::allocateKernelVirtualPages(int)+0x25>
c000ba38:	31 db                	xor    ebx,ebx
c000ba3a:	47                   	inc    edi
c000ba3b:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000ba41:	77 cf                	ja     c000ba12 <Virt::allocateKernelVirtualPages(int)+0x39>
c000ba43:	89 3d 84 74 02 c0    	mov    DWORD PTR ds:0xc0027484,edi
c000ba49:	eb a8                	jmp    c000b9f3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000ba4b:	83 ec 0c             	sub    esp,0xc
c000ba4e:	68 84 44 02 c0       	push   0xc0024484
c000ba53:	e8 63 8f 00 00       	call   c00149bb <Krnl::panic(char const*)>
c000ba58:	8b 3d 84 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027484
c000ba5e:	83 c4 10             	add    esp,0x10
c000ba61:	eb 90                	jmp    c000b9f3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000ba63:	89 2d 84 74 02 c0    	mov    DWORD PTR ds:0xc0027484,ebp
c000ba69:	4b                   	dec    ebx
c000ba6a:	74 5f                	je     c000bacb <Virt::allocateKernelVirtualPages(int)+0xf2>
c000ba6c:	85 f6                	test   esi,esi
c000ba6e:	74 3d                	je     c000baad <Virt::allocateKernelVirtualPages(int)+0xd4>
c000ba70:	89 e8                	mov    eax,ebp
c000ba72:	31 db                	xor    ebx,ebx
c000ba74:	8d 7e ff             	lea    edi,[esi-0x1]
c000ba77:	eb 14                	jmp    c000ba8d <Virt::allocateKernelVirtualPages(int)+0xb4>
c000ba79:	6a 01                	push   0x1
c000ba7b:	43                   	inc    ebx
c000ba7c:	50                   	push   eax
c000ba7d:	e8 fe fe ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ba82:	58                   	pop    eax
c000ba83:	39 f3                	cmp    ebx,esi
c000ba85:	5a                   	pop    edx
c000ba86:	74 25                	je     c000baad <Virt::allocateKernelVirtualPages(int)+0xd4>
c000ba88:	a1 84 74 02 c0       	mov    eax,ds:0xc0027484
c000ba8d:	8d 50 01             	lea    edx,[eax+0x1]
c000ba90:	85 db                	test   ebx,ebx
c000ba92:	89 15 84 74 02 c0    	mov    DWORD PTR ds:0xc0027484,edx
c000ba98:	74 20                	je     c000baba <Virt::allocateKernelVirtualPages(int)+0xe1>
c000ba9a:	39 df                	cmp    edi,ebx
c000ba9c:	75 db                	jne    c000ba79 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000ba9e:	6a 03                	push   0x3
c000baa0:	43                   	inc    ebx
c000baa1:	50                   	push   eax
c000baa2:	e8 d9 fe ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000baa7:	59                   	pop    ecx
c000baa8:	39 f3                	cmp    ebx,esi
c000baaa:	58                   	pop    eax
c000baab:	75 db                	jne    c000ba88 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000baad:	83 c4 1c             	add    esp,0x1c
c000bab0:	89 e8                	mov    eax,ebp
c000bab2:	5b                   	pop    ebx
c000bab3:	c1 e0 0c             	shl    eax,0xc
c000bab6:	5e                   	pop    esi
c000bab7:	5f                   	pop    edi
c000bab8:	5d                   	pop    ebp
c000bab9:	c3                   	ret    
c000baba:	6a 02                	push   0x2
c000babc:	bb 01 00 00 00       	mov    ebx,0x1
c000bac1:	50                   	push   eax
c000bac2:	e8 b9 fe ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bac7:	58                   	pop    eax
c000bac8:	5a                   	pop    edx
c000bac9:	eb bd                	jmp    c000ba88 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000bacb:	6a 04                	push   0x4
c000bacd:	8d 45 01             	lea    eax,[ebp+0x1]
c000bad0:	55                   	push   ebp
c000bad1:	a3 84 74 02 c0       	mov    ds:0xc0027484,eax
c000bad6:	e8 a5 fe ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000badb:	59                   	pop    ecx
c000badc:	89 e8                	mov    eax,ebp
c000bade:	5b                   	pop    ebx
c000badf:	c1 e0 0c             	shl    eax,0xc
c000bae2:	83 c4 1c             	add    esp,0x1c
c000bae5:	5b                   	pop    ebx
c000bae6:	5e                   	pop    esi
c000bae7:	5f                   	pop    edi
c000bae8:	5d                   	pop    ebp
c000bae9:	c3                   	ret    

c000baea <Virt::freeSwapfilePage(unsigned long)>:
c000baea:	53                   	push   ebx
c000baeb:	8b 15 6c 81 02 c0    	mov    edx,DWORD PTR ds:0xc002816c
c000baf1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000baf5:	b8 01 00 00 00       	mov    eax,0x1
c000bafa:	89 cb                	mov    ebx,ecx
c000bafc:	d3 e0                	shl    eax,cl
c000bafe:	c1 eb 05             	shr    ebx,0x5
c000bb01:	f7 d0                	not    eax
c000bb03:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000bb06:	5b                   	pop    ebx
c000bb07:	c3                   	ret    

c000bb08 <Virt::swapIDToSector(unsigned long)>:
c000bb08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb0c:	0f af 05 8c 74 02 c0 	imul   eax,DWORD PTR ds:0xc002748c
c000bb13:	03 05 94 74 02 c0    	add    eax,DWORD PTR ds:0xc0027494
c000bb19:	c3                   	ret    

c000bb1a <Virt::allocateSwapfilePage()>:
c000bb1a:	55                   	push   ebp
c000bb1b:	31 d2                	xor    edx,edx
c000bb1d:	57                   	push   edi
c000bb1e:	56                   	push   esi
c000bb1f:	53                   	push   ebx
c000bb20:	83 ec 0c             	sub    esp,0xc
c000bb23:	8b 0d 8c 74 02 c0    	mov    ecx,DWORD PTR ds:0xc002748c
c000bb29:	a1 90 74 02 c0       	mov    eax,ds:0xc0027490
c000bb2e:	f7 f1                	div    ecx
c000bb30:	39 0d 90 74 02 c0    	cmp    DWORD PTR ds:0xc0027490,ecx
c000bb36:	72 2d                	jb     c000bb65 <Virt::allocateSwapfilePage()+0x4b>
c000bb38:	8b 35 6c 81 02 c0    	mov    esi,DWORD PTR ds:0xc002816c
c000bb3e:	8b 16                	mov    edx,DWORD PTR [esi]
c000bb40:	f6 c2 01             	test   dl,0x1
c000bb43:	74 3c                	je     c000bb81 <Virt::allocateSwapfilePage()+0x67>
c000bb45:	31 c9                	xor    ecx,ecx
c000bb47:	bf 01 00 00 00       	mov    edi,0x1
c000bb4c:	eb 12                	jmp    c000bb60 <Virt::allocateSwapfilePage()+0x46>
c000bb4e:	89 fd                	mov    ebp,edi
c000bb50:	89 ca                	mov    edx,ecx
c000bb52:	d3 e5                	shl    ebp,cl
c000bb54:	c1 ea 05             	shr    edx,0x5
c000bb57:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000bb5a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bb5c:	85 ea                	test   edx,ebp
c000bb5e:	74 2a                	je     c000bb8a <Virt::allocateSwapfilePage()+0x70>
c000bb60:	41                   	inc    ecx
c000bb61:	39 c8                	cmp    eax,ecx
c000bb63:	77 e9                	ja     c000bb4e <Virt::allocateSwapfilePage()+0x34>
c000bb65:	83 ec 0c             	sub    esp,0xc
c000bb68:	68 3c 46 02 c0       	push   0xc002463c
c000bb6d:	e8 49 8e 00 00       	call   c00149bb <Krnl::panic(char const*)>
c000bb72:	83 c4 10             	add    esp,0x10
c000bb75:	31 c9                	xor    ecx,ecx
c000bb77:	83 c4 0c             	add    esp,0xc
c000bb7a:	89 c8                	mov    eax,ecx
c000bb7c:	5b                   	pop    ebx
c000bb7d:	5e                   	pop    esi
c000bb7e:	5f                   	pop    edi
c000bb7f:	5d                   	pop    ebp
c000bb80:	c3                   	ret    
c000bb81:	89 f3                	mov    ebx,esi
c000bb83:	bd 01 00 00 00       	mov    ebp,0x1
c000bb88:	31 c9                	xor    ecx,ecx
c000bb8a:	09 ea                	or     edx,ebp
c000bb8c:	89 c8                	mov    eax,ecx
c000bb8e:	89 13                	mov    DWORD PTR [ebx],edx
c000bb90:	83 c4 0c             	add    esp,0xc
c000bb93:	5b                   	pop    ebx
c000bb94:	5e                   	pop    esi
c000bb95:	5f                   	pop    edi
c000bb96:	5d                   	pop    ebp
c000bb97:	c3                   	ret    

c000bb98 <Virt::virtualMemorySetup()>:
c000bb98:	53                   	push   ebx
c000bb99:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bb9e:	6a 0f                	push   0xf
c000bba0:	53                   	push   ebx
c000bba1:	43                   	inc    ebx
c000bba2:	e8 d9 fd ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bba7:	58                   	pop    eax
c000bba8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bbae:	5a                   	pop    edx
c000bbaf:	75 ed                	jne    c000bb9e <Virt::virtualMemorySetup()+0x6>
c000bbb1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bbb6:	6a 00                	push   0x0
c000bbb8:	53                   	push   ebx
c000bbb9:	43                   	inc    ebx
c000bbba:	e8 c1 fd ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bbbf:	59                   	pop    ecx
c000bbc0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bbc6:	58                   	pop    eax
c000bbc7:	75 ed                	jne    c000bbb6 <Virt::virtualMemorySetup()+0x1e>
c000bbc9:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000bbce:	6a 0f                	push   0xf
c000bbd0:	53                   	push   ebx
c000bbd1:	43                   	inc    ebx
c000bbd2:	e8 a9 fd ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bbd7:	58                   	pop    eax
c000bbd8:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000bbde:	5a                   	pop    edx
c000bbdf:	75 ed                	jne    c000bbce <Virt::virtualMemorySetup()+0x36>
c000bbe1:	5b                   	pop    ebx
c000bbe2:	c3                   	ret    

c000bbe3 <Virt::setupPageSwapping(int)>:
c000bbe3:	53                   	push   ebx
c000bbe4:	83 ec 0c             	sub    esp,0xc
c000bbe7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bbeb:	a1 08 86 02 c0       	mov    eax,ds:0xc0028608
c000bbf0:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000bbf6:	8b 10                	mov    edx,DWORD PTR [eax]
c000bbf8:	53                   	push   ebx
c000bbf9:	c1 e3 0b             	shl    ebx,0xb
c000bbfc:	68 53 46 02 c0       	push   0xc0024653
c000bc01:	50                   	push   eax
c000bc02:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000bc05:	89 1d 90 74 02 c0    	mov    DWORD PTR ds:0xc0027490,ebx
c000bc0b:	c6 05 98 74 02 c0 43 	mov    BYTE PTR ds:0xc0027498,0x43
c000bc12:	c1 eb 08             	shr    ebx,0x8
c000bc15:	a3 94 74 02 c0       	mov    ds:0xc0027494,eax
c000bc1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bc1d:	c7 05 8c 74 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002748c,0x8
c000bc27:	e8 e3 dd ff ff       	call   c0009a0f <malloc>
c000bc2c:	83 c4 0c             	add    esp,0xc
c000bc2f:	89 c1                	mov    ecx,eax
c000bc31:	a3 6c 81 02 c0       	mov    ds:0xc002816c,eax
c000bc36:	31 d2                	xor    edx,edx
c000bc38:	a1 90 74 02 c0       	mov    eax,ds:0xc0027490
c000bc3d:	f7 35 8c 74 02 c0    	div    DWORD PTR ds:0xc002748c
c000bc43:	c1 e8 05             	shr    eax,0x5
c000bc46:	50                   	push   eax
c000bc47:	6a 00                	push   0x0
c000bc49:	51                   	push   ecx
c000bc4a:	e8 35 4a ff ff       	call   c0000684 <memset>
c000bc4f:	83 c4 18             	add    esp,0x18
c000bc52:	5b                   	pop    ebx
c000bc53:	c3                   	ret    

c000bc54 <VAS::VAS()>:
c000bc54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc58:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc63:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bc6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc6e:	a3 70 81 02 c0       	mov    ds:0xc0028170,eax
c000bc73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc77:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000bc7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc7f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000bc82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc86:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000bc8d:	90                   	nop
c000bc8e:	c3                   	ret    
c000bc8f:	90                   	nop

c000bc90 <VAS::VAS(VAS*)>:
c000bc90:	83 ec 0c             	sub    esp,0xc
c000bc93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc97:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bca2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bca9:	83 ec 0c             	sub    esp,0xc
c000bcac:	68 a4 44 02 c0       	push   0xc00244a4
c000bcb1:	e8 05 8d 00 00       	call   c00149bb <Krnl::panic(char const*)>
c000bcb6:	83 c4 10             	add    esp,0x10
c000bcb9:	90                   	nop
c000bcba:	83 c4 0c             	add    esp,0xc
c000bcbd:	c3                   	ret    

c000bcbe <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000bcbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bcc2:	89 c2                	mov    edx,eax
c000bcc4:	c1 e8 0a             	shr    eax,0xa
c000bcc7:	c1 ea 16             	shr    edx,0x16
c000bcca:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bccf:	19 c9                	sbb    ecx,ecx
c000bcd1:	c1 e2 0c             	shl    edx,0xc
c000bcd4:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000bcda:	25 fc 0f 00 00       	and    eax,0xffc
c000bcdf:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000bce6:	01 d0                	add    eax,edx
c000bce8:	c3                   	ret    
c000bce9:	90                   	nop

c000bcea <VAS::getPageTableEntry(unsigned long)>:
c000bcea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bcee:	89 ca                	mov    edx,ecx
c000bcf0:	c1 e9 0a             	shr    ecx,0xa
c000bcf3:	c1 ea 16             	shr    edx,0x16
c000bcf6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000bcfc:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000bd02:	c1 e0 0c             	shl    eax,0xc
c000bd05:	8d 04 08             	lea    eax,[eax+ecx*1]
c000bd08:	c3                   	ret    

c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>:
c000bd09:	57                   	push   edi
c000bd0a:	56                   	push   esi
c000bd0b:	be 01 00 00 00       	mov    esi,0x1
c000bd10:	53                   	push   ebx
c000bd11:	83 ec 10             	sub    esp,0x10
c000bd14:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bd18:	c1 eb 0c             	shr    ebx,0xc
c000bd1b:	eb 3f                	jmp    c000bd5c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000bd1d:	83 ec 08             	sub    esp,0x8
c000bd20:	57                   	push   edi
c000bd21:	ff 35 70 81 02 c0    	push   DWORD PTR ds:0xc0028170
c000bd27:	e8 be ff ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000bd2c:	83 c4 10             	add    esp,0x10
c000bd2f:	8b 00                	mov    eax,DWORD PTR [eax]
c000bd31:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bd35:	f6 c4 04             	test   ah,0x4
c000bd38:	75 5f                	jne    c000bd99 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000bd3a:	80 fa 04             	cmp    dl,0x4
c000bd3d:	74 78                	je     c000bdb7 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000bd3f:	80 fa 02             	cmp    dl,0x2
c000bd42:	0f 84 88 00 00 00    	je     c000bdd0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000bd48:	80 fa 03             	cmp    dl,0x3
c000bd4b:	0f 84 ad 00 00 00    	je     c000bdfe <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000bd51:	fe ca                	dec    dl
c000bd53:	0f 84 92 00 00 00    	je     c000bdeb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bd59:	43                   	inc    ebx
c000bd5a:	31 f6                	xor    esi,esi
c000bd5c:	53                   	push   ebx
c000bd5d:	89 df                	mov    edi,ebx
c000bd5f:	e8 51 fc ff ff       	call   c000b9b5 <Virt::getPageState(unsigned long)>
c000bd64:	c1 e7 0c             	shl    edi,0xc
c000bd67:	59                   	pop    ecx
c000bd68:	84 c0                	test   al,al
c000bd6a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000bd6e:	75 ad                	jne    c000bd1d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000bd70:	83 ec 0c             	sub    esp,0xc
c000bd73:	68 6a 46 02 c0       	push   0xc002466a
c000bd78:	e8 3e 8c 00 00       	call   c00149bb <Krnl::panic(char const*)>
c000bd7d:	58                   	pop    eax
c000bd7e:	5a                   	pop    edx
c000bd7f:	57                   	push   edi
c000bd80:	ff 35 70 81 02 c0    	push   DWORD PTR ds:0xc0028170
c000bd86:	e8 5f ff ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000bd8b:	83 c4 10             	add    esp,0x10
c000bd8e:	8b 00                	mov    eax,DWORD PTR [eax]
c000bd90:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bd94:	f6 c4 04             	test   ah,0x4
c000bd97:	74 c0                	je     c000bd59 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bd99:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000bd9d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bda2:	83 ec 0c             	sub    esp,0xc
c000bda5:	50                   	push   eax
c000bda6:	e8 98 e2 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000bdab:	83 c4 10             	add    esp,0x10
c000bdae:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bdb2:	80 fa 04             	cmp    dl,0x4
c000bdb5:	75 88                	jne    c000bd3f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000bdb7:	89 f0                	mov    eax,esi
c000bdb9:	84 c0                	test   al,al
c000bdbb:	75 47                	jne    c000be04 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000bdbd:	c7 44 24 20 c8 44 02 c0 	mov    DWORD PTR [esp+0x20],0xc00244c8
c000bdc5:	83 c4 10             	add    esp,0x10
c000bdc8:	5b                   	pop    ebx
c000bdc9:	5e                   	pop    esi
c000bdca:	5f                   	pop    edi
c000bdcb:	e9 eb 8b 00 00       	jmp    c00149bb <Krnl::panic(char const*)>
c000bdd0:	89 f0                	mov    eax,esi
c000bdd2:	84 c0                	test   al,al
c000bdd4:	75 15                	jne    c000bdeb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bdd6:	83 ec 0c             	sub    esp,0xc
c000bdd9:	68 86 46 02 c0       	push   0xc0024686
c000bdde:	e8 d8 8b 00 00       	call   c00149bb <Krnl::panic(char const*)>
c000bde3:	83 c4 10             	add    esp,0x10
c000bde6:	e9 6e ff ff ff       	jmp    c000bd59 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bdeb:	83 ec 08             	sub    esp,0x8
c000bdee:	6a 00                	push   0x0
c000bdf0:	53                   	push   ebx
c000bdf1:	e8 8a fb ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bdf6:	83 c4 10             	add    esp,0x10
c000bdf9:	e9 5b ff ff ff       	jmp    c000bd59 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bdfe:	89 f0                	mov    eax,esi
c000be00:	84 c0                	test   al,al
c000be02:	75 15                	jne    c000be19 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000be04:	83 ec 08             	sub    esp,0x8
c000be07:	6a 00                	push   0x0
c000be09:	53                   	push   ebx
c000be0a:	e8 71 fb ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be0f:	83 c4 10             	add    esp,0x10
c000be12:	83 c4 10             	add    esp,0x10
c000be15:	5b                   	pop    ebx
c000be16:	5e                   	pop    esi
c000be17:	5f                   	pop    edi
c000be18:	c3                   	ret    
c000be19:	c7 44 24 20 a2 46 02 c0 	mov    DWORD PTR [esp+0x20],0xc00246a2
c000be21:	83 c4 10             	add    esp,0x10
c000be24:	5b                   	pop    ebx
c000be25:	5e                   	pop    esi
c000be26:	5f                   	pop    edi
c000be27:	e9 8f 8b 00 00       	jmp    c00149bb <Krnl::panic(char const*)>

c000be2c <VAS::freeAllocatedPages(unsigned long)>:
c000be2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000be34:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000be38:	74 09                	je     c000be43 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000be3a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000be3e:	e9 c6 fe ff ff       	jmp    c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c000be43:	c7 44 24 04 ec 44 02 c0 	mov    DWORD PTR [esp+0x4],0xc00244ec
c000be4b:	e9 af 0e 00 00       	jmp    c000ccff <Dbg::kprintf(char const*, ...)>

c000be50 <VAS::virtualToPhysical(unsigned long)>:
c000be50:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000be54:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000be58:	e8 8d fe ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000be5d:	5a                   	pop    edx
c000be5e:	8b 00                	mov    eax,DWORD PTR [eax]
c000be60:	59                   	pop    ecx
c000be61:	25 00 f0 ff ff       	and    eax,0xfffff000
c000be66:	c3                   	ret    
c000be67:	90                   	nop

c000be68 <VAS::reflagRange(unsigned long, int, int, int)>:
c000be68:	55                   	push   ebp
c000be69:	57                   	push   edi
c000be6a:	56                   	push   esi
c000be6b:	53                   	push   ebx
c000be6c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be70:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000be74:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000be78:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000be7c:	85 db                	test   ebx,ebx
c000be7e:	7e 22                	jle    c000bea2 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000be80:	c1 e3 0c             	shl    ebx,0xc
c000be83:	01 f3                	add    ebx,esi
c000be85:	56                   	push   esi
c000be86:	81 c6 00 10 00 00    	add    esi,0x1000
c000be8c:	55                   	push   ebp
c000be8d:	e8 58 fe ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000be92:	5a                   	pop    edx
c000be93:	59                   	pop    ecx
c000be94:	8b 08                	mov    ecx,DWORD PTR [eax]
c000be96:	21 f9                	and    ecx,edi
c000be98:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000be9c:	39 f3                	cmp    ebx,esi
c000be9e:	89 08                	mov    DWORD PTR [eax],ecx
c000bea0:	75 e3                	jne    c000be85 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000bea2:	5b                   	pop    ebx
c000bea3:	5e                   	pop    esi
c000bea4:	5f                   	pop    edi
c000bea5:	5d                   	pop    ebp
c000bea6:	c3                   	ret    
c000bea7:	90                   	nop

c000bea8 <VAS::setToWriteCombining(unsigned long, int)>:
c000bea8:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c000bead:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000beb3:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000beba:	75 01                	jne    c000bebd <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000bebc:	c3                   	ret    
c000bebd:	68 80 00 00 00       	push   0x80
c000bec2:	6a ff                	push   0xffffffff
c000bec4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000becc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed0:	e8 93 ff ff ff       	call   c000be68 <VAS::reflagRange(unsigned long, int, int, int)>
c000bed5:	83 c4 14             	add    esp,0x14
c000bed8:	c3                   	ret    
c000bed9:	90                   	nop

c000beda <VAS::mapOtherVASIn(bool, VAS*)>:
c000beda:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bedf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bee3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000bee6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000beea:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000beed:	19 c0                	sbb    eax,eax
c000beef:	83 ca 03             	or     edx,0x3
c000bef2:	83 e0 fc             	and    eax,0xfffffffc
c000bef5:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000befc:	0f 20 d8             	mov    eax,cr3
c000beff:	0f 22 d8             	mov    cr3,eax
c000bf02:	c3                   	ret    
c000bf03:	90                   	nop

c000bf04 <VAS::~VAS()>:
c000bf04:	83 ec 2c             	sub    esp,0x2c
c000bf07:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bf0f:	fa                   	cli    
c000bf10:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000bf15:	40                   	inc    eax
c000bf16:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c000bf1b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bf20:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf22:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bf25:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bf2b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bf2f:	6a 01                	push   0x1
c000bf31:	50                   	push   eax
c000bf32:	e8 a3 ff ff ff       	call   c000beda <VAS::mapOtherVASIn(bool, VAS*)>
c000bf37:	83 c4 0c             	add    esp,0xc
c000bf3a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bf42:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000bf4a:	0f 8f d4 00 00 00    	jg     c000c024 <VAS::~VAS()+0x120>
c000bf50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf54:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf57:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bf5b:	c1 e2 02             	shl    edx,0x2
c000bf5e:	01 d0                	add    eax,edx
c000bf60:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf6a:	83 e0 01             	and    eax,0x1
c000bf6d:	0f 84 a8 00 00 00    	je     c000c01b <VAS::~VAS()+0x117>
c000bf73:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bf7b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000bf83:	7f 72                	jg     c000bff7 <VAS::~VAS()+0xf3>
c000bf85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf89:	c1 e0 0a             	shl    eax,0xa
c000bf8c:	89 c2                	mov    edx,eax
c000bf8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf92:	01 d0                	add    eax,edx
c000bf94:	c1 e0 0c             	shl    eax,0xc
c000bf97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bf9b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bfa0:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfa2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bfa5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bfab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfaf:	6a 01                	push   0x1
c000bfb1:	50                   	push   eax
c000bfb2:	e8 07 fd ff ff       	call   c000bcbe <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000bfb7:	83 c4 0c             	add    esp,0xc
c000bfba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bfc2:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfc4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bfc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfcc:	25 01 04 00 00       	and    eax,0x401
c000bfd1:	3d 01 04 00 00       	cmp    eax,0x401
c000bfd6:	75 19                	jne    c000bff1 <VAS::~VAS()+0xed>
c000bfd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfdc:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bfe1:	83 ec 0c             	sub    esp,0xc
c000bfe4:	50                   	push   eax
c000bfe5:	e8 59 e0 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000bfea:	83 c4 10             	add    esp,0x10
c000bfed:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bff1:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bff5:	eb 84                	jmp    c000bf7b <VAS::~VAS()+0x77>
c000bff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bffb:	25 00 04 00 00       	and    eax,0x400
c000c000:	74 19                	je     c000c01b <VAS::~VAS()+0x117>
c000c002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c006:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c00b:	83 ec 0c             	sub    esp,0xc
c000c00e:	50                   	push   eax
c000c00f:	e8 2f e0 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000c014:	83 c4 10             	add    esp,0x10
c000c017:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c01b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c01f:	e9 1e ff ff ff       	jmp    c000bf42 <VAS::~VAS()+0x3e>
c000c024:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c028:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c02b:	83 ec 0c             	sub    esp,0xc
c000c02e:	50                   	push   eax
c000c02f:	e8 d5 fc ff ff       	call   c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c000c034:	83 c4 10             	add    esp,0x10
c000c037:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c03b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 fc df ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c04e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c052:	c1 e0 02             	shl    eax,0x2
c000c055:	83 ec 08             	sub    esp,0x8
c000c058:	50                   	push   eax
c000c059:	68 10 45 02 c0       	push   0xc0024510
c000c05e:	e8 9c 0c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000c06b:	48                   	dec    eax
c000c06c:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c000c071:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000c076:	85 c0                	test   eax,eax
c000c078:	75 01                	jne    c000c07b <VAS::~VAS()+0x177>
c000c07a:	fb                   	sti    
c000c07b:	90                   	nop
c000c07c:	83 c4 2c             	add    esp,0x2c
c000c07f:	c3                   	ret    

c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c080:	55                   	push   ebp
c000c081:	57                   	push   edi
c000c082:	56                   	push   esi
c000c083:	53                   	push   ebx
c000c084:	83 ec 1c             	sub    esp,0x1c
c000c087:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c08b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c08f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c095:	77 08                	ja     c000c09f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000c097:	0f 20 d8             	mov    eax,cr3
c000c09a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c09d:	75 47                	jne    c000c0e6 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000c09f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c0a3:	09 d8                	or     eax,ebx
c000c0a5:	a9 ff 0f 00 00       	test   eax,0xfff
c000c0aa:	75 57                	jne    c000c103 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000c0ac:	89 de                	mov    esi,ebx
c000c0ae:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c0b1:	c1 ee 16             	shr    esi,0x16
c000c0b4:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c0bb:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c0bf:	74 54                	je     c000c115 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000c0c1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0c5:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c0cb:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c0cf:	c1 e6 0c             	shl    esi,0xc
c000c0d2:	c1 eb 0a             	shr    ebx,0xa
c000c0d5:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c0db:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c0de:	83 c4 1c             	add    esp,0x1c
c000c0e1:	5b                   	pop    ebx
c000c0e2:	5e                   	pop    esi
c000c0e3:	5f                   	pop    edi
c000c0e4:	5d                   	pop    ebp
c000c0e5:	c3                   	ret    
c000c0e6:	83 ec 0c             	sub    esp,0xc
c000c0e9:	68 30 45 02 c0       	push   0xc0024530
c000c0ee:	e8 0c 0c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000c0f3:	83 c4 10             	add    esp,0x10
c000c0f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c0fa:	09 d8                	or     eax,ebx
c000c0fc:	a9 ff 0f 00 00       	test   eax,0xfff
c000c101:	74 a9                	je     c000c0ac <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c103:	83 ec 0c             	sub    esp,0xc
c000c106:	68 98 45 02 c0       	push   0xc0024598
c000c10b:	e8 ab 88 00 00       	call   c00149bb <Krnl::panic(char const*)>
c000c110:	83 c4 10             	add    esp,0x10
c000c113:	eb 97                	jmp    c000c0ac <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c115:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c119:	e8 a8 df ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c11e:	83 ec 0c             	sub    esp,0xc
c000c121:	89 c5                	mov    ebp,eax
c000c123:	8b 0d 70 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028170
c000c129:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c12d:	6a 01                	push   0x1
c000c12f:	e8 a5 f8 ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c000c134:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c13b:	6a 01                	push   0x1
c000c13d:	50                   	push   eax
c000c13e:	55                   	push   ebp
c000c13f:	81 cd 07 04 00 00    	or     ebp,0x407
c000c145:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c149:	51                   	push   ecx
c000c14a:	e8 27 02 00 00       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c14f:	83 c4 1c             	add    esp,0x1c
c000c152:	68 00 10 00 00       	push   0x1000
c000c157:	6a 00                	push   0x0
c000c159:	50                   	push   eax
c000c15a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c15e:	e8 21 45 ff ff       	call   c0000684 <memset>
c000c163:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c167:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c16a:	e8 9a fb ff ff       	call   c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c000c16f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c173:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c176:	83 c4 10             	add    esp,0x10
c000c179:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c17c:	e9 40 ff ff ff       	jmp    c000c0c1 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000c181:	90                   	nop

c000c182 <VAS::allocatePages(int, int)>:
c000c182:	55                   	push   ebp
c000c183:	57                   	push   edi
c000c184:	56                   	push   esi
c000c185:	53                   	push   ebx
c000c186:	83 ec 1c             	sub    esp,0x1c
c000c189:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c18d:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c000c192:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c198:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c19e:	83 e0 01             	and    eax,0x1
c000c1a1:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c1a5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c1a9:	0f 85 cc 00 00 00    	jne    c000c27b <VAS::allocatePages(int, int)+0xf9>
c000c1af:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c1b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c1b6:	85 c0                	test   eax,eax
c000c1b8:	0f 84 a1 00 00 00    	je     c000c25f <VAS::allocatePages(int, int)+0xdd>
c000c1be:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c1c2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c1c6:	c1 e6 0c             	shl    esi,0xc
c000c1c9:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c1cd:	85 c0                	test   eax,eax
c000c1cf:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c1d2:	7e 33                	jle    c000c207 <VAS::allocatePages(int, int)+0x85>
c000c1d4:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c1d8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1dc:	81 cd 00 04 00 00    	or     ebp,0x400
c000c1e2:	e8 df de ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c1e7:	55                   	push   ebp
c000c1e8:	53                   	push   ebx
c000c1e9:	50                   	push   eax
c000c1ea:	57                   	push   edi
c000c1eb:	e8 90 fe ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c1f0:	83 c4 10             	add    esp,0x10
c000c1f3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c1f8:	74 03                	je     c000c1fd <VAS::allocatePages(int, int)+0x7b>
c000c1fa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c1fd:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c203:	39 de                	cmp    esi,ebx
c000c205:	75 db                	jne    c000c1e2 <VAS::allocatePages(int, int)+0x60>
c000c207:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c20c:	75 12                	jne    c000c220 <VAS::allocatePages(int, int)+0x9e>
c000c20e:	0f 20 d8             	mov    eax,cr3
c000c211:	0f 22 d8             	mov    cr3,eax
c000c214:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c218:	83 c4 1c             	add    esp,0x1c
c000c21b:	5b                   	pop    ebx
c000c21c:	5e                   	pop    esi
c000c21d:	5f                   	pop    edi
c000c21e:	5d                   	pop    ebp
c000c21f:	c3                   	ret    
c000c220:	c1 ee 0a             	shr    esi,0xa
c000c223:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c227:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c22d:	c1 eb 0a             	shr    ebx,0xa
c000c230:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c236:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c23c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c242:	39 c3                	cmp    ebx,eax
c000c244:	77 ce                	ja     c000c214 <VAS::allocatePages(int, int)+0x92>
c000c246:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c249:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c24f:	39 d8                	cmp    eax,ebx
c000c251:	73 f3                	jae    c000c246 <VAS::allocatePages(int, int)+0xc4>
c000c253:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c257:	83 c4 1c             	add    esp,0x1c
c000c25a:	5b                   	pop    ebx
c000c25b:	5e                   	pop    esi
c000c25c:	5f                   	pop    edi
c000c25d:	5d                   	pop    ebp
c000c25e:	c3                   	ret    
c000c25f:	83 ec 0c             	sub    esp,0xc
c000c262:	68 bc 45 02 c0       	push   0xc00245bc
c000c267:	e8 4f 87 00 00       	call   c00149bb <Krnl::panic(char const*)>
c000c26c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c26f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c273:	83 c4 10             	add    esp,0x10
c000c276:	e9 43 ff ff ff       	jmp    c000c1be <VAS::allocatePages(int, int)+0x3c>
c000c27b:	83 ec 0c             	sub    esp,0xc
c000c27e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c282:	e8 52 f7 ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c000c287:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c28b:	83 c4 10             	add    esp,0x10
c000c28e:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c293:	0f 87 9b 00 00 00    	ja     c000c334 <VAS::allocatePages(int, int)+0x1b2>
c000c299:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c29d:	85 d2                	test   edx,edx
c000c29f:	7e 3c                	jle    c000c2dd <VAS::allocatePages(int, int)+0x15b>
c000c2a1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c2a5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c2a9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c2ad:	c1 e5 0c             	shl    ebp,0xc
c000c2b0:	81 ce 00 04 00 00    	or     esi,0x400
c000c2b6:	01 dd                	add    ebp,ebx
c000c2b8:	e8 09 de ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c2bd:	56                   	push   esi
c000c2be:	53                   	push   ebx
c000c2bf:	50                   	push   eax
c000c2c0:	57                   	push   edi
c000c2c1:	e8 ba fd ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c2c6:	83 c4 10             	add    esp,0x10
c000c2c9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c2ce:	74 03                	je     c000c2d3 <VAS::allocatePages(int, int)+0x151>
c000c2d0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c2d3:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c2d9:	39 dd                	cmp    ebp,ebx
c000c2db:	75 db                	jne    c000c2b8 <VAS::allocatePages(int, int)+0x136>
c000c2dd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c2e2:	0f 84 26 ff ff ff    	je     c000c20e <VAS::allocatePages(int, int)+0x8c>
c000c2e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c2ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c2f0:	89 d3                	mov    ebx,edx
c000c2f2:	c1 e0 0c             	shl    eax,0xc
c000c2f5:	c1 eb 0a             	shr    ebx,0xa
c000c2f8:	01 d0                	add    eax,edx
c000c2fa:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c300:	c1 e8 0a             	shr    eax,0xa
c000c303:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c309:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c30e:	2d 00 00 40 00       	sub    eax,0x400000
c000c313:	39 c3                	cmp    ebx,eax
c000c315:	0f 87 f9 fe ff ff    	ja     c000c214 <VAS::allocatePages(int, int)+0x92>
c000c31b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c31e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c324:	39 d8                	cmp    eax,ebx
c000c326:	73 f3                	jae    c000c31b <VAS::allocatePages(int, int)+0x199>
c000c328:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c32c:	83 c4 1c             	add    esp,0x1c
c000c32f:	5b                   	pop    ebx
c000c330:	5e                   	pop    esi
c000c331:	5f                   	pop    edi
c000c332:	5d                   	pop    ebp
c000c333:	c3                   	ret    
c000c334:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c000c339:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c33f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c346:	0f 84 4d ff ff ff    	je     c000c299 <VAS::allocatePages(int, int)+0x117>
c000c34c:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c354:	e9 40 ff ff ff       	jmp    c000c299 <VAS::allocatePages(int, int)+0x117>
c000c359:	90                   	nop

c000c35a <VAS::setCPUSpecific(unsigned long)>:
c000c35a:	83 ec 0c             	sub    esp,0xc
c000c35d:	6a 05                	push   0x5
c000c35f:	68 00 00 40 c2       	push   0xc2400000
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	e8 0f fd ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c371:	83 c4 1c             	add    esp,0x1c
c000c374:	c3                   	ret    
c000c375:	90                   	nop

c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c376:	55                   	push   ebp
c000c377:	57                   	push   edi
c000c378:	56                   	push   esi
c000c379:	53                   	push   ebx
c000c37a:	83 ec 1c             	sub    esp,0x1c
c000c37d:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c000c382:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c386:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c38c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c390:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c396:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c39a:	83 e0 01             	and    eax,0x1
c000c39d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c3a1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3a5:	85 c0                	test   eax,eax
c000c3a7:	7e 39                	jle    c000c3e2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c3a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3ad:	89 f3                	mov    ebx,esi
c000c3af:	c1 e0 0c             	shl    eax,0xc
c000c3b2:	01 f0                	add    eax,esi
c000c3b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c3b8:	55                   	push   ebp
c000c3b9:	53                   	push   ebx
c000c3ba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3be:	29 f0                	sub    eax,esi
c000c3c0:	01 d8                	add    eax,ebx
c000c3c2:	50                   	push   eax
c000c3c3:	57                   	push   edi
c000c3c4:	e8 b7 fc ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c3c9:	83 c4 10             	add    esp,0x10
c000c3cc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c3d1:	74 03                	je     c000c3d6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c3d3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c3d6:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c3dc:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c3e0:	75 d6                	jne    c000c3b8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c3e2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c3e7:	75 10                	jne    c000c3f9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c3e9:	0f 20 d8             	mov    eax,cr3
c000c3ec:	0f 22 d8             	mov    cr3,eax
c000c3ef:	83 c4 1c             	add    esp,0x1c
c000c3f2:	89 f0                	mov    eax,esi
c000c3f4:	5b                   	pop    ebx
c000c3f5:	5e                   	pop    esi
c000c3f6:	5f                   	pop    edi
c000c3f7:	5d                   	pop    ebp
c000c3f8:	c3                   	ret    
c000c3f9:	89 f3                	mov    ebx,esi
c000c3fb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3ff:	c1 eb 0a             	shr    ebx,0xa
c000c402:	c1 e0 0c             	shl    eax,0xc
c000c405:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c40b:	01 f0                	add    eax,esi
c000c40d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c413:	c1 e8 0a             	shr    eax,0xa
c000c416:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c41b:	2d 00 00 40 00       	sub    eax,0x400000
c000c420:	39 c3                	cmp    ebx,eax
c000c422:	77 cb                	ja     c000c3ef <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c424:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c427:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c42d:	39 d8                	cmp    eax,ebx
c000c42f:	73 f3                	jae    c000c424 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c431:	83 c4 1c             	add    esp,0x1c
c000c434:	89 f0                	mov    eax,esi
c000c436:	5b                   	pop    ebx
c000c437:	5e                   	pop    esi
c000c438:	5f                   	pop    edi
c000c439:	5d                   	pop    ebp
c000c43a:	c3                   	ret    
c000c43b:	90                   	nop

c000c43c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c43c:	55                   	push   ebp
c000c43d:	57                   	push   edi
c000c43e:	56                   	push   esi
c000c43f:	53                   	push   ebx
c000c440:	83 ec 1c             	sub    esp,0x1c
c000c443:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c447:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c44b:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c44f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c453:	a9 ff 0f 00 00       	test   eax,0xfff
c000c458:	75 4a                	jne    c000c4a4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c45a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c45e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c461:	c1 eb 16             	shr    ebx,0x16
c000c464:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c46b:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c46f:	74 4d                	je     c000c4be <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c471:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c475:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c479:	c1 e8 0a             	shr    eax,0xa
c000c47c:	80 fa 01             	cmp    dl,0x1
c000c47f:	19 d2                	sbb    edx,edx
c000c481:	c1 e3 0c             	shl    ebx,0xc
c000c484:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c488:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c48e:	25 fc 0f 00 00       	and    eax,0xffc
c000c493:	01 d8                	add    eax,ebx
c000c495:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c49c:	83 c4 1c             	add    esp,0x1c
c000c49f:	5b                   	pop    ebx
c000c4a0:	5e                   	pop    esi
c000c4a1:	5f                   	pop    edi
c000c4a2:	5d                   	pop    ebp
c000c4a3:	c3                   	ret    
c000c4a4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c4a8:	83 ec 0c             	sub    esp,0xc
c000c4ab:	68 e8 45 02 c0       	push   0xc00245e8
c000c4b0:	e8 06 85 00 00       	call   c00149bb <Krnl::panic(char const*)>
c000c4b5:	83 c4 10             	add    esp,0x10
c000c4b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c4bc:	eb 9c                	jmp    c000c45a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c4be:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c4c2:	e8 ff db ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c4c7:	83 ec 0c             	sub    esp,0xc
c000c4ca:	89 c5                	mov    ebp,eax
c000c4cc:	8b 0d 70 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028170
c000c4d2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c4d6:	6a 01                	push   0x1
c000c4d8:	e8 fc f4 ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c000c4dd:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c4e4:	6a 01                	push   0x1
c000c4e6:	50                   	push   eax
c000c4e7:	55                   	push   ebp
c000c4e8:	81 cd 07 04 00 00    	or     ebp,0x407
c000c4ee:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c4f2:	51                   	push   ecx
c000c4f3:	e8 7e fe ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c4f8:	83 c4 1c             	add    esp,0x1c
c000c4fb:	68 00 10 00 00       	push   0x1000
c000c500:	6a 00                	push   0x0
c000c502:	50                   	push   eax
c000c503:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c507:	e8 78 41 ff ff       	call   c0000684 <memset>
c000c50c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c510:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c513:	e8 f1 f7 ff ff       	call   c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c000c518:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c51b:	83 c4 10             	add    esp,0x10
c000c51e:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c521:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c525:	e9 47 ff ff ff       	jmp    c000c471 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c52a <VAS::VAS(bool)>:
c000c52a:	53                   	push   ebx
c000c52b:	83 ec 28             	sub    esp,0x28
c000c52e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c532:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c536:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c53a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c541:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c545:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c54c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c550:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c554:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c557:	e8 6a db ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c55c:	89 c2                	mov    edx,eax
c000c55e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c562:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c565:	8b 1d 70 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028170
c000c56b:	83 ec 0c             	sub    esp,0xc
c000c56e:	6a 01                	push   0x1
c000c570:	e8 64 f4 ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 c2                	mov    edx,eax
c000c57a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c57e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c581:	83 ec 0c             	sub    esp,0xc
c000c584:	6a 03                	push   0x3
c000c586:	6a 01                	push   0x1
c000c588:	52                   	push   edx
c000c589:	50                   	push   eax
c000c58a:	53                   	push   ebx
c000c58b:	e8 e6 fd ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c590:	83 c4 20             	add    esp,0x20
c000c593:	89 c2                	mov    edx,eax
c000c595:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c599:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c59c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c5a4:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c5ac:	7f 1c                	jg     c000c5ca <VAS::VAS(bool)+0xa0>
c000c5ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c5b2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c5b5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c5b9:	c1 e2 02             	shl    edx,0x2
c000c5bc:	01 d0                	add    eax,edx
c000c5be:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c5c4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c5c8:	eb da                	jmp    c000c5a4 <VAS::VAS(bool)+0x7a>
c000c5ca:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c5d2:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c5da:	7f 7a                	jg     c000c656 <VAS::VAS(bool)+0x12c>
c000c5dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c5e0:	2d 00 02 00 00       	sub    eax,0x200
c000c5e5:	c1 e0 0c             	shl    eax,0xc
c000c5e8:	83 c8 03             	or     eax,0x3
c000c5eb:	89 c2                	mov    edx,eax
c000c5ed:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c000c5f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c5f8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c5fe:	83 e0 10             	and    eax,0x10
c000c601:	84 c0                	test   al,al
c000c603:	74 07                	je     c000c60c <VAS::VAS(bool)+0xe2>
c000c605:	b8 00 01 00 00       	mov    eax,0x100
c000c60a:	eb 05                	jmp    c000c611 <VAS::VAS(bool)+0xe7>
c000c60c:	b8 00 00 00 00       	mov    eax,0x0
c000c611:	09 d0                	or     eax,edx
c000c613:	89 c1                	mov    ecx,eax
c000c615:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c619:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c61c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c620:	c1 e2 02             	shl    edx,0x2
c000c623:	01 d0                	add    eax,edx
c000c625:	89 ca                	mov    edx,ecx
c000c627:	89 10                	mov    DWORD PTR [eax],edx
c000c629:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c62d:	2d 40 03 00 00       	sub    eax,0x340
c000c632:	83 f8 7f             	cmp    eax,0x7f
c000c635:	77 16                	ja     c000c64d <VAS::VAS(bool)+0x123>
c000c637:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c63b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c63e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c642:	c1 e2 02             	shl    edx,0x2
c000c645:	01 d0                	add    eax,edx
c000c647:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c64d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c651:	e9 7c ff ff ff       	jmp    c000c5d2 <VAS::VAS(bool)+0xa8>
c000c656:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c000c65b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c661:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c667:	83 e0 10             	and    eax,0x10
c000c66a:	84 c0                	test   al,al
c000c66c:	74 07                	je     c000c675 <VAS::VAS(bool)+0x14b>
c000c66e:	b8 03 41 00 00       	mov    eax,0x4103
c000c673:	eb 05                	jmp    c000c67a <VAS::VAS(bool)+0x150>
c000c675:	b8 03 40 00 00       	mov    eax,0x4003
c000c67a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c67e:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c681:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c687:	89 02                	mov    DWORD PTR [edx],eax
c000c689:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c000c68e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c694:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c69a:	83 ec 08             	sub    esp,0x8
c000c69d:	50                   	push   eax
c000c69e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6a2:	e8 b3 fc ff ff       	call   c000c35a <VAS::setCPUSpecific(unsigned long)>
c000c6a7:	83 c4 10             	add    esp,0x10
c000c6aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6ae:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c6b1:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c000c6b6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6bc:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c6c2:	83 e0 10             	and    eax,0x10
c000c6c5:	84 c0                	test   al,al
c000c6c7:	74 07                	je     c000c6d0 <VAS::VAS(bool)+0x1a6>
c000c6c9:	b8 00 01 00 00       	mov    eax,0x100
c000c6ce:	eb 05                	jmp    c000c6d5 <VAS::VAS(bool)+0x1ab>
c000c6d0:	b8 00 00 00 00       	mov    eax,0x0
c000c6d5:	09 c2                	or     edx,eax
c000c6d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6db:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c6de:	05 fc 0f 00 00       	add    eax,0xffc
c000c6e3:	83 ca 03             	or     edx,0x3
c000c6e6:	89 10                	mov    DWORD PTR [eax],edx
c000c6e8:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c000c6ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6f3:	83 ec 0c             	sub    esp,0xc
c000c6f6:	50                   	push   eax
c000c6f7:	e8 42 1e 00 00       	call   c000e53e <Device::getName()>
c000c6fc:	83 c4 10             	add    esp,0x10
c000c6ff:	83 ec 08             	sub    esp,0x8
c000c702:	68 bc 46 02 c0       	push   0xc00246bc
c000c707:	50                   	push   eax
c000c708:	e8 bf 40 ff ff       	call   c00007cc <strcmp>
c000c70d:	83 c4 10             	add    esp,0x10
c000c710:	85 c0                	test   eax,eax
c000c712:	0f 94 c0             	sete   al
c000c715:	84 c0                	test   al,al
c000c717:	0f 84 87 00 00 00    	je     c000c7a4 <VAS::VAS(bool)+0x27a>
c000c71d:	fa                   	cli    
c000c71e:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000c723:	40                   	inc    eax
c000c724:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c000c729:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c000c72e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c734:	05 7c 09 00 00       	add    eax,0x97c
c000c739:	83 ec 0c             	sub    esp,0xc
c000c73c:	50                   	push   eax
c000c73d:	e8 bc cd ff ff       	call   c00094fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c74a:	89 c3                	mov    ebx,eax
c000c74c:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c000c751:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c757:	05 7c 09 00 00       	add    eax,0x97c
c000c75c:	83 ec 0c             	sub    esp,0xc
c000c75f:	50                   	push   eax
c000c760:	e8 99 cd ff ff       	call   c00094fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c765:	83 c4 10             	add    esp,0x10
c000c768:	83 ec 08             	sub    esp,0x8
c000c76b:	50                   	push   eax
c000c76c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c770:	e8 75 f5 ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000c775:	83 c4 10             	add    esp,0x10
c000c778:	8b 00                	mov    eax,DWORD PTR [eax]
c000c77a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c77f:	6a 11                	push   0x11
c000c781:	53                   	push   ebx
c000c782:	50                   	push   eax
c000c783:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c787:	e8 f4 f8 ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c78c:	83 c4 10             	add    esp,0x10
c000c78f:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000c794:	48                   	dec    eax
c000c795:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c000c79a:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000c79f:	85 c0                	test   eax,eax
c000c7a1:	75 01                	jne    c000c7a4 <VAS::VAS(bool)+0x27a>
c000c7a3:	fb                   	sti    
c000c7a4:	90                   	nop
c000c7a5:	83 c4 28             	add    esp,0x28
c000c7a8:	5b                   	pop    ebx
c000c7a9:	c3                   	ret    

c000c7aa <VAS::evict(unsigned long)>:
c000c7aa:	55                   	push   ebp
c000c7ab:	57                   	push   edi
c000c7ac:	56                   	push   esi
c000c7ad:	53                   	push   ebx
c000c7ae:	83 ec 1c             	sub    esp,0x1c
c000c7b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7b5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c7b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7bd:	e8 58 f3 ff ff       	call   c000bb1a <Virt::allocateSwapfilePage()>
c000c7c2:	89 c7                	mov    edi,eax
c000c7c4:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c000c7c9:	85 c0                	test   eax,eax
c000c7cb:	7e 3d                	jle    c000c80a <VAS::evict(unsigned long)+0x60>
c000c7cd:	89 ee                	mov    esi,ebp
c000c7cf:	31 db                	xor    ebx,ebx
c000c7d1:	83 ec 0c             	sub    esp,0xc
c000c7d4:	57                   	push   edi
c000c7d5:	e8 2e f3 ff ff       	call   c000bb08 <Virt::swapIDToSector(unsigned long)>
c000c7da:	89 34 24             	mov    DWORD PTR [esp],esi
c000c7dd:	01 d8                	add    eax,ebx
c000c7df:	6a 01                	push   0x1
c000c7e1:	31 d2                	xor    edx,edx
c000c7e3:	43                   	inc    ebx
c000c7e4:	52                   	push   edx
c000c7e5:	81 c6 00 02 00 00    	add    esi,0x200
c000c7eb:	50                   	push   eax
c000c7ec:	0f be 05 98 74 02 c0 	movsx  eax,BYTE PTR ds:0xc0027498
c000c7f3:	ff 34 85 fc 84 02 c0 	push   DWORD PTR [eax*4-0x3ffd7b04]
c000c7fa:	e8 b7 3d 00 00       	call   c00105b6 <LogicalDisk::write(unsigned long long, int, void*)>
c000c7ff:	83 c4 20             	add    esp,0x20
c000c802:	39 1d 8c 74 02 c0    	cmp    DWORD PTR ds:0xc002748c,ebx
c000c808:	7f c7                	jg     c000c7d1 <VAS::evict(unsigned long)+0x27>
c000c80a:	83 ec 08             	sub    esp,0x8
c000c80d:	c1 e7 0b             	shl    edi,0xb
c000c810:	55                   	push   ebp
c000c811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c815:	e8 d0 f4 ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000c81a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c81c:	89 d3                	mov    ebx,edx
c000c81e:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c824:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c82a:	09 d7                	or     edi,edx
c000c82c:	89 38                	mov    DWORD PTR [eax],edi
c000c82e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c831:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000c837:	e8 07 d8 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000c83c:	0f 20 d8             	mov    eax,cr3
c000c83f:	0f 22 d8             	mov    cr3,eax
c000c842:	ff 35 68 81 02 c0    	push   DWORD PTR ds:0xc0028168
c000c848:	55                   	push   ebp
c000c849:	53                   	push   ebx
c000c84a:	68 0c 46 02 c0       	push   0xc002460c
c000c84f:	e8 ab 04 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000c854:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c859:	c7 44 24 50 ca 46 02 c0 	mov    DWORD PTR [esp+0x50],0xc00246ca
c000c861:	8d 50 01             	lea    edx,[eax+0x1]
c000c864:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c868:	89 15 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,edx
c000c86e:	83 c4 3c             	add    esp,0x3c
c000c871:	5b                   	pop    ebx
c000c872:	5e                   	pop    esi
c000c873:	5f                   	pop    edi
c000c874:	5d                   	pop    ebp
c000c875:	e9 85 04 00 00       	jmp    c000ccff <Dbg::kprintf(char const*, ...)>

c000c87a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c87a:	55                   	push   ebp
c000c87b:	57                   	push   edi
c000c87c:	56                   	push   esi
c000c87d:	53                   	push   ebx
c000c87e:	83 ec 14             	sub    esp,0x14
c000c881:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c885:	68 db 46 02 c0       	push   0xc00246db
c000c88a:	e8 70 04 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000c88f:	83 c4 10             	add    esp,0x10
c000c892:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000c896:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000c89c:	74 20                	je     c000c8be <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c89e:	83 ec 08             	sub    esp,0x8
c000c8a1:	55                   	push   ebp
c000c8a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c8a6:	e8 3f f4 ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000c8ab:	83 c4 10             	add    esp,0x10
c000c8ae:	89 c3                	mov    ebx,eax
c000c8b0:	85 c0                	test   eax,eax
c000c8b2:	74 0a                	je     c000c8be <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c8b4:	8b 38                	mov    edi,DWORD PTR [eax]
c000c8b6:	f7 c7 01 00 00 00    	test   edi,0x1
c000c8bc:	74 0a                	je     c000c8c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000c8be:	31 c0                	xor    eax,eax
c000c8c0:	83 c4 0c             	add    esp,0xc
c000c8c3:	5b                   	pop    ebx
c000c8c4:	5e                   	pop    esi
c000c8c5:	5f                   	pop    edi
c000c8c6:	5d                   	pop    ebp
c000c8c7:	c3                   	ret    
c000c8c8:	e8 f9 d7 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c8cd:	c1 ef 0b             	shr    edi,0xb
c000c8d0:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c8d2:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c8d8:	09 c2                	or     edx,eax
c000c8da:	81 ca 01 08 00 00    	or     edx,0x801
c000c8e0:	89 13                	mov    DWORD PTR [ebx],edx
c000c8e2:	8b 0d 8c 74 02 c0    	mov    ecx,DWORD PTR ds:0xc002748c
c000c8e8:	85 c9                	test   ecx,ecx
c000c8ea:	7e 3d                	jle    c000c929 <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000c8ec:	89 ee                	mov    esi,ebp
c000c8ee:	31 db                	xor    ebx,ebx
c000c8f0:	83 ec 0c             	sub    esp,0xc
c000c8f3:	57                   	push   edi
c000c8f4:	e8 0f f2 ff ff       	call   c000bb08 <Virt::swapIDToSector(unsigned long)>
c000c8f9:	89 34 24             	mov    DWORD PTR [esp],esi
c000c8fc:	01 d8                	add    eax,ebx
c000c8fe:	6a 01                	push   0x1
c000c900:	31 d2                	xor    edx,edx
c000c902:	43                   	inc    ebx
c000c903:	52                   	push   edx
c000c904:	81 c6 00 02 00 00    	add    esi,0x200
c000c90a:	50                   	push   eax
c000c90b:	0f be 05 98 74 02 c0 	movsx  eax,BYTE PTR ds:0xc0027498
c000c912:	ff 34 85 fc 84 02 c0 	push   DWORD PTR [eax*4-0x3ffd7b04]
c000c919:	e8 2c 3c 00 00       	call   c001054a <LogicalDisk::read(unsigned long long, int, void*)>
c000c91e:	83 c4 20             	add    esp,0x20
c000c921:	39 1d 8c 74 02 c0    	cmp    DWORD PTR ds:0xc002748c,ebx
c000c927:	7f c7                	jg     c000c8f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000c929:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c92e:	48                   	dec    eax
c000c92f:	52                   	push   edx
c000c930:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c935:	50                   	push   eax
c000c936:	55                   	push   ebp
c000c937:	68 ee 46 02 c0       	push   0xc00246ee
c000c93c:	e8 be 03 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000c941:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c944:	e8 a1 f1 ff ff       	call   c000baea <Virt::freeSwapfilePage(unsigned long)>
c000c949:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000c94e:	83 c4 10             	add    esp,0x10
c000c951:	48                   	dec    eax
c000c952:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c000c957:	85 c0                	test   eax,eax
c000c959:	74 1d                	je     c000c978 <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000c95b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c95f:	25 ff 0f 00 00       	and    eax,0xfff
c000c964:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c969:	77 10                	ja     c000c97b <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000c96b:	0f 20 d8             	mov    eax,cr3
c000c96e:	0f 22 d8             	mov    cr3,eax
c000c971:	b0 01                	mov    al,0x1
c000c973:	e9 48 ff ff ff       	jmp    c000c8c0 <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000c978:	fb                   	sti    
c000c979:	eb e0                	jmp    c000c95b <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000c97b:	83 ec 0c             	sub    esp,0xc
c000c97e:	68 03 47 02 c0       	push   0xc0024703
c000c983:	e8 77 03 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000c988:	83 c4 10             	add    esp,0x10
c000c98b:	eb de                	jmp    c000c96b <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000c98d:	90                   	nop

c000c98e <VAS::scanForEviction()>:
c000c98e:	57                   	push   edi
c000c98f:	31 ff                	xor    edi,edi
c000c991:	56                   	push   esi
c000c992:	53                   	push   ebx
c000c993:	83 ec 10             	sub    esp,0x10
c000c996:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c99a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c99d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c9a3:	75 0e                	jne    c000c9b3 <VAS::scanForEviction()+0x25>
c000c9a5:	89 da                	mov    edx,ebx
c000c9a7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c9aa:	c1 ea 16             	shr    edx,0x16
c000c9ad:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c9b1:	74 4e                	je     c000ca01 <VAS::scanForEviction()+0x73>
c000c9b3:	53                   	push   ebx
c000c9b4:	56                   	push   esi
c000c9b5:	e8 30 f3 ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000c9ba:	5a                   	pop    edx
c000c9bb:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9bd:	59                   	pop    ecx
c000c9be:	89 d1                	mov    ecx,edx
c000c9c0:	81 e1 01 08 00 00    	and    ecx,0x801
c000c9c6:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000c9cc:	74 3e                	je     c000ca0c <VAS::scanForEviction()+0x7e>
c000c9ce:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c9d4:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c9da:	76 2b                	jbe    c000ca07 <VAS::scanForEviction()+0x79>
c000c9dc:	47                   	inc    edi
c000c9dd:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c9e4:	83 ff 03             	cmp    edi,0x3
c000c9e7:	74 32                	je     c000ca1b <VAS::scanForEviction()+0x8d>
c000c9e9:	31 db                	xor    ebx,ebx
c000c9eb:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c9f1:	75 c0                	jne    c000c9b3 <VAS::scanForEviction()+0x25>
c000c9f3:	89 da                	mov    edx,ebx
c000c9f5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c9f8:	c1 ea 16             	shr    edx,0x16
c000c9fb:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c9ff:	75 b2                	jne    c000c9b3 <VAS::scanForEviction()+0x25>
c000ca01:	81 c3 00 00 40 00    	add    ebx,0x400000
c000ca07:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000ca0a:	eb 91                	jmp    c000c99d <VAS::scanForEviction()+0xf>
c000ca0c:	f6 c2 20             	test   dl,0x20
c000ca0f:	74 13                	je     c000ca24 <VAS::scanForEviction()+0x96>
c000ca11:	83 e2 df             	and    edx,0xffffffdf
c000ca14:	89 10                	mov    DWORD PTR [eax],edx
c000ca16:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000ca19:	eb b3                	jmp    c000c9ce <VAS::scanForEviction()+0x40>
c000ca1b:	83 c4 10             	add    esp,0x10
c000ca1e:	31 c0                	xor    eax,eax
c000ca20:	5b                   	pop    ebx
c000ca21:	5e                   	pop    esi
c000ca22:	5f                   	pop    edi
c000ca23:	c3                   	ret    
c000ca24:	83 ec 08             	sub    esp,0x8
c000ca27:	89 d0                	mov    eax,edx
c000ca29:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ca2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ca32:	53                   	push   ebx
c000ca33:	68 13 47 02 c0       	push   0xc0024713
c000ca38:	e8 c2 02 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ca3d:	58                   	pop    eax
c000ca3e:	5a                   	pop    edx
c000ca3f:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ca42:	56                   	push   esi
c000ca43:	e8 62 fd ff ff       	call   c000c7aa <VAS::evict(unsigned long)>
c000ca48:	59                   	pop    ecx
c000ca49:	5b                   	pop    ebx
c000ca4a:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ca4d:	68 27 47 02 c0       	push   0xc0024727
c000ca52:	e8 a8 02 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ca57:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000ca5e:	83 c4 10             	add    esp,0x10
c000ca61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca65:	83 c4 10             	add    esp,0x10
c000ca68:	5b                   	pop    ebx
c000ca69:	5e                   	pop    esi
c000ca6a:	5f                   	pop    edi
c000ca6b:	c3                   	ret    

c000ca6c <mapVASFirstTime>:
c000ca6c:	55                   	push   ebp
c000ca6d:	57                   	push   edi
c000ca6e:	56                   	push   esi
c000ca6f:	53                   	push   ebx
c000ca70:	83 ec 0c             	sub    esp,0xc
c000ca73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ca78:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ca7b:	4a                   	dec    edx
c000ca7c:	0f 84 fe 00 00 00    	je     c000cb80 <mapVASFirstTime+0x114>
c000ca82:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000ca85:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000ca88:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ca8d:	c1 e5 15             	shl    ebp,0x15
c000ca90:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000ca95:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000ca9b:	29 eb                	sub    ebx,ebp
c000ca9d:	29 ef                	sub    edi,ebp
c000ca9f:	83 ec 08             	sub    esp,0x8
c000caa2:	53                   	push   ebx
c000caa3:	68 53 47 02 c0       	push   0xc0024753
c000caa8:	e8 52 02 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000caad:	e8 14 d6 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000cab2:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000cab9:	6a 01                	push   0x1
c000cabb:	53                   	push   ebx
c000cabc:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cac2:	50                   	push   eax
c000cac3:	56                   	push   esi
c000cac4:	e8 ad f8 ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cac9:	83 c4 20             	add    esp,0x20
c000cacc:	39 fb                	cmp    ebx,edi
c000cace:	75 cf                	jne    c000ca9f <mapVASFirstTime+0x33>
c000cad0:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000cad5:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000cada:	29 eb                	sub    ebx,ebp
c000cadc:	29 ef                	sub    edi,ebp
c000cade:	83 ec 08             	sub    esp,0x8
c000cae1:	53                   	push   ebx
c000cae2:	68 6f 47 02 c0       	push   0xc002476f
c000cae7:	e8 13 02 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000caec:	58                   	pop    eax
c000caed:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000caf1:	5a                   	pop    edx
c000caf2:	19 c0                	sbb    eax,eax
c000caf4:	83 e0 04             	and    eax,0x4
c000caf7:	05 03 04 00 00       	add    eax,0x403
c000cafc:	50                   	push   eax
c000cafd:	68 83 47 02 c0       	push   0xc0024783
c000cb02:	e8 f8 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cb07:	e8 ba d5 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000cb0c:	59                   	pop    ecx
c000cb0d:	89 c5                	mov    ebp,eax
c000cb0f:	58                   	pop    eax
c000cb10:	55                   	push   ebp
c000cb11:	68 91 47 02 c0       	push   0xc0024791
c000cb16:	e8 e4 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cb1b:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cb1f:	19 d2                	sbb    edx,edx
c000cb21:	83 e2 04             	and    edx,0x4
c000cb24:	81 c2 03 04 00 00    	add    edx,0x403
c000cb2a:	89 14 24             	mov    DWORD PTR [esp],edx
c000cb2d:	6a 01                	push   0x1
c000cb2f:	53                   	push   ebx
c000cb30:	55                   	push   ebp
c000cb31:	56                   	push   esi
c000cb32:	e8 3f f8 ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cb37:	83 c4 18             	add    esp,0x18
c000cb3a:	53                   	push   ebx
c000cb3b:	56                   	push   esi
c000cb3c:	e8 a9 f1 ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000cb41:	5a                   	pop    edx
c000cb42:	59                   	pop    ecx
c000cb43:	ff 30                	push   DWORD PTR [eax]
c000cb45:	68 ad 47 02 c0       	push   0xc00247ad
c000cb4a:	e8 b0 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cb4f:	0f 20 d8             	mov    eax,cr3
c000cb52:	83 c4 0c             	add    esp,0xc
c000cb55:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cb5b:	56                   	push   esi
c000cb5c:	50                   	push   eax
c000cb5d:	68 b8 47 02 c0       	push   0xc00247b8
c000cb62:	e8 98 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cb67:	83 c4 10             	add    esp,0x10
c000cb6a:	39 df                	cmp    edi,ebx
c000cb6c:	0f 85 6c ff ff ff    	jne    c000cade <mapVASFirstTime+0x72>
c000cb72:	0f 20 d8             	mov    eax,cr3
c000cb75:	0f 22 d8             	mov    cr3,eax
c000cb78:	83 c4 0c             	add    esp,0xc
c000cb7b:	5b                   	pop    ebx
c000cb7c:	5e                   	pop    esi
c000cb7d:	5f                   	pop    edi
c000cb7e:	5d                   	pop    ebp
c000cb7f:	c3                   	ret    
c000cb80:	83 ec 0c             	sub    esp,0xc
c000cb83:	68 3a 47 02 c0       	push   0xc002473a
c000cb88:	e8 72 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cb8d:	83 c4 10             	add    esp,0x10
c000cb90:	83 c4 0c             	add    esp,0xc
c000cb93:	5b                   	pop    ebx
c000cb94:	5e                   	pop    esi
c000cb95:	5f                   	pop    edi
c000cb96:	5d                   	pop    ebp
c000cb97:	c3                   	ret    

c000cb98 <__cxa_atexit>:
c000cb98:	31 c0                	xor    eax,eax
c000cb9a:	c3                   	ret    

c000cb9b <__cxa_finalize>:
c000cb9b:	c3                   	ret    

c000cb9c <__stack_chk_fail>:
c000cb9c:	55                   	push   ebp
c000cb9d:	89 e5                	mov    ebp,esp
c000cb9f:	83 ec 14             	sub    esp,0x14
c000cba2:	68 d0 47 02 c0       	push   0xc00247d0
c000cba7:	e8 53 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cbac:	58                   	pop    eax
c000cbad:	5a                   	pop    edx
c000cbae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbb1:	68 20 48 02 c0       	push   0xc0024820
c000cbb6:	e8 44 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cbbb:	59                   	pop    ecx
c000cbbc:	58                   	pop    eax
c000cbbd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbc0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cbc3:	68 20 48 02 c0       	push   0xc0024820
c000cbc8:	e8 32 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cbcd:	5a                   	pop    edx
c000cbce:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbd1:	59                   	pop    ecx
c000cbd2:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbd4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cbd7:	68 20 48 02 c0       	push   0xc0024820
c000cbdc:	e8 1e 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cbe1:	5a                   	pop    edx
c000cbe2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe5:	59                   	pop    ecx
c000cbe6:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbe8:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbea:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cbed:	68 20 48 02 c0       	push   0xc0024820
c000cbf2:	e8 08 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cbf7:	c7 04 24 28 48 02 c0 	mov    DWORD PTR [esp],0xc0024828
c000cbfe:	e8 b8 7d 00 00       	call   c00149bb <Krnl::panic(char const*)>
c000cc03:	83 c4 10             	add    esp,0x10
c000cc06:	c9                   	leave  
c000cc07:	c3                   	ret    

c000cc08 <__cxa_pure_virtual>:
c000cc08:	83 ec 18             	sub    esp,0x18
c000cc0b:	68 40 48 02 c0       	push   0xc0024840
c000cc10:	e8 a6 7d 00 00       	call   c00149bb <Krnl::panic(char const*)>
c000cc15:	83 c4 1c             	add    esp,0x1c
c000cc18:	c3                   	ret    

c000cc19 <operator new[](unsigned long)>:
c000cc19:	e9 f1 cd ff ff       	jmp    c0009a0f <malloc>

c000cc1e <operator delete(void*, unsigned long)>:
c000cc1e:	e9 0c ce ff ff       	jmp    c0009a2f <rfree>

c000cc23 <operator delete[](void*)>:
c000cc23:	e9 07 ce ff ff       	jmp    c0009a2f <rfree>

c000cc28 <operator delete[](void*, unsigned long)>:
c000cc28:	e9 02 ce ff ff       	jmp    c0009a2f <rfree>

c000cc2d <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000cc2d:	55                   	push   ebp
c000cc2e:	b9 11 00 00 00       	mov    ecx,0x11
c000cc33:	57                   	push   edi
c000cc34:	56                   	push   esi
c000cc35:	be 26 43 02 c0       	mov    esi,0xc0024326
c000cc3a:	53                   	push   ebx
c000cc3b:	83 ec 20             	sub    esp,0x20
c000cc3e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cc42:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cc46:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000cc4a:	fc                   	cld    
c000cc4b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cc4d:	89 ee                	mov    esi,ebp
c000cc4f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cc53:	eb 02                	jmp    c000cc57 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000cc55:	89 c6                	mov    esi,eax
c000cc57:	31 d2                	xor    edx,edx
c000cc59:	41                   	inc    ecx
c000cc5a:	89 f0                	mov    eax,esi
c000cc5c:	f7 f3                	div    ebx
c000cc5e:	39 de                	cmp    esi,ebx
c000cc60:	73 f3                	jae    c000cc55 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000cc62:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cc65:	eb 02                	jmp    c000cc69 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000cc67:	89 c5                	mov    ebp,eax
c000cc69:	31 d2                	xor    edx,edx
c000cc6b:	49                   	dec    ecx
c000cc6c:	89 e8                	mov    eax,ebp
c000cc6e:	f7 f3                	div    ebx
c000cc70:	39 dd                	cmp    ebp,ebx
c000cc72:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000cc76:	88 11                	mov    BYTE PTR [ecx],dl
c000cc78:	73 ed                	jae    c000cc67 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000cc7a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc7e:	83 c4 20             	add    esp,0x20
c000cc81:	5b                   	pop    ebx
c000cc82:	5e                   	pop    esi
c000cc83:	5f                   	pop    edi
c000cc84:	5d                   	pop    ebp
c000cc85:	c3                   	ret    

c000cc86 <Dbg::logc(char)>:
c000cc86:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cc8a:	f6 05 60 80 02 c0 10 	test   BYTE PTR ds:0xc0028060,0x10
c000cc91:	75 12                	jne    c000cca5 <Dbg::logc(char)+0x1f>
c000cc93:	ba fd 03 00 00       	mov    edx,0x3fd
c000cc98:	ec                   	in     al,dx
c000cc99:	a8 20                	test   al,0x20
c000cc9b:	74 fb                	je     c000cc98 <Dbg::logc(char)+0x12>
c000cc9d:	ba f8 03 00 00       	mov    edx,0x3f8
c000cca2:	88 c8                	mov    al,cl
c000cca4:	ee                   	out    dx,al
c000cca5:	c3                   	ret    

c000cca6 <Dbg::logs(char*)>:
c000cca6:	53                   	push   ebx
c000cca7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ccab:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ccae:	84 c0                	test   al,al
c000ccb0:	74 0f                	je     c000ccc1 <Dbg::logs(char*)+0x1b>
c000ccb2:	50                   	push   eax
c000ccb3:	43                   	inc    ebx
c000ccb4:	e8 cd ff ff ff       	call   c000cc86 <Dbg::logc(char)>
c000ccb9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ccbc:	5a                   	pop    edx
c000ccbd:	84 c0                	test   al,al
c000ccbf:	75 f1                	jne    c000ccb2 <Dbg::logs(char*)+0xc>
c000ccc1:	5b                   	pop    ebx
c000ccc2:	c3                   	ret    

c000ccc3 <Dbg::logWriteInt(unsigned int)>:
c000ccc3:	83 ec 10             	sub    esp,0x10
c000ccc6:	6a 0a                	push   0xa
c000ccc8:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cccc:	50                   	push   eax
c000cccd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd1:	e8 57 ff ff ff       	call   c000cc2d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ccd6:	50                   	push   eax
c000ccd7:	e8 ca ff ff ff       	call   c000cca6 <Dbg::logs(char*)>
c000ccdc:	83 c4 20             	add    esp,0x20
c000ccdf:	c3                   	ret    

c000cce0 <Dbg::logWriteIntBase(unsigned int, int)>:
c000cce0:	83 ec 10             	sub    esp,0x10
c000cce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cce7:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cceb:	50                   	push   eax
c000ccec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf0:	e8 38 ff ff ff       	call   c000cc2d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ccf5:	50                   	push   eax
c000ccf6:	e8 ab ff ff ff       	call   c000cca6 <Dbg::logs(char*)>
c000ccfb:	83 c4 20             	add    esp,0x20
c000ccfe:	c3                   	ret    

c000ccff <Dbg::kprintf(char const*, ...)>:
c000ccff:	55                   	push   ebp
c000cd00:	57                   	push   edi
c000cd01:	56                   	push   esi
c000cd02:	53                   	push   ebx
c000cd03:	83 ec 0c             	sub    esp,0xc
c000cd06:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cd0a:	f6 05 60 80 02 c0 10 	test   BYTE PTR ds:0xc0028060,0x10
c000cd11:	74 08                	je     c000cd1b <Dbg::kprintf(char const*, ...)+0x1c>
c000cd13:	83 c4 0c             	add    esp,0xc
c000cd16:	5b                   	pop    ebx
c000cd17:	5e                   	pop    esi
c000cd18:	5f                   	pop    edi
c000cd19:	5d                   	pop    ebp
c000cd1a:	c3                   	ret    
c000cd1b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cd1f:	31 db                	xor    ebx,ebx
c000cd21:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cd25:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cd28:	84 c0                	test   al,al
c000cd2a:	74 e7                	je     c000cd13 <Dbg::kprintf(char const*, ...)+0x14>
c000cd2c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cd2f:	3c 25                	cmp    al,0x25
c000cd31:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cd34:	75 44                	jne    c000cd7a <Dbg::kprintf(char const*, ...)+0x7b>
c000cd36:	83 c3 02             	add    ebx,0x2
c000cd39:	8a 07                	mov    al,BYTE PTR [edi]
c000cd3b:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000cd3e:	83 e8 25             	sub    eax,0x25
c000cd41:	3c 53                	cmp    al,0x53
c000cd43:	0f 87 c9 00 00 00    	ja     c000ce12 <Dbg::kprintf(char const*, ...)+0x113>
c000cd49:	0f b6 c0             	movzx  eax,al
c000cd4c:	ff 24 85 54 48 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb7ac]
c000cd53:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd57:	89 c8                	mov    eax,ecx
c000cd59:	83 c1 04             	add    ecx,0x4
c000cd5c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd60:	ff 30                	push   DWORD PTR [eax]
c000cd62:	e8 5c ff ff ff       	call   c000ccc3 <Dbg::logWriteInt(unsigned int)>
c000cd67:	5f                   	pop    edi
c000cd68:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cd6c:	84 c0                	test   al,al
c000cd6e:	74 a3                	je     c000cd13 <Dbg::kprintf(char const*, ...)+0x14>
c000cd70:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cd73:	3c 25                	cmp    al,0x25
c000cd75:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cd78:	74 bc                	je     c000cd36 <Dbg::kprintf(char const*, ...)+0x37>
c000cd7a:	50                   	push   eax
c000cd7b:	89 eb                	mov    ebx,ebp
c000cd7d:	e8 04 ff ff ff       	call   c000cc86 <Dbg::logc(char)>
c000cd82:	89 fd                	mov    ebp,edi
c000cd84:	58                   	pop    eax
c000cd85:	eb e1                	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000cd87:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd8b:	89 c8                	mov    eax,ecx
c000cd8d:	83 c1 04             	add    ecx,0x4
c000cd90:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd94:	ff 30                	push   DWORD PTR [eax]
c000cd96:	e8 0b ff ff ff       	call   c000cca6 <Dbg::logs(char*)>
c000cd9b:	58                   	pop    eax
c000cd9c:	eb ca                	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000cd9e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cda2:	89 d0                	mov    eax,edx
c000cda4:	83 c2 04             	add    edx,0x4
c000cda7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cdab:	ff 30                	push   DWORD PTR [eax]
c000cdad:	e8 11 ff ff ff       	call   c000ccc3 <Dbg::logWriteInt(unsigned int)>
c000cdb2:	58                   	pop    eax
c000cdb3:	eb b3                	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000cdb5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cdb9:	89 d0                	mov    eax,edx
c000cdbb:	83 c2 04             	add    edx,0x4
c000cdbe:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cdc1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cdc5:	50                   	push   eax
c000cdc6:	e8 bb fe ff ff       	call   c000cc86 <Dbg::logc(char)>
c000cdcb:	58                   	pop    eax
c000cdcc:	eb 9a                	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000cdce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cdd2:	89 c8                	mov    eax,ecx
c000cdd4:	83 c1 04             	add    ecx,0x4
c000cdd7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cddb:	6a 10                	push   0x10
c000cddd:	ff 30                	push   DWORD PTR [eax]
c000cddf:	e8 fc fe ff ff       	call   c000cce0 <Dbg::logWriteIntBase(unsigned int, int)>
c000cde4:	59                   	pop    ecx
c000cde5:	5f                   	pop    edi
c000cde6:	eb 80                	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000cde8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cdec:	89 d0                	mov    eax,edx
c000cdee:	83 c2 08             	add    edx,0x8
c000cdf1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cdf5:	6a 10                	push   0x10
c000cdf7:	ff 30                	push   DWORD PTR [eax]
c000cdf9:	e8 e2 fe ff ff       	call   c000cce0 <Dbg::logWriteIntBase(unsigned int, int)>
c000cdfe:	58                   	pop    eax
c000cdff:	5a                   	pop    edx
c000ce00:	e9 63 ff ff ff       	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000ce05:	6a 25                	push   0x25
c000ce07:	e8 7a fe ff ff       	call   c000cc86 <Dbg::logc(char)>
c000ce0c:	58                   	pop    eax
c000ce0d:	e9 56 ff ff ff       	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000ce12:	6a 25                	push   0x25
c000ce14:	e8 6d fe ff ff       	call   c000cc86 <Dbg::logc(char)>
c000ce19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ce1c:	50                   	push   eax
c000ce1d:	e8 64 fe ff ff       	call   c000cc86 <Dbg::logc(char)>
c000ce22:	5a                   	pop    edx
c000ce23:	59                   	pop    ecx
c000ce24:	e9 3f ff ff ff       	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000ce29:	90                   	nop

c000ce2a <File::read(unsigned long long, void*, int*)>:
c000ce2a:	53                   	push   ebx
c000ce2b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce2f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ce33:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ce3a:	3c 19                	cmp    al,0x19
c000ce3c:	77 35                	ja     c000ce73 <File::read(unsigned long long, void*, int*)+0x49>
c000ce3e:	8b 04 85 00 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7a00]
c000ce45:	85 c0                	test   eax,eax
c000ce47:	74 2a                	je     c000ce73 <File::read(unsigned long long, void*, int*)+0x49>
c000ce49:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ce4f:	85 c0                	test   eax,eax
c000ce51:	74 20                	je     c000ce73 <File::read(unsigned long long, void*, int*)+0x49>
c000ce53:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ce57:	74 21                	je     c000ce7a <File::read(unsigned long long, void*, int*)+0x50>
c000ce59:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ce5b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce5f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ce65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce69:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce6d:	5b                   	pop    ebx
c000ce6e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ce71:	ff e0                	jmp    eax
c000ce73:	b8 0b 00 00 00       	mov    eax,0xb
c000ce78:	eb 05                	jmp    c000ce7f <File::read(unsigned long long, void*, int*)+0x55>
c000ce7a:	b8 05 00 00 00       	mov    eax,0x5
c000ce7f:	5b                   	pop    ebx
c000ce80:	c3                   	ret    
c000ce81:	90                   	nop

c000ce82 <File::write(unsigned long long, void*, int*)>:
c000ce82:	53                   	push   ebx
c000ce83:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce87:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ce8b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ce92:	3c 19                	cmp    al,0x19
c000ce94:	77 35                	ja     c000cecb <File::write(unsigned long long, void*, int*)+0x49>
c000ce96:	8b 04 85 00 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7a00]
c000ce9d:	85 c0                	test   eax,eax
c000ce9f:	74 2a                	je     c000cecb <File::write(unsigned long long, void*, int*)+0x49>
c000cea1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cea7:	85 c0                	test   eax,eax
c000cea9:	74 20                	je     c000cecb <File::write(unsigned long long, void*, int*)+0x49>
c000ceab:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ceaf:	74 21                	je     c000ced2 <File::write(unsigned long long, void*, int*)+0x50>
c000ceb1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ceb3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ceb7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cebd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cec1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cec5:	5b                   	pop    ebx
c000cec6:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000cec9:	ff e0                	jmp    eax
c000cecb:	b8 0b 00 00 00       	mov    eax,0xb
c000ced0:	eb 05                	jmp    c000ced7 <File::write(unsigned long long, void*, int*)+0x55>
c000ced2:	b8 05 00 00 00       	mov    eax,0x5
c000ced7:	5b                   	pop    ebx
c000ced8:	c3                   	ret    
c000ced9:	90                   	nop

c000ceda <Directory::read(unsigned long long, void*, int*)>:
c000ceda:	53                   	push   ebx
c000cedb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cedf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cee3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ceea:	3c 19                	cmp    al,0x19
c000ceec:	77 35                	ja     c000cf23 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ceee:	8b 04 85 00 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7a00]
c000cef5:	85 c0                	test   eax,eax
c000cef7:	74 2a                	je     c000cf23 <Directory::read(unsigned long long, void*, int*)+0x49>
c000cef9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ceff:	85 c0                	test   eax,eax
c000cf01:	74 20                	je     c000cf23 <Directory::read(unsigned long long, void*, int*)+0x49>
c000cf03:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cf07:	74 21                	je     c000cf2a <Directory::read(unsigned long long, void*, int*)+0x50>
c000cf09:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cf0b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf0f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cf15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf1d:	5b                   	pop    ebx
c000cf1e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000cf21:	ff e0                	jmp    eax
c000cf23:	b8 0b 00 00 00       	mov    eax,0xb
c000cf28:	eb 05                	jmp    c000cf2f <Directory::read(unsigned long long, void*, int*)+0x55>
c000cf2a:	b8 05 00 00 00       	mov    eax,0x5
c000cf2f:	5b                   	pop    ebx
c000cf30:	c3                   	ret    
c000cf31:	90                   	nop

c000cf32 <Directory::write(unsigned long long, void*, int*)>:
c000cf32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf36:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000cf3d:	b8 0b 00 00 00       	mov    eax,0xb
c000cf42:	80 fa 19             	cmp    dl,0x19
c000cf45:	77 18                	ja     c000cf5f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cf47:	8b 14 95 00 86 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7a00]
c000cf4e:	85 d2                	test   edx,edx
c000cf50:	74 0d                	je     c000cf5f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cf52:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000cf59:	19 c0                	sbb    eax,eax
c000cf5b:	83 e0 0a             	and    eax,0xa
c000cf5e:	40                   	inc    eax
c000cf5f:	c3                   	ret    

c000cf60 <File::isAtty()>:
c000cf60:	31 c0                	xor    eax,eax
c000cf62:	c3                   	ret    
c000cf63:	90                   	nop

c000cf64 <Directory::isAtty()>:
c000cf64:	31 c0                	xor    eax,eax
c000cf66:	c3                   	ret    
c000cf67:	90                   	nop

c000cf68 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000cf68:	b8 0a 00 00 00       	mov    eax,0xa
c000cf6d:	c3                   	ret    

c000cf6e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000cf6e:	b8 0a 00 00 00       	mov    eax,0xa
c000cf73:	c3                   	ret    

c000cf74 <Filesystem::allocateSwapfile(char const*, int)>:
c000cf74:	31 c0                	xor    eax,eax
c000cf76:	31 d2                	xor    edx,edx
c000cf78:	c3                   	ret    
c000cf79:	90                   	nop

c000cf7a <File::~File()>:
c000cf7a:	83 ec 0c             	sub    esp,0xc
c000cf7d:	ba 90 4a 02 c0       	mov    edx,0xc0024a90
c000cf82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf86:	89 10                	mov    DWORD PTR [eax],edx
c000cf88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf8c:	83 ec 0c             	sub    esp,0xc
c000cf8f:	50                   	push   eax
c000cf90:	e8 e3 e7 ff ff       	call   c000b778 <UnixFile::~UnixFile()>
c000cf95:	83 c4 10             	add    esp,0x10
c000cf98:	90                   	nop
c000cf99:	83 c4 0c             	add    esp,0xc
c000cf9c:	c3                   	ret    
c000cf9d:	90                   	nop

c000cf9e <File::~File()>:
c000cf9e:	83 ec 0c             	sub    esp,0xc
c000cfa1:	83 ec 0c             	sub    esp,0xc
c000cfa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfa8:	e8 cd ff ff ff       	call   c000cf7a <File::~File()>
c000cfad:	83 c4 10             	add    esp,0x10
c000cfb0:	83 ec 08             	sub    esp,0x8
c000cfb3:	68 14 01 00 00       	push   0x114
c000cfb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfbc:	e8 5d fc ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000cfc1:	83 c4 10             	add    esp,0x10
c000cfc4:	83 c4 0c             	add    esp,0xc
c000cfc7:	c3                   	ret    

c000cfc8 <Directory::~Directory()>:
c000cfc8:	83 ec 0c             	sub    esp,0xc
c000cfcb:	ba ac 4a 02 c0       	mov    edx,0xc0024aac
c000cfd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd4:	89 10                	mov    DWORD PTR [eax],edx
c000cfd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfda:	83 ec 0c             	sub    esp,0xc
c000cfdd:	50                   	push   eax
c000cfde:	e8 95 e7 ff ff       	call   c000b778 <UnixFile::~UnixFile()>
c000cfe3:	83 c4 10             	add    esp,0x10
c000cfe6:	90                   	nop
c000cfe7:	83 c4 0c             	add    esp,0xc
c000cfea:	c3                   	ret    
c000cfeb:	90                   	nop

c000cfec <Directory::~Directory()>:
c000cfec:	83 ec 0c             	sub    esp,0xc
c000cfef:	83 ec 0c             	sub    esp,0xc
c000cff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff6:	e8 cd ff ff ff       	call   c000cfc8 <Directory::~Directory()>
c000cffb:	83 c4 10             	add    esp,0x10
c000cffe:	83 ec 08             	sub    esp,0x8
c000d001:	68 14 01 00 00       	push   0x114
c000d006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d00a:	e8 0f fc ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000d00f:	83 c4 10             	add    esp,0x10
c000d012:	83 c4 0c             	add    esp,0xc
c000d015:	c3                   	ret    

c000d016 <Filesystem::Filesystem()>:
c000d016:	ba 28 4a 02 c0       	mov    edx,0xc0024a28
c000d01b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d01f:	89 10                	mov    DWORD PTR [eax],edx
c000d021:	8b 15 74 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028174
c000d027:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d02b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d02e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d032:	a3 74 81 02 c0       	mov    ds:0xc0028174,eax
c000d037:	90                   	nop
c000d038:	c3                   	ret    
c000d039:	90                   	nop

c000d03a <Filesystem::~Filesystem()>:
c000d03a:	ba 28 4a 02 c0       	mov    edx,0xc0024a28
c000d03f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d043:	89 10                	mov    DWORD PTR [eax],edx
c000d045:	90                   	nop
c000d046:	c3                   	ret    
c000d047:	90                   	nop

c000d048 <Filesystem::~Filesystem()>:
c000d048:	83 ec 0c             	sub    esp,0xc
c000d04b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d04f:	e8 e6 ff ff ff       	call   c000d03a <Filesystem::~Filesystem()>
c000d054:	83 c4 04             	add    esp,0x4
c000d057:	83 ec 08             	sub    esp,0x8
c000d05a:	6a 08                	push   0x8
c000d05c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d060:	e8 b9 fb ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000d065:	83 c4 10             	add    esp,0x10
c000d068:	83 c4 0c             	add    esp,0xc
c000d06b:	c3                   	ret    

c000d06c <Fs::getcwd(Process*, char*, int)>:
c000d06c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d070:	31 c0                	xor    eax,eax
c000d072:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d075:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d079:	7d 15                	jge    c000d090 <Fs::getcwd(Process*, char*, int)+0x24>
c000d07b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d07f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d086:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d089:	84 c9                	test   cl,cl
c000d08b:	74 06                	je     c000d093 <Fs::getcwd(Process*, char*, int)+0x27>
c000d08d:	40                   	inc    eax
c000d08e:	eb e2                	jmp    c000d072 <Fs::getcwd(Process*, char*, int)+0x6>
c000d090:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d093:	31 c0                	xor    eax,eax
c000d095:	c3                   	ret    

c000d096 <Fs::initVFS()>:
c000d096:	83 ec 18             	sub    esp,0x18
c000d099:	6a 08                	push   0x8
c000d09b:	e8 6f c9 ff ff       	call   c0009a0f <malloc>
c000d0a0:	89 04 24             	mov    DWORD PTR [esp],eax
c000d0a3:	e8 fc e8 00 00       	call   c001b9a4 <FAT::FAT()>
c000d0a8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d0af:	e8 5b c9 ff ff       	call   c0009a0f <malloc>
c000d0b4:	89 04 24             	mov    DWORD PTR [esp],eax
c000d0b7:	e8 46 fb 00 00       	call   c001cc02 <ISO9660::ISO9660()>
c000d0bc:	83 c4 1c             	add    esp,0x1c
c000d0bf:	c3                   	ret    

c000d0c0 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d0c0:	55                   	push   ebp
c000d0c1:	57                   	push   edi
c000d0c2:	56                   	push   esi
c000d0c3:	53                   	push   ebx
c000d0c4:	81 ec 10 04 00 00    	sub    esp,0x410
c000d0ca:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d0d1:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d0d8:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d0df:	68 00 04 00 00       	push   0x400
c000d0e4:	6a 00                	push   0x0
c000d0e6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d0ea:	56                   	push   esi
c000d0eb:	e8 94 35 ff ff       	call   c0000684 <memset>
c000d0f0:	83 c4 10             	add    esp,0x10
c000d0f3:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d0f7:	75 0b                	jne    c000d104 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d0f9:	50                   	push   eax
c000d0fa:	50                   	push   eax
c000d0fb:	57                   	push   edi
c000d0fc:	56                   	push   esi
c000d0fd:	e8 3e 36 ff ff       	call   c0000740 <strcpy>
c000d102:	eb 41                	jmp    c000d145 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d104:	8a 07                	mov    al,BYTE PTR [edi]
c000d106:	3c 5c                	cmp    al,0x5c
c000d108:	74 04                	je     c000d10e <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d10a:	3c 2f                	cmp    al,0x2f
c000d10c:	75 18                	jne    c000d126 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d10e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d111:	3c 60                	cmp    al,0x60
c000d113:	7e 03                	jle    c000d118 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d115:	83 e8 20             	sub    eax,0x20
c000d118:	88 04 24             	mov    BYTE PTR [esp],al
c000d11b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d122:	50                   	push   eax
c000d123:	50                   	push   eax
c000d124:	eb 18                	jmp    c000d13e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d126:	50                   	push   eax
c000d127:	50                   	push   eax
c000d128:	55                   	push   ebp
c000d129:	56                   	push   esi
c000d12a:	e8 11 36 ff ff       	call   c0000740 <strcpy>
c000d12f:	5a                   	pop    edx
c000d130:	59                   	pop    ecx
c000d131:	68 c6 60 02 c0       	push   0xc00260c6
c000d136:	56                   	push   esi
c000d137:	e8 44 37 ff ff       	call   c0000880 <strcat>
c000d13c:	5d                   	pop    ebp
c000d13d:	58                   	pop    eax
c000d13e:	57                   	push   edi
c000d13f:	56                   	push   esi
c000d140:	e8 3b 37 ff ff       	call   c0000880 <strcat>
c000d145:	83 c4 10             	add    esp,0x10
c000d148:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d14b:	3c 60                	cmp    al,0x60
c000d14d:	7e 03                	jle    c000d152 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d14f:	83 e8 20             	sub    eax,0x20
c000d152:	88 04 24             	mov    BYTE PTR [esp],al
c000d155:	88 03                	mov    BYTE PTR [ebx],al
c000d157:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d15e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d164:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d168:	bf 03 00 00 00       	mov    edi,0x3
c000d16d:	b8 03 00 00 00       	mov    eax,0x3
c000d172:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d175:	84 d2                	test   dl,dl
c000d177:	0f 84 91 00 00 00    	je     c000d20e <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d17d:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d180:	80 fa 5c             	cmp    dl,0x5c
c000d183:	74 05                	je     c000d18a <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d185:	80 fa 2f             	cmp    dl,0x2f
c000d188:	75 12                	jne    c000d19c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d18a:	89 c5                	mov    ebp,eax
c000d18c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d191:	74 09                	je     c000d19c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d193:	40                   	inc    eax
c000d194:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d198:	89 cf                	mov    edi,ecx
c000d19a:	eb d6                	jmp    c000d172 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d19c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d1a1:	75 5b                	jne    c000d1fe <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d1a3:	80 fa 2e             	cmp    dl,0x2e
c000d1a6:	75 56                	jne    c000d1fe <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d1a8:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d1ac:	74 19                	je     c000d1c7 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d1ae:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d1b3:	74 53                	je     c000d208 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d1b5:	89 f9                	mov    ecx,edi
c000d1b7:	41                   	inc    ecx
c000d1b8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d1bb:	80 fa 2f             	cmp    dl,0x2f
c000d1be:	74 f7                	je     c000d1b7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d1c0:	80 fa 5c             	cmp    dl,0x5c
c000d1c3:	74 f2                	je     c000d1b7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d1c5:	eb d1                	jmp    c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1c7:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d1cc:	74 3a                	je     c000d208 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d1ce:	83 f8 03             	cmp    eax,0x3
c000d1d1:	74 c5                	je     c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1d3:	41                   	inc    ecx
c000d1d4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d1d7:	80 fa 2f             	cmp    dl,0x2f
c000d1da:	74 f7                	je     c000d1d3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d1dc:	80 fa 5c             	cmp    dl,0x5c
c000d1df:	74 f2                	je     c000d1d3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d1e1:	48                   	dec    eax
c000d1e2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d1e6:	75 06                	jne    c000d1ee <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d1e8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d1ec:	eb f3                	jmp    c000d1e1 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d1ee:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d1f2:	74 07                	je     c000d1fb <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d1f4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d1f8:	48                   	dec    eax
c000d1f9:	eb f3                	jmp    c000d1ee <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d1fb:	40                   	inc    eax
c000d1fc:	eb 9a                	jmp    c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1fe:	80 fa 2f             	cmp    dl,0x2f
c000d201:	74 95                	je     c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d203:	80 fa 5c             	cmp    dl,0x5c
c000d206:	74 90                	je     c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d208:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d20b:	40                   	inc    eax
c000d20c:	eb 8a                	jmp    c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d20e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d212:	83 ec 0c             	sub    esp,0xc
c000d215:	53                   	push   ebx
c000d216:	e8 85 34 ff ff       	call   c00006a0 <strlen>
c000d21b:	83 c4 10             	add    esp,0x10
c000d21e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d223:	75 26                	jne    c000d24b <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d225:	83 ec 0c             	sub    esp,0xc
c000d228:	53                   	push   ebx
c000d229:	e8 72 34 ff ff       	call   c00006a0 <strlen>
c000d22e:	83 c4 10             	add    esp,0x10
c000d231:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d236:	74 26                	je     c000d25e <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d238:	83 ec 0c             	sub    esp,0xc
c000d23b:	53                   	push   ebx
c000d23c:	e8 5f 34 ff ff       	call   c00006a0 <strlen>
c000d241:	83 c4 10             	add    esp,0x10
c000d244:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d249:	eb c7                	jmp    c000d212 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d24b:	83 ec 0c             	sub    esp,0xc
c000d24e:	53                   	push   ebx
c000d24f:	e8 4c 34 ff ff       	call   c00006a0 <strlen>
c000d254:	83 c4 10             	add    esp,0x10
c000d257:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d25c:	74 c7                	je     c000d225 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d25e:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d264:	5b                   	pop    ebx
c000d265:	5e                   	pop    esi
c000d266:	5f                   	pop    edi
c000d267:	5d                   	pop    ebp
c000d268:	c3                   	ret    
c000d269:	90                   	nop

c000d26a <File::File(char const*, Process*)>:
c000d26a:	83 ec 0c             	sub    esp,0xc
c000d26d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d271:	83 ec 08             	sub    esp,0x8
c000d274:	6a 00                	push   0x0
c000d276:	50                   	push   eax
c000d277:	e8 1a e3 ff ff       	call   c000b596 <UnixFile::UnixFile(int)>
c000d27c:	83 c4 10             	add    esp,0x10
c000d27f:	ba 90 4a 02 c0       	mov    edx,0xc0024a90
c000d284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d288:	89 10                	mov    DWORD PTR [eax],edx
c000d28a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d28e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d298:	83 c0 0d             	add    eax,0xd
c000d29b:	83 ec 04             	sub    esp,0x4
c000d29e:	52                   	push   edx
c000d29f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2a3:	50                   	push   eax
c000d2a4:	e8 17 fe ff ff       	call   c000d0c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d2a9:	83 c4 10             	add    esp,0x10
c000d2ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2b0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d2b3:	8d 50 bf             	lea    edx,[eax-0x41]
c000d2b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ba:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d2c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2c4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d2c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2cc:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d2d2:	0f b6 c0             	movzx  eax,al
c000d2d5:	8b 04 85 00 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7a00]
c000d2dc:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d2e2:	85 c0                	test   eax,eax
c000d2e4:	75 40                	jne    c000d326 <File::File(char const*, Process*)+0xbc>
c000d2e6:	83 ec 0c             	sub    esp,0xc
c000d2e9:	68 cc 49 02 c0       	push   0xc00249cc
c000d2ee:	e8 0c fa ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000d2f3:	83 c4 10             	add    esp,0x10
c000d2f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2fa:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d300:	0f b6 c0             	movzx  eax,al
c000d303:	8b 04 85 00 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7a00]
c000d30a:	83 ec 0c             	sub    esp,0xc
c000d30d:	50                   	push   eax
c000d30e:	e8 43 31 00 00       	call   c0010456 <LogicalDisk::mount()>
c000d313:	83 c4 10             	add    esp,0x10
c000d316:	83 ec 0c             	sub    esp,0xc
c000d319:	68 e4 6d 02 c0       	push   0xc0026de4
c000d31e:	e8 dc f9 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000d323:	83 c4 10             	add    esp,0x10
c000d326:	90                   	nop
c000d327:	83 c4 0c             	add    esp,0xc
c000d32a:	c3                   	ret    
c000d32b:	90                   	nop

c000d32c <File::open(FileOpenMode)>:
c000d32c:	53                   	push   ebx
c000d32d:	b8 0b 00 00 00       	mov    eax,0xb
c000d332:	83 ec 08             	sub    esp,0x8
c000d335:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d339:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d340:	80 fa 19             	cmp    dl,0x19
c000d343:	77 40                	ja     c000d385 <File::open(FileOpenMode)+0x59>
c000d345:	8b 14 95 00 86 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7a00]
c000d34c:	85 d2                	test   edx,edx
c000d34e:	74 35                	je     c000d385 <File::open(FileOpenMode)+0x59>
c000d350:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d356:	85 d2                	test   edx,edx
c000d358:	74 2b                	je     c000d385 <File::open(FileOpenMode)+0x59>
c000d35a:	b8 06 00 00 00       	mov    eax,0x6
c000d35f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d363:	75 20                	jne    c000d385 <File::open(FileOpenMode)+0x59>
c000d365:	8b 02                	mov    eax,DWORD PTR [edx]
c000d367:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d36d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d371:	51                   	push   ecx
c000d372:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d375:	51                   	push   ecx
c000d376:	52                   	push   edx
c000d377:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d37a:	83 c4 10             	add    esp,0x10
c000d37d:	85 c0                	test   eax,eax
c000d37f:	75 04                	jne    c000d385 <File::open(FileOpenMode)+0x59>
c000d381:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d385:	83 c4 08             	add    esp,0x8
c000d388:	5b                   	pop    ebx
c000d389:	c3                   	ret    

c000d38a <File::close()>:
c000d38a:	53                   	push   ebx
c000d38b:	b8 0b 00 00 00       	mov    eax,0xb
c000d390:	83 ec 08             	sub    esp,0x8
c000d393:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d397:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d39e:	80 fa 19             	cmp    dl,0x19
c000d3a1:	77 41                	ja     c000d3e4 <File::close()+0x5a>
c000d3a3:	8b 1c 95 00 86 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7a00]
c000d3aa:	85 db                	test   ebx,ebx
c000d3ac:	74 36                	je     c000d3e4 <File::close()+0x5a>
c000d3ae:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d3b5:	74 2d                	je     c000d3e4 <File::close()+0x5a>
c000d3b7:	b8 05 00 00 00       	mov    eax,0x5
c000d3bc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d3c0:	74 22                	je     c000d3e4 <File::close()+0x5a>
c000d3c2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d3c6:	8b 04 95 00 86 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7a00]
c000d3cd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d3d3:	53                   	push   ebx
c000d3d4:	53                   	push   ebx
c000d3d5:	8b 10                	mov    edx,DWORD PTR [eax]
c000d3d7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d3dd:	50                   	push   eax
c000d3de:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d3e1:	83 c4 10             	add    esp,0x10
c000d3e4:	83 c4 08             	add    esp,0x8
c000d3e7:	5b                   	pop    ebx
c000d3e8:	c3                   	ret    
c000d3e9:	90                   	nop

c000d3ea <File::seek(unsigned long long)>:
c000d3ea:	56                   	push   esi
c000d3eb:	53                   	push   ebx
c000d3ec:	b8 0b 00 00 00       	mov    eax,0xb
c000d3f1:	51                   	push   ecx
c000d3f2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d3f6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3fa:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d401:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d405:	80 fa 19             	cmp    dl,0x19
c000d408:	77 31                	ja     c000d43b <File::seek(unsigned long long)+0x51>
c000d40a:	8b 14 95 00 86 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7a00]
c000d411:	85 d2                	test   edx,edx
c000d413:	74 26                	je     c000d43b <File::seek(unsigned long long)+0x51>
c000d415:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d41b:	85 d2                	test   edx,edx
c000d41d:	74 1c                	je     c000d43b <File::seek(unsigned long long)+0x51>
c000d41f:	b8 05 00 00 00       	mov    eax,0x5
c000d424:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d428:	74 11                	je     c000d43b <File::seek(unsigned long long)+0x51>
c000d42a:	8b 02                	mov    eax,DWORD PTR [edx]
c000d42c:	53                   	push   ebx
c000d42d:	51                   	push   ecx
c000d42e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d434:	52                   	push   edx
c000d435:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d438:	83 c4 10             	add    esp,0x10
c000d43b:	5a                   	pop    edx
c000d43c:	5b                   	pop    ebx
c000d43d:	5e                   	pop    esi
c000d43e:	c3                   	ret    
c000d43f:	90                   	nop

c000d440 <File::tell(unsigned long long*)>:
c000d440:	83 ec 0c             	sub    esp,0xc
c000d443:	b8 0b 00 00 00       	mov    eax,0xb
c000d448:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d44c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d453:	80 fa 19             	cmp    dl,0x19
c000d456:	77 34                	ja     c000d48c <File::tell(unsigned long long*)+0x4c>
c000d458:	8b 14 95 00 86 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7a00]
c000d45f:	85 d2                	test   edx,edx
c000d461:	74 29                	je     c000d48c <File::tell(unsigned long long*)+0x4c>
c000d463:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d469:	85 d2                	test   edx,edx
c000d46b:	74 1f                	je     c000d48c <File::tell(unsigned long long*)+0x4c>
c000d46d:	b8 05 00 00 00       	mov    eax,0x5
c000d472:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d476:	74 14                	je     c000d48c <File::tell(unsigned long long*)+0x4c>
c000d478:	50                   	push   eax
c000d479:	8b 02                	mov    eax,DWORD PTR [edx]
c000d47b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d47f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d485:	52                   	push   edx
c000d486:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d489:	83 c4 10             	add    esp,0x10
c000d48c:	83 c4 0c             	add    esp,0xc
c000d48f:	c3                   	ret    

c000d490 <File::rewind()>:
c000d490:	83 ec 10             	sub    esp,0x10
c000d493:	6a 00                	push   0x0
c000d495:	6a 00                	push   0x0
c000d497:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49b:	e8 4a ff ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c000d4a0:	83 c4 1c             	add    esp,0x1c
c000d4a3:	c3                   	ret    

c000d4a4 <File::unlink()>:
c000d4a4:	83 ec 0c             	sub    esp,0xc
c000d4a7:	b8 0b 00 00 00       	mov    eax,0xb
c000d4ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d4b0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d4b7:	80 f9 19             	cmp    cl,0x19
c000d4ba:	77 2f                	ja     c000d4eb <File::unlink()+0x47>
c000d4bc:	8b 0c 8d 00 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7a00]
c000d4c3:	85 c9                	test   ecx,ecx
c000d4c5:	74 24                	je     c000d4eb <File::unlink()+0x47>
c000d4c7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d4cd:	85 c9                	test   ecx,ecx
c000d4cf:	74 1a                	je     c000d4eb <File::unlink()+0x47>
c000d4d1:	b8 06 00 00 00       	mov    eax,0x6
c000d4d6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d4da:	75 0f                	jne    c000d4eb <File::unlink()+0x47>
c000d4dc:	83 c2 0d             	add    edx,0xd
c000d4df:	50                   	push   eax
c000d4e0:	50                   	push   eax
c000d4e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d4e3:	52                   	push   edx
c000d4e4:	51                   	push   ecx
c000d4e5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	83 c4 0c             	add    esp,0xc
c000d4ee:	c3                   	ret    
c000d4ef:	90                   	nop

c000d4f0 <File::rename(char const*)>:
c000d4f0:	83 ec 0c             	sub    esp,0xc
c000d4f3:	b8 0b 00 00 00       	mov    eax,0xb
c000d4f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d4fc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d503:	80 f9 19             	cmp    cl,0x19
c000d506:	77 32                	ja     c000d53a <File::rename(char const*)+0x4a>
c000d508:	8b 0c 8d 00 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7a00]
c000d50f:	85 c9                	test   ecx,ecx
c000d511:	74 27                	je     c000d53a <File::rename(char const*)+0x4a>
c000d513:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d519:	85 c9                	test   ecx,ecx
c000d51b:	74 1d                	je     c000d53a <File::rename(char const*)+0x4a>
c000d51d:	b8 06 00 00 00       	mov    eax,0x6
c000d522:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d526:	75 12                	jne    c000d53a <File::rename(char const*)+0x4a>
c000d528:	83 c2 0d             	add    edx,0xd
c000d52b:	50                   	push   eax
c000d52c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d52e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d532:	52                   	push   edx
c000d533:	51                   	push   ecx
c000d534:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d537:	83 c4 10             	add    esp,0x10
c000d53a:	83 c4 0c             	add    esp,0xc
c000d53d:	c3                   	ret    

c000d53e <File::chfatattr(unsigned char, unsigned char)>:
c000d53e:	57                   	push   edi
c000d53f:	b8 0b 00 00 00       	mov    eax,0xb
c000d544:	56                   	push   esi
c000d545:	53                   	push   ebx
c000d546:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d54a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d54e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d555:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d559:	80 f9 19             	cmp    cl,0x19
c000d55c:	77 37                	ja     c000d595 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d55e:	8b 0c 8d 00 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7a00]
c000d565:	85 c9                	test   ecx,ecx
c000d567:	74 2c                	je     c000d595 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d569:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d56f:	85 c9                	test   ecx,ecx
c000d571:	74 22                	je     c000d595 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d573:	b8 06 00 00 00       	mov    eax,0x6
c000d578:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d57c:	75 17                	jne    c000d595 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d57e:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d580:	89 f0                	mov    eax,esi
c000d582:	83 c2 0d             	add    edx,0xd
c000d585:	0f b6 f0             	movzx  esi,al
c000d588:	0f b6 db             	movzx  ebx,bl
c000d58b:	56                   	push   esi
c000d58c:	53                   	push   ebx
c000d58d:	52                   	push   edx
c000d58e:	51                   	push   ecx
c000d58f:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d592:	83 c4 10             	add    esp,0x10
c000d595:	5b                   	pop    ebx
c000d596:	5e                   	pop    esi
c000d597:	5f                   	pop    edi
c000d598:	c3                   	ret    
c000d599:	90                   	nop

c000d59a <File::exists()>:
c000d59a:	83 ec 0c             	sub    esp,0xc
c000d59d:	31 c0                	xor    eax,eax
c000d59f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5a3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d5aa:	80 f9 19             	cmp    cl,0x19
c000d5ad:	77 24                	ja     c000d5d3 <File::exists()+0x39>
c000d5af:	8b 0c 8d 00 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7a00]
c000d5b6:	85 c9                	test   ecx,ecx
c000d5b8:	74 19                	je     c000d5d3 <File::exists()+0x39>
c000d5ba:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d5c0:	85 c9                	test   ecx,ecx
c000d5c2:	74 0f                	je     c000d5d3 <File::exists()+0x39>
c000d5c4:	83 c2 0d             	add    edx,0xd
c000d5c7:	50                   	push   eax
c000d5c8:	50                   	push   eax
c000d5c9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d5cb:	52                   	push   edx
c000d5cc:	51                   	push   ecx
c000d5cd:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d5d0:	83 c4 10             	add    esp,0x10
c000d5d3:	83 c4 0c             	add    esp,0xc
c000d5d6:	c3                   	ret    
c000d5d7:	90                   	nop

c000d5d8 <File::stat(unsigned long long*, bool*)>:
c000d5d8:	56                   	push   esi
c000d5d9:	53                   	push   ebx
c000d5da:	50                   	push   eax
c000d5db:	b8 0b 00 00 00       	mov    eax,0xb
c000d5e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5e4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d5e8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d5ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d5f3:	80 f9 19             	cmp    cl,0x19
c000d5f6:	77 3d                	ja     c000d635 <File::stat(unsigned long long*, bool*)+0x5d>
c000d5f8:	8b 0c 8d 00 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7a00]
c000d5ff:	85 c9                	test   ecx,ecx
c000d601:	74 32                	je     c000d635 <File::stat(unsigned long long*, bool*)+0x5d>
c000d603:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d609:	85 c9                	test   ecx,ecx
c000d60b:	74 28                	je     c000d635 <File::stat(unsigned long long*, bool*)+0x5d>
c000d60d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d60f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d613:	74 13                	je     c000d628 <File::stat(unsigned long long*, bool*)+0x50>
c000d615:	83 ec 04             	sub    esp,0x4
c000d618:	56                   	push   esi
c000d619:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d61f:	51                   	push   ecx
c000d620:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d623:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d626:	eb 0a                	jmp    c000d632 <File::stat(unsigned long long*, bool*)+0x5a>
c000d628:	53                   	push   ebx
c000d629:	83 c2 0d             	add    edx,0xd
c000d62c:	56                   	push   esi
c000d62d:	52                   	push   edx
c000d62e:	51                   	push   ecx
c000d62f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d632:	83 c4 10             	add    esp,0x10
c000d635:	5a                   	pop    edx
c000d636:	5b                   	pop    ebx
c000d637:	5e                   	pop    esi
c000d638:	c3                   	ret    

c000d639 <Fs::setcwd(Process*, char*)>:
c000d639:	55                   	push   ebp
c000d63a:	57                   	push   edi
c000d63b:	56                   	push   esi
c000d63c:	53                   	push   ebx
c000d63d:	81 ec 20 02 00 00    	sub    esp,0x220
c000d643:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d64a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d650:	57                   	push   edi
c000d651:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d658:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d65c:	56                   	push   esi
c000d65d:	e8 5e fa ff ff       	call   c000d0c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d662:	89 34 24             	mov    DWORD PTR [esp],esi
c000d665:	e8 36 30 ff ff       	call   c00006a0 <strlen>
c000d66a:	83 c4 10             	add    esp,0x10
c000d66d:	83 f8 02             	cmp    eax,0x2
c000d670:	77 43                	ja     c000d6b5 <Fs::setcwd(Process*, char*)+0x7c>
c000d672:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000d677:	83 eb 41             	sub    ebx,0x41
c000d67a:	8b 04 9d 00 86 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7a00]
c000d681:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000d688:	75 45                	jne    c000d6cf <Fs::setcwd(Process*, char*)+0x96>
c000d68a:	83 ec 0c             	sub    esp,0xc
c000d68d:	68 a4 49 02 c0       	push   0xc00249a4
c000d692:	e8 68 f6 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000d697:	5a                   	pop    edx
c000d698:	ff 34 9d 00 86 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7a00]
c000d69f:	e8 b2 2d 00 00       	call   c0010456 <LogicalDisk::mount()>
c000d6a4:	c7 04 24 e4 6d 02 c0 	mov    DWORD PTR [esp],0xc0026de4
c000d6ab:	e8 4f f6 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000d6b0:	83 c4 10             	add    esp,0x10
c000d6b3:	eb 1a                	jmp    c000d6cf <Fs::setcwd(Process*, char*)+0x96>
c000d6b5:	83 ec 0c             	sub    esp,0xc
c000d6b8:	56                   	push   esi
c000d6b9:	e8 e2 2f ff ff       	call   c00006a0 <strlen>
c000d6be:	83 c4 10             	add    esp,0x10
c000d6c1:	83 f8 03             	cmp    eax,0x3
c000d6c4:	75 42                	jne    c000d708 <Fs::setcwd(Process*, char*)+0xcf>
c000d6c6:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d6cb:	75 3b                	jne    c000d708 <Fs::setcwd(Process*, char*)+0xcf>
c000d6cd:	eb a3                	jmp    c000d672 <Fs::setcwd(Process*, char*)+0x39>
c000d6cf:	b8 03 00 00 00       	mov    eax,0x3
c000d6d4:	83 fb 19             	cmp    ebx,0x19
c000d6d7:	0f 87 c6 00 00 00    	ja     c000d7a3 <Fs::setcwd(Process*, char*)+0x16a>
c000d6dd:	8b 14 9d 00 86 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7a00]
c000d6e4:	b8 05 00 00 00       	mov    eax,0x5
c000d6e9:	85 d2                	test   edx,edx
c000d6eb:	0f 84 b2 00 00 00    	je     c000d7a3 <Fs::setcwd(Process*, char*)+0x16a>
c000d6f1:	b8 06 00 00 00       	mov    eax,0x6
c000d6f6:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d6fd:	0f 85 92 00 00 00    	jne    c000d795 <Fs::setcwd(Process*, char*)+0x15c>
c000d703:	e9 9b 00 00 00       	jmp    c000d7a3 <Fs::setcwd(Process*, char*)+0x16a>
c000d708:	83 ec 0c             	sub    esp,0xc
c000d70b:	68 14 01 00 00       	push   0x114
c000d710:	e8 fa c2 ff ff       	call   c0009a0f <malloc>
c000d715:	83 c4 0c             	add    esp,0xc
c000d718:	89 c3                	mov    ebx,eax
c000d71a:	55                   	push   ebp
c000d71b:	56                   	push   esi
c000d71c:	50                   	push   eax
c000d71d:	e8 48 fb ff ff       	call   c000d26a <File::File(char const*, Process*)>
c000d722:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d727:	83 c4 0c             	add    esp,0xc
c000d72a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d72e:	50                   	push   eax
c000d72f:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d733:	50                   	push   eax
c000d734:	53                   	push   ebx
c000d735:	e8 9e fe ff ff       	call   c000d5d8 <File::stat(unsigned long long*, bool*)>
c000d73a:	83 c4 10             	add    esp,0x10
c000d73d:	83 f8 02             	cmp    eax,0x2
c000d740:	74 04                	je     c000d746 <Fs::setcwd(Process*, char*)+0x10d>
c000d742:	85 c0                	test   eax,eax
c000d744:	74 1c                	je     c000d762 <Fs::setcwd(Process*, char*)+0x129>
c000d746:	b8 01 00 00 00       	mov    eax,0x1
c000d74b:	85 db                	test   ebx,ebx
c000d74d:	74 54                	je     c000d7a3 <Fs::setcwd(Process*, char*)+0x16a>
c000d74f:	83 ec 0c             	sub    esp,0xc
c000d752:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d754:	53                   	push   ebx
c000d755:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d758:	83 c4 10             	add    esp,0x10
c000d75b:	b8 01 00 00 00       	mov    eax,0x1
c000d760:	eb 41                	jmp    c000d7a3 <Fs::setcwd(Process*, char*)+0x16a>
c000d762:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d767:	75 1c                	jne    c000d785 <Fs::setcwd(Process*, char*)+0x14c>
c000d769:	b8 02 00 00 00       	mov    eax,0x2
c000d76e:	85 db                	test   ebx,ebx
c000d770:	74 31                	je     c000d7a3 <Fs::setcwd(Process*, char*)+0x16a>
c000d772:	83 ec 0c             	sub    esp,0xc
c000d775:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d777:	53                   	push   ebx
c000d778:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d77b:	83 c4 10             	add    esp,0x10
c000d77e:	b8 02 00 00 00       	mov    eax,0x2
c000d783:	eb 1e                	jmp    c000d7a3 <Fs::setcwd(Process*, char*)+0x16a>
c000d785:	85 db                	test   ebx,ebx
c000d787:	74 0c                	je     c000d795 <Fs::setcwd(Process*, char*)+0x15c>
c000d789:	83 ec 0c             	sub    esp,0xc
c000d78c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d78e:	53                   	push   ebx
c000d78f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d792:	83 c4 10             	add    esp,0x10
c000d795:	50                   	push   eax
c000d796:	50                   	push   eax
c000d797:	56                   	push   esi
c000d798:	57                   	push   edi
c000d799:	e8 a2 2f ff ff       	call   c0000740 <strcpy>
c000d79e:	83 c4 10             	add    esp,0x10
c000d7a1:	31 c0                	xor    eax,eax
c000d7a3:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d7a9:	5b                   	pop    ebx
c000d7aa:	5e                   	pop    esi
c000d7ab:	5f                   	pop    edi
c000d7ac:	5d                   	pop    ebp
c000d7ad:	c3                   	ret    

c000d7ae <Directory::Directory(char const*, Process*)>:
c000d7ae:	83 ec 0c             	sub    esp,0xc
c000d7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b5:	83 ec 08             	sub    esp,0x8
c000d7b8:	6a 00                	push   0x0
c000d7ba:	50                   	push   eax
c000d7bb:	e8 d6 dd ff ff       	call   c000b596 <UnixFile::UnixFile(int)>
c000d7c0:	83 c4 10             	add    esp,0x10
c000d7c3:	ba ac 4a 02 c0       	mov    edx,0xc0024aac
c000d7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7cc:	89 10                	mov    DWORD PTR [eax],edx
c000d7ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d7d2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d7d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7dc:	83 c0 0d             	add    eax,0xd
c000d7df:	83 ec 04             	sub    esp,0x4
c000d7e2:	52                   	push   edx
c000d7e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e7:	50                   	push   eax
c000d7e8:	e8 d3 f8 ff ff       	call   c000d0c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d7ed:	83 c4 10             	add    esp,0x10
c000d7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d7f7:	8d 50 bf             	lea    edx,[eax-0x41]
c000d7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7fe:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d808:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d810:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d816:	0f b6 c0             	movzx  eax,al
c000d819:	8b 04 85 00 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7a00]
c000d820:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d826:	85 c0                	test   eax,eax
c000d828:	75 40                	jne    c000d86a <Directory::Directory(char const*, Process*)+0xbc>
c000d82a:	83 ec 0c             	sub    esp,0xc
c000d82d:	68 f4 49 02 c0       	push   0xc00249f4
c000d832:	e8 c8 f4 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000d837:	83 c4 10             	add    esp,0x10
c000d83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d83e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d844:	0f b6 c0             	movzx  eax,al
c000d847:	8b 04 85 00 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7a00]
c000d84e:	83 ec 0c             	sub    esp,0xc
c000d851:	50                   	push   eax
c000d852:	e8 ff 2b 00 00       	call   c0010456 <LogicalDisk::mount()>
c000d857:	83 c4 10             	add    esp,0x10
c000d85a:	83 ec 0c             	sub    esp,0xc
c000d85d:	68 e4 6d 02 c0       	push   0xc0026de4
c000d862:	e8 98 f4 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000d867:	83 c4 10             	add    esp,0x10
c000d86a:	90                   	nop
c000d86b:	83 c4 0c             	add    esp,0xc
c000d86e:	c3                   	ret    
c000d86f:	90                   	nop

c000d870 <Directory::open()>:
c000d870:	53                   	push   ebx
c000d871:	b8 0b 00 00 00       	mov    eax,0xb
c000d876:	83 ec 08             	sub    esp,0x8
c000d879:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d87d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d884:	80 fa 19             	cmp    dl,0x19
c000d887:	77 3d                	ja     c000d8c6 <Directory::open()+0x56>
c000d889:	8b 14 95 00 86 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7a00]
c000d890:	85 d2                	test   edx,edx
c000d892:	74 32                	je     c000d8c6 <Directory::open()+0x56>
c000d894:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d89a:	85 d2                	test   edx,edx
c000d89c:	74 28                	je     c000d8c6 <Directory::open()+0x56>
c000d89e:	b8 06 00 00 00       	mov    eax,0x6
c000d8a3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d8a7:	75 1d                	jne    c000d8c6 <Directory::open()+0x56>
c000d8a9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d8af:	50                   	push   eax
c000d8b0:	8b 02                	mov    eax,DWORD PTR [edx]
c000d8b2:	51                   	push   ecx
c000d8b3:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d8b6:	51                   	push   ecx
c000d8b7:	52                   	push   edx
c000d8b8:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d8bb:	83 c4 10             	add    esp,0x10
c000d8be:	85 c0                	test   eax,eax
c000d8c0:	75 04                	jne    c000d8c6 <Directory::open()+0x56>
c000d8c2:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d8c6:	83 c4 08             	add    esp,0x8
c000d8c9:	5b                   	pop    ebx
c000d8ca:	c3                   	ret    
c000d8cb:	90                   	nop

c000d8cc <Directory::close()>:
c000d8cc:	53                   	push   ebx
c000d8cd:	b8 0b 00 00 00       	mov    eax,0xb
c000d8d2:	83 ec 08             	sub    esp,0x8
c000d8d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d8d9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d8e0:	80 fa 19             	cmp    dl,0x19
c000d8e3:	77 41                	ja     c000d926 <Directory::close()+0x5a>
c000d8e5:	8b 1c 95 00 86 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7a00]
c000d8ec:	85 db                	test   ebx,ebx
c000d8ee:	74 36                	je     c000d926 <Directory::close()+0x5a>
c000d8f0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d8f7:	74 2d                	je     c000d926 <Directory::close()+0x5a>
c000d8f9:	b8 05 00 00 00       	mov    eax,0x5
c000d8fe:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d902:	74 22                	je     c000d926 <Directory::close()+0x5a>
c000d904:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d908:	8b 04 95 00 86 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7a00]
c000d90f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d915:	53                   	push   ebx
c000d916:	53                   	push   ebx
c000d917:	8b 10                	mov    edx,DWORD PTR [eax]
c000d919:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d91f:	50                   	push   eax
c000d920:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d923:	83 c4 10             	add    esp,0x10
c000d926:	83 c4 08             	add    esp,0x8
c000d929:	5b                   	pop    ebx
c000d92a:	c3                   	ret    
c000d92b:	90                   	nop

c000d92c <Directory::unlink()>:
c000d92c:	83 ec 0c             	sub    esp,0xc
c000d92f:	b8 0b 00 00 00       	mov    eax,0xb
c000d934:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d938:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d93f:	80 f9 19             	cmp    cl,0x19
c000d942:	77 2f                	ja     c000d973 <Directory::unlink()+0x47>
c000d944:	8b 0c 8d 00 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7a00]
c000d94b:	85 c9                	test   ecx,ecx
c000d94d:	74 24                	je     c000d973 <Directory::unlink()+0x47>
c000d94f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d955:	85 c9                	test   ecx,ecx
c000d957:	74 1a                	je     c000d973 <Directory::unlink()+0x47>
c000d959:	b8 06 00 00 00       	mov    eax,0x6
c000d95e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d962:	75 0f                	jne    c000d973 <Directory::unlink()+0x47>
c000d964:	83 c2 0d             	add    edx,0xd
c000d967:	50                   	push   eax
c000d968:	50                   	push   eax
c000d969:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d96b:	52                   	push   edx
c000d96c:	51                   	push   ecx
c000d96d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d970:	83 c4 10             	add    esp,0x10
c000d973:	83 c4 0c             	add    esp,0xc
c000d976:	c3                   	ret    
c000d977:	90                   	nop

c000d978 <Directory::rename(char const*)>:
c000d978:	83 ec 0c             	sub    esp,0xc
c000d97b:	b8 0b 00 00 00       	mov    eax,0xb
c000d980:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d984:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d98b:	80 f9 19             	cmp    cl,0x19
c000d98e:	77 32                	ja     c000d9c2 <Directory::rename(char const*)+0x4a>
c000d990:	8b 0c 8d 00 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7a00]
c000d997:	85 c9                	test   ecx,ecx
c000d999:	74 27                	je     c000d9c2 <Directory::rename(char const*)+0x4a>
c000d99b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d9a1:	85 c9                	test   ecx,ecx
c000d9a3:	74 1d                	je     c000d9c2 <Directory::rename(char const*)+0x4a>
c000d9a5:	b8 06 00 00 00       	mov    eax,0x6
c000d9aa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d9ae:	75 12                	jne    c000d9c2 <Directory::rename(char const*)+0x4a>
c000d9b0:	83 c2 0d             	add    edx,0xd
c000d9b3:	50                   	push   eax
c000d9b4:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d9b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d9ba:	52                   	push   edx
c000d9bb:	51                   	push   ecx
c000d9bc:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d9bf:	83 c4 10             	add    esp,0x10
c000d9c2:	83 c4 0c             	add    esp,0xc
c000d9c5:	c3                   	ret    

c000d9c6 <Directory::exists()>:
c000d9c6:	83 ec 0c             	sub    esp,0xc
c000d9c9:	31 c0                	xor    eax,eax
c000d9cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d9cf:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d9d6:	80 f9 19             	cmp    cl,0x19
c000d9d9:	77 24                	ja     c000d9ff <Directory::exists()+0x39>
c000d9db:	8b 0c 8d 00 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7a00]
c000d9e2:	85 c9                	test   ecx,ecx
c000d9e4:	74 19                	je     c000d9ff <Directory::exists()+0x39>
c000d9e6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d9ec:	85 c9                	test   ecx,ecx
c000d9ee:	74 0f                	je     c000d9ff <Directory::exists()+0x39>
c000d9f0:	83 c2 0d             	add    edx,0xd
c000d9f3:	50                   	push   eax
c000d9f4:	50                   	push   eax
c000d9f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d9f7:	52                   	push   edx
c000d9f8:	51                   	push   ecx
c000d9f9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d9fc:	83 c4 10             	add    esp,0x10
c000d9ff:	83 c4 0c             	add    esp,0xc
c000da02:	c3                   	ret    
c000da03:	90                   	nop

c000da04 <Directory::read(dirent*)>:
c000da04:	83 ec 1c             	sub    esp,0x1c
c000da07:	b8 0b 00 00 00       	mov    eax,0xb
c000da0c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000da10:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000da17:	80 fa 19             	cmp    dl,0x19
c000da1a:	77 30                	ja     c000da4c <Directory::read(dirent*)+0x48>
c000da1c:	8b 14 95 00 86 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7a00]
c000da23:	85 d2                	test   edx,edx
c000da25:	74 25                	je     c000da4c <Directory::read(dirent*)+0x48>
c000da27:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000da2e:	74 1c                	je     c000da4c <Directory::read(dirent*)+0x48>
c000da30:	83 ec 0c             	sub    esp,0xc
c000da33:	8b 01                	mov    eax,DWORD PTR [ecx]
c000da35:	8d 54 24 18          	lea    edx,[esp+0x18]
c000da39:	52                   	push   edx
c000da3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3e:	6a 00                	push   0x0
c000da40:	68 10 01 00 00       	push   0x110
c000da45:	51                   	push   ecx
c000da46:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000da49:	83 c4 20             	add    esp,0x20
c000da4c:	83 c4 1c             	add    esp,0x1c
c000da4f:	c3                   	ret    

c000da50 <Directory::create()>:
c000da50:	83 ec 0c             	sub    esp,0xc
c000da53:	b8 0b 00 00 00       	mov    eax,0xb
c000da58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000da5c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000da63:	80 f9 19             	cmp    cl,0x19
c000da66:	77 2f                	ja     c000da97 <Directory::create()+0x47>
c000da68:	8b 0c 8d 00 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7a00]
c000da6f:	85 c9                	test   ecx,ecx
c000da71:	74 24                	je     c000da97 <Directory::create()+0x47>
c000da73:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000da79:	85 c9                	test   ecx,ecx
c000da7b:	74 1a                	je     c000da97 <Directory::create()+0x47>
c000da7d:	b8 06 00 00 00       	mov    eax,0x6
c000da82:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000da86:	75 0f                	jne    c000da97 <Directory::create()+0x47>
c000da88:	83 c2 0d             	add    edx,0xd
c000da8b:	50                   	push   eax
c000da8c:	50                   	push   eax
c000da8d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000da8f:	52                   	push   edx
c000da90:	51                   	push   ecx
c000da91:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000da94:	83 c4 10             	add    esp,0x10
c000da97:	83 c4 0c             	add    esp,0xc
c000da9a:	c3                   	ret    
c000da9b:	90                   	nop

c000da9c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000da9c:	b8 0a 00 00 00       	mov    eax,0xa
c000daa1:	c3                   	ret    
c000daa2:	66 90                	xchg   ax,ax

c000daa4 <Bus::Bus(char const*)>:
c000daa4:	83 ec 0c             	sub    esp,0xc
c000daa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daab:	83 ec 08             	sub    esp,0x8
c000daae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dab2:	50                   	push   eax
c000dab3:	e8 8a 09 00 00       	call   c000e442 <Device::Device(char const*)>
c000dab8:	83 c4 10             	add    esp,0x10
c000dabb:	ba c8 4a 02 c0       	mov    edx,0xc0024ac8
c000dac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dac4:	89 10                	mov    DWORD PTR [eax],edx
c000dac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daca:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000dad4:	90                   	nop
c000dad5:	83 c4 0c             	add    esp,0xc
c000dad8:	c3                   	ret    
c000dad9:	90                   	nop
c000dada:	66 90                	xchg   ax,ax

c000dadc <Bus::~Bus()>:
c000dadc:	83 ec 0c             	sub    esp,0xc
c000dadf:	ba c8 4a 02 c0       	mov    edx,0xc0024ac8
c000dae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dae8:	89 10                	mov    DWORD PTR [eax],edx
c000daea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daee:	83 ec 0c             	sub    esp,0xc
c000daf1:	50                   	push   eax
c000daf2:	e8 15 06 00 00       	call   c000e10c <Device::~Device()>
c000daf7:	83 c4 10             	add    esp,0x10
c000dafa:	90                   	nop
c000dafb:	83 c4 0c             	add    esp,0xc
c000dafe:	c3                   	ret    
c000daff:	90                   	nop

c000db00 <Bus::~Bus()>:
c000db00:	83 ec 0c             	sub    esp,0xc
c000db03:	83 ec 0c             	sub    esp,0xc
c000db06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db0a:	e8 cd ff ff ff       	call   c000dadc <Bus::~Bus()>
c000db0f:	83 c4 10             	add    esp,0x10
c000db12:	83 ec 08             	sub    esp,0x8
c000db15:	68 58 01 00 00       	push   0x158
c000db1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db1e:	e8 fb f0 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000db23:	83 c4 10             	add    esp,0x10
c000db26:	83 c4 0c             	add    esp,0xc
c000db29:	c3                   	ret    
c000db2a:	66 90                	xchg   ax,ax

c000db2c <Buzzer::Buzzer(char const*)>:
c000db2c:	83 ec 0c             	sub    esp,0xc
c000db2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db33:	83 ec 08             	sub    esp,0x8
c000db36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db3a:	50                   	push   eax
c000db3b:	e8 02 09 00 00       	call   c000e442 <Device::Device(char const*)>
c000db40:	83 c4 10             	add    esp,0x10
c000db43:	ba f4 4a 02 c0       	mov    edx,0xc0024af4
c000db48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db4c:	89 10                	mov    DWORD PTR [eax],edx
c000db4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db52:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000db5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db60:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000db6a:	90                   	nop
c000db6b:	83 c4 0c             	add    esp,0xc
c000db6e:	c3                   	ret    
c000db6f:	90                   	nop

c000db70 <Buzzer::~Buzzer()>:
c000db70:	83 ec 0c             	sub    esp,0xc
c000db73:	ba f4 4a 02 c0       	mov    edx,0xc0024af4
c000db78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db7c:	89 10                	mov    DWORD PTR [eax],edx
c000db7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db82:	83 ec 0c             	sub    esp,0xc
c000db85:	50                   	push   eax
c000db86:	e8 81 05 00 00       	call   c000e10c <Device::~Device()>
c000db8b:	83 c4 10             	add    esp,0x10
c000db8e:	90                   	nop
c000db8f:	83 c4 0c             	add    esp,0xc
c000db92:	c3                   	ret    
c000db93:	90                   	nop

c000db94 <Buzzer::~Buzzer()>:
c000db94:	83 ec 0c             	sub    esp,0xc
c000db97:	83 ec 0c             	sub    esp,0xc
c000db9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db9e:	e8 cd ff ff ff       	call   c000db70 <Buzzer::~Buzzer()>
c000dba3:	83 c4 10             	add    esp,0x10
c000dba6:	83 ec 08             	sub    esp,0x8
c000dba9:	68 5c 01 00 00       	push   0x15c
c000dbae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbb2:	e8 67 f0 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000dbb7:	83 c4 10             	add    esp,0x10
c000dbba:	83 c4 0c             	add    esp,0xc
c000dbbd:	c3                   	ret    

c000dbbe <Buzzer::stop()>:
c000dbbe:	83 ec 14             	sub    esp,0x14
c000dbc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dbc5:	8b 10                	mov    edx,DWORD PTR [eax]
c000dbc7:	6a 00                	push   0x0
c000dbc9:	50                   	push   eax
c000dbca:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dbcd:	83 c4 1c             	add    esp,0x1c
c000dbd0:	c3                   	ret    

c000dbd1 <beepThread(void*)>:
c000dbd1:	53                   	push   ebx
c000dbd2:	83 ec 08             	sub    esp,0x8
c000dbd5:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000dbda:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dbde:	48                   	dec    eax
c000dbdf:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c000dbe4:	75 02                	jne    c000dbe8 <beepThread(void*)+0x17>
c000dbe6:	fb                   	sti    
c000dbe7:	90                   	nop
c000dbe8:	83 ec 0c             	sub    esp,0xc
c000dbeb:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000dbf2:	50                   	push   eax
c000dbf3:	e8 20 ae 00 00       	call   c0018a18 <milliTenthSleep(unsigned int)>
c000dbf8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dbfb:	e8 be ff ff ff       	call   c000dbbe <Buzzer::stop()>
c000dc00:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000dc08:	83 c4 18             	add    esp,0x18
c000dc0b:	5b                   	pop    ebx
c000dc0c:	e9 07 ad 00 00       	jmp    c0018918 <blockTask(TaskState)>
c000dc11:	90                   	nop

c000dc12 <Buzzer::beep(int, int, bool)>:
c000dc12:	57                   	push   edi
c000dc13:	56                   	push   esi
c000dc14:	53                   	push   ebx
c000dc15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dc19:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000dc1d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000dc21:	50                   	push   eax
c000dc22:	50                   	push   eax
c000dc23:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc29:	53                   	push   ebx
c000dc2a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dc2d:	83 c4 10             	add    esp,0x10
c000dc30:	89 f8                	mov    eax,edi
c000dc32:	84 c0                	test   al,al
c000dc34:	74 1e                	je     c000dc54 <Buzzer::beep(int, int, bool)+0x42>
c000dc36:	83 ec 0c             	sub    esp,0xc
c000dc39:	6b f6 0a             	imul   esi,esi,0xa
c000dc3c:	56                   	push   esi
c000dc3d:	e8 d6 ad 00 00       	call   c0018a18 <milliTenthSleep(unsigned int)>
c000dc42:	83 c4 10             	add    esp,0x10
c000dc45:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000dc49:	5b                   	pop    ebx
c000dc4a:	5e                   	pop    esi
c000dc4b:	5f                   	pop    edi
c000dc4c:	e9 6d ff ff ff       	jmp    c000dbbe <Buzzer::stop()>
c000dc51:	8d 76 00             	lea    esi,[esi+0x0]
c000dc54:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000dc5a:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000dc5f:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000dc67:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dc6b:	c7 44 24 14 d1 db 00 c0 	mov    DWORD PTR [esp+0x14],0xc000dbd1
c000dc73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc77:	5b                   	pop    ebx
c000dc78:	5e                   	pop    esi
c000dc79:	5f                   	pop    edi
c000dc7a:	e9 85 a8 00 00       	jmp    c0018504 <Process::createThread(void (*)(void*), void*, int)>
c000dc7f:	90                   	nop

c000dc80 <User::loadClockSettings(int)>:
c000dc80:	53                   	push   ebx
c000dc81:	83 ec 14             	sub    esp,0x14
c000dc84:	68 14 01 00 00       	push   0x114
c000dc89:	e8 81 bd ff ff       	call   c0009a0f <malloc>
c000dc8e:	83 c4 0c             	add    esp,0xc
c000dc91:	89 c3                	mov    ebx,eax
c000dc93:	ff 35 90 95 02 c0    	push   DWORD PTR ds:0xc0029590
c000dc99:	68 1c 4b 02 c0       	push   0xc0024b1c
c000dc9e:	50                   	push   eax
c000dc9f:	e8 c6 f5 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c000dca4:	58                   	pop    eax
c000dca5:	5a                   	pop    edx
c000dca6:	6a 01                	push   0x1
c000dca8:	53                   	push   ebx
c000dca9:	e8 7e f6 ff ff       	call   c000d32c <File::open(FileOpenMode)>
c000dcae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dcb1:	e8 d4 f6 ff ff       	call   c000d38a <File::close()>
c000dcb6:	83 c4 10             	add    esp,0x10
c000dcb9:	85 db                	test   ebx,ebx
c000dcbb:	74 0f                	je     c000dccc <User::loadClockSettings(int)+0x4c>
c000dcbd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dcbf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000dcc3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000dcc6:	83 c4 08             	add    esp,0x8
c000dcc9:	5b                   	pop    ebx
c000dcca:	ff e0                	jmp    eax
c000dccc:	83 c4 08             	add    esp,0x8
c000dccf:	5b                   	pop    ebx
c000dcd0:	c3                   	ret    
c000dcd1:	90                   	nop

c000dcd2 <Clock::Clock(char const*)>:
c000dcd2:	83 ec 0c             	sub    esp,0xc
c000dcd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcd9:	83 ec 08             	sub    esp,0x8
c000dcdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dce0:	50                   	push   eax
c000dce1:	e8 5c 07 00 00       	call   c000e442 <Device::Device(char const*)>
c000dce6:	83 c4 10             	add    esp,0x10
c000dce9:	ba 44 4b 02 c0       	mov    edx,0xc0024b44
c000dcee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcf2:	89 10                	mov    DWORD PTR [eax],edx
c000dcf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcf8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000dd02:	90                   	nop
c000dd03:	83 c4 0c             	add    esp,0xc
c000dd06:	c3                   	ret    
c000dd07:	90                   	nop

c000dd08 <Clock::~Clock()>:
c000dd08:	83 ec 0c             	sub    esp,0xc
c000dd0b:	ba 44 4b 02 c0       	mov    edx,0xc0024b44
c000dd10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd14:	89 10                	mov    DWORD PTR [eax],edx
c000dd16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd1a:	83 ec 0c             	sub    esp,0xc
c000dd1d:	50                   	push   eax
c000dd1e:	e8 e9 03 00 00       	call   c000e10c <Device::~Device()>
c000dd23:	83 c4 10             	add    esp,0x10
c000dd26:	90                   	nop
c000dd27:	83 c4 0c             	add    esp,0xc
c000dd2a:	c3                   	ret    
c000dd2b:	90                   	nop

c000dd2c <Clock::~Clock()>:
c000dd2c:	83 ec 0c             	sub    esp,0xc
c000dd2f:	83 ec 0c             	sub    esp,0xc
c000dd32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd36:	e8 cd ff ff ff       	call   c000dd08 <Clock::~Clock()>
c000dd3b:	83 c4 10             	add    esp,0x10
c000dd3e:	83 ec 08             	sub    esp,0x8
c000dd41:	68 58 01 00 00       	push   0x158
c000dd46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd4a:	e8 cf ee ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000dd4f:	83 c4 10             	add    esp,0x10
c000dd52:	83 c4 0c             	add    esp,0xc
c000dd55:	c3                   	ret    

c000dd56 <Clock::timeInSecondsLocal()>:
c000dd56:	53                   	push   ebx
c000dd57:	83 ec 14             	sub    esp,0x14
c000dd5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dd5e:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd60:	50                   	push   eax
c000dd61:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dd64:	0f b6 0d 7c 81 02 c0 	movzx  ecx,BYTE PTR ds:0xc002817c
c000dd6b:	03 0d 80 81 02 c0    	add    ecx,DWORD PTR ds:0xc0028180
c000dd71:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dd77:	89 cb                	mov    ebx,ecx
c000dd79:	c1 fb 1f             	sar    ebx,0x1f
c000dd7c:	01 c8                	add    eax,ecx
c000dd7e:	11 da                	adc    edx,ebx
c000dd80:	83 c4 10             	add    esp,0x10
c000dd83:	31 c9                	xor    ecx,ecx
c000dd85:	80 3d 7d 81 02 c0 00 	cmp    BYTE PTR ds:0xc002817d,0x0
c000dd8c:	74 05                	je     c000dd93 <Clock::timeInSecondsLocal()+0x3d>
c000dd8e:	b9 08 07 00 00       	mov    ecx,0x708
c000dd93:	31 db                	xor    ebx,ebx
c000dd95:	01 c8                	add    eax,ecx
c000dd97:	11 da                	adc    edx,ebx
c000dd99:	83 c4 08             	add    esp,0x8
c000dd9c:	5b                   	pop    ebx
c000dd9d:	c3                   	ret    

c000dd9e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000dd9e:	57                   	push   edi
c000dd9f:	56                   	push   esi
c000dda0:	53                   	push   ebx
c000dda1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dda5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000dda9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ddab:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ddaf:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000ddb2:	0f b6 05 7c 81 02 c0 	movzx  eax,BYTE PTR ds:0xc002817c
c000ddb9:	03 05 80 81 02 c0    	add    eax,DWORD PTR ds:0xc0028180
c000ddbf:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000ddc5:	99                   	cdq    
c000ddc6:	29 c6                	sub    esi,eax
c000ddc8:	19 d7                	sbb    edi,edx
c000ddca:	89 f0                	mov    eax,esi
c000ddcc:	89 fa                	mov    edx,edi
c000ddce:	31 f6                	xor    esi,esi
c000ddd0:	80 3d 7d 81 02 c0 00 	cmp    BYTE PTR ds:0xc002817d,0x0
c000ddd7:	74 05                	je     c000ddde <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000ddd9:	be 08 07 00 00       	mov    esi,0x708
c000ddde:	31 ff                	xor    edi,edi
c000dde0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000dde4:	29 f0                	sub    eax,esi
c000dde6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ddea:	19 fa                	sbb    edx,edi
c000ddec:	89 d8                	mov    eax,ebx
c000ddee:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ddf2:	5b                   	pop    ebx
c000ddf3:	5e                   	pop    esi
c000ddf4:	5f                   	pop    edi
c000ddf5:	ff e0                	jmp    eax

c000ddf7 <datetimeToSeconds(datetime_t)>:
c000ddf7:	55                   	push   ebp
c000ddf8:	57                   	push   edi
c000ddf9:	56                   	push   esi
c000ddfa:	53                   	push   ebx
c000ddfb:	83 ec 14             	sub    esp,0x14
c000ddfe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000de02:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000de06:	89 d3                	mov    ebx,edx
c000de08:	0f b6 c6             	movzx  eax,dh
c000de0b:	c1 eb 10             	shr    ebx,0x10
c000de0e:	48                   	dec    eax
c000de0f:	66 81 eb 6c 07       	sub    bx,0x76c
c000de14:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000de18:	0f b6 f5             	movzx  esi,ch
c000de1b:	89 cf                	mov    edi,ecx
c000de1d:	6b f6 3c             	imul   esi,esi,0x3c
c000de20:	c1 ef 10             	shr    edi,0x10
c000de23:	0f b6 c9             	movzx  ecx,cl
c000de26:	89 f8                	mov    eax,edi
c000de28:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000de2e:	0f b6 f8             	movzx  edi,al
c000de31:	0f b6 d2             	movzx  edx,dl
c000de34:	01 fe                	add    esi,edi
c000de36:	01 f1                	add    ecx,esi
c000de38:	0f b7 f3             	movzx  esi,bx
c000de3b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000de3f:	c1 f9 1f             	sar    ecx,0x1f
c000de42:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000de47:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000de4b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000de50:	8b 0c 8d 80 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb480]
c000de57:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000de5b:	76 29                	jbe    c000de86 <datetimeToSeconds(datetime_t)+0x8f>
c000de5d:	f6 c3 03             	test   bl,0x3
c000de60:	75 24                	jne    c000de86 <datetimeToSeconds(datetime_t)+0x8f>
c000de62:	31 d2                	xor    edx,edx
c000de64:	bf 64 00 00 00       	mov    edi,0x64
c000de69:	89 d8                	mov    eax,ebx
c000de6b:	66 f7 f7             	div    di
c000de6e:	66 85 d2             	test   dx,dx
c000de71:	75 12                	jne    c000de85 <datetimeToSeconds(datetime_t)+0x8e>
c000de73:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000de79:	bf 90 01 00 00       	mov    edi,0x190
c000de7e:	99                   	cdq    
c000de7f:	f7 ff                	idiv   edi
c000de81:	85 d2                	test   edx,edx
c000de83:	75 01                	jne    c000de86 <datetimeToSeconds(datetime_t)+0x8f>
c000de85:	41                   	inc    ecx
c000de86:	66 83 fb 46          	cmp    bx,0x46
c000de8a:	76 45                	jbe    c000ded1 <datetimeToSeconds(datetime_t)+0xda>
c000de8c:	bb 46 00 00 00       	mov    ebx,0x46
c000de91:	bf 64 00 00 00       	mov    edi,0x64
c000de96:	bd 90 01 00 00       	mov    ebp,0x190
c000de9b:	b8 6d 01 00 00       	mov    eax,0x16d
c000dea0:	f6 c3 03             	test   bl,0x3
c000dea3:	75 23                	jne    c000dec8 <datetimeToSeconds(datetime_t)+0xd1>
c000dea5:	89 d8                	mov    eax,ebx
c000dea7:	99                   	cdq    
c000dea8:	f7 ff                	idiv   edi
c000deaa:	b8 6e 01 00 00       	mov    eax,0x16e
c000deaf:	85 d2                	test   edx,edx
c000deb1:	75 15                	jne    c000dec8 <datetimeToSeconds(datetime_t)+0xd1>
c000deb3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000deb9:	99                   	cdq    
c000deba:	f7 fd                	idiv   ebp
c000debc:	83 fa 01             	cmp    edx,0x1
c000debf:	19 c0                	sbb    eax,eax
c000dec1:	f7 d0                	not    eax
c000dec3:	05 6e 01 00 00       	add    eax,0x16e
c000dec8:	01 c1                	add    ecx,eax
c000deca:	43                   	inc    ebx
c000decb:	39 f3                	cmp    ebx,esi
c000decd:	7c cc                	jl     c000de9b <datetimeToSeconds(datetime_t)+0xa4>
c000decf:	eb 35                	jmp    c000df06 <datetimeToSeconds(datetime_t)+0x10f>
c000ded1:	74 33                	je     c000df06 <datetimeToSeconds(datetime_t)+0x10f>
c000ded3:	b8 45 00 00 00       	mov    eax,0x45
c000ded8:	89 c2                	mov    edx,eax
c000deda:	83 e2 03             	and    edx,0x3
c000dedd:	39 f0                	cmp    eax,esi
c000dedf:	7e 0f                	jle    c000def0 <datetimeToSeconds(datetime_t)+0xf9>
c000dee1:	83 fa 01             	cmp    edx,0x1
c000dee4:	19 d2                	sbb    edx,edx
c000dee6:	48                   	dec    eax
c000dee7:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000deee:	eb e8                	jmp    c000ded8 <datetimeToSeconds(datetime_t)+0xe1>
c000def0:	b8 6d 01 00 00       	mov    eax,0x16d
c000def5:	85 d2                	test   edx,edx
c000def7:	75 0b                	jne    c000df04 <datetimeToSeconds(datetime_t)+0x10d>
c000def9:	66 83 fb 01          	cmp    bx,0x1
c000defd:	19 c0                	sbb    eax,eax
c000deff:	05 6e 01 00 00       	add    eax,0x16e
c000df04:	29 c1                	sub    ecx,eax
c000df06:	b8 80 51 01 00       	mov    eax,0x15180
c000df0b:	f7 e9                	imul   ecx
c000df0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000df11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000df15:	83 c4 14             	add    esp,0x14
c000df18:	5b                   	pop    ebx
c000df19:	5e                   	pop    esi
c000df1a:	5f                   	pop    edi
c000df1b:	5d                   	pop    ebp
c000df1c:	c3                   	ret    
c000df1d:	90                   	nop

c000df1e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000df1e:	57                   	push   edi
c000df1f:	56                   	push   esi
c000df20:	53                   	push   ebx
c000df21:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df25:	8b 06                	mov    eax,DWORD PTR [esi]
c000df27:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000df2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df32:	e8 c0 fe ff ff       	call   c000ddf7 <datetimeToSeconds(datetime_t)>
c000df37:	59                   	pop    ecx
c000df38:	0f b6 0d 7c 81 02 c0 	movzx  ecx,BYTE PTR ds:0xc002817c
c000df3f:	5b                   	pop    ebx
c000df40:	03 0d 80 81 02 c0    	add    ecx,DWORD PTR ds:0xc0028180
c000df46:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000df4c:	89 cb                	mov    ebx,ecx
c000df4e:	c1 fb 1f             	sar    ebx,0x1f
c000df51:	29 c8                	sub    eax,ecx
c000df53:	19 da                	sbb    edx,ebx
c000df55:	31 c9                	xor    ecx,ecx
c000df57:	80 3d 7d 81 02 c0 00 	cmp    BYTE PTR ds:0xc002817d,0x0
c000df5e:	74 05                	je     c000df65 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000df60:	b9 08 07 00 00       	mov    ecx,0x708
c000df65:	31 db                	xor    ebx,ebx
c000df67:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000df6b:	29 c8                	sub    eax,ecx
c000df6d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df71:	19 da                	sbb    edx,ebx
c000df73:	89 f8                	mov    eax,edi
c000df75:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df79:	5b                   	pop    ebx
c000df7a:	5e                   	pop    esi
c000df7b:	5f                   	pop    edi
c000df7c:	ff e0                	jmp    eax

c000df7e <secondsToDatetime(unsigned long long)>:
c000df7e:	55                   	push   ebp
c000df7f:	57                   	push   edi
c000df80:	56                   	push   esi
c000df81:	53                   	push   ebx
c000df82:	83 ec 1c             	sub    esp,0x1c
c000df85:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000df89:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000df8d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000df91:	6a 00                	push   0x0
c000df93:	68 80 51 01 00       	push   0x15180
c000df98:	55                   	push   ebp
c000df99:	57                   	push   edi
c000df9a:	e8 e5 47 01 00       	call   c0022784 <__udivdi3>
c000df9f:	83 c4 10             	add    esp,0x10
c000dfa2:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000dfa8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfac:	6a 00                	push   0x0
c000dfae:	68 80 51 01 00       	push   0x15180
c000dfb3:	55                   	push   ebp
c000dfb4:	57                   	push   edi
c000dfb5:	bf 10 0e 00 00       	mov    edi,0xe10
c000dfba:	e8 c5 48 01 00       	call   c0022884 <__umoddi3>
c000dfbf:	83 c4 10             	add    esp,0x10
c000dfc2:	99                   	cdq    
c000dfc3:	f7 ff                	idiv   edi
c000dfc5:	bf 3c 00 00 00       	mov    edi,0x3c
c000dfca:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000dfcd:	89 d0                	mov    eax,edx
c000dfcf:	99                   	cdq    
c000dfd0:	f7 ff                	idiv   edi
c000dfd2:	85 db                	test   ebx,ebx
c000dfd4:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000dfd7:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000dfda:	79 11                	jns    c000dfed <secondsToDatetime(unsigned long long)+0x6f>
c000dfdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dfe0:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000dfe6:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dfeb:	eb 07                	jmp    c000dff4 <secondsToDatetime(unsigned long long)+0x76>
c000dfed:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dff2:	89 d8                	mov    eax,ebx
c000dff4:	bf b4 05 00 00       	mov    edi,0x5b4
c000dff9:	99                   	cdq    
c000dffa:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000dfff:	f7 f9                	idiv   ecx
c000e001:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000e006:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e00a:	31 d2                	xor    edx,edx
c000e00c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000e014:	01 c3                	add    ebx,eax
c000e016:	89 d8                	mov    eax,ebx
c000e018:	f7 f1                	div    ecx
c000e01a:	31 d2                	xor    edx,edx
c000e01c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000e01f:	89 d8                	mov    eax,ebx
c000e021:	f7 f7                	div    edi
c000e023:	31 d2                	xor    edx,edx
c000e025:	29 c1                	sub    ecx,eax
c000e027:	89 d8                	mov    eax,ebx
c000e029:	f7 f5                	div    ebp
c000e02b:	bd 6d 01 00 00       	mov    ebp,0x16d
c000e030:	29 c1                	sub    ecx,eax
c000e032:	31 d2                	xor    edx,edx
c000e034:	89 c8                	mov    eax,ecx
c000e036:	f7 f5                	div    ebp
c000e038:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000e03d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e041:	31 d2                	xor    edx,edx
c000e043:	89 c8                	mov    eax,ecx
c000e045:	f7 f5                	div    ebp
c000e047:	31 d2                	xor    edx,edx
c000e049:	01 c3                	add    ebx,eax
c000e04b:	89 c8                	mov    eax,ecx
c000e04d:	f7 f7                	div    edi
c000e04f:	bf 99 00 00 00       	mov    edi,0x99
c000e054:	29 c3                	sub    ebx,eax
c000e056:	31 d2                	xor    edx,edx
c000e058:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000e060:	29 c3                	sub    ebx,eax
c000e062:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000e065:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000e068:	bb 05 00 00 00       	mov    ebx,0x5
c000e06d:	83 c1 02             	add    ecx,0x2
c000e070:	89 c8                	mov    eax,ecx
c000e072:	f7 f7                	div    edi
c000e074:	31 d2                	xor    edx,edx
c000e076:	89 c7                	mov    edi,eax
c000e078:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000e07e:	83 c0 02             	add    eax,0x2
c000e081:	f7 f3                	div    ebx
c000e083:	89 eb                	mov    ebx,ebp
c000e085:	29 c3                	sub    ebx,eax
c000e087:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000e08d:	88 1e                	mov    BYTE PTR [esi],bl
c000e08f:	19 c0                	sbb    eax,eax
c000e091:	31 d2                	xor    edx,edx
c000e093:	83 e0 0c             	and    eax,0xc
c000e096:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000e09a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000e0a2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e0a6:	83 f9 01             	cmp    ecx,0x1
c000e0a9:	0f 96 c2             	setbe  dl
c000e0ac:	41                   	inc    ecx
c000e0ad:	01 d0                	add    eax,edx
c000e0af:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000e0b2:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000e0b6:	83 c4 1c             	add    esp,0x1c
c000e0b9:	89 f0                	mov    eax,esi
c000e0bb:	5b                   	pop    ebx
c000e0bc:	5e                   	pop    esi
c000e0bd:	5f                   	pop    edi
c000e0be:	5d                   	pop    ebp
c000e0bf:	c2 04 00             	ret    0x4

c000e0c2 <Clock::timeInDatetimeLocal()>:
c000e0c2:	53                   	push   ebx
c000e0c3:	83 ec 14             	sub    esp,0x14
c000e0c6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e0ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e0ce:	e8 83 fc ff ff       	call   c000dd56 <Clock::timeInSecondsLocal()>
c000e0d3:	83 c4 0c             	add    esp,0xc
c000e0d6:	52                   	push   edx
c000e0d7:	50                   	push   eax
c000e0d8:	53                   	push   ebx
c000e0d9:	e8 a0 fe ff ff       	call   c000df7e <secondsToDatetime(unsigned long long)>
c000e0de:	89 d8                	mov    eax,ebx
c000e0e0:	83 c4 14             	add    esp,0x14
c000e0e3:	5b                   	pop    ebx
c000e0e4:	c2 04 00             	ret    0x4
c000e0e7:	90                   	nop

c000e0e8 <Device::hibernate()>:
c000e0e8:	c3                   	ret    
c000e0e9:	90                   	nop

c000e0ea <Device::wake()>:
c000e0ea:	c3                   	ret    
c000e0eb:	90                   	nop

c000e0ec <Device::detect()>:
c000e0ec:	c3                   	ret    
c000e0ed:	90                   	nop

c000e0ee <Device::disableLegacy()>:
c000e0ee:	c3                   	ret    
c000e0ef:	90                   	nop

c000e0f0 <Device::powerSaving(PowerSavingLevel)>:
c000e0f0:	c3                   	ret    
c000e0f1:	90                   	nop

c000e0f2 <DriverlessDevice::close(int, int, void*)>:
c000e0f2:	31 c0                	xor    eax,eax
c000e0f4:	c3                   	ret    
c000e0f5:	90                   	nop

c000e0f6 <DriverlessDevice::detect()>:
c000e0f6:	c3                   	ret    
c000e0f7:	90                   	nop

c000e0f8 <DriverlessDevice::open(int, int, void*)>:
c000e0f8:	83 ec 18             	sub    esp,0x18
c000e0fb:	68 b0 4b 02 c0       	push   0xc0024bb0
c000e100:	e8 b6 68 00 00       	call   c00149bb <Krnl::panic(char const*)>
c000e105:	83 c8 ff             	or     eax,0xffffffff
c000e108:	83 c4 1c             	add    esp,0x1c
c000e10b:	c3                   	ret    

c000e10c <Device::~Device()>:
c000e10c:	ba 10 4c 02 c0       	mov    edx,0xc0024c10
c000e111:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e115:	89 10                	mov    DWORD PTR [eax],edx
c000e117:	90                   	nop
c000e118:	c3                   	ret    
c000e119:	90                   	nop

c000e11a <Device::~Device()>:
c000e11a:	83 ec 0c             	sub    esp,0xc
c000e11d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e121:	e8 e6 ff ff ff       	call   c000e10c <Device::~Device()>
c000e126:	83 c4 04             	add    esp,0x4
c000e129:	83 ec 08             	sub    esp,0x8
c000e12c:	68 58 01 00 00       	push   0x158
c000e131:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e135:	e8 e4 ea ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000e13a:	83 c4 10             	add    esp,0x10
c000e13d:	83 c4 0c             	add    esp,0xc
c000e140:	c3                   	ret    
c000e141:	90                   	nop

c000e142 <Device::findAndLoadDriver()>:
c000e142:	c7 44 24 04 ce 4b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024bce
c000e14a:	e9 b0 eb ff ff       	jmp    c000ccff <Dbg::kprintf(char const*, ...)>
c000e14f:	90                   	nop

c000e150 <Device::preOpenPCI(PCIDeviceInfo)>:
c000e150:	57                   	push   edi
c000e151:	b9 09 00 00 00       	mov    ecx,0x9
c000e156:	56                   	push   esi
c000e157:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e15b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e15f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e169:	81 c7 18 01 00 00    	add    edi,0x118
c000e16f:	fc                   	cld    
c000e170:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e172:	5e                   	pop    esi
c000e173:	5f                   	pop    edi
c000e174:	c3                   	ret    
c000e175:	90                   	nop

c000e176 <Device::preOpenACPI(void*, char*, char*)>:
c000e176:	57                   	push   edi
c000e177:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e17c:	56                   	push   esi
c000e17d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e181:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e185:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e18f:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e195:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e19b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e19f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e1a1:	b9 0e 00 00 00       	mov    ecx,0xe
c000e1a6:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e1ac:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e1b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e1b2:	5e                   	pop    esi
c000e1b3:	5f                   	pop    edi
c000e1b4:	c3                   	ret    
c000e1b5:	90                   	nop

c000e1b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e1b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1ba:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e1bf:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e1c6:	75 0b                	jne    c000e1d3 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000e1c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000e1ca:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e1ce:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e1d1:	eb 1e                	jmp    c000e1f1 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000e1d3:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c000e1d8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e1de:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e1e4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e1e6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e1ea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e1ee:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000e1f1:	ff e0                	jmp    eax
c000e1f3:	90                   	nop

c000e1f4 <Device::getParent()>:
c000e1f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1f8:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e1fe:	c3                   	ret    
c000e1ff:	90                   	nop

c000e200 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e204:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e209:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e210:	75 0b                	jne    c000e21d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e212:	8b 00                	mov    eax,DWORD PTR [eax]
c000e214:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e218:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e21b:	eb 1e                	jmp    c000e23b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000e21d:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c000e222:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e228:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e22e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e230:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e234:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e238:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000e23b:	ff e0                	jmp    eax
c000e23d:	90                   	nop

c000e23e <Device::addChild(Device*)>:
c000e23e:	53                   	push   ebx
c000e23f:	83 ec 08             	sub    esp,0x8
c000e242:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e246:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e24a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e250:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e256:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e258:	85 d2                	test   edx,edx
c000e25a:	74 04                	je     c000e260 <Device::addChild(Device*)+0x22>
c000e25c:	89 d3                	mov    ebx,edx
c000e25e:	eb f6                	jmp    c000e256 <Device::addChild(Device*)+0x18>
c000e260:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e263:	83 ec 0c             	sub    esp,0xc
c000e266:	6a 08                	push   0x8
c000e268:	e8 a2 b7 ff ff       	call   c0009a0f <malloc>
c000e26d:	89 03                	mov    DWORD PTR [ebx],eax
c000e26f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e275:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e27c:	83 c4 18             	add    esp,0x18
c000e27f:	5b                   	pop    ebx
c000e280:	c3                   	ret    
c000e281:	90                   	nop

c000e282 <Device::removeAllChildren()>:
c000e282:	56                   	push   esi
c000e283:	53                   	push   ebx
c000e284:	52                   	push   edx
c000e285:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e289:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e28f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e292:	74 17                	je     c000e2ab <Device::removeAllChildren()+0x29>
c000e294:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e297:	85 c0                	test   eax,eax
c000e299:	74 0c                	je     c000e2a7 <Device::removeAllChildren()+0x25>
c000e29b:	83 ec 0c             	sub    esp,0xc
c000e29e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2a0:	50                   	push   eax
c000e2a1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e2a4:	83 c4 10             	add    esp,0x10
c000e2a7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e2a9:	eb e4                	jmp    c000e28f <Device::removeAllChildren()+0xd>
c000e2ab:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e2b1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e2b7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e2bd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e2c4:	58                   	pop    eax
c000e2c5:	5b                   	pop    ebx
c000e2c6:	5e                   	pop    esi
c000e2c7:	c3                   	ret    

c000e2c8 <Device::hibernateAll()>:
c000e2c8:	53                   	push   ebx
c000e2c9:	83 ec 14             	sub    esp,0x14
c000e2cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e2d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e2d2:	53                   	push   ebx
c000e2d3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e2d6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e2dc:	83 c4 10             	add    esp,0x10
c000e2df:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e2e2:	74 0f                	je     c000e2f3 <Device::hibernateAll()+0x2b>
c000e2e4:	83 ec 0c             	sub    esp,0xc
c000e2e7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e2ea:	e8 d9 ff ff ff       	call   c000e2c8 <Device::hibernateAll()>
c000e2ef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e2f1:	eb e9                	jmp    c000e2dc <Device::hibernateAll()+0x14>
c000e2f3:	83 c4 08             	add    esp,0x8
c000e2f6:	5b                   	pop    ebx
c000e2f7:	c3                   	ret    

c000e2f8 <Device::wakeAll()>:
c000e2f8:	53                   	push   ebx
c000e2f9:	83 ec 14             	sub    esp,0x14
c000e2fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e300:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e302:	53                   	push   ebx
c000e303:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e306:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e30c:	83 c4 10             	add    esp,0x10
c000e30f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e312:	74 0f                	je     c000e323 <Device::wakeAll()+0x2b>
c000e314:	83 ec 0c             	sub    esp,0xc
c000e317:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e31a:	e8 d9 ff ff ff       	call   c000e2f8 <Device::wakeAll()>
c000e31f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e321:	eb e9                	jmp    c000e30c <Device::wakeAll()+0x14>
c000e323:	83 c4 08             	add    esp,0x8
c000e326:	5b                   	pop    ebx
c000e327:	c3                   	ret    

c000e328 <Device::detectAll()>:
c000e328:	53                   	push   ebx
c000e329:	83 ec 14             	sub    esp,0x14
c000e32c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e330:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e332:	53                   	push   ebx
c000e333:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e336:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e33c:	83 c4 10             	add    esp,0x10
c000e33f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e342:	74 0f                	je     c000e353 <Device::detectAll()+0x2b>
c000e344:	83 ec 0c             	sub    esp,0xc
c000e347:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e34a:	e8 d9 ff ff ff       	call   c000e328 <Device::detectAll()>
c000e34f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e351:	eb e9                	jmp    c000e33c <Device::detectAll()+0x14>
c000e353:	83 c4 08             	add    esp,0x8
c000e356:	5b                   	pop    ebx
c000e357:	c3                   	ret    

c000e358 <Device::disableLegacyAll()>:
c000e358:	53                   	push   ebx
c000e359:	83 ec 14             	sub    esp,0x14
c000e35c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e360:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e362:	53                   	push   ebx
c000e363:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e366:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e36c:	83 c4 10             	add    esp,0x10
c000e36f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e372:	74 0f                	je     c000e383 <Device::disableLegacyAll()+0x2b>
c000e374:	83 ec 0c             	sub    esp,0xc
c000e377:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e37a:	e8 d9 ff ff ff       	call   c000e358 <Device::disableLegacyAll()>
c000e37f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e381:	eb e9                	jmp    c000e36c <Device::disableLegacyAll()+0x14>
c000e383:	83 c4 08             	add    esp,0x8
c000e386:	5b                   	pop    ebx
c000e387:	c3                   	ret    

c000e388 <Device::loadDriversForAll()>:
c000e388:	53                   	push   ebx
c000e389:	83 ec 08             	sub    esp,0x8
c000e38c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e390:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e397:	75 0c                	jne    c000e3a5 <Device::loadDriversForAll()+0x1d>
c000e399:	83 ec 0c             	sub    esp,0xc
c000e39c:	53                   	push   ebx
c000e39d:	e8 a0 fd ff ff       	call   c000e142 <Device::findAndLoadDriver()>
c000e3a2:	83 c4 10             	add    esp,0x10
c000e3a5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e3ab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e3ae:	74 12                	je     c000e3c2 <Device::loadDriversForAll()+0x3a>
c000e3b0:	83 ec 0c             	sub    esp,0xc
c000e3b3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e3b6:	e8 cd ff ff ff       	call   c000e388 <Device::loadDriversForAll()>
c000e3bb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e3bd:	83 c4 10             	add    esp,0x10
c000e3c0:	eb e9                	jmp    c000e3ab <Device::loadDriversForAll()+0x23>
c000e3c2:	83 c4 08             	add    esp,0x8
c000e3c5:	5b                   	pop    ebx
c000e3c6:	c3                   	ret    
c000e3c7:	90                   	nop

c000e3c8 <Device::closeAll()>:
c000e3c8:	53                   	push   ebx
c000e3c9:	83 ec 08             	sub    esp,0x8
c000e3cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e3d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e3d2:	6a 00                	push   0x0
c000e3d4:	6a 00                	push   0x0
c000e3d6:	6a 00                	push   0x0
c000e3d8:	53                   	push   ebx
c000e3d9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e3dc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e3e2:	83 c4 10             	add    esp,0x10
c000e3e5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e3e8:	74 0f                	je     c000e3f9 <Device::closeAll()+0x31>
c000e3ea:	83 ec 0c             	sub    esp,0xc
c000e3ed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e3f0:	e8 d3 ff ff ff       	call   c000e3c8 <Device::closeAll()>
c000e3f5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e3f7:	eb e9                	jmp    c000e3e2 <Device::closeAll()+0x1a>
c000e3f9:	83 c4 08             	add    esp,0x8
c000e3fc:	5b                   	pop    ebx
c000e3fd:	c3                   	ret    

c000e3fe <Device::powerSavingAll(PowerSavingLevel)>:
c000e3fe:	56                   	push   esi
c000e3ff:	53                   	push   ebx
c000e400:	83 ec 0c             	sub    esp,0xc
c000e403:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e407:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e40b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e40d:	56                   	push   esi
c000e40e:	53                   	push   ebx
c000e40f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e412:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e418:	83 c4 10             	add    esp,0x10
c000e41b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e41e:	74 0f                	je     c000e42f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e420:	52                   	push   edx
c000e421:	52                   	push   edx
c000e422:	56                   	push   esi
c000e423:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e426:	e8 d3 ff ff ff       	call   c000e3fe <Device::powerSavingAll(PowerSavingLevel)>
c000e42b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e42d:	eb e9                	jmp    c000e418 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e42f:	58                   	pop    eax
c000e430:	5b                   	pop    ebx
c000e431:	5e                   	pop    esi
c000e432:	c3                   	ret    
c000e433:	90                   	nop

c000e434 <Device::setName(char const*)>:
c000e434:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e43c:	e9 ff 22 ff ff       	jmp    c0000740 <strcpy>
c000e441:	90                   	nop

c000e442 <Device::Device(char const*)>:
c000e442:	83 ec 1c             	sub    esp,0x1c
c000e445:	ba 10 4c 02 c0       	mov    edx,0xc0024c10
c000e44a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e44e:	89 10                	mov    DWORD PTR [eax],edx
c000e450:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e454:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e45e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e462:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e46c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e470:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e47a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e47e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e488:	83 ec 08             	sub    esp,0x8
c000e48b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e48f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e493:	e8 9c ff ff ff       	call   c000e434 <Device::setName(char const*)>
c000e498:	83 c4 10             	add    esp,0x10
c000e49b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e4a3:	83 ec 0c             	sub    esp,0xc
c000e4a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e4aa:	e8 60 b5 ff ff       	call   c0009a0f <malloc>
c000e4af:	83 c4 10             	add    esp,0x10
c000e4b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e4b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4bf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e4c3:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e4c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4cd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e4d3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e4d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4dd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e4e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4ee:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e4f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4f9:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e500:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e504:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e50e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e512:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e51c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e520:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e52a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e52e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e538:	90                   	nop
c000e539:	83 c4 1c             	add    esp,0x1c
c000e53c:	c3                   	ret    
c000e53d:	90                   	nop

c000e53e <Device::getName()>:
c000e53e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e542:	05 d0 00 00 00       	add    eax,0xd0
c000e547:	c3                   	ret    

c000e548 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e548:	83 ec 0c             	sub    esp,0xc
c000e54b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e54f:	83 ec 08             	sub    esp,0x8
c000e552:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e556:	50                   	push   eax
c000e557:	e8 e6 fe ff ff       	call   c000e442 <Device::Device(char const*)>
c000e55c:	83 c4 10             	add    esp,0x10
c000e55f:	ba 3c 4c 02 c0       	mov    edx,0xc0024c3c
c000e564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e568:	89 10                	mov    DWORD PTR [eax],edx
c000e56a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e56e:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e578:	90                   	nop
c000e579:	83 c4 0c             	add    esp,0xc
c000e57c:	c3                   	ret    
c000e57d:	90                   	nop

c000e57e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e57e:	57                   	push   edi
c000e57f:	56                   	push   esi
c000e580:	53                   	push   ebx
c000e581:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e585:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e589:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e58d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e593:	75 0c                	jne    c000e5a1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e595:	52                   	push   edx
c000e596:	52                   	push   edx
c000e597:	53                   	push   ebx
c000e598:	56                   	push   esi
c000e599:	e8 98 46 01 00       	call   c0022c36 <LinkedList<Device>::addElement(Device*)>
c000e59e:	83 c4 10             	add    esp,0x10
c000e5a1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e5a7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e5aa:	74 12                	je     c000e5be <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e5ac:	50                   	push   eax
c000e5ad:	57                   	push   edi
c000e5ae:	56                   	push   esi
c000e5af:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e5b2:	e8 c7 ff ff ff       	call   c000e57e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e5b7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e5b9:	83 c4 10             	add    esp,0x10
c000e5bc:	eb e9                	jmp    c000e5a7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e5be:	5b                   	pop    ebx
c000e5bf:	5e                   	pop    esi
c000e5c0:	5f                   	pop    edi
c000e5c1:	c3                   	ret    

c000e5c2 <getDevicesOfType(DeviceType)>:
c000e5c2:	53                   	push   ebx
c000e5c3:	83 ec 14             	sub    esp,0x14
c000e5c6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e5ca:	53                   	push   ebx
c000e5cb:	e8 42 47 01 00       	call   c0022d12 <LinkedList<Device>::LinkedList()>
c000e5d0:	83 c4 0c             	add    esp,0xc
c000e5d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e5d7:	53                   	push   ebx
c000e5d8:	ff 35 48 80 02 c0    	push   DWORD PTR ds:0xc0028048
c000e5de:	e8 9b ff ff ff       	call   c000e57e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e5e3:	89 d8                	mov    eax,ebx
c000e5e5:	83 c4 18             	add    esp,0x18
c000e5e8:	5b                   	pop    ebx
c000e5e9:	c2 04 00             	ret    0x4

c000e5ec <HardDiskController::HardDiskController(char const*)>:
c000e5ec:	83 ec 0c             	sub    esp,0xc
c000e5ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5f3:	83 ec 08             	sub    esp,0x8
c000e5f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5fa:	50                   	push   eax
c000e5fb:	e8 42 fe ff ff       	call   c000e442 <Device::Device(char const*)>
c000e600:	83 c4 10             	add    esp,0x10
c000e603:	ba 68 4c 02 c0       	mov    edx,0xc0024c68
c000e608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e60c:	89 10                	mov    DWORD PTR [eax],edx
c000e60e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e612:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e61c:	90                   	nop
c000e61d:	83 c4 0c             	add    esp,0xc
c000e620:	c3                   	ret    
c000e621:	90                   	nop
c000e622:	66 90                	xchg   ax,ax

c000e624 <HardDiskController::~HardDiskController()>:
c000e624:	83 ec 0c             	sub    esp,0xc
c000e627:	ba 68 4c 02 c0       	mov    edx,0xc0024c68
c000e62c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e630:	89 10                	mov    DWORD PTR [eax],edx
c000e632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e636:	83 ec 0c             	sub    esp,0xc
c000e639:	50                   	push   eax
c000e63a:	e8 cd fa ff ff       	call   c000e10c <Device::~Device()>
c000e63f:	83 c4 10             	add    esp,0x10
c000e642:	90                   	nop
c000e643:	83 c4 0c             	add    esp,0xc
c000e646:	c3                   	ret    
c000e647:	90                   	nop

c000e648 <HardDiskController::~HardDiskController()>:
c000e648:	83 ec 0c             	sub    esp,0xc
c000e64b:	83 ec 0c             	sub    esp,0xc
c000e64e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e652:	e8 cd ff ff ff       	call   c000e624 <HardDiskController::~HardDiskController()>
c000e657:	83 c4 10             	add    esp,0x10
c000e65a:	83 ec 08             	sub    esp,0x8
c000e65d:	68 58 01 00 00       	push   0x158
c000e662:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e666:	e8 b3 e5 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000e66b:	83 c4 10             	add    esp,0x10
c000e66e:	83 c4 0c             	add    esp,0xc
c000e671:	c3                   	ret    

c000e672 <PhysicalDisk::eject()>:
c000e672:	83 c8 ff             	or     eax,0xffffffff
c000e675:	c3                   	ret    

c000e676 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e676:	83 ec 0c             	sub    esp,0xc
c000e679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e67d:	83 ec 08             	sub    esp,0x8
c000e680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e684:	50                   	push   eax
c000e685:	e8 b8 fd ff ff       	call   c000e442 <Device::Device(char const*)>
c000e68a:	83 c4 10             	add    esp,0x10
c000e68d:	ba 94 4c 02 c0       	mov    edx,0xc0024c94
c000e692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e696:	89 10                	mov    DWORD PTR [eax],edx
c000e698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e69c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e6a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6a7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e6ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6b2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e6bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6c4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6ce:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e6d8:	90                   	nop
c000e6d9:	83 c4 0c             	add    esp,0xc
c000e6dc:	c3                   	ret    
c000e6dd:	90                   	nop

c000e6de <PhysicalDisk::startCache()>:
c000e6de:	56                   	push   esi
c000e6df:	53                   	push   ebx
c000e6e0:	83 ec 10             	sub    esp,0x10
c000e6e3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e6e7:	6a 44                	push   0x44
c000e6e9:	e8 21 b3 ff ff       	call   c0009a0f <malloc>
c000e6ee:	89 c6                	mov    esi,eax
c000e6f0:	58                   	pop    eax
c000e6f1:	5a                   	pop    edx
c000e6f2:	53                   	push   ebx
c000e6f3:	56                   	push   esi
c000e6f4:	e8 67 26 00 00       	call   c0010d60 <VCache::VCache(PhysicalDisk*)>
c000e6f9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e6ff:	83 c4 14             	add    esp,0x14
c000e702:	5b                   	pop    ebx
c000e703:	5e                   	pop    esi
c000e704:	c3                   	ret    
c000e705:	90                   	nop

c000e706 <PhysicalDisk::~PhysicalDisk()>:
c000e706:	83 ec 0c             	sub    esp,0xc
c000e709:	ba 94 4c 02 c0       	mov    edx,0xc0024c94
c000e70e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e712:	89 10                	mov    DWORD PTR [eax],edx
c000e714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e718:	83 ec 0c             	sub    esp,0xc
c000e71b:	50                   	push   eax
c000e71c:	e8 eb f9 ff ff       	call   c000e10c <Device::~Device()>
c000e721:	83 c4 10             	add    esp,0x10
c000e724:	90                   	nop
c000e725:	83 c4 0c             	add    esp,0xc
c000e728:	c3                   	ret    
c000e729:	90                   	nop

c000e72a <PhysicalDisk::~PhysicalDisk()>:
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	83 ec 0c             	sub    esp,0xc
c000e730:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e734:	e8 cd ff ff ff       	call   c000e706 <PhysicalDisk::~PhysicalDisk()>
c000e739:	83 c4 10             	add    esp,0x10
c000e73c:	83 ec 08             	sub    esp,0x8
c000e73f:	68 6c 01 00 00       	push   0x16c
c000e744:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e748:	e8 d1 e4 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000e74d:	83 c4 10             	add    esp,0x10
c000e750:	83 c4 0c             	add    esp,0xc
c000e753:	c3                   	ret    

c000e754 <FPU::FPU(char const*)>:
c000e754:	83 ec 0c             	sub    esp,0xc
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	83 ec 08             	sub    esp,0x8
c000e75e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e762:	50                   	push   eax
c000e763:	e8 da fc ff ff       	call   c000e442 <Device::Device(char const*)>
c000e768:	83 c4 10             	add    esp,0x10
c000e76b:	ba d8 4c 02 c0       	mov    edx,0xc0024cd8
c000e770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e774:	89 10                	mov    DWORD PTR [eax],edx
c000e776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e784:	90                   	nop
c000e785:	83 c4 0c             	add    esp,0xc
c000e788:	c3                   	ret    
c000e789:	90                   	nop
c000e78a:	66 90                	xchg   ax,ax

c000e78c <FPU::~FPU()>:
c000e78c:	83 ec 0c             	sub    esp,0xc
c000e78f:	ba d8 4c 02 c0       	mov    edx,0xc0024cd8
c000e794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e798:	89 10                	mov    DWORD PTR [eax],edx
c000e79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79e:	83 ec 0c             	sub    esp,0xc
c000e7a1:	50                   	push   eax
c000e7a2:	e8 65 f9 ff ff       	call   c000e10c <Device::~Device()>
c000e7a7:	83 c4 10             	add    esp,0x10
c000e7aa:	90                   	nop
c000e7ab:	83 c4 0c             	add    esp,0xc
c000e7ae:	c3                   	ret    
c000e7af:	90                   	nop

c000e7b0 <FPU::~FPU()>:
c000e7b0:	83 ec 0c             	sub    esp,0xc
c000e7b3:	83 ec 0c             	sub    esp,0xc
c000e7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ba:	e8 cd ff ff ff       	call   c000e78c <FPU::~FPU()>
c000e7bf:	83 c4 10             	add    esp,0x10
c000e7c2:	83 ec 08             	sub    esp,0x8
c000e7c5:	68 58 01 00 00       	push   0x158
c000e7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ce:	e8 4b e4 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000e7d3:	83 c4 10             	add    esp,0x10
c000e7d6:	83 c4 0c             	add    esp,0xc
c000e7d9:	c3                   	ret    

c000e7da <setupFPU()>:
c000e7da:	53                   	push   ebx
c000e7db:	83 ec 08             	sub    esp,0x8
c000e7de:	8b 15 48 80 02 c0    	mov    edx,DWORD PTR ds:0xc0028048
c000e7e4:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000e7eb:	74 1b                	je     c000e808 <setupFPU()+0x2e>
c000e7ed:	83 ec 0c             	sub    esp,0xc
c000e7f0:	68 58 01 00 00       	push   0x158
c000e7f5:	e8 15 b2 ff ff       	call   c0009a0f <malloc>
c000e7fa:	89 c3                	mov    ebx,eax
c000e7fc:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7ff:	e8 0c 2b 01 00       	call   c0021310 <AVX::AVX()>
c000e804:	eb 62                	jmp    c000e868 <setupFPU()+0x8e>
c000e806:	66 90                	xchg   ax,ax
c000e808:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000e80e:	84 c0                	test   al,al
c000e810:	79 1a                	jns    c000e82c <setupFPU()+0x52>
c000e812:	83 ec 0c             	sub    esp,0xc
c000e815:	68 58 01 00 00       	push   0x158
c000e81a:	e8 f0 b1 ff ff       	call   c0009a0f <malloc>
c000e81f:	89 c3                	mov    ebx,eax
c000e821:	89 04 24             	mov    DWORD PTR [esp],eax
c000e824:	e8 17 2c 01 00       	call   c0021440 <SSE::SSE()>
c000e829:	eb 3d                	jmp    c000e868 <setupFPU()+0x8e>
c000e82b:	90                   	nop
c000e82c:	a8 20                	test   al,0x20
c000e82e:	74 1c                	je     c000e84c <setupFPU()+0x72>
c000e830:	83 ec 0c             	sub    esp,0xc
c000e833:	68 58 01 00 00       	push   0x158
c000e838:	e8 d2 b1 ff ff       	call   c0009a0f <malloc>
c000e83d:	89 c3                	mov    ebx,eax
c000e83f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e842:	e8 5d 2b 01 00       	call   c00213a4 <MMX::MMX()>
c000e847:	eb 1f                	jmp    c000e868 <setupFPU()+0x8e>
c000e849:	8d 76 00             	lea    esi,[esi+0x0]
c000e84c:	a8 10                	test   al,0x10
c000e84e:	74 20                	je     c000e870 <setupFPU()+0x96>
c000e850:	83 ec 0c             	sub    esp,0xc
c000e853:	68 58 01 00 00       	push   0x158
c000e858:	e8 b2 b1 ff ff       	call   c0009a0f <malloc>
c000e85d:	89 c3                	mov    ebx,eax
c000e85f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e862:	e8 6d 2c 01 00       	call   c00214d4 <x87::x87()>
c000e867:	90                   	nop
c000e868:	83 c4 10             	add    esp,0x10
c000e86b:	eb 27                	jmp    c000e894 <setupFPU()+0xba>
c000e86d:	8d 76 00             	lea    esi,[esi+0x0]
c000e870:	83 e0 ef             	and    eax,0xffffffef
c000e873:	83 ec 0c             	sub    esp,0xc
c000e876:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000e87c:	68 c4 4c 02 c0       	push   0xc0024cc4
c000e881:	e8 79 e4 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000e886:	0f 20 c0             	mov    eax,cr0
c000e889:	83 c8 04             	or     eax,0x4
c000e88c:	0f 22 c0             	mov    cr0,eax
c000e88f:	31 db                	xor    ebx,ebx
c000e891:	83 c4 10             	add    esp,0x10
c000e894:	89 d8                	mov    eax,ebx
c000e896:	83 c4 08             	add    esp,0x8
c000e899:	5b                   	pop    ebx
c000e89a:	c3                   	ret    
c000e89b:	90                   	nop

c000e89c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e89c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e8a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e8a4:	c1 e0 04             	shl    eax,0x4
c000e8a7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e8ab:	8d 50 10             	lea    edx,[eax+0x10]
c000e8ae:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e8b4:	74 08                	je     c000e8be <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e8b6:	83 c0 04             	add    eax,0x4
c000e8b9:	39 d0                	cmp    eax,edx
c000e8bb:	75 f1                	jne    c000e8ae <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e8bd:	c3                   	ret    
c000e8be:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e8c8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e8d2:	eb e2                	jmp    c000e8b6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e8d4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e8d4:	57                   	push   edi
c000e8d5:	31 c0                	xor    eax,eax
c000e8d7:	56                   	push   esi
c000e8d8:	53                   	push   ebx
c000e8d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8dd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e8e1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e8e5:	89 da                	mov    edx,ebx
c000e8e7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e8eb:	c1 e2 04             	shl    edx,0x4
c000e8ee:	01 ca                	add    edx,ecx
c000e8f0:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e8f8:	74 16                	je     c000e910 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e8fa:	40                   	inc    eax
c000e8fb:	83 f8 04             	cmp    eax,0x4
c000e8fe:	75 f0                	jne    c000e8f0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e900:	c7 44 24 10 08 4d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024d08
c000e908:	5b                   	pop    ebx
c000e909:	5e                   	pop    esi
c000e90a:	5f                   	pop    edi
c000e90b:	e9 ab 60 00 00       	jmp    c00149bb <Krnl::panic(char const*)>
c000e910:	8d 04 98             	lea    eax,[eax+ebx*4]
c000e913:	8d 04 81             	lea    eax,[ecx+eax*4]
c000e916:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000e91c:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000e922:	5b                   	pop    ebx
c000e923:	5e                   	pop    esi
c000e924:	5f                   	pop    edi
c000e925:	c3                   	ret    

c000e926 <doubleFault(regs*, void*)>:
c000e926:	55                   	push   ebp
c000e927:	89 e5                	mov    ebp,esp
c000e929:	83 ec 08             	sub    esp,0x8
c000e92c:	83 ec 0c             	sub    esp,0xc
c000e92f:	68 15 4d 02 c0       	push   0xc0024d15
c000e934:	e8 82 60 00 00       	call   c00149bb <Krnl::panic(char const*)>
c000e939:	83 c4 10             	add    esp,0x10
c000e93c:	90                   	nop
c000e93d:	c9                   	leave  
c000e93e:	c3                   	ret    
c000e93f:	90                   	nop

c000e940 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e940:	56                   	push   esi
c000e941:	53                   	push   ebx
c000e942:	50                   	push   eax
c000e943:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e947:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e94b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e950:	75 35                	jne    c000e987 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000e952:	8d 43 20             	lea    eax,[ebx+0x20]
c000e955:	31 d2                	xor    edx,edx
c000e957:	89 c1                	mov    ecx,eax
c000e959:	c1 e1 04             	shl    ecx,0x4
c000e95c:	01 f1                	add    ecx,esi
c000e95e:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000e966:	74 3e                	je     c000e9a6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000e968:	42                   	inc    edx
c000e969:	83 fa 04             	cmp    edx,0x4
c000e96c:	75 f0                	jne    c000e95e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000e96e:	83 ec 0c             	sub    esp,0xc
c000e971:	68 2f 4d 02 c0       	push   0xc0024d2f
c000e976:	e8 40 60 00 00       	call   c00149bb <Krnl::panic(char const*)>
c000e97b:	83 c4 10             	add    esp,0x10
c000e97e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e983:	5a                   	pop    edx
c000e984:	5b                   	pop    ebx
c000e985:	5e                   	pop    esi
c000e986:	c3                   	ret    
c000e987:	83 ec 0c             	sub    esp,0xc
c000e98a:	56                   	push   esi
c000e98b:	e8 ae fb ff ff       	call   c000e53e <Device::getName()>
c000e990:	83 c4 10             	add    esp,0x10
c000e993:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e996:	75 ba                	jne    c000e952 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e998:	83 fb 0f             	cmp    ebx,0xf
c000e99b:	7f 29                	jg     c000e9c6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000e99d:	0f b6 9b 40 77 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd88c0]
c000e9a4:	eb ac                	jmp    c000e952 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e9a6:	8d 04 82             	lea    eax,[edx+eax*4]
c000e9a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e9ad:	8d 04 86             	lea    eax,[esi+eax*4]
c000e9b0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000e9b6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e9ba:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000e9c0:	89 d8                	mov    eax,ebx
c000e9c2:	5a                   	pop    edx
c000e9c3:	5b                   	pop    ebx
c000e9c4:	5e                   	pop    esi
c000e9c5:	c3                   	ret    
c000e9c6:	83 ec 0c             	sub    esp,0xc
c000e9c9:	68 22 4d 02 c0       	push   0xc0024d22
c000e9ce:	e8 e8 5f 00 00       	call   c00149bb <Krnl::panic(char const*)>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	e9 77 ff ff ff       	jmp    c000e952 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e9db:	90                   	nop

c000e9dc <InterruptController::clearAllHandlers(int, bool)>:
c000e9dc:	56                   	push   esi
c000e9dd:	53                   	push   ebx
c000e9de:	52                   	push   edx
c000e9df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e9e3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e9e7:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e9ec:	75 61                	jne    c000ea4f <InterruptController::clearAllHandlers(int, bool)+0x73>
c000e9ee:	8d 46 20             	lea    eax,[esi+0x20]
c000e9f1:	c1 e6 04             	shl    esi,0x4
c000e9f4:	c1 e0 04             	shl    eax,0x4
c000e9f7:	01 de                	add    esi,ebx
c000e9f9:	01 d8                	add    eax,ebx
c000e9fb:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000ea05:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000ea0f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000ea19:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ea23:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000ea2d:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000ea37:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000ea41:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000ea4b:	58                   	pop    eax
c000ea4c:	5b                   	pop    ebx
c000ea4d:	5e                   	pop    esi
c000ea4e:	c3                   	ret    
c000ea4f:	83 ec 0c             	sub    esp,0xc
c000ea52:	53                   	push   ebx
c000ea53:	e8 e6 fa ff ff       	call   c000e53e <Device::getName()>
c000ea58:	83 c4 10             	add    esp,0x10
c000ea5b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ea5e:	75 8e                	jne    c000e9ee <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ea60:	83 fe 0f             	cmp    esi,0xf
c000ea63:	7f 09                	jg     c000ea6e <InterruptController::clearAllHandlers(int, bool)+0x92>
c000ea65:	0f b6 b6 40 77 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd88c0]
c000ea6c:	eb 80                	jmp    c000e9ee <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ea6e:	83 ec 0c             	sub    esp,0xc
c000ea71:	68 3c 4d 02 c0       	push   0xc0024d3c
c000ea76:	e8 40 5f 00 00       	call   c00149bb <Krnl::panic(char const*)>
c000ea7b:	83 c4 10             	add    esp,0x10
c000ea7e:	e9 6b ff ff ff       	jmp    c000e9ee <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ea83:	90                   	nop

c000ea84 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ea84:	56                   	push   esi
c000ea85:	53                   	push   ebx
c000ea86:	52                   	push   edx
c000ea87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ea8b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ea8f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000ea94:	75 3a                	jne    c000ead0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000ea96:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea9a:	8d 50 20             	lea    edx,[eax+0x20]
c000ea9d:	c1 e2 04             	shl    edx,0x4
c000eaa0:	8d 04 16             	lea    eax,[esi+edx*1]
c000eaa3:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000eaa7:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000eaad:	74 0b                	je     c000eaba <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000eaaf:	83 c0 04             	add    eax,0x4
c000eab2:	39 d0                	cmp    eax,edx
c000eab4:	75 f1                	jne    c000eaa7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000eab6:	58                   	pop    eax
c000eab7:	5b                   	pop    ebx
c000eab8:	5e                   	pop    esi
c000eab9:	c3                   	ret    
c000eaba:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000eac4:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000eace:	eb df                	jmp    c000eaaf <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000ead0:	83 ec 0c             	sub    esp,0xc
c000ead3:	56                   	push   esi
c000ead4:	e8 65 fa ff ff       	call   c000e53e <Device::getName()>
c000ead9:	83 c4 10             	add    esp,0x10
c000eadc:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000eadf:	75 b5                	jne    c000ea96 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000eae1:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000eae6:	7f 11                	jg     c000eaf9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000eae8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eaec:	0f b6 80 40 77 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd88c0]
c000eaf3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000eaf7:	eb 9d                	jmp    c000ea96 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000eaf9:	83 ec 0c             	sub    esp,0xc
c000eafc:	68 49 4d 02 c0       	push   0xc0024d49
c000eb01:	e8 b5 5e 00 00       	call   c00149bb <Krnl::panic(char const*)>
c000eb06:	83 c4 10             	add    esp,0x10
c000eb09:	eb 8b                	jmp    c000ea96 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000eb0b <nmiHandler(regs*, void*)>:
c000eb0b:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c000eb10:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000eb14:	e9 bf a6 ff ff       	jmp    c00091d8 <Computer::handleNMI()>

c000eb19 <int_handler>:
c000eb19:	55                   	push   ebp
c000eb1a:	57                   	push   edi
c000eb1b:	56                   	push   esi
c000eb1c:	53                   	push   ebx
c000eb1d:	83 ec 0c             	sub    esp,0xc
c000eb20:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000eb24:	80 3d 24 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b24,0x0
c000eb2b:	74 0b                	je     c000eb38 <int_handler+0x1f>
c000eb2d:	fa                   	cli    
c000eb2e:	f4                   	hlt    
c000eb2f:	80 3d 24 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b24,0x0
c000eb36:	75 f5                	jne    c000eb2d <int_handler+0x14>
c000eb38:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c000eb3d:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000eb40:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000eb46:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000eb4c:	8d 43 e0             	lea    eax,[ebx-0x20]
c000eb4f:	83 f8 17             	cmp    eax,0x17
c000eb52:	77 13                	ja     c000eb67 <int_handler+0x4e>
c000eb54:	83 ec 08             	sub    esp,0x8
c000eb57:	8b 17                	mov    edx,DWORD PTR [edi]
c000eb59:	8d 43 e0             	lea    eax,[ebx-0x20]
c000eb5c:	0f b6 c0             	movzx  eax,al
c000eb5f:	50                   	push   eax
c000eb60:	57                   	push   edi
c000eb61:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000eb64:	83 c4 10             	add    esp,0x10
c000eb67:	83 c3 15             	add    ebx,0x15
c000eb6a:	c1 e3 04             	shl    ebx,0x4
c000eb6d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000eb71:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000eb78:	31 db                	xor    ebx,ebx
c000eb7a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000eb7e:	85 c0                	test   eax,eax
c000eb80:	74 13                	je     c000eb95 <int_handler+0x7c>
c000eb82:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000eb85:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000eb89:	74 1c                	je     c000eba7 <int_handler+0x8e>
c000eb8b:	83 ec 08             	sub    esp,0x8
c000eb8e:	52                   	push   edx
c000eb8f:	56                   	push   esi
c000eb90:	ff d0                	call   eax
c000eb92:	83 c4 10             	add    esp,0x10
c000eb95:	43                   	inc    ebx
c000eb96:	83 fb 04             	cmp    ebx,0x4
c000eb99:	75 df                	jne    c000eb7a <int_handler+0x61>
c000eb9b:	83 c4 0c             	add    esp,0xc
c000eb9e:	31 c0                	xor    eax,eax
c000eba0:	5b                   	pop    ebx
c000eba1:	31 d2                	xor    edx,edx
c000eba3:	5e                   	pop    esi
c000eba4:	5f                   	pop    edi
c000eba5:	5d                   	pop    ebp
c000eba6:	c3                   	ret    
c000eba7:	83 ec 08             	sub    esp,0x8
c000ebaa:	52                   	push   edx
c000ebab:	56                   	push   esi
c000ebac:	ff d0                	call   eax
c000ebae:	83 c4 10             	add    esp,0x10
c000ebb1:	83 c4 0c             	add    esp,0xc
c000ebb4:	5b                   	pop    ebx
c000ebb5:	5e                   	pop    esi
c000ebb6:	5f                   	pop    edi
c000ebb7:	5d                   	pop    ebp
c000ebb8:	c3                   	ret    
c000ebb9:	90                   	nop

c000ebba <InterruptController::InterruptController(char const*)>:
c000ebba:	83 ec 1c             	sub    esp,0x1c
c000ebbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ebc1:	83 ec 08             	sub    esp,0x8
c000ebc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ebc8:	50                   	push   eax
c000ebc9:	e8 74 f8 ff ff       	call   c000e442 <Device::Device(char const*)>
c000ebce:	83 c4 10             	add    esp,0x10
c000ebd1:	ba 00 50 02 c0       	mov    edx,0xc0025000
c000ebd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ebda:	89 10                	mov    DWORD PTR [eax],edx
c000ebdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ebe0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ebea:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ebf2:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000ebfa:	7f 5e                	jg     c000ec5a <InterruptController::InterruptController(char const*)+0xa0>
c000ebfc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ec04:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000ec09:	7f 49                	jg     c000ec54 <InterruptController::InterruptController(char const*)+0x9a>
c000ec0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec0f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ec13:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ec1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec1e:	01 ca                	add    edx,ecx
c000ec20:	83 c2 54             	add    edx,0x54
c000ec23:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ec2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ec33:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ec3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec3e:	01 ca                	add    edx,ecx
c000ec40:	81 c2 54 04 00 00    	add    edx,0x454
c000ec46:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ec4e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000ec52:	eb b0                	jmp    c000ec04 <InterruptController::InterruptController(char const*)+0x4a>
c000ec54:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ec58:	eb 98                	jmp    c000ebf2 <InterruptController::InterruptController(char const*)+0x38>
c000ec5a:	90                   	nop
c000ec5b:	83 c4 1c             	add    esp,0x1c
c000ec5e:	c3                   	ret    
c000ec5f:	90                   	nop

c000ec60 <InterruptController::~InterruptController()>:
c000ec60:	83 ec 0c             	sub    esp,0xc
c000ec63:	ba 00 50 02 c0       	mov    edx,0xc0025000
c000ec68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec6c:	89 10                	mov    DWORD PTR [eax],edx
c000ec6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec72:	83 ec 0c             	sub    esp,0xc
c000ec75:	50                   	push   eax
c000ec76:	e8 91 f4 ff ff       	call   c000e10c <Device::~Device()>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	90                   	nop
c000ec7f:	83 c4 0c             	add    esp,0xc
c000ec82:	c3                   	ret    
c000ec83:	90                   	nop

c000ec84 <InterruptController::~InterruptController()>:
c000ec84:	83 ec 0c             	sub    esp,0xc
c000ec87:	83 ec 0c             	sub    esp,0xc
c000ec8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec8e:	e8 cd ff ff ff       	call   c000ec60 <InterruptController::~InterruptController()>
c000ec93:	83 c4 10             	add    esp,0x10
c000ec96:	83 ec 08             	sub    esp,0x8
c000ec99:	68 58 21 00 00       	push   0x2158
c000ec9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eca2:	e8 77 df ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000eca7:	83 c4 10             	add    esp,0x10
c000ecaa:	83 c4 0c             	add    esp,0xc
c000ecad:	c3                   	ret    

c000ecae <displayDebugInfo(regs*)>:
c000ecae:	55                   	push   ebp
c000ecaf:	57                   	push   edi
c000ecb0:	56                   	push   esi
c000ecb1:	53                   	push   ebx
c000ecb2:	83 ec 24             	sub    esp,0x24
c000ecb5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ecb9:	0f 20 c2             	mov    edx,cr0
c000ecbc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ecc0:	0f 20 d7             	mov    edi,cr2
c000ecc3:	0f 20 de             	mov    esi,cr3
c000ecc6:	0f 20 e5             	mov    ebp,cr4
c000ecc9:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000eccc:	68 56 4d 02 c0       	push   0xc0024d56
c000ecd1:	e8 29 e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ecd6:	59                   	pop    ecx
c000ecd7:	58                   	pop    eax
c000ecd8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000ecdb:	68 61 4d 02 c0       	push   0xc0024d61
c000ece0:	e8 1a e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ece5:	58                   	pop    eax
c000ece6:	5a                   	pop    edx
c000ece7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000ecea:	68 6c 4d 02 c0       	push   0xc0024d6c
c000ecef:	e8 0b e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ecf4:	59                   	pop    ecx
c000ecf5:	58                   	pop    eax
c000ecf6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000ecf9:	68 77 4d 02 c0       	push   0xc0024d77
c000ecfe:	e8 fc df ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ed03:	58                   	pop    eax
c000ed04:	5a                   	pop    edx
c000ed05:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ed08:	68 82 4d 02 c0       	push   0xc0024d82
c000ed0d:	e8 ed df ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ed12:	59                   	pop    ecx
c000ed13:	58                   	pop    eax
c000ed14:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ed17:	68 8d 4d 02 c0       	push   0xc0024d8d
c000ed1c:	e8 de df ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ed21:	58                   	pop    eax
c000ed22:	5a                   	pop    edx
c000ed23:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ed26:	68 98 4d 02 c0       	push   0xc0024d98
c000ed2b:	e8 cf df ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ed30:	59                   	pop    ecx
c000ed31:	58                   	pop    eax
c000ed32:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ed35:	68 a3 4d 02 c0       	push   0xc0024da3
c000ed3a:	e8 c0 df ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ed3f:	58                   	pop    eax
c000ed40:	5a                   	pop    edx
c000ed41:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ed44:	68 ae 4d 02 c0       	push   0xc0024dae
c000ed49:	e8 b1 df ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ed4e:	59                   	pop    ecx
c000ed4f:	58                   	pop    eax
c000ed50:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed53:	68 bd 4d 02 c0       	push   0xc0024dbd
c000ed58:	e8 a2 df ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ed5d:	58                   	pop    eax
c000ed5e:	5a                   	pop    edx
c000ed5f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ed62:	68 c8 4d 02 c0       	push   0xc0024dc8
c000ed67:	e8 93 df ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ed6c:	59                   	pop    ecx
c000ed6d:	58                   	pop    eax
c000ed6e:	57                   	push   edi
c000ed6f:	68 d3 4d 02 c0       	push   0xc0024dd3
c000ed74:	e8 86 df ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ed79:	58                   	pop    eax
c000ed7a:	5a                   	pop    edx
c000ed7b:	56                   	push   esi
c000ed7c:	68 de 4d 02 c0       	push   0xc0024dde
c000ed81:	e8 79 df ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ed86:	59                   	pop    ecx
c000ed87:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000ed8c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed92:	e8 72 bd ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c000ed97:	58                   	pop    eax
c000ed98:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ed9b:	5a                   	pop    edx
c000ed9c:	c1 e0 05             	shl    eax,0x5
c000ed9f:	05 a0 74 02 c0       	add    eax,0xc00274a0
c000eda4:	50                   	push   eax
c000eda5:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000edaa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edb0:	e8 61 c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000edb5:	59                   	pop    ecx
c000edb6:	58                   	pop    eax
c000edb7:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000edbc:	68 e9 4d 02 c0       	push   0xc0024de9
c000edc1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edc7:	e8 4a c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000edcc:	58                   	pop    eax
c000edcd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000edd2:	5a                   	pop    edx
c000edd3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000edd6:	83 c0 0c             	add    eax,0xc
c000edd9:	50                   	push   eax
c000edda:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000eddf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ede5:	e8 2c c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000edea:	59                   	pop    ecx
c000edeb:	58                   	pop    eax
c000edec:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000edf1:	68 f2 4d 02 c0       	push   0xc0024df2
c000edf6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edfc:	e8 15 c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ee01:	58                   	pop    eax
c000ee02:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000ee07:	5a                   	pop    edx
c000ee08:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ee0b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee11:	e8 ba c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ee16:	59                   	pop    ecx
c000ee17:	58                   	pop    eax
c000ee18:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000ee1d:	68 fa 4d 02 c0       	push   0xc0024dfa
c000ee22:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee28:	e8 e9 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ee2d:	58                   	pop    eax
c000ee2e:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000ee33:	5a                   	pop    edx
c000ee34:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ee37:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee3d:	e8 8e c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ee42:	59                   	pop    ecx
c000ee43:	58                   	pop    eax
c000ee44:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000ee49:	68 02 4e 02 c0       	push   0xc0024e02
c000ee4e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee54:	e8 bd c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ee59:	58                   	pop    eax
c000ee5a:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000ee5f:	5a                   	pop    edx
c000ee60:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ee63:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee69:	e8 62 c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ee6e:	59                   	pop    ecx
c000ee6f:	58                   	pop    eax
c000ee70:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000ee75:	68 0a 4e 02 c0       	push   0xc0024e0a
c000ee7a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee80:	e8 91 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ee85:	58                   	pop    eax
c000ee86:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000ee8b:	5a                   	pop    edx
c000ee8c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000ee8f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee95:	e8 36 c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ee9a:	59                   	pop    ecx
c000ee9b:	58                   	pop    eax
c000ee9c:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000eea1:	68 12 4e 02 c0       	push   0xc0024e12
c000eea6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eeac:	e8 65 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000eeb1:	58                   	pop    eax
c000eeb2:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000eeb7:	5a                   	pop    edx
c000eeb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000eebb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eec1:	e8 0a c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000eec6:	59                   	pop    ecx
c000eec7:	58                   	pop    eax
c000eec8:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000eecd:	68 1a 4e 02 c0       	push   0xc0024e1a
c000eed2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eed8:	e8 39 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000eedd:	58                   	pop    eax
c000eede:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000eee3:	5a                   	pop    edx
c000eee4:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000eee7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eeed:	e8 de c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000eef2:	59                   	pop    ecx
c000eef3:	58                   	pop    eax
c000eef4:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000eef9:	68 22 4e 02 c0       	push   0xc0024e22
c000eefe:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef04:	e8 0d c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ef09:	58                   	pop    eax
c000ef0a:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000ef0f:	5a                   	pop    edx
c000ef10:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef14:	52                   	push   edx
c000ef15:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef1b:	e8 b0 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ef20:	59                   	pop    ecx
c000ef21:	58                   	pop    eax
c000ef22:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000ef27:	68 2b 4e 02 c0       	push   0xc0024e2b
c000ef2c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef32:	e8 df c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ef37:	58                   	pop    eax
c000ef38:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000ef3d:	5a                   	pop    edx
c000ef3e:	57                   	push   edi
c000ef3f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef45:	e8 86 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ef4a:	59                   	pop    ecx
c000ef4b:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000ef50:	5f                   	pop    edi
c000ef51:	68 33 4e 02 c0       	push   0xc0024e33
c000ef56:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef5c:	e8 b5 c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ef61:	58                   	pop    eax
c000ef62:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000ef67:	5a                   	pop    edx
c000ef68:	56                   	push   esi
c000ef69:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef6f:	e8 5c c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ef74:	59                   	pop    ecx
c000ef75:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000ef7a:	5e                   	pop    esi
c000ef7b:	68 3b 4e 02 c0       	push   0xc0024e3b
c000ef80:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef86:	e8 8b c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ef8b:	5f                   	pop    edi
c000ef8c:	58                   	pop    eax
c000ef8d:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000ef92:	55                   	push   ebp
c000ef93:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef99:	e8 32 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ef9e:	58                   	pop    eax
c000ef9f:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000efa4:	5a                   	pop    edx
c000efa5:	68 43 4e 02 c0       	push   0xc0024e43
c000efaa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efb0:	e8 61 c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000efb5:	0f 21 c0             	mov    eax,db0
c000efb8:	59                   	pop    ecx
c000efb9:	5e                   	pop    esi
c000efba:	50                   	push   eax
c000efbb:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000efc0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efc6:	e8 05 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000efcb:	5f                   	pop    edi
c000efcc:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000efd1:	5d                   	pop    ebp
c000efd2:	68 4c 4e 02 c0       	push   0xc0024e4c
c000efd7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efdd:	e8 34 c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000efe2:	0f 21 c8             	mov    eax,db1
c000efe5:	5a                   	pop    edx
c000efe6:	59                   	pop    ecx
c000efe7:	50                   	push   eax
c000efe8:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000efed:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eff3:	e8 d8 bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000eff8:	5e                   	pop    esi
c000eff9:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000effe:	5f                   	pop    edi
c000efff:	68 54 4e 02 c0       	push   0xc0024e54
c000f004:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f00a:	e8 07 c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f00f:	0f 21 d0             	mov    eax,db2
c000f012:	5d                   	pop    ebp
c000f013:	5a                   	pop    edx
c000f014:	50                   	push   eax
c000f015:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000f01a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f020:	e8 ab bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f025:	59                   	pop    ecx
c000f026:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000f02b:	5e                   	pop    esi
c000f02c:	68 5c 4e 02 c0       	push   0xc0024e5c
c000f031:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f037:	e8 da bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f03c:	0f 21 d8             	mov    eax,db3
c000f03f:	5f                   	pop    edi
c000f040:	5d                   	pop    ebp
c000f041:	50                   	push   eax
c000f042:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000f047:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f04d:	e8 7e bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f052:	58                   	pop    eax
c000f053:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000f058:	5a                   	pop    edx
c000f059:	68 64 4e 02 c0       	push   0xc0024e64
c000f05e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f064:	e8 ad bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f069:	0f 21 f0             	mov    eax,db6
c000f06c:	59                   	pop    ecx
c000f06d:	5e                   	pop    esi
c000f06e:	50                   	push   eax
c000f06f:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000f074:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f07a:	e8 51 bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f07f:	5f                   	pop    edi
c000f080:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000f085:	5d                   	pop    ebp
c000f086:	68 6c 4e 02 c0       	push   0xc0024e6c
c000f08b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f091:	e8 80 bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f096:	0f 21 f8             	mov    eax,db7
c000f099:	5a                   	pop    edx
c000f09a:	59                   	pop    ecx
c000f09b:	50                   	push   eax
c000f09c:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000f0a1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0a7:	e8 24 bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f0ac:	5e                   	pop    esi
c000f0ad:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f0b0:	e8 34 8c 00 00       	call   c0017ce9 <Thr::getDriverNameFromAddress(unsigned long)>
c000f0b5:	83 c4 10             	add    esp,0x10
c000f0b8:	85 c0                	test   eax,eax
c000f0ba:	74 7d                	je     c000f139 <displayDebugInfo(regs*)+0x48b>
c000f0bc:	89 c6                	mov    esi,eax
c000f0be:	50                   	push   eax
c000f0bf:	50                   	push   eax
c000f0c0:	56                   	push   esi
c000f0c1:	68 74 4e 02 c0       	push   0xc0024e74
c000f0c6:	e8 34 dc ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f0cb:	5a                   	pop    edx
c000f0cc:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000f0d1:	59                   	pop    ecx
c000f0d2:	68 82 4e 02 c0       	push   0xc0024e82
c000f0d7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0dd:	e8 34 bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f0e2:	5f                   	pop    edi
c000f0e3:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000f0e8:	5d                   	pop    ebp
c000f0e9:	56                   	push   esi
c000f0ea:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0f0:	e8 21 bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f0f5:	58                   	pop    eax
c000f0f6:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000f0fb:	5a                   	pop    edx
c000f0fc:	68 8e 4e 02 c0       	push   0xc0024e8e
c000f101:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f107:	e8 0a bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f10c:	59                   	pop    ecx
c000f10d:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000f112:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000f118:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f11b:	e8 00 8c 00 00       	call   c0017d20 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000f120:	5b                   	pop    ebx
c000f121:	5d                   	pop    ebp
c000f122:	50                   	push   eax
c000f123:	57                   	push   edi
c000f124:	e8 a7 be ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f129:	58                   	pop    eax
c000f12a:	5a                   	pop    edx
c000f12b:	56                   	push   esi
c000f12c:	68 9a 4e 02 c0       	push   0xc0024e9a
c000f131:	e8 c9 db ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f136:	83 c4 10             	add    esp,0x10
c000f139:	fa                   	cli    
c000f13a:	f4                   	hlt    
c000f13b:	eb fe                	jmp    c000f13b <displayDebugInfo(regs*)+0x48d>

c000f13d <x87EmulHandler(regs*, void*)>:
c000f13d:	83 ec 0c             	sub    esp,0xc
c000f140:	0f 20 c2             	mov    edx,cr0
c000f143:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f148:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000f14c:	75 4b                	jne    c000f199 <x87EmulHandler(regs*, void*)+0x5c>
c000f14e:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c000f153:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000f159:	85 c0                	test   eax,eax
c000f15b:	74 05                	je     c000f162 <x87EmulHandler(regs*, void*)+0x25>
c000f15d:	83 e2 08             	and    edx,0x8
c000f160:	75 17                	jne    c000f179 <x87EmulHandler(regs*, void*)+0x3c>
c000f162:	83 ec 0c             	sub    esp,0xc
c000f165:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f169:	e8 28 b0 00 00       	call   c001a196 <Vm::x87Handler(regs*)>
c000f16e:	83 c4 10             	add    esp,0x10
c000f171:	84 c0                	test   al,al
c000f173:	74 24                	je     c000f199 <x87EmulHandler(regs*, void*)+0x5c>
c000f175:	83 c4 0c             	add    esp,0xc
c000f178:	c3                   	ret    
c000f179:	83 ec 0c             	sub    esp,0xc
c000f17c:	68 c0 4e 02 c0       	push   0xc0024ec0
c000f181:	e8 79 db ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f186:	0f 06                	clts   
c000f188:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f18d:	83 c4 10             	add    esp,0x10
c000f190:	a3 88 81 02 c0       	mov    ds:0xc0028188,eax
c000f195:	83 c4 0c             	add    esp,0xc
c000f198:	c3                   	ret    
c000f199:	83 ec 0c             	sub    esp,0xc
c000f19c:	68 aa 4e 02 c0       	push   0xc0024eaa
c000f1a1:	e8 59 db ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f1a6:	5a                   	pop    edx
c000f1a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f1ab:	e8 fe fa ff ff       	call   c000ecae <displayDebugInfo(regs*)>

c000f1b0 <gpFault(regs*, void*)>:
c000f1b0:	53                   	push   ebx
c000f1b1:	83 ec 14             	sub    esp,0x14
c000f1b4:	c7 05 84 81 02 c0 52 96 01 c0 	mov    DWORD PTR ds:0xc0028184,0xc0019652
c000f1be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000f1c2:	53                   	push   ebx
c000f1c3:	e8 8a a4 00 00       	call   c0019652 <Vm::faultHandler(regs*)>
c000f1c8:	83 c4 10             	add    esp,0x10
c000f1cb:	84 c0                	test   al,al
c000f1cd:	74 05                	je     c000f1d4 <gpFault(regs*, void*)+0x24>
c000f1cf:	83 c4 08             	add    esp,0x8
c000f1d2:	5b                   	pop    ebx
c000f1d3:	c3                   	ret    
c000f1d4:	83 ec 0c             	sub    esp,0xc
c000f1d7:	68 cd 4e 02 c0       	push   0xc0024ecd
c000f1dc:	e8 1e db ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f1e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f1e4:	e8 c5 fa ff ff       	call   c000ecae <displayDebugInfo(regs*)>

c000f1e9 <pgFault(regs*, void*)>:
c000f1e9:	53                   	push   ebx
c000f1ea:	83 ec 10             	sub    esp,0x10
c000f1ed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f1f1:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f1f4:	68 e8 4e 02 c0       	push   0xc0024ee8
c000f1f9:	e8 01 db ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f1fe:	0f 20 d0             	mov    eax,cr2
c000f201:	5a                   	pop    edx
c000f202:	59                   	pop    ecx
c000f203:	50                   	push   eax
c000f204:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f209:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f20c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000f212:	e8 63 d6 ff ff       	call   c000c87a <VAS::tryLoadBackOffDisk(unsigned long)>
c000f217:	83 c4 10             	add    esp,0x10
c000f21a:	84 c0                	test   al,al
c000f21c:	74 05                	je     c000f223 <pgFault(regs*, void*)+0x3a>
c000f21e:	83 c4 08             	add    esp,0x8
c000f221:	5b                   	pop    ebx
c000f222:	c3                   	ret    
c000f223:	83 ec 0c             	sub    esp,0xc
c000f226:	68 fd 4e 02 c0       	push   0xc0024efd
c000f22b:	e8 cf da ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f230:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f233:	e8 76 fa ff ff       	call   c000ecae <displayDebugInfo(regs*)>

c000f238 <otherISRHandler(regs*, void*)>:
c000f238:	53                   	push   ebx
c000f239:	83 ec 0c             	sub    esp,0xc
c000f23c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f240:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f243:	50                   	push   eax
c000f244:	50                   	push   eax
c000f245:	68 0a 4f 02 c0       	push   0xc0024f0a
c000f24a:	e8 b0 da ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f24f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f252:	e8 57 fa ff ff       	call   c000ecae <displayDebugInfo(regs*)>

c000f257 <opcodeFault(regs*, void*)>:
c000f257:	55                   	push   ebp
c000f258:	89 e5                	mov    ebp,esp
c000f25a:	56                   	push   esi
c000f25b:	53                   	push   ebx
c000f25c:	83 ec 30             	sub    esp,0x30
c000f25f:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c000f264:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f26a:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000f270:	84 c0                	test   al,al
c000f272:	74 24                	je     c000f298 <opcodeFault(regs*, void*)+0x41>
c000f274:	83 ec 0c             	sub    esp,0xc
c000f277:	68 28 4f 02 c0       	push   0xc0024f28
c000f27c:	e8 7e da ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f281:	83 c4 10             	add    esp,0x10
c000f284:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f287:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f28a:	8d 50 19             	lea    edx,[eax+0x19]
c000f28d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f290:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f293:	e9 7b 03 00 00       	jmp    c000f613 <opcodeFault(regs*, void*)+0x3bc>
c000f298:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f29b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f29e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f2a1:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000f2a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2a8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2ab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f2ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2b1:	8a 00                	mov    al,BYTE PTR [eax]
c000f2b3:	3c f0                	cmp    al,0xf0
c000f2b5:	75 17                	jne    c000f2ce <opcodeFault(regs*, void*)+0x77>
c000f2b7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f2ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2bd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2c0:	8d 50 01             	lea    edx,[eax+0x1]
c000f2c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2c6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f2c9:	e9 d6 00 00 00       	jmp    c000f3a4 <opcodeFault(regs*, void*)+0x14d>
c000f2ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2d1:	8a 00                	mov    al,BYTE PTR [eax]
c000f2d3:	3c f2                	cmp    al,0xf2
c000f2d5:	74 09                	je     c000f2e0 <opcodeFault(regs*, void*)+0x89>
c000f2d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2da:	8a 00                	mov    al,BYTE PTR [eax]
c000f2dc:	3c f3                	cmp    al,0xf3
c000f2de:	75 1b                	jne    c000f2fb <opcodeFault(regs*, void*)+0xa4>
c000f2e0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f2e4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f2e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2ea:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2ed:	8d 50 01             	lea    edx,[eax+0x1]
c000f2f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2f3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f2f6:	e9 a9 00 00 00       	jmp    c000f3a4 <opcodeFault(regs*, void*)+0x14d>
c000f2fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2fe:	8a 00                	mov    al,BYTE PTR [eax]
c000f300:	3c 66                	cmp    al,0x66
c000f302:	75 1b                	jne    c000f31f <opcodeFault(regs*, void*)+0xc8>
c000f304:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f308:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f30b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f30e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f311:	8d 50 01             	lea    edx,[eax+0x1]
c000f314:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f317:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f31a:	e9 85 00 00 00       	jmp    c000f3a4 <opcodeFault(regs*, void*)+0x14d>
c000f31f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f322:	8a 00                	mov    al,BYTE PTR [eax]
c000f324:	3c 67                	cmp    al,0x67
c000f326:	75 18                	jne    c000f340 <opcodeFault(regs*, void*)+0xe9>
c000f328:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f32c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f32f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f332:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f335:	8d 50 01             	lea    edx,[eax+0x1]
c000f338:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f33b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f33e:	eb 64                	jmp    c000f3a4 <opcodeFault(regs*, void*)+0x14d>
c000f340:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f343:	8a 00                	mov    al,BYTE PTR [eax]
c000f345:	3c 2e                	cmp    al,0x2e
c000f347:	74 09                	je     c000f352 <opcodeFault(regs*, void*)+0xfb>
c000f349:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f34c:	8a 00                	mov    al,BYTE PTR [eax]
c000f34e:	3c 3e                	cmp    al,0x3e
c000f350:	75 18                	jne    c000f36a <opcodeFault(regs*, void*)+0x113>
c000f352:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f356:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f359:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f35c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f35f:	8d 50 01             	lea    edx,[eax+0x1]
c000f362:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f365:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f368:	eb 3a                	jmp    c000f3a4 <opcodeFault(regs*, void*)+0x14d>
c000f36a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f36d:	8a 00                	mov    al,BYTE PTR [eax]
c000f36f:	3c 36                	cmp    al,0x36
c000f371:	74 1b                	je     c000f38e <opcodeFault(regs*, void*)+0x137>
c000f373:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f376:	8a 00                	mov    al,BYTE PTR [eax]
c000f378:	3c 26                	cmp    al,0x26
c000f37a:	74 12                	je     c000f38e <opcodeFault(regs*, void*)+0x137>
c000f37c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f37f:	8a 00                	mov    al,BYTE PTR [eax]
c000f381:	3c 64                	cmp    al,0x64
c000f383:	74 09                	je     c000f38e <opcodeFault(regs*, void*)+0x137>
c000f385:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f388:	8a 00                	mov    al,BYTE PTR [eax]
c000f38a:	3c 65                	cmp    al,0x65
c000f38c:	75 16                	jne    c000f3a4 <opcodeFault(regs*, void*)+0x14d>
c000f38e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f392:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f395:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f398:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f39b:	8d 50 01             	lea    edx,[eax+0x1]
c000f39e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3a1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f3a4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3a7:	8a 00                	mov    al,BYTE PTR [eax]
c000f3a9:	3c 0f                	cmp    al,0xf
c000f3ab:	0f 85 8d 01 00 00    	jne    c000f53e <opcodeFault(regs*, void*)+0x2e7>
c000f3b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3b4:	40                   	inc    eax
c000f3b5:	8a 00                	mov    al,BYTE PTR [eax]
c000f3b7:	3c c7                	cmp    al,0xc7
c000f3b9:	0f 85 7f 01 00 00    	jne    c000f53e <opcodeFault(regs*, void*)+0x2e7>
c000f3bf:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f3c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3c5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f3c8:	8d 50 01             	lea    edx,[eax+0x1]
c000f3cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3ce:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f3d1:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f3d4:	50                   	push   eax
c000f3d5:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f3d8:	50                   	push   eax
c000f3d9:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f3dc:	50                   	push   eax
c000f3dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f3e0:	e8 ef 4c 00 00       	call   c00140d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f3e5:	83 c4 10             	add    esp,0x10
c000f3e8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f3eb:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f3ee:	83 f0 01             	xor    eax,0x1
c000f3f1:	84 c0                	test   al,al
c000f3f3:	0f 84 45 01 00 00    	je     c000f53e <opcodeFault(regs*, void*)+0x2e7>
c000f3f9:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f3fc:	3c 01                	cmp    al,0x1
c000f3fe:	0f 85 3a 01 00 00    	jne    c000f53e <opcodeFault(regs*, void*)+0x2e7>
c000f404:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f407:	83 f0 01             	xor    eax,0x1
c000f40a:	84 c0                	test   al,al
c000f40c:	0f 84 2c 01 00 00    	je     c000f53e <opcodeFault(regs*, void*)+0x2e7>
c000f412:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f415:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f418:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f41b:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f422:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f425:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f428:	89 c2                	mov    edx,eax
c000f42a:	b8 00 00 00 00       	mov    eax,0x0
c000f42f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f432:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f435:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f438:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f43b:	ba 00 00 00 00       	mov    edx,0x0
c000f440:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f443:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f446:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f449:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f44c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f44f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f456:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f459:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f45c:	89 c2                	mov    edx,eax
c000f45e:	b8 00 00 00 00       	mov    eax,0x0
c000f463:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f466:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f469:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f46c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f46f:	ba 00 00 00 00       	mov    edx,0x0
c000f474:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f477:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f47a:	fa                   	cli    
c000f47b:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000f480:	40                   	inc    eax
c000f481:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c000f486:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f489:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f48c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f48e:	89 c1                	mov    ecx,eax
c000f490:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f493:	89 cb                	mov    ebx,ecx
c000f495:	89 d0                	mov    eax,edx
c000f497:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f49a:	89 c6                	mov    esi,eax
c000f49c:	89 f0                	mov    eax,esi
c000f49e:	09 d8                	or     eax,ebx
c000f4a0:	85 c0                	test   eax,eax
c000f4a2:	75 21                	jne    c000f4c5 <opcodeFault(regs*, void*)+0x26e>
c000f4a4:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f4a7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f4aa:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f4ad:	89 01                	mov    DWORD PTR [ecx],eax
c000f4af:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f4b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f4b8:	83 c8 40             	or     eax,0x40
c000f4bb:	89 c2                	mov    edx,eax
c000f4bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4c0:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f4c3:	eb 3e                	jmp    c000f503 <opcodeFault(regs*, void*)+0x2ac>
c000f4c5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f4c8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f4cb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4cd:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f4d0:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f4d3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f4d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4d9:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f4dc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f4df:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f4e2:	89 d0                	mov    eax,edx
c000f4e4:	31 d2                	xor    edx,edx
c000f4e6:	89 c3                	mov    ebx,eax
c000f4e8:	89 d6                	mov    esi,edx
c000f4ea:	89 da                	mov    edx,ebx
c000f4ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4ef:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f4f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f4f8:	83 e0 bf             	and    eax,0xffffffbf
c000f4fb:	89 c2                	mov    edx,eax
c000f4fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f500:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f503:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000f508:	48                   	dec    eax
c000f509:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c000f50e:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000f513:	85 c0                	test   eax,eax
c000f515:	75 01                	jne    c000f518 <opcodeFault(regs*, void*)+0x2c1>
c000f517:	fb                   	sti    
c000f518:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f51b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f51e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f521:	01 c2                	add    edx,eax
c000f523:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f526:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f529:	83 ec 0c             	sub    esp,0xc
c000f52c:	68 4b 4f 02 c0       	push   0xc0024f4b
c000f531:	e8 c9 d7 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f536:	83 c4 10             	add    esp,0x10
c000f539:	e9 d5 00 00 00       	jmp    c000f613 <opcodeFault(regs*, void*)+0x3bc>
c000f53e:	83 ec 0c             	sub    esp,0xc
c000f541:	68 5e 4f 02 c0       	push   0xc0024f5e
c000f546:	e8 b4 d7 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f54b:	83 c4 10             	add    esp,0x10
c000f54e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f551:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f554:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f557:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f55a:	c1 e0 04             	shl    eax,0x4
c000f55d:	01 d0                	add    eax,edx
c000f55f:	83 c0 03             	add    eax,0x3
c000f562:	8a 00                	mov    al,BYTE PTR [eax]
c000f564:	0f b6 d8             	movzx  ebx,al
c000f567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f56a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f56d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f570:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f573:	c1 e0 04             	shl    eax,0x4
c000f576:	01 d0                	add    eax,edx
c000f578:	83 c0 02             	add    eax,0x2
c000f57b:	8a 00                	mov    al,BYTE PTR [eax]
c000f57d:	0f b6 c8             	movzx  ecx,al
c000f580:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f583:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f586:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f589:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f58c:	c1 e0 04             	shl    eax,0x4
c000f58f:	01 d0                	add    eax,edx
c000f591:	40                   	inc    eax
c000f592:	8a 00                	mov    al,BYTE PTR [eax]
c000f594:	0f b6 d0             	movzx  edx,al
c000f597:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f59a:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f59d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5a0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f5a3:	c1 e0 04             	shl    eax,0x4
c000f5a6:	01 f0                	add    eax,esi
c000f5a8:	8a 00                	mov    al,BYTE PTR [eax]
c000f5aa:	0f b6 c0             	movzx  eax,al
c000f5ad:	83 ec 0c             	sub    esp,0xc
c000f5b0:	53                   	push   ebx
c000f5b1:	51                   	push   ecx
c000f5b2:	52                   	push   edx
c000f5b3:	50                   	push   eax
c000f5b4:	68 70 4f 02 c0       	push   0xc0024f70
c000f5b9:	e8 41 d7 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f5be:	83 c4 20             	add    esp,0x20
c000f5c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5c4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5c7:	83 c0 03             	add    eax,0x3
c000f5ca:	8a 00                	mov    al,BYTE PTR [eax]
c000f5cc:	0f b6 d8             	movzx  ebx,al
c000f5cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5d2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5d5:	83 c0 02             	add    eax,0x2
c000f5d8:	8a 00                	mov    al,BYTE PTR [eax]
c000f5da:	0f b6 c8             	movzx  ecx,al
c000f5dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5e0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5e3:	40                   	inc    eax
c000f5e4:	8a 00                	mov    al,BYTE PTR [eax]
c000f5e6:	0f b6 d0             	movzx  edx,al
c000f5e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5ec:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5ef:	8a 00                	mov    al,BYTE PTR [eax]
c000f5f1:	0f b6 c0             	movzx  eax,al
c000f5f4:	83 ec 0c             	sub    esp,0xc
c000f5f7:	53                   	push   ebx
c000f5f8:	51                   	push   ecx
c000f5f9:	52                   	push   edx
c000f5fa:	50                   	push   eax
c000f5fb:	68 98 4f 02 c0       	push   0xc0024f98
c000f600:	e8 fa d6 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f605:	83 c4 20             	add    esp,0x20
c000f608:	83 ec 0c             	sub    esp,0xc
c000f60b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f60e:	e8 9b f6 ff ff       	call   c000ecae <displayDebugInfo(regs*)>
c000f613:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f616:	5b                   	pop    ebx
c000f617:	5e                   	pop    esi
c000f618:	5d                   	pop    ebp
c000f619:	c3                   	ret    

c000f61a <displayProgramFault(char const*)>:
c000f61a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f61f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f622:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f628:	85 c0                	test   eax,eax
c000f62a:	74 15                	je     c000f641 <displayProgramFault(char const*)+0x27>
c000f62c:	83 ec 0c             	sub    esp,0xc
c000f62f:	6a 04                	push   0x4
c000f631:	6a 0f                	push   0xf
c000f633:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f637:	50                   	push   eax
c000f638:	e8 d5 b6 ff ff       	call   c000ad12 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f63d:	83 c4 1c             	add    esp,0x1c
c000f640:	c3                   	ret    
c000f641:	c3                   	ret    

c000f642 <setupInterruptController()>:
c000f642:	55                   	push   ebp
c000f643:	89 e5                	mov    ebp,esp
c000f645:	53                   	push   ebx
c000f646:	83 ec 24             	sub    esp,0x24
c000f649:	b8 00 00 00 00       	mov    eax,0x0
c000f64e:	85 c0                	test   eax,eax
c000f650:	0f 95 c0             	setne  al
c000f653:	84 c0                	test   al,al
c000f655:	74 5b                	je     c000f6b2 <setupInterruptController()+0x70>
c000f657:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f65e:	83 ec 0c             	sub    esp,0xc
c000f661:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f664:	e8 a6 a3 ff ff       	call   c0009a0f <malloc>
c000f669:	83 c4 10             	add    esp,0x10
c000f66c:	89 c3                	mov    ebx,eax
c000f66e:	83 ec 0c             	sub    esp,0xc
c000f671:	53                   	push   ebx
c000f672:	e8 9b 20 01 00       	call   c0021712 <APIC::APIC()>
c000f677:	83 c4 10             	add    esp,0x10
c000f67a:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f67d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f680:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f683:	8b 00                	mov    eax,DWORD PTR [eax]
c000f685:	83 c0 08             	add    eax,0x8
c000f688:	8b 00                	mov    eax,DWORD PTR [eax]
c000f68a:	6a 00                	push   0x0
c000f68c:	6a 00                	push   0x0
c000f68e:	6a 00                	push   0x0
c000f690:	52                   	push   edx
c000f691:	ff d0                	call   eax
c000f693:	83 c4 10             	add    esp,0x10
c000f696:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c000f69b:	83 ec 08             	sub    esp,0x8
c000f69e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f6a1:	50                   	push   eax
c000f6a2:	e8 97 eb ff ff       	call   c000e23e <Device::addChild(Device*)>
c000f6a7:	83 c4 10             	add    esp,0x10
c000f6aa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f6ad:	e9 79 03 00 00       	jmp    c000fa2b <setupInterruptController()+0x3e9>
c000f6b2:	a0 60 89 02 c0       	mov    al,ds:0xc0028960
c000f6b7:	84 c0                	test   al,al
c000f6b9:	75 14                	jne    c000f6cf <setupInterruptController()+0x8d>
c000f6bb:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c000f6c0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f6c6:	83 e2 fe             	and    edx,0xfffffffe
c000f6c9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f6cf:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c000f6d4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f6da:	83 e0 01             	and    eax,0x1
c000f6dd:	84 c0                	test   al,al
c000f6df:	0f 95 c0             	setne  al
c000f6e2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f6e5:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f6ec:	83 ec 0c             	sub    esp,0xc
c000f6ef:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f6f2:	e8 18 a3 ff ff       	call   c0009a0f <malloc>
c000f6f7:	83 c4 10             	add    esp,0x10
c000f6fa:	89 c3                	mov    ebx,eax
c000f6fc:	83 ec 0c             	sub    esp,0xc
c000f6ff:	53                   	push   ebx
c000f700:	e8 65 25 01 00       	call   c0021c6a <PIC::PIC()>
c000f705:	83 c4 10             	add    esp,0x10
c000f708:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f70b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f70e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f711:	8b 00                	mov    eax,DWORD PTR [eax]
c000f713:	83 c0 08             	add    eax,0x8
c000f716:	8b 00                	mov    eax,DWORD PTR [eax]
c000f718:	6a 00                	push   0x0
c000f71a:	6a 00                	push   0x0
c000f71c:	6a 00                	push   0x0
c000f71e:	52                   	push   edx
c000f71f:	ff d0                	call   eax
c000f721:	83 c4 10             	add    esp,0x10
c000f724:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f728:	74 73                	je     c000f79d <setupInterruptController()+0x15b>
c000f72a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f72d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f730:	8b 00                	mov    eax,DWORD PTR [eax]
c000f732:	83 c0 0c             	add    eax,0xc
c000f735:	8b 00                	mov    eax,DWORD PTR [eax]
c000f737:	6a 00                	push   0x0
c000f739:	6a 00                	push   0x0
c000f73b:	6a 00                	push   0x0
c000f73d:	52                   	push   edx
c000f73e:	ff d0                	call   eax
c000f740:	83 c4 10             	add    esp,0x10
c000f743:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f747:	74 15                	je     c000f75e <setupInterruptController()+0x11c>
c000f749:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f74c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f74e:	83 c0 04             	add    eax,0x4
c000f751:	8b 00                	mov    eax,DWORD PTR [eax]
c000f753:	83 ec 0c             	sub    esp,0xc
c000f756:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f759:	ff d0                	call   eax
c000f75b:	83 c4 10             	add    esp,0x10
c000f75e:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f765:	83 ec 0c             	sub    esp,0xc
c000f768:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f76b:	e8 9f a2 ff ff       	call   c0009a0f <malloc>
c000f770:	83 c4 10             	add    esp,0x10
c000f773:	89 c3                	mov    ebx,eax
c000f775:	83 ec 0c             	sub    esp,0xc
c000f778:	53                   	push   ebx
c000f779:	e8 94 1f 01 00       	call   c0021712 <APIC::APIC()>
c000f77e:	83 c4 10             	add    esp,0x10
c000f781:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f784:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f787:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f78a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f78c:	83 c0 08             	add    eax,0x8
c000f78f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f791:	6a 00                	push   0x0
c000f793:	6a 00                	push   0x0
c000f795:	6a 00                	push   0x0
c000f797:	52                   	push   edx
c000f798:	ff d0                	call   eax
c000f79a:	83 c4 10             	add    esp,0x10
c000f79d:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c000f7a2:	83 ec 08             	sub    esp,0x8
c000f7a5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7a8:	50                   	push   eax
c000f7a9:	e8 90 ea ff ff       	call   c000e23e <Device::addChild(Device*)>
c000f7ae:	83 c4 10             	add    esp,0x10
c000f7b1:	c7 05 88 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028188,0x0
c000f7bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7be:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7c0:	83 c0 24             	add    eax,0x24
c000f7c3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7c5:	6a 00                	push   0x0
c000f7c7:	68 38 f2 00 c0       	push   0xc000f238
c000f7cc:	6a 00                	push   0x0
c000f7ce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7d1:	ff d0                	call   eax
c000f7d3:	83 c4 10             	add    esp,0x10
c000f7d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7d9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7db:	83 c0 24             	add    eax,0x24
c000f7de:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7e0:	6a 00                	push   0x0
c000f7e2:	68 38 f2 00 c0       	push   0xc000f238
c000f7e7:	6a 01                	push   0x1
c000f7e9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7ec:	ff d0                	call   eax
c000f7ee:	83 c4 10             	add    esp,0x10
c000f7f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7f4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7f6:	83 c0 24             	add    eax,0x24
c000f7f9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7fb:	6a 00                	push   0x0
c000f7fd:	68 0b eb 00 c0       	push   0xc000eb0b
c000f802:	6a 02                	push   0x2
c000f804:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f807:	ff d0                	call   eax
c000f809:	83 c4 10             	add    esp,0x10
c000f80c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f80f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f811:	83 c0 24             	add    eax,0x24
c000f814:	8b 00                	mov    eax,DWORD PTR [eax]
c000f816:	6a 00                	push   0x0
c000f818:	68 38 f2 00 c0       	push   0xc000f238
c000f81d:	6a 03                	push   0x3
c000f81f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f822:	ff d0                	call   eax
c000f824:	83 c4 10             	add    esp,0x10
c000f827:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f82a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f82c:	83 c0 24             	add    eax,0x24
c000f82f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f831:	6a 00                	push   0x0
c000f833:	68 38 f2 00 c0       	push   0xc000f238
c000f838:	6a 04                	push   0x4
c000f83a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f83d:	ff d0                	call   eax
c000f83f:	83 c4 10             	add    esp,0x10
c000f842:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f845:	8b 00                	mov    eax,DWORD PTR [eax]
c000f847:	83 c0 24             	add    eax,0x24
c000f84a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f84c:	6a 00                	push   0x0
c000f84e:	68 38 f2 00 c0       	push   0xc000f238
c000f853:	6a 05                	push   0x5
c000f855:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f858:	ff d0                	call   eax
c000f85a:	83 c4 10             	add    esp,0x10
c000f85d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f860:	8b 00                	mov    eax,DWORD PTR [eax]
c000f862:	83 c0 24             	add    eax,0x24
c000f865:	8b 00                	mov    eax,DWORD PTR [eax]
c000f867:	6a 00                	push   0x0
c000f869:	68 57 f2 00 c0       	push   0xc000f257
c000f86e:	6a 06                	push   0x6
c000f870:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f873:	ff d0                	call   eax
c000f875:	83 c4 10             	add    esp,0x10
c000f878:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f87b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f87d:	83 c0 24             	add    eax,0x24
c000f880:	8b 00                	mov    eax,DWORD PTR [eax]
c000f882:	6a 00                	push   0x0
c000f884:	68 3d f1 00 c0       	push   0xc000f13d
c000f889:	6a 07                	push   0x7
c000f88b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f88e:	ff d0                	call   eax
c000f890:	83 c4 10             	add    esp,0x10
c000f893:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f896:	8b 00                	mov    eax,DWORD PTR [eax]
c000f898:	83 c0 24             	add    eax,0x24
c000f89b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f89d:	6a 00                	push   0x0
c000f89f:	68 26 e9 00 c0       	push   0xc000e926
c000f8a4:	6a 08                	push   0x8
c000f8a6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8a9:	ff d0                	call   eax
c000f8ab:	83 c4 10             	add    esp,0x10
c000f8ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8b1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8b3:	83 c0 24             	add    eax,0x24
c000f8b6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8b8:	6a 00                	push   0x0
c000f8ba:	68 38 f2 00 c0       	push   0xc000f238
c000f8bf:	6a 09                	push   0x9
c000f8c1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8c4:	ff d0                	call   eax
c000f8c6:	83 c4 10             	add    esp,0x10
c000f8c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8ce:	83 c0 24             	add    eax,0x24
c000f8d1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8d3:	6a 00                	push   0x0
c000f8d5:	68 38 f2 00 c0       	push   0xc000f238
c000f8da:	6a 0a                	push   0xa
c000f8dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8df:	ff d0                	call   eax
c000f8e1:	83 c4 10             	add    esp,0x10
c000f8e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8e7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8e9:	83 c0 24             	add    eax,0x24
c000f8ec:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8ee:	6a 00                	push   0x0
c000f8f0:	68 38 f2 00 c0       	push   0xc000f238
c000f8f5:	6a 0b                	push   0xb
c000f8f7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8fa:	ff d0                	call   eax
c000f8fc:	83 c4 10             	add    esp,0x10
c000f8ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f902:	8b 00                	mov    eax,DWORD PTR [eax]
c000f904:	83 c0 24             	add    eax,0x24
c000f907:	8b 00                	mov    eax,DWORD PTR [eax]
c000f909:	6a 00                	push   0x0
c000f90b:	68 38 f2 00 c0       	push   0xc000f238
c000f910:	6a 0c                	push   0xc
c000f912:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f915:	ff d0                	call   eax
c000f917:	83 c4 10             	add    esp,0x10
c000f91a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f91d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f91f:	83 c0 24             	add    eax,0x24
c000f922:	8b 00                	mov    eax,DWORD PTR [eax]
c000f924:	6a 00                	push   0x0
c000f926:	68 b0 f1 00 c0       	push   0xc000f1b0
c000f92b:	6a 0d                	push   0xd
c000f92d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f930:	ff d0                	call   eax
c000f932:	83 c4 10             	add    esp,0x10
c000f935:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f938:	8b 00                	mov    eax,DWORD PTR [eax]
c000f93a:	83 c0 24             	add    eax,0x24
c000f93d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f93f:	6a 00                	push   0x0
c000f941:	68 e9 f1 00 c0       	push   0xc000f1e9
c000f946:	6a 0e                	push   0xe
c000f948:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f94b:	ff d0                	call   eax
c000f94d:	83 c4 10             	add    esp,0x10
c000f950:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f953:	8b 00                	mov    eax,DWORD PTR [eax]
c000f955:	83 c0 24             	add    eax,0x24
c000f958:	8b 00                	mov    eax,DWORD PTR [eax]
c000f95a:	6a 00                	push   0x0
c000f95c:	68 38 f2 00 c0       	push   0xc000f238
c000f961:	6a 0f                	push   0xf
c000f963:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f966:	ff d0                	call   eax
c000f968:	83 c4 10             	add    esp,0x10
c000f96b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f96e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f970:	83 c0 24             	add    eax,0x24
c000f973:	8b 00                	mov    eax,DWORD PTR [eax]
c000f975:	6a 00                	push   0x0
c000f977:	68 38 f2 00 c0       	push   0xc000f238
c000f97c:	6a 10                	push   0x10
c000f97e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f981:	ff d0                	call   eax
c000f983:	83 c4 10             	add    esp,0x10
c000f986:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f989:	8b 00                	mov    eax,DWORD PTR [eax]
c000f98b:	83 c0 24             	add    eax,0x24
c000f98e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f990:	6a 00                	push   0x0
c000f992:	68 38 f2 00 c0       	push   0xc000f238
c000f997:	6a 11                	push   0x11
c000f999:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f99c:	ff d0                	call   eax
c000f99e:	83 c4 10             	add    esp,0x10
c000f9a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9a4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9a6:	83 c0 24             	add    eax,0x24
c000f9a9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9ab:	6a 00                	push   0x0
c000f9ad:	68 38 f2 00 c0       	push   0xc000f238
c000f9b2:	6a 12                	push   0x12
c000f9b4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f9b7:	ff d0                	call   eax
c000f9b9:	83 c4 10             	add    esp,0x10
c000f9bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9bf:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9c1:	83 c0 24             	add    eax,0x24
c000f9c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9c6:	6a 00                	push   0x0
c000f9c8:	68 38 f2 00 c0       	push   0xc000f238
c000f9cd:	6a 13                	push   0x13
c000f9cf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f9d2:	ff d0                	call   eax
c000f9d4:	83 c4 10             	add    esp,0x10
c000f9d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9da:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9dc:	83 c0 24             	add    eax,0x24
c000f9df:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9e1:	6a 00                	push   0x0
c000f9e3:	68 38 f2 00 c0       	push   0xc000f238
c000f9e8:	6a 14                	push   0x14
c000f9ea:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f9ed:	ff d0                	call   eax
c000f9ef:	83 c4 10             	add    esp,0x10
c000f9f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9f5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9f7:	83 c0 24             	add    eax,0x24
c000f9fa:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9fc:	6a 00                	push   0x0
c000f9fe:	68 38 f2 00 c0       	push   0xc000f238
c000fa03:	6a 1e                	push   0x1e
c000fa05:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa08:	ff d0                	call   eax
c000fa0a:	83 c4 10             	add    esp,0x10
c000fa0d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa10:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa12:	83 c0 24             	add    eax,0x24
c000fa15:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa17:	6a 00                	push   0x0
c000fa19:	68 5f 6d 01 c0       	push   0xc0016d5f
c000fa1e:	6a 60                	push   0x60
c000fa20:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa23:	ff d0                	call   eax
c000fa25:	83 c4 10             	add    esp,0x10
c000fa28:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa2b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fa2e:	c9                   	leave  
c000fa2f:	c3                   	ret    

c000fa30 <InterruptController::convertLegacyIRQNumber(int)>:
c000fa30:	55                   	push   ebp
c000fa31:	89 e5                	mov    ebp,esp
c000fa33:	83 ec 08             	sub    esp,0x8
c000fa36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa39:	83 ec 0c             	sub    esp,0xc
c000fa3c:	50                   	push   eax
c000fa3d:	e8 fc ea ff ff       	call   c000e53e <Device::getName()>
c000fa42:	83 c4 10             	add    esp,0x10
c000fa45:	8a 00                	mov    al,BYTE PTR [eax]
c000fa47:	3c 41                	cmp    al,0x41
c000fa49:	0f 94 c0             	sete   al
c000fa4c:	84 c0                	test   al,al
c000fa4e:	74 28                	je     c000fa78 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000fa50:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000fa54:	7f 12                	jg     c000fa68 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000fa56:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fa59:	05 40 77 02 c0       	add    eax,0xc0027740
c000fa5e:	8a 00                	mov    al,BYTE PTR [eax]
c000fa60:	0f b6 c0             	movzx  eax,al
c000fa63:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000fa66:	eb 10                	jmp    c000fa78 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000fa68:	83 ec 0c             	sub    esp,0xc
c000fa6b:	68 c0 4f 02 c0       	push   0xc0024fc0
c000fa70:	e8 46 4f 00 00       	call   c00149bb <Krnl::panic(char const*)>
c000fa75:	83 c4 10             	add    esp,0x10
c000fa78:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fa7b:	c9                   	leave  
c000fa7c:	c3                   	ret    
c000fa7d:	90                   	nop

c000fa7e <startGUI(void*)>:
c000fa7e:	55                   	push   ebp
c000fa7f:	89 e5                	mov    ebp,esp
c000fa81:	53                   	push   ebx
c000fa82:	83 ec 04             	sub    esp,0x4
c000fa85:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000fa8a:	48                   	dec    eax
c000fa8b:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c000fa90:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000fa95:	85 c0                	test   eax,eax
c000fa97:	75 01                	jne    c000fa9a <startGUI(void*)+0x1c>
c000fa99:	fb                   	sti    
c000fa9a:	8b 1d 48 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028048
c000faa0:	83 ec 08             	sub    esp,0x8
c000faa3:	6a 01                	push   0x1
c000faa5:	68 40 50 02 c0       	push   0xc0025040
c000faaa:	e8 8b 82 00 00       	call   c0017d3a <Thr::loadDLL(char const*, bool)>
c000faaf:	83 c4 10             	add    esp,0x10
c000fab2:	83 ec 08             	sub    esp,0x8
c000fab5:	53                   	push   ebx
c000fab6:	50                   	push   eax
c000fab7:	e8 af 84 00 00       	call   c0017f6b <Thr::executeDLL(unsigned long, void*)>
c000fabc:	83 c4 10             	add    esp,0x10
c000fabf:	8b 1d 48 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028048
c000fac5:	83 ec 08             	sub    esp,0x8
c000fac8:	6a 01                	push   0x1
c000faca:	68 5a 50 02 c0       	push   0xc002505a
c000facf:	e8 66 82 00 00       	call   c0017d3a <Thr::loadDLL(char const*, bool)>
c000fad4:	83 c4 10             	add    esp,0x10
c000fad7:	83 ec 08             	sub    esp,0x8
c000fada:	53                   	push   ebx
c000fadb:	50                   	push   eax
c000fadc:	e8 8a 84 00 00       	call   c0017f6b <Thr::executeDLL(unsigned long, void*)>
c000fae1:	83 c4 10             	add    esp,0x10
c000fae4:	90                   	nop
c000fae5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fae8:	c9                   	leave  
c000fae9:	c3                   	ret    

c000faea <startGUIVESA(void*)>:
c000faea:	55                   	push   ebp
c000faeb:	89 e5                	mov    ebp,esp
c000faed:	53                   	push   ebx
c000faee:	83 ec 04             	sub    esp,0x4
c000faf1:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000faf6:	48                   	dec    eax
c000faf7:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c000fafc:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000fb01:	85 c0                	test   eax,eax
c000fb03:	75 01                	jne    c000fb06 <startGUIVESA(void*)+0x1c>
c000fb05:	fb                   	sti    
c000fb06:	8b 1d 48 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028048
c000fb0c:	83 ec 08             	sub    esp,0x8
c000fb0f:	6a 01                	push   0x1
c000fb11:	68 74 50 02 c0       	push   0xc0025074
c000fb16:	e8 1f 82 00 00       	call   c0017d3a <Thr::loadDLL(char const*, bool)>
c000fb1b:	83 c4 10             	add    esp,0x10
c000fb1e:	83 ec 08             	sub    esp,0x8
c000fb21:	53                   	push   ebx
c000fb22:	50                   	push   eax
c000fb23:	e8 43 84 00 00       	call   c0017f6b <Thr::executeDLL(unsigned long, void*)>
c000fb28:	83 c4 10             	add    esp,0x10
c000fb2b:	8b 1d 48 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028048
c000fb31:	83 ec 08             	sub    esp,0x8
c000fb34:	6a 01                	push   0x1
c000fb36:	68 5a 50 02 c0       	push   0xc002505a
c000fb3b:	e8 fa 81 00 00       	call   c0017d3a <Thr::loadDLL(char const*, bool)>
c000fb40:	83 c4 10             	add    esp,0x10
c000fb43:	83 ec 08             	sub    esp,0x8
c000fb46:	53                   	push   ebx
c000fb47:	50                   	push   eax
c000fb48:	e8 1e 84 00 00       	call   c0017f6b <Thr::executeDLL(unsigned long, void*)>
c000fb4d:	83 c4 10             	add    esp,0x10
c000fb50:	90                   	nop
c000fb51:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fb54:	c9                   	leave  
c000fb55:	c3                   	ret    

c000fb56 <sendKeyToTerminal(unsigned char)>:
c000fb56:	55                   	push   ebp
c000fb57:	89 e5                	mov    ebp,esp
c000fb59:	83 ec 28             	sub    esp,0x28
c000fb5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb5f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000fb62:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c000fb67:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000fb6b:	83 ec 08             	sub    esp,0x8
c000fb6e:	52                   	push   edx
c000fb6f:	50                   	push   eax
c000fb70:	e8 45 b6 ff ff       	call   c000b1ba <VgaText::receiveKey(unsigned char)>
c000fb75:	83 c4 10             	add    esp,0x10
c000fb78:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000fb7c:	0f 85 8f 00 00 00    	jne    c000fc11 <sendKeyToTerminal(unsigned char)+0xbb>
c000fb82:	fa                   	cli    
c000fb83:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000fb88:	40                   	inc    eax
c000fb89:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c000fb8e:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c000fb93:	40                   	inc    eax
c000fb94:	a3 64 95 02 c0       	mov    ds:0xc0029564,eax
c000fb99:	a1 a0 81 02 c0       	mov    eax,ds:0xc00281a0
c000fb9e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fba1:	c7 05 a0 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281a0,0x0
c000fbab:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000fbaf:	74 1f                	je     c000fbd0 <sendKeyToTerminal(unsigned char)+0x7a>
c000fbb1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fbb4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000fbb7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fbba:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000fbbd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fbc0:	83 ec 0c             	sub    esp,0xc
c000fbc3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fbc6:	e8 11 90 00 00       	call   c0018bdc <unblockTask(ThreadControlBlock*)>
c000fbcb:	83 c4 10             	add    esp,0x10
c000fbce:	eb db                	jmp    c000fbab <sendKeyToTerminal(unsigned char)+0x55>
c000fbd0:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c000fbd5:	48                   	dec    eax
c000fbd6:	a3 64 95 02 c0       	mov    ds:0xc0029564,eax
c000fbdb:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c000fbe0:	85 c0                	test   eax,eax
c000fbe2:	75 18                	jne    c000fbfc <sendKeyToTerminal(unsigned char)+0xa6>
c000fbe4:	a1 60 95 02 c0       	mov    eax,ds:0xc0029560
c000fbe9:	85 c0                	test   eax,eax
c000fbeb:	74 0f                	je     c000fbfc <sendKeyToTerminal(unsigned char)+0xa6>
c000fbed:	c7 05 60 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029560,0x0
c000fbf7:	e8 24 8b 00 00       	call   c0018720 <schedule()>
c000fbfc:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000fc01:	48                   	dec    eax
c000fc02:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c000fc07:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000fc0c:	85 c0                	test   eax,eax
c000fc0e:	75 01                	jne    c000fc11 <sendKeyToTerminal(unsigned char)+0xbb>
c000fc10:	fb                   	sti    
c000fc11:	90                   	nop
c000fc12:	c9                   	leave  
c000fc13:	c3                   	ret    

c000fc14 <sendKeyboardToken(KeyboardToken)>:
c000fc14:	55                   	push   ebp
c000fc15:	89 e5                	mov    ebp,esp
c000fc17:	83 ec 18             	sub    esp,0x18
c000fc1a:	e8 ce 51 00 00       	call   c0014ded <Krnl::userIOReceived()>
c000fc1f:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000fc22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc25:	0f b7 c0             	movzx  eax,ax
c000fc28:	83 f2 01             	xor    edx,0x1
c000fc2b:	88 90 c0 81 02 c0    	mov    BYTE PTR [eax-0x3ffd7e40],dl
c000fc31:	a1 a8 81 02 c0       	mov    eax,ds:0xc00281a8
c000fc36:	85 c0                	test   eax,eax
c000fc38:	74 24                	je     c000fc5e <sendKeyboardToken(KeyboardToken)+0x4a>
c000fc3a:	8b 0d a8 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281a8
c000fc40:	83 ec 04             	sub    esp,0x4
c000fc43:	68 c0 81 02 c0       	push   0xc00281c0
c000fc48:	83 ec 08             	sub    esp,0x8
c000fc4b:	89 e2                	mov    edx,esp
c000fc4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc50:	89 02                	mov    DWORD PTR [edx],eax
c000fc52:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fc55:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fc59:	ff d1                	call   ecx
c000fc5b:	83 c4 10             	add    esp,0x10
c000fc5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc61:	66 3d 03 02          	cmp    ax,0x203
c000fc65:	75 07                	jne    c000fc6e <sendKeyboardToken(KeyboardToken)+0x5a>
c000fc67:	a0 c0 82 02 c0       	mov    al,ds:0xc00282c0
c000fc6c:	84 c0                	test   al,al
c000fc6e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fc72:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000fc75:	a0 c8 85 02 c0       	mov    al,ds:0xc00285c8
c000fc7a:	38 c2                	cmp    dl,al
c000fc7c:	74 1c                	je     c000fc9a <sendKeyboardToken(KeyboardToken)+0x86>
c000fc7e:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000fc81:	a2 c8 85 02 c0       	mov    ds:0xc00285c8,al
c000fc86:	a0 c8 85 02 c0       	mov    al,ds:0xc00285c8
c000fc8b:	0f b6 c0             	movzx  eax,al
c000fc8e:	83 ec 0c             	sub    esp,0xc
c000fc91:	50                   	push   eax
c000fc92:	e8 63 ab ff ff       	call   c000a7fa <setTerminalScrollLock(bool)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000fc9d:	84 c0                	test   al,al
c000fc9f:	0f 84 ae 00 00 00    	je     c000fd53 <sendKeyboardToken(KeyboardToken)+0x13f>
c000fca5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fca8:	66 3d 10 03          	cmp    ax,0x310
c000fcac:	75 06                	jne    c000fcb4 <sendKeyboardToken(KeyboardToken)+0xa0>
c000fcae:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000fcb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcb7:	66 3d 11 03          	cmp    ax,0x311
c000fcbb:	75 06                	jne    c000fcc3 <sendKeyboardToken(KeyboardToken)+0xaf>
c000fcbd:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000fcc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcc6:	66 3d 12 03          	cmp    ax,0x312
c000fcca:	75 06                	jne    c000fcd2 <sendKeyboardToken(KeyboardToken)+0xbe>
c000fccc:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000fcd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcd5:	66 3d 13 03          	cmp    ax,0x313
c000fcd9:	75 06                	jne    c000fce1 <sendKeyboardToken(KeyboardToken)+0xcd>
c000fcdb:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000fce1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fce4:	66 3d 14 03          	cmp    ax,0x314
c000fce8:	75 06                	jne    c000fcf0 <sendKeyboardToken(KeyboardToken)+0xdc>
c000fcea:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000fcf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcf3:	66 3d 15 03          	cmp    ax,0x315
c000fcf7:	75 06                	jne    c000fcff <sendKeyboardToken(KeyboardToken)+0xeb>
c000fcf9:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fcff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd02:	66 3d 16 03          	cmp    ax,0x316
c000fd06:	75 06                	jne    c000fd0e <sendKeyboardToken(KeyboardToken)+0xfa>
c000fd08:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000fd0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd11:	66 3d 17 03          	cmp    ax,0x317
c000fd15:	75 06                	jne    c000fd1d <sendKeyboardToken(KeyboardToken)+0x109>
c000fd17:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000fd1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd20:	66 3d 18 03          	cmp    ax,0x318
c000fd24:	75 06                	jne    c000fd2c <sendKeyboardToken(KeyboardToken)+0x118>
c000fd26:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000fd2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd2f:	66 3d 19 03          	cmp    ax,0x319
c000fd33:	75 06                	jne    c000fd3b <sendKeyboardToken(KeyboardToken)+0x127>
c000fd35:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000fd3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd3e:	66 3d 1a 03          	cmp    ax,0x31a
c000fd42:	0f 85 c9 00 00 00    	jne    c000fe11 <sendKeyboardToken(KeyboardToken)+0x1fd>
c000fd48:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000fd4e:	e9 be 00 00 00       	jmp    c000fe11 <sendKeyboardToken(KeyboardToken)+0x1fd>
c000fd53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd56:	66 3d 10 03          	cmp    ax,0x310
c000fd5a:	75 0a                	jne    c000fd66 <sendKeyboardToken(KeyboardToken)+0x152>
c000fd5c:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000fd62:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd69:	66 3d 11 03          	cmp    ax,0x311
c000fd6d:	75 0a                	jne    c000fd79 <sendKeyboardToken(KeyboardToken)+0x165>
c000fd6f:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000fd75:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd7c:	66 3d 12 03          	cmp    ax,0x312
c000fd80:	75 0a                	jne    c000fd8c <sendKeyboardToken(KeyboardToken)+0x178>
c000fd82:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000fd88:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd8f:	66 3d 13 03          	cmp    ax,0x313
c000fd93:	75 0a                	jne    c000fd9f <sendKeyboardToken(KeyboardToken)+0x18b>
c000fd95:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000fd9b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fda2:	66 3d 14 03          	cmp    ax,0x314
c000fda6:	75 0a                	jne    c000fdb2 <sendKeyboardToken(KeyboardToken)+0x19e>
c000fda8:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000fdae:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fdb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdb5:	66 3d 15 03          	cmp    ax,0x315
c000fdb9:	75 0a                	jne    c000fdc5 <sendKeyboardToken(KeyboardToken)+0x1b1>
c000fdbb:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fdc1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fdc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdc8:	66 3d 16 03          	cmp    ax,0x316
c000fdcc:	75 0a                	jne    c000fdd8 <sendKeyboardToken(KeyboardToken)+0x1c4>
c000fdce:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000fdd4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fdd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fddb:	66 3d 17 03          	cmp    ax,0x317
c000fddf:	75 0a                	jne    c000fdeb <sendKeyboardToken(KeyboardToken)+0x1d7>
c000fde1:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000fde7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fdeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdee:	66 3d 18 03          	cmp    ax,0x318
c000fdf2:	75 0a                	jne    c000fdfe <sendKeyboardToken(KeyboardToken)+0x1ea>
c000fdf4:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000fdfa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fdfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe01:	66 3d 19 03          	cmp    ax,0x319
c000fe05:	75 0a                	jne    c000fe11 <sendKeyboardToken(KeyboardToken)+0x1fd>
c000fe07:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000fe0d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe14:	66 3d 00 02          	cmp    ax,0x200
c000fe18:	75 2c                	jne    c000fe46 <sendKeyboardToken(KeyboardToken)+0x232>
c000fe1a:	a0 c0 85 02 c0       	mov    al,ds:0xc00285c0
c000fe1f:	83 f0 01             	xor    eax,0x1
c000fe22:	84 c0                	test   al,al
c000fe24:	74 20                	je     c000fe46 <sendKeyboardToken(KeyboardToken)+0x232>
c000fe26:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000fe2b:	6a 01                	push   0x1
c000fe2d:	6a 00                	push   0x0
c000fe2f:	68 7e fa 00 c0       	push   0xc000fa7e
c000fe34:	50                   	push   eax
c000fe35:	e8 ca 86 00 00       	call   c0018504 <Process::createThread(void (*)(void*), void*, int)>
c000fe3a:	83 c4 10             	add    esp,0x10
c000fe3d:	c6 05 c0 85 02 c0 01 	mov    BYTE PTR ds:0xc00285c0,0x1
c000fe44:	eb 33                	jmp    c000fe79 <sendKeyboardToken(KeyboardToken)+0x265>
c000fe46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe49:	66 3d 01 02          	cmp    ax,0x201
c000fe4d:	75 2a                	jne    c000fe79 <sendKeyboardToken(KeyboardToken)+0x265>
c000fe4f:	a0 c0 85 02 c0       	mov    al,ds:0xc00285c0
c000fe54:	83 f0 01             	xor    eax,0x1
c000fe57:	84 c0                	test   al,al
c000fe59:	74 1e                	je     c000fe79 <sendKeyboardToken(KeyboardToken)+0x265>
c000fe5b:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c000fe60:	6a 01                	push   0x1
c000fe62:	6a 00                	push   0x0
c000fe64:	68 ea fa 00 c0       	push   0xc000faea
c000fe69:	50                   	push   eax
c000fe6a:	e8 95 86 00 00       	call   c0018504 <Process::createThread(void (*)(void*), void*, int)>
c000fe6f:	83 c4 10             	add    esp,0x10
c000fe72:	c6 05 c0 85 02 c0 01 	mov    BYTE PTR ds:0xc00285c0,0x1
c000fe79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe7c:	66 3d 1d 03          	cmp    ax,0x31d
c000fe80:	75 06                	jne    c000fe88 <sendKeyboardToken(KeyboardToken)+0x274>
c000fe82:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000fe88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe8b:	66 3d 1c 03          	cmp    ax,0x31c
c000fe8f:	75 06                	jne    c000fe97 <sendKeyboardToken(KeyboardToken)+0x283>
c000fe91:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000fe97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe9a:	66 3d 1b 03          	cmp    ax,0x31b
c000fe9e:	75 06                	jne    c000fea6 <sendKeyboardToken(KeyboardToken)+0x292>
c000fea0:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000fea6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fea9:	66 3d 1e 03          	cmp    ax,0x31e
c000fead:	75 06                	jne    c000feb5 <sendKeyboardToken(KeyboardToken)+0x2a1>
c000feaf:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000feb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000feb8:	66 3d 1f 03          	cmp    ax,0x31f
c000febc:	75 06                	jne    c000fec4 <sendKeyboardToken(KeyboardToken)+0x2b0>
c000febe:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000fec4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fec7:	66 3d 1a 03          	cmp    ax,0x31a
c000fecb:	75 06                	jne    c000fed3 <sendKeyboardToken(KeyboardToken)+0x2bf>
c000fecd:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000fed3:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000fed7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000feda:	83 f0 01             	xor    eax,0x1
c000fedd:	84 c0                	test   al,al
c000fedf:	74 77                	je     c000ff58 <sendKeyboardToken(KeyboardToken)+0x344>
c000fee1:	a0 c1 82 02 c0       	mov    al,ds:0xc00282c1
c000fee6:	84 c0                	test   al,al
c000fee8:	74 41                	je     c000ff2b <sendKeyboardToken(KeyboardToken)+0x317>
c000feea:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000feee:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000fef2:	74 2b                	je     c000ff1f <sendKeyboardToken(KeyboardToken)+0x30b>
c000fef4:	8b 15 c4 85 02 c0    	mov    edx,DWORD PTR ds:0xc00285c4
c000fefa:	89 d0                	mov    eax,edx
c000fefc:	c1 e0 02             	shl    eax,0x2
c000feff:	01 d0                	add    eax,edx
c000ff01:	01 c0                	add    eax,eax
c000ff03:	a3 c4 85 02 c0       	mov    ds:0xc00285c4,eax
c000ff08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff0b:	0f b7 c0             	movzx  eax,ax
c000ff0e:	8d 50 d0             	lea    edx,[eax-0x30]
c000ff11:	a1 c4 85 02 c0       	mov    eax,ds:0xc00285c4
c000ff16:	01 d0                	add    eax,edx
c000ff18:	a3 c4 85 02 c0       	mov    ds:0xc00285c4,eax
c000ff1d:	eb 6d                	jmp    c000ff8c <sendKeyboardToken(KeyboardToken)+0x378>
c000ff1f:	c7 05 c4 85 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00285c4,0x0
c000ff29:	eb 61                	jmp    c000ff8c <sendKeyboardToken(KeyboardToken)+0x378>
c000ff2b:	a1 c4 85 02 c0       	mov    eax,ds:0xc00285c4
c000ff30:	85 c0                	test   eax,eax
c000ff32:	74 18                	je     c000ff4c <sendKeyboardToken(KeyboardToken)+0x338>
c000ff34:	a1 c4 85 02 c0       	mov    eax,ds:0xc00285c4
c000ff39:	0f b6 c0             	movzx  eax,al
c000ff3c:	83 ec 0c             	sub    esp,0xc
c000ff3f:	50                   	push   eax
c000ff40:	e8 11 fc ff ff       	call   c000fb56 <sendKeyToTerminal(unsigned char)>
c000ff45:	83 c4 10             	add    esp,0x10
c000ff48:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ff4c:	c7 05 c4 85 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00285c4,0x0
c000ff56:	eb 34                	jmp    c000ff8c <sendKeyboardToken(KeyboardToken)+0x378>
c000ff58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff5b:	66 3d 01 01          	cmp    ax,0x101
c000ff5f:	75 2b                	jne    c000ff8c <sendKeyboardToken(KeyboardToken)+0x378>
c000ff61:	a1 c4 85 02 c0       	mov    eax,ds:0xc00285c4
c000ff66:	85 c0                	test   eax,eax
c000ff68:	74 18                	je     c000ff82 <sendKeyboardToken(KeyboardToken)+0x36e>
c000ff6a:	a1 c4 85 02 c0       	mov    eax,ds:0xc00285c4
c000ff6f:	0f b6 c0             	movzx  eax,al
c000ff72:	83 ec 0c             	sub    esp,0xc
c000ff75:	50                   	push   eax
c000ff76:	e8 db fb ff ff       	call   c000fb56 <sendKeyToTerminal(unsigned char)>
c000ff7b:	83 c4 10             	add    esp,0x10
c000ff7e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ff82:	c7 05 c4 85 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00285c4,0x0
c000ff8c:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ff8f:	83 f0 01             	xor    eax,0x1
c000ff92:	84 c0                	test   al,al
c000ff94:	74 4c                	je     c000ffe2 <sendKeyboardToken(KeyboardToken)+0x3ce>
c000ff96:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ff99:	83 f0 01             	xor    eax,0x1
c000ff9c:	84 c0                	test   al,al
c000ff9e:	74 42                	je     c000ffe2 <sendKeyboardToken(KeyboardToken)+0x3ce>
c000ffa0:	a0 c0 82 02 c0       	mov    al,ds:0xc00282c0
c000ffa5:	83 f0 01             	xor    eax,0x1
c000ffa8:	84 c0                	test   al,al
c000ffaa:	74 36                	je     c000ffe2 <sendKeyboardToken(KeyboardToken)+0x3ce>
c000ffac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffaf:	66 83 f8 1f          	cmp    ax,0x1f
c000ffb3:	76 09                	jbe    c000ffbe <sendKeyboardToken(KeyboardToken)+0x3aa>
c000ffb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffb8:	66 83 f8 7e          	cmp    ax,0x7e
c000ffbc:	76 12                	jbe    c000ffd0 <sendKeyboardToken(KeyboardToken)+0x3bc>
c000ffbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffc1:	66 83 f8 0a          	cmp    ax,0xa
c000ffc5:	74 09                	je     c000ffd0 <sendKeyboardToken(KeyboardToken)+0x3bc>
c000ffc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffca:	66 83 f8 08          	cmp    ax,0x8
c000ffce:	75 12                	jne    c000ffe2 <sendKeyboardToken(KeyboardToken)+0x3ce>
c000ffd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffd3:	0f b6 c0             	movzx  eax,al
c000ffd6:	83 ec 0c             	sub    esp,0xc
c000ffd9:	50                   	push   eax
c000ffda:	e8 77 fb ff ff       	call   c000fb56 <sendKeyToTerminal(unsigned char)>
c000ffdf:	83 c4 10             	add    esp,0x10
c000ffe2:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ffe5:	83 f0 01             	xor    eax,0x1
c000ffe8:	84 c0                	test   al,al
c000ffea:	74 4f                	je     c001003b <sendKeyboardToken(KeyboardToken)+0x427>
c000ffec:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ffef:	83 f0 01             	xor    eax,0x1
c000fff2:	84 c0                	test   al,al
c000fff4:	74 45                	je     c001003b <sendKeyboardToken(KeyboardToken)+0x427>
c000fff6:	a0 c0 82 02 c0       	mov    al,ds:0xc00282c0
c000fffb:	84 c0                	test   al,al
c000fffd:	74 3c                	je     c001003b <sendKeyboardToken(KeyboardToken)+0x427>
c000ffff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010002:	66 83 f8 3f          	cmp    ax,0x3f
c0010006:	76 33                	jbe    c001003b <sendKeyboardToken(KeyboardToken)+0x427>
c0010008:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001000b:	66 83 f8 7f          	cmp    ax,0x7f
c001000f:	77 2a                	ja     c001003b <sendKeyboardToken(KeyboardToken)+0x427>
c0010011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010014:	88 c2                	mov    dl,al
c0010016:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010019:	66 83 f8 5f          	cmp    ax,0x5f
c001001d:	76 04                	jbe    c0010023 <sendKeyboardToken(KeyboardToken)+0x40f>
c001001f:	b0 20                	mov    al,0x20
c0010021:	eb 02                	jmp    c0010025 <sendKeyboardToken(KeyboardToken)+0x411>
c0010023:	b0 00                	mov    al,0x0
c0010025:	29 c2                	sub    edx,eax
c0010027:	88 d0                	mov    al,dl
c0010029:	83 e8 40             	sub    eax,0x40
c001002c:	0f b6 c0             	movzx  eax,al
c001002f:	83 ec 0c             	sub    esp,0xc
c0010032:	50                   	push   eax
c0010033:	e8 1e fb ff ff       	call   c000fb56 <sendKeyToTerminal(unsigned char)>
c0010038:	83 c4 10             	add    esp,0x10
c001003b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001003e:	66 3d 00 03          	cmp    ax,0x300
c0010042:	75 0f                	jne    c0010053 <sendKeyboardToken(KeyboardToken)+0x43f>
c0010044:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0010047:	83 f0 01             	xor    eax,0x1
c001004a:	84 c0                	test   al,al
c001004c:	74 05                	je     c0010053 <sendKeyboardToken(KeyboardToken)+0x43f>
c001004e:	e8 18 ab ff ff       	call   c000ab6b <doTerminalCycle()>
c0010053:	90                   	nop
c0010054:	c9                   	leave  
c0010055:	c3                   	ret    

c0010056 <clearInternalKeybuffer(VgaText*)>:
c0010056:	55                   	push   ebp
c0010057:	89 e5                	mov    ebp,esp
c0010059:	83 ec 08             	sub    esp,0x8
c001005c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001005f:	05 98 01 00 00       	add    eax,0x198
c0010064:	83 ec 0c             	sub    esp,0xc
c0010067:	50                   	push   eax
c0010068:	e8 33 06 ff ff       	call   c00006a0 <strlen>
c001006d:	83 c4 10             	add    esp,0x10
c0010070:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010073:	81 c2 98 01 00 00    	add    edx,0x198
c0010079:	83 ec 04             	sub    esp,0x4
c001007c:	50                   	push   eax
c001007d:	6a 00                	push   0x0
c001007f:	52                   	push   edx
c0010080:	e8 ff 05 ff ff       	call   c0000684 <memset>
c0010085:	83 c4 10             	add    esp,0x10
c0010088:	90                   	nop
c0010089:	c9                   	leave  
c001008a:	c3                   	ret    

c001008b <readKeyboard(VgaText*, char*, unsigned long)>:
c001008b:	55                   	push   ebp
c001008c:	89 e5                	mov    ebp,esp
c001008e:	83 ec 18             	sub    esp,0x18
c0010091:	a1 a8 81 02 c0       	mov    eax,ds:0xc00281a8
c0010096:	85 c0                	test   eax,eax
c0010098:	74 2a                	je     c00100c4 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001009a:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c00100a0:	8b 0d a8 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281a8
c00100a6:	83 ec 04             	sub    esp,0x4
c00100a9:	68 c0 81 02 c0       	push   0xc00281c0
c00100ae:	83 ec 08             	sub    esp,0x8
c00100b1:	89 e2                	mov    edx,esp
c00100b3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00100b6:	89 02                	mov    DWORD PTR [edx],eax
c00100b8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00100bb:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00100bf:	ff d1                	call   ecx
c00100c1:	83 c4 10             	add    esp,0x10
c00100c4:	fb                   	sti    
c00100c5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00100cc:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00100d0:	0f 84 a1 00 00 00    	je     c0010177 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c00100d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100d9:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c00100df:	84 c0                	test   al,al
c00100e1:	75 28                	jne    c001010b <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c00100e3:	fa                   	cli    
c00100e4:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c00100e9:	40                   	inc    eax
c00100ea:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c00100ef:	e8 2c 86 00 00       	call   c0018720 <schedule()>
c00100f4:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c00100f9:	48                   	dec    eax
c00100fa:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c00100ff:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c0010104:	85 c0                	test   eax,eax
c0010106:	75 ce                	jne    c00100d6 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0010108:	fb                   	sti    
c0010109:	eb cb                	jmp    c00100d6 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001010b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001010e:	8d 50 01             	lea    edx,[eax+0x1]
c0010111:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0010114:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010117:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c001011d:	88 10                	mov    BYTE PTR [eax],dl
c001011f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010122:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0010128:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001012b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001012e:	05 98 01 00 00       	add    eax,0x198
c0010133:	83 ec 0c             	sub    esp,0xc
c0010136:	50                   	push   eax
c0010137:	e8 64 05 ff ff       	call   c00006a0 <strlen>
c001013c:	83 c4 10             	add    esp,0x10
c001013f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010142:	81 c2 98 01 00 00    	add    edx,0x198
c0010148:	8d 4a 01             	lea    ecx,[edx+0x1]
c001014b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001014e:	81 c2 98 01 00 00    	add    edx,0x198
c0010154:	83 ec 04             	sub    esp,0x4
c0010157:	50                   	push   eax
c0010158:	51                   	push   ecx
c0010159:	52                   	push   edx
c001015a:	e8 5d 04 ff ff       	call   c00005bc <memmove>
c001015f:	83 c4 10             	add    esp,0x10
c0010162:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0010165:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0010168:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001016c:	0f 85 5a ff ff ff    	jne    c00100cc <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0010172:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0010175:	eb 03                	jmp    c001017a <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0010177:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001017a:	c9                   	leave  
c001017b:	c3                   	ret    

c001017c <Keyboard::Keyboard(char const*)>:
c001017c:	83 ec 0c             	sub    esp,0xc
c001017f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010183:	83 ec 08             	sub    esp,0x8
c0010186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001018a:	50                   	push   eax
c001018b:	e8 b2 e2 ff ff       	call   c000e442 <Device::Device(char const*)>
c0010190:	83 c4 10             	add    esp,0x10
c0010193:	ba 98 50 02 c0       	mov    edx,0xc0025098
c0010198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001019c:	89 10                	mov    DWORD PTR [eax],edx
c001019e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101a2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00101ac:	c6 05 a4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281a4,0x1
c00101b3:	90                   	nop
c00101b4:	83 c4 0c             	add    esp,0xc
c00101b7:	c3                   	ret    

c00101b8 <Keyboard::~Keyboard()>:
c00101b8:	83 ec 0c             	sub    esp,0xc
c00101bb:	ba 98 50 02 c0       	mov    edx,0xc0025098
c00101c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101c4:	89 10                	mov    DWORD PTR [eax],edx
c00101c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101ca:	83 ec 0c             	sub    esp,0xc
c00101cd:	50                   	push   eax
c00101ce:	e8 39 df ff ff       	call   c000e10c <Device::~Device()>
c00101d3:	83 c4 10             	add    esp,0x10
c00101d6:	90                   	nop
c00101d7:	83 c4 0c             	add    esp,0xc
c00101da:	c3                   	ret    
c00101db:	90                   	nop

c00101dc <Keyboard::~Keyboard()>:
c00101dc:	83 ec 0c             	sub    esp,0xc
c00101df:	83 ec 0c             	sub    esp,0xc
c00101e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101e6:	e8 cd ff ff ff       	call   c00101b8 <Keyboard::~Keyboard()>
c00101eb:	83 c4 10             	add    esp,0x10
c00101ee:	83 ec 08             	sub    esp,0x8
c00101f1:	68 5c 01 00 00       	push   0x15c
c00101f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101fa:	e8 1f ca ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00101ff:	83 c4 10             	add    esp,0x10
c0010202:	83 c4 0c             	add    esp,0xc
c0010205:	c3                   	ret    

c0010206 <LogicalDisk::close(int, int, void*)>:
c0010206:	83 c8 ff             	or     eax,0xffffffff
c0010209:	c3                   	ret    

c001020a <LogicalDisk::~LogicalDisk()>:
c001020a:	83 ec 0c             	sub    esp,0xc
c001020d:	ba 4c 51 02 c0       	mov    edx,0xc002514c
c0010212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010216:	89 10                	mov    DWORD PTR [eax],edx
c0010218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001021c:	83 ec 0c             	sub    esp,0xc
c001021f:	50                   	push   eax
c0010220:	e8 e7 de ff ff       	call   c000e10c <Device::~Device()>
c0010225:	83 c4 10             	add    esp,0x10
c0010228:	90                   	nop
c0010229:	83 c4 0c             	add    esp,0xc
c001022c:	c3                   	ret    
c001022d:	90                   	nop

c001022e <LogicalDisk::~LogicalDisk()>:
c001022e:	83 ec 0c             	sub    esp,0xc
c0010231:	83 ec 0c             	sub    esp,0xc
c0010234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010238:	e8 cd ff ff ff       	call   c001020a <LogicalDisk::~LogicalDisk()>
c001023d:	83 c4 10             	add    esp,0x10
c0010240:	83 ec 08             	sub    esp,0x8
c0010243:	68 74 01 00 00       	push   0x174
c0010248:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001024c:	e8 cd c9 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0010251:	83 c4 10             	add    esp,0x10
c0010254:	83 c4 0c             	add    esp,0xc
c0010257:	c3                   	ret    

c0010258 <LogicalDisk::open(int, int, void*)>:
c0010258:	83 ec 18             	sub    esp,0x18
c001025b:	68 c4 50 02 c0       	push   0xc00250c4
c0010260:	e8 56 47 00 00       	call   c00149bb <Krnl::panic(char const*)>
c0010265:	83 c8 ff             	or     eax,0xffffffff
c0010268:	83 c4 1c             	add    esp,0x1c
c001026b:	c3                   	ret    

c001026c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001026c:	53                   	push   ebx
c001026d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010271:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010275:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010279:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001027f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0010285:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001028b:	77 10                	ja     c001029d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001028d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0010293:	89 d3                	mov    ebx,edx
c0010295:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001029b:	72 05                	jb     c00102a2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001029d:	83 c8 ff             	or     eax,0xffffffff
c00102a0:	89 c2                	mov    edx,eax
c00102a2:	5b                   	pop    ebx
c00102a3:	c3                   	ret    

c00102a4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00102a4:	56                   	push   esi
c00102a5:	83 c8 ff             	or     eax,0xffffffff
c00102a8:	53                   	push   ebx
c00102a9:	89 c2                	mov    edx,eax
c00102ab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00102af:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00102b3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00102b7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00102bd:	77 27                	ja     c00102e6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00102bf:	89 d8                	mov    eax,ebx
c00102c1:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00102c7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00102cd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00102d2:	89 c2                	mov    edx,eax
c00102d4:	73 10                	jae    c00102e6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00102d6:	89 c8                	mov    eax,ecx
c00102d8:	89 da                	mov    edx,ebx
c00102da:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00102e0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00102e6:	5b                   	pop    ebx
c00102e7:	5e                   	pop    esi
c00102e8:	c3                   	ret    
c00102e9:	90                   	nop

c00102ea <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00102ea:	83 ec 1c             	sub    esp,0x1c
c00102ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00102f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00102f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00102fd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010301:	89 04 24             	mov    DWORD PTR [esp],eax
c0010304:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010308:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001030c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010310:	83 ec 08             	sub    esp,0x8
c0010313:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010317:	50                   	push   eax
c0010318:	e8 25 e1 ff ff       	call   c000e442 <Device::Device(char const*)>
c001031d:	83 c4 10             	add    esp,0x10
c0010320:	ba 4c 51 02 c0       	mov    edx,0xc002514c
c0010325:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010329:	89 10                	mov    DWORD PTR [eax],edx
c001032b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001032f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010336:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001033a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010345:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001034f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010353:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010357:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001035b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0010361:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0010367:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001036b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001036e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010372:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0010378:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001037e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010382:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010386:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001038c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010390:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001039a:	90                   	nop
c001039b:	83 c4 1c             	add    esp,0x1c
c001039e:	c3                   	ret    
c001039f:	90                   	nop

c00103a0 <LogicalDisk::assignDriveLetter()>:
c00103a0:	55                   	push   ebp
c00103a1:	57                   	push   edi
c00103a2:	56                   	push   esi
c00103a3:	53                   	push   ebx
c00103a4:	83 ec 14             	sub    esp,0x14
c00103a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103ab:	8b 3d e0 85 02 c0    	mov    edi,DWORD PTR ds:0xc00285e0
c00103b1:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00103b7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00103bb:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00103c1:	8b 3d e4 85 02 c0    	mov    edi,DWORD PTR ds:0xc00285e4
c00103c7:	3c 01                	cmp    al,0x1
c00103c9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00103cd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00103d1:	19 c0                	sbb    eax,eax
c00103d3:	83 e0 02             	and    eax,0x2
c00103d6:	83 c0 41             	add    eax,0x41
c00103d9:	0f be e8             	movsx  ebp,al
c00103dc:	3c 43                	cmp    al,0x43
c00103de:	75 10                	jne    c00103f0 <LogicalDisk::assignDriveLetter()+0x50>
c00103e0:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00103e7:	75 5d                	jne    c0010446 <LogicalDisk::assignDriveLetter()+0xa6>
c00103e9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00103ee:	75 56                	jne    c0010446 <LogicalDisk::assignDriveLetter()+0xa6>
c00103f0:	8d 75 bf             	lea    esi,[ebp-0x41]
c00103f3:	ba 01 00 00 00       	mov    edx,0x1
c00103f8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00103fc:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0010400:	d3 e2                	shl    edx,cl
c0010402:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010406:	89 d7                	mov    edi,edx
c0010408:	89 d6                	mov    esi,edx
c001040a:	c1 ff 1f             	sar    edi,0x1f
c001040d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0010411:	21 f9                	and    ecx,edi
c0010413:	09 d1                	or     ecx,edx
c0010415:	75 2f                	jne    c0010446 <LogicalDisk::assignDriveLetter()+0xa6>
c0010417:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001041b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001041f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0010425:	09 f2                	or     edx,esi
c0010427:	89 15 e0 85 02 c0    	mov    DWORD PTR ds:0xc00285e0,edx
c001042d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010431:	09 fa                	or     edx,edi
c0010433:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0010437:	89 15 e4 85 02 c0    	mov    DWORD PTR ds:0xc00285e4,edx
c001043d:	89 1c bd 00 86 02 c0 	mov    DWORD PTR [edi*4-0x3ffd7a00],ebx
c0010444:	eb 08                	jmp    c001044e <LogicalDisk::assignDriveLetter()+0xae>
c0010446:	45                   	inc    ebp
c0010447:	40                   	inc    eax
c0010448:	3c 5b                	cmp    al,0x5b
c001044a:	75 90                	jne    c00103dc <LogicalDisk::assignDriveLetter()+0x3c>
c001044c:	31 c0                	xor    eax,eax
c001044e:	83 c4 14             	add    esp,0x14
c0010451:	5b                   	pop    ebx
c0010452:	5e                   	pop    esi
c0010453:	5f                   	pop    edi
c0010454:	5d                   	pop    ebp
c0010455:	c3                   	ret    

c0010456 <LogicalDisk::mount()>:
c0010456:	56                   	push   esi
c0010457:	53                   	push   ebx
c0010458:	83 ec 1c             	sub    esp,0x1c
c001045b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001045f:	8b 1d 74 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028174
c0010465:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001046c:	50                   	push   eax
c001046d:	68 e8 50 02 c0       	push   0xc00250e8
c0010472:	e8 88 c8 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0010477:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0010481:	83 c4 10             	add    esp,0x10
c0010484:	85 db                	test   ebx,ebx
c0010486:	74 3f                	je     c00104c7 <LogicalDisk::mount()+0x71>
c0010488:	50                   	push   eax
c0010489:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0010490:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010492:	83 e8 41             	sub    eax,0x41
c0010495:	50                   	push   eax
c0010496:	56                   	push   esi
c0010497:	53                   	push   ebx
c0010498:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001049b:	83 c4 10             	add    esp,0x10
c001049e:	84 c0                	test   al,al
c00104a0:	74 20                	je     c00104c2 <LogicalDisk::mount()+0x6c>
c00104a2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00104a6:	83 ec 0c             	sub    esp,0xc
c00104a9:	68 09 51 02 c0       	push   0xc0025109
c00104ae:	e8 4c c8 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00104b3:	83 c4 10             	add    esp,0x10
c00104b6:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00104bc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00104c0:	eb 07                	jmp    c00104c9 <LogicalDisk::mount()+0x73>
c00104c2:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00104c5:	eb bd                	jmp    c0010484 <LogicalDisk::mount()+0x2e>
c00104c7:	31 c0                	xor    eax,eax
c00104c9:	83 c4 14             	add    esp,0x14
c00104cc:	5b                   	pop    ebx
c00104cd:	5e                   	pop    esi
c00104ce:	c3                   	ret    
c00104cf:	90                   	nop

c00104d0 <LogicalDisk::unmount()>:
c00104d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00104de:	c3                   	ret    
c00104df:	90                   	nop

c00104e0 <LogicalDisk::eject()>:
c00104e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104e4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00104ea:	8b 10                	mov    edx,DWORD PTR [eax]
c00104ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00104f0:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00104f3:	90                   	nop

c00104f4 <LogicalDisk::unassignDriveLetter()>:
c00104f4:	57                   	push   edi
c00104f5:	56                   	push   esi
c00104f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00104fa:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0010501:	84 c9                	test   cl,cl
c0010503:	75 0f                	jne    c0010514 <LogicalDisk::unassignDriveLetter()+0x20>
c0010505:	c7 44 24 0c 22 51 02 c0 	mov    DWORD PTR [esp+0xc],0xc0025122
c001050d:	5e                   	pop    esi
c001050e:	5f                   	pop    edi
c001050f:	e9 a7 44 00 00       	jmp    c00149bb <Krnl::panic(char const*)>
c0010514:	83 e9 41             	sub    ecx,0x41
c0010517:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001051e:	b8 01 00 00 00       	mov    eax,0x1
c0010523:	c7 04 8d 00 86 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7a00],0x0
c001052e:	d3 e0                	shl    eax,cl
c0010530:	89 c7                	mov    edi,eax
c0010532:	f7 d0                	not    eax
c0010534:	c1 ff 1f             	sar    edi,0x1f
c0010537:	21 05 e0 85 02 c0    	and    DWORD PTR ds:0xc00285e0,eax
c001053d:	89 fe                	mov    esi,edi
c001053f:	f7 d6                	not    esi
c0010541:	21 35 e4 85 02 c0    	and    DWORD PTR ds:0xc00285e4,esi
c0010547:	5e                   	pop    esi
c0010548:	5f                   	pop    edi
c0010549:	c3                   	ret    

c001054a <LogicalDisk::read(unsigned long long, int, void*)>:
c001054a:	57                   	push   edi
c001054b:	56                   	push   esi
c001054c:	53                   	push   ebx
c001054d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010551:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010555:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010559:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001055d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010563:	77 41                	ja     c00105a6 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0010565:	99                   	cdq    
c0010566:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001056c:	01 c8                	add    eax,ecx
c001056e:	11 da                	adc    edx,ebx
c0010570:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010576:	19 d7                	sbb    edi,edx
c0010578:	72 33                	jb     c00105ad <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001057a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010580:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010586:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001058a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001058e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010594:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001059a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001059e:	5b                   	pop    ebx
c001059f:	5e                   	pop    esi
c00105a0:	5f                   	pop    edi
c00105a1:	e9 e4 0a 00 00       	jmp    c001108a <VCache::read(unsigned long long, int, void*)>
c00105a6:	b8 05 00 00 00       	mov    eax,0x5
c00105ab:	eb 05                	jmp    c00105b2 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00105ad:	b8 07 00 00 00       	mov    eax,0x7
c00105b2:	5b                   	pop    ebx
c00105b3:	5e                   	pop    esi
c00105b4:	5f                   	pop    edi
c00105b5:	c3                   	ret    

c00105b6 <LogicalDisk::write(unsigned long long, int, void*)>:
c00105b6:	57                   	push   edi
c00105b7:	56                   	push   esi
c00105b8:	53                   	push   ebx
c00105b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00105bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00105c1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00105c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00105c9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00105cf:	77 41                	ja     c0010612 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00105d1:	99                   	cdq    
c00105d2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00105d8:	01 c8                	add    eax,ecx
c00105da:	11 da                	adc    edx,ebx
c00105dc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00105e2:	19 d7                	sbb    edi,edx
c00105e4:	72 33                	jb     c0010619 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00105e6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00105ec:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00105f2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00105f6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00105fa:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010600:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010606:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001060a:	5b                   	pop    ebx
c001060b:	5e                   	pop    esi
c001060c:	5f                   	pop    edi
c001060d:	e9 7e 09 00 00       	jmp    c0010f90 <VCache::write(unsigned long long, int, void*)>
c0010612:	b8 05 00 00 00       	mov    eax,0x5
c0010617:	eb 05                	jmp    c001061e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0010619:	b8 07 00 00 00       	mov    eax,0x7
c001061e:	5b                   	pop    ebx
c001061f:	5e                   	pop    esi
c0010620:	5f                   	pop    edi
c0010621:	c3                   	ret    
c0010622:	66 90                	xchg   ax,ax

c0010624 <Mouse::Mouse(char const*)>:
c0010624:	83 ec 0c             	sub    esp,0xc
c0010627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001062b:	83 ec 08             	sub    esp,0x8
c001062e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010632:	50                   	push   eax
c0010633:	e8 0a de ff ff       	call   c000e442 <Device::Device(char const*)>
c0010638:	83 c4 10             	add    esp,0x10
c001063b:	ba 78 51 02 c0       	mov    edx,0xc0025178
c0010640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010644:	89 10                	mov    DWORD PTR [eax],edx
c0010646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001064a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0010654:	90                   	nop
c0010655:	83 c4 0c             	add    esp,0xc
c0010658:	c3                   	ret    
c0010659:	90                   	nop
c001065a:	66 90                	xchg   ax,ax

c001065c <Mouse::~Mouse()>:
c001065c:	83 ec 0c             	sub    esp,0xc
c001065f:	ba 78 51 02 c0       	mov    edx,0xc0025178
c0010664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010668:	89 10                	mov    DWORD PTR [eax],edx
c001066a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001066e:	83 ec 0c             	sub    esp,0xc
c0010671:	50                   	push   eax
c0010672:	e8 95 da ff ff       	call   c000e10c <Device::~Device()>
c0010677:	83 c4 10             	add    esp,0x10
c001067a:	90                   	nop
c001067b:	83 c4 0c             	add    esp,0xc
c001067e:	c3                   	ret    
c001067f:	90                   	nop

c0010680 <Mouse::~Mouse()>:
c0010680:	83 ec 0c             	sub    esp,0xc
c0010683:	83 ec 0c             	sub    esp,0xc
c0010686:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001068a:	e8 cd ff ff ff       	call   c001065c <Mouse::~Mouse()>
c001068f:	83 c4 10             	add    esp,0x10
c0010692:	83 ec 08             	sub    esp,0x8
c0010695:	68 58 01 00 00       	push   0x158
c001069a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001069e:	e8 7b c5 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00106a3:	83 c4 10             	add    esp,0x10
c00106a6:	83 c4 0c             	add    esp,0xc
c00106a9:	c3                   	ret    

c00106aa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00106aa:	55                   	push   ebp
c00106ab:	57                   	push   edi
c00106ac:	56                   	push   esi
c00106ad:	53                   	push   ebx
c00106ae:	81 ec 28 01 00 00    	sub    esp,0x128
c00106b4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00106bb:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00106c2:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00106c9:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00106d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00106d4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00106d8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00106df:	e8 5a de ff ff       	call   c000e53e <Device::getName()>
c00106e4:	5a                   	pop    edx
c00106e5:	59                   	pop    ecx
c00106e6:	50                   	push   eax
c00106e7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00106eb:	55                   	push   ebp
c00106ec:	e8 4f 00 ff ff       	call   c0000740 <strcpy>
c00106f1:	5b                   	pop    ebx
c00106f2:	58                   	pop    eax
c00106f3:	68 9c 51 02 c0       	push   0xc002519c
c00106f8:	55                   	push   ebp
c00106f9:	e8 82 01 ff ff       	call   c0000880 <strcat>
c00106fe:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010705:	e8 05 93 ff ff       	call   c0009a0f <malloc>
c001070a:	83 c4 0c             	add    esp,0xc
c001070d:	89 c3                	mov    ebx,eax
c001070f:	57                   	push   edi
c0010710:	56                   	push   esi
c0010711:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010715:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010719:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0010720:	55                   	push   ebp
c0010721:	50                   	push   eax
c0010722:	e8 c3 fb ff ff       	call   c00102ea <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0010727:	83 c4 14             	add    esp,0x14
c001072a:	53                   	push   ebx
c001072b:	e8 70 fc ff ff       	call   c00103a0 <LogicalDisk::assignDriveLetter()>
c0010730:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010733:	e8 1e fd ff ff       	call   c0010456 <LogicalDisk::mount()>
c0010738:	58                   	pop    eax
c0010739:	5a                   	pop    edx
c001073a:	53                   	push   ebx
c001073b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010742:	e8 f7 da ff ff       	call   c000e23e <Device::addChild(Device*)>
c0010747:	81 c4 2c 01 00 00    	add    esp,0x12c
c001074d:	5b                   	pop    ebx
c001074e:	5e                   	pop    esi
c001074f:	5f                   	pop    edi
c0010750:	5d                   	pop    ebp
c0010751:	c3                   	ret    

c0010752 <createPartitionsForDisk(PhysicalDisk*)>:
c0010752:	55                   	push   ebp
c0010753:	57                   	push   edi
c0010754:	56                   	push   esi
c0010755:	53                   	push   ebx
c0010756:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001075c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0010763:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0010769:	3d 00 02 00 00       	cmp    eax,0x200
c001076e:	74 27                	je     c0010797 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0010770:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0010776:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001077c:	83 ec 10             	sub    esp,0x10
c001077f:	0f a4 f7 0a          	shld   edi,esi,0xa
c0010783:	99                   	cdq    
c0010784:	c1 e6 0a             	shl    esi,0xa
c0010787:	52                   	push   edx
c0010788:	89 fd                	mov    ebp,edi
c001078a:	50                   	push   eax
c001078b:	55                   	push   ebp
c001078c:	56                   	push   esi
c001078d:	e8 f2 1f 01 00       	call   c0022784 <__udivdi3>
c0010792:	e9 b1 00 00 00       	jmp    c0010848 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010797:	83 ec 0c             	sub    esp,0xc
c001079a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001079c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00107a0:	56                   	push   esi
c00107a1:	6a 01                	push   0x1
c00107a3:	6a 00                	push   0x0
c00107a5:	6a 00                	push   0x0
c00107a7:	53                   	push   ebx
c00107a8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00107ab:	83 c4 20             	add    esp,0x20
c00107ae:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00107b6:	75 0a                	jne    c00107c2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00107b8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00107c0:	74 2c                	je     c00107ee <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00107c2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00107c8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00107ce:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00107d4:	83 ec 10             	sub    esp,0x10
c00107d7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00107db:	89 f7                	mov    edi,esi
c00107dd:	c1 e0 0a             	shl    eax,0xa
c00107e0:	c1 ff 1f             	sar    edi,0x1f
c00107e3:	57                   	push   edi
c00107e4:	56                   	push   esi
c00107e5:	52                   	push   edx
c00107e6:	50                   	push   eax
c00107e7:	e8 98 1f 01 00       	call   c0022784 <__udivdi3>
c00107ec:	eb 5a                	jmp    c0010848 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00107ee:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00107f5:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00107fc:	83 e1 7f             	and    ecx,0x7f
c00107ff:	83 e0 7f             	and    eax,0x7f
c0010802:	01 c1                	add    ecx,eax
c0010804:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001080b:	83 e0 7f             	and    eax,0x7f
c001080e:	01 c1                	add    ecx,eax
c0010810:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0010817:	83 e0 7f             	and    eax,0x7f
c001081a:	00 c1                	add    cl,al
c001081c:	74 41                	je     c001085f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001081e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010824:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001082a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010830:	83 ec 10             	sub    esp,0x10
c0010833:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010837:	89 f7                	mov    edi,esi
c0010839:	c1 e0 0a             	shl    eax,0xa
c001083c:	c1 ff 1f             	sar    edi,0x1f
c001083f:	57                   	push   edi
c0010840:	56                   	push   esi
c0010841:	52                   	push   edx
c0010842:	50                   	push   eax
c0010843:	e8 3c 1f 01 00       	call   c0022784 <__udivdi3>
c0010848:	83 c4 14             	add    esp,0x14
c001084b:	52                   	push   edx
c001084c:	50                   	push   eax
c001084d:	6a 00                	push   0x0
c001084f:	6a 00                	push   0x0
c0010851:	53                   	push   ebx
c0010852:	e8 53 fe ff ff       	call   c00106aa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010857:	83 c4 20             	add    esp,0x20
c001085a:	e9 79 01 00 00       	jmp    c00109d8 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001085f:	89 f0                	mov    eax,esi
c0010861:	31 f6                	xor    esi,esi
c0010863:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001086a:	75 02                	jne    c001086e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001086c:	89 f1                	mov    ecx,esi
c001086e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0010875:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001087c:	c1 e2 08             	shl    edx,0x8
c001087f:	c1 e7 10             	shl    edi,0x10
c0010882:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001088a:	09 fa                	or     edx,edi
c001088c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0010894:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001089b:	83 c0 10             	add    eax,0x10
c001089e:	09 fa                	or     edx,edi
c00108a0:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00108a7:	c1 e7 18             	shl    edi,0x18
c00108aa:	09 fa                	or     edx,edi
c00108ac:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00108b3:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00108b7:	c1 e7 10             	shl    edi,0x10
c00108ba:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00108c1:	c1 e2 08             	shl    edx,0x8
c00108c4:	09 fa                	or     edx,edi
c00108c6:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00108cd:	09 fa                	or     edx,edi
c00108cf:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00108d6:	c1 e7 18             	shl    edi,0x18
c00108d9:	09 fa                	or     edx,edi
c00108db:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00108df:	46                   	inc    esi
c00108e0:	83 fe 04             	cmp    esi,0x4
c00108e3:	0f 85 7a ff ff ff    	jne    c0010863 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00108e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ed:	83 f0 01             	xor    eax,0x1
c00108f0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00108f4:	75 57                	jne    c001094d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00108f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00108fa:	83 f0 01             	xor    eax,0x1
c00108fd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010901:	75 4a                	jne    c001094d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010903:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010907:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001090f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010917:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001091d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010923:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010929:	0f a4 c2 0a          	shld   edx,eax,0xa
c001092d:	89 f7                	mov    edi,esi
c001092f:	c1 e0 0a             	shl    eax,0xa
c0010932:	c1 ff 1f             	sar    edi,0x1f
c0010935:	57                   	push   edi
c0010936:	56                   	push   esi
c0010937:	52                   	push   edx
c0010938:	50                   	push   eax
c0010939:	e8 46 1e 01 00       	call   c0022784 <__udivdi3>
c001093e:	83 c4 10             	add    esp,0x10
c0010941:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010945:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010949:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001094d:	84 c9                	test   cl,cl
c001094f:	74 53                	je     c00109a4 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010951:	0f b6 c9             	movzx  ecx,cl
c0010954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010958:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001095c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010960:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010968:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001096c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0010970:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0010974:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010978:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001097c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010980:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010984:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0010988:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001098c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010990:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0010994:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010998:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001099c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00109a0:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00109a4:	31 ed                	xor    ebp,ebp
c00109a6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00109aa:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00109ae:	89 f8                	mov    eax,edi
c00109b0:	09 f0                	or     eax,esi
c00109b2:	74 1e                	je     c00109d2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00109b4:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00109b8:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00109bc:	89 d1                	mov    ecx,edx
c00109be:	09 c1                	or     ecx,eax
c00109c0:	74 10                	je     c00109d2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00109c2:	83 ec 0c             	sub    esp,0xc
c00109c5:	57                   	push   edi
c00109c6:	56                   	push   esi
c00109c7:	52                   	push   edx
c00109c8:	50                   	push   eax
c00109c9:	53                   	push   ebx
c00109ca:	e8 db fc ff ff       	call   c00106aa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00109cf:	83 c4 20             	add    esp,0x20
c00109d2:	45                   	inc    ebp
c00109d3:	83 fd 04             	cmp    ebp,0x4
c00109d6:	75 ce                	jne    c00109a6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00109d8:	81 c4 5c 02 00 00    	add    esp,0x25c
c00109de:	5b                   	pop    ebx
c00109df:	5e                   	pop    esi
c00109e0:	5f                   	pop    edi
c00109e1:	5d                   	pop    ebp
c00109e2:	c3                   	ret    
c00109e3:	90                   	nop

c00109e4 <Serial::Serial(char const*)>:
c00109e4:	83 ec 0c             	sub    esp,0xc
c00109e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109eb:	83 ec 08             	sub    esp,0x8
c00109ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109f2:	50                   	push   eax
c00109f3:	e8 4a da ff ff       	call   c000e442 <Device::Device(char const*)>
c00109f8:	83 c4 10             	add    esp,0x10
c00109fb:	ba b0 51 02 c0       	mov    edx,0xc00251b0
c0010a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a04:	89 10                	mov    DWORD PTR [eax],edx
c0010a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a0a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010a14:	90                   	nop
c0010a15:	83 c4 0c             	add    esp,0xc
c0010a18:	c3                   	ret    
c0010a19:	90                   	nop
c0010a1a:	66 90                	xchg   ax,ax

c0010a1c <Serial::~Serial()>:
c0010a1c:	83 ec 0c             	sub    esp,0xc
c0010a1f:	ba b0 51 02 c0       	mov    edx,0xc00251b0
c0010a24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a28:	89 10                	mov    DWORD PTR [eax],edx
c0010a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a2e:	83 ec 0c             	sub    esp,0xc
c0010a31:	50                   	push   eax
c0010a32:	e8 d5 d6 ff ff       	call   c000e10c <Device::~Device()>
c0010a37:	83 c4 10             	add    esp,0x10
c0010a3a:	90                   	nop
c0010a3b:	83 c4 0c             	add    esp,0xc
c0010a3e:	c3                   	ret    
c0010a3f:	90                   	nop

c0010a40 <Serial::~Serial()>:
c0010a40:	83 ec 0c             	sub    esp,0xc
c0010a43:	83 ec 0c             	sub    esp,0xc
c0010a46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a4a:	e8 cd ff ff ff       	call   c0010a1c <Serial::~Serial()>
c0010a4f:	83 c4 10             	add    esp,0x10
c0010a52:	83 ec 08             	sub    esp,0x8
c0010a55:	68 58 01 00 00       	push   0x158
c0010a5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a5e:	e8 bb c1 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0010a63:	83 c4 10             	add    esp,0x10
c0010a66:	83 c4 0c             	add    esp,0xc
c0010a69:	c3                   	ret    
c0010a6a:	66 90                	xchg   ax,ax

c0010a6c <Timer::Timer(char const*)>:
c0010a6c:	83 ec 0c             	sub    esp,0xc
c0010a6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a73:	83 ec 08             	sub    esp,0x8
c0010a76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a7a:	50                   	push   eax
c0010a7b:	e8 c2 d9 ff ff       	call   c000e442 <Device::Device(char const*)>
c0010a80:	83 c4 10             	add    esp,0x10
c0010a83:	ba f4 51 02 c0       	mov    edx,0xc00251f4
c0010a88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a8c:	89 10                	mov    DWORD PTR [eax],edx
c0010a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a92:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0010a9c:	90                   	nop
c0010a9d:	83 c4 0c             	add    esp,0xc
c0010aa0:	c3                   	ret    
c0010aa1:	90                   	nop
c0010aa2:	66 90                	xchg   ax,ax

c0010aa4 <Timer::~Timer()>:
c0010aa4:	83 ec 0c             	sub    esp,0xc
c0010aa7:	ba f4 51 02 c0       	mov    edx,0xc00251f4
c0010aac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ab0:	89 10                	mov    DWORD PTR [eax],edx
c0010ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ab6:	83 ec 0c             	sub    esp,0xc
c0010ab9:	50                   	push   eax
c0010aba:	e8 4d d6 ff ff       	call   c000e10c <Device::~Device()>
c0010abf:	83 c4 10             	add    esp,0x10
c0010ac2:	90                   	nop
c0010ac3:	83 c4 0c             	add    esp,0xc
c0010ac6:	c3                   	ret    
c0010ac7:	90                   	nop

c0010ac8 <Timer::~Timer()>:
c0010ac8:	83 ec 0c             	sub    esp,0xc
c0010acb:	83 ec 0c             	sub    esp,0xc
c0010ace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ad2:	e8 cd ff ff ff       	call   c0010aa4 <Timer::~Timer()>
c0010ad7:	83 c4 10             	add    esp,0x10
c0010ada:	83 ec 08             	sub    esp,0x8
c0010add:	68 5c 01 00 00       	push   0x15c
c0010ae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ae6:	e8 33 c1 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0010aeb:	83 c4 10             	add    esp,0x10
c0010aee:	83 c4 0c             	add    esp,0xc
c0010af1:	c3                   	ret    

c0010af2 <Timer::read()>:
c0010af2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010af6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010afc:	c3                   	ret    

c0010afd <timerHandler(unsigned int)>:
c0010afd:	56                   	push   esi
c0010afe:	53                   	push   ebx
c0010aff:	51                   	push   ecx
c0010b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b04:	01 05 6c 86 02 c0    	add    DWORD PTR ds:0xc002866c,eax
c0010b0a:	80 3d 4d 80 02 c0 00 	cmp    BYTE PTR ds:0xc002804d,0x0
c0010b11:	0f 84 49 01 00 00    	je     c0010c60 <timerHandler(unsigned int)+0x163>
c0010b17:	fa                   	cli    
c0010b18:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c0010b1e:	83 ec 0c             	sub    esp,0xc
c0010b21:	ff 05 64 95 02 c0    	inc    DWORD PTR ds:0xc0029564
c0010b27:	68 78 95 02 c0       	push   0xc0029578
c0010b2c:	e8 23 22 01 00       	call   c0022d54 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010b31:	83 c4 10             	add    esp,0x10
c0010b34:	84 c0                	test   al,al
c0010b36:	0f 85 a0 00 00 00    	jne    c0010bdc <timerHandler(unsigned int)+0xdf>
c0010b3c:	83 ec 0c             	sub    esp,0xc
c0010b3f:	68 78 95 02 c0       	push   0xc0029578
c0010b44:	e8 27 22 01 00       	call   c0022d70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010b49:	83 c4 10             	add    esp,0x10
c0010b4c:	89 c6                	mov    esi,eax
c0010b4e:	66 90                	xchg   ax,ax
c0010b50:	83 ec 0c             	sub    esp,0xc
c0010b53:	68 78 95 02 c0       	push   0xc0029578
c0010b58:	e8 13 22 01 00       	call   c0022d70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010b5d:	c7 04 24 78 95 02 c0 	mov    DWORD PTR [esp],0xc0029578
c0010b64:	89 c3                	mov    ebx,eax
c0010b66:	e8 0d 22 01 00       	call   c0022d78 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0010b6b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010b6e:	83 c4 10             	add    esp,0x10
c0010b71:	3b 05 6c 86 02 c0    	cmp    eax,DWORD PTR ds:0xc002866c
c0010b77:	77 23                	ja     c0010b9c <timerHandler(unsigned int)+0x9f>
c0010b79:	83 ec 0c             	sub    esp,0xc
c0010b7c:	53                   	push   ebx
c0010b7d:	e8 5a 80 00 00       	call   c0018bdc <unblockTask(ThreadControlBlock*)>
c0010b82:	83 c4 10             	add    esp,0x10
c0010b85:	39 de                	cmp    esi,ebx
c0010b87:	75 27                	jne    c0010bb0 <timerHandler(unsigned int)+0xb3>
c0010b89:	83 ec 0c             	sub    esp,0xc
c0010b8c:	68 78 95 02 c0       	push   0xc0029578
c0010b91:	e8 da 21 01 00       	call   c0022d70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010b96:	89 c6                	mov    esi,eax
c0010b98:	eb 12                	jmp    c0010bac <timerHandler(unsigned int)+0xaf>
c0010b9a:	66 90                	xchg   ax,ax
c0010b9c:	52                   	push   edx
c0010b9d:	52                   	push   edx
c0010b9e:	53                   	push   ebx
c0010b9f:	68 78 95 02 c0       	push   0xc0029578
c0010ba4:	e8 87 22 01 00       	call   c0022e30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0010ba9:	8d 76 00             	lea    esi,[esi+0x0]
c0010bac:	83 c4 10             	add    esp,0x10
c0010baf:	90                   	nop
c0010bb0:	83 ec 0c             	sub    esp,0xc
c0010bb3:	68 78 95 02 c0       	push   0xc0029578
c0010bb8:	e8 97 21 01 00       	call   c0022d54 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010bbd:	83 c4 10             	add    esp,0x10
c0010bc0:	84 c0                	test   al,al
c0010bc2:	75 18                	jne    c0010bdc <timerHandler(unsigned int)+0xdf>
c0010bc4:	83 ec 0c             	sub    esp,0xc
c0010bc7:	68 78 95 02 c0       	push   0xc0029578
c0010bcc:	e8 9f 21 01 00       	call   c0022d70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010bd1:	83 c4 10             	add    esp,0x10
c0010bd4:	39 f0                	cmp    eax,esi
c0010bd6:	0f 85 74 ff ff ff    	jne    c0010b50 <timerHandler(unsigned int)+0x53>
c0010bdc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010be1:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0010be5:	74 41                	je     c0010c28 <timerHandler(unsigned int)+0x12b>
c0010be7:	80 3d 4c 80 02 c0 00 	cmp    BYTE PTR ds:0xc002804c,0x0
c0010bee:	74 38                	je     c0010c28 <timerHandler(unsigned int)+0x12b>
c0010bf0:	fa                   	cli    
c0010bf1:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c0010bf7:	a1 6c 86 02 c0       	mov    eax,ds:0xc002866c
c0010bfc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010c02:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0010c05:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010c0b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c0010c0e:	72 08                	jb     c0010c18 <timerHandler(unsigned int)+0x11b>
c0010c10:	e8 0b 7b 00 00       	call   c0018720 <schedule()>
c0010c15:	8d 76 00             	lea    esi,[esi+0x0]
c0010c18:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c0010c1d:	48                   	dec    eax
c0010c1e:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c0010c23:	75 03                	jne    c0010c28 <timerHandler(unsigned int)+0x12b>
c0010c25:	fb                   	sti    
c0010c26:	66 90                	xchg   ax,ax
c0010c28:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c0010c2d:	48                   	dec    eax
c0010c2e:	a3 64 95 02 c0       	mov    ds:0xc0029564,eax
c0010c33:	75 1b                	jne    c0010c50 <timerHandler(unsigned int)+0x153>
c0010c35:	83 3d 60 95 02 c0 00 	cmp    DWORD PTR ds:0xc0029560,0x0
c0010c3c:	74 12                	je     c0010c50 <timerHandler(unsigned int)+0x153>
c0010c3e:	c7 05 60 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029560,0x0
c0010c48:	e8 d3 7a 00 00       	call   c0018720 <schedule()>
c0010c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0010c50:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c0010c55:	48                   	dec    eax
c0010c56:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c0010c5b:	75 03                	jne    c0010c60 <timerHandler(unsigned int)+0x163>
c0010c5d:	fb                   	sti    
c0010c5e:	66 90                	xchg   ax,ax
c0010c60:	58                   	pop    eax
c0010c61:	5b                   	pop    ebx
c0010c62:	5e                   	pop    esi
c0010c63:	c3                   	ret    

c0010c64 <setupTimer(int)>:
c0010c64:	57                   	push   edi
c0010c65:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0010c6a:	56                   	push   esi
c0010c6b:	53                   	push   ebx
c0010c6c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c70:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c76:	83 ec 0c             	sub    esp,0xc
c0010c79:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010c7f:	e8 ba d8 ff ff       	call   c000e53e <Device::getName()>
c0010c84:	83 c4 10             	add    esp,0x10
c0010c87:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010c8a:	0f 85 94 00 00 00    	jne    c0010d24 <setupTimer(int)+0xc0>
c0010c90:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0010c95:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0010c9c:	0f 84 82 00 00 00    	je     c0010d24 <setupTimer(int)+0xc0>
c0010ca2:	83 ec 0c             	sub    esp,0xc
c0010ca5:	68 5c 01 00 00       	push   0x15c
c0010caa:	e8 60 8d ff ff       	call   c0009a0f <malloc>
c0010caf:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cb2:	89 c3                	mov    ebx,eax
c0010cb4:	e8 9b 16 01 00       	call   c0022354 <PIT::PIT()>
c0010cb9:	59                   	pop    ecx
c0010cba:	5f                   	pop    edi
c0010cbb:	53                   	push   ebx
c0010cbc:	ff 35 48 80 02 c0    	push   DWORD PTR ds:0xc0028048
c0010cc2:	e8 77 d5 ff ff       	call   c000e23e <Device::addChild(Device*)>
c0010cc7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010cc9:	6a 00                	push   0x0
c0010ccb:	6a 00                	push   0x0
c0010ccd:	56                   	push   esi
c0010cce:	53                   	push   ebx
c0010ccf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010cd2:	83 c4 14             	add    esp,0x14
c0010cd5:	68 60 01 00 00       	push   0x160
c0010cda:	e8 30 8d ff ff       	call   c0009a0f <malloc>
c0010cdf:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ce2:	89 c7                	mov    edi,eax
c0010ce4:	e8 1f 15 01 00       	call   c0022208 <APICTimer::APICTimer()>
c0010ce9:	6a 00                	push   0x0
c0010ceb:	6a 00                	push   0x0
c0010ced:	56                   	push   esi
c0010cee:	57                   	push   edi
c0010cef:	e8 14 14 01 00       	call   c0022108 <APICTimer::open(int, int, void*)>
c0010cf4:	83 c4 20             	add    esp,0x20
c0010cf7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010cf9:	6a 00                	push   0x0
c0010cfb:	6a 00                	push   0x0
c0010cfd:	6a 00                	push   0x0
c0010cff:	53                   	push   ebx
c0010d00:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010d03:	58                   	pop    eax
c0010d04:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0010d09:	5a                   	pop    edx
c0010d0a:	57                   	push   edi
c0010d0b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010d11:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010d17:	e8 22 d5 ff ff       	call   c000e23e <Device::addChild(Device*)>
c0010d1c:	83 c4 10             	add    esp,0x10
c0010d1f:	eb 37                	jmp    c0010d58 <setupTimer(int)+0xf4>
c0010d21:	8d 76 00             	lea    esi,[esi+0x0]
c0010d24:	83 ec 0c             	sub    esp,0xc
c0010d27:	68 5c 01 00 00       	push   0x15c
c0010d2c:	e8 de 8c ff ff       	call   c0009a0f <malloc>
c0010d31:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d34:	89 c3                	mov    ebx,eax
c0010d36:	e8 19 16 01 00       	call   c0022354 <PIT::PIT()>
c0010d3b:	58                   	pop    eax
c0010d3c:	5a                   	pop    edx
c0010d3d:	53                   	push   ebx
c0010d3e:	ff 35 48 80 02 c0    	push   DWORD PTR ds:0xc0028048
c0010d44:	e8 f5 d4 ff ff       	call   c000e23e <Device::addChild(Device*)>
c0010d49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d4b:	6a 00                	push   0x0
c0010d4d:	6a 00                	push   0x0
c0010d4f:	56                   	push   esi
c0010d50:	53                   	push   ebx
c0010d51:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010d54:	83 c4 20             	add    esp,0x20
c0010d57:	90                   	nop
c0010d58:	89 d8                	mov    eax,ebx
c0010d5a:	5b                   	pop    ebx
c0010d5b:	5e                   	pop    esi
c0010d5c:	5f                   	pop    edi
c0010d5d:	c3                   	ret    
c0010d5e:	66 90                	xchg   ax,ax

c0010d60 <VCache::VCache(PhysicalDisk*)>:
c0010d60:	53                   	push   ebx
c0010d61:	83 ec 18             	sub    esp,0x18
c0010d64:	ba 24 52 02 c0       	mov    edx,0xc0025224
c0010d69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d6d:	89 10                	mov    DWORD PTR [eax],edx
c0010d6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d73:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0010d7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d7e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0010d85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d89:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0010d90:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0010d97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d9b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0010da2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010da9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dad:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0010db4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010db8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010dbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dc0:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0010dc7:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0010dce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dd2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010dd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dda:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0010dde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010de2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010de6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dea:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010df1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0010df9:	83 ec 0c             	sub    esp,0xc
c0010dfc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e00:	e8 0a 8c ff ff       	call   c0009a0f <malloc>
c0010e05:	83 c4 10             	add    esp,0x10
c0010e08:	89 c3                	mov    ebx,eax
c0010e0a:	83 ec 0c             	sub    esp,0xc
c0010e0d:	53                   	push   ebx
c0010e0e:	e8 dd 76 00 00       	call   c00184f0 <Mutex::Mutex()>
c0010e13:	83 c4 10             	add    esp,0x10
c0010e16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e1a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010e1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e21:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010e25:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010e28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e2c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0010e33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010e37:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010e3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e41:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010e44:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010e48:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010e4e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010e54:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010e58:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010e5b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010e5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e62:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010e66:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010e6a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010e70:	05 00 01 00 00       	add    eax,0x100
c0010e75:	c1 e0 04             	shl    eax,0x4
c0010e78:	83 ec 0c             	sub    esp,0xc
c0010e7b:	50                   	push   eax
c0010e7c:	e8 8e 8b ff ff       	call   c0009a0f <malloc>
c0010e81:	83 c4 10             	add    esp,0x10
c0010e84:	89 c2                	mov    edx,eax
c0010e86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e8a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010e8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e91:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010e98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e9c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010ea0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010ea4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010eaa:	c1 e0 06             	shl    eax,0x6
c0010ead:	83 ec 0c             	sub    esp,0xc
c0010eb0:	50                   	push   eax
c0010eb1:	e8 59 8b ff ff       	call   c0009a0f <malloc>
c0010eb6:	83 c4 10             	add    esp,0x10
c0010eb9:	89 c2                	mov    edx,eax
c0010ebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ebf:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010ec2:	90                   	nop
c0010ec3:	83 c4 18             	add    esp,0x18
c0010ec6:	5b                   	pop    ebx
c0010ec7:	c3                   	ret    

c0010ec8 <VCache::invalidateReadBuffer()>:
c0010ec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ecc:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010ed2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010ed6:	c3                   	ret    
c0010ed7:	90                   	nop

c0010ed8 <VCache::writeWriteBuffer()>:
c0010ed8:	53                   	push   ebx
c0010ed9:	83 ec 14             	sub    esp,0x14
c0010edc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010ee0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010ee3:	8b 10                	mov    edx,DWORD PTR [eax]
c0010ee5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010ee8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010eeb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010eee:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010ef1:	50                   	push   eax
c0010ef2:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010ef5:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010efc:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010f03:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010f07:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010f0e:	83 c4 28             	add    esp,0x28
c0010f11:	5b                   	pop    ebx
c0010f12:	c3                   	ret    
c0010f13:	90                   	nop

c0010f14 <VCache::~VCache()>:
c0010f14:	83 ec 0c             	sub    esp,0xc
c0010f17:	ba 24 52 02 c0       	mov    edx,0xc0025224
c0010f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f20:	89 10                	mov    DWORD PTR [eax],edx
c0010f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f26:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010f29:	84 c0                	test   al,al
c0010f2b:	74 0f                	je     c0010f3c <VCache::~VCache()+0x28>
c0010f2d:	83 ec 0c             	sub    esp,0xc
c0010f30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f34:	e8 9f ff ff ff       	call   c0010ed8 <VCache::writeWriteBuffer()>
c0010f39:	83 c4 10             	add    esp,0x10
c0010f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f40:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010f43:	83 ec 0c             	sub    esp,0xc
c0010f46:	50                   	push   eax
c0010f47:	e8 d3 8a ff ff       	call   c0009a1f <free>
c0010f4c:	83 c4 10             	add    esp,0x10
c0010f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f53:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010f56:	83 ec 0c             	sub    esp,0xc
c0010f59:	50                   	push   eax
c0010f5a:	e8 c0 8a ff ff       	call   c0009a1f <free>
c0010f5f:	83 c4 10             	add    esp,0x10
c0010f62:	90                   	nop
c0010f63:	83 c4 0c             	add    esp,0xc
c0010f66:	c3                   	ret    
c0010f67:	90                   	nop

c0010f68 <VCache::~VCache()>:
c0010f68:	83 ec 0c             	sub    esp,0xc
c0010f6b:	83 ec 0c             	sub    esp,0xc
c0010f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f72:	e8 9d ff ff ff       	call   c0010f14 <VCache::~VCache()>
c0010f77:	83 c4 10             	add    esp,0x10
c0010f7a:	83 ec 08             	sub    esp,0x8
c0010f7d:	6a 44                	push   0x44
c0010f7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f83:	e8 96 bc ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0010f88:	83 c4 10             	add    esp,0x10
c0010f8b:	83 c4 0c             	add    esp,0xc
c0010f8e:	c3                   	ret    
c0010f8f:	90                   	nop

c0010f90 <VCache::write(unsigned long long, int, void*)>:
c0010f90:	55                   	push   ebp
c0010f91:	31 c0                	xor    eax,eax
c0010f93:	57                   	push   edi
c0010f94:	56                   	push   esi
c0010f95:	53                   	push   ebx
c0010f96:	83 ec 0c             	sub    esp,0xc
c0010f99:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010f9d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010fa1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0010fa8:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0010fac:	7d 1a                	jge    c0010fc8 <VCache::write(unsigned long long, int, void*)+0x38>
c0010fae:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010fb1:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010fb7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010fbb:	0f af c8             	imul   ecx,eax
c0010fbe:	01 ca                	add    edx,ecx
c0010fc0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010fc2:	40                   	inc    eax
c0010fc3:	eb e3                	jmp    c0010fa8 <VCache::write(unsigned long long, int, void*)+0x18>
c0010fc5:	8d 76 00             	lea    esi,[esi+0x0]
c0010fc8:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010fcc:	74 0a                	je     c0010fd8 <VCache::write(unsigned long long, int, void*)+0x48>
c0010fce:	53                   	push   ebx
c0010fcf:	e8 f4 fe ff ff       	call   c0010ec8 <VCache::invalidateReadBuffer()>
c0010fd4:	58                   	pop    eax
c0010fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0010fd8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010fdc:	74 5e                	je     c001103c <VCache::write(unsigned long long, int, void*)+0xac>
c0010fde:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0010fe1:	89 e8                	mov    eax,ebp
c0010fe3:	99                   	cdq    
c0010fe4:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0010fe7:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0010fea:	89 c1                	mov    ecx,eax
c0010fec:	89 d0                	mov    eax,edx
c0010fee:	31 f1                	xor    ecx,esi
c0010ff0:	31 f8                	xor    eax,edi
c0010ff2:	09 c1                	or     ecx,eax
c0010ff4:	75 3a                	jne    c0011030 <VCache::write(unsigned long long, int, void*)+0xa0>
c0010ff6:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0010ffb:	75 33                	jne    c0011030 <VCache::write(unsigned long long, int, void*)+0xa0>
c0010ffd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011000:	89 ef                	mov    edi,ebp
c0011002:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011008:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001100c:	0f af f9             	imul   edi,ecx
c001100f:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0011012:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011014:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011017:	40                   	inc    eax
c0011018:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001101b:	83 f8 40             	cmp    eax,0x40
c001101e:	75 60                	jne    c0011080 <VCache::write(unsigned long long, int, void*)+0xf0>
c0011020:	83 ec 0c             	sub    esp,0xc
c0011023:	53                   	push   ebx
c0011024:	e8 af fe ff ff       	call   c0010ed8 <VCache::writeWriteBuffer()>
c0011029:	83 c4 10             	add    esp,0x10
c001102c:	eb 52                	jmp    c0011080 <VCache::write(unsigned long long, int, void*)+0xf0>
c001102e:	66 90                	xchg   ax,ax
c0011030:	83 ec 0c             	sub    esp,0xc
c0011033:	53                   	push   ebx
c0011034:	e8 9f fe ff ff       	call   c0010ed8 <VCache::writeWriteBuffer()>
c0011039:	83 c4 10             	add    esp,0x10
c001103c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001103f:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c0011044:	7f 22                	jg     c0011068 <VCache::write(unsigned long long, int, void*)+0xd8>
c0011046:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0011049:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001104c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011050:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0011054:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0011057:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c001105a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011060:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011064:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011066:	eb 18                	jmp    c0011080 <VCache::write(unsigned long long, int, void*)+0xf0>
c0011068:	83 ec 0c             	sub    esp,0xc
c001106b:	8b 10                	mov    edx,DWORD PTR [eax]
c001106d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011071:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011075:	57                   	push   edi
c0011076:	56                   	push   esi
c0011077:	50                   	push   eax
c0011078:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001107b:	83 c4 20             	add    esp,0x20
c001107e:	66 90                	xchg   ax,ax
c0011080:	83 c4 0c             	add    esp,0xc
c0011083:	31 c0                	xor    eax,eax
c0011085:	5b                   	pop    ebx
c0011086:	5e                   	pop    esi
c0011087:	5f                   	pop    edi
c0011088:	5d                   	pop    ebp
c0011089:	c3                   	ret    

c001108a <VCache::read(unsigned long long, int, void*)>:
c001108a:	55                   	push   ebp
c001108b:	31 c0                	xor    eax,eax
c001108d:	57                   	push   edi
c001108e:	56                   	push   esi
c001108f:	53                   	push   ebx
c0011090:	83 ec 1c             	sub    esp,0x1c
c0011093:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0011097:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001109b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001109f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00110a3:	90                   	nop
c00110a4:	39 e8                	cmp    eax,ebp
c00110a6:	7d 18                	jge    c00110c0 <VCache::read(unsigned long long, int, void*)+0x36>
c00110a8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00110ab:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c00110b1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00110b5:	0f af c8             	imul   ecx,eax
c00110b8:	01 ca                	add    edx,ecx
c00110ba:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00110bc:	40                   	inc    eax
c00110bd:	eb e5                	jmp    c00110a4 <VCache::read(unsigned long long, int, void*)+0x1a>
c00110bf:	90                   	nop
c00110c0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00110c4:	74 0e                	je     c00110d4 <VCache::read(unsigned long long, int, void*)+0x4a>
c00110c6:	83 ec 0c             	sub    esp,0xc
c00110c9:	53                   	push   ebx
c00110ca:	e8 09 fe ff ff       	call   c0010ed8 <VCache::writeWriteBuffer()>
c00110cf:	83 c4 10             	add    esp,0x10
c00110d2:	66 90                	xchg   ax,ax
c00110d4:	83 fd 01             	cmp    ebp,0x1
c00110d7:	0f 85 87 00 00 00    	jne    c0011164 <VCache::read(unsigned long long, int, void*)+0xda>
c00110dd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00110e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00110e4:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00110eb:	75 77                	jne    c0011164 <VCache::read(unsigned long long, int, void*)+0xda>
c00110ed:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c00110f0:	89 e9                	mov    ecx,ebp
c00110f2:	f7 d9                	neg    ecx
c00110f4:	89 c8                	mov    eax,ecx
c00110f6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00110fa:	c1 f8 1f             	sar    eax,0x1f
c00110fd:	21 f1                	and    ecx,esi
c00110ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011103:	89 c8                	mov    eax,ecx
c0011105:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011109:	21 f9                	and    ecx,edi
c001110b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001110f:	89 ca                	mov    edx,ecx
c0011111:	74 0d                	je     c0011120 <VCache::read(unsigned long long, int, void*)+0x96>
c0011113:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0011116:	75 08                	jne    c0011120 <VCache::read(unsigned long long, int, void*)+0x96>
c0011118:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c001111b:	74 27                	je     c0011144 <VCache::read(unsigned long long, int, void*)+0xba>
c001111d:	8d 76 00             	lea    esi,[esi+0x0]
c0011120:	83 ec 0c             	sub    esp,0xc
c0011123:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0011127:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001112b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c001112e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0011131:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0011133:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0011136:	55                   	push   ebp
c0011137:	52                   	push   edx
c0011138:	50                   	push   eax
c0011139:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001113d:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0011140:	83 c4 20             	add    esp,0x20
c0011143:	90                   	nop
c0011144:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011147:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001114b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011151:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0011154:	48                   	dec    eax
c0011155:	21 c6                	and    esi,eax
c0011157:	0f af f1             	imul   esi,ecx
c001115a:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c001115d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001115f:	eb 23                	jmp    c0011184 <VCache::read(unsigned long long, int, void*)+0xfa>
c0011161:	8d 76 00             	lea    esi,[esi+0x0]
c0011164:	83 ec 0c             	sub    esp,0xc
c0011167:	53                   	push   ebx
c0011168:	e8 5b fd ff ff       	call   c0010ec8 <VCache::invalidateReadBuffer()>
c001116d:	5a                   	pop    edx
c001116e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011171:	8b 10                	mov    edx,DWORD PTR [eax]
c0011173:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011177:	55                   	push   ebp
c0011178:	57                   	push   edi
c0011179:	56                   	push   esi
c001117a:	50                   	push   eax
c001117b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001117e:	83 c4 20             	add    esp,0x20
c0011181:	8d 76 00             	lea    esi,[esi+0x0]
c0011184:	83 c4 1c             	add    esp,0x1c
c0011187:	31 c0                	xor    eax,eax
c0011189:	5b                   	pop    ebx
c001118a:	5e                   	pop    esi
c001118b:	5f                   	pop    edi
c001118c:	5d                   	pop    ebp
c001118d:	c3                   	ret    

c001118e <Video::putrect(int, int, int, int, unsigned int)>:
c001118e:	55                   	push   ebp
c001118f:	57                   	push   edi
c0011190:	56                   	push   esi
c0011191:	53                   	push   ebx
c0011192:	83 ec 1c             	sub    esp,0x1c
c0011195:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011199:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001119d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00111a1:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00111a5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00111a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00111ad:	01 df                	add    edi,ebx
c00111af:	39 fb                	cmp    ebx,edi
c00111b1:	7d 1f                	jge    c00111d2 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00111b3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00111b7:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00111bb:	7d 12                	jge    c00111cf <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00111bd:	8b 16                	mov    edx,DWORD PTR [esi]
c00111bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00111c3:	53                   	push   ebx
c00111c4:	55                   	push   ebp
c00111c5:	45                   	inc    ebp
c00111c6:	56                   	push   esi
c00111c7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00111ca:	83 c4 10             	add    esp,0x10
c00111cd:	eb e8                	jmp    c00111b7 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00111cf:	43                   	inc    ebx
c00111d0:	eb dd                	jmp    c00111af <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00111d2:	83 c4 1c             	add    esp,0x1c
c00111d5:	5b                   	pop    ebx
c00111d6:	5e                   	pop    esi
c00111d7:	5f                   	pop    edi
c00111d8:	5d                   	pop    ebp
c00111d9:	c3                   	ret    

c00111da <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00111da:	55                   	push   ebp
c00111db:	57                   	push   edi
c00111dc:	31 ff                	xor    edi,edi
c00111de:	56                   	push   esi
c00111df:	53                   	push   ebx
c00111e0:	83 ec 1c             	sub    esp,0x1c
c00111e3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00111e7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00111eb:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00111f2:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00111f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00111fb:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00111ff:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011203:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0011206:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001120a:	01 f9                	add    ecx,edi
c001120c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0011210:	7d 2f                	jge    c0011241 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0011212:	31 f6                	xor    esi,esi
c0011214:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011218:	01 f2                	add    edx,esi
c001121a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001121e:	7d 1a                	jge    c001123a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0011220:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011223:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0011226:	46                   	inc    esi
c0011227:	51                   	push   ecx
c0011228:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001122c:	52                   	push   edx
c001122d:	55                   	push   ebp
c001122e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011231:	83 c4 10             	add    esp,0x10
c0011234:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011238:	eb da                	jmp    c0011214 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001123a:	47                   	inc    edi
c001123b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001123f:	eb c5                	jmp    c0011206 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0011241:	83 c4 1c             	add    esp,0x1c
c0011244:	5b                   	pop    ebx
c0011245:	5e                   	pop    esi
c0011246:	5f                   	pop    edi
c0011247:	5d                   	pop    ebp
c0011248:	c3                   	ret    
c0011249:	90                   	nop

c001124a <Video::blit(unsigned int*, int, int, int, int)>:
c001124a:	55                   	push   ebp
c001124b:	57                   	push   edi
c001124c:	56                   	push   esi
c001124d:	53                   	push   ebx
c001124e:	83 ec 1c             	sub    esp,0x1c
c0011251:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011255:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011259:	85 c0                	test   eax,eax
c001125b:	79 02                	jns    c001125f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001125d:	31 c0                	xor    eax,eax
c001125f:	c1 e0 02             	shl    eax,0x2
c0011262:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0011266:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001126a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001126e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0011272:	39 d8                	cmp    eax,ebx
c0011274:	7e 49                	jle    c00112bf <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0011276:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001127c:	7c 41                	jl     c00112bf <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001127e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011282:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011286:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001128a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001128e:	39 f9                	cmp    ecx,edi
c0011290:	7e 22                	jle    c00112b4 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0011292:	83 c5 04             	add    ebp,0x4
c0011295:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001129b:	7c 14                	jl     c00112b1 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001129d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001129f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00112a2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00112a6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00112aa:	56                   	push   esi
c00112ab:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00112ae:	83 c4 10             	add    esp,0x10
c00112b1:	47                   	inc    edi
c00112b2:	eb d2                	jmp    c0011286 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00112b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112b8:	43                   	inc    ebx
c00112b9:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00112bd:	eb ab                	jmp    c001126a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00112bf:	83 c4 1c             	add    esp,0x1c
c00112c2:	5b                   	pop    ebx
c00112c3:	5e                   	pop    esi
c00112c4:	5f                   	pop    edi
c00112c5:	5d                   	pop    ebp
c00112c6:	c3                   	ret    
c00112c7:	90                   	nop

c00112c8 <Video::clearScreen(unsigned int)>:
c00112c8:	57                   	push   edi
c00112c9:	56                   	push   esi
c00112ca:	53                   	push   ebx
c00112cb:	31 db                	xor    ebx,ebx
c00112cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00112d1:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00112d7:	7e 1f                	jle    c00112f8 <Video::clearScreen(unsigned int)+0x30>
c00112d9:	31 ff                	xor    edi,edi
c00112db:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00112e1:	7e 12                	jle    c00112f5 <Video::clearScreen(unsigned int)+0x2d>
c00112e3:	8b 06                	mov    eax,DWORD PTR [esi]
c00112e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00112e9:	53                   	push   ebx
c00112ea:	57                   	push   edi
c00112eb:	47                   	inc    edi
c00112ec:	56                   	push   esi
c00112ed:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112f0:	83 c4 10             	add    esp,0x10
c00112f3:	eb e6                	jmp    c00112db <Video::clearScreen(unsigned int)+0x13>
c00112f5:	43                   	inc    ebx
c00112f6:	eb d9                	jmp    c00112d1 <Video::clearScreen(unsigned int)+0x9>
c00112f8:	5b                   	pop    ebx
c00112f9:	5e                   	pop    esi
c00112fa:	5f                   	pop    edi
c00112fb:	c3                   	ret    

c00112fc <Video::putpixel(int, int, unsigned int)>:
c00112fc:	c7 44 24 04 2c 52 02 c0 	mov    DWORD PTR [esp+0x4],0xc002522c
c0011304:	e9 b2 36 00 00       	jmp    c00149bb <Krnl::panic(char const*)>
c0011309:	90                   	nop

c001130a <Video::Video(char const*)>:
c001130a:	83 ec 0c             	sub    esp,0xc
c001130d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011311:	83 ec 08             	sub    esp,0x8
c0011314:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011318:	50                   	push   eax
c0011319:	e8 24 d1 ff ff       	call   c000e442 <Device::Device(char const*)>
c001131e:	83 c4 10             	add    esp,0x10
c0011321:	ba 9c 52 02 c0       	mov    edx,0xc002529c
c0011326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001132a:	89 10                	mov    DWORD PTR [eax],edx
c001132c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011330:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001133a:	90                   	nop
c001133b:	83 c4 0c             	add    esp,0xc
c001133e:	c3                   	ret    
c001133f:	90                   	nop

c0011340 <Video::~Video()>:
c0011340:	83 ec 0c             	sub    esp,0xc
c0011343:	ba 9c 52 02 c0       	mov    edx,0xc002529c
c0011348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001134c:	89 10                	mov    DWORD PTR [eax],edx
c001134e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011352:	83 ec 0c             	sub    esp,0xc
c0011355:	50                   	push   eax
c0011356:	e8 b1 cd ff ff       	call   c000e10c <Device::~Device()>
c001135b:	83 c4 10             	add    esp,0x10
c001135e:	90                   	nop
c001135f:	83 c4 0c             	add    esp,0xc
c0011362:	c3                   	ret    
c0011363:	90                   	nop

c0011364 <Video::~Video()>:
c0011364:	83 ec 0c             	sub    esp,0xc
c0011367:	83 ec 0c             	sub    esp,0xc
c001136a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001136e:	e8 cd ff ff ff       	call   c0011340 <Video::~Video()>
c0011373:	83 c4 10             	add    esp,0x10
c0011376:	83 ec 08             	sub    esp,0x8
c0011379:	68 64 01 00 00       	push   0x164
c001137e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011382:	e8 97 b8 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0011387:	83 c4 10             	add    esp,0x10
c001138a:	83 c4 0c             	add    esp,0xc
c001138d:	c3                   	ret    

c001138e <Video::isMonochrome()>:
c001138e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011392:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0011398:	c3                   	ret    
c0011399:	90                   	nop

c001139a <Video::getWidth()>:
c001139a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001139e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00113a4:	c3                   	ret    
c00113a5:	90                   	nop

c00113a6 <Video::getHeight()>:
c00113a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113aa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00113b0:	c3                   	ret    
c00113b1:	90                   	nop

c00113b2 <Video::drawCursor(int, int, unsigned char*, int)>:
c00113b2:	55                   	push   ebp
c00113b3:	57                   	push   edi
c00113b4:	56                   	push   esi
c00113b5:	53                   	push   ebx
c00113b6:	83 ec 2c             	sub    esp,0x2c
c00113b9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00113bd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00113c1:	83 f8 01             	cmp    eax,0x1
c00113c4:	19 c9                	sbb    ecx,ecx
c00113c6:	31 db                	xor    ebx,ebx
c00113c8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00113cc:	89 cd                	mov    ebp,ecx
c00113ce:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00113d6:	f7 d5                	not    ebp
c00113d8:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00113de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00113e2:	01 d8                	add    eax,ebx
c00113e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00113e8:	56                   	push   esi
c00113e9:	e8 b8 ff ff ff       	call   c00113a6 <Video::getHeight()>
c00113ee:	59                   	pop    ecx
c00113ef:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00113f3:	7e 70                	jle    c0011465 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00113f5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00113f9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00113fd:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0011400:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011404:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011408:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001140f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011413:	89 f8                	mov    eax,edi
c0011415:	83 c0 20             	add    eax,0x20
c0011418:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001141c:	56                   	push   esi
c001141d:	e8 78 ff ff ff       	call   c001139a <Video::getWidth()>
c0011422:	5a                   	pop    edx
c0011423:	39 c7                	cmp    edi,eax
c0011425:	7d 34                	jge    c001145b <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0011427:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001142c:	74 05                	je     c0011433 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001142e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011430:	55                   	push   ebp
c0011431:	eb 0d                	jmp    c0011440 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0011433:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0011438:	74 12                	je     c001144c <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001143a:	8b 06                	mov    eax,DWORD PTR [esi]
c001143c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011440:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011444:	57                   	push   edi
c0011445:	56                   	push   esi
c0011446:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011449:	83 c4 10             	add    esp,0x10
c001144c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0011450:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0011454:	47                   	inc    edi
c0011455:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011459:	75 c1                	jne    c001141c <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001145b:	43                   	inc    ebx
c001145c:	83 fb 20             	cmp    ebx,0x20
c001145f:	0f 85 79 ff ff ff    	jne    c00113de <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0011465:	83 c4 2c             	add    esp,0x2c
c0011468:	5b                   	pop    ebx
c0011469:	5e                   	pop    esi
c001146a:	5f                   	pop    edi
c001146b:	5d                   	pop    ebp
c001146c:	c3                   	ret    
c001146d:	90                   	nop

c001146e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001146e:	55                   	push   ebp
c001146f:	57                   	push   edi
c0011470:	56                   	push   esi
c0011471:	53                   	push   ebx
c0011472:	83 ec 28             	sub    esp,0x28
c0011475:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011479:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001147d:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0011481:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0011485:	c1 e6 08             	shl    esi,0x8
c0011488:	01 c6                	add    esi,eax
c001148a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001148e:	c1 e0 08             	shl    eax,0x8
c0011491:	01 d0                	add    eax,edx
c0011493:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011497:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001149b:	0f af c6             	imul   eax,esi
c001149e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00114a5:	50                   	push   eax
c00114a6:	e8 64 85 ff ff       	call   c0009a0f <malloc>
c00114ab:	83 c4 10             	add    esp,0x10
c00114ae:	89 c7                	mov    edi,eax
c00114b0:	85 c0                	test   eax,eax
c00114b2:	75 10                	jne    c00114c4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c00114b4:	83 ec 0c             	sub    esp,0xc
c00114b7:	68 4d 52 02 c0       	push   0xc002524d
c00114bc:	e8 fa 34 00 00       	call   c00149bb <Krnl::panic(char const*)>
c00114c1:	83 c4 10             	add    esp,0x10
c00114c4:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00114c7:	ba 12 00 00 00       	mov    edx,0x12
c00114cc:	84 c0                	test   al,al
c00114ce:	74 11                	je     c00114e1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c00114d0:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c00114d4:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c00114d8:	c1 fa 03             	sar    edx,0x3
c00114db:	0f af d1             	imul   edx,ecx
c00114de:	83 c2 12             	add    edx,0x12
c00114e1:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00114e5:	74 04                	je     c00114eb <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c00114e7:	85 f6                	test   esi,esi
c00114e9:	75 12                	jne    c00114fd <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c00114eb:	83 ec 0c             	sub    esp,0xc
c00114ee:	68 5d 52 02 c0       	push   0xc002525d
c00114f3:	e8 07 b8 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00114f8:	e9 b8 00 00 00       	jmp    c00115b5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c00114fd:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0011501:	80 f9 02             	cmp    cl,0x2
c0011504:	0f 85 96 00 00 00    	jne    c00115a0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c001150a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001150f:	75 0e                	jne    c001151f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011511:	84 c0                	test   al,al
c0011513:	75 0a                	jne    c001151f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011515:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0011518:	83 e8 18             	sub    eax,0x18
c001151b:	a8 f7                	test   al,0xf7
c001151d:	74 0a                	je     c0011529 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c001151f:	83 ec 0c             	sub    esp,0xc
c0011522:	68 72 52 02 c0       	push   0xc0025272
c0011527:	eb 7f                	jmp    c00115a8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0011529:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011531:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011539:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c001153d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011545:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0011549:	75 0c                	jne    c0011557 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001154b:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0011550:	c1 e0 18             	shl    eax,0x18
c0011553:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011557:	45                   	inc    ebp
c0011558:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c001155d:	c1 e1 10             	shl    ecx,0x10
c0011560:	89 c8                	mov    eax,ecx
c0011562:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0011567:	c1 e1 08             	shl    ecx,0x8
c001156a:	09 c1                	or     ecx,eax
c001156c:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0011570:	09 c1                	or     ecx,eax
c0011572:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0011576:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c001157a:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001157e:	c1 f8 03             	sar    eax,0x3
c0011581:	01 c2                	add    edx,eax
c0011583:	89 e8                	mov    eax,ebp
c0011585:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0011589:	39 c6                	cmp    esi,eax
c001158b:	7f b0                	jg     c001153d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c001158d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011591:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011595:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0011598:	7e 22                	jle    c00115bc <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001159a:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c001159e:	eb 99                	jmp    c0011539 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00115a0:	50                   	push   eax
c00115a1:	50                   	push   eax
c00115a2:	51                   	push   ecx
c00115a3:	68 80 52 02 c0       	push   0xc0025280
c00115a8:	e8 52 b7 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00115ad:	89 3c 24             	mov    DWORD PTR [esp],edi
c00115b0:	e8 6a 84 ff ff       	call   c0009a1f <free>
c00115b5:	83 c4 10             	add    esp,0x10
c00115b8:	31 ff                	xor    edi,edi
c00115ba:	eb 0f                	jmp    c00115cb <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c00115bc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00115c0:	89 30                	mov    DWORD PTR [eax],esi
c00115c2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00115c6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00115c9:	89 30                	mov    DWORD PTR [eax],esi
c00115cb:	83 c4 1c             	add    esp,0x1c
c00115ce:	89 f8                	mov    eax,edi
c00115d0:	5b                   	pop    ebx
c00115d1:	5e                   	pop    esi
c00115d2:	5f                   	pop    edi
c00115d3:	5d                   	pop    ebp
c00115d4:	c3                   	ret    
c00115d5:	90                   	nop

c00115d6 <Video::putTGA(int, int, unsigned char*, int)>:
c00115d6:	55                   	push   ebp
c00115d7:	57                   	push   edi
c00115d8:	56                   	push   esi
c00115d9:	53                   	push   ebx
c00115da:	83 ec 28             	sub    esp,0x28
c00115dd:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00115e1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00115e5:	50                   	push   eax
c00115e6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00115ea:	50                   	push   eax
c00115eb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00115ef:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00115f3:	56                   	push   esi
c00115f4:	e8 75 fe ff ff       	call   c001146e <Video::tgaParse(unsigned char*, int, int*, int*)>
c00115f9:	83 c4 20             	add    esp,0x20
c00115fc:	85 c0                	test   eax,eax
c00115fe:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011602:	74 35                	je     c0011639 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011604:	89 c7                	mov    edi,eax
c0011606:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001160a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001160e:	39 d8                	cmp    eax,ebx
c0011610:	7e 27                	jle    c0011639 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011612:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011616:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001161a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001161e:	39 e8                	cmp    eax,ebp
c0011620:	7e 14                	jle    c0011636 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0011622:	8b 06                	mov    eax,DWORD PTR [esi]
c0011624:	83 c7 04             	add    edi,0x4
c0011627:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001162a:	53                   	push   ebx
c001162b:	55                   	push   ebp
c001162c:	45                   	inc    ebp
c001162d:	56                   	push   esi
c001162e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011631:	83 c4 10             	add    esp,0x10
c0011634:	eb e0                	jmp    c0011616 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0011636:	43                   	inc    ebx
c0011637:	eb cd                	jmp    c0011606 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0011639:	83 c4 1c             	add    esp,0x1c
c001163c:	5b                   	pop    ebx
c001163d:	5e                   	pop    esi
c001163e:	5f                   	pop    edi
c001163f:	5d                   	pop    ebp
c0011640:	c3                   	ret    
c0011641:	66 90                	xchg   ax,ax
c0011643:	90                   	nop

c0011644 <ACPI::close(int, int, void*)>:
c0011644:	83 ec 1c             	sub    esp,0x1c
c0011647:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001164f:	74 0b                	je     c001165c <ACPI::close(int, int, void*)+0x18>
c0011651:	b8 00 00 00 00       	mov    eax,0x0
c0011656:	e9 99 00 00 00       	jmp    c00116f4 <ACPI::close(int, int, void*)+0xb0>
c001165b:	90                   	nop
c001165c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011661:	75 29                	jne    c001168c <ACPI::close(int, int, void*)+0x48>
c0011663:	a1 88 86 02 c0       	mov    eax,ds:0xc0028688
c0011668:	85 c0                	test   eax,eax
c001166a:	74 08                	je     c0011674 <ACPI::close(int, int, void*)+0x30>
c001166c:	a1 88 86 02 c0       	mov    eax,ds:0xc0028688
c0011671:	ff d0                	call   eax
c0011673:	90                   	nop
c0011674:	83 ec 0c             	sub    esp,0xc
c0011677:	68 dc 52 02 c0       	push   0xc00252dc
c001167c:	e8 3a 33 00 00       	call   c00149bb <Krnl::panic(char const*)>
c0011681:	83 c4 10             	add    esp,0x10
c0011684:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011689:	eb 69                	jmp    c00116f4 <ACPI::close(int, int, void*)+0xb0>
c001168b:	90                   	nop
c001168c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0011691:	75 59                	jne    c00116ec <ACPI::close(int, int, void*)+0xa8>
c0011693:	a1 84 86 02 c0       	mov    eax,ds:0xc0028684
c0011698:	85 c0                	test   eax,eax
c001169a:	74 08                	je     c00116a4 <ACPI::close(int, int, void*)+0x60>
c001169c:	a1 84 86 02 c0       	mov    eax,ds:0xc0028684
c00116a1:	ff d0                	call   eax
c00116a3:	90                   	nop
c00116a4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00116a9:	8d 76 00             	lea    esi,[esi+0x0]
c00116ac:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00116b1:	83 e0 02             	and    eax,0x2
c00116b4:	74 1e                	je     c00116d4 <ACPI::close(int, int, void*)+0x90>
c00116b6:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00116bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116c1:	89 c2                	mov    edx,eax
c00116c3:	ec                   	in     al,dx
c00116c4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00116c8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00116cc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00116d0:	eb da                	jmp    c00116ac <ACPI::close(int, int, void*)+0x68>
c00116d2:	66 90                	xchg   ax,ax
c00116d4:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00116db:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00116e0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00116e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00116e8:	ee                   	out    dx,al
c00116e9:	8d 76 00             	lea    esi,[esi+0x0]
c00116ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116f1:	8d 76 00             	lea    esi,[esi+0x0]
c00116f4:	83 c4 1c             	add    esp,0x1c
c00116f7:	c3                   	ret    

c00116f8 <findRSDP()>:
c00116f8:	83 ec 1c             	sub    esp,0x1c
c00116fb:	83 ec 0c             	sub    esp,0xc
c00116fe:	68 ff 53 02 c0       	push   0xc00253ff
c0011703:	e8 61 83 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011708:	83 c4 10             	add    esp,0x10
c001170b:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0011710:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011716:	83 e0 04             	and    eax,0x4
c0011719:	84 c0                	test   al,al
c001171b:	75 0b                	jne    c0011728 <findRSDP()+0x30>
c001171d:	b8 00 00 00 00       	mov    eax,0x0
c0011722:	e9 a1 00 00 00       	jmp    c00117c8 <findRSDP()+0xd0>
c0011727:	90                   	nop
c0011728:	a1 78 80 02 c0       	mov    eax,ds:0xc0028078
c001172d:	3d ff 07 00 00       	cmp    eax,0x7ff
c0011732:	7f 1c                	jg     c0011750 <findRSDP()+0x58>
c0011734:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0011739:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001173f:	83 e2 fb             	and    edx,0xfffffffb
c0011742:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011748:	b8 00 00 00 00       	mov    eax,0x0
c001174d:	eb 79                	jmp    c00117c8 <findRSDP()+0xd0>
c001174f:	90                   	nop
c0011750:	83 ec 0c             	sub    esp,0xc
c0011753:	68 0f 54 02 c0       	push   0xc002540f
c0011758:	e8 0c 83 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001175d:	83 c4 10             	add    esp,0x10
c0011760:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0011768:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0011770:	77 3e                	ja     c00117b0 <findRSDP()+0xb8>
c0011772:	83 ec 04             	sub    esp,0x4
c0011775:	6a 08                	push   0x8
c0011777:	68 28 54 02 c0       	push   0xc0025428
c001177c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011780:	e8 fb ed fe ff       	call   c0000580 <memcmp>
c0011785:	83 c4 10             	add    esp,0x10
c0011788:	85 c0                	test   eax,eax
c001178a:	0f 94 c0             	sete   al
c001178d:	84 c0                	test   al,al
c001178f:	74 17                	je     c00117a8 <findRSDP()+0xb0>
c0011791:	83 ec 0c             	sub    esp,0xc
c0011794:	68 31 54 02 c0       	push   0xc0025431
c0011799:	e8 cb 82 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001179e:	83 c4 10             	add    esp,0x10
c00117a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117a5:	eb 21                	jmp    c00117c8 <findRSDP()+0xd0>
c00117a7:	90                   	nop
c00117a8:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00117ad:	eb b9                	jmp    c0011768 <findRSDP()+0x70>
c00117af:	90                   	nop
c00117b0:	83 ec 0c             	sub    esp,0xc
c00117b3:	68 3f 54 02 c0       	push   0xc002543f
c00117b8:	e8 ac 82 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00117bd:	83 c4 10             	add    esp,0x10
c00117c0:	b8 00 00 00 00       	mov    eax,0x0
c00117c5:	8d 76 00             	lea    esi,[esi+0x0]
c00117c8:	83 c4 1c             	add    esp,0x1c
c00117cb:	c3                   	ret    

c00117cc <loadACPITables(unsigned char*)>:
c00117cc:	57                   	push   edi
c00117cd:	56                   	push   esi
c00117ce:	53                   	push   ebx
c00117cf:	83 ec 60             	sub    esp,0x60
c00117d2:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c00117d7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00117dd:	83 e0 04             	and    eax,0x4
c00117e0:	84 c0                	test   al,al
c00117e2:	0f 84 3c 02 00 00    	je     c0011a24 <loadACPITables(unsigned char*)+0x258>
c00117e8:	a0 a0 88 02 c0       	mov    al,ds:0xc00288a0
c00117ed:	84 c0                	test   al,al
c00117ef:	74 77                	je     c0011868 <loadACPITables(unsigned char*)+0x9c>
c00117f1:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00117f5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00117f9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00117fd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011800:	83 e8 24             	sub    eax,0x24
c0011803:	c1 e8 03             	shr    eax,0x3
c0011806:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001180a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0011812:	66 90                	xchg   ax,ax
c0011814:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011818:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001181c:	0f 8d b6 00 00 00    	jge    c00118d8 <loadACPITables(unsigned char*)+0x10c>
c0011822:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011826:	83 c0 24             	add    eax,0x24
c0011829:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001182d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011831:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011835:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011839:	c1 e0 03             	shl    eax,0x3
c001183c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0011840:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011844:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011847:	8b 00                	mov    eax,DWORD PTR [eax]
c0011849:	89 c1                	mov    ecx,eax
c001184b:	a1 8c 86 02 c0       	mov    eax,ds:0xc002868c
c0011850:	8d 50 01             	lea    edx,[eax+0x1]
c0011853:	89 15 8c 86 02 c0    	mov    DWORD PTR ds:0xc002868c,edx
c0011859:	89 ca                	mov    edx,ecx
c001185b:	89 14 c5 a4 86 02 c0 	mov    DWORD PTR [eax*8-0x3ffd795c],edx
c0011862:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0011866:	eb ac                	jmp    c0011814 <loadACPITables(unsigned char*)+0x48>
c0011868:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001186c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011870:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011874:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011877:	83 e8 24             	sub    eax,0x24
c001187a:	c1 e8 02             	shr    eax,0x2
c001187d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011881:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0011889:	8d 76 00             	lea    esi,[esi+0x0]
c001188c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011890:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0011894:	7d 42                	jge    c00118d8 <loadACPITables(unsigned char*)+0x10c>
c0011896:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001189a:	83 c0 24             	add    eax,0x24
c001189d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00118a1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00118a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00118a9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00118ad:	c1 e0 02             	shl    eax,0x2
c00118b0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00118b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00118b8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00118ba:	a1 8c 86 02 c0       	mov    eax,ds:0xc002868c
c00118bf:	8d 50 01             	lea    edx,[eax+0x1]
c00118c2:	89 15 8c 86 02 c0    	mov    DWORD PTR ds:0xc002868c,edx
c00118c8:	89 ca                	mov    edx,ecx
c00118ca:	89 14 c5 a4 86 02 c0 	mov    DWORD PTR [eax*8-0x3ffd795c],edx
c00118d1:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00118d5:	eb b5                	jmp    c001188c <loadACPITables(unsigned char*)+0xc0>
c00118d7:	90                   	nop
c00118d8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00118e0:	a1 8c 86 02 c0       	mov    eax,ds:0xc002868c
c00118e5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00118e9:	0f 8d 39 01 00 00    	jge    c0011a28 <loadACPITables(unsigned char*)+0x25c>
c00118ef:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00118f3:	8b 04 c5 a4 86 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd795c]
c00118fa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00118fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011902:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011906:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001190a:	25 ff 0f 00 00       	and    eax,0xfff
c001190f:	89 c6                	mov    esi,eax
c0011911:	8b 1d 70 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028170
c0011917:	83 ec 0c             	sub    esp,0xc
c001191a:	6a 01                	push   0x1
c001191c:	e8 b8 a0 ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c0011921:	83 c4 10             	add    esp,0x10
c0011924:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011928:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001192e:	83 ec 0c             	sub    esp,0xc
c0011931:	6a 01                	push   0x1
c0011933:	6a 01                	push   0x1
c0011935:	50                   	push   eax
c0011936:	52                   	push   edx
c0011937:	53                   	push   ebx
c0011938:	e8 39 aa ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001193d:	83 c4 20             	add    esp,0x20
c0011940:	09 f0                	or     eax,esi
c0011942:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011946:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001194a:	c1 e0 03             	shl    eax,0x3
c001194d:	05 a0 86 02 c0       	add    eax,0xc00286a0
c0011952:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011956:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001195a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001195e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0011966:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001196a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001196e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011976:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001197a:	89 c6                	mov    esi,eax
c001197c:	89 d7                	mov    edi,edx
c001197e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011980:	89 c8                	mov    eax,ecx
c0011982:	89 fa                	mov    edx,edi
c0011984:	89 f3                	mov    ebx,esi
c0011986:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001198a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001198e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011992:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011999:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001199d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00119a1:	05 00 10 00 00       	add    eax,0x1000
c00119a6:	c1 e8 0c             	shr    eax,0xc
c00119a9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00119ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00119b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119b9:	25 ff 0f 00 00       	and    eax,0xfff
c00119be:	89 c6                	mov    esi,eax
c00119c0:	8b 1d 70 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028170
c00119c6:	83 ec 0c             	sub    esp,0xc
c00119c9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00119cd:	e8 07 a0 ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c00119d2:	83 c4 10             	add    esp,0x10
c00119d5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00119d9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00119df:	83 ec 0c             	sub    esp,0xc
c00119e2:	6a 01                	push   0x1
c00119e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00119e8:	50                   	push   eax
c00119e9:	52                   	push   edx
c00119ea:	53                   	push   ebx
c00119eb:	e8 86 a9 ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00119f0:	83 c4 20             	add    esp,0x20
c00119f3:	09 f0                	or     eax,esi
c00119f5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00119f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00119fd:	83 ec 0c             	sub    esp,0xc
c0011a00:	50                   	push   eax
c0011a01:	e8 03 a3 ff ff       	call   c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c0011a06:	83 c4 10             	add    esp,0x10
c0011a09:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011a0d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011a11:	89 14 c5 a4 86 02 c0 	mov    DWORD PTR [eax*8-0x3ffd795c],edx
c0011a18:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011a1c:	e9 bf fe ff ff       	jmp    c00118e0 <loadACPITables(unsigned char*)+0x114>
c0011a21:	8d 76 00             	lea    esi,[esi+0x0]
c0011a24:	90                   	nop
c0011a25:	8d 76 00             	lea    esi,[esi+0x0]
c0011a28:	83 c4 60             	add    esp,0x60
c0011a2b:	5b                   	pop    ebx
c0011a2c:	5e                   	pop    esi
c0011a2d:	5f                   	pop    edi
c0011a2e:	c3                   	ret    
c0011a2f:	90                   	nop

c0011a30 <findRSDT(unsigned char*)>:
c0011a30:	57                   	push   edi
c0011a31:	56                   	push   esi
c0011a32:	53                   	push   ebx
c0011a33:	83 ec 50             	sub    esp,0x50
c0011a36:	83 ec 0c             	sub    esp,0xc
c0011a39:	68 53 54 02 c0       	push   0xc0025453
c0011a3e:	e8 26 80 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011a43:	83 c4 10             	add    esp,0x10
c0011a46:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0011a4b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011a51:	83 e0 04             	and    eax,0x4
c0011a54:	84 c0                	test   al,al
c0011a56:	75 0c                	jne    c0011a64 <findRSDT(unsigned char*)+0x34>
c0011a58:	b8 00 00 00 00       	mov    eax,0x0
c0011a5d:	e9 86 01 00 00       	jmp    c0011be8 <findRSDT(unsigned char*)+0x1b8>
c0011a62:	66 90                	xchg   ax,ax
c0011a64:	83 ec 0c             	sub    esp,0xc
c0011a67:	68 65 54 02 c0       	push   0xc0025465
c0011a6c:	e8 f8 7f ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011a71:	83 c4 10             	add    esp,0x10
c0011a74:	89 e0                	mov    eax,esp
c0011a76:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011a7a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011a7e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011a82:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0011a8a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011a8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011a92:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011a96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011a9a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011a9e:	89 c6                	mov    esi,eax
c0011aa0:	89 d7                	mov    edi,edx
c0011aa2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011aa4:	89 c8                	mov    eax,ecx
c0011aa6:	89 fa                	mov    edx,edi
c0011aa8:	89 f3                	mov    ebx,esi
c0011aaa:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0011aae:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0011ab2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011ab6:	83 ec 0c             	sub    esp,0xc
c0011ab9:	68 77 54 02 c0       	push   0xc0025477
c0011abe:	e8 a6 7f ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011ac3:	83 c4 10             	add    esp,0x10
c0011ac6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011aca:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0011ace:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0011ad6:	83 ec 0c             	sub    esp,0xc
c0011ad9:	68 89 54 02 c0       	push   0xc0025489
c0011ade:	e8 86 7f ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011ae3:	83 c4 10             	add    esp,0x10
c0011ae6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011aea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011aee:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011af2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011af6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011afa:	83 ec 04             	sub    esp,0x4
c0011afd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011b01:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011b05:	68 00 53 02 c0       	push   0xc0025300
c0011b0a:	e8 f0 b1 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0011b0f:	83 c4 10             	add    esp,0x10
c0011b12:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011b16:	25 ff 0f 00 00       	and    eax,0xfff
c0011b1b:	89 c6                	mov    esi,eax
c0011b1d:	8b 1d 70 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028170
c0011b23:	83 ec 0c             	sub    esp,0xc
c0011b26:	6a 02                	push   0x2
c0011b28:	e8 ac 9e ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c0011b2d:	83 c4 10             	add    esp,0x10
c0011b30:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011b34:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011b3a:	83 ec 0c             	sub    esp,0xc
c0011b3d:	6a 01                	push   0x1
c0011b3f:	6a 02                	push   0x2
c0011b41:	50                   	push   eax
c0011b42:	52                   	push   edx
c0011b43:	53                   	push   ebx
c0011b44:	e8 2d a8 ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011b49:	83 c4 20             	add    esp,0x20
c0011b4c:	09 f0                	or     eax,esi
c0011b4e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011b52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011b56:	25 ff 0f 00 00       	and    eax,0xfff
c0011b5b:	89 c6                	mov    esi,eax
c0011b5d:	8b 1d 70 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028170
c0011b63:	83 ec 0c             	sub    esp,0xc
c0011b66:	6a 02                	push   0x2
c0011b68:	e8 6c 9e ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c0011b6d:	83 c4 10             	add    esp,0x10
c0011b70:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011b74:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011b7a:	83 ec 0c             	sub    esp,0xc
c0011b7d:	6a 01                	push   0x1
c0011b7f:	6a 02                	push   0x2
c0011b81:	50                   	push   eax
c0011b82:	52                   	push   edx
c0011b83:	53                   	push   ebx
c0011b84:	e8 ed a7 ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011b89:	83 c4 20             	add    esp,0x20
c0011b8c:	09 f0                	or     eax,esi
c0011b8e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011b92:	83 ec 04             	sub    esp,0x4
c0011b95:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011b99:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011b9d:	68 20 53 02 c0       	push   0xc0025320
c0011ba2:	e8 58 b1 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0011ba7:	83 c4 10             	add    esp,0x10
c0011baa:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0011baf:	75 13                	jne    c0011bc4 <findRSDT(unsigned char*)+0x194>
c0011bb1:	c6 05 a0 88 02 c0 00 	mov    BYTE PTR ds:0xc00288a0,0x0
c0011bb8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011bbc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011bc0:	eb 22                	jmp    c0011be4 <findRSDT(unsigned char*)+0x1b4>
c0011bc2:	66 90                	xchg   ax,ax
c0011bc4:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0011bc9:	75 11                	jne    c0011bdc <findRSDT(unsigned char*)+0x1ac>
c0011bcb:	c6 05 a0 88 02 c0 01 	mov    BYTE PTR ds:0xc00288a0,0x1
c0011bd2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011bd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011bda:	eb 08                	jmp    c0011be4 <findRSDT(unsigned char*)+0x1b4>
c0011bdc:	b8 00 00 00 00       	mov    eax,0x0
c0011be1:	eb 05                	jmp    c0011be8 <findRSDT(unsigned char*)+0x1b8>
c0011be3:	90                   	nop
c0011be4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011be8:	83 c4 50             	add    esp,0x50
c0011beb:	5b                   	pop    ebx
c0011bec:	5e                   	pop    esi
c0011bed:	5f                   	pop    edi
c0011bee:	c3                   	ret    
c0011bef:	90                   	nop

c0011bf0 <findDataTable(unsigned char*, char*)>:
c0011bf0:	83 ec 1c             	sub    esp,0x1c
c0011bf3:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0011bf8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011bfe:	83 e0 04             	and    eax,0x4
c0011c01:	84 c0                	test   al,al
c0011c03:	75 07                	jne    c0011c0c <findDataTable(unsigned char*, char*)+0x1c>
c0011c05:	b8 00 00 00 00       	mov    eax,0x0
c0011c0a:	eb 58                	jmp    c0011c64 <findDataTable(unsigned char*, char*)+0x74>
c0011c0c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c14:	a1 8c 86 02 c0       	mov    eax,ds:0xc002868c
c0011c19:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0011c1d:	7d 3d                	jge    c0011c5c <findDataTable(unsigned char*, char*)+0x6c>
c0011c1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c23:	c1 e0 03             	shl    eax,0x3
c0011c26:	05 a0 86 02 c0       	add    eax,0xc00286a0
c0011c2b:	83 ec 04             	sub    esp,0x4
c0011c2e:	6a 04                	push   0x4
c0011c30:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011c34:	50                   	push   eax
c0011c35:	e8 46 e9 fe ff       	call   c0000580 <memcmp>
c0011c3a:	83 c4 10             	add    esp,0x10
c0011c3d:	85 c0                	test   eax,eax
c0011c3f:	0f 94 c0             	sete   al
c0011c42:	84 c0                	test   al,al
c0011c44:	74 0e                	je     c0011c54 <findDataTable(unsigned char*, char*)+0x64>
c0011c46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c4a:	8b 04 c5 a4 86 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd795c]
c0011c51:	eb 11                	jmp    c0011c64 <findDataTable(unsigned char*, char*)+0x74>
c0011c53:	90                   	nop
c0011c54:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011c58:	eb ba                	jmp    c0011c14 <findDataTable(unsigned char*, char*)+0x24>
c0011c5a:	66 90                	xchg   ax,ax
c0011c5c:	b8 00 00 00 00       	mov    eax,0x0
c0011c61:	8d 76 00             	lea    esi,[esi+0x0]
c0011c64:	83 c4 1c             	add    esp,0x1c
c0011c67:	c3                   	ret    

c0011c68 <scanMADT()>:
c0011c68:	53                   	push   ebx
c0011c69:	83 ec 38             	sub    esp,0x38
c0011c6c:	83 ec 0c             	sub    esp,0xc
c0011c6f:	68 9b 54 02 c0       	push   0xc002549b
c0011c74:	e8 f0 7d ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011c79:	83 c4 10             	add    esp,0x10
c0011c7c:	a1 60 80 02 c0       	mov    eax,ds:0xc0028060
c0011c81:	25 00 04 00 00       	and    eax,0x400
c0011c86:	74 14                	je     c0011c9c <scanMADT()+0x34>
c0011c88:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0011c8d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011c93:	83 e2 fb             	and    edx,0xfffffffb
c0011c96:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011c9c:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0011ca1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011ca7:	83 e0 04             	and    eax,0x4
c0011caa:	84 c0                	test   al,al
c0011cac:	0f 84 82 04 00 00    	je     c0012134 <scanMADT()+0x4cc>
c0011cb2:	83 ec 0c             	sub    esp,0xc
c0011cb5:	68 a8 54 02 c0       	push   0xc00254a8
c0011cba:	e8 aa 7d ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011cbf:	83 c4 10             	add    esp,0x10
c0011cc2:	e8 31 fa ff ff       	call   c00116f8 <findRSDP()>
c0011cc7:	a3 ac 88 02 c0       	mov    ds:0xc00288ac,eax
c0011ccc:	a1 ac 88 02 c0       	mov    eax,ds:0xc00288ac
c0011cd1:	85 c0                	test   eax,eax
c0011cd3:	75 1b                	jne    c0011cf0 <scanMADT()+0x88>
c0011cd5:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0011cda:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011ce0:	83 e2 fb             	and    edx,0xfffffffb
c0011ce3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011ce9:	e9 4e 04 00 00       	jmp    c001213c <scanMADT()+0x4d4>
c0011cee:	66 90                	xchg   ax,ax
c0011cf0:	83 ec 0c             	sub    esp,0xc
c0011cf3:	68 ba 54 02 c0       	push   0xc00254ba
c0011cf8:	e8 6c 7d ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011cfd:	83 c4 10             	add    esp,0x10
c0011d00:	a1 ac 88 02 c0       	mov    eax,ds:0xc00288ac
c0011d05:	83 ec 0c             	sub    esp,0xc
c0011d08:	50                   	push   eax
c0011d09:	e8 22 fd ff ff       	call   c0011a30 <findRSDT(unsigned char*)>
c0011d0e:	83 c4 10             	add    esp,0x10
c0011d11:	a3 a8 88 02 c0       	mov    ds:0xc00288a8,eax
c0011d16:	a1 a8 88 02 c0       	mov    eax,ds:0xc00288a8
c0011d1b:	85 c0                	test   eax,eax
c0011d1d:	75 19                	jne    c0011d38 <scanMADT()+0xd0>
c0011d1f:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0011d24:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011d2a:	83 e2 fb             	and    edx,0xfffffffb
c0011d2d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011d33:	e9 04 04 00 00       	jmp    c001213c <scanMADT()+0x4d4>
c0011d38:	83 ec 0c             	sub    esp,0xc
c0011d3b:	68 ca 54 02 c0       	push   0xc00254ca
c0011d40:	e8 24 7d ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011d45:	83 c4 10             	add    esp,0x10
c0011d48:	a1 a8 88 02 c0       	mov    eax,ds:0xc00288a8
c0011d4d:	83 ec 0c             	sub    esp,0xc
c0011d50:	50                   	push   eax
c0011d51:	e8 76 fa ff ff       	call   c00117cc <loadACPITables(unsigned char*)>
c0011d56:	83 c4 10             	add    esp,0x10
c0011d59:	a1 a8 88 02 c0       	mov    eax,ds:0xc00288a8
c0011d5e:	83 ec 08             	sub    esp,0x8
c0011d61:	68 e2 54 02 c0       	push   0xc00254e2
c0011d66:	50                   	push   eax
c0011d67:	e8 84 fe ff ff       	call   c0011bf0 <findDataTable(unsigned char*, char*)>
c0011d6c:	83 c4 10             	add    esp,0x10
c0011d6f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011d73:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011d78:	75 1a                	jne    c0011d94 <scanMADT()+0x12c>
c0011d7a:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0011d7f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011d85:	83 e2 fe             	and    edx,0xfffffffe
c0011d88:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011d8e:	e9 a9 03 00 00       	jmp    c001213c <scanMADT()+0x4d4>
c0011d93:	90                   	nop
c0011d94:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011d9c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011da0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011da3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0011da7:	0f 87 8f 03 00 00    	ja     c001213c <scanMADT()+0x4d4>
c0011dad:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0011db5:	0f 87 81 03 00 00    	ja     c001213c <scanMADT()+0x4d4>
c0011dbb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dbf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011dc3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dc7:	8d 50 01             	lea    edx,[eax+0x1]
c0011dca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011dce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011dd2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011dd6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011dda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dde:	8d 50 01             	lea    edx,[eax+0x1]
c0011de1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011de5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011de9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011ded:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011df1:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0011df6:	0f 86 3c 03 00 00    	jbe    c0012138 <scanMADT()+0x4d0>
c0011dfc:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011e01:	75 59                	jne    c0011e5c <scanMADT()+0x1f4>
c0011e03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e07:	8d 50 01             	lea    edx,[eax+0x1]
c0011e0a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e0e:	8a 15 a0 8a 02 c0    	mov    dl,BYTE PTR ds:0xc0028aa0
c0011e14:	0f b6 d2             	movzx  edx,dl
c0011e17:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011e1b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011e1f:	88 82 e0 8a 02 c0    	mov    BYTE PTR [edx-0x3ffd7520],al
c0011e25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e29:	8d 50 01             	lea    edx,[eax+0x1]
c0011e2c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e30:	8a 15 a0 8a 02 c0    	mov    dl,BYTE PTR ds:0xc0028aa0
c0011e36:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011e39:	88 0d a0 8a 02 c0    	mov    BYTE PTR ds:0xc0028aa0,cl
c0011e3f:	0f b6 d2             	movzx  edx,dl
c0011e42:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011e46:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011e4a:	88 82 c0 8a 02 c0    	mov    BYTE PTR [edx-0x3ffd7540],al
c0011e50:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011e55:	e9 c6 02 00 00       	jmp    c0012120 <scanMADT()+0x4b8>
c0011e5a:	66 90                	xchg   ax,ax
c0011e5c:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011e61:	0f 85 15 01 00 00    	jne    c0011f7c <scanMADT()+0x314>
c0011e67:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e6b:	8d 50 01             	lea    edx,[eax+0x1]
c0011e6e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e72:	8a 15 60 89 02 c0    	mov    dl,BYTE PTR ds:0xc0028960
c0011e78:	0f b6 d2             	movzx  edx,dl
c0011e7b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011e7f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011e83:	88 82 80 89 02 c0    	mov    BYTE PTR [edx-0x3ffd7680],al
c0011e89:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011e8d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e91:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e95:	01 d0                	add    eax,edx
c0011e97:	83 c0 2c             	add    eax,0x2c
c0011e9a:	8a 00                	mov    al,BYTE PTR [eax]
c0011e9c:	0f b6 d0             	movzx  edx,al
c0011e9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ea3:	8d 48 01             	lea    ecx,[eax+0x1]
c0011ea6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011eaa:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011eae:	0f b6 c0             	movzx  eax,al
c0011eb1:	c1 e0 08             	shl    eax,0x8
c0011eb4:	89 d1                	mov    ecx,edx
c0011eb6:	09 c1                	or     ecx,eax
c0011eb8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ebc:	8d 50 02             	lea    edx,[eax+0x2]
c0011ebf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ec3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011ec7:	0f b6 c0             	movzx  eax,al
c0011eca:	c1 e0 10             	shl    eax,0x10
c0011ecd:	09 c1                	or     ecx,eax
c0011ecf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ed3:	8d 50 03             	lea    edx,[eax+0x3]
c0011ed6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011eda:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011ede:	0f b6 c0             	movzx  eax,al
c0011ee1:	c1 e0 18             	shl    eax,0x18
c0011ee4:	09 c1                	or     ecx,eax
c0011ee6:	89 ca                	mov    edx,ecx
c0011ee8:	a0 60 89 02 c0       	mov    al,ds:0xc0028960
c0011eed:	0f b6 c0             	movzx  eax,al
c0011ef0:	89 14 85 a0 89 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7660],edx
c0011ef7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011efc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f00:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f04:	01 d0                	add    eax,edx
c0011f06:	83 c0 2c             	add    eax,0x2c
c0011f09:	8a 00                	mov    al,BYTE PTR [eax]
c0011f0b:	0f b6 d0             	movzx  edx,al
c0011f0e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f12:	8d 48 01             	lea    ecx,[eax+0x1]
c0011f15:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f19:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011f1d:	0f b6 c0             	movzx  eax,al
c0011f20:	c1 e0 08             	shl    eax,0x8
c0011f23:	89 d1                	mov    ecx,edx
c0011f25:	09 c1                	or     ecx,eax
c0011f27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f2b:	8d 50 02             	lea    edx,[eax+0x2]
c0011f2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f32:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011f36:	0f b6 c0             	movzx  eax,al
c0011f39:	c1 e0 10             	shl    eax,0x10
c0011f3c:	09 c1                	or     ecx,eax
c0011f3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f42:	8d 50 03             	lea    edx,[eax+0x3]
c0011f45:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f49:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011f4d:	0f b6 c0             	movzx  eax,al
c0011f50:	c1 e0 18             	shl    eax,0x18
c0011f53:	09 c1                	or     ecx,eax
c0011f55:	89 ca                	mov    edx,ecx
c0011f57:	a0 60 89 02 c0       	mov    al,ds:0xc0028960
c0011f5c:	0f b6 c0             	movzx  eax,al
c0011f5f:	89 14 85 20 8a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd75e0],edx
c0011f66:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011f6b:	a0 60 89 02 c0       	mov    al,ds:0xc0028960
c0011f70:	40                   	inc    eax
c0011f71:	a2 60 89 02 c0       	mov    ds:0xc0028960,al
c0011f76:	e9 a5 01 00 00       	jmp    c0012120 <scanMADT()+0x4b8>
c0011f7b:	90                   	nop
c0011f7c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0011f81:	0f 85 e9 00 00 00    	jne    c0012070 <scanMADT()+0x408>
c0011f87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f8b:	8d 50 01             	lea    edx,[eax+0x1]
c0011f8e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011f92:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f96:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011f9a:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011f9e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fa2:	8d 50 01             	lea    edx,[eax+0x1]
c0011fa5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011fa9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011fad:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011fb1:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0011fb5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011fb9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fbd:	01 d0                	add    eax,edx
c0011fbf:	83 c0 2c             	add    eax,0x2c
c0011fc2:	8a 00                	mov    al,BYTE PTR [eax]
c0011fc4:	0f b6 d0             	movzx  edx,al
c0011fc7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fcb:	8d 48 01             	lea    ecx,[eax+0x1]
c0011fce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011fd2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011fd6:	0f b6 c0             	movzx  eax,al
c0011fd9:	c1 e0 08             	shl    eax,0x8
c0011fdc:	89 d1                	mov    ecx,edx
c0011fde:	09 c1                	or     ecx,eax
c0011fe0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fe4:	8d 50 02             	lea    edx,[eax+0x2]
c0011fe7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011feb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011fef:	0f b6 c0             	movzx  eax,al
c0011ff2:	c1 e0 10             	shl    eax,0x10
c0011ff5:	09 c1                	or     ecx,eax
c0011ff7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ffb:	8d 50 03             	lea    edx,[eax+0x3]
c0011ffe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012002:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012006:	0f b6 c0             	movzx  eax,al
c0012009:	c1 e0 18             	shl    eax,0x18
c001200c:	09 c8                	or     eax,ecx
c001200e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012012:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0012017:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001201b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001201f:	01 d0                	add    eax,edx
c0012021:	83 c0 2c             	add    eax,0x2c
c0012024:	8a 00                	mov    al,BYTE PTR [eax]
c0012026:	0f b6 c0             	movzx  eax,al
c0012029:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001202d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012030:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012034:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0012038:	0f b6 d2             	movzx  edx,dl
c001203b:	c1 e2 08             	shl    edx,0x8
c001203e:	09 d0                	or     eax,edx
c0012040:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0012045:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001204a:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001204f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012053:	88 90 40 77 02 c0    	mov    BYTE PTR [eax-0x3ffd88c0],dl
c0012059:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001205e:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0012063:	66 89 84 12 40 89 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd76c0],ax
c001206b:	e9 b0 00 00 00       	jmp    c0012120 <scanMADT()+0x4b8>
c0012070:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0012075:	0f 85 99 00 00 00    	jne    c0012114 <scanMADT()+0x4ac>
c001207b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001207f:	8d 50 01             	lea    edx,[eax+0x1]
c0012082:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012086:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001208a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001208e:	0f b6 c0             	movzx  eax,al
c0012091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012095:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012099:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001209d:	01 d0                	add    eax,edx
c001209f:	83 c0 2c             	add    eax,0x2c
c00120a2:	8a 00                	mov    al,BYTE PTR [eax]
c00120a4:	0f b6 d0             	movzx  edx,al
c00120a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00120ab:	8d 48 01             	lea    ecx,[eax+0x1]
c00120ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00120b2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00120b6:	0f b6 c0             	movzx  eax,al
c00120b9:	c1 e0 08             	shl    eax,0x8
c00120bc:	09 d0                	or     eax,edx
c00120be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120c2:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00120c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00120cb:	8d 50 01             	lea    edx,[eax+0x1]
c00120ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00120d2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00120d6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00120da:	0f b6 c0             	movzx  eax,al
c00120dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00120e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120e5:	c1 e0 08             	shl    eax,0x8
c00120e8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00120ec:	89 c1                	mov    ecx,eax
c00120ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120f2:	c1 e0 18             	shl    eax,0x18
c00120f5:	89 c3                	mov    ebx,eax
c00120f7:	a1 b0 88 02 c0       	mov    eax,ds:0xc00288b0
c00120fc:	8d 50 01             	lea    edx,[eax+0x1]
c00120ff:	89 15 b0 88 02 c0    	mov    DWORD PTR ds:0xc00288b0,edx
c0012105:	09 d9                	or     ecx,ebx
c0012107:	89 ca                	mov    edx,ecx
c0012109:	89 14 85 c0 88 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7740],edx
c0012110:	eb 0e                	jmp    c0012120 <scanMADT()+0x4b8>
c0012112:	66 90                	xchg   ax,ax
c0012114:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0012119:	75 05                	jne    c0012120 <scanMADT()+0x4b8>
c001211b:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0012120:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0012125:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012129:	01 d0                	add    eax,edx
c001212b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001212f:	e9 68 fc ff ff       	jmp    c0011d9c <scanMADT()+0x134>
c0012134:	90                   	nop
c0012135:	eb 05                	jmp    c001213c <scanMADT()+0x4d4>
c0012137:	90                   	nop
c0012138:	90                   	nop
c0012139:	8d 76 00             	lea    esi,[esi+0x0]
c001213c:	83 c4 38             	add    esp,0x38
c001213f:	5b                   	pop    ebx
c0012140:	c3                   	ret    
c0012141:	90                   	nop
c0012142:	66 90                	xchg   ax,ax

c0012144 <ACPI::ACPI()>:
c0012144:	83 ec 0c             	sub    esp,0xc
c0012147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001214b:	83 ec 08             	sub    esp,0x8
c001214e:	68 e7 54 02 c0       	push   0xc00254e7
c0012153:	50                   	push   eax
c0012154:	e8 e9 c2 ff ff       	call   c000e442 <Device::Device(char const*)>
c0012159:	83 c4 10             	add    esp,0x10
c001215c:	ba a8 56 02 c0       	mov    edx,0xc00256a8
c0012161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012165:	89 10                	mov    DWORD PTR [eax],edx
c0012167:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001216b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0012172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012176:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0012180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012184:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001218e:	83 ec 0c             	sub    esp,0xc
c0012191:	68 ec 54 02 c0       	push   0xc00254ec
c0012196:	e8 ce 78 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001219b:	83 c4 10             	add    esp,0x10
c001219e:	e8 c5 fa ff ff       	call   c0011c68 <scanMADT()>
c00121a3:	90                   	nop
c00121a4:	83 c4 0c             	add    esp,0xc
c00121a7:	c3                   	ret    

c00121a8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00121a8:	83 ec 2c             	sub    esp,0x2c
c00121ab:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00121af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00121b3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00121b7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00121bb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00121c0:	88 d0                	mov    al,dl
c00121c2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00121c6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00121cb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00121d3:	90                   	nop
c00121d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00121d8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00121de:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00121e2:	0f 8d 9c 00 00 00    	jge    c0012284 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c00121e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00121ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00121f0:	83 c2 2a             	add    edx,0x2a
c00121f3:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00121f7:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00121fc:	75 7a                	jne    c0012278 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c00121fe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012202:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012206:	83 c2 2a             	add    edx,0x2a
c0012209:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001220d:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0012211:	75 65                	jne    c0012278 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0012213:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012218:	74 3a                	je     c0012254 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c001221a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001221e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012222:	83 c2 2a             	add    edx,0x2a
c0012225:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0012229:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001222d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012230:	39 c2                	cmp    edx,eax
c0012232:	74 10                	je     c0012244 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0012234:	83 ec 0c             	sub    esp,0xc
c0012237:	68 40 53 02 c0       	push   0xc0025340
c001223c:	e8 7a 27 00 00       	call   c00149bb <Krnl::panic(char const*)>
c0012241:	83 c4 10             	add    esp,0x10
c0012244:	83 ec 0c             	sub    esp,0xc
c0012247:	68 fa 54 02 c0       	push   0xc00254fa
c001224c:	e8 6a 27 00 00       	call   c00149bb <Krnl::panic(char const*)>
c0012251:	83 c4 10             	add    esp,0x10
c0012254:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012258:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001225c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012260:	83 c2 2a             	add    edx,0x2a
c0012263:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0012267:	8b 02                	mov    eax,DWORD PTR [edx]
c0012269:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001226c:	89 01                	mov    DWORD PTR [ecx],eax
c001226e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0012271:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012276:	66 90                	xchg   ax,ax
c0012278:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001227c:	e9 53 ff ff ff       	jmp    c00121d4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0012281:	8d 76 00             	lea    esi,[esi+0x0]
c0012284:	90                   	nop
c0012285:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012289:	83 c4 2c             	add    esp,0x2c
c001228c:	c2 04 00             	ret    0x4
c001228f:	90                   	nop

c0012290 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0012290:	83 ec 1c             	sub    esp,0x1c
c0012293:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012297:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001229b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001229f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00122a4:	88 c8                	mov    al,cl
c00122a6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00122aa:	88 d0                	mov    al,dl
c00122ac:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00122b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122b4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00122ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122be:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00122c1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00122c5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00122c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122cd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00122d3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00122d7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00122da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00122de:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00122e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122e7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00122ed:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00122f1:	8d 48 01             	lea    ecx,[eax+0x1]
c00122f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122f8:	83 c2 2a             	add    edx,0x2a
c00122fb:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00122ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012303:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012309:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001230d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012310:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012314:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0012318:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001231c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012322:	8d 50 01             	lea    edx,[eax+0x1]
c0012325:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012329:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001232f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012333:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012339:	3d 00 02 00 00       	cmp    eax,0x200
c001233e:	75 10                	jne    c0012350 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0012340:	83 ec 0c             	sub    esp,0xc
c0012343:	68 09 55 02 c0       	push   0xc0025509
c0012348:	e8 6e 26 00 00       	call   c00149bb <Krnl::panic(char const*)>
c001234d:	83 c4 10             	add    esp,0x10
c0012350:	90                   	nop
c0012351:	83 c4 1c             	add    esp,0x1c
c0012354:	c3                   	ret    
c0012355:	90                   	nop
c0012356:	66 90                	xchg   ax,ax

c0012358 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0012358:	b8 00 00 00 00       	mov    eax,0x0
c001235d:	c3                   	ret    
c001235e:	66 90                	xchg   ax,ax

c0012360 <ACPI::detectPCI()>:
c0012360:	53                   	push   ebx
c0012361:	83 ec 68             	sub    esp,0x68
c0012364:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c0012369:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c001236e:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0012373:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012379:	83 e0 04             	and    eax,0x4
c001237c:	84 c0                	test   al,al
c001237e:	74 2c                	je     c00123ac <ACPI::detectPCI()+0x4c>
c0012380:	a1 a8 88 02 c0       	mov    eax,ds:0xc00288a8
c0012385:	83 ec 08             	sub    esp,0x8
c0012388:	68 26 55 02 c0       	push   0xc0025526
c001238d:	50                   	push   eax
c001238e:	e8 5d f8 ff ff       	call   c0011bf0 <findDataTable(unsigned char*, char*)>
c0012393:	83 c4 10             	add    esp,0x10
c0012396:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001239a:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c001239f:	74 0b                	je     c00123ac <ACPI::detectPCI()+0x4c>
c00123a1:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00123a6:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00123ab:	90                   	nop
c00123ac:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c00123b4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00123b8:	8a 00                	mov    al,BYTE PTR [eax]
c00123ba:	3c 01                	cmp    al,0x1
c00123bc:	75 0e                	jne    c00123cc <ACPI::detectPCI()+0x6c>
c00123be:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00123c3:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00123c8:	eb 2a                	jmp    c00123f4 <ACPI::detectPCI()+0x94>
c00123ca:	66 90                	xchg   ax,ax
c00123cc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00123d0:	8a 00                	mov    al,BYTE PTR [eax]
c00123d2:	3c 02                	cmp    al,0x2
c00123d4:	75 1e                	jne    c00123f4 <ACPI::detectPCI()+0x94>
c00123d6:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00123db:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00123e0:	74 12                	je     c00123f4 <ACPI::detectPCI()+0x94>
c00123e2:	83 ec 0c             	sub    esp,0xc
c00123e5:	68 70 53 02 c0       	push   0xc0025370
c00123ea:	e8 cc 25 00 00       	call   c00149bb <Krnl::panic(char const*)>
c00123ef:	83 c4 10             	add    esp,0x10
c00123f2:	66 90                	xchg   ax,ax
c00123f4:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c00123f8:	83 f0 01             	xor    eax,0x1
c00123fb:	84 c0                	test   al,al
c00123fd:	74 41                	je     c0012440 <ACPI::detectPCI()+0xe0>
c00123ff:	e8 4c dd fe ff       	call   c0000150 <manualPCIProbe>
c0012404:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0012408:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c001240d:	75 0d                	jne    c001241c <ACPI::detectPCI()+0xbc>
c001240f:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012414:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012419:	eb 25                	jmp    c0012440 <ACPI::detectPCI()+0xe0>
c001241b:	90                   	nop
c001241c:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c0012421:	75 1d                	jne    c0012440 <ACPI::detectPCI()+0xe0>
c0012423:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012428:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c001242d:	74 11                	je     c0012440 <ACPI::detectPCI()+0xe0>
c001242f:	83 ec 0c             	sub    esp,0xc
c0012432:	68 70 53 02 c0       	push   0xc0025370
c0012437:	e8 7f 25 00 00       	call   c00149bb <Krnl::panic(char const*)>
c001243c:	83 c4 10             	add    esp,0x10
c001243f:	90                   	nop
c0012440:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c0012445:	0f 84 49 03 00 00    	je     c0012794 <ACPI::detectPCI()+0x434>
c001244b:	83 ec 0c             	sub    esp,0xc
c001244e:	68 2b 55 02 c0       	push   0xc002552b
c0012453:	e8 11 76 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012458:	83 c4 10             	add    esp,0x10
c001245b:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012460:	0f 84 8e 00 00 00    	je     c00124f4 <ACPI::detectPCI()+0x194>
c0012466:	a1 60 80 02 c0       	mov    eax,ds:0xc0028060
c001246b:	25 00 08 00 00       	and    eax,0x800
c0012470:	0f 84 16 01 00 00    	je     c001258c <ACPI::detectPCI()+0x22c>
c0012476:	83 ec 0c             	sub    esp,0xc
c0012479:	68 98 53 02 c0       	push   0xc0025398
c001247e:	e8 e6 75 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012483:	83 c4 10             	add    esp,0x10
c0012486:	a1 60 80 02 c0       	mov    eax,ds:0xc0028060
c001248b:	25 80 00 00 00       	and    eax,0x80
c0012490:	0f 85 f6 00 00 00    	jne    c001258c <ACPI::detectPCI()+0x22c>
c0012496:	66 90                	xchg   ax,ax
c0012498:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c001249f:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c00124a4:	89 c2                	mov    edx,eax
c00124a6:	ec                   	in     al,dx
c00124a7:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c00124ab:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c00124af:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c00124b3:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c00124b8:	74 0a                	je     c00124c4 <ACPI::detectPCI()+0x164>
c00124ba:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c00124bf:	74 03                	je     c00124c4 <ACPI::detectPCI()+0x164>
c00124c1:	eb d5                	jmp    c0012498 <ACPI::detectPCI()+0x138>
c00124c3:	90                   	nop
c00124c4:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c00124cb:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c00124d0:	89 c2                	mov    edx,eax
c00124d2:	ec                   	in     al,dx
c00124d3:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c00124d7:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c00124db:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c00124df:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c00124e4:	74 de                	je     c00124c4 <ACPI::detectPCI()+0x164>
c00124e6:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c00124eb:	0f 85 93 00 00 00    	jne    c0012584 <ACPI::detectPCI()+0x224>
c00124f1:	eb d1                	jmp    c00124c4 <ACPI::detectPCI()+0x164>
c00124f3:	90                   	nop
c00124f4:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c00124f8:	83 f0 01             	xor    eax,0x1
c00124fb:	84 c0                	test   al,al
c00124fd:	0f 84 89 00 00 00    	je     c001258c <ACPI::detectPCI()+0x22c>
c0012503:	a1 60 80 02 c0       	mov    eax,ds:0xc0028060
c0012508:	25 00 08 00 00       	and    eax,0x800
c001250d:	74 7d                	je     c001258c <ACPI::detectPCI()+0x22c>
c001250f:	83 ec 0c             	sub    esp,0xc
c0012512:	68 bc 53 02 c0       	push   0xc00253bc
c0012517:	e8 4d 75 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001251c:	83 c4 10             	add    esp,0x10
c001251f:	a1 60 80 02 c0       	mov    eax,ds:0xc0028060
c0012524:	25 80 00 00 00       	and    eax,0x80
c0012529:	75 61                	jne    c001258c <ACPI::detectPCI()+0x22c>
c001252b:	90                   	nop
c001252c:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c0012533:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c0012538:	89 c2                	mov    edx,eax
c001253a:	ec                   	in     al,dx
c001253b:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001253f:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c0012543:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c0012547:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c001254c:	74 0a                	je     c0012558 <ACPI::detectPCI()+0x1f8>
c001254e:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c0012553:	74 03                	je     c0012558 <ACPI::detectPCI()+0x1f8>
c0012555:	eb d5                	jmp    c001252c <ACPI::detectPCI()+0x1cc>
c0012557:	90                   	nop
c0012558:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c001255f:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c0012564:	89 c2                	mov    edx,eax
c0012566:	ec                   	in     al,dx
c0012567:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001256b:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c001256f:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c0012573:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c0012578:	74 de                	je     c0012558 <ACPI::detectPCI()+0x1f8>
c001257a:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c001257f:	75 07                	jne    c0012588 <ACPI::detectPCI()+0x228>
c0012581:	eb d5                	jmp    c0012558 <ACPI::detectPCI()+0x1f8>
c0012583:	90                   	nop
c0012584:	90                   	nop
c0012585:	eb 05                	jmp    c001258c <ACPI::detectPCI()+0x22c>
c0012587:	90                   	nop
c0012588:	90                   	nop
c0012589:	8d 76 00             	lea    esi,[esi+0x0]
c001258c:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c0012594:	83 ec 0c             	sub    esp,0xc
c0012597:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001259b:	e8 6f 74 ff ff       	call   c0009a0f <malloc>
c00125a0:	83 c4 10             	add    esp,0x10
c00125a3:	89 c3                	mov    ebx,eax
c00125a5:	83 ec 0c             	sub    esp,0xc
c00125a8:	53                   	push   ebx
c00125a9:	e8 30 ad 00 00       	call   c001d2de <PCI::PCI()>
c00125ae:	83 c4 10             	add    esp,0x10
c00125b1:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c00125b5:	a1 60 80 02 c0       	mov    eax,ds:0xc0028060
c00125ba:	25 00 08 00 00       	and    eax,0x800
c00125bf:	74 7b                	je     c001263c <ACPI::detectPCI()+0x2dc>
c00125c1:	83 ec 0c             	sub    esp,0xc
c00125c4:	68 43 55 02 c0       	push   0xc0025543
c00125c9:	e8 9b 74 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00125ce:	83 c4 10             	add    esp,0x10
c00125d1:	a1 60 80 02 c0       	mov    eax,ds:0xc0028060
c00125d6:	25 80 00 00 00       	and    eax,0x80
c00125db:	75 5f                	jne    c001263c <ACPI::detectPCI()+0x2dc>
c00125dd:	8d 76 00             	lea    esi,[esi+0x0]
c00125e0:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c00125e7:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00125ec:	89 c2                	mov    edx,eax
c00125ee:	ec                   	in     al,dx
c00125ef:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c00125f3:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c00125f7:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00125fb:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c0012600:	74 0a                	je     c001260c <ACPI::detectPCI()+0x2ac>
c0012602:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c0012607:	74 03                	je     c001260c <ACPI::detectPCI()+0x2ac>
c0012609:	eb d5                	jmp    c00125e0 <ACPI::detectPCI()+0x280>
c001260b:	90                   	nop
c001260c:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c0012613:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c0012618:	89 c2                	mov    edx,eax
c001261a:	ec                   	in     al,dx
c001261b:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001261f:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c0012623:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012627:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c001262c:	74 de                	je     c001260c <ACPI::detectPCI()+0x2ac>
c001262e:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c0012633:	75 03                	jne    c0012638 <ACPI::detectPCI()+0x2d8>
c0012635:	eb d5                	jmp    c001260c <ACPI::detectPCI()+0x2ac>
c0012637:	90                   	nop
c0012638:	90                   	nop
c0012639:	8d 76 00             	lea    esi,[esi+0x0]
c001263c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012640:	83 ec 08             	sub    esp,0x8
c0012643:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012647:	50                   	push   eax
c0012648:	e8 f1 bb ff ff       	call   c000e23e <Device::addChild(Device*)>
c001264d:	83 c4 10             	add    esp,0x10
c0012650:	a1 60 80 02 c0       	mov    eax,ds:0xc0028060
c0012655:	25 00 08 00 00       	and    eax,0x800
c001265a:	74 78                	je     c00126d4 <ACPI::detectPCI()+0x374>
c001265c:	83 ec 0c             	sub    esp,0xc
c001265f:	68 49 55 02 c0       	push   0xc0025549
c0012664:	e8 00 74 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012669:	83 c4 10             	add    esp,0x10
c001266c:	a1 60 80 02 c0       	mov    eax,ds:0xc0028060
c0012671:	25 80 00 00 00       	and    eax,0x80
c0012676:	75 5c                	jne    c00126d4 <ACPI::detectPCI()+0x374>
c0012678:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c001267f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0012684:	89 c2                	mov    edx,eax
c0012686:	ec                   	in     al,dx
c0012687:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c001268b:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c001268f:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c0012693:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c0012698:	74 0a                	je     c00126a4 <ACPI::detectPCI()+0x344>
c001269a:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c001269f:	74 03                	je     c00126a4 <ACPI::detectPCI()+0x344>
c00126a1:	eb d5                	jmp    c0012678 <ACPI::detectPCI()+0x318>
c00126a3:	90                   	nop
c00126a4:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c00126ab:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00126b0:	89 c2                	mov    edx,eax
c00126b2:	ec                   	in     al,dx
c00126b3:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c00126b7:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c00126bb:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c00126bf:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c00126c4:	74 de                	je     c00126a4 <ACPI::detectPCI()+0x344>
c00126c6:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c00126cb:	75 03                	jne    c00126d0 <ACPI::detectPCI()+0x370>
c00126cd:	eb d5                	jmp    c00126a4 <ACPI::detectPCI()+0x344>
c00126cf:	90                   	nop
c00126d0:	90                   	nop
c00126d1:	8d 76 00             	lea    esi,[esi+0x0]
c00126d4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00126d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00126da:	83 c0 08             	add    eax,0x8
c00126dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00126df:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00126e4:	74 0a                	je     c00126f0 <ACPI::detectPCI()+0x390>
c00126e6:	ba 01 00 00 00       	mov    edx,0x1
c00126eb:	eb 0b                	jmp    c00126f8 <ACPI::detectPCI()+0x398>
c00126ed:	8d 76 00             	lea    esi,[esi+0x0]
c00126f0:	ba 02 00 00 00       	mov    edx,0x2
c00126f5:	8d 76 00             	lea    esi,[esi+0x0]
c00126f8:	6a 00                	push   0x0
c00126fa:	6a 00                	push   0x0
c00126fc:	52                   	push   edx
c00126fd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012701:	ff d0                	call   eax
c0012703:	83 c4 10             	add    esp,0x10
c0012706:	a1 60 80 02 c0       	mov    eax,ds:0xc0028060
c001270b:	25 00 08 00 00       	and    eax,0x800
c0012710:	0f 84 26 01 00 00    	je     c001283c <ACPI::detectPCI()+0x4dc>
c0012716:	83 ec 0c             	sub    esp,0xc
c0012719:	68 4f 55 02 c0       	push   0xc002554f
c001271e:	e8 46 73 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012723:	83 c4 10             	add    esp,0x10
c0012726:	a1 60 80 02 c0       	mov    eax,ds:0xc0028060
c001272b:	25 80 00 00 00       	and    eax,0x80
c0012730:	0f 85 06 01 00 00    	jne    c001283c <ACPI::detectPCI()+0x4dc>
c0012736:	66 90                	xchg   ax,ax
c0012738:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c001273f:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012744:	89 c2                	mov    edx,eax
c0012746:	ec                   	in     al,dx
c0012747:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001274b:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c001274f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0012753:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c0012758:	74 0a                	je     c0012764 <ACPI::detectPCI()+0x404>
c001275a:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c001275f:	74 03                	je     c0012764 <ACPI::detectPCI()+0x404>
c0012761:	eb d5                	jmp    c0012738 <ACPI::detectPCI()+0x3d8>
c0012763:	90                   	nop
c0012764:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c001276b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0012770:	89 c2                	mov    edx,eax
c0012772:	ec                   	in     al,dx
c0012773:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0012777:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001277b:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001277f:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c0012784:	74 de                	je     c0012764 <ACPI::detectPCI()+0x404>
c0012786:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c001278b:	0f 85 a7 00 00 00    	jne    c0012838 <ACPI::detectPCI()+0x4d8>
c0012791:	eb d1                	jmp    c0012764 <ACPI::detectPCI()+0x404>
c0012793:	90                   	nop
c0012794:	83 ec 0c             	sub    esp,0xc
c0012797:	68 55 55 02 c0       	push   0xc0025555
c001279c:	e8 5e a5 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00127a1:	83 c4 10             	add    esp,0x10
c00127a4:	83 ec 0c             	sub    esp,0xc
c00127a7:	68 60 55 02 c0       	push   0xc0025560
c00127ac:	e8 b8 72 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00127b1:	83 c4 10             	add    esp,0x10
c00127b4:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c00127bc:	83 ec 0c             	sub    esp,0xc
c00127bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00127c3:	e8 47 72 ff ff       	call   c0009a0f <malloc>
c00127c8:	83 c4 10             	add    esp,0x10
c00127cb:	89 c3                	mov    ebx,eax
c00127cd:	83 ec 0c             	sub    esp,0xc
c00127d0:	53                   	push   ebx
c00127d1:	e8 72 bc 00 00       	call   c001e448 <IDE::IDE()>
c00127d6:	83 c4 10             	add    esp,0x10
c00127d9:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c00127dd:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00127e1:	83 ec 08             	sub    esp,0x8
c00127e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00127e8:	50                   	push   eax
c00127e9:	e8 50 ba ff ff       	call   c000e23e <Device::addChild(Device*)>
c00127ee:	83 c4 10             	add    esp,0x10
c00127f1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00127f5:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c00127ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012803:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001280c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012810:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012819:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001281d:	8b 00                	mov    eax,DWORD PTR [eax]
c001281f:	83 c0 08             	add    eax,0x8
c0012822:	8b 00                	mov    eax,DWORD PTR [eax]
c0012824:	6a 00                	push   0x0
c0012826:	6a 00                	push   0x0
c0012828:	6a 00                	push   0x0
c001282a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001282e:	ff d0                	call   eax
c0012830:	83 c4 10             	add    esp,0x10
c0012833:	eb 07                	jmp    c001283c <ACPI::detectPCI()+0x4dc>
c0012835:	8d 76 00             	lea    esi,[esi+0x0]
c0012838:	90                   	nop
c0012839:	8d 76 00             	lea    esi,[esi+0x0]
c001283c:	90                   	nop
c001283d:	83 c4 68             	add    esp,0x68
c0012840:	5b                   	pop    ebx
c0012841:	c3                   	ret    
c0012842:	66 90                	xchg   ax,ax

c0012844 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0012844:	83 ec 1c             	sub    esp,0x1c
c0012847:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001284b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001284e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012852:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0012857:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001285c:	83 ec 08             	sub    esp,0x8
c001285f:	52                   	push   edx
c0012860:	50                   	push   eax
c0012861:	e8 78 67 ff ff       	call   c0008fde <Computer::readCMOS(unsigned char)>
c0012866:	83 c4 10             	add    esp,0x10
c0012869:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001286d:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0012872:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012877:	83 ec 04             	sub    esp,0x4
c001287a:	6a 01                	push   0x1
c001287c:	52                   	push   edx
c001287d:	50                   	push   eax
c001287e:	e8 37 69 ff ff       	call   c00091ba <Computer::writeCMOS(unsigned char, unsigned char)>
c0012883:	83 c4 10             	add    esp,0x10
c0012886:	90                   	nop
c0012887:	83 c4 1c             	add    esp,0x1c
c001288a:	c3                   	ret    
c001288b:	90                   	nop

c001288c <ACPI::sleep()>:
c001288c:	83 ec 0c             	sub    esp,0xc
c001288f:	83 ec 0c             	sub    esp,0xc
c0012892:	68 75 55 02 c0       	push   0xc0025575
c0012897:	e8 63 a4 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001289c:	83 c4 10             	add    esp,0x10
c001289f:	a1 80 86 02 c0       	mov    eax,ds:0xc0028680
c00128a4:	85 c0                	test   eax,eax
c00128a6:	74 18                	je     c00128c0 <ACPI::sleep()+0x34>
c00128a8:	83 ec 0c             	sub    esp,0xc
c00128ab:	68 82 55 02 c0       	push   0xc0025582
c00128b0:	e8 4a a4 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00128b5:	83 c4 10             	add    esp,0x10
c00128b8:	a1 80 86 02 c0       	mov    eax,ds:0xc0028680
c00128bd:	ff d0                	call   eax
c00128bf:	90                   	nop
c00128c0:	90                   	nop
c00128c1:	83 c4 0c             	add    esp,0xc
c00128c4:	c3                   	ret    
c00128c5:	90                   	nop
c00128c6:	66 90                	xchg   ax,ax

c00128c8 <ACPI::open(int, int, void*)>:
c00128c8:	57                   	push   edi
c00128c9:	56                   	push   esi
c00128ca:	53                   	push   ebx
c00128cb:	81 ec 70 01 00 00    	sub    esp,0x170
c00128d1:	83 ec 0c             	sub    esp,0xc
c00128d4:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00128db:	e8 80 fa ff ff       	call   c0012360 <ACPI::detectPCI()>
c00128e0:	83 c4 10             	add    esp,0x10
c00128e3:	83 ec 0c             	sub    esp,0xc
c00128e6:	68 e0 53 02 c0       	push   0xc00253e0
c00128eb:	e8 79 71 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00128f0:	83 c4 10             	add    esp,0x10
c00128f3:	83 ec 0c             	sub    esp,0xc
c00128f6:	68 9c 55 02 c0       	push   0xc002559c
c00128fb:	e8 c3 49 00 00       	call   c00172c3 <Thr::loadKernelSymbolTable(char const*)>
c0012900:	83 c4 10             	add    esp,0x10
c0012903:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c001290b:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c0012916:	83 ec 0c             	sub    esp,0xc
c0012919:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012920:	e8 ea 70 ff ff       	call   c0009a0f <malloc>
c0012925:	83 c4 10             	add    esp,0x10
c0012928:	89 c3                	mov    ebx,eax
c001292a:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c001292f:	83 ec 04             	sub    esp,0x4
c0012932:	50                   	push   eax
c0012933:	68 ba 55 02 c0       	push   0xc00255ba
c0012938:	53                   	push   ebx
c0012939:	e8 2c a9 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c001293e:	83 c4 10             	add    esp,0x10
c0012941:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0012948:	83 ec 08             	sub    esp,0x8
c001294b:	6a 01                	push   0x1
c001294d:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012954:	e8 d3 a9 ff ff       	call   c000d32c <File::open(FileOpenMode)>
c0012959:	83 c4 10             	add    esp,0x10
c001295c:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0012963:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c001296b:	75 17                	jne    c0012984 <ACPI::open(int, int, void*)+0xbc>
c001296d:	83 ec 0c             	sub    esp,0xc
c0012970:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012977:	e8 0e aa ff ff       	call   c000d38a <File::close()>
c001297c:	83 c4 10             	add    esp,0x10
c001297f:	eb 0b                	jmp    c001298c <ACPI::open(int, int, void*)+0xc4>
c0012981:	8d 76 00             	lea    esi,[esi+0x0]
c0012984:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c001298c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0012994:	74 1e                	je     c00129b4 <ACPI::open(int, int, void*)+0xec>
c0012996:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c001299d:	8b 00                	mov    eax,DWORD PTR [eax]
c001299f:	83 c0 08             	add    eax,0x8
c00129a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00129a4:	83 ec 0c             	sub    esp,0xc
c00129a7:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00129ae:	ff d0                	call   eax
c00129b0:	83 c4 10             	add    esp,0x10
c00129b3:	90                   	nop
c00129b4:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c00129bb:	83 f0 01             	xor    eax,0x1
c00129be:	84 c0                	test   al,al
c00129c0:	74 42                	je     c0012a04 <ACPI::open(int, int, void*)+0x13c>
c00129c2:	83 ec 0c             	sub    esp,0xc
c00129c5:	68 d8 55 02 c0       	push   0xc00255d8
c00129ca:	e8 9a 70 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00129cf:	83 c4 10             	add    esp,0x10
c00129d2:	83 ec 04             	sub    esp,0x4
c00129d5:	6a 0c                	push   0xc
c00129d7:	68 f3 55 02 c0       	push   0xc00255f3
c00129dc:	68 04 56 02 c0       	push   0xc0025604
c00129e1:	e8 47 2f 00 00       	call   c001592d <Reg::readIntWithDefault(char*, char*, int)>
c00129e6:	83 c4 10             	add    esp,0x10
c00129e9:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c00129f0:	83 ec 0c             	sub    esp,0xc
c00129f3:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c00129fa:	e8 e4 91 ff ff       	call   c000bbe3 <Virt::setupPageSwapping(int)>
c00129ff:	83 c4 10             	add    esp,0x10
c0012a02:	66 90                	xchg   ax,ax
c0012a04:	83 ec 0c             	sub    esp,0xc
c0012a07:	68 66 3d 02 c0       	push   0xc0023d66
c0012a0c:	e8 58 70 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012a11:	83 c4 10             	add    esp,0x10
c0012a14:	8b 1d 48 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028048
c0012a1a:	83 ec 08             	sub    esp,0x8
c0012a1d:	6a 01                	push   0x1
c0012a1f:	68 0b 56 02 c0       	push   0xc002560b
c0012a24:	e8 11 53 00 00       	call   c0017d3a <Thr::loadDLL(char const*, bool)>
c0012a29:	83 c4 10             	add    esp,0x10
c0012a2c:	83 ec 08             	sub    esp,0x8
c0012a2f:	53                   	push   ebx
c0012a30:	50                   	push   eax
c0012a31:	e8 35 55 00 00       	call   c0017f6b <Thr::executeDLL(unsigned long, void*)>
c0012a36:	83 c4 10             	add    esp,0x10
c0012a39:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012a40:	83 ec 08             	sub    esp,0x8
c0012a43:	6a 12                	push   0x12
c0012a45:	50                   	push   eax
c0012a46:	e8 77 bb ff ff       	call   c000e5c2 <getDevicesOfType(DeviceType)>
c0012a4b:	83 c4 0c             	add    esp,0xc
c0012a4e:	66 90                	xchg   ax,ax
c0012a50:	83 ec 0c             	sub    esp,0xc
c0012a53:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012a5a:	50                   	push   eax
c0012a5b:	e8 00 05 01 00       	call   c0022f60 <LinkedList<Device>::isEmpty()>
c0012a60:	83 c4 10             	add    esp,0x10
c0012a63:	83 f0 01             	xor    eax,0x1
c0012a66:	84 c0                	test   al,al
c0012a68:	0f 84 46 01 00 00    	je     c0012bb4 <ACPI::open(int, int, void*)+0x2ec>
c0012a6e:	83 ec 0c             	sub    esp,0xc
c0012a71:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012a78:	50                   	push   eax
c0012a79:	e8 fe 04 01 00       	call   c0022f7c <LinkedList<Device>::getFirstElement()>
c0012a7e:	83 c4 10             	add    esp,0x10
c0012a81:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012a88:	83 ec 0c             	sub    esp,0xc
c0012a8b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012a92:	50                   	push   eax
c0012a93:	e8 ec 04 01 00       	call   c0022f84 <LinkedList<Device>::removeFirst()>
c0012a98:	83 c4 10             	add    esp,0x10
c0012a9b:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0012aa2:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012aa9:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0012ab0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012ab4:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0012aba:	ba 09 00 00 00       	mov    edx,0x9
c0012abf:	fc                   	cld    
c0012ac0:	89 c7                	mov    edi,eax
c0012ac2:	89 de                	mov    esi,ebx
c0012ac4:	89 d1                	mov    ecx,edx
c0012ac6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012ac8:	83 ec 08             	sub    esp,0x8
c0012acb:	8d 44 24 38          	lea    eax,[esp+0x38]
c0012acf:	50                   	push   eax
c0012ad0:	83 ec 24             	sub    esp,0x24
c0012ad3:	89 e0                	mov    eax,esp
c0012ad5:	89 c3                	mov    ebx,eax
c0012ad7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012adb:	ba 09 00 00 00       	mov    edx,0x9
c0012ae0:	89 df                	mov    edi,ebx
c0012ae2:	89 c6                	mov    esi,eax
c0012ae4:	89 d1                	mov    ecx,edx
c0012ae6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012ae8:	e8 cf ac 00 00       	call   c001d7bc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0012aed:	83 c4 30             	add    esp,0x30
c0012af0:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0012af7:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0012aff:	0f 84 4b ff ff ff    	je     c0012a50 <ACPI::open(int, int, void*)+0x188>
c0012b05:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0012b10:	83 ec 0c             	sub    esp,0xc
c0012b13:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0012b1a:	e8 f0 6e ff ff       	call   c0009a0f <malloc>
c0012b1f:	83 c4 10             	add    esp,0x10
c0012b22:	89 c3                	mov    ebx,eax
c0012b24:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0012b29:	83 ec 04             	sub    esp,0x4
c0012b2c:	50                   	push   eax
c0012b2d:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012b34:	53                   	push   ebx
c0012b35:	e8 30 a7 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0012b3a:	83 c4 10             	add    esp,0x10
c0012b3d:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0012b44:	83 ec 0c             	sub    esp,0xc
c0012b47:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012b4e:	e8 47 aa ff ff       	call   c000d59a <File::exists()>
c0012b53:	83 c4 10             	add    esp,0x10
c0012b56:	84 c0                	test   al,al
c0012b58:	74 2a                	je     c0012b84 <ACPI::open(int, int, void*)+0x2bc>
c0012b5a:	83 ec 08             	sub    esp,0x8
c0012b5d:	6a 01                	push   0x1
c0012b5f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012b66:	e8 cf 51 00 00       	call   c0017d3a <Thr::loadDLL(char const*, bool)>
c0012b6b:	83 c4 10             	add    esp,0x10
c0012b6e:	83 ec 08             	sub    esp,0x8
c0012b71:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012b78:	50                   	push   eax
c0012b79:	e8 ed 53 00 00       	call   c0017f6b <Thr::executeDLL(unsigned long, void*)>
c0012b7e:	83 c4 10             	add    esp,0x10
c0012b81:	8d 76 00             	lea    esi,[esi+0x0]
c0012b84:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0012b8c:	0f 84 be fe ff ff    	je     c0012a50 <ACPI::open(int, int, void*)+0x188>
c0012b92:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0012b99:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b9b:	83 c0 08             	add    eax,0x8
c0012b9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ba0:	83 ec 0c             	sub    esp,0xc
c0012ba3:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012baa:	ff d0                	call   eax
c0012bac:	83 c4 10             	add    esp,0x10
c0012baf:	e9 9c fe ff ff       	jmp    c0012a50 <ACPI::open(int, int, void*)+0x188>
c0012bb4:	83 ec 0c             	sub    esp,0xc
c0012bb7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012bbe:	50                   	push   eax
c0012bbf:	e8 98 03 01 00       	call   c0022f5c <LinkedList<Device>::~LinkedList()>
c0012bc4:	83 c4 10             	add    esp,0x10
c0012bc7:	8b 1d 48 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028048
c0012bcd:	83 ec 08             	sub    esp,0x8
c0012bd0:	6a 01                	push   0x1
c0012bd2:	68 26 56 02 c0       	push   0xc0025626
c0012bd7:	e8 5e 51 00 00       	call   c0017d3a <Thr::loadDLL(char const*, bool)>
c0012bdc:	83 c4 10             	add    esp,0x10
c0012bdf:	83 ec 08             	sub    esp,0x8
c0012be2:	53                   	push   ebx
c0012be3:	50                   	push   eax
c0012be4:	e8 82 53 00 00       	call   c0017f6b <Thr::executeDLL(unsigned long, void*)>
c0012be9:	83 c4 10             	add    esp,0x10
c0012bec:	8b 1d 48 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028048
c0012bf2:	83 ec 08             	sub    esp,0x8
c0012bf5:	6a 01                	push   0x1
c0012bf7:	68 43 56 02 c0       	push   0xc0025643
c0012bfc:	e8 39 51 00 00       	call   c0017d3a <Thr::loadDLL(char const*, bool)>
c0012c01:	83 c4 10             	add    esp,0x10
c0012c04:	83 ec 08             	sub    esp,0x8
c0012c07:	53                   	push   ebx
c0012c08:	50                   	push   eax
c0012c09:	e8 5d 53 00 00       	call   c0017f6b <Thr::executeDLL(unsigned long, void*)>
c0012c0e:	83 c4 10             	add    esp,0x10
c0012c11:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0012c16:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012c1c:	83 e0 04             	and    eax,0x4
c0012c1f:	84 c0                	test   al,al
c0012c21:	0f 84 15 01 00 00    	je     c0012d3c <ACPI::open(int, int, void*)+0x474>
c0012c27:	83 ec 0c             	sub    esp,0xc
c0012c2a:	68 60 56 02 c0       	push   0xc0025660
c0012c2f:	e8 35 6e ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012c34:	83 c4 10             	add    esp,0x10
c0012c37:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0012c42:	83 ec 0c             	sub    esp,0xc
c0012c45:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0012c4c:	e8 be 6d ff ff       	call   c0009a0f <malloc>
c0012c51:	83 c4 10             	add    esp,0x10
c0012c54:	89 c3                	mov    ebx,eax
c0012c56:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0012c5b:	83 ec 04             	sub    esp,0x4
c0012c5e:	50                   	push   eax
c0012c5f:	68 7d 56 02 c0       	push   0xc002567d
c0012c64:	53                   	push   ebx
c0012c65:	e8 00 a6 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0012c6a:	83 c4 10             	add    esp,0x10
c0012c6d:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0012c74:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012c7c:	74 1a                	je     c0012c98 <ACPI::open(int, int, void*)+0x3d0>
c0012c7e:	83 ec 0c             	sub    esp,0xc
c0012c81:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012c88:	e8 0d a9 ff ff       	call   c000d59a <File::exists()>
c0012c8d:	83 c4 10             	add    esp,0x10
c0012c90:	84 c0                	test   al,al
c0012c92:	74 04                	je     c0012c98 <ACPI::open(int, int, void*)+0x3d0>
c0012c94:	b0 01                	mov    al,0x1
c0012c96:	eb 04                	jmp    c0012c9c <ACPI::open(int, int, void*)+0x3d4>
c0012c98:	b0 00                	mov    al,0x0
c0012c9a:	66 90                	xchg   ax,ax
c0012c9c:	84 c0                	test   al,al
c0012c9e:	74 28                	je     c0012cc8 <ACPI::open(int, int, void*)+0x400>
c0012ca0:	83 ec 08             	sub    esp,0x8
c0012ca3:	6a 01                	push   0x1
c0012ca5:	68 7d 56 02 c0       	push   0xc002567d
c0012caa:	e8 8b 50 00 00       	call   c0017d3a <Thr::loadDLL(char const*, bool)>
c0012caf:	83 c4 10             	add    esp,0x10
c0012cb2:	83 ec 08             	sub    esp,0x8
c0012cb5:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0012cbc:	50                   	push   eax
c0012cbd:	e8 a9 52 00 00       	call   c0017f6b <Thr::executeDLL(unsigned long, void*)>
c0012cc2:	83 c4 10             	add    esp,0x10
c0012cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0012cc8:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012cd0:	74 2a                	je     c0012cfc <ACPI::open(int, int, void*)+0x434>
c0012cd2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012cda:	74 20                	je     c0012cfc <ACPI::open(int, int, void*)+0x434>
c0012cdc:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0012ce3:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ce5:	83 c0 08             	add    eax,0x8
c0012ce8:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cea:	83 ec 0c             	sub    esp,0xc
c0012ced:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012cf4:	ff d0                	call   eax
c0012cf6:	83 c4 10             	add    esp,0x10
c0012cf9:	8d 76 00             	lea    esi,[esi+0x0]
c0012cfc:	a1 a8 88 02 c0       	mov    eax,ds:0xc00288a8
c0012d01:	83 ec 08             	sub    esp,0x8
c0012d04:	68 9a 56 02 c0       	push   0xc002569a
c0012d09:	50                   	push   eax
c0012d0a:	e8 e1 ee ff ff       	call   c0011bf0 <findDataTable(unsigned char*, char*)>
c0012d0f:	83 c4 10             	add    esp,0x10
c0012d12:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0012d19:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0012d21:	74 19                	je     c0012d3c <ACPI::open(int, int, void*)+0x474>
c0012d23:	83 ec 08             	sub    esp,0x8
c0012d26:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012d2d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012d34:	e8 0b fb ff ff       	call   c0012844 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0012d39:	83 c4 10             	add    esp,0x10
c0012d3c:	b8 00 00 00 00       	mov    eax,0x0
c0012d41:	81 c4 70 01 00 00    	add    esp,0x170
c0012d47:	5b                   	pop    ebx
c0012d48:	5e                   	pop    esi
c0012d49:	5f                   	pop    edi
c0012d4a:	c3                   	ret    
c0012d4b:	90                   	nop

c0012d4c <CPU::close(int, int, void*)>:
c0012d4c:	31 c0                	xor    eax,eax
c0012d4e:	c3                   	ret    
c0012d4f:	90                   	nop

c0012d50 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0012d50:	55                   	push   ebp
c0012d51:	57                   	push   edi
c0012d52:	56                   	push   esi
c0012d53:	53                   	push   ebx
c0012d54:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012d58:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012d5c:	89 ce                	mov    esi,ecx
c0012d5e:	89 d5                	mov    ebp,edx
c0012d60:	80 f9 04             	cmp    cl,0x4
c0012d63:	75 28                	jne    c0012d8d <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0012d65:	8d 42 f9             	lea    eax,[edx-0x7]
c0012d68:	3c 03                	cmp    al,0x3
c0012d6a:	0f 86 63 01 00 00    	jbe    c0012ed3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012d70:	80 fa 03             	cmp    dl,0x3
c0012d73:	0f 84 5a 01 00 00    	je     c0012ed3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012d79:	8d 7a f2             	lea    edi,[edx-0xe]
c0012d7c:	b8 10 79 02 c0       	mov    eax,0xc0027910
c0012d81:	89 fb                	mov    ebx,edi
c0012d83:	80 fb 01             	cmp    bl,0x1
c0012d86:	77 4e                	ja     c0012dd6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0012d88:	e9 52 01 00 00       	jmp    c0012edf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d8d:	80 f9 05             	cmp    cl,0x5
c0012d90:	75 4d                	jne    c0012ddf <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0012d92:	b8 20 79 02 c0       	mov    eax,0xc0027920
c0012d97:	80 fa 03             	cmp    dl,0x3
c0012d9a:	0f 86 3f 01 00 00    	jbe    c0012edf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012da0:	8d 7a fa             	lea    edi,[edx-0x6]
c0012da3:	b8 30 79 02 c0       	mov    eax,0xc0027930
c0012da8:	89 fb                	mov    ebx,edi
c0012daa:	80 fb 01             	cmp    bl,0x1
c0012dad:	0f 86 2c 01 00 00    	jbe    c0012edf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012db3:	b8 40 79 02 c0       	mov    eax,0xc0027940
c0012db8:	80 fa 08             	cmp    dl,0x8
c0012dbb:	0f 84 1e 01 00 00    	je     c0012edf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012dc1:	89 d7                	mov    edi,edx
c0012dc3:	b8 50 79 02 c0       	mov    eax,0xc0027950
c0012dc8:	83 e7 fb             	and    edi,0xfffffffb
c0012dcb:	89 fb                	mov    ebx,edi
c0012dcd:	80 fb 09             	cmp    bl,0x9
c0012dd0:	0f 84 09 01 00 00    	je     c0012edf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012dd6:	31 c0                	xor    eax,eax
c0012dd8:	89 eb                	mov    ebx,ebp
c0012dda:	0f b6 fb             	movzx  edi,bl
c0012ddd:	eb 30                	jmp    c0012e0f <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0012ddf:	31 c0                	xor    eax,eax
c0012de1:	80 f9 06             	cmp    cl,0x6
c0012de4:	75 f2                	jne    c0012dd8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012de6:	80 fa 0a             	cmp    dl,0xa
c0012de9:	77 ed                	ja     c0012dd8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012deb:	bf de 05 00 00       	mov    edi,0x5de
c0012df0:	0f a3 d7             	bt     edi,edx
c0012df3:	73 e3                	jae    c0012dd8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012df5:	b8 60 79 02 c0       	mov    eax,0xc0027960
c0012dfa:	e9 e0 00 00 00       	jmp    c0012edf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012dff:	39 c7                	cmp    edi,eax
c0012e01:	0f 84 d3 00 00 00    	je     c0012eda <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012e07:	40                   	inc    eax
c0012e08:	3d d0 00 00 00       	cmp    eax,0xd0
c0012e0d:	74 09                	je     c0012e18 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0012e0f:	89 f3                	mov    ebx,esi
c0012e11:	80 fb 0f             	cmp    bl,0xf
c0012e14:	75 f1                	jne    c0012e07 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0012e16:	eb e7                	jmp    c0012dff <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0012e18:	80 f9 10             	cmp    cl,0x10
c0012e1b:	75 14                	jne    c0012e31 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0012e1d:	8d 42 fc             	lea    eax,[edx-0x4]
c0012e20:	83 e0 fb             	and    eax,0xfffffffb
c0012e23:	3c 02                	cmp    al,0x2
c0012e25:	76 34                	jbe    c0012e5b <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0012e27:	b8 21 58 02 c0       	mov    eax,0xc0025821
c0012e2c:	80 fa 02             	cmp    dl,0x2
c0012e2f:	eb 24                	jmp    c0012e55 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0012e31:	80 f9 11             	cmp    cl,0x11
c0012e34:	75 13                	jne    c0012e49 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0012e36:	b8 21 58 02 c0       	mov    eax,0xc0025821
c0012e3b:	80 fa 03             	cmp    dl,0x3
c0012e3e:	0f 85 9b 00 00 00    	jne    c0012edf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e44:	e9 91 00 00 00       	jmp    c0012eda <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012e49:	80 f9 12             	cmp    cl,0x12
c0012e4c:	75 14                	jne    c0012e62 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0012e4e:	b8 21 58 02 c0       	mov    eax,0xc0025821
c0012e53:	fe ca                	dec    dl
c0012e55:	0f 85 84 00 00 00    	jne    c0012edf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e5b:	b8 80 79 02 c0       	mov    eax,0xc0027980
c0012e60:	eb 7d                	jmp    c0012edf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e62:	80 f9 14             	cmp    cl,0x14
c0012e65:	75 12                	jne    c0012e79 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0012e67:	4a                   	dec    edx
c0012e68:	b8 21 58 02 c0       	mov    eax,0xc0025821
c0012e6d:	80 fa 01             	cmp    dl,0x1
c0012e70:	77 6d                	ja     c0012edf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e72:	b8 90 79 02 c0       	mov    eax,0xc0027990
c0012e77:	eb 66                	jmp    c0012edf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e79:	80 f9 15             	cmp    cl,0x15
c0012e7c:	75 31                	jne    c0012eaf <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0012e7e:	b8 a0 79 02 c0       	mov    eax,0xc00279a0
c0012e83:	80 fa 01             	cmp    dl,0x1
c0012e86:	74 57                	je     c0012edf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e88:	b8 21 58 02 c0       	mov    eax,0xc0025821
c0012e8d:	80 fa 13             	cmp    dl,0x13
c0012e90:	76 0c                	jbe    c0012e9e <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0012e92:	80 fa 30             	cmp    dl,0x30
c0012e95:	75 48                	jne    c0012edf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e97:	b8 c0 79 02 c0       	mov    eax,0xc00279c0
c0012e9c:	eb 41                	jmp    c0012edf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e9e:	b9 04 00 09 00       	mov    ecx,0x90004
c0012ea3:	0f a3 d1             	bt     ecx,edx
c0012ea6:	73 37                	jae    c0012edf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ea8:	b8 b0 79 02 c0       	mov    eax,0xc00279b0
c0012ead:	eb 30                	jmp    c0012edf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012eaf:	b8 21 58 02 c0       	mov    eax,0xc0025821
c0012eb4:	80 f9 16             	cmp    cl,0x16
c0012eb7:	75 26                	jne    c0012edf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012eb9:	b8 d0 79 02 c0       	mov    eax,0xc00279d0
c0012ebe:	84 d2                	test   dl,dl
c0012ec0:	74 1d                	je     c0012edf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ec2:	b8 21 58 02 c0       	mov    eax,0xc0025821
c0012ec7:	80 fa 30             	cmp    dl,0x30
c0012eca:	75 13                	jne    c0012edf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ecc:	b8 e0 79 02 c0       	mov    eax,0xc00279e0
c0012ed1:	eb 0c                	jmp    c0012edf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ed3:	b8 00 79 02 c0       	mov    eax,0xc0027900
c0012ed8:	eb 05                	jmp    c0012edf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012eda:	b8 70 79 02 c0       	mov    eax,0xc0027970
c0012edf:	5b                   	pop    ebx
c0012ee0:	5e                   	pop    esi
c0012ee1:	5f                   	pop    edi
c0012ee2:	5d                   	pop    ebp
c0012ee3:	c3                   	ret    

c0012ee4 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0012ee4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ee8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012eec:	80 f9 04             	cmp    cl,0x4
c0012eef:	75 6b                	jne    c0012f5c <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0012ef1:	b8 60 77 02 c0       	mov    eax,0xc0027760
c0012ef6:	80 fa 01             	cmp    dl,0x1
c0012ef9:	0f 86 92 02 00 00    	jbe    c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012eff:	b8 70 77 02 c0       	mov    eax,0xc0027770
c0012f04:	80 fa 02             	cmp    dl,0x2
c0012f07:	0f 84 84 02 00 00    	je     c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f0d:	b8 80 77 02 c0       	mov    eax,0xc0027780
c0012f12:	80 fa 03             	cmp    dl,0x3
c0012f15:	0f 84 76 02 00 00    	je     c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f1b:	b8 90 77 02 c0       	mov    eax,0xc0027790
c0012f20:	80 fa 04             	cmp    dl,0x4
c0012f23:	0f 84 68 02 00 00    	je     c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f29:	b8 a0 77 02 c0       	mov    eax,0xc00277a0
c0012f2e:	80 fa 05             	cmp    dl,0x5
c0012f31:	0f 84 5a 02 00 00    	je     c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f37:	b8 80 77 02 c0       	mov    eax,0xc0027780
c0012f3c:	80 fa 07             	cmp    dl,0x7
c0012f3f:	0f 84 4c 02 00 00    	je     c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f45:	83 ea 08             	sub    edx,0x8
c0012f48:	b8 21 58 02 c0       	mov    eax,0xc0025821
c0012f4d:	80 fa 01             	cmp    dl,0x1
c0012f50:	0f 87 3b 02 00 00    	ja     c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f56:	b8 b0 77 02 c0       	mov    eax,0xc00277b0
c0012f5b:	c3                   	ret    
c0012f5c:	80 f9 05             	cmp    cl,0x5
c0012f5f:	75 45                	jne    c0012fa6 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0012f61:	8d 4a ff             	lea    ecx,[edx-0x1]
c0012f64:	b8 c0 77 02 c0       	mov    eax,0xc00277c0
c0012f69:	80 f9 02             	cmp    cl,0x2
c0012f6c:	0f 86 1f 02 00 00    	jbe    c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f72:	80 fa 04             	cmp    dl,0x4
c0012f75:	0f 84 f3 01 00 00    	je     c001316e <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0012f7b:	80 fa 07             	cmp    dl,0x7
c0012f7e:	0f 84 0d 02 00 00    	je     c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f84:	b8 d0 77 02 c0       	mov    eax,0xc00277d0
c0012f89:	80 fa 08             	cmp    dl,0x8
c0012f8c:	0f 84 ff 01 00 00    	je     c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f92:	b8 21 58 02 c0       	mov    eax,0xc0025821
c0012f97:	80 fa 09             	cmp    dl,0x9
c0012f9a:	0f 85 f1 01 00 00    	jne    c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fa0:	b8 e0 77 02 c0       	mov    eax,0xc00277e0
c0012fa5:	c3                   	ret    
c0012fa6:	80 f9 06             	cmp    cl,0x6
c0012fa9:	0f 85 85 01 00 00    	jne    c0013134 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0012faf:	b8 f0 77 02 c0       	mov    eax,0xc00277f0
c0012fb4:	80 fa 01             	cmp    dl,0x1
c0012fb7:	0f 84 d4 01 00 00    	je     c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fbd:	8d 42 fb             	lea    eax,[edx-0x5]
c0012fc0:	3c 01                	cmp    al,0x1
c0012fc2:	0f 86 ac 01 00 00    	jbe    c0013174 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012fc8:	80 fa 03             	cmp    dl,0x3
c0012fcb:	0f 84 a3 01 00 00    	je     c0013174 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012fd1:	8d 4a f9             	lea    ecx,[edx-0x7]
c0012fd4:	b8 10 78 02 c0       	mov    eax,0xc0027810
c0012fd9:	80 f9 01             	cmp    cl,0x1
c0012fdc:	0f 86 af 01 00 00    	jbe    c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fe2:	80 fa 09             	cmp    dl,0x9
c0012fe5:	0f 84 8f 01 00 00    	je     c001317a <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0012feb:	8d 4a f6             	lea    ecx,[edx-0xa]
c0012fee:	80 f9 01             	cmp    cl,0x1
c0012ff1:	0f 86 9a 01 00 00    	jbe    c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ff7:	b8 20 78 02 c0       	mov    eax,0xc0027820
c0012ffc:	80 fa 0d             	cmp    dl,0xd
c0012fff:	0f 84 8c 01 00 00    	je     c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013005:	b8 30 78 02 c0       	mov    eax,0xc0027830
c001300a:	80 fa 0e             	cmp    dl,0xe
c001300d:	0f 84 7e 01 00 00    	je     c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013013:	b8 40 78 02 c0       	mov    eax,0xc0027840
c0013018:	80 fa 0f             	cmp    dl,0xf
c001301b:	0f 84 70 01 00 00    	je     c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013021:	b8 20 78 02 c0       	mov    eax,0xc0027820
c0013026:	80 fa 15             	cmp    dl,0x15
c0013029:	0f 84 62 01 00 00    	je     c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001302f:	8d 4a ea             	lea    ecx,[edx-0x16]
c0013032:	b8 40 78 02 c0       	mov    eax,0xc0027840
c0013037:	80 f9 01             	cmp    cl,0x1
c001303a:	0f 86 51 01 00 00    	jbe    c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013040:	80 fa 1a             	cmp    dl,0x1a
c0013043:	0f 84 37 01 00 00    	je     c0013180 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0013049:	80 fa 1c             	cmp    dl,0x1c
c001304c:	0f 84 34 01 00 00    	je     c0013186 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0013052:	80 fa 1d             	cmp    dl,0x1d
c0013055:	0f 84 36 01 00 00    	je     c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001305b:	b8 70 78 02 c0       	mov    eax,0xc0027870
c0013060:	80 fa 25             	cmp    dl,0x25
c0013063:	0f 84 28 01 00 00    	je     c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013069:	8d 4a da             	lea    ecx,[edx-0x26]
c001306c:	b8 60 78 02 c0       	mov    eax,0xc0027860
c0013071:	80 f9 01             	cmp    cl,0x1
c0013074:	0f 86 17 01 00 00    	jbe    c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001307a:	b8 80 78 02 c0       	mov    eax,0xc0027880
c001307f:	80 fa 2a             	cmp    dl,0x2a
c0013082:	0f 84 09 01 00 00    	je     c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013088:	b8 70 78 02 c0       	mov    eax,0xc0027870
c001308d:	80 fa 2c             	cmp    dl,0x2c
c0013090:	0f 84 fb 00 00 00    	je     c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013096:	b8 80 78 02 c0       	mov    eax,0xc0027880
c001309b:	80 fa 2d             	cmp    dl,0x2d
c001309e:	0f 84 ed 00 00 00    	je     c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130a4:	b8 50 78 02 c0       	mov    eax,0xc0027850
c00130a9:	80 fa 2e             	cmp    dl,0x2e
c00130ac:	0f 84 df 00 00 00    	je     c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130b2:	b8 70 78 02 c0       	mov    eax,0xc0027870
c00130b7:	80 fa 2f             	cmp    dl,0x2f
c00130ba:	0f 84 d1 00 00 00    	je     c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130c0:	8d 4a cb             	lea    ecx,[edx-0x35]
c00130c3:	b8 60 78 02 c0       	mov    eax,0xc0027860
c00130c8:	80 f9 01             	cmp    cl,0x1
c00130cb:	0f 86 c0 00 00 00    	jbe    c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130d1:	b8 90 78 02 c0       	mov    eax,0xc0027890
c00130d6:	80 fa 37             	cmp    dl,0x37
c00130d9:	0f 84 b2 00 00 00    	je     c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130df:	b8 a0 78 02 c0       	mov    eax,0xc00278a0
c00130e4:	80 fa 3a             	cmp    dl,0x3a
c00130e7:	0f 84 a4 00 00 00    	je     c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130ed:	b8 b0 78 02 c0       	mov    eax,0xc00278b0
c00130f2:	80 fa 3c             	cmp    dl,0x3c
c00130f5:	0f 84 96 00 00 00    	je     c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130fb:	b8 c0 78 02 c0       	mov    eax,0xc00278c0
c0013100:	80 fa 3d             	cmp    dl,0x3d
c0013103:	0f 84 88 00 00 00    	je     c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013109:	b8 a0 78 02 c0       	mov    eax,0xc00278a0
c001310e:	80 fa 3e             	cmp    dl,0x3e
c0013111:	74 7e                	je     c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013113:	8d 42 bb             	lea    eax,[edx-0x45]
c0013116:	3c 01                	cmp    al,0x1
c0013118:	76 72                	jbe    c001318c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001311a:	80 fa 3f             	cmp    dl,0x3f
c001311d:	74 6d                	je     c001318c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001311f:	80 fa 4a             	cmp    dl,0x4a
c0013122:	74 0a                	je     c001312e <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0013124:	b8 21 58 02 c0       	mov    eax,0xc0025821
c0013129:	80 fa 4d             	cmp    dl,0x4d
c001312c:	75 63                	jne    c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001312e:	b8 90 78 02 c0       	mov    eax,0xc0027890
c0013133:	c3                   	ret    
c0013134:	b8 21 58 02 c0       	mov    eax,0xc0025821
c0013139:	80 f9 0b             	cmp    cl,0xb
c001313c:	75 0a                	jne    c0013148 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c001313e:	fe ca                	dec    dl
c0013140:	75 4f                	jne    c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013142:	b8 d0 78 02 c0       	mov    eax,0xc00278d0
c0013147:	c3                   	ret    
c0013148:	80 f9 0f             	cmp    cl,0xf
c001314b:	75 44                	jne    c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001314d:	b8 e0 78 02 c0       	mov    eax,0xc00278e0
c0013152:	80 fa 02             	cmp    dl,0x2
c0013155:	76 3a                	jbe    c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013157:	8d 42 fd             	lea    eax,[edx-0x3]
c001315a:	3c 01                	cmp    al,0x1
c001315c:	76 0a                	jbe    c0013168 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c001315e:	b8 21 58 02 c0       	mov    eax,0xc0025821
c0013163:	80 fa 06             	cmp    dl,0x6
c0013166:	75 29                	jne    c0013191 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013168:	b8 f0 78 02 c0       	mov    eax,0xc00278f0
c001316d:	c3                   	ret    
c001316e:	b8 d0 77 02 c0       	mov    eax,0xc00277d0
c0013173:	c3                   	ret    
c0013174:	b8 00 78 02 c0       	mov    eax,0xc0027800
c0013179:	c3                   	ret    
c001317a:	b8 20 78 02 c0       	mov    eax,0xc0027820
c001317f:	c3                   	ret    
c0013180:	b8 50 78 02 c0       	mov    eax,0xc0027850
c0013185:	c3                   	ret    
c0013186:	b8 60 78 02 c0       	mov    eax,0xc0027860
c001318b:	c3                   	ret    
c001318c:	b8 b0 78 02 c0       	mov    eax,0xc00278b0
c0013191:	c3                   	ret    

c0013192 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0013192:	60                   	pusha  
c0013193:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013197:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001319b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001319f:	9c                   	pushf  
c00131a0:	fa                   	cli    
c00131a1:	0f 09                	wbinvd 
c00131a3:	0f 30                	wrmsr  
c00131a5:	9d                   	popf   
c00131a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131aa:	89 02                	mov    DWORD PTR [edx],eax
c00131ac:	61                   	popa   
c00131ad:	c3                   	ret    

c00131ae <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00131ae:	60                   	pusha  
c00131af:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00131b3:	9c                   	pushf  
c00131b4:	fa                   	cli    
c00131b5:	0f 09                	wbinvd 
c00131b7:	31 c0                	xor    eax,eax
c00131b9:	31 d2                	xor    edx,edx
c00131bb:	0f 32                	rdmsr  
c00131bd:	9d                   	popf   
c00131be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00131c2:	89 02                	mov    DWORD PTR [edx],eax
c00131c4:	61                   	popa   
c00131c5:	c3                   	ret    

c00131c6 <CPU::AMD_K6_writeback(int, int, int)>:
c00131c6:	56                   	push   esi
c00131c7:	53                   	push   ebx
c00131c8:	83 ec 10             	sub    esp,0x10
c00131cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131cf:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00131d4:	75 5d                	jne    c0013233 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00131d6:	83 f8 08             	cmp    eax,0x8
c00131d9:	75 09                	jne    c00131e4 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00131db:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00131e0:	7e 13                	jle    c00131f5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00131e2:	eb 30                	jmp    c0013214 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00131e4:	83 f8 06             	cmp    eax,0x6
c00131e7:	7c 4a                	jl     c0013233 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00131e9:	83 f8 07             	cmp    eax,0x7
c00131ec:	7e 07                	jle    c00131f5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00131ee:	83 f8 09             	cmp    eax,0x9
c00131f1:	74 21                	je     c0013214 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00131f3:	eb 3e                	jmp    c0013233 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00131f5:	89 e6                	mov    esi,esp
c00131f7:	8b 1d 6c 80 02 c0    	mov    ebx,DWORD PTR ds:0xc002806c
c00131fd:	56                   	push   esi
c00131fe:	c1 eb 15             	shr    ebx,0x15
c0013201:	68 82 00 00 c0       	push   0xc0000082
c0013206:	83 e3 7e             	and    ebx,0x7e
c0013209:	e8 a0 ff ff ff       	call   c00131ae <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001320e:	56                   	push   esi
c001320f:	6a 00                	push   0x0
c0013211:	53                   	push   ebx
c0013212:	eb 12                	jmp    c0013226 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0013214:	89 e3                	mov    ebx,esp
c0013216:	53                   	push   ebx
c0013217:	68 82 00 00 c0       	push   0xc0000082
c001321c:	e8 8d ff ff ff       	call   c00131ae <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0013221:	53                   	push   ebx
c0013222:	6a 00                	push   0x0
c0013224:	6a 00                	push   0x0
c0013226:	68 82 00 00 c0       	push   0xc0000082
c001322b:	e8 62 ff ff ff       	call   c0013192 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0013230:	83 c4 18             	add    esp,0x18
c0013233:	83 c4 10             	add    esp,0x10
c0013236:	5b                   	pop    ebx
c0013237:	5e                   	pop    esi
c0013238:	c3                   	ret    
c0013239:	90                   	nop

c001323a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001323a:	55                   	push   ebp
c001323b:	57                   	push   edi
c001323c:	56                   	push   esi
c001323d:	53                   	push   ebx
c001323e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013242:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013246:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001324a:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001324e:	39 05 00 7a 02 c0    	cmp    DWORD PTR ds:0xc0027a00,eax
c0013254:	75 23                	jne    c0013279 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0013256:	a1 0c 8b 02 c0       	mov    eax,ds:0xc0028b0c
c001325b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001325f:	89 06                	mov    DWORD PTR [esi],eax
c0013261:	a1 08 8b 02 c0       	mov    eax,ds:0xc0028b08
c0013266:	89 07                	mov    DWORD PTR [edi],eax
c0013268:	a1 04 8b 02 c0       	mov    eax,ds:0xc0028b04
c001326d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013270:	a1 00 8b 02 c0       	mov    eax,ds:0xc0028b00
c0013275:	89 02                	mov    DWORD PTR [edx],eax
c0013277:	eb 3f                	jmp    c00132b8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0013279:	31 c9                	xor    ecx,ecx
c001327b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001327f:	0f a2                	cpuid  
c0013281:	89 06                	mov    DWORD PTR [esi],eax
c0013283:	89 1f                	mov    DWORD PTR [edi],ebx
c0013285:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013289:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001328c:	89 10                	mov    DWORD PTR [eax],edx
c001328e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013292:	a3 00 7a 02 c0       	mov    ds:0xc0027a00,eax
c0013297:	8b 06                	mov    eax,DWORD PTR [esi]
c0013299:	a3 0c 8b 02 c0       	mov    ds:0xc0028b0c,eax
c001329e:	8b 07                	mov    eax,DWORD PTR [edi]
c00132a0:	a3 08 8b 02 c0       	mov    ds:0xc0028b08,eax
c00132a5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00132a8:	a3 04 8b 02 c0       	mov    ds:0xc0028b04,eax
c00132ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00132b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00132b3:	a3 00 8b 02 c0       	mov    ds:0xc0028b00,eax
c00132b8:	5b                   	pop    ebx
c00132b9:	5e                   	pop    esi
c00132ba:	5f                   	pop    edi
c00132bb:	5d                   	pop    ebp
c00132bc:	c3                   	ret    
c00132bd:	90                   	nop

c00132be <CPU::cpuidCheckEDX(unsigned int)>:
c00132be:	83 ec 10             	sub    esp,0x10
c00132c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00132c5:	50                   	push   eax
c00132c6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00132ca:	50                   	push   eax
c00132cb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00132cf:	50                   	push   eax
c00132d0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00132d4:	50                   	push   eax
c00132d5:	6a 01                	push   0x1
c00132d7:	e8 5e ff ff ff       	call   c001323a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00132dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00132e0:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00132e4:	0f 95 c0             	setne  al
c00132e7:	83 c4 24             	add    esp,0x24
c00132ea:	c3                   	ret    
c00132eb:	90                   	nop

c00132ec <CPU::cpuidCheckECX(unsigned int)>:
c00132ec:	83 ec 10             	sub    esp,0x10
c00132ef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00132f3:	50                   	push   eax
c00132f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00132f8:	50                   	push   eax
c00132f9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00132fd:	50                   	push   eax
c00132fe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013302:	50                   	push   eax
c0013303:	6a 01                	push   0x1
c0013305:	e8 30 ff ff ff       	call   c001323a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001330a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001330e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013312:	0f 95 c0             	setne  al
c0013315:	83 c4 24             	add    esp,0x24
c0013318:	c3                   	ret    
c0013319:	90                   	nop

c001331a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001331a:	83 ec 10             	sub    esp,0x10
c001331d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013321:	50                   	push   eax
c0013322:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013326:	50                   	push   eax
c0013327:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001332b:	50                   	push   eax
c001332c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013330:	50                   	push   eax
c0013331:	6a 07                	push   0x7
c0013333:	e8 02 ff ff ff       	call   c001323a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013338:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001333c:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0013340:	0f 95 c0             	setne  al
c0013343:	83 c4 24             	add    esp,0x24
c0013346:	c3                   	ret    
c0013347:	90                   	nop

c0013348 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0013348:	83 ec 10             	sub    esp,0x10
c001334b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001334f:	50                   	push   eax
c0013350:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013354:	50                   	push   eax
c0013355:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013359:	50                   	push   eax
c001335a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001335e:	50                   	push   eax
c001335f:	6a 07                	push   0x7
c0013361:	e8 d4 fe ff ff       	call   c001323a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013366:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001336a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001336e:	0f 95 c0             	setne  al
c0013371:	83 c4 24             	add    esp,0x24
c0013374:	c3                   	ret    
c0013375:	90                   	nop

c0013376 <CPU::CPU()>:
c0013376:	83 ec 0c             	sub    esp,0xc
c0013379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001337d:	83 ec 08             	sub    esp,0x8
c0013380:	68 21 58 02 c0       	push   0xc0025821
c0013385:	50                   	push   eax
c0013386:	e8 b7 b0 ff ff       	call   c000e442 <Device::Device(char const*)>
c001338b:	83 c4 10             	add    esp,0x10
c001338e:	ba 84 5a 02 c0       	mov    edx,0xc0025a84
c0013393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013397:	89 10                	mov    DWORD PTR [eax],edx
c0013399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001339d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00133a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ab:	05 78 01 00 00       	add    eax,0x178
c00133b0:	83 ec 0c             	sub    esp,0xc
c00133b3:	50                   	push   eax
c00133b4:	e8 eb 5e ff ff       	call   c00092a4 <GDT::GDT()>
c00133b9:	83 c4 10             	add    esp,0x10
c00133bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133c0:	05 7c 09 00 00       	add    eax,0x97c
c00133c5:	83 ec 0c             	sub    esp,0xc
c00133c8:	50                   	push   eax
c00133c9:	e8 2e 61 ff ff       	call   c00094fc <IDT::IDT()>
c00133ce:	83 c4 10             	add    esp,0x10
c00133d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133d5:	05 7c 11 00 00       	add    eax,0x117c
c00133da:	83 ec 0c             	sub    esp,0xc
c00133dd:	50                   	push   eax
c00133de:	e8 39 7f ff ff       	call   c000b31c <TSS::TSS()>
c00133e3:	83 c4 10             	add    esp,0x10
c00133e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ea:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00133f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f5:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00133ff:	90                   	nop
c0013400:	83 c4 0c             	add    esp,0xc
c0013403:	c3                   	ret    

c0013404 <CPU::displayFeatures()>:
c0013404:	c3                   	ret    
c0013405:	90                   	nop

c0013406 <CPU::detectFeatures()>:
c0013406:	55                   	push   ebp
c0013407:	57                   	push   edi
c0013408:	56                   	push   esi
c0013409:	53                   	push   ebx
c001340a:	83 ec 50             	sub    esp,0x50
c001340d:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0013411:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001341b:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0013422:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0013428:	6a 0d                	push   0xd
c001342a:	6a 00                	push   0x0
c001342c:	55                   	push   ebp
c001342d:	e8 52 d2 fe ff       	call   c0000684 <memset>
c0013432:	83 c4 10             	add    esp,0x10
c0013435:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c001343a:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0013441:	0f 84 22 09 00 00    	je     c0013d69 <CPU::detectFeatures()+0x963>
c0013447:	83 ec 0c             	sub    esp,0xc
c001344a:	89 ef                	mov    edi,ebp
c001344c:	6a 10                	push   0x10
c001344e:	e8 6b fe ff ff       	call   c00132be <CPU::cpuidCheckEDX(unsigned int)>
c0013453:	83 e0 01             	and    eax,0x1
c0013456:	8d 14 00             	lea    edx,[eax+eax*1]
c0013459:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001345f:	83 e0 fd             	and    eax,0xfffffffd
c0013462:	09 d0                	or     eax,edx
c0013464:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001346a:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0013471:	e8 48 fe ff ff       	call   c00132be <CPU::cpuidCheckEDX(unsigned int)>
c0013476:	83 e0 01             	and    eax,0x1
c0013479:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013480:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013486:	83 e0 fb             	and    eax,0xfffffffb
c0013489:	09 d0                	or     eax,edx
c001348b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013491:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013498:	e8 21 fe ff ff       	call   c00132be <CPU::cpuidCheckEDX(unsigned int)>
c001349d:	83 e0 01             	and    eax,0x1
c00134a0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00134a7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00134ad:	83 e0 f7             	and    eax,0xfffffff7
c00134b0:	09 d0                	or     eax,edx
c00134b2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00134b8:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00134bf:	e8 fa fd ff ff       	call   c00132be <CPU::cpuidCheckEDX(unsigned int)>
c00134c4:	83 e0 01             	and    eax,0x1
c00134c7:	c1 e0 04             	shl    eax,0x4
c00134ca:	88 c2                	mov    dl,al
c00134cc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00134d2:	83 e0 ef             	and    eax,0xffffffef
c00134d5:	09 d0                	or     eax,edx
c00134d7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00134dd:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00134e4:	e8 d5 fd ff ff       	call   c00132be <CPU::cpuidCheckEDX(unsigned int)>
c00134e9:	83 e0 01             	and    eax,0x1
c00134ec:	c1 e0 05             	shl    eax,0x5
c00134ef:	88 c2                	mov    dl,al
c00134f1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00134f7:	83 e0 df             	and    eax,0xffffffdf
c00134fa:	09 d0                	or     eax,edx
c00134fc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013502:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0013509:	e8 b0 fd ff ff       	call   c00132be <CPU::cpuidCheckEDX(unsigned int)>
c001350e:	83 e0 01             	and    eax,0x1
c0013511:	8d 14 00             	lea    edx,[eax+eax*1]
c0013514:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001351a:	83 e0 fd             	and    eax,0xfffffffd
c001351d:	09 d0                	or     eax,edx
c001351f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013525:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001352c:	e8 8d fd ff ff       	call   c00132be <CPU::cpuidCheckEDX(unsigned int)>
c0013531:	83 e0 01             	and    eax,0x1
c0013534:	c1 e0 06             	shl    eax,0x6
c0013537:	88 c2                	mov    dl,al
c0013539:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001353f:	83 e0 bf             	and    eax,0xffffffbf
c0013542:	09 d0                	or     eax,edx
c0013544:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001354a:	58                   	pop    eax
c001354b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001354f:	50                   	push   eax
c0013550:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013554:	50                   	push   eax
c0013555:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013559:	56                   	push   esi
c001355a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001355e:	50                   	push   eax
c001355f:	6a 00                	push   0x0
c0013561:	e8 d4 fc ff ff       	call   c001323a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013566:	b8 04 00 00 00       	mov    eax,0x4
c001356b:	89 c1                	mov    ecx,eax
c001356d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001356f:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0013575:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013579:	89 c1                	mov    ecx,eax
c001357b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001357d:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0013583:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013587:	89 c1                	mov    ecx,eax
c0013589:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001358b:	83 c4 18             	add    esp,0x18
c001358e:	68 cc 56 02 c0       	push   0xc00256cc
c0013593:	55                   	push   ebp
c0013594:	e8 33 d2 fe ff       	call   c00007cc <strcmp>
c0013599:	83 c4 10             	add    esp,0x10
c001359c:	85 c0                	test   eax,eax
c001359e:	75 0f                	jne    c00135af <CPU::detectFeatures()+0x1a9>
c00135a0:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00135aa:	e9 22 02 00 00       	jmp    c00137d1 <CPU::detectFeatures()+0x3cb>
c00135af:	50                   	push   eax
c00135b0:	50                   	push   eax
c00135b1:	68 d9 56 02 c0       	push   0xc00256d9
c00135b6:	55                   	push   ebp
c00135b7:	e8 10 d2 fe ff       	call   c00007cc <strcmp>
c00135bc:	83 c4 10             	add    esp,0x10
c00135bf:	85 c0                	test   eax,eax
c00135c1:	74 dd                	je     c00135a0 <CPU::detectFeatures()+0x19a>
c00135c3:	50                   	push   eax
c00135c4:	50                   	push   eax
c00135c5:	68 e6 56 02 c0       	push   0xc00256e6
c00135ca:	55                   	push   ebp
c00135cb:	e8 fc d1 fe ff       	call   c00007cc <strcmp>
c00135d0:	83 c4 10             	add    esp,0x10
c00135d3:	85 c0                	test   eax,eax
c00135d5:	74 2a                	je     c0013601 <CPU::detectFeatures()+0x1fb>
c00135d7:	50                   	push   eax
c00135d8:	50                   	push   eax
c00135d9:	68 f3 56 02 c0       	push   0xc00256f3
c00135de:	55                   	push   ebp
c00135df:	e8 e8 d1 fe ff       	call   c00007cc <strcmp>
c00135e4:	83 c4 10             	add    esp,0x10
c00135e7:	85 c0                	test   eax,eax
c00135e9:	74 16                	je     c0013601 <CPU::detectFeatures()+0x1fb>
c00135eb:	50                   	push   eax
c00135ec:	50                   	push   eax
c00135ed:	68 00 57 02 c0       	push   0xc0025700
c00135f2:	55                   	push   ebp
c00135f3:	e8 d4 d1 fe ff       	call   c00007cc <strcmp>
c00135f8:	83 c4 10             	add    esp,0x10
c00135fb:	85 c0                	test   eax,eax
c00135fd:	74 48                	je     c0013647 <CPU::detectFeatures()+0x241>
c00135ff:	eb 0f                	jmp    c0013610 <CPU::detectFeatures()+0x20a>
c0013601:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001360b:	e9 c1 01 00 00       	jmp    c00137d1 <CPU::detectFeatures()+0x3cb>
c0013610:	50                   	push   eax
c0013611:	50                   	push   eax
c0013612:	68 0d 57 02 c0       	push   0xc002570d
c0013617:	55                   	push   ebp
c0013618:	e8 af d1 fe ff       	call   c00007cc <strcmp>
c001361d:	83 c4 10             	add    esp,0x10
c0013620:	85 c0                	test   eax,eax
c0013622:	74 23                	je     c0013647 <CPU::detectFeatures()+0x241>
c0013624:	57                   	push   edi
c0013625:	57                   	push   edi
c0013626:	68 1a 57 02 c0       	push   0xc002571a
c001362b:	55                   	push   ebp
c001362c:	e8 9b d1 fe ff       	call   c00007cc <strcmp>
c0013631:	83 c4 10             	add    esp,0x10
c0013634:	85 c0                	test   eax,eax
c0013636:	75 1e                	jne    c0013656 <CPU::detectFeatures()+0x250>
c0013638:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013642:	e9 8a 01 00 00       	jmp    c00137d1 <CPU::detectFeatures()+0x3cb>
c0013647:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013651:	e9 7b 01 00 00       	jmp    c00137d1 <CPU::detectFeatures()+0x3cb>
c0013656:	56                   	push   esi
c0013657:	56                   	push   esi
c0013658:	68 27 57 02 c0       	push   0xc0025727
c001365d:	55                   	push   ebp
c001365e:	e8 69 d1 fe ff       	call   c00007cc <strcmp>
c0013663:	83 c4 10             	add    esp,0x10
c0013666:	85 c0                	test   eax,eax
c0013668:	75 0f                	jne    c0013679 <CPU::detectFeatures()+0x273>
c001366a:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0013674:	e9 58 01 00 00       	jmp    c00137d1 <CPU::detectFeatures()+0x3cb>
c0013679:	51                   	push   ecx
c001367a:	51                   	push   ecx
c001367b:	68 e6 56 02 c0       	push   0xc00256e6
c0013680:	55                   	push   ebp
c0013681:	e8 46 d1 fe ff       	call   c00007cc <strcmp>
c0013686:	83 c4 10             	add    esp,0x10
c0013689:	85 c0                	test   eax,eax
c001368b:	75 0f                	jne    c001369c <CPU::detectFeatures()+0x296>
c001368d:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0013697:	e9 35 01 00 00       	jmp    c00137d1 <CPU::detectFeatures()+0x3cb>
c001369c:	52                   	push   edx
c001369d:	52                   	push   edx
c001369e:	68 34 57 02 c0       	push   0xc0025734
c00136a3:	55                   	push   ebp
c00136a4:	e8 23 d1 fe ff       	call   c00007cc <strcmp>
c00136a9:	83 c4 10             	add    esp,0x10
c00136ac:	85 c0                	test   eax,eax
c00136ae:	75 0f                	jne    c00136bf <CPU::detectFeatures()+0x2b9>
c00136b0:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00136ba:	e9 12 01 00 00       	jmp    c00137d1 <CPU::detectFeatures()+0x3cb>
c00136bf:	50                   	push   eax
c00136c0:	50                   	push   eax
c00136c1:	68 41 57 02 c0       	push   0xc0025741
c00136c6:	55                   	push   ebp
c00136c7:	e8 00 d1 fe ff       	call   c00007cc <strcmp>
c00136cc:	83 c4 10             	add    esp,0x10
c00136cf:	85 c0                	test   eax,eax
c00136d1:	75 0f                	jne    c00136e2 <CPU::detectFeatures()+0x2dc>
c00136d3:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00136dd:	e9 ef 00 00 00       	jmp    c00137d1 <CPU::detectFeatures()+0x3cb>
c00136e2:	50                   	push   eax
c00136e3:	50                   	push   eax
c00136e4:	68 4e 57 02 c0       	push   0xc002574e
c00136e9:	55                   	push   ebp
c00136ea:	e8 dd d0 fe ff       	call   c00007cc <strcmp>
c00136ef:	83 c4 10             	add    esp,0x10
c00136f2:	85 c0                	test   eax,eax
c00136f4:	75 0f                	jne    c0013705 <CPU::detectFeatures()+0x2ff>
c00136f6:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013700:	e9 cc 00 00 00       	jmp    c00137d1 <CPU::detectFeatures()+0x3cb>
c0013705:	50                   	push   eax
c0013706:	50                   	push   eax
c0013707:	68 5b 57 02 c0       	push   0xc002575b
c001370c:	55                   	push   ebp
c001370d:	e8 ba d0 fe ff       	call   c00007cc <strcmp>
c0013712:	83 c4 10             	add    esp,0x10
c0013715:	85 c0                	test   eax,eax
c0013717:	75 0f                	jne    c0013728 <CPU::detectFeatures()+0x322>
c0013719:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0013723:	e9 a9 00 00 00       	jmp    c00137d1 <CPU::detectFeatures()+0x3cb>
c0013728:	50                   	push   eax
c0013729:	50                   	push   eax
c001372a:	68 68 57 02 c0       	push   0xc0025768
c001372f:	55                   	push   ebp
c0013730:	e8 97 d0 fe ff       	call   c00007cc <strcmp>
c0013735:	83 c4 10             	add    esp,0x10
c0013738:	85 c0                	test   eax,eax
c001373a:	75 0f                	jne    c001374b <CPU::detectFeatures()+0x345>
c001373c:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0013746:	e9 86 00 00 00       	jmp    c00137d1 <CPU::detectFeatures()+0x3cb>
c001374b:	50                   	push   eax
c001374c:	50                   	push   eax
c001374d:	68 75 57 02 c0       	push   0xc0025775
c0013752:	55                   	push   ebp
c0013753:	e8 74 d0 fe ff       	call   c00007cc <strcmp>
c0013758:	83 c4 10             	add    esp,0x10
c001375b:	85 c0                	test   eax,eax
c001375d:	75 0c                	jne    c001376b <CPU::detectFeatures()+0x365>
c001375f:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013769:	eb 66                	jmp    c00137d1 <CPU::detectFeatures()+0x3cb>
c001376b:	50                   	push   eax
c001376c:	50                   	push   eax
c001376d:	68 82 57 02 c0       	push   0xc0025782
c0013772:	55                   	push   ebp
c0013773:	e8 54 d0 fe ff       	call   c00007cc <strcmp>
c0013778:	83 c4 10             	add    esp,0x10
c001377b:	85 c0                	test   eax,eax
c001377d:	75 0c                	jne    c001378b <CPU::detectFeatures()+0x385>
c001377f:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0013789:	eb 46                	jmp    c00137d1 <CPU::detectFeatures()+0x3cb>
c001378b:	57                   	push   edi
c001378c:	57                   	push   edi
c001378d:	68 8f 57 02 c0       	push   0xc002578f
c0013792:	55                   	push   ebp
c0013793:	e8 34 d0 fe ff       	call   c00007cc <strcmp>
c0013798:	83 c4 10             	add    esp,0x10
c001379b:	85 c0                	test   eax,eax
c001379d:	74 e0                	je     c001377f <CPU::detectFeatures()+0x379>
c001379f:	56                   	push   esi
c00137a0:	56                   	push   esi
c00137a1:	68 9c 57 02 c0       	push   0xc002579c
c00137a6:	55                   	push   ebp
c00137a7:	e8 20 d0 fe ff       	call   c00007cc <strcmp>
c00137ac:	83 c4 10             	add    esp,0x10
c00137af:	85 c0                	test   eax,eax
c00137b1:	74 cc                	je     c001377f <CPU::detectFeatures()+0x379>
c00137b3:	51                   	push   ecx
c00137b4:	51                   	push   ecx
c00137b5:	68 a9 57 02 c0       	push   0xc00257a9
c00137ba:	55                   	push   ebp
c00137bb:	e8 0c d0 fe ff       	call   c00007cc <strcmp>
c00137c0:	83 c4 10             	add    esp,0x10
c00137c3:	85 c0                	test   eax,eax
c00137c5:	74 b8                	je     c001377f <CPU::detectFeatures()+0x379>
c00137c7:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00137d1:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00137d6:	0f 86 be 00 00 00    	jbe    c001389a <CPU::detectFeatures()+0x494>
c00137dc:	83 ec 0c             	sub    esp,0xc
c00137df:	68 80 00 00 00       	push   0x80
c00137e4:	e8 31 fb ff ff       	call   c001331a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00137e9:	83 e0 01             	and    eax,0x1
c00137ec:	c1 e0 06             	shl    eax,0x6
c00137ef:	88 c2                	mov    dl,al
c00137f1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00137f7:	83 e0 bf             	and    eax,0xffffffbf
c00137fa:	09 d0                	or     eax,edx
c00137fc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013802:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0013809:	e8 0c fb ff ff       	call   c001331a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001380e:	83 e0 01             	and    eax,0x1
c0013811:	c1 e0 04             	shl    eax,0x4
c0013814:	88 c2                	mov    dl,al
c0013816:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001381c:	83 e0 ef             	and    eax,0xffffffef
c001381f:	09 d0                	or     eax,edx
c0013821:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013827:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001382e:	e8 e7 fa ff ff       	call   c001331a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013833:	c1 e0 07             	shl    eax,0x7
c0013836:	88 c2                	mov    dl,al
c0013838:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001383e:	83 e0 7f             	and    eax,0x7f
c0013841:	09 d0                	or     eax,edx
c0013843:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013849:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013850:	e8 f3 fa ff ff       	call   c0013348 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013855:	83 e0 01             	and    eax,0x1
c0013858:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001385f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013865:	83 e0 f7             	and    eax,0xfffffff7
c0013868:	09 d0                	or     eax,edx
c001386a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013870:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0013877:	e8 cc fa ff ff       	call   c0013348 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001387c:	83 c4 10             	add    esp,0x10
c001387f:	83 e0 01             	and    eax,0x1
c0013882:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013889:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001388f:	83 e0 fb             	and    eax,0xfffffffb
c0013892:	09 d0                	or     eax,edx
c0013894:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001389a:	83 ec 0c             	sub    esp,0xc
c001389d:	8d 44 24 28          	lea    eax,[esp+0x28]
c00138a1:	50                   	push   eax
c00138a2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00138a6:	50                   	push   eax
c00138a7:	8d 74 24 28          	lea    esi,[esp+0x28]
c00138ab:	56                   	push   esi
c00138ac:	8d 44 24 28          	lea    eax,[esp+0x28]
c00138b0:	50                   	push   eax
c00138b1:	6a 01                	push   0x1
c00138b3:	e8 82 f9 ff ff       	call   c001323a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00138b8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00138bc:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00138c2:	88 ca                	mov    dl,cl
c00138c4:	83 e0 f0             	and    eax,0xfffffff0
c00138c7:	83 e2 0f             	and    edx,0xf
c00138ca:	09 d0                	or     eax,edx
c00138cc:	88 ca                	mov    dl,cl
c00138ce:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00138d4:	c0 ea 04             	shr    dl,0x4
c00138d7:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00138db:	0f b6 c2             	movzx  eax,dl
c00138de:	83 c4 20             	add    esp,0x20
c00138e1:	c1 e0 06             	shl    eax,0x6
c00138e4:	89 c7                	mov    edi,eax
c00138e6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00138ec:	66 25 3f c0          	and    ax,0xc03f
c00138f0:	09 f8                	or     eax,edi
c00138f2:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00138f9:	89 c8                	mov    eax,ecx
c00138fb:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0013902:	c1 e8 08             	shr    eax,0x8
c0013905:	83 e5 3f             	and    ebp,0x3f
c0013908:	83 e0 0f             	and    eax,0xf
c001390b:	89 c7                	mov    edi,eax
c001390d:	c1 e7 06             	shl    edi,0x6
c0013910:	09 ef                	or     edi,ebp
c0013912:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0013919:	89 fa                	mov    edx,edi
c001391b:	83 e5 c0             	and    ebp,0xffffffc0
c001391e:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0013924:	88 c2                	mov    dl,al
c0013926:	c0 ea 02             	shr    dl,0x2
c0013929:	89 d7                	mov    edi,edx
c001392b:	09 ef                	or     edi,ebp
c001392d:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0013933:	89 fa                	mov    edx,edi
c0013935:	83 e5 cf             	and    ebp,0xffffffcf
c0013938:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001393e:	89 cf                	mov    edi,ecx
c0013940:	c1 ef 0c             	shr    edi,0xc
c0013943:	83 e7 03             	and    edi,0x3
c0013946:	c1 e7 04             	shl    edi,0x4
c0013949:	09 ef                	or     edi,ebp
c001394b:	3c 06                	cmp    al,0x6
c001394d:	89 fa                	mov    edx,edi
c001394f:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0013955:	74 04                	je     c001395b <CPU::detectFeatures()+0x555>
c0013957:	3c 0f                	cmp    al,0xf
c0013959:	75 5c                	jne    c00139b7 <CPU::detectFeatures()+0x5b1>
c001395b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001395f:	89 cf                	mov    edi,ecx
c0013961:	c1 ef 10             	shr    edi,0x10
c0013964:	c1 e7 04             	shl    edi,0x4
c0013967:	09 fa                	or     edx,edi
c0013969:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c001396f:	0f b6 d2             	movzx  edx,dl
c0013972:	66 81 e7 3f c0       	and    di,0xc03f
c0013977:	c1 e2 06             	shl    edx,0x6
c001397a:	09 fa                	or     edx,edi
c001397c:	3c 0f                	cmp    al,0xf
c001397e:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0013985:	75 30                	jne    c00139b7 <CPU::detectFeatures()+0x5b1>
c0013987:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001398d:	c1 e9 14             	shr    ecx,0x14
c0013990:	83 e0 3f             	and    eax,0x3f
c0013993:	83 c1 0f             	add    ecx,0xf
c0013996:	88 ca                	mov    dl,cl
c0013998:	c0 e9 02             	shr    cl,0x2
c001399b:	c1 e2 06             	shl    edx,0x6
c001399e:	09 d0                	or     eax,edx
c00139a0:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00139a6:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00139ac:	83 e0 c0             	and    eax,0xffffffc0
c00139af:	09 c1                	or     ecx,eax
c00139b1:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00139b7:	83 ec 0c             	sub    esp,0xc
c00139ba:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00139c1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00139c5:	50                   	push   eax
c00139c6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00139ca:	55                   	push   ebp
c00139cb:	56                   	push   esi
c00139cc:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00139d0:	57                   	push   edi
c00139d1:	68 00 00 00 80       	push   0x80000000
c00139d6:	e8 5f f8 ff ff       	call   c001323a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00139db:	83 c4 20             	add    esp,0x20
c00139de:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00139e6:	76 22                	jbe    c0013a0a <CPU::detectFeatures()+0x604>
c00139e8:	83 ec 0c             	sub    esp,0xc
c00139eb:	8d 44 24 28          	lea    eax,[esp+0x28]
c00139ef:	50                   	push   eax
c00139f0:	55                   	push   ebp
c00139f1:	56                   	push   esi
c00139f2:	57                   	push   edi
c00139f3:	68 01 00 00 80       	push   0x80000001
c00139f8:	e8 3d f8 ff ff       	call   c001323a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00139fd:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0013a07:	83 c4 20             	add    esp,0x20
c0013a0a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0013a10:	83 f8 01             	cmp    eax,0x1
c0013a13:	75 6f                	jne    c0013a84 <CPU::detectFeatures()+0x67e>
c0013a15:	51                   	push   ecx
c0013a16:	51                   	push   ecx
c0013a17:	68 b5 57 02 c0       	push   0xc00257b5
c0013a1c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013a20:	56                   	push   esi
c0013a21:	e8 1a cd fe ff       	call   c0000740 <strcpy>
c0013a26:	5f                   	pop    edi
c0013a27:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013a2d:	5d                   	pop    ebp
c0013a2e:	66 c1 e8 06          	shr    ax,0x6
c0013a32:	0f b6 c0             	movzx  eax,al
c0013a35:	50                   	push   eax
c0013a36:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013a3c:	c1 e8 0e             	shr    eax,0xe
c0013a3f:	0f b6 c0             	movzx  eax,al
c0013a42:	50                   	push   eax
c0013a43:	e8 9c f4 ff ff       	call   c0012ee4 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0013a48:	5a                   	pop    edx
c0013a49:	59                   	pop    ecx
c0013a4a:	50                   	push   eax
c0013a4b:	56                   	push   esi
c0013a4c:	e8 2f ce fe ff       	call   c0000880 <strcat>
c0013a51:	5f                   	pop    edi
c0013a52:	5d                   	pop    ebp
c0013a53:	56                   	push   esi
c0013a54:	53                   	push   ebx
c0013a55:	e8 da a9 ff ff       	call   c000e434 <Device::setName(char const*)>
c0013a5a:	58                   	pop    eax
c0013a5b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013a61:	5a                   	pop    edx
c0013a62:	68 bc 57 02 c0       	push   0xc00257bc
c0013a67:	50                   	push   eax
c0013a68:	e8 5f cd fe ff       	call   c00007cc <strcmp>
c0013a6d:	83 c4 10             	add    esp,0x10
c0013a70:	85 c0                	test   eax,eax
c0013a72:	0f 85 71 03 00 00    	jne    c0013de9 <CPU::detectFeatures()+0x9e3>
c0013a78:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0013a7f:	e9 65 03 00 00       	jmp    c0013de9 <CPU::detectFeatures()+0x9e3>
c0013a84:	83 f8 02             	cmp    eax,0x2
c0013a87:	0f 85 b5 00 00 00    	jne    c0013b42 <CPU::detectFeatures()+0x73c>
c0013a8d:	57                   	push   edi
c0013a8e:	57                   	push   edi
c0013a8f:	68 ce 57 02 c0       	push   0xc00257ce
c0013a94:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013a98:	56                   	push   esi
c0013a99:	e8 a2 cc fe ff       	call   c0000740 <strcpy>
c0013a9e:	5d                   	pop    ebp
c0013a9f:	58                   	pop    eax
c0013aa0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013aa6:	66 c1 e8 06          	shr    ax,0x6
c0013aaa:	0f b6 c0             	movzx  eax,al
c0013aad:	50                   	push   eax
c0013aae:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013ab4:	c1 e8 0e             	shr    eax,0xe
c0013ab7:	0f b6 c0             	movzx  eax,al
c0013aba:	50                   	push   eax
c0013abb:	e8 90 f2 ff ff       	call   c0012d50 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0013ac0:	5a                   	pop    edx
c0013ac1:	59                   	pop    ecx
c0013ac2:	50                   	push   eax
c0013ac3:	56                   	push   esi
c0013ac4:	e8 b7 cd fe ff       	call   c0000880 <strcat>
c0013ac9:	5f                   	pop    edi
c0013aca:	5d                   	pop    ebp
c0013acb:	56                   	push   esi
c0013acc:	53                   	push   ebx
c0013acd:	e8 62 a9 ff ff       	call   c000e434 <Device::setName(char const*)>
c0013ad2:	58                   	pop    eax
c0013ad3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013ad9:	5a                   	pop    edx
c0013ada:	68 d3 57 02 c0       	push   0xc00257d3
c0013adf:	50                   	push   eax
c0013ae0:	e8 e7 cc fe ff       	call   c00007cc <strcmp>
c0013ae5:	83 c4 10             	add    esp,0x10
c0013ae8:	85 c0                	test   eax,eax
c0013aea:	75 20                	jne    c0013b0c <CPU::detectFeatures()+0x706>
c0013aec:	8b 15 48 80 02 c0    	mov    edx,DWORD PTR ds:0xc0028048
c0013af2:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013af8:	a8 01                	test   al,0x1
c0013afa:	74 10                	je     c0013b0c <CPU::detectFeatures()+0x706>
c0013afc:	83 e0 fe             	and    eax,0xfffffffe
c0013aff:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013b05:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0013b0c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013b12:	c1 e8 0e             	shr    eax,0xe
c0013b15:	3c 05                	cmp    al,0x5
c0013b17:	0f 85 cc 02 00 00    	jne    c0013de9 <CPU::detectFeatures()+0x9e3>
c0013b1d:	56                   	push   esi
c0013b1e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013b24:	83 e0 0f             	and    eax,0xf
c0013b27:	50                   	push   eax
c0013b28:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013b2e:	66 c1 e8 06          	shr    ax,0x6
c0013b32:	0f b6 c0             	movzx  eax,al
c0013b35:	50                   	push   eax
c0013b36:	6a 05                	push   0x5
c0013b38:	e8 89 f6 ff ff       	call   c00131c6 <CPU::AMD_K6_writeback(int, int, int)>
c0013b3d:	e9 1f 02 00 00       	jmp    c0013d61 <CPU::detectFeatures()+0x95b>
c0013b42:	8d 50 fd             	lea    edx,[eax-0x3]
c0013b45:	83 fa 01             	cmp    edx,0x1
c0013b48:	76 09                	jbe    c0013b53 <CPU::detectFeatures()+0x74d>
c0013b4a:	83 f8 06             	cmp    eax,0x6
c0013b4d:	0f 85 91 01 00 00    	jne    c0013ce4 <CPU::detectFeatures()+0x8de>
c0013b53:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013b59:	c1 ea 0e             	shr    edx,0xe
c0013b5c:	80 fa 05             	cmp    dl,0x5
c0013b5f:	75 7b                	jne    c0013bdc <CPU::detectFeatures()+0x7d6>
c0013b61:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013b67:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013b6c:	66 81 fa 00 01       	cmp    dx,0x100
c0013b71:	75 0c                	jne    c0013b7f <CPU::detectFeatures()+0x779>
c0013b73:	51                   	push   ecx
c0013b74:	51                   	push   ecx
c0013b75:	68 da 57 02 c0       	push   0xc00257da
c0013b7a:	e9 dc 01 00 00       	jmp    c0013d5b <CPU::detectFeatures()+0x955>
c0013b7f:	66 81 fa 00 02       	cmp    dx,0x200
c0013b84:	75 0c                	jne    c0013b92 <CPU::detectFeatures()+0x78c>
c0013b86:	52                   	push   edx
c0013b87:	52                   	push   edx
c0013b88:	68 ed 57 02 c0       	push   0xc00257ed
c0013b8d:	e9 c9 01 00 00       	jmp    c0013d5b <CPU::detectFeatures()+0x955>
c0013b92:	66 81 fa 40 02       	cmp    dx,0x240
c0013b97:	75 0c                	jne    c0013ba5 <CPU::detectFeatures()+0x79f>
c0013b99:	50                   	push   eax
c0013b9a:	50                   	push   eax
c0013b9b:	68 ff 57 02 c0       	push   0xc00257ff
c0013ba0:	e9 b6 01 00 00       	jmp    c0013d5b <CPU::detectFeatures()+0x955>
c0013ba5:	83 f8 06             	cmp    eax,0x6
c0013ba8:	75 0c                	jne    c0013bb6 <CPU::detectFeatures()+0x7b0>
c0013baa:	50                   	push   eax
c0013bab:	50                   	push   eax
c0013bac:	68 11 58 02 c0       	push   0xc0025811
c0013bb1:	e9 a5 01 00 00       	jmp    c0013d5b <CPU::detectFeatures()+0x955>
c0013bb6:	83 f8 04             	cmp    eax,0x4
c0013bb9:	75 0c                	jne    c0013bc7 <CPU::detectFeatures()+0x7c1>
c0013bbb:	50                   	push   eax
c0013bbc:	50                   	push   eax
c0013bbd:	68 1d 58 02 c0       	push   0xc002581d
c0013bc2:	e9 94 01 00 00       	jmp    c0013d5b <CPU::detectFeatures()+0x955>
c0013bc7:	83 f8 03             	cmp    eax,0x3
c0013bca:	0f 85 19 02 00 00    	jne    c0013de9 <CPU::detectFeatures()+0x9e3>
c0013bd0:	50                   	push   eax
c0013bd1:	50                   	push   eax
c0013bd2:	68 25 58 02 c0       	push   0xc0025825
c0013bd7:	e9 7f 01 00 00       	jmp    c0013d5b <CPU::detectFeatures()+0x955>
c0013bdc:	80 fa 06             	cmp    dl,0x6
c0013bdf:	0f 85 db 00 00 00    	jne    c0013cc0 <CPU::detectFeatures()+0x8ba>
c0013be5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013beb:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013bf0:	66 81 fa 80 01       	cmp    dx,0x180
c0013bf5:	75 0c                	jne    c0013c03 <CPU::detectFeatures()+0x7fd>
c0013bf7:	50                   	push   eax
c0013bf8:	50                   	push   eax
c0013bf9:	68 30 58 02 c0       	push   0xc0025830
c0013bfe:	e9 58 01 00 00       	jmp    c0013d5b <CPU::detectFeatures()+0x955>
c0013c03:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0013c09:	66 f7 c1 80 ff       	test   cx,0xff80
c0013c0e:	75 0c                	jne    c0013c1c <CPU::detectFeatures()+0x816>
c0013c10:	50                   	push   eax
c0013c11:	50                   	push   eax
c0013c12:	68 40 58 02 c0       	push   0xc0025840
c0013c17:	e9 3f 01 00 00       	jmp    c0013d5b <CPU::detectFeatures()+0x955>
c0013c1c:	66 81 fa 40 02       	cmp    dx,0x240
c0013c21:	75 0c                	jne    c0013c2f <CPU::detectFeatures()+0x829>
c0013c23:	55                   	push   ebp
c0013c24:	55                   	push   ebp
c0013c25:	68 47 58 02 c0       	push   0xc0025847
c0013c2a:	e9 2c 01 00 00       	jmp    c0013d5b <CPU::detectFeatures()+0x955>
c0013c2f:	66 81 fa 80 02       	cmp    dx,0x280
c0013c34:	75 0c                	jne    c0013c42 <CPU::detectFeatures()+0x83c>
c0013c36:	57                   	push   edi
c0013c37:	57                   	push   edi
c0013c38:	68 50 58 02 c0       	push   0xc0025850
c0013c3d:	e9 19 01 00 00       	jmp    c0013d5b <CPU::detectFeatures()+0x955>
c0013c42:	66 81 fa 40 03       	cmp    dx,0x340
c0013c47:	74 ed                	je     c0013c36 <CPU::detectFeatures()+0x830>
c0013c49:	66 81 fa c0 03       	cmp    dx,0x3c0
c0013c4e:	75 0c                	jne    c0013c5c <CPU::detectFeatures()+0x856>
c0013c50:	56                   	push   esi
c0013c51:	56                   	push   esi
c0013c52:	68 57 58 02 c0       	push   0xc0025857
c0013c57:	e9 ff 00 00 00       	jmp    c0013d5b <CPU::detectFeatures()+0x955>
c0013c5c:	83 f8 06             	cmp    eax,0x6
c0013c5f:	0f 84 45 ff ff ff    	je     c0013baa <CPU::detectFeatures()+0x7a4>
c0013c65:	83 f8 04             	cmp    eax,0x4
c0013c68:	0f 84 4d ff ff ff    	je     c0013bbb <CPU::detectFeatures()+0x7b5>
c0013c6e:	83 f8 03             	cmp    eax,0x3
c0013c71:	0f 85 72 01 00 00    	jne    c0013de9 <CPU::detectFeatures()+0x9e3>
c0013c77:	51                   	push   ecx
c0013c78:	51                   	push   ecx
c0013c79:	68 60 58 02 c0       	push   0xc0025860
c0013c7e:	53                   	push   ebx
c0013c7f:	e8 b0 a7 ff ff       	call   c000e434 <Device::setName(char const*)>
c0013c84:	b1 c1                	mov    cl,0xc1
c0013c86:	88 c8                	mov    al,cl
c0013c88:	e6 22                	out    0x22,al
c0013c8a:	e4 23                	in     al,0x23
c0013c8c:	88 c2                	mov    dl,al
c0013c8e:	88 c8                	mov    al,cl
c0013c90:	e6 22                	out    0x22,al
c0013c92:	88 d0                	mov    al,dl
c0013c94:	83 c8 10             	or     eax,0x10
c0013c97:	e6 23                	out    0x23,al
c0013c99:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0013ca0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0013ca3:	89 d0                	mov    eax,edx
c0013ca5:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0013cab:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0013caf:	40                   	inc    eax
c0013cb0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0013cb6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0013cbb:	e9 a1 00 00 00       	jmp    c0013d61 <CPU::detectFeatures()+0x95b>
c0013cc0:	83 f8 06             	cmp    eax,0x6
c0013cc3:	0f 84 e1 fe ff ff    	je     c0013baa <CPU::detectFeatures()+0x7a4>
c0013cc9:	83 f8 04             	cmp    eax,0x4
c0013ccc:	0f 84 e9 fe ff ff    	je     c0013bbb <CPU::detectFeatures()+0x7b5>
c0013cd2:	83 f8 03             	cmp    eax,0x3
c0013cd5:	0f 85 0e 01 00 00    	jne    c0013de9 <CPU::detectFeatures()+0x9e3>
c0013cdb:	52                   	push   edx
c0013cdc:	52                   	push   edx
c0013cdd:	68 6b 58 02 c0       	push   0xc002586b
c0013ce2:	eb 77                	jmp    c0013d5b <CPU::detectFeatures()+0x955>
c0013ce4:	83 f8 07             	cmp    eax,0x7
c0013ce7:	75 09                	jne    c0013cf2 <CPU::detectFeatures()+0x8ec>
c0013ce9:	50                   	push   eax
c0013cea:	50                   	push   eax
c0013ceb:	68 75 58 02 c0       	push   0xc0025875
c0013cf0:	eb 69                	jmp    c0013d5b <CPU::detectFeatures()+0x955>
c0013cf2:	83 f8 0a             	cmp    eax,0xa
c0013cf5:	75 09                	jne    c0013d00 <CPU::detectFeatures()+0x8fa>
c0013cf7:	50                   	push   eax
c0013cf8:	50                   	push   eax
c0013cf9:	68 80 58 02 c0       	push   0xc0025880
c0013cfe:	eb 5b                	jmp    c0013d5b <CPU::detectFeatures()+0x955>
c0013d00:	83 f8 0b             	cmp    eax,0xb
c0013d03:	75 09                	jne    c0013d0e <CPU::detectFeatures()+0x908>
c0013d05:	50                   	push   eax
c0013d06:	50                   	push   eax
c0013d07:	68 88 58 02 c0       	push   0xc0025888
c0013d0c:	eb 4d                	jmp    c0013d5b <CPU::detectFeatures()+0x955>
c0013d0e:	83 f8 08             	cmp    eax,0x8
c0013d11:	75 09                	jne    c0013d1c <CPU::detectFeatures()+0x916>
c0013d13:	50                   	push   eax
c0013d14:	50                   	push   eax
c0013d15:	68 91 58 02 c0       	push   0xc0025891
c0013d1a:	eb 3f                	jmp    c0013d5b <CPU::detectFeatures()+0x955>
c0013d1c:	83 f8 09             	cmp    eax,0x9
c0013d1f:	75 09                	jne    c0013d2a <CPU::detectFeatures()+0x924>
c0013d21:	50                   	push   eax
c0013d22:	50                   	push   eax
c0013d23:	68 99 58 02 c0       	push   0xc0025899
c0013d28:	eb 31                	jmp    c0013d5b <CPU::detectFeatures()+0x955>
c0013d2a:	83 f8 05             	cmp    eax,0x5
c0013d2d:	75 09                	jne    c0013d38 <CPU::detectFeatures()+0x932>
c0013d2f:	50                   	push   eax
c0013d30:	50                   	push   eax
c0013d31:	68 a1 58 02 c0       	push   0xc00258a1
c0013d36:	eb 23                	jmp    c0013d5b <CPU::detectFeatures()+0x955>
c0013d38:	83 f8 0c             	cmp    eax,0xc
c0013d3b:	75 09                	jne    c0013d46 <CPU::detectFeatures()+0x940>
c0013d3d:	55                   	push   ebp
c0013d3e:	55                   	push   ebp
c0013d3f:	68 af 58 02 c0       	push   0xc00258af
c0013d44:	eb 15                	jmp    c0013d5b <CPU::detectFeatures()+0x955>
c0013d46:	83 f8 0d             	cmp    eax,0xd
c0013d49:	75 09                	jne    c0013d54 <CPU::detectFeatures()+0x94e>
c0013d4b:	57                   	push   edi
c0013d4c:	57                   	push   edi
c0013d4d:	68 ba 58 02 c0       	push   0xc00258ba
c0013d52:	eb 07                	jmp    c0013d5b <CPU::detectFeatures()+0x955>
c0013d54:	56                   	push   esi
c0013d55:	56                   	push   esi
c0013d56:	68 ce 58 02 c0       	push   0xc00258ce
c0013d5b:	53                   	push   ebx
c0013d5c:	e8 d3 a6 ff ff       	call   c000e434 <Device::setName(char const*)>
c0013d61:	83 c4 10             	add    esp,0x10
c0013d64:	e9 80 00 00 00       	jmp    c0013de9 <CPU::detectFeatures()+0x9e3>
c0013d69:	51                   	push   ecx
c0013d6a:	51                   	push   ecx
c0013d6b:	68 1a 57 02 c0       	push   0xc002571a
c0013d70:	55                   	push   ebp
c0013d71:	e8 ca c9 fe ff       	call   c0000740 <strcpy>
c0013d76:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013d80:	e8 5e c4 fe ff       	call   c00001e3 <is486>
c0013d85:	83 c4 10             	add    esp,0x10
c0013d88:	85 c0                	test   eax,eax
c0013d8a:	74 2b                	je     c0013db7 <CPU::detectFeatures()+0x9b1>
c0013d8c:	52                   	push   edx
c0013d8d:	52                   	push   edx
c0013d8e:	68 da 58 02 c0       	push   0xc00258da
c0013d93:	53                   	push   ebx
c0013d94:	e8 9b a6 ff ff       	call   c000e434 <Device::setName(char const*)>
c0013d99:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013da0:	0f 20 c0             	mov    eax,cr0
c0013da3:	83 e0 14             	and    eax,0x14
c0013da6:	83 c4 10             	add    esp,0x10
c0013da9:	83 f8 04             	cmp    eax,0x4
c0013dac:	75 1f                	jne    c0013dcd <CPU::detectFeatures()+0x9c7>
c0013dae:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0013db5:	eb 32                	jmp    c0013de9 <CPU::detectFeatures()+0x9e3>
c0013db7:	50                   	push   eax
c0013db8:	50                   	push   eax
c0013db9:	68 e5 58 02 c0       	push   0xc00258e5
c0013dbe:	53                   	push   ebx
c0013dbf:	e8 70 a6 ff ff       	call   c000e434 <Device::setName(char const*)>
c0013dc4:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0013dcb:	eb d3                	jmp    c0013da0 <CPU::detectFeatures()+0x99a>
c0013dcd:	e8 ec c3 fe ff       	call   c00001be <hasLegacyFPU>
c0013dd2:	83 e0 01             	and    eax,0x1
c0013dd5:	8d 14 00             	lea    edx,[eax+eax*1]
c0013dd8:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013dde:	83 e0 fd             	and    eax,0xfffffffd
c0013de1:	09 d0                	or     eax,edx
c0013de3:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013de9:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0013df0:	83 c4 4c             	add    esp,0x4c
c0013df3:	5b                   	pop    ebx
c0013df4:	5e                   	pop    esi
c0013df5:	5f                   	pop    edi
c0013df6:	5d                   	pop    ebp
c0013df7:	c3                   	ret    

c0013df8 <CPU::setupSMEP()>:
c0013df8:	0f 20 e0             	mov    eax,cr4
c0013dfb:	0d 00 00 10 00       	or     eax,0x100000
c0013e00:	0f 22 e0             	mov    cr4,eax
c0013e03:	c3                   	ret    

c0013e04 <CPU::setupUMIP()>:
c0013e04:	0f 20 e0             	mov    eax,cr4
c0013e07:	80 cc 08             	or     ah,0x8
c0013e0a:	0f 22 e0             	mov    cr4,eax
c0013e0d:	c3                   	ret    

c0013e0e <CPU::setupTSC()>:
c0013e0e:	0f 20 e0             	mov    eax,cr4
c0013e11:	83 c8 04             	or     eax,0x4
c0013e14:	0f 22 e0             	mov    cr4,eax
c0013e17:	c3                   	ret    

c0013e18 <CPU::setupLargePages()>:
c0013e18:	0f 20 e0             	mov    eax,cr4
c0013e1b:	83 c8 10             	or     eax,0x10
c0013e1e:	0f 22 e0             	mov    cr4,eax
c0013e21:	c3                   	ret    

c0013e22 <CPU::setupPAT()>:
c0013e22:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0013e27:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013e2e:	74 2c                	je     c0013e5c <CPU::setupPAT()+0x3a>
c0013e30:	53                   	push   ebx
c0013e31:	83 ec 10             	sub    esp,0x10
c0013e34:	68 77 02 00 00       	push   0x277
c0013e39:	50                   	push   eax
c0013e3a:	e8 eb 50 ff ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c0013e3f:	83 e2 f8             	and    edx,0xfffffff8
c0013e42:	83 ca 01             	or     edx,0x1
c0013e45:	52                   	push   edx
c0013e46:	50                   	push   eax
c0013e47:	68 77 02 00 00       	push   0x277
c0013e4c:	ff 35 48 80 02 c0    	push   DWORD PTR ds:0xc0028048
c0013e52:	e8 ff 50 ff ff       	call   c0008f56 <Computer::wrmsr(unsigned int, unsigned long long)>
c0013e57:	83 c4 28             	add    esp,0x28
c0013e5a:	5b                   	pop    ebx
c0013e5b:	c3                   	ret    
c0013e5c:	c3                   	ret    
c0013e5d:	90                   	nop

c0013e5e <CPU::setupMTRR()>:
c0013e5e:	c3                   	ret    
c0013e5f:	90                   	nop

c0013e60 <CPU::setupGlobalPages()>:
c0013e60:	0f 20 e0             	mov    eax,cr4
c0013e63:	0c 80                	or     al,0x80
c0013e65:	0f 22 e0             	mov    cr4,eax
c0013e68:	c3                   	ret    
c0013e69:	90                   	nop

c0013e6a <CPU::allowUsermodeDataAccess()>:
c0013e6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e6e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013e75:	74 03                	je     c0013e7a <CPU::allowUsermodeDataAccess()+0x10>
c0013e77:	0f 01 cb             	stac   
c0013e7a:	c3                   	ret    
c0013e7b:	90                   	nop

c0013e7c <CPU::prohibitUsermodeDataAccess()>:
c0013e7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e80:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013e87:	74 03                	je     c0013e8c <CPU::prohibitUsermodeDataAccess()+0x10>
c0013e89:	0f 01 ca             	clac   
c0013e8c:	c3                   	ret    
c0013e8d:	90                   	nop

c0013e8e <CPU::setupSMAP()>:
c0013e8e:	0f 20 e0             	mov    eax,cr4
c0013e91:	0d 00 00 20 00       	or     eax,0x200000
c0013e96:	0f 22 e0             	mov    cr4,eax
c0013e99:	eb e1                	jmp    c0013e7c <CPU::prohibitUsermodeDataAccess()>
c0013e9b:	90                   	nop

c0013e9c <CPU::setupFeatures()>:
c0013e9c:	53                   	push   ebx
c0013e9d:	83 ec 08             	sub    esp,0x8
c0013ea0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ea4:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0013eab:	74 18                	je     c0013ec5 <CPU::setupFeatures()+0x29>
c0013ead:	83 ec 0c             	sub    esp,0xc
c0013eb0:	68 f0 58 02 c0       	push   0xc00258f0
c0013eb5:	e8 45 8e ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0013eba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ebd:	e8 42 ff ff ff       	call   c0013e04 <CPU::setupUMIP()>
c0013ec2:	83 c4 10             	add    esp,0x10
c0013ec5:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0013ecc:	74 18                	je     c0013ee6 <CPU::setupFeatures()+0x4a>
c0013ece:	83 ec 0c             	sub    esp,0xc
c0013ed1:	68 fa 58 02 c0       	push   0xc00258fa
c0013ed6:	e8 24 8e ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0013edb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ede:	e8 2b ff ff ff       	call   c0013e0e <CPU::setupTSC()>
c0013ee3:	83 c4 10             	add    esp,0x10
c0013ee6:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0013eed:	74 18                	je     c0013f07 <CPU::setupFeatures()+0x6b>
c0013eef:	83 ec 0c             	sub    esp,0xc
c0013ef2:	68 03 59 02 c0       	push   0xc0025903
c0013ef7:	e8 03 8e ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0013efc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013eff:	e8 14 ff ff ff       	call   c0013e18 <CPU::setupLargePages()>
c0013f04:	83 c4 10             	add    esp,0x10
c0013f07:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0013f0e:	74 18                	je     c0013f28 <CPU::setupFeatures()+0x8c>
c0013f10:	83 ec 0c             	sub    esp,0xc
c0013f13:	68 0c 59 02 c0       	push   0xc002590c
c0013f18:	e8 e2 8d ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0013f1d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f20:	e8 3b ff ff ff       	call   c0013e60 <CPU::setupGlobalPages()>
c0013f25:	83 c4 10             	add    esp,0x10
c0013f28:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0013f2f:	74 18                	je     c0013f49 <CPU::setupFeatures()+0xad>
c0013f31:	83 ec 0c             	sub    esp,0xc
c0013f34:	68 1e 59 02 c0       	push   0xc002591e
c0013f39:	e8 c1 8d ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0013f3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f41:	e8 dc fe ff ff       	call   c0013e22 <CPU::setupPAT()>
c0013f46:	83 c4 10             	add    esp,0x10
c0013f49:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0013f50:	74 11                	je     c0013f63 <CPU::setupFeatures()+0xc7>
c0013f52:	c7 44 24 10 27 59 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025927
c0013f5a:	83 c4 08             	add    esp,0x8
c0013f5d:	5b                   	pop    ebx
c0013f5e:	e9 9c 8d ff ff       	jmp    c000ccff <Dbg::kprintf(char const*, ...)>
c0013f63:	83 c4 08             	add    esp,0x8
c0013f66:	5b                   	pop    ebx
c0013f67:	c3                   	ret    

c0013f68 <CPU::open(int, int, void*)>:
c0013f68:	57                   	push   edi
c0013f69:	56                   	push   esi
c0013f6a:	53                   	push   ebx
c0013f6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f6f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013f73:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0013f79:	83 ec 0c             	sub    esp,0xc
c0013f7c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0013f82:	68 31 59 02 c0       	push   0xc0025931
c0013f87:	e8 dd 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013f8c:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0013f92:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f95:	e8 6c 53 ff ff       	call   c0009306 <GDT::setup()>
c0013f9a:	c7 04 24 43 59 02 c0 	mov    DWORD PTR [esp],0xc0025943
c0013fa1:	e8 c3 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013fa6:	83 c4 0c             	add    esp,0xc
c0013fa9:	6a 00                	push   0x0
c0013fab:	68 ef be ad de       	push   0xdeadbeef
c0013fb0:	57                   	push   edi
c0013fb1:	e8 aa 73 ff ff       	call   c000b360 <TSS::setup(unsigned long, unsigned long)>
c0013fb6:	c7 04 24 55 59 02 c0 	mov    DWORD PTR [esp],0xc0025955
c0013fbd:	e8 a7 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013fc2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013fc5:	e8 76 73 ff ff       	call   c000b340 <TSS::flush()>
c0013fca:	c7 04 24 69 59 02 c0 	mov    DWORD PTR [esp],0xc0025969
c0013fd1:	e8 93 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013fd6:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0013fdc:	89 04 24             	mov    DWORD PTR [esp],eax
c0013fdf:	e8 8e 55 ff ff       	call   c0009572 <IDT::setup()>
c0013fe4:	c7 04 24 7b 59 02 c0 	mov    DWORD PTR [esp],0xc002597b
c0013feb:	e8 79 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013ff0:	b8 00 04 00 00       	mov    eax,0x400
c0013ff5:	0f 23 f8             	mov    db7,eax
c0013ff8:	c7 04 24 99 59 02 c0 	mov    DWORD PTR [esp],0xc0025999
c0013fff:	e8 65 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0014004:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001400e:	e8 b3 60 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c0014013:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0014019:	89 30                	mov    DWORD PTR [eax],esi
c001401b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0014021:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0014024:	c7 04 24 bb 59 02 c0 	mov    DWORD PTR [esp],0xc00259bb
c001402b:	e8 39 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0014030:	58                   	pop    eax
c0014031:	5a                   	pop    edx
c0014032:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0014038:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001403c:	e8 19 83 ff ff       	call   c000c35a <VAS::setCPUSpecific(unsigned long)>
c0014041:	c7 04 24 e3 59 02 c0 	mov    DWORD PTR [esp],0xc00259e3
c0014048:	e8 1c 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001404d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014050:	e8 b1 f3 ff ff       	call   c0013406 <CPU::detectFeatures()>
c0014055:	c7 04 24 06 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a06
c001405c:	e8 08 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0014061:	e8 dc b5 ff ff       	call   c000f642 <setupInterruptController()>
c0014066:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001406c:	c7 04 24 2a 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a2a
c0014073:	e8 f1 59 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0014078:	a1 60 80 02 c0       	mov    eax,ds:0xc0028060
c001407d:	83 e0 10             	and    eax,0x10
c0014080:	83 f8 01             	cmp    eax,0x1
c0014083:	19 c0                	sbb    eax,eax
c0014085:	83 e0 46             	and    eax,0x46
c0014088:	83 c0 1e             	add    eax,0x1e
c001408b:	89 04 24             	mov    DWORD PTR [esp],eax
c001408e:	e8 d1 cb ff ff       	call   c0010c64 <setupTimer(int)>
c0014093:	83 c4 10             	add    esp,0x10
c0014096:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001409c:	f6 05 60 80 02 c0 20 	test   BYTE PTR ds:0xc0028060,0x20
c00140a3:	74 18                	je     c00140bd <CPU::open(int, int, void*)+0x155>
c00140a5:	83 ec 0c             	sub    esp,0xc
c00140a8:	68 45 5a 02 c0       	push   0xc0025a45
c00140ad:	e8 b7 59 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00140b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00140b5:	e8 e2 fd ff ff       	call   c0013e9c <CPU::setupFeatures()>
c00140ba:	83 c4 10             	add    esp,0x10
c00140bd:	83 ec 0c             	sub    esp,0xc
c00140c0:	68 60 5a 02 c0       	push   0xc0025a60
c00140c5:	e8 9f 59 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00140ca:	83 c4 10             	add    esp,0x10
c00140cd:	31 c0                	xor    eax,eax
c00140cf:	5b                   	pop    ebx
c00140d0:	5e                   	pop    esi
c00140d1:	5f                   	pop    edi
c00140d2:	c3                   	ret    
c00140d3:	90                   	nop

c00140d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00140d4:	57                   	push   edi
c00140d5:	56                   	push   esi
c00140d6:	53                   	push   ebx
c00140d7:	51                   	push   ecx
c00140d8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00140dc:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00140df:	0f 02 c0             	lar    eax,ax
c00140e2:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00140e5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00140e9:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00140ec:	88 ca                	mov    dl,cl
c00140ee:	c0 ea 06             	shr    dl,0x6
c00140f1:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00140f5:	89 ca                	mov    edx,ecx
c00140f7:	66 c1 ea 03          	shr    dx,0x3
c00140fb:	83 e2 07             	and    edx,0x7
c00140fe:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0014103:	88 17                	mov    BYTE PTR [edi],dl
c0014105:	0f 84 a6 01 00 00    	je     c00142b1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001410b:	83 e1 07             	and    ecx,0x7
c001410e:	80 f9 04             	cmp    cl,0x4
c0014111:	0f 84 98 00 00 00    	je     c00141af <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0014117:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001411c:	0f 95 c0             	setne  al
c001411f:	80 f9 05             	cmp    cl,0x5
c0014122:	0f 95 c2             	setne  dl
c0014125:	08 c2                	or     dl,al
c0014127:	74 79                	je     c00141a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0014129:	84 c9                	test   cl,cl
c001412b:	75 05                	jne    c0014132 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001412d:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0014130:	eb 3c                	jmp    c001416e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014132:	80 f9 01             	cmp    cl,0x1
c0014135:	75 05                	jne    c001413c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0014137:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001413a:	eb 32                	jmp    c001416e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001413c:	80 f9 02             	cmp    cl,0x2
c001413f:	75 05                	jne    c0014146 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0014141:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0014144:	eb 28                	jmp    c001416e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014146:	31 c0                	xor    eax,eax
c0014148:	80 f9 03             	cmp    cl,0x3
c001414b:	75 05                	jne    c0014152 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001414d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0014150:	eb 1c                	jmp    c001416e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014152:	80 f9 05             	cmp    cl,0x5
c0014155:	75 05                	jne    c001415c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0014157:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001415a:	eb 12                	jmp    c001416e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001415c:	80 f9 06             	cmp    cl,0x6
c001415f:	75 05                	jne    c0014166 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0014161:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014164:	eb 08                	jmp    c001416e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014166:	80 f9 07             	cmp    cl,0x7
c0014169:	75 03                	jne    c001416e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001416b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001416e:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0014173:	75 10                	jne    c0014185 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0014175:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0014179:	b9 03 00 00 00       	mov    ecx,0x3
c001417e:	01 d0                	add    eax,edx
c0014180:	e9 37 01 00 00       	jmp    c00142bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014185:	b9 02 00 00 00       	mov    ecx,0x2
c001418a:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001418f:	0f 85 27 01 00 00    	jne    c00142bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014195:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0014198:	b9 06 00 00 00       	mov    ecx,0x6
c001419d:	e9 1a 01 00 00       	jmp    c00142bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00141a2:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00141a5:	b9 06 00 00 00       	mov    ecx,0x6
c00141aa:	e9 0f 01 00 00       	jmp    c00142be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00141af:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00141b2:	88 ca                	mov    dl,cl
c00141b4:	c0 ea 06             	shr    dl,0x6
c00141b7:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00141bb:	89 ca                	mov    edx,ecx
c00141bd:	66 c1 ea 03          	shr    dx,0x3
c00141c1:	83 e2 07             	and    edx,0x7
c00141c4:	80 e1 07             	and    cl,0x7
c00141c7:	75 05                	jne    c00141ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00141c9:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00141cc:	eb 4c                	jmp    c001421a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00141ce:	80 f9 01             	cmp    cl,0x1
c00141d1:	75 05                	jne    c00141d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00141d3:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00141d6:	eb 42                	jmp    c001421a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00141d8:	80 f9 02             	cmp    cl,0x2
c00141db:	75 05                	jne    c00141e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00141dd:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00141e0:	eb 38                	jmp    c001421a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00141e2:	80 f9 03             	cmp    cl,0x3
c00141e5:	75 05                	jne    c00141ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00141e7:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00141ea:	eb 2e                	jmp    c001421a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00141ec:	80 f9 04             	cmp    cl,0x4
c00141ef:	75 12                	jne    c0014203 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00141f1:	f6 c4 60             	test   ah,0x60
c00141f4:	75 08                	jne    c00141fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00141f6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00141f9:	8d 78 14             	lea    edi,[eax+0x14]
c00141fc:	eb 1c                	jmp    c001421a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00141fe:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0014201:	eb 17                	jmp    c001421a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014203:	80 f9 05             	cmp    cl,0x5
c0014206:	75 05                	jne    c001420d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0014208:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001420b:	eb 0d                	jmp    c001421a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001420d:	80 f9 06             	cmp    cl,0x6
c0014210:	75 05                	jne    c0014217 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0014212:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0014215:	eb 03                	jmp    c001421a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014217:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001421a:	84 d2                	test   dl,dl
c001421c:	75 05                	jne    c0014223 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001421e:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0014221:	eb 3c                	jmp    c001425f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014223:	80 fa 01             	cmp    dl,0x1
c0014226:	75 05                	jne    c001422d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0014228:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001422b:	eb 32                	jmp    c001425f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001422d:	80 fa 02             	cmp    dl,0x2
c0014230:	75 05                	jne    c0014237 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0014232:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0014235:	eb 28                	jmp    c001425f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014237:	80 fa 03             	cmp    dl,0x3
c001423a:	75 05                	jne    c0014241 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001423c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001423f:	eb 1e                	jmp    c001425f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014241:	31 c0                	xor    eax,eax
c0014243:	80 fa 04             	cmp    dl,0x4
c0014246:	74 17                	je     c001425f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014248:	80 fa 05             	cmp    dl,0x5
c001424b:	75 05                	jne    c0014252 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001424d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0014250:	eb 0d                	jmp    c001425f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014252:	80 fa 06             	cmp    dl,0x6
c0014255:	75 05                	jne    c001425c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0014257:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001425a:	eb 03                	jmp    c001425f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001425c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001425f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014264:	0f 94 c2             	sete   dl
c0014267:	80 f9 05             	cmp    cl,0x5
c001426a:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001426e:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0014273:	d3 e0                	shl    eax,cl
c0014275:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0014279:	74 0a                	je     c0014285 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001427b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001427e:	b9 07 00 00 00       	mov    ecx,0x7
c0014283:	eb 37                	jmp    c00142bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014285:	01 f8                	add    eax,edi
c0014287:	b9 03 00 00 00       	mov    ecx,0x3
c001428c:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014291:	74 2b                	je     c00142be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014293:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0014298:	75 0d                	jne    c00142a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001429a:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001429e:	01 c8                	add    eax,ecx
c00142a0:	b9 04 00 00 00       	mov    ecx,0x4
c00142a5:	eb 17                	jmp    c00142be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00142a7:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00142aa:	b9 07 00 00 00       	mov    ecx,0x7
c00142af:	eb 0d                	jmp    c00142be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00142b1:	b9 02 00 00 00       	mov    ecx,0x2
c00142b6:	b2 01                	mov    dl,0x1
c00142b8:	31 c0                	xor    eax,eax
c00142ba:	eb 02                	jmp    c00142be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00142bc:	31 d2                	xor    edx,edx
c00142be:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142c2:	89 0b                	mov    DWORD PTR [ebx],ecx
c00142c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00142c8:	88 11                	mov    BYTE PTR [ecx],dl
c00142ca:	5a                   	pop    edx
c00142cb:	5b                   	pop    ebx
c00142cc:	5e                   	pop    esi
c00142cd:	5f                   	pop    edi
c00142ce:	c3                   	ret    

c00142cf <Krnl::smpEntry()>:
c00142cf:	eb fe                	jmp    c00142cf <Krnl::smpEntry()>

c00142d1 <Krnl::startCPU(int)>:
c00142d1:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c00142d6:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00142dd:	0f 84 36 01 00 00    	je     c0014419 <Krnl::startCPU(int)+0x148>
c00142e3:	53                   	push   ebx
c00142e4:	83 ec 10             	sub    esp,0x10
c00142e7:	fa                   	cli    
c00142e8:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c00142ee:	6a 1b                	push   0x1b
c00142f0:	ff 35 48 80 02 c0    	push   DWORD PTR ds:0xc0028048
c00142f6:	e8 2f 4c ff ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c00142fb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014300:	89 c3                	mov    ebx,eax
c0014302:	58                   	pop    eax
c0014303:	5a                   	pop    edx
c0014304:	53                   	push   ebx
c0014305:	68 a8 5a 02 c0       	push   0xc0025aa8
c001430a:	e8 f0 89 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001430f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014319:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001431d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014327:	c1 e0 18             	shl    eax,0x18
c001432a:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0014330:	83 c4 10             	add    esp,0x10
c0014333:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0014339:	09 c2                	or     edx,eax
c001433b:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0014341:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0014347:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001434d:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0014353:	80 cd c5             	or     ch,0xc5
c0014356:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001435c:	f3 90                	pause  
c001435e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014360:	0f ba e1 0c          	bt     ecx,0xc
c0014364:	72 f6                	jb     c001435c <Krnl::startCPU(int)+0x8b>
c0014366:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001436c:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014372:	09 c1                	or     ecx,eax
c0014374:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001437a:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014380:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0014386:	80 cd 85             	or     ch,0x85
c0014389:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001438f:	f3 90                	pause  
c0014391:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014393:	0f ba e1 0c          	bt     ecx,0xc
c0014397:	72 f6                	jb     c001438f <Krnl::startCPU(int)+0xbe>
c0014399:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00143a3:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00143a9:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00143af:	09 c1                	or     ecx,eax
c00143b1:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00143b7:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00143bd:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c00143c3:	81 c9 02 06 00 00    	or     ecx,0x602
c00143c9:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00143cf:	f3 90                	pause  
c00143d1:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00143d3:	0f ba e1 0c          	bt     ecx,0xc
c00143d7:	72 f6                	jb     c00143cf <Krnl::startCPU(int)+0xfe>
c00143d9:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00143e3:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00143e9:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00143ef:	09 c8                	or     eax,ecx
c00143f1:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c00143f7:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c00143fd:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0014402:	0d 02 06 00 00       	or     eax,0x602
c0014407:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001440d:	f3 90                	pause  
c001440f:	8b 02                	mov    eax,DWORD PTR [edx]
c0014411:	0f ba e0 0c          	bt     eax,0xc
c0014415:	72 f6                	jb     c001440d <Krnl::startCPU(int)+0x13c>
c0014417:	eb fe                	jmp    c0014417 <Krnl::startCPU(int)+0x146>
c0014419:	c3                   	ret    

c001441a <Krnl::startCPUs()>:
c001441a:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c001441f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014425:	88 c2                	mov    dl,al
c0014427:	83 e2 0a             	and    edx,0xa
c001442a:	80 fa 0a             	cmp    dl,0xa
c001442d:	75 09                	jne    c0014438 <Krnl::startCPUs()+0x1e>
c001442f:	a8 01                	test   al,0x1
c0014431:	74 05                	je     c0014438 <Krnl::startCPUs()+0x1e>
c0014433:	e9 63 bd fe ff       	jmp    c000019b <prepareTramp>
c0014438:	c3                   	ret    
c0014439:	90                   	nop

c001443a <EnvVarContainer::getEnv(char const*)>:
c001443a:	57                   	push   edi
c001443b:	56                   	push   esi
c001443c:	53                   	push   ebx
c001443d:	31 db                	xor    ebx,ebx
c001443f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014443:	39 1e                	cmp    DWORD PTR [esi],ebx
c0014445:	7e 2b                	jle    c0014472 <EnvVarContainer::getEnv(char const*)+0x38>
c0014447:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001444e:	50                   	push   eax
c001444f:	50                   	push   eax
c0014450:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014453:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0014456:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001445a:	e8 6d c3 fe ff       	call   c00007cc <strcmp>
c001445f:	83 c4 10             	add    esp,0x10
c0014462:	85 c0                	test   eax,eax
c0014464:	75 09                	jne    c001446f <EnvVarContainer::getEnv(char const*)+0x35>
c0014466:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014469:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001446d:	eb 05                	jmp    c0014474 <EnvVarContainer::getEnv(char const*)+0x3a>
c001446f:	43                   	inc    ebx
c0014470:	eb d1                	jmp    c0014443 <EnvVarContainer::getEnv(char const*)+0x9>
c0014472:	31 c0                	xor    eax,eax
c0014474:	5b                   	pop    ebx
c0014475:	5e                   	pop    esi
c0014476:	5f                   	pop    edi
c0014477:	c3                   	ret    

c0014478 <EnvVarContainer::setEnv(char const*, char const*)>:
c0014478:	55                   	push   ebp
c0014479:	57                   	push   edi
c001447a:	56                   	push   esi
c001447b:	53                   	push   ebx
c001447c:	83 ec 28             	sub    esp,0x28
c001447f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0014483:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0014487:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001448b:	56                   	push   esi
c001448c:	e8 0f c2 fe ff       	call   c00006a0 <strlen>
c0014491:	40                   	inc    eax
c0014492:	89 04 24             	mov    DWORD PTR [esp],eax
c0014495:	e8 75 55 ff ff       	call   c0009a0f <malloc>
c001449a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001449d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00144a1:	e8 fa c1 fe ff       	call   c00006a0 <strlen>
c00144a6:	40                   	inc    eax
c00144a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00144aa:	e8 60 55 ff ff       	call   c0009a0f <malloc>
c00144af:	89 34 24             	mov    DWORD PTR [esp],esi
c00144b2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00144b6:	e8 e5 c1 fe ff       	call   c00006a0 <strlen>
c00144bb:	83 c4 0c             	add    esp,0xc
c00144be:	40                   	inc    eax
c00144bf:	50                   	push   eax
c00144c0:	6a 00                	push   0x0
c00144c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00144c6:	e8 b9 c1 fe ff       	call   c0000684 <memset>
c00144cb:	89 34 24             	mov    DWORD PTR [esp],esi
c00144ce:	e8 cd c1 fe ff       	call   c00006a0 <strlen>
c00144d3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00144d7:	8d 48 01             	lea    ecx,[eax+0x1]
c00144da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00144dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144df:	89 de                	mov    esi,ebx
c00144e1:	e8 ba c1 fe ff       	call   c00006a0 <strlen>
c00144e6:	83 c4 0c             	add    esp,0xc
c00144e9:	40                   	inc    eax
c00144ea:	50                   	push   eax
c00144eb:	6a 00                	push   0x0
c00144ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144f1:	e8 8e c1 fe ff       	call   c0000684 <memset>
c00144f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144f9:	e8 a2 c1 fe ff       	call   c00006a0 <strlen>
c00144fe:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014502:	8d 48 01             	lea    ecx,[eax+0x1]
c0014505:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014507:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001450a:	40                   	inc    eax
c001450b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001450e:	c1 e0 03             	shl    eax,0x3
c0014511:	5a                   	pop    edx
c0014512:	59                   	pop    ecx
c0014513:	50                   	push   eax
c0014514:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014517:	e8 df 54 ff ff       	call   c00099fb <realloc>
c001451c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014520:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014523:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014526:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001452a:	b9 08 00 00 00       	mov    ecx,0x8
c001452f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014531:	83 c4 2c             	add    esp,0x2c
c0014534:	5b                   	pop    ebx
c0014535:	5e                   	pop    esi
c0014536:	5f                   	pop    edi
c0014537:	5d                   	pop    ebp
c0014538:	c3                   	ret    
c0014539:	90                   	nop

c001453a <EnvVarContainer::deleteEnv(char const*)>:
c001453a:	c3                   	ret    
c001453b:	90                   	nop

c001453c <EnvVarContainer::loadFrom(char const*, char const*)>:
c001453c:	55                   	push   ebp
c001453d:	57                   	push   edi
c001453e:	56                   	push   esi
c001453f:	53                   	push   ebx
c0014540:	81 ec 38 01 00 00    	sub    esp,0x138
c0014546:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001454d:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0014554:	68 14 01 00 00       	push   0x114
c0014559:	e8 b1 54 ff ff       	call   c0009a0f <malloc>
c001455e:	83 c4 0c             	add    esp,0xc
c0014561:	89 c3                	mov    ebx,eax
c0014563:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014566:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001456d:	50                   	push   eax
c001456e:	e8 f7 8c ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0014573:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014576:	e8 1f 90 ff ff       	call   c000d59a <File::exists()>
c001457b:	83 c4 10             	add    esp,0x10
c001457e:	84 c0                	test   al,al
c0014580:	75 31                	jne    c00145b3 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0014582:	50                   	push   eax
c0014583:	50                   	push   eax
c0014584:	6a 12                	push   0x12
c0014586:	53                   	push   ebx
c0014587:	e8 a0 8d ff ff       	call   c000d32c <File::open(FileOpenMode)>
c001458c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001458e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0014591:	89 34 24             	mov    DWORD PTR [esp],esi
c0014594:	e8 07 c1 fe ff       	call   c00006a0 <strlen>
c0014599:	5a                   	pop    edx
c001459a:	31 d2                	xor    edx,edx
c001459c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00145a0:	51                   	push   ecx
c00145a1:	56                   	push   esi
c00145a2:	52                   	push   edx
c00145a3:	50                   	push   eax
c00145a4:	53                   	push   ebx
c00145a5:	ff d7                	call   edi
c00145a7:	83 c4 14             	add    esp,0x14
c00145aa:	53                   	push   ebx
c00145ab:	e8 da 8d ff ff       	call   c000d38a <File::close()>
c00145b0:	83 c4 10             	add    esp,0x10
c00145b3:	56                   	push   esi
c00145b4:	31 f6                	xor    esi,esi
c00145b6:	68 00 01 00 00       	push   0x100
c00145bb:	6a 00                	push   0x0
c00145bd:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00145c1:	50                   	push   eax
c00145c2:	e8 bd c0 fe ff       	call   c0000684 <memset>
c00145c7:	5f                   	pop    edi
c00145c8:	58                   	pop    eax
c00145c9:	6a 01                	push   0x1
c00145cb:	53                   	push   ebx
c00145cc:	e8 5b 8d ff ff       	call   c000d32c <File::open(FileOpenMode)>
c00145d1:	83 c4 10             	add    esp,0x10
c00145d4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00145dc:	83 ec 0c             	sub    esp,0xc
c00145df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145e1:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00145e5:	51                   	push   ecx
c00145e6:	8d 54 24 23          	lea    edx,[esp+0x23]
c00145ea:	52                   	push   edx
c00145eb:	6a 00                	push   0x0
c00145ed:	6a 01                	push   0x1
c00145ef:	53                   	push   ebx
c00145f0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00145f3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00145f7:	83 c4 20             	add    esp,0x20
c00145fa:	3c 0d                	cmp    al,0xd
c00145fc:	0f 84 09 01 00 00    	je     c001470b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014602:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014607:	0f 84 ef 00 00 00    	je     c00146fc <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c001460d:	3c 0a                	cmp    al,0xa
c001460f:	74 13                	je     c0014624 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014611:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014616:	74 0c                	je     c0014624 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014618:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001461e:	0f 8e d8 00 00 00    	jle    c00146fc <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014624:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014628:	83 ec 0c             	sub    esp,0xc
c001462b:	8d 78 01             	lea    edi,[eax+0x1]
c001462e:	57                   	push   edi
c001462f:	e8 db 53 ff ff       	call   c0009a0f <malloc>
c0014634:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0014638:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001463c:	8d 56 04             	lea    edx,[esi+0x4]
c001463f:	89 14 24             	mov    DWORD PTR [esp],edx
c0014642:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0014646:	e8 c4 53 ff ff       	call   c0009a0f <malloc>
c001464b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001464f:	83 c4 0c             	add    esp,0xc
c0014652:	57                   	push   edi
c0014653:	6a 00                	push   0x0
c0014655:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014659:	e8 26 c0 fe ff       	call   c0000684 <memset>
c001465e:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014662:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014666:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001466a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001466c:	83 c4 0c             	add    esp,0xc
c001466f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014673:	52                   	push   edx
c0014674:	6a 00                	push   0x0
c0014676:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001467a:	e8 05 c0 fe ff       	call   c0000684 <memset>
c001467f:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014683:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014687:	89 34 24             	mov    DWORD PTR [esp],esi
c001468a:	e8 11 c0 fe ff       	call   c00006a0 <strlen>
c001468f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0014693:	89 c1                	mov    ecx,eax
c0014695:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014697:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001469a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001469d:	40                   	inc    eax
c001469e:	83 c4 10             	add    esp,0x10
c00146a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00146a4:	85 d2                	test   edx,edx
c00146a6:	75 0c                	jne    c00146b4 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c00146a8:	83 ec 0c             	sub    esp,0xc
c00146ab:	6a 08                	push   0x8
c00146ad:	e8 5d 53 ff ff       	call   c0009a0f <malloc>
c00146b2:	eb 0c                	jmp    c00146c0 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c00146b4:	c1 e0 03             	shl    eax,0x3
c00146b7:	51                   	push   ecx
c00146b8:	51                   	push   ecx
c00146b9:	50                   	push   eax
c00146ba:	52                   	push   edx
c00146bb:	e8 3b 53 ff ff       	call   c00099fb <realloc>
c00146c0:	83 c4 10             	add    esp,0x10
c00146c3:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00146c6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00146c9:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00146cc:	8d 74 24 18          	lea    esi,[esp+0x18]
c00146d0:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00146d4:	b9 08 00 00 00       	mov    ecx,0x8
c00146d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00146db:	31 f6                	xor    esi,esi
c00146dd:	50                   	push   eax
c00146de:	68 00 01 00 00       	push   0x100
c00146e3:	6a 00                	push   0x0
c00146e5:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00146e9:	50                   	push   eax
c00146ea:	e8 95 bf fe ff       	call   c0000684 <memset>
c00146ef:	83 c4 10             	add    esp,0x10
c00146f2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00146fa:	eb 0f                	jmp    c001470b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00146fc:	3c 3d                	cmp    al,0x3d
c00146fe:	74 07                	je     c0014707 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0014700:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0014704:	46                   	inc    esi
c0014705:	eb 04                	jmp    c001470b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014707:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001470b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014710:	0f 85 c6 fe ff ff    	jne    c00145dc <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0014716:	81 c4 2c 01 00 00    	add    esp,0x12c
c001471c:	5b                   	pop    ebx
c001471d:	5e                   	pop    esi
c001471e:	5f                   	pop    edi
c001471f:	5d                   	pop    ebp
c0014720:	c3                   	ret    
c0014721:	90                   	nop

c0014722 <EnvVarContainer::__loadSystem()>:
c0014722:	83 ec 10             	sub    esp,0x10
c0014725:	68 20 7a 02 c0       	push   0xc0027a20
c001472a:	68 b9 5a 02 c0       	push   0xc0025ab9
c001472f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014733:	e8 04 fe ff ff       	call   c001453c <EnvVarContainer::loadFrom(char const*, char const*)>
c0014738:	83 c4 1c             	add    esp,0x1c
c001473b:	c3                   	ret    

c001473c <EnvVarContainer::__loadUser()>:
c001473c:	c3                   	ret    
c001473d:	90                   	nop

c001473e <EnvVarContainer::EnvVarContainer(Process*)>:
c001473e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014742:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001474c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014750:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0014753:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014757:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001475e:	90                   	nop
c001475f:	c3                   	ret    

c0014760 <EnvVarContainer::~EnvVarContainer()>:
c0014760:	83 ec 0c             	sub    esp,0xc
c0014763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014767:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001476a:	85 c0                	test   eax,eax
c001476c:	74 1d                	je     c001478b <EnvVarContainer::~EnvVarContainer()+0x2b>
c001476e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014772:	8b 00                	mov    eax,DWORD PTR [eax]
c0014774:	85 c0                	test   eax,eax
c0014776:	74 13                	je     c001478b <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001477c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001477f:	83 ec 0c             	sub    esp,0xc
c0014782:	50                   	push   eax
c0014783:	e8 97 52 ff ff       	call   c0009a1f <free>
c0014788:	83 c4 10             	add    esp,0x10
c001478b:	90                   	nop
c001478c:	83 c4 0c             	add    esp,0xc
c001478f:	c3                   	ret    

c0014790 <Krnl::getEnv(Process*, char const*)>:
c0014790:	53                   	push   ebx
c0014791:	83 ec 08             	sub    esp,0x8
c0014794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014798:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001479c:	39 05 90 95 02 c0    	cmp    DWORD PTR ds:0xc0029590,eax
c00147a2:	74 04                	je     c00147a8 <Krnl::getEnv(Process*, char const*)+0x18>
c00147a4:	85 c0                	test   eax,eax
c00147a6:	75 0b                	jne    c00147b3 <Krnl::getEnv(Process*, char const*)+0x23>
c00147a8:	a1 14 8b 02 c0       	mov    eax,ds:0xc0028b14
c00147ad:	85 c0                	test   eax,eax
c00147af:	75 19                	jne    c00147ca <Krnl::getEnv(Process*, char const*)+0x3a>
c00147b1:	eb 27                	jmp    c00147da <Krnl::getEnv(Process*, char const*)+0x4a>
c00147b3:	52                   	push   edx
c00147b4:	52                   	push   edx
c00147b5:	53                   	push   ebx
c00147b6:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00147bc:	e8 79 fc ff ff       	call   c001443a <EnvVarContainer::getEnv(char const*)>
c00147c1:	83 c4 10             	add    esp,0x10
c00147c4:	85 c0                	test   eax,eax
c00147c6:	75 28                	jne    c00147f0 <Krnl::getEnv(Process*, char const*)+0x60>
c00147c8:	eb de                	jmp    c00147a8 <Krnl::getEnv(Process*, char const*)+0x18>
c00147ca:	52                   	push   edx
c00147cb:	52                   	push   edx
c00147cc:	53                   	push   ebx
c00147cd:	50                   	push   eax
c00147ce:	e8 67 fc ff ff       	call   c001443a <EnvVarContainer::getEnv(char const*)>
c00147d3:	83 c4 10             	add    esp,0x10
c00147d6:	85 c0                	test   eax,eax
c00147d8:	75 16                	jne    c00147f0 <Krnl::getEnv(Process*, char const*)+0x60>
c00147da:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00147de:	a1 18 8b 02 c0       	mov    eax,ds:0xc0028b18
c00147e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00147e7:	83 c4 08             	add    esp,0x8
c00147ea:	5b                   	pop    ebx
c00147eb:	e9 4a fc ff ff       	jmp    c001443a <EnvVarContainer::getEnv(char const*)>
c00147f0:	83 c4 08             	add    esp,0x8
c00147f3:	5b                   	pop    ebx
c00147f4:	c3                   	ret    

c00147f5 <Krnl::setEnvSystem(char const*, char const*)>:
c00147f5:	83 ec 10             	sub    esp,0x10
c00147f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00147fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014800:	ff 35 18 8b 02 c0    	push   DWORD PTR ds:0xc0028b18
c0014806:	e8 6d fc ff ff       	call   c0014478 <EnvVarContainer::setEnv(char const*, char const*)>
c001480b:	83 c4 1c             	add    esp,0x1c
c001480e:	c3                   	ret    

c001480f <Krnl::setEnvUser(char const*, char const*)>:
c001480f:	a1 14 8b 02 c0       	mov    eax,ds:0xc0028b14
c0014814:	85 c0                	test   eax,eax
c0014816:	74 15                	je     c001482d <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0014818:	83 ec 10             	sub    esp,0x10
c001481b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001481f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014823:	50                   	push   eax
c0014824:	e8 4f fc ff ff       	call   c0014478 <EnvVarContainer::setEnv(char const*, char const*)>
c0014829:	83 c4 1c             	add    esp,0x1c
c001482c:	c3                   	ret    
c001482d:	c3                   	ret    

c001482e <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001482e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014832:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0014838:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001483c:	e9 37 fc ff ff       	jmp    c0014478 <EnvVarContainer::setEnv(char const*, char const*)>

c0014841 <Krnl::deleteEnvSystem(char const*)>:
c0014841:	c3                   	ret    

c0014842 <Krnl::deleteEnvUser(char const*)>:
c0014842:	c3                   	ret    

c0014843 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0014843:	c3                   	ret    

c0014844 <Krnl::newProcessEnv(Process*)>:
c0014844:	83 ec 28             	sub    esp,0x28
c0014847:	6a 0c                	push   0xc
c0014849:	e8 c1 51 ff ff       	call   c0009a0f <malloc>
c001484e:	5a                   	pop    edx
c001484f:	59                   	pop    ecx
c0014850:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014854:	50                   	push   eax
c0014855:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014859:	e8 e0 fe ff ff       	call   c001473e <EnvVarContainer::EnvVarContainer(Process*)>
c001485e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014862:	83 c4 2c             	add    esp,0x2c
c0014865:	c3                   	ret    

c0014866 <Krnl::copyProcessEnv(Process*, Process*)>:
c0014866:	57                   	push   edi
c0014867:	56                   	push   esi
c0014868:	53                   	push   ebx
c0014869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001486d:	83 ec 0c             	sub    esp,0xc
c0014870:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0014876:	6a 0c                	push   0xc
c0014878:	e8 92 51 ff ff       	call   c0009a0f <malloc>
c001487d:	89 c3                	mov    ebx,eax
c001487f:	58                   	pop    eax
c0014880:	5a                   	pop    edx
c0014881:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014885:	53                   	push   ebx
c0014886:	e8 b3 fe ff ff       	call   c001473e <EnvVarContainer::EnvVarContainer(Process*)>
c001488b:	8b 07                	mov    eax,DWORD PTR [edi]
c001488d:	89 03                	mov    DWORD PTR [ebx],eax
c001488f:	c1 e0 03             	shl    eax,0x3
c0014892:	89 04 24             	mov    DWORD PTR [esp],eax
c0014895:	e8 75 51 ff ff       	call   c0009a0f <malloc>
c001489a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001489d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001489f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00148a2:	c1 e1 03             	shl    ecx,0x3
c00148a5:	89 c7                	mov    edi,eax
c00148a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00148a9:	83 c4 10             	add    esp,0x10
c00148ac:	89 d8                	mov    eax,ebx
c00148ae:	5b                   	pop    ebx
c00148af:	5e                   	pop    esi
c00148b0:	5f                   	pop    edi
c00148b1:	c3                   	ret    

c00148b2 <Krnl::loadSystemEnv()>:
c00148b2:	53                   	push   ebx
c00148b3:	83 ec 14             	sub    esp,0x14
c00148b6:	6a 0c                	push   0xc
c00148b8:	e8 52 51 ff ff       	call   c0009a0f <malloc>
c00148bd:	89 c3                	mov    ebx,eax
c00148bf:	58                   	pop    eax
c00148c0:	5a                   	pop    edx
c00148c1:	ff 35 90 95 02 c0    	push   DWORD PTR ds:0xc0029590
c00148c7:	53                   	push   ebx
c00148c8:	e8 71 fe ff ff       	call   c001473e <EnvVarContainer::EnvVarContainer(Process*)>
c00148cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148d0:	89 1d 18 8b 02 c0    	mov    DWORD PTR ds:0xc0028b18,ebx
c00148d6:	e8 47 fe ff ff       	call   c0014722 <EnvVarContainer::__loadSystem()>
c00148db:	83 c4 18             	add    esp,0x18
c00148de:	5b                   	pop    ebx
c00148df:	c3                   	ret    

c00148e0 <Krnl::loadUserEnv()>:
c00148e0:	53                   	push   ebx
c00148e1:	83 ec 14             	sub    esp,0x14
c00148e4:	6a 0c                	push   0xc
c00148e6:	e8 24 51 ff ff       	call   c0009a0f <malloc>
c00148eb:	89 c3                	mov    ebx,eax
c00148ed:	58                   	pop    eax
c00148ee:	5a                   	pop    edx
c00148ef:	ff 35 90 95 02 c0    	push   DWORD PTR ds:0xc0029590
c00148f5:	53                   	push   ebx
c00148f6:	e8 43 fe ff ff       	call   c001473e <EnvVarContainer::EnvVarContainer(Process*)>
c00148fb:	89 1d 14 8b 02 c0    	mov    DWORD PTR ds:0xc0028b14,ebx
c0014901:	83 c4 18             	add    esp,0x18
c0014904:	5b                   	pop    ebx
c0014905:	c3                   	ret    

c0014906 <Krnl::flushEnv()>:
c0014906:	c3                   	ret    

c0014907 <Krnl::getProcessTotalEnvCount(Process*)>:
c0014907:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001490b:	8b 15 14 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028b14
c0014911:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014917:	a1 18 8b 02 c0       	mov    eax,ds:0xc0028b18
c001491c:	8b 00                	mov    eax,DWORD PTR [eax]
c001491e:	03 01                	add    eax,DWORD PTR [ecx]
c0014920:	85 d2                	test   edx,edx
c0014922:	74 02                	je     c0014926 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0014924:	03 02                	add    eax,DWORD PTR [edx]
c0014926:	c3                   	ret    

c0014927 <Krnl::getProcessEnvPair(Process*, int)>:
c0014927:	57                   	push   edi
c0014928:	56                   	push   esi
c0014929:	8b 35 14 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028b14
c001492f:	53                   	push   ebx
c0014930:	85 f6                	test   esi,esi
c0014932:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014936:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001493a:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014940:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014944:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014946:	75 16                	jne    c001495e <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0014948:	39 c2                	cmp    edx,eax
c001494a:	7c 16                	jl     c0014962 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001494c:	8b 0d 18 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028b18
c0014952:	8b 31                	mov    esi,DWORD PTR [ecx]
c0014954:	01 c6                	add    esi,eax
c0014956:	39 d6                	cmp    esi,edx
c0014958:	7e 3c                	jle    c0014996 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001495a:	29 c2                	sub    edx,eax
c001495c:	eb 04                	jmp    c0014962 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001495e:	39 c2                	cmp    edx,eax
c0014960:	7d 05                	jge    c0014967 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0014962:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0014965:	eb 20                	jmp    c0014987 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0014967:	8b 3e                	mov    edi,DWORD PTR [esi]
c0014969:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001496c:	39 d1                	cmp    ecx,edx
c001496e:	7e 04                	jle    c0014974 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0014970:	29 c2                	sub    edx,eax
c0014972:	eb 10                	jmp    c0014984 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0014974:	8b 35 18 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028b18
c001497a:	03 0e                	add    ecx,DWORD PTR [esi]
c001497c:	39 d1                	cmp    ecx,edx
c001497e:	7e 16                	jle    c0014996 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014980:	29 c2                	sub    edx,eax
c0014982:	29 fa                	sub    edx,edi
c0014984:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014987:	8d 14 d0             	lea    edx,[eax+edx*8]
c001498a:	8b 02                	mov    eax,DWORD PTR [edx]
c001498c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001498f:	89 03                	mov    DWORD PTR [ebx],eax
c0014991:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0014994:	eb 1d                	jmp    c00149b3 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0014996:	83 ec 0c             	sub    esp,0xc
c0014999:	68 db 5a 02 c0       	push   0xc0025adb
c001499e:	e8 18 00 00 00       	call   c00149bb <Krnl::panic(char const*)>
c00149a3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00149a9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00149b0:	83 c4 10             	add    esp,0x10
c00149b3:	89 d8                	mov    eax,ebx
c00149b5:	5b                   	pop    ebx
c00149b6:	5e                   	pop    esi
c00149b7:	5f                   	pop    edi
c00149b8:	c2 04 00             	ret    0x4

c00149bb <Krnl::panic(char const*)>:
c00149bb:	55                   	push   ebp
c00149bc:	89 e5                	mov    ebp,esp
c00149be:	53                   	push   ebx
c00149bf:	83 ec 10             	sub    esp,0x10
c00149c2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00149c5:	fa                   	cli    
c00149c6:	c6 05 24 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b24,0x1
c00149cd:	53                   	push   ebx
c00149ce:	e8 96 50 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00149d3:	58                   	pop    eax
c00149d4:	c6 05 20 74 02 c0 00 	mov    BYTE PTR ds:0xc0027420,0x0
c00149db:	5a                   	pop    edx
c00149dc:	53                   	push   ebx
c00149dd:	68 f5 5a 02 c0       	push   0xc0025af5
c00149e2:	e8 18 83 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00149e7:	59                   	pop    ecx
c00149e8:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c00149ed:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00149f3:	e8 11 61 ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c00149f8:	83 c4 0c             	add    esp,0xc
c00149fb:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014a00:	6a 01                	push   0x1
c0014a02:	6a 0f                	push   0xf
c0014a04:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a0a:	e8 59 5f ff ff       	call   c000a968 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014a0f:	58                   	pop    eax
c0014a10:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014a15:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a1b:	e8 6a 64 ff ff       	call   c000ae8a <VgaText::clearScreen()>
c0014a20:	58                   	pop    eax
c0014a21:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014a26:	5a                   	pop    edx
c0014a27:	68 0e 5b 02 c0       	push   0xc0025b0e
c0014a2c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a32:	e8 df 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a37:	59                   	pop    ecx
c0014a38:	58                   	pop    eax
c0014a39:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014a3e:	68 b4 5b 02 c0       	push   0xc0025bb4
c0014a43:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a49:	e8 c8 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a4e:	58                   	pop    eax
c0014a4f:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014a54:	5a                   	pop    edx
c0014a55:	68 2a 5b 02 c0       	push   0xc0025b2a
c0014a5a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a60:	e8 b1 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a65:	59                   	pop    ecx
c0014a66:	58                   	pop    eax
c0014a67:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014a6c:	53                   	push   ebx
c0014a6d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a73:	e8 9e 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a78:	58                   	pop    eax
c0014a79:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014a7e:	5a                   	pop    edx
c0014a7f:	68 4a 5b 02 c0       	push   0xc0025b4a
c0014a84:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a8a:	e8 87 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a8f:	a1 20 8b 02 c0       	mov    eax,ds:0xc0028b20
c0014a94:	83 c4 10             	add    esp,0x10
c0014a97:	85 c0                	test   eax,eax
c0014a99:	74 02                	je     c0014a9d <Krnl::panic(char const*)+0xe2>
c0014a9b:	ff d0                	call   eax
c0014a9d:	83 ec 0c             	sub    esp,0xc
c0014aa0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014aa3:	e8 41 32 00 00       	call   c0017ce9 <Thr::getDriverNameFromAddress(unsigned long)>
c0014aa8:	83 c4 10             	add    esp,0x10
c0014aab:	89 c3                	mov    ebx,eax
c0014aad:	85 c0                	test   eax,eax
c0014aaf:	0f 84 4e 02 00 00    	je     c0014d03 <Krnl::panic(char const*)+0x348>
c0014ab5:	83 ec 08             	sub    esp,0x8
c0014ab8:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014abd:	68 f0 5b 02 c0       	push   0xc0025bf0
c0014ac2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014ac8:	e8 49 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014acd:	58                   	pop    eax
c0014ace:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014ad3:	5a                   	pop    edx
c0014ad4:	68 2a 5b 02 c0       	push   0xc0025b2a
c0014ad9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014adf:	e8 32 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014ae4:	59                   	pop    ecx
c0014ae5:	58                   	pop    eax
c0014ae6:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014aeb:	53                   	push   ebx
c0014aec:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014af2:	e8 1f 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014af7:	83 c4 10             	add    esp,0x10
c0014afa:	83 ec 08             	sub    esp,0x8
c0014afd:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014b02:	68 49 5b 02 c0       	push   0xc0025b49
c0014b07:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b0d:	e8 04 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b12:	58                   	pop    eax
c0014b13:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014b18:	5a                   	pop    edx
c0014b19:	68 48 5c 02 c0       	push   0xc0025c48
c0014b1e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b24:	e8 ed 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b29:	59                   	pop    ecx
c0014b2a:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014b2f:	5b                   	pop    ebx
c0014b30:	68 88 5c 02 c0       	push   0xc0025c88
c0014b35:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b3b:	e8 d6 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b40:	58                   	pop    eax
c0014b41:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014b46:	5a                   	pop    edx
c0014b47:	68 35 5b 02 c0       	push   0xc0025b35
c0014b4c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b52:	e8 bf 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b57:	59                   	pop    ecx
c0014b58:	5b                   	pop    ebx
c0014b59:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014b5c:	68 4d 5b 02 c0       	push   0xc0025b4d
c0014b61:	e8 99 81 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0014b66:	58                   	pop    eax
c0014b67:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014b6a:	5a                   	pop    edx
c0014b6b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014b6e:	68 56 5b 02 c0       	push   0xc0025b56
c0014b73:	e8 87 81 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0014b78:	59                   	pop    ecx
c0014b79:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014b7c:	5b                   	pop    ebx
c0014b7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b7f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014b82:	68 5f 5b 02 c0       	push   0xc0025b5f
c0014b87:	e8 73 81 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0014b8c:	58                   	pop    eax
c0014b8d:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014b92:	5a                   	pop    edx
c0014b93:	68 cc 5c 02 c0       	push   0xc0025ccc
c0014b98:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b9e:	e8 73 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014ba3:	59                   	pop    ecx
c0014ba4:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014ba9:	5b                   	pop    ebx
c0014baa:	68 68 5b 02 c0       	push   0xc0025b68
c0014baf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014bb5:	e8 5c 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014bba:	0f 20 c0             	mov    eax,cr0
c0014bbd:	5a                   	pop    edx
c0014bbe:	59                   	pop    ecx
c0014bbf:	50                   	push   eax
c0014bc0:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014bc5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014bcb:	e8 00 64 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014bd0:	5b                   	pop    ebx
c0014bd1:	58                   	pop    eax
c0014bd2:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014bd7:	68 72 5b 02 c0       	push   0xc0025b72
c0014bdc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014be2:	e8 2f 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014be7:	0f 20 d0             	mov    eax,cr2
c0014bea:	5a                   	pop    edx
c0014beb:	59                   	pop    ecx
c0014bec:	50                   	push   eax
c0014bed:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014bf2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014bf8:	e8 d3 63 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014bfd:	5b                   	pop    ebx
c0014bfe:	58                   	pop    eax
c0014bff:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014c04:	68 7c 5b 02 c0       	push   0xc0025b7c
c0014c09:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014c0f:	e8 02 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014c14:	0f 20 d8             	mov    eax,cr3
c0014c17:	5a                   	pop    edx
c0014c18:	59                   	pop    ecx
c0014c19:	50                   	push   eax
c0014c1a:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014c1f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014c25:	e8 a6 63 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014c2a:	5b                   	pop    ebx
c0014c2b:	58                   	pop    eax
c0014c2c:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014c31:	68 8f 5b 02 c0       	push   0xc0025b8f
c0014c36:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014c3c:	e8 d5 63 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014c41:	0f 20 e0             	mov    eax,cr4
c0014c44:	5a                   	pop    edx
c0014c45:	59                   	pop    ecx
c0014c46:	50                   	push   eax
c0014c47:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014c4c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014c52:	e8 79 63 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014c57:	5b                   	pop    ebx
c0014c58:	58                   	pop    eax
c0014c59:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014c5e:	68 99 5b 02 c0       	push   0xc0025b99
c0014c63:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014c69:	e8 a8 63 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014c6e:	5a                   	pop    edx
c0014c6f:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014c74:	59                   	pop    ecx
c0014c75:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c7b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014c7e:	50                   	push   eax
c0014c7f:	e8 4c 63 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014c84:	5b                   	pop    ebx
c0014c85:	58                   	pop    eax
c0014c86:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014c8b:	68 b0 5b 02 c0       	push   0xc0025bb0
c0014c90:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014c96:	e8 7b 63 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014c9b:	5a                   	pop    edx
c0014c9c:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014ca1:	59                   	pop    ecx
c0014ca2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ca8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014cab:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014cae:	50                   	push   eax
c0014caf:	e8 1c 63 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014cb4:	5b                   	pop    ebx
c0014cb5:	58                   	pop    eax
c0014cb6:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014cbb:	68 b0 5b 02 c0       	push   0xc0025bb0
c0014cc0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014cc6:	e8 4b 63 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014ccb:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014cd0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014cd3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cd9:	8b 12                	mov    edx,DWORD PTR [edx]
c0014cdb:	59                   	pop    ecx
c0014cdc:	5b                   	pop    ebx
c0014cdd:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014ce0:	50                   	push   eax
c0014ce1:	e8 ea 62 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014ce6:	83 c4 10             	add    esp,0x10
c0014ce9:	b2 fe                	mov    dl,0xfe
c0014ceb:	e4 60                	in     al,0x60
c0014ced:	3c 1c                	cmp    al,0x1c
c0014cef:	74 04                	je     c0014cf5 <Krnl::panic(char const*)+0x33a>
c0014cf1:	3c 5a                	cmp    al,0x5a
c0014cf3:	75 f6                	jne    c0014ceb <Krnl::panic(char const*)+0x330>
c0014cf5:	e4 64                	in     al,0x64
c0014cf7:	a8 02                	test   al,0x2
c0014cf9:	75 fa                	jne    c0014cf5 <Krnl::panic(char const*)+0x33a>
c0014cfb:	88 d0                	mov    al,dl
c0014cfd:	e6 64                	out    0x64,al
c0014cff:	fa                   	cli    
c0014d00:	f4                   	hlt    
c0014d01:	eb e8                	jmp    c0014ceb <Krnl::panic(char const*)+0x330>
c0014d03:	50                   	push   eax
c0014d04:	50                   	push   eax
c0014d05:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014d0a:	68 1c 5c 02 c0       	push   0xc0025c1c
c0014d0f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014d15:	e8 fc 62 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014d1a:	58                   	pop    eax
c0014d1b:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014d20:	5a                   	pop    edx
c0014d21:	68 2a 5b 02 c0       	push   0xc0025b2a
c0014d26:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014d2c:	e8 e5 62 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014d31:	59                   	pop    ecx
c0014d32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d37:	5b                   	pop    ebx
c0014d38:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014d3b:	83 c0 0c             	add    eax,0xc
c0014d3e:	50                   	push   eax
c0014d3f:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0014d44:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014d4a:	e8 c7 62 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014d4f:	83 c4 10             	add    esp,0x10
c0014d52:	e9 a3 fd ff ff       	jmp    c0014afa <Krnl::panic(char const*)+0x13f>

c0014d57 <Krnl::powerThread(void*)>:
c0014d57:	53                   	push   ebx
c0014d58:	83 ec 08             	sub    esp,0x8
c0014d5b:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c0014d60:	48                   	dec    eax
c0014d61:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c0014d66:	75 01                	jne    c0014d69 <Krnl::powerThread(void*)+0x12>
c0014d68:	fb                   	sti    
c0014d69:	52                   	push   edx
c0014d6a:	52                   	push   edx
c0014d6b:	ff 35 84 8b 02 c0    	push   DWORD PTR ds:0xc0028b84
c0014d71:	68 f2 5c 02 c0       	push   0xc0025cf2
c0014d76:	e8 84 7f ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0014d7b:	59                   	pop    ecx
c0014d7c:	8b 1d 74 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b74
c0014d82:	58                   	pop    eax
c0014d83:	c6 05 40 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028b40,0x0
c0014d8a:	53                   	push   ebx
c0014d8b:	68 fc 5c 02 c0       	push   0xc0025cfc
c0014d90:	e8 6a 7f ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0014d95:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0014d9c:	e8 87 3c 00 00       	call   c0018a28 <sleep(unsigned int)>
c0014da1:	a1 84 8b 02 c0       	mov    eax,ds:0xc0028b84
c0014da6:	83 c4 10             	add    esp,0x10
c0014da9:	83 c0 0a             	add    eax,0xa
c0014dac:	85 db                	test   ebx,ebx
c0014dae:	a3 84 8b 02 c0       	mov    ds:0xc0028b84,eax
c0014db3:	74 b4                	je     c0014d69 <Krnl::powerThread(void*)+0x12>
c0014db5:	39 d8                	cmp    eax,ebx
c0014db7:	7e b0                	jle    c0014d69 <Krnl::powerThread(void*)+0x12>
c0014db9:	83 ec 0c             	sub    esp,0xc
c0014dbc:	68 14 5d 02 c0       	push   0xc0025d14
c0014dc1:	e8 39 7f ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0014dc6:	58                   	pop    eax
c0014dc7:	ff 35 48 80 02 c0    	push   DWORD PTR ds:0xc0028048
c0014dcd:	e8 ec 41 ff ff       	call   c0008fbe <Computer::sleep()>
c0014dd2:	83 c4 10             	add    esp,0x10
c0014dd5:	eb 92                	jmp    c0014d69 <Krnl::powerThread(void*)+0x12>

c0014dd7 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0014dd7:	57                   	push   edi
c0014dd8:	b9 09 00 00 00       	mov    ecx,0x9
c0014ddd:	56                   	push   esi
c0014dde:	bf 60 8b 02 c0       	mov    edi,0xc0028b60
c0014de3:	fc                   	cld    
c0014de4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014de8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014dea:	5e                   	pop    esi
c0014deb:	5f                   	pop    edi
c0014dec:	c3                   	ret    

c0014ded <Krnl::userIOReceived()>:
c0014ded:	c7 05 84 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028b84,0x0
c0014df7:	c3                   	ret    

c0014df8 <Krnl::handlePowerButton()>:
c0014df8:	83 ec 0c             	sub    esp,0xc
c0014dfb:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c0014e00:	83 f8 02             	cmp    eax,0x2
c0014e03:	75 10                	jne    c0014e15 <Krnl::handlePowerButton()+0x1d>
c0014e05:	83 ec 0c             	sub    esp,0xc
c0014e08:	ff 35 48 80 02 c0    	push   DWORD PTR ds:0xc0028048
c0014e0e:	e8 7b 41 ff ff       	call   c0008f8e <Computer::shutdown()>
c0014e13:	eb 11                	jmp    c0014e26 <Krnl::handlePowerButton()+0x2e>
c0014e15:	48                   	dec    eax
c0014e16:	75 11                	jne    c0014e29 <Krnl::handlePowerButton()+0x31>
c0014e18:	83 ec 0c             	sub    esp,0xc
c0014e1b:	ff 35 48 80 02 c0    	push   DWORD PTR ds:0xc0028048
c0014e21:	e8 98 41 ff ff       	call   c0008fbe <Computer::sleep()>
c0014e26:	83 c4 10             	add    esp,0x10
c0014e29:	83 c4 0c             	add    esp,0xc
c0014e2c:	c3                   	ret    

c0014e2d <Krnl::handleSleepButton()>:
c0014e2d:	83 ec 0c             	sub    esp,0xc
c0014e30:	a1 64 8b 02 c0       	mov    eax,ds:0xc0028b64
c0014e35:	83 f8 02             	cmp    eax,0x2
c0014e38:	75 10                	jne    c0014e4a <Krnl::handleSleepButton()+0x1d>
c0014e3a:	83 ec 0c             	sub    esp,0xc
c0014e3d:	ff 35 48 80 02 c0    	push   DWORD PTR ds:0xc0028048
c0014e43:	e8 46 41 ff ff       	call   c0008f8e <Computer::shutdown()>
c0014e48:	eb 11                	jmp    c0014e5b <Krnl::handleSleepButton()+0x2e>
c0014e4a:	48                   	dec    eax
c0014e4b:	75 11                	jne    c0014e5e <Krnl::handleSleepButton()+0x31>
c0014e4d:	83 ec 0c             	sub    esp,0xc
c0014e50:	ff 35 48 80 02 c0    	push   DWORD PTR ds:0xc0028048
c0014e56:	e8 63 41 ff ff       	call   c0008fbe <Computer::sleep()>
c0014e5b:	83 c4 10             	add    esp,0x10
c0014e5e:	83 c4 0c             	add    esp,0xc
c0014e61:	c3                   	ret    

c0014e62 <Krnl::setupPowerManager()>:
c0014e62:	83 ec 0c             	sub    esp,0xc
c0014e65:	c7 05 84 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028b84,0x0
c0014e6f:	68 f0 00 00 00       	push   0xf0
c0014e74:	c6 05 40 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028b40,0x0
c0014e7b:	6a 00                	push   0x0
c0014e7d:	68 57 4d 01 c0       	push   0xc0014d57
c0014e82:	ff 35 90 95 02 c0    	push   DWORD PTR ds:0xc0029590
c0014e88:	e8 77 36 00 00       	call   c0018504 <Process::createThread(void (*)(void*), void*, int)>
c0014e8d:	c7 05 60 8b 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028b60,0x2
c0014e97:	c7 05 64 8b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028b64,0x1
c0014ea1:	c7 05 68 8b 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028b68,0x3
c0014eab:	c7 05 6c 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028b6c,0x0
c0014eb5:	c7 05 78 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028b78,0x0
c0014ebf:	c7 05 70 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028b70,0x0
c0014ec9:	c7 05 7c 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028b7c,0x0
c0014ed3:	c7 05 74 8b 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028b74,0x3c
c0014edd:	c7 05 80 8b 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028b80,0x3c
c0014ee7:	83 c4 1c             	add    esp,0x1c
c0014eea:	c3                   	ret    
c0014eeb:	90                   	nop

c0014eec <Net::switchEndian16(unsigned short)>:
c0014eec:	83 ec 04             	sub    esp,0x4
c0014eef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014ef3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0014ef7:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014efb:	c1 f8 08             	sar    eax,0x8
c0014efe:	89 c2                	mov    edx,eax
c0014f00:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014f04:	c1 e0 08             	shl    eax,0x8
c0014f07:	09 d0                	or     eax,edx
c0014f09:	83 c4 04             	add    esp,0x4
c0014f0c:	c3                   	ret    
c0014f0d:	8d 76 00             	lea    esi,[esi+0x0]

c0014f10 <Net::switchEndian32(unsigned int)>:
c0014f10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f14:	c1 e8 18             	shr    eax,0x18
c0014f17:	89 c2                	mov    edx,eax
c0014f19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f1d:	c1 e0 08             	shl    eax,0x8
c0014f20:	25 00 00 ff 00       	and    eax,0xff0000
c0014f25:	09 c2                	or     edx,eax
c0014f27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f2b:	c1 e8 08             	shr    eax,0x8
c0014f2e:	25 00 ff 00 00       	and    eax,0xff00
c0014f33:	09 c2                	or     edx,eax
c0014f35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f39:	c1 e0 18             	shl    eax,0x18
c0014f3c:	09 d0                	or     eax,edx
c0014f3e:	c3                   	ret    
c0014f3f:	90                   	nop

c0014f40 <Net::crc32Calc(unsigned char*, int)>:
c0014f40:	83 ec 10             	sub    esp,0x10
c0014f43:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014f48:	75 0a                	jne    c0014f54 <Net::crc32Calc(unsigned char*, int)+0x14>
c0014f4a:	b8 00 00 00 00       	mov    eax,0x0
c0014f4f:	e9 8c 00 00 00       	jmp    c0014fe0 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014f54:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014f59:	7f 09                	jg     c0014f64 <Net::crc32Calc(unsigned char*, int)+0x24>
c0014f5b:	b8 00 00 00 00       	mov    eax,0x0
c0014f60:	eb 7e                	jmp    c0014fe0 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014f62:	66 90                	xchg   ax,ax
c0014f64:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0014f6c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014f74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014f78:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0014f7c:	7d 5a                	jge    c0014fd8 <Net::crc32Calc(unsigned char*, int)+0x98>
c0014f7e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014f82:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014f86:	01 d0                	add    eax,edx
c0014f88:	8a 00                	mov    al,BYTE PTR [eax]
c0014f8a:	0f b6 c0             	movzx  eax,al
c0014f8d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0014f91:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014f99:	8d 76 00             	lea    esi,[esi+0x0]
c0014f9c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0014fa1:	7f 2d                	jg     c0014fd0 <Net::crc32Calc(unsigned char*, int)+0x90>
c0014fa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014fa7:	83 e0 01             	and    eax,0x1
c0014faa:	74 10                	je     c0014fbc <Net::crc32Calc(unsigned char*, int)+0x7c>
c0014fac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014fb0:	d1 e8                	shr    eax,1
c0014fb2:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0014fb7:	eb 0b                	jmp    c0014fc4 <Net::crc32Calc(unsigned char*, int)+0x84>
c0014fb9:	8d 76 00             	lea    esi,[esi+0x0]
c0014fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014fc0:	d1 e8                	shr    eax,1
c0014fc2:	66 90                	xchg   ax,ax
c0014fc4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014fc8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014fcc:	eb ce                	jmp    c0014f9c <Net::crc32Calc(unsigned char*, int)+0x5c>
c0014fce:	66 90                	xchg   ax,ax
c0014fd0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014fd4:	eb 9e                	jmp    c0014f74 <Net::crc32Calc(unsigned char*, int)+0x34>
c0014fd6:	66 90                	xchg   ax,ax
c0014fd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014fdc:	f7 d0                	not    eax
c0014fde:	66 90                	xchg   ax,ax
c0014fe0:	83 c4 10             	add    esp,0x10
c0014fe3:	c3                   	ret    

c0014fe4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0014fe4:	57                   	push   edi
c0014fe5:	56                   	push   esi
c0014fe6:	53                   	push   ebx
c0014fe7:	83 ec 60             	sub    esp,0x60
c0014fea:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014ff1:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014ff5:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0014ffd:	8d 76 00             	lea    esi,[esi+0x0]
c0015000:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c0015005:	7f 1d                	jg     c0015024 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c0015007:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001500e:	8d 50 01             	lea    edx,[eax+0x1]
c0015011:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015018:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001501b:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001501f:	eb df                	jmp    c0015000 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c0015021:	8d 76 00             	lea    esi,[esi+0x0]
c0015024:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001502b:	8d 50 01             	lea    edx,[eax+0x1]
c001502e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015035:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0015038:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001503f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015043:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c0015047:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001504b:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c0015053:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015057:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001505b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001505f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015063:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015067:	89 c6                	mov    esi,eax
c0015069:	89 d7                	mov    edi,edx
c001506b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001506d:	89 c8                	mov    eax,ecx
c001506f:	89 fa                	mov    edx,edi
c0015071:	89 f3                	mov    ebx,esi
c0015073:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0015077:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001507b:	89 04 24             	mov    DWORD PTR [esp],eax
c001507e:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0015086:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001508d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0015091:	8d 44 24 78          	lea    eax,[esp+0x78]
c0015095:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015099:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c00150a1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00150a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00150a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150ad:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00150b1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00150b5:	89 c6                	mov    esi,eax
c00150b7:	89 d7                	mov    edi,edx
c00150b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00150bb:	89 c8                	mov    eax,ecx
c00150bd:	89 fa                	mov    edx,edi
c00150bf:	89 f3                	mov    ebx,esi
c00150c1:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c00150c5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00150c9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00150cd:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c00150d5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00150dc:	0f b7 c0             	movzx  eax,ax
c00150df:	c1 f8 08             	sar    eax,0x8
c00150e2:	89 c1                	mov    ecx,eax
c00150e4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00150eb:	8d 50 01             	lea    edx,[eax+0x1]
c00150ee:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00150f5:	88 ca                	mov    dl,cl
c00150f7:	88 10                	mov    BYTE PTR [eax],dl
c00150f9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0015100:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015107:	8d 48 01             	lea    ecx,[eax+0x1]
c001510a:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c0015111:	88 10                	mov    BYTE PTR [eax],dl
c0015113:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0015117:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001511b:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c0015122:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c0015126:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001512a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001512e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015132:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015136:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001513a:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001513e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0015142:	89 c6                	mov    esi,eax
c0015144:	89 d7                	mov    edi,edx
c0015146:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015148:	89 c8                	mov    eax,ecx
c001514a:	89 fa                	mov    edx,edi
c001514c:	89 f3                	mov    ebx,esi
c001514e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0015152:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0015156:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001515a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001515e:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c0015165:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001516c:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c0015170:	50                   	push   eax
c0015171:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0015175:	e8 c6 fd ff ff       	call   c0014f40 <Net::crc32Calc(unsigned char*, int)>
c001517a:	83 c4 08             	add    esp,0x8
c001517d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0015181:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015185:	c1 e8 18             	shr    eax,0x18
c0015188:	89 c1                	mov    ecx,eax
c001518a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015191:	8d 50 01             	lea    edx,[eax+0x1]
c0015194:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001519b:	88 ca                	mov    dl,cl
c001519d:	88 10                	mov    BYTE PTR [eax],dl
c001519f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00151a3:	c1 e8 10             	shr    eax,0x10
c00151a6:	89 c1                	mov    ecx,eax
c00151a8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00151af:	8d 50 01             	lea    edx,[eax+0x1]
c00151b2:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00151b9:	88 ca                	mov    dl,cl
c00151bb:	88 10                	mov    BYTE PTR [eax],dl
c00151bd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00151c1:	c1 e8 08             	shr    eax,0x8
c00151c4:	89 c1                	mov    ecx,eax
c00151c6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00151cd:	8d 50 01             	lea    edx,[eax+0x1]
c00151d0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00151d7:	88 ca                	mov    dl,cl
c00151d9:	88 10                	mov    BYTE PTR [eax],dl
c00151db:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00151e2:	8d 50 01             	lea    edx,[eax+0x1]
c00151e5:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00151ec:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00151f0:	88 10                	mov    BYTE PTR [eax],dl
c00151f2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00151f6:	83 c4 60             	add    esp,0x60
c00151f9:	5b                   	pop    ebx
c00151fa:	5e                   	pop    esi
c00151fb:	5f                   	pop    edi
c00151fc:	c3                   	ret    
c00151fd:	8d 76 00             	lea    esi,[esi+0x0]

c0015200 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0015200:	57                   	push   edi
c0015201:	56                   	push   esi
c0015202:	53                   	push   ebx
c0015203:	83 ec 70             	sub    esp,0x70
c0015206:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001520d:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0015211:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c0015219:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015220:	83 c0 0e             	add    eax,0xe
c0015223:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0015227:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001522e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015232:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001523a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001523e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015242:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015246:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001524a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001524e:	89 c6                	mov    esi,eax
c0015250:	89 d7                	mov    edi,edx
c0015252:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015254:	89 c8                	mov    eax,ecx
c0015256:	89 fa                	mov    edx,edi
c0015258:	89 f3                	mov    ebx,esi
c001525a:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001525e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0015262:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015266:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001526e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015275:	83 c0 08             	add    eax,0x8
c0015278:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001527c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015283:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0015287:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001528f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015293:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015297:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001529b:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001529f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00152a3:	89 c6                	mov    esi,eax
c00152a5:	89 d7                	mov    edi,edx
c00152a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00152a9:	89 c8                	mov    eax,ecx
c00152ab:	89 fa                	mov    edx,edi
c00152ad:	89 f3                	mov    ebx,esi
c00152af:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c00152b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00152b7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00152bb:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c00152c3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00152ca:	8d 50 01             	lea    edx,[eax+0x1]
c00152cd:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00152d4:	8a 00                	mov    al,BYTE PTR [eax]
c00152d6:	0f b6 c0             	movzx  eax,al
c00152d9:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c00152de:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00152e5:	8d 50 01             	lea    edx,[eax+0x1]
c00152e8:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00152ef:	8a 00                	mov    al,BYTE PTR [eax]
c00152f1:	0f b6 c0             	movzx  eax,al
c00152f4:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c00152f9:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c00152fe:	c1 e0 08             	shl    eax,0x8
c0015301:	89 c2                	mov    edx,eax
c0015303:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0015307:	09 d0                	or     eax,edx
c0015309:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0015310:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0015314:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001531c:	75 46                	jne    c0015364 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001531e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015325:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015328:	66 3d dc 05          	cmp    ax,0x5dc
c001532c:	77 16                	ja     c0015344 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001532e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015335:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015338:	0f b7 c0             	movzx  eax,ax
c001533b:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0015342:	eb 20                	jmp    c0015364 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0015344:	83 ec 0c             	sub    esp,0xc
c0015347:	68 24 5d 02 c0       	push   0xc0025d24
c001534c:	e8 ae 79 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0015351:	83 c4 10             	add    esp,0x10
c0015354:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001535b:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001535f:	e9 18 01 00 00       	jmp    c001547c <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0015364:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001536b:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0015372:	8b 12                	mov    edx,DWORD PTR [edx]
c0015374:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015378:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001537f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015383:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015387:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001538b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001538f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015393:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015397:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001539b:	89 c6                	mov    esi,eax
c001539d:	89 d7                	mov    edi,edx
c001539f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00153a1:	89 c8                	mov    eax,ecx
c00153a3:	89 fa                	mov    edx,edi
c00153a5:	89 f3                	mov    ebx,esi
c00153a7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00153ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00153af:	89 04 24             	mov    DWORD PTR [esp],eax
c00153b2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00153b9:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c00153c0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00153c7:	8d 50 01             	lea    edx,[eax+0x1]
c00153ca:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00153d1:	8a 00                	mov    al,BYTE PTR [eax]
c00153d3:	0f b6 c0             	movzx  eax,al
c00153d6:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00153da:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00153e1:	8d 50 01             	lea    edx,[eax+0x1]
c00153e4:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00153eb:	8a 00                	mov    al,BYTE PTR [eax]
c00153ed:	0f b6 c0             	movzx  eax,al
c00153f0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00153f4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00153fb:	8d 50 01             	lea    edx,[eax+0x1]
c00153fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015405:	8a 00                	mov    al,BYTE PTR [eax]
c0015407:	0f b6 c0             	movzx  eax,al
c001540a:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001540e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015415:	8d 50 01             	lea    edx,[eax+0x1]
c0015418:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001541f:	8a 00                	mov    al,BYTE PTR [eax]
c0015421:	0f b6 c0             	movzx  eax,al
c0015424:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0015428:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001542c:	c1 e0 18             	shl    eax,0x18
c001542f:	89 c2                	mov    edx,eax
c0015431:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0015435:	c1 e0 10             	shl    eax,0x10
c0015438:	09 c2                	or     edx,eax
c001543a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001543e:	c1 e0 08             	shl    eax,0x8
c0015441:	09 d0                	or     eax,edx
c0015443:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0015447:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001544b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015452:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0015456:	83 e8 04             	sub    eax,0x4
c0015459:	83 ec 08             	sub    esp,0x8
c001545c:	50                   	push   eax
c001545d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015461:	e8 da fa ff ff       	call   c0014f40 <Net::crc32Calc(unsigned char*, int)>
c0015466:	83 c4 10             	add    esp,0x10
c0015469:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001546d:	0f 94 c2             	sete   dl
c0015470:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015477:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001547a:	90                   	nop
c001547b:	90                   	nop
c001547c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015483:	83 c4 70             	add    esp,0x70
c0015486:	5b                   	pop    ebx
c0015487:	5e                   	pop    esi
c0015488:	5f                   	pop    edi
c0015489:	c2 04 00             	ret    0x4

c001548c <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001548c:	55                   	push   ebp
c001548d:	57                   	push   edi
c001548e:	56                   	push   esi
c001548f:	53                   	push   ebx
c0015490:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015496:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001549d:	8a 1e                	mov    bl,BYTE PTR [esi]
c001549f:	8d 6e 01             	lea    ebp,[esi+0x1]
c00154a2:	80 fb 40             	cmp    bl,0x40
c00154a5:	75 1b                	jne    c00154c2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00154a7:	8a 16                	mov    dl,BYTE PTR [esi]
c00154a9:	84 d2                	test   dl,dl
c00154ab:	0f 84 f1 00 00 00    	je     c00155a2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00154b1:	8d 46 01             	lea    eax,[esi+0x1]
c00154b4:	80 fa 3a             	cmp    dl,0x3a
c00154b7:	74 04                	je     c00154bd <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00154b9:	89 c6                	mov    esi,eax
c00154bb:	eb ea                	jmp    c00154a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00154bd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00154c0:	89 c6                	mov    esi,eax
c00154c2:	50                   	push   eax
c00154c3:	6a 40                	push   0x40
c00154c5:	6a 00                	push   0x0
c00154c7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00154cb:	50                   	push   eax
c00154cc:	e8 b3 b1 fe ff       	call   c0000684 <memset>
c00154d1:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00154d8:	31 c0                	xor    eax,eax
c00154da:	83 c4 10             	add    esp,0x10
c00154dd:	8a 0f                	mov    cl,BYTE PTR [edi]
c00154df:	84 c9                	test   cl,cl
c00154e1:	0f 84 bb 00 00 00    	je     c00155a2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00154e7:	3d c7 00 00 00       	cmp    eax,0xc7
c00154ec:	0f 8f b0 00 00 00    	jg     c00155a2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00154f2:	80 f9 0a             	cmp    cl,0xa
c00154f5:	0f 85 98 00 00 00    	jne    c0015593 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00154fb:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0015500:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0015504:	a8 df                	test   al,0xdf
c0015506:	0f 94 c1             	sete   cl
c0015509:	3c 23                	cmp    al,0x23
c001550b:	0f 94 c2             	sete   dl
c001550e:	08 d1                	or     cl,dl
c0015510:	75 4a                	jne    c001555c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015512:	8d 50 f7             	lea    edx,[eax-0x9]
c0015515:	80 fa 01             	cmp    dl,0x1
c0015518:	76 42                	jbe    c001555c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001551a:	3c 5b                	cmp    al,0x5b
c001551c:	75 42                	jne    c0015560 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001551e:	80 fb 40             	cmp    bl,0x40
c0015521:	75 39                	jne    c001555c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015523:	83 ec 0c             	sub    esp,0xc
c0015526:	8d 54 24 65          	lea    edx,[esp+0x65]
c001552a:	52                   	push   edx
c001552b:	e8 70 b1 fe ff       	call   c00006a0 <strlen>
c0015530:	83 c4 10             	add    esp,0x10
c0015533:	83 f8 3f             	cmp    eax,0x3f
c0015536:	77 6a                	ja     c00155a2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015538:	50                   	push   eax
c0015539:	50                   	push   eax
c001553a:	8d 54 24 61          	lea    edx,[esp+0x61]
c001553e:	52                   	push   edx
c001553f:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015543:	52                   	push   edx
c0015544:	e8 f7 b1 fe ff       	call   c0000740 <strcpy>
c0015549:	58                   	pop    eax
c001554a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001554e:	52                   	push   edx
c001554f:	e8 4c b1 fe ff       	call   c00006a0 <strlen>
c0015554:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015559:	83 c4 10             	add    esp,0x10
c001555c:	31 d2                	xor    edx,edx
c001555e:	eb 3a                	jmp    c001559a <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0015560:	80 fb 40             	cmp    bl,0x40
c0015563:	74 06                	je     c001556b <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0015565:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015569:	eb 20                	jmp    c001558b <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001556b:	50                   	push   eax
c001556c:	50                   	push   eax
c001556d:	55                   	push   ebp
c001556e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015572:	50                   	push   eax
c0015573:	e8 54 b2 fe ff       	call   c00007cc <strcmp>
c0015578:	83 c4 10             	add    esp,0x10
c001557b:	85 c0                	test   eax,eax
c001557d:	75 dd                	jne    c001555c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001557f:	eb e4                	jmp    c0015565 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0015581:	8d 50 01             	lea    edx,[eax+0x1]
c0015584:	80 f9 3d             	cmp    cl,0x3d
c0015587:	74 1d                	je     c00155a6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0015589:	89 d0                	mov    eax,edx
c001558b:	8a 08                	mov    cl,BYTE PTR [eax]
c001558d:	84 c9                	test   cl,cl
c001558f:	75 f0                	jne    c0015581 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0015591:	eb 0f                	jmp    c00155a2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015593:	8d 50 01             	lea    edx,[eax+0x1]
c0015596:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001559a:	47                   	inc    edi
c001559b:	89 d0                	mov    eax,edx
c001559d:	e9 3b ff ff ff       	jmp    c00154dd <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00155a2:	31 c0                	xor    eax,eax
c00155a4:	eb 33                	jmp    c00155d9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00155a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00155aa:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00155ad:	50                   	push   eax
c00155ae:	50                   	push   eax
c00155af:	8d 44 24 60          	lea    eax,[esp+0x60]
c00155b3:	50                   	push   eax
c00155b4:	56                   	push   esi
c00155b5:	e8 12 b2 fe ff       	call   c00007cc <strcmp>
c00155ba:	83 c4 10             	add    esp,0x10
c00155bd:	85 c0                	test   eax,eax
c00155bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00155c3:	75 97                	jne    c001555c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00155c5:	51                   	push   ecx
c00155c6:	51                   	push   ecx
c00155c7:	52                   	push   edx
c00155c8:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00155cf:	e8 6c b1 fe ff       	call   c0000740 <strcpy>
c00155d4:	83 c4 10             	add    esp,0x10
c00155d7:	b0 01                	mov    al,0x1
c00155d9:	81 c4 2c 01 00 00    	add    esp,0x12c
c00155df:	5b                   	pop    ebx
c00155e0:	5e                   	pop    esi
c00155e1:	5f                   	pop    edi
c00155e2:	5d                   	pop    ebp
c00155e3:	c3                   	ret    

c00155e4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00155e4:	57                   	push   edi
c00155e5:	56                   	push   esi
c00155e6:	53                   	push   ebx
c00155e7:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00155ed:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00155f4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00155fb:	53                   	push   ebx
c00155fc:	e8 9f b0 fe ff       	call   c00006a0 <strlen>
c0015601:	89 34 24             	mov    DWORD PTR [esp],esi
c0015604:	89 c7                	mov    edi,eax
c0015606:	e8 95 b0 fe ff       	call   c00006a0 <strlen>
c001560b:	83 c4 10             	add    esp,0x10
c001560e:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015612:	3d ff 00 00 00       	cmp    eax,0xff
c0015617:	0f 87 d3 00 00 00    	ja     c00156f0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001561d:	57                   	push   edi
c001561e:	57                   	push   edi
c001561f:	56                   	push   esi
c0015620:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015624:	56                   	push   esi
c0015625:	e8 16 b1 fe ff       	call   c0000740 <strcpy>
c001562a:	58                   	pop    eax
c001562b:	5a                   	pop    edx
c001562c:	68 c6 60 02 c0       	push   0xc00260c6
c0015631:	56                   	push   esi
c0015632:	e8 49 b2 fe ff       	call   c0000880 <strcat>
c0015637:	59                   	pop    ecx
c0015638:	5f                   	pop    edi
c0015639:	53                   	push   ebx
c001563a:	56                   	push   esi
c001563b:	e8 40 b2 fe ff       	call   c0000880 <strcat>
c0015640:	58                   	pop    eax
c0015641:	5a                   	pop    edx
c0015642:	68 70 5d 02 c0       	push   0xc0025d70
c0015647:	56                   	push   esi
c0015648:	e8 33 b2 fe ff       	call   c0000880 <strcat>
c001564d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015654:	e8 b6 43 ff ff       	call   c0009a0f <malloc>
c0015659:	83 c4 0c             	add    esp,0xc
c001565c:	89 c3                	mov    ebx,eax
c001565e:	ff 35 90 95 02 c0    	push   DWORD PTR ds:0xc0029590
c0015664:	56                   	push   esi
c0015665:	50                   	push   eax
c0015666:	e8 ff 7b ff ff       	call   c000d26a <File::File(char const*, Process*)>
c001566b:	83 c4 10             	add    esp,0x10
c001566e:	85 db                	test   ebx,ebx
c0015670:	74 7e                	je     c00156f0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015672:	51                   	push   ecx
c0015673:	51                   	push   ecx
c0015674:	6a 01                	push   0x1
c0015676:	53                   	push   ebx
c0015677:	e8 b0 7c ff ff       	call   c000d32c <File::open(FileOpenMode)>
c001567c:	83 c4 10             	add    esp,0x10
c001567f:	85 c0                	test   eax,eax
c0015681:	74 08                	je     c001568b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0015683:	83 ec 0c             	sub    esp,0xc
c0015686:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015688:	53                   	push   ebx
c0015689:	eb 5f                	jmp    c00156ea <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001568b:	52                   	push   edx
c001568c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015690:	50                   	push   eax
c0015691:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015695:	50                   	push   eax
c0015696:	53                   	push   ebx
c0015697:	e8 3c 7f ff ff       	call   c000d5d8 <File::stat(unsigned long long*, bool*)>
c001569c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00156a0:	83 c4 10             	add    esp,0x10
c00156a3:	89 c1                	mov    ecx,eax
c00156a5:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00156a9:	74 31                	je     c00156dc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00156ab:	83 ec 0c             	sub    esp,0xc
c00156ae:	50                   	push   eax
c00156af:	e8 5b 43 ff ff       	call   c0009a0f <malloc>
c00156b4:	89 c6                	mov    esi,eax
c00156b6:	58                   	pop    eax
c00156b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00156b9:	8d 54 24 20          	lea    edx,[esp+0x20]
c00156bd:	52                   	push   edx
c00156be:	56                   	push   esi
c00156bf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00156c3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00156c7:	53                   	push   ebx
c00156c8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00156cb:	83 c4 20             	add    esp,0x20
c00156ce:	85 c0                	test   eax,eax
c00156d0:	75 0a                	jne    c00156dc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00156d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00156d6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00156da:	74 18                	je     c00156f4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00156dc:	83 ec 0c             	sub    esp,0xc
c00156df:	53                   	push   ebx
c00156e0:	e8 a5 7c ff ff       	call   c000d38a <File::close()>
c00156e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00156e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00156ea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00156ed:	83 c4 10             	add    esp,0x10
c00156f0:	31 c0                	xor    eax,eax
c00156f2:	eb 3b                	jmp    c001572f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00156f4:	83 ec 0c             	sub    esp,0xc
c00156f7:	53                   	push   ebx
c00156f8:	e8 8d 7c ff ff       	call   c000d38a <File::close()>
c00156fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00156ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015702:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015705:	83 c4 0c             	add    esp,0xc
c0015708:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001570f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015716:	56                   	push   esi
c0015717:	e8 70 fd ff ff       	call   c001548c <Reg::findLineFromLoadedData(char*, char*, char*)>
c001571c:	89 34 24             	mov    DWORD PTR [esp],esi
c001571f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015723:	e8 f7 42 ff ff       	call   c0009a1f <free>
c0015728:	83 c4 10             	add    esp,0x10
c001572b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001572f:	81 c4 20 01 00 00    	add    esp,0x120
c0015735:	5b                   	pop    ebx
c0015736:	5e                   	pop    esi
c0015737:	5f                   	pop    edi
c0015738:	c3                   	ret    

c0015739 <Reg::getLine(char*, char*, char*)>:
c0015739:	57                   	push   edi
c001573a:	56                   	push   esi
c001573b:	53                   	push   ebx
c001573c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015740:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015744:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015748:	57                   	push   edi
c0015749:	56                   	push   esi
c001574a:	53                   	push   ebx
c001574b:	68 75 5d 02 c0       	push   0xc0025d75
c0015750:	e8 8f fe ff ff       	call   c00155e4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015755:	83 c4 10             	add    esp,0x10
c0015758:	84 c0                	test   al,al
c001575a:	75 10                	jne    c001576c <Reg::getLine(char*, char*, char*)+0x33>
c001575c:	57                   	push   edi
c001575d:	56                   	push   esi
c001575e:	53                   	push   ebx
c001575f:	68 9a 5d 02 c0       	push   0xc0025d9a
c0015764:	e8 7b fe ff ff       	call   c00155e4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015769:	83 c4 10             	add    esp,0x10
c001576c:	5b                   	pop    ebx
c001576d:	5e                   	pop    esi
c001576e:	5f                   	pop    edi
c001576f:	c3                   	ret    

c0015770 <Reg::readInt(char*, char*, int*)>:
c0015770:	55                   	push   ebp
c0015771:	57                   	push   edi
c0015772:	56                   	push   esi
c0015773:	53                   	push   ebx
c0015774:	81 ec f0 00 00 00    	sub    esp,0xf0
c001577a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001577e:	57                   	push   edi
c001577f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015786:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001578d:	e8 a7 ff ff ff       	call   c0015739 <Reg::getLine(char*, char*, char*)>
c0015792:	83 c4 10             	add    esp,0x10
c0015795:	84 c0                	test   al,al
c0015797:	0f 84 b3 00 00 00    	je     c0015850 <Reg::readInt(char*, char*, int*)+0xe0>
c001579d:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00157a1:	80 fa 2b             	cmp    dl,0x2b
c00157a4:	74 0c                	je     c00157b2 <Reg::readInt(char*, char*, int*)+0x42>
c00157a6:	80 fa 2d             	cmp    dl,0x2d
c00157a9:	75 0e                	jne    c00157b9 <Reg::readInt(char*, char*, int*)+0x49>
c00157ab:	ba 01 00 00 00       	mov    edx,0x1
c00157b0:	eb 0b                	jmp    c00157bd <Reg::readInt(char*, char*, int*)+0x4d>
c00157b2:	ba 01 00 00 00       	mov    edx,0x1
c00157b7:	eb 02                	jmp    c00157bb <Reg::readInt(char*, char*, int*)+0x4b>
c00157b9:	31 d2                	xor    edx,edx
c00157bb:	31 c0                	xor    eax,eax
c00157bd:	be 0a 00 00 00       	mov    esi,0xa
c00157c2:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00157c7:	75 20                	jne    c00157e9 <Reg::readInt(char*, char*, int*)+0x79>
c00157c9:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00157cd:	80 f9 78             	cmp    cl,0x78
c00157d0:	75 0a                	jne    c00157dc <Reg::readInt(char*, char*, int*)+0x6c>
c00157d2:	83 c2 02             	add    edx,0x2
c00157d5:	be 10 00 00 00       	mov    esi,0x10
c00157da:	eb 0d                	jmp    c00157e9 <Reg::readInt(char*, char*, int*)+0x79>
c00157dc:	80 f9 62             	cmp    cl,0x62
c00157df:	75 08                	jne    c00157e9 <Reg::readInt(char*, char*, int*)+0x79>
c00157e1:	83 c2 02             	add    edx,0x2
c00157e4:	be 02 00 00 00       	mov    esi,0x2
c00157e9:	01 d7                	add    edi,edx
c00157eb:	31 d2                	xor    edx,edx
c00157ed:	8a 1f                	mov    bl,BYTE PTR [edi]
c00157ef:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00157f3:	80 fb 0d             	cmp    bl,0xd
c00157f6:	0f 94 c3             	sete   bl
c00157f9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00157fe:	0f 94 c1             	sete   cl
c0015801:	08 cb                	or     bl,cl
c0015803:	75 3a                	jne    c001583f <Reg::readInt(char*, char*, int*)+0xcf>
c0015805:	0f af d6             	imul   edx,esi
c0015808:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001580d:	83 fe 10             	cmp    esi,0x10
c0015810:	75 26                	jne    c0015838 <Reg::readInt(char*, char*, int*)+0xc8>
c0015812:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015816:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0015819:	89 e9                	mov    ecx,ebp
c001581b:	80 f9 05             	cmp    cl,0x5
c001581e:	77 06                	ja     c0015826 <Reg::readInt(char*, char*, int*)+0xb6>
c0015820:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015824:	eb 16                	jmp    c001583c <Reg::readInt(char*, char*, int*)+0xcc>
c0015826:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001582a:	83 e9 61             	sub    ecx,0x61
c001582d:	80 f9 05             	cmp    cl,0x5
c0015830:	77 06                	ja     c0015838 <Reg::readInt(char*, char*, int*)+0xc8>
c0015832:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0015836:	eb 04                	jmp    c001583c <Reg::readInt(char*, char*, int*)+0xcc>
c0015838:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001583c:	47                   	inc    edi
c001583d:	eb ae                	jmp    c00157ed <Reg::readInt(char*, char*, int*)+0x7d>
c001583f:	84 c0                	test   al,al
c0015841:	74 02                	je     c0015845 <Reg::readInt(char*, char*, int*)+0xd5>
c0015843:	f7 da                	neg    edx
c0015845:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001584c:	89 10                	mov    DWORD PTR [eax],edx
c001584e:	88 d8                	mov    al,bl
c0015850:	81 c4 ec 00 00 00    	add    esp,0xec
c0015856:	5b                   	pop    ebx
c0015857:	5e                   	pop    esi
c0015858:	5f                   	pop    edi
c0015859:	5d                   	pop    ebp
c001585a:	c3                   	ret    

c001585b <Reg::readString(char*, char*, char*, int)>:
c001585b:	57                   	push   edi
c001585c:	56                   	push   esi
c001585d:	53                   	push   ebx
c001585e:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015864:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001586b:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001586f:	57                   	push   edi
c0015870:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015877:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001587e:	e8 b6 fe ff ff       	call   c0015739 <Reg::getLine(char*, char*, char*)>
c0015883:	83 c4 10             	add    esp,0x10
c0015886:	89 c6                	mov    esi,eax
c0015888:	84 c0                	test   al,al
c001588a:	74 44                	je     c00158d0 <Reg::readString(char*, char*, char*, int)+0x75>
c001588c:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0015893:	31 c0                	xor    eax,eax
c0015895:	4a                   	dec    edx
c0015896:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015899:	84 c9                	test   cl,cl
c001589b:	74 0f                	je     c00158ac <Reg::readString(char*, char*, char*, int)+0x51>
c001589d:	39 c2                	cmp    edx,eax
c001589f:	7e 0b                	jle    c00158ac <Reg::readString(char*, char*, char*, int)+0x51>
c00158a1:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00158a4:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00158a9:	40                   	inc    eax
c00158aa:	eb ea                	jmp    c0015896 <Reg::readString(char*, char*, char*, int)+0x3b>
c00158ac:	83 ec 0c             	sub    esp,0xc
c00158af:	53                   	push   ebx
c00158b0:	e8 eb ad fe ff       	call   c00006a0 <strlen>
c00158b5:	83 c4 10             	add    esp,0x10
c00158b8:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00158bd:	75 11                	jne    c00158d0 <Reg::readString(char*, char*, char*, int)+0x75>
c00158bf:	83 ec 0c             	sub    esp,0xc
c00158c2:	53                   	push   ebx
c00158c3:	e8 d8 ad fe ff       	call   c00006a0 <strlen>
c00158c8:	83 c4 10             	add    esp,0x10
c00158cb:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00158d0:	81 c4 d0 00 00 00    	add    esp,0xd0
c00158d6:	89 f0                	mov    eax,esi
c00158d8:	5b                   	pop    ebx
c00158d9:	5e                   	pop    esi
c00158da:	5f                   	pop    edi
c00158db:	c3                   	ret    

c00158dc <Reg::readBool(char*, char*, bool*)>:
c00158dc:	83 ec 20             	sub    esp,0x20
c00158df:	8d 44 24 10          	lea    eax,[esp+0x10]
c00158e3:	50                   	push   eax
c00158e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00158e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00158ec:	e8 7f fe ff ff       	call   c0015770 <Reg::readInt(char*, char*, int*)>
c00158f1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00158f6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00158fa:	0f 95 02             	setne  BYTE PTR [edx]
c00158fd:	83 c4 2c             	add    esp,0x2c
c0015900:	c3                   	ret    

c0015901 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0015901:	53                   	push   ebx
c0015902:	83 ec 1c             	sub    esp,0x1c
c0015905:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0015909:	8d 44 24 13          	lea    eax,[esp+0x13]
c001590d:	50                   	push   eax
c001590e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015912:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015916:	e8 c1 ff ff ff       	call   c00158dc <Reg::readBool(char*, char*, bool*)>
c001591b:	83 c4 10             	add    esp,0x10
c001591e:	84 c0                	test   al,al
c0015920:	74 04                	je     c0015926 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0015922:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0015926:	88 d8                	mov    al,bl
c0015928:	83 c4 18             	add    esp,0x18
c001592b:	5b                   	pop    ebx
c001592c:	c3                   	ret    

c001592d <Reg::readIntWithDefault(char*, char*, int)>:
c001592d:	53                   	push   ebx
c001592e:	83 ec 1c             	sub    esp,0x1c
c0015931:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015935:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015939:	50                   	push   eax
c001593a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001593e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015942:	e8 29 fe ff ff       	call   c0015770 <Reg::readInt(char*, char*, int*)>
c0015947:	83 c4 10             	add    esp,0x10
c001594a:	84 c0                	test   al,al
c001594c:	74 04                	je     c0015952 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001594e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0015952:	89 d8                	mov    eax,ebx
c0015954:	83 c4 18             	add    esp,0x18
c0015957:	5b                   	pop    ebx
c0015958:	c3                   	ret    

c0015959 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015959:	57                   	push   edi
c001595a:	56                   	push   esi
c001595b:	56                   	push   esi
c001595c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015960:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015964:	56                   	push   esi
c0015965:	57                   	push   edi
c0015966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001596a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001596e:	e8 e8 fe ff ff       	call   c001585b <Reg::readString(char*, char*, char*, int)>
c0015973:	83 c4 10             	add    esp,0x10
c0015976:	84 c0                	test   al,al
c0015978:	75 1a                	jne    c0015994 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001597a:	51                   	push   ecx
c001597b:	56                   	push   esi
c001597c:	6a 00                	push   0x0
c001597e:	57                   	push   edi
c001597f:	e8 00 ad fe ff       	call   c0000684 <memset>
c0015984:	8d 4e ff             	lea    ecx,[esi-0x1]
c0015987:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001598b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001598d:	83 c4 10             	add    esp,0x10
c0015990:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0015994:	89 f8                	mov    eax,edi
c0015996:	5a                   	pop    edx
c0015997:	5e                   	pop    esi
c0015998:	5f                   	pop    edi
c0015999:	c3                   	ret    

c001599a <Sys::eject(regs*)>:
c001599a:	83 ec 0c             	sub    esp,0xc
c001599d:	83 ca ff             	or     edx,0xffffffff
c00159a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159a4:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00159a7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00159ac:	83 e9 41             	sub    ecx,0x41
c00159af:	83 f9 19             	cmp    ecx,0x19
c00159b2:	77 18                	ja     c00159cc <Sys::eject(regs*)+0x32>
c00159b4:	8b 0c 8d 00 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7a00]
c00159bb:	85 c9                	test   ecx,ecx
c00159bd:	74 0d                	je     c00159cc <Sys::eject(regs*)+0x32>
c00159bf:	83 ec 0c             	sub    esp,0xc
c00159c2:	51                   	push   ecx
c00159c3:	e8 18 ab ff ff       	call   c00104e0 <LogicalDisk::eject()>
c00159c8:	83 c4 10             	add    esp,0x10
c00159cb:	99                   	cdq    
c00159cc:	83 c4 0c             	add    esp,0xc
c00159cf:	c3                   	ret    

c00159d0 <Sys::exit(regs*)>:
c00159d0:	83 ec 18             	sub    esp,0x18
c00159d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00159d7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00159da:	e8 59 36 00 00       	call   c0019038 <terminateTask(int)>
c00159df:	83 c8 ff             	or     eax,0xffffffff
c00159e2:	83 c4 1c             	add    esp,0x1c
c00159e5:	89 c2                	mov    edx,eax
c00159e7:	c3                   	ret    

c00159e8 <Sys::getCwd(regs*)>:
c00159e8:	83 ec 10             	sub    esp,0x10
c00159eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00159ef:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00159f2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00159f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159fa:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00159fd:	e8 6a 76 ff ff       	call   c000d06c <Fs::getcwd(Process*, char*, int)>
c0015a02:	83 c4 1c             	add    esp,0x1c
c0015a05:	99                   	cdq    
c0015a06:	c3                   	ret    

c0015a07 <Sys::getPID(regs*)>:
c0015a07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a0c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015a0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a11:	99                   	cdq    
c0015a12:	c3                   	ret    

c0015a13 <Sys::getRAMData(regs*)>:
c0015a13:	8b 0d 78 80 02 c0    	mov    ecx,DWORD PTR ds:0xc0028078
c0015a19:	69 05 74 80 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0028074,0xc8
c0015a23:	99                   	cdq    
c0015a24:	f7 f9                	idiv   ecx
c0015a26:	c1 e0 18             	shl    eax,0x18
c0015a29:	09 c8                	or     eax,ecx
c0015a2b:	99                   	cdq    
c0015a2c:	c3                   	ret    

c0015a2d <Sys::getVGAPtr(regs*)>:
c0015a2d:	55                   	push   ebp
c0015a2e:	57                   	push   edi
c0015a2f:	56                   	push   esi
c0015a30:	53                   	push   ebx
c0015a31:	83 ec 18             	sub    esp,0x18
c0015a34:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0015a38:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0015a3b:	e8 fc 30 00 00       	call   c0018b3c <Thr::processFromPID(int)>
c0015a40:	83 c4 10             	add    esp,0x10
c0015a43:	89 c1                	mov    ecx,eax
c0015a45:	b8 01 00 00 00       	mov    eax,0x1
c0015a4a:	85 c9                	test   ecx,ecx
c0015a4c:	74 59                	je     c0015aa7 <Sys::getVGAPtr(regs*)+0x7a>
c0015a4e:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c0015a54:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0015a58:	74 0c                	je     c0015a66 <Sys::getVGAPtr(regs*)+0x39>
c0015a5a:	83 ec 0c             	sub    esp,0xc
c0015a5d:	53                   	push   ebx
c0015a5e:	e8 a6 50 ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c0015a63:	83 c4 10             	add    esp,0x10
c0015a66:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0015a69:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0015a6c:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0015a71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015a73:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0015a76:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015a79:	81 c3 82 00 00 00    	add    ebx,0x82
c0015a7f:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0015a85:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015a88:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c0015a8b:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0015a91:	50                   	push   eax
c0015a92:	50                   	push   eax
c0015a93:	53                   	push   ebx
c0015a94:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015a97:	05 a8 0f 00 00       	add    eax,0xfa8
c0015a9c:	50                   	push   eax
c0015a9d:	e8 9e ac fe ff       	call   c0000740 <strcpy>
c0015aa2:	83 c4 10             	add    esp,0x10
c0015aa5:	31 c0                	xor    eax,eax
c0015aa7:	83 c4 0c             	add    esp,0xc
c0015aaa:	31 d2                	xor    edx,edx
c0015aac:	5b                   	pop    ebx
c0015aad:	5e                   	pop    esi
c0015aae:	5f                   	pop    edi
c0015aaf:	5d                   	pop    ebp
c0015ab0:	c3                   	ret    

c0015ab1 <Sys::loadDLL(regs*)>:
c0015ab1:	56                   	push   esi
c0015ab2:	53                   	push   ebx
c0015ab3:	31 d2                	xor    edx,edx
c0015ab5:	51                   	push   ecx
c0015ab6:	b8 01 00 00 00       	mov    eax,0x1
c0015abb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015abf:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0015ac3:	0f 84 8c 00 00 00    	je     c0015b55 <Sys::loadDLL(regs*)+0xa4>
c0015ac9:	83 ec 0c             	sub    esp,0xc
c0015acc:	68 14 01 00 00       	push   0x114
c0015ad1:	e8 39 3f ff ff       	call   c0009a0f <malloc>
c0015ad6:	83 c4 0c             	add    esp,0xc
c0015ad9:	89 c3                	mov    ebx,eax
c0015adb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ae0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015ae3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015ae6:	53                   	push   ebx
c0015ae7:	e8 7e 77 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0015aec:	83 c4 10             	add    esp,0x10
c0015aef:	31 d2                	xor    edx,edx
c0015af1:	b8 02 00 00 00       	mov    eax,0x2
c0015af6:	85 db                	test   ebx,ebx
c0015af8:	74 5b                	je     c0015b55 <Sys::loadDLL(regs*)+0xa4>
c0015afa:	83 ec 0c             	sub    esp,0xc
c0015afd:	53                   	push   ebx
c0015afe:	e8 97 7a ff ff       	call   c000d59a <File::exists()>
c0015b03:	83 c4 10             	add    esp,0x10
c0015b06:	84 c0                	test   al,al
c0015b08:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b0a:	75 11                	jne    c0015b1d <Sys::loadDLL(regs*)+0x6c>
c0015b0c:	83 ec 0c             	sub    esp,0xc
c0015b0f:	53                   	push   ebx
c0015b10:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b13:	83 c4 10             	add    esp,0x10
c0015b16:	b8 03 00 00 00       	mov    eax,0x3
c0015b1b:	eb 36                	jmp    c0015b53 <Sys::loadDLL(regs*)+0xa2>
c0015b1d:	83 ec 0c             	sub    esp,0xc
c0015b20:	53                   	push   ebx
c0015b21:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b24:	58                   	pop    eax
c0015b25:	5a                   	pop    edx
c0015b26:	6a 00                	push   0x0
c0015b28:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015b2b:	e8 0a 22 00 00       	call   c0017d3a <Thr::loadDLL(char const*, bool)>
c0015b30:	83 c4 10             	add    esp,0x10
c0015b33:	89 c1                	mov    ecx,eax
c0015b35:	31 d2                	xor    edx,edx
c0015b37:	b8 04 00 00 00       	mov    eax,0x4
c0015b3c:	85 c9                	test   ecx,ecx
c0015b3e:	74 15                	je     c0015b55 <Sys::loadDLL(regs*)+0xa4>
c0015b40:	53                   	push   ebx
c0015b41:	53                   	push   ebx
c0015b42:	ff 35 48 80 02 c0    	push   DWORD PTR ds:0xc0028048
c0015b48:	51                   	push   ecx
c0015b49:	e8 1d 24 00 00       	call   c0017f6b <Thr::executeDLL(unsigned long, void*)>
c0015b4e:	83 c4 10             	add    esp,0x10
c0015b51:	31 c0                	xor    eax,eax
c0015b53:	31 d2                	xor    edx,edx
c0015b55:	59                   	pop    ecx
c0015b56:	5b                   	pop    ebx
c0015b57:	5e                   	pop    esi
c0015b58:	c3                   	ret    

c0015b59 <Sys::read(regs*)>:
c0015b59:	57                   	push   edi
c0015b5a:	56                   	push   esi
c0015b5b:	53                   	push   ebx
c0015b5c:	83 ec 10             	sub    esp,0x10
c0015b5f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015b63:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015b66:	83 f8 02             	cmp    eax,0x2
c0015b69:	77 10                	ja     c0015b7b <Sys::read(regs*)+0x22>
c0015b6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b70:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015b73:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015b79:	eb 0e                	jmp    c0015b89 <Sys::read(regs*)+0x30>
c0015b7b:	83 ec 0c             	sub    esp,0xc
c0015b7e:	50                   	push   eax
c0015b7f:	e8 ff 5c ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c0015b84:	83 c4 10             	add    esp,0x10
c0015b87:	89 c1                	mov    ecx,eax
c0015b89:	83 c8 ff             	or     eax,0xffffffff
c0015b8c:	85 c9                	test   ecx,ecx
c0015b8e:	89 c2                	mov    edx,eax
c0015b90:	74 28                	je     c0015bba <Sys::read(regs*)+0x61>
c0015b92:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015b9a:	31 ff                	xor    edi,edi
c0015b9c:	83 ec 0c             	sub    esp,0xc
c0015b9f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015ba1:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015ba5:	52                   	push   edx
c0015ba6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015ba9:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015bac:	57                   	push   edi
c0015bad:	56                   	push   esi
c0015bae:	51                   	push   ecx
c0015baf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015bb2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015bb6:	83 c4 20             	add    esp,0x20
c0015bb9:	99                   	cdq    
c0015bba:	83 c4 10             	add    esp,0x10
c0015bbd:	5b                   	pop    ebx
c0015bbe:	5e                   	pop    esi
c0015bbf:	5f                   	pop    edi
c0015bc0:	c3                   	ret    

c0015bc1 <Sys::sbrk(regs*)>:
c0015bc1:	56                   	push   esi
c0015bc2:	53                   	push   ebx
c0015bc3:	50                   	push   eax
c0015bc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bc9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015bcd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015bd0:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0015bd3:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0015bd9:	85 db                	test   ebx,ebx
c0015bdb:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0015bde:	74 02                	je     c0015be2 <Sys::sbrk(regs*)+0x21>
c0015be0:	79 06                	jns    c0015be8 <Sys::sbrk(regs*)+0x27>
c0015be2:	89 f0                	mov    eax,esi
c0015be4:	31 d2                	xor    edx,edx
c0015be6:	eb 2a                	jmp    c0015c12 <Sys::sbrk(regs*)+0x51>
c0015be8:	83 c8 ff             	or     eax,0xffffffff
c0015beb:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0015bf1:	89 c2                	mov    edx,eax
c0015bf3:	77 1d                	ja     c0015c12 <Sys::sbrk(regs*)+0x51>
c0015bf5:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0015bfb:	50                   	push   eax
c0015bfc:	c1 ea 0c             	shr    edx,0xc
c0015bff:	68 07 0c 00 00       	push   0xc07
c0015c04:	52                   	push   edx
c0015c05:	51                   	push   ecx
c0015c06:	e8 77 65 ff ff       	call   c000c182 <VAS::allocatePages(int, int)>
c0015c0b:	89 f0                	mov    eax,esi
c0015c0d:	31 d2                	xor    edx,edx
c0015c0f:	83 c4 10             	add    esp,0x10
c0015c12:	59                   	pop    ecx
c0015c13:	5b                   	pop    ebx
c0015c14:	5e                   	pop    esi
c0015c15:	c3                   	ret    

c0015c16 <Sys::setCwd(regs*)>:
c0015c16:	83 ec 14             	sub    esp,0x14
c0015c19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015c1d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015c20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c25:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015c28:	e8 0c 7a ff ff       	call   c000d639 <Fs::setcwd(Process*, char*)>
c0015c2d:	83 c4 1c             	add    esp,0x1c
c0015c30:	99                   	cdq    
c0015c31:	c3                   	ret    

c0015c32 <Sys::setTime(regs*)>:
c0015c32:	55                   	push   ebp
c0015c33:	31 c9                	xor    ecx,ecx
c0015c35:	57                   	push   edi
c0015c36:	bd 0c 00 00 00       	mov    ebp,0xc
c0015c3b:	56                   	push   esi
c0015c3c:	53                   	push   ebx
c0015c3d:	31 db                	xor    ebx,ebx
c0015c3f:	83 ec 10             	sub    esp,0x10
c0015c42:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015c46:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015c49:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015c4c:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0015c4f:	89 c2                	mov    edx,eax
c0015c51:	66 81 ef 6c 07       	sub    di,0x76c
c0015c56:	83 e2 1f             	and    edx,0x1f
c0015c59:	c1 e7 10             	shl    edi,0x10
c0015c5c:	42                   	inc    edx
c0015c5d:	c1 e8 05             	shr    eax,0x5
c0015c60:	88 d1                	mov    cl,dl
c0015c62:	31 d2                	xor    edx,edx
c0015c64:	f7 f5                	div    ebp
c0015c66:	89 dd                	mov    ebp,ebx
c0015c68:	88 d5                	mov    ch,dl
c0015c6a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0015c70:	0f b7 c1             	movzx  eax,cx
c0015c73:	31 d2                	xor    edx,edx
c0015c75:	09 f8                	or     eax,edi
c0015c77:	bf 3c 00 00 00       	mov    edi,0x3c
c0015c7c:	89 c1                	mov    ecx,eax
c0015c7e:	89 f0                	mov    eax,esi
c0015c80:	f7 f7                	div    edi
c0015c82:	c1 e2 10             	shl    edx,0x10
c0015c85:	09 d5                	or     ebp,edx
c0015c87:	31 d2                	xor    edx,edx
c0015c89:	89 eb                	mov    ebx,ebp
c0015c8b:	f7 f7                	div    edi
c0015c8d:	bf 10 0e 00 00       	mov    edi,0xe10
c0015c92:	88 d7                	mov    bh,dl
c0015c94:	89 f0                	mov    eax,esi
c0015c96:	31 d2                	xor    edx,edx
c0015c98:	f7 f7                	div    edi
c0015c9a:	bf 18 00 00 00       	mov    edi,0x18
c0015c9f:	31 d2                	xor    edx,edx
c0015ca1:	f7 f7                	div    edi
c0015ca3:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0015ca8:	88 d3                	mov    bl,dl
c0015caa:	53                   	push   ebx
c0015cab:	51                   	push   ecx
c0015cac:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0015cb2:	e8 67 82 ff ff       	call   c000df1e <Clock::setTimeInDatetimeLocal(datetime_t)>
c0015cb7:	83 c4 1c             	add    esp,0x1c
c0015cba:	83 f0 01             	xor    eax,0x1
c0015cbd:	5b                   	pop    ebx
c0015cbe:	0f b6 c0             	movzx  eax,al
c0015cc1:	5e                   	pop    esi
c0015cc2:	31 d2                	xor    edx,edx
c0015cc4:	5f                   	pop    edi
c0015cc5:	5d                   	pop    ebp
c0015cc6:	c3                   	ret    

c0015cc7 <Sys::timezone(regs*)>:
c0015cc7:	53                   	push   ebx
c0015cc8:	83 ec 08             	sub    esp,0x8
c0015ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ccf:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0015cd3:	75 17                	jne    c0015cec <Sys::timezone(regs*)+0x25>
c0015cd5:	83 ec 0c             	sub    esp,0xc
c0015cd8:	68 b5 5d 02 c0       	push   0xc0025db5
c0015cdd:	e8 1d 70 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0015ce2:	83 c8 ff             	or     eax,0xffffffff
c0015ce5:	83 c4 10             	add    esp,0x10
c0015ce8:	89 c2                	mov    edx,eax
c0015cea:	eb 20                	jmp    c0015d0c <Sys::timezone(regs*)+0x45>
c0015cec:	83 ec 0c             	sub    esp,0xc
c0015cef:	68 ca 5d 02 c0       	push   0xc0025dca
c0015cf4:	e8 06 70 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0015cf9:	58                   	pop    eax
c0015cfa:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015cfd:	e8 7e 7f ff ff       	call   c000dc80 <User::loadClockSettings(int)>
c0015d02:	83 c4 10             	add    esp,0x10
c0015d05:	b8 01 00 00 00       	mov    eax,0x1
c0015d0a:	31 d2                	xor    edx,edx
c0015d0c:	83 c4 08             	add    esp,0x8
c0015d0f:	5b                   	pop    ebx
c0015d10:	c3                   	ret    

c0015d11 <Sys::write(regs*)>:
c0015d11:	57                   	push   edi
c0015d12:	56                   	push   esi
c0015d13:	53                   	push   ebx
c0015d14:	83 ec 10             	sub    esp,0x10
c0015d17:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015d1b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015d1e:	83 f8 02             	cmp    eax,0x2
c0015d21:	77 10                	ja     c0015d33 <Sys::write(regs*)+0x22>
c0015d23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d28:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015d2b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015d31:	eb 0e                	jmp    c0015d41 <Sys::write(regs*)+0x30>
c0015d33:	83 ec 0c             	sub    esp,0xc
c0015d36:	50                   	push   eax
c0015d37:	e8 47 5b ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c0015d3c:	83 c4 10             	add    esp,0x10
c0015d3f:	89 c1                	mov    ecx,eax
c0015d41:	83 c8 ff             	or     eax,0xffffffff
c0015d44:	85 c9                	test   ecx,ecx
c0015d46:	89 c2                	mov    edx,eax
c0015d48:	74 28                	je     c0015d72 <Sys::write(regs*)+0x61>
c0015d4a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015d52:	31 ff                	xor    edi,edi
c0015d54:	83 ec 0c             	sub    esp,0xc
c0015d57:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015d59:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015d5d:	52                   	push   edx
c0015d5e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015d61:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015d64:	57                   	push   edi
c0015d65:	56                   	push   esi
c0015d66:	51                   	push   ecx
c0015d67:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015d6a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015d6e:	83 c4 20             	add    esp,0x20
c0015d71:	99                   	cdq    
c0015d72:	83 c4 10             	add    esp,0x10
c0015d75:	5b                   	pop    ebx
c0015d76:	5e                   	pop    esi
c0015d77:	5f                   	pop    edi
c0015d78:	c3                   	ret    

c0015d79 <Sys::wsbe(regs*)>:
c0015d79:	57                   	push   edi
c0015d7a:	b9 0b 00 00 00       	mov    ecx,0xb
c0015d7f:	56                   	push   esi
c0015d80:	be 09 5e 02 c0       	mov    esi,0xc0025e09
c0015d85:	53                   	push   ebx
c0015d86:	83 ec 30             	sub    esp,0x30
c0015d89:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015d8d:	fc                   	cld    
c0015d8e:	83 ec 0c             	sub    esp,0xc
c0015d91:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015d93:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015d97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d9c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015d9f:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0015da5:	8b 06                	mov    eax,DWORD PTR [esi]
c0015da7:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0015daa:	57                   	push   edi
c0015dab:	e8 f0 a8 fe ff       	call   c00006a0 <strlen>
c0015db0:	5a                   	pop    edx
c0015db1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015db5:	52                   	push   edx
c0015db6:	31 d2                	xor    edx,edx
c0015db8:	57                   	push   edi
c0015db9:	52                   	push   edx
c0015dba:	50                   	push   eax
c0015dbb:	56                   	push   esi
c0015dbc:	ff d3                	call   ebx
c0015dbe:	83 c4 14             	add    esp,0x14
c0015dc1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015dc5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015dc8:	e8 6b 32 00 00       	call   c0019038 <terminateTask(int)>
c0015dcd:	83 c4 40             	add    esp,0x40
c0015dd0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015dd5:	5b                   	pop    ebx
c0015dd6:	31 d2                	xor    edx,edx
c0015dd8:	5e                   	pop    esi
c0015dd9:	5f                   	pop    edi
c0015dda:	c3                   	ret    

c0015ddb <Sys::yield(regs*)>:
c0015ddb:	83 ec 0c             	sub    esp,0xc
c0015dde:	fa                   	cli    
c0015ddf:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c0015de5:	e8 36 29 00 00       	call   c0018720 <schedule()>
c0015dea:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c0015def:	48                   	dec    eax
c0015df0:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c0015df5:	75 01                	jne    c0015df8 <Sys::yield(regs*)+0x1d>
c0015df7:	fb                   	sti    
c0015df8:	8b 15 6c 86 02 c0    	mov    edx,DWORD PTR ds:0xc002866c
c0015dfe:	83 c4 0c             	add    esp,0xc
c0015e01:	89 d0                	mov    eax,edx
c0015e03:	c1 ea 11             	shr    edx,0x11
c0015e06:	c1 e0 07             	shl    eax,0x7
c0015e09:	25 80 30 0f 00       	and    eax,0xf3080
c0015e0e:	31 d0                	xor    eax,edx
c0015e10:	31 d2                	xor    edx,edx
c0015e12:	c3                   	ret    

c0015e13 <sysCallSeekDir(regs*)>:
c0015e13:	31 c0                	xor    eax,eax
c0015e15:	31 d2                	xor    edx,edx
c0015e17:	c3                   	ret    

c0015e18 <sysCallTellDir(regs*)>:
c0015e18:	31 c0                	xor    eax,eax
c0015e1a:	31 d2                	xor    edx,edx
c0015e1c:	c3                   	ret    

c0015e1d <sysCallVerify(regs*)>:
c0015e1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e21:	31 d2                	xor    edx,edx
c0015e23:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e26:	c3                   	ret    

c0015e27 <sysCallGetArgc(regs*)>:
c0015e27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e2c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015e2f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0015e35:	99                   	cdq    
c0015e36:	c3                   	ret    

c0015e37 <sysFormatDisk(regs*)>:
c0015e37:	56                   	push   esi
c0015e38:	53                   	push   ebx
c0015e39:	53                   	push   ebx
c0015e3a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e3e:	8b 1d 74 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028174
c0015e44:	eb 25                	jmp    c0015e6b <sysFormatDisk(regs*)+0x34>
c0015e46:	83 ec 0c             	sub    esp,0xc
c0015e49:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015e4c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015e4e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015e51:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015e54:	50                   	push   eax
c0015e55:	ff 34 85 00 86 02 c0 	push   DWORD PTR [eax*4-0x3ffd7a00]
c0015e5c:	53                   	push   ebx
c0015e5d:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0015e60:	83 c4 20             	add    esp,0x20
c0015e63:	83 f8 08             	cmp    eax,0x8
c0015e66:	75 12                	jne    c0015e7a <sysFormatDisk(regs*)+0x43>
c0015e68:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015e6b:	85 db                	test   ebx,ebx
c0015e6d:	75 d7                	jne    c0015e46 <sysFormatDisk(regs*)+0xf>
c0015e6f:	59                   	pop    ecx
c0015e70:	b8 03 00 00 00       	mov    eax,0x3
c0015e75:	31 d2                	xor    edx,edx
c0015e77:	5b                   	pop    ebx
c0015e78:	5e                   	pop    esi
c0015e79:	c3                   	ret    
c0015e7a:	85 c0                	test   eax,eax
c0015e7c:	74 1b                	je     c0015e99 <sysFormatDisk(regs*)+0x62>
c0015e7e:	83 f8 09             	cmp    eax,0x9
c0015e81:	74 0b                	je     c0015e8e <sysFormatDisk(regs*)+0x57>
c0015e83:	59                   	pop    ecx
c0015e84:	b8 02 00 00 00       	mov    eax,0x2
c0015e89:	31 d2                	xor    edx,edx
c0015e8b:	5b                   	pop    ebx
c0015e8c:	5e                   	pop    esi
c0015e8d:	c3                   	ret    
c0015e8e:	59                   	pop    ecx
c0015e8f:	b8 01 00 00 00       	mov    eax,0x1
c0015e94:	31 d2                	xor    edx,edx
c0015e96:	5b                   	pop    ebx
c0015e97:	5e                   	pop    esi
c0015e98:	c3                   	ret    
c0015e99:	59                   	pop    ecx
c0015e9a:	31 c0                	xor    eax,eax
c0015e9c:	31 d2                	xor    edx,edx
c0015e9e:	5b                   	pop    ebx
c0015e9f:	5e                   	pop    esi
c0015ea0:	c3                   	ret    

c0015ea1 <sysSetDiskVolumeLabel(regs*)>:
c0015ea1:	56                   	push   esi
c0015ea2:	53                   	push   ebx
c0015ea3:	53                   	push   ebx
c0015ea4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ea8:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015eab:	83 f8 19             	cmp    eax,0x19
c0015eae:	77 2d                	ja     c0015edd <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015eb0:	8b 0c 85 00 86 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7a00]
c0015eb7:	85 c9                	test   ecx,ecx
c0015eb9:	74 22                	je     c0015edd <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015ebb:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0015ebe:	85 db                	test   ebx,ebx
c0015ec0:	74 1b                	je     c0015edd <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015ec2:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0015ec8:	85 d2                	test   edx,edx
c0015eca:	74 11                	je     c0015edd <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015ecc:	8b 32                	mov    esi,DWORD PTR [edx]
c0015ece:	53                   	push   ebx
c0015ecf:	50                   	push   eax
c0015ed0:	51                   	push   ecx
c0015ed1:	52                   	push   edx
c0015ed2:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015ed5:	83 c4 10             	add    esp,0x10
c0015ed8:	99                   	cdq    
c0015ed9:	59                   	pop    ecx
c0015eda:	5b                   	pop    ebx
c0015edb:	5e                   	pop    esi
c0015edc:	c3                   	ret    
c0015edd:	59                   	pop    ecx
c0015ede:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015ee3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ee8:	5b                   	pop    ebx
c0015ee9:	5e                   	pop    esi
c0015eea:	c3                   	ret    

c0015eeb <sysGetDiskVolumeLabel(regs*)>:
c0015eeb:	57                   	push   edi
c0015eec:	56                   	push   esi
c0015eed:	53                   	push   ebx
c0015eee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ef2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015ef5:	83 fa 19             	cmp    edx,0x19
c0015ef8:	77 38                	ja     c0015f32 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015efa:	8b 0c 95 00 86 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7a00]
c0015f01:	85 c9                	test   ecx,ecx
c0015f03:	74 2d                	je     c0015f32 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015f05:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015f08:	85 db                	test   ebx,ebx
c0015f0a:	74 26                	je     c0015f32 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015f0c:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0015f0f:	85 f6                	test   esi,esi
c0015f11:	74 1f                	je     c0015f32 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015f13:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0015f19:	85 c0                	test   eax,eax
c0015f1b:	74 15                	je     c0015f32 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015f1d:	83 ec 0c             	sub    esp,0xc
c0015f20:	8b 38                	mov    edi,DWORD PTR [eax]
c0015f22:	56                   	push   esi
c0015f23:	53                   	push   ebx
c0015f24:	52                   	push   edx
c0015f25:	51                   	push   ecx
c0015f26:	50                   	push   eax
c0015f27:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0015f2a:	83 c4 20             	add    esp,0x20
c0015f2d:	99                   	cdq    
c0015f2e:	5b                   	pop    ebx
c0015f2f:	5e                   	pop    esi
c0015f30:	5f                   	pop    edi
c0015f31:	c3                   	ret    
c0015f32:	5b                   	pop    ebx
c0015f33:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015f38:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015f3d:	5e                   	pop    esi
c0015f3e:	5f                   	pop    edi
c0015f3f:	c3                   	ret    

c0015f40 <sysShutdown(regs*)>:
c0015f40:	83 ec 0c             	sub    esp,0xc
c0015f43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f47:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015f4a:	85 c0                	test   eax,eax
c0015f4c:	74 18                	je     c0015f66 <sysShutdown(regs*)+0x26>
c0015f4e:	83 f8 01             	cmp    eax,0x1
c0015f51:	74 38                	je     c0015f8b <sysShutdown(regs*)+0x4b>
c0015f53:	83 f8 02             	cmp    eax,0x2
c0015f56:	74 24                	je     c0015f7c <sysShutdown(regs*)+0x3c>
c0015f58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f5d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015f62:	83 c4 0c             	add    esp,0xc
c0015f65:	c3                   	ret    
c0015f66:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0015f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0015f6d:	6a 00                	push   0x0
c0015f6f:	6a 00                	push   0x0
c0015f71:	6a 00                	push   0x0
c0015f73:	50                   	push   eax
c0015f74:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015f77:	83 c4 10             	add    esp,0x10
c0015f7a:	eb dc                	jmp    c0015f58 <sysShutdown(regs*)+0x18>
c0015f7c:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0015f81:	8b 10                	mov    edx,DWORD PTR [eax]
c0015f83:	6a 00                	push   0x0
c0015f85:	6a 00                	push   0x0
c0015f87:	6a 01                	push   0x1
c0015f89:	eb e8                	jmp    c0015f73 <sysShutdown(regs*)+0x33>
c0015f8b:	a1 80 86 02 c0       	mov    eax,ds:0xc0028680
c0015f90:	85 c0                	test   eax,eax
c0015f92:	74 02                	je     c0015f96 <sysShutdown(regs*)+0x56>
c0015f94:	ff d0                	call   eax
c0015f96:	31 c0                	xor    eax,eax
c0015f98:	31 d2                	xor    edx,edx
c0015f9a:	83 c4 0c             	add    esp,0xc
c0015f9d:	c3                   	ret    

c0015f9e <sysCallRealpath(regs*)>:
c0015f9e:	83 ec 0c             	sub    esp,0xc
c0015fa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fa5:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015fa8:	85 d2                	test   edx,edx
c0015faa:	74 07                	je     c0015fb3 <sysCallRealpath(regs*)+0x15>
c0015fac:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015faf:	85 c0                	test   eax,eax
c0015fb1:	75 0b                	jne    c0015fbe <sysCallRealpath(regs*)+0x20>
c0015fb3:	b8 01 00 00 00       	mov    eax,0x1
c0015fb8:	31 d2                	xor    edx,edx
c0015fba:	83 c4 0c             	add    esp,0xc
c0015fbd:	c3                   	ret    
c0015fbe:	51                   	push   ecx
c0015fbf:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015fc5:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015fc8:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0015fce:	51                   	push   ecx
c0015fcf:	52                   	push   edx
c0015fd0:	50                   	push   eax
c0015fd1:	e8 ea 70 ff ff       	call   c000d0c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0015fd6:	83 c4 10             	add    esp,0x10
c0015fd9:	31 c0                	xor    eax,eax
c0015fdb:	31 d2                	xor    edx,edx
c0015fdd:	83 c4 0c             	add    esp,0xc
c0015fe0:	c3                   	ret    

c0015fe1 <sysCallReadDir(regs*)>:
c0015fe1:	53                   	push   ebx
c0015fe2:	83 ec 18             	sub    esp,0x18
c0015fe5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015fe9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015fec:	83 f8 02             	cmp    eax,0x2
c0015fef:	76 60                	jbe    c0016051 <sysCallReadDir(regs*)+0x70>
c0015ff1:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0015ff8:	77 48                	ja     c0016042 <sysCallReadDir(regs*)+0x61>
c0015ffa:	83 ec 0c             	sub    esp,0xc
c0015ffd:	50                   	push   eax
c0015ffe:	e8 80 58 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c0016003:	83 c4 10             	add    esp,0x10
c0016006:	85 c0                	test   eax,eax
c0016008:	74 38                	je     c0016042 <sysCallReadDir(regs*)+0x61>
c001600a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016012:	83 ec 0c             	sub    esp,0xc
c0016015:	8b 10                	mov    edx,DWORD PTR [eax]
c0016017:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001601b:	51                   	push   ecx
c001601c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001601f:	6a 00                	push   0x0
c0016021:	68 10 01 00 00       	push   0x110
c0016026:	50                   	push   eax
c0016027:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001602a:	83 c4 20             	add    esp,0x20
c001602d:	85 c0                	test   eax,eax
c001602f:	74 29                	je     c001605a <sysCallReadDir(regs*)+0x79>
c0016031:	83 f8 07             	cmp    eax,0x7
c0016034:	74 1b                	je     c0016051 <sysCallReadDir(regs*)+0x70>
c0016036:	b8 02 00 00 00       	mov    eax,0x2
c001603b:	31 d2                	xor    edx,edx
c001603d:	83 c4 18             	add    esp,0x18
c0016040:	5b                   	pop    ebx
c0016041:	c3                   	ret    
c0016042:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016047:	ba ff ff ff ff       	mov    edx,0xffffffff
c001604c:	83 c4 18             	add    esp,0x18
c001604f:	5b                   	pop    ebx
c0016050:	c3                   	ret    
c0016051:	b8 01 00 00 00       	mov    eax,0x1
c0016056:	31 d2                	xor    edx,edx
c0016058:	eb e3                	jmp    c001603d <sysCallReadDir(regs*)+0x5c>
c001605a:	31 c0                	xor    eax,eax
c001605c:	31 d2                	xor    edx,edx
c001605e:	eb dd                	jmp    c001603d <sysCallReadDir(regs*)+0x5c>

c0016060 <sysCallIsATTY(regs*)>:
c0016060:	83 ec 0c             	sub    esp,0xc
c0016063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016067:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001606a:	83 f8 02             	cmp    eax,0x2
c001606d:	76 07                	jbe    c0016076 <sysCallIsATTY(regs*)+0x16>
c001606f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016074:	75 26                	jne    c001609c <sysCallIsATTY(regs*)+0x3c>
c0016076:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001607b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001607e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016084:	85 c0                	test   eax,eax
c0016086:	74 24                	je     c00160ac <sysCallIsATTY(regs*)+0x4c>
c0016088:	83 ec 0c             	sub    esp,0xc
c001608b:	8b 10                	mov    edx,DWORD PTR [eax]
c001608d:	50                   	push   eax
c001608e:	ff 12                	call   DWORD PTR [edx]
c0016090:	31 d2                	xor    edx,edx
c0016092:	0f b6 c0             	movzx  eax,al
c0016095:	83 c4 10             	add    esp,0x10
c0016098:	83 c4 0c             	add    esp,0xc
c001609b:	c3                   	ret    
c001609c:	83 ec 0c             	sub    esp,0xc
c001609f:	50                   	push   eax
c00160a0:	e8 de 57 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c00160a5:	83 c4 10             	add    esp,0x10
c00160a8:	85 c0                	test   eax,eax
c00160aa:	75 dc                	jne    c0016088 <sysCallIsATTY(regs*)+0x28>
c00160ac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00160b1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00160b6:	83 c4 0c             	add    esp,0xc
c00160b9:	c3                   	ret    

c00160ba <sysCallSeek(regs*)>:
c00160ba:	53                   	push   ebx
c00160bb:	83 ec 08             	sub    esp,0x8
c00160be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00160c2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00160c5:	8d 50 fd             	lea    edx,[eax-0x3]
c00160c8:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00160ce:	77 32                	ja     c0016102 <sysCallSeek(regs*)+0x48>
c00160d0:	83 ec 0c             	sub    esp,0xc
c00160d3:	50                   	push   eax
c00160d4:	e8 aa 57 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c00160d9:	83 c4 0c             	add    esp,0xc
c00160dc:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00160df:	31 db                	xor    ebx,ebx
c00160e1:	53                   	push   ebx
c00160e2:	51                   	push   ecx
c00160e3:	50                   	push   eax
c00160e4:	e8 01 73 ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c00160e9:	83 c4 10             	add    esp,0x10
c00160ec:	85 c0                	test   eax,eax
c00160ee:	0f 95 c0             	setne  al
c00160f1:	31 d2                	xor    edx,edx
c00160f3:	0f b6 c0             	movzx  eax,al
c00160f6:	f7 d8                	neg    eax
c00160f8:	83 d2 00             	adc    edx,0x0
c00160fb:	83 c4 08             	add    esp,0x8
c00160fe:	f7 da                	neg    edx
c0016100:	5b                   	pop    ebx
c0016101:	c3                   	ret    
c0016102:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016107:	ba ff ff ff ff       	mov    edx,0xffffffff
c001610c:	83 c4 08             	add    esp,0x8
c001610f:	5b                   	pop    ebx
c0016110:	c3                   	ret    

c0016111 <sysCallTell(regs*)>:
c0016111:	53                   	push   ebx
c0016112:	83 ec 08             	sub    esp,0x8
c0016115:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016119:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001611c:	83 f8 02             	cmp    eax,0x2
c001611f:	76 4d                	jbe    c001616e <sysCallTell(regs*)+0x5d>
c0016121:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016126:	76 19                	jbe    c0016141 <sysCallTell(regs*)+0x30>
c0016128:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001612b:	31 d2                	xor    edx,edx
c001612d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016133:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001613a:	31 c0                	xor    eax,eax
c001613c:	83 c4 08             	add    esp,0x8
c001613f:	5b                   	pop    ebx
c0016140:	c3                   	ret    
c0016141:	83 ec 0c             	sub    esp,0xc
c0016144:	50                   	push   eax
c0016145:	e8 39 57 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c001614a:	5a                   	pop    edx
c001614b:	59                   	pop    ecx
c001614c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001614f:	50                   	push   eax
c0016150:	e8 eb 72 ff ff       	call   c000d440 <File::tell(unsigned long long*)>
c0016155:	83 c4 10             	add    esp,0x10
c0016158:	85 c0                	test   eax,eax
c001615a:	0f 95 c0             	setne  al
c001615d:	31 d2                	xor    edx,edx
c001615f:	0f b6 c0             	movzx  eax,al
c0016162:	f7 d8                	neg    eax
c0016164:	83 d2 00             	adc    edx,0x0
c0016167:	83 c4 08             	add    esp,0x8
c001616a:	f7 da                	neg    edx
c001616c:	5b                   	pop    ebx
c001616d:	c3                   	ret    
c001616e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016173:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016178:	83 c4 08             	add    esp,0x8
c001617b:	5b                   	pop    ebx
c001617c:	c3                   	ret    

c001617d <sysCallSize(regs*)>:
c001617d:	53                   	push   ebx
c001617e:	83 ec 18             	sub    esp,0x18
c0016181:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016185:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016188:	83 f8 02             	cmp    eax,0x2
c001618b:	76 53                	jbe    c00161e0 <sysCallSize(regs*)+0x63>
c001618d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016192:	76 19                	jbe    c00161ad <sysCallSize(regs*)+0x30>
c0016194:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016197:	31 d2                	xor    edx,edx
c0016199:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001619f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00161a6:	31 c0                	xor    eax,eax
c00161a8:	83 c4 18             	add    esp,0x18
c00161ab:	5b                   	pop    ebx
c00161ac:	c3                   	ret    
c00161ad:	83 ec 0c             	sub    esp,0xc
c00161b0:	50                   	push   eax
c00161b1:	e8 cd 56 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c00161b6:	83 c4 0c             	add    esp,0xc
c00161b9:	8d 54 24 13          	lea    edx,[esp+0x13]
c00161bd:	52                   	push   edx
c00161be:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00161c1:	50                   	push   eax
c00161c2:	e8 11 74 ff ff       	call   c000d5d8 <File::stat(unsigned long long*, bool*)>
c00161c7:	83 c4 10             	add    esp,0x10
c00161ca:	85 c0                	test   eax,eax
c00161cc:	0f 95 c0             	setne  al
c00161cf:	31 d2                	xor    edx,edx
c00161d1:	0f b6 c0             	movzx  eax,al
c00161d4:	f7 d8                	neg    eax
c00161d6:	83 d2 00             	adc    edx,0x0
c00161d9:	83 c4 18             	add    esp,0x18
c00161dc:	f7 da                	neg    edx
c00161de:	5b                   	pop    ebx
c00161df:	c3                   	ret    
c00161e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00161e5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00161ea:	83 c4 18             	add    esp,0x18
c00161ed:	5b                   	pop    ebx
c00161ee:	c3                   	ret    

c00161ef <sysCallSizeFromFilename(regs*)>:
c00161ef:	57                   	push   edi
c00161f0:	56                   	push   esi
c00161f1:	53                   	push   ebx
c00161f2:	83 ec 20             	sub    esp,0x20
c00161f5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00161f9:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00161fc:	83 fb 02             	cmp    ebx,0x2
c00161ff:	0f 86 88 00 00 00    	jbe    c001628d <sysCallSizeFromFilename(regs*)+0x9e>
c0016205:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001620b:	76 1b                	jbe    c0016228 <sysCallSizeFromFilename(regs*)+0x39>
c001620d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016210:	31 d2                	xor    edx,edx
c0016212:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016218:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001621f:	83 c4 20             	add    esp,0x20
c0016222:	31 c0                	xor    eax,eax
c0016224:	5b                   	pop    ebx
c0016225:	5e                   	pop    esi
c0016226:	5f                   	pop    edi
c0016227:	c3                   	ret    
c0016228:	83 ec 0c             	sub    esp,0xc
c001622b:	68 14 01 00 00       	push   0x114
c0016230:	e8 da 37 ff ff       	call   c0009a0f <malloc>
c0016235:	83 c4 0c             	add    esp,0xc
c0016238:	89 c7                	mov    edi,eax
c001623a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001623f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016242:	53                   	push   ebx
c0016243:	57                   	push   edi
c0016244:	e8 21 70 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0016249:	83 c4 0c             	add    esp,0xc
c001624c:	8d 44 24 23          	lea    eax,[esp+0x23]
c0016250:	50                   	push   eax
c0016251:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0016254:	57                   	push   edi
c0016255:	e8 7e 73 ff ff       	call   c000d5d8 <File::stat(unsigned long long*, bool*)>
c001625a:	83 c4 10             	add    esp,0x10
c001625d:	85 ff                	test   edi,edi
c001625f:	74 14                	je     c0016275 <sysCallSizeFromFilename(regs*)+0x86>
c0016261:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016265:	8b 17                	mov    edx,DWORD PTR [edi]
c0016267:	83 ec 0c             	sub    esp,0xc
c001626a:	57                   	push   edi
c001626b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001626e:	83 c4 10             	add    esp,0x10
c0016271:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016275:	85 c0                	test   eax,eax
c0016277:	0f 95 c0             	setne  al
c001627a:	31 d2                	xor    edx,edx
c001627c:	0f b6 c0             	movzx  eax,al
c001627f:	f7 d8                	neg    eax
c0016281:	83 d2 00             	adc    edx,0x0
c0016284:	83 c4 20             	add    esp,0x20
c0016287:	f7 da                	neg    edx
c0016289:	5b                   	pop    ebx
c001628a:	5e                   	pop    esi
c001628b:	5f                   	pop    edi
c001628c:	c3                   	ret    
c001628d:	83 c4 20             	add    esp,0x20
c0016290:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016295:	5b                   	pop    ebx
c0016296:	ba ff ff ff ff       	mov    edx,0xffffffff
c001629b:	5e                   	pop    esi
c001629c:	5f                   	pop    edi
c001629d:	c3                   	ret    

c001629e <sysCallClose(regs*)>:
c001629e:	53                   	push   ebx
c001629f:	83 ec 08             	sub    esp,0x8
c00162a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162a6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00162a9:	83 f8 02             	cmp    eax,0x2
c00162ac:	76 41                	jbe    c00162ef <sysCallClose(regs*)+0x51>
c00162ae:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00162b4:	83 fa 01             	cmp    edx,0x1
c00162b7:	76 2d                	jbe    c00162e6 <sysCallClose(regs*)+0x48>
c00162b9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00162be:	77 2f                	ja     c00162ef <sysCallClose(regs*)+0x51>
c00162c0:	83 ec 0c             	sub    esp,0xc
c00162c3:	50                   	push   eax
c00162c4:	e8 ba 55 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c00162c9:	89 c3                	mov    ebx,eax
c00162cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00162ce:	e8 b7 70 ff ff       	call   c000d38a <File::close()>
c00162d3:	83 c4 10             	add    esp,0x10
c00162d6:	85 db                	test   ebx,ebx
c00162d8:	74 0c                	je     c00162e6 <sysCallClose(regs*)+0x48>
c00162da:	83 ec 0c             	sub    esp,0xc
c00162dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00162df:	53                   	push   ebx
c00162e0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00162e3:	83 c4 10             	add    esp,0x10
c00162e6:	31 c0                	xor    eax,eax
c00162e8:	31 d2                	xor    edx,edx
c00162ea:	83 c4 08             	add    esp,0x8
c00162ed:	5b                   	pop    ebx
c00162ee:	c3                   	ret    
c00162ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00162f4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00162f9:	83 c4 08             	add    esp,0x8
c00162fc:	5b                   	pop    ebx
c00162fd:	c3                   	ret    

c00162fe <sysCallOpenDir(regs*)>:
c00162fe:	56                   	push   esi
c00162ff:	53                   	push   ebx
c0016300:	53                   	push   ebx
c0016301:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016305:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0016308:	85 f6                	test   esi,esi
c001630a:	74 59                	je     c0016365 <sysCallOpenDir(regs*)+0x67>
c001630c:	83 ec 0c             	sub    esp,0xc
c001630f:	68 14 01 00 00       	push   0x114
c0016314:	e8 f6 36 ff ff       	call   c0009a0f <malloc>
c0016319:	83 c4 0c             	add    esp,0xc
c001631c:	89 c6                	mov    esi,eax
c001631e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016323:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016326:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016329:	56                   	push   esi
c001632a:	e8 7f 74 ff ff       	call   c000d7ae <Directory::Directory(char const*, Process*)>
c001632f:	83 c4 10             	add    esp,0x10
c0016332:	85 f6                	test   esi,esi
c0016334:	74 2f                	je     c0016365 <sysCallOpenDir(regs*)+0x67>
c0016336:	83 ec 0c             	sub    esp,0xc
c0016339:	56                   	push   esi
c001633a:	e8 31 75 ff ff       	call   c000d870 <Directory::open()>
c001633f:	83 c4 10             	add    esp,0x10
c0016342:	85 c0                	test   eax,eax
c0016344:	75 1f                	jne    c0016365 <sysCallOpenDir(regs*)+0x67>
c0016346:	83 ec 0c             	sub    esp,0xc
c0016349:	56                   	push   esi
c001634a:	e8 3f 52 ff ff       	call   c000b58e <UnixFile::getFileDescriptor()>
c001634f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016352:	83 c4 10             	add    esp,0x10
c0016355:	89 02                	mov    DWORD PTR [edx],eax
c0016357:	c1 f8 1f             	sar    eax,0x1f
c001635a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001635d:	31 c0                	xor    eax,eax
c001635f:	59                   	pop    ecx
c0016360:	31 d2                	xor    edx,edx
c0016362:	5b                   	pop    ebx
c0016363:	5e                   	pop    esi
c0016364:	c3                   	ret    
c0016365:	59                   	pop    ecx
c0016366:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001636b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016370:	5b                   	pop    ebx
c0016371:	5e                   	pop    esi
c0016372:	c3                   	ret    

c0016373 <sysCallCloseDir(regs*)>:
c0016373:	53                   	push   ebx
c0016374:	83 ec 08             	sub    esp,0x8
c0016377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001637b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001637e:	8d 50 fd             	lea    edx,[eax-0x3]
c0016381:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0016387:	77 2f                	ja     c00163b8 <sysCallCloseDir(regs*)+0x45>
c0016389:	83 ec 0c             	sub    esp,0xc
c001638c:	50                   	push   eax
c001638d:	e8 f1 54 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c0016392:	89 c3                	mov    ebx,eax
c0016394:	89 04 24             	mov    DWORD PTR [esp],eax
c0016397:	e8 30 75 ff ff       	call   c000d8cc <Directory::close()>
c001639c:	83 c4 10             	add    esp,0x10
c001639f:	85 db                	test   ebx,ebx
c00163a1:	74 0c                	je     c00163af <sysCallCloseDir(regs*)+0x3c>
c00163a3:	83 ec 0c             	sub    esp,0xc
c00163a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00163a8:	53                   	push   ebx
c00163a9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00163ac:	83 c4 10             	add    esp,0x10
c00163af:	31 c0                	xor    eax,eax
c00163b1:	31 d2                	xor    edx,edx
c00163b3:	83 c4 08             	add    esp,0x8
c00163b6:	5b                   	pop    ebx
c00163b7:	c3                   	ret    
c00163b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00163bd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00163c2:	83 c4 08             	add    esp,0x8
c00163c5:	5b                   	pop    ebx
c00163c6:	c3                   	ret    

c00163c7 <sysCallMakeDir(regs*)>:
c00163c7:	56                   	push   esi
c00163c8:	53                   	push   ebx
c00163c9:	83 ec 10             	sub    esp,0x10
c00163cc:	68 14 01 00 00       	push   0x114
c00163d1:	e8 39 36 ff ff       	call   c0009a0f <malloc>
c00163d6:	83 c4 0c             	add    esp,0xc
c00163d9:	89 c3                	mov    ebx,eax
c00163db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163e0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00163e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00163e7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00163ea:	53                   	push   ebx
c00163eb:	e8 be 73 ff ff       	call   c000d7ae <Directory::Directory(char const*, Process*)>
c00163f0:	83 c4 10             	add    esp,0x10
c00163f3:	85 db                	test   ebx,ebx
c00163f5:	74 32                	je     c0016429 <sysCallMakeDir(regs*)+0x62>
c00163f7:	83 ec 0c             	sub    esp,0xc
c00163fa:	53                   	push   ebx
c00163fb:	e8 50 76 ff ff       	call   c000da50 <Directory::create()>
c0016400:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016403:	89 c6                	mov    esi,eax
c0016405:	e8 c2 74 ff ff       	call   c000d8cc <Directory::close()>
c001640a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001640c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001640f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016412:	83 c4 10             	add    esp,0x10
c0016415:	31 c0                	xor    eax,eax
c0016417:	59                   	pop    ecx
c0016418:	85 f6                	test   esi,esi
c001641a:	5b                   	pop    ebx
c001641b:	0f 95 c0             	setne  al
c001641e:	5e                   	pop    esi
c001641f:	31 d2                	xor    edx,edx
c0016421:	f7 d8                	neg    eax
c0016423:	83 d2 00             	adc    edx,0x0
c0016426:	f7 da                	neg    edx
c0016428:	c3                   	ret    
c0016429:	59                   	pop    ecx
c001642a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001642f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016434:	5b                   	pop    ebx
c0016435:	5e                   	pop    esi
c0016436:	c3                   	ret    

c0016437 <sysCallWait(regs*)>:
c0016437:	83 ec 10             	sub    esp,0x10
c001643a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001643e:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0016441:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016444:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016447:	e8 fc 24 00 00       	call   c0018948 <waitTask(int, int*, int)>
c001644c:	83 c4 1c             	add    esp,0x1c
c001644f:	99                   	cdq    
c0016450:	c3                   	ret    

c0016451 <sysCallNotImpl(regs*)>:
c0016451:	83 ec 18             	sub    esp,0x18
c0016454:	68 35 5e 02 c0       	push   0xc0025e35
c0016459:	e8 5d e5 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c001645e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016463:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016468:	83 c4 1c             	add    esp,0x1c
c001646b:	c3                   	ret    

c001646c <sysPanic(regs*)>:
c001646c:	83 ec 18             	sub    esp,0x18
c001646f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016473:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016476:	e8 40 e5 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c001647b:	b8 01 00 00 00       	mov    eax,0x1
c0016480:	31 d2                	xor    edx,edx
c0016482:	83 c4 1c             	add    esp,0x1c
c0016485:	c3                   	ret    

c0016486 <sysCallRmdir(regs*)>:
c0016486:	56                   	push   esi
c0016487:	53                   	push   ebx
c0016488:	83 ec 20             	sub    esp,0x20
c001648b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001648f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016492:	68 14 01 00 00       	push   0x114
c0016497:	e8 73 35 ff ff       	call   c0009a0f <malloc>
c001649c:	83 c4 0c             	add    esp,0xc
c001649f:	89 c3                	mov    ebx,eax
c00164a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164a6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00164a9:	56                   	push   esi
c00164aa:	53                   	push   ebx
c00164ab:	e8 ba 6d ff ff       	call   c000d26a <File::File(char const*, Process*)>
c00164b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164b3:	e8 ec 6f ff ff       	call   c000d4a4 <File::unlink()>
c00164b8:	83 c4 10             	add    esp,0x10
c00164bb:	85 db                	test   ebx,ebx
c00164bd:	74 14                	je     c00164d3 <sysCallRmdir(regs*)+0x4d>
c00164bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00164c3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00164c5:	83 ec 0c             	sub    esp,0xc
c00164c8:	53                   	push   ebx
c00164c9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00164cc:	83 c4 10             	add    esp,0x10
c00164cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00164d3:	85 c0                	test   eax,eax
c00164d5:	0f 95 c0             	setne  al
c00164d8:	31 d2                	xor    edx,edx
c00164da:	0f b6 c0             	movzx  eax,al
c00164dd:	f7 d8                	neg    eax
c00164df:	83 d2 00             	adc    edx,0x0
c00164e2:	83 c4 14             	add    esp,0x14
c00164e5:	f7 da                	neg    edx
c00164e7:	5b                   	pop    ebx
c00164e8:	5e                   	pop    esi
c00164e9:	c3                   	ret    

c00164ea <sysCallUnlink(regs*)>:
c00164ea:	56                   	push   esi
c00164eb:	53                   	push   ebx
c00164ec:	83 ec 20             	sub    esp,0x20
c00164ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00164f3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00164f6:	68 14 01 00 00       	push   0x114
c00164fb:	e8 0f 35 ff ff       	call   c0009a0f <malloc>
c0016500:	83 c4 0c             	add    esp,0xc
c0016503:	89 c3                	mov    ebx,eax
c0016505:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001650a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001650d:	56                   	push   esi
c001650e:	53                   	push   ebx
c001650f:	e8 56 6d ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0016514:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016517:	e8 88 6f ff ff       	call   c000d4a4 <File::unlink()>
c001651c:	83 c4 10             	add    esp,0x10
c001651f:	85 db                	test   ebx,ebx
c0016521:	74 14                	je     c0016537 <sysCallUnlink(regs*)+0x4d>
c0016523:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016527:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016529:	83 ec 0c             	sub    esp,0xc
c001652c:	53                   	push   ebx
c001652d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016530:	83 c4 10             	add    esp,0x10
c0016533:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016537:	85 c0                	test   eax,eax
c0016539:	0f 95 c0             	setne  al
c001653c:	31 d2                	xor    edx,edx
c001653e:	0f b6 c0             	movzx  eax,al
c0016541:	f7 d8                	neg    eax
c0016543:	83 d2 00             	adc    edx,0x0
c0016546:	83 c4 14             	add    esp,0x14
c0016549:	f7 da                	neg    edx
c001654b:	5b                   	pop    ebx
c001654c:	5e                   	pop    esi
c001654d:	c3                   	ret    

c001654e <sysCallGetArgv(regs*)>:
c001654e:	83 ec 0c             	sub    esp,0xc
c0016551:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016555:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016558:	85 c0                	test   eax,eax
c001655a:	78 2b                	js     c0016587 <sysCallGetArgv(regs*)+0x39>
c001655c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016562:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0016565:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c001656b:	7d 1a                	jge    c0016587 <sysCallGetArgv(regs*)+0x39>
c001656d:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0016574:	85 c0                	test   eax,eax
c0016576:	74 17                	je     c001658f <sysCallGetArgv(regs*)+0x41>
c0016578:	83 ec 08             	sub    esp,0x8
c001657b:	50                   	push   eax
c001657c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001657f:	e8 bc a1 fe ff       	call   c0000740 <strcpy>
c0016584:	83 c4 10             	add    esp,0x10
c0016587:	31 c0                	xor    eax,eax
c0016589:	31 d2                	xor    edx,edx
c001658b:	83 c4 0c             	add    esp,0xc
c001658e:	c3                   	ret    
c001658f:	b8 01 00 00 00       	mov    eax,0x1
c0016594:	31 d2                	xor    edx,edx
c0016596:	83 c4 0c             	add    esp,0xc
c0016599:	c3                   	ret    

c001659a <sysCallTTYName(regs*)>:
c001659a:	56                   	push   esi
c001659b:	53                   	push   ebx
c001659c:	53                   	push   ebx
c001659d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00165a1:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00165a4:	85 c0                	test   eax,eax
c00165a6:	74 5f                	je     c0016607 <sysCallTTYName(regs*)+0x6d>
c00165a8:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00165ab:	83 f8 02             	cmp    eax,0x2
c00165ae:	77 3e                	ja     c00165ee <sysCallTTYName(regs*)+0x54>
c00165b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165b5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00165b8:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c00165be:	85 db                	test   ebx,ebx
c00165c0:	74 45                	je     c0016607 <sysCallTTYName(regs*)+0x6d>
c00165c2:	83 ec 0c             	sub    esp,0xc
c00165c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00165c7:	53                   	push   ebx
c00165c8:	ff 10                	call   DWORD PTR [eax]
c00165ca:	83 c4 10             	add    esp,0x10
c00165cd:	84 c0                	test   al,al
c00165cf:	74 41                	je     c0016612 <sysCallTTYName(regs*)+0x78>
c00165d1:	83 ec 08             	sub    esp,0x8
c00165d4:	81 c3 82 00 00 00    	add    ebx,0x82
c00165da:	53                   	push   ebx
c00165db:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00165de:	e8 5d a1 fe ff       	call   c0000740 <strcpy>
c00165e3:	83 c4 10             	add    esp,0x10
c00165e6:	31 c0                	xor    eax,eax
c00165e8:	59                   	pop    ecx
c00165e9:	31 d2                	xor    edx,edx
c00165eb:	5b                   	pop    ebx
c00165ec:	5e                   	pop    esi
c00165ed:	c3                   	ret    
c00165ee:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00165f3:	74 bb                	je     c00165b0 <sysCallTTYName(regs*)+0x16>
c00165f5:	83 ec 0c             	sub    esp,0xc
c00165f8:	50                   	push   eax
c00165f9:	e8 85 52 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c00165fe:	83 c4 10             	add    esp,0x10
c0016601:	89 c3                	mov    ebx,eax
c0016603:	85 db                	test   ebx,ebx
c0016605:	75 bb                	jne    c00165c2 <sysCallTTYName(regs*)+0x28>
c0016607:	59                   	pop    ecx
c0016608:	b8 01 00 00 00       	mov    eax,0x1
c001660d:	31 d2                	xor    edx,edx
c001660f:	5b                   	pop    ebx
c0016610:	5e                   	pop    esi
c0016611:	c3                   	ret    
c0016612:	59                   	pop    ecx
c0016613:	b8 02 00 00 00       	mov    eax,0x2
c0016618:	31 d2                	xor    edx,edx
c001661a:	5b                   	pop    ebx
c001661b:	5e                   	pop    esi
c001661c:	c3                   	ret    

c001661d <sysCallUSleep(regs*)>:
c001661d:	83 ec 1c             	sub    esp,0x1c
c0016620:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016624:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016627:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001662a:	6a 00                	push   0x0
c001662c:	6a 64                	push   0x64
c001662e:	52                   	push   edx
c001662f:	50                   	push   eax
c0016630:	e8 4f c1 00 00       	call   c0022784 <__udivdi3>
c0016635:	83 c4 14             	add    esp,0x14
c0016638:	50                   	push   eax
c0016639:	e8 da 23 00 00       	call   c0018a18 <milliTenthSleep(unsigned int)>
c001663e:	31 c0                	xor    eax,eax
c0016640:	31 d2                	xor    edx,edx
c0016642:	83 c4 1c             	add    esp,0x1c
c0016645:	c3                   	ret    

c0016646 <sysCallSpawn(regs*)>:
c0016646:	56                   	push   esi
c0016647:	53                   	push   ebx
c0016648:	50                   	push   eax
c0016649:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001664d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016650:	85 c0                	test   eax,eax
c0016652:	75 08                	jne    c001665c <sysCallSpawn(regs*)+0x16>
c0016654:	59                   	pop    ecx
c0016655:	31 c0                	xor    eax,eax
c0016657:	31 d2                	xor    edx,edx
c0016659:	5b                   	pop    ebx
c001665a:	5e                   	pop    esi
c001665b:	c3                   	ret    
c001665c:	83 ec 0c             	sub    esp,0xc
c001665f:	68 1f 07 00 00       	push   0x71f
c0016664:	e8 a6 33 ff ff       	call   c0009a0f <malloc>
c0016669:	83 c4 10             	add    esp,0x10
c001666c:	89 c6                	mov    esi,eax
c001666e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016671:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016674:	85 c0                	test   eax,eax
c0016676:	75 32                	jne    c00166aa <sysCallSpawn(regs*)+0x64>
c0016678:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001667d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016680:	52                   	push   edx
c0016681:	50                   	push   eax
c0016682:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016685:	56                   	push   esi
c0016686:	e8 85 1a 00 00       	call   c0018110 <Process::Process(char const*, Process*, char**)>
c001668b:	83 c4 10             	add    esp,0x10
c001668e:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0016695:	75 bd                	jne    c0016654 <sysCallSpawn(regs*)+0xe>
c0016697:	83 ec 0c             	sub    esp,0xc
c001669a:	56                   	push   esi
c001669b:	e8 5c 1f 00 00       	call   c00185fc <Process::createUserThread()>
c00166a0:	8b 06                	mov    eax,DWORD PTR [esi]
c00166a2:	83 c4 10             	add    esp,0x10
c00166a5:	99                   	cdq    
c00166a6:	59                   	pop    ecx
c00166a7:	5b                   	pop    ebx
c00166a8:	5e                   	pop    esi
c00166a9:	c3                   	ret    
c00166aa:	31 c0                	xor    eax,eax
c00166ac:	eb d2                	jmp    c0016680 <sysCallSpawn(regs*)+0x3a>

c00166ae <sysCallGetEnv(regs*)>:
c00166ae:	57                   	push   edi
c00166af:	56                   	push   esi
c00166b0:	53                   	push   ebx
c00166b1:	83 ec 1c             	sub    esp,0x1c
c00166b4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00166b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166bd:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00166c0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00166c3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00166c6:	e8 3c e2 ff ff       	call   c0014907 <Krnl::getProcessTotalEnvCount(Process*)>
c00166cb:	83 c4 10             	add    esp,0x10
c00166ce:	39 c7                	cmp    edi,eax
c00166d0:	7c 14                	jl     c00166e6 <sysCallGetEnv(regs*)+0x38>
c00166d2:	85 f6                	test   esi,esi
c00166d4:	75 0b                	jne    c00166e1 <sysCallGetEnv(regs*)+0x33>
c00166d6:	83 c4 10             	add    esp,0x10
c00166d9:	31 c0                	xor    eax,eax
c00166db:	5b                   	pop    ebx
c00166dc:	31 d2                	xor    edx,edx
c00166de:	5e                   	pop    esi
c00166df:	5f                   	pop    edi
c00166e0:	c3                   	ret    
c00166e1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00166e4:	eb f0                	jmp    c00166d6 <sysCallGetEnv(regs*)+0x28>
c00166e6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00166ea:	52                   	push   edx
c00166eb:	57                   	push   edi
c00166ec:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00166f2:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c00166f5:	50                   	push   eax
c00166f6:	e8 2c e2 ff ff       	call   c0014927 <Krnl::getProcessEnvPair(Process*, int)>
c00166fb:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00166fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016702:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016706:	83 c4 0c             	add    esp,0xc
c0016709:	85 c9                	test   ecx,ecx
c001670b:	75 23                	jne    c0016730 <sysCallGetEnv(regs*)+0x82>
c001670d:	83 ec 0c             	sub    esp,0xc
c0016710:	50                   	push   eax
c0016711:	e8 8a 9f fe ff       	call   c00006a0 <strlen>
c0016716:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016719:	89 c3                	mov    ebx,eax
c001671b:	e8 80 9f fe ff       	call   c00006a0 <strlen>
c0016720:	83 c4 10             	add    esp,0x10
c0016723:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0016727:	83 c4 10             	add    esp,0x10
c001672a:	31 d2                	xor    edx,edx
c001672c:	5b                   	pop    ebx
c001672d:	5e                   	pop    esi
c001672e:	5f                   	pop    edi
c001672f:	c3                   	ret    
c0016730:	83 ec 08             	sub    esp,0x8
c0016733:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016736:	50                   	push   eax
c0016737:	56                   	push   esi
c0016738:	e8 03 a0 fe ff       	call   c0000740 <strcpy>
c001673d:	58                   	pop    eax
c001673e:	5a                   	pop    edx
c001673f:	68 4f 5e 02 c0       	push   0xc0025e4f
c0016744:	56                   	push   esi
c0016745:	e8 36 a1 fe ff       	call   c0000880 <strcat>
c001674a:	59                   	pop    ecx
c001674b:	5b                   	pop    ebx
c001674c:	57                   	push   edi
c001674d:	56                   	push   esi
c001674e:	e8 2d a1 fe ff       	call   c0000880 <strcat>
c0016753:	83 c4 10             	add    esp,0x10
c0016756:	e9 7b ff ff ff       	jmp    c00166d6 <sysCallGetEnv(regs*)+0x28>

c001675b <sysAppSettings(regs*)>:
c001675b:	57                   	push   edi
c001675c:	56                   	push   esi
c001675d:	56                   	push   esi
c001675e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016762:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016765:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001676b:	25 e0 1f 00 00       	and    eax,0x1fe0
c0016770:	66 3d c0 09          	cmp    ax,0x9c0
c0016774:	75 2e                	jne    c00167a4 <sysAppSettings(regs*)+0x49>
c0016776:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001677c:	83 e0 1f             	and    eax,0x1f
c001677f:	3c 01                	cmp    al,0x1
c0016781:	74 2c                	je     c00167af <sysAppSettings(regs*)+0x54>
c0016783:	3c 07                	cmp    al,0x7
c0016785:	0f 84 b3 00 00 00    	je     c001683e <sysAppSettings(regs*)+0xe3>
c001678b:	84 c0                	test   al,al
c001678d:	0f 84 d2 00 00 00    	je     c0016865 <sysAppSettings(regs*)+0x10a>
c0016793:	3c 08                	cmp    al,0x8
c0016795:	74 63                	je     c00167fa <sysAppSettings(regs*)+0x9f>
c0016797:	59                   	pop    ecx
c0016798:	0f b6 c0             	movzx  eax,al
c001679b:	5e                   	pop    esi
c001679c:	05 e8 03 00 00       	add    eax,0x3e8
c00167a1:	5f                   	pop    edi
c00167a2:	99                   	cdq    
c00167a3:	c3                   	ret    
c00167a4:	b8 01 00 00 00       	mov    eax,0x1
c00167a9:	59                   	pop    ecx
c00167aa:	31 d2                	xor    edx,edx
c00167ac:	5e                   	pop    esi
c00167ad:	5f                   	pop    edi
c00167ae:	c3                   	ret    
c00167af:	50                   	push   eax
c00167b0:	68 00 01 00 00       	push   0x100
c00167b5:	6a 00                	push   0x0
c00167b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167bc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167bf:	83 c0 0c             	add    eax,0xc
c00167c2:	50                   	push   eax
c00167c3:	e8 bc 9e fe ff       	call   c0000684 <memset>
c00167c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167cd:	b9 ff 00 00 00       	mov    ecx,0xff
c00167d2:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00167d5:	83 c7 0c             	add    edi,0xc
c00167d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00167da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167df:	5a                   	pop    edx
c00167e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167e3:	59                   	pop    ecx
c00167e4:	8d 50 0c             	lea    edx,[eax+0xc]
c00167e7:	52                   	push   edx
c00167e8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00167ee:	e8 b5 41 ff ff       	call   c000a9a8 <VgaText::setTitle(char*)>
c00167f3:	83 c4 10             	add    esp,0x10
c00167f6:	31 c0                	xor    eax,eax
c00167f8:	eb af                	jmp    c00167a9 <sysAppSettings(regs*)+0x4e>
c00167fa:	83 ec 08             	sub    esp,0x8
c00167fd:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016803:	83 e0 0f             	and    eax,0xf
c0016806:	50                   	push   eax
c0016807:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001680c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001680f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016815:	e8 7e 41 ff ff       	call   c000a998 <VgaText::setTitleColour(VgaColour)>
c001681a:	5f                   	pop    edi
c001681b:	58                   	pop    eax
c001681c:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016822:	c1 e8 04             	shr    eax,0x4
c0016825:	83 e0 0f             	and    eax,0xf
c0016828:	50                   	push   eax
c0016829:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001682e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016831:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016837:	e8 4c 41 ff ff       	call   c000a988 <VgaText::setTitleTextColour(VgaColour)>
c001683c:	eb b5                	jmp    c00167f3 <sysAppSettings(regs*)+0x98>
c001683e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016843:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016846:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001684c:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c0016852:	c0 e8 06             	shr    al,0x6
c0016855:	83 e0 01             	and    eax,0x1
c0016858:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001685e:	31 c0                	xor    eax,eax
c0016860:	e9 44 ff ff ff       	jmp    c00167a9 <sysAppSettings(regs*)+0x4e>
c0016865:	b8 02 00 00 00       	mov    eax,0x2
c001686a:	e9 3a ff ff ff       	jmp    c00167a9 <sysAppSettings(regs*)+0x4e>

c001686f <sysSetFatAttrib(regs*)>:
c001686f:	57                   	push   edi
c0016870:	56                   	push   esi
c0016871:	53                   	push   ebx
c0016872:	83 ec 1c             	sub    esp,0x1c
c0016875:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016879:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001687c:	68 14 01 00 00       	push   0x114
c0016881:	e8 89 31 ff ff       	call   c0009a0f <malloc>
c0016886:	83 c4 0c             	add    esp,0xc
c0016889:	89 c3                	mov    ebx,eax
c001688b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016890:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016893:	57                   	push   edi
c0016894:	53                   	push   ebx
c0016895:	e8 d0 69 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c001689a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001689d:	83 c4 0c             	add    esp,0xc
c00168a0:	0f b6 d4             	movzx  edx,ah
c00168a3:	0f b6 c0             	movzx  eax,al
c00168a6:	52                   	push   edx
c00168a7:	50                   	push   eax
c00168a8:	53                   	push   ebx
c00168a9:	e8 90 6c ff ff       	call   c000d53e <File::chfatattr(unsigned char, unsigned char)>
c00168ae:	83 c4 10             	add    esp,0x10
c00168b1:	85 db                	test   ebx,ebx
c00168b3:	74 14                	je     c00168c9 <sysSetFatAttrib(regs*)+0x5a>
c00168b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168b9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00168bb:	83 ec 0c             	sub    esp,0xc
c00168be:	53                   	push   ebx
c00168bf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00168c2:	83 c4 10             	add    esp,0x10
c00168c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00168c9:	85 c0                	test   eax,eax
c00168cb:	0f 95 c0             	setne  al
c00168ce:	31 d2                	xor    edx,edx
c00168d0:	0f b6 c0             	movzx  eax,al
c00168d3:	f7 d8                	neg    eax
c00168d5:	83 d2 00             	adc    edx,0x0
c00168d8:	83 c4 10             	add    esp,0x10
c00168db:	f7 da                	neg    edx
c00168dd:	5b                   	pop    ebx
c00168de:	5e                   	pop    esi
c00168df:	5f                   	pop    edi
c00168e0:	c3                   	ret    

c00168e1 <sysPipe(regs*)>:
c00168e1:	57                   	push   edi
c00168e2:	56                   	push   esi
c00168e3:	53                   	push   ebx
c00168e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168e8:	83 ec 0c             	sub    esp,0xc
c00168eb:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00168ee:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00168f1:	6a 20                	push   0x20
c00168f3:	e8 17 31 ff ff       	call   c0009a0f <malloc>
c00168f8:	89 c3                	mov    ebx,eax
c00168fa:	58                   	pop    eax
c00168fb:	5a                   	pop    edx
c00168fc:	68 00 50 00 00       	push   0x5000
c0016901:	53                   	push   ebx
c0016902:	e8 19 3e ff ff       	call   c000a720 <Pipe::Pipe(int)>
c0016907:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001690a:	e8 7f 4c ff ff       	call   c000b58e <UnixFile::getFileDescriptor()>
c001690f:	89 07                	mov    DWORD PTR [edi],eax
c0016911:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016914:	e8 75 4c ff ff       	call   c000b58e <UnixFile::getFileDescriptor()>
c0016919:	83 c4 10             	add    esp,0x10
c001691c:	89 06                	mov    DWORD PTR [esi],eax
c001691e:	31 d2                	xor    edx,edx
c0016920:	5b                   	pop    ebx
c0016921:	31 c0                	xor    eax,eax
c0016923:	5e                   	pop    esi
c0016924:	5f                   	pop    edi
c0016925:	c3                   	ret    

c0016926 <sysGetUnixTime(regs*)>:
c0016926:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c001692b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016931:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016935:	e9 1c 74 ff ff       	jmp    c000dd56 <Clock::timeInSecondsLocal()>

c001693a <string_ends_with(char const*, char const*)>:
c001693a:	57                   	push   edi
c001693b:	56                   	push   esi
c001693c:	53                   	push   ebx
c001693d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016941:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016945:	83 ec 0c             	sub    esp,0xc
c0016948:	53                   	push   ebx
c0016949:	e8 52 9d fe ff       	call   c00006a0 <strlen>
c001694e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016951:	89 c6                	mov    esi,eax
c0016953:	e8 48 9d fe ff       	call   c00006a0 <strlen>
c0016958:	83 c4 10             	add    esp,0x10
c001695b:	39 c6                	cmp    esi,eax
c001695d:	7d 06                	jge    c0016965 <string_ends_with(char const*, char const*)+0x2b>
c001695f:	5b                   	pop    ebx
c0016960:	31 c0                	xor    eax,eax
c0016962:	5e                   	pop    esi
c0016963:	5f                   	pop    edi
c0016964:	c3                   	ret    
c0016965:	83 ec 08             	sub    esp,0x8
c0016968:	29 c6                	sub    esi,eax
c001696a:	57                   	push   edi
c001696b:	01 f3                	add    ebx,esi
c001696d:	53                   	push   ebx
c001696e:	e8 59 9e fe ff       	call   c00007cc <strcmp>
c0016973:	83 c4 10             	add    esp,0x10
c0016976:	85 c0                	test   eax,eax
c0016978:	5b                   	pop    ebx
c0016979:	0f 94 c0             	sete   al
c001697c:	5e                   	pop    esi
c001697d:	0f b6 c0             	movzx  eax,al
c0016980:	5f                   	pop    edi
c0016981:	c3                   	ret    

c0016982 <sysCallOpen(regs*)>:
c0016982:	56                   	push   esi
c0016983:	53                   	push   ebx
c0016984:	81 ec 04 01 00 00    	sub    esp,0x104
c001698a:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016991:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016994:	85 c9                	test   ecx,ecx
c0016996:	0f 84 ad 01 00 00    	je     c0016b49 <sysCallOpen(regs*)+0x1c7>
c001699c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001699f:	85 c0                	test   eax,eax
c00169a1:	0f 84 a2 01 00 00    	je     c0016b49 <sysCallOpen(regs*)+0x1c7>
c00169a7:	52                   	push   edx
c00169a8:	68 51 5e 02 c0       	push   0xc0025e51
c00169ad:	50                   	push   eax
c00169ae:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00169b2:	56                   	push   esi
c00169b3:	e8 08 67 ff ff       	call   c000d0c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c00169b8:	89 34 24             	mov    DWORD PTR [esp],esi
c00169bb:	e8 e0 9c fe ff       	call   c00006a0 <strlen>
c00169c0:	83 c4 10             	add    esp,0x10
c00169c3:	48                   	dec    eax
c00169c4:	74 1d                	je     c00169e3 <sysCallOpen(regs*)+0x61>
c00169c6:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00169c9:	eb 0f                	jmp    c00169da <sysCallOpen(regs*)+0x58>
c00169cb:	80 fa 3a             	cmp    dl,0x3a
c00169ce:	74 0f                	je     c00169df <sysCallOpen(regs*)+0x5d>
c00169d0:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00169d4:	48                   	dec    eax
c00169d5:	74 0c                	je     c00169e3 <sysCallOpen(regs*)+0x61>
c00169d7:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00169da:	80 fa 2e             	cmp    dl,0x2e
c00169dd:	75 ec                	jne    c00169cb <sysCallOpen(regs*)+0x49>
c00169df:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00169e3:	83 ec 08             	sub    esp,0x8
c00169e6:	68 55 5e 02 c0       	push   0xc0025e55
c00169eb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00169ee:	e8 47 ff ff ff       	call   c001693a <string_ends_with(char const*, char const*)>
c00169f3:	83 c4 10             	add    esp,0x10
c00169f6:	85 c0                	test   eax,eax
c00169f8:	74 1d                	je     c0016a17 <sysCallOpen(regs*)+0x95>
c00169fa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00169fd:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0016a03:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016a0a:	81 c4 04 01 00 00    	add    esp,0x104
c0016a10:	31 c0                	xor    eax,eax
c0016a12:	31 d2                	xor    edx,edx
c0016a14:	5b                   	pop    ebx
c0016a15:	5e                   	pop    esi
c0016a16:	c3                   	ret    
c0016a17:	83 ec 08             	sub    esp,0x8
c0016a1a:	68 5a 5e 02 c0       	push   0xc0025e5a
c0016a1f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a22:	e8 13 ff ff ff       	call   c001693a <string_ends_with(char const*, char const*)>
c0016a27:	83 c4 10             	add    esp,0x10
c0016a2a:	85 c0                	test   eax,eax
c0016a2c:	75 cc                	jne    c00169fa <sysCallOpen(regs*)+0x78>
c0016a2e:	83 ec 08             	sub    esp,0x8
c0016a31:	68 56 5e 02 c0       	push   0xc0025e56
c0016a36:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a39:	e8 8e 9d fe ff       	call   c00007cc <strcmp>
c0016a3e:	83 c4 10             	add    esp,0x10
c0016a41:	85 c0                	test   eax,eax
c0016a43:	74 b5                	je     c00169fa <sysCallOpen(regs*)+0x78>
c0016a45:	83 ec 08             	sub    esp,0x8
c0016a48:	68 55 5e 02 c0       	push   0xc0025e55
c0016a4d:	56                   	push   esi
c0016a4e:	e8 e7 fe ff ff       	call   c001693a <string_ends_with(char const*, char const*)>
c0016a53:	83 c4 10             	add    esp,0x10
c0016a56:	85 c0                	test   eax,eax
c0016a58:	75 a0                	jne    c00169fa <sysCallOpen(regs*)+0x78>
c0016a5a:	83 ec 08             	sub    esp,0x8
c0016a5d:	68 5f 5e 02 c0       	push   0xc0025e5f
c0016a62:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a65:	e8 d0 fe ff ff       	call   c001693a <string_ends_with(char const*, char const*)>
c0016a6a:	83 c4 10             	add    esp,0x10
c0016a6d:	85 c0                	test   eax,eax
c0016a6f:	0f 85 e7 00 00 00    	jne    c0016b5c <sysCallOpen(regs*)+0x1da>
c0016a75:	83 ec 08             	sub    esp,0x8
c0016a78:	68 64 5e 02 c0       	push   0xc0025e64
c0016a7d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a80:	e8 b5 fe ff ff       	call   c001693a <string_ends_with(char const*, char const*)>
c0016a85:	83 c4 10             	add    esp,0x10
c0016a88:	85 c0                	test   eax,eax
c0016a8a:	0f 85 cc 00 00 00    	jne    c0016b5c <sysCallOpen(regs*)+0x1da>
c0016a90:	83 ec 08             	sub    esp,0x8
c0016a93:	68 60 5e 02 c0       	push   0xc0025e60
c0016a98:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a9b:	e8 2c 9d fe ff       	call   c00007cc <strcmp>
c0016aa0:	83 c4 10             	add    esp,0x10
c0016aa3:	85 c0                	test   eax,eax
c0016aa5:	0f 84 b1 00 00 00    	je     c0016b5c <sysCallOpen(regs*)+0x1da>
c0016aab:	83 ec 08             	sub    esp,0x8
c0016aae:	68 5f 5e 02 c0       	push   0xc0025e5f
c0016ab3:	56                   	push   esi
c0016ab4:	e8 81 fe ff ff       	call   c001693a <string_ends_with(char const*, char const*)>
c0016ab9:	83 c4 10             	add    esp,0x10
c0016abc:	85 c0                	test   eax,eax
c0016abe:	0f 85 98 00 00 00    	jne    c0016b5c <sysCallOpen(regs*)+0x1da>
c0016ac4:	83 ec 0c             	sub    esp,0xc
c0016ac7:	68 14 01 00 00       	push   0x114
c0016acc:	e8 3e 2f ff ff       	call   c0009a0f <malloc>
c0016ad1:	83 c4 0c             	add    esp,0xc
c0016ad4:	89 c6                	mov    esi,eax
c0016ad6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016adb:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016ade:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016ae1:	56                   	push   esi
c0016ae2:	e8 83 67 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0016ae7:	83 c4 10             	add    esp,0x10
c0016aea:	85 f6                	test   esi,esi
c0016aec:	74 5b                	je     c0016b49 <sysCallOpen(regs*)+0x1c7>
c0016aee:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016af1:	0f b6 c2             	movzx  eax,dl
c0016af4:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0016af7:	89 d0                	mov    eax,edx
c0016af9:	83 e0 01             	and    eax,0x1
c0016afc:	f6 c2 02             	test   dl,0x2
c0016aff:	74 03                	je     c0016b04 <sysCallOpen(regs*)+0x182>
c0016b01:	83 c8 02             	or     eax,0x2
c0016b04:	f6 c2 04             	test   dl,0x4
c0016b07:	74 03                	je     c0016b0c <sysCallOpen(regs*)+0x18a>
c0016b09:	83 c8 04             	or     eax,0x4
c0016b0c:	f6 c2 08             	test   dl,0x8
c0016b0f:	74 03                	je     c0016b14 <sysCallOpen(regs*)+0x192>
c0016b11:	83 c8 0a             	or     eax,0xa
c0016b14:	83 e2 10             	and    edx,0x10
c0016b17:	74 03                	je     c0016b1c <sysCallOpen(regs*)+0x19a>
c0016b19:	83 c8 12             	or     eax,0x12
c0016b1c:	83 ec 08             	sub    esp,0x8
c0016b1f:	50                   	push   eax
c0016b20:	56                   	push   esi
c0016b21:	e8 06 68 ff ff       	call   c000d32c <File::open(FileOpenMode)>
c0016b26:	83 c4 10             	add    esp,0x10
c0016b29:	85 c0                	test   eax,eax
c0016b2b:	75 1c                	jne    c0016b49 <sysCallOpen(regs*)+0x1c7>
c0016b2d:	83 ec 0c             	sub    esp,0xc
c0016b30:	56                   	push   esi
c0016b31:	e8 58 4a ff ff       	call   c000b58e <UnixFile::getFileDescriptor()>
c0016b36:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016b39:	83 c4 10             	add    esp,0x10
c0016b3c:	89 02                	mov    DWORD PTR [edx],eax
c0016b3e:	c1 f8 1f             	sar    eax,0x1f
c0016b41:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016b44:	e9 c1 fe ff ff       	jmp    c0016a0a <sysCallOpen(regs*)+0x88>
c0016b49:	81 c4 04 01 00 00    	add    esp,0x104
c0016b4f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016b54:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016b59:	5b                   	pop    ebx
c0016b5a:	5e                   	pop    esi
c0016b5b:	c3                   	ret    
c0016b5c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016b5f:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0016b65:	e9 99 fe ff ff       	jmp    c0016a03 <sysCallOpen(regs*)+0x81>

c0016b6a <Sys::loadSyscalls()>:
c0016b6a:	c7 05 a0 8b 02 c0 db 5d 01 c0 	mov    DWORD PTR ds:0xc0028ba0,0xc0015ddb
c0016b74:	c7 05 a4 8b 02 c0 d0 59 01 c0 	mov    DWORD PTR ds:0xc0028ba4,0xc00159d0
c0016b7e:	c7 05 a8 8b 02 c0 c1 5b 01 c0 	mov    DWORD PTR ds:0xc0028ba8,0xc0015bc1
c0016b88:	c7 05 ac 8b 02 c0 11 5d 01 c0 	mov    DWORD PTR ds:0xc0028bac,0xc0015d11
c0016b92:	c7 05 b0 8b 02 c0 59 5b 01 c0 	mov    DWORD PTR ds:0xc0028bb0,0xc0015b59
c0016b9c:	c7 05 b4 8b 02 c0 07 5a 01 c0 	mov    DWORD PTR ds:0xc0028bb4,0xc0015a07
c0016ba6:	c7 05 b8 8b 02 c0 e8 59 01 c0 	mov    DWORD PTR ds:0xc0028bb8,0xc00159e8
c0016bb0:	c7 05 bc 8b 02 c0 16 5c 01 c0 	mov    DWORD PTR ds:0xc0028bbc,0xc0015c16
c0016bba:	c7 05 c4 8b 02 c0 9e 62 01 c0 	mov    DWORD PTR ds:0xc0028bc4,0xc001629e
c0016bc4:	c7 05 c0 8b 02 c0 82 69 01 c0 	mov    DWORD PTR ds:0xc0028bc0,0xc0016982
c0016bce:	c7 05 c8 8b 02 c0 fe 62 01 c0 	mov    DWORD PTR ds:0xc0028bc8,0xc00162fe
c0016bd8:	c7 05 cc 8b 02 c0 e1 5f 01 c0 	mov    DWORD PTR ds:0xc0028bcc,0xc0015fe1
c0016be2:	c7 05 d0 8b 02 c0 13 5e 01 c0 	mov    DWORD PTR ds:0xc0028bd0,0xc0015e13
c0016bec:	c7 05 d4 8b 02 c0 18 5e 01 c0 	mov    DWORD PTR ds:0xc0028bd4,0xc0015e18
c0016bf6:	c7 05 d8 8b 02 c0 c7 63 01 c0 	mov    DWORD PTR ds:0xc0028bd8,0xc00163c7
c0016c00:	c7 05 dc 8b 02 c0 73 63 01 c0 	mov    DWORD PTR ds:0xc0028bdc,0xc0016373
c0016c0a:	c7 05 e0 8b 02 c0 ba 60 01 c0 	mov    DWORD PTR ds:0xc0028be0,0xc00160ba
c0016c14:	c7 05 e4 8b 02 c0 11 61 01 c0 	mov    DWORD PTR ds:0xc0028be4,0xc0016111
c0016c1e:	c7 05 e8 8b 02 c0 7d 61 01 c0 	mov    DWORD PTR ds:0xc0028be8,0xc001617d
c0016c28:	c7 05 ec 8b 02 c0 1d 5e 01 c0 	mov    DWORD PTR ds:0xc0028bec,0xc0015e1d
c0016c32:	c7 05 f0 8b 02 c0 37 64 01 c0 	mov    DWORD PTR ds:0xc0028bf0,0xc0016437
c0016c3c:	c7 05 f4 8b 02 c0 51 64 01 c0 	mov    DWORD PTR ds:0xc0028bf4,0xc0016451
c0016c46:	c7 05 f8 8b 02 c0 51 64 01 c0 	mov    DWORD PTR ds:0xc0028bf8,0xc0016451
c0016c50:	c7 05 fc 8b 02 c0 86 64 01 c0 	mov    DWORD PTR ds:0xc0028bfc,0xc0016486
c0016c5a:	c7 05 00 8c 02 c0 ea 64 01 c0 	mov    DWORD PTR ds:0xc0028c00,0xc00164ea
c0016c64:	c7 05 04 8c 02 c0 27 5e 01 c0 	mov    DWORD PTR ds:0xc0028c04,0xc0015e27
c0016c6e:	c7 05 08 8c 02 c0 4e 65 01 c0 	mov    DWORD PTR ds:0xc0028c08,0xc001654e
c0016c78:	c7 05 0c 8c 02 c0 9e 5f 01 c0 	mov    DWORD PTR ds:0xc0028c0c,0xc0015f9e
c0016c82:	c7 05 10 8c 02 c0 9a 65 01 c0 	mov    DWORD PTR ds:0xc0028c10,0xc001659a
c0016c8c:	c7 05 14 8c 02 c0 60 60 01 c0 	mov    DWORD PTR ds:0xc0028c14,0xc0016060
c0016c96:	c7 05 18 8c 02 c0 1d 66 01 c0 	mov    DWORD PTR ds:0xc0028c18,0xc001661d
c0016ca0:	c7 05 1c 8c 02 c0 ef 61 01 c0 	mov    DWORD PTR ds:0xc0028c1c,0xc00161ef
c0016caa:	c7 05 20 8c 02 c0 46 66 01 c0 	mov    DWORD PTR ds:0xc0028c20,0xc0016646
c0016cb4:	c7 05 24 8c 02 c0 ae 66 01 c0 	mov    DWORD PTR ds:0xc0028c24,0xc00166ae
c0016cbe:	c7 05 28 8c 02 c0 5b 67 01 c0 	mov    DWORD PTR ds:0xc0028c28,0xc001675b
c0016cc8:	c7 05 2c 8c 02 c0 37 5e 01 c0 	mov    DWORD PTR ds:0xc0028c2c,0xc0015e37
c0016cd2:	c7 05 30 8c 02 c0 a1 5e 01 c0 	mov    DWORD PTR ds:0xc0028c30,0xc0015ea1
c0016cdc:	c7 05 34 8c 02 c0 eb 5e 01 c0 	mov    DWORD PTR ds:0xc0028c34,0xc0015eeb
c0016ce6:	c7 05 38 8c 02 c0 6f 68 01 c0 	mov    DWORD PTR ds:0xc0028c38,0xc001686f
c0016cf0:	c7 05 3c 8c 02 c0 6c 64 01 c0 	mov    DWORD PTR ds:0xc0028c3c,0xc001646c
c0016cfa:	c7 05 40 8c 02 c0 40 5f 01 c0 	mov    DWORD PTR ds:0xc0028c40,0xc0015f40
c0016d04:	c7 05 44 8c 02 c0 e1 68 01 c0 	mov    DWORD PTR ds:0xc0028c44,0xc00168e1
c0016d0e:	c7 05 48 8c 02 c0 26 69 01 c0 	mov    DWORD PTR ds:0xc0028c48,0xc0016926
c0016d18:	c7 05 4c 8c 02 c0 b1 5a 01 c0 	mov    DWORD PTR ds:0xc0028c4c,0xc0015ab1
c0016d22:	c7 05 50 8c 02 c0 32 5c 01 c0 	mov    DWORD PTR ds:0xc0028c50,0xc0015c32
c0016d2c:	c7 05 54 8c 02 c0 c7 5c 01 c0 	mov    DWORD PTR ds:0xc0028c54,0xc0015cc7
c0016d36:	c7 05 58 8c 02 c0 9a 59 01 c0 	mov    DWORD PTR ds:0xc0028c58,0xc001599a
c0016d40:	c7 05 5c 8c 02 c0 79 5d 01 c0 	mov    DWORD PTR ds:0xc0028c5c,0xc0015d79
c0016d4a:	c7 05 60 8c 02 c0 13 5a 01 c0 	mov    DWORD PTR ds:0xc0028c60,0xc0015a13
c0016d54:	c7 05 64 8c 02 c0 2d 5a 01 c0 	mov    DWORD PTR ds:0xc0028c64,0xc0015a2d
c0016d5e:	c3                   	ret    

c0016d5f <Sys::systemCall(regs*, void*)>:
c0016d5f:	53                   	push   ebx
c0016d60:	83 ec 08             	sub    esp,0x8
c0016d63:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016d67:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016d6a:	83 f8 7f             	cmp    eax,0x7f
c0016d6d:	77 16                	ja     c0016d85 <Sys::systemCall(regs*, void*)+0x26>
c0016d6f:	8b 14 85 a0 8b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7460]
c0016d76:	85 d2                	test   edx,edx
c0016d78:	74 0b                	je     c0016d85 <Sys::systemCall(regs*, void*)+0x26>
c0016d7a:	83 ec 0c             	sub    esp,0xc
c0016d7d:	53                   	push   ebx
c0016d7e:	ff d2                	call   edx
c0016d80:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016d83:	eb 0d                	jmp    c0016d92 <Sys::systemCall(regs*, void*)+0x33>
c0016d85:	52                   	push   edx
c0016d86:	52                   	push   edx
c0016d87:	50                   	push   eax
c0016d88:	68 69 5e 02 c0       	push   0xc0025e69
c0016d8d:	e8 6d 5f ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0016d92:	83 c4 10             	add    esp,0x10
c0016d95:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016d9a:	31 d2                	xor    edx,edx
c0016d9c:	83 c4 08             	add    esp,0x8
c0016d9f:	5b                   	pop    ebx
c0016da0:	c3                   	ret    

c0016da1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016da1:	55                   	push   ebp
c0016da2:	57                   	push   edi
c0016da3:	56                   	push   esi
c0016da4:	53                   	push   ebx
c0016da5:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016dab:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016db2:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0016db9:	85 c0                	test   eax,eax
c0016dbb:	0f 95 c1             	setne  cl
c0016dbe:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0016dc6:	0f 94 c2             	sete   dl
c0016dc9:	84 d1                	test   cl,dl
c0016dcb:	74 23                	je     c0016df0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016dcd:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c0016dd3:	74 1b                	je     c0016df0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016dd5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016ddb:	89 da                	mov    edx,ebx
c0016ddd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0016de3:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0016de9:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0016df0:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c0016df7:	05 ff 0f 00 00       	add    eax,0xfff
c0016dfc:	83 ec 0c             	sub    esp,0xc
c0016dff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016e03:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c0016e09:	c1 e8 0c             	shr    eax,0xc
c0016e0c:	89 fe                	mov    esi,edi
c0016e0e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e12:	c1 ee 0c             	shr    esi,0xc
c0016e15:	6a 01                	push   0x1
c0016e17:	e8 bd 4b ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c0016e1c:	89 c5                	mov    ebp,eax
c0016e1e:	58                   	pop    eax
c0016e1f:	5a                   	pop    edx
c0016e20:	56                   	push   esi
c0016e21:	68 7d 5e 02 c0       	push   0xc0025e7d
c0016e26:	e8 d4 5e ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0016e2b:	59                   	pop    ecx
c0016e2c:	58                   	pop    eax
c0016e2d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016e31:	68 8f 5e 02 c0       	push   0xc0025e8f
c0016e36:	e8 c4 5e ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0016e3b:	83 c4 10             	add    esp,0x10
c0016e3e:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0016e44:	0f 86 31 01 00 00    	jbe    c0016f7b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0016e4a:	c1 e6 0c             	shl    esi,0xc
c0016e4d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e50:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0016e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e57:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0016e5e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016e61:	01 df                	add    edi,ebx
c0016e63:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0016e66:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016e6a:	0f 84 08 01 00 00    	je     c0016f78 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0016e70:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0016e76:	76 05                	jbe    c0016e7d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0016e78:	bf 00 10 00 00       	mov    edi,0x1000
c0016e7d:	83 ec 0c             	sub    esp,0xc
c0016e80:	31 d2                	xor    edx,edx
c0016e82:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016e89:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016e8b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0016e8f:	50                   	push   eax
c0016e90:	8d 74 24 30          	lea    esi,[esp+0x30]
c0016e94:	56                   	push   esi
c0016e95:	52                   	push   edx
c0016e96:	57                   	push   edi
c0016e97:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0016e9e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016ea1:	83 c4 20             	add    esp,0x20
c0016ea4:	85 c0                	test   eax,eax
c0016ea6:	74 0a                	je     c0016eb2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0016ea8:	53                   	push   ebx
c0016ea9:	53                   	push   ebx
c0016eaa:	50                   	push   eax
c0016eab:	68 a1 5e 02 c0       	push   0xc0025ea1
c0016eb0:	eb 0f                	jmp    c0016ec1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0016eb2:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016eb6:	74 20                	je     c0016ed8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0016eb8:	51                   	push   ecx
c0016eb9:	51                   	push   ecx
c0016eba:	6a 00                	push   0x0
c0016ebc:	68 cc 5e 02 c0       	push   0xc0025ecc
c0016ec1:	e8 39 5e ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0016ec6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016ec9:	e8 3b 4e ff ff       	call   c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c0016ece:	83 c4 10             	add    esp,0x10
c0016ed1:	31 c0                	xor    eax,eax
c0016ed3:	e9 68 01 00 00       	jmp    c0017040 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c0016ed8:	fa                   	cli    
c0016ed9:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c0016edf:	e8 e2 31 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c0016ee4:	6a 07                	push   0x7
c0016ee6:	89 c7                	mov    edi,eax
c0016ee8:	55                   	push   ebp
c0016ee9:	50                   	push   eax
c0016eea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eef:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016ef2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016ef8:	e8 83 51 ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016efd:	83 c4 0c             	add    esp,0xc
c0016f00:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016f07:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016f0d:	6a 00                	push   0x0
c0016f0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f14:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016f17:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016f1d:	e8 b8 4f ff ff       	call   c000beda <VAS::mapOtherVASIn(bool, VAS*)>
c0016f22:	58                   	pop    eax
c0016f23:	5a                   	pop    edx
c0016f24:	68 07 0c 00 00       	push   0xc07
c0016f29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016f2d:	57                   	push   edi
c0016f2e:	89 ef                	mov    edi,ebp
c0016f30:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016f37:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016f3d:	6a 00                	push   0x0
c0016f3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f44:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016f47:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016f4d:	e8 ea 54 ff ff       	call   c000c43c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016f52:	b9 00 10 00 00       	mov    ecx,0x1000
c0016f57:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f59:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c0016f5e:	83 c4 20             	add    esp,0x20
c0016f61:	48                   	dec    eax
c0016f62:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c0016f67:	85 c0                	test   eax,eax
c0016f69:	75 01                	jne    c0016f6c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0016f6b:	fb                   	sti    
c0016f6c:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0016f73:	e9 df fe ff ff       	jmp    c0016e57 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0016f78:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0016f7b:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0016f83:	0f 86 a9 00 00 00    	jbe    c0017032 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016f89:	fa                   	cli    
c0016f8a:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c0016f90:	51                   	push   ecx
c0016f91:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016f98:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016f9e:	6a 00                	push   0x0
c0016fa0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fa5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016fa8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016fae:	e8 27 4f ff ff       	call   c000beda <VAS::mapOtherVASIn(bool, VAS*)>
c0016fb3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016fb7:	c1 e6 0c             	shl    esi,0xc
c0016fba:	01 de                	add    esi,ebx
c0016fbc:	83 c4 10             	add    esp,0x10
c0016fbf:	39 de                	cmp    esi,ebx
c0016fc1:	74 61                	je     c0017024 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0016fc3:	e8 fe 30 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c0016fc8:	6a 07                	push   0x7
c0016fca:	89 c7                	mov    edi,eax
c0016fcc:	55                   	push   ebp
c0016fcd:	50                   	push   eax
c0016fce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fd3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016fd6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016fdc:	e8 9f 50 ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016fe1:	58                   	pop    eax
c0016fe2:	5a                   	pop    edx
c0016fe3:	68 07 0c 00 00       	push   0xc07
c0016fe8:	53                   	push   ebx
c0016fe9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016fef:	57                   	push   edi
c0016ff0:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016ff7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016ffd:	6a 00                	push   0x0
c0016fff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017004:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017007:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001700d:	e8 2a 54 ff ff       	call   c000c43c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0017012:	83 c4 1c             	add    esp,0x1c
c0017015:	68 00 10 00 00       	push   0x1000
c001701a:	6a 00                	push   0x0
c001701c:	55                   	push   ebp
c001701d:	e8 62 96 fe ff       	call   c0000684 <memset>
c0017022:	eb 98                	jmp    c0016fbc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0017024:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c0017029:	48                   	dec    eax
c001702a:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c001702f:	75 01                	jne    c0017032 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0017031:	fb                   	sti    
c0017032:	83 ec 0c             	sub    esp,0xc
c0017035:	55                   	push   ebp
c0017036:	e8 ce 4c ff ff       	call   c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c001703b:	83 c4 10             	add    esp,0x10
c001703e:	b0 01                	mov    al,0x1
c0017040:	81 c4 2c 10 00 00    	add    esp,0x102c
c0017046:	5b                   	pop    ebx
c0017047:	5e                   	pop    esi
c0017048:	5f                   	pop    edi
c0017049:	5d                   	pop    ebp
c001704a:	c3                   	ret    

c001704b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001704b:	55                   	push   ebp
c001704c:	57                   	push   edi
c001704d:	56                   	push   esi
c001704e:	53                   	push   ebx
c001704f:	83 ec 48             	sub    esp,0x48
c0017052:	68 14 01 00 00       	push   0x114
c0017057:	e8 b3 29 ff ff       	call   c0009a0f <malloc>
c001705c:	83 c4 0c             	add    esp,0xc
c001705f:	89 c6                	mov    esi,eax
c0017061:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017065:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017069:	50                   	push   eax
c001706a:	e8 fb 61 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c001706f:	58                   	pop    eax
c0017070:	5a                   	pop    edx
c0017071:	6a 01                	push   0x1
c0017073:	56                   	push   esi
c0017074:	e8 b3 62 ff ff       	call   c000d32c <File::open(FileOpenMode)>
c0017079:	83 c4 10             	add    esp,0x10
c001707c:	85 c0                	test   eax,eax
c001707e:	0f 85 47 01 00 00    	jne    c00171cb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017084:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001708c:	83 ec 0c             	sub    esp,0xc
c001708f:	6a 34                	push   0x34
c0017091:	e8 79 29 ff ff       	call   c0009a0f <malloc>
c0017096:	89 c3                	mov    ebx,eax
c0017098:	58                   	pop    eax
c0017099:	8b 06                	mov    eax,DWORD PTR [esi]
c001709b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001709f:	57                   	push   edi
c00170a0:	53                   	push   ebx
c00170a1:	6a 00                	push   0x0
c00170a3:	6a 34                	push   0x34
c00170a5:	56                   	push   esi
c00170a6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00170a9:	83 c4 20             	add    esp,0x20
c00170ac:	85 c0                	test   eax,eax
c00170ae:	0f 85 17 01 00 00    	jne    c00171cb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00170b4:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00170ba:	0f 85 0b 01 00 00    	jne    c00171cb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00170c0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00170c3:	85 c0                	test   eax,eax
c00170c5:	0f 84 00 01 00 00    	je     c00171cb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00170cb:	31 d2                	xor    edx,edx
c00170cd:	55                   	push   ebp
c00170ce:	52                   	push   edx
c00170cf:	50                   	push   eax
c00170d0:	56                   	push   esi
c00170d1:	e8 14 63 ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c00170d6:	83 c4 10             	add    esp,0x10
c00170d9:	85 c0                	test   eax,eax
c00170db:	0f 85 ea 00 00 00    	jne    c00171cb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00170e1:	83 ec 0c             	sub    esp,0xc
c00170e4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00170e7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00170eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00170ef:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00170f3:	0f af c2             	imul   eax,edx
c00170f6:	50                   	push   eax
c00170f7:	e8 13 29 ff ff       	call   c0009a0f <malloc>
c00170fc:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00170fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017102:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017105:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017109:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001710d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0017111:	0f af c2             	imul   eax,edx
c0017114:	99                   	cdq    
c0017115:	52                   	push   edx
c0017116:	50                   	push   eax
c0017117:	56                   	push   esi
c0017118:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001711b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001711e:	83 c4 20             	add    esp,0x20
c0017121:	85 c0                	test   eax,eax
c0017123:	0f 84 a2 00 00 00    	je     c00171cb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017129:	31 d2                	xor    edx,edx
c001712b:	51                   	push   ecx
c001712c:	52                   	push   edx
c001712d:	50                   	push   eax
c001712e:	56                   	push   esi
c001712f:	e8 b6 62 ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c0017134:	83 c4 10             	add    esp,0x10
c0017137:	85 c0                	test   eax,eax
c0017139:	0f 85 8c 00 00 00    	jne    c00171cb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001713f:	83 ec 0c             	sub    esp,0xc
c0017142:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017146:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001714a:	31 ed                	xor    ebp,ebp
c001714c:	0f af c2             	imul   eax,edx
c001714f:	50                   	push   eax
c0017150:	e8 ba 28 ff ff       	call   c0009a0f <malloc>
c0017155:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017157:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001715b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001715e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017162:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017166:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001716a:	0f af c2             	imul   eax,edx
c001716d:	99                   	cdq    
c001716e:	52                   	push   edx
c001716f:	50                   	push   eax
c0017170:	56                   	push   esi
c0017171:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017174:	83 c4 20             	add    esp,0x20
c0017177:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001717f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0017183:	0f 86 80 00 00 00    	jbe    c0017209 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0017189:	0f b7 fd             	movzx  edi,bp
c001718c:	c1 e7 05             	shl    edi,0x5
c001718f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0017193:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0017196:	75 6b                	jne    c0017203 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017198:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001719b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001719f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00171a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00171a6:	52                   	push   edx
c00171a7:	31 d2                	xor    edx,edx
c00171a9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00171ac:	52                   	push   edx
c00171ad:	50                   	push   eax
c00171ae:	56                   	push   esi
c00171af:	e8 36 62 ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c00171b4:	83 c4 10             	add    esp,0x10
c00171b7:	85 c0                	test   eax,eax
c00171b9:	74 17                	je     c00171d2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00171bb:	83 ec 0c             	sub    esp,0xc
c00171be:	68 f8 5e 02 c0       	push   0xc0025ef8
c00171c3:	e8 37 5b ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00171c8:	83 c4 10             	add    esp,0x10
c00171cb:	31 c0                	xor    eax,eax
c00171cd:	e9 87 00 00 00       	jmp    c0017259 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00171d2:	83 ec 0c             	sub    esp,0xc
c00171d5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00171d8:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00171db:	50                   	push   eax
c00171dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00171e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00171e4:	56                   	push   esi
c00171e5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00171e9:	e8 b3 fb ff ff       	call   c0016da1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00171ee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00171f2:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00171f6:	83 c4 20             	add    esp,0x20
c00171f9:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00171fd:	73 04                	jae    c0017203 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00171ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017203:	45                   	inc    ebp
c0017204:	e9 76 ff ff ff       	jmp    c001717f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0017209:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001720d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017211:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017215:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001721b:	83 ec 0c             	sub    esp,0xc
c001721e:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0017224:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017229:	05 00 10 00 00       	add    eax,0x1000
c001722e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017235:	e8 e5 27 ff ff       	call   c0009a1f <free>
c001723a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001723d:	e8 dd 27 ff ff       	call   c0009a1f <free>
c0017242:	58                   	pop    eax
c0017243:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017247:	e8 d3 27 ff ff       	call   c0009a1f <free>
c001724c:	89 34 24             	mov    DWORD PTR [esp],esi
c001724f:	e8 36 61 ff ff       	call   c000d38a <File::close()>
c0017254:	83 c4 10             	add    esp,0x10
c0017257:	b0 01                	mov    al,0x1
c0017259:	83 c4 3c             	add    esp,0x3c
c001725c:	5b                   	pop    ebx
c001725d:	5e                   	pop    esi
c001725e:	5f                   	pop    edi
c001725f:	5d                   	pop    ebp
c0017260:	c3                   	ret    

c0017261 <Thr::runtimeReferenceHelper()>:
c0017261:	83 ec 18             	sub    esp,0x18
c0017264:	68 00 5f 02 c0       	push   0xc0025f00
c0017269:	e8 91 5a ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001726e:	fa                   	cli    
c001726f:	83 c4 10             	add    esp,0x10
c0017272:	eb fe                	jmp    c0017272 <Thr::runtimeReferenceHelper()+0x11>

c0017274 <Thr::getAddressOfKernelSymbol(char const*)>:
c0017274:	57                   	push   edi
c0017275:	56                   	push   esi
c0017276:	53                   	push   ebx
c0017277:	31 db                	xor    ebx,ebx
c0017279:	39 1d 40 95 02 c0    	cmp    DWORD PTR ds:0xc0029540,ebx
c001727f:	7e 3c                	jle    c00172bd <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0017281:	8b 34 9d c0 94 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd6b40]
c0017288:	31 ff                	xor    edi,edi
c001728a:	39 3c 9d c0 93 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6c40],edi
c0017291:	7e 27                	jle    c00172ba <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0017293:	50                   	push   eax
c0017294:	50                   	push   eax
c0017295:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017299:	8b 06                	mov    eax,DWORD PTR [esi]
c001729b:	03 04 9d 40 94 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6bc0]
c00172a2:	50                   	push   eax
c00172a3:	e8 24 95 fe ff       	call   c00007cc <strcmp>
c00172a8:	83 c4 10             	add    esp,0x10
c00172ab:	85 c0                	test   eax,eax
c00172ad:	75 05                	jne    c00172b4 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00172af:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00172b2:	eb 0b                	jmp    c00172bf <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00172b4:	83 c6 10             	add    esi,0x10
c00172b7:	47                   	inc    edi
c00172b8:	eb d0                	jmp    c001728a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00172ba:	43                   	inc    ebx
c00172bb:	eb bc                	jmp    c0017279 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00172bd:	31 c0                	xor    eax,eax
c00172bf:	5b                   	pop    ebx
c00172c0:	5e                   	pop    esi
c00172c1:	5f                   	pop    edi
c00172c2:	c3                   	ret    

c00172c3 <Thr::loadKernelSymbolTable(char const*)>:
c00172c3:	55                   	push   ebp
c00172c4:	57                   	push   edi
c00172c5:	56                   	push   esi
c00172c6:	53                   	push   ebx
c00172c7:	83 ec 68             	sub    esp,0x68
c00172ca:	8b 35 90 95 02 c0    	mov    esi,DWORD PTR ds:0xc0029590
c00172d0:	68 14 01 00 00       	push   0x114
c00172d5:	e8 35 27 ff ff       	call   c0009a0f <malloc>
c00172da:	83 c4 0c             	add    esp,0xc
c00172dd:	89 c3                	mov    ebx,eax
c00172df:	56                   	push   esi
c00172e0:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00172e4:	50                   	push   eax
c00172e5:	e8 80 5f ff ff       	call   c000d26a <File::File(char const*, Process*)>
c00172ea:	5e                   	pop    esi
c00172eb:	5f                   	pop    edi
c00172ec:	6a 01                	push   0x1
c00172ee:	53                   	push   ebx
c00172ef:	e8 38 60 ff ff       	call   c000d32c <File::open(FileOpenMode)>
c00172f4:	83 c4 10             	add    esp,0x10
c00172f7:	85 c0                	test   eax,eax
c00172f9:	74 0a                	je     c0017305 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00172fb:	83 ec 0c             	sub    esp,0xc
c00172fe:	68 22 5f 02 c0       	push   0xc0025f22
c0017303:	eb 34                	jmp    c0017339 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0017305:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001730d:	83 ec 0c             	sub    esp,0xc
c0017310:	6a 34                	push   0x34
c0017312:	e8 f8 26 ff ff       	call   c0009a0f <malloc>
c0017317:	59                   	pop    ecx
c0017318:	89 c7                	mov    edi,eax
c001731a:	8d 74 24 34          	lea    esi,[esp+0x34]
c001731e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017320:	56                   	push   esi
c0017321:	57                   	push   edi
c0017322:	6a 00                	push   0x0
c0017324:	6a 34                	push   0x34
c0017326:	53                   	push   ebx
c0017327:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001732a:	83 c4 20             	add    esp,0x20
c001732d:	85 c0                	test   eax,eax
c001732f:	74 17                	je     c0017348 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0017331:	83 ec 0c             	sub    esp,0xc
c0017334:	68 39 5f 02 c0       	push   0xc0025f39
c0017339:	e8 7d d6 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c001733e:	83 c4 10             	add    esp,0x10
c0017341:	31 c0                	xor    eax,eax
c0017343:	e9 31 02 00 00       	jmp    c0017579 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0017348:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001734e:	75 e1                	jne    c0017331 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017350:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017353:	85 c0                	test   eax,eax
c0017355:	74 da                	je     c0017331 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017357:	52                   	push   edx
c0017358:	31 d2                	xor    edx,edx
c001735a:	52                   	push   edx
c001735b:	50                   	push   eax
c001735c:	53                   	push   ebx
c001735d:	e8 88 60 ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c0017362:	83 c4 10             	add    esp,0x10
c0017365:	85 c0                	test   eax,eax
c0017367:	75 c8                	jne    c0017331 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017369:	83 ec 0c             	sub    esp,0xc
c001736c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017370:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017374:	31 ed                	xor    ebp,ebp
c0017376:	0f af c2             	imul   eax,edx
c0017379:	50                   	push   eax
c001737a:	e8 90 26 ff ff       	call   c0009a0f <malloc>
c001737f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017381:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017385:	89 34 24             	mov    DWORD PTR [esp],esi
c0017388:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001738c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017390:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017394:	0f af c2             	imul   eax,edx
c0017397:	99                   	cdq    
c0017398:	52                   	push   edx
c0017399:	50                   	push   eax
c001739a:	53                   	push   ebx
c001739b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001739e:	83 c4 20             	add    esp,0x20
c00173a1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00173a9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00173b1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00173b9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00173c1:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00173c5:	0f 86 aa 00 00 00    	jbe    c0017475 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00173cb:	0f b7 f5             	movzx  esi,bp
c00173ce:	6b f6 28             	imul   esi,esi,0x28
c00173d1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00173d5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00173d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00173dc:	50                   	push   eax
c00173dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00173e1:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00173e5:	8b 16                	mov    edx,DWORD PTR [esi]
c00173e7:	6b c0 28             	imul   eax,eax,0x28
c00173ea:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00173ee:	89 d0                	mov    eax,edx
c00173f0:	31 d2                	xor    edx,edx
c00173f2:	52                   	push   edx
c00173f3:	50                   	push   eax
c00173f4:	53                   	push   ebx
c00173f5:	e8 f0 5f ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c00173fa:	83 c4 0c             	add    esp,0xc
c00173fd:	6a 20                	push   0x20
c00173ff:	6a 00                	push   0x0
c0017401:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017405:	52                   	push   edx
c0017406:	e8 79 92 fe ff       	call   c0000684 <memset>
c001740b:	58                   	pop    eax
c001740c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001740e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0017412:	51                   	push   ecx
c0017413:	8d 54 24 40          	lea    edx,[esp+0x40]
c0017417:	52                   	push   edx
c0017418:	6a 00                	push   0x0
c001741a:	6a 1f                	push   0x1f
c001741c:	53                   	push   ebx
c001741d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017420:	83 c4 18             	add    esp,0x18
c0017423:	68 50 5f 02 c0       	push   0xc0025f50
c0017428:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001742c:	52                   	push   edx
c001742d:	e8 9a 93 fe ff       	call   c00007cc <strcmp>
c0017432:	83 c4 10             	add    esp,0x10
c0017435:	85 c0                	test   eax,eax
c0017437:	75 0f                	jne    c0017448 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0017439:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001743c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017440:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017444:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017448:	50                   	push   eax
c0017449:	50                   	push   eax
c001744a:	68 58 5f 02 c0       	push   0xc0025f58
c001744f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017453:	50                   	push   eax
c0017454:	e8 73 93 fe ff       	call   c00007cc <strcmp>
c0017459:	83 c4 10             	add    esp,0x10
c001745c:	85 c0                	test   eax,eax
c001745e:	75 0f                	jne    c001746f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0017460:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017463:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017467:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001746b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001746f:	45                   	inc    ebp
c0017470:	e9 4c ff ff ff       	jmp    c00173c1 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0017475:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001747a:	75 10                	jne    c001748c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001747c:	83 ec 0c             	sub    esp,0xc
c001747f:	68 60 5f 02 c0       	push   0xc0025f60
c0017484:	e8 32 d5 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0017489:	83 c4 10             	add    esp,0x10
c001748c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0017491:	75 10                	jne    c00174a3 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0017493:	83 ec 0c             	sub    esp,0xc
c0017496:	68 60 5f 02 c0       	push   0xc0025f60
c001749b:	e8 1b d5 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c00174a0:	83 c4 10             	add    esp,0x10
c00174a3:	31 d2                	xor    edx,edx
c00174a5:	50                   	push   eax
c00174a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174aa:	52                   	push   edx
c00174ab:	50                   	push   eax
c00174ac:	53                   	push   ebx
c00174ad:	e8 38 5f ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c00174b2:	5a                   	pop    edx
c00174b3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00174b7:	e8 53 25 ff ff       	call   c0009a0f <malloc>
c00174bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00174c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00174c4:	31 c9                	xor    ecx,ecx
c00174c6:	5e                   	pop    esi
c00174c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00174c9:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00174cd:	55                   	push   ebp
c00174ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174d2:	51                   	push   ecx
c00174d3:	52                   	push   edx
c00174d4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00174d8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00174dc:	53                   	push   ebx
c00174dd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00174e0:	83 c4 14             	add    esp,0x14
c00174e3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00174e7:	e8 23 25 ff ff       	call   c0009a0f <malloc>
c00174ec:	89 c6                	mov    esi,eax
c00174ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00174f0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00174f3:	56                   	push   esi
c00174f4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00174f8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00174fc:	51                   	push   ecx
c00174fd:	52                   	push   edx
c00174fe:	53                   	push   ebx
c00174ff:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017502:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017506:	8b 15 40 95 02 c0    	mov    edx,DWORD PTR ds:0xc0029540
c001750c:	83 c4 1c             	add    esp,0x1c
c001750f:	c1 e8 04             	shr    eax,0x4
c0017512:	89 04 95 c0 93 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6c40],eax
c0017519:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001751d:	31 d2                	xor    edx,edx
c001751f:	52                   	push   edx
c0017520:	50                   	push   eax
c0017521:	53                   	push   ebx
c0017522:	e8 c3 5e ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c0017527:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017529:	31 d2                	xor    edx,edx
c001752b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001752e:	56                   	push   esi
c001752f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017533:	52                   	push   edx
c0017534:	50                   	push   eax
c0017535:	53                   	push   ebx
c0017536:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017539:	83 c4 14             	add    esp,0x14
c001753c:	53                   	push   ebx
c001753d:	e8 48 5e ff ff       	call   c000d38a <File::close()>
c0017542:	5d                   	pop    ebp
c0017543:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017547:	e8 d3 24 ff ff       	call   c0009a1f <free>
c001754c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001754f:	e8 cb 24 ff ff       	call   c0009a1f <free>
c0017554:	a1 40 95 02 c0       	mov    eax,ds:0xc0029540
c0017559:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001755d:	8d 50 01             	lea    edx,[eax+0x1]
c0017560:	89 0c 85 c0 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6b40],ecx
c0017567:	89 34 85 40 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6bc0],esi
c001756e:	89 15 40 95 02 c0    	mov    DWORD PTR ds:0xc0029540,edx
c0017574:	83 c4 10             	add    esp,0x10
c0017577:	b0 01                	mov    al,0x1
c0017579:	83 c4 5c             	add    esp,0x5c
c001757c:	5b                   	pop    ebx
c001757d:	5e                   	pop    esi
c001757e:	5f                   	pop    edi
c001757f:	5d                   	pop    ebp
c0017580:	c3                   	ret    

c0017581 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017581:	55                   	push   ebp
c0017582:	57                   	push   edi
c0017583:	56                   	push   esi
c0017584:	53                   	push   ebx
c0017585:	81 ec 68 03 00 00    	sub    esp,0x368
c001758b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017592:	8b 1d 90 95 02 c0    	mov    ebx,DWORD PTR ds:0xc0029590
c0017598:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001759c:	68 14 01 00 00       	push   0x114
c00175a1:	e8 69 24 ff ff       	call   c0009a0f <malloc>
c00175a6:	83 c4 0c             	add    esp,0xc
c00175a9:	89 c5                	mov    ebp,eax
c00175ab:	53                   	push   ebx
c00175ac:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00175b3:	50                   	push   eax
c00175b4:	e8 b1 5c ff ff       	call   c000d26a <File::File(char const*, Process*)>
c00175b9:	5e                   	pop    esi
c00175ba:	5f                   	pop    edi
c00175bb:	6a 01                	push   0x1
c00175bd:	55                   	push   ebp
c00175be:	e8 69 5d ff ff       	call   c000d32c <File::open(FileOpenMode)>
c00175c3:	83 c4 10             	add    esp,0x10
c00175c6:	85 c0                	test   eax,eax
c00175c8:	0f 85 a7 06 00 00    	jne    c0017c75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00175ce:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00175d6:	83 ec 0c             	sub    esp,0xc
c00175d9:	6a 34                	push   0x34
c00175db:	e8 2f 24 ff ff       	call   c0009a0f <malloc>
c00175e0:	5b                   	pop    ebx
c00175e1:	89 c7                	mov    edi,eax
c00175e3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00175e7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00175ea:	53                   	push   ebx
c00175eb:	57                   	push   edi
c00175ec:	6a 00                	push   0x0
c00175ee:	6a 34                	push   0x34
c00175f0:	55                   	push   ebp
c00175f1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00175f4:	83 c4 20             	add    esp,0x20
c00175f7:	85 c0                	test   eax,eax
c00175f9:	0f 85 76 06 00 00    	jne    c0017c75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00175ff:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017605:	0f 85 6a 06 00 00    	jne    c0017c75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001760b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001760e:	85 c0                	test   eax,eax
c0017610:	0f 84 5f 06 00 00    	je     c0017c75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017616:	31 d2                	xor    edx,edx
c0017618:	51                   	push   ecx
c0017619:	52                   	push   edx
c001761a:	50                   	push   eax
c001761b:	55                   	push   ebp
c001761c:	e8 c9 5d ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c0017621:	83 c4 10             	add    esp,0x10
c0017624:	85 c0                	test   eax,eax
c0017626:	0f 85 49 06 00 00    	jne    c0017c75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001762c:	83 ec 0c             	sub    esp,0xc
c001762f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0017632:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017636:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001763a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001763e:	0f af c2             	imul   eax,edx
c0017641:	50                   	push   eax
c0017642:	e8 c8 23 ff ff       	call   c0009a0f <malloc>
c0017647:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001764a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001764e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017655:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017659:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001765d:	0f af c2             	imul   eax,edx
c0017660:	99                   	cdq    
c0017661:	52                   	push   edx
c0017662:	50                   	push   eax
c0017663:	55                   	push   ebp
c0017664:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017667:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001766a:	83 c4 20             	add    esp,0x20
c001766d:	85 c0                	test   eax,eax
c001766f:	0f 84 00 06 00 00    	je     c0017c75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017675:	52                   	push   edx
c0017676:	31 d2                	xor    edx,edx
c0017678:	52                   	push   edx
c0017679:	50                   	push   eax
c001767a:	55                   	push   ebp
c001767b:	e8 6a 5d ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c0017680:	83 c4 10             	add    esp,0x10
c0017683:	85 c0                	test   eax,eax
c0017685:	0f 85 ea 05 00 00    	jne    c0017c75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001768b:	83 ec 0c             	sub    esp,0xc
c001768e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017692:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017696:	31 f6                	xor    esi,esi
c0017698:	0f af c2             	imul   eax,edx
c001769b:	50                   	push   eax
c001769c:	e8 6e 23 ff ff       	call   c0009a0f <malloc>
c00176a1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00176a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00176a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00176ab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00176af:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00176b3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00176b7:	0f af c2             	imul   eax,edx
c00176ba:	99                   	cdq    
c00176bb:	52                   	push   edx
c00176bc:	50                   	push   eax
c00176bd:	55                   	push   ebp
c00176be:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00176c1:	83 c4 20             	add    esp,0x20
c00176c4:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00176c8:	0f 86 8a 00 00 00    	jbe    c0017758 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00176ce:	0f b7 de             	movzx  ebx,si
c00176d1:	c1 e3 05             	shl    ebx,0x5
c00176d4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00176d8:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00176db:	75 75                	jne    c0017752 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00176dd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00176e0:	31 d2                	xor    edx,edx
c00176e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00176e6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00176e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176ed:	50                   	push   eax
c00176ee:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00176f1:	52                   	push   edx
c00176f2:	50                   	push   eax
c00176f3:	55                   	push   ebp
c00176f4:	e8 f1 5c ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c00176f9:	83 c4 10             	add    esp,0x10
c00176fc:	85 c0                	test   eax,eax
c00176fe:	0f 85 71 05 00 00    	jne    c0017c75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017704:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001770b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001770e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0017712:	31 d2                	xor    edx,edx
c0017714:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0017718:	83 ec 0c             	sub    esp,0xc
c001771b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001771f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017726:	50                   	push   eax
c0017727:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001772b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001772f:	52                   	push   edx
c0017730:	50                   	push   eax
c0017731:	55                   	push   ebp
c0017732:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017735:	83 c4 1c             	add    esp,0x1c
c0017738:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001773b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001773e:	50                   	push   eax
c001773f:	6a 00                	push   0x0
c0017741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017745:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017749:	50                   	push   eax
c001774a:	e8 35 8f fe ff       	call   c0000684 <memset>
c001774f:	83 c4 10             	add    esp,0x10
c0017752:	46                   	inc    esi
c0017753:	e9 6c ff ff ff       	jmp    c00176c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0017758:	53                   	push   ebx
c0017759:	31 db                	xor    ebx,ebx
c001775b:	68 00 01 00 00       	push   0x100
c0017760:	6a 00                	push   0x0
c0017762:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017766:	50                   	push   eax
c0017767:	e8 18 8f fe ff       	call   c0000684 <memset>
c001776c:	83 c4 0c             	add    esp,0xc
c001776f:	68 00 01 00 00       	push   0x100
c0017774:	6a 00                	push   0x0
c0017776:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001777d:	50                   	push   eax
c001777e:	e8 01 8f fe ff       	call   c0000684 <memset>
c0017783:	83 c4 10             	add    esp,0x10
c0017786:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001778e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017796:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001779e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00177a6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00177ae:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00177b2:	0f 86 30 01 00 00    	jbe    c00178e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00177b8:	0f b7 f3             	movzx  esi,bx
c00177bb:	6b f6 28             	imul   esi,esi,0x28
c00177be:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00177c2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00177c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00177c9:	52                   	push   edx
c00177ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00177ce:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00177d2:	8b 06                	mov    eax,DWORD PTR [esi]
c00177d4:	6b d2 28             	imul   edx,edx,0x28
c00177d7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00177db:	31 d2                	xor    edx,edx
c00177dd:	52                   	push   edx
c00177de:	50                   	push   eax
c00177df:	55                   	push   ebp
c00177e0:	e8 05 5c ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c00177e5:	83 c4 0c             	add    esp,0xc
c00177e8:	6a 20                	push   0x20
c00177ea:	6a 00                	push   0x0
c00177ec:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00177f3:	51                   	push   ecx
c00177f4:	e8 8b 8e fe ff       	call   c0000684 <memset>
c00177f9:	59                   	pop    ecx
c00177fa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00177fd:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017801:	52                   	push   edx
c0017802:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017809:	51                   	push   ecx
c001780a:	6a 00                	push   0x0
c001780c:	6a 1f                	push   0x1f
c001780e:	55                   	push   ebp
c001780f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017812:	83 c4 1c             	add    esp,0x1c
c0017815:	6a 09                	push   0x9
c0017817:	68 7a 5f 02 c0       	push   0xc0025f7a
c001781c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017823:	51                   	push   ecx
c0017824:	e8 57 8d fe ff       	call   c0000580 <memcmp>
c0017829:	83 c4 10             	add    esp,0x10
c001782c:	85 c0                	test   eax,eax
c001782e:	75 21                	jne    c0017851 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0017830:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017834:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017838:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001783c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017840:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017843:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001784a:	89 d0                	mov    eax,edx
c001784c:	40                   	inc    eax
c001784d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017851:	50                   	push   eax
c0017852:	6a 09                	push   0x9
c0017854:	68 84 5f 02 c0       	push   0xc0025f84
c0017859:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017860:	50                   	push   eax
c0017861:	e8 1a 8d fe ff       	call   c0000580 <memcmp>
c0017866:	83 c4 10             	add    esp,0x10
c0017869:	85 c0                	test   eax,eax
c001786b:	75 21                	jne    c001788e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001786d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017871:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017875:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017879:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001787d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017880:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017887:	89 d0                	mov    eax,edx
c0017889:	40                   	inc    eax
c001788a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001788e:	50                   	push   eax
c001788f:	50                   	push   eax
c0017890:	68 50 5f 02 c0       	push   0xc0025f50
c0017895:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001789c:	50                   	push   eax
c001789d:	e8 2a 8f fe ff       	call   c00007cc <strcmp>
c00178a2:	83 c4 10             	add    esp,0x10
c00178a5:	85 c0                	test   eax,eax
c00178a7:	75 0f                	jne    c00178b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00178a9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00178ac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00178b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00178b8:	50                   	push   eax
c00178b9:	50                   	push   eax
c00178ba:	68 58 5f 02 c0       	push   0xc0025f58
c00178bf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00178c6:	50                   	push   eax
c00178c7:	e8 00 8f fe ff       	call   c00007cc <strcmp>
c00178cc:	83 c4 10             	add    esp,0x10
c00178cf:	85 c0                	test   eax,eax
c00178d1:	75 0f                	jne    c00178e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00178d3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00178d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00178da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178de:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00178e2:	43                   	inc    ebx
c00178e3:	e9 c6 fe ff ff       	jmp    c00177ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00178e8:	31 d2                	xor    edx,edx
c00178ea:	50                   	push   eax
c00178eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00178ef:	52                   	push   edx
c00178f0:	50                   	push   eax
c00178f1:	55                   	push   ebp
c00178f2:	e8 f3 5a ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c00178f7:	58                   	pop    eax
c00178f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00178fc:	e8 0e 21 ff ff       	call   c0009a0f <malloc>
c0017901:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017904:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017908:	31 d2                	xor    edx,edx
c001790a:	58                   	pop    eax
c001790b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001790f:	53                   	push   ebx
c0017910:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017914:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017918:	52                   	push   edx
c0017919:	50                   	push   eax
c001791a:	55                   	push   ebp
c001791b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001791e:	83 c4 14             	add    esp,0x14
c0017921:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017925:	e8 e5 20 ff ff       	call   c0009a0f <malloc>
c001792a:	31 d2                	xor    edx,edx
c001792c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017930:	83 c4 0c             	add    esp,0xc
c0017933:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017937:	52                   	push   edx
c0017938:	50                   	push   eax
c0017939:	55                   	push   ebp
c001793a:	e8 ab 5a ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c001793f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017942:	31 d2                	xor    edx,edx
c0017944:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017947:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001794b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001794f:	52                   	push   edx
c0017950:	50                   	push   eax
c0017951:	55                   	push   ebp
c0017952:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017955:	83 c4 20             	add    esp,0x20
c0017958:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017960:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017964:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0017968:	0f 84 0b 03 00 00    	je     c0017c79 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001796e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0017975:	31 d2                	xor    edx,edx
c0017977:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001797b:	c1 e8 03             	shr    eax,0x3
c001797e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017982:	51                   	push   ecx
c0017983:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017987:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001798b:	52                   	push   edx
c001798c:	50                   	push   eax
c001798d:	55                   	push   ebp
c001798e:	e8 57 5a ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c0017993:	5b                   	pop    ebx
c0017994:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017998:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001799f:	e8 6b 20 ff ff       	call   c0009a0f <malloc>
c00179a4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00179a7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179ab:	31 d2                	xor    edx,edx
c00179ad:	5e                   	pop    esi
c00179ae:	8d 44 24 58          	lea    eax,[esp+0x58]
c00179b2:	50                   	push   eax
c00179b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179bb:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00179c2:	52                   	push   edx
c00179c3:	50                   	push   eax
c00179c4:	55                   	push   ebp
c00179c5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00179c8:	83 c4 20             	add    esp,0x20
c00179cb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00179d3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00179d7:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00179db:	0f 8d 7c 02 00 00    	jge    c0017c5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c00179e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00179e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179e9:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c00179ee:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00179f1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00179f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179f9:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c00179fd:	89 d8                	mov    eax,ebx
c00179ff:	c1 e8 08             	shr    eax,0x8
c0017a02:	89 c6                	mov    esi,eax
c0017a04:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017a08:	c1 e6 04             	shl    esi,0x4
c0017a0b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0017a0f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0017a12:	85 d2                	test   edx,edx
c0017a14:	0f 85 bf 00 00 00    	jne    c0017ad9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017a1a:	83 ec 0c             	sub    esp,0xc
c0017a1d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a21:	03 06                	add    eax,DWORD PTR [esi]
c0017a23:	50                   	push   eax
c0017a24:	e8 4b f8 ff ff       	call   c0017274 <Thr::getAddressOfKernelSymbol(char const*)>
c0017a29:	83 c4 10             	add    esp,0x10
c0017a2c:	89 c2                	mov    edx,eax
c0017a2e:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0017a33:	85 c0                	test   eax,eax
c0017a35:	0f 85 9e 00 00 00    	jne    c0017ad9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017a3b:	83 ec 0c             	sub    esp,0xc
c0017a3e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a42:	03 06                	add    eax,DWORD PTR [esi]
c0017a44:	50                   	push   eax
c0017a45:	e8 c6 0e ff ff       	call   c0008910 <Krnl::resolveCompatibilitySymbol(char*)>
c0017a4a:	83 c4 10             	add    esp,0x10
c0017a4d:	89 c2                	mov    edx,eax
c0017a4f:	85 c0                	test   eax,eax
c0017a51:	0f 85 82 00 00 00    	jne    c0017ad9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017a57:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017a5b:	50                   	push   eax
c0017a5c:	50                   	push   eax
c0017a5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a61:	03 06                	add    eax,DWORD PTR [esi]
c0017a63:	50                   	push   eax
c0017a64:	68 8e 5f 02 c0       	push   0xc0025f8e
c0017a69:	e8 91 52 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0017a6e:	58                   	pop    eax
c0017a6f:	5a                   	pop    edx
c0017a70:	68 a8 5f 02 c0       	push   0xc0025fa8
c0017a75:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017a7c:	50                   	push   eax
c0017a7d:	e8 be 8c fe ff       	call   c0000740 <strcpy>
c0017a82:	59                   	pop    ecx
c0017a83:	58                   	pop    eax
c0017a84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a88:	03 06                	add    eax,DWORD PTR [esi]
c0017a8a:	50                   	push   eax
c0017a8b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017a92:	50                   	push   eax
c0017a93:	e8 e8 8d fe ff       	call   c0000880 <strcat>
c0017a98:	58                   	pop    eax
c0017a99:	5a                   	pop    edx
c0017a9a:	68 3e 60 02 c0       	push   0xc002603e
c0017a9f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017aa6:	50                   	push   eax
c0017aa7:	e8 d4 8d fe ff       	call   c0000880 <strcat>
c0017aac:	83 c4 10             	add    esp,0x10
c0017aaf:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017ab4:	0f 84 5d 01 00 00    	je     c0017c17 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017aba:	83 ec 0c             	sub    esp,0xc
c0017abd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017ac4:	50                   	push   eax
c0017ac5:	e8 f1 ce ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0017aca:	83 c4 10             	add    esp,0x10
c0017acd:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017ad1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017ad5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017ad9:	80 fb 01             	cmp    bl,0x1
c0017adc:	0f 85 88 00 00 00    	jne    c0017b6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0017ae2:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0017ae9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017aed:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0017af1:	01 ce                	add    esi,ecx
c0017af3:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017af9:	0f 94 c0             	sete   al
c0017afc:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017b02:	0f 94 c3             	sete   bl
c0017b05:	09 c3                	or     ebx,eax
c0017b07:	8b 06                	mov    eax,DWORD PTR [esi]
c0017b09:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017b0e:	74 41                	je     c0017b51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0017b10:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017b13:	84 db                	test   bl,bl
c0017b15:	75 15                	jne    c0017b2c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0017b17:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017b1b:	66 83 f8 0c          	cmp    ax,0xc
c0017b1f:	76 05                	jbe    c0017b26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0017b21:	b8 0c 00 00 00       	mov    eax,0xc
c0017b26:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0017b2a:	76 37                	jbe    c0017b63 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017b2c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0017b30:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017b35:	0f 84 dc 00 00 00    	je     c0017c17 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017b3b:	83 ec 0c             	sub    esp,0xc
c0017b3e:	68 bf 5f 02 c0       	push   0xc0025fbf
c0017b43:	e8 73 ce ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0017b48:	83 c4 10             	add    esp,0x10
c0017b4b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0017b4f:	eb 12                	jmp    c0017b63 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017b51:	01 c1                	add    ecx,eax
c0017b53:	84 db                	test   bl,bl
c0017b55:	75 0c                	jne    c0017b63 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017b57:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017b5b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0017b5f:	77 02                	ja     c0017b63 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017b61:	01 d1                	add    ecx,edx
c0017b63:	89 0e                	mov    DWORD PTR [esi],ecx
c0017b65:	e9 ea 00 00 00       	jmp    c0017c54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017b6a:	80 fb 02             	cmp    bl,0x2
c0017b6d:	75 7c                	jne    c0017beb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0017b6f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0017b76:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0017b7a:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0017b7e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017b84:	74 20                	je     c0017ba6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017b86:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017b8c:	74 18                	je     c0017ba6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017b8e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017b92:	b9 0a 00 00 00       	mov    ecx,0xa
c0017b97:	66 83 f8 0e          	cmp    ax,0xe
c0017b9b:	77 03                	ja     c0017ba0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0017b9d:	8d 48 fc             	lea    ecx,[eax-0x4]
c0017ba0:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0017ba4:	76 1f                	jbe    c0017bc5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0017ba6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0017baa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017baf:	74 66                	je     c0017c17 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017bb1:	83 ec 0c             	sub    esp,0xc
c0017bb4:	68 db 5f 02 c0       	push   0xc0025fdb
c0017bb9:	e8 fd cd ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0017bbe:	83 c4 10             	add    esp,0x10
c0017bc1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017bc5:	8b 06                	mov    eax,DWORD PTR [esi]
c0017bc7:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017bcc:	74 13                	je     c0017be1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0017bce:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017bd2:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0017bd9:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0017bdd:	01 c8                	add    eax,ecx
c0017bdf:	eb 04                	jmp    c0017be5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0017be1:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0017be5:	01 c2                	add    edx,eax
c0017be7:	89 16                	mov    DWORD PTR [esi],edx
c0017be9:	eb 69                	jmp    c0017c54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017beb:	0f b6 db             	movzx  ebx,bl
c0017bee:	50                   	push   eax
c0017bef:	50                   	push   eax
c0017bf0:	53                   	push   ebx
c0017bf1:	68 f7 5f 02 c0       	push   0xc0025ff7
c0017bf6:	e8 04 51 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0017bfb:	83 c4 10             	add    esp,0x10
c0017bfe:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017c03:	74 12                	je     c0017c17 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017c05:	83 ec 0c             	sub    esp,0xc
c0017c08:	68 02 60 02 c0       	push   0xc0026002
c0017c0d:	e8 a9 cd ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0017c12:	83 c4 10             	add    esp,0x10
c0017c15:	eb 3d                	jmp    c0017c54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017c17:	83 ec 0c             	sub    esp,0xc
c0017c1a:	55                   	push   ebp
c0017c1b:	e8 6a 57 ff ff       	call   c000d38a <File::close()>
c0017c20:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017c23:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017c26:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017c29:	59                   	pop    ecx
c0017c2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c2e:	e8 ec 1d ff ff       	call   c0009a1f <free>
c0017c33:	5b                   	pop    ebx
c0017c34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c38:	e8 e2 1d ff ff       	call   c0009a1f <free>
c0017c3d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017c40:	e8 da 1d ff ff       	call   c0009a1f <free>
c0017c45:	5e                   	pop    esi
c0017c46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c4a:	e8 d0 1d ff ff       	call   c0009a1f <free>
c0017c4f:	83 c4 10             	add    esp,0x10
c0017c52:	eb 21                	jmp    c0017c75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017c54:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0017c58:	e9 76 fd ff ff       	jmp    c00179d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0017c5d:	83 ec 0c             	sub    esp,0xc
c0017c60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c64:	e8 b6 1d ff ff       	call   c0009a1f <free>
c0017c69:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0017c6d:	83 c4 10             	add    esp,0x10
c0017c70:	e9 eb fc ff ff       	jmp    c0017960 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0017c75:	31 c0                	xor    eax,eax
c0017c77:	eb 33                	jmp    c0017cac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0017c79:	83 ec 0c             	sub    esp,0xc
c0017c7c:	55                   	push   ebp
c0017c7d:	e8 08 57 ff ff       	call   c000d38a <File::close()>
c0017c82:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017c85:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017c88:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017c8b:	58                   	pop    eax
c0017c8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c90:	e8 8a 1d ff ff       	call   c0009a1f <free>
c0017c95:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017c98:	e8 82 1d ff ff       	call   c0009a1f <free>
c0017c9d:	5a                   	pop    edx
c0017c9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ca2:	e8 78 1d ff ff       	call   c0009a1f <free>
c0017ca7:	83 c4 10             	add    esp,0x10
c0017caa:	b0 01                	mov    al,0x1
c0017cac:	81 c4 5c 03 00 00    	add    esp,0x35c
c0017cb2:	5b                   	pop    ebx
c0017cb3:	5e                   	pop    esi
c0017cb4:	5f                   	pop    edi
c0017cb5:	5d                   	pop    ebp
c0017cb6:	c3                   	ret    

c0017cb7 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017cb7:	56                   	push   esi
c0017cb8:	31 d2                	xor    edx,edx
c0017cba:	53                   	push   ebx
c0017cbb:	8b 1d a0 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028da0
c0017cc1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017cc5:	39 d3                	cmp    ebx,edx
c0017cc7:	7e 1b                	jle    c0017ce4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017cc9:	8b 04 95 c0 8f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7040]
c0017cd0:	39 c8                	cmp    eax,ecx
c0017cd2:	77 0d                	ja     c0017ce1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017cd4:	8b 34 95 c0 8d 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd7240]
c0017cdb:	01 c6                	add    esi,eax
c0017cdd:	39 ce                	cmp    esi,ecx
c0017cdf:	77 05                	ja     c0017ce6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0017ce1:	42                   	inc    edx
c0017ce2:	eb e1                	jmp    c0017cc5 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0017ce4:	31 c0                	xor    eax,eax
c0017ce6:	5b                   	pop    ebx
c0017ce7:	5e                   	pop    esi
c0017ce8:	c3                   	ret    

c0017ce9 <Thr::getDriverNameFromAddress(unsigned long)>:
c0017ce9:	53                   	push   ebx
c0017cea:	31 c0                	xor    eax,eax
c0017cec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017cf0:	8b 1d a0 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028da0
c0017cf6:	39 c3                	cmp    ebx,eax
c0017cf8:	7e 22                	jle    c0017d1c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0017cfa:	8b 14 85 c0 8f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7040]
c0017d01:	39 ca                	cmp    edx,ecx
c0017d03:	77 14                	ja     c0017d19 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017d05:	03 14 85 c0 8d 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd7240]
c0017d0c:	39 ca                	cmp    edx,ecx
c0017d0e:	76 09                	jbe    c0017d19 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017d10:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c0017d17:	eb 05                	jmp    c0017d1e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0017d19:	40                   	inc    eax
c0017d1a:	eb da                	jmp    c0017cf6 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0017d1c:	31 c0                	xor    eax,eax
c0017d1e:	5b                   	pop    ebx
c0017d1f:	c3                   	ret    

c0017d20 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017d20:	53                   	push   ebx
c0017d21:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017d25:	53                   	push   ebx
c0017d26:	e8 8c ff ff ff       	call   c0017cb7 <Thr::getDriverBaseFromAddress(unsigned long)>
c0017d2b:	5a                   	pop    edx
c0017d2c:	31 d2                	xor    edx,edx
c0017d2e:	85 c0                	test   eax,eax
c0017d30:	74 04                	je     c0017d36 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0017d32:	89 da                	mov    edx,ebx
c0017d34:	29 c2                	sub    edx,eax
c0017d36:	89 d0                	mov    eax,edx
c0017d38:	5b                   	pop    ebx
c0017d39:	c3                   	ret    

c0017d3a <Thr::loadDLL(char const*, bool)>:
c0017d3a:	55                   	push   ebp
c0017d3b:	57                   	push   edi
c0017d3c:	56                   	push   esi
c0017d3d:	53                   	push   ebx
c0017d3e:	81 ec 34 01 00 00    	sub    esp,0x134
c0017d44:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0017d4b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0017d52:	56                   	push   esi
c0017d53:	68 1a 60 02 c0       	push   0xc002601a
c0017d58:	e8 a2 4f ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0017d5d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017d64:	e8 a6 1c ff ff       	call   c0009a0f <malloc>
c0017d69:	83 c4 0c             	add    esp,0xc
c0017d6c:	89 c3                	mov    ebx,eax
c0017d6e:	ff 35 90 95 02 c0    	push   DWORD PTR ds:0xc0029590
c0017d74:	56                   	push   esi
c0017d75:	50                   	push   eax
c0017d76:	e8 ef 54 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0017d7b:	83 c4 10             	add    esp,0x10
c0017d7e:	85 db                	test   ebx,ebx
c0017d80:	75 3c                	jne    c0017dbe <Thr::loadDLL(char const*, bool)+0x84>
c0017d82:	89 f8                	mov    eax,edi
c0017d84:	84 c0                	test   al,al
c0017d86:	0f 84 d2 01 00 00    	je     c0017f5e <Thr::loadDLL(char const*, bool)+0x224>
c0017d8c:	55                   	push   ebp
c0017d8d:	55                   	push   ebp
c0017d8e:	68 2b 60 02 c0       	push   0xc002602b
c0017d93:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0017d97:	55                   	push   ebp
c0017d98:	e8 a3 89 fe ff       	call   c0000740 <strcpy>
c0017d9d:	58                   	pop    eax
c0017d9e:	5a                   	pop    edx
c0017d9f:	56                   	push   esi
c0017da0:	55                   	push   ebp
c0017da1:	e8 da 8a fe ff       	call   c0000880 <strcat>
c0017da6:	59                   	pop    ecx
c0017da7:	58                   	pop    eax
c0017da8:	68 3e 60 02 c0       	push   0xc002603e
c0017dad:	55                   	push   ebp
c0017dae:	e8 cd 8a fe ff       	call   c0000880 <strcat>
c0017db3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017db6:	e8 00 cc ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0017dbb:	83 c4 10             	add    esp,0x10
c0017dbe:	51                   	push   ecx
c0017dbf:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0017dc3:	50                   	push   eax
c0017dc4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017dc8:	50                   	push   eax
c0017dc9:	53                   	push   ebx
c0017dca:	e8 09 58 ff ff       	call   c000d5d8 <File::stat(unsigned long long*, bool*)>
c0017dcf:	83 c4 10             	add    esp,0x10
c0017dd2:	85 db                	test   ebx,ebx
c0017dd4:	74 0c                	je     c0017de2 <Thr::loadDLL(char const*, bool)+0xa8>
c0017dd6:	83 ec 0c             	sub    esp,0xc
c0017dd9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ddb:	53                   	push   ebx
c0017ddc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017ddf:	83 c4 10             	add    esp,0x10
c0017de2:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0017de7:	75 0a                	jne    c0017df3 <Thr::loadDLL(char const*, bool)+0xb9>
c0017de9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ded:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0017df1:	75 3c                	jne    c0017e2f <Thr::loadDLL(char const*, bool)+0xf5>
c0017df3:	89 f8                	mov    eax,edi
c0017df5:	84 c0                	test   al,al
c0017df7:	0f 84 49 01 00 00    	je     c0017f46 <Thr::loadDLL(char const*, bool)+0x20c>
c0017dfd:	51                   	push   ecx
c0017dfe:	51                   	push   ecx
c0017dff:	68 2b 60 02 c0       	push   0xc002602b
c0017e04:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0017e08:	53                   	push   ebx
c0017e09:	e8 32 89 fe ff       	call   c0000740 <strcpy>
c0017e0e:	5d                   	pop    ebp
c0017e0f:	58                   	pop    eax
c0017e10:	56                   	push   esi
c0017e11:	53                   	push   ebx
c0017e12:	e8 69 8a fe ff       	call   c0000880 <strcat>
c0017e17:	58                   	pop    eax
c0017e18:	5a                   	pop    edx
c0017e19:	68 3e 60 02 c0       	push   0xc002603e
c0017e1e:	53                   	push   ebx
c0017e1f:	e8 5c 8a fe ff       	call   c0000880 <strcat>
c0017e24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e27:	e8 8f cb ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0017e2c:	83 c4 10             	add    esp,0x10
c0017e2f:	52                   	push   edx
c0017e30:	6a 03                	push   0x3
c0017e32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e36:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017e3a:	05 ff 0f 00 00       	add    eax,0xfff
c0017e3f:	83 d2 00             	adc    edx,0x0
c0017e42:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017e46:	50                   	push   eax
c0017e47:	ff 35 70 81 02 c0    	push   DWORD PTR ds:0xc0028170
c0017e4d:	e8 30 43 ff ff       	call   c000c182 <VAS::allocatePages(int, int)>
c0017e52:	59                   	pop    ecx
c0017e53:	89 c3                	mov    ebx,eax
c0017e55:	5d                   	pop    ebp
c0017e56:	50                   	push   eax
c0017e57:	68 be 41 02 c0       	push   0xc00241be
c0017e5c:	e8 9e 4e ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0017e61:	89 34 24             	mov    DWORD PTR [esp],esi
c0017e64:	e8 37 88 fe ff       	call   c00006a0 <strlen>
c0017e69:	8b 2d a0 8d 02 c0    	mov    ebp,DWORD PTR ds:0xc0028da0
c0017e6f:	40                   	inc    eax
c0017e70:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e73:	e8 97 1b ff ff       	call   c0009a0f <malloc>
c0017e78:	89 04 ad c0 91 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6e40],eax
c0017e7f:	58                   	pop    eax
c0017e80:	a1 a0 8d 02 c0       	mov    eax,ds:0xc0028da0
c0017e85:	5a                   	pop    edx
c0017e86:	56                   	push   esi
c0017e87:	ff 34 85 c0 91 02 c0 	push   DWORD PTR [eax*4-0x3ffd6e40]
c0017e8e:	e8 ad 88 fe ff       	call   c0000740 <strcpy>
c0017e93:	a1 a0 8d 02 c0       	mov    eax,ds:0xc0028da0
c0017e98:	8d 50 01             	lea    edx,[eax+0x1]
c0017e9b:	89 1c 85 c0 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7040],ebx
c0017ea2:	89 15 a0 8d 02 c0    	mov    DWORD PTR ds:0xc0028da0,edx
c0017ea8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017eac:	83 c4 0c             	add    esp,0xc
c0017eaf:	89 14 85 c0 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7240],edx
c0017eb6:	6a 01                	push   0x1
c0017eb8:	53                   	push   ebx
c0017eb9:	56                   	push   esi
c0017eba:	e8 c2 f6 ff ff       	call   c0017581 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0017ebf:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017ec3:	83 c4 10             	add    esp,0x10
c0017ec6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017ecb:	0f 85 89 00 00 00    	jne    c0017f5a <Thr::loadDLL(char const*, bool)+0x220>
c0017ed1:	89 f8                	mov    eax,edi
c0017ed3:	84 c0                	test   al,al
c0017ed5:	74 73                	je     c0017f4a <Thr::loadDLL(char const*, bool)+0x210>
c0017ed7:	83 ec 0c             	sub    esp,0xc
c0017eda:	68 40 60 02 c0       	push   0xc0026040
c0017edf:	e8 d7 ca ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0017ee4:	83 c4 10             	add    esp,0x10
c0017ee7:	eb 61                	jmp    c0017f4a <Thr::loadDLL(char const*, bool)+0x210>
c0017ee9:	50                   	push   eax
c0017eea:	50                   	push   eax
c0017eeb:	89 e8                	mov    eax,ebp
c0017eed:	c1 e0 0c             	shl    eax,0xc
c0017ef0:	01 d8                	add    eax,ebx
c0017ef2:	50                   	push   eax
c0017ef3:	ff 35 70 81 02 c0    	push   DWORD PTR ds:0xc0028170
c0017ef9:	e8 ec 3d ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c0017efe:	83 c4 10             	add    esp,0x10
c0017f01:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f03:	a8 60                	test   al,0x60
c0017f05:	75 11                	jne    c0017f18 <Thr::loadDLL(char const*, bool)+0x1de>
c0017f07:	83 ec 0c             	sub    esp,0xc
c0017f0a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017f0f:	50                   	push   eax
c0017f10:	e8 2e 21 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c0017f15:	83 c4 10             	add    esp,0x10
c0017f18:	45                   	inc    ebp
c0017f19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017f1d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f21:	05 ff 0f 00 00       	add    eax,0xfff
c0017f26:	bf 00 00 00 00       	mov    edi,0x0
c0017f2b:	83 d2 00             	adc    edx,0x0
c0017f2e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017f32:	c1 ea 0c             	shr    edx,0xc
c0017f35:	39 c5                	cmp    ebp,eax
c0017f37:	89 d1                	mov    ecx,edx
c0017f39:	89 f8                	mov    eax,edi
c0017f3b:	19 c8                	sbb    eax,ecx
c0017f3d:	72 aa                	jb     c0017ee9 <Thr::loadDLL(char const*, bool)+0x1af>
c0017f3f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017f44:	75 18                	jne    c0017f5e <Thr::loadDLL(char const*, bool)+0x224>
c0017f46:	31 db                	xor    ebx,ebx
c0017f48:	eb 14                	jmp    c0017f5e <Thr::loadDLL(char const*, bool)+0x224>
c0017f4a:	83 ec 0c             	sub    esp,0xc
c0017f4d:	68 5f 60 02 c0       	push   0xc002605f
c0017f52:	e8 64 ca ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0017f57:	83 c4 10             	add    esp,0x10
c0017f5a:	31 ed                	xor    ebp,ebp
c0017f5c:	eb bb                	jmp    c0017f19 <Thr::loadDLL(char const*, bool)+0x1df>
c0017f5e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017f64:	89 d8                	mov    eax,ebx
c0017f66:	5b                   	pop    ebx
c0017f67:	5e                   	pop    esi
c0017f68:	5f                   	pop    edi
c0017f69:	5d                   	pop    ebp
c0017f6a:	c3                   	ret    

c0017f6b <Thr::executeDLL(unsigned long, void*)>:
c0017f6b:	56                   	push   esi
c0017f6c:	53                   	push   ebx
c0017f6d:	52                   	push   edx
c0017f6e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017f72:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017f76:	85 db                	test   ebx,ebx
c0017f78:	75 10                	jne    c0017f8a <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017f7a:	83 ec 0c             	sub    esp,0xc
c0017f7d:	68 7b 60 02 c0       	push   0xc002607b
c0017f82:	e8 34 ca ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0017f87:	83 c4 10             	add    esp,0x10
c0017f8a:	50                   	push   eax
c0017f8b:	50                   	push   eax
c0017f8c:	53                   	push   ebx
c0017f8d:	68 a5 60 02 c0       	push   0xc00260a5
c0017f92:	e8 68 4d ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0017f97:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017f9b:	89 d8                	mov    eax,ebx
c0017f9d:	83 c4 14             	add    esp,0x14
c0017fa0:	5b                   	pop    ebx
c0017fa1:	5e                   	pop    esi
c0017fa2:	ff e0                	jmp    eax

c0017fa4 <userModeEntryPoint(void*)>:
c0017fa4:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c0017fa9:	48                   	dec    eax
c0017faa:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c0017faf:	75 03                	jne    c0017fb4 <userModeEntryPoint(void*)+0x10>
c0017fb1:	fb                   	sti    
c0017fb2:	66 90                	xchg   ax,ax
c0017fb4:	fb                   	sti    
c0017fb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017fbd:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0017fc3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017fc7:	e9 93 82 fe ff       	jmp    c000025f <goToUsermode>

c0017fcc <changeTSS>:
c0017fcc:	83 ec 14             	sub    esp,0x14
c0017fcf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fd4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017fd7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0017fdc:	c1 e2 15             	shl    edx,0x15
c0017fdf:	29 d0                	sub    eax,edx
c0017fe1:	50                   	push   eax
c0017fe2:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0017fe7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017fed:	05 7c 11 00 00       	add    eax,0x117c
c0017ff2:	50                   	push   eax
c0017ff3:	e8 34 33 ff ff       	call   c000b32c <TSS::setESP(unsigned long)>
c0017ff8:	83 c4 1c             	add    esp,0x1c
c0017ffb:	c3                   	ret    

c0017ffc <switchToThread(ThreadControlBlock*)>:
c0017ffc:	57                   	push   edi
c0017ffd:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c0018002:	56                   	push   esi
c0018003:	85 c0                	test   eax,eax
c0018005:	53                   	push   ebx
c0018006:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001800a:	0f 85 90 00 00 00    	jne    c00180a0 <switchToThread(ThreadControlBlock*)+0xa4>
c0018010:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c0018013:	3c ff                	cmp    al,0xff
c0018015:	0f 84 81 00 00 00    	je     c001809c <switchToThread(ThreadControlBlock*)+0xa0>
c001801b:	0f b6 d0             	movzx  edx,al
c001801e:	b8 00 04 00 00       	mov    eax,0x400
c0018023:	29 d0                	sub    eax,edx
c0018025:	d1 f8                	sar    eax,1
c0018027:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c001802a:	66 90                	xchg   ax,ax
c001802c:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c001802f:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0018034:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001803a:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0018041:	74 4d                	je     c0018090 <switchToThread(ThreadControlBlock*)+0x94>
c0018043:	0f 31                	rdtsc  
c0018045:	a3 a8 95 02 c0       	mov    ds:0xc00295a8,eax
c001804a:	89 c6                	mov    esi,eax
c001804c:	89 d7                	mov    edi,edx
c001804e:	2b 35 98 95 02 c0    	sub    esi,DWORD PTR ds:0xc0029598
c0018054:	89 15 ac 95 02 c0    	mov    DWORD PTR ds:0xc00295ac,edx
c001805a:	1b 3d 9c 95 02 c0    	sbb    edi,DWORD PTR ds:0xc002959c
c0018060:	89 35 a0 95 02 c0    	mov    DWORD PTR ds:0xc00295a0,esi
c0018066:	a3 98 95 02 c0       	mov    ds:0xc0029598,eax
c001806b:	89 3d a4 95 02 c0    	mov    DWORD PTR ds:0xc00295a4,edi
c0018071:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018077:	89 15 9c 95 02 c0    	mov    DWORD PTR ds:0xc002959c,edx
c001807d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018080:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0018083:	01 c6                	add    esi,eax
c0018085:	11 d7                	adc    edi,edx
c0018087:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001808a:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001808d:	8d 76 00             	lea    esi,[esi+0x0]
c0018090:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0018094:	5b                   	pop    ebx
c0018095:	5e                   	pop    esi
c0018096:	5f                   	pop    edi
c0018097:	e9 fb 81 fe ff       	jmp    c0000297 <switchToThreadASM>
c001809c:	31 c0                	xor    eax,eax
c001809e:	eb 8c                	jmp    c001802c <switchToThread(ThreadControlBlock*)+0x30>
c00180a0:	5b                   	pop    ebx
c00180a1:	c7 05 60 95 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029560,0x1
c00180ab:	5e                   	pop    esi
c00180ac:	5f                   	pop    edi
c00180ad:	c3                   	ret    
c00180ae:	66 90                	xchg   ax,ax

c00180b0 <Process::addArgs(char**)>:
c00180b0:	57                   	push   edi
c00180b1:	56                   	push   esi
c00180b2:	53                   	push   ebx
c00180b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00180b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00180bb:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00180c5:	85 ff                	test   edi,edi
c00180c7:	74 43                	je     c001810c <Process::addArgs(char**)+0x5c>
c00180c9:	8b 07                	mov    eax,DWORD PTR [edi]
c00180cb:	85 c0                	test   eax,eax
c00180cd:	74 3d                	je     c001810c <Process::addArgs(char**)+0x5c>
c00180cf:	31 db                	xor    ebx,ebx
c00180d1:	8d 76 00             	lea    esi,[esi+0x0]
c00180d4:	83 ec 0c             	sub    esp,0xc
c00180d7:	50                   	push   eax
c00180d8:	e8 c3 85 fe ff       	call   c00006a0 <strlen>
c00180dd:	40                   	inc    eax
c00180de:	89 04 24             	mov    DWORD PTR [esp],eax
c00180e1:	e8 29 19 ff ff       	call   c0009a0f <malloc>
c00180e6:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00180ed:	5a                   	pop    edx
c00180ee:	59                   	pop    ecx
c00180ef:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00180f2:	43                   	inc    ebx
c00180f3:	50                   	push   eax
c00180f4:	e8 47 86 fe ff       	call   c0000740 <strcpy>
c00180f9:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c00180ff:	83 c4 10             	add    esp,0x10
c0018102:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018105:	85 c0                	test   eax,eax
c0018107:	75 cb                	jne    c00180d4 <Process::addArgs(char**)+0x24>
c0018109:	8d 76 00             	lea    esi,[esi+0x0]
c001810c:	5b                   	pop    ebx
c001810d:	5e                   	pop    esi
c001810e:	5f                   	pop    edi
c001810f:	c3                   	ret    

c0018110 <Process::Process(char const*, Process*, char**)>:
c0018110:	56                   	push   esi
c0018111:	53                   	push   ebx
c0018112:	83 ec 14             	sub    esp,0x14
c0018115:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018119:	05 0c 02 00 00       	add    eax,0x20c
c001811e:	bb 07 00 00 00       	mov    ebx,0x7
c0018123:	89 c6                	mov    esi,eax
c0018125:	8d 76 00             	lea    esi,[esi+0x0]
c0018128:	85 db                	test   ebx,ebx
c001812a:	78 14                	js     c0018140 <Process::Process(char const*, Process*, char**)+0x30>
c001812c:	83 ec 0c             	sub    esp,0xc
c001812f:	56                   	push   esi
c0018130:	e8 5b af 00 00       	call   c0023090 <ThreadControlBlock::ThreadControlBlock()>
c0018135:	83 c4 10             	add    esp,0x10
c0018138:	83 c6 5f             	add    esi,0x5f
c001813b:	4b                   	dec    ebx
c001813c:	eb ea                	jmp    c0018128 <Process::Process(char const*, Process*, char**)+0x18>
c001813e:	66 90                	xchg   ax,ax
c0018140:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018144:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001814b:	83 ec 0c             	sub    esp,0xc
c001814e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018152:	e8 ed c6 ff ff       	call   c0014844 <Krnl::newProcessEnv(Process*)>
c0018157:	83 c4 10             	add    esp,0x10
c001815a:	89 c2                	mov    edx,eax
c001815c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018160:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0018166:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001816a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0018173:	a1 70 7a 02 c0       	mov    eax,ds:0xc0027a70
c0018178:	8d 50 01             	lea    edx,[eax+0x1]
c001817b:	89 15 70 7a 02 c0    	mov    DWORD PTR ds:0xc0027a70,edx
c0018181:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018185:	89 02                	mov    DWORD PTR [edx],eax
c0018187:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001818f:	83 ec 0c             	sub    esp,0xc
c0018192:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018196:	e8 74 18 ff ff       	call   c0009a0f <malloc>
c001819b:	83 c4 10             	add    esp,0x10
c001819e:	89 c3                	mov    ebx,eax
c00181a0:	83 ec 08             	sub    esp,0x8
c00181a3:	6a 00                	push   0x0
c00181a5:	53                   	push   ebx
c00181a6:	e8 7f 43 ff ff       	call   c000c52a <VAS::VAS(bool)>
c00181ab:	83 c4 10             	add    esp,0x10
c00181ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181b2:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00181b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181bc:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00181c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181ce:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00181d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181d8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00181de:	85 c0                	test   eax,eax
c00181e0:	74 42                	je     c0018224 <Process::Process(char const*, Process*, char**)+0x114>
c00181e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181e6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00181ec:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00181f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181f6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00181fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018200:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018206:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001820c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018210:	05 0c 01 00 00       	add    eax,0x10c
c0018215:	83 ec 08             	sub    esp,0x8
c0018218:	52                   	push   edx
c0018219:	50                   	push   eax
c001821a:	e8 21 85 fe ff       	call   c0000740 <strcpy>
c001821f:	83 c4 10             	add    esp,0x10
c0018222:	eb 64                	jmp    c0018288 <Process::Process(char const*, Process*, char**)+0x178>
c0018224:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001822c:	83 ec 0c             	sub    esp,0xc
c001822f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018233:	e8 d7 17 ff ff       	call   c0009a0f <malloc>
c0018238:	83 c4 10             	add    esp,0x10
c001823b:	89 c3                	mov    ebx,eax
c001823d:	83 ec 08             	sub    esp,0x8
c0018240:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018244:	53                   	push   ebx
c0018245:	e8 f2 2d ff ff       	call   c000b03c <VgaText::VgaText(char const*)>
c001824a:	83 c4 10             	add    esp,0x10
c001824d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018251:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0018257:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001825b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018261:	83 ec 0c             	sub    esp,0xc
c0018264:	50                   	push   eax
c0018265:	e8 91 25 ff ff       	call   c000a7fb <addToTerminalCycle(VgaText*)>
c001826a:	83 c4 10             	add    esp,0x10
c001826d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018271:	05 0c 01 00 00       	add    eax,0x10c
c0018276:	83 ec 08             	sub    esp,0x8
c0018279:	68 c4 60 02 c0       	push   0xc00260c4
c001827e:	50                   	push   eax
c001827f:	e8 bc 84 fe ff       	call   c0000740 <strcpy>
c0018284:	83 c4 10             	add    esp,0x10
c0018287:	90                   	nop
c0018288:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001828c:	83 c0 0c             	add    eax,0xc
c001828f:	83 ec 08             	sub    esp,0x8
c0018292:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018296:	50                   	push   eax
c0018297:	e8 a4 84 fe ff       	call   c0000740 <strcpy>
c001829c:	83 c4 10             	add    esp,0x10
c001829f:	83 ec 08             	sub    esp,0x8
c00182a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00182a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182aa:	e8 01 fe ff ff       	call   c00180b0 <Process::addArgs(char**)>
c00182af:	83 c4 10             	add    esp,0x10
c00182b2:	83 ec 08             	sub    esp,0x8
c00182b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182bd:	e8 89 ed ff ff       	call   c001704b <Thr::loadProgramIntoMemory(Process*, char const*)>
c00182c2:	83 c4 10             	add    esp,0x10
c00182c5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00182c9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00182cd:	83 f0 01             	xor    eax,0x1
c00182d0:	88 c2                	mov    dl,al
c00182d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182d6:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00182dc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00182e1:	83 ec 08             	sub    esp,0x8
c00182e4:	50                   	push   eax
c00182e5:	68 1c 61 02 c0       	push   0xc002611c
c00182ea:	e8 10 4a ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00182ef:	83 c4 10             	add    esp,0x10
c00182f2:	90                   	nop
c00182f3:	83 c4 14             	add    esp,0x14
c00182f6:	5b                   	pop    ebx
c00182f7:	5e                   	pop    esi
c00182f8:	c3                   	ret    
c00182f9:	90                   	nop
c00182fa:	66 90                	xchg   ax,ax

c00182fc <Process::Process(bool, char const*, Process*, char**)>:
c00182fc:	56                   	push   esi
c00182fd:	53                   	push   ebx
c00182fe:	83 ec 24             	sub    esp,0x24
c0018301:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018305:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018309:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001830d:	05 0c 02 00 00       	add    eax,0x20c
c0018312:	bb 07 00 00 00       	mov    ebx,0x7
c0018317:	89 c6                	mov    esi,eax
c0018319:	8d 76 00             	lea    esi,[esi+0x0]
c001831c:	85 db                	test   ebx,ebx
c001831e:	78 14                	js     c0018334 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0018320:	83 ec 0c             	sub    esp,0xc
c0018323:	56                   	push   esi
c0018324:	e8 67 ad 00 00       	call   c0023090 <ThreadControlBlock::ThreadControlBlock()>
c0018329:	83 c4 10             	add    esp,0x10
c001832c:	83 c6 5f             	add    esi,0x5f
c001832f:	4b                   	dec    ebx
c0018330:	eb ea                	jmp    c001831c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0018332:	66 90                	xchg   ax,ax
c0018334:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018338:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001833f:	83 ec 0c             	sub    esp,0xc
c0018342:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018346:	e8 f9 c4 ff ff       	call   c0014844 <Krnl::newProcessEnv(Process*)>
c001834b:	83 c4 10             	add    esp,0x10
c001834e:	89 c2                	mov    edx,eax
c0018350:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018354:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001835a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001835e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0018367:	a1 70 7a 02 c0       	mov    eax,ds:0xc0027a70
c001836c:	8d 50 01             	lea    edx,[eax+0x1]
c001836f:	89 15 70 7a 02 c0    	mov    DWORD PTR ds:0xc0027a70,edx
c0018375:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018379:	89 02                	mov    DWORD PTR [edx],eax
c001837b:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0018383:	83 ec 0c             	sub    esp,0xc
c0018386:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001838a:	e8 80 16 ff ff       	call   c0009a0f <malloc>
c001838f:	83 c4 10             	add    esp,0x10
c0018392:	89 c3                	mov    ebx,eax
c0018394:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018399:	83 ec 08             	sub    esp,0x8
c001839c:	50                   	push   eax
c001839d:	53                   	push   ebx
c001839e:	e8 87 41 ff ff       	call   c000c52a <VAS::VAS(bool)>
c00183a3:	83 c4 10             	add    esp,0x10
c00183a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183aa:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00183b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183b4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00183be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183c2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00183c6:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00183cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183d0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00183d6:	85 c0                	test   eax,eax
c00183d8:	74 42                	je     c001841c <Process::Process(bool, char const*, Process*, char**)+0x120>
c00183da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183de:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00183e4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00183ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183ee:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00183f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183f8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00183fe:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018404:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018408:	05 0c 01 00 00       	add    eax,0x10c
c001840d:	83 ec 08             	sub    esp,0x8
c0018410:	52                   	push   edx
c0018411:	50                   	push   eax
c0018412:	e8 29 83 fe ff       	call   c0000740 <strcpy>
c0018417:	83 c4 10             	add    esp,0x10
c001841a:	eb 64                	jmp    c0018480 <Process::Process(bool, char const*, Process*, char**)+0x184>
c001841c:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c0018424:	83 ec 0c             	sub    esp,0xc
c0018427:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001842b:	e8 df 15 ff ff       	call   c0009a0f <malloc>
c0018430:	83 c4 10             	add    esp,0x10
c0018433:	89 c3                	mov    ebx,eax
c0018435:	83 ec 08             	sub    esp,0x8
c0018438:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001843c:	53                   	push   ebx
c001843d:	e8 fa 2b ff ff       	call   c000b03c <VgaText::VgaText(char const*)>
c0018442:	83 c4 10             	add    esp,0x10
c0018445:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018449:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001844f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018453:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018459:	83 ec 0c             	sub    esp,0xc
c001845c:	50                   	push   eax
c001845d:	e8 99 23 ff ff       	call   c000a7fb <addToTerminalCycle(VgaText*)>
c0018462:	83 c4 10             	add    esp,0x10
c0018465:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018469:	05 0c 01 00 00       	add    eax,0x10c
c001846e:	83 ec 08             	sub    esp,0x8
c0018471:	68 c4 60 02 c0       	push   0xc00260c4
c0018476:	50                   	push   eax
c0018477:	e8 c4 82 fe ff       	call   c0000740 <strcpy>
c001847c:	83 c4 10             	add    esp,0x10
c001847f:	90                   	nop
c0018480:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018484:	83 c0 0c             	add    eax,0xc
c0018487:	83 ec 08             	sub    esp,0x8
c001848a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001848e:	50                   	push   eax
c001848f:	e8 ac 82 fe ff       	call   c0000740 <strcpy>
c0018494:	83 c4 10             	add    esp,0x10
c0018497:	83 ec 08             	sub    esp,0x8
c001849a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001849e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00184a2:	e8 09 fc ff ff       	call   c00180b0 <Process::addArgs(char**)>
c00184a7:	83 c4 10             	add    esp,0x10
c00184aa:	90                   	nop
c00184ab:	83 c4 24             	add    esp,0x24
c00184ae:	5b                   	pop    ebx
c00184af:	5e                   	pop    esi
c00184b0:	c3                   	ret    
c00184b1:	8d 76 00             	lea    esi,[esi+0x0]

c00184b4 <taskStartupFunction>:
c00184b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00184b9:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00184bc:	c3                   	ret    
c00184bd:	90                   	nop
c00184be:	66 90                	xchg   ax,ax

c00184c0 <Semaphore::Semaphore(int)>:
c00184c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00184c8:	89 10                	mov    DWORD PTR [eax],edx
c00184ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184ce:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00184d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00184e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184e4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00184eb:	90                   	nop
c00184ec:	c3                   	ret    
c00184ed:	90                   	nop
c00184ee:	66 90                	xchg   ax,ax

c00184f0 <Mutex::Mutex()>:
c00184f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184f4:	6a 01                	push   0x1
c00184f6:	50                   	push   eax
c00184f7:	e8 c4 ff ff ff       	call   c00184c0 <Semaphore::Semaphore(int)>
c00184fc:	83 c4 08             	add    esp,0x8
c00184ff:	90                   	nop
c0018500:	c3                   	ret    
c0018501:	90                   	nop
c0018502:	66 90                	xchg   ax,ax

c0018504 <Process::createThread(void (*)(void*), void*, int)>:
c0018504:	57                   	push   edi
c0018505:	31 c9                	xor    ecx,ecx
c0018507:	56                   	push   esi
c0018508:	53                   	push   ebx
c0018509:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001850d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0018514:	89 f2                	mov    edx,esi
c0018516:	66 90                	xchg   ax,ax
c0018518:	0f b7 c2             	movzx  eax,dx
c001851b:	83 e2 01             	and    edx,0x1
c001851e:	74 14                	je     c0018534 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0018520:	d1 f8                	sar    eax,1
c0018522:	41                   	inc    ecx
c0018523:	89 c2                	mov    edx,eax
c0018525:	83 f9 10             	cmp    ecx,0x10
c0018528:	75 ee                	jne    c0018518 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001852a:	31 db                	xor    ebx,ebx
c001852c:	89 d8                	mov    eax,ebx
c001852e:	5b                   	pop    ebx
c001852f:	5e                   	pop    esi
c0018530:	5f                   	pop    edi
c0018531:	c3                   	ret    
c0018532:	66 90                	xchg   ax,ax
c0018534:	b8 01 00 00 00       	mov    eax,0x1
c0018539:	d3 e0                	shl    eax,cl
c001853b:	09 c6                	or     esi,eax
c001853d:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018540:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0018547:	01 c0                	add    eax,eax
c0018549:	01 c8                	add    eax,ecx
c001854b:	8d 04 80             	lea    eax,[eax+eax*4]
c001854e:	01 d8                	add    eax,ebx
c0018550:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0018557:	75 0b                	jne    c0018564 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0018559:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0018563:	90                   	nop
c0018564:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001856a:	83 ec 08             	sub    esp,0x8
c001856d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018570:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018573:	01 c0                	add    eax,eax
c0018575:	01 c8                	add    eax,ecx
c0018577:	8d 3c 80             	lea    edi,[eax+eax*4]
c001857a:	8d 04 3b             	lea    eax,[ebx+edi*1]
c001857d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018583:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0018589:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001858d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0018593:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0018599:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00185a0:	89 ca                	mov    edx,ecx
c00185a2:	f7 da                	neg    edx
c00185a4:	c1 e2 15             	shl    edx,0x15
c00185a7:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00185ad:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00185b3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00185b7:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00185c1:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00185c7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00185cb:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00185d1:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00185db:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00185e5:	53                   	push   ebx
c00185e6:	68 84 95 02 c0       	push   0xc0029584
c00185eb:	e8 40 a8 00 00       	call   c0022e30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00185f0:	83 c4 10             	add    esp,0x10
c00185f3:	89 d8                	mov    eax,ebx
c00185f5:	5b                   	pop    ebx
c00185f6:	5e                   	pop    esi
c00185f7:	5f                   	pop    edi
c00185f8:	c3                   	ret    
c00185f9:	90                   	nop
c00185fa:	66 90                	xchg   ax,ax

c00185fc <Process::createUserThread()>:
c00185fc:	83 ec 0c             	sub    esp,0xc
c00185ff:	68 80 00 00 00       	push   0x80
c0018604:	6a 00                	push   0x0
c0018606:	68 a4 7f 01 c0       	push   0xc0017fa4
c001860b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001860f:	e8 f0 fe ff ff       	call   c0018504 <Process::createThread(void (*)(void*), void*, int)>
c0018614:	83 c4 1c             	add    esp,0x1c
c0018617:	c3                   	ret    

c0018618 <setupMultitasking(void (*)())>:
c0018618:	56                   	push   esi
c0018619:	53                   	push   ebx
c001861a:	51                   	push   ecx
c001861b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001861f:	eb 13                	jmp    c0018634 <setupMultitasking(void (*)())+0x1c>
c0018621:	8d 76 00             	lea    esi,[esi+0x0]
c0018624:	83 ec 0c             	sub    esp,0xc
c0018627:	68 84 95 02 c0       	push   0xc0029584
c001862c:	e8 47 a7 00 00       	call   c0022d78 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018631:	83 c4 10             	add    esp,0x10
c0018634:	83 ec 0c             	sub    esp,0xc
c0018637:	68 84 95 02 c0       	push   0xc0029584
c001863c:	e8 13 a7 00 00       	call   c0022d54 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018641:	83 c4 10             	add    esp,0x10
c0018644:	84 c0                	test   al,al
c0018646:	74 dc                	je     c0018624 <setupMultitasking(void (*)())+0xc>
c0018648:	83 ec 0c             	sub    esp,0xc
c001864b:	68 1f 07 00 00       	push   0x71f
c0018650:	e8 ba 13 ff ff       	call   c0009a0f <malloc>
c0018655:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001865c:	89 c3                	mov    ebx,eax
c001865e:	6a 00                	push   0x0
c0018660:	68 c8 60 02 c0       	push   0xc00260c8
c0018665:	6a 01                	push   0x1
c0018667:	50                   	push   eax
c0018668:	e8 8f fc ff ff       	call   c00182fc <Process::Process(bool, char const*, Process*, char**)>
c001866d:	83 c4 14             	add    esp,0x14
c0018670:	89 1d 90 95 02 c0    	mov    DWORD PTR ds:0xc0029590,ebx
c0018676:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c001867c:	e8 88 24 ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c0018681:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0018689:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0018693:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018699:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001869c:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00186a6:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00186ac:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00186b2:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00186bc:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00186c6:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00186d0:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00186d6:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00186e0:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00186e6:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00186f0:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00186f6:	58                   	pop    eax
c00186f7:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00186fd:	5a                   	pop    edx
c00186fe:	68 c4 60 02 c0       	push   0xc00260c4
c0018703:	50                   	push   eax
c0018704:	e8 37 80 fe ff       	call   c0000740 <strcpy>
c0018709:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0018710:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018714:	83 c4 14             	add    esp,0x14
c0018717:	5b                   	pop    ebx
c0018718:	5e                   	pop    esi
c0018719:	e9 6b 7b fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c001871e:	66 90                	xchg   ax,ax

c0018720 <schedule()>:
c0018720:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c0018725:	85 c0                	test   eax,eax
c0018727:	74 0b                	je     c0018734 <schedule()+0x14>
c0018729:	c7 05 60 95 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029560,0x1
c0018733:	c3                   	ret    
c0018734:	53                   	push   ebx
c0018735:	83 ec 14             	sub    esp,0x14
c0018738:	68 84 95 02 c0       	push   0xc0029584
c001873d:	e8 12 a6 00 00       	call   c0022d54 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018742:	83 c4 10             	add    esp,0x10
c0018745:	84 c0                	test   al,al
c0018747:	75 3b                	jne    c0018784 <schedule()+0x64>
c0018749:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001874e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018751:	4a                   	dec    edx
c0018752:	74 38                	je     c001878c <schedule()+0x6c>
c0018754:	83 ec 0c             	sub    esp,0xc
c0018757:	68 84 95 02 c0       	push   0xc0029584
c001875c:	e8 0f a6 00 00       	call   c0022d70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018761:	c7 04 24 84 95 02 c0 	mov    DWORD PTR [esp],0xc0029584
c0018768:	89 c3                	mov    ebx,eax
c001876a:	e8 09 a6 00 00       	call   c0022d78 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001876f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018776:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018779:	e8 7e f8 ff ff       	call   c0017ffc <switchToThread(ThreadControlBlock*)>
c001877e:	83 c4 10             	add    esp,0x10
c0018781:	8d 76 00             	lea    esi,[esi+0x0]
c0018784:	83 c4 08             	add    esp,0x8
c0018787:	5b                   	pop    ebx
c0018788:	c3                   	ret    
c0018789:	8d 76 00             	lea    esi,[esi+0x0]
c001878c:	83 ec 08             	sub    esp,0x8
c001878f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018796:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001879c:	68 84 95 02 c0       	push   0xc0029584
c00187a1:	e8 8a a6 00 00       	call   c0022e30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00187a6:	83 c4 10             	add    esp,0x10
c00187a9:	eb a9                	jmp    c0018754 <schedule()+0x34>
c00187ab:	90                   	nop

c00187ac <Semaphore::tryAcquire()>:
c00187ac:	53                   	push   ebx
c00187ad:	83 ec 08             	sub    esp,0x8
c00187b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00187b4:	fa                   	cli    
c00187b5:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c00187ba:	8d 50 01             	lea    edx,[eax+0x1]
c00187bd:	89 15 68 95 02 c0    	mov    DWORD PTR ds:0xc0029568,edx
c00187c3:	8b 15 64 95 02 c0    	mov    edx,DWORD PTR ds:0xc0029564
c00187c9:	8d 5a 01             	lea    ebx,[edx+0x1]
c00187cc:	89 1d 64 95 02 c0    	mov    DWORD PTR ds:0xc0029564,ebx
c00187d2:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00187d5:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00187d7:	7c 33                	jl     c001880c <Semaphore::tryAcquire()+0x60>
c00187d9:	89 15 64 95 02 c0    	mov    DWORD PTR ds:0xc0029564,edx
c00187df:	85 d2                	test   edx,edx
c00187e1:	75 0d                	jne    c00187f0 <Semaphore::tryAcquire()+0x44>
c00187e3:	8b 15 60 95 02 c0    	mov    edx,DWORD PTR ds:0xc0029560
c00187e9:	85 d2                	test   edx,edx
c00187eb:	75 6b                	jne    c0018858 <Semaphore::tryAcquire()+0xac>
c00187ed:	8d 76 00             	lea    esi,[esi+0x0]
c00187f0:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c00187f5:	85 c0                	test   eax,eax
c00187f7:	74 0b                	je     c0018804 <Semaphore::tryAcquire()+0x58>
c00187f9:	8d 76 00             	lea    esi,[esi+0x0]
c00187fc:	31 c0                	xor    eax,eax
c00187fe:	83 c4 08             	add    esp,0x8
c0018801:	5b                   	pop    ebx
c0018802:	c3                   	ret    
c0018803:	90                   	nop
c0018804:	fb                   	sti    
c0018805:	83 c4 08             	add    esp,0x8
c0018808:	5b                   	pop    ebx
c0018809:	c3                   	ret    
c001880a:	66 90                	xchg   ax,ax
c001880c:	43                   	inc    ebx
c001880d:	89 15 64 95 02 c0    	mov    DWORD PTR ds:0xc0029564,edx
c0018813:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0018816:	85 d2                	test   edx,edx
c0018818:	75 22                	jne    c001883c <Semaphore::tryAcquire()+0x90>
c001881a:	8b 0d 60 95 02 c0    	mov    ecx,DWORD PTR ds:0xc0029560
c0018820:	85 c9                	test   ecx,ecx
c0018822:	74 18                	je     c001883c <Semaphore::tryAcquire()+0x90>
c0018824:	c7 05 60 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029560,0x0
c001882e:	e8 ed fe ff ff       	call   c0018720 <schedule()>
c0018833:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c0018838:	48                   	dec    eax
c0018839:	8d 76 00             	lea    esi,[esi+0x0]
c001883c:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c0018841:	85 c0                	test   eax,eax
c0018843:	75 0b                	jne    c0018850 <Semaphore::tryAcquire()+0xa4>
c0018845:	fb                   	sti    
c0018846:	b0 01                	mov    al,0x1
c0018848:	83 c4 08             	add    esp,0x8
c001884b:	5b                   	pop    ebx
c001884c:	c3                   	ret    
c001884d:	8d 76 00             	lea    esi,[esi+0x0]
c0018850:	b0 01                	mov    al,0x1
c0018852:	83 c4 08             	add    esp,0x8
c0018855:	5b                   	pop    ebx
c0018856:	c3                   	ret    
c0018857:	90                   	nop
c0018858:	c7 05 60 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029560,0x0
c0018862:	e8 b9 fe ff ff       	call   c0018720 <schedule()>
c0018867:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c001886c:	48                   	dec    eax
c001886d:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c0018872:	85 c0                	test   eax,eax
c0018874:	75 86                	jne    c00187fc <Semaphore::tryAcquire()+0x50>
c0018876:	eb 8c                	jmp    c0018804 <Semaphore::tryAcquire()+0x58>

c0018878 <Semaphore::assertLocked(char const*)>:
c0018878:	83 ec 0c             	sub    esp,0xc
c001887b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001887f:	fa                   	cli    
c0018880:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c0018886:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c001888b:	8d 48 01             	lea    ecx,[eax+0x1]
c001888e:	89 0d 64 95 02 c0    	mov    DWORD PTR ds:0xc0029564,ecx
c0018894:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018896:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0018899:	7c 29                	jl     c00188c4 <Semaphore::assertLocked(char const*)+0x4c>
c001889b:	90                   	nop
c001889c:	a3 64 95 02 c0       	mov    ds:0xc0029564,eax
c00188a1:	85 c0                	test   eax,eax
c00188a3:	75 0b                	jne    c00188b0 <Semaphore::assertLocked(char const*)+0x38>
c00188a5:	a1 60 95 02 c0       	mov    eax,ds:0xc0029560
c00188aa:	85 c0                	test   eax,eax
c00188ac:	75 2e                	jne    c00188dc <Semaphore::assertLocked(char const*)+0x64>
c00188ae:	66 90                	xchg   ax,ax
c00188b0:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c00188b5:	48                   	dec    eax
c00188b6:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c00188bb:	75 03                	jne    c00188c0 <Semaphore::assertLocked(char const*)+0x48>
c00188bd:	fb                   	sti    
c00188be:	66 90                	xchg   ax,ax
c00188c0:	83 c4 0c             	add    esp,0xc
c00188c3:	c3                   	ret    
c00188c4:	83 ec 0c             	sub    esp,0xc
c00188c7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00188cb:	e8 eb c0 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c00188d0:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c00188d5:	83 c4 10             	add    esp,0x10
c00188d8:	48                   	dec    eax
c00188d9:	eb c1                	jmp    c001889c <Semaphore::assertLocked(char const*)+0x24>
c00188db:	90                   	nop
c00188dc:	c7 05 60 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029560,0x0
c00188e6:	e8 35 fe ff ff       	call   c0018720 <schedule()>
c00188eb:	eb c3                	jmp    c00188b0 <Semaphore::assertLocked(char const*)+0x38>
c00188ed:	8d 76 00             	lea    esi,[esi+0x0]

c00188f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00188f0:	83 ec 0c             	sub    esp,0xc
c00188f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00188fc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00188ff:	e8 1c fe ff ff       	call   c0018720 <schedule()>
c0018904:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c0018909:	48                   	dec    eax
c001890a:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c001890f:	75 03                	jne    c0018914 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0018911:	fb                   	sti    
c0018912:	66 90                	xchg   ax,ax
c0018914:	83 c4 0c             	add    esp,0xc
c0018917:	c3                   	ret    

c0018918 <blockTask(TaskState)>:
c0018918:	83 ec 0c             	sub    esp,0xc
c001891b:	fa                   	cli    
c001891c:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c0018922:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018926:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001892b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001892e:	e8 ed fd ff ff       	call   c0018720 <schedule()>
c0018933:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c0018938:	48                   	dec    eax
c0018939:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c001893e:	75 04                	jne    c0018944 <blockTask(TaskState)+0x2c>
c0018940:	fb                   	sti    
c0018941:	8d 76 00             	lea    esi,[esi+0x0]
c0018944:	83 c4 0c             	add    esp,0xc
c0018947:	c3                   	ret    

c0018948 <waitTask(int, int*, int)>:
c0018948:	83 ec 18             	sub    esp,0x18
c001894b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018950:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018954:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0018957:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001895b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018960:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018963:	6a 07                	push   0x7
c0018965:	e8 ae ff ff ff       	call   c0018918 <blockTask(TaskState)>
c001896a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001896f:	83 c4 10             	add    esp,0x10
c0018972:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0018975:	85 d2                	test   edx,edx
c0018977:	74 0b                	je     c0018984 <waitTask(int, int*, int)+0x3c>
c0018979:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001897c:	89 02                	mov    DWORD PTR [edx],eax
c001897e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018983:	90                   	nop
c0018984:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018987:	83 c4 0c             	add    esp,0xc
c001898a:	c3                   	ret    
c001898b:	90                   	nop

c001898c <milliTenthSleepUntil(unsigned int)>:
c001898c:	83 ec 0c             	sub    esp,0xc
c001898f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018993:	39 05 6c 86 02 c0    	cmp    DWORD PTR ds:0xc002866c,eax
c0018999:	76 05                	jbe    c00189a0 <milliTenthSleepUntil(unsigned int)+0x14>
c001899b:	90                   	nop
c001899c:	83 c4 0c             	add    esp,0xc
c001899f:	c3                   	ret    
c00189a0:	fa                   	cli    
c00189a1:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c00189a7:	83 ec 08             	sub    esp,0x8
c00189aa:	ff 05 64 95 02 c0    	inc    DWORD PTR ds:0xc0029564
c00189b0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00189b6:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00189b9:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00189bf:	68 78 95 02 c0       	push   0xc0029578
c00189c4:	e8 67 a4 00 00       	call   c0022e30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00189c9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00189d0:	e8 43 ff ff ff       	call   c0018918 <blockTask(TaskState)>
c00189d5:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c00189da:	83 c4 10             	add    esp,0x10
c00189dd:	48                   	dec    eax
c00189de:	a3 64 95 02 c0       	mov    ds:0xc0029564,eax
c00189e3:	85 c0                	test   eax,eax
c00189e5:	75 09                	jne    c00189f0 <milliTenthSleepUntil(unsigned int)+0x64>
c00189e7:	a1 60 95 02 c0       	mov    eax,ds:0xc0029560
c00189ec:	85 c0                	test   eax,eax
c00189ee:	75 14                	jne    c0018a04 <milliTenthSleepUntil(unsigned int)+0x78>
c00189f0:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c00189f5:	48                   	dec    eax
c00189f6:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c00189fb:	75 9f                	jne    c001899c <milliTenthSleepUntil(unsigned int)+0x10>
c00189fd:	fb                   	sti    
c00189fe:	83 c4 0c             	add    esp,0xc
c0018a01:	c3                   	ret    
c0018a02:	66 90                	xchg   ax,ax
c0018a04:	c7 05 60 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029560,0x0
c0018a0e:	e8 0d fd ff ff       	call   c0018720 <schedule()>
c0018a13:	eb db                	jmp    c00189f0 <milliTenthSleepUntil(unsigned int)+0x64>
c0018a15:	8d 76 00             	lea    esi,[esi+0x0]

c0018a18 <milliTenthSleep(unsigned int)>:
c0018a18:	a1 6c 86 02 c0       	mov    eax,ds:0xc002866c
c0018a1d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018a21:	e9 66 ff ff ff       	jmp    c001898c <milliTenthSleepUntil(unsigned int)>
c0018a26:	66 90                	xchg   ax,ax

c0018a28 <sleep(unsigned int)>:
c0018a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a2c:	8d 04 80             	lea    eax,[eax+eax*4]
c0018a2f:	8d 04 80             	lea    eax,[eax+eax*4]
c0018a32:	8d 04 80             	lea    eax,[eax+eax*4]
c0018a35:	8d 04 80             	lea    eax,[eax+eax*4]
c0018a38:	c1 e0 04             	shl    eax,0x4
c0018a3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018a3f:	eb d7                	jmp    c0018a18 <milliTenthSleep(unsigned int)>
c0018a41:	90                   	nop
c0018a42:	66 90                	xchg   ax,ax

c0018a44 <Semaphore::acquire()>:
c0018a44:	83 ec 0c             	sub    esp,0xc
c0018a47:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018a4b:	fa                   	cli    
c0018a4c:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c0018a51:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c0018a57:	8d 48 01             	lea    ecx,[eax+0x1]
c0018a5a:	89 0d 64 95 02 c0    	mov    DWORD PTR ds:0xc0029564,ecx
c0018a60:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0018a63:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0018a65:	7d 2d                	jge    c0018a94 <Semaphore::acquire()+0x50>
c0018a67:	41                   	inc    ecx
c0018a68:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0018a6b:	90                   	nop
c0018a6c:	a3 64 95 02 c0       	mov    ds:0xc0029564,eax
c0018a71:	85 c0                	test   eax,eax
c0018a73:	75 0b                	jne    c0018a80 <Semaphore::acquire()+0x3c>
c0018a75:	a1 60 95 02 c0       	mov    eax,ds:0xc0029560
c0018a7a:	85 c0                	test   eax,eax
c0018a7c:	75 62                	jne    c0018ae0 <Semaphore::acquire()+0x9c>
c0018a7e:	66 90                	xchg   ax,ax
c0018a80:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c0018a85:	48                   	dec    eax
c0018a86:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c0018a8b:	75 03                	jne    c0018a90 <Semaphore::acquire()+0x4c>
c0018a8d:	fb                   	sti    
c0018a8e:	66 90                	xchg   ax,ax
c0018a90:	83 c4 0c             	add    esp,0xc
c0018a93:	c3                   	ret    
c0018a94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a99:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018aa0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018aa3:	85 c9                	test   ecx,ecx
c0018aa5:	74 4d                	je     c0018af4 <Semaphore::acquire()+0xb0>
c0018aa7:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0018aaa:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018ab0:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0018ab3:	90                   	nop
c0018ab4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ab9:	83 ec 0c             	sub    esp,0xc
c0018abc:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0018abf:	68 44 61 02 c0       	push   0xc0026144
c0018ac4:	e8 36 42 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0018ac9:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0018ad0:	e8 43 fe ff ff       	call   c0018918 <blockTask(TaskState)>
c0018ad5:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c0018ada:	83 c4 10             	add    esp,0x10
c0018add:	48                   	dec    eax
c0018ade:	eb 8c                	jmp    c0018a6c <Semaphore::acquire()+0x28>
c0018ae0:	c7 05 60 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029560,0x0
c0018aea:	e8 31 fc ff ff       	call   c0018720 <schedule()>
c0018aef:	eb 8f                	jmp    c0018a80 <Semaphore::acquire()+0x3c>
c0018af1:	8d 76 00             	lea    esi,[esi+0x0]
c0018af4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018af9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018afc:	eb b6                	jmp    c0018ab4 <Semaphore::acquire()+0x70>
c0018afe:	66 90                	xchg   ax,ax

c0018b00 <taskReturned>:
c0018b00:	83 ec 18             	sub    esp,0x18
c0018b03:	68 64 61 02 c0       	push   0xc0026164
c0018b08:	e8 ae be ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0018b0d:	83 c4 10             	add    esp,0x10
c0018b10:	83 ec 0c             	sub    esp,0xc
c0018b13:	6a 02                	push   0x2
c0018b15:	e8 fe fd ff ff       	call   c0018918 <blockTask(TaskState)>
c0018b1a:	fa                   	cli    
c0018b1b:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c0018b21:	e8 fa fb ff ff       	call   c0018720 <schedule()>
c0018b26:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c0018b2b:	83 c4 10             	add    esp,0x10
c0018b2e:	48                   	dec    eax
c0018b2f:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c0018b34:	85 c0                	test   eax,eax
c0018b36:	75 d8                	jne    c0018b10 <taskReturned+0x10>
c0018b38:	fb                   	sti    
c0018b39:	eb d5                	jmp    c0018b10 <taskReturned+0x10>
c0018b3b:	90                   	nop

c0018b3c <Thr::processFromPID(int)>:
c0018b3c:	57                   	push   edi
c0018b3d:	56                   	push   esi
c0018b3e:	53                   	push   ebx
c0018b3f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018b43:	fa                   	cli    
c0018b44:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c0018b4a:	83 ec 0c             	sub    esp,0xc
c0018b4d:	68 84 95 02 c0       	push   0xc0029584
c0018b52:	e8 19 a2 00 00       	call   c0022d70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018b57:	83 c4 10             	add    esp,0x10
c0018b5a:	89 c7                	mov    edi,eax
c0018b5c:	eb 16                	jmp    c0018b74 <Thr::processFromPID(int)+0x38>
c0018b5e:	66 90                	xchg   ax,ax
c0018b60:	83 ec 0c             	sub    esp,0xc
c0018b63:	68 84 95 02 c0       	push   0xc0029584
c0018b68:	e8 03 a2 00 00       	call   c0022d70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018b6d:	83 c4 10             	add    esp,0x10
c0018b70:	39 f8                	cmp    eax,edi
c0018b72:	74 4c                	je     c0018bc0 <Thr::processFromPID(int)+0x84>
c0018b74:	83 ec 0c             	sub    esp,0xc
c0018b77:	68 84 95 02 c0       	push   0xc0029584
c0018b7c:	e8 ef a1 00 00       	call   c0022d70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018b81:	c7 04 24 84 95 02 c0 	mov    DWORD PTR [esp],0xc0029584
c0018b88:	89 c3                	mov    ebx,eax
c0018b8a:	e8 e9 a1 00 00       	call   c0022d78 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018b8f:	58                   	pop    eax
c0018b90:	5a                   	pop    edx
c0018b91:	53                   	push   ebx
c0018b92:	68 84 95 02 c0       	push   0xc0029584
c0018b97:	e8 94 a2 00 00       	call   c0022e30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018b9c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018b9f:	83 c4 10             	add    esp,0x10
c0018ba2:	39 30                	cmp    DWORD PTR [eax],esi
c0018ba4:	75 ba                	jne    c0018b60 <Thr::processFromPID(int)+0x24>
c0018ba6:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c0018bab:	48                   	dec    eax
c0018bac:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c0018bb1:	74 09                	je     c0018bbc <Thr::processFromPID(int)+0x80>
c0018bb3:	90                   	nop
c0018bb4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018bb7:	5b                   	pop    ebx
c0018bb8:	5e                   	pop    esi
c0018bb9:	5f                   	pop    edi
c0018bba:	c3                   	ret    
c0018bbb:	90                   	nop
c0018bbc:	fb                   	sti    
c0018bbd:	eb f5                	jmp    c0018bb4 <Thr::processFromPID(int)+0x78>
c0018bbf:	90                   	nop
c0018bc0:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c0018bc5:	48                   	dec    eax
c0018bc6:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c0018bcb:	75 07                	jne    c0018bd4 <Thr::processFromPID(int)+0x98>
c0018bcd:	fb                   	sti    
c0018bce:	5b                   	pop    ebx
c0018bcf:	5e                   	pop    esi
c0018bd0:	5f                   	pop    edi
c0018bd1:	c3                   	ret    
c0018bd2:	66 90                	xchg   ax,ax
c0018bd4:	5b                   	pop    ebx
c0018bd5:	31 c0                	xor    eax,eax
c0018bd7:	5e                   	pop    esi
c0018bd8:	5f                   	pop    edi
c0018bd9:	c3                   	ret    
c0018bda:	66 90                	xchg   ax,ax

c0018bdc <unblockTask(ThreadControlBlock*)>:
c0018bdc:	53                   	push   ebx
c0018bdd:	83 ec 08             	sub    esp,0x8
c0018be0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018be4:	fa                   	cli    
c0018be5:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c0018beb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018bee:	85 c0                	test   eax,eax
c0018bf0:	74 66                	je     c0018c58 <unblockTask(ThreadControlBlock*)+0x7c>
c0018bf2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018bf5:	48                   	dec    eax
c0018bf6:	74 38                	je     c0018c30 <unblockTask(ThreadControlBlock*)+0x54>
c0018bf8:	83 ec 0c             	sub    esp,0xc
c0018bfb:	68 84 95 02 c0       	push   0xc0029584
c0018c00:	e8 6b a1 00 00       	call   c0022d70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018c05:	83 c4 10             	add    esp,0x10
c0018c08:	85 c0                	test   eax,eax
c0018c0a:	75 1c                	jne    c0018c28 <unblockTask(ThreadControlBlock*)+0x4c>
c0018c0c:	eb 5e                	jmp    c0018c6c <unblockTask(ThreadControlBlock*)+0x90>
c0018c0e:	66 90                	xchg   ax,ax
c0018c10:	83 ec 08             	sub    esp,0x8
c0018c13:	50                   	push   eax
c0018c14:	68 84 95 02 c0       	push   0xc0029584
c0018c19:	e8 02 a5 00 00       	call   c0023120 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018c1e:	83 c4 10             	add    esp,0x10
c0018c21:	85 c0                	test   eax,eax
c0018c23:	74 47                	je     c0018c6c <unblockTask(ThreadControlBlock*)+0x90>
c0018c25:	8d 76 00             	lea    esi,[esi+0x0]
c0018c28:	39 c3                	cmp    ebx,eax
c0018c2a:	75 e4                	jne    c0018c10 <unblockTask(ThreadControlBlock*)+0x34>
c0018c2c:	eb 12                	jmp    c0018c40 <unblockTask(ThreadControlBlock*)+0x64>
c0018c2e:	66 90                	xchg   ax,ax
c0018c30:	83 ec 0c             	sub    esp,0xc
c0018c33:	68 e6 60 02 c0       	push   0xc00260e6
c0018c38:	e8 c2 40 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0018c3d:	83 c4 10             	add    esp,0x10
c0018c40:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c0018c45:	48                   	dec    eax
c0018c46:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c0018c4b:	75 03                	jne    c0018c50 <unblockTask(ThreadControlBlock*)+0x74>
c0018c4d:	fb                   	sti    
c0018c4e:	66 90                	xchg   ax,ax
c0018c50:	83 c4 08             	add    esp,0x8
c0018c53:	5b                   	pop    ebx
c0018c54:	c3                   	ret    
c0018c55:	8d 76 00             	lea    esi,[esi+0x0]
c0018c58:	83 ec 0c             	sub    esp,0xc
c0018c5b:	68 cf 60 02 c0       	push   0xc00260cf
c0018c60:	e8 9a 40 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0018c65:	83 c4 10             	add    esp,0x10
c0018c68:	eb d6                	jmp    c0018c40 <unblockTask(ThreadControlBlock*)+0x64>
c0018c6a:	66 90                	xchg   ax,ax
c0018c6c:	83 ec 08             	sub    esp,0x8
c0018c6f:	53                   	push   ebx
c0018c70:	68 84 95 02 c0       	push   0xc0029584
c0018c75:	e8 b6 a1 00 00       	call   c0022e30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018c7a:	83 c4 10             	add    esp,0x10
c0018c7d:	eb c1                	jmp    c0018c40 <unblockTask(ThreadControlBlock*)+0x64>
c0018c7f:	90                   	nop

c0018c80 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018c80:	55                   	push   ebp
c0018c81:	57                   	push   edi
c0018c82:	56                   	push   esi
c0018c83:	53                   	push   ebx
c0018c84:	83 ec 1c             	sub    esp,0x1c
c0018c87:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018c8b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018c8e:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0018c94:	85 ff                	test   edi,edi
c0018c96:	7e 24                	jle    c0018cbc <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0018c98:	31 f6                	xor    esi,esi
c0018c9a:	66 90                	xchg   ax,ax
c0018c9c:	83 ec 0c             	sub    esp,0xc
c0018c9f:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0018ca6:	46                   	inc    esi
c0018ca7:	e8 73 0d ff ff       	call   c0009a1f <free>
c0018cac:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018caf:	83 c4 10             	add    esp,0x10
c0018cb2:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0018cb8:	7f e2                	jg     c0018c9c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0018cba:	66 90                	xchg   ax,ax
c0018cbc:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018cc6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0018ccb:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018cce:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0018cd1:	d3 c0                	rol    eax,cl
c0018cd3:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0018cda:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018cdd:	89 f7                	mov    edi,esi
c0018cdf:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0018ce7:	0f 85 73 01 00 00    	jne    c0018e60 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018ced:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0018cf3:	85 ed                	test   ebp,ebp
c0018cf5:	74 1d                	je     c0018d14 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0018cf7:	83 ec 0c             	sub    esp,0xc
c0018cfa:	55                   	push   ebp
c0018cfb:	e8 60 ba ff ff       	call   c0014760 <EnvVarContainer::~EnvVarContainer()>
c0018d00:	59                   	pop    ecx
c0018d01:	5e                   	pop    esi
c0018d02:	6a 0c                	push   0xc
c0018d04:	55                   	push   ebp
c0018d05:	e8 14 3f ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0018d0a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018d0d:	83 c4 10             	add    esp,0x10
c0018d10:	89 f7                	mov    edi,esi
c0018d12:	66 90                	xchg   ax,ax
c0018d14:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018d1a:	85 c0                	test   eax,eax
c0018d1c:	0f 84 b2 00 00 00    	je     c0018dd4 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018d22:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0018d25:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018d29:	31 c9                	xor    ecx,ecx
c0018d2b:	eb 17                	jmp    c0018d44 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0018d2d:	8d 76 00             	lea    esi,[esi+0x0]
c0018d30:	41                   	inc    ecx
c0018d31:	83 f9 10             	cmp    ecx,0x10
c0018d34:	0f 84 9a 00 00 00    	je     c0018dd4 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018d3a:	66 90                	xchg   ax,ax
c0018d3c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018d42:	66 90                	xchg   ax,ax
c0018d44:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0018d4b:	d3 fa                	sar    edx,cl
c0018d4d:	83 e2 01             	and    edx,0x1
c0018d50:	74 de                	je     c0018d30 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018d52:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0018d55:	01 d2                	add    edx,edx
c0018d57:	01 ca                	add    edx,ecx
c0018d59:	8d 14 92             	lea    edx,[edx+edx*4]
c0018d5c:	01 d0                	add    eax,edx
c0018d5e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018d64:	83 fd 07             	cmp    ebp,0x7
c0018d67:	75 c7                	jne    c0018d30 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018d69:	05 40 02 00 00       	add    eax,0x240
c0018d6e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0018d71:	83 fd ff             	cmp    ebp,0xffffffff
c0018d74:	0f 8c ee 00 00 00    	jl     c0018e68 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0018d7a:	0f 84 ac 01 00 00    	je     c0018f2c <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0018d80:	85 ed                	test   ebp,ebp
c0018d82:	0f 84 90 01 00 00    	je     c0018f18 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0018d88:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018d8a:	75 a4                	jne    c0018d30 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018d8c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018d92:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018d96:	01 d0                	add    eax,edx
c0018d98:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018d9c:	83 ec 0c             	sub    esp,0xc
c0018d9f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0018da5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018da8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018dae:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018db5:	50                   	push   eax
c0018db6:	e8 21 fe ff ff       	call   c0018bdc <unblockTask(ThreadControlBlock*)>
c0018dbb:	83 c4 10             	add    esp,0x10
c0018dbe:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018dc1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018dc5:	89 f7                	mov    edi,esi
c0018dc7:	41                   	inc    ecx
c0018dc8:	83 f9 10             	cmp    ecx,0x10
c0018dcb:	0f 85 6b ff ff ff    	jne    c0018d3c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0018dd1:	8d 76 00             	lea    esi,[esi+0x0]
c0018dd4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0018dda:	85 c0                	test   eax,eax
c0018ddc:	74 62                	je     c0018e40 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018dde:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0018de4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0018dea:	74 54                	je     c0018e40 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018dec:	83 ec 0c             	sub    esp,0xc
c0018def:	68 84 95 02 c0       	push   0xc0029584
c0018df4:	e8 77 9f 00 00       	call   c0022d70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018df9:	c7 04 24 84 95 02 c0 	mov    DWORD PTR [esp],0xc0029584
c0018e00:	89 c7                	mov    edi,eax
c0018e02:	e8 4d 9f 00 00       	call   c0022d54 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018e07:	83 c4 10             	add    esp,0x10
c0018e0a:	84 c0                	test   al,al
c0018e0c:	0f 84 ce 00 00 00    	je     c0018ee0 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0018e12:	66 90                	xchg   ax,ax
c0018e14:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018e17:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018e1d:	85 d2                	test   edx,edx
c0018e1f:	74 0f                	je     c0018e30 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0018e21:	83 ec 0c             	sub    esp,0xc
c0018e24:	8b 02                	mov    eax,DWORD PTR [edx]
c0018e26:	52                   	push   edx
c0018e27:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018e2a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018e2d:	83 c4 10             	add    esp,0x10
c0018e30:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0018e3a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0018e3d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e40:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0018e46:	85 db                	test   ebx,ebx
c0018e48:	74 16                	je     c0018e60 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018e4a:	83 ec 0c             	sub    esp,0xc
c0018e4d:	53                   	push   ebx
c0018e4e:	e8 b1 30 ff ff       	call   c000bf04 <VAS::~VAS()>
c0018e53:	58                   	pop    eax
c0018e54:	5a                   	pop    edx
c0018e55:	6a 14                	push   0x14
c0018e57:	53                   	push   ebx
c0018e58:	e8 c1 3d ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0018e5d:	83 c4 10             	add    esp,0x10
c0018e60:	83 c4 1c             	add    esp,0x1c
c0018e63:	5b                   	pop    ebx
c0018e64:	5e                   	pop    esi
c0018e65:	5f                   	pop    edi
c0018e66:	5d                   	pop    ebp
c0018e67:	c3                   	ret    
c0018e68:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018e6c:	83 ec 0c             	sub    esp,0xc
c0018e6f:	68 98 61 02 c0       	push   0xc0026198
c0018e74:	e8 42 bb ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0018e79:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018e7c:	83 c4 10             	add    esp,0x10
c0018e7f:	89 f7                	mov    edi,esi
c0018e81:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e85:	e9 a6 fe ff ff       	jmp    c0018d30 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018e8a:	66 90                	xchg   ax,ax
c0018e8c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018e92:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0018e98:	75 1e                	jne    c0018eb8 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018e9a:	83 ec 0c             	sub    esp,0xc
c0018e9d:	68 00 62 02 c0       	push   0xc0026200
c0018ea2:	e8 58 3e ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0018ea7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018eae:	e8 65 fa ff ff       	call   c0018918 <blockTask(TaskState)>
c0018eb3:	83 c4 10             	add    esp,0x10
c0018eb6:	66 90                	xchg   ax,ax
c0018eb8:	83 ec 08             	sub    esp,0x8
c0018ebb:	56                   	push   esi
c0018ebc:	68 84 95 02 c0       	push   0xc0029584
c0018ec1:	e8 6a 9f 00 00       	call   c0022e30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018ec6:	c7 04 24 84 95 02 c0 	mov    DWORD PTR [esp],0xc0029584
c0018ecd:	e8 9e 9e 00 00       	call   c0022d70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018ed2:	83 c4 10             	add    esp,0x10
c0018ed5:	39 f8                	cmp    eax,edi
c0018ed7:	0f 84 37 ff ff ff    	je     c0018e14 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0018edd:	8d 76 00             	lea    esi,[esi+0x0]
c0018ee0:	83 ec 0c             	sub    esp,0xc
c0018ee3:	68 84 95 02 c0       	push   0xc0029584
c0018ee8:	e8 83 9e 00 00       	call   c0022d70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018eed:	c7 04 24 84 95 02 c0 	mov    DWORD PTR [esp],0xc0029584
c0018ef4:	89 c6                	mov    esi,eax
c0018ef6:	e8 7d 9e 00 00       	call   c0022d78 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018efb:	83 c4 10             	add    esp,0x10
c0018efe:	39 f3                	cmp    ebx,esi
c0018f00:	74 b6                	je     c0018eb8 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018f02:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0018f05:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018f08:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0018f0e:	75 a8                	jne    c0018eb8 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018f10:	e9 77 ff ff ff       	jmp    c0018e8c <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0018f15:	8d 76 00             	lea    esi,[esi+0x0]
c0018f18:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018f1c:	83 ec 0c             	sub    esp,0xc
c0018f1f:	68 cc 61 02 c0       	push   0xc00261cc
c0018f24:	e9 4b ff ff ff       	jmp    c0018e74 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0018f29:	8d 76 00             	lea    esi,[esi+0x0]
c0018f2c:	8b 36                	mov    esi,DWORD PTR [esi]
c0018f2e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018f32:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0018f35:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018f38:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0018f3e:	01 d7                	add    edi,edx
c0018f40:	89 f8                	mov    eax,edi
c0018f42:	e9 51 fe ff ff       	jmp    c0018d98 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0018f47:	90                   	nop

c0018f48 <cleanerTaskFunction(void*)>:
c0018f48:	53                   	push   ebx
c0018f49:	83 ec 08             	sub    esp,0x8
c0018f4c:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c0018f51:	48                   	dec    eax
c0018f52:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c0018f57:	75 03                	jne    c0018f5c <cleanerTaskFunction(void*)+0x14>
c0018f59:	fb                   	sti    
c0018f5a:	66 90                	xchg   ax,ax
c0018f5c:	fa                   	cli    
c0018f5d:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c0018f62:	80 3d 4c 95 02 c0 00 	cmp    BYTE PTR ds:0xc002954c,0x0
c0018f69:	8d 50 01             	lea    edx,[eax+0x1]
c0018f6c:	89 15 68 95 02 c0    	mov    DWORD PTR ds:0xc0029568,edx
c0018f72:	0f 84 ac 00 00 00    	je     c0019024 <cleanerTaskFunction(void*)+0xdc>
c0018f78:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c0018f7d:	85 c0                	test   eax,eax
c0018f7f:	75 03                	jne    c0018f84 <cleanerTaskFunction(void*)+0x3c>
c0018f81:	fb                   	sti    
c0018f82:	66 90                	xchg   ax,ax
c0018f84:	c6 05 4c 95 02 c0 00 	mov    BYTE PTR ds:0xc002954c,0x0
c0018f8b:	fa                   	cli    
c0018f8c:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c0018f92:	ff 05 64 95 02 c0    	inc    DWORD PTR ds:0xc0029564
c0018f98:	fa                   	cli    
c0018f99:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c0018f9f:	eb 2b                	jmp    c0018fcc <cleanerTaskFunction(void*)+0x84>
c0018fa1:	8d 76 00             	lea    esi,[esi+0x0]
c0018fa4:	83 ec 0c             	sub    esp,0xc
c0018fa7:	68 6c 95 02 c0       	push   0xc002956c
c0018fac:	e8 bf 9d 00 00       	call   c0022d70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018fb1:	c7 04 24 6c 95 02 c0 	mov    DWORD PTR [esp],0xc002956c
c0018fb8:	89 c3                	mov    ebx,eax
c0018fba:	e8 b9 9d 00 00       	call   c0022d78 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018fbf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018fc2:	e8 b9 fc ff ff       	call   c0018c80 <cleanupTerminatedTask(ThreadControlBlock*)>
c0018fc7:	83 c4 10             	add    esp,0x10
c0018fca:	66 90                	xchg   ax,ax
c0018fcc:	83 ec 0c             	sub    esp,0xc
c0018fcf:	68 6c 95 02 c0       	push   0xc002956c
c0018fd4:	e8 7b 9d 00 00       	call   c0022d54 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018fd9:	83 c4 10             	add    esp,0x10
c0018fdc:	84 c0                	test   al,al
c0018fde:	74 c4                	je     c0018fa4 <cleanerTaskFunction(void*)+0x5c>
c0018fe0:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c0018fe5:	48                   	dec    eax
c0018fe6:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c0018feb:	75 03                	jne    c0018ff0 <cleanerTaskFunction(void*)+0xa8>
c0018fed:	fb                   	sti    
c0018fee:	66 90                	xchg   ax,ax
c0018ff0:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c0018ff5:	48                   	dec    eax
c0018ff6:	a3 64 95 02 c0       	mov    ds:0xc0029564,eax
c0018ffb:	0f 85 4b ff ff ff    	jne    c0018f4c <cleanerTaskFunction(void*)+0x4>
c0019001:	a1 60 95 02 c0       	mov    eax,ds:0xc0029560
c0019006:	85 c0                	test   eax,eax
c0019008:	0f 84 3e ff ff ff    	je     c0018f4c <cleanerTaskFunction(void*)+0x4>
c001900e:	c7 05 60 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029560,0x0
c0019018:	e8 03 f7 ff ff       	call   c0018720 <schedule()>
c001901d:	e9 2a ff ff ff       	jmp    c0018f4c <cleanerTaskFunction(void*)+0x4>
c0019022:	66 90                	xchg   ax,ax
c0019024:	83 ec 0c             	sub    esp,0xc
c0019027:	6a 02                	push   0x2
c0019029:	e8 c2 f8 ff ff       	call   c00188f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001902e:	83 c4 10             	add    esp,0x10
c0019031:	e9 4e ff ff ff       	jmp    c0018f84 <cleanerTaskFunction(void*)+0x3c>
c0019036:	66 90                	xchg   ax,ax

c0019038 <terminateTask(int)>:
c0019038:	83 ec 14             	sub    esp,0x14
c001903b:	fa                   	cli    
c001903c:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c0019042:	ff 05 64 95 02 c0    	inc    DWORD PTR ds:0xc0029564
c0019048:	fa                   	cli    
c0019049:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c001904f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019053:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019058:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001905b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019060:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019063:	50                   	push   eax
c0019064:	68 6c 95 02 c0       	push   0xc002956c
c0019069:	e8 c2 9d 00 00       	call   c0022e30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001906e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019073:	83 c4 10             	add    esp,0x10
c0019076:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001907d:	a1 48 95 02 c0       	mov    eax,ds:0xc0029548
c0019082:	85 c0                	test   eax,eax
c0019084:	74 5e                	je     c00190e4 <terminateTask(int)+0xac>
c0019086:	83 ec 0c             	sub    esp,0xc
c0019089:	c6 05 4c 95 02 c0 01 	mov    BYTE PTR ds:0xc002954c,0x1
c0019090:	50                   	push   eax
c0019091:	e8 46 fb ff ff       	call   c0018bdc <unblockTask(ThreadControlBlock*)>
c0019096:	83 c4 10             	add    esp,0x10
c0019099:	8d 76 00             	lea    esi,[esi+0x0]
c001909c:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c00190a1:	48                   	dec    eax
c00190a2:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c00190a7:	75 03                	jne    c00190ac <terminateTask(int)+0x74>
c00190a9:	fb                   	sti    
c00190aa:	66 90                	xchg   ax,ax
c00190ac:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c00190b1:	48                   	dec    eax
c00190b2:	a3 64 95 02 c0       	mov    ds:0xc0029564,eax
c00190b7:	75 0b                	jne    c00190c4 <terminateTask(int)+0x8c>
c00190b9:	83 3d 60 95 02 c0 00 	cmp    DWORD PTR ds:0xc0029560,0x0
c00190c0:	75 36                	jne    c00190f8 <terminateTask(int)+0xc0>
c00190c2:	66 90                	xchg   ax,ax
c00190c4:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c00190c9:	48                   	dec    eax
c00190ca:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c00190cf:	75 03                	jne    c00190d4 <terminateTask(int)+0x9c>
c00190d1:	fb                   	sti    
c00190d2:	66 90                	xchg   ax,ax
c00190d4:	fa                   	cli    
c00190d5:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c00190db:	90                   	nop
c00190dc:	e8 3f f6 ff ff       	call   c0018720 <schedule()>
c00190e1:	eb e1                	jmp    c00190c4 <terminateTask(int)+0x8c>
c00190e3:	90                   	nop
c00190e4:	83 ec 0c             	sub    esp,0xc
c00190e7:	68 fd 60 02 c0       	push   0xc00260fd
c00190ec:	e8 0e 3c ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00190f1:	83 c4 10             	add    esp,0x10
c00190f4:	eb a6                	jmp    c001909c <terminateTask(int)+0x64>
c00190f6:	66 90                	xchg   ax,ax
c00190f8:	c7 05 60 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029560,0x0
c0019102:	eb d8                	jmp    c00190dc <terminateTask(int)+0xa4>

c0019104 <Thr::terminateFromIRQ(int)>:
c0019104:	83 ec 18             	sub    esp,0x18
c0019107:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001910b:	e8 28 ff ff ff       	call   c0019038 <terminateTask(int)>

c0019110 <Semaphore::release()>:
c0019110:	83 ec 0c             	sub    esp,0xc
c0019113:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019117:	fa                   	cli    
c0019118:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c001911d:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c0019123:	8d 48 01             	lea    ecx,[eax+0x1]
c0019126:	89 0d 64 95 02 c0    	mov    DWORD PTR ds:0xc0029564,ecx
c001912c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001912f:	85 c9                	test   ecx,ecx
c0019131:	74 41                	je     c0019174 <Semaphore::release()+0x64>
c0019133:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0019136:	83 ec 0c             	sub    esp,0xc
c0019139:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001913c:	51                   	push   ecx
c001913d:	e8 9a fa ff ff       	call   c0018bdc <unblockTask(ThreadControlBlock*)>
c0019142:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c0019147:	83 c4 10             	add    esp,0x10
c001914a:	48                   	dec    eax
c001914b:	90                   	nop
c001914c:	a3 64 95 02 c0       	mov    ds:0xc0029564,eax
c0019151:	85 c0                	test   eax,eax
c0019153:	75 0b                	jne    c0019160 <Semaphore::release()+0x50>
c0019155:	a1 60 95 02 c0       	mov    eax,ds:0xc0029560
c001915a:	85 c0                	test   eax,eax
c001915c:	75 1e                	jne    c001917c <Semaphore::release()+0x6c>
c001915e:	66 90                	xchg   ax,ax
c0019160:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c0019165:	48                   	dec    eax
c0019166:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c001916b:	75 03                	jne    c0019170 <Semaphore::release()+0x60>
c001916d:	fb                   	sti    
c001916e:	66 90                	xchg   ax,ax
c0019170:	83 c4 0c             	add    esp,0xc
c0019173:	c3                   	ret    
c0019174:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0019177:	eb d3                	jmp    c001914c <Semaphore::release()+0x3c>
c0019179:	8d 76 00             	lea    esi,[esi+0x0]
c001917c:	c7 05 60 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029560,0x0
c0019186:	e8 95 f5 ff ff       	call   c0018720 <schedule()>
c001918b:	eb d3                	jmp    c0019160 <Semaphore::release()+0x50>
c001918d:	8d 76 00             	lea    esi,[esi+0x0]

c0019190 <__static_initialization_and_destruction_0(int, int)>:
c0019190:	83 ec 0c             	sub    esp,0xc
c0019193:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0019198:	0f 85 8e 00 00 00    	jne    c001922c <__static_initialization_and_destruction_0(int, int)+0x9c>
c001919e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00191a6:	0f 85 80 00 00 00    	jne    c001922c <__static_initialization_and_destruction_0(int, int)+0x9c>
c00191ac:	83 ec 0c             	sub    esp,0xc
c00191af:	68 84 95 02 c0       	push   0xc0029584
c00191b4:	e8 23 9f 00 00       	call   c00230dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00191b9:	83 c4 10             	add    esp,0x10
c00191bc:	83 ec 04             	sub    esp,0x4
c00191bf:	68 ac 72 02 c0       	push   0xc00272ac
c00191c4:	68 84 95 02 c0       	push   0xc0029584
c00191c9:	68 8c 30 02 c0       	push   0xc002308c
c00191ce:	e8 c5 39 ff ff       	call   c000cb98 <__cxa_atexit>
c00191d3:	83 c4 10             	add    esp,0x10
c00191d6:	83 ec 0c             	sub    esp,0xc
c00191d9:	68 78 95 02 c0       	push   0xc0029578
c00191de:	e8 f9 9e 00 00       	call   c00230dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00191e3:	83 c4 10             	add    esp,0x10
c00191e6:	83 ec 04             	sub    esp,0x4
c00191e9:	68 ac 72 02 c0       	push   0xc00272ac
c00191ee:	68 78 95 02 c0       	push   0xc0029578
c00191f3:	68 8c 30 02 c0       	push   0xc002308c
c00191f8:	e8 9b 39 ff ff       	call   c000cb98 <__cxa_atexit>
c00191fd:	83 c4 10             	add    esp,0x10
c0019200:	83 ec 0c             	sub    esp,0xc
c0019203:	68 6c 95 02 c0       	push   0xc002956c
c0019208:	e8 cf 9e 00 00       	call   c00230dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001920d:	83 c4 10             	add    esp,0x10
c0019210:	83 ec 04             	sub    esp,0x4
c0019213:	68 ac 72 02 c0       	push   0xc00272ac
c0019218:	68 6c 95 02 c0       	push   0xc002956c
c001921d:	68 8c 30 02 c0       	push   0xc002308c
c0019222:	e8 71 39 ff ff       	call   c000cb98 <__cxa_atexit>
c0019227:	83 c4 10             	add    esp,0x10
c001922a:	66 90                	xchg   ax,ax
c001922c:	90                   	nop
c001922d:	83 c4 0c             	add    esp,0xc
c0019230:	c3                   	ret    
c0019231:	8d 76 00             	lea    esi,[esi+0x0]

c0019234 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0019234:	83 ec 0c             	sub    esp,0xc
c0019237:	83 ec 08             	sub    esp,0x8
c001923a:	68 ff ff 00 00       	push   0xffff
c001923f:	6a 01                	push   0x1
c0019241:	e8 4a ff ff ff       	call   c0019190 <__static_initialization_and_destruction_0(int, int)>
c0019246:	83 c4 10             	add    esp,0x10
c0019249:	83 c4 0c             	add    esp,0xc
c001924c:	c3                   	ret    

c001924d <Vm::inbv(unsigned short)>:
c001924d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019251:	66 81 fa fe fe       	cmp    dx,0xfefe
c0019256:	75 06                	jne    c001925e <Vm::inbv(unsigned short)+0x11>
c0019258:	a0 cc 95 02 c0       	mov    al,ds:0xc00295cc
c001925d:	c3                   	ret    
c001925e:	ec                   	in     al,dx
c001925f:	c3                   	ret    

c0019260 <Vm::outbv(unsigned short, unsigned char)>:
c0019260:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019268:	66 81 fa fe fe       	cmp    dx,0xfefe
c001926d:	75 25                	jne    c0019294 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001926f:	8b 0d cc 95 02 c0    	mov    ecx,DWORD PTR ds:0xc00295cc
c0019275:	8d 51 01             	lea    edx,[ecx+0x1]
c0019278:	88 81 e0 95 02 c0    	mov    BYTE PTR [ecx-0x3ffd6a20],al
c001927e:	89 15 cc 95 02 c0    	mov    DWORD PTR ds:0xc00295cc,edx
c0019284:	83 fa 20             	cmp    edx,0x20
c0019287:	75 0c                	jne    c0019295 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0019289:	c7 05 cc 95 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00295cc,0x1f
c0019293:	c3                   	ret    
c0019294:	ee                   	out    dx,al
c0019295:	c3                   	ret    

c0019296 <Vm::realToLinear(unsigned short, unsigned short)>:
c0019296:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001929b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00192a0:	c1 e0 04             	shl    eax,0x4
c00192a3:	01 d0                	add    eax,edx
c00192a5:	c3                   	ret    

c00192a6 <Vm::getSegment(unsigned int)>:
c00192a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192aa:	c1 e8 10             	shr    eax,0x10
c00192ad:	c3                   	ret    

c00192ae <Vm::getOffset(unsigned int)>:
c00192ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192b2:	c3                   	ret    

c00192b3 <Vm::mainloop2()>:
c00192b3:	83 ec 18             	sub    esp,0x18
c00192b6:	fa                   	cli    
c00192b7:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c00192bd:	6a 02                	push   0x2
c00192bf:	c6 05 c5 95 02 c0 01 	mov    BYTE PTR ds:0xc00295c5,0x1
c00192c6:	e8 25 f6 ff ff       	call   c00188f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00192cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192d0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00192d4:	52                   	push   edx
c00192d5:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00192d9:	52                   	push   edx
c00192da:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00192de:	52                   	push   edx
c00192df:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00192e3:	50                   	push   eax
c00192e4:	e8 46 6f fe ff       	call   c000022f <goToVM86>
c00192e9:	83 c4 2c             	add    esp,0x2c
c00192ec:	c3                   	ret    

c00192ed <Vm::mainVm8086Loop(void*)>:
c00192ed:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c00192f2:	48                   	dec    eax
c00192f3:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c00192f8:	75 01                	jne    c00192fb <Vm::mainVm8086Loop(void*)+0xe>
c00192fa:	fb                   	sti    
c00192fb:	eb b6                	jmp    c00192b3 <Vm::mainloop2()>

c00192fd <Vm::mainloop3(unsigned long)>:
c00192fd:	83 ec 18             	sub    esp,0x18
c0019300:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019304:	fa                   	cli    
c0019305:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c001930b:	6a 02                	push   0x2
c001930d:	c6 05 c4 95 02 c0 01 	mov    BYTE PTR ds:0xc00295c4,0x1
c0019314:	a3 c0 95 02 c0       	mov    ds:0xc00295c0,eax
c0019319:	e8 d2 f5 ff ff       	call   c00188f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001931e:	83 c4 1c             	add    esp,0x1c
c0019321:	eb 90                	jmp    c00192b3 <Vm::mainloop2()>

c0019323 <Vm::initialise8086()>:
c0019323:	83 ec 0c             	sub    esp,0xc
c0019326:	68 80 00 00 00       	push   0x80
c001932b:	6a 00                	push   0x0
c001932d:	68 ed 92 01 c0       	push   0xc00192ed
c0019332:	ff 35 90 95 02 c0    	push   DWORD PTR ds:0xc0029590
c0019338:	e8 c7 f1 ff ff       	call   c0018504 <Process::createThread(void (*)(void*), void*, int)>
c001933d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019344:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0019349:	68 00 01 00 00       	push   0x100
c001934e:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c0019353:	6a 00                	push   0x0
c0019355:	6a 00                	push   0x0
c0019357:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001935d:	e8 14 30 ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019362:	83 c4 2c             	add    esp,0x2c
c0019365:	c3                   	ret    

c0019366 <Vm::finish8086()>:
c0019366:	53                   	push   ebx
c0019367:	83 ec 08             	sub    esp,0x8
c001936a:	fa                   	cli    
c001936b:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c0019371:	80 3d c4 95 02 c0 00 	cmp    BYTE PTR ds:0xc00295c4,0x0
c0019378:	75 15                	jne    c001938f <Vm::finish8086()+0x29>
c001937a:	e8 a1 f3 ff ff       	call   c0018720 <schedule()>
c001937f:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c0019384:	48                   	dec    eax
c0019385:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c001938a:	75 de                	jne    c001936a <Vm::finish8086()+0x4>
c001938c:	fb                   	sti    
c001938d:	eb db                	jmp    c001936a <Vm::finish8086()+0x4>
c001938f:	83 ec 0c             	sub    esp,0xc
c0019392:	8b 1d c0 95 02 c0    	mov    ebx,DWORD PTR ds:0xc00295c0
c0019398:	ff 35 c8 95 02 c0    	push   DWORD PTR ds:0xc00295c8
c001939e:	c6 05 c4 95 02 c0 00 	mov    BYTE PTR ds:0xc00295c4,0x0
c00193a5:	e8 32 f8 ff ff       	call   c0018bdc <unblockTask(ThreadControlBlock*)>
c00193aa:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c00193af:	83 c4 10             	add    esp,0x10
c00193b2:	8d 50 ff             	lea    edx,[eax-0x1]
c00193b5:	89 15 68 95 02 c0    	mov    DWORD PTR ds:0xc0029568,edx
c00193bb:	85 d2                	test   edx,edx
c00193bd:	75 01                	jne    c00193c0 <Vm::finish8086()+0x5a>
c00193bf:	fb                   	sti    
c00193c0:	89 d8                	mov    eax,ebx
c00193c2:	83 c4 08             	add    esp,0x8
c00193c5:	5b                   	pop    ebx
c00193c6:	c3                   	ret    

c00193c7 <Vm::getOutput8086(unsigned char*)>:
c00193c7:	57                   	push   edi
c00193c8:	8b 0d cc 95 02 c0    	mov    ecx,DWORD PTR ds:0xc00295cc
c00193ce:	56                   	push   esi
c00193cf:	be e0 95 02 c0       	mov    esi,0xc00295e0
c00193d4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00193d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00193da:	a1 cc 95 02 c0       	mov    eax,ds:0xc00295cc
c00193df:	5e                   	pop    esi
c00193e0:	c7 05 cc 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00295cc,0x0
c00193ea:	5f                   	pop    edi
c00193eb:	c3                   	ret    

c00193ec <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00193ec:	55                   	push   ebp
c00193ed:	57                   	push   edi
c00193ee:	56                   	push   esi
c00193ef:	53                   	push   ebx
c00193f0:	83 ec 2c             	sub    esp,0x2c
c00193f3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00193f7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00193fb:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00193ff:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0019403:	fa                   	cli    
c0019404:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c001940a:	0f b6 35 c5 95 02 c0 	movzx  esi,BYTE PTR ds:0xc00295c5
c0019411:	89 f0                	mov    eax,esi
c0019413:	84 c0                	test   al,al
c0019415:	75 1d                	jne    c0019434 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0019417:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001941b:	e8 00 f3 ff ff       	call   c0018720 <schedule()>
c0019420:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c0019425:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019429:	48                   	dec    eax
c001942a:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c001942f:	75 d2                	jne    c0019403 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019431:	fb                   	sti    
c0019432:	eb cf                	jmp    c0019403 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019434:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c0019439:	c7 05 cc 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00295cc,0x0
c0019443:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0019447:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001944b:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c001944f:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0019453:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0019457:	50                   	push   eax
c0019458:	6a 20                	push   0x20
c001945a:	6a 00                	push   0x0
c001945c:	68 e0 95 02 c0       	push   0xc00295e0
c0019461:	e8 1e 72 fe ff       	call   c0000684 <memset>
c0019466:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001946d:	e8 9d 05 ff ff       	call   c0009a0f <malloc>
c0019472:	83 c4 0c             	add    esp,0xc
c0019475:	89 c3                	mov    ebx,eax
c0019477:	ff 35 90 95 02 c0    	push   DWORD PTR ds:0xc0029590
c001947d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019481:	50                   	push   eax
c0019482:	e8 e3 3d ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0019487:	83 c4 10             	add    esp,0x10
c001948a:	85 db                	test   ebx,ebx
c001948c:	75 0a                	jne    c0019498 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001948e:	83 ec 0c             	sub    esp,0xc
c0019491:	68 28 62 02 c0       	push   0xc0026228
c0019496:	eb 3e                	jmp    c00194d6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019498:	50                   	push   eax
c0019499:	8d 44 24 17          	lea    eax,[esp+0x17]
c001949d:	50                   	push   eax
c001949e:	8d 44 24 20          	lea    eax,[esp+0x20]
c00194a2:	50                   	push   eax
c00194a3:	53                   	push   ebx
c00194a4:	e8 2f 41 ff ff       	call   c000d5d8 <File::stat(unsigned long long*, bool*)>
c00194a9:	83 c4 10             	add    esp,0x10
c00194ac:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00194b1:	74 0a                	je     c00194bd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00194b3:	83 ec 0c             	sub    esp,0xc
c00194b6:	68 3c 62 02 c0       	push   0xc002623c
c00194bb:	eb 19                	jmp    c00194d6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00194bd:	51                   	push   ecx
c00194be:	51                   	push   ecx
c00194bf:	6a 01                	push   0x1
c00194c1:	53                   	push   ebx
c00194c2:	e8 65 3e ff ff       	call   c000d32c <File::open(FileOpenMode)>
c00194c7:	83 c4 10             	add    esp,0x10
c00194ca:	85 c0                	test   eax,eax
c00194cc:	74 24                	je     c00194f2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00194ce:	83 ec 0c             	sub    esp,0xc
c00194d1:	68 55 62 02 c0       	push   0xc0026255
c00194d6:	e8 e0 b4 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c00194db:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c00194e0:	83 c4 10             	add    esp,0x10
c00194e3:	48                   	dec    eax
c00194e4:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c00194e9:	85 c0                	test   eax,eax
c00194eb:	75 01                	jne    c00194ee <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00194ed:	fb                   	sti    
c00194ee:	31 f6                	xor    esi,esi
c00194f0:	eb 58                	jmp    c001954a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00194f2:	0f b7 ed             	movzx  ebp,bp
c00194f5:	50                   	push   eax
c00194f6:	0f b7 ff             	movzx  edi,di
c00194f9:	50                   	push   eax
c00194fa:	55                   	push   ebp
c00194fb:	57                   	push   edi
c00194fc:	e8 95 fd ff ff       	call   c0019296 <Vm::realToLinear(unsigned short, unsigned short)>
c0019501:	5a                   	pop    edx
c0019502:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019504:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019508:	51                   	push   ecx
c0019509:	50                   	push   eax
c001950a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001950e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019512:	53                   	push   ebx
c0019513:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019516:	83 c4 14             	add    esp,0x14
c0019519:	53                   	push   ebx
c001951a:	e8 6b 3e ff ff       	call   c000d38a <File::close()>
c001951f:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c0019524:	83 c4 10             	add    esp,0x10
c0019527:	48                   	dec    eax
c0019528:	c6 05 c5 95 02 c0 00 	mov    BYTE PTR ds:0xc00295c5,0x0
c001952f:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c0019534:	85 c0                	test   eax,eax
c0019536:	75 01                	jne    c0019539 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0019538:	fb                   	sti    
c0019539:	83 ec 0c             	sub    esp,0xc
c001953c:	ff 35 c8 95 02 c0    	push   DWORD PTR ds:0xc00295c8
c0019542:	e8 95 f6 ff ff       	call   c0018bdc <unblockTask(ThreadControlBlock*)>
c0019547:	83 c4 10             	add    esp,0x10
c001954a:	83 c4 2c             	add    esp,0x2c
c001954d:	89 f0                	mov    eax,esi
c001954f:	5b                   	pop    ebx
c0019550:	5e                   	pop    esi
c0019551:	5f                   	pop    edi
c0019552:	5d                   	pop    ebp
c0019553:	c3                   	ret    

c0019554 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0019554:	57                   	push   edi
c0019555:	56                   	push   esi
c0019556:	53                   	push   ebx
c0019557:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001955b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001955f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019563:	83 e8 06             	sub    eax,0x6
c0019566:	0f b7 c0             	movzx  eax,ax
c0019569:	50                   	push   eax
c001956a:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001956f:	50                   	push   eax
c0019570:	e8 21 fd ff ff       	call   c0019296 <Vm::realToLinear(unsigned short, unsigned short)>
c0019575:	5a                   	pop    edx
c0019576:	5e                   	pop    esi
c0019577:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001957a:	8d 56 fa             	lea    edx,[esi-0x6]
c001957d:	81 e2 ff ff 00 00    	and    edx,0xffff
c0019583:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0019586:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0019589:	83 c2 02             	add    edx,0x2
c001958c:	66 89 10             	mov    WORD PTR [eax],dx
c001958f:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0019592:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0019596:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0019599:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001959d:	89 d6                	mov    esi,edx
c001959f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00195a5:	66 81 e6 ff fd       	and    si,0xfdff
c00195aa:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00195ae:	74 07                	je     c00195b7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00195b0:	89 d6                	mov    esi,edx
c00195b2:	66 81 ce 00 02       	or     si,0x200
c00195b7:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00195bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00195c0:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00195c4:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00195cc:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00195cf:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00195d7:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00195da:	5b                   	pop    ebx
c00195db:	5e                   	pop    esi
c00195dc:	5f                   	pop    edi
c00195dd:	c3                   	ret    

c00195de <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00195de:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00195e3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00195e8:	c1 e0 04             	shl    eax,0x4
c00195eb:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00195ee:	c3                   	ret    

c00195ef <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00195ef:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00195f4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00195f9:	c1 e0 04             	shl    eax,0x4
c00195fc:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019600:	c3                   	ret    

c0019601 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019601:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019606:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001960b:	c1 e0 04             	shl    eax,0x4
c001960e:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0019611:	c3                   	ret    

c0019612 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0019612:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019617:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001961c:	c1 e0 04             	shl    eax,0x4
c001961f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019623:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0019626:	c3                   	ret    

c0019627 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0019627:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001962c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019631:	c1 e0 04             	shl    eax,0x4
c0019634:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019638:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001963c:	c3                   	ret    

c001963d <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001963d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019642:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019647:	c1 e0 04             	shl    eax,0x4
c001964a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001964e:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0019651:	c3                   	ret    

c0019652 <Vm::faultHandler(regs*)>:
c0019652:	55                   	push   ebp
c0019653:	57                   	push   edi
c0019654:	56                   	push   esi
c0019655:	53                   	push   ebx
c0019656:	83 ec 1c             	sub    esp,0x1c
c0019659:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001965d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019660:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0019664:	0f b7 f8             	movzx  edi,ax
c0019667:	52                   	push   edx
c0019668:	0f b7 c0             	movzx  eax,ax
c001966b:	50                   	push   eax
c001966c:	e8 25 fc ff ff       	call   c0019296 <Vm::realToLinear(unsigned short, unsigned short)>
c0019671:	5a                   	pop    edx
c0019672:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0019675:	59                   	pop    ecx
c0019676:	89 c1                	mov    ecx,eax
c0019678:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001967b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001967f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019688:	0f b7 c5             	movzx  eax,bp
c001968b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001968f:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0019693:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019697:	e8 fa fb ff ff       	call   c0019296 <Vm::realToLinear(unsigned short, unsigned short)>
c001969c:	5e                   	pop    esi
c001969d:	be 06 00 00 00       	mov    esi,0x6
c00196a2:	5a                   	pop    edx
c00196a3:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00196a8:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00196ad:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00196b0:	80 fa 9d             	cmp    dl,0x9d
c00196b3:	0f 84 2c 02 00 00    	je     c00198e5 <Vm::faultHandler(regs*)+0x293>
c00196b9:	0f 87 91 00 00 00    	ja     c0019750 <Vm::faultHandler(regs*)+0xfe>
c00196bf:	80 fa 66             	cmp    dl,0x66
c00196c2:	0f 84 98 01 00 00    	je     c0019860 <Vm::faultHandler(regs*)+0x20e>
c00196c8:	77 47                	ja     c0019711 <Vm::faultHandler(regs*)+0xbf>
c00196ca:	80 fa 36             	cmp    dl,0x36
c00196cd:	0f 84 80 01 00 00    	je     c0019853 <Vm::faultHandler(regs*)+0x201>
c00196d3:	77 1a                	ja     c00196ef <Vm::faultHandler(regs*)+0x9d>
c00196d5:	80 fa 26             	cmp    dl,0x26
c00196d8:	0f 84 4e 01 00 00    	je     c001982c <Vm::faultHandler(regs*)+0x1da>
c00196de:	80 fa 2e             	cmp    dl,0x2e
c00196e1:	0f 85 e2 05 00 00    	jne    c0019cc9 <Vm::faultHandler(regs*)+0x677>
c00196e7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00196ea:	31 f6                	xor    esi,esi
c00196ec:	41                   	inc    ecx
c00196ed:	eb be                	jmp    c00196ad <Vm::faultHandler(regs*)+0x5b>
c00196ef:	80 fa 64             	cmp    dl,0x64
c00196f2:	0f 84 41 01 00 00    	je     c0019839 <Vm::faultHandler(regs*)+0x1e7>
c00196f8:	0f 87 48 01 00 00    	ja     c0019846 <Vm::faultHandler(regs*)+0x1f4>
c00196fe:	80 fa 3e             	cmp    dl,0x3e
c0019701:	0f 85 c2 05 00 00    	jne    c0019cc9 <Vm::faultHandler(regs*)+0x677>
c0019707:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001970a:	be 01 00 00 00       	mov    esi,0x1
c001970f:	eb db                	jmp    c00196ec <Vm::faultHandler(regs*)+0x9a>
c0019711:	80 fa 6d             	cmp    dl,0x6d
c0019714:	0f 84 ec 02 00 00    	je     c0019a06 <Vm::faultHandler(regs*)+0x3b4>
c001971a:	77 17                	ja     c0019733 <Vm::faultHandler(regs*)+0xe1>
c001971c:	80 fa 67             	cmp    dl,0x67
c001971f:	0f 84 48 01 00 00    	je     c001986d <Vm::faultHandler(regs*)+0x21b>
c0019725:	80 fa 6c             	cmp    dl,0x6c
c0019728:	0f 84 69 02 00 00    	je     c0019997 <Vm::faultHandler(regs*)+0x345>
c001972e:	e9 96 05 00 00       	jmp    c0019cc9 <Vm::faultHandler(regs*)+0x677>
c0019733:	80 fa 6f             	cmp    dl,0x6f
c0019736:	0f 84 f4 03 00 00    	je     c0019b30 <Vm::faultHandler(regs*)+0x4de>
c001973c:	0f 82 59 03 00 00    	jb     c0019a9b <Vm::faultHandler(regs*)+0x449>
c0019742:	80 fa 9c             	cmp    dl,0x9c
c0019745:	0f 84 2f 01 00 00    	je     c001987a <Vm::faultHandler(regs*)+0x228>
c001974b:	e9 79 05 00 00       	jmp    c0019cc9 <Vm::faultHandler(regs*)+0x677>
c0019750:	80 fa ec             	cmp    dl,0xec
c0019753:	0f 84 14 05 00 00    	je     c0019c6d <Vm::faultHandler(regs*)+0x61b>
c0019759:	77 7b                	ja     c00197d6 <Vm::faultHandler(regs*)+0x184>
c001975b:	80 fa e4             	cmp    dl,0xe4
c001975e:	0f 84 93 04 00 00    	je     c0019bf7 <Vm::faultHandler(regs*)+0x5a5>
c0019764:	77 53                	ja     c00197b9 <Vm::faultHandler(regs*)+0x167>
c0019766:	80 fa cd             	cmp    dl,0xcd
c0019769:	0f 84 d9 01 00 00    	je     c0019948 <Vm::faultHandler(regs*)+0x2f6>
c001976f:	80 fa cf             	cmp    dl,0xcf
c0019772:	0f 85 51 05 00 00    	jne    c0019cc9 <Vm::faultHandler(regs*)+0x677>
c0019778:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001977b:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001977e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0019782:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0019785:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0019789:	81 ca 00 02 02 00    	or     edx,0x20200
c001978f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019792:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0019796:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001979c:	66 c1 e8 09          	shr    ax,0x9
c00197a0:	83 e0 01             	and    eax,0x1
c00197a3:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00197a6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00197a9:	83 c0 06             	add    eax,0x6
c00197ac:	25 ff ff 00 00       	and    eax,0xffff
c00197b1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00197b4:	e9 0c 05 00 00       	jmp    c0019cc5 <Vm::faultHandler(regs*)+0x673>
c00197b9:	80 fa e6             	cmp    dl,0xe6
c00197bc:	0f 84 7f 04 00 00    	je     c0019c41 <Vm::faultHandler(regs*)+0x5ef>
c00197c2:	0f 82 4b 04 00 00    	jb     c0019c13 <Vm::faultHandler(regs*)+0x5c1>
c00197c8:	80 fa e7             	cmp    dl,0xe7
c00197cb:	0f 84 87 04 00 00    	je     c0019c58 <Vm::faultHandler(regs*)+0x606>
c00197d1:	e9 f3 04 00 00       	jmp    c0019cc9 <Vm::faultHandler(regs*)+0x677>
c00197d6:	80 fa ef             	cmp    dl,0xef
c00197d9:	0f 84 d1 04 00 00    	je     c0019cb0 <Vm::faultHandler(regs*)+0x65e>
c00197df:	77 28                	ja     c0019809 <Vm::faultHandler(regs*)+0x1b7>
c00197e1:	80 fa ed             	cmp    dl,0xed
c00197e4:	0f 84 9f 04 00 00    	je     c0019c89 <Vm::faultHandler(regs*)+0x637>
c00197ea:	80 fa ee             	cmp    dl,0xee
c00197ed:	0f 85 d6 04 00 00    	jne    c0019cc9 <Vm::faultHandler(regs*)+0x677>
c00197f3:	50                   	push   eax
c00197f4:	50                   	push   eax
c00197f5:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00197f9:	50                   	push   eax
c00197fa:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00197fe:	50                   	push   eax
c00197ff:	e8 5c fa ff ff       	call   c0019260 <Vm::outbv(unsigned short, unsigned char)>
c0019804:	e9 9f 04 00 00       	jmp    c0019ca8 <Vm::faultHandler(regs*)+0x656>
c0019809:	80 fa fa             	cmp    dl,0xfa
c001980c:	0f 84 69 01 00 00    	je     c001997b <Vm::faultHandler(regs*)+0x329>
c0019812:	80 fa fb             	cmp    dl,0xfb
c0019815:	0f 84 6e 01 00 00    	je     c0019989 <Vm::faultHandler(regs*)+0x337>
c001981b:	80 fa f3             	cmp    dl,0xf3
c001981e:	0f 85 a5 04 00 00    	jne    c0019cc9 <Vm::faultHandler(regs*)+0x677>
c0019824:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019827:	e9 c0 fe ff ff       	jmp    c00196ec <Vm::faultHandler(regs*)+0x9a>
c001982c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001982f:	be 02 00 00 00       	mov    esi,0x2
c0019834:	e9 b3 fe ff ff       	jmp    c00196ec <Vm::faultHandler(regs*)+0x9a>
c0019839:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001983c:	be 03 00 00 00       	mov    esi,0x3
c0019841:	e9 a6 fe ff ff       	jmp    c00196ec <Vm::faultHandler(regs*)+0x9a>
c0019846:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019849:	be 04 00 00 00       	mov    esi,0x4
c001984e:	e9 99 fe ff ff       	jmp    c00196ec <Vm::faultHandler(regs*)+0x9a>
c0019853:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019856:	be 05 00 00 00       	mov    esi,0x5
c001985b:	e9 8c fe ff ff       	jmp    c00196ec <Vm::faultHandler(regs*)+0x9a>
c0019860:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019863:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019868:	e9 7f fe ff ff       	jmp    c00196ec <Vm::faultHandler(regs*)+0x9a>
c001986d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019870:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019875:	e9 72 fe ff ff       	jmp    c00196ec <Vm::faultHandler(regs*)+0x9a>
c001987a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001987d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019881:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019886:	74 30                	je     c00198b8 <Vm::faultHandler(regs*)+0x266>
c0019888:	83 e9 04             	sub    ecx,0x4
c001988b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019891:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019897:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001989a:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001989d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00198a3:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00198a7:	0f 84 15 04 00 00    	je     c0019cc2 <Vm::faultHandler(regs*)+0x670>
c00198ad:	80 ce 02             	or     dh,0x2
c00198b0:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00198b3:	e9 0a 04 00 00       	jmp    c0019cc2 <Vm::faultHandler(regs*)+0x670>
c00198b8:	83 e9 02             	sub    ecx,0x2
c00198bb:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00198c1:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00198c4:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00198c8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00198ce:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00198d2:	74 05                	je     c00198d9 <Vm::faultHandler(regs*)+0x287>
c00198d4:	80 ce 02             	or     dh,0x2
c00198d7:	eb 03                	jmp    c00198dc <Vm::faultHandler(regs*)+0x28a>
c00198d9:	80 e6 fd             	and    dh,0xfd
c00198dc:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00198e0:	e9 dd 03 00 00       	jmp    c0019cc2 <Vm::faultHandler(regs*)+0x670>
c00198e5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00198ea:	74 2a                	je     c0019916 <Vm::faultHandler(regs*)+0x2c4>
c00198ec:	8b 10                	mov    edx,DWORD PTR [eax]
c00198ee:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00198f4:	81 ca 00 02 02 00    	or     edx,0x20200
c00198fa:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00198fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00198ff:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019905:	c1 e8 09             	shr    eax,0x9
c0019908:	83 e0 01             	and    eax,0x1
c001990b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001990e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019911:	83 c0 04             	add    eax,0x4
c0019914:	eb 25                	jmp    c001993b <Vm::faultHandler(regs*)+0x2e9>
c0019916:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019919:	81 ca 00 02 02 00    	or     edx,0x20200
c001991f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019922:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019925:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001992b:	66 c1 e8 09          	shr    ax,0x9
c001992f:	83 e0 01             	and    eax,0x1
c0019932:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019935:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019938:	83 c0 02             	add    eax,0x2
c001993b:	25 ff ff 00 00       	and    eax,0xffff
c0019940:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019943:	e9 7a 03 00 00       	jmp    c0019cc2 <Vm::faultHandler(regs*)+0x670>
c0019948:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001994c:	3c ee                	cmp    al,0xee
c001994e:	75 10                	jne    c0019960 <Vm::faultHandler(regs*)+0x30e>
c0019950:	83 ec 0c             	sub    esp,0xc
c0019953:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019956:	e8 a2 f9 ff ff       	call   c00192fd <Vm::mainloop3(unsigned long)>
c001995b:	e9 4b 03 00 00       	jmp    c0019cab <Vm::faultHandler(regs*)+0x659>
c0019960:	83 ec 0c             	sub    esp,0xc
c0019963:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019967:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001996b:	51                   	push   ecx
c001996c:	50                   	push   eax
c001996d:	53                   	push   ebx
c001996e:	e8 e1 fb ff ff       	call   c0019554 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0019973:	83 c4 20             	add    esp,0x20
c0019976:	e9 4a 03 00 00       	jmp    c0019cc5 <Vm::faultHandler(regs*)+0x673>
c001997b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019980:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0019984:	e9 39 03 00 00       	jmp    c0019cc2 <Vm::faultHandler(regs*)+0x670>
c0019989:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001998e:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0019992:	e9 2b 03 00 00       	jmp    c0019cc2 <Vm::faultHandler(regs*)+0x670>
c0019997:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001999a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001999f:	74 2b                	je     c00199cc <Vm::faultHandler(regs*)+0x37a>
c00199a1:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00199a8:	76 22                	jbe    c00199cc <Vm::faultHandler(regs*)+0x37a>
c00199aa:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00199ae:	50                   	push   eax
c00199af:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00199b3:	50                   	push   eax
c00199b4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00199b8:	50                   	push   eax
c00199b9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00199bd:	50                   	push   eax
c00199be:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00199c2:	50                   	push   eax
c00199c3:	6a 6c                	push   0x6c
c00199c5:	6a 6c                	push   0x6c
c00199c7:	e9 b9 01 00 00       	jmp    c0019b85 <Vm::faultHandler(regs*)+0x533>
c00199cc:	83 ec 0c             	sub    esp,0xc
c00199cf:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00199d3:	0f b7 f6             	movzx  esi,si
c00199d6:	50                   	push   eax
c00199d7:	e8 71 f8 ff ff       	call   c001924d <Vm::inbv(unsigned short)>
c00199dc:	83 c4 0c             	add    esp,0xc
c00199df:	0f b6 c0             	movzx  eax,al
c00199e2:	50                   	push   eax
c00199e3:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00199e7:	50                   	push   eax
c00199e8:	56                   	push   esi
c00199e9:	e8 24 fc ff ff       	call   c0019612 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00199ee:	83 c4 10             	add    esp,0x10
c00199f1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00199f4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00199f8:	74 03                	je     c00199fd <Vm::faultHandler(regs*)+0x3ab>
c00199fa:	48                   	dec    eax
c00199fb:	eb 01                	jmp    c00199fe <Vm::faultHandler(regs*)+0x3ac>
c00199fd:	40                   	inc    eax
c00199fe:	0f b7 c0             	movzx  eax,ax
c0019a01:	e9 8d 00 00 00       	jmp    c0019a93 <Vm::faultHandler(regs*)+0x441>
c0019a06:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019a09:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019a0c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019a11:	74 29                	je     c0019a3c <Vm::faultHandler(regs*)+0x3ea>
c0019a13:	3d ff ff 00 00       	cmp    eax,0xffff
c0019a18:	76 22                	jbe    c0019a3c <Vm::faultHandler(regs*)+0x3ea>
c0019a1a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019a1e:	50                   	push   eax
c0019a1f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019a23:	50                   	push   eax
c0019a24:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019a28:	50                   	push   eax
c0019a29:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019a2d:	50                   	push   eax
c0019a2e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019a32:	50                   	push   eax
c0019a33:	6a 6d                	push   0x6d
c0019a35:	6a 6d                	push   0x6d
c0019a37:	e9 49 01 00 00       	jmp    c0019b85 <Vm::faultHandler(regs*)+0x533>
c0019a3c:	0f b7 c8             	movzx  ecx,ax
c0019a3f:	0f b7 f6             	movzx  esi,si
c0019a42:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019a45:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019a4a:	74 20                	je     c0019a6c <Vm::faultHandler(regs*)+0x41a>
c0019a4c:	ed                   	in     eax,dx
c0019a4d:	55                   	push   ebp
c0019a4e:	50                   	push   eax
c0019a4f:	51                   	push   ecx
c0019a50:	56                   	push   esi
c0019a51:	e8 e7 fb ff ff       	call   c001963d <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019a56:	83 c4 10             	add    esp,0x10
c0019a59:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019a5c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019a60:	74 05                	je     c0019a67 <Vm::faultHandler(regs*)+0x415>
c0019a62:	83 e8 04             	sub    eax,0x4
c0019a65:	eb 27                	jmp    c0019a8e <Vm::faultHandler(regs*)+0x43c>
c0019a67:	83 c0 04             	add    eax,0x4
c0019a6a:	eb 22                	jmp    c0019a8e <Vm::faultHandler(regs*)+0x43c>
c0019a6c:	66 ed                	in     ax,dx
c0019a6e:	0f b7 c0             	movzx  eax,ax
c0019a71:	57                   	push   edi
c0019a72:	50                   	push   eax
c0019a73:	51                   	push   ecx
c0019a74:	56                   	push   esi
c0019a75:	e8 ad fb ff ff       	call   c0019627 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019a7a:	83 c4 10             	add    esp,0x10
c0019a7d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019a80:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019a84:	74 05                	je     c0019a8b <Vm::faultHandler(regs*)+0x439>
c0019a86:	83 e8 02             	sub    eax,0x2
c0019a89:	eb 03                	jmp    c0019a8e <Vm::faultHandler(regs*)+0x43c>
c0019a8b:	83 c0 02             	add    eax,0x2
c0019a8e:	25 ff ff 00 00       	and    eax,0xffff
c0019a93:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019a96:	e9 27 02 00 00       	jmp    c0019cc2 <Vm::faultHandler(regs*)+0x670>
c0019a9b:	8d 46 ff             	lea    eax,[esi-0x1]
c0019a9e:	3c 05                	cmp    al,0x5
c0019aa0:	77 24                	ja     c0019ac6 <Vm::faultHandler(regs*)+0x474>
c0019aa2:	0f b6 c0             	movzx  eax,al
c0019aa5:	ff 24 85 c8 62 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9d38]
c0019aac:	0f b7 fd             	movzx  edi,bp
c0019aaf:	eb 15                	jmp    c0019ac6 <Vm::faultHandler(regs*)+0x474>
c0019ab1:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0019ab5:	eb 0f                	jmp    c0019ac6 <Vm::faultHandler(regs*)+0x474>
c0019ab7:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0019abb:	eb 09                	jmp    c0019ac6 <Vm::faultHandler(regs*)+0x474>
c0019abd:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0019ac1:	eb 03                	jmp    c0019ac6 <Vm::faultHandler(regs*)+0x474>
c0019ac3:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0019ac6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019ac9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019ace:	74 29                	je     c0019af9 <Vm::faultHandler(regs*)+0x4a7>
c0019ad0:	3d ff ff 00 00       	cmp    eax,0xffff
c0019ad5:	76 22                	jbe    c0019af9 <Vm::faultHandler(regs*)+0x4a7>
c0019ad7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019adb:	50                   	push   eax
c0019adc:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019ae0:	50                   	push   eax
c0019ae1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019ae5:	50                   	push   eax
c0019ae6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019aea:	50                   	push   eax
c0019aeb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019aef:	50                   	push   eax
c0019af0:	6a 6e                	push   0x6e
c0019af2:	6a 6e                	push   0x6e
c0019af4:	e9 8c 00 00 00       	jmp    c0019b85 <Vm::faultHandler(regs*)+0x533>
c0019af9:	0f b7 c0             	movzx  eax,ax
c0019afc:	52                   	push   edx
c0019afd:	52                   	push   edx
c0019afe:	50                   	push   eax
c0019aff:	57                   	push   edi
c0019b00:	e8 d9 fa ff ff       	call   c00195de <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019b05:	59                   	pop    ecx
c0019b06:	0f b6 c0             	movzx  eax,al
c0019b09:	5e                   	pop    esi
c0019b0a:	50                   	push   eax
c0019b0b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019b0f:	50                   	push   eax
c0019b10:	e8 4b f7 ff ff       	call   c0019260 <Vm::outbv(unsigned short, unsigned char)>
c0019b15:	83 c4 10             	add    esp,0x10
c0019b18:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019b1b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019b1f:	74 03                	je     c0019b24 <Vm::faultHandler(regs*)+0x4d2>
c0019b21:	48                   	dec    eax
c0019b22:	eb 01                	jmp    c0019b25 <Vm::faultHandler(regs*)+0x4d3>
c0019b24:	40                   	inc    eax
c0019b25:	0f b7 c0             	movzx  eax,ax
c0019b28:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019b2b:	e9 92 01 00 00       	jmp    c0019cc2 <Vm::faultHandler(regs*)+0x670>
c0019b30:	8d 46 ff             	lea    eax,[esi-0x1]
c0019b33:	3c 05                	cmp    al,0x5
c0019b35:	77 1f                	ja     c0019b56 <Vm::faultHandler(regs*)+0x504>
c0019b37:	0f b6 c0             	movzx  eax,al
c0019b3a:	ff 24 85 e0 62 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9d20]
c0019b41:	89 ef                	mov    edi,ebp
c0019b43:	eb 11                	jmp    c0019b56 <Vm::faultHandler(regs*)+0x504>
c0019b45:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0019b48:	eb 0c                	jmp    c0019b56 <Vm::faultHandler(regs*)+0x504>
c0019b4a:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0019b4d:	eb 07                	jmp    c0019b56 <Vm::faultHandler(regs*)+0x504>
c0019b4f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0019b52:	eb 02                	jmp    c0019b56 <Vm::faultHandler(regs*)+0x504>
c0019b54:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0019b56:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019b59:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019b5e:	74 37                	je     c0019b97 <Vm::faultHandler(regs*)+0x545>
c0019b60:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0019b66:	76 2f                	jbe    c0019b97 <Vm::faultHandler(regs*)+0x545>
c0019b68:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019b6c:	50                   	push   eax
c0019b6d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019b71:	50                   	push   eax
c0019b72:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019b76:	50                   	push   eax
c0019b77:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019b7b:	50                   	push   eax
c0019b7c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019b80:	50                   	push   eax
c0019b81:	6a 6f                	push   0x6f
c0019b83:	6a 6f                	push   0x6f
c0019b85:	68 6e 62 02 c0       	push   0xc002626e
c0019b8a:	e8 70 31 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0019b8f:	83 c4 20             	add    esp,0x20
c0019b92:	e9 86 01 00 00       	jmp    c0019d1d <Vm::faultHandler(regs*)+0x6cb>
c0019b97:	0f b7 d7             	movzx  edx,di
c0019b9a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0019b9d:	0f b7 c6             	movzx  eax,si
c0019ba0:	81 e1 00 04 00 00    	and    ecx,0x400
c0019ba6:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0019ba9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019bae:	74 1d                	je     c0019bcd <Vm::faultHandler(regs*)+0x57b>
c0019bb0:	55                   	push   ebp
c0019bb1:	55                   	push   ebp
c0019bb2:	50                   	push   eax
c0019bb3:	52                   	push   edx
c0019bb4:	e8 48 fa ff ff       	call   c0019601 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019bb9:	83 c4 10             	add    esp,0x10
c0019bbc:	89 fa                	mov    edx,edi
c0019bbe:	ef                   	out    dx,eax
c0019bbf:	85 c9                	test   ecx,ecx
c0019bc1:	74 05                	je     c0019bc8 <Vm::faultHandler(regs*)+0x576>
c0019bc3:	83 ee 04             	sub    esi,0x4
c0019bc6:	eb 21                	jmp    c0019be9 <Vm::faultHandler(regs*)+0x597>
c0019bc8:	83 c6 04             	add    esi,0x4
c0019bcb:	eb 1c                	jmp    c0019be9 <Vm::faultHandler(regs*)+0x597>
c0019bcd:	55                   	push   ebp
c0019bce:	55                   	push   ebp
c0019bcf:	50                   	push   eax
c0019bd0:	52                   	push   edx
c0019bd1:	e8 19 fa ff ff       	call   c00195ef <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019bd6:	83 c4 10             	add    esp,0x10
c0019bd9:	89 fa                	mov    edx,edi
c0019bdb:	66 ef                	out    dx,ax
c0019bdd:	85 c9                	test   ecx,ecx
c0019bdf:	74 05                	je     c0019be6 <Vm::faultHandler(regs*)+0x594>
c0019be1:	83 ee 02             	sub    esi,0x2
c0019be4:	eb 03                	jmp    c0019be9 <Vm::faultHandler(regs*)+0x597>
c0019be6:	83 c6 02             	add    esi,0x2
c0019be9:	81 e6 ff ff 00 00    	and    esi,0xffff
c0019bef:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0019bf2:	e9 cb 00 00 00       	jmp    c0019cc2 <Vm::faultHandler(regs*)+0x670>
c0019bf7:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019bfe:	83 ec 0c             	sub    esp,0xc
c0019c01:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019c05:	50                   	push   eax
c0019c06:	e8 42 f6 ff ff       	call   c001924d <Vm::inbv(unsigned short)>
c0019c0b:	0f b6 c0             	movzx  eax,al
c0019c0e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019c11:	eb 3f                	jmp    c0019c52 <Vm::faultHandler(regs*)+0x600>
c0019c13:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c18:	74 07                	je     c0019c21 <Vm::faultHandler(regs*)+0x5cf>
c0019c1a:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019c1e:	ed                   	in     eax,dx
c0019c1f:	eb 14                	jmp    c0019c35 <Vm::faultHandler(regs*)+0x5e3>
c0019c21:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0019c24:	66 31 f6             	xor    si,si
c0019c27:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0019c2a:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019c2e:	66 ed                	in     ax,dx
c0019c30:	0f b7 c0             	movzx  eax,ax
c0019c33:	09 f0                	or     eax,esi
c0019c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019c38:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019c3c:	e9 84 00 00 00       	jmp    c0019cc5 <Vm::faultHandler(regs*)+0x673>
c0019c41:	52                   	push   edx
c0019c42:	52                   	push   edx
c0019c43:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019c47:	50                   	push   eax
c0019c48:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019c4c:	50                   	push   eax
c0019c4d:	e8 0e f6 ff ff       	call   c0019260 <Vm::outbv(unsigned short, unsigned char)>
c0019c52:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019c56:	eb 53                	jmp    c0019cab <Vm::faultHandler(regs*)+0x659>
c0019c58:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019c5b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019c5f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c64:	74 03                	je     c0019c69 <Vm::faultHandler(regs*)+0x617>
c0019c66:	ef                   	out    dx,eax
c0019c67:	eb cf                	jmp    c0019c38 <Vm::faultHandler(regs*)+0x5e6>
c0019c69:	66 ef                	out    dx,ax
c0019c6b:	eb cb                	jmp    c0019c38 <Vm::faultHandler(regs*)+0x5e6>
c0019c6d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019c74:	83 ec 0c             	sub    esp,0xc
c0019c77:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019c7b:	50                   	push   eax
c0019c7c:	e8 cc f5 ff ff       	call   c001924d <Vm::inbv(unsigned short)>
c0019c81:	0f b6 c0             	movzx  eax,al
c0019c84:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019c87:	eb 1f                	jmp    c0019ca8 <Vm::faultHandler(regs*)+0x656>
c0019c89:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019c8c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c91:	74 03                	je     c0019c96 <Vm::faultHandler(regs*)+0x644>
c0019c93:	ed                   	in     eax,dx
c0019c94:	eb 0d                	jmp    c0019ca3 <Vm::faultHandler(regs*)+0x651>
c0019c96:	66 ed                	in     ax,dx
c0019c98:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019c9b:	0f b7 c0             	movzx  eax,ax
c0019c9e:	66 31 d2             	xor    dx,dx
c0019ca1:	09 d0                	or     eax,edx
c0019ca3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019ca6:	eb 1a                	jmp    c0019cc2 <Vm::faultHandler(regs*)+0x670>
c0019ca8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019cab:	83 c4 10             	add    esp,0x10
c0019cae:	eb 15                	jmp    c0019cc5 <Vm::faultHandler(regs*)+0x673>
c0019cb0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019cb3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019cb6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019cbb:	74 03                	je     c0019cc0 <Vm::faultHandler(regs*)+0x66e>
c0019cbd:	ef                   	out    dx,eax
c0019cbe:	eb 02                	jmp    c0019cc2 <Vm::faultHandler(regs*)+0x670>
c0019cc0:	66 ef                	out    dx,ax
c0019cc2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019cc5:	b0 01                	mov    al,0x1
c0019cc7:	eb 56                	jmp    c0019d1f <Vm::faultHandler(regs*)+0x6cd>
c0019cc9:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019ccd:	50                   	push   eax
c0019cce:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019cd2:	50                   	push   eax
c0019cd3:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019cd7:	50                   	push   eax
c0019cd8:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019cdc:	50                   	push   eax
c0019cdd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019ce1:	50                   	push   eax
c0019ce2:	52                   	push   edx
c0019ce3:	52                   	push   edx
c0019ce4:	68 9b 62 02 c0       	push   0xc002629b
c0019ce9:	e8 11 30 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0019cee:	83 c4 20             	add    esp,0x20
c0019cf1:	83 ec 0c             	sub    esp,0xc
c0019cf4:	6a 60                	push   0x60
c0019cf6:	e8 52 f5 ff ff       	call   c001924d <Vm::inbv(unsigned short)>
c0019cfb:	83 c4 10             	add    esp,0x10
c0019cfe:	3c 1c                	cmp    al,0x1c
c0019d00:	74 04                	je     c0019d06 <Vm::faultHandler(regs*)+0x6b4>
c0019d02:	3c 5a                	cmp    al,0x5a
c0019d04:	75 eb                	jne    c0019cf1 <Vm::faultHandler(regs*)+0x69f>
c0019d06:	3c 5a                	cmp    al,0x5a
c0019d08:	74 04                	je     c0019d0e <Vm::faultHandler(regs*)+0x6bc>
c0019d0a:	3c 1c                	cmp    al,0x1c
c0019d0c:	75 0f                	jne    c0019d1d <Vm::faultHandler(regs*)+0x6cb>
c0019d0e:	83 ec 0c             	sub    esp,0xc
c0019d11:	6a 60                	push   0x60
c0019d13:	e8 35 f5 ff ff       	call   c001924d <Vm::inbv(unsigned short)>
c0019d18:	83 c4 10             	add    esp,0x10
c0019d1b:	eb e9                	jmp    c0019d06 <Vm::faultHandler(regs*)+0x6b4>
c0019d1d:	31 c0                	xor    eax,eax
c0019d1f:	83 c4 1c             	add    esp,0x1c
c0019d22:	5b                   	pop    ebx
c0019d23:	5e                   	pop    esi
c0019d24:	5f                   	pop    edi
c0019d25:	5d                   	pop    ebp
c0019d26:	c3                   	ret    
c0019d27:	90                   	nop

c0019d28 <Vm::fpuInternalTo32(unsigned long long)>:
c0019d28:	57                   	push   edi
c0019d29:	56                   	push   esi
c0019d2a:	53                   	push   ebx
c0019d2b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d33:	89 d6                	mov    esi,edx
c0019d35:	89 d7                	mov    edi,edx
c0019d37:	89 c1                	mov    ecx,eax
c0019d39:	c1 ef 14             	shr    edi,0x14
c0019d3c:	89 d3                	mov    ebx,edx
c0019d3e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0019d44:	31 d2                	xor    edx,edx
c0019d46:	89 f8                	mov    eax,edi
c0019d48:	81 e6 00 00 00 80    	and    esi,0x80000000
c0019d4e:	bf ff 00 00 00       	mov    edi,0xff
c0019d53:	05 80 fc ff ff       	add    eax,0xfffffc80
c0019d58:	83 d2 ff             	adc    edx,0xffffffff
c0019d5b:	39 c7                	cmp    edi,eax
c0019d5d:	bf 00 00 00 00       	mov    edi,0x0
c0019d62:	19 d7                	sbb    edi,edx
c0019d64:	72 16                	jb     c0019d7c <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0019d66:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0019d6a:	c1 e0 17             	shl    eax,0x17
c0019d6d:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c0019d73:	09 f1                	or     ecx,esi
c0019d75:	09 c1                	or     ecx,eax
c0019d77:	89 cf                	mov    edi,ecx
c0019d79:	eb 05                	jmp    c0019d80 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0019d7b:	90                   	nop
c0019d7c:	31 ff                	xor    edi,edi
c0019d7e:	66 90                	xchg   ax,ax
c0019d80:	89 f8                	mov    eax,edi
c0019d82:	5b                   	pop    ebx
c0019d83:	5e                   	pop    esi
c0019d84:	5f                   	pop    edi
c0019d85:	c3                   	ret    

c0019d86 <Vm::fpuInternalTo64(unsigned long long)>:
c0019d86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019d8e:	c3                   	ret    

c0019d8f <Vm::fpu32ToInternal(unsigned int)>:
c0019d8f:	57                   	push   edi
c0019d90:	31 ff                	xor    edi,edi
c0019d92:	56                   	push   esi
c0019d93:	53                   	push   ebx
c0019d94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019d98:	89 cb                	mov    ebx,ecx
c0019d9a:	89 ce                	mov    esi,ecx
c0019d9c:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0019da2:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0019da8:	c1 e9 17             	shr    ecx,0x17
c0019dab:	89 f0                	mov    eax,esi
c0019dad:	0f b6 d1             	movzx  edx,cl
c0019db0:	81 c2 80 03 00 00    	add    edx,0x380
c0019db6:	89 d1                	mov    ecx,edx
c0019db8:	89 fa                	mov    edx,edi
c0019dba:	c1 e1 14             	shl    ecx,0x14
c0019dbd:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0019dc1:	c1 e0 1d             	shl    eax,0x1d
c0019dc4:	89 d7                	mov    edi,edx
c0019dc6:	89 c6                	mov    esi,eax
c0019dc8:	89 ca                	mov    edx,ecx
c0019dca:	89 f0                	mov    eax,esi
c0019dcc:	09 fa                	or     edx,edi
c0019dce:	09 da                	or     edx,ebx
c0019dd0:	5b                   	pop    ebx
c0019dd1:	5e                   	pop    esi
c0019dd2:	5f                   	pop    edi
c0019dd3:	c3                   	ret    

c0019dd4 <Vm::fpu64ToInternal(unsigned long long)>:
c0019dd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ddc:	c3                   	ret    

c0019ddd <Vm::fpuFloatToLong(unsigned long long)>:
c0019ddd:	57                   	push   edi
c0019dde:	31 c0                	xor    eax,eax
c0019de0:	56                   	push   esi
c0019de1:	31 d2                	xor    edx,edx
c0019de3:	53                   	push   ebx
c0019de4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019de8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019dec:	89 d9                	mov    ecx,ebx
c0019dee:	c1 e9 14             	shr    ecx,0x14
c0019df1:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0019df7:	89 cf                	mov    edi,ecx
c0019df9:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0019dff:	78 37                	js     c0019e38 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019e01:	89 d9                	mov    ecx,ebx
c0019e03:	89 f0                	mov    eax,esi
c0019e05:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019e0b:	81 c9 00 00 10 00    	or     ecx,0x100000
c0019e11:	89 ca                	mov    edx,ecx
c0019e13:	b9 34 00 00 00       	mov    ecx,0x34
c0019e18:	29 f9                	sub    ecx,edi
c0019e1a:	0f ad d0             	shrd   eax,edx,cl
c0019e1d:	d3 fa                	sar    edx,cl
c0019e1f:	f6 c1 20             	test   cl,0x20
c0019e22:	74 08                	je     c0019e2c <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0019e24:	89 d0                	mov    eax,edx
c0019e26:	c1 fa 1f             	sar    edx,0x1f
c0019e29:	8d 76 00             	lea    esi,[esi+0x0]
c0019e2c:	85 db                	test   ebx,ebx
c0019e2e:	79 08                	jns    c0019e38 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019e30:	f7 d8                	neg    eax
c0019e32:	83 d2 00             	adc    edx,0x0
c0019e35:	f7 da                	neg    edx
c0019e37:	90                   	nop
c0019e38:	5b                   	pop    ebx
c0019e39:	5e                   	pop    esi
c0019e3a:	5f                   	pop    edi
c0019e3b:	c3                   	ret    

c0019e3c <Vm::fpuULongToFloat(unsigned long long)>:
c0019e3c:	57                   	push   edi
c0019e3d:	31 c9                	xor    ecx,ecx
c0019e3f:	56                   	push   esi
c0019e40:	53                   	push   ebx
c0019e41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019e49:	8d 76 00             	lea    esi,[esi+0x0]
c0019e4c:	0f ba e7 14          	bt     edi,0x14
c0019e50:	72 0a                	jb     c0019e5c <Vm::fpuULongToFloat(unsigned long long)+0x20>
c0019e52:	01 f6                	add    esi,esi
c0019e54:	11 ff                	adc    edi,edi
c0019e56:	41                   	inc    ecx
c0019e57:	eb f3                	jmp    c0019e4c <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0019e59:	8d 76 00             	lea    esi,[esi+0x0]
c0019e5c:	89 fa                	mov    edx,edi
c0019e5e:	89 f0                	mov    eax,esi
c0019e60:	bb 33 04 00 00       	mov    ebx,0x433
c0019e65:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0019e6b:	29 cb                	sub    ebx,ecx
c0019e6d:	89 d9                	mov    ecx,ebx
c0019e6f:	5b                   	pop    ebx
c0019e70:	c1 e1 14             	shl    ecx,0x14
c0019e73:	5e                   	pop    esi
c0019e74:	09 ca                	or     edx,ecx
c0019e76:	5f                   	pop    edi
c0019e77:	c3                   	ret    

c0019e78 <Vm::fpuLongToFloat(long long)>:
c0019e78:	56                   	push   esi
c0019e79:	31 c0                	xor    eax,eax
c0019e7b:	53                   	push   ebx
c0019e7c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019e80:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e84:	39 c8                	cmp    eax,ecx
c0019e86:	19 d8                	sbb    eax,ebx
c0019e88:	7d 06                	jge    c0019e90 <Vm::fpuLongToFloat(long long)+0x18>
c0019e8a:	31 f6                	xor    esi,esi
c0019e8c:	eb 0e                	jmp    c0019e9c <Vm::fpuLongToFloat(long long)+0x24>
c0019e8e:	66 90                	xchg   ax,ax
c0019e90:	f7 d9                	neg    ecx
c0019e92:	be 01 00 00 00       	mov    esi,0x1
c0019e97:	83 d3 00             	adc    ebx,0x0
c0019e9a:	f7 db                	neg    ebx
c0019e9c:	31 c0                	xor    eax,eax
c0019e9e:	66 90                	xchg   ax,ax
c0019ea0:	0f ba e3 14          	bt     ebx,0x14
c0019ea4:	72 0a                	jb     c0019eb0 <Vm::fpuLongToFloat(long long)+0x38>
c0019ea6:	01 c9                	add    ecx,ecx
c0019ea8:	11 db                	adc    ebx,ebx
c0019eaa:	40                   	inc    eax
c0019eab:	eb f3                	jmp    c0019ea0 <Vm::fpuLongToFloat(long long)+0x28>
c0019ead:	8d 76 00             	lea    esi,[esi+0x0]
c0019eb0:	ba 33 04 00 00       	mov    edx,0x433
c0019eb5:	29 c2                	sub    edx,eax
c0019eb7:	89 c8                	mov    eax,ecx
c0019eb9:	c1 e2 14             	shl    edx,0x14
c0019ebc:	89 d9                	mov    ecx,ebx
c0019ebe:	89 f3                	mov    ebx,esi
c0019ec0:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019ec6:	09 ca                	or     edx,ecx
c0019ec8:	84 db                	test   bl,bl
c0019eca:	74 08                	je     c0019ed4 <Vm::fpuLongToFloat(long long)+0x5c>
c0019ecc:	81 ca 00 00 00 80    	or     edx,0x80000000
c0019ed2:	66 90                	xchg   ax,ax
c0019ed4:	5b                   	pop    ebx
c0019ed5:	5e                   	pop    esi
c0019ed6:	c3                   	ret    

c0019ed7 <Vm::fpuGet0()>:
c0019ed7:	31 c0                	xor    eax,eax
c0019ed9:	31 d2                	xor    edx,edx
c0019edb:	c3                   	ret    

c0019edc <Vm::fpuGet1()>:
c0019edc:	b8 01 00 00 00       	mov    eax,0x1
c0019ee1:	31 d2                	xor    edx,edx
c0019ee3:	c3                   	ret    

c0019ee4 <Vm::fpuGetPi()>:
c0019ee4:	b8 03 00 00 00       	mov    eax,0x3
c0019ee9:	31 d2                	xor    edx,edx
c0019eeb:	c3                   	ret    

c0019eec <Vm::fpuGetLog2E()>:
c0019eec:	83 ec 18             	sub    esp,0x18
c0019eef:	68 f8 62 02 c0       	push   0xc00262f8
c0019ef4:	e8 c2 aa ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0019ef9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019efe:	31 d2                	xor    edx,edx
c0019f00:	83 c4 1c             	add    esp,0x1c
c0019f03:	c3                   	ret    

c0019f04 <Vm::fpuGetLogE2()>:
c0019f04:	83 ec 18             	sub    esp,0x18
c0019f07:	68 04 63 02 c0       	push   0xc0026304
c0019f0c:	e8 aa aa ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0019f11:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019f16:	31 d2                	xor    edx,edx
c0019f18:	83 c4 1c             	add    esp,0x1c
c0019f1b:	c3                   	ret    

c0019f1c <Vm::fpuGetLog210()>:
c0019f1c:	83 ec 18             	sub    esp,0x18
c0019f1f:	68 10 63 02 c0       	push   0xc0026310
c0019f24:	e8 92 aa ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0019f29:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019f2e:	31 d2                	xor    edx,edx
c0019f30:	83 c4 1c             	add    esp,0x1c
c0019f33:	c3                   	ret    

c0019f34 <Vm::fpuGetLog102()>:
c0019f34:	83 ec 18             	sub    esp,0x18
c0019f37:	68 1d 63 02 c0       	push   0xc002631d
c0019f3c:	e8 7a aa ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0019f41:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019f46:	31 d2                	xor    edx,edx
c0019f48:	83 c4 1c             	add    esp,0x1c
c0019f4b:	c3                   	ret    

c0019f4c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0019f4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f50:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019f54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f58:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0019f5c:	0f 92 c0             	setb   al
c0019f5f:	c3                   	ret    

c0019f60 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0019f60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019f64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f68:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0019f6c:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0019f70:	09 c2                	or     edx,eax
c0019f72:	0f 94 c0             	sete   al
c0019f75:	c3                   	ret    

c0019f76 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0019f76:	57                   	push   edi
c0019f77:	56                   	push   esi
c0019f78:	53                   	push   ebx
c0019f79:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019f7d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019f81:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019f85:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019f89:	57                   	push   edi
c0019f8a:	56                   	push   esi
c0019f8b:	53                   	push   ebx
c0019f8c:	51                   	push   ecx
c0019f8d:	e8 ce ff ff ff       	call   c0019f60 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c0019f92:	83 c4 10             	add    esp,0x10
c0019f95:	88 c2                	mov    dl,al
c0019f97:	31 c0                	xor    eax,eax
c0019f99:	84 d2                	test   dl,dl
c0019f9b:	75 0f                	jne    c0019fac <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0019f9d:	57                   	push   edi
c0019f9e:	56                   	push   esi
c0019f9f:	53                   	push   ebx
c0019fa0:	51                   	push   ecx
c0019fa1:	e8 a6 ff ff ff       	call   c0019f4c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0019fa6:	83 c4 10             	add    esp,0x10
c0019fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0019fac:	83 e0 01             	and    eax,0x1
c0019faf:	5b                   	pop    ebx
c0019fb0:	88 c1                	mov    cl,al
c0019fb2:	83 e2 01             	and    edx,0x1
c0019fb5:	a0 01 96 02 c0       	mov    al,ds:0xc0029601
c0019fba:	c1 e2 06             	shl    edx,0x6
c0019fbd:	83 e0 ba             	and    eax,0xffffffba
c0019fc0:	5e                   	pop    esi
c0019fc1:	09 c8                	or     eax,ecx
c0019fc3:	5f                   	pop    edi
c0019fc4:	09 d0                	or     eax,edx
c0019fc6:	a2 01 96 02 c0       	mov    ds:0xc0029601,al
c0019fcb:	c3                   	ret    

c0019fcc <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0019fcc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fd0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019fd4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0019fd8:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0019fdc:	c3                   	ret    

c0019fdd <Vm::fpuAbs(unsigned long long)>:
c0019fdd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fe1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019fe5:	c3                   	ret    

c0019fe6 <Vm::fpuChs(unsigned long long)>:
c0019fe6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019fee:	f7 d8                	neg    eax
c0019ff0:	83 d2 00             	adc    edx,0x0
c0019ff3:	f7 da                	neg    edx
c0019ff5:	c3                   	ret    

c0019ff6 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c0019ff6:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c0019ffa:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0019fff:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001a003:	eb c7                	jmp    c0019fcc <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001a005 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001a005:	53                   	push   ebx
c001a006:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a00a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a00e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a012:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a016:	0f af ca             	imul   ecx,edx
c001a019:	0f af d8             	imul   ebx,eax
c001a01c:	f7 e2                	mul    edx
c001a01e:	01 d9                	add    ecx,ebx
c001a020:	5b                   	pop    ebx
c001a021:	01 ca                	add    edx,ecx
c001a023:	c3                   	ret    

c001a024 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001a024:	83 ec 0c             	sub    esp,0xc
c001a027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a02b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a02f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a033:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a037:	e8 48 87 00 00       	call   c0022784 <__udivdi3>
c001a03c:	83 c4 1c             	add    esp,0x1c
c001a03f:	c3                   	ret    

c001a040 <Vm::fpuSquare(unsigned long long)>:
c001a040:	50                   	push   eax
c001a041:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a045:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a049:	52                   	push   edx
c001a04a:	50                   	push   eax
c001a04b:	52                   	push   edx
c001a04c:	50                   	push   eax
c001a04d:	e8 b3 ff ff ff       	call   c001a005 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a052:	83 c4 14             	add    esp,0x14
c001a055:	c3                   	ret    

c001a056 <Vm::fpuGetReg(int)>:
c001a056:	83 ec 0c             	sub    esp,0xc
c001a059:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a05e:	76 10                	jbe    c001a070 <Vm::fpuGetReg(int)+0x1a>
c001a060:	83 ec 0c             	sub    esp,0xc
c001a063:	68 2a 63 02 c0       	push   0xc002632a
c001a068:	e8 4e a9 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c001a06d:	83 c4 10             	add    esp,0x10
c001a070:	a0 01 96 02 c0       	mov    al,ds:0xc0029601
c001a075:	b9 08 00 00 00       	mov    ecx,0x8
c001a07a:	c0 e8 03             	shr    al,0x3
c001a07d:	83 e0 07             	and    eax,0x7
c001a080:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a084:	99                   	cdq    
c001a085:	f7 f9                	idiv   ecx
c001a087:	8b 04 d5 04 96 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd69fc]
c001a08e:	8b 14 d5 08 96 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd69f8]
c001a095:	83 c4 0c             	add    esp,0xc
c001a098:	c3                   	ret    

c001a099 <Vm::fpuSetReg(int, unsigned long long)>:
c001a099:	57                   	push   edi
c001a09a:	56                   	push   esi
c001a09b:	52                   	push   edx
c001a09c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a0a0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a0a4:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a0a9:	76 11                	jbe    c001a0bc <Vm::fpuSetReg(int, unsigned long long)+0x23>
c001a0ab:	83 ec 0c             	sub    esp,0xc
c001a0ae:	68 3d 63 02 c0       	push   0xc002633d
c001a0b3:	e8 03 a9 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c001a0b8:	83 c4 10             	add    esp,0x10
c001a0bb:	90                   	nop
c001a0bc:	a0 01 96 02 c0       	mov    al,ds:0xc0029601
c001a0c1:	b9 08 00 00 00       	mov    ecx,0x8
c001a0c6:	c0 e8 03             	shr    al,0x3
c001a0c9:	83 e0 07             	and    eax,0x7
c001a0cc:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a0d0:	99                   	cdq    
c001a0d1:	f7 f9                	idiv   ecx
c001a0d3:	89 34 d5 04 96 02 c0 	mov    DWORD PTR [edx*8-0x3ffd69fc],esi
c001a0da:	89 3c d5 08 96 02 c0 	mov    DWORD PTR [edx*8-0x3ffd69f8],edi
c001a0e1:	58                   	pop    eax
c001a0e2:	5e                   	pop    esi
c001a0e3:	5f                   	pop    edi
c001a0e4:	c3                   	ret    

c001a0e5 <Vm::fpuPush(unsigned long long)>:
c001a0e5:	a0 01 96 02 c0       	mov    al,ds:0xc0029601
c001a0ea:	c0 e8 03             	shr    al,0x3
c001a0ed:	83 e0 07             	and    eax,0x7
c001a0f0:	83 c0 07             	add    eax,0x7
c001a0f3:	88 c2                	mov    dl,al
c001a0f5:	83 e0 07             	and    eax,0x7
c001a0f8:	83 e2 07             	and    edx,0x7
c001a0fb:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001a102:	8a 15 01 96 02 c0    	mov    dl,BYTE PTR ds:0xc0029601
c001a108:	83 e2 c7             	and    edx,0xffffffc7
c001a10b:	09 ca                	or     edx,ecx
c001a10d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a111:	88 15 01 96 02 c0    	mov    BYTE PTR ds:0xc0029601,dl
c001a117:	89 0c c5 08 96 02 c0 	mov    DWORD PTR [eax*8-0x3ffd69f8],ecx
c001a11e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a122:	89 14 c5 04 96 02 c0 	mov    DWORD PTR [eax*8-0x3ffd69fc],edx
c001a129:	a1 44 96 02 c0       	mov    eax,ds:0xc0029644
c001a12e:	83 f8 08             	cmp    eax,0x8
c001a131:	75 09                	jne    c001a13c <Vm::fpuPush(unsigned long long)+0x57>
c001a133:	80 0d 00 96 02 c0 40 	or     BYTE PTR ds:0xc0029600,0x40
c001a13a:	c3                   	ret    
c001a13b:	90                   	nop
c001a13c:	40                   	inc    eax
c001a13d:	a3 44 96 02 c0       	mov    ds:0xc0029644,eax
c001a142:	c3                   	ret    

c001a143 <Vm::fpuPop()>:
c001a143:	8a 0d 01 96 02 c0    	mov    cl,BYTE PTR ds:0xc0029601
c001a149:	53                   	push   ebx
c001a14a:	c0 e9 03             	shr    cl,0x3
c001a14d:	8a 1d 01 96 02 c0    	mov    bl,BYTE PTR ds:0xc0029601
c001a153:	83 e1 07             	and    ecx,0x7
c001a156:	83 e3 c7             	and    ebx,0xffffffc7
c001a159:	8b 04 cd 04 96 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd69fc]
c001a160:	8b 14 cd 08 96 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd69f8]
c001a167:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001a16e:	83 e1 38             	and    ecx,0x38
c001a171:	09 d9                	or     ecx,ebx
c001a173:	88 0d 01 96 02 c0    	mov    BYTE PTR ds:0xc0029601,cl
c001a179:	8b 0d 44 96 02 c0    	mov    ecx,DWORD PTR ds:0xc0029644
c001a17f:	85 c9                	test   ecx,ecx
c001a181:	74 09                	je     c001a18c <Vm::fpuPop()+0x49>
c001a183:	49                   	dec    ecx
c001a184:	89 0d 44 96 02 c0    	mov    DWORD PTR ds:0xc0029644,ecx
c001a18a:	eb 08                	jmp    c001a194 <Vm::fpuPop()+0x51>
c001a18c:	80 0d 00 96 02 c0 40 	or     BYTE PTR ds:0xc0029600,0x40
c001a193:	90                   	nop
c001a194:	5b                   	pop    ebx
c001a195:	c3                   	ret    

c001a196 <Vm::x87Handler(regs*)>:
c001a196:	55                   	push   ebp
c001a197:	57                   	push   edi
c001a198:	56                   	push   esi
c001a199:	53                   	push   ebx
c001a19a:	83 ec 1c             	sub    esp,0x1c
c001a19d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a1a1:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001a1a6:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001a1a9:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001a1b1:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001a1b5:	50                   	push   eax
c001a1b6:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001a1ba:	50                   	push   eax
c001a1bb:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a1bf:	50                   	push   eax
c001a1c0:	53                   	push   ebx
c001a1c1:	e8 0e 9f ff ff       	call   c00140d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001a1c6:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001a1c9:	83 c4 10             	add    esp,0x10
c001a1cc:	89 c6                	mov    esi,eax
c001a1ce:	80 fa d9             	cmp    dl,0xd9
c001a1d1:	0f 85 79 01 00 00    	jne    c001a350 <Vm::x87Handler(regs*)+0x1ba>
c001a1d7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a1db:	8d 50 20             	lea    edx,[eax+0x20]
c001a1de:	80 fa 0e             	cmp    dl,0xe
c001a1e1:	0f 87 a5 00 00 00    	ja     c001a28c <Vm::x87Handler(regs*)+0xf6>
c001a1e7:	0f b6 d2             	movzx  edx,dl
c001a1ea:	ff 24 95 50 63 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9cb0]
c001a1f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a1f4:	e8 de fc ff ff       	call   c0019ed7 <Vm::fpuGet0()>
c001a1f9:	eb 09                	jmp    c001a204 <Vm::x87Handler(regs*)+0x6e>
c001a1fb:	90                   	nop
c001a1fc:	e8 db fc ff ff       	call   c0019edc <Vm::fpuGet1()>
c001a201:	8d 76 00             	lea    esi,[esi+0x0]
c001a204:	57                   	push   edi
c001a205:	57                   	push   edi
c001a206:	66 90                	xchg   ax,ax
c001a208:	52                   	push   edx
c001a209:	50                   	push   eax
c001a20a:	e8 d6 fe ff ff       	call   c001a0e5 <Vm::fpuPush(unsigned long long)>
c001a20f:	90                   	nop
c001a210:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a214:	83 c4 10             	add    esp,0x10
c001a217:	90                   	nop
c001a218:	b0 01                	mov    al,0x1
c001a21a:	e9 89 0a 00 00       	jmp    c001aca8 <Vm::x87Handler(regs*)+0xb12>
c001a21f:	90                   	nop
c001a220:	83 ec 0c             	sub    esp,0xc
c001a223:	6a 00                	push   0x0
c001a225:	e8 2c fe ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a22a:	59                   	pop    ecx
c001a22b:	5e                   	pop    esi
c001a22c:	52                   	push   edx
c001a22d:	50                   	push   eax
c001a22e:	e8 b3 fd ff ff       	call   c0019fe6 <Vm::fpuChs(unsigned long long)>
c001a233:	eb 17                	jmp    c001a24c <Vm::x87Handler(regs*)+0xb6>
c001a235:	8d 76 00             	lea    esi,[esi+0x0]
c001a238:	83 ec 0c             	sub    esp,0xc
c001a23b:	6a 00                	push   0x0
c001a23d:	e8 14 fe ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a242:	5f                   	pop    edi
c001a243:	5d                   	pop    ebp
c001a244:	52                   	push   edx
c001a245:	50                   	push   eax
c001a246:	e8 92 fd ff ff       	call   c0019fdd <Vm::fpuAbs(unsigned long long)>
c001a24b:	90                   	nop
c001a24c:	83 c4 0c             	add    esp,0xc
c001a24f:	90                   	nop
c001a250:	52                   	push   edx
c001a251:	50                   	push   eax
c001a252:	66 90                	xchg   ax,ax
c001a254:	6a 00                	push   0x0
c001a256:	66 90                	xchg   ax,ax
c001a258:	e8 3c fe ff ff       	call   c001a099 <Vm::fpuSetReg(int, unsigned long long)>
c001a25d:	eb b1                	jmp    c001a210 <Vm::x87Handler(regs*)+0x7a>
c001a25f:	90                   	nop
c001a260:	e8 b7 fc ff ff       	call   c0019f1c <Vm::fpuGetLog210()>
c001a265:	eb 9d                	jmp    c001a204 <Vm::x87Handler(regs*)+0x6e>
c001a267:	90                   	nop
c001a268:	e8 7f fc ff ff       	call   c0019eec <Vm::fpuGetLog2E()>
c001a26d:	eb 95                	jmp    c001a204 <Vm::x87Handler(regs*)+0x6e>
c001a26f:	90                   	nop
c001a270:	e8 6f fc ff ff       	call   c0019ee4 <Vm::fpuGetPi()>
c001a275:	eb 8d                	jmp    c001a204 <Vm::x87Handler(regs*)+0x6e>
c001a277:	90                   	nop
c001a278:	e8 b7 fc ff ff       	call   c0019f34 <Vm::fpuGetLog102()>
c001a27d:	eb 85                	jmp    c001a204 <Vm::x87Handler(regs*)+0x6e>
c001a27f:	90                   	nop
c001a280:	e8 7f fc ff ff       	call   c0019f04 <Vm::fpuGetLogE2()>
c001a285:	e9 7a ff ff ff       	jmp    c001a204 <Vm::x87Handler(regs*)+0x6e>
c001a28a:	66 90                	xchg   ax,ax
c001a28c:	8d 50 40             	lea    edx,[eax+0x40]
c001a28f:	80 fa 07             	cmp    dl,0x7
c001a292:	77 18                	ja     c001a2ac <Vm::x87Handler(regs*)+0x116>
c001a294:	83 ec 0c             	sub    esp,0xc
c001a297:	2d c0 00 00 00       	sub    eax,0xc0
c001a29c:	50                   	push   eax
c001a29d:	e8 b4 fd ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a2a2:	59                   	pop    ecx
c001a2a3:	5e                   	pop    esi
c001a2a4:	e9 5f ff ff ff       	jmp    c001a208 <Vm::x87Handler(regs*)+0x72>
c001a2a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a2ac:	8d 50 38             	lea    edx,[eax+0x38]
c001a2af:	80 fa 07             	cmp    dl,0x7
c001a2b2:	77 3c                	ja     c001a2f0 <Vm::x87Handler(regs*)+0x15a>
c001a2b4:	83 ec 0c             	sub    esp,0xc
c001a2b7:	2d c8 00 00 00       	sub    eax,0xc8
c001a2bc:	50                   	push   eax
c001a2bd:	e8 94 fd ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a2c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a2c9:	89 c6                	mov    esi,eax
c001a2cb:	89 d7                	mov    edi,edx
c001a2cd:	e8 84 fd ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a2d2:	83 c4 0c             	add    esp,0xc
c001a2d5:	52                   	push   edx
c001a2d6:	50                   	push   eax
c001a2d7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a2db:	2d c8 00 00 00       	sub    eax,0xc8
c001a2e0:	50                   	push   eax
c001a2e1:	e8 b3 fd ff ff       	call   c001a099 <Vm::fpuSetReg(int, unsigned long long)>
c001a2e6:	83 c4 0c             	add    esp,0xc
c001a2e9:	57                   	push   edi
c001a2ea:	56                   	push   esi
c001a2eb:	e9 64 ff ff ff       	jmp    c001a254 <Vm::x87Handler(regs*)+0xbe>
c001a2f0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a2f4:	84 d2                	test   dl,dl
c001a2f6:	75 10                	jne    c001a308 <Vm::x87Handler(regs*)+0x172>
c001a2f8:	83 ec 0c             	sub    esp,0xc
c001a2fb:	ff 36                	push   DWORD PTR [esi]
c001a2fd:	e8 8d fa ff ff       	call   c0019d8f <Vm::fpu32ToInternal(unsigned int)>
c001a302:	e9 c9 00 00 00       	jmp    c001a3d0 <Vm::x87Handler(regs*)+0x23a>
c001a307:	90                   	nop
c001a308:	80 fa 03             	cmp    dl,0x3
c001a30b:	75 13                	jne    c001a320 <Vm::x87Handler(regs*)+0x18a>
c001a30d:	e8 31 fe ff ff       	call   c001a143 <Vm::fpuPop()>
c001a312:	55                   	push   ebp
c001a313:	55                   	push   ebp
c001a314:	52                   	push   edx
c001a315:	50                   	push   eax
c001a316:	e8 0d fa ff ff       	call   c0019d28 <Vm::fpuInternalTo32(unsigned long long)>
c001a31b:	e9 90 00 00 00       	jmp    c001a3b0 <Vm::x87Handler(regs*)+0x21a>
c001a320:	80 fa 05             	cmp    dl,0x5
c001a323:	75 0f                	jne    c001a334 <Vm::x87Handler(regs*)+0x19e>
c001a325:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a328:	66 a3 02 96 02 c0    	mov    ds:0xc0029602,ax
c001a32e:	e9 ed 00 00 00       	jmp    c001a420 <Vm::x87Handler(regs*)+0x28a>
c001a333:	90                   	nop
c001a334:	31 c0                	xor    eax,eax
c001a336:	80 fa 07             	cmp    dl,0x7
c001a339:	0f 85 69 09 00 00    	jne    c001aca8 <Vm::x87Handler(regs*)+0xb12>
c001a33f:	66 a1 02 96 02 c0    	mov    ax,ds:0xc0029602
c001a345:	66 89 06             	mov    WORD PTR [esi],ax
c001a348:	e9 d3 00 00 00       	jmp    c001a420 <Vm::x87Handler(regs*)+0x28a>
c001a34d:	8d 76 00             	lea    esi,[esi+0x0]
c001a350:	80 fa d8             	cmp    dl,0xd8
c001a353:	0f 84 d3 00 00 00    	je     c001a42c <Vm::x87Handler(regs*)+0x296>
c001a359:	80 fa dc             	cmp    dl,0xdc
c001a35c:	0f 84 2a 02 00 00    	je     c001a58c <Vm::x87Handler(regs*)+0x3f6>
c001a362:	80 fa de             	cmp    dl,0xde
c001a365:	0f 84 f1 02 00 00    	je     c001a65c <Vm::x87Handler(regs*)+0x4c6>
c001a36b:	80 fa dd             	cmp    dl,0xdd
c001a36e:	0f 84 94 04 00 00    	je     c001a808 <Vm::x87Handler(regs*)+0x672>
c001a374:	80 fa da             	cmp    dl,0xda
c001a377:	0f 84 5f 05 00 00    	je     c001a8dc <Vm::x87Handler(regs*)+0x746>
c001a37d:	80 fa df             	cmp    dl,0xdf
c001a380:	0f 84 aa 05 00 00    	je     c001a930 <Vm::x87Handler(regs*)+0x79a>
c001a386:	31 c0                	xor    eax,eax
c001a388:	80 fa db             	cmp    dl,0xdb
c001a38b:	0f 85 17 09 00 00    	jne    c001aca8 <Vm::x87Handler(regs*)+0xb12>
c001a391:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a395:	80 fa 03             	cmp    dl,0x3
c001a398:	0f 85 c2 06 00 00    	jne    c001aa60 <Vm::x87Handler(regs*)+0x8ca>
c001a39e:	e8 a0 fd ff ff       	call   c001a143 <Vm::fpuPop()>
c001a3a3:	55                   	push   ebp
c001a3a4:	55                   	push   ebp
c001a3a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a3a8:	52                   	push   edx
c001a3a9:	50                   	push   eax
c001a3aa:	e8 2e fa ff ff       	call   c0019ddd <Vm::fpuFloatToLong(unsigned long long)>
c001a3af:	90                   	nop
c001a3b0:	83 c4 10             	add    esp,0x10
c001a3b3:	89 06                	mov    DWORD PTR [esi],eax
c001a3b5:	eb 69                	jmp    c001a420 <Vm::x87Handler(regs*)+0x28a>
c001a3b7:	90                   	nop
c001a3b8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a3bc:	84 d2                	test   dl,dl
c001a3be:	0f 85 2c 06 00 00    	jne    c001a9f0 <Vm::x87Handler(regs*)+0x85a>
c001a3c4:	57                   	push   edi
c001a3c5:	57                   	push   edi
c001a3c6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a3c9:	ff 36                	push   DWORD PTR [esi]
c001a3cb:	e8 04 fa ff ff       	call   c0019dd4 <Vm::fpu64ToInternal(unsigned long long)>
c001a3d0:	5e                   	pop    esi
c001a3d1:	5f                   	pop    edi
c001a3d2:	52                   	push   edx
c001a3d3:	50                   	push   eax
c001a3d4:	e8 0c fd ff ff       	call   c001a0e5 <Vm::fpuPush(unsigned long long)>
c001a3d9:	8d 76 00             	lea    esi,[esi+0x0]
c001a3dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a3e0:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a3e3:	e9 2c fe ff ff       	jmp    c001a214 <Vm::x87Handler(regs*)+0x7e>
c001a3e8:	80 fa 03             	cmp    dl,0x3
c001a3eb:	0f 85 2b 07 00 00    	jne    c001ab1c <Vm::x87Handler(regs*)+0x986>
c001a3f1:	57                   	push   edi
c001a3f2:	57                   	push   edi
c001a3f3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a3f6:	ff 36                	push   DWORD PTR [esi]
c001a3f8:	e8 d7 f9 ff ff       	call   c0019dd4 <Vm::fpu64ToInternal(unsigned long long)>
c001a3fd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a404:	89 c6                	mov    esi,eax
c001a406:	89 d7                	mov    edi,edx
c001a408:	e8 49 fc ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a40d:	57                   	push   edi
c001a40e:	56                   	push   esi
c001a40f:	52                   	push   edx
c001a410:	50                   	push   eax
c001a411:	e8 60 fb ff ff       	call   c0019f76 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a416:	83 c4 20             	add    esp,0x20
c001a419:	e8 25 fd ff ff       	call   c001a143 <Vm::fpuPop()>
c001a41e:	66 90                	xchg   ax,ax
c001a420:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a424:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a427:	e9 ec fd ff ff       	jmp    c001a218 <Vm::x87Handler(regs*)+0x82>
c001a42c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a430:	8d 50 40             	lea    edx,[eax+0x40]
c001a433:	80 fa 07             	cmp    dl,0x7
c001a436:	77 2c                	ja     c001a464 <Vm::x87Handler(regs*)+0x2ce>
c001a438:	83 ec 0c             	sub    esp,0xc
c001a43b:	2d c0 00 00 00       	sub    eax,0xc0
c001a440:	50                   	push   eax
c001a441:	e8 10 fc ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a446:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a44d:	89 c6                	mov    esi,eax
c001a44f:	89 d7                	mov    edi,edx
c001a451:	e8 00 fc ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a456:	57                   	push   edi
c001a457:	56                   	push   esi
c001a458:	52                   	push   edx
c001a459:	50                   	push   eax
c001a45a:	e8 6d fb ff ff       	call   c0019fcc <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a45f:	eb 33                	jmp    c001a494 <Vm::x87Handler(regs*)+0x2fe>
c001a461:	8d 76 00             	lea    esi,[esi+0x0]
c001a464:	8d 50 38             	lea    edx,[eax+0x38]
c001a467:	80 fa 07             	cmp    dl,0x7
c001a46a:	77 30                	ja     c001a49c <Vm::x87Handler(regs*)+0x306>
c001a46c:	83 ec 0c             	sub    esp,0xc
c001a46f:	2d c8 00 00 00       	sub    eax,0xc8
c001a474:	50                   	push   eax
c001a475:	e8 dc fb ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a47a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a481:	89 c6                	mov    esi,eax
c001a483:	89 d7                	mov    edi,edx
c001a485:	e8 cc fb ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a48a:	57                   	push   edi
c001a48b:	56                   	push   esi
c001a48c:	52                   	push   edx
c001a48d:	50                   	push   eax
c001a48e:	e8 72 fb ff ff       	call   c001a005 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a493:	90                   	nop
c001a494:	83 c4 1c             	add    esp,0x1c
c001a497:	e9 b4 fd ff ff       	jmp    c001a250 <Vm::x87Handler(regs*)+0xba>
c001a49c:	8d 50 30             	lea    edx,[eax+0x30]
c001a49f:	80 fa 07             	cmp    dl,0x7
c001a4a2:	77 10                	ja     c001a4b4 <Vm::x87Handler(regs*)+0x31e>
c001a4a4:	83 ec 0c             	sub    esp,0xc
c001a4a7:	2d d0 00 00 00       	sub    eax,0xd0
c001a4ac:	e9 c3 03 00 00       	jmp    c001a874 <Vm::x87Handler(regs*)+0x6de>
c001a4b1:	8d 76 00             	lea    esi,[esi+0x0]
c001a4b4:	8d 50 28             	lea    edx,[eax+0x28]
c001a4b7:	80 fa 07             	cmp    dl,0x7
c001a4ba:	77 10                	ja     c001a4cc <Vm::x87Handler(regs*)+0x336>
c001a4bc:	83 ec 0c             	sub    esp,0xc
c001a4bf:	2d d8 00 00 00       	sub    eax,0xd8
c001a4c4:	e9 e7 03 00 00       	jmp    c001a8b0 <Vm::x87Handler(regs*)+0x71a>
c001a4c9:	8d 76 00             	lea    esi,[esi+0x0]
c001a4cc:	8d 50 20             	lea    edx,[eax+0x20]
c001a4cf:	80 fa 07             	cmp    dl,0x7
c001a4d2:	77 1c                	ja     c001a4f0 <Vm::x87Handler(regs*)+0x35a>
c001a4d4:	83 ec 0c             	sub    esp,0xc
c001a4d7:	2d e0 00 00 00       	sub    eax,0xe0
c001a4dc:	50                   	push   eax
c001a4dd:	e8 74 fb ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a4e2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a4e9:	89 c6                	mov    esi,eax
c001a4eb:	89 d7                	mov    edi,edx
c001a4ed:	eb 25                	jmp    c001a514 <Vm::x87Handler(regs*)+0x37e>
c001a4ef:	90                   	nop
c001a4f0:	8d 50 18             	lea    edx,[eax+0x18]
c001a4f3:	80 fa 07             	cmp    dl,0x7
c001a4f6:	77 30                	ja     c001a528 <Vm::x87Handler(regs*)+0x392>
c001a4f8:	83 ec 0c             	sub    esp,0xc
c001a4fb:	6a 00                	push   0x0
c001a4fd:	e8 54 fb ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a502:	89 c6                	mov    esi,eax
c001a504:	89 d7                	mov    edi,edx
c001a506:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a50a:	2d e8 00 00 00       	sub    eax,0xe8
c001a50f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a512:	66 90                	xchg   ax,ax
c001a514:	e8 3d fb ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a519:	57                   	push   edi
c001a51a:	56                   	push   esi
c001a51b:	52                   	push   edx
c001a51c:	50                   	push   eax
c001a51d:	e8 d4 fa ff ff       	call   c0019ff6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a522:	e9 6d ff ff ff       	jmp    c001a494 <Vm::x87Handler(regs*)+0x2fe>
c001a527:	90                   	nop
c001a528:	8d 50 10             	lea    edx,[eax+0x10]
c001a52b:	80 fa 07             	cmp    dl,0x7
c001a52e:	77 1c                	ja     c001a54c <Vm::x87Handler(regs*)+0x3b6>
c001a530:	83 ec 0c             	sub    esp,0xc
c001a533:	2d f0 00 00 00       	sub    eax,0xf0
c001a538:	50                   	push   eax
c001a539:	e8 18 fb ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a53e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a545:	89 c6                	mov    esi,eax
c001a547:	89 d7                	mov    edi,edx
c001a549:	eb 25                	jmp    c001a570 <Vm::x87Handler(regs*)+0x3da>
c001a54b:	90                   	nop
c001a54c:	3c f7                	cmp    al,0xf7
c001a54e:	0f 86 00 04 00 00    	jbe    c001a954 <Vm::x87Handler(regs*)+0x7be>
c001a554:	83 ec 0c             	sub    esp,0xc
c001a557:	6a 00                	push   0x0
c001a559:	e8 f8 fa ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a55e:	89 c6                	mov    esi,eax
c001a560:	89 d7                	mov    edi,edx
c001a562:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a566:	2d f8 00 00 00       	sub    eax,0xf8
c001a56b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a56e:	66 90                	xchg   ax,ax
c001a570:	e8 e1 fa ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a575:	57                   	push   edi
c001a576:	56                   	push   esi
c001a577:	52                   	push   edx
c001a578:	50                   	push   eax
c001a579:	e8 a6 fa ff ff       	call   c001a024 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a57e:	83 c4 1c             	add    esp,0x1c
c001a581:	52                   	push   edx
c001a582:	50                   	push   eax
c001a583:	6a 00                	push   0x0
c001a585:	e9 6a 02 00 00       	jmp    c001a7f4 <Vm::x87Handler(regs*)+0x65e>
c001a58a:	66 90                	xchg   ax,ax
c001a58c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a590:	8d 50 40             	lea    edx,[eax+0x40]
c001a593:	80 fa 07             	cmp    dl,0x7
c001a596:	77 38                	ja     c001a5d0 <Vm::x87Handler(regs*)+0x43a>
c001a598:	83 ec 0c             	sub    esp,0xc
c001a59b:	2d c0 00 00 00       	sub    eax,0xc0
c001a5a0:	50                   	push   eax
c001a5a1:	e8 b0 fa ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a5a6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a5ad:	89 c6                	mov    esi,eax
c001a5af:	89 d7                	mov    edi,edx
c001a5b1:	e8 a0 fa ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a5b6:	57                   	push   edi
c001a5b7:	56                   	push   esi
c001a5b8:	52                   	push   edx
c001a5b9:	50                   	push   eax
c001a5ba:	e8 0d fa ff ff       	call   c0019fcc <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a5bf:	83 c4 1c             	add    esp,0x1c
c001a5c2:	52                   	push   edx
c001a5c3:	50                   	push   eax
c001a5c4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a5c8:	2d c0 00 00 00       	sub    eax,0xc0
c001a5cd:	eb 41                	jmp    c001a610 <Vm::x87Handler(regs*)+0x47a>
c001a5cf:	90                   	nop
c001a5d0:	8d 50 38             	lea    edx,[eax+0x38]
c001a5d3:	80 fa 07             	cmp    dl,0x7
c001a5d6:	77 40                	ja     c001a618 <Vm::x87Handler(regs*)+0x482>
c001a5d8:	83 ec 0c             	sub    esp,0xc
c001a5db:	2d c8 00 00 00       	sub    eax,0xc8
c001a5e0:	50                   	push   eax
c001a5e1:	e8 70 fa ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a5e6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a5ed:	89 c6                	mov    esi,eax
c001a5ef:	89 d7                	mov    edi,edx
c001a5f1:	e8 60 fa ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a5f6:	57                   	push   edi
c001a5f7:	56                   	push   esi
c001a5f8:	52                   	push   edx
c001a5f9:	50                   	push   eax
c001a5fa:	e8 06 fa ff ff       	call   c001a005 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a5ff:	83 c4 1c             	add    esp,0x1c
c001a602:	52                   	push   edx
c001a603:	50                   	push   eax
c001a604:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a608:	2d c8 00 00 00       	sub    eax,0xc8
c001a60d:	8d 76 00             	lea    esi,[esi+0x0]
c001a610:	50                   	push   eax
c001a611:	e9 42 fc ff ff       	jmp    c001a258 <Vm::x87Handler(regs*)+0xc2>
c001a616:	66 90                	xchg   ax,ax
c001a618:	83 c0 18             	add    eax,0x18
c001a61b:	3c 07                	cmp    al,0x7
c001a61d:	0f 87 6d 04 00 00    	ja     c001aa90 <Vm::x87Handler(regs*)+0x8fa>
c001a623:	83 ec 0c             	sub    esp,0xc
c001a626:	6a 00                	push   0x0
c001a628:	e8 29 fa ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a62d:	89 c6                	mov    esi,eax
c001a62f:	89 d7                	mov    edi,edx
c001a631:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a635:	2d e8 00 00 00       	sub    eax,0xe8
c001a63a:	89 04 24             	mov    DWORD PTR [esp],eax
c001a63d:	e8 14 fa ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a642:	57                   	push   edi
c001a643:	56                   	push   esi
c001a644:	52                   	push   edx
c001a645:	50                   	push   eax
c001a646:	e8 ab f9 ff ff       	call   c0019ff6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a64b:	83 c4 1c             	add    esp,0x1c
c001a64e:	52                   	push   edx
c001a64f:	50                   	push   eax
c001a650:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a654:	2d e8 00 00 00       	sub    eax,0xe8
c001a659:	eb b5                	jmp    c001a610 <Vm::x87Handler(regs*)+0x47a>
c001a65b:	90                   	nop
c001a65c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a660:	8d 50 40             	lea    edx,[eax+0x40]
c001a663:	80 fa 07             	cmp    dl,0x7
c001a666:	77 3c                	ja     c001a6a4 <Vm::x87Handler(regs*)+0x50e>
c001a668:	83 ec 0c             	sub    esp,0xc
c001a66b:	2d c0 00 00 00       	sub    eax,0xc0
c001a670:	50                   	push   eax
c001a671:	e8 e0 f9 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a676:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a67d:	89 c6                	mov    esi,eax
c001a67f:	89 d7                	mov    edi,edx
c001a681:	e8 d0 f9 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a686:	57                   	push   edi
c001a687:	56                   	push   esi
c001a688:	52                   	push   edx
c001a689:	50                   	push   eax
c001a68a:	e8 3d f9 ff ff       	call   c0019fcc <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a68f:	83 c4 1c             	add    esp,0x1c
c001a692:	52                   	push   edx
c001a693:	50                   	push   eax
c001a694:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a698:	2d c0 00 00 00       	sub    eax,0xc0
c001a69d:	e9 b2 01 00 00       	jmp    c001a854 <Vm::x87Handler(regs*)+0x6be>
c001a6a2:	66 90                	xchg   ax,ax
c001a6a4:	8d 50 20             	lea    edx,[eax+0x20]
c001a6a7:	80 fa 07             	cmp    dl,0x7
c001a6aa:	77 3c                	ja     c001a6e8 <Vm::x87Handler(regs*)+0x552>
c001a6ac:	83 ec 0c             	sub    esp,0xc
c001a6af:	2d e0 00 00 00       	sub    eax,0xe0
c001a6b4:	50                   	push   eax
c001a6b5:	e8 9c f9 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a6ba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a6c1:	89 c6                	mov    esi,eax
c001a6c3:	89 d7                	mov    edi,edx
c001a6c5:	e8 8c f9 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a6ca:	57                   	push   edi
c001a6cb:	56                   	push   esi
c001a6cc:	52                   	push   edx
c001a6cd:	50                   	push   eax
c001a6ce:	e8 23 f9 ff ff       	call   c0019ff6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a6d3:	83 c4 1c             	add    esp,0x1c
c001a6d6:	52                   	push   edx
c001a6d7:	50                   	push   eax
c001a6d8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a6dc:	2d e0 00 00 00       	sub    eax,0xe0
c001a6e1:	e9 6e 01 00 00       	jmp    c001a854 <Vm::x87Handler(regs*)+0x6be>
c001a6e6:	66 90                	xchg   ax,ax
c001a6e8:	8d 50 18             	lea    edx,[eax+0x18]
c001a6eb:	80 fa 07             	cmp    dl,0x7
c001a6ee:	77 3c                	ja     c001a72c <Vm::x87Handler(regs*)+0x596>
c001a6f0:	83 ec 0c             	sub    esp,0xc
c001a6f3:	6a 00                	push   0x0
c001a6f5:	e8 5c f9 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a6fa:	89 c6                	mov    esi,eax
c001a6fc:	89 d7                	mov    edi,edx
c001a6fe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a702:	2d e8 00 00 00       	sub    eax,0xe8
c001a707:	89 04 24             	mov    DWORD PTR [esp],eax
c001a70a:	e8 47 f9 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a70f:	57                   	push   edi
c001a710:	56                   	push   esi
c001a711:	52                   	push   edx
c001a712:	50                   	push   eax
c001a713:	e8 de f8 ff ff       	call   c0019ff6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a718:	83 c4 1c             	add    esp,0x1c
c001a71b:	52                   	push   edx
c001a71c:	50                   	push   eax
c001a71d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a721:	2d e8 00 00 00       	sub    eax,0xe8
c001a726:	e9 29 01 00 00       	jmp    c001a854 <Vm::x87Handler(regs*)+0x6be>
c001a72b:	90                   	nop
c001a72c:	8d 50 38             	lea    edx,[eax+0x38]
c001a72f:	80 fa 07             	cmp    dl,0x7
c001a732:	77 3c                	ja     c001a770 <Vm::x87Handler(regs*)+0x5da>
c001a734:	83 ec 0c             	sub    esp,0xc
c001a737:	2d c8 00 00 00       	sub    eax,0xc8
c001a73c:	50                   	push   eax
c001a73d:	e8 14 f9 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a742:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a749:	89 c6                	mov    esi,eax
c001a74b:	89 d7                	mov    edi,edx
c001a74d:	e8 04 f9 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a752:	57                   	push   edi
c001a753:	56                   	push   esi
c001a754:	52                   	push   edx
c001a755:	50                   	push   eax
c001a756:	e8 aa f8 ff ff       	call   c001a005 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a75b:	83 c4 1c             	add    esp,0x1c
c001a75e:	52                   	push   edx
c001a75f:	50                   	push   eax
c001a760:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a764:	2d c8 00 00 00       	sub    eax,0xc8
c001a769:	e9 82 00 00 00       	jmp    c001a7f0 <Vm::x87Handler(regs*)+0x65a>
c001a76e:	66 90                	xchg   ax,ax
c001a770:	3c f7                	cmp    al,0xf7
c001a772:	76 38                	jbe    c001a7ac <Vm::x87Handler(regs*)+0x616>
c001a774:	83 ec 0c             	sub    esp,0xc
c001a777:	6a 00                	push   0x0
c001a779:	e8 d8 f8 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a77e:	89 c6                	mov    esi,eax
c001a780:	89 d7                	mov    edi,edx
c001a782:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a786:	2d f8 00 00 00       	sub    eax,0xf8
c001a78b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a78e:	e8 c3 f8 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a793:	57                   	push   edi
c001a794:	56                   	push   esi
c001a795:	52                   	push   edx
c001a796:	50                   	push   eax
c001a797:	e8 88 f8 ff ff       	call   c001a024 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a79c:	83 c4 1c             	add    esp,0x1c
c001a79f:	52                   	push   edx
c001a7a0:	50                   	push   eax
c001a7a1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a7a5:	2d f8 00 00 00       	sub    eax,0xf8
c001a7aa:	eb 44                	jmp    c001a7f0 <Vm::x87Handler(regs*)+0x65a>
c001a7ac:	8d 50 10             	lea    edx,[eax+0x10]
c001a7af:	80 fa 07             	cmp    dl,0x7
c001a7b2:	0f 87 6c 01 00 00    	ja     c001a924 <Vm::x87Handler(regs*)+0x78e>
c001a7b8:	83 ec 0c             	sub    esp,0xc
c001a7bb:	2d f0 00 00 00       	sub    eax,0xf0
c001a7c0:	50                   	push   eax
c001a7c1:	e8 90 f8 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a7c6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a7cd:	89 c6                	mov    esi,eax
c001a7cf:	89 d7                	mov    edi,edx
c001a7d1:	e8 80 f8 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a7d6:	57                   	push   edi
c001a7d7:	56                   	push   esi
c001a7d8:	52                   	push   edx
c001a7d9:	50                   	push   eax
c001a7da:	e8 45 f8 ff ff       	call   c001a024 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a7df:	83 c4 1c             	add    esp,0x1c
c001a7e2:	52                   	push   edx
c001a7e3:	50                   	push   eax
c001a7e4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a7e8:	2d f0 00 00 00       	sub    eax,0xf0
c001a7ed:	8d 76 00             	lea    esi,[esi+0x0]
c001a7f0:	50                   	push   eax
c001a7f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a7f4:	e8 a0 f8 ff ff       	call   c001a099 <Vm::fpuSetReg(int, unsigned long long)>
c001a7f9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a7fd:	e8 41 f9 ff ff       	call   c001a143 <Vm::fpuPop()>
c001a802:	e9 0d fa ff ff       	jmp    c001a214 <Vm::x87Handler(regs*)+0x7e>
c001a807:	90                   	nop
c001a808:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a80c:	8d 50 30             	lea    edx,[eax+0x30]
c001a80f:	80 fa 07             	cmp    dl,0x7
c001a812:	77 20                	ja     c001a834 <Vm::x87Handler(regs*)+0x69e>
c001a814:	83 ec 0c             	sub    esp,0xc
c001a817:	6a 00                	push   0x0
c001a819:	e8 38 f8 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a81e:	83 c4 0c             	add    esp,0xc
c001a821:	52                   	push   edx
c001a822:	50                   	push   eax
c001a823:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a827:	2d d0 00 00 00       	sub    eax,0xd0
c001a82c:	e9 df fd ff ff       	jmp    c001a610 <Vm::x87Handler(regs*)+0x47a>
c001a831:	8d 76 00             	lea    esi,[esi+0x0]
c001a834:	8d 50 28             	lea    edx,[eax+0x28]
c001a837:	80 fa 07             	cmp    dl,0x7
c001a83a:	77 28                	ja     c001a864 <Vm::x87Handler(regs*)+0x6ce>
c001a83c:	83 ec 0c             	sub    esp,0xc
c001a83f:	6a 00                	push   0x0
c001a841:	e8 10 f8 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a846:	83 c4 0c             	add    esp,0xc
c001a849:	52                   	push   edx
c001a84a:	50                   	push   eax
c001a84b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a84f:	2d d8 00 00 00       	sub    eax,0xd8
c001a854:	50                   	push   eax
c001a855:	e8 3f f8 ff ff       	call   c001a099 <Vm::fpuSetReg(int, unsigned long long)>
c001a85a:	e8 e4 f8 ff ff       	call   c001a143 <Vm::fpuPop()>
c001a85f:	e9 ac f9 ff ff       	jmp    c001a210 <Vm::x87Handler(regs*)+0x7a>
c001a864:	8d 50 20             	lea    edx,[eax+0x20]
c001a867:	80 fa 07             	cmp    dl,0x7
c001a86a:	77 30                	ja     c001a89c <Vm::x87Handler(regs*)+0x706>
c001a86c:	83 ec 0c             	sub    esp,0xc
c001a86f:	2d e0 00 00 00       	sub    eax,0xe0
c001a874:	50                   	push   eax
c001a875:	e8 dc f7 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a87a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a881:	89 c6                	mov    esi,eax
c001a883:	89 d7                	mov    edi,edx
c001a885:	e8 cc f7 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a88a:	57                   	push   edi
c001a88b:	56                   	push   esi
c001a88c:	52                   	push   edx
c001a88d:	50                   	push   eax
c001a88e:	e8 e3 f6 ff ff       	call   c0019f76 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a893:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a897:	e9 78 02 00 00       	jmp    c001ab14 <Vm::x87Handler(regs*)+0x97e>
c001a89c:	8d 50 18             	lea    edx,[eax+0x18]
c001a89f:	80 fa 07             	cmp    dl,0x7
c001a8a2:	0f 87 10 fb ff ff    	ja     c001a3b8 <Vm::x87Handler(regs*)+0x222>
c001a8a8:	83 ec 0c             	sub    esp,0xc
c001a8ab:	2d e8 00 00 00       	sub    eax,0xe8
c001a8b0:	50                   	push   eax
c001a8b1:	e8 a0 f7 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a8b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a8bd:	89 c6                	mov    esi,eax
c001a8bf:	89 d7                	mov    edi,edx
c001a8c1:	e8 90 f7 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a8c6:	57                   	push   edi
c001a8c7:	56                   	push   esi
c001a8c8:	52                   	push   edx
c001a8c9:	50                   	push   eax
c001a8ca:	e8 a7 f6 ff ff       	call   c0019f76 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a8cf:	83 c4 20             	add    esp,0x20
c001a8d2:	e8 6c f8 ff ff       	call   c001a143 <Vm::fpuPop()>
c001a8d7:	eb 6f                	jmp    c001a948 <Vm::x87Handler(regs*)+0x7b2>
c001a8d9:	8d 76 00             	lea    esi,[esi+0x0]
c001a8dc:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a8e0:	0f 85 22 01 00 00    	jne    c001aa08 <Vm::x87Handler(regs*)+0x872>
c001a8e6:	66 90                	xchg   ax,ax
c001a8e8:	83 ec 0c             	sub    esp,0xc
c001a8eb:	6a 01                	push   0x1
c001a8ed:	e8 64 f7 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a8f2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a8f9:	89 c6                	mov    esi,eax
c001a8fb:	89 d7                	mov    edi,edx
c001a8fd:	e8 54 f7 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a902:	57                   	push   edi
c001a903:	56                   	push   esi
c001a904:	52                   	push   edx
c001a905:	50                   	push   eax
c001a906:	e8 6b f6 ff ff       	call   c0019f76 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a90b:	83 c4 20             	add    esp,0x20
c001a90e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a912:	e8 2c f8 ff ff       	call   c001a143 <Vm::fpuPop()>
c001a917:	e8 27 f8 ff ff       	call   c001a143 <Vm::fpuPop()>
c001a91c:	e9 f7 f8 ff ff       	jmp    c001a218 <Vm::x87Handler(regs*)+0x82>
c001a921:	8d 76 00             	lea    esi,[esi+0x0]
c001a924:	3c d9                	cmp    al,0xd9
c001a926:	0f 85 e8 02 00 00    	jne    c001ac14 <Vm::x87Handler(regs*)+0xa7e>
c001a92c:	eb ba                	jmp    c001a8e8 <Vm::x87Handler(regs*)+0x752>
c001a92e:	66 90                	xchg   ax,ax
c001a930:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a934:	0f 85 2a 03 00 00    	jne    c001ac64 <Vm::x87Handler(regs*)+0xace>
c001a93a:	0f b7 05 00 96 02 c0 	movzx  eax,WORD PTR ds:0xc0029600
c001a941:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a945:	8d 76 00             	lea    esi,[esi+0x0]
c001a948:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a94c:	e9 c7 f8 ff ff       	jmp    c001a218 <Vm::x87Handler(regs*)+0x82>
c001a951:	8d 76 00             	lea    esi,[esi+0x0]
c001a954:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a958:	84 d2                	test   dl,dl
c001a95a:	75 10                	jne    c001a96c <Vm::x87Handler(regs*)+0x7d6>
c001a95c:	83 ec 0c             	sub    esp,0xc
c001a95f:	ff 36                	push   DWORD PTR [esi]
c001a961:	e8 29 f4 ff ff       	call   c0019d8f <Vm::fpu32ToInternal(unsigned int)>
c001a966:	e9 39 01 00 00       	jmp    c001aaa4 <Vm::x87Handler(regs*)+0x90e>
c001a96b:	90                   	nop
c001a96c:	80 fa 01             	cmp    dl,0x1
c001a96f:	75 0f                	jne    c001a980 <Vm::x87Handler(regs*)+0x7ea>
c001a971:	83 ec 0c             	sub    esp,0xc
c001a974:	ff 36                	push   DWORD PTR [esi]
c001a976:	e8 14 f4 ff ff       	call   c0019d8f <Vm::fpu32ToInternal(unsigned int)>
c001a97b:	e9 b4 02 00 00       	jmp    c001ac34 <Vm::x87Handler(regs*)+0xa9e>
c001a980:	80 fa 04             	cmp    dl,0x4
c001a983:	75 0f                	jne    c001a994 <Vm::x87Handler(regs*)+0x7fe>
c001a985:	83 ec 0c             	sub    esp,0xc
c001a988:	ff 36                	push   DWORD PTR [esi]
c001a98a:	e8 00 f4 ff ff       	call   c0019d8f <Vm::fpu32ToInternal(unsigned int)>
c001a98f:	e9 9c 01 00 00       	jmp    c001ab30 <Vm::x87Handler(regs*)+0x99a>
c001a994:	80 fa 05             	cmp    dl,0x5
c001a997:	75 1b                	jne    c001a9b4 <Vm::x87Handler(regs*)+0x81e>
c001a999:	83 ec 0c             	sub    esp,0xc
c001a99c:	6a 00                	push   0x0
c001a99e:	e8 b3 f6 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a9a3:	89 c7                	mov    edi,eax
c001a9a5:	89 d5                	mov    ebp,edx
c001a9a7:	58                   	pop    eax
c001a9a8:	ff 36                	push   DWORD PTR [esi]
c001a9aa:	e8 e0 f3 ff ff       	call   c0019d8f <Vm::fpu32ToInternal(unsigned int)>
c001a9af:	e9 bc 01 00 00       	jmp    c001ab70 <Vm::x87Handler(regs*)+0x9da>
c001a9b4:	80 fa 06             	cmp    dl,0x6
c001a9b7:	75 0f                	jne    c001a9c8 <Vm::x87Handler(regs*)+0x832>
c001a9b9:	83 ec 0c             	sub    esp,0xc
c001a9bc:	ff 36                	push   DWORD PTR [esi]
c001a9be:	e8 cc f3 ff ff       	call   c0019d8f <Vm::fpu32ToInternal(unsigned int)>
c001a9c3:	e9 cc 01 00 00       	jmp    c001ab94 <Vm::x87Handler(regs*)+0x9fe>
c001a9c8:	31 c0                	xor    eax,eax
c001a9ca:	80 fa 07             	cmp    dl,0x7
c001a9cd:	0f 85 d5 02 00 00    	jne    c001aca8 <Vm::x87Handler(regs*)+0xb12>
c001a9d3:	83 ec 0c             	sub    esp,0xc
c001a9d6:	6a 00                	push   0x0
c001a9d8:	e8 79 f6 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001a9dd:	89 c7                	mov    edi,eax
c001a9df:	89 d5                	mov    ebp,edx
c001a9e1:	58                   	pop    eax
c001a9e2:	ff 36                	push   DWORD PTR [esi]
c001a9e4:	e8 a6 f3 ff ff       	call   c0019d8f <Vm::fpu32ToInternal(unsigned int)>
c001a9e9:	e9 ee 01 00 00       	jmp    c001abdc <Vm::x87Handler(regs*)+0xa46>
c001a9ee:	66 90                	xchg   ax,ax
c001a9f0:	80 fa 03             	cmp    dl,0x3
c001a9f3:	0f 85 f7 01 00 00    	jne    c001abf0 <Vm::x87Handler(regs*)+0xa5a>
c001a9f9:	e8 45 f7 ff ff       	call   c001a143 <Vm::fpuPop()>
c001a9fe:	51                   	push   ecx
c001a9ff:	51                   	push   ecx
c001aa00:	e9 03 02 00 00       	jmp    c001ac08 <Vm::x87Handler(regs*)+0xa72>
c001aa05:	8d 76 00             	lea    esi,[esi+0x0]
c001aa08:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001aa0c:	80 fa 01             	cmp    dl,0x1
c001aa0f:	75 0b                	jne    c001aa1c <Vm::x87Handler(regs*)+0x886>
c001aa11:	57                   	push   edi
c001aa12:	57                   	push   edi
c001aa13:	8b 06                	mov    eax,DWORD PTR [esi]
c001aa15:	e9 0e 02 00 00       	jmp    c001ac28 <Vm::x87Handler(regs*)+0xa92>
c001aa1a:	66 90                	xchg   ax,ax
c001aa1c:	80 fa 04             	cmp    dl,0x4
c001aa1f:	75 13                	jne    c001aa34 <Vm::x87Handler(regs*)+0x89e>
c001aa21:	31 d2                	xor    edx,edx
c001aa23:	51                   	push   ecx
c001aa24:	51                   	push   ecx
c001aa25:	8b 06                	mov    eax,DWORD PTR [esi]
c001aa27:	52                   	push   edx
c001aa28:	50                   	push   eax
c001aa29:	e8 4a f4 ff ff       	call   c0019e78 <Vm::fpuLongToFloat(long long)>
c001aa2e:	e9 fd 00 00 00       	jmp    c001ab30 <Vm::x87Handler(regs*)+0x99a>
c001aa33:	90                   	nop
c001aa34:	31 c0                	xor    eax,eax
c001aa36:	80 fa 07             	cmp    dl,0x7
c001aa39:	0f 85 69 02 00 00    	jne    c001aca8 <Vm::x87Handler(regs*)+0xb12>
c001aa3f:	83 ec 0c             	sub    esp,0xc
c001aa42:	6a 00                	push   0x0
c001aa44:	e8 0d f6 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001aa49:	89 c7                	mov    edi,eax
c001aa4b:	89 d5                	mov    ebp,edx
c001aa4d:	58                   	pop    eax
c001aa4e:	8b 06                	mov    eax,DWORD PTR [esi]
c001aa50:	5a                   	pop    edx
c001aa51:	31 d2                	xor    edx,edx
c001aa53:	52                   	push   edx
c001aa54:	50                   	push   eax
c001aa55:	e8 1e f4 ff ff       	call   c0019e78 <Vm::fpuLongToFloat(long long)>
c001aa5a:	e9 7d 01 00 00       	jmp    c001abdc <Vm::x87Handler(regs*)+0xa46>
c001aa5f:	90                   	nop
c001aa60:	84 d2                	test   dl,dl
c001aa62:	75 10                	jne    c001aa74 <Vm::x87Handler(regs*)+0x8de>
c001aa64:	31 d2                	xor    edx,edx
c001aa66:	55                   	push   ebp
c001aa67:	55                   	push   ebp
c001aa68:	8b 06                	mov    eax,DWORD PTR [esi]
c001aa6a:	52                   	push   edx
c001aa6b:	50                   	push   eax
c001aa6c:	e9 03 02 00 00       	jmp    c001ac74 <Vm::x87Handler(regs*)+0xade>
c001aa71:	8d 76 00             	lea    esi,[esi+0x0]
c001aa74:	31 c0                	xor    eax,eax
c001aa76:	80 fa 02             	cmp    dl,0x2
c001aa79:	0f 85 29 02 00 00    	jne    c001aca8 <Vm::x87Handler(regs*)+0xb12>
c001aa7f:	83 ec 0c             	sub    esp,0xc
c001aa82:	6a 00                	push   0x0
c001aa84:	e8 cd f5 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001aa89:	59                   	pop    ecx
c001aa8a:	5f                   	pop    edi
c001aa8b:	e9 18 f9 ff ff       	jmp    c001a3a8 <Vm::x87Handler(regs*)+0x212>
c001aa90:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001aa94:	84 d2                	test   dl,dl
c001aa96:	75 2c                	jne    c001aac4 <Vm::x87Handler(regs*)+0x92e>
c001aa98:	50                   	push   eax
c001aa99:	50                   	push   eax
c001aa9a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aa9d:	ff 36                	push   DWORD PTR [esi]
c001aa9f:	e8 30 f3 ff ff       	call   c0019dd4 <Vm::fpu64ToInternal(unsigned long long)>
c001aaa4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aaab:	89 c6                	mov    esi,eax
c001aaad:	89 d7                	mov    edi,edx
c001aaaf:	e8 a2 f5 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001aab4:	57                   	push   edi
c001aab5:	56                   	push   esi
c001aab6:	52                   	push   edx
c001aab7:	50                   	push   eax
c001aab8:	e8 0f f5 ff ff       	call   c0019fcc <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001aabd:	e9 8e 01 00 00       	jmp    c001ac50 <Vm::x87Handler(regs*)+0xaba>
c001aac2:	66 90                	xchg   ax,ax
c001aac4:	80 fa 01             	cmp    dl,0x1
c001aac7:	75 13                	jne    c001aadc <Vm::x87Handler(regs*)+0x946>
c001aac9:	50                   	push   eax
c001aaca:	50                   	push   eax
c001aacb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aace:	ff 36                	push   DWORD PTR [esi]
c001aad0:	e8 ff f2 ff ff       	call   c0019dd4 <Vm::fpu64ToInternal(unsigned long long)>
c001aad5:	e9 5a 01 00 00       	jmp    c001ac34 <Vm::x87Handler(regs*)+0xa9e>
c001aada:	66 90                	xchg   ax,ax
c001aadc:	80 fa 02             	cmp    dl,0x2
c001aadf:	0f 85 03 f9 ff ff    	jne    c001a3e8 <Vm::x87Handler(regs*)+0x252>
c001aae5:	55                   	push   ebp
c001aae6:	55                   	push   ebp
c001aae7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aaea:	ff 36                	push   DWORD PTR [esi]
c001aaec:	e8 e3 f2 ff ff       	call   c0019dd4 <Vm::fpu64ToInternal(unsigned long long)>
c001aaf1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aaf8:	89 c6                	mov    esi,eax
c001aafa:	89 d7                	mov    edi,edx
c001aafc:	e8 55 f5 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001ab01:	57                   	push   edi
c001ab02:	56                   	push   esi
c001ab03:	52                   	push   edx
c001ab04:	50                   	push   eax
c001ab05:	e8 6c f4 ff ff       	call   c0019f76 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ab0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ab0e:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ab11:	8d 76 00             	lea    esi,[esi+0x0]
c001ab14:	83 c4 20             	add    esp,0x20
c001ab17:	e9 fc f6 ff ff       	jmp    c001a218 <Vm::x87Handler(regs*)+0x82>
c001ab1c:	80 fa 04             	cmp    dl,0x4
c001ab1f:	75 2f                	jne    c001ab50 <Vm::x87Handler(regs*)+0x9ba>
c001ab21:	51                   	push   ecx
c001ab22:	51                   	push   ecx
c001ab23:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ab26:	ff 36                	push   DWORD PTR [esi]
c001ab28:	e8 a7 f2 ff ff       	call   c0019dd4 <Vm::fpu64ToInternal(unsigned long long)>
c001ab2d:	8d 76 00             	lea    esi,[esi+0x0]
c001ab30:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ab37:	89 c6                	mov    esi,eax
c001ab39:	89 d7                	mov    edi,edx
c001ab3b:	e8 16 f5 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001ab40:	57                   	push   edi
c001ab41:	56                   	push   esi
c001ab42:	52                   	push   edx
c001ab43:	50                   	push   eax
c001ab44:	e8 ad f4 ff ff       	call   c0019ff6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ab49:	e9 02 01 00 00       	jmp    c001ac50 <Vm::x87Handler(regs*)+0xaba>
c001ab4e:	66 90                	xchg   ax,ax
c001ab50:	80 fa 05             	cmp    dl,0x5
c001ab53:	75 2b                	jne    c001ab80 <Vm::x87Handler(regs*)+0x9ea>
c001ab55:	83 ec 0c             	sub    esp,0xc
c001ab58:	6a 00                	push   0x0
c001ab5a:	e8 f7 f4 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001ab5f:	89 c7                	mov    edi,eax
c001ab61:	89 d5                	mov    ebp,edx
c001ab63:	58                   	pop    eax
c001ab64:	5a                   	pop    edx
c001ab65:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ab68:	ff 36                	push   DWORD PTR [esi]
c001ab6a:	e8 65 f2 ff ff       	call   c0019dd4 <Vm::fpu64ToInternal(unsigned long long)>
c001ab6f:	90                   	nop
c001ab70:	83 c4 10             	add    esp,0x10
c001ab73:	55                   	push   ebp
c001ab74:	57                   	push   edi
c001ab75:	52                   	push   edx
c001ab76:	50                   	push   eax
c001ab77:	e8 7a f4 ff ff       	call   c0019ff6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ab7c:	eb 6a                	jmp    c001abe8 <Vm::x87Handler(regs*)+0xa52>
c001ab7e:	66 90                	xchg   ax,ax
c001ab80:	80 fa 06             	cmp    dl,0x6
c001ab83:	75 2f                	jne    c001abb4 <Vm::x87Handler(regs*)+0xa1e>
c001ab85:	51                   	push   ecx
c001ab86:	51                   	push   ecx
c001ab87:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ab8a:	ff 36                	push   DWORD PTR [esi]
c001ab8c:	e8 43 f2 ff ff       	call   c0019dd4 <Vm::fpu64ToInternal(unsigned long long)>
c001ab91:	8d 76 00             	lea    esi,[esi+0x0]
c001ab94:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ab9b:	89 c6                	mov    esi,eax
c001ab9d:	89 d7                	mov    edi,edx
c001ab9f:	e8 b2 f4 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001aba4:	57                   	push   edi
c001aba5:	56                   	push   esi
c001aba6:	52                   	push   edx
c001aba7:	50                   	push   eax
c001aba8:	e8 77 f4 ff ff       	call   c001a024 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001abad:	e9 9e 00 00 00       	jmp    c001ac50 <Vm::x87Handler(regs*)+0xaba>
c001abb2:	66 90                	xchg   ax,ax
c001abb4:	31 c0                	xor    eax,eax
c001abb6:	80 fa 07             	cmp    dl,0x7
c001abb9:	0f 85 e9 00 00 00    	jne    c001aca8 <Vm::x87Handler(regs*)+0xb12>
c001abbf:	83 ec 0c             	sub    esp,0xc
c001abc2:	6a 00                	push   0x0
c001abc4:	e8 8d f4 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001abc9:	89 c7                	mov    edi,eax
c001abcb:	89 d5                	mov    ebp,edx
c001abcd:	58                   	pop    eax
c001abce:	5a                   	pop    edx
c001abcf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001abd2:	ff 36                	push   DWORD PTR [esi]
c001abd4:	e8 fb f1 ff ff       	call   c0019dd4 <Vm::fpu64ToInternal(unsigned long long)>
c001abd9:	8d 76 00             	lea    esi,[esi+0x0]
c001abdc:	83 c4 10             	add    esp,0x10
c001abdf:	55                   	push   ebp
c001abe0:	57                   	push   edi
c001abe1:	52                   	push   edx
c001abe2:	50                   	push   eax
c001abe3:	e8 3c f4 ff ff       	call   c001a024 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001abe8:	83 c4 0c             	add    esp,0xc
c001abeb:	eb 67                	jmp    c001ac54 <Vm::x87Handler(regs*)+0xabe>
c001abed:	8d 76 00             	lea    esi,[esi+0x0]
c001abf0:	31 c0                	xor    eax,eax
c001abf2:	80 fa 02             	cmp    dl,0x2
c001abf5:	0f 85 ad 00 00 00    	jne    c001aca8 <Vm::x87Handler(regs*)+0xb12>
c001abfb:	83 ec 0c             	sub    esp,0xc
c001abfe:	6a 00                	push   0x0
c001ac00:	e8 51 f4 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001ac05:	59                   	pop    ecx
c001ac06:	5f                   	pop    edi
c001ac07:	90                   	nop
c001ac08:	52                   	push   edx
c001ac09:	50                   	push   eax
c001ac0a:	e8 77 f1 ff ff       	call   c0019d86 <Vm::fpuInternalTo64(unsigned long long)>
c001ac0f:	e9 84 00 00 00       	jmp    c001ac98 <Vm::x87Handler(regs*)+0xb02>
c001ac14:	31 c0                	xor    eax,eax
c001ac16:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001ac1b:	0f 85 87 00 00 00    	jne    c001aca8 <Vm::x87Handler(regs*)+0xb12>
c001ac21:	50                   	push   eax
c001ac22:	50                   	push   eax
c001ac23:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001ac26:	66 90                	xchg   ax,ax
c001ac28:	31 d2                	xor    edx,edx
c001ac2a:	52                   	push   edx
c001ac2b:	50                   	push   eax
c001ac2c:	e8 47 f2 ff ff       	call   c0019e78 <Vm::fpuLongToFloat(long long)>
c001ac31:	8d 76 00             	lea    esi,[esi+0x0]
c001ac34:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ac3b:	89 c6                	mov    esi,eax
c001ac3d:	89 d7                	mov    edi,edx
c001ac3f:	e8 12 f4 ff ff       	call   c001a056 <Vm::fpuGetReg(int)>
c001ac44:	57                   	push   edi
c001ac45:	56                   	push   esi
c001ac46:	52                   	push   edx
c001ac47:	50                   	push   eax
c001ac48:	e8 b8 f3 ff ff       	call   c001a005 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ac4d:	8d 76 00             	lea    esi,[esi+0x0]
c001ac50:	83 c4 1c             	add    esp,0x1c
c001ac53:	90                   	nop
c001ac54:	52                   	push   edx
c001ac55:	50                   	push   eax
c001ac56:	6a 00                	push   0x0
c001ac58:	e8 3c f4 ff ff       	call   c001a099 <Vm::fpuSetReg(int, unsigned long long)>
c001ac5d:	e9 7a f7 ff ff       	jmp    c001a3dc <Vm::x87Handler(regs*)+0x246>
c001ac62:	66 90                	xchg   ax,ax
c001ac64:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ac68:	80 fa 05             	cmp    dl,0x5
c001ac6b:	75 13                	jne    c001ac80 <Vm::x87Handler(regs*)+0xaea>
c001ac6d:	55                   	push   ebp
c001ac6e:	55                   	push   ebp
c001ac6f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ac72:	ff 36                	push   DWORD PTR [esi]
c001ac74:	e8 c3 f1 ff ff       	call   c0019e3c <Vm::fpuULongToFloat(unsigned long long)>
c001ac79:	e9 52 f7 ff ff       	jmp    c001a3d0 <Vm::x87Handler(regs*)+0x23a>
c001ac7e:	66 90                	xchg   ax,ax
c001ac80:	31 c0                	xor    eax,eax
c001ac82:	80 fa 07             	cmp    dl,0x7
c001ac85:	75 21                	jne    c001aca8 <Vm::x87Handler(regs*)+0xb12>
c001ac87:	e8 b7 f4 ff ff       	call   c001a143 <Vm::fpuPop()>
c001ac8c:	51                   	push   ecx
c001ac8d:	51                   	push   ecx
c001ac8e:	52                   	push   edx
c001ac8f:	50                   	push   eax
c001ac90:	e8 48 f1 ff ff       	call   c0019ddd <Vm::fpuFloatToLong(unsigned long long)>
c001ac95:	8d 76 00             	lea    esi,[esi+0x0]
c001ac98:	83 c4 10             	add    esp,0x10
c001ac9b:	89 06                	mov    DWORD PTR [esi],eax
c001ac9d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001aca0:	e9 7b f7 ff ff       	jmp    c001a420 <Vm::x87Handler(regs*)+0x28a>
c001aca5:	8d 76 00             	lea    esi,[esi+0x0]
c001aca8:	83 c4 1c             	add    esp,0x1c
c001acab:	5b                   	pop    ebx
c001acac:	5e                   	pop    esi
c001acad:	5f                   	pop    edi
c001acae:	5d                   	pop    ebp
c001acaf:	c3                   	ret    

c001acb0 <__static_initialization_and_destruction_0(int, int)>:
c001acb0:	83 ec 0c             	sub    esp,0xc
c001acb3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001acb8:	75 1a                	jne    c001acd4 <__static_initialization_and_destruction_0(int, int)+0x24>
c001acba:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001acc2:	75 10                	jne    c001acd4 <__static_initialization_and_destruction_0(int, int)+0x24>
c001acc4:	83 ec 0c             	sub    esp,0xc
c001acc7:	68 00 96 02 c0       	push   0xc0029600
c001accc:	e8 57 84 00 00       	call   c0023128 <Vm::_FPUState::_FPUState()>
c001acd1:	83 c4 10             	add    esp,0x10
c001acd4:	90                   	nop
c001acd5:	83 c4 0c             	add    esp,0xc
c001acd8:	c3                   	ret    
c001acd9:	8d 76 00             	lea    esi,[esi+0x0]

c001acdc <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001acdc:	83 ec 0c             	sub    esp,0xc
c001acdf:	83 ec 08             	sub    esp,0x8
c001ace2:	68 ff ff 00 00       	push   0xffff
c001ace7:	6a 01                	push   0x1
c001ace9:	e8 c2 ff ff ff       	call   c001acb0 <__static_initialization_and_destruction_0(int, int)>
c001acee:	83 c4 10             	add    esp,0x10
c001acf1:	83 c4 0c             	add    esp,0xc
c001acf4:	c3                   	ret    
c001acf5:	66 90                	xchg   ax,ax
c001acf7:	90                   	nop

c001acf8 <FAT::getName()>:
c001acf8:	b8 8c 63 02 c0       	mov    eax,0xc002638c
c001acfd:	c3                   	ret    
c001acfe:	66 90                	xchg   ax,ax

c001ad00 <FAT::tell(void*, unsigned long long*)>:
c001ad00:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ad05:	75 09                	jne    c001ad10 <FAT::tell(void*, unsigned long long*)+0x10>
c001ad07:	b8 04 00 00 00       	mov    eax,0x4
c001ad0c:	c3                   	ret    
c001ad0d:	8d 76 00             	lea    esi,[esi+0x0]
c001ad10:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ad15:	75 09                	jne    c001ad20 <FAT::tell(void*, unsigned long long*)+0x20>
c001ad17:	b8 04 00 00 00       	mov    eax,0x4
c001ad1c:	c3                   	ret    
c001ad1d:	8d 76 00             	lea    esi,[esi+0x0]
c001ad20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad24:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001ad27:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001ad2a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ad2e:	89 01                	mov    DWORD PTR [ecx],eax
c001ad30:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ad33:	b8 00 00 00 00       	mov    eax,0x0
c001ad38:	c3                   	ret    
c001ad39:	90                   	nop
c001ad3a:	66 90                	xchg   ax,ax

c001ad3c <FAT::stat(void*, unsigned long long*)>:
c001ad3c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ad41:	75 09                	jne    c001ad4c <FAT::stat(void*, unsigned long long*)+0x10>
c001ad43:	b8 04 00 00 00       	mov    eax,0x4
c001ad48:	c3                   	ret    
c001ad49:	8d 76 00             	lea    esi,[esi+0x0]
c001ad4c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ad51:	75 09                	jne    c001ad5c <FAT::stat(void*, unsigned long long*)+0x20>
c001ad53:	b8 04 00 00 00       	mov    eax,0x4
c001ad58:	c3                   	ret    
c001ad59:	8d 76 00             	lea    esi,[esi+0x0]
c001ad5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad60:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001ad63:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ad66:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ad6a:	89 01                	mov    DWORD PTR [ecx],eax
c001ad6c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ad6f:	b8 00 00 00 00       	mov    eax,0x0
c001ad74:	c3                   	ret    
c001ad75:	90                   	nop
c001ad76:	66 90                	xchg   ax,ax

c001ad78 <FAT::~FAT()>:
c001ad78:	83 ec 0c             	sub    esp,0xc
c001ad7b:	ba d8 63 02 c0       	mov    edx,0xc00263d8
c001ad80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad84:	89 10                	mov    DWORD PTR [eax],edx
c001ad86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad8a:	83 ec 0c             	sub    esp,0xc
c001ad8d:	50                   	push   eax
c001ad8e:	e8 a7 22 ff ff       	call   c000d03a <Filesystem::~Filesystem()>
c001ad93:	83 c4 10             	add    esp,0x10
c001ad96:	90                   	nop
c001ad97:	83 c4 0c             	add    esp,0xc
c001ad9a:	c3                   	ret    
c001ad9b:	90                   	nop

c001ad9c <FAT::~FAT()>:
c001ad9c:	83 ec 0c             	sub    esp,0xc
c001ad9f:	83 ec 0c             	sub    esp,0xc
c001ada2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ada6:	e8 cd ff ff ff       	call   c001ad78 <FAT::~FAT()>
c001adab:	83 c4 10             	add    esp,0x10
c001adae:	83 ec 08             	sub    esp,0x8
c001adb1:	6a 08                	push   0x8
c001adb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001adb7:	e8 62 1e ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c001adbc:	83 c4 10             	add    esp,0x10
c001adbf:	83 c4 0c             	add    esp,0xc
c001adc2:	c3                   	ret    
c001adc3:	90                   	nop

c001adc4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001adc4:	83 ec 1c             	sub    esp,0x1c
c001adc7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001adce:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001add3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001add7:	8b 04 85 80 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6980]
c001adde:	83 f8 ff             	cmp    eax,0xffffffff
c001ade1:	75 35                	jne    c001ae18 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001ade3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ade7:	88 c2                	mov    dl,al
c001ade9:	a1 60 96 02 c0       	mov    eax,ds:0xc0029660
c001adee:	01 d0                	add    eax,edx
c001adf0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001adf4:	8b 15 60 96 02 c0    	mov    edx,DWORD PTR ds:0xc0029660
c001adfa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001adfe:	89 14 85 80 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6980],edx
c001ae05:	a1 60 96 02 c0       	mov    eax,ds:0xc0029660
c001ae0a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ae0e:	89 14 85 00 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6900],edx
c001ae15:	eb 19                	jmp    c001ae30 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001ae17:	90                   	nop
c001ae18:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ae1c:	88 c2                	mov    dl,al
c001ae1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae22:	8b 04 85 80 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6980]
c001ae29:	01 d0                	add    eax,edx
c001ae2b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ae2f:	90                   	nop
c001ae30:	83 ec 04             	sub    esp,0x4
c001ae33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ae37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ae3b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ae3f:	50                   	push   eax
c001ae40:	e8 ed bd fe ff       	call   c0006c32 <f_getlabel>
c001ae45:	83 c4 10             	add    esp,0x10
c001ae48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae4c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ae51:	75 09                	jne    c001ae5c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001ae53:	b8 00 00 00 00       	mov    eax,0x0
c001ae58:	eb 0a                	jmp    c001ae64 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001ae5a:	66 90                	xchg   ax,ax
c001ae5c:	b8 01 00 00 00       	mov    eax,0x1
c001ae61:	8d 76 00             	lea    esi,[esi+0x0]
c001ae64:	83 c4 1c             	add    esp,0x1c
c001ae67:	c3                   	ret    

c001ae68 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001ae68:	57                   	push   edi
c001ae69:	83 ec 58             	sub    esp,0x58
c001ae6c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001ae74:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ae78:	b9 0f 00 00 00       	mov    ecx,0xf
c001ae7d:	b8 00 00 00 00       	mov    eax,0x0
c001ae82:	fc                   	cld    
c001ae83:	89 d7                	mov    edi,edx
c001ae85:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ae87:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ae8b:	8b 04 85 80 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6980]
c001ae92:	83 f8 ff             	cmp    eax,0xffffffff
c001ae95:	75 35                	jne    c001aecc <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001ae97:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae9b:	88 c2                	mov    dl,al
c001ae9d:	a1 60 96 02 c0       	mov    eax,ds:0xc0029660
c001aea2:	01 d0                	add    eax,edx
c001aea4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001aea8:	8b 15 60 96 02 c0    	mov    edx,DWORD PTR ds:0xc0029660
c001aeae:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001aeb2:	89 14 85 80 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6980],edx
c001aeb9:	a1 60 96 02 c0       	mov    eax,ds:0xc0029660
c001aebe:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001aec2:	89 14 85 00 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6900],edx
c001aec9:	eb 19                	jmp    c001aee4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001aecb:	90                   	nop
c001aecc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001aed0:	88 c2                	mov    dl,al
c001aed2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001aed6:	8b 04 85 80 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6980]
c001aedd:	01 d0                	add    eax,edx
c001aedf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001aee3:	90                   	nop
c001aee4:	83 ec 08             	sub    esp,0x8
c001aee7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001aeeb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aeef:	50                   	push   eax
c001aef0:	e8 8b 59 fe ff       	call   c0000880 <strcat>
c001aef5:	83 c4 10             	add    esp,0x10
c001aef8:	83 ec 0c             	sub    esp,0xc
c001aefb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aeff:	50                   	push   eax
c001af00:	e8 1b bf fe ff       	call   c0006e20 <f_setlabel>
c001af05:	83 c4 10             	add    esp,0x10
c001af08:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001af0c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001af11:	75 09                	jne    c001af1c <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001af13:	b8 00 00 00 00       	mov    eax,0x0
c001af18:	eb 0a                	jmp    c001af24 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001af1a:	66 90                	xchg   ax,ax
c001af1c:	b8 01 00 00 00       	mov    eax,0x1
c001af21:	8d 76 00             	lea    esi,[esi+0x0]
c001af24:	83 c4 58             	add    esp,0x58
c001af27:	5f                   	pop    edi
c001af28:	c3                   	ret    
c001af29:	90                   	nop
c001af2a:	66 90                	xchg   ax,ax

c001af2c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001af2c:	83 ec 2c             	sub    esp,0x2c
c001af2f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001af37:	83 ec 08             	sub    esp,0x8
c001af3a:	68 b0 63 02 c0       	push   0xc00263b0
c001af3f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001af43:	e8 84 58 fe ff       	call   c00007cc <strcmp>
c001af48:	83 c4 10             	add    esp,0x10
c001af4b:	85 c0                	test   eax,eax
c001af4d:	0f 94 c0             	sete   al
c001af50:	84 c0                	test   al,al
c001af52:	74 10                	je     c001af64 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001af54:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001af5c:	e9 b3 00 00 00       	jmp    c001b014 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001af61:	8d 76 00             	lea    esi,[esi+0x0]
c001af64:	83 ec 08             	sub    esp,0x8
c001af67:	68 a2 63 02 c0       	push   0xc00263a2
c001af6c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001af70:	e8 57 58 fe ff       	call   c00007cc <strcmp>
c001af75:	83 c4 10             	add    esp,0x10
c001af78:	85 c0                	test   eax,eax
c001af7a:	0f 94 c0             	sete   al
c001af7d:	84 c0                	test   al,al
c001af7f:	74 0f                	je     c001af90 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001af81:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001af89:	e9 86 00 00 00       	jmp    c001b014 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001af8e:	66 90                	xchg   ax,ax
c001af90:	83 ec 08             	sub    esp,0x8
c001af93:	68 a8 63 02 c0       	push   0xc00263a8
c001af98:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001af9c:	e8 2b 58 fe ff       	call   c00007cc <strcmp>
c001afa1:	83 c4 10             	add    esp,0x10
c001afa4:	85 c0                	test   eax,eax
c001afa6:	0f 94 c0             	sete   al
c001afa9:	84 c0                	test   al,al
c001afab:	74 0b                	je     c001afb8 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001afad:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001afb5:	eb 5d                	jmp    c001b014 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001afb7:	90                   	nop
c001afb8:	83 ec 08             	sub    esp,0x8
c001afbb:	68 8c 38 02 c0       	push   0xc002388c
c001afc0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001afc4:	e8 03 58 fe ff       	call   c00007cc <strcmp>
c001afc9:	83 c4 10             	add    esp,0x10
c001afcc:	85 c0                	test   eax,eax
c001afce:	0f 94 c0             	sete   al
c001afd1:	84 c0                	test   al,al
c001afd3:	74 0b                	je     c001afe0 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001afd5:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001afdd:	eb 35                	jmp    c001b014 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001afdf:	90                   	nop
c001afe0:	83 ec 08             	sub    esp,0x8
c001afe3:	68 ae 63 02 c0       	push   0xc00263ae
c001afe8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001afec:	e8 db 57 fe ff       	call   c00007cc <strcmp>
c001aff1:	83 c4 10             	add    esp,0x10
c001aff4:	85 c0                	test   eax,eax
c001aff6:	0f 94 c0             	sete   al
c001aff9:	84 c0                	test   al,al
c001affb:	74 0b                	je     c001b008 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001affd:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b005:	eb 0d                	jmp    c001b014 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b007:	90                   	nop
c001b008:	b8 08 00 00 00       	mov    eax,0x8
c001b00d:	e9 ea 00 00 00       	jmp    c001b0fc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b012:	66 90                	xchg   ax,ax
c001b014:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b01b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b020:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b024:	8b 04 85 80 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6980]
c001b02b:	83 f8 ff             	cmp    eax,0xffffffff
c001b02e:	75 34                	jne    c001b064 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001b030:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b034:	88 c2                	mov    dl,al
c001b036:	a1 60 96 02 c0       	mov    eax,ds:0xc0029660
c001b03b:	01 d0                	add    eax,edx
c001b03d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b041:	8b 15 60 96 02 c0    	mov    edx,DWORD PTR ds:0xc0029660
c001b047:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b04b:	89 14 85 80 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6980],edx
c001b052:	a1 60 96 02 c0       	mov    eax,ds:0xc0029660
c001b057:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b05b:	89 14 85 00 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6900],edx
c001b062:	eb 18                	jmp    c001b07c <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001b064:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b068:	88 c2                	mov    dl,al
c001b06a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b06e:	8b 04 85 80 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6980]
c001b075:	01 d0                	add    eax,edx
c001b077:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b07b:	90                   	nop
c001b07c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b080:	88 04 24             	mov    BYTE PTR [esp],al
c001b083:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b087:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b08b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b093:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b098:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b0a0:	83 ec 0c             	sub    esp,0xc
c001b0a3:	68 00 20 00 00       	push   0x2000
c001b0a8:	e8 62 e9 fe ff       	call   c0009a0f <malloc>
c001b0ad:	83 c4 10             	add    esp,0x10
c001b0b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b0b4:	68 00 20 00 00       	push   0x2000
c001b0b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0bd:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b0c1:	50                   	push   eax
c001b0c2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b0c6:	50                   	push   eax
c001b0c7:	e8 d5 c3 fe ff       	call   c00074a1 <f_mkfs>
c001b0cc:	83 c4 10             	add    esp,0x10
c001b0cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b0d3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b0d8:	75 0a                	jne    c001b0e4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001b0da:	b8 00 00 00 00       	mov    eax,0x0
c001b0df:	eb 1b                	jmp    c001b0fc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b0e1:	8d 76 00             	lea    esi,[esi+0x0]
c001b0e4:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b0e9:	75 09                	jne    c001b0f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b0eb:	b8 09 00 00 00       	mov    eax,0x9
c001b0f0:	eb 0a                	jmp    c001b0fc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b0f2:	66 90                	xchg   ax,ax
c001b0f4:	b8 01 00 00 00       	mov    eax,0x1
c001b0f9:	8d 76 00             	lea    esi,[esi+0x0]
c001b0fc:	83 c4 2c             	add    esp,0x2c
c001b0ff:	c3                   	ret    

c001b100 <FAT::tryMount(LogicalDisk*, int)>:
c001b100:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001b106:	a1 60 96 02 c0       	mov    eax,ds:0xc0029660
c001b10b:	83 f8 14             	cmp    eax,0x14
c001b10e:	75 18                	jne    c001b128 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b110:	83 ec 0c             	sub    esp,0xc
c001b113:	68 b4 63 02 c0       	push   0xc00263b4
c001b118:	e8 9e 98 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c001b11d:	83 c4 10             	add    esp,0x10
c001b120:	b0 00                	mov    al,0x0
c001b122:	e9 e9 01 00 00       	jmp    c001b310 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b127:	90                   	nop
c001b128:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001b12f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b135:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b13b:	3d 00 02 00 00       	cmp    eax,0x200
c001b140:	74 0a                	je     c001b14c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b142:	b0 00                	mov    al,0x0
c001b144:	e9 c7 01 00 00       	jmp    c001b310 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b149:	8d 76 00             	lea    esi,[esi+0x0]
c001b14c:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001b154:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b15b:	8b 04 85 80 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6980]
c001b162:	83 f8 ff             	cmp    eax,0xffffffff
c001b165:	74 09                	je     c001b170 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001b167:	b0 01                	mov    al,0x1
c001b169:	e9 a2 01 00 00       	jmp    c001b310 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b16e:	66 90                	xchg   ax,ax
c001b170:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001b17a:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001b182:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001b189:	88 c2                	mov    dl,al
c001b18b:	a1 60 96 02 c0       	mov    eax,ds:0xc0029660
c001b190:	01 d0                	add    eax,edx
c001b192:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001b199:	8b 15 60 96 02 c0    	mov    edx,DWORD PTR ds:0xc0029660
c001b19f:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b1a6:	89 14 85 80 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6980],edx
c001b1ad:	a1 60 96 02 c0       	mov    eax,ds:0xc0029660
c001b1b2:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001b1b9:	89 14 85 00 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6900],edx
c001b1c0:	83 ec 0c             	sub    esp,0xc
c001b1c3:	68 54 02 00 00       	push   0x254
c001b1c8:	e8 42 e8 fe ff       	call   c0009a0f <malloc>
c001b1cd:	83 c4 10             	add    esp,0x10
c001b1d0:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001b1d7:	83 ec 04             	sub    esp,0x4
c001b1da:	6a 00                	push   0x0
c001b1dc:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b1e3:	50                   	push   eax
c001b1e4:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b1eb:	e8 39 9c fe ff       	call   c0004e29 <f_mount>
c001b1f0:	83 c4 10             	add    esp,0x10
c001b1f3:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b1fa:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001b202:	74 1c                	je     c001b220 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001b204:	83 ec 0c             	sub    esp,0xc
c001b207:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b20e:	e8 1c e8 fe ff       	call   c0009a2f <rfree>
c001b213:	83 c4 10             	add    esp,0x10
c001b216:	b0 00                	mov    al,0x0
c001b218:	e9 f3 00 00 00       	jmp    c001b310 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b21d:	8d 76 00             	lea    esi,[esi+0x0]
c001b220:	83 ec 04             	sub    esp,0x4
c001b223:	68 00 01 00 00       	push   0x100
c001b228:	6a 00                	push   0x0
c001b22a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b231:	50                   	push   eax
c001b232:	e8 4d 54 fe ff       	call   c0000684 <memset>
c001b237:	83 c4 10             	add    esp,0x10
c001b23a:	83 ec 08             	sub    esp,0x8
c001b23d:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b244:	50                   	push   eax
c001b245:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b24c:	50                   	push   eax
c001b24d:	e8 2e 56 fe ff       	call   c0000880 <strcat>
c001b252:	83 c4 10             	add    esp,0x10
c001b255:	83 ec 08             	sub    esp,0x8
c001b258:	68 c2 63 02 c0       	push   0xc00263c2
c001b25d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b264:	50                   	push   eax
c001b265:	e8 16 56 fe ff       	call   c0000880 <strcat>
c001b26a:	83 c4 10             	add    esp,0x10
c001b26d:	83 ec 04             	sub    esp,0x4
c001b270:	6a 01                	push   0x1
c001b272:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001b279:	50                   	push   eax
c001b27a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b27e:	50                   	push   eax
c001b27f:	e8 07 9c fe ff       	call   c0004e8b <f_open>
c001b284:	83 c4 10             	add    esp,0x10
c001b287:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b28e:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001b295:	85 c0                	test   eax,eax
c001b297:	74 0b                	je     c001b2a4 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001b299:	78 31                	js     c001b2cc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b29b:	83 e8 04             	sub    eax,0x4
c001b29e:	83 f8 01             	cmp    eax,0x1
c001b2a1:	77 29                	ja     c001b2cc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b2a3:	90                   	nop
c001b2a4:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001b2ac:	83 ec 0c             	sub    esp,0xc
c001b2af:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b2b3:	50                   	push   eax
c001b2b4:	e8 24 a7 fe ff       	call   c00059dd <f_close>
c001b2b9:	83 c4 10             	add    esp,0x10
c001b2bc:	90                   	nop
c001b2bd:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001b2c5:	74 41                	je     c001b308 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001b2c7:	eb 33                	jmp    c001b2fc <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001b2c9:	8d 76 00             	lea    esi,[esi+0x0]
c001b2cc:	83 ec 0c             	sub    esp,0xc
c001b2cf:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b2d6:	e8 54 e7 fe ff       	call   c0009a2f <rfree>
c001b2db:	83 c4 10             	add    esp,0x10
c001b2de:	83 ec 04             	sub    esp,0x4
c001b2e1:	6a 00                	push   0x0
c001b2e3:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b2ea:	50                   	push   eax
c001b2eb:	6a 00                	push   0x0
c001b2ed:	e8 37 9b fe ff       	call   c0004e29 <f_mount>
c001b2f2:	83 c4 10             	add    esp,0x10
c001b2f5:	b0 00                	mov    al,0x0
c001b2f7:	eb 17                	jmp    c001b310 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b2f9:	8d 76 00             	lea    esi,[esi+0x0]
c001b2fc:	a1 60 96 02 c0       	mov    eax,ds:0xc0029660
c001b301:	40                   	inc    eax
c001b302:	a3 60 96 02 c0       	mov    ds:0xc0029660,eax
c001b307:	90                   	nop
c001b308:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001b30f:	90                   	nop
c001b310:	81 c4 6c 03 00 00    	add    esp,0x36c
c001b316:	c3                   	ret    
c001b317:	90                   	nop

c001b318 <FAT::allocateSwapfile(char const*, int)>:
c001b318:	55                   	push   ebp
c001b319:	57                   	push   edi
c001b31a:	56                   	push   esi
c001b31b:	53                   	push   ebx
c001b31c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001b322:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001b32d:	83 ec 0c             	sub    esp,0xc
c001b330:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001b337:	e8 d3 e6 fe ff       	call   c0009a0f <malloc>
c001b33c:	83 c4 10             	add    esp,0x10
c001b33f:	89 c7                	mov    edi,eax
c001b341:	a1 90 95 02 c0       	mov    eax,ds:0xc0029590
c001b346:	83 ec 04             	sub    esp,0x4
c001b349:	50                   	push   eax
c001b34a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001b351:	57                   	push   edi
c001b352:	e8 13 1f ff ff       	call   c000d26a <File::File(char const*, Process*)>
c001b357:	83 c4 10             	add    esp,0x10
c001b35a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001b361:	83 ec 04             	sub    esp,0x4
c001b364:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b368:	50                   	push   eax
c001b369:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b36d:	50                   	push   eax
c001b36e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b375:	e8 5e 22 ff ff       	call   c000d5d8 <File::stat(unsigned long long*, bool*)>
c001b37a:	83 c4 10             	add    esp,0x10
c001b37d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b384:	c1 e0 14             	shl    eax,0x14
c001b387:	89 c7                	mov    edi,eax
c001b389:	89 c5                	mov    ebp,eax
c001b38b:	c1 fd 1f             	sar    ebp,0x1f
c001b38e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b392:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b396:	89 f9                	mov    ecx,edi
c001b398:	31 c1                	xor    ecx,eax
c001b39a:	89 cb                	mov    ebx,ecx
c001b39c:	89 e9                	mov    ecx,ebp
c001b39e:	31 d1                	xor    ecx,edx
c001b3a0:	89 ce                	mov    esi,ecx
c001b3a2:	89 f0                	mov    eax,esi
c001b3a4:	09 d8                	or     eax,ebx
c001b3a6:	0f 84 98 00 00 00    	je     c001b444 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001b3ac:	83 ec 0c             	sub    esp,0xc
c001b3af:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b3b6:	e8 e9 20 ff ff       	call   c000d4a4 <File::unlink()>
c001b3bb:	83 c4 10             	add    esp,0x10
c001b3be:	83 ec 08             	sub    esp,0x8
c001b3c1:	6a 12                	push   0x12
c001b3c3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b3ca:	e8 5d 1f ff ff       	call   c000d32c <File::open(FileOpenMode)>
c001b3cf:	83 c4 10             	add    esp,0x10
c001b3d2:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b3d9:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b3df:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b3e6:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b3ed:	c1 e0 14             	shl    eax,0x14
c001b3f0:	99                   	cdq    
c001b3f1:	6a 01                	push   0x1
c001b3f3:	52                   	push   edx
c001b3f4:	50                   	push   eax
c001b3f5:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001b3fc:	e8 8c bc fe ff       	call   c000708d <f_expand>
c001b401:	83 c4 10             	add    esp,0x10
c001b404:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b40b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b40d:	83 c0 10             	add    eax,0x10
c001b410:	8b 00                	mov    eax,DWORD PTR [eax]
c001b412:	83 ec 0c             	sub    esp,0xc
c001b415:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b419:	52                   	push   edx
c001b41a:	8d 54 24 30          	lea    edx,[esp+0x30]
c001b41e:	52                   	push   edx
c001b41f:	6a 00                	push   0x0
c001b421:	68 00 04 00 00       	push   0x400
c001b426:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b42d:	ff d0                	call   eax
c001b42f:	83 c4 20             	add    esp,0x20
c001b432:	83 ec 0c             	sub    esp,0xc
c001b435:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b43c:	e8 49 1f ff ff       	call   c000d38a <File::close()>
c001b441:	83 c4 10             	add    esp,0x10
c001b444:	83 ec 08             	sub    esp,0x8
c001b447:	6a 01                	push   0x1
c001b449:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b450:	e8 d7 1e ff ff       	call   c000d32c <File::open(FileOpenMode)>
c001b455:	83 c4 10             	add    esp,0x10
c001b458:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b45f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b461:	83 c0 0c             	add    eax,0xc
c001b464:	8b 00                	mov    eax,DWORD PTR [eax]
c001b466:	83 ec 0c             	sub    esp,0xc
c001b469:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b46d:	52                   	push   edx
c001b46e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001b472:	52                   	push   edx
c001b473:	6a 00                	push   0x0
c001b475:	6a 04                	push   0x4
c001b477:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b47e:	ff d0                	call   eax
c001b480:	83 c4 20             	add    esp,0x20
c001b483:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b48a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b490:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b497:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001b49e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001b4a1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b4a4:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001b4ab:	83 ec 0c             	sub    esp,0xc
c001b4ae:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b4b5:	e8 d0 1e ff ff       	call   c000d38a <File::close()>
c001b4ba:	83 c4 10             	add    esp,0x10
c001b4bd:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001b4c4:	ba 00 00 00 00       	mov    edx,0x0
c001b4c9:	81 c4 3c 04 00 00    	add    esp,0x43c
c001b4cf:	5b                   	pop    ebx
c001b4d0:	5e                   	pop    esi
c001b4d1:	5f                   	pop    edi
c001b4d2:	5d                   	pop    ebp
c001b4d3:	c3                   	ret    

c001b4d4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001b4d4:	57                   	push   edi
c001b4d5:	56                   	push   esi
c001b4d6:	53                   	push   ebx
c001b4d7:	81 ec 50 02 00 00    	sub    esp,0x250
c001b4dd:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001b4e5:	74 0d                	je     c001b4f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001b4e7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001b4ef:	75 0f                	jne    c001b500 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001b4f1:	8d 76 00             	lea    esi,[esi+0x0]
c001b4f4:	b8 04 00 00 00       	mov    eax,0x4
c001b4f9:	e9 36 01 00 00       	jmp    c001b634 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b4fe:	66 90                	xchg   ax,ax
c001b500:	83 ec 08             	sub    esp,0x8
c001b503:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b50a:	50                   	push   eax
c001b50b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001b512:	e8 d0 aa fe ff       	call   c0005fe7 <f_readdir>
c001b517:	83 c4 10             	add    esp,0x10
c001b51a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001b521:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001b528:	83 ec 0c             	sub    esp,0xc
c001b52b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001b532:	83 c0 1a             	add    eax,0x1a
c001b535:	50                   	push   eax
c001b536:	e8 65 51 fe ff       	call   c00006a0 <strlen>
c001b53b:	83 c4 10             	add    esp,0x10
c001b53e:	ba 00 00 00 00       	mov    edx,0x0
c001b543:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b547:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b54b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001b552:	0f b6 c0             	movzx  eax,al
c001b555:	83 e0 10             	and    eax,0x10
c001b558:	74 0a                	je     c001b564 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001b55a:	b8 02 00 00 00       	mov    eax,0x2
c001b55f:	eb 0b                	jmp    c001b56c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001b561:	8d 76 00             	lea    esi,[esi+0x0]
c001b564:	b8 01 00 00 00       	mov    eax,0x1
c001b569:	8d 76 00             	lea    esi,[esi+0x0]
c001b56c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b570:	83 ec 08             	sub    esp,0x8
c001b573:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b57a:	83 c0 1a             	add    eax,0x1a
c001b57d:	50                   	push   eax
c001b57e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b582:	83 c0 10             	add    eax,0x10
c001b585:	50                   	push   eax
c001b586:	e8 b5 51 fe ff       	call   c0000740 <strcpy>
c001b58b:	83 c4 10             	add    esp,0x10
c001b58e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001b595:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001b59c:	8d 44 24 04          	lea    eax,[esp+0x4]
c001b5a0:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001b5a7:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001b5ae:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001b5b5:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001b5bc:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001b5c3:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001b5ca:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001b5d1:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001b5d8:	89 c6                	mov    esi,eax
c001b5da:	89 d7                	mov    edi,edx
c001b5dc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b5de:	89 c8                	mov    eax,ecx
c001b5e0:	89 fa                	mov    edx,edi
c001b5e2:	89 f3                	mov    ebx,esi
c001b5e4:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001b5eb:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001b5f2:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001b5f9:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001b600:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b606:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001b60d:	84 c0                	test   al,al
c001b60f:	75 07                	jne    c001b618 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001b611:	b8 07 00 00 00       	mov    eax,0x7
c001b616:	eb 1c                	jmp    c001b634 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b618:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001b61f:	85 c0                	test   eax,eax
c001b621:	75 09                	jne    c001b62c <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001b623:	b8 00 00 00 00       	mov    eax,0x0
c001b628:	eb 0a                	jmp    c001b634 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b62a:	66 90                	xchg   ax,ax
c001b62c:	b8 01 00 00 00       	mov    eax,0x1
c001b631:	8d 76 00             	lea    esi,[esi+0x0]
c001b634:	81 c4 50 02 00 00    	add    esp,0x250
c001b63a:	5b                   	pop    ebx
c001b63b:	5e                   	pop    esi
c001b63c:	5f                   	pop    edi
c001b63d:	c3                   	ret    
c001b63e:	66 90                	xchg   ax,ax

c001b640 <FAT::read(void*, unsigned long, void*, int*)>:
c001b640:	83 ec 1c             	sub    esp,0x1c
c001b643:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b648:	74 0a                	je     c001b654 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001b64a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b64f:	75 0b                	jne    c001b65c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001b651:	8d 76 00             	lea    esi,[esi+0x0]
c001b654:	b8 04 00 00 00       	mov    eax,0x4
c001b659:	eb 41                	jmp    c001b69c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b65b:	90                   	nop
c001b65c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b660:	50                   	push   eax
c001b661:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b665:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b669:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b66d:	e8 55 9c fe ff       	call   c00052c7 <f_read>
c001b672:	83 c4 10             	add    esp,0x10
c001b675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b679:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b67d:	89 c2                	mov    edx,eax
c001b67f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b683:	89 10                	mov    DWORD PTR [eax],edx
c001b685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b689:	85 c0                	test   eax,eax
c001b68b:	75 07                	jne    c001b694 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001b68d:	b8 00 00 00 00       	mov    eax,0x0
c001b692:	eb 08                	jmp    c001b69c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b694:	b8 01 00 00 00       	mov    eax,0x1
c001b699:	8d 76 00             	lea    esi,[esi+0x0]
c001b69c:	83 c4 1c             	add    esp,0x1c
c001b69f:	c3                   	ret    

c001b6a0 <FAT::write(void*, unsigned long, void*, int*)>:
c001b6a0:	83 ec 1c             	sub    esp,0x1c
c001b6a3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b6a8:	74 0a                	je     c001b6b4 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001b6aa:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b6af:	75 0b                	jne    c001b6bc <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001b6b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b6b4:	b8 04 00 00 00       	mov    eax,0x4
c001b6b9:	eb 41                	jmp    c001b6fc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b6bb:	90                   	nop
c001b6bc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b6c0:	50                   	push   eax
c001b6c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b6c9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b6cd:	e8 75 9e fe ff       	call   c0005547 <f_write>
c001b6d2:	83 c4 10             	add    esp,0x10
c001b6d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b6dd:	89 c2                	mov    edx,eax
c001b6df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b6e3:	89 10                	mov    DWORD PTR [eax],edx
c001b6e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6e9:	85 c0                	test   eax,eax
c001b6eb:	75 07                	jne    c001b6f4 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001b6ed:	b8 00 00 00 00       	mov    eax,0x0
c001b6f2:	eb 08                	jmp    c001b6fc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b6f4:	b8 01 00 00 00       	mov    eax,0x1
c001b6f9:	8d 76 00             	lea    esi,[esi+0x0]
c001b6fc:	83 c4 1c             	add    esp,0x1c
c001b6ff:	c3                   	ret    

c001b700 <FAT::close(void*)>:
c001b700:	83 ec 1c             	sub    esp,0x1c
c001b703:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b708:	75 0a                	jne    c001b714 <FAT::close(void*)+0x14>
c001b70a:	b8 04 00 00 00       	mov    eax,0x4
c001b70f:	eb 3f                	jmp    c001b750 <FAT::close(void*)+0x50>
c001b711:	8d 76 00             	lea    esi,[esi+0x0]
c001b714:	83 ec 0c             	sub    esp,0xc
c001b717:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b71b:	e8 bd a2 fe ff       	call   c00059dd <f_close>
c001b720:	83 c4 10             	add    esp,0x10
c001b723:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b727:	83 ec 0c             	sub    esp,0xc
c001b72a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b72e:	e8 ec e2 fe ff       	call   c0009a1f <free>
c001b733:	83 c4 10             	add    esp,0x10
c001b736:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b73a:	85 c0                	test   eax,eax
c001b73c:	75 0a                	jne    c001b748 <FAT::close(void*)+0x48>
c001b73e:	b8 00 00 00 00       	mov    eax,0x0
c001b743:	eb 0b                	jmp    c001b750 <FAT::close(void*)+0x50>
c001b745:	8d 76 00             	lea    esi,[esi+0x0]
c001b748:	b8 01 00 00 00       	mov    eax,0x1
c001b74d:	8d 76 00             	lea    esi,[esi+0x0]
c001b750:	83 c4 1c             	add    esp,0x1c
c001b753:	c3                   	ret    

c001b754 <FAT::closeDir(void*)>:
c001b754:	83 ec 1c             	sub    esp,0x1c
c001b757:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b75c:	75 0a                	jne    c001b768 <FAT::closeDir(void*)+0x14>
c001b75e:	b8 04 00 00 00       	mov    eax,0x4
c001b763:	eb 3f                	jmp    c001b7a4 <FAT::closeDir(void*)+0x50>
c001b765:	8d 76 00             	lea    esi,[esi+0x0]
c001b768:	83 ec 0c             	sub    esp,0xc
c001b76b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b76f:	e8 51 a8 fe ff       	call   c0005fc5 <f_closedir>
c001b774:	83 c4 10             	add    esp,0x10
c001b777:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b77b:	83 ec 0c             	sub    esp,0xc
c001b77e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b782:	e8 98 e2 fe ff       	call   c0009a1f <free>
c001b787:	83 c4 10             	add    esp,0x10
c001b78a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b78e:	85 c0                	test   eax,eax
c001b790:	75 0a                	jne    c001b79c <FAT::closeDir(void*)+0x48>
c001b792:	b8 00 00 00 00       	mov    eax,0x0
c001b797:	eb 0b                	jmp    c001b7a4 <FAT::closeDir(void*)+0x50>
c001b799:	8d 76 00             	lea    esi,[esi+0x0]
c001b79c:	b8 01 00 00 00       	mov    eax,0x1
c001b7a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b7a4:	83 c4 1c             	add    esp,0x1c
c001b7a7:	c3                   	ret    

c001b7a8 <FAT::seek(void*, unsigned long long)>:
c001b7a8:	83 ec 2c             	sub    esp,0x2c
c001b7ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b7af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b7b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b7b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7bb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001b7c0:	75 0a                	jne    c001b7cc <FAT::seek(void*, unsigned long long)+0x24>
c001b7c2:	b8 04 00 00 00       	mov    eax,0x4
c001b7c7:	eb 37                	jmp    c001b800 <FAT::seek(void*, unsigned long long)+0x58>
c001b7c9:	8d 76 00             	lea    esi,[esi+0x0]
c001b7cc:	83 ec 04             	sub    esp,0x4
c001b7cf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b7d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b7d7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b7db:	e8 2c a2 fe ff       	call   c0005a0c <f_lseek>
c001b7e0:	83 c4 10             	add    esp,0x10
c001b7e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b7e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b7eb:	85 c0                	test   eax,eax
c001b7ed:	75 09                	jne    c001b7f8 <FAT::seek(void*, unsigned long long)+0x50>
c001b7ef:	b8 00 00 00 00       	mov    eax,0x0
c001b7f4:	eb 0a                	jmp    c001b800 <FAT::seek(void*, unsigned long long)+0x58>
c001b7f6:	66 90                	xchg   ax,ax
c001b7f8:	b8 01 00 00 00       	mov    eax,0x1
c001b7fd:	8d 76 00             	lea    esi,[esi+0x0]
c001b800:	83 c4 2c             	add    esp,0x2c
c001b803:	c3                   	ret    

c001b804 <fatWrapperReadDisk>:
c001b804:	83 ec 1c             	sub    esp,0x1c
c001b807:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b80b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b80f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b813:	89 04 24             	mov    DWORD PTR [esp],eax
c001b816:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b81a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b81e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b823:	8b 04 85 00 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7a00]
c001b82a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b82e:	83 ec 0c             	sub    esp,0xc
c001b831:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b835:	52                   	push   edx
c001b836:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b83a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b83e:	50                   	push   eax
c001b83f:	e8 06 4d ff ff       	call   c001054a <LogicalDisk::read(unsigned long long, int, void*)>
c001b844:	83 c4 20             	add    esp,0x20
c001b847:	83 c4 1c             	add    esp,0x1c
c001b84a:	c3                   	ret    
c001b84b:	90                   	nop

c001b84c <fatWrapperWriteDisk>:
c001b84c:	83 ec 1c             	sub    esp,0x1c
c001b84f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b853:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b857:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b85b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b85e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b862:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b866:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b86b:	8b 04 85 00 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7a00]
c001b872:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b876:	83 ec 0c             	sub    esp,0xc
c001b879:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b87d:	52                   	push   edx
c001b87e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b882:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b886:	50                   	push   eax
c001b887:	e8 2a 4d ff ff       	call   c00105b6 <LogicalDisk::write(unsigned long long, int, void*)>
c001b88c:	83 c4 20             	add    esp,0x20
c001b88f:	83 c4 1c             	add    esp,0x1c
c001b892:	c3                   	ret    
c001b893:	90                   	nop

c001b894 <fatWrapperIoctl>:
c001b894:	53                   	push   ebx
c001b895:	83 ec 28             	sub    esp,0x28
c001b898:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b89c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b8a0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b8a4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b8a8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001b8ad:	75 31                	jne    c001b8e0 <fatWrapperIoctl+0x4c>
c001b8af:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b8b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b8b7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b8bc:	8b 04 85 00 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7a00]
c001b8c3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b8c9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b8cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b8d3:	66 89 02             	mov    WORD PTR [edx],ax
c001b8d6:	b8 00 00 00 00       	mov    eax,0x0
c001b8db:	e9 bc 00 00 00       	jmp    c001b99c <fatWrapperIoctl+0x108>
c001b8e0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001b8e5:	75 6d                	jne    c001b954 <fatWrapperIoctl+0xc0>
c001b8e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b8eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b8ef:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b8f4:	8b 04 85 00 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7a00]
c001b8fb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b901:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b907:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b90d:	89 c8                	mov    eax,ecx
c001b90f:	89 da                	mov    edx,ebx
c001b911:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b915:	c1 e0 0a             	shl    eax,0xa
c001b918:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b91d:	8b 0c 8d 00 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7a00]
c001b924:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b92a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b930:	89 cb                	mov    ebx,ecx
c001b932:	c1 fb 1f             	sar    ebx,0x1f
c001b935:	53                   	push   ebx
c001b936:	51                   	push   ecx
c001b937:	52                   	push   edx
c001b938:	50                   	push   eax
c001b939:	e8 46 6e 00 00       	call   c0022784 <__udivdi3>
c001b93e:	83 c4 10             	add    esp,0x10
c001b941:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b945:	89 01                	mov    DWORD PTR [ecx],eax
c001b947:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b94a:	b8 00 00 00 00       	mov    eax,0x0
c001b94f:	eb 4b                	jmp    c001b99c <fatWrapperIoctl+0x108>
c001b951:	8d 76 00             	lea    esi,[esi+0x0]
c001b954:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b959:	75 09                	jne    c001b964 <fatWrapperIoctl+0xd0>
c001b95b:	b8 00 00 00 00       	mov    eax,0x0
c001b960:	eb 3a                	jmp    c001b99c <fatWrapperIoctl+0x108>
c001b962:	66 90                	xchg   ax,ax
c001b964:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001b969:	75 19                	jne    c001b984 <fatWrapperIoctl+0xf0>
c001b96b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b96f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b973:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b977:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b97d:	b8 00 00 00 00       	mov    eax,0x0
c001b982:	eb 18                	jmp    c001b99c <fatWrapperIoctl+0x108>
c001b984:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b989:	75 09                	jne    c001b994 <fatWrapperIoctl+0x100>
c001b98b:	b8 00 00 00 00       	mov    eax,0x0
c001b990:	eb 0a                	jmp    c001b99c <fatWrapperIoctl+0x108>
c001b992:	66 90                	xchg   ax,ax
c001b994:	b8 04 00 00 00       	mov    eax,0x4
c001b999:	8d 76 00             	lea    esi,[esi+0x0]
c001b99c:	83 c4 28             	add    esp,0x28
c001b99f:	5b                   	pop    ebx
c001b9a0:	c3                   	ret    
c001b9a1:	90                   	nop
c001b9a2:	66 90                	xchg   ax,ax

c001b9a4 <FAT::FAT()>:
c001b9a4:	83 ec 1c             	sub    esp,0x1c
c001b9a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9ab:	83 ec 0c             	sub    esp,0xc
c001b9ae:	50                   	push   eax
c001b9af:	e8 62 16 ff ff       	call   c000d016 <Filesystem::Filesystem()>
c001b9b4:	83 c4 10             	add    esp,0x10
c001b9b7:	ba d8 63 02 c0       	mov    edx,0xc00263d8
c001b9bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9c0:	89 10                	mov    DWORD PTR [eax],edx
c001b9c2:	c7 05 60 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029660,0x0
c001b9cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b9d4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b9d9:	7f 15                	jg     c001b9f0 <FAT::FAT()+0x4c>
c001b9db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9df:	c7 04 85 80 96 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6980],0xffffffff
c001b9ea:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b9ee:	eb e4                	jmp    c001b9d4 <FAT::FAT()+0x30>
c001b9f0:	90                   	nop
c001b9f1:	83 c4 1c             	add    esp,0x1c
c001b9f4:	c3                   	ret    
c001b9f5:	90                   	nop
c001b9f6:	66 90                	xchg   ax,ax

c001b9f8 <FAT::fixFilepath(char*)>:
c001b9f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b9fc:	8a 00                	mov    al,BYTE PTR [eax]
c001b9fe:	3c 40                	cmp    al,0x40
c001ba00:	7e 2e                	jle    c001ba30 <FAT::fixFilepath(char*)+0x38>
c001ba02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba06:	8a 00                	mov    al,BYTE PTR [eax]
c001ba08:	83 e8 41             	sub    eax,0x41
c001ba0b:	88 c2                	mov    dl,al
c001ba0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba11:	88 10                	mov    BYTE PTR [eax],dl
c001ba13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba17:	8a 00                	mov    al,BYTE PTR [eax]
c001ba19:	0f be c0             	movsx  eax,al
c001ba1c:	8b 04 85 80 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6980]
c001ba23:	83 c0 30             	add    eax,0x30
c001ba26:	88 c2                	mov    dl,al
c001ba28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba2c:	88 10                	mov    BYTE PTR [eax],dl
c001ba2e:	66 90                	xchg   ax,ax
c001ba30:	90                   	nop
c001ba31:	c3                   	ret    
c001ba32:	66 90                	xchg   ax,ax

c001ba34 <FAT::open(char const*, void**, FileOpenMode)>:
c001ba34:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ba3a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ba42:	74 0c                	je     c001ba50 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001ba44:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ba4c:	75 0e                	jne    c001ba5c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001ba4e:	66 90                	xchg   ax,ax
c001ba50:	b8 04 00 00 00       	mov    eax,0x4
c001ba55:	e9 06 01 00 00       	jmp    c001bb60 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001ba5a:	66 90                	xchg   ax,ax
c001ba5c:	83 ec 08             	sub    esp,0x8
c001ba5f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ba66:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ba6a:	50                   	push   eax
c001ba6b:	e8 d0 4c fe ff       	call   c0000740 <strcpy>
c001ba70:	83 c4 10             	add    esp,0x10
c001ba73:	83 ec 08             	sub    esp,0x8
c001ba76:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ba7a:	50                   	push   eax
c001ba7b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ba82:	e8 71 ff ff ff       	call   c001b9f8 <FAT::fixFilepath(char*)>
c001ba87:	83 c4 10             	add    esp,0x10
c001ba8a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001ba92:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ba99:	83 e0 01             	and    eax,0x1
c001ba9c:	74 0a                	je     c001baa8 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001ba9e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001baa6:	66 90                	xchg   ax,ax
c001baa8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001baaf:	83 e0 04             	and    eax,0x4
c001bab2:	74 10                	je     c001bac4 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001bab4:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001babc:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001bac4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bacb:	83 e0 02             	and    eax,0x2
c001bace:	74 08                	je     c001bad8 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001bad0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001bad8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001badf:	83 e0 08             	and    eax,0x8
c001bae2:	74 08                	je     c001baec <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001bae4:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001baec:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001baf3:	83 e0 10             	and    eax,0x10
c001baf6:	74 08                	je     c001bb00 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001baf8:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001bb00:	83 ec 0c             	sub    esp,0xc
c001bb03:	68 50 02 00 00       	push   0x250
c001bb08:	e8 02 df fe ff       	call   c0009a0f <malloc>
c001bb0d:	83 c4 10             	add    esp,0x10
c001bb10:	89 c2                	mov    edx,eax
c001bb12:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bb19:	89 10                	mov    DWORD PTR [eax],edx
c001bb1b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001bb23:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bb2a:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb2c:	83 ec 04             	sub    esp,0x4
c001bb2f:	52                   	push   edx
c001bb30:	8d 54 24 10          	lea    edx,[esp+0x10]
c001bb34:	52                   	push   edx
c001bb35:	50                   	push   eax
c001bb36:	e8 50 93 fe ff       	call   c0004e8b <f_open>
c001bb3b:	83 c4 10             	add    esp,0x10
c001bb3e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001bb45:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001bb4d:	74 09                	je     c001bb58 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001bb4f:	b8 01 00 00 00       	mov    eax,0x1
c001bb54:	eb 0a                	jmp    c001bb60 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001bb56:	66 90                	xchg   ax,ax
c001bb58:	b8 00 00 00 00       	mov    eax,0x0
c001bb5d:	8d 76 00             	lea    esi,[esi+0x0]
c001bb60:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bb66:	c3                   	ret    
c001bb67:	90                   	nop

c001bb68 <FAT::openDir(char const*, void**)>:
c001bb68:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bb6e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bb76:	74 0c                	je     c001bb84 <FAT::openDir(char const*, void**)+0x1c>
c001bb78:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001bb80:	75 0e                	jne    c001bb90 <FAT::openDir(char const*, void**)+0x28>
c001bb82:	66 90                	xchg   ax,ax
c001bb84:	b8 04 00 00 00       	mov    eax,0x4
c001bb89:	e9 82 00 00 00       	jmp    c001bc10 <FAT::openDir(char const*, void**)+0xa8>
c001bb8e:	66 90                	xchg   ax,ax
c001bb90:	83 ec 08             	sub    esp,0x8
c001bb93:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bb9a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bb9e:	50                   	push   eax
c001bb9f:	e8 9c 4b fe ff       	call   c0000740 <strcpy>
c001bba4:	83 c4 10             	add    esp,0x10
c001bba7:	83 ec 08             	sub    esp,0x8
c001bbaa:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bbae:	50                   	push   eax
c001bbaf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bbb6:	e8 3d fe ff ff       	call   c001b9f8 <FAT::fixFilepath(char*)>
c001bbbb:	83 c4 10             	add    esp,0x10
c001bbbe:	83 ec 0c             	sub    esp,0xc
c001bbc1:	6a 4c                	push   0x4c
c001bbc3:	e8 47 de fe ff       	call   c0009a0f <malloc>
c001bbc8:	83 c4 10             	add    esp,0x10
c001bbcb:	89 c2                	mov    edx,eax
c001bbcd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bbd4:	89 10                	mov    DWORD PTR [eax],edx
c001bbd6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bbdd:	8b 00                	mov    eax,DWORD PTR [eax]
c001bbdf:	83 ec 08             	sub    esp,0x8
c001bbe2:	8d 54 24 14          	lea    edx,[esp+0x14]
c001bbe6:	52                   	push   edx
c001bbe7:	50                   	push   eax
c001bbe8:	e8 d6 a2 fe ff       	call   c0005ec3 <f_opendir>
c001bbed:	83 c4 10             	add    esp,0x10
c001bbf0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bbf7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001bbff:	74 07                	je     c001bc08 <FAT::openDir(char const*, void**)+0xa0>
c001bc01:	b8 01 00 00 00       	mov    eax,0x1
c001bc06:	eb 08                	jmp    c001bc10 <FAT::openDir(char const*, void**)+0xa8>
c001bc08:	b8 00 00 00 00       	mov    eax,0x0
c001bc0d:	8d 76 00             	lea    esi,[esi+0x0]
c001bc10:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bc16:	c3                   	ret    
c001bc17:	90                   	nop

c001bc18 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001bc18:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001bc1e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001bc26:	75 0c                	jne    c001bc34 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001bc28:	b8 04 00 00 00       	mov    eax,0x4
c001bc2d:	e9 d2 00 00 00       	jmp    c001bd04 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bc32:	66 90                	xchg   ax,ax
c001bc34:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001bc3c:	75 0a                	jne    c001bc48 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001bc3e:	b8 04 00 00 00       	mov    eax,0x4
c001bc43:	e9 bc 00 00 00       	jmp    c001bd04 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bc48:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001bc50:	75 0a                	jne    c001bc5c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001bc52:	b8 04 00 00 00       	mov    eax,0x4
c001bc57:	e9 a8 00 00 00       	jmp    c001bd04 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bc5c:	83 ec 08             	sub    esp,0x8
c001bc5f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bc66:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001bc6d:	50                   	push   eax
c001bc6e:	e8 cd 4a fe ff       	call   c0000740 <strcpy>
c001bc73:	83 c4 10             	add    esp,0x10
c001bc76:	83 ec 08             	sub    esp,0x8
c001bc79:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001bc80:	50                   	push   eax
c001bc81:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bc88:	e8 6b fd ff ff       	call   c001b9f8 <FAT::fixFilepath(char*)>
c001bc8d:	83 c4 10             	add    esp,0x10
c001bc90:	83 ec 08             	sub    esp,0x8
c001bc93:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bc97:	50                   	push   eax
c001bc98:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001bc9f:	50                   	push   eax
c001bca0:	e8 dd a3 fe ff       	call   c0006082 <f_stat>
c001bca5:	83 c4 10             	add    esp,0x10
c001bca8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001bcaf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001bcb6:	85 c0                	test   eax,eax
c001bcb8:	74 0a                	je     c001bcc4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001bcba:	83 f8 04             	cmp    eax,0x4
c001bcbd:	74 35                	je     c001bcf4 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001bcbf:	eb 3b                	jmp    c001bcfc <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001bcc1:	8d 76 00             	lea    esi,[esi+0x0]
c001bcc4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bcc8:	0f b6 c0             	movzx  eax,al
c001bccb:	83 e0 10             	and    eax,0x10
c001bcce:	0f 95 c2             	setne  dl
c001bcd1:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001bcd8:	88 10                	mov    BYTE PTR [eax],dl
c001bcda:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bcdd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bce1:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001bce8:	89 01                	mov    DWORD PTR [ecx],eax
c001bcea:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bced:	b8 00 00 00 00       	mov    eax,0x0
c001bcf2:	eb 10                	jmp    c001bd04 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bcf4:	b8 02 00 00 00       	mov    eax,0x2
c001bcf9:	eb 09                	jmp    c001bd04 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bcfb:	90                   	nop
c001bcfc:	b8 01 00 00 00       	mov    eax,0x1
c001bd01:	8d 76 00             	lea    esi,[esi+0x0]
c001bd04:	81 c4 2c 02 00 00    	add    esp,0x22c
c001bd0a:	c3                   	ret    
c001bd0b:	90                   	nop

c001bd0c <FAT::unlink(char const*)>:
c001bd0c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bd12:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bd1a:	75 08                	jne    c001bd24 <FAT::unlink(char const*)+0x18>
c001bd1c:	b8 04 00 00 00       	mov    eax,0x4
c001bd21:	eb 61                	jmp    c001bd84 <FAT::unlink(char const*)+0x78>
c001bd23:	90                   	nop
c001bd24:	83 ec 08             	sub    esp,0x8
c001bd27:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bd2e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bd32:	50                   	push   eax
c001bd33:	e8 08 4a fe ff       	call   c0000740 <strcpy>
c001bd38:	83 c4 10             	add    esp,0x10
c001bd3b:	83 ec 08             	sub    esp,0x8
c001bd3e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bd42:	50                   	push   eax
c001bd43:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bd4a:	e8 a9 fc ff ff       	call   c001b9f8 <FAT::fixFilepath(char*)>
c001bd4f:	83 c4 10             	add    esp,0x10
c001bd52:	83 ec 0c             	sub    esp,0xc
c001bd55:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bd59:	50                   	push   eax
c001bd5a:	e8 75 a6 fe ff       	call   c00063d4 <f_unlink>
c001bd5f:	83 c4 10             	add    esp,0x10
c001bd62:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bd69:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001bd70:	85 c0                	test   eax,eax
c001bd72:	75 08                	jne    c001bd7c <FAT::unlink(char const*)+0x70>
c001bd74:	b8 00 00 00 00       	mov    eax,0x0
c001bd79:	eb 09                	jmp    c001bd84 <FAT::unlink(char const*)+0x78>
c001bd7b:	90                   	nop
c001bd7c:	b8 01 00 00 00       	mov    eax,0x1
c001bd81:	8d 76 00             	lea    esi,[esi+0x0]
c001bd84:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bd8a:	c3                   	ret    
c001bd8b:	90                   	nop

c001bd8c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001bd8c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001bd92:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001bd99:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001bda0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001bda4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bda8:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001bdb0:	75 0a                	jne    c001bdbc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001bdb2:	b8 04 00 00 00       	mov    eax,0x4
c001bdb7:	e9 30 01 00 00       	jmp    c001beec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001bdbc:	83 ec 08             	sub    esp,0x8
c001bdbf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001bdc6:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bdca:	50                   	push   eax
c001bdcb:	e8 70 49 fe ff       	call   c0000740 <strcpy>
c001bdd0:	83 c4 10             	add    esp,0x10
c001bdd3:	83 ec 08             	sub    esp,0x8
c001bdd6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001bdda:	50                   	push   eax
c001bddb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001bde2:	e8 11 fc ff ff       	call   c001b9f8 <FAT::fixFilepath(char*)>
c001bde7:	83 c4 10             	add    esp,0x10
c001bdea:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001bdf2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001bdfa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bdff:	83 e0 01             	and    eax,0x1
c001be02:	74 08                	je     c001be0c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001be04:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001be0c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be11:	83 e0 02             	and    eax,0x2
c001be14:	74 0a                	je     c001be20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001be16:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001be1e:	66 90                	xchg   ax,ax
c001be20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be25:	83 e0 04             	and    eax,0x4
c001be28:	74 0a                	je     c001be34 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001be2a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001be32:	66 90                	xchg   ax,ax
c001be34:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be39:	83 e0 08             	and    eax,0x8
c001be3c:	74 0a                	je     c001be48 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001be3e:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001be46:	66 90                	xchg   ax,ax
c001be48:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001be4d:	83 e0 01             	and    eax,0x1
c001be50:	74 0a                	je     c001be5c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001be52:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001be5a:	66 90                	xchg   ax,ax
c001be5c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001be61:	83 e0 02             	and    eax,0x2
c001be64:	74 0a                	je     c001be70 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001be66:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001be6e:	66 90                	xchg   ax,ax
c001be70:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001be75:	83 e0 04             	and    eax,0x4
c001be78:	74 0a                	je     c001be84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001be7a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001be82:	66 90                	xchg   ax,ax
c001be84:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001be89:	83 e0 08             	and    eax,0x8
c001be8c:	74 0a                	je     c001be98 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001be8e:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001be96:	66 90                	xchg   ax,ax
c001be98:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001be9f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001bea6:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001beae:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001beb6:	83 ec 04             	sub    esp,0x4
c001beb9:	52                   	push   edx
c001beba:	50                   	push   eax
c001bebb:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bebf:	50                   	push   eax
c001bec0:	e8 b1 ab fe ff       	call   c0006a76 <f_chmod>
c001bec5:	83 c4 10             	add    esp,0x10
c001bec8:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001becf:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001bed6:	85 c0                	test   eax,eax
c001bed8:	75 0a                	jne    c001bee4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001beda:	b8 00 00 00 00       	mov    eax,0x0
c001bedf:	eb 0b                	jmp    c001beec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001bee1:	8d 76 00             	lea    esi,[esi+0x0]
c001bee4:	b8 01 00 00 00       	mov    eax,0x1
c001bee9:	8d 76 00             	lea    esi,[esi+0x0]
c001beec:	81 c4 2c 01 00 00    	add    esp,0x12c
c001bef2:	c3                   	ret    
c001bef3:	90                   	nop

c001bef4 <FAT::rename(char const*, char const*)>:
c001bef4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001befa:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001bf02:	74 0c                	je     c001bf10 <FAT::rename(char const*, char const*)+0x1c>
c001bf04:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001bf0c:	75 0e                	jne    c001bf1c <FAT::rename(char const*, char const*)+0x28>
c001bf0e:	66 90                	xchg   ax,ax
c001bf10:	b8 04 00 00 00       	mov    eax,0x4
c001bf15:	e9 9e 00 00 00       	jmp    c001bfb8 <FAT::rename(char const*, char const*)+0xc4>
c001bf1a:	66 90                	xchg   ax,ax
c001bf1c:	83 ec 08             	sub    esp,0x8
c001bf1f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bf26:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001bf2d:	50                   	push   eax
c001bf2e:	e8 0d 48 fe ff       	call   c0000740 <strcpy>
c001bf33:	83 c4 10             	add    esp,0x10
c001bf36:	83 ec 08             	sub    esp,0x8
c001bf39:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001bf40:	50                   	push   eax
c001bf41:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bf48:	e8 ab fa ff ff       	call   c001b9f8 <FAT::fixFilepath(char*)>
c001bf4d:	83 c4 10             	add    esp,0x10
c001bf50:	83 ec 08             	sub    esp,0x8
c001bf53:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001bf5a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bf5e:	50                   	push   eax
c001bf5f:	e8 dc 47 fe ff       	call   c0000740 <strcpy>
c001bf64:	83 c4 10             	add    esp,0x10
c001bf67:	83 ec 08             	sub    esp,0x8
c001bf6a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bf6e:	50                   	push   eax
c001bf6f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bf76:	e8 7d fa ff ff       	call   c001b9f8 <FAT::fixFilepath(char*)>
c001bf7b:	83 c4 10             	add    esp,0x10
c001bf7e:	83 ec 08             	sub    esp,0x8
c001bf81:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bf85:	50                   	push   eax
c001bf86:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001bf8d:	50                   	push   eax
c001bf8e:	e8 f0 a7 fe ff       	call   c0006783 <f_rename>
c001bf93:	83 c4 10             	add    esp,0x10
c001bf96:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001bf9d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001bfa4:	85 c0                	test   eax,eax
c001bfa6:	75 08                	jne    c001bfb0 <FAT::rename(char const*, char const*)+0xbc>
c001bfa8:	b8 00 00 00 00       	mov    eax,0x0
c001bfad:	eb 09                	jmp    c001bfb8 <FAT::rename(char const*, char const*)+0xc4>
c001bfaf:	90                   	nop
c001bfb0:	b8 01 00 00 00       	mov    eax,0x1
c001bfb5:	8d 76 00             	lea    esi,[esi+0x0]
c001bfb8:	81 c4 1c 02 00 00    	add    esp,0x21c
c001bfbe:	c3                   	ret    
c001bfbf:	90                   	nop

c001bfc0 <FAT::mkdir(char const*)>:
c001bfc0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bfc6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bfce:	75 08                	jne    c001bfd8 <FAT::mkdir(char const*)+0x18>
c001bfd0:	b8 04 00 00 00       	mov    eax,0x4
c001bfd5:	eb 61                	jmp    c001c038 <FAT::mkdir(char const*)+0x78>
c001bfd7:	90                   	nop
c001bfd8:	83 ec 08             	sub    esp,0x8
c001bfdb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bfe2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bfe6:	50                   	push   eax
c001bfe7:	e8 54 47 fe ff       	call   c0000740 <strcpy>
c001bfec:	83 c4 10             	add    esp,0x10
c001bfef:	83 ec 08             	sub    esp,0x8
c001bff2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bff6:	50                   	push   eax
c001bff7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bffe:	e8 f5 f9 ff ff       	call   c001b9f8 <FAT::fixFilepath(char*)>
c001c003:	83 c4 10             	add    esp,0x10
c001c006:	83 ec 0c             	sub    esp,0xc
c001c009:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c00d:	50                   	push   eax
c001c00e:	e8 44 a5 fe ff       	call   c0006557 <f_mkdir>
c001c013:	83 c4 10             	add    esp,0x10
c001c016:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c01d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c024:	85 c0                	test   eax,eax
c001c026:	75 08                	jne    c001c030 <FAT::mkdir(char const*)+0x70>
c001c028:	b8 00 00 00 00       	mov    eax,0x0
c001c02d:	eb 09                	jmp    c001c038 <FAT::mkdir(char const*)+0x78>
c001c02f:	90                   	nop
c001c030:	b8 01 00 00 00       	mov    eax,0x1
c001c035:	8d 76 00             	lea    esi,[esi+0x0]
c001c038:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c03e:	c3                   	ret    
c001c03f:	90                   	nop

c001c040 <FAT::exists(char const*)>:
c001c040:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c046:	83 ec 08             	sub    esp,0x8
c001c049:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c050:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c054:	50                   	push   eax
c001c055:	e8 e6 46 fe ff       	call   c0000740 <strcpy>
c001c05a:	83 c4 10             	add    esp,0x10
c001c05d:	83 ec 08             	sub    esp,0x8
c001c060:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c064:	50                   	push   eax
c001c065:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c06c:	e8 87 f9 ff ff       	call   c001b9f8 <FAT::fixFilepath(char*)>
c001c071:	83 c4 10             	add    esp,0x10
c001c074:	83 ec 08             	sub    esp,0x8
c001c077:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001c07e:	50                   	push   eax
c001c07f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c083:	50                   	push   eax
c001c084:	e8 f9 9f fe ff       	call   c0006082 <f_stat>
c001c089:	83 c4 10             	add    esp,0x10
c001c08c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c093:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c09a:	85 c0                	test   eax,eax
c001c09c:	75 06                	jne    c001c0a4 <FAT::exists(char const*)+0x64>
c001c09e:	b0 01                	mov    al,0x1
c001c0a0:	eb 06                	jmp    c001c0a8 <FAT::exists(char const*)+0x68>
c001c0a2:	66 90                	xchg   ax,ax
c001c0a4:	b0 00                	mov    al,0x0
c001c0a6:	66 90                	xchg   ax,ax
c001c0a8:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c0ae:	c3                   	ret    
c001c0af:	90                   	nop

c001c0b0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c0b0:	b8 08 00 00 00       	mov    eax,0x8
c001c0b5:	c3                   	ret    

c001c0b6 <ISO9660::seek(void*, unsigned long long)>:
c001c0b6:	53                   	push   ebx
c001c0b7:	b8 04 00 00 00       	mov    eax,0x4
c001c0bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c0c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c0c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c0c8:	85 d2                	test   edx,edx
c001c0ca:	74 17                	je     c001c0e3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c0cc:	89 c8                	mov    eax,ecx
c001c0ce:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001c0d1:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001c0d4:	b8 01 00 00 00       	mov    eax,0x1
c001c0d9:	73 08                	jae    c001c0e3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c0db:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001c0de:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c0e1:	31 c0                	xor    eax,eax
c001c0e3:	5b                   	pop    ebx
c001c0e4:	c3                   	ret    
c001c0e5:	90                   	nop

c001c0e6 <ISO9660::tell(void*, unsigned long long*)>:
c001c0e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c0ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0ee:	85 d2                	test   edx,edx
c001c0f0:	74 12                	je     c001c104 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c0f2:	85 c0                	test   eax,eax
c001c0f4:	74 0e                	je     c001c104 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c0f6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c0f9:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001c0fc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c0ff:	89 10                	mov    DWORD PTR [eax],edx
c001c101:	31 c0                	xor    eax,eax
c001c103:	c3                   	ret    
c001c104:	b8 04 00 00 00       	mov    eax,0x4
c001c109:	c3                   	ret    

c001c10a <ISO9660::getName()>:
c001c10a:	b8 38 64 02 c0       	mov    eax,0xc0026438
c001c10f:	c3                   	ret    

c001c110 <ISO9660::stat(void*, unsigned long long*)>:
c001c110:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c114:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c118:	85 d2                	test   edx,edx
c001c11a:	74 12                	je     c001c12e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c11c:	85 c0                	test   eax,eax
c001c11e:	74 0e                	je     c001c12e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c120:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001c123:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001c126:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c129:	89 10                	mov    DWORD PTR [eax],edx
c001c12b:	31 c0                	xor    eax,eax
c001c12d:	c3                   	ret    
c001c12e:	b8 04 00 00 00       	mov    eax,0x4
c001c133:	c3                   	ret    

c001c134 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001c134:	b8 01 00 00 00       	mov    eax,0x1
c001c139:	c3                   	ret    

c001c13a <ISO9660::unlink(char const*)>:
c001c13a:	b8 01 00 00 00       	mov    eax,0x1
c001c13f:	c3                   	ret    

c001c140 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001c140:	b8 01 00 00 00       	mov    eax,0x1
c001c145:	c3                   	ret    

c001c146 <ISO9660::rename(char const*, char const*)>:
c001c146:	b8 01 00 00 00       	mov    eax,0x1
c001c14b:	c3                   	ret    

c001c14c <ISO9660::mkdir(char const*)>:
c001c14c:	b8 01 00 00 00       	mov    eax,0x1
c001c151:	c3                   	ret    

c001c152 <ISO9660::close(void*)>:
c001c152:	83 ec 0c             	sub    esp,0xc
c001c155:	b8 04 00 00 00       	mov    eax,0x4
c001c15a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c15e:	85 d2                	test   edx,edx
c001c160:	74 0e                	je     c001c170 <ISO9660::close(void*)+0x1e>
c001c162:	83 ec 0c             	sub    esp,0xc
c001c165:	52                   	push   edx
c001c166:	e8 b4 d8 fe ff       	call   c0009a1f <free>
c001c16b:	83 c4 10             	add    esp,0x10
c001c16e:	31 c0                	xor    eax,eax
c001c170:	83 c4 0c             	add    esp,0xc
c001c173:	c3                   	ret    

c001c174 <ISO9660::closeDir(void*)>:
c001c174:	83 ec 0c             	sub    esp,0xc
c001c177:	b8 04 00 00 00       	mov    eax,0x4
c001c17c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c180:	85 d2                	test   edx,edx
c001c182:	74 0e                	je     c001c192 <ISO9660::closeDir(void*)+0x1e>
c001c184:	83 ec 0c             	sub    esp,0xc
c001c187:	52                   	push   edx
c001c188:	e8 92 d8 fe ff       	call   c0009a1f <free>
c001c18d:	83 c4 10             	add    esp,0x10
c001c190:	31 c0                	xor    eax,eax
c001c192:	83 c4 0c             	add    esp,0xc
c001c195:	c3                   	ret    

c001c196 <ISO9660::~ISO9660()>:
c001c196:	83 ec 0c             	sub    esp,0xc
c001c199:	ba 5c 64 02 c0       	mov    edx,0xc002645c
c001c19e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1a2:	89 10                	mov    DWORD PTR [eax],edx
c001c1a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1a8:	83 ec 0c             	sub    esp,0xc
c001c1ab:	50                   	push   eax
c001c1ac:	e8 89 0e ff ff       	call   c000d03a <Filesystem::~Filesystem()>
c001c1b1:	83 c4 10             	add    esp,0x10
c001c1b4:	90                   	nop
c001c1b5:	83 c4 0c             	add    esp,0xc
c001c1b8:	c3                   	ret    
c001c1b9:	90                   	nop

c001c1ba <ISO9660::~ISO9660()>:
c001c1ba:	83 ec 0c             	sub    esp,0xc
c001c1bd:	83 ec 0c             	sub    esp,0xc
c001c1c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1c4:	e8 cd ff ff ff       	call   c001c196 <ISO9660::~ISO9660()>
c001c1c9:	83 c4 10             	add    esp,0x10
c001c1cc:	83 ec 08             	sub    esp,0x8
c001c1cf:	6a 08                	push   0x8
c001c1d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1d5:	e8 44 0a ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c001c1da:	83 c4 10             	add    esp,0x10
c001c1dd:	83 c4 0c             	add    esp,0xc
c001c1e0:	c3                   	ret    

c001c1e1 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001c1e1:	55                   	push   ebp
c001c1e2:	31 c9                	xor    ecx,ecx
c001c1e4:	57                   	push   edi
c001c1e5:	56                   	push   esi
c001c1e6:	53                   	push   ebx
c001c1e7:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c1eb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c1ef:	89 eb                	mov    ebx,ebp
c001c1f1:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001c1f5:	39 ce                	cmp    esi,ecx
c001c1f7:	7e 17                	jle    c001c210 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001c1f9:	31 d2                	xor    edx,edx
c001c1fb:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001c1ff:	7d 13                	jge    c001c214 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001c201:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c205:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c208:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001c20b:	75 0d                	jne    c001c21a <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001c20d:	42                   	inc    edx
c001c20e:	eb eb                	jmp    c001c1fb <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001c210:	31 c0                	xor    eax,eax
c001c212:	eb 0a                	jmp    c001c21e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c214:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001c218:	eb 04                	jmp    c001c21e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c21a:	41                   	inc    ecx
c001c21b:	43                   	inc    ebx
c001c21c:	eb d7                	jmp    c001c1f5 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001c21e:	5b                   	pop    ebx
c001c21f:	5e                   	pop    esi
c001c220:	5f                   	pop    edi
c001c221:	5d                   	pop    ebp
c001c222:	c3                   	ret    

c001c223 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001c223:	57                   	push   edi
c001c224:	56                   	push   esi
c001c225:	53                   	push   ebx
c001c226:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c22a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c22e:	39 0d 60 97 02 c0    	cmp    DWORD PTR ds:0xc0029760,ecx
c001c234:	75 08                	jne    c001c23e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c001c236:	38 05 74 7a 02 c0    	cmp    BYTE PTR ds:0xc0027a74,al
c001c23c:	74 2b                	je     c001c269 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c001c23e:	83 ec 0c             	sub    esp,0xc
c001c241:	a2 74 7a 02 c0       	mov    ds:0xc0027a74,al
c001c246:	68 80 97 02 c0       	push   0xc0029780
c001c24b:	0f be c0             	movsx  eax,al
c001c24e:	6a 01                	push   0x1
c001c250:	89 0d 60 97 02 c0    	mov    DWORD PTR ds:0xc0029760,ecx
c001c256:	31 db                	xor    ebx,ebx
c001c258:	53                   	push   ebx
c001c259:	51                   	push   ecx
c001c25a:	ff 34 85 fc 84 02 c0 	push   DWORD PTR [eax*4-0x3ffd7b04]
c001c261:	e8 e4 42 ff ff       	call   c001054a <LogicalDisk::read(unsigned long long, int, void*)>
c001c266:	83 c4 20             	add    esp,0x20
c001c269:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c26d:	be 80 97 02 c0       	mov    esi,0xc0029780
c001c272:	b9 00 08 00 00       	mov    ecx,0x800
c001c277:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c279:	5b                   	pop    ebx
c001c27a:	5e                   	pop    esi
c001c27b:	5f                   	pop    edi
c001c27c:	c3                   	ret    
c001c27d:	90                   	nop

c001c27e <ISO9660::tryMount(LogicalDisk*, int)>:
c001c27e:	81 ec 10 08 00 00    	sub    esp,0x810
c001c284:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001c28b:	83 c0 41             	add    eax,0x41
c001c28e:	0f be c0             	movsx  eax,al
c001c291:	50                   	push   eax
c001c292:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c296:	50                   	push   eax
c001c297:	6a 10                	push   0x10
c001c299:	e8 85 ff ff ff       	call   c001c223 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c29e:	83 c4 10             	add    esp,0x10
c001c2a1:	31 c0                	xor    eax,eax
c001c2a3:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001c2a8:	75 1d                	jne    c001c2c7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001c2aa:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001c2af:	75 16                	jne    c001c2c7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001c2b1:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001c2b6:	75 0f                	jne    c001c2c7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001c2b8:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001c2bd:	75 08                	jne    c001c2c7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001c2bf:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001c2c4:	0f 94 c0             	sete   al
c001c2c7:	81 c4 0c 08 00 00    	add    esp,0x80c
c001c2cd:	c3                   	ret    

c001c2ce <ISO9660::read(void*, unsigned long, void*, int*)>:
c001c2ce:	55                   	push   ebp
c001c2cf:	57                   	push   edi
c001c2d0:	56                   	push   esi
c001c2d1:	53                   	push   ebx
c001c2d2:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001c2d8:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001c2df:	85 ed                	test   ebp,ebp
c001c2e1:	0f 84 da 01 00 00    	je     c001c4c1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c2e7:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001c2ef:	0f 84 cc 01 00 00    	je     c001c4c1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c2f5:	b8 01 00 00 00       	mov    eax,0x1
c001c2fa:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001c2fe:	0f 85 c2 01 00 00    	jne    c001c4c6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c304:	31 d2                	xor    edx,edx
c001c306:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001c30d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c310:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001c313:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c316:	89 04 24             	mov    DWORD PTR [esp],eax
c001c319:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c31d:	01 c8                	add    eax,ecx
c001c31f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c322:	11 da                	adc    edx,ebx
c001c324:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001c328:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c32c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c330:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c334:	19 d7                	sbb    edi,edx
c001c336:	72 11                	jb     c001c349 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001c338:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c33b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001c33f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c343:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c347:	eb 0c                	jmp    c001c355 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001c349:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001c34d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c351:	29 ce                	sub    esi,ecx
c001c353:	19 df                	sbb    edi,ebx
c001c355:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c358:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001c35b:	0f a4 c2 0b          	shld   edx,eax,0xb
c001c35f:	c1 e0 0b             	shl    eax,0xb
c001c362:	01 c8                	add    eax,ecx
c001c364:	11 da                	adc    edx,ebx
c001c366:	89 04 24             	mov    DWORD PTR [esp],eax
c001c369:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c36d:	51                   	push   ecx
c001c36e:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c372:	50                   	push   eax
c001c373:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001c377:	53                   	push   ebx
c001c378:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c37c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c380:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c384:	50                   	push   eax
c001c385:	e8 99 fe ff ff       	call   c001c223 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c38a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001c38d:	b8 00 08 00 00       	mov    eax,0x800
c001c392:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001c398:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001c39c:	29 d0                	sub    eax,edx
c001c39e:	83 c4 10             	add    esp,0x10
c001c3a1:	89 f9                	mov    ecx,edi
c001c3a3:	39 c6                	cmp    esi,eax
c001c3a5:	83 d9 00             	sbb    ecx,0x0
c001c3a8:	7d 1b                	jge    c001c3c5 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001c3aa:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001c3af:	75 12                	jne    c001c3c3 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001c3b1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c3b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c3be:	e9 fa 00 00 00       	jmp    c001c4bd <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001c3c3:	89 f0                	mov    eax,esi
c001c3c5:	01 d3                	add    ebx,edx
c001c3c7:	31 d2                	xor    edx,edx
c001c3c9:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c3cd:	39 c2                	cmp    edx,eax
c001c3cf:	7d 14                	jge    c001c3e5 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001c3d1:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001c3d8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c3dc:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001c3df:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001c3e2:	42                   	inc    edx
c001c3e3:	eb e8                	jmp    c001c3cd <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001c3e5:	89 c2                	mov    edx,eax
c001c3e7:	85 c0                	test   eax,eax
c001c3e9:	79 02                	jns    c001c3ed <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001c3eb:	31 d2                	xor    edx,edx
c001c3ed:	01 c2                	add    edx,eax
c001c3ef:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001c3f2:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001c3f9:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001c3fd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c401:	99                   	cdq    
c001c402:	01 c1                	add    ecx,eax
c001c404:	11 d3                	adc    ebx,edx
c001c406:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001c40a:	29 c6                	sub    esi,eax
c001c40c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001c410:	19 d7                	sbb    edi,edx
c001c412:	89 34 24             	mov    DWORD PTR [esp],esi
c001c415:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c419:	b8 ff 07 00 00       	mov    eax,0x7ff
c001c41e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001c421:	b8 00 00 00 00       	mov    eax,0x0
c001c426:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001c42a:	7d 43                	jge    c001c46f <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001c42c:	52                   	push   edx
c001c42d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c431:	50                   	push   eax
c001c432:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c436:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c43a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c43e:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c442:	50                   	push   eax
c001c443:	e8 db fd ff ff       	call   c001c223 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c448:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001c450:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001c455:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001c45d:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001c465:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001c46a:	83 c4 10             	add    esp,0x10
c001c46d:	eb aa                	jmp    c001c419 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001c46f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c473:	0b 04 24             	or     eax,DWORD PTR [esp]
c001c476:	74 2a                	je     c001c4a2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001c478:	50                   	push   eax
c001c479:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c47d:	50                   	push   eax
c001c47e:	8d 74 24 28          	lea    esi,[esp+0x28]
c001c482:	56                   	push   esi
c001c483:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c487:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c48b:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001c48f:	51                   	push   ecx
c001c490:	e8 8e fd ff ff       	call   c001c223 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c495:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c499:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c49d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c49f:	83 c4 10             	add    esp,0x10
c001c4a2:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c4a9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c4ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c4b1:	89 18                	mov    DWORD PTR [eax],ebx
c001c4b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4b7:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c4ba:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c4bd:	31 c0                	xor    eax,eax
c001c4bf:	eb 05                	jmp    c001c4c6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c4c1:	b8 04 00 00 00       	mov    eax,0x4
c001c4c6:	81 c4 2c 08 00 00    	add    esp,0x82c
c001c4cc:	5b                   	pop    ebx
c001c4cd:	5e                   	pop    esi
c001c4ce:	5f                   	pop    edi
c001c4cf:	5d                   	pop    ebp
c001c4d0:	c3                   	ret    
c001c4d1:	90                   	nop

c001c4d2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001c4d2:	55                   	push   ebp
c001c4d3:	57                   	push   edi
c001c4d4:	56                   	push   esi
c001c4d5:	53                   	push   ebx
c001c4d6:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001c4dc:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001c4e3:	85 ed                	test   ebp,ebp
c001c4e5:	0f 84 51 02 00 00    	je     c001c73c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c4eb:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001c4f3:	0f 84 43 02 00 00    	je     c001c73c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c4f9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c4fc:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001c4ff:	75 0a                	jne    c001c50b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001c501:	b8 07 00 00 00       	mov    eax,0x7
c001c506:	e9 36 02 00 00       	jmp    c001c741 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c50b:	50                   	push   eax
c001c50c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c510:	50                   	push   eax
c001c511:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c518:	53                   	push   ebx
c001c519:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c51c:	c1 e0 0b             	shl    eax,0xb
c001c51f:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001c522:	c1 e8 0b             	shr    eax,0xb
c001c525:	50                   	push   eax
c001c526:	e8 f8 fc ff ff       	call   c001c223 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c52b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c52e:	83 c4 10             	add    esp,0x10
c001c531:	89 c1                	mov    ecx,eax
c001c533:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001c536:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001c53c:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001c53f:	84 db                	test   bl,bl
c001c541:	0f 85 8b 00 00 00    	jne    c001c5d2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001c547:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001c54d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c550:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001c556:	29 c6                	sub    esi,eax
c001c558:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001c55c:	89 f3                	mov    ebx,esi
c001c55e:	89 f1                	mov    ecx,esi
c001c560:	c1 fb 1f             	sar    ebx,0x1f
c001c563:	01 f0                	add    eax,esi
c001c565:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c568:	11 da                	adc    edx,ebx
c001c56a:	89 04 24             	mov    DWORD PTR [esp],eax
c001c56d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c571:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c574:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c577:	89 d8                	mov    eax,ebx
c001c579:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001c57d:	ba 00 00 00 00       	mov    edx,0x0
c001c582:	19 f8                	sbb    eax,edi
c001c584:	b8 00 00 00 00       	mov    eax,0x0
c001c589:	73 08                	jae    c001c593 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001c58b:	89 f0                	mov    eax,esi
c001c58d:	89 fa                	mov    edx,edi
c001c58f:	29 c8                	sub    eax,ecx
c001c591:	19 da                	sbb    edx,ebx
c001c593:	89 d7                	mov    edi,edx
c001c595:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c598:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c59b:	09 c7                	or     edi,eax
c001c59d:	0f 84 5e ff ff ff    	je     c001c501 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001c5a3:	57                   	push   edi
c001c5a4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c5a8:	50                   	push   eax
c001c5a9:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c5b0:	53                   	push   ebx
c001c5b1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c5b4:	c1 e0 0b             	shl    eax,0xb
c001c5b7:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001c5bb:	c1 e8 0b             	shr    eax,0xb
c001c5be:	50                   	push   eax
c001c5bf:	e8 5f fc ff ff       	call   c001c223 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c5c4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c5c7:	83 c4 10             	add    esp,0x10
c001c5ca:	25 ff 07 00 00       	and    eax,0x7ff
c001c5cf:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001c5d2:	31 ff                	xor    edi,edi
c001c5d4:	56                   	push   esi
c001c5d5:	6a 28                	push   0x28
c001c5d7:	6a 00                	push   0x0
c001c5d9:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c5dd:	50                   	push   eax
c001c5de:	e8 a1 40 fe ff       	call   c0000684 <memset>
c001c5e3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c5e6:	25 ff 07 00 00       	and    eax,0x7ff
c001c5eb:	89 c6                	mov    esi,eax
c001c5ed:	83 c6 21             	add    esi,0x21
c001c5f0:	83 d7 00             	adc    edi,0x0
c001c5f3:	83 c4 10             	add    esp,0x10
c001c5f6:	31 c9                	xor    ecx,ecx
c001c5f8:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001c5ff:	83 f9 28             	cmp    ecx,0x28
c001c602:	88 04 24             	mov    BYTE PTR [esp],al
c001c605:	0f 94 c2             	sete   dl
c001c608:	88 d0                	mov    al,dl
c001c60a:	ba ff 07 00 00       	mov    edx,0x7ff
c001c60f:	39 f2                	cmp    edx,esi
c001c611:	ba 00 00 00 00       	mov    edx,0x0
c001c616:	19 fa                	sbb    edx,edi
c001c618:	0f 92 c2             	setb   dl
c001c61b:	09 c2                	or     edx,eax
c001c61d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001c621:	0f 94 c0             	sete   al
c001c624:	08 d0                	or     al,dl
c001c626:	75 16                	jne    c001c63e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c628:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001c62c:	74 10                	je     c001c63e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c62e:	8a 04 24             	mov    al,BYTE PTR [esp]
c001c631:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001c635:	41                   	inc    ecx
c001c636:	83 c6 01             	add    esi,0x1
c001c639:	83 d7 00             	adc    edi,0x0
c001c63c:	eb ba                	jmp    c001c5f8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001c63e:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001c645:	83 ec 0c             	sub    esp,0xc
c001c648:	8d 74 24 24          	lea    esi,[esp+0x24]
c001c64c:	56                   	push   esi
c001c64d:	e8 4e 40 fe ff       	call   c00006a0 <strlen>
c001c652:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001c659:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c65d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001c665:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c668:	5a                   	pop    edx
c001c669:	25 ff 07 00 00       	and    eax,0x7ff
c001c66e:	59                   	pop    ecx
c001c66f:	01 f8                	add    eax,edi
c001c671:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001c677:	83 e0 02             	and    eax,0x2
c001c67a:	3c 01                	cmp    al,0x1
c001c67c:	19 c0                	sbb    eax,eax
c001c67e:	83 c0 02             	add    eax,0x2
c001c681:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c685:	56                   	push   esi
c001c686:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c68a:	50                   	push   eax
c001c68b:	e8 b0 40 fe ff       	call   c0000740 <strcpy>
c001c690:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001c694:	83 c4 10             	add    esp,0x10
c001c697:	84 c0                	test   al,al
c001c699:	75 21                	jne    c001c6bc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001c69b:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001c6a3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c6ab:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c6b3:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001c6ba:	eb 28                	jmp    c001c6e4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c6bc:	fe c8                	dec    al
c001c6be:	75 24                	jne    c001c6e4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c6c0:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001c6c8:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c6d0:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c6d8:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001c6df:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001c6e4:	8d 74 24 40          	lea    esi,[esp+0x40]
c001c6e8:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001c6ef:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001c6f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c6f8:	0f b6 f3             	movzx  esi,bl
c001c6fb:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001c702:	31 db                	xor    ebx,ebx
c001c704:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c70a:	89 df                	mov    edi,ebx
c001c70c:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001c70f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c712:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001c715:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001c718:	39 c6                	cmp    esi,eax
c001c71a:	19 d7                	sbb    edi,edx
c001c71c:	72 10                	jb     c001c72e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001c71e:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001c725:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001c72c:	eb 0a                	jmp    c001c738 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001c72e:	29 f0                	sub    eax,esi
c001c730:	19 da                	sbb    edx,ebx
c001c732:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c735:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c738:	31 c0                	xor    eax,eax
c001c73a:	eb 05                	jmp    c001c741 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c73c:	b8 04 00 00 00       	mov    eax,0x4
c001c741:	81 c4 5c 09 00 00    	add    esp,0x95c
c001c747:	5b                   	pop    ebx
c001c748:	5e                   	pop    esi
c001c749:	5f                   	pop    edi
c001c74a:	5d                   	pop    ebp
c001c74b:	c3                   	ret    

c001c74c <readRoot(unsigned int*, unsigned int*, char)>:
c001c74c:	57                   	push   edi
c001c74d:	56                   	push   esi
c001c74e:	81 ec 38 08 00 00    	sub    esp,0x838
c001c754:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001c75c:	50                   	push   eax
c001c75d:	8d 44 24 38          	lea    eax,[esp+0x38]
c001c761:	50                   	push   eax
c001c762:	6a 10                	push   0x10
c001c764:	e8 ba fa ff ff       	call   c001c223 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c769:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001c770:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001c774:	b9 22 00 00 00       	mov    ecx,0x22
c001c779:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c77b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c782:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c786:	89 10                	mov    DWORD PTR [eax],edx
c001c788:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001c78f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c793:	89 10                	mov    DWORD PTR [eax],edx
c001c795:	81 c4 44 08 00 00    	add    esp,0x844
c001c79b:	b0 01                	mov    al,0x1
c001c79d:	5e                   	pop    esi
c001c79e:	5f                   	pop    edi
c001c79f:	c3                   	ret    

c001c7a0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001c7a0:	55                   	push   ebp
c001c7a1:	57                   	push   edi
c001c7a2:	56                   	push   esi
c001c7a3:	53                   	push   ebx
c001c7a4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c7aa:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001c7b1:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001c7b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c7bc:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001c7c0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c7c4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c7c8:	75 03                	jne    c001c7cd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c7ca:	83 c3 02             	add    ebx,0x2
c001c7cd:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001c7d0:	75 03                	jne    c001c7d5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001c7d2:	43                   	inc    ebx
c001c7d3:	eb f8                	jmp    c001c7cd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c7d5:	51                   	push   ecx
c001c7d6:	68 00 01 00 00       	push   0x100
c001c7db:	6a 00                	push   0x0
c001c7dd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c7e1:	50                   	push   eax
c001c7e2:	e8 9d 3e fe ff       	call   c0000684 <memset>
c001c7e7:	83 c4 10             	add    esp,0x10
c001c7ea:	31 d2                	xor    edx,edx
c001c7ec:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c7ef:	84 c0                	test   al,al
c001c7f1:	74 21                	je     c001c814 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001c7f3:	3c 2f                	cmp    al,0x2f
c001c7f5:	75 0b                	jne    c001c802 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001c7f7:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001c7fb:	bd 01 00 00 00       	mov    ebp,0x1
c001c800:	eb 14                	jmp    c001c816 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001c802:	8d 48 9f             	lea    ecx,[eax-0x61]
c001c805:	80 f9 19             	cmp    cl,0x19
c001c808:	77 03                	ja     c001c80d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c80a:	83 e8 20             	sub    eax,0x20
c001c80d:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001c811:	42                   	inc    edx
c001c812:	eb d8                	jmp    c001c7ec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001c814:	31 ed                	xor    ebp,ebp
c001c816:	83 ec 0c             	sub    esp,0xc
c001c819:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c820:	e8 ea d1 fe ff       	call   c0009a0f <malloc>
c001c825:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001c82c:	89 c6                	mov    esi,eax
c001c82e:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001c834:	c1 ef 0b             	shr    edi,0xb
c001c837:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001c83e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001c842:	83 c4 10             	add    esp,0x10
c001c845:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001c84a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c84e:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001c855:	74 28                	je     c001c87f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001c857:	52                   	push   edx
c001c858:	57                   	push   edi
c001c859:	50                   	push   eax
c001c85a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c85e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001c865:	e8 b9 f9 ff ff       	call   c001c223 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c86a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c86e:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001c875:	05 00 08 00 00       	add    eax,0x800
c001c87a:	83 c4 10             	add    esp,0x10
c001c87d:	eb cb                	jmp    c001c84a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001c87f:	83 ec 0c             	sub    esp,0xc
c001c882:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c886:	57                   	push   edi
c001c887:	e8 14 3e fe ff       	call   c00006a0 <strlen>
c001c88c:	50                   	push   eax
c001c88d:	57                   	push   edi
c001c88e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001c895:	56                   	push   esi
c001c896:	e8 46 f9 ff ff       	call   c001c1e1 <__memmem(unsigned char*, int, unsigned char*, int)>
c001c89b:	83 c4 20             	add    esp,0x20
c001c89e:	85 c0                	test   eax,eax
c001c8a0:	75 13                	jne    c001c8b5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001c8a2:	83 ec 0c             	sub    esp,0xc
c001c8a5:	56                   	push   esi
c001c8a6:	e8 74 d1 fe ff       	call   c0009a1f <free>
c001c8ab:	83 c4 10             	add    esp,0x10
c001c8ae:	31 c0                	xor    eax,eax
c001c8b0:	e9 b3 00 00 00       	jmp    c001c968 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c8b5:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001c8b9:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001c8bd:	c1 e7 08             	shl    edi,0x8
c001c8c0:	c1 e2 10             	shl    edx,0x10
c001c8c3:	09 d7                	or     edi,edx
c001c8c5:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001c8c9:	09 d7                	or     edi,edx
c001c8cb:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001c8cf:	c1 e2 18             	shl    edx,0x18
c001c8d2:	09 d7                	or     edi,edx
c001c8d4:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001c8d8:	89 d1                	mov    ecx,edx
c001c8da:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001c8de:	c1 e1 08             	shl    ecx,0x8
c001c8e1:	c1 e2 10             	shl    edx,0x10
c001c8e4:	09 ca                	or     edx,ecx
c001c8e6:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001c8ea:	09 ca                	or     edx,ecx
c001c8ec:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001c8f0:	c1 e1 18             	shl    ecx,0x18
c001c8f3:	09 ca                	or     edx,ecx
c001c8f5:	89 e9                	mov    ecx,ebp
c001c8f7:	84 c9                	test   cl,cl
c001c8f9:	74 3c                	je     c001c937 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001c8fb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c8ff:	83 ec 0c             	sub    esp,0xc
c001c902:	56                   	push   esi
c001c903:	e8 17 d1 fe ff       	call   c0009a1f <free>
c001c908:	83 c4 0c             	add    esp,0xc
c001c90b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c912:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c917:	50                   	push   eax
c001c918:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c91f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c926:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c92a:	52                   	push   edx
c001c92b:	57                   	push   edi
c001c92c:	53                   	push   ebx
c001c92d:	e8 6e fe ff ff       	call   c001c7a0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c932:	83 c4 20             	add    esp,0x20
c001c935:	eb 31                	jmp    c001c968 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c937:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001c93a:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001c941:	d0 e8                	shr    al,1
c001c943:	89 3b                	mov    DWORD PTR [ebx],edi
c001c945:	83 e0 01             	and    eax,0x1
c001c948:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c94f:	83 ec 0c             	sub    esp,0xc
c001c952:	89 13                	mov    DWORD PTR [ebx],edx
c001c954:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c95b:	89 03                	mov    DWORD PTR [ebx],eax
c001c95d:	56                   	push   esi
c001c95e:	e8 bc d0 fe ff       	call   c0009a1f <free>
c001c963:	83 c4 10             	add    esp,0x10
c001c966:	b0 01                	mov    al,0x1
c001c968:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c96e:	5b                   	pop    ebx
c001c96f:	5e                   	pop    esi
c001c970:	5f                   	pop    edi
c001c971:	5d                   	pop    ebp
c001c972:	c3                   	ret    

c001c973 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c973:	55                   	push   ebp
c001c974:	57                   	push   edi
c001c975:	56                   	push   esi
c001c976:	53                   	push   ebx
c001c977:	83 ec 20             	sub    esp,0x20
c001c97a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c97e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c982:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c986:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c98e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c996:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001c99b:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001c9a1:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001c9a7:	57                   	push   edi
c001c9a8:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c9ac:	50                   	push   eax
c001c9ad:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c9b1:	50                   	push   eax
c001c9b2:	e8 95 fd ff ff       	call   c001c74c <readRoot(unsigned int*, unsigned int*, char)>
c001c9b7:	5a                   	pop    edx
c001c9b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c9bc:	e8 df 3c fe ff       	call   c00006a0 <strlen>
c001c9c1:	83 c4 10             	add    esp,0x10
c001c9c4:	83 f8 03             	cmp    eax,0x3
c001c9c7:	77 17                	ja     c001c9e0 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c9c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9cd:	89 03                	mov    DWORD PTR [ebx],eax
c001c9cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9d3:	89 06                	mov    DWORD PTR [esi],eax
c001c9d5:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001c9dc:	b0 01                	mov    al,0x1
c001c9de:	eb 19                	jmp    c001c9f9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001c9e0:	50                   	push   eax
c001c9e1:	55                   	push   ebp
c001c9e2:	57                   	push   edi
c001c9e3:	56                   	push   esi
c001c9e4:	53                   	push   ebx
c001c9e5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c9e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c9ed:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c9f1:	e8 aa fd ff ff       	call   c001c7a0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c9f6:	83 c4 20             	add    esp,0x20
c001c9f9:	83 c4 1c             	add    esp,0x1c
c001c9fc:	5b                   	pop    ebx
c001c9fd:	5e                   	pop    esi
c001c9fe:	5f                   	pop    edi
c001c9ff:	5d                   	pop    ebp
c001ca00:	c3                   	ret    
c001ca01:	90                   	nop

c001ca02 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001ca02:	57                   	push   edi
c001ca03:	56                   	push   esi
c001ca04:	53                   	push   ebx
c001ca05:	83 ec 10             	sub    esp,0x10
c001ca08:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ca0c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ca10:	85 ff                	test   edi,edi
c001ca12:	0f 84 8b 00 00 00    	je     c001caa3 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001ca18:	85 f6                	test   esi,esi
c001ca1a:	0f 84 83 00 00 00    	je     c001caa3 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001ca20:	b8 03 00 00 00       	mov    eax,0x3
c001ca25:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001ca2a:	75 7c                	jne    c001caa8 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001ca2c:	83 ec 0c             	sub    esp,0xc
c001ca2f:	6a 1c                	push   0x1c
c001ca31:	e8 d9 cf fe ff       	call   c0009a0f <malloc>
c001ca36:	89 07                	mov    DWORD PTR [edi],eax
c001ca38:	89 c3                	mov    ebx,eax
c001ca3a:	58                   	pop    eax
c001ca3b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ca3f:	50                   	push   eax
c001ca40:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ca43:	50                   	push   eax
c001ca44:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ca48:	50                   	push   eax
c001ca49:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ca4d:	50                   	push   eax
c001ca4e:	56                   	push   esi
c001ca4f:	e8 1f ff ff ff       	call   c001c973 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ca54:	83 c4 20             	add    esp,0x20
c001ca57:	84 c0                	test   al,al
c001ca59:	74 07                	je     c001ca62 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001ca5b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ca60:	74 0b                	je     c001ca6d <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001ca62:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ca66:	b8 01 00 00 00       	mov    eax,0x1
c001ca6b:	eb 3b                	jmp    c001caa8 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001ca6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca71:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ca75:	89 03                	mov    DWORD PTR [ebx],eax
c001ca77:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ca7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca82:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001ca89:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ca90:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ca93:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ca9a:	8a 06                	mov    al,BYTE PTR [esi]
c001ca9c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001ca9f:	31 c0                	xor    eax,eax
c001caa1:	eb 05                	jmp    c001caa8 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001caa3:	b8 04 00 00 00       	mov    eax,0x4
c001caa8:	83 c4 10             	add    esp,0x10
c001caab:	5b                   	pop    ebx
c001caac:	5e                   	pop    esi
c001caad:	5f                   	pop    edi
c001caae:	c3                   	ret    
c001caaf:	90                   	nop

c001cab0 <ISO9660::exists(char const*)>:
c001cab0:	83 ec 28             	sub    esp,0x28
c001cab3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cab7:	8d 54 24 18          	lea    edx,[esp+0x18]
c001cabb:	52                   	push   edx
c001cabc:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001cabf:	52                   	push   edx
c001cac0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001cac4:	52                   	push   edx
c001cac5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001cac9:	52                   	push   edx
c001caca:	50                   	push   eax
c001cacb:	e8 a3 fe ff ff       	call   c001c973 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cad0:	83 c4 3c             	add    esp,0x3c
c001cad3:	c3                   	ret    

c001cad4 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001cad4:	56                   	push   esi
c001cad5:	53                   	push   ebx
c001cad6:	83 ec 14             	sub    esp,0x14
c001cad9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001cadd:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cae1:	85 db                	test   ebx,ebx
c001cae3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cae7:	0f 94 c2             	sete   dl
c001caea:	85 f6                	test   esi,esi
c001caec:	0f 94 c0             	sete   al
c001caef:	08 c2                	or     dl,al
c001caf1:	75 68                	jne    c001cb5b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001caf3:	85 c9                	test   ecx,ecx
c001caf5:	74 64                	je     c001cb5b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001caf7:	83 ec 0c             	sub    esp,0xc
c001cafa:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001cafd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cb01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001cb07:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cb0e:	50                   	push   eax
c001cb0f:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001cb12:	50                   	push   eax
c001cb13:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cb17:	50                   	push   eax
c001cb18:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cb1c:	50                   	push   eax
c001cb1d:	51                   	push   ecx
c001cb1e:	e8 50 fe ff ff       	call   c001c973 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cb23:	83 c4 20             	add    esp,0x20
c001cb26:	ba 01 00 00 00       	mov    edx,0x1
c001cb2b:	84 c0                	test   al,al
c001cb2d:	74 31                	je     c001cb60 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cb2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb33:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cb3a:	89 03                	mov    DWORD PTR [ebx],eax
c001cb3c:	ba 00 00 00 00       	mov    edx,0x0
c001cb41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb45:	85 c0                	test   eax,eax
c001cb47:	0f 95 06             	setne  BYTE PTR [esi]
c001cb4a:	74 14                	je     c001cb60 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cb4c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001cb52:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cb59:	eb 05                	jmp    c001cb60 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cb5b:	ba 04 00 00 00       	mov    edx,0x4
c001cb60:	83 c4 14             	add    esp,0x14
c001cb63:	89 d0                	mov    eax,edx
c001cb65:	5b                   	pop    ebx
c001cb66:	5e                   	pop    esi
c001cb67:	c3                   	ret    

c001cb68 <ISO9660::openDir(char const*, void**)>:
c001cb68:	57                   	push   edi
c001cb69:	56                   	push   esi
c001cb6a:	53                   	push   ebx
c001cb6b:	83 ec 10             	sub    esp,0x10
c001cb6e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cb72:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cb76:	85 ff                	test   edi,edi
c001cb78:	74 7b                	je     c001cbf5 <ISO9660::openDir(char const*, void**)+0x8d>
c001cb7a:	85 f6                	test   esi,esi
c001cb7c:	74 77                	je     c001cbf5 <ISO9660::openDir(char const*, void**)+0x8d>
c001cb7e:	83 ec 0c             	sub    esp,0xc
c001cb81:	6a 1c                	push   0x1c
c001cb83:	e8 87 ce fe ff       	call   c0009a0f <malloc>
c001cb88:	89 07                	mov    DWORD PTR [edi],eax
c001cb8a:	89 c3                	mov    ebx,eax
c001cb8c:	58                   	pop    eax
c001cb8d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cb91:	50                   	push   eax
c001cb92:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001cb95:	50                   	push   eax
c001cb96:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cb9a:	50                   	push   eax
c001cb9b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cb9f:	50                   	push   eax
c001cba0:	56                   	push   esi
c001cba1:	e8 cd fd ff ff       	call   c001c973 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cba6:	83 c4 20             	add    esp,0x20
c001cba9:	84 c0                	test   al,al
c001cbab:	74 07                	je     c001cbb4 <ISO9660::openDir(char const*, void**)+0x4c>
c001cbad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cbb2:	75 0b                	jne    c001cbbf <ISO9660::openDir(char const*, void**)+0x57>
c001cbb4:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001cbb8:	b8 01 00 00 00       	mov    eax,0x1
c001cbbd:	eb 3b                	jmp    c001cbfa <ISO9660::openDir(char const*, void**)+0x92>
c001cbbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbc3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001cbc7:	89 03                	mov    DWORD PTR [ebx],eax
c001cbc9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001cbd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cbd4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001cbdb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cbe2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cbe5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cbec:	8a 06                	mov    al,BYTE PTR [esi]
c001cbee:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001cbf1:	31 c0                	xor    eax,eax
c001cbf3:	eb 05                	jmp    c001cbfa <ISO9660::openDir(char const*, void**)+0x92>
c001cbf5:	b8 04 00 00 00       	mov    eax,0x4
c001cbfa:	83 c4 10             	add    esp,0x10
c001cbfd:	5b                   	pop    ebx
c001cbfe:	5e                   	pop    esi
c001cbff:	5f                   	pop    edi
c001cc00:	c3                   	ret    
c001cc01:	90                   	nop

c001cc02 <ISO9660::ISO9660()>:
c001cc02:	83 ec 0c             	sub    esp,0xc
c001cc05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc09:	83 ec 0c             	sub    esp,0xc
c001cc0c:	50                   	push   eax
c001cc0d:	e8 04 04 ff ff       	call   c000d016 <Filesystem::Filesystem()>
c001cc12:	83 c4 10             	add    esp,0x10
c001cc15:	ba 5c 64 02 c0       	mov    edx,0xc002645c
c001cc1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc1e:	89 10                	mov    DWORD PTR [eax],edx
c001cc20:	90                   	nop
c001cc21:	83 c4 0c             	add    esp,0xc
c001cc24:	c3                   	ret    
c001cc25:	90                   	nop

c001cc26 <SoundCard::beginPlayback()>:
c001cc26:	c7 44 24 04 bc 64 02 c0 	mov    DWORD PTR [esp+0x4],0xc00264bc
c001cc2e:	e9 88 7d ff ff       	jmp    c00149bb <Krnl::panic(char const*)>
c001cc33:	90                   	nop

c001cc34 <SoundCard::stopPlayback()>:
c001cc34:	c7 44 24 04 f0 64 02 c0 	mov    DWORD PTR [esp+0x4],0xc00264f0
c001cc3c:	e9 7a 7d ff ff       	jmp    c00149bb <Krnl::panic(char const*)>
c001cc41:	90                   	nop

c001cc42 <SoundCard::SoundCard(char const*)>:
c001cc42:	83 ec 1c             	sub    esp,0x1c
c001cc45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc49:	83 ec 08             	sub    esp,0x8
c001cc4c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc50:	50                   	push   eax
c001cc51:	e8 ec 17 ff ff       	call   c000e442 <Device::Device(char const*)>
c001cc56:	83 c4 10             	add    esp,0x10
c001cc59:	ba 88 65 02 c0       	mov    edx,0xc0026588
c001cc5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc62:	89 10                	mov    DWORD PTR [eax],edx
c001cc64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc68:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cc6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc73:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001cc7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc81:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001cc8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc8f:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001cc99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc9d:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001cca7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ccaf:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ccb4:	7f 19                	jg     c001cccf <SoundCard::SoundCard(char const*)+0x8d>
c001ccb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ccba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ccbe:	83 c2 54             	add    edx,0x54
c001ccc1:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001ccc9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001cccd:	eb e0                	jmp    c001ccaf <SoundCard::SoundCard(char const*)+0x6d>
c001cccf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ccd3:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ccda:	90                   	nop
c001ccdb:	83 c4 1c             	add    esp,0x1c
c001ccde:	c3                   	ret    
c001ccdf:	90                   	nop

c001cce0 <SoundCard::~SoundCard()>:
c001cce0:	83 ec 0c             	sub    esp,0xc
c001cce3:	ba 88 65 02 c0       	mov    edx,0xc0026588
c001cce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccec:	89 10                	mov    DWORD PTR [eax],edx
c001ccee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccf2:	83 ec 0c             	sub    esp,0xc
c001ccf5:	50                   	push   eax
c001ccf6:	e8 11 14 ff ff       	call   c000e10c <Device::~Device()>
c001ccfb:	83 c4 10             	add    esp,0x10
c001ccfe:	90                   	nop
c001ccff:	83 c4 0c             	add    esp,0xc
c001cd02:	c3                   	ret    
c001cd03:	90                   	nop

c001cd04 <SoundCard::~SoundCard()>:
c001cd04:	83 ec 0c             	sub    esp,0xc
c001cd07:	83 ec 0c             	sub    esp,0xc
c001cd0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd0e:	e8 cd ff ff ff       	call   c001cce0 <SoundCard::~SoundCard()>
c001cd13:	83 c4 10             	add    esp,0x10
c001cd16:	83 ec 08             	sub    esp,0x8
c001cd19:	68 e8 01 00 00       	push   0x1e8
c001cd1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd22:	e8 f7 fe fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c001cd27:	83 c4 10             	add    esp,0x10
c001cd2a:	83 c4 0c             	add    esp,0xc
c001cd2d:	c3                   	ret    

c001cd2e <SoundCard::configureRates(int, int, int)>:
c001cd2e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cd32:	31 c0                	xor    eax,eax
c001cd34:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001cd3b:	75 20                	jne    c001cd5d <SoundCard::configureRates(int, int, int)+0x2f>
c001cd3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd41:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001cd47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd4b:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001cd51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd55:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001cd5b:	b0 01                	mov    al,0x1
c001cd5d:	c3                   	ret    

c001cd5e <SoundCard::getSamples16(int, short*)>:
c001cd5e:	55                   	push   ebp
c001cd5f:	57                   	push   edi
c001cd60:	31 ff                	xor    edi,edi
c001cd62:	56                   	push   esi
c001cd63:	53                   	push   ebx
c001cd64:	31 db                	xor    ebx,ebx
c001cd66:	83 ec 18             	sub    esp,0x18
c001cd69:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cd6d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001cd71:	68 23 65 02 c0       	push   0xc0026523
c001cd76:	e8 84 ff fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001cd7b:	83 c4 0c             	add    esp,0xc
c001cd7e:	8d 04 36             	lea    eax,[esi+esi*1]
c001cd81:	50                   	push   eax
c001cd82:	6a 00                	push   0x0
c001cd84:	55                   	push   ebp
c001cd85:	e8 fa 38 fe ff       	call   c0000684 <memset>
c001cd8a:	83 c4 10             	add    esp,0x10
c001cd8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd91:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001cd98:	85 c0                	test   eax,eax
c001cd9a:	74 1b                	je     c001cdb7 <SoundCard::getSamples16(int, short*)+0x59>
c001cd9c:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001cda0:	75 15                	jne    c001cdb7 <SoundCard::getSamples16(int, short*)+0x59>
c001cda2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cda6:	55                   	push   ebp
c001cda7:	56                   	push   esi
c001cda8:	50                   	push   eax
c001cda9:	e8 5a 03 00 00       	call   c001d108 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001cdae:	83 c4 10             	add    esp,0x10
c001cdb1:	39 c7                	cmp    edi,eax
c001cdb3:	7d 02                	jge    c001cdb7 <SoundCard::getSamples16(int, short*)+0x59>
c001cdb5:	89 c7                	mov    edi,eax
c001cdb7:	43                   	inc    ebx
c001cdb8:	83 fb 20             	cmp    ebx,0x20
c001cdbb:	75 d0                	jne    c001cd8d <SoundCard::getSamples16(int, short*)+0x2f>
c001cdbd:	83 c4 0c             	add    esp,0xc
c001cdc0:	89 f8                	mov    eax,edi
c001cdc2:	5b                   	pop    ebx
c001cdc3:	5e                   	pop    esi
c001cdc4:	5f                   	pop    edi
c001cdc5:	5d                   	pop    ebp
c001cdc6:	c3                   	ret    
c001cdc7:	90                   	nop

c001cdc8 <SoundCard::getSamples32(int, int*)>:
c001cdc8:	55                   	push   ebp
c001cdc9:	57                   	push   edi
c001cdca:	31 ff                	xor    edi,edi
c001cdcc:	56                   	push   esi
c001cdcd:	31 f6                	xor    esi,esi
c001cdcf:	53                   	push   ebx
c001cdd0:	83 ec 10             	sub    esp,0x10
c001cdd3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cdd7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001cddb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001cddf:	c1 e0 02             	shl    eax,0x2
c001cde2:	50                   	push   eax
c001cde3:	6a 00                	push   0x0
c001cde5:	55                   	push   ebp
c001cde6:	e8 99 38 fe ff       	call   c0000684 <memset>
c001cdeb:	83 c4 10             	add    esp,0x10
c001cdee:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001cdf5:	85 c0                	test   eax,eax
c001cdf7:	74 1b                	je     c001ce14 <SoundCard::getSamples32(int, int*)+0x4c>
c001cdf9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001cdfd:	75 15                	jne    c001ce14 <SoundCard::getSamples32(int, int*)+0x4c>
c001cdff:	53                   	push   ebx
c001ce00:	55                   	push   ebp
c001ce01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce05:	50                   	push   eax
c001ce06:	e8 f9 03 00 00       	call   c001d204 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ce0b:	83 c4 10             	add    esp,0x10
c001ce0e:	39 c6                	cmp    esi,eax
c001ce10:	7d 02                	jge    c001ce14 <SoundCard::getSamples32(int, int*)+0x4c>
c001ce12:	89 c6                	mov    esi,eax
c001ce14:	47                   	inc    edi
c001ce15:	83 ff 20             	cmp    edi,0x20
c001ce18:	75 d4                	jne    c001cdee <SoundCard::getSamples32(int, int*)+0x26>
c001ce1a:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001ce20:	85 f6                	test   esi,esi
c001ce22:	75 0f                	jne    c001ce33 <SoundCard::getSamples32(int, int*)+0x6b>
c001ce24:	84 c0                	test   al,al
c001ce26:	74 1b                	je     c001ce43 <SoundCard::getSamples32(int, int*)+0x7b>
c001ce28:	83 ec 0c             	sub    esp,0xc
c001ce2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce2d:	53                   	push   ebx
c001ce2e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ce31:	eb 0d                	jmp    c001ce40 <SoundCard::getSamples32(int, int*)+0x78>
c001ce33:	84 c0                	test   al,al
c001ce35:	75 0c                	jne    c001ce43 <SoundCard::getSamples32(int, int*)+0x7b>
c001ce37:	83 ec 0c             	sub    esp,0xc
c001ce3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce3c:	53                   	push   ebx
c001ce3d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ce40:	83 c4 10             	add    esp,0x10
c001ce43:	83 c4 0c             	add    esp,0xc
c001ce46:	89 f0                	mov    eax,esi
c001ce48:	5b                   	pop    ebx
c001ce49:	5e                   	pop    esi
c001ce4a:	5f                   	pop    edi
c001ce4b:	5d                   	pop    ebp
c001ce4c:	c3                   	ret    
c001ce4d:	90                   	nop

c001ce4e <SoundCard::addChannel(SoundPort*)>:
c001ce4e:	56                   	push   esi
c001ce4f:	53                   	push   ebx
c001ce50:	53                   	push   ebx
c001ce51:	31 db                	xor    ebx,ebx
c001ce53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ce57:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001ce5f:	74 27                	je     c001ce88 <SoundCard::addChannel(SoundPort*)+0x3a>
c001ce61:	43                   	inc    ebx
c001ce62:	83 fb 20             	cmp    ebx,0x20
c001ce65:	75 f0                	jne    c001ce57 <SoundCard::addChannel(SoundPort*)+0x9>
c001ce67:	83 ec 0c             	sub    esp,0xc
c001ce6a:	83 cb ff             	or     ebx,0xffffffff
c001ce6d:	68 49 65 02 c0       	push   0xc0026549
c001ce72:	e8 88 fe fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001ce77:	c7 04 24 42 65 02 c0 	mov    DWORD PTR [esp],0xc0026542
c001ce7e:	e8 38 7b ff ff       	call   c00149bb <Krnl::panic(char const*)>
c001ce83:	83 c4 10             	add    esp,0x10
c001ce86:	eb 1b                	jmp    c001cea3 <SoundCard::addChannel(SoundPort*)+0x55>
c001ce88:	51                   	push   ecx
c001ce89:	51                   	push   ecx
c001ce8a:	53                   	push   ebx
c001ce8b:	68 61 65 02 c0       	push   0xc0026561
c001ce90:	e8 6a fe fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001ce95:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ce99:	83 c4 10             	add    esp,0x10
c001ce9c:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001cea3:	89 d8                	mov    eax,ebx
c001cea5:	5a                   	pop    edx
c001cea6:	5b                   	pop    ebx
c001cea7:	5e                   	pop    esi
c001cea8:	c3                   	ret    
c001cea9:	90                   	nop

c001ceaa <SoundCard::removeChannel(int)>:
c001ceaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ceae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ceb2:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001cebd:	c3                   	ret    
c001cebe:	66 90                	xchg   ax,ax

c001cec0 <SoundPort::SoundPort(int, int, int, int)>:
c001cec0:	83 ec 0c             	sub    esp,0xc
c001cec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cec7:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ced2:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ced6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceda:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cede:	89 10                	mov    DWORD PTR [eax],edx
c001cee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cee4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cee8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ceeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cef3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cef6:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001cefb:	75 13                	jne    c001cf10 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001cefd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf01:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf03:	05 a0 0f 00 00       	add    eax,0xfa0
c001cf08:	01 c0                	add    eax,eax
c001cf0a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cf0e:	66 90                	xchg   ax,ax
c001cf10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf14:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cf18:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001cf1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf1f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001cf26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf2a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001cf2d:	c1 e0 02             	shl    eax,0x2
c001cf30:	83 ec 0c             	sub    esp,0xc
c001cf33:	50                   	push   eax
c001cf34:	e8 d6 ca fe ff       	call   c0009a0f <malloc>
c001cf39:	83 c4 10             	add    esp,0x10
c001cf3c:	89 c2                	mov    edx,eax
c001cf3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf42:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001cf45:	90                   	nop
c001cf46:	83 c4 0c             	add    esp,0xc
c001cf49:	c3                   	ret    
c001cf4a:	66 90                	xchg   ax,ax

c001cf4c <SoundPort::~SoundPort()>:
c001cf4c:	83 ec 0c             	sub    esp,0xc
c001cf4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf53:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cf56:	85 c0                	test   eax,eax
c001cf58:	74 1e                	je     c001cf78 <SoundPort::~SoundPort()+0x2c>
c001cf5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf5e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cf61:	83 ec 0c             	sub    esp,0xc
c001cf64:	50                   	push   eax
c001cf65:	e8 b5 ca fe ff       	call   c0009a1f <free>
c001cf6a:	83 c4 10             	add    esp,0x10
c001cf6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf71:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cf78:	90                   	nop
c001cf79:	83 c4 0c             	add    esp,0xc
c001cf7c:	c3                   	ret    
c001cf7d:	90                   	nop
c001cf7e:	66 90                	xchg   ax,ax

c001cf80 <SoundPort::unpause()>:
c001cf80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf84:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001cf88:	c3                   	ret    
c001cf89:	90                   	nop
c001cf8a:	66 90                	xchg   ax,ax

c001cf8c <SoundPort::pause()>:
c001cf8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf90:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001cf94:	c3                   	ret    
c001cf95:	90                   	nop
c001cf96:	66 90                	xchg   ax,ax

c001cf98 <SoundPort::getBufferUsed()>:
c001cf98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf9c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001cf9f:	c3                   	ret    

c001cfa0 <SoundPort::getBufferSize()>:
c001cfa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cfa4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001cfa7:	c3                   	ret    

c001cfa8 <SoundPort::buffer16(short*, int)>:
c001cfa8:	55                   	push   ebp
c001cfa9:	57                   	push   edi
c001cfaa:	56                   	push   esi
c001cfab:	53                   	push   ebx
c001cfac:	83 ec 1c             	sub    esp,0x1c
c001cfaf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cfb3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001cfb7:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001cfba:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001cfbd:	0f 84 85 00 00 00    	je     c001d048 <SoundPort::buffer16(short*, int)+0xa0>
c001cfc3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001cfc7:	85 c9                	test   ecx,ecx
c001cfc9:	7e 7d                	jle    c001d048 <SoundPort::buffer16(short*, int)+0xa0>
c001cfcb:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001cfcf:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001cfd2:	c1 e1 0f             	shl    ecx,0xf
c001cfd5:	8d 70 01             	lea    esi,[eax+0x1]
c001cfd8:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001cfdb:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001cfde:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cfe1:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cfe4:	74 6e                	je     c001d054 <SoundPort::buffer16(short*, int)+0xac>
c001cfe6:	31 f6                	xor    esi,esi
c001cfe8:	eb 22                	jmp    c001d00c <SoundPort::buffer16(short*, int)+0x64>
c001cfea:	66 90                	xchg   ax,ax
c001cfec:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001cff1:	8d 79 01             	lea    edi,[ecx+0x1]
c001cff4:	c1 e3 0f             	shl    ebx,0xf
c001cff7:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001cffa:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001cffd:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001d000:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d003:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d006:	74 1c                	je     c001d024 <SoundPort::buffer16(short*, int)+0x7c>
c001d008:	89 c6                	mov    esi,eax
c001d00a:	66 90                	xchg   ax,ax
c001d00c:	8d 46 01             	lea    eax,[esi+0x1]
c001d00f:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001d013:	75 d7                	jne    c001cfec <SoundPort::buffer16(short*, int)+0x44>
c001d015:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d019:	83 c4 1c             	add    esp,0x1c
c001d01c:	5b                   	pop    ebx
c001d01d:	5e                   	pop    esi
c001d01e:	5f                   	pop    edi
c001d01f:	5d                   	pop    ebp
c001d020:	c3                   	ret    
c001d021:	8d 76 00             	lea    esi,[esi+0x0]
c001d024:	8d 46 02             	lea    eax,[esi+0x2]
c001d027:	90                   	nop
c001d028:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d02c:	83 ec 0c             	sub    esp,0xc
c001d02f:	68 b4 65 02 c0       	push   0xc00265b4
c001d034:	e8 c6 fc fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001d039:	83 c4 10             	add    esp,0x10
c001d03c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d040:	83 c4 1c             	add    esp,0x1c
c001d043:	5b                   	pop    ebx
c001d044:	5e                   	pop    esi
c001d045:	5f                   	pop    edi
c001d046:	5d                   	pop    ebp
c001d047:	c3                   	ret    
c001d048:	83 c4 1c             	add    esp,0x1c
c001d04b:	31 c0                	xor    eax,eax
c001d04d:	5b                   	pop    ebx
c001d04e:	5e                   	pop    esi
c001d04f:	5f                   	pop    edi
c001d050:	5d                   	pop    ebp
c001d051:	c3                   	ret    
c001d052:	66 90                	xchg   ax,ax
c001d054:	b8 01 00 00 00       	mov    eax,0x1
c001d059:	eb cd                	jmp    c001d028 <SoundPort::buffer16(short*, int)+0x80>
c001d05b:	90                   	nop

c001d05c <SoundPort::buffer32(int*, int)>:
c001d05c:	55                   	push   ebp
c001d05d:	57                   	push   edi
c001d05e:	56                   	push   esi
c001d05f:	53                   	push   ebx
c001d060:	83 ec 1c             	sub    esp,0x1c
c001d063:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d067:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d06b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d06e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d072:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d076:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d079:	74 79                	je     c001d0f4 <SoundPort::buffer32(int*, int)+0x98>
c001d07b:	85 c0                	test   eax,eax
c001d07d:	7e 75                	jle    c001d0f4 <SoundPort::buffer32(int*, int)+0x98>
c001d07f:	8d 71 01             	lea    esi,[ecx+0x1]
c001d082:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d085:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d088:	8b 37                	mov    esi,DWORD PTR [edi]
c001d08a:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d08d:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d090:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d093:	74 6b                	je     c001d100 <SoundPort::buffer32(int*, int)+0xa4>
c001d095:	31 f6                	xor    esi,esi
c001d097:	eb 1f                	jmp    c001d0b8 <SoundPort::buffer32(int*, int)+0x5c>
c001d099:	8d 76 00             	lea    esi,[esi+0x0]
c001d09c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d09f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d0a2:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d0a5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d0a8:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d0ac:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d0af:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d0b2:	74 1c                	je     c001d0d0 <SoundPort::buffer32(int*, int)+0x74>
c001d0b4:	89 de                	mov    esi,ebx
c001d0b6:	66 90                	xchg   ax,ax
c001d0b8:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d0bb:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001d0bf:	75 db                	jne    c001d09c <SoundPort::buffer32(int*, int)+0x40>
c001d0c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0c5:	83 c4 1c             	add    esp,0x1c
c001d0c8:	5b                   	pop    ebx
c001d0c9:	5e                   	pop    esi
c001d0ca:	5f                   	pop    edi
c001d0cb:	5d                   	pop    ebp
c001d0cc:	c3                   	ret    
c001d0cd:	8d 76 00             	lea    esi,[esi+0x0]
c001d0d0:	8d 46 02             	lea    eax,[esi+0x2]
c001d0d3:	90                   	nop
c001d0d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d0d8:	83 ec 0c             	sub    esp,0xc
c001d0db:	68 cf 65 02 c0       	push   0xc00265cf
c001d0e0:	e8 1a fc fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001d0e5:	83 c4 10             	add    esp,0x10
c001d0e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0ec:	83 c4 1c             	add    esp,0x1c
c001d0ef:	5b                   	pop    ebx
c001d0f0:	5e                   	pop    esi
c001d0f1:	5f                   	pop    edi
c001d0f2:	5d                   	pop    ebp
c001d0f3:	c3                   	ret    
c001d0f4:	83 c4 1c             	add    esp,0x1c
c001d0f7:	31 c0                	xor    eax,eax
c001d0f9:	5b                   	pop    ebx
c001d0fa:	5e                   	pop    esi
c001d0fb:	5f                   	pop    edi
c001d0fc:	5d                   	pop    ebp
c001d0fd:	c3                   	ret    
c001d0fe:	66 90                	xchg   ax,ax
c001d100:	b8 01 00 00 00       	mov    eax,0x1
c001d105:	eb cd                	jmp    c001d0d4 <SoundPort::buffer32(int*, int)+0x78>
c001d107:	90                   	nop

c001d108 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d108:	57                   	push   edi
c001d109:	56                   	push   esi
c001d10a:	53                   	push   ebx
c001d10b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d10f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001d113:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001d119:	39 03                	cmp    DWORD PTR [ebx],eax
c001d11b:	74 13                	je     c001d130 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001d11d:	83 ec 0c             	sub    esp,0xc
c001d120:	68 24 66 02 c0       	push   0xc0026624
c001d125:	e8 91 78 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c001d12a:	83 c4 10             	add    esp,0x10
c001d12d:	8d 76 00             	lea    esi,[esi+0x0]
c001d130:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001d136:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d139:	74 11                	je     c001d14c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001d13b:	83 ec 0c             	sub    esp,0xc
c001d13e:	68 ea 65 02 c0       	push   0xc00265ea
c001d143:	e8 73 78 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c001d148:	83 c4 10             	add    esp,0x10
c001d14b:	90                   	nop
c001d14c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001d152:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d155:	74 11                	je     c001d168 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001d157:	83 ec 0c             	sub    esp,0xc
c001d15a:	68 ea 65 02 c0       	push   0xc00265ea
c001d15f:	e8 57 78 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c001d164:	83 c4 10             	add    esp,0x10
c001d167:	90                   	nop
c001d168:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d16b:	89 c6                	mov    esi,eax
c001d16d:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001d171:	7e 05                	jle    c001d178 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001d173:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d177:	90                   	nop
c001d178:	85 f6                	test   esi,esi
c001d17a:	7e 30                	jle    c001d1ac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001d17c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d180:	8d 3c 36             	lea    edi,[esi+esi*1]
c001d183:	31 c9                	xor    ecx,ecx
c001d185:	01 d7                	add    edi,edx
c001d187:	90                   	nop
c001d188:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d18b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001d18e:	85 c0                	test   eax,eax
c001d190:	79 06                	jns    c001d198 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001d192:	05 ff 7f 00 00       	add    eax,0x7fff
c001d197:	90                   	nop
c001d198:	c1 f8 0f             	sar    eax,0xf
c001d19b:	83 c1 04             	add    ecx,0x4
c001d19e:	66 01 02             	add    WORD PTR [edx],ax
c001d1a1:	83 c2 02             	add    edx,0x2
c001d1a4:	39 d7                	cmp    edi,edx
c001d1a6:	75 e0                	jne    c001d188 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001d1a8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d1ab:	90                   	nop
c001d1ac:	56                   	push   esi
c001d1ad:	89 c2                	mov    edx,eax
c001d1af:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001d1b6:	29 f2                	sub    edx,esi
c001d1b8:	52                   	push   edx
c001d1b9:	50                   	push   eax
c001d1ba:	68 44 66 02 c0       	push   0xc0026644
c001d1bf:	e8 3b fb fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001d1c4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d1c7:	50                   	push   eax
c001d1c8:	01 f8                	add    eax,edi
c001d1ca:	50                   	push   eax
c001d1cb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d1ce:	29 f0                	sub    eax,esi
c001d1d0:	c1 e0 02             	shl    eax,0x2
c001d1d3:	50                   	push   eax
c001d1d4:	68 74 66 02 c0       	push   0xc0026674
c001d1d9:	e8 21 fb fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001d1de:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d1e1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d1e4:	83 c4 1c             	add    esp,0x1c
c001d1e7:	01 d7                	add    edi,edx
c001d1e9:	29 f0                	sub    eax,esi
c001d1eb:	c1 e0 02             	shl    eax,0x2
c001d1ee:	50                   	push   eax
c001d1ef:	57                   	push   edi
c001d1f0:	52                   	push   edx
c001d1f1:	e8 c6 33 fe ff       	call   c00005bc <memmove>
c001d1f6:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001d1f9:	83 c4 10             	add    esp,0x10
c001d1fc:	89 f0                	mov    eax,esi
c001d1fe:	5b                   	pop    ebx
c001d1ff:	5e                   	pop    esi
c001d200:	5f                   	pop    edi
c001d201:	c3                   	ret    
c001d202:	66 90                	xchg   ax,ax

c001d204 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d204:	57                   	push   edi
c001d205:	56                   	push   esi
c001d206:	53                   	push   ebx
c001d207:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d20b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d20f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d213:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001d219:	39 06                	cmp    DWORD PTR [esi],eax
c001d21b:	74 13                	je     c001d230 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001d21d:	83 ec 0c             	sub    esp,0xc
c001d220:	68 98 66 02 c0       	push   0xc0026698
c001d225:	e8 91 77 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c001d22a:	83 c4 10             	add    esp,0x10
c001d22d:	8d 76 00             	lea    esi,[esi+0x0]
c001d230:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001d236:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001d239:	74 11                	je     c001d24c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001d23b:	83 ec 0c             	sub    esp,0xc
c001d23e:	68 06 66 02 c0       	push   0xc0026606
c001d243:	e8 73 77 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c001d248:	83 c4 10             	add    esp,0x10
c001d24b:	90                   	nop
c001d24c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001d252:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001d255:	74 11                	je     c001d268 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001d257:	83 ec 0c             	sub    esp,0xc
c001d25a:	68 06 66 02 c0       	push   0xc0026606
c001d25f:	e8 57 77 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c001d264:	83 c4 10             	add    esp,0x10
c001d267:	90                   	nop
c001d268:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001d26b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001d26f:	7e 07                	jle    c001d278 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001d271:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d275:	8d 76 00             	lea    esi,[esi+0x0]
c001d278:	85 ff                	test   edi,edi
c001d27a:	7e 1c                	jle    c001d298 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001d27c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001d283:	31 c0                	xor    eax,eax
c001d285:	8d 76 00             	lea    esi,[esi+0x0]
c001d288:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d28b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001d28e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001d291:	83 c0 04             	add    eax,0x4
c001d294:	39 c1                	cmp    ecx,eax
c001d296:	75 f0                	jne    c001d288 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001d298:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d29b:	50                   	push   eax
c001d29c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d29f:	29 f8                	sub    eax,edi
c001d2a1:	c1 e0 02             	shl    eax,0x2
c001d2a4:	50                   	push   eax
c001d2a5:	8d 04 ba             	lea    eax,[edx+edi*4]
c001d2a8:	50                   	push   eax
c001d2a9:	52                   	push   edx
c001d2aa:	e8 0d 33 fe ff       	call   c00005bc <memmove>
c001d2af:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001d2b2:	83 c4 10             	add    esp,0x10
c001d2b5:	89 f8                	mov    eax,edi
c001d2b7:	5b                   	pop    ebx
c001d2b8:	5e                   	pop    esi
c001d2b9:	5f                   	pop    edi
c001d2ba:	c3                   	ret    
c001d2bb:	90                   	nop

c001d2bc <PCI::open(int, int, void*)>:
c001d2bc:	83 ec 18             	sub    esp,0x18
c001d2bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d2c3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d2c7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d2cd:	8b 10                	mov    edx,DWORD PTR [eax]
c001d2cf:	50                   	push   eax
c001d2d0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d2d3:	31 c0                	xor    eax,eax
c001d2d5:	83 c4 1c             	add    esp,0x1c
c001d2d8:	c3                   	ret    
c001d2d9:	90                   	nop

c001d2da <PCI::close(int, int, void*)>:
c001d2da:	31 c0                	xor    eax,eax
c001d2dc:	c3                   	ret    
c001d2dd:	90                   	nop

c001d2de <PCI::PCI()>:
c001d2de:	83 ec 0c             	sub    esp,0xc
c001d2e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2e5:	83 ec 08             	sub    esp,0x8
c001d2e8:	68 b7 66 02 c0       	push   0xc00266b7
c001d2ed:	50                   	push   eax
c001d2ee:	e8 b1 07 ff ff       	call   c000daa4 <Bus::Bus(char const*)>
c001d2f3:	83 c4 10             	add    esp,0x10
c001d2f6:	ba 8c 68 02 c0       	mov    edx,0xc002688c
c001d2fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2ff:	89 10                	mov    DWORD PTR [eax],edx
c001d301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d305:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d30f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d313:	a3 80 9f 02 c0       	mov    ds:0xc0029f80,eax
c001d318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d31c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d322:	0f b6 d0             	movzx  edx,al
c001d325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d329:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d334:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d33a:	0f b6 d0             	movzx  edx,al
c001d33d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d341:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001d346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d34a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d350:	8d 50 01             	lea    edx,[eax+0x1]
c001d353:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d357:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d35d:	0f b6 d0             	movzx  edx,al
c001d360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d364:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d368:	83 c9 c0             	or     ecx,0xffffffc0
c001d36b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d36f:	90                   	nop
c001d370:	83 c4 0c             	add    esp,0xc
c001d373:	c3                   	ret    

c001d374 <PCI::readBAR8(unsigned int, int)>:
c001d374:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d378:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d37c:	f6 c2 01             	test   dl,0x1
c001d37f:	74 07                	je     c001d388 <PCI::readBAR8(unsigned int, int)+0x14>
c001d381:	83 e2 fc             	and    edx,0xfffffffc
c001d384:	01 c2                	add    edx,eax
c001d386:	ec                   	in     al,dx
c001d387:	c3                   	ret    
c001d388:	83 e2 f0             	and    edx,0xfffffff0
c001d38b:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001d38e:	c3                   	ret    
c001d38f:	90                   	nop

c001d390 <PCI::readBAR16(unsigned int, int)>:
c001d390:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d394:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d398:	f6 c2 01             	test   dl,0x1
c001d39b:	74 08                	je     c001d3a5 <PCI::readBAR16(unsigned int, int)+0x15>
c001d39d:	83 e2 fc             	and    edx,0xfffffffc
c001d3a0:	01 c2                	add    edx,eax
c001d3a2:	66 ed                	in     ax,dx
c001d3a4:	c3                   	ret    
c001d3a5:	83 e2 f0             	and    edx,0xfffffff0
c001d3a8:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001d3ac:	c3                   	ret    
c001d3ad:	90                   	nop

c001d3ae <PCI::readBAR32(unsigned int, int)>:
c001d3ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d3b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3b6:	f6 c2 01             	test   dl,0x1
c001d3b9:	74 07                	je     c001d3c2 <PCI::readBAR32(unsigned int, int)+0x14>
c001d3bb:	83 e2 fc             	and    edx,0xfffffffc
c001d3be:	01 c2                	add    edx,eax
c001d3c0:	ed                   	in     eax,dx
c001d3c1:	c3                   	ret    
c001d3c2:	83 e2 f0             	and    edx,0xfffffff0
c001d3c5:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001d3c8:	c3                   	ret    
c001d3c9:	90                   	nop

c001d3ca <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001d3ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d3ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3d2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d3d6:	f6 c2 01             	test   dl,0x1
c001d3d9:	74 07                	je     c001d3e2 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001d3db:	83 e2 fc             	and    edx,0xfffffffc
c001d3de:	01 ca                	add    edx,ecx
c001d3e0:	ee                   	out    dx,al
c001d3e1:	c3                   	ret    
c001d3e2:	83 e2 f0             	and    edx,0xfffffff0
c001d3e5:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001d3e8:	c3                   	ret    
c001d3e9:	90                   	nop

c001d3ea <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001d3ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d3ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d3f6:	f6 c2 01             	test   dl,0x1
c001d3f9:	74 08                	je     c001d403 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001d3fb:	83 e2 fc             	and    edx,0xfffffffc
c001d3fe:	01 ca                	add    edx,ecx
c001d400:	66 ef                	out    dx,ax
c001d402:	c3                   	ret    
c001d403:	83 e2 f0             	and    edx,0xfffffff0
c001d406:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001d40a:	c3                   	ret    
c001d40b:	90                   	nop

c001d40c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001d40c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d410:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d414:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d418:	f6 c2 01             	test   dl,0x1
c001d41b:	74 07                	je     c001d424 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001d41d:	83 e2 fc             	and    edx,0xfffffffc
c001d420:	01 ca                	add    edx,ecx
c001d422:	ef                   	out    dx,eax
c001d423:	c3                   	ret    
c001d424:	83 e2 f0             	and    edx,0xfffffff0
c001d427:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001d42a:	c3                   	ret    
c001d42b:	90                   	nop

c001d42c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d42c:	55                   	push   ebp
c001d42d:	57                   	push   edi
c001d42e:	56                   	push   esi
c001d42f:	53                   	push   ebx
c001d430:	83 ec 0c             	sub    esp,0xc
c001d433:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d437:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001d43b:	89 f0                	mov    eax,esi
c001d43d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d441:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d445:	3c 07                	cmp    al,0x7
c001d447:	76 10                	jbe    c001d459 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001d449:	83 ec 0c             	sub    esp,0xc
c001d44c:	68 bf 66 02 c0       	push   0xc00266bf
c001d451:	e8 65 75 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c001d456:	83 c4 10             	add    esp,0x10
c001d459:	80 fb 0f             	cmp    bl,0xf
c001d45c:	76 10                	jbe    c001d46e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001d45e:	83 ec 0c             	sub    esp,0xc
c001d461:	68 ef 66 02 c0       	push   0xc00266ef
c001d466:	e8 50 75 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c001d46b:	83 c4 10             	add    esp,0x10
c001d46e:	8d 04 36             	lea    eax,[esi+esi*1]
c001d471:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d476:	83 c8 f0             	or     eax,0xfffffff0
c001d479:	ee                   	out    dx,al
c001d47a:	ba fa 0c 00 00       	mov    edx,0xcfa
c001d47f:	89 e8                	mov    eax,ebp
c001d481:	ee                   	out    dx,al
c001d482:	83 c4 0c             	add    esp,0xc
c001d485:	89 d8                	mov    eax,ebx
c001d487:	66 81 e7 fc 00       	and    di,0xfc
c001d48c:	5b                   	pop    ebx
c001d48d:	c1 e0 08             	shl    eax,0x8
c001d490:	5e                   	pop    esi
c001d491:	09 f8                	or     eax,edi
c001d493:	5f                   	pop    edi
c001d494:	66 0d 00 c0          	or     ax,0xc000
c001d498:	5d                   	pop    ebp
c001d499:	c3                   	ret    

c001d49a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d49a:	57                   	push   edi
c001d49b:	56                   	push   esi
c001d49c:	53                   	push   ebx
c001d49d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d4a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4a5:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001d4ab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d4af:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d4b3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d4b7:	83 ff 01             	cmp    edi,0x1
c001d4ba:	75 3e                	jne    c001d4fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001d4bc:	89 de                	mov    esi,ebx
c001d4be:	0f b6 c0             	movzx  eax,al
c001d4c1:	81 e6 fc 00 00 00    	and    esi,0xfc
c001d4c7:	c1 e0 10             	shl    eax,0x10
c001d4ca:	0f b6 c9             	movzx  ecx,cl
c001d4cd:	09 f0                	or     eax,esi
c001d4cf:	c1 e1 08             	shl    ecx,0x8
c001d4d2:	0f b6 d2             	movzx  edx,dl
c001d4d5:	09 c8                	or     eax,ecx
c001d4d7:	c1 e2 0b             	shl    edx,0xb
c001d4da:	09 d0                	or     eax,edx
c001d4dc:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d4e1:	0d 00 00 00 80       	or     eax,0x80000000
c001d4e6:	ef                   	out    dx,eax
c001d4e7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d4ec:	ed                   	in     eax,dx
c001d4ed:	83 e3 02             	and    ebx,0x2
c001d4f0:	0f b6 cb             	movzx  ecx,bl
c001d4f3:	c1 e1 03             	shl    ecx,0x3
c001d4f6:	d3 e8                	shr    eax,cl
c001d4f8:	eb 43                	jmp    c001d53d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d4fa:	83 ff 02             	cmp    edi,0x2
c001d4fd:	75 2c                	jne    c001d52b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001d4ff:	83 ec 0c             	sub    esp,0xc
c001d502:	0f b6 c9             	movzx  ecx,cl
c001d505:	0f b6 d2             	movzx  edx,dl
c001d508:	0f b6 fb             	movzx  edi,bl
c001d50b:	0f b6 c0             	movzx  eax,al
c001d50e:	57                   	push   edi
c001d50f:	51                   	push   ecx
c001d510:	52                   	push   edx
c001d511:	50                   	push   eax
c001d512:	56                   	push   esi
c001d513:	e8 14 ff ff ff       	call   c001d42c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d518:	89 c2                	mov    edx,eax
c001d51a:	ed                   	in     eax,dx
c001d51b:	83 e3 02             	and    ebx,0x2
c001d51e:	83 c4 20             	add    esp,0x20
c001d521:	0f b6 cb             	movzx  ecx,bl
c001d524:	c1 e1 03             	shl    ecx,0x3
c001d527:	d3 e8                	shr    eax,cl
c001d529:	eb 12                	jmp    c001d53d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d52b:	83 ec 0c             	sub    esp,0xc
c001d52e:	68 1f 67 02 c0       	push   0xc002671f
c001d533:	e8 83 74 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c001d538:	83 c4 10             	add    esp,0x10
c001d53b:	31 c0                	xor    eax,eax
c001d53d:	5b                   	pop    ebx
c001d53e:	5e                   	pop    esi
c001d53f:	5f                   	pop    edi
c001d540:	c3                   	ret    
c001d541:	90                   	nop

c001d542 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d542:	83 ec 18             	sub    esp,0x18
c001d545:	6a 00                	push   0x0
c001d547:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d54c:	50                   	push   eax
c001d54d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d552:	50                   	push   eax
c001d553:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d558:	50                   	push   eax
c001d559:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d55d:	e8 38 ff ff ff       	call   c001d49a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d562:	83 c4 2c             	add    esp,0x2c
c001d565:	c3                   	ret    

c001d566 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d566:	83 ec 18             	sub    esp,0x18
c001d569:	6a 0e                	push   0xe
c001d56b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d570:	50                   	push   eax
c001d571:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d576:	50                   	push   eax
c001d577:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d57c:	50                   	push   eax
c001d57d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d581:	e8 14 ff ff ff       	call   c001d49a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d586:	83 c4 2c             	add    esp,0x2c
c001d589:	0f b6 c0             	movzx  eax,al
c001d58c:	c3                   	ret    
c001d58d:	90                   	nop

c001d58e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d58e:	55                   	push   ebp
c001d58f:	57                   	push   edi
c001d590:	56                   	push   esi
c001d591:	53                   	push   ebx
c001d592:	83 ec 18             	sub    esp,0x18
c001d595:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001d59a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001d59f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001d5a4:	6a 0a                	push   0xa
c001d5a6:	56                   	push   esi
c001d5a7:	55                   	push   ebp
c001d5a8:	57                   	push   edi
c001d5a9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d5ad:	e8 e8 fe ff ff       	call   c001d49a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d5b2:	83 c4 14             	add    esp,0x14
c001d5b5:	89 c3                	mov    ebx,eax
c001d5b7:	6a 0a                	push   0xa
c001d5b9:	0f b6 db             	movzx  ebx,bl
c001d5bc:	56                   	push   esi
c001d5bd:	55                   	push   ebp
c001d5be:	57                   	push   edi
c001d5bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d5c3:	e8 d2 fe ff ff       	call   c001d49a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d5c8:	83 c4 2c             	add    esp,0x2c
c001d5cb:	25 00 ff 00 00       	and    eax,0xff00
c001d5d0:	09 d8                	or     eax,ebx
c001d5d2:	5b                   	pop    ebx
c001d5d3:	5e                   	pop    esi
c001d5d4:	5f                   	pop    edi
c001d5d5:	5d                   	pop    ebp
c001d5d6:	c3                   	ret    
c001d5d7:	90                   	nop

c001d5d8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d5d8:	83 ec 18             	sub    esp,0x18
c001d5db:	6a 08                	push   0x8
c001d5dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d5e2:	50                   	push   eax
c001d5e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d5e8:	50                   	push   eax
c001d5e9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d5ee:	50                   	push   eax
c001d5ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d5f3:	e8 a2 fe ff ff       	call   c001d49a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d5f8:	83 c4 2c             	add    esp,0x2c
c001d5fb:	0f b6 c4             	movzx  eax,ah
c001d5fe:	c3                   	ret    
c001d5ff:	90                   	nop

c001d600 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d600:	83 ec 18             	sub    esp,0x18
c001d603:	6a 08                	push   0x8
c001d605:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d60a:	50                   	push   eax
c001d60b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d610:	50                   	push   eax
c001d611:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d616:	50                   	push   eax
c001d617:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d61b:	e8 7a fe ff ff       	call   c001d49a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d620:	83 c4 2c             	add    esp,0x2c
c001d623:	c3                   	ret    

c001d624 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d624:	83 ec 18             	sub    esp,0x18
c001d627:	6a 3c                	push   0x3c
c001d629:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d62e:	50                   	push   eax
c001d62f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d634:	50                   	push   eax
c001d635:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d63a:	50                   	push   eax
c001d63b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d63f:	e8 56 fe ff ff       	call   c001d49a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d644:	83 c4 2c             	add    esp,0x2c
c001d647:	c3                   	ret    

c001d648 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d648:	83 ec 18             	sub    esp,0x18
c001d64b:	6a 18                	push   0x18
c001d64d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d652:	50                   	push   eax
c001d653:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d658:	50                   	push   eax
c001d659:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d65e:	50                   	push   eax
c001d65f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d663:	e8 32 fe ff ff       	call   c001d49a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d668:	83 c4 2c             	add    esp,0x2c
c001d66b:	0f b6 c4             	movzx  eax,ah
c001d66e:	c3                   	ret    
c001d66f:	90                   	nop

c001d670 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d670:	55                   	push   ebp
c001d671:	57                   	push   edi
c001d672:	56                   	push   esi
c001d673:	53                   	push   ebx
c001d674:	83 ec 28             	sub    esp,0x28
c001d677:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d67b:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001d680:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001d685:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001d68a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001d691:	8d 43 12             	lea    eax,[ebx+0x12]
c001d694:	83 c3 10             	add    ebx,0x10
c001d697:	0f b6 c0             	movzx  eax,al
c001d69a:	0f b6 db             	movzx  ebx,bl
c001d69d:	50                   	push   eax
c001d69e:	51                   	push   ecx
c001d69f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001d6a3:	57                   	push   edi
c001d6a4:	55                   	push   ebp
c001d6a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d6a9:	e8 ec fd ff ff       	call   c001d49a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d6ae:	83 c4 14             	add    esp,0x14
c001d6b1:	89 c6                	mov    esi,eax
c001d6b3:	53                   	push   ebx
c001d6b4:	c1 e6 10             	shl    esi,0x10
c001d6b7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d6bb:	51                   	push   ecx
c001d6bc:	57                   	push   edi
c001d6bd:	55                   	push   ebp
c001d6be:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d6c2:	e8 d3 fd ff ff       	call   c001d49a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d6c7:	83 c4 3c             	add    esp,0x3c
c001d6ca:	0f b7 c0             	movzx  eax,ax
c001d6cd:	5b                   	pop    ebx
c001d6ce:	09 f0                	or     eax,esi
c001d6d0:	5e                   	pop    esi
c001d6d1:	5f                   	pop    edi
c001d6d2:	5d                   	pop    ebp
c001d6d3:	c3                   	ret    

c001d6d4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001d6d4:	55                   	push   ebp
c001d6d5:	57                   	push   edi
c001d6d6:	56                   	push   esi
c001d6d7:	53                   	push   ebx
c001d6d8:	83 ec 0c             	sub    esp,0xc
c001d6db:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d6df:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d6e3:	89 f5                	mov    ebp,esi
c001d6e5:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001d6eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d6ef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d6f3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d6f7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d6fb:	83 f9 01             	cmp    ecx,0x1
c001d6fe:	75 5d                	jne    c001d75d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001d700:	0f b6 c8             	movzx  ecx,al
c001d703:	0f b6 d2             	movzx  edx,dl
c001d706:	c1 e1 10             	shl    ecx,0x10
c001d709:	c1 e2 0b             	shl    edx,0xb
c001d70c:	89 f0                	mov    eax,esi
c001d70e:	25 fc 00 00 00       	and    eax,0xfc
c001d713:	09 c1                	or     ecx,eax
c001d715:	89 e8                	mov    eax,ebp
c001d717:	0f b6 c0             	movzx  eax,al
c001d71a:	c1 e0 08             	shl    eax,0x8
c001d71d:	09 c1                	or     ecx,eax
c001d71f:	09 d1                	or     ecx,edx
c001d721:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d726:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001d72c:	89 c8                	mov    eax,ecx
c001d72e:	ef                   	out    dx,eax
c001d72f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d734:	ed                   	in     eax,dx
c001d735:	0f b7 db             	movzx  ebx,bx
c001d738:	83 e6 02             	and    esi,0x2
c001d73b:	74 0a                	je     c001d747 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001d73d:	0f b7 d0             	movzx  edx,ax
c001d740:	c1 e3 10             	shl    ebx,0x10
c001d743:	09 d3                	or     ebx,edx
c001d745:	eb 05                	jmp    c001d74c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001d747:	66 31 c0             	xor    ax,ax
c001d74a:	09 c3                	or     ebx,eax
c001d74c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d751:	89 c8                	mov    eax,ecx
c001d753:	ef                   	out    dx,eax
c001d754:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d759:	89 d8                	mov    eax,ebx
c001d75b:	eb 41                	jmp    c001d79e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d75d:	83 f9 02             	cmp    ecx,0x2
c001d760:	75 45                	jne    c001d7a7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001d762:	83 ec 0c             	sub    esp,0xc
c001d765:	0f b6 d2             	movzx  edx,dl
c001d768:	89 f1                	mov    ecx,esi
c001d76a:	0f b6 c0             	movzx  eax,al
c001d76d:	0f b6 f1             	movzx  esi,cl
c001d770:	89 e9                	mov    ecx,ebp
c001d772:	56                   	push   esi
c001d773:	0f b6 c9             	movzx  ecx,cl
c001d776:	51                   	push   ecx
c001d777:	52                   	push   edx
c001d778:	50                   	push   eax
c001d779:	57                   	push   edi
c001d77a:	e8 ad fc ff ff       	call   c001d42c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d77f:	89 c2                	mov    edx,eax
c001d781:	ed                   	in     eax,dx
c001d782:	83 c4 20             	add    esp,0x20
c001d785:	0f b7 db             	movzx  ebx,bx
c001d788:	f6 c2 02             	test   dl,0x2
c001d78b:	74 0c                	je     c001d799 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001d78d:	0f b7 c8             	movzx  ecx,ax
c001d790:	89 d8                	mov    eax,ebx
c001d792:	c1 e0 10             	shl    eax,0x10
c001d795:	09 c8                	or     eax,ecx
c001d797:	eb 05                	jmp    c001d79e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d799:	66 31 c0             	xor    ax,ax
c001d79c:	09 d8                	or     eax,ebx
c001d79e:	ef                   	out    dx,eax
c001d79f:	83 c4 0c             	add    esp,0xc
c001d7a2:	5b                   	pop    ebx
c001d7a3:	5e                   	pop    esi
c001d7a4:	5f                   	pop    edi
c001d7a5:	5d                   	pop    ebp
c001d7a6:	c3                   	ret    
c001d7a7:	c7 44 24 20 1f 67 02 c0 	mov    DWORD PTR [esp+0x20],0xc002671f
c001d7af:	83 c4 0c             	add    esp,0xc
c001d7b2:	5b                   	pop    ebx
c001d7b3:	5e                   	pop    esi
c001d7b4:	5f                   	pop    edi
c001d7b5:	5d                   	pop    ebp
c001d7b6:	e9 00 72 ff ff       	jmp    c00149bb <Krnl::panic(char const*)>
c001d7bb:	90                   	nop

c001d7bc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001d7bc:	55                   	push   ebp
c001d7bd:	57                   	push   edi
c001d7be:	56                   	push   esi
c001d7bf:	53                   	push   ebx
c001d7c0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001d7c6:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001d7cd:	75 0f                	jne    c001d7de <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001d7cf:	80 3d 8c 9f 02 c0 00 	cmp    BYTE PTR ds:0xc0029f8c,0x0
c001d7d6:	0f 85 fa 00 00 00    	jne    c001d8d6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d7dc:	eb 2f                	jmp    c001d80d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001d7de:	83 ec 0c             	sub    esp,0xc
c001d7e1:	68 25 67 02 c0       	push   0xc0026725
c001d7e6:	e8 7e c2 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d7eb:	83 c4 10             	add    esp,0x10
c001d7ee:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001d7f5:	75 d8                	jne    c001d7cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d7f7:	e4 60                	in     al,0x60
c001d7f9:	3c 1c                	cmp    al,0x1c
c001d7fb:	74 04                	je     c001d801 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d7fd:	3c 5a                	cmp    al,0x5a
c001d7ff:	75 f6                	jne    c001d7f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001d801:	e4 60                	in     al,0x60
c001d803:	3c 5a                	cmp    al,0x5a
c001d805:	74 fa                	je     c001d801 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d807:	3c 1c                	cmp    al,0x1c
c001d809:	74 f6                	je     c001d801 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d80b:	eb c2                	jmp    c001d7cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d80d:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001d814:	0f 85 86 00 00 00    	jne    c001d8a0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001d81a:	83 ec 0c             	sub    esp,0xc
c001d81d:	68 14 01 00 00       	push   0x114
c001d822:	e8 e8 c1 fe ff       	call   c0009a0f <malloc>
c001d827:	83 c4 0c             	add    esp,0xc
c001d82a:	89 c3                	mov    ebx,eax
c001d82c:	ff 35 90 95 02 c0    	push   DWORD PTR ds:0xc0029590
c001d832:	68 3f 67 02 c0       	push   0xc002673f
c001d837:	50                   	push   eax
c001d838:	e8 2d fa fe ff       	call   c000d26a <File::File(char const*, Process*)>
c001d83d:	5a                   	pop    edx
c001d83e:	59                   	pop    ecx
c001d83f:	6a 01                	push   0x1
c001d841:	53                   	push   ebx
c001d842:	e8 e5 fa fe ff       	call   c000d32c <File::open(FileOpenMode)>
c001d847:	83 c4 0c             	add    esp,0xc
c001d84a:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001d84e:	50                   	push   eax
c001d84f:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d853:	50                   	push   eax
c001d854:	53                   	push   ebx
c001d855:	e8 7e fd fe ff       	call   c000d5d8 <File::stat(unsigned long long*, bool*)>
c001d85a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d85e:	40                   	inc    eax
c001d85f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d862:	e8 a8 c1 fe ff       	call   c0009a0f <malloc>
c001d867:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d86b:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c001d870:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d874:	5e                   	pop    esi
c001d875:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d877:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001d87b:	51                   	push   ecx
c001d87c:	50                   	push   eax
c001d87d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d881:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d885:	53                   	push   ebx
c001d886:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d889:	83 c4 14             	add    esp,0x14
c001d88c:	53                   	push   ebx
c001d88d:	e8 f8 fa fe ff       	call   c000d38a <File::close()>
c001d892:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d896:	83 c4 10             	add    esp,0x10
c001d899:	a3 84 9f 02 c0       	mov    ds:0xc0029f84,eax
c001d89e:	eb 36                	jmp    c001d8d6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d8a0:	83 ec 0c             	sub    esp,0xc
c001d8a3:	68 58 67 02 c0       	push   0xc0026758
c001d8a8:	e8 bc c1 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d8ad:	83 c4 10             	add    esp,0x10
c001d8b0:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001d8b7:	0f 85 5d ff ff ff    	jne    c001d81a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d8bd:	e4 60                	in     al,0x60
c001d8bf:	3c 1c                	cmp    al,0x1c
c001d8c1:	74 04                	je     c001d8c7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d8c3:	3c 5a                	cmp    al,0x5a
c001d8c5:	75 f6                	jne    c001d8bd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001d8c7:	e4 60                	in     al,0x60
c001d8c9:	3c 5a                	cmp    al,0x5a
c001d8cb:	74 fa                	je     c001d8c7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d8cd:	3c 1c                	cmp    al,0x1c
c001d8cf:	74 f6                	je     c001d8c7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d8d1:	e9 44 ff ff ff       	jmp    c001d81a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d8d6:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001d8dd:	75 0b                	jne    c001d8ea <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001d8df:	31 f6                	xor    esi,esi
c001d8e1:	31 db                	xor    ebx,ebx
c001d8e3:	31 ed                	xor    ebp,ebp
c001d8e5:	e9 a3 01 00 00       	jmp    c001da8d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d8ea:	83 ec 0c             	sub    esp,0xc
c001d8ed:	68 6a 67 02 c0       	push   0xc002676a
c001d8f2:	e8 72 c1 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d8f7:	8b 15 60 80 02 c0    	mov    edx,DWORD PTR ds:0xc0028060
c001d8fd:	83 c4 10             	add    esp,0x10
c001d900:	f6 c2 80             	test   dl,0x80
c001d903:	74 0c                	je     c001d911 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001d905:	0f ba e2 0b          	bt     edx,0xb
c001d909:	72 1a                	jb     c001d925 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001d90b:	eb d2                	jmp    c001d8df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d90d:	3c 5a                	cmp    al,0x5a
c001d90f:	74 0c                	je     c001d91d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d911:	e4 60                	in     al,0x60
c001d913:	3c 1c                	cmp    al,0x1c
c001d915:	75 f6                	jne    c001d90d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001d917:	eb 04                	jmp    c001d91d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d919:	3c 1c                	cmp    al,0x1c
c001d91b:	75 e8                	jne    c001d905 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001d91d:	e4 60                	in     al,0x60
c001d91f:	3c 5a                	cmp    al,0x5a
c001d921:	74 fa                	je     c001d91d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d923:	eb f4                	jmp    c001d919 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001d925:	83 ec 0c             	sub    esp,0xc
c001d928:	68 6f 67 02 c0       	push   0xc002676f
c001d92d:	e8 37 c1 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d932:	83 c4 10             	add    esp,0x10
c001d935:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001d93c:	75 a1                	jne    c001d8df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d93e:	e4 60                	in     al,0x60
c001d940:	3c 5a                	cmp    al,0x5a
c001d942:	74 04                	je     c001d948 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d944:	3c 1c                	cmp    al,0x1c
c001d946:	75 f6                	jne    c001d93e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001d948:	e4 60                	in     al,0x60
c001d94a:	3c 5a                	cmp    al,0x5a
c001d94c:	74 fa                	je     c001d948 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d94e:	3c 1c                	cmp    al,0x1c
c001d950:	74 f6                	je     c001d948 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d952:	eb 8b                	jmp    c001d8df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d954:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001d95b:	0f 85 3d 01 00 00    	jne    c001da9e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001d961:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c001d966:	8d 7e 01             	lea    edi,[esi+0x1]
c001d969:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001d96c:	d4 40                	aam    0x40
c001d96e:	d5 39                	aad    0x39
c001d970:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001d977:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d97b:	0f 85 53 01 00 00    	jne    c001dad4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001d981:	8b 15 88 9f 02 c0    	mov    edx,DWORD PTR ds:0xc0029f88
c001d987:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d98a:	d4 40                	aam    0x40
c001d98c:	d5 39                	aad    0x39
c001d98e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d992:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001d996:	d4 40                	aam    0x40
c001d998:	d5 39                	aad    0x39
c001d99a:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d99e:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001d9a2:	d4 40                	aam    0x40
c001d9a4:	d5 39                	aad    0x39
c001d9a6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d9aa:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001d9ae:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001d9b2:	3c 56                	cmp    al,0x56
c001d9b4:	74 49                	je     c001d9ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001d9b6:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001d9ba:	d4 40                	aam    0x40
c001d9bc:	d5 39                	aad    0x39
c001d9be:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d9c1:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001d9c5:	0f b6 c9             	movzx  ecx,cl
c001d9c8:	c1 e1 04             	shl    ecx,0x4
c001d9cb:	d4 40                	aam    0x40
c001d9cd:	d5 39                	aad    0x39
c001d9cf:	83 e8 30             	sub    eax,0x30
c001d9d2:	0f b6 c0             	movzx  eax,al
c001d9d5:	09 c1                	or     ecx,eax
c001d9d7:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001d9db:	c1 e1 04             	shl    ecx,0x4
c001d9de:	d4 40                	aam    0x40
c001d9e0:	d5 39                	aad    0x39
c001d9e2:	83 e8 30             	sub    eax,0x30
c001d9e5:	0f b6 c0             	movzx  eax,al
c001d9e8:	09 c1                	or     ecx,eax
c001d9ea:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001d9ee:	c1 e1 04             	shl    ecx,0x4
c001d9f1:	d4 40                	aam    0x40
c001d9f3:	d5 39                	aad    0x39
c001d9f5:	83 e8 30             	sub    eax,0x30
c001d9f8:	0f b6 c0             	movzx  eax,al
c001d9fb:	09 c8                	or     eax,ecx
c001d9fd:	89 c5                	mov    ebp,eax
c001d9ff:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001da03:	80 f9 44             	cmp    cl,0x44
c001da06:	74 47                	je     c001da4f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001da08:	88 c8                	mov    al,cl
c001da0a:	d4 40                	aam    0x40
c001da0c:	d5 39                	aad    0x39
c001da0e:	83 e8 30             	sub    eax,0x30
c001da11:	0f b6 f8             	movzx  edi,al
c001da14:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001da18:	c1 e7 04             	shl    edi,0x4
c001da1b:	d4 40                	aam    0x40
c001da1d:	d5 39                	aad    0x39
c001da1f:	8d 58 d0             	lea    ebx,[eax-0x30]
c001da22:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001da26:	0f b6 db             	movzx  ebx,bl
c001da29:	09 fb                	or     ebx,edi
c001da2b:	c1 e3 04             	shl    ebx,0x4
c001da2e:	d4 40                	aam    0x40
c001da30:	d5 39                	aad    0x39
c001da32:	83 e8 30             	sub    eax,0x30
c001da35:	0f b6 f8             	movzx  edi,al
c001da38:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001da3c:	09 fb                	or     ebx,edi
c001da3e:	89 df                	mov    edi,ebx
c001da40:	c1 e7 04             	shl    edi,0x4
c001da43:	d4 40                	aam    0x40
c001da45:	d5 39                	aad    0x39
c001da47:	8d 58 d0             	lea    ebx,[eax-0x30]
c001da4a:	0f b6 db             	movzx  ebx,bl
c001da4d:	09 fb                	or     ebx,edi
c001da4f:	a1 84 9f 02 c0       	mov    eax,ds:0xc0029f84
c001da54:	83 c6 10             	add    esi,0x10
c001da57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001da5b:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001da5f:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001da62:	3c 0a                	cmp    al,0xa
c001da64:	0f 85 a0 00 00 00    	jne    c001db0a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001da6a:	3c 0a                	cmp    al,0xa
c001da6c:	0f 94 c0             	sete   al
c001da6f:	0f b6 c0             	movzx  eax,al
c001da72:	01 c6                	add    esi,eax
c001da74:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001da79:	0f 84 a2 00 00 00    	je     c001db21 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001da7f:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001da87:	0f 84 94 00 00 00    	je     c001db21 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001da8d:	39 35 84 9f 02 c0    	cmp    DWORD PTR ds:0xc0029f84,esi
c001da93:	0f 8f bb fe ff ff    	jg     c001d954 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001da99:	e9 e8 00 00 00       	jmp    c001db86 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001da9e:	83 ec 0c             	sub    esp,0xc
c001daa1:	68 76 67 02 c0       	push   0xc0026776
c001daa6:	e8 be bf fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001daab:	83 c4 10             	add    esp,0x10
c001daae:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001dab5:	0f 85 a6 fe ff ff    	jne    c001d961 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001dabb:	e4 60                	in     al,0x60
c001dabd:	3c 5a                	cmp    al,0x5a
c001dabf:	74 04                	je     c001dac5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001dac1:	3c 1c                	cmp    al,0x1c
c001dac3:	75 f6                	jne    c001dabb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001dac5:	e4 60                	in     al,0x60
c001dac7:	3c 5a                	cmp    al,0x5a
c001dac9:	74 fa                	je     c001dac5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001dacb:	3c 1c                	cmp    al,0x1c
c001dacd:	74 f6                	je     c001dac5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001dacf:	e9 8d fe ff ff       	jmp    c001d961 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001dad4:	83 ec 0c             	sub    esp,0xc
c001dad7:	68 7e 67 02 c0       	push   0xc002677e
c001dadc:	e8 88 bf fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dae1:	83 c4 10             	add    esp,0x10
c001dae4:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001daeb:	0f 85 90 fe ff ff    	jne    c001d981 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001daf1:	e4 60                	in     al,0x60
c001daf3:	3c 5a                	cmp    al,0x5a
c001daf5:	74 04                	je     c001dafb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001daf7:	3c 1c                	cmp    al,0x1c
c001daf9:	75 f6                	jne    c001daf1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001dafb:	e4 60                	in     al,0x60
c001dafd:	3c 5a                	cmp    al,0x5a
c001daff:	74 fa                	je     c001dafb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001db01:	3c 1c                	cmp    al,0x1c
c001db03:	74 f6                	je     c001dafb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001db05:	e9 77 fe ff ff       	jmp    c001d981 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001db0a:	47                   	inc    edi
c001db0b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001db0f:	0f 84 55 ff ff ff    	je     c001da6a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001db15:	46                   	inc    esi
c001db16:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001db19:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001db1c:	e9 3e ff ff ff       	jmp    c001da5f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001db21:	80 f9 44             	cmp    cl,0x44
c001db24:	74 0e                	je     c001db34 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001db26:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001db2e:	0f 85 59 ff ff ff    	jne    c001da8d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001db34:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001db38:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001db3c:	c1 e0 04             	shl    eax,0x4
c001db3f:	83 ea 30             	sub    edx,0x30
c001db42:	09 d0                	or     eax,edx
c001db44:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001db4b:	0f 85 3c ff ff ff    	jne    c001da8d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001db51:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001db55:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001db59:	c1 e2 04             	shl    edx,0x4
c001db5c:	83 e8 30             	sub    eax,0x30
c001db5f:	09 d0                	or     eax,edx
c001db61:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001db68:	0f 85 1f ff ff ff    	jne    c001da8d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001db6e:	50                   	push   eax
c001db6f:	50                   	push   eax
c001db70:	8d 44 24 28          	lea    eax,[esp+0x28]
c001db74:	50                   	push   eax
c001db75:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001db7c:	e8 bf 2b fe ff       	call   c0000740 <strcpy>
c001db81:	83 c4 10             	add    esp,0x10
c001db84:	eb 15                	jmp    c001db9b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001db86:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001db8d:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001db98:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001db9b:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001dba2:	81 c4 2c 01 00 00    	add    esp,0x12c
c001dba8:	5b                   	pop    ebx
c001dba9:	5e                   	pop    esi
c001dbaa:	5f                   	pop    edi
c001dbab:	5d                   	pop    ebp
c001dbac:	c3                   	ret    
c001dbad:	90                   	nop

c001dbae <PCI::checkBus(unsigned char)>:
c001dbae:	56                   	push   esi
c001dbaf:	53                   	push   ebx
c001dbb0:	31 db                	xor    ebx,ebx
c001dbb2:	51                   	push   ecx
c001dbb3:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001dbb8:	52                   	push   edx
c001dbb9:	53                   	push   ebx
c001dbba:	43                   	inc    ebx
c001dbbb:	56                   	push   esi
c001dbbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dbc0:	e8 bf 07 00 00       	call   c001e384 <PCI::checkDevice(unsigned char, unsigned char)>
c001dbc5:	83 c4 10             	add    esp,0x10
c001dbc8:	83 fb 20             	cmp    ebx,0x20
c001dbcb:	75 eb                	jne    c001dbb8 <PCI::checkBus(unsigned char)+0xa>
c001dbcd:	58                   	pop    eax
c001dbce:	5b                   	pop    ebx
c001dbcf:	5e                   	pop    esi
c001dbd0:	c3                   	ret    
c001dbd1:	90                   	nop

c001dbd2 <PCI::foundDevice(PCIDeviceInfo)>:
c001dbd2:	55                   	push   ebp
c001dbd3:	57                   	push   edi
c001dbd4:	56                   	push   esi
c001dbd5:	53                   	push   ebx
c001dbd6:	83 ec 1c             	sub    esp,0x1c
c001dbd9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dbdd:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001dbe3:	0f 84 20 04 00 00    	je     c001e009 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dbe9:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001dbf0:	75 37                	jne    c001dc29 <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001dbf2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001dbf6:	66 81 f9 06 04       	cmp    cx,0x406
c001dbfb:	75 5b                	jne    c001dc58 <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001dbfd:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001dc02:	50                   	push   eax
c001dc03:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001dc08:	50                   	push   eax
c001dc09:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001dc0e:	50                   	push   eax
c001dc0f:	53                   	push   ebx
c001dc10:	e8 33 fa ff ff       	call   c001d648 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001dc15:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001dc19:	0f b6 c0             	movzx  eax,al
c001dc1c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001dc20:	83 c4 2c             	add    esp,0x2c
c001dc23:	5b                   	pop    ebx
c001dc24:	5e                   	pop    esi
c001dc25:	5f                   	pop    edi
c001dc26:	5d                   	pop    ebp
c001dc27:	eb 85                	jmp    c001dbae <PCI::checkBus(unsigned char)>
c001dc29:	83 ec 0c             	sub    esp,0xc
c001dc2c:	68 87 67 02 c0       	push   0xc0026787
c001dc31:	e8 33 be fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dc36:	83 c4 10             	add    esp,0x10
c001dc39:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001dc40:	75 b0                	jne    c001dbf2 <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001dc42:	e4 60                	in     al,0x60
c001dc44:	3c 5a                	cmp    al,0x5a
c001dc46:	74 04                	je     c001dc4c <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dc48:	3c 1c                	cmp    al,0x1c
c001dc4a:	75 f6                	jne    c001dc42 <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001dc4c:	e4 60                	in     al,0x60
c001dc4e:	3c 5a                	cmp    al,0x5a
c001dc50:	74 fa                	je     c001dc4c <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dc52:	3c 1c                	cmp    al,0x1c
c001dc54:	74 f6                	je     c001dc4c <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dc56:	eb 9a                	jmp    c001dbf2 <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001dc58:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001dc5e:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001dc62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dc66:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001dc6a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001dc6e:	88 d0                	mov    al,dl
c001dc70:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001dc75:	74 3b                	je     c001dcb2 <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001dc77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dc7b:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001dc7e:	85 d2                	test   edx,edx
c001dc80:	74 24                	je     c001dca6 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001dc82:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001dc88:	31 ef                	xor    edi,ebp
c001dc8a:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001dc90:	75 14                	jne    c001dca6 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001dc92:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001dc98:	75 0c                	jne    c001dca6 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001dc9a:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001dca0:	0f 84 63 03 00 00    	je     c001e009 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dca6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dcaa:	8b 12                	mov    edx,DWORD PTR [edx]
c001dcac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dcb0:	eb be                	jmp    c001dc70 <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001dcb2:	66 81 f9 01 06       	cmp    cx,0x601
c001dcb7:	0f 85 81 01 00 00    	jne    c001de3e <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001dcbd:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001dcc4:	75 25                	jne    c001dceb <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001dcc6:	83 ec 0c             	sub    esp,0xc
c001dcc9:	68 64 01 00 00       	push   0x164
c001dcce:	e8 3c bd fe ff       	call   c0009a0f <malloc>
c001dcd3:	89 04 24             	mov    DWORD PTR [esp],eax
c001dcd6:	89 c5                	mov    ebp,eax
c001dcd8:	e8 b7 12 00 00       	call   c001ef94 <SATABus::SATABus()>
c001dcdd:	83 c4 10             	add    esp,0x10
c001dce0:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001dce7:	74 4a                	je     c001dd33 <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001dce9:	eb 2f                	jmp    c001dd1a <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001dceb:	83 ec 0c             	sub    esp,0xc
c001dcee:	68 97 67 02 c0       	push   0xc0026797
c001dcf3:	e8 71 bd fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dcf8:	83 c4 10             	add    esp,0x10
c001dcfb:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001dd02:	75 c2                	jne    c001dcc6 <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001dd04:	e4 60                	in     al,0x60
c001dd06:	3c 1c                	cmp    al,0x1c
c001dd08:	74 04                	je     c001dd0e <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001dd0a:	3c 5a                	cmp    al,0x5a
c001dd0c:	75 f6                	jne    c001dd04 <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001dd0e:	e4 60                	in     al,0x60
c001dd10:	3c 5a                	cmp    al,0x5a
c001dd12:	74 fa                	je     c001dd0e <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001dd14:	3c 1c                	cmp    al,0x1c
c001dd16:	74 f6                	je     c001dd0e <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001dd18:	eb ac                	jmp    c001dcc6 <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001dd1a:	83 ec 0c             	sub    esp,0xc
c001dd1d:	68 9d 67 02 c0       	push   0xc002679d
c001dd22:	e8 42 bd fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dd27:	83 c4 10             	add    esp,0x10
c001dd2a:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001dd31:	74 1b                	je     c001dd4e <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001dd33:	50                   	push   eax
c001dd34:	50                   	push   eax
c001dd35:	55                   	push   ebp
c001dd36:	53                   	push   ebx
c001dd37:	e8 02 05 ff ff       	call   c000e23e <Device::addChild(Device*)>
c001dd3c:	83 c4 10             	add    esp,0x10
c001dd3f:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001dd46:	74 33                	je     c001dd7b <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001dd48:	eb 18                	jmp    c001dd62 <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001dd4a:	3c 1c                	cmp    al,0x1c
c001dd4c:	74 0c                	je     c001dd5a <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dd4e:	e4 60                	in     al,0x60
c001dd50:	3c 5a                	cmp    al,0x5a
c001dd52:	75 f6                	jne    c001dd4a <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001dd54:	eb 04                	jmp    c001dd5a <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dd56:	3c 1c                	cmp    al,0x1c
c001dd58:	75 d9                	jne    c001dd33 <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001dd5a:	e4 60                	in     al,0x60
c001dd5c:	3c 5a                	cmp    al,0x5a
c001dd5e:	74 fa                	je     c001dd5a <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dd60:	eb f4                	jmp    c001dd56 <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001dd62:	83 ec 0c             	sub    esp,0xc
c001dd65:	68 a5 67 02 c0       	push   0xc00267a5
c001dd6a:	e8 fa bc fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dd6f:	83 c4 10             	add    esp,0x10
c001dd72:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001dd79:	74 29                	je     c001dda4 <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001dd7b:	83 ec 2c             	sub    esp,0x2c
c001dd7e:	b9 09 00 00 00       	mov    ecx,0x9
c001dd83:	8d 74 24 60          	lea    esi,[esp+0x60]
c001dd87:	fc                   	cld    
c001dd88:	89 e7                	mov    edi,esp
c001dd8a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dd8c:	55                   	push   ebp
c001dd8d:	e8 be 03 ff ff       	call   c000e150 <Device::preOpenPCI(PCIDeviceInfo)>
c001dd92:	83 c4 30             	add    esp,0x30
c001dd95:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001dd9c:	74 33                	je     c001ddd1 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001dd9e:	eb 18                	jmp    c001ddb8 <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001dda0:	3c 1c                	cmp    al,0x1c
c001dda2:	74 0c                	je     c001ddb0 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001dda4:	e4 60                	in     al,0x60
c001dda6:	3c 5a                	cmp    al,0x5a
c001dda8:	75 f6                	jne    c001dda0 <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001ddaa:	eb 04                	jmp    c001ddb0 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001ddac:	3c 1c                	cmp    al,0x1c
c001ddae:	75 cb                	jne    c001dd7b <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001ddb0:	e4 60                	in     al,0x60
c001ddb2:	3c 5a                	cmp    al,0x5a
c001ddb4:	74 fa                	je     c001ddb0 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001ddb6:	eb f4                	jmp    c001ddac <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001ddb8:	83 ec 0c             	sub    esp,0xc
c001ddbb:	68 ad 67 02 c0       	push   0xc00267ad
c001ddc0:	e8 a4 bc fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001ddc5:	83 c4 10             	add    esp,0x10
c001ddc8:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001ddcf:	74 23                	je     c001ddf4 <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001ddd1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ddd4:	6a 00                	push   0x0
c001ddd6:	6a 00                	push   0x0
c001ddd8:	6a 00                	push   0x0
c001ddda:	55                   	push   ebp
c001dddb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ddde:	83 c4 10             	add    esp,0x10
c001dde1:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001dde8:	0f 84 1b 02 00 00    	je     c001e009 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001ddee:	eb 18                	jmp    c001de08 <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001ddf0:	3c 1c                	cmp    al,0x1c
c001ddf2:	74 0c                	je     c001de00 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001ddf4:	e4 60                	in     al,0x60
c001ddf6:	3c 5a                	cmp    al,0x5a
c001ddf8:	75 f6                	jne    c001ddf0 <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001ddfa:	eb 04                	jmp    c001de00 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001ddfc:	3c 1c                	cmp    al,0x1c
c001ddfe:	75 d1                	jne    c001ddd1 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001de00:	e4 60                	in     al,0x60
c001de02:	3c 5a                	cmp    al,0x5a
c001de04:	74 fa                	je     c001de00 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001de06:	eb f4                	jmp    c001ddfc <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001de08:	83 ec 0c             	sub    esp,0xc
c001de0b:	68 b5 67 02 c0       	push   0xc00267b5
c001de10:	e8 54 bc fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001de15:	83 c4 10             	add    esp,0x10
c001de18:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001de1f:	0f 85 e4 01 00 00    	jne    c001e009 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001de25:	e4 60                	in     al,0x60
c001de27:	3c 5a                	cmp    al,0x5a
c001de29:	74 04                	je     c001de2f <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001de2b:	3c 1c                	cmp    al,0x1c
c001de2d:	75 f6                	jne    c001de25 <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001de2f:	e4 60                	in     al,0x60
c001de31:	3c 5a                	cmp    al,0x5a
c001de33:	74 fa                	je     c001de2f <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001de35:	3c 1c                	cmp    al,0x1c
c001de37:	74 f6                	je     c001de2f <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001de39:	e9 cb 01 00 00       	jmp    c001e009 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001de3e:	66 81 f9 01 01       	cmp    cx,0x101
c001de43:	0f 85 7a 01 00 00    	jne    c001dfc3 <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001de49:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001de50:	75 25                	jne    c001de77 <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001de52:	83 ec 0c             	sub    esp,0xc
c001de55:	68 70 02 00 00       	push   0x270
c001de5a:	e8 b0 bb fe ff       	call   c0009a0f <malloc>
c001de5f:	89 04 24             	mov    DWORD PTR [esp],eax
c001de62:	89 c5                	mov    ebp,eax
c001de64:	e8 df 05 00 00       	call   c001e448 <IDE::IDE()>
c001de69:	83 c4 10             	add    esp,0x10
c001de6c:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001de73:	74 4a                	je     c001debf <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001de75:	eb 2f                	jmp    c001dea6 <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001de77:	83 ec 0c             	sub    esp,0xc
c001de7a:	68 bd 67 02 c0       	push   0xc00267bd
c001de7f:	e8 e5 bb fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001de84:	83 c4 10             	add    esp,0x10
c001de87:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001de8e:	75 c2                	jne    c001de52 <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001de90:	e4 60                	in     al,0x60
c001de92:	3c 5a                	cmp    al,0x5a
c001de94:	74 04                	je     c001de9a <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001de96:	3c 1c                	cmp    al,0x1c
c001de98:	75 f6                	jne    c001de90 <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001de9a:	e4 60                	in     al,0x60
c001de9c:	3c 5a                	cmp    al,0x5a
c001de9e:	74 fa                	je     c001de9a <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001dea0:	3c 1c                	cmp    al,0x1c
c001dea2:	74 f6                	je     c001de9a <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001dea4:	eb ac                	jmp    c001de52 <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001dea6:	83 ec 0c             	sub    esp,0xc
c001dea9:	68 c4 67 02 c0       	push   0xc00267c4
c001deae:	e8 b6 bb fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001deb3:	83 c4 10             	add    esp,0x10
c001deb6:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001debd:	74 1b                	je     c001deda <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001debf:	57                   	push   edi
c001dec0:	57                   	push   edi
c001dec1:	55                   	push   ebp
c001dec2:	53                   	push   ebx
c001dec3:	e8 76 03 ff ff       	call   c000e23e <Device::addChild(Device*)>
c001dec8:	83 c4 10             	add    esp,0x10
c001decb:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001ded2:	74 33                	je     c001df07 <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001ded4:	eb 18                	jmp    c001deee <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001ded6:	3c 1c                	cmp    al,0x1c
c001ded8:	74 0c                	je     c001dee6 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001deda:	e4 60                	in     al,0x60
c001dedc:	3c 5a                	cmp    al,0x5a
c001dede:	75 f6                	jne    c001ded6 <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001dee0:	eb 04                	jmp    c001dee6 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001dee2:	3c 1c                	cmp    al,0x1c
c001dee4:	75 d9                	jne    c001debf <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001dee6:	e4 60                	in     al,0x60
c001dee8:	3c 5a                	cmp    al,0x5a
c001deea:	74 fa                	je     c001dee6 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001deec:	eb f4                	jmp    c001dee2 <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001deee:	83 ec 0c             	sub    esp,0xc
c001def1:	68 cb 67 02 c0       	push   0xc00267cb
c001def6:	e8 6e bb fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001defb:	83 c4 10             	add    esp,0x10
c001defe:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001df05:	74 29                	je     c001df30 <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001df07:	83 ec 2c             	sub    esp,0x2c
c001df0a:	b9 09 00 00 00       	mov    ecx,0x9
c001df0f:	8d 74 24 60          	lea    esi,[esp+0x60]
c001df13:	fc                   	cld    
c001df14:	89 e7                	mov    edi,esp
c001df16:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001df18:	55                   	push   ebp
c001df19:	e8 32 02 ff ff       	call   c000e150 <Device::preOpenPCI(PCIDeviceInfo)>
c001df1e:	83 c4 30             	add    esp,0x30
c001df21:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001df28:	74 33                	je     c001df5d <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001df2a:	eb 18                	jmp    c001df44 <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001df2c:	3c 1c                	cmp    al,0x1c
c001df2e:	74 0c                	je     c001df3c <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001df30:	e4 60                	in     al,0x60
c001df32:	3c 5a                	cmp    al,0x5a
c001df34:	75 f6                	jne    c001df2c <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001df36:	eb 04                	jmp    c001df3c <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001df38:	3c 1c                	cmp    al,0x1c
c001df3a:	75 cb                	jne    c001df07 <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001df3c:	e4 60                	in     al,0x60
c001df3e:	3c 5a                	cmp    al,0x5a
c001df40:	74 fa                	je     c001df3c <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001df42:	eb f4                	jmp    c001df38 <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001df44:	83 ec 0c             	sub    esp,0xc
c001df47:	68 d2 67 02 c0       	push   0xc00267d2
c001df4c:	e8 18 bb fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001df51:	83 c4 10             	add    esp,0x10
c001df54:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001df5b:	74 23                	je     c001df80 <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001df5d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001df60:	6a 00                	push   0x0
c001df62:	6a 00                	push   0x0
c001df64:	6a 00                	push   0x0
c001df66:	55                   	push   ebp
c001df67:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001df6a:	83 c4 10             	add    esp,0x10
c001df6d:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001df74:	0f 84 8f 00 00 00    	je     c001e009 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001df7a:	eb 18                	jmp    c001df94 <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001df7c:	3c 1c                	cmp    al,0x1c
c001df7e:	74 0c                	je     c001df8c <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001df80:	e4 60                	in     al,0x60
c001df82:	3c 5a                	cmp    al,0x5a
c001df84:	75 f6                	jne    c001df7c <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001df86:	eb 04                	jmp    c001df8c <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001df88:	3c 1c                	cmp    al,0x1c
c001df8a:	75 d1                	jne    c001df5d <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001df8c:	e4 60                	in     al,0x60
c001df8e:	3c 5a                	cmp    al,0x5a
c001df90:	74 fa                	je     c001df8c <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001df92:	eb f4                	jmp    c001df88 <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001df94:	83 ec 0c             	sub    esp,0xc
c001df97:	68 d9 67 02 c0       	push   0xc00267d9
c001df9c:	e8 c8 ba fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dfa1:	83 c4 10             	add    esp,0x10
c001dfa4:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001dfab:	75 5c                	jne    c001e009 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dfad:	e4 60                	in     al,0x60
c001dfaf:	3c 5a                	cmp    al,0x5a
c001dfb1:	74 04                	je     c001dfb7 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001dfb3:	3c 1c                	cmp    al,0x1c
c001dfb5:	75 f6                	jne    c001dfad <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001dfb7:	e4 60                	in     al,0x60
c001dfb9:	3c 5a                	cmp    al,0x5a
c001dfbb:	74 fa                	je     c001dfb7 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001dfbd:	3c 1c                	cmp    al,0x1c
c001dfbf:	74 f6                	je     c001dfb7 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001dfc1:	eb 46                	jmp    c001e009 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dfc3:	83 ec 0c             	sub    esp,0xc
c001dfc6:	68 58 01 00 00       	push   0x158
c001dfcb:	e8 3f ba fe ff       	call   c0009a0f <malloc>
c001dfd0:	89 c5                	mov    ebp,eax
c001dfd2:	58                   	pop    eax
c001dfd3:	5a                   	pop    edx
c001dfd4:	68 e0 67 02 c0       	push   0xc00267e0
c001dfd9:	55                   	push   ebp
c001dfda:	e8 69 05 ff ff       	call   c000e548 <DriverlessDevice::DriverlessDevice(char const*)>
c001dfdf:	59                   	pop    ecx
c001dfe0:	5e                   	pop    esi
c001dfe1:	55                   	push   ebp
c001dfe2:	53                   	push   ebx
c001dfe3:	e8 56 02 ff ff       	call   c000e23e <Device::addChild(Device*)>
c001dfe8:	83 c4 10             	add    esp,0x10
c001dfeb:	b9 09 00 00 00       	mov    ecx,0x9
c001dff0:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001dff4:	fc                   	cld    
c001dff5:	89 fe                	mov    esi,edi
c001dff7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dff9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001dffd:	83 c4 1c             	add    esp,0x1c
c001e000:	5b                   	pop    ebx
c001e001:	5e                   	pop    esi
c001e002:	5f                   	pop    edi
c001e003:	5d                   	pop    ebp
c001e004:	e9 47 01 ff ff       	jmp    c000e150 <Device::preOpenPCI(PCIDeviceInfo)>
c001e009:	83 c4 1c             	add    esp,0x1c
c001e00c:	5b                   	pop    ebx
c001e00d:	5e                   	pop    esi
c001e00e:	5f                   	pop    edi
c001e00f:	5d                   	pop    ebp
c001e010:	c3                   	ret    
c001e011:	90                   	nop

c001e012 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e012:	55                   	push   ebp
c001e013:	57                   	push   edi
c001e014:	56                   	push   esi
c001e015:	53                   	push   ebx
c001e016:	81 ec b4 00 00 00    	sub    esp,0xb4
c001e01c:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001e023:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001e02a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e02e:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001e035:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e039:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001e040:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e044:	68 fa 67 02 c0       	push   0xc00267fa
c001e049:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001e04d:	53                   	push   ebx
c001e04e:	e8 ed 26 fe ff       	call   c0000740 <strcpy>
c001e053:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001e058:	b2 64                	mov    dl,0x64
c001e05a:	89 c8                	mov    eax,ecx
c001e05c:	f6 f2                	div    dl
c001e05e:	b2 0a                	mov    dl,0xa
c001e060:	83 c0 30             	add    eax,0x30
c001e063:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001e067:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001e06b:	83 c4 10             	add    esp,0x10
c001e06e:	89 c8                	mov    eax,ecx
c001e070:	f6 f2                	div    dl
c001e072:	89 c1                	mov    ecx,eax
c001e074:	0f b6 c0             	movzx  eax,al
c001e077:	88 e9                	mov    cl,ch
c001e079:	f6 f2                	div    dl
c001e07b:	88 e0                	mov    al,ah
c001e07d:	83 c0 30             	add    eax,0x30
c001e080:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e084:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e088:	8d 41 30             	lea    eax,[ecx+0x30]
c001e08b:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001e08f:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001e093:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001e098:	f6 f2                	div    dl
c001e09a:	89 c1                	mov    ecx,eax
c001e09c:	0f b6 c0             	movzx  eax,al
c001e09f:	88 e9                	mov    cl,ch
c001e0a1:	f6 f2                	div    dl
c001e0a3:	88 e0                	mov    al,ah
c001e0a5:	83 c0 30             	add    eax,0x30
c001e0a8:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001e0ac:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001e0b0:	8d 41 30             	lea    eax,[ecx+0x30]
c001e0b3:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001e0b7:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001e0bb:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001e0c0:	f6 f2                	div    dl
c001e0c2:	89 c1                	mov    ecx,eax
c001e0c4:	0f b6 c0             	movzx  eax,al
c001e0c7:	88 e9                	mov    cl,ch
c001e0c9:	f6 f2                	div    dl
c001e0cb:	88 e0                	mov    al,ah
c001e0cd:	83 c0 30             	add    eax,0x30
c001e0d0:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001e0d7:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001e0db:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e0df:	8d 41 30             	lea    eax,[ecx+0x30]
c001e0e2:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001e0e6:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001e0ea:	74 29                	je     c001e115 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e0ec:	83 ec 0c             	sub    esp,0xc
c001e0ef:	53                   	push   ebx
c001e0f0:	e8 74 b9 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001e0f5:	83 c4 10             	add    esp,0x10
c001e0f8:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001e0ff:	75 14                	jne    c001e115 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e101:	e4 60                	in     al,0x60
c001e103:	3c 1c                	cmp    al,0x1c
c001e105:	74 04                	je     c001e10b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e107:	3c 5a                	cmp    al,0x5a
c001e109:	75 f6                	jne    c001e101 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001e10b:	e4 60                	in     al,0x60
c001e10d:	3c 5a                	cmp    al,0x5a
c001e10f:	74 fa                	je     c001e10b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e111:	3c 1c                	cmp    al,0x1c
c001e113:	74 f6                	je     c001e10b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e115:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001e11a:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001e11f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e124:	83 ec 0c             	sub    esp,0xc
c001e127:	6a 0c                	push   0xc
c001e129:	56                   	push   esi
c001e12a:	53                   	push   ebx
c001e12b:	57                   	push   edi
c001e12c:	55                   	push   ebp
c001e12d:	e8 68 f3 ff ff       	call   c001d49a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e132:	83 c4 20             	add    esp,0x20
c001e135:	56                   	push   esi
c001e136:	53                   	push   ebx
c001e137:	57                   	push   edi
c001e138:	55                   	push   ebp
c001e139:	e8 50 f4 ff ff       	call   c001d58e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e13e:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001e143:	56                   	push   esi
c001e144:	53                   	push   ebx
c001e145:	57                   	push   edi
c001e146:	55                   	push   ebp
c001e147:	e8 d8 f4 ff ff       	call   c001d624 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e14c:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001e150:	83 c4 14             	add    esp,0x14
c001e153:	6a 3c                	push   0x3c
c001e155:	56                   	push   esi
c001e156:	53                   	push   ebx
c001e157:	57                   	push   edi
c001e158:	55                   	push   ebp
c001e159:	e8 3c f3 ff ff       	call   c001d49a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e15e:	0f b6 c4             	movzx  eax,ah
c001e161:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e165:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e169:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001e170:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c001e175:	83 c4 20             	add    esp,0x20
c001e178:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e17e:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001e185:	0f 84 38 01 00 00    	je     c001e2c3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e18b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e193:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c001e198:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e19c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e1a2:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001e1a8:	0f 8e 15 01 00 00    	jle    c001e2c3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e1ae:	50                   	push   eax
c001e1af:	50                   	push   eax
c001e1b0:	68 15 68 02 c0       	push   0xc0026815
c001e1b5:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e1b9:	50                   	push   eax
c001e1ba:	e8 81 25 fe ff       	call   c0000740 <strcpy>
c001e1bf:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001e1c3:	b9 0a 00 00 00       	mov    ecx,0xa
c001e1c8:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e1cc:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e1d0:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e1d4:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001e1d8:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001e1dc:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001e1e0:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001e1e4:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001e1e8:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001e1ec:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e1f0:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001e1f4:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001e1f8:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001e1fc:	83 c4 10             	add    esp,0x10
c001e1ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e203:	99                   	cdq    
c001e204:	f7 f9                	idiv   ecx
c001e206:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e20a:	99                   	cdq    
c001e20b:	f7 f9                	idiv   ecx
c001e20d:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001e211:	83 c2 30             	add    edx,0x30
c001e214:	83 c0 30             	add    eax,0x30
c001e217:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001e21b:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001e21f:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001e226:	74 2d                	je     c001e255 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e228:	83 ec 0c             	sub    esp,0xc
c001e22b:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e22f:	50                   	push   eax
c001e230:	e8 34 b8 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001e235:	83 c4 10             	add    esp,0x10
c001e238:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001e23f:	75 14                	jne    c001e255 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e241:	e4 60                	in     al,0x60
c001e243:	3c 5a                	cmp    al,0x5a
c001e245:	74 04                	je     c001e24b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e247:	3c 1c                	cmp    al,0x1c
c001e249:	75 f6                	jne    c001e241 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001e24b:	e4 60                	in     al,0x60
c001e24d:	3c 5a                	cmp    al,0x5a
c001e24f:	74 fa                	je     c001e24b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e251:	3c 1c                	cmp    al,0x1c
c001e253:	74 f6                	je     c001e24b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e255:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e259:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c001e25e:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e264:	8d 04 d0             	lea    eax,[eax+edx*8]
c001e267:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001e26e:	39 d3                	cmp    ebx,edx
c001e270:	75 48                	jne    c001e2ba <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e272:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001e279:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001e27d:	75 3b                	jne    c001e2ba <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e27f:	83 ec 0c             	sub    esp,0xc
c001e282:	68 44 68 02 c0       	push   0xc0026844
c001e287:	e8 73 ea fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001e28c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e290:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c001e295:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e29b:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001e2a3:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001e2a7:	50                   	push   eax
c001e2a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e2ac:	53                   	push   ebx
c001e2ad:	68 69 68 02 c0       	push   0xc0026869
c001e2b2:	e8 48 ea fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001e2b7:	83 c4 20             	add    esp,0x20
c001e2ba:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e2be:	e9 d0 fe ff ff       	jmp    c001e193 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001e2c3:	31 d2                	xor    edx,edx
c001e2c5:	83 ec 0c             	sub    esp,0xc
c001e2c8:	56                   	push   esi
c001e2c9:	53                   	push   ebx
c001e2ca:	57                   	push   edi
c001e2cb:	52                   	push   edx
c001e2cc:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e2d0:	55                   	push   ebp
c001e2d1:	e8 9a f3 ff ff       	call   c001d670 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e2d6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e2da:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001e2e1:	42                   	inc    edx
c001e2e2:	83 c4 20             	add    esp,0x20
c001e2e5:	83 fa 06             	cmp    edx,0x6
c001e2e8:	75 db                	jne    c001e2c5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001e2ea:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001e2ef:	83 ec 0c             	sub    esp,0xc
c001e2f2:	86 e0                	xchg   al,ah
c001e2f4:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001e2fc:	6a 02                	push   0x2
c001e2fe:	56                   	push   esi
c001e2ff:	53                   	push   ebx
c001e300:	57                   	push   edi
c001e301:	55                   	push   ebp
c001e302:	e8 93 f1 ff ff       	call   c001d49a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e307:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001e30f:	83 c4 20             	add    esp,0x20
c001e312:	56                   	push   esi
c001e313:	53                   	push   ebx
c001e314:	57                   	push   edi
c001e315:	55                   	push   ebp
c001e316:	e8 bd f2 ff ff       	call   c001d5d8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e31b:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001e322:	56                   	push   esi
c001e323:	53                   	push   ebx
c001e324:	57                   	push   edi
c001e325:	55                   	push   ebp
c001e326:	e8 17 f2 ff ff       	call   c001d542 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e32b:	b9 09 00 00 00       	mov    ecx,0x9
c001e330:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001e338:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001e33c:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001e343:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e347:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001e34e:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e352:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001e359:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e35d:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001e364:	83 ec 0c             	sub    esp,0xc
c001e367:	fc                   	cld    
c001e368:	89 e7                	mov    edi,esp
c001e36a:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001e371:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e373:	55                   	push   ebp
c001e374:	e8 59 f8 ff ff       	call   c001dbd2 <PCI::foundDevice(PCIDeviceInfo)>
c001e379:	81 c4 dc 00 00 00    	add    esp,0xdc
c001e37f:	5b                   	pop    ebx
c001e380:	5e                   	pop    esi
c001e381:	5f                   	pop    edi
c001e382:	5d                   	pop    ebp
c001e383:	c3                   	ret    

c001e384 <PCI::checkDevice(unsigned char, unsigned char)>:
c001e384:	55                   	push   ebp
c001e385:	57                   	push   edi
c001e386:	56                   	push   esi
c001e387:	53                   	push   ebx
c001e388:	83 ec 0c             	sub    esp,0xc
c001e38b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e38f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e394:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e399:	6a 00                	push   0x0
c001e39b:	56                   	push   esi
c001e39c:	57                   	push   edi
c001e39d:	55                   	push   ebp
c001e39e:	e8 9f f1 ff ff       	call   c001d542 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e3a3:	6a 00                	push   0x0
c001e3a5:	56                   	push   esi
c001e3a6:	57                   	push   edi
c001e3a7:	55                   	push   ebp
c001e3a8:	e8 65 fc ff ff       	call   c001e012 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e3ad:	83 c4 20             	add    esp,0x20
c001e3b0:	6a 00                	push   0x0
c001e3b2:	56                   	push   esi
c001e3b3:	57                   	push   edi
c001e3b4:	55                   	push   ebp
c001e3b5:	e8 ac f1 ff ff       	call   c001d566 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e3ba:	83 c4 10             	add    esp,0x10
c001e3bd:	84 c0                	test   al,al
c001e3bf:	79 27                	jns    c001e3e8 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e3c1:	bb 01 00 00 00       	mov    ebx,0x1
c001e3c6:	53                   	push   ebx
c001e3c7:	56                   	push   esi
c001e3c8:	57                   	push   edi
c001e3c9:	55                   	push   ebp
c001e3ca:	e8 73 f1 ff ff       	call   c001d542 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e3cf:	83 c4 10             	add    esp,0x10
c001e3d2:	66 40                	inc    ax
c001e3d4:	74 0c                	je     c001e3e2 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001e3d6:	53                   	push   ebx
c001e3d7:	56                   	push   esi
c001e3d8:	57                   	push   edi
c001e3d9:	55                   	push   ebp
c001e3da:	e8 33 fc ff ff       	call   c001e012 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e3df:	83 c4 10             	add    esp,0x10
c001e3e2:	43                   	inc    ebx
c001e3e3:	83 fb 08             	cmp    ebx,0x8
c001e3e6:	75 de                	jne    c001e3c6 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e3e8:	83 c4 0c             	add    esp,0xc
c001e3eb:	5b                   	pop    ebx
c001e3ec:	5e                   	pop    esi
c001e3ed:	5f                   	pop    edi
c001e3ee:	5d                   	pop    ebp
c001e3ef:	c3                   	ret    

c001e3f0 <PCI::detect()>:
c001e3f0:	56                   	push   esi
c001e3f1:	53                   	push   ebx
c001e3f2:	53                   	push   ebx
c001e3f3:	31 db                	xor    ebx,ebx
c001e3f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e3f9:	6a 00                	push   0x0
c001e3fb:	6a 00                	push   0x0
c001e3fd:	6a 00                	push   0x0
c001e3ff:	56                   	push   esi
c001e400:	e8 61 f1 ff ff       	call   c001d566 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e405:	83 c4 10             	add    esp,0x10
c001e408:	a8 80                	test   al,0x80
c001e40a:	75 21                	jne    c001e42d <PCI::detect()+0x3d>
c001e40c:	51                   	push   ecx
c001e40d:	51                   	push   ecx
c001e40e:	6a 00                	push   0x0
c001e410:	56                   	push   esi
c001e411:	e8 98 f7 ff ff       	call   c001dbae <PCI::checkBus(unsigned char)>
c001e416:	83 c4 10             	add    esp,0x10
c001e419:	eb 24                	jmp    c001e43f <PCI::detect()+0x4f>
c001e41b:	52                   	push   edx
c001e41c:	52                   	push   edx
c001e41d:	53                   	push   ebx
c001e41e:	43                   	inc    ebx
c001e41f:	56                   	push   esi
c001e420:	e8 89 f7 ff ff       	call   c001dbae <PCI::checkBus(unsigned char)>
c001e425:	83 c4 10             	add    esp,0x10
c001e428:	83 fb 08             	cmp    ebx,0x8
c001e42b:	74 12                	je     c001e43f <PCI::detect()+0x4f>
c001e42d:	53                   	push   ebx
c001e42e:	6a 00                	push   0x0
c001e430:	6a 00                	push   0x0
c001e432:	56                   	push   esi
c001e433:	e8 0a f1 ff ff       	call   c001d542 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e438:	83 c4 10             	add    esp,0x10
c001e43b:	66 40                	inc    ax
c001e43d:	74 dc                	je     c001e41b <PCI::detect()+0x2b>
c001e43f:	58                   	pop    eax
c001e440:	5b                   	pop    ebx
c001e441:	5e                   	pop    esi
c001e442:	c3                   	ret    
c001e443:	90                   	nop

c001e444 <IDE::close(int, int, void*)>:
c001e444:	83 c8 ff             	or     eax,0xffffffff
c001e447:	c3                   	ret    

c001e448 <IDE::IDE()>:
c001e448:	83 ec 0c             	sub    esp,0xc
c001e44b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e44f:	83 ec 08             	sub    esp,0x8
c001e452:	68 b0 68 02 c0       	push   0xc00268b0
c001e457:	50                   	push   eax
c001e458:	e8 8f 01 ff ff       	call   c000e5ec <HardDiskController::HardDiskController(char const*)>
c001e45d:	83 c4 10             	add    esp,0x10
c001e460:	ba 40 69 02 c0       	mov    edx,0xc0026940
c001e465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e469:	89 10                	mov    DWORD PTR [eax],edx
c001e46b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e46f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e476:	90                   	nop
c001e477:	83 c4 0c             	add    esp,0xc
c001e47a:	c3                   	ret    
c001e47b:	90                   	nop

c001e47c <IDE::prepareInterrupt(unsigned char)>:
c001e47c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e481:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e485:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e48d:	c3                   	ret    

c001e48e <selectDrive(unsigned char, unsigned char)>:
c001e48e:	c3                   	ret    
c001e48f:	90                   	nop

c001e490 <IDE::getBase(unsigned char)>:
c001e490:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e495:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e499:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e4a1:	c3                   	ret    

c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e4a2:	55                   	push   ebp
c001e4a3:	57                   	push   edi
c001e4a4:	56                   	push   esi
c001e4a5:	53                   	push   ebx
c001e4a6:	83 ec 1c             	sub    esp,0x1c
c001e4a9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e4ad:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e4b1:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e4b4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e4b8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e4bc:	80 f9 03             	cmp    cl,0x3
c001e4bf:	77 51                	ja     c001e512 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001e4c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4c5:	0f b6 f2             	movzx  esi,dl
c001e4c8:	0f b6 db             	movzx  ebx,bl
c001e4cb:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e4ce:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001e4d2:	83 ca 80             	or     edx,0xffffff80
c001e4d5:	0f b6 d2             	movzx  edx,dl
c001e4d8:	52                   	push   edx
c001e4d9:	6a 0c                	push   0xc
c001e4db:	56                   	push   esi
c001e4dc:	57                   	push   edi
c001e4dd:	e8 c0 ff ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e4e2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001e4e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e4eb:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e4ef:	ee                   	out    dx,al
c001e4f0:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001e4f5:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001e4f9:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001e4fd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e501:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e509:	83 c4 2c             	add    esp,0x2c
c001e50c:	5b                   	pop    ebx
c001e50d:	5e                   	pop    esi
c001e50e:	5f                   	pop    edi
c001e50f:	5d                   	pop    ebp
c001e510:	eb 90                	jmp    c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e512:	80 fb 07             	cmp    bl,0x7
c001e515:	77 12                	ja     c001e529 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001e517:	0f b6 d2             	movzx  edx,dl
c001e51a:	0f b6 db             	movzx  ebx,bl
c001e51d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001e525:	89 da                	mov    edx,ebx
c001e527:	eb 2f                	jmp    c001e558 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e529:	80 fb 0d             	cmp    bl,0xd
c001e52c:	77 13                	ja     c001e541 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001e52e:	0f b6 d2             	movzx  edx,dl
c001e531:	0f b6 db             	movzx  ebx,bl
c001e534:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001e53b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e53f:	eb 17                	jmp    c001e558 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e541:	80 fb 15             	cmp    bl,0x15
c001e544:	77 13                	ja     c001e559 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e546:	0f b6 d2             	movzx  edx,dl
c001e549:	0f b6 db             	movzx  ebx,bl
c001e54c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001e554:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e558:	ee                   	out    dx,al
c001e559:	83 c4 1c             	add    esp,0x1c
c001e55c:	5b                   	pop    ebx
c001e55d:	5e                   	pop    esi
c001e55e:	5f                   	pop    edi
c001e55f:	5d                   	pop    ebp
c001e560:	c3                   	ret    
c001e561:	90                   	nop

c001e562 <IDE::read(unsigned char, unsigned char)>:
c001e562:	55                   	push   ebp
c001e563:	57                   	push   edi
c001e564:	56                   	push   esi
c001e565:	53                   	push   ebx
c001e566:	83 ec 1c             	sub    esp,0x1c
c001e569:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e56d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e571:	8d 43 f8             	lea    eax,[ebx-0x8]
c001e574:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e578:	3c 03                	cmp    al,0x3
c001e57a:	77 43                	ja     c001e5bf <IDE::read(unsigned char, unsigned char)+0x5d>
c001e57c:	0f b6 f2             	movzx  esi,dl
c001e57f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e582:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001e586:	83 c8 80             	or     eax,0xffffff80
c001e589:	0f b6 c0             	movzx  eax,al
c001e58c:	50                   	push   eax
c001e58d:	6a 0c                	push   0xc
c001e58f:	56                   	push   esi
c001e590:	57                   	push   edi
c001e591:	e8 0c ff ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e596:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001e59b:	0f b6 c3             	movzx  eax,bl
c001e59e:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001e5a2:	ec                   	in     al,dx
c001e5a3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e5a7:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001e5ac:	52                   	push   edx
c001e5ad:	6a 0c                	push   0xc
c001e5af:	56                   	push   esi
c001e5b0:	57                   	push   edi
c001e5b1:	e8 ec fe ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e5b6:	83 c4 20             	add    esp,0x20
c001e5b9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e5bd:	eb 49                	jmp    c001e608 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e5bf:	80 fb 07             	cmp    bl,0x7
c001e5c2:	77 12                	ja     c001e5d6 <IDE::read(unsigned char, unsigned char)+0x74>
c001e5c4:	0f b6 d2             	movzx  edx,dl
c001e5c7:	0f b6 c3             	movzx  eax,bl
c001e5ca:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001e5d2:	89 c2                	mov    edx,eax
c001e5d4:	eb 31                	jmp    c001e607 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e5d6:	80 fb 0d             	cmp    bl,0xd
c001e5d9:	77 13                	ja     c001e5ee <IDE::read(unsigned char, unsigned char)+0x8c>
c001e5db:	0f b6 d2             	movzx  edx,dl
c001e5de:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001e5e5:	0f b6 d3             	movzx  edx,bl
c001e5e8:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e5ec:	eb 19                	jmp    c001e607 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e5ee:	31 c0                	xor    eax,eax
c001e5f0:	80 fb 15             	cmp    bl,0x15
c001e5f3:	77 13                	ja     c001e608 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e5f5:	0f b6 d2             	movzx  edx,dl
c001e5f8:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001e600:	0f b6 d3             	movzx  edx,bl
c001e603:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e607:	ec                   	in     al,dx
c001e608:	83 c4 1c             	add    esp,0x1c
c001e60b:	5b                   	pop    ebx
c001e60c:	5e                   	pop    esi
c001e60d:	5f                   	pop    edi
c001e60e:	5d                   	pop    ebp
c001e60f:	c3                   	ret    

c001e610 <IDE::waitInterrupt(unsigned char)>:
c001e610:	55                   	push   ebp
c001e611:	57                   	push   edi
c001e612:	56                   	push   esi
c001e613:	53                   	push   ebx
c001e614:	31 db                	xor    ebx,ebx
c001e616:	83 ec 0c             	sub    esp,0xc
c001e619:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e61d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e622:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e62a:	89 e8                	mov    eax,ebp
c001e62c:	84 c0                	test   al,al
c001e62e:	75 30                	jne    c001e660 <IDE::waitInterrupt(unsigned char)+0x50>
c001e630:	50                   	push   eax
c001e631:	6a 0c                	push   0xc
c001e633:	56                   	push   esi
c001e634:	57                   	push   edi
c001e635:	e8 28 ff ff ff       	call   c001e562 <IDE::read(unsigned char, unsigned char)>
c001e63a:	83 c4 10             	add    esp,0x10
c001e63d:	a8 01                	test   al,0x1
c001e63f:	75 27                	jne    c001e668 <IDE::waitInterrupt(unsigned char)+0x58>
c001e641:	f6 c3 04             	test   bl,0x4
c001e644:	75 12                	jne    c001e658 <IDE::waitInterrupt(unsigned char)+0x48>
c001e646:	83 fb 32             	cmp    ebx,0x32
c001e649:	7e 0d                	jle    c001e658 <IDE::waitInterrupt(unsigned char)+0x48>
c001e64b:	83 ec 0c             	sub    esp,0xc
c001e64e:	6a 64                	push   0x64
c001e650:	e8 c3 a3 ff ff       	call   c0018a18 <milliTenthSleep(unsigned int)>
c001e655:	83 c4 10             	add    esp,0x10
c001e658:	83 fb 3c             	cmp    ebx,0x3c
c001e65b:	74 0b                	je     c001e668 <IDE::waitInterrupt(unsigned char)+0x58>
c001e65d:	43                   	inc    ebx
c001e65e:	eb c2                	jmp    c001e622 <IDE::waitInterrupt(unsigned char)+0x12>
c001e660:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e668:	83 c4 0c             	add    esp,0xc
c001e66b:	89 e8                	mov    eax,ebp
c001e66d:	5b                   	pop    ebx
c001e66e:	5e                   	pop    esi
c001e66f:	5f                   	pop    edi
c001e670:	5d                   	pop    ebp
c001e671:	c3                   	ret    

c001e672 <ideChannel0IRQHandler(regs*, void*)>:
c001e672:	83 ec 10             	sub    esp,0x10
c001e675:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e679:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e680:	6a 07                	push   0x7
c001e682:	6a 00                	push   0x0
c001e684:	50                   	push   eax
c001e685:	e8 d8 fe ff ff       	call   c001e562 <IDE::read(unsigned char, unsigned char)>
c001e68a:	83 c4 1c             	add    esp,0x1c
c001e68d:	c3                   	ret    

c001e68e <ideChannel1IRQHandler(regs*, void*)>:
c001e68e:	83 ec 10             	sub    esp,0x10
c001e691:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e695:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e69c:	6a 07                	push   0x7
c001e69e:	6a 01                	push   0x1
c001e6a0:	50                   	push   eax
c001e6a1:	e8 bc fe ff ff       	call   c001e562 <IDE::read(unsigned char, unsigned char)>
c001e6a6:	83 c4 1c             	add    esp,0x1c
c001e6a9:	c3                   	ret    

c001e6aa <IDE::enableIRQs(unsigned char, bool)>:
c001e6aa:	57                   	push   edi
c001e6ab:	56                   	push   esi
c001e6ac:	be 04 00 00 00       	mov    esi,0x4
c001e6b1:	53                   	push   ebx
c001e6b2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e6b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e6bb:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e6c0:	0f 94 c0             	sete   al
c001e6c3:	d1 e0                	shl    eax,1
c001e6c5:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001e6cc:	0f b6 c0             	movzx  eax,al
c001e6cf:	50                   	push   eax
c001e6d0:	6a 0c                	push   0xc
c001e6d2:	57                   	push   edi
c001e6d3:	53                   	push   ebx
c001e6d4:	e8 c9 fd ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e6d9:	83 c4 10             	add    esp,0x10
c001e6dc:	50                   	push   eax
c001e6dd:	6a 0c                	push   0xc
c001e6df:	57                   	push   edi
c001e6e0:	53                   	push   ebx
c001e6e1:	e8 7c fe ff ff       	call   c001e562 <IDE::read(unsigned char, unsigned char)>
c001e6e6:	83 c4 10             	add    esp,0x10
c001e6e9:	4e                   	dec    esi
c001e6ea:	75 f0                	jne    c001e6dc <IDE::enableIRQs(unsigned char, bool)+0x32>
c001e6ec:	5b                   	pop    ebx
c001e6ed:	5e                   	pop    esi
c001e6ee:	5f                   	pop    edi
c001e6ef:	c3                   	ret    

c001e6f0 <IDE::open(int, int, void*)>:
c001e6f0:	55                   	push   ebp
c001e6f1:	57                   	push   edi
c001e6f2:	56                   	push   esi
c001e6f3:	53                   	push   ebx
c001e6f4:	83 ec 1c             	sub    esp,0x1c
c001e6f7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e6fb:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e704:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e70d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e714:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001e71b:	0f 85 b0 02 00 00    	jne    c001e9d1 <IDE::open(int, int, void*)+0x2e1>
c001e721:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001e727:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001e72b:	83 e0 7f             	and    eax,0x7f
c001e72e:	3c 05                	cmp    al,0x5
c001e730:	74 04                	je     c001e736 <IDE::open(int, int, void*)+0x46>
c001e732:	3c 0f                	cmp    al,0xf
c001e734:	75 32                	jne    c001e768 <IDE::open(int, int, void*)+0x78>
c001e736:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001e73c:	83 e0 fc             	and    eax,0xfffffffc
c001e73f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e746:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001e74c:	83 e0 fc             	and    eax,0xfffffffc
c001e74f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e756:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001e75c:	83 e0 fc             	and    eax,0xfffffffc
c001e75f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e766:	eb 14                	jmp    c001e77c <IDE::open(int, int, void*)+0x8c>
c001e768:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001e772:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001e77c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e783:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001e78a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e78e:	89 c6                	mov    esi,eax
c001e790:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e795:	c1 e6 10             	shl    esi,0x10
c001e798:	89 e8                	mov    eax,ebp
c001e79a:	89 fa                	mov    edx,edi
c001e79c:	c1 e0 0b             	shl    eax,0xb
c001e79f:	09 f0                	or     eax,esi
c001e7a1:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001e7a8:	c1 e6 08             	shl    esi,0x8
c001e7ab:	09 c6                	or     esi,eax
c001e7ad:	89 f0                	mov    eax,esi
c001e7af:	0d 08 00 00 80       	or     eax,0x80000008
c001e7b4:	ef                   	out    dx,eax
c001e7b5:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001e7ba:	89 ca                	mov    edx,ecx
c001e7bc:	ed                   	in     eax,dx
c001e7bd:	c1 e8 10             	shr    eax,0x10
c001e7c0:	3d ff ff 00 00       	cmp    eax,0xffff
c001e7c5:	0f 84 f5 00 00 00    	je     c001e8c0 <IDE::open(int, int, void*)+0x1d0>
c001e7cb:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001e7d1:	89 fa                	mov    edx,edi
c001e7d3:	89 f0                	mov    eax,esi
c001e7d5:	ef                   	out    dx,eax
c001e7d6:	b0 fe                	mov    al,0xfe
c001e7d8:	89 ca                	mov    edx,ecx
c001e7da:	ee                   	out    dx,al
c001e7db:	89 f0                	mov    eax,esi
c001e7dd:	89 fa                	mov    edx,edi
c001e7df:	ef                   	out    dx,eax
c001e7e0:	89 ca                	mov    edx,ecx
c001e7e2:	ed                   	in     eax,dx
c001e7e3:	3c fe                	cmp    al,0xfe
c001e7e5:	0f 85 a9 00 00 00    	jne    c001e894 <IDE::open(int, int, void*)+0x1a4>
c001e7eb:	8b 15 48 80 02 c0    	mov    edx,DWORD PTR ds:0xc0028048
c001e7f1:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001e7f8:	74 33                	je     c001e82d <IDE::open(int, int, void*)+0x13d>
c001e7fa:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001e800:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001e804:	40                   	inc    eax
c001e805:	83 ec 0c             	sub    esp,0xc
c001e808:	0f b6 c0             	movzx  eax,al
c001e80b:	50                   	push   eax
c001e80c:	55                   	push   ebp
c001e80d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e811:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001e817:	51                   	push   ecx
c001e818:	e8 8b 39 ff ff       	call   c00121a8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001e81d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001e822:	83 c4 1c             	add    esp,0x1c
c001e825:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e82b:	eb 0a                	jmp    c001e837 <IDE::open(int, int, void*)+0x147>
c001e82d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001e837:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e83e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e845:	c1 e1 10             	shl    ecx,0x10
c001e848:	c1 e0 08             	shl    eax,0x8
c001e84b:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e850:	09 c1                	or     ecx,eax
c001e852:	89 fa                	mov    edx,edi
c001e854:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e85b:	c1 e0 0b             	shl    eax,0xb
c001e85e:	09 c1                	or     ecx,eax
c001e860:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e866:	89 c8                	mov    eax,ecx
c001e868:	ef                   	out    dx,eax
c001e869:	be fc 0c 00 00       	mov    esi,0xcfc
c001e86e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001e874:	89 f2                	mov    edx,esi
c001e876:	ee                   	out    dx,al
c001e877:	89 c8                	mov    eax,ecx
c001e879:	89 fa                	mov    edx,edi
c001e87b:	ef                   	out    dx,eax
c001e87c:	89 f2                	mov    edx,esi
c001e87e:	ed                   	in     eax,dx
c001e87f:	0f b6 c0             	movzx  eax,al
c001e882:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001e888:	74 46                	je     c001e8d0 <IDE::open(int, int, void*)+0x1e0>
c001e88a:	83 ec 0c             	sub    esp,0xc
c001e88d:	68 c8 68 02 c0       	push   0xc00268c8
c001e892:	eb 34                	jmp    c001e8c8 <IDE::open(int, int, void*)+0x1d8>
c001e894:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001e89d:	75 17                	jne    c001e8b6 <IDE::open(int, int, void*)+0x1c6>
c001e89f:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001e8a4:	74 07                	je     c001e8ad <IDE::open(int, int, void*)+0x1bd>
c001e8a6:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001e8ab:	75 09                	jne    c001e8b6 <IDE::open(int, int, void*)+0x1c6>
c001e8ad:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e8b4:	eb 1a                	jmp    c001e8d0 <IDE::open(int, int, void*)+0x1e0>
c001e8b6:	83 ec 0c             	sub    esp,0xc
c001e8b9:	68 d0 68 02 c0       	push   0xc00268d0
c001e8be:	eb 08                	jmp    c001e8c8 <IDE::open(int, int, void*)+0x1d8>
c001e8c0:	83 ec 0c             	sub    esp,0xc
c001e8c3:	68 01 69 02 c0       	push   0xc0026901
c001e8c8:	e8 ee 60 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c001e8cd:	83 c4 10             	add    esp,0x10
c001e8d0:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001e8d7:	79 1a                	jns    c001e8f3 <IDE::open(int, int, void*)+0x203>
c001e8d9:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001e8df:	83 e0 fc             	and    eax,0xfffffffc
c001e8e2:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001e8e9:	83 c0 08             	add    eax,0x8
c001e8ec:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001e8f3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001e8f9:	89 c2                	mov    edx,eax
c001e8fb:	83 e2 0f             	and    edx,0xf
c001e8fe:	66 83 fa 08          	cmp    dx,0x8
c001e902:	75 0a                	jne    c001e90e <IDE::open(int, int, void*)+0x21e>
c001e904:	83 e8 02             	sub    eax,0x2
c001e907:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e90e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001e914:	89 c2                	mov    edx,eax
c001e916:	83 e2 0f             	and    edx,0xf
c001e919:	66 83 fa 08          	cmp    dx,0x8
c001e91d:	75 0a                	jne    c001e929 <IDE::open(int, int, void*)+0x239>
c001e91f:	83 e8 02             	sub    eax,0x2
c001e922:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e929:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001e930:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001e937:	89 d0                	mov    eax,edx
c001e939:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e93c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e940:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001e944:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e947:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e94c:	0f b6 c9             	movzx  ecx,cl
c001e94f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001e956:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e959:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e95d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001e961:	8d 50 02             	lea    edx,[eax+0x2]
c001e964:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001e969:	0f b6 d2             	movzx  edx,dl
c001e96c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001e972:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e975:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e979:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001e97d:	8d 48 03             	lea    ecx,[eax+0x3]
c001e980:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e985:	0f b6 c9             	movzx  ecx,cl
c001e988:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001e98e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e991:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e995:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001e999:	8d 50 04             	lea    edx,[eax+0x4]
c001e99c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001e9a2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001e9a7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001e9ae:	66 85 f6             	test   si,si
c001e9b1:	74 5b                	je     c001ea0e <IDE::open(int, int, void*)+0x31e>
c001e9b3:	0f b6 d2             	movzx  edx,dl
c001e9b6:	83 c0 05             	add    eax,0x5
c001e9b9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e9bc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e9c0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001e9c4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001e9ca:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e9cf:	eb 3d                	jmp    c001ea0e <IDE::open(int, int, void*)+0x31e>
c001e9d1:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001e9d7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e9de:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e9e5:	66 05 06 02          	add    ax,0x206
c001e9e9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e9f0:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001e9f7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e9fe:	66 05 06 02          	add    ax,0x206
c001ea02:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ea09:	e9 e5 fe ff ff       	jmp    c001e8f3 <IDE::open(int, int, void*)+0x203>
c001ea0e:	50                   	push   eax
c001ea0f:	50                   	push   eax
c001ea10:	6a 00                	push   0x0
c001ea12:	53                   	push   ebx
c001ea13:	e8 64 fa ff ff       	call   c001e47c <IDE::prepareInterrupt(unsigned char)>
c001ea18:	5a                   	pop    edx
c001ea19:	59                   	pop    ecx
c001ea1a:	6a 01                	push   0x1
c001ea1c:	53                   	push   ebx
c001ea1d:	e8 5a fa ff ff       	call   c001e47c <IDE::prepareInterrupt(unsigned char)>
c001ea22:	83 c4 0c             	add    esp,0xc
c001ea25:	6a 00                	push   0x0
c001ea27:	6a 00                	push   0x0
c001ea29:	53                   	push   ebx
c001ea2a:	e8 7b fc ff ff       	call   c001e6aa <IDE::enableIRQs(unsigned char, bool)>
c001ea2f:	83 c4 0c             	add    esp,0xc
c001ea32:	6a 00                	push   0x0
c001ea34:	6a 01                	push   0x1
c001ea36:	53                   	push   ebx
c001ea37:	e8 6e fc ff ff       	call   c001e6aa <IDE::enableIRQs(unsigned char, bool)>
c001ea3c:	83 c4 10             	add    esp,0x10
c001ea3f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001ea46:	74 34                	je     c001ea7c <IDE::open(int, int, void*)+0x38c>
c001ea48:	83 ec 0c             	sub    esp,0xc
c001ea4b:	53                   	push   ebx
c001ea4c:	6a 01                	push   0x1
c001ea4e:	68 72 e6 01 c0       	push   0xc001e672
c001ea53:	6a 0e                	push   0xe
c001ea55:	53                   	push   ebx
c001ea56:	e8 5b f7 fe ff       	call   c000e1b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ea5b:	83 c4 14             	add    esp,0x14
c001ea5e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ea64:	53                   	push   ebx
c001ea65:	6a 01                	push   0x1
c001ea67:	68 8e e6 01 c0       	push   0xc001e68e
c001ea6c:	6a 0f                	push   0xf
c001ea6e:	53                   	push   ebx
c001ea6f:	e8 42 f7 fe ff       	call   c000e1b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ea74:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001ea7a:	eb 38                	jmp    c001eab4 <IDE::open(int, int, void*)+0x3c4>
c001ea7c:	83 ec 0c             	sub    esp,0xc
c001ea7f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ea89:	53                   	push   ebx
c001ea8a:	6a 00                	push   0x0
c001ea8c:	68 72 e6 01 c0       	push   0xc001e672
c001ea91:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ea97:	53                   	push   ebx
c001ea98:	e8 19 f7 fe ff       	call   c000e1b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ea9d:	83 c4 14             	add    esp,0x14
c001eaa0:	53                   	push   ebx
c001eaa1:	6a 00                	push   0x0
c001eaa3:	68 8e e6 01 c0       	push   0xc001e68e
c001eaa8:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001eaae:	53                   	push   ebx
c001eaaf:	e8 02 f7 fe ff       	call   c000e1b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eab4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001eab6:	83 c4 20             	add    esp,0x20
c001eab9:	83 ec 0c             	sub    esp,0xc
c001eabc:	53                   	push   ebx
c001eabd:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001eac0:	83 c4 0c             	add    esp,0xc
c001eac3:	6a 07                	push   0x7
c001eac5:	6a 00                	push   0x0
c001eac7:	53                   	push   ebx
c001eac8:	e8 95 fa ff ff       	call   c001e562 <IDE::read(unsigned char, unsigned char)>
c001eacd:	83 c4 0c             	add    esp,0xc
c001ead0:	6a 07                	push   0x7
c001ead2:	6a 01                	push   0x1
c001ead4:	53                   	push   ebx
c001ead5:	e8 88 fa ff ff       	call   c001e562 <IDE::read(unsigned char, unsigned char)>
c001eada:	83 c4 0c             	add    esp,0xc
c001eadd:	6a 01                	push   0x1
c001eadf:	6a 00                	push   0x0
c001eae1:	53                   	push   ebx
c001eae2:	e8 c3 fb ff ff       	call   c001e6aa <IDE::enableIRQs(unsigned char, bool)>
c001eae7:	83 c4 0c             	add    esp,0xc
c001eaea:	6a 01                	push   0x1
c001eaec:	6a 01                	push   0x1
c001eaee:	53                   	push   ebx
c001eaef:	e8 b6 fb ff ff       	call   c001e6aa <IDE::enableIRQs(unsigned char, bool)>
c001eaf4:	83 c4 2c             	add    esp,0x2c
c001eaf7:	31 c0                	xor    eax,eax
c001eaf9:	5b                   	pop    ebx
c001eafa:	5e                   	pop    esi
c001eafb:	5f                   	pop    edi
c001eafc:	5d                   	pop    ebp
c001eafd:	c3                   	ret    

c001eafe <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001eafe:	55                   	push   ebp
c001eaff:	57                   	push   edi
c001eb00:	56                   	push   esi
c001eb01:	53                   	push   ebx
c001eb02:	83 ec 1c             	sub    esp,0x1c
c001eb05:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eb09:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001eb0d:	8d 50 f8             	lea    edx,[eax-0x8]
c001eb10:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001eb14:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001eb18:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001eb1c:	80 fa 03             	cmp    dl,0x3
c001eb1f:	77 5d                	ja     c001eb7e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001eb21:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eb25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001eb29:	0f b6 db             	movzx  ebx,bl
c001eb2c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001eb2f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001eb33:	83 ca 80             	or     edx,0xffffff80
c001eb36:	0f b6 d2             	movzx  edx,dl
c001eb39:	52                   	push   edx
c001eb3a:	6a 0c                	push   0xc
c001eb3c:	53                   	push   ebx
c001eb3d:	56                   	push   esi
c001eb3e:	e8 5f f9 ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb43:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001eb48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eb4c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001eb50:	0f b6 c0             	movzx  eax,al
c001eb53:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001eb57:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001eb59:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001eb5e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001eb62:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001eb66:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001eb6a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001eb72:	83 c4 2c             	add    esp,0x2c
c001eb75:	5b                   	pop    ebx
c001eb76:	5e                   	pop    esi
c001eb77:	5f                   	pop    edi
c001eb78:	5d                   	pop    ebp
c001eb79:	e9 24 f9 ff ff       	jmp    c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb7e:	3c 07                	cmp    al,0x7
c001eb80:	77 10                	ja     c001eb92 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001eb82:	0f b6 db             	movzx  ebx,bl
c001eb85:	0f b6 d0             	movzx  edx,al
c001eb88:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001eb90:	eb 2d                	jmp    c001ebbf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001eb92:	3c 0d                	cmp    al,0xd
c001eb94:	77 13                	ja     c001eba9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001eb96:	0f b6 db             	movzx  ebx,bl
c001eb99:	0f b6 c0             	movzx  eax,al
c001eb9c:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001eba3:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001eba7:	eb 16                	jmp    c001ebbf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001eba9:	3c 15                	cmp    al,0x15
c001ebab:	77 14                	ja     c001ebc1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001ebad:	0f b6 db             	movzx  ebx,bl
c001ebb0:	0f b6 c0             	movzx  eax,al
c001ebb3:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001ebbb:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001ebbf:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ebc1:	83 c4 1c             	add    esp,0x1c
c001ebc4:	5b                   	pop    ebx
c001ebc5:	5e                   	pop    esi
c001ebc6:	5f                   	pop    edi
c001ebc7:	5d                   	pop    ebp
c001ebc8:	c3                   	ret    
c001ebc9:	90                   	nop

c001ebca <IDE::detect()>:
c001ebca:	55                   	push   ebp
c001ebcb:	57                   	push   edi
c001ebcc:	56                   	push   esi
c001ebcd:	53                   	push   ebx
c001ebce:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ebd4:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001ebdb:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001ebe2:	0f 85 97 02 00 00    	jne    c001ee7f <IDE::detect()+0x2b5>
c001ebe8:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001ebef:	31 f6                	xor    esi,esi
c001ebf1:	31 ed                	xor    ebp,ebp
c001ebf3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ebfb:	89 e8                	mov    eax,ebp
c001ebfd:	c1 e0 06             	shl    eax,0x6
c001ec00:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001ec08:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ec0c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ec10:	c1 e0 04             	shl    eax,0x4
c001ec13:	83 c8 a0             	or     eax,0xffffffa0
c001ec16:	0f b6 c0             	movzx  eax,al
c001ec19:	50                   	push   eax
c001ec1a:	6a 06                	push   0x6
c001ec1c:	56                   	push   esi
c001ec1d:	53                   	push   ebx
c001ec1e:	e8 7f f8 ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec23:	83 c4 0c             	add    esp,0xc
c001ec26:	6a 0c                	push   0xc
c001ec28:	56                   	push   esi
c001ec29:	53                   	push   ebx
c001ec2a:	e8 33 f9 ff ff       	call   c001e562 <IDE::read(unsigned char, unsigned char)>
c001ec2f:	83 c4 0c             	add    esp,0xc
c001ec32:	6a 0c                	push   0xc
c001ec34:	56                   	push   esi
c001ec35:	53                   	push   ebx
c001ec36:	e8 27 f9 ff ff       	call   c001e562 <IDE::read(unsigned char, unsigned char)>
c001ec3b:	83 c4 0c             	add    esp,0xc
c001ec3e:	6a 0c                	push   0xc
c001ec40:	56                   	push   esi
c001ec41:	53                   	push   ebx
c001ec42:	e8 1b f9 ff ff       	call   c001e562 <IDE::read(unsigned char, unsigned char)>
c001ec47:	83 c4 0c             	add    esp,0xc
c001ec4a:	6a 0c                	push   0xc
c001ec4c:	56                   	push   esi
c001ec4d:	53                   	push   ebx
c001ec4e:	e8 0f f9 ff ff       	call   c001e562 <IDE::read(unsigned char, unsigned char)>
c001ec53:	68 ec 00 00 00       	push   0xec
c001ec58:	6a 07                	push   0x7
c001ec5a:	56                   	push   esi
c001ec5b:	53                   	push   ebx
c001ec5c:	e8 41 f8 ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec61:	83 c4 1c             	add    esp,0x1c
c001ec64:	6a 0c                	push   0xc
c001ec66:	56                   	push   esi
c001ec67:	53                   	push   ebx
c001ec68:	e8 f5 f8 ff ff       	call   c001e562 <IDE::read(unsigned char, unsigned char)>
c001ec6d:	83 c4 0c             	add    esp,0xc
c001ec70:	6a 0c                	push   0xc
c001ec72:	56                   	push   esi
c001ec73:	53                   	push   ebx
c001ec74:	e8 e9 f8 ff ff       	call   c001e562 <IDE::read(unsigned char, unsigned char)>
c001ec79:	83 c4 0c             	add    esp,0xc
c001ec7c:	6a 0c                	push   0xc
c001ec7e:	56                   	push   esi
c001ec7f:	53                   	push   ebx
c001ec80:	e8 dd f8 ff ff       	call   c001e562 <IDE::read(unsigned char, unsigned char)>
c001ec85:	83 c4 0c             	add    esp,0xc
c001ec88:	6a 0c                	push   0xc
c001ec8a:	56                   	push   esi
c001ec8b:	53                   	push   ebx
c001ec8c:	e8 d1 f8 ff ff       	call   c001e562 <IDE::read(unsigned char, unsigned char)>
c001ec91:	83 c4 0c             	add    esp,0xc
c001ec94:	6a 0c                	push   0xc
c001ec96:	56                   	push   esi
c001ec97:	53                   	push   ebx
c001ec98:	e8 c5 f8 ff ff       	call   c001e562 <IDE::read(unsigned char, unsigned char)>
c001ec9d:	83 c4 10             	add    esp,0x10
c001eca0:	84 c0                	test   al,al
c001eca2:	0f 84 5f 01 00 00    	je     c001ee07 <IDE::detect()+0x23d>
c001eca8:	31 ff                	xor    edi,edi
c001ecaa:	50                   	push   eax
c001ecab:	6a 0c                	push   0xc
c001ecad:	56                   	push   esi
c001ecae:	53                   	push   ebx
c001ecaf:	e8 ae f8 ff ff       	call   c001e562 <IDE::read(unsigned char, unsigned char)>
c001ecb4:	83 c4 10             	add    esp,0x10
c001ecb7:	a8 01                	test   al,0x1
c001ecb9:	0f 85 69 01 00 00    	jne    c001ee28 <IDE::detect()+0x25e>
c001ecbf:	84 c0                	test   al,al
c001ecc1:	78 04                	js     c001ecc7 <IDE::detect()+0xfd>
c001ecc3:	a8 08                	test   al,0x8
c001ecc5:	75 23                	jne    c001ecea <IDE::detect()+0x120>
c001ecc7:	47                   	inc    edi
c001ecc8:	81 ff 17 01 00 00    	cmp    edi,0x117
c001ecce:	7e da                	jle    c001ecaa <IDE::detect()+0xe0>
c001ecd0:	83 ec 0c             	sub    esp,0xc
c001ecd3:	6a 32                	push   0x32
c001ecd5:	e8 3e 9d ff ff       	call   c0018a18 <milliTenthSleep(unsigned int)>
c001ecda:	83 c4 10             	add    esp,0x10
c001ecdd:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001ece3:	75 c5                	jne    c001ecaa <IDE::detect()+0xe0>
c001ece5:	e9 3e 01 00 00       	jmp    c001ee28 <IDE::detect()+0x25e>
c001ecea:	31 c9                	xor    ecx,ecx
c001ecec:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001ecf0:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ecf4:	83 ec 0c             	sub    esp,0xc
c001ecf7:	68 80 00 00 00       	push   0x80
c001ecfc:	57                   	push   edi
c001ecfd:	6a 00                	push   0x0
c001ecff:	56                   	push   esi
c001ed00:	53                   	push   ebx
c001ed01:	e8 f8 fd ff ff       	call   c001eafe <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001ed06:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001ed0b:	89 e8                	mov    eax,ebp
c001ed0d:	89 d1                	mov    ecx,edx
c001ed0f:	c1 e0 06             	shl    eax,0x6
c001ed12:	01 d8                	add    eax,ebx
c001ed14:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001ed1b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001ed22:	89 f2                	mov    edx,esi
c001ed24:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001ed2a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001ed2e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001ed34:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ed38:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001ed3f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001ed47:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001ed4e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001ed56:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001ed5c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001ed63:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001ed69:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ed6d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ed71:	83 c4 20             	add    esp,0x20
c001ed74:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001ed77:	83 c0 02             	add    eax,0x2
c001ed7a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001ed80:	83 c7 02             	add    edi,0x2
c001ed83:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001ed86:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001ed8c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001ed90:	75 e2                	jne    c001ed74 <IDE::detect()+0x1aa>
c001ed92:	89 e8                	mov    eax,ebp
c001ed94:	c1 e0 06             	shl    eax,0x6
c001ed97:	01 d8                	add    eax,ebx
c001ed99:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001ed9f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001eda6:	66 c1 ea 09          	shr    dx,0x9
c001edaa:	83 e2 01             	and    edx,0x1
c001edad:	84 c9                	test   cl,cl
c001edaf:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001edb5:	75 22                	jne    c001edd9 <IDE::detect()+0x20f>
c001edb7:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001edbe:	74 46                	je     c001ee06 <IDE::detect()+0x23c>
c001edc0:	83 ec 0c             	sub    esp,0xc
c001edc3:	68 7c 01 00 00       	push   0x17c
c001edc8:	e8 42 ac fe ff       	call   c0009a0f <malloc>
c001edcd:	89 c7                	mov    edi,eax
c001edcf:	89 04 24             	mov    DWORD PTR [esp],eax
c001edd2:	e8 97 07 00 00       	call   c001f56e <ATA::ATA()>
c001edd7:	eb 17                	jmp    c001edf0 <IDE::detect()+0x226>
c001edd9:	83 ec 0c             	sub    esp,0xc
c001eddc:	68 80 01 00 00       	push   0x180
c001ede1:	e8 29 ac fe ff       	call   c0009a0f <malloc>
c001ede6:	89 c7                	mov    edi,eax
c001ede8:	89 04 24             	mov    DWORD PTR [esp],eax
c001edeb:	e8 06 0e 00 00       	call   c001fbf6 <ATAPI::ATAPI()>
c001edf0:	5a                   	pop    edx
c001edf1:	59                   	pop    ecx
c001edf2:	57                   	push   edi
c001edf3:	53                   	push   ebx
c001edf4:	e8 45 f4 fe ff       	call   c000e23e <Device::addChild(Device*)>
c001edf9:	8b 07                	mov    eax,DWORD PTR [edi]
c001edfb:	53                   	push   ebx
c001edfc:	55                   	push   ebp
c001edfd:	6a 00                	push   0x0
c001edff:	57                   	push   edi
c001ee00:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ee03:	83 c4 20             	add    esp,0x20
c001ee06:	45                   	inc    ebp
c001ee07:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001ee0c:	74 0d                	je     c001ee1b <IDE::detect()+0x251>
c001ee0e:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001ee16:	e9 e0 fd ff ff       	jmp    c001ebfb <IDE::detect()+0x31>
c001ee1b:	4e                   	dec    esi
c001ee1c:	74 61                	je     c001ee7f <IDE::detect()+0x2b5>
c001ee1e:	be 01 00 00 00       	mov    esi,0x1
c001ee23:	e9 cb fd ff ff       	jmp    c001ebf3 <IDE::detect()+0x29>
c001ee28:	50                   	push   eax
c001ee29:	6a 04                	push   0x4
c001ee2b:	56                   	push   esi
c001ee2c:	53                   	push   ebx
c001ee2d:	e8 30 f7 ff ff       	call   c001e562 <IDE::read(unsigned char, unsigned char)>
c001ee32:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ee36:	83 c4 0c             	add    esp,0xc
c001ee39:	6a 05                	push   0x5
c001ee3b:	56                   	push   esi
c001ee3c:	53                   	push   ebx
c001ee3d:	e8 20 f7 ff ff       	call   c001e562 <IDE::read(unsigned char, unsigned char)>
c001ee42:	83 c4 10             	add    esp,0x10
c001ee45:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001ee49:	80 fa 14             	cmp    dl,0x14
c001ee4c:	75 04                	jne    c001ee52 <IDE::detect()+0x288>
c001ee4e:	3c eb                	cmp    al,0xeb
c001ee50:	eb 07                	jmp    c001ee59 <IDE::detect()+0x28f>
c001ee52:	3c 96                	cmp    al,0x96
c001ee54:	75 b1                	jne    c001ee07 <IDE::detect()+0x23d>
c001ee56:	80 fa 69             	cmp    dl,0x69
c001ee59:	75 ac                	jne    c001ee07 <IDE::detect()+0x23d>
c001ee5b:	68 a1 00 00 00       	push   0xa1
c001ee60:	6a 07                	push   0x7
c001ee62:	56                   	push   esi
c001ee63:	53                   	push   ebx
c001ee64:	e8 39 f6 ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee69:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001ee70:	e8 a3 9b ff ff       	call   c0018a18 <milliTenthSleep(unsigned int)>
c001ee75:	83 c4 10             	add    esp,0x10
c001ee78:	b1 01                	mov    cl,0x1
c001ee7a:	e9 6d fe ff ff       	jmp    c001ecec <IDE::detect()+0x122>
c001ee7f:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ee85:	5b                   	pop    ebx
c001ee86:	5e                   	pop    esi
c001ee87:	5f                   	pop    edi
c001ee88:	5d                   	pop    ebp
c001ee89:	c3                   	ret    

c001ee8a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001ee8a:	55                   	push   ebp
c001ee8b:	57                   	push   edi
c001ee8c:	56                   	push   esi
c001ee8d:	53                   	push   ebx
c001ee8e:	83 ec 1c             	sub    esp,0x1c
c001ee91:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ee95:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ee99:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ee9d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001eea1:	88 c3                	mov    bl,al
c001eea3:	84 c0                	test   al,al
c001eea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eea9:	0f 84 81 00 00 00    	je     c001ef30 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001eeaf:	83 ec 0c             	sub    esp,0xc
c001eeb2:	68 2b 69 02 c0       	push   0xc002692b
c001eeb7:	e8 43 de fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001eebc:	83 c4 10             	add    esp,0x10
c001eebf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eec3:	3c 01                	cmp    al,0x1
c001eec5:	74 63                	je     c001ef2a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001eec7:	3c 02                	cmp    al,0x2
c001eec9:	75 53                	jne    c001ef1e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001eecb:	d1 e6                	shl    esi,1
c001eecd:	09 ee                	or     esi,ebp
c001eecf:	50                   	push   eax
c001eed0:	89 f0                	mov    eax,esi
c001eed2:	6a 01                	push   0x1
c001eed4:	0f b6 f0             	movzx  esi,al
c001eed7:	c1 e6 06             	shl    esi,0x6
c001eeda:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001eee2:	50                   	push   eax
c001eee3:	57                   	push   edi
c001eee4:	e8 79 f6 ff ff       	call   c001e562 <IDE::read(unsigned char, unsigned char)>
c001eee9:	83 c4 10             	add    esp,0x10
c001eeec:	a8 01                	test   al,0x1
c001eeee:	74 02                	je     c001eef2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001eef0:	b3 07                	mov    bl,0x7
c001eef2:	a8 02                	test   al,0x2
c001eef4:	74 02                	je     c001eef8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001eef6:	b3 03                	mov    bl,0x3
c001eef8:	a8 04                	test   al,0x4
c001eefa:	74 02                	je     c001eefe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001eefc:	b3 14                	mov    bl,0x14
c001eefe:	a8 08                	test   al,0x8
c001ef00:	74 02                	je     c001ef04 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001ef02:	b3 03                	mov    bl,0x3
c001ef04:	a8 10                	test   al,0x10
c001ef06:	74 02                	je     c001ef0a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001ef08:	b3 15                	mov    bl,0x15
c001ef0a:	a8 20                	test   al,0x20
c001ef0c:	74 02                	je     c001ef10 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001ef0e:	b3 03                	mov    bl,0x3
c001ef10:	a8 40                	test   al,0x40
c001ef12:	74 02                	je     c001ef16 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001ef14:	b3 16                	mov    bl,0x16
c001ef16:	84 c0                	test   al,al
c001ef18:	79 16                	jns    c001ef30 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ef1a:	b3 0d                	mov    bl,0xd
c001ef1c:	eb 12                	jmp    c001ef30 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ef1e:	3c 03                	cmp    al,0x3
c001ef20:	74 0c                	je     c001ef2e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001ef22:	3c 04                	cmp    al,0x4
c001ef24:	75 0a                	jne    c001ef30 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ef26:	b3 08                	mov    bl,0x8
c001ef28:	eb 06                	jmp    c001ef30 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ef2a:	b3 13                	mov    bl,0x13
c001ef2c:	eb 02                	jmp    c001ef30 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ef2e:	b3 17                	mov    bl,0x17
c001ef30:	83 c4 1c             	add    esp,0x1c
c001ef33:	88 d8                	mov    al,bl
c001ef35:	5b                   	pop    ebx
c001ef36:	5e                   	pop    esi
c001ef37:	5f                   	pop    edi
c001ef38:	5d                   	pop    ebp
c001ef39:	c3                   	ret    

c001ef3a <IDE::polling(unsigned char, unsigned int)>:
c001ef3a:	57                   	push   edi
c001ef3b:	56                   	push   esi
c001ef3c:	53                   	push   ebx
c001ef3d:	bb 04 00 00 00       	mov    ebx,0x4
c001ef42:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001ef46:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ef4b:	52                   	push   edx
c001ef4c:	6a 0c                	push   0xc
c001ef4e:	56                   	push   esi
c001ef4f:	57                   	push   edi
c001ef50:	e8 0d f6 ff ff       	call   c001e562 <IDE::read(unsigned char, unsigned char)>
c001ef55:	83 c4 10             	add    esp,0x10
c001ef58:	4b                   	dec    ebx
c001ef59:	75 f0                	jne    c001ef4b <IDE::polling(unsigned char, unsigned int)+0x11>
c001ef5b:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ef60:	50                   	push   eax
c001ef61:	6a 0c                	push   0xc
c001ef63:	56                   	push   esi
c001ef64:	57                   	push   edi
c001ef65:	e8 f8 f5 ff ff       	call   c001e562 <IDE::read(unsigned char, unsigned char)>
c001ef6a:	83 c4 10             	add    esp,0x10
c001ef6d:	a8 01                	test   al,0x1
c001ef6f:	75 17                	jne    c001ef88 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001ef71:	a8 20                	test   al,0x20
c001ef73:	75 0f                	jne    c001ef84 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001ef75:	4b                   	dec    ebx
c001ef76:	74 10                	je     c001ef88 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001ef78:	84 c0                	test   al,al
c001ef7a:	78 e4                	js     c001ef60 <IDE::polling(unsigned char, unsigned int)+0x26>
c001ef7c:	a8 08                	test   al,0x8
c001ef7e:	74 e0                	je     c001ef60 <IDE::polling(unsigned char, unsigned int)+0x26>
c001ef80:	31 c0                	xor    eax,eax
c001ef82:	eb 06                	jmp    c001ef8a <IDE::polling(unsigned char, unsigned int)+0x50>
c001ef84:	b0 01                	mov    al,0x1
c001ef86:	eb 02                	jmp    c001ef8a <IDE::polling(unsigned char, unsigned int)+0x50>
c001ef88:	b0 02                	mov    al,0x2
c001ef8a:	5b                   	pop    ebx
c001ef8b:	5e                   	pop    esi
c001ef8c:	5f                   	pop    edi
c001ef8d:	c3                   	ret    

c001ef8e <SATABus::close(int, int, void*)>:
c001ef8e:	31 c0                	xor    eax,eax
c001ef90:	c3                   	ret    
c001ef91:	90                   	nop

c001ef92 <SATABus::detect()>:
c001ef92:	c3                   	ret    
c001ef93:	90                   	nop

c001ef94 <SATABus::SATABus()>:
c001ef94:	83 ec 0c             	sub    esp,0xc
c001ef97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef9b:	83 ec 08             	sub    esp,0x8
c001ef9e:	68 64 69 02 c0       	push   0xc0026964
c001efa3:	50                   	push   eax
c001efa4:	e8 43 f6 fe ff       	call   c000e5ec <HardDiskController::HardDiskController(char const*)>
c001efa9:	83 c4 10             	add    esp,0x10
c001efac:	ba 94 6a 02 c0       	mov    edx,0xc0026a94
c001efb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb5:	89 10                	mov    DWORD PTR [eax],edx
c001efb7:	83 ec 0c             	sub    esp,0xc
c001efba:	6a 50                	push   0x50
c001efbc:	e8 f0 b1 fe ff       	call   c000a1b1 <Phys::allocateContiguousPages(int)>
c001efc1:	83 c4 10             	add    esp,0x10
c001efc4:	89 c2                	mov    edx,eax
c001efc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efca:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001efd0:	83 ec 0c             	sub    esp,0xc
c001efd3:	6a 50                	push   0x50
c001efd5:	e8 ff c9 fe ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c001efda:	83 c4 10             	add    esp,0x10
c001efdd:	89 c2                	mov    edx,eax
c001efdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001efe9:	a1 70 81 02 c0       	mov    eax,ds:0xc0028170
c001efee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eff2:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001eff8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001effc:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f002:	83 ec 0c             	sub    esp,0xc
c001f005:	6a 03                	push   0x3
c001f007:	6a 50                	push   0x50
c001f009:	51                   	push   ecx
c001f00a:	52                   	push   edx
c001f00b:	50                   	push   eax
c001f00c:	e8 65 d3 fe ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f011:	83 c4 20             	add    esp,0x20
c001f014:	90                   	nop
c001f015:	83 c4 0c             	add    esp,0xc
c001f018:	c3                   	ret    
c001f019:	90                   	nop

c001f01a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f01a:	55                   	push   ebp
c001f01b:	57                   	push   edi
c001f01c:	56                   	push   esi
c001f01d:	53                   	push   ebx
c001f01e:	83 ec 3c             	sub    esp,0x3c
c001f021:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001f025:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001f02c:	74 2d                	je     c001f05b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x41>
c001f02e:	83 ec 0c             	sub    esp,0xc
c001f031:	68 88 69 02 c0       	push   0xc0026988
c001f036:	e8 2e aa fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f03b:	83 c4 10             	add    esp,0x10
c001f03e:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001f045:	75 14                	jne    c001f05b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x41>
c001f047:	e4 60                	in     al,0x60
c001f049:	3c 1c                	cmp    al,0x1c
c001f04b:	74 04                	je     c001f051 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x37>
c001f04d:	3c 5a                	cmp    al,0x5a
c001f04f:	75 f6                	jne    c001f047 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2d>
c001f051:	e4 60                	in     al,0x60
c001f053:	3c 5a                	cmp    al,0x5a
c001f055:	74 fa                	je     c001f051 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x37>
c001f057:	3c 1c                	cmp    al,0x1c
c001f059:	74 f6                	je     c001f051 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x37>
c001f05b:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c001f05e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001f061:	09 c6                	or     esi,eax
c001f063:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f067:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f06d:	8b 38                	mov    edi,DWORD PTR [eax]
c001f06f:	c1 ef 08             	shr    edi,0x8
c001f072:	83 e7 0f             	and    edi,0xf
c001f075:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001f07c:	75 04                	jne    c001f082 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x68>
c001f07e:	31 db                	xor    ebx,ebx
c001f080:	eb 6f                	jmp    c001f0f1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xd7>
c001f082:	83 ec 0c             	sub    esp,0xc
c001f085:	68 9f 69 02 c0       	push   0xc002699f
c001f08a:	e8 da a9 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f08f:	83 c4 10             	add    esp,0x10
c001f092:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001f099:	75 e3                	jne    c001f07e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x64>
c001f09b:	e4 60                	in     al,0x60
c001f09d:	3c 1c                	cmp    al,0x1c
c001f09f:	74 04                	je     c001f0a5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x8b>
c001f0a1:	3c 5a                	cmp    al,0x5a
c001f0a3:	75 f6                	jne    c001f09b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x81>
c001f0a5:	e4 60                	in     al,0x60
c001f0a7:	3c 5a                	cmp    al,0x5a
c001f0a9:	74 fa                	je     c001f0a5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x8b>
c001f0ab:	3c 1c                	cmp    al,0x1c
c001f0ad:	74 f6                	je     c001f0a5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x8b>
c001f0af:	eb cd                	jmp    c001f07e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x64>
c001f0b1:	50                   	push   eax
c001f0b2:	50                   	push   eax
c001f0b3:	68 b6 69 02 c0       	push   0xc00269b6
c001f0b8:	8d 6c 24 1a          	lea    ebp,[esp+0x1a]
c001f0bc:	55                   	push   ebp
c001f0bd:	e8 7e 16 fe ff       	call   c0000740 <strcpy>
c001f0c2:	83 c4 10             	add    esp,0x10
c001f0c5:	89 d8                	mov    eax,ebx
c001f0c7:	b9 0a 00 00 00       	mov    ecx,0xa
c001f0cc:	99                   	cdq    
c001f0cd:	f7 f9                	idiv   ecx
c001f0cf:	83 c0 30             	add    eax,0x30
c001f0d2:	83 c2 30             	add    edx,0x30
c001f0d5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001f0d9:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001f0dd:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001f0e4:	75 11                	jne    c001f0f7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xdd>
c001f0e6:	f7 c6 01 00 00 00    	test   esi,0x1
c001f0ec:	74 34                	je     c001f122 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x108>
c001f0ee:	d1 ee                	shr    esi,1
c001f0f0:	43                   	inc    ebx
c001f0f1:	39 fb                	cmp    ebx,edi
c001f0f3:	75 bc                	jne    c001f0b1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x97>
c001f0f5:	eb 63                	jmp    c001f15a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x140>
c001f0f7:	83 ec 0c             	sub    esp,0xc
c001f0fa:	55                   	push   ebp
c001f0fb:	e8 69 a9 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f100:	83 c4 10             	add    esp,0x10
c001f103:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001f10a:	75 da                	jne    c001f0e6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xcc>
c001f10c:	e4 60                	in     al,0x60
c001f10e:	3c 1c                	cmp    al,0x1c
c001f110:	74 04                	je     c001f116 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xfc>
c001f112:	3c 5a                	cmp    al,0x5a
c001f114:	75 f6                	jne    c001f10c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xf2>
c001f116:	e4 60                	in     al,0x60
c001f118:	3c 5a                	cmp    al,0x5a
c001f11a:	74 fa                	je     c001f116 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xfc>
c001f11c:	3c 1c                	cmp    al,0x1c
c001f11e:	74 f6                	je     c001f116 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xfc>
c001f120:	eb c4                	jmp    c001f0e6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xcc>
c001f122:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001f129:	74 78                	je     c001f1a3 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x189>
c001f12b:	83 ec 0c             	sub    esp,0xc
c001f12e:	68 d0 69 02 c0       	push   0xc00269d0
c001f133:	e8 31 a9 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f138:	83 c4 10             	add    esp,0x10
c001f13b:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001f142:	75 5f                	jne    c001f1a3 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x189>
c001f144:	e4 60                	in     al,0x60
c001f146:	3c 5a                	cmp    al,0x5a
c001f148:	74 04                	je     c001f14e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x134>
c001f14a:	3c 1c                	cmp    al,0x1c
c001f14c:	75 f6                	jne    c001f144 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x12a>
c001f14e:	e4 60                	in     al,0x60
c001f150:	3c 5a                	cmp    al,0x5a
c001f152:	74 fa                	je     c001f14e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x134>
c001f154:	3c 1c                	cmp    al,0x1c
c001f156:	74 f6                	je     c001f14e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x134>
c001f158:	eb 49                	jmp    c001f1a3 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x189>
c001f15a:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001f161:	74 2d                	je     c001f190 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x176>
c001f163:	83 ec 0c             	sub    esp,0xc
c001f166:	68 e7 69 02 c0       	push   0xc00269e7
c001f16b:	e8 f9 a8 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f170:	83 c4 10             	add    esp,0x10
c001f173:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001f17a:	75 14                	jne    c001f190 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x176>
c001f17c:	e4 60                	in     al,0x60
c001f17e:	3c 5a                	cmp    al,0x5a
c001f180:	74 04                	je     c001f186 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x16c>
c001f182:	3c 1c                	cmp    al,0x1c
c001f184:	75 f6                	jne    c001f17c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x162>
c001f186:	e4 60                	in     al,0x60
c001f188:	3c 5a                	cmp    al,0x5a
c001f18a:	74 fa                	je     c001f186 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x16c>
c001f18c:	3c 1c                	cmp    al,0x1c
c001f18e:	74 f6                	je     c001f186 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x16c>
c001f190:	83 ec 0c             	sub    esp,0xc
c001f193:	83 cb ff             	or     ebx,0xffffffff
c001f196:	68 fe 69 02 c0       	push   0xc00269fe
c001f19b:	e8 1b 58 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c001f1a0:	83 c4 10             	add    esp,0x10
c001f1a3:	83 c4 3c             	add    esp,0x3c
c001f1a6:	89 d8                	mov    eax,ebx
c001f1a8:	5b                   	pop    ebx
c001f1a9:	5e                   	pop    esi
c001f1aa:	5f                   	pop    edi
c001f1ab:	5d                   	pop    ebp
c001f1ac:	c3                   	ret    
c001f1ad:	90                   	nop

c001f1ae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f1ae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f1b2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f1b5:	89 c2                	mov    edx,eax
c001f1b7:	c1 ea 08             	shr    edx,0x8
c001f1ba:	83 e2 0f             	and    edx,0xf
c001f1bd:	fe ca                	dec    dl
c001f1bf:	75 31                	jne    c001f1f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f1c1:	83 e0 0f             	and    eax,0xf
c001f1c4:	3c 03                	cmp    al,0x3
c001f1c6:	75 2a                	jne    c001f1f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f1c8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f1cb:	b8 02 00 00 00       	mov    eax,0x2
c001f1d0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f1d6:	74 1c                	je     c001f1f4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f1d8:	b8 04 00 00 00       	mov    eax,0x4
c001f1dd:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f1e3:	74 0f                	je     c001f1f4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f1e5:	31 c0                	xor    eax,eax
c001f1e7:	83 fa 03             	cmp    edx,0x3
c001f1ea:	0f 94 c0             	sete   al
c001f1ed:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f1f1:	c3                   	ret    
c001f1f2:	31 c0                	xor    eax,eax
c001f1f4:	c3                   	ret    
c001f1f5:	90                   	nop

c001f1f6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f1f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f1fa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f1fd:	0f ba e2 0f          	bt     edx,0xf
c001f201:	72 f7                	jb     c001f1fa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f203:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f206:	83 ca 10             	or     edx,0x10
c001f209:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f20c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f20f:	83 ca 01             	or     edx,0x1
c001f212:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f215:	c3                   	ret    

c001f216 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f216:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f21a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f21d:	83 e2 fe             	and    edx,0xfffffffe
c001f220:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f223:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f226:	83 e2 ef             	and    edx,0xffffffef
c001f229:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f22c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f22f:	0f ba e2 0e          	bt     edx,0xe
c001f233:	72 f7                	jb     c001f22c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f235:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f238:	0f ba e2 0f          	bt     edx,0xf
c001f23c:	72 ee                	jb     c001f22c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f23e:	c3                   	ret    
c001f23f:	90                   	nop

c001f240 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f240:	55                   	push   ebp
c001f241:	57                   	push   edi
c001f242:	56                   	push   esi
c001f243:	53                   	push   ebx
c001f244:	83 ec 1c             	sub    esp,0x1c
c001f247:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f24b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f24f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f253:	53                   	push   ebx
c001f254:	89 fd                	mov    ebp,edi
c001f256:	56                   	push   esi
c001f257:	c1 e5 0a             	shl    ebp,0xa
c001f25a:	e8 b7 ff ff ff       	call   c001f216 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f25f:	83 ec 0c             	sub    esp,0xc
c001f262:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f268:	01 e8                	add    eax,ebp
c001f26a:	89 03                	mov    DWORD PTR [ebx],eax
c001f26c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f26e:	68 00 04 00 00       	push   0x400
c001f273:	6a 00                	push   0x0
c001f275:	50                   	push   eax
c001f276:	e8 09 14 fe ff       	call   c0000684 <memset>
c001f27b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f281:	89 fa                	mov    edx,edi
c001f283:	01 e8                	add    eax,ebp
c001f285:	c1 e7 0d             	shl    edi,0xd
c001f288:	89 03                	mov    DWORD PTR [ebx],eax
c001f28a:	c1 e2 08             	shl    edx,0x8
c001f28d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f294:	81 c2 00 80 00 00    	add    edx,0x8000
c001f29a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f29e:	89 d0                	mov    eax,edx
c001f2a0:	83 c4 1c             	add    esp,0x1c
c001f2a3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f2a9:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f2ac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f2af:	68 00 01 00 00       	push   0x100
c001f2b4:	6a 00                	push   0x0
c001f2b6:	50                   	push   eax
c001f2b7:	e8 c8 13 fe ff       	call   c0000684 <memset>
c001f2bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f2c0:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f2c6:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001f2cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f2d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f2d3:	83 c4 10             	add    esp,0x10
c001f2d6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f2dd:	31 ff                	xor    edi,edi
c001f2df:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f2e5:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f2eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f2ef:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f2f5:	83 c5 20             	add    ebp,0x20
c001f2f8:	01 f8                	add    eax,edi
c001f2fa:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f2fd:	52                   	push   edx
c001f2fe:	68 00 01 00 00       	push   0x100
c001f303:	6a 00                	push   0x0
c001f305:	50                   	push   eax
c001f306:	e8 79 13 fe ff       	call   c0000684 <memset>
c001f30b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f30f:	83 c4 10             	add    esp,0x10
c001f312:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f318:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f31f:	01 f8                	add    eax,edi
c001f321:	81 c7 00 01 00 00    	add    edi,0x100
c001f327:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f32a:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f330:	75 b3                	jne    c001f2e5 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001f332:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001f336:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001f33a:	83 c4 1c             	add    esp,0x1c
c001f33d:	5b                   	pop    ebx
c001f33e:	5e                   	pop    esi
c001f33f:	5f                   	pop    edi
c001f340:	5d                   	pop    ebp
c001f341:	e9 b0 fe ff ff       	jmp    c001f1f6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001f346 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f346:	55                   	push   ebp
c001f347:	57                   	push   edi
c001f348:	56                   	push   esi
c001f349:	53                   	push   ebx
c001f34a:	83 ec 0c             	sub    esp,0xc
c001f34d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f351:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001f358:	74 2d                	je     c001f387 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f35a:	83 ec 0c             	sub    esp,0xc
c001f35d:	68 23 6a 02 c0       	push   0xc0026a23
c001f362:	e8 02 a7 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f367:	83 c4 10             	add    esp,0x10
c001f36a:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001f371:	75 14                	jne    c001f387 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f373:	e4 60                	in     al,0x60
c001f375:	3c 1c                	cmp    al,0x1c
c001f377:	74 04                	je     c001f37d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f379:	3c 5a                	cmp    al,0x5a
c001f37b:	75 f6                	jne    c001f373 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001f37d:	e4 60                	in     al,0x60
c001f37f:	3c 5a                	cmp    al,0x5a
c001f381:	74 fa                	je     c001f37d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f383:	3c 1c                	cmp    al,0x1c
c001f385:	74 f6                	je     c001f37d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f387:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f38b:	31 db                	xor    ebx,ebx
c001f38d:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001f390:	f7 c5 01 00 00 00    	test   ebp,0x1
c001f396:	0f 84 78 01 00 00    	je     c001f514 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f39c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f3a0:	89 d8                	mov    eax,ebx
c001f3a2:	c1 e0 07             	shl    eax,0x7
c001f3a5:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001f3ac:	50                   	push   eax
c001f3ad:	50                   	push   eax
c001f3ae:	57                   	push   edi
c001f3af:	56                   	push   esi
c001f3b0:	e8 f9 fd ff ff       	call   c001f1ae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f3b5:	83 c4 10             	add    esp,0x10
c001f3b8:	83 f8 01             	cmp    eax,0x1
c001f3bb:	0f 85 19 01 00 00    	jne    c001f4da <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001f3c1:	50                   	push   eax
c001f3c2:	53                   	push   ebx
c001f3c3:	57                   	push   edi
c001f3c4:	56                   	push   esi
c001f3c5:	e8 76 fe ff ff       	call   c001f240 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f3ca:	83 c4 10             	add    esp,0x10
c001f3cd:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001f3d4:	74 2d                	je     c001f403 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f3d6:	83 ec 0c             	sub    esp,0xc
c001f3d9:	68 38 6a 02 c0       	push   0xc0026a38
c001f3de:	e8 86 a6 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f3e3:	83 c4 10             	add    esp,0x10
c001f3e6:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001f3ed:	75 14                	jne    c001f403 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f3ef:	e4 60                	in     al,0x60
c001f3f1:	3c 1c                	cmp    al,0x1c
c001f3f3:	74 04                	je     c001f3f9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f3f5:	3c 5a                	cmp    al,0x5a
c001f3f7:	75 f6                	jne    c001f3ef <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001f3f9:	e4 60                	in     al,0x60
c001f3fb:	3c 5a                	cmp    al,0x5a
c001f3fd:	74 fa                	je     c001f3f9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f3ff:	3c 1c                	cmp    al,0x1c
c001f401:	74 f6                	je     c001f3f9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f403:	83 ec 0c             	sub    esp,0xc
c001f406:	68 7c 01 00 00       	push   0x17c
c001f40b:	e8 ff a5 fe ff       	call   c0009a0f <malloc>
c001f410:	89 04 24             	mov    DWORD PTR [esp],eax
c001f413:	89 c7                	mov    edi,eax
c001f415:	e8 8e 0f 00 00       	call   c00203a8 <SATA::SATA()>
c001f41a:	83 c4 10             	add    esp,0x10
c001f41d:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001f424:	74 2d                	je     c001f453 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f426:	83 ec 0c             	sub    esp,0xc
c001f429:	68 4d 6a 02 c0       	push   0xc0026a4d
c001f42e:	e8 36 a6 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f433:	83 c4 10             	add    esp,0x10
c001f436:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001f43d:	75 14                	jne    c001f453 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f43f:	e4 60                	in     al,0x60
c001f441:	3c 5a                	cmp    al,0x5a
c001f443:	74 04                	je     c001f449 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f445:	3c 1c                	cmp    al,0x1c
c001f447:	75 f6                	jne    c001f43f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001f449:	e4 60                	in     al,0x60
c001f44b:	3c 5a                	cmp    al,0x5a
c001f44d:	74 fa                	je     c001f449 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f44f:	3c 1c                	cmp    al,0x1c
c001f451:	74 f6                	je     c001f449 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f453:	50                   	push   eax
c001f454:	50                   	push   eax
c001f455:	57                   	push   edi
c001f456:	56                   	push   esi
c001f457:	e8 e2 ed fe ff       	call   c000e23e <Device::addChild(Device*)>
c001f45c:	83 c4 10             	add    esp,0x10
c001f45f:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001f466:	74 2d                	je     c001f495 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f468:	83 ec 0c             	sub    esp,0xc
c001f46b:	68 62 6a 02 c0       	push   0xc0026a62
c001f470:	e8 f4 a5 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f475:	83 c4 10             	add    esp,0x10
c001f478:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001f47f:	75 14                	jne    c001f495 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f481:	e4 60                	in     al,0x60
c001f483:	3c 1c                	cmp    al,0x1c
c001f485:	74 04                	je     c001f48b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f487:	3c 5a                	cmp    al,0x5a
c001f489:	75 f6                	jne    c001f481 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001f48b:	e4 60                	in     al,0x60
c001f48d:	3c 5a                	cmp    al,0x5a
c001f48f:	74 fa                	je     c001f48b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f491:	3c 1c                	cmp    al,0x1c
c001f493:	74 f6                	je     c001f48b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f495:	8b 07                	mov    eax,DWORD PTR [edi]
c001f497:	56                   	push   esi
c001f498:	6a 00                	push   0x0
c001f49a:	53                   	push   ebx
c001f49b:	57                   	push   edi
c001f49c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f49f:	83 c4 10             	add    esp,0x10
c001f4a2:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c001f4a9:	74 69                	je     c001f514 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f4ab:	83 ec 0c             	sub    esp,0xc
c001f4ae:	68 77 6a 02 c0       	push   0xc0026a77
c001f4b3:	e8 b1 a5 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f4b8:	83 c4 10             	add    esp,0x10
c001f4bb:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c001f4c2:	75 50                	jne    c001f514 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f4c4:	e4 60                	in     al,0x60
c001f4c6:	3c 1c                	cmp    al,0x1c
c001f4c8:	74 04                	je     c001f4ce <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f4ca:	3c 5a                	cmp    al,0x5a
c001f4cc:	75 f6                	jne    c001f4c4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001f4ce:	e4 60                	in     al,0x60
c001f4d0:	3c 5a                	cmp    al,0x5a
c001f4d2:	74 fa                	je     c001f4ce <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f4d4:	3c 1c                	cmp    al,0x1c
c001f4d6:	74 f6                	je     c001f4ce <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f4d8:	eb 3a                	jmp    c001f514 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f4da:	83 f8 04             	cmp    eax,0x4
c001f4dd:	75 35                	jne    c001f514 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f4df:	50                   	push   eax
c001f4e0:	53                   	push   ebx
c001f4e1:	57                   	push   edi
c001f4e2:	56                   	push   esi
c001f4e3:	e8 58 fd ff ff       	call   c001f240 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f4e8:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f4ef:	e8 1b a5 fe ff       	call   c0009a0f <malloc>
c001f4f4:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4f7:	89 c7                	mov    edi,eax
c001f4f9:	e8 20 17 00 00       	call   c0020c1e <SATAPI::SATAPI()>
c001f4fe:	5a                   	pop    edx
c001f4ff:	59                   	pop    ecx
c001f500:	57                   	push   edi
c001f501:	56                   	push   esi
c001f502:	e8 37 ed fe ff       	call   c000e23e <Device::addChild(Device*)>
c001f507:	8b 07                	mov    eax,DWORD PTR [edi]
c001f509:	56                   	push   esi
c001f50a:	6a 00                	push   0x0
c001f50c:	53                   	push   ebx
c001f50d:	57                   	push   edi
c001f50e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f511:	83 c4 20             	add    esp,0x20
c001f514:	d1 ed                	shr    ebp,1
c001f516:	43                   	inc    ebx
c001f517:	83 fb 20             	cmp    ebx,0x20
c001f51a:	0f 85 70 fe ff ff    	jne    c001f390 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001f520:	83 c4 0c             	add    esp,0xc
c001f523:	5b                   	pop    ebx
c001f524:	5e                   	pop    esi
c001f525:	5f                   	pop    edi
c001f526:	5d                   	pop    ebp
c001f527:	c3                   	ret    

c001f528 <SATABus::open(int, int, void*)>:
c001f528:	83 ec 14             	sub    esp,0x14
c001f52b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f52f:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001f535:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001f53b:	52                   	push   edx
c001f53c:	50                   	push   eax
c001f53d:	e8 04 fe ff ff       	call   c001f346 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f542:	31 c0                	xor    eax,eax
c001f544:	83 c4 1c             	add    esp,0x1c
c001f547:	c3                   	ret    

c001f548 <ATA::close(int, int, void*)>:
c001f548:	83 ec 0c             	sub    esp,0xc
c001f54b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f54f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f555:	85 c0                	test   eax,eax
c001f557:	74 0c                	je     c001f565 <ATA::close(int, int, void*)+0x1d>
c001f559:	83 ec 0c             	sub    esp,0xc
c001f55c:	8b 10                	mov    edx,DWORD PTR [eax]
c001f55e:	50                   	push   eax
c001f55f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f562:	83 c4 10             	add    esp,0x10
c001f565:	31 c0                	xor    eax,eax
c001f567:	83 c4 0c             	add    esp,0xc
c001f56a:	c3                   	ret    
c001f56b:	90                   	nop

c001f56c <ATA::powerSaving(PowerSavingLevel)>:
c001f56c:	c3                   	ret    
c001f56d:	90                   	nop

c001f56e <ATA::ATA()>:
c001f56e:	83 ec 0c             	sub    esp,0xc
c001f571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f575:	83 ec 04             	sub    esp,0x4
c001f578:	68 00 02 00 00       	push   0x200
c001f57d:	68 d7 6b 02 c0       	push   0xc0026bd7
c001f582:	50                   	push   eax
c001f583:	e8 ee f0 fe ff       	call   c000e676 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f588:	83 c4 10             	add    esp,0x10
c001f58b:	ba 0c 6b 02 c0       	mov    edx,0xc0026b0c
c001f590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f594:	89 10                	mov    DWORD PTR [eax],edx
c001f596:	90                   	nop
c001f597:	83 c4 0c             	add    esp,0xc
c001f59a:	c3                   	ret    
c001f59b:	90                   	nop

c001f59c <ATA::flush(bool)>:
c001f59c:	53                   	push   ebx
c001f59d:	83 ec 08             	sub    esp,0x8
c001f5a0:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001f5a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f5a9:	19 c0                	sbb    eax,eax
c001f5ab:	83 e0 fd             	and    eax,0xfffffffd
c001f5ae:	05 ea 00 00 00       	add    eax,0xea
c001f5b3:	50                   	push   eax
c001f5b4:	6a 07                	push   0x7
c001f5b6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5bd:	50                   	push   eax
c001f5be:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5c4:	e8 d9 ee ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5c9:	83 c4 0c             	add    esp,0xc
c001f5cc:	6a 00                	push   0x0
c001f5ce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5d5:	50                   	push   eax
c001f5d6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5dc:	e8 59 f9 ff ff       	call   c001ef3a <IDE::polling(unsigned char, unsigned int)>
c001f5e1:	83 c4 18             	add    esp,0x18
c001f5e4:	5b                   	pop    ebx
c001f5e5:	c3                   	ret    

c001f5e6 <ATA::readyForCommand()>:
c001f5e6:	56                   	push   esi
c001f5e7:	53                   	push   ebx
c001f5e8:	53                   	push   ebx
c001f5e9:	31 db                	xor    ebx,ebx
c001f5eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f5ef:	51                   	push   ecx
c001f5f0:	6a 0c                	push   0xc
c001f5f2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f5f9:	50                   	push   eax
c001f5fa:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f600:	e8 5d ef ff ff       	call   c001e562 <IDE::read(unsigned char, unsigned char)>
c001f605:	83 c4 10             	add    esp,0x10
c001f608:	a8 88                	test   al,0x88
c001f60a:	74 1f                	je     c001f62b <ATA::readyForCommand()+0x45>
c001f60c:	43                   	inc    ebx
c001f60d:	83 fb 63             	cmp    ebx,0x63
c001f610:	7e dd                	jle    c001f5ef <ATA::readyForCommand()+0x9>
c001f612:	83 ec 0c             	sub    esp,0xc
c001f615:	6a 0a                	push   0xa
c001f617:	e8 fc 93 ff ff       	call   c0018a18 <milliTenthSleep(unsigned int)>
c001f61c:	83 c4 10             	add    esp,0x10
c001f61f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f625:	75 c8                	jne    c001f5ef <ATA::readyForCommand()+0x9>
c001f627:	31 c0                	xor    eax,eax
c001f629:	eb 02                	jmp    c001f62d <ATA::readyForCommand()+0x47>
c001f62b:	b0 01                	mov    al,0x1
c001f62d:	5a                   	pop    edx
c001f62e:	5b                   	pop    ebx
c001f62f:	5e                   	pop    esi
c001f630:	c3                   	ret    
c001f631:	90                   	nop

c001f632 <ATA::access(unsigned long long, int, void*, bool)>:
c001f632:	55                   	push   ebp
c001f633:	57                   	push   edi
c001f634:	56                   	push   esi
c001f635:	53                   	push   ebx
c001f636:	83 ec 38             	sub    esp,0x38
c001f639:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001f63d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001f641:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f645:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f649:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f64d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f651:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001f655:	68 b8 6a 02 c0       	push   0xc0026ab8
c001f65a:	e8 a0 d6 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f65f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f665:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f669:	83 c4 10             	add    esp,0x10
c001f66c:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f672:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f676:	c1 e0 06             	shl    eax,0x6
c001f679:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f681:	74 5d                	je     c001f6e0 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001f683:	89 fa                	mov    edx,edi
c001f685:	89 f0                	mov    eax,esi
c001f687:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001f68b:	c1 ea 1c             	shr    edx,0x1c
c001f68e:	89 d1                	mov    ecx,edx
c001f690:	09 c1                	or     ecx,eax
c001f692:	74 25                	je     c001f6b9 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001f694:	31 ed                	xor    ebp,ebp
c001f696:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f69d:	89 fa                	mov    edx,edi
c001f69f:	89 f0                	mov    eax,esi
c001f6a1:	0f ad d0             	shrd   eax,edx,cl
c001f6a4:	d3 ea                	shr    edx,cl
c001f6a6:	f6 c1 20             	test   cl,0x20
c001f6a9:	74 02                	je     c001f6ad <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001f6ab:	89 d0                	mov    eax,edx
c001f6ad:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001f6b1:	45                   	inc    ebp
c001f6b2:	83 fd 06             	cmp    ebp,0x6
c001f6b5:	75 df                	jne    c001f696 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001f6b7:	eb 76                	jmp    c001f72f <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001f6b9:	89 f0                	mov    eax,esi
c001f6bb:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001f6c0:	89 fa                	mov    edx,edi
c001f6c2:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f6c9:	0f ac d0 10          	shrd   eax,edx,0x10
c001f6cd:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f6d2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f6d6:	c1 ee 18             	shr    esi,0x18
c001f6d9:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f6de:	eb 56                	jmp    c001f736 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f6e0:	6a 00                	push   0x0
c001f6e2:	6a 3f                	push   0x3f
c001f6e4:	57                   	push   edi
c001f6e5:	56                   	push   esi
c001f6e6:	e8 99 31 00 00       	call   c0022884 <__umoddi3>
c001f6eb:	83 c4 10             	add    esp,0x10
c001f6ee:	40                   	inc    eax
c001f6ef:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001f6f3:	6a 00                	push   0x0
c001f6f5:	68 f0 03 00 00       	push   0x3f0
c001f6fa:	57                   	push   edi
c001f6fb:	56                   	push   esi
c001f6fc:	e8 83 30 00 00       	call   c0022784 <__udivdi3>
c001f701:	83 c4 10             	add    esp,0x10
c001f704:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001f709:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f710:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f715:	6a 00                	push   0x0
c001f717:	6a 3f                	push   0x3f
c001f719:	57                   	push   edi
c001f71a:	56                   	push   esi
c001f71b:	e8 64 30 00 00       	call   c0022784 <__udivdi3>
c001f720:	83 c4 10             	add    esp,0x10
c001f723:	89 c6                	mov    esi,eax
c001f725:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f72a:	83 e6 0f             	and    esi,0xf
c001f72d:	eb 07                	jmp    c001f736 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f72f:	31 f6                	xor    esi,esi
c001f731:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001f736:	bf 01 00 00 00       	mov    edi,0x1
c001f73b:	50                   	push   eax
c001f73c:	6a 00                	push   0x0
c001f73e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f745:	50                   	push   eax
c001f746:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f74a:	e8 5b ef ff ff       	call   c001e6aa <IDE::enableIRQs(unsigned char, bool)>
c001f74f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f752:	e8 8f fe ff ff       	call   c001f5e6 <ATA::readyForCommand()>
c001f757:	83 c4 10             	add    esp,0x10
c001f75a:	84 c0                	test   al,al
c001f75c:	0f 84 bc 02 00 00    	je     c001fa1e <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f762:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f768:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f76e:	c1 e0 04             	shl    eax,0x4
c001f771:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001f778:	09 c6                	or     esi,eax
c001f77a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f77f:	75 05                	jne    c001f786 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001f781:	83 ce a0             	or     esi,0xffffffa0
c001f784:	eb 03                	jmp    c001f789 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001f786:	83 ce e0             	or     esi,0xffffffe0
c001f789:	89 f0                	mov    eax,esi
c001f78b:	0f b6 f0             	movzx  esi,al
c001f78e:	56                   	push   esi
c001f78f:	6a 06                	push   0x6
c001f791:	51                   	push   ecx
c001f792:	52                   	push   edx
c001f793:	e8 0a ed ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f798:	83 c4 10             	add    esp,0x10
c001f79b:	6a 00                	push   0x0
c001f79d:	6a 01                	push   0x1
c001f79f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7a6:	50                   	push   eax
c001f7a7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7ad:	e8 f0 ec ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7b2:	83 c4 10             	add    esp,0x10
c001f7b5:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f7ba:	75 6e                	jne    c001f82a <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001f7bc:	6a 00                	push   0x0
c001f7be:	6a 08                	push   0x8
c001f7c0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7c7:	50                   	push   eax
c001f7c8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7ce:	e8 cf ec ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7d3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001f7d8:	50                   	push   eax
c001f7d9:	6a 09                	push   0x9
c001f7db:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7e2:	50                   	push   eax
c001f7e3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7e9:	e8 b4 ec ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7ee:	83 c4 20             	add    esp,0x20
c001f7f1:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001f7f6:	50                   	push   eax
c001f7f7:	6a 0a                	push   0xa
c001f7f9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f800:	50                   	push   eax
c001f801:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f807:	e8 96 ec ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f80c:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001f811:	50                   	push   eax
c001f812:	6a 0b                	push   0xb
c001f814:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f81b:	50                   	push   eax
c001f81c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f822:	e8 7b ec ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f827:	83 c4 20             	add    esp,0x20
c001f82a:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001f82f:	50                   	push   eax
c001f830:	6a 02                	push   0x2
c001f832:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f839:	50                   	push   eax
c001f83a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f840:	e8 5d ec ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f845:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001f84a:	50                   	push   eax
c001f84b:	6a 03                	push   0x3
c001f84d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f854:	50                   	push   eax
c001f855:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f85b:	e8 42 ec ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f860:	83 c4 20             	add    esp,0x20
c001f863:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001f868:	50                   	push   eax
c001f869:	6a 04                	push   0x4
c001f86b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f872:	50                   	push   eax
c001f873:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f879:	e8 24 ec ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f87e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f883:	50                   	push   eax
c001f884:	6a 05                	push   0x5
c001f886:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f88d:	50                   	push   eax
c001f88e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f894:	e8 09 ec ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f899:	83 c4 20             	add    esp,0x20
c001f89c:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f8a1:	0f 94 c0             	sete   al
c001f8a4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f8a9:	74 09                	je     c001f8b4 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001f8ab:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001f8b2:	eb 07                	jmp    c001f8bb <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001f8b4:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001f8bb:	0f b6 c0             	movzx  eax,al
c001f8be:	50                   	push   eax
c001f8bf:	6a 07                	push   0x7
c001f8c1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f8c8:	50                   	push   eax
c001f8c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f8cf:	e8 ce eb ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f8d4:	c7 04 24 c5 6a 02 c0 	mov    DWORD PTR [esp],0xc0026ac5
c001f8db:	e8 1f d4 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f8e0:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001f8e4:	83 c4 10             	add    esp,0x10
c001f8e7:	85 f6                	test   esi,esi
c001f8e9:	0f 84 f7 00 00 00    	je     c001f9e6 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001f8ef:	83 ec 0c             	sub    esp,0xc
c001f8f2:	68 c8 6a 02 c0       	push   0xc0026ac8
c001f8f7:	e8 03 d4 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f8fc:	83 c4 0c             	add    esp,0xc
c001f8ff:	6a 01                	push   0x1
c001f901:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f908:	50                   	push   eax
c001f909:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f90f:	e8 26 f6 ff ff       	call   c001ef3a <IDE::polling(unsigned char, unsigned int)>
c001f914:	c7 04 24 cb 6a 02 c0 	mov    DWORD PTR [esp],0xc0026acb
c001f91b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f91f:	e8 db d3 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f924:	83 c4 10             	add    esp,0x10
c001f927:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001f92b:	84 c0                	test   al,al
c001f92d:	74 2b                	je     c001f95a <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001f92f:	0f b6 f8             	movzx  edi,al
c001f932:	57                   	push   edi
c001f933:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001f93a:	50                   	push   eax
c001f93b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f942:	50                   	push   eax
c001f943:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f949:	e8 3c f5 ff ff       	call   c001ee8a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f94e:	c7 04 24 ce 6a 02 c0 	mov    DWORD PTR [esp],0xc0026ace
c001f955:	e9 bc 00 00 00       	jmp    c001fa16 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001f95a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f95f:	74 50                	je     c001f9b1 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001f961:	83 ec 0c             	sub    esp,0xc
c001f964:	31 ed                	xor    ebp,ebp
c001f966:	68 d9 6a 02 c0       	push   0xc0026ad9
c001f96b:	e8 8f d3 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f970:	83 c4 10             	add    esp,0x10
c001f973:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f977:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001f97b:	50                   	push   eax
c001f97c:	50                   	push   eax
c001f97d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f984:	50                   	push   eax
c001f985:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f98b:	e8 00 eb ff ff       	call   c001e490 <IDE::getBase(unsigned char)>
c001f990:	89 c2                	mov    edx,eax
c001f992:	89 f8                	mov    eax,edi
c001f994:	66 ef                	out    dx,ax
c001f996:	45                   	inc    ebp
c001f997:	83 c4 10             	add    esp,0x10
c001f99a:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001f9a0:	75 d1                	jne    c001f973 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001f9a2:	83 ec 0c             	sub    esp,0xc
c001f9a5:	68 dc 6a 02 c0       	push   0xc0026adc
c001f9aa:	e8 50 d3 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f9af:	eb 24                	jmp    c001f9d5 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001f9b1:	51                   	push   ecx
c001f9b2:	51                   	push   ecx
c001f9b3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f9ba:	50                   	push   eax
c001f9bb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f9c1:	e8 ca ea ff ff       	call   c001e490 <IDE::getBase(unsigned char)>
c001f9c6:	b9 00 01 00 00       	mov    ecx,0x100
c001f9cb:	89 c2                	mov    edx,eax
c001f9cd:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001f9d1:	fc                   	cld    
c001f9d2:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001f9d5:	83 c4 10             	add    esp,0x10
c001f9d8:	4e                   	dec    esi
c001f9d9:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001f9e1:	e9 01 ff ff ff       	jmp    c001f8e7 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001f9e6:	31 ff                	xor    edi,edi
c001f9e8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f9ed:	74 2f                	je     c001fa1e <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f9ef:	83 ec 0c             	sub    esp,0xc
c001f9f2:	68 df 6a 02 c0       	push   0xc0026adf
c001f9f7:	e8 03 d3 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f9fc:	58                   	pop    eax
c001f9fd:	31 c0                	xor    eax,eax
c001f9ff:	5a                   	pop    edx
c001fa00:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001fa05:	0f 94 c0             	sete   al
c001fa08:	50                   	push   eax
c001fa09:	53                   	push   ebx
c001fa0a:	e8 8d fb ff ff       	call   c001f59c <ATA::flush(bool)>
c001fa0f:	c7 04 24 e2 6a 02 c0 	mov    DWORD PTR [esp],0xc0026ae2
c001fa16:	e8 e4 d2 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001fa1b:	83 c4 10             	add    esp,0x10
c001fa1e:	83 c4 2c             	add    esp,0x2c
c001fa21:	89 f8                	mov    eax,edi
c001fa23:	5b                   	pop    ebx
c001fa24:	5e                   	pop    esi
c001fa25:	5f                   	pop    edi
c001fa26:	5d                   	pop    ebp
c001fa27:	c3                   	ret    

c001fa28 <ATA::read(unsigned long long, int, void*)>:
c001fa28:	57                   	push   edi
c001fa29:	b8 04 00 00 00       	mov    eax,0x4
c001fa2e:	56                   	push   esi
c001fa2f:	53                   	push   ebx
c001fa30:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fa34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001fa38:	8d 7a ff             	lea    edi,[edx-0x1]
c001fa3b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fa3f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fa43:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001fa49:	77 25                	ja     c001fa70 <ATA::read(unsigned long long, int, void*)+0x48>
c001fa4b:	b8 06 00 00 00       	mov    eax,0x6
c001fa50:	85 f6                	test   esi,esi
c001fa52:	74 1c                	je     c001fa70 <ATA::read(unsigned long long, int, void*)+0x48>
c001fa54:	50                   	push   eax
c001fa55:	50                   	push   eax
c001fa56:	6a 00                	push   0x0
c001fa58:	56                   	push   esi
c001fa59:	52                   	push   edx
c001fa5a:	53                   	push   ebx
c001fa5b:	51                   	push   ecx
c001fa5c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fa60:	e8 cd fb ff ff       	call   c001f632 <ATA::access(unsigned long long, int, void*, bool)>
c001fa65:	83 c4 20             	add    esp,0x20
c001fa68:	85 c0                	test   eax,eax
c001fa6a:	0f 95 c0             	setne  al
c001fa6d:	0f b6 c0             	movzx  eax,al
c001fa70:	5b                   	pop    ebx
c001fa71:	5e                   	pop    esi
c001fa72:	5f                   	pop    edi
c001fa73:	c3                   	ret    

c001fa74 <ATA::write(unsigned long long, int, void*)>:
c001fa74:	55                   	push   ebp
c001fa75:	57                   	push   edi
c001fa76:	56                   	push   esi
c001fa77:	53                   	push   ebx
c001fa78:	83 ec 18             	sub    esp,0x18
c001fa7b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001fa7f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001fa83:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001fa87:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001fa8b:	68 e5 6a 02 c0       	push   0xc0026ae5
c001fa90:	e8 6a d2 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001fa95:	8d 53 ff             	lea    edx,[ebx-0x1]
c001fa98:	83 c4 10             	add    esp,0x10
c001fa9b:	b8 04 00 00 00       	mov    eax,0x4
c001faa0:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001faa6:	77 25                	ja     c001facd <ATA::write(unsigned long long, int, void*)+0x59>
c001faa8:	b8 06 00 00 00       	mov    eax,0x6
c001faad:	85 f6                	test   esi,esi
c001faaf:	74 1c                	je     c001facd <ATA::write(unsigned long long, int, void*)+0x59>
c001fab1:	50                   	push   eax
c001fab2:	50                   	push   eax
c001fab3:	6a 01                	push   0x1
c001fab5:	56                   	push   esi
c001fab6:	53                   	push   ebx
c001fab7:	55                   	push   ebp
c001fab8:	57                   	push   edi
c001fab9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001fabd:	e8 70 fb ff ff       	call   c001f632 <ATA::access(unsigned long long, int, void*, bool)>
c001fac2:	83 c4 20             	add    esp,0x20
c001fac5:	85 c0                	test   eax,eax
c001fac7:	0f 95 c0             	setne  al
c001faca:	0f b6 c0             	movzx  eax,al
c001facd:	83 c4 0c             	add    esp,0xc
c001fad0:	5b                   	pop    ebx
c001fad1:	5e                   	pop    esi
c001fad2:	5f                   	pop    edi
c001fad3:	5d                   	pop    ebp
c001fad4:	c3                   	ret    
c001fad5:	90                   	nop

c001fad6 <ATA::detectCHS()>:
c001fad6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fada:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001fae0:	c1 e0 06             	shl    eax,0x6
c001fae3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001fae9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001faf3:	c7 44 24 04 f1 6a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026af1
c001fafb:	e9 bb 4e ff ff       	jmp    c00149bb <Krnl::panic(char const*)>

c001fb00 <ATA::open(int, int, void*)>:
c001fb00:	53                   	push   ebx
c001fb01:	83 ec 08             	sub    esp,0x8
c001fb04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fb08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fb0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fb10:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001fb16:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fb1c:	c1 e0 06             	shl    eax,0x6
c001fb1f:	01 d0                	add    eax,edx
c001fb21:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001fb28:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001fb2e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001fb35:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001fb3f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001fb45:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001fb4c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001fb53:	75 0c                	jne    c001fb61 <ATA::open(int, int, void*)+0x61>
c001fb55:	83 ec 0c             	sub    esp,0xc
c001fb58:	53                   	push   ebx
c001fb59:	e8 78 ff ff ff       	call   c001fad6 <ATA::detectCHS()>
c001fb5e:	83 c4 10             	add    esp,0x10
c001fb61:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001fb67:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fb6d:	c1 e0 06             	shl    eax,0x6
c001fb70:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001fb77:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001fb81:	d1 e8                	shr    eax,1
c001fb83:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fb89:	6a 04                	push   0x4
c001fb8b:	6a 0c                	push   0xc
c001fb8d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb94:	50                   	push   eax
c001fb95:	52                   	push   edx
c001fb96:	e8 07 e9 ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb9b:	90                   	nop
c001fb9c:	90                   	nop
c001fb9d:	6a 00                	push   0x0
c001fb9f:	6a 0c                	push   0xc
c001fba1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fba8:	50                   	push   eax
c001fba9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fbaf:	e8 ee e8 ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbb4:	83 c4 14             	add    esp,0x14
c001fbb7:	53                   	push   ebx
c001fbb8:	e8 21 eb fe ff       	call   c000e6de <PhysicalDisk::startCache()>
c001fbbd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fbc0:	e8 8d 0b ff ff       	call   c0010752 <createPartitionsForDisk(PhysicalDisk*)>
c001fbc5:	31 c0                	xor    eax,eax
c001fbc7:	83 c4 18             	add    esp,0x18
c001fbca:	5b                   	pop    ebx
c001fbcb:	c3                   	ret    

c001fbcc <ATAPI::write(unsigned long long, int, void*)>:
c001fbcc:	b8 03 00 00 00       	mov    eax,0x3
c001fbd1:	c3                   	ret    

c001fbd2 <ATAPI::close(int, int, void*)>:
c001fbd2:	83 ec 0c             	sub    esp,0xc
c001fbd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fbdf:	85 c0                	test   eax,eax
c001fbe1:	74 0c                	je     c001fbef <ATAPI::close(int, int, void*)+0x1d>
c001fbe3:	83 ec 0c             	sub    esp,0xc
c001fbe6:	8b 10                	mov    edx,DWORD PTR [eax]
c001fbe8:	50                   	push   eax
c001fbe9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fbec:	83 c4 10             	add    esp,0x10
c001fbef:	31 c0                	xor    eax,eax
c001fbf1:	83 c4 0c             	add    esp,0xc
c001fbf4:	c3                   	ret    
c001fbf5:	90                   	nop

c001fbf6 <ATAPI::ATAPI()>:
c001fbf6:	83 ec 0c             	sub    esp,0xc
c001fbf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbfd:	83 ec 04             	sub    esp,0x4
c001fc00:	68 00 08 00 00       	push   0x800
c001fc05:	68 b1 6d 02 c0       	push   0xc0026db1
c001fc0a:	50                   	push   eax
c001fc0b:	e8 66 ea fe ff       	call   c000e676 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fc10:	83 c4 10             	add    esp,0x10
c001fc13:	ba 44 6b 02 c0       	mov    edx,0xc0026b44
c001fc18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc1c:	89 10                	mov    DWORD PTR [eax],edx
c001fc1e:	90                   	nop
c001fc1f:	83 c4 0c             	add    esp,0xc
c001fc22:	c3                   	ret    
c001fc23:	90                   	nop

c001fc24 <ATAPI::readyForCommand()>:
c001fc24:	56                   	push   esi
c001fc25:	53                   	push   ebx
c001fc26:	53                   	push   ebx
c001fc27:	31 db                	xor    ebx,ebx
c001fc29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fc2d:	51                   	push   ecx
c001fc2e:	6a 0c                	push   0xc
c001fc30:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fc37:	50                   	push   eax
c001fc38:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fc3e:	e8 1f e9 ff ff       	call   c001e562 <IDE::read(unsigned char, unsigned char)>
c001fc43:	83 c4 10             	add    esp,0x10
c001fc46:	a8 88                	test   al,0x88
c001fc48:	74 25                	je     c001fc6f <ATAPI::readyForCommand()+0x4b>
c001fc4a:	43                   	inc    ebx
c001fc4b:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001fc51:	7e da                	jle    c001fc2d <ATAPI::readyForCommand()+0x9>
c001fc53:	83 ec 0c             	sub    esp,0xc
c001fc56:	68 5e 01 00 00       	push   0x15e
c001fc5b:	e8 b8 8d ff ff       	call   c0018a18 <milliTenthSleep(unsigned int)>
c001fc60:	83 c4 10             	add    esp,0x10
c001fc63:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001fc69:	75 c2                	jne    c001fc2d <ATAPI::readyForCommand()+0x9>
c001fc6b:	31 c0                	xor    eax,eax
c001fc6d:	eb 02                	jmp    c001fc71 <ATAPI::readyForCommand()+0x4d>
c001fc6f:	b0 01                	mov    al,0x1
c001fc71:	5a                   	pop    edx
c001fc72:	5b                   	pop    ebx
c001fc73:	5e                   	pop    esi
c001fc74:	c3                   	ret    
c001fc75:	90                   	nop

c001fc76 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001fc76:	55                   	push   ebp
c001fc77:	57                   	push   edi
c001fc78:	56                   	push   esi
c001fc79:	53                   	push   ebx
c001fc7a:	83 ec 20             	sub    esp,0x20
c001fc7d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001fc81:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001fc85:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001fc89:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fc8d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001fc91:	6a 01                	push   0x1
c001fc93:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc9a:	50                   	push   eax
c001fc9b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fca1:	e8 04 ea ff ff       	call   c001e6aa <IDE::enableIRQs(unsigned char, bool)>
c001fca6:	5e                   	pop    esi
c001fca7:	58                   	pop    eax
c001fca8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fcaf:	50                   	push   eax
c001fcb0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fcb6:	e8 c1 e7 ff ff       	call   c001e47c <IDE::prepareInterrupt(unsigned char)>
c001fcbb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001fcbe:	e8 61 ff ff ff       	call   c001fc24 <ATAPI::readyForCommand()>
c001fcc3:	83 c4 10             	add    esp,0x10
c001fcc6:	84 c0                	test   al,al
c001fcc8:	75 0a                	jne    c001fcd4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001fcca:	bb 01 00 00 00       	mov    ebx,0x1
c001fccf:	e9 57 02 00 00       	jmp    c001ff2b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fcd4:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001fcda:	c1 e0 04             	shl    eax,0x4
c001fcdd:	0f b6 c0             	movzx  eax,al
c001fce0:	50                   	push   eax
c001fce1:	6a 06                	push   0x6
c001fce3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fcea:	50                   	push   eax
c001fceb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fcf1:	e8 ac e7 ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fcf6:	6a 00                	push   0x0
c001fcf8:	6a 01                	push   0x1
c001fcfa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd01:	50                   	push   eax
c001fd02:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd08:	e8 95 e7 ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd0d:	83 c4 20             	add    esp,0x20
c001fd10:	0f b6 c3             	movzx  eax,bl
c001fd13:	0f b6 df             	movzx  ebx,bh
c001fd16:	50                   	push   eax
c001fd17:	6a 04                	push   0x4
c001fd19:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd20:	50                   	push   eax
c001fd21:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd27:	e8 76 e7 ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd2c:	53                   	push   ebx
c001fd2d:	6a 05                	push   0x5
c001fd2f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd36:	50                   	push   eax
c001fd37:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd3d:	e8 60 e7 ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd42:	83 c4 20             	add    esp,0x20
c001fd45:	68 a0 00 00 00       	push   0xa0
c001fd4a:	6a 07                	push   0x7
c001fd4c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd53:	50                   	push   eax
c001fd54:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd5a:	e8 43 e7 ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd5f:	83 c4 0c             	add    esp,0xc
c001fd62:	6a 01                	push   0x1
c001fd64:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd6b:	50                   	push   eax
c001fd6c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd72:	e8 c3 f1 ff ff       	call   c001ef3a <IDE::polling(unsigned char, unsigned int)>
c001fd77:	83 c4 10             	add    esp,0x10
c001fd7a:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001fd80:	84 c0                	test   al,al
c001fd82:	74 23                	je     c001fda7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001fd84:	0f b6 d8             	movzx  ebx,al
c001fd87:	0f b6 d2             	movzx  edx,dl
c001fd8a:	53                   	push   ebx
c001fd8b:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001fd92:	50                   	push   eax
c001fd93:	52                   	push   edx
c001fd94:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd9a:	e8 eb f0 ff ff       	call   c001ee8a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fd9f:	83 c4 10             	add    esp,0x10
c001fda2:	e9 84 01 00 00       	jmp    c001ff2b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fda7:	0f b6 d2             	movzx  edx,dl
c001fdaa:	53                   	push   ebx
c001fdab:	53                   	push   ebx
c001fdac:	52                   	push   edx
c001fdad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fdb3:	e8 d8 e6 ff ff       	call   c001e490 <IDE::getBase(unsigned char)>
c001fdb8:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001fdbc:	b9 06 00 00 00       	mov    ecx,0x6
c001fdc1:	89 c2                	mov    edx,eax
c001fdc3:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001fdc6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001fdca:	83 c4 10             	add    esp,0x10
c001fdcd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fdd3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fdda:	85 db                	test   ebx,ebx
c001fddc:	0f 84 ec 00 00 00    	je     c001fece <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001fde2:	51                   	push   ecx
c001fde3:	51                   	push   ecx
c001fde4:	52                   	push   edx
c001fde5:	50                   	push   eax
c001fde6:	e8 25 e8 ff ff       	call   c001e610 <IDE::waitInterrupt(unsigned char)>
c001fdeb:	83 c4 10             	add    esp,0x10
c001fdee:	84 c0                	test   al,al
c001fdf0:	0f 84 d4 fe ff ff    	je     c001fcca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fdf6:	56                   	push   esi
c001fdf7:	56                   	push   esi
c001fdf8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fdff:	50                   	push   eax
c001fe00:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe06:	e8 71 e6 ff ff       	call   c001e47c <IDE::prepareInterrupt(unsigned char)>
c001fe0b:	83 c4 0c             	add    esp,0xc
c001fe0e:	6a 04                	push   0x4
c001fe10:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe17:	50                   	push   eax
c001fe18:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe1e:	e8 3f e7 ff ff       	call   c001e562 <IDE::read(unsigned char, unsigned char)>
c001fe23:	83 c4 0c             	add    esp,0xc
c001fe26:	89 c6                	mov    esi,eax
c001fe28:	6a 05                	push   0x5
c001fe2a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe31:	50                   	push   eax
c001fe32:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe38:	e8 25 e7 ff ff       	call   c001e562 <IDE::read(unsigned char, unsigned char)>
c001fe3d:	89 f1                	mov    ecx,esi
c001fe3f:	0f b6 c0             	movzx  eax,al
c001fe42:	0f b6 f1             	movzx  esi,cl
c001fe45:	c1 e0 08             	shl    eax,0x8
c001fe48:	09 c6                	or     esi,eax
c001fe4a:	d1 fe                	sar    esi,1
c001fe4c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001fe50:	83 c4 10             	add    esp,0x10
c001fe53:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001fe58:	74 41                	je     c001fe9b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001fe5a:	31 c9                	xor    ecx,ecx
c001fe5c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fe62:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fe69:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001fe6d:	75 0a                	jne    c001fe79 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001fe6f:	01 c9                	add    ecx,ecx
c001fe71:	01 cd                	add    ebp,ecx
c001fe73:	4b                   	dec    ebx
c001fe74:	e9 54 ff ff ff       	jmp    c001fdcd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001fe79:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001fe7e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001fe82:	51                   	push   ecx
c001fe83:	51                   	push   ecx
c001fe84:	52                   	push   edx
c001fe85:	50                   	push   eax
c001fe86:	e8 05 e6 ff ff       	call   c001e490 <IDE::getBase(unsigned char)>
c001fe8b:	89 c2                	mov    edx,eax
c001fe8d:	89 f0                	mov    eax,esi
c001fe8f:	66 ef                	out    dx,ax
c001fe91:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001fe95:	83 c4 10             	add    esp,0x10
c001fe98:	41                   	inc    ecx
c001fe99:	eb c1                	jmp    c001fe5c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001fe9b:	31 f6                	xor    esi,esi
c001fe9d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fea3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001feaa:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001feae:	75 06                	jne    c001feb6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001feb0:	01 f6                	add    esi,esi
c001feb2:	01 f5                	add    ebp,esi
c001feb4:	eb bd                	jmp    c001fe73 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001feb6:	51                   	push   ecx
c001feb7:	51                   	push   ecx
c001feb8:	52                   	push   edx
c001feb9:	50                   	push   eax
c001feba:	e8 d1 e5 ff ff       	call   c001e490 <IDE::getBase(unsigned char)>
c001febf:	89 c2                	mov    edx,eax
c001fec1:	66 ed                	in     ax,dx
c001fec3:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001fec8:	83 c4 10             	add    esp,0x10
c001fecb:	46                   	inc    esi
c001fecc:	eb cf                	jmp    c001fe9d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001fece:	51                   	push   ecx
c001fecf:	51                   	push   ecx
c001fed0:	52                   	push   edx
c001fed1:	50                   	push   eax
c001fed2:	e8 39 e7 ff ff       	call   c001e610 <IDE::waitInterrupt(unsigned char)>
c001fed7:	83 c4 10             	add    esp,0x10
c001feda:	84 c0                	test   al,al
c001fedc:	0f 84 e8 fd ff ff    	je     c001fcca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fee2:	bb a0 86 01 00       	mov    ebx,0x186a0
c001fee7:	52                   	push   edx
c001fee8:	52                   	push   edx
c001fee9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fef0:	50                   	push   eax
c001fef1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fef7:	e8 80 e5 ff ff       	call   c001e47c <IDE::prepareInterrupt(unsigned char)>
c001fefc:	83 c4 10             	add    esp,0x10
c001feff:	50                   	push   eax
c001ff00:	50                   	push   eax
c001ff01:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ff08:	50                   	push   eax
c001ff09:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ff0f:	e8 7c e5 ff ff       	call   c001e490 <IDE::getBase(unsigned char)>
c001ff14:	8d 50 07             	lea    edx,[eax+0x7]
c001ff17:	ec                   	in     al,dx
c001ff18:	83 c4 10             	add    esp,0x10
c001ff1b:	a8 88                	test   al,0x88
c001ff1d:	74 0a                	je     c001ff29 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001ff1f:	4b                   	dec    ebx
c001ff20:	75 dd                	jne    c001feff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001ff22:	bb 02 00 00 00       	mov    ebx,0x2
c001ff27:	eb 02                	jmp    c001ff2b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ff29:	31 db                	xor    ebx,ebx
c001ff2b:	83 c4 1c             	add    esp,0x1c
c001ff2e:	89 d8                	mov    eax,ebx
c001ff30:	5b                   	pop    ebx
c001ff31:	5e                   	pop    esi
c001ff32:	5f                   	pop    edi
c001ff33:	5d                   	pop    ebp
c001ff34:	c3                   	ret    
c001ff35:	90                   	nop

c001ff36 <ATAPI::diskRemoved()>:
c001ff36:	83 ec 18             	sub    esp,0x18
c001ff39:	68 bd 6d 02 c0       	push   0xc0026dbd
c001ff3e:	e8 bc cd fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001ff43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff47:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001ff4e:	83 c4 1c             	add    esp,0x1c
c001ff51:	c3                   	ret    

c001ff52 <ATAPI::eject()>:
c001ff52:	57                   	push   edi
c001ff53:	b9 03 00 00 00       	mov    ecx,0x3
c001ff58:	53                   	push   ebx
c001ff59:	83 ec 14             	sub    esp,0x14
c001ff5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ff60:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ff64:	fc                   	cld    
c001ff65:	31 c0                	xor    eax,eax
c001ff67:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ff69:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ff6e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ff73:	50                   	push   eax
c001ff74:	50                   	push   eax
c001ff75:	6a 00                	push   0x0
c001ff77:	6a 00                	push   0x0
c001ff79:	6a 00                	push   0x0
c001ff7b:	6a 02                	push   0x2
c001ff7d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ff81:	50                   	push   eax
c001ff82:	53                   	push   ebx
c001ff83:	e8 ee fc ff ff       	call   c001fc76 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ff88:	83 c4 14             	add    esp,0x14
c001ff8b:	53                   	push   ebx
c001ff8c:	e8 a5 ff ff ff       	call   c001ff36 <ATAPI::diskRemoved()>
c001ff91:	83 c4 24             	add    esp,0x24
c001ff94:	31 c0                	xor    eax,eax
c001ff96:	5b                   	pop    ebx
c001ff97:	5f                   	pop    edi
c001ff98:	c3                   	ret    
c001ff99:	90                   	nop

c001ff9a <ATAPI::diskInserted()>:
c001ff9a:	53                   	push   ebx
c001ff9b:	83 ec 14             	sub    esp,0x14
c001ff9e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ffa2:	68 f1 6d 02 c0       	push   0xc0026df1
c001ffa7:	e8 53 cd fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001ffac:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001ffb3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ffb6:	e8 23 e7 fe ff       	call   c000e6de <PhysicalDisk::startCache()>
c001ffbb:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001ffbf:	83 c4 18             	add    esp,0x18
c001ffc2:	5b                   	pop    ebx
c001ffc3:	e9 8a 07 ff ff       	jmp    c0010752 <createPartitionsForDisk(PhysicalDisk*)>

c001ffc8 <ATAPI::detectMedia()>:
c001ffc8:	56                   	push   esi
c001ffc9:	53                   	push   ebx
c001ffca:	83 ec 28             	sub    esp,0x28
c001ffcd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ffd1:	6a 0c                	push   0xc
c001ffd3:	6a 00                	push   0x0
c001ffd5:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001ffd9:	56                   	push   esi
c001ffda:	e8 a5 06 fe ff       	call   c0000684 <memset>
c001ffdf:	58                   	pop    eax
c001ffe0:	5a                   	pop    edx
c001ffe1:	6a 00                	push   0x0
c001ffe3:	6a 00                	push   0x0
c001ffe5:	6a 00                	push   0x0
c001ffe7:	6a 00                	push   0x0
c001ffe9:	56                   	push   esi
c001ffea:	53                   	push   ebx
c001ffeb:	e8 86 fc ff ff       	call   c001fc76 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fff0:	83 c4 1c             	add    esp,0x1c
c001fff3:	6a 0c                	push   0xc
c001fff5:	6a 00                	push   0x0
c001fff7:	56                   	push   esi
c001fff8:	e8 87 06 fe ff       	call   c0000684 <memset>
c001fffd:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020002:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020007:	59                   	pop    ecx
c0020008:	58                   	pop    eax
c0020009:	6a 01                	push   0x1
c002000b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002000f:	50                   	push   eax
c0020010:	6a 00                	push   0x0
c0020012:	6a 12                	push   0x12
c0020014:	56                   	push   esi
c0020015:	53                   	push   ebx
c0020016:	e8 5b fc ff ff       	call   c001fc76 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002001b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002001f:	83 c4 20             	add    esp,0x20
c0020022:	83 e0 7f             	and    eax,0x7f
c0020025:	3c 70                	cmp    al,0x70
c0020027:	74 15                	je     c002003e <ATAPI::detectMedia()+0x76>
c0020029:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020030:	75 0c                	jne    c002003e <ATAPI::detectMedia()+0x76>
c0020032:	83 ec 0c             	sub    esp,0xc
c0020035:	53                   	push   ebx
c0020036:	e8 5f ff ff ff       	call   c001ff9a <ATAPI::diskInserted()>
c002003b:	83 c4 10             	add    esp,0x10
c002003e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020042:	83 e0 0f             	and    eax,0xf
c0020045:	3c 02                	cmp    al,0x2
c0020047:	75 1b                	jne    c0020064 <ATAPI::detectMedia()+0x9c>
c0020049:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002004e:	75 2d                	jne    c002007d <ATAPI::detectMedia()+0xb5>
c0020050:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020057:	74 24                	je     c002007d <ATAPI::detectMedia()+0xb5>
c0020059:	83 ec 0c             	sub    esp,0xc
c002005c:	53                   	push   ebx
c002005d:	e8 d4 fe ff ff       	call   c001ff36 <ATAPI::diskRemoved()>
c0020062:	eb 16                	jmp    c002007a <ATAPI::detectMedia()+0xb2>
c0020064:	84 c0                	test   al,al
c0020066:	75 15                	jne    c002007d <ATAPI::detectMedia()+0xb5>
c0020068:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002006f:	75 0c                	jne    c002007d <ATAPI::detectMedia()+0xb5>
c0020071:	83 ec 0c             	sub    esp,0xc
c0020074:	53                   	push   ebx
c0020075:	e8 20 ff ff ff       	call   c001ff9a <ATAPI::diskInserted()>
c002007a:	83 c4 10             	add    esp,0x10
c002007d:	83 c4 24             	add    esp,0x24
c0020080:	5b                   	pop    ebx
c0020081:	5e                   	pop    esi
c0020082:	c3                   	ret    
c0020083:	90                   	nop

c0020084 <ATAPI::open(int, int, void*)>:
c0020084:	53                   	push   ebx
c0020085:	83 ec 08             	sub    esp,0x8
c0020088:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002008c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020090:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020094:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002009a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00200a0:	c1 e0 06             	shl    eax,0x6
c00200a3:	01 d0                	add    eax,edx
c00200a5:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00200ac:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00200b2:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00200b9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00200c3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00200c9:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00200d0:	6a 04                	push   0x4
c00200d2:	6a 0c                	push   0xc
c00200d4:	51                   	push   ecx
c00200d5:	52                   	push   edx
c00200d6:	e8 c7 e3 ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00200db:	90                   	nop
c00200dc:	90                   	nop
c00200dd:	6a 00                	push   0x0
c00200df:	6a 0c                	push   0xc
c00200e1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00200e8:	50                   	push   eax
c00200e9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00200ef:	e8 ae e3 ff ff       	call   c001e4a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00200f4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00200fb:	83 c4 14             	add    esp,0x14
c00200fe:	53                   	push   ebx
c00200ff:	e8 c4 fe ff ff       	call   c001ffc8 <ATAPI::detectMedia()>
c0020104:	31 c0                	xor    eax,eax
c0020106:	83 c4 18             	add    esp,0x18
c0020109:	5b                   	pop    ebx
c002010a:	c3                   	ret    
c002010b:	90                   	nop

c002010c <ATAPI::read(unsigned long long, int, void*)>:
c002010c:	55                   	push   ebp
c002010d:	57                   	push   edi
c002010e:	56                   	push   esi
c002010f:	53                   	push   ebx
c0020110:	83 ec 1c             	sub    esp,0x1c
c0020113:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020117:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002011b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002011f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0020126:	74 41                	je     c0020169 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0020128:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002012c:	b9 03 00 00 00       	mov    ecx,0x3
c0020131:	fc                   	cld    
c0020132:	31 c0                	xor    eax,eax
c0020134:	86 fb                	xchg   bl,bh
c0020136:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020138:	c1 c3 10             	rol    ebx,0x10
c002013b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0020140:	89 e8                	mov    eax,ebp
c0020142:	86 fb                	xchg   bl,bh
c0020144:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0020148:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c002014c:	50                   	push   eax
c002014d:	50                   	push   eax
c002014e:	55                   	push   ebp
c002014f:	c1 e5 0b             	shl    ebp,0xb
c0020152:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020156:	6a 00                	push   0x0
c0020158:	55                   	push   ebp
c0020159:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002015d:	50                   	push   eax
c002015e:	56                   	push   esi
c002015f:	e8 12 fb ff ff       	call   c001fc76 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020164:	83 c4 20             	add    esp,0x20
c0020167:	eb 1a                	jmp    c0020183 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0020169:	83 ec 0c             	sub    esp,0xc
c002016c:	56                   	push   esi
c002016d:	e8 56 fe ff ff       	call   c001ffc8 <ATAPI::detectMedia()>
c0020172:	83 c4 10             	add    esp,0x10
c0020175:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002017c:	75 aa                	jne    c0020128 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002017e:	b8 02 00 00 00       	mov    eax,0x2
c0020183:	83 c4 1c             	add    esp,0x1c
c0020186:	5b                   	pop    ebx
c0020187:	5e                   	pop    esi
c0020188:	5f                   	pop    edi
c0020189:	5d                   	pop    ebp
c002018a:	c3                   	ret    
c002018b:	90                   	nop

c002018c <SATA::close(int, int, void*)>:
c002018c:	83 ec 0c             	sub    esp,0xc
c002018f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020193:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020199:	85 c0                	test   eax,eax
c002019b:	74 0c                	je     c00201a9 <SATA::close(int, int, void*)+0x1d>
c002019d:	83 ec 0c             	sub    esp,0xc
c00201a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00201a2:	50                   	push   eax
c00201a3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00201a6:	83 c4 10             	add    esp,0x10
c00201a9:	31 c0                	xor    eax,eax
c00201ab:	83 c4 0c             	add    esp,0xc
c00201ae:	c3                   	ret    
c00201af:	90                   	nop

c00201b0 <SATA::powerSaving(PowerSavingLevel)>:
c00201b0:	c3                   	ret    
c00201b1:	90                   	nop

c00201b2 <SATA::open(int, int, void*)>:
c00201b2:	56                   	push   esi
c00201b3:	53                   	push   ebx
c00201b4:	51                   	push   ecx
c00201b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00201b9:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c00201c0:	74 2d                	je     c00201ef <SATA::open(int, int, void*)+0x3d>
c00201c2:	83 ec 0c             	sub    esp,0xc
c00201c5:	68 74 6b 02 c0       	push   0xc0026b74
c00201ca:	e8 9a 98 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00201cf:	83 c4 10             	add    esp,0x10
c00201d2:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c00201d9:	75 14                	jne    c00201ef <SATA::open(int, int, void*)+0x3d>
c00201db:	e4 60                	in     al,0x60
c00201dd:	3c 5a                	cmp    al,0x5a
c00201df:	74 04                	je     c00201e5 <SATA::open(int, int, void*)+0x33>
c00201e1:	3c 1c                	cmp    al,0x1c
c00201e3:	75 f6                	jne    c00201db <SATA::open(int, int, void*)+0x29>
c00201e5:	e4 60                	in     al,0x60
c00201e7:	3c 5a                	cmp    al,0x5a
c00201e9:	74 fa                	je     c00201e5 <SATA::open(int, int, void*)+0x33>
c00201eb:	3c 1c                	cmp    al,0x1c
c00201ed:	74 f6                	je     c00201e5 <SATA::open(int, int, void*)+0x33>
c00201ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00201f3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00201fd:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020203:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002020d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020211:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002021b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020221:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020228:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c002022f:	74 2d                	je     c002025e <SATA::open(int, int, void*)+0xac>
c0020231:	83 ec 0c             	sub    esp,0xc
c0020234:	68 81 6b 02 c0       	push   0xc0026b81
c0020239:	e8 2b 98 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002023e:	83 c4 10             	add    esp,0x10
c0020241:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c0020248:	75 14                	jne    c002025e <SATA::open(int, int, void*)+0xac>
c002024a:	e4 60                	in     al,0x60
c002024c:	3c 1c                	cmp    al,0x1c
c002024e:	74 04                	je     c0020254 <SATA::open(int, int, void*)+0xa2>
c0020250:	3c 5a                	cmp    al,0x5a
c0020252:	75 f6                	jne    c002024a <SATA::open(int, int, void*)+0x98>
c0020254:	e4 60                	in     al,0x60
c0020256:	3c 5a                	cmp    al,0x5a
c0020258:	74 fa                	je     c0020254 <SATA::open(int, int, void*)+0xa2>
c002025a:	3c 1c                	cmp    al,0x1c
c002025c:	74 f6                	je     c0020254 <SATA::open(int, int, void*)+0xa2>
c002025e:	e8 63 9e fe ff       	call   c000a0c6 <Phys::allocatePage()>
c0020263:	89 c6                	mov    esi,eax
c0020265:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002026b:	81 c6 00 10 00 00    	add    esi,0x1000
c0020271:	e8 50 9e fe ff       	call   c000a0c6 <Phys::allocatePage()>
c0020276:	39 c6                	cmp    esi,eax
c0020278:	74 10                	je     c002028a <SATA::open(int, int, void*)+0xd8>
c002027a:	83 ec 0c             	sub    esp,0xc
c002027d:	68 8e 6b 02 c0       	push   0xc0026b8e
c0020282:	e8 34 47 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0020287:	83 c4 10             	add    esp,0x10
c002028a:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c0020291:	74 2d                	je     c00202c0 <SATA::open(int, int, void*)+0x10e>
c0020293:	83 ec 0c             	sub    esp,0xc
c0020296:	68 a2 6b 02 c0       	push   0xc0026ba2
c002029b:	e8 c9 97 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00202a0:	83 c4 10             	add    esp,0x10
c00202a3:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c00202aa:	75 14                	jne    c00202c0 <SATA::open(int, int, void*)+0x10e>
c00202ac:	e4 60                	in     al,0x60
c00202ae:	3c 1c                	cmp    al,0x1c
c00202b0:	74 04                	je     c00202b6 <SATA::open(int, int, void*)+0x104>
c00202b2:	3c 5a                	cmp    al,0x5a
c00202b4:	75 f6                	jne    c00202ac <SATA::open(int, int, void*)+0xfa>
c00202b6:	e4 60                	in     al,0x60
c00202b8:	3c 5a                	cmp    al,0x5a
c00202ba:	74 fa                	je     c00202b6 <SATA::open(int, int, void*)+0x104>
c00202bc:	3c 1c                	cmp    al,0x1c
c00202be:	74 f6                	je     c00202b6 <SATA::open(int, int, void*)+0x104>
c00202c0:	83 ec 0c             	sub    esp,0xc
c00202c3:	6a 02                	push   0x2
c00202c5:	e8 0f b7 fe ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c00202ca:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00202d0:	6a 03                	push   0x3
c00202d2:	50                   	push   eax
c00202d3:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00202d9:	ff 35 70 81 02 c0    	push   DWORD PTR ds:0xc0028170
c00202df:	e8 9c bd fe ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c00202e4:	83 c4 20             	add    esp,0x20
c00202e7:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c00202ee:	74 2d                	je     c002031d <SATA::open(int, int, void*)+0x16b>
c00202f0:	83 ec 0c             	sub    esp,0xc
c00202f3:	68 af 6b 02 c0       	push   0xc0026baf
c00202f8:	e8 6c 97 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00202fd:	83 c4 10             	add    esp,0x10
c0020300:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c0020307:	75 14                	jne    c002031d <SATA::open(int, int, void*)+0x16b>
c0020309:	e4 60                	in     al,0x60
c002030b:	3c 1c                	cmp    al,0x1c
c002030d:	74 04                	je     c0020313 <SATA::open(int, int, void*)+0x161>
c002030f:	3c 5a                	cmp    al,0x5a
c0020311:	75 f6                	jne    c0020309 <SATA::open(int, int, void*)+0x157>
c0020313:	e4 60                	in     al,0x60
c0020315:	3c 5a                	cmp    al,0x5a
c0020317:	74 fa                	je     c0020313 <SATA::open(int, int, void*)+0x161>
c0020319:	3c 1c                	cmp    al,0x1c
c002031b:	74 f6                	je     c0020313 <SATA::open(int, int, void*)+0x161>
c002031d:	83 ec 0c             	sub    esp,0xc
c0020320:	53                   	push   ebx
c0020321:	e8 b8 e3 fe ff       	call   c000e6de <PhysicalDisk::startCache()>
c0020326:	83 c4 10             	add    esp,0x10
c0020329:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c0020330:	74 2d                	je     c002035f <SATA::open(int, int, void*)+0x1ad>
c0020332:	83 ec 0c             	sub    esp,0xc
c0020335:	68 bc 6b 02 c0       	push   0xc0026bbc
c002033a:	e8 2a 97 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002033f:	83 c4 10             	add    esp,0x10
c0020342:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c0020349:	75 14                	jne    c002035f <SATA::open(int, int, void*)+0x1ad>
c002034b:	e4 60                	in     al,0x60
c002034d:	3c 1c                	cmp    al,0x1c
c002034f:	74 04                	je     c0020355 <SATA::open(int, int, void*)+0x1a3>
c0020351:	3c 5a                	cmp    al,0x5a
c0020353:	75 f6                	jne    c002034b <SATA::open(int, int, void*)+0x199>
c0020355:	e4 60                	in     al,0x60
c0020357:	3c 5a                	cmp    al,0x5a
c0020359:	74 fa                	je     c0020355 <SATA::open(int, int, void*)+0x1a3>
c002035b:	3c 1c                	cmp    al,0x1c
c002035d:	74 f6                	je     c0020355 <SATA::open(int, int, void*)+0x1a3>
c002035f:	83 ec 0c             	sub    esp,0xc
c0020362:	53                   	push   ebx
c0020363:	e8 ea 03 ff ff       	call   c0010752 <createPartitionsForDisk(PhysicalDisk*)>
c0020368:	83 c4 10             	add    esp,0x10
c002036b:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c0020372:	74 2d                	je     c00203a1 <SATA::open(int, int, void*)+0x1ef>
c0020374:	83 ec 0c             	sub    esp,0xc
c0020377:	68 c9 6b 02 c0       	push   0xc0026bc9
c002037c:	e8 e8 96 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020381:	83 c4 10             	add    esp,0x10
c0020384:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c002038b:	75 14                	jne    c00203a1 <SATA::open(int, int, void*)+0x1ef>
c002038d:	e4 60                	in     al,0x60
c002038f:	3c 1c                	cmp    al,0x1c
c0020391:	74 04                	je     c0020397 <SATA::open(int, int, void*)+0x1e5>
c0020393:	3c 5a                	cmp    al,0x5a
c0020395:	75 f6                	jne    c002038d <SATA::open(int, int, void*)+0x1db>
c0020397:	e4 60                	in     al,0x60
c0020399:	3c 5a                	cmp    al,0x5a
c002039b:	74 fa                	je     c0020397 <SATA::open(int, int, void*)+0x1e5>
c002039d:	3c 1c                	cmp    al,0x1c
c002039f:	74 f6                	je     c0020397 <SATA::open(int, int, void*)+0x1e5>
c00203a1:	5a                   	pop    edx
c00203a2:	31 c0                	xor    eax,eax
c00203a4:	5b                   	pop    ebx
c00203a5:	5e                   	pop    esi
c00203a6:	c3                   	ret    
c00203a7:	90                   	nop

c00203a8 <SATA::SATA()>:
c00203a8:	83 ec 0c             	sub    esp,0xc
c00203ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203af:	83 ec 04             	sub    esp,0x4
c00203b2:	68 00 02 00 00       	push   0x200
c00203b7:	68 d6 6b 02 c0       	push   0xc0026bd6
c00203bc:	50                   	push   eax
c00203bd:	e8 b4 e2 fe ff       	call   c000e676 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00203c2:	83 c4 10             	add    esp,0x10
c00203c5:	ba 80 6d 02 c0       	mov    edx,0xc0026d80
c00203ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203ce:	89 10                	mov    DWORD PTR [eax],edx
c00203d0:	90                   	nop
c00203d1:	83 c4 0c             	add    esp,0xc
c00203d4:	c3                   	ret    
c00203d5:	90                   	nop

c00203d6 <SATA::access(unsigned long long, int, void*, bool)>:
c00203d6:	55                   	push   ebp
c00203d7:	57                   	push   edi
c00203d8:	56                   	push   esi
c00203d9:	53                   	push   ebx
c00203da:	83 ec 2c             	sub    esp,0x2c
c00203dd:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00203e1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00203e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00203e9:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c00203f0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00203f4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00203f8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00203fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020400:	75 19                	jne    c002041b <SATA::access(unsigned long long, int, void*, bool)+0x45>
c0020402:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0020407:	7e 41                	jle    c002044a <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020409:	83 ec 0c             	sub    esp,0xc
c002040c:	68 f5 6b 02 c0       	push   0xc0026bf5
c0020411:	e8 a5 45 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0020416:	83 c4 10             	add    esp,0x10
c0020419:	eb 2f                	jmp    c002044a <SATA::access(unsigned long long, int, void*, bool)+0x74>
c002041b:	83 ec 0c             	sub    esp,0xc
c002041e:	68 e6 6b 02 c0       	push   0xc0026be6
c0020423:	e8 41 96 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020428:	83 c4 10             	add    esp,0x10
c002042b:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c0020432:	75 ce                	jne    c0020402 <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020434:	e4 60                	in     al,0x60
c0020436:	3c 1c                	cmp    al,0x1c
c0020438:	74 04                	je     c002043e <SATA::access(unsigned long long, int, void*, bool)+0x68>
c002043a:	3c 5a                	cmp    al,0x5a
c002043c:	75 f6                	jne    c0020434 <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c002043e:	e4 60                	in     al,0x60
c0020440:	3c 5a                	cmp    al,0x5a
c0020442:	74 fa                	je     c002043e <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020444:	3c 1c                	cmp    al,0x1c
c0020446:	74 f6                	je     c002043e <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020448:	eb b8                	jmp    c0020402 <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c002044a:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c0020451:	75 29                	jne    c002047c <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c0020453:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020459:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c002045f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020465:	8d 75 02             	lea    esi,[ebp+0x2]
c0020468:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002046c:	c1 e6 07             	shl    esi,0x7
c002046f:	01 c6                	add    esi,eax
c0020471:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c0020478:	74 4a                	je     c00204c4 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c002047a:	eb 2f                	jmp    c00204ab <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c002047c:	83 ec 0c             	sub    esp,0xc
c002047f:	68 2e 6c 02 c0       	push   0xc0026c2e
c0020484:	e8 e0 95 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020489:	83 c4 10             	add    esp,0x10
c002048c:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c0020493:	75 be                	jne    c0020453 <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020495:	e4 60                	in     al,0x60
c0020497:	3c 1c                	cmp    al,0x1c
c0020499:	74 04                	je     c002049f <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c002049b:	3c 5a                	cmp    al,0x5a
c002049d:	75 f6                	jne    c0020495 <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c002049f:	e4 60                	in     al,0x60
c00204a1:	3c 5a                	cmp    al,0x5a
c00204a3:	74 fa                	je     c002049f <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c00204a5:	3c 1c                	cmp    al,0x1c
c00204a7:	74 f6                	je     c002049f <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c00204a9:	eb a8                	jmp    c0020453 <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c00204ab:	83 ec 0c             	sub    esp,0xc
c00204ae:	68 3d 6c 02 c0       	push   0xc0026c3d
c00204b3:	e8 b1 95 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00204b8:	83 c4 10             	add    esp,0x10
c00204bb:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c00204c2:	74 3d                	je     c0020501 <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c00204c4:	89 e8                	mov    eax,ebp
c00204c6:	c1 e0 07             	shl    eax,0x7
c00204c9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00204cd:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00204d7:	52                   	push   edx
c00204d8:	52                   	push   edx
c00204d9:	56                   	push   esi
c00204da:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c00204e0:	e8 35 eb ff ff       	call   c001f01a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00204e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00204e9:	83 c4 10             	add    esp,0x10
c00204ec:	b8 01 00 00 00       	mov    eax,0x1
c00204f1:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00204f6:	75 1d                	jne    c0020515 <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c00204f8:	e9 c8 04 00 00       	jmp    c00209c5 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c00204fd:	3c 5a                	cmp    al,0x5a
c00204ff:	74 0c                	je     c002050d <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020501:	e4 60                	in     al,0x60
c0020503:	3c 1c                	cmp    al,0x1c
c0020505:	75 f6                	jne    c00204fd <SATA::access(unsigned long long, int, void*, bool)+0x127>
c0020507:	eb 04                	jmp    c002050d <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020509:	3c 1c                	cmp    al,0x1c
c002050b:	75 b7                	jne    c00204c4 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c002050d:	e4 60                	in     al,0x60
c002050f:	3c 5a                	cmp    al,0x5a
c0020511:	74 fa                	je     c002050d <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020513:	eb f4                	jmp    c0020509 <SATA::access(unsigned long long, int, void*, bool)+0x133>
c0020515:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c002051c:	74 3a                	je     c0020558 <SATA::access(unsigned long long, int, void*, bool)+0x182>
c002051e:	83 ec 0c             	sub    esp,0xc
c0020521:	68 4c 6c 02 c0       	push   0xc0026c4c
c0020526:	e8 3e 95 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002052b:	83 c4 10             	add    esp,0x10
c002052e:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c0020535:	74 0d                	je     c0020544 <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c0020537:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002053c:	74 34                	je     c0020572 <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c002053e:	eb 1f                	jmp    c002055f <SATA::access(unsigned long long, int, void*, bool)+0x189>
c0020540:	3c 1c                	cmp    al,0x1c
c0020542:	74 0c                	je     c0020550 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020544:	e4 60                	in     al,0x60
c0020546:	3c 5a                	cmp    al,0x5a
c0020548:	75 f6                	jne    c0020540 <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c002054a:	eb 04                	jmp    c0020550 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c002054c:	3c 1c                	cmp    al,0x1c
c002054e:	75 e7                	jne    c0020537 <SATA::access(unsigned long long, int, void*, bool)+0x161>
c0020550:	e4 60                	in     al,0x60
c0020552:	3c 5a                	cmp    al,0x5a
c0020554:	74 fa                	je     c0020550 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020556:	eb f4                	jmp    c002054c <SATA::access(unsigned long long, int, void*, bool)+0x176>
c0020558:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002055d:	74 1c                	je     c002057b <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c002055f:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0020563:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020569:	c1 e1 09             	shl    ecx,0x9
c002056c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020570:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020572:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c0020579:	75 55                	jne    c00205d0 <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c002057b:	8d 45 02             	lea    eax,[ebp+0x2]
c002057e:	c1 e0 07             	shl    eax,0x7
c0020581:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020585:	8b 38                	mov    edi,DWORD PTR [eax]
c0020587:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002058d:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c0020593:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c0020599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002059d:	c1 e0 05             	shl    eax,0x5
c00205a0:	01 c7                	add    edi,eax
c00205a2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00205a6:	83 e0 01             	and    eax,0x1
c00205a9:	c1 e0 06             	shl    eax,0x6
c00205ac:	88 c2                	mov    dl,al
c00205ae:	8a 07                	mov    al,BYTE PTR [edi]
c00205b0:	83 e0 bf             	and    eax,0xffffffbf
c00205b3:	09 d0                	or     eax,edx
c00205b5:	88 07                	mov    BYTE PTR [edi],al
c00205b7:	8b 07                	mov    eax,DWORD PTR [edi]
c00205b9:	25 e0 ff 00 00       	and    eax,0xffe0
c00205be:	0d 05 00 01 00       	or     eax,0x10005
c00205c3:	89 07                	mov    DWORD PTR [edi],eax
c00205c5:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c00205cc:	74 4d                	je     c002061b <SATA::access(unsigned long long, int, void*, bool)+0x245>
c00205ce:	eb 32                	jmp    c0020602 <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c00205d0:	83 ec 0c             	sub    esp,0xc
c00205d3:	68 5b 6c 02 c0       	push   0xc0026c5b
c00205d8:	e8 8c 94 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00205dd:	83 c4 10             	add    esp,0x10
c00205e0:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c00205e7:	75 92                	jne    c002057b <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c00205e9:	e4 60                	in     al,0x60
c00205eb:	3c 1c                	cmp    al,0x1c
c00205ed:	74 04                	je     c00205f3 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c00205ef:	3c 5a                	cmp    al,0x5a
c00205f1:	75 f6                	jne    c00205e9 <SATA::access(unsigned long long, int, void*, bool)+0x213>
c00205f3:	e4 60                	in     al,0x60
c00205f5:	3c 5a                	cmp    al,0x5a
c00205f7:	74 fa                	je     c00205f3 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c00205f9:	3c 1c                	cmp    al,0x1c
c00205fb:	74 f6                	je     c00205f3 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c00205fd:	e9 79 ff ff ff       	jmp    c002057b <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020602:	83 ec 0c             	sub    esp,0xc
c0020605:	68 6a 6c 02 c0       	push   0xc0026c6a
c002060a:	e8 5a 94 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002060f:	83 c4 10             	add    esp,0x10
c0020612:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c0020619:	74 3b                	je     c0020656 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002061b:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020621:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c0020627:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c002062d:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c0020630:	50                   	push   eax
c0020631:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c0020635:	83 c0 08             	add    eax,0x8
c0020638:	c1 e0 04             	shl    eax,0x4
c002063b:	50                   	push   eax
c002063c:	6a 00                	push   0x0
c002063e:	56                   	push   esi
c002063f:	e8 40 00 fe ff       	call   c0000684 <memset>
c0020644:	83 c4 10             	add    esp,0x10
c0020647:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c002064e:	74 33                	je     c0020683 <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020650:	eb 18                	jmp    c002066a <SATA::access(unsigned long long, int, void*, bool)+0x294>
c0020652:	3c 1c                	cmp    al,0x1c
c0020654:	74 0c                	je     c0020662 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020656:	e4 60                	in     al,0x60
c0020658:	3c 5a                	cmp    al,0x5a
c002065a:	75 f6                	jne    c0020652 <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c002065c:	eb 04                	jmp    c0020662 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c002065e:	3c 1c                	cmp    al,0x1c
c0020660:	75 b9                	jne    c002061b <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020662:	e4 60                	in     al,0x60
c0020664:	3c 5a                	cmp    al,0x5a
c0020666:	74 fa                	je     c0020662 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020668:	eb f4                	jmp    c002065e <SATA::access(unsigned long long, int, void*, bool)+0x288>
c002066a:	83 ec 0c             	sub    esp,0xc
c002066d:	68 79 6c 02 c0       	push   0xc0026c79
c0020672:	e8 f2 93 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020677:	83 c4 10             	add    esp,0x10
c002067a:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c0020681:	74 48                	je     c00206cb <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c0020683:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020689:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002068f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020693:	c1 e0 09             	shl    eax,0x9
c0020696:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002069a:	48                   	dec    eax
c002069b:	25 ff ff 3f 00       	and    eax,0x3fffff
c00206a0:	89 c2                	mov    edx,eax
c00206a2:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c00206a8:	25 00 00 c0 ff       	and    eax,0xffc00000
c00206ad:	09 d0                	or     eax,edx
c00206af:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c00206b5:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c00206bc:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c00206c3:	74 33                	je     c00206f8 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c00206c5:	eb 18                	jmp    c00206df <SATA::access(unsigned long long, int, void*, bool)+0x309>
c00206c7:	3c 1c                	cmp    al,0x1c
c00206c9:	74 0c                	je     c00206d7 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c00206cb:	e4 60                	in     al,0x60
c00206cd:	3c 5a                	cmp    al,0x5a
c00206cf:	75 f6                	jne    c00206c7 <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c00206d1:	eb 04                	jmp    c00206d7 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c00206d3:	3c 1c                	cmp    al,0x1c
c00206d5:	75 ac                	jne    c0020683 <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c00206d7:	e4 60                	in     al,0x60
c00206d9:	3c 5a                	cmp    al,0x5a
c00206db:	74 fa                	je     c00206d7 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c00206dd:	eb f4                	jmp    c00206d3 <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c00206df:	83 ec 0c             	sub    esp,0xc
c00206e2:	68 88 6c 02 c0       	push   0xc0026c88
c00206e7:	e8 7d 93 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00206ec:	83 c4 10             	add    esp,0x10
c00206ef:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c00206f6:	74 63                	je     c002075b <SATA::access(unsigned long long, int, void*, bool)+0x385>
c00206f8:	66 8b 06             	mov    ax,WORD PTR [esi]
c00206fb:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c00206ff:	66 25 00 7f          	and    ax,0x7f00
c0020703:	66 0d 27 80          	or     ax,0x8027
c0020707:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c002070c:	66 89 06             	mov    WORD PTR [esi],ax
c002070f:	19 c0                	sbb    eax,eax
c0020711:	83 e0 f0             	and    eax,0xfffffff0
c0020714:	83 c0 35             	add    eax,0x35
c0020717:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002071a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002071e:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0020722:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020726:	c1 e8 10             	shr    eax,0x10
c0020729:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002072c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020730:	c1 e8 18             	shr    eax,0x18
c0020733:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c002073a:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002073d:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0020741:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020744:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020748:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002074b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002074f:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020753:	74 33                	je     c0020788 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020755:	eb 18                	jmp    c002076f <SATA::access(unsigned long long, int, void*, bool)+0x399>
c0020757:	3c 1c                	cmp    al,0x1c
c0020759:	74 0c                	je     c0020767 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c002075b:	e4 60                	in     al,0x60
c002075d:	3c 5a                	cmp    al,0x5a
c002075f:	75 f6                	jne    c0020757 <SATA::access(unsigned long long, int, void*, bool)+0x381>
c0020761:	eb 04                	jmp    c0020767 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020763:	3c 1c                	cmp    al,0x1c
c0020765:	75 91                	jne    c00206f8 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020767:	e4 60                	in     al,0x60
c0020769:	3c 5a                	cmp    al,0x5a
c002076b:	74 fa                	je     c0020767 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c002076d:	eb f4                	jmp    c0020763 <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c002076f:	83 ec 0c             	sub    esp,0xc
c0020772:	68 97 6c 02 c0       	push   0xc0026c97
c0020777:	e8 ed 92 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002077c:	83 c4 10             	add    esp,0x10
c002077f:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c0020786:	74 11                	je     c0020799 <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0020788:	89 e8                	mov    eax,ebp
c002078a:	31 f6                	xor    esi,esi
c002078c:	c1 e0 07             	shl    eax,0x7
c002078f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020793:	eb 21                	jmp    c00207b6 <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c0020795:	3c 1c                	cmp    al,0x1c
c0020797:	74 0c                	je     c00207a5 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020799:	e4 60                	in     al,0x60
c002079b:	3c 5a                	cmp    al,0x5a
c002079d:	75 f6                	jne    c0020795 <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c002079f:	eb 04                	jmp    c00207a5 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c00207a1:	3c 1c                	cmp    al,0x1c
c00207a3:	75 e3                	jne    c0020788 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c00207a5:	e4 60                	in     al,0x60
c00207a7:	3c 5a                	cmp    al,0x5a
c00207a9:	74 fa                	je     c00207a5 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c00207ab:	eb f4                	jmp    c00207a1 <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c00207ad:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c00207b3:	74 0c                	je     c00207c1 <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c00207b5:	46                   	inc    esi
c00207b6:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c00207bc:	80 e2 88             	and    dl,0x88
c00207bf:	75 ec                	jne    c00207ad <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c00207c1:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c00207c8:	74 3d                	je     c0020807 <SATA::access(unsigned long long, int, void*, bool)+0x431>
c00207ca:	83 ec 0c             	sub    esp,0xc
c00207cd:	68 a6 6c 02 c0       	push   0xc0026ca6
c00207d2:	e8 92 92 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00207d7:	8b 15 60 80 02 c0    	mov    edx,DWORD PTR ds:0xc0028060
c00207dd:	83 c4 10             	add    esp,0x10
c00207e0:	f6 c2 80             	test   dl,0x80
c00207e3:	74 0e                	je     c00207f3 <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c00207e5:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c00207eb:	75 2f                	jne    c002081c <SATA::access(unsigned long long, int, void*, bool)+0x446>
c00207ed:	eb 20                	jmp    c002080f <SATA::access(unsigned long long, int, void*, bool)+0x439>
c00207ef:	3c 1c                	cmp    al,0x1c
c00207f1:	74 0c                	je     c00207ff <SATA::access(unsigned long long, int, void*, bool)+0x429>
c00207f3:	e4 60                	in     al,0x60
c00207f5:	3c 5a                	cmp    al,0x5a
c00207f7:	75 f6                	jne    c00207ef <SATA::access(unsigned long long, int, void*, bool)+0x419>
c00207f9:	eb 04                	jmp    c00207ff <SATA::access(unsigned long long, int, void*, bool)+0x429>
c00207fb:	3c 1c                	cmp    al,0x1c
c00207fd:	75 e6                	jne    c00207e5 <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c00207ff:	e4 60                	in     al,0x60
c0020801:	3c 5a                	cmp    al,0x5a
c0020803:	74 fa                	je     c00207ff <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020805:	eb f4                	jmp    c00207fb <SATA::access(unsigned long long, int, void*, bool)+0x425>
c0020807:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c002080d:	75 13                	jne    c0020822 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c002080f:	83 ec 0c             	sub    esp,0xc
c0020812:	68 b6 6c 02 c0       	push   0xc0026cb6
c0020817:	e9 d2 00 00 00       	jmp    c00208ee <SATA::access(unsigned long long, int, void*, bool)+0x518>
c002081c:	0f ba e2 0b          	bt     edx,0xb
c0020820:	72 25                	jb     c0020847 <SATA::access(unsigned long long, int, void*, bool)+0x471>
c0020822:	be 01 00 00 00       	mov    esi,0x1
c0020827:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002082b:	89 e8                	mov    eax,ebp
c002082d:	d3 e6                	shl    esi,cl
c002082f:	c1 e0 07             	shl    eax,0x7
c0020832:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020836:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c002083d:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0020843:	74 4a                	je     c002088f <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020845:	eb 2f                	jmp    c0020876 <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c0020847:	83 ec 0c             	sub    esp,0xc
c002084a:	68 c4 6c 02 c0       	push   0xc0026cc4
c002084f:	e8 15 92 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020854:	83 c4 10             	add    esp,0x10
c0020857:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c002085e:	75 c2                	jne    c0020822 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020860:	e4 60                	in     al,0x60
c0020862:	3c 5a                	cmp    al,0x5a
c0020864:	74 04                	je     c002086a <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020866:	3c 1c                	cmp    al,0x1c
c0020868:	75 f6                	jne    c0020860 <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c002086a:	e4 60                	in     al,0x60
c002086c:	3c 5a                	cmp    al,0x5a
c002086e:	74 fa                	je     c002086a <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020870:	3c 1c                	cmp    al,0x1c
c0020872:	74 f6                	je     c002086a <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020874:	eb ac                	jmp    c0020822 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020876:	83 ec 0c             	sub    esp,0xc
c0020879:	68 d4 6c 02 c0       	push   0xc0026cd4
c002087e:	e8 e6 91 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020883:	83 c4 10             	add    esp,0x10
c0020886:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c002088d:	74 0f                	je     c002089e <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c002088f:	89 e8                	mov    eax,ebp
c0020891:	c1 e0 07             	shl    eax,0x7
c0020894:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020898:	eb 24                	jmp    c00208be <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c002089a:	3c 1c                	cmp    al,0x1c
c002089c:	74 0c                	je     c00208aa <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c002089e:	e4 60                	in     al,0x60
c00208a0:	3c 5a                	cmp    al,0x5a
c00208a2:	75 f6                	jne    c002089a <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c00208a4:	eb 04                	jmp    c00208aa <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c00208a6:	3c 1c                	cmp    al,0x1c
c00208a8:	75 e5                	jne    c002088f <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c00208aa:	e4 60                	in     al,0x60
c00208ac:	3c 5a                	cmp    al,0x5a
c00208ae:	74 fa                	je     c00208aa <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c00208b0:	eb f4                	jmp    c00208a6 <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c00208b2:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c00208b8:	0f ba e2 1e          	bt     edx,0x1e
c00208bc:	72 28                	jb     c00208e6 <SATA::access(unsigned long long, int, void*, bool)+0x510>
c00208be:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c00208c4:	85 d6                	test   esi,edx
c00208c6:	75 ea                	jne    c00208b2 <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c00208c8:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c00208cf:	75 2f                	jne    c0020900 <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c00208d1:	89 e8                	mov    eax,ebp
c00208d3:	c1 e0 07             	shl    eax,0x7
c00208d6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00208da:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00208e0:	0f ba e0 1e          	bt     eax,0x1e
c00208e4:	73 49                	jae    c002092f <SATA::access(unsigned long long, int, void*, bool)+0x559>
c00208e6:	83 ec 0c             	sub    esp,0xc
c00208e9:	68 e4 6c 02 c0       	push   0xc0026ce4
c00208ee:	e8 c8 40 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c00208f3:	83 c4 10             	add    esp,0x10
c00208f6:	b8 01 00 00 00       	mov    eax,0x1
c00208fb:	e9 c5 00 00 00       	jmp    c00209c5 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020900:	83 ec 0c             	sub    esp,0xc
c0020903:	68 f5 6c 02 c0       	push   0xc0026cf5
c0020908:	e8 5c 91 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002090d:	83 c4 10             	add    esp,0x10
c0020910:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c0020917:	75 b8                	jne    c00208d1 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0020919:	e4 60                	in     al,0x60
c002091b:	3c 5a                	cmp    al,0x5a
c002091d:	74 04                	je     c0020923 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c002091f:	3c 1c                	cmp    al,0x1c
c0020921:	75 f6                	jne    c0020919 <SATA::access(unsigned long long, int, void*, bool)+0x543>
c0020923:	e4 60                	in     al,0x60
c0020925:	3c 5a                	cmp    al,0x5a
c0020927:	74 fa                	je     c0020923 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020929:	3c 1c                	cmp    al,0x1c
c002092b:	74 f6                	je     c0020923 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c002092d:	eb a2                	jmp    c00208d1 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c002092f:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c0020936:	74 3a                	je     c0020972 <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c0020938:	83 ec 0c             	sub    esp,0xc
c002093b:	68 05 6d 02 c0       	push   0xc0026d05
c0020940:	e8 24 91 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020945:	83 c4 10             	add    esp,0x10
c0020948:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c002094f:	74 0d                	je     c002095e <SATA::access(unsigned long long, int, void*, bool)+0x588>
c0020951:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020956:	75 31                	jne    c0020989 <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c0020958:	eb 1f                	jmp    c0020979 <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c002095a:	3c 1c                	cmp    al,0x1c
c002095c:	74 0c                	je     c002096a <SATA::access(unsigned long long, int, void*, bool)+0x594>
c002095e:	e4 60                	in     al,0x60
c0020960:	3c 5a                	cmp    al,0x5a
c0020962:	75 f6                	jne    c002095a <SATA::access(unsigned long long, int, void*, bool)+0x584>
c0020964:	eb 04                	jmp    c002096a <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020966:	3c 1c                	cmp    al,0x1c
c0020968:	75 e7                	jne    c0020951 <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c002096a:	e4 60                	in     al,0x60
c002096c:	3c 5a                	cmp    al,0x5a
c002096e:	74 fa                	je     c002096a <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020970:	eb f4                	jmp    c0020966 <SATA::access(unsigned long long, int, void*, bool)+0x590>
c0020972:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020977:	75 19                	jne    c0020992 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020979:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002097f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0020983:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020987:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020989:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c0020990:	75 04                	jne    c0020996 <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c0020992:	31 c0                	xor    eax,eax
c0020994:	eb 2f                	jmp    c00209c5 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020996:	83 ec 0c             	sub    esp,0xc
c0020999:	68 15 6d 02 c0       	push   0xc0026d15
c002099e:	e8 c6 90 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00209a3:	83 c4 10             	add    esp,0x10
c00209a6:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c00209ad:	75 e3                	jne    c0020992 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c00209af:	e4 60                	in     al,0x60
c00209b1:	3c 1c                	cmp    al,0x1c
c00209b3:	74 04                	je     c00209b9 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c00209b5:	3c 5a                	cmp    al,0x5a
c00209b7:	75 f6                	jne    c00209af <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c00209b9:	e4 60                	in     al,0x60
c00209bb:	3c 5a                	cmp    al,0x5a
c00209bd:	74 fa                	je     c00209b9 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c00209bf:	3c 1c                	cmp    al,0x1c
c00209c1:	74 f6                	je     c00209b9 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c00209c3:	eb cd                	jmp    c0020992 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c00209c5:	83 c4 2c             	add    esp,0x2c
c00209c8:	5b                   	pop    ebx
c00209c9:	5e                   	pop    esi
c00209ca:	5f                   	pop    edi
c00209cb:	5d                   	pop    ebp
c00209cc:	c3                   	ret    
c00209cd:	90                   	nop

c00209ce <SATA::read(unsigned long long, int, void*)>:
c00209ce:	55                   	push   ebp
c00209cf:	57                   	push   edi
c00209d0:	56                   	push   esi
c00209d1:	53                   	push   ebx
c00209d2:	83 ec 0c             	sub    esp,0xc
c00209d5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00209d9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00209dd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00209e1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00209e5:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c00209ec:	74 2d                	je     c0020a1b <SATA::read(unsigned long long, int, void*)+0x4d>
c00209ee:	83 ec 0c             	sub    esp,0xc
c00209f1:	68 25 6d 02 c0       	push   0xc0026d25
c00209f6:	e8 6e 90 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00209fb:	83 c4 10             	add    esp,0x10
c00209fe:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c0020a05:	75 14                	jne    c0020a1b <SATA::read(unsigned long long, int, void*)+0x4d>
c0020a07:	e4 60                	in     al,0x60
c0020a09:	3c 1c                	cmp    al,0x1c
c0020a0b:	74 04                	je     c0020a11 <SATA::read(unsigned long long, int, void*)+0x43>
c0020a0d:	3c 5a                	cmp    al,0x5a
c0020a0f:	75 f6                	jne    c0020a07 <SATA::read(unsigned long long, int, void*)+0x39>
c0020a11:	e4 60                	in     al,0x60
c0020a13:	3c 5a                	cmp    al,0x5a
c0020a15:	74 fa                	je     c0020a11 <SATA::read(unsigned long long, int, void*)+0x43>
c0020a17:	3c 1c                	cmp    al,0x1c
c0020a19:	74 f6                	je     c0020a11 <SATA::read(unsigned long long, int, void*)+0x43>
c0020a1b:	8d 53 ff             	lea    edx,[ebx-0x1]
c0020a1e:	b8 04 00 00 00       	mov    eax,0x4
c0020a23:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020a29:	0f 87 96 00 00 00    	ja     c0020ac5 <SATA::read(unsigned long long, int, void*)+0xf7>
c0020a2f:	b8 06 00 00 00       	mov    eax,0x6
c0020a34:	85 ed                	test   ebp,ebp
c0020a36:	0f 84 89 00 00 00    	je     c0020ac5 <SATA::read(unsigned long long, int, void*)+0xf7>
c0020a3c:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c0020a43:	74 2d                	je     c0020a72 <SATA::read(unsigned long long, int, void*)+0xa4>
c0020a45:	83 ec 0c             	sub    esp,0xc
c0020a48:	68 32 6d 02 c0       	push   0xc0026d32
c0020a4d:	e8 17 90 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020a52:	83 c4 10             	add    esp,0x10
c0020a55:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c0020a5c:	75 14                	jne    c0020a72 <SATA::read(unsigned long long, int, void*)+0xa4>
c0020a5e:	e4 60                	in     al,0x60
c0020a60:	3c 5a                	cmp    al,0x5a
c0020a62:	74 04                	je     c0020a68 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020a64:	3c 1c                	cmp    al,0x1c
c0020a66:	75 f6                	jne    c0020a5e <SATA::read(unsigned long long, int, void*)+0x90>
c0020a68:	e4 60                	in     al,0x60
c0020a6a:	3c 5a                	cmp    al,0x5a
c0020a6c:	74 fa                	je     c0020a68 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020a6e:	3c 1c                	cmp    al,0x1c
c0020a70:	74 f6                	je     c0020a68 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020a72:	50                   	push   eax
c0020a73:	50                   	push   eax
c0020a74:	6a 00                	push   0x0
c0020a76:	55                   	push   ebp
c0020a77:	53                   	push   ebx
c0020a78:	57                   	push   edi
c0020a79:	56                   	push   esi
c0020a7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020a7e:	e8 53 f9 ff ff       	call   c00203d6 <SATA::access(unsigned long long, int, void*, bool)>
c0020a83:	83 c4 20             	add    esp,0x20
c0020a86:	89 c3                	mov    ebx,eax
c0020a88:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c0020a8f:	74 2d                	je     c0020abe <SATA::read(unsigned long long, int, void*)+0xf0>
c0020a91:	83 ec 0c             	sub    esp,0xc
c0020a94:	68 3f 6d 02 c0       	push   0xc0026d3f
c0020a99:	e8 cb 8f fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020a9e:	83 c4 10             	add    esp,0x10
c0020aa1:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c0020aa8:	75 14                	jne    c0020abe <SATA::read(unsigned long long, int, void*)+0xf0>
c0020aaa:	e4 60                	in     al,0x60
c0020aac:	3c 5a                	cmp    al,0x5a
c0020aae:	74 04                	je     c0020ab4 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020ab0:	3c 1c                	cmp    al,0x1c
c0020ab2:	75 f6                	jne    c0020aaa <SATA::read(unsigned long long, int, void*)+0xdc>
c0020ab4:	e4 60                	in     al,0x60
c0020ab6:	3c 5a                	cmp    al,0x5a
c0020ab8:	74 fa                	je     c0020ab4 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020aba:	3c 1c                	cmp    al,0x1c
c0020abc:	74 f6                	je     c0020ab4 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020abe:	31 c0                	xor    eax,eax
c0020ac0:	85 db                	test   ebx,ebx
c0020ac2:	0f 95 c0             	setne  al
c0020ac5:	83 c4 0c             	add    esp,0xc
c0020ac8:	5b                   	pop    ebx
c0020ac9:	5e                   	pop    esi
c0020aca:	5f                   	pop    edi
c0020acb:	5d                   	pop    ebp
c0020acc:	c3                   	ret    
c0020acd:	90                   	nop

c0020ace <SATA::write(unsigned long long, int, void*)>:
c0020ace:	55                   	push   ebp
c0020acf:	57                   	push   edi
c0020ad0:	56                   	push   esi
c0020ad1:	53                   	push   ebx
c0020ad2:	83 ec 1c             	sub    esp,0x1c
c0020ad5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020ad9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020add:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020ae1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020ae5:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c0020aec:	74 2d                	je     c0020b1b <SATA::write(unsigned long long, int, void*)+0x4d>
c0020aee:	83 ec 0c             	sub    esp,0xc
c0020af1:	68 4c 6d 02 c0       	push   0xc0026d4c
c0020af6:	e8 6e 8f fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020afb:	83 c4 10             	add    esp,0x10
c0020afe:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c0020b05:	75 14                	jne    c0020b1b <SATA::write(unsigned long long, int, void*)+0x4d>
c0020b07:	e4 60                	in     al,0x60
c0020b09:	3c 1c                	cmp    al,0x1c
c0020b0b:	74 04                	je     c0020b11 <SATA::write(unsigned long long, int, void*)+0x43>
c0020b0d:	3c 5a                	cmp    al,0x5a
c0020b0f:	75 f6                	jne    c0020b07 <SATA::write(unsigned long long, int, void*)+0x39>
c0020b11:	e4 60                	in     al,0x60
c0020b13:	3c 5a                	cmp    al,0x5a
c0020b15:	74 fa                	je     c0020b11 <SATA::write(unsigned long long, int, void*)+0x43>
c0020b17:	3c 1c                	cmp    al,0x1c
c0020b19:	74 f6                	je     c0020b11 <SATA::write(unsigned long long, int, void*)+0x43>
c0020b1b:	8d 55 ff             	lea    edx,[ebp-0x1]
c0020b1e:	b8 04 00 00 00       	mov    eax,0x4
c0020b23:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020b29:	0f 87 bd 00 00 00    	ja     c0020bec <SATA::write(unsigned long long, int, void*)+0x11e>
c0020b2f:	b8 06 00 00 00       	mov    eax,0x6
c0020b34:	85 db                	test   ebx,ebx
c0020b36:	0f 84 b0 00 00 00    	je     c0020bec <SATA::write(unsigned long long, int, void*)+0x11e>
c0020b3c:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c0020b43:	74 2d                	je     c0020b72 <SATA::write(unsigned long long, int, void*)+0xa4>
c0020b45:	83 ec 0c             	sub    esp,0xc
c0020b48:	68 5a 6d 02 c0       	push   0xc0026d5a
c0020b4d:	e8 17 8f fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020b52:	83 c4 10             	add    esp,0x10
c0020b55:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c0020b5c:	75 14                	jne    c0020b72 <SATA::write(unsigned long long, int, void*)+0xa4>
c0020b5e:	e4 60                	in     al,0x60
c0020b60:	3c 1c                	cmp    al,0x1c
c0020b62:	74 04                	je     c0020b68 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020b64:	3c 5a                	cmp    al,0x5a
c0020b66:	75 f6                	jne    c0020b5e <SATA::write(unsigned long long, int, void*)+0x90>
c0020b68:	e4 60                	in     al,0x60
c0020b6a:	3c 5a                	cmp    al,0x5a
c0020b6c:	74 fa                	je     c0020b68 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020b6e:	3c 1c                	cmp    al,0x1c
c0020b70:	74 f6                	je     c0020b68 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020b72:	c1 e5 09             	shl    ebp,0x9
c0020b75:	01 dd                	add    ebp,ebx
c0020b77:	89 f0                	mov    eax,esi
c0020b79:	89 fa                	mov    edx,edi
c0020b7b:	83 c0 01             	add    eax,0x1
c0020b7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020b82:	83 d2 00             	adc    edx,0x0
c0020b85:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020b89:	50                   	push   eax
c0020b8a:	50                   	push   eax
c0020b8b:	6a 01                	push   0x1
c0020b8d:	53                   	push   ebx
c0020b8e:	81 c3 00 02 00 00    	add    ebx,0x200
c0020b94:	6a 01                	push   0x1
c0020b96:	57                   	push   edi
c0020b97:	56                   	push   esi
c0020b98:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020b9c:	e8 35 f8 ff ff       	call   c00203d6 <SATA::access(unsigned long long, int, void*, bool)>
c0020ba1:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0020ba5:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0020ba9:	83 c4 20             	add    esp,0x20
c0020bac:	39 dd                	cmp    ebp,ebx
c0020bae:	75 c7                	jne    c0020b77 <SATA::write(unsigned long long, int, void*)+0xa9>
c0020bb0:	f6 05 61 80 02 c0 08 	test   BYTE PTR ds:0xc0028061,0x8
c0020bb7:	75 04                	jne    c0020bbd <SATA::write(unsigned long long, int, void*)+0xef>
c0020bb9:	31 c0                	xor    eax,eax
c0020bbb:	eb 2f                	jmp    c0020bec <SATA::write(unsigned long long, int, void*)+0x11e>
c0020bbd:	83 ec 0c             	sub    esp,0xc
c0020bc0:	68 68 6d 02 c0       	push   0xc0026d68
c0020bc5:	e8 9f 8e fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020bca:	83 c4 10             	add    esp,0x10
c0020bcd:	f6 05 60 80 02 c0 80 	test   BYTE PTR ds:0xc0028060,0x80
c0020bd4:	75 e3                	jne    c0020bb9 <SATA::write(unsigned long long, int, void*)+0xeb>
c0020bd6:	e4 60                	in     al,0x60
c0020bd8:	3c 5a                	cmp    al,0x5a
c0020bda:	74 04                	je     c0020be0 <SATA::write(unsigned long long, int, void*)+0x112>
c0020bdc:	3c 1c                	cmp    al,0x1c
c0020bde:	75 f6                	jne    c0020bd6 <SATA::write(unsigned long long, int, void*)+0x108>
c0020be0:	e4 60                	in     al,0x60
c0020be2:	3c 5a                	cmp    al,0x5a
c0020be4:	74 fa                	je     c0020be0 <SATA::write(unsigned long long, int, void*)+0x112>
c0020be6:	3c 1c                	cmp    al,0x1c
c0020be8:	74 f6                	je     c0020be0 <SATA::write(unsigned long long, int, void*)+0x112>
c0020bea:	eb cd                	jmp    c0020bb9 <SATA::write(unsigned long long, int, void*)+0xeb>
c0020bec:	83 c4 1c             	add    esp,0x1c
c0020bef:	5b                   	pop    ebx
c0020bf0:	5e                   	pop    esi
c0020bf1:	5f                   	pop    edi
c0020bf2:	5d                   	pop    ebp
c0020bf3:	c3                   	ret    

c0020bf4 <SATAPI::write(unsigned long long, int, void*)>:
c0020bf4:	b8 03 00 00 00       	mov    eax,0x3
c0020bf9:	c3                   	ret    

c0020bfa <SATAPI::close(int, int, void*)>:
c0020bfa:	83 ec 0c             	sub    esp,0xc
c0020bfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c01:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020c07:	85 c0                	test   eax,eax
c0020c09:	74 0c                	je     c0020c17 <SATAPI::close(int, int, void*)+0x1d>
c0020c0b:	83 ec 0c             	sub    esp,0xc
c0020c0e:	8b 10                	mov    edx,DWORD PTR [eax]
c0020c10:	50                   	push   eax
c0020c11:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020c14:	83 c4 10             	add    esp,0x10
c0020c17:	31 c0                	xor    eax,eax
c0020c19:	83 c4 0c             	add    esp,0xc
c0020c1c:	c3                   	ret    
c0020c1d:	90                   	nop

c0020c1e <SATAPI::SATAPI()>:
c0020c1e:	83 ec 0c             	sub    esp,0xc
c0020c21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c25:	83 ec 04             	sub    esp,0x4
c0020c28:	68 00 08 00 00       	push   0x800
c0020c2d:	68 b0 6d 02 c0       	push   0xc0026db0
c0020c32:	50                   	push   eax
c0020c33:	e8 3e da fe ff       	call   c000e676 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020c38:	83 c4 10             	add    esp,0x10
c0020c3b:	ba 38 6f 02 c0       	mov    edx,0xc0026f38
c0020c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c44:	89 10                	mov    DWORD PTR [eax],edx
c0020c46:	90                   	nop
c0020c47:	83 c4 0c             	add    esp,0xc
c0020c4a:	c3                   	ret    
c0020c4b:	90                   	nop

c0020c4c <SATAPI::diskRemoved()>:
c0020c4c:	53                   	push   ebx
c0020c4d:	83 ec 14             	sub    esp,0x14
c0020c50:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020c54:	68 bc 6d 02 c0       	push   0xc0026dbc
c0020c59:	e8 a1 c0 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0020c5e:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0020c65:	c7 04 24 d3 6d 02 c0 	mov    DWORD PTR [esp],0xc0026dd3
c0020c6c:	e8 8e c0 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0020c71:	58                   	pop    eax
c0020c72:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0020c78:	e8 53 f8 fe ff       	call   c00104d0 <LogicalDisk::unmount()>
c0020c7d:	c7 44 24 20 e2 6d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0026de2
c0020c85:	83 c4 18             	add    esp,0x18
c0020c88:	5b                   	pop    ebx
c0020c89:	e9 71 c0 fe ff       	jmp    c000ccff <Dbg::kprintf(char const*, ...)>

c0020c8e <SATAPI::diskInserted()>:
c0020c8e:	83 ec 18             	sub    esp,0x18
c0020c91:	68 f0 6d 02 c0       	push   0xc0026df0
c0020c96:	e8 64 c0 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0020c9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020c9f:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020ca6:	83 c4 1c             	add    esp,0x1c
c0020ca9:	c3                   	ret    

c0020caa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020caa:	55                   	push   ebp
c0020cab:	57                   	push   edi
c0020cac:	56                   	push   esi
c0020cad:	53                   	push   ebx
c0020cae:	83 ec 38             	sub    esp,0x38
c0020cb1:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0020cb5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0020cb9:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0020cbd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020cc1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0020cc5:	68 08 6e 02 c0       	push   0xc0026e08
c0020cca:	e8 30 c0 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0020ccf:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020cd5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020cdb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020cdf:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020ce5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020ce9:	c1 e0 07             	shl    eax,0x7
c0020cec:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0020cf0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020cf4:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020cfe:	5a                   	pop    edx
c0020cff:	59                   	pop    ecx
c0020d00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d04:	8d 58 02             	lea    ebx,[eax+0x2]
c0020d07:	c1 e3 07             	shl    ebx,0x7
c0020d0a:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0020d0e:	53                   	push   ebx
c0020d0f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020d15:	e8 00 e3 ff ff       	call   c001f01a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020d1a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020d1e:	83 c4 10             	add    esp,0x10
c0020d21:	b8 01 00 00 00       	mov    eax,0x1
c0020d26:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020d2b:	0f 84 04 02 00 00    	je     c0020f35 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28b>
c0020d31:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020d37:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020d39:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020d3f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020d45:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020d49:	c1 e1 05             	shl    ecx,0x5
c0020d4c:	01 c8                	add    eax,ecx
c0020d4e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020d50:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020d56:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020d5c:	89 08                	mov    DWORD PTR [eax],ecx
c0020d5e:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020d64:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020d6a:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020d70:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020d73:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020d76:	50                   	push   eax
c0020d77:	68 90 00 00 00       	push   0x90
c0020d7c:	6a 00                	push   0x0
c0020d7e:	53                   	push   ebx
c0020d7f:	e8 00 f9 fd ff       	call   c0000684 <memset>
c0020d84:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020d88:	b9 0c 00 00 00       	mov    ecx,0xc
c0020d8d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020d8f:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020d95:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020d99:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020d9f:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020da3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020da7:	48                   	dec    eax
c0020da8:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020dad:	89 c1                	mov    ecx,eax
c0020daf:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020db5:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020dba:	09 c8                	or     eax,ecx
c0020dbc:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020dc2:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020dc5:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0020dcc:	66 25 00 7f          	and    ax,0x7f00
c0020dd0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020dd4:	66 0d 27 80          	or     ax,0x8027
c0020dd8:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0020ddc:	66 89 03             	mov    WORD PTR [ebx],ax
c0020ddf:	89 d0                	mov    eax,edx
c0020de1:	c1 ea 18             	shr    edx,0x18
c0020de4:	c1 e8 10             	shr    eax,0x10
c0020de7:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0020dea:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020ded:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020df1:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020df4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020df8:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020dfb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020dff:	83 c4 10             	add    esp,0x10
c0020e02:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020e06:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020e0a:	31 c0                	xor    eax,eax
c0020e0c:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0020e12:	80 e1 88             	and    cl,0x88
c0020e15:	74 0a                	je     c0020e21 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c0020e17:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020e1c:	74 0a                	je     c0020e28 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c0020e1e:	40                   	inc    eax
c0020e1f:	eb eb                	jmp    c0020e0c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c0020e21:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020e26:	75 0f                	jne    c0020e37 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18d>
c0020e28:	83 ec 0c             	sub    esp,0xc
c0020e2b:	68 b6 6c 02 c0       	push   0xc0026cb6
c0020e30:	e8 86 3b ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0020e35:	eb 48                	jmp    c0020e7f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d5>
c0020e37:	be 01 00 00 00       	mov    esi,0x1
c0020e3c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020e40:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020e44:	d3 e6                	shl    esi,cl
c0020e46:	c1 e7 07             	shl    edi,0x7
c0020e49:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0020e4f:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c0020e54:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0020e58:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0020e5e:	85 c6                	test   esi,eax
c0020e60:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0020e66:	0f 84 96 00 00 00    	je     c0020f02 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x258>
c0020e6c:	0f ba e0 1e          	bt     eax,0x1e
c0020e70:	73 1a                	jae    c0020e8c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e2>
c0020e72:	83 ec 0c             	sub    esp,0xc
c0020e75:	68 22 6e 02 c0       	push   0xc0026e22
c0020e7a:	e8 80 be fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0020e7f:	83 c4 10             	add    esp,0x10
c0020e82:	b8 01 00 00 00       	mov    eax,0x1
c0020e87:	e9 a9 00 00 00       	jmp    c0020f35 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28b>
c0020e8c:	83 fb 0d             	cmp    ebx,0xd
c0020e8f:	77 12                	ja     c0020ea3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0020e91:	83 ec 0c             	sub    esp,0xc
c0020e94:	68 c8 00 00 00       	push   0xc8
c0020e99:	e8 7a 7b ff ff       	call   c0018a18 <milliTenthSleep(unsigned int)>
c0020e9e:	83 c4 10             	add    esp,0x10
c0020ea1:	eb 2a                	jmp    c0020ecd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x223>
c0020ea3:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c0020ea9:	83 f8 0d             	cmp    eax,0xd
c0020eac:	77 0a                	ja     c0020eb8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20e>
c0020eae:	83 ec 0c             	sub    esp,0xc
c0020eb1:	68 58 02 00 00       	push   0x258
c0020eb6:	eb 28                	jmp    c0020ee0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c0020eb8:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c0020ebe:	83 f8 0d             	cmp    eax,0xd
c0020ec1:	77 0a                	ja     c0020ecd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x223>
c0020ec3:	83 ec 0c             	sub    esp,0xc
c0020ec6:	68 dc 05 00 00       	push   0x5dc
c0020ecb:	eb 13                	jmp    c0020ee0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c0020ecd:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c0020ed3:	83 f8 0d             	cmp    eax,0xd
c0020ed6:	77 10                	ja     c0020ee8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23e>
c0020ed8:	83 ec 0c             	sub    esp,0xc
c0020edb:	68 c4 09 00 00       	push   0x9c4
c0020ee0:	e8 33 7b ff ff       	call   c0018a18 <milliTenthSleep(unsigned int)>
c0020ee5:	83 c4 10             	add    esp,0x10
c0020ee8:	43                   	inc    ebx
c0020ee9:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c0020eef:	0f 85 63 ff ff ff    	jne    c0020e58 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ae>
c0020ef5:	83 ec 0c             	sub    esp,0xc
c0020ef8:	68 35 6e 02 c0       	push   0xc0026e35
c0020efd:	e9 78 ff ff ff       	jmp    c0020e7a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d0>
c0020f02:	0f ba e0 1e          	bt     eax,0x1e
c0020f06:	73 0d                	jae    c0020f15 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26b>
c0020f08:	83 ec 0c             	sub    esp,0xc
c0020f0b:	68 49 6e 02 c0       	push   0xc0026e49
c0020f10:	e9 65 ff ff ff       	jmp    c0020e7a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d0>
c0020f15:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0020f1a:	74 17                	je     c0020f33 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x289>
c0020f1c:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0020f21:	74 10                	je     c0020f33 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x289>
c0020f23:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0020f29:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0020f2d:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0020f31:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020f33:	31 c0                	xor    eax,eax
c0020f35:	83 c4 2c             	add    esp,0x2c
c0020f38:	5b                   	pop    ebx
c0020f39:	5e                   	pop    esi
c0020f3a:	5f                   	pop    edi
c0020f3b:	5d                   	pop    ebp
c0020f3c:	c3                   	ret    
c0020f3d:	90                   	nop

c0020f3e <SATAPI::eject()>:
c0020f3e:	57                   	push   edi
c0020f3f:	b9 03 00 00 00       	mov    ecx,0x3
c0020f44:	53                   	push   ebx
c0020f45:	83 ec 14             	sub    esp,0x14
c0020f48:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020f4c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020f50:	fc                   	cld    
c0020f51:	31 c0                	xor    eax,eax
c0020f53:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020f55:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020f5a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020f5f:	50                   	push   eax
c0020f60:	6a 00                	push   0x0
c0020f62:	6a 00                	push   0x0
c0020f64:	6a 00                	push   0x0
c0020f66:	6a 00                	push   0x0
c0020f68:	6a 02                	push   0x2
c0020f6a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020f6e:	50                   	push   eax
c0020f6f:	53                   	push   ebx
c0020f70:	e8 35 fd ff ff       	call   c0020caa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020f75:	83 c4 20             	add    esp,0x20
c0020f78:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020f7f:	74 0c                	je     c0020f8d <SATAPI::eject()+0x4f>
c0020f81:	83 ec 0c             	sub    esp,0xc
c0020f84:	53                   	push   ebx
c0020f85:	e8 c2 fc ff ff       	call   c0020c4c <SATAPI::diskRemoved()>
c0020f8a:	83 c4 10             	add    esp,0x10
c0020f8d:	83 c4 14             	add    esp,0x14
c0020f90:	31 c0                	xor    eax,eax
c0020f92:	5b                   	pop    ebx
c0020f93:	5f                   	pop    edi
c0020f94:	c3                   	ret    
c0020f95:	90                   	nop

c0020f96 <SATAPI::detectMedia()>:
c0020f96:	56                   	push   esi
c0020f97:	53                   	push   ebx
c0020f98:	83 ec 30             	sub    esp,0x30
c0020f9b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0020f9f:	68 5e 6e 02 c0       	push   0xc0026e5e
c0020fa4:	e8 56 bd fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0020fa9:	83 c4 0c             	add    esp,0xc
c0020fac:	6a 0c                	push   0xc
c0020fae:	6a 00                	push   0x0
c0020fb0:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020fb4:	56                   	push   esi
c0020fb5:	e8 ca f6 fd ff       	call   c0000684 <memset>
c0020fba:	83 c4 0c             	add    esp,0xc
c0020fbd:	6a 00                	push   0x0
c0020fbf:	6a 00                	push   0x0
c0020fc1:	6a 00                	push   0x0
c0020fc3:	6a 00                	push   0x0
c0020fc5:	6a 00                	push   0x0
c0020fc7:	56                   	push   esi
c0020fc8:	53                   	push   ebx
c0020fc9:	e8 dc fc ff ff       	call   c0020caa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020fce:	83 c4 20             	add    esp,0x20
c0020fd1:	48                   	dec    eax
c0020fd2:	75 27                	jne    c0020ffb <SATAPI::detectMedia()+0x65>
c0020fd4:	83 ec 0c             	sub    esp,0xc
c0020fd7:	68 72 6e 02 c0       	push   0xc0026e72
c0020fdc:	e8 1e bd fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0020fe1:	83 c4 10             	add    esp,0x10
c0020fe4:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020feb:	74 0e                	je     c0020ffb <SATAPI::detectMedia()+0x65>
c0020fed:	83 ec 0c             	sub    esp,0xc
c0020ff0:	53                   	push   ebx
c0020ff1:	e8 56 fc ff ff       	call   c0020c4c <SATAPI::diskRemoved()>
c0020ff6:	e9 d1 00 00 00       	jmp    c00210cc <SATAPI::detectMedia()+0x136>
c0020ffb:	50                   	push   eax
c0020ffc:	6a 0c                	push   0xc
c0020ffe:	6a 00                	push   0x0
c0021000:	56                   	push   esi
c0021001:	e8 7e f6 fd ff       	call   c0000684 <memset>
c0021006:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002100b:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0021010:	83 c4 0c             	add    esp,0xc
c0021013:	6a 01                	push   0x1
c0021015:	8d 44 24 16          	lea    eax,[esp+0x16]
c0021019:	50                   	push   eax
c002101a:	6a 00                	push   0x0
c002101c:	6a 00                	push   0x0
c002101e:	6a 12                	push   0x12
c0021020:	56                   	push   esi
c0021021:	53                   	push   ebx
c0021022:	e8 83 fc ff ff       	call   c0020caa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021027:	83 c4 20             	add    esp,0x20
c002102a:	48                   	dec    eax
c002102b:	75 19                	jne    c0021046 <SATAPI::detectMedia()+0xb0>
c002102d:	83 ec 0c             	sub    esp,0xc
c0021030:	68 7c 6e 02 c0       	push   0xc0026e7c
c0021035:	e8 c5 bc fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c002103a:	83 c4 10             	add    esp,0x10
c002103d:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021044:	75 a7                	jne    c0020fed <SATAPI::detectMedia()+0x57>
c0021046:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c002104a:	83 e0 7f             	and    eax,0x7f
c002104d:	3c 70                	cmp    al,0x70
c002104f:	74 25                	je     c0021076 <SATAPI::detectMedia()+0xe0>
c0021051:	83 ec 0c             	sub    esp,0xc
c0021054:	68 86 6e 02 c0       	push   0xc0026e86
c0021059:	e8 a1 bc fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c002105e:	83 c4 10             	add    esp,0x10
c0021061:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021068:	75 0c                	jne    c0021076 <SATAPI::detectMedia()+0xe0>
c002106a:	83 ec 0c             	sub    esp,0xc
c002106d:	53                   	push   ebx
c002106e:	e8 1b fc ff ff       	call   c0020c8e <SATAPI::diskInserted()>
c0021073:	83 c4 10             	add    esp,0x10
c0021076:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002107a:	83 e0 0f             	and    eax,0xf
c002107d:	3c 02                	cmp    al,0x2
c002107f:	75 25                	jne    c00210a6 <SATAPI::detectMedia()+0x110>
c0021081:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0021086:	75 47                	jne    c00210cf <SATAPI::detectMedia()+0x139>
c0021088:	83 ec 0c             	sub    esp,0xc
c002108b:	68 8f 6e 02 c0       	push   0xc0026e8f
c0021090:	e8 6a bc fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0021095:	83 c4 10             	add    esp,0x10
c0021098:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002109f:	74 2e                	je     c00210cf <SATAPI::detectMedia()+0x139>
c00210a1:	e9 47 ff ff ff       	jmp    c0020fed <SATAPI::detectMedia()+0x57>
c00210a6:	84 c0                	test   al,al
c00210a8:	75 25                	jne    c00210cf <SATAPI::detectMedia()+0x139>
c00210aa:	83 ec 0c             	sub    esp,0xc
c00210ad:	68 98 6e 02 c0       	push   0xc0026e98
c00210b2:	e8 48 bc fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00210b7:	83 c4 10             	add    esp,0x10
c00210ba:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00210c1:	75 0c                	jne    c00210cf <SATAPI::detectMedia()+0x139>
c00210c3:	83 ec 0c             	sub    esp,0xc
c00210c6:	53                   	push   ebx
c00210c7:	e8 c2 fb ff ff       	call   c0020c8e <SATAPI::diskInserted()>
c00210cc:	83 c4 10             	add    esp,0x10
c00210cf:	83 c4 24             	add    esp,0x24
c00210d2:	5b                   	pop    ebx
c00210d3:	5e                   	pop    esi
c00210d4:	c3                   	ret    
c00210d5:	90                   	nop

c00210d6 <SATAPI::open(int, int, void*)>:
c00210d6:	56                   	push   esi
c00210d7:	53                   	push   ebx
c00210d8:	51                   	push   ecx
c00210d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00210dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00210e1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00210eb:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00210f1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00210fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00210ff:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0021109:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002110f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0021116:	e8 ab 8f fe ff       	call   c000a0c6 <Phys::allocatePage()>
c002111b:	89 c6                	mov    esi,eax
c002111d:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0021123:	81 c6 00 10 00 00    	add    esi,0x1000
c0021129:	e8 98 8f fe ff       	call   c000a0c6 <Phys::allocatePage()>
c002112e:	39 c6                	cmp    esi,eax
c0021130:	74 10                	je     c0021142 <SATAPI::open(int, int, void*)+0x6c>
c0021132:	83 ec 0c             	sub    esp,0xc
c0021135:	68 a2 6e 02 c0       	push   0xc0026ea2
c002113a:	e8 7c 38 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c002113f:	83 c4 10             	add    esp,0x10
c0021142:	83 ec 0c             	sub    esp,0xc
c0021145:	6a 02                	push   0x2
c0021147:	e8 8d a8 fe ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c002114c:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0021152:	6a 03                	push   0x3
c0021154:	50                   	push   eax
c0021155:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002115b:	ff 35 70 81 02 c0    	push   DWORD PTR ds:0xc0028170
c0021161:	e8 1a af fe ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c0021166:	83 c4 14             	add    esp,0x14
c0021169:	68 74 01 00 00       	push   0x174
c002116e:	e8 9c 88 fe ff       	call   c0009a0f <malloc>
c0021173:	83 c4 0c             	add    esp,0xc
c0021176:	89 c6                	mov    esi,eax
c0021178:	6a 00                	push   0x0
c002117a:	68 ff ff ff 7f       	push   0x7fffffff
c002117f:	6a 00                	push   0x0
c0021181:	6a 00                	push   0x0
c0021183:	53                   	push   ebx
c0021184:	68 b8 6e 02 c0       	push   0xc0026eb8
c0021189:	50                   	push   eax
c002118a:	e8 5b f1 fe ff       	call   c00102ea <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002118f:	83 c4 14             	add    esp,0x14
c0021192:	56                   	push   esi
c0021193:	e8 08 f2 fe ff       	call   c00103a0 <LogicalDisk::assignDriveLetter()>
c0021198:	5a                   	pop    edx
c0021199:	0f be c0             	movsx  eax,al
c002119c:	59                   	pop    ecx
c002119d:	50                   	push   eax
c002119e:	68 c6 6e 02 c0       	push   0xc0026ec6
c00211a3:	e8 57 bb fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00211a8:	58                   	pop    eax
c00211a9:	5a                   	pop    edx
c00211aa:	56                   	push   esi
c00211ab:	53                   	push   ebx
c00211ac:	e8 8d d0 fe ff       	call   c000e23e <Device::addChild(Device*)>
c00211b1:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c00211b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00211ba:	e8 1f d5 fe ff       	call   c000e6de <PhysicalDisk::startCache()>
c00211bf:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00211c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00211c9:	e8 c8 fd ff ff       	call   c0020f96 <SATAPI::detectMedia()>
c00211ce:	83 c4 14             	add    esp,0x14
c00211d1:	31 c0                	xor    eax,eax
c00211d3:	5b                   	pop    ebx
c00211d4:	5e                   	pop    esi
c00211d5:	c3                   	ret    

c00211d6 <SATAPI::read(unsigned long long, int, void*)>:
c00211d6:	55                   	push   ebp
c00211d7:	57                   	push   edi
c00211d8:	56                   	push   esi
c00211d9:	53                   	push   ebx
c00211da:	83 ec 28             	sub    esp,0x28
c00211dd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00211e1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00211e5:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00211e9:	68 d3 6e 02 c0       	push   0xc0026ed3
c00211ee:	e8 0c bb fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00211f3:	83 c4 10             	add    esp,0x10
c00211f6:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00211fd:	75 2c                	jne    c002122b <SATAPI::read(unsigned long long, int, void*)+0x55>
c00211ff:	83 ec 0c             	sub    esp,0xc
c0021202:	55                   	push   ebp
c0021203:	e8 8e fd ff ff       	call   c0020f96 <SATAPI::detectMedia()>
c0021208:	83 c4 10             	add    esp,0x10
c002120b:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0021212:	75 17                	jne    c002122b <SATAPI::read(unsigned long long, int, void*)+0x55>
c0021214:	83 ec 0c             	sub    esp,0xc
c0021217:	68 e4 6e 02 c0       	push   0xc0026ee4
c002121c:	e8 de ba fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0021221:	83 c4 10             	add    esp,0x10
c0021224:	b8 02 00 00 00       	mov    eax,0x2
c0021229:	eb 70                	jmp    c002129b <SATAPI::read(unsigned long long, int, void*)+0xc5>
c002122b:	83 ec 0c             	sub    esp,0xc
c002122e:	68 f5 6e 02 c0       	push   0xc0026ef5
c0021233:	e8 c7 ba fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0021238:	83 c4 10             	add    esp,0x10
c002123b:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0021240:	7e 10                	jle    c0021252 <SATAPI::read(unsigned long long, int, void*)+0x7c>
c0021242:	83 ec 0c             	sub    esp,0xc
c0021245:	68 06 6f 02 c0       	push   0xc0026f06
c002124a:	e8 6c 37 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c002124f:	83 c4 10             	add    esp,0x10
c0021252:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021256:	b9 03 00 00 00       	mov    ecx,0x3
c002125b:	fc                   	cld    
c002125c:	31 c0                	xor    eax,eax
c002125e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021260:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0021265:	89 d8                	mov    eax,ebx
c0021267:	86 e0                	xchg   al,ah
c0021269:	c1 c0 10             	rol    eax,0x10
c002126c:	86 e0                	xchg   al,ah
c002126e:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0021272:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0021276:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002127a:	50                   	push   eax
c002127b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002127f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021283:	56                   	push   esi
c0021284:	53                   	push   ebx
c0021285:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021289:	c1 e0 0b             	shl    eax,0xb
c002128c:	50                   	push   eax
c002128d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021291:	50                   	push   eax
c0021292:	55                   	push   ebp
c0021293:	e8 12 fa ff ff       	call   c0020caa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021298:	83 c4 20             	add    esp,0x20
c002129b:	83 c4 1c             	add    esp,0x1c
c002129e:	5b                   	pop    ebx
c002129f:	5e                   	pop    esi
c00212a0:	5f                   	pop    edi
c00212a1:	5d                   	pop    ebp
c00212a2:	c3                   	ret    
c00212a3:	90                   	nop

c00212a4 <AVX::open(int, int, void*)>:
c00212a4:	83 ec 0c             	sub    esp,0xc
c00212a7:	e8 3c 11 00 00       	call   c00223e8 <avxInit>
c00212ac:	b8 00 00 00 00       	mov    eax,0x0
c00212b1:	83 c4 0c             	add    esp,0xc
c00212b4:	c3                   	ret    
c00212b5:	90                   	nop
c00212b6:	66 90                	xchg   ax,ax

c00212b8 <AVX::close(int, int, void*)>:
c00212b8:	83 ec 0c             	sub    esp,0xc
c00212bb:	e8 29 11 00 00       	call   c00223e9 <avxClose>
c00212c0:	b8 00 00 00 00       	mov    eax,0x0
c00212c5:	83 c4 0c             	add    esp,0xc
c00212c8:	c3                   	ret    
c00212c9:	90                   	nop
c00212ca:	66 90                	xchg   ax,ax

c00212cc <AVX::available()>:
c00212cc:	83 ec 0c             	sub    esp,0xc
c00212cf:	e8 0c 11 00 00       	call   c00223e0 <avxDetect>
c00212d4:	85 c0                	test   eax,eax
c00212d6:	0f 95 c0             	setne  al
c00212d9:	83 c4 0c             	add    esp,0xc
c00212dc:	c3                   	ret    
c00212dd:	90                   	nop
c00212de:	66 90                	xchg   ax,ax

c00212e0 <AVX::save(void*)>:
c00212e0:	83 ec 0c             	sub    esp,0xc
c00212e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00212e7:	83 ec 0c             	sub    esp,0xc
c00212ea:	50                   	push   eax
c00212eb:	e8 f6 10 00 00       	call   c00223e6 <avxSave>
c00212f0:	83 c4 10             	add    esp,0x10
c00212f3:	90                   	nop
c00212f4:	83 c4 0c             	add    esp,0xc
c00212f7:	c3                   	ret    

c00212f8 <AVX::load(void*)>:
c00212f8:	83 ec 0c             	sub    esp,0xc
c00212fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00212ff:	83 ec 0c             	sub    esp,0xc
c0021302:	50                   	push   eax
c0021303:	e8 df 10 00 00       	call   c00223e7 <avxLoad>
c0021308:	83 c4 10             	add    esp,0x10
c002130b:	90                   	nop
c002130c:	83 c4 0c             	add    esp,0xc
c002130f:	c3                   	ret    

c0021310 <AVX::AVX()>:
c0021310:	83 ec 0c             	sub    esp,0xc
c0021313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021317:	83 ec 08             	sub    esp,0x8
c002131a:	68 68 6f 02 c0       	push   0xc0026f68
c002131f:	50                   	push   eax
c0021320:	e8 2f d4 fe ff       	call   c000e754 <FPU::FPU(char const*)>
c0021325:	83 c4 10             	add    esp,0x10
c0021328:	ba 78 6f 02 c0       	mov    edx,0xc0026f78
c002132d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021331:	89 10                	mov    DWORD PTR [eax],edx
c0021333:	90                   	nop
c0021334:	83 c4 0c             	add    esp,0xc
c0021337:	c3                   	ret    

c0021338 <MMX::available()>:
c0021338:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c002133d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021343:	83 e0 20             	and    eax,0x20
c0021346:	84 c0                	test   al,al
c0021348:	0f 95 c0             	setne  al
c002134b:	c3                   	ret    

c002134c <MMX::open(int, int, void*)>:
c002134c:	83 ec 0c             	sub    esp,0xc
c002134f:	e8 1e 11 00 00       	call   c0022472 <x87Init>
c0021354:	b8 00 00 00 00       	mov    eax,0x0
c0021359:	83 c4 0c             	add    esp,0xc
c002135c:	c3                   	ret    
c002135d:	90                   	nop
c002135e:	66 90                	xchg   ax,ax

c0021360 <MMX::close(int, int, void*)>:
c0021360:	83 ec 0c             	sub    esp,0xc
c0021363:	e8 24 11 00 00       	call   c002248c <x87Close>
c0021368:	b8 00 00 00 00       	mov    eax,0x0
c002136d:	83 c4 0c             	add    esp,0xc
c0021370:	c3                   	ret    
c0021371:	90                   	nop
c0021372:	66 90                	xchg   ax,ax

c0021374 <MMX::save(void*)>:
c0021374:	83 ec 0c             	sub    esp,0xc
c0021377:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002137b:	83 ec 0c             	sub    esp,0xc
c002137e:	50                   	push   eax
c002137f:	e8 dd 10 00 00       	call   c0022461 <x87Save>
c0021384:	83 c4 10             	add    esp,0x10
c0021387:	90                   	nop
c0021388:	83 c4 0c             	add    esp,0xc
c002138b:	c3                   	ret    

c002138c <MMX::load(void*)>:
c002138c:	83 ec 0c             	sub    esp,0xc
c002138f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021393:	83 ec 0c             	sub    esp,0xc
c0021396:	50                   	push   eax
c0021397:	e8 ce 10 00 00       	call   c002246a <x87Load>
c002139c:	83 c4 10             	add    esp,0x10
c002139f:	90                   	nop
c00213a0:	83 c4 0c             	add    esp,0xc
c00213a3:	c3                   	ret    

c00213a4 <MMX::MMX()>:
c00213a4:	83 ec 0c             	sub    esp,0xc
c00213a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213ab:	83 ec 08             	sub    esp,0x8
c00213ae:	68 a8 6f 02 c0       	push   0xc0026fa8
c00213b3:	50                   	push   eax
c00213b4:	e8 9b d3 fe ff       	call   c000e754 <FPU::FPU(char const*)>
c00213b9:	83 c4 10             	add    esp,0x10
c00213bc:	ba b8 6f 02 c0       	mov    edx,0xc0026fb8
c00213c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213c5:	89 10                	mov    DWORD PTR [eax],edx
c00213c7:	90                   	nop
c00213c8:	83 c4 0c             	add    esp,0xc
c00213cb:	c3                   	ret    

c00213cc <SSE::open(int, int, void*)>:
c00213cc:	83 ec 0c             	sub    esp,0xc
c00213cf:	e8 50 10 00 00       	call   c0022424 <sseInit>
c00213d4:	b8 00 00 00 00       	mov    eax,0x0
c00213d9:	83 c4 0c             	add    esp,0xc
c00213dc:	c3                   	ret    
c00213dd:	90                   	nop
c00213de:	66 90                	xchg   ax,ax

c00213e0 <SSE::close(int, int, void*)>:
c00213e0:	83 ec 0c             	sub    esp,0xc
c00213e3:	e8 4c 10 00 00       	call   c0022434 <sseClose>
c00213e8:	b8 00 00 00 00       	mov    eax,0x0
c00213ed:	83 c4 0c             	add    esp,0xc
c00213f0:	c3                   	ret    
c00213f1:	90                   	nop
c00213f2:	66 90                	xchg   ax,ax

c00213f4 <SSE::available()>:
c00213f4:	83 ec 1c             	sub    esp,0x1c
c00213f7:	e8 04 10 00 00       	call   c0022400 <absolutelyNoChanceInHell>
c00213fc:	85 c0                	test   eax,eax
c00213fe:	0f 95 c0             	setne  al
c0021401:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021405:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0021409:	83 c4 1c             	add    esp,0x1c
c002140c:	c3                   	ret    
c002140d:	90                   	nop
c002140e:	66 90                	xchg   ax,ax

c0021410 <SSE::save(void*)>:
c0021410:	83 ec 0c             	sub    esp,0xc
c0021413:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021417:	83 ec 0c             	sub    esp,0xc
c002141a:	50                   	push   eax
c002141b:	e8 f8 0f 00 00       	call   c0022418 <sseSave>
c0021420:	83 c4 10             	add    esp,0x10
c0021423:	90                   	nop
c0021424:	83 c4 0c             	add    esp,0xc
c0021427:	c3                   	ret    

c0021428 <SSE::load(void*)>:
c0021428:	83 ec 0c             	sub    esp,0xc
c002142b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002142f:	83 ec 0c             	sub    esp,0xc
c0021432:	50                   	push   eax
c0021433:	e8 e6 0f 00 00       	call   c002241e <sseLoad>
c0021438:	83 c4 10             	add    esp,0x10
c002143b:	90                   	nop
c002143c:	83 c4 0c             	add    esp,0xc
c002143f:	c3                   	ret    

c0021440 <SSE::SSE()>:
c0021440:	83 ec 0c             	sub    esp,0xc
c0021443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021447:	83 ec 08             	sub    esp,0x8
c002144a:	68 e8 6f 02 c0       	push   0xc0026fe8
c002144f:	50                   	push   eax
c0021450:	e8 ff d2 fe ff       	call   c000e754 <FPU::FPU(char const*)>
c0021455:	83 c4 10             	add    esp,0x10
c0021458:	ba f8 6f 02 c0       	mov    edx,0xc0026ff8
c002145d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021461:	89 10                	mov    DWORD PTR [eax],edx
c0021463:	90                   	nop
c0021464:	83 c4 0c             	add    esp,0xc
c0021467:	c3                   	ret    

c0021468 <x87::open(int, int, void*)>:
c0021468:	83 ec 0c             	sub    esp,0xc
c002146b:	e8 02 10 00 00       	call   c0022472 <x87Init>
c0021470:	b8 00 00 00 00       	mov    eax,0x0
c0021475:	83 c4 0c             	add    esp,0xc
c0021478:	c3                   	ret    
c0021479:	90                   	nop
c002147a:	66 90                	xchg   ax,ax

c002147c <x87::close(int, int, void*)>:
c002147c:	83 ec 0c             	sub    esp,0xc
c002147f:	e8 08 10 00 00       	call   c002248c <x87Close>
c0021484:	b8 00 00 00 00       	mov    eax,0x0
c0021489:	83 c4 0c             	add    esp,0xc
c002148c:	c3                   	ret    
c002148d:	90                   	nop
c002148e:	66 90                	xchg   ax,ax

c0021490 <x87::available()>:
c0021490:	83 ec 0c             	sub    esp,0xc
c0021493:	e8 ae 0f 00 00       	call   c0022446 <x87Detect>
c0021498:	85 c0                	test   eax,eax
c002149a:	0f 95 c0             	setne  al
c002149d:	83 c4 0c             	add    esp,0xc
c00214a0:	c3                   	ret    
c00214a1:	90                   	nop
c00214a2:	66 90                	xchg   ax,ax

c00214a4 <x87::save(void*)>:
c00214a4:	83 ec 0c             	sub    esp,0xc
c00214a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00214ab:	83 ec 0c             	sub    esp,0xc
c00214ae:	50                   	push   eax
c00214af:	e8 ad 0f 00 00       	call   c0022461 <x87Save>
c00214b4:	83 c4 10             	add    esp,0x10
c00214b7:	90                   	nop
c00214b8:	83 c4 0c             	add    esp,0xc
c00214bb:	c3                   	ret    

c00214bc <x87::load(void*)>:
c00214bc:	83 ec 0c             	sub    esp,0xc
c00214bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00214c3:	83 ec 0c             	sub    esp,0xc
c00214c6:	50                   	push   eax
c00214c7:	e8 9e 0f 00 00       	call   c002246a <x87Load>
c00214cc:	83 c4 10             	add    esp,0x10
c00214cf:	90                   	nop
c00214d0:	83 c4 0c             	add    esp,0xc
c00214d3:	c3                   	ret    

c00214d4 <x87::x87()>:
c00214d4:	83 ec 0c             	sub    esp,0xc
c00214d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214db:	83 ec 08             	sub    esp,0x8
c00214de:	68 28 70 02 c0       	push   0xc0027028
c00214e3:	50                   	push   eax
c00214e4:	e8 6b d2 fe ff       	call   c000e754 <FPU::FPU(char const*)>
c00214e9:	83 c4 10             	add    esp,0x10
c00214ec:	ba 38 70 02 c0       	mov    edx,0xc0027038
c00214f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214f5:	89 10                	mov    DWORD PTR [eax],edx
c00214f7:	90                   	nop
c00214f8:	83 c4 0c             	add    esp,0xc
c00214fb:	c3                   	ret    

c00214fc <APIC::disable()>:
c00214fc:	90                   	nop
c00214fd:	c3                   	ret    

c00214fe <APIC::close(int, int, void*)>:
c00214fe:	55                   	push   ebp
c00214ff:	89 e5                	mov    ebp,esp
c0021501:	83 ec 08             	sub    esp,0x8
c0021504:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021507:	8b 00                	mov    eax,DWORD PTR [eax]
c0021509:	83 c0 3c             	add    eax,0x3c
c002150c:	8b 00                	mov    eax,DWORD PTR [eax]
c002150e:	83 ec 0c             	sub    esp,0xc
c0021511:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021514:	ff d0                	call   eax
c0021516:	83 c4 10             	add    esp,0x10
c0021519:	b8 00 00 00 00       	mov    eax,0x0
c002151e:	c9                   	leave  
c002151f:	c3                   	ret    

c0021520 <IOAPIC::close(int, int, void*)>:
c0021520:	b8 00 00 00 00       	mov    eax,0x0
c0021525:	c3                   	ret    

c0021526 <APIC::io_wait()>:
c0021526:	eb 00                	jmp    c0021528 <APIC::io_wait()+0x2>
c0021528:	eb 00                	jmp    c002152a <APIC::io_wait()+0x4>
c002152a:	90                   	nop
c002152b:	c3                   	ret    

c002152c <APIC::getBase()>:
c002152c:	55                   	push   ebp
c002152d:	89 e5                	mov    ebp,esp
c002152f:	83 ec 18             	sub    esp,0x18
c0021532:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0021537:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002153d:	83 e0 08             	and    eax,0x8
c0021540:	84 c0                	test   al,al
c0021542:	75 07                	jne    c002154b <APIC::getBase()+0x1f>
c0021544:	b8 00 00 00 00       	mov    eax,0x0
c0021549:	eb 21                	jmp    c002156c <APIC::getBase()+0x40>
c002154b:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0021550:	83 ec 08             	sub    esp,0x8
c0021553:	6a 1b                	push   0x1b
c0021555:	50                   	push   eax
c0021556:	e8 cf 79 fe ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c002155b:	83 c4 10             	add    esp,0x10
c002155e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021561:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0021564:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021567:	25 00 f0 ff ff       	and    eax,0xfffff000
c002156c:	c9                   	leave  
c002156d:	c3                   	ret    

c002156e <APIC::eoi(unsigned char)>:
c002156e:	55                   	push   ebp
c002156f:	89 e5                	mov    ebp,esp
c0021571:	83 ec 28             	sub    esp,0x28
c0021574:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021577:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002157a:	83 ec 0c             	sub    esp,0xc
c002157d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021580:	e8 a7 ff ff ff       	call   c002152c <APIC::getBase()>
c0021585:	83 c4 10             	add    esp,0x10
c0021588:	05 b0 00 00 00       	add    eax,0xb0
c002158d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0021590:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021593:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021599:	90                   	nop
c002159a:	c9                   	leave  
c002159b:	c3                   	ret    

c002159c <APIC::open(int, int, void*)>:
c002159c:	55                   	push   ebp
c002159d:	89 e5                	mov    ebp,esp
c002159f:	57                   	push   edi
c00215a0:	56                   	push   esi
c00215a1:	53                   	push   ebx
c00215a2:	83 ec 2c             	sub    esp,0x2c
c00215a5:	83 ec 0c             	sub    esp,0xc
c00215a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00215ab:	e8 7c ff ff ff       	call   c002152c <APIC::getBase()>
c00215b0:	83 c4 10             	add    esp,0x10
c00215b3:	89 c2                	mov    edx,eax
c00215b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00215b8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00215be:	0f b6 f8             	movzx  edi,al
c00215c1:	89 d0                	mov    eax,edx
c00215c3:	ba 00 00 00 00       	mov    edx,0x0
c00215c8:	89 c1                	mov    ecx,eax
c00215ca:	80 e5 ff             	and    ch,0xff
c00215cd:	89 cb                	mov    ebx,ecx
c00215cf:	0f b6 f2             	movzx  esi,dl
c00215d2:	89 d8                	mov    eax,ebx
c00215d4:	89 f2                	mov    edx,esi
c00215d6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00215d9:	8d 5f 08             	lea    ebx,[edi+0x8]
c00215dc:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00215e0:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00215e4:	83 e0 00             	and    eax,0x0
c00215e7:	09 d0                	or     eax,edx
c00215e9:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00215ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00215f0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00215f6:	8d 50 01             	lea    edx,[eax+0x1]
c00215f9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00215fc:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021602:	0f b6 d0             	movzx  edx,al
c0021605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021608:	83 c2 08             	add    edx,0x8
c002160b:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002160f:	0f b6 c9             	movzx  ecx,cl
c0021612:	81 c9 00 00 01 00    	or     ecx,0x10000
c0021618:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002161c:	83 ec 0c             	sub    esp,0xc
c002161f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021622:	e8 05 ff ff ff       	call   c002152c <APIC::getBase()>
c0021627:	83 c4 10             	add    esp,0x10
c002162a:	05 f0 00 00 00       	add    eax,0xf0
c002162f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0021632:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021635:	8b 00                	mov    eax,DWORD PTR [eax]
c0021637:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002163a:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0021641:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0021648:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002164b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002164e:	89 10                	mov    DWORD PTR [eax],edx
c0021650:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0021657:	a1 b0 88 02 c0       	mov    eax,ds:0xc00288b0
c002165c:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002165f:	7d 7c                	jge    c00216dd <APIC::open(int, int, void*)+0x141>
c0021661:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021664:	8b 04 85 c0 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7740]
c002166b:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002166e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021671:	8b 04 85 c0 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7740]
c0021678:	c1 e8 08             	shr    eax,0x8
c002167b:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002167f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021682:	8b 04 85 c0 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7740]
c0021689:	c1 e8 18             	shr    eax,0x18
c002168c:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002168f:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0021693:	75 40                	jne    c00216d5 <APIC::open(int, int, void*)+0x139>
c0021695:	83 ec 0c             	sub    esp,0xc
c0021698:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002169b:	e8 8c fe ff ff       	call   c002152c <APIC::getBase()>
c00216a0:	83 c4 10             	add    esp,0x10
c00216a3:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00216a7:	75 07                	jne    c00216b0 <APIC::open(int, int, void*)+0x114>
c00216a9:	ba 60 03 00 00       	mov    edx,0x360
c00216ae:	eb 05                	jmp    c00216b5 <APIC::open(int, int, void*)+0x119>
c00216b0:	ba 50 03 00 00       	mov    edx,0x350
c00216b5:	01 d0                	add    eax,edx
c00216b7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00216ba:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00216bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00216bf:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00216c2:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00216c9:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00216cd:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00216d0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00216d3:	89 10                	mov    DWORD PTR [eax],edx
c00216d5:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00216d8:	e9 7a ff ff ff       	jmp    c0021657 <APIC::open(int, int, void*)+0xbb>
c00216dd:	b8 00 00 00 00       	mov    eax,0x0
c00216e2:	8d 65 f4             	lea    esp,[ebp-0xc]
c00216e5:	5b                   	pop    ebx
c00216e6:	5e                   	pop    esi
c00216e7:	5f                   	pop    edi
c00216e8:	5d                   	pop    ebp
c00216e9:	c3                   	ret    

c00216ea <IOAPIC::IOAPIC()>:
c00216ea:	83 ec 0c             	sub    esp,0xc
c00216ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216f1:	83 ec 08             	sub    esp,0x8
c00216f4:	68 68 70 02 c0       	push   0xc0027068
c00216f9:	50                   	push   eax
c00216fa:	e8 43 cd fe ff       	call   c000e442 <Device::Device(char const*)>
c00216ff:	83 c4 10             	add    esp,0x10
c0021702:	ba 90 71 02 c0       	mov    edx,0xc0027190
c0021707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002170b:	89 10                	mov    DWORD PTR [eax],edx
c002170d:	90                   	nop
c002170e:	83 c4 0c             	add    esp,0xc
c0021711:	c3                   	ret    

c0021712 <APIC::APIC()>:
c0021712:	53                   	push   ebx
c0021713:	83 ec 18             	sub    esp,0x18
c0021716:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002171a:	83 ec 08             	sub    esp,0x8
c002171d:	68 70 70 02 c0       	push   0xc0027070
c0021722:	50                   	push   eax
c0021723:	e8 92 d4 fe ff       	call   c000ebba <InterruptController::InterruptController(char const*)>
c0021728:	83 c4 10             	add    esp,0x10
c002172b:	ba 48 71 02 c0       	mov    edx,0xc0027148
c0021730:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021734:	89 10                	mov    DWORD PTR [eax],edx
c0021736:	a0 e0 9f 02 c0       	mov    al,ds:0xc0029fe0
c002173b:	83 f0 01             	xor    eax,0x1
c002173e:	84 c0                	test   al,al
c0021740:	0f 84 a1 00 00 00    	je     c00217e7 <APIC::APIC()+0xd5>
c0021746:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002174b:	a0 60 89 02 c0       	mov    al,ds:0xc0028960
c0021750:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0021754:	0f 83 86 00 00 00    	jae    c00217e0 <APIC::APIC()+0xce>
c002175a:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0021762:	83 ec 0c             	sub    esp,0xc
c0021765:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021769:	e8 a1 82 fe ff       	call   c0009a0f <malloc>
c002176e:	83 c4 10             	add    esp,0x10
c0021771:	89 c3                	mov    ebx,eax
c0021773:	83 ec 0c             	sub    esp,0xc
c0021776:	53                   	push   ebx
c0021777:	e8 6e ff ff ff       	call   c00216ea <IOAPIC::IOAPIC()>
c002177c:	83 c4 10             	add    esp,0x10
c002177f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0021783:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0021788:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002178c:	89 14 85 c0 9f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6040],edx
c0021793:	a1 a0 9f 02 c0       	mov    eax,ds:0xc0029fa0
c0021798:	40                   	inc    eax
c0021799:	a3 a0 9f 02 c0       	mov    ds:0xc0029fa0,eax
c002179e:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c00217a3:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00217a9:	83 ec 08             	sub    esp,0x8
c00217ac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00217b0:	50                   	push   eax
c00217b1:	e8 88 ca fe ff       	call   c000e23e <Device::addChild(Device*)>
c00217b6:	83 c4 10             	add    esp,0x10
c00217b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00217bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00217bf:	83 c0 08             	add    eax,0x8
c00217c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00217c4:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00217c9:	6a 00                	push   0x0
c00217cb:	6a 00                	push   0x0
c00217cd:	52                   	push   edx
c00217ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00217d2:	ff d0                	call   eax
c00217d4:	83 c4 10             	add    esp,0x10
c00217d7:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00217db:	e9 6b ff ff ff       	jmp    c002174b <APIC::APIC()+0x39>
c00217e0:	c6 05 e0 9f 02 c0 01 	mov    BYTE PTR ds:0xc0029fe0,0x1
c00217e7:	90                   	nop
c00217e8:	83 c4 18             	add    esp,0x18
c00217eb:	5b                   	pop    ebx
c00217ec:	c3                   	ret    
c00217ed:	90                   	nop

c00217ee <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00217ee:	55                   	push   ebp
c00217ef:	89 e5                	mov    ebp,esp
c00217f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217f4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00217fa:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00217fd:	72 1d                	jb     c002181c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00217ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021802:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0021808:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002180b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0021811:	01 d0                	add    eax,edx
c0021813:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021816:	73 04                	jae    c002181c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021818:	b0 01                	mov    al,0x1
c002181a:	eb 02                	jmp    c002181e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002181c:	b0 00                	mov    al,0x0
c002181e:	5d                   	pop    ebp
c002181f:	c3                   	ret    

c0021820 <IOAPIC::read(int)>:
c0021820:	55                   	push   ebp
c0021821:	89 e5                	mov    ebp,esp
c0021823:	83 ec 10             	sub    esp,0x10
c0021826:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021829:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002182f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021832:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021835:	0f b6 d0             	movzx  edx,al
c0021838:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002183b:	89 10                	mov    DWORD PTR [eax],edx
c002183d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021840:	83 c0 10             	add    eax,0x10
c0021843:	8b 00                	mov    eax,DWORD PTR [eax]
c0021845:	c9                   	leave  
c0021846:	c3                   	ret    
c0021847:	90                   	nop

c0021848 <IOAPIC::open(int, int, void*)>:
c0021848:	55                   	push   ebp
c0021849:	89 e5                	mov    ebp,esp
c002184b:	57                   	push   edi
c002184c:	56                   	push   esi
c002184d:	53                   	push   ebx
c002184e:	83 ec 0c             	sub    esp,0xc
c0021851:	83 ec 0c             	sub    esp,0xc
c0021854:	68 9b 70 02 c0       	push   0xc002709b
c0021859:	e8 a1 b4 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c002185e:	83 c4 10             	add    esp,0x10
c0021861:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021864:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021867:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002186d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021870:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021876:	8b 14 85 a0 89 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7660]
c002187d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021880:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021889:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002188f:	8b 14 85 20 8a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd75e0]
c0021896:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021899:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002189f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00218a2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00218a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00218ab:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00218b1:	0f b6 f8             	movzx  edi,al
c00218b4:	89 d0                	mov    eax,edx
c00218b6:	ba 00 00 00 00       	mov    edx,0x0
c00218bb:	89 c1                	mov    ecx,eax
c00218bd:	80 e5 ff             	and    ch,0xff
c00218c0:	89 cb                	mov    ebx,ecx
c00218c2:	0f b6 f2             	movzx  esi,dl
c00218c5:	89 d8                	mov    eax,ebx
c00218c7:	89 f2                	mov    edx,esi
c00218c9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00218cc:	8d 5f 08             	lea    ebx,[edi+0x8]
c00218cf:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00218d3:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00218d7:	83 e0 00             	and    eax,0x0
c00218da:	09 d0                	or     eax,edx
c00218dc:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00218e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00218e3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00218e9:	8d 50 01             	lea    edx,[eax+0x1]
c00218ec:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00218ef:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00218f5:	0f b6 d0             	movzx  edx,al
c00218f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00218fb:	83 c2 08             	add    edx,0x8
c00218fe:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021902:	0f b6 c9             	movzx  ecx,cl
c0021905:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002190b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002190f:	83 ec 08             	sub    esp,0x8
c0021912:	6a 01                	push   0x1
c0021914:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021917:	e8 04 ff ff ff       	call   c0021820 <IOAPIC::read(int)>
c002191c:	83 c4 10             	add    esp,0x10
c002191f:	c1 f8 10             	sar    eax,0x10
c0021922:	0f b6 c0             	movzx  eax,al
c0021925:	8d 50 01             	lea    edx,[eax+0x1]
c0021928:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002192b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0021931:	b8 00 00 00 00       	mov    eax,0x0
c0021936:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021939:	5b                   	pop    ebx
c002193a:	5e                   	pop    esi
c002193b:	5f                   	pop    edi
c002193c:	5d                   	pop    ebp
c002193d:	c3                   	ret    

c002193e <IOAPIC::write(int, int)>:
c002193e:	55                   	push   ebp
c002193f:	89 e5                	mov    ebp,esp
c0021941:	83 ec 10             	sub    esp,0x10
c0021944:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021947:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002194d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021950:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021953:	0f b6 d0             	movzx  edx,al
c0021956:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021959:	89 10                	mov    DWORD PTR [eax],edx
c002195b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002195e:	8d 50 10             	lea    edx,[eax+0x10]
c0021961:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021964:	89 02                	mov    DWORD PTR [edx],eax
c0021966:	90                   	nop
c0021967:	c9                   	leave  
c0021968:	c3                   	ret    
c0021969:	90                   	nop

c002196a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002196a:	55                   	push   ebp
c002196b:	89 e5                	mov    ebp,esp
c002196d:	53                   	push   ebx
c002196e:	83 ec 2c             	sub    esp,0x2c
c0021971:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021974:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0021977:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002197a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002197d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021980:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021983:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0021986:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021989:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002198c:	88 d8                	mov    al,bl
c002198e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0021991:	88 c8                	mov    al,cl
c0021993:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0021996:	88 d0                	mov    al,dl
c0021998:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002199b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002199f:	83 c0 08             	add    eax,0x8
c00219a2:	01 c0                	add    eax,eax
c00219a4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00219a7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00219ab:	83 c0 08             	add    eax,0x8
c00219ae:	01 c0                	add    eax,eax
c00219b0:	40                   	inc    eax
c00219b1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00219b4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00219b7:	50                   	push   eax
c00219b8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00219bb:	e8 60 fe ff ff       	call   c0021820 <IOAPIC::read(int)>
c00219c0:	83 c4 08             	add    esp,0x8
c00219c3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00219c6:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00219cd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00219d0:	c1 e0 18             	shl    eax,0x18
c00219d3:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00219d6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00219d9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00219dc:	52                   	push   edx
c00219dd:	50                   	push   eax
c00219de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00219e1:	e8 58 ff ff ff       	call   c002193e <IOAPIC::write(int, int)>
c00219e6:	83 c4 0c             	add    esp,0xc
c00219e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00219ec:	50                   	push   eax
c00219ed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00219f0:	e8 2b fe ff ff       	call   c0021820 <IOAPIC::read(int)>
c00219f5:	83 c4 08             	add    esp,0x8
c00219f8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00219fb:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0021a02:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0021a09:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0021a10:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0021a14:	74 09                	je     c0021a1f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0021a16:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0021a1d:	eb 07                	jmp    c0021a26 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0021a1f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0021a26:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0021a2a:	74 09                	je     c0021a35 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0021a2c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0021a33:	eb 07                	jmp    c0021a3c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0021a35:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0021a3c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0021a43:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0021a47:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0021a4a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0021a4d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021a50:	52                   	push   edx
c0021a51:	50                   	push   eax
c0021a52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021a55:	e8 e4 fe ff ff       	call   c002193e <IOAPIC::write(int, int)>
c0021a5a:	83 c4 0c             	add    esp,0xc
c0021a5d:	90                   	nop
c0021a5e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0021a61:	c9                   	leave  
c0021a62:	c3                   	ret    
c0021a63:	90                   	nop

c0021a64 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0021a64:	55                   	push   ebp
c0021a65:	89 e5                	mov    ebp,esp
c0021a67:	57                   	push   edi
c0021a68:	56                   	push   esi
c0021a69:	53                   	push   ebx
c0021a6a:	83 ec 2c             	sub    esp,0x2c
c0021a6d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021a70:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0021a73:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0021a77:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0021a7b:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0021a7f:	74 5a                	je     c0021adb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021a81:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0021a85:	7f 44                	jg     c0021acb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0021a87:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a8a:	05 40 77 02 c0       	add    eax,0xc0027740
c0021a8f:	8a 00                	mov    al,BYTE PTR [eax]
c0021a91:	0f b6 c0             	movzx  eax,al
c0021a94:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0021a97:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a9a:	66 8b 84 00 40 89 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd76c0]
c0021aa2:	0f b7 c0             	movzx  eax,ax
c0021aa5:	83 e0 02             	and    eax,0x2
c0021aa8:	85 c0                	test   eax,eax
c0021aaa:	74 04                	je     c0021ab0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0021aac:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0021ab0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021ab3:	66 8b 84 00 40 89 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd76c0]
c0021abb:	0f b7 c0             	movzx  eax,ax
c0021abe:	83 e0 08             	and    eax,0x8
c0021ac1:	85 c0                	test   eax,eax
c0021ac3:	74 16                	je     c0021adb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021ac5:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0021ac9:	eb 10                	jmp    c0021adb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021acb:	83 ec 0c             	sub    esp,0xc
c0021ace:	68 ac 70 02 c0       	push   0xc00270ac
c0021ad3:	e8 e3 2e ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0021ad8:	83 c4 10             	add    esp,0x10
c0021adb:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0021adf:	a1 a0 9f 02 c0       	mov    eax,ds:0xc0029fa0
c0021ae4:	83 ec 08             	sub    esp,0x8
c0021ae7:	50                   	push   eax
c0021ae8:	68 e4 70 02 c0       	push   0xc00270e4
c0021aed:	e8 0d b2 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0021af2:	83 c4 10             	add    esp,0x10
c0021af5:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0021afc:	a1 a0 9f 02 c0       	mov    eax,ds:0xc0029fa0
c0021b01:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0021b04:	7d 67                	jge    c0021b6d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0021b06:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021b09:	8b 04 85 c0 9f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6040]
c0021b10:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021b13:	83 ec 08             	sub    esp,0x8
c0021b16:	52                   	push   edx
c0021b17:	50                   	push   eax
c0021b18:	e8 d1 fc ff ff       	call   c00217ee <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0021b1d:	83 c4 10             	add    esp,0x10
c0021b20:	84 c0                	test   al,al
c0021b22:	74 44                	je     c0021b68 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0021b24:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021b27:	8b 1c 85 c0 9f 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd6040]
c0021b2e:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0021b32:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021b35:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0021b39:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021b3c:	83 c0 20             	add    eax,0x20
c0021b3f:	0f b6 f0             	movzx  esi,al
c0021b42:	b8 00 00 00 00       	mov    eax,0x0
c0021b47:	99                   	cdq    
c0021b48:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0021b4b:	0f b6 c9             	movzx  ecx,cl
c0021b4e:	83 ec 04             	sub    esp,0x4
c0021b51:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0021b54:	57                   	push   edi
c0021b55:	56                   	push   esi
c0021b56:	52                   	push   edx
c0021b57:	50                   	push   eax
c0021b58:	51                   	push   ecx
c0021b59:	53                   	push   ebx
c0021b5a:	e8 0b fe ff ff       	call   c002196a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0021b5f:	83 c4 20             	add    esp,0x20
c0021b62:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0021b66:	eb 05                	jmp    c0021b6d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0021b68:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0021b6b:	eb 8f                	jmp    c0021afc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0021b6d:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0021b70:	83 f0 01             	xor    eax,0x1
c0021b73:	84 c0                	test   al,al
c0021b75:	74 10                	je     c0021b87 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0021b77:	83 ec 0c             	sub    esp,0xc
c0021b7a:	68 fb 70 02 c0       	push   0xc00270fb
c0021b7f:	e8 37 2e ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0021b84:	83 c4 10             	add    esp,0x10
c0021b87:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0021b8b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0021b92:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0021b96:	7f 65                	jg     c0021bfd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0021b98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021b9b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021b9e:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021ba5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021ba8:	01 ca                	add    edx,ecx
c0021baa:	83 c2 54             	add    edx,0x54
c0021bad:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0021bb1:	85 c0                	test   eax,eax
c0021bb3:	75 43                	jne    c0021bf8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0021bb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021bb8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021bbb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021bc2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021bc5:	01 ca                	add    edx,ecx
c0021bc7:	8d 4a 54             	lea    ecx,[edx+0x54]
c0021bca:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021bcd:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021bd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021bd4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021bd7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021bde:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021be1:	01 ca                	add    edx,ecx
c0021be3:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0021be9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021bec:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021bf0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021bf3:	83 e8 20             	sub    eax,0x20
c0021bf6:	eb 1a                	jmp    c0021c12 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0021bf8:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0021bfb:	eb 95                	jmp    c0021b92 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0021bfd:	83 ec 0c             	sub    esp,0xc
c0021c00:	68 08 71 02 c0       	push   0xc0027108
c0021c05:	e8 b1 2d ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0021c0a:	83 c4 10             	add    esp,0x10
c0021c0d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021c12:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021c15:	5b                   	pop    ebx
c0021c16:	5e                   	pop    esi
c0021c17:	5f                   	pop    edi
c0021c18:	5d                   	pop    ebp
c0021c19:	c3                   	ret    

c0021c1a <PIC::disable()>:
c0021c1a:	55                   	push   ebp
c0021c1b:	89 e5                	mov    ebp,esp
c0021c1d:	83 ec 10             	sub    esp,0x10
c0021c20:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0021c26:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0021c2a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021c2d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0021c31:	ee                   	out    dx,al
c0021c32:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0021c38:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0021c3c:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021c3f:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0021c43:	ee                   	out    dx,al
c0021c44:	90                   	nop
c0021c45:	c9                   	leave  
c0021c46:	c3                   	ret    
c0021c47:	90                   	nop

c0021c48 <PIC::close(int, int, void*)>:
c0021c48:	55                   	push   ebp
c0021c49:	89 e5                	mov    ebp,esp
c0021c4b:	83 ec 08             	sub    esp,0x8
c0021c4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021c51:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c53:	83 c0 3c             	add    eax,0x3c
c0021c56:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c58:	83 ec 0c             	sub    esp,0xc
c0021c5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021c5e:	ff d0                	call   eax
c0021c60:	83 c4 10             	add    esp,0x10
c0021c63:	b8 00 00 00 00       	mov    eax,0x0
c0021c68:	c9                   	leave  
c0021c69:	c3                   	ret    

c0021c6a <PIC::PIC()>:
c0021c6a:	83 ec 0c             	sub    esp,0xc
c0021c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c71:	83 ec 08             	sub    esp,0x8
c0021c74:	68 b4 71 02 c0       	push   0xc00271b4
c0021c79:	50                   	push   eax
c0021c7a:	e8 3b cf fe ff       	call   c000ebba <InterruptController::InterruptController(char const*)>
c0021c7f:	83 c4 10             	add    esp,0x10
c0021c82:	ba e0 71 02 c0       	mov    edx,0xc00271e0
c0021c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c8b:	89 10                	mov    DWORD PTR [eax],edx
c0021c8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c91:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021c97:	0f b6 d0             	movzx  edx,al
c0021c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c9e:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0021ca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ca9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021caf:	0f b6 d0             	movzx  edx,al
c0021cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cb6:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cbf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021cc5:	8d 50 01             	lea    edx,[eax+0x1]
c0021cc8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021ccc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021cd2:	0f b6 d0             	movzx  edx,al
c0021cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cd9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021cdd:	83 e1 3f             	and    ecx,0x3f
c0021ce0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ce8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021cee:	0f b6 d0             	movzx  edx,al
c0021cf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cf5:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0021cfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d00:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021d06:	0f b6 d0             	movzx  edx,al
c0021d09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d0d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021d12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d16:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021d1c:	8d 50 01             	lea    edx,[eax+0x1]
c0021d1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021d23:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021d29:	0f b6 d0             	movzx  edx,al
c0021d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d30:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021d34:	83 e1 3f             	and    ecx,0x3f
c0021d37:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021d3b:	90                   	nop
c0021d3c:	83 c4 0c             	add    esp,0xc
c0021d3f:	c3                   	ret    

c0021d40 <PIC::ioWait()>:
c0021d40:	eb 00                	jmp    c0021d42 <PIC::ioWait()+0x2>
c0021d42:	eb 00                	jmp    c0021d44 <PIC::ioWait()+0x4>
c0021d44:	90                   	nop
c0021d45:	c3                   	ret    

c0021d46 <PIC::getIRQReg(int)>:
c0021d46:	55                   	push   ebp
c0021d47:	89 e5                	mov    ebp,esp
c0021d49:	83 ec 10             	sub    esp,0x10
c0021d4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021d4f:	0f b6 c0             	movzx  eax,al
c0021d52:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0021d58:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0021d5b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021d5e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021d62:	ee                   	out    dx,al
c0021d63:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021d66:	0f b6 c0             	movzx  eax,al
c0021d69:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021d6f:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0021d72:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021d75:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021d79:	ee                   	out    dx,al
c0021d7a:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0021d80:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0021d84:	89 c2                	mov    edx,eax
c0021d86:	ec                   	in     al,dx
c0021d87:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0021d8a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021d8d:	0f b6 c0             	movzx  eax,al
c0021d90:	c1 e0 08             	shl    eax,0x8
c0021d93:	89 c1                	mov    ecx,eax
c0021d95:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0021d9b:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0021d9f:	89 c2                	mov    edx,eax
c0021da1:	ec                   	in     al,dx
c0021da2:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0021da5:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021da8:	0f b6 c0             	movzx  eax,al
c0021dab:	09 c8                	or     eax,ecx
c0021dad:	c9                   	leave  
c0021dae:	c3                   	ret    
c0021daf:	90                   	nop

c0021db0 <PIC::eoi(unsigned char)>:
c0021db0:	55                   	push   ebp
c0021db1:	89 e5                	mov    ebp,esp
c0021db3:	83 ec 14             	sub    esp,0x14
c0021db6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021db9:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0021dbc:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0021dc0:	75 1e                	jne    c0021de0 <PIC::eoi(unsigned char)+0x30>
c0021dc2:	6a 0b                	push   0xb
c0021dc4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021dc7:	e8 7a ff ff ff       	call   c0021d46 <PIC::getIRQReg(int)>
c0021dcc:	83 c4 08             	add    esp,0x8
c0021dcf:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0021dd3:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0021dd7:	25 80 00 00 00       	and    eax,0x80
c0021ddc:	85 c0                	test   eax,eax
c0021dde:	74 5f                	je     c0021e3f <PIC::eoi(unsigned char)+0x8f>
c0021de0:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0021de4:	75 2d                	jne    c0021e13 <PIC::eoi(unsigned char)+0x63>
c0021de6:	6a 0b                	push   0xb
c0021de8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021deb:	e8 56 ff ff ff       	call   c0021d46 <PIC::getIRQReg(int)>
c0021df0:	83 c4 08             	add    esp,0x8
c0021df3:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0021df7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021dfa:	66 85 c0             	test   ax,ax
c0021dfd:	78 14                	js     c0021e13 <PIC::eoi(unsigned char)+0x63>
c0021dff:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0021e05:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0021e09:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021e0c:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0021e10:	ee                   	out    dx,al
c0021e11:	eb 2d                	jmp    c0021e40 <PIC::eoi(unsigned char)+0x90>
c0021e13:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0021e17:	76 12                	jbe    c0021e2b <PIC::eoi(unsigned char)+0x7b>
c0021e19:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021e1f:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0021e23:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021e26:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021e2a:	ee                   	out    dx,al
c0021e2b:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0021e31:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0021e35:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021e38:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021e3c:	ee                   	out    dx,al
c0021e3d:	eb 01                	jmp    c0021e40 <PIC::eoi(unsigned char)+0x90>
c0021e3f:	90                   	nop
c0021e40:	c9                   	leave  
c0021e41:	c3                   	ret    

c0021e42 <PIC::remap()>:
c0021e42:	55                   	push   ebp
c0021e43:	89 e5                	mov    ebp,esp
c0021e45:	83 ec 48             	sub    esp,0x48
c0021e48:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0021e4f:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0021e56:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0021e5c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0021e5f:	89 c2                	mov    edx,eax
c0021e61:	ec                   	in     al,dx
c0021e62:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0021e65:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0021e68:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0021e6b:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0021e71:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0021e74:	89 c2                	mov    edx,eax
c0021e76:	ec                   	in     al,dx
c0021e77:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0021e7a:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0021e7d:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0021e80:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0021e86:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0021e8a:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0021e8d:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0021e90:	ee                   	out    dx,al
c0021e91:	83 ec 0c             	sub    esp,0xc
c0021e94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e97:	e8 a4 fe ff ff       	call   c0021d40 <PIC::ioWait()>
c0021e9c:	83 c4 10             	add    esp,0x10
c0021e9f:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0021ea5:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0021ea9:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0021eac:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021eaf:	ee                   	out    dx,al
c0021eb0:	83 ec 0c             	sub    esp,0xc
c0021eb3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021eb6:	e8 85 fe ff ff       	call   c0021d40 <PIC::ioWait()>
c0021ebb:	83 c4 10             	add    esp,0x10
c0021ebe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021ec1:	0f b6 c0             	movzx  eax,al
c0021ec4:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0021eca:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0021ecd:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0021ed0:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0021ed3:	ee                   	out    dx,al
c0021ed4:	83 ec 0c             	sub    esp,0xc
c0021ed7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021eda:	e8 61 fe ff ff       	call   c0021d40 <PIC::ioWait()>
c0021edf:	83 c4 10             	add    esp,0x10
c0021ee2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021ee5:	0f b6 c0             	movzx  eax,al
c0021ee8:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0021eee:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0021ef1:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0021ef4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0021ef7:	ee                   	out    dx,al
c0021ef8:	83 ec 0c             	sub    esp,0xc
c0021efb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021efe:	e8 3d fe ff ff       	call   c0021d40 <PIC::ioWait()>
c0021f03:	83 c4 10             	add    esp,0x10
c0021f06:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0021f0c:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0021f10:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0021f13:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0021f16:	ee                   	out    dx,al
c0021f17:	83 ec 0c             	sub    esp,0xc
c0021f1a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f1d:	e8 1e fe ff ff       	call   c0021d40 <PIC::ioWait()>
c0021f22:	83 c4 10             	add    esp,0x10
c0021f25:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0021f2b:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0021f2f:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0021f32:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021f35:	ee                   	out    dx,al
c0021f36:	83 ec 0c             	sub    esp,0xc
c0021f39:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f3c:	e8 ff fd ff ff       	call   c0021d40 <PIC::ioWait()>
c0021f41:	83 c4 10             	add    esp,0x10
c0021f44:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0021f4a:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0021f4e:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0021f51:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0021f54:	ee                   	out    dx,al
c0021f55:	83 ec 0c             	sub    esp,0xc
c0021f58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f5b:	e8 e0 fd ff ff       	call   c0021d40 <PIC::ioWait()>
c0021f60:	83 c4 10             	add    esp,0x10
c0021f63:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0021f69:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0021f6d:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0021f70:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0021f73:	ee                   	out    dx,al
c0021f74:	83 ec 0c             	sub    esp,0xc
c0021f77:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f7a:	e8 c1 fd ff ff       	call   c0021d40 <PIC::ioWait()>
c0021f7f:	83 c4 10             	add    esp,0x10
c0021f82:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0021f86:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0021f8c:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0021f8f:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0021f92:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0021f95:	ee                   	out    dx,al
c0021f96:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0021f9a:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0021fa0:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0021fa3:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0021fa6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0021fa9:	ee                   	out    dx,al
c0021faa:	90                   	nop
c0021fab:	c9                   	leave  
c0021fac:	c3                   	ret    
c0021fad:	90                   	nop

c0021fae <PIC::open(int, int, void*)>:
c0021fae:	55                   	push   ebp
c0021faf:	89 e5                	mov    ebp,esp
c0021fb1:	83 ec 18             	sub    esp,0x18
c0021fb4:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0021fba:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0021fbe:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021fc1:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021fc5:	ee                   	out    dx,al
c0021fc6:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0021fcc:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0021fd0:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021fd3:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021fd7:	ee                   	out    dx,al
c0021fd8:	83 ec 0c             	sub    esp,0xc
c0021fdb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021fde:	e8 5f fe ff ff       	call   c0021e42 <PIC::remap()>
c0021fe3:	83 c4 10             	add    esp,0x10
c0021fe6:	b8 00 00 00 00       	mov    eax,0x0
c0021feb:	c9                   	leave  
c0021fec:	c3                   	ret    
c0021fed:	66 90                	xchg   ax,ax
c0021fef:	90                   	nop

c0021ff0 <APICTimer::close(int, int, void*)>:
c0021ff0:	b8 00 00 00 00       	mov    eax,0x0
c0021ff5:	c3                   	ret    
c0021ff6:	66 90                	xchg   ax,ax

c0021ff8 <apicTimerHandler(regs*, void*)>:
c0021ff8:	83 ec 0c             	sub    esp,0xc
c0021ffb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021fff:	8b 08                	mov    ecx,DWORD PTR [eax]
c0022001:	b8 10 27 00 00       	mov    eax,0x2710
c0022006:	ba 00 00 00 00       	mov    edx,0x0
c002200b:	f7 f1                	div    ecx
c002200d:	83 ec 0c             	sub    esp,0xc
c0022010:	50                   	push   eax
c0022011:	e8 e7 ea fe ff       	call   c0010afd <timerHandler(unsigned int)>
c0022016:	83 c4 10             	add    esp,0x10
c0022019:	90                   	nop
c002201a:	83 c4 0c             	add    esp,0xc
c002201d:	c3                   	ret    
c002201e:	66 90                	xchg   ax,ax

c0022020 <APICTimer::write(int)>:
c0022020:	83 ec 1c             	sub    esp,0x1c
c0022023:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022027:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002202b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022031:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0022036:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002203c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022042:	83 ec 0c             	sub    esp,0xc
c0022045:	50                   	push   eax
c0022046:	e8 e1 f4 ff ff       	call   c002152c <APIC::getBase()>
c002204b:	83 c4 10             	add    esp,0x10
c002204e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022052:	a1 6c 86 02 c0       	mov    eax,ds:0xc002866c
c0022057:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002205b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002205f:	05 e0 03 00 00       	add    eax,0x3e0
c0022064:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002206a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002206e:	05 80 03 00 00       	add    eax,0x380
c0022073:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0022079:	fb                   	sti    
c002207a:	66 90                	xchg   ax,ax
c002207c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022080:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c0022086:	a1 6c 86 02 c0       	mov    eax,ds:0xc002866c
c002208b:	39 c2                	cmp    edx,eax
c002208d:	76 05                	jbe    c0022094 <APICTimer::write(int)+0x74>
c002208f:	eb eb                	jmp    c002207c <APICTimer::write(int)+0x5c>
c0022091:	8d 76 00             	lea    esi,[esi+0x0]
c0022094:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022098:	05 20 03 00 00       	add    eax,0x320
c002209d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00220a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220a7:	05 90 03 00 00       	add    eax,0x390
c00220ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00220ae:	f7 d0                	not    eax
c00220b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00220b4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00220b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220bc:	ba 00 00 00 00       	mov    edx,0x0
c00220c1:	f7 f1                	div    ecx
c00220c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00220c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220ca:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00220d0:	0d 00 00 02 00       	or     eax,0x20000
c00220d5:	89 c2                	mov    edx,eax
c00220d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220db:	05 20 03 00 00       	add    eax,0x320
c00220e0:	89 10                	mov    DWORD PTR [eax],edx
c00220e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220e6:	05 e0 03 00 00       	add    eax,0x3e0
c00220eb:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00220f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220f5:	05 80 03 00 00       	add    eax,0x380
c00220fa:	89 c2                	mov    edx,eax
c00220fc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00220ff:	89 02                	mov    DWORD PTR [edx],eax
c0022101:	90                   	nop
c0022102:	83 c4 1c             	add    esp,0x1c
c0022105:	c3                   	ret    
c0022106:	66 90                	xchg   ax,ax

c0022108 <APICTimer::open(int, int, void*)>:
c0022108:	57                   	push   edi
c0022109:	56                   	push   esi
c002210a:	53                   	push   ebx
c002210b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002210f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022111:	83 c0 24             	add    eax,0x24
c0022114:	8b 00                	mov    eax,DWORD PTR [eax]
c0022116:	83 ec 08             	sub    esp,0x8
c0022119:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002211d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022121:	ff d0                	call   eax
c0022123:	83 c4 10             	add    esp,0x10
c0022126:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c002212b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022131:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022137:	83 ec 0c             	sub    esp,0xc
c002213a:	50                   	push   eax
c002213b:	e8 ec f3 ff ff       	call   c002152c <APIC::getBase()>
c0022140:	83 c4 10             	add    esp,0x10
c0022143:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0022149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002214d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022153:	0f b6 f8             	movzx  edi,al
c0022156:	89 d0                	mov    eax,edx
c0022158:	ba 00 00 00 00       	mov    edx,0x0
c002215d:	89 c1                	mov    ecx,eax
c002215f:	80 e5 ff             	and    ch,0xff
c0022162:	89 cb                	mov    ebx,ecx
c0022164:	0f b6 f2             	movzx  esi,dl
c0022167:	89 d8                	mov    eax,ebx
c0022169:	89 f2                	mov    edx,esi
c002216b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002216f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022172:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022176:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002217a:	83 e0 00             	and    eax,0x0
c002217d:	09 d0                	or     eax,edx
c002217f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022187:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002218d:	8d 50 01             	lea    edx,[eax+0x1]
c0022190:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022194:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002219a:	0f b6 d0             	movzx  edx,al
c002219d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221a1:	83 c2 08             	add    edx,0x8
c00221a4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00221a8:	0f b6 c9             	movzx  ecx,cl
c00221ab:	81 c9 00 00 01 00    	or     ecx,0x10000
c00221b1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00221b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00221bd:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00221c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00221cb:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00221d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00221d5:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00221db:	83 ec 0c             	sub    esp,0xc
c00221de:	51                   	push   ecx
c00221df:	6a 01                	push   0x1
c00221e1:	68 f8 1f 02 c0       	push   0xc0021ff8
c00221e6:	52                   	push   edx
c00221e7:	50                   	push   eax
c00221e8:	e8 c9 bf fe ff       	call   c000e1b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00221ed:	83 c4 20             	add    esp,0x20
c00221f0:	89 c2                	mov    edx,eax
c00221f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221f6:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00221fc:	b8 00 00 00 00       	mov    eax,0x0
c0022201:	5b                   	pop    ebx
c0022202:	5e                   	pop    esi
c0022203:	5f                   	pop    edi
c0022204:	c3                   	ret    
c0022205:	90                   	nop
c0022206:	66 90                	xchg   ax,ax

c0022208 <APICTimer::APICTimer()>:
c0022208:	83 ec 0c             	sub    esp,0xc
c002220b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002220f:	83 ec 08             	sub    esp,0x8
c0022212:	68 20 72 02 c0       	push   0xc0027220
c0022217:	50                   	push   eax
c0022218:	e8 4f e8 fe ff       	call   c0010a6c <Timer::Timer(char const*)>
c002221d:	83 c4 10             	add    esp,0x10
c0022220:	ba 34 72 02 c0       	mov    edx,0xc0027234
c0022225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022229:	89 10                	mov    DWORD PTR [eax],edx
c002222b:	90                   	nop
c002222c:	83 c4 0c             	add    esp,0xc
c002222f:	c3                   	ret    

c0022230 <PIT::write(int)>:
c0022230:	83 ec 10             	sub    esp,0x10
c0022233:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022237:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002223b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022241:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022245:	a3 e4 9f 02 c0       	mov    ds:0xc0029fe4,eax
c002224a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002224f:	99                   	cdq    
c0022250:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0022254:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022258:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002225f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0022264:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0022268:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002226d:	ee                   	out    dx,al
c002226e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022272:	0f b6 c0             	movzx  eax,al
c0022275:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002227c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022280:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0022284:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0022289:	ee                   	out    dx,al
c002228a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002228e:	c1 f8 08             	sar    eax,0x8
c0022291:	0f b6 c0             	movzx  eax,al
c0022294:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002229b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002229f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00222a3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00222a8:	ee                   	out    dx,al
c00222a9:	90                   	nop
c00222aa:	83 c4 10             	add    esp,0x10
c00222ad:	c3                   	ret    
c00222ae:	66 90                	xchg   ax,ax

c00222b0 <pitHandler(regs*, void*)>:
c00222b0:	83 ec 0c             	sub    esp,0xc
c00222b3:	8b 0d e4 9f 02 c0    	mov    ecx,DWORD PTR ds:0xc0029fe4
c00222b9:	b8 10 27 00 00       	mov    eax,0x2710
c00222be:	99                   	cdq    
c00222bf:	f7 f9                	idiv   ecx
c00222c1:	83 ec 0c             	sub    esp,0xc
c00222c4:	50                   	push   eax
c00222c5:	e8 33 e8 fe ff       	call   c0010afd <timerHandler(unsigned int)>
c00222ca:	83 c4 10             	add    esp,0x10
c00222cd:	90                   	nop
c00222ce:	83 c4 0c             	add    esp,0xc
c00222d1:	c3                   	ret    
c00222d2:	66 90                	xchg   ax,ax

c00222d4 <PIT::open(int, int, void*)>:
c00222d4:	83 ec 0c             	sub    esp,0xc
c00222d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222db:	8b 00                	mov    eax,DWORD PTR [eax]
c00222dd:	83 c0 24             	add    eax,0x24
c00222e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00222e2:	83 ec 08             	sub    esp,0x8
c00222e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222ed:	ff d0                	call   eax
c00222ef:	83 c4 10             	add    esp,0x10
c00222f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222f6:	83 ec 0c             	sub    esp,0xc
c00222f9:	6a 00                	push   0x0
c00222fb:	6a 01                	push   0x1
c00222fd:	68 b0 22 02 c0       	push   0xc00222b0
c0022302:	6a 00                	push   0x0
c0022304:	50                   	push   eax
c0022305:	e8 ac be fe ff       	call   c000e1b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002230a:	83 c4 20             	add    esp,0x20
c002230d:	89 c2                	mov    edx,eax
c002230f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022313:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022319:	b8 00 00 00 00       	mov    eax,0x0
c002231e:	83 c4 0c             	add    esp,0xc
c0022321:	c3                   	ret    
c0022322:	66 90                	xchg   ax,ax

c0022324 <PIT::close(int, int, void*)>:
c0022324:	83 ec 0c             	sub    esp,0xc
c0022327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002232b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0022335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022339:	6a 01                	push   0x1
c002233b:	68 b0 22 02 c0       	push   0xc00222b0
c0022340:	6a 00                	push   0x0
c0022342:	50                   	push   eax
c0022343:	e8 b8 be fe ff       	call   c000e200 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0022348:	83 c4 10             	add    esp,0x10
c002234b:	b8 00 00 00 00       	mov    eax,0x0
c0022350:	83 c4 0c             	add    esp,0xc
c0022353:	c3                   	ret    

c0022354 <PIT::PIT()>:
c0022354:	83 ec 0c             	sub    esp,0xc
c0022357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002235b:	83 ec 08             	sub    esp,0x8
c002235e:	68 5c 72 02 c0       	push   0xc002725c
c0022363:	50                   	push   eax
c0022364:	e8 03 e7 fe ff       	call   c0010a6c <Timer::Timer(char const*)>
c0022369:	83 c4 10             	add    esp,0x10
c002236c:	ba 84 72 02 c0       	mov    edx,0xc0027284
c0022371:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022375:	89 10                	mov    DWORD PTR [eax],edx
c0022377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002237b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022381:	0f b6 d0             	movzx  edx,al
c0022384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022388:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002238f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022393:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022399:	0f b6 d0             	movzx  edx,al
c002239c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223a0:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00223a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223a9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223af:	8d 50 01             	lea    edx,[eax+0x1]
c00223b2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00223b6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00223bc:	0f b6 d0             	movzx  edx,al
c00223bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223c3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00223c7:	83 e1 3f             	and    ecx,0x3f
c00223ca:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00223ce:	90                   	nop
c00223cf:	83 c4 0c             	add    esp,0xc
c00223d2:	c3                   	ret    
c00223d3:	66 90                	xchg   ax,ax
c00223d5:	66 90                	xchg   ax,ax
c00223d7:	66 90                	xchg   ax,ax
c00223d9:	66 90                	xchg   ax,ax
c00223db:	66 90                	xchg   ax,ax
c00223dd:	66 90                	xchg   ax,ax
c00223df:	90                   	nop

c00223e0 <avxDetect>:
c00223e0:	b8 00 00 00 00       	mov    eax,0x0
c00223e5:	c3                   	ret    

c00223e6 <avxSave>:
c00223e6:	c3                   	ret    

c00223e7 <avxLoad>:
c00223e7:	c3                   	ret    

c00223e8 <avxInit>:
c00223e8:	c3                   	ret    

c00223e9 <avxClose>:
c00223e9:	c3                   	ret    

c00223ea <wouldSheSayYes>:
c00223ea:	c3                   	ret    
c00223eb:	49                   	dec    ecx
c00223ec:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00223f0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00223f4:	75 20                	jne    c0022416 <sseDetect.noSSE+0x1>
c00223f6:	4e                   	dec    esi
c00223f7:	79 61                	jns    c002245a <x87Detect+0x14>
c00223f9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00223fe:	66 90                	xchg   ax,ax

c0022400 <absolutelyNoChanceInHell>:
c0022400:	b8 01 00 00 00       	mov    eax,0x1
c0022405:	0f a2                	cpuid  
c0022407:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002240d:	74 06                	je     c0022415 <sseDetect.noSSE>
c002240f:	b8 01 00 00 00       	mov    eax,0x1
c0022414:	c3                   	ret    

c0022415 <sseDetect.noSSE>:
c0022415:	31 c0                	xor    eax,eax
c0022417:	c3                   	ret    

c0022418 <sseSave>:
c0022418:	0f ae 44 24 04       	fxsave [esp+0x4]
c002241d:	c3                   	ret    

c002241e <sseLoad>:
c002241e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0022423:	c3                   	ret    

c0022424 <sseInit>:
c0022424:	e8 49 00 00 00       	call   c0022472 <x87Init>
c0022429:	0f 20 e0             	mov    eax,cr4
c002242c:	66 0d 00 06          	or     ax,0x600
c0022430:	0f 22 e0             	mov    cr4,eax
c0022433:	c3                   	ret    

c0022434 <sseClose>:
c0022434:	c3                   	ret    
c0022435:	66 90                	xchg   ax,ax
c0022437:	66 90                	xchg   ax,ax
c0022439:	66 90                	xchg   ax,ax
c002243b:	66 90                	xchg   ax,ax
c002243d:	66 90                	xchg   ax,ax
c002243f:	90                   	nop

c0022440 <value_37F>:
c0022440:	7f 03                	jg     c0022445 <value_37A+0x1>

c0022442 <value_37E>:
c0022442:	7e 03                	jle    c0022447 <x87Detect+0x1>

c0022444 <value_37A>:
c0022444:	7a 03                	jp     c0022449 <x87Detect+0x3>

c0022446 <x87Detect>:
c0022446:	b8 01 00 00 00       	mov    eax,0x1
c002244b:	0f a2                	cpuid  
c002244d:	f7 c2 01 00 00 00    	test   edx,0x1
c0022453:	74 06                	je     c002245b <x87Detect.nox87>
c0022455:	b8 01 00 00 00       	mov    eax,0x1
c002245a:	c3                   	ret    

c002245b <x87Detect.nox87>:
c002245b:	b8 00 00 00 00       	mov    eax,0x0
c0022460:	c3                   	ret    

c0022461 <x87Save>:
c0022461:	55                   	push   ebp
c0022462:	89 e5                	mov    ebp,esp
c0022464:	9b dd 75 08          	fsave  [ebp+0x8]
c0022468:	c9                   	leave  
c0022469:	c3                   	ret    

c002246a <x87Load>:
c002246a:	55                   	push   ebp
c002246b:	89 e5                	mov    ebp,esp
c002246d:	dd 65 08             	frstor [ebp+0x8]
c0022470:	c9                   	leave  
c0022471:	c3                   	ret    

c0022472 <x87Init>:
c0022472:	9b db e3             	finit  
c0022475:	0f 20 c0             	mov    eax,cr0
c0022478:	66 25 fb ff          	and    ax,0xfffb
c002247c:	66 0d 22 00          	or     ax,0x22
c0022480:	0f 22 c0             	mov    cr0,eax
c0022483:	0f 06                	clts   
c0022485:	d9 2d 44 24 02 c0    	fldcw  WORD PTR ds:0xc0022444
c002248b:	c3                   	ret    

c002248c <x87Close>:
c002248c:	c3                   	ret    
c002248d:	66 90                	xchg   ax,ax
c002248f:	90                   	nop

c0022490 <__do_global_ctors_aux>:
c0022490:	a1 2c 36 02 c0       	mov    eax,ds:0xc002362c
c0022495:	83 f8 ff             	cmp    eax,0xffffffff
c0022498:	74 1a                	je     c00224b4 <__do_global_ctors_aux+0x24>
c002249a:	55                   	push   ebp
c002249b:	89 e5                	mov    ebp,esp
c002249d:	53                   	push   ebx
c002249e:	52                   	push   edx
c002249f:	bb 2c 36 02 c0       	mov    ebx,0xc002362c
c00224a4:	ff d0                	call   eax
c00224a6:	83 eb 04             	sub    ebx,0x4
c00224a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00224ab:	83 f8 ff             	cmp    eax,0xffffffff
c00224ae:	75 f4                	jne    c00224a4 <__do_global_ctors_aux+0x14>
c00224b0:	58                   	pop    eax
c00224b1:	5b                   	pop    ebx
c00224b2:	5d                   	pop    ebp
c00224b3:	c3                   	ret    
c00224b4:	c3                   	ret    
c00224b5:	66 90                	xchg   ax,ax
c00224b7:	90                   	nop

c00224b8 <__divdi3>:
c00224b8:	55                   	push   ebp
c00224b9:	57                   	push   edi
c00224ba:	56                   	push   esi
c00224bb:	53                   	push   ebx
c00224bc:	83 ec 1c             	sub    esp,0x1c
c00224bf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00224c3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00224c7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00224ca:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00224ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00224d2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00224d6:	85 db                	test   ebx,ebx
c00224d8:	0f 88 8e 00 00 00    	js     c002256c <__divdi3+0xb4>
c00224de:	89 dd                	mov    ebp,ebx
c00224e0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00224e8:	89 d3                	mov    ebx,edx
c00224ea:	85 d2                	test   edx,edx
c00224ec:	79 0d                	jns    c00224fb <__divdi3+0x43>
c00224ee:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00224f2:	f7 d8                	neg    eax
c00224f4:	83 d2 00             	adc    edx,0x0
c00224f7:	f7 da                	neg    edx
c00224f9:	89 d3                	mov    ebx,edx
c00224fb:	89 c7                	mov    edi,eax
c00224fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022500:	85 db                	test   ebx,ebx
c0022502:	75 48                	jne    c002254c <__divdi3+0x94>
c0022504:	39 ef                	cmp    edi,ebp
c0022506:	76 24                	jbe    c002252c <__divdi3+0x74>
c0022508:	89 ea                	mov    edx,ebp
c002250a:	f7 f7                	div    edi
c002250c:	89 c1                	mov    ecx,eax
c002250e:	31 f6                	xor    esi,esi
c0022510:	89 c8                	mov    eax,ecx
c0022512:	89 f2                	mov    edx,esi
c0022514:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022518:	85 c9                	test   ecx,ecx
c002251a:	74 07                	je     c0022523 <__divdi3+0x6b>
c002251c:	f7 d8                	neg    eax
c002251e:	83 d2 00             	adc    edx,0x0
c0022521:	f7 da                	neg    edx
c0022523:	83 c4 1c             	add    esp,0x1c
c0022526:	5b                   	pop    ebx
c0022527:	5e                   	pop    esi
c0022528:	5f                   	pop    edi
c0022529:	5d                   	pop    ebp
c002252a:	c3                   	ret    
c002252b:	90                   	nop
c002252c:	85 ff                	test   edi,edi
c002252e:	75 0b                	jne    c002253b <__divdi3+0x83>
c0022530:	b8 01 00 00 00       	mov    eax,0x1
c0022535:	31 d2                	xor    edx,edx
c0022537:	f7 f3                	div    ebx
c0022539:	89 c7                	mov    edi,eax
c002253b:	31 d2                	xor    edx,edx
c002253d:	89 e8                	mov    eax,ebp
c002253f:	f7 f7                	div    edi
c0022541:	89 c6                	mov    esi,eax
c0022543:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022546:	f7 f7                	div    edi
c0022548:	89 c1                	mov    ecx,eax
c002254a:	eb c4                	jmp    c0022510 <__divdi3+0x58>
c002254c:	39 eb                	cmp    ebx,ebp
c002254e:	77 3c                	ja     c002258c <__divdi3+0xd4>
c0022550:	0f bd f3             	bsr    esi,ebx
c0022553:	83 f6 1f             	xor    esi,0x1f
c0022556:	75 40                	jne    c0022598 <__divdi3+0xe0>
c0022558:	39 eb                	cmp    ebx,ebp
c002255a:	72 09                	jb     c0022565 <__divdi3+0xad>
c002255c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002255f:	0f 87 97 00 00 00    	ja     c00225fc <__divdi3+0x144>
c0022565:	b9 01 00 00 00       	mov    ecx,0x1
c002256a:	eb a4                	jmp    c0022510 <__divdi3+0x58>
c002256c:	f7 d9                	neg    ecx
c002256e:	83 d3 00             	adc    ebx,0x0
c0022571:	f7 db                	neg    ebx
c0022573:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022576:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002257a:	89 dd                	mov    ebp,ebx
c002257c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0022584:	e9 5f ff ff ff       	jmp    c00224e8 <__divdi3+0x30>
c0022589:	8d 76 00             	lea    esi,[esi+0x0]
c002258c:	31 f6                	xor    esi,esi
c002258e:	31 c9                	xor    ecx,ecx
c0022590:	e9 7b ff ff ff       	jmp    c0022510 <__divdi3+0x58>
c0022595:	8d 76 00             	lea    esi,[esi+0x0]
c0022598:	b8 20 00 00 00       	mov    eax,0x20
c002259d:	29 f0                	sub    eax,esi
c002259f:	89 f1                	mov    ecx,esi
c00225a1:	d3 e3                	shl    ebx,cl
c00225a3:	89 fa                	mov    edx,edi
c00225a5:	88 c1                	mov    cl,al
c00225a7:	d3 ea                	shr    edx,cl
c00225a9:	09 da                	or     edx,ebx
c00225ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00225af:	89 f1                	mov    ecx,esi
c00225b1:	d3 e7                	shl    edi,cl
c00225b3:	89 eb                	mov    ebx,ebp
c00225b5:	88 c1                	mov    cl,al
c00225b7:	d3 eb                	shr    ebx,cl
c00225b9:	89 f1                	mov    ecx,esi
c00225bb:	d3 e5                	shl    ebp,cl
c00225bd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00225c0:	88 c1                	mov    cl,al
c00225c2:	d3 ea                	shr    edx,cl
c00225c4:	09 d5                	or     ebp,edx
c00225c6:	89 e8                	mov    eax,ebp
c00225c8:	89 da                	mov    edx,ebx
c00225ca:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00225ce:	89 d3                	mov    ebx,edx
c00225d0:	89 c5                	mov    ebp,eax
c00225d2:	f7 e7                	mul    edi
c00225d4:	39 d3                	cmp    ebx,edx
c00225d6:	72 18                	jb     c00225f0 <__divdi3+0x138>
c00225d8:	74 0a                	je     c00225e4 <__divdi3+0x12c>
c00225da:	89 e9                	mov    ecx,ebp
c00225dc:	31 f6                	xor    esi,esi
c00225de:	e9 2d ff ff ff       	jmp    c0022510 <__divdi3+0x58>
c00225e3:	90                   	nop
c00225e4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00225e7:	89 f1                	mov    ecx,esi
c00225e9:	d3 e7                	shl    edi,cl
c00225eb:	39 c7                	cmp    edi,eax
c00225ed:	73 eb                	jae    c00225da <__divdi3+0x122>
c00225ef:	90                   	nop
c00225f0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00225f3:	31 f6                	xor    esi,esi
c00225f5:	e9 16 ff ff ff       	jmp    c0022510 <__divdi3+0x58>
c00225fa:	66 90                	xchg   ax,ax
c00225fc:	31 c9                	xor    ecx,ecx
c00225fe:	e9 0d ff ff ff       	jmp    c0022510 <__divdi3+0x58>
c0022603:	90                   	nop

c0022604 <__moddi3>:
c0022604:	55                   	push   ebp
c0022605:	57                   	push   edi
c0022606:	56                   	push   esi
c0022607:	53                   	push   ebx
c0022608:	83 ec 2c             	sub    esp,0x2c
c002260b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002260f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0022613:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022617:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002261b:	85 db                	test   ebx,ebx
c002261d:	0f 88 85 00 00 00    	js     c00226a8 <__moddi3+0xa4>
c0022623:	89 de                	mov    esi,ebx
c0022625:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002262d:	89 d7                	mov    edi,edx
c002262f:	85 d2                	test   edx,edx
c0022631:	79 09                	jns    c002263c <__moddi3+0x38>
c0022633:	f7 d8                	neg    eax
c0022635:	83 d2 00             	adc    edx,0x0
c0022638:	f7 da                	neg    edx
c002263a:	89 d7                	mov    edi,edx
c002263c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022640:	89 cd                	mov    ebp,ecx
c0022642:	85 ff                	test   edi,edi
c0022644:	75 52                	jne    c0022698 <__moddi3+0x94>
c0022646:	89 c3                	mov    ebx,eax
c0022648:	39 f0                	cmp    eax,esi
c002264a:	76 24                	jbe    c0022670 <__moddi3+0x6c>
c002264c:	89 c8                	mov    eax,ecx
c002264e:	89 f2                	mov    edx,esi
c0022650:	f7 f3                	div    ebx
c0022652:	89 d6                	mov    esi,edx
c0022654:	89 f0                	mov    eax,esi
c0022656:	31 d2                	xor    edx,edx
c0022658:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002265c:	85 c9                	test   ecx,ecx
c002265e:	74 07                	je     c0022667 <__moddi3+0x63>
c0022660:	f7 d8                	neg    eax
c0022662:	83 d2 00             	adc    edx,0x0
c0022665:	f7 da                	neg    edx
c0022667:	83 c4 2c             	add    esp,0x2c
c002266a:	5b                   	pop    ebx
c002266b:	5e                   	pop    esi
c002266c:	5f                   	pop    edi
c002266d:	5d                   	pop    ebp
c002266e:	c3                   	ret    
c002266f:	90                   	nop
c0022670:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022674:	85 db                	test   ebx,ebx
c0022676:	75 0d                	jne    c0022685 <__moddi3+0x81>
c0022678:	b8 01 00 00 00       	mov    eax,0x1
c002267d:	31 d2                	xor    edx,edx
c002267f:	f7 f7                	div    edi
c0022681:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022685:	89 f0                	mov    eax,esi
c0022687:	31 d2                	xor    edx,edx
c0022689:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002268d:	f7 f7                	div    edi
c002268f:	89 e8                	mov    eax,ebp
c0022691:	f7 f7                	div    edi
c0022693:	89 d6                	mov    esi,edx
c0022695:	eb bd                	jmp    c0022654 <__moddi3+0x50>
c0022697:	90                   	nop
c0022698:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002269c:	39 f7                	cmp    edi,esi
c002269e:	76 20                	jbe    c00226c0 <__moddi3+0xbc>
c00226a0:	89 c8                	mov    eax,ecx
c00226a2:	89 f2                	mov    edx,esi
c00226a4:	eb b2                	jmp    c0022658 <__moddi3+0x54>
c00226a6:	66 90                	xchg   ax,ax
c00226a8:	f7 d9                	neg    ecx
c00226aa:	83 d3 00             	adc    ebx,0x0
c00226ad:	f7 db                	neg    ebx
c00226af:	89 de                	mov    esi,ebx
c00226b1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00226b9:	e9 6f ff ff ff       	jmp    c002262d <__moddi3+0x29>
c00226be:	66 90                	xchg   ax,ax
c00226c0:	0f bd c7             	bsr    eax,edi
c00226c3:	83 f0 1f             	xor    eax,0x1f
c00226c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00226ca:	75 24                	jne    c00226f0 <__moddi3+0xec>
c00226cc:	39 f7                	cmp    edi,esi
c00226ce:	72 06                	jb     c00226d6 <__moddi3+0xd2>
c00226d0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00226d4:	77 0c                	ja     c00226e2 <__moddi3+0xde>
c00226d6:	89 e9                	mov    ecx,ebp
c00226d8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00226dc:	19 fe                	sbb    esi,edi
c00226de:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00226e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00226e6:	89 f2                	mov    edx,esi
c00226e8:	e9 6b ff ff ff       	jmp    c0022658 <__moddi3+0x54>
c00226ed:	8d 76 00             	lea    esi,[esi+0x0]
c00226f0:	b8 20 00 00 00       	mov    eax,0x20
c00226f5:	89 c2                	mov    edx,eax
c00226f7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00226fb:	29 da                	sub    edx,ebx
c00226fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022701:	88 d9                	mov    cl,bl
c0022703:	d3 e7                	shl    edi,cl
c0022705:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022709:	88 d1                	mov    cl,dl
c002270b:	d3 e8                	shr    eax,cl
c002270d:	09 c7                	or     edi,eax
c002270f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0022713:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022717:	89 d8                	mov    eax,ebx
c0022719:	88 d9                	mov    cl,bl
c002271b:	d3 e7                	shl    edi,cl
c002271d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022721:	89 f3                	mov    ebx,esi
c0022723:	88 d1                	mov    cl,dl
c0022725:	d3 eb                	shr    ebx,cl
c0022727:	89 c7                	mov    edi,eax
c0022729:	88 c1                	mov    cl,al
c002272b:	d3 e6                	shl    esi,cl
c002272d:	89 e8                	mov    eax,ebp
c002272f:	88 d1                	mov    cl,dl
c0022731:	d3 e8                	shr    eax,cl
c0022733:	09 f0                	or     eax,esi
c0022735:	89 f9                	mov    ecx,edi
c0022737:	d3 e5                	shl    ebp,cl
c0022739:	89 da                	mov    edx,ebx
c002273b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002273f:	89 d3                	mov    ebx,edx
c0022741:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022745:	89 c6                	mov    esi,eax
c0022747:	89 d1                	mov    ecx,edx
c0022749:	39 d3                	cmp    ebx,edx
c002274b:	72 27                	jb     c0022774 <__moddi3+0x170>
c002274d:	74 21                	je     c0022770 <__moddi3+0x16c>
c002274f:	29 f5                	sub    ebp,esi
c0022751:	19 cb                	sbb    ebx,ecx
c0022753:	89 de                	mov    esi,ebx
c0022755:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0022759:	d3 e6                	shl    esi,cl
c002275b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002275f:	89 f9                	mov    ecx,edi
c0022761:	d3 ed                	shr    ebp,cl
c0022763:	09 ee                	or     esi,ebp
c0022765:	89 f0                	mov    eax,esi
c0022767:	d3 eb                	shr    ebx,cl
c0022769:	89 da                	mov    edx,ebx
c002276b:	e9 e8 fe ff ff       	jmp    c0022658 <__moddi3+0x54>
c0022770:	39 c5                	cmp    ebp,eax
c0022772:	73 db                	jae    c002274f <__moddi3+0x14b>
c0022774:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022778:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002277c:	89 d1                	mov    ecx,edx
c002277e:	89 c6                	mov    esi,eax
c0022780:	eb cd                	jmp    c002274f <__moddi3+0x14b>
c0022782:	66 90                	xchg   ax,ax

c0022784 <__udivdi3>:
c0022784:	55                   	push   ebp
c0022785:	57                   	push   edi
c0022786:	56                   	push   esi
c0022787:	53                   	push   ebx
c0022788:	83 ec 1c             	sub    esp,0x1c
c002278b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002278f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022793:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022797:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002279b:	85 d2                	test   edx,edx
c002279d:	75 41                	jne    c00227e0 <__udivdi3+0x5c>
c002279f:	39 f7                	cmp    edi,esi
c00227a1:	76 15                	jbe    c00227b8 <__udivdi3+0x34>
c00227a3:	89 e8                	mov    eax,ebp
c00227a5:	89 f2                	mov    edx,esi
c00227a7:	f7 f7                	div    edi
c00227a9:	31 db                	xor    ebx,ebx
c00227ab:	89 da                	mov    edx,ebx
c00227ad:	83 c4 1c             	add    esp,0x1c
c00227b0:	5b                   	pop    ebx
c00227b1:	5e                   	pop    esi
c00227b2:	5f                   	pop    edi
c00227b3:	5d                   	pop    ebp
c00227b4:	c3                   	ret    
c00227b5:	8d 76 00             	lea    esi,[esi+0x0]
c00227b8:	89 f9                	mov    ecx,edi
c00227ba:	85 ff                	test   edi,edi
c00227bc:	75 0b                	jne    c00227c9 <__udivdi3+0x45>
c00227be:	b8 01 00 00 00       	mov    eax,0x1
c00227c3:	31 d2                	xor    edx,edx
c00227c5:	f7 f7                	div    edi
c00227c7:	89 c1                	mov    ecx,eax
c00227c9:	31 d2                	xor    edx,edx
c00227cb:	89 f0                	mov    eax,esi
c00227cd:	f7 f1                	div    ecx
c00227cf:	89 c3                	mov    ebx,eax
c00227d1:	89 e8                	mov    eax,ebp
c00227d3:	f7 f1                	div    ecx
c00227d5:	89 da                	mov    edx,ebx
c00227d7:	83 c4 1c             	add    esp,0x1c
c00227da:	5b                   	pop    ebx
c00227db:	5e                   	pop    esi
c00227dc:	5f                   	pop    edi
c00227dd:	5d                   	pop    ebp
c00227de:	c3                   	ret    
c00227df:	90                   	nop
c00227e0:	39 f2                	cmp    edx,esi
c00227e2:	77 1c                	ja     c0022800 <__udivdi3+0x7c>
c00227e4:	0f bd da             	bsr    ebx,edx
c00227e7:	83 f3 1f             	xor    ebx,0x1f
c00227ea:	75 24                	jne    c0022810 <__udivdi3+0x8c>
c00227ec:	39 f2                	cmp    edx,esi
c00227ee:	72 08                	jb     c00227f8 <__udivdi3+0x74>
c00227f0:	39 ef                	cmp    edi,ebp
c00227f2:	0f 87 84 00 00 00    	ja     c002287c <__udivdi3+0xf8>
c00227f8:	b8 01 00 00 00       	mov    eax,0x1
c00227fd:	eb ac                	jmp    c00227ab <__udivdi3+0x27>
c00227ff:	90                   	nop
c0022800:	31 db                	xor    ebx,ebx
c0022802:	31 c0                	xor    eax,eax
c0022804:	89 da                	mov    edx,ebx
c0022806:	83 c4 1c             	add    esp,0x1c
c0022809:	5b                   	pop    ebx
c002280a:	5e                   	pop    esi
c002280b:	5f                   	pop    edi
c002280c:	5d                   	pop    ebp
c002280d:	c3                   	ret    
c002280e:	66 90                	xchg   ax,ax
c0022810:	b8 20 00 00 00       	mov    eax,0x20
c0022815:	29 d8                	sub    eax,ebx
c0022817:	88 d9                	mov    cl,bl
c0022819:	d3 e2                	shl    edx,cl
c002281b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002281f:	89 fa                	mov    edx,edi
c0022821:	88 c1                	mov    cl,al
c0022823:	d3 ea                	shr    edx,cl
c0022825:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022829:	09 d1                	or     ecx,edx
c002282b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002282f:	88 d9                	mov    cl,bl
c0022831:	d3 e7                	shl    edi,cl
c0022833:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022837:	89 f7                	mov    edi,esi
c0022839:	88 c1                	mov    cl,al
c002283b:	d3 ef                	shr    edi,cl
c002283d:	88 d9                	mov    cl,bl
c002283f:	d3 e6                	shl    esi,cl
c0022841:	89 ea                	mov    edx,ebp
c0022843:	88 c1                	mov    cl,al
c0022845:	d3 ea                	shr    edx,cl
c0022847:	09 d6                	or     esi,edx
c0022849:	89 f0                	mov    eax,esi
c002284b:	89 fa                	mov    edx,edi
c002284d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0022851:	89 d7                	mov    edi,edx
c0022853:	89 c6                	mov    esi,eax
c0022855:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022859:	39 d7                	cmp    edi,edx
c002285b:	72 13                	jb     c0022870 <__udivdi3+0xec>
c002285d:	74 09                	je     c0022868 <__udivdi3+0xe4>
c002285f:	89 f0                	mov    eax,esi
c0022861:	31 db                	xor    ebx,ebx
c0022863:	e9 43 ff ff ff       	jmp    c00227ab <__udivdi3+0x27>
c0022868:	88 d9                	mov    cl,bl
c002286a:	d3 e5                	shl    ebp,cl
c002286c:	39 c5                	cmp    ebp,eax
c002286e:	73 ef                	jae    c002285f <__udivdi3+0xdb>
c0022870:	8d 46 ff             	lea    eax,[esi-0x1]
c0022873:	31 db                	xor    ebx,ebx
c0022875:	e9 31 ff ff ff       	jmp    c00227ab <__udivdi3+0x27>
c002287a:	66 90                	xchg   ax,ax
c002287c:	31 c0                	xor    eax,eax
c002287e:	e9 28 ff ff ff       	jmp    c00227ab <__udivdi3+0x27>
c0022883:	90                   	nop

c0022884 <__umoddi3>:
c0022884:	55                   	push   ebp
c0022885:	57                   	push   edi
c0022886:	56                   	push   esi
c0022887:	53                   	push   ebx
c0022888:	83 ec 1c             	sub    esp,0x1c
c002288b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002288f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022893:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022897:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002289b:	89 da                	mov    edx,ebx
c002289d:	85 c0                	test   eax,eax
c002289f:	75 37                	jne    c00228d8 <__umoddi3+0x54>
c00228a1:	39 df                	cmp    edi,ebx
c00228a3:	76 13                	jbe    c00228b8 <__umoddi3+0x34>
c00228a5:	89 f0                	mov    eax,esi
c00228a7:	f7 f7                	div    edi
c00228a9:	89 d0                	mov    eax,edx
c00228ab:	31 d2                	xor    edx,edx
c00228ad:	83 c4 1c             	add    esp,0x1c
c00228b0:	5b                   	pop    ebx
c00228b1:	5e                   	pop    esi
c00228b2:	5f                   	pop    edi
c00228b3:	5d                   	pop    ebp
c00228b4:	c3                   	ret    
c00228b5:	8d 76 00             	lea    esi,[esi+0x0]
c00228b8:	89 fd                	mov    ebp,edi
c00228ba:	85 ff                	test   edi,edi
c00228bc:	75 0b                	jne    c00228c9 <__umoddi3+0x45>
c00228be:	b8 01 00 00 00       	mov    eax,0x1
c00228c3:	31 d2                	xor    edx,edx
c00228c5:	f7 f7                	div    edi
c00228c7:	89 c5                	mov    ebp,eax
c00228c9:	89 d8                	mov    eax,ebx
c00228cb:	31 d2                	xor    edx,edx
c00228cd:	f7 f5                	div    ebp
c00228cf:	89 f0                	mov    eax,esi
c00228d1:	f7 f5                	div    ebp
c00228d3:	89 d0                	mov    eax,edx
c00228d5:	eb d4                	jmp    c00228ab <__umoddi3+0x27>
c00228d7:	90                   	nop
c00228d8:	89 f1                	mov    ecx,esi
c00228da:	39 d8                	cmp    eax,ebx
c00228dc:	76 0a                	jbe    c00228e8 <__umoddi3+0x64>
c00228de:	89 f0                	mov    eax,esi
c00228e0:	83 c4 1c             	add    esp,0x1c
c00228e3:	5b                   	pop    ebx
c00228e4:	5e                   	pop    esi
c00228e5:	5f                   	pop    edi
c00228e6:	5d                   	pop    ebp
c00228e7:	c3                   	ret    
c00228e8:	0f bd e8             	bsr    ebp,eax
c00228eb:	83 f5 1f             	xor    ebp,0x1f
c00228ee:	75 1c                	jne    c002290c <__umoddi3+0x88>
c00228f0:	39 d8                	cmp    eax,ebx
c00228f2:	72 04                	jb     c00228f8 <__umoddi3+0x74>
c00228f4:	39 f7                	cmp    edi,esi
c00228f6:	77 08                	ja     c0022900 <__umoddi3+0x7c>
c00228f8:	89 da                	mov    edx,ebx
c00228fa:	29 fe                	sub    esi,edi
c00228fc:	19 c2                	sbb    edx,eax
c00228fe:	89 f1                	mov    ecx,esi
c0022900:	89 c8                	mov    eax,ecx
c0022902:	83 c4 1c             	add    esp,0x1c
c0022905:	5b                   	pop    ebx
c0022906:	5e                   	pop    esi
c0022907:	5f                   	pop    edi
c0022908:	5d                   	pop    ebp
c0022909:	c3                   	ret    
c002290a:	66 90                	xchg   ax,ax
c002290c:	ba 20 00 00 00       	mov    edx,0x20
c0022911:	29 ea                	sub    edx,ebp
c0022913:	89 e9                	mov    ecx,ebp
c0022915:	d3 e0                	shl    eax,cl
c0022917:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002291b:	89 f8                	mov    eax,edi
c002291d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022921:	88 d1                	mov    cl,dl
c0022923:	d3 e8                	shr    eax,cl
c0022925:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022929:	09 c1                	or     ecx,eax
c002292b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002292f:	89 e9                	mov    ecx,ebp
c0022931:	d3 e7                	shl    edi,cl
c0022933:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022937:	89 d8                	mov    eax,ebx
c0022939:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002293d:	88 d1                	mov    cl,dl
c002293f:	d3 e8                	shr    eax,cl
c0022941:	89 c7                	mov    edi,eax
c0022943:	89 e9                	mov    ecx,ebp
c0022945:	d3 e3                	shl    ebx,cl
c0022947:	89 f0                	mov    eax,esi
c0022949:	88 d1                	mov    cl,dl
c002294b:	d3 e8                	shr    eax,cl
c002294d:	09 d8                	or     eax,ebx
c002294f:	89 e9                	mov    ecx,ebp
c0022951:	d3 e6                	shl    esi,cl
c0022953:	89 f3                	mov    ebx,esi
c0022955:	89 fa                	mov    edx,edi
c0022957:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002295b:	89 d1                	mov    ecx,edx
c002295d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022961:	89 c6                	mov    esi,eax
c0022963:	89 d7                	mov    edi,edx
c0022965:	39 d1                	cmp    ecx,edx
c0022967:	72 27                	jb     c0022990 <__umoddi3+0x10c>
c0022969:	74 21                	je     c002298c <__umoddi3+0x108>
c002296b:	89 ca                	mov    edx,ecx
c002296d:	29 f3                	sub    ebx,esi
c002296f:	19 fa                	sbb    edx,edi
c0022971:	89 d0                	mov    eax,edx
c0022973:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0022977:	d3 e0                	shl    eax,cl
c0022979:	89 e9                	mov    ecx,ebp
c002297b:	d3 eb                	shr    ebx,cl
c002297d:	09 d8                	or     eax,ebx
c002297f:	d3 ea                	shr    edx,cl
c0022981:	83 c4 1c             	add    esp,0x1c
c0022984:	5b                   	pop    ebx
c0022985:	5e                   	pop    esi
c0022986:	5f                   	pop    edi
c0022987:	5d                   	pop    ebp
c0022988:	c3                   	ret    
c0022989:	8d 76 00             	lea    esi,[esi+0x0]
c002298c:	39 c3                	cmp    ebx,eax
c002298e:	73 db                	jae    c002296b <__umoddi3+0xe7>
c0022990:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022994:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0022998:	89 d7                	mov    edi,edx
c002299a:	89 c6                	mov    esi,eax
c002299c:	eb cd                	jmp    c002296b <__umoddi3+0xe7>

Disassembly of section .init:

c002299e <_init>:
c002299e:	55                   	push   ebp
c002299f:	89 e5                	mov    ebp,esp
c00229a1:	e8 72 d7 fd ff       	call   c0000118 <frame_dummy>
c00229a6:	e8 e5 fa ff ff       	call   c0022490 <__do_global_ctors_aux>
c00229ab:	5d                   	pop    ebp
c00229ac:	c3                   	ret    

Disassembly of section .fini:

c00229ad <_fini>:
c00229ad:	55                   	push   ebp
c00229ae:	89 e5                	mov    ebp,esp
c00229b0:	e8 f3 d6 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00229b5:	5d                   	pop    ebp
c00229b6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00229b8 <Computer::~Computer()>:
c00229b8:	83 ec 0c             	sub    esp,0xc
c00229bb:	ba d4 3f 02 c0       	mov    edx,0xc0023fd4
c00229c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229c4:	89 10                	mov    DWORD PTR [eax],edx
c00229c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ca:	83 ec 0c             	sub    esp,0xc
c00229cd:	50                   	push   eax
c00229ce:	e8 39 b7 fe ff       	call   c000e10c <Device::~Device()>
c00229d3:	83 c4 10             	add    esp,0x10
c00229d6:	90                   	nop
c00229d7:	83 c4 0c             	add    esp,0xc
c00229da:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00229dc <Computer::~Computer()>:
c00229dc:	83 ec 0c             	sub    esp,0xc
c00229df:	83 ec 0c             	sub    esp,0xc
c00229e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00229e6:	e8 cd ff ff ff       	call   c00229b8 <Computer::~Computer()>
c00229eb:	83 c4 10             	add    esp,0x10
c00229ee:	83 ec 08             	sub    esp,0x8
c00229f1:	68 ec 01 00 00       	push   0x1ec
c00229f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00229fa:	e8 1f a2 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00229ff:	83 c4 10             	add    esp,0x10
c0022a02:	83 c4 0c             	add    esp,0xc
c0022a05:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0022a06 <idleCommon()>:
c0022a06:	83 ec 0c             	sub    esp,0xc
c0022a09:	fa                   	cli    
c0022a0a:	ff 05 68 95 02 c0    	inc    DWORD PTR ds:0xc0029568
c0022a10:	e8 0b 5d ff ff       	call   c0018720 <schedule()>
c0022a15:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c0022a1a:	48                   	dec    eax
c0022a1b:	a3 68 95 02 c0       	mov    ds:0xc0029568,eax
c0022a20:	75 01                	jne    c0022a23 <idleCommon()+0x1d>
c0022a22:	fb                   	sti    
c0022a23:	83 c4 0c             	add    esp,0xc
c0022a26:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0022a28 <LinkedList<UnixFile>::~LinkedList()>:
c0022a28:	90                   	nop
c0022a29:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0022a2a <LinkedList<UnixFile>::LinkedList()>:
c0022a2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a2e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022a34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a38:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022a3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a43:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022a4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022a54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a58:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022a5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a63:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022a6a:	90                   	nop
c0022a6b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0022a6c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0022a6c:	83 ec 0c             	sub    esp,0xc
c0022a6f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022a74:	75 10                	jne    c0022a86 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0022a76:	83 ec 0c             	sub    esp,0xc
c0022a79:	68 a0 43 02 c0       	push   0xc00243a0
c0022a7e:	e8 38 1f ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0022a83:	83 c4 10             	add    esp,0x10
c0022a86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a8c:	85 c0                	test   eax,eax
c0022a8e:	74 34                	je     c0022ac4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022a97:	85 c0                	test   eax,eax
c0022a99:	74 29                	je     c0022ac4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022a9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a9f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022aa2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022aa6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022aa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022ab1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022ab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ab8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022abb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022ac2:	eb 65                	jmp    c0022b29 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022ac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ac8:	8b 00                	mov    eax,DWORD PTR [eax]
c0022aca:	85 c0                	test   eax,eax
c0022acc:	75 4b                	jne    c0022b19 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ad2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ad5:	85 c0                	test   eax,eax
c0022ad7:	75 40                	jne    c0022b19 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022add:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022ae1:	89 10                	mov    DWORD PTR [eax],edx
c0022ae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ae7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022aeb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022aee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022af2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022af5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022afc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b00:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b03:	85 c0                	test   eax,eax
c0022b05:	74 22                	je     c0022b29 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022b07:	83 ec 0c             	sub    esp,0xc
c0022b0a:	68 c2 43 02 c0       	push   0xc00243c2
c0022b0f:	e8 a7 1e ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0022b14:	83 c4 10             	add    esp,0x10
c0022b17:	eb 10                	jmp    c0022b29 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022b19:	83 ec 0c             	sub    esp,0xc
c0022b1c:	68 cc 43 02 c0       	push   0xc00243cc
c0022b21:	e8 95 1e ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0022b26:	83 c4 10             	add    esp,0x10
c0022b29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b2d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b30:	8d 50 01             	lea    edx,[eax+0x1]
c0022b33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b37:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022b3a:	90                   	nop
c0022b3b:	83 c4 0c             	add    esp,0xc
c0022b3e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0022b40 <LinkedList<UnixFile>::getFirstElement()>:
c0022b40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b44:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b46:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0022b48 <LinkedList<UnixFile>::removeFirst()>:
c0022b48:	83 ec 0c             	sub    esp,0xc
c0022b4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b51:	85 c0                	test   eax,eax
c0022b53:	75 12                	jne    c0022b67 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0022b55:	83 ec 0c             	sub    esp,0xc
c0022b58:	68 d8 43 02 c0       	push   0xc00243d8
c0022b5d:	e8 59 1e ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0022b62:	83 c4 10             	add    esp,0x10
c0022b65:	eb 7e                	jmp    c0022be5 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0022b67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b6e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b71:	85 c0                	test   eax,eax
c0022b73:	74 10                	je     c0022b85 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0022b75:	83 ec 0c             	sub    esp,0xc
c0022b78:	68 23 44 02 c0       	push   0xc0024423
c0022b7d:	e8 39 1e ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0022b82:	83 c4 10             	add    esp,0x10
c0022b85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b89:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b8b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b8e:	85 c0                	test   eax,eax
c0022b90:	75 33                	jne    c0022bc5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0022b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b96:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022b9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ba0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022ba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022bae:	83 f8 01             	cmp    eax,0x1
c0022bb1:	74 21                	je     c0022bd4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022bb3:	83 ec 0c             	sub    esp,0xc
c0022bb6:	68 fc 43 02 c0       	push   0xc00243fc
c0022bbb:	e8 fb 1d ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0022bc0:	83 c4 10             	add    esp,0x10
c0022bc3:	eb 0f                	jmp    c0022bd4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022bc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0022bcb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0022bce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bd2:	89 10                	mov    DWORD PTR [eax],edx
c0022bd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bd8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022bdb:	8d 50 ff             	lea    edx,[eax-0x1]
c0022bde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022be2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022be5:	83 c4 0c             	add    esp,0xc
c0022be8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0022bea <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0022bea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022bee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022bf1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0022bf2 <DriverlessDevice::~DriverlessDevice()>:
c0022bf2:	ba 3c 4c 02 c0       	mov    edx,0xc0024c3c
c0022bf7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022bfb:	89 10                	mov    DWORD PTR [eax],edx
c0022bfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c01:	50                   	push   eax
c0022c02:	e8 05 b5 fe ff       	call   c000e10c <Device::~Device()>
c0022c07:	83 c4 04             	add    esp,0x4
c0022c0a:	90                   	nop
c0022c0b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0022c0c <DriverlessDevice::~DriverlessDevice()>:
c0022c0c:	83 ec 0c             	sub    esp,0xc
c0022c0f:	83 ec 0c             	sub    esp,0xc
c0022c12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c16:	e8 d7 ff ff ff       	call   c0022bf2 <DriverlessDevice::~DriverlessDevice()>
c0022c1b:	83 c4 10             	add    esp,0x10
c0022c1e:	83 ec 08             	sub    esp,0x8
c0022c21:	68 58 01 00 00       	push   0x158
c0022c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c2a:	e8 ef 9f fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0022c2f:	83 c4 10             	add    esp,0x10
c0022c32:	83 c4 0c             	add    esp,0xc
c0022c35:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0022c36 <LinkedList<Device>::addElement(Device*)>:
c0022c36:	83 ec 0c             	sub    esp,0xc
c0022c39:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022c3e:	75 10                	jne    c0022c50 <LinkedList<Device>::addElement(Device*)+0x1a>
c0022c40:	83 ec 0c             	sub    esp,0xc
c0022c43:	68 a0 43 02 c0       	push   0xc00243a0
c0022c48:	e8 6e 1d ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0022c4d:	83 c4 10             	add    esp,0x10
c0022c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c54:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c56:	85 c0                	test   eax,eax
c0022c58:	74 3a                	je     c0022c94 <LinkedList<Device>::addElement(Device*)+0x5e>
c0022c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022c61:	85 c0                	test   eax,eax
c0022c63:	74 2f                	je     c0022c94 <LinkedList<Device>::addElement(Device*)+0x5e>
c0022c65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c69:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022c6c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022c70:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0022c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c7a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022c7e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022c88:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022c92:	eb 68                	jmp    c0022cfc <LinkedList<Device>::addElement(Device*)+0xc6>
c0022c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c98:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c9a:	85 c0                	test   eax,eax
c0022c9c:	75 4e                	jne    c0022cec <LinkedList<Device>::addElement(Device*)+0xb6>
c0022c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ca2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ca5:	85 c0                	test   eax,eax
c0022ca7:	75 43                	jne    c0022cec <LinkedList<Device>::addElement(Device*)+0xb6>
c0022ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022cb1:	89 10                	mov    DWORD PTR [eax],edx
c0022cb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cb7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022cbb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022cc5:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cd3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022cd6:	85 c0                	test   eax,eax
c0022cd8:	74 22                	je     c0022cfc <LinkedList<Device>::addElement(Device*)+0xc6>
c0022cda:	83 ec 0c             	sub    esp,0xc
c0022cdd:	68 c2 43 02 c0       	push   0xc00243c2
c0022ce2:	e8 d4 1c ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0022ce7:	83 c4 10             	add    esp,0x10
c0022cea:	eb 10                	jmp    c0022cfc <LinkedList<Device>::addElement(Device*)+0xc6>
c0022cec:	83 ec 0c             	sub    esp,0xc
c0022cef:	68 cc 43 02 c0       	push   0xc00243cc
c0022cf4:	e8 c2 1c ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0022cf9:	83 c4 10             	add    esp,0x10
c0022cfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d00:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d03:	8d 50 01             	lea    edx,[eax+0x1]
c0022d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d0a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022d0d:	90                   	nop
c0022d0e:	83 c4 0c             	add    esp,0xc
c0022d11:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0022d12 <LinkedList<Device>::LinkedList()>:
c0022d12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d16:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022d1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d20:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022d27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d2b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022d32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d36:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022d3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d40:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022d47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d4b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022d52:	90                   	nop
c0022d53:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0022d54 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0022d54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d58:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d5a:	85 c0                	test   eax,eax
c0022d5c:	75 0e                	jne    c0022d6c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022d5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d65:	85 c0                	test   eax,eax
c0022d67:	75 03                	jne    c0022d6c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022d69:	b0 01                	mov    al,0x1
c0022d6b:	c3                   	ret    
c0022d6c:	b0 00                	mov    al,0x0
c0022d6e:	90                   	nop
c0022d6f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0022d70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0022d70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d74:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d76:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0022d78 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0022d78:	83 ec 0c             	sub    esp,0xc
c0022d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d81:	85 c0                	test   eax,eax
c0022d83:	75 17                	jne    c0022d9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0022d85:	83 ec 0c             	sub    esp,0xc
c0022d88:	68 d8 43 02 c0       	push   0xc00243d8
c0022d8d:	e8 29 1c ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0022d92:	83 c4 10             	add    esp,0x10
c0022d95:	e9 92 00 00 00       	jmp    c0022e2c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c0022d9a:	66 90                	xchg   ax,ax
c0022d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022da0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022da3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022da6:	85 c0                	test   eax,eax
c0022da8:	0f 95 c0             	setne  al
c0022dab:	84 c0                	test   al,al
c0022dad:	74 11                	je     c0022dc0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c0022daf:	83 ec 0c             	sub    esp,0xc
c0022db2:	68 23 44 02 c0       	push   0xc0024423
c0022db7:	e8 ff 1b ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0022dbc:	83 c4 10             	add    esp,0x10
c0022dbf:	90                   	nop
c0022dc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022dc6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022dc9:	85 c0                	test   eax,eax
c0022dcb:	0f 94 c0             	sete   al
c0022dce:	84 c0                	test   al,al
c0022dd0:	74 36                	je     c0022e08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0022dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dd6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022de0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022de7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022deb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022dee:	83 f8 01             	cmp    eax,0x1
c0022df1:	74 25                	je     c0022e18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022df3:	83 ec 0c             	sub    esp,0xc
c0022df6:	68 fc 43 02 c0       	push   0xc00243fc
c0022dfb:	e8 bb 1b ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0022e00:	83 c4 10             	add    esp,0x10
c0022e03:	eb 13                	jmp    c0022e18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022e05:	8d 76 00             	lea    esi,[esi+0x0]
c0022e08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e0e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0022e11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e15:	89 10                	mov    DWORD PTR [eax],edx
c0022e17:	90                   	nop
c0022e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e1c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022e1f:	8d 50 ff             	lea    edx,[eax-0x1]
c0022e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e26:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022e29:	8d 76 00             	lea    esi,[esi+0x0]
c0022e2c:	83 c4 0c             	add    esp,0xc
c0022e2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0022e30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0022e30:	83 ec 0c             	sub    esp,0xc
c0022e33:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022e38:	75 12                	jne    c0022e4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0022e3a:	83 ec 0c             	sub    esp,0xc
c0022e3d:	68 a0 43 02 c0       	push   0xc00243a0
c0022e42:	e8 74 1b ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0022e47:	83 c4 10             	add    esp,0x10
c0022e4a:	66 90                	xchg   ax,ax
c0022e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e50:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e52:	85 c0                	test   eax,eax
c0022e54:	74 36                	je     c0022e8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022e56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022e5d:	85 c0                	test   eax,eax
c0022e5f:	74 2b                	je     c0022e8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022e61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022e68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022e6c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0022e6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022e77:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022e81:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022e88:	eb 6a                	jmp    c0022ef4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022e8a:	66 90                	xchg   ax,ax
c0022e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e90:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e92:	85 c0                	test   eax,eax
c0022e94:	75 4e                	jne    c0022ee4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022e96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022e9d:	85 c0                	test   eax,eax
c0022e9f:	75 43                	jne    c0022ee4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022ea1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ea5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022ea9:	89 10                	mov    DWORD PTR [eax],edx
c0022eab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022eb3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022eb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ebd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ec8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022ecb:	85 c0                	test   eax,eax
c0022ecd:	74 25                	je     c0022ef4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022ecf:	83 ec 0c             	sub    esp,0xc
c0022ed2:	68 c2 43 02 c0       	push   0xc00243c2
c0022ed7:	e8 df 1a ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0022edc:	83 c4 10             	add    esp,0x10
c0022edf:	eb 13                	jmp    c0022ef4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022ee1:	8d 76 00             	lea    esi,[esi+0x0]
c0022ee4:	83 ec 0c             	sub    esp,0xc
c0022ee7:	68 cc 43 02 c0       	push   0xc00243cc
c0022eec:	e8 ca 1a ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0022ef1:	83 c4 10             	add    esp,0x10
c0022ef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ef8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022efb:	8d 50 01             	lea    edx,[eax+0x1]
c0022efe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f02:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022f05:	90                   	nop
c0022f06:	83 c4 0c             	add    esp,0xc
c0022f09:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0022f0c <ACPI::~ACPI()>:
c0022f0c:	83 ec 0c             	sub    esp,0xc
c0022f0f:	ba a8 56 02 c0       	mov    edx,0xc00256a8
c0022f14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f18:	89 10                	mov    DWORD PTR [eax],edx
c0022f1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f1e:	83 ec 0c             	sub    esp,0xc
c0022f21:	50                   	push   eax
c0022f22:	e8 e5 b1 fe ff       	call   c000e10c <Device::~Device()>
c0022f27:	83 c4 10             	add    esp,0x10
c0022f2a:	90                   	nop
c0022f2b:	83 c4 0c             	add    esp,0xc
c0022f2e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0022f30 <ACPI::~ACPI()>:
c0022f30:	83 ec 0c             	sub    esp,0xc
c0022f33:	83 ec 0c             	sub    esp,0xc
c0022f36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f3a:	e8 cd ff ff ff       	call   c0022f0c <ACPI::~ACPI()>
c0022f3f:	83 c4 10             	add    esp,0x10
c0022f42:	83 ec 08             	sub    esp,0x8
c0022f45:	68 64 12 00 00       	push   0x1264
c0022f4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f4e:	e8 cb 9c fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0022f53:	83 c4 10             	add    esp,0x10
c0022f56:	83 c4 0c             	add    esp,0xc
c0022f59:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0022f5c <LinkedList<Device>::~LinkedList()>:
c0022f5c:	90                   	nop
c0022f5d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0022f60 <LinkedList<Device>::isEmpty()>:
c0022f60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f64:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f66:	85 c0                	test   eax,eax
c0022f68:	75 0e                	jne    c0022f78 <LinkedList<Device>::isEmpty()+0x18>
c0022f6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022f71:	85 c0                	test   eax,eax
c0022f73:	75 03                	jne    c0022f78 <LinkedList<Device>::isEmpty()+0x18>
c0022f75:	b0 01                	mov    al,0x1
c0022f77:	c3                   	ret    
c0022f78:	b0 00                	mov    al,0x0
c0022f7a:	90                   	nop
c0022f7b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0022f7c <LinkedList<Device>::getFirstElement()>:
c0022f7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f80:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0022f84 <LinkedList<Device>::removeFirst()>:
c0022f84:	83 ec 0c             	sub    esp,0xc
c0022f87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f8d:	85 c0                	test   eax,eax
c0022f8f:	75 17                	jne    c0022fa8 <LinkedList<Device>::removeFirst()+0x24>
c0022f91:	83 ec 0c             	sub    esp,0xc
c0022f94:	68 d8 43 02 c0       	push   0xc00243d8
c0022f99:	e8 1d 1a ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0022f9e:	83 c4 10             	add    esp,0x10
c0022fa1:	e9 92 00 00 00       	jmp    c0023038 <LinkedList<Device>::removeFirst()+0xb4>
c0022fa6:	66 90                	xchg   ax,ax
c0022fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022faf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022fb5:	85 c0                	test   eax,eax
c0022fb7:	74 13                	je     c0022fcc <LinkedList<Device>::removeFirst()+0x48>
c0022fb9:	83 ec 0c             	sub    esp,0xc
c0022fbc:	68 23 44 02 c0       	push   0xc0024423
c0022fc1:	e8 f5 19 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c0022fc6:	83 c4 10             	add    esp,0x10
c0022fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0022fcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022fd2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022fd8:	85 c0                	test   eax,eax
c0022fda:	75 34                	jne    c0023010 <LinkedList<Device>::removeFirst()+0x8c>
c0022fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fe0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022ff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ff5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022ff8:	83 f8 01             	cmp    eax,0x1
c0022ffb:	74 27                	je     c0023024 <LinkedList<Device>::removeFirst()+0xa0>
c0022ffd:	83 ec 0c             	sub    esp,0xc
c0023000:	68 fc 43 02 c0       	push   0xc00243fc
c0023005:	e8 b1 19 ff ff       	call   c00149bb <Krnl::panic(char const*)>
c002300a:	83 c4 10             	add    esp,0x10
c002300d:	eb 15                	jmp    c0023024 <LinkedList<Device>::removeFirst()+0xa0>
c002300f:	90                   	nop
c0023010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023014:	8b 00                	mov    eax,DWORD PTR [eax]
c0023016:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002301c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023020:	89 10                	mov    DWORD PTR [eax],edx
c0023022:	66 90                	xchg   ax,ax
c0023024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023028:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002302b:	8d 50 ff             	lea    edx,[eax-0x1]
c002302e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023032:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023035:	8d 76 00             	lea    esi,[esi+0x0]
c0023038:	83 c4 0c             	add    esp,0xc
c002303b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002303c <CPU::~CPU()>:
c002303c:	83 ec 0c             	sub    esp,0xc
c002303f:	ba 84 5a 02 c0       	mov    edx,0xc0025a84
c0023044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023048:	89 10                	mov    DWORD PTR [eax],edx
c002304a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002304e:	83 ec 0c             	sub    esp,0xc
c0023051:	50                   	push   eax
c0023052:	e8 b5 b0 fe ff       	call   c000e10c <Device::~Device()>
c0023057:	83 c4 10             	add    esp,0x10
c002305a:	90                   	nop
c002305b:	83 c4 0c             	add    esp,0xc
c002305e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0023060 <CPU::~CPU()>:
c0023060:	83 ec 0c             	sub    esp,0xc
c0023063:	83 ec 0c             	sub    esp,0xc
c0023066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002306a:	e8 cd ff ff ff       	call   c002303c <CPU::~CPU()>
c002306f:	83 c4 10             	add    esp,0x10
c0023072:	83 ec 08             	sub    esp,0x8
c0023075:	68 98 11 00 00       	push   0x1198
c002307a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002307e:	e8 9b 9b fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0023083:	83 c4 10             	add    esp,0x10
c0023086:	83 c4 0c             	add    esp,0xc
c0023089:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002308c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002308c:	90                   	nop
c002308d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0023090 <ThreadControlBlock::ThreadControlBlock()>:
c0023090:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023094:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002309b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002309f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00230a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230aa:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00230b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230b5:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c00230bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230c0:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c00230c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230cb:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00230cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230d3:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c00230d7:	90                   	nop
c00230d8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00230dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00230dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00230e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00230f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230f5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00230fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023100:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023106:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002310a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023111:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023115:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002311c:	90                   	nop
c002311d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0023120 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0023120:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023124:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023127:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0023128 <Vm::_FPUState::_FPUState()>:
c0023128:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002312c:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0023133:	90                   	nop
c0023134:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0023136 <PCI::~PCI()>:
c0023136:	83 ec 0c             	sub    esp,0xc
c0023139:	ba 8c 68 02 c0       	mov    edx,0xc002688c
c002313e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023142:	89 10                	mov    DWORD PTR [eax],edx
c0023144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023148:	83 ec 0c             	sub    esp,0xc
c002314b:	50                   	push   eax
c002314c:	e8 8b a9 fe ff       	call   c000dadc <Bus::~Bus()>
c0023151:	83 c4 10             	add    esp,0x10
c0023154:	90                   	nop
c0023155:	83 c4 0c             	add    esp,0xc
c0023158:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002315a <PCI::~PCI()>:
c002315a:	83 ec 0c             	sub    esp,0xc
c002315d:	83 ec 0c             	sub    esp,0xc
c0023160:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023164:	e8 cd ff ff ff       	call   c0023136 <PCI::~PCI()>
c0023169:	83 c4 10             	add    esp,0x10
c002316c:	83 ec 08             	sub    esp,0x8
c002316f:	68 5c 01 00 00       	push   0x15c
c0023174:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023178:	e8 a1 9a fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c002317d:	83 c4 10             	add    esp,0x10
c0023180:	83 c4 0c             	add    esp,0xc
c0023183:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0023184 <IDE::~IDE()>:
c0023184:	83 ec 0c             	sub    esp,0xc
c0023187:	ba 40 69 02 c0       	mov    edx,0xc0026940
c002318c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023190:	89 10                	mov    DWORD PTR [eax],edx
c0023192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023196:	83 ec 0c             	sub    esp,0xc
c0023199:	50                   	push   eax
c002319a:	e8 85 b4 fe ff       	call   c000e624 <HardDiskController::~HardDiskController()>
c002319f:	83 c4 10             	add    esp,0x10
c00231a2:	90                   	nop
c00231a3:	83 c4 0c             	add    esp,0xc
c00231a6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00231a8 <IDE::~IDE()>:
c00231a8:	83 ec 0c             	sub    esp,0xc
c00231ab:	83 ec 0c             	sub    esp,0xc
c00231ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231b2:	e8 cd ff ff ff       	call   c0023184 <IDE::~IDE()>
c00231b7:	83 c4 10             	add    esp,0x10
c00231ba:	83 ec 08             	sub    esp,0x8
c00231bd:	68 70 02 00 00       	push   0x270
c00231c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231c6:	e8 53 9a fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00231cb:	83 c4 10             	add    esp,0x10
c00231ce:	83 c4 0c             	add    esp,0xc
c00231d1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00231d2 <SATABus::~SATABus()>:
c00231d2:	83 ec 0c             	sub    esp,0xc
c00231d5:	ba 94 6a 02 c0       	mov    edx,0xc0026a94
c00231da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231de:	89 10                	mov    DWORD PTR [eax],edx
c00231e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231e4:	83 ec 0c             	sub    esp,0xc
c00231e7:	50                   	push   eax
c00231e8:	e8 37 b4 fe ff       	call   c000e624 <HardDiskController::~HardDiskController()>
c00231ed:	83 c4 10             	add    esp,0x10
c00231f0:	90                   	nop
c00231f1:	83 c4 0c             	add    esp,0xc
c00231f4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00231f6 <SATABus::~SATABus()>:
c00231f6:	83 ec 0c             	sub    esp,0xc
c00231f9:	83 ec 0c             	sub    esp,0xc
c00231fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023200:	e8 cd ff ff ff       	call   c00231d2 <SATABus::~SATABus()>
c0023205:	83 c4 10             	add    esp,0x10
c0023208:	83 ec 08             	sub    esp,0x8
c002320b:	68 64 01 00 00       	push   0x164
c0023210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023214:	e8 05 9a fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0023219:	83 c4 10             	add    esp,0x10
c002321c:	83 c4 0c             	add    esp,0xc
c002321f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0023220 <ATA::~ATA()>:
c0023220:	83 ec 0c             	sub    esp,0xc
c0023223:	ba 0c 6b 02 c0       	mov    edx,0xc0026b0c
c0023228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002322c:	89 10                	mov    DWORD PTR [eax],edx
c002322e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023232:	83 ec 0c             	sub    esp,0xc
c0023235:	50                   	push   eax
c0023236:	e8 cb b4 fe ff       	call   c000e706 <PhysicalDisk::~PhysicalDisk()>
c002323b:	83 c4 10             	add    esp,0x10
c002323e:	90                   	nop
c002323f:	83 c4 0c             	add    esp,0xc
c0023242:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0023244 <ATA::~ATA()>:
c0023244:	83 ec 0c             	sub    esp,0xc
c0023247:	83 ec 0c             	sub    esp,0xc
c002324a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002324e:	e8 cd ff ff ff       	call   c0023220 <ATA::~ATA()>
c0023253:	83 c4 10             	add    esp,0x10
c0023256:	83 ec 08             	sub    esp,0x8
c0023259:	68 7c 01 00 00       	push   0x17c
c002325e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023262:	e8 b7 99 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0023267:	83 c4 10             	add    esp,0x10
c002326a:	83 c4 0c             	add    esp,0xc
c002326d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002326e <ATAPI::~ATAPI()>:
c002326e:	83 ec 0c             	sub    esp,0xc
c0023271:	ba 44 6b 02 c0       	mov    edx,0xc0026b44
c0023276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002327a:	89 10                	mov    DWORD PTR [eax],edx
c002327c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023280:	83 ec 0c             	sub    esp,0xc
c0023283:	50                   	push   eax
c0023284:	e8 7d b4 fe ff       	call   c000e706 <PhysicalDisk::~PhysicalDisk()>
c0023289:	83 c4 10             	add    esp,0x10
c002328c:	90                   	nop
c002328d:	83 c4 0c             	add    esp,0xc
c0023290:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0023292 <ATAPI::~ATAPI()>:
c0023292:	83 ec 0c             	sub    esp,0xc
c0023295:	83 ec 0c             	sub    esp,0xc
c0023298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002329c:	e8 cd ff ff ff       	call   c002326e <ATAPI::~ATAPI()>
c00232a1:	83 c4 10             	add    esp,0x10
c00232a4:	83 ec 08             	sub    esp,0x8
c00232a7:	68 80 01 00 00       	push   0x180
c00232ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232b0:	e8 69 99 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00232b5:	83 c4 10             	add    esp,0x10
c00232b8:	83 c4 0c             	add    esp,0xc
c00232bb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00232bc <SATA::~SATA()>:
c00232bc:	83 ec 0c             	sub    esp,0xc
c00232bf:	ba 80 6d 02 c0       	mov    edx,0xc0026d80
c00232c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232c8:	89 10                	mov    DWORD PTR [eax],edx
c00232ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232ce:	83 ec 0c             	sub    esp,0xc
c00232d1:	50                   	push   eax
c00232d2:	e8 2f b4 fe ff       	call   c000e706 <PhysicalDisk::~PhysicalDisk()>
c00232d7:	83 c4 10             	add    esp,0x10
c00232da:	90                   	nop
c00232db:	83 c4 0c             	add    esp,0xc
c00232de:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00232e0 <SATA::~SATA()>:
c00232e0:	83 ec 0c             	sub    esp,0xc
c00232e3:	83 ec 0c             	sub    esp,0xc
c00232e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232ea:	e8 cd ff ff ff       	call   c00232bc <SATA::~SATA()>
c00232ef:	83 c4 10             	add    esp,0x10
c00232f2:	83 ec 08             	sub    esp,0x8
c00232f5:	68 7c 01 00 00       	push   0x17c
c00232fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232fe:	e8 1b 99 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0023303:	83 c4 10             	add    esp,0x10
c0023306:	83 c4 0c             	add    esp,0xc
c0023309:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002330a <SATAPI::~SATAPI()>:
c002330a:	83 ec 0c             	sub    esp,0xc
c002330d:	ba 38 6f 02 c0       	mov    edx,0xc0026f38
c0023312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023316:	89 10                	mov    DWORD PTR [eax],edx
c0023318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002331c:	83 ec 0c             	sub    esp,0xc
c002331f:	50                   	push   eax
c0023320:	e8 e1 b3 fe ff       	call   c000e706 <PhysicalDisk::~PhysicalDisk()>
c0023325:	83 c4 10             	add    esp,0x10
c0023328:	90                   	nop
c0023329:	83 c4 0c             	add    esp,0xc
c002332c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002332e <SATAPI::~SATAPI()>:
c002332e:	83 ec 0c             	sub    esp,0xc
c0023331:	83 ec 0c             	sub    esp,0xc
c0023334:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023338:	e8 cd ff ff ff       	call   c002330a <SATAPI::~SATAPI()>
c002333d:	83 c4 10             	add    esp,0x10
c0023340:	83 ec 08             	sub    esp,0x8
c0023343:	68 84 01 00 00       	push   0x184
c0023348:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002334c:	e8 cd 98 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0023351:	83 c4 10             	add    esp,0x10
c0023354:	83 c4 0c             	add    esp,0xc
c0023357:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0023358 <AVX::~AVX()>:
c0023358:	83 ec 0c             	sub    esp,0xc
c002335b:	ba 78 6f 02 c0       	mov    edx,0xc0026f78
c0023360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023364:	89 10                	mov    DWORD PTR [eax],edx
c0023366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002336a:	83 ec 0c             	sub    esp,0xc
c002336d:	50                   	push   eax
c002336e:	e8 19 b4 fe ff       	call   c000e78c <FPU::~FPU()>
c0023373:	83 c4 10             	add    esp,0x10
c0023376:	90                   	nop
c0023377:	83 c4 0c             	add    esp,0xc
c002337a:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c002337c <AVX::~AVX()>:
c002337c:	83 ec 0c             	sub    esp,0xc
c002337f:	83 ec 0c             	sub    esp,0xc
c0023382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023386:	e8 cd ff ff ff       	call   c0023358 <AVX::~AVX()>
c002338b:	83 c4 10             	add    esp,0x10
c002338e:	83 ec 08             	sub    esp,0x8
c0023391:	68 58 01 00 00       	push   0x158
c0023396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002339a:	e8 7f 98 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c002339f:	83 c4 10             	add    esp,0x10
c00233a2:	83 c4 0c             	add    esp,0xc
c00233a5:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c00233a8 <MMX::~MMX()>:
c00233a8:	83 ec 0c             	sub    esp,0xc
c00233ab:	ba b8 6f 02 c0       	mov    edx,0xc0026fb8
c00233b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233b4:	89 10                	mov    DWORD PTR [eax],edx
c00233b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233ba:	83 ec 0c             	sub    esp,0xc
c00233bd:	50                   	push   eax
c00233be:	e8 c9 b3 fe ff       	call   c000e78c <FPU::~FPU()>
c00233c3:	83 c4 10             	add    esp,0x10
c00233c6:	90                   	nop
c00233c7:	83 c4 0c             	add    esp,0xc
c00233ca:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00233cc <MMX::~MMX()>:
c00233cc:	83 ec 0c             	sub    esp,0xc
c00233cf:	83 ec 0c             	sub    esp,0xc
c00233d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233d6:	e8 cd ff ff ff       	call   c00233a8 <MMX::~MMX()>
c00233db:	83 c4 10             	add    esp,0x10
c00233de:	83 ec 08             	sub    esp,0x8
c00233e1:	68 58 01 00 00       	push   0x158
c00233e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233ea:	e8 2f 98 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00233ef:	83 c4 10             	add    esp,0x10
c00233f2:	83 c4 0c             	add    esp,0xc
c00233f5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00233f8 <SSE::~SSE()>:
c00233f8:	83 ec 0c             	sub    esp,0xc
c00233fb:	ba f8 6f 02 c0       	mov    edx,0xc0026ff8
c0023400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023404:	89 10                	mov    DWORD PTR [eax],edx
c0023406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002340a:	83 ec 0c             	sub    esp,0xc
c002340d:	50                   	push   eax
c002340e:	e8 79 b3 fe ff       	call   c000e78c <FPU::~FPU()>
c0023413:	83 c4 10             	add    esp,0x10
c0023416:	90                   	nop
c0023417:	83 c4 0c             	add    esp,0xc
c002341a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002341c <SSE::~SSE()>:
c002341c:	83 ec 0c             	sub    esp,0xc
c002341f:	83 ec 0c             	sub    esp,0xc
c0023422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023426:	e8 cd ff ff ff       	call   c00233f8 <SSE::~SSE()>
c002342b:	83 c4 10             	add    esp,0x10
c002342e:	83 ec 08             	sub    esp,0x8
c0023431:	68 58 01 00 00       	push   0x158
c0023436:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002343a:	e8 df 97 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c002343f:	83 c4 10             	add    esp,0x10
c0023442:	83 c4 0c             	add    esp,0xc
c0023445:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0023448 <x87::~x87()>:
c0023448:	83 ec 0c             	sub    esp,0xc
c002344b:	ba 38 70 02 c0       	mov    edx,0xc0027038
c0023450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023454:	89 10                	mov    DWORD PTR [eax],edx
c0023456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002345a:	83 ec 0c             	sub    esp,0xc
c002345d:	50                   	push   eax
c002345e:	e8 29 b3 fe ff       	call   c000e78c <FPU::~FPU()>
c0023463:	83 c4 10             	add    esp,0x10
c0023466:	90                   	nop
c0023467:	83 c4 0c             	add    esp,0xc
c002346a:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002346c <x87::~x87()>:
c002346c:	83 ec 0c             	sub    esp,0xc
c002346f:	83 ec 0c             	sub    esp,0xc
c0023472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023476:	e8 cd ff ff ff       	call   c0023448 <x87::~x87()>
c002347b:	83 c4 10             	add    esp,0x10
c002347e:	83 ec 08             	sub    esp,0x8
c0023481:	68 58 01 00 00       	push   0x158
c0023486:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002348a:	e8 8f 97 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c002348f:	83 c4 10             	add    esp,0x10
c0023492:	83 c4 0c             	add    esp,0xc
c0023495:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0023496 <IOAPIC::~IOAPIC()>:
c0023496:	83 ec 0c             	sub    esp,0xc
c0023499:	ba 90 71 02 c0       	mov    edx,0xc0027190
c002349e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234a2:	89 10                	mov    DWORD PTR [eax],edx
c00234a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234a8:	83 ec 0c             	sub    esp,0xc
c00234ab:	50                   	push   eax
c00234ac:	e8 5b ac fe ff       	call   c000e10c <Device::~Device()>
c00234b1:	83 c4 10             	add    esp,0x10
c00234b4:	90                   	nop
c00234b5:	83 c4 0c             	add    esp,0xc
c00234b8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00234ba <IOAPIC::~IOAPIC()>:
c00234ba:	83 ec 0c             	sub    esp,0xc
c00234bd:	83 ec 0c             	sub    esp,0xc
c00234c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234c4:	e8 cd ff ff ff       	call   c0023496 <IOAPIC::~IOAPIC()>
c00234c9:	83 c4 10             	add    esp,0x10
c00234cc:	83 ec 08             	sub    esp,0x8
c00234cf:	68 68 01 00 00       	push   0x168
c00234d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234d8:	e8 41 97 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00234dd:	83 c4 10             	add    esp,0x10
c00234e0:	83 c4 0c             	add    esp,0xc
c00234e3:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00234e4 <APIC::~APIC()>:
c00234e4:	83 ec 0c             	sub    esp,0xc
c00234e7:	ba 48 71 02 c0       	mov    edx,0xc0027148
c00234ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234f0:	89 10                	mov    DWORD PTR [eax],edx
c00234f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234f6:	83 ec 0c             	sub    esp,0xc
c00234f9:	50                   	push   eax
c00234fa:	e8 61 b7 fe ff       	call   c000ec60 <InterruptController::~InterruptController()>
c00234ff:	83 c4 10             	add    esp,0x10
c0023502:	90                   	nop
c0023503:	83 c4 0c             	add    esp,0xc
c0023506:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0023508 <APIC::~APIC()>:
c0023508:	83 ec 0c             	sub    esp,0xc
c002350b:	83 ec 0c             	sub    esp,0xc
c002350e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023512:	e8 cd ff ff ff       	call   c00234e4 <APIC::~APIC()>
c0023517:	83 c4 10             	add    esp,0x10
c002351a:	83 ec 08             	sub    esp,0x8
c002351d:	68 58 21 00 00       	push   0x2158
c0023522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023526:	e8 f3 96 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c002352b:	83 c4 10             	add    esp,0x10
c002352e:	83 c4 0c             	add    esp,0xc
c0023531:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0023532 <PIC::~PIC()>:
c0023532:	83 ec 0c             	sub    esp,0xc
c0023535:	ba e0 71 02 c0       	mov    edx,0xc00271e0
c002353a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002353e:	89 10                	mov    DWORD PTR [eax],edx
c0023540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023544:	83 ec 0c             	sub    esp,0xc
c0023547:	50                   	push   eax
c0023548:	e8 13 b7 fe ff       	call   c000ec60 <InterruptController::~InterruptController()>
c002354d:	83 c4 10             	add    esp,0x10
c0023550:	90                   	nop
c0023551:	83 c4 0c             	add    esp,0xc
c0023554:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0023556 <PIC::~PIC()>:
c0023556:	83 ec 0c             	sub    esp,0xc
c0023559:	83 ec 0c             	sub    esp,0xc
c002355c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023560:	e8 cd ff ff ff       	call   c0023532 <PIC::~PIC()>
c0023565:	83 c4 10             	add    esp,0x10
c0023568:	83 ec 08             	sub    esp,0x8
c002356b:	68 58 21 00 00       	push   0x2158
c0023570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023574:	e8 a5 96 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0023579:	83 c4 10             	add    esp,0x10
c002357c:	83 c4 0c             	add    esp,0xc
c002357f:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0023580 <APICTimer::~APICTimer()>:
c0023580:	83 ec 0c             	sub    esp,0xc
c0023583:	ba 34 72 02 c0       	mov    edx,0xc0027234
c0023588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002358c:	89 10                	mov    DWORD PTR [eax],edx
c002358e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023592:	83 ec 0c             	sub    esp,0xc
c0023595:	50                   	push   eax
c0023596:	e8 09 d5 fe ff       	call   c0010aa4 <Timer::~Timer()>
c002359b:	83 c4 10             	add    esp,0x10
c002359e:	90                   	nop
c002359f:	83 c4 0c             	add    esp,0xc
c00235a2:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00235a4 <APICTimer::~APICTimer()>:
c00235a4:	83 ec 0c             	sub    esp,0xc
c00235a7:	83 ec 0c             	sub    esp,0xc
c00235aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00235ae:	e8 cd ff ff ff       	call   c0023580 <APICTimer::~APICTimer()>
c00235b3:	83 c4 10             	add    esp,0x10
c00235b6:	83 ec 08             	sub    esp,0x8
c00235b9:	68 60 01 00 00       	push   0x160
c00235be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00235c2:	e8 57 96 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00235c7:	83 c4 10             	add    esp,0x10
c00235ca:	83 c4 0c             	add    esp,0xc
c00235cd:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00235d0 <PIT::~PIT()>:
c00235d0:	83 ec 0c             	sub    esp,0xc
c00235d3:	ba 84 72 02 c0       	mov    edx,0xc0027284
c00235d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235dc:	89 10                	mov    DWORD PTR [eax],edx
c00235de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235e2:	83 ec 0c             	sub    esp,0xc
c00235e5:	50                   	push   eax
c00235e6:	e8 b9 d4 fe ff       	call   c0010aa4 <Timer::~Timer()>
c00235eb:	83 c4 10             	add    esp,0x10
c00235ee:	90                   	nop
c00235ef:	83 c4 0c             	add    esp,0xc
c00235f2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00235f4 <PIT::~PIT()>:
c00235f4:	83 ec 0c             	sub    esp,0xc
c00235f7:	83 ec 0c             	sub    esp,0xc
c00235fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00235fe:	e8 cd ff ff ff       	call   c00235d0 <PIT::~PIT()>
c0023603:	83 c4 10             	add    esp,0x10
c0023606:	83 ec 08             	sub    esp,0x8
c0023609:	68 5c 01 00 00       	push   0x15c
c002360e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023612:	e8 07 96 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0023617:	83 c4 10             	add    esp,0x10
c002361a:	83 c4 0c             	add    esp,0xc
c002361d:	c3                   	ret    
